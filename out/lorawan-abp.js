// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [function($0, $1, $2, $3, $4, $5) { window.MbedJSHal.lora.sendFsk($0, $1, $2, $3, $4, $5); },
 function($0, $1, $2, $3, $4, $5) { window.MbedJSHal.lora.sendLoRa($0, $1, $2, $3, $4, $5); },
 function() { console.log('receive', Date.now()); },
 function() { return Date.now(); },
 function() { return Math.random() * 0x8000000 | 0; },
 function($0, $1) { MbedJSHal.gpio.write($0, $1); },
 function() { console.log('rx_frame', Date.now()); },
 function($0) { window.MbedJSHal.lora.init($0); },
 function($0, $1) { MbedJSHal.gpio.init_in($0, $1, 3); },
 function($0, $1) { MbedJSHal.gpio.init_out($0, $1, 0); },
 function($0, $1, $2) { MbedJSHal.gpio.init_out($0, $1, $2); },
 function($0, $1, $2, $3, $4) { MbedJSHal.gpio.init_inout($0, $1, $2, $3, $4); },
 function($0, $1) { MbedJSHal.gpio.irq_init($0, $1); },
 function($0, $1) { MbedJSHal.gpio.irq_free($0); },
 function($0) { window.MbedJSHal.timers.ticker_detach($0); },
 function($0, $1) { window.MbedJSHal.timers.ticker_setup($0, $1); },
 function($0, $1, $2) { window.MbedJSHal.sht31.init($0, $1, $2); }];

function _emscripten_asm_const_iii(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}

function _emscripten_asm_const_iiiiii(code, a0, a1, a2, a3, a4) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4);
}

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
  return ASM_CONSTS[code](a0, a1, a2);
}

function _emscripten_asm_const_i(code) {
  return ASM_CONSTS[code]();
}

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iiiiiii(code, a0, a1, a2, a3, a4, a5) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5);
}




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 24848;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_main_cpp() } });


memoryInitializer = "lorawan-abp.js.mem";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      var fflush = Module["_fflush"];
      if (fflush) fflush(0);
      var printChar = ___syscall146.printChar;
      if (!printChar) return;
      var buffers = ___syscall146.buffers;
      if (buffers[1].length) printChar(1, 10);
      if (buffers[2].length) printChar(2, 10);
    }function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffers) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___unlock() {}

   

  function _abort() {
      Module['abort']();
    }

   

   

  
  var ___async_cur_frame=0; 

  var _emscripten_asm_const_int=true;

   

   

  
  
  var ___async=0;
  
  var ___async_unwind=1;
  
  var ___async_retval=STATICTOP; STATICTOP += 16;; 
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_sleep(ms) {
      Module['setAsync'](); // tell the scheduler that we have a callback on hold
      Browser.safeSetTimeout(_emscripten_async_resume, ms);
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }



   

  var _llvm_ceil_f64=Math_ceil;

  var _llvm_floor_f64=Math_floor;

  function _llvm_trap() {
      abort('trap!');
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

  function _pthread_cond_init() { return 0; }

  function _pthread_cond_signal() { return 0; }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_mutex_init() {}

   

   

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    } 
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



var debug_table_i = ["0", "_ccm_ctx_alloc", "_gcm_ctx_alloc", "_aes_ctx_alloc", "_us_ticker_read", "_us_ticker_get_info", "0", "0"];
var debug_table_ii = ["0", "__ZN16SX1276_LoRaRadio6randomEv", "__ZN16SX1276_LoRaRadio10get_statusEv", "__ZN16LoRaWANInterface7connectEv", "__ZN16LoRaWANInterface10disconnectEv", "__ZN16LoRaWANInterface22add_link_check_requestEv", "__ZN16LoRaWANInterface24enable_adaptive_datarateEv", "__ZN16LoRaWANInterface25disable_adaptive_datarateEv", "__ZN16LoRaWANInterface19remove_channel_planEv", "___stdio_close", "0", "0", "0", "0", "0", "0"];
var debug_table_iii = ["0", "__ZN16SX1276_LoRaRadio18check_rf_frequencyEj", "__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE", "__ZN16LoRaWANInterface7connectERK15lorawan_connect", "__ZN16LoRaWANInterface12set_datarateEh", "__ZN16LoRaWANInterface25set_confirmed_msg_retriesEh", "__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan", "__ZN16LoRaWANInterface16get_channel_planER16lora_channelplan", "__ZN16LoRaWANInterface14remove_channelEh", "__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t", "__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s", "__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s", "__ZN7LoRaPHY25accept_tx_param_setup_reqEP20tx_param_setup_req_s", "__ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s", "__ZN7LoRaPHY16get_alternate_DREh", "__ZN7LoRaPHY14remove_channelEh", "__ZN7LoRaPHY16verify_frequencyEj", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiii = ["0", "__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa", "__ZN7LoRaPHY11add_channelEP16channel_params_th", "__ZN7LoRaPHY15apply_DR_offsetEaa", "_ccm_aes_setkey_wrap", "_gcm_aes_setkey_wrap", "_aes_setkey_enc_wrap", "_aes_setkey_dec_wrap", "___stdio_write", "___stdio_seek", "___stdout_write", "_sn_write", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv", "_get_pkcs_padding", "0"];
var debug_table_iiiii = ["0", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj", "_aes_crypt_ecb_wrap", "0"];
var debug_table_iiiiii = ["0", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj", "__ZN16LoRaWANInterface4sendEhPKhti", "__ZN16LoRaWANInterface7receiveEhPhti", "__ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_", "0", "0", "0"];
var debug_table_iiiiiii = ["0", "__ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_", "_aes_crypt_cbc_wrap", "0"];
var debug_table_v = ["0", "___cxa_pure_virtual", "_us_ticker_init", "_us_ticker_disable_interrupt", "_us_ticker_clear_interrupt", "_us_ticker_fire_interrupt", "__ZL25default_terminate_handlerv", "__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev"];
var debug_table_vi = ["0", "__ZN16SX1276_LoRaRadio11radio_resetEv", "__ZN16SX1276_LoRaRadio5sleepEv", "__ZN16SX1276_LoRaRadio7standbyEv", "__ZN16SX1276_LoRaRadio9start_cadEv", "__ZN16SX1276_LoRaRadio4lockEv", "__ZN16SX1276_LoRaRadio6unlockEv", "__ZN16SX1276_LoRaRadioD2Ev", "__ZN16SX1276_LoRaRadioD0Ev", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv", "__ZN4mbed11InterruptInD2Ev", "__ZN4mbed11InterruptInD0Ev", "__ZN4mbed7TimeoutD2Ev", "__ZN4mbed7TimeoutD0Ev", "__ZN4mbed7Timeout7handlerEv", "__ZN4mbed10TimerEventD2Ev", "__ZN4mbed10TimerEventD0Ev", "_mbed_trace_default_print", "__ZN16LoRaWANInterface25remove_link_check_requestEv", "__ZN16LoRaWANInterfaceD2Ev", "__ZN16LoRaWANInterfaceD0Ev", "__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv", "__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv", "__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv", "__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv", "__ZN4mbed8CallbackIFvPhtsaEE13function_dtorINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPv", "__ZN7LoRaPHYD2Ev", "__ZN7LoRaPHYD0Ev", "__ZN7LoRaPHY24restore_default_channelsEv", "__ZN12LoRaPHYEU868D2Ev", "__ZN12LoRaPHYEU868D0Ev", "_ccm_ctx_free", "_gcm_ctx_free", "_aes_ctx_free", "_us_ticker_set_interrupt", "__ZN4mbed10TimerEvent3irqEj", "__ZN4mbed6TickerD2Ev", "__ZN4mbed6TickerD0Ev", "__ZN4mbed6Ticker7handlerEv", "__ZN10__cxxabiv116__shim_type_infoD2Ev", "__ZN10__cxxabiv117__class_type_infoD0Ev", "__ZNK10__cxxabiv116__shim_type_info5noop1Ev", "__ZNK10__cxxabiv116__shim_type_info5noop2Ev", "__ZN10__cxxabiv120__si_class_type_infoD0Ev", "__ZN10__cxxabiv121__vmi_class_type_infoD0Ev", "__ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb", "__ZN16SX1276_LoRaRadio4sendEPhh__async_cb", "__ZN16SX1276_LoRaRadio11rx_done_irqEv", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_250", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_251", "__ZN16SX1276_LoRaRadio15timeout_irq_isrEv", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_252", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_253", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_254", "__ZN16SX1276_LoRaRadio6randomEv__async_cb", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_315", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_311", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_312", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_314", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_313", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_310", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_263", "__ZN16SX1276_LoRaRadioD2Ev__async_cb", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_404", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_398", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_403", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_399", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_402", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_400", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_401", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_410", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_409", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_408", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_407", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_406", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_405", "__ZN16SX1276_LoRaRadioD0Ev__async_cb", "__ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb", "__ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_61", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_62", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_63", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_64", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb", "__ZN16SX1276_LoRaRadio11tx_done_irqEv", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_178", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_179", "__ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_226", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_225", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_224", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb", "__ZN4mbed11InterruptInD2Ev__async_cb", "__ZN4mbed11InterruptInD2Ev__async_cb_249", "__ZN4mbed11InterruptInD0Ev__async_cb", "__ZN4mbed11InterruptInD0Ev__async_cb_191", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_284", "__ZN4mbed7TimeoutD2Ev__async_cb", "__ZN4mbed7TimeoutD2Ev__async_cb_337", "__ZN4mbed7TimeoutD0Ev__async_cb", "__ZN4mbed7TimeoutD0Ev__async_cb_370", "__ZN4mbed7Timeout7handlerEv__async_cb_316", "__ZN4mbed7Timeout7handlerEv__async_cb", "__ZN4mbed5TimerC2Ev__async_cb", "__ZN4mbed5Timer5startEv__async_cb", "__ZN4mbed5Timer7read_msEv__async_cb", "__ZN4mbed10TimerEventD2Ev__async_cb", "__ZN4mbed10TimerEventC2Ev__async_cb", "__ZN4mbed10TimerEvent3irqEj__async_cb", "__ZN6events10EventQueue6cancelEi__async_cb", "_equeue_alloc__async_cb", "_equeue_post__async_cb", "_equeue_enqueue__async_cb", "_equeue_cancel__async_cb", "_mbed_trace_default_print__async_cb", "_mbed_tracef__async_cb", "_mbed_vtracef__async_cb", "_mbed_vtracef__async_cb_387", "_mbed_vtracef__async_cb_377", "_mbed_vtracef__async_cb_378", "_mbed_vtracef__async_cb_379", "_mbed_vtracef__async_cb_386", "_mbed_vtracef__async_cb_380", "_mbed_vtracef__async_cb_385", "_mbed_vtracef__async_cb_381", "_mbed_vtracef__async_cb_382", "_mbed_vtracef__async_cb_383", "_mbed_vtracef__async_cb_384", "__ZN16LoRaWANInterface7connectEv__async_cb", "__ZN16LoRaWANInterface4sendEhPKhti__async_cb", "__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb", "__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_268", "__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_269", "__ZN12LoRaWANStackC2Ev__async_cb", "__ZN12LoRaWANStackC2Ev__async_cb_297", "__ZN12LoRaWANStackC2Ev__async_cb_298", "__ZN12LoRaWANStackC2Ev__async_cb_299", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_296", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_292", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_285", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_295", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_286", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_291", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_287", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_294", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_288", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_290", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_289", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_293", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_201", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_196", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_203", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_197", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_200", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_198", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_202", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_199", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_246", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_243", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_242", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_241", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_237", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_245", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_238", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_240", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_239", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_244", "__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb", "__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_358", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_351", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_357", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_364", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_341", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_369", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_359", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_342", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_363", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_343", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_368", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_356", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_355", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_354", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_353", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_352", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_344", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_362", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_345", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_367", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_350", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_346", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_361", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_347", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_366", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_348", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_360", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_349", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_365", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_65", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_70", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_66", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_69", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_67", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_68", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_49", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_54", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_50", "__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_53", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_51", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_52", "__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_78", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_33", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb", "__ZN12LoRaWANStack17send_frame_to_macEv__async_cb", "__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_102", "__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb", "__ZN12LoRaWANStack17get_lorawan_stackEv__async_cb", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb", "__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_265", "__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_264", "__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb", "__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_266", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_206", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_207", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_208", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_209", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_210", "__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb", "__ZN12LoRaWANStack17drop_channel_listEv__async_cb", "__ZN12LoRaWANStack16remove_a_channelEh__async_cb", "__ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb", "__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb", "__ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb", "__ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb", "__ZN12LoRaWANStack22set_link_check_requestEv__async_cb", "__ZN12LoRaWANStack8shutdownEv__async_cb", "__ZN7LoRaMacD2Ev__async_cb_47", "__ZN7LoRaMacD2Ev__async_cb", "__ZN12radio_eventsD2Ev__async_cb", "__ZN12radio_eventsD2Ev__async_cb_55", "__ZN12radio_eventsD2Ev__async_cb_56", "__ZN12radio_eventsD2Ev__async_cb_57", "__ZN12radio_eventsD2Ev__async_cb_58", "__ZN12radio_eventsD2Ev__async_cb_59", "__ZN12radio_eventsD2Ev__async_cb_60", "__ZN14lorawan_timersD2Ev__async_cb", "__ZN14lorawan_timersD2Ev__async_cb_71", "__ZN14lorawan_timersD2Ev__async_cb_72", "__ZN14lorawan_timersD2Ev__async_cb_73", "__ZN14lorawan_timersD2Ev__async_cb_74", "__ZN7LoRaMac16on_radio_tx_doneEv", "__ZN7LoRaMac14handle_tx_doneEv__async_cb", "__ZN7LoRaMac14handle_tx_doneEv__async_cb_32", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_37", "__ZN7LoRaMac25on_rx_window2_timer_eventEv", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_38", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_39", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_36", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_35", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_34", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb", "__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_11", "__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv", "__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_10", "__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_9", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_76", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb", "__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_165", "__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb", "__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_164", "__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_175", "__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb", "__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_176", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_124", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_138", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_135", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_146", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_123", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_114", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_134", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_145", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_122", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_133", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_144", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_121", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_113", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_112", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_132", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_143", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_120", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_131", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_142", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_119", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_130", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_141", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_118", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_127", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_126", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_125", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_137", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_136", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_129", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_140", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_117", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_128", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_139", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_116", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_115", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_149", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_154", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_150", "__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_153", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_151", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_152", "__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb_267", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb", "__ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa__async_cb", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb", "__ZN7LoRaMac17on_radio_rx_errorEv", "__ZN7LoRaMac15handle_rx_errorEv__async_cb", "__ZN7LoRaMac15handle_rx_errorEv__async_cb_215", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_220", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_222", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_221", "__ZN7LoRaMac19on_radio_rx_timeoutEv", "__ZN7LoRaMac17handle_rx_timeoutEv__async_cb", "__ZN7LoRaMac17handle_rx_timeoutEv__async_cb_411", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_416", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_418", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_417", "__ZN7LoRaMac19on_radio_tx_timeoutEv", "__ZN7LoRaMac17handle_tx_timeoutEv__async_cb", "__ZN7LoRaMac17handle_tx_timeoutEv__async_cb_372", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_389", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_390", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv", "__ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb", "__ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb_373", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_328", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_327", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_335", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_326", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_334", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_324", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_333", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_319", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_332", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_320", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_323", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_325", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_331", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_330", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_321", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_329", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_322", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_340", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_338", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_339", "__ZN7LoRaMac11schedule_txEv__async_cb", "__ZN7LoRaMac11schedule_txEv__async_cb_302", "__ZN7LoRaMac11schedule_txEv__async_cb_303", "__ZN7LoRaMac11schedule_txEv__async_cb_304", "__ZN7LoRaMac11schedule_txEv__async_cb_305", "__ZN7LoRaMac11schedule_txEv__async_cb_307", "__ZN7LoRaMac11schedule_txEv__async_cb_306", "__ZN7LoRaMac21send_frame_on_channelEh__async_cb", "__ZN7LoRaMac21send_frame_on_channelEh__async_cb_317", "__ZN7LoRaMac21send_frame_on_channelEh__async_cb_318", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_83", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_81", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_82", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb", "__ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb", "__ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb_77", "__ZN7LoRaMac18handle_ack_timeoutEv__async_cb", "__ZN7LoRaMac18handle_ack_timeoutEv__async_cb_75", "__ZN7LoRaMac25on_rx_window1_timer_eventEv", "__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb", "__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb_48", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_46", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_45", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_44", "__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb", "__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb_30", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_26", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_27", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_28", "__ZN7LoRaMac34handle_mac_state_check_timer_eventEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_25", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb", "__ZN7LoRaMac29handle_delayed_tx_timer_eventEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_24", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_17", "__ZN7LoRaMac22handle_rx1_timer_eventEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_23", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_18", "__ZN7LoRaMac22handle_rx2_timer_eventEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_22", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_19", "__ZN7LoRaMac18handle_ack_timeoutEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_21", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_20", "__ZN7LoRaMac10disconnectEv__async_cb_5", "__ZN7LoRaMac10disconnectEv__async_cb_4", "__ZN7LoRaMac10disconnectEv__async_cb_3", "__ZN7LoRaMac10disconnectEv__async_cb_2", "__ZN7LoRaMac10disconnectEv__async_cb_1", "__ZN7LoRaMac10disconnectEv__async_cb", "__ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t__async_cb", "__ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb", "__ZN7LoRaMac19remove_channel_planEv__async_cb", "__ZN7LoRaMac21remove_single_channelEh__async_cb", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_106", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_111", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_110", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_108", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_109", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_107", "__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb", "__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb_100", "__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb", "__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_300", "__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_301", "__ZN7LoRaMac14handle_tx_doneEv", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_270", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_271", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_272", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_273", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_274", "__ZN7LoRaMac15handle_rx_errorEv", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_275", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_276", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_277", "__ZN7LoRaMac17handle_tx_timeoutEv", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_278", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_279", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_280", "__ZN7LoRaMac17handle_rx_timeoutEv", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_281", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_282", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_283", "__ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb", "__ZN18LoRaMacChannelPlan11remove_planEv__async_cb", "__ZN18LoRaMacChannelPlan11remove_planEv__async_cb_205", "__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb", "__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_415", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_180", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_181", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_182", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_183", "__Z11compute_micPKhtS0_jhjPj__async_cb_15", "__Z11compute_micPKhtS0_jhjPj__async_cb_14", "__Z11compute_micPKhtS0_jhjPj__async_cb_12", "__Z11compute_micPKhtS0_jhjPj__async_cb", "__Z11compute_micPKhtS0_jhjPj__async_cb_13", "__Z11compute_micPKhtS0_jhjPj__async_cb_16", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb_42", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb_41", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb_40", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb_43", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_395", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_394", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_392", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_393", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_391", "__ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft__async_cb", "__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb", "__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb_101", "__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb", "__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb_105", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_167", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_168", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_169", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_170", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_171", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_172", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_173", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_174", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_184", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_185", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_186", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_187", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_188", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_189", "__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb", "__ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s__async_cb", "__ZN7LoRaPHY11add_channelEP16channel_params_th__async_cb", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_79", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_80", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_396", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_397", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_218", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_219", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_216", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_217", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_192", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_193", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_194", "__ZN7LoRaPHY13get_radio_rngEv__async_cb", "__ZN7LoRaPHY13get_radio_rngEv__async_cb_247", "__ZN7LoRaPHY13get_radio_rngEv__async_cb_248", "__ZN7LoRaPHY11handle_sendEPhh__async_cb", "__ZN7LoRaPHY11handle_sendEPhh__async_cb_235", "__ZN7LoRaPHY11handle_sendEPhh__async_cb_236", "__ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb", "__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb", "__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_388", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_230", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_227", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_229", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_228", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_231", "__ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb", "_mbedtls_ccm_setkey__async_cb_104", "_mbedtls_ccm_setkey__async_cb_103", "_mbedtls_ccm_setkey__async_cb", "_mbedtls_ccm_free__async_cb", "_mbedtls_cipher_free__async_cb", "_mbedtls_cipher_setup__async_cb", "_mbedtls_cipher_setkey__async_cb", "_mbedtls_cipher_setkey__async_cb_29", "_mbedtls_cipher_update__async_cb", "_mbedtls_cipher_update__async_cb_8", "_mbedtls_cipher_update__async_cb_6", "_mbedtls_cipher_update__async_cb_7", "_ccm_aes_setkey_wrap__async_cb", "_ccm_ctx_free__async_cb", "_gcm_aes_setkey_wrap__async_cb", "_gcm_ctx_free__async_cb", "_mbedtls_cipher_cmac_starts__async_cb", "_mbedtls_cipher_cmac_update__async_cb_375", "_mbedtls_cipher_cmac_update__async_cb_374", "_mbedtls_cipher_cmac_update__async_cb", "_mbedtls_cipher_cmac_finish__async_cb_371", "_mbedtls_cipher_cmac_finish__async_cb", "_mbedtls_gcm_setkey__async_cb_234", "_mbedtls_gcm_setkey__async_cb_233", "_mbedtls_gcm_setkey__async_cb_232", "_mbedtls_gcm_setkey__async_cb", "_mbedtls_gcm_update__async_cb", "_mbedtls_gcm_free__async_cb", "_ticker_set_handler__async_cb", "_initialize__async_cb", "_initialize__async_cb_256", "_initialize__async_cb_261", "_initialize__async_cb_260", "_initialize__async_cb_257", "_initialize__async_cb_258", "_initialize__async_cb_259", "_schedule_interrupt__async_cb", "_schedule_interrupt__async_cb_155", "_schedule_interrupt__async_cb_156", "_schedule_interrupt__async_cb_157", "_schedule_interrupt__async_cb_158", "_schedule_interrupt__async_cb_159", "_schedule_interrupt__async_cb_160", "_ticker_remove_event__async_cb", "_ticker_read_us__async_cb_177", "_ticker_read_us__async_cb", "_mbed_assert_internal__async_cb", "_mbed_die__async_cb_99", "_mbed_die__async_cb_98", "_mbed_die__async_cb_97", "_mbed_die__async_cb_96", "_mbed_die__async_cb_95", "_mbed_die__async_cb_94", "_mbed_die__async_cb_93", "_mbed_die__async_cb_92", "_mbed_die__async_cb_91", "_mbed_die__async_cb_90", "_mbed_die__async_cb_89", "_mbed_die__async_cb_88", "_mbed_die__async_cb_87", "_mbed_die__async_cb_86", "_mbed_die__async_cb_85", "_mbed_die__async_cb", "_mbed_error_printf__async_cb", "_mbed_error_vfprintf__async_cb", "_mbed_error_vfprintf__async_cb_148", "_mbed_error_vfprintf__async_cb_147", "_handle_interrupt_in__async_cb", "_serial_putc__async_cb_31", "_serial_putc__async_cb", "__ZN4mbed6TickerD2Ev__async_cb", "__ZN4mbed6TickerD2Ev__async_cb_413", "__ZN4mbed6TickerD0Ev__async_cb", "__ZN4mbed6TickerD0Ev__async_cb_309", "__ZN4mbed6Ticker7handlerEv__async_cb", "_invoke_ticker__async_cb_336", "_invoke_ticker__async_cb", "_wait_ms__async_cb", "__GLOBAL__sub_I_main_cpp__async_cb", "__GLOBAL__sub_I_main_cpp__async_cb_255", "_main__async_cb", "_putc__async_cb_308", "_putc__async_cb", "___overflow__async_cb", "_fflush__async_cb_162", "_fflush__async_cb_161", "_fflush__async_cb_163", "_fflush__async_cb", "___fflush_unlocked__async_cb", "___fflush_unlocked__async_cb_166", "_vfprintf__async_cb", "_snprintf__async_cb", "_vsnprintf__async_cb", "_fputc__async_cb_204", "_fputc__async_cb", "_puts__async_cb", "__ZL25default_terminate_handlerv__async_cb", "__ZL25default_terminate_handlerv__async_cb_190", "_abort_message__async_cb", "_abort_message__async_cb_412", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_84", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb", "___dynamic_cast__async_cb", "___dynamic_cast__async_cb_414", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_376", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv", "__ZSt11__terminatePFvvE__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_195", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_214", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_213", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_212", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_211", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_223", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "___cxa_can_catch__async_cb", "___cxa_is_pointer_type__async_cb
var debug_table_vii = ["0", "__ZN16SX1276_LoRaRadio10init_radioEP12radio_events", "__ZN16SX1276_LoRaRadio7receiveEj", "__ZN16SX1276_LoRaRadio11set_channelEj", "__ZN16SX1276_LoRaRadio18set_public_networkEb", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_", "__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_", "__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_", "__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_", "__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvPhtsaEE13function_moveINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPvPKv", "__ZN7LoRaPHY16set_last_tx_doneEP24set_band_txdone_params_t", "__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t", "__ZN12LoRaWANStack23mlme_indication_handlerEP25loramac_mlme_indication_t", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_viii = ["0", "__ZN16SX1276_LoRaRadio4sendEPhh", "__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj", "_add_pkcs_padding", "0", "0", "0"];
var debug_table_viiii = ["0", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat", "__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "0", "0", "0"];
var debug_table_viiiii = ["0", "__ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa", "__ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t", "__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa", "__ZN7LoRaMac14handle_rx_doneEPhtsa"];
var debug_table_viiiiii = ["0", "__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];
var debug_table_viiiiiiiiiiiiii = ["0", "__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj"];
var debug_table_viiiiiiiiiiiiiii = ["0", "__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb"];
function nullFunc_i(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: i: " + debug_table_i[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  i: " + debug_table_i[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  v: " + debug_table_v[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  i: " + debug_table_i[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  v: " + debug_table_v[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  v: " + debug_table_v[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  v: " + debug_table_v[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14) {
  try {
    Module["dynCall_viiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiiiiiiiiiiiii": invoke_viiiiiiiiiiiiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_pure_virtual": ___cxa_pure_virtual, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "_abort": _abort, "_emscripten_asm_const_i": _emscripten_asm_const_i, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "_emscripten_asm_const_iiiiii": _emscripten_asm_const_iiiiii, "_emscripten_asm_const_iiiiiii": _emscripten_asm_const_iiiiiii, "_emscripten_get_now": _emscripten_get_now, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_sleep": _emscripten_sleep, "_gettimeofday": _gettimeofday, "_llvm_ceil_f64": _llvm_ceil_f64, "_llvm_floor_f64": _llvm_floor_f64, "_llvm_trap": _llvm_trap, "_pthread_cond_init": _pthread_cond_init, "_pthread_cond_signal": _pthread_cond_signal, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_mutex_init": _pthread_mutex_init, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "flush_NO_FILESYSTEM": flush_NO_FILESYSTEM, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8, "___async": ___async, "___async_unwind": ___async_unwind, "___async_retval": ___async_retval, "___async_cur_frame": ___async_cur_frame };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;
  var ___async=env.___async|0;
  var ___async_unwind=env.___async_unwind|0;
  var ___async_retval=env.___async_retval|0;
  var ___async_cur_frame=env.___async_cur_frame|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var invoke_i=env.invoke_i;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall146=env.___syscall146;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var _abort=env._abort;
  var _emscripten_asm_const_i=env._emscripten_asm_const_i;
  var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
  var _emscripten_asm_const_iii=env._emscripten_asm_const_iii;
  var _emscripten_asm_const_iiii=env._emscripten_asm_const_iiii;
  var _emscripten_asm_const_iiiiii=env._emscripten_asm_const_iiiiii;
  var _emscripten_asm_const_iiiiiii=env._emscripten_asm_const_iiiiiii;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _emscripten_sleep=env._emscripten_sleep;
  var _gettimeofday=env._gettimeofday;
  var _llvm_ceil_f64=env._llvm_ceil_f64;
  var _llvm_floor_f64=env._llvm_floor_f64;
  var _llvm_trap=env._llvm_trap;
  var _pthread_cond_init=env._pthread_cond_init;
  var _pthread_cond_signal=env._pthread_cond_signal;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_mutex_init=env._pthread_mutex_init;
  var _pthread_once=env._pthread_once;
  var _pthread_setspecific=env._pthread_setspecific;
  var flush_NO_FILESYSTEM=env.flush_NO_FILESYSTEM;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i = 0, $$095113 = 0, $$096$be = 0, $$1$lcssa = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $136 = 0, $139 = 0, $14 = 0, $150 = 0, $151 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $238 = 0, $24 = 0, $242 = 0, $247 = 0, $248 = 0, $251 = 0, $257 = 0, $26 = 0, $260 = 0, $265 = 0, $273 = 0, $28 = 0, $292 = 0, $30 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $373 = 0, $374 = 0, $38 = 0, $4 = 0, $40 = 0, $411 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $487 = 0, $491 = 0, $495 = 0, $498 = 0, $50 = 0, $504 = 0, $507 = 0, $508 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $6 = 0, $60 = 0, $604 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $686 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $div = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 745
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 747
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 749
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 751
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 753
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 755
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 757
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 759
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 761
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 763
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 765
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 767
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 769
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 771
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 773
 $30 = HEAP8[$0 + 60 >> 0] | 0; //@line 775
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 777
 $34 = HEAP8[$0 + 68 >> 0] | 0; //@line 779
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 781
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 783
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 785
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 787
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 789
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 791
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 793
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 795
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 797
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 799
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 801
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 803
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 805
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 807
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 809
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 811
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 813
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 815
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 817
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 819
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 821
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 823
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 825
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 827
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 829
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 831
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 833
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 835
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 837
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 839
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 841
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 843
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 845
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 847
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 849
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 851
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 853
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 855
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 857
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 859
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 861
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 863
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 865
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 867
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 869
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 871
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 873
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 875
 $132 = HEAP32[$0 + 264 >> 2] | 0; //@line 877
 $134 = HEAP32[$0 + 268 >> 2] | 0; //@line 879
 $136 = HEAP32[$0 + 272 >> 2] | 0; //@line 881
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 883
 if (($AsyncRetVal & 7) == 7) {
  HEAP8[$92 >> 0] = HEAP8[$122 >> 0] | 0; //@line 888
  HEAP8[$44 >> 0] = HEAP8[$94 >> 0] | 0; //@line 890
  HEAP8[$68 >> 0] = HEAP8[$78 >> 0] | 0; //@line 892
 }
 $238 = HEAP8[$70 >> 0] | 0; //@line 894
 if (($238 & 255) > 4) {
  $div = ($238 & 255) / 5 | 0; //@line 897
  $242 = (-128 - (HEAP8[$14 >> 0] | 0) & 255) + -1 | 0; //@line 902
  $$095113 = 0; //@line 903
  $248 = HEAP8[$42 >> 0] | 0; //@line 903
  while (1) {
   $247 = $248 & 255; //@line 905
   if (($242 | 0) > ($247 | 0)) {
    $251 = $248 + 2 << 24 >> 24; //@line 909
    HEAP8[$24 + 4 + $247 >> 0] = 3; //@line 913
    HEAP8[$42 >> 0] = $251; //@line 914
    HEAP8[($248 + 1 & 255) + ($24 + 4) >> 0] = $AsyncRetVal; //@line 915
    HEAP8[$118 >> 0] = 1; //@line 916
    $$0$i = 0; //@line 917
    $686 = $251; //@line 917
   } else {
    $$0$i = -1e3; //@line 919
    $686 = $248; //@line 919
   }
   $$095113 = $$095113 + 1 << 24 >> 24; //@line 921
   if (($$095113 & 255) >= ($div & 255)) {
    $$1$lcssa = $$0$i; //@line 926
    break;
   } else {
    $248 = $686; //@line 924
   }
  }
 } else {
  $$1$lcssa = $132; //@line 931
 }
 $$0$be = $80 + 255 + ($238 & 255) & 255; //@line 937
 $$096$be = $$1$lcssa; //@line 937
 L13 : while (1) {
  if (($$0$be & 255) >= ($34 & 255)) {
   label = 36; //@line 941
   break;
  }
  $139 = $$0$be + 1 << 24 >> 24; //@line 945
  switch (HEAP8[$36 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 950
    break L13;
    break;
   }
  case 5:
   {
    label = 17; //@line 955
    break L13;
    break;
   }
  case 7:
   {
    label = 22; //@line 960
    break L13;
    break;
   }
  case 9:
   {
    label = 27; //@line 965
    break L13;
    break;
   }
  case 10:
   {
    label = 32; //@line 970
    break L13;
    break;
   }
  case 2:
   {
    HEAP32[$66 >> 2] = 0; //@line 975
    HEAP8[$12 >> 0] = HEAP8[$36 + ($139 & 255) >> 0] | 0; //@line 980
    HEAP8[$26 >> 0] = HEAP8[$36 + ($$0$be + 2 & 255) >> 0] | 0; //@line 985
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 986
    continue L13;
    break;
   }
  case 4:
   {
    $257 = $$0$be + 2 << 24 >> 24; //@line 991
    $260 = HEAP8[$36 + ($139 & 255) >> 0] | 0; //@line 994
    HEAP8[$110 >> 0] = $260; //@line 995
    HEAP16[$134 >> 1] = 1 << ($260 & 255); //@line 999
    $265 = HEAP8[$42 >> 0] | 0; //@line 1001
    if (($265 & 255) >= (-128 - (HEAP8[$14 >> 0] | 0) & 255)) {
     $$0$be = $257; //@line 1005
     $$096$be = -1e3; //@line 1005
     continue L13;
    }
    HEAP8[$42 >> 0] = $265 + 1 << 24 >> 24; //@line 1011
    HEAP8[($265 & 255) + ($24 + 4) >> 0] = 4; //@line 1012
    HEAP8[$118 >> 0] = 1; //@line 1013
    $$0$be = $257; //@line 1014
    $$096$be = 0; //@line 1014
    continue L13;
    break;
   }
  case 6:
   {
    $373 = HEAP8[$42 >> 0] | 0; //@line 1020
    $374 = $373 & 255; //@line 1021
    if (((-128 - (HEAP8[$14 >> 0] | 0) & 255) + -2 | 0) <= ($374 | 0)) {
     $$0$be = $139; //@line 1027
     $$096$be = -1e3; //@line 1027
     continue L13;
    }
    HEAP8[$24 + 4 + $374 >> 0] = 6; //@line 1032
    HEAP8[($373 + 1 & 255) + ($24 + 4) >> 0] = -1; //@line 1036
    HEAP8[$42 >> 0] = $373 + 3 << 24 >> 24; //@line 1038
    HEAP8[($373 + 2 & 255) + ($24 + 4) >> 0] = $6; //@line 1041
    HEAP8[$118 >> 0] = 1; //@line 1042
    $$0$be = $139; //@line 1043
    $$096$be = 0; //@line 1043
    continue L13;
    break;
   }
  case 8:
   {
    $487 = $$0$be + 2 << 24 >> 24; //@line 1048
    $491 = HEAP8[$36 + ($139 & 255) >> 0] & 15; //@line 1052
    $495 = ($491 + ($491 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 1057
    HEAP32[$88 >> 2] = $495; //@line 1058
    HEAP32[$74 >> 2] = $495 + 1e3; //@line 1060
    $498 = HEAP8[$42 >> 0] | 0; //@line 1062
    if (($498 & 255) >= (-128 - (HEAP8[$14 >> 0] | 0) & 255)) {
     $$0$be = $487; //@line 1066
     $$096$be = -1e3; //@line 1066
     continue L13;
    }
    HEAP8[$42 >> 0] = $498 + 1 << 24 >> 24; //@line 1072
    HEAP8[($498 & 255) + ($24 + 4) >> 0] = 8; //@line 1073
    HEAP8[$56 >> 0] = 1; //@line 1074
    HEAP8[$118 >> 0] = 1; //@line 1075
    $$0$be = $487; //@line 1076
    $$096$be = 0; //@line 1076
    continue L13;
    break;
   }
  default:
   {
    $$0$be = $139; //@line 1081
    $$096$be = -1013; //@line 1081
    continue L13;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$122 >> 0] = 0; //@line 1087
  HEAP8[$94 >> 0] = 0; //@line 1088
  HEAP8[$78 >> 0] = 0; //@line 1089
  HEAP8[$70 >> 0] = 0; //@line 1090
  $150 = $139 & 255; //@line 1091
  $151 = $150 + -1 | 0; //@line 1092
  HEAP32[$40 >> 2] = $36 + $151; //@line 1094
  HEAP8[$112 >> 0] = $46 - $151; //@line 1097
  HEAP8[$136 >> 0] = HEAP8[$126 >> 0] | 0; //@line 1099
  HEAP8[$86 >> 0] = HEAP8[$82 >> 0] | 0; //@line 1101
  HEAP8[$98 >> 0] = HEAP8[$92 >> 0] | 0; //@line 1103
  HEAP8[$54 >> 0] = HEAP8[$44 >> 0] | 0; //@line 1105
  HEAP8[$10 >> 0] = HEAP8[$68 >> 0] | 0; //@line 1107
  $162 = HEAP32[(HEAP32[$2 >> 2] | 0) + 36 >> 2] | 0; //@line 1110
  $ReallocAsyncCtx = _emscripten_realloc_async_context(276) | 0; //@line 1111
  $163 = FUNCTION_TABLE_iiiiiii[$162 & 3]($20, $116, $122, $94, $78, $70) | 0; //@line 1112
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 490; //@line 1115
   $164 = $ReallocAsyncCtx + 4 | 0; //@line 1116
   HEAP32[$164 >> 2] = $2; //@line 1117
   $165 = $ReallocAsyncCtx + 8 | 0; //@line 1118
   HEAP32[$165 >> 2] = $4; //@line 1119
   $166 = $ReallocAsyncCtx + 12 | 0; //@line 1120
   HEAP8[$166 >> 0] = $6; //@line 1121
   $167 = $ReallocAsyncCtx + 16 | 0; //@line 1122
   HEAP32[$167 >> 2] = $8; //@line 1123
   $168 = $ReallocAsyncCtx + 20 | 0; //@line 1124
   HEAP32[$168 >> 2] = $10; //@line 1125
   $169 = $ReallocAsyncCtx + 24 | 0; //@line 1126
   HEAP32[$169 >> 2] = $12; //@line 1127
   $170 = $ReallocAsyncCtx + 28 | 0; //@line 1128
   HEAP32[$170 >> 2] = $14; //@line 1129
   $171 = $ReallocAsyncCtx + 32 | 0; //@line 1130
   HEAP32[$171 >> 2] = $16; //@line 1131
   $172 = $ReallocAsyncCtx + 36 | 0; //@line 1132
   HEAP32[$172 >> 2] = $18; //@line 1133
   $173 = $ReallocAsyncCtx + 40 | 0; //@line 1134
   HEAP32[$173 >> 2] = $20; //@line 1135
   $174 = $ReallocAsyncCtx + 44 | 0; //@line 1136
   HEAP32[$174 >> 2] = $22; //@line 1137
   $175 = $ReallocAsyncCtx + 48 | 0; //@line 1138
   HEAP32[$175 >> 2] = $24; //@line 1139
   $176 = $ReallocAsyncCtx + 52 | 0; //@line 1140
   HEAP32[$176 >> 2] = $26; //@line 1141
   $177 = $ReallocAsyncCtx + 56 | 0; //@line 1142
   HEAP32[$177 >> 2] = $28; //@line 1143
   $178 = $ReallocAsyncCtx + 60 | 0; //@line 1144
   HEAP8[$178 >> 0] = $30; //@line 1145
   $179 = $ReallocAsyncCtx + 64 | 0; //@line 1146
   HEAP32[$179 >> 2] = $32; //@line 1147
   $180 = $ReallocAsyncCtx + 68 | 0; //@line 1148
   HEAP8[$180 >> 0] = $34; //@line 1149
   $181 = $ReallocAsyncCtx + 72 | 0; //@line 1150
   HEAP32[$181 >> 2] = $36; //@line 1151
   $182 = $ReallocAsyncCtx + 76 | 0; //@line 1152
   HEAP32[$182 >> 2] = $38; //@line 1153
   $183 = $ReallocAsyncCtx + 80 | 0; //@line 1154
   HEAP32[$183 >> 2] = $40; //@line 1155
   $184 = $ReallocAsyncCtx + 84 | 0; //@line 1156
   HEAP32[$184 >> 2] = $42; //@line 1157
   $185 = $ReallocAsyncCtx + 88 | 0; //@line 1158
   HEAP32[$185 >> 2] = $44; //@line 1159
   $186 = $ReallocAsyncCtx + 92 | 0; //@line 1160
   HEAP32[$186 >> 2] = $46; //@line 1161
   $187 = $ReallocAsyncCtx + 96 | 0; //@line 1162
   HEAP32[$187 >> 2] = $48; //@line 1163
   $188 = $ReallocAsyncCtx + 100 | 0; //@line 1164
   HEAP32[$188 >> 2] = $50; //@line 1165
   $189 = $ReallocAsyncCtx + 104 | 0; //@line 1166
   HEAP32[$189 >> 2] = $52; //@line 1167
   $190 = $ReallocAsyncCtx + 108 | 0; //@line 1168
   HEAP32[$190 >> 2] = $54; //@line 1169
   $191 = $ReallocAsyncCtx + 112 | 0; //@line 1170
   HEAP32[$191 >> 2] = $56; //@line 1171
   $192 = $ReallocAsyncCtx + 116 | 0; //@line 1172
   HEAP32[$192 >> 2] = $58; //@line 1173
   $193 = $ReallocAsyncCtx + 120 | 0; //@line 1174
   HEAP32[$193 >> 2] = $60; //@line 1175
   $194 = $ReallocAsyncCtx + 124 | 0; //@line 1176
   HEAP32[$194 >> 2] = $62; //@line 1177
   $195 = $ReallocAsyncCtx + 128 | 0; //@line 1178
   HEAP32[$195 >> 2] = $64; //@line 1179
   $196 = $ReallocAsyncCtx + 132 | 0; //@line 1180
   HEAP32[$196 >> 2] = $66; //@line 1181
   $197 = $ReallocAsyncCtx + 136 | 0; //@line 1182
   HEAP32[$197 >> 2] = $68; //@line 1183
   $198 = $ReallocAsyncCtx + 140 | 0; //@line 1184
   HEAP32[$198 >> 2] = $70; //@line 1185
   $199 = $ReallocAsyncCtx + 144 | 0; //@line 1186
   HEAP32[$199 >> 2] = $72; //@line 1187
   $200 = $ReallocAsyncCtx + 148 | 0; //@line 1188
   HEAP32[$200 >> 2] = $74; //@line 1189
   $201 = $ReallocAsyncCtx + 152 | 0; //@line 1190
   HEAP32[$201 >> 2] = $76; //@line 1191
   $202 = $ReallocAsyncCtx + 156 | 0; //@line 1192
   HEAP32[$202 >> 2] = $78; //@line 1193
   $203 = $ReallocAsyncCtx + 160 | 0; //@line 1194
   HEAP32[$203 >> 2] = $150; //@line 1195
   $204 = $ReallocAsyncCtx + 164 | 0; //@line 1196
   HEAP32[$204 >> 2] = $82; //@line 1197
   $205 = $ReallocAsyncCtx + 168 | 0; //@line 1198
   HEAP32[$205 >> 2] = $84; //@line 1199
   $206 = $ReallocAsyncCtx + 172 | 0; //@line 1200
   HEAP32[$206 >> 2] = $86; //@line 1201
   $207 = $ReallocAsyncCtx + 176 | 0; //@line 1202
   HEAP32[$207 >> 2] = $88; //@line 1203
   $208 = $ReallocAsyncCtx + 180 | 0; //@line 1204
   HEAP32[$208 >> 2] = $90; //@line 1205
   $209 = $ReallocAsyncCtx + 184 | 0; //@line 1206
   HEAP32[$209 >> 2] = $92; //@line 1207
   $210 = $ReallocAsyncCtx + 188 | 0; //@line 1208
   HEAP32[$210 >> 2] = $94; //@line 1209
   $211 = $ReallocAsyncCtx + 192 | 0; //@line 1210
   HEAP32[$211 >> 2] = $96; //@line 1211
   $212 = $ReallocAsyncCtx + 196 | 0; //@line 1212
   HEAP32[$212 >> 2] = $98; //@line 1213
   $213 = $ReallocAsyncCtx + 200 | 0; //@line 1214
   HEAP32[$213 >> 2] = $100; //@line 1215
   $214 = $ReallocAsyncCtx + 204 | 0; //@line 1216
   HEAP32[$214 >> 2] = $102; //@line 1217
   $215 = $ReallocAsyncCtx + 208 | 0; //@line 1218
   HEAP32[$215 >> 2] = $104; //@line 1219
   $216 = $ReallocAsyncCtx + 212 | 0; //@line 1220
   HEAP32[$216 >> 2] = $106; //@line 1221
   $217 = $ReallocAsyncCtx + 216 | 0; //@line 1222
   HEAP32[$217 >> 2] = $108; //@line 1223
   $218 = $ReallocAsyncCtx + 220 | 0; //@line 1224
   HEAP32[$218 >> 2] = $110; //@line 1225
   $219 = $ReallocAsyncCtx + 224 | 0; //@line 1226
   HEAP32[$219 >> 2] = $112; //@line 1227
   $220 = $ReallocAsyncCtx + 228 | 0; //@line 1228
   HEAP32[$220 >> 2] = $114; //@line 1229
   $221 = $ReallocAsyncCtx + 232 | 0; //@line 1230
   HEAP32[$221 >> 2] = $116; //@line 1231
   $222 = $ReallocAsyncCtx + 236 | 0; //@line 1232
   HEAP32[$222 >> 2] = $118; //@line 1233
   $223 = $ReallocAsyncCtx + 240 | 0; //@line 1234
   HEAP32[$223 >> 2] = $120; //@line 1235
   $224 = $ReallocAsyncCtx + 244 | 0; //@line 1236
   HEAP32[$224 >> 2] = $122; //@line 1237
   $225 = $ReallocAsyncCtx + 248 | 0; //@line 1238
   HEAP32[$225 >> 2] = $124; //@line 1239
   $226 = $ReallocAsyncCtx + 252 | 0; //@line 1240
   HEAP32[$226 >> 2] = $126; //@line 1241
   $227 = $ReallocAsyncCtx + 256 | 0; //@line 1242
   HEAP32[$227 >> 2] = $128; //@line 1243
   $228 = $ReallocAsyncCtx + 260 | 0; //@line 1244
   HEAP32[$228 >> 2] = $130; //@line 1245
   $229 = $ReallocAsyncCtx + 264 | 0; //@line 1246
   HEAP32[$229 >> 2] = $$096$be; //@line 1247
   $230 = $ReallocAsyncCtx + 268 | 0; //@line 1248
   HEAP32[$230 >> 2] = $134; //@line 1249
   $231 = $ReallocAsyncCtx + 272 | 0; //@line 1250
   HEAP32[$231 >> 2] = $136; //@line 1251
   sp = STACKTOP; //@line 1252
   return;
  }
  HEAP8[___async_retval >> 0] = $163; //@line 1256
  ___async_unwind = 0; //@line 1257
  HEAP32[$ReallocAsyncCtx >> 2] = 490; //@line 1258
  $164 = $ReallocAsyncCtx + 4 | 0; //@line 1259
  HEAP32[$164 >> 2] = $2; //@line 1260
  $165 = $ReallocAsyncCtx + 8 | 0; //@line 1261
  HEAP32[$165 >> 2] = $4; //@line 1262
  $166 = $ReallocAsyncCtx + 12 | 0; //@line 1263
  HEAP8[$166 >> 0] = $6; //@line 1264
  $167 = $ReallocAsyncCtx + 16 | 0; //@line 1265
  HEAP32[$167 >> 2] = $8; //@line 1266
  $168 = $ReallocAsyncCtx + 20 | 0; //@line 1267
  HEAP32[$168 >> 2] = $10; //@line 1268
  $169 = $ReallocAsyncCtx + 24 | 0; //@line 1269
  HEAP32[$169 >> 2] = $12; //@line 1270
  $170 = $ReallocAsyncCtx + 28 | 0; //@line 1271
  HEAP32[$170 >> 2] = $14; //@line 1272
  $171 = $ReallocAsyncCtx + 32 | 0; //@line 1273
  HEAP32[$171 >> 2] = $16; //@line 1274
  $172 = $ReallocAsyncCtx + 36 | 0; //@line 1275
  HEAP32[$172 >> 2] = $18; //@line 1276
  $173 = $ReallocAsyncCtx + 40 | 0; //@line 1277
  HEAP32[$173 >> 2] = $20; //@line 1278
  $174 = $ReallocAsyncCtx + 44 | 0; //@line 1279
  HEAP32[$174 >> 2] = $22; //@line 1280
  $175 = $ReallocAsyncCtx + 48 | 0; //@line 1281
  HEAP32[$175 >> 2] = $24; //@line 1282
  $176 = $ReallocAsyncCtx + 52 | 0; //@line 1283
  HEAP32[$176 >> 2] = $26; //@line 1284
  $177 = $ReallocAsyncCtx + 56 | 0; //@line 1285
  HEAP32[$177 >> 2] = $28; //@line 1286
  $178 = $ReallocAsyncCtx + 60 | 0; //@line 1287
  HEAP8[$178 >> 0] = $30; //@line 1288
  $179 = $ReallocAsyncCtx + 64 | 0; //@line 1289
  HEAP32[$179 >> 2] = $32; //@line 1290
  $180 = $ReallocAsyncCtx + 68 | 0; //@line 1291
  HEAP8[$180 >> 0] = $34; //@line 1292
  $181 = $ReallocAsyncCtx + 72 | 0; //@line 1293
  HEAP32[$181 >> 2] = $36; //@line 1294
  $182 = $ReallocAsyncCtx + 76 | 0; //@line 1295
  HEAP32[$182 >> 2] = $38; //@line 1296
  $183 = $ReallocAsyncCtx + 80 | 0; //@line 1297
  HEAP32[$183 >> 2] = $40; //@line 1298
  $184 = $ReallocAsyncCtx + 84 | 0; //@line 1299
  HEAP32[$184 >> 2] = $42; //@line 1300
  $185 = $ReallocAsyncCtx + 88 | 0; //@line 1301
  HEAP32[$185 >> 2] = $44; //@line 1302
  $186 = $ReallocAsyncCtx + 92 | 0; //@line 1303
  HEAP32[$186 >> 2] = $46; //@line 1304
  $187 = $ReallocAsyncCtx + 96 | 0; //@line 1305
  HEAP32[$187 >> 2] = $48; //@line 1306
  $188 = $ReallocAsyncCtx + 100 | 0; //@line 1307
  HEAP32[$188 >> 2] = $50; //@line 1308
  $189 = $ReallocAsyncCtx + 104 | 0; //@line 1309
  HEAP32[$189 >> 2] = $52; //@line 1310
  $190 = $ReallocAsyncCtx + 108 | 0; //@line 1311
  HEAP32[$190 >> 2] = $54; //@line 1312
  $191 = $ReallocAsyncCtx + 112 | 0; //@line 1313
  HEAP32[$191 >> 2] = $56; //@line 1314
  $192 = $ReallocAsyncCtx + 116 | 0; //@line 1315
  HEAP32[$192 >> 2] = $58; //@line 1316
  $193 = $ReallocAsyncCtx + 120 | 0; //@line 1317
  HEAP32[$193 >> 2] = $60; //@line 1318
  $194 = $ReallocAsyncCtx + 124 | 0; //@line 1319
  HEAP32[$194 >> 2] = $62; //@line 1320
  $195 = $ReallocAsyncCtx + 128 | 0; //@line 1321
  HEAP32[$195 >> 2] = $64; //@line 1322
  $196 = $ReallocAsyncCtx + 132 | 0; //@line 1323
  HEAP32[$196 >> 2] = $66; //@line 1324
  $197 = $ReallocAsyncCtx + 136 | 0; //@line 1325
  HEAP32[$197 >> 2] = $68; //@line 1326
  $198 = $ReallocAsyncCtx + 140 | 0; //@line 1327
  HEAP32[$198 >> 2] = $70; //@line 1328
  $199 = $ReallocAsyncCtx + 144 | 0; //@line 1329
  HEAP32[$199 >> 2] = $72; //@line 1330
  $200 = $ReallocAsyncCtx + 148 | 0; //@line 1331
  HEAP32[$200 >> 2] = $74; //@line 1332
  $201 = $ReallocAsyncCtx + 152 | 0; //@line 1333
  HEAP32[$201 >> 2] = $76; //@line 1334
  $202 = $ReallocAsyncCtx + 156 | 0; //@line 1335
  HEAP32[$202 >> 2] = $78; //@line 1336
  $203 = $ReallocAsyncCtx + 160 | 0; //@line 1337
  HEAP32[$203 >> 2] = $150; //@line 1338
  $204 = $ReallocAsyncCtx + 164 | 0; //@line 1339
  HEAP32[$204 >> 2] = $82; //@line 1340
  $205 = $ReallocAsyncCtx + 168 | 0; //@line 1341
  HEAP32[$205 >> 2] = $84; //@line 1342
  $206 = $ReallocAsyncCtx + 172 | 0; //@line 1343
  HEAP32[$206 >> 2] = $86; //@line 1344
  $207 = $ReallocAsyncCtx + 176 | 0; //@line 1345
  HEAP32[$207 >> 2] = $88; //@line 1346
  $208 = $ReallocAsyncCtx + 180 | 0; //@line 1347
  HEAP32[$208 >> 2] = $90; //@line 1348
  $209 = $ReallocAsyncCtx + 184 | 0; //@line 1349
  HEAP32[$209 >> 2] = $92; //@line 1350
  $210 = $ReallocAsyncCtx + 188 | 0; //@line 1351
  HEAP32[$210 >> 2] = $94; //@line 1352
  $211 = $ReallocAsyncCtx + 192 | 0; //@line 1353
  HEAP32[$211 >> 2] = $96; //@line 1354
  $212 = $ReallocAsyncCtx + 196 | 0; //@line 1355
  HEAP32[$212 >> 2] = $98; //@line 1356
  $213 = $ReallocAsyncCtx + 200 | 0; //@line 1357
  HEAP32[$213 >> 2] = $100; //@line 1358
  $214 = $ReallocAsyncCtx + 204 | 0; //@line 1359
  HEAP32[$214 >> 2] = $102; //@line 1360
  $215 = $ReallocAsyncCtx + 208 | 0; //@line 1361
  HEAP32[$215 >> 2] = $104; //@line 1362
  $216 = $ReallocAsyncCtx + 212 | 0; //@line 1363
  HEAP32[$216 >> 2] = $106; //@line 1364
  $217 = $ReallocAsyncCtx + 216 | 0; //@line 1365
  HEAP32[$217 >> 2] = $108; //@line 1366
  $218 = $ReallocAsyncCtx + 220 | 0; //@line 1367
  HEAP32[$218 >> 2] = $110; //@line 1368
  $219 = $ReallocAsyncCtx + 224 | 0; //@line 1369
  HEAP32[$219 >> 2] = $112; //@line 1370
  $220 = $ReallocAsyncCtx + 228 | 0; //@line 1371
  HEAP32[$220 >> 2] = $114; //@line 1372
  $221 = $ReallocAsyncCtx + 232 | 0; //@line 1373
  HEAP32[$221 >> 2] = $116; //@line 1374
  $222 = $ReallocAsyncCtx + 236 | 0; //@line 1375
  HEAP32[$222 >> 2] = $118; //@line 1376
  $223 = $ReallocAsyncCtx + 240 | 0; //@line 1377
  HEAP32[$223 >> 2] = $120; //@line 1378
  $224 = $ReallocAsyncCtx + 244 | 0; //@line 1379
  HEAP32[$224 >> 2] = $122; //@line 1380
  $225 = $ReallocAsyncCtx + 248 | 0; //@line 1381
  HEAP32[$225 >> 2] = $124; //@line 1382
  $226 = $ReallocAsyncCtx + 252 | 0; //@line 1383
  HEAP32[$226 >> 2] = $126; //@line 1384
  $227 = $ReallocAsyncCtx + 256 | 0; //@line 1385
  HEAP32[$227 >> 2] = $128; //@line 1386
  $228 = $ReallocAsyncCtx + 260 | 0; //@line 1387
  HEAP32[$228 >> 2] = $130; //@line 1388
  $229 = $ReallocAsyncCtx + 264 | 0; //@line 1389
  HEAP32[$229 >> 2] = $$096$be; //@line 1390
  $230 = $ReallocAsyncCtx + 268 | 0; //@line 1391
  HEAP32[$230 >> 2] = $134; //@line 1392
  $231 = $ReallocAsyncCtx + 272 | 0; //@line 1393
  HEAP32[$231 >> 2] = $136; //@line 1394
  sp = STACKTOP; //@line 1395
  return;
 } else if ((label | 0) == 17) {
  $273 = HEAP8[$36 + ($139 & 255) >> 0] | 0; //@line 1401
  HEAP8[$84 >> 0] = ($273 & 255) >>> 4 & 7; //@line 1406
  HEAP8[$124 >> 0] = $273 & 15; //@line 1408
  $292 = $$0$be + 5 << 24 >> 24; //@line 1422
  HEAP32[$76 >> 2] = (HEAPU8[$36 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$36 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$36 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 1430
  $302 = HEAP32[(HEAP32[$106 >> 2] | 0) + 40 >> 2] | 0; //@line 1433
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(272) | 0; //@line 1434
  $303 = FUNCTION_TABLE_iii[$302 & 31]($20, $72) | 0; //@line 1435
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 491; //@line 1438
   $304 = $ReallocAsyncCtx2 + 4 | 0; //@line 1439
   HEAP32[$304 >> 2] = $2; //@line 1440
   $305 = $ReallocAsyncCtx2 + 8 | 0; //@line 1441
   HEAP32[$305 >> 2] = $4; //@line 1442
   $306 = $ReallocAsyncCtx2 + 12 | 0; //@line 1443
   HEAP8[$306 >> 0] = $6; //@line 1444
   $307 = $ReallocAsyncCtx2 + 16 | 0; //@line 1445
   HEAP32[$307 >> 2] = $8; //@line 1446
   $308 = $ReallocAsyncCtx2 + 20 | 0; //@line 1447
   HEAP32[$308 >> 2] = $10; //@line 1448
   $309 = $ReallocAsyncCtx2 + 24 | 0; //@line 1449
   HEAP32[$309 >> 2] = $12; //@line 1450
   $310 = $ReallocAsyncCtx2 + 28 | 0; //@line 1451
   HEAP32[$310 >> 2] = $14; //@line 1452
   $311 = $ReallocAsyncCtx2 + 32 | 0; //@line 1453
   HEAP32[$311 >> 2] = $16; //@line 1454
   $312 = $ReallocAsyncCtx2 + 36 | 0; //@line 1455
   HEAP32[$312 >> 2] = $18; //@line 1456
   $313 = $ReallocAsyncCtx2 + 40 | 0; //@line 1457
   HEAP32[$313 >> 2] = $20; //@line 1458
   $314 = $ReallocAsyncCtx2 + 44 | 0; //@line 1459
   HEAP32[$314 >> 2] = $22; //@line 1460
   $315 = $ReallocAsyncCtx2 + 48 | 0; //@line 1461
   HEAP32[$315 >> 2] = $24; //@line 1462
   $316 = $ReallocAsyncCtx2 + 52 | 0; //@line 1463
   HEAP32[$316 >> 2] = $26; //@line 1464
   $317 = $ReallocAsyncCtx2 + 56 | 0; //@line 1465
   HEAP32[$317 >> 2] = $28; //@line 1466
   $318 = $ReallocAsyncCtx2 + 60 | 0; //@line 1467
   HEAP8[$318 >> 0] = $30; //@line 1468
   $319 = $ReallocAsyncCtx2 + 64 | 0; //@line 1469
   HEAP32[$319 >> 2] = $32; //@line 1470
   $320 = $ReallocAsyncCtx2 + 68 | 0; //@line 1471
   HEAP8[$320 >> 0] = $34; //@line 1472
   $321 = $ReallocAsyncCtx2 + 72 | 0; //@line 1473
   HEAP32[$321 >> 2] = $36; //@line 1474
   $322 = $ReallocAsyncCtx2 + 76 | 0; //@line 1475
   HEAP32[$322 >> 2] = $38; //@line 1476
   $323 = $ReallocAsyncCtx2 + 80 | 0; //@line 1477
   HEAP32[$323 >> 2] = $40; //@line 1478
   $324 = $ReallocAsyncCtx2 + 84 | 0; //@line 1479
   HEAP32[$324 >> 2] = $42; //@line 1480
   $325 = $ReallocAsyncCtx2 + 88 | 0; //@line 1481
   HEAP32[$325 >> 2] = $44; //@line 1482
   $326 = $ReallocAsyncCtx2 + 92 | 0; //@line 1483
   HEAP32[$326 >> 2] = $46; //@line 1484
   $327 = $ReallocAsyncCtx2 + 96 | 0; //@line 1485
   HEAP32[$327 >> 2] = $48; //@line 1486
   $328 = $ReallocAsyncCtx2 + 100 | 0; //@line 1487
   HEAP32[$328 >> 2] = $50; //@line 1488
   $329 = $ReallocAsyncCtx2 + 104 | 0; //@line 1489
   HEAP32[$329 >> 2] = $52; //@line 1490
   $330 = $ReallocAsyncCtx2 + 108 | 0; //@line 1491
   HEAP32[$330 >> 2] = $54; //@line 1492
   $331 = $ReallocAsyncCtx2 + 112 | 0; //@line 1493
   HEAP8[$331 >> 0] = $292; //@line 1494
   $332 = $ReallocAsyncCtx2 + 116 | 0; //@line 1495
   HEAP32[$332 >> 2] = $56; //@line 1496
   $333 = $ReallocAsyncCtx2 + 120 | 0; //@line 1497
   HEAP32[$333 >> 2] = $58; //@line 1498
   $334 = $ReallocAsyncCtx2 + 124 | 0; //@line 1499
   HEAP32[$334 >> 2] = $60; //@line 1500
   $335 = $ReallocAsyncCtx2 + 128 | 0; //@line 1501
   HEAP32[$335 >> 2] = $62; //@line 1502
   $336 = $ReallocAsyncCtx2 + 132 | 0; //@line 1503
   HEAP32[$336 >> 2] = $64; //@line 1504
   $337 = $ReallocAsyncCtx2 + 136 | 0; //@line 1505
   HEAP32[$337 >> 2] = $66; //@line 1506
   $338 = $ReallocAsyncCtx2 + 140 | 0; //@line 1507
   HEAP32[$338 >> 2] = $68; //@line 1508
   $339 = $ReallocAsyncCtx2 + 144 | 0; //@line 1509
   HEAP32[$339 >> 2] = $70; //@line 1510
   $340 = $ReallocAsyncCtx2 + 148 | 0; //@line 1511
   HEAP32[$340 >> 2] = $72; //@line 1512
   $341 = $ReallocAsyncCtx2 + 152 | 0; //@line 1513
   HEAP32[$341 >> 2] = $74; //@line 1514
   $342 = $ReallocAsyncCtx2 + 156 | 0; //@line 1515
   HEAP32[$342 >> 2] = $76; //@line 1516
   $343 = $ReallocAsyncCtx2 + 160 | 0; //@line 1517
   HEAP32[$343 >> 2] = $78; //@line 1518
   $344 = $ReallocAsyncCtx2 + 164 | 0; //@line 1519
   HEAP32[$344 >> 2] = $82; //@line 1520
   $345 = $ReallocAsyncCtx2 + 168 | 0; //@line 1521
   HEAP32[$345 >> 2] = $84; //@line 1522
   $346 = $ReallocAsyncCtx2 + 172 | 0; //@line 1523
   HEAP32[$346 >> 2] = $86; //@line 1524
   $347 = $ReallocAsyncCtx2 + 176 | 0; //@line 1525
   HEAP32[$347 >> 2] = $88; //@line 1526
   $348 = $ReallocAsyncCtx2 + 180 | 0; //@line 1527
   HEAP32[$348 >> 2] = $90; //@line 1528
   $349 = $ReallocAsyncCtx2 + 184 | 0; //@line 1529
   HEAP32[$349 >> 2] = $92; //@line 1530
   $350 = $ReallocAsyncCtx2 + 188 | 0; //@line 1531
   HEAP32[$350 >> 2] = $94; //@line 1532
   $351 = $ReallocAsyncCtx2 + 192 | 0; //@line 1533
   HEAP32[$351 >> 2] = $96; //@line 1534
   $352 = $ReallocAsyncCtx2 + 196 | 0; //@line 1535
   HEAP32[$352 >> 2] = $98; //@line 1536
   $353 = $ReallocAsyncCtx2 + 200 | 0; //@line 1537
   HEAP32[$353 >> 2] = $100; //@line 1538
   $354 = $ReallocAsyncCtx2 + 204 | 0; //@line 1539
   HEAP32[$354 >> 2] = $102; //@line 1540
   $355 = $ReallocAsyncCtx2 + 208 | 0; //@line 1541
   HEAP32[$355 >> 2] = $104; //@line 1542
   $356 = $ReallocAsyncCtx2 + 212 | 0; //@line 1543
   HEAP32[$356 >> 2] = $106; //@line 1544
   $357 = $ReallocAsyncCtx2 + 216 | 0; //@line 1545
   HEAP32[$357 >> 2] = $108; //@line 1546
   $358 = $ReallocAsyncCtx2 + 220 | 0; //@line 1547
   HEAP32[$358 >> 2] = $110; //@line 1548
   $359 = $ReallocAsyncCtx2 + 224 | 0; //@line 1549
   HEAP32[$359 >> 2] = $112; //@line 1550
   $360 = $ReallocAsyncCtx2 + 228 | 0; //@line 1551
   HEAP32[$360 >> 2] = $114; //@line 1552
   $361 = $ReallocAsyncCtx2 + 232 | 0; //@line 1553
   HEAP32[$361 >> 2] = $116; //@line 1554
   $362 = $ReallocAsyncCtx2 + 236 | 0; //@line 1555
   HEAP32[$362 >> 2] = $118; //@line 1556
   $363 = $ReallocAsyncCtx2 + 240 | 0; //@line 1557
   HEAP32[$363 >> 2] = $120; //@line 1558
   $364 = $ReallocAsyncCtx2 + 244 | 0; //@line 1559
   HEAP32[$364 >> 2] = $122; //@line 1560
   $365 = $ReallocAsyncCtx2 + 248 | 0; //@line 1561
   HEAP32[$365 >> 2] = $124; //@line 1562
   $366 = $ReallocAsyncCtx2 + 252 | 0; //@line 1563
   HEAP32[$366 >> 2] = $126; //@line 1564
   $367 = $ReallocAsyncCtx2 + 256 | 0; //@line 1565
   HEAP32[$367 >> 2] = $128; //@line 1566
   $368 = $ReallocAsyncCtx2 + 260 | 0; //@line 1567
   HEAP32[$368 >> 2] = $130; //@line 1568
   $369 = $ReallocAsyncCtx2 + 264 | 0; //@line 1569
   HEAP32[$369 >> 2] = $134; //@line 1570
   $370 = $ReallocAsyncCtx2 + 268 | 0; //@line 1571
   HEAP32[$370 >> 2] = $136; //@line 1572
   sp = STACKTOP; //@line 1573
   return;
  }
  HEAP8[___async_retval >> 0] = $303; //@line 1577
  ___async_unwind = 0; //@line 1578
  HEAP32[$ReallocAsyncCtx2 >> 2] = 491; //@line 1579
  $304 = $ReallocAsyncCtx2 + 4 | 0; //@line 1580
  HEAP32[$304 >> 2] = $2; //@line 1581
  $305 = $ReallocAsyncCtx2 + 8 | 0; //@line 1582
  HEAP32[$305 >> 2] = $4; //@line 1583
  $306 = $ReallocAsyncCtx2 + 12 | 0; //@line 1584
  HEAP8[$306 >> 0] = $6; //@line 1585
  $307 = $ReallocAsyncCtx2 + 16 | 0; //@line 1586
  HEAP32[$307 >> 2] = $8; //@line 1587
  $308 = $ReallocAsyncCtx2 + 20 | 0; //@line 1588
  HEAP32[$308 >> 2] = $10; //@line 1589
  $309 = $ReallocAsyncCtx2 + 24 | 0; //@line 1590
  HEAP32[$309 >> 2] = $12; //@line 1591
  $310 = $ReallocAsyncCtx2 + 28 | 0; //@line 1592
  HEAP32[$310 >> 2] = $14; //@line 1593
  $311 = $ReallocAsyncCtx2 + 32 | 0; //@line 1594
  HEAP32[$311 >> 2] = $16; //@line 1595
  $312 = $ReallocAsyncCtx2 + 36 | 0; //@line 1596
  HEAP32[$312 >> 2] = $18; //@line 1597
  $313 = $ReallocAsyncCtx2 + 40 | 0; //@line 1598
  HEAP32[$313 >> 2] = $20; //@line 1599
  $314 = $ReallocAsyncCtx2 + 44 | 0; //@line 1600
  HEAP32[$314 >> 2] = $22; //@line 1601
  $315 = $ReallocAsyncCtx2 + 48 | 0; //@line 1602
  HEAP32[$315 >> 2] = $24; //@line 1603
  $316 = $ReallocAsyncCtx2 + 52 | 0; //@line 1604
  HEAP32[$316 >> 2] = $26; //@line 1605
  $317 = $ReallocAsyncCtx2 + 56 | 0; //@line 1606
  HEAP32[$317 >> 2] = $28; //@line 1607
  $318 = $ReallocAsyncCtx2 + 60 | 0; //@line 1608
  HEAP8[$318 >> 0] = $30; //@line 1609
  $319 = $ReallocAsyncCtx2 + 64 | 0; //@line 1610
  HEAP32[$319 >> 2] = $32; //@line 1611
  $320 = $ReallocAsyncCtx2 + 68 | 0; //@line 1612
  HEAP8[$320 >> 0] = $34; //@line 1613
  $321 = $ReallocAsyncCtx2 + 72 | 0; //@line 1614
  HEAP32[$321 >> 2] = $36; //@line 1615
  $322 = $ReallocAsyncCtx2 + 76 | 0; //@line 1616
  HEAP32[$322 >> 2] = $38; //@line 1617
  $323 = $ReallocAsyncCtx2 + 80 | 0; //@line 1618
  HEAP32[$323 >> 2] = $40; //@line 1619
  $324 = $ReallocAsyncCtx2 + 84 | 0; //@line 1620
  HEAP32[$324 >> 2] = $42; //@line 1621
  $325 = $ReallocAsyncCtx2 + 88 | 0; //@line 1622
  HEAP32[$325 >> 2] = $44; //@line 1623
  $326 = $ReallocAsyncCtx2 + 92 | 0; //@line 1624
  HEAP32[$326 >> 2] = $46; //@line 1625
  $327 = $ReallocAsyncCtx2 + 96 | 0; //@line 1626
  HEAP32[$327 >> 2] = $48; //@line 1627
  $328 = $ReallocAsyncCtx2 + 100 | 0; //@line 1628
  HEAP32[$328 >> 2] = $50; //@line 1629
  $329 = $ReallocAsyncCtx2 + 104 | 0; //@line 1630
  HEAP32[$329 >> 2] = $52; //@line 1631
  $330 = $ReallocAsyncCtx2 + 108 | 0; //@line 1632
  HEAP32[$330 >> 2] = $54; //@line 1633
  $331 = $ReallocAsyncCtx2 + 112 | 0; //@line 1634
  HEAP8[$331 >> 0] = $292; //@line 1635
  $332 = $ReallocAsyncCtx2 + 116 | 0; //@line 1636
  HEAP32[$332 >> 2] = $56; //@line 1637
  $333 = $ReallocAsyncCtx2 + 120 | 0; //@line 1638
  HEAP32[$333 >> 2] = $58; //@line 1639
  $334 = $ReallocAsyncCtx2 + 124 | 0; //@line 1640
  HEAP32[$334 >> 2] = $60; //@line 1641
  $335 = $ReallocAsyncCtx2 + 128 | 0; //@line 1642
  HEAP32[$335 >> 2] = $62; //@line 1643
  $336 = $ReallocAsyncCtx2 + 132 | 0; //@line 1644
  HEAP32[$336 >> 2] = $64; //@line 1645
  $337 = $ReallocAsyncCtx2 + 136 | 0; //@line 1646
  HEAP32[$337 >> 2] = $66; //@line 1647
  $338 = $ReallocAsyncCtx2 + 140 | 0; //@line 1648
  HEAP32[$338 >> 2] = $68; //@line 1649
  $339 = $ReallocAsyncCtx2 + 144 | 0; //@line 1650
  HEAP32[$339 >> 2] = $70; //@line 1651
  $340 = $ReallocAsyncCtx2 + 148 | 0; //@line 1652
  HEAP32[$340 >> 2] = $72; //@line 1653
  $341 = $ReallocAsyncCtx2 + 152 | 0; //@line 1654
  HEAP32[$341 >> 2] = $74; //@line 1655
  $342 = $ReallocAsyncCtx2 + 156 | 0; //@line 1656
  HEAP32[$342 >> 2] = $76; //@line 1657
  $343 = $ReallocAsyncCtx2 + 160 | 0; //@line 1658
  HEAP32[$343 >> 2] = $78; //@line 1659
  $344 = $ReallocAsyncCtx2 + 164 | 0; //@line 1660
  HEAP32[$344 >> 2] = $82; //@line 1661
  $345 = $ReallocAsyncCtx2 + 168 | 0; //@line 1662
  HEAP32[$345 >> 2] = $84; //@line 1663
  $346 = $ReallocAsyncCtx2 + 172 | 0; //@line 1664
  HEAP32[$346 >> 2] = $86; //@line 1665
  $347 = $ReallocAsyncCtx2 + 176 | 0; //@line 1666
  HEAP32[$347 >> 2] = $88; //@line 1667
  $348 = $ReallocAsyncCtx2 + 180 | 0; //@line 1668
  HEAP32[$348 >> 2] = $90; //@line 1669
  $349 = $ReallocAsyncCtx2 + 184 | 0; //@line 1670
  HEAP32[$349 >> 2] = $92; //@line 1671
  $350 = $ReallocAsyncCtx2 + 188 | 0; //@line 1672
  HEAP32[$350 >> 2] = $94; //@line 1673
  $351 = $ReallocAsyncCtx2 + 192 | 0; //@line 1674
  HEAP32[$351 >> 2] = $96; //@line 1675
  $352 = $ReallocAsyncCtx2 + 196 | 0; //@line 1676
  HEAP32[$352 >> 2] = $98; //@line 1677
  $353 = $ReallocAsyncCtx2 + 200 | 0; //@line 1678
  HEAP32[$353 >> 2] = $100; //@line 1679
  $354 = $ReallocAsyncCtx2 + 204 | 0; //@line 1680
  HEAP32[$354 >> 2] = $102; //@line 1681
  $355 = $ReallocAsyncCtx2 + 208 | 0; //@line 1682
  HEAP32[$355 >> 2] = $104; //@line 1683
  $356 = $ReallocAsyncCtx2 + 212 | 0; //@line 1684
  HEAP32[$356 >> 2] = $106; //@line 1685
  $357 = $ReallocAsyncCtx2 + 216 | 0; //@line 1686
  HEAP32[$357 >> 2] = $108; //@line 1687
  $358 = $ReallocAsyncCtx2 + 220 | 0; //@line 1688
  HEAP32[$358 >> 2] = $110; //@line 1689
  $359 = $ReallocAsyncCtx2 + 224 | 0; //@line 1690
  HEAP32[$359 >> 2] = $112; //@line 1691
  $360 = $ReallocAsyncCtx2 + 228 | 0; //@line 1692
  HEAP32[$360 >> 2] = $114; //@line 1693
  $361 = $ReallocAsyncCtx2 + 232 | 0; //@line 1694
  HEAP32[$361 >> 2] = $116; //@line 1695
  $362 = $ReallocAsyncCtx2 + 236 | 0; //@line 1696
  HEAP32[$362 >> 2] = $118; //@line 1697
  $363 = $ReallocAsyncCtx2 + 240 | 0; //@line 1698
  HEAP32[$363 >> 2] = $120; //@line 1699
  $364 = $ReallocAsyncCtx2 + 244 | 0; //@line 1700
  HEAP32[$364 >> 2] = $122; //@line 1701
  $365 = $ReallocAsyncCtx2 + 248 | 0; //@line 1702
  HEAP32[$365 >> 2] = $124; //@line 1703
  $366 = $ReallocAsyncCtx2 + 252 | 0; //@line 1704
  HEAP32[$366 >> 2] = $126; //@line 1705
  $367 = $ReallocAsyncCtx2 + 256 | 0; //@line 1706
  HEAP32[$367 >> 2] = $128; //@line 1707
  $368 = $ReallocAsyncCtx2 + 260 | 0; //@line 1708
  HEAP32[$368 >> 2] = $130; //@line 1709
  $369 = $ReallocAsyncCtx2 + 264 | 0; //@line 1710
  HEAP32[$369 >> 2] = $134; //@line 1711
  $370 = $ReallocAsyncCtx2 + 268 | 0; //@line 1712
  HEAP32[$370 >> 2] = $136; //@line 1713
  sp = STACKTOP; //@line 1714
  return;
 } else if ((label | 0) == 22) {
  HEAP8[$8 >> 0] = HEAP8[$36 + ($139 & 255) >> 0] | 0; //@line 1722
  HEAP32[$38 >> 2] = $108; //@line 1723
  HEAP32[$120 >> 2] = (HEAPU8[$36 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$36 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$36 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 1744
  HEAP32[$114 >> 2] = 0; //@line 1745
  $411 = $$0$be + 6 << 24 >> 24; //@line 1746
  HEAP8[$130 >> 0] = HEAP8[$36 + ($$0$be + 5 & 255) >> 0] | 0; //@line 1750
  $417 = HEAP32[(HEAP32[$128 >> 2] | 0) + 8 >> 2] | 0; //@line 1753
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(268) | 0; //@line 1754
  $418 = FUNCTION_TABLE_iii[$417 & 31]($20, $62) | 0; //@line 1755
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 492; //@line 1758
   $419 = $ReallocAsyncCtx3 + 4 | 0; //@line 1759
   HEAP32[$419 >> 2] = $2; //@line 1760
   $420 = $ReallocAsyncCtx3 + 8 | 0; //@line 1761
   HEAP32[$420 >> 2] = $4; //@line 1762
   $421 = $ReallocAsyncCtx3 + 12 | 0; //@line 1763
   HEAP8[$421 >> 0] = $6; //@line 1764
   $422 = $ReallocAsyncCtx3 + 16 | 0; //@line 1765
   HEAP32[$422 >> 2] = $8; //@line 1766
   $423 = $ReallocAsyncCtx3 + 20 | 0; //@line 1767
   HEAP32[$423 >> 2] = $10; //@line 1768
   $424 = $ReallocAsyncCtx3 + 24 | 0; //@line 1769
   HEAP32[$424 >> 2] = $12; //@line 1770
   $425 = $ReallocAsyncCtx3 + 28 | 0; //@line 1771
   HEAP32[$425 >> 2] = $14; //@line 1772
   $426 = $ReallocAsyncCtx3 + 32 | 0; //@line 1773
   HEAP32[$426 >> 2] = $16; //@line 1774
   $427 = $ReallocAsyncCtx3 + 36 | 0; //@line 1775
   HEAP32[$427 >> 2] = $18; //@line 1776
   $428 = $ReallocAsyncCtx3 + 40 | 0; //@line 1777
   HEAP32[$428 >> 2] = $20; //@line 1778
   $429 = $ReallocAsyncCtx3 + 44 | 0; //@line 1779
   HEAP32[$429 >> 2] = $22; //@line 1780
   $430 = $ReallocAsyncCtx3 + 48 | 0; //@line 1781
   HEAP32[$430 >> 2] = $24; //@line 1782
   $431 = $ReallocAsyncCtx3 + 52 | 0; //@line 1783
   HEAP32[$431 >> 2] = $26; //@line 1784
   $432 = $ReallocAsyncCtx3 + 56 | 0; //@line 1785
   HEAP32[$432 >> 2] = $28; //@line 1786
   $433 = $ReallocAsyncCtx3 + 60 | 0; //@line 1787
   HEAP8[$433 >> 0] = $411; //@line 1788
   $434 = $ReallocAsyncCtx3 + 61 | 0; //@line 1789
   HEAP8[$434 >> 0] = $30; //@line 1790
   $435 = $ReallocAsyncCtx3 + 64 | 0; //@line 1791
   HEAP32[$435 >> 2] = $32; //@line 1792
   $436 = $ReallocAsyncCtx3 + 68 | 0; //@line 1793
   HEAP8[$436 >> 0] = $34; //@line 1794
   $437 = $ReallocAsyncCtx3 + 72 | 0; //@line 1795
   HEAP32[$437 >> 2] = $36; //@line 1796
   $438 = $ReallocAsyncCtx3 + 76 | 0; //@line 1797
   HEAP32[$438 >> 2] = $38; //@line 1798
   $439 = $ReallocAsyncCtx3 + 80 | 0; //@line 1799
   HEAP32[$439 >> 2] = $40; //@line 1800
   $440 = $ReallocAsyncCtx3 + 84 | 0; //@line 1801
   HEAP32[$440 >> 2] = $42; //@line 1802
   $441 = $ReallocAsyncCtx3 + 88 | 0; //@line 1803
   HEAP32[$441 >> 2] = $44; //@line 1804
   $442 = $ReallocAsyncCtx3 + 92 | 0; //@line 1805
   HEAP32[$442 >> 2] = $46; //@line 1806
   $443 = $ReallocAsyncCtx3 + 96 | 0; //@line 1807
   HEAP32[$443 >> 2] = $48; //@line 1808
   $444 = $ReallocAsyncCtx3 + 100 | 0; //@line 1809
   HEAP32[$444 >> 2] = $50; //@line 1810
   $445 = $ReallocAsyncCtx3 + 104 | 0; //@line 1811
   HEAP32[$445 >> 2] = $52; //@line 1812
   $446 = $ReallocAsyncCtx3 + 108 | 0; //@line 1813
   HEAP32[$446 >> 2] = $54; //@line 1814
   $447 = $ReallocAsyncCtx3 + 112 | 0; //@line 1815
   HEAP32[$447 >> 2] = $56; //@line 1816
   $448 = $ReallocAsyncCtx3 + 116 | 0; //@line 1817
   HEAP32[$448 >> 2] = $58; //@line 1818
   $449 = $ReallocAsyncCtx3 + 120 | 0; //@line 1819
   HEAP32[$449 >> 2] = $60; //@line 1820
   $450 = $ReallocAsyncCtx3 + 124 | 0; //@line 1821
   HEAP32[$450 >> 2] = $62; //@line 1822
   $451 = $ReallocAsyncCtx3 + 128 | 0; //@line 1823
   HEAP32[$451 >> 2] = $64; //@line 1824
   $452 = $ReallocAsyncCtx3 + 132 | 0; //@line 1825
   HEAP32[$452 >> 2] = $66; //@line 1826
   $453 = $ReallocAsyncCtx3 + 136 | 0; //@line 1827
   HEAP32[$453 >> 2] = $68; //@line 1828
   $454 = $ReallocAsyncCtx3 + 140 | 0; //@line 1829
   HEAP32[$454 >> 2] = $70; //@line 1830
   $455 = $ReallocAsyncCtx3 + 144 | 0; //@line 1831
   HEAP32[$455 >> 2] = $72; //@line 1832
   $456 = $ReallocAsyncCtx3 + 148 | 0; //@line 1833
   HEAP32[$456 >> 2] = $74; //@line 1834
   $457 = $ReallocAsyncCtx3 + 152 | 0; //@line 1835
   HEAP32[$457 >> 2] = $76; //@line 1836
   $458 = $ReallocAsyncCtx3 + 156 | 0; //@line 1837
   HEAP32[$458 >> 2] = $78; //@line 1838
   $459 = $ReallocAsyncCtx3 + 160 | 0; //@line 1839
   HEAP32[$459 >> 2] = $82; //@line 1840
   $460 = $ReallocAsyncCtx3 + 164 | 0; //@line 1841
   HEAP32[$460 >> 2] = $84; //@line 1842
   $461 = $ReallocAsyncCtx3 + 168 | 0; //@line 1843
   HEAP32[$461 >> 2] = $86; //@line 1844
   $462 = $ReallocAsyncCtx3 + 172 | 0; //@line 1845
   HEAP32[$462 >> 2] = $88; //@line 1846
   $463 = $ReallocAsyncCtx3 + 176 | 0; //@line 1847
   HEAP32[$463 >> 2] = $90; //@line 1848
   $464 = $ReallocAsyncCtx3 + 180 | 0; //@line 1849
   HEAP32[$464 >> 2] = $92; //@line 1850
   $465 = $ReallocAsyncCtx3 + 184 | 0; //@line 1851
   HEAP32[$465 >> 2] = $94; //@line 1852
   $466 = $ReallocAsyncCtx3 + 188 | 0; //@line 1853
   HEAP32[$466 >> 2] = $96; //@line 1854
   $467 = $ReallocAsyncCtx3 + 192 | 0; //@line 1855
   HEAP32[$467 >> 2] = $98; //@line 1856
   $468 = $ReallocAsyncCtx3 + 196 | 0; //@line 1857
   HEAP32[$468 >> 2] = $100; //@line 1858
   $469 = $ReallocAsyncCtx3 + 200 | 0; //@line 1859
   HEAP32[$469 >> 2] = $102; //@line 1860
   $470 = $ReallocAsyncCtx3 + 204 | 0; //@line 1861
   HEAP32[$470 >> 2] = $104; //@line 1862
   $471 = $ReallocAsyncCtx3 + 208 | 0; //@line 1863
   HEAP32[$471 >> 2] = $106; //@line 1864
   $472 = $ReallocAsyncCtx3 + 212 | 0; //@line 1865
   HEAP32[$472 >> 2] = $108; //@line 1866
   $473 = $ReallocAsyncCtx3 + 216 | 0; //@line 1867
   HEAP32[$473 >> 2] = $110; //@line 1868
   $474 = $ReallocAsyncCtx3 + 220 | 0; //@line 1869
   HEAP32[$474 >> 2] = $112; //@line 1870
   $475 = $ReallocAsyncCtx3 + 224 | 0; //@line 1871
   HEAP32[$475 >> 2] = $114; //@line 1872
   $476 = $ReallocAsyncCtx3 + 228 | 0; //@line 1873
   HEAP32[$476 >> 2] = $116; //@line 1874
   $477 = $ReallocAsyncCtx3 + 232 | 0; //@line 1875
   HEAP32[$477 >> 2] = $118; //@line 1876
   $478 = $ReallocAsyncCtx3 + 236 | 0; //@line 1877
   HEAP32[$478 >> 2] = $120; //@line 1878
   $479 = $ReallocAsyncCtx3 + 240 | 0; //@line 1879
   HEAP32[$479 >> 2] = $122; //@line 1880
   $480 = $ReallocAsyncCtx3 + 244 | 0; //@line 1881
   HEAP32[$480 >> 2] = $124; //@line 1882
   $481 = $ReallocAsyncCtx3 + 248 | 0; //@line 1883
   HEAP32[$481 >> 2] = $126; //@line 1884
   $482 = $ReallocAsyncCtx3 + 252 | 0; //@line 1885
   HEAP32[$482 >> 2] = $128; //@line 1886
   $483 = $ReallocAsyncCtx3 + 256 | 0; //@line 1887
   HEAP32[$483 >> 2] = $130; //@line 1888
   $484 = $ReallocAsyncCtx3 + 260 | 0; //@line 1889
   HEAP32[$484 >> 2] = $134; //@line 1890
   $485 = $ReallocAsyncCtx3 + 264 | 0; //@line 1891
   HEAP32[$485 >> 2] = $136; //@line 1892
   sp = STACKTOP; //@line 1893
   return;
  }
  HEAP8[___async_retval >> 0] = $418; //@line 1897
  ___async_unwind = 0; //@line 1898
  HEAP32[$ReallocAsyncCtx3 >> 2] = 492; //@line 1899
  $419 = $ReallocAsyncCtx3 + 4 | 0; //@line 1900
  HEAP32[$419 >> 2] = $2; //@line 1901
  $420 = $ReallocAsyncCtx3 + 8 | 0; //@line 1902
  HEAP32[$420 >> 2] = $4; //@line 1903
  $421 = $ReallocAsyncCtx3 + 12 | 0; //@line 1904
  HEAP8[$421 >> 0] = $6; //@line 1905
  $422 = $ReallocAsyncCtx3 + 16 | 0; //@line 1906
  HEAP32[$422 >> 2] = $8; //@line 1907
  $423 = $ReallocAsyncCtx3 + 20 | 0; //@line 1908
  HEAP32[$423 >> 2] = $10; //@line 1909
  $424 = $ReallocAsyncCtx3 + 24 | 0; //@line 1910
  HEAP32[$424 >> 2] = $12; //@line 1911
  $425 = $ReallocAsyncCtx3 + 28 | 0; //@line 1912
  HEAP32[$425 >> 2] = $14; //@line 1913
  $426 = $ReallocAsyncCtx3 + 32 | 0; //@line 1914
  HEAP32[$426 >> 2] = $16; //@line 1915
  $427 = $ReallocAsyncCtx3 + 36 | 0; //@line 1916
  HEAP32[$427 >> 2] = $18; //@line 1917
  $428 = $ReallocAsyncCtx3 + 40 | 0; //@line 1918
  HEAP32[$428 >> 2] = $20; //@line 1919
  $429 = $ReallocAsyncCtx3 + 44 | 0; //@line 1920
  HEAP32[$429 >> 2] = $22; //@line 1921
  $430 = $ReallocAsyncCtx3 + 48 | 0; //@line 1922
  HEAP32[$430 >> 2] = $24; //@line 1923
  $431 = $ReallocAsyncCtx3 + 52 | 0; //@line 1924
  HEAP32[$431 >> 2] = $26; //@line 1925
  $432 = $ReallocAsyncCtx3 + 56 | 0; //@line 1926
  HEAP32[$432 >> 2] = $28; //@line 1927
  $433 = $ReallocAsyncCtx3 + 60 | 0; //@line 1928
  HEAP8[$433 >> 0] = $411; //@line 1929
  $434 = $ReallocAsyncCtx3 + 61 | 0; //@line 1930
  HEAP8[$434 >> 0] = $30; //@line 1931
  $435 = $ReallocAsyncCtx3 + 64 | 0; //@line 1932
  HEAP32[$435 >> 2] = $32; //@line 1933
  $436 = $ReallocAsyncCtx3 + 68 | 0; //@line 1934
  HEAP8[$436 >> 0] = $34; //@line 1935
  $437 = $ReallocAsyncCtx3 + 72 | 0; //@line 1936
  HEAP32[$437 >> 2] = $36; //@line 1937
  $438 = $ReallocAsyncCtx3 + 76 | 0; //@line 1938
  HEAP32[$438 >> 2] = $38; //@line 1939
  $439 = $ReallocAsyncCtx3 + 80 | 0; //@line 1940
  HEAP32[$439 >> 2] = $40; //@line 1941
  $440 = $ReallocAsyncCtx3 + 84 | 0; //@line 1942
  HEAP32[$440 >> 2] = $42; //@line 1943
  $441 = $ReallocAsyncCtx3 + 88 | 0; //@line 1944
  HEAP32[$441 >> 2] = $44; //@line 1945
  $442 = $ReallocAsyncCtx3 + 92 | 0; //@line 1946
  HEAP32[$442 >> 2] = $46; //@line 1947
  $443 = $ReallocAsyncCtx3 + 96 | 0; //@line 1948
  HEAP32[$443 >> 2] = $48; //@line 1949
  $444 = $ReallocAsyncCtx3 + 100 | 0; //@line 1950
  HEAP32[$444 >> 2] = $50; //@line 1951
  $445 = $ReallocAsyncCtx3 + 104 | 0; //@line 1952
  HEAP32[$445 >> 2] = $52; //@line 1953
  $446 = $ReallocAsyncCtx3 + 108 | 0; //@line 1954
  HEAP32[$446 >> 2] = $54; //@line 1955
  $447 = $ReallocAsyncCtx3 + 112 | 0; //@line 1956
  HEAP32[$447 >> 2] = $56; //@line 1957
  $448 = $ReallocAsyncCtx3 + 116 | 0; //@line 1958
  HEAP32[$448 >> 2] = $58; //@line 1959
  $449 = $ReallocAsyncCtx3 + 120 | 0; //@line 1960
  HEAP32[$449 >> 2] = $60; //@line 1961
  $450 = $ReallocAsyncCtx3 + 124 | 0; //@line 1962
  HEAP32[$450 >> 2] = $62; //@line 1963
  $451 = $ReallocAsyncCtx3 + 128 | 0; //@line 1964
  HEAP32[$451 >> 2] = $64; //@line 1965
  $452 = $ReallocAsyncCtx3 + 132 | 0; //@line 1966
  HEAP32[$452 >> 2] = $66; //@line 1967
  $453 = $ReallocAsyncCtx3 + 136 | 0; //@line 1968
  HEAP32[$453 >> 2] = $68; //@line 1969
  $454 = $ReallocAsyncCtx3 + 140 | 0; //@line 1970
  HEAP32[$454 >> 2] = $70; //@line 1971
  $455 = $ReallocAsyncCtx3 + 144 | 0; //@line 1972
  HEAP32[$455 >> 2] = $72; //@line 1973
  $456 = $ReallocAsyncCtx3 + 148 | 0; //@line 1974
  HEAP32[$456 >> 2] = $74; //@line 1975
  $457 = $ReallocAsyncCtx3 + 152 | 0; //@line 1976
  HEAP32[$457 >> 2] = $76; //@line 1977
  $458 = $ReallocAsyncCtx3 + 156 | 0; //@line 1978
  HEAP32[$458 >> 2] = $78; //@line 1979
  $459 = $ReallocAsyncCtx3 + 160 | 0; //@line 1980
  HEAP32[$459 >> 2] = $82; //@line 1981
  $460 = $ReallocAsyncCtx3 + 164 | 0; //@line 1982
  HEAP32[$460 >> 2] = $84; //@line 1983
  $461 = $ReallocAsyncCtx3 + 168 | 0; //@line 1984
  HEAP32[$461 >> 2] = $86; //@line 1985
  $462 = $ReallocAsyncCtx3 + 172 | 0; //@line 1986
  HEAP32[$462 >> 2] = $88; //@line 1987
  $463 = $ReallocAsyncCtx3 + 176 | 0; //@line 1988
  HEAP32[$463 >> 2] = $90; //@line 1989
  $464 = $ReallocAsyncCtx3 + 180 | 0; //@line 1990
  HEAP32[$464 >> 2] = $92; //@line 1991
  $465 = $ReallocAsyncCtx3 + 184 | 0; //@line 1992
  HEAP32[$465 >> 2] = $94; //@line 1993
  $466 = $ReallocAsyncCtx3 + 188 | 0; //@line 1994
  HEAP32[$466 >> 2] = $96; //@line 1995
  $467 = $ReallocAsyncCtx3 + 192 | 0; //@line 1996
  HEAP32[$467 >> 2] = $98; //@line 1997
  $468 = $ReallocAsyncCtx3 + 196 | 0; //@line 1998
  HEAP32[$468 >> 2] = $100; //@line 1999
  $469 = $ReallocAsyncCtx3 + 200 | 0; //@line 2000
  HEAP32[$469 >> 2] = $102; //@line 2001
  $470 = $ReallocAsyncCtx3 + 204 | 0; //@line 2002
  HEAP32[$470 >> 2] = $104; //@line 2003
  $471 = $ReallocAsyncCtx3 + 208 | 0; //@line 2004
  HEAP32[$471 >> 2] = $106; //@line 2005
  $472 = $ReallocAsyncCtx3 + 212 | 0; //@line 2006
  HEAP32[$472 >> 2] = $108; //@line 2007
  $473 = $ReallocAsyncCtx3 + 216 | 0; //@line 2008
  HEAP32[$473 >> 2] = $110; //@line 2009
  $474 = $ReallocAsyncCtx3 + 220 | 0; //@line 2010
  HEAP32[$474 >> 2] = $112; //@line 2011
  $475 = $ReallocAsyncCtx3 + 224 | 0; //@line 2012
  HEAP32[$475 >> 2] = $114; //@line 2013
  $476 = $ReallocAsyncCtx3 + 228 | 0; //@line 2014
  HEAP32[$476 >> 2] = $116; //@line 2015
  $477 = $ReallocAsyncCtx3 + 232 | 0; //@line 2016
  HEAP32[$477 >> 2] = $118; //@line 2017
  $478 = $ReallocAsyncCtx3 + 236 | 0; //@line 2018
  HEAP32[$478 >> 2] = $120; //@line 2019
  $479 = $ReallocAsyncCtx3 + 240 | 0; //@line 2020
  HEAP32[$479 >> 2] = $122; //@line 2021
  $480 = $ReallocAsyncCtx3 + 244 | 0; //@line 2022
  HEAP32[$480 >> 2] = $124; //@line 2023
  $481 = $ReallocAsyncCtx3 + 248 | 0; //@line 2024
  HEAP32[$481 >> 2] = $126; //@line 2025
  $482 = $ReallocAsyncCtx3 + 252 | 0; //@line 2026
  HEAP32[$482 >> 2] = $128; //@line 2027
  $483 = $ReallocAsyncCtx3 + 256 | 0; //@line 2028
  HEAP32[$483 >> 2] = $130; //@line 2029
  $484 = $ReallocAsyncCtx3 + 260 | 0; //@line 2030
  HEAP32[$484 >> 2] = $134; //@line 2031
  $485 = $ReallocAsyncCtx3 + 264 | 0; //@line 2032
  HEAP32[$485 >> 2] = $136; //@line 2033
  sp = STACKTOP; //@line 2034
  return;
 } else if ((label | 0) == 27) {
  $504 = $$0$be + 2 << 24 >> 24; //@line 2038
  $507 = HEAP8[$36 + ($139 & 255) >> 0] | 0; //@line 2041
  HEAP8[$100 >> 0] = 0; //@line 2042
  $508 = $507 & 255; //@line 2043
  HEAP8[$90 >> 0] = $508 >>> 5 & 1; //@line 2047
  if ($508 & 16 | 0) {
   HEAP8[$100 >> 0] = 1; //@line 2051
  }
  HEAP8[$52 >> 0] = $508 & 15; //@line 2055
  $517 = HEAP32[(HEAP32[$48 >> 2] | 0) + 44 >> 2] | 0; //@line 2058
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 2059
  $518 = FUNCTION_TABLE_iii[$517 & 31]($20, $104) | 0; //@line 2060
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 493; //@line 2063
   $519 = $ReallocAsyncCtx4 + 4 | 0; //@line 2064
   HEAP32[$519 >> 2] = $2; //@line 2065
   $520 = $ReallocAsyncCtx4 + 8 | 0; //@line 2066
   HEAP32[$520 >> 2] = $4; //@line 2067
   $521 = $ReallocAsyncCtx4 + 12 | 0; //@line 2068
   HEAP8[$521 >> 0] = $6; //@line 2069
   $522 = $ReallocAsyncCtx4 + 16 | 0; //@line 2070
   HEAP32[$522 >> 2] = $8; //@line 2071
   $523 = $ReallocAsyncCtx4 + 20 | 0; //@line 2072
   HEAP32[$523 >> 2] = $10; //@line 2073
   $524 = $ReallocAsyncCtx4 + 24 | 0; //@line 2074
   HEAP32[$524 >> 2] = $12; //@line 2075
   $525 = $ReallocAsyncCtx4 + 28 | 0; //@line 2076
   HEAP32[$525 >> 2] = $14; //@line 2077
   $526 = $ReallocAsyncCtx4 + 32 | 0; //@line 2078
   HEAP32[$526 >> 2] = $16; //@line 2079
   $527 = $ReallocAsyncCtx4 + 36 | 0; //@line 2080
   HEAP32[$527 >> 2] = $18; //@line 2081
   $528 = $ReallocAsyncCtx4 + 40 | 0; //@line 2082
   HEAP32[$528 >> 2] = $20; //@line 2083
   $529 = $ReallocAsyncCtx4 + 44 | 0; //@line 2084
   HEAP32[$529 >> 2] = $22; //@line 2085
   $530 = $ReallocAsyncCtx4 + 48 | 0; //@line 2086
   HEAP32[$530 >> 2] = $24; //@line 2087
   $531 = $ReallocAsyncCtx4 + 52 | 0; //@line 2088
   HEAP32[$531 >> 2] = $26; //@line 2089
   $532 = $ReallocAsyncCtx4 + 56 | 0; //@line 2090
   HEAP32[$532 >> 2] = $28; //@line 2091
   $533 = $ReallocAsyncCtx4 + 60 | 0; //@line 2092
   HEAP8[$533 >> 0] = $30; //@line 2093
   $534 = $ReallocAsyncCtx4 + 64 | 0; //@line 2094
   HEAP32[$534 >> 2] = $32; //@line 2095
   $535 = $ReallocAsyncCtx4 + 68 | 0; //@line 2096
   HEAP8[$535 >> 0] = $34; //@line 2097
   $536 = $ReallocAsyncCtx4 + 72 | 0; //@line 2098
   HEAP32[$536 >> 2] = $36; //@line 2099
   $537 = $ReallocAsyncCtx4 + 76 | 0; //@line 2100
   HEAP32[$537 >> 2] = $38; //@line 2101
   $538 = $ReallocAsyncCtx4 + 80 | 0; //@line 2102
   HEAP32[$538 >> 2] = $40; //@line 2103
   $539 = $ReallocAsyncCtx4 + 84 | 0; //@line 2104
   HEAP32[$539 >> 2] = $42; //@line 2105
   $540 = $ReallocAsyncCtx4 + 88 | 0; //@line 2106
   HEAP32[$540 >> 2] = $44; //@line 2107
   $541 = $ReallocAsyncCtx4 + 92 | 0; //@line 2108
   HEAP32[$541 >> 2] = $46; //@line 2109
   $542 = $ReallocAsyncCtx4 + 96 | 0; //@line 2110
   HEAP32[$542 >> 2] = $48; //@line 2111
   $543 = $ReallocAsyncCtx4 + 100 | 0; //@line 2112
   HEAP32[$543 >> 2] = $50; //@line 2113
   $544 = $ReallocAsyncCtx4 + 104 | 0; //@line 2114
   HEAP32[$544 >> 2] = $52; //@line 2115
   $545 = $ReallocAsyncCtx4 + 108 | 0; //@line 2116
   HEAP32[$545 >> 2] = $54; //@line 2117
   $546 = $ReallocAsyncCtx4 + 112 | 0; //@line 2118
   HEAP32[$546 >> 2] = $56; //@line 2119
   $547 = $ReallocAsyncCtx4 + 116 | 0; //@line 2120
   HEAP32[$547 >> 2] = $58; //@line 2121
   $548 = $ReallocAsyncCtx4 + 120 | 0; //@line 2122
   HEAP32[$548 >> 2] = $60; //@line 2123
   $549 = $ReallocAsyncCtx4 + 124 | 0; //@line 2124
   HEAP32[$549 >> 2] = $62; //@line 2125
   $550 = $ReallocAsyncCtx4 + 128 | 0; //@line 2126
   HEAP32[$550 >> 2] = $64; //@line 2127
   $551 = $ReallocAsyncCtx4 + 132 | 0; //@line 2128
   HEAP32[$551 >> 2] = $66; //@line 2129
   $552 = $ReallocAsyncCtx4 + 136 | 0; //@line 2130
   HEAP32[$552 >> 2] = $68; //@line 2131
   $553 = $ReallocAsyncCtx4 + 140 | 0; //@line 2132
   HEAP8[$553 >> 0] = $504; //@line 2133
   $554 = $ReallocAsyncCtx4 + 144 | 0; //@line 2134
   HEAP32[$554 >> 2] = $70; //@line 2135
   $555 = $ReallocAsyncCtx4 + 148 | 0; //@line 2136
   HEAP32[$555 >> 2] = $72; //@line 2137
   $556 = $ReallocAsyncCtx4 + 152 | 0; //@line 2138
   HEAP32[$556 >> 2] = $74; //@line 2139
   $557 = $ReallocAsyncCtx4 + 156 | 0; //@line 2140
   HEAP32[$557 >> 2] = $76; //@line 2141
   $558 = $ReallocAsyncCtx4 + 160 | 0; //@line 2142
   HEAP32[$558 >> 2] = $78; //@line 2143
   $559 = $ReallocAsyncCtx4 + 164 | 0; //@line 2144
   HEAP32[$559 >> 2] = $82; //@line 2145
   $560 = $ReallocAsyncCtx4 + 168 | 0; //@line 2146
   HEAP32[$560 >> 2] = $84; //@line 2147
   $561 = $ReallocAsyncCtx4 + 172 | 0; //@line 2148
   HEAP32[$561 >> 2] = $86; //@line 2149
   $562 = $ReallocAsyncCtx4 + 176 | 0; //@line 2150
   HEAP32[$562 >> 2] = $88; //@line 2151
   $563 = $ReallocAsyncCtx4 + 180 | 0; //@line 2152
   HEAP32[$563 >> 2] = $90; //@line 2153
   $564 = $ReallocAsyncCtx4 + 184 | 0; //@line 2154
   HEAP32[$564 >> 2] = $92; //@line 2155
   $565 = $ReallocAsyncCtx4 + 188 | 0; //@line 2156
   HEAP32[$565 >> 2] = $94; //@line 2157
   $566 = $ReallocAsyncCtx4 + 192 | 0; //@line 2158
   HEAP32[$566 >> 2] = $96; //@line 2159
   $567 = $ReallocAsyncCtx4 + 196 | 0; //@line 2160
   HEAP32[$567 >> 2] = $98; //@line 2161
   $568 = $ReallocAsyncCtx4 + 200 | 0; //@line 2162
   HEAP32[$568 >> 2] = $100; //@line 2163
   $569 = $ReallocAsyncCtx4 + 204 | 0; //@line 2164
   HEAP32[$569 >> 2] = $102; //@line 2165
   $570 = $ReallocAsyncCtx4 + 208 | 0; //@line 2166
   HEAP32[$570 >> 2] = $104; //@line 2167
   $571 = $ReallocAsyncCtx4 + 212 | 0; //@line 2168
   HEAP32[$571 >> 2] = $106; //@line 2169
   $572 = $ReallocAsyncCtx4 + 216 | 0; //@line 2170
   HEAP32[$572 >> 2] = $108; //@line 2171
   $573 = $ReallocAsyncCtx4 + 220 | 0; //@line 2172
   HEAP32[$573 >> 2] = $110; //@line 2173
   $574 = $ReallocAsyncCtx4 + 224 | 0; //@line 2174
   HEAP32[$574 >> 2] = $112; //@line 2175
   $575 = $ReallocAsyncCtx4 + 228 | 0; //@line 2176
   HEAP32[$575 >> 2] = $114; //@line 2177
   $576 = $ReallocAsyncCtx4 + 232 | 0; //@line 2178
   HEAP32[$576 >> 2] = $116; //@line 2179
   $577 = $ReallocAsyncCtx4 + 236 | 0; //@line 2180
   HEAP32[$577 >> 2] = $118; //@line 2181
   $578 = $ReallocAsyncCtx4 + 240 | 0; //@line 2182
   HEAP32[$578 >> 2] = $120; //@line 2183
   $579 = $ReallocAsyncCtx4 + 244 | 0; //@line 2184
   HEAP32[$579 >> 2] = $122; //@line 2185
   $580 = $ReallocAsyncCtx4 + 248 | 0; //@line 2186
   HEAP32[$580 >> 2] = $124; //@line 2187
   $581 = $ReallocAsyncCtx4 + 252 | 0; //@line 2188
   HEAP32[$581 >> 2] = $126; //@line 2189
   $582 = $ReallocAsyncCtx4 + 256 | 0; //@line 2190
   HEAP32[$582 >> 2] = $128; //@line 2191
   $583 = $ReallocAsyncCtx4 + 260 | 0; //@line 2192
   HEAP32[$583 >> 2] = $130; //@line 2193
   $584 = $ReallocAsyncCtx4 + 264 | 0; //@line 2194
   HEAP32[$584 >> 2] = $$096$be; //@line 2195
   $585 = $ReallocAsyncCtx4 + 268 | 0; //@line 2196
   HEAP32[$585 >> 2] = $134; //@line 2197
   $586 = $ReallocAsyncCtx4 + 272 | 0; //@line 2198
   HEAP32[$586 >> 2] = $136; //@line 2199
   sp = STACKTOP; //@line 2200
   return;
  }
  HEAP8[___async_retval >> 0] = $518 & 1; //@line 2205
  ___async_unwind = 0; //@line 2206
  HEAP32[$ReallocAsyncCtx4 >> 2] = 493; //@line 2207
  $519 = $ReallocAsyncCtx4 + 4 | 0; //@line 2208
  HEAP32[$519 >> 2] = $2; //@line 2209
  $520 = $ReallocAsyncCtx4 + 8 | 0; //@line 2210
  HEAP32[$520 >> 2] = $4; //@line 2211
  $521 = $ReallocAsyncCtx4 + 12 | 0; //@line 2212
  HEAP8[$521 >> 0] = $6; //@line 2213
  $522 = $ReallocAsyncCtx4 + 16 | 0; //@line 2214
  HEAP32[$522 >> 2] = $8; //@line 2215
  $523 = $ReallocAsyncCtx4 + 20 | 0; //@line 2216
  HEAP32[$523 >> 2] = $10; //@line 2217
  $524 = $ReallocAsyncCtx4 + 24 | 0; //@line 2218
  HEAP32[$524 >> 2] = $12; //@line 2219
  $525 = $ReallocAsyncCtx4 + 28 | 0; //@line 2220
  HEAP32[$525 >> 2] = $14; //@line 2221
  $526 = $ReallocAsyncCtx4 + 32 | 0; //@line 2222
  HEAP32[$526 >> 2] = $16; //@line 2223
  $527 = $ReallocAsyncCtx4 + 36 | 0; //@line 2224
  HEAP32[$527 >> 2] = $18; //@line 2225
  $528 = $ReallocAsyncCtx4 + 40 | 0; //@line 2226
  HEAP32[$528 >> 2] = $20; //@line 2227
  $529 = $ReallocAsyncCtx4 + 44 | 0; //@line 2228
  HEAP32[$529 >> 2] = $22; //@line 2229
  $530 = $ReallocAsyncCtx4 + 48 | 0; //@line 2230
  HEAP32[$530 >> 2] = $24; //@line 2231
  $531 = $ReallocAsyncCtx4 + 52 | 0; //@line 2232
  HEAP32[$531 >> 2] = $26; //@line 2233
  $532 = $ReallocAsyncCtx4 + 56 | 0; //@line 2234
  HEAP32[$532 >> 2] = $28; //@line 2235
  $533 = $ReallocAsyncCtx4 + 60 | 0; //@line 2236
  HEAP8[$533 >> 0] = $30; //@line 2237
  $534 = $ReallocAsyncCtx4 + 64 | 0; //@line 2238
  HEAP32[$534 >> 2] = $32; //@line 2239
  $535 = $ReallocAsyncCtx4 + 68 | 0; //@line 2240
  HEAP8[$535 >> 0] = $34; //@line 2241
  $536 = $ReallocAsyncCtx4 + 72 | 0; //@line 2242
  HEAP32[$536 >> 2] = $36; //@line 2243
  $537 = $ReallocAsyncCtx4 + 76 | 0; //@line 2244
  HEAP32[$537 >> 2] = $38; //@line 2245
  $538 = $ReallocAsyncCtx4 + 80 | 0; //@line 2246
  HEAP32[$538 >> 2] = $40; //@line 2247
  $539 = $ReallocAsyncCtx4 + 84 | 0; //@line 2248
  HEAP32[$539 >> 2] = $42; //@line 2249
  $540 = $ReallocAsyncCtx4 + 88 | 0; //@line 2250
  HEAP32[$540 >> 2] = $44; //@line 2251
  $541 = $ReallocAsyncCtx4 + 92 | 0; //@line 2252
  HEAP32[$541 >> 2] = $46; //@line 2253
  $542 = $ReallocAsyncCtx4 + 96 | 0; //@line 2254
  HEAP32[$542 >> 2] = $48; //@line 2255
  $543 = $ReallocAsyncCtx4 + 100 | 0; //@line 2256
  HEAP32[$543 >> 2] = $50; //@line 2257
  $544 = $ReallocAsyncCtx4 + 104 | 0; //@line 2258
  HEAP32[$544 >> 2] = $52; //@line 2259
  $545 = $ReallocAsyncCtx4 + 108 | 0; //@line 2260
  HEAP32[$545 >> 2] = $54; //@line 2261
  $546 = $ReallocAsyncCtx4 + 112 | 0; //@line 2262
  HEAP32[$546 >> 2] = $56; //@line 2263
  $547 = $ReallocAsyncCtx4 + 116 | 0; //@line 2264
  HEAP32[$547 >> 2] = $58; //@line 2265
  $548 = $ReallocAsyncCtx4 + 120 | 0; //@line 2266
  HEAP32[$548 >> 2] = $60; //@line 2267
  $549 = $ReallocAsyncCtx4 + 124 | 0; //@line 2268
  HEAP32[$549 >> 2] = $62; //@line 2269
  $550 = $ReallocAsyncCtx4 + 128 | 0; //@line 2270
  HEAP32[$550 >> 2] = $64; //@line 2271
  $551 = $ReallocAsyncCtx4 + 132 | 0; //@line 2272
  HEAP32[$551 >> 2] = $66; //@line 2273
  $552 = $ReallocAsyncCtx4 + 136 | 0; //@line 2274
  HEAP32[$552 >> 2] = $68; //@line 2275
  $553 = $ReallocAsyncCtx4 + 140 | 0; //@line 2276
  HEAP8[$553 >> 0] = $504; //@line 2277
  $554 = $ReallocAsyncCtx4 + 144 | 0; //@line 2278
  HEAP32[$554 >> 2] = $70; //@line 2279
  $555 = $ReallocAsyncCtx4 + 148 | 0; //@line 2280
  HEAP32[$555 >> 2] = $72; //@line 2281
  $556 = $ReallocAsyncCtx4 + 152 | 0; //@line 2282
  HEAP32[$556 >> 2] = $74; //@line 2283
  $557 = $ReallocAsyncCtx4 + 156 | 0; //@line 2284
  HEAP32[$557 >> 2] = $76; //@line 2285
  $558 = $ReallocAsyncCtx4 + 160 | 0; //@line 2286
  HEAP32[$558 >> 2] = $78; //@line 2287
  $559 = $ReallocAsyncCtx4 + 164 | 0; //@line 2288
  HEAP32[$559 >> 2] = $82; //@line 2289
  $560 = $ReallocAsyncCtx4 + 168 | 0; //@line 2290
  HEAP32[$560 >> 2] = $84; //@line 2291
  $561 = $ReallocAsyncCtx4 + 172 | 0; //@line 2292
  HEAP32[$561 >> 2] = $86; //@line 2293
  $562 = $ReallocAsyncCtx4 + 176 | 0; //@line 2294
  HEAP32[$562 >> 2] = $88; //@line 2295
  $563 = $ReallocAsyncCtx4 + 180 | 0; //@line 2296
  HEAP32[$563 >> 2] = $90; //@line 2297
  $564 = $ReallocAsyncCtx4 + 184 | 0; //@line 2298
  HEAP32[$564 >> 2] = $92; //@line 2299
  $565 = $ReallocAsyncCtx4 + 188 | 0; //@line 2300
  HEAP32[$565 >> 2] = $94; //@line 2301
  $566 = $ReallocAsyncCtx4 + 192 | 0; //@line 2302
  HEAP32[$566 >> 2] = $96; //@line 2303
  $567 = $ReallocAsyncCtx4 + 196 | 0; //@line 2304
  HEAP32[$567 >> 2] = $98; //@line 2305
  $568 = $ReallocAsyncCtx4 + 200 | 0; //@line 2306
  HEAP32[$568 >> 2] = $100; //@line 2307
  $569 = $ReallocAsyncCtx4 + 204 | 0; //@line 2308
  HEAP32[$569 >> 2] = $102; //@line 2309
  $570 = $ReallocAsyncCtx4 + 208 | 0; //@line 2310
  HEAP32[$570 >> 2] = $104; //@line 2311
  $571 = $ReallocAsyncCtx4 + 212 | 0; //@line 2312
  HEAP32[$571 >> 2] = $106; //@line 2313
  $572 = $ReallocAsyncCtx4 + 216 | 0; //@line 2314
  HEAP32[$572 >> 2] = $108; //@line 2315
  $573 = $ReallocAsyncCtx4 + 220 | 0; //@line 2316
  HEAP32[$573 >> 2] = $110; //@line 2317
  $574 = $ReallocAsyncCtx4 + 224 | 0; //@line 2318
  HEAP32[$574 >> 2] = $112; //@line 2319
  $575 = $ReallocAsyncCtx4 + 228 | 0; //@line 2320
  HEAP32[$575 >> 2] = $114; //@line 2321
  $576 = $ReallocAsyncCtx4 + 232 | 0; //@line 2322
  HEAP32[$576 >> 2] = $116; //@line 2323
  $577 = $ReallocAsyncCtx4 + 236 | 0; //@line 2324
  HEAP32[$577 >> 2] = $118; //@line 2325
  $578 = $ReallocAsyncCtx4 + 240 | 0; //@line 2326
  HEAP32[$578 >> 2] = $120; //@line 2327
  $579 = $ReallocAsyncCtx4 + 244 | 0; //@line 2328
  HEAP32[$579 >> 2] = $122; //@line 2329
  $580 = $ReallocAsyncCtx4 + 248 | 0; //@line 2330
  HEAP32[$580 >> 2] = $124; //@line 2331
  $581 = $ReallocAsyncCtx4 + 252 | 0; //@line 2332
  HEAP32[$581 >> 2] = $126; //@line 2333
  $582 = $ReallocAsyncCtx4 + 256 | 0; //@line 2334
  HEAP32[$582 >> 2] = $128; //@line 2335
  $583 = $ReallocAsyncCtx4 + 260 | 0; //@line 2336
  HEAP32[$583 >> 2] = $130; //@line 2337
  $584 = $ReallocAsyncCtx4 + 264 | 0; //@line 2338
  HEAP32[$584 >> 2] = $$096$be; //@line 2339
  $585 = $ReallocAsyncCtx4 + 268 | 0; //@line 2340
  HEAP32[$585 >> 2] = $134; //@line 2341
  $586 = $ReallocAsyncCtx4 + 272 | 0; //@line 2342
  HEAP32[$586 >> 2] = $136; //@line 2343
  sp = STACKTOP; //@line 2344
  return;
 } else if ((label | 0) == 32) {
  HEAP8[$16 >> 0] = HEAP8[$36 + ($139 & 255) >> 0] | 0; //@line 2352
  $604 = $$0$be + 5 << 24 >> 24; //@line 2365
  HEAP32[$4 >> 2] = (HEAPU8[$36 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$36 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$36 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 2373
  $614 = HEAP32[(HEAP32[$32 >> 2] | 0) + 48 >> 2] | 0; //@line 2376
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(272) | 0; //@line 2377
  $615 = FUNCTION_TABLE_iii[$614 & 31]($20, $102) | 0; //@line 2378
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 494; //@line 2381
   $616 = $ReallocAsyncCtx5 + 4 | 0; //@line 2382
   HEAP32[$616 >> 2] = $2; //@line 2383
   $617 = $ReallocAsyncCtx5 + 8 | 0; //@line 2384
   HEAP32[$617 >> 2] = $4; //@line 2385
   $618 = $ReallocAsyncCtx5 + 12 | 0; //@line 2386
   HEAP8[$618 >> 0] = $6; //@line 2387
   $619 = $ReallocAsyncCtx5 + 16 | 0; //@line 2388
   HEAP32[$619 >> 2] = $8; //@line 2389
   $620 = $ReallocAsyncCtx5 + 20 | 0; //@line 2390
   HEAP32[$620 >> 2] = $10; //@line 2391
   $621 = $ReallocAsyncCtx5 + 24 | 0; //@line 2392
   HEAP32[$621 >> 2] = $12; //@line 2393
   $622 = $ReallocAsyncCtx5 + 28 | 0; //@line 2394
   HEAP32[$622 >> 2] = $14; //@line 2395
   $623 = $ReallocAsyncCtx5 + 32 | 0; //@line 2396
   HEAP32[$623 >> 2] = $16; //@line 2397
   $624 = $ReallocAsyncCtx5 + 36 | 0; //@line 2398
   HEAP32[$624 >> 2] = $18; //@line 2399
   $625 = $ReallocAsyncCtx5 + 40 | 0; //@line 2400
   HEAP32[$625 >> 2] = $20; //@line 2401
   $626 = $ReallocAsyncCtx5 + 44 | 0; //@line 2402
   HEAP32[$626 >> 2] = $22; //@line 2403
   $627 = $ReallocAsyncCtx5 + 48 | 0; //@line 2404
   HEAP32[$627 >> 2] = $24; //@line 2405
   $628 = $ReallocAsyncCtx5 + 52 | 0; //@line 2406
   HEAP32[$628 >> 2] = $26; //@line 2407
   $629 = $ReallocAsyncCtx5 + 56 | 0; //@line 2408
   HEAP32[$629 >> 2] = $28; //@line 2409
   $630 = $ReallocAsyncCtx5 + 60 | 0; //@line 2410
   HEAP8[$630 >> 0] = $30; //@line 2411
   $631 = $ReallocAsyncCtx5 + 64 | 0; //@line 2412
   HEAP32[$631 >> 2] = $32; //@line 2413
   $632 = $ReallocAsyncCtx5 + 68 | 0; //@line 2414
   HEAP8[$632 >> 0] = $34; //@line 2415
   $633 = $ReallocAsyncCtx5 + 72 | 0; //@line 2416
   HEAP32[$633 >> 2] = $36; //@line 2417
   $634 = $ReallocAsyncCtx5 + 76 | 0; //@line 2418
   HEAP32[$634 >> 2] = $38; //@line 2419
   $635 = $ReallocAsyncCtx5 + 80 | 0; //@line 2420
   HEAP32[$635 >> 2] = $40; //@line 2421
   $636 = $ReallocAsyncCtx5 + 84 | 0; //@line 2422
   HEAP32[$636 >> 2] = $42; //@line 2423
   $637 = $ReallocAsyncCtx5 + 88 | 0; //@line 2424
   HEAP32[$637 >> 2] = $44; //@line 2425
   $638 = $ReallocAsyncCtx5 + 92 | 0; //@line 2426
   HEAP32[$638 >> 2] = $46; //@line 2427
   $639 = $ReallocAsyncCtx5 + 96 | 0; //@line 2428
   HEAP32[$639 >> 2] = $48; //@line 2429
   $640 = $ReallocAsyncCtx5 + 100 | 0; //@line 2430
   HEAP32[$640 >> 2] = $50; //@line 2431
   $641 = $ReallocAsyncCtx5 + 104 | 0; //@line 2432
   HEAP32[$641 >> 2] = $52; //@line 2433
   $642 = $ReallocAsyncCtx5 + 108 | 0; //@line 2434
   HEAP32[$642 >> 2] = $54; //@line 2435
   $643 = $ReallocAsyncCtx5 + 112 | 0; //@line 2436
   HEAP32[$643 >> 2] = $56; //@line 2437
   $644 = $ReallocAsyncCtx5 + 116 | 0; //@line 2438
   HEAP32[$644 >> 2] = $58; //@line 2439
   $645 = $ReallocAsyncCtx5 + 120 | 0; //@line 2440
   HEAP32[$645 >> 2] = $60; //@line 2441
   $646 = $ReallocAsyncCtx5 + 124 | 0; //@line 2442
   HEAP32[$646 >> 2] = $62; //@line 2443
   $647 = $ReallocAsyncCtx5 + 128 | 0; //@line 2444
   HEAP32[$647 >> 2] = $64; //@line 2445
   $648 = $ReallocAsyncCtx5 + 132 | 0; //@line 2446
   HEAP32[$648 >> 2] = $66; //@line 2447
   $649 = $ReallocAsyncCtx5 + 136 | 0; //@line 2448
   HEAP32[$649 >> 2] = $68; //@line 2449
   $650 = $ReallocAsyncCtx5 + 140 | 0; //@line 2450
   HEAP32[$650 >> 2] = $70; //@line 2451
   $651 = $ReallocAsyncCtx5 + 144 | 0; //@line 2452
   HEAP32[$651 >> 2] = $72; //@line 2453
   $652 = $ReallocAsyncCtx5 + 148 | 0; //@line 2454
   HEAP32[$652 >> 2] = $74; //@line 2455
   $653 = $ReallocAsyncCtx5 + 152 | 0; //@line 2456
   HEAP32[$653 >> 2] = $76; //@line 2457
   $654 = $ReallocAsyncCtx5 + 156 | 0; //@line 2458
   HEAP32[$654 >> 2] = $78; //@line 2459
   $655 = $ReallocAsyncCtx5 + 160 | 0; //@line 2460
   HEAP32[$655 >> 2] = $82; //@line 2461
   $656 = $ReallocAsyncCtx5 + 164 | 0; //@line 2462
   HEAP32[$656 >> 2] = $84; //@line 2463
   $657 = $ReallocAsyncCtx5 + 168 | 0; //@line 2464
   HEAP32[$657 >> 2] = $86; //@line 2465
   $658 = $ReallocAsyncCtx5 + 172 | 0; //@line 2466
   HEAP32[$658 >> 2] = $88; //@line 2467
   $659 = $ReallocAsyncCtx5 + 176 | 0; //@line 2468
   HEAP32[$659 >> 2] = $90; //@line 2469
   $660 = $ReallocAsyncCtx5 + 180 | 0; //@line 2470
   HEAP32[$660 >> 2] = $92; //@line 2471
   $661 = $ReallocAsyncCtx5 + 184 | 0; //@line 2472
   HEAP32[$661 >> 2] = $94; //@line 2473
   $662 = $ReallocAsyncCtx5 + 188 | 0; //@line 2474
   HEAP32[$662 >> 2] = $96; //@line 2475
   $663 = $ReallocAsyncCtx5 + 192 | 0; //@line 2476
   HEAP32[$663 >> 2] = $98; //@line 2477
   $664 = $ReallocAsyncCtx5 + 196 | 0; //@line 2478
   HEAP32[$664 >> 2] = $100; //@line 2479
   $665 = $ReallocAsyncCtx5 + 200 | 0; //@line 2480
   HEAP32[$665 >> 2] = $102; //@line 2481
   $666 = $ReallocAsyncCtx5 + 204 | 0; //@line 2482
   HEAP8[$666 >> 0] = $604; //@line 2483
   $667 = $ReallocAsyncCtx5 + 208 | 0; //@line 2484
   HEAP32[$667 >> 2] = $104; //@line 2485
   $668 = $ReallocAsyncCtx5 + 212 | 0; //@line 2486
   HEAP32[$668 >> 2] = $106; //@line 2487
   $669 = $ReallocAsyncCtx5 + 216 | 0; //@line 2488
   HEAP32[$669 >> 2] = $108; //@line 2489
   $670 = $ReallocAsyncCtx5 + 220 | 0; //@line 2490
   HEAP32[$670 >> 2] = $110; //@line 2491
   $671 = $ReallocAsyncCtx5 + 224 | 0; //@line 2492
   HEAP32[$671 >> 2] = $112; //@line 2493
   $672 = $ReallocAsyncCtx5 + 228 | 0; //@line 2494
   HEAP32[$672 >> 2] = $114; //@line 2495
   $673 = $ReallocAsyncCtx5 + 232 | 0; //@line 2496
   HEAP32[$673 >> 2] = $116; //@line 2497
   $674 = $ReallocAsyncCtx5 + 236 | 0; //@line 2498
   HEAP32[$674 >> 2] = $118; //@line 2499
   $675 = $ReallocAsyncCtx5 + 240 | 0; //@line 2500
   HEAP32[$675 >> 2] = $120; //@line 2501
   $676 = $ReallocAsyncCtx5 + 244 | 0; //@line 2502
   HEAP32[$676 >> 2] = $122; //@line 2503
   $677 = $ReallocAsyncCtx5 + 248 | 0; //@line 2504
   HEAP32[$677 >> 2] = $124; //@line 2505
   $678 = $ReallocAsyncCtx5 + 252 | 0; //@line 2506
   HEAP32[$678 >> 2] = $126; //@line 2507
   $679 = $ReallocAsyncCtx5 + 256 | 0; //@line 2508
   HEAP32[$679 >> 2] = $128; //@line 2509
   $680 = $ReallocAsyncCtx5 + 260 | 0; //@line 2510
   HEAP32[$680 >> 2] = $130; //@line 2511
   $681 = $ReallocAsyncCtx5 + 264 | 0; //@line 2512
   HEAP32[$681 >> 2] = $134; //@line 2513
   $682 = $ReallocAsyncCtx5 + 268 | 0; //@line 2514
   HEAP32[$682 >> 2] = $136; //@line 2515
   sp = STACKTOP; //@line 2516
   return;
  }
  HEAP8[___async_retval >> 0] = $615; //@line 2520
  ___async_unwind = 0; //@line 2521
  HEAP32[$ReallocAsyncCtx5 >> 2] = 494; //@line 2522
  $616 = $ReallocAsyncCtx5 + 4 | 0; //@line 2523
  HEAP32[$616 >> 2] = $2; //@line 2524
  $617 = $ReallocAsyncCtx5 + 8 | 0; //@line 2525
  HEAP32[$617 >> 2] = $4; //@line 2526
  $618 = $ReallocAsyncCtx5 + 12 | 0; //@line 2527
  HEAP8[$618 >> 0] = $6; //@line 2528
  $619 = $ReallocAsyncCtx5 + 16 | 0; //@line 2529
  HEAP32[$619 >> 2] = $8; //@line 2530
  $620 = $ReallocAsyncCtx5 + 20 | 0; //@line 2531
  HEAP32[$620 >> 2] = $10; //@line 2532
  $621 = $ReallocAsyncCtx5 + 24 | 0; //@line 2533
  HEAP32[$621 >> 2] = $12; //@line 2534
  $622 = $ReallocAsyncCtx5 + 28 | 0; //@line 2535
  HEAP32[$622 >> 2] = $14; //@line 2536
  $623 = $ReallocAsyncCtx5 + 32 | 0; //@line 2537
  HEAP32[$623 >> 2] = $16; //@line 2538
  $624 = $ReallocAsyncCtx5 + 36 | 0; //@line 2539
  HEAP32[$624 >> 2] = $18; //@line 2540
  $625 = $ReallocAsyncCtx5 + 40 | 0; //@line 2541
  HEAP32[$625 >> 2] = $20; //@line 2542
  $626 = $ReallocAsyncCtx5 + 44 | 0; //@line 2543
  HEAP32[$626 >> 2] = $22; //@line 2544
  $627 = $ReallocAsyncCtx5 + 48 | 0; //@line 2545
  HEAP32[$627 >> 2] = $24; //@line 2546
  $628 = $ReallocAsyncCtx5 + 52 | 0; //@line 2547
  HEAP32[$628 >> 2] = $26; //@line 2548
  $629 = $ReallocAsyncCtx5 + 56 | 0; //@line 2549
  HEAP32[$629 >> 2] = $28; //@line 2550
  $630 = $ReallocAsyncCtx5 + 60 | 0; //@line 2551
  HEAP8[$630 >> 0] = $30; //@line 2552
  $631 = $ReallocAsyncCtx5 + 64 | 0; //@line 2553
  HEAP32[$631 >> 2] = $32; //@line 2554
  $632 = $ReallocAsyncCtx5 + 68 | 0; //@line 2555
  HEAP8[$632 >> 0] = $34; //@line 2556
  $633 = $ReallocAsyncCtx5 + 72 | 0; //@line 2557
  HEAP32[$633 >> 2] = $36; //@line 2558
  $634 = $ReallocAsyncCtx5 + 76 | 0; //@line 2559
  HEAP32[$634 >> 2] = $38; //@line 2560
  $635 = $ReallocAsyncCtx5 + 80 | 0; //@line 2561
  HEAP32[$635 >> 2] = $40; //@line 2562
  $636 = $ReallocAsyncCtx5 + 84 | 0; //@line 2563
  HEAP32[$636 >> 2] = $42; //@line 2564
  $637 = $ReallocAsyncCtx5 + 88 | 0; //@line 2565
  HEAP32[$637 >> 2] = $44; //@line 2566
  $638 = $ReallocAsyncCtx5 + 92 | 0; //@line 2567
  HEAP32[$638 >> 2] = $46; //@line 2568
  $639 = $ReallocAsyncCtx5 + 96 | 0; //@line 2569
  HEAP32[$639 >> 2] = $48; //@line 2570
  $640 = $ReallocAsyncCtx5 + 100 | 0; //@line 2571
  HEAP32[$640 >> 2] = $50; //@line 2572
  $641 = $ReallocAsyncCtx5 + 104 | 0; //@line 2573
  HEAP32[$641 >> 2] = $52; //@line 2574
  $642 = $ReallocAsyncCtx5 + 108 | 0; //@line 2575
  HEAP32[$642 >> 2] = $54; //@line 2576
  $643 = $ReallocAsyncCtx5 + 112 | 0; //@line 2577
  HEAP32[$643 >> 2] = $56; //@line 2578
  $644 = $ReallocAsyncCtx5 + 116 | 0; //@line 2579
  HEAP32[$644 >> 2] = $58; //@line 2580
  $645 = $ReallocAsyncCtx5 + 120 | 0; //@line 2581
  HEAP32[$645 >> 2] = $60; //@line 2582
  $646 = $ReallocAsyncCtx5 + 124 | 0; //@line 2583
  HEAP32[$646 >> 2] = $62; //@line 2584
  $647 = $ReallocAsyncCtx5 + 128 | 0; //@line 2585
  HEAP32[$647 >> 2] = $64; //@line 2586
  $648 = $ReallocAsyncCtx5 + 132 | 0; //@line 2587
  HEAP32[$648 >> 2] = $66; //@line 2588
  $649 = $ReallocAsyncCtx5 + 136 | 0; //@line 2589
  HEAP32[$649 >> 2] = $68; //@line 2590
  $650 = $ReallocAsyncCtx5 + 140 | 0; //@line 2591
  HEAP32[$650 >> 2] = $70; //@line 2592
  $651 = $ReallocAsyncCtx5 + 144 | 0; //@line 2593
  HEAP32[$651 >> 2] = $72; //@line 2594
  $652 = $ReallocAsyncCtx5 + 148 | 0; //@line 2595
  HEAP32[$652 >> 2] = $74; //@line 2596
  $653 = $ReallocAsyncCtx5 + 152 | 0; //@line 2597
  HEAP32[$653 >> 2] = $76; //@line 2598
  $654 = $ReallocAsyncCtx5 + 156 | 0; //@line 2599
  HEAP32[$654 >> 2] = $78; //@line 2600
  $655 = $ReallocAsyncCtx5 + 160 | 0; //@line 2601
  HEAP32[$655 >> 2] = $82; //@line 2602
  $656 = $ReallocAsyncCtx5 + 164 | 0; //@line 2603
  HEAP32[$656 >> 2] = $84; //@line 2604
  $657 = $ReallocAsyncCtx5 + 168 | 0; //@line 2605
  HEAP32[$657 >> 2] = $86; //@line 2606
  $658 = $ReallocAsyncCtx5 + 172 | 0; //@line 2607
  HEAP32[$658 >> 2] = $88; //@line 2608
  $659 = $ReallocAsyncCtx5 + 176 | 0; //@line 2609
  HEAP32[$659 >> 2] = $90; //@line 2610
  $660 = $ReallocAsyncCtx5 + 180 | 0; //@line 2611
  HEAP32[$660 >> 2] = $92; //@line 2612
  $661 = $ReallocAsyncCtx5 + 184 | 0; //@line 2613
  HEAP32[$661 >> 2] = $94; //@line 2614
  $662 = $ReallocAsyncCtx5 + 188 | 0; //@line 2615
  HEAP32[$662 >> 2] = $96; //@line 2616
  $663 = $ReallocAsyncCtx5 + 192 | 0; //@line 2617
  HEAP32[$663 >> 2] = $98; //@line 2618
  $664 = $ReallocAsyncCtx5 + 196 | 0; //@line 2619
  HEAP32[$664 >> 2] = $100; //@line 2620
  $665 = $ReallocAsyncCtx5 + 200 | 0; //@line 2621
  HEAP32[$665 >> 2] = $102; //@line 2622
  $666 = $ReallocAsyncCtx5 + 204 | 0; //@line 2623
  HEAP8[$666 >> 0] = $604; //@line 2624
  $667 = $ReallocAsyncCtx5 + 208 | 0; //@line 2625
  HEAP32[$667 >> 2] = $104; //@line 2626
  $668 = $ReallocAsyncCtx5 + 212 | 0; //@line 2627
  HEAP32[$668 >> 2] = $106; //@line 2628
  $669 = $ReallocAsyncCtx5 + 216 | 0; //@line 2629
  HEAP32[$669 >> 2] = $108; //@line 2630
  $670 = $ReallocAsyncCtx5 + 220 | 0; //@line 2631
  HEAP32[$670 >> 2] = $110; //@line 2632
  $671 = $ReallocAsyncCtx5 + 224 | 0; //@line 2633
  HEAP32[$671 >> 2] = $112; //@line 2634
  $672 = $ReallocAsyncCtx5 + 228 | 0; //@line 2635
  HEAP32[$672 >> 2] = $114; //@line 2636
  $673 = $ReallocAsyncCtx5 + 232 | 0; //@line 2637
  HEAP32[$673 >> 2] = $116; //@line 2638
  $674 = $ReallocAsyncCtx5 + 236 | 0; //@line 2639
  HEAP32[$674 >> 2] = $118; //@line 2640
  $675 = $ReallocAsyncCtx5 + 240 | 0; //@line 2641
  HEAP32[$675 >> 2] = $120; //@line 2642
  $676 = $ReallocAsyncCtx5 + 244 | 0; //@line 2643
  HEAP32[$676 >> 2] = $122; //@line 2644
  $677 = $ReallocAsyncCtx5 + 248 | 0; //@line 2645
  HEAP32[$677 >> 2] = $124; //@line 2646
  $678 = $ReallocAsyncCtx5 + 252 | 0; //@line 2647
  HEAP32[$678 >> 2] = $126; //@line 2648
  $679 = $ReallocAsyncCtx5 + 256 | 0; //@line 2649
  HEAP32[$679 >> 2] = $128; //@line 2650
  $680 = $ReallocAsyncCtx5 + 260 | 0; //@line 2651
  HEAP32[$680 >> 2] = $130; //@line 2652
  $681 = $ReallocAsyncCtx5 + 264 | 0; //@line 2653
  HEAP32[$681 >> 2] = $134; //@line 2654
  $682 = $ReallocAsyncCtx5 + 268 | 0; //@line 2655
  HEAP32[$682 >> 2] = $136; //@line 2656
  sp = STACKTOP; //@line 2657
  return;
 } else if ((label | 0) == 36) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 2662
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_183($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i98 = 0, $$096$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $137 = 0, $14 = 0, $148 = 0, $149 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $231 = 0, $234 = 0, $239 = 0, $24 = 0, $247 = 0, $26 = 0, $266 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $347 = 0, $348 = 0, $36 = 0, $38 = 0, $385 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $461 = 0, $465 = 0, $469 = 0, $472 = 0, $478 = 0, $48 = 0, $481 = 0, $482 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $578 = 0, $58 = 0, $588 = 0, $589 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $659 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8497
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8499
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8501
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 8503
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8505
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8507
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8509
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8511
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 8513
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 8515
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 8517
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 8519
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 8521
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 8523
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 8525
 $30 = HEAP8[$0 + 60 >> 0] | 0; //@line 8527
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 8529
 $34 = HEAP8[$0 + 68 >> 0] | 0; //@line 8531
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 8533
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 8535
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 8537
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 8539
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 8541
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 8543
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 8545
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 8547
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 8549
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 8551
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 8553
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 8555
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 8557
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 8559
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 8561
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 8563
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 8565
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 8567
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 8569
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 8571
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 8573
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 8575
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 8577
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 8579
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 8581
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 8583
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 8585
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 8587
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 8589
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 8591
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 8593
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 8595
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 8597
 $102 = HEAP8[$0 + 204 >> 0] | 0; //@line 8599
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 8601
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 8603
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 8605
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 8607
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 8609
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 8611
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 8613
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 8615
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 8617
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 8619
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 8621
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 8623
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 8625
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 8627
 $132 = HEAP32[$0 + 264 >> 2] | 0; //@line 8629
 $134 = HEAP32[$0 + 268 >> 2] | 0; //@line 8631
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 8633
 $659 = HEAP8[$42 >> 0] | 0; //@line 8635
 if (($659 & 255) < (-128 - (HEAP8[$14 >> 0] | 0) & 255)) {
  HEAP8[($659 & 255) + ($24 + 4) >> 0] = 10; //@line 8642
  HEAP8[$42 >> 0] = $659 + 2 << 24 >> 24; //@line 8644
  HEAP8[($659 + 1 & 255) + ($24 + 4) >> 0] = $AsyncRetVal; //@line 8647
  HEAP8[$56 >> 0] = 1; //@line 8648
  HEAP8[$118 >> 0] = 1; //@line 8649
  $$0$i98 = 0; //@line 8650
 } else {
  $$0$i98 = -1e3; //@line 8652
 }
 $$0$be = $102; //@line 8654
 $$096$be = $$0$i98; //@line 8654
 L5 : while (1) {
  if (($$0$be & 255) >= ($34 & 255)) {
   label = 31; //@line 8658
   break;
  }
  $137 = $$0$be + 1 << 24 >> 24; //@line 8662
  switch (HEAP8[$36 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 8667
    break L5;
    break;
   }
  case 5:
   {
    label = 9; //@line 8672
    break L5;
    break;
   }
  case 7:
   {
    label = 14; //@line 8677
    break L5;
    break;
   }
  case 9:
   {
    label = 19; //@line 8682
    break L5;
    break;
   }
  case 10:
   {
    label = 24; //@line 8687
    break L5;
    break;
   }
  case 2:
   {
    HEAP32[$66 >> 2] = 0; //@line 8692
    HEAP8[$12 >> 0] = HEAP8[$36 + ($137 & 255) >> 0] | 0; //@line 8697
    HEAP8[$26 >> 0] = HEAP8[$36 + ($$0$be + 2 & 255) >> 0] | 0; //@line 8702
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 8703
    continue L5;
    break;
   }
  case 4:
   {
    $231 = $$0$be + 2 << 24 >> 24; //@line 8708
    $234 = HEAP8[$36 + ($137 & 255) >> 0] | 0; //@line 8711
    HEAP8[$110 >> 0] = $234; //@line 8712
    HEAP16[$132 >> 1] = 1 << ($234 & 255); //@line 8716
    $239 = HEAP8[$42 >> 0] | 0; //@line 8718
    if (($239 & 255) >= (-128 - (HEAP8[$14 >> 0] | 0) & 255)) {
     $$0$be = $231; //@line 8722
     $$096$be = -1e3; //@line 8722
     continue L5;
    }
    HEAP8[$42 >> 0] = $239 + 1 << 24 >> 24; //@line 8728
    HEAP8[($239 & 255) + ($24 + 4) >> 0] = 4; //@line 8729
    HEAP8[$118 >> 0] = 1; //@line 8730
    $$0$be = $231; //@line 8731
    $$096$be = 0; //@line 8731
    continue L5;
    break;
   }
  case 6:
   {
    $347 = HEAP8[$42 >> 0] | 0; //@line 8737
    $348 = $347 & 255; //@line 8738
    if (((-128 - (HEAP8[$14 >> 0] | 0) & 255) + -2 | 0) <= ($348 | 0)) {
     $$0$be = $137; //@line 8744
     $$096$be = -1e3; //@line 8744
     continue L5;
    }
    HEAP8[$24 + 4 + $348 >> 0] = 6; //@line 8749
    HEAP8[($347 + 1 & 255) + ($24 + 4) >> 0] = -1; //@line 8753
    HEAP8[$42 >> 0] = $347 + 3 << 24 >> 24; //@line 8755
    HEAP8[($347 + 2 & 255) + ($24 + 4) >> 0] = $6; //@line 8758
    HEAP8[$118 >> 0] = 1; //@line 8759
    $$0$be = $137; //@line 8760
    $$096$be = 0; //@line 8760
    continue L5;
    break;
   }
  case 8:
   {
    $461 = $$0$be + 2 << 24 >> 24; //@line 8765
    $465 = HEAP8[$36 + ($137 & 255) >> 0] & 15; //@line 8769
    $469 = ($465 + ($465 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 8774
    HEAP32[$86 >> 2] = $469; //@line 8775
    HEAP32[$74 >> 2] = $469 + 1e3; //@line 8777
    $472 = HEAP8[$42 >> 0] | 0; //@line 8779
    if (($472 & 255) >= (-128 - (HEAP8[$14 >> 0] | 0) & 255)) {
     $$0$be = $461; //@line 8783
     $$096$be = -1e3; //@line 8783
     continue L5;
    }
    HEAP8[$42 >> 0] = $472 + 1 << 24 >> 24; //@line 8789
    HEAP8[($472 & 255) + ($24 + 4) >> 0] = 8; //@line 8790
    HEAP8[$56 >> 0] = 1; //@line 8791
    HEAP8[$118 >> 0] = 1; //@line 8792
    $$0$be = $461; //@line 8793
    $$096$be = 0; //@line 8793
    continue L5;
    break;
   }
  default:
   {
    $$0$be = $137; //@line 8798
    $$096$be = -1013; //@line 8798
    continue L5;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$122 >> 0] = 0; //@line 8804
  HEAP8[$92 >> 0] = 0; //@line 8805
  HEAP8[$78 >> 0] = 0; //@line 8806
  HEAP8[$70 >> 0] = 0; //@line 8807
  $148 = $137 & 255; //@line 8808
  $149 = $148 + -1 | 0; //@line 8809
  HEAP32[$40 >> 2] = $36 + $149; //@line 8811
  HEAP8[$112 >> 0] = $46 - $149; //@line 8814
  HEAP8[$134 >> 0] = HEAP8[$126 >> 0] | 0; //@line 8816
  HEAP8[$84 >> 0] = HEAP8[$80 >> 0] | 0; //@line 8818
  HEAP8[$96 >> 0] = HEAP8[$90 >> 0] | 0; //@line 8820
  HEAP8[$54 >> 0] = HEAP8[$44 >> 0] | 0; //@line 8822
  HEAP8[$10 >> 0] = HEAP8[$68 >> 0] | 0; //@line 8824
  $160 = HEAP32[(HEAP32[$2 >> 2] | 0) + 36 >> 2] | 0; //@line 8827
  $ReallocAsyncCtx = _emscripten_realloc_async_context(276) | 0; //@line 8828
  $161 = FUNCTION_TABLE_iiiiiii[$160 & 3]($20, $116, $122, $92, $78, $70) | 0; //@line 8829
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 490; //@line 8832
   $162 = $ReallocAsyncCtx + 4 | 0; //@line 8833
   HEAP32[$162 >> 2] = $2; //@line 8834
   $163 = $ReallocAsyncCtx + 8 | 0; //@line 8835
   HEAP32[$163 >> 2] = $4; //@line 8836
   $164 = $ReallocAsyncCtx + 12 | 0; //@line 8837
   HEAP8[$164 >> 0] = $6; //@line 8838
   $165 = $ReallocAsyncCtx + 16 | 0; //@line 8839
   HEAP32[$165 >> 2] = $8; //@line 8840
   $166 = $ReallocAsyncCtx + 20 | 0; //@line 8841
   HEAP32[$166 >> 2] = $10; //@line 8842
   $167 = $ReallocAsyncCtx + 24 | 0; //@line 8843
   HEAP32[$167 >> 2] = $12; //@line 8844
   $168 = $ReallocAsyncCtx + 28 | 0; //@line 8845
   HEAP32[$168 >> 2] = $14; //@line 8846
   $169 = $ReallocAsyncCtx + 32 | 0; //@line 8847
   HEAP32[$169 >> 2] = $16; //@line 8848
   $170 = $ReallocAsyncCtx + 36 | 0; //@line 8849
   HEAP32[$170 >> 2] = $18; //@line 8850
   $171 = $ReallocAsyncCtx + 40 | 0; //@line 8851
   HEAP32[$171 >> 2] = $20; //@line 8852
   $172 = $ReallocAsyncCtx + 44 | 0; //@line 8853
   HEAP32[$172 >> 2] = $22; //@line 8854
   $173 = $ReallocAsyncCtx + 48 | 0; //@line 8855
   HEAP32[$173 >> 2] = $24; //@line 8856
   $174 = $ReallocAsyncCtx + 52 | 0; //@line 8857
   HEAP32[$174 >> 2] = $26; //@line 8858
   $175 = $ReallocAsyncCtx + 56 | 0; //@line 8859
   HEAP32[$175 >> 2] = $28; //@line 8860
   $176 = $ReallocAsyncCtx + 60 | 0; //@line 8861
   HEAP8[$176 >> 0] = $30; //@line 8862
   $177 = $ReallocAsyncCtx + 64 | 0; //@line 8863
   HEAP32[$177 >> 2] = $32; //@line 8864
   $178 = $ReallocAsyncCtx + 68 | 0; //@line 8865
   HEAP8[$178 >> 0] = $34; //@line 8866
   $179 = $ReallocAsyncCtx + 72 | 0; //@line 8867
   HEAP32[$179 >> 2] = $36; //@line 8868
   $180 = $ReallocAsyncCtx + 76 | 0; //@line 8869
   HEAP32[$180 >> 2] = $38; //@line 8870
   $181 = $ReallocAsyncCtx + 80 | 0; //@line 8871
   HEAP32[$181 >> 2] = $40; //@line 8872
   $182 = $ReallocAsyncCtx + 84 | 0; //@line 8873
   HEAP32[$182 >> 2] = $42; //@line 8874
   $183 = $ReallocAsyncCtx + 88 | 0; //@line 8875
   HEAP32[$183 >> 2] = $44; //@line 8876
   $184 = $ReallocAsyncCtx + 92 | 0; //@line 8877
   HEAP32[$184 >> 2] = $46; //@line 8878
   $185 = $ReallocAsyncCtx + 96 | 0; //@line 8879
   HEAP32[$185 >> 2] = $48; //@line 8880
   $186 = $ReallocAsyncCtx + 100 | 0; //@line 8881
   HEAP32[$186 >> 2] = $50; //@line 8882
   $187 = $ReallocAsyncCtx + 104 | 0; //@line 8883
   HEAP32[$187 >> 2] = $52; //@line 8884
   $188 = $ReallocAsyncCtx + 108 | 0; //@line 8885
   HEAP32[$188 >> 2] = $54; //@line 8886
   $189 = $ReallocAsyncCtx + 112 | 0; //@line 8887
   HEAP32[$189 >> 2] = $56; //@line 8888
   $190 = $ReallocAsyncCtx + 116 | 0; //@line 8889
   HEAP32[$190 >> 2] = $58; //@line 8890
   $191 = $ReallocAsyncCtx + 120 | 0; //@line 8891
   HEAP32[$191 >> 2] = $60; //@line 8892
   $192 = $ReallocAsyncCtx + 124 | 0; //@line 8893
   HEAP32[$192 >> 2] = $62; //@line 8894
   $193 = $ReallocAsyncCtx + 128 | 0; //@line 8895
   HEAP32[$193 >> 2] = $64; //@line 8896
   $194 = $ReallocAsyncCtx + 132 | 0; //@line 8897
   HEAP32[$194 >> 2] = $66; //@line 8898
   $195 = $ReallocAsyncCtx + 136 | 0; //@line 8899
   HEAP32[$195 >> 2] = $68; //@line 8900
   $196 = $ReallocAsyncCtx + 140 | 0; //@line 8901
   HEAP32[$196 >> 2] = $70; //@line 8902
   $197 = $ReallocAsyncCtx + 144 | 0; //@line 8903
   HEAP32[$197 >> 2] = $72; //@line 8904
   $198 = $ReallocAsyncCtx + 148 | 0; //@line 8905
   HEAP32[$198 >> 2] = $74; //@line 8906
   $199 = $ReallocAsyncCtx + 152 | 0; //@line 8907
   HEAP32[$199 >> 2] = $76; //@line 8908
   $200 = $ReallocAsyncCtx + 156 | 0; //@line 8909
   HEAP32[$200 >> 2] = $78; //@line 8910
   $201 = $ReallocAsyncCtx + 160 | 0; //@line 8911
   HEAP32[$201 >> 2] = $148; //@line 8912
   $202 = $ReallocAsyncCtx + 164 | 0; //@line 8913
   HEAP32[$202 >> 2] = $80; //@line 8914
   $203 = $ReallocAsyncCtx + 168 | 0; //@line 8915
   HEAP32[$203 >> 2] = $82; //@line 8916
   $204 = $ReallocAsyncCtx + 172 | 0; //@line 8917
   HEAP32[$204 >> 2] = $84; //@line 8918
   $205 = $ReallocAsyncCtx + 176 | 0; //@line 8919
   HEAP32[$205 >> 2] = $86; //@line 8920
   $206 = $ReallocAsyncCtx + 180 | 0; //@line 8921
   HEAP32[$206 >> 2] = $88; //@line 8922
   $207 = $ReallocAsyncCtx + 184 | 0; //@line 8923
   HEAP32[$207 >> 2] = $90; //@line 8924
   $208 = $ReallocAsyncCtx + 188 | 0; //@line 8925
   HEAP32[$208 >> 2] = $92; //@line 8926
   $209 = $ReallocAsyncCtx + 192 | 0; //@line 8927
   HEAP32[$209 >> 2] = $94; //@line 8928
   $210 = $ReallocAsyncCtx + 196 | 0; //@line 8929
   HEAP32[$210 >> 2] = $96; //@line 8930
   $211 = $ReallocAsyncCtx + 200 | 0; //@line 8931
   HEAP32[$211 >> 2] = $98; //@line 8932
   $212 = $ReallocAsyncCtx + 204 | 0; //@line 8933
   HEAP32[$212 >> 2] = $100; //@line 8934
   $213 = $ReallocAsyncCtx + 208 | 0; //@line 8935
   HEAP32[$213 >> 2] = $104; //@line 8936
   $214 = $ReallocAsyncCtx + 212 | 0; //@line 8937
   HEAP32[$214 >> 2] = $106; //@line 8938
   $215 = $ReallocAsyncCtx + 216 | 0; //@line 8939
   HEAP32[$215 >> 2] = $108; //@line 8940
   $216 = $ReallocAsyncCtx + 220 | 0; //@line 8941
   HEAP32[$216 >> 2] = $110; //@line 8942
   $217 = $ReallocAsyncCtx + 224 | 0; //@line 8943
   HEAP32[$217 >> 2] = $112; //@line 8944
   $218 = $ReallocAsyncCtx + 228 | 0; //@line 8945
   HEAP32[$218 >> 2] = $114; //@line 8946
   $219 = $ReallocAsyncCtx + 232 | 0; //@line 8947
   HEAP32[$219 >> 2] = $116; //@line 8948
   $220 = $ReallocAsyncCtx + 236 | 0; //@line 8949
   HEAP32[$220 >> 2] = $118; //@line 8950
   $221 = $ReallocAsyncCtx + 240 | 0; //@line 8951
   HEAP32[$221 >> 2] = $120; //@line 8952
   $222 = $ReallocAsyncCtx + 244 | 0; //@line 8953
   HEAP32[$222 >> 2] = $122; //@line 8954
   $223 = $ReallocAsyncCtx + 248 | 0; //@line 8955
   HEAP32[$223 >> 2] = $124; //@line 8956
   $224 = $ReallocAsyncCtx + 252 | 0; //@line 8957
   HEAP32[$224 >> 2] = $126; //@line 8958
   $225 = $ReallocAsyncCtx + 256 | 0; //@line 8959
   HEAP32[$225 >> 2] = $128; //@line 8960
   $226 = $ReallocAsyncCtx + 260 | 0; //@line 8961
   HEAP32[$226 >> 2] = $130; //@line 8962
   $227 = $ReallocAsyncCtx + 264 | 0; //@line 8963
   HEAP32[$227 >> 2] = $$096$be; //@line 8964
   $228 = $ReallocAsyncCtx + 268 | 0; //@line 8965
   HEAP32[$228 >> 2] = $132; //@line 8966
   $229 = $ReallocAsyncCtx + 272 | 0; //@line 8967
   HEAP32[$229 >> 2] = $134; //@line 8968
   sp = STACKTOP; //@line 8969
   return;
  }
  HEAP8[___async_retval >> 0] = $161; //@line 8973
  ___async_unwind = 0; //@line 8974
  HEAP32[$ReallocAsyncCtx >> 2] = 490; //@line 8975
  $162 = $ReallocAsyncCtx + 4 | 0; //@line 8976
  HEAP32[$162 >> 2] = $2; //@line 8977
  $163 = $ReallocAsyncCtx + 8 | 0; //@line 8978
  HEAP32[$163 >> 2] = $4; //@line 8979
  $164 = $ReallocAsyncCtx + 12 | 0; //@line 8980
  HEAP8[$164 >> 0] = $6; //@line 8981
  $165 = $ReallocAsyncCtx + 16 | 0; //@line 8982
  HEAP32[$165 >> 2] = $8; //@line 8983
  $166 = $ReallocAsyncCtx + 20 | 0; //@line 8984
  HEAP32[$166 >> 2] = $10; //@line 8985
  $167 = $ReallocAsyncCtx + 24 | 0; //@line 8986
  HEAP32[$167 >> 2] = $12; //@line 8987
  $168 = $ReallocAsyncCtx + 28 | 0; //@line 8988
  HEAP32[$168 >> 2] = $14; //@line 8989
  $169 = $ReallocAsyncCtx + 32 | 0; //@line 8990
  HEAP32[$169 >> 2] = $16; //@line 8991
  $170 = $ReallocAsyncCtx + 36 | 0; //@line 8992
  HEAP32[$170 >> 2] = $18; //@line 8993
  $171 = $ReallocAsyncCtx + 40 | 0; //@line 8994
  HEAP32[$171 >> 2] = $20; //@line 8995
  $172 = $ReallocAsyncCtx + 44 | 0; //@line 8996
  HEAP32[$172 >> 2] = $22; //@line 8997
  $173 = $ReallocAsyncCtx + 48 | 0; //@line 8998
  HEAP32[$173 >> 2] = $24; //@line 8999
  $174 = $ReallocAsyncCtx + 52 | 0; //@line 9000
  HEAP32[$174 >> 2] = $26; //@line 9001
  $175 = $ReallocAsyncCtx + 56 | 0; //@line 9002
  HEAP32[$175 >> 2] = $28; //@line 9003
  $176 = $ReallocAsyncCtx + 60 | 0; //@line 9004
  HEAP8[$176 >> 0] = $30; //@line 9005
  $177 = $ReallocAsyncCtx + 64 | 0; //@line 9006
  HEAP32[$177 >> 2] = $32; //@line 9007
  $178 = $ReallocAsyncCtx + 68 | 0; //@line 9008
  HEAP8[$178 >> 0] = $34; //@line 9009
  $179 = $ReallocAsyncCtx + 72 | 0; //@line 9010
  HEAP32[$179 >> 2] = $36; //@line 9011
  $180 = $ReallocAsyncCtx + 76 | 0; //@line 9012
  HEAP32[$180 >> 2] = $38; //@line 9013
  $181 = $ReallocAsyncCtx + 80 | 0; //@line 9014
  HEAP32[$181 >> 2] = $40; //@line 9015
  $182 = $ReallocAsyncCtx + 84 | 0; //@line 9016
  HEAP32[$182 >> 2] = $42; //@line 9017
  $183 = $ReallocAsyncCtx + 88 | 0; //@line 9018
  HEAP32[$183 >> 2] = $44; //@line 9019
  $184 = $ReallocAsyncCtx + 92 | 0; //@line 9020
  HEAP32[$184 >> 2] = $46; //@line 9021
  $185 = $ReallocAsyncCtx + 96 | 0; //@line 9022
  HEAP32[$185 >> 2] = $48; //@line 9023
  $186 = $ReallocAsyncCtx + 100 | 0; //@line 9024
  HEAP32[$186 >> 2] = $50; //@line 9025
  $187 = $ReallocAsyncCtx + 104 | 0; //@line 9026
  HEAP32[$187 >> 2] = $52; //@line 9027
  $188 = $ReallocAsyncCtx + 108 | 0; //@line 9028
  HEAP32[$188 >> 2] = $54; //@line 9029
  $189 = $ReallocAsyncCtx + 112 | 0; //@line 9030
  HEAP32[$189 >> 2] = $56; //@line 9031
  $190 = $ReallocAsyncCtx + 116 | 0; //@line 9032
  HEAP32[$190 >> 2] = $58; //@line 9033
  $191 = $ReallocAsyncCtx + 120 | 0; //@line 9034
  HEAP32[$191 >> 2] = $60; //@line 9035
  $192 = $ReallocAsyncCtx + 124 | 0; //@line 9036
  HEAP32[$192 >> 2] = $62; //@line 9037
  $193 = $ReallocAsyncCtx + 128 | 0; //@line 9038
  HEAP32[$193 >> 2] = $64; //@line 9039
  $194 = $ReallocAsyncCtx + 132 | 0; //@line 9040
  HEAP32[$194 >> 2] = $66; //@line 9041
  $195 = $ReallocAsyncCtx + 136 | 0; //@line 9042
  HEAP32[$195 >> 2] = $68; //@line 9043
  $196 = $ReallocAsyncCtx + 140 | 0; //@line 9044
  HEAP32[$196 >> 2] = $70; //@line 9045
  $197 = $ReallocAsyncCtx + 144 | 0; //@line 9046
  HEAP32[$197 >> 2] = $72; //@line 9047
  $198 = $ReallocAsyncCtx + 148 | 0; //@line 9048
  HEAP32[$198 >> 2] = $74; //@line 9049
  $199 = $ReallocAsyncCtx + 152 | 0; //@line 9050
  HEAP32[$199 >> 2] = $76; //@line 9051
  $200 = $ReallocAsyncCtx + 156 | 0; //@line 9052
  HEAP32[$200 >> 2] = $78; //@line 9053
  $201 = $ReallocAsyncCtx + 160 | 0; //@line 9054
  HEAP32[$201 >> 2] = $148; //@line 9055
  $202 = $ReallocAsyncCtx + 164 | 0; //@line 9056
  HEAP32[$202 >> 2] = $80; //@line 9057
  $203 = $ReallocAsyncCtx + 168 | 0; //@line 9058
  HEAP32[$203 >> 2] = $82; //@line 9059
  $204 = $ReallocAsyncCtx + 172 | 0; //@line 9060
  HEAP32[$204 >> 2] = $84; //@line 9061
  $205 = $ReallocAsyncCtx + 176 | 0; //@line 9062
  HEAP32[$205 >> 2] = $86; //@line 9063
  $206 = $ReallocAsyncCtx + 180 | 0; //@line 9064
  HEAP32[$206 >> 2] = $88; //@line 9065
  $207 = $ReallocAsyncCtx + 184 | 0; //@line 9066
  HEAP32[$207 >> 2] = $90; //@line 9067
  $208 = $ReallocAsyncCtx + 188 | 0; //@line 9068
  HEAP32[$208 >> 2] = $92; //@line 9069
  $209 = $ReallocAsyncCtx + 192 | 0; //@line 9070
  HEAP32[$209 >> 2] = $94; //@line 9071
  $210 = $ReallocAsyncCtx + 196 | 0; //@line 9072
  HEAP32[$210 >> 2] = $96; //@line 9073
  $211 = $ReallocAsyncCtx + 200 | 0; //@line 9074
  HEAP32[$211 >> 2] = $98; //@line 9075
  $212 = $ReallocAsyncCtx + 204 | 0; //@line 9076
  HEAP32[$212 >> 2] = $100; //@line 9077
  $213 = $ReallocAsyncCtx + 208 | 0; //@line 9078
  HEAP32[$213 >> 2] = $104; //@line 9079
  $214 = $ReallocAsyncCtx + 212 | 0; //@line 9080
  HEAP32[$214 >> 2] = $106; //@line 9081
  $215 = $ReallocAsyncCtx + 216 | 0; //@line 9082
  HEAP32[$215 >> 2] = $108; //@line 9083
  $216 = $ReallocAsyncCtx + 220 | 0; //@line 9084
  HEAP32[$216 >> 2] = $110; //@line 9085
  $217 = $ReallocAsyncCtx + 224 | 0; //@line 9086
  HEAP32[$217 >> 2] = $112; //@line 9087
  $218 = $ReallocAsyncCtx + 228 | 0; //@line 9088
  HEAP32[$218 >> 2] = $114; //@line 9089
  $219 = $ReallocAsyncCtx + 232 | 0; //@line 9090
  HEAP32[$219 >> 2] = $116; //@line 9091
  $220 = $ReallocAsyncCtx + 236 | 0; //@line 9092
  HEAP32[$220 >> 2] = $118; //@line 9093
  $221 = $ReallocAsyncCtx + 240 | 0; //@line 9094
  HEAP32[$221 >> 2] = $120; //@line 9095
  $222 = $ReallocAsyncCtx + 244 | 0; //@line 9096
  HEAP32[$222 >> 2] = $122; //@line 9097
  $223 = $ReallocAsyncCtx + 248 | 0; //@line 9098
  HEAP32[$223 >> 2] = $124; //@line 9099
  $224 = $ReallocAsyncCtx + 252 | 0; //@line 9100
  HEAP32[$224 >> 2] = $126; //@line 9101
  $225 = $ReallocAsyncCtx + 256 | 0; //@line 9102
  HEAP32[$225 >> 2] = $128; //@line 9103
  $226 = $ReallocAsyncCtx + 260 | 0; //@line 9104
  HEAP32[$226 >> 2] = $130; //@line 9105
  $227 = $ReallocAsyncCtx + 264 | 0; //@line 9106
  HEAP32[$227 >> 2] = $$096$be; //@line 9107
  $228 = $ReallocAsyncCtx + 268 | 0; //@line 9108
  HEAP32[$228 >> 2] = $132; //@line 9109
  $229 = $ReallocAsyncCtx + 272 | 0; //@line 9110
  HEAP32[$229 >> 2] = $134; //@line 9111
  sp = STACKTOP; //@line 9112
  return;
 } else if ((label | 0) == 9) {
  $247 = HEAP8[$36 + ($137 & 255) >> 0] | 0; //@line 9118
  HEAP8[$82 >> 0] = ($247 & 255) >>> 4 & 7; //@line 9123
  HEAP8[$124 >> 0] = $247 & 15; //@line 9125
  $266 = $$0$be + 5 << 24 >> 24; //@line 9139
  HEAP32[$76 >> 2] = (HEAPU8[$36 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$36 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$36 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 9147
  $276 = HEAP32[(HEAP32[$106 >> 2] | 0) + 40 >> 2] | 0; //@line 9150
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(272) | 0; //@line 9151
  $277 = FUNCTION_TABLE_iii[$276 & 31]($20, $72) | 0; //@line 9152
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 491; //@line 9155
   $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 9156
   HEAP32[$278 >> 2] = $2; //@line 9157
   $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 9158
   HEAP32[$279 >> 2] = $4; //@line 9159
   $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 9160
   HEAP8[$280 >> 0] = $6; //@line 9161
   $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 9162
   HEAP32[$281 >> 2] = $8; //@line 9163
   $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 9164
   HEAP32[$282 >> 2] = $10; //@line 9165
   $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 9166
   HEAP32[$283 >> 2] = $12; //@line 9167
   $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 9168
   HEAP32[$284 >> 2] = $14; //@line 9169
   $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 9170
   HEAP32[$285 >> 2] = $16; //@line 9171
   $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 9172
   HEAP32[$286 >> 2] = $18; //@line 9173
   $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 9174
   HEAP32[$287 >> 2] = $20; //@line 9175
   $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 9176
   HEAP32[$288 >> 2] = $22; //@line 9177
   $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 9178
   HEAP32[$289 >> 2] = $24; //@line 9179
   $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 9180
   HEAP32[$290 >> 2] = $26; //@line 9181
   $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 9182
   HEAP32[$291 >> 2] = $28; //@line 9183
   $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 9184
   HEAP8[$292 >> 0] = $30; //@line 9185
   $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 9186
   HEAP32[$293 >> 2] = $32; //@line 9187
   $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 9188
   HEAP8[$294 >> 0] = $34; //@line 9189
   $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 9190
   HEAP32[$295 >> 2] = $36; //@line 9191
   $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 9192
   HEAP32[$296 >> 2] = $38; //@line 9193
   $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 9194
   HEAP32[$297 >> 2] = $40; //@line 9195
   $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 9196
   HEAP32[$298 >> 2] = $42; //@line 9197
   $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 9198
   HEAP32[$299 >> 2] = $44; //@line 9199
   $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 9200
   HEAP32[$300 >> 2] = $46; //@line 9201
   $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 9202
   HEAP32[$301 >> 2] = $48; //@line 9203
   $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 9204
   HEAP32[$302 >> 2] = $50; //@line 9205
   $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 9206
   HEAP32[$303 >> 2] = $52; //@line 9207
   $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 9208
   HEAP32[$304 >> 2] = $54; //@line 9209
   $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 9210
   HEAP8[$305 >> 0] = $266; //@line 9211
   $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 9212
   HEAP32[$306 >> 2] = $56; //@line 9213
   $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 9214
   HEAP32[$307 >> 2] = $58; //@line 9215
   $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 9216
   HEAP32[$308 >> 2] = $60; //@line 9217
   $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 9218
   HEAP32[$309 >> 2] = $62; //@line 9219
   $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 9220
   HEAP32[$310 >> 2] = $64; //@line 9221
   $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 9222
   HEAP32[$311 >> 2] = $66; //@line 9223
   $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 9224
   HEAP32[$312 >> 2] = $68; //@line 9225
   $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 9226
   HEAP32[$313 >> 2] = $70; //@line 9227
   $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 9228
   HEAP32[$314 >> 2] = $72; //@line 9229
   $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 9230
   HEAP32[$315 >> 2] = $74; //@line 9231
   $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 9232
   HEAP32[$316 >> 2] = $76; //@line 9233
   $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 9234
   HEAP32[$317 >> 2] = $78; //@line 9235
   $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 9236
   HEAP32[$318 >> 2] = $80; //@line 9237
   $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 9238
   HEAP32[$319 >> 2] = $82; //@line 9239
   $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 9240
   HEAP32[$320 >> 2] = $84; //@line 9241
   $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 9242
   HEAP32[$321 >> 2] = $86; //@line 9243
   $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 9244
   HEAP32[$322 >> 2] = $88; //@line 9245
   $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 9246
   HEAP32[$323 >> 2] = $90; //@line 9247
   $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 9248
   HEAP32[$324 >> 2] = $92; //@line 9249
   $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 9250
   HEAP32[$325 >> 2] = $94; //@line 9251
   $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 9252
   HEAP32[$326 >> 2] = $96; //@line 9253
   $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 9254
   HEAP32[$327 >> 2] = $98; //@line 9255
   $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 9256
   HEAP32[$328 >> 2] = $100; //@line 9257
   $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 9258
   HEAP32[$329 >> 2] = $104; //@line 9259
   $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 9260
   HEAP32[$330 >> 2] = $106; //@line 9261
   $331 = $ReallocAsyncCtx2 + 216 | 0; //@line 9262
   HEAP32[$331 >> 2] = $108; //@line 9263
   $332 = $ReallocAsyncCtx2 + 220 | 0; //@line 9264
   HEAP32[$332 >> 2] = $110; //@line 9265
   $333 = $ReallocAsyncCtx2 + 224 | 0; //@line 9266
   HEAP32[$333 >> 2] = $112; //@line 9267
   $334 = $ReallocAsyncCtx2 + 228 | 0; //@line 9268
   HEAP32[$334 >> 2] = $114; //@line 9269
   $335 = $ReallocAsyncCtx2 + 232 | 0; //@line 9270
   HEAP32[$335 >> 2] = $116; //@line 9271
   $336 = $ReallocAsyncCtx2 + 236 | 0; //@line 9272
   HEAP32[$336 >> 2] = $118; //@line 9273
   $337 = $ReallocAsyncCtx2 + 240 | 0; //@line 9274
   HEAP32[$337 >> 2] = $120; //@line 9275
   $338 = $ReallocAsyncCtx2 + 244 | 0; //@line 9276
   HEAP32[$338 >> 2] = $122; //@line 9277
   $339 = $ReallocAsyncCtx2 + 248 | 0; //@line 9278
   HEAP32[$339 >> 2] = $124; //@line 9279
   $340 = $ReallocAsyncCtx2 + 252 | 0; //@line 9280
   HEAP32[$340 >> 2] = $126; //@line 9281
   $341 = $ReallocAsyncCtx2 + 256 | 0; //@line 9282
   HEAP32[$341 >> 2] = $128; //@line 9283
   $342 = $ReallocAsyncCtx2 + 260 | 0; //@line 9284
   HEAP32[$342 >> 2] = $130; //@line 9285
   $343 = $ReallocAsyncCtx2 + 264 | 0; //@line 9286
   HEAP32[$343 >> 2] = $132; //@line 9287
   $344 = $ReallocAsyncCtx2 + 268 | 0; //@line 9288
   HEAP32[$344 >> 2] = $134; //@line 9289
   sp = STACKTOP; //@line 9290
   return;
  }
  HEAP8[___async_retval >> 0] = $277; //@line 9294
  ___async_unwind = 0; //@line 9295
  HEAP32[$ReallocAsyncCtx2 >> 2] = 491; //@line 9296
  $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 9297
  HEAP32[$278 >> 2] = $2; //@line 9298
  $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 9299
  HEAP32[$279 >> 2] = $4; //@line 9300
  $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 9301
  HEAP8[$280 >> 0] = $6; //@line 9302
  $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 9303
  HEAP32[$281 >> 2] = $8; //@line 9304
  $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 9305
  HEAP32[$282 >> 2] = $10; //@line 9306
  $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 9307
  HEAP32[$283 >> 2] = $12; //@line 9308
  $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 9309
  HEAP32[$284 >> 2] = $14; //@line 9310
  $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 9311
  HEAP32[$285 >> 2] = $16; //@line 9312
  $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 9313
  HEAP32[$286 >> 2] = $18; //@line 9314
  $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 9315
  HEAP32[$287 >> 2] = $20; //@line 9316
  $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 9317
  HEAP32[$288 >> 2] = $22; //@line 9318
  $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 9319
  HEAP32[$289 >> 2] = $24; //@line 9320
  $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 9321
  HEAP32[$290 >> 2] = $26; //@line 9322
  $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 9323
  HEAP32[$291 >> 2] = $28; //@line 9324
  $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 9325
  HEAP8[$292 >> 0] = $30; //@line 9326
  $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 9327
  HEAP32[$293 >> 2] = $32; //@line 9328
  $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 9329
  HEAP8[$294 >> 0] = $34; //@line 9330
  $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 9331
  HEAP32[$295 >> 2] = $36; //@line 9332
  $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 9333
  HEAP32[$296 >> 2] = $38; //@line 9334
  $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 9335
  HEAP32[$297 >> 2] = $40; //@line 9336
  $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 9337
  HEAP32[$298 >> 2] = $42; //@line 9338
  $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 9339
  HEAP32[$299 >> 2] = $44; //@line 9340
  $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 9341
  HEAP32[$300 >> 2] = $46; //@line 9342
  $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 9343
  HEAP32[$301 >> 2] = $48; //@line 9344
  $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 9345
  HEAP32[$302 >> 2] = $50; //@line 9346
  $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 9347
  HEAP32[$303 >> 2] = $52; //@line 9348
  $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 9349
  HEAP32[$304 >> 2] = $54; //@line 9350
  $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 9351
  HEAP8[$305 >> 0] = $266; //@line 9352
  $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 9353
  HEAP32[$306 >> 2] = $56; //@line 9354
  $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 9355
  HEAP32[$307 >> 2] = $58; //@line 9356
  $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 9357
  HEAP32[$308 >> 2] = $60; //@line 9358
  $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 9359
  HEAP32[$309 >> 2] = $62; //@line 9360
  $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 9361
  HEAP32[$310 >> 2] = $64; //@line 9362
  $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 9363
  HEAP32[$311 >> 2] = $66; //@line 9364
  $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 9365
  HEAP32[$312 >> 2] = $68; //@line 9366
  $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 9367
  HEAP32[$313 >> 2] = $70; //@line 9368
  $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 9369
  HEAP32[$314 >> 2] = $72; //@line 9370
  $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 9371
  HEAP32[$315 >> 2] = $74; //@line 9372
  $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 9373
  HEAP32[$316 >> 2] = $76; //@line 9374
  $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 9375
  HEAP32[$317 >> 2] = $78; //@line 9376
  $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 9377
  HEAP32[$318 >> 2] = $80; //@line 9378
  $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 9379
  HEAP32[$319 >> 2] = $82; //@line 9380
  $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 9381
  HEAP32[$320 >> 2] = $84; //@line 9382
  $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 9383
  HEAP32[$321 >> 2] = $86; //@line 9384
  $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 9385
  HEAP32[$322 >> 2] = $88; //@line 9386
  $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 9387
  HEAP32[$323 >> 2] = $90; //@line 9388
  $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 9389
  HEAP32[$324 >> 2] = $92; //@line 9390
  $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 9391
  HEAP32[$325 >> 2] = $94; //@line 9392
  $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 9393
  HEAP32[$326 >> 2] = $96; //@line 9394
  $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 9395
  HEAP32[$327 >> 2] = $98; //@line 9396
  $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 9397
  HEAP32[$328 >> 2] = $100; //@line 9398
  $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 9399
  HEAP32[$329 >> 2] = $104; //@line 9400
  $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 9401
  HEAP32[$330 >> 2] = $106; //@line 9402
  $331 = $ReallocAsyncCtx2 + 216 | 0; //@line 9403
  HEAP32[$331 >> 2] = $108; //@line 9404
  $332 = $ReallocAsyncCtx2 + 220 | 0; //@line 9405
  HEAP32[$332 >> 2] = $110; //@line 9406
  $333 = $ReallocAsyncCtx2 + 224 | 0; //@line 9407
  HEAP32[$333 >> 2] = $112; //@line 9408
  $334 = $ReallocAsyncCtx2 + 228 | 0; //@line 9409
  HEAP32[$334 >> 2] = $114; //@line 9410
  $335 = $ReallocAsyncCtx2 + 232 | 0; //@line 9411
  HEAP32[$335 >> 2] = $116; //@line 9412
  $336 = $ReallocAsyncCtx2 + 236 | 0; //@line 9413
  HEAP32[$336 >> 2] = $118; //@line 9414
  $337 = $ReallocAsyncCtx2 + 240 | 0; //@line 9415
  HEAP32[$337 >> 2] = $120; //@line 9416
  $338 = $ReallocAsyncCtx2 + 244 | 0; //@line 9417
  HEAP32[$338 >> 2] = $122; //@line 9418
  $339 = $ReallocAsyncCtx2 + 248 | 0; //@line 9419
  HEAP32[$339 >> 2] = $124; //@line 9420
  $340 = $ReallocAsyncCtx2 + 252 | 0; //@line 9421
  HEAP32[$340 >> 2] = $126; //@line 9422
  $341 = $ReallocAsyncCtx2 + 256 | 0; //@line 9423
  HEAP32[$341 >> 2] = $128; //@line 9424
  $342 = $ReallocAsyncCtx2 + 260 | 0; //@line 9425
  HEAP32[$342 >> 2] = $130; //@line 9426
  $343 = $ReallocAsyncCtx2 + 264 | 0; //@line 9427
  HEAP32[$343 >> 2] = $132; //@line 9428
  $344 = $ReallocAsyncCtx2 + 268 | 0; //@line 9429
  HEAP32[$344 >> 2] = $134; //@line 9430
  sp = STACKTOP; //@line 9431
  return;
 } else if ((label | 0) == 14) {
  HEAP8[$8 >> 0] = HEAP8[$36 + ($137 & 255) >> 0] | 0; //@line 9439
  HEAP32[$38 >> 2] = $108; //@line 9440
  HEAP32[$120 >> 2] = (HEAPU8[$36 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$36 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$36 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 9461
  HEAP32[$114 >> 2] = 0; //@line 9462
  $385 = $$0$be + 6 << 24 >> 24; //@line 9463
  HEAP8[$130 >> 0] = HEAP8[$36 + ($$0$be + 5 & 255) >> 0] | 0; //@line 9467
  $391 = HEAP32[(HEAP32[$128 >> 2] | 0) + 8 >> 2] | 0; //@line 9470
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(268) | 0; //@line 9471
  $392 = FUNCTION_TABLE_iii[$391 & 31]($20, $62) | 0; //@line 9472
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 492; //@line 9475
   $393 = $ReallocAsyncCtx3 + 4 | 0; //@line 9476
   HEAP32[$393 >> 2] = $2; //@line 9477
   $394 = $ReallocAsyncCtx3 + 8 | 0; //@line 9478
   HEAP32[$394 >> 2] = $4; //@line 9479
   $395 = $ReallocAsyncCtx3 + 12 | 0; //@line 9480
   HEAP8[$395 >> 0] = $6; //@line 9481
   $396 = $ReallocAsyncCtx3 + 16 | 0; //@line 9482
   HEAP32[$396 >> 2] = $8; //@line 9483
   $397 = $ReallocAsyncCtx3 + 20 | 0; //@line 9484
   HEAP32[$397 >> 2] = $10; //@line 9485
   $398 = $ReallocAsyncCtx3 + 24 | 0; //@line 9486
   HEAP32[$398 >> 2] = $12; //@line 9487
   $399 = $ReallocAsyncCtx3 + 28 | 0; //@line 9488
   HEAP32[$399 >> 2] = $14; //@line 9489
   $400 = $ReallocAsyncCtx3 + 32 | 0; //@line 9490
   HEAP32[$400 >> 2] = $16; //@line 9491
   $401 = $ReallocAsyncCtx3 + 36 | 0; //@line 9492
   HEAP32[$401 >> 2] = $18; //@line 9493
   $402 = $ReallocAsyncCtx3 + 40 | 0; //@line 9494
   HEAP32[$402 >> 2] = $20; //@line 9495
   $403 = $ReallocAsyncCtx3 + 44 | 0; //@line 9496
   HEAP32[$403 >> 2] = $22; //@line 9497
   $404 = $ReallocAsyncCtx3 + 48 | 0; //@line 9498
   HEAP32[$404 >> 2] = $24; //@line 9499
   $405 = $ReallocAsyncCtx3 + 52 | 0; //@line 9500
   HEAP32[$405 >> 2] = $26; //@line 9501
   $406 = $ReallocAsyncCtx3 + 56 | 0; //@line 9502
   HEAP32[$406 >> 2] = $28; //@line 9503
   $407 = $ReallocAsyncCtx3 + 60 | 0; //@line 9504
   HEAP8[$407 >> 0] = $385; //@line 9505
   $408 = $ReallocAsyncCtx3 + 61 | 0; //@line 9506
   HEAP8[$408 >> 0] = $30; //@line 9507
   $409 = $ReallocAsyncCtx3 + 64 | 0; //@line 9508
   HEAP32[$409 >> 2] = $32; //@line 9509
   $410 = $ReallocAsyncCtx3 + 68 | 0; //@line 9510
   HEAP8[$410 >> 0] = $34; //@line 9511
   $411 = $ReallocAsyncCtx3 + 72 | 0; //@line 9512
   HEAP32[$411 >> 2] = $36; //@line 9513
   $412 = $ReallocAsyncCtx3 + 76 | 0; //@line 9514
   HEAP32[$412 >> 2] = $38; //@line 9515
   $413 = $ReallocAsyncCtx3 + 80 | 0; //@line 9516
   HEAP32[$413 >> 2] = $40; //@line 9517
   $414 = $ReallocAsyncCtx3 + 84 | 0; //@line 9518
   HEAP32[$414 >> 2] = $42; //@line 9519
   $415 = $ReallocAsyncCtx3 + 88 | 0; //@line 9520
   HEAP32[$415 >> 2] = $44; //@line 9521
   $416 = $ReallocAsyncCtx3 + 92 | 0; //@line 9522
   HEAP32[$416 >> 2] = $46; //@line 9523
   $417 = $ReallocAsyncCtx3 + 96 | 0; //@line 9524
   HEAP32[$417 >> 2] = $48; //@line 9525
   $418 = $ReallocAsyncCtx3 + 100 | 0; //@line 9526
   HEAP32[$418 >> 2] = $50; //@line 9527
   $419 = $ReallocAsyncCtx3 + 104 | 0; //@line 9528
   HEAP32[$419 >> 2] = $52; //@line 9529
   $420 = $ReallocAsyncCtx3 + 108 | 0; //@line 9530
   HEAP32[$420 >> 2] = $54; //@line 9531
   $421 = $ReallocAsyncCtx3 + 112 | 0; //@line 9532
   HEAP32[$421 >> 2] = $56; //@line 9533
   $422 = $ReallocAsyncCtx3 + 116 | 0; //@line 9534
   HEAP32[$422 >> 2] = $58; //@line 9535
   $423 = $ReallocAsyncCtx3 + 120 | 0; //@line 9536
   HEAP32[$423 >> 2] = $60; //@line 9537
   $424 = $ReallocAsyncCtx3 + 124 | 0; //@line 9538
   HEAP32[$424 >> 2] = $62; //@line 9539
   $425 = $ReallocAsyncCtx3 + 128 | 0; //@line 9540
   HEAP32[$425 >> 2] = $64; //@line 9541
   $426 = $ReallocAsyncCtx3 + 132 | 0; //@line 9542
   HEAP32[$426 >> 2] = $66; //@line 9543
   $427 = $ReallocAsyncCtx3 + 136 | 0; //@line 9544
   HEAP32[$427 >> 2] = $68; //@line 9545
   $428 = $ReallocAsyncCtx3 + 140 | 0; //@line 9546
   HEAP32[$428 >> 2] = $70; //@line 9547
   $429 = $ReallocAsyncCtx3 + 144 | 0; //@line 9548
   HEAP32[$429 >> 2] = $72; //@line 9549
   $430 = $ReallocAsyncCtx3 + 148 | 0; //@line 9550
   HEAP32[$430 >> 2] = $74; //@line 9551
   $431 = $ReallocAsyncCtx3 + 152 | 0; //@line 9552
   HEAP32[$431 >> 2] = $76; //@line 9553
   $432 = $ReallocAsyncCtx3 + 156 | 0; //@line 9554
   HEAP32[$432 >> 2] = $78; //@line 9555
   $433 = $ReallocAsyncCtx3 + 160 | 0; //@line 9556
   HEAP32[$433 >> 2] = $80; //@line 9557
   $434 = $ReallocAsyncCtx3 + 164 | 0; //@line 9558
   HEAP32[$434 >> 2] = $82; //@line 9559
   $435 = $ReallocAsyncCtx3 + 168 | 0; //@line 9560
   HEAP32[$435 >> 2] = $84; //@line 9561
   $436 = $ReallocAsyncCtx3 + 172 | 0; //@line 9562
   HEAP32[$436 >> 2] = $86; //@line 9563
   $437 = $ReallocAsyncCtx3 + 176 | 0; //@line 9564
   HEAP32[$437 >> 2] = $88; //@line 9565
   $438 = $ReallocAsyncCtx3 + 180 | 0; //@line 9566
   HEAP32[$438 >> 2] = $90; //@line 9567
   $439 = $ReallocAsyncCtx3 + 184 | 0; //@line 9568
   HEAP32[$439 >> 2] = $92; //@line 9569
   $440 = $ReallocAsyncCtx3 + 188 | 0; //@line 9570
   HEAP32[$440 >> 2] = $94; //@line 9571
   $441 = $ReallocAsyncCtx3 + 192 | 0; //@line 9572
   HEAP32[$441 >> 2] = $96; //@line 9573
   $442 = $ReallocAsyncCtx3 + 196 | 0; //@line 9574
   HEAP32[$442 >> 2] = $98; //@line 9575
   $443 = $ReallocAsyncCtx3 + 200 | 0; //@line 9576
   HEAP32[$443 >> 2] = $100; //@line 9577
   $444 = $ReallocAsyncCtx3 + 204 | 0; //@line 9578
   HEAP32[$444 >> 2] = $104; //@line 9579
   $445 = $ReallocAsyncCtx3 + 208 | 0; //@line 9580
   HEAP32[$445 >> 2] = $106; //@line 9581
   $446 = $ReallocAsyncCtx3 + 212 | 0; //@line 9582
   HEAP32[$446 >> 2] = $108; //@line 9583
   $447 = $ReallocAsyncCtx3 + 216 | 0; //@line 9584
   HEAP32[$447 >> 2] = $110; //@line 9585
   $448 = $ReallocAsyncCtx3 + 220 | 0; //@line 9586
   HEAP32[$448 >> 2] = $112; //@line 9587
   $449 = $ReallocAsyncCtx3 + 224 | 0; //@line 9588
   HEAP32[$449 >> 2] = $114; //@line 9589
   $450 = $ReallocAsyncCtx3 + 228 | 0; //@line 9590
   HEAP32[$450 >> 2] = $116; //@line 9591
   $451 = $ReallocAsyncCtx3 + 232 | 0; //@line 9592
   HEAP32[$451 >> 2] = $118; //@line 9593
   $452 = $ReallocAsyncCtx3 + 236 | 0; //@line 9594
   HEAP32[$452 >> 2] = $120; //@line 9595
   $453 = $ReallocAsyncCtx3 + 240 | 0; //@line 9596
   HEAP32[$453 >> 2] = $122; //@line 9597
   $454 = $ReallocAsyncCtx3 + 244 | 0; //@line 9598
   HEAP32[$454 >> 2] = $124; //@line 9599
   $455 = $ReallocAsyncCtx3 + 248 | 0; //@line 9600
   HEAP32[$455 >> 2] = $126; //@line 9601
   $456 = $ReallocAsyncCtx3 + 252 | 0; //@line 9602
   HEAP32[$456 >> 2] = $128; //@line 9603
   $457 = $ReallocAsyncCtx3 + 256 | 0; //@line 9604
   HEAP32[$457 >> 2] = $130; //@line 9605
   $458 = $ReallocAsyncCtx3 + 260 | 0; //@line 9606
   HEAP32[$458 >> 2] = $132; //@line 9607
   $459 = $ReallocAsyncCtx3 + 264 | 0; //@line 9608
   HEAP32[$459 >> 2] = $134; //@line 9609
   sp = STACKTOP; //@line 9610
   return;
  }
  HEAP8[___async_retval >> 0] = $392; //@line 9614
  ___async_unwind = 0; //@line 9615
  HEAP32[$ReallocAsyncCtx3 >> 2] = 492; //@line 9616
  $393 = $ReallocAsyncCtx3 + 4 | 0; //@line 9617
  HEAP32[$393 >> 2] = $2; //@line 9618
  $394 = $ReallocAsyncCtx3 + 8 | 0; //@line 9619
  HEAP32[$394 >> 2] = $4; //@line 9620
  $395 = $ReallocAsyncCtx3 + 12 | 0; //@line 9621
  HEAP8[$395 >> 0] = $6; //@line 9622
  $396 = $ReallocAsyncCtx3 + 16 | 0; //@line 9623
  HEAP32[$396 >> 2] = $8; //@line 9624
  $397 = $ReallocAsyncCtx3 + 20 | 0; //@line 9625
  HEAP32[$397 >> 2] = $10; //@line 9626
  $398 = $ReallocAsyncCtx3 + 24 | 0; //@line 9627
  HEAP32[$398 >> 2] = $12; //@line 9628
  $399 = $ReallocAsyncCtx3 + 28 | 0; //@line 9629
  HEAP32[$399 >> 2] = $14; //@line 9630
  $400 = $ReallocAsyncCtx3 + 32 | 0; //@line 9631
  HEAP32[$400 >> 2] = $16; //@line 9632
  $401 = $ReallocAsyncCtx3 + 36 | 0; //@line 9633
  HEAP32[$401 >> 2] = $18; //@line 9634
  $402 = $ReallocAsyncCtx3 + 40 | 0; //@line 9635
  HEAP32[$402 >> 2] = $20; //@line 9636
  $403 = $ReallocAsyncCtx3 + 44 | 0; //@line 9637
  HEAP32[$403 >> 2] = $22; //@line 9638
  $404 = $ReallocAsyncCtx3 + 48 | 0; //@line 9639
  HEAP32[$404 >> 2] = $24; //@line 9640
  $405 = $ReallocAsyncCtx3 + 52 | 0; //@line 9641
  HEAP32[$405 >> 2] = $26; //@line 9642
  $406 = $ReallocAsyncCtx3 + 56 | 0; //@line 9643
  HEAP32[$406 >> 2] = $28; //@line 9644
  $407 = $ReallocAsyncCtx3 + 60 | 0; //@line 9645
  HEAP8[$407 >> 0] = $385; //@line 9646
  $408 = $ReallocAsyncCtx3 + 61 | 0; //@line 9647
  HEAP8[$408 >> 0] = $30; //@line 9648
  $409 = $ReallocAsyncCtx3 + 64 | 0; //@line 9649
  HEAP32[$409 >> 2] = $32; //@line 9650
  $410 = $ReallocAsyncCtx3 + 68 | 0; //@line 9651
  HEAP8[$410 >> 0] = $34; //@line 9652
  $411 = $ReallocAsyncCtx3 + 72 | 0; //@line 9653
  HEAP32[$411 >> 2] = $36; //@line 9654
  $412 = $ReallocAsyncCtx3 + 76 | 0; //@line 9655
  HEAP32[$412 >> 2] = $38; //@line 9656
  $413 = $ReallocAsyncCtx3 + 80 | 0; //@line 9657
  HEAP32[$413 >> 2] = $40; //@line 9658
  $414 = $ReallocAsyncCtx3 + 84 | 0; //@line 9659
  HEAP32[$414 >> 2] = $42; //@line 9660
  $415 = $ReallocAsyncCtx3 + 88 | 0; //@line 9661
  HEAP32[$415 >> 2] = $44; //@line 9662
  $416 = $ReallocAsyncCtx3 + 92 | 0; //@line 9663
  HEAP32[$416 >> 2] = $46; //@line 9664
  $417 = $ReallocAsyncCtx3 + 96 | 0; //@line 9665
  HEAP32[$417 >> 2] = $48; //@line 9666
  $418 = $ReallocAsyncCtx3 + 100 | 0; //@line 9667
  HEAP32[$418 >> 2] = $50; //@line 9668
  $419 = $ReallocAsyncCtx3 + 104 | 0; //@line 9669
  HEAP32[$419 >> 2] = $52; //@line 9670
  $420 = $ReallocAsyncCtx3 + 108 | 0; //@line 9671
  HEAP32[$420 >> 2] = $54; //@line 9672
  $421 = $ReallocAsyncCtx3 + 112 | 0; //@line 9673
  HEAP32[$421 >> 2] = $56; //@line 9674
  $422 = $ReallocAsyncCtx3 + 116 | 0; //@line 9675
  HEAP32[$422 >> 2] = $58; //@line 9676
  $423 = $ReallocAsyncCtx3 + 120 | 0; //@line 9677
  HEAP32[$423 >> 2] = $60; //@line 9678
  $424 = $ReallocAsyncCtx3 + 124 | 0; //@line 9679
  HEAP32[$424 >> 2] = $62; //@line 9680
  $425 = $ReallocAsyncCtx3 + 128 | 0; //@line 9681
  HEAP32[$425 >> 2] = $64; //@line 9682
  $426 = $ReallocAsyncCtx3 + 132 | 0; //@line 9683
  HEAP32[$426 >> 2] = $66; //@line 9684
  $427 = $ReallocAsyncCtx3 + 136 | 0; //@line 9685
  HEAP32[$427 >> 2] = $68; //@line 9686
  $428 = $ReallocAsyncCtx3 + 140 | 0; //@line 9687
  HEAP32[$428 >> 2] = $70; //@line 9688
  $429 = $ReallocAsyncCtx3 + 144 | 0; //@line 9689
  HEAP32[$429 >> 2] = $72; //@line 9690
  $430 = $ReallocAsyncCtx3 + 148 | 0; //@line 9691
  HEAP32[$430 >> 2] = $74; //@line 9692
  $431 = $ReallocAsyncCtx3 + 152 | 0; //@line 9693
  HEAP32[$431 >> 2] = $76; //@line 9694
  $432 = $ReallocAsyncCtx3 + 156 | 0; //@line 9695
  HEAP32[$432 >> 2] = $78; //@line 9696
  $433 = $ReallocAsyncCtx3 + 160 | 0; //@line 9697
  HEAP32[$433 >> 2] = $80; //@line 9698
  $434 = $ReallocAsyncCtx3 + 164 | 0; //@line 9699
  HEAP32[$434 >> 2] = $82; //@line 9700
  $435 = $ReallocAsyncCtx3 + 168 | 0; //@line 9701
  HEAP32[$435 >> 2] = $84; //@line 9702
  $436 = $ReallocAsyncCtx3 + 172 | 0; //@line 9703
  HEAP32[$436 >> 2] = $86; //@line 9704
  $437 = $ReallocAsyncCtx3 + 176 | 0; //@line 9705
  HEAP32[$437 >> 2] = $88; //@line 9706
  $438 = $ReallocAsyncCtx3 + 180 | 0; //@line 9707
  HEAP32[$438 >> 2] = $90; //@line 9708
  $439 = $ReallocAsyncCtx3 + 184 | 0; //@line 9709
  HEAP32[$439 >> 2] = $92; //@line 9710
  $440 = $ReallocAsyncCtx3 + 188 | 0; //@line 9711
  HEAP32[$440 >> 2] = $94; //@line 9712
  $441 = $ReallocAsyncCtx3 + 192 | 0; //@line 9713
  HEAP32[$441 >> 2] = $96; //@line 9714
  $442 = $ReallocAsyncCtx3 + 196 | 0; //@line 9715
  HEAP32[$442 >> 2] = $98; //@line 9716
  $443 = $ReallocAsyncCtx3 + 200 | 0; //@line 9717
  HEAP32[$443 >> 2] = $100; //@line 9718
  $444 = $ReallocAsyncCtx3 + 204 | 0; //@line 9719
  HEAP32[$444 >> 2] = $104; //@line 9720
  $445 = $ReallocAsyncCtx3 + 208 | 0; //@line 9721
  HEAP32[$445 >> 2] = $106; //@line 9722
  $446 = $ReallocAsyncCtx3 + 212 | 0; //@line 9723
  HEAP32[$446 >> 2] = $108; //@line 9724
  $447 = $ReallocAsyncCtx3 + 216 | 0; //@line 9725
  HEAP32[$447 >> 2] = $110; //@line 9726
  $448 = $ReallocAsyncCtx3 + 220 | 0; //@line 9727
  HEAP32[$448 >> 2] = $112; //@line 9728
  $449 = $ReallocAsyncCtx3 + 224 | 0; //@line 9729
  HEAP32[$449 >> 2] = $114; //@line 9730
  $450 = $ReallocAsyncCtx3 + 228 | 0; //@line 9731
  HEAP32[$450 >> 2] = $116; //@line 9732
  $451 = $ReallocAsyncCtx3 + 232 | 0; //@line 9733
  HEAP32[$451 >> 2] = $118; //@line 9734
  $452 = $ReallocAsyncCtx3 + 236 | 0; //@line 9735
  HEAP32[$452 >> 2] = $120; //@line 9736
  $453 = $ReallocAsyncCtx3 + 240 | 0; //@line 9737
  HEAP32[$453 >> 2] = $122; //@line 9738
  $454 = $ReallocAsyncCtx3 + 244 | 0; //@line 9739
  HEAP32[$454 >> 2] = $124; //@line 9740
  $455 = $ReallocAsyncCtx3 + 248 | 0; //@line 9741
  HEAP32[$455 >> 2] = $126; //@line 9742
  $456 = $ReallocAsyncCtx3 + 252 | 0; //@line 9743
  HEAP32[$456 >> 2] = $128; //@line 9744
  $457 = $ReallocAsyncCtx3 + 256 | 0; //@line 9745
  HEAP32[$457 >> 2] = $130; //@line 9746
  $458 = $ReallocAsyncCtx3 + 260 | 0; //@line 9747
  HEAP32[$458 >> 2] = $132; //@line 9748
  $459 = $ReallocAsyncCtx3 + 264 | 0; //@line 9749
  HEAP32[$459 >> 2] = $134; //@line 9750
  sp = STACKTOP; //@line 9751
  return;
 } else if ((label | 0) == 19) {
  $478 = $$0$be + 2 << 24 >> 24; //@line 9755
  $481 = HEAP8[$36 + ($137 & 255) >> 0] | 0; //@line 9758
  HEAP8[$98 >> 0] = 0; //@line 9759
  $482 = $481 & 255; //@line 9760
  HEAP8[$88 >> 0] = $482 >>> 5 & 1; //@line 9764
  if ($482 & 16 | 0) {
   HEAP8[$98 >> 0] = 1; //@line 9768
  }
  HEAP8[$52 >> 0] = $482 & 15; //@line 9772
  $491 = HEAP32[(HEAP32[$48 >> 2] | 0) + 44 >> 2] | 0; //@line 9775
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 9776
  $492 = FUNCTION_TABLE_iii[$491 & 31]($20, $104) | 0; //@line 9777
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 493; //@line 9780
   $493 = $ReallocAsyncCtx4 + 4 | 0; //@line 9781
   HEAP32[$493 >> 2] = $2; //@line 9782
   $494 = $ReallocAsyncCtx4 + 8 | 0; //@line 9783
   HEAP32[$494 >> 2] = $4; //@line 9784
   $495 = $ReallocAsyncCtx4 + 12 | 0; //@line 9785
   HEAP8[$495 >> 0] = $6; //@line 9786
   $496 = $ReallocAsyncCtx4 + 16 | 0; //@line 9787
   HEAP32[$496 >> 2] = $8; //@line 9788
   $497 = $ReallocAsyncCtx4 + 20 | 0; //@line 9789
   HEAP32[$497 >> 2] = $10; //@line 9790
   $498 = $ReallocAsyncCtx4 + 24 | 0; //@line 9791
   HEAP32[$498 >> 2] = $12; //@line 9792
   $499 = $ReallocAsyncCtx4 + 28 | 0; //@line 9793
   HEAP32[$499 >> 2] = $14; //@line 9794
   $500 = $ReallocAsyncCtx4 + 32 | 0; //@line 9795
   HEAP32[$500 >> 2] = $16; //@line 9796
   $501 = $ReallocAsyncCtx4 + 36 | 0; //@line 9797
   HEAP32[$501 >> 2] = $18; //@line 9798
   $502 = $ReallocAsyncCtx4 + 40 | 0; //@line 9799
   HEAP32[$502 >> 2] = $20; //@line 9800
   $503 = $ReallocAsyncCtx4 + 44 | 0; //@line 9801
   HEAP32[$503 >> 2] = $22; //@line 9802
   $504 = $ReallocAsyncCtx4 + 48 | 0; //@line 9803
   HEAP32[$504 >> 2] = $24; //@line 9804
   $505 = $ReallocAsyncCtx4 + 52 | 0; //@line 9805
   HEAP32[$505 >> 2] = $26; //@line 9806
   $506 = $ReallocAsyncCtx4 + 56 | 0; //@line 9807
   HEAP32[$506 >> 2] = $28; //@line 9808
   $507 = $ReallocAsyncCtx4 + 60 | 0; //@line 9809
   HEAP8[$507 >> 0] = $30; //@line 9810
   $508 = $ReallocAsyncCtx4 + 64 | 0; //@line 9811
   HEAP32[$508 >> 2] = $32; //@line 9812
   $509 = $ReallocAsyncCtx4 + 68 | 0; //@line 9813
   HEAP8[$509 >> 0] = $34; //@line 9814
   $510 = $ReallocAsyncCtx4 + 72 | 0; //@line 9815
   HEAP32[$510 >> 2] = $36; //@line 9816
   $511 = $ReallocAsyncCtx4 + 76 | 0; //@line 9817
   HEAP32[$511 >> 2] = $38; //@line 9818
   $512 = $ReallocAsyncCtx4 + 80 | 0; //@line 9819
   HEAP32[$512 >> 2] = $40; //@line 9820
   $513 = $ReallocAsyncCtx4 + 84 | 0; //@line 9821
   HEAP32[$513 >> 2] = $42; //@line 9822
   $514 = $ReallocAsyncCtx4 + 88 | 0; //@line 9823
   HEAP32[$514 >> 2] = $44; //@line 9824
   $515 = $ReallocAsyncCtx4 + 92 | 0; //@line 9825
   HEAP32[$515 >> 2] = $46; //@line 9826
   $516 = $ReallocAsyncCtx4 + 96 | 0; //@line 9827
   HEAP32[$516 >> 2] = $48; //@line 9828
   $517 = $ReallocAsyncCtx4 + 100 | 0; //@line 9829
   HEAP32[$517 >> 2] = $50; //@line 9830
   $518 = $ReallocAsyncCtx4 + 104 | 0; //@line 9831
   HEAP32[$518 >> 2] = $52; //@line 9832
   $519 = $ReallocAsyncCtx4 + 108 | 0; //@line 9833
   HEAP32[$519 >> 2] = $54; //@line 9834
   $520 = $ReallocAsyncCtx4 + 112 | 0; //@line 9835
   HEAP32[$520 >> 2] = $56; //@line 9836
   $521 = $ReallocAsyncCtx4 + 116 | 0; //@line 9837
   HEAP32[$521 >> 2] = $58; //@line 9838
   $522 = $ReallocAsyncCtx4 + 120 | 0; //@line 9839
   HEAP32[$522 >> 2] = $60; //@line 9840
   $523 = $ReallocAsyncCtx4 + 124 | 0; //@line 9841
   HEAP32[$523 >> 2] = $62; //@line 9842
   $524 = $ReallocAsyncCtx4 + 128 | 0; //@line 9843
   HEAP32[$524 >> 2] = $64; //@line 9844
   $525 = $ReallocAsyncCtx4 + 132 | 0; //@line 9845
   HEAP32[$525 >> 2] = $66; //@line 9846
   $526 = $ReallocAsyncCtx4 + 136 | 0; //@line 9847
   HEAP32[$526 >> 2] = $68; //@line 9848
   $527 = $ReallocAsyncCtx4 + 140 | 0; //@line 9849
   HEAP8[$527 >> 0] = $478; //@line 9850
   $528 = $ReallocAsyncCtx4 + 144 | 0; //@line 9851
   HEAP32[$528 >> 2] = $70; //@line 9852
   $529 = $ReallocAsyncCtx4 + 148 | 0; //@line 9853
   HEAP32[$529 >> 2] = $72; //@line 9854
   $530 = $ReallocAsyncCtx4 + 152 | 0; //@line 9855
   HEAP32[$530 >> 2] = $74; //@line 9856
   $531 = $ReallocAsyncCtx4 + 156 | 0; //@line 9857
   HEAP32[$531 >> 2] = $76; //@line 9858
   $532 = $ReallocAsyncCtx4 + 160 | 0; //@line 9859
   HEAP32[$532 >> 2] = $78; //@line 9860
   $533 = $ReallocAsyncCtx4 + 164 | 0; //@line 9861
   HEAP32[$533 >> 2] = $80; //@line 9862
   $534 = $ReallocAsyncCtx4 + 168 | 0; //@line 9863
   HEAP32[$534 >> 2] = $82; //@line 9864
   $535 = $ReallocAsyncCtx4 + 172 | 0; //@line 9865
   HEAP32[$535 >> 2] = $84; //@line 9866
   $536 = $ReallocAsyncCtx4 + 176 | 0; //@line 9867
   HEAP32[$536 >> 2] = $86; //@line 9868
   $537 = $ReallocAsyncCtx4 + 180 | 0; //@line 9869
   HEAP32[$537 >> 2] = $88; //@line 9870
   $538 = $ReallocAsyncCtx4 + 184 | 0; //@line 9871
   HEAP32[$538 >> 2] = $90; //@line 9872
   $539 = $ReallocAsyncCtx4 + 188 | 0; //@line 9873
   HEAP32[$539 >> 2] = $92; //@line 9874
   $540 = $ReallocAsyncCtx4 + 192 | 0; //@line 9875
   HEAP32[$540 >> 2] = $94; //@line 9876
   $541 = $ReallocAsyncCtx4 + 196 | 0; //@line 9877
   HEAP32[$541 >> 2] = $96; //@line 9878
   $542 = $ReallocAsyncCtx4 + 200 | 0; //@line 9879
   HEAP32[$542 >> 2] = $98; //@line 9880
   $543 = $ReallocAsyncCtx4 + 204 | 0; //@line 9881
   HEAP32[$543 >> 2] = $100; //@line 9882
   $544 = $ReallocAsyncCtx4 + 208 | 0; //@line 9883
   HEAP32[$544 >> 2] = $104; //@line 9884
   $545 = $ReallocAsyncCtx4 + 212 | 0; //@line 9885
   HEAP32[$545 >> 2] = $106; //@line 9886
   $546 = $ReallocAsyncCtx4 + 216 | 0; //@line 9887
   HEAP32[$546 >> 2] = $108; //@line 9888
   $547 = $ReallocAsyncCtx4 + 220 | 0; //@line 9889
   HEAP32[$547 >> 2] = $110; //@line 9890
   $548 = $ReallocAsyncCtx4 + 224 | 0; //@line 9891
   HEAP32[$548 >> 2] = $112; //@line 9892
   $549 = $ReallocAsyncCtx4 + 228 | 0; //@line 9893
   HEAP32[$549 >> 2] = $114; //@line 9894
   $550 = $ReallocAsyncCtx4 + 232 | 0; //@line 9895
   HEAP32[$550 >> 2] = $116; //@line 9896
   $551 = $ReallocAsyncCtx4 + 236 | 0; //@line 9897
   HEAP32[$551 >> 2] = $118; //@line 9898
   $552 = $ReallocAsyncCtx4 + 240 | 0; //@line 9899
   HEAP32[$552 >> 2] = $120; //@line 9900
   $553 = $ReallocAsyncCtx4 + 244 | 0; //@line 9901
   HEAP32[$553 >> 2] = $122; //@line 9902
   $554 = $ReallocAsyncCtx4 + 248 | 0; //@line 9903
   HEAP32[$554 >> 2] = $124; //@line 9904
   $555 = $ReallocAsyncCtx4 + 252 | 0; //@line 9905
   HEAP32[$555 >> 2] = $126; //@line 9906
   $556 = $ReallocAsyncCtx4 + 256 | 0; //@line 9907
   HEAP32[$556 >> 2] = $128; //@line 9908
   $557 = $ReallocAsyncCtx4 + 260 | 0; //@line 9909
   HEAP32[$557 >> 2] = $130; //@line 9910
   $558 = $ReallocAsyncCtx4 + 264 | 0; //@line 9911
   HEAP32[$558 >> 2] = $$096$be; //@line 9912
   $559 = $ReallocAsyncCtx4 + 268 | 0; //@line 9913
   HEAP32[$559 >> 2] = $132; //@line 9914
   $560 = $ReallocAsyncCtx4 + 272 | 0; //@line 9915
   HEAP32[$560 >> 2] = $134; //@line 9916
   sp = STACKTOP; //@line 9917
   return;
  }
  HEAP8[___async_retval >> 0] = $492 & 1; //@line 9922
  ___async_unwind = 0; //@line 9923
  HEAP32[$ReallocAsyncCtx4 >> 2] = 493; //@line 9924
  $493 = $ReallocAsyncCtx4 + 4 | 0; //@line 9925
  HEAP32[$493 >> 2] = $2; //@line 9926
  $494 = $ReallocAsyncCtx4 + 8 | 0; //@line 9927
  HEAP32[$494 >> 2] = $4; //@line 9928
  $495 = $ReallocAsyncCtx4 + 12 | 0; //@line 9929
  HEAP8[$495 >> 0] = $6; //@line 9930
  $496 = $ReallocAsyncCtx4 + 16 | 0; //@line 9931
  HEAP32[$496 >> 2] = $8; //@line 9932
  $497 = $ReallocAsyncCtx4 + 20 | 0; //@line 9933
  HEAP32[$497 >> 2] = $10; //@line 9934
  $498 = $ReallocAsyncCtx4 + 24 | 0; //@line 9935
  HEAP32[$498 >> 2] = $12; //@line 9936
  $499 = $ReallocAsyncCtx4 + 28 | 0; //@line 9937
  HEAP32[$499 >> 2] = $14; //@line 9938
  $500 = $ReallocAsyncCtx4 + 32 | 0; //@line 9939
  HEAP32[$500 >> 2] = $16; //@line 9940
  $501 = $ReallocAsyncCtx4 + 36 | 0; //@line 9941
  HEAP32[$501 >> 2] = $18; //@line 9942
  $502 = $ReallocAsyncCtx4 + 40 | 0; //@line 9943
  HEAP32[$502 >> 2] = $20; //@line 9944
  $503 = $ReallocAsyncCtx4 + 44 | 0; //@line 9945
  HEAP32[$503 >> 2] = $22; //@line 9946
  $504 = $ReallocAsyncCtx4 + 48 | 0; //@line 9947
  HEAP32[$504 >> 2] = $24; //@line 9948
  $505 = $ReallocAsyncCtx4 + 52 | 0; //@line 9949
  HEAP32[$505 >> 2] = $26; //@line 9950
  $506 = $ReallocAsyncCtx4 + 56 | 0; //@line 9951
  HEAP32[$506 >> 2] = $28; //@line 9952
  $507 = $ReallocAsyncCtx4 + 60 | 0; //@line 9953
  HEAP8[$507 >> 0] = $30; //@line 9954
  $508 = $ReallocAsyncCtx4 + 64 | 0; //@line 9955
  HEAP32[$508 >> 2] = $32; //@line 9956
  $509 = $ReallocAsyncCtx4 + 68 | 0; //@line 9957
  HEAP8[$509 >> 0] = $34; //@line 9958
  $510 = $ReallocAsyncCtx4 + 72 | 0; //@line 9959
  HEAP32[$510 >> 2] = $36; //@line 9960
  $511 = $ReallocAsyncCtx4 + 76 | 0; //@line 9961
  HEAP32[$511 >> 2] = $38; //@line 9962
  $512 = $ReallocAsyncCtx4 + 80 | 0; //@line 9963
  HEAP32[$512 >> 2] = $40; //@line 9964
  $513 = $ReallocAsyncCtx4 + 84 | 0; //@line 9965
  HEAP32[$513 >> 2] = $42; //@line 9966
  $514 = $ReallocAsyncCtx4 + 88 | 0; //@line 9967
  HEAP32[$514 >> 2] = $44; //@line 9968
  $515 = $ReallocAsyncCtx4 + 92 | 0; //@line 9969
  HEAP32[$515 >> 2] = $46; //@line 9970
  $516 = $ReallocAsyncCtx4 + 96 | 0; //@line 9971
  HEAP32[$516 >> 2] = $48; //@line 9972
  $517 = $ReallocAsyncCtx4 + 100 | 0; //@line 9973
  HEAP32[$517 >> 2] = $50; //@line 9974
  $518 = $ReallocAsyncCtx4 + 104 | 0; //@line 9975
  HEAP32[$518 >> 2] = $52; //@line 9976
  $519 = $ReallocAsyncCtx4 + 108 | 0; //@line 9977
  HEAP32[$519 >> 2] = $54; //@line 9978
  $520 = $ReallocAsyncCtx4 + 112 | 0; //@line 9979
  HEAP32[$520 >> 2] = $56; //@line 9980
  $521 = $ReallocAsyncCtx4 + 116 | 0; //@line 9981
  HEAP32[$521 >> 2] = $58; //@line 9982
  $522 = $ReallocAsyncCtx4 + 120 | 0; //@line 9983
  HEAP32[$522 >> 2] = $60; //@line 9984
  $523 = $ReallocAsyncCtx4 + 124 | 0; //@line 9985
  HEAP32[$523 >> 2] = $62; //@line 9986
  $524 = $ReallocAsyncCtx4 + 128 | 0; //@line 9987
  HEAP32[$524 >> 2] = $64; //@line 9988
  $525 = $ReallocAsyncCtx4 + 132 | 0; //@line 9989
  HEAP32[$525 >> 2] = $66; //@line 9990
  $526 = $ReallocAsyncCtx4 + 136 | 0; //@line 9991
  HEAP32[$526 >> 2] = $68; //@line 9992
  $527 = $ReallocAsyncCtx4 + 140 | 0; //@line 9993
  HEAP8[$527 >> 0] = $478; //@line 9994
  $528 = $ReallocAsyncCtx4 + 144 | 0; //@line 9995
  HEAP32[$528 >> 2] = $70; //@line 9996
  $529 = $ReallocAsyncCtx4 + 148 | 0; //@line 9997
  HEAP32[$529 >> 2] = $72; //@line 9998
  $530 = $ReallocAsyncCtx4 + 152 | 0; //@line 9999
  HEAP32[$530 >> 2] = $74; //@line 10000
  $531 = $ReallocAsyncCtx4 + 156 | 0; //@line 10001
  HEAP32[$531 >> 2] = $76; //@line 10002
  $532 = $ReallocAsyncCtx4 + 160 | 0; //@line 10003
  HEAP32[$532 >> 2] = $78; //@line 10004
  $533 = $ReallocAsyncCtx4 + 164 | 0; //@line 10005
  HEAP32[$533 >> 2] = $80; //@line 10006
  $534 = $ReallocAsyncCtx4 + 168 | 0; //@line 10007
  HEAP32[$534 >> 2] = $82; //@line 10008
  $535 = $ReallocAsyncCtx4 + 172 | 0; //@line 10009
  HEAP32[$535 >> 2] = $84; //@line 10010
  $536 = $ReallocAsyncCtx4 + 176 | 0; //@line 10011
  HEAP32[$536 >> 2] = $86; //@line 10012
  $537 = $ReallocAsyncCtx4 + 180 | 0; //@line 10013
  HEAP32[$537 >> 2] = $88; //@line 10014
  $538 = $ReallocAsyncCtx4 + 184 | 0; //@line 10015
  HEAP32[$538 >> 2] = $90; //@line 10016
  $539 = $ReallocAsyncCtx4 + 188 | 0; //@line 10017
  HEAP32[$539 >> 2] = $92; //@line 10018
  $540 = $ReallocAsyncCtx4 + 192 | 0; //@line 10019
  HEAP32[$540 >> 2] = $94; //@line 10020
  $541 = $ReallocAsyncCtx4 + 196 | 0; //@line 10021
  HEAP32[$541 >> 2] = $96; //@line 10022
  $542 = $ReallocAsyncCtx4 + 200 | 0; //@line 10023
  HEAP32[$542 >> 2] = $98; //@line 10024
  $543 = $ReallocAsyncCtx4 + 204 | 0; //@line 10025
  HEAP32[$543 >> 2] = $100; //@line 10026
  $544 = $ReallocAsyncCtx4 + 208 | 0; //@line 10027
  HEAP32[$544 >> 2] = $104; //@line 10028
  $545 = $ReallocAsyncCtx4 + 212 | 0; //@line 10029
  HEAP32[$545 >> 2] = $106; //@line 10030
  $546 = $ReallocAsyncCtx4 + 216 | 0; //@line 10031
  HEAP32[$546 >> 2] = $108; //@line 10032
  $547 = $ReallocAsyncCtx4 + 220 | 0; //@line 10033
  HEAP32[$547 >> 2] = $110; //@line 10034
  $548 = $ReallocAsyncCtx4 + 224 | 0; //@line 10035
  HEAP32[$548 >> 2] = $112; //@line 10036
  $549 = $ReallocAsyncCtx4 + 228 | 0; //@line 10037
  HEAP32[$549 >> 2] = $114; //@line 10038
  $550 = $ReallocAsyncCtx4 + 232 | 0; //@line 10039
  HEAP32[$550 >> 2] = $116; //@line 10040
  $551 = $ReallocAsyncCtx4 + 236 | 0; //@line 10041
  HEAP32[$551 >> 2] = $118; //@line 10042
  $552 = $ReallocAsyncCtx4 + 240 | 0; //@line 10043
  HEAP32[$552 >> 2] = $120; //@line 10044
  $553 = $ReallocAsyncCtx4 + 244 | 0; //@line 10045
  HEAP32[$553 >> 2] = $122; //@line 10046
  $554 = $ReallocAsyncCtx4 + 248 | 0; //@line 10047
  HEAP32[$554 >> 2] = $124; //@line 10048
  $555 = $ReallocAsyncCtx4 + 252 | 0; //@line 10049
  HEAP32[$555 >> 2] = $126; //@line 10050
  $556 = $ReallocAsyncCtx4 + 256 | 0; //@line 10051
  HEAP32[$556 >> 2] = $128; //@line 10052
  $557 = $ReallocAsyncCtx4 + 260 | 0; //@line 10053
  HEAP32[$557 >> 2] = $130; //@line 10054
  $558 = $ReallocAsyncCtx4 + 264 | 0; //@line 10055
  HEAP32[$558 >> 2] = $$096$be; //@line 10056
  $559 = $ReallocAsyncCtx4 + 268 | 0; //@line 10057
  HEAP32[$559 >> 2] = $132; //@line 10058
  $560 = $ReallocAsyncCtx4 + 272 | 0; //@line 10059
  HEAP32[$560 >> 2] = $134; //@line 10060
  sp = STACKTOP; //@line 10061
  return;
 } else if ((label | 0) == 24) {
  HEAP8[$16 >> 0] = HEAP8[$36 + ($137 & 255) >> 0] | 0; //@line 10069
  $578 = $$0$be + 5 << 24 >> 24; //@line 10082
  HEAP32[$4 >> 2] = (HEAPU8[$36 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$36 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$36 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 10090
  $588 = HEAP32[(HEAP32[$32 >> 2] | 0) + 48 >> 2] | 0; //@line 10093
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(272) | 0; //@line 10094
  $589 = FUNCTION_TABLE_iii[$588 & 31]($20, $100) | 0; //@line 10095
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 494; //@line 10098
   $590 = $ReallocAsyncCtx5 + 4 | 0; //@line 10099
   HEAP32[$590 >> 2] = $2; //@line 10100
   $591 = $ReallocAsyncCtx5 + 8 | 0; //@line 10101
   HEAP32[$591 >> 2] = $4; //@line 10102
   $592 = $ReallocAsyncCtx5 + 12 | 0; //@line 10103
   HEAP8[$592 >> 0] = $6; //@line 10104
   $593 = $ReallocAsyncCtx5 + 16 | 0; //@line 10105
   HEAP32[$593 >> 2] = $8; //@line 10106
   $594 = $ReallocAsyncCtx5 + 20 | 0; //@line 10107
   HEAP32[$594 >> 2] = $10; //@line 10108
   $595 = $ReallocAsyncCtx5 + 24 | 0; //@line 10109
   HEAP32[$595 >> 2] = $12; //@line 10110
   $596 = $ReallocAsyncCtx5 + 28 | 0; //@line 10111
   HEAP32[$596 >> 2] = $14; //@line 10112
   $597 = $ReallocAsyncCtx5 + 32 | 0; //@line 10113
   HEAP32[$597 >> 2] = $16; //@line 10114
   $598 = $ReallocAsyncCtx5 + 36 | 0; //@line 10115
   HEAP32[$598 >> 2] = $18; //@line 10116
   $599 = $ReallocAsyncCtx5 + 40 | 0; //@line 10117
   HEAP32[$599 >> 2] = $20; //@line 10118
   $600 = $ReallocAsyncCtx5 + 44 | 0; //@line 10119
   HEAP32[$600 >> 2] = $22; //@line 10120
   $601 = $ReallocAsyncCtx5 + 48 | 0; //@line 10121
   HEAP32[$601 >> 2] = $24; //@line 10122
   $602 = $ReallocAsyncCtx5 + 52 | 0; //@line 10123
   HEAP32[$602 >> 2] = $26; //@line 10124
   $603 = $ReallocAsyncCtx5 + 56 | 0; //@line 10125
   HEAP32[$603 >> 2] = $28; //@line 10126
   $604 = $ReallocAsyncCtx5 + 60 | 0; //@line 10127
   HEAP8[$604 >> 0] = $30; //@line 10128
   $605 = $ReallocAsyncCtx5 + 64 | 0; //@line 10129
   HEAP32[$605 >> 2] = $32; //@line 10130
   $606 = $ReallocAsyncCtx5 + 68 | 0; //@line 10131
   HEAP8[$606 >> 0] = $34; //@line 10132
   $607 = $ReallocAsyncCtx5 + 72 | 0; //@line 10133
   HEAP32[$607 >> 2] = $36; //@line 10134
   $608 = $ReallocAsyncCtx5 + 76 | 0; //@line 10135
   HEAP32[$608 >> 2] = $38; //@line 10136
   $609 = $ReallocAsyncCtx5 + 80 | 0; //@line 10137
   HEAP32[$609 >> 2] = $40; //@line 10138
   $610 = $ReallocAsyncCtx5 + 84 | 0; //@line 10139
   HEAP32[$610 >> 2] = $42; //@line 10140
   $611 = $ReallocAsyncCtx5 + 88 | 0; //@line 10141
   HEAP32[$611 >> 2] = $44; //@line 10142
   $612 = $ReallocAsyncCtx5 + 92 | 0; //@line 10143
   HEAP32[$612 >> 2] = $46; //@line 10144
   $613 = $ReallocAsyncCtx5 + 96 | 0; //@line 10145
   HEAP32[$613 >> 2] = $48; //@line 10146
   $614 = $ReallocAsyncCtx5 + 100 | 0; //@line 10147
   HEAP32[$614 >> 2] = $50; //@line 10148
   $615 = $ReallocAsyncCtx5 + 104 | 0; //@line 10149
   HEAP32[$615 >> 2] = $52; //@line 10150
   $616 = $ReallocAsyncCtx5 + 108 | 0; //@line 10151
   HEAP32[$616 >> 2] = $54; //@line 10152
   $617 = $ReallocAsyncCtx5 + 112 | 0; //@line 10153
   HEAP32[$617 >> 2] = $56; //@line 10154
   $618 = $ReallocAsyncCtx5 + 116 | 0; //@line 10155
   HEAP32[$618 >> 2] = $58; //@line 10156
   $619 = $ReallocAsyncCtx5 + 120 | 0; //@line 10157
   HEAP32[$619 >> 2] = $60; //@line 10158
   $620 = $ReallocAsyncCtx5 + 124 | 0; //@line 10159
   HEAP32[$620 >> 2] = $62; //@line 10160
   $621 = $ReallocAsyncCtx5 + 128 | 0; //@line 10161
   HEAP32[$621 >> 2] = $64; //@line 10162
   $622 = $ReallocAsyncCtx5 + 132 | 0; //@line 10163
   HEAP32[$622 >> 2] = $66; //@line 10164
   $623 = $ReallocAsyncCtx5 + 136 | 0; //@line 10165
   HEAP32[$623 >> 2] = $68; //@line 10166
   $624 = $ReallocAsyncCtx5 + 140 | 0; //@line 10167
   HEAP32[$624 >> 2] = $70; //@line 10168
   $625 = $ReallocAsyncCtx5 + 144 | 0; //@line 10169
   HEAP32[$625 >> 2] = $72; //@line 10170
   $626 = $ReallocAsyncCtx5 + 148 | 0; //@line 10171
   HEAP32[$626 >> 2] = $74; //@line 10172
   $627 = $ReallocAsyncCtx5 + 152 | 0; //@line 10173
   HEAP32[$627 >> 2] = $76; //@line 10174
   $628 = $ReallocAsyncCtx5 + 156 | 0; //@line 10175
   HEAP32[$628 >> 2] = $78; //@line 10176
   $629 = $ReallocAsyncCtx5 + 160 | 0; //@line 10177
   HEAP32[$629 >> 2] = $80; //@line 10178
   $630 = $ReallocAsyncCtx5 + 164 | 0; //@line 10179
   HEAP32[$630 >> 2] = $82; //@line 10180
   $631 = $ReallocAsyncCtx5 + 168 | 0; //@line 10181
   HEAP32[$631 >> 2] = $84; //@line 10182
   $632 = $ReallocAsyncCtx5 + 172 | 0; //@line 10183
   HEAP32[$632 >> 2] = $86; //@line 10184
   $633 = $ReallocAsyncCtx5 + 176 | 0; //@line 10185
   HEAP32[$633 >> 2] = $88; //@line 10186
   $634 = $ReallocAsyncCtx5 + 180 | 0; //@line 10187
   HEAP32[$634 >> 2] = $90; //@line 10188
   $635 = $ReallocAsyncCtx5 + 184 | 0; //@line 10189
   HEAP32[$635 >> 2] = $92; //@line 10190
   $636 = $ReallocAsyncCtx5 + 188 | 0; //@line 10191
   HEAP32[$636 >> 2] = $94; //@line 10192
   $637 = $ReallocAsyncCtx5 + 192 | 0; //@line 10193
   HEAP32[$637 >> 2] = $96; //@line 10194
   $638 = $ReallocAsyncCtx5 + 196 | 0; //@line 10195
   HEAP32[$638 >> 2] = $98; //@line 10196
   $639 = $ReallocAsyncCtx5 + 200 | 0; //@line 10197
   HEAP32[$639 >> 2] = $100; //@line 10198
   $640 = $ReallocAsyncCtx5 + 204 | 0; //@line 10199
   HEAP8[$640 >> 0] = $578; //@line 10200
   $641 = $ReallocAsyncCtx5 + 208 | 0; //@line 10201
   HEAP32[$641 >> 2] = $104; //@line 10202
   $642 = $ReallocAsyncCtx5 + 212 | 0; //@line 10203
   HEAP32[$642 >> 2] = $106; //@line 10204
   $643 = $ReallocAsyncCtx5 + 216 | 0; //@line 10205
   HEAP32[$643 >> 2] = $108; //@line 10206
   $644 = $ReallocAsyncCtx5 + 220 | 0; //@line 10207
   HEAP32[$644 >> 2] = $110; //@line 10208
   $645 = $ReallocAsyncCtx5 + 224 | 0; //@line 10209
   HEAP32[$645 >> 2] = $112; //@line 10210
   $646 = $ReallocAsyncCtx5 + 228 | 0; //@line 10211
   HEAP32[$646 >> 2] = $114; //@line 10212
   $647 = $ReallocAsyncCtx5 + 232 | 0; //@line 10213
   HEAP32[$647 >> 2] = $116; //@line 10214
   $648 = $ReallocAsyncCtx5 + 236 | 0; //@line 10215
   HEAP32[$648 >> 2] = $118; //@line 10216
   $649 = $ReallocAsyncCtx5 + 240 | 0; //@line 10217
   HEAP32[$649 >> 2] = $120; //@line 10218
   $650 = $ReallocAsyncCtx5 + 244 | 0; //@line 10219
   HEAP32[$650 >> 2] = $122; //@line 10220
   $651 = $ReallocAsyncCtx5 + 248 | 0; //@line 10221
   HEAP32[$651 >> 2] = $124; //@line 10222
   $652 = $ReallocAsyncCtx5 + 252 | 0; //@line 10223
   HEAP32[$652 >> 2] = $126; //@line 10224
   $653 = $ReallocAsyncCtx5 + 256 | 0; //@line 10225
   HEAP32[$653 >> 2] = $128; //@line 10226
   $654 = $ReallocAsyncCtx5 + 260 | 0; //@line 10227
   HEAP32[$654 >> 2] = $130; //@line 10228
   $655 = $ReallocAsyncCtx5 + 264 | 0; //@line 10229
   HEAP32[$655 >> 2] = $132; //@line 10230
   $656 = $ReallocAsyncCtx5 + 268 | 0; //@line 10231
   HEAP32[$656 >> 2] = $134; //@line 10232
   sp = STACKTOP; //@line 10233
   return;
  }
  HEAP8[___async_retval >> 0] = $589; //@line 10237
  ___async_unwind = 0; //@line 10238
  HEAP32[$ReallocAsyncCtx5 >> 2] = 494; //@line 10239
  $590 = $ReallocAsyncCtx5 + 4 | 0; //@line 10240
  HEAP32[$590 >> 2] = $2; //@line 10241
  $591 = $ReallocAsyncCtx5 + 8 | 0; //@line 10242
  HEAP32[$591 >> 2] = $4; //@line 10243
  $592 = $ReallocAsyncCtx5 + 12 | 0; //@line 10244
  HEAP8[$592 >> 0] = $6; //@line 10245
  $593 = $ReallocAsyncCtx5 + 16 | 0; //@line 10246
  HEAP32[$593 >> 2] = $8; //@line 10247
  $594 = $ReallocAsyncCtx5 + 20 | 0; //@line 10248
  HEAP32[$594 >> 2] = $10; //@line 10249
  $595 = $ReallocAsyncCtx5 + 24 | 0; //@line 10250
  HEAP32[$595 >> 2] = $12; //@line 10251
  $596 = $ReallocAsyncCtx5 + 28 | 0; //@line 10252
  HEAP32[$596 >> 2] = $14; //@line 10253
  $597 = $ReallocAsyncCtx5 + 32 | 0; //@line 10254
  HEAP32[$597 >> 2] = $16; //@line 10255
  $598 = $ReallocAsyncCtx5 + 36 | 0; //@line 10256
  HEAP32[$598 >> 2] = $18; //@line 10257
  $599 = $ReallocAsyncCtx5 + 40 | 0; //@line 10258
  HEAP32[$599 >> 2] = $20; //@line 10259
  $600 = $ReallocAsyncCtx5 + 44 | 0; //@line 10260
  HEAP32[$600 >> 2] = $22; //@line 10261
  $601 = $ReallocAsyncCtx5 + 48 | 0; //@line 10262
  HEAP32[$601 >> 2] = $24; //@line 10263
  $602 = $ReallocAsyncCtx5 + 52 | 0; //@line 10264
  HEAP32[$602 >> 2] = $26; //@line 10265
  $603 = $ReallocAsyncCtx5 + 56 | 0; //@line 10266
  HEAP32[$603 >> 2] = $28; //@line 10267
  $604 = $ReallocAsyncCtx5 + 60 | 0; //@line 10268
  HEAP8[$604 >> 0] = $30; //@line 10269
  $605 = $ReallocAsyncCtx5 + 64 | 0; //@line 10270
  HEAP32[$605 >> 2] = $32; //@line 10271
  $606 = $ReallocAsyncCtx5 + 68 | 0; //@line 10272
  HEAP8[$606 >> 0] = $34; //@line 10273
  $607 = $ReallocAsyncCtx5 + 72 | 0; //@line 10274
  HEAP32[$607 >> 2] = $36; //@line 10275
  $608 = $ReallocAsyncCtx5 + 76 | 0; //@line 10276
  HEAP32[$608 >> 2] = $38; //@line 10277
  $609 = $ReallocAsyncCtx5 + 80 | 0; //@line 10278
  HEAP32[$609 >> 2] = $40; //@line 10279
  $610 = $ReallocAsyncCtx5 + 84 | 0; //@line 10280
  HEAP32[$610 >> 2] = $42; //@line 10281
  $611 = $ReallocAsyncCtx5 + 88 | 0; //@line 10282
  HEAP32[$611 >> 2] = $44; //@line 10283
  $612 = $ReallocAsyncCtx5 + 92 | 0; //@line 10284
  HEAP32[$612 >> 2] = $46; //@line 10285
  $613 = $ReallocAsyncCtx5 + 96 | 0; //@line 10286
  HEAP32[$613 >> 2] = $48; //@line 10287
  $614 = $ReallocAsyncCtx5 + 100 | 0; //@line 10288
  HEAP32[$614 >> 2] = $50; //@line 10289
  $615 = $ReallocAsyncCtx5 + 104 | 0; //@line 10290
  HEAP32[$615 >> 2] = $52; //@line 10291
  $616 = $ReallocAsyncCtx5 + 108 | 0; //@line 10292
  HEAP32[$616 >> 2] = $54; //@line 10293
  $617 = $ReallocAsyncCtx5 + 112 | 0; //@line 10294
  HEAP32[$617 >> 2] = $56; //@line 10295
  $618 = $ReallocAsyncCtx5 + 116 | 0; //@line 10296
  HEAP32[$618 >> 2] = $58; //@line 10297
  $619 = $ReallocAsyncCtx5 + 120 | 0; //@line 10298
  HEAP32[$619 >> 2] = $60; //@line 10299
  $620 = $ReallocAsyncCtx5 + 124 | 0; //@line 10300
  HEAP32[$620 >> 2] = $62; //@line 10301
  $621 = $ReallocAsyncCtx5 + 128 | 0; //@line 10302
  HEAP32[$621 >> 2] = $64; //@line 10303
  $622 = $ReallocAsyncCtx5 + 132 | 0; //@line 10304
  HEAP32[$622 >> 2] = $66; //@line 10305
  $623 = $ReallocAsyncCtx5 + 136 | 0; //@line 10306
  HEAP32[$623 >> 2] = $68; //@line 10307
  $624 = $ReallocAsyncCtx5 + 140 | 0; //@line 10308
  HEAP32[$624 >> 2] = $70; //@line 10309
  $625 = $ReallocAsyncCtx5 + 144 | 0; //@line 10310
  HEAP32[$625 >> 2] = $72; //@line 10311
  $626 = $ReallocAsyncCtx5 + 148 | 0; //@line 10312
  HEAP32[$626 >> 2] = $74; //@line 10313
  $627 = $ReallocAsyncCtx5 + 152 | 0; //@line 10314
  HEAP32[$627 >> 2] = $76; //@line 10315
  $628 = $ReallocAsyncCtx5 + 156 | 0; //@line 10316
  HEAP32[$628 >> 2] = $78; //@line 10317
  $629 = $ReallocAsyncCtx5 + 160 | 0; //@line 10318
  HEAP32[$629 >> 2] = $80; //@line 10319
  $630 = $ReallocAsyncCtx5 + 164 | 0; //@line 10320
  HEAP32[$630 >> 2] = $82; //@line 10321
  $631 = $ReallocAsyncCtx5 + 168 | 0; //@line 10322
  HEAP32[$631 >> 2] = $84; //@line 10323
  $632 = $ReallocAsyncCtx5 + 172 | 0; //@line 10324
  HEAP32[$632 >> 2] = $86; //@line 10325
  $633 = $ReallocAsyncCtx5 + 176 | 0; //@line 10326
  HEAP32[$633 >> 2] = $88; //@line 10327
  $634 = $ReallocAsyncCtx5 + 180 | 0; //@line 10328
  HEAP32[$634 >> 2] = $90; //@line 10329
  $635 = $ReallocAsyncCtx5 + 184 | 0; //@line 10330
  HEAP32[$635 >> 2] = $92; //@line 10331
  $636 = $ReallocAsyncCtx5 + 188 | 0; //@line 10332
  HEAP32[$636 >> 2] = $94; //@line 10333
  $637 = $ReallocAsyncCtx5 + 192 | 0; //@line 10334
  HEAP32[$637 >> 2] = $96; //@line 10335
  $638 = $ReallocAsyncCtx5 + 196 | 0; //@line 10336
  HEAP32[$638 >> 2] = $98; //@line 10337
  $639 = $ReallocAsyncCtx5 + 200 | 0; //@line 10338
  HEAP32[$639 >> 2] = $100; //@line 10339
  $640 = $ReallocAsyncCtx5 + 204 | 0; //@line 10340
  HEAP8[$640 >> 0] = $578; //@line 10341
  $641 = $ReallocAsyncCtx5 + 208 | 0; //@line 10342
  HEAP32[$641 >> 2] = $104; //@line 10343
  $642 = $ReallocAsyncCtx5 + 212 | 0; //@line 10344
  HEAP32[$642 >> 2] = $106; //@line 10345
  $643 = $ReallocAsyncCtx5 + 216 | 0; //@line 10346
  HEAP32[$643 >> 2] = $108; //@line 10347
  $644 = $ReallocAsyncCtx5 + 220 | 0; //@line 10348
  HEAP32[$644 >> 2] = $110; //@line 10349
  $645 = $ReallocAsyncCtx5 + 224 | 0; //@line 10350
  HEAP32[$645 >> 2] = $112; //@line 10351
  $646 = $ReallocAsyncCtx5 + 228 | 0; //@line 10352
  HEAP32[$646 >> 2] = $114; //@line 10353
  $647 = $ReallocAsyncCtx5 + 232 | 0; //@line 10354
  HEAP32[$647 >> 2] = $116; //@line 10355
  $648 = $ReallocAsyncCtx5 + 236 | 0; //@line 10356
  HEAP32[$648 >> 2] = $118; //@line 10357
  $649 = $ReallocAsyncCtx5 + 240 | 0; //@line 10358
  HEAP32[$649 >> 2] = $120; //@line 10359
  $650 = $ReallocAsyncCtx5 + 244 | 0; //@line 10360
  HEAP32[$650 >> 2] = $122; //@line 10361
  $651 = $ReallocAsyncCtx5 + 248 | 0; //@line 10362
  HEAP32[$651 >> 2] = $124; //@line 10363
  $652 = $ReallocAsyncCtx5 + 252 | 0; //@line 10364
  HEAP32[$652 >> 2] = $126; //@line 10365
  $653 = $ReallocAsyncCtx5 + 256 | 0; //@line 10366
  HEAP32[$653 >> 2] = $128; //@line 10367
  $654 = $ReallocAsyncCtx5 + 260 | 0; //@line 10368
  HEAP32[$654 >> 2] = $130; //@line 10369
  $655 = $ReallocAsyncCtx5 + 264 | 0; //@line 10370
  HEAP32[$655 >> 2] = $132; //@line 10371
  $656 = $ReallocAsyncCtx5 + 268 | 0; //@line 10372
  HEAP32[$656 >> 2] = $134; //@line 10373
  sp = STACKTOP; //@line 10374
  return;
 } else if ((label | 0) == 31) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 10379
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_180($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i104 = 0, $$096$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $137 = 0, $14 = 0, $148 = 0, $149 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $231 = 0, $234 = 0, $239 = 0, $24 = 0, $247 = 0, $26 = 0, $266 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $352 = 0, $353 = 0, $36 = 0, $364 = 0, $365 = 0, $38 = 0, $4 = 0, $40 = 0, $402 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $478 = 0, $48 = 0, $482 = 0, $486 = 0, $489 = 0, $495 = 0, $498 = 0, $499 = 0, $50 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $58 = 0, $595 = 0, $6 = 0, $60 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2703
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2705
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2707
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 2709
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2711
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2713
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2715
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2717
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2719
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 2721
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 2723
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 2725
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 2727
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 2729
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 2731
 $30 = HEAP8[$0 + 60 >> 0] | 0; //@line 2733
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 2735
 $34 = HEAP8[$0 + 68 >> 0] | 0; //@line 2737
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 2739
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 2741
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 2743
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 2745
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 2747
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 2749
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 2751
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 2753
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 2755
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 2757
 $56 = HEAP8[$0 + 112 >> 0] | 0; //@line 2759
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 2761
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 2763
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 2765
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 2767
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 2769
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 2771
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 2773
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 2775
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 2777
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 2779
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 2781
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 2783
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 2785
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 2787
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 2789
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 2791
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 2793
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 2795
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 2797
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 2799
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 2801
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 2803
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 2805
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 2807
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 2809
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 2811
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 2813
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 2815
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 2817
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 2819
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 2821
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 2823
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 2825
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 2827
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 2829
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 2831
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 2833
 $132 = HEAP32[$0 + 264 >> 2] | 0; //@line 2835
 $134 = HEAP32[$0 + 268 >> 2] | 0; //@line 2837
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 2839
 if (($AsyncRetVal & 7) == 7) {
  HEAP8[$96 >> 0] = HEAP8[$124 >> 0] | 0; //@line 2844
  HEAP32[$50 >> 2] = HEAP32[$78 >> 2]; //@line 2846
  HEAP8[$62 >> 0] = HEAP8[$84 >> 0] | 0; //@line 2848
 }
 $352 = HEAP8[$42 >> 0] | 0; //@line 2851
 $353 = $352 & 255; //@line 2852
 if (((-128 - (HEAP8[$14 >> 0] | 0) & 255) + -1 | 0) > ($353 | 0)) {
  HEAP8[$24 + 4 + $353 >> 0] = 5; //@line 2860
  HEAP8[$42 >> 0] = $352 + 2 << 24 >> 24; //@line 2862
  HEAP8[($352 + 1 & 255) + ($24 + 4) >> 0] = $AsyncRetVal; //@line 2865
  HEAP8[$58 >> 0] = 1; //@line 2866
  HEAP8[$118 >> 0] = 1; //@line 2867
  $$0$i104 = 0; //@line 2868
 } else {
  $$0$i104 = -1e3; //@line 2870
 }
 $$0$be = $56; //@line 2872
 $$096$be = $$0$i104; //@line 2872
 L8 : while (1) {
  if (($$0$be & 255) >= ($34 & 255)) {
   label = 33; //@line 2876
   break;
  }
  $137 = $$0$be + 1 << 24 >> 24; //@line 2880
  switch (HEAP8[$36 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 2885
    break L8;
    break;
   }
  case 5:
   {
    label = 9; //@line 2890
    break L8;
    break;
   }
  case 7:
   {
    label = 19; //@line 2895
    break L8;
    break;
   }
  case 9:
   {
    label = 24; //@line 2900
    break L8;
    break;
   }
  case 10:
   {
    label = 29; //@line 2905
    break L8;
    break;
   }
  case 2:
   {
    HEAP32[$68 >> 2] = 0; //@line 2910
    HEAP8[$12 >> 0] = HEAP8[$36 + ($137 & 255) >> 0] | 0; //@line 2915
    HEAP8[$26 >> 0] = HEAP8[$36 + ($$0$be + 2 & 255) >> 0] | 0; //@line 2920
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 2921
    continue L8;
    break;
   }
  case 4:
   {
    $231 = $$0$be + 2 << 24 >> 24; //@line 2926
    $234 = HEAP8[$36 + ($137 & 255) >> 0] | 0; //@line 2929
    HEAP8[$110 >> 0] = $234; //@line 2930
    HEAP16[$132 >> 1] = 1 << ($234 & 255); //@line 2934
    $239 = HEAP8[$42 >> 0] | 0; //@line 2936
    if (($239 & 255) >= (-128 - (HEAP8[$14 >> 0] | 0) & 255)) {
     $$0$be = $231; //@line 2940
     $$096$be = -1e3; //@line 2940
     continue L8;
    }
    HEAP8[$42 >> 0] = $239 + 1 << 24 >> 24; //@line 2946
    HEAP8[($239 & 255) + ($24 + 4) >> 0] = 4; //@line 2947
    HEAP8[$118 >> 0] = 1; //@line 2948
    $$0$be = $231; //@line 2949
    $$096$be = 0; //@line 2949
    continue L8;
    break;
   }
  case 6:
   {
    $364 = HEAP8[$42 >> 0] | 0; //@line 2955
    $365 = $364 & 255; //@line 2956
    if (((-128 - (HEAP8[$14 >> 0] | 0) & 255) + -2 | 0) <= ($365 | 0)) {
     $$0$be = $137; //@line 2962
     $$096$be = -1e3; //@line 2962
     continue L8;
    }
    HEAP8[$24 + 4 + $365 >> 0] = 6; //@line 2967
    HEAP8[($364 + 1 & 255) + ($24 + 4) >> 0] = -1; //@line 2971
    HEAP8[$42 >> 0] = $364 + 3 << 24 >> 24; //@line 2973
    HEAP8[($364 + 2 & 255) + ($24 + 4) >> 0] = $6; //@line 2976
    HEAP8[$118 >> 0] = 1; //@line 2977
    $$0$be = $137; //@line 2978
    $$096$be = 0; //@line 2978
    continue L8;
    break;
   }
  case 8:
   {
    $478 = $$0$be + 2 << 24 >> 24; //@line 2983
    $482 = HEAP8[$36 + ($137 & 255) >> 0] & 15; //@line 2987
    $486 = ($482 + ($482 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 2992
    HEAP32[$88 >> 2] = $486; //@line 2993
    HEAP32[$76 >> 2] = $486 + 1e3; //@line 2995
    $489 = HEAP8[$42 >> 0] | 0; //@line 2997
    if (($489 & 255) >= (-128 - (HEAP8[$14 >> 0] | 0) & 255)) {
     $$0$be = $478; //@line 3001
     $$096$be = -1e3; //@line 3001
     continue L8;
    }
    HEAP8[$42 >> 0] = $489 + 1 << 24 >> 24; //@line 3007
    HEAP8[($489 & 255) + ($24 + 4) >> 0] = 8; //@line 3008
    HEAP8[$58 >> 0] = 1; //@line 3009
    HEAP8[$118 >> 0] = 1; //@line 3010
    $$0$be = $478; //@line 3011
    $$096$be = 0; //@line 3011
    continue L8;
    break;
   }
  default:
   {
    $$0$be = $137; //@line 3016
    $$096$be = -1013; //@line 3016
    continue L8;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$122 >> 0] = 0; //@line 3022
  HEAP8[$94 >> 0] = 0; //@line 3023
  HEAP8[$80 >> 0] = 0; //@line 3024
  HEAP8[$72 >> 0] = 0; //@line 3025
  $148 = $137 & 255; //@line 3026
  $149 = $148 + -1 | 0; //@line 3027
  HEAP32[$40 >> 2] = $36 + $149; //@line 3029
  HEAP8[$112 >> 0] = $46 - $149; //@line 3032
  HEAP8[$134 >> 0] = HEAP8[$126 >> 0] | 0; //@line 3034
  HEAP8[$86 >> 0] = HEAP8[$82 >> 0] | 0; //@line 3036
  HEAP8[$98 >> 0] = HEAP8[$92 >> 0] | 0; //@line 3038
  HEAP8[$54 >> 0] = HEAP8[$44 >> 0] | 0; //@line 3040
  HEAP8[$10 >> 0] = HEAP8[$70 >> 0] | 0; //@line 3042
  $160 = HEAP32[(HEAP32[$2 >> 2] | 0) + 36 >> 2] | 0; //@line 3045
  $ReallocAsyncCtx = _emscripten_realloc_async_context(276) | 0; //@line 3046
  $161 = FUNCTION_TABLE_iiiiiii[$160 & 3]($20, $116, $122, $94, $80, $72) | 0; //@line 3047
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 490; //@line 3050
   $162 = $ReallocAsyncCtx + 4 | 0; //@line 3051
   HEAP32[$162 >> 2] = $2; //@line 3052
   $163 = $ReallocAsyncCtx + 8 | 0; //@line 3053
   HEAP32[$163 >> 2] = $4; //@line 3054
   $164 = $ReallocAsyncCtx + 12 | 0; //@line 3055
   HEAP8[$164 >> 0] = $6; //@line 3056
   $165 = $ReallocAsyncCtx + 16 | 0; //@line 3057
   HEAP32[$165 >> 2] = $8; //@line 3058
   $166 = $ReallocAsyncCtx + 20 | 0; //@line 3059
   HEAP32[$166 >> 2] = $10; //@line 3060
   $167 = $ReallocAsyncCtx + 24 | 0; //@line 3061
   HEAP32[$167 >> 2] = $12; //@line 3062
   $168 = $ReallocAsyncCtx + 28 | 0; //@line 3063
   HEAP32[$168 >> 2] = $14; //@line 3064
   $169 = $ReallocAsyncCtx + 32 | 0; //@line 3065
   HEAP32[$169 >> 2] = $16; //@line 3066
   $170 = $ReallocAsyncCtx + 36 | 0; //@line 3067
   HEAP32[$170 >> 2] = $18; //@line 3068
   $171 = $ReallocAsyncCtx + 40 | 0; //@line 3069
   HEAP32[$171 >> 2] = $20; //@line 3070
   $172 = $ReallocAsyncCtx + 44 | 0; //@line 3071
   HEAP32[$172 >> 2] = $22; //@line 3072
   $173 = $ReallocAsyncCtx + 48 | 0; //@line 3073
   HEAP32[$173 >> 2] = $24; //@line 3074
   $174 = $ReallocAsyncCtx + 52 | 0; //@line 3075
   HEAP32[$174 >> 2] = $26; //@line 3076
   $175 = $ReallocAsyncCtx + 56 | 0; //@line 3077
   HEAP32[$175 >> 2] = $28; //@line 3078
   $176 = $ReallocAsyncCtx + 60 | 0; //@line 3079
   HEAP8[$176 >> 0] = $30; //@line 3080
   $177 = $ReallocAsyncCtx + 64 | 0; //@line 3081
   HEAP32[$177 >> 2] = $32; //@line 3082
   $178 = $ReallocAsyncCtx + 68 | 0; //@line 3083
   HEAP8[$178 >> 0] = $34; //@line 3084
   $179 = $ReallocAsyncCtx + 72 | 0; //@line 3085
   HEAP32[$179 >> 2] = $36; //@line 3086
   $180 = $ReallocAsyncCtx + 76 | 0; //@line 3087
   HEAP32[$180 >> 2] = $38; //@line 3088
   $181 = $ReallocAsyncCtx + 80 | 0; //@line 3089
   HEAP32[$181 >> 2] = $40; //@line 3090
   $182 = $ReallocAsyncCtx + 84 | 0; //@line 3091
   HEAP32[$182 >> 2] = $42; //@line 3092
   $183 = $ReallocAsyncCtx + 88 | 0; //@line 3093
   HEAP32[$183 >> 2] = $44; //@line 3094
   $184 = $ReallocAsyncCtx + 92 | 0; //@line 3095
   HEAP32[$184 >> 2] = $46; //@line 3096
   $185 = $ReallocAsyncCtx + 96 | 0; //@line 3097
   HEAP32[$185 >> 2] = $48; //@line 3098
   $186 = $ReallocAsyncCtx + 100 | 0; //@line 3099
   HEAP32[$186 >> 2] = $50; //@line 3100
   $187 = $ReallocAsyncCtx + 104 | 0; //@line 3101
   HEAP32[$187 >> 2] = $52; //@line 3102
   $188 = $ReallocAsyncCtx + 108 | 0; //@line 3103
   HEAP32[$188 >> 2] = $54; //@line 3104
   $189 = $ReallocAsyncCtx + 112 | 0; //@line 3105
   HEAP32[$189 >> 2] = $58; //@line 3106
   $190 = $ReallocAsyncCtx + 116 | 0; //@line 3107
   HEAP32[$190 >> 2] = $60; //@line 3108
   $191 = $ReallocAsyncCtx + 120 | 0; //@line 3109
   HEAP32[$191 >> 2] = $62; //@line 3110
   $192 = $ReallocAsyncCtx + 124 | 0; //@line 3111
   HEAP32[$192 >> 2] = $64; //@line 3112
   $193 = $ReallocAsyncCtx + 128 | 0; //@line 3113
   HEAP32[$193 >> 2] = $66; //@line 3114
   $194 = $ReallocAsyncCtx + 132 | 0; //@line 3115
   HEAP32[$194 >> 2] = $68; //@line 3116
   $195 = $ReallocAsyncCtx + 136 | 0; //@line 3117
   HEAP32[$195 >> 2] = $70; //@line 3118
   $196 = $ReallocAsyncCtx + 140 | 0; //@line 3119
   HEAP32[$196 >> 2] = $72; //@line 3120
   $197 = $ReallocAsyncCtx + 144 | 0; //@line 3121
   HEAP32[$197 >> 2] = $74; //@line 3122
   $198 = $ReallocAsyncCtx + 148 | 0; //@line 3123
   HEAP32[$198 >> 2] = $76; //@line 3124
   $199 = $ReallocAsyncCtx + 152 | 0; //@line 3125
   HEAP32[$199 >> 2] = $78; //@line 3126
   $200 = $ReallocAsyncCtx + 156 | 0; //@line 3127
   HEAP32[$200 >> 2] = $80; //@line 3128
   $201 = $ReallocAsyncCtx + 160 | 0; //@line 3129
   HEAP32[$201 >> 2] = $148; //@line 3130
   $202 = $ReallocAsyncCtx + 164 | 0; //@line 3131
   HEAP32[$202 >> 2] = $82; //@line 3132
   $203 = $ReallocAsyncCtx + 168 | 0; //@line 3133
   HEAP32[$203 >> 2] = $84; //@line 3134
   $204 = $ReallocAsyncCtx + 172 | 0; //@line 3135
   HEAP32[$204 >> 2] = $86; //@line 3136
   $205 = $ReallocAsyncCtx + 176 | 0; //@line 3137
   HEAP32[$205 >> 2] = $88; //@line 3138
   $206 = $ReallocAsyncCtx + 180 | 0; //@line 3139
   HEAP32[$206 >> 2] = $90; //@line 3140
   $207 = $ReallocAsyncCtx + 184 | 0; //@line 3141
   HEAP32[$207 >> 2] = $92; //@line 3142
   $208 = $ReallocAsyncCtx + 188 | 0; //@line 3143
   HEAP32[$208 >> 2] = $94; //@line 3144
   $209 = $ReallocAsyncCtx + 192 | 0; //@line 3145
   HEAP32[$209 >> 2] = $96; //@line 3146
   $210 = $ReallocAsyncCtx + 196 | 0; //@line 3147
   HEAP32[$210 >> 2] = $98; //@line 3148
   $211 = $ReallocAsyncCtx + 200 | 0; //@line 3149
   HEAP32[$211 >> 2] = $100; //@line 3150
   $212 = $ReallocAsyncCtx + 204 | 0; //@line 3151
   HEAP32[$212 >> 2] = $102; //@line 3152
   $213 = $ReallocAsyncCtx + 208 | 0; //@line 3153
   HEAP32[$213 >> 2] = $104; //@line 3154
   $214 = $ReallocAsyncCtx + 212 | 0; //@line 3155
   HEAP32[$214 >> 2] = $106; //@line 3156
   $215 = $ReallocAsyncCtx + 216 | 0; //@line 3157
   HEAP32[$215 >> 2] = $108; //@line 3158
   $216 = $ReallocAsyncCtx + 220 | 0; //@line 3159
   HEAP32[$216 >> 2] = $110; //@line 3160
   $217 = $ReallocAsyncCtx + 224 | 0; //@line 3161
   HEAP32[$217 >> 2] = $112; //@line 3162
   $218 = $ReallocAsyncCtx + 228 | 0; //@line 3163
   HEAP32[$218 >> 2] = $114; //@line 3164
   $219 = $ReallocAsyncCtx + 232 | 0; //@line 3165
   HEAP32[$219 >> 2] = $116; //@line 3166
   $220 = $ReallocAsyncCtx + 236 | 0; //@line 3167
   HEAP32[$220 >> 2] = $118; //@line 3168
   $221 = $ReallocAsyncCtx + 240 | 0; //@line 3169
   HEAP32[$221 >> 2] = $120; //@line 3170
   $222 = $ReallocAsyncCtx + 244 | 0; //@line 3171
   HEAP32[$222 >> 2] = $122; //@line 3172
   $223 = $ReallocAsyncCtx + 248 | 0; //@line 3173
   HEAP32[$223 >> 2] = $124; //@line 3174
   $224 = $ReallocAsyncCtx + 252 | 0; //@line 3175
   HEAP32[$224 >> 2] = $126; //@line 3176
   $225 = $ReallocAsyncCtx + 256 | 0; //@line 3177
   HEAP32[$225 >> 2] = $128; //@line 3178
   $226 = $ReallocAsyncCtx + 260 | 0; //@line 3179
   HEAP32[$226 >> 2] = $130; //@line 3180
   $227 = $ReallocAsyncCtx + 264 | 0; //@line 3181
   HEAP32[$227 >> 2] = $$096$be; //@line 3182
   $228 = $ReallocAsyncCtx + 268 | 0; //@line 3183
   HEAP32[$228 >> 2] = $132; //@line 3184
   $229 = $ReallocAsyncCtx + 272 | 0; //@line 3185
   HEAP32[$229 >> 2] = $134; //@line 3186
   sp = STACKTOP; //@line 3187
   return;
  }
  HEAP8[___async_retval >> 0] = $161; //@line 3191
  ___async_unwind = 0; //@line 3192
  HEAP32[$ReallocAsyncCtx >> 2] = 490; //@line 3193
  $162 = $ReallocAsyncCtx + 4 | 0; //@line 3194
  HEAP32[$162 >> 2] = $2; //@line 3195
  $163 = $ReallocAsyncCtx + 8 | 0; //@line 3196
  HEAP32[$163 >> 2] = $4; //@line 3197
  $164 = $ReallocAsyncCtx + 12 | 0; //@line 3198
  HEAP8[$164 >> 0] = $6; //@line 3199
  $165 = $ReallocAsyncCtx + 16 | 0; //@line 3200
  HEAP32[$165 >> 2] = $8; //@line 3201
  $166 = $ReallocAsyncCtx + 20 | 0; //@line 3202
  HEAP32[$166 >> 2] = $10; //@line 3203
  $167 = $ReallocAsyncCtx + 24 | 0; //@line 3204
  HEAP32[$167 >> 2] = $12; //@line 3205
  $168 = $ReallocAsyncCtx + 28 | 0; //@line 3206
  HEAP32[$168 >> 2] = $14; //@line 3207
  $169 = $ReallocAsyncCtx + 32 | 0; //@line 3208
  HEAP32[$169 >> 2] = $16; //@line 3209
  $170 = $ReallocAsyncCtx + 36 | 0; //@line 3210
  HEAP32[$170 >> 2] = $18; //@line 3211
  $171 = $ReallocAsyncCtx + 40 | 0; //@line 3212
  HEAP32[$171 >> 2] = $20; //@line 3213
  $172 = $ReallocAsyncCtx + 44 | 0; //@line 3214
  HEAP32[$172 >> 2] = $22; //@line 3215
  $173 = $ReallocAsyncCtx + 48 | 0; //@line 3216
  HEAP32[$173 >> 2] = $24; //@line 3217
  $174 = $ReallocAsyncCtx + 52 | 0; //@line 3218
  HEAP32[$174 >> 2] = $26; //@line 3219
  $175 = $ReallocAsyncCtx + 56 | 0; //@line 3220
  HEAP32[$175 >> 2] = $28; //@line 3221
  $176 = $ReallocAsyncCtx + 60 | 0; //@line 3222
  HEAP8[$176 >> 0] = $30; //@line 3223
  $177 = $ReallocAsyncCtx + 64 | 0; //@line 3224
  HEAP32[$177 >> 2] = $32; //@line 3225
  $178 = $ReallocAsyncCtx + 68 | 0; //@line 3226
  HEAP8[$178 >> 0] = $34; //@line 3227
  $179 = $ReallocAsyncCtx + 72 | 0; //@line 3228
  HEAP32[$179 >> 2] = $36; //@line 3229
  $180 = $ReallocAsyncCtx + 76 | 0; //@line 3230
  HEAP32[$180 >> 2] = $38; //@line 3231
  $181 = $ReallocAsyncCtx + 80 | 0; //@line 3232
  HEAP32[$181 >> 2] = $40; //@line 3233
  $182 = $ReallocAsyncCtx + 84 | 0; //@line 3234
  HEAP32[$182 >> 2] = $42; //@line 3235
  $183 = $ReallocAsyncCtx + 88 | 0; //@line 3236
  HEAP32[$183 >> 2] = $44; //@line 3237
  $184 = $ReallocAsyncCtx + 92 | 0; //@line 3238
  HEAP32[$184 >> 2] = $46; //@line 3239
  $185 = $ReallocAsyncCtx + 96 | 0; //@line 3240
  HEAP32[$185 >> 2] = $48; //@line 3241
  $186 = $ReallocAsyncCtx + 100 | 0; //@line 3242
  HEAP32[$186 >> 2] = $50; //@line 3243
  $187 = $ReallocAsyncCtx + 104 | 0; //@line 3244
  HEAP32[$187 >> 2] = $52; //@line 3245
  $188 = $ReallocAsyncCtx + 108 | 0; //@line 3246
  HEAP32[$188 >> 2] = $54; //@line 3247
  $189 = $ReallocAsyncCtx + 112 | 0; //@line 3248
  HEAP32[$189 >> 2] = $58; //@line 3249
  $190 = $ReallocAsyncCtx + 116 | 0; //@line 3250
  HEAP32[$190 >> 2] = $60; //@line 3251
  $191 = $ReallocAsyncCtx + 120 | 0; //@line 3252
  HEAP32[$191 >> 2] = $62; //@line 3253
  $192 = $ReallocAsyncCtx + 124 | 0; //@line 3254
  HEAP32[$192 >> 2] = $64; //@line 3255
  $193 = $ReallocAsyncCtx + 128 | 0; //@line 3256
  HEAP32[$193 >> 2] = $66; //@line 3257
  $194 = $ReallocAsyncCtx + 132 | 0; //@line 3258
  HEAP32[$194 >> 2] = $68; //@line 3259
  $195 = $ReallocAsyncCtx + 136 | 0; //@line 3260
  HEAP32[$195 >> 2] = $70; //@line 3261
  $196 = $ReallocAsyncCtx + 140 | 0; //@line 3262
  HEAP32[$196 >> 2] = $72; //@line 3263
  $197 = $ReallocAsyncCtx + 144 | 0; //@line 3264
  HEAP32[$197 >> 2] = $74; //@line 3265
  $198 = $ReallocAsyncCtx + 148 | 0; //@line 3266
  HEAP32[$198 >> 2] = $76; //@line 3267
  $199 = $ReallocAsyncCtx + 152 | 0; //@line 3268
  HEAP32[$199 >> 2] = $78; //@line 3269
  $200 = $ReallocAsyncCtx + 156 | 0; //@line 3270
  HEAP32[$200 >> 2] = $80; //@line 3271
  $201 = $ReallocAsyncCtx + 160 | 0; //@line 3272
  HEAP32[$201 >> 2] = $148; //@line 3273
  $202 = $ReallocAsyncCtx + 164 | 0; //@line 3274
  HEAP32[$202 >> 2] = $82; //@line 3275
  $203 = $ReallocAsyncCtx + 168 | 0; //@line 3276
  HEAP32[$203 >> 2] = $84; //@line 3277
  $204 = $ReallocAsyncCtx + 172 | 0; //@line 3278
  HEAP32[$204 >> 2] = $86; //@line 3279
  $205 = $ReallocAsyncCtx + 176 | 0; //@line 3280
  HEAP32[$205 >> 2] = $88; //@line 3281
  $206 = $ReallocAsyncCtx + 180 | 0; //@line 3282
  HEAP32[$206 >> 2] = $90; //@line 3283
  $207 = $ReallocAsyncCtx + 184 | 0; //@line 3284
  HEAP32[$207 >> 2] = $92; //@line 3285
  $208 = $ReallocAsyncCtx + 188 | 0; //@line 3286
  HEAP32[$208 >> 2] = $94; //@line 3287
  $209 = $ReallocAsyncCtx + 192 | 0; //@line 3288
  HEAP32[$209 >> 2] = $96; //@line 3289
  $210 = $ReallocAsyncCtx + 196 | 0; //@line 3290
  HEAP32[$210 >> 2] = $98; //@line 3291
  $211 = $ReallocAsyncCtx + 200 | 0; //@line 3292
  HEAP32[$211 >> 2] = $100; //@line 3293
  $212 = $ReallocAsyncCtx + 204 | 0; //@line 3294
  HEAP32[$212 >> 2] = $102; //@line 3295
  $213 = $ReallocAsyncCtx + 208 | 0; //@line 3296
  HEAP32[$213 >> 2] = $104; //@line 3297
  $214 = $ReallocAsyncCtx + 212 | 0; //@line 3298
  HEAP32[$214 >> 2] = $106; //@line 3299
  $215 = $ReallocAsyncCtx + 216 | 0; //@line 3300
  HEAP32[$215 >> 2] = $108; //@line 3301
  $216 = $ReallocAsyncCtx + 220 | 0; //@line 3302
  HEAP32[$216 >> 2] = $110; //@line 3303
  $217 = $ReallocAsyncCtx + 224 | 0; //@line 3304
  HEAP32[$217 >> 2] = $112; //@line 3305
  $218 = $ReallocAsyncCtx + 228 | 0; //@line 3306
  HEAP32[$218 >> 2] = $114; //@line 3307
  $219 = $ReallocAsyncCtx + 232 | 0; //@line 3308
  HEAP32[$219 >> 2] = $116; //@line 3309
  $220 = $ReallocAsyncCtx + 236 | 0; //@line 3310
  HEAP32[$220 >> 2] = $118; //@line 3311
  $221 = $ReallocAsyncCtx + 240 | 0; //@line 3312
  HEAP32[$221 >> 2] = $120; //@line 3313
  $222 = $ReallocAsyncCtx + 244 | 0; //@line 3314
  HEAP32[$222 >> 2] = $122; //@line 3315
  $223 = $ReallocAsyncCtx + 248 | 0; //@line 3316
  HEAP32[$223 >> 2] = $124; //@line 3317
  $224 = $ReallocAsyncCtx + 252 | 0; //@line 3318
  HEAP32[$224 >> 2] = $126; //@line 3319
  $225 = $ReallocAsyncCtx + 256 | 0; //@line 3320
  HEAP32[$225 >> 2] = $128; //@line 3321
  $226 = $ReallocAsyncCtx + 260 | 0; //@line 3322
  HEAP32[$226 >> 2] = $130; //@line 3323
  $227 = $ReallocAsyncCtx + 264 | 0; //@line 3324
  HEAP32[$227 >> 2] = $$096$be; //@line 3325
  $228 = $ReallocAsyncCtx + 268 | 0; //@line 3326
  HEAP32[$228 >> 2] = $132; //@line 3327
  $229 = $ReallocAsyncCtx + 272 | 0; //@line 3328
  HEAP32[$229 >> 2] = $134; //@line 3329
  sp = STACKTOP; //@line 3330
  return;
 } else if ((label | 0) == 9) {
  $247 = HEAP8[$36 + ($137 & 255) >> 0] | 0; //@line 3336
  HEAP8[$84 >> 0] = ($247 & 255) >>> 4 & 7; //@line 3341
  HEAP8[$124 >> 0] = $247 & 15; //@line 3343
  $266 = $$0$be + 5 << 24 >> 24; //@line 3357
  HEAP32[$78 >> 2] = (HEAPU8[$36 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$36 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$36 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 3365
  $276 = HEAP32[(HEAP32[$106 >> 2] | 0) + 40 >> 2] | 0; //@line 3368
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(272) | 0; //@line 3369
  $277 = FUNCTION_TABLE_iii[$276 & 31]($20, $74) | 0; //@line 3370
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 491; //@line 3373
   $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 3374
   HEAP32[$278 >> 2] = $2; //@line 3375
   $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 3376
   HEAP32[$279 >> 2] = $4; //@line 3377
   $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 3378
   HEAP8[$280 >> 0] = $6; //@line 3379
   $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 3380
   HEAP32[$281 >> 2] = $8; //@line 3381
   $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 3382
   HEAP32[$282 >> 2] = $10; //@line 3383
   $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 3384
   HEAP32[$283 >> 2] = $12; //@line 3385
   $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 3386
   HEAP32[$284 >> 2] = $14; //@line 3387
   $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 3388
   HEAP32[$285 >> 2] = $16; //@line 3389
   $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 3390
   HEAP32[$286 >> 2] = $18; //@line 3391
   $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 3392
   HEAP32[$287 >> 2] = $20; //@line 3393
   $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 3394
   HEAP32[$288 >> 2] = $22; //@line 3395
   $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 3396
   HEAP32[$289 >> 2] = $24; //@line 3397
   $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 3398
   HEAP32[$290 >> 2] = $26; //@line 3399
   $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 3400
   HEAP32[$291 >> 2] = $28; //@line 3401
   $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 3402
   HEAP8[$292 >> 0] = $30; //@line 3403
   $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 3404
   HEAP32[$293 >> 2] = $32; //@line 3405
   $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 3406
   HEAP8[$294 >> 0] = $34; //@line 3407
   $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 3408
   HEAP32[$295 >> 2] = $36; //@line 3409
   $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 3410
   HEAP32[$296 >> 2] = $38; //@line 3411
   $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 3412
   HEAP32[$297 >> 2] = $40; //@line 3413
   $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 3414
   HEAP32[$298 >> 2] = $42; //@line 3415
   $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 3416
   HEAP32[$299 >> 2] = $44; //@line 3417
   $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 3418
   HEAP32[$300 >> 2] = $46; //@line 3419
   $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 3420
   HEAP32[$301 >> 2] = $48; //@line 3421
   $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 3422
   HEAP32[$302 >> 2] = $50; //@line 3423
   $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 3424
   HEAP32[$303 >> 2] = $52; //@line 3425
   $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 3426
   HEAP32[$304 >> 2] = $54; //@line 3427
   $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 3428
   HEAP8[$305 >> 0] = $266; //@line 3429
   $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 3430
   HEAP32[$306 >> 2] = $58; //@line 3431
   $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 3432
   HEAP32[$307 >> 2] = $60; //@line 3433
   $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 3434
   HEAP32[$308 >> 2] = $62; //@line 3435
   $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 3436
   HEAP32[$309 >> 2] = $64; //@line 3437
   $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 3438
   HEAP32[$310 >> 2] = $66; //@line 3439
   $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 3440
   HEAP32[$311 >> 2] = $68; //@line 3441
   $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 3442
   HEAP32[$312 >> 2] = $70; //@line 3443
   $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 3444
   HEAP32[$313 >> 2] = $72; //@line 3445
   $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 3446
   HEAP32[$314 >> 2] = $74; //@line 3447
   $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 3448
   HEAP32[$315 >> 2] = $76; //@line 3449
   $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 3450
   HEAP32[$316 >> 2] = $78; //@line 3451
   $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 3452
   HEAP32[$317 >> 2] = $80; //@line 3453
   $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 3454
   HEAP32[$318 >> 2] = $82; //@line 3455
   $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 3456
   HEAP32[$319 >> 2] = $84; //@line 3457
   $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 3458
   HEAP32[$320 >> 2] = $86; //@line 3459
   $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 3460
   HEAP32[$321 >> 2] = $88; //@line 3461
   $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 3462
   HEAP32[$322 >> 2] = $90; //@line 3463
   $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 3464
   HEAP32[$323 >> 2] = $92; //@line 3465
   $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 3466
   HEAP32[$324 >> 2] = $94; //@line 3467
   $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 3468
   HEAP32[$325 >> 2] = $96; //@line 3469
   $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 3470
   HEAP32[$326 >> 2] = $98; //@line 3471
   $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 3472
   HEAP32[$327 >> 2] = $100; //@line 3473
   $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 3474
   HEAP32[$328 >> 2] = $102; //@line 3475
   $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 3476
   HEAP32[$329 >> 2] = $104; //@line 3477
   $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 3478
   HEAP32[$330 >> 2] = $106; //@line 3479
   $331 = $ReallocAsyncCtx2 + 216 | 0; //@line 3480
   HEAP32[$331 >> 2] = $108; //@line 3481
   $332 = $ReallocAsyncCtx2 + 220 | 0; //@line 3482
   HEAP32[$332 >> 2] = $110; //@line 3483
   $333 = $ReallocAsyncCtx2 + 224 | 0; //@line 3484
   HEAP32[$333 >> 2] = $112; //@line 3485
   $334 = $ReallocAsyncCtx2 + 228 | 0; //@line 3486
   HEAP32[$334 >> 2] = $114; //@line 3487
   $335 = $ReallocAsyncCtx2 + 232 | 0; //@line 3488
   HEAP32[$335 >> 2] = $116; //@line 3489
   $336 = $ReallocAsyncCtx2 + 236 | 0; //@line 3490
   HEAP32[$336 >> 2] = $118; //@line 3491
   $337 = $ReallocAsyncCtx2 + 240 | 0; //@line 3492
   HEAP32[$337 >> 2] = $120; //@line 3493
   $338 = $ReallocAsyncCtx2 + 244 | 0; //@line 3494
   HEAP32[$338 >> 2] = $122; //@line 3495
   $339 = $ReallocAsyncCtx2 + 248 | 0; //@line 3496
   HEAP32[$339 >> 2] = $124; //@line 3497
   $340 = $ReallocAsyncCtx2 + 252 | 0; //@line 3498
   HEAP32[$340 >> 2] = $126; //@line 3499
   $341 = $ReallocAsyncCtx2 + 256 | 0; //@line 3500
   HEAP32[$341 >> 2] = $128; //@line 3501
   $342 = $ReallocAsyncCtx2 + 260 | 0; //@line 3502
   HEAP32[$342 >> 2] = $130; //@line 3503
   $343 = $ReallocAsyncCtx2 + 264 | 0; //@line 3504
   HEAP32[$343 >> 2] = $132; //@line 3505
   $344 = $ReallocAsyncCtx2 + 268 | 0; //@line 3506
   HEAP32[$344 >> 2] = $134; //@line 3507
   sp = STACKTOP; //@line 3508
   return;
  }
  HEAP8[___async_retval >> 0] = $277; //@line 3512
  ___async_unwind = 0; //@line 3513
  HEAP32[$ReallocAsyncCtx2 >> 2] = 491; //@line 3514
  $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 3515
  HEAP32[$278 >> 2] = $2; //@line 3516
  $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 3517
  HEAP32[$279 >> 2] = $4; //@line 3518
  $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 3519
  HEAP8[$280 >> 0] = $6; //@line 3520
  $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 3521
  HEAP32[$281 >> 2] = $8; //@line 3522
  $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 3523
  HEAP32[$282 >> 2] = $10; //@line 3524
  $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 3525
  HEAP32[$283 >> 2] = $12; //@line 3526
  $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 3527
  HEAP32[$284 >> 2] = $14; //@line 3528
  $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 3529
  HEAP32[$285 >> 2] = $16; //@line 3530
  $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 3531
  HEAP32[$286 >> 2] = $18; //@line 3532
  $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 3533
  HEAP32[$287 >> 2] = $20; //@line 3534
  $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 3535
  HEAP32[$288 >> 2] = $22; //@line 3536
  $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 3537
  HEAP32[$289 >> 2] = $24; //@line 3538
  $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 3539
  HEAP32[$290 >> 2] = $26; //@line 3540
  $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 3541
  HEAP32[$291 >> 2] = $28; //@line 3542
  $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 3543
  HEAP8[$292 >> 0] = $30; //@line 3544
  $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 3545
  HEAP32[$293 >> 2] = $32; //@line 3546
  $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 3547
  HEAP8[$294 >> 0] = $34; //@line 3548
  $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 3549
  HEAP32[$295 >> 2] = $36; //@line 3550
  $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 3551
  HEAP32[$296 >> 2] = $38; //@line 3552
  $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 3553
  HEAP32[$297 >> 2] = $40; //@line 3554
  $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 3555
  HEAP32[$298 >> 2] = $42; //@line 3556
  $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 3557
  HEAP32[$299 >> 2] = $44; //@line 3558
  $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 3559
  HEAP32[$300 >> 2] = $46; //@line 3560
  $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 3561
  HEAP32[$301 >> 2] = $48; //@line 3562
  $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 3563
  HEAP32[$302 >> 2] = $50; //@line 3564
  $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 3565
  HEAP32[$303 >> 2] = $52; //@line 3566
  $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 3567
  HEAP32[$304 >> 2] = $54; //@line 3568
  $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 3569
  HEAP8[$305 >> 0] = $266; //@line 3570
  $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 3571
  HEAP32[$306 >> 2] = $58; //@line 3572
  $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 3573
  HEAP32[$307 >> 2] = $60; //@line 3574
  $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 3575
  HEAP32[$308 >> 2] = $62; //@line 3576
  $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 3577
  HEAP32[$309 >> 2] = $64; //@line 3578
  $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 3579
  HEAP32[$310 >> 2] = $66; //@line 3580
  $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 3581
  HEAP32[$311 >> 2] = $68; //@line 3582
  $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 3583
  HEAP32[$312 >> 2] = $70; //@line 3584
  $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 3585
  HEAP32[$313 >> 2] = $72; //@line 3586
  $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 3587
  HEAP32[$314 >> 2] = $74; //@line 3588
  $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 3589
  HEAP32[$315 >> 2] = $76; //@line 3590
  $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 3591
  HEAP32[$316 >> 2] = $78; //@line 3592
  $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 3593
  HEAP32[$317 >> 2] = $80; //@line 3594
  $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 3595
  HEAP32[$318 >> 2] = $82; //@line 3596
  $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 3597
  HEAP32[$319 >> 2] = $84; //@line 3598
  $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 3599
  HEAP32[$320 >> 2] = $86; //@line 3600
  $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 3601
  HEAP32[$321 >> 2] = $88; //@line 3602
  $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 3603
  HEAP32[$322 >> 2] = $90; //@line 3604
  $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 3605
  HEAP32[$323 >> 2] = $92; //@line 3606
  $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 3607
  HEAP32[$324 >> 2] = $94; //@line 3608
  $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 3609
  HEAP32[$325 >> 2] = $96; //@line 3610
  $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 3611
  HEAP32[$326 >> 2] = $98; //@line 3612
  $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 3613
  HEAP32[$327 >> 2] = $100; //@line 3614
  $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 3615
  HEAP32[$328 >> 2] = $102; //@line 3616
  $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 3617
  HEAP32[$329 >> 2] = $104; //@line 3618
  $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 3619
  HEAP32[$330 >> 2] = $106; //@line 3620
  $331 = $ReallocAsyncCtx2 + 216 | 0; //@line 3621
  HEAP32[$331 >> 2] = $108; //@line 3622
  $332 = $ReallocAsyncCtx2 + 220 | 0; //@line 3623
  HEAP32[$332 >> 2] = $110; //@line 3624
  $333 = $ReallocAsyncCtx2 + 224 | 0; //@line 3625
  HEAP32[$333 >> 2] = $112; //@line 3626
  $334 = $ReallocAsyncCtx2 + 228 | 0; //@line 3627
  HEAP32[$334 >> 2] = $114; //@line 3628
  $335 = $ReallocAsyncCtx2 + 232 | 0; //@line 3629
  HEAP32[$335 >> 2] = $116; //@line 3630
  $336 = $ReallocAsyncCtx2 + 236 | 0; //@line 3631
  HEAP32[$336 >> 2] = $118; //@line 3632
  $337 = $ReallocAsyncCtx2 + 240 | 0; //@line 3633
  HEAP32[$337 >> 2] = $120; //@line 3634
  $338 = $ReallocAsyncCtx2 + 244 | 0; //@line 3635
  HEAP32[$338 >> 2] = $122; //@line 3636
  $339 = $ReallocAsyncCtx2 + 248 | 0; //@line 3637
  HEAP32[$339 >> 2] = $124; //@line 3638
  $340 = $ReallocAsyncCtx2 + 252 | 0; //@line 3639
  HEAP32[$340 >> 2] = $126; //@line 3640
  $341 = $ReallocAsyncCtx2 + 256 | 0; //@line 3641
  HEAP32[$341 >> 2] = $128; //@line 3642
  $342 = $ReallocAsyncCtx2 + 260 | 0; //@line 3643
  HEAP32[$342 >> 2] = $130; //@line 3644
  $343 = $ReallocAsyncCtx2 + 264 | 0; //@line 3645
  HEAP32[$343 >> 2] = $132; //@line 3646
  $344 = $ReallocAsyncCtx2 + 268 | 0; //@line 3647
  HEAP32[$344 >> 2] = $134; //@line 3648
  sp = STACKTOP; //@line 3649
  return;
 } else if ((label | 0) == 19) {
  HEAP8[$8 >> 0] = HEAP8[$36 + ($137 & 255) >> 0] | 0; //@line 3657
  HEAP32[$38 >> 2] = $108; //@line 3658
  HEAP32[$120 >> 2] = (HEAPU8[$36 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$36 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$36 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 3679
  HEAP32[$114 >> 2] = 0; //@line 3680
  $402 = $$0$be + 6 << 24 >> 24; //@line 3681
  HEAP8[$130 >> 0] = HEAP8[$36 + ($$0$be + 5 & 255) >> 0] | 0; //@line 3685
  $408 = HEAP32[(HEAP32[$128 >> 2] | 0) + 8 >> 2] | 0; //@line 3688
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(268) | 0; //@line 3689
  $409 = FUNCTION_TABLE_iii[$408 & 31]($20, $64) | 0; //@line 3690
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 492; //@line 3693
   $410 = $ReallocAsyncCtx3 + 4 | 0; //@line 3694
   HEAP32[$410 >> 2] = $2; //@line 3695
   $411 = $ReallocAsyncCtx3 + 8 | 0; //@line 3696
   HEAP32[$411 >> 2] = $4; //@line 3697
   $412 = $ReallocAsyncCtx3 + 12 | 0; //@line 3698
   HEAP8[$412 >> 0] = $6; //@line 3699
   $413 = $ReallocAsyncCtx3 + 16 | 0; //@line 3700
   HEAP32[$413 >> 2] = $8; //@line 3701
   $414 = $ReallocAsyncCtx3 + 20 | 0; //@line 3702
   HEAP32[$414 >> 2] = $10; //@line 3703
   $415 = $ReallocAsyncCtx3 + 24 | 0; //@line 3704
   HEAP32[$415 >> 2] = $12; //@line 3705
   $416 = $ReallocAsyncCtx3 + 28 | 0; //@line 3706
   HEAP32[$416 >> 2] = $14; //@line 3707
   $417 = $ReallocAsyncCtx3 + 32 | 0; //@line 3708
   HEAP32[$417 >> 2] = $16; //@line 3709
   $418 = $ReallocAsyncCtx3 + 36 | 0; //@line 3710
   HEAP32[$418 >> 2] = $18; //@line 3711
   $419 = $ReallocAsyncCtx3 + 40 | 0; //@line 3712
   HEAP32[$419 >> 2] = $20; //@line 3713
   $420 = $ReallocAsyncCtx3 + 44 | 0; //@line 3714
   HEAP32[$420 >> 2] = $22; //@line 3715
   $421 = $ReallocAsyncCtx3 + 48 | 0; //@line 3716
   HEAP32[$421 >> 2] = $24; //@line 3717
   $422 = $ReallocAsyncCtx3 + 52 | 0; //@line 3718
   HEAP32[$422 >> 2] = $26; //@line 3719
   $423 = $ReallocAsyncCtx3 + 56 | 0; //@line 3720
   HEAP32[$423 >> 2] = $28; //@line 3721
   $424 = $ReallocAsyncCtx3 + 60 | 0; //@line 3722
   HEAP8[$424 >> 0] = $402; //@line 3723
   $425 = $ReallocAsyncCtx3 + 61 | 0; //@line 3724
   HEAP8[$425 >> 0] = $30; //@line 3725
   $426 = $ReallocAsyncCtx3 + 64 | 0; //@line 3726
   HEAP32[$426 >> 2] = $32; //@line 3727
   $427 = $ReallocAsyncCtx3 + 68 | 0; //@line 3728
   HEAP8[$427 >> 0] = $34; //@line 3729
   $428 = $ReallocAsyncCtx3 + 72 | 0; //@line 3730
   HEAP32[$428 >> 2] = $36; //@line 3731
   $429 = $ReallocAsyncCtx3 + 76 | 0; //@line 3732
   HEAP32[$429 >> 2] = $38; //@line 3733
   $430 = $ReallocAsyncCtx3 + 80 | 0; //@line 3734
   HEAP32[$430 >> 2] = $40; //@line 3735
   $431 = $ReallocAsyncCtx3 + 84 | 0; //@line 3736
   HEAP32[$431 >> 2] = $42; //@line 3737
   $432 = $ReallocAsyncCtx3 + 88 | 0; //@line 3738
   HEAP32[$432 >> 2] = $44; //@line 3739
   $433 = $ReallocAsyncCtx3 + 92 | 0; //@line 3740
   HEAP32[$433 >> 2] = $46; //@line 3741
   $434 = $ReallocAsyncCtx3 + 96 | 0; //@line 3742
   HEAP32[$434 >> 2] = $48; //@line 3743
   $435 = $ReallocAsyncCtx3 + 100 | 0; //@line 3744
   HEAP32[$435 >> 2] = $50; //@line 3745
   $436 = $ReallocAsyncCtx3 + 104 | 0; //@line 3746
   HEAP32[$436 >> 2] = $52; //@line 3747
   $437 = $ReallocAsyncCtx3 + 108 | 0; //@line 3748
   HEAP32[$437 >> 2] = $54; //@line 3749
   $438 = $ReallocAsyncCtx3 + 112 | 0; //@line 3750
   HEAP32[$438 >> 2] = $58; //@line 3751
   $439 = $ReallocAsyncCtx3 + 116 | 0; //@line 3752
   HEAP32[$439 >> 2] = $60; //@line 3753
   $440 = $ReallocAsyncCtx3 + 120 | 0; //@line 3754
   HEAP32[$440 >> 2] = $62; //@line 3755
   $441 = $ReallocAsyncCtx3 + 124 | 0; //@line 3756
   HEAP32[$441 >> 2] = $64; //@line 3757
   $442 = $ReallocAsyncCtx3 + 128 | 0; //@line 3758
   HEAP32[$442 >> 2] = $66; //@line 3759
   $443 = $ReallocAsyncCtx3 + 132 | 0; //@line 3760
   HEAP32[$443 >> 2] = $68; //@line 3761
   $444 = $ReallocAsyncCtx3 + 136 | 0; //@line 3762
   HEAP32[$444 >> 2] = $70; //@line 3763
   $445 = $ReallocAsyncCtx3 + 140 | 0; //@line 3764
   HEAP32[$445 >> 2] = $72; //@line 3765
   $446 = $ReallocAsyncCtx3 + 144 | 0; //@line 3766
   HEAP32[$446 >> 2] = $74; //@line 3767
   $447 = $ReallocAsyncCtx3 + 148 | 0; //@line 3768
   HEAP32[$447 >> 2] = $76; //@line 3769
   $448 = $ReallocAsyncCtx3 + 152 | 0; //@line 3770
   HEAP32[$448 >> 2] = $78; //@line 3771
   $449 = $ReallocAsyncCtx3 + 156 | 0; //@line 3772
   HEAP32[$449 >> 2] = $80; //@line 3773
   $450 = $ReallocAsyncCtx3 + 160 | 0; //@line 3774
   HEAP32[$450 >> 2] = $82; //@line 3775
   $451 = $ReallocAsyncCtx3 + 164 | 0; //@line 3776
   HEAP32[$451 >> 2] = $84; //@line 3777
   $452 = $ReallocAsyncCtx3 + 168 | 0; //@line 3778
   HEAP32[$452 >> 2] = $86; //@line 3779
   $453 = $ReallocAsyncCtx3 + 172 | 0; //@line 3780
   HEAP32[$453 >> 2] = $88; //@line 3781
   $454 = $ReallocAsyncCtx3 + 176 | 0; //@line 3782
   HEAP32[$454 >> 2] = $90; //@line 3783
   $455 = $ReallocAsyncCtx3 + 180 | 0; //@line 3784
   HEAP32[$455 >> 2] = $92; //@line 3785
   $456 = $ReallocAsyncCtx3 + 184 | 0; //@line 3786
   HEAP32[$456 >> 2] = $94; //@line 3787
   $457 = $ReallocAsyncCtx3 + 188 | 0; //@line 3788
   HEAP32[$457 >> 2] = $96; //@line 3789
   $458 = $ReallocAsyncCtx3 + 192 | 0; //@line 3790
   HEAP32[$458 >> 2] = $98; //@line 3791
   $459 = $ReallocAsyncCtx3 + 196 | 0; //@line 3792
   HEAP32[$459 >> 2] = $100; //@line 3793
   $460 = $ReallocAsyncCtx3 + 200 | 0; //@line 3794
   HEAP32[$460 >> 2] = $102; //@line 3795
   $461 = $ReallocAsyncCtx3 + 204 | 0; //@line 3796
   HEAP32[$461 >> 2] = $104; //@line 3797
   $462 = $ReallocAsyncCtx3 + 208 | 0; //@line 3798
   HEAP32[$462 >> 2] = $106; //@line 3799
   $463 = $ReallocAsyncCtx3 + 212 | 0; //@line 3800
   HEAP32[$463 >> 2] = $108; //@line 3801
   $464 = $ReallocAsyncCtx3 + 216 | 0; //@line 3802
   HEAP32[$464 >> 2] = $110; //@line 3803
   $465 = $ReallocAsyncCtx3 + 220 | 0; //@line 3804
   HEAP32[$465 >> 2] = $112; //@line 3805
   $466 = $ReallocAsyncCtx3 + 224 | 0; //@line 3806
   HEAP32[$466 >> 2] = $114; //@line 3807
   $467 = $ReallocAsyncCtx3 + 228 | 0; //@line 3808
   HEAP32[$467 >> 2] = $116; //@line 3809
   $468 = $ReallocAsyncCtx3 + 232 | 0; //@line 3810
   HEAP32[$468 >> 2] = $118; //@line 3811
   $469 = $ReallocAsyncCtx3 + 236 | 0; //@line 3812
   HEAP32[$469 >> 2] = $120; //@line 3813
   $470 = $ReallocAsyncCtx3 + 240 | 0; //@line 3814
   HEAP32[$470 >> 2] = $122; //@line 3815
   $471 = $ReallocAsyncCtx3 + 244 | 0; //@line 3816
   HEAP32[$471 >> 2] = $124; //@line 3817
   $472 = $ReallocAsyncCtx3 + 248 | 0; //@line 3818
   HEAP32[$472 >> 2] = $126; //@line 3819
   $473 = $ReallocAsyncCtx3 + 252 | 0; //@line 3820
   HEAP32[$473 >> 2] = $128; //@line 3821
   $474 = $ReallocAsyncCtx3 + 256 | 0; //@line 3822
   HEAP32[$474 >> 2] = $130; //@line 3823
   $475 = $ReallocAsyncCtx3 + 260 | 0; //@line 3824
   HEAP32[$475 >> 2] = $132; //@line 3825
   $476 = $ReallocAsyncCtx3 + 264 | 0; //@line 3826
   HEAP32[$476 >> 2] = $134; //@line 3827
   sp = STACKTOP; //@line 3828
   return;
  }
  HEAP8[___async_retval >> 0] = $409; //@line 3832
  ___async_unwind = 0; //@line 3833
  HEAP32[$ReallocAsyncCtx3 >> 2] = 492; //@line 3834
  $410 = $ReallocAsyncCtx3 + 4 | 0; //@line 3835
  HEAP32[$410 >> 2] = $2; //@line 3836
  $411 = $ReallocAsyncCtx3 + 8 | 0; //@line 3837
  HEAP32[$411 >> 2] = $4; //@line 3838
  $412 = $ReallocAsyncCtx3 + 12 | 0; //@line 3839
  HEAP8[$412 >> 0] = $6; //@line 3840
  $413 = $ReallocAsyncCtx3 + 16 | 0; //@line 3841
  HEAP32[$413 >> 2] = $8; //@line 3842
  $414 = $ReallocAsyncCtx3 + 20 | 0; //@line 3843
  HEAP32[$414 >> 2] = $10; //@line 3844
  $415 = $ReallocAsyncCtx3 + 24 | 0; //@line 3845
  HEAP32[$415 >> 2] = $12; //@line 3846
  $416 = $ReallocAsyncCtx3 + 28 | 0; //@line 3847
  HEAP32[$416 >> 2] = $14; //@line 3848
  $417 = $ReallocAsyncCtx3 + 32 | 0; //@line 3849
  HEAP32[$417 >> 2] = $16; //@line 3850
  $418 = $ReallocAsyncCtx3 + 36 | 0; //@line 3851
  HEAP32[$418 >> 2] = $18; //@line 3852
  $419 = $ReallocAsyncCtx3 + 40 | 0; //@line 3853
  HEAP32[$419 >> 2] = $20; //@line 3854
  $420 = $ReallocAsyncCtx3 + 44 | 0; //@line 3855
  HEAP32[$420 >> 2] = $22; //@line 3856
  $421 = $ReallocAsyncCtx3 + 48 | 0; //@line 3857
  HEAP32[$421 >> 2] = $24; //@line 3858
  $422 = $ReallocAsyncCtx3 + 52 | 0; //@line 3859
  HEAP32[$422 >> 2] = $26; //@line 3860
  $423 = $ReallocAsyncCtx3 + 56 | 0; //@line 3861
  HEAP32[$423 >> 2] = $28; //@line 3862
  $424 = $ReallocAsyncCtx3 + 60 | 0; //@line 3863
  HEAP8[$424 >> 0] = $402; //@line 3864
  $425 = $ReallocAsyncCtx3 + 61 | 0; //@line 3865
  HEAP8[$425 >> 0] = $30; //@line 3866
  $426 = $ReallocAsyncCtx3 + 64 | 0; //@line 3867
  HEAP32[$426 >> 2] = $32; //@line 3868
  $427 = $ReallocAsyncCtx3 + 68 | 0; //@line 3869
  HEAP8[$427 >> 0] = $34; //@line 3870
  $428 = $ReallocAsyncCtx3 + 72 | 0; //@line 3871
  HEAP32[$428 >> 2] = $36; //@line 3872
  $429 = $ReallocAsyncCtx3 + 76 | 0; //@line 3873
  HEAP32[$429 >> 2] = $38; //@line 3874
  $430 = $ReallocAsyncCtx3 + 80 | 0; //@line 3875
  HEAP32[$430 >> 2] = $40; //@line 3876
  $431 = $ReallocAsyncCtx3 + 84 | 0; //@line 3877
  HEAP32[$431 >> 2] = $42; //@line 3878
  $432 = $ReallocAsyncCtx3 + 88 | 0; //@line 3879
  HEAP32[$432 >> 2] = $44; //@line 3880
  $433 = $ReallocAsyncCtx3 + 92 | 0; //@line 3881
  HEAP32[$433 >> 2] = $46; //@line 3882
  $434 = $ReallocAsyncCtx3 + 96 | 0; //@line 3883
  HEAP32[$434 >> 2] = $48; //@line 3884
  $435 = $ReallocAsyncCtx3 + 100 | 0; //@line 3885
  HEAP32[$435 >> 2] = $50; //@line 3886
  $436 = $ReallocAsyncCtx3 + 104 | 0; //@line 3887
  HEAP32[$436 >> 2] = $52; //@line 3888
  $437 = $ReallocAsyncCtx3 + 108 | 0; //@line 3889
  HEAP32[$437 >> 2] = $54; //@line 3890
  $438 = $ReallocAsyncCtx3 + 112 | 0; //@line 3891
  HEAP32[$438 >> 2] = $58; //@line 3892
  $439 = $ReallocAsyncCtx3 + 116 | 0; //@line 3893
  HEAP32[$439 >> 2] = $60; //@line 3894
  $440 = $ReallocAsyncCtx3 + 120 | 0; //@line 3895
  HEAP32[$440 >> 2] = $62; //@line 3896
  $441 = $ReallocAsyncCtx3 + 124 | 0; //@line 3897
  HEAP32[$441 >> 2] = $64; //@line 3898
  $442 = $ReallocAsyncCtx3 + 128 | 0; //@line 3899
  HEAP32[$442 >> 2] = $66; //@line 3900
  $443 = $ReallocAsyncCtx3 + 132 | 0; //@line 3901
  HEAP32[$443 >> 2] = $68; //@line 3902
  $444 = $ReallocAsyncCtx3 + 136 | 0; //@line 3903
  HEAP32[$444 >> 2] = $70; //@line 3904
  $445 = $ReallocAsyncCtx3 + 140 | 0; //@line 3905
  HEAP32[$445 >> 2] = $72; //@line 3906
  $446 = $ReallocAsyncCtx3 + 144 | 0; //@line 3907
  HEAP32[$446 >> 2] = $74; //@line 3908
  $447 = $ReallocAsyncCtx3 + 148 | 0; //@line 3909
  HEAP32[$447 >> 2] = $76; //@line 3910
  $448 = $ReallocAsyncCtx3 + 152 | 0; //@line 3911
  HEAP32[$448 >> 2] = $78; //@line 3912
  $449 = $ReallocAsyncCtx3 + 156 | 0; //@line 3913
  HEAP32[$449 >> 2] = $80; //@line 3914
  $450 = $ReallocAsyncCtx3 + 160 | 0; //@line 3915
  HEAP32[$450 >> 2] = $82; //@line 3916
  $451 = $ReallocAsyncCtx3 + 164 | 0; //@line 3917
  HEAP32[$451 >> 2] = $84; //@line 3918
  $452 = $ReallocAsyncCtx3 + 168 | 0; //@line 3919
  HEAP32[$452 >> 2] = $86; //@line 3920
  $453 = $ReallocAsyncCtx3 + 172 | 0; //@line 3921
  HEAP32[$453 >> 2] = $88; //@line 3922
  $454 = $ReallocAsyncCtx3 + 176 | 0; //@line 3923
  HEAP32[$454 >> 2] = $90; //@line 3924
  $455 = $ReallocAsyncCtx3 + 180 | 0; //@line 3925
  HEAP32[$455 >> 2] = $92; //@line 3926
  $456 = $ReallocAsyncCtx3 + 184 | 0; //@line 3927
  HEAP32[$456 >> 2] = $94; //@line 3928
  $457 = $ReallocAsyncCtx3 + 188 | 0; //@line 3929
  HEAP32[$457 >> 2] = $96; //@line 3930
  $458 = $ReallocAsyncCtx3 + 192 | 0; //@line 3931
  HEAP32[$458 >> 2] = $98; //@line 3932
  $459 = $ReallocAsyncCtx3 + 196 | 0; //@line 3933
  HEAP32[$459 >> 2] = $100; //@line 3934
  $460 = $ReallocAsyncCtx3 + 200 | 0; //@line 3935
  HEAP32[$460 >> 2] = $102; //@line 3936
  $461 = $ReallocAsyncCtx3 + 204 | 0; //@line 3937
  HEAP32[$461 >> 2] = $104; //@line 3938
  $462 = $ReallocAsyncCtx3 + 208 | 0; //@line 3939
  HEAP32[$462 >> 2] = $106; //@line 3940
  $463 = $ReallocAsyncCtx3 + 212 | 0; //@line 3941
  HEAP32[$463 >> 2] = $108; //@line 3942
  $464 = $ReallocAsyncCtx3 + 216 | 0; //@line 3943
  HEAP32[$464 >> 2] = $110; //@line 3944
  $465 = $ReallocAsyncCtx3 + 220 | 0; //@line 3945
  HEAP32[$465 >> 2] = $112; //@line 3946
  $466 = $ReallocAsyncCtx3 + 224 | 0; //@line 3947
  HEAP32[$466 >> 2] = $114; //@line 3948
  $467 = $ReallocAsyncCtx3 + 228 | 0; //@line 3949
  HEAP32[$467 >> 2] = $116; //@line 3950
  $468 = $ReallocAsyncCtx3 + 232 | 0; //@line 3951
  HEAP32[$468 >> 2] = $118; //@line 3952
  $469 = $ReallocAsyncCtx3 + 236 | 0; //@line 3953
  HEAP32[$469 >> 2] = $120; //@line 3954
  $470 = $ReallocAsyncCtx3 + 240 | 0; //@line 3955
  HEAP32[$470 >> 2] = $122; //@line 3956
  $471 = $ReallocAsyncCtx3 + 244 | 0; //@line 3957
  HEAP32[$471 >> 2] = $124; //@line 3958
  $472 = $ReallocAsyncCtx3 + 248 | 0; //@line 3959
  HEAP32[$472 >> 2] = $126; //@line 3960
  $473 = $ReallocAsyncCtx3 + 252 | 0; //@line 3961
  HEAP32[$473 >> 2] = $128; //@line 3962
  $474 = $ReallocAsyncCtx3 + 256 | 0; //@line 3963
  HEAP32[$474 >> 2] = $130; //@line 3964
  $475 = $ReallocAsyncCtx3 + 260 | 0; //@line 3965
  HEAP32[$475 >> 2] = $132; //@line 3966
  $476 = $ReallocAsyncCtx3 + 264 | 0; //@line 3967
  HEAP32[$476 >> 2] = $134; //@line 3968
  sp = STACKTOP; //@line 3969
  return;
 } else if ((label | 0) == 24) {
  $495 = $$0$be + 2 << 24 >> 24; //@line 3973
  $498 = HEAP8[$36 + ($137 & 255) >> 0] | 0; //@line 3976
  HEAP8[$100 >> 0] = 0; //@line 3977
  $499 = $498 & 255; //@line 3978
  HEAP8[$90 >> 0] = $499 >>> 5 & 1; //@line 3982
  if ($499 & 16 | 0) {
   HEAP8[$100 >> 0] = 1; //@line 3986
  }
  HEAP8[$52 >> 0] = $499 & 15; //@line 3990
  $508 = HEAP32[(HEAP32[$48 >> 2] | 0) + 44 >> 2] | 0; //@line 3993
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 3994
  $509 = FUNCTION_TABLE_iii[$508 & 31]($20, $104) | 0; //@line 3995
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 493; //@line 3998
   $510 = $ReallocAsyncCtx4 + 4 | 0; //@line 3999
   HEAP32[$510 >> 2] = $2; //@line 4000
   $511 = $ReallocAsyncCtx4 + 8 | 0; //@line 4001
   HEAP32[$511 >> 2] = $4; //@line 4002
   $512 = $ReallocAsyncCtx4 + 12 | 0; //@line 4003
   HEAP8[$512 >> 0] = $6; //@line 4004
   $513 = $ReallocAsyncCtx4 + 16 | 0; //@line 4005
   HEAP32[$513 >> 2] = $8; //@line 4006
   $514 = $ReallocAsyncCtx4 + 20 | 0; //@line 4007
   HEAP32[$514 >> 2] = $10; //@line 4008
   $515 = $ReallocAsyncCtx4 + 24 | 0; //@line 4009
   HEAP32[$515 >> 2] = $12; //@line 4010
   $516 = $ReallocAsyncCtx4 + 28 | 0; //@line 4011
   HEAP32[$516 >> 2] = $14; //@line 4012
   $517 = $ReallocAsyncCtx4 + 32 | 0; //@line 4013
   HEAP32[$517 >> 2] = $16; //@line 4014
   $518 = $ReallocAsyncCtx4 + 36 | 0; //@line 4015
   HEAP32[$518 >> 2] = $18; //@line 4016
   $519 = $ReallocAsyncCtx4 + 40 | 0; //@line 4017
   HEAP32[$519 >> 2] = $20; //@line 4018
   $520 = $ReallocAsyncCtx4 + 44 | 0; //@line 4019
   HEAP32[$520 >> 2] = $22; //@line 4020
   $521 = $ReallocAsyncCtx4 + 48 | 0; //@line 4021
   HEAP32[$521 >> 2] = $24; //@line 4022
   $522 = $ReallocAsyncCtx4 + 52 | 0; //@line 4023
   HEAP32[$522 >> 2] = $26; //@line 4024
   $523 = $ReallocAsyncCtx4 + 56 | 0; //@line 4025
   HEAP32[$523 >> 2] = $28; //@line 4026
   $524 = $ReallocAsyncCtx4 + 60 | 0; //@line 4027
   HEAP8[$524 >> 0] = $30; //@line 4028
   $525 = $ReallocAsyncCtx4 + 64 | 0; //@line 4029
   HEAP32[$525 >> 2] = $32; //@line 4030
   $526 = $ReallocAsyncCtx4 + 68 | 0; //@line 4031
   HEAP8[$526 >> 0] = $34; //@line 4032
   $527 = $ReallocAsyncCtx4 + 72 | 0; //@line 4033
   HEAP32[$527 >> 2] = $36; //@line 4034
   $528 = $ReallocAsyncCtx4 + 76 | 0; //@line 4035
   HEAP32[$528 >> 2] = $38; //@line 4036
   $529 = $ReallocAsyncCtx4 + 80 | 0; //@line 4037
   HEAP32[$529 >> 2] = $40; //@line 4038
   $530 = $ReallocAsyncCtx4 + 84 | 0; //@line 4039
   HEAP32[$530 >> 2] = $42; //@line 4040
   $531 = $ReallocAsyncCtx4 + 88 | 0; //@line 4041
   HEAP32[$531 >> 2] = $44; //@line 4042
   $532 = $ReallocAsyncCtx4 + 92 | 0; //@line 4043
   HEAP32[$532 >> 2] = $46; //@line 4044
   $533 = $ReallocAsyncCtx4 + 96 | 0; //@line 4045
   HEAP32[$533 >> 2] = $48; //@line 4046
   $534 = $ReallocAsyncCtx4 + 100 | 0; //@line 4047
   HEAP32[$534 >> 2] = $50; //@line 4048
   $535 = $ReallocAsyncCtx4 + 104 | 0; //@line 4049
   HEAP32[$535 >> 2] = $52; //@line 4050
   $536 = $ReallocAsyncCtx4 + 108 | 0; //@line 4051
   HEAP32[$536 >> 2] = $54; //@line 4052
   $537 = $ReallocAsyncCtx4 + 112 | 0; //@line 4053
   HEAP32[$537 >> 2] = $58; //@line 4054
   $538 = $ReallocAsyncCtx4 + 116 | 0; //@line 4055
   HEAP32[$538 >> 2] = $60; //@line 4056
   $539 = $ReallocAsyncCtx4 + 120 | 0; //@line 4057
   HEAP32[$539 >> 2] = $62; //@line 4058
   $540 = $ReallocAsyncCtx4 + 124 | 0; //@line 4059
   HEAP32[$540 >> 2] = $64; //@line 4060
   $541 = $ReallocAsyncCtx4 + 128 | 0; //@line 4061
   HEAP32[$541 >> 2] = $66; //@line 4062
   $542 = $ReallocAsyncCtx4 + 132 | 0; //@line 4063
   HEAP32[$542 >> 2] = $68; //@line 4064
   $543 = $ReallocAsyncCtx4 + 136 | 0; //@line 4065
   HEAP32[$543 >> 2] = $70; //@line 4066
   $544 = $ReallocAsyncCtx4 + 140 | 0; //@line 4067
   HEAP8[$544 >> 0] = $495; //@line 4068
   $545 = $ReallocAsyncCtx4 + 144 | 0; //@line 4069
   HEAP32[$545 >> 2] = $72; //@line 4070
   $546 = $ReallocAsyncCtx4 + 148 | 0; //@line 4071
   HEAP32[$546 >> 2] = $74; //@line 4072
   $547 = $ReallocAsyncCtx4 + 152 | 0; //@line 4073
   HEAP32[$547 >> 2] = $76; //@line 4074
   $548 = $ReallocAsyncCtx4 + 156 | 0; //@line 4075
   HEAP32[$548 >> 2] = $78; //@line 4076
   $549 = $ReallocAsyncCtx4 + 160 | 0; //@line 4077
   HEAP32[$549 >> 2] = $80; //@line 4078
   $550 = $ReallocAsyncCtx4 + 164 | 0; //@line 4079
   HEAP32[$550 >> 2] = $82; //@line 4080
   $551 = $ReallocAsyncCtx4 + 168 | 0; //@line 4081
   HEAP32[$551 >> 2] = $84; //@line 4082
   $552 = $ReallocAsyncCtx4 + 172 | 0; //@line 4083
   HEAP32[$552 >> 2] = $86; //@line 4084
   $553 = $ReallocAsyncCtx4 + 176 | 0; //@line 4085
   HEAP32[$553 >> 2] = $88; //@line 4086
   $554 = $ReallocAsyncCtx4 + 180 | 0; //@line 4087
   HEAP32[$554 >> 2] = $90; //@line 4088
   $555 = $ReallocAsyncCtx4 + 184 | 0; //@line 4089
   HEAP32[$555 >> 2] = $92; //@line 4090
   $556 = $ReallocAsyncCtx4 + 188 | 0; //@line 4091
   HEAP32[$556 >> 2] = $94; //@line 4092
   $557 = $ReallocAsyncCtx4 + 192 | 0; //@line 4093
   HEAP32[$557 >> 2] = $96; //@line 4094
   $558 = $ReallocAsyncCtx4 + 196 | 0; //@line 4095
   HEAP32[$558 >> 2] = $98; //@line 4096
   $559 = $ReallocAsyncCtx4 + 200 | 0; //@line 4097
   HEAP32[$559 >> 2] = $100; //@line 4098
   $560 = $ReallocAsyncCtx4 + 204 | 0; //@line 4099
   HEAP32[$560 >> 2] = $102; //@line 4100
   $561 = $ReallocAsyncCtx4 + 208 | 0; //@line 4101
   HEAP32[$561 >> 2] = $104; //@line 4102
   $562 = $ReallocAsyncCtx4 + 212 | 0; //@line 4103
   HEAP32[$562 >> 2] = $106; //@line 4104
   $563 = $ReallocAsyncCtx4 + 216 | 0; //@line 4105
   HEAP32[$563 >> 2] = $108; //@line 4106
   $564 = $ReallocAsyncCtx4 + 220 | 0; //@line 4107
   HEAP32[$564 >> 2] = $110; //@line 4108
   $565 = $ReallocAsyncCtx4 + 224 | 0; //@line 4109
   HEAP32[$565 >> 2] = $112; //@line 4110
   $566 = $ReallocAsyncCtx4 + 228 | 0; //@line 4111
   HEAP32[$566 >> 2] = $114; //@line 4112
   $567 = $ReallocAsyncCtx4 + 232 | 0; //@line 4113
   HEAP32[$567 >> 2] = $116; //@line 4114
   $568 = $ReallocAsyncCtx4 + 236 | 0; //@line 4115
   HEAP32[$568 >> 2] = $118; //@line 4116
   $569 = $ReallocAsyncCtx4 + 240 | 0; //@line 4117
   HEAP32[$569 >> 2] = $120; //@line 4118
   $570 = $ReallocAsyncCtx4 + 244 | 0; //@line 4119
   HEAP32[$570 >> 2] = $122; //@line 4120
   $571 = $ReallocAsyncCtx4 + 248 | 0; //@line 4121
   HEAP32[$571 >> 2] = $124; //@line 4122
   $572 = $ReallocAsyncCtx4 + 252 | 0; //@line 4123
   HEAP32[$572 >> 2] = $126; //@line 4124
   $573 = $ReallocAsyncCtx4 + 256 | 0; //@line 4125
   HEAP32[$573 >> 2] = $128; //@line 4126
   $574 = $ReallocAsyncCtx4 + 260 | 0; //@line 4127
   HEAP32[$574 >> 2] = $130; //@line 4128
   $575 = $ReallocAsyncCtx4 + 264 | 0; //@line 4129
   HEAP32[$575 >> 2] = $$096$be; //@line 4130
   $576 = $ReallocAsyncCtx4 + 268 | 0; //@line 4131
   HEAP32[$576 >> 2] = $132; //@line 4132
   $577 = $ReallocAsyncCtx4 + 272 | 0; //@line 4133
   HEAP32[$577 >> 2] = $134; //@line 4134
   sp = STACKTOP; //@line 4135
   return;
  }
  HEAP8[___async_retval >> 0] = $509 & 1; //@line 4140
  ___async_unwind = 0; //@line 4141
  HEAP32[$ReallocAsyncCtx4 >> 2] = 493; //@line 4142
  $510 = $ReallocAsyncCtx4 + 4 | 0; //@line 4143
  HEAP32[$510 >> 2] = $2; //@line 4144
  $511 = $ReallocAsyncCtx4 + 8 | 0; //@line 4145
  HEAP32[$511 >> 2] = $4; //@line 4146
  $512 = $ReallocAsyncCtx4 + 12 | 0; //@line 4147
  HEAP8[$512 >> 0] = $6; //@line 4148
  $513 = $ReallocAsyncCtx4 + 16 | 0; //@line 4149
  HEAP32[$513 >> 2] = $8; //@line 4150
  $514 = $ReallocAsyncCtx4 + 20 | 0; //@line 4151
  HEAP32[$514 >> 2] = $10; //@line 4152
  $515 = $ReallocAsyncCtx4 + 24 | 0; //@line 4153
  HEAP32[$515 >> 2] = $12; //@line 4154
  $516 = $ReallocAsyncCtx4 + 28 | 0; //@line 4155
  HEAP32[$516 >> 2] = $14; //@line 4156
  $517 = $ReallocAsyncCtx4 + 32 | 0; //@line 4157
  HEAP32[$517 >> 2] = $16; //@line 4158
  $518 = $ReallocAsyncCtx4 + 36 | 0; //@line 4159
  HEAP32[$518 >> 2] = $18; //@line 4160
  $519 = $ReallocAsyncCtx4 + 40 | 0; //@line 4161
  HEAP32[$519 >> 2] = $20; //@line 4162
  $520 = $ReallocAsyncCtx4 + 44 | 0; //@line 4163
  HEAP32[$520 >> 2] = $22; //@line 4164
  $521 = $ReallocAsyncCtx4 + 48 | 0; //@line 4165
  HEAP32[$521 >> 2] = $24; //@line 4166
  $522 = $ReallocAsyncCtx4 + 52 | 0; //@line 4167
  HEAP32[$522 >> 2] = $26; //@line 4168
  $523 = $ReallocAsyncCtx4 + 56 | 0; //@line 4169
  HEAP32[$523 >> 2] = $28; //@line 4170
  $524 = $ReallocAsyncCtx4 + 60 | 0; //@line 4171
  HEAP8[$524 >> 0] = $30; //@line 4172
  $525 = $ReallocAsyncCtx4 + 64 | 0; //@line 4173
  HEAP32[$525 >> 2] = $32; //@line 4174
  $526 = $ReallocAsyncCtx4 + 68 | 0; //@line 4175
  HEAP8[$526 >> 0] = $34; //@line 4176
  $527 = $ReallocAsyncCtx4 + 72 | 0; //@line 4177
  HEAP32[$527 >> 2] = $36; //@line 4178
  $528 = $ReallocAsyncCtx4 + 76 | 0; //@line 4179
  HEAP32[$528 >> 2] = $38; //@line 4180
  $529 = $ReallocAsyncCtx4 + 80 | 0; //@line 4181
  HEAP32[$529 >> 2] = $40; //@line 4182
  $530 = $ReallocAsyncCtx4 + 84 | 0; //@line 4183
  HEAP32[$530 >> 2] = $42; //@line 4184
  $531 = $ReallocAsyncCtx4 + 88 | 0; //@line 4185
  HEAP32[$531 >> 2] = $44; //@line 4186
  $532 = $ReallocAsyncCtx4 + 92 | 0; //@line 4187
  HEAP32[$532 >> 2] = $46; //@line 4188
  $533 = $ReallocAsyncCtx4 + 96 | 0; //@line 4189
  HEAP32[$533 >> 2] = $48; //@line 4190
  $534 = $ReallocAsyncCtx4 + 100 | 0; //@line 4191
  HEAP32[$534 >> 2] = $50; //@line 4192
  $535 = $ReallocAsyncCtx4 + 104 | 0; //@line 4193
  HEAP32[$535 >> 2] = $52; //@line 4194
  $536 = $ReallocAsyncCtx4 + 108 | 0; //@line 4195
  HEAP32[$536 >> 2] = $54; //@line 4196
  $537 = $ReallocAsyncCtx4 + 112 | 0; //@line 4197
  HEAP32[$537 >> 2] = $58; //@line 4198
  $538 = $ReallocAsyncCtx4 + 116 | 0; //@line 4199
  HEAP32[$538 >> 2] = $60; //@line 4200
  $539 = $ReallocAsyncCtx4 + 120 | 0; //@line 4201
  HEAP32[$539 >> 2] = $62; //@line 4202
  $540 = $ReallocAsyncCtx4 + 124 | 0; //@line 4203
  HEAP32[$540 >> 2] = $64; //@line 4204
  $541 = $ReallocAsyncCtx4 + 128 | 0; //@line 4205
  HEAP32[$541 >> 2] = $66; //@line 4206
  $542 = $ReallocAsyncCtx4 + 132 | 0; //@line 4207
  HEAP32[$542 >> 2] = $68; //@line 4208
  $543 = $ReallocAsyncCtx4 + 136 | 0; //@line 4209
  HEAP32[$543 >> 2] = $70; //@line 4210
  $544 = $ReallocAsyncCtx4 + 140 | 0; //@line 4211
  HEAP8[$544 >> 0] = $495; //@line 4212
  $545 = $ReallocAsyncCtx4 + 144 | 0; //@line 4213
  HEAP32[$545 >> 2] = $72; //@line 4214
  $546 = $ReallocAsyncCtx4 + 148 | 0; //@line 4215
  HEAP32[$546 >> 2] = $74; //@line 4216
  $547 = $ReallocAsyncCtx4 + 152 | 0; //@line 4217
  HEAP32[$547 >> 2] = $76; //@line 4218
  $548 = $ReallocAsyncCtx4 + 156 | 0; //@line 4219
  HEAP32[$548 >> 2] = $78; //@line 4220
  $549 = $ReallocAsyncCtx4 + 160 | 0; //@line 4221
  HEAP32[$549 >> 2] = $80; //@line 4222
  $550 = $ReallocAsyncCtx4 + 164 | 0; //@line 4223
  HEAP32[$550 >> 2] = $82; //@line 4224
  $551 = $ReallocAsyncCtx4 + 168 | 0; //@line 4225
  HEAP32[$551 >> 2] = $84; //@line 4226
  $552 = $ReallocAsyncCtx4 + 172 | 0; //@line 4227
  HEAP32[$552 >> 2] = $86; //@line 4228
  $553 = $ReallocAsyncCtx4 + 176 | 0; //@line 4229
  HEAP32[$553 >> 2] = $88; //@line 4230
  $554 = $ReallocAsyncCtx4 + 180 | 0; //@line 4231
  HEAP32[$554 >> 2] = $90; //@line 4232
  $555 = $ReallocAsyncCtx4 + 184 | 0; //@line 4233
  HEAP32[$555 >> 2] = $92; //@line 4234
  $556 = $ReallocAsyncCtx4 + 188 | 0; //@line 4235
  HEAP32[$556 >> 2] = $94; //@line 4236
  $557 = $ReallocAsyncCtx4 + 192 | 0; //@line 4237
  HEAP32[$557 >> 2] = $96; //@line 4238
  $558 = $ReallocAsyncCtx4 + 196 | 0; //@line 4239
  HEAP32[$558 >> 2] = $98; //@line 4240
  $559 = $ReallocAsyncCtx4 + 200 | 0; //@line 4241
  HEAP32[$559 >> 2] = $100; //@line 4242
  $560 = $ReallocAsyncCtx4 + 204 | 0; //@line 4243
  HEAP32[$560 >> 2] = $102; //@line 4244
  $561 = $ReallocAsyncCtx4 + 208 | 0; //@line 4245
  HEAP32[$561 >> 2] = $104; //@line 4246
  $562 = $ReallocAsyncCtx4 + 212 | 0; //@line 4247
  HEAP32[$562 >> 2] = $106; //@line 4248
  $563 = $ReallocAsyncCtx4 + 216 | 0; //@line 4249
  HEAP32[$563 >> 2] = $108; //@line 4250
  $564 = $ReallocAsyncCtx4 + 220 | 0; //@line 4251
  HEAP32[$564 >> 2] = $110; //@line 4252
  $565 = $ReallocAsyncCtx4 + 224 | 0; //@line 4253
  HEAP32[$565 >> 2] = $112; //@line 4254
  $566 = $ReallocAsyncCtx4 + 228 | 0; //@line 4255
  HEAP32[$566 >> 2] = $114; //@line 4256
  $567 = $ReallocAsyncCtx4 + 232 | 0; //@line 4257
  HEAP32[$567 >> 2] = $116; //@line 4258
  $568 = $ReallocAsyncCtx4 + 236 | 0; //@line 4259
  HEAP32[$568 >> 2] = $118; //@line 4260
  $569 = $ReallocAsyncCtx4 + 240 | 0; //@line 4261
  HEAP32[$569 >> 2] = $120; //@line 4262
  $570 = $ReallocAsyncCtx4 + 244 | 0; //@line 4263
  HEAP32[$570 >> 2] = $122; //@line 4264
  $571 = $ReallocAsyncCtx4 + 248 | 0; //@line 4265
  HEAP32[$571 >> 2] = $124; //@line 4266
  $572 = $ReallocAsyncCtx4 + 252 | 0; //@line 4267
  HEAP32[$572 >> 2] = $126; //@line 4268
  $573 = $ReallocAsyncCtx4 + 256 | 0; //@line 4269
  HEAP32[$573 >> 2] = $128; //@line 4270
  $574 = $ReallocAsyncCtx4 + 260 | 0; //@line 4271
  HEAP32[$574 >> 2] = $130; //@line 4272
  $575 = $ReallocAsyncCtx4 + 264 | 0; //@line 4273
  HEAP32[$575 >> 2] = $$096$be; //@line 4274
  $576 = $ReallocAsyncCtx4 + 268 | 0; //@line 4275
  HEAP32[$576 >> 2] = $132; //@line 4276
  $577 = $ReallocAsyncCtx4 + 272 | 0; //@line 4277
  HEAP32[$577 >> 2] = $134; //@line 4278
  sp = STACKTOP; //@line 4279
  return;
 } else if ((label | 0) == 29) {
  HEAP8[$16 >> 0] = HEAP8[$36 + ($137 & 255) >> 0] | 0; //@line 4287
  $595 = $$0$be + 5 << 24 >> 24; //@line 4300
  HEAP32[$4 >> 2] = (HEAPU8[$36 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$36 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$36 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 4308
  $605 = HEAP32[(HEAP32[$32 >> 2] | 0) + 48 >> 2] | 0; //@line 4311
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(272) | 0; //@line 4312
  $606 = FUNCTION_TABLE_iii[$605 & 31]($20, $102) | 0; //@line 4313
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 494; //@line 4316
   $607 = $ReallocAsyncCtx5 + 4 | 0; //@line 4317
   HEAP32[$607 >> 2] = $2; //@line 4318
   $608 = $ReallocAsyncCtx5 + 8 | 0; //@line 4319
   HEAP32[$608 >> 2] = $4; //@line 4320
   $609 = $ReallocAsyncCtx5 + 12 | 0; //@line 4321
   HEAP8[$609 >> 0] = $6; //@line 4322
   $610 = $ReallocAsyncCtx5 + 16 | 0; //@line 4323
   HEAP32[$610 >> 2] = $8; //@line 4324
   $611 = $ReallocAsyncCtx5 + 20 | 0; //@line 4325
   HEAP32[$611 >> 2] = $10; //@line 4326
   $612 = $ReallocAsyncCtx5 + 24 | 0; //@line 4327
   HEAP32[$612 >> 2] = $12; //@line 4328
   $613 = $ReallocAsyncCtx5 + 28 | 0; //@line 4329
   HEAP32[$613 >> 2] = $14; //@line 4330
   $614 = $ReallocAsyncCtx5 + 32 | 0; //@line 4331
   HEAP32[$614 >> 2] = $16; //@line 4332
   $615 = $ReallocAsyncCtx5 + 36 | 0; //@line 4333
   HEAP32[$615 >> 2] = $18; //@line 4334
   $616 = $ReallocAsyncCtx5 + 40 | 0; //@line 4335
   HEAP32[$616 >> 2] = $20; //@line 4336
   $617 = $ReallocAsyncCtx5 + 44 | 0; //@line 4337
   HEAP32[$617 >> 2] = $22; //@line 4338
   $618 = $ReallocAsyncCtx5 + 48 | 0; //@line 4339
   HEAP32[$618 >> 2] = $24; //@line 4340
   $619 = $ReallocAsyncCtx5 + 52 | 0; //@line 4341
   HEAP32[$619 >> 2] = $26; //@line 4342
   $620 = $ReallocAsyncCtx5 + 56 | 0; //@line 4343
   HEAP32[$620 >> 2] = $28; //@line 4344
   $621 = $ReallocAsyncCtx5 + 60 | 0; //@line 4345
   HEAP8[$621 >> 0] = $30; //@line 4346
   $622 = $ReallocAsyncCtx5 + 64 | 0; //@line 4347
   HEAP32[$622 >> 2] = $32; //@line 4348
   $623 = $ReallocAsyncCtx5 + 68 | 0; //@line 4349
   HEAP8[$623 >> 0] = $34; //@line 4350
   $624 = $ReallocAsyncCtx5 + 72 | 0; //@line 4351
   HEAP32[$624 >> 2] = $36; //@line 4352
   $625 = $ReallocAsyncCtx5 + 76 | 0; //@line 4353
   HEAP32[$625 >> 2] = $38; //@line 4354
   $626 = $ReallocAsyncCtx5 + 80 | 0; //@line 4355
   HEAP32[$626 >> 2] = $40; //@line 4356
   $627 = $ReallocAsyncCtx5 + 84 | 0; //@line 4357
   HEAP32[$627 >> 2] = $42; //@line 4358
   $628 = $ReallocAsyncCtx5 + 88 | 0; //@line 4359
   HEAP32[$628 >> 2] = $44; //@line 4360
   $629 = $ReallocAsyncCtx5 + 92 | 0; //@line 4361
   HEAP32[$629 >> 2] = $46; //@line 4362
   $630 = $ReallocAsyncCtx5 + 96 | 0; //@line 4363
   HEAP32[$630 >> 2] = $48; //@line 4364
   $631 = $ReallocAsyncCtx5 + 100 | 0; //@line 4365
   HEAP32[$631 >> 2] = $50; //@line 4366
   $632 = $ReallocAsyncCtx5 + 104 | 0; //@line 4367
   HEAP32[$632 >> 2] = $52; //@line 4368
   $633 = $ReallocAsyncCtx5 + 108 | 0; //@line 4369
   HEAP32[$633 >> 2] = $54; //@line 4370
   $634 = $ReallocAsyncCtx5 + 112 | 0; //@line 4371
   HEAP32[$634 >> 2] = $58; //@line 4372
   $635 = $ReallocAsyncCtx5 + 116 | 0; //@line 4373
   HEAP32[$635 >> 2] = $60; //@line 4374
   $636 = $ReallocAsyncCtx5 + 120 | 0; //@line 4375
   HEAP32[$636 >> 2] = $62; //@line 4376
   $637 = $ReallocAsyncCtx5 + 124 | 0; //@line 4377
   HEAP32[$637 >> 2] = $64; //@line 4378
   $638 = $ReallocAsyncCtx5 + 128 | 0; //@line 4379
   HEAP32[$638 >> 2] = $66; //@line 4380
   $639 = $ReallocAsyncCtx5 + 132 | 0; //@line 4381
   HEAP32[$639 >> 2] = $68; //@line 4382
   $640 = $ReallocAsyncCtx5 + 136 | 0; //@line 4383
   HEAP32[$640 >> 2] = $70; //@line 4384
   $641 = $ReallocAsyncCtx5 + 140 | 0; //@line 4385
   HEAP32[$641 >> 2] = $72; //@line 4386
   $642 = $ReallocAsyncCtx5 + 144 | 0; //@line 4387
   HEAP32[$642 >> 2] = $74; //@line 4388
   $643 = $ReallocAsyncCtx5 + 148 | 0; //@line 4389
   HEAP32[$643 >> 2] = $76; //@line 4390
   $644 = $ReallocAsyncCtx5 + 152 | 0; //@line 4391
   HEAP32[$644 >> 2] = $78; //@line 4392
   $645 = $ReallocAsyncCtx5 + 156 | 0; //@line 4393
   HEAP32[$645 >> 2] = $80; //@line 4394
   $646 = $ReallocAsyncCtx5 + 160 | 0; //@line 4395
   HEAP32[$646 >> 2] = $82; //@line 4396
   $647 = $ReallocAsyncCtx5 + 164 | 0; //@line 4397
   HEAP32[$647 >> 2] = $84; //@line 4398
   $648 = $ReallocAsyncCtx5 + 168 | 0; //@line 4399
   HEAP32[$648 >> 2] = $86; //@line 4400
   $649 = $ReallocAsyncCtx5 + 172 | 0; //@line 4401
   HEAP32[$649 >> 2] = $88; //@line 4402
   $650 = $ReallocAsyncCtx5 + 176 | 0; //@line 4403
   HEAP32[$650 >> 2] = $90; //@line 4404
   $651 = $ReallocAsyncCtx5 + 180 | 0; //@line 4405
   HEAP32[$651 >> 2] = $92; //@line 4406
   $652 = $ReallocAsyncCtx5 + 184 | 0; //@line 4407
   HEAP32[$652 >> 2] = $94; //@line 4408
   $653 = $ReallocAsyncCtx5 + 188 | 0; //@line 4409
   HEAP32[$653 >> 2] = $96; //@line 4410
   $654 = $ReallocAsyncCtx5 + 192 | 0; //@line 4411
   HEAP32[$654 >> 2] = $98; //@line 4412
   $655 = $ReallocAsyncCtx5 + 196 | 0; //@line 4413
   HEAP32[$655 >> 2] = $100; //@line 4414
   $656 = $ReallocAsyncCtx5 + 200 | 0; //@line 4415
   HEAP32[$656 >> 2] = $102; //@line 4416
   $657 = $ReallocAsyncCtx5 + 204 | 0; //@line 4417
   HEAP8[$657 >> 0] = $595; //@line 4418
   $658 = $ReallocAsyncCtx5 + 208 | 0; //@line 4419
   HEAP32[$658 >> 2] = $104; //@line 4420
   $659 = $ReallocAsyncCtx5 + 212 | 0; //@line 4421
   HEAP32[$659 >> 2] = $106; //@line 4422
   $660 = $ReallocAsyncCtx5 + 216 | 0; //@line 4423
   HEAP32[$660 >> 2] = $108; //@line 4424
   $661 = $ReallocAsyncCtx5 + 220 | 0; //@line 4425
   HEAP32[$661 >> 2] = $110; //@line 4426
   $662 = $ReallocAsyncCtx5 + 224 | 0; //@line 4427
   HEAP32[$662 >> 2] = $112; //@line 4428
   $663 = $ReallocAsyncCtx5 + 228 | 0; //@line 4429
   HEAP32[$663 >> 2] = $114; //@line 4430
   $664 = $ReallocAsyncCtx5 + 232 | 0; //@line 4431
   HEAP32[$664 >> 2] = $116; //@line 4432
   $665 = $ReallocAsyncCtx5 + 236 | 0; //@line 4433
   HEAP32[$665 >> 2] = $118; //@line 4434
   $666 = $ReallocAsyncCtx5 + 240 | 0; //@line 4435
   HEAP32[$666 >> 2] = $120; //@line 4436
   $667 = $ReallocAsyncCtx5 + 244 | 0; //@line 4437
   HEAP32[$667 >> 2] = $122; //@line 4438
   $668 = $ReallocAsyncCtx5 + 248 | 0; //@line 4439
   HEAP32[$668 >> 2] = $124; //@line 4440
   $669 = $ReallocAsyncCtx5 + 252 | 0; //@line 4441
   HEAP32[$669 >> 2] = $126; //@line 4442
   $670 = $ReallocAsyncCtx5 + 256 | 0; //@line 4443
   HEAP32[$670 >> 2] = $128; //@line 4444
   $671 = $ReallocAsyncCtx5 + 260 | 0; //@line 4445
   HEAP32[$671 >> 2] = $130; //@line 4446
   $672 = $ReallocAsyncCtx5 + 264 | 0; //@line 4447
   HEAP32[$672 >> 2] = $132; //@line 4448
   $673 = $ReallocAsyncCtx5 + 268 | 0; //@line 4449
   HEAP32[$673 >> 2] = $134; //@line 4450
   sp = STACKTOP; //@line 4451
   return;
  }
  HEAP8[___async_retval >> 0] = $606; //@line 4455
  ___async_unwind = 0; //@line 4456
  HEAP32[$ReallocAsyncCtx5 >> 2] = 494; //@line 4457
  $607 = $ReallocAsyncCtx5 + 4 | 0; //@line 4458
  HEAP32[$607 >> 2] = $2; //@line 4459
  $608 = $ReallocAsyncCtx5 + 8 | 0; //@line 4460
  HEAP32[$608 >> 2] = $4; //@line 4461
  $609 = $ReallocAsyncCtx5 + 12 | 0; //@line 4462
  HEAP8[$609 >> 0] = $6; //@line 4463
  $610 = $ReallocAsyncCtx5 + 16 | 0; //@line 4464
  HEAP32[$610 >> 2] = $8; //@line 4465
  $611 = $ReallocAsyncCtx5 + 20 | 0; //@line 4466
  HEAP32[$611 >> 2] = $10; //@line 4467
  $612 = $ReallocAsyncCtx5 + 24 | 0; //@line 4468
  HEAP32[$612 >> 2] = $12; //@line 4469
  $613 = $ReallocAsyncCtx5 + 28 | 0; //@line 4470
  HEAP32[$613 >> 2] = $14; //@line 4471
  $614 = $ReallocAsyncCtx5 + 32 | 0; //@line 4472
  HEAP32[$614 >> 2] = $16; //@line 4473
  $615 = $ReallocAsyncCtx5 + 36 | 0; //@line 4474
  HEAP32[$615 >> 2] = $18; //@line 4475
  $616 = $ReallocAsyncCtx5 + 40 | 0; //@line 4476
  HEAP32[$616 >> 2] = $20; //@line 4477
  $617 = $ReallocAsyncCtx5 + 44 | 0; //@line 4478
  HEAP32[$617 >> 2] = $22; //@line 4479
  $618 = $ReallocAsyncCtx5 + 48 | 0; //@line 4480
  HEAP32[$618 >> 2] = $24; //@line 4481
  $619 = $ReallocAsyncCtx5 + 52 | 0; //@line 4482
  HEAP32[$619 >> 2] = $26; //@line 4483
  $620 = $ReallocAsyncCtx5 + 56 | 0; //@line 4484
  HEAP32[$620 >> 2] = $28; //@line 4485
  $621 = $ReallocAsyncCtx5 + 60 | 0; //@line 4486
  HEAP8[$621 >> 0] = $30; //@line 4487
  $622 = $ReallocAsyncCtx5 + 64 | 0; //@line 4488
  HEAP32[$622 >> 2] = $32; //@line 4489
  $623 = $ReallocAsyncCtx5 + 68 | 0; //@line 4490
  HEAP8[$623 >> 0] = $34; //@line 4491
  $624 = $ReallocAsyncCtx5 + 72 | 0; //@line 4492
  HEAP32[$624 >> 2] = $36; //@line 4493
  $625 = $ReallocAsyncCtx5 + 76 | 0; //@line 4494
  HEAP32[$625 >> 2] = $38; //@line 4495
  $626 = $ReallocAsyncCtx5 + 80 | 0; //@line 4496
  HEAP32[$626 >> 2] = $40; //@line 4497
  $627 = $ReallocAsyncCtx5 + 84 | 0; //@line 4498
  HEAP32[$627 >> 2] = $42; //@line 4499
  $628 = $ReallocAsyncCtx5 + 88 | 0; //@line 4500
  HEAP32[$628 >> 2] = $44; //@line 4501
  $629 = $ReallocAsyncCtx5 + 92 | 0; //@line 4502
  HEAP32[$629 >> 2] = $46; //@line 4503
  $630 = $ReallocAsyncCtx5 + 96 | 0; //@line 4504
  HEAP32[$630 >> 2] = $48; //@line 4505
  $631 = $ReallocAsyncCtx5 + 100 | 0; //@line 4506
  HEAP32[$631 >> 2] = $50; //@line 4507
  $632 = $ReallocAsyncCtx5 + 104 | 0; //@line 4508
  HEAP32[$632 >> 2] = $52; //@line 4509
  $633 = $ReallocAsyncCtx5 + 108 | 0; //@line 4510
  HEAP32[$633 >> 2] = $54; //@line 4511
  $634 = $ReallocAsyncCtx5 + 112 | 0; //@line 4512
  HEAP32[$634 >> 2] = $58; //@line 4513
  $635 = $ReallocAsyncCtx5 + 116 | 0; //@line 4514
  HEAP32[$635 >> 2] = $60; //@line 4515
  $636 = $ReallocAsyncCtx5 + 120 | 0; //@line 4516
  HEAP32[$636 >> 2] = $62; //@line 4517
  $637 = $ReallocAsyncCtx5 + 124 | 0; //@line 4518
  HEAP32[$637 >> 2] = $64; //@line 4519
  $638 = $ReallocAsyncCtx5 + 128 | 0; //@line 4520
  HEAP32[$638 >> 2] = $66; //@line 4521
  $639 = $ReallocAsyncCtx5 + 132 | 0; //@line 4522
  HEAP32[$639 >> 2] = $68; //@line 4523
  $640 = $ReallocAsyncCtx5 + 136 | 0; //@line 4524
  HEAP32[$640 >> 2] = $70; //@line 4525
  $641 = $ReallocAsyncCtx5 + 140 | 0; //@line 4526
  HEAP32[$641 >> 2] = $72; //@line 4527
  $642 = $ReallocAsyncCtx5 + 144 | 0; //@line 4528
  HEAP32[$642 >> 2] = $74; //@line 4529
  $643 = $ReallocAsyncCtx5 + 148 | 0; //@line 4530
  HEAP32[$643 >> 2] = $76; //@line 4531
  $644 = $ReallocAsyncCtx5 + 152 | 0; //@line 4532
  HEAP32[$644 >> 2] = $78; //@line 4533
  $645 = $ReallocAsyncCtx5 + 156 | 0; //@line 4534
  HEAP32[$645 >> 2] = $80; //@line 4535
  $646 = $ReallocAsyncCtx5 + 160 | 0; //@line 4536
  HEAP32[$646 >> 2] = $82; //@line 4537
  $647 = $ReallocAsyncCtx5 + 164 | 0; //@line 4538
  HEAP32[$647 >> 2] = $84; //@line 4539
  $648 = $ReallocAsyncCtx5 + 168 | 0; //@line 4540
  HEAP32[$648 >> 2] = $86; //@line 4541
  $649 = $ReallocAsyncCtx5 + 172 | 0; //@line 4542
  HEAP32[$649 >> 2] = $88; //@line 4543
  $650 = $ReallocAsyncCtx5 + 176 | 0; //@line 4544
  HEAP32[$650 >> 2] = $90; //@line 4545
  $651 = $ReallocAsyncCtx5 + 180 | 0; //@line 4546
  HEAP32[$651 >> 2] = $92; //@line 4547
  $652 = $ReallocAsyncCtx5 + 184 | 0; //@line 4548
  HEAP32[$652 >> 2] = $94; //@line 4549
  $653 = $ReallocAsyncCtx5 + 188 | 0; //@line 4550
  HEAP32[$653 >> 2] = $96; //@line 4551
  $654 = $ReallocAsyncCtx5 + 192 | 0; //@line 4552
  HEAP32[$654 >> 2] = $98; //@line 4553
  $655 = $ReallocAsyncCtx5 + 196 | 0; //@line 4554
  HEAP32[$655 >> 2] = $100; //@line 4555
  $656 = $ReallocAsyncCtx5 + 200 | 0; //@line 4556
  HEAP32[$656 >> 2] = $102; //@line 4557
  $657 = $ReallocAsyncCtx5 + 204 | 0; //@line 4558
  HEAP8[$657 >> 0] = $595; //@line 4559
  $658 = $ReallocAsyncCtx5 + 208 | 0; //@line 4560
  HEAP32[$658 >> 2] = $104; //@line 4561
  $659 = $ReallocAsyncCtx5 + 212 | 0; //@line 4562
  HEAP32[$659 >> 2] = $106; //@line 4563
  $660 = $ReallocAsyncCtx5 + 216 | 0; //@line 4564
  HEAP32[$660 >> 2] = $108; //@line 4565
  $661 = $ReallocAsyncCtx5 + 220 | 0; //@line 4566
  HEAP32[$661 >> 2] = $110; //@line 4567
  $662 = $ReallocAsyncCtx5 + 224 | 0; //@line 4568
  HEAP32[$662 >> 2] = $112; //@line 4569
  $663 = $ReallocAsyncCtx5 + 228 | 0; //@line 4570
  HEAP32[$663 >> 2] = $114; //@line 4571
  $664 = $ReallocAsyncCtx5 + 232 | 0; //@line 4572
  HEAP32[$664 >> 2] = $116; //@line 4573
  $665 = $ReallocAsyncCtx5 + 236 | 0; //@line 4574
  HEAP32[$665 >> 2] = $118; //@line 4575
  $666 = $ReallocAsyncCtx5 + 240 | 0; //@line 4576
  HEAP32[$666 >> 2] = $120; //@line 4577
  $667 = $ReallocAsyncCtx5 + 244 | 0; //@line 4578
  HEAP32[$667 >> 2] = $122; //@line 4579
  $668 = $ReallocAsyncCtx5 + 248 | 0; //@line 4580
  HEAP32[$668 >> 2] = $124; //@line 4581
  $669 = $ReallocAsyncCtx5 + 252 | 0; //@line 4582
  HEAP32[$669 >> 2] = $126; //@line 4583
  $670 = $ReallocAsyncCtx5 + 256 | 0; //@line 4584
  HEAP32[$670 >> 2] = $128; //@line 4585
  $671 = $ReallocAsyncCtx5 + 260 | 0; //@line 4586
  HEAP32[$671 >> 2] = $130; //@line 4587
  $672 = $ReallocAsyncCtx5 + 264 | 0; //@line 4588
  HEAP32[$672 >> 2] = $132; //@line 4589
  $673 = $ReallocAsyncCtx5 + 268 | 0; //@line 4590
  HEAP32[$673 >> 2] = $134; //@line 4591
  sp = STACKTOP; //@line 4592
  return;
 } else if ((label | 0) == 33) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 4597
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_182($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$096$be = 0, $$2 = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $136 = 0, $139 = 0, $14 = 0, $150 = 0, $151 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $233 = 0, $236 = 0, $24 = 0, $241 = 0, $249 = 0, $26 = 0, $268 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $349 = 0, $350 = 0, $36 = 0, $38 = 0, $387 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $463 = 0, $467 = 0, $471 = 0, $474 = 0, $48 = 0, $480 = 0, $483 = 0, $484 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $572 = 0, $58 = 0, $594 = 0, $6 = 0, $60 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6562
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6564
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6566
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 6568
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6570
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6572
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6574
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6576
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6578
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 6580
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 6582
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 6584
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 6586
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 6588
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 6590
 $30 = HEAP8[$0 + 60 >> 0] | 0; //@line 6592
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 6594
 $34 = HEAP8[$0 + 68 >> 0] | 0; //@line 6596
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 6598
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 6600
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 6602
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 6604
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 6606
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 6608
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 6610
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 6612
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 6614
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 6616
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 6618
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 6620
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 6622
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 6624
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 6626
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 6628
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 6630
 $70 = HEAP8[$0 + 140 >> 0] | 0; //@line 6632
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 6634
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 6636
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 6638
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 6640
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 6642
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 6644
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 6646
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 6648
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 6650
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 6652
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 6654
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 6656
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 6658
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 6660
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 6662
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 6664
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 6666
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 6668
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 6670
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 6672
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 6674
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 6676
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 6678
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 6680
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 6682
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 6684
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 6686
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 6688
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 6690
 $130 = HEAP32[$0 + 260 >> 2] | 0; //@line 6692
 $132 = HEAP32[$0 + 264 >> 2] | 0; //@line 6694
 $134 = HEAP32[$0 + 268 >> 2] | 0; //@line 6696
 $136 = HEAP32[$0 + 272 >> 2] | 0; //@line 6698
 if (HEAP8[___async_retval >> 0] & 1) {
  HEAP8[$82 >> 0] = HEAP8[$100 >> 0] | 0; //@line 6704
  HEAP8[$64 >> 0] = HEAP8[$90 >> 0] | 0; //@line 6706
  HEAPF32[$58 >> 2] = +(HEAPU8[14201 + (HEAPU8[$52 >> 0] | 0) >> 0] | 0); //@line 6712
  $572 = HEAP8[$42 >> 0] | 0; //@line 6714
  if (($572 & 255) < (-128 - (HEAP8[$14 >> 0] | 0) & 255)) {
   HEAP8[$42 >> 0] = $572 + 1 << 24 >> 24; //@line 6721
   HEAP8[($572 & 255) + ($24 + 4) >> 0] = 9; //@line 6722
   HEAP8[$118 >> 0] = 1; //@line 6723
   $$2 = 0; //@line 6724
  } else {
   $$2 = -1e3; //@line 6726
  }
 } else {
  $$2 = $132; //@line 6729
 }
 $$0$be = $70; //@line 6731
 $$096$be = $$2; //@line 6731
 L6 : while (1) {
  if (($$0$be & 255) >= ($34 & 255)) {
   label = 32; //@line 6735
   break;
  }
  $139 = $$0$be + 1 << 24 >> 24; //@line 6739
  switch (HEAP8[$36 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 6744
    break L6;
    break;
   }
  case 5:
   {
    label = 9; //@line 6749
    break L6;
    break;
   }
  case 7:
   {
    label = 14; //@line 6754
    break L6;
    break;
   }
  case 9:
   {
    label = 19; //@line 6759
    break L6;
    break;
   }
  case 10:
   {
    label = 28; //@line 6764
    break L6;
    break;
   }
  case 2:
   {
    HEAP32[$66 >> 2] = 0; //@line 6769
    HEAP8[$12 >> 0] = HEAP8[$36 + ($139 & 255) >> 0] | 0; //@line 6774
    HEAP8[$26 >> 0] = HEAP8[$36 + ($$0$be + 2 & 255) >> 0] | 0; //@line 6779
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 6780
    continue L6;
    break;
   }
  case 4:
   {
    $233 = $$0$be + 2 << 24 >> 24; //@line 6785
    $236 = HEAP8[$36 + ($139 & 255) >> 0] | 0; //@line 6788
    HEAP8[$110 >> 0] = $236; //@line 6789
    HEAP16[$134 >> 1] = 1 << ($236 & 255); //@line 6793
    $241 = HEAP8[$42 >> 0] | 0; //@line 6795
    if (($241 & 255) >= (-128 - (HEAP8[$14 >> 0] | 0) & 255)) {
     $$0$be = $233; //@line 6799
     $$096$be = -1e3; //@line 6799
     continue L6;
    }
    HEAP8[$42 >> 0] = $241 + 1 << 24 >> 24; //@line 6805
    HEAP8[($241 & 255) + ($24 + 4) >> 0] = 4; //@line 6806
    HEAP8[$118 >> 0] = 1; //@line 6807
    $$0$be = $233; //@line 6808
    $$096$be = 0; //@line 6808
    continue L6;
    break;
   }
  case 6:
   {
    $349 = HEAP8[$42 >> 0] | 0; //@line 6814
    $350 = $349 & 255; //@line 6815
    if (((-128 - (HEAP8[$14 >> 0] | 0) & 255) + -2 | 0) <= ($350 | 0)) {
     $$0$be = $139; //@line 6821
     $$096$be = -1e3; //@line 6821
     continue L6;
    }
    HEAP8[$24 + 4 + $350 >> 0] = 6; //@line 6826
    HEAP8[($349 + 1 & 255) + ($24 + 4) >> 0] = -1; //@line 6830
    HEAP8[$42 >> 0] = $349 + 3 << 24 >> 24; //@line 6832
    HEAP8[($349 + 2 & 255) + ($24 + 4) >> 0] = $6; //@line 6835
    HEAP8[$118 >> 0] = 1; //@line 6836
    $$0$be = $139; //@line 6837
    $$096$be = 0; //@line 6837
    continue L6;
    break;
   }
  case 8:
   {
    $463 = $$0$be + 2 << 24 >> 24; //@line 6842
    $467 = HEAP8[$36 + ($139 & 255) >> 0] & 15; //@line 6846
    $471 = ($467 + ($467 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 6851
    HEAP32[$88 >> 2] = $471; //@line 6852
    HEAP32[$76 >> 2] = $471 + 1e3; //@line 6854
    $474 = HEAP8[$42 >> 0] | 0; //@line 6856
    if (($474 & 255) >= (-128 - (HEAP8[$14 >> 0] | 0) & 255)) {
     $$0$be = $463; //@line 6860
     $$096$be = -1e3; //@line 6860
     continue L6;
    }
    HEAP8[$42 >> 0] = $474 + 1 << 24 >> 24; //@line 6866
    HEAP8[($474 & 255) + ($24 + 4) >> 0] = 8; //@line 6867
    HEAP8[$56 >> 0] = 1; //@line 6868
    HEAP8[$118 >> 0] = 1; //@line 6869
    $$0$be = $463; //@line 6870
    $$096$be = 0; //@line 6870
    continue L6;
    break;
   }
  default:
   {
    $$0$be = $139; //@line 6875
    $$096$be = -1013; //@line 6875
    continue L6;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$122 >> 0] = 0; //@line 6881
  HEAP8[$94 >> 0] = 0; //@line 6882
  HEAP8[$80 >> 0] = 0; //@line 6883
  HEAP8[$72 >> 0] = 0; //@line 6884
  $150 = $139 & 255; //@line 6885
  $151 = $150 + -1 | 0; //@line 6886
  HEAP32[$40 >> 2] = $36 + $151; //@line 6888
  HEAP8[$112 >> 0] = $46 - $151; //@line 6891
  HEAP8[$136 >> 0] = HEAP8[$126 >> 0] | 0; //@line 6893
  HEAP8[$86 >> 0] = HEAP8[$82 >> 0] | 0; //@line 6895
  HEAP8[$98 >> 0] = HEAP8[$92 >> 0] | 0; //@line 6897
  HEAP8[$54 >> 0] = HEAP8[$44 >> 0] | 0; //@line 6899
  HEAP8[$10 >> 0] = HEAP8[$68 >> 0] | 0; //@line 6901
  $162 = HEAP32[(HEAP32[$2 >> 2] | 0) + 36 >> 2] | 0; //@line 6904
  $ReallocAsyncCtx = _emscripten_realloc_async_context(276) | 0; //@line 6905
  $163 = FUNCTION_TABLE_iiiiiii[$162 & 3]($20, $116, $122, $94, $80, $72) | 0; //@line 6906
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 490; //@line 6909
   $164 = $ReallocAsyncCtx + 4 | 0; //@line 6910
   HEAP32[$164 >> 2] = $2; //@line 6911
   $165 = $ReallocAsyncCtx + 8 | 0; //@line 6912
   HEAP32[$165 >> 2] = $4; //@line 6913
   $166 = $ReallocAsyncCtx + 12 | 0; //@line 6914
   HEAP8[$166 >> 0] = $6; //@line 6915
   $167 = $ReallocAsyncCtx + 16 | 0; //@line 6916
   HEAP32[$167 >> 2] = $8; //@line 6917
   $168 = $ReallocAsyncCtx + 20 | 0; //@line 6918
   HEAP32[$168 >> 2] = $10; //@line 6919
   $169 = $ReallocAsyncCtx + 24 | 0; //@line 6920
   HEAP32[$169 >> 2] = $12; //@line 6921
   $170 = $ReallocAsyncCtx + 28 | 0; //@line 6922
   HEAP32[$170 >> 2] = $14; //@line 6923
   $171 = $ReallocAsyncCtx + 32 | 0; //@line 6924
   HEAP32[$171 >> 2] = $16; //@line 6925
   $172 = $ReallocAsyncCtx + 36 | 0; //@line 6926
   HEAP32[$172 >> 2] = $18; //@line 6927
   $173 = $ReallocAsyncCtx + 40 | 0; //@line 6928
   HEAP32[$173 >> 2] = $20; //@line 6929
   $174 = $ReallocAsyncCtx + 44 | 0; //@line 6930
   HEAP32[$174 >> 2] = $22; //@line 6931
   $175 = $ReallocAsyncCtx + 48 | 0; //@line 6932
   HEAP32[$175 >> 2] = $24; //@line 6933
   $176 = $ReallocAsyncCtx + 52 | 0; //@line 6934
   HEAP32[$176 >> 2] = $26; //@line 6935
   $177 = $ReallocAsyncCtx + 56 | 0; //@line 6936
   HEAP32[$177 >> 2] = $28; //@line 6937
   $178 = $ReallocAsyncCtx + 60 | 0; //@line 6938
   HEAP8[$178 >> 0] = $30; //@line 6939
   $179 = $ReallocAsyncCtx + 64 | 0; //@line 6940
   HEAP32[$179 >> 2] = $32; //@line 6941
   $180 = $ReallocAsyncCtx + 68 | 0; //@line 6942
   HEAP8[$180 >> 0] = $34; //@line 6943
   $181 = $ReallocAsyncCtx + 72 | 0; //@line 6944
   HEAP32[$181 >> 2] = $36; //@line 6945
   $182 = $ReallocAsyncCtx + 76 | 0; //@line 6946
   HEAP32[$182 >> 2] = $38; //@line 6947
   $183 = $ReallocAsyncCtx + 80 | 0; //@line 6948
   HEAP32[$183 >> 2] = $40; //@line 6949
   $184 = $ReallocAsyncCtx + 84 | 0; //@line 6950
   HEAP32[$184 >> 2] = $42; //@line 6951
   $185 = $ReallocAsyncCtx + 88 | 0; //@line 6952
   HEAP32[$185 >> 2] = $44; //@line 6953
   $186 = $ReallocAsyncCtx + 92 | 0; //@line 6954
   HEAP32[$186 >> 2] = $46; //@line 6955
   $187 = $ReallocAsyncCtx + 96 | 0; //@line 6956
   HEAP32[$187 >> 2] = $48; //@line 6957
   $188 = $ReallocAsyncCtx + 100 | 0; //@line 6958
   HEAP32[$188 >> 2] = $50; //@line 6959
   $189 = $ReallocAsyncCtx + 104 | 0; //@line 6960
   HEAP32[$189 >> 2] = $52; //@line 6961
   $190 = $ReallocAsyncCtx + 108 | 0; //@line 6962
   HEAP32[$190 >> 2] = $54; //@line 6963
   $191 = $ReallocAsyncCtx + 112 | 0; //@line 6964
   HEAP32[$191 >> 2] = $56; //@line 6965
   $192 = $ReallocAsyncCtx + 116 | 0; //@line 6966
   HEAP32[$192 >> 2] = $58; //@line 6967
   $193 = $ReallocAsyncCtx + 120 | 0; //@line 6968
   HEAP32[$193 >> 2] = $60; //@line 6969
   $194 = $ReallocAsyncCtx + 124 | 0; //@line 6970
   HEAP32[$194 >> 2] = $62; //@line 6971
   $195 = $ReallocAsyncCtx + 128 | 0; //@line 6972
   HEAP32[$195 >> 2] = $64; //@line 6973
   $196 = $ReallocAsyncCtx + 132 | 0; //@line 6974
   HEAP32[$196 >> 2] = $66; //@line 6975
   $197 = $ReallocAsyncCtx + 136 | 0; //@line 6976
   HEAP32[$197 >> 2] = $68; //@line 6977
   $198 = $ReallocAsyncCtx + 140 | 0; //@line 6978
   HEAP32[$198 >> 2] = $72; //@line 6979
   $199 = $ReallocAsyncCtx + 144 | 0; //@line 6980
   HEAP32[$199 >> 2] = $74; //@line 6981
   $200 = $ReallocAsyncCtx + 148 | 0; //@line 6982
   HEAP32[$200 >> 2] = $76; //@line 6983
   $201 = $ReallocAsyncCtx + 152 | 0; //@line 6984
   HEAP32[$201 >> 2] = $78; //@line 6985
   $202 = $ReallocAsyncCtx + 156 | 0; //@line 6986
   HEAP32[$202 >> 2] = $80; //@line 6987
   $203 = $ReallocAsyncCtx + 160 | 0; //@line 6988
   HEAP32[$203 >> 2] = $150; //@line 6989
   $204 = $ReallocAsyncCtx + 164 | 0; //@line 6990
   HEAP32[$204 >> 2] = $82; //@line 6991
   $205 = $ReallocAsyncCtx + 168 | 0; //@line 6992
   HEAP32[$205 >> 2] = $84; //@line 6993
   $206 = $ReallocAsyncCtx + 172 | 0; //@line 6994
   HEAP32[$206 >> 2] = $86; //@line 6995
   $207 = $ReallocAsyncCtx + 176 | 0; //@line 6996
   HEAP32[$207 >> 2] = $88; //@line 6997
   $208 = $ReallocAsyncCtx + 180 | 0; //@line 6998
   HEAP32[$208 >> 2] = $90; //@line 6999
   $209 = $ReallocAsyncCtx + 184 | 0; //@line 7000
   HEAP32[$209 >> 2] = $92; //@line 7001
   $210 = $ReallocAsyncCtx + 188 | 0; //@line 7002
   HEAP32[$210 >> 2] = $94; //@line 7003
   $211 = $ReallocAsyncCtx + 192 | 0; //@line 7004
   HEAP32[$211 >> 2] = $96; //@line 7005
   $212 = $ReallocAsyncCtx + 196 | 0; //@line 7006
   HEAP32[$212 >> 2] = $98; //@line 7007
   $213 = $ReallocAsyncCtx + 200 | 0; //@line 7008
   HEAP32[$213 >> 2] = $100; //@line 7009
   $214 = $ReallocAsyncCtx + 204 | 0; //@line 7010
   HEAP32[$214 >> 2] = $102; //@line 7011
   $215 = $ReallocAsyncCtx + 208 | 0; //@line 7012
   HEAP32[$215 >> 2] = $104; //@line 7013
   $216 = $ReallocAsyncCtx + 212 | 0; //@line 7014
   HEAP32[$216 >> 2] = $106; //@line 7015
   $217 = $ReallocAsyncCtx + 216 | 0; //@line 7016
   HEAP32[$217 >> 2] = $108; //@line 7017
   $218 = $ReallocAsyncCtx + 220 | 0; //@line 7018
   HEAP32[$218 >> 2] = $110; //@line 7019
   $219 = $ReallocAsyncCtx + 224 | 0; //@line 7020
   HEAP32[$219 >> 2] = $112; //@line 7021
   $220 = $ReallocAsyncCtx + 228 | 0; //@line 7022
   HEAP32[$220 >> 2] = $114; //@line 7023
   $221 = $ReallocAsyncCtx + 232 | 0; //@line 7024
   HEAP32[$221 >> 2] = $116; //@line 7025
   $222 = $ReallocAsyncCtx + 236 | 0; //@line 7026
   HEAP32[$222 >> 2] = $118; //@line 7027
   $223 = $ReallocAsyncCtx + 240 | 0; //@line 7028
   HEAP32[$223 >> 2] = $120; //@line 7029
   $224 = $ReallocAsyncCtx + 244 | 0; //@line 7030
   HEAP32[$224 >> 2] = $122; //@line 7031
   $225 = $ReallocAsyncCtx + 248 | 0; //@line 7032
   HEAP32[$225 >> 2] = $124; //@line 7033
   $226 = $ReallocAsyncCtx + 252 | 0; //@line 7034
   HEAP32[$226 >> 2] = $126; //@line 7035
   $227 = $ReallocAsyncCtx + 256 | 0; //@line 7036
   HEAP32[$227 >> 2] = $128; //@line 7037
   $228 = $ReallocAsyncCtx + 260 | 0; //@line 7038
   HEAP32[$228 >> 2] = $130; //@line 7039
   $229 = $ReallocAsyncCtx + 264 | 0; //@line 7040
   HEAP32[$229 >> 2] = $$096$be; //@line 7041
   $230 = $ReallocAsyncCtx + 268 | 0; //@line 7042
   HEAP32[$230 >> 2] = $134; //@line 7043
   $231 = $ReallocAsyncCtx + 272 | 0; //@line 7044
   HEAP32[$231 >> 2] = $136; //@line 7045
   sp = STACKTOP; //@line 7046
   return;
  }
  HEAP8[___async_retval >> 0] = $163; //@line 7050
  ___async_unwind = 0; //@line 7051
  HEAP32[$ReallocAsyncCtx >> 2] = 490; //@line 7052
  $164 = $ReallocAsyncCtx + 4 | 0; //@line 7053
  HEAP32[$164 >> 2] = $2; //@line 7054
  $165 = $ReallocAsyncCtx + 8 | 0; //@line 7055
  HEAP32[$165 >> 2] = $4; //@line 7056
  $166 = $ReallocAsyncCtx + 12 | 0; //@line 7057
  HEAP8[$166 >> 0] = $6; //@line 7058
  $167 = $ReallocAsyncCtx + 16 | 0; //@line 7059
  HEAP32[$167 >> 2] = $8; //@line 7060
  $168 = $ReallocAsyncCtx + 20 | 0; //@line 7061
  HEAP32[$168 >> 2] = $10; //@line 7062
  $169 = $ReallocAsyncCtx + 24 | 0; //@line 7063
  HEAP32[$169 >> 2] = $12; //@line 7064
  $170 = $ReallocAsyncCtx + 28 | 0; //@line 7065
  HEAP32[$170 >> 2] = $14; //@line 7066
  $171 = $ReallocAsyncCtx + 32 | 0; //@line 7067
  HEAP32[$171 >> 2] = $16; //@line 7068
  $172 = $ReallocAsyncCtx + 36 | 0; //@line 7069
  HEAP32[$172 >> 2] = $18; //@line 7070
  $173 = $ReallocAsyncCtx + 40 | 0; //@line 7071
  HEAP32[$173 >> 2] = $20; //@line 7072
  $174 = $ReallocAsyncCtx + 44 | 0; //@line 7073
  HEAP32[$174 >> 2] = $22; //@line 7074
  $175 = $ReallocAsyncCtx + 48 | 0; //@line 7075
  HEAP32[$175 >> 2] = $24; //@line 7076
  $176 = $ReallocAsyncCtx + 52 | 0; //@line 7077
  HEAP32[$176 >> 2] = $26; //@line 7078
  $177 = $ReallocAsyncCtx + 56 | 0; //@line 7079
  HEAP32[$177 >> 2] = $28; //@line 7080
  $178 = $ReallocAsyncCtx + 60 | 0; //@line 7081
  HEAP8[$178 >> 0] = $30; //@line 7082
  $179 = $ReallocAsyncCtx + 64 | 0; //@line 7083
  HEAP32[$179 >> 2] = $32; //@line 7084
  $180 = $ReallocAsyncCtx + 68 | 0; //@line 7085
  HEAP8[$180 >> 0] = $34; //@line 7086
  $181 = $ReallocAsyncCtx + 72 | 0; //@line 7087
  HEAP32[$181 >> 2] = $36; //@line 7088
  $182 = $ReallocAsyncCtx + 76 | 0; //@line 7089
  HEAP32[$182 >> 2] = $38; //@line 7090
  $183 = $ReallocAsyncCtx + 80 | 0; //@line 7091
  HEAP32[$183 >> 2] = $40; //@line 7092
  $184 = $ReallocAsyncCtx + 84 | 0; //@line 7093
  HEAP32[$184 >> 2] = $42; //@line 7094
  $185 = $ReallocAsyncCtx + 88 | 0; //@line 7095
  HEAP32[$185 >> 2] = $44; //@line 7096
  $186 = $ReallocAsyncCtx + 92 | 0; //@line 7097
  HEAP32[$186 >> 2] = $46; //@line 7098
  $187 = $ReallocAsyncCtx + 96 | 0; //@line 7099
  HEAP32[$187 >> 2] = $48; //@line 7100
  $188 = $ReallocAsyncCtx + 100 | 0; //@line 7101
  HEAP32[$188 >> 2] = $50; //@line 7102
  $189 = $ReallocAsyncCtx + 104 | 0; //@line 7103
  HEAP32[$189 >> 2] = $52; //@line 7104
  $190 = $ReallocAsyncCtx + 108 | 0; //@line 7105
  HEAP32[$190 >> 2] = $54; //@line 7106
  $191 = $ReallocAsyncCtx + 112 | 0; //@line 7107
  HEAP32[$191 >> 2] = $56; //@line 7108
  $192 = $ReallocAsyncCtx + 116 | 0; //@line 7109
  HEAP32[$192 >> 2] = $58; //@line 7110
  $193 = $ReallocAsyncCtx + 120 | 0; //@line 7111
  HEAP32[$193 >> 2] = $60; //@line 7112
  $194 = $ReallocAsyncCtx + 124 | 0; //@line 7113
  HEAP32[$194 >> 2] = $62; //@line 7114
  $195 = $ReallocAsyncCtx + 128 | 0; //@line 7115
  HEAP32[$195 >> 2] = $64; //@line 7116
  $196 = $ReallocAsyncCtx + 132 | 0; //@line 7117
  HEAP32[$196 >> 2] = $66; //@line 7118
  $197 = $ReallocAsyncCtx + 136 | 0; //@line 7119
  HEAP32[$197 >> 2] = $68; //@line 7120
  $198 = $ReallocAsyncCtx + 140 | 0; //@line 7121
  HEAP32[$198 >> 2] = $72; //@line 7122
  $199 = $ReallocAsyncCtx + 144 | 0; //@line 7123
  HEAP32[$199 >> 2] = $74; //@line 7124
  $200 = $ReallocAsyncCtx + 148 | 0; //@line 7125
  HEAP32[$200 >> 2] = $76; //@line 7126
  $201 = $ReallocAsyncCtx + 152 | 0; //@line 7127
  HEAP32[$201 >> 2] = $78; //@line 7128
  $202 = $ReallocAsyncCtx + 156 | 0; //@line 7129
  HEAP32[$202 >> 2] = $80; //@line 7130
  $203 = $ReallocAsyncCtx + 160 | 0; //@line 7131
  HEAP32[$203 >> 2] = $150; //@line 7132
  $204 = $ReallocAsyncCtx + 164 | 0; //@line 7133
  HEAP32[$204 >> 2] = $82; //@line 7134
  $205 = $ReallocAsyncCtx + 168 | 0; //@line 7135
  HEAP32[$205 >> 2] = $84; //@line 7136
  $206 = $ReallocAsyncCtx + 172 | 0; //@line 7137
  HEAP32[$206 >> 2] = $86; //@line 7138
  $207 = $ReallocAsyncCtx + 176 | 0; //@line 7139
  HEAP32[$207 >> 2] = $88; //@line 7140
  $208 = $ReallocAsyncCtx + 180 | 0; //@line 7141
  HEAP32[$208 >> 2] = $90; //@line 7142
  $209 = $ReallocAsyncCtx + 184 | 0; //@line 7143
  HEAP32[$209 >> 2] = $92; //@line 7144
  $210 = $ReallocAsyncCtx + 188 | 0; //@line 7145
  HEAP32[$210 >> 2] = $94; //@line 7146
  $211 = $ReallocAsyncCtx + 192 | 0; //@line 7147
  HEAP32[$211 >> 2] = $96; //@line 7148
  $212 = $ReallocAsyncCtx + 196 | 0; //@line 7149
  HEAP32[$212 >> 2] = $98; //@line 7150
  $213 = $ReallocAsyncCtx + 200 | 0; //@line 7151
  HEAP32[$213 >> 2] = $100; //@line 7152
  $214 = $ReallocAsyncCtx + 204 | 0; //@line 7153
  HEAP32[$214 >> 2] = $102; //@line 7154
  $215 = $ReallocAsyncCtx + 208 | 0; //@line 7155
  HEAP32[$215 >> 2] = $104; //@line 7156
  $216 = $ReallocAsyncCtx + 212 | 0; //@line 7157
  HEAP32[$216 >> 2] = $106; //@line 7158
  $217 = $ReallocAsyncCtx + 216 | 0; //@line 7159
  HEAP32[$217 >> 2] = $108; //@line 7160
  $218 = $ReallocAsyncCtx + 220 | 0; //@line 7161
  HEAP32[$218 >> 2] = $110; //@line 7162
  $219 = $ReallocAsyncCtx + 224 | 0; //@line 7163
  HEAP32[$219 >> 2] = $112; //@line 7164
  $220 = $ReallocAsyncCtx + 228 | 0; //@line 7165
  HEAP32[$220 >> 2] = $114; //@line 7166
  $221 = $ReallocAsyncCtx + 232 | 0; //@line 7167
  HEAP32[$221 >> 2] = $116; //@line 7168
  $222 = $ReallocAsyncCtx + 236 | 0; //@line 7169
  HEAP32[$222 >> 2] = $118; //@line 7170
  $223 = $ReallocAsyncCtx + 240 | 0; //@line 7171
  HEAP32[$223 >> 2] = $120; //@line 7172
  $224 = $ReallocAsyncCtx + 244 | 0; //@line 7173
  HEAP32[$224 >> 2] = $122; //@line 7174
  $225 = $ReallocAsyncCtx + 248 | 0; //@line 7175
  HEAP32[$225 >> 2] = $124; //@line 7176
  $226 = $ReallocAsyncCtx + 252 | 0; //@line 7177
  HEAP32[$226 >> 2] = $126; //@line 7178
  $227 = $ReallocAsyncCtx + 256 | 0; //@line 7179
  HEAP32[$227 >> 2] = $128; //@line 7180
  $228 = $ReallocAsyncCtx + 260 | 0; //@line 7181
  HEAP32[$228 >> 2] = $130; //@line 7182
  $229 = $ReallocAsyncCtx + 264 | 0; //@line 7183
  HEAP32[$229 >> 2] = $$096$be; //@line 7184
  $230 = $ReallocAsyncCtx + 268 | 0; //@line 7185
  HEAP32[$230 >> 2] = $134; //@line 7186
  $231 = $ReallocAsyncCtx + 272 | 0; //@line 7187
  HEAP32[$231 >> 2] = $136; //@line 7188
  sp = STACKTOP; //@line 7189
  return;
 } else if ((label | 0) == 9) {
  $249 = HEAP8[$36 + ($139 & 255) >> 0] | 0; //@line 7195
  HEAP8[$84 >> 0] = ($249 & 255) >>> 4 & 7; //@line 7200
  HEAP8[$124 >> 0] = $249 & 15; //@line 7202
  $268 = $$0$be + 5 << 24 >> 24; //@line 7216
  HEAP32[$78 >> 2] = (HEAPU8[$36 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$36 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$36 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 7224
  $278 = HEAP32[(HEAP32[$106 >> 2] | 0) + 40 >> 2] | 0; //@line 7227
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(272) | 0; //@line 7228
  $279 = FUNCTION_TABLE_iii[$278 & 31]($20, $74) | 0; //@line 7229
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 491; //@line 7232
   $280 = $ReallocAsyncCtx2 + 4 | 0; //@line 7233
   HEAP32[$280 >> 2] = $2; //@line 7234
   $281 = $ReallocAsyncCtx2 + 8 | 0; //@line 7235
   HEAP32[$281 >> 2] = $4; //@line 7236
   $282 = $ReallocAsyncCtx2 + 12 | 0; //@line 7237
   HEAP8[$282 >> 0] = $6; //@line 7238
   $283 = $ReallocAsyncCtx2 + 16 | 0; //@line 7239
   HEAP32[$283 >> 2] = $8; //@line 7240
   $284 = $ReallocAsyncCtx2 + 20 | 0; //@line 7241
   HEAP32[$284 >> 2] = $10; //@line 7242
   $285 = $ReallocAsyncCtx2 + 24 | 0; //@line 7243
   HEAP32[$285 >> 2] = $12; //@line 7244
   $286 = $ReallocAsyncCtx2 + 28 | 0; //@line 7245
   HEAP32[$286 >> 2] = $14; //@line 7246
   $287 = $ReallocAsyncCtx2 + 32 | 0; //@line 7247
   HEAP32[$287 >> 2] = $16; //@line 7248
   $288 = $ReallocAsyncCtx2 + 36 | 0; //@line 7249
   HEAP32[$288 >> 2] = $18; //@line 7250
   $289 = $ReallocAsyncCtx2 + 40 | 0; //@line 7251
   HEAP32[$289 >> 2] = $20; //@line 7252
   $290 = $ReallocAsyncCtx2 + 44 | 0; //@line 7253
   HEAP32[$290 >> 2] = $22; //@line 7254
   $291 = $ReallocAsyncCtx2 + 48 | 0; //@line 7255
   HEAP32[$291 >> 2] = $24; //@line 7256
   $292 = $ReallocAsyncCtx2 + 52 | 0; //@line 7257
   HEAP32[$292 >> 2] = $26; //@line 7258
   $293 = $ReallocAsyncCtx2 + 56 | 0; //@line 7259
   HEAP32[$293 >> 2] = $28; //@line 7260
   $294 = $ReallocAsyncCtx2 + 60 | 0; //@line 7261
   HEAP8[$294 >> 0] = $30; //@line 7262
   $295 = $ReallocAsyncCtx2 + 64 | 0; //@line 7263
   HEAP32[$295 >> 2] = $32; //@line 7264
   $296 = $ReallocAsyncCtx2 + 68 | 0; //@line 7265
   HEAP8[$296 >> 0] = $34; //@line 7266
   $297 = $ReallocAsyncCtx2 + 72 | 0; //@line 7267
   HEAP32[$297 >> 2] = $36; //@line 7268
   $298 = $ReallocAsyncCtx2 + 76 | 0; //@line 7269
   HEAP32[$298 >> 2] = $38; //@line 7270
   $299 = $ReallocAsyncCtx2 + 80 | 0; //@line 7271
   HEAP32[$299 >> 2] = $40; //@line 7272
   $300 = $ReallocAsyncCtx2 + 84 | 0; //@line 7273
   HEAP32[$300 >> 2] = $42; //@line 7274
   $301 = $ReallocAsyncCtx2 + 88 | 0; //@line 7275
   HEAP32[$301 >> 2] = $44; //@line 7276
   $302 = $ReallocAsyncCtx2 + 92 | 0; //@line 7277
   HEAP32[$302 >> 2] = $46; //@line 7278
   $303 = $ReallocAsyncCtx2 + 96 | 0; //@line 7279
   HEAP32[$303 >> 2] = $48; //@line 7280
   $304 = $ReallocAsyncCtx2 + 100 | 0; //@line 7281
   HEAP32[$304 >> 2] = $50; //@line 7282
   $305 = $ReallocAsyncCtx2 + 104 | 0; //@line 7283
   HEAP32[$305 >> 2] = $52; //@line 7284
   $306 = $ReallocAsyncCtx2 + 108 | 0; //@line 7285
   HEAP32[$306 >> 2] = $54; //@line 7286
   $307 = $ReallocAsyncCtx2 + 112 | 0; //@line 7287
   HEAP8[$307 >> 0] = $268; //@line 7288
   $308 = $ReallocAsyncCtx2 + 116 | 0; //@line 7289
   HEAP32[$308 >> 2] = $56; //@line 7290
   $309 = $ReallocAsyncCtx2 + 120 | 0; //@line 7291
   HEAP32[$309 >> 2] = $58; //@line 7292
   $310 = $ReallocAsyncCtx2 + 124 | 0; //@line 7293
   HEAP32[$310 >> 2] = $60; //@line 7294
   $311 = $ReallocAsyncCtx2 + 128 | 0; //@line 7295
   HEAP32[$311 >> 2] = $62; //@line 7296
   $312 = $ReallocAsyncCtx2 + 132 | 0; //@line 7297
   HEAP32[$312 >> 2] = $64; //@line 7298
   $313 = $ReallocAsyncCtx2 + 136 | 0; //@line 7299
   HEAP32[$313 >> 2] = $66; //@line 7300
   $314 = $ReallocAsyncCtx2 + 140 | 0; //@line 7301
   HEAP32[$314 >> 2] = $68; //@line 7302
   $315 = $ReallocAsyncCtx2 + 144 | 0; //@line 7303
   HEAP32[$315 >> 2] = $72; //@line 7304
   $316 = $ReallocAsyncCtx2 + 148 | 0; //@line 7305
   HEAP32[$316 >> 2] = $74; //@line 7306
   $317 = $ReallocAsyncCtx2 + 152 | 0; //@line 7307
   HEAP32[$317 >> 2] = $76; //@line 7308
   $318 = $ReallocAsyncCtx2 + 156 | 0; //@line 7309
   HEAP32[$318 >> 2] = $78; //@line 7310
   $319 = $ReallocAsyncCtx2 + 160 | 0; //@line 7311
   HEAP32[$319 >> 2] = $80; //@line 7312
   $320 = $ReallocAsyncCtx2 + 164 | 0; //@line 7313
   HEAP32[$320 >> 2] = $82; //@line 7314
   $321 = $ReallocAsyncCtx2 + 168 | 0; //@line 7315
   HEAP32[$321 >> 2] = $84; //@line 7316
   $322 = $ReallocAsyncCtx2 + 172 | 0; //@line 7317
   HEAP32[$322 >> 2] = $86; //@line 7318
   $323 = $ReallocAsyncCtx2 + 176 | 0; //@line 7319
   HEAP32[$323 >> 2] = $88; //@line 7320
   $324 = $ReallocAsyncCtx2 + 180 | 0; //@line 7321
   HEAP32[$324 >> 2] = $90; //@line 7322
   $325 = $ReallocAsyncCtx2 + 184 | 0; //@line 7323
   HEAP32[$325 >> 2] = $92; //@line 7324
   $326 = $ReallocAsyncCtx2 + 188 | 0; //@line 7325
   HEAP32[$326 >> 2] = $94; //@line 7326
   $327 = $ReallocAsyncCtx2 + 192 | 0; //@line 7327
   HEAP32[$327 >> 2] = $96; //@line 7328
   $328 = $ReallocAsyncCtx2 + 196 | 0; //@line 7329
   HEAP32[$328 >> 2] = $98; //@line 7330
   $329 = $ReallocAsyncCtx2 + 200 | 0; //@line 7331
   HEAP32[$329 >> 2] = $100; //@line 7332
   $330 = $ReallocAsyncCtx2 + 204 | 0; //@line 7333
   HEAP32[$330 >> 2] = $102; //@line 7334
   $331 = $ReallocAsyncCtx2 + 208 | 0; //@line 7335
   HEAP32[$331 >> 2] = $104; //@line 7336
   $332 = $ReallocAsyncCtx2 + 212 | 0; //@line 7337
   HEAP32[$332 >> 2] = $106; //@line 7338
   $333 = $ReallocAsyncCtx2 + 216 | 0; //@line 7339
   HEAP32[$333 >> 2] = $108; //@line 7340
   $334 = $ReallocAsyncCtx2 + 220 | 0; //@line 7341
   HEAP32[$334 >> 2] = $110; //@line 7342
   $335 = $ReallocAsyncCtx2 + 224 | 0; //@line 7343
   HEAP32[$335 >> 2] = $112; //@line 7344
   $336 = $ReallocAsyncCtx2 + 228 | 0; //@line 7345
   HEAP32[$336 >> 2] = $114; //@line 7346
   $337 = $ReallocAsyncCtx2 + 232 | 0; //@line 7347
   HEAP32[$337 >> 2] = $116; //@line 7348
   $338 = $ReallocAsyncCtx2 + 236 | 0; //@line 7349
   HEAP32[$338 >> 2] = $118; //@line 7350
   $339 = $ReallocAsyncCtx2 + 240 | 0; //@line 7351
   HEAP32[$339 >> 2] = $120; //@line 7352
   $340 = $ReallocAsyncCtx2 + 244 | 0; //@line 7353
   HEAP32[$340 >> 2] = $122; //@line 7354
   $341 = $ReallocAsyncCtx2 + 248 | 0; //@line 7355
   HEAP32[$341 >> 2] = $124; //@line 7356
   $342 = $ReallocAsyncCtx2 + 252 | 0; //@line 7357
   HEAP32[$342 >> 2] = $126; //@line 7358
   $343 = $ReallocAsyncCtx2 + 256 | 0; //@line 7359
   HEAP32[$343 >> 2] = $128; //@line 7360
   $344 = $ReallocAsyncCtx2 + 260 | 0; //@line 7361
   HEAP32[$344 >> 2] = $130; //@line 7362
   $345 = $ReallocAsyncCtx2 + 264 | 0; //@line 7363
   HEAP32[$345 >> 2] = $134; //@line 7364
   $346 = $ReallocAsyncCtx2 + 268 | 0; //@line 7365
   HEAP32[$346 >> 2] = $136; //@line 7366
   sp = STACKTOP; //@line 7367
   return;
  }
  HEAP8[___async_retval >> 0] = $279; //@line 7371
  ___async_unwind = 0; //@line 7372
  HEAP32[$ReallocAsyncCtx2 >> 2] = 491; //@line 7373
  $280 = $ReallocAsyncCtx2 + 4 | 0; //@line 7374
  HEAP32[$280 >> 2] = $2; //@line 7375
  $281 = $ReallocAsyncCtx2 + 8 | 0; //@line 7376
  HEAP32[$281 >> 2] = $4; //@line 7377
  $282 = $ReallocAsyncCtx2 + 12 | 0; //@line 7378
  HEAP8[$282 >> 0] = $6; //@line 7379
  $283 = $ReallocAsyncCtx2 + 16 | 0; //@line 7380
  HEAP32[$283 >> 2] = $8; //@line 7381
  $284 = $ReallocAsyncCtx2 + 20 | 0; //@line 7382
  HEAP32[$284 >> 2] = $10; //@line 7383
  $285 = $ReallocAsyncCtx2 + 24 | 0; //@line 7384
  HEAP32[$285 >> 2] = $12; //@line 7385
  $286 = $ReallocAsyncCtx2 + 28 | 0; //@line 7386
  HEAP32[$286 >> 2] = $14; //@line 7387
  $287 = $ReallocAsyncCtx2 + 32 | 0; //@line 7388
  HEAP32[$287 >> 2] = $16; //@line 7389
  $288 = $ReallocAsyncCtx2 + 36 | 0; //@line 7390
  HEAP32[$288 >> 2] = $18; //@line 7391
  $289 = $ReallocAsyncCtx2 + 40 | 0; //@line 7392
  HEAP32[$289 >> 2] = $20; //@line 7393
  $290 = $ReallocAsyncCtx2 + 44 | 0; //@line 7394
  HEAP32[$290 >> 2] = $22; //@line 7395
  $291 = $ReallocAsyncCtx2 + 48 | 0; //@line 7396
  HEAP32[$291 >> 2] = $24; //@line 7397
  $292 = $ReallocAsyncCtx2 + 52 | 0; //@line 7398
  HEAP32[$292 >> 2] = $26; //@line 7399
  $293 = $ReallocAsyncCtx2 + 56 | 0; //@line 7400
  HEAP32[$293 >> 2] = $28; //@line 7401
  $294 = $ReallocAsyncCtx2 + 60 | 0; //@line 7402
  HEAP8[$294 >> 0] = $30; //@line 7403
  $295 = $ReallocAsyncCtx2 + 64 | 0; //@line 7404
  HEAP32[$295 >> 2] = $32; //@line 7405
  $296 = $ReallocAsyncCtx2 + 68 | 0; //@line 7406
  HEAP8[$296 >> 0] = $34; //@line 7407
  $297 = $ReallocAsyncCtx2 + 72 | 0; //@line 7408
  HEAP32[$297 >> 2] = $36; //@line 7409
  $298 = $ReallocAsyncCtx2 + 76 | 0; //@line 7410
  HEAP32[$298 >> 2] = $38; //@line 7411
  $299 = $ReallocAsyncCtx2 + 80 | 0; //@line 7412
  HEAP32[$299 >> 2] = $40; //@line 7413
  $300 = $ReallocAsyncCtx2 + 84 | 0; //@line 7414
  HEAP32[$300 >> 2] = $42; //@line 7415
  $301 = $ReallocAsyncCtx2 + 88 | 0; //@line 7416
  HEAP32[$301 >> 2] = $44; //@line 7417
  $302 = $ReallocAsyncCtx2 + 92 | 0; //@line 7418
  HEAP32[$302 >> 2] = $46; //@line 7419
  $303 = $ReallocAsyncCtx2 + 96 | 0; //@line 7420
  HEAP32[$303 >> 2] = $48; //@line 7421
  $304 = $ReallocAsyncCtx2 + 100 | 0; //@line 7422
  HEAP32[$304 >> 2] = $50; //@line 7423
  $305 = $ReallocAsyncCtx2 + 104 | 0; //@line 7424
  HEAP32[$305 >> 2] = $52; //@line 7425
  $306 = $ReallocAsyncCtx2 + 108 | 0; //@line 7426
  HEAP32[$306 >> 2] = $54; //@line 7427
  $307 = $ReallocAsyncCtx2 + 112 | 0; //@line 7428
  HEAP8[$307 >> 0] = $268; //@line 7429
  $308 = $ReallocAsyncCtx2 + 116 | 0; //@line 7430
  HEAP32[$308 >> 2] = $56; //@line 7431
  $309 = $ReallocAsyncCtx2 + 120 | 0; //@line 7432
  HEAP32[$309 >> 2] = $58; //@line 7433
  $310 = $ReallocAsyncCtx2 + 124 | 0; //@line 7434
  HEAP32[$310 >> 2] = $60; //@line 7435
  $311 = $ReallocAsyncCtx2 + 128 | 0; //@line 7436
  HEAP32[$311 >> 2] = $62; //@line 7437
  $312 = $ReallocAsyncCtx2 + 132 | 0; //@line 7438
  HEAP32[$312 >> 2] = $64; //@line 7439
  $313 = $ReallocAsyncCtx2 + 136 | 0; //@line 7440
  HEAP32[$313 >> 2] = $66; //@line 7441
  $314 = $ReallocAsyncCtx2 + 140 | 0; //@line 7442
  HEAP32[$314 >> 2] = $68; //@line 7443
  $315 = $ReallocAsyncCtx2 + 144 | 0; //@line 7444
  HEAP32[$315 >> 2] = $72; //@line 7445
  $316 = $ReallocAsyncCtx2 + 148 | 0; //@line 7446
  HEAP32[$316 >> 2] = $74; //@line 7447
  $317 = $ReallocAsyncCtx2 + 152 | 0; //@line 7448
  HEAP32[$317 >> 2] = $76; //@line 7449
  $318 = $ReallocAsyncCtx2 + 156 | 0; //@line 7450
  HEAP32[$318 >> 2] = $78; //@line 7451
  $319 = $ReallocAsyncCtx2 + 160 | 0; //@line 7452
  HEAP32[$319 >> 2] = $80; //@line 7453
  $320 = $ReallocAsyncCtx2 + 164 | 0; //@line 7454
  HEAP32[$320 >> 2] = $82; //@line 7455
  $321 = $ReallocAsyncCtx2 + 168 | 0; //@line 7456
  HEAP32[$321 >> 2] = $84; //@line 7457
  $322 = $ReallocAsyncCtx2 + 172 | 0; //@line 7458
  HEAP32[$322 >> 2] = $86; //@line 7459
  $323 = $ReallocAsyncCtx2 + 176 | 0; //@line 7460
  HEAP32[$323 >> 2] = $88; //@line 7461
  $324 = $ReallocAsyncCtx2 + 180 | 0; //@line 7462
  HEAP32[$324 >> 2] = $90; //@line 7463
  $325 = $ReallocAsyncCtx2 + 184 | 0; //@line 7464
  HEAP32[$325 >> 2] = $92; //@line 7465
  $326 = $ReallocAsyncCtx2 + 188 | 0; //@line 7466
  HEAP32[$326 >> 2] = $94; //@line 7467
  $327 = $ReallocAsyncCtx2 + 192 | 0; //@line 7468
  HEAP32[$327 >> 2] = $96; //@line 7469
  $328 = $ReallocAsyncCtx2 + 196 | 0; //@line 7470
  HEAP32[$328 >> 2] = $98; //@line 7471
  $329 = $ReallocAsyncCtx2 + 200 | 0; //@line 7472
  HEAP32[$329 >> 2] = $100; //@line 7473
  $330 = $ReallocAsyncCtx2 + 204 | 0; //@line 7474
  HEAP32[$330 >> 2] = $102; //@line 7475
  $331 = $ReallocAsyncCtx2 + 208 | 0; //@line 7476
  HEAP32[$331 >> 2] = $104; //@line 7477
  $332 = $ReallocAsyncCtx2 + 212 | 0; //@line 7478
  HEAP32[$332 >> 2] = $106; //@line 7479
  $333 = $ReallocAsyncCtx2 + 216 | 0; //@line 7480
  HEAP32[$333 >> 2] = $108; //@line 7481
  $334 = $ReallocAsyncCtx2 + 220 | 0; //@line 7482
  HEAP32[$334 >> 2] = $110; //@line 7483
  $335 = $ReallocAsyncCtx2 + 224 | 0; //@line 7484
  HEAP32[$335 >> 2] = $112; //@line 7485
  $336 = $ReallocAsyncCtx2 + 228 | 0; //@line 7486
  HEAP32[$336 >> 2] = $114; //@line 7487
  $337 = $ReallocAsyncCtx2 + 232 | 0; //@line 7488
  HEAP32[$337 >> 2] = $116; //@line 7489
  $338 = $ReallocAsyncCtx2 + 236 | 0; //@line 7490
  HEAP32[$338 >> 2] = $118; //@line 7491
  $339 = $ReallocAsyncCtx2 + 240 | 0; //@line 7492
  HEAP32[$339 >> 2] = $120; //@line 7493
  $340 = $ReallocAsyncCtx2 + 244 | 0; //@line 7494
  HEAP32[$340 >> 2] = $122; //@line 7495
  $341 = $ReallocAsyncCtx2 + 248 | 0; //@line 7496
  HEAP32[$341 >> 2] = $124; //@line 7497
  $342 = $ReallocAsyncCtx2 + 252 | 0; //@line 7498
  HEAP32[$342 >> 2] = $126; //@line 7499
  $343 = $ReallocAsyncCtx2 + 256 | 0; //@line 7500
  HEAP32[$343 >> 2] = $128; //@line 7501
  $344 = $ReallocAsyncCtx2 + 260 | 0; //@line 7502
  HEAP32[$344 >> 2] = $130; //@line 7503
  $345 = $ReallocAsyncCtx2 + 264 | 0; //@line 7504
  HEAP32[$345 >> 2] = $134; //@line 7505
  $346 = $ReallocAsyncCtx2 + 268 | 0; //@line 7506
  HEAP32[$346 >> 2] = $136; //@line 7507
  sp = STACKTOP; //@line 7508
  return;
 } else if ((label | 0) == 14) {
  HEAP8[$8 >> 0] = HEAP8[$36 + ($139 & 255) >> 0] | 0; //@line 7516
  HEAP32[$38 >> 2] = $108; //@line 7517
  HEAP32[$120 >> 2] = (HEAPU8[$36 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$36 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$36 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 7538
  HEAP32[$114 >> 2] = 0; //@line 7539
  $387 = $$0$be + 6 << 24 >> 24; //@line 7540
  HEAP8[$130 >> 0] = HEAP8[$36 + ($$0$be + 5 & 255) >> 0] | 0; //@line 7544
  $393 = HEAP32[(HEAP32[$128 >> 2] | 0) + 8 >> 2] | 0; //@line 7547
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(268) | 0; //@line 7548
  $394 = FUNCTION_TABLE_iii[$393 & 31]($20, $62) | 0; //@line 7549
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 492; //@line 7552
   $395 = $ReallocAsyncCtx3 + 4 | 0; //@line 7553
   HEAP32[$395 >> 2] = $2; //@line 7554
   $396 = $ReallocAsyncCtx3 + 8 | 0; //@line 7555
   HEAP32[$396 >> 2] = $4; //@line 7556
   $397 = $ReallocAsyncCtx3 + 12 | 0; //@line 7557
   HEAP8[$397 >> 0] = $6; //@line 7558
   $398 = $ReallocAsyncCtx3 + 16 | 0; //@line 7559
   HEAP32[$398 >> 2] = $8; //@line 7560
   $399 = $ReallocAsyncCtx3 + 20 | 0; //@line 7561
   HEAP32[$399 >> 2] = $10; //@line 7562
   $400 = $ReallocAsyncCtx3 + 24 | 0; //@line 7563
   HEAP32[$400 >> 2] = $12; //@line 7564
   $401 = $ReallocAsyncCtx3 + 28 | 0; //@line 7565
   HEAP32[$401 >> 2] = $14; //@line 7566
   $402 = $ReallocAsyncCtx3 + 32 | 0; //@line 7567
   HEAP32[$402 >> 2] = $16; //@line 7568
   $403 = $ReallocAsyncCtx3 + 36 | 0; //@line 7569
   HEAP32[$403 >> 2] = $18; //@line 7570
   $404 = $ReallocAsyncCtx3 + 40 | 0; //@line 7571
   HEAP32[$404 >> 2] = $20; //@line 7572
   $405 = $ReallocAsyncCtx3 + 44 | 0; //@line 7573
   HEAP32[$405 >> 2] = $22; //@line 7574
   $406 = $ReallocAsyncCtx3 + 48 | 0; //@line 7575
   HEAP32[$406 >> 2] = $24; //@line 7576
   $407 = $ReallocAsyncCtx3 + 52 | 0; //@line 7577
   HEAP32[$407 >> 2] = $26; //@line 7578
   $408 = $ReallocAsyncCtx3 + 56 | 0; //@line 7579
   HEAP32[$408 >> 2] = $28; //@line 7580
   $409 = $ReallocAsyncCtx3 + 60 | 0; //@line 7581
   HEAP8[$409 >> 0] = $387; //@line 7582
   $410 = $ReallocAsyncCtx3 + 61 | 0; //@line 7583
   HEAP8[$410 >> 0] = $30; //@line 7584
   $411 = $ReallocAsyncCtx3 + 64 | 0; //@line 7585
   HEAP32[$411 >> 2] = $32; //@line 7586
   $412 = $ReallocAsyncCtx3 + 68 | 0; //@line 7587
   HEAP8[$412 >> 0] = $34; //@line 7588
   $413 = $ReallocAsyncCtx3 + 72 | 0; //@line 7589
   HEAP32[$413 >> 2] = $36; //@line 7590
   $414 = $ReallocAsyncCtx3 + 76 | 0; //@line 7591
   HEAP32[$414 >> 2] = $38; //@line 7592
   $415 = $ReallocAsyncCtx3 + 80 | 0; //@line 7593
   HEAP32[$415 >> 2] = $40; //@line 7594
   $416 = $ReallocAsyncCtx3 + 84 | 0; //@line 7595
   HEAP32[$416 >> 2] = $42; //@line 7596
   $417 = $ReallocAsyncCtx3 + 88 | 0; //@line 7597
   HEAP32[$417 >> 2] = $44; //@line 7598
   $418 = $ReallocAsyncCtx3 + 92 | 0; //@line 7599
   HEAP32[$418 >> 2] = $46; //@line 7600
   $419 = $ReallocAsyncCtx3 + 96 | 0; //@line 7601
   HEAP32[$419 >> 2] = $48; //@line 7602
   $420 = $ReallocAsyncCtx3 + 100 | 0; //@line 7603
   HEAP32[$420 >> 2] = $50; //@line 7604
   $421 = $ReallocAsyncCtx3 + 104 | 0; //@line 7605
   HEAP32[$421 >> 2] = $52; //@line 7606
   $422 = $ReallocAsyncCtx3 + 108 | 0; //@line 7607
   HEAP32[$422 >> 2] = $54; //@line 7608
   $423 = $ReallocAsyncCtx3 + 112 | 0; //@line 7609
   HEAP32[$423 >> 2] = $56; //@line 7610
   $424 = $ReallocAsyncCtx3 + 116 | 0; //@line 7611
   HEAP32[$424 >> 2] = $58; //@line 7612
   $425 = $ReallocAsyncCtx3 + 120 | 0; //@line 7613
   HEAP32[$425 >> 2] = $60; //@line 7614
   $426 = $ReallocAsyncCtx3 + 124 | 0; //@line 7615
   HEAP32[$426 >> 2] = $62; //@line 7616
   $427 = $ReallocAsyncCtx3 + 128 | 0; //@line 7617
   HEAP32[$427 >> 2] = $64; //@line 7618
   $428 = $ReallocAsyncCtx3 + 132 | 0; //@line 7619
   HEAP32[$428 >> 2] = $66; //@line 7620
   $429 = $ReallocAsyncCtx3 + 136 | 0; //@line 7621
   HEAP32[$429 >> 2] = $68; //@line 7622
   $430 = $ReallocAsyncCtx3 + 140 | 0; //@line 7623
   HEAP32[$430 >> 2] = $72; //@line 7624
   $431 = $ReallocAsyncCtx3 + 144 | 0; //@line 7625
   HEAP32[$431 >> 2] = $74; //@line 7626
   $432 = $ReallocAsyncCtx3 + 148 | 0; //@line 7627
   HEAP32[$432 >> 2] = $76; //@line 7628
   $433 = $ReallocAsyncCtx3 + 152 | 0; //@line 7629
   HEAP32[$433 >> 2] = $78; //@line 7630
   $434 = $ReallocAsyncCtx3 + 156 | 0; //@line 7631
   HEAP32[$434 >> 2] = $80; //@line 7632
   $435 = $ReallocAsyncCtx3 + 160 | 0; //@line 7633
   HEAP32[$435 >> 2] = $82; //@line 7634
   $436 = $ReallocAsyncCtx3 + 164 | 0; //@line 7635
   HEAP32[$436 >> 2] = $84; //@line 7636
   $437 = $ReallocAsyncCtx3 + 168 | 0; //@line 7637
   HEAP32[$437 >> 2] = $86; //@line 7638
   $438 = $ReallocAsyncCtx3 + 172 | 0; //@line 7639
   HEAP32[$438 >> 2] = $88; //@line 7640
   $439 = $ReallocAsyncCtx3 + 176 | 0; //@line 7641
   HEAP32[$439 >> 2] = $90; //@line 7642
   $440 = $ReallocAsyncCtx3 + 180 | 0; //@line 7643
   HEAP32[$440 >> 2] = $92; //@line 7644
   $441 = $ReallocAsyncCtx3 + 184 | 0; //@line 7645
   HEAP32[$441 >> 2] = $94; //@line 7646
   $442 = $ReallocAsyncCtx3 + 188 | 0; //@line 7647
   HEAP32[$442 >> 2] = $96; //@line 7648
   $443 = $ReallocAsyncCtx3 + 192 | 0; //@line 7649
   HEAP32[$443 >> 2] = $98; //@line 7650
   $444 = $ReallocAsyncCtx3 + 196 | 0; //@line 7651
   HEAP32[$444 >> 2] = $100; //@line 7652
   $445 = $ReallocAsyncCtx3 + 200 | 0; //@line 7653
   HEAP32[$445 >> 2] = $102; //@line 7654
   $446 = $ReallocAsyncCtx3 + 204 | 0; //@line 7655
   HEAP32[$446 >> 2] = $104; //@line 7656
   $447 = $ReallocAsyncCtx3 + 208 | 0; //@line 7657
   HEAP32[$447 >> 2] = $106; //@line 7658
   $448 = $ReallocAsyncCtx3 + 212 | 0; //@line 7659
   HEAP32[$448 >> 2] = $108; //@line 7660
   $449 = $ReallocAsyncCtx3 + 216 | 0; //@line 7661
   HEAP32[$449 >> 2] = $110; //@line 7662
   $450 = $ReallocAsyncCtx3 + 220 | 0; //@line 7663
   HEAP32[$450 >> 2] = $112; //@line 7664
   $451 = $ReallocAsyncCtx3 + 224 | 0; //@line 7665
   HEAP32[$451 >> 2] = $114; //@line 7666
   $452 = $ReallocAsyncCtx3 + 228 | 0; //@line 7667
   HEAP32[$452 >> 2] = $116; //@line 7668
   $453 = $ReallocAsyncCtx3 + 232 | 0; //@line 7669
   HEAP32[$453 >> 2] = $118; //@line 7670
   $454 = $ReallocAsyncCtx3 + 236 | 0; //@line 7671
   HEAP32[$454 >> 2] = $120; //@line 7672
   $455 = $ReallocAsyncCtx3 + 240 | 0; //@line 7673
   HEAP32[$455 >> 2] = $122; //@line 7674
   $456 = $ReallocAsyncCtx3 + 244 | 0; //@line 7675
   HEAP32[$456 >> 2] = $124; //@line 7676
   $457 = $ReallocAsyncCtx3 + 248 | 0; //@line 7677
   HEAP32[$457 >> 2] = $126; //@line 7678
   $458 = $ReallocAsyncCtx3 + 252 | 0; //@line 7679
   HEAP32[$458 >> 2] = $128; //@line 7680
   $459 = $ReallocAsyncCtx3 + 256 | 0; //@line 7681
   HEAP32[$459 >> 2] = $130; //@line 7682
   $460 = $ReallocAsyncCtx3 + 260 | 0; //@line 7683
   HEAP32[$460 >> 2] = $134; //@line 7684
   $461 = $ReallocAsyncCtx3 + 264 | 0; //@line 7685
   HEAP32[$461 >> 2] = $136; //@line 7686
   sp = STACKTOP; //@line 7687
   return;
  }
  HEAP8[___async_retval >> 0] = $394; //@line 7691
  ___async_unwind = 0; //@line 7692
  HEAP32[$ReallocAsyncCtx3 >> 2] = 492; //@line 7693
  $395 = $ReallocAsyncCtx3 + 4 | 0; //@line 7694
  HEAP32[$395 >> 2] = $2; //@line 7695
  $396 = $ReallocAsyncCtx3 + 8 | 0; //@line 7696
  HEAP32[$396 >> 2] = $4; //@line 7697
  $397 = $ReallocAsyncCtx3 + 12 | 0; //@line 7698
  HEAP8[$397 >> 0] = $6; //@line 7699
  $398 = $ReallocAsyncCtx3 + 16 | 0; //@line 7700
  HEAP32[$398 >> 2] = $8; //@line 7701
  $399 = $ReallocAsyncCtx3 + 20 | 0; //@line 7702
  HEAP32[$399 >> 2] = $10; //@line 7703
  $400 = $ReallocAsyncCtx3 + 24 | 0; //@line 7704
  HEAP32[$400 >> 2] = $12; //@line 7705
  $401 = $ReallocAsyncCtx3 + 28 | 0; //@line 7706
  HEAP32[$401 >> 2] = $14; //@line 7707
  $402 = $ReallocAsyncCtx3 + 32 | 0; //@line 7708
  HEAP32[$402 >> 2] = $16; //@line 7709
  $403 = $ReallocAsyncCtx3 + 36 | 0; //@line 7710
  HEAP32[$403 >> 2] = $18; //@line 7711
  $404 = $ReallocAsyncCtx3 + 40 | 0; //@line 7712
  HEAP32[$404 >> 2] = $20; //@line 7713
  $405 = $ReallocAsyncCtx3 + 44 | 0; //@line 7714
  HEAP32[$405 >> 2] = $22; //@line 7715
  $406 = $ReallocAsyncCtx3 + 48 | 0; //@line 7716
  HEAP32[$406 >> 2] = $24; //@line 7717
  $407 = $ReallocAsyncCtx3 + 52 | 0; //@line 7718
  HEAP32[$407 >> 2] = $26; //@line 7719
  $408 = $ReallocAsyncCtx3 + 56 | 0; //@line 7720
  HEAP32[$408 >> 2] = $28; //@line 7721
  $409 = $ReallocAsyncCtx3 + 60 | 0; //@line 7722
  HEAP8[$409 >> 0] = $387; //@line 7723
  $410 = $ReallocAsyncCtx3 + 61 | 0; //@line 7724
  HEAP8[$410 >> 0] = $30; //@line 7725
  $411 = $ReallocAsyncCtx3 + 64 | 0; //@line 7726
  HEAP32[$411 >> 2] = $32; //@line 7727
  $412 = $ReallocAsyncCtx3 + 68 | 0; //@line 7728
  HEAP8[$412 >> 0] = $34; //@line 7729
  $413 = $ReallocAsyncCtx3 + 72 | 0; //@line 7730
  HEAP32[$413 >> 2] = $36; //@line 7731
  $414 = $ReallocAsyncCtx3 + 76 | 0; //@line 7732
  HEAP32[$414 >> 2] = $38; //@line 7733
  $415 = $ReallocAsyncCtx3 + 80 | 0; //@line 7734
  HEAP32[$415 >> 2] = $40; //@line 7735
  $416 = $ReallocAsyncCtx3 + 84 | 0; //@line 7736
  HEAP32[$416 >> 2] = $42; //@line 7737
  $417 = $ReallocAsyncCtx3 + 88 | 0; //@line 7738
  HEAP32[$417 >> 2] = $44; //@line 7739
  $418 = $ReallocAsyncCtx3 + 92 | 0; //@line 7740
  HEAP32[$418 >> 2] = $46; //@line 7741
  $419 = $ReallocAsyncCtx3 + 96 | 0; //@line 7742
  HEAP32[$419 >> 2] = $48; //@line 7743
  $420 = $ReallocAsyncCtx3 + 100 | 0; //@line 7744
  HEAP32[$420 >> 2] = $50; //@line 7745
  $421 = $ReallocAsyncCtx3 + 104 | 0; //@line 7746
  HEAP32[$421 >> 2] = $52; //@line 7747
  $422 = $ReallocAsyncCtx3 + 108 | 0; //@line 7748
  HEAP32[$422 >> 2] = $54; //@line 7749
  $423 = $ReallocAsyncCtx3 + 112 | 0; //@line 7750
  HEAP32[$423 >> 2] = $56; //@line 7751
  $424 = $ReallocAsyncCtx3 + 116 | 0; //@line 7752
  HEAP32[$424 >> 2] = $58; //@line 7753
  $425 = $ReallocAsyncCtx3 + 120 | 0; //@line 7754
  HEAP32[$425 >> 2] = $60; //@line 7755
  $426 = $ReallocAsyncCtx3 + 124 | 0; //@line 7756
  HEAP32[$426 >> 2] = $62; //@line 7757
  $427 = $ReallocAsyncCtx3 + 128 | 0; //@line 7758
  HEAP32[$427 >> 2] = $64; //@line 7759
  $428 = $ReallocAsyncCtx3 + 132 | 0; //@line 7760
  HEAP32[$428 >> 2] = $66; //@line 7761
  $429 = $ReallocAsyncCtx3 + 136 | 0; //@line 7762
  HEAP32[$429 >> 2] = $68; //@line 7763
  $430 = $ReallocAsyncCtx3 + 140 | 0; //@line 7764
  HEAP32[$430 >> 2] = $72; //@line 7765
  $431 = $ReallocAsyncCtx3 + 144 | 0; //@line 7766
  HEAP32[$431 >> 2] = $74; //@line 7767
  $432 = $ReallocAsyncCtx3 + 148 | 0; //@line 7768
  HEAP32[$432 >> 2] = $76; //@line 7769
  $433 = $ReallocAsyncCtx3 + 152 | 0; //@line 7770
  HEAP32[$433 >> 2] = $78; //@line 7771
  $434 = $ReallocAsyncCtx3 + 156 | 0; //@line 7772
  HEAP32[$434 >> 2] = $80; //@line 7773
  $435 = $ReallocAsyncCtx3 + 160 | 0; //@line 7774
  HEAP32[$435 >> 2] = $82; //@line 7775
  $436 = $ReallocAsyncCtx3 + 164 | 0; //@line 7776
  HEAP32[$436 >> 2] = $84; //@line 7777
  $437 = $ReallocAsyncCtx3 + 168 | 0; //@line 7778
  HEAP32[$437 >> 2] = $86; //@line 7779
  $438 = $ReallocAsyncCtx3 + 172 | 0; //@line 7780
  HEAP32[$438 >> 2] = $88; //@line 7781
  $439 = $ReallocAsyncCtx3 + 176 | 0; //@line 7782
  HEAP32[$439 >> 2] = $90; //@line 7783
  $440 = $ReallocAsyncCtx3 + 180 | 0; //@line 7784
  HEAP32[$440 >> 2] = $92; //@line 7785
  $441 = $ReallocAsyncCtx3 + 184 | 0; //@line 7786
  HEAP32[$441 >> 2] = $94; //@line 7787
  $442 = $ReallocAsyncCtx3 + 188 | 0; //@line 7788
  HEAP32[$442 >> 2] = $96; //@line 7789
  $443 = $ReallocAsyncCtx3 + 192 | 0; //@line 7790
  HEAP32[$443 >> 2] = $98; //@line 7791
  $444 = $ReallocAsyncCtx3 + 196 | 0; //@line 7792
  HEAP32[$444 >> 2] = $100; //@line 7793
  $445 = $ReallocAsyncCtx3 + 200 | 0; //@line 7794
  HEAP32[$445 >> 2] = $102; //@line 7795
  $446 = $ReallocAsyncCtx3 + 204 | 0; //@line 7796
  HEAP32[$446 >> 2] = $104; //@line 7797
  $447 = $ReallocAsyncCtx3 + 208 | 0; //@line 7798
  HEAP32[$447 >> 2] = $106; //@line 7799
  $448 = $ReallocAsyncCtx3 + 212 | 0; //@line 7800
  HEAP32[$448 >> 2] = $108; //@line 7801
  $449 = $ReallocAsyncCtx3 + 216 | 0; //@line 7802
  HEAP32[$449 >> 2] = $110; //@line 7803
  $450 = $ReallocAsyncCtx3 + 220 | 0; //@line 7804
  HEAP32[$450 >> 2] = $112; //@line 7805
  $451 = $ReallocAsyncCtx3 + 224 | 0; //@line 7806
  HEAP32[$451 >> 2] = $114; //@line 7807
  $452 = $ReallocAsyncCtx3 + 228 | 0; //@line 7808
  HEAP32[$452 >> 2] = $116; //@line 7809
  $453 = $ReallocAsyncCtx3 + 232 | 0; //@line 7810
  HEAP32[$453 >> 2] = $118; //@line 7811
  $454 = $ReallocAsyncCtx3 + 236 | 0; //@line 7812
  HEAP32[$454 >> 2] = $120; //@line 7813
  $455 = $ReallocAsyncCtx3 + 240 | 0; //@line 7814
  HEAP32[$455 >> 2] = $122; //@line 7815
  $456 = $ReallocAsyncCtx3 + 244 | 0; //@line 7816
  HEAP32[$456 >> 2] = $124; //@line 7817
  $457 = $ReallocAsyncCtx3 + 248 | 0; //@line 7818
  HEAP32[$457 >> 2] = $126; //@line 7819
  $458 = $ReallocAsyncCtx3 + 252 | 0; //@line 7820
  HEAP32[$458 >> 2] = $128; //@line 7821
  $459 = $ReallocAsyncCtx3 + 256 | 0; //@line 7822
  HEAP32[$459 >> 2] = $130; //@line 7823
  $460 = $ReallocAsyncCtx3 + 260 | 0; //@line 7824
  HEAP32[$460 >> 2] = $134; //@line 7825
  $461 = $ReallocAsyncCtx3 + 264 | 0; //@line 7826
  HEAP32[$461 >> 2] = $136; //@line 7827
  sp = STACKTOP; //@line 7828
  return;
 } else if ((label | 0) == 19) {
  $480 = $$0$be + 2 << 24 >> 24; //@line 7832
  $483 = HEAP8[$36 + ($139 & 255) >> 0] | 0; //@line 7835
  HEAP8[$100 >> 0] = 0; //@line 7836
  $484 = $483 & 255; //@line 7837
  HEAP8[$90 >> 0] = $484 >>> 5 & 1; //@line 7841
  if ($484 & 16 | 0) {
   HEAP8[$100 >> 0] = 1; //@line 7845
  }
  HEAP8[$52 >> 0] = $484 & 15; //@line 7849
  $493 = HEAP32[(HEAP32[$48 >> 2] | 0) + 44 >> 2] | 0; //@line 7852
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 7853
  $494 = FUNCTION_TABLE_iii[$493 & 31]($20, $104) | 0; //@line 7854
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 493; //@line 7857
   $495 = $ReallocAsyncCtx4 + 4 | 0; //@line 7858
   HEAP32[$495 >> 2] = $2; //@line 7859
   $496 = $ReallocAsyncCtx4 + 8 | 0; //@line 7860
   HEAP32[$496 >> 2] = $4; //@line 7861
   $497 = $ReallocAsyncCtx4 + 12 | 0; //@line 7862
   HEAP8[$497 >> 0] = $6; //@line 7863
   $498 = $ReallocAsyncCtx4 + 16 | 0; //@line 7864
   HEAP32[$498 >> 2] = $8; //@line 7865
   $499 = $ReallocAsyncCtx4 + 20 | 0; //@line 7866
   HEAP32[$499 >> 2] = $10; //@line 7867
   $500 = $ReallocAsyncCtx4 + 24 | 0; //@line 7868
   HEAP32[$500 >> 2] = $12; //@line 7869
   $501 = $ReallocAsyncCtx4 + 28 | 0; //@line 7870
   HEAP32[$501 >> 2] = $14; //@line 7871
   $502 = $ReallocAsyncCtx4 + 32 | 0; //@line 7872
   HEAP32[$502 >> 2] = $16; //@line 7873
   $503 = $ReallocAsyncCtx4 + 36 | 0; //@line 7874
   HEAP32[$503 >> 2] = $18; //@line 7875
   $504 = $ReallocAsyncCtx4 + 40 | 0; //@line 7876
   HEAP32[$504 >> 2] = $20; //@line 7877
   $505 = $ReallocAsyncCtx4 + 44 | 0; //@line 7878
   HEAP32[$505 >> 2] = $22; //@line 7879
   $506 = $ReallocAsyncCtx4 + 48 | 0; //@line 7880
   HEAP32[$506 >> 2] = $24; //@line 7881
   $507 = $ReallocAsyncCtx4 + 52 | 0; //@line 7882
   HEAP32[$507 >> 2] = $26; //@line 7883
   $508 = $ReallocAsyncCtx4 + 56 | 0; //@line 7884
   HEAP32[$508 >> 2] = $28; //@line 7885
   $509 = $ReallocAsyncCtx4 + 60 | 0; //@line 7886
   HEAP8[$509 >> 0] = $30; //@line 7887
   $510 = $ReallocAsyncCtx4 + 64 | 0; //@line 7888
   HEAP32[$510 >> 2] = $32; //@line 7889
   $511 = $ReallocAsyncCtx4 + 68 | 0; //@line 7890
   HEAP8[$511 >> 0] = $34; //@line 7891
   $512 = $ReallocAsyncCtx4 + 72 | 0; //@line 7892
   HEAP32[$512 >> 2] = $36; //@line 7893
   $513 = $ReallocAsyncCtx4 + 76 | 0; //@line 7894
   HEAP32[$513 >> 2] = $38; //@line 7895
   $514 = $ReallocAsyncCtx4 + 80 | 0; //@line 7896
   HEAP32[$514 >> 2] = $40; //@line 7897
   $515 = $ReallocAsyncCtx4 + 84 | 0; //@line 7898
   HEAP32[$515 >> 2] = $42; //@line 7899
   $516 = $ReallocAsyncCtx4 + 88 | 0; //@line 7900
   HEAP32[$516 >> 2] = $44; //@line 7901
   $517 = $ReallocAsyncCtx4 + 92 | 0; //@line 7902
   HEAP32[$517 >> 2] = $46; //@line 7903
   $518 = $ReallocAsyncCtx4 + 96 | 0; //@line 7904
   HEAP32[$518 >> 2] = $48; //@line 7905
   $519 = $ReallocAsyncCtx4 + 100 | 0; //@line 7906
   HEAP32[$519 >> 2] = $50; //@line 7907
   $520 = $ReallocAsyncCtx4 + 104 | 0; //@line 7908
   HEAP32[$520 >> 2] = $52; //@line 7909
   $521 = $ReallocAsyncCtx4 + 108 | 0; //@line 7910
   HEAP32[$521 >> 2] = $54; //@line 7911
   $522 = $ReallocAsyncCtx4 + 112 | 0; //@line 7912
   HEAP32[$522 >> 2] = $56; //@line 7913
   $523 = $ReallocAsyncCtx4 + 116 | 0; //@line 7914
   HEAP32[$523 >> 2] = $58; //@line 7915
   $524 = $ReallocAsyncCtx4 + 120 | 0; //@line 7916
   HEAP32[$524 >> 2] = $60; //@line 7917
   $525 = $ReallocAsyncCtx4 + 124 | 0; //@line 7918
   HEAP32[$525 >> 2] = $62; //@line 7919
   $526 = $ReallocAsyncCtx4 + 128 | 0; //@line 7920
   HEAP32[$526 >> 2] = $64; //@line 7921
   $527 = $ReallocAsyncCtx4 + 132 | 0; //@line 7922
   HEAP32[$527 >> 2] = $66; //@line 7923
   $528 = $ReallocAsyncCtx4 + 136 | 0; //@line 7924
   HEAP32[$528 >> 2] = $68; //@line 7925
   $529 = $ReallocAsyncCtx4 + 140 | 0; //@line 7926
   HEAP8[$529 >> 0] = $480; //@line 7927
   $530 = $ReallocAsyncCtx4 + 144 | 0; //@line 7928
   HEAP32[$530 >> 2] = $72; //@line 7929
   $531 = $ReallocAsyncCtx4 + 148 | 0; //@line 7930
   HEAP32[$531 >> 2] = $74; //@line 7931
   $532 = $ReallocAsyncCtx4 + 152 | 0; //@line 7932
   HEAP32[$532 >> 2] = $76; //@line 7933
   $533 = $ReallocAsyncCtx4 + 156 | 0; //@line 7934
   HEAP32[$533 >> 2] = $78; //@line 7935
   $534 = $ReallocAsyncCtx4 + 160 | 0; //@line 7936
   HEAP32[$534 >> 2] = $80; //@line 7937
   $535 = $ReallocAsyncCtx4 + 164 | 0; //@line 7938
   HEAP32[$535 >> 2] = $82; //@line 7939
   $536 = $ReallocAsyncCtx4 + 168 | 0; //@line 7940
   HEAP32[$536 >> 2] = $84; //@line 7941
   $537 = $ReallocAsyncCtx4 + 172 | 0; //@line 7942
   HEAP32[$537 >> 2] = $86; //@line 7943
   $538 = $ReallocAsyncCtx4 + 176 | 0; //@line 7944
   HEAP32[$538 >> 2] = $88; //@line 7945
   $539 = $ReallocAsyncCtx4 + 180 | 0; //@line 7946
   HEAP32[$539 >> 2] = $90; //@line 7947
   $540 = $ReallocAsyncCtx4 + 184 | 0; //@line 7948
   HEAP32[$540 >> 2] = $92; //@line 7949
   $541 = $ReallocAsyncCtx4 + 188 | 0; //@line 7950
   HEAP32[$541 >> 2] = $94; //@line 7951
   $542 = $ReallocAsyncCtx4 + 192 | 0; //@line 7952
   HEAP32[$542 >> 2] = $96; //@line 7953
   $543 = $ReallocAsyncCtx4 + 196 | 0; //@line 7954
   HEAP32[$543 >> 2] = $98; //@line 7955
   $544 = $ReallocAsyncCtx4 + 200 | 0; //@line 7956
   HEAP32[$544 >> 2] = $100; //@line 7957
   $545 = $ReallocAsyncCtx4 + 204 | 0; //@line 7958
   HEAP32[$545 >> 2] = $102; //@line 7959
   $546 = $ReallocAsyncCtx4 + 208 | 0; //@line 7960
   HEAP32[$546 >> 2] = $104; //@line 7961
   $547 = $ReallocAsyncCtx4 + 212 | 0; //@line 7962
   HEAP32[$547 >> 2] = $106; //@line 7963
   $548 = $ReallocAsyncCtx4 + 216 | 0; //@line 7964
   HEAP32[$548 >> 2] = $108; //@line 7965
   $549 = $ReallocAsyncCtx4 + 220 | 0; //@line 7966
   HEAP32[$549 >> 2] = $110; //@line 7967
   $550 = $ReallocAsyncCtx4 + 224 | 0; //@line 7968
   HEAP32[$550 >> 2] = $112; //@line 7969
   $551 = $ReallocAsyncCtx4 + 228 | 0; //@line 7970
   HEAP32[$551 >> 2] = $114; //@line 7971
   $552 = $ReallocAsyncCtx4 + 232 | 0; //@line 7972
   HEAP32[$552 >> 2] = $116; //@line 7973
   $553 = $ReallocAsyncCtx4 + 236 | 0; //@line 7974
   HEAP32[$553 >> 2] = $118; //@line 7975
   $554 = $ReallocAsyncCtx4 + 240 | 0; //@line 7976
   HEAP32[$554 >> 2] = $120; //@line 7977
   $555 = $ReallocAsyncCtx4 + 244 | 0; //@line 7978
   HEAP32[$555 >> 2] = $122; //@line 7979
   $556 = $ReallocAsyncCtx4 + 248 | 0; //@line 7980
   HEAP32[$556 >> 2] = $124; //@line 7981
   $557 = $ReallocAsyncCtx4 + 252 | 0; //@line 7982
   HEAP32[$557 >> 2] = $126; //@line 7983
   $558 = $ReallocAsyncCtx4 + 256 | 0; //@line 7984
   HEAP32[$558 >> 2] = $128; //@line 7985
   $559 = $ReallocAsyncCtx4 + 260 | 0; //@line 7986
   HEAP32[$559 >> 2] = $130; //@line 7987
   $560 = $ReallocAsyncCtx4 + 264 | 0; //@line 7988
   HEAP32[$560 >> 2] = $$096$be; //@line 7989
   $561 = $ReallocAsyncCtx4 + 268 | 0; //@line 7990
   HEAP32[$561 >> 2] = $134; //@line 7991
   $562 = $ReallocAsyncCtx4 + 272 | 0; //@line 7992
   HEAP32[$562 >> 2] = $136; //@line 7993
   sp = STACKTOP; //@line 7994
   return;
  }
  HEAP8[___async_retval >> 0] = $494 & 1; //@line 7999
  ___async_unwind = 0; //@line 8000
  HEAP32[$ReallocAsyncCtx4 >> 2] = 493; //@line 8001
  $495 = $ReallocAsyncCtx4 + 4 | 0; //@line 8002
  HEAP32[$495 >> 2] = $2; //@line 8003
  $496 = $ReallocAsyncCtx4 + 8 | 0; //@line 8004
  HEAP32[$496 >> 2] = $4; //@line 8005
  $497 = $ReallocAsyncCtx4 + 12 | 0; //@line 8006
  HEAP8[$497 >> 0] = $6; //@line 8007
  $498 = $ReallocAsyncCtx4 + 16 | 0; //@line 8008
  HEAP32[$498 >> 2] = $8; //@line 8009
  $499 = $ReallocAsyncCtx4 + 20 | 0; //@line 8010
  HEAP32[$499 >> 2] = $10; //@line 8011
  $500 = $ReallocAsyncCtx4 + 24 | 0; //@line 8012
  HEAP32[$500 >> 2] = $12; //@line 8013
  $501 = $ReallocAsyncCtx4 + 28 | 0; //@line 8014
  HEAP32[$501 >> 2] = $14; //@line 8015
  $502 = $ReallocAsyncCtx4 + 32 | 0; //@line 8016
  HEAP32[$502 >> 2] = $16; //@line 8017
  $503 = $ReallocAsyncCtx4 + 36 | 0; //@line 8018
  HEAP32[$503 >> 2] = $18; //@line 8019
  $504 = $ReallocAsyncCtx4 + 40 | 0; //@line 8020
  HEAP32[$504 >> 2] = $20; //@line 8021
  $505 = $ReallocAsyncCtx4 + 44 | 0; //@line 8022
  HEAP32[$505 >> 2] = $22; //@line 8023
  $506 = $ReallocAsyncCtx4 + 48 | 0; //@line 8024
  HEAP32[$506 >> 2] = $24; //@line 8025
  $507 = $ReallocAsyncCtx4 + 52 | 0; //@line 8026
  HEAP32[$507 >> 2] = $26; //@line 8027
  $508 = $ReallocAsyncCtx4 + 56 | 0; //@line 8028
  HEAP32[$508 >> 2] = $28; //@line 8029
  $509 = $ReallocAsyncCtx4 + 60 | 0; //@line 8030
  HEAP8[$509 >> 0] = $30; //@line 8031
  $510 = $ReallocAsyncCtx4 + 64 | 0; //@line 8032
  HEAP32[$510 >> 2] = $32; //@line 8033
  $511 = $ReallocAsyncCtx4 + 68 | 0; //@line 8034
  HEAP8[$511 >> 0] = $34; //@line 8035
  $512 = $ReallocAsyncCtx4 + 72 | 0; //@line 8036
  HEAP32[$512 >> 2] = $36; //@line 8037
  $513 = $ReallocAsyncCtx4 + 76 | 0; //@line 8038
  HEAP32[$513 >> 2] = $38; //@line 8039
  $514 = $ReallocAsyncCtx4 + 80 | 0; //@line 8040
  HEAP32[$514 >> 2] = $40; //@line 8041
  $515 = $ReallocAsyncCtx4 + 84 | 0; //@line 8042
  HEAP32[$515 >> 2] = $42; //@line 8043
  $516 = $ReallocAsyncCtx4 + 88 | 0; //@line 8044
  HEAP32[$516 >> 2] = $44; //@line 8045
  $517 = $ReallocAsyncCtx4 + 92 | 0; //@line 8046
  HEAP32[$517 >> 2] = $46; //@line 8047
  $518 = $ReallocAsyncCtx4 + 96 | 0; //@line 8048
  HEAP32[$518 >> 2] = $48; //@line 8049
  $519 = $ReallocAsyncCtx4 + 100 | 0; //@line 8050
  HEAP32[$519 >> 2] = $50; //@line 8051
  $520 = $ReallocAsyncCtx4 + 104 | 0; //@line 8052
  HEAP32[$520 >> 2] = $52; //@line 8053
  $521 = $ReallocAsyncCtx4 + 108 | 0; //@line 8054
  HEAP32[$521 >> 2] = $54; //@line 8055
  $522 = $ReallocAsyncCtx4 + 112 | 0; //@line 8056
  HEAP32[$522 >> 2] = $56; //@line 8057
  $523 = $ReallocAsyncCtx4 + 116 | 0; //@line 8058
  HEAP32[$523 >> 2] = $58; //@line 8059
  $524 = $ReallocAsyncCtx4 + 120 | 0; //@line 8060
  HEAP32[$524 >> 2] = $60; //@line 8061
  $525 = $ReallocAsyncCtx4 + 124 | 0; //@line 8062
  HEAP32[$525 >> 2] = $62; //@line 8063
  $526 = $ReallocAsyncCtx4 + 128 | 0; //@line 8064
  HEAP32[$526 >> 2] = $64; //@line 8065
  $527 = $ReallocAsyncCtx4 + 132 | 0; //@line 8066
  HEAP32[$527 >> 2] = $66; //@line 8067
  $528 = $ReallocAsyncCtx4 + 136 | 0; //@line 8068
  HEAP32[$528 >> 2] = $68; //@line 8069
  $529 = $ReallocAsyncCtx4 + 140 | 0; //@line 8070
  HEAP8[$529 >> 0] = $480; //@line 8071
  $530 = $ReallocAsyncCtx4 + 144 | 0; //@line 8072
  HEAP32[$530 >> 2] = $72; //@line 8073
  $531 = $ReallocAsyncCtx4 + 148 | 0; //@line 8074
  HEAP32[$531 >> 2] = $74; //@line 8075
  $532 = $ReallocAsyncCtx4 + 152 | 0; //@line 8076
  HEAP32[$532 >> 2] = $76; //@line 8077
  $533 = $ReallocAsyncCtx4 + 156 | 0; //@line 8078
  HEAP32[$533 >> 2] = $78; //@line 8079
  $534 = $ReallocAsyncCtx4 + 160 | 0; //@line 8080
  HEAP32[$534 >> 2] = $80; //@line 8081
  $535 = $ReallocAsyncCtx4 + 164 | 0; //@line 8082
  HEAP32[$535 >> 2] = $82; //@line 8083
  $536 = $ReallocAsyncCtx4 + 168 | 0; //@line 8084
  HEAP32[$536 >> 2] = $84; //@line 8085
  $537 = $ReallocAsyncCtx4 + 172 | 0; //@line 8086
  HEAP32[$537 >> 2] = $86; //@line 8087
  $538 = $ReallocAsyncCtx4 + 176 | 0; //@line 8088
  HEAP32[$538 >> 2] = $88; //@line 8089
  $539 = $ReallocAsyncCtx4 + 180 | 0; //@line 8090
  HEAP32[$539 >> 2] = $90; //@line 8091
  $540 = $ReallocAsyncCtx4 + 184 | 0; //@line 8092
  HEAP32[$540 >> 2] = $92; //@line 8093
  $541 = $ReallocAsyncCtx4 + 188 | 0; //@line 8094
  HEAP32[$541 >> 2] = $94; //@line 8095
  $542 = $ReallocAsyncCtx4 + 192 | 0; //@line 8096
  HEAP32[$542 >> 2] = $96; //@line 8097
  $543 = $ReallocAsyncCtx4 + 196 | 0; //@line 8098
  HEAP32[$543 >> 2] = $98; //@line 8099
  $544 = $ReallocAsyncCtx4 + 200 | 0; //@line 8100
  HEAP32[$544 >> 2] = $100; //@line 8101
  $545 = $ReallocAsyncCtx4 + 204 | 0; //@line 8102
  HEAP32[$545 >> 2] = $102; //@line 8103
  $546 = $ReallocAsyncCtx4 + 208 | 0; //@line 8104
  HEAP32[$546 >> 2] = $104; //@line 8105
  $547 = $ReallocAsyncCtx4 + 212 | 0; //@line 8106
  HEAP32[$547 >> 2] = $106; //@line 8107
  $548 = $ReallocAsyncCtx4 + 216 | 0; //@line 8108
  HEAP32[$548 >> 2] = $108; //@line 8109
  $549 = $ReallocAsyncCtx4 + 220 | 0; //@line 8110
  HEAP32[$549 >> 2] = $110; //@line 8111
  $550 = $ReallocAsyncCtx4 + 224 | 0; //@line 8112
  HEAP32[$550 >> 2] = $112; //@line 8113
  $551 = $ReallocAsyncCtx4 + 228 | 0; //@line 8114
  HEAP32[$551 >> 2] = $114; //@line 8115
  $552 = $ReallocAsyncCtx4 + 232 | 0; //@line 8116
  HEAP32[$552 >> 2] = $116; //@line 8117
  $553 = $ReallocAsyncCtx4 + 236 | 0; //@line 8118
  HEAP32[$553 >> 2] = $118; //@line 8119
  $554 = $ReallocAsyncCtx4 + 240 | 0; //@line 8120
  HEAP32[$554 >> 2] = $120; //@line 8121
  $555 = $ReallocAsyncCtx4 + 244 | 0; //@line 8122
  HEAP32[$555 >> 2] = $122; //@line 8123
  $556 = $ReallocAsyncCtx4 + 248 | 0; //@line 8124
  HEAP32[$556 >> 2] = $124; //@line 8125
  $557 = $ReallocAsyncCtx4 + 252 | 0; //@line 8126
  HEAP32[$557 >> 2] = $126; //@line 8127
  $558 = $ReallocAsyncCtx4 + 256 | 0; //@line 8128
  HEAP32[$558 >> 2] = $128; //@line 8129
  $559 = $ReallocAsyncCtx4 + 260 | 0; //@line 8130
  HEAP32[$559 >> 2] = $130; //@line 8131
  $560 = $ReallocAsyncCtx4 + 264 | 0; //@line 8132
  HEAP32[$560 >> 2] = $$096$be; //@line 8133
  $561 = $ReallocAsyncCtx4 + 268 | 0; //@line 8134
  HEAP32[$561 >> 2] = $134; //@line 8135
  $562 = $ReallocAsyncCtx4 + 272 | 0; //@line 8136
  HEAP32[$562 >> 2] = $136; //@line 8137
  sp = STACKTOP; //@line 8138
  return;
 } else if ((label | 0) == 28) {
  HEAP8[$16 >> 0] = HEAP8[$36 + ($139 & 255) >> 0] | 0; //@line 8146
  $594 = $$0$be + 5 << 24 >> 24; //@line 8159
  HEAP32[$4 >> 2] = (HEAPU8[$36 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$36 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$36 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 8167
  $604 = HEAP32[(HEAP32[$32 >> 2] | 0) + 48 >> 2] | 0; //@line 8170
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(272) | 0; //@line 8171
  $605 = FUNCTION_TABLE_iii[$604 & 31]($20, $102) | 0; //@line 8172
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 494; //@line 8175
   $606 = $ReallocAsyncCtx5 + 4 | 0; //@line 8176
   HEAP32[$606 >> 2] = $2; //@line 8177
   $607 = $ReallocAsyncCtx5 + 8 | 0; //@line 8178
   HEAP32[$607 >> 2] = $4; //@line 8179
   $608 = $ReallocAsyncCtx5 + 12 | 0; //@line 8180
   HEAP8[$608 >> 0] = $6; //@line 8181
   $609 = $ReallocAsyncCtx5 + 16 | 0; //@line 8182
   HEAP32[$609 >> 2] = $8; //@line 8183
   $610 = $ReallocAsyncCtx5 + 20 | 0; //@line 8184
   HEAP32[$610 >> 2] = $10; //@line 8185
   $611 = $ReallocAsyncCtx5 + 24 | 0; //@line 8186
   HEAP32[$611 >> 2] = $12; //@line 8187
   $612 = $ReallocAsyncCtx5 + 28 | 0; //@line 8188
   HEAP32[$612 >> 2] = $14; //@line 8189
   $613 = $ReallocAsyncCtx5 + 32 | 0; //@line 8190
   HEAP32[$613 >> 2] = $16; //@line 8191
   $614 = $ReallocAsyncCtx5 + 36 | 0; //@line 8192
   HEAP32[$614 >> 2] = $18; //@line 8193
   $615 = $ReallocAsyncCtx5 + 40 | 0; //@line 8194
   HEAP32[$615 >> 2] = $20; //@line 8195
   $616 = $ReallocAsyncCtx5 + 44 | 0; //@line 8196
   HEAP32[$616 >> 2] = $22; //@line 8197
   $617 = $ReallocAsyncCtx5 + 48 | 0; //@line 8198
   HEAP32[$617 >> 2] = $24; //@line 8199
   $618 = $ReallocAsyncCtx5 + 52 | 0; //@line 8200
   HEAP32[$618 >> 2] = $26; //@line 8201
   $619 = $ReallocAsyncCtx5 + 56 | 0; //@line 8202
   HEAP32[$619 >> 2] = $28; //@line 8203
   $620 = $ReallocAsyncCtx5 + 60 | 0; //@line 8204
   HEAP8[$620 >> 0] = $30; //@line 8205
   $621 = $ReallocAsyncCtx5 + 64 | 0; //@line 8206
   HEAP32[$621 >> 2] = $32; //@line 8207
   $622 = $ReallocAsyncCtx5 + 68 | 0; //@line 8208
   HEAP8[$622 >> 0] = $34; //@line 8209
   $623 = $ReallocAsyncCtx5 + 72 | 0; //@line 8210
   HEAP32[$623 >> 2] = $36; //@line 8211
   $624 = $ReallocAsyncCtx5 + 76 | 0; //@line 8212
   HEAP32[$624 >> 2] = $38; //@line 8213
   $625 = $ReallocAsyncCtx5 + 80 | 0; //@line 8214
   HEAP32[$625 >> 2] = $40; //@line 8215
   $626 = $ReallocAsyncCtx5 + 84 | 0; //@line 8216
   HEAP32[$626 >> 2] = $42; //@line 8217
   $627 = $ReallocAsyncCtx5 + 88 | 0; //@line 8218
   HEAP32[$627 >> 2] = $44; //@line 8219
   $628 = $ReallocAsyncCtx5 + 92 | 0; //@line 8220
   HEAP32[$628 >> 2] = $46; //@line 8221
   $629 = $ReallocAsyncCtx5 + 96 | 0; //@line 8222
   HEAP32[$629 >> 2] = $48; //@line 8223
   $630 = $ReallocAsyncCtx5 + 100 | 0; //@line 8224
   HEAP32[$630 >> 2] = $50; //@line 8225
   $631 = $ReallocAsyncCtx5 + 104 | 0; //@line 8226
   HEAP32[$631 >> 2] = $52; //@line 8227
   $632 = $ReallocAsyncCtx5 + 108 | 0; //@line 8228
   HEAP32[$632 >> 2] = $54; //@line 8229
   $633 = $ReallocAsyncCtx5 + 112 | 0; //@line 8230
   HEAP32[$633 >> 2] = $56; //@line 8231
   $634 = $ReallocAsyncCtx5 + 116 | 0; //@line 8232
   HEAP32[$634 >> 2] = $58; //@line 8233
   $635 = $ReallocAsyncCtx5 + 120 | 0; //@line 8234
   HEAP32[$635 >> 2] = $60; //@line 8235
   $636 = $ReallocAsyncCtx5 + 124 | 0; //@line 8236
   HEAP32[$636 >> 2] = $62; //@line 8237
   $637 = $ReallocAsyncCtx5 + 128 | 0; //@line 8238
   HEAP32[$637 >> 2] = $64; //@line 8239
   $638 = $ReallocAsyncCtx5 + 132 | 0; //@line 8240
   HEAP32[$638 >> 2] = $66; //@line 8241
   $639 = $ReallocAsyncCtx5 + 136 | 0; //@line 8242
   HEAP32[$639 >> 2] = $68; //@line 8243
   $640 = $ReallocAsyncCtx5 + 140 | 0; //@line 8244
   HEAP32[$640 >> 2] = $72; //@line 8245
   $641 = $ReallocAsyncCtx5 + 144 | 0; //@line 8246
   HEAP32[$641 >> 2] = $74; //@line 8247
   $642 = $ReallocAsyncCtx5 + 148 | 0; //@line 8248
   HEAP32[$642 >> 2] = $76; //@line 8249
   $643 = $ReallocAsyncCtx5 + 152 | 0; //@line 8250
   HEAP32[$643 >> 2] = $78; //@line 8251
   $644 = $ReallocAsyncCtx5 + 156 | 0; //@line 8252
   HEAP32[$644 >> 2] = $80; //@line 8253
   $645 = $ReallocAsyncCtx5 + 160 | 0; //@line 8254
   HEAP32[$645 >> 2] = $82; //@line 8255
   $646 = $ReallocAsyncCtx5 + 164 | 0; //@line 8256
   HEAP32[$646 >> 2] = $84; //@line 8257
   $647 = $ReallocAsyncCtx5 + 168 | 0; //@line 8258
   HEAP32[$647 >> 2] = $86; //@line 8259
   $648 = $ReallocAsyncCtx5 + 172 | 0; //@line 8260
   HEAP32[$648 >> 2] = $88; //@line 8261
   $649 = $ReallocAsyncCtx5 + 176 | 0; //@line 8262
   HEAP32[$649 >> 2] = $90; //@line 8263
   $650 = $ReallocAsyncCtx5 + 180 | 0; //@line 8264
   HEAP32[$650 >> 2] = $92; //@line 8265
   $651 = $ReallocAsyncCtx5 + 184 | 0; //@line 8266
   HEAP32[$651 >> 2] = $94; //@line 8267
   $652 = $ReallocAsyncCtx5 + 188 | 0; //@line 8268
   HEAP32[$652 >> 2] = $96; //@line 8269
   $653 = $ReallocAsyncCtx5 + 192 | 0; //@line 8270
   HEAP32[$653 >> 2] = $98; //@line 8271
   $654 = $ReallocAsyncCtx5 + 196 | 0; //@line 8272
   HEAP32[$654 >> 2] = $100; //@line 8273
   $655 = $ReallocAsyncCtx5 + 200 | 0; //@line 8274
   HEAP32[$655 >> 2] = $102; //@line 8275
   $656 = $ReallocAsyncCtx5 + 204 | 0; //@line 8276
   HEAP8[$656 >> 0] = $594; //@line 8277
   $657 = $ReallocAsyncCtx5 + 208 | 0; //@line 8278
   HEAP32[$657 >> 2] = $104; //@line 8279
   $658 = $ReallocAsyncCtx5 + 212 | 0; //@line 8280
   HEAP32[$658 >> 2] = $106; //@line 8281
   $659 = $ReallocAsyncCtx5 + 216 | 0; //@line 8282
   HEAP32[$659 >> 2] = $108; //@line 8283
   $660 = $ReallocAsyncCtx5 + 220 | 0; //@line 8284
   HEAP32[$660 >> 2] = $110; //@line 8285
   $661 = $ReallocAsyncCtx5 + 224 | 0; //@line 8286
   HEAP32[$661 >> 2] = $112; //@line 8287
   $662 = $ReallocAsyncCtx5 + 228 | 0; //@line 8288
   HEAP32[$662 >> 2] = $114; //@line 8289
   $663 = $ReallocAsyncCtx5 + 232 | 0; //@line 8290
   HEAP32[$663 >> 2] = $116; //@line 8291
   $664 = $ReallocAsyncCtx5 + 236 | 0; //@line 8292
   HEAP32[$664 >> 2] = $118; //@line 8293
   $665 = $ReallocAsyncCtx5 + 240 | 0; //@line 8294
   HEAP32[$665 >> 2] = $120; //@line 8295
   $666 = $ReallocAsyncCtx5 + 244 | 0; //@line 8296
   HEAP32[$666 >> 2] = $122; //@line 8297
   $667 = $ReallocAsyncCtx5 + 248 | 0; //@line 8298
   HEAP32[$667 >> 2] = $124; //@line 8299
   $668 = $ReallocAsyncCtx5 + 252 | 0; //@line 8300
   HEAP32[$668 >> 2] = $126; //@line 8301
   $669 = $ReallocAsyncCtx5 + 256 | 0; //@line 8302
   HEAP32[$669 >> 2] = $128; //@line 8303
   $670 = $ReallocAsyncCtx5 + 260 | 0; //@line 8304
   HEAP32[$670 >> 2] = $130; //@line 8305
   $671 = $ReallocAsyncCtx5 + 264 | 0; //@line 8306
   HEAP32[$671 >> 2] = $134; //@line 8307
   $672 = $ReallocAsyncCtx5 + 268 | 0; //@line 8308
   HEAP32[$672 >> 2] = $136; //@line 8309
   sp = STACKTOP; //@line 8310
   return;
  }
  HEAP8[___async_retval >> 0] = $605; //@line 8314
  ___async_unwind = 0; //@line 8315
  HEAP32[$ReallocAsyncCtx5 >> 2] = 494; //@line 8316
  $606 = $ReallocAsyncCtx5 + 4 | 0; //@line 8317
  HEAP32[$606 >> 2] = $2; //@line 8318
  $607 = $ReallocAsyncCtx5 + 8 | 0; //@line 8319
  HEAP32[$607 >> 2] = $4; //@line 8320
  $608 = $ReallocAsyncCtx5 + 12 | 0; //@line 8321
  HEAP8[$608 >> 0] = $6; //@line 8322
  $609 = $ReallocAsyncCtx5 + 16 | 0; //@line 8323
  HEAP32[$609 >> 2] = $8; //@line 8324
  $610 = $ReallocAsyncCtx5 + 20 | 0; //@line 8325
  HEAP32[$610 >> 2] = $10; //@line 8326
  $611 = $ReallocAsyncCtx5 + 24 | 0; //@line 8327
  HEAP32[$611 >> 2] = $12; //@line 8328
  $612 = $ReallocAsyncCtx5 + 28 | 0; //@line 8329
  HEAP32[$612 >> 2] = $14; //@line 8330
  $613 = $ReallocAsyncCtx5 + 32 | 0; //@line 8331
  HEAP32[$613 >> 2] = $16; //@line 8332
  $614 = $ReallocAsyncCtx5 + 36 | 0; //@line 8333
  HEAP32[$614 >> 2] = $18; //@line 8334
  $615 = $ReallocAsyncCtx5 + 40 | 0; //@line 8335
  HEAP32[$615 >> 2] = $20; //@line 8336
  $616 = $ReallocAsyncCtx5 + 44 | 0; //@line 8337
  HEAP32[$616 >> 2] = $22; //@line 8338
  $617 = $ReallocAsyncCtx5 + 48 | 0; //@line 8339
  HEAP32[$617 >> 2] = $24; //@line 8340
  $618 = $ReallocAsyncCtx5 + 52 | 0; //@line 8341
  HEAP32[$618 >> 2] = $26; //@line 8342
  $619 = $ReallocAsyncCtx5 + 56 | 0; //@line 8343
  HEAP32[$619 >> 2] = $28; //@line 8344
  $620 = $ReallocAsyncCtx5 + 60 | 0; //@line 8345
  HEAP8[$620 >> 0] = $30; //@line 8346
  $621 = $ReallocAsyncCtx5 + 64 | 0; //@line 8347
  HEAP32[$621 >> 2] = $32; //@line 8348
  $622 = $ReallocAsyncCtx5 + 68 | 0; //@line 8349
  HEAP8[$622 >> 0] = $34; //@line 8350
  $623 = $ReallocAsyncCtx5 + 72 | 0; //@line 8351
  HEAP32[$623 >> 2] = $36; //@line 8352
  $624 = $ReallocAsyncCtx5 + 76 | 0; //@line 8353
  HEAP32[$624 >> 2] = $38; //@line 8354
  $625 = $ReallocAsyncCtx5 + 80 | 0; //@line 8355
  HEAP32[$625 >> 2] = $40; //@line 8356
  $626 = $ReallocAsyncCtx5 + 84 | 0; //@line 8357
  HEAP32[$626 >> 2] = $42; //@line 8358
  $627 = $ReallocAsyncCtx5 + 88 | 0; //@line 8359
  HEAP32[$627 >> 2] = $44; //@line 8360
  $628 = $ReallocAsyncCtx5 + 92 | 0; //@line 8361
  HEAP32[$628 >> 2] = $46; //@line 8362
  $629 = $ReallocAsyncCtx5 + 96 | 0; //@line 8363
  HEAP32[$629 >> 2] = $48; //@line 8364
  $630 = $ReallocAsyncCtx5 + 100 | 0; //@line 8365
  HEAP32[$630 >> 2] = $50; //@line 8366
  $631 = $ReallocAsyncCtx5 + 104 | 0; //@line 8367
  HEAP32[$631 >> 2] = $52; //@line 8368
  $632 = $ReallocAsyncCtx5 + 108 | 0; //@line 8369
  HEAP32[$632 >> 2] = $54; //@line 8370
  $633 = $ReallocAsyncCtx5 + 112 | 0; //@line 8371
  HEAP32[$633 >> 2] = $56; //@line 8372
  $634 = $ReallocAsyncCtx5 + 116 | 0; //@line 8373
  HEAP32[$634 >> 2] = $58; //@line 8374
  $635 = $ReallocAsyncCtx5 + 120 | 0; //@line 8375
  HEAP32[$635 >> 2] = $60; //@line 8376
  $636 = $ReallocAsyncCtx5 + 124 | 0; //@line 8377
  HEAP32[$636 >> 2] = $62; //@line 8378
  $637 = $ReallocAsyncCtx5 + 128 | 0; //@line 8379
  HEAP32[$637 >> 2] = $64; //@line 8380
  $638 = $ReallocAsyncCtx5 + 132 | 0; //@line 8381
  HEAP32[$638 >> 2] = $66; //@line 8382
  $639 = $ReallocAsyncCtx5 + 136 | 0; //@line 8383
  HEAP32[$639 >> 2] = $68; //@line 8384
  $640 = $ReallocAsyncCtx5 + 140 | 0; //@line 8385
  HEAP32[$640 >> 2] = $72; //@line 8386
  $641 = $ReallocAsyncCtx5 + 144 | 0; //@line 8387
  HEAP32[$641 >> 2] = $74; //@line 8388
  $642 = $ReallocAsyncCtx5 + 148 | 0; //@line 8389
  HEAP32[$642 >> 2] = $76; //@line 8390
  $643 = $ReallocAsyncCtx5 + 152 | 0; //@line 8391
  HEAP32[$643 >> 2] = $78; //@line 8392
  $644 = $ReallocAsyncCtx5 + 156 | 0; //@line 8393
  HEAP32[$644 >> 2] = $80; //@line 8394
  $645 = $ReallocAsyncCtx5 + 160 | 0; //@line 8395
  HEAP32[$645 >> 2] = $82; //@line 8396
  $646 = $ReallocAsyncCtx5 + 164 | 0; //@line 8397
  HEAP32[$646 >> 2] = $84; //@line 8398
  $647 = $ReallocAsyncCtx5 + 168 | 0; //@line 8399
  HEAP32[$647 >> 2] = $86; //@line 8400
  $648 = $ReallocAsyncCtx5 + 172 | 0; //@line 8401
  HEAP32[$648 >> 2] = $88; //@line 8402
  $649 = $ReallocAsyncCtx5 + 176 | 0; //@line 8403
  HEAP32[$649 >> 2] = $90; //@line 8404
  $650 = $ReallocAsyncCtx5 + 180 | 0; //@line 8405
  HEAP32[$650 >> 2] = $92; //@line 8406
  $651 = $ReallocAsyncCtx5 + 184 | 0; //@line 8407
  HEAP32[$651 >> 2] = $94; //@line 8408
  $652 = $ReallocAsyncCtx5 + 188 | 0; //@line 8409
  HEAP32[$652 >> 2] = $96; //@line 8410
  $653 = $ReallocAsyncCtx5 + 192 | 0; //@line 8411
  HEAP32[$653 >> 2] = $98; //@line 8412
  $654 = $ReallocAsyncCtx5 + 196 | 0; //@line 8413
  HEAP32[$654 >> 2] = $100; //@line 8414
  $655 = $ReallocAsyncCtx5 + 200 | 0; //@line 8415
  HEAP32[$655 >> 2] = $102; //@line 8416
  $656 = $ReallocAsyncCtx5 + 204 | 0; //@line 8417
  HEAP8[$656 >> 0] = $594; //@line 8418
  $657 = $ReallocAsyncCtx5 + 208 | 0; //@line 8419
  HEAP32[$657 >> 2] = $104; //@line 8420
  $658 = $ReallocAsyncCtx5 + 212 | 0; //@line 8421
  HEAP32[$658 >> 2] = $106; //@line 8422
  $659 = $ReallocAsyncCtx5 + 216 | 0; //@line 8423
  HEAP32[$659 >> 2] = $108; //@line 8424
  $660 = $ReallocAsyncCtx5 + 220 | 0; //@line 8425
  HEAP32[$660 >> 2] = $110; //@line 8426
  $661 = $ReallocAsyncCtx5 + 224 | 0; //@line 8427
  HEAP32[$661 >> 2] = $112; //@line 8428
  $662 = $ReallocAsyncCtx5 + 228 | 0; //@line 8429
  HEAP32[$662 >> 2] = $114; //@line 8430
  $663 = $ReallocAsyncCtx5 + 232 | 0; //@line 8431
  HEAP32[$663 >> 2] = $116; //@line 8432
  $664 = $ReallocAsyncCtx5 + 236 | 0; //@line 8433
  HEAP32[$664 >> 2] = $118; //@line 8434
  $665 = $ReallocAsyncCtx5 + 240 | 0; //@line 8435
  HEAP32[$665 >> 2] = $120; //@line 8436
  $666 = $ReallocAsyncCtx5 + 244 | 0; //@line 8437
  HEAP32[$666 >> 2] = $122; //@line 8438
  $667 = $ReallocAsyncCtx5 + 248 | 0; //@line 8439
  HEAP32[$667 >> 2] = $124; //@line 8440
  $668 = $ReallocAsyncCtx5 + 252 | 0; //@line 8441
  HEAP32[$668 >> 2] = $126; //@line 8442
  $669 = $ReallocAsyncCtx5 + 256 | 0; //@line 8443
  HEAP32[$669 >> 2] = $128; //@line 8444
  $670 = $ReallocAsyncCtx5 + 260 | 0; //@line 8445
  HEAP32[$670 >> 2] = $130; //@line 8446
  $671 = $ReallocAsyncCtx5 + 264 | 0; //@line 8447
  HEAP32[$671 >> 2] = $134; //@line 8448
  $672 = $ReallocAsyncCtx5 + 268 | 0; //@line 8449
  HEAP32[$672 >> 2] = $136; //@line 8450
  sp = STACKTOP; //@line 8451
  return;
 } else if ((label | 0) == 32) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 8456
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_181($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i108 = 0, $$096$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $137 = 0, $14 = 0, $148 = 0, $149 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $231 = 0, $234 = 0, $239 = 0, $24 = 0, $247 = 0, $26 = 0, $266 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $347 = 0, $348 = 0, $36 = 0, $38 = 0, $385 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $462 = 0, $463 = 0, $473 = 0, $477 = 0, $48 = 0, $481 = 0, $484 = 0, $490 = 0, $493 = 0, $494 = 0, $50 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $58 = 0, $590 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4638
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4640
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4642
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 4644
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4646
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4648
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4650
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4652
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 4654
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 4656
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 4658
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 4660
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 4662
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 4664
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 4666
 $30 = HEAP8[$0 + 60 >> 0] | 0; //@line 4668
 $32 = HEAP8[$0 + 61 >> 0] | 0; //@line 4670
 $34 = HEAP32[$0 + 64 >> 2] | 0; //@line 4672
 $36 = HEAP8[$0 + 68 >> 0] | 0; //@line 4674
 $38 = HEAP32[$0 + 72 >> 2] | 0; //@line 4676
 $40 = HEAP32[$0 + 76 >> 2] | 0; //@line 4678
 $42 = HEAP32[$0 + 80 >> 2] | 0; //@line 4680
 $44 = HEAP32[$0 + 84 >> 2] | 0; //@line 4682
 $46 = HEAP32[$0 + 88 >> 2] | 0; //@line 4684
 $48 = HEAP32[$0 + 92 >> 2] | 0; //@line 4686
 $50 = HEAP32[$0 + 96 >> 2] | 0; //@line 4688
 $52 = HEAP32[$0 + 100 >> 2] | 0; //@line 4690
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 4692
 $56 = HEAP32[$0 + 108 >> 2] | 0; //@line 4694
 $58 = HEAP32[$0 + 112 >> 2] | 0; //@line 4696
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 4698
 $62 = HEAP32[$0 + 120 >> 2] | 0; //@line 4700
 $64 = HEAP32[$0 + 124 >> 2] | 0; //@line 4702
 $66 = HEAP32[$0 + 128 >> 2] | 0; //@line 4704
 $68 = HEAP32[$0 + 132 >> 2] | 0; //@line 4706
 $70 = HEAP32[$0 + 136 >> 2] | 0; //@line 4708
 $72 = HEAP32[$0 + 140 >> 2] | 0; //@line 4710
 $74 = HEAP32[$0 + 144 >> 2] | 0; //@line 4712
 $76 = HEAP32[$0 + 148 >> 2] | 0; //@line 4714
 $78 = HEAP32[$0 + 152 >> 2] | 0; //@line 4716
 $80 = HEAP32[$0 + 156 >> 2] | 0; //@line 4718
 $82 = HEAP32[$0 + 160 >> 2] | 0; //@line 4720
 $84 = HEAP32[$0 + 164 >> 2] | 0; //@line 4722
 $86 = HEAP32[$0 + 168 >> 2] | 0; //@line 4724
 $88 = HEAP32[$0 + 172 >> 2] | 0; //@line 4726
 $90 = HEAP32[$0 + 176 >> 2] | 0; //@line 4728
 $92 = HEAP32[$0 + 180 >> 2] | 0; //@line 4730
 $94 = HEAP32[$0 + 184 >> 2] | 0; //@line 4732
 $96 = HEAP32[$0 + 188 >> 2] | 0; //@line 4734
 $98 = HEAP32[$0 + 192 >> 2] | 0; //@line 4736
 $100 = HEAP32[$0 + 196 >> 2] | 0; //@line 4738
 $102 = HEAP32[$0 + 200 >> 2] | 0; //@line 4740
 $104 = HEAP32[$0 + 204 >> 2] | 0; //@line 4742
 $106 = HEAP32[$0 + 208 >> 2] | 0; //@line 4744
 $108 = HEAP32[$0 + 212 >> 2] | 0; //@line 4746
 $110 = HEAP32[$0 + 216 >> 2] | 0; //@line 4748
 $112 = HEAP32[$0 + 220 >> 2] | 0; //@line 4750
 $114 = HEAP32[$0 + 224 >> 2] | 0; //@line 4752
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 4754
 $118 = HEAP32[$0 + 232 >> 2] | 0; //@line 4756
 $120 = HEAP32[$0 + 236 >> 2] | 0; //@line 4758
 $122 = HEAP32[$0 + 240 >> 2] | 0; //@line 4760
 $124 = HEAP32[$0 + 244 >> 2] | 0; //@line 4762
 $126 = HEAP32[$0 + 248 >> 2] | 0; //@line 4764
 $128 = HEAP32[$0 + 252 >> 2] | 0; //@line 4766
 $130 = HEAP32[$0 + 256 >> 2] | 0; //@line 4768
 $132 = HEAP32[$0 + 260 >> 2] | 0; //@line 4770
 $134 = HEAP32[$0 + 264 >> 2] | 0; //@line 4772
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 4774
 $462 = HEAP8[$44 >> 0] | 0; //@line 4776
 $463 = $462 & 255; //@line 4777
 if (((-128 - (HEAP8[$14 >> 0] | 0) & 255) + -1 | 0) > ($463 | 0)) {
  HEAP8[$24 + 4 + $463 >> 0] = 7; //@line 4788
  HEAP8[$44 >> 0] = $462 + 2 << 24 >> 24; //@line 4789
  HEAP8[($462 + 1 & 255) + ($24 + 4) >> 0] = $AsyncRetVal; //@line 4790
  HEAP8[$118 >> 0] = 1; //@line 4791
  $$0$i108 = 0; //@line 4792
 } else {
  $$0$i108 = -1e3; //@line 4794
 }
 $$0$be = $30; //@line 4796
 $$096$be = $$0$i108; //@line 4796
 L5 : while (1) {
  if (($$0$be & 255) >= ($36 & 255)) {
   label = 31; //@line 4800
   break;
  }
  $137 = $$0$be + 1 << 24 >> 24; //@line 4804
  switch (HEAP8[$38 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 4809
    break L5;
    break;
   }
  case 5:
   {
    label = 9; //@line 4814
    break L5;
    break;
   }
  case 7:
   {
    label = 14; //@line 4819
    break L5;
    break;
   }
  case 9:
   {
    label = 22; //@line 4824
    break L5;
    break;
   }
  case 10:
   {
    label = 27; //@line 4829
    break L5;
    break;
   }
  case 2:
   {
    HEAP32[$68 >> 2] = 0; //@line 4834
    HEAP8[$12 >> 0] = HEAP8[$38 + ($137 & 255) >> 0] | 0; //@line 4839
    HEAP8[$26 >> 0] = HEAP8[$38 + ($$0$be + 2 & 255) >> 0] | 0; //@line 4844
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 4845
    continue L5;
    break;
   }
  case 4:
   {
    $231 = $$0$be + 2 << 24 >> 24; //@line 4850
    $234 = HEAP8[$38 + ($137 & 255) >> 0] | 0; //@line 4853
    HEAP8[$110 >> 0] = $234; //@line 4854
    HEAP16[$132 >> 1] = 1 << ($234 & 255); //@line 4858
    $239 = HEAP8[$44 >> 0] | 0; //@line 4860
    if (($239 & 255) >= (-128 - (HEAP8[$14 >> 0] | 0) & 255)) {
     $$0$be = $231; //@line 4864
     $$096$be = -1e3; //@line 4864
     continue L5;
    }
    HEAP8[$44 >> 0] = $239 + 1 << 24 >> 24; //@line 4870
    HEAP8[($239 & 255) + ($24 + 4) >> 0] = 4; //@line 4871
    HEAP8[$118 >> 0] = 1; //@line 4872
    $$0$be = $231; //@line 4873
    $$096$be = 0; //@line 4873
    continue L5;
    break;
   }
  case 6:
   {
    $347 = HEAP8[$44 >> 0] | 0; //@line 4879
    $348 = $347 & 255; //@line 4880
    if (((-128 - (HEAP8[$14 >> 0] | 0) & 255) + -2 | 0) <= ($348 | 0)) {
     $$0$be = $137; //@line 4886
     $$096$be = -1e3; //@line 4886
     continue L5;
    }
    HEAP8[$24 + 4 + $348 >> 0] = 6; //@line 4891
    HEAP8[($347 + 1 & 255) + ($24 + 4) >> 0] = -1; //@line 4895
    HEAP8[$44 >> 0] = $347 + 3 << 24 >> 24; //@line 4897
    HEAP8[($347 + 2 & 255) + ($24 + 4) >> 0] = $6; //@line 4900
    HEAP8[$118 >> 0] = 1; //@line 4901
    $$0$be = $137; //@line 4902
    $$096$be = 0; //@line 4902
    continue L5;
    break;
   }
  case 8:
   {
    $473 = $$0$be + 2 << 24 >> 24; //@line 4907
    $477 = HEAP8[$38 + ($137 & 255) >> 0] & 15; //@line 4911
    $481 = ($477 + ($477 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 4916
    HEAP32[$88 >> 2] = $481; //@line 4917
    HEAP32[$76 >> 2] = $481 + 1e3; //@line 4919
    $484 = HEAP8[$44 >> 0] | 0; //@line 4921
    if (($484 & 255) >= (-128 - (HEAP8[$14 >> 0] | 0) & 255)) {
     $$0$be = $473; //@line 4925
     $$096$be = -1e3; //@line 4925
     continue L5;
    }
    HEAP8[$44 >> 0] = $484 + 1 << 24 >> 24; //@line 4931
    HEAP8[($484 & 255) + ($24 + 4) >> 0] = 8; //@line 4932
    HEAP8[$58 >> 0] = 1; //@line 4933
    HEAP8[$118 >> 0] = 1; //@line 4934
    $$0$be = $473; //@line 4935
    $$096$be = 0; //@line 4935
    continue L5;
    break;
   }
  default:
   {
    $$0$be = $137; //@line 4940
    $$096$be = -1013; //@line 4940
    continue L5;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$122 >> 0] = 0; //@line 4946
  HEAP8[$94 >> 0] = 0; //@line 4947
  HEAP8[$80 >> 0] = 0; //@line 4948
  HEAP8[$72 >> 0] = 0; //@line 4949
  $148 = $137 & 255; //@line 4950
  $149 = $148 + -1 | 0; //@line 4951
  HEAP32[$42 >> 2] = $38 + $149; //@line 4953
  HEAP8[$112 >> 0] = $48 - $149; //@line 4956
  HEAP8[$134 >> 0] = HEAP8[$126 >> 0] | 0; //@line 4958
  HEAP8[$86 >> 0] = HEAP8[$82 >> 0] | 0; //@line 4960
  HEAP8[$98 >> 0] = HEAP8[$92 >> 0] | 0; //@line 4962
  HEAP8[$56 >> 0] = HEAP8[$46 >> 0] | 0; //@line 4964
  HEAP8[$10 >> 0] = HEAP8[$70 >> 0] | 0; //@line 4966
  $160 = HEAP32[(HEAP32[$2 >> 2] | 0) + 36 >> 2] | 0; //@line 4969
  $ReallocAsyncCtx = _emscripten_realloc_async_context(276) | 0; //@line 4970
  $161 = FUNCTION_TABLE_iiiiiii[$160 & 3]($20, $116, $122, $94, $80, $72) | 0; //@line 4971
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 490; //@line 4974
   $162 = $ReallocAsyncCtx + 4 | 0; //@line 4975
   HEAP32[$162 >> 2] = $2; //@line 4976
   $163 = $ReallocAsyncCtx + 8 | 0; //@line 4977
   HEAP32[$163 >> 2] = $4; //@line 4978
   $164 = $ReallocAsyncCtx + 12 | 0; //@line 4979
   HEAP8[$164 >> 0] = $6; //@line 4980
   $165 = $ReallocAsyncCtx + 16 | 0; //@line 4981
   HEAP32[$165 >> 2] = $8; //@line 4982
   $166 = $ReallocAsyncCtx + 20 | 0; //@line 4983
   HEAP32[$166 >> 2] = $10; //@line 4984
   $167 = $ReallocAsyncCtx + 24 | 0; //@line 4985
   HEAP32[$167 >> 2] = $12; //@line 4986
   $168 = $ReallocAsyncCtx + 28 | 0; //@line 4987
   HEAP32[$168 >> 2] = $14; //@line 4988
   $169 = $ReallocAsyncCtx + 32 | 0; //@line 4989
   HEAP32[$169 >> 2] = $16; //@line 4990
   $170 = $ReallocAsyncCtx + 36 | 0; //@line 4991
   HEAP32[$170 >> 2] = $18; //@line 4992
   $171 = $ReallocAsyncCtx + 40 | 0; //@line 4993
   HEAP32[$171 >> 2] = $20; //@line 4994
   $172 = $ReallocAsyncCtx + 44 | 0; //@line 4995
   HEAP32[$172 >> 2] = $22; //@line 4996
   $173 = $ReallocAsyncCtx + 48 | 0; //@line 4997
   HEAP32[$173 >> 2] = $24; //@line 4998
   $174 = $ReallocAsyncCtx + 52 | 0; //@line 4999
   HEAP32[$174 >> 2] = $26; //@line 5000
   $175 = $ReallocAsyncCtx + 56 | 0; //@line 5001
   HEAP32[$175 >> 2] = $28; //@line 5002
   $176 = $ReallocAsyncCtx + 60 | 0; //@line 5003
   HEAP8[$176 >> 0] = $32; //@line 5004
   $177 = $ReallocAsyncCtx + 64 | 0; //@line 5005
   HEAP32[$177 >> 2] = $34; //@line 5006
   $178 = $ReallocAsyncCtx + 68 | 0; //@line 5007
   HEAP8[$178 >> 0] = $36; //@line 5008
   $179 = $ReallocAsyncCtx + 72 | 0; //@line 5009
   HEAP32[$179 >> 2] = $38; //@line 5010
   $180 = $ReallocAsyncCtx + 76 | 0; //@line 5011
   HEAP32[$180 >> 2] = $40; //@line 5012
   $181 = $ReallocAsyncCtx + 80 | 0; //@line 5013
   HEAP32[$181 >> 2] = $42; //@line 5014
   $182 = $ReallocAsyncCtx + 84 | 0; //@line 5015
   HEAP32[$182 >> 2] = $44; //@line 5016
   $183 = $ReallocAsyncCtx + 88 | 0; //@line 5017
   HEAP32[$183 >> 2] = $46; //@line 5018
   $184 = $ReallocAsyncCtx + 92 | 0; //@line 5019
   HEAP32[$184 >> 2] = $48; //@line 5020
   $185 = $ReallocAsyncCtx + 96 | 0; //@line 5021
   HEAP32[$185 >> 2] = $50; //@line 5022
   $186 = $ReallocAsyncCtx + 100 | 0; //@line 5023
   HEAP32[$186 >> 2] = $52; //@line 5024
   $187 = $ReallocAsyncCtx + 104 | 0; //@line 5025
   HEAP32[$187 >> 2] = $54; //@line 5026
   $188 = $ReallocAsyncCtx + 108 | 0; //@line 5027
   HEAP32[$188 >> 2] = $56; //@line 5028
   $189 = $ReallocAsyncCtx + 112 | 0; //@line 5029
   HEAP32[$189 >> 2] = $58; //@line 5030
   $190 = $ReallocAsyncCtx + 116 | 0; //@line 5031
   HEAP32[$190 >> 2] = $60; //@line 5032
   $191 = $ReallocAsyncCtx + 120 | 0; //@line 5033
   HEAP32[$191 >> 2] = $62; //@line 5034
   $192 = $ReallocAsyncCtx + 124 | 0; //@line 5035
   HEAP32[$192 >> 2] = $64; //@line 5036
   $193 = $ReallocAsyncCtx + 128 | 0; //@line 5037
   HEAP32[$193 >> 2] = $66; //@line 5038
   $194 = $ReallocAsyncCtx + 132 | 0; //@line 5039
   HEAP32[$194 >> 2] = $68; //@line 5040
   $195 = $ReallocAsyncCtx + 136 | 0; //@line 5041
   HEAP32[$195 >> 2] = $70; //@line 5042
   $196 = $ReallocAsyncCtx + 140 | 0; //@line 5043
   HEAP32[$196 >> 2] = $72; //@line 5044
   $197 = $ReallocAsyncCtx + 144 | 0; //@line 5045
   HEAP32[$197 >> 2] = $74; //@line 5046
   $198 = $ReallocAsyncCtx + 148 | 0; //@line 5047
   HEAP32[$198 >> 2] = $76; //@line 5048
   $199 = $ReallocAsyncCtx + 152 | 0; //@line 5049
   HEAP32[$199 >> 2] = $78; //@line 5050
   $200 = $ReallocAsyncCtx + 156 | 0; //@line 5051
   HEAP32[$200 >> 2] = $80; //@line 5052
   $201 = $ReallocAsyncCtx + 160 | 0; //@line 5053
   HEAP32[$201 >> 2] = $148; //@line 5054
   $202 = $ReallocAsyncCtx + 164 | 0; //@line 5055
   HEAP32[$202 >> 2] = $82; //@line 5056
   $203 = $ReallocAsyncCtx + 168 | 0; //@line 5057
   HEAP32[$203 >> 2] = $84; //@line 5058
   $204 = $ReallocAsyncCtx + 172 | 0; //@line 5059
   HEAP32[$204 >> 2] = $86; //@line 5060
   $205 = $ReallocAsyncCtx + 176 | 0; //@line 5061
   HEAP32[$205 >> 2] = $88; //@line 5062
   $206 = $ReallocAsyncCtx + 180 | 0; //@line 5063
   HEAP32[$206 >> 2] = $90; //@line 5064
   $207 = $ReallocAsyncCtx + 184 | 0; //@line 5065
   HEAP32[$207 >> 2] = $92; //@line 5066
   $208 = $ReallocAsyncCtx + 188 | 0; //@line 5067
   HEAP32[$208 >> 2] = $94; //@line 5068
   $209 = $ReallocAsyncCtx + 192 | 0; //@line 5069
   HEAP32[$209 >> 2] = $96; //@line 5070
   $210 = $ReallocAsyncCtx + 196 | 0; //@line 5071
   HEAP32[$210 >> 2] = $98; //@line 5072
   $211 = $ReallocAsyncCtx + 200 | 0; //@line 5073
   HEAP32[$211 >> 2] = $100; //@line 5074
   $212 = $ReallocAsyncCtx + 204 | 0; //@line 5075
   HEAP32[$212 >> 2] = $102; //@line 5076
   $213 = $ReallocAsyncCtx + 208 | 0; //@line 5077
   HEAP32[$213 >> 2] = $104; //@line 5078
   $214 = $ReallocAsyncCtx + 212 | 0; //@line 5079
   HEAP32[$214 >> 2] = $106; //@line 5080
   $215 = $ReallocAsyncCtx + 216 | 0; //@line 5081
   HEAP32[$215 >> 2] = $108; //@line 5082
   $216 = $ReallocAsyncCtx + 220 | 0; //@line 5083
   HEAP32[$216 >> 2] = $110; //@line 5084
   $217 = $ReallocAsyncCtx + 224 | 0; //@line 5085
   HEAP32[$217 >> 2] = $112; //@line 5086
   $218 = $ReallocAsyncCtx + 228 | 0; //@line 5087
   HEAP32[$218 >> 2] = $114; //@line 5088
   $219 = $ReallocAsyncCtx + 232 | 0; //@line 5089
   HEAP32[$219 >> 2] = $116; //@line 5090
   $220 = $ReallocAsyncCtx + 236 | 0; //@line 5091
   HEAP32[$220 >> 2] = $118; //@line 5092
   $221 = $ReallocAsyncCtx + 240 | 0; //@line 5093
   HEAP32[$221 >> 2] = $120; //@line 5094
   $222 = $ReallocAsyncCtx + 244 | 0; //@line 5095
   HEAP32[$222 >> 2] = $122; //@line 5096
   $223 = $ReallocAsyncCtx + 248 | 0; //@line 5097
   HEAP32[$223 >> 2] = $124; //@line 5098
   $224 = $ReallocAsyncCtx + 252 | 0; //@line 5099
   HEAP32[$224 >> 2] = $126; //@line 5100
   $225 = $ReallocAsyncCtx + 256 | 0; //@line 5101
   HEAP32[$225 >> 2] = $128; //@line 5102
   $226 = $ReallocAsyncCtx + 260 | 0; //@line 5103
   HEAP32[$226 >> 2] = $130; //@line 5104
   $227 = $ReallocAsyncCtx + 264 | 0; //@line 5105
   HEAP32[$227 >> 2] = $$096$be; //@line 5106
   $228 = $ReallocAsyncCtx + 268 | 0; //@line 5107
   HEAP32[$228 >> 2] = $132; //@line 5108
   $229 = $ReallocAsyncCtx + 272 | 0; //@line 5109
   HEAP32[$229 >> 2] = $134; //@line 5110
   sp = STACKTOP; //@line 5111
   return;
  }
  HEAP8[___async_retval >> 0] = $161; //@line 5115
  ___async_unwind = 0; //@line 5116
  HEAP32[$ReallocAsyncCtx >> 2] = 490; //@line 5117
  $162 = $ReallocAsyncCtx + 4 | 0; //@line 5118
  HEAP32[$162 >> 2] = $2; //@line 5119
  $163 = $ReallocAsyncCtx + 8 | 0; //@line 5120
  HEAP32[$163 >> 2] = $4; //@line 5121
  $164 = $ReallocAsyncCtx + 12 | 0; //@line 5122
  HEAP8[$164 >> 0] = $6; //@line 5123
  $165 = $ReallocAsyncCtx + 16 | 0; //@line 5124
  HEAP32[$165 >> 2] = $8; //@line 5125
  $166 = $ReallocAsyncCtx + 20 | 0; //@line 5126
  HEAP32[$166 >> 2] = $10; //@line 5127
  $167 = $ReallocAsyncCtx + 24 | 0; //@line 5128
  HEAP32[$167 >> 2] = $12; //@line 5129
  $168 = $ReallocAsyncCtx + 28 | 0; //@line 5130
  HEAP32[$168 >> 2] = $14; //@line 5131
  $169 = $ReallocAsyncCtx + 32 | 0; //@line 5132
  HEAP32[$169 >> 2] = $16; //@line 5133
  $170 = $ReallocAsyncCtx + 36 | 0; //@line 5134
  HEAP32[$170 >> 2] = $18; //@line 5135
  $171 = $ReallocAsyncCtx + 40 | 0; //@line 5136
  HEAP32[$171 >> 2] = $20; //@line 5137
  $172 = $ReallocAsyncCtx + 44 | 0; //@line 5138
  HEAP32[$172 >> 2] = $22; //@line 5139
  $173 = $ReallocAsyncCtx + 48 | 0; //@line 5140
  HEAP32[$173 >> 2] = $24; //@line 5141
  $174 = $ReallocAsyncCtx + 52 | 0; //@line 5142
  HEAP32[$174 >> 2] = $26; //@line 5143
  $175 = $ReallocAsyncCtx + 56 | 0; //@line 5144
  HEAP32[$175 >> 2] = $28; //@line 5145
  $176 = $ReallocAsyncCtx + 60 | 0; //@line 5146
  HEAP8[$176 >> 0] = $32; //@line 5147
  $177 = $ReallocAsyncCtx + 64 | 0; //@line 5148
  HEAP32[$177 >> 2] = $34; //@line 5149
  $178 = $ReallocAsyncCtx + 68 | 0; //@line 5150
  HEAP8[$178 >> 0] = $36; //@line 5151
  $179 = $ReallocAsyncCtx + 72 | 0; //@line 5152
  HEAP32[$179 >> 2] = $38; //@line 5153
  $180 = $ReallocAsyncCtx + 76 | 0; //@line 5154
  HEAP32[$180 >> 2] = $40; //@line 5155
  $181 = $ReallocAsyncCtx + 80 | 0; //@line 5156
  HEAP32[$181 >> 2] = $42; //@line 5157
  $182 = $ReallocAsyncCtx + 84 | 0; //@line 5158
  HEAP32[$182 >> 2] = $44; //@line 5159
  $183 = $ReallocAsyncCtx + 88 | 0; //@line 5160
  HEAP32[$183 >> 2] = $46; //@line 5161
  $184 = $ReallocAsyncCtx + 92 | 0; //@line 5162
  HEAP32[$184 >> 2] = $48; //@line 5163
  $185 = $ReallocAsyncCtx + 96 | 0; //@line 5164
  HEAP32[$185 >> 2] = $50; //@line 5165
  $186 = $ReallocAsyncCtx + 100 | 0; //@line 5166
  HEAP32[$186 >> 2] = $52; //@line 5167
  $187 = $ReallocAsyncCtx + 104 | 0; //@line 5168
  HEAP32[$187 >> 2] = $54; //@line 5169
  $188 = $ReallocAsyncCtx + 108 | 0; //@line 5170
  HEAP32[$188 >> 2] = $56; //@line 5171
  $189 = $ReallocAsyncCtx + 112 | 0; //@line 5172
  HEAP32[$189 >> 2] = $58; //@line 5173
  $190 = $ReallocAsyncCtx + 116 | 0; //@line 5174
  HEAP32[$190 >> 2] = $60; //@line 5175
  $191 = $ReallocAsyncCtx + 120 | 0; //@line 5176
  HEAP32[$191 >> 2] = $62; //@line 5177
  $192 = $ReallocAsyncCtx + 124 | 0; //@line 5178
  HEAP32[$192 >> 2] = $64; //@line 5179
  $193 = $ReallocAsyncCtx + 128 | 0; //@line 5180
  HEAP32[$193 >> 2] = $66; //@line 5181
  $194 = $ReallocAsyncCtx + 132 | 0; //@line 5182
  HEAP32[$194 >> 2] = $68; //@line 5183
  $195 = $ReallocAsyncCtx + 136 | 0; //@line 5184
  HEAP32[$195 >> 2] = $70; //@line 5185
  $196 = $ReallocAsyncCtx + 140 | 0; //@line 5186
  HEAP32[$196 >> 2] = $72; //@line 5187
  $197 = $ReallocAsyncCtx + 144 | 0; //@line 5188
  HEAP32[$197 >> 2] = $74; //@line 5189
  $198 = $ReallocAsyncCtx + 148 | 0; //@line 5190
  HEAP32[$198 >> 2] = $76; //@line 5191
  $199 = $ReallocAsyncCtx + 152 | 0; //@line 5192
  HEAP32[$199 >> 2] = $78; //@line 5193
  $200 = $ReallocAsyncCtx + 156 | 0; //@line 5194
  HEAP32[$200 >> 2] = $80; //@line 5195
  $201 = $ReallocAsyncCtx + 160 | 0; //@line 5196
  HEAP32[$201 >> 2] = $148; //@line 5197
  $202 = $ReallocAsyncCtx + 164 | 0; //@line 5198
  HEAP32[$202 >> 2] = $82; //@line 5199
  $203 = $ReallocAsyncCtx + 168 | 0; //@line 5200
  HEAP32[$203 >> 2] = $84; //@line 5201
  $204 = $ReallocAsyncCtx + 172 | 0; //@line 5202
  HEAP32[$204 >> 2] = $86; //@line 5203
  $205 = $ReallocAsyncCtx + 176 | 0; //@line 5204
  HEAP32[$205 >> 2] = $88; //@line 5205
  $206 = $ReallocAsyncCtx + 180 | 0; //@line 5206
  HEAP32[$206 >> 2] = $90; //@line 5207
  $207 = $ReallocAsyncCtx + 184 | 0; //@line 5208
  HEAP32[$207 >> 2] = $92; //@line 5209
  $208 = $ReallocAsyncCtx + 188 | 0; //@line 5210
  HEAP32[$208 >> 2] = $94; //@line 5211
  $209 = $ReallocAsyncCtx + 192 | 0; //@line 5212
  HEAP32[$209 >> 2] = $96; //@line 5213
  $210 = $ReallocAsyncCtx + 196 | 0; //@line 5214
  HEAP32[$210 >> 2] = $98; //@line 5215
  $211 = $ReallocAsyncCtx + 200 | 0; //@line 5216
  HEAP32[$211 >> 2] = $100; //@line 5217
  $212 = $ReallocAsyncCtx + 204 | 0; //@line 5218
  HEAP32[$212 >> 2] = $102; //@line 5219
  $213 = $ReallocAsyncCtx + 208 | 0; //@line 5220
  HEAP32[$213 >> 2] = $104; //@line 5221
  $214 = $ReallocAsyncCtx + 212 | 0; //@line 5222
  HEAP32[$214 >> 2] = $106; //@line 5223
  $215 = $ReallocAsyncCtx + 216 | 0; //@line 5224
  HEAP32[$215 >> 2] = $108; //@line 5225
  $216 = $ReallocAsyncCtx + 220 | 0; //@line 5226
  HEAP32[$216 >> 2] = $110; //@line 5227
  $217 = $ReallocAsyncCtx + 224 | 0; //@line 5228
  HEAP32[$217 >> 2] = $112; //@line 5229
  $218 = $ReallocAsyncCtx + 228 | 0; //@line 5230
  HEAP32[$218 >> 2] = $114; //@line 5231
  $219 = $ReallocAsyncCtx + 232 | 0; //@line 5232
  HEAP32[$219 >> 2] = $116; //@line 5233
  $220 = $ReallocAsyncCtx + 236 | 0; //@line 5234
  HEAP32[$220 >> 2] = $118; //@line 5235
  $221 = $ReallocAsyncCtx + 240 | 0; //@line 5236
  HEAP32[$221 >> 2] = $120; //@line 5237
  $222 = $ReallocAsyncCtx + 244 | 0; //@line 5238
  HEAP32[$222 >> 2] = $122; //@line 5239
  $223 = $ReallocAsyncCtx + 248 | 0; //@line 5240
  HEAP32[$223 >> 2] = $124; //@line 5241
  $224 = $ReallocAsyncCtx + 252 | 0; //@line 5242
  HEAP32[$224 >> 2] = $126; //@line 5243
  $225 = $ReallocAsyncCtx + 256 | 0; //@line 5244
  HEAP32[$225 >> 2] = $128; //@line 5245
  $226 = $ReallocAsyncCtx + 260 | 0; //@line 5246
  HEAP32[$226 >> 2] = $130; //@line 5247
  $227 = $ReallocAsyncCtx + 264 | 0; //@line 5248
  HEAP32[$227 >> 2] = $$096$be; //@line 5249
  $228 = $ReallocAsyncCtx + 268 | 0; //@line 5250
  HEAP32[$228 >> 2] = $132; //@line 5251
  $229 = $ReallocAsyncCtx + 272 | 0; //@line 5252
  HEAP32[$229 >> 2] = $134; //@line 5253
  sp = STACKTOP; //@line 5254
  return;
 } else if ((label | 0) == 9) {
  $247 = HEAP8[$38 + ($137 & 255) >> 0] | 0; //@line 5260
  HEAP8[$84 >> 0] = ($247 & 255) >>> 4 & 7; //@line 5265
  HEAP8[$124 >> 0] = $247 & 15; //@line 5267
  $266 = $$0$be + 5 << 24 >> 24; //@line 5281
  HEAP32[$78 >> 2] = (HEAPU8[$38 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$38 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$38 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 5289
  $276 = HEAP32[(HEAP32[$106 >> 2] | 0) + 40 >> 2] | 0; //@line 5292
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(272) | 0; //@line 5293
  $277 = FUNCTION_TABLE_iii[$276 & 31]($20, $74) | 0; //@line 5294
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 491; //@line 5297
   $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 5298
   HEAP32[$278 >> 2] = $2; //@line 5299
   $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 5300
   HEAP32[$279 >> 2] = $4; //@line 5301
   $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 5302
   HEAP8[$280 >> 0] = $6; //@line 5303
   $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 5304
   HEAP32[$281 >> 2] = $8; //@line 5305
   $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 5306
   HEAP32[$282 >> 2] = $10; //@line 5307
   $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 5308
   HEAP32[$283 >> 2] = $12; //@line 5309
   $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 5310
   HEAP32[$284 >> 2] = $14; //@line 5311
   $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 5312
   HEAP32[$285 >> 2] = $16; //@line 5313
   $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 5314
   HEAP32[$286 >> 2] = $18; //@line 5315
   $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 5316
   HEAP32[$287 >> 2] = $20; //@line 5317
   $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 5318
   HEAP32[$288 >> 2] = $22; //@line 5319
   $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 5320
   HEAP32[$289 >> 2] = $24; //@line 5321
   $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 5322
   HEAP32[$290 >> 2] = $26; //@line 5323
   $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 5324
   HEAP32[$291 >> 2] = $28; //@line 5325
   $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 5326
   HEAP8[$292 >> 0] = $32; //@line 5327
   $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 5328
   HEAP32[$293 >> 2] = $34; //@line 5329
   $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 5330
   HEAP8[$294 >> 0] = $36; //@line 5331
   $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 5332
   HEAP32[$295 >> 2] = $38; //@line 5333
   $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 5334
   HEAP32[$296 >> 2] = $40; //@line 5335
   $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 5336
   HEAP32[$297 >> 2] = $42; //@line 5337
   $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 5338
   HEAP32[$298 >> 2] = $44; //@line 5339
   $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 5340
   HEAP32[$299 >> 2] = $46; //@line 5341
   $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 5342
   HEAP32[$300 >> 2] = $48; //@line 5343
   $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 5344
   HEAP32[$301 >> 2] = $50; //@line 5345
   $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 5346
   HEAP32[$302 >> 2] = $52; //@line 5347
   $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 5348
   HEAP32[$303 >> 2] = $54; //@line 5349
   $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 5350
   HEAP32[$304 >> 2] = $56; //@line 5351
   $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 5352
   HEAP8[$305 >> 0] = $266; //@line 5353
   $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 5354
   HEAP32[$306 >> 2] = $58; //@line 5355
   $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 5356
   HEAP32[$307 >> 2] = $60; //@line 5357
   $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 5358
   HEAP32[$308 >> 2] = $62; //@line 5359
   $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 5360
   HEAP32[$309 >> 2] = $64; //@line 5361
   $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 5362
   HEAP32[$310 >> 2] = $66; //@line 5363
   $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 5364
   HEAP32[$311 >> 2] = $68; //@line 5365
   $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 5366
   HEAP32[$312 >> 2] = $70; //@line 5367
   $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 5368
   HEAP32[$313 >> 2] = $72; //@line 5369
   $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 5370
   HEAP32[$314 >> 2] = $74; //@line 5371
   $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 5372
   HEAP32[$315 >> 2] = $76; //@line 5373
   $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 5374
   HEAP32[$316 >> 2] = $78; //@line 5375
   $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 5376
   HEAP32[$317 >> 2] = $80; //@line 5377
   $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 5378
   HEAP32[$318 >> 2] = $82; //@line 5379
   $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 5380
   HEAP32[$319 >> 2] = $84; //@line 5381
   $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 5382
   HEAP32[$320 >> 2] = $86; //@line 5383
   $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 5384
   HEAP32[$321 >> 2] = $88; //@line 5385
   $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 5386
   HEAP32[$322 >> 2] = $90; //@line 5387
   $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 5388
   HEAP32[$323 >> 2] = $92; //@line 5389
   $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 5390
   HEAP32[$324 >> 2] = $94; //@line 5391
   $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 5392
   HEAP32[$325 >> 2] = $96; //@line 5393
   $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 5394
   HEAP32[$326 >> 2] = $98; //@line 5395
   $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 5396
   HEAP32[$327 >> 2] = $100; //@line 5397
   $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 5398
   HEAP32[$328 >> 2] = $102; //@line 5399
   $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 5400
   HEAP32[$329 >> 2] = $104; //@line 5401
   $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 5402
   HEAP32[$330 >> 2] = $106; //@line 5403
   $331 = $ReallocAsyncCtx2 + 216 | 0; //@line 5404
   HEAP32[$331 >> 2] = $108; //@line 5405
   $332 = $ReallocAsyncCtx2 + 220 | 0; //@line 5406
   HEAP32[$332 >> 2] = $110; //@line 5407
   $333 = $ReallocAsyncCtx2 + 224 | 0; //@line 5408
   HEAP32[$333 >> 2] = $112; //@line 5409
   $334 = $ReallocAsyncCtx2 + 228 | 0; //@line 5410
   HEAP32[$334 >> 2] = $114; //@line 5411
   $335 = $ReallocAsyncCtx2 + 232 | 0; //@line 5412
   HEAP32[$335 >> 2] = $116; //@line 5413
   $336 = $ReallocAsyncCtx2 + 236 | 0; //@line 5414
   HEAP32[$336 >> 2] = $118; //@line 5415
   $337 = $ReallocAsyncCtx2 + 240 | 0; //@line 5416
   HEAP32[$337 >> 2] = $120; //@line 5417
   $338 = $ReallocAsyncCtx2 + 244 | 0; //@line 5418
   HEAP32[$338 >> 2] = $122; //@line 5419
   $339 = $ReallocAsyncCtx2 + 248 | 0; //@line 5420
   HEAP32[$339 >> 2] = $124; //@line 5421
   $340 = $ReallocAsyncCtx2 + 252 | 0; //@line 5422
   HEAP32[$340 >> 2] = $126; //@line 5423
   $341 = $ReallocAsyncCtx2 + 256 | 0; //@line 5424
   HEAP32[$341 >> 2] = $128; //@line 5425
   $342 = $ReallocAsyncCtx2 + 260 | 0; //@line 5426
   HEAP32[$342 >> 2] = $130; //@line 5427
   $343 = $ReallocAsyncCtx2 + 264 | 0; //@line 5428
   HEAP32[$343 >> 2] = $132; //@line 5429
   $344 = $ReallocAsyncCtx2 + 268 | 0; //@line 5430
   HEAP32[$344 >> 2] = $134; //@line 5431
   sp = STACKTOP; //@line 5432
   return;
  }
  HEAP8[___async_retval >> 0] = $277; //@line 5436
  ___async_unwind = 0; //@line 5437
  HEAP32[$ReallocAsyncCtx2 >> 2] = 491; //@line 5438
  $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 5439
  HEAP32[$278 >> 2] = $2; //@line 5440
  $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 5441
  HEAP32[$279 >> 2] = $4; //@line 5442
  $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 5443
  HEAP8[$280 >> 0] = $6; //@line 5444
  $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 5445
  HEAP32[$281 >> 2] = $8; //@line 5446
  $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 5447
  HEAP32[$282 >> 2] = $10; //@line 5448
  $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 5449
  HEAP32[$283 >> 2] = $12; //@line 5450
  $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 5451
  HEAP32[$284 >> 2] = $14; //@line 5452
  $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 5453
  HEAP32[$285 >> 2] = $16; //@line 5454
  $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 5455
  HEAP32[$286 >> 2] = $18; //@line 5456
  $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 5457
  HEAP32[$287 >> 2] = $20; //@line 5458
  $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 5459
  HEAP32[$288 >> 2] = $22; //@line 5460
  $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 5461
  HEAP32[$289 >> 2] = $24; //@line 5462
  $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 5463
  HEAP32[$290 >> 2] = $26; //@line 5464
  $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 5465
  HEAP32[$291 >> 2] = $28; //@line 5466
  $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 5467
  HEAP8[$292 >> 0] = $32; //@line 5468
  $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 5469
  HEAP32[$293 >> 2] = $34; //@line 5470
  $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 5471
  HEAP8[$294 >> 0] = $36; //@line 5472
  $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 5473
  HEAP32[$295 >> 2] = $38; //@line 5474
  $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 5475
  HEAP32[$296 >> 2] = $40; //@line 5476
  $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 5477
  HEAP32[$297 >> 2] = $42; //@line 5478
  $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 5479
  HEAP32[$298 >> 2] = $44; //@line 5480
  $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 5481
  HEAP32[$299 >> 2] = $46; //@line 5482
  $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 5483
  HEAP32[$300 >> 2] = $48; //@line 5484
  $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 5485
  HEAP32[$301 >> 2] = $50; //@line 5486
  $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 5487
  HEAP32[$302 >> 2] = $52; //@line 5488
  $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 5489
  HEAP32[$303 >> 2] = $54; //@line 5490
  $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 5491
  HEAP32[$304 >> 2] = $56; //@line 5492
  $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 5493
  HEAP8[$305 >> 0] = $266; //@line 5494
  $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 5495
  HEAP32[$306 >> 2] = $58; //@line 5496
  $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 5497
  HEAP32[$307 >> 2] = $60; //@line 5498
  $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 5499
  HEAP32[$308 >> 2] = $62; //@line 5500
  $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 5501
  HEAP32[$309 >> 2] = $64; //@line 5502
  $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 5503
  HEAP32[$310 >> 2] = $66; //@line 5504
  $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 5505
  HEAP32[$311 >> 2] = $68; //@line 5506
  $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 5507
  HEAP32[$312 >> 2] = $70; //@line 5508
  $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 5509
  HEAP32[$313 >> 2] = $72; //@line 5510
  $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 5511
  HEAP32[$314 >> 2] = $74; //@line 5512
  $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 5513
  HEAP32[$315 >> 2] = $76; //@line 5514
  $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 5515
  HEAP32[$316 >> 2] = $78; //@line 5516
  $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 5517
  HEAP32[$317 >> 2] = $80; //@line 5518
  $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 5519
  HEAP32[$318 >> 2] = $82; //@line 5520
  $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 5521
  HEAP32[$319 >> 2] = $84; //@line 5522
  $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 5523
  HEAP32[$320 >> 2] = $86; //@line 5524
  $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 5525
  HEAP32[$321 >> 2] = $88; //@line 5526
  $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 5527
  HEAP32[$322 >> 2] = $90; //@line 5528
  $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 5529
  HEAP32[$323 >> 2] = $92; //@line 5530
  $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 5531
  HEAP32[$324 >> 2] = $94; //@line 5532
  $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 5533
  HEAP32[$325 >> 2] = $96; //@line 5534
  $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 5535
  HEAP32[$326 >> 2] = $98; //@line 5536
  $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 5537
  HEAP32[$327 >> 2] = $100; //@line 5538
  $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 5539
  HEAP32[$328 >> 2] = $102; //@line 5540
  $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 5541
  HEAP32[$329 >> 2] = $104; //@line 5542
  $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 5543
  HEAP32[$330 >> 2] = $106; //@line 5544
  $331 = $ReallocAsyncCtx2 + 216 | 0; //@line 5545
  HEAP32[$331 >> 2] = $108; //@line 5546
  $332 = $ReallocAsyncCtx2 + 220 | 0; //@line 5547
  HEAP32[$332 >> 2] = $110; //@line 5548
  $333 = $ReallocAsyncCtx2 + 224 | 0; //@line 5549
  HEAP32[$333 >> 2] = $112; //@line 5550
  $334 = $ReallocAsyncCtx2 + 228 | 0; //@line 5551
  HEAP32[$334 >> 2] = $114; //@line 5552
  $335 = $ReallocAsyncCtx2 + 232 | 0; //@line 5553
  HEAP32[$335 >> 2] = $116; //@line 5554
  $336 = $ReallocAsyncCtx2 + 236 | 0; //@line 5555
  HEAP32[$336 >> 2] = $118; //@line 5556
  $337 = $ReallocAsyncCtx2 + 240 | 0; //@line 5557
  HEAP32[$337 >> 2] = $120; //@line 5558
  $338 = $ReallocAsyncCtx2 + 244 | 0; //@line 5559
  HEAP32[$338 >> 2] = $122; //@line 5560
  $339 = $ReallocAsyncCtx2 + 248 | 0; //@line 5561
  HEAP32[$339 >> 2] = $124; //@line 5562
  $340 = $ReallocAsyncCtx2 + 252 | 0; //@line 5563
  HEAP32[$340 >> 2] = $126; //@line 5564
  $341 = $ReallocAsyncCtx2 + 256 | 0; //@line 5565
  HEAP32[$341 >> 2] = $128; //@line 5566
  $342 = $ReallocAsyncCtx2 + 260 | 0; //@line 5567
  HEAP32[$342 >> 2] = $130; //@line 5568
  $343 = $ReallocAsyncCtx2 + 264 | 0; //@line 5569
  HEAP32[$343 >> 2] = $132; //@line 5570
  $344 = $ReallocAsyncCtx2 + 268 | 0; //@line 5571
  HEAP32[$344 >> 2] = $134; //@line 5572
  sp = STACKTOP; //@line 5573
  return;
 } else if ((label | 0) == 14) {
  HEAP8[$8 >> 0] = HEAP8[$38 + ($137 & 255) >> 0] | 0; //@line 5581
  HEAP32[$40 >> 2] = $108; //@line 5582
  HEAP32[$120 >> 2] = (HEAPU8[$38 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$38 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$38 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 5603
  HEAP32[$114 >> 2] = 0; //@line 5604
  $385 = $$0$be + 6 << 24 >> 24; //@line 5605
  HEAP8[$130 >> 0] = HEAP8[$38 + ($$0$be + 5 & 255) >> 0] | 0; //@line 5609
  $391 = HEAP32[(HEAP32[$128 >> 2] | 0) + 8 >> 2] | 0; //@line 5612
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(268) | 0; //@line 5613
  $392 = FUNCTION_TABLE_iii[$391 & 31]($20, $64) | 0; //@line 5614
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 492; //@line 5617
   $393 = $ReallocAsyncCtx3 + 4 | 0; //@line 5618
   HEAP32[$393 >> 2] = $2; //@line 5619
   $394 = $ReallocAsyncCtx3 + 8 | 0; //@line 5620
   HEAP32[$394 >> 2] = $4; //@line 5621
   $395 = $ReallocAsyncCtx3 + 12 | 0; //@line 5622
   HEAP8[$395 >> 0] = $6; //@line 5623
   $396 = $ReallocAsyncCtx3 + 16 | 0; //@line 5624
   HEAP32[$396 >> 2] = $8; //@line 5625
   $397 = $ReallocAsyncCtx3 + 20 | 0; //@line 5626
   HEAP32[$397 >> 2] = $10; //@line 5627
   $398 = $ReallocAsyncCtx3 + 24 | 0; //@line 5628
   HEAP32[$398 >> 2] = $12; //@line 5629
   $399 = $ReallocAsyncCtx3 + 28 | 0; //@line 5630
   HEAP32[$399 >> 2] = $14; //@line 5631
   $400 = $ReallocAsyncCtx3 + 32 | 0; //@line 5632
   HEAP32[$400 >> 2] = $16; //@line 5633
   $401 = $ReallocAsyncCtx3 + 36 | 0; //@line 5634
   HEAP32[$401 >> 2] = $18; //@line 5635
   $402 = $ReallocAsyncCtx3 + 40 | 0; //@line 5636
   HEAP32[$402 >> 2] = $20; //@line 5637
   $403 = $ReallocAsyncCtx3 + 44 | 0; //@line 5638
   HEAP32[$403 >> 2] = $22; //@line 5639
   $404 = $ReallocAsyncCtx3 + 48 | 0; //@line 5640
   HEAP32[$404 >> 2] = $24; //@line 5641
   $405 = $ReallocAsyncCtx3 + 52 | 0; //@line 5642
   HEAP32[$405 >> 2] = $26; //@line 5643
   $406 = $ReallocAsyncCtx3 + 56 | 0; //@line 5644
   HEAP32[$406 >> 2] = $28; //@line 5645
   $407 = $ReallocAsyncCtx3 + 60 | 0; //@line 5646
   HEAP8[$407 >> 0] = $385; //@line 5647
   $408 = $ReallocAsyncCtx3 + 61 | 0; //@line 5648
   HEAP8[$408 >> 0] = $32; //@line 5649
   $409 = $ReallocAsyncCtx3 + 64 | 0; //@line 5650
   HEAP32[$409 >> 2] = $34; //@line 5651
   $410 = $ReallocAsyncCtx3 + 68 | 0; //@line 5652
   HEAP8[$410 >> 0] = $36; //@line 5653
   $411 = $ReallocAsyncCtx3 + 72 | 0; //@line 5654
   HEAP32[$411 >> 2] = $38; //@line 5655
   $412 = $ReallocAsyncCtx3 + 76 | 0; //@line 5656
   HEAP32[$412 >> 2] = $40; //@line 5657
   $413 = $ReallocAsyncCtx3 + 80 | 0; //@line 5658
   HEAP32[$413 >> 2] = $42; //@line 5659
   $414 = $ReallocAsyncCtx3 + 84 | 0; //@line 5660
   HEAP32[$414 >> 2] = $44; //@line 5661
   $415 = $ReallocAsyncCtx3 + 88 | 0; //@line 5662
   HEAP32[$415 >> 2] = $46; //@line 5663
   $416 = $ReallocAsyncCtx3 + 92 | 0; //@line 5664
   HEAP32[$416 >> 2] = $48; //@line 5665
   $417 = $ReallocAsyncCtx3 + 96 | 0; //@line 5666
   HEAP32[$417 >> 2] = $50; //@line 5667
   $418 = $ReallocAsyncCtx3 + 100 | 0; //@line 5668
   HEAP32[$418 >> 2] = $52; //@line 5669
   $419 = $ReallocAsyncCtx3 + 104 | 0; //@line 5670
   HEAP32[$419 >> 2] = $54; //@line 5671
   $420 = $ReallocAsyncCtx3 + 108 | 0; //@line 5672
   HEAP32[$420 >> 2] = $56; //@line 5673
   $421 = $ReallocAsyncCtx3 + 112 | 0; //@line 5674
   HEAP32[$421 >> 2] = $58; //@line 5675
   $422 = $ReallocAsyncCtx3 + 116 | 0; //@line 5676
   HEAP32[$422 >> 2] = $60; //@line 5677
   $423 = $ReallocAsyncCtx3 + 120 | 0; //@line 5678
   HEAP32[$423 >> 2] = $62; //@line 5679
   $424 = $ReallocAsyncCtx3 + 124 | 0; //@line 5680
   HEAP32[$424 >> 2] = $64; //@line 5681
   $425 = $ReallocAsyncCtx3 + 128 | 0; //@line 5682
   HEAP32[$425 >> 2] = $66; //@line 5683
   $426 = $ReallocAsyncCtx3 + 132 | 0; //@line 5684
   HEAP32[$426 >> 2] = $68; //@line 5685
   $427 = $ReallocAsyncCtx3 + 136 | 0; //@line 5686
   HEAP32[$427 >> 2] = $70; //@line 5687
   $428 = $ReallocAsyncCtx3 + 140 | 0; //@line 5688
   HEAP32[$428 >> 2] = $72; //@line 5689
   $429 = $ReallocAsyncCtx3 + 144 | 0; //@line 5690
   HEAP32[$429 >> 2] = $74; //@line 5691
   $430 = $ReallocAsyncCtx3 + 148 | 0; //@line 5692
   HEAP32[$430 >> 2] = $76; //@line 5693
   $431 = $ReallocAsyncCtx3 + 152 | 0; //@line 5694
   HEAP32[$431 >> 2] = $78; //@line 5695
   $432 = $ReallocAsyncCtx3 + 156 | 0; //@line 5696
   HEAP32[$432 >> 2] = $80; //@line 5697
   $433 = $ReallocAsyncCtx3 + 160 | 0; //@line 5698
   HEAP32[$433 >> 2] = $82; //@line 5699
   $434 = $ReallocAsyncCtx3 + 164 | 0; //@line 5700
   HEAP32[$434 >> 2] = $84; //@line 5701
   $435 = $ReallocAsyncCtx3 + 168 | 0; //@line 5702
   HEAP32[$435 >> 2] = $86; //@line 5703
   $436 = $ReallocAsyncCtx3 + 172 | 0; //@line 5704
   HEAP32[$436 >> 2] = $88; //@line 5705
   $437 = $ReallocAsyncCtx3 + 176 | 0; //@line 5706
   HEAP32[$437 >> 2] = $90; //@line 5707
   $438 = $ReallocAsyncCtx3 + 180 | 0; //@line 5708
   HEAP32[$438 >> 2] = $92; //@line 5709
   $439 = $ReallocAsyncCtx3 + 184 | 0; //@line 5710
   HEAP32[$439 >> 2] = $94; //@line 5711
   $440 = $ReallocAsyncCtx3 + 188 | 0; //@line 5712
   HEAP32[$440 >> 2] = $96; //@line 5713
   $441 = $ReallocAsyncCtx3 + 192 | 0; //@line 5714
   HEAP32[$441 >> 2] = $98; //@line 5715
   $442 = $ReallocAsyncCtx3 + 196 | 0; //@line 5716
   HEAP32[$442 >> 2] = $100; //@line 5717
   $443 = $ReallocAsyncCtx3 + 200 | 0; //@line 5718
   HEAP32[$443 >> 2] = $102; //@line 5719
   $444 = $ReallocAsyncCtx3 + 204 | 0; //@line 5720
   HEAP32[$444 >> 2] = $104; //@line 5721
   $445 = $ReallocAsyncCtx3 + 208 | 0; //@line 5722
   HEAP32[$445 >> 2] = $106; //@line 5723
   $446 = $ReallocAsyncCtx3 + 212 | 0; //@line 5724
   HEAP32[$446 >> 2] = $108; //@line 5725
   $447 = $ReallocAsyncCtx3 + 216 | 0; //@line 5726
   HEAP32[$447 >> 2] = $110; //@line 5727
   $448 = $ReallocAsyncCtx3 + 220 | 0; //@line 5728
   HEAP32[$448 >> 2] = $112; //@line 5729
   $449 = $ReallocAsyncCtx3 + 224 | 0; //@line 5730
   HEAP32[$449 >> 2] = $114; //@line 5731
   $450 = $ReallocAsyncCtx3 + 228 | 0; //@line 5732
   HEAP32[$450 >> 2] = $116; //@line 5733
   $451 = $ReallocAsyncCtx3 + 232 | 0; //@line 5734
   HEAP32[$451 >> 2] = $118; //@line 5735
   $452 = $ReallocAsyncCtx3 + 236 | 0; //@line 5736
   HEAP32[$452 >> 2] = $120; //@line 5737
   $453 = $ReallocAsyncCtx3 + 240 | 0; //@line 5738
   HEAP32[$453 >> 2] = $122; //@line 5739
   $454 = $ReallocAsyncCtx3 + 244 | 0; //@line 5740
   HEAP32[$454 >> 2] = $124; //@line 5741
   $455 = $ReallocAsyncCtx3 + 248 | 0; //@line 5742
   HEAP32[$455 >> 2] = $126; //@line 5743
   $456 = $ReallocAsyncCtx3 + 252 | 0; //@line 5744
   HEAP32[$456 >> 2] = $128; //@line 5745
   $457 = $ReallocAsyncCtx3 + 256 | 0; //@line 5746
   HEAP32[$457 >> 2] = $130; //@line 5747
   $458 = $ReallocAsyncCtx3 + 260 | 0; //@line 5748
   HEAP32[$458 >> 2] = $132; //@line 5749
   $459 = $ReallocAsyncCtx3 + 264 | 0; //@line 5750
   HEAP32[$459 >> 2] = $134; //@line 5751
   sp = STACKTOP; //@line 5752
   return;
  }
  HEAP8[___async_retval >> 0] = $392; //@line 5756
  ___async_unwind = 0; //@line 5757
  HEAP32[$ReallocAsyncCtx3 >> 2] = 492; //@line 5758
  $393 = $ReallocAsyncCtx3 + 4 | 0; //@line 5759
  HEAP32[$393 >> 2] = $2; //@line 5760
  $394 = $ReallocAsyncCtx3 + 8 | 0; //@line 5761
  HEAP32[$394 >> 2] = $4; //@line 5762
  $395 = $ReallocAsyncCtx3 + 12 | 0; //@line 5763
  HEAP8[$395 >> 0] = $6; //@line 5764
  $396 = $ReallocAsyncCtx3 + 16 | 0; //@line 5765
  HEAP32[$396 >> 2] = $8; //@line 5766
  $397 = $ReallocAsyncCtx3 + 20 | 0; //@line 5767
  HEAP32[$397 >> 2] = $10; //@line 5768
  $398 = $ReallocAsyncCtx3 + 24 | 0; //@line 5769
  HEAP32[$398 >> 2] = $12; //@line 5770
  $399 = $ReallocAsyncCtx3 + 28 | 0; //@line 5771
  HEAP32[$399 >> 2] = $14; //@line 5772
  $400 = $ReallocAsyncCtx3 + 32 | 0; //@line 5773
  HEAP32[$400 >> 2] = $16; //@line 5774
  $401 = $ReallocAsyncCtx3 + 36 | 0; //@line 5775
  HEAP32[$401 >> 2] = $18; //@line 5776
  $402 = $ReallocAsyncCtx3 + 40 | 0; //@line 5777
  HEAP32[$402 >> 2] = $20; //@line 5778
  $403 = $ReallocAsyncCtx3 + 44 | 0; //@line 5779
  HEAP32[$403 >> 2] = $22; //@line 5780
  $404 = $ReallocAsyncCtx3 + 48 | 0; //@line 5781
  HEAP32[$404 >> 2] = $24; //@line 5782
  $405 = $ReallocAsyncCtx3 + 52 | 0; //@line 5783
  HEAP32[$405 >> 2] = $26; //@line 5784
  $406 = $ReallocAsyncCtx3 + 56 | 0; //@line 5785
  HEAP32[$406 >> 2] = $28; //@line 5786
  $407 = $ReallocAsyncCtx3 + 60 | 0; //@line 5787
  HEAP8[$407 >> 0] = $385; //@line 5788
  $408 = $ReallocAsyncCtx3 + 61 | 0; //@line 5789
  HEAP8[$408 >> 0] = $32; //@line 5790
  $409 = $ReallocAsyncCtx3 + 64 | 0; //@line 5791
  HEAP32[$409 >> 2] = $34; //@line 5792
  $410 = $ReallocAsyncCtx3 + 68 | 0; //@line 5793
  HEAP8[$410 >> 0] = $36; //@line 5794
  $411 = $ReallocAsyncCtx3 + 72 | 0; //@line 5795
  HEAP32[$411 >> 2] = $38; //@line 5796
  $412 = $ReallocAsyncCtx3 + 76 | 0; //@line 5797
  HEAP32[$412 >> 2] = $40; //@line 5798
  $413 = $ReallocAsyncCtx3 + 80 | 0; //@line 5799
  HEAP32[$413 >> 2] = $42; //@line 5800
  $414 = $ReallocAsyncCtx3 + 84 | 0; //@line 5801
  HEAP32[$414 >> 2] = $44; //@line 5802
  $415 = $ReallocAsyncCtx3 + 88 | 0; //@line 5803
  HEAP32[$415 >> 2] = $46; //@line 5804
  $416 = $ReallocAsyncCtx3 + 92 | 0; //@line 5805
  HEAP32[$416 >> 2] = $48; //@line 5806
  $417 = $ReallocAsyncCtx3 + 96 | 0; //@line 5807
  HEAP32[$417 >> 2] = $50; //@line 5808
  $418 = $ReallocAsyncCtx3 + 100 | 0; //@line 5809
  HEAP32[$418 >> 2] = $52; //@line 5810
  $419 = $ReallocAsyncCtx3 + 104 | 0; //@line 5811
  HEAP32[$419 >> 2] = $54; //@line 5812
  $420 = $ReallocAsyncCtx3 + 108 | 0; //@line 5813
  HEAP32[$420 >> 2] = $56; //@line 5814
  $421 = $ReallocAsyncCtx3 + 112 | 0; //@line 5815
  HEAP32[$421 >> 2] = $58; //@line 5816
  $422 = $ReallocAsyncCtx3 + 116 | 0; //@line 5817
  HEAP32[$422 >> 2] = $60; //@line 5818
  $423 = $ReallocAsyncCtx3 + 120 | 0; //@line 5819
  HEAP32[$423 >> 2] = $62; //@line 5820
  $424 = $ReallocAsyncCtx3 + 124 | 0; //@line 5821
  HEAP32[$424 >> 2] = $64; //@line 5822
  $425 = $ReallocAsyncCtx3 + 128 | 0; //@line 5823
  HEAP32[$425 >> 2] = $66; //@line 5824
  $426 = $ReallocAsyncCtx3 + 132 | 0; //@line 5825
  HEAP32[$426 >> 2] = $68; //@line 5826
  $427 = $ReallocAsyncCtx3 + 136 | 0; //@line 5827
  HEAP32[$427 >> 2] = $70; //@line 5828
  $428 = $ReallocAsyncCtx3 + 140 | 0; //@line 5829
  HEAP32[$428 >> 2] = $72; //@line 5830
  $429 = $ReallocAsyncCtx3 + 144 | 0; //@line 5831
  HEAP32[$429 >> 2] = $74; //@line 5832
  $430 = $ReallocAsyncCtx3 + 148 | 0; //@line 5833
  HEAP32[$430 >> 2] = $76; //@line 5834
  $431 = $ReallocAsyncCtx3 + 152 | 0; //@line 5835
  HEAP32[$431 >> 2] = $78; //@line 5836
  $432 = $ReallocAsyncCtx3 + 156 | 0; //@line 5837
  HEAP32[$432 >> 2] = $80; //@line 5838
  $433 = $ReallocAsyncCtx3 + 160 | 0; //@line 5839
  HEAP32[$433 >> 2] = $82; //@line 5840
  $434 = $ReallocAsyncCtx3 + 164 | 0; //@line 5841
  HEAP32[$434 >> 2] = $84; //@line 5842
  $435 = $ReallocAsyncCtx3 + 168 | 0; //@line 5843
  HEAP32[$435 >> 2] = $86; //@line 5844
  $436 = $ReallocAsyncCtx3 + 172 | 0; //@line 5845
  HEAP32[$436 >> 2] = $88; //@line 5846
  $437 = $ReallocAsyncCtx3 + 176 | 0; //@line 5847
  HEAP32[$437 >> 2] = $90; //@line 5848
  $438 = $ReallocAsyncCtx3 + 180 | 0; //@line 5849
  HEAP32[$438 >> 2] = $92; //@line 5850
  $439 = $ReallocAsyncCtx3 + 184 | 0; //@line 5851
  HEAP32[$439 >> 2] = $94; //@line 5852
  $440 = $ReallocAsyncCtx3 + 188 | 0; //@line 5853
  HEAP32[$440 >> 2] = $96; //@line 5854
  $441 = $ReallocAsyncCtx3 + 192 | 0; //@line 5855
  HEAP32[$441 >> 2] = $98; //@line 5856
  $442 = $ReallocAsyncCtx3 + 196 | 0; //@line 5857
  HEAP32[$442 >> 2] = $100; //@line 5858
  $443 = $ReallocAsyncCtx3 + 200 | 0; //@line 5859
  HEAP32[$443 >> 2] = $102; //@line 5860
  $444 = $ReallocAsyncCtx3 + 204 | 0; //@line 5861
  HEAP32[$444 >> 2] = $104; //@line 5862
  $445 = $ReallocAsyncCtx3 + 208 | 0; //@line 5863
  HEAP32[$445 >> 2] = $106; //@line 5864
  $446 = $ReallocAsyncCtx3 + 212 | 0; //@line 5865
  HEAP32[$446 >> 2] = $108; //@line 5866
  $447 = $ReallocAsyncCtx3 + 216 | 0; //@line 5867
  HEAP32[$447 >> 2] = $110; //@line 5868
  $448 = $ReallocAsyncCtx3 + 220 | 0; //@line 5869
  HEAP32[$448 >> 2] = $112; //@line 5870
  $449 = $ReallocAsyncCtx3 + 224 | 0; //@line 5871
  HEAP32[$449 >> 2] = $114; //@line 5872
  $450 = $ReallocAsyncCtx3 + 228 | 0; //@line 5873
  HEAP32[$450 >> 2] = $116; //@line 5874
  $451 = $ReallocAsyncCtx3 + 232 | 0; //@line 5875
  HEAP32[$451 >> 2] = $118; //@line 5876
  $452 = $ReallocAsyncCtx3 + 236 | 0; //@line 5877
  HEAP32[$452 >> 2] = $120; //@line 5878
  $453 = $ReallocAsyncCtx3 + 240 | 0; //@line 5879
  HEAP32[$453 >> 2] = $122; //@line 5880
  $454 = $ReallocAsyncCtx3 + 244 | 0; //@line 5881
  HEAP32[$454 >> 2] = $124; //@line 5882
  $455 = $ReallocAsyncCtx3 + 248 | 0; //@line 5883
  HEAP32[$455 >> 2] = $126; //@line 5884
  $456 = $ReallocAsyncCtx3 + 252 | 0; //@line 5885
  HEAP32[$456 >> 2] = $128; //@line 5886
  $457 = $ReallocAsyncCtx3 + 256 | 0; //@line 5887
  HEAP32[$457 >> 2] = $130; //@line 5888
  $458 = $ReallocAsyncCtx3 + 260 | 0; //@line 5889
  HEAP32[$458 >> 2] = $132; //@line 5890
  $459 = $ReallocAsyncCtx3 + 264 | 0; //@line 5891
  HEAP32[$459 >> 2] = $134; //@line 5892
  sp = STACKTOP; //@line 5893
  return;
 } else if ((label | 0) == 22) {
  $490 = $$0$be + 2 << 24 >> 24; //@line 5897
  $493 = HEAP8[$38 + ($137 & 255) >> 0] | 0; //@line 5900
  HEAP8[$100 >> 0] = 0; //@line 5901
  $494 = $493 & 255; //@line 5902
  HEAP8[$90 >> 0] = $494 >>> 5 & 1; //@line 5906
  if ($494 & 16 | 0) {
   HEAP8[$100 >> 0] = 1; //@line 5910
  }
  HEAP8[$54 >> 0] = $494 & 15; //@line 5914
  $503 = HEAP32[(HEAP32[$50 >> 2] | 0) + 44 >> 2] | 0; //@line 5917
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(276) | 0; //@line 5918
  $504 = FUNCTION_TABLE_iii[$503 & 31]($20, $104) | 0; //@line 5919
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 493; //@line 5922
   $505 = $ReallocAsyncCtx4 + 4 | 0; //@line 5923
   HEAP32[$505 >> 2] = $2; //@line 5924
   $506 = $ReallocAsyncCtx4 + 8 | 0; //@line 5925
   HEAP32[$506 >> 2] = $4; //@line 5926
   $507 = $ReallocAsyncCtx4 + 12 | 0; //@line 5927
   HEAP8[$507 >> 0] = $6; //@line 5928
   $508 = $ReallocAsyncCtx4 + 16 | 0; //@line 5929
   HEAP32[$508 >> 2] = $8; //@line 5930
   $509 = $ReallocAsyncCtx4 + 20 | 0; //@line 5931
   HEAP32[$509 >> 2] = $10; //@line 5932
   $510 = $ReallocAsyncCtx4 + 24 | 0; //@line 5933
   HEAP32[$510 >> 2] = $12; //@line 5934
   $511 = $ReallocAsyncCtx4 + 28 | 0; //@line 5935
   HEAP32[$511 >> 2] = $14; //@line 5936
   $512 = $ReallocAsyncCtx4 + 32 | 0; //@line 5937
   HEAP32[$512 >> 2] = $16; //@line 5938
   $513 = $ReallocAsyncCtx4 + 36 | 0; //@line 5939
   HEAP32[$513 >> 2] = $18; //@line 5940
   $514 = $ReallocAsyncCtx4 + 40 | 0; //@line 5941
   HEAP32[$514 >> 2] = $20; //@line 5942
   $515 = $ReallocAsyncCtx4 + 44 | 0; //@line 5943
   HEAP32[$515 >> 2] = $22; //@line 5944
   $516 = $ReallocAsyncCtx4 + 48 | 0; //@line 5945
   HEAP32[$516 >> 2] = $24; //@line 5946
   $517 = $ReallocAsyncCtx4 + 52 | 0; //@line 5947
   HEAP32[$517 >> 2] = $26; //@line 5948
   $518 = $ReallocAsyncCtx4 + 56 | 0; //@line 5949
   HEAP32[$518 >> 2] = $28; //@line 5950
   $519 = $ReallocAsyncCtx4 + 60 | 0; //@line 5951
   HEAP8[$519 >> 0] = $32; //@line 5952
   $520 = $ReallocAsyncCtx4 + 64 | 0; //@line 5953
   HEAP32[$520 >> 2] = $34; //@line 5954
   $521 = $ReallocAsyncCtx4 + 68 | 0; //@line 5955
   HEAP8[$521 >> 0] = $36; //@line 5956
   $522 = $ReallocAsyncCtx4 + 72 | 0; //@line 5957
   HEAP32[$522 >> 2] = $38; //@line 5958
   $523 = $ReallocAsyncCtx4 + 76 | 0; //@line 5959
   HEAP32[$523 >> 2] = $40; //@line 5960
   $524 = $ReallocAsyncCtx4 + 80 | 0; //@line 5961
   HEAP32[$524 >> 2] = $42; //@line 5962
   $525 = $ReallocAsyncCtx4 + 84 | 0; //@line 5963
   HEAP32[$525 >> 2] = $44; //@line 5964
   $526 = $ReallocAsyncCtx4 + 88 | 0; //@line 5965
   HEAP32[$526 >> 2] = $46; //@line 5966
   $527 = $ReallocAsyncCtx4 + 92 | 0; //@line 5967
   HEAP32[$527 >> 2] = $48; //@line 5968
   $528 = $ReallocAsyncCtx4 + 96 | 0; //@line 5969
   HEAP32[$528 >> 2] = $50; //@line 5970
   $529 = $ReallocAsyncCtx4 + 100 | 0; //@line 5971
   HEAP32[$529 >> 2] = $52; //@line 5972
   $530 = $ReallocAsyncCtx4 + 104 | 0; //@line 5973
   HEAP32[$530 >> 2] = $54; //@line 5974
   $531 = $ReallocAsyncCtx4 + 108 | 0; //@line 5975
   HEAP32[$531 >> 2] = $56; //@line 5976
   $532 = $ReallocAsyncCtx4 + 112 | 0; //@line 5977
   HEAP32[$532 >> 2] = $58; //@line 5978
   $533 = $ReallocAsyncCtx4 + 116 | 0; //@line 5979
   HEAP32[$533 >> 2] = $60; //@line 5980
   $534 = $ReallocAsyncCtx4 + 120 | 0; //@line 5981
   HEAP32[$534 >> 2] = $62; //@line 5982
   $535 = $ReallocAsyncCtx4 + 124 | 0; //@line 5983
   HEAP32[$535 >> 2] = $64; //@line 5984
   $536 = $ReallocAsyncCtx4 + 128 | 0; //@line 5985
   HEAP32[$536 >> 2] = $66; //@line 5986
   $537 = $ReallocAsyncCtx4 + 132 | 0; //@line 5987
   HEAP32[$537 >> 2] = $68; //@line 5988
   $538 = $ReallocAsyncCtx4 + 136 | 0; //@line 5989
   HEAP32[$538 >> 2] = $70; //@line 5990
   $539 = $ReallocAsyncCtx4 + 140 | 0; //@line 5991
   HEAP8[$539 >> 0] = $490; //@line 5992
   $540 = $ReallocAsyncCtx4 + 144 | 0; //@line 5993
   HEAP32[$540 >> 2] = $72; //@line 5994
   $541 = $ReallocAsyncCtx4 + 148 | 0; //@line 5995
   HEAP32[$541 >> 2] = $74; //@line 5996
   $542 = $ReallocAsyncCtx4 + 152 | 0; //@line 5997
   HEAP32[$542 >> 2] = $76; //@line 5998
   $543 = $ReallocAsyncCtx4 + 156 | 0; //@line 5999
   HEAP32[$543 >> 2] = $78; //@line 6000
   $544 = $ReallocAsyncCtx4 + 160 | 0; //@line 6001
   HEAP32[$544 >> 2] = $80; //@line 6002
   $545 = $ReallocAsyncCtx4 + 164 | 0; //@line 6003
   HEAP32[$545 >> 2] = $82; //@line 6004
   $546 = $ReallocAsyncCtx4 + 168 | 0; //@line 6005
   HEAP32[$546 >> 2] = $84; //@line 6006
   $547 = $ReallocAsyncCtx4 + 172 | 0; //@line 6007
   HEAP32[$547 >> 2] = $86; //@line 6008
   $548 = $ReallocAsyncCtx4 + 176 | 0; //@line 6009
   HEAP32[$548 >> 2] = $88; //@line 6010
   $549 = $ReallocAsyncCtx4 + 180 | 0; //@line 6011
   HEAP32[$549 >> 2] = $90; //@line 6012
   $550 = $ReallocAsyncCtx4 + 184 | 0; //@line 6013
   HEAP32[$550 >> 2] = $92; //@line 6014
   $551 = $ReallocAsyncCtx4 + 188 | 0; //@line 6015
   HEAP32[$551 >> 2] = $94; //@line 6016
   $552 = $ReallocAsyncCtx4 + 192 | 0; //@line 6017
   HEAP32[$552 >> 2] = $96; //@line 6018
   $553 = $ReallocAsyncCtx4 + 196 | 0; //@line 6019
   HEAP32[$553 >> 2] = $98; //@line 6020
   $554 = $ReallocAsyncCtx4 + 200 | 0; //@line 6021
   HEAP32[$554 >> 2] = $100; //@line 6022
   $555 = $ReallocAsyncCtx4 + 204 | 0; //@line 6023
   HEAP32[$555 >> 2] = $102; //@line 6024
   $556 = $ReallocAsyncCtx4 + 208 | 0; //@line 6025
   HEAP32[$556 >> 2] = $104; //@line 6026
   $557 = $ReallocAsyncCtx4 + 212 | 0; //@line 6027
   HEAP32[$557 >> 2] = $106; //@line 6028
   $558 = $ReallocAsyncCtx4 + 216 | 0; //@line 6029
   HEAP32[$558 >> 2] = $108; //@line 6030
   $559 = $ReallocAsyncCtx4 + 220 | 0; //@line 6031
   HEAP32[$559 >> 2] = $110; //@line 6032
   $560 = $ReallocAsyncCtx4 + 224 | 0; //@line 6033
   HEAP32[$560 >> 2] = $112; //@line 6034
   $561 = $ReallocAsyncCtx4 + 228 | 0; //@line 6035
   HEAP32[$561 >> 2] = $114; //@line 6036
   $562 = $ReallocAsyncCtx4 + 232 | 0; //@line 6037
   HEAP32[$562 >> 2] = $116; //@line 6038
   $563 = $ReallocAsyncCtx4 + 236 | 0; //@line 6039
   HEAP32[$563 >> 2] = $118; //@line 6040
   $564 = $ReallocAsyncCtx4 + 240 | 0; //@line 6041
   HEAP32[$564 >> 2] = $120; //@line 6042
   $565 = $ReallocAsyncCtx4 + 244 | 0; //@line 6043
   HEAP32[$565 >> 2] = $122; //@line 6044
   $566 = $ReallocAsyncCtx4 + 248 | 0; //@line 6045
   HEAP32[$566 >> 2] = $124; //@line 6046
   $567 = $ReallocAsyncCtx4 + 252 | 0; //@line 6047
   HEAP32[$567 >> 2] = $126; //@line 6048
   $568 = $ReallocAsyncCtx4 + 256 | 0; //@line 6049
   HEAP32[$568 >> 2] = $128; //@line 6050
   $569 = $ReallocAsyncCtx4 + 260 | 0; //@line 6051
   HEAP32[$569 >> 2] = $130; //@line 6052
   $570 = $ReallocAsyncCtx4 + 264 | 0; //@line 6053
   HEAP32[$570 >> 2] = $$096$be; //@line 6054
   $571 = $ReallocAsyncCtx4 + 268 | 0; //@line 6055
   HEAP32[$571 >> 2] = $132; //@line 6056
   $572 = $ReallocAsyncCtx4 + 272 | 0; //@line 6057
   HEAP32[$572 >> 2] = $134; //@line 6058
   sp = STACKTOP; //@line 6059
   return;
  }
  HEAP8[___async_retval >> 0] = $504 & 1; //@line 6064
  ___async_unwind = 0; //@line 6065
  HEAP32[$ReallocAsyncCtx4 >> 2] = 493; //@line 6066
  $505 = $ReallocAsyncCtx4 + 4 | 0; //@line 6067
  HEAP32[$505 >> 2] = $2; //@line 6068
  $506 = $ReallocAsyncCtx4 + 8 | 0; //@line 6069
  HEAP32[$506 >> 2] = $4; //@line 6070
  $507 = $ReallocAsyncCtx4 + 12 | 0; //@line 6071
  HEAP8[$507 >> 0] = $6; //@line 6072
  $508 = $ReallocAsyncCtx4 + 16 | 0; //@line 6073
  HEAP32[$508 >> 2] = $8; //@line 6074
  $509 = $ReallocAsyncCtx4 + 20 | 0; //@line 6075
  HEAP32[$509 >> 2] = $10; //@line 6076
  $510 = $ReallocAsyncCtx4 + 24 | 0; //@line 6077
  HEAP32[$510 >> 2] = $12; //@line 6078
  $511 = $ReallocAsyncCtx4 + 28 | 0; //@line 6079
  HEAP32[$511 >> 2] = $14; //@line 6080
  $512 = $ReallocAsyncCtx4 + 32 | 0; //@line 6081
  HEAP32[$512 >> 2] = $16; //@line 6082
  $513 = $ReallocAsyncCtx4 + 36 | 0; //@line 6083
  HEAP32[$513 >> 2] = $18; //@line 6084
  $514 = $ReallocAsyncCtx4 + 40 | 0; //@line 6085
  HEAP32[$514 >> 2] = $20; //@line 6086
  $515 = $ReallocAsyncCtx4 + 44 | 0; //@line 6087
  HEAP32[$515 >> 2] = $22; //@line 6088
  $516 = $ReallocAsyncCtx4 + 48 | 0; //@line 6089
  HEAP32[$516 >> 2] = $24; //@line 6090
  $517 = $ReallocAsyncCtx4 + 52 | 0; //@line 6091
  HEAP32[$517 >> 2] = $26; //@line 6092
  $518 = $ReallocAsyncCtx4 + 56 | 0; //@line 6093
  HEAP32[$518 >> 2] = $28; //@line 6094
  $519 = $ReallocAsyncCtx4 + 60 | 0; //@line 6095
  HEAP8[$519 >> 0] = $32; //@line 6096
  $520 = $ReallocAsyncCtx4 + 64 | 0; //@line 6097
  HEAP32[$520 >> 2] = $34; //@line 6098
  $521 = $ReallocAsyncCtx4 + 68 | 0; //@line 6099
  HEAP8[$521 >> 0] = $36; //@line 6100
  $522 = $ReallocAsyncCtx4 + 72 | 0; //@line 6101
  HEAP32[$522 >> 2] = $38; //@line 6102
  $523 = $ReallocAsyncCtx4 + 76 | 0; //@line 6103
  HEAP32[$523 >> 2] = $40; //@line 6104
  $524 = $ReallocAsyncCtx4 + 80 | 0; //@line 6105
  HEAP32[$524 >> 2] = $42; //@line 6106
  $525 = $ReallocAsyncCtx4 + 84 | 0; //@line 6107
  HEAP32[$525 >> 2] = $44; //@line 6108
  $526 = $ReallocAsyncCtx4 + 88 | 0; //@line 6109
  HEAP32[$526 >> 2] = $46; //@line 6110
  $527 = $ReallocAsyncCtx4 + 92 | 0; //@line 6111
  HEAP32[$527 >> 2] = $48; //@line 6112
  $528 = $ReallocAsyncCtx4 + 96 | 0; //@line 6113
  HEAP32[$528 >> 2] = $50; //@line 6114
  $529 = $ReallocAsyncCtx4 + 100 | 0; //@line 6115
  HEAP32[$529 >> 2] = $52; //@line 6116
  $530 = $ReallocAsyncCtx4 + 104 | 0; //@line 6117
  HEAP32[$530 >> 2] = $54; //@line 6118
  $531 = $ReallocAsyncCtx4 + 108 | 0; //@line 6119
  HEAP32[$531 >> 2] = $56; //@line 6120
  $532 = $ReallocAsyncCtx4 + 112 | 0; //@line 6121
  HEAP32[$532 >> 2] = $58; //@line 6122
  $533 = $ReallocAsyncCtx4 + 116 | 0; //@line 6123
  HEAP32[$533 >> 2] = $60; //@line 6124
  $534 = $ReallocAsyncCtx4 + 120 | 0; //@line 6125
  HEAP32[$534 >> 2] = $62; //@line 6126
  $535 = $ReallocAsyncCtx4 + 124 | 0; //@line 6127
  HEAP32[$535 >> 2] = $64; //@line 6128
  $536 = $ReallocAsyncCtx4 + 128 | 0; //@line 6129
  HEAP32[$536 >> 2] = $66; //@line 6130
  $537 = $ReallocAsyncCtx4 + 132 | 0; //@line 6131
  HEAP32[$537 >> 2] = $68; //@line 6132
  $538 = $ReallocAsyncCtx4 + 136 | 0; //@line 6133
  HEAP32[$538 >> 2] = $70; //@line 6134
  $539 = $ReallocAsyncCtx4 + 140 | 0; //@line 6135
  HEAP8[$539 >> 0] = $490; //@line 6136
  $540 = $ReallocAsyncCtx4 + 144 | 0; //@line 6137
  HEAP32[$540 >> 2] = $72; //@line 6138
  $541 = $ReallocAsyncCtx4 + 148 | 0; //@line 6139
  HEAP32[$541 >> 2] = $74; //@line 6140
  $542 = $ReallocAsyncCtx4 + 152 | 0; //@line 6141
  HEAP32[$542 >> 2] = $76; //@line 6142
  $543 = $ReallocAsyncCtx4 + 156 | 0; //@line 6143
  HEAP32[$543 >> 2] = $78; //@line 6144
  $544 = $ReallocAsyncCtx4 + 160 | 0; //@line 6145
  HEAP32[$544 >> 2] = $80; //@line 6146
  $545 = $ReallocAsyncCtx4 + 164 | 0; //@line 6147
  HEAP32[$545 >> 2] = $82; //@line 6148
  $546 = $ReallocAsyncCtx4 + 168 | 0; //@line 6149
  HEAP32[$546 >> 2] = $84; //@line 6150
  $547 = $ReallocAsyncCtx4 + 172 | 0; //@line 6151
  HEAP32[$547 >> 2] = $86; //@line 6152
  $548 = $ReallocAsyncCtx4 + 176 | 0; //@line 6153
  HEAP32[$548 >> 2] = $88; //@line 6154
  $549 = $ReallocAsyncCtx4 + 180 | 0; //@line 6155
  HEAP32[$549 >> 2] = $90; //@line 6156
  $550 = $ReallocAsyncCtx4 + 184 | 0; //@line 6157
  HEAP32[$550 >> 2] = $92; //@line 6158
  $551 = $ReallocAsyncCtx4 + 188 | 0; //@line 6159
  HEAP32[$551 >> 2] = $94; //@line 6160
  $552 = $ReallocAsyncCtx4 + 192 | 0; //@line 6161
  HEAP32[$552 >> 2] = $96; //@line 6162
  $553 = $ReallocAsyncCtx4 + 196 | 0; //@line 6163
  HEAP32[$553 >> 2] = $98; //@line 6164
  $554 = $ReallocAsyncCtx4 + 200 | 0; //@line 6165
  HEAP32[$554 >> 2] = $100; //@line 6166
  $555 = $ReallocAsyncCtx4 + 204 | 0; //@line 6167
  HEAP32[$555 >> 2] = $102; //@line 6168
  $556 = $ReallocAsyncCtx4 + 208 | 0; //@line 6169
  HEAP32[$556 >> 2] = $104; //@line 6170
  $557 = $ReallocAsyncCtx4 + 212 | 0; //@line 6171
  HEAP32[$557 >> 2] = $106; //@line 6172
  $558 = $ReallocAsyncCtx4 + 216 | 0; //@line 6173
  HEAP32[$558 >> 2] = $108; //@line 6174
  $559 = $ReallocAsyncCtx4 + 220 | 0; //@line 6175
  HEAP32[$559 >> 2] = $110; //@line 6176
  $560 = $ReallocAsyncCtx4 + 224 | 0; //@line 6177
  HEAP32[$560 >> 2] = $112; //@line 6178
  $561 = $ReallocAsyncCtx4 + 228 | 0; //@line 6179
  HEAP32[$561 >> 2] = $114; //@line 6180
  $562 = $ReallocAsyncCtx4 + 232 | 0; //@line 6181
  HEAP32[$562 >> 2] = $116; //@line 6182
  $563 = $ReallocAsyncCtx4 + 236 | 0; //@line 6183
  HEAP32[$563 >> 2] = $118; //@line 6184
  $564 = $ReallocAsyncCtx4 + 240 | 0; //@line 6185
  HEAP32[$564 >> 2] = $120; //@line 6186
  $565 = $ReallocAsyncCtx4 + 244 | 0; //@line 6187
  HEAP32[$565 >> 2] = $122; //@line 6188
  $566 = $ReallocAsyncCtx4 + 248 | 0; //@line 6189
  HEAP32[$566 >> 2] = $124; //@line 6190
  $567 = $ReallocAsyncCtx4 + 252 | 0; //@line 6191
  HEAP32[$567 >> 2] = $126; //@line 6192
  $568 = $ReallocAsyncCtx4 + 256 | 0; //@line 6193
  HEAP32[$568 >> 2] = $128; //@line 6194
  $569 = $ReallocAsyncCtx4 + 260 | 0; //@line 6195
  HEAP32[$569 >> 2] = $130; //@line 6196
  $570 = $ReallocAsyncCtx4 + 264 | 0; //@line 6197
  HEAP32[$570 >> 2] = $$096$be; //@line 6198
  $571 = $ReallocAsyncCtx4 + 268 | 0; //@line 6199
  HEAP32[$571 >> 2] = $132; //@line 6200
  $572 = $ReallocAsyncCtx4 + 272 | 0; //@line 6201
  HEAP32[$572 >> 2] = $134; //@line 6202
  sp = STACKTOP; //@line 6203
  return;
 } else if ((label | 0) == 27) {
  HEAP8[$16 >> 0] = HEAP8[$38 + ($137 & 255) >> 0] | 0; //@line 6211
  $590 = $$0$be + 5 << 24 >> 24; //@line 6224
  HEAP32[$4 >> 2] = (HEAPU8[$38 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$38 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$38 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 6232
  $600 = HEAP32[(HEAP32[$34 >> 2] | 0) + 48 >> 2] | 0; //@line 6235
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(272) | 0; //@line 6236
  $601 = FUNCTION_TABLE_iii[$600 & 31]($20, $102) | 0; //@line 6237
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 494; //@line 6240
   $602 = $ReallocAsyncCtx5 + 4 | 0; //@line 6241
   HEAP32[$602 >> 2] = $2; //@line 6242
   $603 = $ReallocAsyncCtx5 + 8 | 0; //@line 6243
   HEAP32[$603 >> 2] = $4; //@line 6244
   $604 = $ReallocAsyncCtx5 + 12 | 0; //@line 6245
   HEAP8[$604 >> 0] = $6; //@line 6246
   $605 = $ReallocAsyncCtx5 + 16 | 0; //@line 6247
   HEAP32[$605 >> 2] = $8; //@line 6248
   $606 = $ReallocAsyncCtx5 + 20 | 0; //@line 6249
   HEAP32[$606 >> 2] = $10; //@line 6250
   $607 = $ReallocAsyncCtx5 + 24 | 0; //@line 6251
   HEAP32[$607 >> 2] = $12; //@line 6252
   $608 = $ReallocAsyncCtx5 + 28 | 0; //@line 6253
   HEAP32[$608 >> 2] = $14; //@line 6254
   $609 = $ReallocAsyncCtx5 + 32 | 0; //@line 6255
   HEAP32[$609 >> 2] = $16; //@line 6256
   $610 = $ReallocAsyncCtx5 + 36 | 0; //@line 6257
   HEAP32[$610 >> 2] = $18; //@line 6258
   $611 = $ReallocAsyncCtx5 + 40 | 0; //@line 6259
   HEAP32[$611 >> 2] = $20; //@line 6260
   $612 = $ReallocAsyncCtx5 + 44 | 0; //@line 6261
   HEAP32[$612 >> 2] = $22; //@line 6262
   $613 = $ReallocAsyncCtx5 + 48 | 0; //@line 6263
   HEAP32[$613 >> 2] = $24; //@line 6264
   $614 = $ReallocAsyncCtx5 + 52 | 0; //@line 6265
   HEAP32[$614 >> 2] = $26; //@line 6266
   $615 = $ReallocAsyncCtx5 + 56 | 0; //@line 6267
   HEAP32[$615 >> 2] = $28; //@line 6268
   $616 = $ReallocAsyncCtx5 + 60 | 0; //@line 6269
   HEAP8[$616 >> 0] = $32; //@line 6270
   $617 = $ReallocAsyncCtx5 + 64 | 0; //@line 6271
   HEAP32[$617 >> 2] = $34; //@line 6272
   $618 = $ReallocAsyncCtx5 + 68 | 0; //@line 6273
   HEAP8[$618 >> 0] = $36; //@line 6274
   $619 = $ReallocAsyncCtx5 + 72 | 0; //@line 6275
   HEAP32[$619 >> 2] = $38; //@line 6276
   $620 = $ReallocAsyncCtx5 + 76 | 0; //@line 6277
   HEAP32[$620 >> 2] = $40; //@line 6278
   $621 = $ReallocAsyncCtx5 + 80 | 0; //@line 6279
   HEAP32[$621 >> 2] = $42; //@line 6280
   $622 = $ReallocAsyncCtx5 + 84 | 0; //@line 6281
   HEAP32[$622 >> 2] = $44; //@line 6282
   $623 = $ReallocAsyncCtx5 + 88 | 0; //@line 6283
   HEAP32[$623 >> 2] = $46; //@line 6284
   $624 = $ReallocAsyncCtx5 + 92 | 0; //@line 6285
   HEAP32[$624 >> 2] = $48; //@line 6286
   $625 = $ReallocAsyncCtx5 + 96 | 0; //@line 6287
   HEAP32[$625 >> 2] = $50; //@line 6288
   $626 = $ReallocAsyncCtx5 + 100 | 0; //@line 6289
   HEAP32[$626 >> 2] = $52; //@line 6290
   $627 = $ReallocAsyncCtx5 + 104 | 0; //@line 6291
   HEAP32[$627 >> 2] = $54; //@line 6292
   $628 = $ReallocAsyncCtx5 + 108 | 0; //@line 6293
   HEAP32[$628 >> 2] = $56; //@line 6294
   $629 = $ReallocAsyncCtx5 + 112 | 0; //@line 6295
   HEAP32[$629 >> 2] = $58; //@line 6296
   $630 = $ReallocAsyncCtx5 + 116 | 0; //@line 6297
   HEAP32[$630 >> 2] = $60; //@line 6298
   $631 = $ReallocAsyncCtx5 + 120 | 0; //@line 6299
   HEAP32[$631 >> 2] = $62; //@line 6300
   $632 = $ReallocAsyncCtx5 + 124 | 0; //@line 6301
   HEAP32[$632 >> 2] = $64; //@line 6302
   $633 = $ReallocAsyncCtx5 + 128 | 0; //@line 6303
   HEAP32[$633 >> 2] = $66; //@line 6304
   $634 = $ReallocAsyncCtx5 + 132 | 0; //@line 6305
   HEAP32[$634 >> 2] = $68; //@line 6306
   $635 = $ReallocAsyncCtx5 + 136 | 0; //@line 6307
   HEAP32[$635 >> 2] = $70; //@line 6308
   $636 = $ReallocAsyncCtx5 + 140 | 0; //@line 6309
   HEAP32[$636 >> 2] = $72; //@line 6310
   $637 = $ReallocAsyncCtx5 + 144 | 0; //@line 6311
   HEAP32[$637 >> 2] = $74; //@line 6312
   $638 = $ReallocAsyncCtx5 + 148 | 0; //@line 6313
   HEAP32[$638 >> 2] = $76; //@line 6314
   $639 = $ReallocAsyncCtx5 + 152 | 0; //@line 6315
   HEAP32[$639 >> 2] = $78; //@line 6316
   $640 = $ReallocAsyncCtx5 + 156 | 0; //@line 6317
   HEAP32[$640 >> 2] = $80; //@line 6318
   $641 = $ReallocAsyncCtx5 + 160 | 0; //@line 6319
   HEAP32[$641 >> 2] = $82; //@line 6320
   $642 = $ReallocAsyncCtx5 + 164 | 0; //@line 6321
   HEAP32[$642 >> 2] = $84; //@line 6322
   $643 = $ReallocAsyncCtx5 + 168 | 0; //@line 6323
   HEAP32[$643 >> 2] = $86; //@line 6324
   $644 = $ReallocAsyncCtx5 + 172 | 0; //@line 6325
   HEAP32[$644 >> 2] = $88; //@line 6326
   $645 = $ReallocAsyncCtx5 + 176 | 0; //@line 6327
   HEAP32[$645 >> 2] = $90; //@line 6328
   $646 = $ReallocAsyncCtx5 + 180 | 0; //@line 6329
   HEAP32[$646 >> 2] = $92; //@line 6330
   $647 = $ReallocAsyncCtx5 + 184 | 0; //@line 6331
   HEAP32[$647 >> 2] = $94; //@line 6332
   $648 = $ReallocAsyncCtx5 + 188 | 0; //@line 6333
   HEAP32[$648 >> 2] = $96; //@line 6334
   $649 = $ReallocAsyncCtx5 + 192 | 0; //@line 6335
   HEAP32[$649 >> 2] = $98; //@line 6336
   $650 = $ReallocAsyncCtx5 + 196 | 0; //@line 6337
   HEAP32[$650 >> 2] = $100; //@line 6338
   $651 = $ReallocAsyncCtx5 + 200 | 0; //@line 6339
   HEAP32[$651 >> 2] = $102; //@line 6340
   $652 = $ReallocAsyncCtx5 + 204 | 0; //@line 6341
   HEAP8[$652 >> 0] = $590; //@line 6342
   $653 = $ReallocAsyncCtx5 + 208 | 0; //@line 6343
   HEAP32[$653 >> 2] = $104; //@line 6344
   $654 = $ReallocAsyncCtx5 + 212 | 0; //@line 6345
   HEAP32[$654 >> 2] = $106; //@line 6346
   $655 = $ReallocAsyncCtx5 + 216 | 0; //@line 6347
   HEAP32[$655 >> 2] = $108; //@line 6348
   $656 = $ReallocAsyncCtx5 + 220 | 0; //@line 6349
   HEAP32[$656 >> 2] = $110; //@line 6350
   $657 = $ReallocAsyncCtx5 + 224 | 0; //@line 6351
   HEAP32[$657 >> 2] = $112; //@line 6352
   $658 = $ReallocAsyncCtx5 + 228 | 0; //@line 6353
   HEAP32[$658 >> 2] = $114; //@line 6354
   $659 = $ReallocAsyncCtx5 + 232 | 0; //@line 6355
   HEAP32[$659 >> 2] = $116; //@line 6356
   $660 = $ReallocAsyncCtx5 + 236 | 0; //@line 6357
   HEAP32[$660 >> 2] = $118; //@line 6358
   $661 = $ReallocAsyncCtx5 + 240 | 0; //@line 6359
   HEAP32[$661 >> 2] = $120; //@line 6360
   $662 = $ReallocAsyncCtx5 + 244 | 0; //@line 6361
   HEAP32[$662 >> 2] = $122; //@line 6362
   $663 = $ReallocAsyncCtx5 + 248 | 0; //@line 6363
   HEAP32[$663 >> 2] = $124; //@line 6364
   $664 = $ReallocAsyncCtx5 + 252 | 0; //@line 6365
   HEAP32[$664 >> 2] = $126; //@line 6366
   $665 = $ReallocAsyncCtx5 + 256 | 0; //@line 6367
   HEAP32[$665 >> 2] = $128; //@line 6368
   $666 = $ReallocAsyncCtx5 + 260 | 0; //@line 6369
   HEAP32[$666 >> 2] = $130; //@line 6370
   $667 = $ReallocAsyncCtx5 + 264 | 0; //@line 6371
   HEAP32[$667 >> 2] = $132; //@line 6372
   $668 = $ReallocAsyncCtx5 + 268 | 0; //@line 6373
   HEAP32[$668 >> 2] = $134; //@line 6374
   sp = STACKTOP; //@line 6375
   return;
  }
  HEAP8[___async_retval >> 0] = $601; //@line 6379
  ___async_unwind = 0; //@line 6380
  HEAP32[$ReallocAsyncCtx5 >> 2] = 494; //@line 6381
  $602 = $ReallocAsyncCtx5 + 4 | 0; //@line 6382
  HEAP32[$602 >> 2] = $2; //@line 6383
  $603 = $ReallocAsyncCtx5 + 8 | 0; //@line 6384
  HEAP32[$603 >> 2] = $4; //@line 6385
  $604 = $ReallocAsyncCtx5 + 12 | 0; //@line 6386
  HEAP8[$604 >> 0] = $6; //@line 6387
  $605 = $ReallocAsyncCtx5 + 16 | 0; //@line 6388
  HEAP32[$605 >> 2] = $8; //@line 6389
  $606 = $ReallocAsyncCtx5 + 20 | 0; //@line 6390
  HEAP32[$606 >> 2] = $10; //@line 6391
  $607 = $ReallocAsyncCtx5 + 24 | 0; //@line 6392
  HEAP32[$607 >> 2] = $12; //@line 6393
  $608 = $ReallocAsyncCtx5 + 28 | 0; //@line 6394
  HEAP32[$608 >> 2] = $14; //@line 6395
  $609 = $ReallocAsyncCtx5 + 32 | 0; //@line 6396
  HEAP32[$609 >> 2] = $16; //@line 6397
  $610 = $ReallocAsyncCtx5 + 36 | 0; //@line 6398
  HEAP32[$610 >> 2] = $18; //@line 6399
  $611 = $ReallocAsyncCtx5 + 40 | 0; //@line 6400
  HEAP32[$611 >> 2] = $20; //@line 6401
  $612 = $ReallocAsyncCtx5 + 44 | 0; //@line 6402
  HEAP32[$612 >> 2] = $22; //@line 6403
  $613 = $ReallocAsyncCtx5 + 48 | 0; //@line 6404
  HEAP32[$613 >> 2] = $24; //@line 6405
  $614 = $ReallocAsyncCtx5 + 52 | 0; //@line 6406
  HEAP32[$614 >> 2] = $26; //@line 6407
  $615 = $ReallocAsyncCtx5 + 56 | 0; //@line 6408
  HEAP32[$615 >> 2] = $28; //@line 6409
  $616 = $ReallocAsyncCtx5 + 60 | 0; //@line 6410
  HEAP8[$616 >> 0] = $32; //@line 6411
  $617 = $ReallocAsyncCtx5 + 64 | 0; //@line 6412
  HEAP32[$617 >> 2] = $34; //@line 6413
  $618 = $ReallocAsyncCtx5 + 68 | 0; //@line 6414
  HEAP8[$618 >> 0] = $36; //@line 6415
  $619 = $ReallocAsyncCtx5 + 72 | 0; //@line 6416
  HEAP32[$619 >> 2] = $38; //@line 6417
  $620 = $ReallocAsyncCtx5 + 76 | 0; //@line 6418
  HEAP32[$620 >> 2] = $40; //@line 6419
  $621 = $ReallocAsyncCtx5 + 80 | 0; //@line 6420
  HEAP32[$621 >> 2] = $42; //@line 6421
  $622 = $ReallocAsyncCtx5 + 84 | 0; //@line 6422
  HEAP32[$622 >> 2] = $44; //@line 6423
  $623 = $ReallocAsyncCtx5 + 88 | 0; //@line 6424
  HEAP32[$623 >> 2] = $46; //@line 6425
  $624 = $ReallocAsyncCtx5 + 92 | 0; //@line 6426
  HEAP32[$624 >> 2] = $48; //@line 6427
  $625 = $ReallocAsyncCtx5 + 96 | 0; //@line 6428
  HEAP32[$625 >> 2] = $50; //@line 6429
  $626 = $ReallocAsyncCtx5 + 100 | 0; //@line 6430
  HEAP32[$626 >> 2] = $52; //@line 6431
  $627 = $ReallocAsyncCtx5 + 104 | 0; //@line 6432
  HEAP32[$627 >> 2] = $54; //@line 6433
  $628 = $ReallocAsyncCtx5 + 108 | 0; //@line 6434
  HEAP32[$628 >> 2] = $56; //@line 6435
  $629 = $ReallocAsyncCtx5 + 112 | 0; //@line 6436
  HEAP32[$629 >> 2] = $58; //@line 6437
  $630 = $ReallocAsyncCtx5 + 116 | 0; //@line 6438
  HEAP32[$630 >> 2] = $60; //@line 6439
  $631 = $ReallocAsyncCtx5 + 120 | 0; //@line 6440
  HEAP32[$631 >> 2] = $62; //@line 6441
  $632 = $ReallocAsyncCtx5 + 124 | 0; //@line 6442
  HEAP32[$632 >> 2] = $64; //@line 6443
  $633 = $ReallocAsyncCtx5 + 128 | 0; //@line 6444
  HEAP32[$633 >> 2] = $66; //@line 6445
  $634 = $ReallocAsyncCtx5 + 132 | 0; //@line 6446
  HEAP32[$634 >> 2] = $68; //@line 6447
  $635 = $ReallocAsyncCtx5 + 136 | 0; //@line 6448
  HEAP32[$635 >> 2] = $70; //@line 6449
  $636 = $ReallocAsyncCtx5 + 140 | 0; //@line 6450
  HEAP32[$636 >> 2] = $72; //@line 6451
  $637 = $ReallocAsyncCtx5 + 144 | 0; //@line 6452
  HEAP32[$637 >> 2] = $74; //@line 6453
  $638 = $ReallocAsyncCtx5 + 148 | 0; //@line 6454
  HEAP32[$638 >> 2] = $76; //@line 6455
  $639 = $ReallocAsyncCtx5 + 152 | 0; //@line 6456
  HEAP32[$639 >> 2] = $78; //@line 6457
  $640 = $ReallocAsyncCtx5 + 156 | 0; //@line 6458
  HEAP32[$640 >> 2] = $80; //@line 6459
  $641 = $ReallocAsyncCtx5 + 160 | 0; //@line 6460
  HEAP32[$641 >> 2] = $82; //@line 6461
  $642 = $ReallocAsyncCtx5 + 164 | 0; //@line 6462
  HEAP32[$642 >> 2] = $84; //@line 6463
  $643 = $ReallocAsyncCtx5 + 168 | 0; //@line 6464
  HEAP32[$643 >> 2] = $86; //@line 6465
  $644 = $ReallocAsyncCtx5 + 172 | 0; //@line 6466
  HEAP32[$644 >> 2] = $88; //@line 6467
  $645 = $ReallocAsyncCtx5 + 176 | 0; //@line 6468
  HEAP32[$645 >> 2] = $90; //@line 6469
  $646 = $ReallocAsyncCtx5 + 180 | 0; //@line 6470
  HEAP32[$646 >> 2] = $92; //@line 6471
  $647 = $ReallocAsyncCtx5 + 184 | 0; //@line 6472
  HEAP32[$647 >> 2] = $94; //@line 6473
  $648 = $ReallocAsyncCtx5 + 188 | 0; //@line 6474
  HEAP32[$648 >> 2] = $96; //@line 6475
  $649 = $ReallocAsyncCtx5 + 192 | 0; //@line 6476
  HEAP32[$649 >> 2] = $98; //@line 6477
  $650 = $ReallocAsyncCtx5 + 196 | 0; //@line 6478
  HEAP32[$650 >> 2] = $100; //@line 6479
  $651 = $ReallocAsyncCtx5 + 200 | 0; //@line 6480
  HEAP32[$651 >> 2] = $102; //@line 6481
  $652 = $ReallocAsyncCtx5 + 204 | 0; //@line 6482
  HEAP8[$652 >> 0] = $590; //@line 6483
  $653 = $ReallocAsyncCtx5 + 208 | 0; //@line 6484
  HEAP32[$653 >> 2] = $104; //@line 6485
  $654 = $ReallocAsyncCtx5 + 212 | 0; //@line 6486
  HEAP32[$654 >> 2] = $106; //@line 6487
  $655 = $ReallocAsyncCtx5 + 216 | 0; //@line 6488
  HEAP32[$655 >> 2] = $108; //@line 6489
  $656 = $ReallocAsyncCtx5 + 220 | 0; //@line 6490
  HEAP32[$656 >> 2] = $110; //@line 6491
  $657 = $ReallocAsyncCtx5 + 224 | 0; //@line 6492
  HEAP32[$657 >> 2] = $112; //@line 6493
  $658 = $ReallocAsyncCtx5 + 228 | 0; //@line 6494
  HEAP32[$658 >> 2] = $114; //@line 6495
  $659 = $ReallocAsyncCtx5 + 232 | 0; //@line 6496
  HEAP32[$659 >> 2] = $116; //@line 6497
  $660 = $ReallocAsyncCtx5 + 236 | 0; //@line 6498
  HEAP32[$660 >> 2] = $118; //@line 6499
  $661 = $ReallocAsyncCtx5 + 240 | 0; //@line 6500
  HEAP32[$661 >> 2] = $120; //@line 6501
  $662 = $ReallocAsyncCtx5 + 244 | 0; //@line 6502
  HEAP32[$662 >> 2] = $122; //@line 6503
  $663 = $ReallocAsyncCtx5 + 248 | 0; //@line 6504
  HEAP32[$663 >> 2] = $124; //@line 6505
  $664 = $ReallocAsyncCtx5 + 252 | 0; //@line 6506
  HEAP32[$664 >> 2] = $126; //@line 6507
  $665 = $ReallocAsyncCtx5 + 256 | 0; //@line 6508
  HEAP32[$665 >> 2] = $128; //@line 6509
  $666 = $ReallocAsyncCtx5 + 260 | 0; //@line 6510
  HEAP32[$666 >> 2] = $130; //@line 6511
  $667 = $ReallocAsyncCtx5 + 264 | 0; //@line 6512
  HEAP32[$667 >> 2] = $132; //@line 6513
  $668 = $ReallocAsyncCtx5 + 268 | 0; //@line 6514
  HEAP32[$668 >> 2] = $134; //@line 6515
  sp = STACKTOP; //@line 6516
  return;
 } else if ((label | 0) == 31) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 6521
  return;
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0174 = 0, $$0174235 = 0, $$0174236 = 0, $$1$off0 = 0, $$1169 = 0, $$1171 = 0, $$1173 = 0, $$1175 = 0, $$3$off0230 = 0, $$3179 = 0, $$byval_copy198 = 0, $$sink = 0, $$sink200 = 0, $$sink233 = 0, $10 = 0, $11 = 0, $12 = 0, $129 = 0, $130 = 0, $135 = 0, $142 = 0, $143 = 0, $155 = 0, $158 = 0, $165 = 0, $167 = 0, $168 = 0, $173 = 0, $175 = 0, $176 = 0, $20 = 0, $259 = 0, $269 = 0, $273 = 0, $280 = 0, $283 = 0, $302 = 0, $310 = 0, $317 = 0, $318 = 0, $330 = 0, $333 = 0, $354 = 0, $369 = 0, $376 = 0, $377 = 0, $389 = 0, $392 = 0, $397 = 0, $399 = 0, $40 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $433 = 0, $434 = 0, $435 = 0, $437 = 0, $485 = 0, $5 = 0, $531 = 0, $535 = 0, $537 = 0, $540 = 0, $547 = 0, $548 = 0, $560 = 0, $563 = 0, $582 = 0, $585 = 0, $586 = 0, $593 = 0, $6 = 0, $600 = 0, $601 = 0, $613 = 0, $616 = 0, $621 = 0, $623 = 0, $624 = 0, $628 = 0, $629 = 0, $636 = 0, $643 = 0, $644 = 0, $656 = 0, $659 = 0, $669 = 0, $671 = 0, $672 = 0, $673 = 0, $677 = 0, $681 = 0, $686 = 0, $687 = 0, $689 = 0, $690 = 0, $7 = 0, $707 = 0, $710 = 0, $711 = 0, $713 = 0, $714 = 0, $737 = 0, $742 = 0, $743 = 0, $755 = 0, $756 = 0, $758 = 0, $759 = 0, $776 = 0, $782 = 0, $785 = 0, $796 = 0, $802 = 0, $806 = 0, $813 = 0, $814 = 0, $826 = 0, $829 = 0, $83 = 0, $833 = 0, $84 = 0, $844 = 0, $849 = 0, $856 = 0, $857 = 0, $869 = 0, $872 = 0, $878 = 0, $881 = 0, $AsyncCtx = 0, $AsyncCtx100 = 0, $AsyncCtx104 = 0, $AsyncCtx108 = 0, $AsyncCtx112 = 0, $AsyncCtx116 = 0, $AsyncCtx120 = 0, $AsyncCtx123 = 0, $AsyncCtx127 = 0, $AsyncCtx131 = 0, $AsyncCtx135 = 0, $AsyncCtx139 = 0, $AsyncCtx143 = 0, $AsyncCtx147 = 0, $AsyncCtx151 = 0, $AsyncCtx155 = 0, $AsyncCtx28 = 0, $AsyncCtx32 = 0, $AsyncCtx36 = 0, $AsyncCtx40 = 0, $AsyncCtx43 = 0, $AsyncCtx46 = 0, $AsyncCtx49 = 0, $AsyncCtx52 = 0, $AsyncCtx55 = 0, $AsyncCtx58 = 0, $AsyncCtx61 = 0, $AsyncCtx64 = 0, $AsyncCtx68 = 0, $AsyncCtx72 = 0, $AsyncCtx76 = 0, $AsyncCtx80 = 0, $AsyncCtx84 = 0, $AsyncCtx88 = 0, $AsyncCtx92 = 0, $AsyncCtx96 = 0, $sext = 0, $trunc = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9942
 STACKTOP = STACKTOP + 128 | 0; //@line 9943
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 9943
 $$byval_copy198 = sp + 88 | 0; //@line 9944
 $vararg_buffer24 = sp + 80 | 0; //@line 9945
 $vararg_buffer22 = sp + 72 | 0; //@line 9946
 $vararg_buffer20 = sp + 64 | 0; //@line 9947
 $vararg_buffer18 = sp + 56 | 0; //@line 9948
 $vararg_buffer16 = sp + 48 | 0; //@line 9949
 $vararg_buffer14 = sp + 40 | 0; //@line 9950
 $vararg_buffer12 = sp + 32 | 0; //@line 9951
 $vararg_buffer10 = sp + 24 | 0; //@line 9952
 $vararg_buffer8 = sp + 16 | 0; //@line 9953
 $vararg_buffer6 = sp + 8 | 0; //@line 9954
 $vararg_buffer4 = sp; //@line 9955
 $5 = sp + 112 | 0; //@line 9956
 $6 = sp + 104 | 0; //@line 9957
 $7 = $2 & 65535; //@line 9958
 HEAP32[$$byval_copy198 >> 2] = $1; //@line 9961
 HEAP32[$$byval_copy198 + 4 >> 2] = $7; //@line 9963
 HEAP32[$$byval_copy198 + 8 >> 2] = $3 << 16 >> 16; //@line 9965
 HEAP32[$$byval_copy198 + 12 >> 2] = $4 << 24 >> 24; //@line 9967
 _mbed_tracef(16, 13704, 13788, $$byval_copy198); //@line 9968
 HEAP32[$6 >> 2] = 0; //@line 9969
 $10 = $0 + 912 | 0; //@line 9970
 $11 = $0 + 928 | 0; //@line 9971
 $12 = $0 + 288 | 0; //@line 9972
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($12) | 0) + 10 >> 0] = 0; //@line 9975
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 20 >> 1] = $3; //@line 9978
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 22 >> 0] = $4; //@line 9981
 $20 = HEAP32[$0 + 364 >> 2] | 0; //@line 9983
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 24 >> 2] = $20; //@line 9986
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 9 >> 0] = 0; //@line 9989
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 8 >> 0] = 0; //@line 9992
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 11 >> 0] = 0; //@line 9995
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 12 >> 2] = 0; //@line 9998
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 16 >> 1] = 0; //@line 10001
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 18 >> 0] = 0; //@line 10004
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 28 >> 0] = 0; //@line 10007
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 32 >> 2] = 0; //@line 10010
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) >> 2] = 0; //@line 10012
 $40 = HEAP32[$0 >> 2] | 0; //@line 10013
 $AsyncCtx68 = _emscripten_alloc_async_context(172, sp) | 0; //@line 10014
 __ZN7LoRaPHY18put_radio_to_sleepEv($40); //@line 10015
 if (___async) {
  HEAP32[$AsyncCtx68 >> 2] = 302; //@line 10018
  HEAP32[$AsyncCtx68 + 4 >> 2] = $vararg_buffer8; //@line 10020
  HEAP32[$AsyncCtx68 + 8 >> 2] = $1; //@line 10022
  HEAP32[$AsyncCtx68 + 12 >> 2] = $5; //@line 10024
  HEAP32[$AsyncCtx68 + 16 >> 2] = $0; //@line 10026
  HEAP32[$AsyncCtx68 + 20 >> 2] = $vararg_buffer14; //@line 10028
  HEAP32[$AsyncCtx68 + 24 >> 2] = $vararg_buffer8; //@line 10030
  HEAP8[$AsyncCtx68 + 28 >> 0] = $4; //@line 10032
  HEAP32[$AsyncCtx68 + 32 >> 2] = $vararg_buffer4; //@line 10034
  HEAP32[$AsyncCtx68 + 36 >> 2] = $vararg_buffer20; //@line 10036
  HEAP32[$AsyncCtx68 + 40 >> 2] = $vararg_buffer14; //@line 10038
  HEAP32[$AsyncCtx68 + 44 >> 2] = $vararg_buffer10; //@line 10040
  HEAP32[$AsyncCtx68 + 48 >> 2] = $6; //@line 10042
  HEAP32[$AsyncCtx68 + 52 >> 2] = $vararg_buffer12; //@line 10044
  HEAP32[$AsyncCtx68 + 56 >> 2] = $vararg_buffer14; //@line 10046
  HEAP32[$AsyncCtx68 + 60 >> 2] = $vararg_buffer12; //@line 10048
  HEAP32[$AsyncCtx68 + 64 >> 2] = $vararg_buffer24; //@line 10050
  HEAP32[$AsyncCtx68 + 68 >> 2] = $vararg_buffer18; //@line 10052
  HEAP32[$AsyncCtx68 + 72 >> 2] = $vararg_buffer12; //@line 10054
  HEAP32[$AsyncCtx68 + 76 >> 2] = $12; //@line 10056
  HEAP32[$AsyncCtx68 + 80 >> 2] = $7; //@line 10058
  HEAP32[$AsyncCtx68 + 84 >> 2] = $vararg_buffer24; //@line 10060
  HEAP32[$AsyncCtx68 + 88 >> 2] = $vararg_buffer18; //@line 10062
  HEAP32[$AsyncCtx68 + 92 >> 2] = $vararg_buffer22; //@line 10064
  HEAP32[$AsyncCtx68 + 96 >> 2] = $vararg_buffer22; //@line 10066
  HEAP32[$AsyncCtx68 + 100 >> 2] = $vararg_buffer22; //@line 10068
  HEAP32[$AsyncCtx68 + 104 >> 2] = $10; //@line 10070
  HEAP32[$AsyncCtx68 + 108 >> 2] = $vararg_buffer16; //@line 10072
  HEAP32[$AsyncCtx68 + 112 >> 2] = $6; //@line 10074
  HEAP32[$AsyncCtx68 + 116 >> 2] = $vararg_buffer6; //@line 10076
  HEAP32[$AsyncCtx68 + 120 >> 2] = $vararg_buffer24; //@line 10078
  HEAP32[$AsyncCtx68 + 124 >> 2] = $vararg_buffer6; //@line 10080
  HEAP32[$AsyncCtx68 + 128 >> 2] = $vararg_buffer8; //@line 10082
  HEAP32[$AsyncCtx68 + 132 >> 2] = $vararg_buffer4; //@line 10084
  HEAP32[$AsyncCtx68 + 136 >> 2] = $vararg_buffer4; //@line 10086
  HEAP32[$AsyncCtx68 + 140 >> 2] = $vararg_buffer6; //@line 10088
  HEAP32[$AsyncCtx68 + 144 >> 2] = $11; //@line 10090
  HEAP32[$AsyncCtx68 + 148 >> 2] = $vararg_buffer20; //@line 10092
  HEAP32[$AsyncCtx68 + 152 >> 2] = $5; //@line 10094
  HEAP32[$AsyncCtx68 + 156 >> 2] = $vararg_buffer10; //@line 10096
  HEAP32[$AsyncCtx68 + 160 >> 2] = $vararg_buffer16; //@line 10098
  HEAP32[$AsyncCtx68 + 164 >> 2] = $0; //@line 10100
  HEAP32[$AsyncCtx68 + 168 >> 2] = $vararg_buffer10; //@line 10102
  sp = STACKTOP; //@line 10103
  STACKTOP = sp; //@line 10104
  return;
 }
 _emscripten_free_async_context($AsyncCtx68 | 0); //@line 10106
 $83 = $0 + 356 | 0; //@line 10107
 $84 = HEAP32[$83 >> 2] | 0; //@line 10108
 $AsyncCtx123 = _emscripten_alloc_async_context(176, sp) | 0; //@line 10110
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($84, $0 + 1056 | 0); //@line 10111
 if (___async) {
  HEAP32[$AsyncCtx123 >> 2] = 303; //@line 10114
  HEAP32[$AsyncCtx123 + 4 >> 2] = $vararg_buffer8; //@line 10116
  HEAP32[$AsyncCtx123 + 8 >> 2] = $1; //@line 10118
  HEAP32[$AsyncCtx123 + 12 >> 2] = $5; //@line 10120
  HEAP32[$AsyncCtx123 + 16 >> 2] = $0; //@line 10122
  HEAP32[$AsyncCtx123 + 20 >> 2] = $vararg_buffer14; //@line 10124
  HEAP32[$AsyncCtx123 + 24 >> 2] = $vararg_buffer8; //@line 10126
  HEAP8[$AsyncCtx123 + 28 >> 0] = $4; //@line 10128
  HEAP32[$AsyncCtx123 + 32 >> 2] = $vararg_buffer4; //@line 10130
  HEAP32[$AsyncCtx123 + 36 >> 2] = $vararg_buffer20; //@line 10132
  HEAP32[$AsyncCtx123 + 40 >> 2] = $vararg_buffer14; //@line 10134
  HEAP32[$AsyncCtx123 + 44 >> 2] = $vararg_buffer10; //@line 10136
  HEAP32[$AsyncCtx123 + 48 >> 2] = $6; //@line 10138
  HEAP32[$AsyncCtx123 + 52 >> 2] = $vararg_buffer12; //@line 10140
  HEAP32[$AsyncCtx123 + 56 >> 2] = $vararg_buffer14; //@line 10142
  HEAP32[$AsyncCtx123 + 60 >> 2] = $vararg_buffer12; //@line 10144
  HEAP32[$AsyncCtx123 + 64 >> 2] = $vararg_buffer24; //@line 10146
  HEAP32[$AsyncCtx123 + 68 >> 2] = $vararg_buffer18; //@line 10148
  HEAP32[$AsyncCtx123 + 72 >> 2] = $vararg_buffer12; //@line 10150
  HEAP32[$AsyncCtx123 + 76 >> 2] = $12; //@line 10152
  HEAP32[$AsyncCtx123 + 80 >> 2] = $7; //@line 10154
  HEAP32[$AsyncCtx123 + 84 >> 2] = $vararg_buffer24; //@line 10156
  HEAP32[$AsyncCtx123 + 88 >> 2] = $vararg_buffer18; //@line 10158
  HEAP32[$AsyncCtx123 + 92 >> 2] = $vararg_buffer22; //@line 10160
  HEAP32[$AsyncCtx123 + 96 >> 2] = $vararg_buffer22; //@line 10162
  HEAP32[$AsyncCtx123 + 100 >> 2] = $83; //@line 10164
  HEAP32[$AsyncCtx123 + 104 >> 2] = $vararg_buffer22; //@line 10166
  HEAP32[$AsyncCtx123 + 108 >> 2] = $10; //@line 10168
  HEAP32[$AsyncCtx123 + 112 >> 2] = $vararg_buffer16; //@line 10170
  HEAP32[$AsyncCtx123 + 116 >> 2] = $6; //@line 10172
  HEAP32[$AsyncCtx123 + 120 >> 2] = $vararg_buffer6; //@line 10174
  HEAP32[$AsyncCtx123 + 124 >> 2] = $vararg_buffer24; //@line 10176
  HEAP32[$AsyncCtx123 + 128 >> 2] = $vararg_buffer6; //@line 10178
  HEAP32[$AsyncCtx123 + 132 >> 2] = $vararg_buffer8; //@line 10180
  HEAP32[$AsyncCtx123 + 136 >> 2] = $vararg_buffer4; //@line 10182
  HEAP32[$AsyncCtx123 + 140 >> 2] = $vararg_buffer4; //@line 10184
  HEAP32[$AsyncCtx123 + 144 >> 2] = $vararg_buffer6; //@line 10186
  HEAP32[$AsyncCtx123 + 148 >> 2] = $vararg_buffer20; //@line 10188
  HEAP32[$AsyncCtx123 + 152 >> 2] = $11; //@line 10190
  HEAP32[$AsyncCtx123 + 156 >> 2] = $5; //@line 10192
  HEAP32[$AsyncCtx123 + 160 >> 2] = $vararg_buffer10; //@line 10194
  HEAP32[$AsyncCtx123 + 164 >> 2] = $vararg_buffer16; //@line 10196
  HEAP32[$AsyncCtx123 + 168 >> 2] = $0; //@line 10198
  HEAP32[$AsyncCtx123 + 172 >> 2] = $vararg_buffer10; //@line 10200
  sp = STACKTOP; //@line 10201
  STACKTOP = sp; //@line 10202
  return;
 }
 _emscripten_free_async_context($AsyncCtx123 | 0); //@line 10204
 $129 = HEAP8[$1 >> 0] | 0; //@line 10205
 $trunc = ($129 & 255) >>> 5; //@line 10206
 L7 : do {
  switch ($trunc & 7) {
  case 1:
   {
    $130 = $0 + 372 | 0; //@line 10211
    if (HEAP8[$130 >> 0] | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 >> 2] = 1; //@line 10217
     _mbed_tracef(16, 13704, 13843, $vararg_buffer4); //@line 10218
     $135 = $0 + 968 | 0; //@line 10219
     HEAP32[$135 >> 2] = HEAP32[$135 >> 2] | 64; //@line 10222
     if (HEAP8[$0 + 373 >> 0] | 0) {
      $142 = HEAP32[$0 + 1328 >> 2] | 0; //@line 10228
      HEAP32[$vararg_buffer4 >> 2] = 304; //@line 10229
      HEAP32[$vararg_buffer4 + 4 >> 2] = 0; //@line 10231
      $AsyncCtx112 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10232
      HEAP32[$$byval_copy198 >> 2] = HEAP32[$vararg_buffer4 >> 2]; //@line 10233
      HEAP32[$$byval_copy198 + 4 >> 2] = HEAP32[$vararg_buffer4 + 4 >> 2]; //@line 10233
      $143 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($142, $0, $$byval_copy198) | 0; //@line 10234
      if (___async) {
       HEAP32[$AsyncCtx112 >> 2] = 305; //@line 10237
       HEAP32[$AsyncCtx112 + 4 >> 2] = $vararg_buffer4; //@line 10239
       HEAP32[$AsyncCtx112 + 8 >> 2] = $0; //@line 10241
       HEAP32[$AsyncCtx112 + 12 >> 2] = $83; //@line 10243
       HEAP32[$AsyncCtx112 + 16 >> 2] = $6; //@line 10245
       HEAP32[$AsyncCtx112 + 20 >> 2] = $5; //@line 10247
       sp = STACKTOP; //@line 10248
       STACKTOP = sp; //@line 10249
       return;
      }
      _emscripten_free_async_context($AsyncCtx112 | 0); //@line 10251
      do {
       if (!$143) {
        $AsyncCtx155 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10255
        _mbed_assert_internal(13588, 13597, 199); //@line 10256
        if (___async) {
         HEAP32[$AsyncCtx155 >> 2] = 306; //@line 10259
         HEAP32[$AsyncCtx155 + 4 >> 2] = $vararg_buffer4; //@line 10261
         HEAP32[$AsyncCtx155 + 8 >> 2] = $0; //@line 10263
         HEAP32[$AsyncCtx155 + 12 >> 2] = $83; //@line 10265
         HEAP32[$AsyncCtx155 + 16 >> 2] = $6; //@line 10267
         HEAP32[$AsyncCtx155 + 20 >> 2] = $5; //@line 10269
         sp = STACKTOP; //@line 10270
         STACKTOP = sp; //@line 10271
         return;
        } else {
         _emscripten_free_async_context($AsyncCtx155 | 0); //@line 10273
         break;
        }
       }
      } while (0);
     }
     $155 = $0 + 944 | 0; //@line 10279
     HEAP8[$155 >> 0] = HEAP8[$155 >> 0] | 34; //@line 10282
     $158 = HEAP32[$83 >> 2] | 0; //@line 10283
     $AsyncCtx64 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10285
     __ZN18LoRaWANTimeHandler5startER13timer_event_tj($158, $0 + 996 | 0, 1); //@line 10286
     if (___async) {
      HEAP32[$AsyncCtx64 >> 2] = 307; //@line 10289
      HEAP32[$AsyncCtx64 + 4 >> 2] = $6; //@line 10291
      HEAP32[$AsyncCtx64 + 8 >> 2] = $5; //@line 10293
      sp = STACKTOP; //@line 10294
      STACKTOP = sp; //@line 10295
      return;
     }
     _emscripten_free_async_context($AsyncCtx64 | 0); //@line 10297
     STACKTOP = sp; //@line 10298
     return;
    }
    $165 = $0 + 908 | 0; //@line 10303
    $167 = $0 + 638 | 0; //@line 10305
    $168 = $0 + 639 | 0; //@line 10306
    if (__Z18decrypt_join_framePKhtS0_Ph($1 + 1 | 0, $7 + 65535 & 65535, HEAP32[$165 >> 2] | 0, $168) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 >> 2] = 13; //@line 10312
     STACKTOP = sp; //@line 10313
     return;
    }
    HEAP8[$167 >> 0] = $129; //@line 10315
    $173 = $7 + -4 | 0; //@line 10316
    $175 = HEAP32[$165 >> 2] | 0; //@line 10318
    $AsyncCtx36 = _emscripten_alloc_async_context(64, sp) | 0; //@line 10319
    $176 = __Z22compute_join_frame_micPKhtS0_Pj($167, $173 & 65535, $175, $6) | 0; //@line 10320
    if (___async) {
     HEAP32[$AsyncCtx36 >> 2] = 308; //@line 10323
     HEAP32[$AsyncCtx36 + 4 >> 2] = $0; //@line 10325
     HEAP32[$AsyncCtx36 + 8 >> 2] = $173; //@line 10327
     HEAP32[$AsyncCtx36 + 12 >> 2] = $7; //@line 10329
     HEAP32[$AsyncCtx36 + 16 >> 2] = $6; //@line 10331
     HEAP32[$AsyncCtx36 + 20 >> 2] = $12; //@line 10333
     HEAP32[$AsyncCtx36 + 24 >> 2] = $6; //@line 10335
     HEAP32[$AsyncCtx36 + 28 >> 2] = $5; //@line 10337
     HEAP32[$AsyncCtx36 + 32 >> 2] = $165; //@line 10339
     HEAP32[$AsyncCtx36 + 36 >> 2] = $168; //@line 10341
     HEAP32[$AsyncCtx36 + 40 >> 2] = $10; //@line 10343
     HEAP32[$AsyncCtx36 + 44 >> 2] = $11; //@line 10345
     HEAP32[$AsyncCtx36 + 48 >> 2] = $83; //@line 10347
     HEAP32[$AsyncCtx36 + 52 >> 2] = $5; //@line 10349
     HEAP32[$AsyncCtx36 + 56 >> 2] = $0; //@line 10351
     HEAP32[$AsyncCtx36 + 60 >> 2] = $130; //@line 10353
     sp = STACKTOP; //@line 10354
     STACKTOP = sp; //@line 10355
     return;
    }
    _emscripten_free_async_context($AsyncCtx36 | 0); //@line 10357
    if ($176 | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 >> 2] = 13; //@line 10362
     STACKTOP = sp; //@line 10363
     return;
    }
    if ((HEAPU8[$7 + -3 + ($0 + 638) >> 0] << 8 | HEAPU8[$0 + 638 + $173 >> 0] | HEAPU8[$7 + -2 + ($0 + 638) >> 0] << 16 | HEAPU8[$7 + -1 + ($0 + 638) >> 0] << 24 | 0) != (HEAP32[$6 >> 2] | 0)) {
     HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 7; //@line 10392
     break L7;
    }
    if (__Z28compute_skeys_for_join_framePKhS0_tPhS1_(HEAP32[$165 >> 2] | 0, $168, HEAP16[$0 + 946 >> 1] | 0, $10, $11) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 >> 2] = 13; //@line 10403
     STACKTOP = sp; //@line 10404
     return;
    }
    HEAP32[$0 + 948 >> 2] = HEAPU8[$0 + 644 >> 0] << 16 | (HEAPU8[$0 + 643 >> 0] << 8 | HEAPU8[$0 + 642 >> 0]); //@line 10420
    HEAP32[$0 + 952 >> 2] = HEAPU8[$0 + 648 >> 0] << 24 | (HEAPU8[$0 + 647 >> 0] << 16 | (HEAPU8[$0 + 646 >> 0] << 8 | HEAPU8[$0 + 645 >> 0])); //@line 10440
    $259 = HEAP8[$0 + 649 >> 0] | 0; //@line 10442
    HEAP8[$0 + 1129 >> 0] = ($259 & 255) >>> 4 & 7; //@line 10448
    HEAP8[$0 + 1136 >> 0] = $259 & 15; //@line 10451
    $269 = HEAP8[$0 + 650 >> 0] & 15; //@line 10454
    $273 = $269 << 24 >> 24 == 0 ? 1e3 : ($269 & 255) * 1e3 | 0; //@line 10459
    HEAP32[$0 + 1112 >> 2] = $273; //@line 10460
    HEAP32[$0 + 1116 >> 2] = $273 + 1e3; //@line 10463
    HEAP32[$5 >> 2] = $0 + 651; //@line 10465
    HEAP8[$5 + 4 >> 0] = $7 + 239; //@line 10469
    $280 = HEAP32[$0 >> 2] | 0; //@line 10470
    $283 = HEAP32[(HEAP32[$280 >> 2] | 0) + 20 >> 2] | 0; //@line 10473
    $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 10474
    FUNCTION_TABLE_vii[$283 & 31]($280, $5); //@line 10475
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 309; //@line 10478
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 10480
     HEAP32[$AsyncCtx + 8 >> 2] = $130; //@line 10482
     HEAP32[$AsyncCtx + 12 >> 2] = $83; //@line 10484
     HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 10486
     HEAP32[$AsyncCtx + 20 >> 2] = $5; //@line 10488
     sp = STACKTOP; //@line 10489
     STACKTOP = sp; //@line 10490
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 10492
     HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 0; //@line 10496
     HEAP8[$130 >> 0] = 1; //@line 10497
     break L7;
    }
    break;
   }
  case 3:
  case 5:
   {
    $302 = __ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$0 >> 2] | 0, HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 10 >> 0] | 0, (HEAP8[$0 + 369 >> 0] | 0) != 0) | 0; //@line 10510
    $sext = ($7 << 16) + -851968 | 0; //@line 10512
    if (((($sext | 0) < 0 ? 0 : $sext >> 16) | 0) > ($302 & 255 | 0)) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 >> 2] = 1; //@line 10521
     _mbed_tracef(16, 13704, 13843, $vararg_buffer6); //@line 10522
     $310 = $0 + 968 | 0; //@line 10523
     HEAP32[$310 >> 2] = HEAP32[$310 >> 2] | 64; //@line 10526
     if (HEAP8[$0 + 373 >> 0] | 0) {
      $317 = HEAP32[$0 + 1328 >> 2] | 0; //@line 10532
      HEAP32[$vararg_buffer6 >> 2] = 304; //@line 10533
      HEAP32[$vararg_buffer6 + 4 >> 2] = 0; //@line 10535
      $AsyncCtx108 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10536
      HEAP32[$$byval_copy198 >> 2] = HEAP32[$vararg_buffer6 >> 2]; //@line 10537
      HEAP32[$$byval_copy198 + 4 >> 2] = HEAP32[$vararg_buffer6 + 4 >> 2]; //@line 10537
      $318 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($317, $0, $$byval_copy198) | 0; //@line 10538
      if (___async) {
       HEAP32[$AsyncCtx108 >> 2] = 310; //@line 10541
       HEAP32[$AsyncCtx108 + 4 >> 2] = $vararg_buffer6; //@line 10543
       HEAP32[$AsyncCtx108 + 8 >> 2] = $0; //@line 10545
       HEAP32[$AsyncCtx108 + 12 >> 2] = $83; //@line 10547
       HEAP32[$AsyncCtx108 + 16 >> 2] = $6; //@line 10549
       HEAP32[$AsyncCtx108 + 20 >> 2] = $5; //@line 10551
       sp = STACKTOP; //@line 10552
       STACKTOP = sp; //@line 10553
       return;
      }
      _emscripten_free_async_context($AsyncCtx108 | 0); //@line 10555
      do {
       if (!$318) {
        $AsyncCtx151 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10559
        _mbed_assert_internal(13588, 13597, 199); //@line 10560
        if (___async) {
         HEAP32[$AsyncCtx151 >> 2] = 311; //@line 10563
         HEAP32[$AsyncCtx151 + 4 >> 2] = $vararg_buffer6; //@line 10565
         HEAP32[$AsyncCtx151 + 8 >> 2] = $0; //@line 10567
         HEAP32[$AsyncCtx151 + 12 >> 2] = $83; //@line 10569
         HEAP32[$AsyncCtx151 + 16 >> 2] = $6; //@line 10571
         HEAP32[$AsyncCtx151 + 20 >> 2] = $5; //@line 10573
         sp = STACKTOP; //@line 10574
         STACKTOP = sp; //@line 10575
         return;
        } else {
         _emscripten_free_async_context($AsyncCtx151 | 0); //@line 10577
         break;
        }
       }
      } while (0);
     }
     $330 = $0 + 944 | 0; //@line 10583
     HEAP8[$330 >> 0] = HEAP8[$330 >> 0] | 34; //@line 10586
     $333 = HEAP32[$83 >> 2] | 0; //@line 10587
     $AsyncCtx61 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10589
     __ZN18LoRaWANTimeHandler5startER13timer_event_tj($333, $0 + 996 | 0, 1); //@line 10590
     if (___async) {
      HEAP32[$AsyncCtx61 >> 2] = 312; //@line 10593
      HEAP32[$AsyncCtx61 + 4 >> 2] = $6; //@line 10595
      HEAP32[$AsyncCtx61 + 8 >> 2] = $5; //@line 10597
      sp = STACKTOP; //@line 10598
      STACKTOP = sp; //@line 10599
      return;
     }
     _emscripten_free_async_context($AsyncCtx61 | 0); //@line 10601
     STACKTOP = sp; //@line 10602
     return;
    }
    $354 = HEAPU8[$1 + 2 >> 0] << 8 | HEAPU8[$1 + 1 >> 0] | HEAPU8[$1 + 3 >> 0] << 16 | HEAPU8[$1 + 4 >> 0] << 24; //@line 10621
    L85 : do {
     if (($354 | 0) == (HEAP32[$0 + 952 >> 2] | 0)) {
      $$1169 = 0; //@line 10628
      $$1171 = $11; //@line 10628
      $$1173 = $10; //@line 10628
      $$1175 = 0; //@line 10628
      $$sink233 = $0 + 960 | 0; //@line 10628
     } else {
      $$0174235 = HEAP32[$0 + 1208 >> 2] | 0; //@line 10631
      L88 : do {
       if ($$0174235 | 0) {
        $$0174236 = $$0174235; //@line 10635
        while (1) {
         if (($354 | 0) == (HEAP32[$$0174236 >> 2] | 0)) {
          break;
         }
         $$0174 = HEAP32[$$0174236 + 40 >> 2] | 0; //@line 10643
         if (!$$0174) {
          break L88;
         } else {
          $$0174236 = $$0174; //@line 10648
         }
        }
        $$1169 = 1; //@line 10654
        $$1171 = $$0174236 + 20 | 0; //@line 10654
        $$1173 = $$0174236 + 4 | 0; //@line 10654
        $$1175 = $$0174236; //@line 10654
        $$sink233 = $$0174236 + 36 | 0; //@line 10654
        break L85;
       }
      } while (0);
      HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 >> 2] = 11; //@line 10660
      _mbed_tracef(16, 13704, 13843, $vararg_buffer8); //@line 10661
      $369 = $0 + 968 | 0; //@line 10662
      HEAP32[$369 >> 2] = HEAP32[$369 >> 2] | 64; //@line 10665
      if (HEAP8[$0 + 373 >> 0] | 0) {
       $376 = HEAP32[$0 + 1328 >> 2] | 0; //@line 10671
       HEAP32[$vararg_buffer8 >> 2] = 304; //@line 10672
       HEAP32[$vararg_buffer8 + 4 >> 2] = 0; //@line 10674
       $AsyncCtx104 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10675
       HEAP32[$$byval_copy198 >> 2] = HEAP32[$vararg_buffer8 >> 2]; //@line 10676
       HEAP32[$$byval_copy198 + 4 >> 2] = HEAP32[$vararg_buffer8 + 4 >> 2]; //@line 10676
       $377 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($376, $0, $$byval_copy198) | 0; //@line 10677
       if (___async) {
        HEAP32[$AsyncCtx104 >> 2] = 313; //@line 10680
        HEAP32[$AsyncCtx104 + 4 >> 2] = $vararg_buffer8; //@line 10682
        HEAP32[$AsyncCtx104 + 8 >> 2] = $0; //@line 10684
        HEAP32[$AsyncCtx104 + 12 >> 2] = $83; //@line 10686
        HEAP32[$AsyncCtx104 + 16 >> 2] = $6; //@line 10688
        HEAP32[$AsyncCtx104 + 20 >> 2] = $5; //@line 10690
        sp = STACKTOP; //@line 10691
        STACKTOP = sp; //@line 10692
        return;
       }
       _emscripten_free_async_context($AsyncCtx104 | 0); //@line 10694
       do {
        if (!$377) {
         $AsyncCtx147 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10698
         _mbed_assert_internal(13588, 13597, 199); //@line 10699
         if (___async) {
          HEAP32[$AsyncCtx147 >> 2] = 314; //@line 10702
          HEAP32[$AsyncCtx147 + 4 >> 2] = $vararg_buffer8; //@line 10704
          HEAP32[$AsyncCtx147 + 8 >> 2] = $0; //@line 10706
          HEAP32[$AsyncCtx147 + 12 >> 2] = $83; //@line 10708
          HEAP32[$AsyncCtx147 + 16 >> 2] = $6; //@line 10710
          HEAP32[$AsyncCtx147 + 20 >> 2] = $5; //@line 10712
          sp = STACKTOP; //@line 10713
          STACKTOP = sp; //@line 10714
          return;
         } else {
          _emscripten_free_async_context($AsyncCtx147 | 0); //@line 10716
          break;
         }
        }
       } while (0);
      }
      $389 = $0 + 944 | 0; //@line 10722
      HEAP8[$389 >> 0] = HEAP8[$389 >> 0] | 34; //@line 10725
      $392 = HEAP32[$83 >> 2] | 0; //@line 10726
      $AsyncCtx58 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10728
      __ZN18LoRaWANTimeHandler5startER13timer_event_tj($392, $0 + 996 | 0, 1); //@line 10729
      if (___async) {
       HEAP32[$AsyncCtx58 >> 2] = 315; //@line 10732
       HEAP32[$AsyncCtx58 + 4 >> 2] = $6; //@line 10734
       HEAP32[$AsyncCtx58 + 8 >> 2] = $5; //@line 10736
       sp = STACKTOP; //@line 10737
       STACKTOP = sp; //@line 10738
       return;
      }
      _emscripten_free_async_context($AsyncCtx58 | 0); //@line 10740
      STACKTOP = sp; //@line 10741
      return;
     }
    } while (0);
    $397 = HEAP32[$$sink233 >> 2] | 0; //@line 10744
    $399 = HEAP8[$1 + 5 >> 0] | 0; //@line 10746
    $408 = $399 & 15; //@line 10755
    $409 = $408 & 255; //@line 10756
    $410 = $409 + 8 | 0; //@line 10757
    $411 = $410 & 255; //@line 10758
    $412 = $7 + -4 | 0; //@line 10759
    $433 = HEAPU8[$1 + ($7 + -3) >> 0] << 8 | HEAPU8[$1 + $412 >> 0] | HEAPU8[$1 + ($7 + -2) >> 0] << 16 | HEAPU8[$1 + ($7 + -1) >> 0] << 24; //@line 10780
    $434 = (HEAPU8[$1 + 7 >> 0] << 8 | HEAPU8[$1 + 6 >> 0]) - $397 | 0; //@line 10781
    $435 = $434 & 65535; //@line 10782
    do {
     if ($435 >>> 0 < 32768) {
      $437 = $435 + $397 | 0; //@line 10786
      $AsyncCtx32 = _emscripten_alloc_async_context(172, sp) | 0; //@line 10788
      __Z11compute_micPKhtS0_jhjPj($1, $412 & 65535, $$1173, $354, 1, $437, $6) | 0; //@line 10789
      if (___async) {
       HEAP32[$AsyncCtx32 >> 2] = 316; //@line 10792
       HEAP32[$AsyncCtx32 + 4 >> 2] = $1; //@line 10794
       HEAP32[$AsyncCtx32 + 8 >> 2] = $$1173; //@line 10796
       HEAP32[$AsyncCtx32 + 12 >> 2] = $0; //@line 10798
       HEAP32[$AsyncCtx32 + 16 >> 2] = $vararg_buffer14; //@line 10800
       HEAP8[$AsyncCtx32 + 20 >> 0] = $4; //@line 10802
       HEAP32[$AsyncCtx32 + 24 >> 2] = $$1171; //@line 10804
       HEAP32[$AsyncCtx32 + 28 >> 2] = $412; //@line 10806
       HEAP8[$AsyncCtx32 + 32 >> 0] = $399; //@line 10808
       HEAP32[$AsyncCtx32 + 36 >> 2] = $vararg_buffer20; //@line 10810
       HEAP32[$AsyncCtx32 + 40 >> 2] = $vararg_buffer14; //@line 10812
       HEAP32[$AsyncCtx32 + 44 >> 2] = $vararg_buffer10; //@line 10814
       HEAP32[$AsyncCtx32 + 48 >> 2] = $6; //@line 10816
       HEAP32[$AsyncCtx32 + 52 >> 2] = $vararg_buffer12; //@line 10818
       HEAP32[$AsyncCtx32 + 56 >> 2] = $$1175; //@line 10820
       HEAP8[$AsyncCtx32 + 60 >> 0] = $trunc; //@line 10822
       HEAP32[$AsyncCtx32 + 64 >> 2] = $vararg_buffer14; //@line 10824
       HEAP32[$AsyncCtx32 + 68 >> 2] = $vararg_buffer12; //@line 10826
       HEAP32[$AsyncCtx32 + 72 >> 2] = $vararg_buffer18; //@line 10828
       HEAP32[$AsyncCtx32 + 76 >> 2] = $vararg_buffer12; //@line 10830
       HEAP32[$AsyncCtx32 + 80 >> 2] = $12; //@line 10832
       HEAP32[$AsyncCtx32 + 84 >> 2] = $437; //@line 10834
       HEAP8[$AsyncCtx32 + 88 >> 0] = $$1169; //@line 10836
       HEAP32[$AsyncCtx32 + 92 >> 2] = $vararg_buffer18; //@line 10838
       HEAP32[$AsyncCtx32 + 96 >> 2] = $vararg_buffer22; //@line 10840
       HEAP32[$AsyncCtx32 + 100 >> 2] = $vararg_buffer22; //@line 10842
       HEAP32[$AsyncCtx32 + 104 >> 2] = $354; //@line 10844
       HEAP32[$AsyncCtx32 + 108 >> 2] = $83; //@line 10846
       HEAP32[$AsyncCtx32 + 112 >> 2] = $vararg_buffer22; //@line 10848
       HEAP32[$AsyncCtx32 + 116 >> 2] = $vararg_buffer16; //@line 10850
       HEAP32[$AsyncCtx32 + 120 >> 2] = $6; //@line 10852
       HEAP32[$AsyncCtx32 + 124 >> 2] = $435; //@line 10854
       HEAP8[$AsyncCtx32 + 128 >> 0] = $411; //@line 10856
       HEAP32[$AsyncCtx32 + 132 >> 2] = $410; //@line 10858
       HEAP32[$AsyncCtx32 + 136 >> 2] = $vararg_buffer20; //@line 10860
       HEAP32[$AsyncCtx32 + 140 >> 2] = $409; //@line 10862
       HEAP32[$AsyncCtx32 + 144 >> 2] = $5; //@line 10864
       HEAP8[$AsyncCtx32 + 148 >> 0] = $408; //@line 10866
       HEAP32[$AsyncCtx32 + 152 >> 2] = $vararg_buffer10; //@line 10868
       HEAP32[$AsyncCtx32 + 156 >> 2] = $vararg_buffer16; //@line 10870
       HEAP32[$AsyncCtx32 + 160 >> 2] = $0; //@line 10872
       HEAP32[$AsyncCtx32 + 164 >> 2] = $vararg_buffer10; //@line 10874
       HEAP32[$AsyncCtx32 + 168 >> 2] = $433; //@line 10876
       sp = STACKTOP; //@line 10877
       STACKTOP = sp; //@line 10878
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx32 | 0); //@line 10880
       $$3179 = $437; //@line 10883
       $$sink200 = ($433 | 0) == (HEAP32[$6 >> 2] | 0); //@line 10883
       break;
      }
     } else {
      $485 = $397 + 65536 + ($434 << 16 >> 16) | 0; //@line 10890
      $AsyncCtx28 = _emscripten_alloc_async_context(176, sp) | 0; //@line 10892
      __Z11compute_micPKhtS0_jhjPj($1, $412 & 65535, $$1173, $354, 1, $485, $6) | 0; //@line 10893
      if (___async) {
       HEAP32[$AsyncCtx28 >> 2] = 317; //@line 10896
       HEAP32[$AsyncCtx28 + 4 >> 2] = $1; //@line 10898
       HEAP32[$AsyncCtx28 + 8 >> 2] = $$1173; //@line 10900
       HEAP32[$AsyncCtx28 + 12 >> 2] = $0; //@line 10902
       HEAP32[$AsyncCtx28 + 16 >> 2] = $vararg_buffer14; //@line 10904
       HEAP8[$AsyncCtx28 + 20 >> 0] = $4; //@line 10906
       HEAP32[$AsyncCtx28 + 24 >> 2] = $$1171; //@line 10908
       HEAP32[$AsyncCtx28 + 28 >> 2] = $412; //@line 10910
       HEAP8[$AsyncCtx28 + 32 >> 0] = $399; //@line 10912
       HEAP32[$AsyncCtx28 + 36 >> 2] = $vararg_buffer20; //@line 10914
       HEAP32[$AsyncCtx28 + 40 >> 2] = $vararg_buffer14; //@line 10916
       HEAP32[$AsyncCtx28 + 44 >> 2] = $vararg_buffer10; //@line 10918
       HEAP32[$AsyncCtx28 + 48 >> 2] = $6; //@line 10920
       HEAP32[$AsyncCtx28 + 52 >> 2] = $vararg_buffer12; //@line 10922
       HEAP32[$AsyncCtx28 + 56 >> 2] = $$1175; //@line 10924
       HEAP8[$AsyncCtx28 + 60 >> 0] = $trunc; //@line 10926
       HEAP32[$AsyncCtx28 + 64 >> 2] = $vararg_buffer14; //@line 10928
       HEAP32[$AsyncCtx28 + 68 >> 2] = $vararg_buffer12; //@line 10930
       HEAP32[$AsyncCtx28 + 72 >> 2] = $397; //@line 10932
       HEAP32[$AsyncCtx28 + 76 >> 2] = $vararg_buffer18; //@line 10934
       HEAP32[$AsyncCtx28 + 80 >> 2] = $vararg_buffer12; //@line 10936
       HEAP32[$AsyncCtx28 + 84 >> 2] = $12; //@line 10938
       HEAP32[$AsyncCtx28 + 88 >> 2] = $485; //@line 10940
       HEAP8[$AsyncCtx28 + 92 >> 0] = $$1169; //@line 10942
       HEAP32[$AsyncCtx28 + 96 >> 2] = $vararg_buffer18; //@line 10944
       HEAP32[$AsyncCtx28 + 100 >> 2] = $vararg_buffer22; //@line 10946
       HEAP32[$AsyncCtx28 + 104 >> 2] = $vararg_buffer22; //@line 10948
       HEAP32[$AsyncCtx28 + 108 >> 2] = $354; //@line 10950
       HEAP32[$AsyncCtx28 + 112 >> 2] = $83; //@line 10952
       HEAP32[$AsyncCtx28 + 116 >> 2] = $vararg_buffer22; //@line 10954
       HEAP32[$AsyncCtx28 + 120 >> 2] = $vararg_buffer16; //@line 10956
       HEAP32[$AsyncCtx28 + 124 >> 2] = $6; //@line 10958
       HEAP32[$AsyncCtx28 + 128 >> 2] = $435; //@line 10960
       HEAP8[$AsyncCtx28 + 132 >> 0] = $411; //@line 10962
       HEAP32[$AsyncCtx28 + 136 >> 2] = $410; //@line 10964
       HEAP32[$AsyncCtx28 + 140 >> 2] = $vararg_buffer20; //@line 10966
       HEAP32[$AsyncCtx28 + 144 >> 2] = $409; //@line 10968
       HEAP32[$AsyncCtx28 + 148 >> 2] = $5; //@line 10970
       HEAP8[$AsyncCtx28 + 152 >> 0] = $408; //@line 10972
       HEAP32[$AsyncCtx28 + 156 >> 2] = $vararg_buffer10; //@line 10974
       HEAP32[$AsyncCtx28 + 160 >> 2] = $vararg_buffer16; //@line 10976
       HEAP32[$AsyncCtx28 + 164 >> 2] = $0; //@line 10978
       HEAP32[$AsyncCtx28 + 168 >> 2] = $vararg_buffer10; //@line 10980
       HEAP32[$AsyncCtx28 + 172 >> 2] = $433; //@line 10982
       sp = STACKTOP; //@line 10983
       STACKTOP = sp; //@line 10984
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx28 | 0); //@line 10986
       $531 = ($433 | 0) == (HEAP32[$6 >> 2] | 0); //@line 10988
       $$3179 = $531 ? $485 : $397; //@line 10990
       $$sink200 = $531; //@line 10990
       break;
      }
     }
    } while (0);
    $535 = $435 >>> 0 < ((__ZN7LoRaPHY29get_maximum_frame_counter_gapEv(HEAP32[$0 >> 2] | 0) | 0) & 65535) >>> 0; //@line 10998
    $537 = (__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 | 0; //@line 11000
    if (!$535) {
     HEAP32[$537 >> 2] = 10; //@line 11002
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 32 >> 2] = $$3179; //@line 11005
     _mbed_tracef(16, 13704, 13843, $vararg_buffer10); //@line 11006
     $540 = $0 + 968 | 0; //@line 11007
     HEAP32[$540 >> 2] = HEAP32[$540 >> 2] | 64; //@line 11010
     if (HEAP8[$0 + 373 >> 0] | 0) {
      $547 = HEAP32[$0 + 1328 >> 2] | 0; //@line 11016
      HEAP32[$vararg_buffer10 >> 2] = 304; //@line 11017
      HEAP32[$vararg_buffer10 + 4 >> 2] = 0; //@line 11019
      $AsyncCtx100 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11020
      HEAP32[$$byval_copy198 >> 2] = HEAP32[$vararg_buffer10 >> 2]; //@line 11021
      HEAP32[$$byval_copy198 + 4 >> 2] = HEAP32[$vararg_buffer10 + 4 >> 2]; //@line 11021
      $548 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($547, $0, $$byval_copy198) | 0; //@line 11022
      if (___async) {
       HEAP32[$AsyncCtx100 >> 2] = 318; //@line 11025
       HEAP32[$AsyncCtx100 + 4 >> 2] = $vararg_buffer10; //@line 11027
       HEAP32[$AsyncCtx100 + 8 >> 2] = $0; //@line 11029
       HEAP32[$AsyncCtx100 + 12 >> 2] = $83; //@line 11031
       HEAP32[$AsyncCtx100 + 16 >> 2] = $6; //@line 11033
       HEAP32[$AsyncCtx100 + 20 >> 2] = $5; //@line 11035
       sp = STACKTOP; //@line 11036
       STACKTOP = sp; //@line 11037
       return;
      }
      _emscripten_free_async_context($AsyncCtx100 | 0); //@line 11039
      do {
       if (!$548) {
        $AsyncCtx143 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11043
        _mbed_assert_internal(13588, 13597, 199); //@line 11044
        if (___async) {
         HEAP32[$AsyncCtx143 >> 2] = 319; //@line 11047
         HEAP32[$AsyncCtx143 + 4 >> 2] = $vararg_buffer10; //@line 11049
         HEAP32[$AsyncCtx143 + 8 >> 2] = $0; //@line 11051
         HEAP32[$AsyncCtx143 + 12 >> 2] = $83; //@line 11053
         HEAP32[$AsyncCtx143 + 16 >> 2] = $6; //@line 11055
         HEAP32[$AsyncCtx143 + 20 >> 2] = $5; //@line 11057
         sp = STACKTOP; //@line 11058
         STACKTOP = sp; //@line 11059
         return;
        } else {
         _emscripten_free_async_context($AsyncCtx143 | 0); //@line 11061
         break;
        }
       }
      } while (0);
     }
     $560 = $0 + 944 | 0; //@line 11067
     HEAP8[$560 >> 0] = HEAP8[$560 >> 0] | 34; //@line 11070
     $563 = HEAP32[$83 >> 2] | 0; //@line 11071
     $AsyncCtx55 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11073
     __ZN18LoRaWANTimeHandler5startER13timer_event_tj($563, $0 + 996 | 0, 1); //@line 11074
     if (___async) {
      HEAP32[$AsyncCtx55 >> 2] = 320; //@line 11077
      HEAP32[$AsyncCtx55 + 4 >> 2] = $6; //@line 11079
      HEAP32[$AsyncCtx55 + 8 >> 2] = $5; //@line 11081
      sp = STACKTOP; //@line 11082
      STACKTOP = sp; //@line 11083
      return;
     }
     _emscripten_free_async_context($AsyncCtx55 | 0); //@line 11085
     STACKTOP = sp; //@line 11086
     return;
    }
    if (!$$sink200) {
     HEAP32[$537 >> 2] = 12; //@line 11089
     _mbed_tracef(16, 13704, 13843, $vararg_buffer22); //@line 11090
     $806 = $0 + 968 | 0; //@line 11091
     HEAP32[$806 >> 2] = HEAP32[$806 >> 2] | 64; //@line 11094
     if (HEAP8[$0 + 373 >> 0] | 0) {
      $813 = HEAP32[$0 + 1328 >> 2] | 0; //@line 11100
      HEAP32[$vararg_buffer22 >> 2] = 304; //@line 11101
      HEAP32[$vararg_buffer22 + 4 >> 2] = 0; //@line 11103
      $AsyncCtx88 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11104
      HEAP32[$$byval_copy198 >> 2] = HEAP32[$vararg_buffer22 >> 2]; //@line 11105
      HEAP32[$$byval_copy198 + 4 >> 2] = HEAP32[$vararg_buffer22 + 4 >> 2]; //@line 11105
      $814 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($813, $0, $$byval_copy198) | 0; //@line 11106
      if (___async) {
       HEAP32[$AsyncCtx88 >> 2] = 332; //@line 11109
       HEAP32[$AsyncCtx88 + 4 >> 2] = $vararg_buffer22; //@line 11111
       HEAP32[$AsyncCtx88 + 8 >> 2] = $0; //@line 11113
       HEAP32[$AsyncCtx88 + 12 >> 2] = $83; //@line 11115
       HEAP32[$AsyncCtx88 + 16 >> 2] = $6; //@line 11117
       HEAP32[$AsyncCtx88 + 20 >> 2] = $5; //@line 11119
       sp = STACKTOP; //@line 11120
       STACKTOP = sp; //@line 11121
       return;
      }
      _emscripten_free_async_context($AsyncCtx88 | 0); //@line 11123
      do {
       if (!$814) {
        $AsyncCtx131 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11127
        _mbed_assert_internal(13588, 13597, 199); //@line 11128
        if (___async) {
         HEAP32[$AsyncCtx131 >> 2] = 333; //@line 11131
         HEAP32[$AsyncCtx131 + 4 >> 2] = $vararg_buffer22; //@line 11133
         HEAP32[$AsyncCtx131 + 8 >> 2] = $0; //@line 11135
         HEAP32[$AsyncCtx131 + 12 >> 2] = $83; //@line 11137
         HEAP32[$AsyncCtx131 + 16 >> 2] = $6; //@line 11139
         HEAP32[$AsyncCtx131 + 20 >> 2] = $5; //@line 11141
         sp = STACKTOP; //@line 11142
         STACKTOP = sp; //@line 11143
         return;
        } else {
         _emscripten_free_async_context($AsyncCtx131 | 0); //@line 11145
         break;
        }
       }
      } while (0);
     }
     $826 = $0 + 944 | 0; //@line 11151
     HEAP8[$826 >> 0] = HEAP8[$826 >> 0] | 34; //@line 11154
     $829 = HEAP32[$83 >> 2] | 0; //@line 11155
     $AsyncCtx46 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11157
     __ZN18LoRaWANTimeHandler5startER13timer_event_tj($829, $0 + 996 | 0, 1); //@line 11158
     if (___async) {
      HEAP32[$AsyncCtx46 >> 2] = 334; //@line 11161
      HEAP32[$AsyncCtx46 + 4 >> 2] = $6; //@line 11163
      HEAP32[$AsyncCtx46 + 8 >> 2] = $5; //@line 11165
      sp = STACKTOP; //@line 11166
      STACKTOP = sp; //@line 11167
      return;
     }
     _emscripten_free_async_context($AsyncCtx46 | 0); //@line 11169
     STACKTOP = sp; //@line 11170
     return;
    }
    HEAP32[$537 >> 2] = 0; //@line 11172
    HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 8 >> 0] = $$1169; //@line 11175
    HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 11 >> 0] = ($399 & 255) >>> 4 & 1; //@line 11180
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 12 >> 2] = 0; //@line 11183
    HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 16 >> 1] = 0; //@line 11186
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 32 >> 2] = $$3179; //@line 11189
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($12) | 0) + 4 >> 2] = 0; //@line 11192
    HEAP32[$0 + 964 >> 2] = 0; //@line 11194
    $582 = $0 + 4 | 0; //@line 11195
    __ZN14LoRaMacCommand19clear_repeat_bufferEv($582); //@line 11196
    do {
     if ($$1169 << 24 >> 24 == 1) {
      HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) >> 2] = 2; //@line 11201
      $585 = $$1175 + 36 | 0; //@line 11202
      $586 = HEAP32[$585 >> 2] | 0; //@line 11203
      if (($586 | 0) != ($$3179 | 0) | ($586 | 0) == 0) {
       $$1$off0 = 0; //@line 11208
       $$sink = $585; //@line 11208
      } else {
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 >> 2] = 8; //@line 11212
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 32 >> 2] = $$3179; //@line 11215
       _mbed_tracef(16, 13704, 13843, $vararg_buffer12); //@line 11216
       $593 = $0 + 968 | 0; //@line 11217
       HEAP32[$593 >> 2] = HEAP32[$593 >> 2] | 64; //@line 11220
       if (HEAP8[$0 + 373 >> 0] | 0) {
        $600 = HEAP32[$0 + 1328 >> 2] | 0; //@line 11226
        HEAP32[$vararg_buffer12 >> 2] = 304; //@line 11227
        HEAP32[$vararg_buffer12 + 4 >> 2] = 0; //@line 11229
        $AsyncCtx96 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11230
        HEAP32[$$byval_copy198 >> 2] = HEAP32[$vararg_buffer12 >> 2]; //@line 11231
        HEAP32[$$byval_copy198 + 4 >> 2] = HEAP32[$vararg_buffer12 + 4 >> 2]; //@line 11231
        $601 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($600, $0, $$byval_copy198) | 0; //@line 11232
        if (___async) {
         HEAP32[$AsyncCtx96 >> 2] = 321; //@line 11235
         HEAP32[$AsyncCtx96 + 4 >> 2] = $vararg_buffer12; //@line 11237
         HEAP32[$AsyncCtx96 + 8 >> 2] = $0; //@line 11239
         HEAP32[$AsyncCtx96 + 12 >> 2] = $83; //@line 11241
         HEAP32[$AsyncCtx96 + 16 >> 2] = $6; //@line 11243
         HEAP32[$AsyncCtx96 + 20 >> 2] = $5; //@line 11245
         sp = STACKTOP; //@line 11246
         STACKTOP = sp; //@line 11247
         return;
        }
        _emscripten_free_async_context($AsyncCtx96 | 0); //@line 11249
        do {
         if (!$601) {
          $AsyncCtx139 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11253
          _mbed_assert_internal(13588, 13597, 199); //@line 11254
          if (___async) {
           HEAP32[$AsyncCtx139 >> 2] = 322; //@line 11257
           HEAP32[$AsyncCtx139 + 4 >> 2] = $vararg_buffer12; //@line 11259
           HEAP32[$AsyncCtx139 + 8 >> 2] = $0; //@line 11261
           HEAP32[$AsyncCtx139 + 12 >> 2] = $83; //@line 11263
           HEAP32[$AsyncCtx139 + 16 >> 2] = $6; //@line 11265
           HEAP32[$AsyncCtx139 + 20 >> 2] = $5; //@line 11267
           sp = STACKTOP; //@line 11268
           STACKTOP = sp; //@line 11269
           return;
          } else {
           _emscripten_free_async_context($AsyncCtx139 | 0); //@line 11271
           break;
          }
         }
        } while (0);
       }
       $613 = $0 + 944 | 0; //@line 11277
       HEAP8[$613 >> 0] = HEAP8[$613 >> 0] | 34; //@line 11280
       $616 = HEAP32[$83 >> 2] | 0; //@line 11281
       $AsyncCtx52 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11283
       __ZN18LoRaWANTimeHandler5startER13timer_event_tj($616, $0 + 996 | 0, 1); //@line 11284
       if (___async) {
        HEAP32[$AsyncCtx52 >> 2] = 323; //@line 11287
        HEAP32[$AsyncCtx52 + 4 >> 2] = $6; //@line 11289
        HEAP32[$AsyncCtx52 + 8 >> 2] = $5; //@line 11291
        sp = STACKTOP; //@line 11292
        STACKTOP = sp; //@line 11293
        return;
       }
       _emscripten_free_async_context($AsyncCtx52 | 0); //@line 11295
       STACKTOP = sp; //@line 11296
       return;
      }
     } else {
      $621 = $0 + 374 | 0; //@line 11300
      if ($trunc << 24 >> 24 == 5) {
       HEAP8[$621 >> 0] = 1; //@line 11302
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) >> 2] = 1; //@line 11304
       $623 = $0 + 960 | 0; //@line 11305
       $624 = HEAP32[$623 >> 2] | 0; //@line 11306
       $$1$off0 = ($624 | 0) != 0 & ($624 | 0) == ($$3179 | 0); //@line 11310
       $$sink = $623; //@line 11310
       break;
      }
      HEAP8[$621 >> 0] = 0; //@line 11313
      HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) >> 2] = 0; //@line 11315
      $628 = $0 + 960 | 0; //@line 11316
      $629 = HEAP32[$628 >> 2] | 0; //@line 11317
      if (($629 | 0) != ($$3179 | 0) | ($629 | 0) == 0) {
       $$1$off0 = 0; //@line 11322
       $$sink = $628; //@line 11322
      } else {
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 >> 2] = 8; //@line 11326
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 32 >> 2] = $$3179; //@line 11329
       _mbed_tracef(16, 13704, 13843, $vararg_buffer14); //@line 11330
       $636 = $0 + 968 | 0; //@line 11331
       HEAP32[$636 >> 2] = HEAP32[$636 >> 2] | 64; //@line 11334
       if (HEAP8[$0 + 373 >> 0] | 0) {
        $643 = HEAP32[$0 + 1328 >> 2] | 0; //@line 11340
        HEAP32[$vararg_buffer14 >> 2] = 304; //@line 11341
        HEAP32[$vararg_buffer14 + 4 >> 2] = 0; //@line 11343
        $AsyncCtx92 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11344
        HEAP32[$$byval_copy198 >> 2] = HEAP32[$vararg_buffer14 >> 2]; //@line 11345
        HEAP32[$$byval_copy198 + 4 >> 2] = HEAP32[$vararg_buffer14 + 4 >> 2]; //@line 11345
        $644 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($643, $0, $$byval_copy198) | 0; //@line 11346
        if (___async) {
         HEAP32[$AsyncCtx92 >> 2] = 324; //@line 11349
         HEAP32[$AsyncCtx92 + 4 >> 2] = $vararg_buffer14; //@line 11351
         HEAP32[$AsyncCtx92 + 8 >> 2] = $0; //@line 11353
         HEAP32[$AsyncCtx92 + 12 >> 2] = $83; //@line 11355
         HEAP32[$AsyncCtx92 + 16 >> 2] = $6; //@line 11357
         HEAP32[$AsyncCtx92 + 20 >> 2] = $5; //@line 11359
         sp = STACKTOP; //@line 11360
         STACKTOP = sp; //@line 11361
         return;
        }
        _emscripten_free_async_context($AsyncCtx92 | 0); //@line 11363
        do {
         if (!$644) {
          $AsyncCtx135 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11367
          _mbed_assert_internal(13588, 13597, 199); //@line 11368
          if (___async) {
           HEAP32[$AsyncCtx135 >> 2] = 325; //@line 11371
           HEAP32[$AsyncCtx135 + 4 >> 2] = $vararg_buffer14; //@line 11373
           HEAP32[$AsyncCtx135 + 8 >> 2] = $0; //@line 11375
           HEAP32[$AsyncCtx135 + 12 >> 2] = $83; //@line 11377
           HEAP32[$AsyncCtx135 + 16 >> 2] = $6; //@line 11379
           HEAP32[$AsyncCtx135 + 20 >> 2] = $5; //@line 11381
           sp = STACKTOP; //@line 11382
           STACKTOP = sp; //@line 11383
           return;
          } else {
           _emscripten_free_async_context($AsyncCtx135 | 0); //@line 11385
           break;
          }
         }
        } while (0);
       }
       $656 = $0 + 944 | 0; //@line 11391
       HEAP8[$656 >> 0] = HEAP8[$656 >> 0] | 34; //@line 11394
       $659 = HEAP32[$83 >> 2] | 0; //@line 11395
       $AsyncCtx49 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11397
       __ZN18LoRaWANTimeHandler5startER13timer_event_tj($659, $0 + 996 | 0, 1); //@line 11398
       if (___async) {
        HEAP32[$AsyncCtx49 >> 2] = 326; //@line 11401
        HEAP32[$AsyncCtx49 + 4 >> 2] = $6; //@line 11403
        HEAP32[$AsyncCtx49 + 8 >> 2] = $5; //@line 11405
        sp = STACKTOP; //@line 11406
        STACKTOP = sp; //@line 11407
        return;
       }
       _emscripten_free_async_context($AsyncCtx49 | 0); //@line 11409
       STACKTOP = sp; //@line 11410
       return;
      }
     }
    } while (0);
    HEAP32[$$sink >> 2] = $$3179; //@line 11414
    if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($12) | 0) >> 2] | 0) == 1) {
     if ($399 & 32) {
      __ZN14LoRaMacCommand20clear_command_bufferEv($582); //@line 11422
     }
    } else {
     __ZN14LoRaMacCommand20clear_command_bufferEv($582); //@line 11425
    }
    do {
     if (($412 | 0) > ($410 | 0)) {
      $669 = $409 + 9 | 0; //@line 11430
      $671 = HEAP8[$1 + $410 >> 0] | 0; //@line 11432
      $672 = $412 - $669 | 0; //@line 11433
      $673 = $672 & 255; //@line 11434
      HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 9 >> 0] = $671; //@line 11437
      $677 = $408 << 24 >> 24 == 0; //@line 11439
      if (!($671 << 24 >> 24)) {
       if (!$677) {
        $$3$off0230 = 6; //@line 11442
        break;
       }
       $681 = $0 + 638 | 0; //@line 11448
       if (__Z15decrypt_payloadPKhtS0_jhjPh($1 + $669 | 0, $672 & 255, $$1173, $354, 1, $$3179, $681) | 0) {
        HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 >> 2] = 13; //@line 11454
       }
       $686 = $0 + 264 | 0; //@line 11456
       $687 = __ZN11LoRaMacMlme16get_confirmationEv($686) | 0; //@line 11457
       $689 = HEAP32[$0 >> 2] | 0; //@line 11459
       $AsyncCtx80 = _emscripten_alloc_async_context(44, sp) | 0; //@line 11460
       $690 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($582, $681, 0, $673, $4, $687, $0 + 1096 | 0, $689) | 0; //@line 11461
       if (___async) {
        HEAP32[$AsyncCtx80 >> 2] = 327; //@line 11464
        HEAP8[$AsyncCtx80 + 4 >> 0] = $$1$off0 & 1; //@line 11467
        HEAP8[$AsyncCtx80 + 5 >> 0] = $399; //@line 11469
        HEAP32[$AsyncCtx80 + 8 >> 2] = $12; //@line 11471
        HEAP32[$AsyncCtx80 + 12 >> 2] = $83; //@line 11473
        HEAP32[$AsyncCtx80 + 16 >> 2] = $0; //@line 11475
        HEAP32[$AsyncCtx80 + 20 >> 2] = $6; //@line 11477
        HEAP32[$AsyncCtx80 + 24 >> 2] = $5; //@line 11479
        HEAP32[$AsyncCtx80 + 28 >> 2] = $vararg_buffer16; //@line 11481
        HEAP32[$AsyncCtx80 + 32 >> 2] = $vararg_buffer16; //@line 11483
        HEAP32[$AsyncCtx80 + 36 >> 2] = $686; //@line 11485
        HEAP32[$AsyncCtx80 + 40 >> 2] = $582; //@line 11487
        sp = STACKTOP; //@line 11488
        STACKTOP = sp; //@line 11489
        return;
       }
       _emscripten_free_async_context($AsyncCtx80 | 0); //@line 11491
       if ($690 | 0) {
        HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 >> 2] = 1; //@line 11496
        if ($$1$off0) {
         $$3$off0230 = 6; //@line 11498
         break;
        } else {
         label = 141; //@line 11501
         break;
        }
       }
       if (!(__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($582) | 0)) {
        label = 140; //@line 11507
        break;
       }
       _mbed_tracef(16, 13704, 13865, $vararg_buffer16); //@line 11510
       HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($686) | 0) >> 2] = 4; //@line 11512
       $707 = $0 + 944 | 0; //@line 11513
       HEAP8[$707 >> 0] = HEAP8[$707 >> 0] | 16; //@line 11516
       __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($582); //@line 11517
       if ($$1$off0) {
        $$3$off0230 = 6; //@line 11519
        break;
       } else {
        label = 141; //@line 11522
        break;
       }
      }
      do {
       if (!$677) {
        $710 = $0 + 264 | 0; //@line 11528
        $711 = __ZN11LoRaMacMlme16get_confirmationEv($710) | 0; //@line 11529
        $713 = HEAP32[$0 >> 2] | 0; //@line 11531
        $AsyncCtx76 = _emscripten_alloc_async_context(72, sp) | 0; //@line 11532
        $714 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($582, $1, 8, $411, $4, $711, $0 + 1096 | 0, $713) | 0; //@line 11533
        if (___async) {
         HEAP32[$AsyncCtx76 >> 2] = 328; //@line 11536
         HEAP8[$AsyncCtx76 + 4 >> 0] = $399; //@line 11538
         HEAP32[$AsyncCtx76 + 8 >> 2] = $12; //@line 11540
         HEAP32[$AsyncCtx76 + 12 >> 2] = $83; //@line 11542
         HEAP32[$AsyncCtx76 + 16 >> 2] = $0; //@line 11544
         HEAP8[$AsyncCtx76 + 20 >> 0] = $$1$off0 & 1; //@line 11547
         HEAP32[$AsyncCtx76 + 24 >> 2] = $6; //@line 11549
         HEAP32[$AsyncCtx76 + 28 >> 2] = $5; //@line 11551
         HEAP32[$AsyncCtx76 + 32 >> 2] = $1; //@line 11553
         HEAP32[$AsyncCtx76 + 36 >> 2] = $669; //@line 11555
         HEAP32[$AsyncCtx76 + 40 >> 2] = $672; //@line 11557
         HEAP32[$AsyncCtx76 + 44 >> 2] = $$1171; //@line 11559
         HEAP32[$AsyncCtx76 + 48 >> 2] = $354; //@line 11561
         HEAP32[$AsyncCtx76 + 52 >> 2] = $$3179; //@line 11563
         HEAP32[$AsyncCtx76 + 56 >> 2] = $vararg_buffer18; //@line 11565
         HEAP32[$AsyncCtx76 + 60 >> 2] = $vararg_buffer18; //@line 11567
         HEAP32[$AsyncCtx76 + 64 >> 2] = $710; //@line 11569
         HEAP32[$AsyncCtx76 + 68 >> 2] = $582; //@line 11571
         sp = STACKTOP; //@line 11572
         STACKTOP = sp; //@line 11573
         return;
        }
        _emscripten_free_async_context($AsyncCtx76 | 0); //@line 11575
        if ($714 | 0) {
         HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 >> 2] = 1; //@line 11580
         break;
        }
        if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($582) | 0) {
         _mbed_tracef(16, 13704, 13865, $vararg_buffer18); //@line 11585
         HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($710) | 0) >> 2] = 4; //@line 11587
         $737 = $0 + 944 | 0; //@line 11588
         HEAP8[$737 >> 0] = HEAP8[$737 >> 0] | 16; //@line 11591
         __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($582); //@line 11592
        }
       }
      } while (0);
      $742 = $672 & 255; //@line 11598
      $743 = $0 + 638 | 0; //@line 11599
      if (__Z15decrypt_payloadPKhtS0_jhjPh($1 + $669 | 0, $742, $$1171, $354, 1, $$3179, $743) | 0) {
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 >> 2] = 13; //@line 11605
      }
      if ($$1$off0) {
       $$3$off0230 = 6; //@line 11608
      } else {
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 12 >> 2] = $743; //@line 11612
       HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 16 >> 1] = $742; //@line 11615
       HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 18 >> 0] = 1; //@line 11618
       label = 141; //@line 11619
      }
     } else {
      if (!($408 << 24 >> 24)) {
       label = 140; //@line 11624
      } else {
       $755 = $0 + 264 | 0; //@line 11626
       $756 = __ZN11LoRaMacMlme16get_confirmationEv($755) | 0; //@line 11627
       $758 = HEAP32[$0 >> 2] | 0; //@line 11629
       $AsyncCtx72 = _emscripten_alloc_async_context(44, sp) | 0; //@line 11630
       $759 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($582, $1, 8, $411, $4, $756, $0 + 1096 | 0, $758) | 0; //@line 11631
       if (___async) {
        HEAP32[$AsyncCtx72 >> 2] = 329; //@line 11634
        HEAP8[$AsyncCtx72 + 4 >> 0] = $$1$off0 & 1; //@line 11637
        HEAP8[$AsyncCtx72 + 5 >> 0] = $399; //@line 11639
        HEAP32[$AsyncCtx72 + 8 >> 2] = $12; //@line 11641
        HEAP32[$AsyncCtx72 + 12 >> 2] = $83; //@line 11643
        HEAP32[$AsyncCtx72 + 16 >> 2] = $0; //@line 11645
        HEAP32[$AsyncCtx72 + 20 >> 2] = $582; //@line 11647
        HEAP32[$AsyncCtx72 + 24 >> 2] = $vararg_buffer20; //@line 11649
        HEAP32[$AsyncCtx72 + 28 >> 2] = $vararg_buffer20; //@line 11651
        HEAP32[$AsyncCtx72 + 32 >> 2] = $755; //@line 11653
        HEAP32[$AsyncCtx72 + 36 >> 2] = $6; //@line 11655
        HEAP32[$AsyncCtx72 + 40 >> 2] = $5; //@line 11657
        sp = STACKTOP; //@line 11658
        STACKTOP = sp; //@line 11659
        return;
       }
       _emscripten_free_async_context($AsyncCtx72 | 0); //@line 11661
       if ($759 | 0) {
        HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 >> 2] = 1; //@line 11666
        if ($$1$off0) {
         $$3$off0230 = 6; //@line 11668
         break;
        } else {
         label = 141; //@line 11671
         break;
        }
       }
       if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($582) | 0) {
        _mbed_tracef(16, 13704, 13865, $vararg_buffer20); //@line 11677
        HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($755) | 0) >> 2] = 4; //@line 11679
        $776 = $0 + 944 | 0; //@line 11680
        HEAP8[$776 >> 0] = HEAP8[$776 >> 0] | 16; //@line 11683
        __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($582); //@line 11684
        if ($$1$off0) {
         $$3$off0230 = 6; //@line 11686
        } else {
         label = 141; //@line 11688
        }
       } else {
        label = 140; //@line 11691
       }
      }
     }
    } while (0);
    if ((label | 0) == 140) {
     if ($$1$off0) {
      $$3$off0230 = 6; //@line 11698
     } else {
      label = 141; //@line 11700
     }
    }
    do {
     if ((label | 0) == 141) {
      $782 = (__ZN11LoRaMacMcps16get_confirmationEv($12) | 0) + 10 | 0; //@line 11708
      if ($399 & 32) {
       HEAP8[$782 >> 0] = 1; //@line 11710
       HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 28 >> 0] = 1; //@line 11713
       $785 = HEAP32[$83 >> 2] | 0; //@line 11714
       $AsyncCtx120 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11716
       __ZN18LoRaWANTimeHandler4stopER13timer_event_t($785, $0 + 1076 | 0); //@line 11717
       if (___async) {
        HEAP32[$AsyncCtx120 >> 2] = 330; //@line 11720
        HEAP32[$AsyncCtx120 + 4 >> 2] = $0; //@line 11722
        HEAP32[$AsyncCtx120 + 8 >> 2] = $83; //@line 11724
        HEAP32[$AsyncCtx120 + 12 >> 2] = $6; //@line 11726
        HEAP32[$AsyncCtx120 + 16 >> 2] = $5; //@line 11728
        sp = STACKTOP; //@line 11729
        STACKTOP = sp; //@line 11730
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx120 | 0); //@line 11732
        $$3$off0230 = 2; //@line 11733
        break;
       }
      }
      HEAP8[$782 >> 0] = 0; //@line 11737
      if ((HEAPU8[$0 + 895 >> 0] | 0) > (HEAPU8[$0 + 894 >> 0] | 0)) {
       $796 = HEAP32[$83 >> 2] | 0; //@line 11744
       $AsyncCtx116 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11746
       __ZN18LoRaWANTimeHandler4stopER13timer_event_t($796, $0 + 1076 | 0); //@line 11747
       if (___async) {
        HEAP32[$AsyncCtx116 >> 2] = 331; //@line 11750
        HEAP32[$AsyncCtx116 + 4 >> 2] = $0; //@line 11752
        HEAP32[$AsyncCtx116 + 8 >> 2] = $83; //@line 11754
        HEAP32[$AsyncCtx116 + 12 >> 2] = $6; //@line 11756
        HEAP32[$AsyncCtx116 + 16 >> 2] = $5; //@line 11758
        sp = STACKTOP; //@line 11759
        STACKTOP = sp; //@line 11760
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx116 | 0); //@line 11762
        $$3$off0230 = 2; //@line 11763
        break;
       }
      } else {
       $$3$off0230 = 2; //@line 11767
      }
     }
    } while (0);
    $802 = $0 + 944 | 0; //@line 11771
    HEAP8[$802 >> 0] = $$3$off0230 | HEAP8[$802 >> 0] & -7; //@line 11775
    break;
   }
  case 7:
   {
    $833 = $0 + 638 | 0; //@line 11779
    _memcpy($833 | 0, $1 + 1 | 0, $7 | 0) | 0; //@line 11781
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) >> 2] = 3; //@line 11783
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 >> 2] = 0; //@line 11786
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 12 >> 2] = $833; //@line 11789
    HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 16 >> 1] = $7 + 65535; //@line 11794
    $844 = $0 + 944 | 0; //@line 11795
    HEAP8[$844 >> 0] = HEAP8[$844 >> 0] | 2; //@line 11798
    break;
   }
  default:
   {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 4 >> 2] = 1; //@line 11804
    _mbed_tracef(16, 13704, 13843, $vararg_buffer24); //@line 11805
    $849 = $0 + 968 | 0; //@line 11806
    HEAP32[$849 >> 2] = HEAP32[$849 >> 2] | 64; //@line 11809
    if (HEAP8[$0 + 373 >> 0] | 0) {
     $856 = HEAP32[$0 + 1328 >> 2] | 0; //@line 11815
     HEAP32[$vararg_buffer24 >> 2] = 304; //@line 11816
     HEAP32[$vararg_buffer24 + 4 >> 2] = 0; //@line 11818
     $AsyncCtx84 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11819
     HEAP32[$$byval_copy198 >> 2] = HEAP32[$vararg_buffer24 >> 2]; //@line 11820
     HEAP32[$$byval_copy198 + 4 >> 2] = HEAP32[$vararg_buffer24 + 4 >> 2]; //@line 11820
     $857 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($856, $0, $$byval_copy198) | 0; //@line 11821
     if (___async) {
      HEAP32[$AsyncCtx84 >> 2] = 335; //@line 11824
      HEAP32[$AsyncCtx84 + 4 >> 2] = $vararg_buffer24; //@line 11826
      HEAP32[$AsyncCtx84 + 8 >> 2] = $0; //@line 11828
      HEAP32[$AsyncCtx84 + 12 >> 2] = $83; //@line 11830
      HEAP32[$AsyncCtx84 + 16 >> 2] = $6; //@line 11832
      HEAP32[$AsyncCtx84 + 20 >> 2] = $5; //@line 11834
      sp = STACKTOP; //@line 11835
      STACKTOP = sp; //@line 11836
      return;
     }
     _emscripten_free_async_context($AsyncCtx84 | 0); //@line 11838
     do {
      if (!$857) {
       $AsyncCtx127 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11842
       _mbed_assert_internal(13588, 13597, 199); //@line 11843
       if (___async) {
        HEAP32[$AsyncCtx127 >> 2] = 336; //@line 11846
        HEAP32[$AsyncCtx127 + 4 >> 2] = $vararg_buffer24; //@line 11848
        HEAP32[$AsyncCtx127 + 8 >> 2] = $0; //@line 11850
        HEAP32[$AsyncCtx127 + 12 >> 2] = $83; //@line 11852
        HEAP32[$AsyncCtx127 + 16 >> 2] = $6; //@line 11854
        HEAP32[$AsyncCtx127 + 20 >> 2] = $5; //@line 11856
        sp = STACKTOP; //@line 11857
        STACKTOP = sp; //@line 11858
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx127 | 0); //@line 11860
        break;
       }
      }
     } while (0);
    }
    $869 = $0 + 944 | 0; //@line 11866
    HEAP8[$869 >> 0] = HEAP8[$869 >> 0] | 34; //@line 11869
    $872 = HEAP32[$83 >> 2] | 0; //@line 11870
    $AsyncCtx43 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11872
    __ZN18LoRaWANTimeHandler5startER13timer_event_tj($872, $0 + 996 | 0, 1); //@line 11873
    if (___async) {
     HEAP32[$AsyncCtx43 >> 2] = 337; //@line 11876
     HEAP32[$AsyncCtx43 + 4 >> 2] = $0; //@line 11878
     HEAP32[$AsyncCtx43 + 8 >> 2] = $83; //@line 11880
     HEAP32[$AsyncCtx43 + 12 >> 2] = $6; //@line 11882
     HEAP32[$AsyncCtx43 + 16 >> 2] = $5; //@line 11884
     sp = STACKTOP; //@line 11885
     STACKTOP = sp; //@line 11886
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx43 | 0); //@line 11888
     break L7;
    }
   }
  }
 } while (0);
 $878 = $0 + 944 | 0; //@line 11894
 HEAP8[$878 >> 0] = HEAP8[$878 >> 0] | 32; //@line 11897
 $881 = HEAP32[$83 >> 2] | 0; //@line 11898
 $AsyncCtx40 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11900
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($881, $0 + 996 | 0, 1); //@line 11901
 if (___async) {
  HEAP32[$AsyncCtx40 >> 2] = 338; //@line 11904
  HEAP32[$AsyncCtx40 + 4 >> 2] = $6; //@line 11906
  HEAP32[$AsyncCtx40 + 8 >> 2] = $5; //@line 11908
  sp = STACKTOP; //@line 11909
  STACKTOP = sp; //@line 11910
  return;
 }
 _emscripten_free_async_context($AsyncCtx40 | 0); //@line 11912
 STACKTOP = sp; //@line 11913
 return;
}
function _malloc($0) {
 $0 = $0 | 0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01926$i = 0, $$0193$lcssa$i = 0, $$01935$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024367$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0, $$124466$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i203 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$414$i = 0, $$4236$i = 0, $$4351$lcssa$i = 0, $$435113$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435712$i = 0, $$723947$i = 0, $$748$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i19$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0, $1 = 0, $1004 = 0, $101 = 0, $1010 = 0, $1013 = 0, $1014 = 0, $102 = 0, $1032 = 0, $1034 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1052 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $108 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $134 = 0, $138 = 0, $14 = 0, $143 = 0, $146 = 0, $149 = 0, $150 = 0, $157 = 0, $159 = 0, $16 = 0, $162 = 0, $164 = 0, $167 = 0, $169 = 0, $17 = 0, $172 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $19 = 0, $190 = 0, $191 = 0, $20 = 0, $204 = 0, $208 = 0, $214 = 0, $221 = 0, $225 = 0, $234 = 0, $235 = 0, $237 = 0, $238 = 0, $242 = 0, $243 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $261 = 0, $262 = 0, $265 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $282 = 0, $292 = 0, $296 = 0, $30 = 0, $302 = 0, $306 = 0, $309 = 0, $313 = 0, $315 = 0, $316 = 0, $318 = 0, $320 = 0, $322 = 0, $324 = 0, $326 = 0, $328 = 0, $330 = 0, $34 = 0, $340 = 0, $341 = 0, $352 = 0, $354 = 0, $357 = 0, $359 = 0, $362 = 0, $364 = 0, $367 = 0, $37 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $376 = 0, $377 = 0, $379 = 0, $380 = 0, $385 = 0, $386 = 0, $391 = 0, $399 = 0, $403 = 0, $409 = 0, $41 = 0, $416 = 0, $420 = 0, $428 = 0, $431 = 0, $432 = 0, $433 = 0, $437 = 0, $438 = 0, $44 = 0, $444 = 0, $449 = 0, $450 = 0, $453 = 0, $455 = 0, $458 = 0, $463 = 0, $469 = 0, $47 = 0, $471 = 0, $473 = 0, $475 = 0, $49 = 0, $492 = 0, $494 = 0, $50 = 0, $501 = 0, $502 = 0, $503 = 0, $512 = 0, $514 = 0, $515 = 0, $517 = 0, $52 = 0, $526 = 0, $530 = 0, $532 = 0, $533 = 0, $534 = 0, $54 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $552 = 0, $554 = 0, $555 = 0, $56 = 0, $561 = 0, $563 = 0, $565 = 0, $570 = 0, $572 = 0, $574 = 0, $575 = 0, $576 = 0, $58 = 0, $584 = 0, $585 = 0, $588 = 0, $592 = 0, $595 = 0, $597 = 0, $6 = 0, $60 = 0, $603 = 0, $607 = 0, $611 = 0, $62 = 0, $620 = 0, $621 = 0, $627 = 0, $629 = 0, $633 = 0, $636 = 0, $638 = 0, $64 = 0, $642 = 0, $644 = 0, $649 = 0, $650 = 0, $651 = 0, $657 = 0, $658 = 0, $659 = 0, $663 = 0, $67 = 0, $673 = 0, $675 = 0, $680 = 0, $681 = 0, $682 = 0, $688 = 0, $69 = 0, $690 = 0, $694 = 0, $7 = 0, $70 = 0, $700 = 0, $704 = 0, $71 = 0, $710 = 0, $712 = 0, $718 = 0, $72 = 0, $722 = 0, $723 = 0, $728 = 0, $73 = 0, $734 = 0, $739 = 0, $742 = 0, $743 = 0, $746 = 0, $748 = 0, $750 = 0, $753 = 0, $764 = 0, $769 = 0, $77 = 0, $771 = 0, $774 = 0, $776 = 0, $779 = 0, $782 = 0, $783 = 0, $784 = 0, $786 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $797 = 0, $798 = 0, $8 = 0, $80 = 0, $812 = 0, $815 = 0, $816 = 0, $822 = 0, $83 = 0, $830 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $845 = 0, $846 = 0, $852 = 0, $857 = 0, $858 = 0, $861 = 0, $863 = 0, $866 = 0, $87 = 0, $871 = 0, $877 = 0, $879 = 0, $881 = 0, $882 = 0, $9 = 0, $900 = 0, $902 = 0, $909 = 0, $910 = 0, $911 = 0, $919 = 0, $92 = 0, $923 = 0, $927 = 0, $929 = 0, $93 = 0, $935 = 0, $936 = 0, $938 = 0, $939 = 0, $940 = 0, $941 = 0, $943 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $956 = 0, $958 = 0, $96 = 0, $964 = 0, $969 = 0, $972 = 0, $973 = 0, $974 = 0, $978 = 0, $979 = 0, $98 = 0, $985 = 0, $990 = 0, $991 = 0, $994 = 0, $996 = 0, $999 = 0, label = 0, sp = 0, $958$looptemp = 0;
 sp = STACKTOP; //@line 7557
 STACKTOP = STACKTOP + 16 | 0; //@line 7558
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7558
 $1 = sp; //@line 7559
 do {
  if ($0 >>> 0 < 245) {
   $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8; //@line 7566
   $7 = $6 >>> 3; //@line 7567
   $8 = HEAP32[5789] | 0; //@line 7568
   $9 = $8 >>> $7; //@line 7569
   if ($9 & 3 | 0) {
    $14 = ($9 & 1 ^ 1) + $7 | 0; //@line 7575
    $16 = 23196 + ($14 << 1 << 2) | 0; //@line 7577
    $17 = $16 + 8 | 0; //@line 7578
    $18 = HEAP32[$17 >> 2] | 0; //@line 7579
    $19 = $18 + 8 | 0; //@line 7580
    $20 = HEAP32[$19 >> 2] | 0; //@line 7581
    do {
     if (($20 | 0) == ($16 | 0)) {
      HEAP32[5789] = $8 & ~(1 << $14); //@line 7588
     } else {
      if ((HEAP32[5793] | 0) >>> 0 > $20 >>> 0) {
       _abort(); //@line 7593
      }
      $27 = $20 + 12 | 0; //@line 7596
      if ((HEAP32[$27 >> 2] | 0) == ($18 | 0)) {
       HEAP32[$27 >> 2] = $16; //@line 7600
       HEAP32[$17 >> 2] = $20; //@line 7601
       break;
      } else {
       _abort(); //@line 7604
      }
     }
    } while (0);
    $30 = $14 << 3; //@line 7609
    HEAP32[$18 + 4 >> 2] = $30 | 3; //@line 7612
    $34 = $18 + $30 + 4 | 0; //@line 7614
    HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1; //@line 7617
    $$0 = $19; //@line 7618
    STACKTOP = sp; //@line 7619
    return $$0 | 0; //@line 7619
   }
   $37 = HEAP32[5791] | 0; //@line 7621
   if ($6 >>> 0 > $37 >>> 0) {
    if ($9 | 0) {
     $41 = 2 << $7; //@line 7627
     $44 = $9 << $7 & ($41 | 0 - $41); //@line 7630
     $47 = ($44 & 0 - $44) + -1 | 0; //@line 7633
     $49 = $47 >>> 12 & 16; //@line 7635
     $50 = $47 >>> $49; //@line 7636
     $52 = $50 >>> 5 & 8; //@line 7638
     $54 = $50 >>> $52; //@line 7640
     $56 = $54 >>> 2 & 4; //@line 7642
     $58 = $54 >>> $56; //@line 7644
     $60 = $58 >>> 1 & 2; //@line 7646
     $62 = $58 >>> $60; //@line 7648
     $64 = $62 >>> 1 & 1; //@line 7650
     $67 = ($52 | $49 | $56 | $60 | $64) + ($62 >>> $64) | 0; //@line 7653
     $69 = 23196 + ($67 << 1 << 2) | 0; //@line 7655
     $70 = $69 + 8 | 0; //@line 7656
     $71 = HEAP32[$70 >> 2] | 0; //@line 7657
     $72 = $71 + 8 | 0; //@line 7658
     $73 = HEAP32[$72 >> 2] | 0; //@line 7659
     do {
      if (($73 | 0) == ($69 | 0)) {
       $77 = $8 & ~(1 << $67); //@line 7665
       HEAP32[5789] = $77; //@line 7666
       $98 = $77; //@line 7667
      } else {
       if ((HEAP32[5793] | 0) >>> 0 > $73 >>> 0) {
        _abort(); //@line 7672
       }
       $80 = $73 + 12 | 0; //@line 7675
       if ((HEAP32[$80 >> 2] | 0) == ($71 | 0)) {
        HEAP32[$80 >> 2] = $69; //@line 7679
        HEAP32[$70 >> 2] = $73; //@line 7680
        $98 = $8; //@line 7681
        break;
       } else {
        _abort(); //@line 7684
       }
      }
     } while (0);
     $83 = $67 << 3; //@line 7689
     $84 = $83 - $6 | 0; //@line 7690
     HEAP32[$71 + 4 >> 2] = $6 | 3; //@line 7693
     $87 = $71 + $6 | 0; //@line 7694
     HEAP32[$87 + 4 >> 2] = $84 | 1; //@line 7697
     HEAP32[$71 + $83 >> 2] = $84; //@line 7699
     if ($37 | 0) {
      $92 = HEAP32[5794] | 0; //@line 7702
      $93 = $37 >>> 3; //@line 7703
      $95 = 23196 + ($93 << 1 << 2) | 0; //@line 7705
      $96 = 1 << $93; //@line 7706
      if (!($98 & $96)) {
       HEAP32[5789] = $98 | $96; //@line 7711
       $$0199 = $95; //@line 7713
       $$pre$phiZ2D = $95 + 8 | 0; //@line 7713
      } else {
       $101 = $95 + 8 | 0; //@line 7715
       $102 = HEAP32[$101 >> 2] | 0; //@line 7716
       if ((HEAP32[5793] | 0) >>> 0 > $102 >>> 0) {
        _abort(); //@line 7720
       } else {
        $$0199 = $102; //@line 7723
        $$pre$phiZ2D = $101; //@line 7723
       }
      }
      HEAP32[$$pre$phiZ2D >> 2] = $92; //@line 7726
      HEAP32[$$0199 + 12 >> 2] = $92; //@line 7728
      HEAP32[$92 + 8 >> 2] = $$0199; //@line 7730
      HEAP32[$92 + 12 >> 2] = $95; //@line 7732
     }
     HEAP32[5791] = $84; //@line 7734
     HEAP32[5794] = $87; //@line 7735
     $$0 = $72; //@line 7736
     STACKTOP = sp; //@line 7737
     return $$0 | 0; //@line 7737
    }
    $108 = HEAP32[5790] | 0; //@line 7739
    if (!$108) {
     $$0197 = $6; //@line 7742
    } else {
     $112 = ($108 & 0 - $108) + -1 | 0; //@line 7746
     $114 = $112 >>> 12 & 16; //@line 7748
     $115 = $112 >>> $114; //@line 7749
     $117 = $115 >>> 5 & 8; //@line 7751
     $119 = $115 >>> $117; //@line 7753
     $121 = $119 >>> 2 & 4; //@line 7755
     $123 = $119 >>> $121; //@line 7757
     $125 = $123 >>> 1 & 2; //@line 7759
     $127 = $123 >>> $125; //@line 7761
     $129 = $127 >>> 1 & 1; //@line 7763
     $134 = HEAP32[23460 + (($117 | $114 | $121 | $125 | $129) + ($127 >>> $129) << 2) >> 2] | 0; //@line 7768
     $138 = (HEAP32[$134 + 4 >> 2] & -8) - $6 | 0; //@line 7772
     $143 = HEAP32[$134 + 16 + (((HEAP32[$134 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 7778
     if (!$143) {
      $$0192$lcssa$i = $134; //@line 7781
      $$0193$lcssa$i = $138; //@line 7781
     } else {
      $$01926$i = $134; //@line 7783
      $$01935$i = $138; //@line 7783
      $146 = $143; //@line 7783
      while (1) {
       $149 = (HEAP32[$146 + 4 >> 2] & -8) - $6 | 0; //@line 7788
       $150 = $149 >>> 0 < $$01935$i >>> 0; //@line 7789
       $$$0193$i = $150 ? $149 : $$01935$i; //@line 7790
       $$$0192$i = $150 ? $146 : $$01926$i; //@line 7791
       $146 = HEAP32[$146 + 16 + (((HEAP32[$146 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 7797
       if (!$146) {
        $$0192$lcssa$i = $$$0192$i; //@line 7800
        $$0193$lcssa$i = $$$0193$i; //@line 7800
        break;
       } else {
        $$01926$i = $$$0192$i; //@line 7803
        $$01935$i = $$$0193$i; //@line 7803
       }
      }
     }
     $157 = HEAP32[5793] | 0; //@line 7807
     if ($157 >>> 0 > $$0192$lcssa$i >>> 0) {
      _abort(); //@line 7810
     }
     $159 = $$0192$lcssa$i + $6 | 0; //@line 7813
     if ($159 >>> 0 <= $$0192$lcssa$i >>> 0) {
      _abort(); //@line 7816
     }
     $162 = HEAP32[$$0192$lcssa$i + 24 >> 2] | 0; //@line 7820
     $164 = HEAP32[$$0192$lcssa$i + 12 >> 2] | 0; //@line 7822
     do {
      if (($164 | 0) == ($$0192$lcssa$i | 0)) {
       $175 = $$0192$lcssa$i + 20 | 0; //@line 7826
       $176 = HEAP32[$175 >> 2] | 0; //@line 7827
       if (!$176) {
        $178 = $$0192$lcssa$i + 16 | 0; //@line 7830
        $179 = HEAP32[$178 >> 2] | 0; //@line 7831
        if (!$179) {
         $$3$i = 0; //@line 7834
         break;
        } else {
         $$1196$i = $179; //@line 7837
         $$1198$i = $178; //@line 7837
        }
       } else {
        $$1196$i = $176; //@line 7840
        $$1198$i = $175; //@line 7840
       }
       while (1) {
        $181 = $$1196$i + 20 | 0; //@line 7843
        $182 = HEAP32[$181 >> 2] | 0; //@line 7844
        if ($182 | 0) {
         $$1196$i = $182; //@line 7847
         $$1198$i = $181; //@line 7847
         continue;
        }
        $184 = $$1196$i + 16 | 0; //@line 7850
        $185 = HEAP32[$184 >> 2] | 0; //@line 7851
        if (!$185) {
         break;
        } else {
         $$1196$i = $185; //@line 7856
         $$1198$i = $184; //@line 7856
        }
       }
       if ($157 >>> 0 > $$1198$i >>> 0) {
        _abort(); //@line 7861
       } else {
        HEAP32[$$1198$i >> 2] = 0; //@line 7864
        $$3$i = $$1196$i; //@line 7865
        break;
       }
      } else {
       $167 = HEAP32[$$0192$lcssa$i + 8 >> 2] | 0; //@line 7870
       if ($157 >>> 0 > $167 >>> 0) {
        _abort(); //@line 7873
       }
       $169 = $167 + 12 | 0; //@line 7876
       if ((HEAP32[$169 >> 2] | 0) != ($$0192$lcssa$i | 0)) {
        _abort(); //@line 7880
       }
       $172 = $164 + 8 | 0; //@line 7883
       if ((HEAP32[$172 >> 2] | 0) == ($$0192$lcssa$i | 0)) {
        HEAP32[$169 >> 2] = $164; //@line 7887
        HEAP32[$172 >> 2] = $167; //@line 7888
        $$3$i = $164; //@line 7889
        break;
       } else {
        _abort(); //@line 7892
       }
      }
     } while (0);
     L73 : do {
      if ($162 | 0) {
       $190 = HEAP32[$$0192$lcssa$i + 28 >> 2] | 0; //@line 7901
       $191 = 23460 + ($190 << 2) | 0; //@line 7902
       do {
        if (($$0192$lcssa$i | 0) == (HEAP32[$191 >> 2] | 0)) {
         HEAP32[$191 >> 2] = $$3$i; //@line 7907
         if (!$$3$i) {
          HEAP32[5790] = $108 & ~(1 << $190); //@line 7913
          break L73;
         }
        } else {
         if ((HEAP32[5793] | 0) >>> 0 > $162 >>> 0) {
          _abort(); //@line 7920
         } else {
          HEAP32[$162 + 16 + (((HEAP32[$162 + 16 >> 2] | 0) != ($$0192$lcssa$i | 0) & 1) << 2) >> 2] = $$3$i; //@line 7928
          if (!$$3$i) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while (0);
       $204 = HEAP32[5793] | 0; //@line 7938
       if ($204 >>> 0 > $$3$i >>> 0) {
        _abort(); //@line 7941
       }
       HEAP32[$$3$i + 24 >> 2] = $162; //@line 7945
       $208 = HEAP32[$$0192$lcssa$i + 16 >> 2] | 0; //@line 7947
       do {
        if ($208 | 0) {
         if ($204 >>> 0 > $208 >>> 0) {
          _abort(); //@line 7953
         } else {
          HEAP32[$$3$i + 16 >> 2] = $208; //@line 7957
          HEAP32[$208 + 24 >> 2] = $$3$i; //@line 7959
          break;
         }
        }
       } while (0);
       $214 = HEAP32[$$0192$lcssa$i + 20 >> 2] | 0; //@line 7965
       if ($214 | 0) {
        if ((HEAP32[5793] | 0) >>> 0 > $214 >>> 0) {
         _abort(); //@line 7971
        } else {
         HEAP32[$$3$i + 20 >> 2] = $214; //@line 7975
         HEAP32[$214 + 24 >> 2] = $$3$i; //@line 7977
         break;
        }
       }
      }
     } while (0);
     if ($$0193$lcssa$i >>> 0 < 16) {
      $221 = $$0193$lcssa$i + $6 | 0; //@line 7985
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $221 | 3; //@line 7988
      $225 = $$0192$lcssa$i + $221 + 4 | 0; //@line 7990
      HEAP32[$225 >> 2] = HEAP32[$225 >> 2] | 1; //@line 7993
     } else {
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $6 | 3; //@line 7997
      HEAP32[$159 + 4 >> 2] = $$0193$lcssa$i | 1; //@line 8000
      HEAP32[$159 + $$0193$lcssa$i >> 2] = $$0193$lcssa$i; //@line 8002
      if ($37 | 0) {
       $234 = HEAP32[5794] | 0; //@line 8005
       $235 = $37 >>> 3; //@line 8006
       $237 = 23196 + ($235 << 1 << 2) | 0; //@line 8008
       $238 = 1 << $235; //@line 8009
       if (!($8 & $238)) {
        HEAP32[5789] = $8 | $238; //@line 8014
        $$0189$i = $237; //@line 8016
        $$pre$phi$iZ2D = $237 + 8 | 0; //@line 8016
       } else {
        $242 = $237 + 8 | 0; //@line 8018
        $243 = HEAP32[$242 >> 2] | 0; //@line 8019
        if ((HEAP32[5793] | 0) >>> 0 > $243 >>> 0) {
         _abort(); //@line 8023
        } else {
         $$0189$i = $243; //@line 8026
         $$pre$phi$iZ2D = $242; //@line 8026
        }
       }
       HEAP32[$$pre$phi$iZ2D >> 2] = $234; //@line 8029
       HEAP32[$$0189$i + 12 >> 2] = $234; //@line 8031
       HEAP32[$234 + 8 >> 2] = $$0189$i; //@line 8033
       HEAP32[$234 + 12 >> 2] = $237; //@line 8035
      }
      HEAP32[5791] = $$0193$lcssa$i; //@line 8037
      HEAP32[5794] = $159; //@line 8038
     }
     $$0 = $$0192$lcssa$i + 8 | 0; //@line 8041
     STACKTOP = sp; //@line 8042
     return $$0 | 0; //@line 8042
    }
   } else {
    $$0197 = $6; //@line 8045
   }
  } else {
   if ($0 >>> 0 > 4294967231) {
    $$0197 = -1; //@line 8050
   } else {
    $251 = $0 + 11 | 0; //@line 8052
    $252 = $251 & -8; //@line 8053
    $253 = HEAP32[5790] | 0; //@line 8054
    if (!$253) {
     $$0197 = $252; //@line 8057
    } else {
     $255 = 0 - $252 | 0; //@line 8059
     $256 = $251 >>> 8; //@line 8060
     if (!$256) {
      $$0358$i = 0; //@line 8063
     } else {
      if ($252 >>> 0 > 16777215) {
       $$0358$i = 31; //@line 8067
      } else {
       $261 = ($256 + 1048320 | 0) >>> 16 & 8; //@line 8071
       $262 = $256 << $261; //@line 8072
       $265 = ($262 + 520192 | 0) >>> 16 & 4; //@line 8075
       $267 = $262 << $265; //@line 8077
       $270 = ($267 + 245760 | 0) >>> 16 & 2; //@line 8080
       $275 = 14 - ($265 | $261 | $270) + ($267 << $270 >>> 15) | 0; //@line 8085
       $$0358$i = $252 >>> ($275 + 7 | 0) & 1 | $275 << 1; //@line 8091
      }
     }
     $282 = HEAP32[23460 + ($$0358$i << 2) >> 2] | 0; //@line 8095
     L117 : do {
      if (!$282) {
       $$2355$i = 0; //@line 8099
       $$3$i203 = 0; //@line 8099
       $$3350$i = $255; //@line 8099
       label = 81; //@line 8100
      } else {
       $$0342$i = 0; //@line 8107
       $$0347$i = $255; //@line 8107
       $$0353$i = $282; //@line 8107
       $$0359$i = $252 << (($$0358$i | 0) == 31 ? 0 : 25 - ($$0358$i >>> 1) | 0); //@line 8107
       $$0362$i = 0; //@line 8107
       while (1) {
        $292 = (HEAP32[$$0353$i + 4 >> 2] & -8) - $252 | 0; //@line 8112
        if ($292 >>> 0 < $$0347$i >>> 0) {
         if (!$292) {
          $$414$i = $$0353$i; //@line 8117
          $$435113$i = 0; //@line 8117
          $$435712$i = $$0353$i; //@line 8117
          label = 85; //@line 8118
          break L117;
         } else {
          $$1343$i = $$0353$i; //@line 8121
          $$1348$i = $292; //@line 8121
         }
        } else {
         $$1343$i = $$0342$i; //@line 8124
         $$1348$i = $$0347$i; //@line 8124
        }
        $296 = HEAP32[$$0353$i + 20 >> 2] | 0; //@line 8127
        $$0353$i = HEAP32[$$0353$i + 16 + ($$0359$i >>> 31 << 2) >> 2] | 0; //@line 8130
        $$1363$i = ($296 | 0) == 0 | ($296 | 0) == ($$0353$i | 0) ? $$0362$i : $296; //@line 8134
        $302 = ($$0353$i | 0) == 0; //@line 8135
        if ($302) {
         $$2355$i = $$1363$i; //@line 8140
         $$3$i203 = $$1343$i; //@line 8140
         $$3350$i = $$1348$i; //@line 8140
         label = 81; //@line 8141
         break;
        } else {
         $$0342$i = $$1343$i; //@line 8144
         $$0347$i = $$1348$i; //@line 8144
         $$0359$i = $$0359$i << (($302 ^ 1) & 1); //@line 8144
         $$0362$i = $$1363$i; //@line 8144
        }
       }
      }
     } while (0);
     if ((label | 0) == 81) {
      if (($$2355$i | 0) == 0 & ($$3$i203 | 0) == 0) {
       $306 = 2 << $$0358$i; //@line 8154
       $309 = $253 & ($306 | 0 - $306); //@line 8157
       if (!$309) {
        $$0197 = $252; //@line 8160
        break;
       }
       $313 = ($309 & 0 - $309) + -1 | 0; //@line 8165
       $315 = $313 >>> 12 & 16; //@line 8167
       $316 = $313 >>> $315; //@line 8168
       $318 = $316 >>> 5 & 8; //@line 8170
       $320 = $316 >>> $318; //@line 8172
       $322 = $320 >>> 2 & 4; //@line 8174
       $324 = $320 >>> $322; //@line 8176
       $326 = $324 >>> 1 & 2; //@line 8178
       $328 = $324 >>> $326; //@line 8180
       $330 = $328 >>> 1 & 1; //@line 8182
       $$4$ph$i = 0; //@line 8188
       $$4357$ph$i = HEAP32[23460 + (($318 | $315 | $322 | $326 | $330) + ($328 >>> $330) << 2) >> 2] | 0; //@line 8188
      } else {
       $$4$ph$i = $$3$i203; //@line 8190
       $$4357$ph$i = $$2355$i; //@line 8190
      }
      if (!$$4357$ph$i) {
       $$4$lcssa$i = $$4$ph$i; //@line 8194
       $$4351$lcssa$i = $$3350$i; //@line 8194
      } else {
       $$414$i = $$4$ph$i; //@line 8196
       $$435113$i = $$3350$i; //@line 8196
       $$435712$i = $$4357$ph$i; //@line 8196
       label = 85; //@line 8197
      }
     }
     if ((label | 0) == 85) {
      while (1) {
       label = 0; //@line 8202
       $340 = (HEAP32[$$435712$i + 4 >> 2] & -8) - $252 | 0; //@line 8206
       $341 = $340 >>> 0 < $$435113$i >>> 0; //@line 8207
       $$$4351$i = $341 ? $340 : $$435113$i; //@line 8208
       $$4357$$4$i = $341 ? $$435712$i : $$414$i; //@line 8209
       $$435712$i = HEAP32[$$435712$i + 16 + (((HEAP32[$$435712$i + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 8215
       if (!$$435712$i) {
        $$4$lcssa$i = $$4357$$4$i; //@line 8218
        $$4351$lcssa$i = $$$4351$i; //@line 8218
        break;
       } else {
        $$414$i = $$4357$$4$i; //@line 8221
        $$435113$i = $$$4351$i; //@line 8221
        label = 85; //@line 8222
       }
      }
     }
     if (!$$4$lcssa$i) {
      $$0197 = $252; //@line 8228
     } else {
      if ($$4351$lcssa$i >>> 0 < ((HEAP32[5791] | 0) - $252 | 0) >>> 0) {
       $352 = HEAP32[5793] | 0; //@line 8234
       if ($352 >>> 0 > $$4$lcssa$i >>> 0) {
        _abort(); //@line 8237
       }
       $354 = $$4$lcssa$i + $252 | 0; //@line 8240
       if ($354 >>> 0 <= $$4$lcssa$i >>> 0) {
        _abort(); //@line 8243
       }
       $357 = HEAP32[$$4$lcssa$i + 24 >> 2] | 0; //@line 8247
       $359 = HEAP32[$$4$lcssa$i + 12 >> 2] | 0; //@line 8249
       do {
        if (($359 | 0) == ($$4$lcssa$i | 0)) {
         $370 = $$4$lcssa$i + 20 | 0; //@line 8253
         $371 = HEAP32[$370 >> 2] | 0; //@line 8254
         if (!$371) {
          $373 = $$4$lcssa$i + 16 | 0; //@line 8257
          $374 = HEAP32[$373 >> 2] | 0; //@line 8258
          if (!$374) {
           $$3372$i = 0; //@line 8261
           break;
          } else {
           $$1370$i = $374; //@line 8264
           $$1374$i = $373; //@line 8264
          }
         } else {
          $$1370$i = $371; //@line 8267
          $$1374$i = $370; //@line 8267
         }
         while (1) {
          $376 = $$1370$i + 20 | 0; //@line 8270
          $377 = HEAP32[$376 >> 2] | 0; //@line 8271
          if ($377 | 0) {
           $$1370$i = $377; //@line 8274
           $$1374$i = $376; //@line 8274
           continue;
          }
          $379 = $$1370$i + 16 | 0; //@line 8277
          $380 = HEAP32[$379 >> 2] | 0; //@line 8278
          if (!$380) {
           break;
          } else {
           $$1370$i = $380; //@line 8283
           $$1374$i = $379; //@line 8283
          }
         }
         if ($352 >>> 0 > $$1374$i >>> 0) {
          _abort(); //@line 8288
         } else {
          HEAP32[$$1374$i >> 2] = 0; //@line 8291
          $$3372$i = $$1370$i; //@line 8292
          break;
         }
        } else {
         $362 = HEAP32[$$4$lcssa$i + 8 >> 2] | 0; //@line 8297
         if ($352 >>> 0 > $362 >>> 0) {
          _abort(); //@line 8300
         }
         $364 = $362 + 12 | 0; //@line 8303
         if ((HEAP32[$364 >> 2] | 0) != ($$4$lcssa$i | 0)) {
          _abort(); //@line 8307
         }
         $367 = $359 + 8 | 0; //@line 8310
         if ((HEAP32[$367 >> 2] | 0) == ($$4$lcssa$i | 0)) {
          HEAP32[$364 >> 2] = $359; //@line 8314
          HEAP32[$367 >> 2] = $362; //@line 8315
          $$3372$i = $359; //@line 8316
          break;
         } else {
          _abort(); //@line 8319
         }
        }
       } while (0);
       L164 : do {
        if (!$357) {
         $475 = $253; //@line 8327
        } else {
         $385 = HEAP32[$$4$lcssa$i + 28 >> 2] | 0; //@line 8330
         $386 = 23460 + ($385 << 2) | 0; //@line 8331
         do {
          if (($$4$lcssa$i | 0) == (HEAP32[$386 >> 2] | 0)) {
           HEAP32[$386 >> 2] = $$3372$i; //@line 8336
           if (!$$3372$i) {
            $391 = $253 & ~(1 << $385); //@line 8341
            HEAP32[5790] = $391; //@line 8342
            $475 = $391; //@line 8343
            break L164;
           }
          } else {
           if ((HEAP32[5793] | 0) >>> 0 > $357 >>> 0) {
            _abort(); //@line 8350
           } else {
            HEAP32[$357 + 16 + (((HEAP32[$357 + 16 >> 2] | 0) != ($$4$lcssa$i | 0) & 1) << 2) >> 2] = $$3372$i; //@line 8358
            if (!$$3372$i) {
             $475 = $253; //@line 8361
             break L164;
            } else {
             break;
            }
           }
          }
         } while (0);
         $399 = HEAP32[5793] | 0; //@line 8369
         if ($399 >>> 0 > $$3372$i >>> 0) {
          _abort(); //@line 8372
         }
         HEAP32[$$3372$i + 24 >> 2] = $357; //@line 8376
         $403 = HEAP32[$$4$lcssa$i + 16 >> 2] | 0; //@line 8378
         do {
          if ($403 | 0) {
           if ($399 >>> 0 > $403 >>> 0) {
            _abort(); //@line 8384
           } else {
            HEAP32[$$3372$i + 16 >> 2] = $403; //@line 8388
            HEAP32[$403 + 24 >> 2] = $$3372$i; //@line 8390
            break;
           }
          }
         } while (0);
         $409 = HEAP32[$$4$lcssa$i + 20 >> 2] | 0; //@line 8396
         if (!$409) {
          $475 = $253; //@line 8399
         } else {
          if ((HEAP32[5793] | 0) >>> 0 > $409 >>> 0) {
           _abort(); //@line 8404
          } else {
           HEAP32[$$3372$i + 20 >> 2] = $409; //@line 8408
           HEAP32[$409 + 24 >> 2] = $$3372$i; //@line 8410
           $475 = $253; //@line 8411
           break;
          }
         }
        }
       } while (0);
       do {
        if ($$4351$lcssa$i >>> 0 < 16) {
         $416 = $$4351$lcssa$i + $252 | 0; //@line 8420
         HEAP32[$$4$lcssa$i + 4 >> 2] = $416 | 3; //@line 8423
         $420 = $$4$lcssa$i + $416 + 4 | 0; //@line 8425
         HEAP32[$420 >> 2] = HEAP32[$420 >> 2] | 1; //@line 8428
        } else {
         HEAP32[$$4$lcssa$i + 4 >> 2] = $252 | 3; //@line 8432
         HEAP32[$354 + 4 >> 2] = $$4351$lcssa$i | 1; //@line 8435
         HEAP32[$354 + $$4351$lcssa$i >> 2] = $$4351$lcssa$i; //@line 8437
         $428 = $$4351$lcssa$i >>> 3; //@line 8438
         if ($$4351$lcssa$i >>> 0 < 256) {
          $431 = 23196 + ($428 << 1 << 2) | 0; //@line 8442
          $432 = HEAP32[5789] | 0; //@line 8443
          $433 = 1 << $428; //@line 8444
          if (!($432 & $433)) {
           HEAP32[5789] = $432 | $433; //@line 8449
           $$0368$i = $431; //@line 8451
           $$pre$phi$i211Z2D = $431 + 8 | 0; //@line 8451
          } else {
           $437 = $431 + 8 | 0; //@line 8453
           $438 = HEAP32[$437 >> 2] | 0; //@line 8454
           if ((HEAP32[5793] | 0) >>> 0 > $438 >>> 0) {
            _abort(); //@line 8458
           } else {
            $$0368$i = $438; //@line 8461
            $$pre$phi$i211Z2D = $437; //@line 8461
           }
          }
          HEAP32[$$pre$phi$i211Z2D >> 2] = $354; //@line 8464
          HEAP32[$$0368$i + 12 >> 2] = $354; //@line 8466
          HEAP32[$354 + 8 >> 2] = $$0368$i; //@line 8468
          HEAP32[$354 + 12 >> 2] = $431; //@line 8470
          break;
         }
         $444 = $$4351$lcssa$i >>> 8; //@line 8473
         if (!$444) {
          $$0361$i = 0; //@line 8476
         } else {
          if ($$4351$lcssa$i >>> 0 > 16777215) {
           $$0361$i = 31; //@line 8480
          } else {
           $449 = ($444 + 1048320 | 0) >>> 16 & 8; //@line 8484
           $450 = $444 << $449; //@line 8485
           $453 = ($450 + 520192 | 0) >>> 16 & 4; //@line 8488
           $455 = $450 << $453; //@line 8490
           $458 = ($455 + 245760 | 0) >>> 16 & 2; //@line 8493
           $463 = 14 - ($453 | $449 | $458) + ($455 << $458 >>> 15) | 0; //@line 8498
           $$0361$i = $$4351$lcssa$i >>> ($463 + 7 | 0) & 1 | $463 << 1; //@line 8504
          }
         }
         $469 = 23460 + ($$0361$i << 2) | 0; //@line 8507
         HEAP32[$354 + 28 >> 2] = $$0361$i; //@line 8509
         $471 = $354 + 16 | 0; //@line 8510
         HEAP32[$471 + 4 >> 2] = 0; //@line 8512
         HEAP32[$471 >> 2] = 0; //@line 8513
         $473 = 1 << $$0361$i; //@line 8514
         if (!($475 & $473)) {
          HEAP32[5790] = $475 | $473; //@line 8519
          HEAP32[$469 >> 2] = $354; //@line 8520
          HEAP32[$354 + 24 >> 2] = $469; //@line 8522
          HEAP32[$354 + 12 >> 2] = $354; //@line 8524
          HEAP32[$354 + 8 >> 2] = $354; //@line 8526
          break;
         }
         $$0344$i = $$4351$lcssa$i << (($$0361$i | 0) == 31 ? 0 : 25 - ($$0361$i >>> 1) | 0); //@line 8535
         $$0345$i = HEAP32[$469 >> 2] | 0; //@line 8535
         while (1) {
          if ((HEAP32[$$0345$i + 4 >> 2] & -8 | 0) == ($$4351$lcssa$i | 0)) {
           label = 139; //@line 8542
           break;
          }
          $492 = $$0345$i + 16 + ($$0344$i >>> 31 << 2) | 0; //@line 8546
          $494 = HEAP32[$492 >> 2] | 0; //@line 8548
          if (!$494) {
           label = 136; //@line 8551
           break;
          } else {
           $$0344$i = $$0344$i << 1; //@line 8554
           $$0345$i = $494; //@line 8554
          }
         }
         if ((label | 0) == 136) {
          if ((HEAP32[5793] | 0) >>> 0 > $492 >>> 0) {
           _abort(); //@line 8561
          } else {
           HEAP32[$492 >> 2] = $354; //@line 8564
           HEAP32[$354 + 24 >> 2] = $$0345$i; //@line 8566
           HEAP32[$354 + 12 >> 2] = $354; //@line 8568
           HEAP32[$354 + 8 >> 2] = $354; //@line 8570
           break;
          }
         } else if ((label | 0) == 139) {
          $501 = $$0345$i + 8 | 0; //@line 8575
          $502 = HEAP32[$501 >> 2] | 0; //@line 8576
          $503 = HEAP32[5793] | 0; //@line 8577
          if ($503 >>> 0 <= $502 >>> 0 & $503 >>> 0 <= $$0345$i >>> 0) {
           HEAP32[$502 + 12 >> 2] = $354; //@line 8583
           HEAP32[$501 >> 2] = $354; //@line 8584
           HEAP32[$354 + 8 >> 2] = $502; //@line 8586
           HEAP32[$354 + 12 >> 2] = $$0345$i; //@line 8588
           HEAP32[$354 + 24 >> 2] = 0; //@line 8590
           break;
          } else {
           _abort(); //@line 8593
          }
         }
        }
       } while (0);
       $$0 = $$4$lcssa$i + 8 | 0; //@line 8600
       STACKTOP = sp; //@line 8601
       return $$0 | 0; //@line 8601
      } else {
       $$0197 = $252; //@line 8603
      }
     }
    }
   }
  }
 } while (0);
 $512 = HEAP32[5791] | 0; //@line 8610
 if ($512 >>> 0 >= $$0197 >>> 0) {
  $514 = $512 - $$0197 | 0; //@line 8613
  $515 = HEAP32[5794] | 0; //@line 8614
  if ($514 >>> 0 > 15) {
   $517 = $515 + $$0197 | 0; //@line 8617
   HEAP32[5794] = $517; //@line 8618
   HEAP32[5791] = $514; //@line 8619
   HEAP32[$517 + 4 >> 2] = $514 | 1; //@line 8622
   HEAP32[$515 + $512 >> 2] = $514; //@line 8624
   HEAP32[$515 + 4 >> 2] = $$0197 | 3; //@line 8627
  } else {
   HEAP32[5791] = 0; //@line 8629
   HEAP32[5794] = 0; //@line 8630
   HEAP32[$515 + 4 >> 2] = $512 | 3; //@line 8633
   $526 = $515 + $512 + 4 | 0; //@line 8635
   HEAP32[$526 >> 2] = HEAP32[$526 >> 2] | 1; //@line 8638
  }
  $$0 = $515 + 8 | 0; //@line 8641
  STACKTOP = sp; //@line 8642
  return $$0 | 0; //@line 8642
 }
 $530 = HEAP32[5792] | 0; //@line 8644
 if ($530 >>> 0 > $$0197 >>> 0) {
  $532 = $530 - $$0197 | 0; //@line 8647
  HEAP32[5792] = $532; //@line 8648
  $533 = HEAP32[5795] | 0; //@line 8649
  $534 = $533 + $$0197 | 0; //@line 8650
  HEAP32[5795] = $534; //@line 8651
  HEAP32[$534 + 4 >> 2] = $532 | 1; //@line 8654
  HEAP32[$533 + 4 >> 2] = $$0197 | 3; //@line 8657
  $$0 = $533 + 8 | 0; //@line 8659
  STACKTOP = sp; //@line 8660
  return $$0 | 0; //@line 8660
 }
 if (!(HEAP32[5907] | 0)) {
  HEAP32[5909] = 4096; //@line 8665
  HEAP32[5908] = 4096; //@line 8666
  HEAP32[5910] = -1; //@line 8667
  HEAP32[5911] = -1; //@line 8668
  HEAP32[5912] = 0; //@line 8669
  HEAP32[5900] = 0; //@line 8670
  HEAP32[5907] = $1 & -16 ^ 1431655768; //@line 8674
  $548 = 4096; //@line 8675
 } else {
  $548 = HEAP32[5909] | 0; //@line 8678
 }
 $545 = $$0197 + 48 | 0; //@line 8680
 $546 = $$0197 + 47 | 0; //@line 8681
 $547 = $548 + $546 | 0; //@line 8682
 $549 = 0 - $548 | 0; //@line 8683
 $550 = $547 & $549; //@line 8684
 if ($550 >>> 0 <= $$0197 >>> 0) {
  $$0 = 0; //@line 8687
  STACKTOP = sp; //@line 8688
  return $$0 | 0; //@line 8688
 }
 $552 = HEAP32[5899] | 0; //@line 8690
 if ($552 | 0) {
  $554 = HEAP32[5897] | 0; //@line 8693
  $555 = $554 + $550 | 0; //@line 8694
  if ($555 >>> 0 <= $554 >>> 0 | $555 >>> 0 > $552 >>> 0) {
   $$0 = 0; //@line 8699
   STACKTOP = sp; //@line 8700
   return $$0 | 0; //@line 8700
  }
 }
 L244 : do {
  if (!(HEAP32[5900] & 4)) {
   $561 = HEAP32[5795] | 0; //@line 8708
   L246 : do {
    if (!$561) {
     label = 163; //@line 8712
    } else {
     $$0$i$i = 23604; //@line 8714
     while (1) {
      $563 = HEAP32[$$0$i$i >> 2] | 0; //@line 8716
      if ($563 >>> 0 <= $561 >>> 0) {
       $565 = $$0$i$i + 4 | 0; //@line 8719
       if (($563 + (HEAP32[$565 >> 2] | 0) | 0) >>> 0 > $561 >>> 0) {
        break;
       }
      }
      $570 = HEAP32[$$0$i$i + 8 >> 2] | 0; //@line 8728
      if (!$570) {
       label = 163; //@line 8731
       break L246;
      } else {
       $$0$i$i = $570; //@line 8734
      }
     }
     $595 = $547 - $530 & $549; //@line 8738
     if ($595 >>> 0 < 2147483647) {
      $597 = _sbrk($595 | 0) | 0; //@line 8741
      if (($597 | 0) == ((HEAP32[$$0$i$i >> 2] | 0) + (HEAP32[$565 >> 2] | 0) | 0)) {
       if (($597 | 0) == (-1 | 0)) {
        $$2234243136$i = $595; //@line 8749
       } else {
        $$723947$i = $595; //@line 8751
        $$748$i = $597; //@line 8751
        label = 180; //@line 8752
        break L244;
       }
      } else {
       $$2247$ph$i = $597; //@line 8756
       $$2253$ph$i = $595; //@line 8756
       label = 171; //@line 8757
      }
     } else {
      $$2234243136$i = 0; //@line 8760
     }
    }
   } while (0);
   do {
    if ((label | 0) == 163) {
     $572 = _sbrk(0) | 0; //@line 8766
     if (($572 | 0) == (-1 | 0)) {
      $$2234243136$i = 0; //@line 8769
     } else {
      $574 = $572; //@line 8771
      $575 = HEAP32[5908] | 0; //@line 8772
      $576 = $575 + -1 | 0; //@line 8773
      $$$i = (($576 & $574 | 0) == 0 ? 0 : ($576 + $574 & 0 - $575) - $574 | 0) + $550 | 0; //@line 8781
      $584 = HEAP32[5897] | 0; //@line 8782
      $585 = $$$i + $584 | 0; //@line 8783
      if ($$$i >>> 0 > $$0197 >>> 0 & $$$i >>> 0 < 2147483647) {
       $588 = HEAP32[5899] | 0; //@line 8788
       if ($588 | 0) {
        if ($585 >>> 0 <= $584 >>> 0 | $585 >>> 0 > $588 >>> 0) {
         $$2234243136$i = 0; //@line 8795
         break;
        }
       }
       $592 = _sbrk($$$i | 0) | 0; //@line 8799
       if (($592 | 0) == ($572 | 0)) {
        $$723947$i = $$$i; //@line 8802
        $$748$i = $572; //@line 8802
        label = 180; //@line 8803
        break L244;
       } else {
        $$2247$ph$i = $592; //@line 8806
        $$2253$ph$i = $$$i; //@line 8806
        label = 171; //@line 8807
       }
      } else {
       $$2234243136$i = 0; //@line 8810
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 171) {
     $603 = 0 - $$2253$ph$i | 0; //@line 8817
     if (!($545 >>> 0 > $$2253$ph$i >>> 0 & ($$2253$ph$i >>> 0 < 2147483647 & ($$2247$ph$i | 0) != (-1 | 0)))) {
      if (($$2247$ph$i | 0) == (-1 | 0)) {
       $$2234243136$i = 0; //@line 8826
       break;
      } else {
       $$723947$i = $$2253$ph$i; //@line 8829
       $$748$i = $$2247$ph$i; //@line 8829
       label = 180; //@line 8830
       break L244;
      }
     }
     $607 = HEAP32[5909] | 0; //@line 8834
     $611 = $546 - $$2253$ph$i + $607 & 0 - $607; //@line 8838
     if ($611 >>> 0 >= 2147483647) {
      $$723947$i = $$2253$ph$i; //@line 8841
      $$748$i = $$2247$ph$i; //@line 8841
      label = 180; //@line 8842
      break L244;
     }
     if ((_sbrk($611 | 0) | 0) == (-1 | 0)) {
      _sbrk($603 | 0) | 0; //@line 8848
      $$2234243136$i = 0; //@line 8849
      break;
     } else {
      $$723947$i = $611 + $$2253$ph$i | 0; //@line 8853
      $$748$i = $$2247$ph$i; //@line 8853
      label = 180; //@line 8854
      break L244;
     }
    }
   } while (0);
   HEAP32[5900] = HEAP32[5900] | 4; //@line 8861
   $$4236$i = $$2234243136$i; //@line 8862
   label = 178; //@line 8863
  } else {
   $$4236$i = 0; //@line 8865
   label = 178; //@line 8866
  }
 } while (0);
 if ((label | 0) == 178) {
  if ($550 >>> 0 < 2147483647) {
   $620 = _sbrk($550 | 0) | 0; //@line 8872
   $621 = _sbrk(0) | 0; //@line 8873
   $627 = $621 - $620 | 0; //@line 8881
   $629 = $627 >>> 0 > ($$0197 + 40 | 0) >>> 0; //@line 8883
   if (!(($620 | 0) == (-1 | 0) | $629 ^ 1 | $620 >>> 0 < $621 >>> 0 & (($620 | 0) != (-1 | 0) & ($621 | 0) != (-1 | 0)) ^ 1)) {
    $$723947$i = $629 ? $627 : $$4236$i; //@line 8891
    $$748$i = $620; //@line 8891
    label = 180; //@line 8892
   }
  }
 }
 if ((label | 0) == 180) {
  $633 = (HEAP32[5897] | 0) + $$723947$i | 0; //@line 8898
  HEAP32[5897] = $633; //@line 8899
  if ($633 >>> 0 > (HEAP32[5898] | 0) >>> 0) {
   HEAP32[5898] = $633; //@line 8903
  }
  $636 = HEAP32[5795] | 0; //@line 8905
  do {
   if (!$636) {
    $638 = HEAP32[5793] | 0; //@line 8909
    if (($638 | 0) == 0 | $$748$i >>> 0 < $638 >>> 0) {
     HEAP32[5793] = $$748$i; //@line 8914
    }
    HEAP32[5901] = $$748$i; //@line 8916
    HEAP32[5902] = $$723947$i; //@line 8917
    HEAP32[5904] = 0; //@line 8918
    HEAP32[5798] = HEAP32[5907]; //@line 8920
    HEAP32[5797] = -1; //@line 8921
    HEAP32[5802] = 23196; //@line 8922
    HEAP32[5801] = 23196; //@line 8923
    HEAP32[5804] = 23204; //@line 8924
    HEAP32[5803] = 23204; //@line 8925
    HEAP32[5806] = 23212; //@line 8926
    HEAP32[5805] = 23212; //@line 8927
    HEAP32[5808] = 23220; //@line 8928
    HEAP32[5807] = 23220; //@line 8929
    HEAP32[5810] = 23228; //@line 8930
    HEAP32[5809] = 23228; //@line 8931
    HEAP32[5812] = 23236; //@line 8932
    HEAP32[5811] = 23236; //@line 8933
    HEAP32[5814] = 23244; //@line 8934
    HEAP32[5813] = 23244; //@line 8935
    HEAP32[5816] = 23252; //@line 8936
    HEAP32[5815] = 23252; //@line 8937
    HEAP32[5818] = 23260; //@line 8938
    HEAP32[5817] = 23260; //@line 8939
    HEAP32[5820] = 23268; //@line 8940
    HEAP32[5819] = 23268; //@line 8941
    HEAP32[5822] = 23276; //@line 8942
    HEAP32[5821] = 23276; //@line 8943
    HEAP32[5824] = 23284; //@line 8944
    HEAP32[5823] = 23284; //@line 8945
    HEAP32[5826] = 23292; //@line 8946
    HEAP32[5825] = 23292; //@line 8947
    HEAP32[5828] = 23300; //@line 8948
    HEAP32[5827] = 23300; //@line 8949
    HEAP32[5830] = 23308; //@line 8950
    HEAP32[5829] = 23308; //@line 8951
    HEAP32[5832] = 23316; //@line 8952
    HEAP32[5831] = 23316; //@line 8953
    HEAP32[5834] = 23324; //@line 8954
    HEAP32[5833] = 23324; //@line 8955
    HEAP32[5836] = 23332; //@line 8956
    HEAP32[5835] = 23332; //@line 8957
    HEAP32[5838] = 23340; //@line 8958
    HEAP32[5837] = 23340; //@line 8959
    HEAP32[5840] = 23348; //@line 8960
    HEAP32[5839] = 23348; //@line 8961
    HEAP32[5842] = 23356; //@line 8962
    HEAP32[5841] = 23356; //@line 8963
    HEAP32[5844] = 23364; //@line 8964
    HEAP32[5843] = 23364; //@line 8965
    HEAP32[5846] = 23372; //@line 8966
    HEAP32[5845] = 23372; //@line 8967
    HEAP32[5848] = 23380; //@line 8968
    HEAP32[5847] = 23380; //@line 8969
    HEAP32[5850] = 23388; //@line 8970
    HEAP32[5849] = 23388; //@line 8971
    HEAP32[5852] = 23396; //@line 8972
    HEAP32[5851] = 23396; //@line 8973
    HEAP32[5854] = 23404; //@line 8974
    HEAP32[5853] = 23404; //@line 8975
    HEAP32[5856] = 23412; //@line 8976
    HEAP32[5855] = 23412; //@line 8977
    HEAP32[5858] = 23420; //@line 8978
    HEAP32[5857] = 23420; //@line 8979
    HEAP32[5860] = 23428; //@line 8980
    HEAP32[5859] = 23428; //@line 8981
    HEAP32[5862] = 23436; //@line 8982
    HEAP32[5861] = 23436; //@line 8983
    HEAP32[5864] = 23444; //@line 8984
    HEAP32[5863] = 23444; //@line 8985
    $642 = $$723947$i + -40 | 0; //@line 8986
    $644 = $$748$i + 8 | 0; //@line 8988
    $649 = ($644 & 7 | 0) == 0 ? 0 : 0 - $644 & 7; //@line 8993
    $650 = $$748$i + $649 | 0; //@line 8994
    $651 = $642 - $649 | 0; //@line 8995
    HEAP32[5795] = $650; //@line 8996
    HEAP32[5792] = $651; //@line 8997
    HEAP32[$650 + 4 >> 2] = $651 | 1; //@line 9000
    HEAP32[$$748$i + $642 + 4 >> 2] = 40; //@line 9003
    HEAP32[5796] = HEAP32[5911]; //@line 9005
   } else {
    $$024367$i = 23604; //@line 9007
    while (1) {
     $657 = HEAP32[$$024367$i >> 2] | 0; //@line 9009
     $658 = $$024367$i + 4 | 0; //@line 9010
     $659 = HEAP32[$658 >> 2] | 0; //@line 9011
     if (($$748$i | 0) == ($657 + $659 | 0)) {
      label = 188; //@line 9015
      break;
     }
     $663 = HEAP32[$$024367$i + 8 >> 2] | 0; //@line 9019
     if (!$663) {
      break;
     } else {
      $$024367$i = $663; //@line 9024
     }
    }
    if ((label | 0) == 188) {
     if (!(HEAP32[$$024367$i + 12 >> 2] & 8)) {
      if ($$748$i >>> 0 > $636 >>> 0 & $657 >>> 0 <= $636 >>> 0) {
       HEAP32[$658 >> 2] = $659 + $$723947$i; //@line 9038
       $673 = (HEAP32[5792] | 0) + $$723947$i | 0; //@line 9040
       $675 = $636 + 8 | 0; //@line 9042
       $680 = ($675 & 7 | 0) == 0 ? 0 : 0 - $675 & 7; //@line 9047
       $681 = $636 + $680 | 0; //@line 9048
       $682 = $673 - $680 | 0; //@line 9049
       HEAP32[5795] = $681; //@line 9050
       HEAP32[5792] = $682; //@line 9051
       HEAP32[$681 + 4 >> 2] = $682 | 1; //@line 9054
       HEAP32[$636 + $673 + 4 >> 2] = 40; //@line 9057
       HEAP32[5796] = HEAP32[5911]; //@line 9059
       break;
      }
     }
    }
    $688 = HEAP32[5793] | 0; //@line 9064
    if ($$748$i >>> 0 < $688 >>> 0) {
     HEAP32[5793] = $$748$i; //@line 9067
     $753 = $$748$i; //@line 9068
    } else {
     $753 = $688; //@line 9070
    }
    $690 = $$748$i + $$723947$i | 0; //@line 9072
    $$124466$i = 23604; //@line 9073
    while (1) {
     if ((HEAP32[$$124466$i >> 2] | 0) == ($690 | 0)) {
      label = 196; //@line 9078
      break;
     }
     $694 = HEAP32[$$124466$i + 8 >> 2] | 0; //@line 9082
     if (!$694) {
      $$0$i$i$i = 23604; //@line 9085
      break;
     } else {
      $$124466$i = $694; //@line 9088
     }
    }
    if ((label | 0) == 196) {
     if (!(HEAP32[$$124466$i + 12 >> 2] & 8)) {
      HEAP32[$$124466$i >> 2] = $$748$i; //@line 9097
      $700 = $$124466$i + 4 | 0; //@line 9098
      HEAP32[$700 >> 2] = (HEAP32[$700 >> 2] | 0) + $$723947$i; //@line 9101
      $704 = $$748$i + 8 | 0; //@line 9103
      $710 = $$748$i + (($704 & 7 | 0) == 0 ? 0 : 0 - $704 & 7) | 0; //@line 9109
      $712 = $690 + 8 | 0; //@line 9111
      $718 = $690 + (($712 & 7 | 0) == 0 ? 0 : 0 - $712 & 7) | 0; //@line 9117
      $722 = $710 + $$0197 | 0; //@line 9121
      $723 = $718 - $710 - $$0197 | 0; //@line 9122
      HEAP32[$710 + 4 >> 2] = $$0197 | 3; //@line 9125
      do {
       if (($636 | 0) == ($718 | 0)) {
        $728 = (HEAP32[5792] | 0) + $723 | 0; //@line 9130
        HEAP32[5792] = $728; //@line 9131
        HEAP32[5795] = $722; //@line 9132
        HEAP32[$722 + 4 >> 2] = $728 | 1; //@line 9135
       } else {
        if ((HEAP32[5794] | 0) == ($718 | 0)) {
         $734 = (HEAP32[5791] | 0) + $723 | 0; //@line 9141
         HEAP32[5791] = $734; //@line 9142
         HEAP32[5794] = $722; //@line 9143
         HEAP32[$722 + 4 >> 2] = $734 | 1; //@line 9146
         HEAP32[$722 + $734 >> 2] = $734; //@line 9148
         break;
        }
        $739 = HEAP32[$718 + 4 >> 2] | 0; //@line 9152
        if (($739 & 3 | 0) == 1) {
         $742 = $739 & -8; //@line 9156
         $743 = $739 >>> 3; //@line 9157
         L311 : do {
          if ($739 >>> 0 < 256) {
           $746 = HEAP32[$718 + 8 >> 2] | 0; //@line 9162
           $748 = HEAP32[$718 + 12 >> 2] | 0; //@line 9164
           $750 = 23196 + ($743 << 1 << 2) | 0; //@line 9166
           do {
            if (($746 | 0) != ($750 | 0)) {
             if ($753 >>> 0 > $746 >>> 0) {
              _abort(); //@line 9172
             }
             if ((HEAP32[$746 + 12 >> 2] | 0) == ($718 | 0)) {
              break;
             }
             _abort(); //@line 9181
            }
           } while (0);
           if (($748 | 0) == ($746 | 0)) {
            HEAP32[5789] = HEAP32[5789] & ~(1 << $743); //@line 9191
            break;
           }
           do {
            if (($748 | 0) == ($750 | 0)) {
             $$pre$phi11$i$iZ2D = $748 + 8 | 0; //@line 9198
            } else {
             if ($753 >>> 0 > $748 >>> 0) {
              _abort(); //@line 9202
             }
             $764 = $748 + 8 | 0; //@line 9205
             if ((HEAP32[$764 >> 2] | 0) == ($718 | 0)) {
              $$pre$phi11$i$iZ2D = $764; //@line 9209
              break;
             }
             _abort(); //@line 9212
            }
           } while (0);
           HEAP32[$746 + 12 >> 2] = $748; //@line 9217
           HEAP32[$$pre$phi11$i$iZ2D >> 2] = $746; //@line 9218
          } else {
           $769 = HEAP32[$718 + 24 >> 2] | 0; //@line 9221
           $771 = HEAP32[$718 + 12 >> 2] | 0; //@line 9223
           do {
            if (($771 | 0) == ($718 | 0)) {
             $782 = $718 + 16 | 0; //@line 9227
             $783 = $782 + 4 | 0; //@line 9228
             $784 = HEAP32[$783 >> 2] | 0; //@line 9229
             if (!$784) {
              $786 = HEAP32[$782 >> 2] | 0; //@line 9232
              if (!$786) {
               $$3$i$i = 0; //@line 9235
               break;
              } else {
               $$1291$i$i = $786; //@line 9238
               $$1293$i$i = $782; //@line 9238
              }
             } else {
              $$1291$i$i = $784; //@line 9241
              $$1293$i$i = $783; //@line 9241
             }
             while (1) {
              $788 = $$1291$i$i + 20 | 0; //@line 9244
              $789 = HEAP32[$788 >> 2] | 0; //@line 9245
              if ($789 | 0) {
               $$1291$i$i = $789; //@line 9248
               $$1293$i$i = $788; //@line 9248
               continue;
              }
              $791 = $$1291$i$i + 16 | 0; //@line 9251
              $792 = HEAP32[$791 >> 2] | 0; //@line 9252
              if (!$792) {
               break;
              } else {
               $$1291$i$i = $792; //@line 9257
               $$1293$i$i = $791; //@line 9257
              }
             }
             if ($753 >>> 0 > $$1293$i$i >>> 0) {
              _abort(); //@line 9262
             } else {
              HEAP32[$$1293$i$i >> 2] = 0; //@line 9265
              $$3$i$i = $$1291$i$i; //@line 9266
              break;
             }
            } else {
             $774 = HEAP32[$718 + 8 >> 2] | 0; //@line 9271
             if ($753 >>> 0 > $774 >>> 0) {
              _abort(); //@line 9274
             }
             $776 = $774 + 12 | 0; //@line 9277
             if ((HEAP32[$776 >> 2] | 0) != ($718 | 0)) {
              _abort(); //@line 9281
             }
             $779 = $771 + 8 | 0; //@line 9284
             if ((HEAP32[$779 >> 2] | 0) == ($718 | 0)) {
              HEAP32[$776 >> 2] = $771; //@line 9288
              HEAP32[$779 >> 2] = $774; //@line 9289
              $$3$i$i = $771; //@line 9290
              break;
             } else {
              _abort(); //@line 9293
             }
            }
           } while (0);
           if (!$769) {
            break;
           }
           $797 = HEAP32[$718 + 28 >> 2] | 0; //@line 9303
           $798 = 23460 + ($797 << 2) | 0; //@line 9304
           do {
            if ((HEAP32[$798 >> 2] | 0) == ($718 | 0)) {
             HEAP32[$798 >> 2] = $$3$i$i; //@line 9309
             if ($$3$i$i | 0) {
              break;
             }
             HEAP32[5790] = HEAP32[5790] & ~(1 << $797); //@line 9318
             break L311;
            } else {
             if ((HEAP32[5793] | 0) >>> 0 > $769 >>> 0) {
              _abort(); //@line 9324
             } else {
              HEAP32[$769 + 16 + (((HEAP32[$769 + 16 >> 2] | 0) != ($718 | 0) & 1) << 2) >> 2] = $$3$i$i; //@line 9332
              if (!$$3$i$i) {
               break L311;
              } else {
               break;
              }
             }
            }
           } while (0);
           $812 = HEAP32[5793] | 0; //@line 9342
           if ($812 >>> 0 > $$3$i$i >>> 0) {
            _abort(); //@line 9345
           }
           HEAP32[$$3$i$i + 24 >> 2] = $769; //@line 9349
           $815 = $718 + 16 | 0; //@line 9350
           $816 = HEAP32[$815 >> 2] | 0; //@line 9351
           do {
            if ($816 | 0) {
             if ($812 >>> 0 > $816 >>> 0) {
              _abort(); //@line 9357
             } else {
              HEAP32[$$3$i$i + 16 >> 2] = $816; //@line 9361
              HEAP32[$816 + 24 >> 2] = $$3$i$i; //@line 9363
              break;
             }
            }
           } while (0);
           $822 = HEAP32[$815 + 4 >> 2] | 0; //@line 9369
           if (!$822) {
            break;
           }
           if ((HEAP32[5793] | 0) >>> 0 > $822 >>> 0) {
            _abort(); //@line 9377
           } else {
            HEAP32[$$3$i$i + 20 >> 2] = $822; //@line 9381
            HEAP32[$822 + 24 >> 2] = $$3$i$i; //@line 9383
            break;
           }
          }
         } while (0);
         $$0$i17$i = $718 + $742 | 0; //@line 9390
         $$0287$i$i = $742 + $723 | 0; //@line 9390
        } else {
         $$0$i17$i = $718; //@line 9392
         $$0287$i$i = $723; //@line 9392
        }
        $830 = $$0$i17$i + 4 | 0; //@line 9394
        HEAP32[$830 >> 2] = HEAP32[$830 >> 2] & -2; //@line 9397
        HEAP32[$722 + 4 >> 2] = $$0287$i$i | 1; //@line 9400
        HEAP32[$722 + $$0287$i$i >> 2] = $$0287$i$i; //@line 9402
        $836 = $$0287$i$i >>> 3; //@line 9403
        if ($$0287$i$i >>> 0 < 256) {
         $839 = 23196 + ($836 << 1 << 2) | 0; //@line 9407
         $840 = HEAP32[5789] | 0; //@line 9408
         $841 = 1 << $836; //@line 9409
         do {
          if (!($840 & $841)) {
           HEAP32[5789] = $840 | $841; //@line 9415
           $$0295$i$i = $839; //@line 9417
           $$pre$phi$i19$iZ2D = $839 + 8 | 0; //@line 9417
          } else {
           $845 = $839 + 8 | 0; //@line 9419
           $846 = HEAP32[$845 >> 2] | 0; //@line 9420
           if ((HEAP32[5793] | 0) >>> 0 <= $846 >>> 0) {
            $$0295$i$i = $846; //@line 9424
            $$pre$phi$i19$iZ2D = $845; //@line 9424
            break;
           }
           _abort(); //@line 9427
          }
         } while (0);
         HEAP32[$$pre$phi$i19$iZ2D >> 2] = $722; //@line 9431
         HEAP32[$$0295$i$i + 12 >> 2] = $722; //@line 9433
         HEAP32[$722 + 8 >> 2] = $$0295$i$i; //@line 9435
         HEAP32[$722 + 12 >> 2] = $839; //@line 9437
         break;
        }
        $852 = $$0287$i$i >>> 8; //@line 9440
        do {
         if (!$852) {
          $$0296$i$i = 0; //@line 9444
         } else {
          if ($$0287$i$i >>> 0 > 16777215) {
           $$0296$i$i = 31; //@line 9448
           break;
          }
          $857 = ($852 + 1048320 | 0) >>> 16 & 8; //@line 9453
          $858 = $852 << $857; //@line 9454
          $861 = ($858 + 520192 | 0) >>> 16 & 4; //@line 9457
          $863 = $858 << $861; //@line 9459
          $866 = ($863 + 245760 | 0) >>> 16 & 2; //@line 9462
          $871 = 14 - ($861 | $857 | $866) + ($863 << $866 >>> 15) | 0; //@line 9467
          $$0296$i$i = $$0287$i$i >>> ($871 + 7 | 0) & 1 | $871 << 1; //@line 9473
         }
        } while (0);
        $877 = 23460 + ($$0296$i$i << 2) | 0; //@line 9476
        HEAP32[$722 + 28 >> 2] = $$0296$i$i; //@line 9478
        $879 = $722 + 16 | 0; //@line 9479
        HEAP32[$879 + 4 >> 2] = 0; //@line 9481
        HEAP32[$879 >> 2] = 0; //@line 9482
        $881 = HEAP32[5790] | 0; //@line 9483
        $882 = 1 << $$0296$i$i; //@line 9484
        if (!($881 & $882)) {
         HEAP32[5790] = $881 | $882; //@line 9489
         HEAP32[$877 >> 2] = $722; //@line 9490
         HEAP32[$722 + 24 >> 2] = $877; //@line 9492
         HEAP32[$722 + 12 >> 2] = $722; //@line 9494
         HEAP32[$722 + 8 >> 2] = $722; //@line 9496
         break;
        }
        $$0288$i$i = $$0287$i$i << (($$0296$i$i | 0) == 31 ? 0 : 25 - ($$0296$i$i >>> 1) | 0); //@line 9505
        $$0289$i$i = HEAP32[$877 >> 2] | 0; //@line 9505
        while (1) {
         if ((HEAP32[$$0289$i$i + 4 >> 2] & -8 | 0) == ($$0287$i$i | 0)) {
          label = 263; //@line 9512
          break;
         }
         $900 = $$0289$i$i + 16 + ($$0288$i$i >>> 31 << 2) | 0; //@line 9516
         $902 = HEAP32[$900 >> 2] | 0; //@line 9518
         if (!$902) {
          label = 260; //@line 9521
          break;
         } else {
          $$0288$i$i = $$0288$i$i << 1; //@line 9524
          $$0289$i$i = $902; //@line 9524
         }
        }
        if ((label | 0) == 260) {
         if ((HEAP32[5793] | 0) >>> 0 > $900 >>> 0) {
          _abort(); //@line 9531
         } else {
          HEAP32[$900 >> 2] = $722; //@line 9534
          HEAP32[$722 + 24 >> 2] = $$0289$i$i; //@line 9536
          HEAP32[$722 + 12 >> 2] = $722; //@line 9538
          HEAP32[$722 + 8 >> 2] = $722; //@line 9540
          break;
         }
        } else if ((label | 0) == 263) {
         $909 = $$0289$i$i + 8 | 0; //@line 9545
         $910 = HEAP32[$909 >> 2] | 0; //@line 9546
         $911 = HEAP32[5793] | 0; //@line 9547
         if ($911 >>> 0 <= $910 >>> 0 & $911 >>> 0 <= $$0289$i$i >>> 0) {
          HEAP32[$910 + 12 >> 2] = $722; //@line 9553
          HEAP32[$909 >> 2] = $722; //@line 9554
          HEAP32[$722 + 8 >> 2] = $910; //@line 9556
          HEAP32[$722 + 12 >> 2] = $$0289$i$i; //@line 9558
          HEAP32[$722 + 24 >> 2] = 0; //@line 9560
          break;
         } else {
          _abort(); //@line 9563
         }
        }
       }
      } while (0);
      $$0 = $710 + 8 | 0; //@line 9570
      STACKTOP = sp; //@line 9571
      return $$0 | 0; //@line 9571
     } else {
      $$0$i$i$i = 23604; //@line 9573
     }
    }
    while (1) {
     $919 = HEAP32[$$0$i$i$i >> 2] | 0; //@line 9577
     if ($919 >>> 0 <= $636 >>> 0) {
      $923 = $919 + (HEAP32[$$0$i$i$i + 4 >> 2] | 0) | 0; //@line 9582
      if ($923 >>> 0 > $636 >>> 0) {
       break;
      }
     }
     $$0$i$i$i = HEAP32[$$0$i$i$i + 8 >> 2] | 0; //@line 9590
    }
    $927 = $923 + -47 | 0; //@line 9592
    $929 = $927 + 8 | 0; //@line 9594
    $935 = $927 + (($929 & 7 | 0) == 0 ? 0 : 0 - $929 & 7) | 0; //@line 9600
    $936 = $636 + 16 | 0; //@line 9601
    $938 = $935 >>> 0 < $936 >>> 0 ? $636 : $935; //@line 9603
    $939 = $938 + 8 | 0; //@line 9604
    $940 = $938 + 24 | 0; //@line 9605
    $941 = $$723947$i + -40 | 0; //@line 9606
    $943 = $$748$i + 8 | 0; //@line 9608
    $948 = ($943 & 7 | 0) == 0 ? 0 : 0 - $943 & 7; //@line 9613
    $949 = $$748$i + $948 | 0; //@line 9614
    $950 = $941 - $948 | 0; //@line 9615
    HEAP32[5795] = $949; //@line 9616
    HEAP32[5792] = $950; //@line 9617
    HEAP32[$949 + 4 >> 2] = $950 | 1; //@line 9620
    HEAP32[$$748$i + $941 + 4 >> 2] = 40; //@line 9623
    HEAP32[5796] = HEAP32[5911]; //@line 9625
    $956 = $938 + 4 | 0; //@line 9626
    HEAP32[$956 >> 2] = 27; //@line 9627
    HEAP32[$939 >> 2] = HEAP32[5901]; //@line 9628
    HEAP32[$939 + 4 >> 2] = HEAP32[5902]; //@line 9628
    HEAP32[$939 + 8 >> 2] = HEAP32[5903]; //@line 9628
    HEAP32[$939 + 12 >> 2] = HEAP32[5904]; //@line 9628
    HEAP32[5901] = $$748$i; //@line 9629
    HEAP32[5902] = $$723947$i; //@line 9630
    HEAP32[5904] = 0; //@line 9631
    HEAP32[5903] = $939; //@line 9632
    $958 = $940; //@line 9633
    do {
     $958$looptemp = $958;
     $958 = $958 + 4 | 0; //@line 9635
     HEAP32[$958 >> 2] = 7; //@line 9636
    } while (($958$looptemp + 8 | 0) >>> 0 < $923 >>> 0);
    if (($938 | 0) != ($636 | 0)) {
     $964 = $938 - $636 | 0; //@line 9649
     HEAP32[$956 >> 2] = HEAP32[$956 >> 2] & -2; //@line 9652
     HEAP32[$636 + 4 >> 2] = $964 | 1; //@line 9655
     HEAP32[$938 >> 2] = $964; //@line 9656
     $969 = $964 >>> 3; //@line 9657
     if ($964 >>> 0 < 256) {
      $972 = 23196 + ($969 << 1 << 2) | 0; //@line 9661
      $973 = HEAP32[5789] | 0; //@line 9662
      $974 = 1 << $969; //@line 9663
      if (!($973 & $974)) {
       HEAP32[5789] = $973 | $974; //@line 9668
       $$0211$i$i = $972; //@line 9670
       $$pre$phi$i$iZ2D = $972 + 8 | 0; //@line 9670
      } else {
       $978 = $972 + 8 | 0; //@line 9672
       $979 = HEAP32[$978 >> 2] | 0; //@line 9673
       if ((HEAP32[5793] | 0) >>> 0 > $979 >>> 0) {
        _abort(); //@line 9677
       } else {
        $$0211$i$i = $979; //@line 9680
        $$pre$phi$i$iZ2D = $978; //@line 9680
       }
      }
      HEAP32[$$pre$phi$i$iZ2D >> 2] = $636; //@line 9683
      HEAP32[$$0211$i$i + 12 >> 2] = $636; //@line 9685
      HEAP32[$636 + 8 >> 2] = $$0211$i$i; //@line 9687
      HEAP32[$636 + 12 >> 2] = $972; //@line 9689
      break;
     }
     $985 = $964 >>> 8; //@line 9692
     if (!$985) {
      $$0212$i$i = 0; //@line 9695
     } else {
      if ($964 >>> 0 > 16777215) {
       $$0212$i$i = 31; //@line 9699
      } else {
       $990 = ($985 + 1048320 | 0) >>> 16 & 8; //@line 9703
       $991 = $985 << $990; //@line 9704
       $994 = ($991 + 520192 | 0) >>> 16 & 4; //@line 9707
       $996 = $991 << $994; //@line 9709
       $999 = ($996 + 245760 | 0) >>> 16 & 2; //@line 9712
       $1004 = 14 - ($994 | $990 | $999) + ($996 << $999 >>> 15) | 0; //@line 9717
       $$0212$i$i = $964 >>> ($1004 + 7 | 0) & 1 | $1004 << 1; //@line 9723
      }
     }
     $1010 = 23460 + ($$0212$i$i << 2) | 0; //@line 9726
     HEAP32[$636 + 28 >> 2] = $$0212$i$i; //@line 9728
     HEAP32[$636 + 20 >> 2] = 0; //@line 9730
     HEAP32[$936 >> 2] = 0; //@line 9731
     $1013 = HEAP32[5790] | 0; //@line 9732
     $1014 = 1 << $$0212$i$i; //@line 9733
     if (!($1013 & $1014)) {
      HEAP32[5790] = $1013 | $1014; //@line 9738
      HEAP32[$1010 >> 2] = $636; //@line 9739
      HEAP32[$636 + 24 >> 2] = $1010; //@line 9741
      HEAP32[$636 + 12 >> 2] = $636; //@line 9743
      HEAP32[$636 + 8 >> 2] = $636; //@line 9745
      break;
     }
     $$0206$i$i = $964 << (($$0212$i$i | 0) == 31 ? 0 : 25 - ($$0212$i$i >>> 1) | 0); //@line 9754
     $$0207$i$i = HEAP32[$1010 >> 2] | 0; //@line 9754
     while (1) {
      if ((HEAP32[$$0207$i$i + 4 >> 2] & -8 | 0) == ($964 | 0)) {
       label = 289; //@line 9761
       break;
      }
      $1032 = $$0207$i$i + 16 + ($$0206$i$i >>> 31 << 2) | 0; //@line 9765
      $1034 = HEAP32[$1032 >> 2] | 0; //@line 9767
      if (!$1034) {
       label = 286; //@line 9770
       break;
      } else {
       $$0206$i$i = $$0206$i$i << 1; //@line 9773
       $$0207$i$i = $1034; //@line 9773
      }
     }
     if ((label | 0) == 286) {
      if ((HEAP32[5793] | 0) >>> 0 > $1032 >>> 0) {
       _abort(); //@line 9780
      } else {
       HEAP32[$1032 >> 2] = $636; //@line 9783
       HEAP32[$636 + 24 >> 2] = $$0207$i$i; //@line 9785
       HEAP32[$636 + 12 >> 2] = $636; //@line 9787
       HEAP32[$636 + 8 >> 2] = $636; //@line 9789
       break;
      }
     } else if ((label | 0) == 289) {
      $1041 = $$0207$i$i + 8 | 0; //@line 9794
      $1042 = HEAP32[$1041 >> 2] | 0; //@line 9795
      $1043 = HEAP32[5793] | 0; //@line 9796
      if ($1043 >>> 0 <= $1042 >>> 0 & $1043 >>> 0 <= $$0207$i$i >>> 0) {
       HEAP32[$1042 + 12 >> 2] = $636; //@line 9802
       HEAP32[$1041 >> 2] = $636; //@line 9803
       HEAP32[$636 + 8 >> 2] = $1042; //@line 9805
       HEAP32[$636 + 12 >> 2] = $$0207$i$i; //@line 9807
       HEAP32[$636 + 24 >> 2] = 0; //@line 9809
       break;
      } else {
       _abort(); //@line 9812
      }
     }
    }
   }
  } while (0);
  $1052 = HEAP32[5792] | 0; //@line 9819
  if ($1052 >>> 0 > $$0197 >>> 0) {
   $1054 = $1052 - $$0197 | 0; //@line 9822
   HEAP32[5792] = $1054; //@line 9823
   $1055 = HEAP32[5795] | 0; //@line 9824
   $1056 = $1055 + $$0197 | 0; //@line 9825
   HEAP32[5795] = $1056; //@line 9826
   HEAP32[$1056 + 4 >> 2] = $1054 | 1; //@line 9829
   HEAP32[$1055 + 4 >> 2] = $$0197 | 3; //@line 9832
   $$0 = $1055 + 8 | 0; //@line 9834
   STACKTOP = sp; //@line 9835
   return $$0 | 0; //@line 9835
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 9839
 $$0 = 0; //@line 9840
 STACKTOP = sp; //@line 9841
 return $$0 | 0; //@line 9841
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_138($0) {
 $0 = $0 | 0;
 var $$0174 = 0, $$0174235 = 0, $$0174236 = 0, $$1169 = 0, $$1171 = 0, $$1173 = 0, $$1175 = 0, $$byval_copy = 0, $$byval_copy48 = 0, $$byval_copy49 = 0, $$byval_copy50 = 0, $$sink233 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $108 = 0, $111 = 0, $113 = 0, $114 = 0, $118 = 0, $120 = 0, $121 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $146 = 0, $153 = 0, $16 = 0, $161 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $176 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $2 = 0, $20 = 0, $200 = 0, $215 = 0, $22 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $230 = 0, $233 = 0, $235 = 0, $236 = 0, $238 = 0, $24 = 0, $240 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $26 = 0, $274 = 0, $275 = 0, $276 = 0, $278 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $324 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $38 = 0, $380 = 0, $385 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $4 = 0, $40 = 0, $400 = 0, $403 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $412 = 0, $414 = 0, $415 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $66 = 0, $68 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $87 = 0, $88 = 0, $93 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx24 = 0, $ReallocAsyncCtx25 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $sext = 0, $trunc = 0, sp = 0;
 sp = STACKTOP; //@line 29149
 STACKTOP = STACKTOP + 32 | 0; //@line 29150
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 29150
 $$byval_copy50 = sp + 24 | 0; //@line 29151
 $$byval_copy49 = sp + 16 | 0; //@line 29152
 $$byval_copy48 = sp + 8 | 0; //@line 29153
 $$byval_copy = sp; //@line 29154
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29156
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29158
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29160
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29162
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29164
 $14 = HEAP8[$0 + 28 >> 0] | 0; //@line 29168
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29170
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29172
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 29174
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 29176
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 29178
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 29180
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 29182
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 29184
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 29186
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 29188
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 29190
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 29192
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 29194
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 29198
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 29200
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 29202
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 29204
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 29206
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 29208
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 29210
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 29212
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 29214
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 29216
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 29220
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 29222
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 29226
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 29228
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 29230
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 29232
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 29234
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 29236
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 29238
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 29240
 $87 = HEAP8[$4 >> 0] | 0; //@line 29241
 $trunc = ($87 & 255) >>> 5; //@line 29242
 switch ($trunc & 7) {
 case 1:
  {
   $88 = $8 + 372 | 0; //@line 29246
   if (!(HEAP8[$88 >> 0] | 0)) {
    $118 = $8 + 908 | 0; //@line 29253
    $120 = $8 + 638 | 0; //@line 29255
    $121 = $8 + 639 | 0; //@line 29256
    if (__Z18decrypt_join_framePKhtS0_Ph($4 + 1 | 0, $40 + 65535 & 65535, HEAP32[$118 >> 2] | 0, $121) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($38) | 0) + 4 >> 2] = 13; //@line 29262
     STACKTOP = sp; //@line 29263
     return;
    }
    HEAP8[$120 >> 0] = $87; //@line 29265
    $126 = $40 + -4 | 0; //@line 29266
    $128 = HEAP32[$118 >> 2] | 0; //@line 29268
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(64) | 0; //@line 29269
    $129 = __Z22compute_join_frame_micPKhtS0_Pj($120, $126 & 65535, $128, $24) | 0; //@line 29270
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 308; //@line 29273
     $130 = $ReallocAsyncCtx4 + 4 | 0; //@line 29274
     HEAP32[$130 >> 2] = $8; //@line 29275
     $131 = $ReallocAsyncCtx4 + 8 | 0; //@line 29276
     HEAP32[$131 >> 2] = $126; //@line 29277
     $132 = $ReallocAsyncCtx4 + 12 | 0; //@line 29278
     HEAP32[$132 >> 2] = $40; //@line 29279
     $133 = $ReallocAsyncCtx4 + 16 | 0; //@line 29280
     HEAP32[$133 >> 2] = $24; //@line 29281
     $134 = $ReallocAsyncCtx4 + 20 | 0; //@line 29282
     HEAP32[$134 >> 2] = $38; //@line 29283
     $135 = $ReallocAsyncCtx4 + 24 | 0; //@line 29284
     HEAP32[$135 >> 2] = $58; //@line 29285
     $136 = $ReallocAsyncCtx4 + 28 | 0; //@line 29286
     HEAP32[$136 >> 2] = $78; //@line 29287
     $137 = $ReallocAsyncCtx4 + 32 | 0; //@line 29288
     HEAP32[$137 >> 2] = $118; //@line 29289
     $138 = $ReallocAsyncCtx4 + 36 | 0; //@line 29290
     HEAP32[$138 >> 2] = $121; //@line 29291
     $139 = $ReallocAsyncCtx4 + 40 | 0; //@line 29292
     HEAP32[$139 >> 2] = $54; //@line 29293
     $140 = $ReallocAsyncCtx4 + 44 | 0; //@line 29294
     HEAP32[$140 >> 2] = $76; //@line 29295
     $141 = $ReallocAsyncCtx4 + 48 | 0; //@line 29296
     HEAP32[$141 >> 2] = $50; //@line 29297
     $142 = $ReallocAsyncCtx4 + 52 | 0; //@line 29298
     HEAP32[$142 >> 2] = $6; //@line 29299
     $143 = $ReallocAsyncCtx4 + 56 | 0; //@line 29300
     HEAP32[$143 >> 2] = $84; //@line 29301
     $144 = $ReallocAsyncCtx4 + 60 | 0; //@line 29302
     HEAP32[$144 >> 2] = $88; //@line 29303
     sp = STACKTOP; //@line 29304
     STACKTOP = sp; //@line 29305
     return;
    }
    HEAP32[___async_retval >> 2] = $129; //@line 29308
    ___async_unwind = 0; //@line 29309
    HEAP32[$ReallocAsyncCtx4 >> 2] = 308; //@line 29310
    $130 = $ReallocAsyncCtx4 + 4 | 0; //@line 29311
    HEAP32[$130 >> 2] = $8; //@line 29312
    $131 = $ReallocAsyncCtx4 + 8 | 0; //@line 29313
    HEAP32[$131 >> 2] = $126; //@line 29314
    $132 = $ReallocAsyncCtx4 + 12 | 0; //@line 29315
    HEAP32[$132 >> 2] = $40; //@line 29316
    $133 = $ReallocAsyncCtx4 + 16 | 0; //@line 29317
    HEAP32[$133 >> 2] = $24; //@line 29318
    $134 = $ReallocAsyncCtx4 + 20 | 0; //@line 29319
    HEAP32[$134 >> 2] = $38; //@line 29320
    $135 = $ReallocAsyncCtx4 + 24 | 0; //@line 29321
    HEAP32[$135 >> 2] = $58; //@line 29322
    $136 = $ReallocAsyncCtx4 + 28 | 0; //@line 29323
    HEAP32[$136 >> 2] = $78; //@line 29324
    $137 = $ReallocAsyncCtx4 + 32 | 0; //@line 29325
    HEAP32[$137 >> 2] = $118; //@line 29326
    $138 = $ReallocAsyncCtx4 + 36 | 0; //@line 29327
    HEAP32[$138 >> 2] = $121; //@line 29328
    $139 = $ReallocAsyncCtx4 + 40 | 0; //@line 29329
    HEAP32[$139 >> 2] = $54; //@line 29330
    $140 = $ReallocAsyncCtx4 + 44 | 0; //@line 29331
    HEAP32[$140 >> 2] = $76; //@line 29332
    $141 = $ReallocAsyncCtx4 + 48 | 0; //@line 29333
    HEAP32[$141 >> 2] = $50; //@line 29334
    $142 = $ReallocAsyncCtx4 + 52 | 0; //@line 29335
    HEAP32[$142 >> 2] = $6; //@line 29336
    $143 = $ReallocAsyncCtx4 + 56 | 0; //@line 29337
    HEAP32[$143 >> 2] = $84; //@line 29338
    $144 = $ReallocAsyncCtx4 + 60 | 0; //@line 29339
    HEAP32[$144 >> 2] = $88; //@line 29340
    sp = STACKTOP; //@line 29341
    STACKTOP = sp; //@line 29342
    return;
   }
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($38) | 0) + 4 >> 2] = 1; //@line 29346
   _mbed_tracef(16, 13704, 13843, $68); //@line 29347
   $93 = $8 + 968 | 0; //@line 29348
   HEAP32[$93 >> 2] = HEAP32[$93 >> 2] | 64; //@line 29351
   if (!(HEAP8[$8 + 373 >> 0] | 0)) {
    $108 = $8 + 944 | 0; //@line 29356
    HEAP8[$108 >> 0] = HEAP8[$108 >> 0] | 34; //@line 29359
    $111 = HEAP32[$50 >> 2] | 0; //@line 29360
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 29362
    __ZN18LoRaWANTimeHandler5startER13timer_event_tj($111, $8 + 996 | 0, 1); //@line 29363
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 307; //@line 29366
     $113 = $ReallocAsyncCtx13 + 4 | 0; //@line 29367
     HEAP32[$113 >> 2] = $58; //@line 29368
     $114 = $ReallocAsyncCtx13 + 8 | 0; //@line 29369
     HEAP32[$114 >> 2] = $78; //@line 29370
     sp = STACKTOP; //@line 29371
     STACKTOP = sp; //@line 29372
     return;
    }
    ___async_unwind = 0; //@line 29374
    HEAP32[$ReallocAsyncCtx13 >> 2] = 307; //@line 29375
    $113 = $ReallocAsyncCtx13 + 4 | 0; //@line 29376
    HEAP32[$113 >> 2] = $58; //@line 29377
    $114 = $ReallocAsyncCtx13 + 8 | 0; //@line 29378
    HEAP32[$114 >> 2] = $78; //@line 29379
    sp = STACKTOP; //@line 29380
    STACKTOP = sp; //@line 29381
    return;
   } else {
    $100 = HEAP32[$8 + 1328 >> 2] | 0; //@line 29384
    HEAP32[$16 >> 2] = 304; //@line 29385
    HEAP32[$16 + 4 >> 2] = 0; //@line 29387
    $ReallocAsyncCtx25 = _emscripten_realloc_async_context(24) | 0; //@line 29388
    HEAP32[$$byval_copy >> 2] = HEAP32[$16 >> 2]; //@line 29389
    HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$16 + 4 >> 2]; //@line 29389
    $101 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($100, $8, $$byval_copy) | 0; //@line 29390
    if (___async) {
     HEAP32[$ReallocAsyncCtx25 >> 2] = 305; //@line 29393
     $102 = $ReallocAsyncCtx25 + 4 | 0; //@line 29394
     HEAP32[$102 >> 2] = $16; //@line 29395
     $103 = $ReallocAsyncCtx25 + 8 | 0; //@line 29396
     HEAP32[$103 >> 2] = $8; //@line 29397
     $104 = $ReallocAsyncCtx25 + 12 | 0; //@line 29398
     HEAP32[$104 >> 2] = $50; //@line 29399
     $105 = $ReallocAsyncCtx25 + 16 | 0; //@line 29400
     HEAP32[$105 >> 2] = $58; //@line 29401
     $106 = $ReallocAsyncCtx25 + 20 | 0; //@line 29402
     HEAP32[$106 >> 2] = $78; //@line 29403
     sp = STACKTOP; //@line 29404
     STACKTOP = sp; //@line 29405
     return;
    }
    HEAP32[___async_retval >> 2] = $101; //@line 29408
    ___async_unwind = 0; //@line 29409
    HEAP32[$ReallocAsyncCtx25 >> 2] = 305; //@line 29410
    $102 = $ReallocAsyncCtx25 + 4 | 0; //@line 29411
    HEAP32[$102 >> 2] = $16; //@line 29412
    $103 = $ReallocAsyncCtx25 + 8 | 0; //@line 29413
    HEAP32[$103 >> 2] = $8; //@line 29414
    $104 = $ReallocAsyncCtx25 + 12 | 0; //@line 29415
    HEAP32[$104 >> 2] = $50; //@line 29416
    $105 = $ReallocAsyncCtx25 + 16 | 0; //@line 29417
    HEAP32[$105 >> 2] = $58; //@line 29418
    $106 = $ReallocAsyncCtx25 + 20 | 0; //@line 29419
    HEAP32[$106 >> 2] = $78; //@line 29420
    sp = STACKTOP; //@line 29421
    STACKTOP = sp; //@line 29422
    return;
   }
   break;
  }
 case 3:
 case 5:
  {
   $146 = HEAP32[$84 >> 2] | 0; //@line 29427
   $153 = __ZN7LoRaPHY15get_max_payloadEhb($146, HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($38) | 0) + 10 >> 0] | 0, (HEAP8[$8 + 369 >> 0] | 0) != 0) | 0; //@line 29434
   $sext = ($40 << 16) + -851968 | 0; //@line 29436
   if (((($sext | 0) < 0 ? 0 : $sext >> 16) | 0) > ($153 & 255 | 0)) {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($38) | 0) + 4 >> 2] = 1; //@line 29445
    _mbed_tracef(16, 13704, 13843, $60); //@line 29446
    $161 = $8 + 968 | 0; //@line 29447
    HEAP32[$161 >> 2] = HEAP32[$161 >> 2] | 64; //@line 29450
    if (!(HEAP8[$8 + 373 >> 0] | 0)) {
     $176 = $8 + 944 | 0; //@line 29455
     HEAP8[$176 >> 0] = HEAP8[$176 >> 0] | 34; //@line 29458
     $179 = HEAP32[$50 >> 2] | 0; //@line 29459
     $ReallocAsyncCtx12 = _emscripten_realloc_async_context(12) | 0; //@line 29461
     __ZN18LoRaWANTimeHandler5startER13timer_event_tj($179, $8 + 996 | 0, 1); //@line 29462
     if (___async) {
      HEAP32[$ReallocAsyncCtx12 >> 2] = 312; //@line 29465
      $181 = $ReallocAsyncCtx12 + 4 | 0; //@line 29466
      HEAP32[$181 >> 2] = $58; //@line 29467
      $182 = $ReallocAsyncCtx12 + 8 | 0; //@line 29468
      HEAP32[$182 >> 2] = $78; //@line 29469
      sp = STACKTOP; //@line 29470
      STACKTOP = sp; //@line 29471
      return;
     }
     ___async_unwind = 0; //@line 29473
     HEAP32[$ReallocAsyncCtx12 >> 2] = 312; //@line 29474
     $181 = $ReallocAsyncCtx12 + 4 | 0; //@line 29475
     HEAP32[$181 >> 2] = $58; //@line 29476
     $182 = $ReallocAsyncCtx12 + 8 | 0; //@line 29477
     HEAP32[$182 >> 2] = $78; //@line 29478
     sp = STACKTOP; //@line 29479
     STACKTOP = sp; //@line 29480
     return;
    } else {
     $168 = HEAP32[$8 + 1328 >> 2] | 0; //@line 29483
     HEAP32[$72 >> 2] = 304; //@line 29484
     HEAP32[$72 + 4 >> 2] = 0; //@line 29486
     $ReallocAsyncCtx24 = _emscripten_realloc_async_context(24) | 0; //@line 29487
     HEAP32[$$byval_copy48 >> 2] = HEAP32[$72 >> 2]; //@line 29488
     HEAP32[$$byval_copy48 + 4 >> 2] = HEAP32[$72 + 4 >> 2]; //@line 29488
     $169 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($168, $8, $$byval_copy48) | 0; //@line 29489
     if (___async) {
      HEAP32[$ReallocAsyncCtx24 >> 2] = 310; //@line 29492
      $170 = $ReallocAsyncCtx24 + 4 | 0; //@line 29493
      HEAP32[$170 >> 2] = $72; //@line 29494
      $171 = $ReallocAsyncCtx24 + 8 | 0; //@line 29495
      HEAP32[$171 >> 2] = $8; //@line 29496
      $172 = $ReallocAsyncCtx24 + 12 | 0; //@line 29497
      HEAP32[$172 >> 2] = $50; //@line 29498
      $173 = $ReallocAsyncCtx24 + 16 | 0; //@line 29499
      HEAP32[$173 >> 2] = $58; //@line 29500
      $174 = $ReallocAsyncCtx24 + 20 | 0; //@line 29501
      HEAP32[$174 >> 2] = $78; //@line 29502
      sp = STACKTOP; //@line 29503
      STACKTOP = sp; //@line 29504
      return;
     }
     HEAP32[___async_retval >> 2] = $169; //@line 29507
     ___async_unwind = 0; //@line 29508
     HEAP32[$ReallocAsyncCtx24 >> 2] = 310; //@line 29509
     $170 = $ReallocAsyncCtx24 + 4 | 0; //@line 29510
     HEAP32[$170 >> 2] = $72; //@line 29511
     $171 = $ReallocAsyncCtx24 + 8 | 0; //@line 29512
     HEAP32[$171 >> 2] = $8; //@line 29513
     $172 = $ReallocAsyncCtx24 + 12 | 0; //@line 29514
     HEAP32[$172 >> 2] = $50; //@line 29515
     $173 = $ReallocAsyncCtx24 + 16 | 0; //@line 29516
     HEAP32[$173 >> 2] = $58; //@line 29517
     $174 = $ReallocAsyncCtx24 + 20 | 0; //@line 29518
     HEAP32[$174 >> 2] = $78; //@line 29519
     sp = STACKTOP; //@line 29520
     STACKTOP = sp; //@line 29521
     return;
    }
   }
   $200 = HEAPU8[$4 + 2 >> 0] << 8 | HEAPU8[$4 + 1 >> 0] | HEAPU8[$4 + 3 >> 0] << 16 | HEAPU8[$4 + 4 >> 0] << 24; //@line 29541
   L53 : do {
    if (($200 | 0) == (HEAP32[$8 + 952 >> 2] | 0)) {
     $$1169 = 0; //@line 29548
     $$1171 = $76; //@line 29548
     $$1173 = $54; //@line 29548
     $$1175 = 0; //@line 29548
     $$sink233 = $8 + 960 | 0; //@line 29548
    } else {
     $$0174235 = HEAP32[$8 + 1208 >> 2] | 0; //@line 29551
     L56 : do {
      if ($$0174235 | 0) {
       $$0174236 = $$0174235; //@line 29555
       while (1) {
        if (($200 | 0) == (HEAP32[$$0174236 >> 2] | 0)) {
         break;
        }
        $$0174 = HEAP32[$$0174236 + 40 >> 2] | 0; //@line 29563
        if (!$$0174) {
         break L56;
        } else {
         $$0174236 = $$0174; //@line 29568
        }
       }
       $$1169 = 1; //@line 29574
       $$1171 = $$0174236 + 20 | 0; //@line 29574
       $$1173 = $$0174236 + 4 | 0; //@line 29574
       $$1175 = $$0174236; //@line 29574
       $$sink233 = $$0174236 + 36 | 0; //@line 29574
       break L53;
      }
     } while (0);
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($38) | 0) + 4 >> 2] = 11; //@line 29580
     _mbed_tracef(16, 13704, 13843, $2); //@line 29581
     $215 = $8 + 968 | 0; //@line 29582
     HEAP32[$215 >> 2] = HEAP32[$215 >> 2] | 64; //@line 29585
     if (!(HEAP8[$8 + 373 >> 0] | 0)) {
      $230 = $8 + 944 | 0; //@line 29590
      HEAP8[$230 >> 0] = HEAP8[$230 >> 0] | 34; //@line 29593
      $233 = HEAP32[$50 >> 2] | 0; //@line 29594
      $ReallocAsyncCtx11 = _emscripten_realloc_async_context(12) | 0; //@line 29596
      __ZN18LoRaWANTimeHandler5startER13timer_event_tj($233, $8 + 996 | 0, 1); //@line 29597
      if (___async) {
       HEAP32[$ReallocAsyncCtx11 >> 2] = 315; //@line 29600
       $235 = $ReallocAsyncCtx11 + 4 | 0; //@line 29601
       HEAP32[$235 >> 2] = $58; //@line 29602
       $236 = $ReallocAsyncCtx11 + 8 | 0; //@line 29603
       HEAP32[$236 >> 2] = $78; //@line 29604
       sp = STACKTOP; //@line 29605
       STACKTOP = sp; //@line 29606
       return;
      }
      ___async_unwind = 0; //@line 29608
      HEAP32[$ReallocAsyncCtx11 >> 2] = 315; //@line 29609
      $235 = $ReallocAsyncCtx11 + 4 | 0; //@line 29610
      HEAP32[$235 >> 2] = $58; //@line 29611
      $236 = $ReallocAsyncCtx11 + 8 | 0; //@line 29612
      HEAP32[$236 >> 2] = $78; //@line 29613
      sp = STACKTOP; //@line 29614
      STACKTOP = sp; //@line 29615
      return;
     } else {
      $222 = HEAP32[$8 + 1328 >> 2] | 0; //@line 29618
      HEAP32[$66 >> 2] = 304; //@line 29619
      HEAP32[$66 + 4 >> 2] = 0; //@line 29621
      $ReallocAsyncCtx23 = _emscripten_realloc_async_context(24) | 0; //@line 29622
      HEAP32[$$byval_copy49 >> 2] = HEAP32[$66 >> 2]; //@line 29623
      HEAP32[$$byval_copy49 + 4 >> 2] = HEAP32[$66 + 4 >> 2]; //@line 29623
      $223 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($222, $8, $$byval_copy49) | 0; //@line 29624
      if (___async) {
       HEAP32[$ReallocAsyncCtx23 >> 2] = 313; //@line 29627
       $224 = $ReallocAsyncCtx23 + 4 | 0; //@line 29628
       HEAP32[$224 >> 2] = $66; //@line 29629
       $225 = $ReallocAsyncCtx23 + 8 | 0; //@line 29630
       HEAP32[$225 >> 2] = $8; //@line 29631
       $226 = $ReallocAsyncCtx23 + 12 | 0; //@line 29632
       HEAP32[$226 >> 2] = $50; //@line 29633
       $227 = $ReallocAsyncCtx23 + 16 | 0; //@line 29634
       HEAP32[$227 >> 2] = $58; //@line 29635
       $228 = $ReallocAsyncCtx23 + 20 | 0; //@line 29636
       HEAP32[$228 >> 2] = $78; //@line 29637
       sp = STACKTOP; //@line 29638
       STACKTOP = sp; //@line 29639
       return;
      }
      HEAP32[___async_retval >> 2] = $223; //@line 29642
      ___async_unwind = 0; //@line 29643
      HEAP32[$ReallocAsyncCtx23 >> 2] = 313; //@line 29644
      $224 = $ReallocAsyncCtx23 + 4 | 0; //@line 29645
      HEAP32[$224 >> 2] = $66; //@line 29646
      $225 = $ReallocAsyncCtx23 + 8 | 0; //@line 29647
      HEAP32[$225 >> 2] = $8; //@line 29648
      $226 = $ReallocAsyncCtx23 + 12 | 0; //@line 29649
      HEAP32[$226 >> 2] = $50; //@line 29650
      $227 = $ReallocAsyncCtx23 + 16 | 0; //@line 29651
      HEAP32[$227 >> 2] = $58; //@line 29652
      $228 = $ReallocAsyncCtx23 + 20 | 0; //@line 29653
      HEAP32[$228 >> 2] = $78; //@line 29654
      sp = STACKTOP; //@line 29655
      STACKTOP = sp; //@line 29656
      return;
     }
    }
   } while (0);
   $238 = HEAP32[$$sink233 >> 2] | 0; //@line 29660
   $240 = HEAP8[$4 + 5 >> 0] | 0; //@line 29662
   $249 = $240 & 15; //@line 29671
   $250 = $249 & 255; //@line 29672
   $251 = $250 + 8 | 0; //@line 29673
   $252 = $251 & 255; //@line 29674
   $253 = $40 + -4 | 0; //@line 29675
   $274 = HEAPU8[$4 + ($40 + -3) >> 0] << 8 | HEAPU8[$4 + $253 >> 0] | HEAPU8[$4 + ($40 + -2) >> 0] << 16 | HEAPU8[$4 + ($40 + -1) >> 0] << 24; //@line 29696
   $275 = (HEAPU8[$4 + 7 >> 0] << 8 | HEAPU8[$4 + 6 >> 0]) - $238 | 0; //@line 29697
   $276 = $275 & 65535; //@line 29698
   if ($276 >>> 0 < 32768) {
    $278 = $276 + $238 | 0; //@line 29701
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(172) | 0; //@line 29703
    __Z11compute_micPKhtS0_jhjPj($4, $253 & 65535, $$1173, $200, 1, $278, $24) | 0; //@line 29704
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 316; //@line 29707
     $280 = $ReallocAsyncCtx3 + 4 | 0; //@line 29708
     HEAP32[$280 >> 2] = $4; //@line 29709
     $281 = $ReallocAsyncCtx3 + 8 | 0; //@line 29710
     HEAP32[$281 >> 2] = $$1173; //@line 29711
     $282 = $ReallocAsyncCtx3 + 12 | 0; //@line 29712
     HEAP32[$282 >> 2] = $8; //@line 29713
     $283 = $ReallocAsyncCtx3 + 16 | 0; //@line 29714
     HEAP32[$283 >> 2] = $10; //@line 29715
     $284 = $ReallocAsyncCtx3 + 20 | 0; //@line 29716
     HEAP8[$284 >> 0] = $14; //@line 29717
     $285 = $ReallocAsyncCtx3 + 24 | 0; //@line 29718
     HEAP32[$285 >> 2] = $$1171; //@line 29719
     $286 = $ReallocAsyncCtx3 + 28 | 0; //@line 29720
     HEAP32[$286 >> 2] = $253; //@line 29721
     $287 = $ReallocAsyncCtx3 + 32 | 0; //@line 29722
     HEAP8[$287 >> 0] = $240; //@line 29723
     $288 = $ReallocAsyncCtx3 + 36 | 0; //@line 29724
     HEAP32[$288 >> 2] = $18; //@line 29725
     $289 = $ReallocAsyncCtx3 + 40 | 0; //@line 29726
     HEAP32[$289 >> 2] = $20; //@line 29727
     $290 = $ReallocAsyncCtx3 + 44 | 0; //@line 29728
     HEAP32[$290 >> 2] = $22; //@line 29729
     $291 = $ReallocAsyncCtx3 + 48 | 0; //@line 29730
     HEAP32[$291 >> 2] = $24; //@line 29731
     $292 = $ReallocAsyncCtx3 + 52 | 0; //@line 29732
     HEAP32[$292 >> 2] = $26; //@line 29733
     $293 = $ReallocAsyncCtx3 + 56 | 0; //@line 29734
     HEAP32[$293 >> 2] = $$1175; //@line 29735
     $294 = $ReallocAsyncCtx3 + 60 | 0; //@line 29736
     HEAP8[$294 >> 0] = $trunc; //@line 29737
     $295 = $ReallocAsyncCtx3 + 64 | 0; //@line 29738
     HEAP32[$295 >> 2] = $28; //@line 29739
     $296 = $ReallocAsyncCtx3 + 68 | 0; //@line 29740
     HEAP32[$296 >> 2] = $30; //@line 29741
     $297 = $ReallocAsyncCtx3 + 72 | 0; //@line 29742
     HEAP32[$297 >> 2] = $34; //@line 29743
     $298 = $ReallocAsyncCtx3 + 76 | 0; //@line 29744
     HEAP32[$298 >> 2] = $36; //@line 29745
     $299 = $ReallocAsyncCtx3 + 80 | 0; //@line 29746
     HEAP32[$299 >> 2] = $38; //@line 29747
     $300 = $ReallocAsyncCtx3 + 84 | 0; //@line 29748
     HEAP32[$300 >> 2] = $278; //@line 29749
     $301 = $ReallocAsyncCtx3 + 88 | 0; //@line 29750
     HEAP8[$301 >> 0] = $$1169; //@line 29751
     $302 = $ReallocAsyncCtx3 + 92 | 0; //@line 29752
     HEAP32[$302 >> 2] = $44; //@line 29753
     $303 = $ReallocAsyncCtx3 + 96 | 0; //@line 29754
     HEAP32[$303 >> 2] = $46; //@line 29755
     $304 = $ReallocAsyncCtx3 + 100 | 0; //@line 29756
     HEAP32[$304 >> 2] = $48; //@line 29757
     $305 = $ReallocAsyncCtx3 + 104 | 0; //@line 29758
     HEAP32[$305 >> 2] = $200; //@line 29759
     $306 = $ReallocAsyncCtx3 + 108 | 0; //@line 29760
     HEAP32[$306 >> 2] = $50; //@line 29761
     $307 = $ReallocAsyncCtx3 + 112 | 0; //@line 29762
     HEAP32[$307 >> 2] = $52; //@line 29763
     $308 = $ReallocAsyncCtx3 + 116 | 0; //@line 29764
     HEAP32[$308 >> 2] = $56; //@line 29765
     $309 = $ReallocAsyncCtx3 + 120 | 0; //@line 29766
     HEAP32[$309 >> 2] = $58; //@line 29767
     $310 = $ReallocAsyncCtx3 + 124 | 0; //@line 29768
     HEAP32[$310 >> 2] = $276; //@line 29769
     $311 = $ReallocAsyncCtx3 + 128 | 0; //@line 29770
     HEAP8[$311 >> 0] = $252; //@line 29771
     $312 = $ReallocAsyncCtx3 + 132 | 0; //@line 29772
     HEAP32[$312 >> 2] = $251; //@line 29773
     $313 = $ReallocAsyncCtx3 + 136 | 0; //@line 29774
     HEAP32[$313 >> 2] = $74; //@line 29775
     $314 = $ReallocAsyncCtx3 + 140 | 0; //@line 29776
     HEAP32[$314 >> 2] = $250; //@line 29777
     $315 = $ReallocAsyncCtx3 + 144 | 0; //@line 29778
     HEAP32[$315 >> 2] = $78; //@line 29779
     $316 = $ReallocAsyncCtx3 + 148 | 0; //@line 29780
     HEAP8[$316 >> 0] = $249; //@line 29781
     $317 = $ReallocAsyncCtx3 + 152 | 0; //@line 29782
     HEAP32[$317 >> 2] = $80; //@line 29783
     $318 = $ReallocAsyncCtx3 + 156 | 0; //@line 29784
     HEAP32[$318 >> 2] = $82; //@line 29785
     $319 = $ReallocAsyncCtx3 + 160 | 0; //@line 29786
     HEAP32[$319 >> 2] = $84; //@line 29787
     $320 = $ReallocAsyncCtx3 + 164 | 0; //@line 29788
     HEAP32[$320 >> 2] = $86; //@line 29789
     $321 = $ReallocAsyncCtx3 + 168 | 0; //@line 29790
     HEAP32[$321 >> 2] = $274; //@line 29791
     sp = STACKTOP; //@line 29792
     STACKTOP = sp; //@line 29793
     return;
    }
    ___async_unwind = 0; //@line 29795
    HEAP32[$ReallocAsyncCtx3 >> 2] = 316; //@line 29796
    $280 = $ReallocAsyncCtx3 + 4 | 0; //@line 29797
    HEAP32[$280 >> 2] = $4; //@line 29798
    $281 = $ReallocAsyncCtx3 + 8 | 0; //@line 29799
    HEAP32[$281 >> 2] = $$1173; //@line 29800
    $282 = $ReallocAsyncCtx3 + 12 | 0; //@line 29801
    HEAP32[$282 >> 2] = $8; //@line 29802
    $283 = $ReallocAsyncCtx3 + 16 | 0; //@line 29803
    HEAP32[$283 >> 2] = $10; //@line 29804
    $284 = $ReallocAsyncCtx3 + 20 | 0; //@line 29805
    HEAP8[$284 >> 0] = $14; //@line 29806
    $285 = $ReallocAsyncCtx3 + 24 | 0; //@line 29807
    HEAP32[$285 >> 2] = $$1171; //@line 29808
    $286 = $ReallocAsyncCtx3 + 28 | 0; //@line 29809
    HEAP32[$286 >> 2] = $253; //@line 29810
    $287 = $ReallocAsyncCtx3 + 32 | 0; //@line 29811
    HEAP8[$287 >> 0] = $240; //@line 29812
    $288 = $ReallocAsyncCtx3 + 36 | 0; //@line 29813
    HEAP32[$288 >> 2] = $18; //@line 29814
    $289 = $ReallocAsyncCtx3 + 40 | 0; //@line 29815
    HEAP32[$289 >> 2] = $20; //@line 29816
    $290 = $ReallocAsyncCtx3 + 44 | 0; //@line 29817
    HEAP32[$290 >> 2] = $22; //@line 29818
    $291 = $ReallocAsyncCtx3 + 48 | 0; //@line 29819
    HEAP32[$291 >> 2] = $24; //@line 29820
    $292 = $ReallocAsyncCtx3 + 52 | 0; //@line 29821
    HEAP32[$292 >> 2] = $26; //@line 29822
    $293 = $ReallocAsyncCtx3 + 56 | 0; //@line 29823
    HEAP32[$293 >> 2] = $$1175; //@line 29824
    $294 = $ReallocAsyncCtx3 + 60 | 0; //@line 29825
    HEAP8[$294 >> 0] = $trunc; //@line 29826
    $295 = $ReallocAsyncCtx3 + 64 | 0; //@line 29827
    HEAP32[$295 >> 2] = $28; //@line 29828
    $296 = $ReallocAsyncCtx3 + 68 | 0; //@line 29829
    HEAP32[$296 >> 2] = $30; //@line 29830
    $297 = $ReallocAsyncCtx3 + 72 | 0; //@line 29831
    HEAP32[$297 >> 2] = $34; //@line 29832
    $298 = $ReallocAsyncCtx3 + 76 | 0; //@line 29833
    HEAP32[$298 >> 2] = $36; //@line 29834
    $299 = $ReallocAsyncCtx3 + 80 | 0; //@line 29835
    HEAP32[$299 >> 2] = $38; //@line 29836
    $300 = $ReallocAsyncCtx3 + 84 | 0; //@line 29837
    HEAP32[$300 >> 2] = $278; //@line 29838
    $301 = $ReallocAsyncCtx3 + 88 | 0; //@line 29839
    HEAP8[$301 >> 0] = $$1169; //@line 29840
    $302 = $ReallocAsyncCtx3 + 92 | 0; //@line 29841
    HEAP32[$302 >> 2] = $44; //@line 29842
    $303 = $ReallocAsyncCtx3 + 96 | 0; //@line 29843
    HEAP32[$303 >> 2] = $46; //@line 29844
    $304 = $ReallocAsyncCtx3 + 100 | 0; //@line 29845
    HEAP32[$304 >> 2] = $48; //@line 29846
    $305 = $ReallocAsyncCtx3 + 104 | 0; //@line 29847
    HEAP32[$305 >> 2] = $200; //@line 29848
    $306 = $ReallocAsyncCtx3 + 108 | 0; //@line 29849
    HEAP32[$306 >> 2] = $50; //@line 29850
    $307 = $ReallocAsyncCtx3 + 112 | 0; //@line 29851
    HEAP32[$307 >> 2] = $52; //@line 29852
    $308 = $ReallocAsyncCtx3 + 116 | 0; //@line 29853
    HEAP32[$308 >> 2] = $56; //@line 29854
    $309 = $ReallocAsyncCtx3 + 120 | 0; //@line 29855
    HEAP32[$309 >> 2] = $58; //@line 29856
    $310 = $ReallocAsyncCtx3 + 124 | 0; //@line 29857
    HEAP32[$310 >> 2] = $276; //@line 29858
    $311 = $ReallocAsyncCtx3 + 128 | 0; //@line 29859
    HEAP8[$311 >> 0] = $252; //@line 29860
    $312 = $ReallocAsyncCtx3 + 132 | 0; //@line 29861
    HEAP32[$312 >> 2] = $251; //@line 29862
    $313 = $ReallocAsyncCtx3 + 136 | 0; //@line 29863
    HEAP32[$313 >> 2] = $74; //@line 29864
    $314 = $ReallocAsyncCtx3 + 140 | 0; //@line 29865
    HEAP32[$314 >> 2] = $250; //@line 29866
    $315 = $ReallocAsyncCtx3 + 144 | 0; //@line 29867
    HEAP32[$315 >> 2] = $78; //@line 29868
    $316 = $ReallocAsyncCtx3 + 148 | 0; //@line 29869
    HEAP8[$316 >> 0] = $249; //@line 29870
    $317 = $ReallocAsyncCtx3 + 152 | 0; //@line 29871
    HEAP32[$317 >> 2] = $80; //@line 29872
    $318 = $ReallocAsyncCtx3 + 156 | 0; //@line 29873
    HEAP32[$318 >> 2] = $82; //@line 29874
    $319 = $ReallocAsyncCtx3 + 160 | 0; //@line 29875
    HEAP32[$319 >> 2] = $84; //@line 29876
    $320 = $ReallocAsyncCtx3 + 164 | 0; //@line 29877
    HEAP32[$320 >> 2] = $86; //@line 29878
    $321 = $ReallocAsyncCtx3 + 168 | 0; //@line 29879
    HEAP32[$321 >> 2] = $274; //@line 29880
    sp = STACKTOP; //@line 29881
    STACKTOP = sp; //@line 29882
    return;
   } else {
    $324 = $238 + 65536 + ($275 << 16 >> 16) | 0; //@line 29887
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(176) | 0; //@line 29889
    __Z11compute_micPKhtS0_jhjPj($4, $253 & 65535, $$1173, $200, 1, $324, $24) | 0; //@line 29890
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 317; //@line 29893
     $326 = $ReallocAsyncCtx2 + 4 | 0; //@line 29894
     HEAP32[$326 >> 2] = $4; //@line 29895
     $327 = $ReallocAsyncCtx2 + 8 | 0; //@line 29896
     HEAP32[$327 >> 2] = $$1173; //@line 29897
     $328 = $ReallocAsyncCtx2 + 12 | 0; //@line 29898
     HEAP32[$328 >> 2] = $8; //@line 29899
     $329 = $ReallocAsyncCtx2 + 16 | 0; //@line 29900
     HEAP32[$329 >> 2] = $10; //@line 29901
     $330 = $ReallocAsyncCtx2 + 20 | 0; //@line 29902
     HEAP8[$330 >> 0] = $14; //@line 29903
     $331 = $ReallocAsyncCtx2 + 24 | 0; //@line 29904
     HEAP32[$331 >> 2] = $$1171; //@line 29905
     $332 = $ReallocAsyncCtx2 + 28 | 0; //@line 29906
     HEAP32[$332 >> 2] = $253; //@line 29907
     $333 = $ReallocAsyncCtx2 + 32 | 0; //@line 29908
     HEAP8[$333 >> 0] = $240; //@line 29909
     $334 = $ReallocAsyncCtx2 + 36 | 0; //@line 29910
     HEAP32[$334 >> 2] = $18; //@line 29911
     $335 = $ReallocAsyncCtx2 + 40 | 0; //@line 29912
     HEAP32[$335 >> 2] = $20; //@line 29913
     $336 = $ReallocAsyncCtx2 + 44 | 0; //@line 29914
     HEAP32[$336 >> 2] = $22; //@line 29915
     $337 = $ReallocAsyncCtx2 + 48 | 0; //@line 29916
     HEAP32[$337 >> 2] = $24; //@line 29917
     $338 = $ReallocAsyncCtx2 + 52 | 0; //@line 29918
     HEAP32[$338 >> 2] = $26; //@line 29919
     $339 = $ReallocAsyncCtx2 + 56 | 0; //@line 29920
     HEAP32[$339 >> 2] = $$1175; //@line 29921
     $340 = $ReallocAsyncCtx2 + 60 | 0; //@line 29922
     HEAP8[$340 >> 0] = $trunc; //@line 29923
     $341 = $ReallocAsyncCtx2 + 64 | 0; //@line 29924
     HEAP32[$341 >> 2] = $28; //@line 29925
     $342 = $ReallocAsyncCtx2 + 68 | 0; //@line 29926
     HEAP32[$342 >> 2] = $30; //@line 29927
     $343 = $ReallocAsyncCtx2 + 72 | 0; //@line 29928
     HEAP32[$343 >> 2] = $238; //@line 29929
     $344 = $ReallocAsyncCtx2 + 76 | 0; //@line 29930
     HEAP32[$344 >> 2] = $34; //@line 29931
     $345 = $ReallocAsyncCtx2 + 80 | 0; //@line 29932
     HEAP32[$345 >> 2] = $36; //@line 29933
     $346 = $ReallocAsyncCtx2 + 84 | 0; //@line 29934
     HEAP32[$346 >> 2] = $38; //@line 29935
     $347 = $ReallocAsyncCtx2 + 88 | 0; //@line 29936
     HEAP32[$347 >> 2] = $324; //@line 29937
     $348 = $ReallocAsyncCtx2 + 92 | 0; //@line 29938
     HEAP8[$348 >> 0] = $$1169; //@line 29939
     $349 = $ReallocAsyncCtx2 + 96 | 0; //@line 29940
     HEAP32[$349 >> 2] = $44; //@line 29941
     $350 = $ReallocAsyncCtx2 + 100 | 0; //@line 29942
     HEAP32[$350 >> 2] = $46; //@line 29943
     $351 = $ReallocAsyncCtx2 + 104 | 0; //@line 29944
     HEAP32[$351 >> 2] = $48; //@line 29945
     $352 = $ReallocAsyncCtx2 + 108 | 0; //@line 29946
     HEAP32[$352 >> 2] = $200; //@line 29947
     $353 = $ReallocAsyncCtx2 + 112 | 0; //@line 29948
     HEAP32[$353 >> 2] = $50; //@line 29949
     $354 = $ReallocAsyncCtx2 + 116 | 0; //@line 29950
     HEAP32[$354 >> 2] = $52; //@line 29951
     $355 = $ReallocAsyncCtx2 + 120 | 0; //@line 29952
     HEAP32[$355 >> 2] = $56; //@line 29953
     $356 = $ReallocAsyncCtx2 + 124 | 0; //@line 29954
     HEAP32[$356 >> 2] = $58; //@line 29955
     $357 = $ReallocAsyncCtx2 + 128 | 0; //@line 29956
     HEAP32[$357 >> 2] = $276; //@line 29957
     $358 = $ReallocAsyncCtx2 + 132 | 0; //@line 29958
     HEAP8[$358 >> 0] = $252; //@line 29959
     $359 = $ReallocAsyncCtx2 + 136 | 0; //@line 29960
     HEAP32[$359 >> 2] = $251; //@line 29961
     $360 = $ReallocAsyncCtx2 + 140 | 0; //@line 29962
     HEAP32[$360 >> 2] = $74; //@line 29963
     $361 = $ReallocAsyncCtx2 + 144 | 0; //@line 29964
     HEAP32[$361 >> 2] = $250; //@line 29965
     $362 = $ReallocAsyncCtx2 + 148 | 0; //@line 29966
     HEAP32[$362 >> 2] = $78; //@line 29967
     $363 = $ReallocAsyncCtx2 + 152 | 0; //@line 29968
     HEAP8[$363 >> 0] = $249; //@line 29969
     $364 = $ReallocAsyncCtx2 + 156 | 0; //@line 29970
     HEAP32[$364 >> 2] = $80; //@line 29971
     $365 = $ReallocAsyncCtx2 + 160 | 0; //@line 29972
     HEAP32[$365 >> 2] = $82; //@line 29973
     $366 = $ReallocAsyncCtx2 + 164 | 0; //@line 29974
     HEAP32[$366 >> 2] = $84; //@line 29975
     $367 = $ReallocAsyncCtx2 + 168 | 0; //@line 29976
     HEAP32[$367 >> 2] = $86; //@line 29977
     $368 = $ReallocAsyncCtx2 + 172 | 0; //@line 29978
     HEAP32[$368 >> 2] = $274; //@line 29979
     sp = STACKTOP; //@line 29980
     STACKTOP = sp; //@line 29981
     return;
    }
    ___async_unwind = 0; //@line 29983
    HEAP32[$ReallocAsyncCtx2 >> 2] = 317; //@line 29984
    $326 = $ReallocAsyncCtx2 + 4 | 0; //@line 29985
    HEAP32[$326 >> 2] = $4; //@line 29986
    $327 = $ReallocAsyncCtx2 + 8 | 0; //@line 29987
    HEAP32[$327 >> 2] = $$1173; //@line 29988
    $328 = $ReallocAsyncCtx2 + 12 | 0; //@line 29989
    HEAP32[$328 >> 2] = $8; //@line 29990
    $329 = $ReallocAsyncCtx2 + 16 | 0; //@line 29991
    HEAP32[$329 >> 2] = $10; //@line 29992
    $330 = $ReallocAsyncCtx2 + 20 | 0; //@line 29993
    HEAP8[$330 >> 0] = $14; //@line 29994
    $331 = $ReallocAsyncCtx2 + 24 | 0; //@line 29995
    HEAP32[$331 >> 2] = $$1171; //@line 29996
    $332 = $ReallocAsyncCtx2 + 28 | 0; //@line 29997
    HEAP32[$332 >> 2] = $253; //@line 29998
    $333 = $ReallocAsyncCtx2 + 32 | 0; //@line 29999
    HEAP8[$333 >> 0] = $240; //@line 30000
    $334 = $ReallocAsyncCtx2 + 36 | 0; //@line 30001
    HEAP32[$334 >> 2] = $18; //@line 30002
    $335 = $ReallocAsyncCtx2 + 40 | 0; //@line 30003
    HEAP32[$335 >> 2] = $20; //@line 30004
    $336 = $ReallocAsyncCtx2 + 44 | 0; //@line 30005
    HEAP32[$336 >> 2] = $22; //@line 30006
    $337 = $ReallocAsyncCtx2 + 48 | 0; //@line 30007
    HEAP32[$337 >> 2] = $24; //@line 30008
    $338 = $ReallocAsyncCtx2 + 52 | 0; //@line 30009
    HEAP32[$338 >> 2] = $26; //@line 30010
    $339 = $ReallocAsyncCtx2 + 56 | 0; //@line 30011
    HEAP32[$339 >> 2] = $$1175; //@line 30012
    $340 = $ReallocAsyncCtx2 + 60 | 0; //@line 30013
    HEAP8[$340 >> 0] = $trunc; //@line 30014
    $341 = $ReallocAsyncCtx2 + 64 | 0; //@line 30015
    HEAP32[$341 >> 2] = $28; //@line 30016
    $342 = $ReallocAsyncCtx2 + 68 | 0; //@line 30017
    HEAP32[$342 >> 2] = $30; //@line 30018
    $343 = $ReallocAsyncCtx2 + 72 | 0; //@line 30019
    HEAP32[$343 >> 2] = $238; //@line 30020
    $344 = $ReallocAsyncCtx2 + 76 | 0; //@line 30021
    HEAP32[$344 >> 2] = $34; //@line 30022
    $345 = $ReallocAsyncCtx2 + 80 | 0; //@line 30023
    HEAP32[$345 >> 2] = $36; //@line 30024
    $346 = $ReallocAsyncCtx2 + 84 | 0; //@line 30025
    HEAP32[$346 >> 2] = $38; //@line 30026
    $347 = $ReallocAsyncCtx2 + 88 | 0; //@line 30027
    HEAP32[$347 >> 2] = $324; //@line 30028
    $348 = $ReallocAsyncCtx2 + 92 | 0; //@line 30029
    HEAP8[$348 >> 0] = $$1169; //@line 30030
    $349 = $ReallocAsyncCtx2 + 96 | 0; //@line 30031
    HEAP32[$349 >> 2] = $44; //@line 30032
    $350 = $ReallocAsyncCtx2 + 100 | 0; //@line 30033
    HEAP32[$350 >> 2] = $46; //@line 30034
    $351 = $ReallocAsyncCtx2 + 104 | 0; //@line 30035
    HEAP32[$351 >> 2] = $48; //@line 30036
    $352 = $ReallocAsyncCtx2 + 108 | 0; //@line 30037
    HEAP32[$352 >> 2] = $200; //@line 30038
    $353 = $ReallocAsyncCtx2 + 112 | 0; //@line 30039
    HEAP32[$353 >> 2] = $50; //@line 30040
    $354 = $ReallocAsyncCtx2 + 116 | 0; //@line 30041
    HEAP32[$354 >> 2] = $52; //@line 30042
    $355 = $ReallocAsyncCtx2 + 120 | 0; //@line 30043
    HEAP32[$355 >> 2] = $56; //@line 30044
    $356 = $ReallocAsyncCtx2 + 124 | 0; //@line 30045
    HEAP32[$356 >> 2] = $58; //@line 30046
    $357 = $ReallocAsyncCtx2 + 128 | 0; //@line 30047
    HEAP32[$357 >> 2] = $276; //@line 30048
    $358 = $ReallocAsyncCtx2 + 132 | 0; //@line 30049
    HEAP8[$358 >> 0] = $252; //@line 30050
    $359 = $ReallocAsyncCtx2 + 136 | 0; //@line 30051
    HEAP32[$359 >> 2] = $251; //@line 30052
    $360 = $ReallocAsyncCtx2 + 140 | 0; //@line 30053
    HEAP32[$360 >> 2] = $74; //@line 30054
    $361 = $ReallocAsyncCtx2 + 144 | 0; //@line 30055
    HEAP32[$361 >> 2] = $250; //@line 30056
    $362 = $ReallocAsyncCtx2 + 148 | 0; //@line 30057
    HEAP32[$362 >> 2] = $78; //@line 30058
    $363 = $ReallocAsyncCtx2 + 152 | 0; //@line 30059
    HEAP8[$363 >> 0] = $249; //@line 30060
    $364 = $ReallocAsyncCtx2 + 156 | 0; //@line 30061
    HEAP32[$364 >> 2] = $80; //@line 30062
    $365 = $ReallocAsyncCtx2 + 160 | 0; //@line 30063
    HEAP32[$365 >> 2] = $82; //@line 30064
    $366 = $ReallocAsyncCtx2 + 164 | 0; //@line 30065
    HEAP32[$366 >> 2] = $84; //@line 30066
    $367 = $ReallocAsyncCtx2 + 168 | 0; //@line 30067
    HEAP32[$367 >> 2] = $86; //@line 30068
    $368 = $ReallocAsyncCtx2 + 172 | 0; //@line 30069
    HEAP32[$368 >> 2] = $274; //@line 30070
    sp = STACKTOP; //@line 30071
    STACKTOP = sp; //@line 30072
    return;
   }
   break;
  }
 case 7:
  {
   $369 = $8 + 638 | 0; //@line 30077
   _memcpy($369 | 0, $4 + 1 | 0, $40 | 0) | 0; //@line 30079
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($38) | 0) >> 2] = 3; //@line 30081
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($38) | 0) + 4 >> 2] = 0; //@line 30084
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($38) | 0) + 12 >> 2] = $369; //@line 30087
   HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($38) | 0) + 16 >> 1] = $40 + 65535; //@line 30092
   $380 = $8 + 944 | 0; //@line 30093
   HEAP8[$380 >> 0] = HEAP8[$380 >> 0] | 2; //@line 30096
   $409 = $8 + 944 | 0; //@line 30097
   HEAP8[$409 >> 0] = HEAP8[$409 >> 0] | 32; //@line 30100
   $412 = HEAP32[$50 >> 2] | 0; //@line 30101
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 30103
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($412, $8 + 996 | 0, 1); //@line 30104
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 338; //@line 30107
    $414 = $ReallocAsyncCtx5 + 4 | 0; //@line 30108
    HEAP32[$414 >> 2] = $58; //@line 30109
    $415 = $ReallocAsyncCtx5 + 8 | 0; //@line 30110
    HEAP32[$415 >> 2] = $78; //@line 30111
    sp = STACKTOP; //@line 30112
    STACKTOP = sp; //@line 30113
    return;
   }
   ___async_unwind = 0; //@line 30115
   HEAP32[$ReallocAsyncCtx5 >> 2] = 338; //@line 30116
   $414 = $ReallocAsyncCtx5 + 4 | 0; //@line 30117
   HEAP32[$414 >> 2] = $58; //@line 30118
   $415 = $ReallocAsyncCtx5 + 8 | 0; //@line 30119
   HEAP32[$415 >> 2] = $78; //@line 30120
   sp = STACKTOP; //@line 30121
   STACKTOP = sp; //@line 30122
   return;
  }
 default:
  {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($38) | 0) + 4 >> 2] = 1; //@line 30128
   _mbed_tracef(16, 13704, 13843, $32); //@line 30129
   $385 = $8 + 968 | 0; //@line 30130
   HEAP32[$385 >> 2] = HEAP32[$385 >> 2] | 64; //@line 30133
   if (!(HEAP8[$8 + 373 >> 0] | 0)) {
    $400 = $8 + 944 | 0; //@line 30138
    HEAP8[$400 >> 0] = HEAP8[$400 >> 0] | 34; //@line 30141
    $403 = HEAP32[$50 >> 2] | 0; //@line 30142
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 30144
    __ZN18LoRaWANTimeHandler5startER13timer_event_tj($403, $8 + 996 | 0, 1); //@line 30145
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 337; //@line 30148
     $405 = $ReallocAsyncCtx6 + 4 | 0; //@line 30149
     HEAP32[$405 >> 2] = $8; //@line 30150
     $406 = $ReallocAsyncCtx6 + 8 | 0; //@line 30151
     HEAP32[$406 >> 2] = $50; //@line 30152
     $407 = $ReallocAsyncCtx6 + 12 | 0; //@line 30153
     HEAP32[$407 >> 2] = $58; //@line 30154
     $408 = $ReallocAsyncCtx6 + 16 | 0; //@line 30155
     HEAP32[$408 >> 2] = $78; //@line 30156
     sp = STACKTOP; //@line 30157
     STACKTOP = sp; //@line 30158
     return;
    }
    ___async_unwind = 0; //@line 30160
    HEAP32[$ReallocAsyncCtx6 >> 2] = 337; //@line 30161
    $405 = $ReallocAsyncCtx6 + 4 | 0; //@line 30162
    HEAP32[$405 >> 2] = $8; //@line 30163
    $406 = $ReallocAsyncCtx6 + 8 | 0; //@line 30164
    HEAP32[$406 >> 2] = $50; //@line 30165
    $407 = $ReallocAsyncCtx6 + 12 | 0; //@line 30166
    HEAP32[$407 >> 2] = $58; //@line 30167
    $408 = $ReallocAsyncCtx6 + 16 | 0; //@line 30168
    HEAP32[$408 >> 2] = $78; //@line 30169
    sp = STACKTOP; //@line 30170
    STACKTOP = sp; //@line 30171
    return;
   } else {
    $392 = HEAP32[$8 + 1328 >> 2] | 0; //@line 30174
    HEAP32[$62 >> 2] = 304; //@line 30175
    HEAP32[$62 + 4 >> 2] = 0; //@line 30177
    $ReallocAsyncCtx18 = _emscripten_realloc_async_context(24) | 0; //@line 30178
    HEAP32[$$byval_copy50 >> 2] = HEAP32[$62 >> 2]; //@line 30179
    HEAP32[$$byval_copy50 + 4 >> 2] = HEAP32[$62 + 4 >> 2]; //@line 30179
    $393 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($392, $8, $$byval_copy50) | 0; //@line 30180
    if (___async) {
     HEAP32[$ReallocAsyncCtx18 >> 2] = 335; //@line 30183
     $394 = $ReallocAsyncCtx18 + 4 | 0; //@line 30184
     HEAP32[$394 >> 2] = $62; //@line 30185
     $395 = $ReallocAsyncCtx18 + 8 | 0; //@line 30186
     HEAP32[$395 >> 2] = $8; //@line 30187
     $396 = $ReallocAsyncCtx18 + 12 | 0; //@line 30188
     HEAP32[$396 >> 2] = $50; //@line 30189
     $397 = $ReallocAsyncCtx18 + 16 | 0; //@line 30190
     HEAP32[$397 >> 2] = $58; //@line 30191
     $398 = $ReallocAsyncCtx18 + 20 | 0; //@line 30192
     HEAP32[$398 >> 2] = $78; //@line 30193
     sp = STACKTOP; //@line 30194
     STACKTOP = sp; //@line 30195
     return;
    }
    HEAP32[___async_retval >> 2] = $393; //@line 30198
    ___async_unwind = 0; //@line 30199
    HEAP32[$ReallocAsyncCtx18 >> 2] = 335; //@line 30200
    $394 = $ReallocAsyncCtx18 + 4 | 0; //@line 30201
    HEAP32[$394 >> 2] = $62; //@line 30202
    $395 = $ReallocAsyncCtx18 + 8 | 0; //@line 30203
    HEAP32[$395 >> 2] = $8; //@line 30204
    $396 = $ReallocAsyncCtx18 + 12 | 0; //@line 30205
    HEAP32[$396 >> 2] = $50; //@line 30206
    $397 = $ReallocAsyncCtx18 + 16 | 0; //@line 30207
    HEAP32[$397 >> 2] = $58; //@line 30208
    $398 = $ReallocAsyncCtx18 + 20 | 0; //@line 30209
    HEAP32[$398 >> 2] = $78; //@line 30210
    sp = STACKTOP; //@line 30211
    STACKTOP = sp; //@line 30212
    return;
   }
  }
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_328($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$pre20 = 0, $10 = 0, $101 = 0, $106 = 0, $112 = 0, $118 = 0, $12 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $143 = 0, $154 = 0, $158 = 0, $16 = 0, $162 = 0, $167 = 0, $173 = 0, $174 = 0, $179 = 0, $18 = 0, $183 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $200 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $219 = 0, $22 = 0, $221 = 0, $222 = 0, $227 = 0, $229 = 0, $230 = 0, $231 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $255 = 0, $256 = 0, $258 = 0, $259 = 0, $260 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $296 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $31 = 0, $310 = 0, $311 = 0, $313 = 0, $314 = 0, $315 = 0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $327 = 0, $331 = 0, $332 = 0, $334 = 0, $335 = 0, $336 = 0, $338 = 0, $339 = 0, $340 = 0, $341 = 0, $4 = 0, $45 = 0, $53 = 0, $56 = 0, $6 = 0, $61 = 0, $65 = 0, $66 = 0, $8 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 25121
 STACKTOP = STACKTOP + 32 | 0; //@line 25122
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 25122
 $$byval_copy23 = sp + 16 | 0; //@line 25123
 $$byval_copy22 = sp + 8 | 0; //@line 25124
 $$byval_copy = sp; //@line 25125
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25127
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25129
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25131
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25133
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25135
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25137
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25139
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 25141
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 25143
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 25145
 $21 = $2 + 944 | 0; //@line 25146
 $22 = HEAP8[$21 >> 0] | 0; //@line 25147
 $$pre20 = $2 + 968 | 0; //@line 25150
 if ($22 & 32) {
  $25 = HEAP32[$$pre20 >> 2] | 0; //@line 25152
  if ($25 & 64 | 0) {
   HEAP32[$$pre20 >> 2] = $25 & -66; //@line 25157
  }
  do {
   if (!($22 & 9)) {
    label = 9; //@line 25163
   } else {
    $31 = $2 + 288 | 0; //@line 25165
    if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($31) | 0) + 4 >> 2] | 0) != 2) {
     if ((HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] | 0) != 2) {
      label = 9; //@line 25177
      break;
     }
    }
    HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 25183
    __ZN14LoRaMacCommand20clear_command_bufferEv($2 + 4 | 0); //@line 25185
    $45 = HEAP8[$2 + 895 >> 0] | 0; //@line 25187
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($31) | 0) + 11 >> 0] = $45; //@line 25190
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($31) | 0) + 10 >> 0] = 0; //@line 25193
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($31) | 0) + 12 >> 2] = 0; //@line 25196
    $154 = $2 + 373 | 0; //@line 25198
   }
  } while (0);
  do {
   if ((label | 0) == 9) {
    $53 = $2 + 373 | 0; //@line 25203
    if (!(HEAP8[$53 >> 0] | 0)) {
     $56 = HEAP8[$21 >> 0] | 0; //@line 25207
     if (!($56 & 9)) {
      $154 = $53; //@line 25211
     } else {
      if ($56 & 8) {
       $61 = $2 + 264 | 0; //@line 25216
       if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($61) | 0) >> 2] | 0)) {
        $65 = $2 + 897 | 0; //@line 25221
        $66 = HEAP8[$65 >> 0] | 0; //@line 25222
        HEAP8[(__ZN11LoRaMacMlme16get_confirmationEv($61) | 0) + 14 >> 0] = $66; //@line 25225
        if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($61) | 0) + 4 >> 2] | 0)) {
         HEAP32[$2 + 956 >> 2] = 0; //@line 25232
         HEAP8[$2 + 380 >> 0] = 0; //@line 25234
         HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 25237
         $154 = $53; //@line 25238
         break;
        }
        if ((HEAPU8[$65 >> 0] | 0) >= (HEAPU8[$2 + 896 >> 0] | 0)) {
         HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 25248
         $154 = $53; //@line 25249
         break;
        }
        HEAP8[$21 >> 0] = HEAP8[$21 >> 0] & -33; //@line 25254
        $86 = HEAP32[$2 + 1328 >> 2] | 0; //@line 25256
        HEAP32[$18 >> 2] = 377; //@line 25257
        HEAP32[$18 + 4 >> 2] = 0; //@line 25259
        $ReallocAsyncCtx10 = _emscripten_realloc_async_context(52) | 0; //@line 25260
        HEAP32[$$byval_copy >> 2] = HEAP32[$18 >> 2]; //@line 25261
        HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$18 + 4 >> 2]; //@line 25261
        $87 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($86, $2, $$byval_copy) | 0; //@line 25262
        if (___async) {
         HEAP32[$ReallocAsyncCtx10 >> 2] = 378; //@line 25265
         $88 = $ReallocAsyncCtx10 + 4 | 0; //@line 25266
         HEAP32[$88 >> 2] = $21; //@line 25267
         $89 = $ReallocAsyncCtx10 + 8 | 0; //@line 25268
         HEAP32[$89 >> 2] = $2; //@line 25269
         $90 = $ReallocAsyncCtx10 + 12 | 0; //@line 25270
         HEAP32[$90 >> 2] = $$pre20; //@line 25271
         $91 = $ReallocAsyncCtx10 + 16 | 0; //@line 25272
         HEAP32[$91 >> 2] = $4; //@line 25273
         $92 = $ReallocAsyncCtx10 + 20 | 0; //@line 25274
         HEAP32[$92 >> 2] = $6; //@line 25275
         $93 = $ReallocAsyncCtx10 + 24 | 0; //@line 25276
         HEAP32[$93 >> 2] = $8; //@line 25277
         $94 = $ReallocAsyncCtx10 + 28 | 0; //@line 25278
         HEAP32[$94 >> 2] = $10; //@line 25279
         $95 = $ReallocAsyncCtx10 + 32 | 0; //@line 25280
         HEAP32[$95 >> 2] = $12; //@line 25281
         $96 = $ReallocAsyncCtx10 + 36 | 0; //@line 25282
         HEAP32[$96 >> 2] = $14; //@line 25283
         $97 = $ReallocAsyncCtx10 + 40 | 0; //@line 25284
         HEAP32[$97 >> 2] = $16; //@line 25285
         $98 = $ReallocAsyncCtx10 + 44 | 0; //@line 25286
         HEAP32[$98 >> 2] = $18; //@line 25287
         $99 = $ReallocAsyncCtx10 + 48 | 0; //@line 25288
         HEAP32[$99 >> 2] = $53; //@line 25289
         sp = STACKTOP; //@line 25290
         STACKTOP = sp; //@line 25291
         return;
        }
        HEAP32[___async_retval >> 2] = $87; //@line 25294
        ___async_unwind = 0; //@line 25295
        HEAP32[$ReallocAsyncCtx10 >> 2] = 378; //@line 25296
        $88 = $ReallocAsyncCtx10 + 4 | 0; //@line 25297
        HEAP32[$88 >> 2] = $21; //@line 25298
        $89 = $ReallocAsyncCtx10 + 8 | 0; //@line 25299
        HEAP32[$89 >> 2] = $2; //@line 25300
        $90 = $ReallocAsyncCtx10 + 12 | 0; //@line 25301
        HEAP32[$90 >> 2] = $$pre20; //@line 25302
        $91 = $ReallocAsyncCtx10 + 16 | 0; //@line 25303
        HEAP32[$91 >> 2] = $4; //@line 25304
        $92 = $ReallocAsyncCtx10 + 20 | 0; //@line 25305
        HEAP32[$92 >> 2] = $6; //@line 25306
        $93 = $ReallocAsyncCtx10 + 24 | 0; //@line 25307
        HEAP32[$93 >> 2] = $8; //@line 25308
        $94 = $ReallocAsyncCtx10 + 28 | 0; //@line 25309
        HEAP32[$94 >> 2] = $10; //@line 25310
        $95 = $ReallocAsyncCtx10 + 32 | 0; //@line 25311
        HEAP32[$95 >> 2] = $12; //@line 25312
        $96 = $ReallocAsyncCtx10 + 36 | 0; //@line 25313
        HEAP32[$96 >> 2] = $14; //@line 25314
        $97 = $ReallocAsyncCtx10 + 40 | 0; //@line 25315
        HEAP32[$97 >> 2] = $16; //@line 25316
        $98 = $ReallocAsyncCtx10 + 44 | 0; //@line 25317
        HEAP32[$98 >> 2] = $18; //@line 25318
        $99 = $ReallocAsyncCtx10 + 48 | 0; //@line 25319
        HEAP32[$99 >> 2] = $53; //@line 25320
        sp = STACKTOP; //@line 25321
        STACKTOP = sp; //@line 25322
        return;
       }
      }
      $101 = $2 + 380 | 0; //@line 25325
      $106 = HEAP8[$21 >> 0] | 0; //@line 25330
      if (($106 & 2) == 0 ? (HEAPU8[$101 >> 0] | 0) < (HEAPU8[$2 + 1128 >> 0] | 0) : 0) {
       HEAP8[$21 >> 0] = $106 & -33; //@line 25336
       $125 = HEAP32[$2 + 1328 >> 2] | 0; //@line 25338
       HEAP32[$20 >> 2] = 377; //@line 25339
       HEAP32[$20 + 4 >> 2] = 0; //@line 25341
       $ReallocAsyncCtx9 = _emscripten_realloc_async_context(52) | 0; //@line 25342
       HEAP32[$$byval_copy22 >> 2] = HEAP32[$20 >> 2]; //@line 25343
       HEAP32[$$byval_copy22 + 4 >> 2] = HEAP32[$20 + 4 >> 2]; //@line 25343
       $126 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($125, $2, $$byval_copy22) | 0; //@line 25344
       if (___async) {
        HEAP32[$ReallocAsyncCtx9 >> 2] = 380; //@line 25347
        $127 = $ReallocAsyncCtx9 + 4 | 0; //@line 25348
        HEAP32[$127 >> 2] = $21; //@line 25349
        $128 = $ReallocAsyncCtx9 + 8 | 0; //@line 25350
        HEAP32[$128 >> 2] = $2; //@line 25351
        $129 = $ReallocAsyncCtx9 + 12 | 0; //@line 25352
        HEAP32[$129 >> 2] = $$pre20; //@line 25353
        $130 = $ReallocAsyncCtx9 + 16 | 0; //@line 25354
        HEAP32[$130 >> 2] = $4; //@line 25355
        $131 = $ReallocAsyncCtx9 + 20 | 0; //@line 25356
        HEAP32[$131 >> 2] = $6; //@line 25357
        $132 = $ReallocAsyncCtx9 + 24 | 0; //@line 25358
        HEAP32[$132 >> 2] = $8; //@line 25359
        $133 = $ReallocAsyncCtx9 + 28 | 0; //@line 25360
        HEAP32[$133 >> 2] = $10; //@line 25361
        $134 = $ReallocAsyncCtx9 + 32 | 0; //@line 25362
        HEAP32[$134 >> 2] = $12; //@line 25363
        $135 = $ReallocAsyncCtx9 + 36 | 0; //@line 25364
        HEAP32[$135 >> 2] = $14; //@line 25365
        $136 = $ReallocAsyncCtx9 + 40 | 0; //@line 25366
        HEAP32[$136 >> 2] = $16; //@line 25367
        $137 = $ReallocAsyncCtx9 + 44 | 0; //@line 25368
        HEAP32[$137 >> 2] = $53; //@line 25369
        $138 = $ReallocAsyncCtx9 + 48 | 0; //@line 25370
        HEAP32[$138 >> 2] = $20; //@line 25371
        sp = STACKTOP; //@line 25372
        STACKTOP = sp; //@line 25373
        return;
       }
       HEAP32[___async_retval >> 2] = $126; //@line 25376
       ___async_unwind = 0; //@line 25377
       HEAP32[$ReallocAsyncCtx9 >> 2] = 380; //@line 25378
       $127 = $ReallocAsyncCtx9 + 4 | 0; //@line 25379
       HEAP32[$127 >> 2] = $21; //@line 25380
       $128 = $ReallocAsyncCtx9 + 8 | 0; //@line 25381
       HEAP32[$128 >> 2] = $2; //@line 25382
       $129 = $ReallocAsyncCtx9 + 12 | 0; //@line 25383
       HEAP32[$129 >> 2] = $$pre20; //@line 25384
       $130 = $ReallocAsyncCtx9 + 16 | 0; //@line 25385
       HEAP32[$130 >> 2] = $4; //@line 25386
       $131 = $ReallocAsyncCtx9 + 20 | 0; //@line 25387
       HEAP32[$131 >> 2] = $6; //@line 25388
       $132 = $ReallocAsyncCtx9 + 24 | 0; //@line 25389
       HEAP32[$132 >> 2] = $8; //@line 25390
       $133 = $ReallocAsyncCtx9 + 28 | 0; //@line 25391
       HEAP32[$133 >> 2] = $10; //@line 25392
       $134 = $ReallocAsyncCtx9 + 32 | 0; //@line 25393
       HEAP32[$134 >> 2] = $12; //@line 25394
       $135 = $ReallocAsyncCtx9 + 36 | 0; //@line 25395
       HEAP32[$135 >> 2] = $14; //@line 25396
       $136 = $ReallocAsyncCtx9 + 40 | 0; //@line 25397
       HEAP32[$136 >> 2] = $16; //@line 25398
       $137 = $ReallocAsyncCtx9 + 44 | 0; //@line 25399
       HEAP32[$137 >> 2] = $53; //@line 25400
       $138 = $ReallocAsyncCtx9 + 48 | 0; //@line 25401
       HEAP32[$138 >> 2] = $20; //@line 25402
       sp = STACKTOP; //@line 25403
       STACKTOP = sp; //@line 25404
       return;
      }
      if (!($106 & 2)) {
       __ZN14LoRaMacCommand20clear_command_bufferEv($2 + 4 | 0); //@line 25410
       $112 = $2 + 964 | 0; //@line 25411
       HEAP32[$112 >> 2] = (HEAP32[$112 >> 2] | 0) + 1; //@line 25414
      }
      HEAP8[$101 >> 0] = 0; //@line 25416
      if (!(HEAP8[$2 + 370 >> 0] | 0)) {
       $118 = $2 + 956 | 0; //@line 25421
       HEAP32[$118 >> 2] = (HEAP32[$118 >> 2] | 0) + 1; //@line 25424
      }
      HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 25428
      $154 = $53; //@line 25429
     }
    } else {
     $154 = $53; //@line 25432
    }
   }
  } while (0);
  do {
   if (HEAP8[$21 >> 0] & 2) {
    $143 = $2 + 288 | 0; //@line 25441
    if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($143) | 0) + 10 >> 0] | 0)) {
     if ((HEAPU8[$2 + 895 >> 0] | 0) <= (HEAPU8[$2 + 894 >> 0] | 0)) {
      break;
     }
    }
    HEAP8[$2 + 377 >> 0] = 0; //@line 25457
    HEAP8[$154 >> 0] = 0; //@line 25458
    if (!(HEAP8[$2 + 370 >> 0] | 0)) {
     $158 = $2 + 956 | 0; //@line 25463
     HEAP32[$158 >> 2] = (HEAP32[$158 >> 2] | 0) + 1; //@line 25466
    }
    $162 = HEAP8[$2 + 895 >> 0] | 0; //@line 25469
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($143) | 0) + 11 >> 0] = $162; //@line 25472
    HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 25475
   }
  } while (0);
  $167 = $2 + 377 | 0; //@line 25478
  if (HEAP8[$167 >> 0] | 0) {
   if (!(HEAP32[$$pre20 >> 2] & 16)) {
    HEAP8[$167 >> 0] = 0; //@line 25486
    $173 = $2 + 895 | 0; //@line 25487
    $174 = HEAP8[$173 >> 0] | 0; //@line 25488
    if (!(($174 & 255) < 9 ? ($174 & 255) < (HEAPU8[$2 + 894 >> 0] | 0) : 0)) {
     $200 = HEAP32[$2 >> 2] | 0; //@line 25495
     $203 = HEAP32[(HEAP32[$200 >> 2] | 0) + 16 >> 2] | 0; //@line 25498
     $ReallocAsyncCtx = _emscripten_realloc_async_context(52) | 0; //@line 25499
     FUNCTION_TABLE_vi[$203 & 1023]($200); //@line 25500
     if (___async) {
      HEAP32[$ReallocAsyncCtx >> 2] = 383; //@line 25503
      $204 = $ReallocAsyncCtx + 4 | 0; //@line 25504
      HEAP32[$204 >> 2] = $21; //@line 25505
      $205 = $ReallocAsyncCtx + 8 | 0; //@line 25506
      HEAP32[$205 >> 2] = $4; //@line 25507
      $206 = $ReallocAsyncCtx + 12 | 0; //@line 25508
      HEAP32[$206 >> 2] = $6; //@line 25509
      $207 = $ReallocAsyncCtx + 16 | 0; //@line 25510
      HEAP32[$207 >> 2] = $2; //@line 25511
      $208 = $ReallocAsyncCtx + 20 | 0; //@line 25512
      HEAP32[$208 >> 2] = $$pre20; //@line 25513
      $209 = $ReallocAsyncCtx + 24 | 0; //@line 25514
      HEAP32[$209 >> 2] = $154; //@line 25515
      $210 = $ReallocAsyncCtx + 28 | 0; //@line 25516
      HEAP32[$210 >> 2] = $173; //@line 25517
      $211 = $ReallocAsyncCtx + 32 | 0; //@line 25518
      HEAP32[$211 >> 2] = $14; //@line 25519
      $212 = $ReallocAsyncCtx + 36 | 0; //@line 25520
      HEAP32[$212 >> 2] = $16; //@line 25521
      $213 = $ReallocAsyncCtx + 40 | 0; //@line 25522
      HEAP32[$213 >> 2] = $8; //@line 25523
      $214 = $ReallocAsyncCtx + 44 | 0; //@line 25524
      HEAP32[$214 >> 2] = $10; //@line 25525
      $215 = $ReallocAsyncCtx + 48 | 0; //@line 25526
      HEAP32[$215 >> 2] = $12; //@line 25527
      sp = STACKTOP; //@line 25528
      STACKTOP = sp; //@line 25529
      return;
     }
     ___async_unwind = 0; //@line 25531
     HEAP32[$ReallocAsyncCtx >> 2] = 383; //@line 25532
     $204 = $ReallocAsyncCtx + 4 | 0; //@line 25533
     HEAP32[$204 >> 2] = $21; //@line 25534
     $205 = $ReallocAsyncCtx + 8 | 0; //@line 25535
     HEAP32[$205 >> 2] = $4; //@line 25536
     $206 = $ReallocAsyncCtx + 12 | 0; //@line 25537
     HEAP32[$206 >> 2] = $6; //@line 25538
     $207 = $ReallocAsyncCtx + 16 | 0; //@line 25539
     HEAP32[$207 >> 2] = $2; //@line 25540
     $208 = $ReallocAsyncCtx + 20 | 0; //@line 25541
     HEAP32[$208 >> 2] = $$pre20; //@line 25542
     $209 = $ReallocAsyncCtx + 24 | 0; //@line 25543
     HEAP32[$209 >> 2] = $154; //@line 25544
     $210 = $ReallocAsyncCtx + 28 | 0; //@line 25545
     HEAP32[$210 >> 2] = $173; //@line 25546
     $211 = $ReallocAsyncCtx + 32 | 0; //@line 25547
     HEAP32[$211 >> 2] = $14; //@line 25548
     $212 = $ReallocAsyncCtx + 36 | 0; //@line 25549
     HEAP32[$212 >> 2] = $16; //@line 25550
     $213 = $ReallocAsyncCtx + 40 | 0; //@line 25551
     HEAP32[$213 >> 2] = $8; //@line 25552
     $214 = $ReallocAsyncCtx + 44 | 0; //@line 25553
     HEAP32[$214 >> 2] = $10; //@line 25554
     $215 = $ReallocAsyncCtx + 48 | 0; //@line 25555
     HEAP32[$215 >> 2] = $12; //@line 25556
     sp = STACKTOP; //@line 25557
     STACKTOP = sp; //@line 25558
     return;
    }
    $179 = $174 + 1 << 24 >> 24; //@line 25560
    HEAP8[$173 >> 0] = $179; //@line 25561
    if ($179 & 1) {
     $183 = $2 + 1097 | 0; //@line 25566
     HEAP8[$183 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$2 >> 2] | 0, HEAP8[$183 >> 0] | 0) | 0; //@line 25569
    }
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(52) | 0; //@line 25571
    $186 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 25572
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 382; //@line 25575
     $187 = $ReallocAsyncCtx7 + 4 | 0; //@line 25576
     HEAP32[$187 >> 2] = $21; //@line 25577
     $188 = $ReallocAsyncCtx7 + 8 | 0; //@line 25578
     HEAP32[$188 >> 2] = $4; //@line 25579
     $189 = $ReallocAsyncCtx7 + 12 | 0; //@line 25580
     HEAP32[$189 >> 2] = $6; //@line 25581
     $190 = $ReallocAsyncCtx7 + 16 | 0; //@line 25582
     HEAP32[$190 >> 2] = $2; //@line 25583
     $191 = $ReallocAsyncCtx7 + 20 | 0; //@line 25584
     HEAP32[$191 >> 2] = $$pre20; //@line 25585
     $192 = $ReallocAsyncCtx7 + 24 | 0; //@line 25586
     HEAP32[$192 >> 2] = $154; //@line 25587
     $193 = $ReallocAsyncCtx7 + 28 | 0; //@line 25588
     HEAP32[$193 >> 2] = $173; //@line 25589
     $194 = $ReallocAsyncCtx7 + 32 | 0; //@line 25590
     HEAP32[$194 >> 2] = $8; //@line 25591
     $195 = $ReallocAsyncCtx7 + 36 | 0; //@line 25592
     HEAP32[$195 >> 2] = $10; //@line 25593
     $196 = $ReallocAsyncCtx7 + 40 | 0; //@line 25594
     HEAP32[$196 >> 2] = $12; //@line 25595
     $197 = $ReallocAsyncCtx7 + 44 | 0; //@line 25596
     HEAP32[$197 >> 2] = $14; //@line 25597
     $198 = $ReallocAsyncCtx7 + 48 | 0; //@line 25598
     HEAP32[$198 >> 2] = $16; //@line 25599
     sp = STACKTOP; //@line 25600
     STACKTOP = sp; //@line 25601
     return;
    }
    HEAP32[___async_retval >> 2] = $186; //@line 25604
    ___async_unwind = 0; //@line 25605
    HEAP32[$ReallocAsyncCtx7 >> 2] = 382; //@line 25606
    $187 = $ReallocAsyncCtx7 + 4 | 0; //@line 25607
    HEAP32[$187 >> 2] = $21; //@line 25608
    $188 = $ReallocAsyncCtx7 + 8 | 0; //@line 25609
    HEAP32[$188 >> 2] = $4; //@line 25610
    $189 = $ReallocAsyncCtx7 + 12 | 0; //@line 25611
    HEAP32[$189 >> 2] = $6; //@line 25612
    $190 = $ReallocAsyncCtx7 + 16 | 0; //@line 25613
    HEAP32[$190 >> 2] = $2; //@line 25614
    $191 = $ReallocAsyncCtx7 + 20 | 0; //@line 25615
    HEAP32[$191 >> 2] = $$pre20; //@line 25616
    $192 = $ReallocAsyncCtx7 + 24 | 0; //@line 25617
    HEAP32[$192 >> 2] = $154; //@line 25618
    $193 = $ReallocAsyncCtx7 + 28 | 0; //@line 25619
    HEAP32[$193 >> 2] = $173; //@line 25620
    $194 = $ReallocAsyncCtx7 + 32 | 0; //@line 25621
    HEAP32[$194 >> 2] = $8; //@line 25622
    $195 = $ReallocAsyncCtx7 + 36 | 0; //@line 25623
    HEAP32[$195 >> 2] = $10; //@line 25624
    $196 = $ReallocAsyncCtx7 + 40 | 0; //@line 25625
    HEAP32[$196 >> 2] = $12; //@line 25626
    $197 = $ReallocAsyncCtx7 + 44 | 0; //@line 25627
    HEAP32[$197 >> 2] = $14; //@line 25628
    $198 = $ReallocAsyncCtx7 + 48 | 0; //@line 25629
    HEAP32[$198 >> 2] = $16; //@line 25630
    sp = STACKTOP; //@line 25631
    STACKTOP = sp; //@line 25632
    return;
   }
  }
 }
 $216 = HEAP32[$$pre20 >> 2] | 0; //@line 25636
 $219 = $216 & -3; //@line 25639
 if (!($216 & 2)) {
  $221 = $216; //@line 25641
 } else {
  HEAP32[$$pre20 >> 2] = $219; //@line 25643
  $221 = $219; //@line 25644
 }
 if ($221 | 0) {
  $288 = HEAP32[$14 >> 2] | 0; //@line 25648
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 25649
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($288, $16, 1e3); //@line 25650
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 388; //@line 25653
   $289 = $ReallocAsyncCtx6 + 4 | 0; //@line 25654
   HEAP32[$289 >> 2] = $21; //@line 25655
   $290 = $ReallocAsyncCtx6 + 8 | 0; //@line 25656
   HEAP32[$290 >> 2] = $2; //@line 25657
   $291 = $ReallocAsyncCtx6 + 12 | 0; //@line 25658
   HEAP32[$291 >> 2] = $8; //@line 25659
   $292 = $ReallocAsyncCtx6 + 16 | 0; //@line 25660
   HEAP32[$292 >> 2] = $10; //@line 25661
   $293 = $ReallocAsyncCtx6 + 20 | 0; //@line 25662
   HEAP32[$293 >> 2] = $12; //@line 25663
   sp = STACKTOP; //@line 25664
   STACKTOP = sp; //@line 25665
   return;
  }
  ___async_unwind = 0; //@line 25667
  HEAP32[$ReallocAsyncCtx6 >> 2] = 388; //@line 25668
  $289 = $ReallocAsyncCtx6 + 4 | 0; //@line 25669
  HEAP32[$289 >> 2] = $21; //@line 25670
  $290 = $ReallocAsyncCtx6 + 8 | 0; //@line 25671
  HEAP32[$290 >> 2] = $2; //@line 25672
  $291 = $ReallocAsyncCtx6 + 12 | 0; //@line 25673
  HEAP32[$291 >> 2] = $8; //@line 25674
  $292 = $ReallocAsyncCtx6 + 16 | 0; //@line 25675
  HEAP32[$292 >> 2] = $10; //@line 25676
  $293 = $ReallocAsyncCtx6 + 20 | 0; //@line 25677
  HEAP32[$293 >> 2] = $12; //@line 25678
  sp = STACKTOP; //@line 25679
  STACKTOP = sp; //@line 25680
  return;
 }
 $222 = HEAP8[$21 >> 0] | 0; //@line 25682
 if ($222 & 1) {
  HEAP8[$21 >> 0] = $222 & -2; //@line 25687
  $227 = HEAP32[$2 + 1324 >> 2] | 0; //@line 25689
  $229 = __ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0; //@line 25691
  $230 = $227 + 12 | 0; //@line 25692
  $231 = HEAP32[$230 >> 2] | 0; //@line 25693
  if (!$231) {
   $ReallocAsyncCtx16 = _emscripten_realloc_async_context(44) | 0; //@line 25696
   _mbed_assert_internal(15615, 15620, 1102); //@line 25697
   if (___async) {
    HEAP32[$ReallocAsyncCtx16 >> 2] = 384; //@line 25700
    $233 = $ReallocAsyncCtx16 + 4 | 0; //@line 25701
    HEAP32[$233 >> 2] = $21; //@line 25702
    $234 = $ReallocAsyncCtx16 + 8 | 0; //@line 25703
    HEAP32[$234 >> 2] = $2; //@line 25704
    $235 = $ReallocAsyncCtx16 + 12 | 0; //@line 25705
    HEAP32[$235 >> 2] = $230; //@line 25706
    $236 = $ReallocAsyncCtx16 + 16 | 0; //@line 25707
    HEAP32[$236 >> 2] = $227; //@line 25708
    $237 = $ReallocAsyncCtx16 + 20 | 0; //@line 25709
    HEAP32[$237 >> 2] = $229; //@line 25710
    $238 = $ReallocAsyncCtx16 + 24 | 0; //@line 25711
    HEAP32[$238 >> 2] = $8; //@line 25712
    $239 = $ReallocAsyncCtx16 + 28 | 0; //@line 25713
    HEAP32[$239 >> 2] = $10; //@line 25714
    $240 = $ReallocAsyncCtx16 + 32 | 0; //@line 25715
    HEAP32[$240 >> 2] = $12; //@line 25716
    $241 = $ReallocAsyncCtx16 + 36 | 0; //@line 25717
    HEAP32[$241 >> 2] = $4; //@line 25718
    $242 = $ReallocAsyncCtx16 + 40 | 0; //@line 25719
    HEAP32[$242 >> 2] = $6; //@line 25720
    sp = STACKTOP; //@line 25721
    STACKTOP = sp; //@line 25722
    return;
   }
   ___async_unwind = 0; //@line 25724
   HEAP32[$ReallocAsyncCtx16 >> 2] = 384; //@line 25725
   $233 = $ReallocAsyncCtx16 + 4 | 0; //@line 25726
   HEAP32[$233 >> 2] = $21; //@line 25727
   $234 = $ReallocAsyncCtx16 + 8 | 0; //@line 25728
   HEAP32[$234 >> 2] = $2; //@line 25729
   $235 = $ReallocAsyncCtx16 + 12 | 0; //@line 25730
   HEAP32[$235 >> 2] = $230; //@line 25731
   $236 = $ReallocAsyncCtx16 + 16 | 0; //@line 25732
   HEAP32[$236 >> 2] = $227; //@line 25733
   $237 = $ReallocAsyncCtx16 + 20 | 0; //@line 25734
   HEAP32[$237 >> 2] = $229; //@line 25735
   $238 = $ReallocAsyncCtx16 + 24 | 0; //@line 25736
   HEAP32[$238 >> 2] = $8; //@line 25737
   $239 = $ReallocAsyncCtx16 + 28 | 0; //@line 25738
   HEAP32[$239 >> 2] = $10; //@line 25739
   $240 = $ReallocAsyncCtx16 + 32 | 0; //@line 25740
   HEAP32[$240 >> 2] = $12; //@line 25741
   $241 = $ReallocAsyncCtx16 + 36 | 0; //@line 25742
   HEAP32[$241 >> 2] = $4; //@line 25743
   $242 = $ReallocAsyncCtx16 + 40 | 0; //@line 25744
   HEAP32[$242 >> 2] = $6; //@line 25745
   sp = STACKTOP; //@line 25746
   STACKTOP = sp; //@line 25747
   return;
  } else {
   $243 = HEAP32[$231 >> 2] | 0; //@line 25749
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 25750
   FUNCTION_TABLE_vii[$243 & 31]($227, $229); //@line 25751
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 385; //@line 25754
    $244 = $ReallocAsyncCtx2 + 4 | 0; //@line 25755
    HEAP32[$244 >> 2] = $21; //@line 25756
    $245 = $ReallocAsyncCtx2 + 8 | 0; //@line 25757
    HEAP32[$245 >> 2] = $2; //@line 25758
    $246 = $ReallocAsyncCtx2 + 12 | 0; //@line 25759
    HEAP32[$246 >> 2] = $8; //@line 25760
    $247 = $ReallocAsyncCtx2 + 16 | 0; //@line 25761
    HEAP32[$247 >> 2] = $10; //@line 25762
    $248 = $ReallocAsyncCtx2 + 20 | 0; //@line 25763
    HEAP32[$248 >> 2] = $12; //@line 25764
    $249 = $ReallocAsyncCtx2 + 24 | 0; //@line 25765
    HEAP32[$249 >> 2] = $4; //@line 25766
    $250 = $ReallocAsyncCtx2 + 28 | 0; //@line 25767
    HEAP32[$250 >> 2] = $6; //@line 25768
    sp = STACKTOP; //@line 25769
    STACKTOP = sp; //@line 25770
    return;
   }
   ___async_unwind = 0; //@line 25772
   HEAP32[$ReallocAsyncCtx2 >> 2] = 385; //@line 25773
   $244 = $ReallocAsyncCtx2 + 4 | 0; //@line 25774
   HEAP32[$244 >> 2] = $21; //@line 25775
   $245 = $ReallocAsyncCtx2 + 8 | 0; //@line 25776
   HEAP32[$245 >> 2] = $2; //@line 25777
   $246 = $ReallocAsyncCtx2 + 12 | 0; //@line 25778
   HEAP32[$246 >> 2] = $8; //@line 25779
   $247 = $ReallocAsyncCtx2 + 16 | 0; //@line 25780
   HEAP32[$247 >> 2] = $10; //@line 25781
   $248 = $ReallocAsyncCtx2 + 20 | 0; //@line 25782
   HEAP32[$248 >> 2] = $12; //@line 25783
   $249 = $ReallocAsyncCtx2 + 24 | 0; //@line 25784
   HEAP32[$249 >> 2] = $4; //@line 25785
   $250 = $ReallocAsyncCtx2 + 28 | 0; //@line 25786
   HEAP32[$250 >> 2] = $6; //@line 25787
   sp = STACKTOP; //@line 25788
   STACKTOP = sp; //@line 25789
   return;
  }
 }
 if ($222 & 8) {
  HEAP8[$21 >> 0] = $222 & -9; //@line 25796
  $255 = HEAP32[$2 + 1324 >> 2] | 0; //@line 25798
  $256 = $255 + 32 | 0; //@line 25799
  $258 = __ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0; //@line 25801
  $259 = $255 + 44 | 0; //@line 25802
  $260 = HEAP32[$259 >> 2] | 0; //@line 25803
  if (!$260) {
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(44) | 0; //@line 25806
   _mbed_assert_internal(15615, 15620, 1102); //@line 25807
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 386; //@line 25810
    $262 = $ReallocAsyncCtx15 + 4 | 0; //@line 25811
    HEAP32[$262 >> 2] = $21; //@line 25812
    $263 = $ReallocAsyncCtx15 + 8 | 0; //@line 25813
    HEAP32[$263 >> 2] = $2; //@line 25814
    $264 = $ReallocAsyncCtx15 + 12 | 0; //@line 25815
    HEAP32[$264 >> 2] = $256; //@line 25816
    $265 = $ReallocAsyncCtx15 + 16 | 0; //@line 25817
    HEAP32[$265 >> 2] = $258; //@line 25818
    $266 = $ReallocAsyncCtx15 + 20 | 0; //@line 25819
    HEAP32[$266 >> 2] = $8; //@line 25820
    $267 = $ReallocAsyncCtx15 + 24 | 0; //@line 25821
    HEAP32[$267 >> 2] = $10; //@line 25822
    $268 = $ReallocAsyncCtx15 + 28 | 0; //@line 25823
    HEAP32[$268 >> 2] = $12; //@line 25824
    $269 = $ReallocAsyncCtx15 + 32 | 0; //@line 25825
    HEAP32[$269 >> 2] = $4; //@line 25826
    $270 = $ReallocAsyncCtx15 + 36 | 0; //@line 25827
    HEAP32[$270 >> 2] = $6; //@line 25828
    $271 = $ReallocAsyncCtx15 + 40 | 0; //@line 25829
    HEAP32[$271 >> 2] = $259; //@line 25830
    sp = STACKTOP; //@line 25831
    STACKTOP = sp; //@line 25832
    return;
   }
   ___async_unwind = 0; //@line 25834
   HEAP32[$ReallocAsyncCtx15 >> 2] = 386; //@line 25835
   $262 = $ReallocAsyncCtx15 + 4 | 0; //@line 25836
   HEAP32[$262 >> 2] = $21; //@line 25837
   $263 = $ReallocAsyncCtx15 + 8 | 0; //@line 25838
   HEAP32[$263 >> 2] = $2; //@line 25839
   $264 = $ReallocAsyncCtx15 + 12 | 0; //@line 25840
   HEAP32[$264 >> 2] = $256; //@line 25841
   $265 = $ReallocAsyncCtx15 + 16 | 0; //@line 25842
   HEAP32[$265 >> 2] = $258; //@line 25843
   $266 = $ReallocAsyncCtx15 + 20 | 0; //@line 25844
   HEAP32[$266 >> 2] = $8; //@line 25845
   $267 = $ReallocAsyncCtx15 + 24 | 0; //@line 25846
   HEAP32[$267 >> 2] = $10; //@line 25847
   $268 = $ReallocAsyncCtx15 + 28 | 0; //@line 25848
   HEAP32[$268 >> 2] = $12; //@line 25849
   $269 = $ReallocAsyncCtx15 + 32 | 0; //@line 25850
   HEAP32[$269 >> 2] = $4; //@line 25851
   $270 = $ReallocAsyncCtx15 + 36 | 0; //@line 25852
   HEAP32[$270 >> 2] = $6; //@line 25853
   $271 = $ReallocAsyncCtx15 + 40 | 0; //@line 25854
   HEAP32[$271 >> 2] = $259; //@line 25855
   sp = STACKTOP; //@line 25856
   STACKTOP = sp; //@line 25857
   return;
  } else {
   $272 = HEAP32[$260 >> 2] | 0; //@line 25859
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 25860
   FUNCTION_TABLE_vii[$272 & 31]($256, $258); //@line 25861
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 387; //@line 25864
    $273 = $ReallocAsyncCtx3 + 4 | 0; //@line 25865
    HEAP32[$273 >> 2] = $21; //@line 25866
    $274 = $ReallocAsyncCtx3 + 8 | 0; //@line 25867
    HEAP32[$274 >> 2] = $2; //@line 25868
    $275 = $ReallocAsyncCtx3 + 12 | 0; //@line 25869
    HEAP32[$275 >> 2] = $8; //@line 25870
    $276 = $ReallocAsyncCtx3 + 16 | 0; //@line 25871
    HEAP32[$276 >> 2] = $10; //@line 25872
    $277 = $ReallocAsyncCtx3 + 20 | 0; //@line 25873
    HEAP32[$277 >> 2] = $12; //@line 25874
    $278 = $ReallocAsyncCtx3 + 24 | 0; //@line 25875
    HEAP32[$278 >> 2] = $4; //@line 25876
    $279 = $ReallocAsyncCtx3 + 28 | 0; //@line 25877
    HEAP32[$279 >> 2] = $6; //@line 25878
    sp = STACKTOP; //@line 25879
    STACKTOP = sp; //@line 25880
    return;
   }
   ___async_unwind = 0; //@line 25882
   HEAP32[$ReallocAsyncCtx3 >> 2] = 387; //@line 25883
   $273 = $ReallocAsyncCtx3 + 4 | 0; //@line 25884
   HEAP32[$273 >> 2] = $21; //@line 25885
   $274 = $ReallocAsyncCtx3 + 8 | 0; //@line 25886
   HEAP32[$274 >> 2] = $2; //@line 25887
   $275 = $ReallocAsyncCtx3 + 12 | 0; //@line 25888
   HEAP32[$275 >> 2] = $8; //@line 25889
   $276 = $ReallocAsyncCtx3 + 16 | 0; //@line 25890
   HEAP32[$276 >> 2] = $10; //@line 25891
   $277 = $ReallocAsyncCtx3 + 20 | 0; //@line 25892
   HEAP32[$277 >> 2] = $12; //@line 25893
   $278 = $ReallocAsyncCtx3 + 24 | 0; //@line 25894
   HEAP32[$278 >> 2] = $4; //@line 25895
   $279 = $ReallocAsyncCtx3 + 28 | 0; //@line 25896
   HEAP32[$279 >> 2] = $6; //@line 25897
   sp = STACKTOP; //@line 25898
   STACKTOP = sp; //@line 25899
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($2 + 4 | 0) | 0) {
  _mbed_tracef(16, 13704, 13865, $4); //@line 25905
  HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($2 + 264 | 0) | 0) >> 2] = 4; //@line 25908
  $285 = HEAP8[$21 >> 0] | 16; //@line 25910
  HEAP8[$21 >> 0] = $285; //@line 25911
  $287 = $285; //@line 25912
 } else {
  $287 = HEAP8[$21 >> 0] | 0; //@line 25915
 }
 $286 = $287 & -33; //@line 25917
 HEAP8[$21 >> 0] = $286; //@line 25918
 do {
  if (!($286 & 2)) {
   $327 = $286; //@line 25923
  } else {
   $296 = $286 & -3; //@line 25925
   HEAP8[$21 >> 0] = $296; //@line 25926
   if ((HEAP32[$2 + 360 >> 2] | 0) == 2) {
    _mbed_tracef(16, 13704, 13723, $10); //@line 25931
    $301 = HEAP32[$2 + 1328 >> 2] | 0; //@line 25933
    HEAP32[$8 >> 2] = 279; //@line 25934
    HEAP32[$8 + 4 >> 2] = 0; //@line 25936
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 25937
    HEAP32[$$byval_copy23 >> 2] = HEAP32[$8 >> 2]; //@line 25938
    HEAP32[$$byval_copy23 + 4 >> 2] = HEAP32[$8 + 4 >> 2]; //@line 25938
    $302 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($301, $2, $$byval_copy23) | 0; //@line 25939
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 389; //@line 25942
     $303 = $ReallocAsyncCtx8 + 4 | 0; //@line 25943
     HEAP32[$303 >> 2] = $21; //@line 25944
     $304 = $ReallocAsyncCtx8 + 8 | 0; //@line 25945
     HEAP32[$304 >> 2] = $2; //@line 25946
     $305 = $ReallocAsyncCtx8 + 12 | 0; //@line 25947
     HEAP32[$305 >> 2] = $8; //@line 25948
     sp = STACKTOP; //@line 25949
     STACKTOP = sp; //@line 25950
     return;
    }
    HEAP32[___async_retval >> 2] = $302; //@line 25953
    ___async_unwind = 0; //@line 25954
    HEAP32[$ReallocAsyncCtx8 >> 2] = 389; //@line 25955
    $303 = $ReallocAsyncCtx8 + 4 | 0; //@line 25956
    HEAP32[$303 >> 2] = $21; //@line 25957
    $304 = $ReallocAsyncCtx8 + 8 | 0; //@line 25958
    HEAP32[$304 >> 2] = $2; //@line 25959
    $305 = $ReallocAsyncCtx8 + 12 | 0; //@line 25960
    HEAP32[$305 >> 2] = $8; //@line 25961
    sp = STACKTOP; //@line 25962
    STACKTOP = sp; //@line 25963
    return;
   }
   if ($296 & 4) {
    $325 = $296 & -5; //@line 25968
    HEAP8[$21 >> 0] = $325; //@line 25969
    $327 = $325; //@line 25970
    break;
   }
   $310 = HEAP32[$2 + 1324 >> 2] | 0; //@line 25974
   $311 = $310 + 16 | 0; //@line 25975
   $313 = __ZN11LoRaMacMcps14get_indicationEv($2 + 288 | 0) | 0; //@line 25977
   $314 = $310 + 28 | 0; //@line 25978
   $315 = HEAP32[$314 >> 2] | 0; //@line 25979
   if (!$315) {
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 25982
    _mbed_assert_internal(15615, 15620, 1102); //@line 25983
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 391; //@line 25986
     $317 = $ReallocAsyncCtx13 + 4 | 0; //@line 25987
     HEAP32[$317 >> 2] = $314; //@line 25988
     $318 = $ReallocAsyncCtx13 + 8 | 0; //@line 25989
     HEAP32[$318 >> 2] = $311; //@line 25990
     $319 = $ReallocAsyncCtx13 + 12 | 0; //@line 25991
     HEAP32[$319 >> 2] = $313; //@line 25992
     $320 = $ReallocAsyncCtx13 + 16 | 0; //@line 25993
     HEAP32[$320 >> 2] = $21; //@line 25994
     $321 = $ReallocAsyncCtx13 + 20 | 0; //@line 25995
     HEAP32[$321 >> 2] = $2; //@line 25996
     sp = STACKTOP; //@line 25997
     STACKTOP = sp; //@line 25998
     return;
    }
    ___async_unwind = 0; //@line 26000
    HEAP32[$ReallocAsyncCtx13 >> 2] = 391; //@line 26001
    $317 = $ReallocAsyncCtx13 + 4 | 0; //@line 26002
    HEAP32[$317 >> 2] = $314; //@line 26003
    $318 = $ReallocAsyncCtx13 + 8 | 0; //@line 26004
    HEAP32[$318 >> 2] = $311; //@line 26005
    $319 = $ReallocAsyncCtx13 + 12 | 0; //@line 26006
    HEAP32[$319 >> 2] = $313; //@line 26007
    $320 = $ReallocAsyncCtx13 + 16 | 0; //@line 26008
    HEAP32[$320 >> 2] = $21; //@line 26009
    $321 = $ReallocAsyncCtx13 + 20 | 0; //@line 26010
    HEAP32[$321 >> 2] = $2; //@line 26011
    sp = STACKTOP; //@line 26012
    STACKTOP = sp; //@line 26013
    return;
   } else {
    $322 = HEAP32[$315 >> 2] | 0; //@line 26015
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 26016
    FUNCTION_TABLE_vii[$322 & 31]($311, $313); //@line 26017
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 392; //@line 26020
     $323 = $ReallocAsyncCtx4 + 4 | 0; //@line 26021
     HEAP32[$323 >> 2] = $21; //@line 26022
     $324 = $ReallocAsyncCtx4 + 8 | 0; //@line 26023
     HEAP32[$324 >> 2] = $2; //@line 26024
     sp = STACKTOP; //@line 26025
     STACKTOP = sp; //@line 26026
     return;
    }
    ___async_unwind = 0; //@line 26028
    HEAP32[$ReallocAsyncCtx4 >> 2] = 392; //@line 26029
    $323 = $ReallocAsyncCtx4 + 4 | 0; //@line 26030
    HEAP32[$323 >> 2] = $21; //@line 26031
    $324 = $ReallocAsyncCtx4 + 8 | 0; //@line 26032
    HEAP32[$324 >> 2] = $2; //@line 26033
    sp = STACKTOP; //@line 26034
    STACKTOP = sp; //@line 26035
    return;
   }
  }
 } while (0);
 if (!($327 & 16)) {
  STACKTOP = sp; //@line 26042
  return;
 }
 HEAP8[$21 >> 0] = $327 & -17; //@line 26045
 $331 = HEAP32[$2 + 1324 >> 2] | 0; //@line 26047
 $332 = $331 + 48 | 0; //@line 26048
 $334 = __ZN11LoRaMacMlme14get_indicationEv($2 + 264 | 0) | 0; //@line 26050
 $335 = $331 + 60 | 0; //@line 26051
 $336 = HEAP32[$335 >> 2] | 0; //@line 26052
 if (!$336) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 26055
  _mbed_assert_internal(15615, 15620, 1102); //@line 26056
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 393; //@line 26059
   $338 = $ReallocAsyncCtx12 + 4 | 0; //@line 26060
   HEAP32[$338 >> 2] = $335; //@line 26061
   $339 = $ReallocAsyncCtx12 + 8 | 0; //@line 26062
   HEAP32[$339 >> 2] = $332; //@line 26063
   $340 = $ReallocAsyncCtx12 + 12 | 0; //@line 26064
   HEAP32[$340 >> 2] = $334; //@line 26065
   sp = STACKTOP; //@line 26066
   STACKTOP = sp; //@line 26067
   return;
  }
  ___async_unwind = 0; //@line 26069
  HEAP32[$ReallocAsyncCtx12 >> 2] = 393; //@line 26070
  $338 = $ReallocAsyncCtx12 + 4 | 0; //@line 26071
  HEAP32[$338 >> 2] = $335; //@line 26072
  $339 = $ReallocAsyncCtx12 + 8 | 0; //@line 26073
  HEAP32[$339 >> 2] = $332; //@line 26074
  $340 = $ReallocAsyncCtx12 + 12 | 0; //@line 26075
  HEAP32[$340 >> 2] = $334; //@line 26076
  sp = STACKTOP; //@line 26077
  STACKTOP = sp; //@line 26078
  return;
 } else {
  $341 = HEAP32[$336 >> 2] | 0; //@line 26080
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 26081
  FUNCTION_TABLE_vii[$341 & 31]($332, $334); //@line 26082
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 394; //@line 26085
   sp = STACKTOP; //@line 26086
   STACKTOP = sp; //@line 26087
   return;
  }
  ___async_unwind = 0; //@line 26089
  HEAP32[$ReallocAsyncCtx5 >> 2] = 394; //@line 26090
  sp = STACKTOP; //@line 26091
  STACKTOP = sp; //@line 26092
  return;
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_112($0) {
 $0 = $0 | 0;
 var $$$1177 = 0, $$1$off0 = 0, $$1$off0$expand_i1_val = 0, $$1$off0$expand_i1_val52 = 0, $$1$off0$expand_i1_val54 = 0, $$3$off0230 = 0, $$byval_copy = 0, $$byval_copy48 = 0, $$byval_copy49 = 0, $$byval_copy50 = 0, $$sink = 0, $10 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $112 = 0, $115 = 0, $117 = 0, $118 = 0, $12 = 0, $134 = 0, $137 = 0, $138 = 0, $14 = 0, $145 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $160 = 0, $163 = 0, $165 = 0, $166 = 0, $168 = 0, $170 = 0, $171 = 0, $175 = 0, $176 = 0, $18 = 0, $183 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $198 = 0, $2 = 0, $20 = 0, $201 = 0, $203 = 0, $204 = 0, $211 = 0, $213 = 0, $214 = 0, $215 = 0, $219 = 0, $22 = 0, $223 = 0, $228 = 0, $229 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $245 = 0, $246 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $270 = 0, $271 = 0, $28 = 0, $283 = 0, $284 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $30 = 0, $303 = 0, $306 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $317 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $327 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $340 = 0, $342 = 0, $345 = 0, $347 = 0, $348 = 0, $349 = 0, $352 = 0, $354 = 0, $355 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $46 = 0, $48 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $88 = 0, $92 = 0, $94 = 0, $97 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx19 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx27 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 25447
 STACKTOP = STACKTOP + 32 | 0; //@line 25448
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 25448
 $$byval_copy50 = sp + 24 | 0; //@line 25449
 $$byval_copy49 = sp + 16 | 0; //@line 25450
 $$byval_copy48 = sp + 8 | 0; //@line 25451
 $$byval_copy = sp; //@line 25452
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25454
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25456
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25458
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25460
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 25462
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25464
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25466
 $16 = HEAP8[$0 + 32 >> 0] | 0; //@line 25468
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 25470
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 25472
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 25474
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 25478
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 25480
 $30 = HEAP8[$0 + 60 >> 0] | 0; //@line 25482
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 25490
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 25492
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 25494
 $46 = HEAP8[$0 + 92 >> 0] | 0; //@line 25498
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 25500
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 25504
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 25506
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 25508
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 25510
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 25512
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 25514
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 25516
 $66 = HEAP8[$0 + 132 >> 0] | 0; //@line 25518
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 25520
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 25522
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 25524
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 25526
 $76 = HEAP8[$0 + 152 >> 0] | 0; //@line 25528
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 25530
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 25532
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 25534
 $88 = (HEAP32[$0 + 172 >> 2] | 0) == (HEAP32[HEAP32[$0 + 48 >> 2] >> 2] | 0); //@line 25540
 $$$1177 = $88 ? HEAP32[$0 + 88 >> 2] | 0 : HEAP32[$0 + 72 >> 2] | 0; //@line 25541
 $92 = $64 >>> 0 < ((__ZN7LoRaPHY29get_maximum_frame_counter_gapEv(HEAP32[$82 >> 2] | 0) | 0) & 65535) >>> 0; //@line 25545
 $94 = (__ZN11LoRaMacMcps14get_indicationEv($42) | 0) + 4 | 0; //@line 25547
 if (!$92) {
  HEAP32[$94 >> 2] = 10; //@line 25549
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($42) | 0) + 32 >> 2] = $$$1177; //@line 25552
  _mbed_tracef(16, 13704, 13843, $78); //@line 25553
  $97 = $6 + 968 | 0; //@line 25554
  HEAP32[$97 >> 2] = HEAP32[$97 >> 2] | 64; //@line 25557
  if (!(HEAP8[$6 + 373 >> 0] | 0)) {
   $112 = $6 + 944 | 0; //@line 25562
   HEAP8[$112 >> 0] = HEAP8[$112 >> 0] | 34; //@line 25565
   $115 = HEAP32[$56 >> 2] | 0; //@line 25566
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 25568
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($115, $6 + 996 | 0, 1); //@line 25569
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 320; //@line 25572
    $117 = $ReallocAsyncCtx10 + 4 | 0; //@line 25573
    HEAP32[$117 >> 2] = $62; //@line 25574
    $118 = $ReallocAsyncCtx10 + 8 | 0; //@line 25575
    HEAP32[$118 >> 2] = $74; //@line 25576
    sp = STACKTOP; //@line 25577
    STACKTOP = sp; //@line 25578
    return;
   }
   ___async_unwind = 0; //@line 25580
   HEAP32[$ReallocAsyncCtx10 >> 2] = 320; //@line 25581
   $117 = $ReallocAsyncCtx10 + 4 | 0; //@line 25582
   HEAP32[$117 >> 2] = $62; //@line 25583
   $118 = $ReallocAsyncCtx10 + 8 | 0; //@line 25584
   HEAP32[$118 >> 2] = $74; //@line 25585
   sp = STACKTOP; //@line 25586
   STACKTOP = sp; //@line 25587
   return;
  } else {
   $104 = HEAP32[$6 + 1328 >> 2] | 0; //@line 25590
   HEAP32[$22 >> 2] = 304; //@line 25591
   HEAP32[$22 + 4 >> 2] = 0; //@line 25593
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(24) | 0; //@line 25594
   HEAP32[$$byval_copy >> 2] = HEAP32[$22 >> 2]; //@line 25595
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$22 + 4 >> 2]; //@line 25595
   $105 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($104, $6, $$byval_copy) | 0; //@line 25596
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 318; //@line 25599
    $106 = $ReallocAsyncCtx22 + 4 | 0; //@line 25600
    HEAP32[$106 >> 2] = $22; //@line 25601
    $107 = $ReallocAsyncCtx22 + 8 | 0; //@line 25602
    HEAP32[$107 >> 2] = $6; //@line 25603
    $108 = $ReallocAsyncCtx22 + 12 | 0; //@line 25604
    HEAP32[$108 >> 2] = $56; //@line 25605
    $109 = $ReallocAsyncCtx22 + 16 | 0; //@line 25606
    HEAP32[$109 >> 2] = $62; //@line 25607
    $110 = $ReallocAsyncCtx22 + 20 | 0; //@line 25608
    HEAP32[$110 >> 2] = $74; //@line 25609
    sp = STACKTOP; //@line 25610
    STACKTOP = sp; //@line 25611
    return;
   }
   HEAP32[___async_retval >> 2] = $105; //@line 25614
   ___async_unwind = 0; //@line 25615
   HEAP32[$ReallocAsyncCtx22 >> 2] = 318; //@line 25616
   $106 = $ReallocAsyncCtx22 + 4 | 0; //@line 25617
   HEAP32[$106 >> 2] = $22; //@line 25618
   $107 = $ReallocAsyncCtx22 + 8 | 0; //@line 25619
   HEAP32[$107 >> 2] = $6; //@line 25620
   $108 = $ReallocAsyncCtx22 + 12 | 0; //@line 25621
   HEAP32[$108 >> 2] = $56; //@line 25622
   $109 = $ReallocAsyncCtx22 + 16 | 0; //@line 25623
   HEAP32[$109 >> 2] = $62; //@line 25624
   $110 = $ReallocAsyncCtx22 + 20 | 0; //@line 25625
   HEAP32[$110 >> 2] = $74; //@line 25626
   sp = STACKTOP; //@line 25627
   STACKTOP = sp; //@line 25628
   return;
  }
 }
 if (!$88) {
  HEAP32[$94 >> 2] = 12; //@line 25632
  _mbed_tracef(16, 13704, 13843, $58); //@line 25633
  $327 = $6 + 968 | 0; //@line 25634
  HEAP32[$327 >> 2] = HEAP32[$327 >> 2] | 64; //@line 25637
  if (!(HEAP8[$6 + 373 >> 0] | 0)) {
   $342 = $6 + 944 | 0; //@line 25642
   HEAP8[$342 >> 0] = HEAP8[$342 >> 0] | 34; //@line 25645
   $345 = HEAP32[$56 >> 2] | 0; //@line 25646
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 25648
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($345, $6 + 996 | 0, 1); //@line 25649
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 334; //@line 25652
    $347 = $ReallocAsyncCtx7 + 4 | 0; //@line 25653
    HEAP32[$347 >> 2] = $62; //@line 25654
    $348 = $ReallocAsyncCtx7 + 8 | 0; //@line 25655
    HEAP32[$348 >> 2] = $74; //@line 25656
    sp = STACKTOP; //@line 25657
    STACKTOP = sp; //@line 25658
    return;
   }
   ___async_unwind = 0; //@line 25660
   HEAP32[$ReallocAsyncCtx7 >> 2] = 334; //@line 25661
   $347 = $ReallocAsyncCtx7 + 4 | 0; //@line 25662
   HEAP32[$347 >> 2] = $62; //@line 25663
   $348 = $ReallocAsyncCtx7 + 8 | 0; //@line 25664
   HEAP32[$348 >> 2] = $74; //@line 25665
   sp = STACKTOP; //@line 25666
   STACKTOP = sp; //@line 25667
   return;
  } else {
   $334 = HEAP32[$6 + 1328 >> 2] | 0; //@line 25670
   HEAP32[$52 >> 2] = 304; //@line 25671
   HEAP32[$52 + 4 >> 2] = 0; //@line 25673
   $ReallocAsyncCtx19 = _emscripten_realloc_async_context(24) | 0; //@line 25674
   HEAP32[$$byval_copy50 >> 2] = HEAP32[$52 >> 2]; //@line 25675
   HEAP32[$$byval_copy50 + 4 >> 2] = HEAP32[$52 + 4 >> 2]; //@line 25675
   $335 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($334, $6, $$byval_copy50) | 0; //@line 25676
   if (___async) {
    HEAP32[$ReallocAsyncCtx19 >> 2] = 332; //@line 25679
    $336 = $ReallocAsyncCtx19 + 4 | 0; //@line 25680
    HEAP32[$336 >> 2] = $52; //@line 25681
    $337 = $ReallocAsyncCtx19 + 8 | 0; //@line 25682
    HEAP32[$337 >> 2] = $6; //@line 25683
    $338 = $ReallocAsyncCtx19 + 12 | 0; //@line 25684
    HEAP32[$338 >> 2] = $56; //@line 25685
    $339 = $ReallocAsyncCtx19 + 16 | 0; //@line 25686
    HEAP32[$339 >> 2] = $62; //@line 25687
    $340 = $ReallocAsyncCtx19 + 20 | 0; //@line 25688
    HEAP32[$340 >> 2] = $74; //@line 25689
    sp = STACKTOP; //@line 25690
    STACKTOP = sp; //@line 25691
    return;
   }
   HEAP32[___async_retval >> 2] = $335; //@line 25694
   ___async_unwind = 0; //@line 25695
   HEAP32[$ReallocAsyncCtx19 >> 2] = 332; //@line 25696
   $336 = $ReallocAsyncCtx19 + 4 | 0; //@line 25697
   HEAP32[$336 >> 2] = $52; //@line 25698
   $337 = $ReallocAsyncCtx19 + 8 | 0; //@line 25699
   HEAP32[$337 >> 2] = $6; //@line 25700
   $338 = $ReallocAsyncCtx19 + 12 | 0; //@line 25701
   HEAP32[$338 >> 2] = $56; //@line 25702
   $339 = $ReallocAsyncCtx19 + 16 | 0; //@line 25703
   HEAP32[$339 >> 2] = $62; //@line 25704
   $340 = $ReallocAsyncCtx19 + 20 | 0; //@line 25705
   HEAP32[$340 >> 2] = $74; //@line 25706
   sp = STACKTOP; //@line 25707
   STACKTOP = sp; //@line 25708
   return;
  }
 }
 HEAP32[$94 >> 2] = 0; //@line 25711
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($42) | 0) + 8 >> 0] = $46; //@line 25714
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($42) | 0) + 11 >> 0] = ($16 & 255) >>> 4 & 1; //@line 25719
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($42) | 0) + 12 >> 2] = 0; //@line 25722
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($42) | 0) + 16 >> 1] = 0; //@line 25725
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($42) | 0) + 32 >> 2] = $$$1177; //@line 25728
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($42) | 0) + 4 >> 2] = 0; //@line 25731
 HEAP32[$6 + 964 >> 2] = 0; //@line 25733
 $134 = $6 + 4 | 0; //@line 25734
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($134); //@line 25735
 do {
  if ($46 << 24 >> 24 == 1) {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($42) | 0) >> 2] = 2; //@line 25740
   $137 = $28 + 36 | 0; //@line 25741
   $138 = HEAP32[$137 >> 2] | 0; //@line 25742
   if (($138 | 0) != ($$$1177 | 0) | ($138 | 0) == 0) {
    $$1$off0 = 0; //@line 25747
    $$sink = $137; //@line 25747
   } else {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($42) | 0) + 4 >> 2] = 8; //@line 25751
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($42) | 0) + 32 >> 2] = $$$1177; //@line 25754
    _mbed_tracef(16, 13704, 13843, $40); //@line 25755
    $145 = $6 + 968 | 0; //@line 25756
    HEAP32[$145 >> 2] = HEAP32[$145 >> 2] | 64; //@line 25759
    if (!(HEAP8[$6 + 373 >> 0] | 0)) {
     $160 = $6 + 944 | 0; //@line 25764
     HEAP8[$160 >> 0] = HEAP8[$160 >> 0] | 34; //@line 25767
     $163 = HEAP32[$56 >> 2] | 0; //@line 25768
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 25770
     __ZN18LoRaWANTimeHandler5startER13timer_event_tj($163, $6 + 996 | 0, 1); //@line 25771
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 323; //@line 25774
      $165 = $ReallocAsyncCtx9 + 4 | 0; //@line 25775
      HEAP32[$165 >> 2] = $62; //@line 25776
      $166 = $ReallocAsyncCtx9 + 8 | 0; //@line 25777
      HEAP32[$166 >> 2] = $74; //@line 25778
      sp = STACKTOP; //@line 25779
      STACKTOP = sp; //@line 25780
      return;
     }
     ___async_unwind = 0; //@line 25782
     HEAP32[$ReallocAsyncCtx9 >> 2] = 323; //@line 25783
     $165 = $ReallocAsyncCtx9 + 4 | 0; //@line 25784
     HEAP32[$165 >> 2] = $62; //@line 25785
     $166 = $ReallocAsyncCtx9 + 8 | 0; //@line 25786
     HEAP32[$166 >> 2] = $74; //@line 25787
     sp = STACKTOP; //@line 25788
     STACKTOP = sp; //@line 25789
     return;
    } else {
     $152 = HEAP32[$6 + 1328 >> 2] | 0; //@line 25792
     HEAP32[$26 >> 2] = 304; //@line 25793
     HEAP32[$26 + 4 >> 2] = 0; //@line 25795
     $ReallocAsyncCtx21 = _emscripten_realloc_async_context(24) | 0; //@line 25796
     HEAP32[$$byval_copy48 >> 2] = HEAP32[$26 >> 2]; //@line 25797
     HEAP32[$$byval_copy48 + 4 >> 2] = HEAP32[$26 + 4 >> 2]; //@line 25797
     $153 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($152, $6, $$byval_copy48) | 0; //@line 25798
     if (___async) {
      HEAP32[$ReallocAsyncCtx21 >> 2] = 321; //@line 25801
      $154 = $ReallocAsyncCtx21 + 4 | 0; //@line 25802
      HEAP32[$154 >> 2] = $26; //@line 25803
      $155 = $ReallocAsyncCtx21 + 8 | 0; //@line 25804
      HEAP32[$155 >> 2] = $6; //@line 25805
      $156 = $ReallocAsyncCtx21 + 12 | 0; //@line 25806
      HEAP32[$156 >> 2] = $56; //@line 25807
      $157 = $ReallocAsyncCtx21 + 16 | 0; //@line 25808
      HEAP32[$157 >> 2] = $62; //@line 25809
      $158 = $ReallocAsyncCtx21 + 20 | 0; //@line 25810
      HEAP32[$158 >> 2] = $74; //@line 25811
      sp = STACKTOP; //@line 25812
      STACKTOP = sp; //@line 25813
      return;
     }
     HEAP32[___async_retval >> 2] = $153; //@line 25816
     ___async_unwind = 0; //@line 25817
     HEAP32[$ReallocAsyncCtx21 >> 2] = 321; //@line 25818
     $154 = $ReallocAsyncCtx21 + 4 | 0; //@line 25819
     HEAP32[$154 >> 2] = $26; //@line 25820
     $155 = $ReallocAsyncCtx21 + 8 | 0; //@line 25821
     HEAP32[$155 >> 2] = $6; //@line 25822
     $156 = $ReallocAsyncCtx21 + 12 | 0; //@line 25823
     HEAP32[$156 >> 2] = $56; //@line 25824
     $157 = $ReallocAsyncCtx21 + 16 | 0; //@line 25825
     HEAP32[$157 >> 2] = $62; //@line 25826
     $158 = $ReallocAsyncCtx21 + 20 | 0; //@line 25827
     HEAP32[$158 >> 2] = $74; //@line 25828
     sp = STACKTOP; //@line 25829
     STACKTOP = sp; //@line 25830
     return;
    }
   }
  } else {
   $168 = $6 + 374 | 0; //@line 25835
   if ($30 << 24 >> 24 == 5) {
    HEAP8[$168 >> 0] = 1; //@line 25837
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($42) | 0) >> 2] = 1; //@line 25839
    $170 = $6 + 960 | 0; //@line 25840
    $171 = HEAP32[$170 >> 2] | 0; //@line 25841
    $$1$off0 = ($171 | 0) != 0 & ($171 | 0) == ($$$1177 | 0); //@line 25845
    $$sink = $170; //@line 25845
    break;
   }
   HEAP8[$168 >> 0] = 0; //@line 25848
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($42) | 0) >> 2] = 0; //@line 25850
   $175 = $6 + 960 | 0; //@line 25851
   $176 = HEAP32[$175 >> 2] | 0; //@line 25852
   if (($176 | 0) != ($$$1177 | 0) | ($176 | 0) == 0) {
    $$1$off0 = 0; //@line 25857
    $$sink = $175; //@line 25857
   } else {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($42) | 0) + 4 >> 2] = 8; //@line 25861
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($42) | 0) + 32 >> 2] = $$$1177; //@line 25864
    _mbed_tracef(16, 13704, 13843, $8); //@line 25865
    $183 = $6 + 968 | 0; //@line 25866
    HEAP32[$183 >> 2] = HEAP32[$183 >> 2] | 64; //@line 25869
    if (!(HEAP8[$6 + 373 >> 0] | 0)) {
     $198 = $6 + 944 | 0; //@line 25874
     HEAP8[$198 >> 0] = HEAP8[$198 >> 0] | 34; //@line 25877
     $201 = HEAP32[$56 >> 2] | 0; //@line 25878
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 25880
     __ZN18LoRaWANTimeHandler5startER13timer_event_tj($201, $6 + 996 | 0, 1); //@line 25881
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 326; //@line 25884
      $203 = $ReallocAsyncCtx8 + 4 | 0; //@line 25885
      HEAP32[$203 >> 2] = $62; //@line 25886
      $204 = $ReallocAsyncCtx8 + 8 | 0; //@line 25887
      HEAP32[$204 >> 2] = $74; //@line 25888
      sp = STACKTOP; //@line 25889
      STACKTOP = sp; //@line 25890
      return;
     }
     ___async_unwind = 0; //@line 25892
     HEAP32[$ReallocAsyncCtx8 >> 2] = 326; //@line 25893
     $203 = $ReallocAsyncCtx8 + 4 | 0; //@line 25894
     HEAP32[$203 >> 2] = $62; //@line 25895
     $204 = $ReallocAsyncCtx8 + 8 | 0; //@line 25896
     HEAP32[$204 >> 2] = $74; //@line 25897
     sp = STACKTOP; //@line 25898
     STACKTOP = sp; //@line 25899
     return;
    } else {
     $190 = HEAP32[$6 + 1328 >> 2] | 0; //@line 25902
     HEAP32[$20 >> 2] = 304; //@line 25903
     HEAP32[$20 + 4 >> 2] = 0; //@line 25905
     $ReallocAsyncCtx20 = _emscripten_realloc_async_context(24) | 0; //@line 25906
     HEAP32[$$byval_copy49 >> 2] = HEAP32[$20 >> 2]; //@line 25907
     HEAP32[$$byval_copy49 + 4 >> 2] = HEAP32[$20 + 4 >> 2]; //@line 25907
     $191 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($190, $6, $$byval_copy49) | 0; //@line 25908
     if (___async) {
      HEAP32[$ReallocAsyncCtx20 >> 2] = 324; //@line 25911
      $192 = $ReallocAsyncCtx20 + 4 | 0; //@line 25912
      HEAP32[$192 >> 2] = $20; //@line 25913
      $193 = $ReallocAsyncCtx20 + 8 | 0; //@line 25914
      HEAP32[$193 >> 2] = $6; //@line 25915
      $194 = $ReallocAsyncCtx20 + 12 | 0; //@line 25916
      HEAP32[$194 >> 2] = $56; //@line 25917
      $195 = $ReallocAsyncCtx20 + 16 | 0; //@line 25918
      HEAP32[$195 >> 2] = $62; //@line 25919
      $196 = $ReallocAsyncCtx20 + 20 | 0; //@line 25920
      HEAP32[$196 >> 2] = $74; //@line 25921
      sp = STACKTOP; //@line 25922
      STACKTOP = sp; //@line 25923
      return;
     }
     HEAP32[___async_retval >> 2] = $191; //@line 25926
     ___async_unwind = 0; //@line 25927
     HEAP32[$ReallocAsyncCtx20 >> 2] = 324; //@line 25928
     $192 = $ReallocAsyncCtx20 + 4 | 0; //@line 25929
     HEAP32[$192 >> 2] = $20; //@line 25930
     $193 = $ReallocAsyncCtx20 + 8 | 0; //@line 25931
     HEAP32[$193 >> 2] = $6; //@line 25932
     $194 = $ReallocAsyncCtx20 + 12 | 0; //@line 25933
     HEAP32[$194 >> 2] = $56; //@line 25934
     $195 = $ReallocAsyncCtx20 + 16 | 0; //@line 25935
     HEAP32[$195 >> 2] = $62; //@line 25936
     $196 = $ReallocAsyncCtx20 + 20 | 0; //@line 25937
     HEAP32[$196 >> 2] = $74; //@line 25938
     sp = STACKTOP; //@line 25939
     STACKTOP = sp; //@line 25940
     return;
    }
   }
  }
 } while (0);
 HEAP32[$$sink >> 2] = $$$1177; //@line 25945
 if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($42) | 0) >> 2] | 0) == 1) {
  if ($16 & 32) {
   __ZN14LoRaMacCommand20clear_command_bufferEv($134); //@line 25953
  }
 } else {
  __ZN14LoRaMacCommand20clear_command_bufferEv($134); //@line 25956
 }
 do {
  if (($14 | 0) > ($68 | 0)) {
   $211 = $72 + 9 | 0; //@line 25961
   $213 = HEAP8[$2 + $68 >> 0] | 0; //@line 25963
   $214 = $14 - $211 | 0; //@line 25964
   $215 = $214 & 255; //@line 25965
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($42) | 0) + 9 >> 0] = $213; //@line 25968
   $219 = $76 << 24 >> 24 == 0; //@line 25970
   if (!($213 << 24 >> 24)) {
    if (!$219) {
     $$3$off0230 = 6; //@line 25973
     break;
    }
    $223 = $6 + 638 | 0; //@line 25979
    if (__Z15decrypt_payloadPKhtS0_jhjPh($2 + $211 | 0, $214 & 255, $4, $54, 1, $$$1177, $223) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($42) | 0) + 4 >> 2] = 13; //@line 25985
    }
    $228 = $6 + 264 | 0; //@line 25987
    $229 = __ZN11LoRaMacMlme16get_confirmationEv($228) | 0; //@line 25988
    $231 = HEAP32[$82 >> 2] | 0; //@line 25990
    $ReallocAsyncCtx17 = _emscripten_realloc_async_context(44) | 0; //@line 25991
    $232 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($134, $223, 0, $215, $10, $229, $6 + 1096 | 0, $231) | 0; //@line 25992
    if (___async) {
     HEAP32[$ReallocAsyncCtx17 >> 2] = 327; //@line 25995
     $233 = $ReallocAsyncCtx17 + 4 | 0; //@line 25996
     $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 25997
     HEAP8[$233 >> 0] = $$1$off0$expand_i1_val; //@line 25998
     $234 = $ReallocAsyncCtx17 + 5 | 0; //@line 25999
     HEAP8[$234 >> 0] = $16; //@line 26000
     $235 = $ReallocAsyncCtx17 + 8 | 0; //@line 26001
     HEAP32[$235 >> 2] = $42; //@line 26002
     $236 = $ReallocAsyncCtx17 + 12 | 0; //@line 26003
     HEAP32[$236 >> 2] = $56; //@line 26004
     $237 = $ReallocAsyncCtx17 + 16 | 0; //@line 26005
     HEAP32[$237 >> 2] = $6; //@line 26006
     $238 = $ReallocAsyncCtx17 + 20 | 0; //@line 26007
     HEAP32[$238 >> 2] = $62; //@line 26008
     $239 = $ReallocAsyncCtx17 + 24 | 0; //@line 26009
     HEAP32[$239 >> 2] = $74; //@line 26010
     $240 = $ReallocAsyncCtx17 + 28 | 0; //@line 26011
     HEAP32[$240 >> 2] = $80; //@line 26012
     $241 = $ReallocAsyncCtx17 + 32 | 0; //@line 26013
     HEAP32[$241 >> 2] = $60; //@line 26014
     $242 = $ReallocAsyncCtx17 + 36 | 0; //@line 26015
     HEAP32[$242 >> 2] = $228; //@line 26016
     $243 = $ReallocAsyncCtx17 + 40 | 0; //@line 26017
     HEAP32[$243 >> 2] = $134; //@line 26018
     sp = STACKTOP; //@line 26019
     STACKTOP = sp; //@line 26020
     return;
    }
    HEAP32[___async_retval >> 2] = $232; //@line 26023
    ___async_unwind = 0; //@line 26024
    HEAP32[$ReallocAsyncCtx17 >> 2] = 327; //@line 26025
    $233 = $ReallocAsyncCtx17 + 4 | 0; //@line 26026
    $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 26027
    HEAP8[$233 >> 0] = $$1$off0$expand_i1_val; //@line 26028
    $234 = $ReallocAsyncCtx17 + 5 | 0; //@line 26029
    HEAP8[$234 >> 0] = $16; //@line 26030
    $235 = $ReallocAsyncCtx17 + 8 | 0; //@line 26031
    HEAP32[$235 >> 2] = $42; //@line 26032
    $236 = $ReallocAsyncCtx17 + 12 | 0; //@line 26033
    HEAP32[$236 >> 2] = $56; //@line 26034
    $237 = $ReallocAsyncCtx17 + 16 | 0; //@line 26035
    HEAP32[$237 >> 2] = $6; //@line 26036
    $238 = $ReallocAsyncCtx17 + 20 | 0; //@line 26037
    HEAP32[$238 >> 2] = $62; //@line 26038
    $239 = $ReallocAsyncCtx17 + 24 | 0; //@line 26039
    HEAP32[$239 >> 2] = $74; //@line 26040
    $240 = $ReallocAsyncCtx17 + 28 | 0; //@line 26041
    HEAP32[$240 >> 2] = $80; //@line 26042
    $241 = $ReallocAsyncCtx17 + 32 | 0; //@line 26043
    HEAP32[$241 >> 2] = $60; //@line 26044
    $242 = $ReallocAsyncCtx17 + 36 | 0; //@line 26045
    HEAP32[$242 >> 2] = $228; //@line 26046
    $243 = $ReallocAsyncCtx17 + 40 | 0; //@line 26047
    HEAP32[$243 >> 2] = $134; //@line 26048
    sp = STACKTOP; //@line 26049
    STACKTOP = sp; //@line 26050
    return;
   }
   if ($219) {
    $270 = $214 & 255; //@line 26055
    $271 = $6 + 638 | 0; //@line 26056
    if (__Z15decrypt_payloadPKhtS0_jhjPh($2 + $211 | 0, $270, $12, $54, 1, $$$1177, $271) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($42) | 0) + 4 >> 2] = 13; //@line 26062
    }
    if ($$1$off0) {
     $$3$off0230 = 6; //@line 26065
     break;
    }
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($42) | 0) + 12 >> 2] = $271; //@line 26070
    HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($42) | 0) + 16 >> 1] = $270; //@line 26073
    HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($42) | 0) + 18 >> 0] = 1; //@line 26076
    label = 56; //@line 26077
    break;
   } else {
    $245 = $6 + 264 | 0; //@line 26080
    $246 = __ZN11LoRaMacMlme16get_confirmationEv($245) | 0; //@line 26081
    $248 = HEAP32[$82 >> 2] | 0; //@line 26083
    $ReallocAsyncCtx16 = _emscripten_realloc_async_context(72) | 0; //@line 26084
    $249 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($134, $2, 8, $66, $10, $246, $6 + 1096 | 0, $248) | 0; //@line 26085
    if (___async) {
     HEAP32[$ReallocAsyncCtx16 >> 2] = 328; //@line 26088
     $250 = $ReallocAsyncCtx16 + 4 | 0; //@line 26089
     HEAP8[$250 >> 0] = $16; //@line 26090
     $251 = $ReallocAsyncCtx16 + 8 | 0; //@line 26091
     HEAP32[$251 >> 2] = $42; //@line 26092
     $252 = $ReallocAsyncCtx16 + 12 | 0; //@line 26093
     HEAP32[$252 >> 2] = $56; //@line 26094
     $253 = $ReallocAsyncCtx16 + 16 | 0; //@line 26095
     HEAP32[$253 >> 2] = $6; //@line 26096
     $254 = $ReallocAsyncCtx16 + 20 | 0; //@line 26097
     $$1$off0$expand_i1_val52 = $$1$off0 & 1; //@line 26098
     HEAP8[$254 >> 0] = $$1$off0$expand_i1_val52; //@line 26099
     $255 = $ReallocAsyncCtx16 + 24 | 0; //@line 26100
     HEAP32[$255 >> 2] = $62; //@line 26101
     $256 = $ReallocAsyncCtx16 + 28 | 0; //@line 26102
     HEAP32[$256 >> 2] = $74; //@line 26103
     $257 = $ReallocAsyncCtx16 + 32 | 0; //@line 26104
     HEAP32[$257 >> 2] = $2; //@line 26105
     $258 = $ReallocAsyncCtx16 + 36 | 0; //@line 26106
     HEAP32[$258 >> 2] = $211; //@line 26107
     $259 = $ReallocAsyncCtx16 + 40 | 0; //@line 26108
     HEAP32[$259 >> 2] = $214; //@line 26109
     $260 = $ReallocAsyncCtx16 + 44 | 0; //@line 26110
     HEAP32[$260 >> 2] = $12; //@line 26111
     $261 = $ReallocAsyncCtx16 + 48 | 0; //@line 26112
     HEAP32[$261 >> 2] = $54; //@line 26113
     $262 = $ReallocAsyncCtx16 + 52 | 0; //@line 26114
     HEAP32[$262 >> 2] = $$$1177; //@line 26115
     $263 = $ReallocAsyncCtx16 + 56 | 0; //@line 26116
     HEAP32[$263 >> 2] = $38; //@line 26117
     $264 = $ReallocAsyncCtx16 + 60 | 0; //@line 26118
     HEAP32[$264 >> 2] = $48; //@line 26119
     $265 = $ReallocAsyncCtx16 + 64 | 0; //@line 26120
     HEAP32[$265 >> 2] = $245; //@line 26121
     $266 = $ReallocAsyncCtx16 + 68 | 0; //@line 26122
     HEAP32[$266 >> 2] = $134; //@line 26123
     sp = STACKTOP; //@line 26124
     STACKTOP = sp; //@line 26125
     return;
    }
    HEAP32[___async_retval >> 2] = $249; //@line 26128
    ___async_unwind = 0; //@line 26129
    HEAP32[$ReallocAsyncCtx16 >> 2] = 328; //@line 26130
    $250 = $ReallocAsyncCtx16 + 4 | 0; //@line 26131
    HEAP8[$250 >> 0] = $16; //@line 26132
    $251 = $ReallocAsyncCtx16 + 8 | 0; //@line 26133
    HEAP32[$251 >> 2] = $42; //@line 26134
    $252 = $ReallocAsyncCtx16 + 12 | 0; //@line 26135
    HEAP32[$252 >> 2] = $56; //@line 26136
    $253 = $ReallocAsyncCtx16 + 16 | 0; //@line 26137
    HEAP32[$253 >> 2] = $6; //@line 26138
    $254 = $ReallocAsyncCtx16 + 20 | 0; //@line 26139
    $$1$off0$expand_i1_val52 = $$1$off0 & 1; //@line 26140
    HEAP8[$254 >> 0] = $$1$off0$expand_i1_val52; //@line 26141
    $255 = $ReallocAsyncCtx16 + 24 | 0; //@line 26142
    HEAP32[$255 >> 2] = $62; //@line 26143
    $256 = $ReallocAsyncCtx16 + 28 | 0; //@line 26144
    HEAP32[$256 >> 2] = $74; //@line 26145
    $257 = $ReallocAsyncCtx16 + 32 | 0; //@line 26146
    HEAP32[$257 >> 2] = $2; //@line 26147
    $258 = $ReallocAsyncCtx16 + 36 | 0; //@line 26148
    HEAP32[$258 >> 2] = $211; //@line 26149
    $259 = $ReallocAsyncCtx16 + 40 | 0; //@line 26150
    HEAP32[$259 >> 2] = $214; //@line 26151
    $260 = $ReallocAsyncCtx16 + 44 | 0; //@line 26152
    HEAP32[$260 >> 2] = $12; //@line 26153
    $261 = $ReallocAsyncCtx16 + 48 | 0; //@line 26154
    HEAP32[$261 >> 2] = $54; //@line 26155
    $262 = $ReallocAsyncCtx16 + 52 | 0; //@line 26156
    HEAP32[$262 >> 2] = $$$1177; //@line 26157
    $263 = $ReallocAsyncCtx16 + 56 | 0; //@line 26158
    HEAP32[$263 >> 2] = $38; //@line 26159
    $264 = $ReallocAsyncCtx16 + 60 | 0; //@line 26160
    HEAP32[$264 >> 2] = $48; //@line 26161
    $265 = $ReallocAsyncCtx16 + 64 | 0; //@line 26162
    HEAP32[$265 >> 2] = $245; //@line 26163
    $266 = $ReallocAsyncCtx16 + 68 | 0; //@line 26164
    HEAP32[$266 >> 2] = $134; //@line 26165
    sp = STACKTOP; //@line 26166
    STACKTOP = sp; //@line 26167
    return;
   }
  } else {
   if (!($76 << 24 >> 24)) {
    if ($$1$off0) {
     $$3$off0230 = 6; //@line 26173
     break;
    } else {
     label = 56; //@line 26176
     break;
    }
   }
   $283 = $6 + 264 | 0; //@line 26180
   $284 = __ZN11LoRaMacMlme16get_confirmationEv($283) | 0; //@line 26181
   $286 = HEAP32[$82 >> 2] | 0; //@line 26183
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(44) | 0; //@line 26184
   $287 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($134, $2, 8, $66, $10, $284, $6 + 1096 | 0, $286) | 0; //@line 26185
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 329; //@line 26188
    $288 = $ReallocAsyncCtx15 + 4 | 0; //@line 26189
    $$1$off0$expand_i1_val54 = $$1$off0 & 1; //@line 26190
    HEAP8[$288 >> 0] = $$1$off0$expand_i1_val54; //@line 26191
    $289 = $ReallocAsyncCtx15 + 5 | 0; //@line 26192
    HEAP8[$289 >> 0] = $16; //@line 26193
    $290 = $ReallocAsyncCtx15 + 8 | 0; //@line 26194
    HEAP32[$290 >> 2] = $42; //@line 26195
    $291 = $ReallocAsyncCtx15 + 12 | 0; //@line 26196
    HEAP32[$291 >> 2] = $56; //@line 26197
    $292 = $ReallocAsyncCtx15 + 16 | 0; //@line 26198
    HEAP32[$292 >> 2] = $6; //@line 26199
    $293 = $ReallocAsyncCtx15 + 20 | 0; //@line 26200
    HEAP32[$293 >> 2] = $134; //@line 26201
    $294 = $ReallocAsyncCtx15 + 24 | 0; //@line 26202
    HEAP32[$294 >> 2] = $18; //@line 26203
    $295 = $ReallocAsyncCtx15 + 28 | 0; //@line 26204
    HEAP32[$295 >> 2] = $70; //@line 26205
    $296 = $ReallocAsyncCtx15 + 32 | 0; //@line 26206
    HEAP32[$296 >> 2] = $283; //@line 26207
    $297 = $ReallocAsyncCtx15 + 36 | 0; //@line 26208
    HEAP32[$297 >> 2] = $62; //@line 26209
    $298 = $ReallocAsyncCtx15 + 40 | 0; //@line 26210
    HEAP32[$298 >> 2] = $74; //@line 26211
    sp = STACKTOP; //@line 26212
    STACKTOP = sp; //@line 26213
    return;
   }
   HEAP32[___async_retval >> 2] = $287; //@line 26216
   ___async_unwind = 0; //@line 26217
   HEAP32[$ReallocAsyncCtx15 >> 2] = 329; //@line 26218
   $288 = $ReallocAsyncCtx15 + 4 | 0; //@line 26219
   $$1$off0$expand_i1_val54 = $$1$off0 & 1; //@line 26220
   HEAP8[$288 >> 0] = $$1$off0$expand_i1_val54; //@line 26221
   $289 = $ReallocAsyncCtx15 + 5 | 0; //@line 26222
   HEAP8[$289 >> 0] = $16; //@line 26223
   $290 = $ReallocAsyncCtx15 + 8 | 0; //@line 26224
   HEAP32[$290 >> 2] = $42; //@line 26225
   $291 = $ReallocAsyncCtx15 + 12 | 0; //@line 26226
   HEAP32[$291 >> 2] = $56; //@line 26227
   $292 = $ReallocAsyncCtx15 + 16 | 0; //@line 26228
   HEAP32[$292 >> 2] = $6; //@line 26229
   $293 = $ReallocAsyncCtx15 + 20 | 0; //@line 26230
   HEAP32[$293 >> 2] = $134; //@line 26231
   $294 = $ReallocAsyncCtx15 + 24 | 0; //@line 26232
   HEAP32[$294 >> 2] = $18; //@line 26233
   $295 = $ReallocAsyncCtx15 + 28 | 0; //@line 26234
   HEAP32[$295 >> 2] = $70; //@line 26235
   $296 = $ReallocAsyncCtx15 + 32 | 0; //@line 26236
   HEAP32[$296 >> 2] = $283; //@line 26237
   $297 = $ReallocAsyncCtx15 + 36 | 0; //@line 26238
   HEAP32[$297 >> 2] = $62; //@line 26239
   $298 = $ReallocAsyncCtx15 + 40 | 0; //@line 26240
   HEAP32[$298 >> 2] = $74; //@line 26241
   sp = STACKTOP; //@line 26242
   STACKTOP = sp; //@line 26243
   return;
  }
 } while (0);
 if ((label | 0) == 56) {
  $303 = (__ZN11LoRaMacMcps16get_confirmationEv($42) | 0) + 10 | 0; //@line 26250
  if ($16 & 32) {
   HEAP8[$303 >> 0] = 1; //@line 26252
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($42) | 0) + 28 >> 0] = 1; //@line 26255
   $306 = HEAP32[$56 >> 2] | 0; //@line 26256
   $ReallocAsyncCtx27 = _emscripten_realloc_async_context(20) | 0; //@line 26258
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($306, $6 + 1076 | 0); //@line 26259
   if (___async) {
    HEAP32[$ReallocAsyncCtx27 >> 2] = 330; //@line 26262
    $308 = $ReallocAsyncCtx27 + 4 | 0; //@line 26263
    HEAP32[$308 >> 2] = $6; //@line 26264
    $309 = $ReallocAsyncCtx27 + 8 | 0; //@line 26265
    HEAP32[$309 >> 2] = $56; //@line 26266
    $310 = $ReallocAsyncCtx27 + 12 | 0; //@line 26267
    HEAP32[$310 >> 2] = $62; //@line 26268
    $311 = $ReallocAsyncCtx27 + 16 | 0; //@line 26269
    HEAP32[$311 >> 2] = $74; //@line 26270
    sp = STACKTOP; //@line 26271
    STACKTOP = sp; //@line 26272
    return;
   }
   ___async_unwind = 0; //@line 26274
   HEAP32[$ReallocAsyncCtx27 >> 2] = 330; //@line 26275
   $308 = $ReallocAsyncCtx27 + 4 | 0; //@line 26276
   HEAP32[$308 >> 2] = $6; //@line 26277
   $309 = $ReallocAsyncCtx27 + 8 | 0; //@line 26278
   HEAP32[$309 >> 2] = $56; //@line 26279
   $310 = $ReallocAsyncCtx27 + 12 | 0; //@line 26280
   HEAP32[$310 >> 2] = $62; //@line 26281
   $311 = $ReallocAsyncCtx27 + 16 | 0; //@line 26282
   HEAP32[$311 >> 2] = $74; //@line 26283
   sp = STACKTOP; //@line 26284
   STACKTOP = sp; //@line 26285
   return;
  }
  HEAP8[$303 >> 0] = 0; //@line 26287
  if ((HEAPU8[$6 + 895 >> 0] | 0) > (HEAPU8[$6 + 894 >> 0] | 0)) {
   $317 = HEAP32[$56 >> 2] | 0; //@line 26294
   $ReallocAsyncCtx26 = _emscripten_realloc_async_context(20) | 0; //@line 26296
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($317, $6 + 1076 | 0); //@line 26297
   if (___async) {
    HEAP32[$ReallocAsyncCtx26 >> 2] = 331; //@line 26300
    $319 = $ReallocAsyncCtx26 + 4 | 0; //@line 26301
    HEAP32[$319 >> 2] = $6; //@line 26302
    $320 = $ReallocAsyncCtx26 + 8 | 0; //@line 26303
    HEAP32[$320 >> 2] = $56; //@line 26304
    $321 = $ReallocAsyncCtx26 + 12 | 0; //@line 26305
    HEAP32[$321 >> 2] = $62; //@line 26306
    $322 = $ReallocAsyncCtx26 + 16 | 0; //@line 26307
    HEAP32[$322 >> 2] = $74; //@line 26308
    sp = STACKTOP; //@line 26309
    STACKTOP = sp; //@line 26310
    return;
   }
   ___async_unwind = 0; //@line 26312
   HEAP32[$ReallocAsyncCtx26 >> 2] = 331; //@line 26313
   $319 = $ReallocAsyncCtx26 + 4 | 0; //@line 26314
   HEAP32[$319 >> 2] = $6; //@line 26315
   $320 = $ReallocAsyncCtx26 + 8 | 0; //@line 26316
   HEAP32[$320 >> 2] = $56; //@line 26317
   $321 = $ReallocAsyncCtx26 + 12 | 0; //@line 26318
   HEAP32[$321 >> 2] = $62; //@line 26319
   $322 = $ReallocAsyncCtx26 + 16 | 0; //@line 26320
   HEAP32[$322 >> 2] = $74; //@line 26321
   sp = STACKTOP; //@line 26322
   STACKTOP = sp; //@line 26323
   return;
  } else {
   $$3$off0230 = 2; //@line 26325
  }
 }
 $323 = $6 + 944 | 0; //@line 26328
 HEAP8[$323 >> 0] = $$3$off0230 | HEAP8[$323 >> 0] & -7; //@line 26332
 $349 = $6 + 944 | 0; //@line 26333
 HEAP8[$349 >> 0] = HEAP8[$349 >> 0] | 32; //@line 26336
 $352 = HEAP32[$56 >> 2] | 0; //@line 26337
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 26339
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($352, $6 + 996 | 0, 1); //@line 26340
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 338; //@line 26343
  $354 = $ReallocAsyncCtx5 + 4 | 0; //@line 26344
  HEAP32[$354 >> 2] = $62; //@line 26345
  $355 = $ReallocAsyncCtx5 + 8 | 0; //@line 26346
  HEAP32[$355 >> 2] = $74; //@line 26347
  sp = STACKTOP; //@line 26348
  STACKTOP = sp; //@line 26349
  return;
 }
 ___async_unwind = 0; //@line 26351
 HEAP32[$ReallocAsyncCtx5 >> 2] = 338; //@line 26352
 $354 = $ReallocAsyncCtx5 + 4 | 0; //@line 26353
 HEAP32[$354 >> 2] = $62; //@line 26354
 $355 = $ReallocAsyncCtx5 + 8 | 0; //@line 26355
 HEAP32[$355 >> 2] = $74; //@line 26356
 sp = STACKTOP; //@line 26357
 STACKTOP = sp; //@line 26358
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_113($0) {
 $0 = $0 | 0;
 var $$1$off0 = 0, $$1$off0$expand_i1_val = 0, $$1$off0$expand_i1_val52 = 0, $$1$off0$expand_i1_val54 = 0, $$3$off0230 = 0, $$byval_copy = 0, $$byval_copy48 = 0, $$byval_copy49 = 0, $$byval_copy50 = 0, $$sink = 0, $10 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $110 = 0, $113 = 0, $115 = 0, $116 = 0, $12 = 0, $132 = 0, $135 = 0, $136 = 0, $14 = 0, $143 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $158 = 0, $16 = 0, $161 = 0, $163 = 0, $164 = 0, $166 = 0, $168 = 0, $169 = 0, $173 = 0, $174 = 0, $18 = 0, $181 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $196 = 0, $199 = 0, $2 = 0, $20 = 0, $201 = 0, $202 = 0, $209 = 0, $211 = 0, $212 = 0, $213 = 0, $217 = 0, $22 = 0, $221 = 0, $226 = 0, $227 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $240 = 0, $241 = 0, $243 = 0, $244 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $268 = 0, $269 = 0, $28 = 0, $281 = 0, $282 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $30 = 0, $301 = 0, $304 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $315 = 0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $325 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $340 = 0, $343 = 0, $345 = 0, $346 = 0, $347 = 0, $350 = 0, $352 = 0, $353 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $86 = 0, $90 = 0, $92 = 0, $95 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx19 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx27 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 26382
 STACKTOP = STACKTOP + 32 | 0; //@line 26383
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 26383
 $$byval_copy50 = sp + 24 | 0; //@line 26384
 $$byval_copy49 = sp + 16 | 0; //@line 26385
 $$byval_copy48 = sp + 8 | 0; //@line 26386
 $$byval_copy = sp; //@line 26387
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26389
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26391
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26393
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26395
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 26397
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26399
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26401
 $16 = HEAP8[$0 + 32 >> 0] | 0; //@line 26403
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26405
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26407
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 26409
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 26413
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 26415
 $30 = HEAP8[$0 + 60 >> 0] | 0; //@line 26417
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 26423
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 26425
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 26427
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 26429
 $44 = HEAP8[$0 + 88 >> 0] | 0; //@line 26431
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 26433
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 26437
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 26439
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 26441
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 26443
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 26445
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 26447
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 26449
 $64 = HEAP8[$0 + 128 >> 0] | 0; //@line 26451
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 26453
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 26455
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 26457
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 26459
 $74 = HEAP8[$0 + 148 >> 0] | 0; //@line 26461
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 26463
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 26465
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 26467
 $86 = (HEAP32[$0 + 168 >> 2] | 0) == (HEAP32[HEAP32[$0 + 48 >> 2] >> 2] | 0); //@line 26473
 $90 = $62 >>> 0 < ((__ZN7LoRaPHY29get_maximum_frame_counter_gapEv(HEAP32[$80 >> 2] | 0) | 0) & 65535) >>> 0; //@line 26477
 $92 = (__ZN11LoRaMacMcps14get_indicationEv($40) | 0) + 4 | 0; //@line 26479
 if (!$90) {
  HEAP32[$92 >> 2] = 10; //@line 26481
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($40) | 0) + 32 >> 2] = $42; //@line 26484
  _mbed_tracef(16, 13704, 13843, $76); //@line 26485
  $95 = $6 + 968 | 0; //@line 26486
  HEAP32[$95 >> 2] = HEAP32[$95 >> 2] | 64; //@line 26489
  if (!(HEAP8[$6 + 373 >> 0] | 0)) {
   $110 = $6 + 944 | 0; //@line 26494
   HEAP8[$110 >> 0] = HEAP8[$110 >> 0] | 34; //@line 26497
   $113 = HEAP32[$54 >> 2] | 0; //@line 26498
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 26500
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($113, $6 + 996 | 0, 1); //@line 26501
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 320; //@line 26504
    $115 = $ReallocAsyncCtx10 + 4 | 0; //@line 26505
    HEAP32[$115 >> 2] = $60; //@line 26506
    $116 = $ReallocAsyncCtx10 + 8 | 0; //@line 26507
    HEAP32[$116 >> 2] = $72; //@line 26508
    sp = STACKTOP; //@line 26509
    STACKTOP = sp; //@line 26510
    return;
   }
   ___async_unwind = 0; //@line 26512
   HEAP32[$ReallocAsyncCtx10 >> 2] = 320; //@line 26513
   $115 = $ReallocAsyncCtx10 + 4 | 0; //@line 26514
   HEAP32[$115 >> 2] = $60; //@line 26515
   $116 = $ReallocAsyncCtx10 + 8 | 0; //@line 26516
   HEAP32[$116 >> 2] = $72; //@line 26517
   sp = STACKTOP; //@line 26518
   STACKTOP = sp; //@line 26519
   return;
  } else {
   $102 = HEAP32[$6 + 1328 >> 2] | 0; //@line 26522
   HEAP32[$22 >> 2] = 304; //@line 26523
   HEAP32[$22 + 4 >> 2] = 0; //@line 26525
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(24) | 0; //@line 26526
   HEAP32[$$byval_copy >> 2] = HEAP32[$22 >> 2]; //@line 26527
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$22 + 4 >> 2]; //@line 26527
   $103 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($102, $6, $$byval_copy) | 0; //@line 26528
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 318; //@line 26531
    $104 = $ReallocAsyncCtx22 + 4 | 0; //@line 26532
    HEAP32[$104 >> 2] = $22; //@line 26533
    $105 = $ReallocAsyncCtx22 + 8 | 0; //@line 26534
    HEAP32[$105 >> 2] = $6; //@line 26535
    $106 = $ReallocAsyncCtx22 + 12 | 0; //@line 26536
    HEAP32[$106 >> 2] = $54; //@line 26537
    $107 = $ReallocAsyncCtx22 + 16 | 0; //@line 26538
    HEAP32[$107 >> 2] = $60; //@line 26539
    $108 = $ReallocAsyncCtx22 + 20 | 0; //@line 26540
    HEAP32[$108 >> 2] = $72; //@line 26541
    sp = STACKTOP; //@line 26542
    STACKTOP = sp; //@line 26543
    return;
   }
   HEAP32[___async_retval >> 2] = $103; //@line 26546
   ___async_unwind = 0; //@line 26547
   HEAP32[$ReallocAsyncCtx22 >> 2] = 318; //@line 26548
   $104 = $ReallocAsyncCtx22 + 4 | 0; //@line 26549
   HEAP32[$104 >> 2] = $22; //@line 26550
   $105 = $ReallocAsyncCtx22 + 8 | 0; //@line 26551
   HEAP32[$105 >> 2] = $6; //@line 26552
   $106 = $ReallocAsyncCtx22 + 12 | 0; //@line 26553
   HEAP32[$106 >> 2] = $54; //@line 26554
   $107 = $ReallocAsyncCtx22 + 16 | 0; //@line 26555
   HEAP32[$107 >> 2] = $60; //@line 26556
   $108 = $ReallocAsyncCtx22 + 20 | 0; //@line 26557
   HEAP32[$108 >> 2] = $72; //@line 26558
   sp = STACKTOP; //@line 26559
   STACKTOP = sp; //@line 26560
   return;
  }
 }
 if (!$86) {
  HEAP32[$92 >> 2] = 12; //@line 26564
  _mbed_tracef(16, 13704, 13843, $56); //@line 26565
  $325 = $6 + 968 | 0; //@line 26566
  HEAP32[$325 >> 2] = HEAP32[$325 >> 2] | 64; //@line 26569
  if (!(HEAP8[$6 + 373 >> 0] | 0)) {
   $340 = $6 + 944 | 0; //@line 26574
   HEAP8[$340 >> 0] = HEAP8[$340 >> 0] | 34; //@line 26577
   $343 = HEAP32[$54 >> 2] | 0; //@line 26578
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 26580
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($343, $6 + 996 | 0, 1); //@line 26581
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 334; //@line 26584
    $345 = $ReallocAsyncCtx7 + 4 | 0; //@line 26585
    HEAP32[$345 >> 2] = $60; //@line 26586
    $346 = $ReallocAsyncCtx7 + 8 | 0; //@line 26587
    HEAP32[$346 >> 2] = $72; //@line 26588
    sp = STACKTOP; //@line 26589
    STACKTOP = sp; //@line 26590
    return;
   }
   ___async_unwind = 0; //@line 26592
   HEAP32[$ReallocAsyncCtx7 >> 2] = 334; //@line 26593
   $345 = $ReallocAsyncCtx7 + 4 | 0; //@line 26594
   HEAP32[$345 >> 2] = $60; //@line 26595
   $346 = $ReallocAsyncCtx7 + 8 | 0; //@line 26596
   HEAP32[$346 >> 2] = $72; //@line 26597
   sp = STACKTOP; //@line 26598
   STACKTOP = sp; //@line 26599
   return;
  } else {
   $332 = HEAP32[$6 + 1328 >> 2] | 0; //@line 26602
   HEAP32[$50 >> 2] = 304; //@line 26603
   HEAP32[$50 + 4 >> 2] = 0; //@line 26605
   $ReallocAsyncCtx19 = _emscripten_realloc_async_context(24) | 0; //@line 26606
   HEAP32[$$byval_copy50 >> 2] = HEAP32[$50 >> 2]; //@line 26607
   HEAP32[$$byval_copy50 + 4 >> 2] = HEAP32[$50 + 4 >> 2]; //@line 26607
   $333 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($332, $6, $$byval_copy50) | 0; //@line 26608
   if (___async) {
    HEAP32[$ReallocAsyncCtx19 >> 2] = 332; //@line 26611
    $334 = $ReallocAsyncCtx19 + 4 | 0; //@line 26612
    HEAP32[$334 >> 2] = $50; //@line 26613
    $335 = $ReallocAsyncCtx19 + 8 | 0; //@line 26614
    HEAP32[$335 >> 2] = $6; //@line 26615
    $336 = $ReallocAsyncCtx19 + 12 | 0; //@line 26616
    HEAP32[$336 >> 2] = $54; //@line 26617
    $337 = $ReallocAsyncCtx19 + 16 | 0; //@line 26618
    HEAP32[$337 >> 2] = $60; //@line 26619
    $338 = $ReallocAsyncCtx19 + 20 | 0; //@line 26620
    HEAP32[$338 >> 2] = $72; //@line 26621
    sp = STACKTOP; //@line 26622
    STACKTOP = sp; //@line 26623
    return;
   }
   HEAP32[___async_retval >> 2] = $333; //@line 26626
   ___async_unwind = 0; //@line 26627
   HEAP32[$ReallocAsyncCtx19 >> 2] = 332; //@line 26628
   $334 = $ReallocAsyncCtx19 + 4 | 0; //@line 26629
   HEAP32[$334 >> 2] = $50; //@line 26630
   $335 = $ReallocAsyncCtx19 + 8 | 0; //@line 26631
   HEAP32[$335 >> 2] = $6; //@line 26632
   $336 = $ReallocAsyncCtx19 + 12 | 0; //@line 26633
   HEAP32[$336 >> 2] = $54; //@line 26634
   $337 = $ReallocAsyncCtx19 + 16 | 0; //@line 26635
   HEAP32[$337 >> 2] = $60; //@line 26636
   $338 = $ReallocAsyncCtx19 + 20 | 0; //@line 26637
   HEAP32[$338 >> 2] = $72; //@line 26638
   sp = STACKTOP; //@line 26639
   STACKTOP = sp; //@line 26640
   return;
  }
 }
 HEAP32[$92 >> 2] = 0; //@line 26643
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($40) | 0) + 8 >> 0] = $44; //@line 26646
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($40) | 0) + 11 >> 0] = ($16 & 255) >>> 4 & 1; //@line 26651
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($40) | 0) + 12 >> 2] = 0; //@line 26654
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($40) | 0) + 16 >> 1] = 0; //@line 26657
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($40) | 0) + 32 >> 2] = $42; //@line 26660
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($40) | 0) + 4 >> 2] = 0; //@line 26663
 HEAP32[$6 + 964 >> 2] = 0; //@line 26665
 $132 = $6 + 4 | 0; //@line 26666
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($132); //@line 26667
 do {
  if ($44 << 24 >> 24 == 1) {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($40) | 0) >> 2] = 2; //@line 26672
   $135 = $28 + 36 | 0; //@line 26673
   $136 = HEAP32[$135 >> 2] | 0; //@line 26674
   if (($136 | 0) != ($42 | 0) | ($136 | 0) == 0) {
    $$1$off0 = 0; //@line 26679
    $$sink = $135; //@line 26679
   } else {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($40) | 0) + 4 >> 2] = 8; //@line 26683
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($40) | 0) + 32 >> 2] = $42; //@line 26686
    _mbed_tracef(16, 13704, 13843, $38); //@line 26687
    $143 = $6 + 968 | 0; //@line 26688
    HEAP32[$143 >> 2] = HEAP32[$143 >> 2] | 64; //@line 26691
    if (!(HEAP8[$6 + 373 >> 0] | 0)) {
     $158 = $6 + 944 | 0; //@line 26696
     HEAP8[$158 >> 0] = HEAP8[$158 >> 0] | 34; //@line 26699
     $161 = HEAP32[$54 >> 2] | 0; //@line 26700
     $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 26702
     __ZN18LoRaWANTimeHandler5startER13timer_event_tj($161, $6 + 996 | 0, 1); //@line 26703
     if (___async) {
      HEAP32[$ReallocAsyncCtx9 >> 2] = 323; //@line 26706
      $163 = $ReallocAsyncCtx9 + 4 | 0; //@line 26707
      HEAP32[$163 >> 2] = $60; //@line 26708
      $164 = $ReallocAsyncCtx9 + 8 | 0; //@line 26709
      HEAP32[$164 >> 2] = $72; //@line 26710
      sp = STACKTOP; //@line 26711
      STACKTOP = sp; //@line 26712
      return;
     }
     ___async_unwind = 0; //@line 26714
     HEAP32[$ReallocAsyncCtx9 >> 2] = 323; //@line 26715
     $163 = $ReallocAsyncCtx9 + 4 | 0; //@line 26716
     HEAP32[$163 >> 2] = $60; //@line 26717
     $164 = $ReallocAsyncCtx9 + 8 | 0; //@line 26718
     HEAP32[$164 >> 2] = $72; //@line 26719
     sp = STACKTOP; //@line 26720
     STACKTOP = sp; //@line 26721
     return;
    } else {
     $150 = HEAP32[$6 + 1328 >> 2] | 0; //@line 26724
     HEAP32[$26 >> 2] = 304; //@line 26725
     HEAP32[$26 + 4 >> 2] = 0; //@line 26727
     $ReallocAsyncCtx21 = _emscripten_realloc_async_context(24) | 0; //@line 26728
     HEAP32[$$byval_copy48 >> 2] = HEAP32[$26 >> 2]; //@line 26729
     HEAP32[$$byval_copy48 + 4 >> 2] = HEAP32[$26 + 4 >> 2]; //@line 26729
     $151 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($150, $6, $$byval_copy48) | 0; //@line 26730
     if (___async) {
      HEAP32[$ReallocAsyncCtx21 >> 2] = 321; //@line 26733
      $152 = $ReallocAsyncCtx21 + 4 | 0; //@line 26734
      HEAP32[$152 >> 2] = $26; //@line 26735
      $153 = $ReallocAsyncCtx21 + 8 | 0; //@line 26736
      HEAP32[$153 >> 2] = $6; //@line 26737
      $154 = $ReallocAsyncCtx21 + 12 | 0; //@line 26738
      HEAP32[$154 >> 2] = $54; //@line 26739
      $155 = $ReallocAsyncCtx21 + 16 | 0; //@line 26740
      HEAP32[$155 >> 2] = $60; //@line 26741
      $156 = $ReallocAsyncCtx21 + 20 | 0; //@line 26742
      HEAP32[$156 >> 2] = $72; //@line 26743
      sp = STACKTOP; //@line 26744
      STACKTOP = sp; //@line 26745
      return;
     }
     HEAP32[___async_retval >> 2] = $151; //@line 26748
     ___async_unwind = 0; //@line 26749
     HEAP32[$ReallocAsyncCtx21 >> 2] = 321; //@line 26750
     $152 = $ReallocAsyncCtx21 + 4 | 0; //@line 26751
     HEAP32[$152 >> 2] = $26; //@line 26752
     $153 = $ReallocAsyncCtx21 + 8 | 0; //@line 26753
     HEAP32[$153 >> 2] = $6; //@line 26754
     $154 = $ReallocAsyncCtx21 + 12 | 0; //@line 26755
     HEAP32[$154 >> 2] = $54; //@line 26756
     $155 = $ReallocAsyncCtx21 + 16 | 0; //@line 26757
     HEAP32[$155 >> 2] = $60; //@line 26758
     $156 = $ReallocAsyncCtx21 + 20 | 0; //@line 26759
     HEAP32[$156 >> 2] = $72; //@line 26760
     sp = STACKTOP; //@line 26761
     STACKTOP = sp; //@line 26762
     return;
    }
   }
  } else {
   $166 = $6 + 374 | 0; //@line 26767
   if ($30 << 24 >> 24 == 5) {
    HEAP8[$166 >> 0] = 1; //@line 26769
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($40) | 0) >> 2] = 1; //@line 26771
    $168 = $6 + 960 | 0; //@line 26772
    $169 = HEAP32[$168 >> 2] | 0; //@line 26773
    $$1$off0 = ($169 | 0) != 0 & ($169 | 0) == ($42 | 0); //@line 26777
    $$sink = $168; //@line 26777
    break;
   }
   HEAP8[$166 >> 0] = 0; //@line 26780
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($40) | 0) >> 2] = 0; //@line 26782
   $173 = $6 + 960 | 0; //@line 26783
   $174 = HEAP32[$173 >> 2] | 0; //@line 26784
   if (($174 | 0) != ($42 | 0) | ($174 | 0) == 0) {
    $$1$off0 = 0; //@line 26789
    $$sink = $173; //@line 26789
   } else {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($40) | 0) + 4 >> 2] = 8; //@line 26793
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($40) | 0) + 32 >> 2] = $42; //@line 26796
    _mbed_tracef(16, 13704, 13843, $8); //@line 26797
    $181 = $6 + 968 | 0; //@line 26798
    HEAP32[$181 >> 2] = HEAP32[$181 >> 2] | 64; //@line 26801
    if (!(HEAP8[$6 + 373 >> 0] | 0)) {
     $196 = $6 + 944 | 0; //@line 26806
     HEAP8[$196 >> 0] = HEAP8[$196 >> 0] | 34; //@line 26809
     $199 = HEAP32[$54 >> 2] | 0; //@line 26810
     $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 26812
     __ZN18LoRaWANTimeHandler5startER13timer_event_tj($199, $6 + 996 | 0, 1); //@line 26813
     if (___async) {
      HEAP32[$ReallocAsyncCtx8 >> 2] = 326; //@line 26816
      $201 = $ReallocAsyncCtx8 + 4 | 0; //@line 26817
      HEAP32[$201 >> 2] = $60; //@line 26818
      $202 = $ReallocAsyncCtx8 + 8 | 0; //@line 26819
      HEAP32[$202 >> 2] = $72; //@line 26820
      sp = STACKTOP; //@line 26821
      STACKTOP = sp; //@line 26822
      return;
     }
     ___async_unwind = 0; //@line 26824
     HEAP32[$ReallocAsyncCtx8 >> 2] = 326; //@line 26825
     $201 = $ReallocAsyncCtx8 + 4 | 0; //@line 26826
     HEAP32[$201 >> 2] = $60; //@line 26827
     $202 = $ReallocAsyncCtx8 + 8 | 0; //@line 26828
     HEAP32[$202 >> 2] = $72; //@line 26829
     sp = STACKTOP; //@line 26830
     STACKTOP = sp; //@line 26831
     return;
    } else {
     $188 = HEAP32[$6 + 1328 >> 2] | 0; //@line 26834
     HEAP32[$20 >> 2] = 304; //@line 26835
     HEAP32[$20 + 4 >> 2] = 0; //@line 26837
     $ReallocAsyncCtx20 = _emscripten_realloc_async_context(24) | 0; //@line 26838
     HEAP32[$$byval_copy49 >> 2] = HEAP32[$20 >> 2]; //@line 26839
     HEAP32[$$byval_copy49 + 4 >> 2] = HEAP32[$20 + 4 >> 2]; //@line 26839
     $189 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($188, $6, $$byval_copy49) | 0; //@line 26840
     if (___async) {
      HEAP32[$ReallocAsyncCtx20 >> 2] = 324; //@line 26843
      $190 = $ReallocAsyncCtx20 + 4 | 0; //@line 26844
      HEAP32[$190 >> 2] = $20; //@line 26845
      $191 = $ReallocAsyncCtx20 + 8 | 0; //@line 26846
      HEAP32[$191 >> 2] = $6; //@line 26847
      $192 = $ReallocAsyncCtx20 + 12 | 0; //@line 26848
      HEAP32[$192 >> 2] = $54; //@line 26849
      $193 = $ReallocAsyncCtx20 + 16 | 0; //@line 26850
      HEAP32[$193 >> 2] = $60; //@line 26851
      $194 = $ReallocAsyncCtx20 + 20 | 0; //@line 26852
      HEAP32[$194 >> 2] = $72; //@line 26853
      sp = STACKTOP; //@line 26854
      STACKTOP = sp; //@line 26855
      return;
     }
     HEAP32[___async_retval >> 2] = $189; //@line 26858
     ___async_unwind = 0; //@line 26859
     HEAP32[$ReallocAsyncCtx20 >> 2] = 324; //@line 26860
     $190 = $ReallocAsyncCtx20 + 4 | 0; //@line 26861
     HEAP32[$190 >> 2] = $20; //@line 26862
     $191 = $ReallocAsyncCtx20 + 8 | 0; //@line 26863
     HEAP32[$191 >> 2] = $6; //@line 26864
     $192 = $ReallocAsyncCtx20 + 12 | 0; //@line 26865
     HEAP32[$192 >> 2] = $54; //@line 26866
     $193 = $ReallocAsyncCtx20 + 16 | 0; //@line 26867
     HEAP32[$193 >> 2] = $60; //@line 26868
     $194 = $ReallocAsyncCtx20 + 20 | 0; //@line 26869
     HEAP32[$194 >> 2] = $72; //@line 26870
     sp = STACKTOP; //@line 26871
     STACKTOP = sp; //@line 26872
     return;
    }
   }
  }
 } while (0);
 HEAP32[$$sink >> 2] = $42; //@line 26877
 if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($40) | 0) >> 2] | 0) == 1) {
  if ($16 & 32) {
   __ZN14LoRaMacCommand20clear_command_bufferEv($132); //@line 26885
  }
 } else {
  __ZN14LoRaMacCommand20clear_command_bufferEv($132); //@line 26888
 }
 do {
  if (($14 | 0) > ($66 | 0)) {
   $209 = $70 + 9 | 0; //@line 26893
   $211 = HEAP8[$2 + $66 >> 0] | 0; //@line 26895
   $212 = $14 - $209 | 0; //@line 26896
   $213 = $212 & 255; //@line 26897
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($40) | 0) + 9 >> 0] = $211; //@line 26900
   $217 = $74 << 24 >> 24 == 0; //@line 26902
   if (!($211 << 24 >> 24)) {
    if (!$217) {
     $$3$off0230 = 6; //@line 26905
     break;
    }
    $221 = $6 + 638 | 0; //@line 26911
    if (__Z15decrypt_payloadPKhtS0_jhjPh($2 + $209 | 0, $212 & 255, $4, $52, 1, $42, $221) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($40) | 0) + 4 >> 2] = 13; //@line 26917
    }
    $226 = $6 + 264 | 0; //@line 26919
    $227 = __ZN11LoRaMacMlme16get_confirmationEv($226) | 0; //@line 26920
    $229 = HEAP32[$80 >> 2] | 0; //@line 26922
    $ReallocAsyncCtx17 = _emscripten_realloc_async_context(44) | 0; //@line 26923
    $230 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($132, $221, 0, $213, $10, $227, $6 + 1096 | 0, $229) | 0; //@line 26924
    if (___async) {
     HEAP32[$ReallocAsyncCtx17 >> 2] = 327; //@line 26927
     $231 = $ReallocAsyncCtx17 + 4 | 0; //@line 26928
     $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 26929
     HEAP8[$231 >> 0] = $$1$off0$expand_i1_val; //@line 26930
     $232 = $ReallocAsyncCtx17 + 5 | 0; //@line 26931
     HEAP8[$232 >> 0] = $16; //@line 26932
     $233 = $ReallocAsyncCtx17 + 8 | 0; //@line 26933
     HEAP32[$233 >> 2] = $40; //@line 26934
     $234 = $ReallocAsyncCtx17 + 12 | 0; //@line 26935
     HEAP32[$234 >> 2] = $54; //@line 26936
     $235 = $ReallocAsyncCtx17 + 16 | 0; //@line 26937
     HEAP32[$235 >> 2] = $6; //@line 26938
     $236 = $ReallocAsyncCtx17 + 20 | 0; //@line 26939
     HEAP32[$236 >> 2] = $60; //@line 26940
     $237 = $ReallocAsyncCtx17 + 24 | 0; //@line 26941
     HEAP32[$237 >> 2] = $72; //@line 26942
     $238 = $ReallocAsyncCtx17 + 28 | 0; //@line 26943
     HEAP32[$238 >> 2] = $78; //@line 26944
     $239 = $ReallocAsyncCtx17 + 32 | 0; //@line 26945
     HEAP32[$239 >> 2] = $58; //@line 26946
     $240 = $ReallocAsyncCtx17 + 36 | 0; //@line 26947
     HEAP32[$240 >> 2] = $226; //@line 26948
     $241 = $ReallocAsyncCtx17 + 40 | 0; //@line 26949
     HEAP32[$241 >> 2] = $132; //@line 26950
     sp = STACKTOP; //@line 26951
     STACKTOP = sp; //@line 26952
     return;
    }
    HEAP32[___async_retval >> 2] = $230; //@line 26955
    ___async_unwind = 0; //@line 26956
    HEAP32[$ReallocAsyncCtx17 >> 2] = 327; //@line 26957
    $231 = $ReallocAsyncCtx17 + 4 | 0; //@line 26958
    $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 26959
    HEAP8[$231 >> 0] = $$1$off0$expand_i1_val; //@line 26960
    $232 = $ReallocAsyncCtx17 + 5 | 0; //@line 26961
    HEAP8[$232 >> 0] = $16; //@line 26962
    $233 = $ReallocAsyncCtx17 + 8 | 0; //@line 26963
    HEAP32[$233 >> 2] = $40; //@line 26964
    $234 = $ReallocAsyncCtx17 + 12 | 0; //@line 26965
    HEAP32[$234 >> 2] = $54; //@line 26966
    $235 = $ReallocAsyncCtx17 + 16 | 0; //@line 26967
    HEAP32[$235 >> 2] = $6; //@line 26968
    $236 = $ReallocAsyncCtx17 + 20 | 0; //@line 26969
    HEAP32[$236 >> 2] = $60; //@line 26970
    $237 = $ReallocAsyncCtx17 + 24 | 0; //@line 26971
    HEAP32[$237 >> 2] = $72; //@line 26972
    $238 = $ReallocAsyncCtx17 + 28 | 0; //@line 26973
    HEAP32[$238 >> 2] = $78; //@line 26974
    $239 = $ReallocAsyncCtx17 + 32 | 0; //@line 26975
    HEAP32[$239 >> 2] = $58; //@line 26976
    $240 = $ReallocAsyncCtx17 + 36 | 0; //@line 26977
    HEAP32[$240 >> 2] = $226; //@line 26978
    $241 = $ReallocAsyncCtx17 + 40 | 0; //@line 26979
    HEAP32[$241 >> 2] = $132; //@line 26980
    sp = STACKTOP; //@line 26981
    STACKTOP = sp; //@line 26982
    return;
   }
   if ($217) {
    $268 = $212 & 255; //@line 26987
    $269 = $6 + 638 | 0; //@line 26988
    if (__Z15decrypt_payloadPKhtS0_jhjPh($2 + $209 | 0, $268, $12, $52, 1, $42, $269) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($40) | 0) + 4 >> 2] = 13; //@line 26994
    }
    if ($$1$off0) {
     $$3$off0230 = 6; //@line 26997
     break;
    }
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($40) | 0) + 12 >> 2] = $269; //@line 27002
    HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($40) | 0) + 16 >> 1] = $268; //@line 27005
    HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($40) | 0) + 18 >> 0] = 1; //@line 27008
    label = 56; //@line 27009
    break;
   } else {
    $243 = $6 + 264 | 0; //@line 27012
    $244 = __ZN11LoRaMacMlme16get_confirmationEv($243) | 0; //@line 27013
    $246 = HEAP32[$80 >> 2] | 0; //@line 27015
    $ReallocAsyncCtx16 = _emscripten_realloc_async_context(72) | 0; //@line 27016
    $247 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($132, $2, 8, $64, $10, $244, $6 + 1096 | 0, $246) | 0; //@line 27017
    if (___async) {
     HEAP32[$ReallocAsyncCtx16 >> 2] = 328; //@line 27020
     $248 = $ReallocAsyncCtx16 + 4 | 0; //@line 27021
     HEAP8[$248 >> 0] = $16; //@line 27022
     $249 = $ReallocAsyncCtx16 + 8 | 0; //@line 27023
     HEAP32[$249 >> 2] = $40; //@line 27024
     $250 = $ReallocAsyncCtx16 + 12 | 0; //@line 27025
     HEAP32[$250 >> 2] = $54; //@line 27026
     $251 = $ReallocAsyncCtx16 + 16 | 0; //@line 27027
     HEAP32[$251 >> 2] = $6; //@line 27028
     $252 = $ReallocAsyncCtx16 + 20 | 0; //@line 27029
     $$1$off0$expand_i1_val52 = $$1$off0 & 1; //@line 27030
     HEAP8[$252 >> 0] = $$1$off0$expand_i1_val52; //@line 27031
     $253 = $ReallocAsyncCtx16 + 24 | 0; //@line 27032
     HEAP32[$253 >> 2] = $60; //@line 27033
     $254 = $ReallocAsyncCtx16 + 28 | 0; //@line 27034
     HEAP32[$254 >> 2] = $72; //@line 27035
     $255 = $ReallocAsyncCtx16 + 32 | 0; //@line 27036
     HEAP32[$255 >> 2] = $2; //@line 27037
     $256 = $ReallocAsyncCtx16 + 36 | 0; //@line 27038
     HEAP32[$256 >> 2] = $209; //@line 27039
     $257 = $ReallocAsyncCtx16 + 40 | 0; //@line 27040
     HEAP32[$257 >> 2] = $212; //@line 27041
     $258 = $ReallocAsyncCtx16 + 44 | 0; //@line 27042
     HEAP32[$258 >> 2] = $12; //@line 27043
     $259 = $ReallocAsyncCtx16 + 48 | 0; //@line 27044
     HEAP32[$259 >> 2] = $52; //@line 27045
     $260 = $ReallocAsyncCtx16 + 52 | 0; //@line 27046
     HEAP32[$260 >> 2] = $42; //@line 27047
     $261 = $ReallocAsyncCtx16 + 56 | 0; //@line 27048
     HEAP32[$261 >> 2] = $36; //@line 27049
     $262 = $ReallocAsyncCtx16 + 60 | 0; //@line 27050
     HEAP32[$262 >> 2] = $46; //@line 27051
     $263 = $ReallocAsyncCtx16 + 64 | 0; //@line 27052
     HEAP32[$263 >> 2] = $243; //@line 27053
     $264 = $ReallocAsyncCtx16 + 68 | 0; //@line 27054
     HEAP32[$264 >> 2] = $132; //@line 27055
     sp = STACKTOP; //@line 27056
     STACKTOP = sp; //@line 27057
     return;
    }
    HEAP32[___async_retval >> 2] = $247; //@line 27060
    ___async_unwind = 0; //@line 27061
    HEAP32[$ReallocAsyncCtx16 >> 2] = 328; //@line 27062
    $248 = $ReallocAsyncCtx16 + 4 | 0; //@line 27063
    HEAP8[$248 >> 0] = $16; //@line 27064
    $249 = $ReallocAsyncCtx16 + 8 | 0; //@line 27065
    HEAP32[$249 >> 2] = $40; //@line 27066
    $250 = $ReallocAsyncCtx16 + 12 | 0; //@line 27067
    HEAP32[$250 >> 2] = $54; //@line 27068
    $251 = $ReallocAsyncCtx16 + 16 | 0; //@line 27069
    HEAP32[$251 >> 2] = $6; //@line 27070
    $252 = $ReallocAsyncCtx16 + 20 | 0; //@line 27071
    $$1$off0$expand_i1_val52 = $$1$off0 & 1; //@line 27072
    HEAP8[$252 >> 0] = $$1$off0$expand_i1_val52; //@line 27073
    $253 = $ReallocAsyncCtx16 + 24 | 0; //@line 27074
    HEAP32[$253 >> 2] = $60; //@line 27075
    $254 = $ReallocAsyncCtx16 + 28 | 0; //@line 27076
    HEAP32[$254 >> 2] = $72; //@line 27077
    $255 = $ReallocAsyncCtx16 + 32 | 0; //@line 27078
    HEAP32[$255 >> 2] = $2; //@line 27079
    $256 = $ReallocAsyncCtx16 + 36 | 0; //@line 27080
    HEAP32[$256 >> 2] = $209; //@line 27081
    $257 = $ReallocAsyncCtx16 + 40 | 0; //@line 27082
    HEAP32[$257 >> 2] = $212; //@line 27083
    $258 = $ReallocAsyncCtx16 + 44 | 0; //@line 27084
    HEAP32[$258 >> 2] = $12; //@line 27085
    $259 = $ReallocAsyncCtx16 + 48 | 0; //@line 27086
    HEAP32[$259 >> 2] = $52; //@line 27087
    $260 = $ReallocAsyncCtx16 + 52 | 0; //@line 27088
    HEAP32[$260 >> 2] = $42; //@line 27089
    $261 = $ReallocAsyncCtx16 + 56 | 0; //@line 27090
    HEAP32[$261 >> 2] = $36; //@line 27091
    $262 = $ReallocAsyncCtx16 + 60 | 0; //@line 27092
    HEAP32[$262 >> 2] = $46; //@line 27093
    $263 = $ReallocAsyncCtx16 + 64 | 0; //@line 27094
    HEAP32[$263 >> 2] = $243; //@line 27095
    $264 = $ReallocAsyncCtx16 + 68 | 0; //@line 27096
    HEAP32[$264 >> 2] = $132; //@line 27097
    sp = STACKTOP; //@line 27098
    STACKTOP = sp; //@line 27099
    return;
   }
  } else {
   if (!($74 << 24 >> 24)) {
    if ($$1$off0) {
     $$3$off0230 = 6; //@line 27105
     break;
    } else {
     label = 56; //@line 27108
     break;
    }
   }
   $281 = $6 + 264 | 0; //@line 27112
   $282 = __ZN11LoRaMacMlme16get_confirmationEv($281) | 0; //@line 27113
   $284 = HEAP32[$80 >> 2] | 0; //@line 27115
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(44) | 0; //@line 27116
   $285 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($132, $2, 8, $64, $10, $282, $6 + 1096 | 0, $284) | 0; //@line 27117
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 329; //@line 27120
    $286 = $ReallocAsyncCtx15 + 4 | 0; //@line 27121
    $$1$off0$expand_i1_val54 = $$1$off0 & 1; //@line 27122
    HEAP8[$286 >> 0] = $$1$off0$expand_i1_val54; //@line 27123
    $287 = $ReallocAsyncCtx15 + 5 | 0; //@line 27124
    HEAP8[$287 >> 0] = $16; //@line 27125
    $288 = $ReallocAsyncCtx15 + 8 | 0; //@line 27126
    HEAP32[$288 >> 2] = $40; //@line 27127
    $289 = $ReallocAsyncCtx15 + 12 | 0; //@line 27128
    HEAP32[$289 >> 2] = $54; //@line 27129
    $290 = $ReallocAsyncCtx15 + 16 | 0; //@line 27130
    HEAP32[$290 >> 2] = $6; //@line 27131
    $291 = $ReallocAsyncCtx15 + 20 | 0; //@line 27132
    HEAP32[$291 >> 2] = $132; //@line 27133
    $292 = $ReallocAsyncCtx15 + 24 | 0; //@line 27134
    HEAP32[$292 >> 2] = $18; //@line 27135
    $293 = $ReallocAsyncCtx15 + 28 | 0; //@line 27136
    HEAP32[$293 >> 2] = $68; //@line 27137
    $294 = $ReallocAsyncCtx15 + 32 | 0; //@line 27138
    HEAP32[$294 >> 2] = $281; //@line 27139
    $295 = $ReallocAsyncCtx15 + 36 | 0; //@line 27140
    HEAP32[$295 >> 2] = $60; //@line 27141
    $296 = $ReallocAsyncCtx15 + 40 | 0; //@line 27142
    HEAP32[$296 >> 2] = $72; //@line 27143
    sp = STACKTOP; //@line 27144
    STACKTOP = sp; //@line 27145
    return;
   }
   HEAP32[___async_retval >> 2] = $285; //@line 27148
   ___async_unwind = 0; //@line 27149
   HEAP32[$ReallocAsyncCtx15 >> 2] = 329; //@line 27150
   $286 = $ReallocAsyncCtx15 + 4 | 0; //@line 27151
   $$1$off0$expand_i1_val54 = $$1$off0 & 1; //@line 27152
   HEAP8[$286 >> 0] = $$1$off0$expand_i1_val54; //@line 27153
   $287 = $ReallocAsyncCtx15 + 5 | 0; //@line 27154
   HEAP8[$287 >> 0] = $16; //@line 27155
   $288 = $ReallocAsyncCtx15 + 8 | 0; //@line 27156
   HEAP32[$288 >> 2] = $40; //@line 27157
   $289 = $ReallocAsyncCtx15 + 12 | 0; //@line 27158
   HEAP32[$289 >> 2] = $54; //@line 27159
   $290 = $ReallocAsyncCtx15 + 16 | 0; //@line 27160
   HEAP32[$290 >> 2] = $6; //@line 27161
   $291 = $ReallocAsyncCtx15 + 20 | 0; //@line 27162
   HEAP32[$291 >> 2] = $132; //@line 27163
   $292 = $ReallocAsyncCtx15 + 24 | 0; //@line 27164
   HEAP32[$292 >> 2] = $18; //@line 27165
   $293 = $ReallocAsyncCtx15 + 28 | 0; //@line 27166
   HEAP32[$293 >> 2] = $68; //@line 27167
   $294 = $ReallocAsyncCtx15 + 32 | 0; //@line 27168
   HEAP32[$294 >> 2] = $281; //@line 27169
   $295 = $ReallocAsyncCtx15 + 36 | 0; //@line 27170
   HEAP32[$295 >> 2] = $60; //@line 27171
   $296 = $ReallocAsyncCtx15 + 40 | 0; //@line 27172
   HEAP32[$296 >> 2] = $72; //@line 27173
   sp = STACKTOP; //@line 27174
   STACKTOP = sp; //@line 27175
   return;
  }
 } while (0);
 if ((label | 0) == 56) {
  $301 = (__ZN11LoRaMacMcps16get_confirmationEv($40) | 0) + 10 | 0; //@line 27182
  if ($16 & 32) {
   HEAP8[$301 >> 0] = 1; //@line 27184
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($40) | 0) + 28 >> 0] = 1; //@line 27187
   $304 = HEAP32[$54 >> 2] | 0; //@line 27188
   $ReallocAsyncCtx27 = _emscripten_realloc_async_context(20) | 0; //@line 27190
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($304, $6 + 1076 | 0); //@line 27191
   if (___async) {
    HEAP32[$ReallocAsyncCtx27 >> 2] = 330; //@line 27194
    $306 = $ReallocAsyncCtx27 + 4 | 0; //@line 27195
    HEAP32[$306 >> 2] = $6; //@line 27196
    $307 = $ReallocAsyncCtx27 + 8 | 0; //@line 27197
    HEAP32[$307 >> 2] = $54; //@line 27198
    $308 = $ReallocAsyncCtx27 + 12 | 0; //@line 27199
    HEAP32[$308 >> 2] = $60; //@line 27200
    $309 = $ReallocAsyncCtx27 + 16 | 0; //@line 27201
    HEAP32[$309 >> 2] = $72; //@line 27202
    sp = STACKTOP; //@line 27203
    STACKTOP = sp; //@line 27204
    return;
   }
   ___async_unwind = 0; //@line 27206
   HEAP32[$ReallocAsyncCtx27 >> 2] = 330; //@line 27207
   $306 = $ReallocAsyncCtx27 + 4 | 0; //@line 27208
   HEAP32[$306 >> 2] = $6; //@line 27209
   $307 = $ReallocAsyncCtx27 + 8 | 0; //@line 27210
   HEAP32[$307 >> 2] = $54; //@line 27211
   $308 = $ReallocAsyncCtx27 + 12 | 0; //@line 27212
   HEAP32[$308 >> 2] = $60; //@line 27213
   $309 = $ReallocAsyncCtx27 + 16 | 0; //@line 27214
   HEAP32[$309 >> 2] = $72; //@line 27215
   sp = STACKTOP; //@line 27216
   STACKTOP = sp; //@line 27217
   return;
  }
  HEAP8[$301 >> 0] = 0; //@line 27219
  if ((HEAPU8[$6 + 895 >> 0] | 0) > (HEAPU8[$6 + 894 >> 0] | 0)) {
   $315 = HEAP32[$54 >> 2] | 0; //@line 27226
   $ReallocAsyncCtx26 = _emscripten_realloc_async_context(20) | 0; //@line 27228
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($315, $6 + 1076 | 0); //@line 27229
   if (___async) {
    HEAP32[$ReallocAsyncCtx26 >> 2] = 331; //@line 27232
    $317 = $ReallocAsyncCtx26 + 4 | 0; //@line 27233
    HEAP32[$317 >> 2] = $6; //@line 27234
    $318 = $ReallocAsyncCtx26 + 8 | 0; //@line 27235
    HEAP32[$318 >> 2] = $54; //@line 27236
    $319 = $ReallocAsyncCtx26 + 12 | 0; //@line 27237
    HEAP32[$319 >> 2] = $60; //@line 27238
    $320 = $ReallocAsyncCtx26 + 16 | 0; //@line 27239
    HEAP32[$320 >> 2] = $72; //@line 27240
    sp = STACKTOP; //@line 27241
    STACKTOP = sp; //@line 27242
    return;
   }
   ___async_unwind = 0; //@line 27244
   HEAP32[$ReallocAsyncCtx26 >> 2] = 331; //@line 27245
   $317 = $ReallocAsyncCtx26 + 4 | 0; //@line 27246
   HEAP32[$317 >> 2] = $6; //@line 27247
   $318 = $ReallocAsyncCtx26 + 8 | 0; //@line 27248
   HEAP32[$318 >> 2] = $54; //@line 27249
   $319 = $ReallocAsyncCtx26 + 12 | 0; //@line 27250
   HEAP32[$319 >> 2] = $60; //@line 27251
   $320 = $ReallocAsyncCtx26 + 16 | 0; //@line 27252
   HEAP32[$320 >> 2] = $72; //@line 27253
   sp = STACKTOP; //@line 27254
   STACKTOP = sp; //@line 27255
   return;
  } else {
   $$3$off0230 = 2; //@line 27257
  }
 }
 $321 = $6 + 944 | 0; //@line 27260
 HEAP8[$321 >> 0] = $$3$off0230 | HEAP8[$321 >> 0] & -7; //@line 27264
 $347 = $6 + 944 | 0; //@line 27265
 HEAP8[$347 >> 0] = HEAP8[$347 >> 0] | 32; //@line 27268
 $350 = HEAP32[$54 >> 2] | 0; //@line 27269
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 27271
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($350, $6 + 996 | 0, 1); //@line 27272
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 338; //@line 27275
  $352 = $ReallocAsyncCtx5 + 4 | 0; //@line 27276
  HEAP32[$352 >> 2] = $60; //@line 27277
  $353 = $ReallocAsyncCtx5 + 8 | 0; //@line 27278
  HEAP32[$353 >> 2] = $72; //@line 27279
  sp = STACKTOP; //@line 27280
  STACKTOP = sp; //@line 27281
  return;
 }
 ___async_unwind = 0; //@line 27283
 HEAP32[$ReallocAsyncCtx5 >> 2] = 338; //@line 27284
 $352 = $ReallocAsyncCtx5 + 4 | 0; //@line 27285
 HEAP32[$352 >> 2] = $60; //@line 27286
 $353 = $ReallocAsyncCtx5 + 8 | 0; //@line 27287
 HEAP32[$353 >> 2] = $72; //@line 27288
 sp = STACKTOP; //@line 27289
 STACKTOP = sp; //@line 27290
 return;
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$0$be = 0, $$0$i = 0, $$0$i104 = 0, $$0$i108 = 0, $$0$i98 = 0, $$0116 = 0, $$095113 = 0, $$096$be = 0, $$096$lcssa = 0, $$096115 = 0, $$1$lcssa = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $147 = 0, $15 = 0, $151 = 0, $156 = 0, $157 = 0, $16 = 0, $160 = 0, $166 = 0, $169 = 0, $17 = 0, $174 = 0, $18 = 0, $182 = 0, $19 = 0, $20 = 0, $201 = 0, $21 = 0, $211 = 0, $212 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $286 = 0, $287 = 0, $29 = 0, $298 = 0, $299 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $336 = 0, $34 = 0, $342 = 0, $343 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $412 = 0, $413 = 0, $42 = 0, $423 = 0, $427 = 0, $43 = 0, $431 = 0, $434 = 0, $44 = 0, $440 = 0, $443 = 0, $444 = 0, $45 = 0, $453 = 0, $454 = 0, $46 = 0, $47 = 0, $49 = 0, $531 = 0, $553 = 0, $563 = 0, $564 = 0, $60 = 0, $61 = 0, $633 = 0, $643 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, $div = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18385
 STACKTOP = STACKTOP + 32 | 0; //@line 18386
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 18386
 $8 = sp + 12 | 0; //@line 18387
 $9 = sp; //@line 18388
 $10 = sp + 26 | 0; //@line 18389
 $11 = sp + 25 | 0; //@line 18390
 $12 = sp + 24 | 0; //@line 18391
 $13 = $3 & 255; //@line 18392
 if (($2 & 255) >= ($3 & 255)) {
  $$096$lcssa = 0; //@line 18395
  STACKTOP = sp; //@line 18396
  return $$096$lcssa | 0; //@line 18396
 }
 $15 = $5 + 4 | 0; //@line 18398
 $16 = $5 + 12 | 0; //@line 18399
 $17 = $5 + 13 | 0; //@line 18400
 $18 = $8 + 4 | 0; //@line 18401
 $19 = $6 + 60 | 0; //@line 18402
 $20 = $8 + 6 | 0; //@line 18403
 $21 = $6 + 44 | 0; //@line 18404
 $22 = $8 + 5 | 0; //@line 18405
 $23 = $6 + 1 | 0; //@line 18406
 $24 = $8 + 7 | 0; //@line 18407
 $25 = $8 + 8 | 0; //@line 18408
 $26 = $6 + 32 | 0; //@line 18409
 $27 = $8 + 9 | 0; //@line 18410
 $28 = $0 + 3 | 0; //@line 18411
 $29 = $0 + 2 | 0; //@line 18412
 $30 = $6 + 56 | 0; //@line 18413
 $31 = $6 + 58 | 0; //@line 18414
 $32 = $8 + 1 | 0; //@line 18415
 $33 = $8 + 4 | 0; //@line 18416
 $34 = $6 + 40 | 0; //@line 18417
 $35 = $6 + 36 | 0; //@line 18418
 $36 = $6 + 33 | 0; //@line 18419
 $37 = $0 + 1 | 0; //@line 18420
 $38 = $8 + 4 | 0; //@line 18421
 $39 = $9 + 4 | 0; //@line 18422
 $40 = $9 + 8 | 0; //@line 18423
 $41 = $6 + 16 | 0; //@line 18424
 $42 = $6 + 20 | 0; //@line 18425
 $43 = $8 + 1 | 0; //@line 18426
 $44 = $8 + 2 | 0; //@line 18427
 $45 = $6 + 45 | 0; //@line 18428
 $46 = $6 + 48 | 0; //@line 18429
 $47 = $8 + 4 | 0; //@line 18430
 $$0116 = $2; //@line 18431
 $$096115 = 0; //@line 18431
 L4 : while (1) {
  $49 = $$0116 + 1 << 24 >> 24; //@line 18434
  switch (HEAP8[$1 + ($$0116 & 255) >> 0] | 0) {
  case 2:
   {
    HEAP32[$15 >> 2] = 0; //@line 18439
    HEAP8[$16 >> 0] = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 18444
    HEAP8[$17 >> 0] = HEAP8[$1 + ($$0116 + 2 & 255) >> 0] | 0; //@line 18449
    $$0$be = $$0116 + 3 << 24 >> 24; //@line 18450
    $$096$be = $$096115; //@line 18450
    break;
   }
  case 3:
   {
    HEAP8[$9 >> 0] = 0; //@line 18454
    HEAP8[$10 >> 0] = 0; //@line 18455
    HEAP8[$11 >> 0] = 0; //@line 18456
    HEAP8[$12 >> 0] = 0; //@line 18457
    $60 = $49 & 255; //@line 18458
    $61 = $60 + -1 | 0; //@line 18459
    HEAP32[$8 >> 2] = $1 + $61; //@line 18461
    HEAP8[$18 >> 0] = $13 - $61; //@line 18464
    HEAP8[$20 >> 0] = HEAP8[$19 >> 0] | 0; //@line 18466
    HEAP8[$22 >> 0] = HEAP8[$21 >> 0] | 0; //@line 18468
    HEAP8[$24 >> 0] = HEAP8[$23 >> 0] | 0; //@line 18470
    HEAP8[$25 >> 0] = HEAP8[$6 >> 0] | 0; //@line 18472
    HEAP8[$27 >> 0] = HEAP8[$26 >> 0] | 0; //@line 18474
    $72 = HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] | 0; //@line 18477
    $AsyncCtx = _emscripten_alloc_async_context(276, sp) | 0; //@line 18478
    $73 = FUNCTION_TABLE_iiiiiii[$72 & 3]($7, $8, $9, $10, $11, $12) | 0; //@line 18479
    if (___async) {
     label = 6; //@line 18482
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 18485
    if (($73 & 7) == 7) {
     HEAP8[$23 >> 0] = HEAP8[$9 >> 0] | 0; //@line 18490
     HEAP8[$6 >> 0] = HEAP8[$10 >> 0] | 0; //@line 18492
     HEAP8[$26 >> 0] = HEAP8[$11 >> 0] | 0; //@line 18494
    }
    $147 = HEAP8[$12 >> 0] | 0; //@line 18496
    if (($147 & 255) > 4) {
     $div = ($147 & 255) / 5 | 0; //@line 18499
     $151 = (-128 - (HEAP8[$28 >> 0] | 0) & 255) + -1 | 0; //@line 18504
     $$095113 = 0; //@line 18505
     $157 = HEAP8[$29 >> 0] | 0; //@line 18505
     while (1) {
      $156 = $157 & 255; //@line 18507
      if (($151 | 0) > ($156 | 0)) {
       $160 = $157 + 2 << 24 >> 24; //@line 18511
       HEAP8[$0 + 4 + $156 >> 0] = 3; //@line 18515
       HEAP8[$29 >> 0] = $160; //@line 18516
       HEAP8[($157 + 1 & 255) + ($0 + 4) >> 0] = $73; //@line 18517
       HEAP8[$0 >> 0] = 1; //@line 18518
       $$0$i = 0; //@line 18519
       $643 = $160; //@line 18519
      } else {
       $$0$i = -1e3; //@line 18521
       $643 = $157; //@line 18521
      }
      $$095113 = $$095113 + 1 << 24 >> 24; //@line 18523
      if (($$095113 & 255) >= ($div & 255)) {
       $$1$lcssa = $$0$i; //@line 18528
       break;
      } else {
       $157 = $643; //@line 18526
      }
     }
    } else {
     $$1$lcssa = $$096115; //@line 18533
    }
    $$0$be = $60 + 255 + ($147 & 255) & 255; //@line 18539
    $$096$be = $$1$lcssa; //@line 18539
    break;
   }
  case 4:
   {
    $166 = $$0116 + 2 << 24 >> 24; //@line 18543
    $169 = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 18546
    HEAP8[$30 >> 0] = $169; //@line 18547
    HEAP16[$31 >> 1] = 1 << ($169 & 255); //@line 18551
    $174 = HEAP8[$29 >> 0] | 0; //@line 18553
    if (($174 & 255) < (-128 - (HEAP8[$28 >> 0] | 0) & 255)) {
     HEAP8[$29 >> 0] = $174 + 1 << 24 >> 24; //@line 18560
     HEAP8[($174 & 255) + ($0 + 4) >> 0] = 4; //@line 18561
     HEAP8[$0 >> 0] = 1; //@line 18562
     $$0$be = $166; //@line 18563
     $$096$be = 0; //@line 18563
    } else {
     $$0$be = $166; //@line 18565
     $$096$be = -1e3; //@line 18565
    }
    break;
   }
  case 5:
   {
    $182 = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 18572
    HEAP8[$32 >> 0] = ($182 & 255) >>> 4 & 7; //@line 18577
    HEAP8[$8 >> 0] = $182 & 15; //@line 18579
    $201 = $$0116 + 5 << 24 >> 24; //@line 18593
    HEAP32[$33 >> 2] = (HEAPU8[$1 + ($$0116 + 4 & 255) >> 0] << 16 | (HEAPU8[$1 + ($$0116 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0116 + 2 & 255) >> 0])) * 100; //@line 18601
    $211 = HEAP32[(HEAP32[$7 >> 2] | 0) + 40 >> 2] | 0; //@line 18604
    $AsyncCtx3 = _emscripten_alloc_async_context(272, sp) | 0; //@line 18605
    $212 = FUNCTION_TABLE_iii[$211 & 31]($7, $8) | 0; //@line 18606
    if (___async) {
     label = 18; //@line 18609
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 18612
    if (($212 & 7) == 7) {
     HEAP8[$34 >> 0] = HEAP8[$8 >> 0] | 0; //@line 18617
     HEAP32[$35 >> 2] = HEAP32[$33 >> 2]; //@line 18619
     HEAP8[$36 >> 0] = HEAP8[$32 >> 0] | 0; //@line 18621
    }
    $286 = HEAP8[$29 >> 0] | 0; //@line 18624
    $287 = $286 & 255; //@line 18625
    if (((-128 - (HEAP8[$28 >> 0] | 0) & 255) + -1 | 0) > ($287 | 0)) {
     HEAP8[$0 + 4 + $287 >> 0] = 5; //@line 18633
     HEAP8[$29 >> 0] = $286 + 2 << 24 >> 24; //@line 18635
     HEAP8[($286 + 1 & 255) + ($0 + 4) >> 0] = $212; //@line 18638
     HEAP8[$37 >> 0] = 1; //@line 18639
     HEAP8[$0 >> 0] = 1; //@line 18640
     $$0$i104 = 0; //@line 18641
    } else {
     $$0$i104 = -1e3; //@line 18643
    }
    $$0$be = $201; //@line 18645
    $$096$be = $$0$i104; //@line 18645
    break;
   }
  case 6:
   {
    $298 = HEAP8[$29 >> 0] | 0; //@line 18650
    $299 = $298 & 255; //@line 18651
    if (((-128 - (HEAP8[$28 >> 0] | 0) & 255) + -2 | 0) > ($299 | 0)) {
     HEAP8[$0 + 4 + $299 >> 0] = 6; //@line 18659
     HEAP8[($298 + 1 & 255) + ($0 + 4) >> 0] = -1; //@line 18663
     HEAP8[$29 >> 0] = $298 + 3 << 24 >> 24; //@line 18665
     HEAP8[($298 + 2 & 255) + ($0 + 4) >> 0] = $4; //@line 18668
     HEAP8[$0 >> 0] = 1; //@line 18669
     $$0$be = $49; //@line 18670
     $$096$be = 0; //@line 18670
    } else {
     $$0$be = $49; //@line 18672
     $$096$be = -1e3; //@line 18672
    }
    break;
   }
  case 7:
   {
    HEAP8[$38 >> 0] = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 18681
    HEAP32[$8 >> 2] = $9; //@line 18682
    HEAP32[$9 >> 2] = (HEAPU8[$1 + ($$0116 + 4 & 255) >> 0] << 16 | (HEAPU8[$1 + ($$0116 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0116 + 2 & 255) >> 0])) * 100; //@line 18703
    HEAP32[$39 >> 2] = 0; //@line 18704
    $336 = $$0116 + 6 << 24 >> 24; //@line 18705
    HEAP8[$40 >> 0] = HEAP8[$1 + ($$0116 + 5 & 255) >> 0] | 0; //@line 18709
    $342 = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0; //@line 18712
    $AsyncCtx7 = _emscripten_alloc_async_context(268, sp) | 0; //@line 18713
    $343 = FUNCTION_TABLE_iii[$342 & 31]($7, $8) | 0; //@line 18714
    if (___async) {
     label = 27; //@line 18717
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 18720
    $412 = HEAP8[$29 >> 0] | 0; //@line 18722
    $413 = $412 & 255; //@line 18723
    if (((-128 - (HEAP8[$28 >> 0] | 0) & 255) + -1 | 0) > ($413 | 0)) {
     HEAP8[$0 + 4 + $413 >> 0] = 7; //@line 18734
     HEAP8[$29 >> 0] = $412 + 2 << 24 >> 24; //@line 18735
     HEAP8[($412 + 1 & 255) + ($0 + 4) >> 0] = $343; //@line 18736
     HEAP8[$0 >> 0] = 1; //@line 18737
     $$0$i108 = 0; //@line 18738
    } else {
     $$0$i108 = -1e3; //@line 18740
    }
    $$0$be = $336; //@line 18742
    $$096$be = $$0$i108; //@line 18742
    break;
   }
  case 8:
   {
    $423 = $$0116 + 2 << 24 >> 24; //@line 18746
    $427 = HEAP8[$1 + ($49 & 255) >> 0] & 15; //@line 18750
    $431 = ($427 + ($427 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 18755
    HEAP32[$41 >> 2] = $431; //@line 18756
    HEAP32[$42 >> 2] = $431 + 1e3; //@line 18758
    $434 = HEAP8[$29 >> 0] | 0; //@line 18760
    if (($434 & 255) < (-128 - (HEAP8[$28 >> 0] | 0) & 255)) {
     HEAP8[$29 >> 0] = $434 + 1 << 24 >> 24; //@line 18767
     HEAP8[($434 & 255) + ($0 + 4) >> 0] = 8; //@line 18768
     HEAP8[$37 >> 0] = 1; //@line 18769
     HEAP8[$0 >> 0] = 1; //@line 18770
     $$0$be = $423; //@line 18771
     $$096$be = 0; //@line 18771
    } else {
     $$0$be = $423; //@line 18773
     $$096$be = -1e3; //@line 18773
    }
    break;
   }
  case 9:
   {
    $440 = $$0116 + 2 << 24 >> 24; //@line 18778
    $443 = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 18781
    HEAP8[$8 >> 0] = 0; //@line 18782
    $444 = $443 & 255; //@line 18783
    HEAP8[$43 >> 0] = $444 >>> 5 & 1; //@line 18787
    if ($444 & 16 | 0) {
     HEAP8[$8 >> 0] = 1; //@line 18791
    }
    HEAP8[$44 >> 0] = $444 & 15; //@line 18795
    $453 = HEAP32[(HEAP32[$7 >> 2] | 0) + 44 >> 2] | 0; //@line 18798
    $AsyncCtx11 = _emscripten_alloc_async_context(276, sp) | 0; //@line 18799
    $454 = FUNCTION_TABLE_iii[$453 & 31]($7, $8) | 0; //@line 18800
    if (___async) {
     label = 36; //@line 18803
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 18806
    if ($454) {
     HEAP8[$21 >> 0] = HEAP8[$8 >> 0] | 0; //@line 18809
     HEAP8[$45 >> 0] = HEAP8[$43 >> 0] | 0; //@line 18811
     HEAPF32[$46 >> 2] = +(HEAPU8[14201 + (HEAPU8[$44 >> 0] | 0) >> 0] | 0); //@line 18817
     $531 = HEAP8[$29 >> 0] | 0; //@line 18819
     if (($531 & 255) < (-128 - (HEAP8[$28 >> 0] | 0) & 255)) {
      HEAP8[$29 >> 0] = $531 + 1 << 24 >> 24; //@line 18826
      HEAP8[($531 & 255) + ($0 + 4) >> 0] = 9; //@line 18827
      HEAP8[$0 >> 0] = 1; //@line 18828
      $$2 = 0; //@line 18829
     } else {
      $$2 = -1e3; //@line 18831
     }
    } else {
     $$2 = $$096115; //@line 18834
    }
    $$0$be = $440; //@line 18836
    $$096$be = $$2; //@line 18836
    break;
   }
  case 10:
   {
    HEAP8[$8 >> 0] = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 18844
    $553 = $$0116 + 5 << 24 >> 24; //@line 18857
    HEAP32[$47 >> 2] = (HEAPU8[$1 + ($$0116 + 4 & 255) >> 0] << 16 | (HEAPU8[$1 + ($$0116 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0116 + 2 & 255) >> 0])) * 100; //@line 18865
    $563 = HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] | 0; //@line 18868
    $AsyncCtx15 = _emscripten_alloc_async_context(272, sp) | 0; //@line 18869
    $564 = FUNCTION_TABLE_iii[$563 & 31]($7, $8) | 0; //@line 18870
    if (___async) {
     label = 42; //@line 18873
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 18876
    $633 = HEAP8[$29 >> 0] | 0; //@line 18878
    if (($633 & 255) < (-128 - (HEAP8[$28 >> 0] | 0) & 255)) {
     HEAP8[($633 & 255) + ($0 + 4) >> 0] = 10; //@line 18885
     HEAP8[$29 >> 0] = $633 + 2 << 24 >> 24; //@line 18887
     HEAP8[($633 + 1 & 255) + ($0 + 4) >> 0] = $564; //@line 18890
     HEAP8[$37 >> 0] = 1; //@line 18891
     HEAP8[$0 >> 0] = 1; //@line 18892
     $$0$i98 = 0; //@line 18893
    } else {
     $$0$i98 = -1e3; //@line 18895
    }
    $$0$be = $553; //@line 18897
    $$096$be = $$0$i98; //@line 18897
    break;
   }
  default:
   {
    $$0$be = $49; //@line 18901
    $$096$be = -1013; //@line 18901
   }
  }
  if (($$0$be & 255) < ($3 & 255)) {
   $$0116 = $$0$be; //@line 18906
   $$096115 = $$096$be; //@line 18906
  } else {
   $$096$lcssa = $$096$be; //@line 18908
   label = 47; //@line 18909
   break;
  }
 }
 if ((label | 0) == 6) {
  HEAP32[$AsyncCtx >> 2] = 490; //@line 18914
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 18916
  HEAP32[$AsyncCtx + 8 >> 2] = $47; //@line 18918
  HEAP8[$AsyncCtx + 12 >> 0] = $4; //@line 18920
  HEAP32[$AsyncCtx + 16 >> 2] = $38; //@line 18922
  HEAP32[$AsyncCtx + 20 >> 2] = $27; //@line 18924
  HEAP32[$AsyncCtx + 24 >> 2] = $16; //@line 18926
  HEAP32[$AsyncCtx + 28 >> 2] = $28; //@line 18928
  HEAP32[$AsyncCtx + 32 >> 2] = $8; //@line 18930
  HEAP32[$AsyncCtx + 36 >> 2] = $8; //@line 18932
  HEAP32[$AsyncCtx + 40 >> 2] = $7; //@line 18934
  HEAP32[$AsyncCtx + 44 >> 2] = $9; //@line 18936
  HEAP32[$AsyncCtx + 48 >> 2] = $0; //@line 18938
  HEAP32[$AsyncCtx + 52 >> 2] = $17; //@line 18940
  HEAP32[$AsyncCtx + 56 >> 2] = $8; //@line 18942
  HEAP8[$AsyncCtx + 60 >> 0] = $2; //@line 18944
  HEAP32[$AsyncCtx + 64 >> 2] = $7; //@line 18946
  HEAP8[$AsyncCtx + 68 >> 0] = $3; //@line 18948
  HEAP32[$AsyncCtx + 72 >> 2] = $1; //@line 18950
  HEAP32[$AsyncCtx + 76 >> 2] = $8; //@line 18952
  HEAP32[$AsyncCtx + 80 >> 2] = $8; //@line 18954
  HEAP32[$AsyncCtx + 84 >> 2] = $29; //@line 18956
  HEAP32[$AsyncCtx + 88 >> 2] = $6; //@line 18958
  HEAP32[$AsyncCtx + 92 >> 2] = $13; //@line 18960
  HEAP32[$AsyncCtx + 96 >> 2] = $7; //@line 18962
  HEAP32[$AsyncCtx + 100 >> 2] = $35; //@line 18964
  HEAP32[$AsyncCtx + 104 >> 2] = $44; //@line 18966
  HEAP32[$AsyncCtx + 108 >> 2] = $25; //@line 18968
  HEAP32[$AsyncCtx + 112 >> 2] = $37; //@line 18970
  HEAP32[$AsyncCtx + 116 >> 2] = $46; //@line 18972
  HEAP32[$AsyncCtx + 120 >> 2] = $36; //@line 18974
  HEAP32[$AsyncCtx + 124 >> 2] = $8; //@line 18976
  HEAP32[$AsyncCtx + 128 >> 2] = $45; //@line 18978
  HEAP32[$AsyncCtx + 132 >> 2] = $15; //@line 18980
  HEAP32[$AsyncCtx + 136 >> 2] = $26; //@line 18982
  HEAP32[$AsyncCtx + 140 >> 2] = $12; //@line 18984
  HEAP32[$AsyncCtx + 144 >> 2] = $8; //@line 18986
  HEAP32[$AsyncCtx + 148 >> 2] = $42; //@line 18988
  HEAP32[$AsyncCtx + 152 >> 2] = $33; //@line 18990
  HEAP32[$AsyncCtx + 156 >> 2] = $11; //@line 18992
  HEAP32[$AsyncCtx + 160 >> 2] = $60; //@line 18994
  HEAP32[$AsyncCtx + 164 >> 2] = $21; //@line 18996
  HEAP32[$AsyncCtx + 168 >> 2] = $32; //@line 18998
  HEAP32[$AsyncCtx + 172 >> 2] = $22; //@line 19000
  HEAP32[$AsyncCtx + 176 >> 2] = $41; //@line 19002
  HEAP32[$AsyncCtx + 180 >> 2] = $43; //@line 19004
  HEAP32[$AsyncCtx + 184 >> 2] = $23; //@line 19006
  HEAP32[$AsyncCtx + 188 >> 2] = $10; //@line 19008
  HEAP32[$AsyncCtx + 192 >> 2] = $34; //@line 19010
  HEAP32[$AsyncCtx + 196 >> 2] = $24; //@line 19012
  HEAP32[$AsyncCtx + 200 >> 2] = $8; //@line 19014
  HEAP32[$AsyncCtx + 204 >> 2] = $8; //@line 19016
  HEAP32[$AsyncCtx + 208 >> 2] = $8; //@line 19018
  HEAP32[$AsyncCtx + 212 >> 2] = $7; //@line 19020
  HEAP32[$AsyncCtx + 216 >> 2] = $9; //@line 19022
  HEAP32[$AsyncCtx + 220 >> 2] = $30; //@line 19024
  HEAP32[$AsyncCtx + 224 >> 2] = $18; //@line 19026
  HEAP32[$AsyncCtx + 228 >> 2] = $39; //@line 19028
  HEAP32[$AsyncCtx + 232 >> 2] = $8; //@line 19030
  HEAP32[$AsyncCtx + 236 >> 2] = $0; //@line 19032
  HEAP32[$AsyncCtx + 240 >> 2] = $9; //@line 19034
  HEAP32[$AsyncCtx + 244 >> 2] = $9; //@line 19036
  HEAP32[$AsyncCtx + 248 >> 2] = $8; //@line 19038
  HEAP32[$AsyncCtx + 252 >> 2] = $19; //@line 19040
  HEAP32[$AsyncCtx + 256 >> 2] = $7; //@line 19042
  HEAP32[$AsyncCtx + 260 >> 2] = $40; //@line 19044
  HEAP32[$AsyncCtx + 264 >> 2] = $$096115; //@line 19046
  HEAP32[$AsyncCtx + 268 >> 2] = $31; //@line 19048
  HEAP32[$AsyncCtx + 272 >> 2] = $20; //@line 19050
  sp = STACKTOP; //@line 19051
  STACKTOP = sp; //@line 19052
  return 0; //@line 19052
 } else if ((label | 0) == 18) {
  HEAP32[$AsyncCtx3 >> 2] = 491; //@line 19055
  HEAP32[$AsyncCtx3 + 4 >> 2] = $7; //@line 19057
  HEAP32[$AsyncCtx3 + 8 >> 2] = $47; //@line 19059
  HEAP8[$AsyncCtx3 + 12 >> 0] = $4; //@line 19061
  HEAP32[$AsyncCtx3 + 16 >> 2] = $38; //@line 19063
  HEAP32[$AsyncCtx3 + 20 >> 2] = $27; //@line 19065
  HEAP32[$AsyncCtx3 + 24 >> 2] = $16; //@line 19067
  HEAP32[$AsyncCtx3 + 28 >> 2] = $28; //@line 19069
  HEAP32[$AsyncCtx3 + 32 >> 2] = $8; //@line 19071
  HEAP32[$AsyncCtx3 + 36 >> 2] = $8; //@line 19073
  HEAP32[$AsyncCtx3 + 40 >> 2] = $7; //@line 19075
  HEAP32[$AsyncCtx3 + 44 >> 2] = $9; //@line 19077
  HEAP32[$AsyncCtx3 + 48 >> 2] = $0; //@line 19079
  HEAP32[$AsyncCtx3 + 52 >> 2] = $17; //@line 19081
  HEAP32[$AsyncCtx3 + 56 >> 2] = $8; //@line 19083
  HEAP8[$AsyncCtx3 + 60 >> 0] = $2; //@line 19085
  HEAP32[$AsyncCtx3 + 64 >> 2] = $7; //@line 19087
  HEAP8[$AsyncCtx3 + 68 >> 0] = $3; //@line 19089
  HEAP32[$AsyncCtx3 + 72 >> 2] = $1; //@line 19091
  HEAP32[$AsyncCtx3 + 76 >> 2] = $8; //@line 19093
  HEAP32[$AsyncCtx3 + 80 >> 2] = $8; //@line 19095
  HEAP32[$AsyncCtx3 + 84 >> 2] = $29; //@line 19097
  HEAP32[$AsyncCtx3 + 88 >> 2] = $6; //@line 19099
  HEAP32[$AsyncCtx3 + 92 >> 2] = $13; //@line 19101
  HEAP32[$AsyncCtx3 + 96 >> 2] = $7; //@line 19103
  HEAP32[$AsyncCtx3 + 100 >> 2] = $35; //@line 19105
  HEAP32[$AsyncCtx3 + 104 >> 2] = $44; //@line 19107
  HEAP32[$AsyncCtx3 + 108 >> 2] = $25; //@line 19109
  HEAP8[$AsyncCtx3 + 112 >> 0] = $201; //@line 19111
  HEAP32[$AsyncCtx3 + 116 >> 2] = $37; //@line 19113
  HEAP32[$AsyncCtx3 + 120 >> 2] = $46; //@line 19115
  HEAP32[$AsyncCtx3 + 124 >> 2] = $36; //@line 19117
  HEAP32[$AsyncCtx3 + 128 >> 2] = $8; //@line 19119
  HEAP32[$AsyncCtx3 + 132 >> 2] = $45; //@line 19121
  HEAP32[$AsyncCtx3 + 136 >> 2] = $15; //@line 19123
  HEAP32[$AsyncCtx3 + 140 >> 2] = $26; //@line 19125
  HEAP32[$AsyncCtx3 + 144 >> 2] = $12; //@line 19127
  HEAP32[$AsyncCtx3 + 148 >> 2] = $8; //@line 19129
  HEAP32[$AsyncCtx3 + 152 >> 2] = $42; //@line 19131
  HEAP32[$AsyncCtx3 + 156 >> 2] = $33; //@line 19133
  HEAP32[$AsyncCtx3 + 160 >> 2] = $11; //@line 19135
  HEAP32[$AsyncCtx3 + 164 >> 2] = $21; //@line 19137
  HEAP32[$AsyncCtx3 + 168 >> 2] = $32; //@line 19139
  HEAP32[$AsyncCtx3 + 172 >> 2] = $22; //@line 19141
  HEAP32[$AsyncCtx3 + 176 >> 2] = $41; //@line 19143
  HEAP32[$AsyncCtx3 + 180 >> 2] = $43; //@line 19145
  HEAP32[$AsyncCtx3 + 184 >> 2] = $23; //@line 19147
  HEAP32[$AsyncCtx3 + 188 >> 2] = $10; //@line 19149
  HEAP32[$AsyncCtx3 + 192 >> 2] = $34; //@line 19151
  HEAP32[$AsyncCtx3 + 196 >> 2] = $24; //@line 19153
  HEAP32[$AsyncCtx3 + 200 >> 2] = $8; //@line 19155
  HEAP32[$AsyncCtx3 + 204 >> 2] = $8; //@line 19157
  HEAP32[$AsyncCtx3 + 208 >> 2] = $8; //@line 19159
  HEAP32[$AsyncCtx3 + 212 >> 2] = $7; //@line 19161
  HEAP32[$AsyncCtx3 + 216 >> 2] = $9; //@line 19163
  HEAP32[$AsyncCtx3 + 220 >> 2] = $30; //@line 19165
  HEAP32[$AsyncCtx3 + 224 >> 2] = $18; //@line 19167
  HEAP32[$AsyncCtx3 + 228 >> 2] = $39; //@line 19169
  HEAP32[$AsyncCtx3 + 232 >> 2] = $8; //@line 19171
  HEAP32[$AsyncCtx3 + 236 >> 2] = $0; //@line 19173
  HEAP32[$AsyncCtx3 + 240 >> 2] = $9; //@line 19175
  HEAP32[$AsyncCtx3 + 244 >> 2] = $9; //@line 19177
  HEAP32[$AsyncCtx3 + 248 >> 2] = $8; //@line 19179
  HEAP32[$AsyncCtx3 + 252 >> 2] = $19; //@line 19181
  HEAP32[$AsyncCtx3 + 256 >> 2] = $7; //@line 19183
  HEAP32[$AsyncCtx3 + 260 >> 2] = $40; //@line 19185
  HEAP32[$AsyncCtx3 + 264 >> 2] = $31; //@line 19187
  HEAP32[$AsyncCtx3 + 268 >> 2] = $20; //@line 19189
  sp = STACKTOP; //@line 19190
  STACKTOP = sp; //@line 19191
  return 0; //@line 19191
 } else if ((label | 0) == 27) {
  HEAP32[$AsyncCtx7 >> 2] = 492; //@line 19194
  HEAP32[$AsyncCtx7 + 4 >> 2] = $7; //@line 19196
  HEAP32[$AsyncCtx7 + 8 >> 2] = $47; //@line 19198
  HEAP8[$AsyncCtx7 + 12 >> 0] = $4; //@line 19200
  HEAP32[$AsyncCtx7 + 16 >> 2] = $38; //@line 19202
  HEAP32[$AsyncCtx7 + 20 >> 2] = $27; //@line 19204
  HEAP32[$AsyncCtx7 + 24 >> 2] = $16; //@line 19206
  HEAP32[$AsyncCtx7 + 28 >> 2] = $28; //@line 19208
  HEAP32[$AsyncCtx7 + 32 >> 2] = $8; //@line 19210
  HEAP32[$AsyncCtx7 + 36 >> 2] = $8; //@line 19212
  HEAP32[$AsyncCtx7 + 40 >> 2] = $7; //@line 19214
  HEAP32[$AsyncCtx7 + 44 >> 2] = $9; //@line 19216
  HEAP32[$AsyncCtx7 + 48 >> 2] = $0; //@line 19218
  HEAP32[$AsyncCtx7 + 52 >> 2] = $17; //@line 19220
  HEAP32[$AsyncCtx7 + 56 >> 2] = $8; //@line 19222
  HEAP8[$AsyncCtx7 + 60 >> 0] = $336; //@line 19224
  HEAP8[$AsyncCtx7 + 61 >> 0] = $2; //@line 19226
  HEAP32[$AsyncCtx7 + 64 >> 2] = $7; //@line 19228
  HEAP8[$AsyncCtx7 + 68 >> 0] = $3; //@line 19230
  HEAP32[$AsyncCtx7 + 72 >> 2] = $1; //@line 19232
  HEAP32[$AsyncCtx7 + 76 >> 2] = $8; //@line 19234
  HEAP32[$AsyncCtx7 + 80 >> 2] = $8; //@line 19236
  HEAP32[$AsyncCtx7 + 84 >> 2] = $29; //@line 19238
  HEAP32[$AsyncCtx7 + 88 >> 2] = $6; //@line 19240
  HEAP32[$AsyncCtx7 + 92 >> 2] = $13; //@line 19242
  HEAP32[$AsyncCtx7 + 96 >> 2] = $7; //@line 19244
  HEAP32[$AsyncCtx7 + 100 >> 2] = $35; //@line 19246
  HEAP32[$AsyncCtx7 + 104 >> 2] = $44; //@line 19248
  HEAP32[$AsyncCtx7 + 108 >> 2] = $25; //@line 19250
  HEAP32[$AsyncCtx7 + 112 >> 2] = $37; //@line 19252
  HEAP32[$AsyncCtx7 + 116 >> 2] = $46; //@line 19254
  HEAP32[$AsyncCtx7 + 120 >> 2] = $36; //@line 19256
  HEAP32[$AsyncCtx7 + 124 >> 2] = $8; //@line 19258
  HEAP32[$AsyncCtx7 + 128 >> 2] = $45; //@line 19260
  HEAP32[$AsyncCtx7 + 132 >> 2] = $15; //@line 19262
  HEAP32[$AsyncCtx7 + 136 >> 2] = $26; //@line 19264
  HEAP32[$AsyncCtx7 + 140 >> 2] = $12; //@line 19266
  HEAP32[$AsyncCtx7 + 144 >> 2] = $8; //@line 19268
  HEAP32[$AsyncCtx7 + 148 >> 2] = $42; //@line 19270
  HEAP32[$AsyncCtx7 + 152 >> 2] = $33; //@line 19272
  HEAP32[$AsyncCtx7 + 156 >> 2] = $11; //@line 19274
  HEAP32[$AsyncCtx7 + 160 >> 2] = $21; //@line 19276
  HEAP32[$AsyncCtx7 + 164 >> 2] = $32; //@line 19278
  HEAP32[$AsyncCtx7 + 168 >> 2] = $22; //@line 19280
  HEAP32[$AsyncCtx7 + 172 >> 2] = $41; //@line 19282
  HEAP32[$AsyncCtx7 + 176 >> 2] = $43; //@line 19284
  HEAP32[$AsyncCtx7 + 180 >> 2] = $23; //@line 19286
  HEAP32[$AsyncCtx7 + 184 >> 2] = $10; //@line 19288
  HEAP32[$AsyncCtx7 + 188 >> 2] = $34; //@line 19290
  HEAP32[$AsyncCtx7 + 192 >> 2] = $24; //@line 19292
  HEAP32[$AsyncCtx7 + 196 >> 2] = $8; //@line 19294
  HEAP32[$AsyncCtx7 + 200 >> 2] = $8; //@line 19296
  HEAP32[$AsyncCtx7 + 204 >> 2] = $8; //@line 19298
  HEAP32[$AsyncCtx7 + 208 >> 2] = $7; //@line 19300
  HEAP32[$AsyncCtx7 + 212 >> 2] = $9; //@line 19302
  HEAP32[$AsyncCtx7 + 216 >> 2] = $30; //@line 19304
  HEAP32[$AsyncCtx7 + 220 >> 2] = $18; //@line 19306
  HEAP32[$AsyncCtx7 + 224 >> 2] = $39; //@line 19308
  HEAP32[$AsyncCtx7 + 228 >> 2] = $8; //@line 19310
  HEAP32[$AsyncCtx7 + 232 >> 2] = $0; //@line 19312
  HEAP32[$AsyncCtx7 + 236 >> 2] = $9; //@line 19314
  HEAP32[$AsyncCtx7 + 240 >> 2] = $9; //@line 19316
  HEAP32[$AsyncCtx7 + 244 >> 2] = $8; //@line 19318
  HEAP32[$AsyncCtx7 + 248 >> 2] = $19; //@line 19320
  HEAP32[$AsyncCtx7 + 252 >> 2] = $7; //@line 19322
  HEAP32[$AsyncCtx7 + 256 >> 2] = $40; //@line 19324
  HEAP32[$AsyncCtx7 + 260 >> 2] = $31; //@line 19326
  HEAP32[$AsyncCtx7 + 264 >> 2] = $20; //@line 19328
  sp = STACKTOP; //@line 19329
  STACKTOP = sp; //@line 19330
  return 0; //@line 19330
 } else if ((label | 0) == 36) {
  HEAP32[$AsyncCtx11 >> 2] = 493; //@line 19333
  HEAP32[$AsyncCtx11 + 4 >> 2] = $7; //@line 19335
  HEAP32[$AsyncCtx11 + 8 >> 2] = $47; //@line 19337
  HEAP8[$AsyncCtx11 + 12 >> 0] = $4; //@line 19339
  HEAP32[$AsyncCtx11 + 16 >> 2] = $38; //@line 19341
  HEAP32[$AsyncCtx11 + 20 >> 2] = $27; //@line 19343
  HEAP32[$AsyncCtx11 + 24 >> 2] = $16; //@line 19345
  HEAP32[$AsyncCtx11 + 28 >> 2] = $28; //@line 19347
  HEAP32[$AsyncCtx11 + 32 >> 2] = $8; //@line 19349
  HEAP32[$AsyncCtx11 + 36 >> 2] = $8; //@line 19351
  HEAP32[$AsyncCtx11 + 40 >> 2] = $7; //@line 19353
  HEAP32[$AsyncCtx11 + 44 >> 2] = $9; //@line 19355
  HEAP32[$AsyncCtx11 + 48 >> 2] = $0; //@line 19357
  HEAP32[$AsyncCtx11 + 52 >> 2] = $17; //@line 19359
  HEAP32[$AsyncCtx11 + 56 >> 2] = $8; //@line 19361
  HEAP8[$AsyncCtx11 + 60 >> 0] = $2; //@line 19363
  HEAP32[$AsyncCtx11 + 64 >> 2] = $7; //@line 19365
  HEAP8[$AsyncCtx11 + 68 >> 0] = $3; //@line 19367
  HEAP32[$AsyncCtx11 + 72 >> 2] = $1; //@line 19369
  HEAP32[$AsyncCtx11 + 76 >> 2] = $8; //@line 19371
  HEAP32[$AsyncCtx11 + 80 >> 2] = $8; //@line 19373
  HEAP32[$AsyncCtx11 + 84 >> 2] = $29; //@line 19375
  HEAP32[$AsyncCtx11 + 88 >> 2] = $6; //@line 19377
  HEAP32[$AsyncCtx11 + 92 >> 2] = $13; //@line 19379
  HEAP32[$AsyncCtx11 + 96 >> 2] = $7; //@line 19381
  HEAP32[$AsyncCtx11 + 100 >> 2] = $35; //@line 19383
  HEAP32[$AsyncCtx11 + 104 >> 2] = $44; //@line 19385
  HEAP32[$AsyncCtx11 + 108 >> 2] = $25; //@line 19387
  HEAP32[$AsyncCtx11 + 112 >> 2] = $37; //@line 19389
  HEAP32[$AsyncCtx11 + 116 >> 2] = $46; //@line 19391
  HEAP32[$AsyncCtx11 + 120 >> 2] = $36; //@line 19393
  HEAP32[$AsyncCtx11 + 124 >> 2] = $8; //@line 19395
  HEAP32[$AsyncCtx11 + 128 >> 2] = $45; //@line 19397
  HEAP32[$AsyncCtx11 + 132 >> 2] = $15; //@line 19399
  HEAP32[$AsyncCtx11 + 136 >> 2] = $26; //@line 19401
  HEAP8[$AsyncCtx11 + 140 >> 0] = $440; //@line 19403
  HEAP32[$AsyncCtx11 + 144 >> 2] = $12; //@line 19405
  HEAP32[$AsyncCtx11 + 148 >> 2] = $8; //@line 19407
  HEAP32[$AsyncCtx11 + 152 >> 2] = $42; //@line 19409
  HEAP32[$AsyncCtx11 + 156 >> 2] = $33; //@line 19411
  HEAP32[$AsyncCtx11 + 160 >> 2] = $11; //@line 19413
  HEAP32[$AsyncCtx11 + 164 >> 2] = $21; //@line 19415
  HEAP32[$AsyncCtx11 + 168 >> 2] = $32; //@line 19417
  HEAP32[$AsyncCtx11 + 172 >> 2] = $22; //@line 19419
  HEAP32[$AsyncCtx11 + 176 >> 2] = $41; //@line 19421
  HEAP32[$AsyncCtx11 + 180 >> 2] = $43; //@line 19423
  HEAP32[$AsyncCtx11 + 184 >> 2] = $23; //@line 19425
  HEAP32[$AsyncCtx11 + 188 >> 2] = $10; //@line 19427
  HEAP32[$AsyncCtx11 + 192 >> 2] = $34; //@line 19429
  HEAP32[$AsyncCtx11 + 196 >> 2] = $24; //@line 19431
  HEAP32[$AsyncCtx11 + 200 >> 2] = $8; //@line 19433
  HEAP32[$AsyncCtx11 + 204 >> 2] = $8; //@line 19435
  HEAP32[$AsyncCtx11 + 208 >> 2] = $8; //@line 19437
  HEAP32[$AsyncCtx11 + 212 >> 2] = $7; //@line 19439
  HEAP32[$AsyncCtx11 + 216 >> 2] = $9; //@line 19441
  HEAP32[$AsyncCtx11 + 220 >> 2] = $30; //@line 19443
  HEAP32[$AsyncCtx11 + 224 >> 2] = $18; //@line 19445
  HEAP32[$AsyncCtx11 + 228 >> 2] = $39; //@line 19447
  HEAP32[$AsyncCtx11 + 232 >> 2] = $8; //@line 19449
  HEAP32[$AsyncCtx11 + 236 >> 2] = $0; //@line 19451
  HEAP32[$AsyncCtx11 + 240 >> 2] = $9; //@line 19453
  HEAP32[$AsyncCtx11 + 244 >> 2] = $9; //@line 19455
  HEAP32[$AsyncCtx11 + 248 >> 2] = $8; //@line 19457
  HEAP32[$AsyncCtx11 + 252 >> 2] = $19; //@line 19459
  HEAP32[$AsyncCtx11 + 256 >> 2] = $7; //@line 19461
  HEAP32[$AsyncCtx11 + 260 >> 2] = $40; //@line 19463
  HEAP32[$AsyncCtx11 + 264 >> 2] = $$096115; //@line 19465
  HEAP32[$AsyncCtx11 + 268 >> 2] = $31; //@line 19467
  HEAP32[$AsyncCtx11 + 272 >> 2] = $20; //@line 19469
  sp = STACKTOP; //@line 19470
  STACKTOP = sp; //@line 19471
  return 0; //@line 19471
 } else if ((label | 0) == 42) {
  HEAP32[$AsyncCtx15 >> 2] = 494; //@line 19474
  HEAP32[$AsyncCtx15 + 4 >> 2] = $7; //@line 19476
  HEAP32[$AsyncCtx15 + 8 >> 2] = $47; //@line 19478
  HEAP8[$AsyncCtx15 + 12 >> 0] = $4; //@line 19480
  HEAP32[$AsyncCtx15 + 16 >> 2] = $38; //@line 19482
  HEAP32[$AsyncCtx15 + 20 >> 2] = $27; //@line 19484
  HEAP32[$AsyncCtx15 + 24 >> 2] = $16; //@line 19486
  HEAP32[$AsyncCtx15 + 28 >> 2] = $28; //@line 19488
  HEAP32[$AsyncCtx15 + 32 >> 2] = $8; //@line 19490
  HEAP32[$AsyncCtx15 + 36 >> 2] = $8; //@line 19492
  HEAP32[$AsyncCtx15 + 40 >> 2] = $7; //@line 19494
  HEAP32[$AsyncCtx15 + 44 >> 2] = $9; //@line 19496
  HEAP32[$AsyncCtx15 + 48 >> 2] = $0; //@line 19498
  HEAP32[$AsyncCtx15 + 52 >> 2] = $17; //@line 19500
  HEAP32[$AsyncCtx15 + 56 >> 2] = $8; //@line 19502
  HEAP8[$AsyncCtx15 + 60 >> 0] = $2; //@line 19504
  HEAP32[$AsyncCtx15 + 64 >> 2] = $7; //@line 19506
  HEAP8[$AsyncCtx15 + 68 >> 0] = $3; //@line 19508
  HEAP32[$AsyncCtx15 + 72 >> 2] = $1; //@line 19510
  HEAP32[$AsyncCtx15 + 76 >> 2] = $8; //@line 19512
  HEAP32[$AsyncCtx15 + 80 >> 2] = $8; //@line 19514
  HEAP32[$AsyncCtx15 + 84 >> 2] = $29; //@line 19516
  HEAP32[$AsyncCtx15 + 88 >> 2] = $6; //@line 19518
  HEAP32[$AsyncCtx15 + 92 >> 2] = $13; //@line 19520
  HEAP32[$AsyncCtx15 + 96 >> 2] = $7; //@line 19522
  HEAP32[$AsyncCtx15 + 100 >> 2] = $35; //@line 19524
  HEAP32[$AsyncCtx15 + 104 >> 2] = $44; //@line 19526
  HEAP32[$AsyncCtx15 + 108 >> 2] = $25; //@line 19528
  HEAP32[$AsyncCtx15 + 112 >> 2] = $37; //@line 19530
  HEAP32[$AsyncCtx15 + 116 >> 2] = $46; //@line 19532
  HEAP32[$AsyncCtx15 + 120 >> 2] = $36; //@line 19534
  HEAP32[$AsyncCtx15 + 124 >> 2] = $8; //@line 19536
  HEAP32[$AsyncCtx15 + 128 >> 2] = $45; //@line 19538
  HEAP32[$AsyncCtx15 + 132 >> 2] = $15; //@line 19540
  HEAP32[$AsyncCtx15 + 136 >> 2] = $26; //@line 19542
  HEAP32[$AsyncCtx15 + 140 >> 2] = $12; //@line 19544
  HEAP32[$AsyncCtx15 + 144 >> 2] = $8; //@line 19546
  HEAP32[$AsyncCtx15 + 148 >> 2] = $42; //@line 19548
  HEAP32[$AsyncCtx15 + 152 >> 2] = $33; //@line 19550
  HEAP32[$AsyncCtx15 + 156 >> 2] = $11; //@line 19552
  HEAP32[$AsyncCtx15 + 160 >> 2] = $21; //@line 19554
  HEAP32[$AsyncCtx15 + 164 >> 2] = $32; //@line 19556
  HEAP32[$AsyncCtx15 + 168 >> 2] = $22; //@line 19558
  HEAP32[$AsyncCtx15 + 172 >> 2] = $41; //@line 19560
  HEAP32[$AsyncCtx15 + 176 >> 2] = $43; //@line 19562
  HEAP32[$AsyncCtx15 + 180 >> 2] = $23; //@line 19564
  HEAP32[$AsyncCtx15 + 184 >> 2] = $10; //@line 19566
  HEAP32[$AsyncCtx15 + 188 >> 2] = $34; //@line 19568
  HEAP32[$AsyncCtx15 + 192 >> 2] = $24; //@line 19570
  HEAP32[$AsyncCtx15 + 196 >> 2] = $8; //@line 19572
  HEAP32[$AsyncCtx15 + 200 >> 2] = $8; //@line 19574
  HEAP8[$AsyncCtx15 + 204 >> 0] = $553; //@line 19576
  HEAP32[$AsyncCtx15 + 208 >> 2] = $8; //@line 19578
  HEAP32[$AsyncCtx15 + 212 >> 2] = $7; //@line 19580
  HEAP32[$AsyncCtx15 + 216 >> 2] = $9; //@line 19582
  HEAP32[$AsyncCtx15 + 220 >> 2] = $30; //@line 19584
  HEAP32[$AsyncCtx15 + 224 >> 2] = $18; //@line 19586
  HEAP32[$AsyncCtx15 + 228 >> 2] = $39; //@line 19588
  HEAP32[$AsyncCtx15 + 232 >> 2] = $8; //@line 19590
  HEAP32[$AsyncCtx15 + 236 >> 2] = $0; //@line 19592
  HEAP32[$AsyncCtx15 + 240 >> 2] = $9; //@line 19594
  HEAP32[$AsyncCtx15 + 244 >> 2] = $9; //@line 19596
  HEAP32[$AsyncCtx15 + 248 >> 2] = $8; //@line 19598
  HEAP32[$AsyncCtx15 + 252 >> 2] = $19; //@line 19600
  HEAP32[$AsyncCtx15 + 256 >> 2] = $7; //@line 19602
  HEAP32[$AsyncCtx15 + 260 >> 2] = $40; //@line 19604
  HEAP32[$AsyncCtx15 + 264 >> 2] = $31; //@line 19606
  HEAP32[$AsyncCtx15 + 268 >> 2] = $20; //@line 19608
  sp = STACKTOP; //@line 19609
  STACKTOP = sp; //@line 19610
  return 0; //@line 19610
 } else if ((label | 0) == 47) {
  STACKTOP = sp; //@line 19613
  return $$096$lcssa | 0; //@line 19613
 }
 return 0; //@line 19615
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_327($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $117 = 0, $119 = 0, $12 = 0, $120 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $153 = 0, $154 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $194 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $208 = 0, $209 = 0, $211 = 0, $212 = 0, $213 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $225 = 0, $229 = 0, $230 = 0, $232 = 0, $233 = 0, $234 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $42 = 0, $56 = 0, $6 = 0, $60 = 0, $65 = 0, $71 = 0, $72 = 0, $77 = 0, $8 = 0, $81 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 24349
 STACKTOP = STACKTOP + 16 | 0; //@line 24350
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 24350
 $$byval_copy = sp; //@line 24351
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24353
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24355
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24357
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24359
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24361
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24363
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24365
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24367
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 24369
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 24371
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 24373
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 24375
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx18 = _emscripten_realloc_async_context(52) | 0; //@line 24380
  _mbed_assert_internal(13588, 13597, 192); //@line 24381
  if (___async) {
   HEAP32[$ReallocAsyncCtx18 >> 2] = 379; //@line 24384
   $27 = $ReallocAsyncCtx18 + 4 | 0; //@line 24385
   HEAP32[$27 >> 2] = $2; //@line 24386
   $28 = $ReallocAsyncCtx18 + 8 | 0; //@line 24387
   HEAP32[$28 >> 2] = $4; //@line 24388
   $29 = $ReallocAsyncCtx18 + 12 | 0; //@line 24389
   HEAP32[$29 >> 2] = $6; //@line 24390
   $30 = $ReallocAsyncCtx18 + 16 | 0; //@line 24391
   HEAP32[$30 >> 2] = $8; //@line 24392
   $31 = $ReallocAsyncCtx18 + 20 | 0; //@line 24393
   HEAP32[$31 >> 2] = $10; //@line 24394
   $32 = $ReallocAsyncCtx18 + 24 | 0; //@line 24395
   HEAP32[$32 >> 2] = $12; //@line 24396
   $33 = $ReallocAsyncCtx18 + 28 | 0; //@line 24397
   HEAP32[$33 >> 2] = $14; //@line 24398
   $34 = $ReallocAsyncCtx18 + 32 | 0; //@line 24399
   HEAP32[$34 >> 2] = $16; //@line 24400
   $35 = $ReallocAsyncCtx18 + 36 | 0; //@line 24401
   HEAP32[$35 >> 2] = $18; //@line 24402
   $36 = $ReallocAsyncCtx18 + 40 | 0; //@line 24403
   HEAP32[$36 >> 2] = $20; //@line 24404
   $37 = $ReallocAsyncCtx18 + 44 | 0; //@line 24405
   HEAP32[$37 >> 2] = $22; //@line 24406
   $38 = $ReallocAsyncCtx18 + 48 | 0; //@line 24407
   HEAP32[$38 >> 2] = $24; //@line 24408
   sp = STACKTOP; //@line 24409
   STACKTOP = sp; //@line 24410
   return;
  }
  ___async_unwind = 0; //@line 24412
  HEAP32[$ReallocAsyncCtx18 >> 2] = 379; //@line 24413
  $27 = $ReallocAsyncCtx18 + 4 | 0; //@line 24414
  HEAP32[$27 >> 2] = $2; //@line 24415
  $28 = $ReallocAsyncCtx18 + 8 | 0; //@line 24416
  HEAP32[$28 >> 2] = $4; //@line 24417
  $29 = $ReallocAsyncCtx18 + 12 | 0; //@line 24418
  HEAP32[$29 >> 2] = $6; //@line 24419
  $30 = $ReallocAsyncCtx18 + 16 | 0; //@line 24420
  HEAP32[$30 >> 2] = $8; //@line 24421
  $31 = $ReallocAsyncCtx18 + 20 | 0; //@line 24422
  HEAP32[$31 >> 2] = $10; //@line 24423
  $32 = $ReallocAsyncCtx18 + 24 | 0; //@line 24424
  HEAP32[$32 >> 2] = $12; //@line 24425
  $33 = $ReallocAsyncCtx18 + 28 | 0; //@line 24426
  HEAP32[$33 >> 2] = $14; //@line 24427
  $34 = $ReallocAsyncCtx18 + 32 | 0; //@line 24428
  HEAP32[$34 >> 2] = $16; //@line 24429
  $35 = $ReallocAsyncCtx18 + 36 | 0; //@line 24430
  HEAP32[$35 >> 2] = $18; //@line 24431
  $36 = $ReallocAsyncCtx18 + 40 | 0; //@line 24432
  HEAP32[$36 >> 2] = $20; //@line 24433
  $37 = $ReallocAsyncCtx18 + 44 | 0; //@line 24434
  HEAP32[$37 >> 2] = $22; //@line 24435
  $38 = $ReallocAsyncCtx18 + 48 | 0; //@line 24436
  HEAP32[$38 >> 2] = $24; //@line 24437
  sp = STACKTOP; //@line 24438
  STACKTOP = sp; //@line 24439
  return;
 }
 do {
  if (HEAP8[$2 >> 0] & 2) {
   $42 = $4 + 288 | 0; //@line 24446
   if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($42) | 0) + 10 >> 0] | 0)) {
    if ((HEAPU8[$4 + 895 >> 0] | 0) <= (HEAPU8[$4 + 894 >> 0] | 0)) {
     break;
    }
   }
   HEAP8[$4 + 377 >> 0] = 0; //@line 24462
   HEAP8[$24 >> 0] = 0; //@line 24463
   if (!(HEAP8[$4 + 370 >> 0] | 0)) {
    $56 = $4 + 956 | 0; //@line 24468
    HEAP32[$56 >> 2] = (HEAP32[$56 >> 2] | 0) + 1; //@line 24471
   }
   $60 = HEAP8[$4 + 895 >> 0] | 0; //@line 24474
   HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($42) | 0) + 11 >> 0] = $60; //@line 24477
   HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -2; //@line 24480
  }
 } while (0);
 $65 = $4 + 377 | 0; //@line 24483
 if (HEAP8[$65 >> 0] | 0) {
  if (!(HEAP32[$6 >> 2] & 16)) {
   HEAP8[$65 >> 0] = 0; //@line 24491
   $71 = $4 + 895 | 0; //@line 24492
   $72 = HEAP8[$71 >> 0] | 0; //@line 24493
   if (!(($72 & 255) < 9 ? ($72 & 255) < (HEAPU8[$4 + 894 >> 0] | 0) : 0)) {
    $98 = HEAP32[$4 >> 2] | 0; //@line 24500
    $101 = HEAP32[(HEAP32[$98 >> 2] | 0) + 16 >> 2] | 0; //@line 24503
    $ReallocAsyncCtx = _emscripten_realloc_async_context(52) | 0; //@line 24504
    FUNCTION_TABLE_vi[$101 & 1023]($98); //@line 24505
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 383; //@line 24508
     $102 = $ReallocAsyncCtx + 4 | 0; //@line 24509
     HEAP32[$102 >> 2] = $2; //@line 24510
     $103 = $ReallocAsyncCtx + 8 | 0; //@line 24511
     HEAP32[$103 >> 2] = $8; //@line 24512
     $104 = $ReallocAsyncCtx + 12 | 0; //@line 24513
     HEAP32[$104 >> 2] = $10; //@line 24514
     $105 = $ReallocAsyncCtx + 16 | 0; //@line 24515
     HEAP32[$105 >> 2] = $4; //@line 24516
     $106 = $ReallocAsyncCtx + 20 | 0; //@line 24517
     HEAP32[$106 >> 2] = $6; //@line 24518
     $107 = $ReallocAsyncCtx + 24 | 0; //@line 24519
     HEAP32[$107 >> 2] = $24; //@line 24520
     $108 = $ReallocAsyncCtx + 28 | 0; //@line 24521
     HEAP32[$108 >> 2] = $71; //@line 24522
     $109 = $ReallocAsyncCtx + 32 | 0; //@line 24523
     HEAP32[$109 >> 2] = $18; //@line 24524
     $110 = $ReallocAsyncCtx + 36 | 0; //@line 24525
     HEAP32[$110 >> 2] = $20; //@line 24526
     $111 = $ReallocAsyncCtx + 40 | 0; //@line 24527
     HEAP32[$111 >> 2] = $12; //@line 24528
     $112 = $ReallocAsyncCtx + 44 | 0; //@line 24529
     HEAP32[$112 >> 2] = $14; //@line 24530
     $113 = $ReallocAsyncCtx + 48 | 0; //@line 24531
     HEAP32[$113 >> 2] = $16; //@line 24532
     sp = STACKTOP; //@line 24533
     STACKTOP = sp; //@line 24534
     return;
    }
    ___async_unwind = 0; //@line 24536
    HEAP32[$ReallocAsyncCtx >> 2] = 383; //@line 24537
    $102 = $ReallocAsyncCtx + 4 | 0; //@line 24538
    HEAP32[$102 >> 2] = $2; //@line 24539
    $103 = $ReallocAsyncCtx + 8 | 0; //@line 24540
    HEAP32[$103 >> 2] = $8; //@line 24541
    $104 = $ReallocAsyncCtx + 12 | 0; //@line 24542
    HEAP32[$104 >> 2] = $10; //@line 24543
    $105 = $ReallocAsyncCtx + 16 | 0; //@line 24544
    HEAP32[$105 >> 2] = $4; //@line 24545
    $106 = $ReallocAsyncCtx + 20 | 0; //@line 24546
    HEAP32[$106 >> 2] = $6; //@line 24547
    $107 = $ReallocAsyncCtx + 24 | 0; //@line 24548
    HEAP32[$107 >> 2] = $24; //@line 24549
    $108 = $ReallocAsyncCtx + 28 | 0; //@line 24550
    HEAP32[$108 >> 2] = $71; //@line 24551
    $109 = $ReallocAsyncCtx + 32 | 0; //@line 24552
    HEAP32[$109 >> 2] = $18; //@line 24553
    $110 = $ReallocAsyncCtx + 36 | 0; //@line 24554
    HEAP32[$110 >> 2] = $20; //@line 24555
    $111 = $ReallocAsyncCtx + 40 | 0; //@line 24556
    HEAP32[$111 >> 2] = $12; //@line 24557
    $112 = $ReallocAsyncCtx + 44 | 0; //@line 24558
    HEAP32[$112 >> 2] = $14; //@line 24559
    $113 = $ReallocAsyncCtx + 48 | 0; //@line 24560
    HEAP32[$113 >> 2] = $16; //@line 24561
    sp = STACKTOP; //@line 24562
    STACKTOP = sp; //@line 24563
    return;
   }
   $77 = $72 + 1 << 24 >> 24; //@line 24565
   HEAP8[$71 >> 0] = $77; //@line 24566
   if ($77 & 1) {
    $81 = $4 + 1097 | 0; //@line 24571
    HEAP8[$81 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$4 >> 2] | 0, HEAP8[$81 >> 0] | 0) | 0; //@line 24574
   }
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(52) | 0; //@line 24576
   $84 = __ZN7LoRaMac11schedule_txEv($4) | 0; //@line 24577
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 382; //@line 24580
    $85 = $ReallocAsyncCtx7 + 4 | 0; //@line 24581
    HEAP32[$85 >> 2] = $2; //@line 24582
    $86 = $ReallocAsyncCtx7 + 8 | 0; //@line 24583
    HEAP32[$86 >> 2] = $8; //@line 24584
    $87 = $ReallocAsyncCtx7 + 12 | 0; //@line 24585
    HEAP32[$87 >> 2] = $10; //@line 24586
    $88 = $ReallocAsyncCtx7 + 16 | 0; //@line 24587
    HEAP32[$88 >> 2] = $4; //@line 24588
    $89 = $ReallocAsyncCtx7 + 20 | 0; //@line 24589
    HEAP32[$89 >> 2] = $6; //@line 24590
    $90 = $ReallocAsyncCtx7 + 24 | 0; //@line 24591
    HEAP32[$90 >> 2] = $24; //@line 24592
    $91 = $ReallocAsyncCtx7 + 28 | 0; //@line 24593
    HEAP32[$91 >> 2] = $71; //@line 24594
    $92 = $ReallocAsyncCtx7 + 32 | 0; //@line 24595
    HEAP32[$92 >> 2] = $12; //@line 24596
    $93 = $ReallocAsyncCtx7 + 36 | 0; //@line 24597
    HEAP32[$93 >> 2] = $14; //@line 24598
    $94 = $ReallocAsyncCtx7 + 40 | 0; //@line 24599
    HEAP32[$94 >> 2] = $16; //@line 24600
    $95 = $ReallocAsyncCtx7 + 44 | 0; //@line 24601
    HEAP32[$95 >> 2] = $18; //@line 24602
    $96 = $ReallocAsyncCtx7 + 48 | 0; //@line 24603
    HEAP32[$96 >> 2] = $20; //@line 24604
    sp = STACKTOP; //@line 24605
    STACKTOP = sp; //@line 24606
    return;
   }
   HEAP32[___async_retval >> 2] = $84; //@line 24609
   ___async_unwind = 0; //@line 24610
   HEAP32[$ReallocAsyncCtx7 >> 2] = 382; //@line 24611
   $85 = $ReallocAsyncCtx7 + 4 | 0; //@line 24612
   HEAP32[$85 >> 2] = $2; //@line 24613
   $86 = $ReallocAsyncCtx7 + 8 | 0; //@line 24614
   HEAP32[$86 >> 2] = $8; //@line 24615
   $87 = $ReallocAsyncCtx7 + 12 | 0; //@line 24616
   HEAP32[$87 >> 2] = $10; //@line 24617
   $88 = $ReallocAsyncCtx7 + 16 | 0; //@line 24618
   HEAP32[$88 >> 2] = $4; //@line 24619
   $89 = $ReallocAsyncCtx7 + 20 | 0; //@line 24620
   HEAP32[$89 >> 2] = $6; //@line 24621
   $90 = $ReallocAsyncCtx7 + 24 | 0; //@line 24622
   HEAP32[$90 >> 2] = $24; //@line 24623
   $91 = $ReallocAsyncCtx7 + 28 | 0; //@line 24624
   HEAP32[$91 >> 2] = $71; //@line 24625
   $92 = $ReallocAsyncCtx7 + 32 | 0; //@line 24626
   HEAP32[$92 >> 2] = $12; //@line 24627
   $93 = $ReallocAsyncCtx7 + 36 | 0; //@line 24628
   HEAP32[$93 >> 2] = $14; //@line 24629
   $94 = $ReallocAsyncCtx7 + 40 | 0; //@line 24630
   HEAP32[$94 >> 2] = $16; //@line 24631
   $95 = $ReallocAsyncCtx7 + 44 | 0; //@line 24632
   HEAP32[$95 >> 2] = $18; //@line 24633
   $96 = $ReallocAsyncCtx7 + 48 | 0; //@line 24634
   HEAP32[$96 >> 2] = $20; //@line 24635
   sp = STACKTOP; //@line 24636
   STACKTOP = sp; //@line 24637
   return;
  }
 }
 $114 = HEAP32[$6 >> 2] | 0; //@line 24640
 $117 = $114 & -3; //@line 24643
 if (!($114 & 2)) {
  $119 = $114; //@line 24645
 } else {
  HEAP32[$6 >> 2] = $117; //@line 24647
  $119 = $117; //@line 24648
 }
 if ($119 | 0) {
  $186 = HEAP32[$18 >> 2] | 0; //@line 24652
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 24653
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($186, $20, 1e3); //@line 24654
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 388; //@line 24657
   $187 = $ReallocAsyncCtx6 + 4 | 0; //@line 24658
   HEAP32[$187 >> 2] = $2; //@line 24659
   $188 = $ReallocAsyncCtx6 + 8 | 0; //@line 24660
   HEAP32[$188 >> 2] = $4; //@line 24661
   $189 = $ReallocAsyncCtx6 + 12 | 0; //@line 24662
   HEAP32[$189 >> 2] = $12; //@line 24663
   $190 = $ReallocAsyncCtx6 + 16 | 0; //@line 24664
   HEAP32[$190 >> 2] = $14; //@line 24665
   $191 = $ReallocAsyncCtx6 + 20 | 0; //@line 24666
   HEAP32[$191 >> 2] = $16; //@line 24667
   sp = STACKTOP; //@line 24668
   STACKTOP = sp; //@line 24669
   return;
  }
  ___async_unwind = 0; //@line 24671
  HEAP32[$ReallocAsyncCtx6 >> 2] = 388; //@line 24672
  $187 = $ReallocAsyncCtx6 + 4 | 0; //@line 24673
  HEAP32[$187 >> 2] = $2; //@line 24674
  $188 = $ReallocAsyncCtx6 + 8 | 0; //@line 24675
  HEAP32[$188 >> 2] = $4; //@line 24676
  $189 = $ReallocAsyncCtx6 + 12 | 0; //@line 24677
  HEAP32[$189 >> 2] = $12; //@line 24678
  $190 = $ReallocAsyncCtx6 + 16 | 0; //@line 24679
  HEAP32[$190 >> 2] = $14; //@line 24680
  $191 = $ReallocAsyncCtx6 + 20 | 0; //@line 24681
  HEAP32[$191 >> 2] = $16; //@line 24682
  sp = STACKTOP; //@line 24683
  STACKTOP = sp; //@line 24684
  return;
 }
 $120 = HEAP8[$2 >> 0] | 0; //@line 24686
 if ($120 & 1) {
  HEAP8[$2 >> 0] = $120 & -2; //@line 24691
  $125 = HEAP32[$4 + 1324 >> 2] | 0; //@line 24693
  $127 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 24695
  $128 = $125 + 12 | 0; //@line 24696
  $129 = HEAP32[$128 >> 2] | 0; //@line 24697
  if (!$129) {
   $ReallocAsyncCtx16 = _emscripten_realloc_async_context(44) | 0; //@line 24700
   _mbed_assert_internal(15615, 15620, 1102); //@line 24701
   if (___async) {
    HEAP32[$ReallocAsyncCtx16 >> 2] = 384; //@line 24704
    $131 = $ReallocAsyncCtx16 + 4 | 0; //@line 24705
    HEAP32[$131 >> 2] = $2; //@line 24706
    $132 = $ReallocAsyncCtx16 + 8 | 0; //@line 24707
    HEAP32[$132 >> 2] = $4; //@line 24708
    $133 = $ReallocAsyncCtx16 + 12 | 0; //@line 24709
    HEAP32[$133 >> 2] = $128; //@line 24710
    $134 = $ReallocAsyncCtx16 + 16 | 0; //@line 24711
    HEAP32[$134 >> 2] = $125; //@line 24712
    $135 = $ReallocAsyncCtx16 + 20 | 0; //@line 24713
    HEAP32[$135 >> 2] = $127; //@line 24714
    $136 = $ReallocAsyncCtx16 + 24 | 0; //@line 24715
    HEAP32[$136 >> 2] = $12; //@line 24716
    $137 = $ReallocAsyncCtx16 + 28 | 0; //@line 24717
    HEAP32[$137 >> 2] = $14; //@line 24718
    $138 = $ReallocAsyncCtx16 + 32 | 0; //@line 24719
    HEAP32[$138 >> 2] = $16; //@line 24720
    $139 = $ReallocAsyncCtx16 + 36 | 0; //@line 24721
    HEAP32[$139 >> 2] = $8; //@line 24722
    $140 = $ReallocAsyncCtx16 + 40 | 0; //@line 24723
    HEAP32[$140 >> 2] = $10; //@line 24724
    sp = STACKTOP; //@line 24725
    STACKTOP = sp; //@line 24726
    return;
   }
   ___async_unwind = 0; //@line 24728
   HEAP32[$ReallocAsyncCtx16 >> 2] = 384; //@line 24729
   $131 = $ReallocAsyncCtx16 + 4 | 0; //@line 24730
   HEAP32[$131 >> 2] = $2; //@line 24731
   $132 = $ReallocAsyncCtx16 + 8 | 0; //@line 24732
   HEAP32[$132 >> 2] = $4; //@line 24733
   $133 = $ReallocAsyncCtx16 + 12 | 0; //@line 24734
   HEAP32[$133 >> 2] = $128; //@line 24735
   $134 = $ReallocAsyncCtx16 + 16 | 0; //@line 24736
   HEAP32[$134 >> 2] = $125; //@line 24737
   $135 = $ReallocAsyncCtx16 + 20 | 0; //@line 24738
   HEAP32[$135 >> 2] = $127; //@line 24739
   $136 = $ReallocAsyncCtx16 + 24 | 0; //@line 24740
   HEAP32[$136 >> 2] = $12; //@line 24741
   $137 = $ReallocAsyncCtx16 + 28 | 0; //@line 24742
   HEAP32[$137 >> 2] = $14; //@line 24743
   $138 = $ReallocAsyncCtx16 + 32 | 0; //@line 24744
   HEAP32[$138 >> 2] = $16; //@line 24745
   $139 = $ReallocAsyncCtx16 + 36 | 0; //@line 24746
   HEAP32[$139 >> 2] = $8; //@line 24747
   $140 = $ReallocAsyncCtx16 + 40 | 0; //@line 24748
   HEAP32[$140 >> 2] = $10; //@line 24749
   sp = STACKTOP; //@line 24750
   STACKTOP = sp; //@line 24751
   return;
  } else {
   $141 = HEAP32[$129 >> 2] | 0; //@line 24753
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 24754
   FUNCTION_TABLE_vii[$141 & 31]($125, $127); //@line 24755
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 385; //@line 24758
    $142 = $ReallocAsyncCtx2 + 4 | 0; //@line 24759
    HEAP32[$142 >> 2] = $2; //@line 24760
    $143 = $ReallocAsyncCtx2 + 8 | 0; //@line 24761
    HEAP32[$143 >> 2] = $4; //@line 24762
    $144 = $ReallocAsyncCtx2 + 12 | 0; //@line 24763
    HEAP32[$144 >> 2] = $12; //@line 24764
    $145 = $ReallocAsyncCtx2 + 16 | 0; //@line 24765
    HEAP32[$145 >> 2] = $14; //@line 24766
    $146 = $ReallocAsyncCtx2 + 20 | 0; //@line 24767
    HEAP32[$146 >> 2] = $16; //@line 24768
    $147 = $ReallocAsyncCtx2 + 24 | 0; //@line 24769
    HEAP32[$147 >> 2] = $8; //@line 24770
    $148 = $ReallocAsyncCtx2 + 28 | 0; //@line 24771
    HEAP32[$148 >> 2] = $10; //@line 24772
    sp = STACKTOP; //@line 24773
    STACKTOP = sp; //@line 24774
    return;
   }
   ___async_unwind = 0; //@line 24776
   HEAP32[$ReallocAsyncCtx2 >> 2] = 385; //@line 24777
   $142 = $ReallocAsyncCtx2 + 4 | 0; //@line 24778
   HEAP32[$142 >> 2] = $2; //@line 24779
   $143 = $ReallocAsyncCtx2 + 8 | 0; //@line 24780
   HEAP32[$143 >> 2] = $4; //@line 24781
   $144 = $ReallocAsyncCtx2 + 12 | 0; //@line 24782
   HEAP32[$144 >> 2] = $12; //@line 24783
   $145 = $ReallocAsyncCtx2 + 16 | 0; //@line 24784
   HEAP32[$145 >> 2] = $14; //@line 24785
   $146 = $ReallocAsyncCtx2 + 20 | 0; //@line 24786
   HEAP32[$146 >> 2] = $16; //@line 24787
   $147 = $ReallocAsyncCtx2 + 24 | 0; //@line 24788
   HEAP32[$147 >> 2] = $8; //@line 24789
   $148 = $ReallocAsyncCtx2 + 28 | 0; //@line 24790
   HEAP32[$148 >> 2] = $10; //@line 24791
   sp = STACKTOP; //@line 24792
   STACKTOP = sp; //@line 24793
   return;
  }
 }
 if ($120 & 8) {
  HEAP8[$2 >> 0] = $120 & -9; //@line 24800
  $153 = HEAP32[$4 + 1324 >> 2] | 0; //@line 24802
  $154 = $153 + 32 | 0; //@line 24803
  $156 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 24805
  $157 = $153 + 44 | 0; //@line 24806
  $158 = HEAP32[$157 >> 2] | 0; //@line 24807
  if (!$158) {
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(44) | 0; //@line 24810
   _mbed_assert_internal(15615, 15620, 1102); //@line 24811
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 386; //@line 24814
    $160 = $ReallocAsyncCtx15 + 4 | 0; //@line 24815
    HEAP32[$160 >> 2] = $2; //@line 24816
    $161 = $ReallocAsyncCtx15 + 8 | 0; //@line 24817
    HEAP32[$161 >> 2] = $4; //@line 24818
    $162 = $ReallocAsyncCtx15 + 12 | 0; //@line 24819
    HEAP32[$162 >> 2] = $154; //@line 24820
    $163 = $ReallocAsyncCtx15 + 16 | 0; //@line 24821
    HEAP32[$163 >> 2] = $156; //@line 24822
    $164 = $ReallocAsyncCtx15 + 20 | 0; //@line 24823
    HEAP32[$164 >> 2] = $12; //@line 24824
    $165 = $ReallocAsyncCtx15 + 24 | 0; //@line 24825
    HEAP32[$165 >> 2] = $14; //@line 24826
    $166 = $ReallocAsyncCtx15 + 28 | 0; //@line 24827
    HEAP32[$166 >> 2] = $16; //@line 24828
    $167 = $ReallocAsyncCtx15 + 32 | 0; //@line 24829
    HEAP32[$167 >> 2] = $8; //@line 24830
    $168 = $ReallocAsyncCtx15 + 36 | 0; //@line 24831
    HEAP32[$168 >> 2] = $10; //@line 24832
    $169 = $ReallocAsyncCtx15 + 40 | 0; //@line 24833
    HEAP32[$169 >> 2] = $157; //@line 24834
    sp = STACKTOP; //@line 24835
    STACKTOP = sp; //@line 24836
    return;
   }
   ___async_unwind = 0; //@line 24838
   HEAP32[$ReallocAsyncCtx15 >> 2] = 386; //@line 24839
   $160 = $ReallocAsyncCtx15 + 4 | 0; //@line 24840
   HEAP32[$160 >> 2] = $2; //@line 24841
   $161 = $ReallocAsyncCtx15 + 8 | 0; //@line 24842
   HEAP32[$161 >> 2] = $4; //@line 24843
   $162 = $ReallocAsyncCtx15 + 12 | 0; //@line 24844
   HEAP32[$162 >> 2] = $154; //@line 24845
   $163 = $ReallocAsyncCtx15 + 16 | 0; //@line 24846
   HEAP32[$163 >> 2] = $156; //@line 24847
   $164 = $ReallocAsyncCtx15 + 20 | 0; //@line 24848
   HEAP32[$164 >> 2] = $12; //@line 24849
   $165 = $ReallocAsyncCtx15 + 24 | 0; //@line 24850
   HEAP32[$165 >> 2] = $14; //@line 24851
   $166 = $ReallocAsyncCtx15 + 28 | 0; //@line 24852
   HEAP32[$166 >> 2] = $16; //@line 24853
   $167 = $ReallocAsyncCtx15 + 32 | 0; //@line 24854
   HEAP32[$167 >> 2] = $8; //@line 24855
   $168 = $ReallocAsyncCtx15 + 36 | 0; //@line 24856
   HEAP32[$168 >> 2] = $10; //@line 24857
   $169 = $ReallocAsyncCtx15 + 40 | 0; //@line 24858
   HEAP32[$169 >> 2] = $157; //@line 24859
   sp = STACKTOP; //@line 24860
   STACKTOP = sp; //@line 24861
   return;
  } else {
   $170 = HEAP32[$158 >> 2] | 0; //@line 24863
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 24864
   FUNCTION_TABLE_vii[$170 & 31]($154, $156); //@line 24865
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 387; //@line 24868
    $171 = $ReallocAsyncCtx3 + 4 | 0; //@line 24869
    HEAP32[$171 >> 2] = $2; //@line 24870
    $172 = $ReallocAsyncCtx3 + 8 | 0; //@line 24871
    HEAP32[$172 >> 2] = $4; //@line 24872
    $173 = $ReallocAsyncCtx3 + 12 | 0; //@line 24873
    HEAP32[$173 >> 2] = $12; //@line 24874
    $174 = $ReallocAsyncCtx3 + 16 | 0; //@line 24875
    HEAP32[$174 >> 2] = $14; //@line 24876
    $175 = $ReallocAsyncCtx3 + 20 | 0; //@line 24877
    HEAP32[$175 >> 2] = $16; //@line 24878
    $176 = $ReallocAsyncCtx3 + 24 | 0; //@line 24879
    HEAP32[$176 >> 2] = $8; //@line 24880
    $177 = $ReallocAsyncCtx3 + 28 | 0; //@line 24881
    HEAP32[$177 >> 2] = $10; //@line 24882
    sp = STACKTOP; //@line 24883
    STACKTOP = sp; //@line 24884
    return;
   }
   ___async_unwind = 0; //@line 24886
   HEAP32[$ReallocAsyncCtx3 >> 2] = 387; //@line 24887
   $171 = $ReallocAsyncCtx3 + 4 | 0; //@line 24888
   HEAP32[$171 >> 2] = $2; //@line 24889
   $172 = $ReallocAsyncCtx3 + 8 | 0; //@line 24890
   HEAP32[$172 >> 2] = $4; //@line 24891
   $173 = $ReallocAsyncCtx3 + 12 | 0; //@line 24892
   HEAP32[$173 >> 2] = $12; //@line 24893
   $174 = $ReallocAsyncCtx3 + 16 | 0; //@line 24894
   HEAP32[$174 >> 2] = $14; //@line 24895
   $175 = $ReallocAsyncCtx3 + 20 | 0; //@line 24896
   HEAP32[$175 >> 2] = $16; //@line 24897
   $176 = $ReallocAsyncCtx3 + 24 | 0; //@line 24898
   HEAP32[$176 >> 2] = $8; //@line 24899
   $177 = $ReallocAsyncCtx3 + 28 | 0; //@line 24900
   HEAP32[$177 >> 2] = $10; //@line 24901
   sp = STACKTOP; //@line 24902
   STACKTOP = sp; //@line 24903
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _mbed_tracef(16, 13704, 13865, $8); //@line 24909
  HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0) >> 2] = 4; //@line 24912
  $183 = HEAP8[$2 >> 0] | 16; //@line 24914
  HEAP8[$2 >> 0] = $183; //@line 24915
  $185 = $183; //@line 24916
 } else {
  $185 = HEAP8[$2 >> 0] | 0; //@line 24919
 }
 $184 = $185 & -33; //@line 24921
 HEAP8[$2 >> 0] = $184; //@line 24922
 do {
  if (!($184 & 2)) {
   $225 = $184; //@line 24927
  } else {
   $194 = $184 & -3; //@line 24929
   HEAP8[$2 >> 0] = $194; //@line 24930
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _mbed_tracef(16, 13704, 13723, $14); //@line 24935
    $199 = HEAP32[$4 + 1328 >> 2] | 0; //@line 24937
    HEAP32[$12 >> 2] = 279; //@line 24938
    HEAP32[$12 + 4 >> 2] = 0; //@line 24940
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 24941
    HEAP32[$$byval_copy >> 2] = HEAP32[$12 >> 2]; //@line 24942
    HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$12 + 4 >> 2]; //@line 24942
    $200 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($199, $4, $$byval_copy) | 0; //@line 24943
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 389; //@line 24946
     $201 = $ReallocAsyncCtx8 + 4 | 0; //@line 24947
     HEAP32[$201 >> 2] = $2; //@line 24948
     $202 = $ReallocAsyncCtx8 + 8 | 0; //@line 24949
     HEAP32[$202 >> 2] = $4; //@line 24950
     $203 = $ReallocAsyncCtx8 + 12 | 0; //@line 24951
     HEAP32[$203 >> 2] = $12; //@line 24952
     sp = STACKTOP; //@line 24953
     STACKTOP = sp; //@line 24954
     return;
    }
    HEAP32[___async_retval >> 2] = $200; //@line 24957
    ___async_unwind = 0; //@line 24958
    HEAP32[$ReallocAsyncCtx8 >> 2] = 389; //@line 24959
    $201 = $ReallocAsyncCtx8 + 4 | 0; //@line 24960
    HEAP32[$201 >> 2] = $2; //@line 24961
    $202 = $ReallocAsyncCtx8 + 8 | 0; //@line 24962
    HEAP32[$202 >> 2] = $4; //@line 24963
    $203 = $ReallocAsyncCtx8 + 12 | 0; //@line 24964
    HEAP32[$203 >> 2] = $12; //@line 24965
    sp = STACKTOP; //@line 24966
    STACKTOP = sp; //@line 24967
    return;
   }
   if ($194 & 4) {
    $223 = $194 & -5; //@line 24972
    HEAP8[$2 >> 0] = $223; //@line 24973
    $225 = $223; //@line 24974
    break;
   }
   $208 = HEAP32[$4 + 1324 >> 2] | 0; //@line 24978
   $209 = $208 + 16 | 0; //@line 24979
   $211 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 24981
   $212 = $208 + 28 | 0; //@line 24982
   $213 = HEAP32[$212 >> 2] | 0; //@line 24983
   if (!$213) {
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 24986
    _mbed_assert_internal(15615, 15620, 1102); //@line 24987
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 391; //@line 24990
     $215 = $ReallocAsyncCtx13 + 4 | 0; //@line 24991
     HEAP32[$215 >> 2] = $212; //@line 24992
     $216 = $ReallocAsyncCtx13 + 8 | 0; //@line 24993
     HEAP32[$216 >> 2] = $209; //@line 24994
     $217 = $ReallocAsyncCtx13 + 12 | 0; //@line 24995
     HEAP32[$217 >> 2] = $211; //@line 24996
     $218 = $ReallocAsyncCtx13 + 16 | 0; //@line 24997
     HEAP32[$218 >> 2] = $2; //@line 24998
     $219 = $ReallocAsyncCtx13 + 20 | 0; //@line 24999
     HEAP32[$219 >> 2] = $4; //@line 25000
     sp = STACKTOP; //@line 25001
     STACKTOP = sp; //@line 25002
     return;
    }
    ___async_unwind = 0; //@line 25004
    HEAP32[$ReallocAsyncCtx13 >> 2] = 391; //@line 25005
    $215 = $ReallocAsyncCtx13 + 4 | 0; //@line 25006
    HEAP32[$215 >> 2] = $212; //@line 25007
    $216 = $ReallocAsyncCtx13 + 8 | 0; //@line 25008
    HEAP32[$216 >> 2] = $209; //@line 25009
    $217 = $ReallocAsyncCtx13 + 12 | 0; //@line 25010
    HEAP32[$217 >> 2] = $211; //@line 25011
    $218 = $ReallocAsyncCtx13 + 16 | 0; //@line 25012
    HEAP32[$218 >> 2] = $2; //@line 25013
    $219 = $ReallocAsyncCtx13 + 20 | 0; //@line 25014
    HEAP32[$219 >> 2] = $4; //@line 25015
    sp = STACKTOP; //@line 25016
    STACKTOP = sp; //@line 25017
    return;
   } else {
    $220 = HEAP32[$213 >> 2] | 0; //@line 25019
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 25020
    FUNCTION_TABLE_vii[$220 & 31]($209, $211); //@line 25021
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 392; //@line 25024
     $221 = $ReallocAsyncCtx4 + 4 | 0; //@line 25025
     HEAP32[$221 >> 2] = $2; //@line 25026
     $222 = $ReallocAsyncCtx4 + 8 | 0; //@line 25027
     HEAP32[$222 >> 2] = $4; //@line 25028
     sp = STACKTOP; //@line 25029
     STACKTOP = sp; //@line 25030
     return;
    }
    ___async_unwind = 0; //@line 25032
    HEAP32[$ReallocAsyncCtx4 >> 2] = 392; //@line 25033
    $221 = $ReallocAsyncCtx4 + 4 | 0; //@line 25034
    HEAP32[$221 >> 2] = $2; //@line 25035
    $222 = $ReallocAsyncCtx4 + 8 | 0; //@line 25036
    HEAP32[$222 >> 2] = $4; //@line 25037
    sp = STACKTOP; //@line 25038
    STACKTOP = sp; //@line 25039
    return;
   }
  }
 } while (0);
 if (!($225 & 16)) {
  STACKTOP = sp; //@line 25046
  return;
 }
 HEAP8[$2 >> 0] = $225 & -17; //@line 25049
 $229 = HEAP32[$4 + 1324 >> 2] | 0; //@line 25051
 $230 = $229 + 48 | 0; //@line 25052
 $232 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 25054
 $233 = $229 + 60 | 0; //@line 25055
 $234 = HEAP32[$233 >> 2] | 0; //@line 25056
 if (!$234) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 25059
  _mbed_assert_internal(15615, 15620, 1102); //@line 25060
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 393; //@line 25063
   $236 = $ReallocAsyncCtx12 + 4 | 0; //@line 25064
   HEAP32[$236 >> 2] = $233; //@line 25065
   $237 = $ReallocAsyncCtx12 + 8 | 0; //@line 25066
   HEAP32[$237 >> 2] = $230; //@line 25067
   $238 = $ReallocAsyncCtx12 + 12 | 0; //@line 25068
   HEAP32[$238 >> 2] = $232; //@line 25069
   sp = STACKTOP; //@line 25070
   STACKTOP = sp; //@line 25071
   return;
  }
  ___async_unwind = 0; //@line 25073
  HEAP32[$ReallocAsyncCtx12 >> 2] = 393; //@line 25074
  $236 = $ReallocAsyncCtx12 + 4 | 0; //@line 25075
  HEAP32[$236 >> 2] = $233; //@line 25076
  $237 = $ReallocAsyncCtx12 + 8 | 0; //@line 25077
  HEAP32[$237 >> 2] = $230; //@line 25078
  $238 = $ReallocAsyncCtx12 + 12 | 0; //@line 25079
  HEAP32[$238 >> 2] = $232; //@line 25080
  sp = STACKTOP; //@line 25081
  STACKTOP = sp; //@line 25082
  return;
 } else {
  $239 = HEAP32[$234 >> 2] | 0; //@line 25084
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 25085
  FUNCTION_TABLE_vii[$239 & 31]($230, $232); //@line 25086
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 394; //@line 25089
   sp = STACKTOP; //@line 25090
   STACKTOP = sp; //@line 25091
   return;
  }
  ___async_unwind = 0; //@line 25093
  HEAP32[$ReallocAsyncCtx5 >> 2] = 394; //@line 25094
  sp = STACKTOP; //@line 25095
  STACKTOP = sp; //@line 25096
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_326($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $117 = 0, $119 = 0, $12 = 0, $120 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $153 = 0, $154 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $194 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $208 = 0, $209 = 0, $211 = 0, $212 = 0, $213 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $225 = 0, $229 = 0, $230 = 0, $232 = 0, $233 = 0, $234 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $42 = 0, $56 = 0, $6 = 0, $60 = 0, $65 = 0, $71 = 0, $72 = 0, $77 = 0, $8 = 0, $81 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 23583
 STACKTOP = STACKTOP + 16 | 0; //@line 23584
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 23584
 $$byval_copy = sp; //@line 23585
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23587
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23589
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23591
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23593
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23595
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23597
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23599
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23601
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23603
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23605
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 23607
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 23609
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx17 = _emscripten_realloc_async_context(52) | 0; //@line 23614
  _mbed_assert_internal(13588, 13597, 192); //@line 23615
  if (___async) {
   HEAP32[$ReallocAsyncCtx17 >> 2] = 381; //@line 23618
   $27 = $ReallocAsyncCtx17 + 4 | 0; //@line 23619
   HEAP32[$27 >> 2] = $2; //@line 23620
   $28 = $ReallocAsyncCtx17 + 8 | 0; //@line 23621
   HEAP32[$28 >> 2] = $4; //@line 23622
   $29 = $ReallocAsyncCtx17 + 12 | 0; //@line 23623
   HEAP32[$29 >> 2] = $6; //@line 23624
   $30 = $ReallocAsyncCtx17 + 16 | 0; //@line 23625
   HEAP32[$30 >> 2] = $8; //@line 23626
   $31 = $ReallocAsyncCtx17 + 20 | 0; //@line 23627
   HEAP32[$31 >> 2] = $10; //@line 23628
   $32 = $ReallocAsyncCtx17 + 24 | 0; //@line 23629
   HEAP32[$32 >> 2] = $12; //@line 23630
   $33 = $ReallocAsyncCtx17 + 28 | 0; //@line 23631
   HEAP32[$33 >> 2] = $14; //@line 23632
   $34 = $ReallocAsyncCtx17 + 32 | 0; //@line 23633
   HEAP32[$34 >> 2] = $16; //@line 23634
   $35 = $ReallocAsyncCtx17 + 36 | 0; //@line 23635
   HEAP32[$35 >> 2] = $18; //@line 23636
   $36 = $ReallocAsyncCtx17 + 40 | 0; //@line 23637
   HEAP32[$36 >> 2] = $20; //@line 23638
   $37 = $ReallocAsyncCtx17 + 44 | 0; //@line 23639
   HEAP32[$37 >> 2] = $22; //@line 23640
   $38 = $ReallocAsyncCtx17 + 48 | 0; //@line 23641
   HEAP32[$38 >> 2] = $24; //@line 23642
   sp = STACKTOP; //@line 23643
   STACKTOP = sp; //@line 23644
   return;
  }
  ___async_unwind = 0; //@line 23646
  HEAP32[$ReallocAsyncCtx17 >> 2] = 381; //@line 23647
  $27 = $ReallocAsyncCtx17 + 4 | 0; //@line 23648
  HEAP32[$27 >> 2] = $2; //@line 23649
  $28 = $ReallocAsyncCtx17 + 8 | 0; //@line 23650
  HEAP32[$28 >> 2] = $4; //@line 23651
  $29 = $ReallocAsyncCtx17 + 12 | 0; //@line 23652
  HEAP32[$29 >> 2] = $6; //@line 23653
  $30 = $ReallocAsyncCtx17 + 16 | 0; //@line 23654
  HEAP32[$30 >> 2] = $8; //@line 23655
  $31 = $ReallocAsyncCtx17 + 20 | 0; //@line 23656
  HEAP32[$31 >> 2] = $10; //@line 23657
  $32 = $ReallocAsyncCtx17 + 24 | 0; //@line 23658
  HEAP32[$32 >> 2] = $12; //@line 23659
  $33 = $ReallocAsyncCtx17 + 28 | 0; //@line 23660
  HEAP32[$33 >> 2] = $14; //@line 23661
  $34 = $ReallocAsyncCtx17 + 32 | 0; //@line 23662
  HEAP32[$34 >> 2] = $16; //@line 23663
  $35 = $ReallocAsyncCtx17 + 36 | 0; //@line 23664
  HEAP32[$35 >> 2] = $18; //@line 23665
  $36 = $ReallocAsyncCtx17 + 40 | 0; //@line 23666
  HEAP32[$36 >> 2] = $20; //@line 23667
  $37 = $ReallocAsyncCtx17 + 44 | 0; //@line 23668
  HEAP32[$37 >> 2] = $22; //@line 23669
  $38 = $ReallocAsyncCtx17 + 48 | 0; //@line 23670
  HEAP32[$38 >> 2] = $24; //@line 23671
  sp = STACKTOP; //@line 23672
  STACKTOP = sp; //@line 23673
  return;
 }
 do {
  if (HEAP8[$2 >> 0] & 2) {
   $42 = $4 + 288 | 0; //@line 23680
   if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($42) | 0) + 10 >> 0] | 0)) {
    if ((HEAPU8[$4 + 895 >> 0] | 0) <= (HEAPU8[$4 + 894 >> 0] | 0)) {
     break;
    }
   }
   HEAP8[$4 + 377 >> 0] = 0; //@line 23696
   HEAP8[$22 >> 0] = 0; //@line 23697
   if (!(HEAP8[$4 + 370 >> 0] | 0)) {
    $56 = $4 + 956 | 0; //@line 23702
    HEAP32[$56 >> 2] = (HEAP32[$56 >> 2] | 0) + 1; //@line 23705
   }
   $60 = HEAP8[$4 + 895 >> 0] | 0; //@line 23708
   HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($42) | 0) + 11 >> 0] = $60; //@line 23711
   HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -2; //@line 23714
  }
 } while (0);
 $65 = $4 + 377 | 0; //@line 23717
 if (HEAP8[$65 >> 0] | 0) {
  if (!(HEAP32[$6 >> 2] & 16)) {
   HEAP8[$65 >> 0] = 0; //@line 23725
   $71 = $4 + 895 | 0; //@line 23726
   $72 = HEAP8[$71 >> 0] | 0; //@line 23727
   if (!(($72 & 255) < 9 ? ($72 & 255) < (HEAPU8[$4 + 894 >> 0] | 0) : 0)) {
    $98 = HEAP32[$4 >> 2] | 0; //@line 23734
    $101 = HEAP32[(HEAP32[$98 >> 2] | 0) + 16 >> 2] | 0; //@line 23737
    $ReallocAsyncCtx = _emscripten_realloc_async_context(52) | 0; //@line 23738
    FUNCTION_TABLE_vi[$101 & 1023]($98); //@line 23739
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 383; //@line 23742
     $102 = $ReallocAsyncCtx + 4 | 0; //@line 23743
     HEAP32[$102 >> 2] = $2; //@line 23744
     $103 = $ReallocAsyncCtx + 8 | 0; //@line 23745
     HEAP32[$103 >> 2] = $8; //@line 23746
     $104 = $ReallocAsyncCtx + 12 | 0; //@line 23747
     HEAP32[$104 >> 2] = $10; //@line 23748
     $105 = $ReallocAsyncCtx + 16 | 0; //@line 23749
     HEAP32[$105 >> 2] = $4; //@line 23750
     $106 = $ReallocAsyncCtx + 20 | 0; //@line 23751
     HEAP32[$106 >> 2] = $6; //@line 23752
     $107 = $ReallocAsyncCtx + 24 | 0; //@line 23753
     HEAP32[$107 >> 2] = $22; //@line 23754
     $108 = $ReallocAsyncCtx + 28 | 0; //@line 23755
     HEAP32[$108 >> 2] = $71; //@line 23756
     $109 = $ReallocAsyncCtx + 32 | 0; //@line 23757
     HEAP32[$109 >> 2] = $18; //@line 23758
     $110 = $ReallocAsyncCtx + 36 | 0; //@line 23759
     HEAP32[$110 >> 2] = $20; //@line 23760
     $111 = $ReallocAsyncCtx + 40 | 0; //@line 23761
     HEAP32[$111 >> 2] = $12; //@line 23762
     $112 = $ReallocAsyncCtx + 44 | 0; //@line 23763
     HEAP32[$112 >> 2] = $14; //@line 23764
     $113 = $ReallocAsyncCtx + 48 | 0; //@line 23765
     HEAP32[$113 >> 2] = $16; //@line 23766
     sp = STACKTOP; //@line 23767
     STACKTOP = sp; //@line 23768
     return;
    }
    ___async_unwind = 0; //@line 23770
    HEAP32[$ReallocAsyncCtx >> 2] = 383; //@line 23771
    $102 = $ReallocAsyncCtx + 4 | 0; //@line 23772
    HEAP32[$102 >> 2] = $2; //@line 23773
    $103 = $ReallocAsyncCtx + 8 | 0; //@line 23774
    HEAP32[$103 >> 2] = $8; //@line 23775
    $104 = $ReallocAsyncCtx + 12 | 0; //@line 23776
    HEAP32[$104 >> 2] = $10; //@line 23777
    $105 = $ReallocAsyncCtx + 16 | 0; //@line 23778
    HEAP32[$105 >> 2] = $4; //@line 23779
    $106 = $ReallocAsyncCtx + 20 | 0; //@line 23780
    HEAP32[$106 >> 2] = $6; //@line 23781
    $107 = $ReallocAsyncCtx + 24 | 0; //@line 23782
    HEAP32[$107 >> 2] = $22; //@line 23783
    $108 = $ReallocAsyncCtx + 28 | 0; //@line 23784
    HEAP32[$108 >> 2] = $71; //@line 23785
    $109 = $ReallocAsyncCtx + 32 | 0; //@line 23786
    HEAP32[$109 >> 2] = $18; //@line 23787
    $110 = $ReallocAsyncCtx + 36 | 0; //@line 23788
    HEAP32[$110 >> 2] = $20; //@line 23789
    $111 = $ReallocAsyncCtx + 40 | 0; //@line 23790
    HEAP32[$111 >> 2] = $12; //@line 23791
    $112 = $ReallocAsyncCtx + 44 | 0; //@line 23792
    HEAP32[$112 >> 2] = $14; //@line 23793
    $113 = $ReallocAsyncCtx + 48 | 0; //@line 23794
    HEAP32[$113 >> 2] = $16; //@line 23795
    sp = STACKTOP; //@line 23796
    STACKTOP = sp; //@line 23797
    return;
   }
   $77 = $72 + 1 << 24 >> 24; //@line 23799
   HEAP8[$71 >> 0] = $77; //@line 23800
   if ($77 & 1) {
    $81 = $4 + 1097 | 0; //@line 23805
    HEAP8[$81 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$4 >> 2] | 0, HEAP8[$81 >> 0] | 0) | 0; //@line 23808
   }
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(52) | 0; //@line 23810
   $84 = __ZN7LoRaMac11schedule_txEv($4) | 0; //@line 23811
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 382; //@line 23814
    $85 = $ReallocAsyncCtx7 + 4 | 0; //@line 23815
    HEAP32[$85 >> 2] = $2; //@line 23816
    $86 = $ReallocAsyncCtx7 + 8 | 0; //@line 23817
    HEAP32[$86 >> 2] = $8; //@line 23818
    $87 = $ReallocAsyncCtx7 + 12 | 0; //@line 23819
    HEAP32[$87 >> 2] = $10; //@line 23820
    $88 = $ReallocAsyncCtx7 + 16 | 0; //@line 23821
    HEAP32[$88 >> 2] = $4; //@line 23822
    $89 = $ReallocAsyncCtx7 + 20 | 0; //@line 23823
    HEAP32[$89 >> 2] = $6; //@line 23824
    $90 = $ReallocAsyncCtx7 + 24 | 0; //@line 23825
    HEAP32[$90 >> 2] = $22; //@line 23826
    $91 = $ReallocAsyncCtx7 + 28 | 0; //@line 23827
    HEAP32[$91 >> 2] = $71; //@line 23828
    $92 = $ReallocAsyncCtx7 + 32 | 0; //@line 23829
    HEAP32[$92 >> 2] = $12; //@line 23830
    $93 = $ReallocAsyncCtx7 + 36 | 0; //@line 23831
    HEAP32[$93 >> 2] = $14; //@line 23832
    $94 = $ReallocAsyncCtx7 + 40 | 0; //@line 23833
    HEAP32[$94 >> 2] = $16; //@line 23834
    $95 = $ReallocAsyncCtx7 + 44 | 0; //@line 23835
    HEAP32[$95 >> 2] = $18; //@line 23836
    $96 = $ReallocAsyncCtx7 + 48 | 0; //@line 23837
    HEAP32[$96 >> 2] = $20; //@line 23838
    sp = STACKTOP; //@line 23839
    STACKTOP = sp; //@line 23840
    return;
   }
   HEAP32[___async_retval >> 2] = $84; //@line 23843
   ___async_unwind = 0; //@line 23844
   HEAP32[$ReallocAsyncCtx7 >> 2] = 382; //@line 23845
   $85 = $ReallocAsyncCtx7 + 4 | 0; //@line 23846
   HEAP32[$85 >> 2] = $2; //@line 23847
   $86 = $ReallocAsyncCtx7 + 8 | 0; //@line 23848
   HEAP32[$86 >> 2] = $8; //@line 23849
   $87 = $ReallocAsyncCtx7 + 12 | 0; //@line 23850
   HEAP32[$87 >> 2] = $10; //@line 23851
   $88 = $ReallocAsyncCtx7 + 16 | 0; //@line 23852
   HEAP32[$88 >> 2] = $4; //@line 23853
   $89 = $ReallocAsyncCtx7 + 20 | 0; //@line 23854
   HEAP32[$89 >> 2] = $6; //@line 23855
   $90 = $ReallocAsyncCtx7 + 24 | 0; //@line 23856
   HEAP32[$90 >> 2] = $22; //@line 23857
   $91 = $ReallocAsyncCtx7 + 28 | 0; //@line 23858
   HEAP32[$91 >> 2] = $71; //@line 23859
   $92 = $ReallocAsyncCtx7 + 32 | 0; //@line 23860
   HEAP32[$92 >> 2] = $12; //@line 23861
   $93 = $ReallocAsyncCtx7 + 36 | 0; //@line 23862
   HEAP32[$93 >> 2] = $14; //@line 23863
   $94 = $ReallocAsyncCtx7 + 40 | 0; //@line 23864
   HEAP32[$94 >> 2] = $16; //@line 23865
   $95 = $ReallocAsyncCtx7 + 44 | 0; //@line 23866
   HEAP32[$95 >> 2] = $18; //@line 23867
   $96 = $ReallocAsyncCtx7 + 48 | 0; //@line 23868
   HEAP32[$96 >> 2] = $20; //@line 23869
   sp = STACKTOP; //@line 23870
   STACKTOP = sp; //@line 23871
   return;
  }
 }
 $114 = HEAP32[$6 >> 2] | 0; //@line 23874
 $117 = $114 & -3; //@line 23877
 if (!($114 & 2)) {
  $119 = $114; //@line 23879
 } else {
  HEAP32[$6 >> 2] = $117; //@line 23881
  $119 = $117; //@line 23882
 }
 if ($119 | 0) {
  $186 = HEAP32[$18 >> 2] | 0; //@line 23886
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 23887
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($186, $20, 1e3); //@line 23888
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 388; //@line 23891
   $187 = $ReallocAsyncCtx6 + 4 | 0; //@line 23892
   HEAP32[$187 >> 2] = $2; //@line 23893
   $188 = $ReallocAsyncCtx6 + 8 | 0; //@line 23894
   HEAP32[$188 >> 2] = $4; //@line 23895
   $189 = $ReallocAsyncCtx6 + 12 | 0; //@line 23896
   HEAP32[$189 >> 2] = $12; //@line 23897
   $190 = $ReallocAsyncCtx6 + 16 | 0; //@line 23898
   HEAP32[$190 >> 2] = $14; //@line 23899
   $191 = $ReallocAsyncCtx6 + 20 | 0; //@line 23900
   HEAP32[$191 >> 2] = $16; //@line 23901
   sp = STACKTOP; //@line 23902
   STACKTOP = sp; //@line 23903
   return;
  }
  ___async_unwind = 0; //@line 23905
  HEAP32[$ReallocAsyncCtx6 >> 2] = 388; //@line 23906
  $187 = $ReallocAsyncCtx6 + 4 | 0; //@line 23907
  HEAP32[$187 >> 2] = $2; //@line 23908
  $188 = $ReallocAsyncCtx6 + 8 | 0; //@line 23909
  HEAP32[$188 >> 2] = $4; //@line 23910
  $189 = $ReallocAsyncCtx6 + 12 | 0; //@line 23911
  HEAP32[$189 >> 2] = $12; //@line 23912
  $190 = $ReallocAsyncCtx6 + 16 | 0; //@line 23913
  HEAP32[$190 >> 2] = $14; //@line 23914
  $191 = $ReallocAsyncCtx6 + 20 | 0; //@line 23915
  HEAP32[$191 >> 2] = $16; //@line 23916
  sp = STACKTOP; //@line 23917
  STACKTOP = sp; //@line 23918
  return;
 }
 $120 = HEAP8[$2 >> 0] | 0; //@line 23920
 if ($120 & 1) {
  HEAP8[$2 >> 0] = $120 & -2; //@line 23925
  $125 = HEAP32[$4 + 1324 >> 2] | 0; //@line 23927
  $127 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 23929
  $128 = $125 + 12 | 0; //@line 23930
  $129 = HEAP32[$128 >> 2] | 0; //@line 23931
  if (!$129) {
   $ReallocAsyncCtx16 = _emscripten_realloc_async_context(44) | 0; //@line 23934
   _mbed_assert_internal(15615, 15620, 1102); //@line 23935
   if (___async) {
    HEAP32[$ReallocAsyncCtx16 >> 2] = 384; //@line 23938
    $131 = $ReallocAsyncCtx16 + 4 | 0; //@line 23939
    HEAP32[$131 >> 2] = $2; //@line 23940
    $132 = $ReallocAsyncCtx16 + 8 | 0; //@line 23941
    HEAP32[$132 >> 2] = $4; //@line 23942
    $133 = $ReallocAsyncCtx16 + 12 | 0; //@line 23943
    HEAP32[$133 >> 2] = $128; //@line 23944
    $134 = $ReallocAsyncCtx16 + 16 | 0; //@line 23945
    HEAP32[$134 >> 2] = $125; //@line 23946
    $135 = $ReallocAsyncCtx16 + 20 | 0; //@line 23947
    HEAP32[$135 >> 2] = $127; //@line 23948
    $136 = $ReallocAsyncCtx16 + 24 | 0; //@line 23949
    HEAP32[$136 >> 2] = $12; //@line 23950
    $137 = $ReallocAsyncCtx16 + 28 | 0; //@line 23951
    HEAP32[$137 >> 2] = $14; //@line 23952
    $138 = $ReallocAsyncCtx16 + 32 | 0; //@line 23953
    HEAP32[$138 >> 2] = $16; //@line 23954
    $139 = $ReallocAsyncCtx16 + 36 | 0; //@line 23955
    HEAP32[$139 >> 2] = $8; //@line 23956
    $140 = $ReallocAsyncCtx16 + 40 | 0; //@line 23957
    HEAP32[$140 >> 2] = $10; //@line 23958
    sp = STACKTOP; //@line 23959
    STACKTOP = sp; //@line 23960
    return;
   }
   ___async_unwind = 0; //@line 23962
   HEAP32[$ReallocAsyncCtx16 >> 2] = 384; //@line 23963
   $131 = $ReallocAsyncCtx16 + 4 | 0; //@line 23964
   HEAP32[$131 >> 2] = $2; //@line 23965
   $132 = $ReallocAsyncCtx16 + 8 | 0; //@line 23966
   HEAP32[$132 >> 2] = $4; //@line 23967
   $133 = $ReallocAsyncCtx16 + 12 | 0; //@line 23968
   HEAP32[$133 >> 2] = $128; //@line 23969
   $134 = $ReallocAsyncCtx16 + 16 | 0; //@line 23970
   HEAP32[$134 >> 2] = $125; //@line 23971
   $135 = $ReallocAsyncCtx16 + 20 | 0; //@line 23972
   HEAP32[$135 >> 2] = $127; //@line 23973
   $136 = $ReallocAsyncCtx16 + 24 | 0; //@line 23974
   HEAP32[$136 >> 2] = $12; //@line 23975
   $137 = $ReallocAsyncCtx16 + 28 | 0; //@line 23976
   HEAP32[$137 >> 2] = $14; //@line 23977
   $138 = $ReallocAsyncCtx16 + 32 | 0; //@line 23978
   HEAP32[$138 >> 2] = $16; //@line 23979
   $139 = $ReallocAsyncCtx16 + 36 | 0; //@line 23980
   HEAP32[$139 >> 2] = $8; //@line 23981
   $140 = $ReallocAsyncCtx16 + 40 | 0; //@line 23982
   HEAP32[$140 >> 2] = $10; //@line 23983
   sp = STACKTOP; //@line 23984
   STACKTOP = sp; //@line 23985
   return;
  } else {
   $141 = HEAP32[$129 >> 2] | 0; //@line 23987
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 23988
   FUNCTION_TABLE_vii[$141 & 31]($125, $127); //@line 23989
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 385; //@line 23992
    $142 = $ReallocAsyncCtx2 + 4 | 0; //@line 23993
    HEAP32[$142 >> 2] = $2; //@line 23994
    $143 = $ReallocAsyncCtx2 + 8 | 0; //@line 23995
    HEAP32[$143 >> 2] = $4; //@line 23996
    $144 = $ReallocAsyncCtx2 + 12 | 0; //@line 23997
    HEAP32[$144 >> 2] = $12; //@line 23998
    $145 = $ReallocAsyncCtx2 + 16 | 0; //@line 23999
    HEAP32[$145 >> 2] = $14; //@line 24000
    $146 = $ReallocAsyncCtx2 + 20 | 0; //@line 24001
    HEAP32[$146 >> 2] = $16; //@line 24002
    $147 = $ReallocAsyncCtx2 + 24 | 0; //@line 24003
    HEAP32[$147 >> 2] = $8; //@line 24004
    $148 = $ReallocAsyncCtx2 + 28 | 0; //@line 24005
    HEAP32[$148 >> 2] = $10; //@line 24006
    sp = STACKTOP; //@line 24007
    STACKTOP = sp; //@line 24008
    return;
   }
   ___async_unwind = 0; //@line 24010
   HEAP32[$ReallocAsyncCtx2 >> 2] = 385; //@line 24011
   $142 = $ReallocAsyncCtx2 + 4 | 0; //@line 24012
   HEAP32[$142 >> 2] = $2; //@line 24013
   $143 = $ReallocAsyncCtx2 + 8 | 0; //@line 24014
   HEAP32[$143 >> 2] = $4; //@line 24015
   $144 = $ReallocAsyncCtx2 + 12 | 0; //@line 24016
   HEAP32[$144 >> 2] = $12; //@line 24017
   $145 = $ReallocAsyncCtx2 + 16 | 0; //@line 24018
   HEAP32[$145 >> 2] = $14; //@line 24019
   $146 = $ReallocAsyncCtx2 + 20 | 0; //@line 24020
   HEAP32[$146 >> 2] = $16; //@line 24021
   $147 = $ReallocAsyncCtx2 + 24 | 0; //@line 24022
   HEAP32[$147 >> 2] = $8; //@line 24023
   $148 = $ReallocAsyncCtx2 + 28 | 0; //@line 24024
   HEAP32[$148 >> 2] = $10; //@line 24025
   sp = STACKTOP; //@line 24026
   STACKTOP = sp; //@line 24027
   return;
  }
 }
 if ($120 & 8) {
  HEAP8[$2 >> 0] = $120 & -9; //@line 24034
  $153 = HEAP32[$4 + 1324 >> 2] | 0; //@line 24036
  $154 = $153 + 32 | 0; //@line 24037
  $156 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 24039
  $157 = $153 + 44 | 0; //@line 24040
  $158 = HEAP32[$157 >> 2] | 0; //@line 24041
  if (!$158) {
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(44) | 0; //@line 24044
   _mbed_assert_internal(15615, 15620, 1102); //@line 24045
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 386; //@line 24048
    $160 = $ReallocAsyncCtx15 + 4 | 0; //@line 24049
    HEAP32[$160 >> 2] = $2; //@line 24050
    $161 = $ReallocAsyncCtx15 + 8 | 0; //@line 24051
    HEAP32[$161 >> 2] = $4; //@line 24052
    $162 = $ReallocAsyncCtx15 + 12 | 0; //@line 24053
    HEAP32[$162 >> 2] = $154; //@line 24054
    $163 = $ReallocAsyncCtx15 + 16 | 0; //@line 24055
    HEAP32[$163 >> 2] = $156; //@line 24056
    $164 = $ReallocAsyncCtx15 + 20 | 0; //@line 24057
    HEAP32[$164 >> 2] = $12; //@line 24058
    $165 = $ReallocAsyncCtx15 + 24 | 0; //@line 24059
    HEAP32[$165 >> 2] = $14; //@line 24060
    $166 = $ReallocAsyncCtx15 + 28 | 0; //@line 24061
    HEAP32[$166 >> 2] = $16; //@line 24062
    $167 = $ReallocAsyncCtx15 + 32 | 0; //@line 24063
    HEAP32[$167 >> 2] = $8; //@line 24064
    $168 = $ReallocAsyncCtx15 + 36 | 0; //@line 24065
    HEAP32[$168 >> 2] = $10; //@line 24066
    $169 = $ReallocAsyncCtx15 + 40 | 0; //@line 24067
    HEAP32[$169 >> 2] = $157; //@line 24068
    sp = STACKTOP; //@line 24069
    STACKTOP = sp; //@line 24070
    return;
   }
   ___async_unwind = 0; //@line 24072
   HEAP32[$ReallocAsyncCtx15 >> 2] = 386; //@line 24073
   $160 = $ReallocAsyncCtx15 + 4 | 0; //@line 24074
   HEAP32[$160 >> 2] = $2; //@line 24075
   $161 = $ReallocAsyncCtx15 + 8 | 0; //@line 24076
   HEAP32[$161 >> 2] = $4; //@line 24077
   $162 = $ReallocAsyncCtx15 + 12 | 0; //@line 24078
   HEAP32[$162 >> 2] = $154; //@line 24079
   $163 = $ReallocAsyncCtx15 + 16 | 0; //@line 24080
   HEAP32[$163 >> 2] = $156; //@line 24081
   $164 = $ReallocAsyncCtx15 + 20 | 0; //@line 24082
   HEAP32[$164 >> 2] = $12; //@line 24083
   $165 = $ReallocAsyncCtx15 + 24 | 0; //@line 24084
   HEAP32[$165 >> 2] = $14; //@line 24085
   $166 = $ReallocAsyncCtx15 + 28 | 0; //@line 24086
   HEAP32[$166 >> 2] = $16; //@line 24087
   $167 = $ReallocAsyncCtx15 + 32 | 0; //@line 24088
   HEAP32[$167 >> 2] = $8; //@line 24089
   $168 = $ReallocAsyncCtx15 + 36 | 0; //@line 24090
   HEAP32[$168 >> 2] = $10; //@line 24091
   $169 = $ReallocAsyncCtx15 + 40 | 0; //@line 24092
   HEAP32[$169 >> 2] = $157; //@line 24093
   sp = STACKTOP; //@line 24094
   STACKTOP = sp; //@line 24095
   return;
  } else {
   $170 = HEAP32[$158 >> 2] | 0; //@line 24097
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 24098
   FUNCTION_TABLE_vii[$170 & 31]($154, $156); //@line 24099
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 387; //@line 24102
    $171 = $ReallocAsyncCtx3 + 4 | 0; //@line 24103
    HEAP32[$171 >> 2] = $2; //@line 24104
    $172 = $ReallocAsyncCtx3 + 8 | 0; //@line 24105
    HEAP32[$172 >> 2] = $4; //@line 24106
    $173 = $ReallocAsyncCtx3 + 12 | 0; //@line 24107
    HEAP32[$173 >> 2] = $12; //@line 24108
    $174 = $ReallocAsyncCtx3 + 16 | 0; //@line 24109
    HEAP32[$174 >> 2] = $14; //@line 24110
    $175 = $ReallocAsyncCtx3 + 20 | 0; //@line 24111
    HEAP32[$175 >> 2] = $16; //@line 24112
    $176 = $ReallocAsyncCtx3 + 24 | 0; //@line 24113
    HEAP32[$176 >> 2] = $8; //@line 24114
    $177 = $ReallocAsyncCtx3 + 28 | 0; //@line 24115
    HEAP32[$177 >> 2] = $10; //@line 24116
    sp = STACKTOP; //@line 24117
    STACKTOP = sp; //@line 24118
    return;
   }
   ___async_unwind = 0; //@line 24120
   HEAP32[$ReallocAsyncCtx3 >> 2] = 387; //@line 24121
   $171 = $ReallocAsyncCtx3 + 4 | 0; //@line 24122
   HEAP32[$171 >> 2] = $2; //@line 24123
   $172 = $ReallocAsyncCtx3 + 8 | 0; //@line 24124
   HEAP32[$172 >> 2] = $4; //@line 24125
   $173 = $ReallocAsyncCtx3 + 12 | 0; //@line 24126
   HEAP32[$173 >> 2] = $12; //@line 24127
   $174 = $ReallocAsyncCtx3 + 16 | 0; //@line 24128
   HEAP32[$174 >> 2] = $14; //@line 24129
   $175 = $ReallocAsyncCtx3 + 20 | 0; //@line 24130
   HEAP32[$175 >> 2] = $16; //@line 24131
   $176 = $ReallocAsyncCtx3 + 24 | 0; //@line 24132
   HEAP32[$176 >> 2] = $8; //@line 24133
   $177 = $ReallocAsyncCtx3 + 28 | 0; //@line 24134
   HEAP32[$177 >> 2] = $10; //@line 24135
   sp = STACKTOP; //@line 24136
   STACKTOP = sp; //@line 24137
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _mbed_tracef(16, 13704, 13865, $8); //@line 24143
  HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0) >> 2] = 4; //@line 24146
  $183 = HEAP8[$2 >> 0] | 16; //@line 24148
  HEAP8[$2 >> 0] = $183; //@line 24149
  $185 = $183; //@line 24150
 } else {
  $185 = HEAP8[$2 >> 0] | 0; //@line 24153
 }
 $184 = $185 & -33; //@line 24155
 HEAP8[$2 >> 0] = $184; //@line 24156
 do {
  if (!($184 & 2)) {
   $225 = $184; //@line 24161
  } else {
   $194 = $184 & -3; //@line 24163
   HEAP8[$2 >> 0] = $194; //@line 24164
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _mbed_tracef(16, 13704, 13723, $14); //@line 24169
    $199 = HEAP32[$4 + 1328 >> 2] | 0; //@line 24171
    HEAP32[$12 >> 2] = 279; //@line 24172
    HEAP32[$12 + 4 >> 2] = 0; //@line 24174
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 24175
    HEAP32[$$byval_copy >> 2] = HEAP32[$12 >> 2]; //@line 24176
    HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$12 + 4 >> 2]; //@line 24176
    $200 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($199, $4, $$byval_copy) | 0; //@line 24177
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 389; //@line 24180
     $201 = $ReallocAsyncCtx8 + 4 | 0; //@line 24181
     HEAP32[$201 >> 2] = $2; //@line 24182
     $202 = $ReallocAsyncCtx8 + 8 | 0; //@line 24183
     HEAP32[$202 >> 2] = $4; //@line 24184
     $203 = $ReallocAsyncCtx8 + 12 | 0; //@line 24185
     HEAP32[$203 >> 2] = $12; //@line 24186
     sp = STACKTOP; //@line 24187
     STACKTOP = sp; //@line 24188
     return;
    }
    HEAP32[___async_retval >> 2] = $200; //@line 24191
    ___async_unwind = 0; //@line 24192
    HEAP32[$ReallocAsyncCtx8 >> 2] = 389; //@line 24193
    $201 = $ReallocAsyncCtx8 + 4 | 0; //@line 24194
    HEAP32[$201 >> 2] = $2; //@line 24195
    $202 = $ReallocAsyncCtx8 + 8 | 0; //@line 24196
    HEAP32[$202 >> 2] = $4; //@line 24197
    $203 = $ReallocAsyncCtx8 + 12 | 0; //@line 24198
    HEAP32[$203 >> 2] = $12; //@line 24199
    sp = STACKTOP; //@line 24200
    STACKTOP = sp; //@line 24201
    return;
   }
   if ($194 & 4) {
    $223 = $194 & -5; //@line 24206
    HEAP8[$2 >> 0] = $223; //@line 24207
    $225 = $223; //@line 24208
    break;
   }
   $208 = HEAP32[$4 + 1324 >> 2] | 0; //@line 24212
   $209 = $208 + 16 | 0; //@line 24213
   $211 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 24215
   $212 = $208 + 28 | 0; //@line 24216
   $213 = HEAP32[$212 >> 2] | 0; //@line 24217
   if (!$213) {
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 24220
    _mbed_assert_internal(15615, 15620, 1102); //@line 24221
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 391; //@line 24224
     $215 = $ReallocAsyncCtx13 + 4 | 0; //@line 24225
     HEAP32[$215 >> 2] = $212; //@line 24226
     $216 = $ReallocAsyncCtx13 + 8 | 0; //@line 24227
     HEAP32[$216 >> 2] = $209; //@line 24228
     $217 = $ReallocAsyncCtx13 + 12 | 0; //@line 24229
     HEAP32[$217 >> 2] = $211; //@line 24230
     $218 = $ReallocAsyncCtx13 + 16 | 0; //@line 24231
     HEAP32[$218 >> 2] = $2; //@line 24232
     $219 = $ReallocAsyncCtx13 + 20 | 0; //@line 24233
     HEAP32[$219 >> 2] = $4; //@line 24234
     sp = STACKTOP; //@line 24235
     STACKTOP = sp; //@line 24236
     return;
    }
    ___async_unwind = 0; //@line 24238
    HEAP32[$ReallocAsyncCtx13 >> 2] = 391; //@line 24239
    $215 = $ReallocAsyncCtx13 + 4 | 0; //@line 24240
    HEAP32[$215 >> 2] = $212; //@line 24241
    $216 = $ReallocAsyncCtx13 + 8 | 0; //@line 24242
    HEAP32[$216 >> 2] = $209; //@line 24243
    $217 = $ReallocAsyncCtx13 + 12 | 0; //@line 24244
    HEAP32[$217 >> 2] = $211; //@line 24245
    $218 = $ReallocAsyncCtx13 + 16 | 0; //@line 24246
    HEAP32[$218 >> 2] = $2; //@line 24247
    $219 = $ReallocAsyncCtx13 + 20 | 0; //@line 24248
    HEAP32[$219 >> 2] = $4; //@line 24249
    sp = STACKTOP; //@line 24250
    STACKTOP = sp; //@line 24251
    return;
   } else {
    $220 = HEAP32[$213 >> 2] | 0; //@line 24253
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 24254
    FUNCTION_TABLE_vii[$220 & 31]($209, $211); //@line 24255
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 392; //@line 24258
     $221 = $ReallocAsyncCtx4 + 4 | 0; //@line 24259
     HEAP32[$221 >> 2] = $2; //@line 24260
     $222 = $ReallocAsyncCtx4 + 8 | 0; //@line 24261
     HEAP32[$222 >> 2] = $4; //@line 24262
     sp = STACKTOP; //@line 24263
     STACKTOP = sp; //@line 24264
     return;
    }
    ___async_unwind = 0; //@line 24266
    HEAP32[$ReallocAsyncCtx4 >> 2] = 392; //@line 24267
    $221 = $ReallocAsyncCtx4 + 4 | 0; //@line 24268
    HEAP32[$221 >> 2] = $2; //@line 24269
    $222 = $ReallocAsyncCtx4 + 8 | 0; //@line 24270
    HEAP32[$222 >> 2] = $4; //@line 24271
    sp = STACKTOP; //@line 24272
    STACKTOP = sp; //@line 24273
    return;
   }
  }
 } while (0);
 if (!($225 & 16)) {
  STACKTOP = sp; //@line 24280
  return;
 }
 HEAP8[$2 >> 0] = $225 & -17; //@line 24283
 $229 = HEAP32[$4 + 1324 >> 2] | 0; //@line 24285
 $230 = $229 + 48 | 0; //@line 24286
 $232 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 24288
 $233 = $229 + 60 | 0; //@line 24289
 $234 = HEAP32[$233 >> 2] | 0; //@line 24290
 if (!$234) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 24293
  _mbed_assert_internal(15615, 15620, 1102); //@line 24294
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 393; //@line 24297
   $236 = $ReallocAsyncCtx12 + 4 | 0; //@line 24298
   HEAP32[$236 >> 2] = $233; //@line 24299
   $237 = $ReallocAsyncCtx12 + 8 | 0; //@line 24300
   HEAP32[$237 >> 2] = $230; //@line 24301
   $238 = $ReallocAsyncCtx12 + 12 | 0; //@line 24302
   HEAP32[$238 >> 2] = $232; //@line 24303
   sp = STACKTOP; //@line 24304
   STACKTOP = sp; //@line 24305
   return;
  }
  ___async_unwind = 0; //@line 24307
  HEAP32[$ReallocAsyncCtx12 >> 2] = 393; //@line 24308
  $236 = $ReallocAsyncCtx12 + 4 | 0; //@line 24309
  HEAP32[$236 >> 2] = $233; //@line 24310
  $237 = $ReallocAsyncCtx12 + 8 | 0; //@line 24311
  HEAP32[$237 >> 2] = $230; //@line 24312
  $238 = $ReallocAsyncCtx12 + 12 | 0; //@line 24313
  HEAP32[$238 >> 2] = $232; //@line 24314
  sp = STACKTOP; //@line 24315
  STACKTOP = sp; //@line 24316
  return;
 } else {
  $239 = HEAP32[$234 >> 2] | 0; //@line 24318
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 24319
  FUNCTION_TABLE_vii[$239 & 31]($230, $232); //@line 24320
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 394; //@line 24323
   sp = STACKTOP; //@line 24324
   STACKTOP = sp; //@line 24325
   return;
  }
  ___async_unwind = 0; //@line 24327
  HEAP32[$ReallocAsyncCtx5 >> 2] = 394; //@line 24328
  sp = STACKTOP; //@line 24329
  STACKTOP = sp; //@line 24330
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv($0) {
 $0 = $0 | 0;
 var $$029 = 0, $$1 = 0, $1 = 0, $10 = 0, $103 = 0, $106 = 0, $113 = 0, $114 = 0, $166 = 0, $167 = 0, $171 = 0, $173 = 0, $179 = 0, $180 = 0, $184 = 0, $187 = 0, $192 = 0, $195 = 0, $2 = 0, $207 = 0, $208 = 0, $212 = 0, $214 = 0, $221 = 0, $222 = 0, $227 = 0, $230 = 0, $237 = 0, $238 = 0, $242 = 0, $244 = 0, $252 = 0, $253 = 0, $259 = 0, $262 = 0, $3 = 0, $38 = 0, $39 = 0, $4 = 0, $43 = 0, $45 = 0, $5 = 0, $51 = 0, $52 = 0, $56 = 0, $59 = 0, $6 = 0, $7 = 0, $80 = 0, $85 = 0, $86 = 0, $90 = 0, $92 = 0, $98 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx101 = 0, $AsyncCtx105 = 0, $AsyncCtx109 = 0, $AsyncCtx113 = 0, $AsyncCtx117 = 0, $AsyncCtx16 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx30 = 0, $AsyncCtx33 = 0, $AsyncCtx37 = 0, $AsyncCtx40 = 0, $AsyncCtx44 = 0, $AsyncCtx48 = 0, $AsyncCtx51 = 0, $AsyncCtx55 = 0, $AsyncCtx59 = 0, $AsyncCtx63 = 0, $AsyncCtx67 = 0, $AsyncCtx71 = 0, $AsyncCtx74 = 0, $AsyncCtx78 = 0, $AsyncCtx82 = 0, $AsyncCtx85 = 0, $AsyncCtx88 = 0, $AsyncCtx91 = 0, $AsyncCtx94 = 0, $AsyncCtx97 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP; //@line 5887
 STACKTOP = STACKTOP + 176 | 0; //@line 5888
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176); //@line 5888
 $vararg_buffer13 = sp + 72 | 0; //@line 5889
 $vararg_buffer11 = sp + 64 | 0; //@line 5890
 $vararg_buffer9 = sp + 56 | 0; //@line 5891
 $vararg_buffer7 = sp + 48 | 0; //@line 5892
 $vararg_buffer5 = sp + 40 | 0; //@line 5893
 $vararg_buffer3 = sp + 16 | 0; //@line 5894
 $vararg_buffer1 = sp + 8 | 0; //@line 5895
 $vararg_buffer = sp; //@line 5896
 $1 = sp + 160 | 0; //@line 5897
 $2 = sp + 144 | 0; //@line 5898
 $3 = sp + 128 | 0; //@line 5899
 $4 = sp + 112 | 0; //@line 5900
 $5 = sp + 96 | 0; //@line 5901
 $6 = sp + 80 | 0; //@line 5902
 $7 = $0 + 1876 | 0; //@line 5903
 HEAP32[$vararg_buffer >> 2] = HEAP32[$7 >> 2]; //@line 5905
 _mbed_tracef(16, 12332, 12576, $vararg_buffer); //@line 5906
 switch (HEAP32[$7 >> 2] | 0) {
 case 7:
  {
   $10 = $0 + 4 | 0; //@line 5910
   $AsyncCtx78 = _emscripten_alloc_async_context(32, sp) | 0; //@line 5911
   __ZN7LoRaMac19remove_channel_planEv($10) | 0; //@line 5912
   if (___async) {
    HEAP32[$AsyncCtx78 >> 2] = 181; //@line 5915
    HEAP32[$AsyncCtx78 + 4 >> 2] = $0; //@line 5917
    HEAP32[$AsyncCtx78 + 8 >> 2] = $vararg_buffer1; //@line 5919
    HEAP32[$AsyncCtx78 + 12 >> 2] = $vararg_buffer1; //@line 5921
    HEAP32[$AsyncCtx78 + 16 >> 2] = $1; //@line 5923
    HEAP32[$AsyncCtx78 + 20 >> 2] = $2; //@line 5925
    HEAP32[$AsyncCtx78 + 24 >> 2] = $1; //@line 5927
    HEAP32[$AsyncCtx78 + 28 >> 2] = $10; //@line 5929
    sp = STACKTOP; //@line 5930
    STACKTOP = sp; //@line 5931
    return 0; //@line 5931
   }
   _emscripten_free_async_context($AsyncCtx78 | 0); //@line 5933
   $AsyncCtx51 = _emscripten_alloc_async_context(32, sp) | 0; //@line 5934
   __ZN7LoRaMac10disconnectEv($10); //@line 5935
   if (___async) {
    HEAP32[$AsyncCtx51 >> 2] = 182; //@line 5938
    HEAP32[$AsyncCtx51 + 4 >> 2] = $1; //@line 5940
    HEAP32[$AsyncCtx51 + 8 >> 2] = $10; //@line 5942
    HEAP32[$AsyncCtx51 + 12 >> 2] = $0; //@line 5944
    HEAP32[$AsyncCtx51 + 16 >> 2] = $vararg_buffer1; //@line 5946
    HEAP32[$AsyncCtx51 + 20 >> 2] = $vararg_buffer1; //@line 5948
    HEAP32[$AsyncCtx51 + 24 >> 2] = $1; //@line 5950
    HEAP32[$AsyncCtx51 + 28 >> 2] = $2; //@line 5952
    sp = STACKTOP; //@line 5953
    STACKTOP = sp; //@line 5954
    return 0; //@line 5954
   }
   _emscripten_free_async_context($AsyncCtx51 | 0); //@line 5956
   HEAP32[$1 >> 2] = 1; //@line 5957
   HEAP8[$1 + 4 >> 0] = 0; //@line 5959
   $AsyncCtx74 = _emscripten_alloc_async_context(24, sp) | 0; //@line 5960
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($10, $1) | 0; //@line 5961
   if (___async) {
    HEAP32[$AsyncCtx74 >> 2] = 183; //@line 5964
    HEAP32[$AsyncCtx74 + 4 >> 2] = $0; //@line 5966
    HEAP32[$AsyncCtx74 + 8 >> 2] = $vararg_buffer1; //@line 5968
    HEAP32[$AsyncCtx74 + 12 >> 2] = $vararg_buffer1; //@line 5970
    HEAP32[$AsyncCtx74 + 16 >> 2] = $1; //@line 5972
    HEAP32[$AsyncCtx74 + 20 >> 2] = $2; //@line 5974
    sp = STACKTOP; //@line 5975
    STACKTOP = sp; //@line 5976
    return 0; //@line 5976
   }
   _emscripten_free_async_context($AsyncCtx74 | 0); //@line 5978
   HEAP8[$0 + 1964 >> 0] = 0; //@line 5981
   HEAP32[$0 + 2256 >> 2] = 0; //@line 5983
   HEAP8[$0 + 2236 >> 0] = 0; //@line 5985
   HEAP16[$0 + 2282 >> 1] = 0; //@line 5987
   HEAP16[$0 + 2260 >> 1] = 0; //@line 5989
   HEAP8[$0 + 1932 >> 0] = 0; //@line 5991
   _memset($0 + 1975 | 0, 0, 259) | 0; //@line 5992
   _mbed_tracef(16, 12332, 12598, $vararg_buffer1); //@line 5993
   $38 = $0 + 1892 | 0; //@line 5994
   $39 = HEAP32[$38 >> 2] | 0; //@line 5995
   if (!$39) {
    $$1 = -1011; //@line 5998
    STACKTOP = sp; //@line 5999
    return $$1 | 0; //@line 5999
   }
   $43 = HEAP32[$0 + 2288 >> 2] | 0; //@line 6003
   $45 = HEAP32[$39 + 4 >> 2] | 0; //@line 6005
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 6006
   FUNCTION_TABLE_vii[$45 & 31]($2, $0 + 1880 | 0); //@line 6007
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 184; //@line 6010
    HEAP32[$AsyncCtx + 4 >> 2] = $38; //@line 6012
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 6014
    HEAP32[$AsyncCtx + 12 >> 2] = $43; //@line 6016
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 6018
    HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 6020
    sp = STACKTOP; //@line 6021
    STACKTOP = sp; //@line 6022
    return 0; //@line 6022
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 6024
   $51 = $2 + 12 | 0; //@line 6026
   HEAP32[$51 >> 2] = HEAP32[$38 >> 2]; //@line 6027
   $AsyncCtx97 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6028
   $52 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($43, $2, 1) | 0; //@line 6029
   if (___async) {
    HEAP32[$AsyncCtx97 >> 2] = 185; //@line 6032
    HEAP32[$AsyncCtx97 + 4 >> 2] = $51; //@line 6034
    HEAP32[$AsyncCtx97 + 8 >> 2] = $2; //@line 6036
    HEAP32[$AsyncCtx97 + 12 >> 2] = $1; //@line 6038
    sp = STACKTOP; //@line 6039
    STACKTOP = sp; //@line 6040
    return 0; //@line 6040
   }
   _emscripten_free_async_context($AsyncCtx97 | 0); //@line 6042
   $56 = HEAP32[$51 >> 2] | 0; //@line 6043
   do {
    if ($56 | 0) {
     $59 = HEAP32[$56 + 8 >> 2] | 0; //@line 6048
     $AsyncCtx16 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6049
     FUNCTION_TABLE_vi[$59 & 1023]($2); //@line 6050
     if (___async) {
      HEAP32[$AsyncCtx16 >> 2] = 186; //@line 6053
      HEAP32[$AsyncCtx16 + 4 >> 2] = $52; //@line 6055
      HEAP32[$AsyncCtx16 + 8 >> 2] = $1; //@line 6057
      sp = STACKTOP; //@line 6058
      STACKTOP = sp; //@line 6059
      return 0; //@line 6059
     } else {
      _emscripten_free_async_context($AsyncCtx16 | 0); //@line 6061
      break;
     }
    }
   } while (0);
   if ($52 | 0) {
    $$1 = -1011; //@line 6068
    STACKTOP = sp; //@line 6069
    return $$1 | 0; //@line 6069
   }
   $AsyncCtx117 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6071
   _mbed_assert_internal(13588, 12372, 1135); //@line 6072
   if (___async) {
    HEAP32[$AsyncCtx117 >> 2] = 187; //@line 6075
    HEAP32[$AsyncCtx117 + 4 >> 2] = $1; //@line 6077
    sp = STACKTOP; //@line 6078
    STACKTOP = sp; //@line 6079
    return 0; //@line 6079
   }
   _emscripten_free_async_context($AsyncCtx117 | 0); //@line 6081
   $$1 = -1011; //@line 6082
   STACKTOP = sp; //@line 6083
   return $$1 | 0; //@line 6083
  }
 case 1:
  {
   $$1 = 0; //@line 6087
   STACKTOP = sp; //@line 6088
   return $$1 | 0; //@line 6088
  }
 case 2:
  {
   if (HEAP8[$0 + 1936 >> 0] | 0) {
    $$1 = -1003; //@line 6096
    STACKTOP = sp; //@line 6097
    return $$1 | 0; //@line 6097
   }
   _mbed_tracef(16, 12332, 12635, $vararg_buffer3); //@line 6099
   HEAP32[$vararg_buffer3 >> 2] = 0; //@line 6100
   HEAP32[$vararg_buffer3 + 4 >> 2] = HEAP32[$0 + 1940 >> 2]; //@line 6104
   HEAP32[$vararg_buffer3 + 8 >> 2] = HEAP32[$0 + 1944 >> 2]; //@line 6108
   HEAP32[$vararg_buffer3 + 12 >> 2] = HEAP32[$0 + 1948 >> 2]; //@line 6112
   HEAP8[$vararg_buffer3 + 16 >> 0] = HEAP8[$0 + 1952 >> 0] | 0; //@line 6116
   $AsyncCtx82 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6118
   $80 = __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t($0 + 4 | 0, $vararg_buffer3) | 0; //@line 6119
   if (___async) {
    HEAP32[$AsyncCtx82 >> 2] = 188; //@line 6122
    HEAP32[$AsyncCtx82 + 4 >> 2] = $vararg_buffer3; //@line 6124
    HEAP32[$AsyncCtx82 + 8 >> 2] = $1; //@line 6126
    sp = STACKTOP; //@line 6127
    STACKTOP = sp; //@line 6128
    return 0; //@line 6128
   }
   _emscripten_free_async_context($AsyncCtx82 | 0); //@line 6130
   $$1 = ($80 | 0) == 0 ? -1016 : $80; //@line 6133
   STACKTOP = sp; //@line 6134
   return $$1 | 0; //@line 6134
  }
 case 4:
  {
   _mbed_tracef(16, 12332, 12655, $vararg_buffer5); //@line 6138
   HEAP8[$0 + 1932 >> 0] = 1; //@line 6140
   $85 = $0 + 1892 | 0; //@line 6141
   $86 = HEAP32[$85 >> 2] | 0; //@line 6142
   if (!$86) {
    $$1 = 0; //@line 6145
    STACKTOP = sp; //@line 6146
    return $$1 | 0; //@line 6146
   }
   $90 = HEAP32[$0 + 2288 >> 2] | 0; //@line 6150
   $92 = HEAP32[$86 + 4 >> 2] | 0; //@line 6152
   $AsyncCtx19 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6153
   FUNCTION_TABLE_vii[$92 & 31]($3, $0 + 1880 | 0); //@line 6154
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 189; //@line 6157
    HEAP32[$AsyncCtx19 + 4 >> 2] = $85; //@line 6159
    HEAP32[$AsyncCtx19 + 8 >> 2] = $3; //@line 6161
    HEAP32[$AsyncCtx19 + 12 >> 2] = $90; //@line 6163
    HEAP32[$AsyncCtx19 + 16 >> 2] = $3; //@line 6165
    HEAP32[$AsyncCtx19 + 20 >> 2] = $1; //@line 6167
    sp = STACKTOP; //@line 6168
    STACKTOP = sp; //@line 6169
    return 0; //@line 6169
   }
   _emscripten_free_async_context($AsyncCtx19 | 0); //@line 6171
   $98 = $3 + 12 | 0; //@line 6173
   HEAP32[$98 >> 2] = HEAP32[$85 >> 2]; //@line 6174
   $AsyncCtx94 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6175
   $99 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($90, $3, 0) | 0; //@line 6176
   if (___async) {
    HEAP32[$AsyncCtx94 >> 2] = 190; //@line 6179
    HEAP32[$AsyncCtx94 + 4 >> 2] = $98; //@line 6181
    HEAP32[$AsyncCtx94 + 8 >> 2] = $3; //@line 6183
    HEAP32[$AsyncCtx94 + 12 >> 2] = $1; //@line 6185
    sp = STACKTOP; //@line 6186
    STACKTOP = sp; //@line 6187
    return 0; //@line 6187
   }
   _emscripten_free_async_context($AsyncCtx94 | 0); //@line 6189
   $103 = HEAP32[$98 >> 2] | 0; //@line 6190
   do {
    if ($103 | 0) {
     $106 = HEAP32[$103 + 8 >> 2] | 0; //@line 6195
     $AsyncCtx23 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6196
     FUNCTION_TABLE_vi[$106 & 1023]($3); //@line 6197
     if (___async) {
      HEAP32[$AsyncCtx23 >> 2] = 191; //@line 6200
      HEAP32[$AsyncCtx23 + 4 >> 2] = $99; //@line 6202
      HEAP32[$AsyncCtx23 + 8 >> 2] = $1; //@line 6204
      sp = STACKTOP; //@line 6205
      STACKTOP = sp; //@line 6206
      return 0; //@line 6206
     } else {
      _emscripten_free_async_context($AsyncCtx23 | 0); //@line 6208
      break;
     }
    }
   } while (0);
   if ($99 | 0) {
    $$1 = 0; //@line 6215
    STACKTOP = sp; //@line 6216
    return $$1 | 0; //@line 6216
   }
   $AsyncCtx113 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6218
   _mbed_assert_internal(13588, 12372, 1180); //@line 6219
   if (___async) {
    HEAP32[$AsyncCtx113 >> 2] = 192; //@line 6222
    HEAP32[$AsyncCtx113 + 4 >> 2] = $1; //@line 6224
    sp = STACKTOP; //@line 6225
    STACKTOP = sp; //@line 6226
    return 0; //@line 6226
   }
   _emscripten_free_async_context($AsyncCtx113 | 0); //@line 6228
   $$1 = 0; //@line 6229
   STACKTOP = sp; //@line 6230
   return $$1 | 0; //@line 6230
  }
 case 3:
  {
   HEAP32[$1 >> 2] = 3; //@line 6234
   $113 = $1 + 4 | 0; //@line 6237
   HEAP32[$113 >> 2] = HEAP32[$0 + 1940 >> 2]; //@line 6238
   $114 = $0 + 4 | 0; //@line 6239
   $AsyncCtx71 = _emscripten_alloc_async_context(44, sp) | 0; //@line 6240
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($114, $1) | 0; //@line 6241
   if (___async) {
    HEAP32[$AsyncCtx71 >> 2] = 193; //@line 6244
    HEAP32[$AsyncCtx71 + 4 >> 2] = $vararg_buffer7; //@line 6246
    HEAP32[$AsyncCtx71 + 8 >> 2] = $vararg_buffer7; //@line 6248
    HEAP32[$AsyncCtx71 + 12 >> 2] = $0; //@line 6250
    HEAP32[$AsyncCtx71 + 16 >> 2] = $1; //@line 6252
    HEAP32[$AsyncCtx71 + 20 >> 2] = $4; //@line 6254
    HEAP32[$AsyncCtx71 + 24 >> 2] = $1; //@line 6256
    HEAP32[$AsyncCtx71 + 28 >> 2] = $113; //@line 6258
    HEAP32[$AsyncCtx71 + 32 >> 2] = $114; //@line 6260
    HEAP32[$AsyncCtx71 + 36 >> 2] = $1; //@line 6262
    HEAP32[$AsyncCtx71 + 40 >> 2] = $113; //@line 6264
    sp = STACKTOP; //@line 6265
    STACKTOP = sp; //@line 6266
    return 0; //@line 6266
   }
   _emscripten_free_async_context($AsyncCtx71 | 0); //@line 6268
   HEAP32[$1 >> 2] = 4; //@line 6269
   HEAP32[$113 >> 2] = HEAP32[$0 + 1944 >> 2]; //@line 6272
   $AsyncCtx67 = _emscripten_alloc_async_context(44, sp) | 0; //@line 6273
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($114, $1) | 0; //@line 6274
   if (___async) {
    HEAP32[$AsyncCtx67 >> 2] = 194; //@line 6277
    HEAP32[$AsyncCtx67 + 4 >> 2] = $vararg_buffer7; //@line 6279
    HEAP32[$AsyncCtx67 + 8 >> 2] = $vararg_buffer7; //@line 6281
    HEAP32[$AsyncCtx67 + 12 >> 2] = $0; //@line 6283
    HEAP32[$AsyncCtx67 + 16 >> 2] = $1; //@line 6285
    HEAP32[$AsyncCtx67 + 20 >> 2] = $4; //@line 6287
    HEAP32[$AsyncCtx67 + 24 >> 2] = $1; //@line 6289
    HEAP32[$AsyncCtx67 + 28 >> 2] = $113; //@line 6291
    HEAP32[$AsyncCtx67 + 32 >> 2] = $114; //@line 6293
    HEAP32[$AsyncCtx67 + 36 >> 2] = $1; //@line 6295
    HEAP32[$AsyncCtx67 + 40 >> 2] = $113; //@line 6297
    sp = STACKTOP; //@line 6298
    STACKTOP = sp; //@line 6299
    return 0; //@line 6299
   }
   _emscripten_free_async_context($AsyncCtx67 | 0); //@line 6301
   HEAP32[$1 >> 2] = 5; //@line 6302
   HEAP32[$113 >> 2] = HEAP32[$0 + 1948 >> 2]; //@line 6305
   $AsyncCtx63 = _emscripten_alloc_async_context(44, sp) | 0; //@line 6306
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($114, $1) | 0; //@line 6307
   if (___async) {
    HEAP32[$AsyncCtx63 >> 2] = 195; //@line 6310
    HEAP32[$AsyncCtx63 + 4 >> 2] = $vararg_buffer7; //@line 6312
    HEAP32[$AsyncCtx63 + 8 >> 2] = $vararg_buffer7; //@line 6314
    HEAP32[$AsyncCtx63 + 12 >> 2] = $0; //@line 6316
    HEAP32[$AsyncCtx63 + 16 >> 2] = $1; //@line 6318
    HEAP32[$AsyncCtx63 + 20 >> 2] = $4; //@line 6320
    HEAP32[$AsyncCtx63 + 24 >> 2] = $1; //@line 6322
    HEAP32[$AsyncCtx63 + 28 >> 2] = $113; //@line 6324
    HEAP32[$AsyncCtx63 + 32 >> 2] = $114; //@line 6326
    HEAP32[$AsyncCtx63 + 36 >> 2] = $1; //@line 6328
    HEAP32[$AsyncCtx63 + 40 >> 2] = $113; //@line 6330
    sp = STACKTOP; //@line 6331
    STACKTOP = sp; //@line 6332
    return 0; //@line 6332
   }
   _emscripten_free_async_context($AsyncCtx63 | 0); //@line 6334
   HEAP32[$1 >> 2] = 6; //@line 6335
   HEAP32[$113 >> 2] = HEAP32[$0 + 1952 >> 2]; //@line 6338
   $AsyncCtx59 = _emscripten_alloc_async_context(40, sp) | 0; //@line 6339
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($114, $1) | 0; //@line 6340
   if (___async) {
    HEAP32[$AsyncCtx59 >> 2] = 196; //@line 6343
    HEAP32[$AsyncCtx59 + 4 >> 2] = $1; //@line 6345
    HEAP32[$AsyncCtx59 + 8 >> 2] = $113; //@line 6347
    HEAP32[$AsyncCtx59 + 12 >> 2] = $114; //@line 6349
    HEAP32[$AsyncCtx59 + 16 >> 2] = $1; //@line 6351
    HEAP32[$AsyncCtx59 + 20 >> 2] = $vararg_buffer7; //@line 6353
    HEAP32[$AsyncCtx59 + 24 >> 2] = $vararg_buffer7; //@line 6355
    HEAP32[$AsyncCtx59 + 28 >> 2] = $0; //@line 6357
    HEAP32[$AsyncCtx59 + 32 >> 2] = $1; //@line 6359
    HEAP32[$AsyncCtx59 + 36 >> 2] = $4; //@line 6361
    sp = STACKTOP; //@line 6362
    STACKTOP = sp; //@line 6363
    return 0; //@line 6363
   }
   _emscripten_free_async_context($AsyncCtx59 | 0); //@line 6365
   HEAP32[$1 >> 2] = 1; //@line 6366
   HEAP8[$113 >> 0] = 1; //@line 6367
   $AsyncCtx55 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6368
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($114, $1) | 0; //@line 6369
   if (___async) {
    HEAP32[$AsyncCtx55 >> 2] = 197; //@line 6372
    HEAP32[$AsyncCtx55 + 4 >> 2] = $vararg_buffer7; //@line 6374
    HEAP32[$AsyncCtx55 + 8 >> 2] = $vararg_buffer7; //@line 6376
    HEAP32[$AsyncCtx55 + 12 >> 2] = $0; //@line 6378
    HEAP32[$AsyncCtx55 + 16 >> 2] = $1; //@line 6380
    HEAP32[$AsyncCtx55 + 20 >> 2] = $4; //@line 6382
    sp = STACKTOP; //@line 6383
    STACKTOP = sp; //@line 6384
    return 0; //@line 6384
   }
   _emscripten_free_async_context($AsyncCtx55 | 0); //@line 6386
   _mbed_tracef(16, 12332, 12664, $vararg_buffer7); //@line 6387
   HEAP8[$0 + 1932 >> 0] = 1; //@line 6389
   $166 = $0 + 1892 | 0; //@line 6390
   $167 = HEAP32[$166 >> 2] | 0; //@line 6391
   if (!$167) {
    $$1 = 0; //@line 6394
    STACKTOP = sp; //@line 6395
    return $$1 | 0; //@line 6395
   }
   $171 = HEAP32[$0 + 2288 >> 2] | 0; //@line 6399
   $173 = HEAP32[$167 + 4 >> 2] | 0; //@line 6401
   $AsyncCtx26 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6402
   FUNCTION_TABLE_vii[$173 & 31]($4, $0 + 1880 | 0); //@line 6403
   if (___async) {
    HEAP32[$AsyncCtx26 >> 2] = 198; //@line 6406
    HEAP32[$AsyncCtx26 + 4 >> 2] = $166; //@line 6408
    HEAP32[$AsyncCtx26 + 8 >> 2] = $4; //@line 6410
    HEAP32[$AsyncCtx26 + 12 >> 2] = $171; //@line 6412
    HEAP32[$AsyncCtx26 + 16 >> 2] = $4; //@line 6414
    HEAP32[$AsyncCtx26 + 20 >> 2] = $1; //@line 6416
    sp = STACKTOP; //@line 6417
    STACKTOP = sp; //@line 6418
    return 0; //@line 6418
   }
   _emscripten_free_async_context($AsyncCtx26 | 0); //@line 6420
   $179 = $4 + 12 | 0; //@line 6422
   HEAP32[$179 >> 2] = HEAP32[$166 >> 2]; //@line 6423
   $AsyncCtx91 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6424
   $180 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($171, $4, 0) | 0; //@line 6425
   if (___async) {
    HEAP32[$AsyncCtx91 >> 2] = 199; //@line 6428
    HEAP32[$AsyncCtx91 + 4 >> 2] = $179; //@line 6430
    HEAP32[$AsyncCtx91 + 8 >> 2] = $4; //@line 6432
    HEAP32[$AsyncCtx91 + 12 >> 2] = $1; //@line 6434
    sp = STACKTOP; //@line 6435
    STACKTOP = sp; //@line 6436
    return 0; //@line 6436
   }
   _emscripten_free_async_context($AsyncCtx91 | 0); //@line 6438
   $184 = HEAP32[$179 >> 2] | 0; //@line 6439
   do {
    if ($184 | 0) {
     $187 = HEAP32[$184 + 8 >> 2] | 0; //@line 6444
     $AsyncCtx30 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6445
     FUNCTION_TABLE_vi[$187 & 1023]($4); //@line 6446
     if (___async) {
      HEAP32[$AsyncCtx30 >> 2] = 200; //@line 6449
      HEAP32[$AsyncCtx30 + 4 >> 2] = $180; //@line 6451
      HEAP32[$AsyncCtx30 + 8 >> 2] = $1; //@line 6453
      sp = STACKTOP; //@line 6454
      STACKTOP = sp; //@line 6455
      return 0; //@line 6455
     } else {
      _emscripten_free_async_context($AsyncCtx30 | 0); //@line 6457
      break;
     }
    }
   } while (0);
   if ($180 | 0) {
    $$1 = 0; //@line 6464
    STACKTOP = sp; //@line 6465
    return $$1 | 0; //@line 6465
   }
   $AsyncCtx109 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6467
   _mbed_assert_internal(13588, 12372, 1217); //@line 6468
   if (___async) {
    HEAP32[$AsyncCtx109 >> 2] = 201; //@line 6471
    HEAP32[$AsyncCtx109 + 4 >> 2] = $1; //@line 6473
    sp = STACKTOP; //@line 6474
    STACKTOP = sp; //@line 6475
    return 0; //@line 6475
   }
   _emscripten_free_async_context($AsyncCtx109 | 0); //@line 6477
   $$1 = 0; //@line 6478
   STACKTOP = sp; //@line 6479
   return $$1 | 0; //@line 6479
  }
 case 5:
  {
   $192 = $0 + 1964 | 0; //@line 6483
   L108 : do {
    if (!(HEAP8[$192 >> 0] | 0)) {
     HEAP8[$192 >> 0] = 1; //@line 6488
     $AsyncCtx48 = _emscripten_alloc_async_context(48, sp) | 0; //@line 6489
     $195 = __ZN12LoRaWANStack17send_frame_to_macEv($0) | 0; //@line 6490
     if (___async) {
      HEAP32[$AsyncCtx48 >> 2] = 202; //@line 6493
      HEAP32[$AsyncCtx48 + 4 >> 2] = $7; //@line 6495
      HEAP32[$AsyncCtx48 + 8 >> 2] = $1; //@line 6497
      HEAP32[$AsyncCtx48 + 12 >> 2] = $6; //@line 6499
      HEAP32[$AsyncCtx48 + 16 >> 2] = $0; //@line 6501
      HEAP32[$AsyncCtx48 + 20 >> 2] = $vararg_buffer13; //@line 6503
      HEAP32[$AsyncCtx48 + 24 >> 2] = $vararg_buffer13; //@line 6505
      HEAP32[$AsyncCtx48 + 28 >> 2] = $5; //@line 6507
      HEAP32[$AsyncCtx48 + 32 >> 2] = $vararg_buffer11; //@line 6509
      HEAP32[$AsyncCtx48 + 36 >> 2] = $vararg_buffer11; //@line 6511
      HEAP32[$AsyncCtx48 + 40 >> 2] = $vararg_buffer9; //@line 6513
      HEAP32[$AsyncCtx48 + 44 >> 2] = $vararg_buffer9; //@line 6515
      sp = STACKTOP; //@line 6516
      STACKTOP = sp; //@line 6517
      return 0; //@line 6517
     }
     _emscripten_free_async_context($AsyncCtx48 | 0); //@line 6519
     switch ($195 | 0) {
     case 0:
      {
       _mbed_tracef(16, 12332, 12683, $vararg_buffer9); //@line 6522
       $$029 = 0; //@line 6523
       break L108;
       break;
      }
     case -1014:
      {
       _mbed_tracef(2, 12332, 12707, $vararg_buffer11); //@line 6528
       $207 = $0 + 1892 | 0; //@line 6529
       $208 = HEAP32[$207 >> 2] | 0; //@line 6530
       if (!$208) {
        $$029 = -1014; //@line 6533
        break L108;
       }
       $212 = HEAP32[$0 + 2288 >> 2] | 0; //@line 6538
       $214 = HEAP32[$208 + 4 >> 2] | 0; //@line 6540
       $AsyncCtx33 = _emscripten_alloc_async_context(28, sp) | 0; //@line 6541
       FUNCTION_TABLE_vii[$214 & 31]($5, $0 + 1880 | 0); //@line 6542
       if (___async) {
        HEAP32[$AsyncCtx33 >> 2] = 203; //@line 6545
        HEAP32[$AsyncCtx33 + 4 >> 2] = $207; //@line 6547
        HEAP32[$AsyncCtx33 + 8 >> 2] = $5; //@line 6549
        HEAP32[$AsyncCtx33 + 12 >> 2] = $212; //@line 6551
        HEAP32[$AsyncCtx33 + 16 >> 2] = $5; //@line 6553
        HEAP32[$AsyncCtx33 + 20 >> 2] = $7; //@line 6555
        HEAP32[$AsyncCtx33 + 24 >> 2] = $1; //@line 6557
        sp = STACKTOP; //@line 6558
        STACKTOP = sp; //@line 6559
        return 0; //@line 6559
       }
       _emscripten_free_async_context($AsyncCtx33 | 0); //@line 6561
       $221 = $5 + 12 | 0; //@line 6563
       HEAP32[$221 >> 2] = HEAP32[$207 >> 2]; //@line 6564
       $AsyncCtx88 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6565
       $222 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($212, $5, 5) | 0; //@line 6566
       if (___async) {
        HEAP32[$AsyncCtx88 >> 2] = 204; //@line 6569
        HEAP32[$AsyncCtx88 + 4 >> 2] = $221; //@line 6571
        HEAP32[$AsyncCtx88 + 8 >> 2] = $5; //@line 6573
        HEAP32[$AsyncCtx88 + 12 >> 2] = $7; //@line 6575
        HEAP32[$AsyncCtx88 + 16 >> 2] = $1; //@line 6577
        sp = STACKTOP; //@line 6578
        STACKTOP = sp; //@line 6579
        return 0; //@line 6579
       }
       _emscripten_free_async_context($AsyncCtx88 | 0); //@line 6581
       $227 = HEAP32[$221 >> 2] | 0; //@line 6582
       do {
        if ($227 | 0) {
         $230 = HEAP32[$227 + 8 >> 2] | 0; //@line 6587
         $AsyncCtx37 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6588
         FUNCTION_TABLE_vi[$230 & 1023]($5); //@line 6589
         if (___async) {
          HEAP32[$AsyncCtx37 >> 2] = 205; //@line 6592
          HEAP32[$AsyncCtx37 + 4 >> 2] = $222; //@line 6594
          HEAP32[$AsyncCtx37 + 8 >> 2] = $7; //@line 6596
          HEAP32[$AsyncCtx37 + 12 >> 2] = $1; //@line 6598
          sp = STACKTOP; //@line 6599
          STACKTOP = sp; //@line 6600
          return 0; //@line 6600
         } else {
          _emscripten_free_async_context($AsyncCtx37 | 0); //@line 6602
          break;
         }
        }
       } while (0);
       if ($222 | 0) {
        $$029 = -1014; //@line 6609
        break L108;
       }
       $AsyncCtx105 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6612
       _mbed_assert_internal(13588, 12372, 1237); //@line 6613
       if (___async) {
        HEAP32[$AsyncCtx105 >> 2] = 206; //@line 6616
        HEAP32[$AsyncCtx105 + 4 >> 2] = $7; //@line 6618
        HEAP32[$AsyncCtx105 + 8 >> 2] = $1; //@line 6620
        sp = STACKTOP; //@line 6621
        STACKTOP = sp; //@line 6622
        return 0; //@line 6622
       } else {
        _emscripten_free_async_context($AsyncCtx105 | 0); //@line 6624
        $$029 = -1014; //@line 6625
        break L108;
       }
       break;
      }
     default:
      {
       _mbed_tracef(2, 12332, 12742, $vararg_buffer13); //@line 6631
       $237 = $0 + 1892 | 0; //@line 6632
       $238 = HEAP32[$237 >> 2] | 0; //@line 6633
       if (!$238) {
        $$029 = $195; //@line 6636
        break L108;
       }
       $242 = HEAP32[$0 + 2288 >> 2] | 0; //@line 6641
       $244 = HEAP32[$238 + 4 >> 2] | 0; //@line 6643
       $AsyncCtx40 = _emscripten_alloc_async_context(32, sp) | 0; //@line 6644
       FUNCTION_TABLE_vii[$244 & 31]($6, $0 + 1880 | 0); //@line 6645
       if (___async) {
        HEAP32[$AsyncCtx40 >> 2] = 207; //@line 6648
        HEAP32[$AsyncCtx40 + 4 >> 2] = $237; //@line 6650
        HEAP32[$AsyncCtx40 + 8 >> 2] = $6; //@line 6652
        HEAP32[$AsyncCtx40 + 12 >> 2] = $242; //@line 6654
        HEAP32[$AsyncCtx40 + 16 >> 2] = $6; //@line 6656
        HEAP32[$AsyncCtx40 + 20 >> 2] = $195; //@line 6658
        HEAP32[$AsyncCtx40 + 24 >> 2] = $7; //@line 6660
        HEAP32[$AsyncCtx40 + 28 >> 2] = $1; //@line 6662
        sp = STACKTOP; //@line 6663
        STACKTOP = sp; //@line 6664
        return 0; //@line 6664
       }
       _emscripten_free_async_context($AsyncCtx40 | 0); //@line 6666
       $252 = $6 + 12 | 0; //@line 6668
       HEAP32[$252 >> 2] = HEAP32[$237 >> 2]; //@line 6669
       $AsyncCtx85 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6670
       $253 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($242, $6, 6) | 0; //@line 6671
       if (___async) {
        HEAP32[$AsyncCtx85 >> 2] = 208; //@line 6674
        HEAP32[$AsyncCtx85 + 4 >> 2] = $252; //@line 6676
        HEAP32[$AsyncCtx85 + 8 >> 2] = $6; //@line 6678
        HEAP32[$AsyncCtx85 + 12 >> 2] = $195; //@line 6680
        HEAP32[$AsyncCtx85 + 16 >> 2] = $7; //@line 6682
        HEAP32[$AsyncCtx85 + 20 >> 2] = $1; //@line 6684
        sp = STACKTOP; //@line 6685
        STACKTOP = sp; //@line 6686
        return 0; //@line 6686
       }
       _emscripten_free_async_context($AsyncCtx85 | 0); //@line 6688
       $259 = HEAP32[$252 >> 2] | 0; //@line 6689
       do {
        if ($259 | 0) {
         $262 = HEAP32[$259 + 8 >> 2] | 0; //@line 6694
         $AsyncCtx44 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6695
         FUNCTION_TABLE_vi[$262 & 1023]($6); //@line 6696
         if (___async) {
          HEAP32[$AsyncCtx44 >> 2] = 209; //@line 6699
          HEAP32[$AsyncCtx44 + 4 >> 2] = $253; //@line 6701
          HEAP32[$AsyncCtx44 + 8 >> 2] = $195; //@line 6703
          HEAP32[$AsyncCtx44 + 12 >> 2] = $7; //@line 6705
          HEAP32[$AsyncCtx44 + 16 >> 2] = $1; //@line 6707
          sp = STACKTOP; //@line 6708
          STACKTOP = sp; //@line 6709
          return 0; //@line 6709
         } else {
          _emscripten_free_async_context($AsyncCtx44 | 0); //@line 6711
          break;
         }
        }
       } while (0);
       if ($253 | 0) {
        $$029 = $195; //@line 6718
        break L108;
       }
       $AsyncCtx101 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6721
       _mbed_assert_internal(13588, 12372, 1245); //@line 6722
       if (___async) {
        HEAP32[$AsyncCtx101 >> 2] = 210; //@line 6725
        HEAP32[$AsyncCtx101 + 4 >> 2] = $195; //@line 6727
        HEAP32[$AsyncCtx101 + 8 >> 2] = $7; //@line 6729
        HEAP32[$AsyncCtx101 + 12 >> 2] = $1; //@line 6731
        sp = STACKTOP; //@line 6732
        STACKTOP = sp; //@line 6733
        return 0; //@line 6733
       } else {
        _emscripten_free_async_context($AsyncCtx101 | 0); //@line 6735
        $$029 = $195; //@line 6736
        break L108;
       }
      }
     }
    } else {
     $$029 = 0; //@line 6742
    }
   } while (0);
   HEAP32[$7 >> 2] = 6; //@line 6745
   $$1 = $$029; //@line 6746
   STACKTOP = sp; //@line 6747
   return $$1 | 0; //@line 6747
  }
 case 6:
  {
   $$1 = -1018; //@line 6751
   STACKTOP = sp; //@line 6752
   return $$1 | 0; //@line 6752
  }
 case 0:
  {
   $$1 = -1011; //@line 6756
   STACKTOP = sp; //@line 6757
   return $$1 | 0; //@line 6757
  }
 default:
  {
   $$1 = -1002; //@line 6761
   STACKTOP = sp; //@line 6762
   return $$1 | 0; //@line 6762
  }
 }
 return 0; //@line 6765
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy85 = 0, $$pre20 = 0, $1 = 0, $107 = 0, $112 = 0, $118 = 0, $124 = 0, $131 = 0, $132 = 0, $15 = 0, $16 = 0, $161 = 0, $172 = 0, $176 = 0, $180 = 0, $185 = 0, $19 = 0, $191 = 0, $192 = 0, $197 = 0, $2 = 0, $201 = 0, $204 = 0, $220 = 0, $228 = 0, $232 = 0, $238 = 0, $241 = 0, $244 = 0, $25 = 0, $260 = 0, $263 = 0, $269 = 0, $272 = 0, $275 = 0, $277 = 0, $278 = 0, $283 = 0, $285 = 0, $286 = 0, $287 = 0, $299 = 0, $3 = 0, $300 = 0, $309 = 0, $313 = 0, $314 = 0, $316 = 0, $317 = 0, $318 = 0, $330 = 0, $331 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $354 = 0, $356 = 0, $361 = 0, $362 = 0, $372 = 0, $375 = 0, $376 = 0, $378 = 0, $379 = 0, $380 = 0, $387 = 0, $388 = 0, $39 = 0, $391 = 0, $392 = 0, $394 = 0, $398 = 0, $399 = 0, $4 = 0, $401 = 0, $402 = 0, $403 = 0, $408 = 0, $409 = 0, $47 = 0, $50 = 0, $55 = 0, $59 = 0, $60 = 0, $80 = 0, $81 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx21 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx33 = 0, $AsyncCtx37 = 0, $AsyncCtx4 = 0, $AsyncCtx41 = 0, $AsyncCtx45 = 0, $AsyncCtx49 = 0, $AsyncCtx53 = 0, $AsyncCtx57 = 0, $AsyncCtx61 = 0, $AsyncCtx65 = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12911
 STACKTOP = STACKTOP + 32 | 0; //@line 12912
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 12912
 $$byval_copy85 = sp + 24 | 0; //@line 12913
 $vararg_buffer1 = sp + 8 | 0; //@line 12914
 $vararg_buffer = sp; //@line 12915
 $1 = sp + 16 | 0; //@line 12916
 $2 = $0 + 356 | 0; //@line 12917
 $3 = HEAP32[$2 >> 2] | 0; //@line 12918
 $4 = $0 + 996 | 0; //@line 12919
 $AsyncCtx37 = _emscripten_alloc_async_context(44, sp) | 0; //@line 12920
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($3, $4); //@line 12921
 if (___async) {
  HEAP32[$AsyncCtx37 >> 2] = 376; //@line 12924
  HEAP32[$AsyncCtx37 + 4 >> 2] = $0; //@line 12926
  HEAP32[$AsyncCtx37 + 8 >> 2] = $vararg_buffer; //@line 12928
  HEAP32[$AsyncCtx37 + 12 >> 2] = $vararg_buffer; //@line 12930
  HEAP32[$AsyncCtx37 + 16 >> 2] = $1; //@line 12932
  HEAP32[$AsyncCtx37 + 20 >> 2] = $vararg_buffer1; //@line 12934
  HEAP32[$AsyncCtx37 + 24 >> 2] = $vararg_buffer1; //@line 12936
  HEAP32[$AsyncCtx37 + 28 >> 2] = $2; //@line 12938
  HEAP32[$AsyncCtx37 + 32 >> 2] = $4; //@line 12940
  HEAP32[$AsyncCtx37 + 36 >> 2] = $1; //@line 12942
  HEAP32[$AsyncCtx37 + 40 >> 2] = $1; //@line 12944
  sp = STACKTOP; //@line 12945
  STACKTOP = sp; //@line 12946
  return;
 }
 _emscripten_free_async_context($AsyncCtx37 | 0); //@line 12948
 $15 = $0 + 944 | 0; //@line 12949
 $16 = HEAP8[$15 >> 0] | 0; //@line 12950
 $$pre20 = $0 + 968 | 0; //@line 12953
 do {
  if ($16 & 32) {
   $19 = HEAP32[$$pre20 >> 2] | 0; //@line 12956
   if ($19 & 64 | 0) {
    HEAP32[$$pre20 >> 2] = $19 & -66; //@line 12961
   }
   do {
    if (!($16 & 9)) {
     label = 10; //@line 12967
    } else {
     $25 = $0 + 288 | 0; //@line 12969
     if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($25) | 0) + 4 >> 2] | 0) != 2) {
      if ((HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] | 0) != 2) {
       label = 10; //@line 12981
       break;
      }
     }
     HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 12987
     __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 4 | 0); //@line 12989
     $39 = HEAP8[$0 + 895 >> 0] | 0; //@line 12991
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($25) | 0) + 11 >> 0] = $39; //@line 12994
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($25) | 0) + 10 >> 0] = 0; //@line 12997
     HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($25) | 0) + 12 >> 2] = 0; //@line 13000
     $172 = $0 + 373 | 0; //@line 13002
    }
   } while (0);
   do {
    if ((label | 0) == 10) {
     $47 = $0 + 373 | 0; //@line 13007
     if (!(HEAP8[$47 >> 0] | 0)) {
      $50 = HEAP8[$15 >> 0] | 0; //@line 13011
      if (!($50 & 9)) {
       $172 = $47; //@line 13015
      } else {
       if ($50 & 8) {
        $55 = $0 + 264 | 0; //@line 13020
        if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($55) | 0) >> 2] | 0)) {
         $59 = $0 + 897 | 0; //@line 13025
         $60 = HEAP8[$59 >> 0] | 0; //@line 13026
         HEAP8[(__ZN11LoRaMacMlme16get_confirmationEv($55) | 0) + 14 >> 0] = $60; //@line 13029
         if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($55) | 0) + 4 >> 2] | 0)) {
          HEAP32[$0 + 956 >> 2] = 0; //@line 13036
          HEAP8[$0 + 380 >> 0] = 0; //@line 13038
          HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 13041
          $172 = $47; //@line 13042
          break;
         }
         if ((HEAPU8[$59 >> 0] | 0) >= (HEAPU8[$0 + 896 >> 0] | 0)) {
          HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 13052
          $172 = $47; //@line 13053
          break;
         }
         HEAP8[$15 >> 0] = HEAP8[$15 >> 0] & -33; //@line 13058
         $80 = HEAP32[$0 + 1328 >> 2] | 0; //@line 13060
         HEAP32[$1 >> 2] = 377; //@line 13061
         HEAP32[$1 + 4 >> 2] = 0; //@line 13063
         $AsyncCtx33 = _emscripten_alloc_async_context(52, sp) | 0; //@line 13064
         HEAP32[$$byval_copy85 >> 2] = HEAP32[$1 >> 2]; //@line 13065
         HEAP32[$$byval_copy85 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 13065
         $81 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($80, $0, $$byval_copy85) | 0; //@line 13066
         if (___async) {
          HEAP32[$AsyncCtx33 >> 2] = 378; //@line 13069
          HEAP32[$AsyncCtx33 + 4 >> 2] = $15; //@line 13071
          HEAP32[$AsyncCtx33 + 8 >> 2] = $0; //@line 13073
          HEAP32[$AsyncCtx33 + 12 >> 2] = $$pre20; //@line 13075
          HEAP32[$AsyncCtx33 + 16 >> 2] = $vararg_buffer; //@line 13077
          HEAP32[$AsyncCtx33 + 20 >> 2] = $vararg_buffer; //@line 13079
          HEAP32[$AsyncCtx33 + 24 >> 2] = $1; //@line 13081
          HEAP32[$AsyncCtx33 + 28 >> 2] = $vararg_buffer1; //@line 13083
          HEAP32[$AsyncCtx33 + 32 >> 2] = $vararg_buffer1; //@line 13085
          HEAP32[$AsyncCtx33 + 36 >> 2] = $2; //@line 13087
          HEAP32[$AsyncCtx33 + 40 >> 2] = $4; //@line 13089
          HEAP32[$AsyncCtx33 + 44 >> 2] = $1; //@line 13091
          HEAP32[$AsyncCtx33 + 48 >> 2] = $47; //@line 13093
          sp = STACKTOP; //@line 13094
          STACKTOP = sp; //@line 13095
          return;
         }
         _emscripten_free_async_context($AsyncCtx33 | 0); //@line 13097
         do {
          if (!$81) {
           $AsyncCtx65 = _emscripten_alloc_async_context(52, sp) | 0; //@line 13101
           _mbed_assert_internal(13588, 13597, 192); //@line 13102
           if (___async) {
            HEAP32[$AsyncCtx65 >> 2] = 379; //@line 13105
            HEAP32[$AsyncCtx65 + 4 >> 2] = $15; //@line 13107
            HEAP32[$AsyncCtx65 + 8 >> 2] = $0; //@line 13109
            HEAP32[$AsyncCtx65 + 12 >> 2] = $$pre20; //@line 13111
            HEAP32[$AsyncCtx65 + 16 >> 2] = $vararg_buffer; //@line 13113
            HEAP32[$AsyncCtx65 + 20 >> 2] = $vararg_buffer; //@line 13115
            HEAP32[$AsyncCtx65 + 24 >> 2] = $1; //@line 13117
            HEAP32[$AsyncCtx65 + 28 >> 2] = $vararg_buffer1; //@line 13119
            HEAP32[$AsyncCtx65 + 32 >> 2] = $vararg_buffer1; //@line 13121
            HEAP32[$AsyncCtx65 + 36 >> 2] = $2; //@line 13123
            HEAP32[$AsyncCtx65 + 40 >> 2] = $4; //@line 13125
            HEAP32[$AsyncCtx65 + 44 >> 2] = $1; //@line 13127
            HEAP32[$AsyncCtx65 + 48 >> 2] = $47; //@line 13129
            sp = STACKTOP; //@line 13130
            STACKTOP = sp; //@line 13131
            return;
           } else {
            _emscripten_free_async_context($AsyncCtx65 | 0); //@line 13133
            break;
           }
          }
         } while (0);
         $172 = $47; //@line 13138
         break;
        }
       }
       $107 = $0 + 380 | 0; //@line 13142
       $112 = HEAP8[$15 >> 0] | 0; //@line 13147
       if (!(($112 & 2) == 0 ? (HEAPU8[$107 >> 0] | 0) < (HEAPU8[$0 + 1128 >> 0] | 0) : 0)) {
        if (!($112 & 2)) {
         __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 4 | 0); //@line 13156
         $118 = $0 + 964 | 0; //@line 13157
         HEAP32[$118 >> 2] = (HEAP32[$118 >> 2] | 0) + 1; //@line 13160
        }
        HEAP8[$107 >> 0] = 0; //@line 13162
        if (!(HEAP8[$0 + 370 >> 0] | 0)) {
         $124 = $0 + 956 | 0; //@line 13167
         HEAP32[$124 >> 2] = (HEAP32[$124 >> 2] | 0) + 1; //@line 13170
        }
        HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 13174
        $172 = $47; //@line 13175
        break;
       }
       HEAP8[$15 >> 0] = $112 & -33; //@line 13179
       $131 = HEAP32[$0 + 1328 >> 2] | 0; //@line 13181
       HEAP32[$1 >> 2] = 377; //@line 13182
       HEAP32[$1 + 4 >> 2] = 0; //@line 13184
       $AsyncCtx29 = _emscripten_alloc_async_context(52, sp) | 0; //@line 13185
       HEAP32[$$byval_copy85 >> 2] = HEAP32[$1 >> 2]; //@line 13186
       HEAP32[$$byval_copy85 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 13186
       $132 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($131, $0, $$byval_copy85) | 0; //@line 13187
       if (___async) {
        HEAP32[$AsyncCtx29 >> 2] = 380; //@line 13190
        HEAP32[$AsyncCtx29 + 4 >> 2] = $15; //@line 13192
        HEAP32[$AsyncCtx29 + 8 >> 2] = $0; //@line 13194
        HEAP32[$AsyncCtx29 + 12 >> 2] = $$pre20; //@line 13196
        HEAP32[$AsyncCtx29 + 16 >> 2] = $vararg_buffer; //@line 13198
        HEAP32[$AsyncCtx29 + 20 >> 2] = $vararg_buffer; //@line 13200
        HEAP32[$AsyncCtx29 + 24 >> 2] = $1; //@line 13202
        HEAP32[$AsyncCtx29 + 28 >> 2] = $vararg_buffer1; //@line 13204
        HEAP32[$AsyncCtx29 + 32 >> 2] = $vararg_buffer1; //@line 13206
        HEAP32[$AsyncCtx29 + 36 >> 2] = $2; //@line 13208
        HEAP32[$AsyncCtx29 + 40 >> 2] = $4; //@line 13210
        HEAP32[$AsyncCtx29 + 44 >> 2] = $47; //@line 13212
        HEAP32[$AsyncCtx29 + 48 >> 2] = $1; //@line 13214
        sp = STACKTOP; //@line 13215
        STACKTOP = sp; //@line 13216
        return;
       }
       _emscripten_free_async_context($AsyncCtx29 | 0); //@line 13218
       do {
        if (!$132) {
         $AsyncCtx61 = _emscripten_alloc_async_context(52, sp) | 0; //@line 13222
         _mbed_assert_internal(13588, 13597, 192); //@line 13223
         if (___async) {
          HEAP32[$AsyncCtx61 >> 2] = 381; //@line 13226
          HEAP32[$AsyncCtx61 + 4 >> 2] = $15; //@line 13228
          HEAP32[$AsyncCtx61 + 8 >> 2] = $0; //@line 13230
          HEAP32[$AsyncCtx61 + 12 >> 2] = $$pre20; //@line 13232
          HEAP32[$AsyncCtx61 + 16 >> 2] = $vararg_buffer; //@line 13234
          HEAP32[$AsyncCtx61 + 20 >> 2] = $vararg_buffer; //@line 13236
          HEAP32[$AsyncCtx61 + 24 >> 2] = $1; //@line 13238
          HEAP32[$AsyncCtx61 + 28 >> 2] = $vararg_buffer1; //@line 13240
          HEAP32[$AsyncCtx61 + 32 >> 2] = $vararg_buffer1; //@line 13242
          HEAP32[$AsyncCtx61 + 36 >> 2] = $2; //@line 13244
          HEAP32[$AsyncCtx61 + 40 >> 2] = $4; //@line 13246
          HEAP32[$AsyncCtx61 + 44 >> 2] = $47; //@line 13248
          HEAP32[$AsyncCtx61 + 48 >> 2] = $1; //@line 13250
          sp = STACKTOP; //@line 13251
          STACKTOP = sp; //@line 13252
          return;
         } else {
          _emscripten_free_async_context($AsyncCtx61 | 0); //@line 13254
          break;
         }
        }
       } while (0);
       $172 = $47; //@line 13259
      }
     } else {
      $172 = $47; //@line 13262
     }
    }
   } while (0);
   do {
    if (HEAP8[$15 >> 0] & 2) {
     $161 = $0 + 288 | 0; //@line 13271
     if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($161) | 0) + 10 >> 0] | 0)) {
      if ((HEAPU8[$0 + 895 >> 0] | 0) <= (HEAPU8[$0 + 894 >> 0] | 0)) {
       break;
      }
     }
     HEAP8[$0 + 377 >> 0] = 0; //@line 13287
     HEAP8[$172 >> 0] = 0; //@line 13288
     if (!(HEAP8[$0 + 370 >> 0] | 0)) {
      $176 = $0 + 956 | 0; //@line 13293
      HEAP32[$176 >> 2] = (HEAP32[$176 >> 2] | 0) + 1; //@line 13296
     }
     $180 = HEAP8[$0 + 895 >> 0] | 0; //@line 13299
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($161) | 0) + 11 >> 0] = $180; //@line 13302
     HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 13305
    }
   } while (0);
   $185 = $0 + 377 | 0; //@line 13308
   if (HEAP8[$185 >> 0] | 0) {
    if (!(HEAP32[$$pre20 >> 2] & 16)) {
     HEAP8[$185 >> 0] = 0; //@line 13316
     $191 = $0 + 895 | 0; //@line 13317
     $192 = HEAP8[$191 >> 0] | 0; //@line 13318
     if (!(($192 & 255) < 9 ? ($192 & 255) < (HEAPU8[$0 + 894 >> 0] | 0) : 0)) {
      $241 = HEAP32[$0 >> 2] | 0; //@line 13325
      $244 = HEAP32[(HEAP32[$241 >> 2] | 0) + 16 >> 2] | 0; //@line 13328
      $AsyncCtx = _emscripten_alloc_async_context(52, sp) | 0; //@line 13329
      FUNCTION_TABLE_vi[$244 & 1023]($241); //@line 13330
      if (___async) {
       HEAP32[$AsyncCtx >> 2] = 383; //@line 13333
       HEAP32[$AsyncCtx + 4 >> 2] = $15; //@line 13335
       HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 13337
       HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 13339
       HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 13341
       HEAP32[$AsyncCtx + 20 >> 2] = $$pre20; //@line 13343
       HEAP32[$AsyncCtx + 24 >> 2] = $172; //@line 13345
       HEAP32[$AsyncCtx + 28 >> 2] = $191; //@line 13347
       HEAP32[$AsyncCtx + 32 >> 2] = $2; //@line 13349
       HEAP32[$AsyncCtx + 36 >> 2] = $4; //@line 13351
       HEAP32[$AsyncCtx + 40 >> 2] = $1; //@line 13353
       HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer1; //@line 13355
       HEAP32[$AsyncCtx + 48 >> 2] = $vararg_buffer1; //@line 13357
       sp = STACKTOP; //@line 13358
       STACKTOP = sp; //@line 13359
       return;
      }
      _emscripten_free_async_context($AsyncCtx | 0); //@line 13361
      HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 13364
      __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 4 | 0); //@line 13366
      HEAP8[$172 >> 0] = 0; //@line 13367
      $260 = $0 + 288 | 0; //@line 13368
      HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($260) | 0) + 10 >> 0] = 0; //@line 13371
      $263 = HEAP8[$191 >> 0] | 0; //@line 13372
      HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($260) | 0) + 11 >> 0] = $263; //@line 13375
      if (HEAP8[$0 + 370 >> 0] | 0) {
       break;
      }
      $269 = $0 + 956 | 0; //@line 13382
      HEAP32[$269 >> 2] = (HEAP32[$269 >> 2] | 0) + 1; //@line 13385
      break;
     }
     $197 = $192 + 1 << 24 >> 24; //@line 13388
     HEAP8[$191 >> 0] = $197; //@line 13389
     if ($197 & 1) {
      $201 = $0 + 1097 | 0; //@line 13394
      HEAP8[$201 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$0 >> 2] | 0, HEAP8[$201 >> 0] | 0) | 0; //@line 13397
     }
     $AsyncCtx21 = _emscripten_alloc_async_context(52, sp) | 0; //@line 13399
     $204 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 13400
     if (___async) {
      HEAP32[$AsyncCtx21 >> 2] = 382; //@line 13403
      HEAP32[$AsyncCtx21 + 4 >> 2] = $15; //@line 13405
      HEAP32[$AsyncCtx21 + 8 >> 2] = $vararg_buffer; //@line 13407
      HEAP32[$AsyncCtx21 + 12 >> 2] = $vararg_buffer; //@line 13409
      HEAP32[$AsyncCtx21 + 16 >> 2] = $0; //@line 13411
      HEAP32[$AsyncCtx21 + 20 >> 2] = $$pre20; //@line 13413
      HEAP32[$AsyncCtx21 + 24 >> 2] = $172; //@line 13415
      HEAP32[$AsyncCtx21 + 28 >> 2] = $191; //@line 13417
      HEAP32[$AsyncCtx21 + 32 >> 2] = $1; //@line 13419
      HEAP32[$AsyncCtx21 + 36 >> 2] = $vararg_buffer1; //@line 13421
      HEAP32[$AsyncCtx21 + 40 >> 2] = $vararg_buffer1; //@line 13423
      HEAP32[$AsyncCtx21 + 44 >> 2] = $2; //@line 13425
      HEAP32[$AsyncCtx21 + 48 >> 2] = $4; //@line 13427
      sp = STACKTOP; //@line 13428
      STACKTOP = sp; //@line 13429
      return;
     }
     _emscripten_free_async_context($AsyncCtx21 | 0); //@line 13431
     if (!$204) {
      HEAP8[$15 >> 0] = HEAP8[$15 >> 0] & -33; //@line 13436
      break;
     }
     $220 = $0 + 288 | 0; //@line 13439
     HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($220) | 0) + 4 >> 2] = 9; //@line 13442
     __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 4 | 0); //@line 13444
     HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 13447
     HEAP8[$172 >> 0] = 0; //@line 13448
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($220) | 0) + 10 >> 0] = 0; //@line 13451
     $228 = HEAP8[$191 >> 0] | 0; //@line 13452
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($220) | 0) + 11 >> 0] = $228; //@line 13455
     $232 = HEAP8[$0 + 1097 >> 0] | 0; //@line 13457
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($220) | 0) + 8 >> 0] = $232; //@line 13460
     if (!(HEAP8[$0 + 370 >> 0] | 0)) {
      $238 = $0 + 956 | 0; //@line 13465
      HEAP32[$238 >> 2] = (HEAP32[$238 >> 2] | 0) + 1; //@line 13468
     }
    }
   }
  }
 } while (0);
 $272 = HEAP32[$$pre20 >> 2] | 0; //@line 13474
 $275 = $272 & -3; //@line 13477
 if (!($272 & 2)) {
  $277 = $272; //@line 13479
 } else {
  HEAP32[$$pre20 >> 2] = $275; //@line 13481
  $277 = $275; //@line 13482
 }
 do {
  if (!$277) {
   $278 = HEAP8[$15 >> 0] | 0; //@line 13487
   do {
    if (!($278 & 1)) {
     $309 = $278; //@line 13492
    } else {
     HEAP8[$15 >> 0] = $278 & -2; //@line 13495
     $283 = HEAP32[$0 + 1324 >> 2] | 0; //@line 13497
     $285 = __ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0; //@line 13499
     $286 = $283 + 12 | 0; //@line 13500
     $287 = HEAP32[$286 >> 2] | 0; //@line 13501
     do {
      if (!$287) {
       $AsyncCtx57 = _emscripten_alloc_async_context(44, sp) | 0; //@line 13505
       _mbed_assert_internal(15615, 15620, 1102); //@line 13506
       if (___async) {
        HEAP32[$AsyncCtx57 >> 2] = 384; //@line 13509
        HEAP32[$AsyncCtx57 + 4 >> 2] = $15; //@line 13511
        HEAP32[$AsyncCtx57 + 8 >> 2] = $0; //@line 13513
        HEAP32[$AsyncCtx57 + 12 >> 2] = $286; //@line 13515
        HEAP32[$AsyncCtx57 + 16 >> 2] = $283; //@line 13517
        HEAP32[$AsyncCtx57 + 20 >> 2] = $285; //@line 13519
        HEAP32[$AsyncCtx57 + 24 >> 2] = $1; //@line 13521
        HEAP32[$AsyncCtx57 + 28 >> 2] = $vararg_buffer1; //@line 13523
        HEAP32[$AsyncCtx57 + 32 >> 2] = $vararg_buffer1; //@line 13525
        HEAP32[$AsyncCtx57 + 36 >> 2] = $vararg_buffer; //@line 13527
        HEAP32[$AsyncCtx57 + 40 >> 2] = $vararg_buffer; //@line 13529
        sp = STACKTOP; //@line 13530
        STACKTOP = sp; //@line 13531
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx57 | 0); //@line 13533
        $300 = HEAP32[$286 >> 2] | 0; //@line 13535
        break;
       }
      } else {
       $300 = $287; //@line 13539
      }
     } while (0);
     $299 = HEAP32[$300 >> 2] | 0; //@line 13542
     $AsyncCtx4 = _emscripten_alloc_async_context(32, sp) | 0; //@line 13543
     FUNCTION_TABLE_vii[$299 & 31]($283, $285); //@line 13544
     if (___async) {
      HEAP32[$AsyncCtx4 >> 2] = 385; //@line 13547
      HEAP32[$AsyncCtx4 + 4 >> 2] = $15; //@line 13549
      HEAP32[$AsyncCtx4 + 8 >> 2] = $0; //@line 13551
      HEAP32[$AsyncCtx4 + 12 >> 2] = $1; //@line 13553
      HEAP32[$AsyncCtx4 + 16 >> 2] = $vararg_buffer1; //@line 13555
      HEAP32[$AsyncCtx4 + 20 >> 2] = $vararg_buffer1; //@line 13557
      HEAP32[$AsyncCtx4 + 24 >> 2] = $vararg_buffer; //@line 13559
      HEAP32[$AsyncCtx4 + 28 >> 2] = $vararg_buffer; //@line 13561
      sp = STACKTOP; //@line 13562
      STACKTOP = sp; //@line 13563
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx4 | 0); //@line 13565
      $309 = HEAP8[$15 >> 0] | 0; //@line 13567
      break;
     }
    }
   } while (0);
   do {
    if ($309 & 8) {
     HEAP8[$15 >> 0] = $309 & -9; //@line 13577
     $313 = HEAP32[$0 + 1324 >> 2] | 0; //@line 13579
     $314 = $313 + 32 | 0; //@line 13580
     $316 = __ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0; //@line 13582
     $317 = $313 + 44 | 0; //@line 13583
     $318 = HEAP32[$317 >> 2] | 0; //@line 13584
     do {
      if (!$318) {
       $AsyncCtx53 = _emscripten_alloc_async_context(44, sp) | 0; //@line 13588
       _mbed_assert_internal(15615, 15620, 1102); //@line 13589
       if (___async) {
        HEAP32[$AsyncCtx53 >> 2] = 386; //@line 13592
        HEAP32[$AsyncCtx53 + 4 >> 2] = $15; //@line 13594
        HEAP32[$AsyncCtx53 + 8 >> 2] = $0; //@line 13596
        HEAP32[$AsyncCtx53 + 12 >> 2] = $314; //@line 13598
        HEAP32[$AsyncCtx53 + 16 >> 2] = $316; //@line 13600
        HEAP32[$AsyncCtx53 + 20 >> 2] = $1; //@line 13602
        HEAP32[$AsyncCtx53 + 24 >> 2] = $vararg_buffer1; //@line 13604
        HEAP32[$AsyncCtx53 + 28 >> 2] = $vararg_buffer1; //@line 13606
        HEAP32[$AsyncCtx53 + 32 >> 2] = $vararg_buffer; //@line 13608
        HEAP32[$AsyncCtx53 + 36 >> 2] = $vararg_buffer; //@line 13610
        HEAP32[$AsyncCtx53 + 40 >> 2] = $317; //@line 13612
        sp = STACKTOP; //@line 13613
        STACKTOP = sp; //@line 13614
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx53 | 0); //@line 13616
        $331 = HEAP32[$317 >> 2] | 0; //@line 13618
        break;
       }
      } else {
       $331 = $318; //@line 13622
      }
     } while (0);
     $330 = HEAP32[$331 >> 2] | 0; //@line 13625
     $AsyncCtx7 = _emscripten_alloc_async_context(32, sp) | 0; //@line 13626
     FUNCTION_TABLE_vii[$330 & 31]($314, $316); //@line 13627
     if (___async) {
      HEAP32[$AsyncCtx7 >> 2] = 387; //@line 13630
      HEAP32[$AsyncCtx7 + 4 >> 2] = $15; //@line 13632
      HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 13634
      HEAP32[$AsyncCtx7 + 12 >> 2] = $1; //@line 13636
      HEAP32[$AsyncCtx7 + 16 >> 2] = $vararg_buffer1; //@line 13638
      HEAP32[$AsyncCtx7 + 20 >> 2] = $vararg_buffer1; //@line 13640
      HEAP32[$AsyncCtx7 + 24 >> 2] = $vararg_buffer; //@line 13642
      HEAP32[$AsyncCtx7 + 28 >> 2] = $vararg_buffer; //@line 13644
      sp = STACKTOP; //@line 13645
      STACKTOP = sp; //@line 13646
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx7 | 0); //@line 13648
      break;
     }
    }
   } while (0);
   if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($0 + 4 | 0) | 0) {
    _mbed_tracef(16, 13704, 13865, $vararg_buffer); //@line 13656
    HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($0 + 264 | 0) | 0) >> 2] = 4; //@line 13659
    $344 = HEAP8[$15 >> 0] | 16; //@line 13661
    HEAP8[$15 >> 0] = $344; //@line 13662
    $346 = $344; //@line 13663
   } else {
    $346 = HEAP8[$15 >> 0] | 0; //@line 13666
   }
   $345 = $346 & -33; //@line 13668
   HEAP8[$15 >> 0] = $345; //@line 13669
   $354 = $345; //@line 13670
  } else {
   $347 = HEAP32[$2 >> 2] | 0; //@line 13672
   $AsyncCtx17 = _emscripten_alloc_async_context(24, sp) | 0; //@line 13673
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($347, $4, 1e3); //@line 13674
   if (___async) {
    HEAP32[$AsyncCtx17 >> 2] = 388; //@line 13677
    HEAP32[$AsyncCtx17 + 4 >> 2] = $15; //@line 13679
    HEAP32[$AsyncCtx17 + 8 >> 2] = $0; //@line 13681
    HEAP32[$AsyncCtx17 + 12 >> 2] = $1; //@line 13683
    HEAP32[$AsyncCtx17 + 16 >> 2] = $vararg_buffer1; //@line 13685
    HEAP32[$AsyncCtx17 + 20 >> 2] = $vararg_buffer1; //@line 13687
    sp = STACKTOP; //@line 13688
    STACKTOP = sp; //@line 13689
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 13691
    $354 = HEAP8[$15 >> 0] | 0; //@line 13693
    break;
   }
  }
 } while (0);
 if (!($354 & 2)) {
  $394 = $354; //@line 13701
 } else {
  $356 = $354 & -3; //@line 13703
  HEAP8[$15 >> 0] = $356; //@line 13704
  if ((HEAP32[$0 + 360 >> 2] | 0) == 2) {
   _mbed_tracef(16, 13704, 13723, $vararg_buffer1); //@line 13709
   $361 = HEAP32[$0 + 1328 >> 2] | 0; //@line 13711
   HEAP32[$1 >> 2] = 279; //@line 13712
   HEAP32[$1 + 4 >> 2] = 0; //@line 13714
   $AsyncCtx25 = _emscripten_alloc_async_context(16, sp) | 0; //@line 13715
   HEAP32[$$byval_copy85 >> 2] = HEAP32[$1 >> 2]; //@line 13716
   HEAP32[$$byval_copy85 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 13716
   $362 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($361, $0, $$byval_copy85) | 0; //@line 13717
   if (___async) {
    HEAP32[$AsyncCtx25 >> 2] = 389; //@line 13720
    HEAP32[$AsyncCtx25 + 4 >> 2] = $15; //@line 13722
    HEAP32[$AsyncCtx25 + 8 >> 2] = $0; //@line 13724
    HEAP32[$AsyncCtx25 + 12 >> 2] = $1; //@line 13726
    sp = STACKTOP; //@line 13727
    STACKTOP = sp; //@line 13728
    return;
   }
   _emscripten_free_async_context($AsyncCtx25 | 0); //@line 13730
   do {
    if (!$362) {
     $AsyncCtx49 = _emscripten_alloc_async_context(16, sp) | 0; //@line 13734
     _mbed_assert_internal(13588, 13597, 215); //@line 13735
     if (___async) {
      HEAP32[$AsyncCtx49 >> 2] = 390; //@line 13738
      HEAP32[$AsyncCtx49 + 4 >> 2] = $15; //@line 13740
      HEAP32[$AsyncCtx49 + 8 >> 2] = $0; //@line 13742
      HEAP32[$AsyncCtx49 + 12 >> 2] = $1; //@line 13744
      sp = STACKTOP; //@line 13745
      STACKTOP = sp; //@line 13746
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx49 | 0); //@line 13748
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 13754
   $372 = HEAP8[$15 >> 0] | 0; //@line 13756
  } else {
   $372 = $356; //@line 13758
  }
  do {
   if (!($372 & 4)) {
    $375 = HEAP32[$0 + 1324 >> 2] | 0; //@line 13765
    $376 = $375 + 16 | 0; //@line 13766
    $378 = __ZN11LoRaMacMcps14get_indicationEv($0 + 288 | 0) | 0; //@line 13768
    $379 = $375 + 28 | 0; //@line 13769
    $380 = HEAP32[$379 >> 2] | 0; //@line 13770
    do {
     if (!$380) {
      $AsyncCtx45 = _emscripten_alloc_async_context(24, sp) | 0; //@line 13774
      _mbed_assert_internal(15615, 15620, 1102); //@line 13775
      if (___async) {
       HEAP32[$AsyncCtx45 >> 2] = 391; //@line 13778
       HEAP32[$AsyncCtx45 + 4 >> 2] = $379; //@line 13780
       HEAP32[$AsyncCtx45 + 8 >> 2] = $376; //@line 13782
       HEAP32[$AsyncCtx45 + 12 >> 2] = $378; //@line 13784
       HEAP32[$AsyncCtx45 + 16 >> 2] = $15; //@line 13786
       HEAP32[$AsyncCtx45 + 20 >> 2] = $0; //@line 13788
       sp = STACKTOP; //@line 13789
       STACKTOP = sp; //@line 13790
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx45 | 0); //@line 13792
       $388 = HEAP32[$379 >> 2] | 0; //@line 13794
       break;
      }
     } else {
      $388 = $380; //@line 13798
     }
    } while (0);
    $387 = HEAP32[$388 >> 2] | 0; //@line 13801
    $AsyncCtx10 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13802
    FUNCTION_TABLE_vii[$387 & 31]($376, $378); //@line 13803
    if (___async) {
     HEAP32[$AsyncCtx10 >> 2] = 392; //@line 13806
     HEAP32[$AsyncCtx10 + 4 >> 2] = $15; //@line 13808
     HEAP32[$AsyncCtx10 + 8 >> 2] = $0; //@line 13810
     sp = STACKTOP; //@line 13811
     STACKTOP = sp; //@line 13812
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx10 | 0); //@line 13814
     $392 = HEAP8[$15 >> 0] | 0; //@line 13816
     break;
    }
   } else {
    $392 = $372; //@line 13820
   }
  } while (0);
  $391 = $392 & -5; //@line 13823
  HEAP8[$15 >> 0] = $391; //@line 13824
  $394 = $391; //@line 13825
 }
 if (!($394 & 16)) {
  STACKTOP = sp; //@line 13830
  return;
 }
 HEAP8[$15 >> 0] = $394 & -17; //@line 13833
 $398 = HEAP32[$0 + 1324 >> 2] | 0; //@line 13835
 $399 = $398 + 48 | 0; //@line 13836
 $401 = __ZN11LoRaMacMlme14get_indicationEv($0 + 264 | 0) | 0; //@line 13838
 $402 = $398 + 60 | 0; //@line 13839
 $403 = HEAP32[$402 >> 2] | 0; //@line 13840
 do {
  if (!$403) {
   $AsyncCtx41 = _emscripten_alloc_async_context(16, sp) | 0; //@line 13844
   _mbed_assert_internal(15615, 15620, 1102); //@line 13845
   if (___async) {
    HEAP32[$AsyncCtx41 >> 2] = 393; //@line 13848
    HEAP32[$AsyncCtx41 + 4 >> 2] = $402; //@line 13850
    HEAP32[$AsyncCtx41 + 8 >> 2] = $399; //@line 13852
    HEAP32[$AsyncCtx41 + 12 >> 2] = $401; //@line 13854
    sp = STACKTOP; //@line 13855
    STACKTOP = sp; //@line 13856
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx41 | 0); //@line 13858
    $409 = HEAP32[$402 >> 2] | 0; //@line 13860
    break;
   }
  } else {
   $409 = $403; //@line 13864
  }
 } while (0);
 $408 = HEAP32[$409 >> 2] | 0; //@line 13867
 $AsyncCtx13 = _emscripten_alloc_async_context(4, sp) | 0; //@line 13868
 FUNCTION_TABLE_vii[$408 & 31]($399, $401); //@line 13869
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 394; //@line 13872
  sp = STACKTOP; //@line 13873
  STACKTOP = sp; //@line 13874
  return;
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 13876
 STACKTOP = sp; //@line 13877
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_335($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $103 = 0, $105 = 0, $106 = 0, $111 = 0, $113 = 0, $114 = 0, $115 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $139 = 0, $14 = 0, $140 = 0, $142 = 0, $143 = 0, $144 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $180 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $194 = 0, $195 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $211 = 0, $215 = 0, $216 = 0, $218 = 0, $219 = 0, $220 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $24 = 0, $28 = 0, $4 = 0, $42 = 0, $46 = 0, $51 = 0, $57 = 0, $58 = 0, $6 = 0, $63 = 0, $67 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 27108
 STACKTOP = STACKTOP + 16 | 0; //@line 27109
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 27109
 $$byval_copy = sp; //@line 27110
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27112
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27114
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27116
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27118
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27120
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27122
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27124
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27126
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 27128
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 27130
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 27134
 do {
  if (HEAP8[$2 >> 0] & 2) {
   $28 = $4 + 288 | 0; //@line 27140
   if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($28) | 0) + 10 >> 0] | 0)) {
    if ((HEAPU8[$4 + 895 >> 0] | 0) <= (HEAPU8[$4 + 894 >> 0] | 0)) {
     break;
    }
   }
   HEAP8[$4 + 377 >> 0] = 0; //@line 27156
   HEAP8[$24 >> 0] = 0; //@line 27157
   if (!(HEAP8[$4 + 370 >> 0] | 0)) {
    $42 = $4 + 956 | 0; //@line 27162
    HEAP32[$42 >> 2] = (HEAP32[$42 >> 2] | 0) + 1; //@line 27165
   }
   $46 = HEAP8[$4 + 895 >> 0] | 0; //@line 27168
   HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($28) | 0) + 11 >> 0] = $46; //@line 27171
   HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -2; //@line 27174
  }
 } while (0);
 $51 = $4 + 377 | 0; //@line 27177
 if (HEAP8[$51 >> 0] | 0) {
  if (!(HEAP32[$6 >> 2] & 16)) {
   HEAP8[$51 >> 0] = 0; //@line 27185
   $57 = $4 + 895 | 0; //@line 27186
   $58 = HEAP8[$57 >> 0] | 0; //@line 27187
   if (!(($58 & 255) < 9 ? ($58 & 255) < (HEAPU8[$4 + 894 >> 0] | 0) : 0)) {
    $84 = HEAP32[$4 >> 2] | 0; //@line 27194
    $87 = HEAP32[(HEAP32[$84 >> 2] | 0) + 16 >> 2] | 0; //@line 27197
    $ReallocAsyncCtx = _emscripten_realloc_async_context(52) | 0; //@line 27198
    FUNCTION_TABLE_vi[$87 & 1023]($84); //@line 27199
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 383; //@line 27202
     $88 = $ReallocAsyncCtx + 4 | 0; //@line 27203
     HEAP32[$88 >> 2] = $2; //@line 27204
     $89 = $ReallocAsyncCtx + 8 | 0; //@line 27205
     HEAP32[$89 >> 2] = $8; //@line 27206
     $90 = $ReallocAsyncCtx + 12 | 0; //@line 27207
     HEAP32[$90 >> 2] = $10; //@line 27208
     $91 = $ReallocAsyncCtx + 16 | 0; //@line 27209
     HEAP32[$91 >> 2] = $4; //@line 27210
     $92 = $ReallocAsyncCtx + 20 | 0; //@line 27211
     HEAP32[$92 >> 2] = $6; //@line 27212
     $93 = $ReallocAsyncCtx + 24 | 0; //@line 27213
     HEAP32[$93 >> 2] = $24; //@line 27214
     $94 = $ReallocAsyncCtx + 28 | 0; //@line 27215
     HEAP32[$94 >> 2] = $57; //@line 27216
     $95 = $ReallocAsyncCtx + 32 | 0; //@line 27217
     HEAP32[$95 >> 2] = $18; //@line 27218
     $96 = $ReallocAsyncCtx + 36 | 0; //@line 27219
     HEAP32[$96 >> 2] = $20; //@line 27220
     $97 = $ReallocAsyncCtx + 40 | 0; //@line 27221
     HEAP32[$97 >> 2] = $12; //@line 27222
     $98 = $ReallocAsyncCtx + 44 | 0; //@line 27223
     HEAP32[$98 >> 2] = $14; //@line 27224
     $99 = $ReallocAsyncCtx + 48 | 0; //@line 27225
     HEAP32[$99 >> 2] = $16; //@line 27226
     sp = STACKTOP; //@line 27227
     STACKTOP = sp; //@line 27228
     return;
    }
    ___async_unwind = 0; //@line 27230
    HEAP32[$ReallocAsyncCtx >> 2] = 383; //@line 27231
    $88 = $ReallocAsyncCtx + 4 | 0; //@line 27232
    HEAP32[$88 >> 2] = $2; //@line 27233
    $89 = $ReallocAsyncCtx + 8 | 0; //@line 27234
    HEAP32[$89 >> 2] = $8; //@line 27235
    $90 = $ReallocAsyncCtx + 12 | 0; //@line 27236
    HEAP32[$90 >> 2] = $10; //@line 27237
    $91 = $ReallocAsyncCtx + 16 | 0; //@line 27238
    HEAP32[$91 >> 2] = $4; //@line 27239
    $92 = $ReallocAsyncCtx + 20 | 0; //@line 27240
    HEAP32[$92 >> 2] = $6; //@line 27241
    $93 = $ReallocAsyncCtx + 24 | 0; //@line 27242
    HEAP32[$93 >> 2] = $24; //@line 27243
    $94 = $ReallocAsyncCtx + 28 | 0; //@line 27244
    HEAP32[$94 >> 2] = $57; //@line 27245
    $95 = $ReallocAsyncCtx + 32 | 0; //@line 27246
    HEAP32[$95 >> 2] = $18; //@line 27247
    $96 = $ReallocAsyncCtx + 36 | 0; //@line 27248
    HEAP32[$96 >> 2] = $20; //@line 27249
    $97 = $ReallocAsyncCtx + 40 | 0; //@line 27250
    HEAP32[$97 >> 2] = $12; //@line 27251
    $98 = $ReallocAsyncCtx + 44 | 0; //@line 27252
    HEAP32[$98 >> 2] = $14; //@line 27253
    $99 = $ReallocAsyncCtx + 48 | 0; //@line 27254
    HEAP32[$99 >> 2] = $16; //@line 27255
    sp = STACKTOP; //@line 27256
    STACKTOP = sp; //@line 27257
    return;
   }
   $63 = $58 + 1 << 24 >> 24; //@line 27259
   HEAP8[$57 >> 0] = $63; //@line 27260
   if ($63 & 1) {
    $67 = $4 + 1097 | 0; //@line 27265
    HEAP8[$67 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$4 >> 2] | 0, HEAP8[$67 >> 0] | 0) | 0; //@line 27268
   }
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(52) | 0; //@line 27270
   $70 = __ZN7LoRaMac11schedule_txEv($4) | 0; //@line 27271
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 382; //@line 27274
    $71 = $ReallocAsyncCtx7 + 4 | 0; //@line 27275
    HEAP32[$71 >> 2] = $2; //@line 27276
    $72 = $ReallocAsyncCtx7 + 8 | 0; //@line 27277
    HEAP32[$72 >> 2] = $8; //@line 27278
    $73 = $ReallocAsyncCtx7 + 12 | 0; //@line 27279
    HEAP32[$73 >> 2] = $10; //@line 27280
    $74 = $ReallocAsyncCtx7 + 16 | 0; //@line 27281
    HEAP32[$74 >> 2] = $4; //@line 27282
    $75 = $ReallocAsyncCtx7 + 20 | 0; //@line 27283
    HEAP32[$75 >> 2] = $6; //@line 27284
    $76 = $ReallocAsyncCtx7 + 24 | 0; //@line 27285
    HEAP32[$76 >> 2] = $24; //@line 27286
    $77 = $ReallocAsyncCtx7 + 28 | 0; //@line 27287
    HEAP32[$77 >> 2] = $57; //@line 27288
    $78 = $ReallocAsyncCtx7 + 32 | 0; //@line 27289
    HEAP32[$78 >> 2] = $12; //@line 27290
    $79 = $ReallocAsyncCtx7 + 36 | 0; //@line 27291
    HEAP32[$79 >> 2] = $14; //@line 27292
    $80 = $ReallocAsyncCtx7 + 40 | 0; //@line 27293
    HEAP32[$80 >> 2] = $16; //@line 27294
    $81 = $ReallocAsyncCtx7 + 44 | 0; //@line 27295
    HEAP32[$81 >> 2] = $18; //@line 27296
    $82 = $ReallocAsyncCtx7 + 48 | 0; //@line 27297
    HEAP32[$82 >> 2] = $20; //@line 27298
    sp = STACKTOP; //@line 27299
    STACKTOP = sp; //@line 27300
    return;
   }
   HEAP32[___async_retval >> 2] = $70; //@line 27303
   ___async_unwind = 0; //@line 27304
   HEAP32[$ReallocAsyncCtx7 >> 2] = 382; //@line 27305
   $71 = $ReallocAsyncCtx7 + 4 | 0; //@line 27306
   HEAP32[$71 >> 2] = $2; //@line 27307
   $72 = $ReallocAsyncCtx7 + 8 | 0; //@line 27308
   HEAP32[$72 >> 2] = $8; //@line 27309
   $73 = $ReallocAsyncCtx7 + 12 | 0; //@line 27310
   HEAP32[$73 >> 2] = $10; //@line 27311
   $74 = $ReallocAsyncCtx7 + 16 | 0; //@line 27312
   HEAP32[$74 >> 2] = $4; //@line 27313
   $75 = $ReallocAsyncCtx7 + 20 | 0; //@line 27314
   HEAP32[$75 >> 2] = $6; //@line 27315
   $76 = $ReallocAsyncCtx7 + 24 | 0; //@line 27316
   HEAP32[$76 >> 2] = $24; //@line 27317
   $77 = $ReallocAsyncCtx7 + 28 | 0; //@line 27318
   HEAP32[$77 >> 2] = $57; //@line 27319
   $78 = $ReallocAsyncCtx7 + 32 | 0; //@line 27320
   HEAP32[$78 >> 2] = $12; //@line 27321
   $79 = $ReallocAsyncCtx7 + 36 | 0; //@line 27322
   HEAP32[$79 >> 2] = $14; //@line 27323
   $80 = $ReallocAsyncCtx7 + 40 | 0; //@line 27324
   HEAP32[$80 >> 2] = $16; //@line 27325
   $81 = $ReallocAsyncCtx7 + 44 | 0; //@line 27326
   HEAP32[$81 >> 2] = $18; //@line 27327
   $82 = $ReallocAsyncCtx7 + 48 | 0; //@line 27328
   HEAP32[$82 >> 2] = $20; //@line 27329
   sp = STACKTOP; //@line 27330
   STACKTOP = sp; //@line 27331
   return;
  }
 }
 $100 = HEAP32[$6 >> 2] | 0; //@line 27334
 $103 = $100 & -3; //@line 27337
 if (!($100 & 2)) {
  $105 = $100; //@line 27339
 } else {
  HEAP32[$6 >> 2] = $103; //@line 27341
  $105 = $103; //@line 27342
 }
 if ($105 | 0) {
  $172 = HEAP32[$18 >> 2] | 0; //@line 27346
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 27347
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($172, $20, 1e3); //@line 27348
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 388; //@line 27351
   $173 = $ReallocAsyncCtx6 + 4 | 0; //@line 27352
   HEAP32[$173 >> 2] = $2; //@line 27353
   $174 = $ReallocAsyncCtx6 + 8 | 0; //@line 27354
   HEAP32[$174 >> 2] = $4; //@line 27355
   $175 = $ReallocAsyncCtx6 + 12 | 0; //@line 27356
   HEAP32[$175 >> 2] = $12; //@line 27357
   $176 = $ReallocAsyncCtx6 + 16 | 0; //@line 27358
   HEAP32[$176 >> 2] = $14; //@line 27359
   $177 = $ReallocAsyncCtx6 + 20 | 0; //@line 27360
   HEAP32[$177 >> 2] = $16; //@line 27361
   sp = STACKTOP; //@line 27362
   STACKTOP = sp; //@line 27363
   return;
  }
  ___async_unwind = 0; //@line 27365
  HEAP32[$ReallocAsyncCtx6 >> 2] = 388; //@line 27366
  $173 = $ReallocAsyncCtx6 + 4 | 0; //@line 27367
  HEAP32[$173 >> 2] = $2; //@line 27368
  $174 = $ReallocAsyncCtx6 + 8 | 0; //@line 27369
  HEAP32[$174 >> 2] = $4; //@line 27370
  $175 = $ReallocAsyncCtx6 + 12 | 0; //@line 27371
  HEAP32[$175 >> 2] = $12; //@line 27372
  $176 = $ReallocAsyncCtx6 + 16 | 0; //@line 27373
  HEAP32[$176 >> 2] = $14; //@line 27374
  $177 = $ReallocAsyncCtx6 + 20 | 0; //@line 27375
  HEAP32[$177 >> 2] = $16; //@line 27376
  sp = STACKTOP; //@line 27377
  STACKTOP = sp; //@line 27378
  return;
 }
 $106 = HEAP8[$2 >> 0] | 0; //@line 27380
 if ($106 & 1) {
  HEAP8[$2 >> 0] = $106 & -2; //@line 27385
  $111 = HEAP32[$4 + 1324 >> 2] | 0; //@line 27387
  $113 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 27389
  $114 = $111 + 12 | 0; //@line 27390
  $115 = HEAP32[$114 >> 2] | 0; //@line 27391
  if (!$115) {
   $ReallocAsyncCtx16 = _emscripten_realloc_async_context(44) | 0; //@line 27394
   _mbed_assert_internal(15615, 15620, 1102); //@line 27395
   if (___async) {
    HEAP32[$ReallocAsyncCtx16 >> 2] = 384; //@line 27398
    $117 = $ReallocAsyncCtx16 + 4 | 0; //@line 27399
    HEAP32[$117 >> 2] = $2; //@line 27400
    $118 = $ReallocAsyncCtx16 + 8 | 0; //@line 27401
    HEAP32[$118 >> 2] = $4; //@line 27402
    $119 = $ReallocAsyncCtx16 + 12 | 0; //@line 27403
    HEAP32[$119 >> 2] = $114; //@line 27404
    $120 = $ReallocAsyncCtx16 + 16 | 0; //@line 27405
    HEAP32[$120 >> 2] = $111; //@line 27406
    $121 = $ReallocAsyncCtx16 + 20 | 0; //@line 27407
    HEAP32[$121 >> 2] = $113; //@line 27408
    $122 = $ReallocAsyncCtx16 + 24 | 0; //@line 27409
    HEAP32[$122 >> 2] = $12; //@line 27410
    $123 = $ReallocAsyncCtx16 + 28 | 0; //@line 27411
    HEAP32[$123 >> 2] = $14; //@line 27412
    $124 = $ReallocAsyncCtx16 + 32 | 0; //@line 27413
    HEAP32[$124 >> 2] = $16; //@line 27414
    $125 = $ReallocAsyncCtx16 + 36 | 0; //@line 27415
    HEAP32[$125 >> 2] = $8; //@line 27416
    $126 = $ReallocAsyncCtx16 + 40 | 0; //@line 27417
    HEAP32[$126 >> 2] = $10; //@line 27418
    sp = STACKTOP; //@line 27419
    STACKTOP = sp; //@line 27420
    return;
   }
   ___async_unwind = 0; //@line 27422
   HEAP32[$ReallocAsyncCtx16 >> 2] = 384; //@line 27423
   $117 = $ReallocAsyncCtx16 + 4 | 0; //@line 27424
   HEAP32[$117 >> 2] = $2; //@line 27425
   $118 = $ReallocAsyncCtx16 + 8 | 0; //@line 27426
   HEAP32[$118 >> 2] = $4; //@line 27427
   $119 = $ReallocAsyncCtx16 + 12 | 0; //@line 27428
   HEAP32[$119 >> 2] = $114; //@line 27429
   $120 = $ReallocAsyncCtx16 + 16 | 0; //@line 27430
   HEAP32[$120 >> 2] = $111; //@line 27431
   $121 = $ReallocAsyncCtx16 + 20 | 0; //@line 27432
   HEAP32[$121 >> 2] = $113; //@line 27433
   $122 = $ReallocAsyncCtx16 + 24 | 0; //@line 27434
   HEAP32[$122 >> 2] = $12; //@line 27435
   $123 = $ReallocAsyncCtx16 + 28 | 0; //@line 27436
   HEAP32[$123 >> 2] = $14; //@line 27437
   $124 = $ReallocAsyncCtx16 + 32 | 0; //@line 27438
   HEAP32[$124 >> 2] = $16; //@line 27439
   $125 = $ReallocAsyncCtx16 + 36 | 0; //@line 27440
   HEAP32[$125 >> 2] = $8; //@line 27441
   $126 = $ReallocAsyncCtx16 + 40 | 0; //@line 27442
   HEAP32[$126 >> 2] = $10; //@line 27443
   sp = STACKTOP; //@line 27444
   STACKTOP = sp; //@line 27445
   return;
  } else {
   $127 = HEAP32[$115 >> 2] | 0; //@line 27447
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 27448
   FUNCTION_TABLE_vii[$127 & 31]($111, $113); //@line 27449
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 385; //@line 27452
    $128 = $ReallocAsyncCtx2 + 4 | 0; //@line 27453
    HEAP32[$128 >> 2] = $2; //@line 27454
    $129 = $ReallocAsyncCtx2 + 8 | 0; //@line 27455
    HEAP32[$129 >> 2] = $4; //@line 27456
    $130 = $ReallocAsyncCtx2 + 12 | 0; //@line 27457
    HEAP32[$130 >> 2] = $12; //@line 27458
    $131 = $ReallocAsyncCtx2 + 16 | 0; //@line 27459
    HEAP32[$131 >> 2] = $14; //@line 27460
    $132 = $ReallocAsyncCtx2 + 20 | 0; //@line 27461
    HEAP32[$132 >> 2] = $16; //@line 27462
    $133 = $ReallocAsyncCtx2 + 24 | 0; //@line 27463
    HEAP32[$133 >> 2] = $8; //@line 27464
    $134 = $ReallocAsyncCtx2 + 28 | 0; //@line 27465
    HEAP32[$134 >> 2] = $10; //@line 27466
    sp = STACKTOP; //@line 27467
    STACKTOP = sp; //@line 27468
    return;
   }
   ___async_unwind = 0; //@line 27470
   HEAP32[$ReallocAsyncCtx2 >> 2] = 385; //@line 27471
   $128 = $ReallocAsyncCtx2 + 4 | 0; //@line 27472
   HEAP32[$128 >> 2] = $2; //@line 27473
   $129 = $ReallocAsyncCtx2 + 8 | 0; //@line 27474
   HEAP32[$129 >> 2] = $4; //@line 27475
   $130 = $ReallocAsyncCtx2 + 12 | 0; //@line 27476
   HEAP32[$130 >> 2] = $12; //@line 27477
   $131 = $ReallocAsyncCtx2 + 16 | 0; //@line 27478
   HEAP32[$131 >> 2] = $14; //@line 27479
   $132 = $ReallocAsyncCtx2 + 20 | 0; //@line 27480
   HEAP32[$132 >> 2] = $16; //@line 27481
   $133 = $ReallocAsyncCtx2 + 24 | 0; //@line 27482
   HEAP32[$133 >> 2] = $8; //@line 27483
   $134 = $ReallocAsyncCtx2 + 28 | 0; //@line 27484
   HEAP32[$134 >> 2] = $10; //@line 27485
   sp = STACKTOP; //@line 27486
   STACKTOP = sp; //@line 27487
   return;
  }
 }
 if ($106 & 8) {
  HEAP8[$2 >> 0] = $106 & -9; //@line 27494
  $139 = HEAP32[$4 + 1324 >> 2] | 0; //@line 27496
  $140 = $139 + 32 | 0; //@line 27497
  $142 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 27499
  $143 = $139 + 44 | 0; //@line 27500
  $144 = HEAP32[$143 >> 2] | 0; //@line 27501
  if (!$144) {
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(44) | 0; //@line 27504
   _mbed_assert_internal(15615, 15620, 1102); //@line 27505
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 386; //@line 27508
    $146 = $ReallocAsyncCtx15 + 4 | 0; //@line 27509
    HEAP32[$146 >> 2] = $2; //@line 27510
    $147 = $ReallocAsyncCtx15 + 8 | 0; //@line 27511
    HEAP32[$147 >> 2] = $4; //@line 27512
    $148 = $ReallocAsyncCtx15 + 12 | 0; //@line 27513
    HEAP32[$148 >> 2] = $140; //@line 27514
    $149 = $ReallocAsyncCtx15 + 16 | 0; //@line 27515
    HEAP32[$149 >> 2] = $142; //@line 27516
    $150 = $ReallocAsyncCtx15 + 20 | 0; //@line 27517
    HEAP32[$150 >> 2] = $12; //@line 27518
    $151 = $ReallocAsyncCtx15 + 24 | 0; //@line 27519
    HEAP32[$151 >> 2] = $14; //@line 27520
    $152 = $ReallocAsyncCtx15 + 28 | 0; //@line 27521
    HEAP32[$152 >> 2] = $16; //@line 27522
    $153 = $ReallocAsyncCtx15 + 32 | 0; //@line 27523
    HEAP32[$153 >> 2] = $8; //@line 27524
    $154 = $ReallocAsyncCtx15 + 36 | 0; //@line 27525
    HEAP32[$154 >> 2] = $10; //@line 27526
    $155 = $ReallocAsyncCtx15 + 40 | 0; //@line 27527
    HEAP32[$155 >> 2] = $143; //@line 27528
    sp = STACKTOP; //@line 27529
    STACKTOP = sp; //@line 27530
    return;
   }
   ___async_unwind = 0; //@line 27532
   HEAP32[$ReallocAsyncCtx15 >> 2] = 386; //@line 27533
   $146 = $ReallocAsyncCtx15 + 4 | 0; //@line 27534
   HEAP32[$146 >> 2] = $2; //@line 27535
   $147 = $ReallocAsyncCtx15 + 8 | 0; //@line 27536
   HEAP32[$147 >> 2] = $4; //@line 27537
   $148 = $ReallocAsyncCtx15 + 12 | 0; //@line 27538
   HEAP32[$148 >> 2] = $140; //@line 27539
   $149 = $ReallocAsyncCtx15 + 16 | 0; //@line 27540
   HEAP32[$149 >> 2] = $142; //@line 27541
   $150 = $ReallocAsyncCtx15 + 20 | 0; //@line 27542
   HEAP32[$150 >> 2] = $12; //@line 27543
   $151 = $ReallocAsyncCtx15 + 24 | 0; //@line 27544
   HEAP32[$151 >> 2] = $14; //@line 27545
   $152 = $ReallocAsyncCtx15 + 28 | 0; //@line 27546
   HEAP32[$152 >> 2] = $16; //@line 27547
   $153 = $ReallocAsyncCtx15 + 32 | 0; //@line 27548
   HEAP32[$153 >> 2] = $8; //@line 27549
   $154 = $ReallocAsyncCtx15 + 36 | 0; //@line 27550
   HEAP32[$154 >> 2] = $10; //@line 27551
   $155 = $ReallocAsyncCtx15 + 40 | 0; //@line 27552
   HEAP32[$155 >> 2] = $143; //@line 27553
   sp = STACKTOP; //@line 27554
   STACKTOP = sp; //@line 27555
   return;
  } else {
   $156 = HEAP32[$144 >> 2] | 0; //@line 27557
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 27558
   FUNCTION_TABLE_vii[$156 & 31]($140, $142); //@line 27559
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 387; //@line 27562
    $157 = $ReallocAsyncCtx3 + 4 | 0; //@line 27563
    HEAP32[$157 >> 2] = $2; //@line 27564
    $158 = $ReallocAsyncCtx3 + 8 | 0; //@line 27565
    HEAP32[$158 >> 2] = $4; //@line 27566
    $159 = $ReallocAsyncCtx3 + 12 | 0; //@line 27567
    HEAP32[$159 >> 2] = $12; //@line 27568
    $160 = $ReallocAsyncCtx3 + 16 | 0; //@line 27569
    HEAP32[$160 >> 2] = $14; //@line 27570
    $161 = $ReallocAsyncCtx3 + 20 | 0; //@line 27571
    HEAP32[$161 >> 2] = $16; //@line 27572
    $162 = $ReallocAsyncCtx3 + 24 | 0; //@line 27573
    HEAP32[$162 >> 2] = $8; //@line 27574
    $163 = $ReallocAsyncCtx3 + 28 | 0; //@line 27575
    HEAP32[$163 >> 2] = $10; //@line 27576
    sp = STACKTOP; //@line 27577
    STACKTOP = sp; //@line 27578
    return;
   }
   ___async_unwind = 0; //@line 27580
   HEAP32[$ReallocAsyncCtx3 >> 2] = 387; //@line 27581
   $157 = $ReallocAsyncCtx3 + 4 | 0; //@line 27582
   HEAP32[$157 >> 2] = $2; //@line 27583
   $158 = $ReallocAsyncCtx3 + 8 | 0; //@line 27584
   HEAP32[$158 >> 2] = $4; //@line 27585
   $159 = $ReallocAsyncCtx3 + 12 | 0; //@line 27586
   HEAP32[$159 >> 2] = $12; //@line 27587
   $160 = $ReallocAsyncCtx3 + 16 | 0; //@line 27588
   HEAP32[$160 >> 2] = $14; //@line 27589
   $161 = $ReallocAsyncCtx3 + 20 | 0; //@line 27590
   HEAP32[$161 >> 2] = $16; //@line 27591
   $162 = $ReallocAsyncCtx3 + 24 | 0; //@line 27592
   HEAP32[$162 >> 2] = $8; //@line 27593
   $163 = $ReallocAsyncCtx3 + 28 | 0; //@line 27594
   HEAP32[$163 >> 2] = $10; //@line 27595
   sp = STACKTOP; //@line 27596
   STACKTOP = sp; //@line 27597
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _mbed_tracef(16, 13704, 13865, $8); //@line 27603
  HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0) >> 2] = 4; //@line 27606
  $169 = HEAP8[$2 >> 0] | 16; //@line 27608
  HEAP8[$2 >> 0] = $169; //@line 27609
  $171 = $169; //@line 27610
 } else {
  $171 = HEAP8[$2 >> 0] | 0; //@line 27613
 }
 $170 = $171 & -33; //@line 27615
 HEAP8[$2 >> 0] = $170; //@line 27616
 do {
  if (!($170 & 2)) {
   $211 = $170; //@line 27621
  } else {
   $180 = $170 & -3; //@line 27623
   HEAP8[$2 >> 0] = $180; //@line 27624
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _mbed_tracef(16, 13704, 13723, $14); //@line 27629
    $185 = HEAP32[$4 + 1328 >> 2] | 0; //@line 27631
    HEAP32[$12 >> 2] = 279; //@line 27632
    HEAP32[$12 + 4 >> 2] = 0; //@line 27634
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 27635
    HEAP32[$$byval_copy >> 2] = HEAP32[$12 >> 2]; //@line 27636
    HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$12 + 4 >> 2]; //@line 27636
    $186 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($185, $4, $$byval_copy) | 0; //@line 27637
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 389; //@line 27640
     $187 = $ReallocAsyncCtx8 + 4 | 0; //@line 27641
     HEAP32[$187 >> 2] = $2; //@line 27642
     $188 = $ReallocAsyncCtx8 + 8 | 0; //@line 27643
     HEAP32[$188 >> 2] = $4; //@line 27644
     $189 = $ReallocAsyncCtx8 + 12 | 0; //@line 27645
     HEAP32[$189 >> 2] = $12; //@line 27646
     sp = STACKTOP; //@line 27647
     STACKTOP = sp; //@line 27648
     return;
    }
    HEAP32[___async_retval >> 2] = $186; //@line 27651
    ___async_unwind = 0; //@line 27652
    HEAP32[$ReallocAsyncCtx8 >> 2] = 389; //@line 27653
    $187 = $ReallocAsyncCtx8 + 4 | 0; //@line 27654
    HEAP32[$187 >> 2] = $2; //@line 27655
    $188 = $ReallocAsyncCtx8 + 8 | 0; //@line 27656
    HEAP32[$188 >> 2] = $4; //@line 27657
    $189 = $ReallocAsyncCtx8 + 12 | 0; //@line 27658
    HEAP32[$189 >> 2] = $12; //@line 27659
    sp = STACKTOP; //@line 27660
    STACKTOP = sp; //@line 27661
    return;
   }
   if ($180 & 4) {
    $209 = $180 & -5; //@line 27666
    HEAP8[$2 >> 0] = $209; //@line 27667
    $211 = $209; //@line 27668
    break;
   }
   $194 = HEAP32[$4 + 1324 >> 2] | 0; //@line 27672
   $195 = $194 + 16 | 0; //@line 27673
   $197 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 27675
   $198 = $194 + 28 | 0; //@line 27676
   $199 = HEAP32[$198 >> 2] | 0; //@line 27677
   if (!$199) {
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 27680
    _mbed_assert_internal(15615, 15620, 1102); //@line 27681
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 391; //@line 27684
     $201 = $ReallocAsyncCtx13 + 4 | 0; //@line 27685
     HEAP32[$201 >> 2] = $198; //@line 27686
     $202 = $ReallocAsyncCtx13 + 8 | 0; //@line 27687
     HEAP32[$202 >> 2] = $195; //@line 27688
     $203 = $ReallocAsyncCtx13 + 12 | 0; //@line 27689
     HEAP32[$203 >> 2] = $197; //@line 27690
     $204 = $ReallocAsyncCtx13 + 16 | 0; //@line 27691
     HEAP32[$204 >> 2] = $2; //@line 27692
     $205 = $ReallocAsyncCtx13 + 20 | 0; //@line 27693
     HEAP32[$205 >> 2] = $4; //@line 27694
     sp = STACKTOP; //@line 27695
     STACKTOP = sp; //@line 27696
     return;
    }
    ___async_unwind = 0; //@line 27698
    HEAP32[$ReallocAsyncCtx13 >> 2] = 391; //@line 27699
    $201 = $ReallocAsyncCtx13 + 4 | 0; //@line 27700
    HEAP32[$201 >> 2] = $198; //@line 27701
    $202 = $ReallocAsyncCtx13 + 8 | 0; //@line 27702
    HEAP32[$202 >> 2] = $195; //@line 27703
    $203 = $ReallocAsyncCtx13 + 12 | 0; //@line 27704
    HEAP32[$203 >> 2] = $197; //@line 27705
    $204 = $ReallocAsyncCtx13 + 16 | 0; //@line 27706
    HEAP32[$204 >> 2] = $2; //@line 27707
    $205 = $ReallocAsyncCtx13 + 20 | 0; //@line 27708
    HEAP32[$205 >> 2] = $4; //@line 27709
    sp = STACKTOP; //@line 27710
    STACKTOP = sp; //@line 27711
    return;
   } else {
    $206 = HEAP32[$199 >> 2] | 0; //@line 27713
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 27714
    FUNCTION_TABLE_vii[$206 & 31]($195, $197); //@line 27715
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 392; //@line 27718
     $207 = $ReallocAsyncCtx4 + 4 | 0; //@line 27719
     HEAP32[$207 >> 2] = $2; //@line 27720
     $208 = $ReallocAsyncCtx4 + 8 | 0; //@line 27721
     HEAP32[$208 >> 2] = $4; //@line 27722
     sp = STACKTOP; //@line 27723
     STACKTOP = sp; //@line 27724
     return;
    }
    ___async_unwind = 0; //@line 27726
    HEAP32[$ReallocAsyncCtx4 >> 2] = 392; //@line 27727
    $207 = $ReallocAsyncCtx4 + 4 | 0; //@line 27728
    HEAP32[$207 >> 2] = $2; //@line 27729
    $208 = $ReallocAsyncCtx4 + 8 | 0; //@line 27730
    HEAP32[$208 >> 2] = $4; //@line 27731
    sp = STACKTOP; //@line 27732
    STACKTOP = sp; //@line 27733
    return;
   }
  }
 } while (0);
 if (!($211 & 16)) {
  STACKTOP = sp; //@line 27740
  return;
 }
 HEAP8[$2 >> 0] = $211 & -17; //@line 27743
 $215 = HEAP32[$4 + 1324 >> 2] | 0; //@line 27745
 $216 = $215 + 48 | 0; //@line 27746
 $218 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 27748
 $219 = $215 + 60 | 0; //@line 27749
 $220 = HEAP32[$219 >> 2] | 0; //@line 27750
 if (!$220) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 27753
  _mbed_assert_internal(15615, 15620, 1102); //@line 27754
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 393; //@line 27757
   $222 = $ReallocAsyncCtx12 + 4 | 0; //@line 27758
   HEAP32[$222 >> 2] = $219; //@line 27759
   $223 = $ReallocAsyncCtx12 + 8 | 0; //@line 27760
   HEAP32[$223 >> 2] = $216; //@line 27761
   $224 = $ReallocAsyncCtx12 + 12 | 0; //@line 27762
   HEAP32[$224 >> 2] = $218; //@line 27763
   sp = STACKTOP; //@line 27764
   STACKTOP = sp; //@line 27765
   return;
  }
  ___async_unwind = 0; //@line 27767
  HEAP32[$ReallocAsyncCtx12 >> 2] = 393; //@line 27768
  $222 = $ReallocAsyncCtx12 + 4 | 0; //@line 27769
  HEAP32[$222 >> 2] = $219; //@line 27770
  $223 = $ReallocAsyncCtx12 + 8 | 0; //@line 27771
  HEAP32[$223 >> 2] = $216; //@line 27772
  $224 = $ReallocAsyncCtx12 + 12 | 0; //@line 27773
  HEAP32[$224 >> 2] = $218; //@line 27774
  sp = STACKTOP; //@line 27775
  STACKTOP = sp; //@line 27776
  return;
 } else {
  $225 = HEAP32[$220 >> 2] | 0; //@line 27778
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 27779
  FUNCTION_TABLE_vii[$225 & 31]($216, $218); //@line 27780
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 394; //@line 27783
   sp = STACKTOP; //@line 27784
   STACKTOP = sp; //@line 27785
   return;
  }
  ___async_unwind = 0; //@line 27787
  HEAP32[$ReallocAsyncCtx5 >> 2] = 394; //@line 27788
  sp = STACKTOP; //@line 27789
  STACKTOP = sp; //@line 27790
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_334($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $103 = 0, $105 = 0, $106 = 0, $111 = 0, $113 = 0, $114 = 0, $115 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $139 = 0, $14 = 0, $140 = 0, $142 = 0, $143 = 0, $144 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $180 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $194 = 0, $195 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $211 = 0, $215 = 0, $216 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $28 = 0, $4 = 0, $42 = 0, $46 = 0, $51 = 0, $57 = 0, $58 = 0, $6 = 0, $63 = 0, $67 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 26408
 STACKTOP = STACKTOP + 16 | 0; //@line 26409
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 26409
 $$byval_copy = sp; //@line 26410
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26412
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26414
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26416
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26418
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26420
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26422
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26424
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26426
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26428
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26430
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 26432
 do {
  if (HEAP8[$2 >> 0] & 2) {
   $28 = $4 + 288 | 0; //@line 26440
   if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($28) | 0) + 10 >> 0] | 0)) {
    if ((HEAPU8[$4 + 895 >> 0] | 0) <= (HEAPU8[$4 + 894 >> 0] | 0)) {
     break;
    }
   }
   HEAP8[$4 + 377 >> 0] = 0; //@line 26456
   HEAP8[$22 >> 0] = 0; //@line 26457
   if (!(HEAP8[$4 + 370 >> 0] | 0)) {
    $42 = $4 + 956 | 0; //@line 26462
    HEAP32[$42 >> 2] = (HEAP32[$42 >> 2] | 0) + 1; //@line 26465
   }
   $46 = HEAP8[$4 + 895 >> 0] | 0; //@line 26468
   HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($28) | 0) + 11 >> 0] = $46; //@line 26471
   HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -2; //@line 26474
  }
 } while (0);
 $51 = $4 + 377 | 0; //@line 26477
 if (HEAP8[$51 >> 0] | 0) {
  if (!(HEAP32[$6 >> 2] & 16)) {
   HEAP8[$51 >> 0] = 0; //@line 26485
   $57 = $4 + 895 | 0; //@line 26486
   $58 = HEAP8[$57 >> 0] | 0; //@line 26487
   if (!(($58 & 255) < 9 ? ($58 & 255) < (HEAPU8[$4 + 894 >> 0] | 0) : 0)) {
    $84 = HEAP32[$4 >> 2] | 0; //@line 26494
    $87 = HEAP32[(HEAP32[$84 >> 2] | 0) + 16 >> 2] | 0; //@line 26497
    $ReallocAsyncCtx = _emscripten_realloc_async_context(52) | 0; //@line 26498
    FUNCTION_TABLE_vi[$87 & 1023]($84); //@line 26499
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 383; //@line 26502
     $88 = $ReallocAsyncCtx + 4 | 0; //@line 26503
     HEAP32[$88 >> 2] = $2; //@line 26504
     $89 = $ReallocAsyncCtx + 8 | 0; //@line 26505
     HEAP32[$89 >> 2] = $8; //@line 26506
     $90 = $ReallocAsyncCtx + 12 | 0; //@line 26507
     HEAP32[$90 >> 2] = $10; //@line 26508
     $91 = $ReallocAsyncCtx + 16 | 0; //@line 26509
     HEAP32[$91 >> 2] = $4; //@line 26510
     $92 = $ReallocAsyncCtx + 20 | 0; //@line 26511
     HEAP32[$92 >> 2] = $6; //@line 26512
     $93 = $ReallocAsyncCtx + 24 | 0; //@line 26513
     HEAP32[$93 >> 2] = $22; //@line 26514
     $94 = $ReallocAsyncCtx + 28 | 0; //@line 26515
     HEAP32[$94 >> 2] = $57; //@line 26516
     $95 = $ReallocAsyncCtx + 32 | 0; //@line 26517
     HEAP32[$95 >> 2] = $18; //@line 26518
     $96 = $ReallocAsyncCtx + 36 | 0; //@line 26519
     HEAP32[$96 >> 2] = $20; //@line 26520
     $97 = $ReallocAsyncCtx + 40 | 0; //@line 26521
     HEAP32[$97 >> 2] = $12; //@line 26522
     $98 = $ReallocAsyncCtx + 44 | 0; //@line 26523
     HEAP32[$98 >> 2] = $14; //@line 26524
     $99 = $ReallocAsyncCtx + 48 | 0; //@line 26525
     HEAP32[$99 >> 2] = $16; //@line 26526
     sp = STACKTOP; //@line 26527
     STACKTOP = sp; //@line 26528
     return;
    }
    ___async_unwind = 0; //@line 26530
    HEAP32[$ReallocAsyncCtx >> 2] = 383; //@line 26531
    $88 = $ReallocAsyncCtx + 4 | 0; //@line 26532
    HEAP32[$88 >> 2] = $2; //@line 26533
    $89 = $ReallocAsyncCtx + 8 | 0; //@line 26534
    HEAP32[$89 >> 2] = $8; //@line 26535
    $90 = $ReallocAsyncCtx + 12 | 0; //@line 26536
    HEAP32[$90 >> 2] = $10; //@line 26537
    $91 = $ReallocAsyncCtx + 16 | 0; //@line 26538
    HEAP32[$91 >> 2] = $4; //@line 26539
    $92 = $ReallocAsyncCtx + 20 | 0; //@line 26540
    HEAP32[$92 >> 2] = $6; //@line 26541
    $93 = $ReallocAsyncCtx + 24 | 0; //@line 26542
    HEAP32[$93 >> 2] = $22; //@line 26543
    $94 = $ReallocAsyncCtx + 28 | 0; //@line 26544
    HEAP32[$94 >> 2] = $57; //@line 26545
    $95 = $ReallocAsyncCtx + 32 | 0; //@line 26546
    HEAP32[$95 >> 2] = $18; //@line 26547
    $96 = $ReallocAsyncCtx + 36 | 0; //@line 26548
    HEAP32[$96 >> 2] = $20; //@line 26549
    $97 = $ReallocAsyncCtx + 40 | 0; //@line 26550
    HEAP32[$97 >> 2] = $12; //@line 26551
    $98 = $ReallocAsyncCtx + 44 | 0; //@line 26552
    HEAP32[$98 >> 2] = $14; //@line 26553
    $99 = $ReallocAsyncCtx + 48 | 0; //@line 26554
    HEAP32[$99 >> 2] = $16; //@line 26555
    sp = STACKTOP; //@line 26556
    STACKTOP = sp; //@line 26557
    return;
   }
   $63 = $58 + 1 << 24 >> 24; //@line 26559
   HEAP8[$57 >> 0] = $63; //@line 26560
   if ($63 & 1) {
    $67 = $4 + 1097 | 0; //@line 26565
    HEAP8[$67 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$4 >> 2] | 0, HEAP8[$67 >> 0] | 0) | 0; //@line 26568
   }
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(52) | 0; //@line 26570
   $70 = __ZN7LoRaMac11schedule_txEv($4) | 0; //@line 26571
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 382; //@line 26574
    $71 = $ReallocAsyncCtx7 + 4 | 0; //@line 26575
    HEAP32[$71 >> 2] = $2; //@line 26576
    $72 = $ReallocAsyncCtx7 + 8 | 0; //@line 26577
    HEAP32[$72 >> 2] = $8; //@line 26578
    $73 = $ReallocAsyncCtx7 + 12 | 0; //@line 26579
    HEAP32[$73 >> 2] = $10; //@line 26580
    $74 = $ReallocAsyncCtx7 + 16 | 0; //@line 26581
    HEAP32[$74 >> 2] = $4; //@line 26582
    $75 = $ReallocAsyncCtx7 + 20 | 0; //@line 26583
    HEAP32[$75 >> 2] = $6; //@line 26584
    $76 = $ReallocAsyncCtx7 + 24 | 0; //@line 26585
    HEAP32[$76 >> 2] = $22; //@line 26586
    $77 = $ReallocAsyncCtx7 + 28 | 0; //@line 26587
    HEAP32[$77 >> 2] = $57; //@line 26588
    $78 = $ReallocAsyncCtx7 + 32 | 0; //@line 26589
    HEAP32[$78 >> 2] = $12; //@line 26590
    $79 = $ReallocAsyncCtx7 + 36 | 0; //@line 26591
    HEAP32[$79 >> 2] = $14; //@line 26592
    $80 = $ReallocAsyncCtx7 + 40 | 0; //@line 26593
    HEAP32[$80 >> 2] = $16; //@line 26594
    $81 = $ReallocAsyncCtx7 + 44 | 0; //@line 26595
    HEAP32[$81 >> 2] = $18; //@line 26596
    $82 = $ReallocAsyncCtx7 + 48 | 0; //@line 26597
    HEAP32[$82 >> 2] = $20; //@line 26598
    sp = STACKTOP; //@line 26599
    STACKTOP = sp; //@line 26600
    return;
   }
   HEAP32[___async_retval >> 2] = $70; //@line 26603
   ___async_unwind = 0; //@line 26604
   HEAP32[$ReallocAsyncCtx7 >> 2] = 382; //@line 26605
   $71 = $ReallocAsyncCtx7 + 4 | 0; //@line 26606
   HEAP32[$71 >> 2] = $2; //@line 26607
   $72 = $ReallocAsyncCtx7 + 8 | 0; //@line 26608
   HEAP32[$72 >> 2] = $8; //@line 26609
   $73 = $ReallocAsyncCtx7 + 12 | 0; //@line 26610
   HEAP32[$73 >> 2] = $10; //@line 26611
   $74 = $ReallocAsyncCtx7 + 16 | 0; //@line 26612
   HEAP32[$74 >> 2] = $4; //@line 26613
   $75 = $ReallocAsyncCtx7 + 20 | 0; //@line 26614
   HEAP32[$75 >> 2] = $6; //@line 26615
   $76 = $ReallocAsyncCtx7 + 24 | 0; //@line 26616
   HEAP32[$76 >> 2] = $22; //@line 26617
   $77 = $ReallocAsyncCtx7 + 28 | 0; //@line 26618
   HEAP32[$77 >> 2] = $57; //@line 26619
   $78 = $ReallocAsyncCtx7 + 32 | 0; //@line 26620
   HEAP32[$78 >> 2] = $12; //@line 26621
   $79 = $ReallocAsyncCtx7 + 36 | 0; //@line 26622
   HEAP32[$79 >> 2] = $14; //@line 26623
   $80 = $ReallocAsyncCtx7 + 40 | 0; //@line 26624
   HEAP32[$80 >> 2] = $16; //@line 26625
   $81 = $ReallocAsyncCtx7 + 44 | 0; //@line 26626
   HEAP32[$81 >> 2] = $18; //@line 26627
   $82 = $ReallocAsyncCtx7 + 48 | 0; //@line 26628
   HEAP32[$82 >> 2] = $20; //@line 26629
   sp = STACKTOP; //@line 26630
   STACKTOP = sp; //@line 26631
   return;
  }
 }
 $100 = HEAP32[$6 >> 2] | 0; //@line 26634
 $103 = $100 & -3; //@line 26637
 if (!($100 & 2)) {
  $105 = $100; //@line 26639
 } else {
  HEAP32[$6 >> 2] = $103; //@line 26641
  $105 = $103; //@line 26642
 }
 if ($105 | 0) {
  $172 = HEAP32[$18 >> 2] | 0; //@line 26646
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 26647
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($172, $20, 1e3); //@line 26648
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 388; //@line 26651
   $173 = $ReallocAsyncCtx6 + 4 | 0; //@line 26652
   HEAP32[$173 >> 2] = $2; //@line 26653
   $174 = $ReallocAsyncCtx6 + 8 | 0; //@line 26654
   HEAP32[$174 >> 2] = $4; //@line 26655
   $175 = $ReallocAsyncCtx6 + 12 | 0; //@line 26656
   HEAP32[$175 >> 2] = $12; //@line 26657
   $176 = $ReallocAsyncCtx6 + 16 | 0; //@line 26658
   HEAP32[$176 >> 2] = $14; //@line 26659
   $177 = $ReallocAsyncCtx6 + 20 | 0; //@line 26660
   HEAP32[$177 >> 2] = $16; //@line 26661
   sp = STACKTOP; //@line 26662
   STACKTOP = sp; //@line 26663
   return;
  }
  ___async_unwind = 0; //@line 26665
  HEAP32[$ReallocAsyncCtx6 >> 2] = 388; //@line 26666
  $173 = $ReallocAsyncCtx6 + 4 | 0; //@line 26667
  HEAP32[$173 >> 2] = $2; //@line 26668
  $174 = $ReallocAsyncCtx6 + 8 | 0; //@line 26669
  HEAP32[$174 >> 2] = $4; //@line 26670
  $175 = $ReallocAsyncCtx6 + 12 | 0; //@line 26671
  HEAP32[$175 >> 2] = $12; //@line 26672
  $176 = $ReallocAsyncCtx6 + 16 | 0; //@line 26673
  HEAP32[$176 >> 2] = $14; //@line 26674
  $177 = $ReallocAsyncCtx6 + 20 | 0; //@line 26675
  HEAP32[$177 >> 2] = $16; //@line 26676
  sp = STACKTOP; //@line 26677
  STACKTOP = sp; //@line 26678
  return;
 }
 $106 = HEAP8[$2 >> 0] | 0; //@line 26680
 if ($106 & 1) {
  HEAP8[$2 >> 0] = $106 & -2; //@line 26685
  $111 = HEAP32[$4 + 1324 >> 2] | 0; //@line 26687
  $113 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 26689
  $114 = $111 + 12 | 0; //@line 26690
  $115 = HEAP32[$114 >> 2] | 0; //@line 26691
  if (!$115) {
   $ReallocAsyncCtx16 = _emscripten_realloc_async_context(44) | 0; //@line 26694
   _mbed_assert_internal(15615, 15620, 1102); //@line 26695
   if (___async) {
    HEAP32[$ReallocAsyncCtx16 >> 2] = 384; //@line 26698
    $117 = $ReallocAsyncCtx16 + 4 | 0; //@line 26699
    HEAP32[$117 >> 2] = $2; //@line 26700
    $118 = $ReallocAsyncCtx16 + 8 | 0; //@line 26701
    HEAP32[$118 >> 2] = $4; //@line 26702
    $119 = $ReallocAsyncCtx16 + 12 | 0; //@line 26703
    HEAP32[$119 >> 2] = $114; //@line 26704
    $120 = $ReallocAsyncCtx16 + 16 | 0; //@line 26705
    HEAP32[$120 >> 2] = $111; //@line 26706
    $121 = $ReallocAsyncCtx16 + 20 | 0; //@line 26707
    HEAP32[$121 >> 2] = $113; //@line 26708
    $122 = $ReallocAsyncCtx16 + 24 | 0; //@line 26709
    HEAP32[$122 >> 2] = $12; //@line 26710
    $123 = $ReallocAsyncCtx16 + 28 | 0; //@line 26711
    HEAP32[$123 >> 2] = $14; //@line 26712
    $124 = $ReallocAsyncCtx16 + 32 | 0; //@line 26713
    HEAP32[$124 >> 2] = $16; //@line 26714
    $125 = $ReallocAsyncCtx16 + 36 | 0; //@line 26715
    HEAP32[$125 >> 2] = $8; //@line 26716
    $126 = $ReallocAsyncCtx16 + 40 | 0; //@line 26717
    HEAP32[$126 >> 2] = $10; //@line 26718
    sp = STACKTOP; //@line 26719
    STACKTOP = sp; //@line 26720
    return;
   }
   ___async_unwind = 0; //@line 26722
   HEAP32[$ReallocAsyncCtx16 >> 2] = 384; //@line 26723
   $117 = $ReallocAsyncCtx16 + 4 | 0; //@line 26724
   HEAP32[$117 >> 2] = $2; //@line 26725
   $118 = $ReallocAsyncCtx16 + 8 | 0; //@line 26726
   HEAP32[$118 >> 2] = $4; //@line 26727
   $119 = $ReallocAsyncCtx16 + 12 | 0; //@line 26728
   HEAP32[$119 >> 2] = $114; //@line 26729
   $120 = $ReallocAsyncCtx16 + 16 | 0; //@line 26730
   HEAP32[$120 >> 2] = $111; //@line 26731
   $121 = $ReallocAsyncCtx16 + 20 | 0; //@line 26732
   HEAP32[$121 >> 2] = $113; //@line 26733
   $122 = $ReallocAsyncCtx16 + 24 | 0; //@line 26734
   HEAP32[$122 >> 2] = $12; //@line 26735
   $123 = $ReallocAsyncCtx16 + 28 | 0; //@line 26736
   HEAP32[$123 >> 2] = $14; //@line 26737
   $124 = $ReallocAsyncCtx16 + 32 | 0; //@line 26738
   HEAP32[$124 >> 2] = $16; //@line 26739
   $125 = $ReallocAsyncCtx16 + 36 | 0; //@line 26740
   HEAP32[$125 >> 2] = $8; //@line 26741
   $126 = $ReallocAsyncCtx16 + 40 | 0; //@line 26742
   HEAP32[$126 >> 2] = $10; //@line 26743
   sp = STACKTOP; //@line 26744
   STACKTOP = sp; //@line 26745
   return;
  } else {
   $127 = HEAP32[$115 >> 2] | 0; //@line 26747
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 26748
   FUNCTION_TABLE_vii[$127 & 31]($111, $113); //@line 26749
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 385; //@line 26752
    $128 = $ReallocAsyncCtx2 + 4 | 0; //@line 26753
    HEAP32[$128 >> 2] = $2; //@line 26754
    $129 = $ReallocAsyncCtx2 + 8 | 0; //@line 26755
    HEAP32[$129 >> 2] = $4; //@line 26756
    $130 = $ReallocAsyncCtx2 + 12 | 0; //@line 26757
    HEAP32[$130 >> 2] = $12; //@line 26758
    $131 = $ReallocAsyncCtx2 + 16 | 0; //@line 26759
    HEAP32[$131 >> 2] = $14; //@line 26760
    $132 = $ReallocAsyncCtx2 + 20 | 0; //@line 26761
    HEAP32[$132 >> 2] = $16; //@line 26762
    $133 = $ReallocAsyncCtx2 + 24 | 0; //@line 26763
    HEAP32[$133 >> 2] = $8; //@line 26764
    $134 = $ReallocAsyncCtx2 + 28 | 0; //@line 26765
    HEAP32[$134 >> 2] = $10; //@line 26766
    sp = STACKTOP; //@line 26767
    STACKTOP = sp; //@line 26768
    return;
   }
   ___async_unwind = 0; //@line 26770
   HEAP32[$ReallocAsyncCtx2 >> 2] = 385; //@line 26771
   $128 = $ReallocAsyncCtx2 + 4 | 0; //@line 26772
   HEAP32[$128 >> 2] = $2; //@line 26773
   $129 = $ReallocAsyncCtx2 + 8 | 0; //@line 26774
   HEAP32[$129 >> 2] = $4; //@line 26775
   $130 = $ReallocAsyncCtx2 + 12 | 0; //@line 26776
   HEAP32[$130 >> 2] = $12; //@line 26777
   $131 = $ReallocAsyncCtx2 + 16 | 0; //@line 26778
   HEAP32[$131 >> 2] = $14; //@line 26779
   $132 = $ReallocAsyncCtx2 + 20 | 0; //@line 26780
   HEAP32[$132 >> 2] = $16; //@line 26781
   $133 = $ReallocAsyncCtx2 + 24 | 0; //@line 26782
   HEAP32[$133 >> 2] = $8; //@line 26783
   $134 = $ReallocAsyncCtx2 + 28 | 0; //@line 26784
   HEAP32[$134 >> 2] = $10; //@line 26785
   sp = STACKTOP; //@line 26786
   STACKTOP = sp; //@line 26787
   return;
  }
 }
 if ($106 & 8) {
  HEAP8[$2 >> 0] = $106 & -9; //@line 26794
  $139 = HEAP32[$4 + 1324 >> 2] | 0; //@line 26796
  $140 = $139 + 32 | 0; //@line 26797
  $142 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 26799
  $143 = $139 + 44 | 0; //@line 26800
  $144 = HEAP32[$143 >> 2] | 0; //@line 26801
  if (!$144) {
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(44) | 0; //@line 26804
   _mbed_assert_internal(15615, 15620, 1102); //@line 26805
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 386; //@line 26808
    $146 = $ReallocAsyncCtx15 + 4 | 0; //@line 26809
    HEAP32[$146 >> 2] = $2; //@line 26810
    $147 = $ReallocAsyncCtx15 + 8 | 0; //@line 26811
    HEAP32[$147 >> 2] = $4; //@line 26812
    $148 = $ReallocAsyncCtx15 + 12 | 0; //@line 26813
    HEAP32[$148 >> 2] = $140; //@line 26814
    $149 = $ReallocAsyncCtx15 + 16 | 0; //@line 26815
    HEAP32[$149 >> 2] = $142; //@line 26816
    $150 = $ReallocAsyncCtx15 + 20 | 0; //@line 26817
    HEAP32[$150 >> 2] = $12; //@line 26818
    $151 = $ReallocAsyncCtx15 + 24 | 0; //@line 26819
    HEAP32[$151 >> 2] = $14; //@line 26820
    $152 = $ReallocAsyncCtx15 + 28 | 0; //@line 26821
    HEAP32[$152 >> 2] = $16; //@line 26822
    $153 = $ReallocAsyncCtx15 + 32 | 0; //@line 26823
    HEAP32[$153 >> 2] = $8; //@line 26824
    $154 = $ReallocAsyncCtx15 + 36 | 0; //@line 26825
    HEAP32[$154 >> 2] = $10; //@line 26826
    $155 = $ReallocAsyncCtx15 + 40 | 0; //@line 26827
    HEAP32[$155 >> 2] = $143; //@line 26828
    sp = STACKTOP; //@line 26829
    STACKTOP = sp; //@line 26830
    return;
   }
   ___async_unwind = 0; //@line 26832
   HEAP32[$ReallocAsyncCtx15 >> 2] = 386; //@line 26833
   $146 = $ReallocAsyncCtx15 + 4 | 0; //@line 26834
   HEAP32[$146 >> 2] = $2; //@line 26835
   $147 = $ReallocAsyncCtx15 + 8 | 0; //@line 26836
   HEAP32[$147 >> 2] = $4; //@line 26837
   $148 = $ReallocAsyncCtx15 + 12 | 0; //@line 26838
   HEAP32[$148 >> 2] = $140; //@line 26839
   $149 = $ReallocAsyncCtx15 + 16 | 0; //@line 26840
   HEAP32[$149 >> 2] = $142; //@line 26841
   $150 = $ReallocAsyncCtx15 + 20 | 0; //@line 26842
   HEAP32[$150 >> 2] = $12; //@line 26843
   $151 = $ReallocAsyncCtx15 + 24 | 0; //@line 26844
   HEAP32[$151 >> 2] = $14; //@line 26845
   $152 = $ReallocAsyncCtx15 + 28 | 0; //@line 26846
   HEAP32[$152 >> 2] = $16; //@line 26847
   $153 = $ReallocAsyncCtx15 + 32 | 0; //@line 26848
   HEAP32[$153 >> 2] = $8; //@line 26849
   $154 = $ReallocAsyncCtx15 + 36 | 0; //@line 26850
   HEAP32[$154 >> 2] = $10; //@line 26851
   $155 = $ReallocAsyncCtx15 + 40 | 0; //@line 26852
   HEAP32[$155 >> 2] = $143; //@line 26853
   sp = STACKTOP; //@line 26854
   STACKTOP = sp; //@line 26855
   return;
  } else {
   $156 = HEAP32[$144 >> 2] | 0; //@line 26857
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 26858
   FUNCTION_TABLE_vii[$156 & 31]($140, $142); //@line 26859
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 387; //@line 26862
    $157 = $ReallocAsyncCtx3 + 4 | 0; //@line 26863
    HEAP32[$157 >> 2] = $2; //@line 26864
    $158 = $ReallocAsyncCtx3 + 8 | 0; //@line 26865
    HEAP32[$158 >> 2] = $4; //@line 26866
    $159 = $ReallocAsyncCtx3 + 12 | 0; //@line 26867
    HEAP32[$159 >> 2] = $12; //@line 26868
    $160 = $ReallocAsyncCtx3 + 16 | 0; //@line 26869
    HEAP32[$160 >> 2] = $14; //@line 26870
    $161 = $ReallocAsyncCtx3 + 20 | 0; //@line 26871
    HEAP32[$161 >> 2] = $16; //@line 26872
    $162 = $ReallocAsyncCtx3 + 24 | 0; //@line 26873
    HEAP32[$162 >> 2] = $8; //@line 26874
    $163 = $ReallocAsyncCtx3 + 28 | 0; //@line 26875
    HEAP32[$163 >> 2] = $10; //@line 26876
    sp = STACKTOP; //@line 26877
    STACKTOP = sp; //@line 26878
    return;
   }
   ___async_unwind = 0; //@line 26880
   HEAP32[$ReallocAsyncCtx3 >> 2] = 387; //@line 26881
   $157 = $ReallocAsyncCtx3 + 4 | 0; //@line 26882
   HEAP32[$157 >> 2] = $2; //@line 26883
   $158 = $ReallocAsyncCtx3 + 8 | 0; //@line 26884
   HEAP32[$158 >> 2] = $4; //@line 26885
   $159 = $ReallocAsyncCtx3 + 12 | 0; //@line 26886
   HEAP32[$159 >> 2] = $12; //@line 26887
   $160 = $ReallocAsyncCtx3 + 16 | 0; //@line 26888
   HEAP32[$160 >> 2] = $14; //@line 26889
   $161 = $ReallocAsyncCtx3 + 20 | 0; //@line 26890
   HEAP32[$161 >> 2] = $16; //@line 26891
   $162 = $ReallocAsyncCtx3 + 24 | 0; //@line 26892
   HEAP32[$162 >> 2] = $8; //@line 26893
   $163 = $ReallocAsyncCtx3 + 28 | 0; //@line 26894
   HEAP32[$163 >> 2] = $10; //@line 26895
   sp = STACKTOP; //@line 26896
   STACKTOP = sp; //@line 26897
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _mbed_tracef(16, 13704, 13865, $8); //@line 26903
  HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0) >> 2] = 4; //@line 26906
  $169 = HEAP8[$2 >> 0] | 16; //@line 26908
  HEAP8[$2 >> 0] = $169; //@line 26909
  $171 = $169; //@line 26910
 } else {
  $171 = HEAP8[$2 >> 0] | 0; //@line 26913
 }
 $170 = $171 & -33; //@line 26915
 HEAP8[$2 >> 0] = $170; //@line 26916
 do {
  if (!($170 & 2)) {
   $211 = $170; //@line 26921
  } else {
   $180 = $170 & -3; //@line 26923
   HEAP8[$2 >> 0] = $180; //@line 26924
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _mbed_tracef(16, 13704, 13723, $14); //@line 26929
    $185 = HEAP32[$4 + 1328 >> 2] | 0; //@line 26931
    HEAP32[$12 >> 2] = 279; //@line 26932
    HEAP32[$12 + 4 >> 2] = 0; //@line 26934
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 26935
    HEAP32[$$byval_copy >> 2] = HEAP32[$12 >> 2]; //@line 26936
    HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$12 + 4 >> 2]; //@line 26936
    $186 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($185, $4, $$byval_copy) | 0; //@line 26937
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 389; //@line 26940
     $187 = $ReallocAsyncCtx8 + 4 | 0; //@line 26941
     HEAP32[$187 >> 2] = $2; //@line 26942
     $188 = $ReallocAsyncCtx8 + 8 | 0; //@line 26943
     HEAP32[$188 >> 2] = $4; //@line 26944
     $189 = $ReallocAsyncCtx8 + 12 | 0; //@line 26945
     HEAP32[$189 >> 2] = $12; //@line 26946
     sp = STACKTOP; //@line 26947
     STACKTOP = sp; //@line 26948
     return;
    }
    HEAP32[___async_retval >> 2] = $186; //@line 26951
    ___async_unwind = 0; //@line 26952
    HEAP32[$ReallocAsyncCtx8 >> 2] = 389; //@line 26953
    $187 = $ReallocAsyncCtx8 + 4 | 0; //@line 26954
    HEAP32[$187 >> 2] = $2; //@line 26955
    $188 = $ReallocAsyncCtx8 + 8 | 0; //@line 26956
    HEAP32[$188 >> 2] = $4; //@line 26957
    $189 = $ReallocAsyncCtx8 + 12 | 0; //@line 26958
    HEAP32[$189 >> 2] = $12; //@line 26959
    sp = STACKTOP; //@line 26960
    STACKTOP = sp; //@line 26961
    return;
   }
   if ($180 & 4) {
    $209 = $180 & -5; //@line 26966
    HEAP8[$2 >> 0] = $209; //@line 26967
    $211 = $209; //@line 26968
    break;
   }
   $194 = HEAP32[$4 + 1324 >> 2] | 0; //@line 26972
   $195 = $194 + 16 | 0; //@line 26973
   $197 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 26975
   $198 = $194 + 28 | 0; //@line 26976
   $199 = HEAP32[$198 >> 2] | 0; //@line 26977
   if (!$199) {
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 26980
    _mbed_assert_internal(15615, 15620, 1102); //@line 26981
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 391; //@line 26984
     $201 = $ReallocAsyncCtx13 + 4 | 0; //@line 26985
     HEAP32[$201 >> 2] = $198; //@line 26986
     $202 = $ReallocAsyncCtx13 + 8 | 0; //@line 26987
     HEAP32[$202 >> 2] = $195; //@line 26988
     $203 = $ReallocAsyncCtx13 + 12 | 0; //@line 26989
     HEAP32[$203 >> 2] = $197; //@line 26990
     $204 = $ReallocAsyncCtx13 + 16 | 0; //@line 26991
     HEAP32[$204 >> 2] = $2; //@line 26992
     $205 = $ReallocAsyncCtx13 + 20 | 0; //@line 26993
     HEAP32[$205 >> 2] = $4; //@line 26994
     sp = STACKTOP; //@line 26995
     STACKTOP = sp; //@line 26996
     return;
    }
    ___async_unwind = 0; //@line 26998
    HEAP32[$ReallocAsyncCtx13 >> 2] = 391; //@line 26999
    $201 = $ReallocAsyncCtx13 + 4 | 0; //@line 27000
    HEAP32[$201 >> 2] = $198; //@line 27001
    $202 = $ReallocAsyncCtx13 + 8 | 0; //@line 27002
    HEAP32[$202 >> 2] = $195; //@line 27003
    $203 = $ReallocAsyncCtx13 + 12 | 0; //@line 27004
    HEAP32[$203 >> 2] = $197; //@line 27005
    $204 = $ReallocAsyncCtx13 + 16 | 0; //@line 27006
    HEAP32[$204 >> 2] = $2; //@line 27007
    $205 = $ReallocAsyncCtx13 + 20 | 0; //@line 27008
    HEAP32[$205 >> 2] = $4; //@line 27009
    sp = STACKTOP; //@line 27010
    STACKTOP = sp; //@line 27011
    return;
   } else {
    $206 = HEAP32[$199 >> 2] | 0; //@line 27013
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 27014
    FUNCTION_TABLE_vii[$206 & 31]($195, $197); //@line 27015
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 392; //@line 27018
     $207 = $ReallocAsyncCtx4 + 4 | 0; //@line 27019
     HEAP32[$207 >> 2] = $2; //@line 27020
     $208 = $ReallocAsyncCtx4 + 8 | 0; //@line 27021
     HEAP32[$208 >> 2] = $4; //@line 27022
     sp = STACKTOP; //@line 27023
     STACKTOP = sp; //@line 27024
     return;
    }
    ___async_unwind = 0; //@line 27026
    HEAP32[$ReallocAsyncCtx4 >> 2] = 392; //@line 27027
    $207 = $ReallocAsyncCtx4 + 4 | 0; //@line 27028
    HEAP32[$207 >> 2] = $2; //@line 27029
    $208 = $ReallocAsyncCtx4 + 8 | 0; //@line 27030
    HEAP32[$208 >> 2] = $4; //@line 27031
    sp = STACKTOP; //@line 27032
    STACKTOP = sp; //@line 27033
    return;
   }
  }
 } while (0);
 if (!($211 & 16)) {
  STACKTOP = sp; //@line 27040
  return;
 }
 HEAP8[$2 >> 0] = $211 & -17; //@line 27043
 $215 = HEAP32[$4 + 1324 >> 2] | 0; //@line 27045
 $216 = $215 + 48 | 0; //@line 27046
 $218 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 27048
 $219 = $215 + 60 | 0; //@line 27049
 $220 = HEAP32[$219 >> 2] | 0; //@line 27050
 if (!$220) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 27053
  _mbed_assert_internal(15615, 15620, 1102); //@line 27054
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 393; //@line 27057
   $222 = $ReallocAsyncCtx12 + 4 | 0; //@line 27058
   HEAP32[$222 >> 2] = $219; //@line 27059
   $223 = $ReallocAsyncCtx12 + 8 | 0; //@line 27060
   HEAP32[$223 >> 2] = $216; //@line 27061
   $224 = $ReallocAsyncCtx12 + 12 | 0; //@line 27062
   HEAP32[$224 >> 2] = $218; //@line 27063
   sp = STACKTOP; //@line 27064
   STACKTOP = sp; //@line 27065
   return;
  }
  ___async_unwind = 0; //@line 27067
  HEAP32[$ReallocAsyncCtx12 >> 2] = 393; //@line 27068
  $222 = $ReallocAsyncCtx12 + 4 | 0; //@line 27069
  HEAP32[$222 >> 2] = $219; //@line 27070
  $223 = $ReallocAsyncCtx12 + 8 | 0; //@line 27071
  HEAP32[$223 >> 2] = $216; //@line 27072
  $224 = $ReallocAsyncCtx12 + 12 | 0; //@line 27073
  HEAP32[$224 >> 2] = $218; //@line 27074
  sp = STACKTOP; //@line 27075
  STACKTOP = sp; //@line 27076
  return;
 } else {
  $225 = HEAP32[$220 >> 2] | 0; //@line 27078
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 27079
  FUNCTION_TABLE_vii[$225 & 31]($216, $218); //@line 27080
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 394; //@line 27083
   sp = STACKTOP; //@line 27084
   STACKTOP = sp; //@line 27085
   return;
  }
  ___async_unwind = 0; //@line 27087
  HEAP32[$ReallocAsyncCtx5 >> 2] = 394; //@line 27088
  sp = STACKTOP; //@line 27089
  STACKTOP = sp; //@line 27090
  return;
 }
}
function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$3484 = 0, $$$3484700 = 0, $$$4502 = 0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488655 = 0, $$0488657 = 0, $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$5605 = 0, $$561 = 0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa675 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre693 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $101 = 0, $104 = 0, $106 = 0, $11 = 0, $113 = 0, $116 = 0, $124 = 0, $125 = 0, $128 = 0, $130 = 0, $131 = 0, $132 = 0, $138 = 0, $140 = 0, $144 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $160 = 0, $161 = 0, $162 = 0, $174 = 0, $185 = 0, $189 = 0, $190 = 0, $193 = 0, $198 = 0, $199 = 0, $201 = 0, $209 = 0, $212 = 0, $213 = 0, $215 = 0, $217 = 0, $218 = 0, $221 = 0, $225 = 0, $230 = 0, $233 = 0, $236 = 0, $238 = 0, $240 = 0, $242 = 0, $247 = 0, $248 = 0, $251 = 0, $253 = 0, $256 = 0, $259 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $284 = 0, $285 = 0, $289 = 0, $292 = 0, $294 = 0, $296 = 0, $300 = 0, $303 = 0, $304 = 0, $308 = 0, $31 = 0, $318 = 0, $323 = 0, $326 = 0, $327 = 0, $328 = 0, $330 = 0, $335 = 0, $347 = 0, $35 = 0.0, $351 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $369 = 0, $373 = 0, $375 = 0, $378 = 0, $381 = 0, $39 = 0, $41 = 0, $44 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $66 = 0, $68 = 0, $7 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13599
 STACKTOP = STACKTOP + 560 | 0; //@line 13600
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560); //@line 13600
 $6 = sp + 8 | 0; //@line 13601
 $7 = sp; //@line 13602
 $8 = sp + 524 | 0; //@line 13603
 $9 = $8; //@line 13604
 $10 = sp + 512 | 0; //@line 13605
 HEAP32[$7 >> 2] = 0; //@line 13606
 $11 = $10 + 12 | 0; //@line 13607
 ___DOUBLE_BITS_677($1) | 0; //@line 13608
 if ((tempRet0 | 0) < 0) {
  $$0471 = -$1; //@line 13613
  $$0520 = 1; //@line 13613
  $$0521 = 16316; //@line 13613
 } else {
  $$0471 = $1; //@line 13624
  $$0520 = ($4 & 2049 | 0) != 0 & 1; //@line 13624
  $$0521 = ($4 & 2048 | 0) == 0 ? ($4 & 1 | 0) == 0 ? 16317 : 16322 : 16319; //@line 13624
 }
 ___DOUBLE_BITS_677($$0471) | 0; //@line 13626
 do {
  if (0 == 0 & (tempRet0 & 2146435072 | 0) == 2146435072) {
   $27 = ($5 & 32 | 0) != 0; //@line 13635
   $31 = $$0520 + 3 | 0; //@line 13640
   _pad_676($0, 32, $2, $31, $4 & -65537); //@line 13642
   _out_670($0, $$0521, $$0520); //@line 13643
   _out_670($0, $$0471 != $$0471 | 0.0 != 0.0 ? $27 ? 16343 : 16347 : $27 ? 16335 : 16339, 3); //@line 13644
   _pad_676($0, 32, $2, $31, $4 ^ 8192); //@line 13646
   $$sink560 = $31; //@line 13647
  } else {
   $35 = +_frexpl($$0471, $7) * 2.0; //@line 13650
   $36 = $35 != 0.0; //@line 13651
   if ($36) {
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1; //@line 13655
   }
   $39 = $5 | 32; //@line 13657
   if (($39 | 0) == 97) {
    $41 = $5 & 32; //@line 13660
    $$0521$ = ($41 | 0) == 0 ? $$0521 : $$0521 + 9 | 0; //@line 13663
    $44 = $$0520 | 2; //@line 13664
    $46 = 12 - $3 | 0; //@line 13666
    do {
     if ($3 >>> 0 > 11 | ($46 | 0) == 0) {
      $$1472 = $35; //@line 13671
     } else {
      $$0509585 = 8.0; //@line 13673
      $$1508586 = $46; //@line 13673
      do {
       $$1508586 = $$1508586 + -1 | 0; //@line 13675
       $$0509585 = $$0509585 * 16.0; //@line 13676
      } while (($$1508586 | 0) != 0);
      if ((HEAP8[$$0521$ >> 0] | 0) == 45) {
       $$1472 = -($$0509585 + (-$35 - $$0509585)); //@line 13691
       break;
      } else {
       $$1472 = $35 + $$0509585 - $$0509585; //@line 13696
       break;
      }
     }
    } while (0);
    $60 = HEAP32[$7 >> 2] | 0; //@line 13701
    $63 = ($60 | 0) < 0 ? 0 - $60 | 0 : $60; //@line 13704
    $66 = _fmt_u($63, (($63 | 0) < 0) << 31 >> 31, $11) | 0; //@line 13707
    if (($66 | 0) == ($11 | 0)) {
     $68 = $10 + 11 | 0; //@line 13710
     HEAP8[$68 >> 0] = 48; //@line 13711
     $$0511 = $68; //@line 13712
    } else {
     $$0511 = $66; //@line 13714
    }
    HEAP8[$$0511 + -1 >> 0] = ($60 >> 31 & 2) + 43; //@line 13721
    $76 = $$0511 + -2 | 0; //@line 13724
    HEAP8[$76 >> 0] = $5 + 15; //@line 13725
    $77 = ($3 | 0) < 1; //@line 13726
    $79 = ($4 & 8 | 0) == 0; //@line 13728
    $$0523 = $8; //@line 13729
    $$2473 = $$1472; //@line 13729
    while (1) {
     $80 = ~~$$2473; //@line 13731
     $86 = $$0523 + 1 | 0; //@line 13737
     HEAP8[$$0523 >> 0] = $41 | HEAPU8[16351 + $80 >> 0]; //@line 13738
     $$2473 = ($$2473 - +($80 | 0)) * 16.0; //@line 13741
     if (($86 - $9 | 0) == 1) {
      if ($79 & ($77 & $$2473 == 0.0)) {
       $$1524 = $86; //@line 13750
      } else {
       HEAP8[$86 >> 0] = 46; //@line 13753
       $$1524 = $$0523 + 2 | 0; //@line 13754
      }
     } else {
      $$1524 = $86; //@line 13757
     }
     if (!($$2473 != 0.0)) {
      break;
     } else {
      $$0523 = $$1524; //@line 13761
     }
    }
    $$pre693 = $$1524; //@line 13767
    if (!$3) {
     label = 24; //@line 13769
    } else {
     if ((-2 - $9 + $$pre693 | 0) < ($3 | 0)) {
      $$pre$phi691Z2D = $$pre693 - $9 | 0; //@line 13777
      $$sink = $3 + 2 | 0; //@line 13777
     } else {
      label = 24; //@line 13779
     }
    }
    if ((label | 0) == 24) {
     $101 = $$pre693 - $9 | 0; //@line 13783
     $$pre$phi691Z2D = $101; //@line 13784
     $$sink = $101; //@line 13784
    }
    $104 = $11 - $76 | 0; //@line 13788
    $106 = $104 + $44 + $$sink | 0; //@line 13790
    _pad_676($0, 32, $2, $106, $4); //@line 13791
    _out_670($0, $$0521$, $44); //@line 13792
    _pad_676($0, 48, $2, $106, $4 ^ 65536); //@line 13794
    _out_670($0, $8, $$pre$phi691Z2D); //@line 13795
    _pad_676($0, 48, $$sink - $$pre$phi691Z2D | 0, 0, 0); //@line 13797
    _out_670($0, $76, $104); //@line 13798
    _pad_676($0, 32, $2, $106, $4 ^ 8192); //@line 13800
    $$sink560 = $106; //@line 13801
    break;
   }
   $$540 = ($3 | 0) < 0 ? 6 : $3; //@line 13805
   if ($36) {
    $113 = (HEAP32[$7 >> 2] | 0) + -28 | 0; //@line 13809
    HEAP32[$7 >> 2] = $113; //@line 13810
    $$3 = $35 * 268435456.0; //@line 13811
    $$pr = $113; //@line 13811
   } else {
    $$3 = $35; //@line 13814
    $$pr = HEAP32[$7 >> 2] | 0; //@line 13814
   }
   $$561 = ($$pr | 0) < 0 ? $6 : $6 + 288 | 0; //@line 13818
   $$0498 = $$561; //@line 13819
   $$4 = $$3; //@line 13819
   do {
    $116 = ~~$$4 >>> 0; //@line 13821
    HEAP32[$$0498 >> 2] = $116; //@line 13822
    $$0498 = $$0498 + 4 | 0; //@line 13823
    $$4 = ($$4 - +($116 >>> 0)) * 1.0e9; //@line 13826
   } while ($$4 != 0.0);
   if (($$pr | 0) > 0) {
    $$1482663 = $$561; //@line 13836
    $$1499662 = $$0498; //@line 13836
    $124 = $$pr; //@line 13836
    while (1) {
     $125 = ($124 | 0) < 29 ? $124 : 29; //@line 13839
     $$0488655 = $$1499662 + -4 | 0; //@line 13840
     if ($$0488655 >>> 0 < $$1482663 >>> 0) {
      $$2483$ph = $$1482663; //@line 13843
     } else {
      $$0488657 = $$0488655; //@line 13845
      $$0497656 = 0; //@line 13845
      do {
       $128 = _bitshift64Shl(HEAP32[$$0488657 >> 2] | 0, 0, $125 | 0) | 0; //@line 13848
       $130 = _i64Add($128 | 0, tempRet0 | 0, $$0497656 | 0, 0) | 0; //@line 13850
       $131 = tempRet0; //@line 13851
       $132 = ___uremdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 13852
       HEAP32[$$0488657 >> 2] = $132; //@line 13854
       $$0497656 = ___udivdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 13855
       $$0488657 = $$0488657 + -4 | 0; //@line 13857
      } while ($$0488657 >>> 0 >= $$1482663 >>> 0);
      if (!$$0497656) {
       $$2483$ph = $$1482663; //@line 13867
      } else {
       $138 = $$1482663 + -4 | 0; //@line 13869
       HEAP32[$138 >> 2] = $$0497656; //@line 13870
       $$2483$ph = $138; //@line 13871
      }
     }
     $$2500 = $$1499662; //@line 13874
     while (1) {
      if ($$2500 >>> 0 <= $$2483$ph >>> 0) {
       break;
      }
      $140 = $$2500 + -4 | 0; //@line 13880
      if (!(HEAP32[$140 >> 2] | 0)) {
       $$2500 = $140; //@line 13884
      } else {
       break;
      }
     }
     $144 = (HEAP32[$7 >> 2] | 0) - $125 | 0; //@line 13890
     HEAP32[$7 >> 2] = $144; //@line 13891
     if (($144 | 0) > 0) {
      $$1482663 = $$2483$ph; //@line 13894
      $$1499662 = $$2500; //@line 13894
      $124 = $144; //@line 13894
     } else {
      $$1482$lcssa = $$2483$ph; //@line 13896
      $$1499$lcssa = $$2500; //@line 13896
      $$pr566 = $144; //@line 13896
      break;
     }
    }
   } else {
    $$1482$lcssa = $$561; //@line 13901
    $$1499$lcssa = $$0498; //@line 13901
    $$pr566 = $$pr; //@line 13901
   }
   if (($$pr566 | 0) < 0) {
    $149 = (($$540 + 25 | 0) / 9 | 0) + 1 | 0; //@line 13907
    $150 = ($39 | 0) == 102; //@line 13908
    $$3484650 = $$1482$lcssa; //@line 13909
    $$3501649 = $$1499$lcssa; //@line 13909
    $152 = $$pr566; //@line 13909
    while (1) {
     $151 = 0 - $152 | 0; //@line 13911
     $154 = ($151 | 0) < 9 ? $151 : 9; //@line 13913
     if ($$3484650 >>> 0 < $$3501649 >>> 0) {
      $160 = (1 << $154) + -1 | 0; //@line 13917
      $161 = 1e9 >>> $154; //@line 13918
      $$0487644 = 0; //@line 13919
      $$1489643 = $$3484650; //@line 13919
      do {
       $162 = HEAP32[$$1489643 >> 2] | 0; //@line 13921
       HEAP32[$$1489643 >> 2] = ($162 >>> $154) + $$0487644; //@line 13925
       $$0487644 = Math_imul($162 & $160, $161) | 0; //@line 13926
       $$1489643 = $$1489643 + 4 | 0; //@line 13927
      } while ($$1489643 >>> 0 < $$3501649 >>> 0);
      $$$3484 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 13938
      if (!$$0487644) {
       $$$3484700 = $$$3484; //@line 13941
       $$4502 = $$3501649; //@line 13941
      } else {
       HEAP32[$$3501649 >> 2] = $$0487644; //@line 13944
       $$$3484700 = $$$3484; //@line 13945
       $$4502 = $$3501649 + 4 | 0; //@line 13945
      }
     } else {
      $$$3484700 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 13952
      $$4502 = $$3501649; //@line 13952
     }
     $174 = $150 ? $$561 : $$$3484700; //@line 13954
     $$$4502 = ($$4502 - $174 >> 2 | 0) > ($149 | 0) ? $174 + ($149 << 2) | 0 : $$4502; //@line 13961
     $152 = (HEAP32[$7 >> 2] | 0) + $154 | 0; //@line 13963
     HEAP32[$7 >> 2] = $152; //@line 13964
     if (($152 | 0) >= 0) {
      $$3484$lcssa = $$$3484700; //@line 13969
      $$3501$lcssa = $$$4502; //@line 13969
      break;
     } else {
      $$3484650 = $$$3484700; //@line 13967
      $$3501649 = $$$4502; //@line 13967
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa; //@line 13974
    $$3501$lcssa = $$1499$lcssa; //@line 13974
   }
   $185 = $$561; //@line 13977
   if ($$3484$lcssa >>> 0 < $$3501$lcssa >>> 0) {
    $189 = ($185 - $$3484$lcssa >> 2) * 9 | 0; //@line 13982
    $190 = HEAP32[$$3484$lcssa >> 2] | 0; //@line 13983
    if ($190 >>> 0 < 10) {
     $$1515 = $189; //@line 13986
    } else {
     $$0514639 = $189; //@line 13988
     $$0530638 = 10; //@line 13988
     while (1) {
      $$0530638 = $$0530638 * 10 | 0; //@line 13990
      $193 = $$0514639 + 1 | 0; //@line 13991
      if ($190 >>> 0 < $$0530638 >>> 0) {
       $$1515 = $193; //@line 13994
       break;
      } else {
       $$0514639 = $193; //@line 13997
      }
     }
    }
   } else {
    $$1515 = 0; //@line 14002
   }
   $198 = ($39 | 0) == 103; //@line 14007
   $199 = ($$540 | 0) != 0; //@line 14008
   $201 = $$540 - (($39 | 0) != 102 ? $$1515 : 0) + (($199 & $198) << 31 >> 31) | 0; //@line 14011
   if (($201 | 0) < ((($$3501$lcssa - $185 >> 2) * 9 | 0) + -9 | 0)) {
    $209 = $201 + 9216 | 0; //@line 14020
    $212 = $$561 + 4 + ((($209 | 0) / 9 | 0) + -1024 << 2) | 0; //@line 14023
    $213 = ($209 | 0) % 9 | 0; //@line 14024
    if (($213 | 0) < 8) {
     $$0527$in633 = $213; //@line 14027
     $$1531632 = 10; //@line 14027
     while (1) {
      $215 = $$1531632 * 10 | 0; //@line 14030
      if (($$0527$in633 | 0) < 7) {
       $$0527$in633 = $$0527$in633 + 1 | 0; //@line 14033
       $$1531632 = $215; //@line 14033
      } else {
       $$1531$lcssa = $215; //@line 14035
       break;
      }
     }
    } else {
     $$1531$lcssa = 10; //@line 14040
    }
    $217 = HEAP32[$212 >> 2] | 0; //@line 14042
    $218 = ($217 >>> 0) % ($$1531$lcssa >>> 0) | 0; //@line 14043
    $221 = ($212 + 4 | 0) == ($$3501$lcssa | 0); //@line 14046
    if ($221 & ($218 | 0) == 0) {
     $$4492 = $212; //@line 14049
     $$4518 = $$1515; //@line 14049
     $$8 = $$3484$lcssa; //@line 14049
    } else {
     $$543 = ((($217 >>> 0) / ($$1531$lcssa >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0; //@line 14054
     $225 = ($$1531$lcssa | 0) / 2 | 0; //@line 14055
     $$$564 = $218 >>> 0 < $225 >>> 0 ? .5 : $221 & ($218 | 0) == ($225 | 0) ? 1.0 : 1.5; //@line 14060
     if (!$$0520) {
      $$1467 = $$$564; //@line 14063
      $$1469 = $$543; //@line 14063
     } else {
      $230 = (HEAP8[$$0521 >> 0] | 0) == 45; //@line 14066
      $$1467 = $230 ? -$$$564 : $$$564; //@line 14071
      $$1469 = $230 ? -$$543 : $$543; //@line 14071
     }
     $233 = $217 - $218 | 0; //@line 14073
     HEAP32[$212 >> 2] = $233; //@line 14074
     if ($$1469 + $$1467 != $$1469) {
      $236 = $233 + $$1531$lcssa | 0; //@line 14078
      HEAP32[$212 >> 2] = $236; //@line 14079
      if ($236 >>> 0 > 999999999) {
       $$5486626 = $$3484$lcssa; //@line 14082
       $$sink547625 = $212; //@line 14082
       while (1) {
        $238 = $$sink547625 + -4 | 0; //@line 14084
        HEAP32[$$sink547625 >> 2] = 0; //@line 14085
        if ($238 >>> 0 < $$5486626 >>> 0) {
         $240 = $$5486626 + -4 | 0; //@line 14088
         HEAP32[$240 >> 2] = 0; //@line 14089
         $$6 = $240; //@line 14090
        } else {
         $$6 = $$5486626; //@line 14092
        }
        $242 = (HEAP32[$238 >> 2] | 0) + 1 | 0; //@line 14095
        HEAP32[$238 >> 2] = $242; //@line 14096
        if ($242 >>> 0 > 999999999) {
         $$5486626 = $$6; //@line 14099
         $$sink547625 = $238; //@line 14099
        } else {
         $$5486$lcssa = $$6; //@line 14101
         $$sink547$lcssa = $238; //@line 14101
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa; //@line 14106
       $$sink547$lcssa = $212; //@line 14106
      }
      $247 = ($185 - $$5486$lcssa >> 2) * 9 | 0; //@line 14111
      $248 = HEAP32[$$5486$lcssa >> 2] | 0; //@line 14112
      if ($248 >>> 0 < 10) {
       $$4492 = $$sink547$lcssa; //@line 14115
       $$4518 = $247; //@line 14115
       $$8 = $$5486$lcssa; //@line 14115
      } else {
       $$2516621 = $247; //@line 14117
       $$2532620 = 10; //@line 14117
       while (1) {
        $$2532620 = $$2532620 * 10 | 0; //@line 14119
        $251 = $$2516621 + 1 | 0; //@line 14120
        if ($248 >>> 0 < $$2532620 >>> 0) {
         $$4492 = $$sink547$lcssa; //@line 14123
         $$4518 = $251; //@line 14123
         $$8 = $$5486$lcssa; //@line 14123
         break;
        } else {
         $$2516621 = $251; //@line 14126
        }
       }
      }
     } else {
      $$4492 = $212; //@line 14131
      $$4518 = $$1515; //@line 14131
      $$8 = $$3484$lcssa; //@line 14131
     }
    }
    $253 = $$4492 + 4 | 0; //@line 14134
    $$5519$ph = $$4518; //@line 14137
    $$7505$ph = $$3501$lcssa >>> 0 > $253 >>> 0 ? $253 : $$3501$lcssa; //@line 14137
    $$9$ph = $$8; //@line 14137
   } else {
    $$5519$ph = $$1515; //@line 14139
    $$7505$ph = $$3501$lcssa; //@line 14139
    $$9$ph = $$3484$lcssa; //@line 14139
   }
   $$7505 = $$7505$ph; //@line 14141
   while (1) {
    if ($$7505 >>> 0 <= $$9$ph >>> 0) {
     $$lcssa675 = 0; //@line 14145
     break;
    }
    $256 = $$7505 + -4 | 0; //@line 14148
    if (!(HEAP32[$256 >> 2] | 0)) {
     $$7505 = $256; //@line 14152
    } else {
     $$lcssa675 = 1; //@line 14154
     break;
    }
   }
   $259 = 0 - $$5519$ph | 0; //@line 14158
   do {
    if ($198) {
     $$540$ = $$540 + (($199 ^ 1) & 1) | 0; //@line 14163
     if (($$540$ | 0) > ($$5519$ph | 0) & ($$5519$ph | 0) > -5) {
      $$0479 = $5 + -1 | 0; //@line 14171
      $$2476 = $$540$ + -1 - $$5519$ph | 0; //@line 14171
     } else {
      $$0479 = $5 + -2 | 0; //@line 14175
      $$2476 = $$540$ + -1 | 0; //@line 14175
     }
     $267 = $4 & 8; //@line 14177
     if (!$267) {
      if ($$lcssa675) {
       $270 = HEAP32[$$7505 + -4 >> 2] | 0; //@line 14182
       if (!$270) {
        $$2529 = 9; //@line 14185
       } else {
        if (!(($270 >>> 0) % 10 | 0)) {
         $$1528617 = 0; //@line 14190
         $$3533616 = 10; //@line 14190
         while (1) {
          $$3533616 = $$3533616 * 10 | 0; //@line 14192
          $275 = $$1528617 + 1 | 0; //@line 14193
          if (($270 >>> 0) % ($$3533616 >>> 0) | 0 | 0) {
           $$2529 = $275; //@line 14199
           break;
          } else {
           $$1528617 = $275; //@line 14197
          }
         }
        } else {
         $$2529 = 0; //@line 14204
        }
       }
      } else {
       $$2529 = 9; //@line 14208
      }
      $284 = (($$7505 - $185 >> 2) * 9 | 0) + -9 | 0; //@line 14216
      if (($$0479 | 32 | 0) == 102) {
       $285 = $284 - $$2529 | 0; //@line 14218
       $$548 = ($285 | 0) > 0 ? $285 : 0; //@line 14220
       $$1480 = $$0479; //@line 14223
       $$3477 = ($$2476 | 0) < ($$548 | 0) ? $$2476 : $$548; //@line 14223
       $$pre$phi698Z2D = 0; //@line 14223
       break;
      } else {
       $289 = $284 + $$5519$ph - $$2529 | 0; //@line 14227
       $$550 = ($289 | 0) > 0 ? $289 : 0; //@line 14229
       $$1480 = $$0479; //@line 14232
       $$3477 = ($$2476 | 0) < ($$550 | 0) ? $$2476 : $$550; //@line 14232
       $$pre$phi698Z2D = 0; //@line 14232
       break;
      }
     } else {
      $$1480 = $$0479; //@line 14236
      $$3477 = $$2476; //@line 14236
      $$pre$phi698Z2D = $267; //@line 14236
     }
    } else {
     $$1480 = $5; //@line 14240
     $$3477 = $$540; //@line 14240
     $$pre$phi698Z2D = $4 & 8; //@line 14240
    }
   } while (0);
   $292 = $$3477 | $$pre$phi698Z2D; //@line 14243
   $294 = ($292 | 0) != 0 & 1; //@line 14245
   $296 = ($$1480 | 32 | 0) == 102; //@line 14247
   if ($296) {
    $$2513 = 0; //@line 14251
    $$pn = ($$5519$ph | 0) > 0 ? $$5519$ph : 0; //@line 14251
   } else {
    $300 = ($$5519$ph | 0) < 0 ? $259 : $$5519$ph; //@line 14254
    $303 = _fmt_u($300, (($300 | 0) < 0) << 31 >> 31, $11) | 0; //@line 14257
    $304 = $11; //@line 14258
    if (($304 - $303 | 0) < 2) {
     $$1512610 = $303; //@line 14263
     while (1) {
      $308 = $$1512610 + -1 | 0; //@line 14265
      HEAP8[$308 >> 0] = 48; //@line 14266
      if (($304 - $308 | 0) < 2) {
       $$1512610 = $308; //@line 14271
      } else {
       $$1512$lcssa = $308; //@line 14273
       break;
      }
     }
    } else {
     $$1512$lcssa = $303; //@line 14278
    }
    HEAP8[$$1512$lcssa + -1 >> 0] = ($$5519$ph >> 31 & 2) + 43; //@line 14285
    $318 = $$1512$lcssa + -2 | 0; //@line 14287
    HEAP8[$318 >> 0] = $$1480; //@line 14288
    $$2513 = $318; //@line 14291
    $$pn = $304 - $318 | 0; //@line 14291
   }
   $323 = $$0520 + 1 + $$3477 + $294 + $$pn | 0; //@line 14296
   _pad_676($0, 32, $2, $323, $4); //@line 14297
   _out_670($0, $$0521, $$0520); //@line 14298
   _pad_676($0, 48, $2, $323, $4 ^ 65536); //@line 14300
   if ($296) {
    $$0496$$9 = $$9$ph >>> 0 > $$561 >>> 0 ? $$561 : $$9$ph; //@line 14303
    $326 = $8 + 9 | 0; //@line 14304
    $327 = $326; //@line 14305
    $328 = $8 + 8 | 0; //@line 14306
    $$5493600 = $$0496$$9; //@line 14307
    do {
     $330 = _fmt_u(HEAP32[$$5493600 >> 2] | 0, 0, $326) | 0; //@line 14310
     if (($$5493600 | 0) == ($$0496$$9 | 0)) {
      if (($330 | 0) == ($326 | 0)) {
       HEAP8[$328 >> 0] = 48; //@line 14315
       $$1465 = $328; //@line 14316
      } else {
       $$1465 = $330; //@line 14318
      }
     } else {
      if ($330 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $330 - $9 | 0) | 0; //@line 14325
       $$0464597 = $330; //@line 14326
       while (1) {
        $335 = $$0464597 + -1 | 0; //@line 14328
        if ($335 >>> 0 > $8 >>> 0) {
         $$0464597 = $335; //@line 14331
        } else {
         $$1465 = $335; //@line 14333
         break;
        }
       }
      } else {
       $$1465 = $330; //@line 14338
      }
     }
     _out_670($0, $$1465, $327 - $$1465 | 0); //@line 14343
     $$5493600 = $$5493600 + 4 | 0; //@line 14344
    } while ($$5493600 >>> 0 <= $$561 >>> 0);
    if ($292 | 0) {
     _out_670($0, 16367, 1); //@line 14354
    }
    if ($$5493600 >>> 0 < $$7505 >>> 0 & ($$3477 | 0) > 0) {
     $$4478593 = $$3477; //@line 14360
     $$6494592 = $$5493600; //@line 14360
     while (1) {
      $347 = _fmt_u(HEAP32[$$6494592 >> 2] | 0, 0, $326) | 0; //@line 14363
      if ($347 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $347 - $9 | 0) | 0; //@line 14368
       $$0463587 = $347; //@line 14369
       while (1) {
        $351 = $$0463587 + -1 | 0; //@line 14371
        if ($351 >>> 0 > $8 >>> 0) {
         $$0463587 = $351; //@line 14374
        } else {
         $$0463$lcssa = $351; //@line 14376
         break;
        }
       }
      } else {
       $$0463$lcssa = $347; //@line 14381
      }
      _out_670($0, $$0463$lcssa, ($$4478593 | 0) < 9 ? $$4478593 : 9); //@line 14385
      $$6494592 = $$6494592 + 4 | 0; //@line 14386
      $356 = $$4478593 + -9 | 0; //@line 14387
      if (!($$6494592 >>> 0 < $$7505 >>> 0 & ($$4478593 | 0) > 9)) {
       $$4478$lcssa = $356; //@line 14394
       break;
      } else {
       $$4478593 = $356; //@line 14392
      }
     }
    } else {
     $$4478$lcssa = $$3477; //@line 14399
    }
    _pad_676($0, 48, $$4478$lcssa + 9 | 0, 9, 0); //@line 14402
   } else {
    $$7505$ = $$lcssa675 ? $$7505 : $$9$ph + 4 | 0; //@line 14405
    if (($$3477 | 0) > -1) {
     $363 = $8 + 9 | 0; //@line 14408
     $364 = ($$pre$phi698Z2D | 0) == 0; //@line 14409
     $365 = $363; //@line 14410
     $366 = 0 - $9 | 0; //@line 14411
     $367 = $8 + 8 | 0; //@line 14412
     $$5605 = $$3477; //@line 14413
     $$7495604 = $$9$ph; //@line 14413
     while (1) {
      $369 = _fmt_u(HEAP32[$$7495604 >> 2] | 0, 0, $363) | 0; //@line 14416
      if (($369 | 0) == ($363 | 0)) {
       HEAP8[$367 >> 0] = 48; //@line 14419
       $$0 = $367; //@line 14420
      } else {
       $$0 = $369; //@line 14422
      }
      do {
       if (($$7495604 | 0) == ($$9$ph | 0)) {
        $375 = $$0 + 1 | 0; //@line 14427
        _out_670($0, $$0, 1); //@line 14428
        if ($364 & ($$5605 | 0) < 1) {
         $$2 = $375; //@line 14432
         break;
        }
        _out_670($0, 16367, 1); //@line 14435
        $$2 = $375; //@line 14436
       } else {
        if ($$0 >>> 0 <= $8 >>> 0) {
         $$2 = $$0; //@line 14440
         break;
        }
        _memset($8 | 0, 48, $$0 + $366 | 0) | 0; //@line 14445
        $$1601 = $$0; //@line 14446
        while (1) {
         $373 = $$1601 + -1 | 0; //@line 14448
         if ($373 >>> 0 > $8 >>> 0) {
          $$1601 = $373; //@line 14451
         } else {
          $$2 = $373; //@line 14453
          break;
         }
        }
       }
      } while (0);
      $378 = $365 - $$2 | 0; //@line 14460
      _out_670($0, $$2, ($$5605 | 0) > ($378 | 0) ? $378 : $$5605); //@line 14463
      $381 = $$5605 - $378 | 0; //@line 14464
      $$7495604 = $$7495604 + 4 | 0; //@line 14465
      if (!($$7495604 >>> 0 < $$7505$ >>> 0 & ($381 | 0) > -1)) {
       $$5$lcssa = $381; //@line 14472
       break;
      } else {
       $$5605 = $381; //@line 14470
      }
     }
    } else {
     $$5$lcssa = $$3477; //@line 14477
    }
    _pad_676($0, 48, $$5$lcssa + 18 | 0, 18, 0); //@line 14480
    _out_670($0, $$2513, $11 - $$2513 | 0); //@line 14484
   }
   _pad_676($0, 32, $2, $323, $4 ^ 8192); //@line 14487
   $$sink560 = $323; //@line 14488
  }
 } while (0);
 STACKTOP = sp; //@line 14493
 return (($$sink560 | 0) < ($2 | 0) ? $2 : $$sink560) | 0; //@line 14493
}
function _printf_core($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$$5 = 0, $$0 = 0, $$0228 = 0, $$0229316 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa356 = 0, $$0240315 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249303 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262309 = 0, $$0269 = 0, $$1 = 0, $$1230327 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241326 = 0, $$1244314 = 0, $$1248 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242302 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2261 = 0, $$2271 = 0, $$3265 = 0, $$3272 = 0, $$3300 = 0, $$4258354 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$pre342 = 0, $$pre345 = 0, $$pre348 = 0, $$sink = 0, $10 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $112 = 0, $115 = 0, $12 = 0, $125 = 0, $129 = 0, $13 = 0, $14 = 0, $140 = 0, $144 = 0, $151 = 0, $152 = 0, $154 = 0, $156 = 0, $158 = 0, $167 = 0, $168 = 0, $173 = 0, $176 = 0, $181 = 0, $182 = 0, $187 = 0, $189 = 0, $196 = 0, $197 = 0, $20 = 0, $208 = 0, $21 = 0, $220 = 0, $227 = 0, $229 = 0, $23 = 0, $232 = 0, $234 = 0, $24 = 0, $242 = 0, $244 = 0, $247 = 0, $248 = 0, $25 = 0, $252 = 0, $256 = 0, $258 = 0, $261 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $275 = 0, $276 = 0, $281 = 0, $283 = 0, $284 = 0, $290 = 0, $30 = 0, $302 = 0, $305 = 0, $306 = 0, $318 = 0, $320 = 0, $325 = 0, $329 = 0, $331 = 0, $343 = 0, $345 = 0, $352 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $43 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $6 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $79 = 0, $8 = 0, $83 = 0, $9 = 0, $or$cond = 0, $or$cond278 = 0, $storemerge274 = 0, label = 0, sp = 0, $158$looptemp = 0;
 sp = STACKTOP; //@line 12171
 STACKTOP = STACKTOP + 64 | 0; //@line 12172
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 12172
 $5 = sp + 16 | 0; //@line 12173
 $6 = sp; //@line 12174
 $7 = sp + 24 | 0; //@line 12175
 $8 = sp + 8 | 0; //@line 12176
 $9 = sp + 20 | 0; //@line 12177
 HEAP32[$5 >> 2] = $1; //@line 12178
 $10 = ($0 | 0) != 0; //@line 12179
 $11 = $7 + 40 | 0; //@line 12180
 $12 = $11; //@line 12181
 $13 = $7 + 39 | 0; //@line 12182
 $14 = $8 + 4 | 0; //@line 12183
 $$0243 = 0; //@line 12184
 $$0247 = 0; //@line 12184
 $$0269 = 0; //@line 12184
 L1 : while (1) {
  do {
   if (($$0247 | 0) > -1) {
    if (($$0243 | 0) > (2147483647 - $$0247 | 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 12193
     $$1248 = -1; //@line 12194
     break;
    } else {
     $$1248 = $$0243 + $$0247 | 0; //@line 12198
     break;
    }
   } else {
    $$1248 = $$0247; //@line 12202
   }
  } while (0);
  $20 = HEAP32[$5 >> 2] | 0; //@line 12205
  $21 = HEAP8[$20 >> 0] | 0; //@line 12206
  if (!($21 << 24 >> 24)) {
   label = 88; //@line 12209
   break;
  } else {
   $23 = $21; //@line 12212
   $25 = $20; //@line 12212
  }
  L9 : while (1) {
   switch ($23 << 24 >> 24) {
   case 37:
    {
     $$0249303 = $25; //@line 12217
     $27 = $25; //@line 12217
     label = 9; //@line 12218
     break L9;
     break;
    }
   case 0:
    {
     $$0249$lcssa = $25; //@line 12223
     break L9;
     break;
    }
   default:
    {}
   }
   $24 = $25 + 1 | 0; //@line 12230
   HEAP32[$5 >> 2] = $24; //@line 12231
   $23 = HEAP8[$24 >> 0] | 0; //@line 12233
   $25 = $24; //@line 12233
  }
  L12 : do {
   if ((label | 0) == 9) {
    while (1) {
     label = 0; //@line 12238
     if ((HEAP8[$27 + 1 >> 0] | 0) != 37) {
      $$0249$lcssa = $$0249303; //@line 12243
      break L12;
     }
     $30 = $$0249303 + 1 | 0; //@line 12246
     $27 = $27 + 2 | 0; //@line 12247
     HEAP32[$5 >> 2] = $27; //@line 12248
     if ((HEAP8[$27 >> 0] | 0) != 37) {
      $$0249$lcssa = $30; //@line 12255
      break;
     } else {
      $$0249303 = $30; //@line 12252
      label = 9; //@line 12253
     }
    }
   }
  } while (0);
  $36 = $$0249$lcssa - $20 | 0; //@line 12263
  if ($10) {
   _out_670($0, $20, $36); //@line 12265
  }
  if ($36 | 0) {
   $$0243 = $36; //@line 12269
   $$0247 = $$1248; //@line 12269
   continue;
  }
  $43 = (_isdigit(HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] | 0) | 0) == 0; //@line 12277
  $$pre342 = HEAP32[$5 >> 2] | 0; //@line 12278
  if ($43) {
   $$0253 = -1; //@line 12280
   $$1270 = $$0269; //@line 12280
   $$sink = 1; //@line 12280
  } else {
   if ((HEAP8[$$pre342 + 2 >> 0] | 0) == 36) {
    $$0253 = (HEAP8[$$pre342 + 1 >> 0] | 0) + -48 | 0; //@line 12290
    $$1270 = 1; //@line 12290
    $$sink = 3; //@line 12290
   } else {
    $$0253 = -1; //@line 12292
    $$1270 = $$0269; //@line 12292
    $$sink = 1; //@line 12292
   }
  }
  $51 = $$pre342 + $$sink | 0; //@line 12295
  HEAP32[$5 >> 2] = $51; //@line 12296
  $52 = HEAP8[$51 >> 0] | 0; //@line 12297
  $54 = ($52 << 24 >> 24) + -32 | 0; //@line 12299
  if ($54 >>> 0 > 31 | (1 << $54 & 75913 | 0) == 0) {
   $$0262$lcssa = 0; //@line 12306
   $$lcssa291 = $52; //@line 12306
   $$lcssa292 = $51; //@line 12306
  } else {
   $$0262309 = 0; //@line 12308
   $60 = $52; //@line 12308
   $65 = $51; //@line 12308
   while (1) {
    $63 = 1 << ($60 << 24 >> 24) + -32 | $$0262309; //@line 12313
    $64 = $65 + 1 | 0; //@line 12314
    HEAP32[$5 >> 2] = $64; //@line 12315
    $66 = HEAP8[$64 >> 0] | 0; //@line 12316
    $68 = ($66 << 24 >> 24) + -32 | 0; //@line 12318
    if ($68 >>> 0 > 31 | (1 << $68 & 75913 | 0) == 0) {
     $$0262$lcssa = $63; //@line 12325
     $$lcssa291 = $66; //@line 12325
     $$lcssa292 = $64; //@line 12325
     break;
    } else {
     $$0262309 = $63; //@line 12328
     $60 = $66; //@line 12328
     $65 = $64; //@line 12328
    }
   }
  }
  if ($$lcssa291 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[$$lcssa292 + 1 >> 0] | 0) | 0)) {
    label = 23; //@line 12340
   } else {
    $79 = HEAP32[$5 >> 2] | 0; //@line 12342
    if ((HEAP8[$79 + 2 >> 0] | 0) == 36) {
     $83 = $79 + 1 | 0; //@line 12347
     HEAP32[$4 + ((HEAP8[$83 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 12352
     $$0259 = HEAP32[$3 + ((HEAP8[$83 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 12364
     $$2271 = 1; //@line 12364
     $storemerge274 = $79 + 3 | 0; //@line 12364
    } else {
     label = 23; //@line 12366
    }
   }
   if ((label | 0) == 23) {
    label = 0; //@line 12370
    if ($$1270 | 0) {
     $$0 = -1; //@line 12373
     break;
    }
    if ($10) {
     $105 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12388
     $106 = HEAP32[$105 >> 2] | 0; //@line 12389
     HEAP32[$2 >> 2] = $105 + 4; //@line 12391
     $363 = $106; //@line 12392
    } else {
     $363 = 0; //@line 12394
    }
    $$0259 = $363; //@line 12398
    $$2271 = 0; //@line 12398
    $storemerge274 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 12398
   }
   HEAP32[$5 >> 2] = $storemerge274; //@line 12400
   $109 = ($$0259 | 0) < 0; //@line 12401
   $$1260 = $109 ? 0 - $$0259 | 0 : $$0259; //@line 12406
   $$1263 = $109 ? $$0262$lcssa | 8192 : $$0262$lcssa; //@line 12406
   $$3272 = $$2271; //@line 12406
   $115 = $storemerge274; //@line 12406
  } else {
   $112 = _getint_671($5) | 0; //@line 12408
   if (($112 | 0) < 0) {
    $$0 = -1; //@line 12411
    break;
   }
   $$1260 = $112; //@line 12415
   $$1263 = $$0262$lcssa; //@line 12415
   $$3272 = $$1270; //@line 12415
   $115 = HEAP32[$5 >> 2] | 0; //@line 12415
  }
  do {
   if ((HEAP8[$115 >> 0] | 0) == 46) {
    if ((HEAP8[$115 + 1 >> 0] | 0) != 42) {
     HEAP32[$5 >> 2] = $115 + 1; //@line 12426
     $156 = _getint_671($5) | 0; //@line 12427
     $$0254 = $156; //@line 12429
     $$pre345 = HEAP32[$5 >> 2] | 0; //@line 12429
     break;
    }
    if (_isdigit(HEAP8[$115 + 2 >> 0] | 0) | 0) {
     $125 = HEAP32[$5 >> 2] | 0; //@line 12438
     if ((HEAP8[$125 + 3 >> 0] | 0) == 36) {
      $129 = $125 + 2 | 0; //@line 12443
      HEAP32[$4 + ((HEAP8[$129 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 12448
      $140 = HEAP32[$3 + ((HEAP8[$129 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 12455
      $144 = $125 + 4 | 0; //@line 12459
      HEAP32[$5 >> 2] = $144; //@line 12460
      $$0254 = $140; //@line 12461
      $$pre345 = $144; //@line 12461
      break;
     }
    }
    if ($$3272 | 0) {
     $$0 = -1; //@line 12467
     break L1;
    }
    if ($10) {
     $151 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12482
     $152 = HEAP32[$151 >> 2] | 0; //@line 12483
     HEAP32[$2 >> 2] = $151 + 4; //@line 12485
     $364 = $152; //@line 12486
    } else {
     $364 = 0; //@line 12488
    }
    $154 = (HEAP32[$5 >> 2] | 0) + 2 | 0; //@line 12491
    HEAP32[$5 >> 2] = $154; //@line 12492
    $$0254 = $364; //@line 12493
    $$pre345 = $154; //@line 12493
   } else {
    $$0254 = -1; //@line 12495
    $$pre345 = $115; //@line 12495
   }
  } while (0);
  $$0252 = 0; //@line 12498
  $158 = $$pre345; //@line 12498
  while (1) {
   if (((HEAP8[$158 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $$0 = -1; //@line 12505
    break L1;
   }
   $158$looptemp = $158;
   $158 = $158 + 1 | 0; //@line 12508
   HEAP32[$5 >> 2] = $158; //@line 12509
   $167 = HEAP8[(HEAP8[$158$looptemp >> 0] | 0) + -65 + (15835 + ($$0252 * 58 | 0)) >> 0] | 0; //@line 12514
   $168 = $167 & 255; //@line 12515
   if (($168 + -1 | 0) >>> 0 >= 8) {
    break;
   } else {
    $$0252 = $168; //@line 12519
   }
  }
  if (!($167 << 24 >> 24)) {
   $$0 = -1; //@line 12526
   break;
  }
  $173 = ($$0253 | 0) > -1; //@line 12530
  do {
   if ($167 << 24 >> 24 == 19) {
    if ($173) {
     $$0 = -1; //@line 12534
     break L1;
    } else {
     label = 50; //@line 12537
    }
   } else {
    if ($173) {
     HEAP32[$4 + ($$0253 << 2) >> 2] = $168; //@line 12542
     $176 = $3 + ($$0253 << 3) | 0; //@line 12544
     $181 = HEAP32[$176 + 4 >> 2] | 0; //@line 12549
     $182 = $6; //@line 12550
     HEAP32[$182 >> 2] = HEAP32[$176 >> 2]; //@line 12552
     HEAP32[$182 + 4 >> 2] = $181; //@line 12555
     label = 50; //@line 12556
     break;
    }
    if (!$10) {
     $$0 = 0; //@line 12560
     break L1;
    }
    _pop_arg_673($6, $168, $2); //@line 12563
    $187 = HEAP32[$5 >> 2] | 0; //@line 12565
   }
  } while (0);
  if ((label | 0) == 50) {
   label = 0; //@line 12569
   if ($10) {
    $187 = $158; //@line 12571
   } else {
    $$0243 = 0; //@line 12573
    $$0247 = $$1248; //@line 12573
    $$0269 = $$3272; //@line 12573
    continue;
   }
  }
  $189 = HEAP8[$187 + -1 >> 0] | 0; //@line 12579
  $$0235 = ($$0252 | 0) != 0 & ($189 & 15 | 0) == 3 ? $189 & -33 : $189; //@line 12585
  $196 = $$1263 & -65537; //@line 12588
  $$1263$ = ($$1263 & 8192 | 0) == 0 ? $$1263 : $196; //@line 12589
  L73 : do {
   switch ($$0235 | 0) {
   case 110:
    {
     switch (($$0252 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 12597
       $$0243 = 0; //@line 12598
       $$0247 = $$1248; //@line 12598
       $$0269 = $$3272; //@line 12598
       continue L1;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 12604
       $$0243 = 0; //@line 12605
       $$0247 = $$1248; //@line 12605
       $$0269 = $$3272; //@line 12605
       continue L1;
       break;
      }
     case 2:
      {
       $208 = HEAP32[$6 >> 2] | 0; //@line 12613
       HEAP32[$208 >> 2] = $$1248; //@line 12615
       HEAP32[$208 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 12618
       $$0243 = 0; //@line 12619
       $$0247 = $$1248; //@line 12619
       $$0269 = $$3272; //@line 12619
       continue L1;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$6 >> 2] >> 1] = $$1248; //@line 12626
       $$0243 = 0; //@line 12627
       $$0247 = $$1248; //@line 12627
       $$0269 = $$3272; //@line 12627
       continue L1;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$6 >> 2] >> 0] = $$1248; //@line 12634
       $$0243 = 0; //@line 12635
       $$0247 = $$1248; //@line 12635
       $$0269 = $$3272; //@line 12635
       continue L1;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 12641
       $$0243 = 0; //@line 12642
       $$0247 = $$1248; //@line 12642
       $$0269 = $$3272; //@line 12642
       continue L1;
       break;
      }
     case 7:
      {
       $220 = HEAP32[$6 >> 2] | 0; //@line 12650
       HEAP32[$220 >> 2] = $$1248; //@line 12652
       HEAP32[$220 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 12655
       $$0243 = 0; //@line 12656
       $$0247 = $$1248; //@line 12656
       $$0269 = $$3272; //@line 12656
       continue L1;
       break;
      }
     default:
      {
       $$0243 = 0; //@line 12661
       $$0247 = $$1248; //@line 12661
       $$0269 = $$3272; //@line 12661
       continue L1;
      }
     }
     break;
    }
   case 112:
    {
     $$1236 = 120; //@line 12671
     $$1255 = $$0254 >>> 0 > 8 ? $$0254 : 8; //@line 12671
     $$3265 = $$1263$ | 8; //@line 12671
     label = 62; //@line 12672
     break;
    }
   case 88:
   case 120:
    {
     $$1236 = $$0235; //@line 12676
     $$1255 = $$0254; //@line 12676
     $$3265 = $$1263$; //@line 12676
     label = 62; //@line 12677
     break;
    }
   case 111:
    {
     $242 = $6; //@line 12681
     $244 = HEAP32[$242 >> 2] | 0; //@line 12683
     $247 = HEAP32[$242 + 4 >> 2] | 0; //@line 12686
     $248 = _fmt_o($244, $247, $11) | 0; //@line 12687
     $252 = $12 - $248 | 0; //@line 12691
     $$0228 = $248; //@line 12696
     $$1233 = 0; //@line 12696
     $$1238 = 16299; //@line 12696
     $$2256 = ($$1263$ & 8 | 0) == 0 | ($$0254 | 0) > ($252 | 0) ? $$0254 : $252 + 1 | 0; //@line 12696
     $$4266 = $$1263$; //@line 12696
     $281 = $244; //@line 12696
     $283 = $247; //@line 12696
     label = 68; //@line 12697
     break;
    }
   case 105:
   case 100:
    {
     $256 = $6; //@line 12701
     $258 = HEAP32[$256 >> 2] | 0; //@line 12703
     $261 = HEAP32[$256 + 4 >> 2] | 0; //@line 12706
     if (($261 | 0) < 0) {
      $263 = _i64Subtract(0, 0, $258 | 0, $261 | 0) | 0; //@line 12709
      $264 = tempRet0; //@line 12710
      $265 = $6; //@line 12711
      HEAP32[$265 >> 2] = $263; //@line 12713
      HEAP32[$265 + 4 >> 2] = $264; //@line 12716
      $$0232 = 1; //@line 12717
      $$0237 = 16299; //@line 12717
      $275 = $263; //@line 12717
      $276 = $264; //@line 12717
      label = 67; //@line 12718
      break L73;
     } else {
      $$0232 = ($$1263$ & 2049 | 0) != 0 & 1; //@line 12730
      $$0237 = ($$1263$ & 2048 | 0) == 0 ? ($$1263$ & 1 | 0) == 0 ? 16299 : 16301 : 16300; //@line 12730
      $275 = $258; //@line 12730
      $276 = $261; //@line 12730
      label = 67; //@line 12731
      break L73;
     }
     break;
    }
   case 117:
    {
     $197 = $6; //@line 12737
     $$0232 = 0; //@line 12743
     $$0237 = 16299; //@line 12743
     $275 = HEAP32[$197 >> 2] | 0; //@line 12743
     $276 = HEAP32[$197 + 4 >> 2] | 0; //@line 12743
     label = 67; //@line 12744
     break;
    }
   case 99:
    {
     HEAP8[$13 >> 0] = HEAP32[$6 >> 2]; //@line 12755
     $$2 = $13; //@line 12756
     $$2234 = 0; //@line 12756
     $$2239 = 16299; //@line 12756
     $$2251 = $11; //@line 12756
     $$5 = 1; //@line 12756
     $$6268 = $196; //@line 12756
     break;
    }
   case 109:
    {
     $$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0; //@line 12763
     label = 72; //@line 12764
     break;
    }
   case 115:
    {
     $302 = HEAP32[$6 >> 2] | 0; //@line 12768
     $$1 = $302 | 0 ? $302 : 16309; //@line 12771
     label = 72; //@line 12772
     break;
    }
   case 67:
    {
     HEAP32[$8 >> 2] = HEAP32[$6 >> 2]; //@line 12782
     HEAP32[$14 >> 2] = 0; //@line 12783
     HEAP32[$6 >> 2] = $8; //@line 12784
     $$4258354 = -1; //@line 12785
     $365 = $8; //@line 12785
     label = 76; //@line 12786
     break;
    }
   case 83:
    {
     $$pre348 = HEAP32[$6 >> 2] | 0; //@line 12790
     if (!$$0254) {
      _pad_676($0, 32, $$1260, 0, $$1263$); //@line 12793
      $$0240$lcssa356 = 0; //@line 12794
      label = 85; //@line 12795
     } else {
      $$4258354 = $$0254; //@line 12797
      $365 = $$pre348; //@line 12797
      label = 76; //@line 12798
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $$0243 = _fmt_fp($0, +HEAPF64[$6 >> 3], $$1260, $$0254, $$1263$, $$0235) | 0; //@line 12805
     $$0247 = $$1248; //@line 12805
     $$0269 = $$3272; //@line 12805
     continue L1;
     break;
    }
   default:
    {
     $$2 = $20; //@line 12810
     $$2234 = 0; //@line 12810
     $$2239 = 16299; //@line 12810
     $$2251 = $11; //@line 12810
     $$5 = $$0254; //@line 12810
     $$6268 = $$1263$; //@line 12810
    }
   }
  } while (0);
  L97 : do {
   if ((label | 0) == 62) {
    label = 0; //@line 12816
    $227 = $6; //@line 12817
    $229 = HEAP32[$227 >> 2] | 0; //@line 12819
    $232 = HEAP32[$227 + 4 >> 2] | 0; //@line 12822
    $234 = _fmt_x($229, $232, $11, $$1236 & 32) | 0; //@line 12824
    $or$cond278 = ($$3265 & 8 | 0) == 0 | ($229 | 0) == 0 & ($232 | 0) == 0; //@line 12830
    $$0228 = $234; //@line 12835
    $$1233 = $or$cond278 ? 0 : 2; //@line 12835
    $$1238 = $or$cond278 ? 16299 : 16299 + ($$1236 >> 4) | 0; //@line 12835
    $$2256 = $$1255; //@line 12835
    $$4266 = $$3265; //@line 12835
    $281 = $229; //@line 12835
    $283 = $232; //@line 12835
    label = 68; //@line 12836
   } else if ((label | 0) == 67) {
    label = 0; //@line 12839
    $$0228 = _fmt_u($275, $276, $11) | 0; //@line 12841
    $$1233 = $$0232; //@line 12841
    $$1238 = $$0237; //@line 12841
    $$2256 = $$0254; //@line 12841
    $$4266 = $$1263$; //@line 12841
    $281 = $275; //@line 12841
    $283 = $276; //@line 12841
    label = 68; //@line 12842
   } else if ((label | 0) == 72) {
    label = 0; //@line 12845
    $305 = _memchr($$1, 0, $$0254) | 0; //@line 12846
    $306 = ($305 | 0) == 0; //@line 12847
    $$2 = $$1; //@line 12854
    $$2234 = 0; //@line 12854
    $$2239 = 16299; //@line 12854
    $$2251 = $306 ? $$1 + $$0254 | 0 : $305; //@line 12854
    $$5 = $306 ? $$0254 : $305 - $$1 | 0; //@line 12854
    $$6268 = $196; //@line 12854
   } else if ((label | 0) == 76) {
    label = 0; //@line 12857
    $$0229316 = $365; //@line 12858
    $$0240315 = 0; //@line 12858
    $$1244314 = 0; //@line 12858
    while (1) {
     $318 = HEAP32[$$0229316 >> 2] | 0; //@line 12860
     if (!$318) {
      $$0240$lcssa = $$0240315; //@line 12863
      $$2245 = $$1244314; //@line 12863
      break;
     }
     $320 = _wctomb($9, $318) | 0; //@line 12866
     if (($320 | 0) < 0 | $320 >>> 0 > ($$4258354 - $$0240315 | 0) >>> 0) {
      $$0240$lcssa = $$0240315; //@line 12872
      $$2245 = $320; //@line 12872
      break;
     }
     $325 = $320 + $$0240315 | 0; //@line 12876
     if ($$4258354 >>> 0 > $325 >>> 0) {
      $$0229316 = $$0229316 + 4 | 0; //@line 12879
      $$0240315 = $325; //@line 12879
      $$1244314 = $320; //@line 12879
     } else {
      $$0240$lcssa = $325; //@line 12881
      $$2245 = $320; //@line 12881
      break;
     }
    }
    if (($$2245 | 0) < 0) {
     $$0 = -1; //@line 12887
     break L1;
    }
    _pad_676($0, 32, $$1260, $$0240$lcssa, $$1263$); //@line 12890
    if (!$$0240$lcssa) {
     $$0240$lcssa356 = 0; //@line 12893
     label = 85; //@line 12894
    } else {
     $$1230327 = $365; //@line 12896
     $$1241326 = 0; //@line 12896
     while (1) {
      $329 = HEAP32[$$1230327 >> 2] | 0; //@line 12898
      if (!$329) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 12901
       label = 85; //@line 12902
       break L97;
      }
      $331 = _wctomb($9, $329) | 0; //@line 12905
      $$1241326 = $331 + $$1241326 | 0; //@line 12906
      if (($$1241326 | 0) > ($$0240$lcssa | 0)) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 12909
       label = 85; //@line 12910
       break L97;
      }
      _out_670($0, $9, $331); //@line 12914
      if ($$1241326 >>> 0 >= $$0240$lcssa >>> 0) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 12919
       label = 85; //@line 12920
       break;
      } else {
       $$1230327 = $$1230327 + 4 | 0; //@line 12917
      }
     }
    }
   }
  } while (0);
  if ((label | 0) == 68) {
   label = 0; //@line 12928
   $284 = ($281 | 0) != 0 | ($283 | 0) != 0; //@line 12934
   $or$cond = ($$2256 | 0) != 0 | $284; //@line 12936
   $290 = $12 - $$0228 + (($284 ^ 1) & 1) | 0; //@line 12941
   $$2 = $or$cond ? $$0228 : $11; //@line 12946
   $$2234 = $$1233; //@line 12946
   $$2239 = $$1238; //@line 12946
   $$2251 = $11; //@line 12946
   $$5 = $or$cond ? ($$2256 | 0) > ($290 | 0) ? $$2256 : $290 : $$2256; //@line 12946
   $$6268 = ($$2256 | 0) > -1 ? $$4266 & -65537 : $$4266; //@line 12946
  } else if ((label | 0) == 85) {
   label = 0; //@line 12949
   _pad_676($0, 32, $$1260, $$0240$lcssa356, $$1263$ ^ 8192); //@line 12951
   $$0243 = ($$1260 | 0) > ($$0240$lcssa356 | 0) ? $$1260 : $$0240$lcssa356; //@line 12954
   $$0247 = $$1248; //@line 12954
   $$0269 = $$3272; //@line 12954
   continue;
  }
  $343 = $$2251 - $$2 | 0; //@line 12959
  $$$5 = ($$5 | 0) < ($343 | 0) ? $343 : $$5; //@line 12961
  $345 = $$$5 + $$2234 | 0; //@line 12962
  $$2261 = ($$1260 | 0) < ($345 | 0) ? $345 : $$1260; //@line 12964
  _pad_676($0, 32, $$2261, $345, $$6268); //@line 12965
  _out_670($0, $$2239, $$2234); //@line 12966
  _pad_676($0, 48, $$2261, $345, $$6268 ^ 65536); //@line 12968
  _pad_676($0, 48, $$$5, $343, 0); //@line 12969
  _out_670($0, $$2, $343); //@line 12970
  _pad_676($0, 32, $$2261, $345, $$6268 ^ 8192); //@line 12972
  $$0243 = $$2261; //@line 12973
  $$0247 = $$1248; //@line 12973
  $$0269 = $$3272; //@line 12973
 }
 L116 : do {
  if ((label | 0) == 88) {
   if (!$0) {
    if (!$$0269) {
     $$0 = 0; //@line 12981
    } else {
     $$2242302 = 1; //@line 12983
     while (1) {
      $352 = HEAP32[$4 + ($$2242302 << 2) >> 2] | 0; //@line 12986
      if (!$352) {
       $$2242$lcssa = $$2242302; //@line 12989
       break;
      }
      _pop_arg_673($3 + ($$2242302 << 3) | 0, $352, $2); //@line 12993
      $356 = $$2242302 + 1 | 0; //@line 12994
      if (($$2242302 | 0) < 9) {
       $$2242302 = $356; //@line 12997
      } else {
       $$2242$lcssa = $356; //@line 12999
       break;
      }
     }
     if (($$2242$lcssa | 0) < 10) {
      $$3300 = $$2242$lcssa; //@line 13005
      while (1) {
       if (HEAP32[$4 + ($$3300 << 2) >> 2] | 0) {
        $$0 = -1; //@line 13011
        break L116;
       }
       if (($$3300 | 0) < 9) {
        $$3300 = $$3300 + 1 | 0; //@line 13017
       } else {
        $$0 = 1; //@line 13019
        break;
       }
      }
     } else {
      $$0 = 1; //@line 13024
     }
    }
   } else {
    $$0 = $$1248; //@line 13028
   }
  }
 } while (0);
 STACKTOP = sp; //@line 13032
 return $$0 | 0; //@line 13032
}
function _mbed_vtracef($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0$i = 0, $$0141 = 0, $$0142 = 0, $$0144 = 0, $$0199 = 0, $$1$off0 = 0, $$10 = 0, $$1143 = 0, $$1145 = 0, $$1152 = 0, $$1152$ = 0, $$13 = 0, $$18 = 0, $$3 = 0, $$3147 = 0, $$3147168 = 0, $$3154 = 0, $$3169 = 0, $$5156 = 0, $$5156$ = 0, $$6 = 0, $$6150 = 0, $$9 = 0, $$lobit = 0, $$pre = 0, $$sink = 0, $125 = 0, $126 = 0, $151 = 0, $157 = 0, $168 = 0, $169 = 0, $171 = 0, $181 = 0, $182 = 0, $184 = 0, $186 = 0, $194 = 0, $201 = 0, $202 = 0, $204 = 0, $206 = 0, $209 = 0, $34 = 0, $38 = 0, $4 = 0, $43 = 0, $5 = 0, $54 = 0, $55 = 0, $59 = 0, $60 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $78 = 0, $82 = 0, $89 = 0, $95 = 0, $AsyncCtx = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx45 = 0, $AsyncCtx49 = 0, $AsyncCtx52 = 0, $AsyncCtx56 = 0, $AsyncCtx60 = 0, $AsyncCtx64 = 0, $extract$t159 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3752
 STACKTOP = STACKTOP + 96 | 0; //@line 3753
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 3753
 $vararg_buffer23 = sp + 72 | 0; //@line 3754
 $vararg_buffer20 = sp + 64 | 0; //@line 3755
 $vararg_buffer18 = sp + 56 | 0; //@line 3756
 $vararg_buffer15 = sp + 48 | 0; //@line 3757
 $vararg_buffer12 = sp + 40 | 0; //@line 3758
 $vararg_buffer9 = sp + 32 | 0; //@line 3759
 $vararg_buffer6 = sp + 24 | 0; //@line 3760
 $vararg_buffer3 = sp + 16 | 0; //@line 3761
 $vararg_buffer1 = sp + 8 | 0; //@line 3762
 $vararg_buffer = sp; //@line 3763
 $4 = sp + 80 | 0; //@line 3764
 $5 = HEAP32[192] | 0; //@line 3765
 do {
  if ($5 | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(104, sp) | 0; //@line 3769
   FUNCTION_TABLE_v[$5 & 7](); //@line 3770
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 125; //@line 3773
    HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer12; //@line 3775
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 3777
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer12; //@line 3779
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer15; //@line 3781
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer15; //@line 3783
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer6; //@line 3785
    HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer6; //@line 3787
    HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer9; //@line 3789
    HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer9; //@line 3791
    HEAP32[$AsyncCtx + 40 >> 2] = $2; //@line 3793
    HEAP32[$AsyncCtx + 44 >> 2] = $3; //@line 3795
    HEAP8[$AsyncCtx + 48 >> 0] = $0; //@line 3797
    HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer18; //@line 3799
    HEAP32[$AsyncCtx + 56 >> 2] = $vararg_buffer18; //@line 3801
    HEAP32[$AsyncCtx + 60 >> 2] = $vararg_buffer20; //@line 3803
    HEAP32[$AsyncCtx + 64 >> 2] = $vararg_buffer20; //@line 3805
    HEAP32[$AsyncCtx + 68 >> 2] = $vararg_buffer1; //@line 3807
    HEAP32[$AsyncCtx + 72 >> 2] = $vararg_buffer1; //@line 3809
    HEAP32[$AsyncCtx + 76 >> 2] = $4; //@line 3811
    HEAP32[$AsyncCtx + 80 >> 2] = $vararg_buffer; //@line 3813
    HEAP32[$AsyncCtx + 84 >> 2] = $vararg_buffer; //@line 3815
    HEAP32[$AsyncCtx + 88 >> 2] = $vararg_buffer23; //@line 3817
    HEAP32[$AsyncCtx + 92 >> 2] = $vararg_buffer23; //@line 3819
    HEAP32[$AsyncCtx + 96 >> 2] = $vararg_buffer3; //@line 3821
    HEAP32[$AsyncCtx + 100 >> 2] = $vararg_buffer3; //@line 3823
    sp = STACKTOP; //@line 3824
    STACKTOP = sp; //@line 3825
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3827
    HEAP32[194] = (HEAP32[194] | 0) + 1; //@line 3830
    break;
   }
  }
 } while (0);
 $34 = HEAP32[183] | 0; //@line 3835
 do {
  if ($34 | 0) {
   HEAP8[$34 >> 0] = 0; //@line 3839
   do {
    if ($0 << 24 >> 24 > -1 & ($1 | 0) != 0) {
     $38 = HEAP32[180] | 0; //@line 3845
     if (HEAP8[$38 >> 0] | 0) {
      if (_strstr($38, $1) | 0) {
       $$0$i = 1; //@line 3852
       break;
      }
     }
     $43 = HEAP32[181] | 0; //@line 3856
     if (!(HEAP8[$43 >> 0] | 0)) {
      label = 11; //@line 3860
     } else {
      if (!(_strstr($43, $1) | 0)) {
       $$0$i = 1; //@line 3865
      } else {
       label = 11; //@line 3867
      }
     }
    } else {
     label = 11; //@line 3871
    }
   } while (0);
   if ((label | 0) == 11) {
    $$0$i = 0; //@line 3875
   }
   if (!((HEAP32[190] | 0) != 0 & ((($1 | 0) == 0 | (($2 | 0) == 0 | $$0$i)) ^ 1))) {
    HEAP32[187] = HEAP32[185]; //@line 3887
    break;
   }
   $54 = HEAPU8[716] | 0; //@line 3891
   $55 = $0 & 255; //@line 3892
   if ($55 & 31 & $54 | 0) {
    $59 = $54 & 64; //@line 3897
    $$lobit = $59 >>> 6; //@line 3898
    $60 = $$lobit & 255; //@line 3899
    $64 = ($54 & 32 | 0) == 0; //@line 3903
    $65 = HEAP32[184] | 0; //@line 3904
    $66 = HEAP32[183] | 0; //@line 3905
    $67 = $0 << 24 >> 24 == 1; //@line 3906
    do {
     if ($67 | ($54 & 128 | 0) != 0) {
      $AsyncCtx64 = _emscripten_alloc_async_context(8, sp) | 0; //@line 3910
      _vsnprintf($66, $65, $2, $3) | 0; //@line 3911
      if (___async) {
       HEAP32[$AsyncCtx64 >> 2] = 126; //@line 3914
       HEAP8[$AsyncCtx64 + 4 >> 0] = $67 & 1; //@line 3917
       sp = STACKTOP; //@line 3918
       STACKTOP = sp; //@line 3919
       return;
      }
      _emscripten_free_async_context($AsyncCtx64 | 0); //@line 3921
      $69 = HEAP32[191] | 0; //@line 3922
      if (!($67 & ($69 | 0) != 0)) {
       $73 = HEAP32[190] | 0; //@line 3926
       $74 = HEAP32[183] | 0; //@line 3927
       $AsyncCtx34 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3928
       FUNCTION_TABLE_vi[$73 & 1023]($74); //@line 3929
       if (___async) {
        HEAP32[$AsyncCtx34 >> 2] = 129; //@line 3932
        sp = STACKTOP; //@line 3933
        STACKTOP = sp; //@line 3934
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx34 | 0); //@line 3936
        break;
       }
      }
      $71 = HEAP32[183] | 0; //@line 3940
      $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3941
      FUNCTION_TABLE_vi[$69 & 1023]($71); //@line 3942
      if (___async) {
       HEAP32[$AsyncCtx27 >> 2] = 127; //@line 3945
       sp = STACKTOP; //@line 3946
       STACKTOP = sp; //@line 3947
       return;
      }
      _emscripten_free_async_context($AsyncCtx27 | 0); //@line 3949
      $72 = HEAP32[191] | 0; //@line 3950
      $AsyncCtx30 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3951
      FUNCTION_TABLE_vi[$72 & 1023](12184); //@line 3952
      if (___async) {
       HEAP32[$AsyncCtx30 >> 2] = 128; //@line 3955
       sp = STACKTOP; //@line 3956
       STACKTOP = sp; //@line 3957
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx30 | 0); //@line 3959
       break;
      }
     } else {
      if (!$59) {
       $$1$off0 = ($$lobit | 0) != 0; //@line 3966
       $$1143 = $66; //@line 3966
       $$1145 = $65; //@line 3966
       $$3154 = 0; //@line 3966
       label = 38; //@line 3967
      } else {
       if ($64) {
        $$0142 = $66; //@line 3970
        $$0144 = $65; //@line 3970
       } else {
        $76 = _snprintf($66, $65, 12186, $vararg_buffer) | 0; //@line 3972
        $$ = ($76 | 0) >= ($65 | 0) ? 0 : $76; //@line 3974
        $78 = ($$ | 0) > 0; //@line 3975
        $$0142 = $78 ? $66 + $$ | 0 : $66; //@line 3980
        $$0144 = $65 - ($78 ? $$ : 0) | 0; //@line 3980
       }
       if (($$0144 | 0) > 0) {
        $82 = $55 + -2 | 0; //@line 3984
        switch ($82 >>> 1 | $82 << 31 | 0) {
        case 0:
         {
          $$sink = 12204; //@line 3990
          label = 35; //@line 3991
          break;
         }
        case 1:
         {
          $$sink = 12210; //@line 3995
          label = 35; //@line 3996
          break;
         }
        case 3:
         {
          $$sink = 12198; //@line 4000
          label = 35; //@line 4001
          break;
         }
        case 7:
         {
          $$sink = 12192; //@line 4005
          label = 35; //@line 4006
          break;
         }
        default:
         {
          $$0141 = 0; //@line 4010
          $$1152 = 0; //@line 4010
         }
        }
        if ((label | 0) == 35) {
         HEAP32[$vararg_buffer1 >> 2] = $$sink; //@line 4014
         $$0141 = $60 & 1; //@line 4017
         $$1152 = _snprintf($$0142, $$0144, 12216, $vararg_buffer1) | 0; //@line 4017
        }
        $$1152$ = ($$1152 | 0) < ($$0144 | 0) ? $$1152 : 0; //@line 4020
        $extract$t159 = $$0141 << 24 >> 24 != 0; //@line 4022
        if (($$1152$ | 0) > 0) {
         $89 = $$0141 << 24 >> 24 == 0; //@line 4024
         $$1$off0 = $extract$t159; //@line 4029
         $$1143 = $89 ? $$0142 : $$0142 + $$1152$ | 0; //@line 4029
         $$1145 = $$0144 - ($89 ? 0 : $$1152$) | 0; //@line 4029
         $$3154 = $$1152; //@line 4029
         label = 38; //@line 4030
        } else {
         $$1$off0 = $extract$t159; //@line 4032
         $$1143 = $$0142; //@line 4032
         $$1145 = $$0144; //@line 4032
         $$3154 = $$1152$; //@line 4032
         label = 38; //@line 4033
        }
       }
      }
      L54 : do {
       if ((label | 0) == 38) {
        do {
         if (($$1145 | 0) > 0 & (HEAP32[188] | 0) != 0) {
          HEAP32[$4 >> 2] = HEAP32[$3 >> 2]; //@line 4046
          $AsyncCtx60 = _emscripten_alloc_async_context(104, sp) | 0; //@line 4047
          $95 = _vsnprintf(0, 0, $2, $4) | 0; //@line 4048
          if (___async) {
           HEAP32[$AsyncCtx60 >> 2] = 130; //@line 4051
           HEAP32[$AsyncCtx60 + 4 >> 2] = $vararg_buffer12; //@line 4053
           HEAP32[$AsyncCtx60 + 8 >> 2] = $1; //@line 4055
           HEAP32[$AsyncCtx60 + 12 >> 2] = $vararg_buffer12; //@line 4057
           HEAP32[$AsyncCtx60 + 16 >> 2] = $vararg_buffer15; //@line 4059
           HEAP32[$AsyncCtx60 + 20 >> 2] = $vararg_buffer15; //@line 4061
           HEAP32[$AsyncCtx60 + 24 >> 2] = $vararg_buffer6; //@line 4063
           HEAP32[$AsyncCtx60 + 28 >> 2] = $vararg_buffer6; //@line 4065
           HEAP32[$AsyncCtx60 + 32 >> 2] = $vararg_buffer9; //@line 4067
           HEAP32[$AsyncCtx60 + 36 >> 2] = $vararg_buffer9; //@line 4069
           HEAP32[$AsyncCtx60 + 40 >> 2] = $2; //@line 4071
           HEAP32[$AsyncCtx60 + 44 >> 2] = $3; //@line 4073
           HEAP32[$AsyncCtx60 + 48 >> 2] = $vararg_buffer18; //@line 4075
           HEAP32[$AsyncCtx60 + 52 >> 2] = $vararg_buffer18; //@line 4077
           HEAP32[$AsyncCtx60 + 56 >> 2] = $vararg_buffer20; //@line 4079
           HEAP32[$AsyncCtx60 + 60 >> 2] = $vararg_buffer20; //@line 4081
           HEAP32[$AsyncCtx60 + 64 >> 2] = $$1143; //@line 4083
           HEAP32[$AsyncCtx60 + 68 >> 2] = $$1145; //@line 4085
           HEAP32[$AsyncCtx60 + 72 >> 2] = $55; //@line 4087
           HEAP32[$AsyncCtx60 + 76 >> 2] = $vararg_buffer23; //@line 4089
           HEAP32[$AsyncCtx60 + 80 >> 2] = $vararg_buffer23; //@line 4091
           HEAP8[$AsyncCtx60 + 84 >> 0] = $$1$off0 & 1; //@line 4094
           HEAP32[$AsyncCtx60 + 88 >> 2] = $vararg_buffer3; //@line 4096
           HEAP32[$AsyncCtx60 + 92 >> 2] = $vararg_buffer3; //@line 4098
           HEAP32[$AsyncCtx60 + 96 >> 2] = $4; //@line 4100
           HEAP32[$AsyncCtx60 + 100 >> 2] = $$3154; //@line 4102
           sp = STACKTOP; //@line 4103
           STACKTOP = sp; //@line 4104
           return;
          }
          _emscripten_free_async_context($AsyncCtx60 | 0); //@line 4106
          $125 = HEAP32[188] | 0; //@line 4111
          $AsyncCtx38 = _emscripten_alloc_async_context(100, sp) | 0; //@line 4112
          $126 = FUNCTION_TABLE_ii[$125 & 15](($$3154 | 0 ? 4 : 0) + $$3154 + $95 | 0) | 0; //@line 4113
          if (___async) {
           HEAP32[$AsyncCtx38 >> 2] = 131; //@line 4116
           HEAP32[$AsyncCtx38 + 4 >> 2] = $vararg_buffer12; //@line 4118
           HEAP32[$AsyncCtx38 + 8 >> 2] = $1; //@line 4120
           HEAP32[$AsyncCtx38 + 12 >> 2] = $vararg_buffer12; //@line 4122
           HEAP32[$AsyncCtx38 + 16 >> 2] = $vararg_buffer15; //@line 4124
           HEAP32[$AsyncCtx38 + 20 >> 2] = $vararg_buffer15; //@line 4126
           HEAP32[$AsyncCtx38 + 24 >> 2] = $vararg_buffer6; //@line 4128
           HEAP32[$AsyncCtx38 + 28 >> 2] = $vararg_buffer6; //@line 4130
           HEAP32[$AsyncCtx38 + 32 >> 2] = $vararg_buffer9; //@line 4132
           HEAP32[$AsyncCtx38 + 36 >> 2] = $vararg_buffer9; //@line 4134
           HEAP32[$AsyncCtx38 + 40 >> 2] = $2; //@line 4136
           HEAP32[$AsyncCtx38 + 44 >> 2] = $3; //@line 4138
           HEAP32[$AsyncCtx38 + 48 >> 2] = $vararg_buffer18; //@line 4140
           HEAP32[$AsyncCtx38 + 52 >> 2] = $vararg_buffer18; //@line 4142
           HEAP32[$AsyncCtx38 + 56 >> 2] = $vararg_buffer20; //@line 4144
           HEAP32[$AsyncCtx38 + 60 >> 2] = $vararg_buffer20; //@line 4146
           HEAP32[$AsyncCtx38 + 64 >> 2] = $$1143; //@line 4148
           HEAP32[$AsyncCtx38 + 68 >> 2] = $$1145; //@line 4150
           HEAP32[$AsyncCtx38 + 72 >> 2] = $55; //@line 4152
           HEAP32[$AsyncCtx38 + 76 >> 2] = $vararg_buffer23; //@line 4154
           HEAP32[$AsyncCtx38 + 80 >> 2] = $vararg_buffer23; //@line 4156
           HEAP8[$AsyncCtx38 + 84 >> 0] = $$1$off0 & 1; //@line 4159
           HEAP32[$AsyncCtx38 + 88 >> 2] = $vararg_buffer3; //@line 4161
           HEAP32[$AsyncCtx38 + 92 >> 2] = $vararg_buffer3; //@line 4163
           HEAP32[$AsyncCtx38 + 96 >> 2] = $4; //@line 4165
           sp = STACKTOP; //@line 4166
           STACKTOP = sp; //@line 4167
           return;
          } else {
           _emscripten_free_async_context($AsyncCtx38 | 0); //@line 4169
           HEAP32[$vararg_buffer3 >> 2] = $126; //@line 4170
           $151 = _snprintf($$1143, $$1145, 12216, $vararg_buffer3) | 0; //@line 4171
           $$10 = ($151 | 0) >= ($$1145 | 0) ? 0 : $151; //@line 4173
           if (($$10 | 0) > 0) {
            $$3 = $$1143 + $$10 | 0; //@line 4178
            $$3147 = $$1145 - $$10 | 0; //@line 4178
            label = 44; //@line 4179
            break;
           } else {
            $$3147168 = $$1145; //@line 4182
            $$3169 = $$1143; //@line 4182
            break;
           }
          }
         } else {
          $$3 = $$1143; //@line 4187
          $$3147 = $$1145; //@line 4187
          label = 44; //@line 4188
         }
        } while (0);
        if ((label | 0) == 44) {
         if (($$3147 | 0) > 0) {
          $$3147168 = $$3147; //@line 4194
          $$3169 = $$3; //@line 4194
         } else {
          break;
         }
        }
        $157 = $55 + -2 | 0; //@line 4199
        switch ($157 >>> 1 | $157 << 31 | 0) {
        case 0:
         {
          HEAP32[$vararg_buffer6 >> 2] = $1; //@line 4205
          $$5156 = _snprintf($$3169, $$3147168, 12219, $vararg_buffer6) | 0; //@line 4207
          break;
         }
        case 1:
         {
          HEAP32[$vararg_buffer9 >> 2] = $1; //@line 4211
          $$5156 = _snprintf($$3169, $$3147168, 12234, $vararg_buffer9) | 0; //@line 4213
          break;
         }
        case 3:
         {
          HEAP32[$vararg_buffer12 >> 2] = $1; //@line 4217
          $$5156 = _snprintf($$3169, $$3147168, 12249, $vararg_buffer12) | 0; //@line 4219
          break;
         }
        case 7:
         {
          HEAP32[$vararg_buffer15 >> 2] = $1; //@line 4223
          $$5156 = _snprintf($$3169, $$3147168, 12264, $vararg_buffer15) | 0; //@line 4225
          break;
         }
        default:
         {
          $$5156 = _snprintf($$3169, $$3147168, 12279, $vararg_buffer18) | 0; //@line 4230
         }
        }
        $$5156$ = ($$5156 | 0) < ($$3147168 | 0) ? $$5156 : 0; //@line 4234
        $168 = $$3169 + $$5156$ | 0; //@line 4236
        $169 = $$3147168 - $$5156$ | 0; //@line 4237
        if (($$5156$ | 0) > 0 & ($169 | 0) > 0) {
         $AsyncCtx56 = _emscripten_alloc_async_context(32, sp) | 0; //@line 4241
         $171 = _vsnprintf($168, $169, $2, $3) | 0; //@line 4242
         if (___async) {
          HEAP32[$AsyncCtx56 >> 2] = 132; //@line 4245
          HEAP32[$AsyncCtx56 + 4 >> 2] = $vararg_buffer20; //@line 4247
          HEAP32[$AsyncCtx56 + 8 >> 2] = $vararg_buffer20; //@line 4249
          HEAP8[$AsyncCtx56 + 12 >> 0] = $$1$off0 & 1; //@line 4252
          HEAP32[$AsyncCtx56 + 16 >> 2] = $vararg_buffer23; //@line 4254
          HEAP32[$AsyncCtx56 + 20 >> 2] = $vararg_buffer23; //@line 4256
          HEAP32[$AsyncCtx56 + 24 >> 2] = $169; //@line 4258
          HEAP32[$AsyncCtx56 + 28 >> 2] = $168; //@line 4260
          sp = STACKTOP; //@line 4261
          STACKTOP = sp; //@line 4262
          return;
         }
         _emscripten_free_async_context($AsyncCtx56 | 0); //@line 4264
         $$13 = ($171 | 0) >= ($169 | 0) ? 0 : $171; //@line 4266
         $181 = $168 + $$13 | 0; //@line 4268
         $182 = $169 - $$13 | 0; //@line 4269
         if (($$13 | 0) > 0) {
          $184 = HEAP32[189] | 0; //@line 4272
          do {
           if (($182 | 0) > 0 & ($184 | 0) != 0) {
            $AsyncCtx42 = _emscripten_alloc_async_context(32, sp) | 0; //@line 4277
            $186 = FUNCTION_TABLE_i[$184 & 7]() | 0; //@line 4278
            if (___async) {
             HEAP32[$AsyncCtx42 >> 2] = 133; //@line 4281
             HEAP32[$AsyncCtx42 + 4 >> 2] = $vararg_buffer20; //@line 4283
             HEAP32[$AsyncCtx42 + 8 >> 2] = $181; //@line 4285
             HEAP32[$AsyncCtx42 + 12 >> 2] = $182; //@line 4287
             HEAP32[$AsyncCtx42 + 16 >> 2] = $vararg_buffer20; //@line 4289
             HEAP8[$AsyncCtx42 + 20 >> 0] = $$1$off0 & 1; //@line 4292
             HEAP32[$AsyncCtx42 + 24 >> 2] = $vararg_buffer23; //@line 4294
             HEAP32[$AsyncCtx42 + 28 >> 2] = $vararg_buffer23; //@line 4296
             sp = STACKTOP; //@line 4297
             STACKTOP = sp; //@line 4298
             return;
            } else {
             _emscripten_free_async_context($AsyncCtx42 | 0); //@line 4300
             HEAP32[$vararg_buffer20 >> 2] = $186; //@line 4301
             $194 = _snprintf($181, $182, 12216, $vararg_buffer20) | 0; //@line 4302
             $$18 = ($194 | 0) >= ($182 | 0) ? 0 : $194; //@line 4304
             if (($$18 | 0) > 0) {
              $$6 = $181 + $$18 | 0; //@line 4309
              $$6150 = $182 - $$18 | 0; //@line 4309
              $$9 = $$18; //@line 4309
              break;
             } else {
              break L54;
             }
            }
           } else {
            $$6 = $181; //@line 4316
            $$6150 = $182; //@line 4316
            $$9 = $$13; //@line 4316
           }
          } while (0);
          if (!(($$9 | 0) < 1 | ($$6150 | 0) < 1 | $$1$off0 ^ 1)) {
           _snprintf($$6, $$6150, 12294, $vararg_buffer23) | 0; //@line 4325
          }
         }
        }
       }
      } while (0);
      $201 = HEAP32[190] | 0; //@line 4331
      $202 = HEAP32[183] | 0; //@line 4332
      $AsyncCtx45 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4333
      FUNCTION_TABLE_vi[$201 & 1023]($202); //@line 4334
      if (___async) {
       HEAP32[$AsyncCtx45 >> 2] = 134; //@line 4337
       sp = STACKTOP; //@line 4338
       STACKTOP = sp; //@line 4339
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx45 | 0); //@line 4341
       break;
      }
     }
    } while (0);
    HEAP32[187] = HEAP32[185]; //@line 4347
   }
  }
 } while (0);
 $204 = HEAP32[193] | 0; //@line 4351
 if (!$204) {
  STACKTOP = sp; //@line 4354
  return;
 }
 $206 = HEAP32[194] | 0; //@line 4356
 HEAP32[194] = 0; //@line 4357
 $AsyncCtx49 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4358
 FUNCTION_TABLE_v[$204 & 7](); //@line 4359
 if (___async) {
  HEAP32[$AsyncCtx49 >> 2] = 135; //@line 4362
  HEAP32[$AsyncCtx49 + 4 >> 2] = $206; //@line 4364
  sp = STACKTOP; //@line 4365
  STACKTOP = sp; //@line 4366
  return;
 }
 _emscripten_free_async_context($AsyncCtx49 | 0); //@line 4368
 if (($206 | 0) > 1) {
  $$0199 = $206; //@line 4371
 } else {
  STACKTOP = sp; //@line 4373
  return;
 }
 while (1) {
  $209 = $$0199 + -1 | 0; //@line 4376
  $$pre = HEAP32[193] | 0; //@line 4377
  $AsyncCtx52 = _emscripten_alloc_async_context(12, sp) | 0; //@line 4378
  FUNCTION_TABLE_v[$$pre & 7](); //@line 4379
  if (___async) {
   label = 70; //@line 4382
   break;
  }
  _emscripten_free_async_context($AsyncCtx52 | 0); //@line 4385
  if (($$0199 | 0) > 2) {
   $$0199 = $209; //@line 4388
  } else {
   label = 72; //@line 4390
   break;
  }
 }
 if ((label | 0) == 70) {
  HEAP32[$AsyncCtx52 >> 2] = 136; //@line 4395
  HEAP32[$AsyncCtx52 + 4 >> 2] = $$0199; //@line 4397
  HEAP32[$AsyncCtx52 + 8 >> 2] = $209; //@line 4399
  sp = STACKTOP; //@line 4400
  STACKTOP = sp; //@line 4401
  return;
 } else if ((label | 0) == 72) {
  STACKTOP = sp; //@line 4404
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_324($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $130 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $144 = 0, $145 = 0, $147 = 0, $148 = 0, $149 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $161 = 0, $165 = 0, $166 = 0, $168 = 0, $169 = 0, $170 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $29 = 0, $37 = 0, $4 = 0, $41 = 0, $47 = 0, $50 = 0, $53 = 0, $55 = 0, $56 = 0, $6 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $89 = 0, $90 = 0, $92 = 0, $93 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 22871
 STACKTOP = STACKTOP + 16 | 0; //@line 22872
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 22872
 $$byval_copy = sp; //@line 22873
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22875
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22877
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22879
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22881
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22883
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22885
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22887
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22889
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22891
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22893
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 22895
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 22897
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  HEAP8[$2 >> 0] = HEAP8[$2 >> 0] & -33; //@line 22904
 } else {
  $29 = $8 + 288 | 0; //@line 22906
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 4 >> 2] = 9; //@line 22909
  __ZN14LoRaMacCommand20clear_command_bufferEv($8 + 4 | 0); //@line 22911
  HEAP32[$10 >> 2] = HEAP32[$10 >> 2] & -2; //@line 22914
  HEAP8[$12 >> 0] = 0; //@line 22915
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 10 >> 0] = 0; //@line 22918
  $37 = HEAP8[$14 >> 0] | 0; //@line 22919
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 11 >> 0] = $37; //@line 22922
  $41 = HEAP8[$8 + 1097 >> 0] | 0; //@line 22924
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 8 >> 0] = $41; //@line 22927
  if (!(HEAP8[$8 + 370 >> 0] | 0)) {
   $47 = $8 + 956 | 0; //@line 22932
   HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + 1; //@line 22935
  }
 }
 $50 = HEAP32[$10 >> 2] | 0; //@line 22938
 $53 = $50 & -3; //@line 22941
 if (!($50 & 2)) {
  $55 = $50; //@line 22943
 } else {
  HEAP32[$10 >> 2] = $53; //@line 22945
  $55 = $53; //@line 22946
 }
 if ($55 | 0) {
  $122 = HEAP32[$22 >> 2] | 0; //@line 22950
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 22951
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($122, $24, 1e3); //@line 22952
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 388; //@line 22955
   $123 = $ReallocAsyncCtx6 + 4 | 0; //@line 22956
   HEAP32[$123 >> 2] = $2; //@line 22957
   $124 = $ReallocAsyncCtx6 + 8 | 0; //@line 22958
   HEAP32[$124 >> 2] = $8; //@line 22959
   $125 = $ReallocAsyncCtx6 + 12 | 0; //@line 22960
   HEAP32[$125 >> 2] = $16; //@line 22961
   $126 = $ReallocAsyncCtx6 + 16 | 0; //@line 22962
   HEAP32[$126 >> 2] = $18; //@line 22963
   $127 = $ReallocAsyncCtx6 + 20 | 0; //@line 22964
   HEAP32[$127 >> 2] = $20; //@line 22965
   sp = STACKTOP; //@line 22966
   STACKTOP = sp; //@line 22967
   return;
  }
  ___async_unwind = 0; //@line 22969
  HEAP32[$ReallocAsyncCtx6 >> 2] = 388; //@line 22970
  $123 = $ReallocAsyncCtx6 + 4 | 0; //@line 22971
  HEAP32[$123 >> 2] = $2; //@line 22972
  $124 = $ReallocAsyncCtx6 + 8 | 0; //@line 22973
  HEAP32[$124 >> 2] = $8; //@line 22974
  $125 = $ReallocAsyncCtx6 + 12 | 0; //@line 22975
  HEAP32[$125 >> 2] = $16; //@line 22976
  $126 = $ReallocAsyncCtx6 + 16 | 0; //@line 22977
  HEAP32[$126 >> 2] = $18; //@line 22978
  $127 = $ReallocAsyncCtx6 + 20 | 0; //@line 22979
  HEAP32[$127 >> 2] = $20; //@line 22980
  sp = STACKTOP; //@line 22981
  STACKTOP = sp; //@line 22982
  return;
 }
 $56 = HEAP8[$2 >> 0] | 0; //@line 22984
 if ($56 & 1) {
  HEAP8[$2 >> 0] = $56 & -2; //@line 22989
  $61 = HEAP32[$8 + 1324 >> 2] | 0; //@line 22991
  $63 = __ZN11LoRaMacMcps16get_confirmationEv($8 + 288 | 0) | 0; //@line 22993
  $64 = $61 + 12 | 0; //@line 22994
  $65 = HEAP32[$64 >> 2] | 0; //@line 22995
  if (!$65) {
   $ReallocAsyncCtx16 = _emscripten_realloc_async_context(44) | 0; //@line 22998
   _mbed_assert_internal(15615, 15620, 1102); //@line 22999
   if (___async) {
    HEAP32[$ReallocAsyncCtx16 >> 2] = 384; //@line 23002
    $67 = $ReallocAsyncCtx16 + 4 | 0; //@line 23003
    HEAP32[$67 >> 2] = $2; //@line 23004
    $68 = $ReallocAsyncCtx16 + 8 | 0; //@line 23005
    HEAP32[$68 >> 2] = $8; //@line 23006
    $69 = $ReallocAsyncCtx16 + 12 | 0; //@line 23007
    HEAP32[$69 >> 2] = $64; //@line 23008
    $70 = $ReallocAsyncCtx16 + 16 | 0; //@line 23009
    HEAP32[$70 >> 2] = $61; //@line 23010
    $71 = $ReallocAsyncCtx16 + 20 | 0; //@line 23011
    HEAP32[$71 >> 2] = $63; //@line 23012
    $72 = $ReallocAsyncCtx16 + 24 | 0; //@line 23013
    HEAP32[$72 >> 2] = $16; //@line 23014
    $73 = $ReallocAsyncCtx16 + 28 | 0; //@line 23015
    HEAP32[$73 >> 2] = $18; //@line 23016
    $74 = $ReallocAsyncCtx16 + 32 | 0; //@line 23017
    HEAP32[$74 >> 2] = $20; //@line 23018
    $75 = $ReallocAsyncCtx16 + 36 | 0; //@line 23019
    HEAP32[$75 >> 2] = $4; //@line 23020
    $76 = $ReallocAsyncCtx16 + 40 | 0; //@line 23021
    HEAP32[$76 >> 2] = $6; //@line 23022
    sp = STACKTOP; //@line 23023
    STACKTOP = sp; //@line 23024
    return;
   }
   ___async_unwind = 0; //@line 23026
   HEAP32[$ReallocAsyncCtx16 >> 2] = 384; //@line 23027
   $67 = $ReallocAsyncCtx16 + 4 | 0; //@line 23028
   HEAP32[$67 >> 2] = $2; //@line 23029
   $68 = $ReallocAsyncCtx16 + 8 | 0; //@line 23030
   HEAP32[$68 >> 2] = $8; //@line 23031
   $69 = $ReallocAsyncCtx16 + 12 | 0; //@line 23032
   HEAP32[$69 >> 2] = $64; //@line 23033
   $70 = $ReallocAsyncCtx16 + 16 | 0; //@line 23034
   HEAP32[$70 >> 2] = $61; //@line 23035
   $71 = $ReallocAsyncCtx16 + 20 | 0; //@line 23036
   HEAP32[$71 >> 2] = $63; //@line 23037
   $72 = $ReallocAsyncCtx16 + 24 | 0; //@line 23038
   HEAP32[$72 >> 2] = $16; //@line 23039
   $73 = $ReallocAsyncCtx16 + 28 | 0; //@line 23040
   HEAP32[$73 >> 2] = $18; //@line 23041
   $74 = $ReallocAsyncCtx16 + 32 | 0; //@line 23042
   HEAP32[$74 >> 2] = $20; //@line 23043
   $75 = $ReallocAsyncCtx16 + 36 | 0; //@line 23044
   HEAP32[$75 >> 2] = $4; //@line 23045
   $76 = $ReallocAsyncCtx16 + 40 | 0; //@line 23046
   HEAP32[$76 >> 2] = $6; //@line 23047
   sp = STACKTOP; //@line 23048
   STACKTOP = sp; //@line 23049
   return;
  } else {
   $77 = HEAP32[$65 >> 2] | 0; //@line 23051
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 23052
   FUNCTION_TABLE_vii[$77 & 31]($61, $63); //@line 23053
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 385; //@line 23056
    $78 = $ReallocAsyncCtx2 + 4 | 0; //@line 23057
    HEAP32[$78 >> 2] = $2; //@line 23058
    $79 = $ReallocAsyncCtx2 + 8 | 0; //@line 23059
    HEAP32[$79 >> 2] = $8; //@line 23060
    $80 = $ReallocAsyncCtx2 + 12 | 0; //@line 23061
    HEAP32[$80 >> 2] = $16; //@line 23062
    $81 = $ReallocAsyncCtx2 + 16 | 0; //@line 23063
    HEAP32[$81 >> 2] = $18; //@line 23064
    $82 = $ReallocAsyncCtx2 + 20 | 0; //@line 23065
    HEAP32[$82 >> 2] = $20; //@line 23066
    $83 = $ReallocAsyncCtx2 + 24 | 0; //@line 23067
    HEAP32[$83 >> 2] = $4; //@line 23068
    $84 = $ReallocAsyncCtx2 + 28 | 0; //@line 23069
    HEAP32[$84 >> 2] = $6; //@line 23070
    sp = STACKTOP; //@line 23071
    STACKTOP = sp; //@line 23072
    return;
   }
   ___async_unwind = 0; //@line 23074
   HEAP32[$ReallocAsyncCtx2 >> 2] = 385; //@line 23075
   $78 = $ReallocAsyncCtx2 + 4 | 0; //@line 23076
   HEAP32[$78 >> 2] = $2; //@line 23077
   $79 = $ReallocAsyncCtx2 + 8 | 0; //@line 23078
   HEAP32[$79 >> 2] = $8; //@line 23079
   $80 = $ReallocAsyncCtx2 + 12 | 0; //@line 23080
   HEAP32[$80 >> 2] = $16; //@line 23081
   $81 = $ReallocAsyncCtx2 + 16 | 0; //@line 23082
   HEAP32[$81 >> 2] = $18; //@line 23083
   $82 = $ReallocAsyncCtx2 + 20 | 0; //@line 23084
   HEAP32[$82 >> 2] = $20; //@line 23085
   $83 = $ReallocAsyncCtx2 + 24 | 0; //@line 23086
   HEAP32[$83 >> 2] = $4; //@line 23087
   $84 = $ReallocAsyncCtx2 + 28 | 0; //@line 23088
   HEAP32[$84 >> 2] = $6; //@line 23089
   sp = STACKTOP; //@line 23090
   STACKTOP = sp; //@line 23091
   return;
  }
 }
 if ($56 & 8) {
  HEAP8[$2 >> 0] = $56 & -9; //@line 23098
  $89 = HEAP32[$8 + 1324 >> 2] | 0; //@line 23100
  $90 = $89 + 32 | 0; //@line 23101
  $92 = __ZN11LoRaMacMlme16get_confirmationEv($8 + 264 | 0) | 0; //@line 23103
  $93 = $89 + 44 | 0; //@line 23104
  $94 = HEAP32[$93 >> 2] | 0; //@line 23105
  if (!$94) {
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(44) | 0; //@line 23108
   _mbed_assert_internal(15615, 15620, 1102); //@line 23109
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 386; //@line 23112
    $96 = $ReallocAsyncCtx15 + 4 | 0; //@line 23113
    HEAP32[$96 >> 2] = $2; //@line 23114
    $97 = $ReallocAsyncCtx15 + 8 | 0; //@line 23115
    HEAP32[$97 >> 2] = $8; //@line 23116
    $98 = $ReallocAsyncCtx15 + 12 | 0; //@line 23117
    HEAP32[$98 >> 2] = $90; //@line 23118
    $99 = $ReallocAsyncCtx15 + 16 | 0; //@line 23119
    HEAP32[$99 >> 2] = $92; //@line 23120
    $100 = $ReallocAsyncCtx15 + 20 | 0; //@line 23121
    HEAP32[$100 >> 2] = $16; //@line 23122
    $101 = $ReallocAsyncCtx15 + 24 | 0; //@line 23123
    HEAP32[$101 >> 2] = $18; //@line 23124
    $102 = $ReallocAsyncCtx15 + 28 | 0; //@line 23125
    HEAP32[$102 >> 2] = $20; //@line 23126
    $103 = $ReallocAsyncCtx15 + 32 | 0; //@line 23127
    HEAP32[$103 >> 2] = $4; //@line 23128
    $104 = $ReallocAsyncCtx15 + 36 | 0; //@line 23129
    HEAP32[$104 >> 2] = $6; //@line 23130
    $105 = $ReallocAsyncCtx15 + 40 | 0; //@line 23131
    HEAP32[$105 >> 2] = $93; //@line 23132
    sp = STACKTOP; //@line 23133
    STACKTOP = sp; //@line 23134
    return;
   }
   ___async_unwind = 0; //@line 23136
   HEAP32[$ReallocAsyncCtx15 >> 2] = 386; //@line 23137
   $96 = $ReallocAsyncCtx15 + 4 | 0; //@line 23138
   HEAP32[$96 >> 2] = $2; //@line 23139
   $97 = $ReallocAsyncCtx15 + 8 | 0; //@line 23140
   HEAP32[$97 >> 2] = $8; //@line 23141
   $98 = $ReallocAsyncCtx15 + 12 | 0; //@line 23142
   HEAP32[$98 >> 2] = $90; //@line 23143
   $99 = $ReallocAsyncCtx15 + 16 | 0; //@line 23144
   HEAP32[$99 >> 2] = $92; //@line 23145
   $100 = $ReallocAsyncCtx15 + 20 | 0; //@line 23146
   HEAP32[$100 >> 2] = $16; //@line 23147
   $101 = $ReallocAsyncCtx15 + 24 | 0; //@line 23148
   HEAP32[$101 >> 2] = $18; //@line 23149
   $102 = $ReallocAsyncCtx15 + 28 | 0; //@line 23150
   HEAP32[$102 >> 2] = $20; //@line 23151
   $103 = $ReallocAsyncCtx15 + 32 | 0; //@line 23152
   HEAP32[$103 >> 2] = $4; //@line 23153
   $104 = $ReallocAsyncCtx15 + 36 | 0; //@line 23154
   HEAP32[$104 >> 2] = $6; //@line 23155
   $105 = $ReallocAsyncCtx15 + 40 | 0; //@line 23156
   HEAP32[$105 >> 2] = $93; //@line 23157
   sp = STACKTOP; //@line 23158
   STACKTOP = sp; //@line 23159
   return;
  } else {
   $106 = HEAP32[$94 >> 2] | 0; //@line 23161
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 23162
   FUNCTION_TABLE_vii[$106 & 31]($90, $92); //@line 23163
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 387; //@line 23166
    $107 = $ReallocAsyncCtx3 + 4 | 0; //@line 23167
    HEAP32[$107 >> 2] = $2; //@line 23168
    $108 = $ReallocAsyncCtx3 + 8 | 0; //@line 23169
    HEAP32[$108 >> 2] = $8; //@line 23170
    $109 = $ReallocAsyncCtx3 + 12 | 0; //@line 23171
    HEAP32[$109 >> 2] = $16; //@line 23172
    $110 = $ReallocAsyncCtx3 + 16 | 0; //@line 23173
    HEAP32[$110 >> 2] = $18; //@line 23174
    $111 = $ReallocAsyncCtx3 + 20 | 0; //@line 23175
    HEAP32[$111 >> 2] = $20; //@line 23176
    $112 = $ReallocAsyncCtx3 + 24 | 0; //@line 23177
    HEAP32[$112 >> 2] = $4; //@line 23178
    $113 = $ReallocAsyncCtx3 + 28 | 0; //@line 23179
    HEAP32[$113 >> 2] = $6; //@line 23180
    sp = STACKTOP; //@line 23181
    STACKTOP = sp; //@line 23182
    return;
   }
   ___async_unwind = 0; //@line 23184
   HEAP32[$ReallocAsyncCtx3 >> 2] = 387; //@line 23185
   $107 = $ReallocAsyncCtx3 + 4 | 0; //@line 23186
   HEAP32[$107 >> 2] = $2; //@line 23187
   $108 = $ReallocAsyncCtx3 + 8 | 0; //@line 23188
   HEAP32[$108 >> 2] = $8; //@line 23189
   $109 = $ReallocAsyncCtx3 + 12 | 0; //@line 23190
   HEAP32[$109 >> 2] = $16; //@line 23191
   $110 = $ReallocAsyncCtx3 + 16 | 0; //@line 23192
   HEAP32[$110 >> 2] = $18; //@line 23193
   $111 = $ReallocAsyncCtx3 + 20 | 0; //@line 23194
   HEAP32[$111 >> 2] = $20; //@line 23195
   $112 = $ReallocAsyncCtx3 + 24 | 0; //@line 23196
   HEAP32[$112 >> 2] = $4; //@line 23197
   $113 = $ReallocAsyncCtx3 + 28 | 0; //@line 23198
   HEAP32[$113 >> 2] = $6; //@line 23199
   sp = STACKTOP; //@line 23200
   STACKTOP = sp; //@line 23201
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($8 + 4 | 0) | 0) {
  _mbed_tracef(16, 13704, 13865, $4); //@line 23207
  HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($8 + 264 | 0) | 0) >> 2] = 4; //@line 23210
  $119 = HEAP8[$2 >> 0] | 16; //@line 23212
  HEAP8[$2 >> 0] = $119; //@line 23213
  $121 = $119; //@line 23214
 } else {
  $121 = HEAP8[$2 >> 0] | 0; //@line 23217
 }
 $120 = $121 & -33; //@line 23219
 HEAP8[$2 >> 0] = $120; //@line 23220
 do {
  if (!($120 & 2)) {
   $161 = $120; //@line 23225
  } else {
   $130 = $120 & -3; //@line 23227
   HEAP8[$2 >> 0] = $130; //@line 23228
   if ((HEAP32[$8 + 360 >> 2] | 0) == 2) {
    _mbed_tracef(16, 13704, 13723, $18); //@line 23233
    $135 = HEAP32[$8 + 1328 >> 2] | 0; //@line 23235
    HEAP32[$16 >> 2] = 279; //@line 23236
    HEAP32[$16 + 4 >> 2] = 0; //@line 23238
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 23239
    HEAP32[$$byval_copy >> 2] = HEAP32[$16 >> 2]; //@line 23240
    HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$16 + 4 >> 2]; //@line 23240
    $136 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($135, $8, $$byval_copy) | 0; //@line 23241
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 389; //@line 23244
     $137 = $ReallocAsyncCtx8 + 4 | 0; //@line 23245
     HEAP32[$137 >> 2] = $2; //@line 23246
     $138 = $ReallocAsyncCtx8 + 8 | 0; //@line 23247
     HEAP32[$138 >> 2] = $8; //@line 23248
     $139 = $ReallocAsyncCtx8 + 12 | 0; //@line 23249
     HEAP32[$139 >> 2] = $16; //@line 23250
     sp = STACKTOP; //@line 23251
     STACKTOP = sp; //@line 23252
     return;
    }
    HEAP32[___async_retval >> 2] = $136; //@line 23255
    ___async_unwind = 0; //@line 23256
    HEAP32[$ReallocAsyncCtx8 >> 2] = 389; //@line 23257
    $137 = $ReallocAsyncCtx8 + 4 | 0; //@line 23258
    HEAP32[$137 >> 2] = $2; //@line 23259
    $138 = $ReallocAsyncCtx8 + 8 | 0; //@line 23260
    HEAP32[$138 >> 2] = $8; //@line 23261
    $139 = $ReallocAsyncCtx8 + 12 | 0; //@line 23262
    HEAP32[$139 >> 2] = $16; //@line 23263
    sp = STACKTOP; //@line 23264
    STACKTOP = sp; //@line 23265
    return;
   }
   if ($130 & 4) {
    $159 = $130 & -5; //@line 23270
    HEAP8[$2 >> 0] = $159; //@line 23271
    $161 = $159; //@line 23272
    break;
   }
   $144 = HEAP32[$8 + 1324 >> 2] | 0; //@line 23276
   $145 = $144 + 16 | 0; //@line 23277
   $147 = __ZN11LoRaMacMcps14get_indicationEv($8 + 288 | 0) | 0; //@line 23279
   $148 = $144 + 28 | 0; //@line 23280
   $149 = HEAP32[$148 >> 2] | 0; //@line 23281
   if (!$149) {
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 23284
    _mbed_assert_internal(15615, 15620, 1102); //@line 23285
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 391; //@line 23288
     $151 = $ReallocAsyncCtx13 + 4 | 0; //@line 23289
     HEAP32[$151 >> 2] = $148; //@line 23290
     $152 = $ReallocAsyncCtx13 + 8 | 0; //@line 23291
     HEAP32[$152 >> 2] = $145; //@line 23292
     $153 = $ReallocAsyncCtx13 + 12 | 0; //@line 23293
     HEAP32[$153 >> 2] = $147; //@line 23294
     $154 = $ReallocAsyncCtx13 + 16 | 0; //@line 23295
     HEAP32[$154 >> 2] = $2; //@line 23296
     $155 = $ReallocAsyncCtx13 + 20 | 0; //@line 23297
     HEAP32[$155 >> 2] = $8; //@line 23298
     sp = STACKTOP; //@line 23299
     STACKTOP = sp; //@line 23300
     return;
    }
    ___async_unwind = 0; //@line 23302
    HEAP32[$ReallocAsyncCtx13 >> 2] = 391; //@line 23303
    $151 = $ReallocAsyncCtx13 + 4 | 0; //@line 23304
    HEAP32[$151 >> 2] = $148; //@line 23305
    $152 = $ReallocAsyncCtx13 + 8 | 0; //@line 23306
    HEAP32[$152 >> 2] = $145; //@line 23307
    $153 = $ReallocAsyncCtx13 + 12 | 0; //@line 23308
    HEAP32[$153 >> 2] = $147; //@line 23309
    $154 = $ReallocAsyncCtx13 + 16 | 0; //@line 23310
    HEAP32[$154 >> 2] = $2; //@line 23311
    $155 = $ReallocAsyncCtx13 + 20 | 0; //@line 23312
    HEAP32[$155 >> 2] = $8; //@line 23313
    sp = STACKTOP; //@line 23314
    STACKTOP = sp; //@line 23315
    return;
   } else {
    $156 = HEAP32[$149 >> 2] | 0; //@line 23317
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 23318
    FUNCTION_TABLE_vii[$156 & 31]($145, $147); //@line 23319
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 392; //@line 23322
     $157 = $ReallocAsyncCtx4 + 4 | 0; //@line 23323
     HEAP32[$157 >> 2] = $2; //@line 23324
     $158 = $ReallocAsyncCtx4 + 8 | 0; //@line 23325
     HEAP32[$158 >> 2] = $8; //@line 23326
     sp = STACKTOP; //@line 23327
     STACKTOP = sp; //@line 23328
     return;
    }
    ___async_unwind = 0; //@line 23330
    HEAP32[$ReallocAsyncCtx4 >> 2] = 392; //@line 23331
    $157 = $ReallocAsyncCtx4 + 4 | 0; //@line 23332
    HEAP32[$157 >> 2] = $2; //@line 23333
    $158 = $ReallocAsyncCtx4 + 8 | 0; //@line 23334
    HEAP32[$158 >> 2] = $8; //@line 23335
    sp = STACKTOP; //@line 23336
    STACKTOP = sp; //@line 23337
    return;
   }
  }
 } while (0);
 if (!($161 & 16)) {
  STACKTOP = sp; //@line 23344
  return;
 }
 HEAP8[$2 >> 0] = $161 & -17; //@line 23347
 $165 = HEAP32[$8 + 1324 >> 2] | 0; //@line 23349
 $166 = $165 + 48 | 0; //@line 23350
 $168 = __ZN11LoRaMacMlme14get_indicationEv($8 + 264 | 0) | 0; //@line 23352
 $169 = $165 + 60 | 0; //@line 23353
 $170 = HEAP32[$169 >> 2] | 0; //@line 23354
 if (!$170) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 23357
  _mbed_assert_internal(15615, 15620, 1102); //@line 23358
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 393; //@line 23361
   $172 = $ReallocAsyncCtx12 + 4 | 0; //@line 23362
   HEAP32[$172 >> 2] = $169; //@line 23363
   $173 = $ReallocAsyncCtx12 + 8 | 0; //@line 23364
   HEAP32[$173 >> 2] = $166; //@line 23365
   $174 = $ReallocAsyncCtx12 + 12 | 0; //@line 23366
   HEAP32[$174 >> 2] = $168; //@line 23367
   sp = STACKTOP; //@line 23368
   STACKTOP = sp; //@line 23369
   return;
  }
  ___async_unwind = 0; //@line 23371
  HEAP32[$ReallocAsyncCtx12 >> 2] = 393; //@line 23372
  $172 = $ReallocAsyncCtx12 + 4 | 0; //@line 23373
  HEAP32[$172 >> 2] = $169; //@line 23374
  $173 = $ReallocAsyncCtx12 + 8 | 0; //@line 23375
  HEAP32[$173 >> 2] = $166; //@line 23376
  $174 = $ReallocAsyncCtx12 + 12 | 0; //@line 23377
  HEAP32[$174 >> 2] = $168; //@line 23378
  sp = STACKTOP; //@line 23379
  STACKTOP = sp; //@line 23380
  return;
 } else {
  $175 = HEAP32[$170 >> 2] | 0; //@line 23382
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 23383
  FUNCTION_TABLE_vii[$175 & 31]($166, $168); //@line 23384
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 394; //@line 23387
   sp = STACKTOP; //@line 23388
   STACKTOP = sp; //@line 23389
   return;
  }
  ___async_unwind = 0; //@line 23391
  HEAP32[$ReallocAsyncCtx5 >> 2] = 394; //@line 23392
  sp = STACKTOP; //@line 23393
  STACKTOP = sp; //@line 23394
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $120 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $134 = 0, $135 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $151 = 0, $155 = 0, $156 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $28 = 0, $31 = 0, $37 = 0, $4 = 0, $40 = 0, $43 = 0, $45 = 0, $46 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $83 = 0, $84 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 21533
 STACKTOP = STACKTOP + 16 | 0; //@line 21534
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 21534
 $$byval_copy = sp; //@line 21535
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21537
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21539
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21541
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21543
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21545
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21547
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21549
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21551
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21553
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21555
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21557
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21559
 HEAP32[$10 >> 2] = HEAP32[$10 >> 2] & -2; //@line 21562
 __ZN14LoRaMacCommand20clear_command_bufferEv($8 + 4 | 0); //@line 21564
 HEAP8[$12 >> 0] = 0; //@line 21565
 $28 = $8 + 288 | 0; //@line 21566
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($28) | 0) + 10 >> 0] = 0; //@line 21569
 $31 = HEAP8[$14 >> 0] | 0; //@line 21570
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($28) | 0) + 11 >> 0] = $31; //@line 21573
 if (!(HEAP8[$8 + 370 >> 0] | 0)) {
  $37 = $8 + 956 | 0; //@line 21578
  HEAP32[$37 >> 2] = (HEAP32[$37 >> 2] | 0) + 1; //@line 21581
 }
 $40 = HEAP32[$10 >> 2] | 0; //@line 21583
 $43 = $40 & -3; //@line 21586
 if (!($40 & 2)) {
  $45 = $40; //@line 21588
 } else {
  HEAP32[$10 >> 2] = $43; //@line 21590
  $45 = $43; //@line 21591
 }
 if ($45 | 0) {
  $112 = HEAP32[$16 >> 2] | 0; //@line 21595
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 21596
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($112, $18, 1e3); //@line 21597
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 388; //@line 21600
   $113 = $ReallocAsyncCtx6 + 4 | 0; //@line 21601
   HEAP32[$113 >> 2] = $2; //@line 21602
   $114 = $ReallocAsyncCtx6 + 8 | 0; //@line 21603
   HEAP32[$114 >> 2] = $8; //@line 21604
   $115 = $ReallocAsyncCtx6 + 12 | 0; //@line 21605
   HEAP32[$115 >> 2] = $20; //@line 21606
   $116 = $ReallocAsyncCtx6 + 16 | 0; //@line 21607
   HEAP32[$116 >> 2] = $22; //@line 21608
   $117 = $ReallocAsyncCtx6 + 20 | 0; //@line 21609
   HEAP32[$117 >> 2] = $24; //@line 21610
   sp = STACKTOP; //@line 21611
   STACKTOP = sp; //@line 21612
   return;
  }
  ___async_unwind = 0; //@line 21614
  HEAP32[$ReallocAsyncCtx6 >> 2] = 388; //@line 21615
  $113 = $ReallocAsyncCtx6 + 4 | 0; //@line 21616
  HEAP32[$113 >> 2] = $2; //@line 21617
  $114 = $ReallocAsyncCtx6 + 8 | 0; //@line 21618
  HEAP32[$114 >> 2] = $8; //@line 21619
  $115 = $ReallocAsyncCtx6 + 12 | 0; //@line 21620
  HEAP32[$115 >> 2] = $20; //@line 21621
  $116 = $ReallocAsyncCtx6 + 16 | 0; //@line 21622
  HEAP32[$116 >> 2] = $22; //@line 21623
  $117 = $ReallocAsyncCtx6 + 20 | 0; //@line 21624
  HEAP32[$117 >> 2] = $24; //@line 21625
  sp = STACKTOP; //@line 21626
  STACKTOP = sp; //@line 21627
  return;
 }
 $46 = HEAP8[$2 >> 0] | 0; //@line 21629
 if ($46 & 1) {
  HEAP8[$2 >> 0] = $46 & -2; //@line 21634
  $51 = HEAP32[$8 + 1324 >> 2] | 0; //@line 21636
  $53 = __ZN11LoRaMacMcps16get_confirmationEv($8 + 288 | 0) | 0; //@line 21638
  $54 = $51 + 12 | 0; //@line 21639
  $55 = HEAP32[$54 >> 2] | 0; //@line 21640
  if (!$55) {
   $ReallocAsyncCtx16 = _emscripten_realloc_async_context(44) | 0; //@line 21643
   _mbed_assert_internal(15615, 15620, 1102); //@line 21644
   if (___async) {
    HEAP32[$ReallocAsyncCtx16 >> 2] = 384; //@line 21647
    $57 = $ReallocAsyncCtx16 + 4 | 0; //@line 21648
    HEAP32[$57 >> 2] = $2; //@line 21649
    $58 = $ReallocAsyncCtx16 + 8 | 0; //@line 21650
    HEAP32[$58 >> 2] = $8; //@line 21651
    $59 = $ReallocAsyncCtx16 + 12 | 0; //@line 21652
    HEAP32[$59 >> 2] = $54; //@line 21653
    $60 = $ReallocAsyncCtx16 + 16 | 0; //@line 21654
    HEAP32[$60 >> 2] = $51; //@line 21655
    $61 = $ReallocAsyncCtx16 + 20 | 0; //@line 21656
    HEAP32[$61 >> 2] = $53; //@line 21657
    $62 = $ReallocAsyncCtx16 + 24 | 0; //@line 21658
    HEAP32[$62 >> 2] = $20; //@line 21659
    $63 = $ReallocAsyncCtx16 + 28 | 0; //@line 21660
    HEAP32[$63 >> 2] = $22; //@line 21661
    $64 = $ReallocAsyncCtx16 + 32 | 0; //@line 21662
    HEAP32[$64 >> 2] = $24; //@line 21663
    $65 = $ReallocAsyncCtx16 + 36 | 0; //@line 21664
    HEAP32[$65 >> 2] = $4; //@line 21665
    $66 = $ReallocAsyncCtx16 + 40 | 0; //@line 21666
    HEAP32[$66 >> 2] = $6; //@line 21667
    sp = STACKTOP; //@line 21668
    STACKTOP = sp; //@line 21669
    return;
   }
   ___async_unwind = 0; //@line 21671
   HEAP32[$ReallocAsyncCtx16 >> 2] = 384; //@line 21672
   $57 = $ReallocAsyncCtx16 + 4 | 0; //@line 21673
   HEAP32[$57 >> 2] = $2; //@line 21674
   $58 = $ReallocAsyncCtx16 + 8 | 0; //@line 21675
   HEAP32[$58 >> 2] = $8; //@line 21676
   $59 = $ReallocAsyncCtx16 + 12 | 0; //@line 21677
   HEAP32[$59 >> 2] = $54; //@line 21678
   $60 = $ReallocAsyncCtx16 + 16 | 0; //@line 21679
   HEAP32[$60 >> 2] = $51; //@line 21680
   $61 = $ReallocAsyncCtx16 + 20 | 0; //@line 21681
   HEAP32[$61 >> 2] = $53; //@line 21682
   $62 = $ReallocAsyncCtx16 + 24 | 0; //@line 21683
   HEAP32[$62 >> 2] = $20; //@line 21684
   $63 = $ReallocAsyncCtx16 + 28 | 0; //@line 21685
   HEAP32[$63 >> 2] = $22; //@line 21686
   $64 = $ReallocAsyncCtx16 + 32 | 0; //@line 21687
   HEAP32[$64 >> 2] = $24; //@line 21688
   $65 = $ReallocAsyncCtx16 + 36 | 0; //@line 21689
   HEAP32[$65 >> 2] = $4; //@line 21690
   $66 = $ReallocAsyncCtx16 + 40 | 0; //@line 21691
   HEAP32[$66 >> 2] = $6; //@line 21692
   sp = STACKTOP; //@line 21693
   STACKTOP = sp; //@line 21694
   return;
  } else {
   $67 = HEAP32[$55 >> 2] | 0; //@line 21696
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 21697
   FUNCTION_TABLE_vii[$67 & 31]($51, $53); //@line 21698
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 385; //@line 21701
    $68 = $ReallocAsyncCtx2 + 4 | 0; //@line 21702
    HEAP32[$68 >> 2] = $2; //@line 21703
    $69 = $ReallocAsyncCtx2 + 8 | 0; //@line 21704
    HEAP32[$69 >> 2] = $8; //@line 21705
    $70 = $ReallocAsyncCtx2 + 12 | 0; //@line 21706
    HEAP32[$70 >> 2] = $20; //@line 21707
    $71 = $ReallocAsyncCtx2 + 16 | 0; //@line 21708
    HEAP32[$71 >> 2] = $22; //@line 21709
    $72 = $ReallocAsyncCtx2 + 20 | 0; //@line 21710
    HEAP32[$72 >> 2] = $24; //@line 21711
    $73 = $ReallocAsyncCtx2 + 24 | 0; //@line 21712
    HEAP32[$73 >> 2] = $4; //@line 21713
    $74 = $ReallocAsyncCtx2 + 28 | 0; //@line 21714
    HEAP32[$74 >> 2] = $6; //@line 21715
    sp = STACKTOP; //@line 21716
    STACKTOP = sp; //@line 21717
    return;
   }
   ___async_unwind = 0; //@line 21719
   HEAP32[$ReallocAsyncCtx2 >> 2] = 385; //@line 21720
   $68 = $ReallocAsyncCtx2 + 4 | 0; //@line 21721
   HEAP32[$68 >> 2] = $2; //@line 21722
   $69 = $ReallocAsyncCtx2 + 8 | 0; //@line 21723
   HEAP32[$69 >> 2] = $8; //@line 21724
   $70 = $ReallocAsyncCtx2 + 12 | 0; //@line 21725
   HEAP32[$70 >> 2] = $20; //@line 21726
   $71 = $ReallocAsyncCtx2 + 16 | 0; //@line 21727
   HEAP32[$71 >> 2] = $22; //@line 21728
   $72 = $ReallocAsyncCtx2 + 20 | 0; //@line 21729
   HEAP32[$72 >> 2] = $24; //@line 21730
   $73 = $ReallocAsyncCtx2 + 24 | 0; //@line 21731
   HEAP32[$73 >> 2] = $4; //@line 21732
   $74 = $ReallocAsyncCtx2 + 28 | 0; //@line 21733
   HEAP32[$74 >> 2] = $6; //@line 21734
   sp = STACKTOP; //@line 21735
   STACKTOP = sp; //@line 21736
   return;
  }
 }
 if ($46 & 8) {
  HEAP8[$2 >> 0] = $46 & -9; //@line 21743
  $79 = HEAP32[$8 + 1324 >> 2] | 0; //@line 21745
  $80 = $79 + 32 | 0; //@line 21746
  $82 = __ZN11LoRaMacMlme16get_confirmationEv($8 + 264 | 0) | 0; //@line 21748
  $83 = $79 + 44 | 0; //@line 21749
  $84 = HEAP32[$83 >> 2] | 0; //@line 21750
  if (!$84) {
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(44) | 0; //@line 21753
   _mbed_assert_internal(15615, 15620, 1102); //@line 21754
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 386; //@line 21757
    $86 = $ReallocAsyncCtx15 + 4 | 0; //@line 21758
    HEAP32[$86 >> 2] = $2; //@line 21759
    $87 = $ReallocAsyncCtx15 + 8 | 0; //@line 21760
    HEAP32[$87 >> 2] = $8; //@line 21761
    $88 = $ReallocAsyncCtx15 + 12 | 0; //@line 21762
    HEAP32[$88 >> 2] = $80; //@line 21763
    $89 = $ReallocAsyncCtx15 + 16 | 0; //@line 21764
    HEAP32[$89 >> 2] = $82; //@line 21765
    $90 = $ReallocAsyncCtx15 + 20 | 0; //@line 21766
    HEAP32[$90 >> 2] = $20; //@line 21767
    $91 = $ReallocAsyncCtx15 + 24 | 0; //@line 21768
    HEAP32[$91 >> 2] = $22; //@line 21769
    $92 = $ReallocAsyncCtx15 + 28 | 0; //@line 21770
    HEAP32[$92 >> 2] = $24; //@line 21771
    $93 = $ReallocAsyncCtx15 + 32 | 0; //@line 21772
    HEAP32[$93 >> 2] = $4; //@line 21773
    $94 = $ReallocAsyncCtx15 + 36 | 0; //@line 21774
    HEAP32[$94 >> 2] = $6; //@line 21775
    $95 = $ReallocAsyncCtx15 + 40 | 0; //@line 21776
    HEAP32[$95 >> 2] = $83; //@line 21777
    sp = STACKTOP; //@line 21778
    STACKTOP = sp; //@line 21779
    return;
   }
   ___async_unwind = 0; //@line 21781
   HEAP32[$ReallocAsyncCtx15 >> 2] = 386; //@line 21782
   $86 = $ReallocAsyncCtx15 + 4 | 0; //@line 21783
   HEAP32[$86 >> 2] = $2; //@line 21784
   $87 = $ReallocAsyncCtx15 + 8 | 0; //@line 21785
   HEAP32[$87 >> 2] = $8; //@line 21786
   $88 = $ReallocAsyncCtx15 + 12 | 0; //@line 21787
   HEAP32[$88 >> 2] = $80; //@line 21788
   $89 = $ReallocAsyncCtx15 + 16 | 0; //@line 21789
   HEAP32[$89 >> 2] = $82; //@line 21790
   $90 = $ReallocAsyncCtx15 + 20 | 0; //@line 21791
   HEAP32[$90 >> 2] = $20; //@line 21792
   $91 = $ReallocAsyncCtx15 + 24 | 0; //@line 21793
   HEAP32[$91 >> 2] = $22; //@line 21794
   $92 = $ReallocAsyncCtx15 + 28 | 0; //@line 21795
   HEAP32[$92 >> 2] = $24; //@line 21796
   $93 = $ReallocAsyncCtx15 + 32 | 0; //@line 21797
   HEAP32[$93 >> 2] = $4; //@line 21798
   $94 = $ReallocAsyncCtx15 + 36 | 0; //@line 21799
   HEAP32[$94 >> 2] = $6; //@line 21800
   $95 = $ReallocAsyncCtx15 + 40 | 0; //@line 21801
   HEAP32[$95 >> 2] = $83; //@line 21802
   sp = STACKTOP; //@line 21803
   STACKTOP = sp; //@line 21804
   return;
  } else {
   $96 = HEAP32[$84 >> 2] | 0; //@line 21806
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 21807
   FUNCTION_TABLE_vii[$96 & 31]($80, $82); //@line 21808
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 387; //@line 21811
    $97 = $ReallocAsyncCtx3 + 4 | 0; //@line 21812
    HEAP32[$97 >> 2] = $2; //@line 21813
    $98 = $ReallocAsyncCtx3 + 8 | 0; //@line 21814
    HEAP32[$98 >> 2] = $8; //@line 21815
    $99 = $ReallocAsyncCtx3 + 12 | 0; //@line 21816
    HEAP32[$99 >> 2] = $20; //@line 21817
    $100 = $ReallocAsyncCtx3 + 16 | 0; //@line 21818
    HEAP32[$100 >> 2] = $22; //@line 21819
    $101 = $ReallocAsyncCtx3 + 20 | 0; //@line 21820
    HEAP32[$101 >> 2] = $24; //@line 21821
    $102 = $ReallocAsyncCtx3 + 24 | 0; //@line 21822
    HEAP32[$102 >> 2] = $4; //@line 21823
    $103 = $ReallocAsyncCtx3 + 28 | 0; //@line 21824
    HEAP32[$103 >> 2] = $6; //@line 21825
    sp = STACKTOP; //@line 21826
    STACKTOP = sp; //@line 21827
    return;
   }
   ___async_unwind = 0; //@line 21829
   HEAP32[$ReallocAsyncCtx3 >> 2] = 387; //@line 21830
   $97 = $ReallocAsyncCtx3 + 4 | 0; //@line 21831
   HEAP32[$97 >> 2] = $2; //@line 21832
   $98 = $ReallocAsyncCtx3 + 8 | 0; //@line 21833
   HEAP32[$98 >> 2] = $8; //@line 21834
   $99 = $ReallocAsyncCtx3 + 12 | 0; //@line 21835
   HEAP32[$99 >> 2] = $20; //@line 21836
   $100 = $ReallocAsyncCtx3 + 16 | 0; //@line 21837
   HEAP32[$100 >> 2] = $22; //@line 21838
   $101 = $ReallocAsyncCtx3 + 20 | 0; //@line 21839
   HEAP32[$101 >> 2] = $24; //@line 21840
   $102 = $ReallocAsyncCtx3 + 24 | 0; //@line 21841
   HEAP32[$102 >> 2] = $4; //@line 21842
   $103 = $ReallocAsyncCtx3 + 28 | 0; //@line 21843
   HEAP32[$103 >> 2] = $6; //@line 21844
   sp = STACKTOP; //@line 21845
   STACKTOP = sp; //@line 21846
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($8 + 4 | 0) | 0) {
  _mbed_tracef(16, 13704, 13865, $4); //@line 21852
  HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($8 + 264 | 0) | 0) >> 2] = 4; //@line 21855
  $109 = HEAP8[$2 >> 0] | 16; //@line 21857
  HEAP8[$2 >> 0] = $109; //@line 21858
  $111 = $109; //@line 21859
 } else {
  $111 = HEAP8[$2 >> 0] | 0; //@line 21862
 }
 $110 = $111 & -33; //@line 21864
 HEAP8[$2 >> 0] = $110; //@line 21865
 do {
  if (!($110 & 2)) {
   $151 = $110; //@line 21870
  } else {
   $120 = $110 & -3; //@line 21872
   HEAP8[$2 >> 0] = $120; //@line 21873
   if ((HEAP32[$8 + 360 >> 2] | 0) == 2) {
    _mbed_tracef(16, 13704, 13723, $22); //@line 21878
    $125 = HEAP32[$8 + 1328 >> 2] | 0; //@line 21880
    HEAP32[$20 >> 2] = 279; //@line 21881
    HEAP32[$20 + 4 >> 2] = 0; //@line 21883
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 21884
    HEAP32[$$byval_copy >> 2] = HEAP32[$20 >> 2]; //@line 21885
    HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$20 + 4 >> 2]; //@line 21885
    $126 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($125, $8, $$byval_copy) | 0; //@line 21886
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 389; //@line 21889
     $127 = $ReallocAsyncCtx8 + 4 | 0; //@line 21890
     HEAP32[$127 >> 2] = $2; //@line 21891
     $128 = $ReallocAsyncCtx8 + 8 | 0; //@line 21892
     HEAP32[$128 >> 2] = $8; //@line 21893
     $129 = $ReallocAsyncCtx8 + 12 | 0; //@line 21894
     HEAP32[$129 >> 2] = $20; //@line 21895
     sp = STACKTOP; //@line 21896
     STACKTOP = sp; //@line 21897
     return;
    }
    HEAP32[___async_retval >> 2] = $126; //@line 21900
    ___async_unwind = 0; //@line 21901
    HEAP32[$ReallocAsyncCtx8 >> 2] = 389; //@line 21902
    $127 = $ReallocAsyncCtx8 + 4 | 0; //@line 21903
    HEAP32[$127 >> 2] = $2; //@line 21904
    $128 = $ReallocAsyncCtx8 + 8 | 0; //@line 21905
    HEAP32[$128 >> 2] = $8; //@line 21906
    $129 = $ReallocAsyncCtx8 + 12 | 0; //@line 21907
    HEAP32[$129 >> 2] = $20; //@line 21908
    sp = STACKTOP; //@line 21909
    STACKTOP = sp; //@line 21910
    return;
   }
   if ($120 & 4) {
    $149 = $120 & -5; //@line 21915
    HEAP8[$2 >> 0] = $149; //@line 21916
    $151 = $149; //@line 21917
    break;
   }
   $134 = HEAP32[$8 + 1324 >> 2] | 0; //@line 21921
   $135 = $134 + 16 | 0; //@line 21922
   $137 = __ZN11LoRaMacMcps14get_indicationEv($8 + 288 | 0) | 0; //@line 21924
   $138 = $134 + 28 | 0; //@line 21925
   $139 = HEAP32[$138 >> 2] | 0; //@line 21926
   if (!$139) {
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 21929
    _mbed_assert_internal(15615, 15620, 1102); //@line 21930
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 391; //@line 21933
     $141 = $ReallocAsyncCtx13 + 4 | 0; //@line 21934
     HEAP32[$141 >> 2] = $138; //@line 21935
     $142 = $ReallocAsyncCtx13 + 8 | 0; //@line 21936
     HEAP32[$142 >> 2] = $135; //@line 21937
     $143 = $ReallocAsyncCtx13 + 12 | 0; //@line 21938
     HEAP32[$143 >> 2] = $137; //@line 21939
     $144 = $ReallocAsyncCtx13 + 16 | 0; //@line 21940
     HEAP32[$144 >> 2] = $2; //@line 21941
     $145 = $ReallocAsyncCtx13 + 20 | 0; //@line 21942
     HEAP32[$145 >> 2] = $8; //@line 21943
     sp = STACKTOP; //@line 21944
     STACKTOP = sp; //@line 21945
     return;
    }
    ___async_unwind = 0; //@line 21947
    HEAP32[$ReallocAsyncCtx13 >> 2] = 391; //@line 21948
    $141 = $ReallocAsyncCtx13 + 4 | 0; //@line 21949
    HEAP32[$141 >> 2] = $138; //@line 21950
    $142 = $ReallocAsyncCtx13 + 8 | 0; //@line 21951
    HEAP32[$142 >> 2] = $135; //@line 21952
    $143 = $ReallocAsyncCtx13 + 12 | 0; //@line 21953
    HEAP32[$143 >> 2] = $137; //@line 21954
    $144 = $ReallocAsyncCtx13 + 16 | 0; //@line 21955
    HEAP32[$144 >> 2] = $2; //@line 21956
    $145 = $ReallocAsyncCtx13 + 20 | 0; //@line 21957
    HEAP32[$145 >> 2] = $8; //@line 21958
    sp = STACKTOP; //@line 21959
    STACKTOP = sp; //@line 21960
    return;
   } else {
    $146 = HEAP32[$139 >> 2] | 0; //@line 21962
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 21963
    FUNCTION_TABLE_vii[$146 & 31]($135, $137); //@line 21964
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 392; //@line 21967
     $147 = $ReallocAsyncCtx4 + 4 | 0; //@line 21968
     HEAP32[$147 >> 2] = $2; //@line 21969
     $148 = $ReallocAsyncCtx4 + 8 | 0; //@line 21970
     HEAP32[$148 >> 2] = $8; //@line 21971
     sp = STACKTOP; //@line 21972
     STACKTOP = sp; //@line 21973
     return;
    }
    ___async_unwind = 0; //@line 21975
    HEAP32[$ReallocAsyncCtx4 >> 2] = 392; //@line 21976
    $147 = $ReallocAsyncCtx4 + 4 | 0; //@line 21977
    HEAP32[$147 >> 2] = $2; //@line 21978
    $148 = $ReallocAsyncCtx4 + 8 | 0; //@line 21979
    HEAP32[$148 >> 2] = $8; //@line 21980
    sp = STACKTOP; //@line 21981
    STACKTOP = sp; //@line 21982
    return;
   }
  }
 } while (0);
 if (!($151 & 16)) {
  STACKTOP = sp; //@line 21989
  return;
 }
 HEAP8[$2 >> 0] = $151 & -17; //@line 21992
 $155 = HEAP32[$8 + 1324 >> 2] | 0; //@line 21994
 $156 = $155 + 48 | 0; //@line 21995
 $158 = __ZN11LoRaMacMlme14get_indicationEv($8 + 264 | 0) | 0; //@line 21997
 $159 = $155 + 60 | 0; //@line 21998
 $160 = HEAP32[$159 >> 2] | 0; //@line 21999
 if (!$160) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 22002
  _mbed_assert_internal(15615, 15620, 1102); //@line 22003
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 393; //@line 22006
   $162 = $ReallocAsyncCtx12 + 4 | 0; //@line 22007
   HEAP32[$162 >> 2] = $159; //@line 22008
   $163 = $ReallocAsyncCtx12 + 8 | 0; //@line 22009
   HEAP32[$163 >> 2] = $156; //@line 22010
   $164 = $ReallocAsyncCtx12 + 12 | 0; //@line 22011
   HEAP32[$164 >> 2] = $158; //@line 22012
   sp = STACKTOP; //@line 22013
   STACKTOP = sp; //@line 22014
   return;
  }
  ___async_unwind = 0; //@line 22016
  HEAP32[$ReallocAsyncCtx12 >> 2] = 393; //@line 22017
  $162 = $ReallocAsyncCtx12 + 4 | 0; //@line 22018
  HEAP32[$162 >> 2] = $159; //@line 22019
  $163 = $ReallocAsyncCtx12 + 8 | 0; //@line 22020
  HEAP32[$163 >> 2] = $156; //@line 22021
  $164 = $ReallocAsyncCtx12 + 12 | 0; //@line 22022
  HEAP32[$164 >> 2] = $158; //@line 22023
  sp = STACKTOP; //@line 22024
  STACKTOP = sp; //@line 22025
  return;
 } else {
  $165 = HEAP32[$160 >> 2] | 0; //@line 22027
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 22028
  FUNCTION_TABLE_vii[$165 & 31]($156, $158); //@line 22029
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 394; //@line 22032
   sp = STACKTOP; //@line 22033
   STACKTOP = sp; //@line 22034
   return;
  }
  ___async_unwind = 0; //@line 22036
  HEAP32[$ReallocAsyncCtx5 >> 2] = 394; //@line 22037
  sp = STACKTOP; //@line 22038
  STACKTOP = sp; //@line 22039
  return;
 }
}
function __ZN7LoRaMac22get_phy_event_handlersEv($0) {
 $0 = $0 | 0;
 var $$pre = 0, $$pre$i$i = 0, $$pre$i$i21 = 0, $$pre$i$i34 = 0, $$pre$i$i50 = 0, $$pre$i$i66 = 0, $$pre119 = 0, $$pre120 = 0, $$pre121 = 0, $$pre122 = 0, $1 = 0, $102 = 0, $103 = 0, $114 = 0, $115 = 0, $121 = 0, $122 = 0, $124 = 0, $125 = 0, $128 = 0, $138 = 0, $139 = 0, $149 = 0, $150 = 0, $155 = 0, $156 = 0, $158 = 0, $159 = 0, $162 = 0, $170 = 0, $171 = 0, $179 = 0, $180 = 0, $2 = 0, $21 = 0, $22 = 0, $3 = 0, $35 = 0, $36 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $6 = 0, $63 = 0, $64 = 0, $76 = 0, $77 = 0, $84 = 0, $85 = 0, $87 = 0, $88 = 0, $9 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx29 = 0, $AsyncCtx32 = 0, $AsyncCtx35 = 0, $AsyncCtx38 = 0, $AsyncCtx41 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16938
 STACKTOP = STACKTOP + 16 | 0; //@line 16939
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16939
 $1 = sp; //@line 16940
 $2 = $1 + 12 | 0; //@line 16941
 HEAP32[$1 >> 2] = 466; //@line 16942
 HEAP32[$1 + 4 >> 2] = 0; //@line 16944
 HEAP32[$1 + 8 >> 2] = $0; //@line 16946
 HEAP32[$2 >> 2] = 912; //@line 16947
 $3 = $0 + 1212 | 0; //@line 16948
 do {
  if (($3 | 0) == ($1 | 0)) {
   $35 = 912; //@line 16952
   label = 10; //@line 16953
  } else {
   $5 = $0 + 1224 | 0; //@line 16955
   $6 = HEAP32[$5 >> 2] | 0; //@line 16956
   if (!$6) {
    $21 = 912; //@line 16959
   } else {
    $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 16962
    $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 16963
    FUNCTION_TABLE_vi[$9 & 1023]($3); //@line 16964
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 467; //@line 16967
     HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 16969
     HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 16971
     HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 16973
     HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 16975
     HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 16977
     HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 16979
     HEAP32[$AsyncCtx + 28 >> 2] = $1; //@line 16981
     HEAP32[$AsyncCtx + 32 >> 2] = $1; //@line 16983
     HEAP32[$AsyncCtx + 36 >> 2] = $1; //@line 16985
     sp = STACKTOP; //@line 16986
     STACKTOP = sp; //@line 16987
     return 0; //@line 16987
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16989
    $$pre = HEAP32[$2 >> 2] | 0; //@line 16990
    if (!$$pre) {
     HEAP32[$5 >> 2] = 0; //@line 16993
     break;
    } else {
     $21 = $$pre; //@line 16996
    }
   }
   $22 = HEAP32[$21 + 4 >> 2] | 0; //@line 17000
   $AsyncCtx2 = _emscripten_alloc_async_context(40, sp) | 0; //@line 17001
   FUNCTION_TABLE_vii[$22 & 31]($3, $1); //@line 17002
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 468; //@line 17005
    HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 17007
    HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 17009
    HEAP32[$AsyncCtx2 + 12 >> 2] = $3; //@line 17011
    HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 17013
    HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 17015
    HEAP32[$AsyncCtx2 + 24 >> 2] = $2; //@line 17017
    HEAP32[$AsyncCtx2 + 28 >> 2] = $5; //@line 17019
    HEAP32[$AsyncCtx2 + 32 >> 2] = $1; //@line 17021
    HEAP32[$AsyncCtx2 + 36 >> 2] = $1; //@line 17023
    sp = STACKTOP; //@line 17024
    STACKTOP = sp; //@line 17025
    return 0; //@line 17025
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 17027
    $$pre$i$i = HEAP32[$2 >> 2] | 0; //@line 17028
    HEAP32[$5 >> 2] = $$pre$i$i; //@line 17030
    if (!$$pre$i$i) {
     break;
    } else {
     $35 = $$pre$i$i; //@line 17035
     label = 10; //@line 17036
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 10) {
   $36 = HEAP32[$35 + 8 >> 2] | 0; //@line 17045
   $AsyncCtx5 = _emscripten_alloc_async_context(32, sp) | 0; //@line 17046
   FUNCTION_TABLE_vi[$36 & 1023]($1); //@line 17047
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 469; //@line 17050
    HEAP32[$AsyncCtx5 + 4 >> 2] = $0; //@line 17052
    HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 17054
    HEAP32[$AsyncCtx5 + 12 >> 2] = $1; //@line 17056
    HEAP32[$AsyncCtx5 + 16 >> 2] = $1; //@line 17058
    HEAP32[$AsyncCtx5 + 20 >> 2] = $1; //@line 17060
    HEAP32[$AsyncCtx5 + 24 >> 2] = $1; //@line 17062
    HEAP32[$AsyncCtx5 + 28 >> 2] = $1; //@line 17064
    sp = STACKTOP; //@line 17065
    STACKTOP = sp; //@line 17066
    return 0; //@line 17066
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 17068
    break;
   }
  }
 } while (0);
 $44 = $1 + 12 | 0; //@line 17073
 HEAP32[$1 >> 2] = 7; //@line 17074
 HEAP32[$1 + 4 >> 2] = 0; //@line 17076
 HEAP32[$1 + 8 >> 2] = $0; //@line 17078
 HEAP32[$44 >> 2] = 924; //@line 17079
 $45 = $0 + 1244 | 0; //@line 17080
 do {
  if (($45 | 0) == ($1 | 0)) {
   $76 = 924; //@line 17084
   label = 22; //@line 17085
  } else {
   $47 = $0 + 1256 | 0; //@line 17087
   $48 = HEAP32[$47 >> 2] | 0; //@line 17088
   if (!$48) {
    $63 = 924; //@line 17091
   } else {
    $51 = HEAP32[$48 + 8 >> 2] | 0; //@line 17094
    $AsyncCtx8 = _emscripten_alloc_async_context(40, sp) | 0; //@line 17095
    FUNCTION_TABLE_vi[$51 & 1023]($45); //@line 17096
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 470; //@line 17099
     HEAP32[$AsyncCtx8 + 4 >> 2] = $44; //@line 17101
     HEAP32[$AsyncCtx8 + 8 >> 2] = $47; //@line 17103
     HEAP32[$AsyncCtx8 + 12 >> 2] = $0; //@line 17105
     HEAP32[$AsyncCtx8 + 16 >> 2] = $3; //@line 17107
     HEAP32[$AsyncCtx8 + 20 >> 2] = $1; //@line 17109
     HEAP32[$AsyncCtx8 + 24 >> 2] = $1; //@line 17111
     HEAP32[$AsyncCtx8 + 28 >> 2] = $45; //@line 17113
     HEAP32[$AsyncCtx8 + 32 >> 2] = $1; //@line 17115
     HEAP32[$AsyncCtx8 + 36 >> 2] = $1; //@line 17117
     sp = STACKTOP; //@line 17118
     STACKTOP = sp; //@line 17119
     return 0; //@line 17119
    }
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 17121
    $$pre119 = HEAP32[$44 >> 2] | 0; //@line 17122
    if (!$$pre119) {
     HEAP32[$47 >> 2] = 0; //@line 17125
     break;
    } else {
     $63 = $$pre119; //@line 17128
    }
   }
   $64 = HEAP32[$63 + 4 >> 2] | 0; //@line 17132
   $AsyncCtx11 = _emscripten_alloc_async_context(36, sp) | 0; //@line 17133
   FUNCTION_TABLE_vii[$64 & 31]($45, $1); //@line 17134
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 471; //@line 17137
    HEAP32[$AsyncCtx11 + 4 >> 2] = $44; //@line 17139
    HEAP32[$AsyncCtx11 + 8 >> 2] = $47; //@line 17141
    HEAP32[$AsyncCtx11 + 12 >> 2] = $0; //@line 17143
    HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 17145
    HEAP32[$AsyncCtx11 + 20 >> 2] = $1; //@line 17147
    HEAP32[$AsyncCtx11 + 24 >> 2] = $1; //@line 17149
    HEAP32[$AsyncCtx11 + 28 >> 2] = $1; //@line 17151
    HEAP32[$AsyncCtx11 + 32 >> 2] = $1; //@line 17153
    sp = STACKTOP; //@line 17154
    STACKTOP = sp; //@line 17155
    return 0; //@line 17155
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 17157
    $$pre$i$i21 = HEAP32[$44 >> 2] | 0; //@line 17158
    HEAP32[$47 >> 2] = $$pre$i$i21; //@line 17160
    if (!$$pre$i$i21) {
     break;
    } else {
     $76 = $$pre$i$i21; //@line 17165
     label = 22; //@line 17166
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 22) {
   $77 = HEAP32[$76 + 8 >> 2] | 0; //@line 17175
   $AsyncCtx14 = _emscripten_alloc_async_context(28, sp) | 0; //@line 17176
   FUNCTION_TABLE_vi[$77 & 1023]($1); //@line 17177
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 472; //@line 17180
    HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 17182
    HEAP32[$AsyncCtx14 + 8 >> 2] = $3; //@line 17184
    HEAP32[$AsyncCtx14 + 12 >> 2] = $1; //@line 17186
    HEAP32[$AsyncCtx14 + 16 >> 2] = $1; //@line 17188
    HEAP32[$AsyncCtx14 + 20 >> 2] = $1; //@line 17190
    HEAP32[$AsyncCtx14 + 24 >> 2] = $1; //@line 17192
    sp = STACKTOP; //@line 17193
    STACKTOP = sp; //@line 17194
    return 0; //@line 17194
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 17196
    break;
   }
  }
 } while (0);
 $84 = $1 + 12 | 0; //@line 17201
 HEAP32[$1 >> 2] = 473; //@line 17202
 HEAP32[$1 + 4 >> 2] = 0; //@line 17204
 HEAP32[$1 + 8 >> 2] = $0; //@line 17206
 HEAP32[$84 >> 2] = 912; //@line 17207
 $85 = $0 + 1276 | 0; //@line 17208
 do {
  if (($85 | 0) == ($1 | 0)) {
   $114 = 912; //@line 17212
   label = 34; //@line 17213
  } else {
   $87 = $0 + 1288 | 0; //@line 17215
   $88 = HEAP32[$87 >> 2] | 0; //@line 17216
   if (!$88) {
    $102 = 912; //@line 17219
   } else {
    $91 = HEAP32[$88 + 8 >> 2] | 0; //@line 17222
    $AsyncCtx17 = _emscripten_alloc_async_context(36, sp) | 0; //@line 17223
    FUNCTION_TABLE_vi[$91 & 1023]($85); //@line 17224
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 474; //@line 17227
     HEAP32[$AsyncCtx17 + 4 >> 2] = $0; //@line 17229
     HEAP32[$AsyncCtx17 + 8 >> 2] = $84; //@line 17231
     HEAP32[$AsyncCtx17 + 12 >> 2] = $3; //@line 17233
     HEAP32[$AsyncCtx17 + 16 >> 2] = $87; //@line 17235
     HEAP32[$AsyncCtx17 + 20 >> 2] = $1; //@line 17237
     HEAP32[$AsyncCtx17 + 24 >> 2] = $1; //@line 17239
     HEAP32[$AsyncCtx17 + 28 >> 2] = $85; //@line 17241
     HEAP32[$AsyncCtx17 + 32 >> 2] = $1; //@line 17243
     sp = STACKTOP; //@line 17244
     STACKTOP = sp; //@line 17245
     return 0; //@line 17245
    }
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 17247
    $$pre120 = HEAP32[$84 >> 2] | 0; //@line 17248
    if (!$$pre120) {
     HEAP32[$87 >> 2] = 0; //@line 17251
     break;
    } else {
     $102 = $$pre120; //@line 17254
    }
   }
   $103 = HEAP32[$102 + 4 >> 2] | 0; //@line 17258
   $AsyncCtx20 = _emscripten_alloc_async_context(32, sp) | 0; //@line 17259
   FUNCTION_TABLE_vii[$103 & 31]($85, $1); //@line 17260
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 475; //@line 17263
    HEAP32[$AsyncCtx20 + 4 >> 2] = $0; //@line 17265
    HEAP32[$AsyncCtx20 + 8 >> 2] = $3; //@line 17267
    HEAP32[$AsyncCtx20 + 12 >> 2] = $1; //@line 17269
    HEAP32[$AsyncCtx20 + 16 >> 2] = $1; //@line 17271
    HEAP32[$AsyncCtx20 + 20 >> 2] = $84; //@line 17273
    HEAP32[$AsyncCtx20 + 24 >> 2] = $87; //@line 17275
    HEAP32[$AsyncCtx20 + 28 >> 2] = $1; //@line 17277
    sp = STACKTOP; //@line 17278
    STACKTOP = sp; //@line 17279
    return 0; //@line 17279
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 17281
    $$pre$i$i34 = HEAP32[$84 >> 2] | 0; //@line 17282
    HEAP32[$87 >> 2] = $$pre$i$i34; //@line 17284
    if (!$$pre$i$i34) {
     break;
    } else {
     $114 = $$pre$i$i34; //@line 17289
     label = 34; //@line 17290
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 34) {
   $115 = HEAP32[$114 + 8 >> 2] | 0; //@line 17299
   $AsyncCtx23 = _emscripten_alloc_async_context(24, sp) | 0; //@line 17300
   FUNCTION_TABLE_vi[$115 & 1023]($1); //@line 17301
   if (___async) {
    HEAP32[$AsyncCtx23 >> 2] = 476; //@line 17304
    HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 17306
    HEAP32[$AsyncCtx23 + 8 >> 2] = $3; //@line 17308
    HEAP32[$AsyncCtx23 + 12 >> 2] = $1; //@line 17310
    HEAP32[$AsyncCtx23 + 16 >> 2] = $1; //@line 17312
    HEAP32[$AsyncCtx23 + 20 >> 2] = $1; //@line 17314
    sp = STACKTOP; //@line 17315
    STACKTOP = sp; //@line 17316
    return 0; //@line 17316
   } else {
    _emscripten_free_async_context($AsyncCtx23 | 0); //@line 17318
    break;
   }
  }
 } while (0);
 $121 = $1 + 12 | 0; //@line 17323
 HEAP32[$1 >> 2] = 477; //@line 17324
 HEAP32[$1 + 4 >> 2] = 0; //@line 17326
 HEAP32[$1 + 8 >> 2] = $0; //@line 17328
 HEAP32[$121 >> 2] = 912; //@line 17329
 $122 = $0 + 1228 | 0; //@line 17330
 do {
  if (($122 | 0) == ($1 | 0)) {
   $149 = 912; //@line 17334
   label = 46; //@line 17335
  } else {
   $124 = $0 + 1240 | 0; //@line 17337
   $125 = HEAP32[$124 >> 2] | 0; //@line 17338
   if (!$125) {
    $138 = 912; //@line 17341
   } else {
    $128 = HEAP32[$125 + 8 >> 2] | 0; //@line 17344
    $AsyncCtx26 = _emscripten_alloc_async_context(32, sp) | 0; //@line 17345
    FUNCTION_TABLE_vi[$128 & 1023]($122); //@line 17346
    if (___async) {
     HEAP32[$AsyncCtx26 >> 2] = 478; //@line 17349
     HEAP32[$AsyncCtx26 + 4 >> 2] = $121; //@line 17351
     HEAP32[$AsyncCtx26 + 8 >> 2] = $0; //@line 17353
     HEAP32[$AsyncCtx26 + 12 >> 2] = $3; //@line 17355
     HEAP32[$AsyncCtx26 + 16 >> 2] = $124; //@line 17357
     HEAP32[$AsyncCtx26 + 20 >> 2] = $1; //@line 17359
     HEAP32[$AsyncCtx26 + 24 >> 2] = $1; //@line 17361
     HEAP32[$AsyncCtx26 + 28 >> 2] = $122; //@line 17363
     sp = STACKTOP; //@line 17364
     STACKTOP = sp; //@line 17365
     return 0; //@line 17365
    }
    _emscripten_free_async_context($AsyncCtx26 | 0); //@line 17367
    $$pre121 = HEAP32[$121 >> 2] | 0; //@line 17368
    if (!$$pre121) {
     HEAP32[$124 >> 2] = 0; //@line 17371
     break;
    } else {
     $138 = $$pre121; //@line 17374
    }
   }
   $139 = HEAP32[$138 + 4 >> 2] | 0; //@line 17378
   $AsyncCtx29 = _emscripten_alloc_async_context(28, sp) | 0; //@line 17379
   FUNCTION_TABLE_vii[$139 & 31]($122, $1); //@line 17380
   if (___async) {
    HEAP32[$AsyncCtx29 >> 2] = 479; //@line 17383
    HEAP32[$AsyncCtx29 + 4 >> 2] = $0; //@line 17385
    HEAP32[$AsyncCtx29 + 8 >> 2] = $3; //@line 17387
    HEAP32[$AsyncCtx29 + 12 >> 2] = $121; //@line 17389
    HEAP32[$AsyncCtx29 + 16 >> 2] = $124; //@line 17391
    HEAP32[$AsyncCtx29 + 20 >> 2] = $1; //@line 17393
    HEAP32[$AsyncCtx29 + 24 >> 2] = $1; //@line 17395
    sp = STACKTOP; //@line 17396
    STACKTOP = sp; //@line 17397
    return 0; //@line 17397
   } else {
    _emscripten_free_async_context($AsyncCtx29 | 0); //@line 17399
    $$pre$i$i50 = HEAP32[$121 >> 2] | 0; //@line 17400
    HEAP32[$124 >> 2] = $$pre$i$i50; //@line 17402
    if (!$$pre$i$i50) {
     break;
    } else {
     $149 = $$pre$i$i50; //@line 17407
     label = 46; //@line 17408
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 46) {
   $150 = HEAP32[$149 + 8 >> 2] | 0; //@line 17417
   $AsyncCtx32 = _emscripten_alloc_async_context(20, sp) | 0; //@line 17418
   FUNCTION_TABLE_vi[$150 & 1023]($1); //@line 17419
   if (___async) {
    HEAP32[$AsyncCtx32 >> 2] = 480; //@line 17422
    HEAP32[$AsyncCtx32 + 4 >> 2] = $1; //@line 17424
    HEAP32[$AsyncCtx32 + 8 >> 2] = $1; //@line 17426
    HEAP32[$AsyncCtx32 + 12 >> 2] = $0; //@line 17428
    HEAP32[$AsyncCtx32 + 16 >> 2] = $3; //@line 17430
    sp = STACKTOP; //@line 17431
    STACKTOP = sp; //@line 17432
    return 0; //@line 17432
   } else {
    _emscripten_free_async_context($AsyncCtx32 | 0); //@line 17434
    break;
   }
  }
 } while (0);
 $155 = $1 + 12 | 0; //@line 17439
 HEAP32[$1 >> 2] = 481; //@line 17440
 HEAP32[$1 + 4 >> 2] = 0; //@line 17442
 HEAP32[$1 + 8 >> 2] = $0; //@line 17444
 HEAP32[$155 >> 2] = 912; //@line 17445
 $156 = $0 + 1260 | 0; //@line 17446
 if (($156 | 0) == ($1 | 0)) {
  $179 = 912; //@line 17449
 } else {
  $158 = $0 + 1272 | 0; //@line 17451
  $159 = HEAP32[$158 >> 2] | 0; //@line 17452
  if (!$159) {
   $170 = 912; //@line 17455
  } else {
   $162 = HEAP32[$159 + 8 >> 2] | 0; //@line 17458
   $AsyncCtx35 = _emscripten_alloc_async_context(24, sp) | 0; //@line 17459
   FUNCTION_TABLE_vi[$162 & 1023]($156); //@line 17460
   if (___async) {
    HEAP32[$AsyncCtx35 >> 2] = 482; //@line 17463
    HEAP32[$AsyncCtx35 + 4 >> 2] = $155; //@line 17465
    HEAP32[$AsyncCtx35 + 8 >> 2] = $158; //@line 17467
    HEAP32[$AsyncCtx35 + 12 >> 2] = $156; //@line 17469
    HEAP32[$AsyncCtx35 + 16 >> 2] = $1; //@line 17471
    HEAP32[$AsyncCtx35 + 20 >> 2] = $3; //@line 17473
    sp = STACKTOP; //@line 17474
    STACKTOP = sp; //@line 17475
    return 0; //@line 17475
   }
   _emscripten_free_async_context($AsyncCtx35 | 0); //@line 17477
   $$pre122 = HEAP32[$155 >> 2] | 0; //@line 17478
   if (!$$pre122) {
    HEAP32[$158 >> 2] = 0; //@line 17481
    STACKTOP = sp; //@line 17482
    return $3 | 0; //@line 17482
   } else {
    $170 = $$pre122; //@line 17484
   }
  }
  $171 = HEAP32[$170 + 4 >> 2] | 0; //@line 17488
  $AsyncCtx38 = _emscripten_alloc_async_context(20, sp) | 0; //@line 17489
  FUNCTION_TABLE_vii[$171 & 31]($156, $1); //@line 17490
  if (___async) {
   HEAP32[$AsyncCtx38 >> 2] = 483; //@line 17493
   HEAP32[$AsyncCtx38 + 4 >> 2] = $155; //@line 17495
   HEAP32[$AsyncCtx38 + 8 >> 2] = $158; //@line 17497
   HEAP32[$AsyncCtx38 + 12 >> 2] = $1; //@line 17499
   HEAP32[$AsyncCtx38 + 16 >> 2] = $3; //@line 17501
   sp = STACKTOP; //@line 17502
   STACKTOP = sp; //@line 17503
   return 0; //@line 17503
  }
  _emscripten_free_async_context($AsyncCtx38 | 0); //@line 17505
  $$pre$i$i66 = HEAP32[$155 >> 2] | 0; //@line 17506
  HEAP32[$158 >> 2] = $$pre$i$i66; //@line 17508
  if (!$$pre$i$i66) {
   STACKTOP = sp; //@line 17511
   return $3 | 0; //@line 17511
  } else {
   $179 = $$pre$i$i66; //@line 17513
  }
 }
 $180 = HEAP32[$179 + 8 >> 2] | 0; //@line 17517
 $AsyncCtx41 = _emscripten_alloc_async_context(12, sp) | 0; //@line 17518
 FUNCTION_TABLE_vi[$180 & 1023]($1); //@line 17519
 if (___async) {
  HEAP32[$AsyncCtx41 >> 2] = 484; //@line 17522
  HEAP32[$AsyncCtx41 + 4 >> 2] = $1; //@line 17524
  HEAP32[$AsyncCtx41 + 8 >> 2] = $3; //@line 17526
  sp = STACKTOP; //@line 17527
  STACKTOP = sp; //@line 17528
  return 0; //@line 17528
 }
 _emscripten_free_async_context($AsyncCtx41 | 0); //@line 17530
 STACKTOP = sp; //@line 17531
 return $3 | 0; //@line 17531
}
function _mbedtls_cipher_cmac_finish($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$013$i = 0, $$01720$i55 = 0, $$019$i = 0, $$019$i52 = 0, $$021$i54 = 0, $$09$i = 0, $$09$i41 = 0, $$09$i45 = 0, $$sink$sink$i = 0, $12 = 0, $129 = 0, $132 = 0, $145 = 0, $148 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $170 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $185 = 0, $19 = 0, $2 = 0, $20 = 0, $202 = 0, $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $64 = 0, $65 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, label = 0, sp = 0, $156$looptemp = 0;
 sp = STACKTOP; //@line 3944
 STACKTOP = STACKTOP + 80 | 0; //@line 3945
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 3945
 $2 = sp + 56 | 0; //@line 3946
 $3 = sp + 4 | 0; //@line 3947
 $4 = sp + 40 | 0; //@line 3948
 $5 = sp + 24 | 0; //@line 3949
 $6 = sp + 8 | 0; //@line 3950
 $7 = sp; //@line 3951
 if (!$0) {
  $$0 = -24832; //@line 3954
  STACKTOP = sp; //@line 3955
  return $$0 | 0; //@line 3955
 }
 $9 = HEAP32[$0 >> 2] | 0; //@line 3957
 if (!$9) {
  $$0 = -24832; //@line 3960
  STACKTOP = sp; //@line 3961
  return $$0 | 0; //@line 3961
 }
 $12 = HEAP32[$0 + 64 >> 2] | 0; //@line 3964
 if (($1 | 0) == 0 | ($12 | 0) == 0) {
  $$0 = -24832; //@line 3969
  STACKTOP = sp; //@line 3970
  return $$0 | 0; //@line 3970
 }
 $16 = HEAP32[$9 + 24 >> 2] | 0; //@line 3973
 $17 = $4 + 1 | 0; //@line 3974
 HEAP8[$4 >> 0] = 0; //@line 3975
 $18 = $4 + 2 | 0; //@line 3976
 HEAP8[$17 >> 0] = 0; //@line 3977
 $19 = $4 + 3 | 0; //@line 3978
 HEAP8[$18 >> 0] = 0; //@line 3979
 $20 = $4 + 4 | 0; //@line 3980
 HEAP8[$19 >> 0] = 0; //@line 3981
 $21 = $4 + 5 | 0; //@line 3982
 HEAP8[$20 >> 0] = 0; //@line 3983
 $22 = $4 + 6 | 0; //@line 3984
 HEAP8[$21 >> 0] = 0; //@line 3985
 $23 = $4 + 7 | 0; //@line 3986
 HEAP8[$22 >> 0] = 0; //@line 3987
 $24 = $4 + 8 | 0; //@line 3988
 HEAP8[$23 >> 0] = 0; //@line 3989
 $25 = $4 + 9 | 0; //@line 3990
 HEAP8[$24 >> 0] = 0; //@line 3991
 $26 = $4 + 10 | 0; //@line 3992
 HEAP8[$25 >> 0] = 0; //@line 3993
 $27 = $4 + 11 | 0; //@line 3994
 HEAP8[$26 >> 0] = 0; //@line 3995
 $28 = $4 + 12 | 0; //@line 3996
 HEAP8[$27 >> 0] = 0; //@line 3997
 $29 = $4 + 13 | 0; //@line 3998
 HEAP8[$28 >> 0] = 0; //@line 3999
 $30 = $4 + 14 | 0; //@line 4000
 HEAP8[$29 >> 0] = 0; //@line 4001
 $31 = $4 + 15 | 0; //@line 4002
 HEAP8[$30 >> 0] = 0; //@line 4003
 HEAP8[$31 >> 0] = 0; //@line 4004
 $32 = $5 + 1 | 0; //@line 4005
 HEAP8[$5 >> 0] = 0; //@line 4006
 $33 = $5 + 2 | 0; //@line 4007
 HEAP8[$32 >> 0] = 0; //@line 4008
 $34 = $5 + 3 | 0; //@line 4009
 HEAP8[$33 >> 0] = 0; //@line 4010
 $35 = $5 + 4 | 0; //@line 4011
 HEAP8[$34 >> 0] = 0; //@line 4012
 $36 = $5 + 5 | 0; //@line 4013
 HEAP8[$35 >> 0] = 0; //@line 4014
 $37 = $5 + 6 | 0; //@line 4015
 HEAP8[$36 >> 0] = 0; //@line 4016
 $38 = $5 + 7 | 0; //@line 4017
 HEAP8[$37 >> 0] = 0; //@line 4018
 $39 = $5 + 8 | 0; //@line 4019
 HEAP8[$38 >> 0] = 0; //@line 4020
 $40 = $5 + 9 | 0; //@line 4021
 HEAP8[$39 >> 0] = 0; //@line 4022
 $41 = $5 + 10 | 0; //@line 4023
 HEAP8[$40 >> 0] = 0; //@line 4024
 $42 = $5 + 11 | 0; //@line 4025
 HEAP8[$41 >> 0] = 0; //@line 4026
 $43 = $5 + 12 | 0; //@line 4027
 HEAP8[$42 >> 0] = 0; //@line 4028
 $44 = $5 + 13 | 0; //@line 4029
 HEAP8[$43 >> 0] = 0; //@line 4030
 $45 = $5 + 14 | 0; //@line 4031
 HEAP8[$44 >> 0] = 0; //@line 4032
 $46 = $5 + 15 | 0; //@line 4033
 HEAP8[$45 >> 0] = 0; //@line 4034
 HEAP8[$46 >> 0] = 0; //@line 4035
 $47 = $2 + 1 | 0; //@line 4036
 HEAP8[$2 >> 0] = 0; //@line 4037
 $48 = $2 + 2 | 0; //@line 4038
 HEAP8[$47 >> 0] = 0; //@line 4039
 $49 = $2 + 3 | 0; //@line 4040
 HEAP8[$48 >> 0] = 0; //@line 4041
 $50 = $2 + 4 | 0; //@line 4042
 HEAP8[$49 >> 0] = 0; //@line 4043
 $51 = $2 + 5 | 0; //@line 4044
 HEAP8[$50 >> 0] = 0; //@line 4045
 $52 = $2 + 6 | 0; //@line 4046
 HEAP8[$51 >> 0] = 0; //@line 4047
 $53 = $2 + 7 | 0; //@line 4048
 HEAP8[$52 >> 0] = 0; //@line 4049
 $54 = $2 + 8 | 0; //@line 4050
 HEAP8[$53 >> 0] = 0; //@line 4051
 $55 = $2 + 9 | 0; //@line 4052
 HEAP8[$54 >> 0] = 0; //@line 4053
 $56 = $2 + 10 | 0; //@line 4054
 HEAP8[$55 >> 0] = 0; //@line 4055
 $57 = $2 + 11 | 0; //@line 4056
 HEAP8[$56 >> 0] = 0; //@line 4057
 $58 = $2 + 12 | 0; //@line 4058
 HEAP8[$57 >> 0] = 0; //@line 4059
 $59 = $2 + 13 | 0; //@line 4060
 HEAP8[$58 >> 0] = 0; //@line 4061
 $60 = $2 + 14 | 0; //@line 4062
 HEAP8[$59 >> 0] = 0; //@line 4063
 $61 = $2 + 15 | 0; //@line 4064
 HEAP8[$60 >> 0] = 0; //@line 4065
 HEAP8[$61 >> 0] = 0; //@line 4066
 $64 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 4069
 $AsyncCtx2 = _emscripten_alloc_async_context(252, sp) | 0; //@line 4070
 $65 = _mbedtls_cipher_update($0, $2, $64, $2, $3) | 0; //@line 4071
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 588; //@line 4074
  HEAP32[$AsyncCtx2 + 4 >> 2] = $64; //@line 4076
  HEAP32[$AsyncCtx2 + 8 >> 2] = $28; //@line 4078
  HEAP32[$AsyncCtx2 + 12 >> 2] = $31; //@line 4080
  HEAP32[$AsyncCtx2 + 16 >> 2] = $5; //@line 4082
  HEAP32[$AsyncCtx2 + 20 >> 2] = $19; //@line 4084
  HEAP32[$AsyncCtx2 + 24 >> 2] = $25; //@line 4086
  HEAP32[$AsyncCtx2 + 28 >> 2] = $48; //@line 4088
  HEAP32[$AsyncCtx2 + 32 >> 2] = $12; //@line 4090
  HEAP32[$AsyncCtx2 + 36 >> 2] = $60; //@line 4092
  HEAP32[$AsyncCtx2 + 40 >> 2] = $51; //@line 4094
  HEAP32[$AsyncCtx2 + 44 >> 2] = $40; //@line 4096
  HEAP32[$AsyncCtx2 + 48 >> 2] = $43; //@line 4098
  HEAP32[$AsyncCtx2 + 52 >> 2] = $22; //@line 4100
  HEAP32[$AsyncCtx2 + 56 >> 2] = $58; //@line 4102
  HEAP32[$AsyncCtx2 + 60 >> 2] = $38; //@line 4104
  HEAP32[$AsyncCtx2 + 64 >> 2] = $41; //@line 4106
  HEAP32[$AsyncCtx2 + 68 >> 2] = $44; //@line 4108
  HEAP32[$AsyncCtx2 + 72 >> 2] = $12; //@line 4110
  HEAP32[$AsyncCtx2 + 76 >> 2] = $61; //@line 4112
  HEAP32[$AsyncCtx2 + 80 >> 2] = $3; //@line 4114
  HEAP32[$AsyncCtx2 + 84 >> 2] = $20; //@line 4116
  HEAP32[$AsyncCtx2 + 88 >> 2] = $26; //@line 4118
  HEAP32[$AsyncCtx2 + 92 >> 2] = $30; //@line 4120
  HEAP32[$AsyncCtx2 + 96 >> 2] = $7; //@line 4122
  HEAP32[$AsyncCtx2 + 100 >> 2] = $6; //@line 4124
  HEAP32[$AsyncCtx2 + 104 >> 2] = $34; //@line 4126
  HEAP32[$AsyncCtx2 + 108 >> 2] = $37; //@line 4128
  HEAP32[$AsyncCtx2 + 112 >> 2] = $54; //@line 4130
  HEAP32[$AsyncCtx2 + 116 >> 2] = $57; //@line 4132
  HEAP32[$AsyncCtx2 + 120 >> 2] = $23; //@line 4134
  HEAP32[$AsyncCtx2 + 124 >> 2] = $5; //@line 4136
  HEAP32[$AsyncCtx2 + 128 >> 2] = $2; //@line 4138
  HEAP32[$AsyncCtx2 + 132 >> 2] = $0; //@line 4140
  HEAP32[$AsyncCtx2 + 136 >> 2] = $36; //@line 4142
  HEAP32[$AsyncCtx2 + 140 >> 2] = $42; //@line 4144
  HEAP32[$AsyncCtx2 + 144 >> 2] = $1; //@line 4146
  HEAP32[$AsyncCtx2 + 148 >> 2] = $47; //@line 4148
  HEAP32[$AsyncCtx2 + 152 >> 2] = $24; //@line 4150
  HEAP32[$AsyncCtx2 + 156 >> 2] = $27; //@line 4152
  HEAP32[$AsyncCtx2 + 160 >> 2] = $50; //@line 4154
  HEAP32[$AsyncCtx2 + 164 >> 2] = $17; //@line 4156
  HEAP32[$AsyncCtx2 + 168 >> 2] = $4; //@line 4158
  HEAP32[$AsyncCtx2 + 172 >> 2] = $6; //@line 4160
  HEAP32[$AsyncCtx2 + 176 >> 2] = $33; //@line 4162
  HEAP32[$AsyncCtx2 + 180 >> 2] = $45; //@line 4164
  HEAP32[$AsyncCtx2 + 184 >> 2] = $53; //@line 4166
  HEAP32[$AsyncCtx2 + 188 >> 2] = $29; //@line 4168
  HEAP32[$AsyncCtx2 + 192 >> 2] = $56; //@line 4170
  HEAP32[$AsyncCtx2 + 196 >> 2] = $32; //@line 4172
  HEAP32[$AsyncCtx2 + 200 >> 2] = $16; //@line 4174
  HEAP32[$AsyncCtx2 + 204 >> 2] = $4; //@line 4176
  HEAP32[$AsyncCtx2 + 208 >> 2] = $35; //@line 4178
  HEAP32[$AsyncCtx2 + 212 >> 2] = $18; //@line 4180
  HEAP32[$AsyncCtx2 + 216 >> 2] = $21; //@line 4182
  HEAP32[$AsyncCtx2 + 220 >> 2] = $49; //@line 4184
  HEAP32[$AsyncCtx2 + 224 >> 2] = $2; //@line 4186
  HEAP32[$AsyncCtx2 + 228 >> 2] = $55; //@line 4188
  HEAP32[$AsyncCtx2 + 232 >> 2] = $46; //@line 4190
  HEAP32[$AsyncCtx2 + 236 >> 2] = $7; //@line 4192
  HEAP32[$AsyncCtx2 + 240 >> 2] = $39; //@line 4194
  HEAP32[$AsyncCtx2 + 244 >> 2] = $59; //@line 4196
  HEAP32[$AsyncCtx2 + 248 >> 2] = $52; //@line 4198
  sp = STACKTOP; //@line 4199
  STACKTOP = sp; //@line 4200
  return 0; //@line 4200
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 4202
 L13 : do {
  if (!$65) {
   switch ($64 | 0) {
   case 16:
    {
     $$019$i52 = 135; //@line 4208
     break;
    }
   case 8:
    {
     $$019$i52 = 27; //@line 4212
     break;
    }
   default:
    {
     break L13;
    }
   }
   $129 = $64 + -1 | 0; //@line 4219
   $$01720$i55 = 0; //@line 4220
   $$021$i54 = $129; //@line 4220
   while (1) {
    $132 = HEAPU8[$2 + $$021$i54 >> 0] | 0; //@line 4224
    HEAP8[$4 + $$021$i54 >> 0] = $132 << 1 | $$01720$i55; //@line 4229
    if (($$021$i54 | 0) > 0) {
     $$01720$i55 = $132 >>> 7; //@line 4234
     $$021$i54 = $$021$i54 + -1 | 0; //@line 4234
    } else {
     break;
    }
   }
   $145 = $4 + $129 | 0; //@line 4244
   $148 = $$019$i52 & 0 - ((HEAPU8[$2 >> 0] | 0) >>> 7) ^ (HEAPU8[$145 >> 0] | 0); //@line 4247
   HEAP8[$145 >> 0] = $148; //@line 4249
   switch ($64 | 0) {
   case 16:
    {
     $$019$i = 135; //@line 4252
     break;
    }
   case 8:
    {
     $$019$i = 27; //@line 4256
     break;
    }
   default:
    {
     break L13;
    }
   }
   HEAP8[$5 + $129 >> 0] = $148 << 1; //@line 4266
   if (($129 | 0) > 0) {
    $156 = $148; //@line 4270
    $157 = $64 + -2 | 0; //@line 4270
    while (1) {
     $156$looptemp = $156;
     $156 = HEAPU8[$4 + $157 >> 0] | 0; //@line 4275
     HEAP8[$5 + $157 >> 0] = $156 << 1 | $156$looptemp >>> 7; //@line 4280
     if (($157 | 0) <= 0) {
      break;
     } else {
      $157 = $157 + -1 | 0; //@line 4284
     }
    }
   }
   $170 = $5 + $129 | 0; //@line 4295
   HEAP8[$170 >> 0] = $$019$i & 0 - ((HEAPU8[$4 >> 0] | 0) >>> 7) ^ (HEAPU8[$170 >> 0] | 0); //@line 4300
  }
 } while (0);
 HEAP8[$2 >> 0] = 0; //@line 4303
 HEAP8[$47 >> 0] = 0; //@line 4304
 HEAP8[$48 >> 0] = 0; //@line 4305
 HEAP8[$49 >> 0] = 0; //@line 4306
 HEAP8[$50 >> 0] = 0; //@line 4307
 HEAP8[$51 >> 0] = 0; //@line 4308
 HEAP8[$52 >> 0] = 0; //@line 4309
 HEAP8[$53 >> 0] = 0; //@line 4310
 HEAP8[$54 >> 0] = 0; //@line 4311
 HEAP8[$55 >> 0] = 0; //@line 4312
 HEAP8[$56 >> 0] = 0; //@line 4313
 HEAP8[$57 >> 0] = 0; //@line 4314
 HEAP8[$58 >> 0] = 0; //@line 4315
 HEAP8[$59 >> 0] = 0; //@line 4316
 HEAP8[$60 >> 0] = 0; //@line 4317
 HEAP8[$61 >> 0] = 0; //@line 4318
 $175 = $12 + 16 | 0; //@line 4319
 $176 = $12 + 32 | 0; //@line 4320
 $177 = HEAP32[$176 >> 2] | 0; //@line 4321
 if ($177 >>> 0 < $16 >>> 0) {
  $$013$i = 0; //@line 4324
  do {
   if ($$013$i >>> 0 < $177 >>> 0) {
    $$sink$sink$i = HEAP8[$12 + 16 + $$013$i >> 0] | 0; //@line 4330
   } else {
    $$sink$sink$i = ($$013$i | 0) == ($177 | 0) ? -128 : 0; //@line 4334
   }
   HEAP8[$6 + $$013$i >> 0] = $$sink$sink$i; //@line 4337
   $$013$i = $$013$i + 1 | 0; //@line 4338
  } while (($$013$i | 0) != ($16 | 0));
  $$09$i45 = 0; //@line 4341
  do {
   $185 = $6 + $$09$i45 | 0; //@line 4348
   HEAP8[$185 >> 0] = HEAP8[$5 + $$09$i45 >> 0] ^ HEAP8[$185 >> 0]; //@line 4353
   $$09$i45 = $$09$i45 + 1 | 0; //@line 4354
  } while (($$09$i45 | 0) != ($16 | 0));
  label = 25; //@line 4357
 } else {
  if ($16 | 0) {
   $$09$i41 = 0; //@line 4366
   do {
    HEAP8[$6 + $$09$i41 >> 0] = HEAP8[$4 + $$09$i41 >> 0] ^ HEAP8[$12 + 16 + $$09$i41 >> 0]; //@line 4374
    $$09$i41 = $$09$i41 + 1 | 0; //@line 4375
   } while (($$09$i41 | 0) != ($16 | 0));
   label = 25; //@line 4378
  }
 }
 if ((label | 0) == 25) {
  if ($16 | 0) {
   $$09$i = 0; //@line 4389
   do {
    $202 = $12 + $$09$i | 0; //@line 4393
    HEAP8[$202 >> 0] = HEAP8[$202 >> 0] ^ HEAP8[$6 + $$09$i >> 0]; //@line 4396
    $$09$i = $$09$i + 1 | 0; //@line 4397
   } while (($$09$i | 0) != ($16 | 0));
  }
 }
 $AsyncCtx = _emscripten_alloc_async_context(164, sp) | 0; //@line 4407
 $206 = _mbedtls_cipher_update($0, $12, $16, $12, $7) | 0; //@line 4408
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 589; //@line 4411
  HEAP32[$AsyncCtx + 4 >> 2] = $28; //@line 4413
  HEAP32[$AsyncCtx + 8 >> 2] = $31; //@line 4415
  HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 4417
  HEAP32[$AsyncCtx + 16 >> 2] = $19; //@line 4419
  HEAP32[$AsyncCtx + 20 >> 2] = $25; //@line 4421
  HEAP32[$AsyncCtx + 24 >> 2] = $12; //@line 4423
  HEAP32[$AsyncCtx + 28 >> 2] = $40; //@line 4425
  HEAP32[$AsyncCtx + 32 >> 2] = $43; //@line 4427
  HEAP32[$AsyncCtx + 36 >> 2] = $22; //@line 4429
  HEAP32[$AsyncCtx + 40 >> 2] = $38; //@line 4431
  HEAP32[$AsyncCtx + 44 >> 2] = $41; //@line 4433
  HEAP32[$AsyncCtx + 48 >> 2] = $44; //@line 4435
  HEAP32[$AsyncCtx + 52 >> 2] = $12; //@line 4437
  HEAP32[$AsyncCtx + 56 >> 2] = $20; //@line 4439
  HEAP32[$AsyncCtx + 60 >> 2] = $26; //@line 4441
  HEAP32[$AsyncCtx + 64 >> 2] = $30; //@line 4443
  HEAP32[$AsyncCtx + 68 >> 2] = $34; //@line 4445
  HEAP32[$AsyncCtx + 72 >> 2] = $37; //@line 4447
  HEAP32[$AsyncCtx + 76 >> 2] = $23; //@line 4449
  HEAP32[$AsyncCtx + 80 >> 2] = $1; //@line 4451
  HEAP32[$AsyncCtx + 84 >> 2] = $36; //@line 4453
  HEAP32[$AsyncCtx + 88 >> 2] = $42; //@line 4455
  HEAP32[$AsyncCtx + 92 >> 2] = $24; //@line 4457
  HEAP32[$AsyncCtx + 96 >> 2] = $27; //@line 4459
  HEAP32[$AsyncCtx + 100 >> 2] = $17; //@line 4461
  HEAP32[$AsyncCtx + 104 >> 2] = $6; //@line 4463
  HEAP32[$AsyncCtx + 108 >> 2] = $33; //@line 4465
  HEAP32[$AsyncCtx + 112 >> 2] = $45; //@line 4467
  HEAP32[$AsyncCtx + 116 >> 2] = $176; //@line 4469
  HEAP32[$AsyncCtx + 120 >> 2] = $29; //@line 4471
  HEAP32[$AsyncCtx + 124 >> 2] = $32; //@line 4473
  HEAP32[$AsyncCtx + 128 >> 2] = $16; //@line 4475
  HEAP32[$AsyncCtx + 132 >> 2] = $4; //@line 4477
  HEAP32[$AsyncCtx + 136 >> 2] = $35; //@line 4479
  HEAP32[$AsyncCtx + 140 >> 2] = $18; //@line 4481
  HEAP32[$AsyncCtx + 144 >> 2] = $21; //@line 4483
  HEAP32[$AsyncCtx + 148 >> 2] = $46; //@line 4485
  HEAP32[$AsyncCtx + 152 >> 2] = $7; //@line 4487
  HEAP32[$AsyncCtx + 156 >> 2] = $175; //@line 4489
  HEAP32[$AsyncCtx + 160 >> 2] = $39; //@line 4491
  sp = STACKTOP; //@line 4492
  STACKTOP = sp; //@line 4493
  return 0; //@line 4493
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4495
 if (!$206) {
  _memcpy($1 | 0, $12 | 0, $16 | 0) | 0; //@line 4498
 }
 HEAP8[$4 >> 0] = 0; //@line 4500
 HEAP8[$17 >> 0] = 0; //@line 4501
 HEAP8[$18 >> 0] = 0; //@line 4502
 HEAP8[$19 >> 0] = 0; //@line 4503
 HEAP8[$20 >> 0] = 0; //@line 4504
 HEAP8[$21 >> 0] = 0; //@line 4505
 HEAP8[$22 >> 0] = 0; //@line 4506
 HEAP8[$23 >> 0] = 0; //@line 4507
 HEAP8[$24 >> 0] = 0; //@line 4508
 HEAP8[$25 >> 0] = 0; //@line 4509
 HEAP8[$26 >> 0] = 0; //@line 4510
 HEAP8[$27 >> 0] = 0; //@line 4511
 HEAP8[$28 >> 0] = 0; //@line 4512
 HEAP8[$29 >> 0] = 0; //@line 4513
 HEAP8[$30 >> 0] = 0; //@line 4514
 HEAP8[$31 >> 0] = 0; //@line 4515
 HEAP8[$5 >> 0] = 0; //@line 4516
 HEAP8[$32 >> 0] = 0; //@line 4517
 HEAP8[$33 >> 0] = 0; //@line 4518
 HEAP8[$34 >> 0] = 0; //@line 4519
 HEAP8[$35 >> 0] = 0; //@line 4520
 HEAP8[$36 >> 0] = 0; //@line 4521
 HEAP8[$37 >> 0] = 0; //@line 4522
 HEAP8[$38 >> 0] = 0; //@line 4523
 HEAP8[$39 >> 0] = 0; //@line 4524
 HEAP8[$40 >> 0] = 0; //@line 4525
 HEAP8[$41 >> 0] = 0; //@line 4526
 HEAP8[$42 >> 0] = 0; //@line 4527
 HEAP8[$43 >> 0] = 0; //@line 4528
 HEAP8[$44 >> 0] = 0; //@line 4529
 HEAP8[$45 >> 0] = 0; //@line 4530
 HEAP8[$46 >> 0] = 0; //@line 4531
 HEAP32[$176 >> 2] = 0; //@line 4532
 HEAP8[$175 >> 0] = 0; //@line 4534
 HEAP8[$12 + 17 >> 0] = 0; //@line 4536
 HEAP8[$12 + 18 >> 0] = 0; //@line 4538
 HEAP8[$12 + 19 >> 0] = 0; //@line 4540
 HEAP8[$12 + 20 >> 0] = 0; //@line 4542
 HEAP8[$12 + 21 >> 0] = 0; //@line 4544
 HEAP8[$12 + 22 >> 0] = 0; //@line 4546
 HEAP8[$12 + 23 >> 0] = 0; //@line 4548
 HEAP8[$12 + 24 >> 0] = 0; //@line 4550
 HEAP8[$12 + 25 >> 0] = 0; //@line 4552
 HEAP8[$12 + 26 >> 0] = 0; //@line 4554
 HEAP8[$12 + 27 >> 0] = 0; //@line 4556
 HEAP8[$12 + 28 >> 0] = 0; //@line 4558
 HEAP8[$12 + 29 >> 0] = 0; //@line 4560
 HEAP8[$12 + 30 >> 0] = 0; //@line 4562
 HEAP8[$12 + 31 >> 0] = 0; //@line 4563
 HEAP8[$12 >> 0] = 0; //@line 4565
 HEAP8[$12 + 1 >> 0] = 0; //@line 4567
 HEAP8[$12 + 2 >> 0] = 0; //@line 4569
 HEAP8[$12 + 3 >> 0] = 0; //@line 4571
 HEAP8[$12 + 4 >> 0] = 0; //@line 4573
 HEAP8[$12 + 5 >> 0] = 0; //@line 4575
 HEAP8[$12 + 6 >> 0] = 0; //@line 4577
 HEAP8[$12 + 7 >> 0] = 0; //@line 4579
 HEAP8[$12 + 8 >> 0] = 0; //@line 4581
 HEAP8[$12 + 9 >> 0] = 0; //@line 4583
 HEAP8[$12 + 10 >> 0] = 0; //@line 4585
 HEAP8[$12 + 11 >> 0] = 0; //@line 4587
 HEAP8[$12 + 12 >> 0] = 0; //@line 4589
 HEAP8[$12 + 13 >> 0] = 0; //@line 4591
 HEAP8[$12 + 14 >> 0] = 0; //@line 4593
 HEAP8[$12 + 15 >> 0] = 0; //@line 4594
 $$0 = $206; //@line 4595
 STACKTOP = sp; //@line 4596
 return $$0 | 0; //@line 4596
}
function _mbed_vtracef__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$0$i = 0, $$0141 = 0, $$0142 = 0, $$0144 = 0, $$1$off0 = 0, $$1$off0$expand_i1_val = 0, $$1$off0$expand_i1_val18 = 0, $$1143 = 0, $$1145 = 0, $$1152 = 0, $$1152$ = 0, $$3154 = 0, $$5156 = 0, $$5156$ = 0, $$expand_i1_val = 0, $$lobit = 0, $$sink = 0, $10 = 0, $102 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $136 = 0, $14 = 0, $147 = 0, $148 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $163 = 0, $164 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $38 = 0, $4 = 0, $40 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $53 = 0, $57 = 0, $6 = 0, $62 = 0, $73 = 0, $74 = 0, $78 = 0, $79 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $91 = 0, $95 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $extract$t159 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 30942
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30944
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30946
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30948
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30950
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30952
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30954
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30956
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30958
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 30960
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 30962
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 30964
 $24 = HEAP8[$0 + 48 >> 0] | 0; //@line 30966
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 30968
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 30970
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 30972
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 30974
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 30976
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 30980
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 30982
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 30986
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 30988
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 30990
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 30992
 HEAP32[194] = (HEAP32[194] | 0) + 1; //@line 30995
 $53 = HEAP32[183] | 0; //@line 30996
 do {
  if ($53 | 0) {
   HEAP8[$53 >> 0] = 0; //@line 31000
   do {
    if ($24 << 24 >> 24 > -1 & ($4 | 0) != 0) {
     $57 = HEAP32[180] | 0; //@line 31006
     if (HEAP8[$57 >> 0] | 0) {
      if (_strstr($57, $4) | 0) {
       $$0$i = 1; //@line 31013
       break;
      }
     }
     $62 = HEAP32[181] | 0; //@line 31017
     if (!(HEAP8[$62 >> 0] | 0)) {
      label = 9; //@line 31021
     } else {
      if (!(_strstr($62, $4) | 0)) {
       $$0$i = 1; //@line 31026
      } else {
       label = 9; //@line 31028
      }
     }
    } else {
     label = 9; //@line 31032
    }
   } while (0);
   if ((label | 0) == 9) {
    $$0$i = 0; //@line 31036
   }
   if (!((HEAP32[190] | 0) != 0 & ((($4 | 0) == 0 | (($20 | 0) == 0 | $$0$i)) ^ 1))) {
    HEAP32[187] = HEAP32[185]; //@line 31048
    break;
   }
   $73 = HEAPU8[716] | 0; //@line 31052
   $74 = $24 & 255; //@line 31053
   if ($74 & 31 & $73 | 0) {
    $78 = $73 & 64; //@line 31058
    $$lobit = $78 >>> 6; //@line 31059
    $79 = $$lobit & 255; //@line 31060
    $83 = ($73 & 32 | 0) == 0; //@line 31064
    $84 = HEAP32[184] | 0; //@line 31065
    $85 = HEAP32[183] | 0; //@line 31066
    $86 = $24 << 24 >> 24 == 1; //@line 31067
    if ($86 | ($73 & 128 | 0) != 0) {
     $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 31070
     _vsnprintf($85, $84, $20, $22) | 0; //@line 31071
     if (___async) {
      HEAP32[$ReallocAsyncCtx12 >> 2] = 126; //@line 31074
      $87 = $ReallocAsyncCtx12 + 4 | 0; //@line 31075
      $$expand_i1_val = $86 & 1; //@line 31076
      HEAP8[$87 >> 0] = $$expand_i1_val; //@line 31077
      sp = STACKTOP; //@line 31078
      return;
     }
     ___async_unwind = 0; //@line 31081
     HEAP32[$ReallocAsyncCtx12 >> 2] = 126; //@line 31082
     $87 = $ReallocAsyncCtx12 + 4 | 0; //@line 31083
     $$expand_i1_val = $86 & 1; //@line 31084
     HEAP8[$87 >> 0] = $$expand_i1_val; //@line 31085
     sp = STACKTOP; //@line 31086
     return;
    }
    if (!$78) {
     $$1$off0 = ($$lobit | 0) != 0; //@line 31092
     $$1143 = $85; //@line 31092
     $$1145 = $84; //@line 31092
     $$3154 = 0; //@line 31092
     label = 28; //@line 31093
    } else {
     if ($83) {
      $$0142 = $85; //@line 31096
      $$0144 = $84; //@line 31096
     } else {
      $89 = _snprintf($85, $84, 12186, $40) | 0; //@line 31098
      $$ = ($89 | 0) >= ($84 | 0) ? 0 : $89; //@line 31100
      $91 = ($$ | 0) > 0; //@line 31101
      $$0142 = $91 ? $85 + $$ | 0 : $85; //@line 31106
      $$0144 = $84 - ($91 ? $$ : 0) | 0; //@line 31106
     }
     if (($$0144 | 0) > 0) {
      $95 = $74 + -2 | 0; //@line 31110
      switch ($95 >>> 1 | $95 << 31 | 0) {
      case 0:
       {
        $$sink = 12204; //@line 31116
        label = 25; //@line 31117
        break;
       }
      case 1:
       {
        $$sink = 12210; //@line 31121
        label = 25; //@line 31122
        break;
       }
      case 3:
       {
        $$sink = 12198; //@line 31126
        label = 25; //@line 31127
        break;
       }
      case 7:
       {
        $$sink = 12192; //@line 31131
        label = 25; //@line 31132
        break;
       }
      default:
       {
        $$0141 = 0; //@line 31136
        $$1152 = 0; //@line 31136
       }
      }
      if ((label | 0) == 25) {
       HEAP32[$34 >> 2] = $$sink; //@line 31140
       $$0141 = $79 & 1; //@line 31143
       $$1152 = _snprintf($$0142, $$0144, 12216, $34) | 0; //@line 31143
      }
      $$1152$ = ($$1152 | 0) < ($$0144 | 0) ? $$1152 : 0; //@line 31146
      $extract$t159 = $$0141 << 24 >> 24 != 0; //@line 31148
      if (($$1152$ | 0) > 0) {
       $102 = $$0141 << 24 >> 24 == 0; //@line 31150
       $$1$off0 = $extract$t159; //@line 31155
       $$1143 = $102 ? $$0142 : $$0142 + $$1152$ | 0; //@line 31155
       $$1145 = $$0144 - ($102 ? 0 : $$1152$) | 0; //@line 31155
       $$3154 = $$1152; //@line 31155
       label = 28; //@line 31156
      } else {
       $$1$off0 = $extract$t159; //@line 31158
       $$1143 = $$0142; //@line 31158
       $$1145 = $$0144; //@line 31158
       $$3154 = $$1152$; //@line 31158
       label = 28; //@line 31159
      }
     }
    }
    if ((label | 0) == 28) {
     if (($$1145 | 0) > 0 & (HEAP32[188] | 0) != 0) {
      HEAP32[$38 >> 2] = HEAP32[$22 >> 2]; //@line 31170
      $ReallocAsyncCtx11 = _emscripten_realloc_async_context(104) | 0; //@line 31171
      $108 = _vsnprintf(0, 0, $20, $38) | 0; //@line 31172
      if (___async) {
       HEAP32[$ReallocAsyncCtx11 >> 2] = 130; //@line 31175
       $109 = $ReallocAsyncCtx11 + 4 | 0; //@line 31176
       HEAP32[$109 >> 2] = $2; //@line 31177
       $110 = $ReallocAsyncCtx11 + 8 | 0; //@line 31178
       HEAP32[$110 >> 2] = $4; //@line 31179
       $111 = $ReallocAsyncCtx11 + 12 | 0; //@line 31180
       HEAP32[$111 >> 2] = $6; //@line 31181
       $112 = $ReallocAsyncCtx11 + 16 | 0; //@line 31182
       HEAP32[$112 >> 2] = $8; //@line 31183
       $113 = $ReallocAsyncCtx11 + 20 | 0; //@line 31184
       HEAP32[$113 >> 2] = $10; //@line 31185
       $114 = $ReallocAsyncCtx11 + 24 | 0; //@line 31186
       HEAP32[$114 >> 2] = $12; //@line 31187
       $115 = $ReallocAsyncCtx11 + 28 | 0; //@line 31188
       HEAP32[$115 >> 2] = $14; //@line 31189
       $116 = $ReallocAsyncCtx11 + 32 | 0; //@line 31190
       HEAP32[$116 >> 2] = $16; //@line 31191
       $117 = $ReallocAsyncCtx11 + 36 | 0; //@line 31192
       HEAP32[$117 >> 2] = $18; //@line 31193
       $118 = $ReallocAsyncCtx11 + 40 | 0; //@line 31194
       HEAP32[$118 >> 2] = $20; //@line 31195
       $119 = $ReallocAsyncCtx11 + 44 | 0; //@line 31196
       HEAP32[$119 >> 2] = $22; //@line 31197
       $120 = $ReallocAsyncCtx11 + 48 | 0; //@line 31198
       HEAP32[$120 >> 2] = $26; //@line 31199
       $121 = $ReallocAsyncCtx11 + 52 | 0; //@line 31200
       HEAP32[$121 >> 2] = $28; //@line 31201
       $122 = $ReallocAsyncCtx11 + 56 | 0; //@line 31202
       HEAP32[$122 >> 2] = $30; //@line 31203
       $123 = $ReallocAsyncCtx11 + 60 | 0; //@line 31204
       HEAP32[$123 >> 2] = $32; //@line 31205
       $124 = $ReallocAsyncCtx11 + 64 | 0; //@line 31206
       HEAP32[$124 >> 2] = $$1143; //@line 31207
       $125 = $ReallocAsyncCtx11 + 68 | 0; //@line 31208
       HEAP32[$125 >> 2] = $$1145; //@line 31209
       $126 = $ReallocAsyncCtx11 + 72 | 0; //@line 31210
       HEAP32[$126 >> 2] = $74; //@line 31211
       $127 = $ReallocAsyncCtx11 + 76 | 0; //@line 31212
       HEAP32[$127 >> 2] = $44; //@line 31213
       $128 = $ReallocAsyncCtx11 + 80 | 0; //@line 31214
       HEAP32[$128 >> 2] = $46; //@line 31215
       $129 = $ReallocAsyncCtx11 + 84 | 0; //@line 31216
       $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 31217
       HEAP8[$129 >> 0] = $$1$off0$expand_i1_val; //@line 31218
       $130 = $ReallocAsyncCtx11 + 88 | 0; //@line 31219
       HEAP32[$130 >> 2] = $48; //@line 31220
       $131 = $ReallocAsyncCtx11 + 92 | 0; //@line 31221
       HEAP32[$131 >> 2] = $50; //@line 31222
       $132 = $ReallocAsyncCtx11 + 96 | 0; //@line 31223
       HEAP32[$132 >> 2] = $38; //@line 31224
       $133 = $ReallocAsyncCtx11 + 100 | 0; //@line 31225
       HEAP32[$133 >> 2] = $$3154; //@line 31226
       sp = STACKTOP; //@line 31227
       return;
      }
      HEAP32[___async_retval >> 2] = $108; //@line 31231
      ___async_unwind = 0; //@line 31232
      HEAP32[$ReallocAsyncCtx11 >> 2] = 130; //@line 31233
      $109 = $ReallocAsyncCtx11 + 4 | 0; //@line 31234
      HEAP32[$109 >> 2] = $2; //@line 31235
      $110 = $ReallocAsyncCtx11 + 8 | 0; //@line 31236
      HEAP32[$110 >> 2] = $4; //@line 31237
      $111 = $ReallocAsyncCtx11 + 12 | 0; //@line 31238
      HEAP32[$111 >> 2] = $6; //@line 31239
      $112 = $ReallocAsyncCtx11 + 16 | 0; //@line 31240
      HEAP32[$112 >> 2] = $8; //@line 31241
      $113 = $ReallocAsyncCtx11 + 20 | 0; //@line 31242
      HEAP32[$113 >> 2] = $10; //@line 31243
      $114 = $ReallocAsyncCtx11 + 24 | 0; //@line 31244
      HEAP32[$114 >> 2] = $12; //@line 31245
      $115 = $ReallocAsyncCtx11 + 28 | 0; //@line 31246
      HEAP32[$115 >> 2] = $14; //@line 31247
      $116 = $ReallocAsyncCtx11 + 32 | 0; //@line 31248
      HEAP32[$116 >> 2] = $16; //@line 31249
      $117 = $ReallocAsyncCtx11 + 36 | 0; //@line 31250
      HEAP32[$117 >> 2] = $18; //@line 31251
      $118 = $ReallocAsyncCtx11 + 40 | 0; //@line 31252
      HEAP32[$118 >> 2] = $20; //@line 31253
      $119 = $ReallocAsyncCtx11 + 44 | 0; //@line 31254
      HEAP32[$119 >> 2] = $22; //@line 31255
      $120 = $ReallocAsyncCtx11 + 48 | 0; //@line 31256
      HEAP32[$120 >> 2] = $26; //@line 31257
      $121 = $ReallocAsyncCtx11 + 52 | 0; //@line 31258
      HEAP32[$121 >> 2] = $28; //@line 31259
      $122 = $ReallocAsyncCtx11 + 56 | 0; //@line 31260
      HEAP32[$122 >> 2] = $30; //@line 31261
      $123 = $ReallocAsyncCtx11 + 60 | 0; //@line 31262
      HEAP32[$123 >> 2] = $32; //@line 31263
      $124 = $ReallocAsyncCtx11 + 64 | 0; //@line 31264
      HEAP32[$124 >> 2] = $$1143; //@line 31265
      $125 = $ReallocAsyncCtx11 + 68 | 0; //@line 31266
      HEAP32[$125 >> 2] = $$1145; //@line 31267
      $126 = $ReallocAsyncCtx11 + 72 | 0; //@line 31268
      HEAP32[$126 >> 2] = $74; //@line 31269
      $127 = $ReallocAsyncCtx11 + 76 | 0; //@line 31270
      HEAP32[$127 >> 2] = $44; //@line 31271
      $128 = $ReallocAsyncCtx11 + 80 | 0; //@line 31272
      HEAP32[$128 >> 2] = $46; //@line 31273
      $129 = $ReallocAsyncCtx11 + 84 | 0; //@line 31274
      $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 31275
      HEAP8[$129 >> 0] = $$1$off0$expand_i1_val; //@line 31276
      $130 = $ReallocAsyncCtx11 + 88 | 0; //@line 31277
      HEAP32[$130 >> 2] = $48; //@line 31278
      $131 = $ReallocAsyncCtx11 + 92 | 0; //@line 31279
      HEAP32[$131 >> 2] = $50; //@line 31280
      $132 = $ReallocAsyncCtx11 + 96 | 0; //@line 31281
      HEAP32[$132 >> 2] = $38; //@line 31282
      $133 = $ReallocAsyncCtx11 + 100 | 0; //@line 31283
      HEAP32[$133 >> 2] = $$3154; //@line 31284
      sp = STACKTOP; //@line 31285
      return;
     }
     if (($$1145 | 0) > 0) {
      $136 = $74 + -2 | 0; //@line 31290
      switch ($136 >>> 1 | $136 << 31 | 0) {
      case 0:
       {
        HEAP32[$12 >> 2] = $4; //@line 31296
        $$5156 = _snprintf($$1143, $$1145, 12219, $12) | 0; //@line 31298
        break;
       }
      case 1:
       {
        HEAP32[$16 >> 2] = $4; //@line 31302
        $$5156 = _snprintf($$1143, $$1145, 12234, $16) | 0; //@line 31304
        break;
       }
      case 3:
       {
        HEAP32[$2 >> 2] = $4; //@line 31308
        $$5156 = _snprintf($$1143, $$1145, 12249, $2) | 0; //@line 31310
        break;
       }
      case 7:
       {
        HEAP32[$8 >> 2] = $4; //@line 31314
        $$5156 = _snprintf($$1143, $$1145, 12264, $8) | 0; //@line 31316
        break;
       }
      default:
       {
        $$5156 = _snprintf($$1143, $$1145, 12279, $26) | 0; //@line 31321
       }
      }
      $$5156$ = ($$5156 | 0) < ($$1145 | 0) ? $$5156 : 0; //@line 31325
      $147 = $$1143 + $$5156$ | 0; //@line 31327
      $148 = $$1145 - $$5156$ | 0; //@line 31328
      if (($$5156$ | 0) > 0 & ($148 | 0) > 0) {
       $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 31332
       $150 = _vsnprintf($147, $148, $20, $22) | 0; //@line 31333
       if (___async) {
        HEAP32[$ReallocAsyncCtx10 >> 2] = 132; //@line 31336
        $151 = $ReallocAsyncCtx10 + 4 | 0; //@line 31337
        HEAP32[$151 >> 2] = $30; //@line 31338
        $152 = $ReallocAsyncCtx10 + 8 | 0; //@line 31339
        HEAP32[$152 >> 2] = $32; //@line 31340
        $153 = $ReallocAsyncCtx10 + 12 | 0; //@line 31341
        $$1$off0$expand_i1_val18 = $$1$off0 & 1; //@line 31342
        HEAP8[$153 >> 0] = $$1$off0$expand_i1_val18; //@line 31343
        $154 = $ReallocAsyncCtx10 + 16 | 0; //@line 31344
        HEAP32[$154 >> 2] = $44; //@line 31345
        $155 = $ReallocAsyncCtx10 + 20 | 0; //@line 31346
        HEAP32[$155 >> 2] = $46; //@line 31347
        $156 = $ReallocAsyncCtx10 + 24 | 0; //@line 31348
        HEAP32[$156 >> 2] = $148; //@line 31349
        $157 = $ReallocAsyncCtx10 + 28 | 0; //@line 31350
        HEAP32[$157 >> 2] = $147; //@line 31351
        sp = STACKTOP; //@line 31352
        return;
       }
       HEAP32[___async_retval >> 2] = $150; //@line 31356
       ___async_unwind = 0; //@line 31357
       HEAP32[$ReallocAsyncCtx10 >> 2] = 132; //@line 31358
       $151 = $ReallocAsyncCtx10 + 4 | 0; //@line 31359
       HEAP32[$151 >> 2] = $30; //@line 31360
       $152 = $ReallocAsyncCtx10 + 8 | 0; //@line 31361
       HEAP32[$152 >> 2] = $32; //@line 31362
       $153 = $ReallocAsyncCtx10 + 12 | 0; //@line 31363
       $$1$off0$expand_i1_val18 = $$1$off0 & 1; //@line 31364
       HEAP8[$153 >> 0] = $$1$off0$expand_i1_val18; //@line 31365
       $154 = $ReallocAsyncCtx10 + 16 | 0; //@line 31366
       HEAP32[$154 >> 2] = $44; //@line 31367
       $155 = $ReallocAsyncCtx10 + 20 | 0; //@line 31368
       HEAP32[$155 >> 2] = $46; //@line 31369
       $156 = $ReallocAsyncCtx10 + 24 | 0; //@line 31370
       HEAP32[$156 >> 2] = $148; //@line 31371
       $157 = $ReallocAsyncCtx10 + 28 | 0; //@line 31372
       HEAP32[$157 >> 2] = $147; //@line 31373
       sp = STACKTOP; //@line 31374
       return;
      }
     }
    }
    $159 = HEAP32[190] | 0; //@line 31379
    $160 = HEAP32[183] | 0; //@line 31380
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 31381
    FUNCTION_TABLE_vi[$159 & 1023]($160); //@line 31382
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 134; //@line 31385
     sp = STACKTOP; //@line 31386
     return;
    }
    ___async_unwind = 0; //@line 31389
    HEAP32[$ReallocAsyncCtx7 >> 2] = 134; //@line 31390
    sp = STACKTOP; //@line 31391
    return;
   }
  }
 } while (0);
 $161 = HEAP32[193] | 0; //@line 31396
 if (!$161) {
  return;
 }
 $163 = HEAP32[194] | 0; //@line 31401
 HEAP32[194] = 0; //@line 31402
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 31403
 FUNCTION_TABLE_v[$161 & 7](); //@line 31404
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 135; //@line 31407
  $164 = $ReallocAsyncCtx8 + 4 | 0; //@line 31408
  HEAP32[$164 >> 2] = $163; //@line 31409
  sp = STACKTOP; //@line 31410
  return;
 }
 ___async_unwind = 0; //@line 31413
 HEAP32[$ReallocAsyncCtx8 >> 2] = 135; //@line 31414
 $164 = $ReallocAsyncCtx8 + 4 | 0; //@line 31415
 HEAP32[$164 >> 2] = $163; //@line 31416
 sp = STACKTOP; //@line 31417
 return;
}
function _free($0) {
 $0 = $0 | 0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre$phi442Z2D = 0, $$pre$phi444Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $105 = 0, $106 = 0, $114 = 0, $115 = 0, $116 = 0, $124 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $141 = 0, $143 = 0, $145 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $17 = 0, $170 = 0, $173 = 0, $176 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $195 = 0, $196 = 0, $2 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $220 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $245 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $270 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $299 = 0, $3 = 0, $301 = 0, $308 = 0, $309 = 0, $310 = 0, $319 = 0, $41 = 0, $46 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0, label = 0;
 if (!$0) {
  return;
 }
 $2 = $0 + -8 | 0; //@line 9868
 $3 = HEAP32[5793] | 0; //@line 9869
 if ($2 >>> 0 < $3 >>> 0) {
  _abort(); //@line 9872
 }
 $6 = HEAP32[$0 + -4 >> 2] | 0; //@line 9876
 $7 = $6 & 3; //@line 9877
 if (($7 | 0) == 1) {
  _abort(); //@line 9880
 }
 $9 = $6 & -8; //@line 9883
 $10 = $2 + $9 | 0; //@line 9884
 L10 : do {
  if (!($6 & 1)) {
   $13 = HEAP32[$2 >> 2] | 0; //@line 9889
   if (!$7) {
    return;
   }
   $16 = $2 + (0 - $13) | 0; //@line 9895
   $17 = $13 + $9 | 0; //@line 9896
   if ($16 >>> 0 < $3 >>> 0) {
    _abort(); //@line 9899
   }
   if ((HEAP32[5794] | 0) == ($16 | 0)) {
    $105 = $10 + 4 | 0; //@line 9905
    $106 = HEAP32[$105 >> 2] | 0; //@line 9906
    if (($106 & 3 | 0) != 3) {
     $$1 = $16; //@line 9910
     $$1382 = $17; //@line 9910
     $114 = $16; //@line 9910
     break;
    }
    HEAP32[5791] = $17; //@line 9913
    HEAP32[$105 >> 2] = $106 & -2; //@line 9915
    HEAP32[$16 + 4 >> 2] = $17 | 1; //@line 9918
    HEAP32[$16 + $17 >> 2] = $17; //@line 9920
    return;
   }
   $21 = $13 >>> 3; //@line 9923
   if ($13 >>> 0 < 256) {
    $24 = HEAP32[$16 + 8 >> 2] | 0; //@line 9927
    $26 = HEAP32[$16 + 12 >> 2] | 0; //@line 9929
    $28 = 23196 + ($21 << 1 << 2) | 0; //@line 9931
    if (($24 | 0) != ($28 | 0)) {
     if ($3 >>> 0 > $24 >>> 0) {
      _abort(); //@line 9936
     }
     if ((HEAP32[$24 + 12 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 9943
     }
    }
    if (($26 | 0) == ($24 | 0)) {
     HEAP32[5789] = HEAP32[5789] & ~(1 << $21); //@line 9953
     $$1 = $16; //@line 9954
     $$1382 = $17; //@line 9954
     $114 = $16; //@line 9954
     break;
    }
    if (($26 | 0) == ($28 | 0)) {
     $$pre$phi444Z2D = $26 + 8 | 0; //@line 9960
    } else {
     if ($3 >>> 0 > $26 >>> 0) {
      _abort(); //@line 9964
     }
     $41 = $26 + 8 | 0; //@line 9967
     if ((HEAP32[$41 >> 2] | 0) == ($16 | 0)) {
      $$pre$phi444Z2D = $41; //@line 9971
     } else {
      _abort(); //@line 9973
     }
    }
    HEAP32[$24 + 12 >> 2] = $26; //@line 9978
    HEAP32[$$pre$phi444Z2D >> 2] = $24; //@line 9979
    $$1 = $16; //@line 9980
    $$1382 = $17; //@line 9980
    $114 = $16; //@line 9980
    break;
   }
   $46 = HEAP32[$16 + 24 >> 2] | 0; //@line 9984
   $48 = HEAP32[$16 + 12 >> 2] | 0; //@line 9986
   do {
    if (($48 | 0) == ($16 | 0)) {
     $59 = $16 + 16 | 0; //@line 9990
     $60 = $59 + 4 | 0; //@line 9991
     $61 = HEAP32[$60 >> 2] | 0; //@line 9992
     if (!$61) {
      $63 = HEAP32[$59 >> 2] | 0; //@line 9995
      if (!$63) {
       $$3 = 0; //@line 9998
       break;
      } else {
       $$1387 = $63; //@line 10001
       $$1390 = $59; //@line 10001
      }
     } else {
      $$1387 = $61; //@line 10004
      $$1390 = $60; //@line 10004
     }
     while (1) {
      $65 = $$1387 + 20 | 0; //@line 10007
      $66 = HEAP32[$65 >> 2] | 0; //@line 10008
      if ($66 | 0) {
       $$1387 = $66; //@line 10011
       $$1390 = $65; //@line 10011
       continue;
      }
      $68 = $$1387 + 16 | 0; //@line 10014
      $69 = HEAP32[$68 >> 2] | 0; //@line 10015
      if (!$69) {
       break;
      } else {
       $$1387 = $69; //@line 10020
       $$1390 = $68; //@line 10020
      }
     }
     if ($3 >>> 0 > $$1390 >>> 0) {
      _abort(); //@line 10025
     } else {
      HEAP32[$$1390 >> 2] = 0; //@line 10028
      $$3 = $$1387; //@line 10029
      break;
     }
    } else {
     $51 = HEAP32[$16 + 8 >> 2] | 0; //@line 10034
     if ($3 >>> 0 > $51 >>> 0) {
      _abort(); //@line 10037
     }
     $53 = $51 + 12 | 0; //@line 10040
     if ((HEAP32[$53 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 10044
     }
     $56 = $48 + 8 | 0; //@line 10047
     if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$53 >> 2] = $48; //@line 10051
      HEAP32[$56 >> 2] = $51; //@line 10052
      $$3 = $48; //@line 10053
      break;
     } else {
      _abort(); //@line 10056
     }
    }
   } while (0);
   if (!$46) {
    $$1 = $16; //@line 10063
    $$1382 = $17; //@line 10063
    $114 = $16; //@line 10063
   } else {
    $74 = HEAP32[$16 + 28 >> 2] | 0; //@line 10066
    $75 = 23460 + ($74 << 2) | 0; //@line 10067
    do {
     if ((HEAP32[$75 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$75 >> 2] = $$3; //@line 10072
      if (!$$3) {
       HEAP32[5790] = HEAP32[5790] & ~(1 << $74); //@line 10079
       $$1 = $16; //@line 10080
       $$1382 = $17; //@line 10080
       $114 = $16; //@line 10080
       break L10;
      }
     } else {
      if ((HEAP32[5793] | 0) >>> 0 > $46 >>> 0) {
       _abort(); //@line 10087
      } else {
       HEAP32[$46 + 16 + (((HEAP32[$46 + 16 >> 2] | 0) != ($16 | 0) & 1) << 2) >> 2] = $$3; //@line 10095
       if (!$$3) {
        $$1 = $16; //@line 10098
        $$1382 = $17; //@line 10098
        $114 = $16; //@line 10098
        break L10;
       } else {
        break;
       }
      }
     }
    } while (0);
    $89 = HEAP32[5793] | 0; //@line 10106
    if ($89 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 10109
    }
    HEAP32[$$3 + 24 >> 2] = $46; //@line 10113
    $92 = $16 + 16 | 0; //@line 10114
    $93 = HEAP32[$92 >> 2] | 0; //@line 10115
    do {
     if ($93 | 0) {
      if ($89 >>> 0 > $93 >>> 0) {
       _abort(); //@line 10121
      } else {
       HEAP32[$$3 + 16 >> 2] = $93; //@line 10125
       HEAP32[$93 + 24 >> 2] = $$3; //@line 10127
       break;
      }
     }
    } while (0);
    $99 = HEAP32[$92 + 4 >> 2] | 0; //@line 10133
    if (!$99) {
     $$1 = $16; //@line 10136
     $$1382 = $17; //@line 10136
     $114 = $16; //@line 10136
    } else {
     if ((HEAP32[5793] | 0) >>> 0 > $99 >>> 0) {
      _abort(); //@line 10141
     } else {
      HEAP32[$$3 + 20 >> 2] = $99; //@line 10145
      HEAP32[$99 + 24 >> 2] = $$3; //@line 10147
      $$1 = $16; //@line 10148
      $$1382 = $17; //@line 10148
      $114 = $16; //@line 10148
      break;
     }
    }
   }
  } else {
   $$1 = $2; //@line 10154
   $$1382 = $9; //@line 10154
   $114 = $2; //@line 10154
  }
 } while (0);
 if ($114 >>> 0 >= $10 >>> 0) {
  _abort(); //@line 10159
 }
 $115 = $10 + 4 | 0; //@line 10162
 $116 = HEAP32[$115 >> 2] | 0; //@line 10163
 if (!($116 & 1)) {
  _abort(); //@line 10167
 }
 if (!($116 & 2)) {
  if ((HEAP32[5795] | 0) == ($10 | 0)) {
   $124 = (HEAP32[5792] | 0) + $$1382 | 0; //@line 10177
   HEAP32[5792] = $124; //@line 10178
   HEAP32[5795] = $$1; //@line 10179
   HEAP32[$$1 + 4 >> 2] = $124 | 1; //@line 10182
   if (($$1 | 0) != (HEAP32[5794] | 0)) {
    return;
   }
   HEAP32[5794] = 0; //@line 10188
   HEAP32[5791] = 0; //@line 10189
   return;
  }
  if ((HEAP32[5794] | 0) == ($10 | 0)) {
   $132 = (HEAP32[5791] | 0) + $$1382 | 0; //@line 10196
   HEAP32[5791] = $132; //@line 10197
   HEAP32[5794] = $114; //@line 10198
   HEAP32[$$1 + 4 >> 2] = $132 | 1; //@line 10201
   HEAP32[$114 + $132 >> 2] = $132; //@line 10203
   return;
  }
  $137 = ($116 & -8) + $$1382 | 0; //@line 10207
  $138 = $116 >>> 3; //@line 10208
  L108 : do {
   if ($116 >>> 0 < 256) {
    $141 = HEAP32[$10 + 8 >> 2] | 0; //@line 10213
    $143 = HEAP32[$10 + 12 >> 2] | 0; //@line 10215
    $145 = 23196 + ($138 << 1 << 2) | 0; //@line 10217
    if (($141 | 0) != ($145 | 0)) {
     if ((HEAP32[5793] | 0) >>> 0 > $141 >>> 0) {
      _abort(); //@line 10223
     }
     if ((HEAP32[$141 + 12 >> 2] | 0) != ($10 | 0)) {
      _abort(); //@line 10230
     }
    }
    if (($143 | 0) == ($141 | 0)) {
     HEAP32[5789] = HEAP32[5789] & ~(1 << $138); //@line 10240
     break;
    }
    if (($143 | 0) == ($145 | 0)) {
     $$pre$phi442Z2D = $143 + 8 | 0; //@line 10246
    } else {
     if ((HEAP32[5793] | 0) >>> 0 > $143 >>> 0) {
      _abort(); //@line 10251
     }
     $160 = $143 + 8 | 0; //@line 10254
     if ((HEAP32[$160 >> 2] | 0) == ($10 | 0)) {
      $$pre$phi442Z2D = $160; //@line 10258
     } else {
      _abort(); //@line 10260
     }
    }
    HEAP32[$141 + 12 >> 2] = $143; //@line 10265
    HEAP32[$$pre$phi442Z2D >> 2] = $141; //@line 10266
   } else {
    $165 = HEAP32[$10 + 24 >> 2] | 0; //@line 10269
    $167 = HEAP32[$10 + 12 >> 2] | 0; //@line 10271
    do {
     if (($167 | 0) == ($10 | 0)) {
      $179 = $10 + 16 | 0; //@line 10275
      $180 = $179 + 4 | 0; //@line 10276
      $181 = HEAP32[$180 >> 2] | 0; //@line 10277
      if (!$181) {
       $183 = HEAP32[$179 >> 2] | 0; //@line 10280
       if (!$183) {
        $$3400 = 0; //@line 10283
        break;
       } else {
        $$1398 = $183; //@line 10286
        $$1402 = $179; //@line 10286
       }
      } else {
       $$1398 = $181; //@line 10289
       $$1402 = $180; //@line 10289
      }
      while (1) {
       $185 = $$1398 + 20 | 0; //@line 10292
       $186 = HEAP32[$185 >> 2] | 0; //@line 10293
       if ($186 | 0) {
        $$1398 = $186; //@line 10296
        $$1402 = $185; //@line 10296
        continue;
       }
       $188 = $$1398 + 16 | 0; //@line 10299
       $189 = HEAP32[$188 >> 2] | 0; //@line 10300
       if (!$189) {
        break;
       } else {
        $$1398 = $189; //@line 10305
        $$1402 = $188; //@line 10305
       }
      }
      if ((HEAP32[5793] | 0) >>> 0 > $$1402 >>> 0) {
       _abort(); //@line 10311
      } else {
       HEAP32[$$1402 >> 2] = 0; //@line 10314
       $$3400 = $$1398; //@line 10315
       break;
      }
     } else {
      $170 = HEAP32[$10 + 8 >> 2] | 0; //@line 10320
      if ((HEAP32[5793] | 0) >>> 0 > $170 >>> 0) {
       _abort(); //@line 10324
      }
      $173 = $170 + 12 | 0; //@line 10327
      if ((HEAP32[$173 >> 2] | 0) != ($10 | 0)) {
       _abort(); //@line 10331
      }
      $176 = $167 + 8 | 0; //@line 10334
      if ((HEAP32[$176 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$173 >> 2] = $167; //@line 10338
       HEAP32[$176 >> 2] = $170; //@line 10339
       $$3400 = $167; //@line 10340
       break;
      } else {
       _abort(); //@line 10343
      }
     }
    } while (0);
    if ($165 | 0) {
     $195 = HEAP32[$10 + 28 >> 2] | 0; //@line 10351
     $196 = 23460 + ($195 << 2) | 0; //@line 10352
     do {
      if ((HEAP32[$196 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$196 >> 2] = $$3400; //@line 10357
       if (!$$3400) {
        HEAP32[5790] = HEAP32[5790] & ~(1 << $195); //@line 10364
        break L108;
       }
      } else {
       if ((HEAP32[5793] | 0) >>> 0 > $165 >>> 0) {
        _abort(); //@line 10371
       } else {
        HEAP32[$165 + 16 + (((HEAP32[$165 + 16 >> 2] | 0) != ($10 | 0) & 1) << 2) >> 2] = $$3400; //@line 10379
        if (!$$3400) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while (0);
     $210 = HEAP32[5793] | 0; //@line 10389
     if ($210 >>> 0 > $$3400 >>> 0) {
      _abort(); //@line 10392
     }
     HEAP32[$$3400 + 24 >> 2] = $165; //@line 10396
     $213 = $10 + 16 | 0; //@line 10397
     $214 = HEAP32[$213 >> 2] | 0; //@line 10398
     do {
      if ($214 | 0) {
       if ($210 >>> 0 > $214 >>> 0) {
        _abort(); //@line 10404
       } else {
        HEAP32[$$3400 + 16 >> 2] = $214; //@line 10408
        HEAP32[$214 + 24 >> 2] = $$3400; //@line 10410
        break;
       }
      }
     } while (0);
     $220 = HEAP32[$213 + 4 >> 2] | 0; //@line 10416
     if ($220 | 0) {
      if ((HEAP32[5793] | 0) >>> 0 > $220 >>> 0) {
       _abort(); //@line 10422
      } else {
       HEAP32[$$3400 + 20 >> 2] = $220; //@line 10426
       HEAP32[$220 + 24 >> 2] = $$3400; //@line 10428
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $137 | 1; //@line 10437
  HEAP32[$114 + $137 >> 2] = $137; //@line 10439
  if (($$1 | 0) == (HEAP32[5794] | 0)) {
   HEAP32[5791] = $137; //@line 10443
   return;
  } else {
   $$2 = $137; //@line 10446
  }
 } else {
  HEAP32[$115 >> 2] = $116 & -2; //@line 10450
  HEAP32[$$1 + 4 >> 2] = $$1382 | 1; //@line 10453
  HEAP32[$114 + $$1382 >> 2] = $$1382; //@line 10455
  $$2 = $$1382; //@line 10456
 }
 $235 = $$2 >>> 3; //@line 10458
 if ($$2 >>> 0 < 256) {
  $238 = 23196 + ($235 << 1 << 2) | 0; //@line 10462
  $239 = HEAP32[5789] | 0; //@line 10463
  $240 = 1 << $235; //@line 10464
  if (!($239 & $240)) {
   HEAP32[5789] = $239 | $240; //@line 10469
   $$0403 = $238; //@line 10471
   $$pre$phiZ2D = $238 + 8 | 0; //@line 10471
  } else {
   $244 = $238 + 8 | 0; //@line 10473
   $245 = HEAP32[$244 >> 2] | 0; //@line 10474
   if ((HEAP32[5793] | 0) >>> 0 > $245 >>> 0) {
    _abort(); //@line 10478
   } else {
    $$0403 = $245; //@line 10481
    $$pre$phiZ2D = $244; //@line 10481
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 10484
  HEAP32[$$0403 + 12 >> 2] = $$1; //@line 10486
  HEAP32[$$1 + 8 >> 2] = $$0403; //@line 10488
  HEAP32[$$1 + 12 >> 2] = $238; //@line 10490
  return;
 }
 $251 = $$2 >>> 8; //@line 10493
 if (!$251) {
  $$0396 = 0; //@line 10496
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0396 = 31; //@line 10500
  } else {
   $256 = ($251 + 1048320 | 0) >>> 16 & 8; //@line 10504
   $257 = $251 << $256; //@line 10505
   $260 = ($257 + 520192 | 0) >>> 16 & 4; //@line 10508
   $262 = $257 << $260; //@line 10510
   $265 = ($262 + 245760 | 0) >>> 16 & 2; //@line 10513
   $270 = 14 - ($260 | $256 | $265) + ($262 << $265 >>> 15) | 0; //@line 10518
   $$0396 = $$2 >>> ($270 + 7 | 0) & 1 | $270 << 1; //@line 10524
  }
 }
 $276 = 23460 + ($$0396 << 2) | 0; //@line 10527
 HEAP32[$$1 + 28 >> 2] = $$0396; //@line 10529
 HEAP32[$$1 + 20 >> 2] = 0; //@line 10532
 HEAP32[$$1 + 16 >> 2] = 0; //@line 10533
 $280 = HEAP32[5790] | 0; //@line 10534
 $281 = 1 << $$0396; //@line 10535
 do {
  if (!($280 & $281)) {
   HEAP32[5790] = $280 | $281; //@line 10541
   HEAP32[$276 >> 2] = $$1; //@line 10542
   HEAP32[$$1 + 24 >> 2] = $276; //@line 10544
   HEAP32[$$1 + 12 >> 2] = $$1; //@line 10546
   HEAP32[$$1 + 8 >> 2] = $$1; //@line 10548
  } else {
   $$0383 = $$2 << (($$0396 | 0) == 31 ? 0 : 25 - ($$0396 >>> 1) | 0); //@line 10556
   $$0384 = HEAP32[$276 >> 2] | 0; //@line 10556
   while (1) {
    if ((HEAP32[$$0384 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
     label = 124; //@line 10563
     break;
    }
    $299 = $$0384 + 16 + ($$0383 >>> 31 << 2) | 0; //@line 10567
    $301 = HEAP32[$299 >> 2] | 0; //@line 10569
    if (!$301) {
     label = 121; //@line 10572
     break;
    } else {
     $$0383 = $$0383 << 1; //@line 10575
     $$0384 = $301; //@line 10575
    }
   }
   if ((label | 0) == 121) {
    if ((HEAP32[5793] | 0) >>> 0 > $299 >>> 0) {
     _abort(); //@line 10582
    } else {
     HEAP32[$299 >> 2] = $$1; //@line 10585
     HEAP32[$$1 + 24 >> 2] = $$0384; //@line 10587
     HEAP32[$$1 + 12 >> 2] = $$1; //@line 10589
     HEAP32[$$1 + 8 >> 2] = $$1; //@line 10591
     break;
    }
   } else if ((label | 0) == 124) {
    $308 = $$0384 + 8 | 0; //@line 10596
    $309 = HEAP32[$308 >> 2] | 0; //@line 10597
    $310 = HEAP32[5793] | 0; //@line 10598
    if ($310 >>> 0 <= $309 >>> 0 & $310 >>> 0 <= $$0384 >>> 0) {
     HEAP32[$309 + 12 >> 2] = $$1; //@line 10604
     HEAP32[$308 >> 2] = $$1; //@line 10605
     HEAP32[$$1 + 8 >> 2] = $309; //@line 10607
     HEAP32[$$1 + 12 >> 2] = $$0384; //@line 10609
     HEAP32[$$1 + 24 >> 2] = 0; //@line 10611
     break;
    } else {
     _abort(); //@line 10614
    }
   }
  }
 } while (0);
 $319 = (HEAP32[5797] | 0) + -1 | 0; //@line 10621
 HEAP32[5797] = $319; //@line 10622
 if (!$319) {
  $$0212$in$i = 23612; //@line 10625
 } else {
  return;
 }
 while (1) {
  $$0212$i = HEAP32[$$0212$in$i >> 2] | 0; //@line 10630
  if (!$$0212$i) {
   break;
  } else {
   $$0212$in$i = $$0212$i + 8 | 0; //@line 10636
  }
 }
 HEAP32[5797] = -1; //@line 10639
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb_371($0) {
 $0 = $0 | 0;
 var $$013$i = 0, $$01720$i55 = 0, $$019$i = 0, $$019$i52 = 0, $$021$i54 = 0, $$09$i = 0, $$09$i41 = 0, $$09$i45 = 0, $$sink$sink$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $127 = 0, $130 = 0, $14 = 0, $143 = 0, $146 = 0, $154 = 0, $155 = 0, $16 = 0, $168 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $183 = 0, $2 = 0, $20 = 0, $200 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0, $154$looptemp = 0;
 sp = STACKTOP; //@line 29799
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29801
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29803
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29805
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29807
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29809
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29811
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29813
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29815
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29817
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 29819
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 29821
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 29823
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 29825
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 29827
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 29829
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 29831
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 29833
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 29835
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 29837
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 29841
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 29843
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 29845
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 29847
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 29849
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 29851
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 29853
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 29855
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 29857
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 29859
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 29861
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 29863
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 29865
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 29867
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 29869
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 29871
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 29873
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 29875
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 29877
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 29879
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 29881
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 29883
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 29885
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 29887
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 29889
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 29891
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 29893
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 29895
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 29897
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 29899
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 29901
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 29903
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 29905
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 29907
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 29909
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 29911
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 29913
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 29915
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 29917
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 29919
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 29921
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 29923
 L2 : do {
  if (!(HEAP32[___async_retval >> 2] | 0)) {
   switch ($2 | 0) {
   case 16:
    {
     $$019$i52 = 135; //@line 29931
     break;
    }
   case 8:
    {
     $$019$i52 = 27; //@line 29935
     break;
    }
   default:
    {
     break L2;
    }
   }
   $127 = $2 + -1 | 0; //@line 29942
   $$01720$i55 = 0; //@line 29943
   $$021$i54 = $127; //@line 29943
   while (1) {
    $130 = HEAPU8[$112 + $$021$i54 >> 0] | 0; //@line 29947
    HEAP8[$84 + $$021$i54 >> 0] = $130 << 1 | $$01720$i55; //@line 29952
    if (($$021$i54 | 0) > 0) {
     $$01720$i55 = $130 >>> 7; //@line 29957
     $$021$i54 = $$021$i54 + -1 | 0; //@line 29957
    } else {
     break;
    }
   }
   $143 = $84 + $127 | 0; //@line 29967
   $146 = $$019$i52 & 0 - ((HEAPU8[$64 >> 0] | 0) >>> 7) ^ (HEAPU8[$143 >> 0] | 0); //@line 29970
   HEAP8[$143 >> 0] = $146; //@line 29972
   switch ($2 | 0) {
   case 16:
    {
     $$019$i = 135; //@line 29975
     break;
    }
   case 8:
    {
     $$019$i = 27; //@line 29979
     break;
    }
   default:
    {
     break L2;
    }
   }
   HEAP8[$62 + $127 >> 0] = $146 << 1; //@line 29989
   if (($127 | 0) > 0) {
    $154 = $146; //@line 29993
    $155 = $2 + -2 | 0; //@line 29993
    while (1) {
     $154$looptemp = $154;
     $154 = HEAPU8[$84 + $155 >> 0] | 0; //@line 29998
     HEAP8[$62 + $155 >> 0] = $154 << 1 | $154$looptemp >>> 7; //@line 30003
     if (($155 | 0) <= 0) {
      break;
     } else {
      $155 = $155 + -1 | 0; //@line 30007
     }
    }
   }
   $168 = $62 + $127 | 0; //@line 30018
   HEAP8[$168 >> 0] = $$019$i & 0 - ((HEAPU8[$102 >> 0] | 0) >>> 7) ^ (HEAPU8[$168 >> 0] | 0); //@line 30023
  }
 } while (0);
 HEAP8[$64 >> 0] = 0; //@line 30026
 HEAP8[$74 >> 0] = 0; //@line 30027
 HEAP8[$14 >> 0] = 0; //@line 30028
 HEAP8[$110 >> 0] = 0; //@line 30029
 HEAP8[$80 >> 0] = 0; //@line 30030
 HEAP8[$20 >> 0] = 0; //@line 30031
 HEAP8[$124 >> 0] = 0; //@line 30032
 HEAP8[$92 >> 0] = 0; //@line 30033
 HEAP8[$56 >> 0] = 0; //@line 30034
 HEAP8[$114 >> 0] = 0; //@line 30035
 HEAP8[$96 >> 0] = 0; //@line 30036
 HEAP8[$58 >> 0] = 0; //@line 30037
 HEAP8[$28 >> 0] = 0; //@line 30038
 HEAP8[$122 >> 0] = 0; //@line 30039
 HEAP8[$18 >> 0] = 0; //@line 30040
 HEAP8[$38 >> 0] = 0; //@line 30041
 $173 = $36 + 16 | 0; //@line 30042
 $174 = $36 + 32 | 0; //@line 30043
 $175 = HEAP32[$174 >> 2] | 0; //@line 30044
 if ($175 >>> 0 < $100 >>> 0) {
  $$013$i = 0; //@line 30047
  do {
   if ($$013$i >>> 0 < $175 >>> 0) {
    $$sink$sink$i = HEAP8[$36 + 16 + $$013$i >> 0] | 0; //@line 30053
   } else {
    $$sink$sink$i = ($$013$i | 0) == ($175 | 0) ? -128 : 0; //@line 30057
   }
   HEAP8[$50 + $$013$i >> 0] = $$sink$sink$i; //@line 30060
   $$013$i = $$013$i + 1 | 0; //@line 30061
  } while (($$013$i | 0) != ($100 | 0));
  $$09$i45 = 0; //@line 30064
  do {
   $183 = $50 + $$09$i45 | 0; //@line 30071
   HEAP8[$183 >> 0] = HEAP8[$62 + $$09$i45 >> 0] ^ HEAP8[$183 >> 0]; //@line 30076
   $$09$i45 = $$09$i45 + 1 | 0; //@line 30077
  } while (($$09$i45 | 0) != ($100 | 0));
  label = 21; //@line 30080
 } else {
  if ($100 | 0) {
   $$09$i41 = 0; //@line 30089
   do {
    HEAP8[$50 + $$09$i41 >> 0] = HEAP8[$84 + $$09$i41 >> 0] ^ HEAP8[$36 + 16 + $$09$i41 >> 0]; //@line 30097
    $$09$i41 = $$09$i41 + 1 | 0; //@line 30098
   } while (($$09$i41 | 0) != ($100 | 0));
   label = 21; //@line 30101
  }
 }
 if ((label | 0) == 21) {
  if ($100 | 0) {
   $$09$i = 0; //@line 30112
   do {
    $200 = $36 + $$09$i | 0; //@line 30116
    HEAP8[$200 >> 0] = HEAP8[$200 >> 0] ^ HEAP8[$50 + $$09$i >> 0]; //@line 30119
    $$09$i = $$09$i + 1 | 0; //@line 30120
   } while (($$09$i | 0) != ($100 | 0));
  }
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(164) | 0; //@line 30130
 $204 = _mbedtls_cipher_update($66, $16, $100, $16, $48) | 0; //@line 30131
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 589; //@line 30134
  $205 = $ReallocAsyncCtx + 4 | 0; //@line 30135
  HEAP32[$205 >> 2] = $4; //@line 30136
  $206 = $ReallocAsyncCtx + 8 | 0; //@line 30137
  HEAP32[$206 >> 2] = $6; //@line 30138
  $207 = $ReallocAsyncCtx + 12 | 0; //@line 30139
  HEAP32[$207 >> 2] = $8; //@line 30140
  $208 = $ReallocAsyncCtx + 16 | 0; //@line 30141
  HEAP32[$208 >> 2] = $10; //@line 30142
  $209 = $ReallocAsyncCtx + 20 | 0; //@line 30143
  HEAP32[$209 >> 2] = $12; //@line 30144
  $210 = $ReallocAsyncCtx + 24 | 0; //@line 30145
  HEAP32[$210 >> 2] = $16; //@line 30146
  $211 = $ReallocAsyncCtx + 28 | 0; //@line 30147
  HEAP32[$211 >> 2] = $22; //@line 30148
  $212 = $ReallocAsyncCtx + 32 | 0; //@line 30149
  HEAP32[$212 >> 2] = $24; //@line 30150
  $213 = $ReallocAsyncCtx + 36 | 0; //@line 30151
  HEAP32[$213 >> 2] = $26; //@line 30152
  $214 = $ReallocAsyncCtx + 40 | 0; //@line 30153
  HEAP32[$214 >> 2] = $30; //@line 30154
  $215 = $ReallocAsyncCtx + 44 | 0; //@line 30155
  HEAP32[$215 >> 2] = $32; //@line 30156
  $216 = $ReallocAsyncCtx + 48 | 0; //@line 30157
  HEAP32[$216 >> 2] = $34; //@line 30158
  $217 = $ReallocAsyncCtx + 52 | 0; //@line 30159
  HEAP32[$217 >> 2] = $36; //@line 30160
  $218 = $ReallocAsyncCtx + 56 | 0; //@line 30161
  HEAP32[$218 >> 2] = $42; //@line 30162
  $219 = $ReallocAsyncCtx + 60 | 0; //@line 30163
  HEAP32[$219 >> 2] = $44; //@line 30164
  $220 = $ReallocAsyncCtx + 64 | 0; //@line 30165
  HEAP32[$220 >> 2] = $46; //@line 30166
  $221 = $ReallocAsyncCtx + 68 | 0; //@line 30167
  HEAP32[$221 >> 2] = $52; //@line 30168
  $222 = $ReallocAsyncCtx + 72 | 0; //@line 30169
  HEAP32[$222 >> 2] = $54; //@line 30170
  $223 = $ReallocAsyncCtx + 76 | 0; //@line 30171
  HEAP32[$223 >> 2] = $60; //@line 30172
  $224 = $ReallocAsyncCtx + 80 | 0; //@line 30173
  HEAP32[$224 >> 2] = $72; //@line 30174
  $225 = $ReallocAsyncCtx + 84 | 0; //@line 30175
  HEAP32[$225 >> 2] = $68; //@line 30176
  $226 = $ReallocAsyncCtx + 88 | 0; //@line 30177
  HEAP32[$226 >> 2] = $70; //@line 30178
  $227 = $ReallocAsyncCtx + 92 | 0; //@line 30179
  HEAP32[$227 >> 2] = $76; //@line 30180
  $228 = $ReallocAsyncCtx + 96 | 0; //@line 30181
  HEAP32[$228 >> 2] = $78; //@line 30182
  $229 = $ReallocAsyncCtx + 100 | 0; //@line 30183
  HEAP32[$229 >> 2] = $82; //@line 30184
  $230 = $ReallocAsyncCtx + 104 | 0; //@line 30185
  HEAP32[$230 >> 2] = $86; //@line 30186
  $231 = $ReallocAsyncCtx + 108 | 0; //@line 30187
  HEAP32[$231 >> 2] = $88; //@line 30188
  $232 = $ReallocAsyncCtx + 112 | 0; //@line 30189
  HEAP32[$232 >> 2] = $90; //@line 30190
  $233 = $ReallocAsyncCtx + 116 | 0; //@line 30191
  HEAP32[$233 >> 2] = $174; //@line 30192
  $234 = $ReallocAsyncCtx + 120 | 0; //@line 30193
  HEAP32[$234 >> 2] = $94; //@line 30194
  $235 = $ReallocAsyncCtx + 124 | 0; //@line 30195
  HEAP32[$235 >> 2] = $98; //@line 30196
  $236 = $ReallocAsyncCtx + 128 | 0; //@line 30197
  HEAP32[$236 >> 2] = $100; //@line 30198
  $237 = $ReallocAsyncCtx + 132 | 0; //@line 30199
  HEAP32[$237 >> 2] = $102; //@line 30200
  $238 = $ReallocAsyncCtx + 136 | 0; //@line 30201
  HEAP32[$238 >> 2] = $104; //@line 30202
  $239 = $ReallocAsyncCtx + 140 | 0; //@line 30203
  HEAP32[$239 >> 2] = $106; //@line 30204
  $240 = $ReallocAsyncCtx + 144 | 0; //@line 30205
  HEAP32[$240 >> 2] = $108; //@line 30206
  $241 = $ReallocAsyncCtx + 148 | 0; //@line 30207
  HEAP32[$241 >> 2] = $116; //@line 30208
  $242 = $ReallocAsyncCtx + 152 | 0; //@line 30209
  HEAP32[$242 >> 2] = $118; //@line 30210
  $243 = $ReallocAsyncCtx + 156 | 0; //@line 30211
  HEAP32[$243 >> 2] = $173; //@line 30212
  $244 = $ReallocAsyncCtx + 160 | 0; //@line 30213
  HEAP32[$244 >> 2] = $120; //@line 30214
  sp = STACKTOP; //@line 30215
  return;
 }
 HEAP32[___async_retval >> 2] = $204; //@line 30219
 ___async_unwind = 0; //@line 30220
 HEAP32[$ReallocAsyncCtx >> 2] = 589; //@line 30221
 $205 = $ReallocAsyncCtx + 4 | 0; //@line 30222
 HEAP32[$205 >> 2] = $4; //@line 30223
 $206 = $ReallocAsyncCtx + 8 | 0; //@line 30224
 HEAP32[$206 >> 2] = $6; //@line 30225
 $207 = $ReallocAsyncCtx + 12 | 0; //@line 30226
 HEAP32[$207 >> 2] = $8; //@line 30227
 $208 = $ReallocAsyncCtx + 16 | 0; //@line 30228
 HEAP32[$208 >> 2] = $10; //@line 30229
 $209 = $ReallocAsyncCtx + 20 | 0; //@line 30230
 HEAP32[$209 >> 2] = $12; //@line 30231
 $210 = $ReallocAsyncCtx + 24 | 0; //@line 30232
 HEAP32[$210 >> 2] = $16; //@line 30233
 $211 = $ReallocAsyncCtx + 28 | 0; //@line 30234
 HEAP32[$211 >> 2] = $22; //@line 30235
 $212 = $ReallocAsyncCtx + 32 | 0; //@line 30236
 HEAP32[$212 >> 2] = $24; //@line 30237
 $213 = $ReallocAsyncCtx + 36 | 0; //@line 30238
 HEAP32[$213 >> 2] = $26; //@line 30239
 $214 = $ReallocAsyncCtx + 40 | 0; //@line 30240
 HEAP32[$214 >> 2] = $30; //@line 30241
 $215 = $ReallocAsyncCtx + 44 | 0; //@line 30242
 HEAP32[$215 >> 2] = $32; //@line 30243
 $216 = $ReallocAsyncCtx + 48 | 0; //@line 30244
 HEAP32[$216 >> 2] = $34; //@line 30245
 $217 = $ReallocAsyncCtx + 52 | 0; //@line 30246
 HEAP32[$217 >> 2] = $36; //@line 30247
 $218 = $ReallocAsyncCtx + 56 | 0; //@line 30248
 HEAP32[$218 >> 2] = $42; //@line 30249
 $219 = $ReallocAsyncCtx + 60 | 0; //@line 30250
 HEAP32[$219 >> 2] = $44; //@line 30251
 $220 = $ReallocAsyncCtx + 64 | 0; //@line 30252
 HEAP32[$220 >> 2] = $46; //@line 30253
 $221 = $ReallocAsyncCtx + 68 | 0; //@line 30254
 HEAP32[$221 >> 2] = $52; //@line 30255
 $222 = $ReallocAsyncCtx + 72 | 0; //@line 30256
 HEAP32[$222 >> 2] = $54; //@line 30257
 $223 = $ReallocAsyncCtx + 76 | 0; //@line 30258
 HEAP32[$223 >> 2] = $60; //@line 30259
 $224 = $ReallocAsyncCtx + 80 | 0; //@line 30260
 HEAP32[$224 >> 2] = $72; //@line 30261
 $225 = $ReallocAsyncCtx + 84 | 0; //@line 30262
 HEAP32[$225 >> 2] = $68; //@line 30263
 $226 = $ReallocAsyncCtx + 88 | 0; //@line 30264
 HEAP32[$226 >> 2] = $70; //@line 30265
 $227 = $ReallocAsyncCtx + 92 | 0; //@line 30266
 HEAP32[$227 >> 2] = $76; //@line 30267
 $228 = $ReallocAsyncCtx + 96 | 0; //@line 30268
 HEAP32[$228 >> 2] = $78; //@line 30269
 $229 = $ReallocAsyncCtx + 100 | 0; //@line 30270
 HEAP32[$229 >> 2] = $82; //@line 30271
 $230 = $ReallocAsyncCtx + 104 | 0; //@line 30272
 HEAP32[$230 >> 2] = $86; //@line 30273
 $231 = $ReallocAsyncCtx + 108 | 0; //@line 30274
 HEAP32[$231 >> 2] = $88; //@line 30275
 $232 = $ReallocAsyncCtx + 112 | 0; //@line 30276
 HEAP32[$232 >> 2] = $90; //@line 30277
 $233 = $ReallocAsyncCtx + 116 | 0; //@line 30278
 HEAP32[$233 >> 2] = $174; //@line 30279
 $234 = $ReallocAsyncCtx + 120 | 0; //@line 30280
 HEAP32[$234 >> 2] = $94; //@line 30281
 $235 = $ReallocAsyncCtx + 124 | 0; //@line 30282
 HEAP32[$235 >> 2] = $98; //@line 30283
 $236 = $ReallocAsyncCtx + 128 | 0; //@line 30284
 HEAP32[$236 >> 2] = $100; //@line 30285
 $237 = $ReallocAsyncCtx + 132 | 0; //@line 30286
 HEAP32[$237 >> 2] = $102; //@line 30287
 $238 = $ReallocAsyncCtx + 136 | 0; //@line 30288
 HEAP32[$238 >> 2] = $104; //@line 30289
 $239 = $ReallocAsyncCtx + 140 | 0; //@line 30290
 HEAP32[$239 >> 2] = $106; //@line 30291
 $240 = $ReallocAsyncCtx + 144 | 0; //@line 30292
 HEAP32[$240 >> 2] = $108; //@line 30293
 $241 = $ReallocAsyncCtx + 148 | 0; //@line 30294
 HEAP32[$241 >> 2] = $116; //@line 30295
 $242 = $ReallocAsyncCtx + 152 | 0; //@line 30296
 HEAP32[$242 >> 2] = $118; //@line 30297
 $243 = $ReallocAsyncCtx + 156 | 0; //@line 30298
 HEAP32[$243 >> 2] = $173; //@line 30299
 $244 = $ReallocAsyncCtx + 160 | 0; //@line 30300
 HEAP32[$244 >> 2] = $120; //@line 30301
 sp = STACKTOP; //@line 30302
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$016 = 0, $$05$i = 0, $$06$i = 0, $100 = 0, $108 = 0, $111 = 0, $117 = 0, $119 = 0, $126 = 0, $129 = 0, $134 = 0, $136 = 0, $142 = 0, $145 = 0, $149 = 0, $151 = 0, $156 = 0, $159 = 0, $17 = 0, $39 = 0, $4 = 0, $5 = 0, $51 = 0, $52 = 0, $6 = 0, $61 = 0, $69 = 0, $7 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $88 = 0, $91 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx21 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx37 = 0, $AsyncCtx40 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 15494
 STACKTOP = STACKTOP + 80 | 0; //@line 15495
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 15495
 $4 = sp + 64 | 0; //@line 15496
 $5 = sp + 48 | 0; //@line 15497
 $6 = sp + 32 | 0; //@line 15498
 $7 = sp + 16 | 0; //@line 15499
 $8 = sp; //@line 15500
 HEAP32[$0 + 1328 >> 2] = $3; //@line 15502
 if (!$1) {
  $$016 = -1003; //@line 15505
  STACKTOP = sp; //@line 15506
  return $$016 | 0; //@line 15506
 }
 HEAP32[$0 >> 2] = $2; //@line 15508
 __ZN11LoRaMacMlme23activate_mlme_subsystemEP7LoRaPHY($0 + 264 | 0, $2); //@line 15510
 __ZN10LoRaMacMib22activate_mib_subsystemEP7LoRaPHY($0 + 348 | 0, HEAP32[$0 >> 2] | 0); //@line 15513
 __ZN18LoRaMacChannelPlan30activate_channelplan_subsystemEP7LoRaPHY($0 + 352 | 0, HEAP32[$0 >> 2] | 0); //@line 15516
 HEAP32[$0 + 1324 >> 2] = $1; //@line 15518
 $17 = $0 + 360 | 0; //@line 15519
 HEAP8[$0 + 944 >> 0] = 0; //@line 15521
 HEAP32[$17 >> 2] = 0; //@line 15522
 HEAP32[$0 + 968 >> 2] = 0; //@line 15524
 HEAP8[$0 + 897 >> 0] = 0; //@line 15526
 HEAP8[$0 + 896 >> 0] = 1; //@line 15528
 HEAP8[$0 + 369 >> 0] = 0; //@line 15530
 HEAP32[$0 + 980 >> 2] = 0; //@line 15532
 HEAP32[$0 + 984 >> 2] = 0; //@line 15534
 __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$0 >> 2] | 0, $17, 1); //@line 15536
 HEAP32[$0 + 1100 >> 2] = 10; //@line 15538
 HEAP8[$0 + 1104 >> 0] = 6; //@line 15540
 HEAP8[$0 + 1128 >> 0] = 1; //@line 15542
 HEAP8[$0 + 372 >> 0] = 0; //@line 15544
 HEAP32[$0 + 956 >> 2] = 0; //@line 15546
 HEAP32[$0 + 960 >> 2] = 0; //@line 15548
 HEAP32[$0 + 964 >> 2] = 0; //@line 15550
 HEAP8[$0 + 380 >> 0] = 0; //@line 15552
 HEAP8[$0 + 894 >> 0] = 1; //@line 15554
 HEAP8[$0 + 895 >> 0] = 1; //@line 15556
 HEAP8[$0 + 377 >> 0] = 0; //@line 15558
 HEAP8[$0 + 1152 >> 0] = 0; //@line 15560
 HEAP16[$0 + 1154 >> 1] = 1; //@line 15562
 $39 = $0 + 4 | 0; //@line 15563
 __ZN14LoRaMacCommand20clear_command_bufferEv($39); //@line 15564
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($39); //@line 15565
 __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($39); //@line 15566
 HEAP8[$0 + 371 >> 0] = 1; //@line 15568
 __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$0 >> 2] | 0, $17, 0); //@line 15570
 HEAP8[$0 + 373 >> 0] = 0; //@line 15572
 HEAP8[$0 + 374 >> 0] = 0; //@line 15574
 $$05$i = HEAP32[$0 + 1208 >> 2] | 0; //@line 15576
 if ($$05$i | 0) {
  $$06$i = $$05$i; //@line 15579
  do {
   HEAP32[$$06$i + 36 >> 2] = 0; //@line 15582
   $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 15584
  } while (($$06$i | 0) != 0);
 }
 HEAP8[$0 + 378 >> 0] = 0; //@line 15594
 HEAP8[$0 + 379 >> 0] = 0; //@line 15596
 $51 = HEAP32[$0 >> 2] | 0; //@line 15597
 $AsyncCtx34 = _emscripten_alloc_async_context(32, sp) | 0; //@line 15598
 $52 = __ZN7LoRaPHY13get_radio_rngEv($51) | 0; //@line 15599
 if (___async) {
  HEAP32[$AsyncCtx34 >> 2] = 426; //@line 15602
  HEAP32[$AsyncCtx34 + 4 >> 2] = $0; //@line 15604
  HEAP32[$AsyncCtx34 + 8 >> 2] = $7; //@line 15606
  HEAP32[$AsyncCtx34 + 12 >> 2] = $8; //@line 15608
  HEAP32[$AsyncCtx34 + 16 >> 2] = $4; //@line 15610
  HEAP32[$AsyncCtx34 + 20 >> 2] = $6; //@line 15612
  HEAP32[$AsyncCtx34 + 24 >> 2] = $5; //@line 15614
  HEAP32[$AsyncCtx34 + 28 >> 2] = $0; //@line 15616
  sp = STACKTOP; //@line 15617
  STACKTOP = sp; //@line 15618
  return 0; //@line 15618
 }
 _emscripten_free_async_context($AsyncCtx34 | 0); //@line 15620
 _srand($52); //@line 15621
 HEAP8[$0 + 368 >> 0] = 1; //@line 15623
 $61 = HEAP32[$0 >> 2] | 0; //@line 15624
 $AsyncCtx37 = _emscripten_alloc_async_context(32, sp) | 0; //@line 15625
 __ZN7LoRaPHY25setup_public_network_modeEb($61, 1); //@line 15626
 if (___async) {
  HEAP32[$AsyncCtx37 >> 2] = 427; //@line 15629
  HEAP32[$AsyncCtx37 + 4 >> 2] = $0; //@line 15631
  HEAP32[$AsyncCtx37 + 8 >> 2] = $7; //@line 15633
  HEAP32[$AsyncCtx37 + 12 >> 2] = $8; //@line 15635
  HEAP32[$AsyncCtx37 + 16 >> 2] = $4; //@line 15637
  HEAP32[$AsyncCtx37 + 20 >> 2] = $6; //@line 15639
  HEAP32[$AsyncCtx37 + 24 >> 2] = $5; //@line 15641
  HEAP32[$AsyncCtx37 + 28 >> 2] = $0; //@line 15643
  sp = STACKTOP; //@line 15644
  STACKTOP = sp; //@line 15645
  return 0; //@line 15645
 }
 _emscripten_free_async_context($AsyncCtx37 | 0); //@line 15647
 $69 = HEAP32[$0 >> 2] | 0; //@line 15648
 $AsyncCtx40 = _emscripten_alloc_async_context(28, sp) | 0; //@line 15649
 __ZN7LoRaPHY18put_radio_to_sleepEv($69); //@line 15650
 if (___async) {
  HEAP32[$AsyncCtx40 >> 2] = 428; //@line 15653
  HEAP32[$AsyncCtx40 + 4 >> 2] = $0; //@line 15655
  HEAP32[$AsyncCtx40 + 8 >> 2] = $7; //@line 15657
  HEAP32[$AsyncCtx40 + 12 >> 2] = $8; //@line 15659
  HEAP32[$AsyncCtx40 + 16 >> 2] = $4; //@line 15661
  HEAP32[$AsyncCtx40 + 20 >> 2] = $6; //@line 15663
  HEAP32[$AsyncCtx40 + 24 >> 2] = $5; //@line 15665
  sp = STACKTOP; //@line 15666
  STACKTOP = sp; //@line 15667
  return 0; //@line 15667
 }
 _emscripten_free_async_context($AsyncCtx40 | 0); //@line 15669
 $76 = $0 + 356 | 0; //@line 15670
 $77 = HEAP32[$76 >> 2] | 0; //@line 15671
 $79 = $4 + 12 | 0; //@line 15673
 HEAP32[$4 >> 2] = 429; //@line 15674
 HEAP32[$4 + 4 >> 2] = 0; //@line 15676
 HEAP32[$4 + 8 >> 2] = $0; //@line 15678
 HEAP32[$79 >> 2] = 912; //@line 15679
 $AsyncCtx30 = _emscripten_alloc_async_context(36, sp) | 0; //@line 15680
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($77, $0 + 996 | 0, $4); //@line 15681
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 430; //@line 15684
  HEAP32[$AsyncCtx30 + 4 >> 2] = $76; //@line 15686
  HEAP32[$AsyncCtx30 + 8 >> 2] = $0; //@line 15688
  HEAP32[$AsyncCtx30 + 12 >> 2] = $7; //@line 15690
  HEAP32[$AsyncCtx30 + 16 >> 2] = $8; //@line 15692
  HEAP32[$AsyncCtx30 + 20 >> 2] = $4; //@line 15694
  HEAP32[$AsyncCtx30 + 24 >> 2] = $79; //@line 15696
  HEAP32[$AsyncCtx30 + 28 >> 2] = $6; //@line 15698
  HEAP32[$AsyncCtx30 + 32 >> 2] = $5; //@line 15700
  sp = STACKTOP; //@line 15701
  STACKTOP = sp; //@line 15702
  return 0; //@line 15702
 }
 _emscripten_free_async_context($AsyncCtx30 | 0); //@line 15704
 $88 = HEAP32[$79 >> 2] | 0; //@line 15705
 do {
  if ($88 | 0) {
   $91 = HEAP32[$88 + 8 >> 2] | 0; //@line 15710
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 15711
   FUNCTION_TABLE_vi[$91 & 1023]($4); //@line 15712
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 431; //@line 15715
    HEAP32[$AsyncCtx + 4 >> 2] = $76; //@line 15717
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 15719
    HEAP32[$AsyncCtx + 12 >> 2] = $8; //@line 15721
    HEAP32[$AsyncCtx + 16 >> 2] = $7; //@line 15723
    HEAP32[$AsyncCtx + 20 >> 2] = $5; //@line 15725
    HEAP32[$AsyncCtx + 24 >> 2] = $6; //@line 15727
    sp = STACKTOP; //@line 15728
    STACKTOP = sp; //@line 15729
    return 0; //@line 15729
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 15731
    break;
   }
  }
 } while (0);
 $98 = HEAP32[$76 >> 2] | 0; //@line 15736
 $100 = $5 + 12 | 0; //@line 15738
 HEAP32[$5 >> 2] = 432; //@line 15739
 HEAP32[$5 + 4 >> 2] = 0; //@line 15741
 HEAP32[$5 + 8 >> 2] = $0; //@line 15743
 HEAP32[$100 >> 2] = 912; //@line 15744
 $AsyncCtx27 = _emscripten_alloc_async_context(32, sp) | 0; //@line 15745
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($98, $0 + 1016 | 0, $5); //@line 15746
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 433; //@line 15749
  HEAP32[$AsyncCtx27 + 4 >> 2] = $76; //@line 15751
  HEAP32[$AsyncCtx27 + 8 >> 2] = $0; //@line 15753
  HEAP32[$AsyncCtx27 + 12 >> 2] = $7; //@line 15755
  HEAP32[$AsyncCtx27 + 16 >> 2] = $8; //@line 15757
  HEAP32[$AsyncCtx27 + 20 >> 2] = $6; //@line 15759
  HEAP32[$AsyncCtx27 + 24 >> 2] = $5; //@line 15761
  HEAP32[$AsyncCtx27 + 28 >> 2] = $100; //@line 15763
  sp = STACKTOP; //@line 15764
  STACKTOP = sp; //@line 15765
  return 0; //@line 15765
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 15767
 $108 = HEAP32[$100 >> 2] | 0; //@line 15768
 do {
  if ($108 | 0) {
   $111 = HEAP32[$108 + 8 >> 2] | 0; //@line 15773
   $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 15774
   FUNCTION_TABLE_vi[$111 & 1023]($5); //@line 15775
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 434; //@line 15778
    HEAP32[$AsyncCtx3 + 4 >> 2] = $76; //@line 15780
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 15782
    HEAP32[$AsyncCtx3 + 12 >> 2] = $8; //@line 15784
    HEAP32[$AsyncCtx3 + 16 >> 2] = $7; //@line 15786
    HEAP32[$AsyncCtx3 + 20 >> 2] = $6; //@line 15788
    sp = STACKTOP; //@line 15789
    STACKTOP = sp; //@line 15790
    return 0; //@line 15790
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15792
    break;
   }
  }
 } while (0);
 $117 = HEAP32[$76 >> 2] | 0; //@line 15797
 $119 = $6 + 12 | 0; //@line 15799
 HEAP32[$6 >> 2] = 435; //@line 15800
 HEAP32[$6 + 4 >> 2] = 0; //@line 15802
 HEAP32[$6 + 8 >> 2] = $0; //@line 15804
 HEAP32[$119 >> 2] = 912; //@line 15805
 $AsyncCtx24 = _emscripten_alloc_async_context(28, sp) | 0; //@line 15806
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($117, $0 + 1036 | 0, $6); //@line 15807
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 436; //@line 15810
  HEAP32[$AsyncCtx24 + 4 >> 2] = $76; //@line 15812
  HEAP32[$AsyncCtx24 + 8 >> 2] = $0; //@line 15814
  HEAP32[$AsyncCtx24 + 12 >> 2] = $7; //@line 15816
  HEAP32[$AsyncCtx24 + 16 >> 2] = $8; //@line 15818
  HEAP32[$AsyncCtx24 + 20 >> 2] = $119; //@line 15820
  HEAP32[$AsyncCtx24 + 24 >> 2] = $6; //@line 15822
  sp = STACKTOP; //@line 15823
  STACKTOP = sp; //@line 15824
  return 0; //@line 15824
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 15826
 $126 = HEAP32[$119 >> 2] | 0; //@line 15827
 do {
  if ($126 | 0) {
   $129 = HEAP32[$126 + 8 >> 2] | 0; //@line 15832
   $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 15833
   FUNCTION_TABLE_vi[$129 & 1023]($6); //@line 15834
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 437; //@line 15837
    HEAP32[$AsyncCtx7 + 4 >> 2] = $76; //@line 15839
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 15841
    HEAP32[$AsyncCtx7 + 12 >> 2] = $7; //@line 15843
    HEAP32[$AsyncCtx7 + 16 >> 2] = $8; //@line 15845
    sp = STACKTOP; //@line 15846
    STACKTOP = sp; //@line 15847
    return 0; //@line 15847
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 15849
    break;
   }
  }
 } while (0);
 $134 = HEAP32[$76 >> 2] | 0; //@line 15854
 $136 = $7 + 12 | 0; //@line 15856
 HEAP32[$7 >> 2] = 438; //@line 15857
 HEAP32[$7 + 4 >> 2] = 0; //@line 15859
 HEAP32[$7 + 8 >> 2] = $0; //@line 15861
 HEAP32[$136 >> 2] = 912; //@line 15862
 $AsyncCtx21 = _emscripten_alloc_async_context(24, sp) | 0; //@line 15863
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($134, $0 + 1056 | 0, $7); //@line 15864
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 439; //@line 15867
  HEAP32[$AsyncCtx21 + 4 >> 2] = $136; //@line 15869
  HEAP32[$AsyncCtx21 + 8 >> 2] = $76; //@line 15871
  HEAP32[$AsyncCtx21 + 12 >> 2] = $0; //@line 15873
  HEAP32[$AsyncCtx21 + 16 >> 2] = $8; //@line 15875
  HEAP32[$AsyncCtx21 + 20 >> 2] = $7; //@line 15877
  sp = STACKTOP; //@line 15878
  STACKTOP = sp; //@line 15879
  return 0; //@line 15879
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 15881
 $142 = HEAP32[$136 >> 2] | 0; //@line 15882
 do {
  if ($142 | 0) {
   $145 = HEAP32[$142 + 8 >> 2] | 0; //@line 15887
   $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 15888
   FUNCTION_TABLE_vi[$145 & 1023]($7); //@line 15889
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 440; //@line 15892
    HEAP32[$AsyncCtx11 + 4 >> 2] = $76; //@line 15894
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 15896
    HEAP32[$AsyncCtx11 + 12 >> 2] = $8; //@line 15898
    sp = STACKTOP; //@line 15899
    STACKTOP = sp; //@line 15900
    return 0; //@line 15900
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 15902
    break;
   }
  }
 } while (0);
 $149 = HEAP32[$76 >> 2] | 0; //@line 15907
 $151 = $8 + 12 | 0; //@line 15909
 HEAP32[$8 >> 2] = 441; //@line 15910
 HEAP32[$8 + 4 >> 2] = 0; //@line 15912
 HEAP32[$8 + 8 >> 2] = $0; //@line 15914
 HEAP32[$151 >> 2] = 912; //@line 15915
 $AsyncCtx18 = _emscripten_alloc_async_context(20, sp) | 0; //@line 15916
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($149, $0 + 1076 | 0, $8); //@line 15917
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 442; //@line 15920
  HEAP32[$AsyncCtx18 + 4 >> 2] = $151; //@line 15922
  HEAP32[$AsyncCtx18 + 8 >> 2] = $76; //@line 15924
  HEAP32[$AsyncCtx18 + 12 >> 2] = $0; //@line 15926
  HEAP32[$AsyncCtx18 + 16 >> 2] = $8; //@line 15928
  sp = STACKTOP; //@line 15929
  STACKTOP = sp; //@line 15930
  return 0; //@line 15930
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 15932
 $156 = HEAP32[$151 >> 2] | 0; //@line 15933
 do {
  if ($156 | 0) {
   $159 = HEAP32[$156 + 8 >> 2] | 0; //@line 15938
   $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15939
   FUNCTION_TABLE_vi[$159 & 1023]($8); //@line 15940
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 443; //@line 15943
    HEAP32[$AsyncCtx15 + 4 >> 2] = $76; //@line 15945
    HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 15947
    sp = STACKTOP; //@line 15948
    STACKTOP = sp; //@line 15949
    return 0; //@line 15949
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 15951
    break;
   }
  }
 } while (0);
 HEAP32[$0 + 988 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[$76 >> 2] | 0) | 0; //@line 15959
 $$016 = 0; //@line 15960
 STACKTOP = sp; //@line 15961
 return $$016 | 0; //@line 15961
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$054 = 0, $$055 = 0, $$05564 = 0, $$056 = 0, $$05663 = 0, $$05766 = 0, $$06065 = 0, $$158 = 0, $$15862 = 0, $$259 = 0, $$extract$t = 0, $$pre$phiZ2D = 0, $10 = 0, $103 = 0, $109 = 0, $115 = 0, $12 = 0, $125 = 0, $129 = 0, $142 = 0, $147 = 0, $148 = 0, $16 = 0, $161 = 0, $162 = 0, $163 = 0, $169 = 0, $170 = 0, $174 = 0, $176 = 0, $182 = 0, $183 = 0, $186 = 0, $188 = 0, $201 = 0, $213 = 0, $222 = 0, $227 = 0, $229 = 0, $230 = 0, $231 = 0, $238 = 0, $41 = 0, $6 = 0, $64 = 0, $65 = 0, $7 = 0, $72 = 0, $74 = 0, $8 = 0, $80 = 0, $81 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $95 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14685
 STACKTOP = STACKTOP + 16 | 0; //@line 14686
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14686
 $6 = sp; //@line 14687
 HEAP32[$6 >> 2] = 0; //@line 14688
 $7 = $0 + 636 | 0; //@line 14689
 HEAP16[$7 >> 1] = 0; //@line 14690
 $8 = $0 + 373 | 0; //@line 14691
 HEAP8[$8 >> 0] = 0; //@line 14692
 $9 = ($4 | 0) == 0; //@line 14693
 $$extract$t = $9 ? 0 : $5 & 255; //@line 14695
 $10 = $0 + 893 | 0; //@line 14696
 HEAP8[$10 >> 0] = $$extract$t; //@line 14697
 $12 = $0 + 381 | 0; //@line 14699
 HEAP8[$12 >> 0] = HEAP8[$1 >> 0] | 0; //@line 14700
 switch ((HEAPU8[$1 >> 0] | 0) >>> 5 & 7) {
 case 0:
  {
   HEAP16[$7 >> 1] = 1; //@line 14706
   $16 = HEAP32[$0 + 904 >> 2] | 0; //@line 14709
   HEAP8[$0 + 389 >> 0] = HEAP8[$16 >> 0] | 0; //@line 14714
   HEAP8[$0 + 388 >> 0] = HEAP8[$16 + 1 >> 0] | 0; //@line 14718
   HEAP8[$0 + 387 >> 0] = HEAP8[$16 + 2 >> 0] | 0; //@line 14722
   HEAP8[$0 + 386 >> 0] = HEAP8[$16 + 3 >> 0] | 0; //@line 14726
   HEAP8[$0 + 385 >> 0] = HEAP8[$16 + 4 >> 0] | 0; //@line 14730
   HEAP8[$0 + 384 >> 0] = HEAP8[$16 + 5 >> 0] | 0; //@line 14734
   HEAP8[$0 + 383 >> 0] = HEAP8[$16 + 6 >> 0] | 0; //@line 14737
   HEAP8[$0 + 382 >> 0] = HEAP8[$16 + 7 >> 0] | 0; //@line 14739
   HEAP16[$7 >> 1] = 9; //@line 14740
   $41 = HEAP32[$0 + 900 >> 2] | 0; //@line 14743
   HEAP8[$0 + 397 >> 0] = HEAP8[$41 >> 0] | 0; //@line 14748
   HEAP8[$0 + 396 >> 0] = HEAP8[$41 + 1 >> 0] | 0; //@line 14752
   HEAP8[$0 + 395 >> 0] = HEAP8[$41 + 2 >> 0] | 0; //@line 14756
   HEAP8[$0 + 394 >> 0] = HEAP8[$41 + 3 >> 0] | 0; //@line 14760
   HEAP8[$0 + 393 >> 0] = HEAP8[$41 + 4 >> 0] | 0; //@line 14764
   HEAP8[$0 + 392 >> 0] = HEAP8[$41 + 5 >> 0] | 0; //@line 14768
   HEAP8[$0 + 391 >> 0] = HEAP8[$41 + 6 >> 0] | 0; //@line 14771
   HEAP8[$0 + 390 >> 0] = HEAP8[$41 + 7 >> 0] | 0; //@line 14773
   HEAP16[$7 >> 1] = 17; //@line 14774
   $64 = HEAP32[$0 >> 2] | 0; //@line 14775
   $AsyncCtx11 = _emscripten_alloc_async_context(24, sp) | 0; //@line 14776
   $65 = __ZN7LoRaPHY13get_radio_rngEv($64) | 0; //@line 14777
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 409; //@line 14780
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 14782
    HEAP32[$AsyncCtx11 + 8 >> 2] = $7; //@line 14784
    HEAP32[$AsyncCtx11 + 12 >> 2] = $12; //@line 14786
    HEAP32[$AsyncCtx11 + 16 >> 2] = $6; //@line 14788
    HEAP32[$AsyncCtx11 + 20 >> 2] = $6; //@line 14790
    sp = STACKTOP; //@line 14791
    STACKTOP = sp; //@line 14792
    return 0; //@line 14792
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 14794
   $72 = $0 + 946 | 0; //@line 14796
   HEAP16[$72 >> 1] = $65; //@line 14797
   $74 = HEAP16[$7 >> 1] | 0; //@line 14799
   HEAP16[$7 >> 1] = $74 + 1 << 16 >> 16; //@line 14801
   HEAP8[($74 & 65535) + ($0 + 381) >> 0] = $65; //@line 14804
   $80 = (HEAPU16[$72 >> 1] | 0) >>> 8 & 255; //@line 14807
   $81 = HEAP16[$7 >> 1] | 0; //@line 14808
   HEAP16[$7 >> 1] = $81 + 1 << 16 >> 16; //@line 14810
   HEAP8[($81 & 65535) + ($0 + 381) >> 0] = $80; //@line 14813
   $86 = HEAP16[$7 >> 1] & 255; //@line 14815
   $88 = HEAP32[$0 + 908 >> 2] | 0; //@line 14817
   $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 14818
   $89 = __Z22compute_join_frame_micPKhtS0_Pj($12, $86, $88, $6) | 0; //@line 14819
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 410; //@line 14822
    HEAP32[$AsyncCtx3 + 4 >> 2] = $6; //@line 14824
    HEAP32[$AsyncCtx3 + 8 >> 2] = $7; //@line 14826
    HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 14828
    HEAP32[$AsyncCtx3 + 16 >> 2] = $6; //@line 14830
    sp = STACKTOP; //@line 14831
    STACKTOP = sp; //@line 14832
    return 0; //@line 14832
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14834
   if ($89 | 0) {
    $$0 = -1014; //@line 14837
    STACKTOP = sp; //@line 14838
    return $$0 | 0; //@line 14838
   }
   $95 = HEAP32[$6 >> 2] | 0; //@line 14840
   $97 = HEAP16[$7 >> 1] | 0; //@line 14842
   HEAP16[$7 >> 1] = $97 + 1 << 16 >> 16; //@line 14844
   HEAP8[($97 & 65535) + ($0 + 381) >> 0] = $95; //@line 14847
   $103 = HEAP16[$7 >> 1] | 0; //@line 14850
   HEAP16[$7 >> 1] = $103 + 1 << 16 >> 16; //@line 14852
   HEAP8[($103 & 65535) + ($0 + 381) >> 0] = $95 >>> 8; //@line 14855
   $109 = HEAP16[$7 >> 1] | 0; //@line 14858
   HEAP16[$7 >> 1] = $109 + 1 << 16 >> 16; //@line 14860
   HEAP8[($109 & 65535) + ($0 + 381) >> 0] = $95 >>> 16; //@line 14863
   $115 = HEAP16[$7 >> 1] | 0; //@line 14866
   HEAP16[$7 >> 1] = $115 + 1 << 16 >> 16; //@line 14868
   HEAP8[($115 & 65535) + ($0 + 381) >> 0] = $95 >>> 24; //@line 14871
   $$0 = 0; //@line 14872
   STACKTOP = sp; //@line 14873
   return $$0 | 0; //@line 14873
  }
 case 4:
  {
   HEAP8[$8 >> 0] = 1; //@line 14877
   break;
  }
 case 2:
  {
   break;
  }
 case 7:
  {
   if ($9 | $$extract$t << 24 >> 24 == 0) {
    $$0 = 0; //@line 14887
    STACKTOP = sp; //@line 14888
    return $$0 | 0; //@line 14888
   }
   _memcpy($0 + 382 | 0, $4 | 0, $$extract$t & 255 | 0) | 0; //@line 14892
   HEAP16[$7 >> 1] = (HEAPU8[$10 >> 0] | 0) + 1; //@line 14897
   $$0 = 0; //@line 14898
   STACKTOP = sp; //@line 14899
   return $$0 | 0; //@line 14899
  }
 default:
  {
   $$0 = -1002; //@line 14903
   STACKTOP = sp; //@line 14904
   return $$0 | 0; //@line 14904
  }
 }
 if (!(HEAP8[$0 + 372 >> 0] | 0)) {
  $$0 = -1009; //@line 14911
  STACKTOP = sp; //@line 14912
  return $$0 | 0; //@line 14912
 }
 if (HEAP8[$0 + 1156 >> 0] | 0) {
  $125 = HEAP32[$0 >> 2] | 0; //@line 14918
  $AsyncCtx7 = _emscripten_alloc_async_context(44, sp) | 0; //@line 14922
  $129 = __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($125, 1, $0 + 1097 | 0, $0 + 1096 | 0, $0 + 964 | 0) | 0; //@line 14923
  if (___async) {
   HEAP32[$AsyncCtx7 >> 2] = 411; //@line 14926
   HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 14928
   HEAP32[$AsyncCtx7 + 8 >> 2] = $10; //@line 14930
   HEAP32[$AsyncCtx7 + 12 >> 2] = $0; //@line 14932
   HEAP8[$AsyncCtx7 + 16 >> 0] = $9 & 1; //@line 14935
   HEAP32[$AsyncCtx7 + 20 >> 2] = $4; //@line 14937
   HEAP8[$AsyncCtx7 + 24 >> 0] = $3; //@line 14939
   HEAP32[$AsyncCtx7 + 28 >> 2] = $6; //@line 14941
   HEAP32[$AsyncCtx7 + 32 >> 2] = $7; //@line 14943
   HEAP32[$AsyncCtx7 + 36 >> 2] = $6; //@line 14945
   HEAP32[$AsyncCtx7 + 40 >> 2] = $12; //@line 14947
   sp = STACKTOP; //@line 14948
   STACKTOP = sp; //@line 14949
   return 0; //@line 14949
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 14951
  if ($129) {
   HEAP8[$2 >> 0] = HEAP8[$2 >> 0] | 64; //@line 14955
  }
 }
 $142 = $0 + 374 | 0; //@line 14958
 if (!(HEAP8[$142 >> 0] | 0)) {
  $$pre$phiZ2D = $2; //@line 14962
 } else {
  HEAP8[$142 >> 0] = 0; //@line 14964
  HEAP8[$2 >> 0] = HEAP8[$2 >> 0] | 32; //@line 14967
  $$pre$phiZ2D = $2; //@line 14968
 }
 $147 = $0 + 952 | 0; //@line 14970
 $148 = HEAP32[$147 >> 2] | 0; //@line 14971
 HEAP8[$0 + 382 >> 0] = $148; //@line 14974
 HEAP8[$0 + 383 >> 0] = $148 >>> 8; //@line 14978
 HEAP8[$0 + 384 >> 0] = $148 >>> 16; //@line 14982
 HEAP8[$0 + 385 >> 0] = $148 >>> 24; //@line 14986
 $161 = $0 + 386 | 0; //@line 14988
 HEAP8[$161 >> 0] = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 14989
 $162 = $0 + 956 | 0; //@line 14990
 $163 = HEAP32[$162 >> 2] | 0; //@line 14991
 HEAP8[$0 + 387 >> 0] = $163; //@line 14994
 HEAP8[$0 + 388 >> 0] = $163 >>> 8; //@line 14998
 $169 = $0 + 4 | 0; //@line 14999
 __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($169); //@line 15000
 $170 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($169) | 0; //@line 15001
 do {
  if ($9) {
   label = 27; //@line 15004
  } else {
   if (!(HEAP8[$10 >> 0] | 0)) {
    label = 27; //@line 15009
   } else {
    if (!(__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($169) | 0)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($169); //@line 15013
     $$05564 = $3; //@line 15014
     $$05663 = $4; //@line 15014
     $$15862 = 8; //@line 15014
     label = 31; //@line 15015
     break;
    }
    $174 = $170 & 255; //@line 15018
    if (($170 & 255) >= 16) {
     HEAP8[$10 >> 0] = $170; //@line 15021
     $$055 = 0; //@line 15023
     $$056 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($169) | 0; //@line 15023
     $$158 = 8; //@line 15023
     label = 30; //@line 15024
     break;
    }
    $176 = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 15027
    $182 = ($176 & 255) + $174 & 15 | $176 & -16; //@line 15033
    HEAP8[$$pre$phiZ2D >> 0] = $182; //@line 15034
    HEAP8[$161 >> 0] = $182; //@line 15035
    $183 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($169) | 0; //@line 15036
    if (!($170 << 24 >> 24)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($169); //@line 15039
     $$05564 = $3; //@line 15040
     $$05663 = $4; //@line 15040
     $$15862 = 8; //@line 15040
     label = 31; //@line 15041
     break;
    } else {
     $$05766 = 8; //@line 15044
     $$06065 = 0; //@line 15044
     $186 = 0; //@line 15044
     while (1) {
      $188 = $$05766 + 1 << 24 >> 24; //@line 15048
      HEAP8[($$05766 & 255) + ($0 + 381) >> 0] = HEAP8[$183 + $186 >> 0] | 0; //@line 15051
      $$06065 = $$06065 + 1 << 16 >> 16; //@line 15052
      $186 = $$06065 & 65535; //@line 15053
      if ($186 >>> 0 >= $174 >>> 0) {
       $$055 = $3; //@line 15058
       $$056 = $4; //@line 15058
       $$158 = $188; //@line 15058
       label = 30; //@line 15059
       break;
      } else {
       $$05766 = $188; //@line 15056
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 27) {
  if (!($170 << 24 >> 24)) {
   $$055 = $3; //@line 15070
   $$056 = $4; //@line 15070
   $$158 = 8; //@line 15070
   label = 30; //@line 15071
  } else {
   if (__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($169) | 0) {
    HEAP8[$10 >> 0] = $170; //@line 15075
    $$055 = 0; //@line 15077
    $$056 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($169) | 0; //@line 15077
    $$158 = 8; //@line 15077
    label = 30; //@line 15078
   } else {
    $$055 = $3; //@line 15080
    $$056 = $4; //@line 15080
    $$158 = 8; //@line 15080
    label = 30; //@line 15081
   }
  }
 }
 if ((label | 0) == 30) {
  __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($169); //@line 15086
  if (!$$056) {
   $$054 = 0; //@line 15089
   $$259 = $$158; //@line 15089
  } else {
   $$05564 = $$055; //@line 15091
   $$05663 = $$056; //@line 15091
   $$15862 = $$158; //@line 15091
   label = 31; //@line 15092
  }
 }
 do {
  if ((label | 0) == 31) {
   if (!(HEAP8[$10 >> 0] | 0)) {
    $$054 = 0; //@line 15100
    $$259 = $$15862; //@line 15100
   } else {
    $201 = $$15862 + 1 << 24 >> 24; //@line 15102
    HEAP8[($$15862 & 255) + ($0 + 381) >> 0] = $$05564; //@line 15105
    if (!($$05564 << 24 >> 24)) {
     __ZN14LoRaMacCommand20clear_command_bufferEv($169); //@line 15108
     $213 = (__Z15encrypt_payloadPKhtS0_jhjPh($$05663, HEAPU8[$10 >> 0] | 0, $0 + 912 | 0, HEAP32[$147 >> 2] | 0, 0, HEAP32[$162 >> 2] | 0, ($201 & 255) + ($0 + 381) | 0) | 0) == 0; //@line 15117
     $$054 = $213 ? 0 : -1014; //@line 15119
     $$259 = $201; //@line 15119
     break;
    } else {
     $222 = (__Z15encrypt_payloadPKhtS0_jhjPh($$05663, HEAPU8[$10 >> 0] | 0, $0 + 928 | 0, HEAP32[$147 >> 2] | 0, 0, HEAP32[$162 >> 2] | 0, ($201 & 255) + ($0 + 381) | 0) | 0) == 0; //@line 15130
     $$054 = $222 ? 0 : -1014; //@line 15132
     $$259 = $201; //@line 15132
     break;
    }
   }
  }
 } while (0);
 $227 = (HEAPU8[$10 >> 0] | 0) + ($$259 & 255) & 65535; //@line 15142
 HEAP16[$7 >> 1] = $227; //@line 15143
 $229 = HEAP32[$147 >> 2] | 0; //@line 15145
 $230 = HEAP32[$162 >> 2] | 0; //@line 15146
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 15147
 $231 = __Z11compute_micPKhtS0_jhjPj($12, $227, $0 + 912 | 0, $229, 0, $230, $6) | 0; //@line 15148
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 412; //@line 15151
  HEAP32[$AsyncCtx + 4 >> 2] = $$054; //@line 15153
  HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 15155
  HEAP32[$AsyncCtx + 12 >> 2] = $7; //@line 15157
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 15159
  HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 15161
  sp = STACKTOP; //@line 15162
  STACKTOP = sp; //@line 15163
  return 0; //@line 15163
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15165
 $238 = HEAP32[$6 >> 2] | 0; //@line 15168
 HEAP8[(HEAPU16[$7 >> 1] | 0) + ($0 + 381) >> 0] = $238; //@line 15173
 HEAP8[(HEAPU16[$7 >> 1] | 0) + 1 + ($0 + 381) >> 0] = $238 >>> 8; //@line 15180
 HEAP8[(HEAPU16[$7 >> 1] | 0) + 2 + ($0 + 381) >> 0] = $238 >>> 16; //@line 15187
 HEAP8[(HEAPU16[$7 >> 1] | 0) + 3 + ($0 + 381) >> 0] = $238 >>> 24; //@line 15194
 HEAP16[$7 >> 1] = (HEAPU16[$7 >> 1] | 0) + 4; //@line 15199
 $$0 = ($231 | 0) == 0 ? $$054 : -1014; //@line 15200
 STACKTOP = sp; //@line 15201
 return $$0 | 0; //@line 15201
}
function __ZN7LoRaMac11schedule_txEv($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$pre$phiZ2D = 0, $$sink = 0, $1 = 0, $100 = 0, $101 = 0, $103 = 0, $104 = 0, $11 = 0, $118 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $14 = 0, $142 = 0, $145 = 0, $147 = 0, $148 = 0, $149 = 0, $174 = 0, $175 = 0, $177 = 0, $185 = 0, $2 = 0, $20 = 0, $201 = 0, $203 = 0, $206 = 0, $209 = 0, $211 = 0, $28 = 0, $3 = 0, $34 = 0, $35 = 0, $37 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $6 = 0, $69 = 0, $70 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $96 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx21 = 0, $AsyncCtx25 = 0, $AsyncCtx8 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, sp = 0;
 sp = STACKTOP; //@line 14082
 STACKTOP = STACKTOP + 48 | 0; //@line 14083
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 14083
 $vararg_buffer4 = sp + 16 | 0; //@line 14084
 $vararg_buffer2 = sp + 8 | 0; //@line 14085
 $vararg_buffer = sp; //@line 14086
 $1 = sp + 36 | 0; //@line 14087
 $2 = sp + 32 | 0; //@line 14088
 $3 = sp + 20 | 0; //@line 14089
 HEAP32[$2 >> 2] = 0; //@line 14090
 switch (HEAP8[$0 + 1152 >> 0] | 0) {
 case 0:
  {
   $6 = $0 + 984 | 0; //@line 14095
   HEAP32[$6 >> 2] = 0; //@line 14096
   $$pre$phiZ2D = $6; //@line 14097
   break;
  }
 case -1:
  {
   $$1 = -1011; //@line 14101
   STACKTOP = sp; //@line 14102
   return $$1 | 0; //@line 14102
  }
 default:
  {
   $$pre$phiZ2D = $0 + 984 | 0; //@line 14107
  }
 }
 $8 = HEAP8[$0 + 379 >> 0] | 0; //@line 14111
 $9 = $0 + 372 | 0; //@line 14112
 HEAP8[$1 >> 0] = HEAP8[$9 >> 0] | 0; //@line 14114
 $11 = $0 + 375 | 0; //@line 14115
 HEAP8[$11 >> 0] = 1; //@line 14116
 HEAP8[$1 + 2 >> 0] = 1; //@line 14118
 HEAP8[$1 + 3 >> 0] = $8; //@line 14120
 $14 = $0 + 356 | 0; //@line 14121
 HEAP32[$1 + 4 >> 2] = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$14 >> 2] | 0, HEAP32[$0 + 988 >> 2] | 0) | 0; //@line 14127
 $20 = $0 + 992 | 0; //@line 14128
 HEAP32[$1 + 8 >> 2] = HEAP32[$20 >> 2]; //@line 14131
 HEAP8[$1 + 1 >> 0] = HEAP8[$0 + 376 >> 0] | 0; //@line 14135
 __ZN7LoRaPHY17calculate_backoffEP16backoff_params_s(HEAP32[$0 >> 2] | 0, $1); //@line 14137
 $28 = HEAP32[$20 >> 2] | 0; //@line 14139
 $34 = (Math_imul($28, HEAPU16[$0 + 1154 >> 1] | 0) | 0) + ((HEAP32[$$pre$phiZ2D >> 2] | 0) - $28) | 0; //@line 14145
 HEAP32[$$pre$phiZ2D >> 2] = $34; //@line 14146
 HEAP32[$3 >> 2] = $34; //@line 14147
 $35 = $0 + 1097 | 0; //@line 14148
 $37 = $3 + 8 | 0; //@line 14150
 HEAP8[$37 >> 0] = HEAP8[$35 >> 0] | 0; //@line 14151
 HEAP8[$11 >> 0] = 1; //@line 14152
 HEAP8[$3 + 10 >> 0] = 1; //@line 14154
 HEAP8[$3 + 9 >> 0] = HEAP8[$9 >> 0] | 0; //@line 14157
 HEAP32[$3 + 4 >> 2] = HEAP32[$0 + 980 >> 2]; //@line 14161
 $44 = HEAP32[$0 >> 2] | 0; //@line 14162
 $47 = HEAP32[(HEAP32[$44 >> 2] | 0) + 56 >> 2] | 0; //@line 14165
 $48 = $0 + 378 | 0; //@line 14166
 $AsyncCtx = _emscripten_alloc_async_context(76, sp) | 0; //@line 14167
 $49 = FUNCTION_TABLE_iiiiii[$47 & 7]($44, $3, $48, $2, $$pre$phiZ2D) | 0; //@line 14168
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 399; //@line 14171
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 14173
  HEAP32[$AsyncCtx + 8 >> 2] = $35; //@line 14175
  HEAP32[$AsyncCtx + 12 >> 2] = $37; //@line 14177
  HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 14179
  HEAP32[$AsyncCtx + 20 >> 2] = $48; //@line 14181
  HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 14183
  HEAP32[$AsyncCtx + 28 >> 2] = $$pre$phiZ2D; //@line 14185
  HEAP32[$AsyncCtx + 32 >> 2] = $9; //@line 14187
  HEAP32[$AsyncCtx + 36 >> 2] = $0; //@line 14189
  HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer2; //@line 14191
  HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer2; //@line 14193
  HEAP32[$AsyncCtx + 48 >> 2] = $vararg_buffer; //@line 14195
  HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer; //@line 14197
  HEAP32[$AsyncCtx + 56 >> 2] = $3; //@line 14199
  HEAP32[$AsyncCtx + 60 >> 2] = $2; //@line 14201
  HEAP32[$AsyncCtx + 64 >> 2] = $vararg_buffer4; //@line 14203
  HEAP32[$AsyncCtx + 68 >> 2] = $vararg_buffer4; //@line 14205
  HEAP32[$AsyncCtx + 72 >> 2] = $14; //@line 14207
  sp = STACKTOP; //@line 14208
  STACKTOP = sp; //@line 14209
  return 0; //@line 14209
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14211
 L9 : do {
  if (!$49) {
   while (1) {
    $69 = __ZN7LoRaPHY23get_default_tx_datarateEv(HEAP32[$0 >> 2] | 0) | 0; //@line 14216
    HEAP8[$35 >> 0] = $69; //@line 14217
    HEAP8[$37 >> 0] = $69; //@line 14218
    $70 = HEAP32[$0 >> 2] | 0; //@line 14219
    $73 = HEAP32[(HEAP32[$70 >> 2] | 0) + 56 >> 2] | 0; //@line 14222
    $AsyncCtx8 = _emscripten_alloc_async_context(76, sp) | 0; //@line 14223
    $74 = FUNCTION_TABLE_iiiiii[$73 & 7]($70, $3, $48, $2, $$pre$phiZ2D) | 0; //@line 14224
    if (___async) {
     break;
    }
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 14229
    if ($74) {
     break L9;
    }
   }
   HEAP32[$AsyncCtx8 >> 2] = 400; //@line 14234
   HEAP32[$AsyncCtx8 + 4 >> 2] = $0; //@line 14236
   HEAP32[$AsyncCtx8 + 8 >> 2] = $35; //@line 14238
   HEAP32[$AsyncCtx8 + 12 >> 2] = $37; //@line 14240
   HEAP32[$AsyncCtx8 + 16 >> 2] = $3; //@line 14242
   HEAP32[$AsyncCtx8 + 20 >> 2] = $48; //@line 14244
   HEAP32[$AsyncCtx8 + 24 >> 2] = $2; //@line 14246
   HEAP32[$AsyncCtx8 + 28 >> 2] = $$pre$phiZ2D; //@line 14248
   HEAP32[$AsyncCtx8 + 32 >> 2] = $9; //@line 14250
   HEAP32[$AsyncCtx8 + 36 >> 2] = $0; //@line 14252
   HEAP32[$AsyncCtx8 + 40 >> 2] = $vararg_buffer2; //@line 14254
   HEAP32[$AsyncCtx8 + 44 >> 2] = $vararg_buffer2; //@line 14256
   HEAP32[$AsyncCtx8 + 48 >> 2] = $vararg_buffer; //@line 14258
   HEAP32[$AsyncCtx8 + 52 >> 2] = $vararg_buffer; //@line 14260
   HEAP32[$AsyncCtx8 + 56 >> 2] = $3; //@line 14262
   HEAP32[$AsyncCtx8 + 60 >> 2] = $2; //@line 14264
   HEAP32[$AsyncCtx8 + 64 >> 2] = $vararg_buffer4; //@line 14266
   HEAP32[$AsyncCtx8 + 68 >> 2] = $vararg_buffer4; //@line 14268
   HEAP32[$AsyncCtx8 + 72 >> 2] = $14; //@line 14270
   sp = STACKTOP; //@line 14271
   STACKTOP = sp; //@line 14272
   return 0; //@line 14272
  }
 } while (0);
 $96 = HEAP8[$37 >> 0] | 0; //@line 14278
 HEAP32[$vararg_buffer >> 2] = HEAPU8[$48 >> 0]; //@line 14279
 HEAP32[$vararg_buffer + 4 >> 2] = $96; //@line 14281
 _mbed_tracef(16, 13704, 13982, $vararg_buffer); //@line 14282
 $97 = HEAP32[$0 >> 2] | 0; //@line 14283
 $100 = HEAP32[(HEAP32[$97 >> 2] | 0) + 72 >> 2] | 0; //@line 14286
 $101 = HEAP8[$35 >> 0] | 0; //@line 14287
 $103 = HEAP8[$0 + 1129 >> 0] | 0; //@line 14289
 $AsyncCtx11 = _emscripten_alloc_async_context(56, sp) | 0; //@line 14290
 $104 = FUNCTION_TABLE_iiii[$100 & 15]($97, $101, $103) | 0; //@line 14291
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 401; //@line 14294
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 14296
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 14298
  HEAP32[$AsyncCtx11 + 12 >> 2] = $9; //@line 14300
  HEAP32[$AsyncCtx11 + 16 >> 2] = $35; //@line 14302
  HEAP32[$AsyncCtx11 + 20 >> 2] = $vararg_buffer2; //@line 14304
  HEAP32[$AsyncCtx11 + 24 >> 2] = $vararg_buffer2; //@line 14306
  HEAP32[$AsyncCtx11 + 28 >> 2] = $3; //@line 14308
  HEAP32[$AsyncCtx11 + 32 >> 2] = $2; //@line 14310
  HEAP32[$AsyncCtx11 + 36 >> 2] = $2; //@line 14312
  HEAP32[$AsyncCtx11 + 40 >> 2] = $48; //@line 14314
  HEAP32[$AsyncCtx11 + 44 >> 2] = $vararg_buffer4; //@line 14316
  HEAP32[$AsyncCtx11 + 48 >> 2] = $vararg_buffer4; //@line 14318
  HEAP32[$AsyncCtx11 + 52 >> 2] = $14; //@line 14320
  sp = STACKTOP; //@line 14321
  STACKTOP = sp; //@line 14322
  return 0; //@line 14322
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 14324
 $118 = HEAP32[$0 >> 2] | 0; //@line 14325
 $121 = HEAP32[(HEAP32[$118 >> 2] | 0) + 28 >> 2] | 0; //@line 14328
 $122 = $0 + 1104 | 0; //@line 14329
 $123 = HEAP8[$122 >> 0] | 0; //@line 14330
 $124 = $0 + 1100 | 0; //@line 14331
 $125 = HEAP32[$124 >> 2] | 0; //@line 14332
 $AsyncCtx14 = _emscripten_alloc_async_context(64, sp) | 0; //@line 14334
 FUNCTION_TABLE_viiiii[$121 & 7]($118, $104, $123, $125, $0 + 1160 | 0); //@line 14335
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 402; //@line 14338
  HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 14340
  HEAP32[$AsyncCtx14 + 8 >> 2] = $0; //@line 14342
  HEAP32[$AsyncCtx14 + 12 >> 2] = $122; //@line 14344
  HEAP32[$AsyncCtx14 + 16 >> 2] = $124; //@line 14346
  HEAP32[$AsyncCtx14 + 20 >> 2] = $9; //@line 14348
  HEAP32[$AsyncCtx14 + 24 >> 2] = $35; //@line 14350
  HEAP32[$AsyncCtx14 + 28 >> 2] = $vararg_buffer2; //@line 14352
  HEAP32[$AsyncCtx14 + 32 >> 2] = $vararg_buffer2; //@line 14354
  HEAP32[$AsyncCtx14 + 36 >> 2] = $3; //@line 14356
  HEAP32[$AsyncCtx14 + 40 >> 2] = $2; //@line 14358
  HEAP32[$AsyncCtx14 + 44 >> 2] = $2; //@line 14360
  HEAP32[$AsyncCtx14 + 48 >> 2] = $48; //@line 14362
  HEAP32[$AsyncCtx14 + 52 >> 2] = $vararg_buffer4; //@line 14364
  HEAP32[$AsyncCtx14 + 56 >> 2] = $vararg_buffer4; //@line 14366
  HEAP32[$AsyncCtx14 + 60 >> 2] = $14; //@line 14368
  sp = STACKTOP; //@line 14369
  STACKTOP = sp; //@line 14370
  return 0; //@line 14370
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 14372
 $142 = HEAP32[$0 >> 2] | 0; //@line 14373
 $145 = HEAP32[(HEAP32[$142 >> 2] | 0) + 28 >> 2] | 0; //@line 14376
 $147 = HEAP8[$0 + 1136 >> 0] | 0; //@line 14378
 $148 = HEAP8[$122 >> 0] | 0; //@line 14379
 $149 = HEAP32[$124 >> 2] | 0; //@line 14380
 $AsyncCtx17 = _emscripten_alloc_async_context(56, sp) | 0; //@line 14382
 FUNCTION_TABLE_viiiii[$145 & 7]($142, $147, $148, $149, $0 + 1184 | 0); //@line 14383
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 403; //@line 14386
  HEAP32[$AsyncCtx17 + 4 >> 2] = $9; //@line 14388
  HEAP32[$AsyncCtx17 + 8 >> 2] = $0; //@line 14390
  HEAP32[$AsyncCtx17 + 12 >> 2] = $35; //@line 14392
  HEAP32[$AsyncCtx17 + 16 >> 2] = $vararg_buffer2; //@line 14394
  HEAP32[$AsyncCtx17 + 20 >> 2] = $vararg_buffer2; //@line 14396
  HEAP32[$AsyncCtx17 + 24 >> 2] = $0; //@line 14398
  HEAP32[$AsyncCtx17 + 28 >> 2] = $3; //@line 14400
  HEAP32[$AsyncCtx17 + 32 >> 2] = $2; //@line 14402
  HEAP32[$AsyncCtx17 + 36 >> 2] = $2; //@line 14404
  HEAP32[$AsyncCtx17 + 40 >> 2] = $48; //@line 14406
  HEAP32[$AsyncCtx17 + 44 >> 2] = $vararg_buffer4; //@line 14408
  HEAP32[$AsyncCtx17 + 48 >> 2] = $vararg_buffer4; //@line 14410
  HEAP32[$AsyncCtx17 + 52 >> 2] = $14; //@line 14412
  sp = STACKTOP; //@line 14413
  STACKTOP = sp; //@line 14414
  return 0; //@line 14414
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 14416
 do {
  if (!(HEAP8[$9 >> 0] | 0)) {
   HEAP32[$0 + 972 >> 2] = (HEAP32[$0 + 1172 >> 2] | 0) + (HEAP32[$0 + 1120 >> 2] | 0); //@line 14427
   $$sink = $0 + 1124 | 0; //@line 14429
  } else {
   $174 = HEAP8[$0 + 893 >> 0] | 0; //@line 14432
   $175 = HEAP8[$35 >> 0] | 0; //@line 14433
   $177 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($0 + 4 | 0) | 0; //@line 14435
   _mbed_tracef(16, 13704, 14009, $vararg_buffer2); //@line 14436
   $185 = ($177 & 255) + ($174 & 255) | 0; //@line 14444
   if ($185 >>> 0 < 256 & $185 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$0 >> 2] | 0, $175, (HEAP8[$0 + 369 >> 0] | 0) != 0) | 0) & 255) >>> 0) {
    HEAP32[$0 + 972 >> 2] = (HEAP32[$0 + 1172 >> 2] | 0) + (HEAP32[$0 + 1112 >> 2] | 0); //@line 14456
    $$sink = $0 + 1116 | 0; //@line 14458
    break;
   } else {
    $$1 = -1010; //@line 14461
    STACKTOP = sp; //@line 14462
    return $$1 | 0; //@line 14462
   }
  }
 } while (0);
 HEAP32[$0 + 976 >> 2] = (HEAP32[$0 + 1196 >> 2] | 0) + (HEAP32[$$sink >> 2] | 0); //@line 14471
 $201 = HEAP32[$2 >> 2] | 0; //@line 14472
 if (!$201) {
  $203 = HEAP8[$48 >> 0] | 0; //@line 14475
  $AsyncCtx25 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14476
  __ZN7LoRaMac21send_frame_on_channelEh($0, $203) | 0; //@line 14477
  if (___async) {
   HEAP32[$AsyncCtx25 >> 2] = 404; //@line 14480
   HEAP32[$AsyncCtx25 + 4 >> 2] = $3; //@line 14482
   HEAP32[$AsyncCtx25 + 8 >> 2] = $2; //@line 14484
   sp = STACKTOP; //@line 14485
   STACKTOP = sp; //@line 14486
   return 0; //@line 14486
  }
  _emscripten_free_async_context($AsyncCtx25 | 0); //@line 14488
  $$1 = 0; //@line 14489
  STACKTOP = sp; //@line 14490
  return $$1 | 0; //@line 14490
 } else {
  $206 = $0 + 968 | 0; //@line 14492
  HEAP32[$206 >> 2] = HEAP32[$206 >> 2] | 16; //@line 14495
  HEAP32[$vararg_buffer4 >> 2] = $201; //@line 14496
  _mbed_tracef(16, 13704, 14033, $vararg_buffer4); //@line 14497
  $209 = HEAP32[$14 >> 2] | 0; //@line 14498
  $211 = HEAP32[$2 >> 2] | 0; //@line 14500
  $AsyncCtx21 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14501
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($209, $0 + 1016 | 0, $211); //@line 14502
  if (___async) {
   HEAP32[$AsyncCtx21 >> 2] = 405; //@line 14505
   HEAP32[$AsyncCtx21 + 4 >> 2] = $3; //@line 14507
   HEAP32[$AsyncCtx21 + 8 >> 2] = $2; //@line 14509
   sp = STACKTOP; //@line 14510
   STACKTOP = sp; //@line 14511
   return 0; //@line 14511
  }
  _emscripten_free_async_context($AsyncCtx21 | 0); //@line 14513
  $$1 = 0; //@line 14514
  STACKTOP = sp; //@line 14515
  return $$1 | 0; //@line 14515
 }
 return 0; //@line 14517
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_319($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$pre13 = 0, $10 = 0, $12 = 0, $14 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $49 = 0, $50 = 0, $51 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $68 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $85 = 0, $89 = 0, $90 = 0, $92 = 0, $93 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 22050
 STACKTOP = STACKTOP + 16 | 0; //@line 22051
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 22051
 $$byval_copy = sp; //@line 22052
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22054
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22056
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22058
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22060
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22062
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22064
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22066
 $$pre13 = HEAP8[$2 >> 0] | 0; //@line 22067
 if ($$pre13 & 8) {
  HEAP8[$2 >> 0] = $$pre13 & -9; //@line 22072
  $19 = HEAP32[$4 + 1324 >> 2] | 0; //@line 22074
  $20 = $19 + 32 | 0; //@line 22075
  $22 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 22077
  $23 = $19 + 44 | 0; //@line 22078
  $24 = HEAP32[$23 >> 2] | 0; //@line 22079
  if (!$24) {
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(44) | 0; //@line 22082
   _mbed_assert_internal(15615, 15620, 1102); //@line 22083
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 386; //@line 22086
    $26 = $ReallocAsyncCtx15 + 4 | 0; //@line 22087
    HEAP32[$26 >> 2] = $2; //@line 22088
    $27 = $ReallocAsyncCtx15 + 8 | 0; //@line 22089
    HEAP32[$27 >> 2] = $4; //@line 22090
    $28 = $ReallocAsyncCtx15 + 12 | 0; //@line 22091
    HEAP32[$28 >> 2] = $20; //@line 22092
    $29 = $ReallocAsyncCtx15 + 16 | 0; //@line 22093
    HEAP32[$29 >> 2] = $22; //@line 22094
    $30 = $ReallocAsyncCtx15 + 20 | 0; //@line 22095
    HEAP32[$30 >> 2] = $6; //@line 22096
    $31 = $ReallocAsyncCtx15 + 24 | 0; //@line 22097
    HEAP32[$31 >> 2] = $8; //@line 22098
    $32 = $ReallocAsyncCtx15 + 28 | 0; //@line 22099
    HEAP32[$32 >> 2] = $10; //@line 22100
    $33 = $ReallocAsyncCtx15 + 32 | 0; //@line 22101
    HEAP32[$33 >> 2] = $12; //@line 22102
    $34 = $ReallocAsyncCtx15 + 36 | 0; //@line 22103
    HEAP32[$34 >> 2] = $14; //@line 22104
    $35 = $ReallocAsyncCtx15 + 40 | 0; //@line 22105
    HEAP32[$35 >> 2] = $23; //@line 22106
    sp = STACKTOP; //@line 22107
    STACKTOP = sp; //@line 22108
    return;
   }
   ___async_unwind = 0; //@line 22110
   HEAP32[$ReallocAsyncCtx15 >> 2] = 386; //@line 22111
   $26 = $ReallocAsyncCtx15 + 4 | 0; //@line 22112
   HEAP32[$26 >> 2] = $2; //@line 22113
   $27 = $ReallocAsyncCtx15 + 8 | 0; //@line 22114
   HEAP32[$27 >> 2] = $4; //@line 22115
   $28 = $ReallocAsyncCtx15 + 12 | 0; //@line 22116
   HEAP32[$28 >> 2] = $20; //@line 22117
   $29 = $ReallocAsyncCtx15 + 16 | 0; //@line 22118
   HEAP32[$29 >> 2] = $22; //@line 22119
   $30 = $ReallocAsyncCtx15 + 20 | 0; //@line 22120
   HEAP32[$30 >> 2] = $6; //@line 22121
   $31 = $ReallocAsyncCtx15 + 24 | 0; //@line 22122
   HEAP32[$31 >> 2] = $8; //@line 22123
   $32 = $ReallocAsyncCtx15 + 28 | 0; //@line 22124
   HEAP32[$32 >> 2] = $10; //@line 22125
   $33 = $ReallocAsyncCtx15 + 32 | 0; //@line 22126
   HEAP32[$33 >> 2] = $12; //@line 22127
   $34 = $ReallocAsyncCtx15 + 36 | 0; //@line 22128
   HEAP32[$34 >> 2] = $14; //@line 22129
   $35 = $ReallocAsyncCtx15 + 40 | 0; //@line 22130
   HEAP32[$35 >> 2] = $23; //@line 22131
   sp = STACKTOP; //@line 22132
   STACKTOP = sp; //@line 22133
   return;
  } else {
   $36 = HEAP32[$24 >> 2] | 0; //@line 22135
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 22136
   FUNCTION_TABLE_vii[$36 & 31]($20, $22); //@line 22137
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 387; //@line 22140
    $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 22141
    HEAP32[$37 >> 2] = $2; //@line 22142
    $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 22143
    HEAP32[$38 >> 2] = $4; //@line 22144
    $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 22145
    HEAP32[$39 >> 2] = $6; //@line 22146
    $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 22147
    HEAP32[$40 >> 2] = $8; //@line 22148
    $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 22149
    HEAP32[$41 >> 2] = $10; //@line 22150
    $42 = $ReallocAsyncCtx3 + 24 | 0; //@line 22151
    HEAP32[$42 >> 2] = $12; //@line 22152
    $43 = $ReallocAsyncCtx3 + 28 | 0; //@line 22153
    HEAP32[$43 >> 2] = $14; //@line 22154
    sp = STACKTOP; //@line 22155
    STACKTOP = sp; //@line 22156
    return;
   }
   ___async_unwind = 0; //@line 22158
   HEAP32[$ReallocAsyncCtx3 >> 2] = 387; //@line 22159
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 22160
   HEAP32[$37 >> 2] = $2; //@line 22161
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 22162
   HEAP32[$38 >> 2] = $4; //@line 22163
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 22164
   HEAP32[$39 >> 2] = $6; //@line 22165
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 22166
   HEAP32[$40 >> 2] = $8; //@line 22167
   $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 22168
   HEAP32[$41 >> 2] = $10; //@line 22169
   $42 = $ReallocAsyncCtx3 + 24 | 0; //@line 22170
   HEAP32[$42 >> 2] = $12; //@line 22171
   $43 = $ReallocAsyncCtx3 + 28 | 0; //@line 22172
   HEAP32[$43 >> 2] = $14; //@line 22173
   sp = STACKTOP; //@line 22174
   STACKTOP = sp; //@line 22175
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _mbed_tracef(16, 13704, 13865, $12); //@line 22181
  HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0) >> 2] = 4; //@line 22184
  $49 = HEAP8[$2 >> 0] | 16; //@line 22186
  HEAP8[$2 >> 0] = $49; //@line 22187
  $51 = $49; //@line 22188
 } else {
  $51 = HEAP8[$2 >> 0] | 0; //@line 22191
 }
 $50 = $51 & -33; //@line 22193
 HEAP8[$2 >> 0] = $50; //@line 22194
 do {
  if (!($50 & 2)) {
   $85 = $50; //@line 22199
  } else {
   $54 = $50 & -3; //@line 22201
   HEAP8[$2 >> 0] = $54; //@line 22202
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _mbed_tracef(16, 13704, 13723, $8); //@line 22207
    $59 = HEAP32[$4 + 1328 >> 2] | 0; //@line 22209
    HEAP32[$6 >> 2] = 279; //@line 22210
    HEAP32[$6 + 4 >> 2] = 0; //@line 22212
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 22213
    HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 22214
    HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 22214
    $60 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($59, $4, $$byval_copy) | 0; //@line 22215
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 389; //@line 22218
     $61 = $ReallocAsyncCtx8 + 4 | 0; //@line 22219
     HEAP32[$61 >> 2] = $2; //@line 22220
     $62 = $ReallocAsyncCtx8 + 8 | 0; //@line 22221
     HEAP32[$62 >> 2] = $4; //@line 22222
     $63 = $ReallocAsyncCtx8 + 12 | 0; //@line 22223
     HEAP32[$63 >> 2] = $6; //@line 22224
     sp = STACKTOP; //@line 22225
     STACKTOP = sp; //@line 22226
     return;
    }
    HEAP32[___async_retval >> 2] = $60; //@line 22229
    ___async_unwind = 0; //@line 22230
    HEAP32[$ReallocAsyncCtx8 >> 2] = 389; //@line 22231
    $61 = $ReallocAsyncCtx8 + 4 | 0; //@line 22232
    HEAP32[$61 >> 2] = $2; //@line 22233
    $62 = $ReallocAsyncCtx8 + 8 | 0; //@line 22234
    HEAP32[$62 >> 2] = $4; //@line 22235
    $63 = $ReallocAsyncCtx8 + 12 | 0; //@line 22236
    HEAP32[$63 >> 2] = $6; //@line 22237
    sp = STACKTOP; //@line 22238
    STACKTOP = sp; //@line 22239
    return;
   }
   if ($54 & 4) {
    $83 = $54 & -5; //@line 22244
    HEAP8[$2 >> 0] = $83; //@line 22245
    $85 = $83; //@line 22246
    break;
   }
   $68 = HEAP32[$4 + 1324 >> 2] | 0; //@line 22250
   $69 = $68 + 16 | 0; //@line 22251
   $71 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 22253
   $72 = $68 + 28 | 0; //@line 22254
   $73 = HEAP32[$72 >> 2] | 0; //@line 22255
   if (!$73) {
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 22258
    _mbed_assert_internal(15615, 15620, 1102); //@line 22259
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 391; //@line 22262
     $75 = $ReallocAsyncCtx13 + 4 | 0; //@line 22263
     HEAP32[$75 >> 2] = $72; //@line 22264
     $76 = $ReallocAsyncCtx13 + 8 | 0; //@line 22265
     HEAP32[$76 >> 2] = $69; //@line 22266
     $77 = $ReallocAsyncCtx13 + 12 | 0; //@line 22267
     HEAP32[$77 >> 2] = $71; //@line 22268
     $78 = $ReallocAsyncCtx13 + 16 | 0; //@line 22269
     HEAP32[$78 >> 2] = $2; //@line 22270
     $79 = $ReallocAsyncCtx13 + 20 | 0; //@line 22271
     HEAP32[$79 >> 2] = $4; //@line 22272
     sp = STACKTOP; //@line 22273
     STACKTOP = sp; //@line 22274
     return;
    }
    ___async_unwind = 0; //@line 22276
    HEAP32[$ReallocAsyncCtx13 >> 2] = 391; //@line 22277
    $75 = $ReallocAsyncCtx13 + 4 | 0; //@line 22278
    HEAP32[$75 >> 2] = $72; //@line 22279
    $76 = $ReallocAsyncCtx13 + 8 | 0; //@line 22280
    HEAP32[$76 >> 2] = $69; //@line 22281
    $77 = $ReallocAsyncCtx13 + 12 | 0; //@line 22282
    HEAP32[$77 >> 2] = $71; //@line 22283
    $78 = $ReallocAsyncCtx13 + 16 | 0; //@line 22284
    HEAP32[$78 >> 2] = $2; //@line 22285
    $79 = $ReallocAsyncCtx13 + 20 | 0; //@line 22286
    HEAP32[$79 >> 2] = $4; //@line 22287
    sp = STACKTOP; //@line 22288
    STACKTOP = sp; //@line 22289
    return;
   } else {
    $80 = HEAP32[$73 >> 2] | 0; //@line 22291
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 22292
    FUNCTION_TABLE_vii[$80 & 31]($69, $71); //@line 22293
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 392; //@line 22296
     $81 = $ReallocAsyncCtx4 + 4 | 0; //@line 22297
     HEAP32[$81 >> 2] = $2; //@line 22298
     $82 = $ReallocAsyncCtx4 + 8 | 0; //@line 22299
     HEAP32[$82 >> 2] = $4; //@line 22300
     sp = STACKTOP; //@line 22301
     STACKTOP = sp; //@line 22302
     return;
    }
    ___async_unwind = 0; //@line 22304
    HEAP32[$ReallocAsyncCtx4 >> 2] = 392; //@line 22305
    $81 = $ReallocAsyncCtx4 + 4 | 0; //@line 22306
    HEAP32[$81 >> 2] = $2; //@line 22307
    $82 = $ReallocAsyncCtx4 + 8 | 0; //@line 22308
    HEAP32[$82 >> 2] = $4; //@line 22309
    sp = STACKTOP; //@line 22310
    STACKTOP = sp; //@line 22311
    return;
   }
  }
 } while (0);
 if (!($85 & 16)) {
  STACKTOP = sp; //@line 22318
  return;
 }
 HEAP8[$2 >> 0] = $85 & -17; //@line 22321
 $89 = HEAP32[$4 + 1324 >> 2] | 0; //@line 22323
 $90 = $89 + 48 | 0; //@line 22324
 $92 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 22326
 $93 = $89 + 60 | 0; //@line 22327
 $94 = HEAP32[$93 >> 2] | 0; //@line 22328
 if (!$94) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 22331
  _mbed_assert_internal(15615, 15620, 1102); //@line 22332
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 393; //@line 22335
   $96 = $ReallocAsyncCtx12 + 4 | 0; //@line 22336
   HEAP32[$96 >> 2] = $93; //@line 22337
   $97 = $ReallocAsyncCtx12 + 8 | 0; //@line 22338
   HEAP32[$97 >> 2] = $90; //@line 22339
   $98 = $ReallocAsyncCtx12 + 12 | 0; //@line 22340
   HEAP32[$98 >> 2] = $92; //@line 22341
   sp = STACKTOP; //@line 22342
   STACKTOP = sp; //@line 22343
   return;
  }
  ___async_unwind = 0; //@line 22345
  HEAP32[$ReallocAsyncCtx12 >> 2] = 393; //@line 22346
  $96 = $ReallocAsyncCtx12 + 4 | 0; //@line 22347
  HEAP32[$96 >> 2] = $93; //@line 22348
  $97 = $ReallocAsyncCtx12 + 8 | 0; //@line 22349
  HEAP32[$97 >> 2] = $90; //@line 22350
  $98 = $ReallocAsyncCtx12 + 12 | 0; //@line 22351
  HEAP32[$98 >> 2] = $92; //@line 22352
  sp = STACKTOP; //@line 22353
  STACKTOP = sp; //@line 22354
  return;
 } else {
  $99 = HEAP32[$94 >> 2] | 0; //@line 22356
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 22357
  FUNCTION_TABLE_vii[$99 & 31]($90, $92); //@line 22358
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 394; //@line 22361
   sp = STACKTOP; //@line 22362
   STACKTOP = sp; //@line 22363
   return;
  }
  ___async_unwind = 0; //@line 22365
  HEAP32[$ReallocAsyncCtx5 >> 2] = 394; //@line 22366
  sp = STACKTOP; //@line 22367
  STACKTOP = sp; //@line 22368
  return;
 }
}
function _twoway_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0166 = 0, $$0168 = 0, $$0169 = 0, $$0169$be = 0, $$0170 = 0, $$0175$ph$ph$lcssa216 = 0, $$0175$ph$ph$lcssa216328 = 0, $$0175$ph$ph254 = 0, $$0179242 = 0, $$0183$ph197$ph253 = 0, $$0183$ph197248 = 0, $$0183$ph260 = 0, $$0185$ph$lcssa = 0, $$0185$ph$lcssa327 = 0, $$0185$ph259 = 0, $$0187219$ph325326 = 0, $$0187263 = 0, $$1176$$0175 = 0, $$1176$ph$ph$lcssa208 = 0, $$1176$ph$ph233 = 0, $$1180222 = 0, $$1184$ph193$ph232 = 0, $$1184$ph193227 = 0, $$1184$ph239 = 0, $$1186$$0185 = 0, $$1186$ph$lcssa = 0, $$1186$ph238 = 0, $$2181$sink = 0, $$3 = 0, $$3173 = 0, $$3178 = 0, $$3182221 = 0, $$4 = 0, $$pr = 0, $10 = 0, $105 = 0, $111 = 0, $113 = 0, $118 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $2 = 0, $23 = 0, $25 = 0, $27 = 0, $3 = 0, $32 = 0, $34 = 0, $37 = 0, $4 = 0, $41 = 0, $45 = 0, $50 = 0, $52 = 0, $53 = 0, $56 = 0, $60 = 0, $68 = 0, $70 = 0, $74 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $83 = 0, $86 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15015
 STACKTOP = STACKTOP + 1056 | 0; //@line 15016
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1056); //@line 15016
 $2 = sp + 1024 | 0; //@line 15017
 $3 = sp; //@line 15018
 HEAP32[$2 >> 2] = 0; //@line 15019
 HEAP32[$2 + 4 >> 2] = 0; //@line 15019
 HEAP32[$2 + 8 >> 2] = 0; //@line 15019
 HEAP32[$2 + 12 >> 2] = 0; //@line 15019
 HEAP32[$2 + 16 >> 2] = 0; //@line 15019
 HEAP32[$2 + 20 >> 2] = 0; //@line 15019
 HEAP32[$2 + 24 >> 2] = 0; //@line 15019
 HEAP32[$2 + 28 >> 2] = 0; //@line 15019
 $4 = HEAP8[$1 >> 0] | 0; //@line 15020
 L1 : do {
  if (!($4 << 24 >> 24)) {
   $$0175$ph$ph$lcssa216328 = 1; //@line 15024
   $$0185$ph$lcssa327 = -1; //@line 15024
   $$0187219$ph325326 = 0; //@line 15024
   $$1176$ph$ph$lcssa208 = 1; //@line 15024
   $$1186$ph$lcssa = -1; //@line 15024
   label = 26; //@line 15025
  } else {
   $$0187263 = 0; //@line 15027
   $10 = $4; //@line 15027
   do {
    if (!(HEAP8[$0 + $$0187263 >> 0] | 0)) {
     $$3 = 0; //@line 15033
     break L1;
    }
    $14 = $2 + ((($10 & 255) >>> 5 & 255) << 2) | 0; //@line 15041
    HEAP32[$14 >> 2] = HEAP32[$14 >> 2] | 1 << ($10 & 31); //@line 15044
    $$0187263 = $$0187263 + 1 | 0; //@line 15045
    HEAP32[$3 + (($10 & 255) << 2) >> 2] = $$0187263; //@line 15048
    $10 = HEAP8[$1 + $$0187263 >> 0] | 0; //@line 15050
   } while ($10 << 24 >> 24 != 0);
   $23 = $$0187263 >>> 0 > 1; //@line 15058
   if ($23) {
    $$0183$ph260 = 0; //@line 15060
    $$0185$ph259 = -1; //@line 15060
    $130 = 1; //@line 15060
    L6 : while (1) {
     $$0175$ph$ph254 = 1; //@line 15062
     $$0183$ph197$ph253 = $$0183$ph260; //@line 15062
     $131 = $130; //@line 15062
     while (1) {
      $$0183$ph197248 = $$0183$ph197$ph253; //@line 15064
      $132 = $131; //@line 15064
      L10 : while (1) {
       $$0179242 = 1; //@line 15066
       $25 = $132; //@line 15066
       while (1) {
        $32 = HEAP8[$1 + ($$0179242 + $$0185$ph259) >> 0] | 0; //@line 15070
        $34 = HEAP8[$1 + $25 >> 0] | 0; //@line 15072
        if ($32 << 24 >> 24 != $34 << 24 >> 24) {
         break L10;
        }
        if (($$0179242 | 0) == ($$0175$ph$ph254 | 0)) {
         break;
        }
        $$0179242 = $$0179242 + 1 | 0; //@line 15078
        $27 = $$0179242 + $$0183$ph197248 | 0; //@line 15082
        if ($27 >>> 0 >= $$0187263 >>> 0) {
         $$0175$ph$ph$lcssa216 = $$0175$ph$ph254; //@line 15087
         $$0185$ph$lcssa = $$0185$ph259; //@line 15087
         break L6;
        } else {
         $25 = $27; //@line 15085
        }
       }
       $37 = $$0175$ph$ph254 + $$0183$ph197248 | 0; //@line 15091
       $132 = $37 + 1 | 0; //@line 15092
       if ($132 >>> 0 >= $$0187263 >>> 0) {
        $$0175$ph$ph$lcssa216 = $$0175$ph$ph254; //@line 15097
        $$0185$ph$lcssa = $$0185$ph259; //@line 15097
        break L6;
       } else {
        $$0183$ph197248 = $37; //@line 15095
       }
      }
      $41 = $25 - $$0185$ph259 | 0; //@line 15102
      if (($32 & 255) <= ($34 & 255)) {
       break;
      }
      $131 = $25 + 1 | 0; //@line 15106
      if ($131 >>> 0 >= $$0187263 >>> 0) {
       $$0175$ph$ph$lcssa216 = $41; //@line 15111
       $$0185$ph$lcssa = $$0185$ph259; //@line 15111
       break L6;
      } else {
       $$0175$ph$ph254 = $41; //@line 15109
       $$0183$ph197$ph253 = $25; //@line 15109
      }
     }
     $130 = $$0183$ph197248 + 2 | 0; //@line 15116
     if ($130 >>> 0 >= $$0187263 >>> 0) {
      $$0175$ph$ph$lcssa216 = 1; //@line 15121
      $$0185$ph$lcssa = $$0183$ph197248; //@line 15121
      break;
     } else {
      $$0183$ph260 = $$0183$ph197248 + 1 | 0; //@line 15119
      $$0185$ph259 = $$0183$ph197248; //@line 15119
     }
    }
    if ($23) {
     $$1184$ph239 = 0; //@line 15126
     $$1186$ph238 = -1; //@line 15126
     $133 = 1; //@line 15126
     while (1) {
      $$1176$ph$ph233 = 1; //@line 15128
      $$1184$ph193$ph232 = $$1184$ph239; //@line 15128
      $135 = $133; //@line 15128
      while (1) {
       $$1184$ph193227 = $$1184$ph193$ph232; //@line 15130
       $134 = $135; //@line 15130
       L25 : while (1) {
        $$1180222 = 1; //@line 15132
        $52 = $134; //@line 15132
        while (1) {
         $50 = HEAP8[$1 + ($$1180222 + $$1186$ph238) >> 0] | 0; //@line 15136
         $53 = HEAP8[$1 + $52 >> 0] | 0; //@line 15138
         if ($50 << 24 >> 24 != $53 << 24 >> 24) {
          break L25;
         }
         if (($$1180222 | 0) == ($$1176$ph$ph233 | 0)) {
          break;
         }
         $$1180222 = $$1180222 + 1 | 0; //@line 15144
         $45 = $$1180222 + $$1184$ph193227 | 0; //@line 15148
         if ($45 >>> 0 >= $$0187263 >>> 0) {
          $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15153
          $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15153
          $$0187219$ph325326 = $$0187263; //@line 15153
          $$1176$ph$ph$lcssa208 = $$1176$ph$ph233; //@line 15153
          $$1186$ph$lcssa = $$1186$ph238; //@line 15153
          label = 26; //@line 15154
          break L1;
         } else {
          $52 = $45; //@line 15151
         }
        }
        $56 = $$1176$ph$ph233 + $$1184$ph193227 | 0; //@line 15158
        $134 = $56 + 1 | 0; //@line 15159
        if ($134 >>> 0 >= $$0187263 >>> 0) {
         $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15164
         $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15164
         $$0187219$ph325326 = $$0187263; //@line 15164
         $$1176$ph$ph$lcssa208 = $$1176$ph$ph233; //@line 15164
         $$1186$ph$lcssa = $$1186$ph238; //@line 15164
         label = 26; //@line 15165
         break L1;
        } else {
         $$1184$ph193227 = $56; //@line 15162
        }
       }
       $60 = $52 - $$1186$ph238 | 0; //@line 15170
       if (($50 & 255) >= ($53 & 255)) {
        break;
       }
       $135 = $52 + 1 | 0; //@line 15174
       if ($135 >>> 0 >= $$0187263 >>> 0) {
        $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15179
        $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15179
        $$0187219$ph325326 = $$0187263; //@line 15179
        $$1176$ph$ph$lcssa208 = $60; //@line 15179
        $$1186$ph$lcssa = $$1186$ph238; //@line 15179
        label = 26; //@line 15180
        break L1;
       } else {
        $$1176$ph$ph233 = $60; //@line 15177
        $$1184$ph193$ph232 = $52; //@line 15177
       }
      }
      $133 = $$1184$ph193227 + 2 | 0; //@line 15185
      if ($133 >>> 0 >= $$0187263 >>> 0) {
       $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15190
       $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15190
       $$0187219$ph325326 = $$0187263; //@line 15190
       $$1176$ph$ph$lcssa208 = 1; //@line 15190
       $$1186$ph$lcssa = $$1184$ph193227; //@line 15190
       label = 26; //@line 15191
       break;
      } else {
       $$1184$ph239 = $$1184$ph193227 + 1 | 0; //@line 15188
       $$1186$ph238 = $$1184$ph193227; //@line 15188
      }
     }
    } else {
     $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15196
     $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15196
     $$0187219$ph325326 = $$0187263; //@line 15196
     $$1176$ph$ph$lcssa208 = 1; //@line 15196
     $$1186$ph$lcssa = -1; //@line 15196
     label = 26; //@line 15197
    }
   } else {
    $$0175$ph$ph$lcssa216328 = 1; //@line 15200
    $$0185$ph$lcssa327 = -1; //@line 15200
    $$0187219$ph325326 = $$0187263; //@line 15200
    $$1176$ph$ph$lcssa208 = 1; //@line 15200
    $$1186$ph$lcssa = -1; //@line 15200
    label = 26; //@line 15201
   }
  }
 } while (0);
 L35 : do {
  if ((label | 0) == 26) {
   $68 = ($$1186$ph$lcssa + 1 | 0) >>> 0 > ($$0185$ph$lcssa327 + 1 | 0) >>> 0; //@line 15209
   $$1176$$0175 = $68 ? $$1176$ph$ph$lcssa208 : $$0175$ph$ph$lcssa216328; //@line 15210
   $$1186$$0185 = $68 ? $$1186$ph$lcssa : $$0185$ph$lcssa327; //@line 15211
   $70 = $$1186$$0185 + 1 | 0; //@line 15213
   if (!(_memcmp($1, $1 + $$1176$$0175 | 0, $70) | 0)) {
    $$0168 = $$0187219$ph325326 - $$1176$$0175 | 0; //@line 15218
    $$3178 = $$1176$$0175; //@line 15218
   } else {
    $74 = $$0187219$ph325326 - $$1186$$0185 + -1 | 0; //@line 15221
    $$0168 = 0; //@line 15225
    $$3178 = ($$1186$$0185 >>> 0 > $74 >>> 0 ? $$1186$$0185 : $74) + 1 | 0; //@line 15225
   }
   $78 = $$0187219$ph325326 | 63; //@line 15227
   $79 = $$0187219$ph325326 + -1 | 0; //@line 15228
   $80 = ($$0168 | 0) != 0; //@line 15229
   $81 = $$0187219$ph325326 - $$3178 | 0; //@line 15230
   $$0166 = $0; //@line 15231
   $$0169 = 0; //@line 15231
   $$0170 = $0; //@line 15231
   while (1) {
    $83 = $$0166; //@line 15234
    do {
     if (($$0170 - $83 | 0) >>> 0 < $$0187219$ph325326 >>> 0) {
      $86 = _memchr($$0170, 0, $78) | 0; //@line 15239
      if (!$86) {
       $$3173 = $$0170 + $78 | 0; //@line 15243
       break;
      } else {
       if (($86 - $83 | 0) >>> 0 < $$0187219$ph325326 >>> 0) {
        $$3 = 0; //@line 15250
        break L35;
       } else {
        $$3173 = $86; //@line 15253
        break;
       }
      }
     } else {
      $$3173 = $$0170; //@line 15258
     }
    } while (0);
    $93 = HEAP8[$$0166 + $79 >> 0] | 0; //@line 15262
    L49 : do {
     if (!(1 << ($93 & 31) & HEAP32[$2 + ((($93 & 255) >>> 5 & 255) << 2) >> 2])) {
      $$0169$be = 0; //@line 15274
      $$2181$sink = $$0187219$ph325326; //@line 15274
     } else {
      $105 = $$0187219$ph325326 - (HEAP32[$3 + (($93 & 255) << 2) >> 2] | 0) | 0; //@line 15279
      if ($105 | 0) {
       $$0169$be = 0; //@line 15287
       $$2181$sink = $80 & ($$0169 | 0) != 0 & $105 >>> 0 < $$3178 >>> 0 ? $81 : $105; //@line 15287
       break;
      }
      $111 = $70 >>> 0 > $$0169 >>> 0 ? $70 : $$0169; //@line 15291
      $113 = HEAP8[$1 + $111 >> 0] | 0; //@line 15293
      L54 : do {
       if (!($113 << 24 >> 24)) {
        $$4 = $70; //@line 15297
       } else {
        $$3182221 = $111; //@line 15299
        $$pr = $113; //@line 15299
        while (1) {
         if ($$pr << 24 >> 24 != (HEAP8[$$0166 + $$3182221 >> 0] | 0)) {
          break;
         }
         $118 = $$3182221 + 1 | 0; //@line 15307
         $$pr = HEAP8[$1 + $118 >> 0] | 0; //@line 15309
         if (!($$pr << 24 >> 24)) {
          $$4 = $70; //@line 15312
          break L54;
         } else {
          $$3182221 = $118; //@line 15315
         }
        }
        $$0169$be = 0; //@line 15319
        $$2181$sink = $$3182221 - $$1186$$0185 | 0; //@line 15319
        break L49;
       }
      } while (0);
      while (1) {
       if ($$4 >>> 0 <= $$0169 >>> 0) {
        $$3 = $$0166; //@line 15326
        break L35;
       }
       $$4 = $$4 + -1 | 0; //@line 15329
       if ((HEAP8[$1 + $$4 >> 0] | 0) != (HEAP8[$$0166 + $$4 >> 0] | 0)) {
        $$0169$be = $$0168; //@line 15338
        $$2181$sink = $$3178; //@line 15338
        break;
       }
      }
     }
    } while (0);
    $$0166 = $$0166 + $$2181$sink | 0; //@line 15345
    $$0169 = $$0169$be; //@line 15345
    $$0170 = $$3173; //@line 15345
   }
  }
 } while (0);
 STACKTOP = sp; //@line 15349
 return $$3 | 0; //@line 15349
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$080 = 0, $100 = 0, $118 = 0, $12 = 0, $123 = 0, $128 = 0, $133 = 0, $15 = 0, $17 = 0, $19 = 0, $21 = 0, $36 = 0, $4 = 0, $40 = 0, $44 = 0, $55 = 0, $60 = 0, $61 = 0, $70 = 0, $73 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $89 = 0, $94 = 0, $95 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 20321
 L1 : do {
  if (!$1) {
   $$080 = -1003; //@line 20325
  } else {
   $4 = HEAP32[$0 >> 2] | 0; //@line 20327
   if (!$4) {
    $$080 = -1003; //@line 20330
   } else {
    do {
     switch (HEAP32[$1 >> 2] | 0) {
     case 0:
      {
       $8 = HEAP32[$1 + 4 >> 2] | 0; //@line 20337
       HEAP32[$2 >> 2] = $8; //@line 20338
       switch ($8 | 0) {
       case 0:
        {
         $AsyncCtx19 = _emscripten_alloc_async_context(4, sp) | 0; //@line 20341
         __ZN7LoRaPHY18put_radio_to_sleepEv($4); //@line 20342
         if (___async) {
          HEAP32[$AsyncCtx19 >> 2] = 506; //@line 20345
          sp = STACKTOP; //@line 20346
          return 0; //@line 20347
         } else {
          _emscripten_free_async_context($AsyncCtx19 | 0); //@line 20349
          $$080 = 0; //@line 20350
          break L1;
         }
         break;
        }
       case 2:
        {
         break;
        }
       default:
        {
         $$080 = 0; //@line 20359
         break L1;
        }
       }
       HEAP8[$2 + 13 >> 0] = 0; //@line 20364
       $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 20365
       __ZN7LoRaPHY18put_radio_to_sleepEv($4); //@line 20366
       if (___async) {
        HEAP32[$AsyncCtx15 >> 2] = 507; //@line 20369
        HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 20371
        HEAP32[$AsyncCtx15 + 8 >> 2] = $2; //@line 20373
        sp = STACKTOP; //@line 20374
        return 0; //@line 20375
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 20377
       $12 = HEAP32[$0 >> 2] | 0; //@line 20378
       $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] | 0; //@line 20381
       $17 = HEAP8[$2 + 776 >> 0] | 0; //@line 20383
       $19 = HEAP8[$2 + 744 >> 0] | 0; //@line 20385
       $21 = HEAP32[$2 + 740 >> 2] | 0; //@line 20387
       $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 20389
       FUNCTION_TABLE_viiiii[$15 & 7]($12, $17, $19, $21, $2 + 824 | 0); //@line 20390
       if (___async) {
        HEAP32[$AsyncCtx >> 2] = 508; //@line 20393
        sp = STACKTOP; //@line 20394
        return 0; //@line 20395
       } else {
        _emscripten_free_async_context($AsyncCtx | 0); //@line 20397
        $$080 = 0; //@line 20398
        break L1;
       }
       break;
      }
     case 1:
      {
       HEAP8[$2 + 12 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 20407
       $$080 = 0; //@line 20408
       break L1;
       break;
      }
     case 2:
      {
       HEAP8[$2 + 796 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 20416
       $$080 = 0; //@line 20417
       break L1;
       break;
      }
     case 3:
      {
       HEAP32[$2 + 588 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 20425
       $$080 = 0; //@line 20426
       break L1;
       break;
      }
     case 4:
      {
       HEAP32[$2 + 592 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 20434
       $$080 = 0; //@line 20435
       break L1;
       break;
      }
     case 5:
      {
       $36 = HEAP32[$1 + 4 >> 2] | 0; //@line 20441
       if (!$36) {
        $$080 = -1003; //@line 20444
        break L1;
       }
       dest = $2 + 552 | 0; //@line 20448
       src = $36; //@line 20448
       stop = dest + 16 | 0; //@line 20448
       do {
        HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 20448
        dest = dest + 1 | 0; //@line 20448
        src = src + 1 | 0; //@line 20448
       } while ((dest | 0) < (stop | 0));
       $$080 = 0; //@line 20449
       break L1;
       break;
      }
     case 6:
      {
       $40 = HEAP32[$1 + 4 >> 2] | 0; //@line 20455
       if (!$40) {
        $$080 = -1003; //@line 20458
        break L1;
       }
       dest = $2 + 568 | 0; //@line 20462
       src = $40; //@line 20462
       stop = dest + 16 | 0; //@line 20462
       do {
        HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 20462
        dest = dest + 1 | 0; //@line 20462
        src = src + 1 | 0; //@line 20462
       } while ((dest | 0) < (stop | 0));
       $$080 = 0; //@line 20463
       break L1;
       break;
      }
     case 7:
      {
       $44 = HEAP8[$1 + 4 >> 0] | 0; //@line 20469
       HEAP8[$2 + 8 >> 0] = $44; //@line 20472
       $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 20473
       __ZN7LoRaPHY25setup_public_network_modeEb($4, $44 << 24 >> 24 != 0); //@line 20474
       if (___async) {
        HEAP32[$AsyncCtx7 >> 2] = 509; //@line 20477
        sp = STACKTOP; //@line 20478
        return 0; //@line 20479
       } else {
        _emscripten_free_async_context($AsyncCtx7 | 0); //@line 20481
        $$080 = 0; //@line 20482
        break L1;
       }
       break;
      }
     case 8:
      {
       HEAP8[$2 + 9 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 20491
       $$080 = 0; //@line 20492
       break L1;
       break;
      }
     case 10:
      {
       if (!(__ZN7LoRaPHY18verify_rx_datarateEh($4, HEAP8[$1 + 8 >> 0] | 0) | 0)) {
        $$080 = -1003; //@line 20501
        break L1;
       }
       $55 = $1 + 4 | 0; //@line 20506
       $60 = HEAP32[$55 + 4 >> 2] | 0; //@line 20511
       $61 = $2 + 772 | 0; //@line 20512
       HEAP32[$61 >> 2] = HEAP32[$55 >> 2]; //@line 20514
       HEAP32[$61 + 4 >> 2] = $60; //@line 20517
       if ((HEAP32[$2 >> 2] | 0) != 2) {
        $$080 = 0; //@line 20521
        break L1;
       }
       if (!(HEAP8[$2 + 12 >> 0] | 0)) {
        $$080 = 0; //@line 20528
        break L1;
       }
       $70 = HEAP32[$0 >> 2] | 0; //@line 20531
       $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 20532
       __ZN7LoRaPHY18put_radio_to_sleepEv($70); //@line 20533
       if (___async) {
        HEAP32[$AsyncCtx11 >> 2] = 510; //@line 20536
        HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 20538
        HEAP32[$AsyncCtx11 + 8 >> 2] = $2; //@line 20540
        sp = STACKTOP; //@line 20541
        return 0; //@line 20542
       }
       _emscripten_free_async_context($AsyncCtx11 | 0); //@line 20544
       $73 = HEAP32[$0 >> 2] | 0; //@line 20545
       $76 = HEAP32[(HEAP32[$73 >> 2] | 0) + 28 >> 2] | 0; //@line 20548
       $78 = HEAP8[$2 + 776 >> 0] | 0; //@line 20550
       $80 = HEAP8[$2 + 744 >> 0] | 0; //@line 20552
       $82 = HEAP32[$2 + 740 >> 2] | 0; //@line 20554
       $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 20556
       FUNCTION_TABLE_viiiii[$76 & 7]($73, $78, $80, $82, $2 + 824 | 0); //@line 20557
       if (___async) {
        HEAP32[$AsyncCtx3 >> 2] = 511; //@line 20560
        sp = STACKTOP; //@line 20561
        return 0; //@line 20562
       } else {
        _emscripten_free_async_context($AsyncCtx3 | 0); //@line 20564
        $$080 = 0; //@line 20565
        break L1;
       }
       break;
      }
     case 11:
      {
       if (!(__ZN7LoRaPHY18verify_rx_datarateEh($4, HEAP8[$1 + 8 >> 0] | 0) | 0)) {
        $$080 = -1003; //@line 20575
        break L1;
       }
       $89 = $1 + 4 | 0; //@line 20580
       $94 = HEAP32[$89 + 4 >> 2] | 0; //@line 20585
       $95 = $2 + 772 | 0; //@line 20586
       HEAP32[$95 >> 2] = HEAP32[$89 >> 2]; //@line 20588
       HEAP32[$95 + 4 >> 2] = $94; //@line 20591
       $$080 = 0; //@line 20592
       break L1;
       break;
      }
     case 29:
      {
       HEAP32[$2 + 788 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 20600
       $$080 = 0; //@line 20601
       break L1;
       break;
      }
     case 28:
      {
       HEAP8[$2 + 744 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 20609
       $$080 = 0; //@line 20610
       break L1;
       break;
      }
     case 14:
      {
       $100 = HEAP8[$1 + 4 >> 0] | 0; //@line 20616
       if (($100 + -1 & 255) >= 15) {
        $$080 = -1003; //@line 20620
        break L1;
       }
       HEAP8[$2 + 768 >> 0] = $100; //@line 20624
       $$080 = 0; //@line 20625
       break L1;
       break;
      }
     case 15:
      {
       HEAP32[$2 + 748 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 20633
       $$080 = 0; //@line 20634
       break L1;
       break;
      }
     case 16:
      {
       HEAP32[$2 + 752 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 20642
       $$080 = 0; //@line 20643
       break L1;
       break;
      }
     case 17:
      {
       HEAP32[$2 + 756 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 20651
       $$080 = 0; //@line 20652
       break L1;
       break;
      }
     case 18:
      {
       HEAP32[$2 + 760 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 20660
       $$080 = 0; //@line 20661
       break L1;
       break;
      }
     case 19:
      {
       HEAP32[$2 + 764 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 20669
       $$080 = 0; //@line 20670
       break L1;
       break;
      }
     case 20:
      {
       $118 = $1 + 4 | 0; //@line 20675
       if (!(__ZN7LoRaPHY18verify_tx_datarateEhb($4, HEAP8[$118 >> 0] | 0, 1) | 0)) {
        $$080 = -1003; //@line 20679
        break L1;
       }
       HEAP8[$2 + 737 >> 0] = HEAP8[$118 >> 0] | 0; //@line 20684
       $$080 = 0; //@line 20685
       break L1;
       break;
      }
     case 21:
      {
       $123 = $1 + 4 | 0; //@line 20690
       if (!(__ZN7LoRaPHY18verify_tx_datarateEhb($4, HEAP8[$123 >> 0] | 0, 0) | 0)) {
        $$080 = -1003; //@line 20694
        break L1;
       }
       HEAP8[$2 + 737 >> 0] = HEAP8[$123 >> 0] | 0; //@line 20699
       $$080 = 0; //@line 20700
       break L1;
       break;
      }
     case 23:
      {
       $128 = $1 + 4 | 0; //@line 20705
       if (!(__ZN7LoRaPHY15verify_tx_powerEh($4, HEAP8[$128 >> 0] | 0) | 0)) {
        $$080 = -1003; //@line 20709
        break L1;
       }
       HEAP8[$2 + 736 >> 0] = HEAP8[$128 >> 0] | 0; //@line 20714
       $$080 = 0; //@line 20715
       break L1;
       break;
      }
     case 22:
      {
       $133 = $1 + 4 | 0; //@line 20720
       if (!(__ZN7LoRaPHY15verify_tx_powerEh($4, HEAP8[$133 >> 0] | 0) | 0)) {
        $$080 = -1003; //@line 20724
        break L1;
       }
       HEAP8[$2 + 736 >> 0] = HEAP8[$133 >> 0] | 0; //@line 20729
       $$080 = 0; //@line 20730
       break L1;
       break;
      }
     case 24:
      {
       HEAP32[$2 + 596 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 20738
       $$080 = 0; //@line 20739
       break L1;
       break;
      }
     case 25:
      {
       HEAP32[$2 + 600 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 20747
       $$080 = 0; //@line 20748
       break L1;
       break;
      }
     case 27:
      {
       HEAP32[$2 + 740 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 20756
       $$080 = 0; //@line 20757
       break L1;
       break;
      }
     default:
      {
       $$080 = -1002; //@line 20762
       break L1;
      }
     }
    } while (0);
   }
  }
 } while (0);
 return $$080 | 0; //@line 20770
}
function _mbedtls_gcm_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0$i = 0, $108 = 0, $110 = 0, $115 = 0, $120 = 0, $125 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $141 = 0, $143 = 0, $148 = 0, $153 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $164 = 0, $166 = 0, $171 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $182 = 0, $183 = 0, $184 = 0, $187 = 0, $189 = 0, $194 = 0, $198 = 0, $199 = 0, $201 = 0, $205 = 0, $206 = 0, $208 = 0, $212 = 0, $213 = 0, $215 = 0, $219 = 0, $220 = 0, $222 = 0, $226 = 0, $227 = 0, $229 = 0, $233 = 0, $234 = 0, $236 = 0, $240 = 0, $241 = 0, $243 = 0, $247 = 0, $248 = 0, $250 = 0, $257 = 0, $26 = 0, $264 = 0, $271 = 0, $278 = 0, $285 = 0, $292 = 0, $299 = 0, $306 = 0, $313 = 0, $32 = 0, $320 = 0, $327 = 0, $334 = 0, $341 = 0, $348 = 0, $4 = 0, $5 = 0, $54 = 0, $6 = 0, $72 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 4629
 STACKTOP = STACKTOP + 32 | 0; //@line 4630
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4630
 $4 = sp + 8 | 0; //@line 4631
 $5 = sp; //@line 4632
 $6 = _mbedtls_cipher_info_from_values($1, $3, 1) | 0; //@line 4633
 if (!$6) {
  $$0 = -20; //@line 4636
  STACKTOP = sp; //@line 4637
  return $$0 | 0; //@line 4637
 }
 if ((HEAP32[$6 + 24 >> 2] | 0) != 16) {
  $$0 = -20; //@line 4643
  STACKTOP = sp; //@line 4644
  return $$0 | 0; //@line 4644
 }
 $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 4646
 _mbedtls_cipher_free($0); //@line 4647
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 590; //@line 4650
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 4652
  HEAP32[$AsyncCtx11 + 8 >> 2] = $6; //@line 4654
  HEAP32[$AsyncCtx11 + 12 >> 2] = $2; //@line 4656
  HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 4658
  HEAP32[$AsyncCtx11 + 20 >> 2] = $4; //@line 4660
  HEAP32[$AsyncCtx11 + 24 >> 2] = $5; //@line 4662
  HEAP32[$AsyncCtx11 + 28 >> 2] = $0; //@line 4664
  sp = STACKTOP; //@line 4665
  STACKTOP = sp; //@line 4666
  return 0; //@line 4666
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 4668
 $AsyncCtx7 = _emscripten_alloc_async_context(28, sp) | 0; //@line 4669
 $18 = _mbedtls_cipher_setup($0, $6) | 0; //@line 4670
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 591; //@line 4673
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 4675
  HEAP32[$AsyncCtx7 + 8 >> 2] = $2; //@line 4677
  HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 4679
  HEAP32[$AsyncCtx7 + 16 >> 2] = $4; //@line 4681
  HEAP32[$AsyncCtx7 + 20 >> 2] = $5; //@line 4683
  HEAP32[$AsyncCtx7 + 24 >> 2] = $0; //@line 4685
  sp = STACKTOP; //@line 4686
  STACKTOP = sp; //@line 4687
  return 0; //@line 4687
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 4689
 if ($18 | 0) {
  $$0 = $18; //@line 4692
  STACKTOP = sp; //@line 4693
  return $$0 | 0; //@line 4693
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 4695
 $26 = _mbedtls_cipher_setkey($0, $2, $3, 1) | 0; //@line 4696
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 592; //@line 4699
  HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 4701
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 4703
  HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 4705
  HEAP32[$AsyncCtx3 + 16 >> 2] = $0; //@line 4707
  sp = STACKTOP; //@line 4708
  STACKTOP = sp; //@line 4709
  return 0; //@line 4709
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4711
 if ($26 | 0) {
  $$0 = $26; //@line 4714
  STACKTOP = sp; //@line 4715
  return $$0 | 0; //@line 4715
 }
 HEAP32[$5 >> 2] = 0; //@line 4717
 dest = $4; //@line 4718
 stop = dest + 16 | 0; //@line 4718
 do {
  HEAP8[dest >> 0] = 0; //@line 4718
  dest = dest + 1 | 0; //@line 4718
 } while ((dest | 0) < (stop | 0));
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 4719
 $32 = _mbedtls_cipher_update($0, $4, 16, $4, $5) | 0; //@line 4720
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 593; //@line 4723
  HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 4725
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 4727
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 4729
  HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 4731
  sp = STACKTOP; //@line 4732
  STACKTOP = sp; //@line 4733
  return 0; //@line 4733
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4735
 if (!$32) {
  $54 = (HEAPU8[$4 + 1 >> 0] | 0) << 16 | (HEAPU8[$4 >> 0] | 0) << 24 | (HEAPU8[$4 + 2 >> 0] | 0) << 8 | (HEAPU8[$4 + 3 >> 0] | 0); //@line 4754
  $72 = (HEAPU8[$4 + 5 >> 0] | 0) << 16 | (HEAPU8[$4 + 4 >> 0] | 0) << 24 | (HEAPU8[$4 + 6 >> 0] | 0) << 8 | (HEAPU8[$4 + 7 >> 0] | 0); //@line 4772
  $90 = (HEAPU8[$4 + 9 >> 0] | 0) << 16 | (HEAPU8[$4 + 8 >> 0] | 0) << 24 | (HEAPU8[$4 + 10 >> 0] | 0) << 8 | (HEAPU8[$4 + 11 >> 0] | 0); //@line 4790
  $108 = (HEAPU8[$4 + 13 >> 0] | 0) << 16 | (HEAPU8[$4 + 12 >> 0] | 0) << 24 | (HEAPU8[$4 + 14 >> 0] | 0) << 8 | (HEAPU8[$4 + 15 >> 0] | 0); //@line 4808
  $110 = $0 + 136 | 0; //@line 4810
  HEAP32[$110 >> 2] = $108; //@line 4812
  HEAP32[$110 + 4 >> 2] = $90; //@line 4815
  $115 = $0 + 264 | 0; //@line 4817
  HEAP32[$115 >> 2] = $72; //@line 4819
  HEAP32[$115 + 4 >> 2] = $54; //@line 4822
  $120 = $0 + 200 | 0; //@line 4824
  HEAP32[$120 >> 2] = 0; //@line 4826
  HEAP32[$120 + 4 >> 2] = 0; //@line 4829
  $125 = $0 + 72 | 0; //@line 4831
  HEAP32[$125 >> 2] = 0; //@line 4833
  HEAP32[$125 + 4 >> 2] = 0; //@line 4836
  $130 = _i64Subtract(0, 0, $108 & 1 | 0, 0) | 0; //@line 4838
  $132 = _bitshift64Shl($72 | 0, 0, 63) | 0; //@line 4840
  $133 = tempRet0; //@line 4841
  $134 = _bitshift64Lshr($108 | 0, $90 | 0, 1) | 0; //@line 4842
  $136 = $134 | $132; //@line 4844
  $137 = tempRet0 | $133; //@line 4845
  $138 = _bitshift64Lshr($72 | 0, $54 | 0, 1) | 0; //@line 4846
  $139 = tempRet0; //@line 4847
  $141 = $130 & -520093696 ^ $139; //@line 4849
  $143 = $0 + 104 | 0; //@line 4851
  HEAP32[$143 >> 2] = $136; //@line 4853
  HEAP32[$143 + 4 >> 2] = $137; //@line 4856
  $148 = $0 + 232 | 0; //@line 4858
  HEAP32[$148 >> 2] = $138; //@line 4860
  HEAP32[$148 + 4 >> 2] = $141; //@line 4863
  $153 = _i64Subtract(0, 0, $134 & 1 | 0, 0) | 0; //@line 4865
  $155 = _bitshift64Shl($138 | 0, $139 | 0, 63) | 0; //@line 4867
  $156 = tempRet0; //@line 4868
  $157 = _bitshift64Lshr($136 | 0, $137 | 0, 1) | 0; //@line 4869
  $159 = $157 | $155; //@line 4871
  $160 = tempRet0 | $156; //@line 4872
  $161 = _bitshift64Lshr($138 | 0, $141 | 0, 1) | 0; //@line 4873
  $162 = tempRet0; //@line 4874
  $164 = $153 & -520093696 ^ $162; //@line 4876
  $166 = $0 + 88 | 0; //@line 4878
  HEAP32[$166 >> 2] = $159; //@line 4880
  HEAP32[$166 + 4 >> 2] = $160; //@line 4883
  $171 = $0 + 216 | 0; //@line 4885
  HEAP32[$171 >> 2] = $161; //@line 4887
  HEAP32[$171 + 4 >> 2] = $164; //@line 4890
  $176 = _i64Subtract(0, 0, $157 & 1 | 0, 0) | 0; //@line 4892
  $178 = _bitshift64Shl($161 | 0, $162 | 0, 63) | 0; //@line 4894
  $179 = tempRet0; //@line 4895
  $180 = _bitshift64Lshr($159 | 0, $160 | 0, 1) | 0; //@line 4896
  $182 = $178 | $180; //@line 4898
  $183 = $179 | tempRet0; //@line 4899
  $184 = _bitshift64Lshr($161 | 0, $164 | 0, 1) | 0; //@line 4900
  $187 = $176 & -520093696 ^ tempRet0; //@line 4903
  $189 = $0 + 80 | 0; //@line 4905
  HEAP32[$189 >> 2] = $182; //@line 4907
  HEAP32[$189 + 4 >> 2] = $183; //@line 4910
  $194 = $0 + 208 | 0; //@line 4912
  HEAP32[$194 >> 2] = $184; //@line 4914
  HEAP32[$194 + 4 >> 2] = $187; //@line 4917
  $198 = $184 ^ $161; //@line 4918
  $199 = $187 ^ $164; //@line 4919
  $201 = $0 + 224 | 0; //@line 4921
  HEAP32[$201 >> 2] = $198; //@line 4923
  HEAP32[$201 + 4 >> 2] = $199; //@line 4926
  $205 = $182 ^ $159; //@line 4927
  $206 = $183 ^ $160; //@line 4928
  $208 = $0 + 96 | 0; //@line 4930
  HEAP32[$208 >> 2] = $205; //@line 4932
  HEAP32[$208 + 4 >> 2] = $206; //@line 4935
  $212 = $184 ^ $138; //@line 4936
  $213 = $187 ^ $141; //@line 4937
  $215 = $0 + 240 | 0; //@line 4939
  HEAP32[$215 >> 2] = $212; //@line 4941
  HEAP32[$215 + 4 >> 2] = $213; //@line 4944
  $219 = $182 ^ $136; //@line 4945
  $220 = $183 ^ $137; //@line 4946
  $222 = $0 + 112 | 0; //@line 4948
  HEAP32[$222 >> 2] = $219; //@line 4950
  HEAP32[$222 + 4 >> 2] = $220; //@line 4953
  $226 = $161 ^ $138; //@line 4954
  $227 = $164 ^ $141; //@line 4955
  $229 = $0 + 248 | 0; //@line 4957
  HEAP32[$229 >> 2] = $226; //@line 4959
  HEAP32[$229 + 4 >> 2] = $227; //@line 4962
  $233 = $159 ^ $136; //@line 4963
  $234 = $160 ^ $137; //@line 4964
  $236 = $0 + 120 | 0; //@line 4966
  HEAP32[$236 >> 2] = $233; //@line 4968
  HEAP32[$236 + 4 >> 2] = $234; //@line 4971
  $240 = $198 ^ $138; //@line 4972
  $241 = $199 ^ $141; //@line 4973
  $243 = $0 + 256 | 0; //@line 4975
  HEAP32[$243 >> 2] = $240; //@line 4977
  HEAP32[$243 + 4 >> 2] = $241; //@line 4980
  $247 = $205 ^ $136; //@line 4981
  $248 = $206 ^ $137; //@line 4982
  $250 = $0 + 128 | 0; //@line 4984
  HEAP32[$250 >> 2] = $247; //@line 4986
  HEAP32[$250 + 4 >> 2] = $248; //@line 4989
  $257 = $0 + 272 | 0; //@line 4993
  HEAP32[$257 >> 2] = $184 ^ $72; //@line 4995
  HEAP32[$257 + 4 >> 2] = $187 ^ $54; //@line 4998
  $264 = $0 + 144 | 0; //@line 5002
  HEAP32[$264 >> 2] = $182 ^ $108; //@line 5004
  HEAP32[$264 + 4 >> 2] = $183 ^ $90; //@line 5007
  $271 = $0 + 280 | 0; //@line 5011
  HEAP32[$271 >> 2] = $161 ^ $72; //@line 5013
  HEAP32[$271 + 4 >> 2] = $164 ^ $54; //@line 5016
  $278 = $0 + 152 | 0; //@line 5020
  HEAP32[$278 >> 2] = $159 ^ $108; //@line 5022
  HEAP32[$278 + 4 >> 2] = $160 ^ $90; //@line 5025
  $285 = $0 + 288 | 0; //@line 5029
  HEAP32[$285 >> 2] = $198 ^ $72; //@line 5031
  HEAP32[$285 + 4 >> 2] = $199 ^ $54; //@line 5034
  $292 = $0 + 160 | 0; //@line 5038
  HEAP32[$292 >> 2] = $205 ^ $108; //@line 5040
  HEAP32[$292 + 4 >> 2] = $206 ^ $90; //@line 5043
  $299 = $0 + 296 | 0; //@line 5047
  HEAP32[$299 >> 2] = $138 ^ $72; //@line 5049
  HEAP32[$299 + 4 >> 2] = $141 ^ $54; //@line 5052
  $306 = $0 + 168 | 0; //@line 5056
  HEAP32[$306 >> 2] = $136 ^ $108; //@line 5058
  HEAP32[$306 + 4 >> 2] = $137 ^ $90; //@line 5061
  $313 = $0 + 304 | 0; //@line 5065
  HEAP32[$313 >> 2] = $212 ^ $72; //@line 5067
  HEAP32[$313 + 4 >> 2] = $213 ^ $54; //@line 5070
  $320 = $0 + 176 | 0; //@line 5074
  HEAP32[$320 >> 2] = $219 ^ $108; //@line 5076
  HEAP32[$320 + 4 >> 2] = $220 ^ $90; //@line 5079
  $327 = $0 + 312 | 0; //@line 5083
  HEAP32[$327 >> 2] = $226 ^ $72; //@line 5085
  HEAP32[$327 + 4 >> 2] = $227 ^ $54; //@line 5088
  $334 = $0 + 184 | 0; //@line 5092
  HEAP32[$334 >> 2] = $233 ^ $108; //@line 5094
  HEAP32[$334 + 4 >> 2] = $234 ^ $90; //@line 5097
  $341 = $0 + 320 | 0; //@line 5101
  HEAP32[$341 >> 2] = $240 ^ $72; //@line 5103
  HEAP32[$341 + 4 >> 2] = $241 ^ $54; //@line 5106
  $348 = $0 + 192 | 0; //@line 5110
  HEAP32[$348 >> 2] = $247 ^ $108; //@line 5112
  HEAP32[$348 + 4 >> 2] = $248 ^ $90; //@line 5115
  $$0$i = 0; //@line 5116
 } else {
  $$0$i = $32; //@line 5118
 }
 $$0 = $$0$i; //@line 5120
 STACKTOP = sp; //@line 5121
 return $$0 | 0; //@line 5121
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$i22 = 0, $$024 = 0, $$05$i = 0, $$06$i = 0, $$1 = 0, $10 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0.0, $112 = 0.0, $114 = 0, $118 = 0, $12 = 0, $125 = 0, $126 = 0, $130 = 0, $138 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $28 = 0, $3 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $44 = 0, $53 = 0, $65 = 0, $68 = 0, $7 = 0, $72 = 0, $73 = 0, $8 = 0, $83 = 0, $90 = 0, $95 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx21 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16297
 STACKTOP = STACKTOP + 16 | 0; //@line 16298
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16298
 $2 = sp + 1 | 0; //@line 16299
 $3 = sp; //@line 16300
 $4 = $0 + 968 | 0; //@line 16301
 if (HEAP32[$4 >> 2] | 0) {
  $$1 = -1e3; //@line 16305
  STACKTOP = sp; //@line 16306
  return $$1 | 0; //@line 16306
 }
 $7 = $0 + 264 | 0; //@line 16308
 __ZN11LoRaMacMlme18reset_confirmationEv($7); //@line 16309
 $8 = HEAP32[$1 >> 2] | 0; //@line 16310
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($7) | 0) >> 2] = $8; //@line 16312
 $10 = $0 + 944 | 0; //@line 16313
 $12 = HEAP8[$10 >> 0] | 8; //@line 16315
 HEAP8[$10 >> 0] = $12; //@line 16316
 switch (HEAP32[$1 >> 2] | 0) {
 case 1:
  {
   $$0 = __ZN14LoRaMacCommand15add_mac_commandEhhh($0 + 4 | 0, 2, 0, 0) | 0; //@line 16322
   label = 30; //@line 16323
   break;
  }
 case 0:
  {
   if (HEAP32[$4 >> 2] & 16 | 0) {
    $$1 = -1e3; //@line 16331
    STACKTOP = sp; //@line 16332
    return $$1 | 0; //@line 16332
   }
   $20 = HEAP32[$1 + 4 >> 2] | 0; //@line 16335
   if (!$20) {
    $$1 = -1003; //@line 16338
    STACKTOP = sp; //@line 16339
    return $$1 | 0; //@line 16339
   }
   $22 = $1 + 8 | 0; //@line 16341
   if (!(HEAP32[$22 >> 2] | 0)) {
    $$1 = -1003; //@line 16345
    STACKTOP = sp; //@line 16346
    return $$1 | 0; //@line 16346
   }
   $25 = $1 + 12 | 0; //@line 16348
   if (!(HEAP32[$25 >> 2] | 0)) {
    $$1 = -1003; //@line 16352
    STACKTOP = sp; //@line 16353
    return $$1 | 0; //@line 16353
   }
   $28 = $1 + 16 | 0; //@line 16355
   if (!(HEAP8[$28 >> 0] | 0)) {
    $$1 = -1003; //@line 16359
    STACKTOP = sp; //@line 16360
    return $$1 | 0; //@line 16360
   }
   HEAP32[$0 + 900 >> 2] = $20; //@line 16363
   HEAP32[$0 + 904 >> 2] = HEAP32[$22 >> 2]; //@line 16366
   HEAP32[$0 + 908 >> 2] = HEAP32[$25 >> 2]; //@line 16369
   $36 = HEAP8[$28 >> 0] | 0; //@line 16370
   $37 = $0 + 896 | 0; //@line 16371
   HEAP8[$37 >> 0] = $36; //@line 16372
   $40 = __ZN7LoRaPHY21verify_nb_join_trialsEh(HEAP32[$0 >> 2] | 0, HEAP8[$28 >> 0] | 0) | 0; //@line 16375
   HEAP8[$37 >> 0] = $40 ? $36 : 12; //@line 16377
   $41 = $0 + 897 | 0; //@line 16378
   HEAP8[$41 >> 0] = 0; //@line 16379
   HEAP8[$0 + 372 >> 0] = 0; //@line 16382
   $44 = $0 + 956 | 0; //@line 16383
   HEAP32[$44 >> 2] = 0; //@line 16384
   HEAP32[$0 + 960 >> 2] = 0; //@line 16386
   HEAP32[$0 + 964 >> 2] = 0; //@line 16388
   HEAP8[$0 + 380 >> 0] = 0; //@line 16390
   HEAP8[$0 + 894 >> 0] = 1; //@line 16392
   HEAP8[$0 + 895 >> 0] = 1; //@line 16394
   HEAP8[$0 + 377 >> 0] = 0; //@line 16396
   HEAP8[$0 + 1152 >> 0] = 0; //@line 16398
   HEAP16[$0 + 1154 >> 1] = 1; //@line 16400
   $53 = $0 + 4 | 0; //@line 16401
   __ZN14LoRaMacCommand20clear_command_bufferEv($53); //@line 16402
   __ZN14LoRaMacCommand19clear_repeat_bufferEv($53); //@line 16403
   __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($53); //@line 16404
   HEAP8[$0 + 371 >> 0] = 1; //@line 16406
   __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$0 >> 2] | 0, $0 + 360 | 0, 0); //@line 16408
   HEAP8[$0 + 373 >> 0] = 0; //@line 16410
   HEAP8[$0 + 374 >> 0] = 0; //@line 16412
   $$05$i = HEAP32[$0 + 1208 >> 2] | 0; //@line 16414
   if ($$05$i | 0) {
    $$06$i = $$05$i; //@line 16417
    do {
     HEAP32[$$06$i + 36 >> 2] = 0; //@line 16420
     $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 16422
    } while (($$06$i | 0) != 0);
   }
   HEAP8[$0 + 378 >> 0] = 0; //@line 16432
   HEAP8[$0 + 379 >> 0] = 0; //@line 16434
   $65 = HEAP32[$0 >> 2] | 0; //@line 16435
   $68 = HEAP32[(HEAP32[$65 >> 2] | 0) + 52 >> 2] | 0; //@line 16438
   $72 = (HEAPU8[$41 >> 0] | 0) + 1 & 255; //@line 16442
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 16443
   $73 = FUNCTION_TABLE_iii[$68 & 31]($65, $72) | 0; //@line 16444
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 454; //@line 16447
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16449
    HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 16451
    HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 16453
    HEAP32[$AsyncCtx + 16 >> 2] = $44; //@line 16455
    HEAP32[$AsyncCtx + 20 >> 2] = $10; //@line 16457
    sp = STACKTOP; //@line 16458
    STACKTOP = sp; //@line 16459
    return 0; //@line 16459
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 16461
   HEAP8[$0 + 1097 >> 0] = $73; //@line 16463
   HEAP8[$3 >> 0] = 0; //@line 16464
   HEAP8[$2 >> 0] = HEAP8[$0 + 1156 >> 0] << 7; //@line 16468
   $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 16469
   $83 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($0, $3, $2, 0, 0, 0) | 0; //@line 16470
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 455; //@line 16473
    HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 16475
    HEAP32[$AsyncCtx2 + 8 >> 2] = $44; //@line 16477
    HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 16479
    HEAP32[$AsyncCtx2 + 16 >> 2] = $3; //@line 16481
    HEAP32[$AsyncCtx2 + 20 >> 2] = $10; //@line 16483
    sp = STACKTOP; //@line 16484
    STACKTOP = sp; //@line 16485
    return 0; //@line 16485
   }
   _emscripten_free_async_context($AsyncCtx2 | 0); //@line 16487
   do {
    if (!$83) {
     $90 = $0 + 288 | 0; //@line 16491
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($90) | 0) + 11 >> 0] = 0; //@line 16494
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($90) | 0) + 10 >> 0] = 0; //@line 16497
     $95 = HEAP32[$44 >> 2] | 0; //@line 16498
     HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($90) | 0) + 16 >> 2] = $95; //@line 16501
     $AsyncCtx21 = _emscripten_alloc_async_context(20, sp) | 0; //@line 16502
     $98 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 16503
     if (___async) {
      HEAP32[$AsyncCtx21 >> 2] = 456; //@line 16506
      HEAP32[$AsyncCtx21 + 4 >> 2] = $2; //@line 16508
      HEAP32[$AsyncCtx21 + 8 >> 2] = $3; //@line 16510
      HEAP32[$AsyncCtx21 + 12 >> 2] = $10; //@line 16512
      HEAP32[$AsyncCtx21 + 16 >> 2] = $0; //@line 16514
      sp = STACKTOP; //@line 16515
      STACKTOP = sp; //@line 16516
      return 0; //@line 16516
     } else {
      _emscripten_free_async_context($AsyncCtx21 | 0); //@line 16518
      $$0$i22 = $98; //@line 16519
      break;
     }
    } else {
     $$0$i22 = $83; //@line 16523
    }
   } while (0);
   $$0 = $$0$i22; //@line 16526
   label = 30; //@line 16527
   break;
  }
 case 2:
  {
   $104 = HEAP8[$0 + 378 >> 0] | 0; //@line 16532
   $106 = HEAP8[$0 + 1097 >> 0] | 0; //@line 16534
   $108 = HEAP8[$0 + 1096 >> 0] | 0; //@line 16536
   $110 = +HEAPF32[$0 + 1144 >> 2]; //@line 16538
   $112 = +HEAPF32[$0 + 1148 >> 2]; //@line 16540
   $114 = HEAP16[$1 + 4 >> 1] | 0; //@line 16542
   $AsyncCtx17 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16543
   __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft($7, $104, $106, $108, $110, $112, $114); //@line 16544
   if (___async) {
    HEAP32[$AsyncCtx17 >> 2] = 457; //@line 16547
    HEAP32[$AsyncCtx17 + 4 >> 2] = $0; //@line 16549
    HEAP32[$AsyncCtx17 + 8 >> 2] = $4; //@line 16551
    sp = STACKTOP; //@line 16552
    STACKTOP = sp; //@line 16553
    return 0; //@line 16553
   }
   _emscripten_free_async_context($AsyncCtx17 | 0); //@line 16555
   $118 = HEAP32[$0 + 356 >> 2] | 0; //@line 16557
   $AsyncCtx9 = _emscripten_alloc_async_context(8, sp) | 0; //@line 16559
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($118, $0 + 996 | 0, 1e3); //@line 16560
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 458; //@line 16563
    HEAP32[$AsyncCtx9 + 4 >> 2] = $4; //@line 16565
    sp = STACKTOP; //@line 16566
    STACKTOP = sp; //@line 16567
    return 0; //@line 16567
   }
   _emscripten_free_async_context($AsyncCtx9 | 0); //@line 16569
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 1; //@line 16572
   $$1 = 0; //@line 16573
   STACKTOP = sp; //@line 16574
   return $$1 | 0; //@line 16574
  }
 case 3:
  {
   $125 = HEAP8[$1 + 12 >> 0] | 0; //@line 16580
   $126 = HEAP16[$1 + 4 >> 1] | 0; //@line 16581
   $AsyncCtx13 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16582
   __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft($7, 0, 0, $125, 0.0, 0.0, $126); //@line 16583
   if (___async) {
    HEAP32[$AsyncCtx13 >> 2] = 459; //@line 16586
    HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 16588
    HEAP32[$AsyncCtx13 + 8 >> 2] = $4; //@line 16590
    sp = STACKTOP; //@line 16591
    STACKTOP = sp; //@line 16592
    return 0; //@line 16592
   }
   _emscripten_free_async_context($AsyncCtx13 | 0); //@line 16594
   $130 = HEAP32[$0 + 356 >> 2] | 0; //@line 16596
   $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 16598
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($130, $0 + 996 | 0, 1e3); //@line 16599
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 460; //@line 16602
    HEAP32[$AsyncCtx5 + 4 >> 2] = $4; //@line 16604
    sp = STACKTOP; //@line 16605
    STACKTOP = sp; //@line 16606
    return 0; //@line 16606
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 16608
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 1; //@line 16611
   $$1 = 0; //@line 16612
   STACKTOP = sp; //@line 16613
   return $$1 | 0; //@line 16613
  }
 default:
  {
   $$024 = -1002; //@line 16617
   $138 = $12; //@line 16617
  }
 }
 do {
  if ((label | 0) == 30) {
   if (!$$0) {
    $$1 = 0; //@line 16624
    STACKTOP = sp; //@line 16625
    return $$1 | 0; //@line 16625
   } else {
    $$024 = $$0; //@line 16628
    $138 = HEAP8[$10 >> 0] | 0; //@line 16628
    break;
   }
  }
 } while (0);
 HEAP8[$0 + 373 >> 0] = 0; //@line 16634
 HEAP8[$10 >> 0] = $138 & -9; //@line 16636
 $$1 = $$024; //@line 16637
 STACKTOP = sp; //@line 16638
 return $$1 | 0; //@line 16638
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0; //@line 33354
 $n_sroa_1_4_extract_shift$0 = $a$1; //@line 33355
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0; //@line 33356
 $d_sroa_0_0_extract_trunc = $b$0; //@line 33357
 $d_sroa_1_4_extract_shift$0 = $b$1; //@line 33358
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0; //@line 33359
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0; //@line 33361
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 33364
    HEAP32[$rem + 4 >> 2] = 0; //@line 33365
   }
   $_0$1 = 0; //@line 33367
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 33368
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 33369
  } else {
   if (!$4) {
    $_0$1 = 0; //@line 33372
    $_0$0 = 0; //@line 33373
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 33374
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 33376
   HEAP32[$rem + 4 >> 2] = $a$1 & 0; //@line 33377
   $_0$1 = 0; //@line 33378
   $_0$0 = 0; //@line 33379
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 33380
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0; //@line 33383
 do {
  if (!$d_sroa_0_0_extract_trunc) {
   if ($17) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 33388
     HEAP32[$rem + 4 >> 2] = 0; //@line 33389
    }
    $_0$1 = 0; //@line 33391
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 33392
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 33393
   }
   if (!$n_sroa_0_0_extract_trunc) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = 0; //@line 33397
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0); //@line 33398
    }
    $_0$1 = 0; //@line 33400
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0; //@line 33401
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 33402
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0; //@line 33404
   if (!($37 & $d_sroa_1_4_extract_trunc)) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = $a$0 | 0; //@line 33407
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0; //@line 33408
    }
    $_0$1 = 0; //@line 33410
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0); //@line 33411
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 33412
   }
   $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 33415
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0; //@line 33417
    $58 = 31 - $51 | 0; //@line 33418
    $sr_1_ph = $57; //@line 33419
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0); //@line 33420
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0); //@line 33421
    $q_sroa_0_1_ph = 0; //@line 33422
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58; //@line 33423
    break;
   }
   if (!$rem) {
    $_0$1 = 0; //@line 33427
    $_0$0 = 0; //@line 33428
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 33429
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 33431
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 33432
   $_0$1 = 0; //@line 33433
   $_0$0 = 0; //@line 33434
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 33435
  } else {
   if (!$17) {
    $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 33439
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0; //@line 33441
     $126 = 31 - $119 | 0; //@line 33442
     $130 = $119 - 31 >> 31; //@line 33443
     $sr_1_ph = $125; //@line 33444
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126; //@line 33445
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130; //@line 33446
     $q_sroa_0_1_ph = 0; //@line 33447
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126; //@line 33448
     break;
    }
    if (!$rem) {
     $_0$1 = 0; //@line 33452
     $_0$0 = 0; //@line 33453
     return (tempRet0 = $_0$1, $_0$0) | 0; //@line 33454
    }
    HEAP32[$rem >> 2] = $a$0 | 0; //@line 33456
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 33457
    $_0$1 = 0; //@line 33458
    $_0$0 = 0; //@line 33459
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 33460
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0; //@line 33462
   if ($66 & $d_sroa_0_0_extract_trunc | 0) {
    $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 33465
    $89 = 64 - $88 | 0; //@line 33466
    $91 = 32 - $88 | 0; //@line 33467
    $92 = $91 >> 31; //@line 33468
    $95 = $88 - 32 | 0; //@line 33469
    $105 = $95 >> 31; //@line 33470
    $sr_1_ph = $88; //@line 33471
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105; //@line 33472
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0); //@line 33473
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92; //@line 33474
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31; //@line 33475
    break;
   }
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc; //@line 33479
    HEAP32[$rem + 4 >> 2] = 0; //@line 33480
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 33483
    $_0$0 = $a$0 | 0 | 0; //@line 33484
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 33485
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0; //@line 33487
    $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0; //@line 33488
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0; //@line 33489
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 33490
   }
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph; //@line 33495
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph; //@line 33496
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph; //@line 33497
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph; //@line 33498
  $carry_0_lcssa$1 = 0; //@line 33499
  $carry_0_lcssa$0 = 0; //@line 33500
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0; //@line 33502
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0; //@line 33503
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0; //@line 33504
  $137$1 = tempRet0; //@line 33505
  $q_sroa_1_1198 = $q_sroa_1_1_ph; //@line 33506
  $q_sroa_0_1199 = $q_sroa_0_1_ph; //@line 33507
  $r_sroa_1_1200 = $r_sroa_1_1_ph; //@line 33508
  $r_sroa_0_1201 = $r_sroa_0_1_ph; //@line 33509
  $sr_1202 = $sr_1_ph; //@line 33510
  $carry_0203 = 0; //@line 33511
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1; //@line 33513
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1; //@line 33514
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0; //@line 33515
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0; //@line 33516
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0; //@line 33517
   $150$1 = tempRet0; //@line 33518
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1; //@line 33519
   $carry_0203 = $151$0 & 1; //@line 33520
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0; //@line 33522
   $r_sroa_1_1200 = tempRet0; //@line 33523
   $sr_1202 = $sr_1202 - 1 | 0; //@line 33524
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198; //@line 33536
  $q_sroa_0_1_lcssa = $q_sroa_0_1199; //@line 33537
  $r_sroa_1_1_lcssa = $r_sroa_1_1200; //@line 33538
  $r_sroa_0_1_lcssa = $r_sroa_0_1201; //@line 33539
  $carry_0_lcssa$1 = 0; //@line 33540
  $carry_0_lcssa$0 = $carry_0203; //@line 33541
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa; //@line 33543
 $q_sroa_0_0_insert_ext75$1 = 0; //@line 33544
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa; //@line 33547
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa; //@line 33548
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1; //@line 33550
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0; //@line 33551
 return (tempRet0 = $_0$1, $_0$0) | 0; //@line 33552
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $122 = 0, $13 = 0, $136 = 0, $19 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $61 = 0, $69 = 0, $72 = 0, $73 = 0, $81 = 0, $84 = 0, $87 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16855
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 16861
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 16870
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 16875
      $19 = $1 + 44 | 0; //@line 16876
      if ((HEAP32[$19 >> 2] | 0) == 4) {
       break;
      }
      $25 = $0 + 16 + (HEAP32[$0 + 12 >> 2] << 3) | 0; //@line 16885
      $26 = $1 + 52 | 0; //@line 16886
      $27 = $1 + 53 | 0; //@line 16887
      $28 = $1 + 54 | 0; //@line 16888
      $29 = $0 + 8 | 0; //@line 16889
      $30 = $1 + 24 | 0; //@line 16890
      $$081$off0 = 0; //@line 16891
      $$084 = $0 + 16 | 0; //@line 16891
      $$085$off0 = 0; //@line 16891
      L10 : while (1) {
       if ($$084 >>> 0 >= $25 >>> 0) {
        $$283$off0 = $$081$off0; //@line 16895
        label = 20; //@line 16896
        break;
       }
       HEAP8[$26 >> 0] = 0; //@line 16899
       HEAP8[$27 >> 0] = 0; //@line 16900
       $AsyncCtx15 = _emscripten_alloc_async_context(56, sp) | 0; //@line 16901
       __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084, $1, $2, $2, 1, $4); //@line 16902
       if (___async) {
        label = 12; //@line 16905
        break;
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 16908
       if (HEAP8[$28 >> 0] | 0) {
        $$283$off0 = $$081$off0; //@line 16912
        label = 20; //@line 16913
        break;
       }
       do {
        if (!(HEAP8[$27 >> 0] | 0)) {
         $$182$off0 = $$081$off0; //@line 16920
         $$186$off0 = $$085$off0; //@line 16920
        } else {
         if (!(HEAP8[$26 >> 0] | 0)) {
          if (!(HEAP32[$29 >> 2] & 1)) {
           $$283$off0 = 1; //@line 16929
           label = 20; //@line 16930
           break L10;
          } else {
           $$182$off0 = 1; //@line 16933
           $$186$off0 = $$085$off0; //@line 16933
           break;
          }
         }
         if ((HEAP32[$30 >> 2] | 0) == 1) {
          label = 25; //@line 16940
          break L10;
         }
         if (!(HEAP32[$29 >> 2] & 2)) {
          label = 25; //@line 16947
          break L10;
         } else {
          $$182$off0 = 1; //@line 16950
          $$186$off0 = 1; //@line 16950
         }
        }
       } while (0);
       $$081$off0 = $$182$off0; //@line 16955
       $$084 = $$084 + 8 | 0; //@line 16955
       $$085$off0 = $$186$off0; //@line 16955
      }
      if ((label | 0) == 12) {
       HEAP32[$AsyncCtx15 >> 2] = 680; //@line 16958
       HEAP32[$AsyncCtx15 + 4 >> 2] = $26; //@line 16960
       HEAP32[$AsyncCtx15 + 8 >> 2] = $27; //@line 16962
       HEAP32[$AsyncCtx15 + 12 >> 2] = $1; //@line 16964
       HEAP32[$AsyncCtx15 + 16 >> 2] = $2; //@line 16966
       HEAP8[$AsyncCtx15 + 20 >> 0] = $4 & 1; //@line 16969
       HEAP32[$AsyncCtx15 + 24 >> 2] = $25; //@line 16971
       HEAP32[$AsyncCtx15 + 28 >> 2] = $28; //@line 16973
       HEAP32[$AsyncCtx15 + 32 >> 2] = $29; //@line 16975
       HEAP32[$AsyncCtx15 + 36 >> 2] = $30; //@line 16977
       HEAP32[$AsyncCtx15 + 40 >> 2] = $19; //@line 16979
       HEAP8[$AsyncCtx15 + 44 >> 0] = $$081$off0 & 1; //@line 16982
       HEAP8[$AsyncCtx15 + 45 >> 0] = $$085$off0 & 1; //@line 16985
       HEAP32[$AsyncCtx15 + 48 >> 2] = $13; //@line 16987
       HEAP32[$AsyncCtx15 + 52 >> 2] = $$084; //@line 16989
       sp = STACKTOP; //@line 16990
       return;
      }
      do {
       if ((label | 0) == 20) {
        if (!$$085$off0) {
         HEAP32[$13 >> 2] = $2; //@line 16996
         $61 = $1 + 40 | 0; //@line 16997
         HEAP32[$61 >> 2] = (HEAP32[$61 >> 2] | 0) + 1; //@line 17000
         if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
          if ((HEAP32[$30 >> 2] | 0) == 2) {
           HEAP8[$28 >> 0] = 1; //@line 17008
           if ($$283$off0) {
            label = 25; //@line 17010
            break;
           } else {
            $69 = 4; //@line 17013
            break;
           }
          }
         }
        }
        if ($$283$off0) {
         label = 25; //@line 17020
        } else {
         $69 = 4; //@line 17022
        }
       }
      } while (0);
      if ((label | 0) == 25) {
       $69 = 3; //@line 17027
      }
      HEAP32[$19 >> 2] = $69; //@line 17029
      break;
     }
    }
    if (($3 | 0) != 1) {
     break;
    }
    HEAP32[$1 + 32 >> 2] = 1; //@line 17038
    break;
   }
   $72 = HEAP32[$0 + 12 >> 2] | 0; //@line 17043
   $73 = $0 + 16 + ($72 << 3) | 0; //@line 17044
   $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 17045
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0 + 16 | 0, $1, $2, $3, $4); //@line 17046
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 681; //@line 17049
    HEAP32[$AsyncCtx11 + 4 >> 2] = $1; //@line 17051
    HEAP32[$AsyncCtx11 + 8 >> 2] = $2; //@line 17053
    HEAP32[$AsyncCtx11 + 12 >> 2] = $3; //@line 17055
    HEAP8[$AsyncCtx11 + 16 >> 0] = $4 & 1; //@line 17058
    HEAP32[$AsyncCtx11 + 20 >> 2] = $73; //@line 17060
    HEAP32[$AsyncCtx11 + 24 >> 2] = $0; //@line 17062
    HEAP32[$AsyncCtx11 + 28 >> 2] = $72; //@line 17064
    sp = STACKTOP; //@line 17065
    return;
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 17068
   $81 = $0 + 24 | 0; //@line 17069
   if (($72 | 0) > 1) {
    $84 = HEAP32[$0 + 8 >> 2] | 0; //@line 17073
    if (!($84 & 2)) {
     $87 = $1 + 36 | 0; //@line 17077
     if ((HEAP32[$87 >> 2] | 0) != 1) {
      if (!($84 & 1)) {
       $106 = $1 + 54 | 0; //@line 17084
       $$2 = $81; //@line 17085
       while (1) {
        if (HEAP8[$106 >> 0] | 0) {
         break L1;
        }
        if ((HEAP32[$87 >> 2] | 0) == 1) {
         break L1;
        }
        $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 17097
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2, $1, $2, $3, $4); //@line 17098
        if (___async) {
         break;
        }
        _emscripten_free_async_context($AsyncCtx | 0); //@line 17103
        $136 = $$2 + 8 | 0; //@line 17104
        if ($136 >>> 0 < $73 >>> 0) {
         $$2 = $136; //@line 17107
        } else {
         break L1;
        }
       }
       HEAP32[$AsyncCtx >> 2] = 684; //@line 17112
       HEAP32[$AsyncCtx + 4 >> 2] = $$2; //@line 17114
       HEAP32[$AsyncCtx + 8 >> 2] = $73; //@line 17116
       HEAP32[$AsyncCtx + 12 >> 2] = $106; //@line 17118
       HEAP32[$AsyncCtx + 16 >> 2] = $87; //@line 17120
       HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 17122
       HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 17124
       HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 17126
       HEAP8[$AsyncCtx + 32 >> 0] = $4 & 1; //@line 17129
       sp = STACKTOP; //@line 17130
       return;
      }
      $104 = $1 + 24 | 0; //@line 17133
      $105 = $1 + 54 | 0; //@line 17134
      $$1 = $81; //@line 17135
      while (1) {
       if (HEAP8[$105 >> 0] | 0) {
        break L1;
       }
       if ((HEAP32[$87 >> 2] | 0) == 1) {
        if ((HEAP32[$104 >> 2] | 0) == 1) {
         break L1;
        }
       }
       $AsyncCtx3 = _emscripten_alloc_async_context(40, sp) | 0; //@line 17151
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1, $1, $2, $3, $4); //@line 17152
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17157
       $122 = $$1 + 8 | 0; //@line 17158
       if ($122 >>> 0 < $73 >>> 0) {
        $$1 = $122; //@line 17161
       } else {
        break L1;
       }
      }
      HEAP32[$AsyncCtx3 >> 2] = 683; //@line 17166
      HEAP32[$AsyncCtx3 + 4 >> 2] = $$1; //@line 17168
      HEAP32[$AsyncCtx3 + 8 >> 2] = $73; //@line 17170
      HEAP32[$AsyncCtx3 + 12 >> 2] = $105; //@line 17172
      HEAP32[$AsyncCtx3 + 16 >> 2] = $87; //@line 17174
      HEAP32[$AsyncCtx3 + 20 >> 2] = $104; //@line 17176
      HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 17178
      HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 17180
      HEAP32[$AsyncCtx3 + 32 >> 2] = $3; //@line 17182
      HEAP8[$AsyncCtx3 + 36 >> 0] = $4 & 1; //@line 17185
      sp = STACKTOP; //@line 17186
      return;
     }
    }
    $90 = $1 + 54 | 0; //@line 17190
    $$0 = $81; //@line 17191
    while (1) {
     if (HEAP8[$90 >> 0] | 0) {
      break L1;
     }
     $AsyncCtx7 = _emscripten_alloc_async_context(32, sp) | 0; //@line 17198
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0, $1, $2, $3, $4); //@line 17199
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 17204
     $100 = $$0 + 8 | 0; //@line 17205
     if ($100 >>> 0 < $73 >>> 0) {
      $$0 = $100; //@line 17208
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx7 >> 2] = 682; //@line 17213
    HEAP32[$AsyncCtx7 + 4 >> 2] = $$0; //@line 17215
    HEAP32[$AsyncCtx7 + 8 >> 2] = $73; //@line 17217
    HEAP32[$AsyncCtx7 + 12 >> 2] = $90; //@line 17219
    HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 17221
    HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 17223
    HEAP32[$AsyncCtx7 + 24 >> 2] = $3; //@line 17225
    HEAP8[$AsyncCtx7 + 28 >> 0] = $4 & 1; //@line 17228
    sp = STACKTOP; //@line 17229
    return;
   }
  }
 } while (0);
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $100 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $3 = 0, $30 = 0, $33 = 0, $38 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $51 = 0, $54 = 0, $6 = 0, $61 = 0, $74 = 0, $77 = 0, $82 = 0, $96 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx21 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx32 = 0, $AsyncCtx36 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 431
 STACKTOP = STACKTOP + 96 | 0; //@line 432
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 432
 $vararg_buffer17 = sp + 48 | 0; //@line 433
 $vararg_buffer14 = sp + 40 | 0; //@line 434
 $vararg_buffer11 = sp + 32 | 0; //@line 435
 $vararg_buffer8 = sp + 24 | 0; //@line 436
 $vararg_buffer5 = sp + 16 | 0; //@line 437
 $vararg_buffer2 = sp + 8 | 0; //@line 438
 $vararg_buffer = sp; //@line 439
 $2 = sp + 72 | 0; //@line 440
 $3 = sp + 56 | 0; //@line 441
 $4 = $0 + 783 | 0; //@line 442
 $6 = HEAPU8[$4 >> 0] | 0; //@line 444
 HEAP32[$vararg_buffer >> 2] = $1; //@line 445
 HEAP32[$vararg_buffer + 4 >> 2] = $6; //@line 447
 _mbed_tracef(16, 10944, 11260, $vararg_buffer); //@line 448
 _emscripten_asm_const_i(2) | 0; //@line 449
 HEAP8[$0 + 688 >> 0] = 1; //@line 451
 if (HEAP8[$4 >> 0] | 0) {
  $11 = _emscripten_asm_const_i(3) | 0; //@line 455
  $14 = $11 - (HEAP32[$0 + 784 >> 2] | 0) | 0; //@line 458
  HEAP32[$vararg_buffer2 >> 2] = $14; //@line 459
  _mbed_tracef(16, 10944, 11360, $vararg_buffer2); //@line 460
  HEAP8[$4 >> 0] = 0; //@line 461
  if ($14 >>> 0 > 500) {
   HEAP32[$vararg_buffer5 >> 2] = $14; //@line 464
   _mbed_tracef(4, 10944, 11381, $vararg_buffer5); //@line 465
   STACKTOP = sp; //@line 466
   return;
  }
  $16 = $0 + 1112 | 0; //@line 468
  $17 = $2 + 12 | 0; //@line 469
  HEAP32[$2 >> 2] = 50; //@line 470
  HEAP32[$2 + 4 >> 2] = 0; //@line 472
  HEAP32[$2 + 8 >> 2] = $0; //@line 474
  HEAP32[$17 >> 2] = 648; //@line 475
  $18 = $0 + 1152 | 0; //@line 476
  if (($18 | 0) != ($2 | 0)) {
   $20 = $0 + 1164 | 0; //@line 479
   $21 = HEAP32[$20 >> 2] | 0; //@line 480
   do {
    if ($21 | 0) {
     $24 = HEAP32[$21 + 8 >> 2] | 0; //@line 485
     $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 486
     FUNCTION_TABLE_vi[$24 & 1023]($18); //@line 487
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 51; //@line 490
      HEAP32[$AsyncCtx + 4 >> 2] = $17; //@line 492
      HEAP32[$AsyncCtx + 8 >> 2] = $20; //@line 494
      HEAP32[$AsyncCtx + 12 >> 2] = $18; //@line 496
      HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 498
      HEAP32[$AsyncCtx + 20 >> 2] = $16; //@line 500
      sp = STACKTOP; //@line 501
      STACKTOP = sp; //@line 502
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 504
      break;
     }
    }
   } while (0);
   $30 = HEAP32[$17 >> 2] | 0; //@line 509
   do {
    if (!$30) {
     $38 = 0; //@line 513
    } else {
     $33 = HEAP32[$30 + 4 >> 2] | 0; //@line 516
     $AsyncCtx21 = _emscripten_alloc_async_context(20, sp) | 0; //@line 517
     FUNCTION_TABLE_vii[$33 & 31]($18, $2); //@line 518
     if (___async) {
      HEAP32[$AsyncCtx21 >> 2] = 52; //@line 521
      HEAP32[$AsyncCtx21 + 4 >> 2] = $17; //@line 523
      HEAP32[$AsyncCtx21 + 8 >> 2] = $20; //@line 525
      HEAP32[$AsyncCtx21 + 12 >> 2] = $16; //@line 527
      HEAP32[$AsyncCtx21 + 16 >> 2] = $2; //@line 529
      sp = STACKTOP; //@line 530
      STACKTOP = sp; //@line 531
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx21 | 0); //@line 533
      $38 = HEAP32[$17 >> 2] | 0; //@line 535
      break;
     }
    }
   } while (0);
   HEAP32[$20 >> 2] = $38; //@line 540
  }
  __ZN4mbed6Ticker5setupEy($16, 2e5, 0); //@line 542
  $39 = HEAP32[$17 >> 2] | 0; //@line 543
  if (!$39) {
   STACKTOP = sp; //@line 546
   return;
  }
  $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 549
  $AsyncCtx25 = _emscripten_alloc_async_context(4, sp) | 0; //@line 550
  FUNCTION_TABLE_vi[$42 & 1023]($2); //@line 551
  if (___async) {
   HEAP32[$AsyncCtx25 >> 2] = 53; //@line 554
   sp = STACKTOP; //@line 555
   STACKTOP = sp; //@line 556
   return;
  }
  _emscripten_free_async_context($AsyncCtx25 | 0); //@line 558
  STACKTOP = sp; //@line 559
  return;
 }
 do {
  if ($1 | 0) {
   $44 = $0 + 1112 | 0; //@line 564
   $45 = $3 + 12 | 0; //@line 565
   HEAP32[$3 >> 2] = 54; //@line 566
   HEAP32[$3 + 4 >> 2] = 0; //@line 568
   HEAP32[$3 + 8 >> 2] = $0; //@line 570
   HEAP32[$45 >> 2] = 648; //@line 571
   $46 = ___muldi3($1 | 0, 0, 1e3, 0) | 0; //@line 572
   $47 = tempRet0; //@line 573
   $48 = $0 + 1152 | 0; //@line 574
   if (($48 | 0) != ($3 | 0)) {
    $50 = $0 + 1164 | 0; //@line 577
    $51 = HEAP32[$50 >> 2] | 0; //@line 578
    do {
     if ($51 | 0) {
      $54 = HEAP32[$51 + 8 >> 2] | 0; //@line 583
      $AsyncCtx29 = _emscripten_alloc_async_context(72, sp) | 0; //@line 584
      FUNCTION_TABLE_vi[$54 & 1023]($48); //@line 585
      if (___async) {
       HEAP32[$AsyncCtx29 >> 2] = 55; //@line 588
       HEAP32[$AsyncCtx29 + 4 >> 2] = $45; //@line 590
       HEAP32[$AsyncCtx29 + 8 >> 2] = $50; //@line 592
       HEAP32[$AsyncCtx29 + 12 >> 2] = $48; //@line 594
       HEAP32[$AsyncCtx29 + 16 >> 2] = $3; //@line 596
       HEAP32[$AsyncCtx29 + 20 >> 2] = $44; //@line 598
       $61 = $AsyncCtx29 + 24 | 0; //@line 600
       HEAP32[$61 >> 2] = $46; //@line 602
       HEAP32[$61 + 4 >> 2] = $47; //@line 605
       HEAP32[$AsyncCtx29 + 32 >> 2] = $0; //@line 607
       HEAP32[$AsyncCtx29 + 36 >> 2] = $vararg_buffer14; //@line 609
       HEAP32[$AsyncCtx29 + 40 >> 2] = $vararg_buffer14; //@line 611
       HEAP32[$AsyncCtx29 + 44 >> 2] = $vararg_buffer17; //@line 613
       HEAP32[$AsyncCtx29 + 48 >> 2] = $vararg_buffer17; //@line 615
       HEAP32[$AsyncCtx29 + 52 >> 2] = $vararg_buffer8; //@line 617
       HEAP32[$AsyncCtx29 + 56 >> 2] = $vararg_buffer8; //@line 619
       HEAP32[$AsyncCtx29 + 60 >> 2] = $vararg_buffer11; //@line 621
       HEAP32[$AsyncCtx29 + 64 >> 2] = $vararg_buffer11; //@line 623
       sp = STACKTOP; //@line 624
       STACKTOP = sp; //@line 625
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx29 | 0); //@line 627
       break;
      }
     }
    } while (0);
    $74 = HEAP32[$45 >> 2] | 0; //@line 632
    do {
     if (!$74) {
      $96 = 0; //@line 636
     } else {
      $77 = HEAP32[$74 + 4 >> 2] | 0; //@line 639
      $AsyncCtx32 = _emscripten_alloc_async_context(64, sp) | 0; //@line 640
      FUNCTION_TABLE_vii[$77 & 31]($48, $3); //@line 641
      if (___async) {
       HEAP32[$AsyncCtx32 >> 2] = 56; //@line 644
       HEAP32[$AsyncCtx32 + 4 >> 2] = $45; //@line 646
       HEAP32[$AsyncCtx32 + 8 >> 2] = $50; //@line 648
       HEAP32[$AsyncCtx32 + 12 >> 2] = $44; //@line 650
       $82 = $AsyncCtx32 + 16 | 0; //@line 652
       HEAP32[$82 >> 2] = $46; //@line 654
       HEAP32[$82 + 4 >> 2] = $47; //@line 657
       HEAP32[$AsyncCtx32 + 24 >> 2] = $0; //@line 659
       HEAP32[$AsyncCtx32 + 28 >> 2] = $3; //@line 661
       HEAP32[$AsyncCtx32 + 32 >> 2] = $vararg_buffer14; //@line 663
       HEAP32[$AsyncCtx32 + 36 >> 2] = $vararg_buffer14; //@line 665
       HEAP32[$AsyncCtx32 + 40 >> 2] = $vararg_buffer17; //@line 667
       HEAP32[$AsyncCtx32 + 44 >> 2] = $vararg_buffer17; //@line 669
       HEAP32[$AsyncCtx32 + 48 >> 2] = $vararg_buffer8; //@line 671
       HEAP32[$AsyncCtx32 + 52 >> 2] = $vararg_buffer8; //@line 673
       HEAP32[$AsyncCtx32 + 56 >> 2] = $vararg_buffer11; //@line 675
       HEAP32[$AsyncCtx32 + 60 >> 2] = $vararg_buffer11; //@line 677
       sp = STACKTOP; //@line 678
       STACKTOP = sp; //@line 679
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx32 | 0); //@line 681
       $96 = HEAP32[$45 >> 2] | 0; //@line 683
       break;
      }
     }
    } while (0);
    HEAP32[$50 >> 2] = $96; //@line 688
   }
   __ZN4mbed6Ticker5setupEy($44, $46, $47); //@line 690
   $97 = HEAP32[$45 >> 2] | 0; //@line 691
   if ($97 | 0) {
    $100 = HEAP32[$97 + 8 >> 2] | 0; //@line 695
    $AsyncCtx36 = _emscripten_alloc_async_context(40, sp) | 0; //@line 696
    FUNCTION_TABLE_vi[$100 & 1023]($3); //@line 697
    if (___async) {
     HEAP32[$AsyncCtx36 >> 2] = 57; //@line 700
     HEAP32[$AsyncCtx36 + 4 >> 2] = $0; //@line 702
     HEAP32[$AsyncCtx36 + 8 >> 2] = $vararg_buffer14; //@line 704
     HEAP32[$AsyncCtx36 + 12 >> 2] = $vararg_buffer14; //@line 706
     HEAP32[$AsyncCtx36 + 16 >> 2] = $vararg_buffer17; //@line 708
     HEAP32[$AsyncCtx36 + 20 >> 2] = $vararg_buffer17; //@line 710
     HEAP32[$AsyncCtx36 + 24 >> 2] = $vararg_buffer8; //@line 712
     HEAP32[$AsyncCtx36 + 28 >> 2] = $vararg_buffer8; //@line 714
     HEAP32[$AsyncCtx36 + 32 >> 2] = $vararg_buffer11; //@line 716
     HEAP32[$AsyncCtx36 + 36 >> 2] = $vararg_buffer11; //@line 718
     sp = STACKTOP; //@line 719
     STACKTOP = sp; //@line 720
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx36 | 0); //@line 722
     break;
    }
   }
  }
 } while (0);
 if (!(HEAP8[$0 + 770 >> 0] | 0)) {
  HEAP32[$vararg_buffer14 >> 2] = 6; //@line 732
  _mbed_tracef(16, 10944, 11001, $vararg_buffer14); //@line 733
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 734
  HEAP32[$vararg_buffer17 >> 2] = 6; //@line 735
  _mbed_tracef(16, 10944, 11030, $vararg_buffer17); //@line 736
  STACKTOP = sp; //@line 737
  return;
 } else {
  HEAP32[$vararg_buffer8 >> 2] = 5; //@line 739
  _mbed_tracef(16, 10944, 11001, $vararg_buffer8); //@line 740
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 741
  HEAP32[$vararg_buffer11 >> 2] = 5; //@line 742
  _mbed_tracef(16, 10944, 11030, $vararg_buffer11); //@line 743
  STACKTOP = sp; //@line 744
  return;
 }
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = $15 | 0;
 $16 = $16 | 0;
 $17 = $17 | 0;
 $18 = $18 | 0;
 var $106 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $47 = 0, $49 = 0, $62 = 0, $64 = 0, $77 = 0, $79 = 0, $92 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 2167
 HEAP32[$0 >> 2] = 560; //@line 2168
 $19 = $0 + 4 | 0; //@line 2169
 HEAP32[$19 >> 2] = 0; //@line 2170
 HEAP32[$19 + 4 >> 2] = 0; //@line 2170
 HEAP32[$19 + 8 >> 2] = 0; //@line 2170
 HEAP32[$19 + 12 >> 2] = 0; //@line 2170
 HEAP32[$19 + 16 >> 2] = 0; //@line 2170
 HEAP32[$19 + 20 >> 2] = 0; //@line 2170
 _gpio_init_out_ex($19, $4, 1); //@line 2171
 $20 = $0 + 28 | 0; //@line 2172
 HEAP32[$20 >> 2] = 0; //@line 2173
 HEAP32[$20 + 4 >> 2] = 0; //@line 2173
 HEAP32[$20 + 8 >> 2] = 0; //@line 2173
 HEAP32[$20 + 12 >> 2] = 0; //@line 2173
 HEAP32[$20 + 16 >> 2] = 0; //@line 2173
 HEAP32[$20 + 20 >> 2] = 0; //@line 2173
 _gpio_init_in($20, $5); //@line 2174
 __ZN4mbed11InterruptInC2E7PinName($0 + 52 | 0, $6); //@line 2176
 __ZN4mbed11InterruptInC2E7PinName($0 + 124 | 0, $7); //@line 2178
 __ZN4mbed11InterruptInC2E7PinName($0 + 196 | 0, $8); //@line 2180
 __ZN4mbed11InterruptInC2E7PinName($0 + 268 | 0, $9); //@line 2182
 __ZN4mbed11InterruptInC2E7PinName($0 + 340 | 0, $10); //@line 2184
 __ZN4mbed11InterruptInC2E7PinName($0 + 412 | 0, $11); //@line 2186
 $27 = $0 + 484 | 0; //@line 2187
 HEAP32[$27 >> 2] = 0; //@line 2188
 HEAP32[$27 + 4 >> 2] = 0; //@line 2188
 HEAP32[$27 + 8 >> 2] = 0; //@line 2188
 HEAP32[$27 + 12 >> 2] = 0; //@line 2188
 HEAP32[$27 + 16 >> 2] = 0; //@line 2188
 HEAP32[$27 + 20 >> 2] = 0; //@line 2188
 _gpio_init_out_ex($27, $12, 0); //@line 2189
 $28 = $0 + 508 | 0; //@line 2190
 HEAP32[$28 >> 2] = 0; //@line 2191
 HEAP32[$28 + 4 >> 2] = 0; //@line 2191
 HEAP32[$28 + 8 >> 2] = 0; //@line 2191
 HEAP32[$28 + 12 >> 2] = 0; //@line 2191
 HEAP32[$28 + 16 >> 2] = 0; //@line 2191
 HEAP32[$28 + 20 >> 2] = 0; //@line 2191
 _gpio_init_out_ex($28, $13, 0); //@line 2192
 $29 = $0 + 532 | 0; //@line 2193
 HEAP32[$29 >> 2] = 0; //@line 2194
 HEAP32[$29 + 4 >> 2] = 0; //@line 2194
 HEAP32[$29 + 8 >> 2] = 0; //@line 2194
 HEAP32[$29 + 12 >> 2] = 0; //@line 2194
 HEAP32[$29 + 16 >> 2] = 0; //@line 2194
 HEAP32[$29 + 20 >> 2] = 0; //@line 2194
 _gpio_init_out_ex($29, $14, 0); //@line 2195
 $30 = $0 + 556 | 0; //@line 2196
 HEAP32[$30 >> 2] = 0; //@line 2197
 HEAP32[$30 + 4 >> 2] = 0; //@line 2197
 HEAP32[$30 + 8 >> 2] = 0; //@line 2197
 HEAP32[$30 + 12 >> 2] = 0; //@line 2197
 HEAP32[$30 + 16 >> 2] = 0; //@line 2197
 HEAP32[$30 + 20 >> 2] = 0; //@line 2197
 _gpio_init_out_ex($30, $15, 0); //@line 2198
 $31 = $0 + 580 | 0; //@line 2199
 HEAP32[$31 >> 2] = 0; //@line 2200
 HEAP32[$31 + 4 >> 2] = 0; //@line 2200
 HEAP32[$31 + 8 >> 2] = 0; //@line 2200
 HEAP32[$31 + 12 >> 2] = 0; //@line 2200
 HEAP32[$31 + 16 >> 2] = 0; //@line 2200
 HEAP32[$31 + 20 >> 2] = 0; //@line 2200
 _gpio_init_inout($31, $16, 0, 0, 0); //@line 2201
 $32 = $0 + 604 | 0; //@line 2202
 HEAP32[$32 >> 2] = 0; //@line 2203
 HEAP32[$32 + 4 >> 2] = 0; //@line 2203
 HEAP32[$32 + 8 >> 2] = 0; //@line 2203
 HEAP32[$32 + 12 >> 2] = 0; //@line 2203
 HEAP32[$32 + 16 >> 2] = 0; //@line 2203
 HEAP32[$32 + 20 >> 2] = 0; //@line 2203
 _gpio_init_out($32, $17); //@line 2204
 $33 = $0 + 628 | 0; //@line 2205
 HEAP32[$33 >> 2] = 0; //@line 2206
 HEAP32[$33 + 4 >> 2] = 0; //@line 2206
 HEAP32[$33 + 8 >> 2] = 0; //@line 2206
 HEAP32[$33 + 12 >> 2] = 0; //@line 2206
 HEAP32[$33 + 16 >> 2] = 0; //@line 2206
 HEAP32[$33 + 20 >> 2] = 0; //@line 2206
 _gpio_init_out($33, $18); //@line 2207
 $34 = $0 + 1048 | 0; //@line 2208
 $AsyncCtx11 = _emscripten_alloc_async_context(52, sp) | 0; //@line 2209
 __ZN4mbed10TimerEventC2Ev($34); //@line 2210
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 96; //@line 2213
  HEAP32[$AsyncCtx11 + 4 >> 2] = $34; //@line 2215
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 2217
  HEAP32[$AsyncCtx11 + 12 >> 2] = $16; //@line 2219
  HEAP32[$AsyncCtx11 + 16 >> 2] = $17; //@line 2221
  HEAP32[$AsyncCtx11 + 20 >> 2] = $12; //@line 2223
  HEAP32[$AsyncCtx11 + 24 >> 2] = $13; //@line 2225
  HEAP32[$AsyncCtx11 + 28 >> 2] = $15; //@line 2227
  HEAP32[$AsyncCtx11 + 32 >> 2] = $14; //@line 2229
  HEAP32[$AsyncCtx11 + 36 >> 2] = $18; //@line 2231
  HEAP32[$AsyncCtx11 + 40 >> 2] = $10; //@line 2233
  HEAP32[$AsyncCtx11 + 44 >> 2] = $11; //@line 2235
  HEAP32[$AsyncCtx11 + 48 >> 2] = $33; //@line 2237
  sp = STACKTOP; //@line 2238
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 2241
 $47 = $0 + 1088 | 0; //@line 2242
 HEAP32[$47 >> 2] = 0; //@line 2243
 HEAP32[$47 + 4 >> 2] = 0; //@line 2243
 HEAP32[$47 + 8 >> 2] = 0; //@line 2243
 HEAP32[$47 + 12 >> 2] = 0; //@line 2243
 HEAP8[$0 + 1104 >> 0] = 1; //@line 2245
 HEAP32[$34 >> 2] = 684; //@line 2246
 $49 = $0 + 1112 | 0; //@line 2247
 $AsyncCtx7 = _emscripten_alloc_async_context(52, sp) | 0; //@line 2248
 __ZN4mbed10TimerEventC2Ev($49); //@line 2249
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 97; //@line 2252
  HEAP32[$AsyncCtx7 + 4 >> 2] = $49; //@line 2254
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 2256
  HEAP32[$AsyncCtx7 + 12 >> 2] = $16; //@line 2258
  HEAP32[$AsyncCtx7 + 16 >> 2] = $17; //@line 2260
  HEAP32[$AsyncCtx7 + 20 >> 2] = $12; //@line 2262
  HEAP32[$AsyncCtx7 + 24 >> 2] = $13; //@line 2264
  HEAP32[$AsyncCtx7 + 28 >> 2] = $15; //@line 2266
  HEAP32[$AsyncCtx7 + 32 >> 2] = $14; //@line 2268
  HEAP32[$AsyncCtx7 + 36 >> 2] = $18; //@line 2270
  HEAP32[$AsyncCtx7 + 40 >> 2] = $10; //@line 2272
  HEAP32[$AsyncCtx7 + 44 >> 2] = $11; //@line 2274
  HEAP32[$AsyncCtx7 + 48 >> 2] = $33; //@line 2276
  sp = STACKTOP; //@line 2277
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 2280
 $62 = $0 + 1152 | 0; //@line 2281
 HEAP32[$62 >> 2] = 0; //@line 2282
 HEAP32[$62 + 4 >> 2] = 0; //@line 2282
 HEAP32[$62 + 8 >> 2] = 0; //@line 2282
 HEAP32[$62 + 12 >> 2] = 0; //@line 2282
 HEAP8[$0 + 1168 >> 0] = 1; //@line 2284
 HEAP32[$49 >> 2] = 684; //@line 2285
 $64 = $0 + 1176 | 0; //@line 2286
 $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 2287
 __ZN4mbed10TimerEventC2Ev($64); //@line 2288
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 98; //@line 2291
  HEAP32[$AsyncCtx3 + 4 >> 2] = $64; //@line 2293
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 2295
  HEAP32[$AsyncCtx3 + 12 >> 2] = $16; //@line 2297
  HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 2299
  HEAP32[$AsyncCtx3 + 20 >> 2] = $12; //@line 2301
  HEAP32[$AsyncCtx3 + 24 >> 2] = $13; //@line 2303
  HEAP32[$AsyncCtx3 + 28 >> 2] = $15; //@line 2305
  HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 2307
  HEAP32[$AsyncCtx3 + 36 >> 2] = $18; //@line 2309
  HEAP32[$AsyncCtx3 + 40 >> 2] = $10; //@line 2311
  HEAP32[$AsyncCtx3 + 44 >> 2] = $11; //@line 2313
  HEAP32[$AsyncCtx3 + 48 >> 2] = $33; //@line 2315
  sp = STACKTOP; //@line 2316
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2319
 $77 = $0 + 1216 | 0; //@line 2320
 HEAP32[$77 >> 2] = 0; //@line 2321
 HEAP32[$77 + 4 >> 2] = 0; //@line 2321
 HEAP32[$77 + 8 >> 2] = 0; //@line 2321
 HEAP32[$77 + 12 >> 2] = 0; //@line 2321
 HEAP8[$0 + 1232 >> 0] = 1; //@line 2323
 HEAP32[$64 >> 2] = 684; //@line 2324
 $79 = $0 + 1240 | 0; //@line 2325
 $AsyncCtx = _emscripten_alloc_async_context(52, sp) | 0; //@line 2326
 __ZN4mbed10TimerEventC2Ev($79); //@line 2327
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 99; //@line 2330
  HEAP32[$AsyncCtx + 4 >> 2] = $79; //@line 2332
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 2334
  HEAP32[$AsyncCtx + 12 >> 2] = $16; //@line 2336
  HEAP32[$AsyncCtx + 16 >> 2] = $17; //@line 2338
  HEAP32[$AsyncCtx + 20 >> 2] = $12; //@line 2340
  HEAP32[$AsyncCtx + 24 >> 2] = $13; //@line 2342
  HEAP32[$AsyncCtx + 28 >> 2] = $15; //@line 2344
  HEAP32[$AsyncCtx + 32 >> 2] = $14; //@line 2346
  HEAP32[$AsyncCtx + 36 >> 2] = $18; //@line 2348
  HEAP32[$AsyncCtx + 40 >> 2] = $10; //@line 2350
  HEAP32[$AsyncCtx + 44 >> 2] = $11; //@line 2352
  HEAP32[$AsyncCtx + 48 >> 2] = $33; //@line 2354
  sp = STACKTOP; //@line 2355
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2358
 $92 = $0 + 1280 | 0; //@line 2359
 HEAP32[$92 >> 2] = 0; //@line 2360
 HEAP32[$92 + 4 >> 2] = 0; //@line 2360
 HEAP32[$92 + 8 >> 2] = 0; //@line 2360
 HEAP32[$92 + 12 >> 2] = 0; //@line 2360
 HEAP8[$0 + 1296 >> 0] = 1; //@line 2362
 HEAP32[$79 >> 2] = 684; //@line 2363
 HEAP32[$0 + 668 >> 2] = $16; //@line 2365
 HEAP32[$0 + 672 >> 2] = $17; //@line 2367
 HEAP32[$0 + 652 >> 2] = $12; //@line 2369
 HEAP32[$0 + 656 >> 2] = $13; //@line 2371
 HEAP32[$0 + 664 >> 2] = $15; //@line 2373
 HEAP32[$0 + 660 >> 2] = $14; //@line 2375
 HEAP32[$0 + 676 >> 2] = $18; //@line 2377
 HEAP32[$0 + 680 >> 2] = $10; //@line 2379
 HEAP32[$0 + 684 >> 2] = $11; //@line 2381
 HEAP32[$0 + 788 >> 2] = 0; //@line 2383
 if (($18 | 0) == -1) {
  $106 = _emscripten_asm_const_ii(7, $0 | 0) | 0; //@line 2386
  return;
 }
 _emscripten_asm_const_iii(5, HEAP32[$33 >> 2] | 0, 1) | 0; //@line 2390
 $106 = _emscripten_asm_const_ii(7, $0 | 0) | 0; //@line 2391
 return;
}
function _mbedtls_aes_crypt_cbc($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$04056 = 0, $$04255 = 0, $$044 = 0, $$04554 = 0, $$14160 = 0, $$14160$us = 0, $$14359 = 0, $$14359$us = 0, $$14658 = 0, $$14658$us = 0, $10 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $127 = 0, $13 = 0, $131 = 0, $135 = 0, $139 = 0, $14 = 0, $143 = 0, $147 = 0, $15 = 0, $151 = 0, $155 = 0, $159 = 0, $16 = 0, $163 = 0, $167 = 0, $17 = 0, $171 = 0, $175 = 0, $179 = 0, $18 = 0, $183 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $6 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 1957
 STACKTOP = STACKTOP + 16 | 0; //@line 1958
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1958
 $6 = sp; //@line 1959
 if ($2 & 15 | 0) {
  $$044 = -34; //@line 1963
  STACKTOP = sp; //@line 1964
  return $$044 | 0; //@line 1964
 }
 $10 = ($2 | 0) == 0; //@line 1967
 if (!$1) {
  if ($10) {
   $$044 = 0; //@line 1970
   STACKTOP = sp; //@line 1971
   return $$044 | 0; //@line 1971
  }
  $109 = $3 + 1 | 0; //@line 1973
  $110 = $3 + 2 | 0; //@line 1974
  $111 = $3 + 3 | 0; //@line 1975
  $112 = $3 + 4 | 0; //@line 1976
  $113 = $3 + 5 | 0; //@line 1977
  $114 = $3 + 6 | 0; //@line 1978
  $115 = $3 + 7 | 0; //@line 1979
  $116 = $3 + 8 | 0; //@line 1980
  $117 = $3 + 9 | 0; //@line 1981
  $118 = $3 + 10 | 0; //@line 1982
  $119 = $3 + 11 | 0; //@line 1983
  $120 = $3 + 12 | 0; //@line 1984
  $121 = $3 + 13 | 0; //@line 1985
  $122 = $3 + 14 | 0; //@line 1986
  $123 = $3 + 15 | 0; //@line 1987
  $$04056 = $5; //@line 1988
  $$04255 = $4; //@line 1988
  $$04554 = $2; //@line 1988
  while (1) {
   dest = $6; //@line 1990
   src = $$04255; //@line 1990
   stop = dest + 16 | 0; //@line 1990
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1990
    dest = dest + 1 | 0; //@line 1990
    src = src + 1 | 0; //@line 1990
   } while ((dest | 0) < (stop | 0));
   _mbedtls_internal_aes_decrypt($0, $$04255, $$04056) | 0; //@line 1991
   HEAP8[$$04056 >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$04056 >> 0]; //@line 1995
   $127 = $$04056 + 1 | 0; //@line 1996
   HEAP8[$127 >> 0] = HEAP8[$109 >> 0] ^ HEAP8[$127 >> 0]; //@line 2000
   $131 = $$04056 + 2 | 0; //@line 2001
   HEAP8[$131 >> 0] = HEAP8[$110 >> 0] ^ HEAP8[$131 >> 0]; //@line 2005
   $135 = $$04056 + 3 | 0; //@line 2006
   HEAP8[$135 >> 0] = HEAP8[$111 >> 0] ^ HEAP8[$135 >> 0]; //@line 2010
   $139 = $$04056 + 4 | 0; //@line 2011
   HEAP8[$139 >> 0] = HEAP8[$112 >> 0] ^ HEAP8[$139 >> 0]; //@line 2015
   $143 = $$04056 + 5 | 0; //@line 2016
   HEAP8[$143 >> 0] = HEAP8[$113 >> 0] ^ HEAP8[$143 >> 0]; //@line 2020
   $147 = $$04056 + 6 | 0; //@line 2021
   HEAP8[$147 >> 0] = HEAP8[$114 >> 0] ^ HEAP8[$147 >> 0]; //@line 2025
   $151 = $$04056 + 7 | 0; //@line 2026
   HEAP8[$151 >> 0] = HEAP8[$115 >> 0] ^ HEAP8[$151 >> 0]; //@line 2030
   $155 = $$04056 + 8 | 0; //@line 2031
   HEAP8[$155 >> 0] = HEAP8[$116 >> 0] ^ HEAP8[$155 >> 0]; //@line 2035
   $159 = $$04056 + 9 | 0; //@line 2036
   HEAP8[$159 >> 0] = HEAP8[$117 >> 0] ^ HEAP8[$159 >> 0]; //@line 2040
   $163 = $$04056 + 10 | 0; //@line 2041
   HEAP8[$163 >> 0] = HEAP8[$118 >> 0] ^ HEAP8[$163 >> 0]; //@line 2045
   $167 = $$04056 + 11 | 0; //@line 2046
   HEAP8[$167 >> 0] = HEAP8[$119 >> 0] ^ HEAP8[$167 >> 0]; //@line 2050
   $171 = $$04056 + 12 | 0; //@line 2051
   HEAP8[$171 >> 0] = HEAP8[$120 >> 0] ^ HEAP8[$171 >> 0]; //@line 2055
   $175 = $$04056 + 13 | 0; //@line 2056
   HEAP8[$175 >> 0] = HEAP8[$121 >> 0] ^ HEAP8[$175 >> 0]; //@line 2060
   $179 = $$04056 + 14 | 0; //@line 2061
   HEAP8[$179 >> 0] = HEAP8[$122 >> 0] ^ HEAP8[$179 >> 0]; //@line 2065
   $183 = $$04056 + 15 | 0; //@line 2066
   HEAP8[$183 >> 0] = HEAP8[$123 >> 0] ^ HEAP8[$183 >> 0]; //@line 2070
   dest = $3; //@line 2071
   src = $6; //@line 2071
   stop = dest + 16 | 0; //@line 2071
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 2071
    dest = dest + 1 | 0; //@line 2071
    src = src + 1 | 0; //@line 2071
   } while ((dest | 0) < (stop | 0));
   $$04554 = $$04554 + -16 | 0; //@line 2074
   if (!$$04554) {
    $$044 = 0; //@line 2077
    break;
   } else {
    $$04056 = $$04056 + 16 | 0; //@line 2080
    $$04255 = $$04255 + 16 | 0; //@line 2080
   }
  }
  STACKTOP = sp; //@line 2083
  return $$044 | 0; //@line 2083
 }
 if ($10) {
  $$044 = 0; //@line 2086
  STACKTOP = sp; //@line 2087
  return $$044 | 0; //@line 2087
 }
 $12 = $3 + 1 | 0; //@line 2090
 $13 = $3 + 2 | 0; //@line 2091
 $14 = $3 + 3 | 0; //@line 2092
 $15 = $3 + 4 | 0; //@line 2093
 $16 = $3 + 5 | 0; //@line 2094
 $17 = $3 + 6 | 0; //@line 2095
 $18 = $3 + 7 | 0; //@line 2096
 $19 = $3 + 8 | 0; //@line 2097
 $20 = $3 + 9 | 0; //@line 2098
 $21 = $3 + 10 | 0; //@line 2099
 $22 = $3 + 11 | 0; //@line 2100
 $23 = $3 + 12 | 0; //@line 2101
 $24 = $3 + 13 | 0; //@line 2102
 $25 = $3 + 14 | 0; //@line 2103
 $26 = $3 + 15 | 0; //@line 2104
 if (($1 | 0) == 1) {
  $$14160$us = $5; //@line 2106
  $$14359$us = $4; //@line 2106
  $$14658$us = $2; //@line 2106
  while (1) {
   HEAP8[$$14160$us >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$14359$us >> 0]; //@line 2111
   HEAP8[$$14160$us + 1 >> 0] = HEAP8[$12 >> 0] ^ HEAP8[$$14359$us + 1 >> 0]; //@line 2117
   HEAP8[$$14160$us + 2 >> 0] = HEAP8[$13 >> 0] ^ HEAP8[$$14359$us + 2 >> 0]; //@line 2123
   HEAP8[$$14160$us + 3 >> 0] = HEAP8[$14 >> 0] ^ HEAP8[$$14359$us + 3 >> 0]; //@line 2129
   HEAP8[$$14160$us + 4 >> 0] = HEAP8[$15 >> 0] ^ HEAP8[$$14359$us + 4 >> 0]; //@line 2135
   HEAP8[$$14160$us + 5 >> 0] = HEAP8[$16 >> 0] ^ HEAP8[$$14359$us + 5 >> 0]; //@line 2141
   HEAP8[$$14160$us + 6 >> 0] = HEAP8[$17 >> 0] ^ HEAP8[$$14359$us + 6 >> 0]; //@line 2147
   HEAP8[$$14160$us + 7 >> 0] = HEAP8[$18 >> 0] ^ HEAP8[$$14359$us + 7 >> 0]; //@line 2153
   HEAP8[$$14160$us + 8 >> 0] = HEAP8[$19 >> 0] ^ HEAP8[$$14359$us + 8 >> 0]; //@line 2159
   HEAP8[$$14160$us + 9 >> 0] = HEAP8[$20 >> 0] ^ HEAP8[$$14359$us + 9 >> 0]; //@line 2165
   HEAP8[$$14160$us + 10 >> 0] = HEAP8[$21 >> 0] ^ HEAP8[$$14359$us + 10 >> 0]; //@line 2171
   HEAP8[$$14160$us + 11 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$$14359$us + 11 >> 0]; //@line 2177
   HEAP8[$$14160$us + 12 >> 0] = HEAP8[$23 >> 0] ^ HEAP8[$$14359$us + 12 >> 0]; //@line 2183
   HEAP8[$$14160$us + 13 >> 0] = HEAP8[$24 >> 0] ^ HEAP8[$$14359$us + 13 >> 0]; //@line 2189
   HEAP8[$$14160$us + 14 >> 0] = HEAP8[$25 >> 0] ^ HEAP8[$$14359$us + 14 >> 0]; //@line 2195
   HEAP8[$$14160$us + 15 >> 0] = HEAP8[$26 >> 0] ^ HEAP8[$$14359$us + 15 >> 0]; //@line 2201
   _mbedtls_internal_aes_encrypt($0, $$14160$us, $$14160$us) | 0; //@line 2202
   dest = $3; //@line 2203
   src = $$14160$us; //@line 2203
   stop = dest + 16 | 0; //@line 2203
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 2203
    dest = dest + 1 | 0; //@line 2203
    src = src + 1 | 0; //@line 2203
   } while ((dest | 0) < (stop | 0));
   $$14658$us = $$14658$us + -16 | 0; //@line 2206
   if (!$$14658$us) {
    $$044 = 0; //@line 2209
    break;
   } else {
    $$14160$us = $$14160$us + 16 | 0; //@line 2212
    $$14359$us = $$14359$us + 16 | 0; //@line 2212
   }
  }
  STACKTOP = sp; //@line 2215
  return $$044 | 0; //@line 2215
 } else {
  $$14160 = $5; //@line 2217
  $$14359 = $4; //@line 2217
  $$14658 = $2; //@line 2217
  while (1) {
   HEAP8[$$14160 >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$14359 >> 0]; //@line 2222
   HEAP8[$$14160 + 1 >> 0] = HEAP8[$12 >> 0] ^ HEAP8[$$14359 + 1 >> 0]; //@line 2228
   HEAP8[$$14160 + 2 >> 0] = HEAP8[$13 >> 0] ^ HEAP8[$$14359 + 2 >> 0]; //@line 2234
   HEAP8[$$14160 + 3 >> 0] = HEAP8[$14 >> 0] ^ HEAP8[$$14359 + 3 >> 0]; //@line 2240
   HEAP8[$$14160 + 4 >> 0] = HEAP8[$15 >> 0] ^ HEAP8[$$14359 + 4 >> 0]; //@line 2246
   HEAP8[$$14160 + 5 >> 0] = HEAP8[$16 >> 0] ^ HEAP8[$$14359 + 5 >> 0]; //@line 2252
   HEAP8[$$14160 + 6 >> 0] = HEAP8[$17 >> 0] ^ HEAP8[$$14359 + 6 >> 0]; //@line 2258
   HEAP8[$$14160 + 7 >> 0] = HEAP8[$18 >> 0] ^ HEAP8[$$14359 + 7 >> 0]; //@line 2264
   HEAP8[$$14160 + 8 >> 0] = HEAP8[$19 >> 0] ^ HEAP8[$$14359 + 8 >> 0]; //@line 2270
   HEAP8[$$14160 + 9 >> 0] = HEAP8[$20 >> 0] ^ HEAP8[$$14359 + 9 >> 0]; //@line 2276
   HEAP8[$$14160 + 10 >> 0] = HEAP8[$21 >> 0] ^ HEAP8[$$14359 + 10 >> 0]; //@line 2282
   HEAP8[$$14160 + 11 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$$14359 + 11 >> 0]; //@line 2288
   HEAP8[$$14160 + 12 >> 0] = HEAP8[$23 >> 0] ^ HEAP8[$$14359 + 12 >> 0]; //@line 2294
   HEAP8[$$14160 + 13 >> 0] = HEAP8[$24 >> 0] ^ HEAP8[$$14359 + 13 >> 0]; //@line 2300
   HEAP8[$$14160 + 14 >> 0] = HEAP8[$25 >> 0] ^ HEAP8[$$14359 + 14 >> 0]; //@line 2306
   HEAP8[$$14160 + 15 >> 0] = HEAP8[$26 >> 0] ^ HEAP8[$$14359 + 15 >> 0]; //@line 2312
   _mbedtls_internal_aes_decrypt($0, $$14160, $$14160) | 0; //@line 2313
   dest = $3; //@line 2314
   src = $$14160; //@line 2314
   stop = dest + 16 | 0; //@line 2314
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 2314
    dest = dest + 1 | 0; //@line 2314
    src = src + 1 | 0; //@line 2314
   } while ((dest | 0) < (stop | 0));
   $$14658 = $$14658 + -16 | 0; //@line 2317
   if (!$$14658) {
    $$044 = 0; //@line 2320
    break;
   } else {
    $$14160 = $$14160 + 16 | 0; //@line 2323
    $$14359 = $$14359 + 16 | 0; //@line 2323
   }
  }
  STACKTOP = sp; //@line 2326
  return $$044 | 0; //@line 2326
 }
 return 0; //@line 2328
}
function _initialize($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$037 = 0, $1 = 0, $101 = 0, $102 = 0, $103 = 0, $105 = 0, $106 = 0, $109 = 0, $115 = 0, $116 = 0, $117 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $130 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $140 = 0, $142 = 0, $148 = 0, $149 = 0, $150 = 0, $159 = 0, $160 = 0, $161 = 0, $163 = 0, $167 = 0, $173 = 0, $174 = 0, $175 = 0, $177 = 0, $18 = 0, $25 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $45 = 0, $46 = 0, $52 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $70 = 0, $73 = 0, $77 = 0, $78 = 0, $85 = 0, $86 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5591
 $1 = $0 + 4 | 0; //@line 5592
 if (HEAP8[(HEAP32[$1 >> 2] | 0) + 56 >> 0] | 0) {
  return;
 }
 $7 = HEAP32[HEAP32[$0 >> 2] >> 2] | 0; //@line 5601
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5602
 FUNCTION_TABLE_v[$7 & 7](); //@line 5603
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 597; //@line 5606
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5608
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 5610
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 5612
  sp = STACKTOP; //@line 5613
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5616
 $13 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 5619
 $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5620
 $14 = FUNCTION_TABLE_i[$13 & 7]() | 0; //@line 5621
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 598; //@line 5624
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 5626
  HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 5628
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 5630
  sp = STACKTOP; //@line 5631
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 5634
 $18 = HEAP32[$14 >> 2] | 0; //@line 5635
 do {
  if (!$18) {
   $AsyncCtx20 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5639
   _mbed_assert_internal(15107, 15109, 41); //@line 5640
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 599; //@line 5643
    HEAP32[$AsyncCtx20 + 4 >> 2] = $0; //@line 5645
    HEAP32[$AsyncCtx20 + 8 >> 2] = $1; //@line 5647
    HEAP32[$AsyncCtx20 + 12 >> 2] = $0; //@line 5649
    HEAP32[$AsyncCtx20 + 16 >> 2] = $14; //@line 5651
    sp = STACKTOP; //@line 5652
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 5655
    $$0 = 1e6; //@line 5656
    break;
   }
  } else {
   $$0 = $18; //@line 5660
  }
 } while (0);
 $25 = HEAP32[$14 + 4 >> 2] | 0; //@line 5664
 do {
  if (($25 + -4 | 0) >>> 0 > 28) {
   $AsyncCtx16 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5669
   _mbed_assert_internal(15107, 15109, 47); //@line 5670
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 600; //@line 5673
    HEAP32[$AsyncCtx16 + 4 >> 2] = $$0; //@line 5675
    HEAP32[$AsyncCtx16 + 8 >> 2] = $1; //@line 5677
    HEAP32[$AsyncCtx16 + 12 >> 2] = $0; //@line 5679
    HEAP32[$AsyncCtx16 + 16 >> 2] = $0; //@line 5681
    sp = STACKTOP; //@line 5682
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx16 | 0); //@line 5685
    $$037 = 32; //@line 5686
    break;
   }
  } else {
   $$037 = $25; //@line 5690
  }
 } while (0);
 $32 = 7 << $$037 + -4; //@line 5694
 $33 = ___muldi3($32 | 0, 0, 1e6, 0) | 0; //@line 5695
 $34 = tempRet0; //@line 5696
 $35 = _i64Add($$0 | 0, 0, -1, -1) | 0; //@line 5697
 $37 = _i64Add($35 | 0, tempRet0 | 0, $33 | 0, $34 | 0) | 0; //@line 5699
 $39 = ___udivdi3($37 | 0, tempRet0 | 0, $$0 | 0, 0) | 0; //@line 5701
 $40 = tempRet0; //@line 5702
 $41 = HEAP32[$1 >> 2] | 0; //@line 5703
 HEAP32[$41 >> 2] = 0; //@line 5704
 HEAP32[$41 + 4 >> 2] = 0; //@line 5706
 $45 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5709
 $AsyncCtx6 = _emscripten_alloc_async_context(40, sp) | 0; //@line 5710
 $46 = FUNCTION_TABLE_i[$45 & 7]() | 0; //@line 5711
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 601; //@line 5714
  HEAP32[$AsyncCtx6 + 4 >> 2] = $1; //@line 5716
  HEAP32[$AsyncCtx6 + 8 >> 2] = $$0; //@line 5718
  HEAP32[$AsyncCtx6 + 12 >> 2] = $$037; //@line 5720
  HEAP32[$AsyncCtx6 + 16 >> 2] = $32; //@line 5722
  $52 = $AsyncCtx6 + 24 | 0; //@line 5724
  HEAP32[$52 >> 2] = $39; //@line 5726
  HEAP32[$52 + 4 >> 2] = $40; //@line 5729
  HEAP32[$AsyncCtx6 + 32 >> 2] = $0; //@line 5731
  HEAP32[$AsyncCtx6 + 36 >> 2] = $0; //@line 5733
  sp = STACKTOP; //@line 5734
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 5737
 $58 = HEAP32[$1 >> 2] | 0; //@line 5738
 $59 = $58 + 32 | 0; //@line 5739
 HEAP32[$59 >> 2] = $46; //@line 5740
 $60 = $58 + 40 | 0; //@line 5741
 $61 = $60; //@line 5742
 HEAP32[$61 >> 2] = 0; //@line 5744
 HEAP32[$61 + 4 >> 2] = 0; //@line 5747
 $65 = $58 + 8 | 0; //@line 5748
 HEAP32[$65 >> 2] = $$0; //@line 5749
 $66 = _bitshift64Shl(1, 0, $$037 | 0) | 0; //@line 5750
 $68 = _i64Add($66 | 0, tempRet0 | 0, -1, 0) | 0; //@line 5752
 $70 = $58 + 12 | 0; //@line 5754
 HEAP32[$70 >> 2] = $68; //@line 5755
 HEAP32[$58 + 16 >> 2] = $32; //@line 5757
 $73 = $58 + 24 | 0; //@line 5759
 HEAP32[$73 >> 2] = $39; //@line 5761
 HEAP32[$73 + 4 >> 2] = $40; //@line 5764
 $77 = $58 + 48 | 0; //@line 5765
 $78 = $77; //@line 5766
 HEAP32[$78 >> 2] = 0; //@line 5768
 HEAP32[$78 + 4 >> 2] = 0; //@line 5771
 HEAP8[$58 + 56 >> 0] = 1; //@line 5773
 $85 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5776
 $AsyncCtx9 = _emscripten_alloc_async_context(32, sp) | 0; //@line 5777
 $86 = FUNCTION_TABLE_i[$85 & 7]() | 0; //@line 5778
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 602; //@line 5781
  HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 5783
  HEAP32[$AsyncCtx9 + 8 >> 2] = $0; //@line 5785
  HEAP32[$AsyncCtx9 + 12 >> 2] = $59; //@line 5787
  HEAP32[$AsyncCtx9 + 16 >> 2] = $70; //@line 5789
  HEAP32[$AsyncCtx9 + 20 >> 2] = $65; //@line 5791
  HEAP32[$AsyncCtx9 + 24 >> 2] = $60; //@line 5793
  HEAP32[$AsyncCtx9 + 28 >> 2] = $77; //@line 5795
  sp = STACKTOP; //@line 5796
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 5799
 if (($86 | 0) != (HEAP32[(HEAP32[$1 >> 2] | 0) + 32 >> 2] | 0)) {
  $101 = $86 - (HEAP32[$59 >> 2] | 0) & HEAP32[$70 >> 2]; //@line 5808
  HEAP32[$59 >> 2] = $86; //@line 5809
  $102 = HEAP32[$65 >> 2] | 0; //@line 5810
  L30 : do {
   if (($102 | 0) < 1e6) {
    switch ($102 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 22; //@line 5819
      break L30;
     }
    }
    $103 = ___muldi3($101 | 0, 0, 1e6, 0) | 0; //@line 5823
    $105 = _bitshift64Lshr($103 | 0, tempRet0 | 0, 15) | 0; //@line 5825
    $106 = tempRet0; //@line 5826
    $109 = $60; //@line 5829
    $115 = _i64Add(HEAP32[$109 >> 2] | 0, HEAP32[$109 + 4 >> 2] | 0, $101 * 1e6 & 32704 | 0, 0) | 0; //@line 5835
    $116 = tempRet0; //@line 5836
    $117 = $60; //@line 5837
    HEAP32[$117 >> 2] = $115; //@line 5839
    HEAP32[$117 + 4 >> 2] = $116; //@line 5842
    if ($116 >>> 0 < 0 | ($116 | 0) == 0 & $115 >>> 0 < 32768) {
     $173 = $105; //@line 5849
     $174 = $106; //@line 5849
    } else {
     $126 = _i64Add($105 | 0, $106 | 0, 1, 0) | 0; //@line 5851
     $127 = tempRet0; //@line 5852
     $128 = _i64Add($115 | 0, $116 | 0, -32768, -1) | 0; //@line 5853
     $130 = $60; //@line 5855
     HEAP32[$130 >> 2] = $128; //@line 5857
     HEAP32[$130 + 4 >> 2] = tempRet0; //@line 5860
     $173 = $126; //@line 5861
     $174 = $127; //@line 5861
    }
   } else {
    switch ($102 | 0) {
    case 1e6:
     {
      $173 = $101; //@line 5866
      $174 = 0; //@line 5866
      break;
     }
    default:
     {
      label = 22; //@line 5870
     }
    }
   }
  } while (0);
  if ((label | 0) == 22) {
   $134 = ___muldi3($101 | 0, 0, 1e6, 0) | 0; //@line 5876
   $135 = tempRet0; //@line 5877
   $136 = ___udivdi3($134 | 0, $135 | 0, $102 | 0, 0) | 0; //@line 5878
   $137 = tempRet0; //@line 5879
   $138 = ___muldi3($136 | 0, $137 | 0, $102 | 0, 0) | 0; //@line 5880
   $140 = _i64Subtract($134 | 0, $135 | 0, $138 | 0, tempRet0 | 0) | 0; //@line 5882
   $142 = $60; //@line 5884
   $148 = _i64Add($140 | 0, tempRet0 | 0, HEAP32[$142 >> 2] | 0, HEAP32[$142 + 4 >> 2] | 0) | 0; //@line 5890
   $149 = tempRet0; //@line 5891
   $150 = $60; //@line 5892
   HEAP32[$150 >> 2] = $148; //@line 5894
   HEAP32[$150 + 4 >> 2] = $149; //@line 5897
   if ($149 >>> 0 < 0 | ($149 | 0) == 0 & $148 >>> 0 < $102 >>> 0) {
    $173 = $136; //@line 5904
    $174 = $137; //@line 5904
   } else {
    $159 = _i64Add($136 | 0, $137 | 0, 1, 0) | 0; //@line 5906
    $160 = tempRet0; //@line 5907
    $161 = _i64Subtract($148 | 0, $149 | 0, $102 | 0, 0) | 0; //@line 5908
    $163 = $60; //@line 5910
    HEAP32[$163 >> 2] = $161; //@line 5912
    HEAP32[$163 + 4 >> 2] = tempRet0; //@line 5915
    $173 = $159; //@line 5916
    $174 = $160; //@line 5916
   }
  }
  $167 = $77; //@line 5919
  $175 = _i64Add(HEAP32[$167 >> 2] | 0, HEAP32[$167 + 4 >> 2] | 0, $173 | 0, $174 | 0) | 0; //@line 5925
  $177 = $77; //@line 5927
  HEAP32[$177 >> 2] = $175; //@line 5929
  HEAP32[$177 + 4 >> 2] = tempRet0; //@line 5932
 }
 $AsyncCtx12 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5934
 _schedule_interrupt($0); //@line 5935
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 603; //@line 5938
  sp = STACKTOP; //@line 5939
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 5942
 return;
}
function __ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$026$$026$i = 0, $$026$i = 0, $$028$i = 0, $$028$i4751 = 0, $$028$lcssa = 0, $$02862 = 0, $$029$be = 0, $$029$lcssa = 0, $$02961 = 0, $$1 = 0, $$127$i53 = 0, $$130$$$$i = 0, $$2$i = 0, $$2$i54 = 0, $$256 = 0, $$3 = 0, $$3$i52 = 0, $$lcssa76 = 0, $$lcssa77 = 0, $$pre = 0, $$sroa$034$0$lcssa = 0, $$sroa$034$058 = 0, $$sroa$1038$0$lcssa = 0, $$sroa$1038$060 = 0, $$sroa$636$0$lcssa = 0, $$sroa$636$059 = 0, $10 = 0, $107 = 0, $11 = 0, $112 = 0, $115 = 0, $117 = 0, $119 = 0, $12 = 0, $121 = 0, $123 = 0, $127 = 0, $128 = 0, $13 = 0, $132 = 0, $17 = 0, $18 = 0, $19 = 0, $27 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $42 = 0, $45 = 0, $52 = 0, $69 = 0, $7 = 0, $71 = 0, $83 = 0, $88 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $98 = 0, $indvars$iv = 0, $indvars$iv$i = 0, $indvars$iv$i31 = 0, $indvars$iv80 = 0, $wide$trip$count$i = 0, label = 0;
 $7 = HEAP8[$1 + 4 >> 0] | 0; //@line 22246
 L1 : do {
  if (!($7 << 24 >> 24)) {
   $$028$lcssa = 0; //@line 22250
   $$029$lcssa = 7; //@line 22250
   $$sroa$034$0$lcssa = 0; //@line 22250
   $$sroa$1038$0$lcssa = 0; //@line 22250
   $$sroa$636$0$lcssa = 0; //@line 22250
   $92 = 0; //@line 22250
  } else {
   $9 = HEAP32[$1 >> 2] | 0; //@line 22252
   $10 = $0 + 20 | 0; //@line 22253
   $11 = $0 + 112 | 0; //@line 22254
   $$02862 = 0; //@line 22255
   $$02961 = 7; //@line 22255
   $$lcssa76 = 0; //@line 22255
   $$sroa$034$058 = 0; //@line 22255
   $$sroa$1038$060 = 0; //@line 22255
   $$sroa$636$059 = 0; //@line 22255
   $13 = 0; //@line 22255
   while (1) {
    $12 = $9 + $13 | 0; //@line 22257
    if ((HEAP8[$12 >> 0] | 0) != 3) {
     $$028$lcssa = $$02862; //@line 22261
     $$029$lcssa = $$02961; //@line 22261
     $$sroa$034$0$lcssa = $$sroa$034$058; //@line 22261
     $$sroa$1038$0$lcssa = $$sroa$1038$060; //@line 22261
     $$sroa$636$0$lcssa = $$sroa$636$059; //@line 22261
     $92 = $$lcssa76; //@line 22261
     break L1;
    }
    $17 = HEAP8[$12 + 1 >> 0] | 0; //@line 22265
    $18 = $17 & 15; //@line 22266
    $19 = ($17 & 255) >>> 4; //@line 22267
    $27 = HEAPU8[$12 + 3 >> 0] << 8 | HEAPU8[$12 + 2 >> 0]; //@line 22275
    $28 = $27 & 65535; //@line 22276
    $30 = HEAP8[$12 + 4 >> 0] | 0; //@line 22278
    $32 = ($30 & 255) >>> 4; //@line 22280
    $34 = $32 & 7; //@line 22282
    $35 = $30 & 15; //@line 22283
    $36 = $13 + 5 | 0; //@line 22284
    $37 = $36 & 255; //@line 22285
    $$1 = $28 << 16 >> 16 == 0 & $34 << 24 >> 24 == 0 ? 6 : 7; //@line 22289
    L6 : do {
     switch ($32 & 7) {
     case 6:
     case 0:
      {
       $42 = HEAP8[$10 >> 0] | 0; //@line 22295
       if (!($42 << 24 >> 24)) {
        $$029$be = $$1; //@line 22298
        $$lcssa77 = $28; //@line 22298
       } else {
        $45 = $42 & 255; //@line 22301
        if ($34 << 24 >> 24 != 6) {
         $$256 = $$1; //@line 22303
         $indvars$iv = 0; //@line 22303
         while (1) {
          if (!($27 & 1 << ($indvars$iv & 15))) {
           $$3 = $$256; //@line 22310
          } else {
           $$3 = (HEAP32[(HEAP32[$11 >> 2] | 0) + ($indvars$iv * 12 | 0) >> 2] | 0) == 0 ? $$256 & -2 : $$256; //@line 22318
          }
          $indvars$iv = $indvars$iv + 1 | 0; //@line 22320
          if ($indvars$iv >>> 0 >= $45 >>> 0) {
           $$029$be = $$3; //@line 22325
           $$lcssa77 = $28; //@line 22325
           break L6;
          } else {
           $$256 = $$3; //@line 22323
          }
         }
        }
        $$pre = HEAP32[$11 >> 2] | 0; //@line 22330
        $52 = $28; //@line 22331
        $indvars$iv80 = 0; //@line 22331
        while (1) {
         if (!(HEAP32[$$pre + ($indvars$iv80 * 12 | 0) >> 2] | 0)) {
          $132 = $52; //@line 22337
         } else {
          $132 = (1 << ($indvars$iv80 & 15) | $52 & 65535) & 65535; //@line 22344
         }
         $indvars$iv80 = $indvars$iv80 + 1 | 0; //@line 22346
         if ($indvars$iv80 >>> 0 >= $45 >>> 0) {
          $$029$be = $$1; //@line 22351
          $$lcssa77 = $132; //@line 22351
          break;
         } else {
          $52 = $132; //@line 22349
         }
        }
       }
       break;
      }
     default:
      {
       $$029$be = 6; //@line 22359
       $$lcssa77 = $28; //@line 22359
      }
     }
    } while (0);
    if (($7 & 255) > ($37 & 255)) {
     $$02862 = $37; //@line 22366
     $$02961 = $$029$be; //@line 22366
     $$lcssa76 = $$lcssa77; //@line 22366
     $$sroa$034$058 = $35; //@line 22366
     $$sroa$1038$060 = $18; //@line 22366
     $$sroa$636$059 = $19; //@line 22366
     $13 = $36 & 255; //@line 22366
    } else {
     $$028$lcssa = $37; //@line 22368
     $$029$lcssa = $$029$be; //@line 22368
     $$sroa$034$0$lcssa = $35; //@line 22368
     $$sroa$1038$0$lcssa = $18; //@line 22368
     $$sroa$636$0$lcssa = $19; //@line 22368
     $92 = $$lcssa77; //@line 22368
     break L1;
    }
   }
  }
 } while (0);
 $69 = HEAP8[$1 + 7 >> 0] | 0; //@line 22377
 $71 = HEAP8[$1 + 8 >> 0] | 0; //@line 22379
 if (!(HEAP8[$1 + 6 >> 0] | 0)) {
  if ($$sroa$636$0$lcssa << 24 >> 24 == 15 & $$sroa$1038$0$lcssa << 24 >> 24 == 15) {
   $$026$i = $71; //@line 22388
   $$028$i = $69; //@line 22388
  } else {
   $$028$i4751 = $69; //@line 22390
   $$127$i53 = $71; //@line 22390
   $$2$i54 = HEAP8[$1 + 9 >> 0] | 0; //@line 22390
   $$3$i52 = 0; //@line 22390
   HEAP8[$2 >> 0] = $$028$i4751; //@line 22391
   HEAP8[$3 >> 0] = $$127$i53; //@line 22392
   HEAP8[$4 >> 0] = $$2$i54; //@line 22393
   HEAP8[$5 >> 0] = $$028$lcssa; //@line 22394
   return $$3$i52 | 0; //@line 22395
  }
 } else {
  $$026$i = $$sroa$1038$0$lcssa; //@line 22398
  $$028$i = $$sroa$636$0$lcssa; //@line 22398
 }
 if (!($$029$lcssa << 24 >> 24)) {
  $$028$i4751 = $$028$i; //@line 22402
  $$127$i53 = $$026$i; //@line 22402
  $$2$i54 = $$sroa$034$0$lcssa; //@line 22402
  $$3$i52 = 0; //@line 22402
  HEAP8[$2 >> 0] = $$028$i4751; //@line 22403
  HEAP8[$3 >> 0] = $$127$i53; //@line 22404
  HEAP8[$4 >> 0] = $$2$i54; //@line 22405
  HEAP8[$5 >> 0] = $$028$lcssa; //@line 22406
  return $$3$i52 | 0; //@line 22407
 }
 $83 = HEAP32[$0 + 112 >> 2] | 0; //@line 22414
 L30 : do {
  if ($$028$i << 24 >> 24 < (HEAP8[$0 + 26 >> 0] | 0) ? 1 : $$028$i << 24 >> 24 > (HEAP8[$0 + 27 >> 0] | 0)) {
   label = 24; //@line 22420
  } else {
   $88 = HEAP8[$0 + 20 >> 0] | 0; //@line 22423
   if (!($88 << 24 >> 24)) {
    label = 24; //@line 22426
   } else {
    $90 = $88 & 255; //@line 22428
    $91 = $92 & 65535; //@line 22429
    $indvars$iv$i31 = 0; //@line 22430
    while (1) {
     if (1 << ($indvars$iv$i31 & 15) & $91 | 0) {
      $98 = HEAP8[$83 + ($indvars$iv$i31 * 12 | 0) + 8 >> 0] | 0; //@line 22438
      if (!(($98 & 15) > $$028$i << 24 >> 24 ? 1 : ($98 & 255) >>> 4 << 24 >> 24 < $$028$i << 24 >> 24)) {
       $117 = $$029$lcssa; //@line 22445
       break L30;
      }
     }
     $indvars$iv$i31 = $indvars$iv$i31 + 1 | 0; //@line 22449
     if ($indvars$iv$i31 >>> 0 >= $90 >>> 0) {
      label = 24; //@line 22454
      break;
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 24) {
  $117 = $$029$lcssa & -3; //@line 22463
 }
 $107 = HEAP8[$0 + 22 >> 0] | 0; //@line 22466
 $112 = $$026$i << 24 >> 24 < $107 << 24 >> 24 ? 1 : $$026$i << 24 >> 24 > (HEAP8[$0 + 21 >> 0] | 0); //@line 22471
 $115 = ($107 & 255 | 0) > ($$026$i << 24 >> 24 | 0); //@line 22474
 $$130$$$$i = $112 ? $115 ? $117 : $117 & -5 : $117; //@line 22477
 $$$026$$026$i = $115 & $112 ? $107 : $$026$i; //@line 22479
 $119 = $$130$$$$i << 24 >> 24 == 7; //@line 22480
 $$2$i = $$sroa$034$0$lcssa << 24 >> 24 == 0 & $119 ? 1 : $$sroa$034$0$lcssa; //@line 22483
 if (!$119) {
  $$028$i4751 = $$028$i; //@line 22485
  $$127$i53 = $$$026$$026$i; //@line 22485
  $$2$i54 = $$2$i; //@line 22485
  $$3$i52 = $$130$$$$i; //@line 22485
  HEAP8[$2 >> 0] = $$028$i4751; //@line 22486
  HEAP8[$3 >> 0] = $$127$i53; //@line 22487
  HEAP8[$4 >> 0] = $$2$i54; //@line 22488
  HEAP8[$5 >> 0] = $$028$lcssa; //@line 22489
  return $$3$i52 | 0; //@line 22490
 }
 $121 = $0 + 120 | 0; //@line 22492
 $123 = $0 + 128 | 0; //@line 22494
 _memset(HEAP32[$121 >> 2] | 0, 0, HEAPU8[$123 >> 0] << 1 | 0) | 0; //@line 22498
 $127 = HEAP32[$121 >> 2] | 0; //@line 22499
 $128 = HEAP8[$123 >> 0] | 0; //@line 22500
 if (!(($127 | 0) != 0 & $128 << 24 >> 24 != 0)) {
  $$028$i4751 = $$028$i; //@line 22505
  $$127$i53 = $$$026$$026$i; //@line 22505
  $$2$i54 = $$2$i; //@line 22505
  $$3$i52 = 7; //@line 22505
  HEAP8[$2 >> 0] = $$028$i4751; //@line 22506
  HEAP8[$3 >> 0] = $$127$i53; //@line 22507
  HEAP8[$4 >> 0] = $$2$i54; //@line 22508
  HEAP8[$5 >> 0] = $$028$lcssa; //@line 22509
  return $$3$i52 | 0; //@line 22510
 }
 $wide$trip$count$i = $128 & 255; //@line 22512
 $indvars$iv$i = 0; //@line 22513
 do {
  HEAP16[$127 + ($indvars$iv$i << 1) >> 1] = $92; //@line 22516
  $indvars$iv$i = $indvars$iv$i + 1 | 0; //@line 22517
 } while (($indvars$iv$i | 0) != ($wide$trip$count$i | 0));
 $$028$i4751 = $$028$i; //@line 22520
 $$127$i53 = $$$026$$026$i; //@line 22520
 $$2$i54 = $$2$i; //@line 22520
 $$3$i52 = 7; //@line 22520
 HEAP8[$2 >> 0] = $$028$i4751; //@line 22526
 HEAP8[$3 >> 0] = $$127$i53; //@line 22527
 HEAP8[$4 >> 0] = $$2$i54; //@line 22528
 HEAP8[$5 >> 0] = $$028$lcssa; //@line 22529
 return $$3$i52 | 0; //@line 22530
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $15 = 0, $19 = 0, $2 = 0, $21 = 0, $26 = 0, $27 = 0, $3 = 0, $30 = 0, $33 = 0, $36 = 0, $37 = 0, $4 = 0, $41 = 0, $43 = 0, $48 = 0, $49 = 0, $52 = 0, $55 = 0, $6 = 0, $67 = 0, $68 = 0, $72 = 0, $74 = 0, $79 = 0, $80 = 0, $83 = 0, $86 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx22 = 0, $AsyncCtx25 = 0, $AsyncCtx28 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx43 = 0, $AsyncCtx47 = 0, $AsyncCtx8 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 4928
 STACKTOP = STACKTOP + 80 | 0; //@line 4929
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 4929
 $vararg_buffer5 = sp + 24 | 0; //@line 4930
 $vararg_buffer3 = sp + 16 | 0; //@line 4931
 $vararg_buffer1 = sp + 8 | 0; //@line 4932
 $2 = sp + 64 | 0; //@line 4934
 $3 = sp + 48 | 0; //@line 4935
 $4 = sp + 32 | 0; //@line 4936
 if (!$1) {
  _mbed_tracef(2, 12332, 13132, sp); //@line 4939
  $AsyncCtx47 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4940
  _mbed_assert_internal(15107, 12372, 763); //@line 4941
  if (___async) {
   HEAP32[$AsyncCtx47 >> 2] = 146; //@line 4944
   sp = STACKTOP; //@line 4945
   STACKTOP = sp; //@line 4946
   return;
  }
  _emscripten_free_async_context($AsyncCtx47 | 0); //@line 4948
  STACKTOP = sp; //@line 4949
  return;
 }
 $6 = $1 + 4 | 0; //@line 4951
 if (!(HEAP32[$6 >> 2] | 0)) {
  if ((HEAP32[$1 >> 2] | 0) == 1) {
   if (HEAP8[$1 + 10 >> 0] | 0) {
    _mbed_tracef(16, 12332, 13225, $vararg_buffer5); //@line 4962
   }
  }
  HEAP32[$0 + 1956 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 4968
  HEAP8[$0 + 1964 >> 0] = 0; //@line 4970
  $67 = $0 + 1892 | 0; //@line 4971
  $68 = HEAP32[$67 >> 2] | 0; //@line 4972
  if (!$68) {
   STACKTOP = sp; //@line 4975
   return;
  }
  $72 = HEAP32[$0 + 2288 >> 2] | 0; //@line 4979
  $74 = HEAP32[$68 + 4 >> 2] | 0; //@line 4981
  $AsyncCtx18 = _emscripten_alloc_async_context(20, sp) | 0; //@line 4982
  FUNCTION_TABLE_vii[$74 & 31]($4, $0 + 1880 | 0); //@line 4983
  if (___async) {
   HEAP32[$AsyncCtx18 >> 2] = 155; //@line 4986
   HEAP32[$AsyncCtx18 + 4 >> 2] = $67; //@line 4988
   HEAP32[$AsyncCtx18 + 8 >> 2] = $4; //@line 4990
   HEAP32[$AsyncCtx18 + 12 >> 2] = $72; //@line 4992
   HEAP32[$AsyncCtx18 + 16 >> 2] = $4; //@line 4994
   sp = STACKTOP; //@line 4995
   STACKTOP = sp; //@line 4996
   return;
  }
  _emscripten_free_async_context($AsyncCtx18 | 0); //@line 4998
  $79 = $4 + 12 | 0; //@line 5000
  HEAP32[$79 >> 2] = HEAP32[$67 >> 2]; //@line 5001
  $AsyncCtx25 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5002
  $80 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($72, $4, 2) | 0; //@line 5003
  if (___async) {
   HEAP32[$AsyncCtx25 >> 2] = 156; //@line 5006
   HEAP32[$AsyncCtx25 + 4 >> 2] = $79; //@line 5008
   HEAP32[$AsyncCtx25 + 8 >> 2] = $4; //@line 5010
   sp = STACKTOP; //@line 5011
   STACKTOP = sp; //@line 5012
   return;
  }
  _emscripten_free_async_context($AsyncCtx25 | 0); //@line 5014
  $83 = HEAP32[$79 >> 2] | 0; //@line 5015
  do {
   if ($83 | 0) {
    $86 = HEAP32[$83 + 8 >> 2] | 0; //@line 5020
    $AsyncCtx22 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5021
    FUNCTION_TABLE_vi[$86 & 1023]($4); //@line 5022
    if (___async) {
     HEAP32[$AsyncCtx22 >> 2] = 157; //@line 5025
     HEAP32[$AsyncCtx22 + 4 >> 2] = $80; //@line 5027
     sp = STACKTOP; //@line 5028
     STACKTOP = sp; //@line 5029
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx22 | 0); //@line 5031
     break;
    }
   }
  } while (0);
  if ($80 | 0) {
   STACKTOP = sp; //@line 5038
   return;
  }
  $AsyncCtx35 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5040
  _mbed_assert_internal(13588, 12372, 816); //@line 5041
  if (___async) {
   HEAP32[$AsyncCtx35 >> 2] = 158; //@line 5044
   sp = STACKTOP; //@line 5045
   STACKTOP = sp; //@line 5046
   return;
  }
  _emscripten_free_async_context($AsyncCtx35 | 0); //@line 5048
  STACKTOP = sp; //@line 5049
  return;
 }
 HEAP8[$0 + 1964 >> 0] = 0; //@line 5052
 _memset($0 + 1975 | 0, 0, 255) | 0; //@line 5054
 HEAP16[$0 + 2230 >> 1] = 255; //@line 5056
 HEAP32[$vararg_buffer1 >> 2] = HEAP32[$6 >> 2]; //@line 5058
 _mbed_tracef(2, 12332, 13167, $vararg_buffer1); //@line 5059
 switch (HEAP32[$6 >> 2] | 0) {
 case 2:
  {
   $14 = $0 + 1892 | 0; //@line 5063
   $15 = HEAP32[$14 >> 2] | 0; //@line 5064
   if (!$15) {
    STACKTOP = sp; //@line 5067
    return;
   }
   $19 = HEAP32[$0 + 2288 >> 2] | 0; //@line 5071
   $21 = HEAP32[$15 + 4 >> 2] | 0; //@line 5073
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 5074
   FUNCTION_TABLE_vii[$21 & 31]($2, $0 + 1880 | 0); //@line 5075
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 147; //@line 5078
    HEAP32[$AsyncCtx + 4 >> 2] = $14; //@line 5080
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 5082
    HEAP32[$AsyncCtx + 12 >> 2] = $19; //@line 5084
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 5086
    sp = STACKTOP; //@line 5087
    STACKTOP = sp; //@line 5088
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 5090
   $26 = $2 + 12 | 0; //@line 5092
   HEAP32[$26 >> 2] = HEAP32[$14 >> 2]; //@line 5093
   $AsyncCtx31 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5094
   $27 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($19, $2, 3) | 0; //@line 5095
   if (___async) {
    HEAP32[$AsyncCtx31 >> 2] = 148; //@line 5098
    HEAP32[$AsyncCtx31 + 4 >> 2] = $26; //@line 5100
    HEAP32[$AsyncCtx31 + 8 >> 2] = $2; //@line 5102
    sp = STACKTOP; //@line 5103
    STACKTOP = sp; //@line 5104
    return;
   }
   _emscripten_free_async_context($AsyncCtx31 | 0); //@line 5106
   $30 = HEAP32[$26 >> 2] | 0; //@line 5107
   do {
    if ($30 | 0) {
     $33 = HEAP32[$30 + 8 >> 2] | 0; //@line 5112
     $AsyncCtx8 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5113
     FUNCTION_TABLE_vi[$33 & 1023]($2); //@line 5114
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 149; //@line 5117
      HEAP32[$AsyncCtx8 + 4 >> 2] = $27; //@line 5119
      sp = STACKTOP; //@line 5120
      STACKTOP = sp; //@line 5121
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx8 | 0); //@line 5123
      break;
     }
    }
   } while (0);
   if ($27 | 0) {
    STACKTOP = sp; //@line 5130
    return;
   }
   $AsyncCtx43 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5132
   _mbed_assert_internal(13588, 12372, 781); //@line 5133
   if (___async) {
    HEAP32[$AsyncCtx43 >> 2] = 150; //@line 5136
    sp = STACKTOP; //@line 5137
    STACKTOP = sp; //@line 5138
    return;
   }
   _emscripten_free_async_context($AsyncCtx43 | 0); //@line 5140
   STACKTOP = sp; //@line 5141
   return;
  }
 case 4:
  {
   _mbed_tracef(16, 12332, 13205, $vararg_buffer3); //@line 5145
   break;
  }
 default:
  {}
 }
 $36 = $0 + 1892 | 0; //@line 5151
 $37 = HEAP32[$36 >> 2] | 0; //@line 5152
 if (!$37) {
  STACKTOP = sp; //@line 5155
  return;
 }
 $41 = HEAP32[$0 + 2288 >> 2] | 0; //@line 5159
 $43 = HEAP32[$37 + 4 >> 2] | 0; //@line 5161
 $AsyncCtx11 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5162
 FUNCTION_TABLE_vii[$43 & 31]($3, $0 + 1880 | 0); //@line 5163
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 151; //@line 5166
  HEAP32[$AsyncCtx11 + 4 >> 2] = $36; //@line 5168
  HEAP32[$AsyncCtx11 + 8 >> 2] = $3; //@line 5170
  HEAP32[$AsyncCtx11 + 12 >> 2] = $41; //@line 5172
  HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 5174
  sp = STACKTOP; //@line 5175
  STACKTOP = sp; //@line 5176
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 5178
 $48 = $3 + 12 | 0; //@line 5180
 HEAP32[$48 >> 2] = HEAP32[$36 >> 2]; //@line 5181
 $AsyncCtx28 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5182
 $49 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($41, $3, 4) | 0; //@line 5183
 if (___async) {
  HEAP32[$AsyncCtx28 >> 2] = 152; //@line 5186
  HEAP32[$AsyncCtx28 + 4 >> 2] = $48; //@line 5188
  HEAP32[$AsyncCtx28 + 8 >> 2] = $3; //@line 5190
  sp = STACKTOP; //@line 5191
  STACKTOP = sp; //@line 5192
  return;
 }
 _emscripten_free_async_context($AsyncCtx28 | 0); //@line 5194
 $52 = HEAP32[$48 >> 2] | 0; //@line 5195
 do {
  if ($52 | 0) {
   $55 = HEAP32[$52 + 8 >> 2] | 0; //@line 5200
   $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5201
   FUNCTION_TABLE_vi[$55 & 1023]($3); //@line 5202
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 153; //@line 5205
    HEAP32[$AsyncCtx15 + 4 >> 2] = $49; //@line 5207
    sp = STACKTOP; //@line 5208
    STACKTOP = sp; //@line 5209
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 5211
    break;
   }
  }
 } while (0);
 if ($49 | 0) {
  STACKTOP = sp; //@line 5218
  return;
 }
 $AsyncCtx39 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5220
 _mbed_assert_internal(13588, 12372, 792); //@line 5221
 if (___async) {
  HEAP32[$AsyncCtx39 >> 2] = 154; //@line 5224
  sp = STACKTOP; //@line 5225
  STACKTOP = sp; //@line 5226
  return;
 }
 _emscripten_free_async_context($AsyncCtx39 | 0); //@line 5228
 STACKTOP = sp; //@line 5229
 return;
}
function _schedule_interrupt($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $1 = 0, $10 = 0, $104 = 0, $107 = 0, $109 = 0, $11 = 0, $112 = 0, $113 = 0, $115 = 0, $118 = 0, $126 = 0, $127 = 0, $128 = 0, $130 = 0, $132 = 0, $137 = 0, $14 = 0, $144 = 0, $146 = 0, $148 = 0, $151 = 0, $153 = 0, $160 = 0, $161 = 0, $164 = 0, $166 = 0, $168 = 0, $174 = 0, $175 = 0, $179 = 0, $187 = 0, $19 = 0, $195 = 0, $198 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $35 = 0, $36 = 0, $37 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $50 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $69 = 0, $70 = 0, $71 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $88 = 0, $89 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx22 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5959
 $1 = $0 + 4 | 0; //@line 5960
 $2 = HEAP32[$1 >> 2] | 0; //@line 5961
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5964
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5965
 $6 = FUNCTION_TABLE_i[$5 & 7]() | 0; //@line 5966
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 604; //@line 5969
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 5971
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 5973
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 5975
  sp = STACKTOP; //@line 5976
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5979
 $10 = HEAP32[$1 >> 2] | 0; //@line 5980
 $11 = $10 + 32 | 0; //@line 5981
 if (($6 | 0) != (HEAP32[$11 >> 2] | 0)) {
  $14 = $2 + 32 | 0; //@line 5985
  $19 = $6 - (HEAP32[$14 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 5990
  HEAP32[$14 >> 2] = $6; //@line 5991
  $21 = HEAP32[$2 + 8 >> 2] | 0; //@line 5993
  L6 : do {
   if (($21 | 0) < 1e6) {
    switch ($21 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 7; //@line 6002
      break L6;
     }
    }
    $22 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 6006
    $24 = _bitshift64Lshr($22 | 0, tempRet0 | 0, 15) | 0; //@line 6008
    $25 = tempRet0; //@line 6009
    $28 = $2 + 40 | 0; //@line 6012
    $29 = $28; //@line 6013
    $35 = _i64Add(HEAP32[$29 >> 2] | 0, HEAP32[$29 + 4 >> 2] | 0, $19 * 1e6 & 32704 | 0, 0) | 0; //@line 6019
    $36 = tempRet0; //@line 6020
    $37 = $28; //@line 6021
    HEAP32[$37 >> 2] = $35; //@line 6023
    HEAP32[$37 + 4 >> 2] = $36; //@line 6026
    if ($36 >>> 0 < 0 | ($36 | 0) == 0 & $35 >>> 0 < 32768) {
     $95 = $24; //@line 6033
     $96 = $25; //@line 6033
    } else {
     $46 = _i64Add($24 | 0, $25 | 0, 1, 0) | 0; //@line 6035
     $47 = tempRet0; //@line 6036
     $48 = _i64Add($35 | 0, $36 | 0, -32768, -1) | 0; //@line 6037
     $50 = $28; //@line 6039
     HEAP32[$50 >> 2] = $48; //@line 6041
     HEAP32[$50 + 4 >> 2] = tempRet0; //@line 6044
     $95 = $46; //@line 6045
     $96 = $47; //@line 6045
    }
   } else {
    switch ($21 | 0) {
    case 1e6:
     {
      $95 = $19; //@line 6050
      $96 = 0; //@line 6050
      break;
     }
    default:
     {
      label = 7; //@line 6054
     }
    }
   }
  } while (0);
  if ((label | 0) == 7) {
   $54 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 6060
   $55 = tempRet0; //@line 6061
   $56 = ___udivdi3($54 | 0, $55 | 0, $21 | 0, 0) | 0; //@line 6062
   $57 = tempRet0; //@line 6063
   $58 = ___muldi3($56 | 0, $57 | 0, $21 | 0, 0) | 0; //@line 6064
   $60 = _i64Subtract($54 | 0, $55 | 0, $58 | 0, tempRet0 | 0) | 0; //@line 6066
   $62 = $2 + 40 | 0; //@line 6068
   $63 = $62; //@line 6069
   $69 = _i64Add($60 | 0, tempRet0 | 0, HEAP32[$63 >> 2] | 0, HEAP32[$63 + 4 >> 2] | 0) | 0; //@line 6075
   $70 = tempRet0; //@line 6076
   $71 = $62; //@line 6077
   HEAP32[$71 >> 2] = $69; //@line 6079
   HEAP32[$71 + 4 >> 2] = $70; //@line 6082
   if ($70 >>> 0 < 0 | ($70 | 0) == 0 & $69 >>> 0 < $21 >>> 0) {
    $95 = $56; //@line 6089
    $96 = $57; //@line 6089
   } else {
    $80 = _i64Add($56 | 0, $57 | 0, 1, 0) | 0; //@line 6091
    $81 = tempRet0; //@line 6092
    $82 = _i64Subtract($69 | 0, $70 | 0, $21 | 0, 0) | 0; //@line 6093
    $84 = $62; //@line 6095
    HEAP32[$84 >> 2] = $82; //@line 6097
    HEAP32[$84 + 4 >> 2] = tempRet0; //@line 6100
    $95 = $80; //@line 6101
    $96 = $81; //@line 6101
   }
  }
  $88 = $2 + 48 | 0; //@line 6104
  $89 = $88; //@line 6105
  $97 = _i64Add(HEAP32[$89 >> 2] | 0, HEAP32[$89 + 4 >> 2] | 0, $95 | 0, $96 | 0) | 0; //@line 6111
  $99 = $88; //@line 6113
  HEAP32[$99 >> 2] = $97; //@line 6115
  HEAP32[$99 + 4 >> 2] = tempRet0; //@line 6118
 }
 $104 = HEAP32[$10 + 4 >> 2] | 0; //@line 6121
 if (!$104) {
  $195 = (HEAP32[$2 + 16 >> 2] | 0) + (HEAP32[$2 + 32 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 6131
  $198 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 6134
  $AsyncCtx22 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6135
  FUNCTION_TABLE_vi[$198 & 1023]($195); //@line 6136
  if (___async) {
   HEAP32[$AsyncCtx22 >> 2] = 610; //@line 6139
   sp = STACKTOP; //@line 6140
   return;
  } else {
   _emscripten_free_async_context($AsyncCtx22 | 0); //@line 6143
   return;
  }
 }
 $107 = $10 + 48 | 0; //@line 6148
 $109 = HEAP32[$107 >> 2] | 0; //@line 6150
 $112 = HEAP32[$107 + 4 >> 2] | 0; //@line 6153
 $113 = $104; //@line 6154
 $115 = HEAP32[$113 >> 2] | 0; //@line 6156
 $118 = HEAP32[$113 + 4 >> 2] | 0; //@line 6159
 if (!($118 >>> 0 > $112 >>> 0 | ($118 | 0) == ($112 | 0) & $115 >>> 0 > $109 >>> 0)) {
  $126 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 6168
  $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6169
  FUNCTION_TABLE_v[$126 & 7](); //@line 6170
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 605; //@line 6173
   sp = STACKTOP; //@line 6174
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6177
  return;
 }
 $127 = _i64Subtract($115 | 0, $118 | 0, $109 | 0, $112 | 0) | 0; //@line 6180
 $128 = tempRet0; //@line 6181
 $130 = HEAP32[$10 + 16 >> 2] | 0; //@line 6183
 $132 = $10 + 24 | 0; //@line 6185
 $137 = HEAP32[$132 + 4 >> 2] | 0; //@line 6190
 L29 : do {
  if ($128 >>> 0 > $137 >>> 0 | (($128 | 0) == ($137 | 0) ? $127 >>> 0 > (HEAP32[$132 >> 2] | 0) >>> 0 : 0)) {
   $$0$i = $130; //@line 6198
  } else {
   $144 = HEAP32[$10 + 8 >> 2] | 0; //@line 6201
   L31 : do {
    if (($144 | 0) < 1e6) {
     switch ($144 | 0) {
     case 32768:
      {
       break;
      }
     default:
      {
       break L31;
      }
     }
     $146 = _bitshift64Shl($127 | 0, $128 | 0, 15) | 0; //@line 6213
     $148 = ___udivdi3($146 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 6215
     $$0$i = $130 >>> 0 < $148 >>> 0 ? $130 : $148; //@line 6219
     break L29;
    } else {
     switch ($144 | 0) {
     case 1e6:
      {
       break;
      }
     default:
      {
       break L31;
      }
     }
     $$0$i = $130 >>> 0 < $127 >>> 0 ? $130 : $127; //@line 6232
     break L29;
    }
   } while (0);
   $151 = ___muldi3($127 | 0, $128 | 0, $144 | 0, 0) | 0; //@line 6236
   $153 = ___udivdi3($151 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 6238
   $$0$i = $130 >>> 0 < $153 >>> 0 ? $130 : $153; //@line 6242
  }
 } while (0);
 $160 = (HEAP32[$11 >> 2] | 0) + $$0$i & HEAP32[$10 + 12 >> 2]; //@line 6249
 $161 = $2 + 32 | 0; //@line 6250
 $164 = HEAP32[$0 >> 2] | 0; //@line 6253
 if (($160 | 0) == (HEAP32[$161 >> 2] | 0)) {
  $166 = HEAP32[$164 + 20 >> 2] | 0; //@line 6256
  $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6257
  FUNCTION_TABLE_v[$166 & 7](); //@line 6258
  if (___async) {
   HEAP32[$AsyncCtx7 >> 2] = 606; //@line 6261
   sp = STACKTOP; //@line 6262
   return;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6265
  return;
 }
 $168 = HEAP32[$164 + 16 >> 2] | 0; //@line 6269
 $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6270
 FUNCTION_TABLE_vi[$168 & 1023]($160); //@line 6271
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 607; //@line 6274
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 6276
  HEAP32[$AsyncCtx11 + 8 >> 2] = $161; //@line 6278
  HEAP32[$AsyncCtx11 + 12 >> 2] = $160; //@line 6280
  sp = STACKTOP; //@line 6281
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 6284
 $174 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 6287
 $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6288
 $175 = FUNCTION_TABLE_i[$174 & 7]() | 0; //@line 6289
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 608; //@line 6292
  HEAP32[$AsyncCtx14 + 4 >> 2] = $161; //@line 6294
  HEAP32[$AsyncCtx14 + 8 >> 2] = $160; //@line 6296
  HEAP32[$AsyncCtx14 + 12 >> 2] = $0; //@line 6298
  sp = STACKTOP; //@line 6299
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 6302
 $179 = HEAP32[$161 >> 2] | 0; //@line 6303
 if ($160 >>> 0 > $179 >>> 0) {
  if (!($175 >>> 0 >= $160 >>> 0 | $175 >>> 0 < $179 >>> 0)) {
   return;
  }
 } else {
  if (!($175 >>> 0 >= $160 >>> 0 & $175 >>> 0 < $179 >>> 0)) {
   return;
  }
 }
 $187 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 6322
 $AsyncCtx18 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6323
 FUNCTION_TABLE_v[$187 & 7](); //@line 6324
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 609; //@line 6327
  sp = STACKTOP; //@line 6328
  return;
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 6331
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$038 = 0, $$040 = 0, $101 = 0, $104 = 0, $11 = 0, $112 = 0, $115 = 0, $118 = 0, $122 = 0, $125 = 0, $136 = 0, $139 = 0, $142 = 0, $146 = 0, $149 = 0, $18 = 0, $21 = 0, $22 = 0, $29 = 0, $30 = 0, $33 = 0, $4 = 0, $45 = 0, $47 = 0, $51 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $65 = 0, $7 = 0, $76 = 0, $79 = 0, $8 = 0, $93 = 0, $96 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 21538
 $4 = HEAP8[$1 + 1 >> 0] | 0; //@line 21540
 $6 = HEAP32[$1 + 4 >> 2] | 0; //@line 21542
 $7 = $0 + 4 | 0; //@line 21543
 $8 = HEAP32[$7 >> 2] | 0; //@line 21544
 $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 72 >> 2] | 0; //@line 21547
 $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 21548
 FUNCTION_TABLE_vi[$11 & 1023]($8); //@line 21549
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 517; //@line 21552
  HEAP8[$AsyncCtx + 4 >> 0] = $4; //@line 21554
  HEAP32[$AsyncCtx + 8 >> 2] = $7; //@line 21556
  HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 21558
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 21560
  HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 21562
  HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 21564
  sp = STACKTOP; //@line 21565
  return 0; //@line 21566
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 21568
 $18 = HEAP32[$7 >> 2] | 0; //@line 21569
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 40 >> 2] | 0; //@line 21572
 $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 21573
 $22 = FUNCTION_TABLE_ii[$21 & 15]($18) | 0; //@line 21574
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 518; //@line 21577
  HEAP8[$AsyncCtx2 + 4 >> 0] = $4; //@line 21579
  HEAP32[$AsyncCtx2 + 8 >> 2] = $7; //@line 21581
  HEAP32[$AsyncCtx2 + 12 >> 2] = $6; //@line 21583
  HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 21585
  HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 21587
  HEAP32[$AsyncCtx2 + 24 >> 2] = $2; //@line 21589
  sp = STACKTOP; //@line 21590
  return 0; //@line 21591
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 21593
 $29 = $22 << 24 >> 24 == 0; //@line 21594
 $30 = HEAP32[$7 >> 2] | 0; //@line 21595
 $33 = HEAP32[(HEAP32[$30 >> 2] | 0) + 76 >> 2] | 0; //@line 21598
 $AsyncCtx5 = _emscripten_alloc_async_context(28, sp) | 0; //@line 21599
 FUNCTION_TABLE_vi[$33 & 1023]($30); //@line 21600
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 519; //@line 21603
  HEAP8[$AsyncCtx5 + 4 >> 0] = $29 & 1; //@line 21606
  HEAP8[$AsyncCtx5 + 5 >> 0] = $4; //@line 21608
  HEAP32[$AsyncCtx5 + 8 >> 2] = $7; //@line 21610
  HEAP32[$AsyncCtx5 + 12 >> 2] = $6; //@line 21612
  HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 21614
  HEAP32[$AsyncCtx5 + 20 >> 2] = $1; //@line 21616
  HEAP32[$AsyncCtx5 + 24 >> 2] = $2; //@line 21618
  sp = STACKTOP; //@line 21619
  return 0; //@line 21620
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 21622
 if (!$29) {
  $$0 = 0; //@line 21624
  return $$0 | 0; //@line 21625
 }
 if (!(HEAP32[$1 + 20 >> 2] | 0)) {
  $45 = HEAP32[$0 + 112 >> 2] | 0; //@line 21632
  $47 = HEAPU8[$1 >> 0] | 0; //@line 21634
  $51 = HEAP32[$45 + ($47 * 12 | 0) + 4 >> 2] | 0; //@line 21638
  $$040 = ($51 | 0) == 0 ? HEAP32[$45 + ($47 * 12 | 0) >> 2] | 0 : $51; //@line 21641
 } else {
  $$040 = $6; //@line 21643
 }
 $56 = HEAP32[$0 + 96 >> 2] | 0; //@line 21648
 $58 = HEAP32[$0 + 104 >> 2] | 0; //@line 21650
 $59 = $4 & 255; //@line 21651
 $61 = HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + $59 >> 0] | 0; //@line 21653
 $62 = HEAP32[$7 >> 2] | 0; //@line 21654
 $65 = HEAP32[(HEAP32[$62 >> 2] | 0) + 72 >> 2] | 0; //@line 21657
 $AsyncCtx9 = _emscripten_alloc_async_context(44, sp) | 0; //@line 21658
 FUNCTION_TABLE_vi[$65 & 1023]($62); //@line 21659
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 520; //@line 21662
  HEAP32[$AsyncCtx9 + 4 >> 2] = $7; //@line 21664
  HEAP32[$AsyncCtx9 + 8 >> 2] = $$040; //@line 21666
  HEAP8[$AsyncCtx9 + 12 >> 0] = $4; //@line 21668
  HEAP32[$AsyncCtx9 + 16 >> 2] = $0; //@line 21670
  HEAP32[$AsyncCtx9 + 20 >> 2] = $1; //@line 21672
  HEAP8[$AsyncCtx9 + 24 >> 0] = $61; //@line 21674
  HEAP32[$AsyncCtx9 + 28 >> 2] = $56; //@line 21676
  HEAP32[$AsyncCtx9 + 32 >> 2] = $58; //@line 21678
  HEAP32[$AsyncCtx9 + 36 >> 2] = $59; //@line 21680
  HEAP32[$AsyncCtx9 + 40 >> 2] = $2; //@line 21682
  sp = STACKTOP; //@line 21683
  return 0; //@line 21684
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 21686
 $76 = HEAP32[$7 >> 2] | 0; //@line 21687
 $79 = HEAP32[(HEAP32[$76 >> 2] | 0) + 32 >> 2] | 0; //@line 21690
 $AsyncCtx12 = _emscripten_alloc_async_context(40, sp) | 0; //@line 21691
 FUNCTION_TABLE_vii[$79 & 31]($76, $$040); //@line 21692
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 521; //@line 21695
  HEAP8[$AsyncCtx12 + 4 >> 0] = $4; //@line 21697
  HEAP32[$AsyncCtx12 + 8 >> 2] = $0; //@line 21699
  HEAP32[$AsyncCtx12 + 12 >> 2] = $7; //@line 21701
  HEAP32[$AsyncCtx12 + 16 >> 2] = $1; //@line 21703
  HEAP8[$AsyncCtx12 + 20 >> 0] = $61; //@line 21705
  HEAP32[$AsyncCtx12 + 24 >> 2] = $56; //@line 21707
  HEAP32[$AsyncCtx12 + 28 >> 2] = $58; //@line 21709
  HEAP32[$AsyncCtx12 + 32 >> 2] = $59; //@line 21711
  HEAP32[$AsyncCtx12 + 36 >> 2] = $2; //@line 21713
  sp = STACKTOP; //@line 21714
  return 0; //@line 21715
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 21717
 do {
  if ($4 << 24 >> 24 == 7) {
   if (!(HEAP8[$0 + 14 >> 0] | 0)) {
    label = 19; //@line 21725
   } else {
    $93 = HEAP32[$7 >> 2] | 0; //@line 21727
    $96 = HEAP32[(HEAP32[$93 >> 2] | 0) + 16 >> 2] | 0; //@line 21730
    $101 = HEAP32[$1 + 8 >> 2] & 65535; //@line 21735
    $104 = (HEAP8[$1 + 18 >> 0] | 0) != 0; //@line 21738
    $AsyncCtx16 = _emscripten_alloc_async_context(32, sp) | 0; //@line 21739
    FUNCTION_TABLE_viiiiiiiiiiiiiii[$96 & 1]($93, 0, 5e4, ($61 & 255) * 1e3 | 0, 0, 83333, 5, $101, 0, 0, 1, 0, 0, 0, $104); //@line 21740
    if (___async) {
     HEAP32[$AsyncCtx16 >> 2] = 522; //@line 21743
     HEAP32[$AsyncCtx16 + 4 >> 2] = $1; //@line 21745
     HEAP32[$AsyncCtx16 + 8 >> 2] = $56; //@line 21747
     HEAP32[$AsyncCtx16 + 12 >> 2] = $58; //@line 21749
     HEAP32[$AsyncCtx16 + 16 >> 2] = $59; //@line 21751
     HEAP32[$AsyncCtx16 + 20 >> 2] = $7; //@line 21753
     HEAP8[$AsyncCtx16 + 24 >> 0] = $61; //@line 21755
     HEAP32[$AsyncCtx16 + 28 >> 2] = $2; //@line 21757
     sp = STACKTOP; //@line 21758
     return 0; //@line 21759
    } else {
     _emscripten_free_async_context($AsyncCtx16 | 0); //@line 21761
     $$038 = 0; //@line 21762
     break;
    }
   }
  } else {
   label = 19; //@line 21767
  }
 } while (0);
 do {
  if ((label | 0) == 19) {
   $112 = HEAP32[$7 >> 2] | 0; //@line 21772
   $115 = HEAP32[(HEAP32[$112 >> 2] | 0) + 16 >> 2] | 0; //@line 21775
   $118 = HEAPU8[$1 + 2 >> 0] | 0; //@line 21778
   $122 = HEAP32[$1 + 8 >> 2] & 65535; //@line 21782
   $125 = (HEAP8[$1 + 18 >> 0] | 0) != 0; //@line 21785
   $AsyncCtx20 = _emscripten_alloc_async_context(32, sp) | 0; //@line 21786
   FUNCTION_TABLE_viiiiiiiiiiiiiii[$115 & 1]($112, 1, $118, $61 & 255, 1, 0, 8, $122, 0, 0, 0, 0, 0, 1, $125); //@line 21787
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 523; //@line 21790
    HEAP32[$AsyncCtx20 + 4 >> 2] = $1; //@line 21792
    HEAP32[$AsyncCtx20 + 8 >> 2] = $56; //@line 21794
    HEAP32[$AsyncCtx20 + 12 >> 2] = $58; //@line 21796
    HEAP32[$AsyncCtx20 + 16 >> 2] = $59; //@line 21798
    HEAP32[$AsyncCtx20 + 20 >> 2] = $7; //@line 21800
    HEAP8[$AsyncCtx20 + 24 >> 0] = $61; //@line 21802
    HEAP32[$AsyncCtx20 + 28 >> 2] = $2; //@line 21804
    sp = STACKTOP; //@line 21805
    return 0; //@line 21806
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 21808
    $$038 = 1; //@line 21809
    break;
   }
  }
 } while (0);
 $136 = HEAP32[$7 >> 2] | 0; //@line 21820
 $139 = HEAP32[(HEAP32[$136 >> 2] | 0) + 44 >> 2] | 0; //@line 21823
 $142 = (HEAPU8[((HEAP8[$1 + 17 >> 0] | 0) == 0 ? $56 : $58) + $59 >> 0] | 0) + 13 & 255; //@line 21826
 $AsyncCtx24 = _emscripten_alloc_async_context(16, sp) | 0; //@line 21827
 FUNCTION_TABLE_viii[$139 & 7]($136, $$038, $142); //@line 21828
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 524; //@line 21831
  HEAP32[$AsyncCtx24 + 4 >> 2] = $7; //@line 21833
  HEAP8[$AsyncCtx24 + 8 >> 0] = $61; //@line 21835
  HEAP32[$AsyncCtx24 + 12 >> 2] = $2; //@line 21837
  sp = STACKTOP; //@line 21838
  return 0; //@line 21839
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 21841
 $146 = HEAP32[$7 >> 2] | 0; //@line 21842
 $149 = HEAP32[(HEAP32[$146 >> 2] | 0) + 76 >> 2] | 0; //@line 21845
 $AsyncCtx27 = _emscripten_alloc_async_context(12, sp) | 0; //@line 21846
 FUNCTION_TABLE_vi[$149 & 1023]($146); //@line 21847
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 525; //@line 21850
  HEAP8[$AsyncCtx27 + 4 >> 0] = $61; //@line 21852
  HEAP32[$AsyncCtx27 + 8 >> 2] = $2; //@line 21854
  sp = STACKTOP; //@line 21855
  return 0; //@line 21856
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 21858
 HEAP8[$2 >> 0] = $61; //@line 21859
 $$0 = 1; //@line 21860
 return $$0 | 0; //@line 21861
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 16993
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16995
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16997
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16999
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17001
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17003
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17005
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17007
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17009
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17011
 $$pre = HEAP32[$12 >> 2] | 0; //@line 17012
 if ($$pre | 0) {
  $21 = HEAP32[$$pre + 4 >> 2] | 0; //@line 17016
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 17017
  FUNCTION_TABLE_vii[$21 & 31]($8, $6); //@line 17018
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 468; //@line 17021
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 17022
   HEAP32[$22 >> 2] = $4; //@line 17023
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 17024
   HEAP32[$23 >> 2] = $6; //@line 17025
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 17026
   HEAP32[$24 >> 2] = $8; //@line 17027
   $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 17028
   HEAP32[$25 >> 2] = $10; //@line 17029
   $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 17030
   HEAP32[$26 >> 2] = $14; //@line 17031
   $27 = $ReallocAsyncCtx2 + 24 | 0; //@line 17032
   HEAP32[$27 >> 2] = $12; //@line 17033
   $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 17034
   HEAP32[$28 >> 2] = $2; //@line 17035
   $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 17036
   HEAP32[$29 >> 2] = $16; //@line 17037
   $30 = $ReallocAsyncCtx2 + 36 | 0; //@line 17038
   HEAP32[$30 >> 2] = $18; //@line 17039
   sp = STACKTOP; //@line 17040
   return;
  }
  ___async_unwind = 0; //@line 17043
  HEAP32[$ReallocAsyncCtx2 >> 2] = 468; //@line 17044
  $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 17045
  HEAP32[$22 >> 2] = $4; //@line 17046
  $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 17047
  HEAP32[$23 >> 2] = $6; //@line 17048
  $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 17049
  HEAP32[$24 >> 2] = $8; //@line 17050
  $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 17051
  HEAP32[$25 >> 2] = $10; //@line 17052
  $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 17053
  HEAP32[$26 >> 2] = $14; //@line 17054
  $27 = $ReallocAsyncCtx2 + 24 | 0; //@line 17055
  HEAP32[$27 >> 2] = $12; //@line 17056
  $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 17057
  HEAP32[$28 >> 2] = $2; //@line 17058
  $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 17059
  HEAP32[$29 >> 2] = $16; //@line 17060
  $30 = $ReallocAsyncCtx2 + 36 | 0; //@line 17061
  HEAP32[$30 >> 2] = $18; //@line 17062
  sp = STACKTOP; //@line 17063
  return;
 }
 HEAP32[$2 >> 2] = 0; //@line 17066
 $31 = $10 + 12 | 0; //@line 17067
 HEAP32[$10 >> 2] = 7; //@line 17068
 HEAP32[$10 + 4 >> 2] = 0; //@line 17070
 HEAP32[$10 + 8 >> 2] = $4; //@line 17072
 HEAP32[$31 >> 2] = 924; //@line 17073
 $32 = $4 + 1244 | 0; //@line 17074
 if (($32 | 0) == ($10 | 0)) {
  $59 = HEAP32[233] | 0; //@line 17078
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 17079
  FUNCTION_TABLE_vi[$59 & 1023]($10); //@line 17080
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 472; //@line 17083
   $60 = $ReallocAsyncCtx6 + 4 | 0; //@line 17084
   HEAP32[$60 >> 2] = $4; //@line 17085
   $61 = $ReallocAsyncCtx6 + 8 | 0; //@line 17086
   HEAP32[$61 >> 2] = $8; //@line 17087
   $62 = $ReallocAsyncCtx6 + 12 | 0; //@line 17088
   HEAP32[$62 >> 2] = $10; //@line 17089
   $63 = $ReallocAsyncCtx6 + 16 | 0; //@line 17090
   HEAP32[$63 >> 2] = $14; //@line 17091
   $64 = $ReallocAsyncCtx6 + 20 | 0; //@line 17092
   HEAP32[$64 >> 2] = $16; //@line 17093
   $65 = $ReallocAsyncCtx6 + 24 | 0; //@line 17094
   HEAP32[$65 >> 2] = $18; //@line 17095
   sp = STACKTOP; //@line 17096
   return;
  }
  ___async_unwind = 0; //@line 17099
  HEAP32[$ReallocAsyncCtx6 >> 2] = 472; //@line 17100
  $60 = $ReallocAsyncCtx6 + 4 | 0; //@line 17101
  HEAP32[$60 >> 2] = $4; //@line 17102
  $61 = $ReallocAsyncCtx6 + 8 | 0; //@line 17103
  HEAP32[$61 >> 2] = $8; //@line 17104
  $62 = $ReallocAsyncCtx6 + 12 | 0; //@line 17105
  HEAP32[$62 >> 2] = $10; //@line 17106
  $63 = $ReallocAsyncCtx6 + 16 | 0; //@line 17107
  HEAP32[$63 >> 2] = $14; //@line 17108
  $64 = $ReallocAsyncCtx6 + 20 | 0; //@line 17109
  HEAP32[$64 >> 2] = $16; //@line 17110
  $65 = $ReallocAsyncCtx6 + 24 | 0; //@line 17111
  HEAP32[$65 >> 2] = $18; //@line 17112
  sp = STACKTOP; //@line 17113
  return;
 }
 $34 = $4 + 1256 | 0; //@line 17116
 $35 = HEAP32[$34 >> 2] | 0; //@line 17117
 if (!$35) {
  $49 = HEAP32[232] | 0; //@line 17121
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 17122
  FUNCTION_TABLE_vii[$49 & 31]($32, $10); //@line 17123
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 471; //@line 17126
   $50 = $ReallocAsyncCtx5 + 4 | 0; //@line 17127
   HEAP32[$50 >> 2] = $31; //@line 17128
   $51 = $ReallocAsyncCtx5 + 8 | 0; //@line 17129
   HEAP32[$51 >> 2] = $34; //@line 17130
   $52 = $ReallocAsyncCtx5 + 12 | 0; //@line 17131
   HEAP32[$52 >> 2] = $4; //@line 17132
   $53 = $ReallocAsyncCtx5 + 16 | 0; //@line 17133
   HEAP32[$53 >> 2] = $8; //@line 17134
   $54 = $ReallocAsyncCtx5 + 20 | 0; //@line 17135
   HEAP32[$54 >> 2] = $10; //@line 17136
   $55 = $ReallocAsyncCtx5 + 24 | 0; //@line 17137
   HEAP32[$55 >> 2] = $14; //@line 17138
   $56 = $ReallocAsyncCtx5 + 28 | 0; //@line 17139
   HEAP32[$56 >> 2] = $16; //@line 17140
   $57 = $ReallocAsyncCtx5 + 32 | 0; //@line 17141
   HEAP32[$57 >> 2] = $18; //@line 17142
   sp = STACKTOP; //@line 17143
   return;
  }
  ___async_unwind = 0; //@line 17146
  HEAP32[$ReallocAsyncCtx5 >> 2] = 471; //@line 17147
  $50 = $ReallocAsyncCtx5 + 4 | 0; //@line 17148
  HEAP32[$50 >> 2] = $31; //@line 17149
  $51 = $ReallocAsyncCtx5 + 8 | 0; //@line 17150
  HEAP32[$51 >> 2] = $34; //@line 17151
  $52 = $ReallocAsyncCtx5 + 12 | 0; //@line 17152
  HEAP32[$52 >> 2] = $4; //@line 17153
  $53 = $ReallocAsyncCtx5 + 16 | 0; //@line 17154
  HEAP32[$53 >> 2] = $8; //@line 17155
  $54 = $ReallocAsyncCtx5 + 20 | 0; //@line 17156
  HEAP32[$54 >> 2] = $10; //@line 17157
  $55 = $ReallocAsyncCtx5 + 24 | 0; //@line 17158
  HEAP32[$55 >> 2] = $14; //@line 17159
  $56 = $ReallocAsyncCtx5 + 28 | 0; //@line 17160
  HEAP32[$56 >> 2] = $16; //@line 17161
  $57 = $ReallocAsyncCtx5 + 32 | 0; //@line 17162
  HEAP32[$57 >> 2] = $18; //@line 17163
  sp = STACKTOP; //@line 17164
  return;
 } else {
  $38 = HEAP32[$35 + 8 >> 2] | 0; //@line 17168
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 17169
  FUNCTION_TABLE_vi[$38 & 1023]($32); //@line 17170
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 470; //@line 17173
   $39 = $ReallocAsyncCtx4 + 4 | 0; //@line 17174
   HEAP32[$39 >> 2] = $31; //@line 17175
   $40 = $ReallocAsyncCtx4 + 8 | 0; //@line 17176
   HEAP32[$40 >> 2] = $34; //@line 17177
   $41 = $ReallocAsyncCtx4 + 12 | 0; //@line 17178
   HEAP32[$41 >> 2] = $4; //@line 17179
   $42 = $ReallocAsyncCtx4 + 16 | 0; //@line 17180
   HEAP32[$42 >> 2] = $8; //@line 17181
   $43 = $ReallocAsyncCtx4 + 20 | 0; //@line 17182
   HEAP32[$43 >> 2] = $10; //@line 17183
   $44 = $ReallocAsyncCtx4 + 24 | 0; //@line 17184
   HEAP32[$44 >> 2] = $14; //@line 17185
   $45 = $ReallocAsyncCtx4 + 28 | 0; //@line 17186
   HEAP32[$45 >> 2] = $32; //@line 17187
   $46 = $ReallocAsyncCtx4 + 32 | 0; //@line 17188
   HEAP32[$46 >> 2] = $16; //@line 17189
   $47 = $ReallocAsyncCtx4 + 36 | 0; //@line 17190
   HEAP32[$47 >> 2] = $18; //@line 17191
   sp = STACKTOP; //@line 17192
   return;
  }
  ___async_unwind = 0; //@line 17195
  HEAP32[$ReallocAsyncCtx4 >> 2] = 470; //@line 17196
  $39 = $ReallocAsyncCtx4 + 4 | 0; //@line 17197
  HEAP32[$39 >> 2] = $31; //@line 17198
  $40 = $ReallocAsyncCtx4 + 8 | 0; //@line 17199
  HEAP32[$40 >> 2] = $34; //@line 17200
  $41 = $ReallocAsyncCtx4 + 12 | 0; //@line 17201
  HEAP32[$41 >> 2] = $4; //@line 17202
  $42 = $ReallocAsyncCtx4 + 16 | 0; //@line 17203
  HEAP32[$42 >> 2] = $8; //@line 17204
  $43 = $ReallocAsyncCtx4 + 20 | 0; //@line 17205
  HEAP32[$43 >> 2] = $10; //@line 17206
  $44 = $ReallocAsyncCtx4 + 24 | 0; //@line 17207
  HEAP32[$44 >> 2] = $14; //@line 17208
  $45 = $ReallocAsyncCtx4 + 28 | 0; //@line 17209
  HEAP32[$45 >> 2] = $32; //@line 17210
  $46 = $ReallocAsyncCtx4 + 32 | 0; //@line 17211
  HEAP32[$46 >> 2] = $16; //@line 17212
  $47 = $ReallocAsyncCtx4 + 36 | 0; //@line 17213
  HEAP32[$47 >> 2] = $18; //@line 17214
  sp = STACKTOP; //@line 17215
  return;
 }
}
function __ZN7LoRaMac11schedule_txEv__async_cb_302($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $67 = 0, $68 = 0, $71 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 20254
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20256
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20258
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20260
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20262
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20264
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20266
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20268
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20270
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20272
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20274
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20276
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20278
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20280
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 20282
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 20284
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 20286
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 20288
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 20290
 if (HEAP8[___async_retval >> 0] & 1) {
  $67 = HEAP8[$6 >> 0] | 0; //@line 20298
  HEAP32[$24 >> 2] = HEAPU8[$10 >> 0]; //@line 20299
  HEAP32[$24 + 4 >> 2] = $67; //@line 20301
  _mbed_tracef(16, 13704, 13982, $24); //@line 20302
  $68 = HEAP32[$2 >> 2] | 0; //@line 20303
  $71 = HEAP32[(HEAP32[$68 >> 2] | 0) + 72 >> 2] | 0; //@line 20306
  $72 = HEAP8[$4 >> 0] | 0; //@line 20307
  $74 = HEAP8[$18 + 1129 >> 0] | 0; //@line 20309
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(56) | 0; //@line 20310
  $75 = FUNCTION_TABLE_iiii[$71 & 15]($68, $72, $74) | 0; //@line 20311
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 401; //@line 20314
   $76 = $ReallocAsyncCtx3 + 4 | 0; //@line 20315
   HEAP32[$76 >> 2] = $2; //@line 20316
   $77 = $ReallocAsyncCtx3 + 8 | 0; //@line 20317
   HEAP32[$77 >> 2] = $18; //@line 20318
   $78 = $ReallocAsyncCtx3 + 12 | 0; //@line 20319
   HEAP32[$78 >> 2] = $16; //@line 20320
   $79 = $ReallocAsyncCtx3 + 16 | 0; //@line 20321
   HEAP32[$79 >> 2] = $4; //@line 20322
   $80 = $ReallocAsyncCtx3 + 20 | 0; //@line 20323
   HEAP32[$80 >> 2] = $20; //@line 20324
   $81 = $ReallocAsyncCtx3 + 24 | 0; //@line 20325
   HEAP32[$81 >> 2] = $22; //@line 20326
   $82 = $ReallocAsyncCtx3 + 28 | 0; //@line 20327
   HEAP32[$82 >> 2] = $28; //@line 20328
   $83 = $ReallocAsyncCtx3 + 32 | 0; //@line 20329
   HEAP32[$83 >> 2] = $30; //@line 20330
   $84 = $ReallocAsyncCtx3 + 36 | 0; //@line 20331
   HEAP32[$84 >> 2] = $12; //@line 20332
   $85 = $ReallocAsyncCtx3 + 40 | 0; //@line 20333
   HEAP32[$85 >> 2] = $10; //@line 20334
   $86 = $ReallocAsyncCtx3 + 44 | 0; //@line 20335
   HEAP32[$86 >> 2] = $32; //@line 20336
   $87 = $ReallocAsyncCtx3 + 48 | 0; //@line 20337
   HEAP32[$87 >> 2] = $34; //@line 20338
   $88 = $ReallocAsyncCtx3 + 52 | 0; //@line 20339
   HEAP32[$88 >> 2] = $36; //@line 20340
   sp = STACKTOP; //@line 20341
   return;
  }
  HEAP8[___async_retval >> 0] = $75; //@line 20345
  ___async_unwind = 0; //@line 20346
  HEAP32[$ReallocAsyncCtx3 >> 2] = 401; //@line 20347
  $76 = $ReallocAsyncCtx3 + 4 | 0; //@line 20348
  HEAP32[$76 >> 2] = $2; //@line 20349
  $77 = $ReallocAsyncCtx3 + 8 | 0; //@line 20350
  HEAP32[$77 >> 2] = $18; //@line 20351
  $78 = $ReallocAsyncCtx3 + 12 | 0; //@line 20352
  HEAP32[$78 >> 2] = $16; //@line 20353
  $79 = $ReallocAsyncCtx3 + 16 | 0; //@line 20354
  HEAP32[$79 >> 2] = $4; //@line 20355
  $80 = $ReallocAsyncCtx3 + 20 | 0; //@line 20356
  HEAP32[$80 >> 2] = $20; //@line 20357
  $81 = $ReallocAsyncCtx3 + 24 | 0; //@line 20358
  HEAP32[$81 >> 2] = $22; //@line 20359
  $82 = $ReallocAsyncCtx3 + 28 | 0; //@line 20360
  HEAP32[$82 >> 2] = $28; //@line 20361
  $83 = $ReallocAsyncCtx3 + 32 | 0; //@line 20362
  HEAP32[$83 >> 2] = $30; //@line 20363
  $84 = $ReallocAsyncCtx3 + 36 | 0; //@line 20364
  HEAP32[$84 >> 2] = $12; //@line 20365
  $85 = $ReallocAsyncCtx3 + 40 | 0; //@line 20366
  HEAP32[$85 >> 2] = $10; //@line 20367
  $86 = $ReallocAsyncCtx3 + 44 | 0; //@line 20368
  HEAP32[$86 >> 2] = $32; //@line 20369
  $87 = $ReallocAsyncCtx3 + 48 | 0; //@line 20370
  HEAP32[$87 >> 2] = $34; //@line 20371
  $88 = $ReallocAsyncCtx3 + 52 | 0; //@line 20372
  HEAP32[$88 >> 2] = $36; //@line 20373
  sp = STACKTOP; //@line 20374
  return;
 } else {
  $39 = __ZN7LoRaPHY23get_default_tx_datarateEv(HEAP32[$2 >> 2] | 0) | 0; //@line 20378
  HEAP8[$4 >> 0] = $39; //@line 20379
  HEAP8[$6 >> 0] = $39; //@line 20380
  $40 = HEAP32[$2 >> 2] | 0; //@line 20381
  $43 = HEAP32[(HEAP32[$40 >> 2] | 0) + 56 >> 2] | 0; //@line 20384
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(76) | 0; //@line 20385
  $44 = FUNCTION_TABLE_iiiiii[$43 & 7]($40, $8, $10, $12, $14) | 0; //@line 20386
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 400; //@line 20389
   $45 = $ReallocAsyncCtx2 + 4 | 0; //@line 20390
   HEAP32[$45 >> 2] = $2; //@line 20391
   $46 = $ReallocAsyncCtx2 + 8 | 0; //@line 20392
   HEAP32[$46 >> 2] = $4; //@line 20393
   $47 = $ReallocAsyncCtx2 + 12 | 0; //@line 20394
   HEAP32[$47 >> 2] = $6; //@line 20395
   $48 = $ReallocAsyncCtx2 + 16 | 0; //@line 20396
   HEAP32[$48 >> 2] = $8; //@line 20397
   $49 = $ReallocAsyncCtx2 + 20 | 0; //@line 20398
   HEAP32[$49 >> 2] = $10; //@line 20399
   $50 = $ReallocAsyncCtx2 + 24 | 0; //@line 20400
   HEAP32[$50 >> 2] = $12; //@line 20401
   $51 = $ReallocAsyncCtx2 + 28 | 0; //@line 20402
   HEAP32[$51 >> 2] = $14; //@line 20403
   $52 = $ReallocAsyncCtx2 + 32 | 0; //@line 20404
   HEAP32[$52 >> 2] = $16; //@line 20405
   $53 = $ReallocAsyncCtx2 + 36 | 0; //@line 20406
   HEAP32[$53 >> 2] = $18; //@line 20407
   $54 = $ReallocAsyncCtx2 + 40 | 0; //@line 20408
   HEAP32[$54 >> 2] = $20; //@line 20409
   $55 = $ReallocAsyncCtx2 + 44 | 0; //@line 20410
   HEAP32[$55 >> 2] = $22; //@line 20411
   $56 = $ReallocAsyncCtx2 + 48 | 0; //@line 20412
   HEAP32[$56 >> 2] = $24; //@line 20413
   $57 = $ReallocAsyncCtx2 + 52 | 0; //@line 20414
   HEAP32[$57 >> 2] = $26; //@line 20415
   $58 = $ReallocAsyncCtx2 + 56 | 0; //@line 20416
   HEAP32[$58 >> 2] = $28; //@line 20417
   $59 = $ReallocAsyncCtx2 + 60 | 0; //@line 20418
   HEAP32[$59 >> 2] = $30; //@line 20419
   $60 = $ReallocAsyncCtx2 + 64 | 0; //@line 20420
   HEAP32[$60 >> 2] = $32; //@line 20421
   $61 = $ReallocAsyncCtx2 + 68 | 0; //@line 20422
   HEAP32[$61 >> 2] = $34; //@line 20423
   $62 = $ReallocAsyncCtx2 + 72 | 0; //@line 20424
   HEAP32[$62 >> 2] = $36; //@line 20425
   sp = STACKTOP; //@line 20426
   return;
  }
  HEAP8[___async_retval >> 0] = $44 & 1; //@line 20431
  ___async_unwind = 0; //@line 20432
  HEAP32[$ReallocAsyncCtx2 >> 2] = 400; //@line 20433
  $45 = $ReallocAsyncCtx2 + 4 | 0; //@line 20434
  HEAP32[$45 >> 2] = $2; //@line 20435
  $46 = $ReallocAsyncCtx2 + 8 | 0; //@line 20436
  HEAP32[$46 >> 2] = $4; //@line 20437
  $47 = $ReallocAsyncCtx2 + 12 | 0; //@line 20438
  HEAP32[$47 >> 2] = $6; //@line 20439
  $48 = $ReallocAsyncCtx2 + 16 | 0; //@line 20440
  HEAP32[$48 >> 2] = $8; //@line 20441
  $49 = $ReallocAsyncCtx2 + 20 | 0; //@line 20442
  HEAP32[$49 >> 2] = $10; //@line 20443
  $50 = $ReallocAsyncCtx2 + 24 | 0; //@line 20444
  HEAP32[$50 >> 2] = $12; //@line 20445
  $51 = $ReallocAsyncCtx2 + 28 | 0; //@line 20446
  HEAP32[$51 >> 2] = $14; //@line 20447
  $52 = $ReallocAsyncCtx2 + 32 | 0; //@line 20448
  HEAP32[$52 >> 2] = $16; //@line 20449
  $53 = $ReallocAsyncCtx2 + 36 | 0; //@line 20450
  HEAP32[$53 >> 2] = $18; //@line 20451
  $54 = $ReallocAsyncCtx2 + 40 | 0; //@line 20452
  HEAP32[$54 >> 2] = $20; //@line 20453
  $55 = $ReallocAsyncCtx2 + 44 | 0; //@line 20454
  HEAP32[$55 >> 2] = $22; //@line 20455
  $56 = $ReallocAsyncCtx2 + 48 | 0; //@line 20456
  HEAP32[$56 >> 2] = $24; //@line 20457
  $57 = $ReallocAsyncCtx2 + 52 | 0; //@line 20458
  HEAP32[$57 >> 2] = $26; //@line 20459
  $58 = $ReallocAsyncCtx2 + 56 | 0; //@line 20460
  HEAP32[$58 >> 2] = $28; //@line 20461
  $59 = $ReallocAsyncCtx2 + 60 | 0; //@line 20462
  HEAP32[$59 >> 2] = $30; //@line 20463
  $60 = $ReallocAsyncCtx2 + 64 | 0; //@line 20464
  HEAP32[$60 >> 2] = $32; //@line 20465
  $61 = $ReallocAsyncCtx2 + 68 | 0; //@line 20466
  HEAP32[$61 >> 2] = $34; //@line 20467
  $62 = $ReallocAsyncCtx2 + 72 | 0; //@line 20468
  HEAP32[$62 >> 2] = $36; //@line 20469
  sp = STACKTOP; //@line 20470
  return;
 }
}
function __ZN7LoRaMac11schedule_txEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $67 = 0, $68 = 0, $71 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 20027
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20029
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20031
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20033
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20035
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20037
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20039
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20041
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20043
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20045
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20047
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20049
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20051
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20053
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 20055
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 20057
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 20059
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 20061
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 20063
 if (HEAP8[___async_retval >> 0] & 1) {
  $67 = HEAP8[$6 >> 0] | 0; //@line 20071
  HEAP32[$24 >> 2] = HEAPU8[$10 >> 0]; //@line 20072
  HEAP32[$24 + 4 >> 2] = $67; //@line 20074
  _mbed_tracef(16, 13704, 13982, $24); //@line 20075
  $68 = HEAP32[$2 >> 2] | 0; //@line 20076
  $71 = HEAP32[(HEAP32[$68 >> 2] | 0) + 72 >> 2] | 0; //@line 20079
  $72 = HEAP8[$4 >> 0] | 0; //@line 20080
  $74 = HEAP8[$18 + 1129 >> 0] | 0; //@line 20082
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(56) | 0; //@line 20083
  $75 = FUNCTION_TABLE_iiii[$71 & 15]($68, $72, $74) | 0; //@line 20084
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 401; //@line 20087
   $76 = $ReallocAsyncCtx3 + 4 | 0; //@line 20088
   HEAP32[$76 >> 2] = $2; //@line 20089
   $77 = $ReallocAsyncCtx3 + 8 | 0; //@line 20090
   HEAP32[$77 >> 2] = $18; //@line 20091
   $78 = $ReallocAsyncCtx3 + 12 | 0; //@line 20092
   HEAP32[$78 >> 2] = $16; //@line 20093
   $79 = $ReallocAsyncCtx3 + 16 | 0; //@line 20094
   HEAP32[$79 >> 2] = $4; //@line 20095
   $80 = $ReallocAsyncCtx3 + 20 | 0; //@line 20096
   HEAP32[$80 >> 2] = $20; //@line 20097
   $81 = $ReallocAsyncCtx3 + 24 | 0; //@line 20098
   HEAP32[$81 >> 2] = $22; //@line 20099
   $82 = $ReallocAsyncCtx3 + 28 | 0; //@line 20100
   HEAP32[$82 >> 2] = $28; //@line 20101
   $83 = $ReallocAsyncCtx3 + 32 | 0; //@line 20102
   HEAP32[$83 >> 2] = $30; //@line 20103
   $84 = $ReallocAsyncCtx3 + 36 | 0; //@line 20104
   HEAP32[$84 >> 2] = $12; //@line 20105
   $85 = $ReallocAsyncCtx3 + 40 | 0; //@line 20106
   HEAP32[$85 >> 2] = $10; //@line 20107
   $86 = $ReallocAsyncCtx3 + 44 | 0; //@line 20108
   HEAP32[$86 >> 2] = $32; //@line 20109
   $87 = $ReallocAsyncCtx3 + 48 | 0; //@line 20110
   HEAP32[$87 >> 2] = $34; //@line 20111
   $88 = $ReallocAsyncCtx3 + 52 | 0; //@line 20112
   HEAP32[$88 >> 2] = $36; //@line 20113
   sp = STACKTOP; //@line 20114
   return;
  }
  HEAP8[___async_retval >> 0] = $75; //@line 20118
  ___async_unwind = 0; //@line 20119
  HEAP32[$ReallocAsyncCtx3 >> 2] = 401; //@line 20120
  $76 = $ReallocAsyncCtx3 + 4 | 0; //@line 20121
  HEAP32[$76 >> 2] = $2; //@line 20122
  $77 = $ReallocAsyncCtx3 + 8 | 0; //@line 20123
  HEAP32[$77 >> 2] = $18; //@line 20124
  $78 = $ReallocAsyncCtx3 + 12 | 0; //@line 20125
  HEAP32[$78 >> 2] = $16; //@line 20126
  $79 = $ReallocAsyncCtx3 + 16 | 0; //@line 20127
  HEAP32[$79 >> 2] = $4; //@line 20128
  $80 = $ReallocAsyncCtx3 + 20 | 0; //@line 20129
  HEAP32[$80 >> 2] = $20; //@line 20130
  $81 = $ReallocAsyncCtx3 + 24 | 0; //@line 20131
  HEAP32[$81 >> 2] = $22; //@line 20132
  $82 = $ReallocAsyncCtx3 + 28 | 0; //@line 20133
  HEAP32[$82 >> 2] = $28; //@line 20134
  $83 = $ReallocAsyncCtx3 + 32 | 0; //@line 20135
  HEAP32[$83 >> 2] = $30; //@line 20136
  $84 = $ReallocAsyncCtx3 + 36 | 0; //@line 20137
  HEAP32[$84 >> 2] = $12; //@line 20138
  $85 = $ReallocAsyncCtx3 + 40 | 0; //@line 20139
  HEAP32[$85 >> 2] = $10; //@line 20140
  $86 = $ReallocAsyncCtx3 + 44 | 0; //@line 20141
  HEAP32[$86 >> 2] = $32; //@line 20142
  $87 = $ReallocAsyncCtx3 + 48 | 0; //@line 20143
  HEAP32[$87 >> 2] = $34; //@line 20144
  $88 = $ReallocAsyncCtx3 + 52 | 0; //@line 20145
  HEAP32[$88 >> 2] = $36; //@line 20146
  sp = STACKTOP; //@line 20147
  return;
 } else {
  $39 = __ZN7LoRaPHY23get_default_tx_datarateEv(HEAP32[$2 >> 2] | 0) | 0; //@line 20151
  HEAP8[$4 >> 0] = $39; //@line 20152
  HEAP8[$6 >> 0] = $39; //@line 20153
  $40 = HEAP32[$2 >> 2] | 0; //@line 20154
  $43 = HEAP32[(HEAP32[$40 >> 2] | 0) + 56 >> 2] | 0; //@line 20157
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(76) | 0; //@line 20158
  $44 = FUNCTION_TABLE_iiiiii[$43 & 7]($40, $8, $10, $12, $14) | 0; //@line 20159
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 400; //@line 20162
   $45 = $ReallocAsyncCtx2 + 4 | 0; //@line 20163
   HEAP32[$45 >> 2] = $2; //@line 20164
   $46 = $ReallocAsyncCtx2 + 8 | 0; //@line 20165
   HEAP32[$46 >> 2] = $4; //@line 20166
   $47 = $ReallocAsyncCtx2 + 12 | 0; //@line 20167
   HEAP32[$47 >> 2] = $6; //@line 20168
   $48 = $ReallocAsyncCtx2 + 16 | 0; //@line 20169
   HEAP32[$48 >> 2] = $8; //@line 20170
   $49 = $ReallocAsyncCtx2 + 20 | 0; //@line 20171
   HEAP32[$49 >> 2] = $10; //@line 20172
   $50 = $ReallocAsyncCtx2 + 24 | 0; //@line 20173
   HEAP32[$50 >> 2] = $12; //@line 20174
   $51 = $ReallocAsyncCtx2 + 28 | 0; //@line 20175
   HEAP32[$51 >> 2] = $14; //@line 20176
   $52 = $ReallocAsyncCtx2 + 32 | 0; //@line 20177
   HEAP32[$52 >> 2] = $16; //@line 20178
   $53 = $ReallocAsyncCtx2 + 36 | 0; //@line 20179
   HEAP32[$53 >> 2] = $18; //@line 20180
   $54 = $ReallocAsyncCtx2 + 40 | 0; //@line 20181
   HEAP32[$54 >> 2] = $20; //@line 20182
   $55 = $ReallocAsyncCtx2 + 44 | 0; //@line 20183
   HEAP32[$55 >> 2] = $22; //@line 20184
   $56 = $ReallocAsyncCtx2 + 48 | 0; //@line 20185
   HEAP32[$56 >> 2] = $24; //@line 20186
   $57 = $ReallocAsyncCtx2 + 52 | 0; //@line 20187
   HEAP32[$57 >> 2] = $26; //@line 20188
   $58 = $ReallocAsyncCtx2 + 56 | 0; //@line 20189
   HEAP32[$58 >> 2] = $28; //@line 20190
   $59 = $ReallocAsyncCtx2 + 60 | 0; //@line 20191
   HEAP32[$59 >> 2] = $30; //@line 20192
   $60 = $ReallocAsyncCtx2 + 64 | 0; //@line 20193
   HEAP32[$60 >> 2] = $32; //@line 20194
   $61 = $ReallocAsyncCtx2 + 68 | 0; //@line 20195
   HEAP32[$61 >> 2] = $34; //@line 20196
   $62 = $ReallocAsyncCtx2 + 72 | 0; //@line 20197
   HEAP32[$62 >> 2] = $36; //@line 20198
   sp = STACKTOP; //@line 20199
   return;
  }
  HEAP8[___async_retval >> 0] = $44 & 1; //@line 20204
  ___async_unwind = 0; //@line 20205
  HEAP32[$ReallocAsyncCtx2 >> 2] = 400; //@line 20206
  $45 = $ReallocAsyncCtx2 + 4 | 0; //@line 20207
  HEAP32[$45 >> 2] = $2; //@line 20208
  $46 = $ReallocAsyncCtx2 + 8 | 0; //@line 20209
  HEAP32[$46 >> 2] = $4; //@line 20210
  $47 = $ReallocAsyncCtx2 + 12 | 0; //@line 20211
  HEAP32[$47 >> 2] = $6; //@line 20212
  $48 = $ReallocAsyncCtx2 + 16 | 0; //@line 20213
  HEAP32[$48 >> 2] = $8; //@line 20214
  $49 = $ReallocAsyncCtx2 + 20 | 0; //@line 20215
  HEAP32[$49 >> 2] = $10; //@line 20216
  $50 = $ReallocAsyncCtx2 + 24 | 0; //@line 20217
  HEAP32[$50 >> 2] = $12; //@line 20218
  $51 = $ReallocAsyncCtx2 + 28 | 0; //@line 20219
  HEAP32[$51 >> 2] = $14; //@line 20220
  $52 = $ReallocAsyncCtx2 + 32 | 0; //@line 20221
  HEAP32[$52 >> 2] = $16; //@line 20222
  $53 = $ReallocAsyncCtx2 + 36 | 0; //@line 20223
  HEAP32[$53 >> 2] = $18; //@line 20224
  $54 = $ReallocAsyncCtx2 + 40 | 0; //@line 20225
  HEAP32[$54 >> 2] = $20; //@line 20226
  $55 = $ReallocAsyncCtx2 + 44 | 0; //@line 20227
  HEAP32[$55 >> 2] = $22; //@line 20228
  $56 = $ReallocAsyncCtx2 + 48 | 0; //@line 20229
  HEAP32[$56 >> 2] = $24; //@line 20230
  $57 = $ReallocAsyncCtx2 + 52 | 0; //@line 20231
  HEAP32[$57 >> 2] = $26; //@line 20232
  $58 = $ReallocAsyncCtx2 + 56 | 0; //@line 20233
  HEAP32[$58 >> 2] = $28; //@line 20234
  $59 = $ReallocAsyncCtx2 + 60 | 0; //@line 20235
  HEAP32[$59 >> 2] = $30; //@line 20236
  $60 = $ReallocAsyncCtx2 + 64 | 0; //@line 20237
  HEAP32[$60 >> 2] = $32; //@line 20238
  $61 = $ReallocAsyncCtx2 + 68 | 0; //@line 20239
  HEAP32[$61 >> 2] = $34; //@line 20240
  $62 = $ReallocAsyncCtx2 + 72 | 0; //@line 20241
  HEAP32[$62 >> 2] = $36; //@line 20242
  sp = STACKTOP; //@line 20243
  return;
 }
}
function __ZN7LoRaMac16on_radio_tx_doneEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$pre$phiZ2D = 0, $$sroa$0$0$copyload = 0, $1 = 0, $10 = 0, $103 = 0, $106 = 0, $117 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $42 = 0, $45 = 0, $55 = 0, $57 = 0, $58 = 0, $7 = 0, $71 = 0, $73 = 0, $76 = 0, $85 = 0, $86 = 0, $89 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx4 = 0, $AsyncCtx8 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 9190
 STACKTOP = STACKTOP + 32 | 0; //@line 9191
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9191
 $$byval_copy = sp + 8 | 0; //@line 9192
 $vararg_buffer = sp; //@line 9193
 $1 = sp + 16 | 0; //@line 9194
 _mbed_tracef(16, 13704, 13709, $vararg_buffer); //@line 9195
 $2 = $0 + 356 | 0; //@line 9196
 $4 = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[$2 >> 2] | 0) | 0; //@line 9198
 $$sroa$0$0$copyload = HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) >> 2] | 0; //@line 9201
 $7 = $0 + 360 | 0; //@line 9202
 do {
  if ((HEAP32[$7 >> 2] | 0) == 2) {
   _mbed_tracef(16, 13704, 13723, $$byval_copy); //@line 9207
   $19 = HEAP32[$0 + 1328 >> 2] | 0; //@line 9209
   HEAP32[$vararg_buffer >> 2] = 279; //@line 9210
   HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 9212
   $AsyncCtx20 = _emscripten_alloc_async_context(36, sp) | 0; //@line 9213
   HEAP32[$$byval_copy >> 2] = HEAP32[$vararg_buffer >> 2]; //@line 9214
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$vararg_buffer + 4 >> 2]; //@line 9214
   $20 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($19, $0, $$byval_copy) | 0; //@line 9215
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 280; //@line 9218
    HEAP32[$AsyncCtx20 + 4 >> 2] = $vararg_buffer; //@line 9220
    HEAP32[$AsyncCtx20 + 8 >> 2] = $0; //@line 9222
    HEAP32[$AsyncCtx20 + 12 >> 2] = $2; //@line 9224
    HEAP32[$AsyncCtx20 + 16 >> 2] = $4; //@line 9226
    HEAP32[$AsyncCtx20 + 20 >> 2] = $7; //@line 9228
    HEAP32[$AsyncCtx20 + 24 >> 2] = $$sroa$0$0$copyload; //@line 9230
    HEAP32[$AsyncCtx20 + 28 >> 2] = $1; //@line 9232
    HEAP32[$AsyncCtx20 + 32 >> 2] = $1; //@line 9234
    sp = STACKTOP; //@line 9235
    STACKTOP = sp; //@line 9236
    return;
   }
   _emscripten_free_async_context($AsyncCtx20 | 0); //@line 9238
   do {
    if (!$20) {
     $AsyncCtx24 = _emscripten_alloc_async_context(36, sp) | 0; //@line 9242
     _mbed_assert_internal(13588, 13597, 215); //@line 9243
     if (___async) {
      HEAP32[$AsyncCtx24 >> 2] = 281; //@line 9246
      HEAP32[$AsyncCtx24 + 4 >> 2] = $vararg_buffer; //@line 9248
      HEAP32[$AsyncCtx24 + 8 >> 2] = $0; //@line 9250
      HEAP32[$AsyncCtx24 + 12 >> 2] = $2; //@line 9252
      HEAP32[$AsyncCtx24 + 16 >> 2] = $4; //@line 9254
      HEAP32[$AsyncCtx24 + 20 >> 2] = $7; //@line 9256
      HEAP32[$AsyncCtx24 + 24 >> 2] = $$sroa$0$0$copyload; //@line 9258
      HEAP32[$AsyncCtx24 + 28 >> 2] = $1; //@line 9260
      HEAP32[$AsyncCtx24 + 32 >> 2] = $1; //@line 9262
      sp = STACKTOP; //@line 9263
      STACKTOP = sp; //@line 9264
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx24 | 0); //@line 9266
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 9272
  } else {
   $10 = HEAP32[$0 >> 2] | 0; //@line 9274
   $AsyncCtx16 = _emscripten_alloc_async_context(32, sp) | 0; //@line 9275
   __ZN7LoRaPHY18put_radio_to_sleepEv($10); //@line 9276
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 278; //@line 9279
    HEAP32[$AsyncCtx16 + 4 >> 2] = $0; //@line 9281
    HEAP32[$AsyncCtx16 + 8 >> 2] = $2; //@line 9283
    HEAP32[$AsyncCtx16 + 12 >> 2] = $4; //@line 9285
    HEAP32[$AsyncCtx16 + 16 >> 2] = $7; //@line 9287
    HEAP32[$AsyncCtx16 + 20 >> 2] = $$sroa$0$0$copyload; //@line 9289
    HEAP32[$AsyncCtx16 + 24 >> 2] = $1; //@line 9291
    HEAP32[$AsyncCtx16 + 28 >> 2] = $1; //@line 9293
    sp = STACKTOP; //@line 9294
    STACKTOP = sp; //@line 9295
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx16 | 0); //@line 9297
    break;
   }
  }
 } while (0);
 do {
  if (!(HEAP8[$0 + 371 >> 0] | 0)) {
   HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 9310
   $85 = $0 + 944 | 0; //@line 9311
   $86 = HEAP8[$85 >> 0] | 0; //@line 9312
   if (!($86 << 24 >> 24)) {
    HEAP8[$85 >> 0] = 1; //@line 9315
    $89 = 1; //@line 9316
   } else {
    $89 = $86; //@line 9318
   }
   HEAP8[$85 >> 0] = $89 | 32; //@line 9321
  } else {
   $42 = HEAP32[$2 >> 2] | 0; //@line 9323
   $45 = HEAP32[$0 + 972 >> 2] | 0; //@line 9326
   $AsyncCtx12 = _emscripten_alloc_async_context(32, sp) | 0; //@line 9327
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($42, $0 + 1036 | 0, $45); //@line 9328
   if (___async) {
    HEAP32[$AsyncCtx12 >> 2] = 282; //@line 9331
    HEAP32[$AsyncCtx12 + 4 >> 2] = $7; //@line 9333
    HEAP32[$AsyncCtx12 + 8 >> 2] = $0; //@line 9335
    HEAP32[$AsyncCtx12 + 12 >> 2] = $2; //@line 9337
    HEAP32[$AsyncCtx12 + 16 >> 2] = $$sroa$0$0$copyload; //@line 9339
    HEAP32[$AsyncCtx12 + 20 >> 2] = $1; //@line 9341
    HEAP32[$AsyncCtx12 + 24 >> 2] = $1; //@line 9343
    HEAP32[$AsyncCtx12 + 28 >> 2] = $4; //@line 9345
    sp = STACKTOP; //@line 9346
    STACKTOP = sp; //@line 9347
    return;
   }
   _emscripten_free_async_context($AsyncCtx12 | 0); //@line 9349
   if ((HEAP32[$7 >> 2] | 0) == 2) {
    $$pre$phiZ2D = $0 + 976 | 0; //@line 9354
   } else {
    $55 = HEAP32[$2 >> 2] | 0; //@line 9356
    $57 = $0 + 976 | 0; //@line 9358
    $58 = HEAP32[$57 >> 2] | 0; //@line 9359
    $AsyncCtx8 = _emscripten_alloc_async_context(36, sp) | 0; //@line 9360
    __ZN18LoRaWANTimeHandler5startER13timer_event_tj($55, $0 + 1056 | 0, $58); //@line 9361
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 283; //@line 9364
     HEAP32[$AsyncCtx8 + 4 >> 2] = $7; //@line 9366
     HEAP32[$AsyncCtx8 + 8 >> 2] = $57; //@line 9368
     HEAP32[$AsyncCtx8 + 12 >> 2] = $2; //@line 9370
     HEAP32[$AsyncCtx8 + 16 >> 2] = $0; //@line 9372
     HEAP32[$AsyncCtx8 + 20 >> 2] = $$sroa$0$0$copyload; //@line 9374
     HEAP32[$AsyncCtx8 + 24 >> 2] = $1; //@line 9376
     HEAP32[$AsyncCtx8 + 28 >> 2] = $1; //@line 9378
     HEAP32[$AsyncCtx8 + 32 >> 2] = $4; //@line 9380
     sp = STACKTOP; //@line 9381
     STACKTOP = sp; //@line 9382
     return;
    }
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 9384
    if ((HEAP32[$7 >> 2] | 0) == 2) {
     $$pre$phiZ2D = $57; //@line 9388
    } else {
     if (!(HEAP8[$0 + 373 >> 0] | 0)) {
      break;
     } else {
      $$pre$phiZ2D = $57; //@line 9396
     }
    }
   }
   $71 = HEAP32[$2 >> 2] | 0; //@line 9400
   $73 = HEAP32[$$pre$phiZ2D >> 2] | 0; //@line 9402
   $76 = (__ZN7LoRaPHY15get_ack_timeoutEv(HEAP32[$0 >> 2] | 0) | 0) + $73 | 0; //@line 9405
   $AsyncCtx4 = _emscripten_alloc_async_context(24, sp) | 0; //@line 9406
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($71, $0 + 1076 | 0, $76); //@line 9407
   if (___async) {
    HEAP32[$AsyncCtx4 >> 2] = 284; //@line 9410
    HEAP32[$AsyncCtx4 + 4 >> 2] = $0; //@line 9412
    HEAP32[$AsyncCtx4 + 8 >> 2] = $$sroa$0$0$copyload; //@line 9414
    HEAP32[$AsyncCtx4 + 12 >> 2] = $1; //@line 9416
    HEAP32[$AsyncCtx4 + 16 >> 2] = $1; //@line 9418
    HEAP32[$AsyncCtx4 + 20 >> 2] = $4; //@line 9420
    sp = STACKTOP; //@line 9421
    STACKTOP = sp; //@line 9422
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx4 | 0); //@line 9424
    break;
   }
  }
 } while (0);
 HEAP8[$0 + 376 >> 0] = ($$sroa$0$0$copyload | 0) == 0 & (HEAP8[$0 + 944 >> 0] & 8) != 0 & 1; //@line 9437
 $97 = HEAP8[$0 + 378 >> 0] | 0; //@line 9439
 HEAP8[$0 + 379 >> 0] = $97; //@line 9441
 HEAP8[$1 >> 0] = $97; //@line 9442
 HEAP8[$1 + 1 >> 0] = HEAP8[$0 + 372 >> 0] | 0; //@line 9446
 HEAP32[$1 + 4 >> 2] = $4; //@line 9448
 $103 = HEAP32[$0 >> 2] | 0; //@line 9449
 $106 = HEAP32[(HEAP32[$103 >> 2] | 0) + 12 >> 2] | 0; //@line 9452
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 9453
 FUNCTION_TABLE_vii[$106 & 31]($103, $1); //@line 9454
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 285; //@line 9457
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 9459
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 9461
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 9463
  sp = STACKTOP; //@line 9464
  STACKTOP = sp; //@line 9465
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9467
 HEAP32[$0 + 980 >> 2] = $4; //@line 9469
 if (HEAP8[$0 + 373 >> 0] | 0) {
  STACKTOP = sp; //@line 9474
  return;
 }
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 9479
 $117 = $0 + 380 | 0; //@line 9480
 HEAP8[$117 >> 0] = (HEAP8[$117 >> 0] | 0) + 1 << 24 >> 24; //@line 9483
 STACKTOP = sp; //@line 9484
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_270($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $10 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 17225
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17227
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17229
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17231
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17233
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17235
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17241
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17243
 $$pre$i$i = HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0; //@line 17244
 HEAP32[HEAP32[$0 + 28 >> 2] >> 2] = $$pre$i$i; //@line 17246
 if ($$pre$i$i | 0) {
  $22 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 17250
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 17251
  FUNCTION_TABLE_vi[$22 & 1023]($4); //@line 17252
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 469; //@line 17255
   $23 = $ReallocAsyncCtx3 + 4 | 0; //@line 17256
   HEAP32[$23 >> 2] = $2; //@line 17257
   $24 = $ReallocAsyncCtx3 + 8 | 0; //@line 17258
   HEAP32[$24 >> 2] = $6; //@line 17259
   $25 = $ReallocAsyncCtx3 + 12 | 0; //@line 17260
   HEAP32[$25 >> 2] = $4; //@line 17261
   $26 = $ReallocAsyncCtx3 + 16 | 0; //@line 17262
   HEAP32[$26 >> 2] = $8; //@line 17263
   $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 17264
   HEAP32[$27 >> 2] = $10; //@line 17265
   $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 17266
   HEAP32[$28 >> 2] = $16; //@line 17267
   $29 = $ReallocAsyncCtx3 + 28 | 0; //@line 17268
   HEAP32[$29 >> 2] = $18; //@line 17269
   sp = STACKTOP; //@line 17270
   return;
  }
  ___async_unwind = 0; //@line 17273
  HEAP32[$ReallocAsyncCtx3 >> 2] = 469; //@line 17274
  $23 = $ReallocAsyncCtx3 + 4 | 0; //@line 17275
  HEAP32[$23 >> 2] = $2; //@line 17276
  $24 = $ReallocAsyncCtx3 + 8 | 0; //@line 17277
  HEAP32[$24 >> 2] = $6; //@line 17278
  $25 = $ReallocAsyncCtx3 + 12 | 0; //@line 17279
  HEAP32[$25 >> 2] = $4; //@line 17280
  $26 = $ReallocAsyncCtx3 + 16 | 0; //@line 17281
  HEAP32[$26 >> 2] = $8; //@line 17282
  $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 17283
  HEAP32[$27 >> 2] = $10; //@line 17284
  $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 17285
  HEAP32[$28 >> 2] = $16; //@line 17286
  $29 = $ReallocAsyncCtx3 + 28 | 0; //@line 17287
  HEAP32[$29 >> 2] = $18; //@line 17288
  sp = STACKTOP; //@line 17289
  return;
 }
 $30 = $8 + 12 | 0; //@line 17292
 HEAP32[$8 >> 2] = 7; //@line 17293
 HEAP32[$8 + 4 >> 2] = 0; //@line 17295
 HEAP32[$8 + 8 >> 2] = $2; //@line 17297
 HEAP32[$30 >> 2] = 924; //@line 17298
 $31 = $2 + 1244 | 0; //@line 17299
 if (($31 | 0) == ($8 | 0)) {
  $58 = HEAP32[233] | 0; //@line 17303
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 17304
  FUNCTION_TABLE_vi[$58 & 1023]($8); //@line 17305
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 472; //@line 17308
   $59 = $ReallocAsyncCtx6 + 4 | 0; //@line 17309
   HEAP32[$59 >> 2] = $2; //@line 17310
   $60 = $ReallocAsyncCtx6 + 8 | 0; //@line 17311
   HEAP32[$60 >> 2] = $6; //@line 17312
   $61 = $ReallocAsyncCtx6 + 12 | 0; //@line 17313
   HEAP32[$61 >> 2] = $8; //@line 17314
   $62 = $ReallocAsyncCtx6 + 16 | 0; //@line 17315
   HEAP32[$62 >> 2] = $10; //@line 17316
   $63 = $ReallocAsyncCtx6 + 20 | 0; //@line 17317
   HEAP32[$63 >> 2] = $16; //@line 17318
   $64 = $ReallocAsyncCtx6 + 24 | 0; //@line 17319
   HEAP32[$64 >> 2] = $18; //@line 17320
   sp = STACKTOP; //@line 17321
   return;
  }
  ___async_unwind = 0; //@line 17324
  HEAP32[$ReallocAsyncCtx6 >> 2] = 472; //@line 17325
  $59 = $ReallocAsyncCtx6 + 4 | 0; //@line 17326
  HEAP32[$59 >> 2] = $2; //@line 17327
  $60 = $ReallocAsyncCtx6 + 8 | 0; //@line 17328
  HEAP32[$60 >> 2] = $6; //@line 17329
  $61 = $ReallocAsyncCtx6 + 12 | 0; //@line 17330
  HEAP32[$61 >> 2] = $8; //@line 17331
  $62 = $ReallocAsyncCtx6 + 16 | 0; //@line 17332
  HEAP32[$62 >> 2] = $10; //@line 17333
  $63 = $ReallocAsyncCtx6 + 20 | 0; //@line 17334
  HEAP32[$63 >> 2] = $16; //@line 17335
  $64 = $ReallocAsyncCtx6 + 24 | 0; //@line 17336
  HEAP32[$64 >> 2] = $18; //@line 17337
  sp = STACKTOP; //@line 17338
  return;
 }
 $33 = $2 + 1256 | 0; //@line 17341
 $34 = HEAP32[$33 >> 2] | 0; //@line 17342
 if (!$34) {
  $48 = HEAP32[232] | 0; //@line 17346
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 17347
  FUNCTION_TABLE_vii[$48 & 31]($31, $8); //@line 17348
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 471; //@line 17351
   $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 17352
   HEAP32[$49 >> 2] = $30; //@line 17353
   $50 = $ReallocAsyncCtx5 + 8 | 0; //@line 17354
   HEAP32[$50 >> 2] = $33; //@line 17355
   $51 = $ReallocAsyncCtx5 + 12 | 0; //@line 17356
   HEAP32[$51 >> 2] = $2; //@line 17357
   $52 = $ReallocAsyncCtx5 + 16 | 0; //@line 17358
   HEAP32[$52 >> 2] = $6; //@line 17359
   $53 = $ReallocAsyncCtx5 + 20 | 0; //@line 17360
   HEAP32[$53 >> 2] = $8; //@line 17361
   $54 = $ReallocAsyncCtx5 + 24 | 0; //@line 17362
   HEAP32[$54 >> 2] = $10; //@line 17363
   $55 = $ReallocAsyncCtx5 + 28 | 0; //@line 17364
   HEAP32[$55 >> 2] = $16; //@line 17365
   $56 = $ReallocAsyncCtx5 + 32 | 0; //@line 17366
   HEAP32[$56 >> 2] = $18; //@line 17367
   sp = STACKTOP; //@line 17368
   return;
  }
  ___async_unwind = 0; //@line 17371
  HEAP32[$ReallocAsyncCtx5 >> 2] = 471; //@line 17372
  $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 17373
  HEAP32[$49 >> 2] = $30; //@line 17374
  $50 = $ReallocAsyncCtx5 + 8 | 0; //@line 17375
  HEAP32[$50 >> 2] = $33; //@line 17376
  $51 = $ReallocAsyncCtx5 + 12 | 0; //@line 17377
  HEAP32[$51 >> 2] = $2; //@line 17378
  $52 = $ReallocAsyncCtx5 + 16 | 0; //@line 17379
  HEAP32[$52 >> 2] = $6; //@line 17380
  $53 = $ReallocAsyncCtx5 + 20 | 0; //@line 17381
  HEAP32[$53 >> 2] = $8; //@line 17382
  $54 = $ReallocAsyncCtx5 + 24 | 0; //@line 17383
  HEAP32[$54 >> 2] = $10; //@line 17384
  $55 = $ReallocAsyncCtx5 + 28 | 0; //@line 17385
  HEAP32[$55 >> 2] = $16; //@line 17386
  $56 = $ReallocAsyncCtx5 + 32 | 0; //@line 17387
  HEAP32[$56 >> 2] = $18; //@line 17388
  sp = STACKTOP; //@line 17389
  return;
 } else {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 17393
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 17394
  FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 17395
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 470; //@line 17398
   $38 = $ReallocAsyncCtx4 + 4 | 0; //@line 17399
   HEAP32[$38 >> 2] = $30; //@line 17400
   $39 = $ReallocAsyncCtx4 + 8 | 0; //@line 17401
   HEAP32[$39 >> 2] = $33; //@line 17402
   $40 = $ReallocAsyncCtx4 + 12 | 0; //@line 17403
   HEAP32[$40 >> 2] = $2; //@line 17404
   $41 = $ReallocAsyncCtx4 + 16 | 0; //@line 17405
   HEAP32[$41 >> 2] = $6; //@line 17406
   $42 = $ReallocAsyncCtx4 + 20 | 0; //@line 17407
   HEAP32[$42 >> 2] = $8; //@line 17408
   $43 = $ReallocAsyncCtx4 + 24 | 0; //@line 17409
   HEAP32[$43 >> 2] = $10; //@line 17410
   $44 = $ReallocAsyncCtx4 + 28 | 0; //@line 17411
   HEAP32[$44 >> 2] = $31; //@line 17412
   $45 = $ReallocAsyncCtx4 + 32 | 0; //@line 17413
   HEAP32[$45 >> 2] = $16; //@line 17414
   $46 = $ReallocAsyncCtx4 + 36 | 0; //@line 17415
   HEAP32[$46 >> 2] = $18; //@line 17416
   sp = STACKTOP; //@line 17417
   return;
  }
  ___async_unwind = 0; //@line 17420
  HEAP32[$ReallocAsyncCtx4 >> 2] = 470; //@line 17421
  $38 = $ReallocAsyncCtx4 + 4 | 0; //@line 17422
  HEAP32[$38 >> 2] = $30; //@line 17423
  $39 = $ReallocAsyncCtx4 + 8 | 0; //@line 17424
  HEAP32[$39 >> 2] = $33; //@line 17425
  $40 = $ReallocAsyncCtx4 + 12 | 0; //@line 17426
  HEAP32[$40 >> 2] = $2; //@line 17427
  $41 = $ReallocAsyncCtx4 + 16 | 0; //@line 17428
  HEAP32[$41 >> 2] = $6; //@line 17429
  $42 = $ReallocAsyncCtx4 + 20 | 0; //@line 17430
  HEAP32[$42 >> 2] = $8; //@line 17431
  $43 = $ReallocAsyncCtx4 + 24 | 0; //@line 17432
  HEAP32[$43 >> 2] = $10; //@line 17433
  $44 = $ReallocAsyncCtx4 + 28 | 0; //@line 17434
  HEAP32[$44 >> 2] = $31; //@line 17435
  $45 = $ReallocAsyncCtx4 + 32 | 0; //@line 17436
  HEAP32[$45 >> 2] = $16; //@line 17437
  $46 = $ReallocAsyncCtx4 + 36 | 0; //@line 17438
  HEAP32[$46 >> 2] = $18; //@line 17439
  sp = STACKTOP; //@line 17440
  return;
 }
}
function _schedule_interrupt__async_cb($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $102 = 0, $105 = 0, $107 = 0, $110 = 0, $111 = 0, $113 = 0, $116 = 0, $12 = 0, $124 = 0, $125 = 0, $126 = 0, $128 = 0, $130 = 0, $135 = 0, $142 = 0, $144 = 0, $146 = 0, $149 = 0, $151 = 0, $158 = 0, $159 = 0, $162 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $177 = 0, $180 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $60 = 0, $61 = 0, $67 = 0, $68 = 0, $69 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $86 = 0, $87 = 0, $9 = 0, $93 = 0, $94 = 0, $95 = 0, $97 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 31429
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31431
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31433
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31437
 $8 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 31438
 $9 = $8 + 32 | 0; //@line 31439
 if (($AsyncRetVal | 0) != (HEAP32[$9 >> 2] | 0)) {
  $12 = $2 + 32 | 0; //@line 31443
  $17 = $AsyncRetVal - (HEAP32[$12 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 31448
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 31449
  $19 = HEAP32[$2 + 8 >> 2] | 0; //@line 31451
  L4 : do {
   if (($19 | 0) < 1e6) {
    switch ($19 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 6; //@line 31460
      break L4;
     }
    }
    $20 = ___muldi3($17 | 0, 0, 1e6, 0) | 0; //@line 31464
    $22 = _bitshift64Lshr($20 | 0, tempRet0 | 0, 15) | 0; //@line 31466
    $23 = tempRet0; //@line 31467
    $26 = $2 + 40 | 0; //@line 31470
    $27 = $26; //@line 31471
    $33 = _i64Add(HEAP32[$27 >> 2] | 0, HEAP32[$27 + 4 >> 2] | 0, $17 * 1e6 & 32704 | 0, 0) | 0; //@line 31477
    $34 = tempRet0; //@line 31478
    $35 = $26; //@line 31479
    HEAP32[$35 >> 2] = $33; //@line 31481
    HEAP32[$35 + 4 >> 2] = $34; //@line 31484
    if ($34 >>> 0 < 0 | ($34 | 0) == 0 & $33 >>> 0 < 32768) {
     $93 = $22; //@line 31491
     $94 = $23; //@line 31491
    } else {
     $44 = _i64Add($22 | 0, $23 | 0, 1, 0) | 0; //@line 31493
     $45 = tempRet0; //@line 31494
     $46 = _i64Add($33 | 0, $34 | 0, -32768, -1) | 0; //@line 31495
     $48 = $26; //@line 31497
     HEAP32[$48 >> 2] = $46; //@line 31499
     HEAP32[$48 + 4 >> 2] = tempRet0; //@line 31502
     $93 = $44; //@line 31503
     $94 = $45; //@line 31503
    }
   } else {
    switch ($19 | 0) {
    case 1e6:
     {
      $93 = $17; //@line 31508
      $94 = 0; //@line 31508
      break;
     }
    default:
     {
      label = 6; //@line 31512
     }
    }
   }
  } while (0);
  if ((label | 0) == 6) {
   $52 = ___muldi3($17 | 0, 0, 1e6, 0) | 0; //@line 31518
   $53 = tempRet0; //@line 31519
   $54 = ___udivdi3($52 | 0, $53 | 0, $19 | 0, 0) | 0; //@line 31520
   $55 = tempRet0; //@line 31521
   $56 = ___muldi3($54 | 0, $55 | 0, $19 | 0, 0) | 0; //@line 31522
   $58 = _i64Subtract($52 | 0, $53 | 0, $56 | 0, tempRet0 | 0) | 0; //@line 31524
   $60 = $2 + 40 | 0; //@line 31526
   $61 = $60; //@line 31527
   $67 = _i64Add($58 | 0, tempRet0 | 0, HEAP32[$61 >> 2] | 0, HEAP32[$61 + 4 >> 2] | 0) | 0; //@line 31533
   $68 = tempRet0; //@line 31534
   $69 = $60; //@line 31535
   HEAP32[$69 >> 2] = $67; //@line 31537
   HEAP32[$69 + 4 >> 2] = $68; //@line 31540
   if ($68 >>> 0 < 0 | ($68 | 0) == 0 & $67 >>> 0 < $19 >>> 0) {
    $93 = $54; //@line 31547
    $94 = $55; //@line 31547
   } else {
    $78 = _i64Add($54 | 0, $55 | 0, 1, 0) | 0; //@line 31549
    $79 = tempRet0; //@line 31550
    $80 = _i64Subtract($67 | 0, $68 | 0, $19 | 0, 0) | 0; //@line 31551
    $82 = $60; //@line 31553
    HEAP32[$82 >> 2] = $80; //@line 31555
    HEAP32[$82 + 4 >> 2] = tempRet0; //@line 31558
    $93 = $78; //@line 31559
    $94 = $79; //@line 31559
   }
  }
  $86 = $2 + 48 | 0; //@line 31562
  $87 = $86; //@line 31563
  $95 = _i64Add(HEAP32[$87 >> 2] | 0, HEAP32[$87 + 4 >> 2] | 0, $93 | 0, $94 | 0) | 0; //@line 31569
  $97 = $86; //@line 31571
  HEAP32[$97 >> 2] = $95; //@line 31573
  HEAP32[$97 + 4 >> 2] = tempRet0; //@line 31576
 }
 $102 = HEAP32[$8 + 4 >> 2] | 0; //@line 31579
 if (!$102) {
  $177 = (HEAP32[$2 + 16 >> 2] | 0) + (HEAP32[$2 + 32 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 31589
  $180 = HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] | 0; //@line 31592
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 31593
  FUNCTION_TABLE_vi[$180 & 1023]($177); //@line 31594
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 610; //@line 31597
   sp = STACKTOP; //@line 31598
   return;
  }
  ___async_unwind = 0; //@line 31601
  HEAP32[$ReallocAsyncCtx7 >> 2] = 610; //@line 31602
  sp = STACKTOP; //@line 31603
  return;
 }
 $105 = $8 + 48 | 0; //@line 31607
 $107 = HEAP32[$105 >> 2] | 0; //@line 31609
 $110 = HEAP32[$105 + 4 >> 2] | 0; //@line 31612
 $111 = $102; //@line 31613
 $113 = HEAP32[$111 >> 2] | 0; //@line 31615
 $116 = HEAP32[$111 + 4 >> 2] | 0; //@line 31618
 if (!($116 >>> 0 > $110 >>> 0 | ($116 | 0) == ($110 | 0) & $113 >>> 0 > $107 >>> 0)) {
  $124 = HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] | 0; //@line 31627
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 31628
  FUNCTION_TABLE_v[$124 & 7](); //@line 31629
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 605; //@line 31632
   sp = STACKTOP; //@line 31633
   return;
  }
  ___async_unwind = 0; //@line 31636
  HEAP32[$ReallocAsyncCtx2 >> 2] = 605; //@line 31637
  sp = STACKTOP; //@line 31638
  return;
 }
 $125 = _i64Subtract($113 | 0, $116 | 0, $107 | 0, $110 | 0) | 0; //@line 31641
 $126 = tempRet0; //@line 31642
 $128 = HEAP32[$8 + 16 >> 2] | 0; //@line 31644
 $130 = $8 + 24 | 0; //@line 31646
 $135 = HEAP32[$130 + 4 >> 2] | 0; //@line 31651
 L28 : do {
  if ($126 >>> 0 > $135 >>> 0 | (($126 | 0) == ($135 | 0) ? $125 >>> 0 > (HEAP32[$130 >> 2] | 0) >>> 0 : 0)) {
   $$0$i = $128; //@line 31659
  } else {
   $142 = HEAP32[$8 + 8 >> 2] | 0; //@line 31662
   L30 : do {
    if (($142 | 0) < 1e6) {
     switch ($142 | 0) {
     case 32768:
      {
       break;
      }
     default:
      {
       break L30;
      }
     }
     $144 = _bitshift64Shl($125 | 0, $126 | 0, 15) | 0; //@line 31674
     $146 = ___udivdi3($144 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 31676
     $$0$i = $128 >>> 0 < $146 >>> 0 ? $128 : $146; //@line 31680
     break L28;
    } else {
     switch ($142 | 0) {
     case 1e6:
      {
       break;
      }
     default:
      {
       break L30;
      }
     }
     $$0$i = $128 >>> 0 < $125 >>> 0 ? $128 : $125; //@line 31693
     break L28;
    }
   } while (0);
   $149 = ___muldi3($125 | 0, $126 | 0, $142 | 0, 0) | 0; //@line 31697
   $151 = ___udivdi3($149 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 31699
   $$0$i = $128 >>> 0 < $151 >>> 0 ? $128 : $151; //@line 31703
  }
 } while (0);
 $158 = (HEAP32[$9 >> 2] | 0) + $$0$i & HEAP32[$8 + 12 >> 2]; //@line 31710
 $159 = $2 + 32 | 0; //@line 31711
 $162 = HEAP32[$4 >> 2] | 0; //@line 31714
 if (($158 | 0) == (HEAP32[$159 >> 2] | 0)) {
  $164 = HEAP32[$162 + 20 >> 2] | 0; //@line 31717
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 31718
  FUNCTION_TABLE_v[$164 & 7](); //@line 31719
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 606; //@line 31722
   sp = STACKTOP; //@line 31723
   return;
  }
  ___async_unwind = 0; //@line 31726
  HEAP32[$ReallocAsyncCtx3 >> 2] = 606; //@line 31727
  sp = STACKTOP; //@line 31728
  return;
 } else {
  $166 = HEAP32[$162 + 16 >> 2] | 0; //@line 31732
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 31733
  FUNCTION_TABLE_vi[$166 & 1023]($158); //@line 31734
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 607; //@line 31737
   $167 = $ReallocAsyncCtx4 + 4 | 0; //@line 31738
   HEAP32[$167 >> 2] = $4; //@line 31739
   $168 = $ReallocAsyncCtx4 + 8 | 0; //@line 31740
   HEAP32[$168 >> 2] = $159; //@line 31741
   $169 = $ReallocAsyncCtx4 + 12 | 0; //@line 31742
   HEAP32[$169 >> 2] = $158; //@line 31743
   sp = STACKTOP; //@line 31744
   return;
  }
  ___async_unwind = 0; //@line 31747
  HEAP32[$ReallocAsyncCtx4 >> 2] = 607; //@line 31748
  $167 = $ReallocAsyncCtx4 + 4 | 0; //@line 31749
  HEAP32[$167 >> 2] = $4; //@line 31750
  $168 = $ReallocAsyncCtx4 + 8 | 0; //@line 31751
  HEAP32[$168 >> 2] = $159; //@line 31752
  $169 = $ReallocAsyncCtx4 + 12 | 0; //@line 31753
  HEAP32[$169 >> 2] = $158; //@line 31754
  sp = STACKTOP; //@line 31755
  return;
 }
}
function _mbed_die() {
 var $0 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx43 = 0, $AsyncCtx47 = 0, $AsyncCtx51 = 0, $AsyncCtx55 = 0, $AsyncCtx59 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6622
 STACKTOP = STACKTOP + 32 | 0; //@line 6623
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 6623
 $0 = sp; //@line 6624
 _gpio_init_out($0, 50); //@line 6625
 while (1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6628
  $AsyncCtx59 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6629
  _wait_ms(150); //@line 6630
  if (___async) {
   label = 3; //@line 6633
   break;
  }
  _emscripten_free_async_context($AsyncCtx59 | 0); //@line 6636
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6638
  $AsyncCtx55 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6639
  _wait_ms(150); //@line 6640
  if (___async) {
   label = 5; //@line 6643
   break;
  }
  _emscripten_free_async_context($AsyncCtx55 | 0); //@line 6646
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6648
  $AsyncCtx51 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6649
  _wait_ms(150); //@line 6650
  if (___async) {
   label = 7; //@line 6653
   break;
  }
  _emscripten_free_async_context($AsyncCtx51 | 0); //@line 6656
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6658
  $AsyncCtx47 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6659
  _wait_ms(150); //@line 6660
  if (___async) {
   label = 9; //@line 6663
   break;
  }
  _emscripten_free_async_context($AsyncCtx47 | 0); //@line 6666
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6668
  $AsyncCtx43 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6669
  _wait_ms(150); //@line 6670
  if (___async) {
   label = 11; //@line 6673
   break;
  }
  _emscripten_free_async_context($AsyncCtx43 | 0); //@line 6676
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6678
  $AsyncCtx39 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6679
  _wait_ms(150); //@line 6680
  if (___async) {
   label = 13; //@line 6683
   break;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 6686
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6688
  $AsyncCtx35 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6689
  _wait_ms(150); //@line 6690
  if (___async) {
   label = 15; //@line 6693
   break;
  }
  _emscripten_free_async_context($AsyncCtx35 | 0); //@line 6696
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6698
  $AsyncCtx31 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6699
  _wait_ms(150); //@line 6700
  if (___async) {
   label = 17; //@line 6703
   break;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 6706
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6708
  $AsyncCtx27 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6709
  _wait_ms(400); //@line 6710
  if (___async) {
   label = 19; //@line 6713
   break;
  }
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 6716
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6718
  $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6719
  _wait_ms(400); //@line 6720
  if (___async) {
   label = 21; //@line 6723
   break;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 6726
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6728
  $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6729
  _wait_ms(400); //@line 6730
  if (___async) {
   label = 23; //@line 6733
   break;
  }
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 6736
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6738
  $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6739
  _wait_ms(400); //@line 6740
  if (___async) {
   label = 25; //@line 6743
   break;
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 6746
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6748
  $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6749
  _wait_ms(400); //@line 6750
  if (___async) {
   label = 27; //@line 6753
   break;
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 6756
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6758
  $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6759
  _wait_ms(400); //@line 6760
  if (___async) {
   label = 29; //@line 6763
   break;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6766
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6768
  $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6769
  _wait_ms(400); //@line 6770
  if (___async) {
   label = 31; //@line 6773
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6776
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6778
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6779
  _wait_ms(400); //@line 6780
  if (___async) {
   label = 33; //@line 6783
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6786
 }
 switch (label | 0) {
 case 3:
  {
   HEAP32[$AsyncCtx59 >> 2] = 615; //@line 6790
   HEAP32[$AsyncCtx59 + 4 >> 2] = $0; //@line 6792
   sp = STACKTOP; //@line 6793
   STACKTOP = sp; //@line 6794
   return;
  }
 case 5:
  {
   HEAP32[$AsyncCtx55 >> 2] = 616; //@line 6798
   HEAP32[$AsyncCtx55 + 4 >> 2] = $0; //@line 6800
   sp = STACKTOP; //@line 6801
   STACKTOP = sp; //@line 6802
   return;
  }
 case 7:
  {
   HEAP32[$AsyncCtx51 >> 2] = 617; //@line 6806
   HEAP32[$AsyncCtx51 + 4 >> 2] = $0; //@line 6808
   sp = STACKTOP; //@line 6809
   STACKTOP = sp; //@line 6810
   return;
  }
 case 9:
  {
   HEAP32[$AsyncCtx47 >> 2] = 618; //@line 6814
   HEAP32[$AsyncCtx47 + 4 >> 2] = $0; //@line 6816
   sp = STACKTOP; //@line 6817
   STACKTOP = sp; //@line 6818
   return;
  }
 case 11:
  {
   HEAP32[$AsyncCtx43 >> 2] = 619; //@line 6822
   HEAP32[$AsyncCtx43 + 4 >> 2] = $0; //@line 6824
   sp = STACKTOP; //@line 6825
   STACKTOP = sp; //@line 6826
   return;
  }
 case 13:
  {
   HEAP32[$AsyncCtx39 >> 2] = 620; //@line 6830
   HEAP32[$AsyncCtx39 + 4 >> 2] = $0; //@line 6832
   sp = STACKTOP; //@line 6833
   STACKTOP = sp; //@line 6834
   return;
  }
 case 15:
  {
   HEAP32[$AsyncCtx35 >> 2] = 621; //@line 6838
   HEAP32[$AsyncCtx35 + 4 >> 2] = $0; //@line 6840
   sp = STACKTOP; //@line 6841
   STACKTOP = sp; //@line 6842
   return;
  }
 case 17:
  {
   HEAP32[$AsyncCtx31 >> 2] = 622; //@line 6846
   HEAP32[$AsyncCtx31 + 4 >> 2] = $0; //@line 6848
   sp = STACKTOP; //@line 6849
   STACKTOP = sp; //@line 6850
   return;
  }
 case 19:
  {
   HEAP32[$AsyncCtx27 >> 2] = 623; //@line 6854
   HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 6856
   sp = STACKTOP; //@line 6857
   STACKTOP = sp; //@line 6858
   return;
  }
 case 21:
  {
   HEAP32[$AsyncCtx23 >> 2] = 624; //@line 6862
   HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 6864
   sp = STACKTOP; //@line 6865
   STACKTOP = sp; //@line 6866
   return;
  }
 case 23:
  {
   HEAP32[$AsyncCtx19 >> 2] = 625; //@line 6870
   HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 6872
   sp = STACKTOP; //@line 6873
   STACKTOP = sp; //@line 6874
   return;
  }
 case 25:
  {
   HEAP32[$AsyncCtx15 >> 2] = 626; //@line 6878
   HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 6880
   sp = STACKTOP; //@line 6881
   STACKTOP = sp; //@line 6882
   return;
  }
 case 27:
  {
   HEAP32[$AsyncCtx11 >> 2] = 627; //@line 6886
   HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 6888
   sp = STACKTOP; //@line 6889
   STACKTOP = sp; //@line 6890
   return;
  }
 case 29:
  {
   HEAP32[$AsyncCtx7 >> 2] = 628; //@line 6894
   HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 6896
   sp = STACKTOP; //@line 6897
   STACKTOP = sp; //@line 6898
   return;
  }
 case 31:
  {
   HEAP32[$AsyncCtx3 >> 2] = 629; //@line 6902
   HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 6904
   sp = STACKTOP; //@line 6905
   STACKTOP = sp; //@line 6906
   return;
  }
 case 33:
  {
   HEAP32[$AsyncCtx >> 2] = 630; //@line 6910
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 6912
   sp = STACKTOP; //@line 6913
   STACKTOP = sp; //@line 6914
   return;
  }
 }
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_272($0) {
 $0 = $0 | 0;
 var $$pre119 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 17622
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17624
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17626
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17628
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17630
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17632
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17634
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17636
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17638
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17640
 $$pre119 = HEAP32[$2 >> 2] | 0; //@line 17641
 if ($$pre119 | 0) {
  $21 = HEAP32[$$pre119 + 4 >> 2] | 0; //@line 17645
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 17646
  FUNCTION_TABLE_vii[$21 & 31]($14, $10); //@line 17647
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 471; //@line 17650
   $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 17651
   HEAP32[$22 >> 2] = $2; //@line 17652
   $23 = $ReallocAsyncCtx5 + 8 | 0; //@line 17653
   HEAP32[$23 >> 2] = $4; //@line 17654
   $24 = $ReallocAsyncCtx5 + 12 | 0; //@line 17655
   HEAP32[$24 >> 2] = $6; //@line 17656
   $25 = $ReallocAsyncCtx5 + 16 | 0; //@line 17657
   HEAP32[$25 >> 2] = $8; //@line 17658
   $26 = $ReallocAsyncCtx5 + 20 | 0; //@line 17659
   HEAP32[$26 >> 2] = $10; //@line 17660
   $27 = $ReallocAsyncCtx5 + 24 | 0; //@line 17661
   HEAP32[$27 >> 2] = $12; //@line 17662
   $28 = $ReallocAsyncCtx5 + 28 | 0; //@line 17663
   HEAP32[$28 >> 2] = $16; //@line 17664
   $29 = $ReallocAsyncCtx5 + 32 | 0; //@line 17665
   HEAP32[$29 >> 2] = $18; //@line 17666
   sp = STACKTOP; //@line 17667
   return;
  }
  ___async_unwind = 0; //@line 17670
  HEAP32[$ReallocAsyncCtx5 >> 2] = 471; //@line 17671
  $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 17672
  HEAP32[$22 >> 2] = $2; //@line 17673
  $23 = $ReallocAsyncCtx5 + 8 | 0; //@line 17674
  HEAP32[$23 >> 2] = $4; //@line 17675
  $24 = $ReallocAsyncCtx5 + 12 | 0; //@line 17676
  HEAP32[$24 >> 2] = $6; //@line 17677
  $25 = $ReallocAsyncCtx5 + 16 | 0; //@line 17678
  HEAP32[$25 >> 2] = $8; //@line 17679
  $26 = $ReallocAsyncCtx5 + 20 | 0; //@line 17680
  HEAP32[$26 >> 2] = $10; //@line 17681
  $27 = $ReallocAsyncCtx5 + 24 | 0; //@line 17682
  HEAP32[$27 >> 2] = $12; //@line 17683
  $28 = $ReallocAsyncCtx5 + 28 | 0; //@line 17684
  HEAP32[$28 >> 2] = $16; //@line 17685
  $29 = $ReallocAsyncCtx5 + 32 | 0; //@line 17686
  HEAP32[$29 >> 2] = $18; //@line 17687
  sp = STACKTOP; //@line 17688
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 17691
 $30 = $12 + 12 | 0; //@line 17692
 HEAP32[$12 >> 2] = 473; //@line 17693
 HEAP32[$12 + 4 >> 2] = 0; //@line 17695
 HEAP32[$12 + 8 >> 2] = $6; //@line 17697
 HEAP32[$30 >> 2] = 912; //@line 17698
 $31 = $6 + 1276 | 0; //@line 17699
 if (($31 | 0) == ($12 | 0)) {
  $56 = HEAP32[230] | 0; //@line 17703
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(24) | 0; //@line 17704
  FUNCTION_TABLE_vi[$56 & 1023]($12); //@line 17705
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 476; //@line 17708
   $57 = $ReallocAsyncCtx9 + 4 | 0; //@line 17709
   HEAP32[$57 >> 2] = $6; //@line 17710
   $58 = $ReallocAsyncCtx9 + 8 | 0; //@line 17711
   HEAP32[$58 >> 2] = $8; //@line 17712
   $59 = $ReallocAsyncCtx9 + 12 | 0; //@line 17713
   HEAP32[$59 >> 2] = $12; //@line 17714
   $60 = $ReallocAsyncCtx9 + 16 | 0; //@line 17715
   HEAP32[$60 >> 2] = $16; //@line 17716
   $61 = $ReallocAsyncCtx9 + 20 | 0; //@line 17717
   HEAP32[$61 >> 2] = $18; //@line 17718
   sp = STACKTOP; //@line 17719
   return;
  }
  ___async_unwind = 0; //@line 17722
  HEAP32[$ReallocAsyncCtx9 >> 2] = 476; //@line 17723
  $57 = $ReallocAsyncCtx9 + 4 | 0; //@line 17724
  HEAP32[$57 >> 2] = $6; //@line 17725
  $58 = $ReallocAsyncCtx9 + 8 | 0; //@line 17726
  HEAP32[$58 >> 2] = $8; //@line 17727
  $59 = $ReallocAsyncCtx9 + 12 | 0; //@line 17728
  HEAP32[$59 >> 2] = $12; //@line 17729
  $60 = $ReallocAsyncCtx9 + 16 | 0; //@line 17730
  HEAP32[$60 >> 2] = $16; //@line 17731
  $61 = $ReallocAsyncCtx9 + 20 | 0; //@line 17732
  HEAP32[$61 >> 2] = $18; //@line 17733
  sp = STACKTOP; //@line 17734
  return;
 }
 $33 = $6 + 1288 | 0; //@line 17737
 $34 = HEAP32[$33 >> 2] | 0; //@line 17738
 if (!$34) {
  $47 = HEAP32[229] | 0; //@line 17742
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 17743
  FUNCTION_TABLE_vii[$47 & 31]($31, $12); //@line 17744
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 475; //@line 17747
   $48 = $ReallocAsyncCtx8 + 4 | 0; //@line 17748
   HEAP32[$48 >> 2] = $6; //@line 17749
   $49 = $ReallocAsyncCtx8 + 8 | 0; //@line 17750
   HEAP32[$49 >> 2] = $8; //@line 17751
   $50 = $ReallocAsyncCtx8 + 12 | 0; //@line 17752
   HEAP32[$50 >> 2] = $12; //@line 17753
   $51 = $ReallocAsyncCtx8 + 16 | 0; //@line 17754
   HEAP32[$51 >> 2] = $16; //@line 17755
   $52 = $ReallocAsyncCtx8 + 20 | 0; //@line 17756
   HEAP32[$52 >> 2] = $30; //@line 17757
   $53 = $ReallocAsyncCtx8 + 24 | 0; //@line 17758
   HEAP32[$53 >> 2] = $33; //@line 17759
   $54 = $ReallocAsyncCtx8 + 28 | 0; //@line 17760
   HEAP32[$54 >> 2] = $18; //@line 17761
   sp = STACKTOP; //@line 17762
   return;
  }
  ___async_unwind = 0; //@line 17765
  HEAP32[$ReallocAsyncCtx8 >> 2] = 475; //@line 17766
  $48 = $ReallocAsyncCtx8 + 4 | 0; //@line 17767
  HEAP32[$48 >> 2] = $6; //@line 17768
  $49 = $ReallocAsyncCtx8 + 8 | 0; //@line 17769
  HEAP32[$49 >> 2] = $8; //@line 17770
  $50 = $ReallocAsyncCtx8 + 12 | 0; //@line 17771
  HEAP32[$50 >> 2] = $12; //@line 17772
  $51 = $ReallocAsyncCtx8 + 16 | 0; //@line 17773
  HEAP32[$51 >> 2] = $16; //@line 17774
  $52 = $ReallocAsyncCtx8 + 20 | 0; //@line 17775
  HEAP32[$52 >> 2] = $30; //@line 17776
  $53 = $ReallocAsyncCtx8 + 24 | 0; //@line 17777
  HEAP32[$53 >> 2] = $33; //@line 17778
  $54 = $ReallocAsyncCtx8 + 28 | 0; //@line 17779
  HEAP32[$54 >> 2] = $18; //@line 17780
  sp = STACKTOP; //@line 17781
  return;
 } else {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 17785
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 17786
  FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 17787
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 474; //@line 17790
   $38 = $ReallocAsyncCtx7 + 4 | 0; //@line 17791
   HEAP32[$38 >> 2] = $6; //@line 17792
   $39 = $ReallocAsyncCtx7 + 8 | 0; //@line 17793
   HEAP32[$39 >> 2] = $30; //@line 17794
   $40 = $ReallocAsyncCtx7 + 12 | 0; //@line 17795
   HEAP32[$40 >> 2] = $8; //@line 17796
   $41 = $ReallocAsyncCtx7 + 16 | 0; //@line 17797
   HEAP32[$41 >> 2] = $33; //@line 17798
   $42 = $ReallocAsyncCtx7 + 20 | 0; //@line 17799
   HEAP32[$42 >> 2] = $12; //@line 17800
   $43 = $ReallocAsyncCtx7 + 24 | 0; //@line 17801
   HEAP32[$43 >> 2] = $16; //@line 17802
   $44 = $ReallocAsyncCtx7 + 28 | 0; //@line 17803
   HEAP32[$44 >> 2] = $31; //@line 17804
   $45 = $ReallocAsyncCtx7 + 32 | 0; //@line 17805
   HEAP32[$45 >> 2] = $18; //@line 17806
   sp = STACKTOP; //@line 17807
   return;
  }
  ___async_unwind = 0; //@line 17810
  HEAP32[$ReallocAsyncCtx7 >> 2] = 474; //@line 17811
  $38 = $ReallocAsyncCtx7 + 4 | 0; //@line 17812
  HEAP32[$38 >> 2] = $6; //@line 17813
  $39 = $ReallocAsyncCtx7 + 8 | 0; //@line 17814
  HEAP32[$39 >> 2] = $30; //@line 17815
  $40 = $ReallocAsyncCtx7 + 12 | 0; //@line 17816
  HEAP32[$40 >> 2] = $8; //@line 17817
  $41 = $ReallocAsyncCtx7 + 16 | 0; //@line 17818
  HEAP32[$41 >> 2] = $33; //@line 17819
  $42 = $ReallocAsyncCtx7 + 20 | 0; //@line 17820
  HEAP32[$42 >> 2] = $12; //@line 17821
  $43 = $ReallocAsyncCtx7 + 24 | 0; //@line 17822
  HEAP32[$43 >> 2] = $16; //@line 17823
  $44 = $ReallocAsyncCtx7 + 28 | 0; //@line 17824
  HEAP32[$44 >> 2] = $31; //@line 17825
  $45 = $ReallocAsyncCtx7 + 32 | 0; //@line 17826
  HEAP32[$45 >> 2] = $18; //@line 17827
  sp = STACKTOP; //@line 17828
  return;
 }
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $14 = 0, $2 = 0, $20 = 0, $21 = 0, $25 = 0, $27 = 0, $3 = 0, $32 = 0, $33 = 0, $36 = 0, $39 = 0, $45 = 0, $46 = 0, $50 = 0, $52 = 0, $58 = 0, $60 = 0, $62 = 0, $63 = 0, $66 = 0, $69 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP; //@line 5510
 STACKTOP = STACKTOP + 64 | 0; //@line 5511
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 5511
 $vararg_buffer3 = sp + 16 | 0; //@line 5512
 $vararg_buffer1 = sp + 8 | 0; //@line 5513
 $2 = sp + 40 | 0; //@line 5515
 $3 = sp + 24 | 0; //@line 5516
 if (!$1) {
  _mbed_tracef(2, 12332, 12337, sp); //@line 5519
  $AsyncCtx39 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5520
  _mbed_assert_internal(15107, 12372, 691); //@line 5521
  if (___async) {
   HEAP32[$AsyncCtx39 >> 2] = 168; //@line 5524
   sp = STACKTOP; //@line 5525
   STACKTOP = sp; //@line 5526
   return;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 5528
  STACKTOP = sp; //@line 5529
  return;
 }
 switch (HEAP32[$1 >> 2] | 0) {
 case 0:
  {
   $9 = $0 + 1876 | 0; //@line 5537
   if (!(HEAP32[$1 + 4 >> 2] | 0)) {
    HEAP32[$9 >> 2] = 4; //@line 5539
    $AsyncCtx27 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5540
    $10 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 5541
    if (___async) {
     HEAP32[$AsyncCtx27 >> 2] = 169; //@line 5544
     HEAP32[$AsyncCtx27 + 4 >> 2] = $vararg_buffer1; //@line 5546
     HEAP32[$AsyncCtx27 + 8 >> 2] = $vararg_buffer1; //@line 5548
     sp = STACKTOP; //@line 5549
     STACKTOP = sp; //@line 5550
     return;
    }
    _emscripten_free_async_context($AsyncCtx27 | 0); //@line 5552
    if (!$10) {
     STACKTOP = sp; //@line 5555
     return;
    }
    _mbed_tracef(2, 12332, 12470, $vararg_buffer1); //@line 5557
    STACKTOP = sp; //@line 5558
    return;
   }
   HEAP32[$9 >> 2] = 6; //@line 5560
   $AsyncCtx23 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5561
   $14 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 5562
   if (___async) {
    HEAP32[$AsyncCtx23 >> 2] = 170; //@line 5565
    HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 5567
    HEAP32[$AsyncCtx23 + 8 >> 2] = $vararg_buffer3; //@line 5569
    HEAP32[$AsyncCtx23 + 12 >> 2] = $vararg_buffer3; //@line 5571
    HEAP32[$AsyncCtx23 + 16 >> 2] = $2; //@line 5573
    sp = STACKTOP; //@line 5574
    STACKTOP = sp; //@line 5575
    return;
   }
   _emscripten_free_async_context($AsyncCtx23 | 0); //@line 5577
   if (($14 | 0) != -1018) {
    _mbed_tracef(2, 12332, 12522, $vararg_buffer3); //@line 5580
   }
   $20 = $0 + 1892 | 0; //@line 5582
   $21 = HEAP32[$20 >> 2] | 0; //@line 5583
   if (!$21) {
    STACKTOP = sp; //@line 5586
    return;
   }
   $25 = HEAP32[$0 + 2288 >> 2] | 0; //@line 5590
   $27 = HEAP32[$21 + 4 >> 2] | 0; //@line 5592
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 5593
   FUNCTION_TABLE_vii[$27 & 31]($2, $0 + 1880 | 0); //@line 5594
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 171; //@line 5597
    HEAP32[$AsyncCtx + 4 >> 2] = $20; //@line 5599
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 5601
    HEAP32[$AsyncCtx + 12 >> 2] = $25; //@line 5603
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 5605
    sp = STACKTOP; //@line 5606
    STACKTOP = sp; //@line 5607
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 5609
   $32 = $2 + 12 | 0; //@line 5611
   HEAP32[$32 >> 2] = HEAP32[$20 >> 2]; //@line 5612
   $AsyncCtx19 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5613
   $33 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($25, $2, 10) | 0; //@line 5614
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 172; //@line 5617
    HEAP32[$AsyncCtx19 + 4 >> 2] = $32; //@line 5619
    HEAP32[$AsyncCtx19 + 8 >> 2] = $2; //@line 5621
    sp = STACKTOP; //@line 5622
    STACKTOP = sp; //@line 5623
    return;
   }
   _emscripten_free_async_context($AsyncCtx19 | 0); //@line 5625
   $36 = HEAP32[$32 >> 2] | 0; //@line 5626
   do {
    if ($36 | 0) {
     $39 = HEAP32[$36 + 8 >> 2] | 0; //@line 5631
     $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5632
     FUNCTION_TABLE_vi[$39 & 1023]($2); //@line 5633
     if (___async) {
      HEAP32[$AsyncCtx6 >> 2] = 173; //@line 5636
      HEAP32[$AsyncCtx6 + 4 >> 2] = $33; //@line 5638
      sp = STACKTOP; //@line 5639
      STACKTOP = sp; //@line 5640
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx6 | 0); //@line 5642
      break;
     }
    }
   } while (0);
   if ($33 | 0) {
    STACKTOP = sp; //@line 5649
    return;
   }
   $AsyncCtx35 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5651
   _mbed_assert_internal(13588, 12372, 712); //@line 5652
   if (___async) {
    HEAP32[$AsyncCtx35 >> 2] = 174; //@line 5655
    sp = STACKTOP; //@line 5656
    STACKTOP = sp; //@line 5657
    return;
   }
   _emscripten_free_async_context($AsyncCtx35 | 0); //@line 5659
   STACKTOP = sp; //@line 5660
   return;
  }
 case 1:
  {
   if (HEAP32[$1 + 4 >> 2] | 0) {
    STACKTOP = sp; //@line 5668
    return;
   }
   $45 = $0 + 1908 | 0; //@line 5670
   $46 = HEAP32[$45 >> 2] | 0; //@line 5671
   if (!$46) {
    STACKTOP = sp; //@line 5674
    return;
   }
   $50 = HEAP32[$0 + 2288 >> 2] | 0; //@line 5678
   $52 = HEAP32[$46 + 4 >> 2] | 0; //@line 5680
   $AsyncCtx9 = _emscripten_alloc_async_context(24, sp) | 0; //@line 5681
   FUNCTION_TABLE_vii[$52 & 31]($3, $0 + 1896 | 0); //@line 5682
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 175; //@line 5685
    HEAP32[$AsyncCtx9 + 4 >> 2] = $45; //@line 5687
    HEAP32[$AsyncCtx9 + 8 >> 2] = $3; //@line 5689
    HEAP32[$AsyncCtx9 + 12 >> 2] = $1; //@line 5691
    HEAP32[$AsyncCtx9 + 16 >> 2] = $50; //@line 5693
    HEAP32[$AsyncCtx9 + 20 >> 2] = $3; //@line 5695
    sp = STACKTOP; //@line 5696
    STACKTOP = sp; //@line 5697
    return;
   }
   _emscripten_free_async_context($AsyncCtx9 | 0); //@line 5699
   $58 = $3 + 12 | 0; //@line 5701
   HEAP32[$58 >> 2] = HEAP32[$45 >> 2]; //@line 5702
   $60 = HEAP8[$1 + 12 >> 0] | 0; //@line 5704
   $62 = HEAP8[$1 + 13 >> 0] | 0; //@line 5706
   $AsyncCtx16 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5707
   $63 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($50, $3, $60, $62) | 0; //@line 5708
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 176; //@line 5711
    HEAP32[$AsyncCtx16 + 4 >> 2] = $58; //@line 5713
    HEAP32[$AsyncCtx16 + 8 >> 2] = $3; //@line 5715
    sp = STACKTOP; //@line 5716
    STACKTOP = sp; //@line 5717
    return;
   }
   _emscripten_free_async_context($AsyncCtx16 | 0); //@line 5719
   $66 = HEAP32[$58 >> 2] | 0; //@line 5720
   do {
    if ($66 | 0) {
     $69 = HEAP32[$66 + 8 >> 2] | 0; //@line 5725
     $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5726
     FUNCTION_TABLE_vi[$69 & 1023]($3); //@line 5727
     if (___async) {
      HEAP32[$AsyncCtx13 >> 2] = 177; //@line 5730
      HEAP32[$AsyncCtx13 + 4 >> 2] = $63; //@line 5732
      sp = STACKTOP; //@line 5733
      STACKTOP = sp; //@line 5734
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx13 | 0); //@line 5736
      break;
     }
    }
   } while (0);
   if ($63 | 0) {
    STACKTOP = sp; //@line 5743
    return;
   }
   $AsyncCtx31 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5745
   _mbed_assert_internal(13588, 12372, 734); //@line 5746
   if (___async) {
    HEAP32[$AsyncCtx31 >> 2] = 178; //@line 5749
    sp = STACKTOP; //@line 5750
    STACKTOP = sp; //@line 5751
    return;
   }
   _emscripten_free_async_context($AsyncCtx31 | 0); //@line 5753
   STACKTOP = sp; //@line 5754
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 5758
   return;
  }
 }
}
function __ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb_105($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $42 = 0, $48 = 0, $54 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 24895
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24897
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 24903
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 24905
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 24907
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 24909
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 24911
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 24913
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 24915
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 24917
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 24919
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 24921
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 24923
 $34 = HEAP8[$2 >> 0] | 0; //@line 24924
 $39 = ($34 & 255) + (HEAPU8[$0 + 8 >> 0] | 0) & 255; //@line 24928
 $30 = (HEAP8[$0 + 9 >> 0] | 0) + 1 << 24 >> 24; //@line 24929
 if (($30 & 255) >= (HEAPU8[$8 >> 0] | 0)) {
  return;
 }
 if ((($34 & 255) + (HEAPU8[$10 >> 0] | 0) | 0) >>> 0 > ($30 & 255) >>> 0) {
  $37 = HEAP32[$14 >> 2] | 0; //@line 24942
  $38 = $39 & 255; //@line 24943
  $42 = HEAPU8[$37 + $38 >> 0] | 0; //@line 24946
  HEAP32[$16 >> 2] = $42; //@line 24947
  $48 = (HEAPU8[$37 + ($38 + 1) >> 0] | 0) << 8 | $42; //@line 24953
  HEAP32[$16 >> 2] = $48; //@line 24954
  $54 = (HEAPU8[$37 + ($38 + 2) >> 0] | 0) << 16 | $48; //@line 24960
  HEAP32[$16 >> 2] = $54 * 100; //@line 24962
  HEAP32[$18 >> 2] = 0; //@line 24963
  if ($54 | 0) {
   $59 = HEAP32[(HEAP32[$26 >> 2] | 0) + 60 >> 2] | 0; //@line 24968
   $ReallocAsyncCtx = _emscripten_realloc_async_context(56) | 0; //@line 24969
   FUNCTION_TABLE_iiii[$59 & 15]($24, $28, $30) | 0; //@line 24970
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 515; //@line 24973
    $60 = $ReallocAsyncCtx + 4 | 0; //@line 24974
    HEAP32[$60 >> 2] = $2; //@line 24975
    $61 = $ReallocAsyncCtx + 8 | 0; //@line 24976
    HEAP8[$61 >> 0] = $39; //@line 24977
    $62 = $ReallocAsyncCtx + 9 | 0; //@line 24978
    HEAP8[$62 >> 0] = $30; //@line 24979
    $63 = $ReallocAsyncCtx + 12 | 0; //@line 24980
    HEAP32[$63 >> 2] = $8; //@line 24981
    $64 = $ReallocAsyncCtx + 16 | 0; //@line 24982
    HEAP32[$64 >> 2] = $10; //@line 24983
    $65 = $ReallocAsyncCtx + 20 | 0; //@line 24984
    HEAP32[$65 >> 2] = $12; //@line 24985
    $66 = $ReallocAsyncCtx + 24 | 0; //@line 24986
    HEAP32[$66 >> 2] = $14; //@line 24987
    $67 = $ReallocAsyncCtx + 28 | 0; //@line 24988
    HEAP32[$67 >> 2] = $16; //@line 24989
    $68 = $ReallocAsyncCtx + 32 | 0; //@line 24990
    HEAP32[$68 >> 2] = $18; //@line 24991
    $69 = $ReallocAsyncCtx + 36 | 0; //@line 24992
    HEAP32[$69 >> 2] = $20; //@line 24993
    $70 = $ReallocAsyncCtx + 40 | 0; //@line 24994
    HEAP32[$70 >> 2] = $22; //@line 24995
    $71 = $ReallocAsyncCtx + 44 | 0; //@line 24996
    HEAP32[$71 >> 2] = $24; //@line 24997
    $72 = $ReallocAsyncCtx + 48 | 0; //@line 24998
    HEAP32[$72 >> 2] = $26; //@line 24999
    $73 = $ReallocAsyncCtx + 52 | 0; //@line 25000
    HEAP32[$73 >> 2] = $28; //@line 25001
    sp = STACKTOP; //@line 25002
    return;
   }
   ___async_unwind = 0; //@line 25005
   HEAP32[$ReallocAsyncCtx >> 2] = 515; //@line 25006
   $60 = $ReallocAsyncCtx + 4 | 0; //@line 25007
   HEAP32[$60 >> 2] = $2; //@line 25008
   $61 = $ReallocAsyncCtx + 8 | 0; //@line 25009
   HEAP8[$61 >> 0] = $39; //@line 25010
   $62 = $ReallocAsyncCtx + 9 | 0; //@line 25011
   HEAP8[$62 >> 0] = $30; //@line 25012
   $63 = $ReallocAsyncCtx + 12 | 0; //@line 25013
   HEAP32[$63 >> 2] = $8; //@line 25014
   $64 = $ReallocAsyncCtx + 16 | 0; //@line 25015
   HEAP32[$64 >> 2] = $10; //@line 25016
   $65 = $ReallocAsyncCtx + 20 | 0; //@line 25017
   HEAP32[$65 >> 2] = $12; //@line 25018
   $66 = $ReallocAsyncCtx + 24 | 0; //@line 25019
   HEAP32[$66 >> 2] = $14; //@line 25020
   $67 = $ReallocAsyncCtx + 28 | 0; //@line 25021
   HEAP32[$67 >> 2] = $16; //@line 25022
   $68 = $ReallocAsyncCtx + 32 | 0; //@line 25023
   HEAP32[$68 >> 2] = $18; //@line 25024
   $69 = $ReallocAsyncCtx + 36 | 0; //@line 25025
   HEAP32[$69 >> 2] = $20; //@line 25026
   $70 = $ReallocAsyncCtx + 40 | 0; //@line 25027
   HEAP32[$70 >> 2] = $22; //@line 25028
   $71 = $ReallocAsyncCtx + 44 | 0; //@line 25029
   HEAP32[$71 >> 2] = $24; //@line 25030
   $72 = $ReallocAsyncCtx + 48 | 0; //@line 25031
   HEAP32[$72 >> 2] = $26; //@line 25032
   $73 = $ReallocAsyncCtx + 52 | 0; //@line 25033
   HEAP32[$73 >> 2] = $28; //@line 25034
   sp = STACKTOP; //@line 25035
   return;
  }
 } else {
  HEAP32[$16 >> 2] = 0; //@line 25039
  HEAP8[$20 >> 0] = 0; //@line 25040
  HEAP32[$18 >> 2] = 0; //@line 25041
 }
 $76 = HEAP32[(HEAP32[$22 >> 2] | 0) + 64 >> 2] | 0; //@line 25045
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(56) | 0; //@line 25046
 FUNCTION_TABLE_iii[$76 & 31]($24, $30) | 0; //@line 25047
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 516; //@line 25050
  $77 = $ReallocAsyncCtx2 + 4 | 0; //@line 25051
  HEAP32[$77 >> 2] = $2; //@line 25052
  $78 = $ReallocAsyncCtx2 + 8 | 0; //@line 25053
  HEAP8[$78 >> 0] = $39; //@line 25054
  $79 = $ReallocAsyncCtx2 + 9 | 0; //@line 25055
  HEAP8[$79 >> 0] = $30; //@line 25056
  $80 = $ReallocAsyncCtx2 + 12 | 0; //@line 25057
  HEAP32[$80 >> 2] = $8; //@line 25058
  $81 = $ReallocAsyncCtx2 + 16 | 0; //@line 25059
  HEAP32[$81 >> 2] = $10; //@line 25060
  $82 = $ReallocAsyncCtx2 + 20 | 0; //@line 25061
  HEAP32[$82 >> 2] = $12; //@line 25062
  $83 = $ReallocAsyncCtx2 + 24 | 0; //@line 25063
  HEAP32[$83 >> 2] = $14; //@line 25064
  $84 = $ReallocAsyncCtx2 + 28 | 0; //@line 25065
  HEAP32[$84 >> 2] = $16; //@line 25066
  $85 = $ReallocAsyncCtx2 + 32 | 0; //@line 25067
  HEAP32[$85 >> 2] = $18; //@line 25068
  $86 = $ReallocAsyncCtx2 + 36 | 0; //@line 25069
  HEAP32[$86 >> 2] = $20; //@line 25070
  $87 = $ReallocAsyncCtx2 + 40 | 0; //@line 25071
  HEAP32[$87 >> 2] = $22; //@line 25072
  $88 = $ReallocAsyncCtx2 + 44 | 0; //@line 25073
  HEAP32[$88 >> 2] = $24; //@line 25074
  $89 = $ReallocAsyncCtx2 + 48 | 0; //@line 25075
  HEAP32[$89 >> 2] = $26; //@line 25076
  $90 = $ReallocAsyncCtx2 + 52 | 0; //@line 25077
  HEAP32[$90 >> 2] = $28; //@line 25078
  sp = STACKTOP; //@line 25079
  return;
 }
 ___async_unwind = 0; //@line 25082
 HEAP32[$ReallocAsyncCtx2 >> 2] = 516; //@line 25083
 $77 = $ReallocAsyncCtx2 + 4 | 0; //@line 25084
 HEAP32[$77 >> 2] = $2; //@line 25085
 $78 = $ReallocAsyncCtx2 + 8 | 0; //@line 25086
 HEAP8[$78 >> 0] = $39; //@line 25087
 $79 = $ReallocAsyncCtx2 + 9 | 0; //@line 25088
 HEAP8[$79 >> 0] = $30; //@line 25089
 $80 = $ReallocAsyncCtx2 + 12 | 0; //@line 25090
 HEAP32[$80 >> 2] = $8; //@line 25091
 $81 = $ReallocAsyncCtx2 + 16 | 0; //@line 25092
 HEAP32[$81 >> 2] = $10; //@line 25093
 $82 = $ReallocAsyncCtx2 + 20 | 0; //@line 25094
 HEAP32[$82 >> 2] = $12; //@line 25095
 $83 = $ReallocAsyncCtx2 + 24 | 0; //@line 25096
 HEAP32[$83 >> 2] = $14; //@line 25097
 $84 = $ReallocAsyncCtx2 + 28 | 0; //@line 25098
 HEAP32[$84 >> 2] = $16; //@line 25099
 $85 = $ReallocAsyncCtx2 + 32 | 0; //@line 25100
 HEAP32[$85 >> 2] = $18; //@line 25101
 $86 = $ReallocAsyncCtx2 + 36 | 0; //@line 25102
 HEAP32[$86 >> 2] = $20; //@line 25103
 $87 = $ReallocAsyncCtx2 + 40 | 0; //@line 25104
 HEAP32[$87 >> 2] = $22; //@line 25105
 $88 = $ReallocAsyncCtx2 + 44 | 0; //@line 25106
 HEAP32[$88 >> 2] = $24; //@line 25107
 $89 = $ReallocAsyncCtx2 + 48 | 0; //@line 25108
 HEAP32[$89 >> 2] = $26; //@line 25109
 $90 = $ReallocAsyncCtx2 + 52 | 0; //@line 25110
 HEAP32[$90 >> 2] = $28; //@line 25111
 sp = STACKTOP; //@line 25112
 return;
}
function __ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $42 = 0, $48 = 0, $54 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 24667
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24669
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 24675
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 24677
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 24679
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 24681
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 24683
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 24685
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 24687
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 24689
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 24691
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 24693
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 24695
 $34 = HEAP8[$2 >> 0] | 0; //@line 24696
 $39 = ($34 & 255) + (HEAPU8[$0 + 8 >> 0] | 0) & 255; //@line 24700
 $30 = (HEAP8[$0 + 9 >> 0] | 0) + 1 << 24 >> 24; //@line 24701
 if (($30 & 255) >= (HEAPU8[$8 >> 0] | 0)) {
  return;
 }
 if ((($34 & 255) + (HEAPU8[$10 >> 0] | 0) | 0) >>> 0 > ($30 & 255) >>> 0) {
  $37 = HEAP32[$14 >> 2] | 0; //@line 24714
  $38 = $39 & 255; //@line 24715
  $42 = HEAPU8[$37 + $38 >> 0] | 0; //@line 24718
  HEAP32[$16 >> 2] = $42; //@line 24719
  $48 = (HEAPU8[$37 + ($38 + 1) >> 0] | 0) << 8 | $42; //@line 24725
  HEAP32[$16 >> 2] = $48; //@line 24726
  $54 = (HEAPU8[$37 + ($38 + 2) >> 0] | 0) << 16 | $48; //@line 24732
  HEAP32[$16 >> 2] = $54 * 100; //@line 24734
  HEAP32[$18 >> 2] = 0; //@line 24735
  if ($54 | 0) {
   $59 = HEAP32[(HEAP32[$26 >> 2] | 0) + 60 >> 2] | 0; //@line 24740
   $ReallocAsyncCtx = _emscripten_realloc_async_context(56) | 0; //@line 24741
   FUNCTION_TABLE_iiii[$59 & 15]($24, $28, $30) | 0; //@line 24742
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 515; //@line 24745
    $60 = $ReallocAsyncCtx + 4 | 0; //@line 24746
    HEAP32[$60 >> 2] = $2; //@line 24747
    $61 = $ReallocAsyncCtx + 8 | 0; //@line 24748
    HEAP8[$61 >> 0] = $39; //@line 24749
    $62 = $ReallocAsyncCtx + 9 | 0; //@line 24750
    HEAP8[$62 >> 0] = $30; //@line 24751
    $63 = $ReallocAsyncCtx + 12 | 0; //@line 24752
    HEAP32[$63 >> 2] = $8; //@line 24753
    $64 = $ReallocAsyncCtx + 16 | 0; //@line 24754
    HEAP32[$64 >> 2] = $10; //@line 24755
    $65 = $ReallocAsyncCtx + 20 | 0; //@line 24756
    HEAP32[$65 >> 2] = $12; //@line 24757
    $66 = $ReallocAsyncCtx + 24 | 0; //@line 24758
    HEAP32[$66 >> 2] = $14; //@line 24759
    $67 = $ReallocAsyncCtx + 28 | 0; //@line 24760
    HEAP32[$67 >> 2] = $16; //@line 24761
    $68 = $ReallocAsyncCtx + 32 | 0; //@line 24762
    HEAP32[$68 >> 2] = $18; //@line 24763
    $69 = $ReallocAsyncCtx + 36 | 0; //@line 24764
    HEAP32[$69 >> 2] = $20; //@line 24765
    $70 = $ReallocAsyncCtx + 40 | 0; //@line 24766
    HEAP32[$70 >> 2] = $22; //@line 24767
    $71 = $ReallocAsyncCtx + 44 | 0; //@line 24768
    HEAP32[$71 >> 2] = $24; //@line 24769
    $72 = $ReallocAsyncCtx + 48 | 0; //@line 24770
    HEAP32[$72 >> 2] = $26; //@line 24771
    $73 = $ReallocAsyncCtx + 52 | 0; //@line 24772
    HEAP32[$73 >> 2] = $28; //@line 24773
    sp = STACKTOP; //@line 24774
    return;
   }
   ___async_unwind = 0; //@line 24777
   HEAP32[$ReallocAsyncCtx >> 2] = 515; //@line 24778
   $60 = $ReallocAsyncCtx + 4 | 0; //@line 24779
   HEAP32[$60 >> 2] = $2; //@line 24780
   $61 = $ReallocAsyncCtx + 8 | 0; //@line 24781
   HEAP8[$61 >> 0] = $39; //@line 24782
   $62 = $ReallocAsyncCtx + 9 | 0; //@line 24783
   HEAP8[$62 >> 0] = $30; //@line 24784
   $63 = $ReallocAsyncCtx + 12 | 0; //@line 24785
   HEAP32[$63 >> 2] = $8; //@line 24786
   $64 = $ReallocAsyncCtx + 16 | 0; //@line 24787
   HEAP32[$64 >> 2] = $10; //@line 24788
   $65 = $ReallocAsyncCtx + 20 | 0; //@line 24789
   HEAP32[$65 >> 2] = $12; //@line 24790
   $66 = $ReallocAsyncCtx + 24 | 0; //@line 24791
   HEAP32[$66 >> 2] = $14; //@line 24792
   $67 = $ReallocAsyncCtx + 28 | 0; //@line 24793
   HEAP32[$67 >> 2] = $16; //@line 24794
   $68 = $ReallocAsyncCtx + 32 | 0; //@line 24795
   HEAP32[$68 >> 2] = $18; //@line 24796
   $69 = $ReallocAsyncCtx + 36 | 0; //@line 24797
   HEAP32[$69 >> 2] = $20; //@line 24798
   $70 = $ReallocAsyncCtx + 40 | 0; //@line 24799
   HEAP32[$70 >> 2] = $22; //@line 24800
   $71 = $ReallocAsyncCtx + 44 | 0; //@line 24801
   HEAP32[$71 >> 2] = $24; //@line 24802
   $72 = $ReallocAsyncCtx + 48 | 0; //@line 24803
   HEAP32[$72 >> 2] = $26; //@line 24804
   $73 = $ReallocAsyncCtx + 52 | 0; //@line 24805
   HEAP32[$73 >> 2] = $28; //@line 24806
   sp = STACKTOP; //@line 24807
   return;
  }
 } else {
  HEAP32[$16 >> 2] = 0; //@line 24811
  HEAP8[$20 >> 0] = 0; //@line 24812
  HEAP32[$18 >> 2] = 0; //@line 24813
 }
 $76 = HEAP32[(HEAP32[$22 >> 2] | 0) + 64 >> 2] | 0; //@line 24817
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(56) | 0; //@line 24818
 FUNCTION_TABLE_iii[$76 & 31]($24, $30) | 0; //@line 24819
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 516; //@line 24822
  $77 = $ReallocAsyncCtx2 + 4 | 0; //@line 24823
  HEAP32[$77 >> 2] = $2; //@line 24824
  $78 = $ReallocAsyncCtx2 + 8 | 0; //@line 24825
  HEAP8[$78 >> 0] = $39; //@line 24826
  $79 = $ReallocAsyncCtx2 + 9 | 0; //@line 24827
  HEAP8[$79 >> 0] = $30; //@line 24828
  $80 = $ReallocAsyncCtx2 + 12 | 0; //@line 24829
  HEAP32[$80 >> 2] = $8; //@line 24830
  $81 = $ReallocAsyncCtx2 + 16 | 0; //@line 24831
  HEAP32[$81 >> 2] = $10; //@line 24832
  $82 = $ReallocAsyncCtx2 + 20 | 0; //@line 24833
  HEAP32[$82 >> 2] = $12; //@line 24834
  $83 = $ReallocAsyncCtx2 + 24 | 0; //@line 24835
  HEAP32[$83 >> 2] = $14; //@line 24836
  $84 = $ReallocAsyncCtx2 + 28 | 0; //@line 24837
  HEAP32[$84 >> 2] = $16; //@line 24838
  $85 = $ReallocAsyncCtx2 + 32 | 0; //@line 24839
  HEAP32[$85 >> 2] = $18; //@line 24840
  $86 = $ReallocAsyncCtx2 + 36 | 0; //@line 24841
  HEAP32[$86 >> 2] = $20; //@line 24842
  $87 = $ReallocAsyncCtx2 + 40 | 0; //@line 24843
  HEAP32[$87 >> 2] = $22; //@line 24844
  $88 = $ReallocAsyncCtx2 + 44 | 0; //@line 24845
  HEAP32[$88 >> 2] = $24; //@line 24846
  $89 = $ReallocAsyncCtx2 + 48 | 0; //@line 24847
  HEAP32[$89 >> 2] = $26; //@line 24848
  $90 = $ReallocAsyncCtx2 + 52 | 0; //@line 24849
  HEAP32[$90 >> 2] = $28; //@line 24850
  sp = STACKTOP; //@line 24851
  return;
 }
 ___async_unwind = 0; //@line 24854
 HEAP32[$ReallocAsyncCtx2 >> 2] = 516; //@line 24855
 $77 = $ReallocAsyncCtx2 + 4 | 0; //@line 24856
 HEAP32[$77 >> 2] = $2; //@line 24857
 $78 = $ReallocAsyncCtx2 + 8 | 0; //@line 24858
 HEAP8[$78 >> 0] = $39; //@line 24859
 $79 = $ReallocAsyncCtx2 + 9 | 0; //@line 24860
 HEAP8[$79 >> 0] = $30; //@line 24861
 $80 = $ReallocAsyncCtx2 + 12 | 0; //@line 24862
 HEAP32[$80 >> 2] = $8; //@line 24863
 $81 = $ReallocAsyncCtx2 + 16 | 0; //@line 24864
 HEAP32[$81 >> 2] = $10; //@line 24865
 $82 = $ReallocAsyncCtx2 + 20 | 0; //@line 24866
 HEAP32[$82 >> 2] = $12; //@line 24867
 $83 = $ReallocAsyncCtx2 + 24 | 0; //@line 24868
 HEAP32[$83 >> 2] = $14; //@line 24869
 $84 = $ReallocAsyncCtx2 + 28 | 0; //@line 24870
 HEAP32[$84 >> 2] = $16; //@line 24871
 $85 = $ReallocAsyncCtx2 + 32 | 0; //@line 24872
 HEAP32[$85 >> 2] = $18; //@line 24873
 $86 = $ReallocAsyncCtx2 + 36 | 0; //@line 24874
 HEAP32[$86 >> 2] = $20; //@line 24875
 $87 = $ReallocAsyncCtx2 + 40 | 0; //@line 24876
 HEAP32[$87 >> 2] = $22; //@line 24877
 $88 = $ReallocAsyncCtx2 + 44 | 0; //@line 24878
 HEAP32[$88 >> 2] = $24; //@line 24879
 $89 = $ReallocAsyncCtx2 + 48 | 0; //@line 24880
 HEAP32[$89 >> 2] = $26; //@line 24881
 $90 = $ReallocAsyncCtx2 + 52 | 0; //@line 24882
 HEAP32[$90 >> 2] = $28; //@line 24883
 sp = STACKTOP; //@line 24884
 return;
}
function _mbedtls_gcm_setkey__async_cb($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $103 = 0, $105 = 0, $106 = 0, $107 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $116 = 0, $121 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $137 = 0, $139 = 0, $144 = 0, $149 = 0, $151 = 0, $152 = 0, $153 = 0, $155 = 0, $156 = 0, $157 = 0, $160 = 0, $162 = 0, $167 = 0, $171 = 0, $172 = 0, $174 = 0, $178 = 0, $179 = 0, $181 = 0, $185 = 0, $186 = 0, $188 = 0, $192 = 0, $193 = 0, $195 = 0, $199 = 0, $200 = 0, $202 = 0, $206 = 0, $207 = 0, $209 = 0, $213 = 0, $214 = 0, $216 = 0, $220 = 0, $221 = 0, $223 = 0, $230 = 0, $237 = 0, $244 = 0, $251 = 0, $258 = 0, $265 = 0, $27 = 0, $272 = 0, $279 = 0, $286 = 0, $293 = 0, $300 = 0, $307 = 0, $314 = 0, $321 = 0, $4 = 0, $45 = 0, $6 = 0, $63 = 0, $81 = 0, $83 = 0, $88 = 0, $93 = 0, $98 = 0, $AsyncRetVal = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14238
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14240
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14244
 if (!$AsyncRetVal) {
  $27 = (HEAPU8[$4 + 1 >> 0] | 0) << 16 | (HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0) << 24 | (HEAPU8[$4 + 2 >> 0] | 0) << 8 | (HEAPU8[$4 + 3 >> 0] | 0); //@line 14263
  $45 = (HEAPU8[$4 + 5 >> 0] | 0) << 16 | (HEAPU8[$4 + 4 >> 0] | 0) << 24 | (HEAPU8[$4 + 6 >> 0] | 0) << 8 | (HEAPU8[$4 + 7 >> 0] | 0); //@line 14281
  $63 = (HEAPU8[$4 + 9 >> 0] | 0) << 16 | (HEAPU8[$4 + 8 >> 0] | 0) << 24 | (HEAPU8[$4 + 10 >> 0] | 0) << 8 | (HEAPU8[$4 + 11 >> 0] | 0); //@line 14299
  $81 = (HEAPU8[$4 + 13 >> 0] | 0) << 16 | (HEAPU8[$4 + 12 >> 0] | 0) << 24 | (HEAPU8[$4 + 14 >> 0] | 0) << 8 | (HEAPU8[$4 + 15 >> 0] | 0); //@line 14317
  $83 = $6 + 136 | 0; //@line 14319
  HEAP32[$83 >> 2] = $81; //@line 14321
  HEAP32[$83 + 4 >> 2] = $63; //@line 14324
  $88 = $6 + 264 | 0; //@line 14326
  HEAP32[$88 >> 2] = $45; //@line 14328
  HEAP32[$88 + 4 >> 2] = $27; //@line 14331
  $93 = $6 + 200 | 0; //@line 14333
  HEAP32[$93 >> 2] = 0; //@line 14335
  HEAP32[$93 + 4 >> 2] = 0; //@line 14338
  $98 = $6 + 72 | 0; //@line 14340
  HEAP32[$98 >> 2] = 0; //@line 14342
  HEAP32[$98 + 4 >> 2] = 0; //@line 14345
  $103 = _i64Subtract(0, 0, $81 & 1 | 0, 0) | 0; //@line 14347
  $105 = _bitshift64Shl($45 | 0, 0, 63) | 0; //@line 14349
  $106 = tempRet0; //@line 14350
  $107 = _bitshift64Lshr($81 | 0, $63 | 0, 1) | 0; //@line 14351
  $109 = $107 | $105; //@line 14353
  $110 = tempRet0 | $106; //@line 14354
  $111 = _bitshift64Lshr($45 | 0, $27 | 0, 1) | 0; //@line 14355
  $112 = tempRet0; //@line 14356
  $114 = $103 & -520093696 ^ $112; //@line 14358
  $116 = $6 + 104 | 0; //@line 14360
  HEAP32[$116 >> 2] = $109; //@line 14362
  HEAP32[$116 + 4 >> 2] = $110; //@line 14365
  $121 = $6 + 232 | 0; //@line 14367
  HEAP32[$121 >> 2] = $111; //@line 14369
  HEAP32[$121 + 4 >> 2] = $114; //@line 14372
  $126 = _i64Subtract(0, 0, $107 & 1 | 0, 0) | 0; //@line 14374
  $128 = _bitshift64Shl($111 | 0, $112 | 0, 63) | 0; //@line 14376
  $129 = tempRet0; //@line 14377
  $130 = _bitshift64Lshr($109 | 0, $110 | 0, 1) | 0; //@line 14378
  $132 = $130 | $128; //@line 14380
  $133 = tempRet0 | $129; //@line 14381
  $134 = _bitshift64Lshr($111 | 0, $114 | 0, 1) | 0; //@line 14382
  $135 = tempRet0; //@line 14383
  $137 = $126 & -520093696 ^ $135; //@line 14385
  $139 = $6 + 88 | 0; //@line 14387
  HEAP32[$139 >> 2] = $132; //@line 14389
  HEAP32[$139 + 4 >> 2] = $133; //@line 14392
  $144 = $6 + 216 | 0; //@line 14394
  HEAP32[$144 >> 2] = $134; //@line 14396
  HEAP32[$144 + 4 >> 2] = $137; //@line 14399
  $149 = _i64Subtract(0, 0, $130 & 1 | 0, 0) | 0; //@line 14401
  $151 = _bitshift64Shl($134 | 0, $135 | 0, 63) | 0; //@line 14403
  $152 = tempRet0; //@line 14404
  $153 = _bitshift64Lshr($132 | 0, $133 | 0, 1) | 0; //@line 14405
  $155 = $151 | $153; //@line 14407
  $156 = $152 | tempRet0; //@line 14408
  $157 = _bitshift64Lshr($134 | 0, $137 | 0, 1) | 0; //@line 14409
  $160 = $149 & -520093696 ^ tempRet0; //@line 14412
  $162 = $6 + 80 | 0; //@line 14414
  HEAP32[$162 >> 2] = $155; //@line 14416
  HEAP32[$162 + 4 >> 2] = $156; //@line 14419
  $167 = $6 + 208 | 0; //@line 14421
  HEAP32[$167 >> 2] = $157; //@line 14423
  HEAP32[$167 + 4 >> 2] = $160; //@line 14426
  $171 = $157 ^ $134; //@line 14427
  $172 = $160 ^ $137; //@line 14428
  $174 = $6 + 224 | 0; //@line 14430
  HEAP32[$174 >> 2] = $171; //@line 14432
  HEAP32[$174 + 4 >> 2] = $172; //@line 14435
  $178 = $155 ^ $132; //@line 14436
  $179 = $156 ^ $133; //@line 14437
  $181 = $6 + 96 | 0; //@line 14439
  HEAP32[$181 >> 2] = $178; //@line 14441
  HEAP32[$181 + 4 >> 2] = $179; //@line 14444
  $185 = $157 ^ $111; //@line 14445
  $186 = $160 ^ $114; //@line 14446
  $188 = $6 + 240 | 0; //@line 14448
  HEAP32[$188 >> 2] = $185; //@line 14450
  HEAP32[$188 + 4 >> 2] = $186; //@line 14453
  $192 = $155 ^ $109; //@line 14454
  $193 = $156 ^ $110; //@line 14455
  $195 = $6 + 112 | 0; //@line 14457
  HEAP32[$195 >> 2] = $192; //@line 14459
  HEAP32[$195 + 4 >> 2] = $193; //@line 14462
  $199 = $134 ^ $111; //@line 14463
  $200 = $137 ^ $114; //@line 14464
  $202 = $6 + 248 | 0; //@line 14466
  HEAP32[$202 >> 2] = $199; //@line 14468
  HEAP32[$202 + 4 >> 2] = $200; //@line 14471
  $206 = $132 ^ $109; //@line 14472
  $207 = $133 ^ $110; //@line 14473
  $209 = $6 + 120 | 0; //@line 14475
  HEAP32[$209 >> 2] = $206; //@line 14477
  HEAP32[$209 + 4 >> 2] = $207; //@line 14480
  $213 = $171 ^ $111; //@line 14481
  $214 = $172 ^ $114; //@line 14482
  $216 = $6 + 256 | 0; //@line 14484
  HEAP32[$216 >> 2] = $213; //@line 14486
  HEAP32[$216 + 4 >> 2] = $214; //@line 14489
  $220 = $178 ^ $109; //@line 14490
  $221 = $179 ^ $110; //@line 14491
  $223 = $6 + 128 | 0; //@line 14493
  HEAP32[$223 >> 2] = $220; //@line 14495
  HEAP32[$223 + 4 >> 2] = $221; //@line 14498
  $230 = $6 + 272 | 0; //@line 14502
  HEAP32[$230 >> 2] = $157 ^ $45; //@line 14504
  HEAP32[$230 + 4 >> 2] = $160 ^ $27; //@line 14507
  $237 = $6 + 144 | 0; //@line 14511
  HEAP32[$237 >> 2] = $155 ^ $81; //@line 14513
  HEAP32[$237 + 4 >> 2] = $156 ^ $63; //@line 14516
  $244 = $6 + 280 | 0; //@line 14520
  HEAP32[$244 >> 2] = $134 ^ $45; //@line 14522
  HEAP32[$244 + 4 >> 2] = $137 ^ $27; //@line 14525
  $251 = $6 + 152 | 0; //@line 14529
  HEAP32[$251 >> 2] = $132 ^ $81; //@line 14531
  HEAP32[$251 + 4 >> 2] = $133 ^ $63; //@line 14534
  $258 = $6 + 288 | 0; //@line 14538
  HEAP32[$258 >> 2] = $171 ^ $45; //@line 14540
  HEAP32[$258 + 4 >> 2] = $172 ^ $27; //@line 14543
  $265 = $6 + 160 | 0; //@line 14547
  HEAP32[$265 >> 2] = $178 ^ $81; //@line 14549
  HEAP32[$265 + 4 >> 2] = $179 ^ $63; //@line 14552
  $272 = $6 + 296 | 0; //@line 14556
  HEAP32[$272 >> 2] = $111 ^ $45; //@line 14558
  HEAP32[$272 + 4 >> 2] = $114 ^ $27; //@line 14561
  $279 = $6 + 168 | 0; //@line 14565
  HEAP32[$279 >> 2] = $109 ^ $81; //@line 14567
  HEAP32[$279 + 4 >> 2] = $110 ^ $63; //@line 14570
  $286 = $6 + 304 | 0; //@line 14574
  HEAP32[$286 >> 2] = $185 ^ $45; //@line 14576
  HEAP32[$286 + 4 >> 2] = $186 ^ $27; //@line 14579
  $293 = $6 + 176 | 0; //@line 14583
  HEAP32[$293 >> 2] = $192 ^ $81; //@line 14585
  HEAP32[$293 + 4 >> 2] = $193 ^ $63; //@line 14588
  $300 = $6 + 312 | 0; //@line 14592
  HEAP32[$300 >> 2] = $199 ^ $45; //@line 14594
  HEAP32[$300 + 4 >> 2] = $200 ^ $27; //@line 14597
  $307 = $6 + 184 | 0; //@line 14601
  HEAP32[$307 >> 2] = $206 ^ $81; //@line 14603
  HEAP32[$307 + 4 >> 2] = $207 ^ $63; //@line 14606
  $314 = $6 + 320 | 0; //@line 14610
  HEAP32[$314 >> 2] = $213 ^ $45; //@line 14612
  HEAP32[$314 + 4 >> 2] = $214 ^ $27; //@line 14615
  $321 = $6 + 192 | 0; //@line 14619
  HEAP32[$321 >> 2] = $220 ^ $81; //@line 14621
  HEAP32[$321 + 4 >> 2] = $221 ^ $63; //@line 14624
  $$0$i = 0; //@line 14625
 } else {
  $$0$i = $AsyncRetVal; //@line 14627
 }
 HEAP32[___async_retval >> 2] = $$0$i; //@line 14630
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_273($0) {
 $0 = $0 | 0;
 var $$pre$i$i21 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 17838
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17844
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17846
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17848
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17850
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17852
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17854
 $$pre$i$i21 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 17855
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i21; //@line 17857
 if ($$pre$i$i21 | 0) {
  $20 = HEAP32[$$pre$i$i21 + 8 >> 2] | 0; //@line 17861
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 17862
  FUNCTION_TABLE_vi[$20 & 1023]($10); //@line 17863
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 472; //@line 17866
   $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 17867
   HEAP32[$21 >> 2] = $6; //@line 17868
   $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 17869
   HEAP32[$22 >> 2] = $8; //@line 17870
   $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 17871
   HEAP32[$23 >> 2] = $10; //@line 17872
   $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 17873
   HEAP32[$24 >> 2] = $12; //@line 17874
   $25 = $ReallocAsyncCtx6 + 20 | 0; //@line 17875
   HEAP32[$25 >> 2] = $14; //@line 17876
   $26 = $ReallocAsyncCtx6 + 24 | 0; //@line 17877
   HEAP32[$26 >> 2] = $16; //@line 17878
   sp = STACKTOP; //@line 17879
   return;
  }
  ___async_unwind = 0; //@line 17882
  HEAP32[$ReallocAsyncCtx6 >> 2] = 472; //@line 17883
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 17884
  HEAP32[$21 >> 2] = $6; //@line 17885
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 17886
  HEAP32[$22 >> 2] = $8; //@line 17887
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 17888
  HEAP32[$23 >> 2] = $10; //@line 17889
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 17890
  HEAP32[$24 >> 2] = $12; //@line 17891
  $25 = $ReallocAsyncCtx6 + 20 | 0; //@line 17892
  HEAP32[$25 >> 2] = $14; //@line 17893
  $26 = $ReallocAsyncCtx6 + 24 | 0; //@line 17894
  HEAP32[$26 >> 2] = $16; //@line 17895
  sp = STACKTOP; //@line 17896
  return;
 }
 $27 = $12 + 12 | 0; //@line 17899
 HEAP32[$12 >> 2] = 473; //@line 17900
 HEAP32[$12 + 4 >> 2] = 0; //@line 17902
 HEAP32[$12 + 8 >> 2] = $6; //@line 17904
 HEAP32[$27 >> 2] = 912; //@line 17905
 $28 = $6 + 1276 | 0; //@line 17906
 if (($28 | 0) == ($12 | 0)) {
  $53 = HEAP32[230] | 0; //@line 17910
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(24) | 0; //@line 17911
  FUNCTION_TABLE_vi[$53 & 1023]($12); //@line 17912
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 476; //@line 17915
   $54 = $ReallocAsyncCtx9 + 4 | 0; //@line 17916
   HEAP32[$54 >> 2] = $6; //@line 17917
   $55 = $ReallocAsyncCtx9 + 8 | 0; //@line 17918
   HEAP32[$55 >> 2] = $8; //@line 17919
   $56 = $ReallocAsyncCtx9 + 12 | 0; //@line 17920
   HEAP32[$56 >> 2] = $12; //@line 17921
   $57 = $ReallocAsyncCtx9 + 16 | 0; //@line 17922
   HEAP32[$57 >> 2] = $14; //@line 17923
   $58 = $ReallocAsyncCtx9 + 20 | 0; //@line 17924
   HEAP32[$58 >> 2] = $16; //@line 17925
   sp = STACKTOP; //@line 17926
   return;
  }
  ___async_unwind = 0; //@line 17929
  HEAP32[$ReallocAsyncCtx9 >> 2] = 476; //@line 17930
  $54 = $ReallocAsyncCtx9 + 4 | 0; //@line 17931
  HEAP32[$54 >> 2] = $6; //@line 17932
  $55 = $ReallocAsyncCtx9 + 8 | 0; //@line 17933
  HEAP32[$55 >> 2] = $8; //@line 17934
  $56 = $ReallocAsyncCtx9 + 12 | 0; //@line 17935
  HEAP32[$56 >> 2] = $12; //@line 17936
  $57 = $ReallocAsyncCtx9 + 16 | 0; //@line 17937
  HEAP32[$57 >> 2] = $14; //@line 17938
  $58 = $ReallocAsyncCtx9 + 20 | 0; //@line 17939
  HEAP32[$58 >> 2] = $16; //@line 17940
  sp = STACKTOP; //@line 17941
  return;
 }
 $30 = $6 + 1288 | 0; //@line 17944
 $31 = HEAP32[$30 >> 2] | 0; //@line 17945
 if (!$31) {
  $44 = HEAP32[229] | 0; //@line 17949
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 17950
  FUNCTION_TABLE_vii[$44 & 31]($28, $12); //@line 17951
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 475; //@line 17954
   $45 = $ReallocAsyncCtx8 + 4 | 0; //@line 17955
   HEAP32[$45 >> 2] = $6; //@line 17956
   $46 = $ReallocAsyncCtx8 + 8 | 0; //@line 17957
   HEAP32[$46 >> 2] = $8; //@line 17958
   $47 = $ReallocAsyncCtx8 + 12 | 0; //@line 17959
   HEAP32[$47 >> 2] = $12; //@line 17960
   $48 = $ReallocAsyncCtx8 + 16 | 0; //@line 17961
   HEAP32[$48 >> 2] = $14; //@line 17962
   $49 = $ReallocAsyncCtx8 + 20 | 0; //@line 17963
   HEAP32[$49 >> 2] = $27; //@line 17964
   $50 = $ReallocAsyncCtx8 + 24 | 0; //@line 17965
   HEAP32[$50 >> 2] = $30; //@line 17966
   $51 = $ReallocAsyncCtx8 + 28 | 0; //@line 17967
   HEAP32[$51 >> 2] = $16; //@line 17968
   sp = STACKTOP; //@line 17969
   return;
  }
  ___async_unwind = 0; //@line 17972
  HEAP32[$ReallocAsyncCtx8 >> 2] = 475; //@line 17973
  $45 = $ReallocAsyncCtx8 + 4 | 0; //@line 17974
  HEAP32[$45 >> 2] = $6; //@line 17975
  $46 = $ReallocAsyncCtx8 + 8 | 0; //@line 17976
  HEAP32[$46 >> 2] = $8; //@line 17977
  $47 = $ReallocAsyncCtx8 + 12 | 0; //@line 17978
  HEAP32[$47 >> 2] = $12; //@line 17979
  $48 = $ReallocAsyncCtx8 + 16 | 0; //@line 17980
  HEAP32[$48 >> 2] = $14; //@line 17981
  $49 = $ReallocAsyncCtx8 + 20 | 0; //@line 17982
  HEAP32[$49 >> 2] = $27; //@line 17983
  $50 = $ReallocAsyncCtx8 + 24 | 0; //@line 17984
  HEAP32[$50 >> 2] = $30; //@line 17985
  $51 = $ReallocAsyncCtx8 + 28 | 0; //@line 17986
  HEAP32[$51 >> 2] = $16; //@line 17987
  sp = STACKTOP; //@line 17988
  return;
 } else {
  $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 17992
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 17993
  FUNCTION_TABLE_vi[$34 & 1023]($28); //@line 17994
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 474; //@line 17997
   $35 = $ReallocAsyncCtx7 + 4 | 0; //@line 17998
   HEAP32[$35 >> 2] = $6; //@line 17999
   $36 = $ReallocAsyncCtx7 + 8 | 0; //@line 18000
   HEAP32[$36 >> 2] = $27; //@line 18001
   $37 = $ReallocAsyncCtx7 + 12 | 0; //@line 18002
   HEAP32[$37 >> 2] = $8; //@line 18003
   $38 = $ReallocAsyncCtx7 + 16 | 0; //@line 18004
   HEAP32[$38 >> 2] = $30; //@line 18005
   $39 = $ReallocAsyncCtx7 + 20 | 0; //@line 18006
   HEAP32[$39 >> 2] = $12; //@line 18007
   $40 = $ReallocAsyncCtx7 + 24 | 0; //@line 18008
   HEAP32[$40 >> 2] = $14; //@line 18009
   $41 = $ReallocAsyncCtx7 + 28 | 0; //@line 18010
   HEAP32[$41 >> 2] = $28; //@line 18011
   $42 = $ReallocAsyncCtx7 + 32 | 0; //@line 18012
   HEAP32[$42 >> 2] = $16; //@line 18013
   sp = STACKTOP; //@line 18014
   return;
  }
  ___async_unwind = 0; //@line 18017
  HEAP32[$ReallocAsyncCtx7 >> 2] = 474; //@line 18018
  $35 = $ReallocAsyncCtx7 + 4 | 0; //@line 18019
  HEAP32[$35 >> 2] = $6; //@line 18020
  $36 = $ReallocAsyncCtx7 + 8 | 0; //@line 18021
  HEAP32[$36 >> 2] = $27; //@line 18022
  $37 = $ReallocAsyncCtx7 + 12 | 0; //@line 18023
  HEAP32[$37 >> 2] = $8; //@line 18024
  $38 = $ReallocAsyncCtx7 + 16 | 0; //@line 18025
  HEAP32[$38 >> 2] = $30; //@line 18026
  $39 = $ReallocAsyncCtx7 + 20 | 0; //@line 18027
  HEAP32[$39 >> 2] = $12; //@line 18028
  $40 = $ReallocAsyncCtx7 + 24 | 0; //@line 18029
  HEAP32[$40 >> 2] = $14; //@line 18030
  $41 = $ReallocAsyncCtx7 + 28 | 0; //@line 18031
  HEAP32[$41 >> 2] = $28; //@line 18032
  $42 = $ReallocAsyncCtx7 + 32 | 0; //@line 18033
  HEAP32[$42 >> 2] = $16; //@line 18034
  sp = STACKTOP; //@line 18035
  return;
 }
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $13 = 0, $15 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $27 = 0, $3 = 0, $30 = 0, $36 = 0, $37 = 0, $44 = 0, $53 = 0, $54 = 0, $58 = 0, $60 = 0, $68 = 0, $69 = 0, $75 = 0, $78 = 0, $8 = 0, $9 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP; //@line 5240
 STACKTOP = STACKTOP + 64 | 0; //@line 5241
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 5241
 $vararg_buffer3 = sp + 16 | 0; //@line 5242
 $vararg_buffer1 = sp + 8 | 0; //@line 5243
 $2 = sp + 40 | 0; //@line 5245
 $3 = sp + 24 | 0; //@line 5246
 if (!$1) {
  _mbed_tracef(2, 12332, 12819, sp); //@line 5249
  STACKTOP = sp; //@line 5250
  return;
 }
 if (HEAP32[$1 + 4 >> 2] | 0) {
  $8 = $0 + 1892 | 0; //@line 5256
  $9 = HEAP32[$8 >> 2] | 0; //@line 5257
  if (!$9) {
   STACKTOP = sp; //@line 5260
   return;
  }
  $13 = HEAP32[$0 + 2288 >> 2] | 0; //@line 5264
  $15 = HEAP32[$9 + 4 >> 2] | 0; //@line 5266
  $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 5267
  FUNCTION_TABLE_vii[$15 & 31]($2, $0 + 1880 | 0); //@line 5268
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 159; //@line 5271
   HEAP32[$AsyncCtx + 4 >> 2] = $8; //@line 5273
   HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 5275
   HEAP32[$AsyncCtx + 12 >> 2] = $13; //@line 5277
   HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 5279
   sp = STACKTOP; //@line 5280
   STACKTOP = sp; //@line 5281
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5283
  $20 = $2 + 12 | 0; //@line 5285
  HEAP32[$20 >> 2] = HEAP32[$8 >> 2]; //@line 5286
  $AsyncCtx23 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5287
  $21 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($13, $2, 9) | 0; //@line 5288
  if (___async) {
   HEAP32[$AsyncCtx23 >> 2] = 160; //@line 5291
   HEAP32[$AsyncCtx23 + 4 >> 2] = $20; //@line 5293
   HEAP32[$AsyncCtx23 + 8 >> 2] = $2; //@line 5295
   sp = STACKTOP; //@line 5296
   STACKTOP = sp; //@line 5297
   return;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 5299
  $24 = HEAP32[$20 >> 2] | 0; //@line 5300
  do {
   if ($24 | 0) {
    $27 = HEAP32[$24 + 8 >> 2] | 0; //@line 5305
    $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5306
    FUNCTION_TABLE_vi[$27 & 1023]($2); //@line 5307
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 161; //@line 5310
     HEAP32[$AsyncCtx6 + 4 >> 2] = $21; //@line 5312
     sp = STACKTOP; //@line 5313
     STACKTOP = sp; //@line 5314
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 5316
     break;
    }
   }
  } while (0);
  if ($21 | 0) {
   STACKTOP = sp; //@line 5323
   return;
  }
  $AsyncCtx31 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5325
  _mbed_assert_internal(13588, 12372, 836); //@line 5326
  if (___async) {
   HEAP32[$AsyncCtx31 >> 2] = 162; //@line 5329
   sp = STACKTOP; //@line 5330
   STACKTOP = sp; //@line 5331
   return;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 5333
  STACKTOP = sp; //@line 5334
  return;
 }
 $30 = $0 + 1960 | 0; //@line 5336
 HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1; //@line 5339
 if (!(HEAP8[$1 + 18 >> 0] | 0)) {
  STACKTOP = sp; //@line 5344
  return;
 }
 $36 = $1 + 9 | 0; //@line 5346
 $37 = HEAP8[$36 >> 0] | 0; //@line 5347
 if ($37 << 24 >> 24 == -32) {
  _mbed_tracef(16, 12332, 12857, $vararg_buffer1); //@line 5350
  STACKTOP = sp; //@line 5351
  return;
 }
 if (($37 + -1 & 255) >= 223) {
  if ((HEAP32[$1 >> 2] | 0) != 3) {
   STACKTOP = sp; //@line 5359
   return;
  }
 }
 HEAP32[$0 + 2240 >> 2] = 2; //@line 5363
 $44 = HEAP16[$1 + 16 >> 1] | 0; //@line 5365
 HEAP16[$0 + 2260 >> 1] = $44; //@line 5367
 HEAP8[$0 + 2253 >> 0] = HEAP8[$36 >> 0] | 0; //@line 5370
 HEAP32[$0 + 2256 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 5374
 HEAP32[$vararg_buffer3 >> 2] = $44 & 65535; //@line 5376
 _mbed_tracef(16, 12332, 12883, $vararg_buffer3); //@line 5377
 HEAP8[$0 + 2236 >> 0] = 1; //@line 5379
 $53 = $0 + 1892 | 0; //@line 5380
 $54 = HEAP32[$53 >> 2] | 0; //@line 5381
 do {
  if ($54 | 0) {
   $58 = HEAP32[$0 + 2288 >> 2] | 0; //@line 5387
   $60 = HEAP32[$54 + 4 >> 2] | 0; //@line 5389
   $AsyncCtx9 = _emscripten_alloc_async_context(32, sp) | 0; //@line 5390
   FUNCTION_TABLE_vii[$60 & 31]($3, $0 + 1880 | 0); //@line 5391
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 163; //@line 5394
    HEAP32[$AsyncCtx9 + 4 >> 2] = $53; //@line 5396
    HEAP32[$AsyncCtx9 + 8 >> 2] = $3; //@line 5398
    HEAP32[$AsyncCtx9 + 12 >> 2] = $58; //@line 5400
    HEAP32[$AsyncCtx9 + 16 >> 2] = $3; //@line 5402
    HEAP32[$AsyncCtx9 + 20 >> 2] = $1; //@line 5404
    HEAP32[$AsyncCtx9 + 24 >> 2] = $36; //@line 5406
    HEAP32[$AsyncCtx9 + 28 >> 2] = $0; //@line 5408
    sp = STACKTOP; //@line 5409
    STACKTOP = sp; //@line 5410
    return;
   }
   _emscripten_free_async_context($AsyncCtx9 | 0); //@line 5412
   $68 = $3 + 12 | 0; //@line 5414
   HEAP32[$68 >> 2] = HEAP32[$53 >> 2]; //@line 5415
   $AsyncCtx20 = _emscripten_alloc_async_context(24, sp) | 0; //@line 5416
   $69 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($58, $3, 7) | 0; //@line 5417
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 164; //@line 5420
    HEAP32[$AsyncCtx20 + 4 >> 2] = $68; //@line 5422
    HEAP32[$AsyncCtx20 + 8 >> 2] = $3; //@line 5424
    HEAP32[$AsyncCtx20 + 12 >> 2] = $1; //@line 5426
    HEAP32[$AsyncCtx20 + 16 >> 2] = $36; //@line 5428
    HEAP32[$AsyncCtx20 + 20 >> 2] = $0; //@line 5430
    sp = STACKTOP; //@line 5431
    STACKTOP = sp; //@line 5432
    return;
   }
   _emscripten_free_async_context($AsyncCtx20 | 0); //@line 5434
   $75 = HEAP32[$68 >> 2] | 0; //@line 5435
   do {
    if ($75 | 0) {
     $78 = HEAP32[$75 + 8 >> 2] | 0; //@line 5440
     $AsyncCtx13 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5441
     FUNCTION_TABLE_vi[$78 & 1023]($3); //@line 5442
     if (___async) {
      HEAP32[$AsyncCtx13 >> 2] = 165; //@line 5445
      HEAP32[$AsyncCtx13 + 4 >> 2] = $69; //@line 5447
      HEAP32[$AsyncCtx13 + 8 >> 2] = $1; //@line 5449
      HEAP32[$AsyncCtx13 + 12 >> 2] = $36; //@line 5451
      HEAP32[$AsyncCtx13 + 16 >> 2] = $0; //@line 5453
      sp = STACKTOP; //@line 5454
      STACKTOP = sp; //@line 5455
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx13 | 0); //@line 5457
      break;
     }
    }
   } while (0);
   if (!$69) {
    $AsyncCtx27 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5464
    _mbed_assert_internal(13588, 12372, 902); //@line 5465
    if (___async) {
     HEAP32[$AsyncCtx27 >> 2] = 166; //@line 5468
     HEAP32[$AsyncCtx27 + 4 >> 2] = $1; //@line 5470
     HEAP32[$AsyncCtx27 + 8 >> 2] = $36; //@line 5472
     HEAP32[$AsyncCtx27 + 12 >> 2] = $0; //@line 5474
     sp = STACKTOP; //@line 5475
     STACKTOP = sp; //@line 5476
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx27 | 0); //@line 5478
     break;
    }
   }
  }
 } while (0);
 if (!(HEAP8[$1 + 11 >> 0] | 0)) {
  STACKTOP = sp; //@line 5488
  return;
 }
 $90 = HEAP8[$36 >> 0] | 0; //@line 5490
 $AsyncCtx17 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5491
 __ZN12LoRaWANStack9handle_txEhPKhth($0, $90, 0, 0, 2) | 0; //@line 5492
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 167; //@line 5495
  sp = STACKTOP; //@line 5496
  STACKTOP = sp; //@line 5497
  return;
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 5499
 STACKTOP = sp; //@line 5500
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $103 = 0, $106 = 0, $107 = 0, $109 = 0, $116 = 0, $119 = 0, $12 = 0, $121 = 0, $122 = 0, $127 = 0, $130 = 0, $19 = 0, $20 = 0, $23 = 0, $29 = 0, $35 = 0, $41 = 0, $42 = 0, $43 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $67 = 0, $7 = 0, $85 = 0, $88 = 0, $90 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx6 = 0, $switch$selectcmp$i = 0, $switch$selectcmp4$i = 0, sp = 0;
 sp = STACKTOP; //@line 21961
 $6 = $1 + 1 | 0; //@line 21964
 $7 = HEAP8[$6 >> 0] | 0; //@line 21965
 $10 = HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + ($7 << 24 >> 24) >> 0] | 0; //@line 21968
 $12 = HEAP32[$0 + 112 >> 2] | 0; //@line 21970
 $19 = $1 + 2 | 0; //@line 21977
 $20 = HEAP8[$19 >> 0] | 0; //@line 21978
 $23 = HEAP8[(HEAP32[$0 + 72 >> 2] | 0) + ((HEAPU8[$12 + ((HEAPU8[$1 >> 0] | 0) * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 2 >> 0] | 0; //@line 21981
 if ($20 << 24 >> 24 > $23 << 24 >> 24) {
  HEAP8[$19 >> 0] = $23; //@line 21984
  $35 = $23; //@line 21985
 } else {
  $35 = $20; //@line 21987
 }
 $29 = HEAP32[(HEAP32[$0 + 80 >> 2] | 0) + (($7 & 255) << 2) >> 2] | 0; //@line 21993
 $switch$selectcmp$i = ($29 | 0) == 25e4; //@line 21994
 $switch$selectcmp4$i = ($29 | 0) == 5e5; //@line 21995
 $41 = ~~+Math_floor(+(+HEAPF32[$1 + 4 >> 2] - +($35 << 24 >> 24 << 1 >>> 0) - +HEAPF32[$1 + 8 >> 2])); //@line 22006
 $42 = $0 + 4 | 0; //@line 22007
 $43 = HEAP32[$42 >> 2] | 0; //@line 22008
 $46 = HEAP32[(HEAP32[$43 >> 2] | 0) + 72 >> 2] | 0; //@line 22011
 $AsyncCtx = _emscripten_alloc_async_context(44, sp) | 0; //@line 22012
 FUNCTION_TABLE_vi[$46 & 1023]($43); //@line 22013
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 526; //@line 22016
  HEAP32[$AsyncCtx + 4 >> 2] = $42; //@line 22018
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 22020
  HEAP32[$AsyncCtx + 12 >> 2] = $12; //@line 22022
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 22024
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 22026
  HEAP8[$AsyncCtx + 24 >> 0] = $switch$selectcmp$i & 1; //@line 22029
  HEAP8[$AsyncCtx + 25 >> 0] = $switch$selectcmp4$i & 1; //@line 22032
  HEAP8[$AsyncCtx + 26 >> 0] = $10; //@line 22034
  HEAP8[$AsyncCtx + 27 >> 0] = $41; //@line 22036
  HEAP32[$AsyncCtx + 28 >> 2] = $1; //@line 22038
  HEAP32[$AsyncCtx + 32 >> 2] = $3; //@line 22040
  HEAP32[$AsyncCtx + 36 >> 2] = $19; //@line 22042
  HEAP32[$AsyncCtx + 40 >> 2] = $2; //@line 22044
  sp = STACKTOP; //@line 22045
  return 0; //@line 22046
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 22048
 $60 = HEAP32[$42 >> 2] | 0; //@line 22049
 $63 = HEAP32[(HEAP32[$60 >> 2] | 0) + 32 >> 2] | 0; //@line 22052
 $67 = HEAP32[$12 + ((HEAPU8[$1 >> 0] | 0) * 12 | 0) >> 2] | 0; //@line 22056
 $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 22057
 FUNCTION_TABLE_vii[$63 & 31]($60, $67); //@line 22058
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 527; //@line 22061
  HEAP32[$AsyncCtx2 + 4 >> 2] = $6; //@line 22063
  HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 22065
  HEAP32[$AsyncCtx2 + 12 >> 2] = $42; //@line 22067
  HEAP8[$AsyncCtx2 + 16 >> 0] = $switch$selectcmp$i & 1; //@line 22070
  HEAP8[$AsyncCtx2 + 17 >> 0] = $switch$selectcmp4$i & 1; //@line 22073
  HEAP8[$AsyncCtx2 + 18 >> 0] = $10; //@line 22075
  HEAP8[$AsyncCtx2 + 19 >> 0] = $41; //@line 22077
  HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 22079
  HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 22081
  HEAP32[$AsyncCtx2 + 28 >> 2] = $19; //@line 22083
  HEAP32[$AsyncCtx2 + 32 >> 2] = $2; //@line 22085
  sp = STACKTOP; //@line 22086
  return 0; //@line 22087
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 22089
 $85 = HEAP32[$42 >> 2] | 0; //@line 22096
 $88 = HEAP32[(HEAP32[$85 >> 2] | 0) + 20 >> 2] | 0; //@line 22099
 $90 = $switch$selectcmp4$i ? 2 : $switch$selectcmp$i & 1; //@line 22101
 $91 = $10 << 24 >> 24; //@line 22102
 do {
  if ((HEAP8[$6 >> 0] | 0) == (HEAPU8[$0 + 27 >> 0] | 0)) {
   $AsyncCtx6 = _emscripten_alloc_async_context(24, sp) | 0; //@line 22106
   FUNCTION_TABLE_viiiiiiiiiiiiii[$88 & 1]($85, 0, $41, 25e3, $90, $91 * 1e3 | 0, 0, 5, 0, 1, 0, 0, 0, 3e3); //@line 22107
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 528; //@line 22110
    HEAP32[$AsyncCtx6 + 4 >> 2] = $42; //@line 22112
    HEAP32[$AsyncCtx6 + 8 >> 2] = $1; //@line 22114
    HEAP32[$AsyncCtx6 + 12 >> 2] = $3; //@line 22116
    HEAP32[$AsyncCtx6 + 16 >> 2] = $19; //@line 22118
    HEAP32[$AsyncCtx6 + 20 >> 2] = $2; //@line 22120
    sp = STACKTOP; //@line 22121
    return 0; //@line 22122
   } else {
    _emscripten_free_async_context($AsyncCtx6 | 0); //@line 22124
    $$0 = 0; //@line 22125
    break;
   }
  } else {
   $AsyncCtx10 = _emscripten_alloc_async_context(24, sp) | 0; //@line 22129
   FUNCTION_TABLE_viiiiiiiiiiiiii[$88 & 1]($85, 1, $41, 0, $90, $91, 1, 8, 0, 1, 0, 0, 0, 3e3); //@line 22130
   if (___async) {
    HEAP32[$AsyncCtx10 >> 2] = 529; //@line 22133
    HEAP32[$AsyncCtx10 + 4 >> 2] = $42; //@line 22135
    HEAP32[$AsyncCtx10 + 8 >> 2] = $1; //@line 22137
    HEAP32[$AsyncCtx10 + 12 >> 2] = $3; //@line 22139
    HEAP32[$AsyncCtx10 + 16 >> 2] = $19; //@line 22141
    HEAP32[$AsyncCtx10 + 20 >> 2] = $2; //@line 22143
    sp = STACKTOP; //@line 22144
    return 0; //@line 22145
   } else {
    _emscripten_free_async_context($AsyncCtx10 | 0); //@line 22147
    $$0 = 1; //@line 22148
    break;
   }
  }
 } while (0);
 $103 = HEAP32[$42 >> 2] | 0; //@line 22153
 $106 = HEAP32[(HEAP32[$103 >> 2] | 0) + 44 >> 2] | 0; //@line 22156
 $107 = $1 + 12 | 0; //@line 22157
 $109 = HEAP16[$107 >> 1] & 255; //@line 22159
 $AsyncCtx14 = _emscripten_alloc_async_context(28, sp) | 0; //@line 22160
 FUNCTION_TABLE_viii[$106 & 7]($103, $$0, $109); //@line 22161
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 530; //@line 22164
  HEAP32[$AsyncCtx14 + 4 >> 2] = $42; //@line 22166
  HEAP32[$AsyncCtx14 + 8 >> 2] = $107; //@line 22168
  HEAP32[$AsyncCtx14 + 12 >> 2] = $$0; //@line 22170
  HEAP32[$AsyncCtx14 + 16 >> 2] = $3; //@line 22172
  HEAP32[$AsyncCtx14 + 20 >> 2] = $19; //@line 22174
  HEAP32[$AsyncCtx14 + 24 >> 2] = $2; //@line 22176
  sp = STACKTOP; //@line 22177
  return 0; //@line 22178
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 22180
 $116 = HEAP32[$42 >> 2] | 0; //@line 22181
 $119 = HEAP32[(HEAP32[$116 >> 2] | 0) + 52 >> 2] | 0; //@line 22184
 $121 = HEAP16[$107 >> 1] & 255; //@line 22186
 $AsyncCtx17 = _emscripten_alloc_async_context(20, sp) | 0; //@line 22187
 $122 = FUNCTION_TABLE_iiii[$119 & 15]($116, $$0, $121) | 0; //@line 22188
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 531; //@line 22191
  HEAP32[$AsyncCtx17 + 4 >> 2] = $3; //@line 22193
  HEAP32[$AsyncCtx17 + 8 >> 2] = $42; //@line 22195
  HEAP32[$AsyncCtx17 + 12 >> 2] = $19; //@line 22197
  HEAP32[$AsyncCtx17 + 16 >> 2] = $2; //@line 22199
  sp = STACKTOP; //@line 22200
  return 0; //@line 22201
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 22203
 HEAP32[$3 >> 2] = $122; //@line 22204
 $127 = HEAP32[$42 >> 2] | 0; //@line 22205
 $130 = HEAP32[(HEAP32[$127 >> 2] | 0) + 76 >> 2] | 0; //@line 22208
 $AsyncCtx20 = _emscripten_alloc_async_context(12, sp) | 0; //@line 22209
 FUNCTION_TABLE_vi[$130 & 1023]($127); //@line 22210
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 532; //@line 22213
  HEAP32[$AsyncCtx20 + 4 >> 2] = $19; //@line 22215
  HEAP32[$AsyncCtx20 + 8 >> 2] = $2; //@line 22217
  sp = STACKTOP; //@line 22218
  return 0; //@line 22219
 } else {
  _emscripten_free_async_context($AsyncCtx20 | 0); //@line 22221
  HEAP8[$2 >> 0] = HEAP8[$19 >> 0] | 0; //@line 22223
  return 1; //@line 22224
 }
 return 0; //@line 22226
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_320($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $12 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 22378
 STACKTOP = STACKTOP + 16 | 0; //@line 22379
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 22379
 $$byval_copy = sp; //@line 22380
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22382
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22384
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22386
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22388
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22392
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _mbed_tracef(16, 13704, 13865, $12); //@line 22398
  HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0) >> 2] = 4; //@line 22401
  $20 = HEAP8[$2 >> 0] | 16; //@line 22403
  HEAP8[$2 >> 0] = $20; //@line 22404
  $22 = $20; //@line 22405
 } else {
  $22 = HEAP8[$2 >> 0] | 0; //@line 22408
 }
 $21 = $22 & -33; //@line 22410
 HEAP8[$2 >> 0] = $21; //@line 22411
 do {
  if (!($21 & 2)) {
   $56 = $21; //@line 22416
  } else {
   $25 = $21 & -3; //@line 22418
   HEAP8[$2 >> 0] = $25; //@line 22419
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _mbed_tracef(16, 13704, 13723, $8); //@line 22424
    $30 = HEAP32[$4 + 1328 >> 2] | 0; //@line 22426
    HEAP32[$6 >> 2] = 279; //@line 22427
    HEAP32[$6 + 4 >> 2] = 0; //@line 22429
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 22430
    HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 22431
    HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 22431
    $31 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($30, $4, $$byval_copy) | 0; //@line 22432
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 389; //@line 22435
     $32 = $ReallocAsyncCtx8 + 4 | 0; //@line 22436
     HEAP32[$32 >> 2] = $2; //@line 22437
     $33 = $ReallocAsyncCtx8 + 8 | 0; //@line 22438
     HEAP32[$33 >> 2] = $4; //@line 22439
     $34 = $ReallocAsyncCtx8 + 12 | 0; //@line 22440
     HEAP32[$34 >> 2] = $6; //@line 22441
     sp = STACKTOP; //@line 22442
     STACKTOP = sp; //@line 22443
     return;
    }
    HEAP32[___async_retval >> 2] = $31; //@line 22446
    ___async_unwind = 0; //@line 22447
    HEAP32[$ReallocAsyncCtx8 >> 2] = 389; //@line 22448
    $32 = $ReallocAsyncCtx8 + 4 | 0; //@line 22449
    HEAP32[$32 >> 2] = $2; //@line 22450
    $33 = $ReallocAsyncCtx8 + 8 | 0; //@line 22451
    HEAP32[$33 >> 2] = $4; //@line 22452
    $34 = $ReallocAsyncCtx8 + 12 | 0; //@line 22453
    HEAP32[$34 >> 2] = $6; //@line 22454
    sp = STACKTOP; //@line 22455
    STACKTOP = sp; //@line 22456
    return;
   }
   if ($25 & 4) {
    $54 = $25 & -5; //@line 22461
    HEAP8[$2 >> 0] = $54; //@line 22462
    $56 = $54; //@line 22463
    break;
   }
   $39 = HEAP32[$4 + 1324 >> 2] | 0; //@line 22467
   $40 = $39 + 16 | 0; //@line 22468
   $42 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 22470
   $43 = $39 + 28 | 0; //@line 22471
   $44 = HEAP32[$43 >> 2] | 0; //@line 22472
   if (!$44) {
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 22475
    _mbed_assert_internal(15615, 15620, 1102); //@line 22476
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 391; //@line 22479
     $46 = $ReallocAsyncCtx13 + 4 | 0; //@line 22480
     HEAP32[$46 >> 2] = $43; //@line 22481
     $47 = $ReallocAsyncCtx13 + 8 | 0; //@line 22482
     HEAP32[$47 >> 2] = $40; //@line 22483
     $48 = $ReallocAsyncCtx13 + 12 | 0; //@line 22484
     HEAP32[$48 >> 2] = $42; //@line 22485
     $49 = $ReallocAsyncCtx13 + 16 | 0; //@line 22486
     HEAP32[$49 >> 2] = $2; //@line 22487
     $50 = $ReallocAsyncCtx13 + 20 | 0; //@line 22488
     HEAP32[$50 >> 2] = $4; //@line 22489
     sp = STACKTOP; //@line 22490
     STACKTOP = sp; //@line 22491
     return;
    }
    ___async_unwind = 0; //@line 22493
    HEAP32[$ReallocAsyncCtx13 >> 2] = 391; //@line 22494
    $46 = $ReallocAsyncCtx13 + 4 | 0; //@line 22495
    HEAP32[$46 >> 2] = $43; //@line 22496
    $47 = $ReallocAsyncCtx13 + 8 | 0; //@line 22497
    HEAP32[$47 >> 2] = $40; //@line 22498
    $48 = $ReallocAsyncCtx13 + 12 | 0; //@line 22499
    HEAP32[$48 >> 2] = $42; //@line 22500
    $49 = $ReallocAsyncCtx13 + 16 | 0; //@line 22501
    HEAP32[$49 >> 2] = $2; //@line 22502
    $50 = $ReallocAsyncCtx13 + 20 | 0; //@line 22503
    HEAP32[$50 >> 2] = $4; //@line 22504
    sp = STACKTOP; //@line 22505
    STACKTOP = sp; //@line 22506
    return;
   } else {
    $51 = HEAP32[$44 >> 2] | 0; //@line 22508
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 22509
    FUNCTION_TABLE_vii[$51 & 31]($40, $42); //@line 22510
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 392; //@line 22513
     $52 = $ReallocAsyncCtx4 + 4 | 0; //@line 22514
     HEAP32[$52 >> 2] = $2; //@line 22515
     $53 = $ReallocAsyncCtx4 + 8 | 0; //@line 22516
     HEAP32[$53 >> 2] = $4; //@line 22517
     sp = STACKTOP; //@line 22518
     STACKTOP = sp; //@line 22519
     return;
    }
    ___async_unwind = 0; //@line 22521
    HEAP32[$ReallocAsyncCtx4 >> 2] = 392; //@line 22522
    $52 = $ReallocAsyncCtx4 + 4 | 0; //@line 22523
    HEAP32[$52 >> 2] = $2; //@line 22524
    $53 = $ReallocAsyncCtx4 + 8 | 0; //@line 22525
    HEAP32[$53 >> 2] = $4; //@line 22526
    sp = STACKTOP; //@line 22527
    STACKTOP = sp; //@line 22528
    return;
   }
  }
 } while (0);
 if (!($56 & 16)) {
  STACKTOP = sp; //@line 22535
  return;
 }
 HEAP8[$2 >> 0] = $56 & -17; //@line 22538
 $60 = HEAP32[$4 + 1324 >> 2] | 0; //@line 22540
 $61 = $60 + 48 | 0; //@line 22541
 $63 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 22543
 $64 = $60 + 60 | 0; //@line 22544
 $65 = HEAP32[$64 >> 2] | 0; //@line 22545
 if (!$65) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 22548
  _mbed_assert_internal(15615, 15620, 1102); //@line 22549
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 393; //@line 22552
   $67 = $ReallocAsyncCtx12 + 4 | 0; //@line 22553
   HEAP32[$67 >> 2] = $64; //@line 22554
   $68 = $ReallocAsyncCtx12 + 8 | 0; //@line 22555
   HEAP32[$68 >> 2] = $61; //@line 22556
   $69 = $ReallocAsyncCtx12 + 12 | 0; //@line 22557
   HEAP32[$69 >> 2] = $63; //@line 22558
   sp = STACKTOP; //@line 22559
   STACKTOP = sp; //@line 22560
   return;
  }
  ___async_unwind = 0; //@line 22562
  HEAP32[$ReallocAsyncCtx12 >> 2] = 393; //@line 22563
  $67 = $ReallocAsyncCtx12 + 4 | 0; //@line 22564
  HEAP32[$67 >> 2] = $64; //@line 22565
  $68 = $ReallocAsyncCtx12 + 8 | 0; //@line 22566
  HEAP32[$68 >> 2] = $61; //@line 22567
  $69 = $ReallocAsyncCtx12 + 12 | 0; //@line 22568
  HEAP32[$69 >> 2] = $63; //@line 22569
  sp = STACKTOP; //@line 22570
  STACKTOP = sp; //@line 22571
  return;
 } else {
  $70 = HEAP32[$65 >> 2] | 0; //@line 22573
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 22574
  FUNCTION_TABLE_vii[$70 & 31]($61, $63); //@line 22575
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 394; //@line 22578
   sp = STACKTOP; //@line 22579
   STACKTOP = sp; //@line 22580
   return;
  }
  ___async_unwind = 0; //@line 22582
  HEAP32[$ReallocAsyncCtx5 >> 2] = 394; //@line 22583
  sp = STACKTOP; //@line 22584
  STACKTOP = sp; //@line 22585
  return;
 }
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_82($0) {
 $0 = $0 | 0;
 var $$054 = 0, $$055 = 0, $$05564 = 0, $$056 = 0, $$05663 = 0, $$05766 = 0, $$06065 = 0, $$158 = 0, $$15862 = 0, $$259 = 0, $$pre$phiZ2D = 0, $10 = 0, $104 = 0, $109 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $29 = 0, $30 = 0, $4 = 0, $43 = 0, $44 = 0, $45 = 0, $51 = 0, $52 = 0, $56 = 0, $58 = 0, $6 = 0, $64 = 0, $65 = 0, $68 = 0, $70 = 0, $8 = 0, $83 = 0, $95 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 23193
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23195
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23197
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23199
 $8 = HEAP8[$0 + 16 >> 0] & 1; //@line 23202
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23204
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 23206
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23208
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23210
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23212
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23214
 if (HEAP8[___async_retval >> 0] & 1) {
  HEAP8[$2 >> 0] = HEAP8[$2 >> 0] | 64; //@line 23221
 }
 $24 = $6 + 374 | 0; //@line 23223
 if (!(HEAP8[$24 >> 0] | 0)) {
  $$pre$phiZ2D = $2; //@line 23227
 } else {
  HEAP8[$24 >> 0] = 0; //@line 23229
  HEAP8[$2 >> 0] = HEAP8[$2 >> 0] | 32; //@line 23232
  $$pre$phiZ2D = $2; //@line 23233
 }
 $29 = $6 + 952 | 0; //@line 23235
 $30 = HEAP32[$29 >> 2] | 0; //@line 23236
 HEAP8[$6 + 382 >> 0] = $30; //@line 23239
 HEAP8[$6 + 383 >> 0] = $30 >>> 8; //@line 23243
 HEAP8[$6 + 384 >> 0] = $30 >>> 16; //@line 23247
 HEAP8[$6 + 385 >> 0] = $30 >>> 24; //@line 23251
 $43 = $6 + 386 | 0; //@line 23253
 HEAP8[$43 >> 0] = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 23254
 $44 = $6 + 956 | 0; //@line 23255
 $45 = HEAP32[$44 >> 2] | 0; //@line 23256
 HEAP8[$6 + 387 >> 0] = $45; //@line 23259
 HEAP8[$6 + 388 >> 0] = $45 >>> 8; //@line 23263
 $51 = $6 + 4 | 0; //@line 23264
 __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($51); //@line 23265
 $52 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($51) | 0; //@line 23266
 do {
  if ($8) {
   label = 16; //@line 23269
  } else {
   if (!(HEAP8[$4 >> 0] | 0)) {
    label = 16; //@line 23274
   } else {
    if (!(__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($51) | 0)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($51); //@line 23278
     $$05564 = $12; //@line 23279
     $$05663 = $10; //@line 23279
     $$15862 = 8; //@line 23279
     label = 20; //@line 23280
     break;
    }
    $56 = $52 & 255; //@line 23283
    if (($52 & 255) >= 16) {
     HEAP8[$4 >> 0] = $52; //@line 23286
     $$055 = 0; //@line 23288
     $$056 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($51) | 0; //@line 23288
     $$158 = 8; //@line 23288
     label = 19; //@line 23289
     break;
    }
    $58 = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 23292
    $64 = ($58 & 255) + $56 & 15 | $58 & -16; //@line 23298
    HEAP8[$$pre$phiZ2D >> 0] = $64; //@line 23299
    HEAP8[$43 >> 0] = $64; //@line 23300
    $65 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($51) | 0; //@line 23301
    if (!($52 << 24 >> 24)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($51); //@line 23304
     $$05564 = $12; //@line 23305
     $$05663 = $10; //@line 23305
     $$15862 = 8; //@line 23305
     label = 20; //@line 23306
     break;
    } else {
     $$05766 = 8; //@line 23309
     $$06065 = 0; //@line 23309
     $68 = 0; //@line 23309
     while (1) {
      $70 = $$05766 + 1 << 24 >> 24; //@line 23313
      HEAP8[($$05766 & 255) + ($6 + 381) >> 0] = HEAP8[$65 + $68 >> 0] | 0; //@line 23316
      $$06065 = $$06065 + 1 << 16 >> 16; //@line 23317
      $68 = $$06065 & 65535; //@line 23318
      if ($68 >>> 0 >= $56 >>> 0) {
       $$055 = $12; //@line 23323
       $$056 = $10; //@line 23323
       $$158 = $70; //@line 23323
       label = 19; //@line 23324
       break;
      } else {
       $$05766 = $70; //@line 23321
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 16) {
  if (!($52 << 24 >> 24)) {
   $$055 = $12; //@line 23335
   $$056 = $10; //@line 23335
   $$158 = 8; //@line 23335
   label = 19; //@line 23336
  } else {
   if (__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($51) | 0) {
    HEAP8[$4 >> 0] = $52; //@line 23340
    $$055 = 0; //@line 23342
    $$056 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($51) | 0; //@line 23342
    $$158 = 8; //@line 23342
    label = 19; //@line 23343
   } else {
    $$055 = $12; //@line 23345
    $$056 = $10; //@line 23345
    $$158 = 8; //@line 23345
    label = 19; //@line 23346
   }
  }
 }
 if ((label | 0) == 19) {
  __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($51); //@line 23351
  if (!$$056) {
   $$054 = 0; //@line 23354
   $$259 = $$158; //@line 23354
  } else {
   $$05564 = $$055; //@line 23356
   $$05663 = $$056; //@line 23356
   $$15862 = $$158; //@line 23356
   label = 20; //@line 23357
  }
 }
 do {
  if ((label | 0) == 20) {
   if (!(HEAP8[$4 >> 0] | 0)) {
    $$054 = 0; //@line 23365
    $$259 = $$15862; //@line 23365
   } else {
    $83 = $$15862 + 1 << 24 >> 24; //@line 23367
    HEAP8[($$15862 & 255) + ($6 + 381) >> 0] = $$05564; //@line 23370
    if (!($$05564 << 24 >> 24)) {
     __ZN14LoRaMacCommand20clear_command_bufferEv($51); //@line 23373
     $95 = (__Z15encrypt_payloadPKhtS0_jhjPh($$05663, HEAPU8[$4 >> 0] | 0, $6 + 912 | 0, HEAP32[$29 >> 2] | 0, 0, HEAP32[$44 >> 2] | 0, ($83 & 255) + ($6 + 381) | 0) | 0) == 0; //@line 23382
     $$054 = $95 ? 0 : -1014; //@line 23384
     $$259 = $83; //@line 23384
     break;
    } else {
     $104 = (__Z15encrypt_payloadPKhtS0_jhjPh($$05663, HEAPU8[$4 >> 0] | 0, $6 + 928 | 0, HEAP32[$29 >> 2] | 0, 0, HEAP32[$44 >> 2] | 0, ($83 & 255) + ($6 + 381) | 0) | 0) == 0; //@line 23395
     $$054 = $104 ? 0 : -1014; //@line 23397
     $$259 = $83; //@line 23397
     break;
    }
   }
  }
 } while (0);
 $109 = (HEAPU8[$4 >> 0] | 0) + ($$259 & 255) & 65535; //@line 23407
 HEAP16[$16 >> 1] = $109; //@line 23408
 $111 = HEAP32[$29 >> 2] | 0; //@line 23410
 $112 = HEAP32[$44 >> 2] | 0; //@line 23411
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 23412
 $113 = __Z11compute_micPKhtS0_jhjPj($20, $109, $6 + 912 | 0, $111, 0, $112, $14) | 0; //@line 23413
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 412; //@line 23416
  $114 = $ReallocAsyncCtx + 4 | 0; //@line 23417
  HEAP32[$114 >> 2] = $$054; //@line 23418
  $115 = $ReallocAsyncCtx + 8 | 0; //@line 23419
  HEAP32[$115 >> 2] = $14; //@line 23420
  $116 = $ReallocAsyncCtx + 12 | 0; //@line 23421
  HEAP32[$116 >> 2] = $16; //@line 23422
  $117 = $ReallocAsyncCtx + 16 | 0; //@line 23423
  HEAP32[$117 >> 2] = $6; //@line 23424
  $118 = $ReallocAsyncCtx + 20 | 0; //@line 23425
  HEAP32[$118 >> 2] = $18; //@line 23426
  sp = STACKTOP; //@line 23427
  return;
 }
 HEAP32[___async_retval >> 2] = $113; //@line 23431
 ___async_unwind = 0; //@line 23432
 HEAP32[$ReallocAsyncCtx >> 2] = 412; //@line 23433
 $114 = $ReallocAsyncCtx + 4 | 0; //@line 23434
 HEAP32[$114 >> 2] = $$054; //@line 23435
 $115 = $ReallocAsyncCtx + 8 | 0; //@line 23436
 HEAP32[$115 >> 2] = $14; //@line 23437
 $116 = $ReallocAsyncCtx + 12 | 0; //@line 23438
 HEAP32[$116 >> 2] = $16; //@line 23439
 $117 = $ReallocAsyncCtx + 16 | 0; //@line 23440
 HEAP32[$117 >> 2] = $6; //@line 23441
 $118 = $ReallocAsyncCtx + 20 | 0; //@line 23442
 HEAP32[$118 >> 2] = $18; //@line 23443
 sp = STACKTOP; //@line 23444
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_275($0) {
 $0 = $0 | 0;
 var $$pre120 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 18203
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18205
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18207
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18209
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18211
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18213
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18215
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18217
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18219
 $$pre120 = HEAP32[$4 >> 2] | 0; //@line 18220
 if ($$pre120 | 0) {
  $19 = HEAP32[$$pre120 + 4 >> 2] | 0; //@line 18224
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 18225
  FUNCTION_TABLE_vii[$19 & 31]($14, $10); //@line 18226
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 475; //@line 18229
   $20 = $ReallocAsyncCtx8 + 4 | 0; //@line 18230
   HEAP32[$20 >> 2] = $2; //@line 18231
   $21 = $ReallocAsyncCtx8 + 8 | 0; //@line 18232
   HEAP32[$21 >> 2] = $6; //@line 18233
   $22 = $ReallocAsyncCtx8 + 12 | 0; //@line 18234
   HEAP32[$22 >> 2] = $10; //@line 18235
   $23 = $ReallocAsyncCtx8 + 16 | 0; //@line 18236
   HEAP32[$23 >> 2] = $12; //@line 18237
   $24 = $ReallocAsyncCtx8 + 20 | 0; //@line 18238
   HEAP32[$24 >> 2] = $4; //@line 18239
   $25 = $ReallocAsyncCtx8 + 24 | 0; //@line 18240
   HEAP32[$25 >> 2] = $8; //@line 18241
   $26 = $ReallocAsyncCtx8 + 28 | 0; //@line 18242
   HEAP32[$26 >> 2] = $16; //@line 18243
   sp = STACKTOP; //@line 18244
   return;
  }
  ___async_unwind = 0; //@line 18247
  HEAP32[$ReallocAsyncCtx8 >> 2] = 475; //@line 18248
  $20 = $ReallocAsyncCtx8 + 4 | 0; //@line 18249
  HEAP32[$20 >> 2] = $2; //@line 18250
  $21 = $ReallocAsyncCtx8 + 8 | 0; //@line 18251
  HEAP32[$21 >> 2] = $6; //@line 18252
  $22 = $ReallocAsyncCtx8 + 12 | 0; //@line 18253
  HEAP32[$22 >> 2] = $10; //@line 18254
  $23 = $ReallocAsyncCtx8 + 16 | 0; //@line 18255
  HEAP32[$23 >> 2] = $12; //@line 18256
  $24 = $ReallocAsyncCtx8 + 20 | 0; //@line 18257
  HEAP32[$24 >> 2] = $4; //@line 18258
  $25 = $ReallocAsyncCtx8 + 24 | 0; //@line 18259
  HEAP32[$25 >> 2] = $8; //@line 18260
  $26 = $ReallocAsyncCtx8 + 28 | 0; //@line 18261
  HEAP32[$26 >> 2] = $16; //@line 18262
  sp = STACKTOP; //@line 18263
  return;
 }
 HEAP32[$8 >> 2] = 0; //@line 18266
 $27 = $12 + 12 | 0; //@line 18267
 HEAP32[$12 >> 2] = 477; //@line 18268
 HEAP32[$12 + 4 >> 2] = 0; //@line 18270
 HEAP32[$12 + 8 >> 2] = $2; //@line 18272
 HEAP32[$27 >> 2] = 912; //@line 18273
 $28 = $2 + 1228 | 0; //@line 18274
 if (($28 | 0) == ($12 | 0)) {
  $51 = HEAP32[230] | 0; //@line 18278
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 18279
  FUNCTION_TABLE_vi[$51 & 1023]($12); //@line 18280
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 480; //@line 18283
   $52 = $ReallocAsyncCtx12 + 4 | 0; //@line 18284
   HEAP32[$52 >> 2] = $12; //@line 18285
   $53 = $ReallocAsyncCtx12 + 8 | 0; //@line 18286
   HEAP32[$53 >> 2] = $16; //@line 18287
   $54 = $ReallocAsyncCtx12 + 12 | 0; //@line 18288
   HEAP32[$54 >> 2] = $2; //@line 18289
   $55 = $ReallocAsyncCtx12 + 16 | 0; //@line 18290
   HEAP32[$55 >> 2] = $6; //@line 18291
   sp = STACKTOP; //@line 18292
   return;
  }
  ___async_unwind = 0; //@line 18295
  HEAP32[$ReallocAsyncCtx12 >> 2] = 480; //@line 18296
  $52 = $ReallocAsyncCtx12 + 4 | 0; //@line 18297
  HEAP32[$52 >> 2] = $12; //@line 18298
  $53 = $ReallocAsyncCtx12 + 8 | 0; //@line 18299
  HEAP32[$53 >> 2] = $16; //@line 18300
  $54 = $ReallocAsyncCtx12 + 12 | 0; //@line 18301
  HEAP32[$54 >> 2] = $2; //@line 18302
  $55 = $ReallocAsyncCtx12 + 16 | 0; //@line 18303
  HEAP32[$55 >> 2] = $6; //@line 18304
  sp = STACKTOP; //@line 18305
  return;
 }
 $30 = $2 + 1240 | 0; //@line 18308
 $31 = HEAP32[$30 >> 2] | 0; //@line 18309
 if (!$31) {
  $43 = HEAP32[229] | 0; //@line 18313
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(28) | 0; //@line 18314
  FUNCTION_TABLE_vii[$43 & 31]($28, $12); //@line 18315
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 479; //@line 18318
   $44 = $ReallocAsyncCtx11 + 4 | 0; //@line 18319
   HEAP32[$44 >> 2] = $2; //@line 18320
   $45 = $ReallocAsyncCtx11 + 8 | 0; //@line 18321
   HEAP32[$45 >> 2] = $6; //@line 18322
   $46 = $ReallocAsyncCtx11 + 12 | 0; //@line 18323
   HEAP32[$46 >> 2] = $27; //@line 18324
   $47 = $ReallocAsyncCtx11 + 16 | 0; //@line 18325
   HEAP32[$47 >> 2] = $30; //@line 18326
   $48 = $ReallocAsyncCtx11 + 20 | 0; //@line 18327
   HEAP32[$48 >> 2] = $12; //@line 18328
   $49 = $ReallocAsyncCtx11 + 24 | 0; //@line 18329
   HEAP32[$49 >> 2] = $16; //@line 18330
   sp = STACKTOP; //@line 18331
   return;
  }
  ___async_unwind = 0; //@line 18334
  HEAP32[$ReallocAsyncCtx11 >> 2] = 479; //@line 18335
  $44 = $ReallocAsyncCtx11 + 4 | 0; //@line 18336
  HEAP32[$44 >> 2] = $2; //@line 18337
  $45 = $ReallocAsyncCtx11 + 8 | 0; //@line 18338
  HEAP32[$45 >> 2] = $6; //@line 18339
  $46 = $ReallocAsyncCtx11 + 12 | 0; //@line 18340
  HEAP32[$46 >> 2] = $27; //@line 18341
  $47 = $ReallocAsyncCtx11 + 16 | 0; //@line 18342
  HEAP32[$47 >> 2] = $30; //@line 18343
  $48 = $ReallocAsyncCtx11 + 20 | 0; //@line 18344
  HEAP32[$48 >> 2] = $12; //@line 18345
  $49 = $ReallocAsyncCtx11 + 24 | 0; //@line 18346
  HEAP32[$49 >> 2] = $16; //@line 18347
  sp = STACKTOP; //@line 18348
  return;
 } else {
  $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 18352
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 18353
  FUNCTION_TABLE_vi[$34 & 1023]($28); //@line 18354
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 478; //@line 18357
   $35 = $ReallocAsyncCtx10 + 4 | 0; //@line 18358
   HEAP32[$35 >> 2] = $27; //@line 18359
   $36 = $ReallocAsyncCtx10 + 8 | 0; //@line 18360
   HEAP32[$36 >> 2] = $2; //@line 18361
   $37 = $ReallocAsyncCtx10 + 12 | 0; //@line 18362
   HEAP32[$37 >> 2] = $6; //@line 18363
   $38 = $ReallocAsyncCtx10 + 16 | 0; //@line 18364
   HEAP32[$38 >> 2] = $30; //@line 18365
   $39 = $ReallocAsyncCtx10 + 20 | 0; //@line 18366
   HEAP32[$39 >> 2] = $12; //@line 18367
   $40 = $ReallocAsyncCtx10 + 24 | 0; //@line 18368
   HEAP32[$40 >> 2] = $16; //@line 18369
   $41 = $ReallocAsyncCtx10 + 28 | 0; //@line 18370
   HEAP32[$41 >> 2] = $28; //@line 18371
   sp = STACKTOP; //@line 18372
   return;
  }
  ___async_unwind = 0; //@line 18375
  HEAP32[$ReallocAsyncCtx10 >> 2] = 478; //@line 18376
  $35 = $ReallocAsyncCtx10 + 4 | 0; //@line 18377
  HEAP32[$35 >> 2] = $27; //@line 18378
  $36 = $ReallocAsyncCtx10 + 8 | 0; //@line 18379
  HEAP32[$36 >> 2] = $2; //@line 18380
  $37 = $ReallocAsyncCtx10 + 12 | 0; //@line 18381
  HEAP32[$37 >> 2] = $6; //@line 18382
  $38 = $ReallocAsyncCtx10 + 16 | 0; //@line 18383
  HEAP32[$38 >> 2] = $30; //@line 18384
  $39 = $ReallocAsyncCtx10 + 20 | 0; //@line 18385
  HEAP32[$39 >> 2] = $12; //@line 18386
  $40 = $ReallocAsyncCtx10 + 24 | 0; //@line 18387
  HEAP32[$40 >> 2] = $16; //@line 18388
  $41 = $ReallocAsyncCtx10 + 28 | 0; //@line 18389
  HEAP32[$41 >> 2] = $28; //@line 18390
  sp = STACKTOP; //@line 18391
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $45 = 0, $47 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 11828
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11830
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11832
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11834
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11836
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11838
 $$pre = HEAP32[$10 >> 2] | 0; //@line 11839
 if ($$pre | 0) {
  $13 = HEAP32[$$pre + 4 >> 2] | 0; //@line 11843
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 11844
  FUNCTION_TABLE_vii[$13 & 31]($2, $4); //@line 11845
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 247; //@line 11848
   $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 11849
   HEAP32[$14 >> 2] = $4; //@line 11850
   $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 11851
   HEAP32[$15 >> 2] = $6; //@line 11852
   $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 11853
   HEAP32[$16 >> 2] = $8; //@line 11854
   $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 11855
   HEAP32[$17 >> 2] = $10; //@line 11856
   sp = STACKTOP; //@line 11857
   return;
  }
  ___async_unwind = 0; //@line 11860
  HEAP32[$ReallocAsyncCtx2 >> 2] = 247; //@line 11861
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 11862
  HEAP32[$14 >> 2] = $4; //@line 11863
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 11864
  HEAP32[$15 >> 2] = $6; //@line 11865
  $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 11866
  HEAP32[$16 >> 2] = $8; //@line 11867
  $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 11868
  HEAP32[$17 >> 2] = $10; //@line 11869
  sp = STACKTOP; //@line 11870
  return;
 }
 HEAP32[$6 >> 2] = 0; //@line 11873
 $18 = $4 + 16 | 0; //@line 11874
 $19 = $4 + 28 | 0; //@line 11875
 $20 = HEAP32[$19 >> 2] | 0; //@line 11876
 if ($20 | 0) {
  $22 = $8 + 1896 | 0; //@line 11879
  if (($22 | 0) != ($18 | 0)) {
   $24 = $8 + 1908 | 0; //@line 11882
   $25 = HEAP32[$24 >> 2] | 0; //@line 11883
   if (!$25) {
    $36 = HEAP32[$20 + 4 >> 2] | 0; //@line 11887
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 11888
    FUNCTION_TABLE_vii[$36 & 31]($22, $18); //@line 11889
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 249; //@line 11892
     $37 = $ReallocAsyncCtx4 + 4 | 0; //@line 11893
     HEAP32[$37 >> 2] = $19; //@line 11894
     $38 = $ReallocAsyncCtx4 + 8 | 0; //@line 11895
     HEAP32[$38 >> 2] = $24; //@line 11896
     $39 = $ReallocAsyncCtx4 + 12 | 0; //@line 11897
     HEAP32[$39 >> 2] = $4; //@line 11898
     $40 = $ReallocAsyncCtx4 + 16 | 0; //@line 11899
     HEAP32[$40 >> 2] = $8; //@line 11900
     sp = STACKTOP; //@line 11901
     return;
    }
    ___async_unwind = 0; //@line 11904
    HEAP32[$ReallocAsyncCtx4 >> 2] = 249; //@line 11905
    $37 = $ReallocAsyncCtx4 + 4 | 0; //@line 11906
    HEAP32[$37 >> 2] = $19; //@line 11907
    $38 = $ReallocAsyncCtx4 + 8 | 0; //@line 11908
    HEAP32[$38 >> 2] = $24; //@line 11909
    $39 = $ReallocAsyncCtx4 + 12 | 0; //@line 11910
    HEAP32[$39 >> 2] = $4; //@line 11911
    $40 = $ReallocAsyncCtx4 + 16 | 0; //@line 11912
    HEAP32[$40 >> 2] = $8; //@line 11913
    sp = STACKTOP; //@line 11914
    return;
   } else {
    $28 = HEAP32[$25 + 8 >> 2] | 0; //@line 11918
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 11919
    FUNCTION_TABLE_vi[$28 & 1023]($22); //@line 11920
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 248; //@line 11923
     $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 11924
     HEAP32[$29 >> 2] = $19; //@line 11925
     $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 11926
     HEAP32[$30 >> 2] = $24; //@line 11927
     $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 11928
     HEAP32[$31 >> 2] = $22; //@line 11929
     $32 = $ReallocAsyncCtx3 + 16 | 0; //@line 11930
     HEAP32[$32 >> 2] = $18; //@line 11931
     $33 = $ReallocAsyncCtx3 + 20 | 0; //@line 11932
     HEAP32[$33 >> 2] = $4; //@line 11933
     $34 = $ReallocAsyncCtx3 + 24 | 0; //@line 11934
     HEAP32[$34 >> 2] = $8; //@line 11935
     sp = STACKTOP; //@line 11936
     return;
    }
    ___async_unwind = 0; //@line 11939
    HEAP32[$ReallocAsyncCtx3 >> 2] = 248; //@line 11940
    $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 11941
    HEAP32[$29 >> 2] = $19; //@line 11942
    $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 11943
    HEAP32[$30 >> 2] = $24; //@line 11944
    $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 11945
    HEAP32[$31 >> 2] = $22; //@line 11946
    $32 = $ReallocAsyncCtx3 + 16 | 0; //@line 11947
    HEAP32[$32 >> 2] = $18; //@line 11948
    $33 = $ReallocAsyncCtx3 + 20 | 0; //@line 11949
    HEAP32[$33 >> 2] = $4; //@line 11950
    $34 = $ReallocAsyncCtx3 + 24 | 0; //@line 11951
    HEAP32[$34 >> 2] = $8; //@line 11952
    sp = STACKTOP; //@line 11953
    return;
   }
  }
 }
 $41 = $4 + 32 | 0; //@line 11958
 $42 = $4 + 44 | 0; //@line 11959
 $43 = HEAP32[$42 >> 2] | 0; //@line 11960
 if (!$43) {
  return;
 }
 $45 = $8 + 1912 | 0; //@line 11965
 if (($45 | 0) == ($41 | 0)) {
  return;
 }
 $47 = $8 + 1924 | 0; //@line 11970
 $48 = HEAP32[$47 >> 2] | 0; //@line 11971
 if (!$48) {
  $57 = HEAP32[$43 + 4 >> 2] | 0; //@line 11975
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 11976
  FUNCTION_TABLE_vii[$57 & 31]($45, $41); //@line 11977
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 251; //@line 11980
   $58 = $ReallocAsyncCtx6 + 4 | 0; //@line 11981
   HEAP32[$58 >> 2] = $42; //@line 11982
   $59 = $ReallocAsyncCtx6 + 8 | 0; //@line 11983
   HEAP32[$59 >> 2] = $47; //@line 11984
   sp = STACKTOP; //@line 11985
   return;
  }
  ___async_unwind = 0; //@line 11988
  HEAP32[$ReallocAsyncCtx6 >> 2] = 251; //@line 11989
  $58 = $ReallocAsyncCtx6 + 4 | 0; //@line 11990
  HEAP32[$58 >> 2] = $42; //@line 11991
  $59 = $ReallocAsyncCtx6 + 8 | 0; //@line 11992
  HEAP32[$59 >> 2] = $47; //@line 11993
  sp = STACKTOP; //@line 11994
  return;
 } else {
  $51 = HEAP32[$48 + 8 >> 2] | 0; //@line 11998
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 11999
  FUNCTION_TABLE_vi[$51 & 1023]($45); //@line 12000
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 250; //@line 12003
   $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 12004
   HEAP32[$52 >> 2] = $42; //@line 12005
   $53 = $ReallocAsyncCtx5 + 8 | 0; //@line 12006
   HEAP32[$53 >> 2] = $47; //@line 12007
   $54 = $ReallocAsyncCtx5 + 12 | 0; //@line 12008
   HEAP32[$54 >> 2] = $45; //@line 12009
   $55 = $ReallocAsyncCtx5 + 16 | 0; //@line 12010
   HEAP32[$55 >> 2] = $41; //@line 12011
   sp = STACKTOP; //@line 12012
   return;
  }
  ___async_unwind = 0; //@line 12015
  HEAP32[$ReallocAsyncCtx5 >> 2] = 250; //@line 12016
  $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 12017
  HEAP32[$52 >> 2] = $42; //@line 12018
  $53 = $ReallocAsyncCtx5 + 8 | 0; //@line 12019
  HEAP32[$53 >> 2] = $47; //@line 12020
  $54 = $ReallocAsyncCtx5 + 12 | 0; //@line 12021
  HEAP32[$54 >> 2] = $45; //@line 12022
  $55 = $ReallocAsyncCtx5 + 16 | 0; //@line 12023
  HEAP32[$55 >> 2] = $41; //@line 12024
  sp = STACKTOP; //@line 12025
  return;
 }
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_252($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $25 = 0, $27 = 0, $29 = 0, $31 = 0, $33 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 15510
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15512
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15514
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15516
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15518
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15520
 $12 = $0 + 24 | 0; //@line 15522
 $14 = HEAP32[$12 >> 2] | 0; //@line 15524
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 15527
 $19 = HEAP32[$0 + 32 >> 2] | 0; //@line 15529
 $21 = HEAP32[$0 + 36 >> 2] | 0; //@line 15531
 $23 = HEAP32[$0 + 40 >> 2] | 0; //@line 15533
 $25 = HEAP32[$0 + 44 >> 2] | 0; //@line 15535
 $27 = HEAP32[$0 + 48 >> 2] | 0; //@line 15537
 $29 = HEAP32[$0 + 52 >> 2] | 0; //@line 15539
 $31 = HEAP32[$0 + 56 >> 2] | 0; //@line 15541
 $33 = HEAP32[$0 + 60 >> 2] | 0; //@line 15543
 $35 = HEAP32[$0 + 64 >> 2] | 0; //@line 15545
 $36 = HEAP32[$2 >> 2] | 0; //@line 15546
 if ($36 | 0) {
  $39 = HEAP32[$36 + 4 >> 2] | 0; //@line 15550
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(64) | 0; //@line 15551
  FUNCTION_TABLE_vii[$39 & 31]($6, $8); //@line 15552
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 56; //@line 15555
   $40 = $ReallocAsyncCtx5 + 4 | 0; //@line 15556
   HEAP32[$40 >> 2] = $2; //@line 15557
   $41 = $ReallocAsyncCtx5 + 8 | 0; //@line 15558
   HEAP32[$41 >> 2] = $4; //@line 15559
   $42 = $ReallocAsyncCtx5 + 12 | 0; //@line 15560
   HEAP32[$42 >> 2] = $10; //@line 15561
   $43 = $ReallocAsyncCtx5 + 16 | 0; //@line 15562
   $44 = $43; //@line 15563
   $45 = $44; //@line 15564
   HEAP32[$45 >> 2] = $14; //@line 15565
   $46 = $44 + 4 | 0; //@line 15566
   $47 = $46; //@line 15567
   HEAP32[$47 >> 2] = $17; //@line 15568
   $48 = $ReallocAsyncCtx5 + 24 | 0; //@line 15569
   HEAP32[$48 >> 2] = $19; //@line 15570
   $49 = $ReallocAsyncCtx5 + 28 | 0; //@line 15571
   HEAP32[$49 >> 2] = $8; //@line 15572
   $50 = $ReallocAsyncCtx5 + 32 | 0; //@line 15573
   HEAP32[$50 >> 2] = $21; //@line 15574
   $51 = $ReallocAsyncCtx5 + 36 | 0; //@line 15575
   HEAP32[$51 >> 2] = $23; //@line 15576
   $52 = $ReallocAsyncCtx5 + 40 | 0; //@line 15577
   HEAP32[$52 >> 2] = $25; //@line 15578
   $53 = $ReallocAsyncCtx5 + 44 | 0; //@line 15579
   HEAP32[$53 >> 2] = $27; //@line 15580
   $54 = $ReallocAsyncCtx5 + 48 | 0; //@line 15581
   HEAP32[$54 >> 2] = $29; //@line 15582
   $55 = $ReallocAsyncCtx5 + 52 | 0; //@line 15583
   HEAP32[$55 >> 2] = $31; //@line 15584
   $56 = $ReallocAsyncCtx5 + 56 | 0; //@line 15585
   HEAP32[$56 >> 2] = $33; //@line 15586
   $57 = $ReallocAsyncCtx5 + 60 | 0; //@line 15587
   HEAP32[$57 >> 2] = $35; //@line 15588
   sp = STACKTOP; //@line 15589
   return;
  }
  ___async_unwind = 0; //@line 15592
  HEAP32[$ReallocAsyncCtx5 >> 2] = 56; //@line 15593
  $40 = $ReallocAsyncCtx5 + 4 | 0; //@line 15594
  HEAP32[$40 >> 2] = $2; //@line 15595
  $41 = $ReallocAsyncCtx5 + 8 | 0; //@line 15596
  HEAP32[$41 >> 2] = $4; //@line 15597
  $42 = $ReallocAsyncCtx5 + 12 | 0; //@line 15598
  HEAP32[$42 >> 2] = $10; //@line 15599
  $43 = $ReallocAsyncCtx5 + 16 | 0; //@line 15600
  $44 = $43; //@line 15601
  $45 = $44; //@line 15602
  HEAP32[$45 >> 2] = $14; //@line 15603
  $46 = $44 + 4 | 0; //@line 15604
  $47 = $46; //@line 15605
  HEAP32[$47 >> 2] = $17; //@line 15606
  $48 = $ReallocAsyncCtx5 + 24 | 0; //@line 15607
  HEAP32[$48 >> 2] = $19; //@line 15608
  $49 = $ReallocAsyncCtx5 + 28 | 0; //@line 15609
  HEAP32[$49 >> 2] = $8; //@line 15610
  $50 = $ReallocAsyncCtx5 + 32 | 0; //@line 15611
  HEAP32[$50 >> 2] = $21; //@line 15612
  $51 = $ReallocAsyncCtx5 + 36 | 0; //@line 15613
  HEAP32[$51 >> 2] = $23; //@line 15614
  $52 = $ReallocAsyncCtx5 + 40 | 0; //@line 15615
  HEAP32[$52 >> 2] = $25; //@line 15616
  $53 = $ReallocAsyncCtx5 + 44 | 0; //@line 15617
  HEAP32[$53 >> 2] = $27; //@line 15618
  $54 = $ReallocAsyncCtx5 + 48 | 0; //@line 15619
  HEAP32[$54 >> 2] = $29; //@line 15620
  $55 = $ReallocAsyncCtx5 + 52 | 0; //@line 15621
  HEAP32[$55 >> 2] = $31; //@line 15622
  $56 = $ReallocAsyncCtx5 + 56 | 0; //@line 15623
  HEAP32[$56 >> 2] = $33; //@line 15624
  $57 = $ReallocAsyncCtx5 + 60 | 0; //@line 15625
  HEAP32[$57 >> 2] = $35; //@line 15626
  sp = STACKTOP; //@line 15627
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 15630
 __ZN4mbed6Ticker5setupEy($10, $14, $17); //@line 15631
 $58 = HEAP32[$2 >> 2] | 0; //@line 15632
 if ($58 | 0) {
  $61 = HEAP32[$58 + 8 >> 2] | 0; //@line 15636
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(40) | 0; //@line 15637
  FUNCTION_TABLE_vi[$61 & 1023]($8); //@line 15638
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 15641
   $62 = $ReallocAsyncCtx6 + 4 | 0; //@line 15642
   HEAP32[$62 >> 2] = $19; //@line 15643
   $63 = $ReallocAsyncCtx6 + 8 | 0; //@line 15644
   HEAP32[$63 >> 2] = $21; //@line 15645
   $64 = $ReallocAsyncCtx6 + 12 | 0; //@line 15646
   HEAP32[$64 >> 2] = $23; //@line 15647
   $65 = $ReallocAsyncCtx6 + 16 | 0; //@line 15648
   HEAP32[$65 >> 2] = $25; //@line 15649
   $66 = $ReallocAsyncCtx6 + 20 | 0; //@line 15650
   HEAP32[$66 >> 2] = $27; //@line 15651
   $67 = $ReallocAsyncCtx6 + 24 | 0; //@line 15652
   HEAP32[$67 >> 2] = $29; //@line 15653
   $68 = $ReallocAsyncCtx6 + 28 | 0; //@line 15654
   HEAP32[$68 >> 2] = $31; //@line 15655
   $69 = $ReallocAsyncCtx6 + 32 | 0; //@line 15656
   HEAP32[$69 >> 2] = $33; //@line 15657
   $70 = $ReallocAsyncCtx6 + 36 | 0; //@line 15658
   HEAP32[$70 >> 2] = $35; //@line 15659
   sp = STACKTOP; //@line 15660
   return;
  }
  ___async_unwind = 0; //@line 15663
  HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 15664
  $62 = $ReallocAsyncCtx6 + 4 | 0; //@line 15665
  HEAP32[$62 >> 2] = $19; //@line 15666
  $63 = $ReallocAsyncCtx6 + 8 | 0; //@line 15667
  HEAP32[$63 >> 2] = $21; //@line 15668
  $64 = $ReallocAsyncCtx6 + 12 | 0; //@line 15669
  HEAP32[$64 >> 2] = $23; //@line 15670
  $65 = $ReallocAsyncCtx6 + 16 | 0; //@line 15671
  HEAP32[$65 >> 2] = $25; //@line 15672
  $66 = $ReallocAsyncCtx6 + 20 | 0; //@line 15673
  HEAP32[$66 >> 2] = $27; //@line 15674
  $67 = $ReallocAsyncCtx6 + 24 | 0; //@line 15675
  HEAP32[$67 >> 2] = $29; //@line 15676
  $68 = $ReallocAsyncCtx6 + 28 | 0; //@line 15677
  HEAP32[$68 >> 2] = $31; //@line 15678
  $69 = $ReallocAsyncCtx6 + 32 | 0; //@line 15679
  HEAP32[$69 >> 2] = $33; //@line 15680
  $70 = $ReallocAsyncCtx6 + 36 | 0; //@line 15681
  HEAP32[$70 >> 2] = $35; //@line 15682
  sp = STACKTOP; //@line 15683
  return;
 }
 if (!(HEAP8[$19 + 770 >> 0] | 0)) {
  HEAP32[$21 >> 2] = 6; //@line 15690
  _mbed_tracef(16, 10944, 11001, $21); //@line 15691
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($19); //@line 15692
  HEAP32[$25 >> 2] = 6; //@line 15693
  _mbed_tracef(16, 10944, 11030, $25); //@line 15694
  return;
 } else {
  HEAP32[$29 >> 2] = 5; //@line 15697
  _mbed_tracef(16, 10944, 11001, $29); //@line 15698
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($19); //@line 15699
  HEAP32[$33 >> 2] = 5; //@line 15700
  _mbed_tracef(16, 10944, 11030, $33); //@line 15701
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i = 0, $$pre$i = 0, $11 = 0, $13 = 0, $22 = 0, $25 = 0, $35 = 0, $36 = 0, $37 = 0, $41 = 0, $48 = 0, $51 = 0, $54 = 0, $6 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $71 = 0, $74 = 0, $78 = 0, $8 = 0, $81 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 11927
 STACKTOP = STACKTOP + 48 | 0; //@line 11928
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 11928
 $6 = sp + 16 | 0; //@line 11929
 $7 = sp; //@line 11930
 $8 = $1 + 12 | 0; //@line 11931
 $9 = HEAP32[$8 >> 2] | 0; //@line 11932
 do {
  if (!$9) {
   $11 = $7 + 12 | 0; //@line 11936
   HEAP32[$11 >> 2] = 0; //@line 11937
   $36 = 0; //@line 11938
   $48 = $11; //@line 11938
  } else {
   $13 = HEAP32[$9 + 4 >> 2] | 0; //@line 11941
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 11942
   FUNCTION_TABLE_vii[$13 & 31]($7, $1); //@line 11943
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 339; //@line 11946
    HEAP32[$AsyncCtx + 4 >> 2] = $8; //@line 11948
    HEAP32[$AsyncCtx + 8 >> 2] = $7; //@line 11950
    HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 11952
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 11954
    HEAP16[$AsyncCtx + 20 >> 1] = $3; //@line 11956
    HEAP16[$AsyncCtx + 22 >> 1] = $4; //@line 11958
    HEAP8[$AsyncCtx + 24 >> 0] = $5; //@line 11960
    HEAP32[$AsyncCtx + 28 >> 2] = $0; //@line 11962
    sp = STACKTOP; //@line 11963
    STACKTOP = sp; //@line 11964
    return 0; //@line 11964
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 11966
   $$pre$i = HEAP32[$8 >> 2] | 0; //@line 11967
   $22 = $7 + 12 | 0; //@line 11968
   HEAP32[$22 >> 2] = $$pre$i; //@line 11969
   if (!$$pre$i) {
    $36 = 0; //@line 11972
    $48 = $22; //@line 11972
   } else {
    $25 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 11976
    $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 11977
    FUNCTION_TABLE_vii[$25 & 31]($6, $7); //@line 11978
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 340; //@line 11981
     HEAP32[$AsyncCtx2 + 4 >> 2] = $22; //@line 11983
     HEAP32[$AsyncCtx2 + 8 >> 2] = $6; //@line 11985
     HEAP32[$AsyncCtx2 + 12 >> 2] = $22; //@line 11987
     HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 11989
     HEAP16[$AsyncCtx2 + 20 >> 1] = $3; //@line 11991
     HEAP16[$AsyncCtx2 + 22 >> 1] = $4; //@line 11993
     HEAP8[$AsyncCtx2 + 24 >> 0] = $5; //@line 11995
     HEAP32[$AsyncCtx2 + 28 >> 2] = $0; //@line 11997
     HEAP32[$AsyncCtx2 + 32 >> 2] = $7; //@line 11999
     sp = STACKTOP; //@line 12000
     STACKTOP = sp; //@line 12001
     return 0; //@line 12001
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 12003
     $36 = HEAP32[$22 >> 2] | 0; //@line 12005
     $48 = $22; //@line 12005
     break;
    }
   }
  }
 } while (0);
 $35 = $6 + 12 | 0; //@line 12011
 HEAP32[$35 >> 2] = $36; //@line 12012
 $37 = $6 + 16 | 0; //@line 12013
 HEAP32[$37 >> 2] = $2; //@line 12014
 HEAP16[$6 + 20 >> 1] = $3; //@line 12016
 HEAP16[$6 + 22 >> 1] = $4; //@line 12018
 HEAP8[$6 + 24 >> 0] = $5; //@line 12020
 $AsyncCtx18 = _emscripten_alloc_async_context(32, sp) | 0; //@line 12021
 $41 = _equeue_alloc($0, 28) | 0; //@line 12022
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 341; //@line 12025
  HEAP32[$AsyncCtx18 + 4 >> 2] = $35; //@line 12027
  HEAP32[$AsyncCtx18 + 8 >> 2] = $35; //@line 12029
  HEAP32[$AsyncCtx18 + 12 >> 2] = $6; //@line 12031
  HEAP32[$AsyncCtx18 + 16 >> 2] = $37; //@line 12033
  HEAP32[$AsyncCtx18 + 20 >> 2] = $0; //@line 12035
  HEAP32[$AsyncCtx18 + 24 >> 2] = $48; //@line 12037
  HEAP32[$AsyncCtx18 + 28 >> 2] = $7; //@line 12039
  sp = STACKTOP; //@line 12040
  STACKTOP = sp; //@line 12041
  return 0; //@line 12041
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 12043
 do {
  if (!$41) {
   $$0$i = 0; //@line 12047
  } else {
   $51 = HEAP32[$35 >> 2] | 0; //@line 12049
   do {
    if (!$51) {
     $64 = 0; //@line 12053
    } else {
     $54 = HEAP32[$51 + 4 >> 2] | 0; //@line 12056
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 12057
     FUNCTION_TABLE_vii[$54 & 31]($41, $6); //@line 12058
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 342; //@line 12061
      HEAP32[$AsyncCtx5 + 4 >> 2] = $35; //@line 12063
      HEAP32[$AsyncCtx5 + 8 >> 2] = $41; //@line 12065
      HEAP32[$AsyncCtx5 + 12 >> 2] = $37; //@line 12067
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 12069
      HEAP32[$AsyncCtx5 + 20 >> 2] = $35; //@line 12071
      HEAP32[$AsyncCtx5 + 24 >> 2] = $48; //@line 12073
      HEAP32[$AsyncCtx5 + 28 >> 2] = $6; //@line 12075
      HEAP32[$AsyncCtx5 + 32 >> 2] = $7; //@line 12077
      sp = STACKTOP; //@line 12078
      STACKTOP = sp; //@line 12079
      return 0; //@line 12079
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 12081
      $64 = HEAP32[$35 >> 2] | 0; //@line 12083
      break;
     }
    }
   } while (0);
   HEAP32[$41 + 12 >> 2] = $64; //@line 12089
   $65 = $41 + 16 | 0; //@line 12090
   HEAP32[$65 >> 2] = HEAP32[$37 >> 2]; //@line 12091
   HEAP32[$65 + 4 >> 2] = HEAP32[$37 + 4 >> 2]; //@line 12091
   HEAP8[$65 + 8 >> 0] = HEAP8[$37 + 8 >> 0] | 0; //@line 12091
   _equeue_event_dtor($41, 343); //@line 12092
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12093
   $66 = _equeue_post($0, 344, $41) | 0; //@line 12094
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 345; //@line 12097
    HEAP32[$AsyncCtx15 + 4 >> 2] = $35; //@line 12099
    HEAP32[$AsyncCtx15 + 8 >> 2] = $48; //@line 12101
    HEAP32[$AsyncCtx15 + 12 >> 2] = $6; //@line 12103
    HEAP32[$AsyncCtx15 + 16 >> 2] = $7; //@line 12105
    sp = STACKTOP; //@line 12106
    STACKTOP = sp; //@line 12107
    return 0; //@line 12107
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 12109
    $$0$i = $66; //@line 12110
    break;
   }
  }
 } while (0);
 $71 = HEAP32[$35 >> 2] | 0; //@line 12115
 do {
  if ($71 | 0) {
   $74 = HEAP32[$71 + 8 >> 2] | 0; //@line 12120
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 12121
   FUNCTION_TABLE_vi[$74 & 1023]($6); //@line 12122
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 346; //@line 12125
    HEAP32[$AsyncCtx8 + 4 >> 2] = $48; //@line 12127
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 12129
    HEAP32[$AsyncCtx8 + 12 >> 2] = $7; //@line 12131
    sp = STACKTOP; //@line 12132
    STACKTOP = sp; //@line 12133
    return 0; //@line 12133
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 12135
    break;
   }
  }
 } while (0);
 $78 = HEAP32[$48 >> 2] | 0; //@line 12140
 if (!$78) {
  STACKTOP = sp; //@line 12143
  return $$0$i | 0; //@line 12143
 }
 $81 = HEAP32[$78 + 8 >> 2] | 0; //@line 12146
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12147
 FUNCTION_TABLE_vi[$81 & 1023]($7); //@line 12148
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 347; //@line 12151
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 12153
  sp = STACKTOP; //@line 12154
  STACKTOP = sp; //@line 12155
  return 0; //@line 12155
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 12157
 STACKTOP = sp; //@line 12158
 return $$0$i | 0; //@line 12158
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$off0 = 0, $49 = 0, $57 = 0, $67 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx21 = 0, $AsyncCtx24 = 0, $AsyncCtx28 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 938
 STACKTOP = STACKTOP + 64 | 0; //@line 939
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 939
 $vararg_buffer8 = sp + 56 | 0; //@line 940
 $vararg_buffer6 = sp + 48 | 0; //@line 941
 $vararg_buffer3 = sp + 16 | 0; //@line 942
 $vararg_buffer1 = sp + 8 | 0; //@line 943
 _mbed_tracef(16, 10944, 11088, sp); //@line 945
 HEAP8[$0 + 689 >> 0] = $1; //@line 948
 $9 = HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] | 0; //@line 951
 $AsyncCtx = _emscripten_alloc_async_context(52, sp) | 0; //@line 952
 FUNCTION_TABLE_vii[$9 & 31]($0, $2); //@line 953
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 59; //@line 956
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer3; //@line 958
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer6; //@line 960
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer6; //@line 962
  HEAP32[$AsyncCtx + 16 >> 2] = $4; //@line 964
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 966
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer8; //@line 968
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer8; //@line 970
  HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer1; //@line 972
  HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer1; //@line 974
  HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer3; //@line 976
  HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer3; //@line 978
  HEAP16[$AsyncCtx + 48 >> 1] = $3; //@line 980
  sp = STACKTOP; //@line 981
  STACKTOP = sp; //@line 982
  return 0; //@line 982
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 984
 HEAP32[$vararg_buffer1 >> 2] = 5; //@line 985
 _mbed_tracef(16, 10944, 11001, $vararg_buffer1); //@line 986
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 987
 HEAP32[$vararg_buffer3 >> 2] = 5; //@line 988
 _mbed_tracef(16, 10944, 11030, $vararg_buffer3); //@line 989
 $AsyncCtx28 = _emscripten_alloc_async_context(36, sp) | 0; //@line 990
 _wait_ms(1); //@line 991
 if (___async) {
  HEAP32[$AsyncCtx28 >> 2] = 60; //@line 994
  HEAP32[$AsyncCtx28 + 4 >> 2] = $vararg_buffer3; //@line 996
  HEAP16[$AsyncCtx28 + 8 >> 1] = $3; //@line 998
  HEAP32[$AsyncCtx28 + 12 >> 2] = $4; //@line 1000
  HEAP32[$AsyncCtx28 + 16 >> 2] = $vararg_buffer8; //@line 1002
  HEAP32[$AsyncCtx28 + 20 >> 2] = $vararg_buffer8; //@line 1004
  HEAP32[$AsyncCtx28 + 24 >> 2] = $0; //@line 1006
  HEAP32[$AsyncCtx28 + 28 >> 2] = $vararg_buffer6; //@line 1008
  HEAP32[$AsyncCtx28 + 32 >> 2] = $vararg_buffer6; //@line 1010
  sp = STACKTOP; //@line 1011
  STACKTOP = sp; //@line 1012
  return 0; //@line 1012
 }
 _emscripten_free_async_context($AsyncCtx28 | 0); //@line 1014
 $AsyncCtx15 = _emscripten_alloc_async_context(40, sp) | 0; //@line 1015
 __ZN4mbed5TimerC2Ev($vararg_buffer3); //@line 1016
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 61; //@line 1019
  HEAP32[$AsyncCtx15 + 4 >> 2] = $vararg_buffer3; //@line 1021
  HEAP16[$AsyncCtx15 + 8 >> 1] = $3; //@line 1023
  HEAP32[$AsyncCtx15 + 12 >> 2] = $4; //@line 1025
  HEAP32[$AsyncCtx15 + 16 >> 2] = $vararg_buffer8; //@line 1027
  HEAP32[$AsyncCtx15 + 20 >> 2] = $vararg_buffer8; //@line 1029
  HEAP32[$AsyncCtx15 + 24 >> 2] = $0; //@line 1031
  HEAP32[$AsyncCtx15 + 28 >> 2] = $vararg_buffer3; //@line 1033
  HEAP32[$AsyncCtx15 + 32 >> 2] = $vararg_buffer6; //@line 1035
  HEAP32[$AsyncCtx15 + 36 >> 2] = $vararg_buffer6; //@line 1037
  sp = STACKTOP; //@line 1038
  STACKTOP = sp; //@line 1039
  return 0; //@line 1039
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 1041
 $AsyncCtx18 = _emscripten_alloc_async_context(40, sp) | 0; //@line 1042
 __ZN4mbed5Timer5startEv($vararg_buffer3); //@line 1043
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 62; //@line 1046
  HEAP16[$AsyncCtx18 + 4 >> 1] = $3; //@line 1048
  HEAP32[$AsyncCtx18 + 8 >> 2] = $vararg_buffer3; //@line 1050
  HEAP32[$AsyncCtx18 + 12 >> 2] = $4; //@line 1052
  HEAP32[$AsyncCtx18 + 16 >> 2] = $vararg_buffer8; //@line 1054
  HEAP32[$AsyncCtx18 + 20 >> 2] = $vararg_buffer8; //@line 1056
  HEAP32[$AsyncCtx18 + 24 >> 2] = $0; //@line 1058
  HEAP32[$AsyncCtx18 + 28 >> 2] = $vararg_buffer3; //@line 1060
  HEAP32[$AsyncCtx18 + 32 >> 2] = $vararg_buffer6; //@line 1062
  HEAP32[$AsyncCtx18 + 36 >> 2] = $vararg_buffer6; //@line 1064
  sp = STACKTOP; //@line 1065
  STACKTOP = sp; //@line 1066
  return 0; //@line 1066
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 1068
 L13 : do {
  if ($3 << 16 >> 16 < -1) {
   $AsyncCtx24 = _emscripten_alloc_async_context(28, sp) | 0; //@line 1072
   $49 = __ZN4mbed5Timer7read_msEv($vararg_buffer3) | 0; //@line 1073
   if (___async) {
    HEAP32[$AsyncCtx24 >> 2] = 63; //@line 1076
    HEAP32[$AsyncCtx24 + 4 >> 2] = $4; //@line 1078
    HEAP32[$AsyncCtx24 + 8 >> 2] = $vararg_buffer6; //@line 1080
    HEAP32[$AsyncCtx24 + 12 >> 2] = $vararg_buffer6; //@line 1082
    HEAP32[$AsyncCtx24 + 16 >> 2] = $0; //@line 1084
    HEAP32[$AsyncCtx24 + 20 >> 2] = $vararg_buffer3; //@line 1086
    HEAP32[$AsyncCtx24 + 24 >> 2] = $vararg_buffer3; //@line 1088
    sp = STACKTOP; //@line 1089
    STACKTOP = sp; //@line 1090
    return 0; //@line 1090
   }
   _emscripten_free_async_context($AsyncCtx24 | 0); //@line 1092
   if (($49 | 0) < ($4 | 0)) {
    _mbed_tracef(16, 10944, 11110, $vararg_buffer6); //@line 1095
    $$0$off0 = 0; //@line 1096
   } else {
    $$0$off0 = 1; //@line 1098
   }
  } else {
   while (1) {
    $AsyncCtx21 = _emscripten_alloc_async_context(28, sp) | 0; //@line 1102
    $57 = __ZN4mbed5Timer7read_msEv($vararg_buffer3) | 0; //@line 1103
    if (___async) {
     break;
    }
    _emscripten_free_async_context($AsyncCtx21 | 0); //@line 1108
    if (($57 | 0) >= ($4 | 0)) {
     $$0$off0 = 1; //@line 1111
     break L13;
    }
    _mbed_tracef(16, 10944, 11110, $vararg_buffer8); //@line 1114
   }
   HEAP32[$AsyncCtx21 >> 2] = 64; //@line 1116
   HEAP32[$AsyncCtx21 + 4 >> 2] = $4; //@line 1118
   HEAP32[$AsyncCtx21 + 8 >> 2] = $vararg_buffer8; //@line 1120
   HEAP32[$AsyncCtx21 + 12 >> 2] = $vararg_buffer8; //@line 1122
   HEAP32[$AsyncCtx21 + 16 >> 2] = $0; //@line 1124
   HEAP32[$AsyncCtx21 + 20 >> 2] = $vararg_buffer3; //@line 1126
   HEAP32[$AsyncCtx21 + 24 >> 2] = $vararg_buffer3; //@line 1128
   sp = STACKTOP; //@line 1129
   STACKTOP = sp; //@line 1130
   return 0; //@line 1130
  }
 } while (0);
 $67 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 1135
 $AsyncCtx12 = _emscripten_alloc_async_context(16, sp) | 0; //@line 1136
 FUNCTION_TABLE_vi[$67 & 1023]($0); //@line 1137
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 65; //@line 1140
  HEAP32[$AsyncCtx12 + 4 >> 2] = $vararg_buffer3; //@line 1142
  HEAP32[$AsyncCtx12 + 8 >> 2] = $vararg_buffer3; //@line 1144
  HEAP8[$AsyncCtx12 + 12 >> 0] = $$0$off0 & 1; //@line 1147
  sp = STACKTOP; //@line 1148
  STACKTOP = sp; //@line 1149
  return 0; //@line 1149
 } else {
  _emscripten_free_async_context($AsyncCtx12 | 0); //@line 1151
  __ZN4mbed5TimerD2Ev($vararg_buffer3); //@line 1152
  STACKTOP = sp; //@line 1153
  return $$0$off0 | 0; //@line 1153
 }
 return 0; //@line 1155
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_323($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$pre16 = 0, $13 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 22668
 STACKTOP = STACKTOP + 16 | 0; //@line 22669
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 22669
 $$byval_copy = sp; //@line 22670
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22672
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22674
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22676
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22678
 $$pre16 = HEAP8[$2 >> 0] | 0; //@line 22681
 do {
  if (!($$pre16 & 2)) {
   $44 = $$pre16; //@line 22686
  } else {
   $13 = $$pre16 & -3; //@line 22688
   HEAP8[$2 >> 0] = $13; //@line 22689
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _mbed_tracef(16, 13704, 13723, $8); //@line 22694
    $18 = HEAP32[$4 + 1328 >> 2] | 0; //@line 22696
    HEAP32[$6 >> 2] = 279; //@line 22697
    HEAP32[$6 + 4 >> 2] = 0; //@line 22699
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 22700
    HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 22701
    HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 22701
    $19 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($18, $4, $$byval_copy) | 0; //@line 22702
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 389; //@line 22705
     $20 = $ReallocAsyncCtx8 + 4 | 0; //@line 22706
     HEAP32[$20 >> 2] = $2; //@line 22707
     $21 = $ReallocAsyncCtx8 + 8 | 0; //@line 22708
     HEAP32[$21 >> 2] = $4; //@line 22709
     $22 = $ReallocAsyncCtx8 + 12 | 0; //@line 22710
     HEAP32[$22 >> 2] = $6; //@line 22711
     sp = STACKTOP; //@line 22712
     STACKTOP = sp; //@line 22713
     return;
    }
    HEAP32[___async_retval >> 2] = $19; //@line 22716
    ___async_unwind = 0; //@line 22717
    HEAP32[$ReallocAsyncCtx8 >> 2] = 389; //@line 22718
    $20 = $ReallocAsyncCtx8 + 4 | 0; //@line 22719
    HEAP32[$20 >> 2] = $2; //@line 22720
    $21 = $ReallocAsyncCtx8 + 8 | 0; //@line 22721
    HEAP32[$21 >> 2] = $4; //@line 22722
    $22 = $ReallocAsyncCtx8 + 12 | 0; //@line 22723
    HEAP32[$22 >> 2] = $6; //@line 22724
    sp = STACKTOP; //@line 22725
    STACKTOP = sp; //@line 22726
    return;
   }
   if ($13 & 4) {
    $42 = $13 & -5; //@line 22731
    HEAP8[$2 >> 0] = $42; //@line 22732
    $44 = $42; //@line 22733
    break;
   }
   $27 = HEAP32[$4 + 1324 >> 2] | 0; //@line 22737
   $28 = $27 + 16 | 0; //@line 22738
   $30 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 22740
   $31 = $27 + 28 | 0; //@line 22741
   $32 = HEAP32[$31 >> 2] | 0; //@line 22742
   if (!$32) {
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 22745
    _mbed_assert_internal(15615, 15620, 1102); //@line 22746
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 391; //@line 22749
     $34 = $ReallocAsyncCtx13 + 4 | 0; //@line 22750
     HEAP32[$34 >> 2] = $31; //@line 22751
     $35 = $ReallocAsyncCtx13 + 8 | 0; //@line 22752
     HEAP32[$35 >> 2] = $28; //@line 22753
     $36 = $ReallocAsyncCtx13 + 12 | 0; //@line 22754
     HEAP32[$36 >> 2] = $30; //@line 22755
     $37 = $ReallocAsyncCtx13 + 16 | 0; //@line 22756
     HEAP32[$37 >> 2] = $2; //@line 22757
     $38 = $ReallocAsyncCtx13 + 20 | 0; //@line 22758
     HEAP32[$38 >> 2] = $4; //@line 22759
     sp = STACKTOP; //@line 22760
     STACKTOP = sp; //@line 22761
     return;
    }
    ___async_unwind = 0; //@line 22763
    HEAP32[$ReallocAsyncCtx13 >> 2] = 391; //@line 22764
    $34 = $ReallocAsyncCtx13 + 4 | 0; //@line 22765
    HEAP32[$34 >> 2] = $31; //@line 22766
    $35 = $ReallocAsyncCtx13 + 8 | 0; //@line 22767
    HEAP32[$35 >> 2] = $28; //@line 22768
    $36 = $ReallocAsyncCtx13 + 12 | 0; //@line 22769
    HEAP32[$36 >> 2] = $30; //@line 22770
    $37 = $ReallocAsyncCtx13 + 16 | 0; //@line 22771
    HEAP32[$37 >> 2] = $2; //@line 22772
    $38 = $ReallocAsyncCtx13 + 20 | 0; //@line 22773
    HEAP32[$38 >> 2] = $4; //@line 22774
    sp = STACKTOP; //@line 22775
    STACKTOP = sp; //@line 22776
    return;
   } else {
    $39 = HEAP32[$32 >> 2] | 0; //@line 22778
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 22779
    FUNCTION_TABLE_vii[$39 & 31]($28, $30); //@line 22780
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 392; //@line 22783
     $40 = $ReallocAsyncCtx4 + 4 | 0; //@line 22784
     HEAP32[$40 >> 2] = $2; //@line 22785
     $41 = $ReallocAsyncCtx4 + 8 | 0; //@line 22786
     HEAP32[$41 >> 2] = $4; //@line 22787
     sp = STACKTOP; //@line 22788
     STACKTOP = sp; //@line 22789
     return;
    }
    ___async_unwind = 0; //@line 22791
    HEAP32[$ReallocAsyncCtx4 >> 2] = 392; //@line 22792
    $40 = $ReallocAsyncCtx4 + 4 | 0; //@line 22793
    HEAP32[$40 >> 2] = $2; //@line 22794
    $41 = $ReallocAsyncCtx4 + 8 | 0; //@line 22795
    HEAP32[$41 >> 2] = $4; //@line 22796
    sp = STACKTOP; //@line 22797
    STACKTOP = sp; //@line 22798
    return;
   }
  }
 } while (0);
 if (!($44 & 16)) {
  STACKTOP = sp; //@line 22805
  return;
 }
 HEAP8[$2 >> 0] = $44 & -17; //@line 22808
 $48 = HEAP32[$4 + 1324 >> 2] | 0; //@line 22810
 $49 = $48 + 48 | 0; //@line 22811
 $51 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 22813
 $52 = $48 + 60 | 0; //@line 22814
 $53 = HEAP32[$52 >> 2] | 0; //@line 22815
 if (!$53) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 22818
  _mbed_assert_internal(15615, 15620, 1102); //@line 22819
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 393; //@line 22822
   $55 = $ReallocAsyncCtx12 + 4 | 0; //@line 22823
   HEAP32[$55 >> 2] = $52; //@line 22824
   $56 = $ReallocAsyncCtx12 + 8 | 0; //@line 22825
   HEAP32[$56 >> 2] = $49; //@line 22826
   $57 = $ReallocAsyncCtx12 + 12 | 0; //@line 22827
   HEAP32[$57 >> 2] = $51; //@line 22828
   sp = STACKTOP; //@line 22829
   STACKTOP = sp; //@line 22830
   return;
  }
  ___async_unwind = 0; //@line 22832
  HEAP32[$ReallocAsyncCtx12 >> 2] = 393; //@line 22833
  $55 = $ReallocAsyncCtx12 + 4 | 0; //@line 22834
  HEAP32[$55 >> 2] = $52; //@line 22835
  $56 = $ReallocAsyncCtx12 + 8 | 0; //@line 22836
  HEAP32[$56 >> 2] = $49; //@line 22837
  $57 = $ReallocAsyncCtx12 + 12 | 0; //@line 22838
  HEAP32[$57 >> 2] = $51; //@line 22839
  sp = STACKTOP; //@line 22840
  STACKTOP = sp; //@line 22841
  return;
 } else {
  $58 = HEAP32[$53 >> 2] | 0; //@line 22843
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 22844
  FUNCTION_TABLE_vii[$58 & 31]($49, $51); //@line 22845
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 394; //@line 22848
   sp = STACKTOP; //@line 22849
   STACKTOP = sp; //@line 22850
   return;
  }
  ___async_unwind = 0; //@line 22852
  HEAP32[$ReallocAsyncCtx5 >> 2] = 394; //@line 22853
  sp = STACKTOP; //@line 22854
  STACKTOP = sp; //@line 22855
  return;
 }
}
function _mbedtls_cipher_update($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0102 = 0, $$0103 = 0, $$0105 = 0, $$1 = 0, $$phi$trans$insert = 0, $$pre$phi107Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $12 = 0, $17 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $34 = 0, $36 = 0, $37 = 0, $40 = 0, $41 = 0, $45 = 0, $49 = 0, $50 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $62 = 0, $80 = 0, $85 = 0, $94 = 0, $96 = 0, $97 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3147
 if (!$0) {
  $$1 = -24832; //@line 3150
  return $$1 | 0; //@line 3151
 }
 $6 = HEAP32[$0 >> 2] | 0; //@line 3153
 if (($4 | 0) == 0 | ($6 | 0) == 0) {
  $$1 = -24832; //@line 3158
  return $$1 | 0; //@line 3159
 }
 HEAP32[$4 >> 2] = 0; //@line 3161
 $10 = HEAP32[$6 + 24 >> 2] | 0; //@line 3163
 $12 = HEAP32[$6 + 4 >> 2] | 0; //@line 3165
 switch ($12 | 0) {
 case 1:
  {
   if (($10 | 0) != ($2 | 0)) {
    $$1 = -25216; //@line 3170
    return $$1 | 0; //@line 3171
   }
   HEAP32[$4 >> 2] = $2; //@line 3173
   $17 = HEAP32[(HEAP32[$6 + 28 >> 2] | 0) + 4 >> 2] | 0; //@line 3177
   $19 = HEAP32[$0 + 60 >> 2] | 0; //@line 3179
   $21 = HEAP32[$0 + 8 >> 2] | 0; //@line 3181
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3182
   $22 = FUNCTION_TABLE_iiiii[$17 & 3]($19, $21, $1, $3) | 0; //@line 3183
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 576; //@line 3186
    sp = STACKTOP; //@line 3187
    return 0; //@line 3188
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 3190
   $$1 = $22; //@line 3191
   return $$1 | 0; //@line 3192
  }
 case 6:
  {
   HEAP32[$4 >> 2] = $2; //@line 3196
   $24 = HEAP32[$0 + 60 >> 2] | 0; //@line 3198
   $AsyncCtx11 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3199
   $25 = _mbedtls_gcm_update($24, $2, $1, $3) | 0; //@line 3200
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 577; //@line 3203
    sp = STACKTOP; //@line 3204
    return 0; //@line 3205
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 3207
   $$1 = $25; //@line 3208
   return $$1 | 0; //@line 3209
  }
 default:
  {
   if (!$10) {
    $$1 = -25472; //@line 3215
    return $$1 | 0; //@line 3216
   }
   if (($1 | 0) == ($3 | 0)) {
    if (HEAP32[$0 + 36 >> 2] | 0) {
     $$1 = -24832; //@line 3224
     return $$1 | 0; //@line 3225
    }
    if (($2 >>> 0) % ($10 >>> 0) | 0 | 0) {
     $$1 = -24832; //@line 3230
     return $$1 | 0; //@line 3231
    }
   }
   if (($12 | 0) != 2) {
    $$1 = -24704; //@line 3236
    return $$1 | 0; //@line 3237
   }
   $34 = $0 + 8 | 0; //@line 3239
   switch (HEAP32[$34 >> 2] | 0) {
   case 0:
    {
     $36 = $0 + 36 | 0; //@line 3243
     $37 = HEAP32[$36 >> 2] | 0; //@line 3244
     if (($10 - $37 | 0) >>> 0 < $2 >>> 0) {
      label = 18; //@line 3248
     } else {
      $$pre$phiZ2D = $36; //@line 3250
      $45 = $37; //@line 3250
      label = 20; //@line 3251
     }
     break;
    }
   case 1:
    {
     $40 = $0 + 36 | 0; //@line 3256
     $41 = HEAP32[$40 >> 2] | 0; //@line 3257
     if (($10 - $41 | 0) >>> 0 > $2 >>> 0) {
      $$pre$phiZ2D = $40; //@line 3261
      $45 = $41; //@line 3261
      label = 20; //@line 3262
     } else {
      $$pre$phi107Z2D = $40; //@line 3264
      $49 = $41; //@line 3264
     }
     break;
    }
   default:
    {
     label = 18; //@line 3269
    }
   }
   if ((label | 0) == 18) {
    $$phi$trans$insert = $0 + 36 | 0; //@line 3273
    $$pre$phi107Z2D = $$phi$trans$insert; //@line 3275
    $49 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 3275
   } else if ((label | 0) == 20) {
    _memcpy($0 + 20 + $45 | 0, $1 | 0, $2 | 0) | 0; //@line 3279
    HEAP32[$$pre$phiZ2D >> 2] = (HEAP32[$$pre$phiZ2D >> 2] | 0) + $2; //@line 3282
    $$1 = 0; //@line 3283
    return $$1 | 0; //@line 3284
   }
   do {
    if (!$49) {
     $$0102 = $3; //@line 3289
     $$0103 = $2; //@line 3289
     $$0105 = $1; //@line 3289
    } else {
     $50 = $10 - $49 | 0; //@line 3291
     _memcpy($0 + 20 + $49 | 0, $1 | 0, $50 | 0) | 0; //@line 3293
     $56 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 3298
     $58 = HEAP32[$0 + 60 >> 2] | 0; //@line 3300
     $59 = HEAP32[$34 >> 2] | 0; //@line 3301
     $AsyncCtx3 = _emscripten_alloc_async_context(44, sp) | 0; //@line 3304
     $62 = FUNCTION_TABLE_iiiiiii[$56 & 3]($58, $59, $10, $0 + 40 | 0, $0 + 20 | 0, $3) | 0; //@line 3305
     if (___async) {
      HEAP32[$AsyncCtx3 >> 2] = 578; //@line 3308
      HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 3310
      HEAP32[$AsyncCtx3 + 8 >> 2] = $10; //@line 3312
      HEAP32[$AsyncCtx3 + 12 >> 2] = $3; //@line 3314
      HEAP32[$AsyncCtx3 + 16 >> 2] = $$pre$phi107Z2D; //@line 3316
      HEAP32[$AsyncCtx3 + 20 >> 2] = $1; //@line 3318
      HEAP32[$AsyncCtx3 + 24 >> 2] = $50; //@line 3320
      HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 3322
      HEAP32[$AsyncCtx3 + 32 >> 2] = $34; //@line 3324
      HEAP32[$AsyncCtx3 + 36 >> 2] = $0; //@line 3326
      HEAP32[$AsyncCtx3 + 40 >> 2] = $0; //@line 3328
      sp = STACKTOP; //@line 3329
      return 0; //@line 3330
     }
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3332
     if (!$62) {
      HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + $10; //@line 3337
      HEAP32[$$pre$phi107Z2D >> 2] = 0; //@line 3339
      $$0102 = $3 + $10 | 0; //@line 3342
      $$0103 = $2 - $50 | 0; //@line 3342
      $$0105 = $1 + $50 | 0; //@line 3342
      break;
     } else {
      $$1 = $62; //@line 3345
      return $$1 | 0; //@line 3346
     }
    }
   } while (0);
   if (!$$0103) {
    $$1 = 0; //@line 3352
    return $$1 | 0; //@line 3353
   }
   $80 = ($$0103 >>> 0) % ($10 >>> 0) | 0; //@line 3355
   if (!$80) {
    $$0 = (HEAP32[$34 >> 2] | 0) == 0 ? $10 : 0; //@line 3361
   } else {
    $$0 = $80; //@line 3363
   }
   $85 = $$0103 - $$0 | 0; //@line 3366
   _memcpy($0 + 20 | 0, $$0105 + $85 | 0, $$0 | 0) | 0; //@line 3368
   HEAP32[$$pre$phi107Z2D >> 2] = (HEAP32[$$pre$phi107Z2D >> 2] | 0) + $$0; //@line 3371
   if (!$85) {
    $$1 = 0; //@line 3374
    return $$1 | 0; //@line 3375
   }
   $94 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 3381
   $96 = HEAP32[$0 + 60 >> 2] | 0; //@line 3383
   $97 = HEAP32[$34 >> 2] | 0; //@line 3384
   $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 3386
   $99 = FUNCTION_TABLE_iiiiiii[$94 & 3]($96, $97, $85, $0 + 40 | 0, $$0105, $$0102) | 0; //@line 3387
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 579; //@line 3390
    HEAP32[$AsyncCtx7 + 4 >> 2] = $4; //@line 3392
    HEAP32[$AsyncCtx7 + 8 >> 2] = $85; //@line 3394
    sp = STACKTOP; //@line 3395
    return 0; //@line 3396
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 3398
   if ($99 | 0) {
    $$1 = $99; //@line 3401
    return $$1 | 0; //@line 3402
   }
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + $85; //@line 3406
   $$1 = 0; //@line 3407
   return $$1 | 0; //@line 3408
  }
 }
 return 0; //@line 3411
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_276($0) {
 $0 = $0 | 0;
 var $$pre$i$i34 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 18401
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18403
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18405
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18407
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18409
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18415
 $$pre$i$i34 = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 18416
 HEAP32[HEAP32[$0 + 24 >> 2] >> 2] = $$pre$i$i34; //@line 18418
 if ($$pre$i$i34 | 0) {
  $18 = HEAP32[$$pre$i$i34 + 8 >> 2] | 0; //@line 18422
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(24) | 0; //@line 18423
  FUNCTION_TABLE_vi[$18 & 1023]($6); //@line 18424
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 476; //@line 18427
   $19 = $ReallocAsyncCtx9 + 4 | 0; //@line 18428
   HEAP32[$19 >> 2] = $2; //@line 18429
   $20 = $ReallocAsyncCtx9 + 8 | 0; //@line 18430
   HEAP32[$20 >> 2] = $4; //@line 18431
   $21 = $ReallocAsyncCtx9 + 12 | 0; //@line 18432
   HEAP32[$21 >> 2] = $6; //@line 18433
   $22 = $ReallocAsyncCtx9 + 16 | 0; //@line 18434
   HEAP32[$22 >> 2] = $8; //@line 18435
   $23 = $ReallocAsyncCtx9 + 20 | 0; //@line 18436
   HEAP32[$23 >> 2] = $14; //@line 18437
   sp = STACKTOP; //@line 18438
   return;
  }
  ___async_unwind = 0; //@line 18441
  HEAP32[$ReallocAsyncCtx9 >> 2] = 476; //@line 18442
  $19 = $ReallocAsyncCtx9 + 4 | 0; //@line 18443
  HEAP32[$19 >> 2] = $2; //@line 18444
  $20 = $ReallocAsyncCtx9 + 8 | 0; //@line 18445
  HEAP32[$20 >> 2] = $4; //@line 18446
  $21 = $ReallocAsyncCtx9 + 12 | 0; //@line 18447
  HEAP32[$21 >> 2] = $6; //@line 18448
  $22 = $ReallocAsyncCtx9 + 16 | 0; //@line 18449
  HEAP32[$22 >> 2] = $8; //@line 18450
  $23 = $ReallocAsyncCtx9 + 20 | 0; //@line 18451
  HEAP32[$23 >> 2] = $14; //@line 18452
  sp = STACKTOP; //@line 18453
  return;
 }
 $24 = $8 + 12 | 0; //@line 18456
 HEAP32[$8 >> 2] = 477; //@line 18457
 HEAP32[$8 + 4 >> 2] = 0; //@line 18459
 HEAP32[$8 + 8 >> 2] = $2; //@line 18461
 HEAP32[$24 >> 2] = 912; //@line 18462
 $25 = $2 + 1228 | 0; //@line 18463
 if (($25 | 0) == ($8 | 0)) {
  $48 = HEAP32[230] | 0; //@line 18467
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 18468
  FUNCTION_TABLE_vi[$48 & 1023]($8); //@line 18469
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 480; //@line 18472
   $49 = $ReallocAsyncCtx12 + 4 | 0; //@line 18473
   HEAP32[$49 >> 2] = $8; //@line 18474
   $50 = $ReallocAsyncCtx12 + 8 | 0; //@line 18475
   HEAP32[$50 >> 2] = $14; //@line 18476
   $51 = $ReallocAsyncCtx12 + 12 | 0; //@line 18477
   HEAP32[$51 >> 2] = $2; //@line 18478
   $52 = $ReallocAsyncCtx12 + 16 | 0; //@line 18479
   HEAP32[$52 >> 2] = $4; //@line 18480
   sp = STACKTOP; //@line 18481
   return;
  }
  ___async_unwind = 0; //@line 18484
  HEAP32[$ReallocAsyncCtx12 >> 2] = 480; //@line 18485
  $49 = $ReallocAsyncCtx12 + 4 | 0; //@line 18486
  HEAP32[$49 >> 2] = $8; //@line 18487
  $50 = $ReallocAsyncCtx12 + 8 | 0; //@line 18488
  HEAP32[$50 >> 2] = $14; //@line 18489
  $51 = $ReallocAsyncCtx12 + 12 | 0; //@line 18490
  HEAP32[$51 >> 2] = $2; //@line 18491
  $52 = $ReallocAsyncCtx12 + 16 | 0; //@line 18492
  HEAP32[$52 >> 2] = $4; //@line 18493
  sp = STACKTOP; //@line 18494
  return;
 }
 $27 = $2 + 1240 | 0; //@line 18497
 $28 = HEAP32[$27 >> 2] | 0; //@line 18498
 if (!$28) {
  $40 = HEAP32[229] | 0; //@line 18502
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(28) | 0; //@line 18503
  FUNCTION_TABLE_vii[$40 & 31]($25, $8); //@line 18504
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 479; //@line 18507
   $41 = $ReallocAsyncCtx11 + 4 | 0; //@line 18508
   HEAP32[$41 >> 2] = $2; //@line 18509
   $42 = $ReallocAsyncCtx11 + 8 | 0; //@line 18510
   HEAP32[$42 >> 2] = $4; //@line 18511
   $43 = $ReallocAsyncCtx11 + 12 | 0; //@line 18512
   HEAP32[$43 >> 2] = $24; //@line 18513
   $44 = $ReallocAsyncCtx11 + 16 | 0; //@line 18514
   HEAP32[$44 >> 2] = $27; //@line 18515
   $45 = $ReallocAsyncCtx11 + 20 | 0; //@line 18516
   HEAP32[$45 >> 2] = $8; //@line 18517
   $46 = $ReallocAsyncCtx11 + 24 | 0; //@line 18518
   HEAP32[$46 >> 2] = $14; //@line 18519
   sp = STACKTOP; //@line 18520
   return;
  }
  ___async_unwind = 0; //@line 18523
  HEAP32[$ReallocAsyncCtx11 >> 2] = 479; //@line 18524
  $41 = $ReallocAsyncCtx11 + 4 | 0; //@line 18525
  HEAP32[$41 >> 2] = $2; //@line 18526
  $42 = $ReallocAsyncCtx11 + 8 | 0; //@line 18527
  HEAP32[$42 >> 2] = $4; //@line 18528
  $43 = $ReallocAsyncCtx11 + 12 | 0; //@line 18529
  HEAP32[$43 >> 2] = $24; //@line 18530
  $44 = $ReallocAsyncCtx11 + 16 | 0; //@line 18531
  HEAP32[$44 >> 2] = $27; //@line 18532
  $45 = $ReallocAsyncCtx11 + 20 | 0; //@line 18533
  HEAP32[$45 >> 2] = $8; //@line 18534
  $46 = $ReallocAsyncCtx11 + 24 | 0; //@line 18535
  HEAP32[$46 >> 2] = $14; //@line 18536
  sp = STACKTOP; //@line 18537
  return;
 } else {
  $31 = HEAP32[$28 + 8 >> 2] | 0; //@line 18541
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 18542
  FUNCTION_TABLE_vi[$31 & 1023]($25); //@line 18543
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 478; //@line 18546
   $32 = $ReallocAsyncCtx10 + 4 | 0; //@line 18547
   HEAP32[$32 >> 2] = $24; //@line 18548
   $33 = $ReallocAsyncCtx10 + 8 | 0; //@line 18549
   HEAP32[$33 >> 2] = $2; //@line 18550
   $34 = $ReallocAsyncCtx10 + 12 | 0; //@line 18551
   HEAP32[$34 >> 2] = $4; //@line 18552
   $35 = $ReallocAsyncCtx10 + 16 | 0; //@line 18553
   HEAP32[$35 >> 2] = $27; //@line 18554
   $36 = $ReallocAsyncCtx10 + 20 | 0; //@line 18555
   HEAP32[$36 >> 2] = $8; //@line 18556
   $37 = $ReallocAsyncCtx10 + 24 | 0; //@line 18557
   HEAP32[$37 >> 2] = $14; //@line 18558
   $38 = $ReallocAsyncCtx10 + 28 | 0; //@line 18559
   HEAP32[$38 >> 2] = $25; //@line 18560
   sp = STACKTOP; //@line 18561
   return;
  }
  ___async_unwind = 0; //@line 18564
  HEAP32[$ReallocAsyncCtx10 >> 2] = 478; //@line 18565
  $32 = $ReallocAsyncCtx10 + 4 | 0; //@line 18566
  HEAP32[$32 >> 2] = $24; //@line 18567
  $33 = $ReallocAsyncCtx10 + 8 | 0; //@line 18568
  HEAP32[$33 >> 2] = $2; //@line 18569
  $34 = $ReallocAsyncCtx10 + 12 | 0; //@line 18570
  HEAP32[$34 >> 2] = $4; //@line 18571
  $35 = $ReallocAsyncCtx10 + 16 | 0; //@line 18572
  HEAP32[$35 >> 2] = $27; //@line 18573
  $36 = $ReallocAsyncCtx10 + 20 | 0; //@line 18574
  HEAP32[$36 >> 2] = $8; //@line 18575
  $37 = $ReallocAsyncCtx10 + 24 | 0; //@line 18576
  HEAP32[$37 >> 2] = $14; //@line 18577
  $38 = $ReallocAsyncCtx10 + 28 | 0; //@line 18578
  HEAP32[$38 >> 2] = $25; //@line 18579
  sp = STACKTOP; //@line 18580
  return;
 }
}
function _mbedtls_cipher_cmac_update($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$06984 = 0, $$06984$us = 0, $$070 = 0, $$073 = 0, $$09$i = 0, $$09$i75 = 0, $$1$lcssa = 0, $$174$lcssa = 0, $$17481 = 0, $$182 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $22 = 0, $26 = 0, $3 = 0, $38 = 0, $43 = 0, $46 = 0, $5 = 0, $58 = 0, $62 = 0, $66 = 0, $79 = 0, $80 = 0, $81 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3671
 STACKTOP = STACKTOP + 16 | 0; //@line 3672
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 3672
 $3 = sp; //@line 3673
 if (!$0) {
  $$0 = -24832; //@line 3676
  STACKTOP = sp; //@line 3677
  return $$0 | 0; //@line 3677
 }
 $5 = HEAP32[$0 >> 2] | 0; //@line 3679
 if (($1 | 0) == 0 | ($5 | 0) == 0) {
  $$0 = -24832; //@line 3684
  STACKTOP = sp; //@line 3685
  return $$0 | 0; //@line 3685
 }
 $9 = HEAP32[$0 + 64 >> 2] | 0; //@line 3688
 if (!$9) {
  $$0 = -24832; //@line 3691
  STACKTOP = sp; //@line 3692
  return $$0 | 0; //@line 3692
 }
 $12 = HEAP32[$5 + 24 >> 2] | 0; //@line 3695
 $13 = $9 + 32 | 0; //@line 3696
 $14 = HEAP32[$13 >> 2] | 0; //@line 3697
 do {
  if (!$14) {
   $$070 = $1; //@line 3701
   $$073 = $2; //@line 3701
  } else {
   $16 = $12 - $14 | 0; //@line 3703
   if ($16 >>> 0 < $2 >>> 0) {
    _memcpy($9 + 16 + $14 | 0, $1 | 0, $16 | 0) | 0; //@line 3707
    if ($12 | 0) {
     $$09$i = 0; //@line 3710
     do {
      $22 = $9 + $$09$i | 0; //@line 3714
      HEAP8[$22 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$9 + 16 + $$09$i >> 0]; //@line 3717
      $$09$i = $$09$i + 1 | 0; //@line 3718
     } while (($$09$i | 0) != ($12 | 0));
    }
    $AsyncCtx5 = _emscripten_alloc_async_context(40, sp) | 0; //@line 3727
    $26 = _mbedtls_cipher_update($0, $9, $12, $9, $3) | 0; //@line 3728
    if (___async) {
     HEAP32[$AsyncCtx5 >> 2] = 585; //@line 3731
     HEAP32[$AsyncCtx5 + 4 >> 2] = $13; //@line 3733
     HEAP32[$AsyncCtx5 + 8 >> 2] = $12; //@line 3735
     HEAP32[$AsyncCtx5 + 12 >> 2] = $1; //@line 3737
     HEAP32[$AsyncCtx5 + 16 >> 2] = $2; //@line 3739
     HEAP32[$AsyncCtx5 + 20 >> 2] = $3; //@line 3741
     HEAP32[$AsyncCtx5 + 24 >> 2] = $0; //@line 3743
     HEAP32[$AsyncCtx5 + 28 >> 2] = $9; //@line 3745
     HEAP32[$AsyncCtx5 + 32 >> 2] = $3; //@line 3747
     HEAP32[$AsyncCtx5 + 36 >> 2] = $9; //@line 3749
     sp = STACKTOP; //@line 3750
     STACKTOP = sp; //@line 3751
     return 0; //@line 3751
    }
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 3753
    if (!$26) {
     $38 = $12 - (HEAP32[$13 >> 2] | 0) | 0; //@line 3757
     HEAP32[$13 >> 2] = 0; //@line 3760
     $$070 = $1 + $38 | 0; //@line 3761
     $$073 = $2 - $38 | 0; //@line 3761
     break;
    } else {
     $$0 = $26; //@line 3764
     STACKTOP = sp; //@line 3765
     return $$0 | 0; //@line 3765
    }
   } else {
    $$070 = $1; //@line 3768
    $$073 = $2; //@line 3768
   }
  }
 } while (0);
 $43 = (($12 + -1 + $$073 | 0) >>> 0) / ($12 >>> 0) | 0; //@line 3774
 L24 : do {
  if ($43 >>> 0 > 1) {
   if (!$12) {
    $$06984$us = 1; //@line 3780
    while (1) {
     $AsyncCtx2 = _emscripten_alloc_async_context(44, sp) | 0; //@line 3782
     $46 = _mbedtls_cipher_update($0, $9, 0, $9, $3) | 0; //@line 3783
     if (___async) {
      label = 15; //@line 3786
      break;
     }
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3789
     if ($46 | 0) {
      $$0 = $46; //@line 3792
      label = 26; //@line 3793
      break;
     }
     $58 = $$06984$us + 1 | 0; //@line 3796
     if ($58 >>> 0 < $43 >>> 0) {
      $$06984$us = $58; //@line 3799
     } else {
      $$1$lcssa = $$070; //@line 3801
      $$174$lcssa = $$073; //@line 3801
      break L24;
     }
    }
    if ((label | 0) == 15) {
     HEAP32[$AsyncCtx2 >> 2] = 586; //@line 3806
     HEAP32[$AsyncCtx2 + 4 >> 2] = $$06984$us; //@line 3808
     HEAP32[$AsyncCtx2 + 8 >> 2] = $43; //@line 3810
     HEAP32[$AsyncCtx2 + 12 >> 2] = $3; //@line 3812
     HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 3814
     HEAP32[$AsyncCtx2 + 20 >> 2] = $9; //@line 3816
     HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 3818
     HEAP32[$AsyncCtx2 + 28 >> 2] = $$073; //@line 3820
     HEAP32[$AsyncCtx2 + 32 >> 2] = $$070; //@line 3822
     HEAP32[$AsyncCtx2 + 36 >> 2] = $13; //@line 3824
     HEAP32[$AsyncCtx2 + 40 >> 2] = $9; //@line 3826
     sp = STACKTOP; //@line 3827
     STACKTOP = sp; //@line 3828
     return 0; //@line 3828
    } else if ((label | 0) == 26) {
     STACKTOP = sp; //@line 3831
     return $$0 | 0; //@line 3831
    }
   } else {
    $$06984 = 1; //@line 3834
    $$17481 = $$073; //@line 3834
    $$182 = $$070; //@line 3834
   }
   while (1) {
    $$09$i75 = 0; //@line 3837
    do {
     $62 = $9 + $$09$i75 | 0; //@line 3841
     HEAP8[$62 >> 0] = HEAP8[$62 >> 0] ^ HEAP8[$$182 + $$09$i75 >> 0]; //@line 3844
     $$09$i75 = $$09$i75 + 1 | 0; //@line 3845
    } while (($$09$i75 | 0) != ($12 | 0));
    $AsyncCtx = _emscripten_alloc_async_context(48, sp) | 0; //@line 3853
    $66 = _mbedtls_cipher_update($0, $9, $12, $9, $3) | 0; //@line 3854
    if (___async) {
     label = 21; //@line 3857
     break;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3860
    if ($66 | 0) {
     $$0 = $66; //@line 3863
     label = 26; //@line 3864
     break;
    }
    $79 = $$17481 - $12 | 0; //@line 3867
    $80 = $$182 + $12 | 0; //@line 3868
    $81 = $$06984 + 1 | 0; //@line 3869
    if ($81 >>> 0 < $43 >>> 0) {
     $$06984 = $81; //@line 3872
     $$17481 = $79; //@line 3872
     $$182 = $80; //@line 3872
    } else {
     $$1$lcssa = $80; //@line 3874
     $$174$lcssa = $79; //@line 3874
     break L24;
    }
   }
   if ((label | 0) == 21) {
    HEAP32[$AsyncCtx >> 2] = 587; //@line 3879
    HEAP32[$AsyncCtx + 4 >> 2] = $$17481; //@line 3881
    HEAP32[$AsyncCtx + 8 >> 2] = $12; //@line 3883
    HEAP32[$AsyncCtx + 12 >> 2] = $$182; //@line 3885
    HEAP32[$AsyncCtx + 16 >> 2] = $$06984; //@line 3887
    HEAP32[$AsyncCtx + 20 >> 2] = $43; //@line 3889
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 3891
    HEAP32[$AsyncCtx + 28 >> 2] = $13; //@line 3893
    HEAP32[$AsyncCtx + 32 >> 2] = $9; //@line 3895
    HEAP32[$AsyncCtx + 36 >> 2] = $0; //@line 3897
    HEAP32[$AsyncCtx + 40 >> 2] = $9; //@line 3899
    HEAP32[$AsyncCtx + 44 >> 2] = $3; //@line 3901
    sp = STACKTOP; //@line 3902
    STACKTOP = sp; //@line 3903
    return 0; //@line 3903
   } else if ((label | 0) == 26) {
    STACKTOP = sp; //@line 3906
    return $$0 | 0; //@line 3906
   }
  } else {
   $$1$lcssa = $$070; //@line 3909
   $$174$lcssa = $$073; //@line 3909
  }
 } while (0);
 if (!$$174$lcssa) {
  $$0 = 0; //@line 3914
  STACKTOP = sp; //@line 3915
  return $$0 | 0; //@line 3915
 }
 _memcpy((HEAP32[$13 >> 2] | 0) + ($9 + 16) | 0, $$1$lcssa | 0, $$174$lcssa | 0) | 0; //@line 3919
 HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + $$174$lcssa; //@line 3922
 $$0 = 0; //@line 3923
 STACKTOP = sp; //@line 3924
 return $$0 | 0; //@line 3924
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i = 0, $$pre$i = 0, $11 = 0, $18 = 0, $21 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $4 = 0, $43 = 0, $46 = 0, $5 = 0, $56 = 0, $59 = 0, $6 = 0, $64 = 0, $67 = 0, $7 = 0, $71 = 0, $74 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 7002
 STACKTOP = STACKTOP + 48 | 0; //@line 7003
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 7003
 $4 = sp + 16 | 0; //@line 7004
 $5 = sp; //@line 7005
 $6 = $1 + 12 | 0; //@line 7006
 $7 = HEAP32[$6 >> 2] | 0; //@line 7007
 do {
  if (!$7) {
   $9 = $5 + 12 | 0; //@line 7011
   HEAP32[$9 >> 2] = 0; //@line 7012
   $30 = 0; //@line 7013
   $35 = $9; //@line 7013
  } else {
   $11 = HEAP32[$7 + 4 >> 2] | 0; //@line 7016
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 7017
   FUNCTION_TABLE_vii[$11 & 31]($5, $1); //@line 7018
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 220; //@line 7021
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 7023
    HEAP8[$AsyncCtx + 8 >> 0] = $2; //@line 7025
    HEAP8[$AsyncCtx + 9 >> 0] = $3; //@line 7027
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 7029
    HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 7031
    HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 7033
    sp = STACKTOP; //@line 7034
    STACKTOP = sp; //@line 7035
    return 0; //@line 7035
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 7037
   $$pre$i = HEAP32[$6 >> 2] | 0; //@line 7038
   $18 = $5 + 12 | 0; //@line 7039
   HEAP32[$18 >> 2] = $$pre$i; //@line 7040
   if (!$$pre$i) {
    $30 = 0; //@line 7043
    $35 = $18; //@line 7043
   } else {
    $21 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 7047
    $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 7048
    FUNCTION_TABLE_vii[$21 & 31]($4, $5); //@line 7049
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 221; //@line 7052
     HEAP32[$AsyncCtx2 + 4 >> 2] = $18; //@line 7054
     HEAP32[$AsyncCtx2 + 8 >> 2] = $18; //@line 7056
     HEAP32[$AsyncCtx2 + 12 >> 2] = $4; //@line 7058
     HEAP8[$AsyncCtx2 + 16 >> 0] = $2; //@line 7060
     HEAP8[$AsyncCtx2 + 17 >> 0] = $3; //@line 7062
     HEAP32[$AsyncCtx2 + 20 >> 2] = $0; //@line 7064
     HEAP32[$AsyncCtx2 + 24 >> 2] = $5; //@line 7066
     sp = STACKTOP; //@line 7067
     STACKTOP = sp; //@line 7068
     return 0; //@line 7068
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7070
     $30 = HEAP32[$18 >> 2] | 0; //@line 7072
     $35 = $18; //@line 7072
     break;
    }
   }
  }
 } while (0);
 $29 = $4 + 12 | 0; //@line 7078
 HEAP32[$29 >> 2] = $30; //@line 7079
 $31 = $4 + 16 | 0; //@line 7080
 HEAP8[$31 >> 0] = $2; //@line 7081
 HEAP8[$4 + 17 >> 0] = $3; //@line 7083
 $AsyncCtx18 = _emscripten_alloc_async_context(32, sp) | 0; //@line 7084
 $33 = _equeue_alloc($0, 20) | 0; //@line 7085
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 222; //@line 7088
  HEAP32[$AsyncCtx18 + 4 >> 2] = $35; //@line 7090
  HEAP32[$AsyncCtx18 + 8 >> 2] = $5; //@line 7092
  HEAP32[$AsyncCtx18 + 12 >> 2] = $4; //@line 7094
  HEAP32[$AsyncCtx18 + 16 >> 2] = $29; //@line 7096
  HEAP32[$AsyncCtx18 + 20 >> 2] = $29; //@line 7098
  HEAP32[$AsyncCtx18 + 24 >> 2] = $31; //@line 7100
  HEAP32[$AsyncCtx18 + 28 >> 2] = $0; //@line 7102
  sp = STACKTOP; //@line 7103
  STACKTOP = sp; //@line 7104
  return 0; //@line 7104
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 7106
 do {
  if (!$33) {
   $$0$i = 0; //@line 7110
  } else {
   $43 = HEAP32[$29 >> 2] | 0; //@line 7112
   do {
    if (!$43) {
     $56 = 0; //@line 7116
    } else {
     $46 = HEAP32[$43 + 4 >> 2] | 0; //@line 7119
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 7120
     FUNCTION_TABLE_vii[$46 & 31]($33, $4); //@line 7121
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 223; //@line 7124
      HEAP32[$AsyncCtx5 + 4 >> 2] = $29; //@line 7126
      HEAP32[$AsyncCtx5 + 8 >> 2] = $33; //@line 7128
      HEAP32[$AsyncCtx5 + 12 >> 2] = $31; //@line 7130
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 7132
      HEAP32[$AsyncCtx5 + 20 >> 2] = $29; //@line 7134
      HEAP32[$AsyncCtx5 + 24 >> 2] = $35; //@line 7136
      HEAP32[$AsyncCtx5 + 28 >> 2] = $4; //@line 7138
      HEAP32[$AsyncCtx5 + 32 >> 2] = $5; //@line 7140
      sp = STACKTOP; //@line 7141
      STACKTOP = sp; //@line 7142
      return 0; //@line 7142
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 7144
      $56 = HEAP32[$29 >> 2] | 0; //@line 7146
      break;
     }
    }
   } while (0);
   HEAP32[$33 + 12 >> 2] = $56; //@line 7152
   HEAP16[$33 + 16 >> 1] = HEAP16[$31 >> 1] | 0; //@line 7155
   _equeue_event_dtor($33, 224); //@line 7156
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7157
   $59 = _equeue_post($0, 225, $33) | 0; //@line 7158
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 226; //@line 7161
    HEAP32[$AsyncCtx15 + 4 >> 2] = $29; //@line 7163
    HEAP32[$AsyncCtx15 + 8 >> 2] = $35; //@line 7165
    HEAP32[$AsyncCtx15 + 12 >> 2] = $4; //@line 7167
    HEAP32[$AsyncCtx15 + 16 >> 2] = $5; //@line 7169
    sp = STACKTOP; //@line 7170
    STACKTOP = sp; //@line 7171
    return 0; //@line 7171
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 7173
    $$0$i = $59; //@line 7174
    break;
   }
  }
 } while (0);
 $64 = HEAP32[$29 >> 2] | 0; //@line 7179
 do {
  if ($64 | 0) {
   $67 = HEAP32[$64 + 8 >> 2] | 0; //@line 7184
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7185
   FUNCTION_TABLE_vi[$67 & 1023]($4); //@line 7186
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 227; //@line 7189
    HEAP32[$AsyncCtx8 + 4 >> 2] = $35; //@line 7191
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 7193
    HEAP32[$AsyncCtx8 + 12 >> 2] = $5; //@line 7195
    sp = STACKTOP; //@line 7196
    STACKTOP = sp; //@line 7197
    return 0; //@line 7197
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 7199
    break;
   }
  }
 } while (0);
 $71 = HEAP32[$35 >> 2] | 0; //@line 7204
 if (!$71) {
  STACKTOP = sp; //@line 7207
  return $$0$i | 0; //@line 7207
 }
 $74 = HEAP32[$71 + 8 >> 2] | 0; //@line 7210
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7211
 FUNCTION_TABLE_vi[$74 & 1023]($5); //@line 7212
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 228; //@line 7215
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 7217
  sp = STACKTOP; //@line 7218
  STACKTOP = sp; //@line 7219
  return 0; //@line 7219
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 7221
 STACKTOP = sp; //@line 7222
 return $$0$i | 0; //@line 7222
}
function _mbedtls_cipher_cmac_update__async_cb_375($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$09$i75 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $66 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30593
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30595
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30597
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30599
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30601
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30603
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30605
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30607
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30609
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 30611
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30613
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 30616
  $66 = ___async_retval; //@line 30617
  HEAP32[$66 >> 2] = $$0; //@line 30618
  return;
 }
 $22 = $4 - (HEAP32[$2 >> 2] | 0) | 0; //@line 30622
 $23 = $6 + $22 | 0; //@line 30623
 $24 = $8 - $22 | 0; //@line 30624
 HEAP32[$2 >> 2] = 0; //@line 30625
 $27 = (($4 + -1 + $24 | 0) >>> 0) / ($4 >>> 0) | 0; //@line 30628
 if ($27 >>> 0 <= 1) {
  if (!$24) {
   $$0 = 0; //@line 30633
   $66 = ___async_retval; //@line 30634
   HEAP32[$66 >> 2] = $$0; //@line 30635
   return;
  }
  _memcpy((HEAP32[$2 >> 2] | 0) + ($18 + 16) | 0, $23 | 0, $24 | 0) | 0; //@line 30640
  HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $24; //@line 30643
  $$0 = 0; //@line 30644
  $66 = ___async_retval; //@line 30645
  HEAP32[$66 >> 2] = $$0; //@line 30646
  return;
 }
 if (!$4) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 30651
  $30 = _mbedtls_cipher_update($12, $14, 0, $14, $16) | 0; //@line 30652
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 586; //@line 30655
   $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 30656
   HEAP32[$31 >> 2] = 1; //@line 30657
   $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 30658
   HEAP32[$32 >> 2] = $27; //@line 30659
   $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 30660
   HEAP32[$33 >> 2] = $10; //@line 30661
   $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 30662
   HEAP32[$34 >> 2] = $12; //@line 30663
   $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 30664
   HEAP32[$35 >> 2] = $14; //@line 30665
   $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 30666
   HEAP32[$36 >> 2] = $16; //@line 30667
   $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 30668
   HEAP32[$37 >> 2] = $24; //@line 30669
   $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 30670
   HEAP32[$38 >> 2] = $23; //@line 30671
   $39 = $ReallocAsyncCtx2 + 36 | 0; //@line 30672
   HEAP32[$39 >> 2] = $2; //@line 30673
   $40 = $ReallocAsyncCtx2 + 40 | 0; //@line 30674
   HEAP32[$40 >> 2] = $18; //@line 30675
   sp = STACKTOP; //@line 30676
   return;
  }
  HEAP32[___async_retval >> 2] = $30; //@line 30680
  ___async_unwind = 0; //@line 30681
  HEAP32[$ReallocAsyncCtx2 >> 2] = 586; //@line 30682
  $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 30683
  HEAP32[$31 >> 2] = 1; //@line 30684
  $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 30685
  HEAP32[$32 >> 2] = $27; //@line 30686
  $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 30687
  HEAP32[$33 >> 2] = $10; //@line 30688
  $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 30689
  HEAP32[$34 >> 2] = $12; //@line 30690
  $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 30691
  HEAP32[$35 >> 2] = $14; //@line 30692
  $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 30693
  HEAP32[$36 >> 2] = $16; //@line 30694
  $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 30695
  HEAP32[$37 >> 2] = $24; //@line 30696
  $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 30697
  HEAP32[$38 >> 2] = $23; //@line 30698
  $39 = $ReallocAsyncCtx2 + 36 | 0; //@line 30699
  HEAP32[$39 >> 2] = $2; //@line 30700
  $40 = $ReallocAsyncCtx2 + 40 | 0; //@line 30701
  HEAP32[$40 >> 2] = $18; //@line 30702
  sp = STACKTOP; //@line 30703
  return;
 }
 $$09$i75 = 0; //@line 30706
 do {
  $44 = $18 + $$09$i75 | 0; //@line 30710
  HEAP8[$44 >> 0] = HEAP8[$44 >> 0] ^ HEAP8[$23 + $$09$i75 >> 0]; //@line 30713
  $$09$i75 = $$09$i75 + 1 | 0; //@line 30714
 } while (($$09$i75 | 0) != ($4 | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 30722
 $48 = _mbedtls_cipher_update($12, $14, $4, $14, $16) | 0; //@line 30723
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 587; //@line 30726
  $49 = $ReallocAsyncCtx + 4 | 0; //@line 30727
  HEAP32[$49 >> 2] = $24; //@line 30728
  $50 = $ReallocAsyncCtx + 8 | 0; //@line 30729
  HEAP32[$50 >> 2] = $4; //@line 30730
  $51 = $ReallocAsyncCtx + 12 | 0; //@line 30731
  HEAP32[$51 >> 2] = $23; //@line 30732
  $52 = $ReallocAsyncCtx + 16 | 0; //@line 30733
  HEAP32[$52 >> 2] = 1; //@line 30734
  $53 = $ReallocAsyncCtx + 20 | 0; //@line 30735
  HEAP32[$53 >> 2] = $27; //@line 30736
  $54 = $ReallocAsyncCtx + 24 | 0; //@line 30737
  HEAP32[$54 >> 2] = $10; //@line 30738
  $55 = $ReallocAsyncCtx + 28 | 0; //@line 30739
  HEAP32[$55 >> 2] = $2; //@line 30740
  $56 = $ReallocAsyncCtx + 32 | 0; //@line 30741
  HEAP32[$56 >> 2] = $18; //@line 30742
  $57 = $ReallocAsyncCtx + 36 | 0; //@line 30743
  HEAP32[$57 >> 2] = $12; //@line 30744
  $58 = $ReallocAsyncCtx + 40 | 0; //@line 30745
  HEAP32[$58 >> 2] = $14; //@line 30746
  $59 = $ReallocAsyncCtx + 44 | 0; //@line 30747
  HEAP32[$59 >> 2] = $16; //@line 30748
  sp = STACKTOP; //@line 30749
  return;
 }
 HEAP32[___async_retval >> 2] = $48; //@line 30753
 ___async_unwind = 0; //@line 30754
 HEAP32[$ReallocAsyncCtx >> 2] = 587; //@line 30755
 $49 = $ReallocAsyncCtx + 4 | 0; //@line 30756
 HEAP32[$49 >> 2] = $24; //@line 30757
 $50 = $ReallocAsyncCtx + 8 | 0; //@line 30758
 HEAP32[$50 >> 2] = $4; //@line 30759
 $51 = $ReallocAsyncCtx + 12 | 0; //@line 30760
 HEAP32[$51 >> 2] = $23; //@line 30761
 $52 = $ReallocAsyncCtx + 16 | 0; //@line 30762
 HEAP32[$52 >> 2] = 1; //@line 30763
 $53 = $ReallocAsyncCtx + 20 | 0; //@line 30764
 HEAP32[$53 >> 2] = $27; //@line 30765
 $54 = $ReallocAsyncCtx + 24 | 0; //@line 30766
 HEAP32[$54 >> 2] = $10; //@line 30767
 $55 = $ReallocAsyncCtx + 28 | 0; //@line 30768
 HEAP32[$55 >> 2] = $2; //@line 30769
 $56 = $ReallocAsyncCtx + 32 | 0; //@line 30770
 HEAP32[$56 >> 2] = $18; //@line 30771
 $57 = $ReallocAsyncCtx + 36 | 0; //@line 30772
 HEAP32[$57 >> 2] = $12; //@line 30773
 $58 = $ReallocAsyncCtx + 40 | 0; //@line 30774
 HEAP32[$58 >> 2] = $14; //@line 30775
 $59 = $ReallocAsyncCtx + 44 | 0; //@line 30776
 HEAP32[$59 >> 2] = $16; //@line 30777
 sp = STACKTOP; //@line 30778
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $13 = 0, $17 = 0, $21 = 0, $23 = 0, $27 = 0, $3 = 0, $31 = 0, $33 = 0, $37 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx3 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx46 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 1270
 HEAP32[$0 >> 2] = 560; //@line 1271
 $1 = $0 + 1240 | 0; //@line 1272
 HEAP32[$1 >> 2] = 10172; //@line 1273
 __ZN4mbed6Ticker6detachEv($1); //@line 1274
 $3 = HEAP32[$0 + 1292 >> 2] | 0; //@line 1276
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 1282
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 1283
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 1280 | 0); //@line 1284
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 68; //@line 1287
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1289
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 1291
    sp = STACKTOP; //@line 1292
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 1295
    break;
   }
  }
 } while (0);
 $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1300
 __ZN4mbed10TimerEventD2Ev($1); //@line 1301
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 69; //@line 1304
  HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 1306
  sp = STACKTOP; //@line 1307
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 1310
 $11 = $0 + 1176 | 0; //@line 1311
 HEAP32[$11 >> 2] = 10172; //@line 1312
 __ZN4mbed6Ticker6detachEv($11); //@line 1313
 $13 = HEAP32[$0 + 1228 >> 2] | 0; //@line 1315
 do {
  if ($13 | 0) {
   $17 = HEAP32[$13 + 8 >> 2] | 0; //@line 1321
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 1322
   FUNCTION_TABLE_vi[$17 & 1023]($0 + 1216 | 0); //@line 1323
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 70; //@line 1326
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 1328
    HEAP32[$AsyncCtx3 + 8 >> 2] = $11; //@line 1330
    sp = STACKTOP; //@line 1331
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 1334
    break;
   }
  }
 } while (0);
 $AsyncCtx20 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1339
 __ZN4mbed10TimerEventD2Ev($11); //@line 1340
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 71; //@line 1343
  HEAP32[$AsyncCtx20 + 4 >> 2] = $0; //@line 1345
  sp = STACKTOP; //@line 1346
  return;
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 1349
 $21 = $0 + 1112 | 0; //@line 1350
 HEAP32[$21 >> 2] = 10172; //@line 1351
 __ZN4mbed6Ticker6detachEv($21); //@line 1352
 $23 = HEAP32[$0 + 1164 >> 2] | 0; //@line 1354
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 1360
   $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 1361
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 1152 | 0); //@line 1362
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 72; //@line 1365
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 1367
    HEAP32[$AsyncCtx7 + 8 >> 2] = $21; //@line 1369
    sp = STACKTOP; //@line 1370
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 1373
    break;
   }
  }
 } while (0);
 $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1378
 __ZN4mbed10TimerEventD2Ev($21); //@line 1379
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 73; //@line 1382
  HEAP32[$AsyncCtx17 + 4 >> 2] = $0; //@line 1384
  sp = STACKTOP; //@line 1385
  return;
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 1388
 $31 = $0 + 1048 | 0; //@line 1389
 HEAP32[$31 >> 2] = 10172; //@line 1390
 __ZN4mbed6Ticker6detachEv($31); //@line 1391
 $33 = HEAP32[$0 + 1100 >> 2] | 0; //@line 1393
 do {
  if ($33 | 0) {
   $37 = HEAP32[$33 + 8 >> 2] | 0; //@line 1399
   $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 1400
   FUNCTION_TABLE_vi[$37 & 1023]($0 + 1088 | 0); //@line 1401
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 74; //@line 1404
    HEAP32[$AsyncCtx11 + 4 >> 2] = $31; //@line 1406
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 1408
    sp = STACKTOP; //@line 1409
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 1412
    break;
   }
  }
 } while (0);
 $AsyncCtx14 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1417
 __ZN4mbed10TimerEventD2Ev($31); //@line 1418
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 75; //@line 1421
  HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 1423
  sp = STACKTOP; //@line 1424
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 1427
 $AsyncCtx46 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1429
 __ZN4mbed11InterruptInD2Ev($0 + 412 | 0); //@line 1430
 if (___async) {
  HEAP32[$AsyncCtx46 >> 2] = 76; //@line 1433
  HEAP32[$AsyncCtx46 + 4 >> 2] = $0; //@line 1435
  sp = STACKTOP; //@line 1436
  return;
 }
 _emscripten_free_async_context($AsyncCtx46 | 0); //@line 1439
 $AsyncCtx42 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1441
 __ZN4mbed11InterruptInD2Ev($0 + 340 | 0); //@line 1442
 if (___async) {
  HEAP32[$AsyncCtx42 >> 2] = 77; //@line 1445
  HEAP32[$AsyncCtx42 + 4 >> 2] = $0; //@line 1447
  sp = STACKTOP; //@line 1448
  return;
 }
 _emscripten_free_async_context($AsyncCtx42 | 0); //@line 1451
 $AsyncCtx38 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1453
 __ZN4mbed11InterruptInD2Ev($0 + 268 | 0); //@line 1454
 if (___async) {
  HEAP32[$AsyncCtx38 >> 2] = 78; //@line 1457
  HEAP32[$AsyncCtx38 + 4 >> 2] = $0; //@line 1459
  sp = STACKTOP; //@line 1460
  return;
 }
 _emscripten_free_async_context($AsyncCtx38 | 0); //@line 1463
 $AsyncCtx34 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1465
 __ZN4mbed11InterruptInD2Ev($0 + 196 | 0); //@line 1466
 if (___async) {
  HEAP32[$AsyncCtx34 >> 2] = 79; //@line 1469
  HEAP32[$AsyncCtx34 + 4 >> 2] = $0; //@line 1471
  sp = STACKTOP; //@line 1472
  return;
 }
 _emscripten_free_async_context($AsyncCtx34 | 0); //@line 1475
 $AsyncCtx30 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1477
 __ZN4mbed11InterruptInD2Ev($0 + 124 | 0); //@line 1478
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 80; //@line 1481
  HEAP32[$AsyncCtx30 + 4 >> 2] = $0; //@line 1483
  sp = STACKTOP; //@line 1484
  return;
 }
 _emscripten_free_async_context($AsyncCtx30 | 0); //@line 1487
 $AsyncCtx26 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1489
 __ZN4mbed11InterruptInD2Ev($0 + 52 | 0); //@line 1490
 if (___async) {
  HEAP32[$AsyncCtx26 >> 2] = 81; //@line 1493
  sp = STACKTOP; //@line 1494
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx26 | 0); //@line 1497
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$pre$i = 0, $10 = 0, $16 = 0, $19 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $39 = 0, $4 = 0, $42 = 0, $5 = 0, $52 = 0, $55 = 0, $6 = 0, $60 = 0, $63 = 0, $67 = 0, $70 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 6776
 STACKTOP = STACKTOP + 48 | 0; //@line 6777
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 6777
 $3 = sp + 16 | 0; //@line 6778
 $4 = sp; //@line 6779
 $5 = $1 + 12 | 0; //@line 6780
 $6 = HEAP32[$5 >> 2] | 0; //@line 6781
 do {
  if (!$6) {
   $8 = $4 + 12 | 0; //@line 6785
   HEAP32[$8 >> 2] = 0; //@line 6786
   $27 = 0; //@line 6787
   $31 = $8; //@line 6787
  } else {
   $10 = HEAP32[$6 + 4 >> 2] | 0; //@line 6790
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 6791
   FUNCTION_TABLE_vii[$10 & 31]($4, $1); //@line 6792
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 211; //@line 6795
    HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 6797
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 6799
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 6801
    HEAP32[$AsyncCtx + 16 >> 2] = $4; //@line 6803
    HEAP32[$AsyncCtx + 20 >> 2] = $5; //@line 6805
    sp = STACKTOP; //@line 6806
    STACKTOP = sp; //@line 6807
    return 0; //@line 6807
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 6809
   $$pre$i = HEAP32[$5 >> 2] | 0; //@line 6810
   $16 = $4 + 12 | 0; //@line 6811
   HEAP32[$16 >> 2] = $$pre$i; //@line 6812
   if (!$$pre$i) {
    $27 = 0; //@line 6815
    $31 = $16; //@line 6815
   } else {
    $19 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 6819
    $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 6820
    FUNCTION_TABLE_vii[$19 & 31]($3, $4); //@line 6821
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 212; //@line 6824
     HEAP32[$AsyncCtx2 + 4 >> 2] = $16; //@line 6826
     HEAP32[$AsyncCtx2 + 8 >> 2] = $16; //@line 6828
     HEAP32[$AsyncCtx2 + 12 >> 2] = $3; //@line 6830
     HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 6832
     HEAP32[$AsyncCtx2 + 20 >> 2] = $0; //@line 6834
     HEAP32[$AsyncCtx2 + 24 >> 2] = $4; //@line 6836
     sp = STACKTOP; //@line 6837
     STACKTOP = sp; //@line 6838
     return 0; //@line 6838
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6840
     $27 = HEAP32[$16 >> 2] | 0; //@line 6842
     $31 = $16; //@line 6842
     break;
    }
   }
  }
 } while (0);
 $26 = $3 + 12 | 0; //@line 6848
 HEAP32[$26 >> 2] = $27; //@line 6849
 $28 = $3 + 16 | 0; //@line 6850
 HEAP32[$28 >> 2] = $2; //@line 6851
 $AsyncCtx18 = _emscripten_alloc_async_context(32, sp) | 0; //@line 6852
 $29 = _equeue_alloc($0, 20) | 0; //@line 6853
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 213; //@line 6856
  HEAP32[$AsyncCtx18 + 4 >> 2] = $31; //@line 6858
  HEAP32[$AsyncCtx18 + 8 >> 2] = $4; //@line 6860
  HEAP32[$AsyncCtx18 + 12 >> 2] = $26; //@line 6862
  HEAP32[$AsyncCtx18 + 16 >> 2] = $28; //@line 6864
  HEAP32[$AsyncCtx18 + 20 >> 2] = $0; //@line 6866
  HEAP32[$AsyncCtx18 + 24 >> 2] = $26; //@line 6868
  HEAP32[$AsyncCtx18 + 28 >> 2] = $3; //@line 6870
  sp = STACKTOP; //@line 6871
  STACKTOP = sp; //@line 6872
  return 0; //@line 6872
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 6874
 do {
  if (!$29) {
   $$0$i = 0; //@line 6878
  } else {
   $39 = HEAP32[$26 >> 2] | 0; //@line 6880
   do {
    if (!$39) {
     $52 = 0; //@line 6884
    } else {
     $42 = HEAP32[$39 + 4 >> 2] | 0; //@line 6887
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 6888
     FUNCTION_TABLE_vii[$42 & 31]($29, $3); //@line 6889
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 214; //@line 6892
      HEAP32[$AsyncCtx5 + 4 >> 2] = $26; //@line 6894
      HEAP32[$AsyncCtx5 + 8 >> 2] = $29; //@line 6896
      HEAP32[$AsyncCtx5 + 12 >> 2] = $28; //@line 6898
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 6900
      HEAP32[$AsyncCtx5 + 20 >> 2] = $26; //@line 6902
      HEAP32[$AsyncCtx5 + 24 >> 2] = $31; //@line 6904
      HEAP32[$AsyncCtx5 + 28 >> 2] = $3; //@line 6906
      HEAP32[$AsyncCtx5 + 32 >> 2] = $4; //@line 6908
      sp = STACKTOP; //@line 6909
      STACKTOP = sp; //@line 6910
      return 0; //@line 6910
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 6912
      $52 = HEAP32[$26 >> 2] | 0; //@line 6914
      break;
     }
    }
   } while (0);
   HEAP32[$29 + 12 >> 2] = $52; //@line 6920
   HEAP32[$29 + 16 >> 2] = HEAP32[$28 >> 2]; //@line 6923
   _equeue_event_dtor($29, 215); //@line 6924
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6925
   $55 = _equeue_post($0, 216, $29) | 0; //@line 6926
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 217; //@line 6929
    HEAP32[$AsyncCtx15 + 4 >> 2] = $26; //@line 6931
    HEAP32[$AsyncCtx15 + 8 >> 2] = $31; //@line 6933
    HEAP32[$AsyncCtx15 + 12 >> 2] = $3; //@line 6935
    HEAP32[$AsyncCtx15 + 16 >> 2] = $4; //@line 6937
    sp = STACKTOP; //@line 6938
    STACKTOP = sp; //@line 6939
    return 0; //@line 6939
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 6941
    $$0$i = $55; //@line 6942
    break;
   }
  }
 } while (0);
 $60 = HEAP32[$26 >> 2] | 0; //@line 6947
 do {
  if ($60 | 0) {
   $63 = HEAP32[$60 + 8 >> 2] | 0; //@line 6952
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6953
   FUNCTION_TABLE_vi[$63 & 1023]($3); //@line 6954
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 218; //@line 6957
    HEAP32[$AsyncCtx8 + 4 >> 2] = $31; //@line 6959
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 6961
    HEAP32[$AsyncCtx8 + 12 >> 2] = $4; //@line 6963
    sp = STACKTOP; //@line 6964
    STACKTOP = sp; //@line 6965
    return 0; //@line 6965
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 6967
    break;
   }
  }
 } while (0);
 $67 = HEAP32[$31 >> 2] | 0; //@line 6972
 if (!$67) {
  STACKTOP = sp; //@line 6975
  return $$0$i | 0; //@line 6975
 }
 $70 = HEAP32[$67 + 8 >> 2] | 0; //@line 6978
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6979
 FUNCTION_TABLE_vi[$70 & 1023]($4); //@line 6980
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 219; //@line 6983
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 6985
  sp = STACKTOP; //@line 6986
  STACKTOP = sp; //@line 6987
  return 0; //@line 6987
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 6989
 STACKTOP = sp; //@line 6990
 return $$0$i | 0; //@line 6990
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_271($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 17449
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17451
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17453
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17457
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17459
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17461
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17463
 $15 = $8 + 12 | 0; //@line 17464
 HEAP32[$8 >> 2] = 7; //@line 17465
 HEAP32[$8 + 4 >> 2] = 0; //@line 17467
 HEAP32[$8 + 8 >> 2] = $2; //@line 17469
 HEAP32[$15 >> 2] = 924; //@line 17470
 $16 = $2 + 1244 | 0; //@line 17471
 if (($16 | 0) == ($8 | 0)) {
  $43 = HEAP32[233] | 0; //@line 17475
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 17476
  FUNCTION_TABLE_vi[$43 & 1023]($8); //@line 17477
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 472; //@line 17480
   $44 = $ReallocAsyncCtx6 + 4 | 0; //@line 17481
   HEAP32[$44 >> 2] = $2; //@line 17482
   $45 = $ReallocAsyncCtx6 + 8 | 0; //@line 17483
   HEAP32[$45 >> 2] = $4; //@line 17484
   $46 = $ReallocAsyncCtx6 + 12 | 0; //@line 17485
   HEAP32[$46 >> 2] = $8; //@line 17486
   $47 = $ReallocAsyncCtx6 + 16 | 0; //@line 17487
   HEAP32[$47 >> 2] = $10; //@line 17488
   $48 = $ReallocAsyncCtx6 + 20 | 0; //@line 17489
   HEAP32[$48 >> 2] = $12; //@line 17490
   $49 = $ReallocAsyncCtx6 + 24 | 0; //@line 17491
   HEAP32[$49 >> 2] = $14; //@line 17492
   sp = STACKTOP; //@line 17493
   return;
  }
  ___async_unwind = 0; //@line 17496
  HEAP32[$ReallocAsyncCtx6 >> 2] = 472; //@line 17497
  $44 = $ReallocAsyncCtx6 + 4 | 0; //@line 17498
  HEAP32[$44 >> 2] = $2; //@line 17499
  $45 = $ReallocAsyncCtx6 + 8 | 0; //@line 17500
  HEAP32[$45 >> 2] = $4; //@line 17501
  $46 = $ReallocAsyncCtx6 + 12 | 0; //@line 17502
  HEAP32[$46 >> 2] = $8; //@line 17503
  $47 = $ReallocAsyncCtx6 + 16 | 0; //@line 17504
  HEAP32[$47 >> 2] = $10; //@line 17505
  $48 = $ReallocAsyncCtx6 + 20 | 0; //@line 17506
  HEAP32[$48 >> 2] = $12; //@line 17507
  $49 = $ReallocAsyncCtx6 + 24 | 0; //@line 17508
  HEAP32[$49 >> 2] = $14; //@line 17509
  sp = STACKTOP; //@line 17510
  return;
 }
 $18 = $2 + 1256 | 0; //@line 17513
 $19 = HEAP32[$18 >> 2] | 0; //@line 17514
 if (!$19) {
  $33 = HEAP32[232] | 0; //@line 17518
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 17519
  FUNCTION_TABLE_vii[$33 & 31]($16, $8); //@line 17520
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 471; //@line 17523
   $34 = $ReallocAsyncCtx5 + 4 | 0; //@line 17524
   HEAP32[$34 >> 2] = $15; //@line 17525
   $35 = $ReallocAsyncCtx5 + 8 | 0; //@line 17526
   HEAP32[$35 >> 2] = $18; //@line 17527
   $36 = $ReallocAsyncCtx5 + 12 | 0; //@line 17528
   HEAP32[$36 >> 2] = $2; //@line 17529
   $37 = $ReallocAsyncCtx5 + 16 | 0; //@line 17530
   HEAP32[$37 >> 2] = $4; //@line 17531
   $38 = $ReallocAsyncCtx5 + 20 | 0; //@line 17532
   HEAP32[$38 >> 2] = $8; //@line 17533
   $39 = $ReallocAsyncCtx5 + 24 | 0; //@line 17534
   HEAP32[$39 >> 2] = $10; //@line 17535
   $40 = $ReallocAsyncCtx5 + 28 | 0; //@line 17536
   HEAP32[$40 >> 2] = $12; //@line 17537
   $41 = $ReallocAsyncCtx5 + 32 | 0; //@line 17538
   HEAP32[$41 >> 2] = $14; //@line 17539
   sp = STACKTOP; //@line 17540
   return;
  }
  ___async_unwind = 0; //@line 17543
  HEAP32[$ReallocAsyncCtx5 >> 2] = 471; //@line 17544
  $34 = $ReallocAsyncCtx5 + 4 | 0; //@line 17545
  HEAP32[$34 >> 2] = $15; //@line 17546
  $35 = $ReallocAsyncCtx5 + 8 | 0; //@line 17547
  HEAP32[$35 >> 2] = $18; //@line 17548
  $36 = $ReallocAsyncCtx5 + 12 | 0; //@line 17549
  HEAP32[$36 >> 2] = $2; //@line 17550
  $37 = $ReallocAsyncCtx5 + 16 | 0; //@line 17551
  HEAP32[$37 >> 2] = $4; //@line 17552
  $38 = $ReallocAsyncCtx5 + 20 | 0; //@line 17553
  HEAP32[$38 >> 2] = $8; //@line 17554
  $39 = $ReallocAsyncCtx5 + 24 | 0; //@line 17555
  HEAP32[$39 >> 2] = $10; //@line 17556
  $40 = $ReallocAsyncCtx5 + 28 | 0; //@line 17557
  HEAP32[$40 >> 2] = $12; //@line 17558
  $41 = $ReallocAsyncCtx5 + 32 | 0; //@line 17559
  HEAP32[$41 >> 2] = $14; //@line 17560
  sp = STACKTOP; //@line 17561
  return;
 } else {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 17565
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 17566
  FUNCTION_TABLE_vi[$22 & 1023]($16); //@line 17567
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 470; //@line 17570
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 17571
   HEAP32[$23 >> 2] = $15; //@line 17572
   $24 = $ReallocAsyncCtx4 + 8 | 0; //@line 17573
   HEAP32[$24 >> 2] = $18; //@line 17574
   $25 = $ReallocAsyncCtx4 + 12 | 0; //@line 17575
   HEAP32[$25 >> 2] = $2; //@line 17576
   $26 = $ReallocAsyncCtx4 + 16 | 0; //@line 17577
   HEAP32[$26 >> 2] = $4; //@line 17578
   $27 = $ReallocAsyncCtx4 + 20 | 0; //@line 17579
   HEAP32[$27 >> 2] = $8; //@line 17580
   $28 = $ReallocAsyncCtx4 + 24 | 0; //@line 17581
   HEAP32[$28 >> 2] = $10; //@line 17582
   $29 = $ReallocAsyncCtx4 + 28 | 0; //@line 17583
   HEAP32[$29 >> 2] = $16; //@line 17584
   $30 = $ReallocAsyncCtx4 + 32 | 0; //@line 17585
   HEAP32[$30 >> 2] = $12; //@line 17586
   $31 = $ReallocAsyncCtx4 + 36 | 0; //@line 17587
   HEAP32[$31 >> 2] = $14; //@line 17588
   sp = STACKTOP; //@line 17589
   return;
  }
  ___async_unwind = 0; //@line 17592
  HEAP32[$ReallocAsyncCtx4 >> 2] = 470; //@line 17593
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 17594
  HEAP32[$23 >> 2] = $15; //@line 17595
  $24 = $ReallocAsyncCtx4 + 8 | 0; //@line 17596
  HEAP32[$24 >> 2] = $18; //@line 17597
  $25 = $ReallocAsyncCtx4 + 12 | 0; //@line 17598
  HEAP32[$25 >> 2] = $2; //@line 17599
  $26 = $ReallocAsyncCtx4 + 16 | 0; //@line 17600
  HEAP32[$26 >> 2] = $4; //@line 17601
  $27 = $ReallocAsyncCtx4 + 20 | 0; //@line 17602
  HEAP32[$27 >> 2] = $8; //@line 17603
  $28 = $ReallocAsyncCtx4 + 24 | 0; //@line 17604
  HEAP32[$28 >> 2] = $10; //@line 17605
  $29 = $ReallocAsyncCtx4 + 28 | 0; //@line 17606
  HEAP32[$29 >> 2] = $16; //@line 17607
  $30 = $ReallocAsyncCtx4 + 32 | 0; //@line 17608
  HEAP32[$30 >> 2] = $12; //@line 17609
  $31 = $ReallocAsyncCtx4 + 36 | 0; //@line 17610
  HEAP32[$31 >> 2] = $14; //@line 17611
  sp = STACKTOP; //@line 17612
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre = 0, $$pre12 = 0, $$pre13 = 0, $12 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $4 = 0, $46 = 0, $47 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $63 = 0, $70 = 0, $71 = 0, $74 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8019
 if (!$1) {
  return;
 }
 $3 = $1 + 12 | 0; //@line 8024
 $4 = HEAP32[$3 >> 2] | 0; //@line 8025
 if ($4 | 0) {
  $6 = $0 + 1880 | 0; //@line 8028
  if (($6 | 0) != ($1 | 0)) {
   $8 = $0 + 1892 | 0; //@line 8031
   $9 = HEAP32[$8 >> 2] | 0; //@line 8032
   do {
    if (!$9) {
     $20 = $4; //@line 8036
     label = 8; //@line 8037
    } else {
     $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 8040
     $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 8041
     FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 8042
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 246; //@line 8045
      HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 8047
      HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 8049
      HEAP32[$AsyncCtx + 12 >> 2] = $8; //@line 8051
      HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 8053
      HEAP32[$AsyncCtx + 20 >> 2] = $3; //@line 8055
      sp = STACKTOP; //@line 8056
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 8059
      $$pre = HEAP32[$3 >> 2] | 0; //@line 8060
      if (!$$pre) {
       $26 = 0; //@line 8063
       break;
      } else {
       $20 = $$pre; //@line 8066
       label = 8; //@line 8067
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 8) {
     $21 = HEAP32[$20 + 4 >> 2] | 0; //@line 8076
     $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8077
     FUNCTION_TABLE_vii[$21 & 31]($6, $1); //@line 8078
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 247; //@line 8081
      HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 8083
      HEAP32[$AsyncCtx2 + 8 >> 2] = $8; //@line 8085
      HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 8087
      HEAP32[$AsyncCtx2 + 16 >> 2] = $3; //@line 8089
      sp = STACKTOP; //@line 8090
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8093
      $26 = HEAP32[$3 >> 2] | 0; //@line 8095
      break;
     }
    }
   } while (0);
   HEAP32[$8 >> 2] = $26; //@line 8100
  }
 }
 $27 = $1 + 16 | 0; //@line 8103
 $28 = $1 + 28 | 0; //@line 8104
 $29 = HEAP32[$28 >> 2] | 0; //@line 8105
 if ($29 | 0) {
  $31 = $0 + 1896 | 0; //@line 8108
  if (($31 | 0) != ($27 | 0)) {
   $33 = $0 + 1908 | 0; //@line 8111
   $34 = HEAP32[$33 >> 2] | 0; //@line 8112
   do {
    if (!$34) {
     $46 = $29; //@line 8116
     label = 18; //@line 8117
    } else {
     $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 8120
     $AsyncCtx5 = _emscripten_alloc_async_context(28, sp) | 0; //@line 8121
     FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 8122
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 248; //@line 8125
      HEAP32[$AsyncCtx5 + 4 >> 2] = $28; //@line 8127
      HEAP32[$AsyncCtx5 + 8 >> 2] = $33; //@line 8129
      HEAP32[$AsyncCtx5 + 12 >> 2] = $31; //@line 8131
      HEAP32[$AsyncCtx5 + 16 >> 2] = $27; //@line 8133
      HEAP32[$AsyncCtx5 + 20 >> 2] = $1; //@line 8135
      HEAP32[$AsyncCtx5 + 24 >> 2] = $0; //@line 8137
      sp = STACKTOP; //@line 8138
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 8141
      $$pre12 = HEAP32[$28 >> 2] | 0; //@line 8142
      if (!$$pre12) {
       $52 = 0; //@line 8145
       break;
      } else {
       $46 = $$pre12; //@line 8148
       label = 18; //@line 8149
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 18) {
     $47 = HEAP32[$46 + 4 >> 2] | 0; //@line 8158
     $AsyncCtx8 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8159
     FUNCTION_TABLE_vii[$47 & 31]($31, $27); //@line 8160
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 249; //@line 8163
      HEAP32[$AsyncCtx8 + 4 >> 2] = $28; //@line 8165
      HEAP32[$AsyncCtx8 + 8 >> 2] = $33; //@line 8167
      HEAP32[$AsyncCtx8 + 12 >> 2] = $1; //@line 8169
      HEAP32[$AsyncCtx8 + 16 >> 2] = $0; //@line 8171
      sp = STACKTOP; //@line 8172
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx8 | 0); //@line 8175
      $52 = HEAP32[$28 >> 2] | 0; //@line 8177
      break;
     }
    }
   } while (0);
   HEAP32[$33 >> 2] = $52; //@line 8182
  }
 }
 $53 = $1 + 32 | 0; //@line 8185
 $54 = $1 + 44 | 0; //@line 8186
 $55 = HEAP32[$54 >> 2] | 0; //@line 8187
 if (!$55) {
  return;
 }
 $57 = $0 + 1912 | 0; //@line 8192
 if (($57 | 0) == ($53 | 0)) {
  return;
 }
 $59 = $0 + 1924 | 0; //@line 8197
 $60 = HEAP32[$59 >> 2] | 0; //@line 8198
 do {
  if (!$60) {
   $70 = $55; //@line 8202
   label = 28; //@line 8203
  } else {
   $63 = HEAP32[$60 + 8 >> 2] | 0; //@line 8206
   $AsyncCtx11 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8207
   FUNCTION_TABLE_vi[$63 & 1023]($57); //@line 8208
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 250; //@line 8211
    HEAP32[$AsyncCtx11 + 4 >> 2] = $54; //@line 8213
    HEAP32[$AsyncCtx11 + 8 >> 2] = $59; //@line 8215
    HEAP32[$AsyncCtx11 + 12 >> 2] = $57; //@line 8217
    HEAP32[$AsyncCtx11 + 16 >> 2] = $53; //@line 8219
    sp = STACKTOP; //@line 8220
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 8223
    $$pre13 = HEAP32[$54 >> 2] | 0; //@line 8224
    if (!$$pre13) {
     $74 = 0; //@line 8227
     break;
    } else {
     $70 = $$pre13; //@line 8230
     label = 28; //@line 8231
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 28) {
   $71 = HEAP32[$70 + 4 >> 2] | 0; //@line 8240
   $AsyncCtx14 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8241
   FUNCTION_TABLE_vii[$71 & 31]($57, $53); //@line 8242
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 251; //@line 8245
    HEAP32[$AsyncCtx14 + 4 >> 2] = $54; //@line 8247
    HEAP32[$AsyncCtx14 + 8 >> 2] = $59; //@line 8249
    sp = STACKTOP; //@line 8250
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 8253
    $74 = HEAP32[$54 >> 2] | 0; //@line 8255
    break;
   }
  }
 } while (0);
 HEAP32[$59 >> 2] = $74; //@line 8260
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_38($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $45 = 0, $46 = 0, $49 = 0, $57 = 0, $6 = 0, $63 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 19823
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19825
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19827
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19829
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19831
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19833
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19835
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19837
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19839
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 19844
  _mbed_assert_internal(13588, 13597, 215); //@line 19845
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 281; //@line 19848
   $19 = $ReallocAsyncCtx7 + 4 | 0; //@line 19849
   HEAP32[$19 >> 2] = $2; //@line 19850
   $20 = $ReallocAsyncCtx7 + 8 | 0; //@line 19851
   HEAP32[$20 >> 2] = $4; //@line 19852
   $21 = $ReallocAsyncCtx7 + 12 | 0; //@line 19853
   HEAP32[$21 >> 2] = $6; //@line 19854
   $22 = $ReallocAsyncCtx7 + 16 | 0; //@line 19855
   HEAP32[$22 >> 2] = $8; //@line 19856
   $23 = $ReallocAsyncCtx7 + 20 | 0; //@line 19857
   HEAP32[$23 >> 2] = $10; //@line 19858
   $24 = $ReallocAsyncCtx7 + 24 | 0; //@line 19859
   HEAP32[$24 >> 2] = $12; //@line 19860
   $25 = $ReallocAsyncCtx7 + 28 | 0; //@line 19861
   HEAP32[$25 >> 2] = $14; //@line 19862
   $26 = $ReallocAsyncCtx7 + 32 | 0; //@line 19863
   HEAP32[$26 >> 2] = $16; //@line 19864
   sp = STACKTOP; //@line 19865
   return;
  }
  ___async_unwind = 0; //@line 19868
  HEAP32[$ReallocAsyncCtx7 >> 2] = 281; //@line 19869
  $19 = $ReallocAsyncCtx7 + 4 | 0; //@line 19870
  HEAP32[$19 >> 2] = $2; //@line 19871
  $20 = $ReallocAsyncCtx7 + 8 | 0; //@line 19872
  HEAP32[$20 >> 2] = $4; //@line 19873
  $21 = $ReallocAsyncCtx7 + 12 | 0; //@line 19874
  HEAP32[$21 >> 2] = $6; //@line 19875
  $22 = $ReallocAsyncCtx7 + 16 | 0; //@line 19876
  HEAP32[$22 >> 2] = $8; //@line 19877
  $23 = $ReallocAsyncCtx7 + 20 | 0; //@line 19878
  HEAP32[$23 >> 2] = $10; //@line 19879
  $24 = $ReallocAsyncCtx7 + 24 | 0; //@line 19880
  HEAP32[$24 >> 2] = $12; //@line 19881
  $25 = $ReallocAsyncCtx7 + 28 | 0; //@line 19882
  HEAP32[$25 >> 2] = $14; //@line 19883
  $26 = $ReallocAsyncCtx7 + 32 | 0; //@line 19884
  HEAP32[$26 >> 2] = $16; //@line 19885
  sp = STACKTOP; //@line 19886
  return;
 }
 HEAP32[$4 + 364 >> 2] = 2; //@line 19890
 if (HEAP8[$4 + 371 >> 0] | 0) {
  $31 = HEAP32[$6 >> 2] | 0; //@line 19895
  $34 = HEAP32[$4 + 972 >> 2] | 0; //@line 19898
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 19899
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($31, $4 + 1036 | 0, $34); //@line 19900
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 282; //@line 19903
   $35 = $ReallocAsyncCtx4 + 4 | 0; //@line 19904
   HEAP32[$35 >> 2] = $10; //@line 19905
   $36 = $ReallocAsyncCtx4 + 8 | 0; //@line 19906
   HEAP32[$36 >> 2] = $4; //@line 19907
   $37 = $ReallocAsyncCtx4 + 12 | 0; //@line 19908
   HEAP32[$37 >> 2] = $6; //@line 19909
   $38 = $ReallocAsyncCtx4 + 16 | 0; //@line 19910
   HEAP32[$38 >> 2] = $12; //@line 19911
   $39 = $ReallocAsyncCtx4 + 20 | 0; //@line 19912
   HEAP32[$39 >> 2] = $14; //@line 19913
   $40 = $ReallocAsyncCtx4 + 24 | 0; //@line 19914
   HEAP32[$40 >> 2] = $16; //@line 19915
   $41 = $ReallocAsyncCtx4 + 28 | 0; //@line 19916
   HEAP32[$41 >> 2] = $8; //@line 19917
   sp = STACKTOP; //@line 19918
   return;
  }
  ___async_unwind = 0; //@line 19921
  HEAP32[$ReallocAsyncCtx4 >> 2] = 282; //@line 19922
  $35 = $ReallocAsyncCtx4 + 4 | 0; //@line 19923
  HEAP32[$35 >> 2] = $10; //@line 19924
  $36 = $ReallocAsyncCtx4 + 8 | 0; //@line 19925
  HEAP32[$36 >> 2] = $4; //@line 19926
  $37 = $ReallocAsyncCtx4 + 12 | 0; //@line 19927
  HEAP32[$37 >> 2] = $6; //@line 19928
  $38 = $ReallocAsyncCtx4 + 16 | 0; //@line 19929
  HEAP32[$38 >> 2] = $12; //@line 19930
  $39 = $ReallocAsyncCtx4 + 20 | 0; //@line 19931
  HEAP32[$39 >> 2] = $14; //@line 19932
  $40 = $ReallocAsyncCtx4 + 24 | 0; //@line 19933
  HEAP32[$40 >> 2] = $16; //@line 19934
  $41 = $ReallocAsyncCtx4 + 28 | 0; //@line 19935
  HEAP32[$41 >> 2] = $8; //@line 19936
  sp = STACKTOP; //@line 19937
  return;
 }
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 19943
 $45 = $4 + 944 | 0; //@line 19944
 $46 = HEAP8[$45 >> 0] | 0; //@line 19945
 if (!($46 << 24 >> 24)) {
  HEAP8[$45 >> 0] = 1; //@line 19948
  $49 = 1; //@line 19949
 } else {
  $49 = $46; //@line 19951
 }
 HEAP8[$45 >> 0] = $49 | 32; //@line 19954
 HEAP8[$4 + 376 >> 0] = ($12 | 0) == 0 & (HEAP8[$4 + 944 >> 0] & 8) != 0 & 1; //@line 19963
 $57 = HEAP8[$4 + 378 >> 0] | 0; //@line 19965
 HEAP8[$4 + 379 >> 0] = $57; //@line 19967
 HEAP8[$14 >> 0] = $57; //@line 19968
 HEAP8[$16 + 1 >> 0] = HEAP8[$4 + 372 >> 0] | 0; //@line 19972
 HEAP32[$16 + 4 >> 2] = $8; //@line 19974
 $63 = HEAP32[$4 >> 2] | 0; //@line 19975
 $66 = HEAP32[(HEAP32[$63 >> 2] | 0) + 12 >> 2] | 0; //@line 19978
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 19979
 FUNCTION_TABLE_vii[$66 & 31]($63, $16); //@line 19980
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 285; //@line 19983
  $67 = $ReallocAsyncCtx + 4 | 0; //@line 19984
  HEAP32[$67 >> 2] = $4; //@line 19985
  $68 = $ReallocAsyncCtx + 8 | 0; //@line 19986
  HEAP32[$68 >> 2] = $8; //@line 19987
  $69 = $ReallocAsyncCtx + 12 | 0; //@line 19988
  HEAP32[$69 >> 2] = $14; //@line 19989
  sp = STACKTOP; //@line 19990
  return;
 }
 ___async_unwind = 0; //@line 19993
 HEAP32[$ReallocAsyncCtx >> 2] = 285; //@line 19994
 $67 = $ReallocAsyncCtx + 4 | 0; //@line 19995
 HEAP32[$67 >> 2] = $4; //@line 19996
 $68 = $ReallocAsyncCtx + 8 | 0; //@line 19997
 HEAP32[$68 >> 2] = $8; //@line 19998
 $69 = $ReallocAsyncCtx + 12 | 0; //@line 19999
 HEAP32[$69 >> 2] = $14; //@line 20000
 sp = STACKTOP; //@line 20001
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_154($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $47 = 0, $48 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 31247
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31249
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31251
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31253
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31255
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31257
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31259
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31261
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31263
 if ($AsyncRetVal | 0) {
  $17 = HEAP32[$4 >> 2] | 0; //@line 31266
  if (!$17) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 31270
   $30 = $AsyncRetVal + 16 | 0; //@line 31271
   HEAP32[$30 >> 2] = HEAP32[$8 >> 2]; //@line 31272
   HEAP32[$30 + 4 >> 2] = HEAP32[$8 + 4 >> 2]; //@line 31272
   HEAP8[$30 + 8 >> 0] = HEAP8[$8 + 8 >> 0] | 0; //@line 31272
   _equeue_event_dtor($AsyncRetVal, 343); //@line 31273
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 31274
   $31 = _equeue_post($10, 344, $AsyncRetVal) | 0; //@line 31275
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 345; //@line 31278
    $32 = $ReallocAsyncCtx6 + 4 | 0; //@line 31279
    HEAP32[$32 >> 2] = $4; //@line 31280
    $33 = $ReallocAsyncCtx6 + 8 | 0; //@line 31281
    HEAP32[$33 >> 2] = $12; //@line 31282
    $34 = $ReallocAsyncCtx6 + 12 | 0; //@line 31283
    HEAP32[$34 >> 2] = $6; //@line 31284
    $35 = $ReallocAsyncCtx6 + 16 | 0; //@line 31285
    HEAP32[$35 >> 2] = $14; //@line 31286
    sp = STACKTOP; //@line 31287
    return;
   }
   HEAP32[___async_retval >> 2] = $31; //@line 31291
   ___async_unwind = 0; //@line 31292
   HEAP32[$ReallocAsyncCtx6 >> 2] = 345; //@line 31293
   $32 = $ReallocAsyncCtx6 + 4 | 0; //@line 31294
   HEAP32[$32 >> 2] = $4; //@line 31295
   $33 = $ReallocAsyncCtx6 + 8 | 0; //@line 31296
   HEAP32[$33 >> 2] = $12; //@line 31297
   $34 = $ReallocAsyncCtx6 + 12 | 0; //@line 31298
   HEAP32[$34 >> 2] = $6; //@line 31299
   $35 = $ReallocAsyncCtx6 + 16 | 0; //@line 31300
   HEAP32[$35 >> 2] = $14; //@line 31301
   sp = STACKTOP; //@line 31302
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 31306
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 31307
   FUNCTION_TABLE_vii[$20 & 31]($AsyncRetVal, $6); //@line 31308
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 342; //@line 31311
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 31312
    HEAP32[$21 >> 2] = $2; //@line 31313
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 31314
    HEAP32[$22 >> 2] = $AsyncRetVal; //@line 31315
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 31316
    HEAP32[$23 >> 2] = $8; //@line 31317
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 31318
    HEAP32[$24 >> 2] = $10; //@line 31319
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 31320
    HEAP32[$25 >> 2] = $4; //@line 31321
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 31322
    HEAP32[$26 >> 2] = $12; //@line 31323
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 31324
    HEAP32[$27 >> 2] = $6; //@line 31325
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 31326
    HEAP32[$28 >> 2] = $14; //@line 31327
    sp = STACKTOP; //@line 31328
    return;
   }
   ___async_unwind = 0; //@line 31331
   HEAP32[$ReallocAsyncCtx3 >> 2] = 342; //@line 31332
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 31333
   HEAP32[$21 >> 2] = $2; //@line 31334
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 31335
   HEAP32[$22 >> 2] = $AsyncRetVal; //@line 31336
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 31337
   HEAP32[$23 >> 2] = $8; //@line 31338
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 31339
   HEAP32[$24 >> 2] = $10; //@line 31340
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 31341
   HEAP32[$25 >> 2] = $4; //@line 31342
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 31343
   HEAP32[$26 >> 2] = $12; //@line 31344
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 31345
   HEAP32[$27 >> 2] = $6; //@line 31346
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 31347
   HEAP32[$28 >> 2] = $14; //@line 31348
   sp = STACKTOP; //@line 31349
   return;
  }
 }
 $37 = HEAP32[$4 >> 2] | 0; //@line 31353
 if ($37 | 0) {
  $40 = HEAP32[$37 + 8 >> 2] | 0; //@line 31357
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 31358
  FUNCTION_TABLE_vi[$40 & 1023]($6); //@line 31359
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 346; //@line 31362
   $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 31363
   HEAP32[$41 >> 2] = $12; //@line 31364
   $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 31365
   HEAP32[$42 >> 2] = 0; //@line 31366
   $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 31367
   HEAP32[$43 >> 2] = $14; //@line 31368
   sp = STACKTOP; //@line 31369
   return;
  }
  ___async_unwind = 0; //@line 31372
  HEAP32[$ReallocAsyncCtx4 >> 2] = 346; //@line 31373
  $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 31374
  HEAP32[$41 >> 2] = $12; //@line 31375
  $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 31376
  HEAP32[$42 >> 2] = 0; //@line 31377
  $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 31378
  HEAP32[$43 >> 2] = $14; //@line 31379
  sp = STACKTOP; //@line 31380
  return;
 }
 $44 = HEAP32[$12 >> 2] | 0; //@line 31383
 if (!$44) {
  HEAP32[___async_retval >> 2] = 0; //@line 31387
  return;
 }
 $47 = HEAP32[$44 + 8 >> 2] | 0; //@line 31391
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 31392
 FUNCTION_TABLE_vi[$47 & 1023]($14); //@line 31393
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 347; //@line 31396
  $48 = $ReallocAsyncCtx5 + 4 | 0; //@line 31397
  HEAP32[$48 >> 2] = 0; //@line 31398
  sp = STACKTOP; //@line 31399
  return;
 }
 ___async_unwind = 0; //@line 31402
 HEAP32[$ReallocAsyncCtx5 >> 2] = 347; //@line 31403
 $48 = $ReallocAsyncCtx5 + 4 | 0; //@line 31404
 HEAP32[$48 >> 2] = 0; //@line 31405
 sp = STACKTOP; //@line 31406
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_278($0) {
 $0 = $0 | 0;
 var $$pre121 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 18733
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18735
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18737
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18739
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18741
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18743
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18745
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18747
 $$pre121 = HEAP32[$2 >> 2] | 0; //@line 18748
 if ($$pre121 | 0) {
  $17 = HEAP32[$$pre121 + 4 >> 2] | 0; //@line 18752
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(28) | 0; //@line 18753
  FUNCTION_TABLE_vii[$17 & 31]($14, $10); //@line 18754
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 479; //@line 18757
   $18 = $ReallocAsyncCtx11 + 4 | 0; //@line 18758
   HEAP32[$18 >> 2] = $4; //@line 18759
   $19 = $ReallocAsyncCtx11 + 8 | 0; //@line 18760
   HEAP32[$19 >> 2] = $6; //@line 18761
   $20 = $ReallocAsyncCtx11 + 12 | 0; //@line 18762
   HEAP32[$20 >> 2] = $2; //@line 18763
   $21 = $ReallocAsyncCtx11 + 16 | 0; //@line 18764
   HEAP32[$21 >> 2] = $8; //@line 18765
   $22 = $ReallocAsyncCtx11 + 20 | 0; //@line 18766
   HEAP32[$22 >> 2] = $10; //@line 18767
   $23 = $ReallocAsyncCtx11 + 24 | 0; //@line 18768
   HEAP32[$23 >> 2] = $12; //@line 18769
   sp = STACKTOP; //@line 18770
   return;
  }
  ___async_unwind = 0; //@line 18773
  HEAP32[$ReallocAsyncCtx11 >> 2] = 479; //@line 18774
  $18 = $ReallocAsyncCtx11 + 4 | 0; //@line 18775
  HEAP32[$18 >> 2] = $4; //@line 18776
  $19 = $ReallocAsyncCtx11 + 8 | 0; //@line 18777
  HEAP32[$19 >> 2] = $6; //@line 18778
  $20 = $ReallocAsyncCtx11 + 12 | 0; //@line 18779
  HEAP32[$20 >> 2] = $2; //@line 18780
  $21 = $ReallocAsyncCtx11 + 16 | 0; //@line 18781
  HEAP32[$21 >> 2] = $8; //@line 18782
  $22 = $ReallocAsyncCtx11 + 20 | 0; //@line 18783
  HEAP32[$22 >> 2] = $10; //@line 18784
  $23 = $ReallocAsyncCtx11 + 24 | 0; //@line 18785
  HEAP32[$23 >> 2] = $12; //@line 18786
  sp = STACKTOP; //@line 18787
  return;
 }
 HEAP32[$8 >> 2] = 0; //@line 18790
 $24 = $12 + 12 | 0; //@line 18791
 HEAP32[$12 >> 2] = 481; //@line 18792
 HEAP32[$12 + 4 >> 2] = 0; //@line 18794
 HEAP32[$12 + 8 >> 2] = $4; //@line 18796
 HEAP32[$24 >> 2] = 912; //@line 18797
 $25 = $4 + 1260 | 0; //@line 18798
 if (($25 | 0) == ($12 | 0)) {
  $44 = HEAP32[230] | 0; //@line 18802
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 18803
  FUNCTION_TABLE_vi[$44 & 1023]($12); //@line 18804
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 484; //@line 18807
   $45 = $ReallocAsyncCtx15 + 4 | 0; //@line 18808
   HEAP32[$45 >> 2] = $12; //@line 18809
   $46 = $ReallocAsyncCtx15 + 8 | 0; //@line 18810
   HEAP32[$46 >> 2] = $6; //@line 18811
   sp = STACKTOP; //@line 18812
   return;
  }
  ___async_unwind = 0; //@line 18815
  HEAP32[$ReallocAsyncCtx15 >> 2] = 484; //@line 18816
  $45 = $ReallocAsyncCtx15 + 4 | 0; //@line 18817
  HEAP32[$45 >> 2] = $12; //@line 18818
  $46 = $ReallocAsyncCtx15 + 8 | 0; //@line 18819
  HEAP32[$46 >> 2] = $6; //@line 18820
  sp = STACKTOP; //@line 18821
  return;
 }
 $27 = $4 + 1272 | 0; //@line 18824
 $28 = HEAP32[$27 >> 2] | 0; //@line 18825
 if (!$28) {
  $38 = HEAP32[229] | 0; //@line 18829
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(20) | 0; //@line 18830
  FUNCTION_TABLE_vii[$38 & 31]($25, $12); //@line 18831
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 18834
   $39 = $ReallocAsyncCtx14 + 4 | 0; //@line 18835
   HEAP32[$39 >> 2] = $24; //@line 18836
   $40 = $ReallocAsyncCtx14 + 8 | 0; //@line 18837
   HEAP32[$40 >> 2] = $27; //@line 18838
   $41 = $ReallocAsyncCtx14 + 12 | 0; //@line 18839
   HEAP32[$41 >> 2] = $12; //@line 18840
   $42 = $ReallocAsyncCtx14 + 16 | 0; //@line 18841
   HEAP32[$42 >> 2] = $6; //@line 18842
   sp = STACKTOP; //@line 18843
   return;
  }
  ___async_unwind = 0; //@line 18846
  HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 18847
  $39 = $ReallocAsyncCtx14 + 4 | 0; //@line 18848
  HEAP32[$39 >> 2] = $24; //@line 18849
  $40 = $ReallocAsyncCtx14 + 8 | 0; //@line 18850
  HEAP32[$40 >> 2] = $27; //@line 18851
  $41 = $ReallocAsyncCtx14 + 12 | 0; //@line 18852
  HEAP32[$41 >> 2] = $12; //@line 18853
  $42 = $ReallocAsyncCtx14 + 16 | 0; //@line 18854
  HEAP32[$42 >> 2] = $6; //@line 18855
  sp = STACKTOP; //@line 18856
  return;
 } else {
  $31 = HEAP32[$28 + 8 >> 2] | 0; //@line 18860
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 18861
  FUNCTION_TABLE_vi[$31 & 1023]($25); //@line 18862
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 482; //@line 18865
   $32 = $ReallocAsyncCtx13 + 4 | 0; //@line 18866
   HEAP32[$32 >> 2] = $24; //@line 18867
   $33 = $ReallocAsyncCtx13 + 8 | 0; //@line 18868
   HEAP32[$33 >> 2] = $27; //@line 18869
   $34 = $ReallocAsyncCtx13 + 12 | 0; //@line 18870
   HEAP32[$34 >> 2] = $25; //@line 18871
   $35 = $ReallocAsyncCtx13 + 16 | 0; //@line 18872
   HEAP32[$35 >> 2] = $12; //@line 18873
   $36 = $ReallocAsyncCtx13 + 20 | 0; //@line 18874
   HEAP32[$36 >> 2] = $6; //@line 18875
   sp = STACKTOP; //@line 18876
   return;
  }
  ___async_unwind = 0; //@line 18879
  HEAP32[$ReallocAsyncCtx13 >> 2] = 482; //@line 18880
  $32 = $ReallocAsyncCtx13 + 4 | 0; //@line 18881
  HEAP32[$32 >> 2] = $24; //@line 18882
  $33 = $ReallocAsyncCtx13 + 8 | 0; //@line 18883
  HEAP32[$33 >> 2] = $27; //@line 18884
  $34 = $ReallocAsyncCtx13 + 12 | 0; //@line 18885
  HEAP32[$34 >> 2] = $25; //@line 18886
  $35 = $ReallocAsyncCtx13 + 16 | 0; //@line 18887
  HEAP32[$35 >> 2] = $12; //@line 18888
  $36 = $ReallocAsyncCtx13 + 20 | 0; //@line 18889
  HEAP32[$36 >> 2] = $6; //@line 18890
  sp = STACKTOP; //@line 18891
  return;
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_126($0) {
 $0 = $0 | 0;
 var $$3$off0230 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $32 = 0, $34 = 0, $4 = 0, $41 = 0, $46 = 0, $47 = 0, $6 = 0, $61 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $75 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $85 = 0, $88 = 0, $90 = 0, $91 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx27 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 28015
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 28017
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28019
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28021
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28023
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 28026
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28028
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28030
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28032
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28034
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28036
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 28038
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 28040
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 28042
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 28044
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 28048
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 28050
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($34) | 0) {
   _mbed_tracef(16, 13704, 13865, $28); //@line 28057
   HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($32) | 0) >> 2] = 4; //@line 28059
   $41 = $8 + 944 | 0; //@line 28060
   HEAP8[$41 >> 0] = HEAP8[$41 >> 0] | 16; //@line 28063
   __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($34); //@line 28064
  }
 } else {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($4) | 0) + 4 >> 2] = 1; //@line 28069
 }
 $46 = $20 & 255; //@line 28073
 $47 = $8 + 638 | 0; //@line 28074
 if (__Z15decrypt_payloadPKhtS0_jhjPh($16 + $18 | 0, $46, $22, $24, 1, $26, $47) | 0) {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($4) | 0) + 4 >> 2] = 13; //@line 28080
 }
 if ($10) {
  $$3$off0230 = 6; //@line 28083
 } else {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($4) | 0) + 12 >> 2] = $47; //@line 28087
  HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($4) | 0) + 16 >> 1] = $46; //@line 28090
  HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($4) | 0) + 18 >> 0] = 1; //@line 28093
  $61 = (__ZN11LoRaMacMcps16get_confirmationEv($4) | 0) + 10 | 0; //@line 28097
  if ($2 & 32) {
   HEAP8[$61 >> 0] = 1; //@line 28099
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($4) | 0) + 28 >> 0] = 1; //@line 28102
   $64 = HEAP32[$6 >> 2] | 0; //@line 28103
   $ReallocAsyncCtx27 = _emscripten_realloc_async_context(20) | 0; //@line 28105
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($64, $8 + 1076 | 0); //@line 28106
   if (___async) {
    HEAP32[$ReallocAsyncCtx27 >> 2] = 330; //@line 28109
    $66 = $ReallocAsyncCtx27 + 4 | 0; //@line 28110
    HEAP32[$66 >> 2] = $8; //@line 28111
    $67 = $ReallocAsyncCtx27 + 8 | 0; //@line 28112
    HEAP32[$67 >> 2] = $6; //@line 28113
    $68 = $ReallocAsyncCtx27 + 12 | 0; //@line 28114
    HEAP32[$68 >> 2] = $12; //@line 28115
    $69 = $ReallocAsyncCtx27 + 16 | 0; //@line 28116
    HEAP32[$69 >> 2] = $14; //@line 28117
    sp = STACKTOP; //@line 28118
    return;
   }
   ___async_unwind = 0; //@line 28121
   HEAP32[$ReallocAsyncCtx27 >> 2] = 330; //@line 28122
   $66 = $ReallocAsyncCtx27 + 4 | 0; //@line 28123
   HEAP32[$66 >> 2] = $8; //@line 28124
   $67 = $ReallocAsyncCtx27 + 8 | 0; //@line 28125
   HEAP32[$67 >> 2] = $6; //@line 28126
   $68 = $ReallocAsyncCtx27 + 12 | 0; //@line 28127
   HEAP32[$68 >> 2] = $12; //@line 28128
   $69 = $ReallocAsyncCtx27 + 16 | 0; //@line 28129
   HEAP32[$69 >> 2] = $14; //@line 28130
   sp = STACKTOP; //@line 28131
   return;
  }
  HEAP8[$61 >> 0] = 0; //@line 28134
  if ((HEAPU8[$8 + 895 >> 0] | 0) > (HEAPU8[$8 + 894 >> 0] | 0)) {
   $75 = HEAP32[$6 >> 2] | 0; //@line 28141
   $ReallocAsyncCtx26 = _emscripten_realloc_async_context(20) | 0; //@line 28143
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($75, $8 + 1076 | 0); //@line 28144
   if (___async) {
    HEAP32[$ReallocAsyncCtx26 >> 2] = 331; //@line 28147
    $77 = $ReallocAsyncCtx26 + 4 | 0; //@line 28148
    HEAP32[$77 >> 2] = $8; //@line 28149
    $78 = $ReallocAsyncCtx26 + 8 | 0; //@line 28150
    HEAP32[$78 >> 2] = $6; //@line 28151
    $79 = $ReallocAsyncCtx26 + 12 | 0; //@line 28152
    HEAP32[$79 >> 2] = $12; //@line 28153
    $80 = $ReallocAsyncCtx26 + 16 | 0; //@line 28154
    HEAP32[$80 >> 2] = $14; //@line 28155
    sp = STACKTOP; //@line 28156
    return;
   }
   ___async_unwind = 0; //@line 28159
   HEAP32[$ReallocAsyncCtx26 >> 2] = 331; //@line 28160
   $77 = $ReallocAsyncCtx26 + 4 | 0; //@line 28161
   HEAP32[$77 >> 2] = $8; //@line 28162
   $78 = $ReallocAsyncCtx26 + 8 | 0; //@line 28163
   HEAP32[$78 >> 2] = $6; //@line 28164
   $79 = $ReallocAsyncCtx26 + 12 | 0; //@line 28165
   HEAP32[$79 >> 2] = $12; //@line 28166
   $80 = $ReallocAsyncCtx26 + 16 | 0; //@line 28167
   HEAP32[$80 >> 2] = $14; //@line 28168
   sp = STACKTOP; //@line 28169
   return;
  } else {
   $$3$off0230 = 2; //@line 28172
  }
 }
 $81 = $8 + 944 | 0; //@line 28175
 HEAP8[$81 >> 0] = $$3$off0230 | HEAP8[$81 >> 0] & -7; //@line 28179
 $85 = $8 + 944 | 0; //@line 28180
 HEAP8[$85 >> 0] = HEAP8[$85 >> 0] | 32; //@line 28183
 $88 = HEAP32[$6 >> 2] | 0; //@line 28184
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 28186
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($88, $8 + 996 | 0, 1); //@line 28187
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 338; //@line 28190
  $90 = $ReallocAsyncCtx5 + 4 | 0; //@line 28191
  HEAP32[$90 >> 2] = $12; //@line 28192
  $91 = $ReallocAsyncCtx5 + 8 | 0; //@line 28193
  HEAP32[$91 >> 2] = $14; //@line 28194
  sp = STACKTOP; //@line 28195
  return;
 }
 ___async_unwind = 0; //@line 28198
 HEAP32[$ReallocAsyncCtx5 >> 2] = 338; //@line 28199
 $90 = $ReallocAsyncCtx5 + 4 | 0; //@line 28200
 HEAP32[$90 >> 2] = $12; //@line 28201
 $91 = $ReallocAsyncCtx5 + 8 | 0; //@line 28202
 HEAP32[$91 >> 2] = $14; //@line 28203
 sp = STACKTOP; //@line 28204
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_206($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $38 = 0, $39 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 12035
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12037
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12041
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 16 >> 2] >> 2]; //@line 12045
 $9 = $2 + 16 | 0; //@line 12046
 $10 = $2 + 28 | 0; //@line 12047
 $11 = HEAP32[$10 >> 2] | 0; //@line 12048
 if ($11 | 0) {
  $13 = $6 + 1896 | 0; //@line 12051
  if (($13 | 0) != ($9 | 0)) {
   $15 = $6 + 1908 | 0; //@line 12054
   $16 = HEAP32[$15 >> 2] | 0; //@line 12055
   if (!$16) {
    $27 = HEAP32[$11 + 4 >> 2] | 0; //@line 12059
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 12060
    FUNCTION_TABLE_vii[$27 & 31]($13, $9); //@line 12061
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 249; //@line 12064
     $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 12065
     HEAP32[$28 >> 2] = $10; //@line 12066
     $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 12067
     HEAP32[$29 >> 2] = $15; //@line 12068
     $30 = $ReallocAsyncCtx4 + 12 | 0; //@line 12069
     HEAP32[$30 >> 2] = $2; //@line 12070
     $31 = $ReallocAsyncCtx4 + 16 | 0; //@line 12071
     HEAP32[$31 >> 2] = $6; //@line 12072
     sp = STACKTOP; //@line 12073
     return;
    }
    ___async_unwind = 0; //@line 12076
    HEAP32[$ReallocAsyncCtx4 >> 2] = 249; //@line 12077
    $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 12078
    HEAP32[$28 >> 2] = $10; //@line 12079
    $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 12080
    HEAP32[$29 >> 2] = $15; //@line 12081
    $30 = $ReallocAsyncCtx4 + 12 | 0; //@line 12082
    HEAP32[$30 >> 2] = $2; //@line 12083
    $31 = $ReallocAsyncCtx4 + 16 | 0; //@line 12084
    HEAP32[$31 >> 2] = $6; //@line 12085
    sp = STACKTOP; //@line 12086
    return;
   } else {
    $19 = HEAP32[$16 + 8 >> 2] | 0; //@line 12090
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 12091
    FUNCTION_TABLE_vi[$19 & 1023]($13); //@line 12092
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 248; //@line 12095
     $20 = $ReallocAsyncCtx3 + 4 | 0; //@line 12096
     HEAP32[$20 >> 2] = $10; //@line 12097
     $21 = $ReallocAsyncCtx3 + 8 | 0; //@line 12098
     HEAP32[$21 >> 2] = $15; //@line 12099
     $22 = $ReallocAsyncCtx3 + 12 | 0; //@line 12100
     HEAP32[$22 >> 2] = $13; //@line 12101
     $23 = $ReallocAsyncCtx3 + 16 | 0; //@line 12102
     HEAP32[$23 >> 2] = $9; //@line 12103
     $24 = $ReallocAsyncCtx3 + 20 | 0; //@line 12104
     HEAP32[$24 >> 2] = $2; //@line 12105
     $25 = $ReallocAsyncCtx3 + 24 | 0; //@line 12106
     HEAP32[$25 >> 2] = $6; //@line 12107
     sp = STACKTOP; //@line 12108
     return;
    }
    ___async_unwind = 0; //@line 12111
    HEAP32[$ReallocAsyncCtx3 >> 2] = 248; //@line 12112
    $20 = $ReallocAsyncCtx3 + 4 | 0; //@line 12113
    HEAP32[$20 >> 2] = $10; //@line 12114
    $21 = $ReallocAsyncCtx3 + 8 | 0; //@line 12115
    HEAP32[$21 >> 2] = $15; //@line 12116
    $22 = $ReallocAsyncCtx3 + 12 | 0; //@line 12117
    HEAP32[$22 >> 2] = $13; //@line 12118
    $23 = $ReallocAsyncCtx3 + 16 | 0; //@line 12119
    HEAP32[$23 >> 2] = $9; //@line 12120
    $24 = $ReallocAsyncCtx3 + 20 | 0; //@line 12121
    HEAP32[$24 >> 2] = $2; //@line 12122
    $25 = $ReallocAsyncCtx3 + 24 | 0; //@line 12123
    HEAP32[$25 >> 2] = $6; //@line 12124
    sp = STACKTOP; //@line 12125
    return;
   }
  }
 }
 $32 = $2 + 32 | 0; //@line 12130
 $33 = $2 + 44 | 0; //@line 12131
 $34 = HEAP32[$33 >> 2] | 0; //@line 12132
 if (!$34) {
  return;
 }
 $36 = $6 + 1912 | 0; //@line 12137
 if (($36 | 0) == ($32 | 0)) {
  return;
 }
 $38 = $6 + 1924 | 0; //@line 12142
 $39 = HEAP32[$38 >> 2] | 0; //@line 12143
 if (!$39) {
  $48 = HEAP32[$34 + 4 >> 2] | 0; //@line 12147
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 12148
  FUNCTION_TABLE_vii[$48 & 31]($36, $32); //@line 12149
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 251; //@line 12152
   $49 = $ReallocAsyncCtx6 + 4 | 0; //@line 12153
   HEAP32[$49 >> 2] = $33; //@line 12154
   $50 = $ReallocAsyncCtx6 + 8 | 0; //@line 12155
   HEAP32[$50 >> 2] = $38; //@line 12156
   sp = STACKTOP; //@line 12157
   return;
  }
  ___async_unwind = 0; //@line 12160
  HEAP32[$ReallocAsyncCtx6 >> 2] = 251; //@line 12161
  $49 = $ReallocAsyncCtx6 + 4 | 0; //@line 12162
  HEAP32[$49 >> 2] = $33; //@line 12163
  $50 = $ReallocAsyncCtx6 + 8 | 0; //@line 12164
  HEAP32[$50 >> 2] = $38; //@line 12165
  sp = STACKTOP; //@line 12166
  return;
 } else {
  $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 12170
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 12171
  FUNCTION_TABLE_vi[$42 & 1023]($36); //@line 12172
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 250; //@line 12175
   $43 = $ReallocAsyncCtx5 + 4 | 0; //@line 12176
   HEAP32[$43 >> 2] = $33; //@line 12177
   $44 = $ReallocAsyncCtx5 + 8 | 0; //@line 12178
   HEAP32[$44 >> 2] = $38; //@line 12179
   $45 = $ReallocAsyncCtx5 + 12 | 0; //@line 12180
   HEAP32[$45 >> 2] = $36; //@line 12181
   $46 = $ReallocAsyncCtx5 + 16 | 0; //@line 12182
   HEAP32[$46 >> 2] = $32; //@line 12183
   sp = STACKTOP; //@line 12184
   return;
  }
  ___async_unwind = 0; //@line 12187
  HEAP32[$ReallocAsyncCtx5 >> 2] = 250; //@line 12188
  $43 = $ReallocAsyncCtx5 + 4 | 0; //@line 12189
  HEAP32[$43 >> 2] = $33; //@line 12190
  $44 = $ReallocAsyncCtx5 + 8 | 0; //@line 12191
  HEAP32[$44 >> 2] = $38; //@line 12192
  $45 = $ReallocAsyncCtx5 + 12 | 0; //@line 12193
  HEAP32[$45 >> 2] = $36; //@line 12194
  $46 = $ReallocAsyncCtx5 + 16 | 0; //@line 12195
  HEAP32[$46 >> 2] = $32; //@line 12196
  sp = STACKTOP; //@line 12197
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_70($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22414
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22416
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22418
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22420
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22422
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22424
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22426
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22428
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22430
 if ($AsyncRetVal | 0) {
  $17 = HEAP32[$12 >> 2] | 0; //@line 22433
  if (!$17) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 22437
   HEAP32[$AsyncRetVal + 16 >> 2] = HEAP32[$8 >> 2]; //@line 22440
   _equeue_event_dtor($AsyncRetVal, 215); //@line 22441
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 22442
   $32 = _equeue_post($10, 216, $AsyncRetVal) | 0; //@line 22443
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 217; //@line 22446
    $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 22447
    HEAP32[$33 >> 2] = $12; //@line 22448
    $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 22449
    HEAP32[$34 >> 2] = $2; //@line 22450
    $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 22451
    HEAP32[$35 >> 2] = $14; //@line 22452
    $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 22453
    HEAP32[$36 >> 2] = $4; //@line 22454
    sp = STACKTOP; //@line 22455
    return;
   }
   HEAP32[___async_retval >> 2] = $32; //@line 22459
   ___async_unwind = 0; //@line 22460
   HEAP32[$ReallocAsyncCtx6 >> 2] = 217; //@line 22461
   $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 22462
   HEAP32[$33 >> 2] = $12; //@line 22463
   $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 22464
   HEAP32[$34 >> 2] = $2; //@line 22465
   $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 22466
   HEAP32[$35 >> 2] = $14; //@line 22467
   $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 22468
   HEAP32[$36 >> 2] = $4; //@line 22469
   sp = STACKTOP; //@line 22470
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 22474
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 22475
   FUNCTION_TABLE_vii[$20 & 31]($AsyncRetVal, $14); //@line 22476
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 214; //@line 22479
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 22480
    HEAP32[$21 >> 2] = $6; //@line 22481
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 22482
    HEAP32[$22 >> 2] = $AsyncRetVal; //@line 22483
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 22484
    HEAP32[$23 >> 2] = $8; //@line 22485
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 22486
    HEAP32[$24 >> 2] = $10; //@line 22487
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 22488
    HEAP32[$25 >> 2] = $12; //@line 22489
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 22490
    HEAP32[$26 >> 2] = $2; //@line 22491
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 22492
    HEAP32[$27 >> 2] = $14; //@line 22493
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 22494
    HEAP32[$28 >> 2] = $4; //@line 22495
    sp = STACKTOP; //@line 22496
    return;
   }
   ___async_unwind = 0; //@line 22499
   HEAP32[$ReallocAsyncCtx3 >> 2] = 214; //@line 22500
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 22501
   HEAP32[$21 >> 2] = $6; //@line 22502
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 22503
   HEAP32[$22 >> 2] = $AsyncRetVal; //@line 22504
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 22505
   HEAP32[$23 >> 2] = $8; //@line 22506
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 22507
   HEAP32[$24 >> 2] = $10; //@line 22508
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 22509
   HEAP32[$25 >> 2] = $12; //@line 22510
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 22511
   HEAP32[$26 >> 2] = $2; //@line 22512
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 22513
   HEAP32[$27 >> 2] = $14; //@line 22514
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 22515
   HEAP32[$28 >> 2] = $4; //@line 22516
   sp = STACKTOP; //@line 22517
   return;
  }
 }
 $38 = HEAP32[$12 >> 2] | 0; //@line 22521
 if ($38 | 0) {
  $41 = HEAP32[$38 + 8 >> 2] | 0; //@line 22525
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 22526
  FUNCTION_TABLE_vi[$41 & 1023]($14); //@line 22527
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 218; //@line 22530
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 22531
   HEAP32[$42 >> 2] = $2; //@line 22532
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 22533
   HEAP32[$43 >> 2] = 0; //@line 22534
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 22535
   HEAP32[$44 >> 2] = $4; //@line 22536
   sp = STACKTOP; //@line 22537
   return;
  }
  ___async_unwind = 0; //@line 22540
  HEAP32[$ReallocAsyncCtx4 >> 2] = 218; //@line 22541
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 22542
  HEAP32[$42 >> 2] = $2; //@line 22543
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 22544
  HEAP32[$43 >> 2] = 0; //@line 22545
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 22546
  HEAP32[$44 >> 2] = $4; //@line 22547
  sp = STACKTOP; //@line 22548
  return;
 }
 $45 = HEAP32[$2 >> 2] | 0; //@line 22551
 if (!$45) {
  HEAP32[___async_retval >> 2] = 0; //@line 22555
  return;
 }
 $48 = HEAP32[$45 + 8 >> 2] | 0; //@line 22559
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 22560
 FUNCTION_TABLE_vi[$48 & 1023]($4); //@line 22561
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 219; //@line 22564
  $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 22565
  HEAP32[$49 >> 2] = 0; //@line 22566
  sp = STACKTOP; //@line 22567
  return;
 }
 ___async_unwind = 0; //@line 22570
 HEAP32[$ReallocAsyncCtx5 >> 2] = 219; //@line 22571
 $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 22572
 HEAP32[$49 >> 2] = 0; //@line 22573
 sp = STACKTOP; //@line 22574
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_54($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21098
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21100
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21102
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21104
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21106
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21108
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21110
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21112
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21114
 if ($AsyncRetVal | 0) {
  $17 = HEAP32[$10 >> 2] | 0; //@line 21117
  if (!$17) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 21121
   HEAP16[$AsyncRetVal + 16 >> 1] = HEAP16[$12 >> 1] | 0; //@line 21124
   _equeue_event_dtor($AsyncRetVal, 224); //@line 21125
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 21126
   $32 = _equeue_post($14, 225, $AsyncRetVal) | 0; //@line 21127
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 226; //@line 21130
    $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 21131
    HEAP32[$33 >> 2] = $10; //@line 21132
    $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 21133
    HEAP32[$34 >> 2] = $2; //@line 21134
    $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 21135
    HEAP32[$35 >> 2] = $6; //@line 21136
    $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 21137
    HEAP32[$36 >> 2] = $4; //@line 21138
    sp = STACKTOP; //@line 21139
    return;
   }
   HEAP32[___async_retval >> 2] = $32; //@line 21143
   ___async_unwind = 0; //@line 21144
   HEAP32[$ReallocAsyncCtx6 >> 2] = 226; //@line 21145
   $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 21146
   HEAP32[$33 >> 2] = $10; //@line 21147
   $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 21148
   HEAP32[$34 >> 2] = $2; //@line 21149
   $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 21150
   HEAP32[$35 >> 2] = $6; //@line 21151
   $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 21152
   HEAP32[$36 >> 2] = $4; //@line 21153
   sp = STACKTOP; //@line 21154
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 21158
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 21159
   FUNCTION_TABLE_vii[$20 & 31]($AsyncRetVal, $6); //@line 21160
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 223; //@line 21163
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 21164
    HEAP32[$21 >> 2] = $8; //@line 21165
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 21166
    HEAP32[$22 >> 2] = $AsyncRetVal; //@line 21167
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 21168
    HEAP32[$23 >> 2] = $12; //@line 21169
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 21170
    HEAP32[$24 >> 2] = $14; //@line 21171
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 21172
    HEAP32[$25 >> 2] = $10; //@line 21173
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 21174
    HEAP32[$26 >> 2] = $2; //@line 21175
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 21176
    HEAP32[$27 >> 2] = $6; //@line 21177
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 21178
    HEAP32[$28 >> 2] = $4; //@line 21179
    sp = STACKTOP; //@line 21180
    return;
   }
   ___async_unwind = 0; //@line 21183
   HEAP32[$ReallocAsyncCtx3 >> 2] = 223; //@line 21184
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 21185
   HEAP32[$21 >> 2] = $8; //@line 21186
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 21187
   HEAP32[$22 >> 2] = $AsyncRetVal; //@line 21188
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 21189
   HEAP32[$23 >> 2] = $12; //@line 21190
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 21191
   HEAP32[$24 >> 2] = $14; //@line 21192
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 21193
   HEAP32[$25 >> 2] = $10; //@line 21194
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 21195
   HEAP32[$26 >> 2] = $2; //@line 21196
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 21197
   HEAP32[$27 >> 2] = $6; //@line 21198
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 21199
   HEAP32[$28 >> 2] = $4; //@line 21200
   sp = STACKTOP; //@line 21201
   return;
  }
 }
 $38 = HEAP32[$10 >> 2] | 0; //@line 21205
 if ($38 | 0) {
  $41 = HEAP32[$38 + 8 >> 2] | 0; //@line 21209
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 21210
  FUNCTION_TABLE_vi[$41 & 1023]($6); //@line 21211
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 227; //@line 21214
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 21215
   HEAP32[$42 >> 2] = $2; //@line 21216
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 21217
   HEAP32[$43 >> 2] = 0; //@line 21218
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 21219
   HEAP32[$44 >> 2] = $4; //@line 21220
   sp = STACKTOP; //@line 21221
   return;
  }
  ___async_unwind = 0; //@line 21224
  HEAP32[$ReallocAsyncCtx4 >> 2] = 227; //@line 21225
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 21226
  HEAP32[$42 >> 2] = $2; //@line 21227
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 21228
  HEAP32[$43 >> 2] = 0; //@line 21229
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 21230
  HEAP32[$44 >> 2] = $4; //@line 21231
  sp = STACKTOP; //@line 21232
  return;
 }
 $45 = HEAP32[$2 >> 2] | 0; //@line 21235
 if (!$45) {
  HEAP32[___async_retval >> 2] = 0; //@line 21239
  return;
 }
 $48 = HEAP32[$45 + 8 >> 2] | 0; //@line 21243
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 21244
 FUNCTION_TABLE_vi[$48 & 1023]($4); //@line 21245
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 228; //@line 21248
  $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 21249
  HEAP32[$49 >> 2] = 0; //@line 21250
  sp = STACKTOP; //@line 21251
  return;
 }
 ___async_unwind = 0; //@line 21254
 HEAP32[$ReallocAsyncCtx5 >> 2] = 228; //@line 21255
 $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 21256
 HEAP32[$49 >> 2] = 0; //@line 21257
 sp = STACKTOP; //@line 21258
 return;
}
function __ZN10LoRaMacMib11get_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$sroa$5 = 0, $$sroa$5$0$$sroa_raw_idx = 0, $34 = 0, $39 = 0, $40 = 0, $45 = 0, sp = 0;
 sp = STACKTOP; //@line 20782
 STACKTOP = STACKTOP + 16 | 0; //@line 20783
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 20783
 $$sroa$5 = sp; //@line 20784
 L1 : do {
  if (!$1) {
   $$0 = -1003; //@line 20788
  } else {
   do {
    switch (HEAP32[$1 >> 2] | 0) {
    case 0:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 >> 2]; //@line 20796
      $$0 = 0; //@line 20797
      break L1;
      break;
     }
    case 1:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 12 >> 0] | 0; //@line 20805
      $$0 = 0; //@line 20806
      break L1;
      break;
     }
    case 2:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 796 >> 0] | 0; //@line 20814
      $$0 = 0; //@line 20815
      break L1;
      break;
     }
    case 3:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 588 >> 2]; //@line 20823
      $$0 = 0; //@line 20824
      break L1;
      break;
     }
    case 4:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 592 >> 2]; //@line 20832
      $$0 = 0; //@line 20833
      break L1;
      break;
     }
    case 5:
     {
      HEAP32[$1 + 4 >> 2] = $2 + 552; //@line 20840
      $$0 = 0; //@line 20841
      break L1;
      break;
     }
    case 6:
     {
      HEAP32[$1 + 4 >> 2] = $2 + 568; //@line 20848
      $$0 = 0; //@line 20849
      break L1;
      break;
     }
    case 7:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 8 >> 0] | 0; //@line 20857
      $$0 = 0; //@line 20858
      break L1;
      break;
     }
    case 8:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 9 >> 0] | 0; //@line 20866
      $$0 = 0; //@line 20867
      break L1;
      break;
     }
    case 9:
     {
      HEAP32[$1 + 4 >> 2] = __ZN7LoRaPHY16get_phy_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 20875
      $$0 = 0; //@line 20876
      break L1;
      break;
     }
    case 10:
     {
      $34 = $2 + 772 | 0; //@line 20883
      $39 = HEAP32[$34 + 4 >> 2] | 0; //@line 20888
      $40 = $1 + 4 | 0; //@line 20889
      HEAP32[$40 >> 2] = HEAP32[$34 >> 2]; //@line 20891
      HEAP32[$40 + 4 >> 2] = $39; //@line 20894
      $$0 = 0; //@line 20895
      break L1;
      break;
     }
    case 11:
     {
      $45 = __ZN7LoRaPHY24get_default_rx2_datarateEv(HEAP32[$0 >> 2] | 0) | 0; //@line 20901
      HEAP32[$1 + 4 >> 2] = __ZN7LoRaPHY25get_default_rx2_frequencyEv(HEAP32[$0 >> 2] | 0) | 0; //@line 20905
      HEAP8[$1 + 8 >> 0] = $45; //@line 20907
      $$sroa$5$0$$sroa_raw_idx = $1 + 9 | 0; //@line 20908
      HEAP8[$$sroa$5$0$$sroa_raw_idx >> 0] = HEAP8[$$sroa$5 >> 0] | 0; //@line 20909
      HEAP8[$$sroa$5$0$$sroa_raw_idx + 1 >> 0] = HEAP8[$$sroa$5 + 1 >> 0] | 0; //@line 20909
      HEAP8[$$sroa$5$0$$sroa_raw_idx + 2 >> 0] = HEAP8[$$sroa$5 + 2 >> 0] | 0; //@line 20909
      $$0 = 0; //@line 20910
      break L1;
      break;
     }
    case 13:
     {
      HEAP32[$1 + 4 >> 2] = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 1) | 0; //@line 20918
      $$0 = 0; //@line 20919
      break L1;
      break;
     }
    case 12:
     {
      HEAP32[$1 + 4 >> 2] = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 0) | 0; //@line 20927
      $$0 = 0; //@line 20928
      break L1;
      break;
     }
    case 14:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 768 >> 0] | 0; //@line 20936
      $$0 = 0; //@line 20937
      break L1;
      break;
     }
    case 15:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 748 >> 2]; //@line 20945
      $$0 = 0; //@line 20946
      break L1;
      break;
     }
    case 16:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 752 >> 2]; //@line 20954
      $$0 = 0; //@line 20955
      break L1;
      break;
     }
    case 17:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 756 >> 2]; //@line 20963
      $$0 = 0; //@line 20964
      break L1;
      break;
     }
    case 18:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 760 >> 2]; //@line 20972
      $$0 = 0; //@line 20973
      break L1;
      break;
     }
    case 19:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 764 >> 2]; //@line 20981
      $$0 = 0; //@line 20982
      break L1;
      break;
     }
    case 20:
     {
      HEAP8[$1 + 4 >> 0] = __ZN7LoRaPHY23get_default_tx_datarateEv(HEAP32[$0 >> 2] | 0) | 0; //@line 20990
      $$0 = 0; //@line 20991
      break L1;
      break;
     }
    case 21:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 737 >> 0] | 0; //@line 20999
      $$0 = 0; //@line 21000
      break L1;
      break;
     }
    case 23:
     {
      HEAP8[$1 + 4 >> 0] = __ZN7LoRaPHY20get_default_tx_powerEv(HEAP32[$0 >> 2] | 0) | 0; //@line 21008
      $$0 = 0; //@line 21009
      break L1;
      break;
     }
    case 22:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 736 >> 0] | 0; //@line 21017
      $$0 = 0; //@line 21018
      break L1;
      break;
     }
    case 24:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 596 >> 2]; //@line 21026
      $$0 = 0; //@line 21027
      break L1;
      break;
     }
    case 25:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 600 >> 2]; //@line 21035
      $$0 = 0; //@line 21036
      break L1;
      break;
     }
    case 26:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 848 >> 2]; //@line 21044
      $$0 = 0; //@line 21045
      break L1;
      break;
     }
    case 27:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 740 >> 2]; //@line 21053
      $$0 = 0; //@line 21054
      break L1;
      break;
     }
    case 28:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 744 >> 0] | 0; //@line 21062
      $$0 = 0; //@line 21063
      break L1;
      break;
     }
    case 29:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 788 >> 2]; //@line 21071
      $$0 = 0; //@line 21072
      break L1;
      break;
     }
    default:
     {
      $$0 = -1002; //@line 21077
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 STACKTOP = sp; //@line 21084
 return $$0 | 0; //@line 21084
}
function __ZN12LoRaWANStack9handle_txEhPKhth($0, $1, $2, $3, $trunc) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $trunc = $trunc | 0;
 var $$0 = 0, $$0$i34 = 0, $$1 = 0, $10 = 0, $16 = 0, $17 = 0, $25 = 0, $31 = 0, $4 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $68 = 0, $73 = 0, $75 = 0, $8 = 0, $83 = 0, $AsyncCtx = 0, $AsyncCtx16 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7567
 STACKTOP = STACKTOP + 64 | 0; //@line 7568
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 7568
 $vararg_buffer10 = sp + 32 | 0; //@line 7569
 $vararg_buffer6 = sp + 24 | 0; //@line 7570
 $vararg_buffer4 = sp + 16 | 0; //@line 7571
 $vararg_buffer2 = sp + 8 | 0; //@line 7572
 $vararg_buffer = sp; //@line 7573
 $4 = sp + 40 | 0; //@line 7574
 $5 = $0 + 1932 | 0; //@line 7575
 $8 = $0 + 1964 | 0; //@line 7578
 $10 = HEAPU8[$8 >> 0] | 0; //@line 7580
 HEAP32[$vararg_buffer >> 2] = HEAPU8[$5 >> 0]; //@line 7581
 HEAP32[$vararg_buffer + 4 >> 2] = $10; //@line 7583
 _mbed_tracef(16, 12332, 12901, $vararg_buffer); //@line 7584
 if (!(HEAP8[$5 >> 0] | 0)) {
  $$1 = -1017; //@line 7588
  STACKTOP = sp; //@line 7589
  return $$1 | 0; //@line 7589
 }
 if (HEAP8[$8 >> 0] | 0) {
  $$1 = -1001; //@line 7594
  STACKTOP = sp; //@line 7595
  return $$1 | 0; //@line 7595
 }
 $16 = $3 << 16 >> 16 == 0; //@line 7598
 if (!(($2 | 0) != 0 | $16)) {
  $$1 = -1003; //@line 7601
  STACKTOP = sp; //@line 7602
  return $$1 | 0; //@line 7602
 }
 HEAP32[$4 >> 2] = 1; //@line 7604
 $17 = $0 + 4 | 0; //@line 7605
 if (!(__ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($17, $4) | 0)) {
  if (!(HEAP8[$4 + 4 >> 0] | 0)) {
   $$0 = -1009; //@line 7613
  } else {
   label = 6; //@line 7615
  }
 } else {
  label = 6; //@line 7618
 }
 do {
  if ((label | 0) == 6) {
   if (($1 + -1 & 255) >= 223) {
    _mbed_tracef(2, 12332, 12954, $vararg_buffer2); //@line 7625
    $$0 = -1015; //@line 7626
    break;
   }
   $25 = $0 + 2285 | 0; //@line 7629
   HEAP8[$25 >> 0] = $1; //@line 7630
   if ($trunc << 24 >> 24 == 0 | ($trunc & 15) == 3) {
    _mbed_tracef(2, 12332, 12991, $vararg_buffer4); //@line 7636
    $$0 = -1003; //@line 7637
    break;
   }
   HEAP8[$0 + 1965 >> 0] = $1; //@line 7641
   $AsyncCtx = _emscripten_alloc_async_context(52, sp) | 0; //@line 7643
   $31 = __ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t($17, $3 & 255, $vararg_buffer) | 0; //@line 7644
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 237; //@line 7647
    HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 7649
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 7651
    HEAP16[$AsyncCtx + 12 >> 1] = $3; //@line 7653
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer6; //@line 7655
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer6; //@line 7657
    HEAP32[$AsyncCtx + 24 >> 2] = $0; //@line 7659
    HEAP32[$AsyncCtx + 28 >> 2] = $2; //@line 7661
    HEAP8[$AsyncCtx + 32 >> 0] = $16 & 1; //@line 7664
    HEAP8[$AsyncCtx + 33 >> 0] = $trunc; //@line 7666
    HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer10; //@line 7668
    HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer10; //@line 7670
    HEAP32[$AsyncCtx + 44 >> 2] = $25; //@line 7672
    HEAP32[$AsyncCtx + 48 >> 2] = $4; //@line 7674
    sp = STACKTOP; //@line 7675
    STACKTOP = sp; //@line 7676
    return 0; //@line 7676
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 7678
   $47 = ($31 | 0) == -1010 ? HEAP8[$vararg_buffer >> 0] | 0 : HEAP8[$vararg_buffer + 1 >> 0] | 0; //@line 7683
   $$0$i34 = $47 & 255; //@line 7684
   $48 = $47 & 255; //@line 7685
   $49 = $3 & 65535; //@line 7686
   if (($$0$i34 & 65535) < ($3 & 65535)) {
    HEAP32[$vararg_buffer6 >> 2] = $49; //@line 7689
    HEAP32[$vararg_buffer6 + 4 >> 2] = $48; //@line 7691
    _mbed_tracef(8, 12332, 13051, $vararg_buffer6); //@line 7692
    HEAP16[$0 + 2232 >> 1] = $49 - $48; //@line 7696
    HEAP16[$0 + 2230 >> 1] = $$0$i34; //@line 7698
    _memcpy($0 + 1975 | 0, $2 | 0, $48 | 0) | 0; //@line 7700
   } else {
    HEAP16[$0 + 2230 >> 1] = $3; //@line 7703
    HEAP16[$0 + 2232 >> 1] = 0; //@line 7705
    if (!$16) {
     _memcpy($0 + 1975 | 0, $2 | 0, $49 | 0) | 0; //@line 7708
    }
   }
   switch ($trunc & 15) {
   case 9:
   case 5:
   case 1:
    {
     HEAP32[$0 + 1968 >> 2] = 0; //@line 7715
     HEAP8[$0 + 1972 >> 0] = HEAP8[$25 >> 0] | 0; //@line 7718
     switch ($trunc & 15) {
     case 6:
     case 2:
      {
       label = 18; //@line 7722
       break;
      }
     default:
      {}
     }
     break;
    }
   case 10:
   case 6:
   case 2:
    {
     label = 18; //@line 7731
     break;
    }
   default:
    {}
   }
   if ((label | 0) == 18) {
    HEAP32[$0 + 1968 >> 2] = 1; //@line 7739
    HEAP8[$0 + 1972 >> 0] = HEAP8[$25 >> 0] | 0; //@line 7742
    HEAP8[$0 + 1974 >> 0] = HEAP8[$0 + 2284 >> 0] | 0; //@line 7746
   }
   $68 = $0 + 2230 | 0; //@line 7748
   $73 = HEAPU16[$0 + 2232 >> 1] | 0; //@line 7753
   HEAP32[$vararg_buffer10 >> 2] = HEAPU16[$68 >> 1]; //@line 7754
   HEAP32[$vararg_buffer10 + 4 >> 2] = $73; //@line 7756
   _mbed_tracef(8, 12332, 13106, $vararg_buffer10); //@line 7757
   HEAP32[$0 + 1876 >> 2] = 5; //@line 7759
   $AsyncCtx16 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7760
   $75 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 7761
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 238; //@line 7764
    HEAP32[$AsyncCtx16 + 4 >> 2] = $68; //@line 7766
    HEAP32[$AsyncCtx16 + 8 >> 2] = $4; //@line 7768
    sp = STACKTOP; //@line 7769
    STACKTOP = sp; //@line 7770
    return 0; //@line 7770
   }
   _emscripten_free_async_context($AsyncCtx16 | 0); //@line 7772
   if (!$75) {
    $83 = HEAPU16[$68 >> 1] | 0; //@line 7777
   } else {
    $83 = $75 << 16 >> 16; //@line 7781
   }
   $$0 = $83 & 65535; //@line 7784
  }
 } while (0);
 $$1 = $$0; //@line 7787
 STACKTOP = sp; //@line 7788
 return $$1 | 0; //@line 7788
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_274($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 18044
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18046
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18048
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18052
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18054
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18056
 $13 = $8 + 12 | 0; //@line 18057
 HEAP32[$8 >> 2] = 473; //@line 18058
 HEAP32[$8 + 4 >> 2] = 0; //@line 18060
 HEAP32[$8 + 8 >> 2] = $2; //@line 18062
 HEAP32[$13 >> 2] = 912; //@line 18063
 $14 = $2 + 1276 | 0; //@line 18064
 if (($14 | 0) == ($8 | 0)) {
  $39 = HEAP32[230] | 0; //@line 18068
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(24) | 0; //@line 18069
  FUNCTION_TABLE_vi[$39 & 1023]($8); //@line 18070
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 476; //@line 18073
   $40 = $ReallocAsyncCtx9 + 4 | 0; //@line 18074
   HEAP32[$40 >> 2] = $2; //@line 18075
   $41 = $ReallocAsyncCtx9 + 8 | 0; //@line 18076
   HEAP32[$41 >> 2] = $4; //@line 18077
   $42 = $ReallocAsyncCtx9 + 12 | 0; //@line 18078
   HEAP32[$42 >> 2] = $8; //@line 18079
   $43 = $ReallocAsyncCtx9 + 16 | 0; //@line 18080
   HEAP32[$43 >> 2] = $10; //@line 18081
   $44 = $ReallocAsyncCtx9 + 20 | 0; //@line 18082
   HEAP32[$44 >> 2] = $12; //@line 18083
   sp = STACKTOP; //@line 18084
   return;
  }
  ___async_unwind = 0; //@line 18087
  HEAP32[$ReallocAsyncCtx9 >> 2] = 476; //@line 18088
  $40 = $ReallocAsyncCtx9 + 4 | 0; //@line 18089
  HEAP32[$40 >> 2] = $2; //@line 18090
  $41 = $ReallocAsyncCtx9 + 8 | 0; //@line 18091
  HEAP32[$41 >> 2] = $4; //@line 18092
  $42 = $ReallocAsyncCtx9 + 12 | 0; //@line 18093
  HEAP32[$42 >> 2] = $8; //@line 18094
  $43 = $ReallocAsyncCtx9 + 16 | 0; //@line 18095
  HEAP32[$43 >> 2] = $10; //@line 18096
  $44 = $ReallocAsyncCtx9 + 20 | 0; //@line 18097
  HEAP32[$44 >> 2] = $12; //@line 18098
  sp = STACKTOP; //@line 18099
  return;
 }
 $16 = $2 + 1288 | 0; //@line 18102
 $17 = HEAP32[$16 >> 2] | 0; //@line 18103
 if (!$17) {
  $30 = HEAP32[229] | 0; //@line 18107
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 18108
  FUNCTION_TABLE_vii[$30 & 31]($14, $8); //@line 18109
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 475; //@line 18112
   $31 = $ReallocAsyncCtx8 + 4 | 0; //@line 18113
   HEAP32[$31 >> 2] = $2; //@line 18114
   $32 = $ReallocAsyncCtx8 + 8 | 0; //@line 18115
   HEAP32[$32 >> 2] = $4; //@line 18116
   $33 = $ReallocAsyncCtx8 + 12 | 0; //@line 18117
   HEAP32[$33 >> 2] = $8; //@line 18118
   $34 = $ReallocAsyncCtx8 + 16 | 0; //@line 18119
   HEAP32[$34 >> 2] = $10; //@line 18120
   $35 = $ReallocAsyncCtx8 + 20 | 0; //@line 18121
   HEAP32[$35 >> 2] = $13; //@line 18122
   $36 = $ReallocAsyncCtx8 + 24 | 0; //@line 18123
   HEAP32[$36 >> 2] = $16; //@line 18124
   $37 = $ReallocAsyncCtx8 + 28 | 0; //@line 18125
   HEAP32[$37 >> 2] = $12; //@line 18126
   sp = STACKTOP; //@line 18127
   return;
  }
  ___async_unwind = 0; //@line 18130
  HEAP32[$ReallocAsyncCtx8 >> 2] = 475; //@line 18131
  $31 = $ReallocAsyncCtx8 + 4 | 0; //@line 18132
  HEAP32[$31 >> 2] = $2; //@line 18133
  $32 = $ReallocAsyncCtx8 + 8 | 0; //@line 18134
  HEAP32[$32 >> 2] = $4; //@line 18135
  $33 = $ReallocAsyncCtx8 + 12 | 0; //@line 18136
  HEAP32[$33 >> 2] = $8; //@line 18137
  $34 = $ReallocAsyncCtx8 + 16 | 0; //@line 18138
  HEAP32[$34 >> 2] = $10; //@line 18139
  $35 = $ReallocAsyncCtx8 + 20 | 0; //@line 18140
  HEAP32[$35 >> 2] = $13; //@line 18141
  $36 = $ReallocAsyncCtx8 + 24 | 0; //@line 18142
  HEAP32[$36 >> 2] = $16; //@line 18143
  $37 = $ReallocAsyncCtx8 + 28 | 0; //@line 18144
  HEAP32[$37 >> 2] = $12; //@line 18145
  sp = STACKTOP; //@line 18146
  return;
 } else {
  $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 18150
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 18151
  FUNCTION_TABLE_vi[$20 & 1023]($14); //@line 18152
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 474; //@line 18155
   $21 = $ReallocAsyncCtx7 + 4 | 0; //@line 18156
   HEAP32[$21 >> 2] = $2; //@line 18157
   $22 = $ReallocAsyncCtx7 + 8 | 0; //@line 18158
   HEAP32[$22 >> 2] = $13; //@line 18159
   $23 = $ReallocAsyncCtx7 + 12 | 0; //@line 18160
   HEAP32[$23 >> 2] = $4; //@line 18161
   $24 = $ReallocAsyncCtx7 + 16 | 0; //@line 18162
   HEAP32[$24 >> 2] = $16; //@line 18163
   $25 = $ReallocAsyncCtx7 + 20 | 0; //@line 18164
   HEAP32[$25 >> 2] = $8; //@line 18165
   $26 = $ReallocAsyncCtx7 + 24 | 0; //@line 18166
   HEAP32[$26 >> 2] = $10; //@line 18167
   $27 = $ReallocAsyncCtx7 + 28 | 0; //@line 18168
   HEAP32[$27 >> 2] = $14; //@line 18169
   $28 = $ReallocAsyncCtx7 + 32 | 0; //@line 18170
   HEAP32[$28 >> 2] = $12; //@line 18171
   sp = STACKTOP; //@line 18172
   return;
  }
  ___async_unwind = 0; //@line 18175
  HEAP32[$ReallocAsyncCtx7 >> 2] = 474; //@line 18176
  $21 = $ReallocAsyncCtx7 + 4 | 0; //@line 18177
  HEAP32[$21 >> 2] = $2; //@line 18178
  $22 = $ReallocAsyncCtx7 + 8 | 0; //@line 18179
  HEAP32[$22 >> 2] = $13; //@line 18180
  $23 = $ReallocAsyncCtx7 + 12 | 0; //@line 18181
  HEAP32[$23 >> 2] = $4; //@line 18182
  $24 = $ReallocAsyncCtx7 + 16 | 0; //@line 18183
  HEAP32[$24 >> 2] = $16; //@line 18184
  $25 = $ReallocAsyncCtx7 + 20 | 0; //@line 18185
  HEAP32[$25 >> 2] = $8; //@line 18186
  $26 = $ReallocAsyncCtx7 + 24 | 0; //@line 18187
  HEAP32[$26 >> 2] = $10; //@line 18188
  $27 = $ReallocAsyncCtx7 + 28 | 0; //@line 18189
  HEAP32[$27 >> 2] = $14; //@line 18190
  $28 = $ReallocAsyncCtx7 + 32 | 0; //@line 18191
  HEAP32[$28 >> 2] = $12; //@line 18192
  sp = STACKTOP; //@line 18193
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_325($0) {
 $0 = $0 | 0;
 var $$pre17 = 0, $10 = 0, $11 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 23402
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23404
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23406
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23408
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 23413
  _mbed_assert_internal(13588, 13597, 215); //@line 23414
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 390; //@line 23417
   $9 = $ReallocAsyncCtx14 + 4 | 0; //@line 23418
   HEAP32[$9 >> 2] = $2; //@line 23419
   $10 = $ReallocAsyncCtx14 + 8 | 0; //@line 23420
   HEAP32[$10 >> 2] = $4; //@line 23421
   $11 = $ReallocAsyncCtx14 + 12 | 0; //@line 23422
   HEAP32[$11 >> 2] = $6; //@line 23423
   sp = STACKTOP; //@line 23424
   return;
  }
  ___async_unwind = 0; //@line 23427
  HEAP32[$ReallocAsyncCtx14 >> 2] = 390; //@line 23428
  $9 = $ReallocAsyncCtx14 + 4 | 0; //@line 23429
  HEAP32[$9 >> 2] = $2; //@line 23430
  $10 = $ReallocAsyncCtx14 + 8 | 0; //@line 23431
  HEAP32[$10 >> 2] = $4; //@line 23432
  $11 = $ReallocAsyncCtx14 + 12 | 0; //@line 23433
  HEAP32[$11 >> 2] = $6; //@line 23434
  sp = STACKTOP; //@line 23435
  return;
 }
 HEAP32[$4 + 364 >> 2] = 2; //@line 23439
 $$pre17 = HEAP8[$2 >> 0] | 0; //@line 23440
 if (!($$pre17 & 4)) {
  $16 = HEAP32[$4 + 1324 >> 2] | 0; //@line 23445
  $17 = $16 + 16 | 0; //@line 23446
  $19 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 23448
  $20 = $16 + 28 | 0; //@line 23449
  $21 = HEAP32[$20 >> 2] | 0; //@line 23450
  if (!$21) {
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 23453
   _mbed_assert_internal(15615, 15620, 1102); //@line 23454
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 391; //@line 23457
    $23 = $ReallocAsyncCtx13 + 4 | 0; //@line 23458
    HEAP32[$23 >> 2] = $20; //@line 23459
    $24 = $ReallocAsyncCtx13 + 8 | 0; //@line 23460
    HEAP32[$24 >> 2] = $17; //@line 23461
    $25 = $ReallocAsyncCtx13 + 12 | 0; //@line 23462
    HEAP32[$25 >> 2] = $19; //@line 23463
    $26 = $ReallocAsyncCtx13 + 16 | 0; //@line 23464
    HEAP32[$26 >> 2] = $2; //@line 23465
    $27 = $ReallocAsyncCtx13 + 20 | 0; //@line 23466
    HEAP32[$27 >> 2] = $4; //@line 23467
    sp = STACKTOP; //@line 23468
    return;
   }
   ___async_unwind = 0; //@line 23471
   HEAP32[$ReallocAsyncCtx13 >> 2] = 391; //@line 23472
   $23 = $ReallocAsyncCtx13 + 4 | 0; //@line 23473
   HEAP32[$23 >> 2] = $20; //@line 23474
   $24 = $ReallocAsyncCtx13 + 8 | 0; //@line 23475
   HEAP32[$24 >> 2] = $17; //@line 23476
   $25 = $ReallocAsyncCtx13 + 12 | 0; //@line 23477
   HEAP32[$25 >> 2] = $19; //@line 23478
   $26 = $ReallocAsyncCtx13 + 16 | 0; //@line 23479
   HEAP32[$26 >> 2] = $2; //@line 23480
   $27 = $ReallocAsyncCtx13 + 20 | 0; //@line 23481
   HEAP32[$27 >> 2] = $4; //@line 23482
   sp = STACKTOP; //@line 23483
   return;
  } else {
   $28 = HEAP32[$21 >> 2] | 0; //@line 23486
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 23487
   FUNCTION_TABLE_vii[$28 & 31]($17, $19); //@line 23488
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 392; //@line 23491
    $29 = $ReallocAsyncCtx4 + 4 | 0; //@line 23492
    HEAP32[$29 >> 2] = $2; //@line 23493
    $30 = $ReallocAsyncCtx4 + 8 | 0; //@line 23494
    HEAP32[$30 >> 2] = $4; //@line 23495
    sp = STACKTOP; //@line 23496
    return;
   }
   ___async_unwind = 0; //@line 23499
   HEAP32[$ReallocAsyncCtx4 >> 2] = 392; //@line 23500
   $29 = $ReallocAsyncCtx4 + 4 | 0; //@line 23501
   HEAP32[$29 >> 2] = $2; //@line 23502
   $30 = $ReallocAsyncCtx4 + 8 | 0; //@line 23503
   HEAP32[$30 >> 2] = $4; //@line 23504
   sp = STACKTOP; //@line 23505
   return;
  }
 }
 $31 = $$pre17 & -5; //@line 23509
 HEAP8[$2 >> 0] = $31; //@line 23510
 if (!($31 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $31 & -17; //@line 23517
 $36 = HEAP32[$4 + 1324 >> 2] | 0; //@line 23519
 $37 = $36 + 48 | 0; //@line 23520
 $39 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 23522
 $40 = $36 + 60 | 0; //@line 23523
 $41 = HEAP32[$40 >> 2] | 0; //@line 23524
 if (!$41) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 23527
  _mbed_assert_internal(15615, 15620, 1102); //@line 23528
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 393; //@line 23531
   $43 = $ReallocAsyncCtx12 + 4 | 0; //@line 23532
   HEAP32[$43 >> 2] = $40; //@line 23533
   $44 = $ReallocAsyncCtx12 + 8 | 0; //@line 23534
   HEAP32[$44 >> 2] = $37; //@line 23535
   $45 = $ReallocAsyncCtx12 + 12 | 0; //@line 23536
   HEAP32[$45 >> 2] = $39; //@line 23537
   sp = STACKTOP; //@line 23538
   return;
  }
  ___async_unwind = 0; //@line 23541
  HEAP32[$ReallocAsyncCtx12 >> 2] = 393; //@line 23542
  $43 = $ReallocAsyncCtx12 + 4 | 0; //@line 23543
  HEAP32[$43 >> 2] = $40; //@line 23544
  $44 = $ReallocAsyncCtx12 + 8 | 0; //@line 23545
  HEAP32[$44 >> 2] = $37; //@line 23546
  $45 = $ReallocAsyncCtx12 + 12 | 0; //@line 23547
  HEAP32[$45 >> 2] = $39; //@line 23548
  sp = STACKTOP; //@line 23549
  return;
 } else {
  $46 = HEAP32[$41 >> 2] | 0; //@line 23552
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 23553
  FUNCTION_TABLE_vii[$46 & 31]($37, $39); //@line 23554
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 394; //@line 23557
   sp = STACKTOP; //@line 23558
   return;
  }
  ___async_unwind = 0; //@line 23561
  HEAP32[$ReallocAsyncCtx5 >> 2] = 394; //@line 23562
  sp = STACKTOP; //@line 23563
  return;
 }
}
function _mbedtls_gcm_update__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$061 = 0, $$163 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $67 = 0, $68 = 0, $75 = 0, $8 = 0, $84 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12990
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12992
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12994
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12996
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12998
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13000
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13002
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13004
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13006
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13008
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13010
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 13012
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 13014
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 13016
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 13018
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 13020
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 13022
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13024
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 13027
  $84 = ___async_retval; //@line 13028
  HEAP32[$84 >> 2] = $$0; //@line 13029
  return;
 }
 if ($2 | 0) {
  $$163 = 0; //@line 13034
  do {
   $67 = $8 + 376 + $$163 | 0; //@line 13038
   $68 = $14 + $$163 | 0; //@line 13039
   if (!(HEAP32[$18 >> 2] | 0)) {
    HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ HEAP8[$68 >> 0]; //@line 13044
   }
   $75 = HEAP8[$68 >> 0] ^ HEAP8[$20 + $$163 >> 0]; //@line 13049
   HEAP8[$16 + $$163 >> 0] = $75; //@line 13051
   if ((HEAP32[$18 >> 2] | 0) == 1) {
    HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ $75; //@line 13057
   }
   $$163 = $$163 + 1 | 0; //@line 13059
  } while ($$163 >>> 0 < $2 >>> 0);
 }
 _gcm_mult($8, $10, $10); //@line 13068
 $35 = $12 - $2 | 0; //@line 13069
 $51 = $14 + $2 | 0; //@line 13070
 $53 = $16 + $2 | 0; //@line 13071
 if (!$35) {
  $$0 = 0; //@line 13074
  $84 = ___async_retval; //@line 13075
  HEAP32[$84 >> 2] = $$0; //@line 13076
  return;
 }
 $36 = $35 >>> 0 < 16 ? $35 : 16; //@line 13080
 $$061 = 16; //@line 13081
 do {
  if ($$061 >>> 0 <= 12) {
   break;
  }
  $$061 = $$061 + -1 | 0; //@line 13087
  $39 = $8 + 360 + $$061 | 0; //@line 13088
  $41 = (HEAP8[$39 >> 0] | 0) + 1 << 24 >> 24; //@line 13090
  HEAP8[$39 >> 0] = $41; //@line 13091
 } while (!($41 << 24 >> 24));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(68) | 0; //@line 13099
 $43 = _mbedtls_cipher_update($28, $30, 16, $6, $32) | 0; //@line 13100
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 594; //@line 13103
  $44 = $ReallocAsyncCtx + 4 | 0; //@line 13104
  HEAP32[$44 >> 2] = $36; //@line 13105
  $45 = $ReallocAsyncCtx + 8 | 0; //@line 13106
  HEAP32[$45 >> 2] = $4; //@line 13107
  $46 = $ReallocAsyncCtx + 12 | 0; //@line 13108
  HEAP32[$46 >> 2] = $6; //@line 13109
  $47 = $ReallocAsyncCtx + 16 | 0; //@line 13110
  HEAP32[$47 >> 2] = $8; //@line 13111
  $48 = $ReallocAsyncCtx + 20 | 0; //@line 13112
  HEAP32[$48 >> 2] = $10; //@line 13113
  $49 = $ReallocAsyncCtx + 24 | 0; //@line 13114
  HEAP32[$49 >> 2] = $35; //@line 13115
  $50 = $ReallocAsyncCtx + 28 | 0; //@line 13116
  HEAP32[$50 >> 2] = $51; //@line 13117
  $52 = $ReallocAsyncCtx + 32 | 0; //@line 13118
  HEAP32[$52 >> 2] = $53; //@line 13119
  $54 = $ReallocAsyncCtx + 36 | 0; //@line 13120
  HEAP32[$54 >> 2] = $18; //@line 13121
  $55 = $ReallocAsyncCtx + 40 | 0; //@line 13122
  HEAP32[$55 >> 2] = $20; //@line 13123
  $56 = $ReallocAsyncCtx + 44 | 0; //@line 13124
  HEAP32[$56 >> 2] = $22; //@line 13125
  $57 = $ReallocAsyncCtx + 48 | 0; //@line 13126
  HEAP32[$57 >> 2] = $24; //@line 13127
  $58 = $ReallocAsyncCtx + 52 | 0; //@line 13128
  HEAP32[$58 >> 2] = $26; //@line 13129
  $59 = $ReallocAsyncCtx + 56 | 0; //@line 13130
  HEAP32[$59 >> 2] = $28; //@line 13131
  $60 = $ReallocAsyncCtx + 60 | 0; //@line 13132
  HEAP32[$60 >> 2] = $30; //@line 13133
  $61 = $ReallocAsyncCtx + 64 | 0; //@line 13134
  HEAP32[$61 >> 2] = $32; //@line 13135
  sp = STACKTOP; //@line 13136
  return;
 }
 HEAP32[___async_retval >> 2] = $43; //@line 13140
 ___async_unwind = 0; //@line 13141
 HEAP32[$ReallocAsyncCtx >> 2] = 594; //@line 13142
 $44 = $ReallocAsyncCtx + 4 | 0; //@line 13143
 HEAP32[$44 >> 2] = $36; //@line 13144
 $45 = $ReallocAsyncCtx + 8 | 0; //@line 13145
 HEAP32[$45 >> 2] = $4; //@line 13146
 $46 = $ReallocAsyncCtx + 12 | 0; //@line 13147
 HEAP32[$46 >> 2] = $6; //@line 13148
 $47 = $ReallocAsyncCtx + 16 | 0; //@line 13149
 HEAP32[$47 >> 2] = $8; //@line 13150
 $48 = $ReallocAsyncCtx + 20 | 0; //@line 13151
 HEAP32[$48 >> 2] = $10; //@line 13152
 $49 = $ReallocAsyncCtx + 24 | 0; //@line 13153
 HEAP32[$49 >> 2] = $35; //@line 13154
 $50 = $ReallocAsyncCtx + 28 | 0; //@line 13155
 HEAP32[$50 >> 2] = $51; //@line 13156
 $52 = $ReallocAsyncCtx + 32 | 0; //@line 13157
 HEAP32[$52 >> 2] = $53; //@line 13158
 $54 = $ReallocAsyncCtx + 36 | 0; //@line 13159
 HEAP32[$54 >> 2] = $18; //@line 13160
 $55 = $ReallocAsyncCtx + 40 | 0; //@line 13161
 HEAP32[$55 >> 2] = $20; //@line 13162
 $56 = $ReallocAsyncCtx + 44 | 0; //@line 13163
 HEAP32[$56 >> 2] = $22; //@line 13164
 $57 = $ReallocAsyncCtx + 48 | 0; //@line 13165
 HEAP32[$57 >> 2] = $24; //@line 13166
 $58 = $ReallocAsyncCtx + 52 | 0; //@line 13167
 HEAP32[$58 >> 2] = $26; //@line 13168
 $59 = $ReallocAsyncCtx + 56 | 0; //@line 13169
 HEAP32[$59 >> 2] = $28; //@line 13170
 $60 = $ReallocAsyncCtx + 60 | 0; //@line 13171
 HEAP32[$60 >> 2] = $30; //@line 13172
 $61 = $ReallocAsyncCtx + 64 | 0; //@line 13173
 HEAP32[$61 >> 2] = $32; //@line 13174
 sp = STACKTOP; //@line 13175
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $26 = 0, $33 = 0, $38 = 0, $41 = 0, $46 = 0, $52 = 0, $53 = 0, $56 = 0, $59 = 0, $62 = 0, $65 = 0, $67 = 0, $70 = 0, $73 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 1656
 STACKTOP = STACKTOP + 32 | 0; //@line 1657
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 1657
 $1 = sp + 8 | 0; //@line 1659
 _mbed_tracef(16, 10944, 11442, sp); //@line 1660
 $2 = $0 + 688 | 0; //@line 1661
 switch (HEAP8[$2 >> 0] | 0) {
 case 1:
  {
   do {
    if (!(HEAP8[$0 + 689 >> 0] | 0)) {
     HEAP8[$0 + 732 >> 0] = 0; //@line 1671
     HEAP8[$0 + 733 >> 0] = 0; //@line 1673
     HEAP16[$0 + 744 >> 1] = 0; //@line 1675
     HEAP16[$0 + 742 >> 1] = 0; //@line 1677
     if (!(HEAP8[$0 + 722 >> 0] | 0)) {
      HEAP8[$2 >> 0] = 0; //@line 1682
      $14 = $0 + 1176 | 0; //@line 1683
      $15 = $1 + 12 | 0; //@line 1684
      HEAP32[$1 >> 2] = 54; //@line 1685
      HEAP32[$1 + 4 >> 2] = 0; //@line 1687
      HEAP32[$1 + 8 >> 2] = $0; //@line 1689
      HEAP32[$15 >> 2] = 648; //@line 1690
      $18 = ___muldi3(HEAP32[$0 + 728 >> 2] | 0, 0, 1e3, 0) | 0; //@line 1693
      $19 = tempRet0; //@line 1694
      $20 = $0 + 1216 | 0; //@line 1695
      if (($20 | 0) != ($1 | 0)) {
       $22 = $0 + 1228 | 0; //@line 1698
       $23 = HEAP32[$22 >> 2] | 0; //@line 1699
       do {
        if ($23 | 0) {
         $26 = HEAP32[$23 + 8 >> 2] | 0; //@line 1704
         $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 1705
         FUNCTION_TABLE_vi[$26 & 1023]($20); //@line 1706
         if (___async) {
          HEAP32[$AsyncCtx >> 2] = 85; //@line 1709
          HEAP32[$AsyncCtx + 4 >> 2] = $15; //@line 1711
          HEAP32[$AsyncCtx + 8 >> 2] = $22; //@line 1713
          HEAP32[$AsyncCtx + 12 >> 2] = $20; //@line 1715
          HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 1717
          HEAP32[$AsyncCtx + 20 >> 2] = $14; //@line 1719
          $33 = $AsyncCtx + 24 | 0; //@line 1721
          HEAP32[$33 >> 2] = $18; //@line 1723
          HEAP32[$33 + 4 >> 2] = $19; //@line 1726
          HEAP32[$AsyncCtx + 32 >> 2] = $0; //@line 1728
          sp = STACKTOP; //@line 1729
          STACKTOP = sp; //@line 1730
          return;
         } else {
          _emscripten_free_async_context($AsyncCtx | 0); //@line 1732
          break;
         }
        }
       } while (0);
       $38 = HEAP32[$15 >> 2] | 0; //@line 1737
       do {
        if (!$38) {
         $52 = 0; //@line 1741
        } else {
         $41 = HEAP32[$38 + 4 >> 2] | 0; //@line 1744
         $AsyncCtx2 = _emscripten_alloc_async_context(32, sp) | 0; //@line 1745
         FUNCTION_TABLE_vii[$41 & 31]($20, $1); //@line 1746
         if (___async) {
          HEAP32[$AsyncCtx2 >> 2] = 86; //@line 1749
          HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 1751
          HEAP32[$AsyncCtx2 + 8 >> 2] = $22; //@line 1753
          HEAP32[$AsyncCtx2 + 12 >> 2] = $14; //@line 1755
          $46 = $AsyncCtx2 + 16 | 0; //@line 1757
          HEAP32[$46 >> 2] = $18; //@line 1759
          HEAP32[$46 + 4 >> 2] = $19; //@line 1762
          HEAP32[$AsyncCtx2 + 24 >> 2] = $0; //@line 1764
          HEAP32[$AsyncCtx2 + 28 >> 2] = $1; //@line 1766
          sp = STACKTOP; //@line 1767
          STACKTOP = sp; //@line 1768
          return;
         } else {
          _emscripten_free_async_context($AsyncCtx2 | 0); //@line 1770
          $52 = HEAP32[$15 >> 2] | 0; //@line 1772
          break;
         }
        }
       } while (0);
       HEAP32[$22 >> 2] = $52; //@line 1777
      }
      __ZN4mbed6Ticker5setupEy($14, $18, $19); //@line 1779
      $53 = HEAP32[$15 >> 2] | 0; //@line 1780
      if ($53 | 0) {
       $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 1784
       $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1785
       FUNCTION_TABLE_vi[$56 & 1023]($1); //@line 1786
       if (___async) {
        HEAP32[$AsyncCtx6 >> 2] = 87; //@line 1789
        HEAP32[$AsyncCtx6 + 4 >> 2] = $0; //@line 1791
        sp = STACKTOP; //@line 1792
        STACKTOP = sp; //@line 1793
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx6 | 0); //@line 1795
        break;
       }
      }
     }
    }
   } while (0);
   $59 = HEAP32[$0 + 788 >> 2] | 0; //@line 1803
   if (!$59) {
    STACKTOP = sp; //@line 1806
    return;
   }
   $62 = HEAP32[$59 + 60 >> 2] | 0; //@line 1809
   if (!$62) {
    STACKTOP = sp; //@line 1812
    return;
   }
   $65 = HEAP32[$62 >> 2] | 0; //@line 1815
   $AsyncCtx9 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1816
   FUNCTION_TABLE_vi[$65 & 1023]($59 + 48 | 0); //@line 1817
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 88; //@line 1820
    sp = STACKTOP; //@line 1821
    STACKTOP = sp; //@line 1822
    return;
   }
   _emscripten_free_async_context($AsyncCtx9 | 0); //@line 1824
   STACKTOP = sp; //@line 1825
   return;
  }
 case 2:
  {
   HEAP8[$2 >> 0] = 0; //@line 1829
   $67 = HEAP32[$0 + 788 >> 2] | 0; //@line 1831
   if (!$67) {
    STACKTOP = sp; //@line 1834
    return;
   }
   $70 = HEAP32[$67 + 28 >> 2] | 0; //@line 1837
   if (!$70) {
    STACKTOP = sp; //@line 1840
    return;
   }
   $73 = HEAP32[$70 >> 2] | 0; //@line 1843
   $AsyncCtx12 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1844
   FUNCTION_TABLE_vi[$73 & 1023]($67 + 16 | 0); //@line 1845
   if (___async) {
    HEAP32[$AsyncCtx12 >> 2] = 89; //@line 1848
    sp = STACKTOP; //@line 1849
    STACKTOP = sp; //@line 1850
    return;
   }
   _emscripten_free_async_context($AsyncCtx12 | 0); //@line 1852
   STACKTOP = sp; //@line 1853
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 1857
   return;
  }
 }
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_279($0) {
 $0 = $0 | 0;
 var $$pre$i$i50 = 0, $10 = 0, $12 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 18900
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18902
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18904
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18910
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18912
 $$pre$i$i50 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 18913
 HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = $$pre$i$i50; //@line 18915
 if ($$pre$i$i50 | 0) {
  $16 = HEAP32[$$pre$i$i50 + 8 >> 2] | 0; //@line 18919
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 18920
  FUNCTION_TABLE_vi[$16 & 1023]($10); //@line 18921
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 480; //@line 18924
   $17 = $ReallocAsyncCtx12 + 4 | 0; //@line 18925
   HEAP32[$17 >> 2] = $10; //@line 18926
   $18 = $ReallocAsyncCtx12 + 8 | 0; //@line 18927
   HEAP32[$18 >> 2] = $12; //@line 18928
   $19 = $ReallocAsyncCtx12 + 12 | 0; //@line 18929
   HEAP32[$19 >> 2] = $2; //@line 18930
   $20 = $ReallocAsyncCtx12 + 16 | 0; //@line 18931
   HEAP32[$20 >> 2] = $4; //@line 18932
   sp = STACKTOP; //@line 18933
   return;
  }
  ___async_unwind = 0; //@line 18936
  HEAP32[$ReallocAsyncCtx12 >> 2] = 480; //@line 18937
  $17 = $ReallocAsyncCtx12 + 4 | 0; //@line 18938
  HEAP32[$17 >> 2] = $10; //@line 18939
  $18 = $ReallocAsyncCtx12 + 8 | 0; //@line 18940
  HEAP32[$18 >> 2] = $12; //@line 18941
  $19 = $ReallocAsyncCtx12 + 12 | 0; //@line 18942
  HEAP32[$19 >> 2] = $2; //@line 18943
  $20 = $ReallocAsyncCtx12 + 16 | 0; //@line 18944
  HEAP32[$20 >> 2] = $4; //@line 18945
  sp = STACKTOP; //@line 18946
  return;
 }
 $21 = $12 + 12 | 0; //@line 18949
 HEAP32[$12 >> 2] = 481; //@line 18950
 HEAP32[$12 + 4 >> 2] = 0; //@line 18952
 HEAP32[$12 + 8 >> 2] = $2; //@line 18954
 HEAP32[$21 >> 2] = 912; //@line 18955
 $22 = $2 + 1260 | 0; //@line 18956
 if (($22 | 0) == ($12 | 0)) {
  $41 = HEAP32[230] | 0; //@line 18960
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 18961
  FUNCTION_TABLE_vi[$41 & 1023]($12); //@line 18962
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 484; //@line 18965
   $42 = $ReallocAsyncCtx15 + 4 | 0; //@line 18966
   HEAP32[$42 >> 2] = $12; //@line 18967
   $43 = $ReallocAsyncCtx15 + 8 | 0; //@line 18968
   HEAP32[$43 >> 2] = $4; //@line 18969
   sp = STACKTOP; //@line 18970
   return;
  }
  ___async_unwind = 0; //@line 18973
  HEAP32[$ReallocAsyncCtx15 >> 2] = 484; //@line 18974
  $42 = $ReallocAsyncCtx15 + 4 | 0; //@line 18975
  HEAP32[$42 >> 2] = $12; //@line 18976
  $43 = $ReallocAsyncCtx15 + 8 | 0; //@line 18977
  HEAP32[$43 >> 2] = $4; //@line 18978
  sp = STACKTOP; //@line 18979
  return;
 }
 $24 = $2 + 1272 | 0; //@line 18982
 $25 = HEAP32[$24 >> 2] | 0; //@line 18983
 if (!$25) {
  $35 = HEAP32[229] | 0; //@line 18987
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(20) | 0; //@line 18988
  FUNCTION_TABLE_vii[$35 & 31]($22, $12); //@line 18989
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 18992
   $36 = $ReallocAsyncCtx14 + 4 | 0; //@line 18993
   HEAP32[$36 >> 2] = $21; //@line 18994
   $37 = $ReallocAsyncCtx14 + 8 | 0; //@line 18995
   HEAP32[$37 >> 2] = $24; //@line 18996
   $38 = $ReallocAsyncCtx14 + 12 | 0; //@line 18997
   HEAP32[$38 >> 2] = $12; //@line 18998
   $39 = $ReallocAsyncCtx14 + 16 | 0; //@line 18999
   HEAP32[$39 >> 2] = $4; //@line 19000
   sp = STACKTOP; //@line 19001
   return;
  }
  ___async_unwind = 0; //@line 19004
  HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 19005
  $36 = $ReallocAsyncCtx14 + 4 | 0; //@line 19006
  HEAP32[$36 >> 2] = $21; //@line 19007
  $37 = $ReallocAsyncCtx14 + 8 | 0; //@line 19008
  HEAP32[$37 >> 2] = $24; //@line 19009
  $38 = $ReallocAsyncCtx14 + 12 | 0; //@line 19010
  HEAP32[$38 >> 2] = $12; //@line 19011
  $39 = $ReallocAsyncCtx14 + 16 | 0; //@line 19012
  HEAP32[$39 >> 2] = $4; //@line 19013
  sp = STACKTOP; //@line 19014
  return;
 } else {
  $28 = HEAP32[$25 + 8 >> 2] | 0; //@line 19018
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 19019
  FUNCTION_TABLE_vi[$28 & 1023]($22); //@line 19020
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 482; //@line 19023
   $29 = $ReallocAsyncCtx13 + 4 | 0; //@line 19024
   HEAP32[$29 >> 2] = $21; //@line 19025
   $30 = $ReallocAsyncCtx13 + 8 | 0; //@line 19026
   HEAP32[$30 >> 2] = $24; //@line 19027
   $31 = $ReallocAsyncCtx13 + 12 | 0; //@line 19028
   HEAP32[$31 >> 2] = $22; //@line 19029
   $32 = $ReallocAsyncCtx13 + 16 | 0; //@line 19030
   HEAP32[$32 >> 2] = $12; //@line 19031
   $33 = $ReallocAsyncCtx13 + 20 | 0; //@line 19032
   HEAP32[$33 >> 2] = $4; //@line 19033
   sp = STACKTOP; //@line 19034
   return;
  }
  ___async_unwind = 0; //@line 19037
  HEAP32[$ReallocAsyncCtx13 >> 2] = 482; //@line 19038
  $29 = $ReallocAsyncCtx13 + 4 | 0; //@line 19039
  HEAP32[$29 >> 2] = $21; //@line 19040
  $30 = $ReallocAsyncCtx13 + 8 | 0; //@line 19041
  HEAP32[$30 >> 2] = $24; //@line 19042
  $31 = $ReallocAsyncCtx13 + 12 | 0; //@line 19043
  HEAP32[$31 >> 2] = $22; //@line 19044
  $32 = $ReallocAsyncCtx13 + 16 | 0; //@line 19045
  HEAP32[$32 >> 2] = $12; //@line 19046
  $33 = $ReallocAsyncCtx13 + 20 | 0; //@line 19047
  HEAP32[$33 >> 2] = $4; //@line 19048
  sp = STACKTOP; //@line 19049
  return;
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_127($0) {
 $0 = $0 | 0;
 var $$3$off0230 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $20 = 0, $22 = 0, $29 = 0, $35 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $59 = 0, $6 = 0, $62 = 0, $64 = 0, $65 = 0, $8 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx27 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 28213
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 28216
 $4 = HEAP8[$0 + 5 >> 0] | 0; //@line 28218
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 28220
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 28222
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 28224
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 28226
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 28228
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 28230
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 28234
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 28236
 do {
  if (!(HEAP32[___async_retval >> 2] | 0)) {
   if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($22) | 0) {
    _mbed_tracef(16, 13704, 13865, $16); //@line 28244
    HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($20) | 0) >> 2] = 4; //@line 28246
    $29 = $10 + 944 | 0; //@line 28247
    HEAP8[$29 >> 0] = HEAP8[$29 >> 0] | 16; //@line 28250
    __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($22); //@line 28251
    if ($2) {
     $$3$off0230 = 6; //@line 28253
     break;
    } else {
     label = 7; //@line 28256
     break;
    }
   } else {
    if ($2) {
     $$3$off0230 = 6; //@line 28261
     break;
    } else {
     label = 7; //@line 28264
     break;
    }
   }
  } else {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($6) | 0) + 4 >> 2] = 1; //@line 28271
   if ($2) {
    $$3$off0230 = 6; //@line 28273
   } else {
    label = 7; //@line 28275
   }
  }
 } while (0);
 if ((label | 0) == 7) {
  $35 = (__ZN11LoRaMacMcps16get_confirmationEv($6) | 0) + 10 | 0; //@line 28283
  if ($4 & 32) {
   HEAP8[$35 >> 0] = 1; //@line 28285
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($6) | 0) + 28 >> 0] = 1; //@line 28288
   $38 = HEAP32[$8 >> 2] | 0; //@line 28289
   $ReallocAsyncCtx27 = _emscripten_realloc_async_context(20) | 0; //@line 28291
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($38, $10 + 1076 | 0); //@line 28292
   if (___async) {
    HEAP32[$ReallocAsyncCtx27 >> 2] = 330; //@line 28295
    $40 = $ReallocAsyncCtx27 + 4 | 0; //@line 28296
    HEAP32[$40 >> 2] = $10; //@line 28297
    $41 = $ReallocAsyncCtx27 + 8 | 0; //@line 28298
    HEAP32[$41 >> 2] = $8; //@line 28299
    $42 = $ReallocAsyncCtx27 + 12 | 0; //@line 28300
    HEAP32[$42 >> 2] = $12; //@line 28301
    $43 = $ReallocAsyncCtx27 + 16 | 0; //@line 28302
    HEAP32[$43 >> 2] = $14; //@line 28303
    sp = STACKTOP; //@line 28304
    return;
   }
   ___async_unwind = 0; //@line 28307
   HEAP32[$ReallocAsyncCtx27 >> 2] = 330; //@line 28308
   $40 = $ReallocAsyncCtx27 + 4 | 0; //@line 28309
   HEAP32[$40 >> 2] = $10; //@line 28310
   $41 = $ReallocAsyncCtx27 + 8 | 0; //@line 28311
   HEAP32[$41 >> 2] = $8; //@line 28312
   $42 = $ReallocAsyncCtx27 + 12 | 0; //@line 28313
   HEAP32[$42 >> 2] = $12; //@line 28314
   $43 = $ReallocAsyncCtx27 + 16 | 0; //@line 28315
   HEAP32[$43 >> 2] = $14; //@line 28316
   sp = STACKTOP; //@line 28317
   return;
  }
  HEAP8[$35 >> 0] = 0; //@line 28320
  if ((HEAPU8[$10 + 895 >> 0] | 0) > (HEAPU8[$10 + 894 >> 0] | 0)) {
   $49 = HEAP32[$8 >> 2] | 0; //@line 28327
   $ReallocAsyncCtx26 = _emscripten_realloc_async_context(20) | 0; //@line 28329
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($49, $10 + 1076 | 0); //@line 28330
   if (___async) {
    HEAP32[$ReallocAsyncCtx26 >> 2] = 331; //@line 28333
    $51 = $ReallocAsyncCtx26 + 4 | 0; //@line 28334
    HEAP32[$51 >> 2] = $10; //@line 28335
    $52 = $ReallocAsyncCtx26 + 8 | 0; //@line 28336
    HEAP32[$52 >> 2] = $8; //@line 28337
    $53 = $ReallocAsyncCtx26 + 12 | 0; //@line 28338
    HEAP32[$53 >> 2] = $12; //@line 28339
    $54 = $ReallocAsyncCtx26 + 16 | 0; //@line 28340
    HEAP32[$54 >> 2] = $14; //@line 28341
    sp = STACKTOP; //@line 28342
    return;
   }
   ___async_unwind = 0; //@line 28345
   HEAP32[$ReallocAsyncCtx26 >> 2] = 331; //@line 28346
   $51 = $ReallocAsyncCtx26 + 4 | 0; //@line 28347
   HEAP32[$51 >> 2] = $10; //@line 28348
   $52 = $ReallocAsyncCtx26 + 8 | 0; //@line 28349
   HEAP32[$52 >> 2] = $8; //@line 28350
   $53 = $ReallocAsyncCtx26 + 12 | 0; //@line 28351
   HEAP32[$53 >> 2] = $12; //@line 28352
   $54 = $ReallocAsyncCtx26 + 16 | 0; //@line 28353
   HEAP32[$54 >> 2] = $14; //@line 28354
   sp = STACKTOP; //@line 28355
   return;
  } else {
   $$3$off0230 = 2; //@line 28358
  }
 }
 $55 = $10 + 944 | 0; //@line 28361
 HEAP8[$55 >> 0] = $$3$off0230 | HEAP8[$55 >> 0] & -7; //@line 28365
 $59 = $10 + 944 | 0; //@line 28366
 HEAP8[$59 >> 0] = HEAP8[$59 >> 0] | 32; //@line 28369
 $62 = HEAP32[$8 >> 2] | 0; //@line 28370
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 28372
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($62, $10 + 996 | 0, 1); //@line 28373
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 338; //@line 28376
  $64 = $ReallocAsyncCtx5 + 4 | 0; //@line 28377
  HEAP32[$64 >> 2] = $12; //@line 28378
  $65 = $ReallocAsyncCtx5 + 8 | 0; //@line 28379
  HEAP32[$65 >> 2] = $14; //@line 28380
  sp = STACKTOP; //@line 28381
  return;
 }
 ___async_unwind = 0; //@line 28384
 HEAP32[$ReallocAsyncCtx5 >> 2] = 338; //@line 28385
 $64 = $ReallocAsyncCtx5 + 4 | 0; //@line 28386
 HEAP32[$64 >> 2] = $12; //@line 28387
 $65 = $ReallocAsyncCtx5 + 8 | 0; //@line 28388
 HEAP32[$65 >> 2] = $14; //@line 28389
 sp = STACKTOP; //@line 28390
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_125($0) {
 $0 = $0 | 0;
 var $$3$off0230 = 0, $10 = 0, $12 = 0, $14 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $29 = 0, $35 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $59 = 0, $6 = 0, $62 = 0, $64 = 0, $65 = 0, $8 = 0, $ReallocAsyncCtx26 = 0, $ReallocAsyncCtx27 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 27827
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 27830
 $4 = HEAP8[$0 + 5 >> 0] | 0; //@line 27832
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 27834
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 27836
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 27838
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 27840
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 27842
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 27846
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 27848
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 27850
 do {
  if (!(HEAP32[___async_retval >> 2] | 0)) {
   if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($12) | 0) {
    _mbed_tracef(16, 13704, 13865, $14); //@line 27858
    HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($18) | 0) >> 2] = 4; //@line 27860
    $29 = $10 + 944 | 0; //@line 27861
    HEAP8[$29 >> 0] = HEAP8[$29 >> 0] | 16; //@line 27864
    __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($12); //@line 27865
    if ($2) {
     $$3$off0230 = 6; //@line 27867
     break;
    } else {
     label = 7; //@line 27870
     break;
    }
   } else {
    if ($2) {
     $$3$off0230 = 6; //@line 27875
     break;
    } else {
     label = 7; //@line 27878
     break;
    }
   }
  } else {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($6) | 0) + 4 >> 2] = 1; //@line 27885
   if ($2) {
    $$3$off0230 = 6; //@line 27887
   } else {
    label = 7; //@line 27889
   }
  }
 } while (0);
 if ((label | 0) == 7) {
  $35 = (__ZN11LoRaMacMcps16get_confirmationEv($6) | 0) + 10 | 0; //@line 27897
  if ($4 & 32) {
   HEAP8[$35 >> 0] = 1; //@line 27899
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($6) | 0) + 28 >> 0] = 1; //@line 27902
   $38 = HEAP32[$8 >> 2] | 0; //@line 27903
   $ReallocAsyncCtx27 = _emscripten_realloc_async_context(20) | 0; //@line 27905
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($38, $10 + 1076 | 0); //@line 27906
   if (___async) {
    HEAP32[$ReallocAsyncCtx27 >> 2] = 330; //@line 27909
    $40 = $ReallocAsyncCtx27 + 4 | 0; //@line 27910
    HEAP32[$40 >> 2] = $10; //@line 27911
    $41 = $ReallocAsyncCtx27 + 8 | 0; //@line 27912
    HEAP32[$41 >> 2] = $8; //@line 27913
    $42 = $ReallocAsyncCtx27 + 12 | 0; //@line 27914
    HEAP32[$42 >> 2] = $20; //@line 27915
    $43 = $ReallocAsyncCtx27 + 16 | 0; //@line 27916
    HEAP32[$43 >> 2] = $22; //@line 27917
    sp = STACKTOP; //@line 27918
    return;
   }
   ___async_unwind = 0; //@line 27921
   HEAP32[$ReallocAsyncCtx27 >> 2] = 330; //@line 27922
   $40 = $ReallocAsyncCtx27 + 4 | 0; //@line 27923
   HEAP32[$40 >> 2] = $10; //@line 27924
   $41 = $ReallocAsyncCtx27 + 8 | 0; //@line 27925
   HEAP32[$41 >> 2] = $8; //@line 27926
   $42 = $ReallocAsyncCtx27 + 12 | 0; //@line 27927
   HEAP32[$42 >> 2] = $20; //@line 27928
   $43 = $ReallocAsyncCtx27 + 16 | 0; //@line 27929
   HEAP32[$43 >> 2] = $22; //@line 27930
   sp = STACKTOP; //@line 27931
   return;
  }
  HEAP8[$35 >> 0] = 0; //@line 27934
  if ((HEAPU8[$10 + 895 >> 0] | 0) > (HEAPU8[$10 + 894 >> 0] | 0)) {
   $49 = HEAP32[$8 >> 2] | 0; //@line 27941
   $ReallocAsyncCtx26 = _emscripten_realloc_async_context(20) | 0; //@line 27943
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($49, $10 + 1076 | 0); //@line 27944
   if (___async) {
    HEAP32[$ReallocAsyncCtx26 >> 2] = 331; //@line 27947
    $51 = $ReallocAsyncCtx26 + 4 | 0; //@line 27948
    HEAP32[$51 >> 2] = $10; //@line 27949
    $52 = $ReallocAsyncCtx26 + 8 | 0; //@line 27950
    HEAP32[$52 >> 2] = $8; //@line 27951
    $53 = $ReallocAsyncCtx26 + 12 | 0; //@line 27952
    HEAP32[$53 >> 2] = $20; //@line 27953
    $54 = $ReallocAsyncCtx26 + 16 | 0; //@line 27954
    HEAP32[$54 >> 2] = $22; //@line 27955
    sp = STACKTOP; //@line 27956
    return;
   }
   ___async_unwind = 0; //@line 27959
   HEAP32[$ReallocAsyncCtx26 >> 2] = 331; //@line 27960
   $51 = $ReallocAsyncCtx26 + 4 | 0; //@line 27961
   HEAP32[$51 >> 2] = $10; //@line 27962
   $52 = $ReallocAsyncCtx26 + 8 | 0; //@line 27963
   HEAP32[$52 >> 2] = $8; //@line 27964
   $53 = $ReallocAsyncCtx26 + 12 | 0; //@line 27965
   HEAP32[$53 >> 2] = $20; //@line 27966
   $54 = $ReallocAsyncCtx26 + 16 | 0; //@line 27967
   HEAP32[$54 >> 2] = $22; //@line 27968
   sp = STACKTOP; //@line 27969
   return;
  } else {
   $$3$off0230 = 2; //@line 27972
  }
 }
 $55 = $10 + 944 | 0; //@line 27975
 HEAP8[$55 >> 0] = $$3$off0230 | HEAP8[$55 >> 0] & -7; //@line 27979
 $59 = $10 + 944 | 0; //@line 27980
 HEAP8[$59 >> 0] = HEAP8[$59 >> 0] | 32; //@line 27983
 $62 = HEAP32[$8 >> 2] | 0; //@line 27984
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 27986
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($62, $10 + 996 | 0, 1); //@line 27987
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 338; //@line 27990
  $64 = $ReallocAsyncCtx5 + 4 | 0; //@line 27991
  HEAP32[$64 >> 2] = $20; //@line 27992
  $65 = $ReallocAsyncCtx5 + 8 | 0; //@line 27993
  HEAP32[$65 >> 2] = $22; //@line 27994
  sp = STACKTOP; //@line 27995
  return;
 }
 ___async_unwind = 0; //@line 27998
 HEAP32[$ReallocAsyncCtx5 >> 2] = 338; //@line 27999
 $64 = $ReallocAsyncCtx5 + 4 | 0; //@line 28000
 HEAP32[$64 >> 2] = $20; //@line 28001
 $65 = $ReallocAsyncCtx5 + 8 | 0; //@line 28002
 HEAP32[$65 >> 2] = $22; //@line 28003
 sp = STACKTOP; //@line 28004
 return;
}
function _initialize__async_cb_256($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 15980
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15982
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15984
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15986
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15988
 $8 = HEAP32[$AsyncRetVal >> 2] | 0; //@line 15989
 if (!$8) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 15992
  _mbed_assert_internal(15107, 15109, 41); //@line 15993
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 599; //@line 15996
   $10 = $ReallocAsyncCtx7 + 4 | 0; //@line 15997
   HEAP32[$10 >> 2] = $2; //@line 15998
   $11 = $ReallocAsyncCtx7 + 8 | 0; //@line 15999
   HEAP32[$11 >> 2] = $4; //@line 16000
   $12 = $ReallocAsyncCtx7 + 12 | 0; //@line 16001
   HEAP32[$12 >> 2] = $6; //@line 16002
   $13 = $ReallocAsyncCtx7 + 16 | 0; //@line 16003
   HEAP32[$13 >> 2] = $AsyncRetVal; //@line 16004
   sp = STACKTOP; //@line 16005
   return;
  }
  ___async_unwind = 0; //@line 16008
  HEAP32[$ReallocAsyncCtx7 >> 2] = 599; //@line 16009
  $10 = $ReallocAsyncCtx7 + 4 | 0; //@line 16010
  HEAP32[$10 >> 2] = $2; //@line 16011
  $11 = $ReallocAsyncCtx7 + 8 | 0; //@line 16012
  HEAP32[$11 >> 2] = $4; //@line 16013
  $12 = $ReallocAsyncCtx7 + 12 | 0; //@line 16014
  HEAP32[$12 >> 2] = $6; //@line 16015
  $13 = $ReallocAsyncCtx7 + 16 | 0; //@line 16016
  HEAP32[$13 >> 2] = $AsyncRetVal; //@line 16017
  sp = STACKTOP; //@line 16018
  return;
 }
 $15 = HEAP32[$AsyncRetVal + 4 >> 2] | 0; //@line 16022
 if (($15 + -4 | 0) >>> 0 > 28) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 16026
  _mbed_assert_internal(15107, 15109, 47); //@line 16027
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 600; //@line 16030
   $17 = $ReallocAsyncCtx6 + 4 | 0; //@line 16031
   HEAP32[$17 >> 2] = $8; //@line 16032
   $18 = $ReallocAsyncCtx6 + 8 | 0; //@line 16033
   HEAP32[$18 >> 2] = $4; //@line 16034
   $19 = $ReallocAsyncCtx6 + 12 | 0; //@line 16035
   HEAP32[$19 >> 2] = $6; //@line 16036
   $20 = $ReallocAsyncCtx6 + 16 | 0; //@line 16037
   HEAP32[$20 >> 2] = $2; //@line 16038
   sp = STACKTOP; //@line 16039
   return;
  }
  ___async_unwind = 0; //@line 16042
  HEAP32[$ReallocAsyncCtx6 >> 2] = 600; //@line 16043
  $17 = $ReallocAsyncCtx6 + 4 | 0; //@line 16044
  HEAP32[$17 >> 2] = $8; //@line 16045
  $18 = $ReallocAsyncCtx6 + 8 | 0; //@line 16046
  HEAP32[$18 >> 2] = $4; //@line 16047
  $19 = $ReallocAsyncCtx6 + 12 | 0; //@line 16048
  HEAP32[$19 >> 2] = $6; //@line 16049
  $20 = $ReallocAsyncCtx6 + 16 | 0; //@line 16050
  HEAP32[$20 >> 2] = $2; //@line 16051
  sp = STACKTOP; //@line 16052
  return;
 } else {
  $22 = 7 << $15 + -4; //@line 16056
  $23 = ___muldi3($22 | 0, 0, 1e6, 0) | 0; //@line 16057
  $24 = tempRet0; //@line 16058
  $25 = _i64Add($8 | 0, 0, -1, -1) | 0; //@line 16059
  $27 = _i64Add($25 | 0, tempRet0 | 0, $23 | 0, $24 | 0) | 0; //@line 16061
  $29 = ___udivdi3($27 | 0, tempRet0 | 0, $8 | 0, 0) | 0; //@line 16063
  $30 = tempRet0; //@line 16064
  $31 = HEAP32[$4 >> 2] | 0; //@line 16065
  HEAP32[$31 >> 2] = 0; //@line 16066
  HEAP32[$31 + 4 >> 2] = 0; //@line 16068
  $35 = HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0; //@line 16071
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 16072
  $36 = FUNCTION_TABLE_i[$35 & 7]() | 0; //@line 16073
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 601; //@line 16076
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 16077
   HEAP32[$37 >> 2] = $4; //@line 16078
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 16079
   HEAP32[$38 >> 2] = $8; //@line 16080
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 16081
   HEAP32[$39 >> 2] = $15; //@line 16082
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 16083
   HEAP32[$40 >> 2] = $22; //@line 16084
   $41 = $ReallocAsyncCtx3 + 24 | 0; //@line 16085
   $42 = $41; //@line 16086
   $43 = $42; //@line 16087
   HEAP32[$43 >> 2] = $29; //@line 16088
   $44 = $42 + 4 | 0; //@line 16089
   $45 = $44; //@line 16090
   HEAP32[$45 >> 2] = $30; //@line 16091
   $46 = $ReallocAsyncCtx3 + 32 | 0; //@line 16092
   HEAP32[$46 >> 2] = $6; //@line 16093
   $47 = $ReallocAsyncCtx3 + 36 | 0; //@line 16094
   HEAP32[$47 >> 2] = $2; //@line 16095
   sp = STACKTOP; //@line 16096
   return;
  }
  HEAP32[___async_retval >> 2] = $36; //@line 16100
  ___async_unwind = 0; //@line 16101
  HEAP32[$ReallocAsyncCtx3 >> 2] = 601; //@line 16102
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 16103
  HEAP32[$37 >> 2] = $4; //@line 16104
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 16105
  HEAP32[$38 >> 2] = $8; //@line 16106
  $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 16107
  HEAP32[$39 >> 2] = $15; //@line 16108
  $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 16109
  HEAP32[$40 >> 2] = $22; //@line 16110
  $41 = $ReallocAsyncCtx3 + 24 | 0; //@line 16111
  $42 = $41; //@line 16112
  $43 = $42; //@line 16113
  HEAP32[$43 >> 2] = $29; //@line 16114
  $44 = $42 + 4 | 0; //@line 16115
  $45 = $44; //@line 16116
  HEAP32[$45 >> 2] = $30; //@line 16117
  $46 = $ReallocAsyncCtx3 + 32 | 0; //@line 16118
  HEAP32[$46 >> 2] = $6; //@line 16119
  $47 = $ReallocAsyncCtx3 + 36 | 0; //@line 16120
  HEAP32[$47 >> 2] = $2; //@line 16121
  sp = STACKTOP; //@line 16122
  return;
 }
}
function _mbedtls_cipher_free($0) {
 $0 = $0 | 0;
 var $101 = 0, $105 = 0, $109 = 0, $113 = 0, $2 = 0, $3 = 0, $42 = 0, $48 = 0, $53 = 0, $57 = 0, $61 = 0, $65 = 0, $69 = 0, $73 = 0, $77 = 0, $81 = 0, $85 = 0, $89 = 0, $93 = 0, $97 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2663
 if (!$0) {
  return;
 }
 $2 = $0 + 64 | 0; //@line 2668
 $3 = HEAP32[$2 >> 2] | 0; //@line 2669
 if ($3 | 0) {
  HEAP8[$3 >> 0] = 0; //@line 2673
  HEAP8[$3 + 1 >> 0] = 0; //@line 2675
  HEAP8[$3 + 2 >> 0] = 0; //@line 2677
  HEAP8[$3 + 3 >> 0] = 0; //@line 2679
  HEAP8[$3 + 4 >> 0] = 0; //@line 2681
  HEAP8[$3 + 5 >> 0] = 0; //@line 2683
  HEAP8[$3 + 6 >> 0] = 0; //@line 2685
  HEAP8[$3 + 7 >> 0] = 0; //@line 2687
  HEAP8[$3 + 8 >> 0] = 0; //@line 2689
  HEAP8[$3 + 9 >> 0] = 0; //@line 2691
  HEAP8[$3 + 10 >> 0] = 0; //@line 2693
  HEAP8[$3 + 11 >> 0] = 0; //@line 2695
  HEAP8[$3 + 12 >> 0] = 0; //@line 2697
  HEAP8[$3 + 13 >> 0] = 0; //@line 2699
  HEAP8[$3 + 14 >> 0] = 0; //@line 2701
  HEAP8[$3 + 15 >> 0] = 0; //@line 2703
  HEAP8[$3 + 16 >> 0] = 0; //@line 2705
  HEAP8[$3 + 17 >> 0] = 0; //@line 2707
  HEAP8[$3 + 18 >> 0] = 0; //@line 2709
  HEAP8[$3 + 19 >> 0] = 0; //@line 2711
  HEAP8[$3 + 20 >> 0] = 0; //@line 2713
  HEAP8[$3 + 21 >> 0] = 0; //@line 2715
  HEAP8[$3 + 22 >> 0] = 0; //@line 2717
  HEAP8[$3 + 23 >> 0] = 0; //@line 2719
  HEAP8[$3 + 24 >> 0] = 0; //@line 2721
  HEAP8[$3 + 25 >> 0] = 0; //@line 2723
  HEAP8[$3 + 26 >> 0] = 0; //@line 2725
  HEAP8[$3 + 27 >> 0] = 0; //@line 2727
  HEAP8[$3 + 28 >> 0] = 0; //@line 2729
  HEAP8[$3 + 29 >> 0] = 0; //@line 2731
  HEAP8[$3 + 30 >> 0] = 0; //@line 2733
  HEAP8[$3 + 31 >> 0] = 0; //@line 2735
  HEAP8[$3 + 32 >> 0] = 0; //@line 2737
  HEAP8[$3 + 33 >> 0] = 0; //@line 2739
  HEAP8[$3 + 34 >> 0] = 0; //@line 2741
  HEAP8[$3 + 35 >> 0] = 0; //@line 2742
  _free(HEAP32[$2 >> 2] | 0); //@line 2744
 }
 $42 = HEAP32[$0 + 60 >> 2] | 0; //@line 2747
 do {
  if ($42 | 0) {
   $48 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 24 >> 2] | 0; //@line 2755
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2756
   FUNCTION_TABLE_vi[$48 & 1023]($42); //@line 2757
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 572; //@line 2760
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2762
    sp = STACKTOP; //@line 2763
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2766
    break;
   }
  }
 } while (0);
 HEAP8[$0 >> 0] = 0; //@line 2772
 HEAP8[$0 + 1 >> 0] = 0; //@line 2774
 HEAP8[$0 + 2 >> 0] = 0; //@line 2776
 $53 = $0 + 4 | 0; //@line 2777
 HEAP8[$0 + 3 >> 0] = 0; //@line 2778
 HEAP8[$53 >> 0] = 0; //@line 2780
 HEAP8[$53 + 1 >> 0] = 0; //@line 2782
 HEAP8[$53 + 2 >> 0] = 0; //@line 2784
 $57 = $53 + 4 | 0; //@line 2785
 HEAP8[$53 + 3 >> 0] = 0; //@line 2786
 HEAP8[$57 >> 0] = 0; //@line 2788
 HEAP8[$57 + 1 >> 0] = 0; //@line 2790
 HEAP8[$57 + 2 >> 0] = 0; //@line 2792
 $61 = $53 + 8 | 0; //@line 2793
 HEAP8[$57 + 3 >> 0] = 0; //@line 2794
 HEAP8[$61 >> 0] = 0; //@line 2796
 HEAP8[$61 + 1 >> 0] = 0; //@line 2798
 HEAP8[$61 + 2 >> 0] = 0; //@line 2800
 $65 = $53 + 12 | 0; //@line 2801
 HEAP8[$61 + 3 >> 0] = 0; //@line 2802
 HEAP8[$65 >> 0] = 0; //@line 2804
 HEAP8[$65 + 1 >> 0] = 0; //@line 2806
 HEAP8[$65 + 2 >> 0] = 0; //@line 2808
 $69 = $53 + 16 | 0; //@line 2809
 HEAP8[$65 + 3 >> 0] = 0; //@line 2810
 HEAP8[$69 >> 0] = 0; //@line 2812
 HEAP8[$69 + 1 >> 0] = 0; //@line 2814
 HEAP8[$69 + 2 >> 0] = 0; //@line 2816
 $73 = $53 + 20 | 0; //@line 2817
 HEAP8[$69 + 3 >> 0] = 0; //@line 2818
 HEAP8[$73 >> 0] = 0; //@line 2820
 HEAP8[$73 + 1 >> 0] = 0; //@line 2822
 HEAP8[$73 + 2 >> 0] = 0; //@line 2824
 $77 = $53 + 24 | 0; //@line 2825
 HEAP8[$73 + 3 >> 0] = 0; //@line 2826
 HEAP8[$77 >> 0] = 0; //@line 2828
 HEAP8[$77 + 1 >> 0] = 0; //@line 2830
 HEAP8[$77 + 2 >> 0] = 0; //@line 2832
 $81 = $53 + 28 | 0; //@line 2833
 HEAP8[$77 + 3 >> 0] = 0; //@line 2834
 HEAP8[$81 >> 0] = 0; //@line 2836
 HEAP8[$81 + 1 >> 0] = 0; //@line 2838
 HEAP8[$81 + 2 >> 0] = 0; //@line 2840
 $85 = $53 + 32 | 0; //@line 2841
 HEAP8[$81 + 3 >> 0] = 0; //@line 2842
 HEAP8[$85 >> 0] = 0; //@line 2844
 HEAP8[$85 + 1 >> 0] = 0; //@line 2846
 HEAP8[$85 + 2 >> 0] = 0; //@line 2848
 $89 = $53 + 36 | 0; //@line 2849
 HEAP8[$85 + 3 >> 0] = 0; //@line 2850
 HEAP8[$89 >> 0] = 0; //@line 2852
 HEAP8[$89 + 1 >> 0] = 0; //@line 2854
 HEAP8[$89 + 2 >> 0] = 0; //@line 2856
 $93 = $53 + 40 | 0; //@line 2857
 HEAP8[$89 + 3 >> 0] = 0; //@line 2858
 HEAP8[$93 >> 0] = 0; //@line 2860
 HEAP8[$93 + 1 >> 0] = 0; //@line 2862
 HEAP8[$93 + 2 >> 0] = 0; //@line 2864
 $97 = $53 + 44 | 0; //@line 2865
 HEAP8[$93 + 3 >> 0] = 0; //@line 2866
 HEAP8[$97 >> 0] = 0; //@line 2868
 HEAP8[$97 + 1 >> 0] = 0; //@line 2870
 HEAP8[$97 + 2 >> 0] = 0; //@line 2872
 $101 = $53 + 48 | 0; //@line 2873
 HEAP8[$97 + 3 >> 0] = 0; //@line 2874
 HEAP8[$101 >> 0] = 0; //@line 2876
 HEAP8[$101 + 1 >> 0] = 0; //@line 2878
 HEAP8[$101 + 2 >> 0] = 0; //@line 2880
 $105 = $53 + 52 | 0; //@line 2881
 HEAP8[$101 + 3 >> 0] = 0; //@line 2882
 HEAP8[$105 >> 0] = 0; //@line 2884
 HEAP8[$105 + 1 >> 0] = 0; //@line 2886
 HEAP8[$105 + 2 >> 0] = 0; //@line 2888
 $109 = $53 + 56 | 0; //@line 2889
 HEAP8[$105 + 3 >> 0] = 0; //@line 2890
 HEAP8[$109 >> 0] = 0; //@line 2892
 HEAP8[$109 + 1 >> 0] = 0; //@line 2894
 HEAP8[$109 + 2 >> 0] = 0; //@line 2896
 $113 = $53 + 60 | 0; //@line 2897
 HEAP8[$109 + 3 >> 0] = 0; //@line 2898
 HEAP8[$113 >> 0] = 0; //@line 2900
 HEAP8[$113 + 1 >> 0] = 0; //@line 2902
 HEAP8[$113 + 2 >> 0] = 0; //@line 2904
 HEAP8[$113 + 3 >> 0] = 0; //@line 2905
 return;
}
function __ZN12LoRaWANStackC2Ev($0) {
 $0 = $0 | 0;
 var $$pre$i$i45 = 0, $$pre$i$i59 = 0, $$pre$phiZ2D = 0, $$pre106 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $21 = 0, $22 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $33 = 0, $4 = 0, $40 = 0, $41 = 0, $48 = 0, $49 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 4744
 STACKTOP = STACKTOP + 16 | 0; //@line 4745
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4745
 $1 = sp; //@line 4746
 __ZN18LoRaWANTimeHandlerC2Ev($0); //@line 4747
 __ZN7LoRaMacC2ER18LoRaWANTimeHandler($0 + 4 | 0, $0); //@line 4749
 __ZN12LoRaPHYEU868C2ER18LoRaWANTimeHandler($0 + 1336 | 0, $0); //@line 4751
 $4 = $0 + 2284 | 0; //@line 4752
 $5 = $0 + 1828 | 0; //@line 4753
 dest = $5 + 16 | 0; //@line 4755
 stop = dest + 88 | 0; //@line 4755
 do {
  HEAP32[dest >> 2] = 0; //@line 4755
  dest = dest + 4 | 0; //@line 4755
 } while ((dest | 0) < (stop | 0));
 HEAP8[$4 >> 0] = 1; //@line 4756
 HEAP8[$0 + 2286 >> 0] = 1; //@line 4759
 HEAP32[$0 + 2288 >> 2] = 0; //@line 4761
 HEAP8[$0 + 2285 >> 0] = 15; //@line 4762
 _memset($0 + 1932 | 0, 0, 352) | 0; //@line 4764
 HEAP32[$0 + 1812 >> 2] = 19; //@line 4767
 HEAP32[$0 + 1816 >> 2] = 0; //@line 4769
 HEAP32[$0 + 1820 >> 2] = $0; //@line 4771
 HEAP32[$0 + 1824 >> 2] = 864; //@line 4772
 HEAP32[$1 >> 2] = 20; //@line 4774
 HEAP32[$1 + 4 >> 2] = 0; //@line 4776
 HEAP32[$1 + 8 >> 2] = $0; //@line 4778
 HEAP32[$1 + 12 >> 2] = 876; //@line 4779
 $13 = $0 + 1840 | 0; //@line 4780
 HEAP32[$5 >> 2] = HEAP32[$1 >> 2]; //@line 4781
 HEAP32[$5 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 4781
 HEAP32[$5 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 4781
 HEAP32[$13 >> 2] = 876; //@line 4782
 $14 = $1 + 12 | 0; //@line 4783
 HEAP32[$1 >> 2] = 21; //@line 4784
 HEAP32[$1 + 4 >> 2] = 0; //@line 4786
 HEAP32[$1 + 8 >> 2] = $0; //@line 4788
 HEAP32[$14 >> 2] = 888; //@line 4789
 $15 = $0 + 1844 | 0; //@line 4790
 if (($15 | 0) == ($1 | 0)) {
  $21 = 888; //@line 4793
  label = 3; //@line 4794
 } else {
  __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($15, $1); //@line 4797
  $$pre$i$i45 = HEAP32[$14 >> 2] | 0; //@line 4798
  HEAP32[$0 + 1856 >> 2] = $$pre$i$i45; //@line 4800
  if ($$pre$i$i45 | 0) {
   $21 = $$pre$i$i45; //@line 4803
   label = 3; //@line 4804
  }
 }
 do {
  if ((label | 0) == 3) {
   $22 = HEAP32[$21 + 8 >> 2] | 0; //@line 4810
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 4811
   FUNCTION_TABLE_vi[$22 & 1023]($1); //@line 4812
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 142; //@line 4815
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 4817
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 4819
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 4821
    sp = STACKTOP; //@line 4822
    STACKTOP = sp; //@line 4823
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 4825
    break;
   }
  }
 } while (0);
 $26 = $1 + 12 | 0; //@line 4830
 HEAP32[$1 >> 2] = 22; //@line 4831
 HEAP32[$1 + 4 >> 2] = 0; //@line 4833
 HEAP32[$1 + 8 >> 2] = $0; //@line 4835
 HEAP32[$26 >> 2] = 900; //@line 4836
 $27 = $0 + 1860 | 0; //@line 4837
 if (($27 | 0) == ($1 | 0)) {
  $48 = 900; //@line 4840
 } else {
  $29 = $0 + 1872 | 0; //@line 4842
  $30 = HEAP32[$29 >> 2] | 0; //@line 4843
  if (!$30) {
   $$pre$phiZ2D = $27; //@line 4846
   $40 = 900; //@line 4846
  } else {
   $33 = HEAP32[$30 + 8 >> 2] | 0; //@line 4849
   $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 4850
   FUNCTION_TABLE_vi[$33 & 1023]($27); //@line 4851
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 143; //@line 4854
    HEAP32[$AsyncCtx2 + 4 >> 2] = $26; //@line 4856
    HEAP32[$AsyncCtx2 + 8 >> 2] = $29; //@line 4858
    HEAP32[$AsyncCtx2 + 12 >> 2] = $27; //@line 4860
    HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 4862
    sp = STACKTOP; //@line 4863
    STACKTOP = sp; //@line 4864
    return;
   }
   _emscripten_free_async_context($AsyncCtx2 | 0); //@line 4866
   $$pre106 = HEAP32[$26 >> 2] | 0; //@line 4867
   if (!$$pre106) {
    HEAP32[$29 >> 2] = 0; //@line 4870
    STACKTOP = sp; //@line 4871
    return;
   } else {
    $$pre$phiZ2D = $27; //@line 4873
    $40 = $$pre106; //@line 4873
   }
  }
  $41 = HEAP32[$40 + 4 >> 2] | 0; //@line 4877
  $AsyncCtx5 = _emscripten_alloc_async_context(16, sp) | 0; //@line 4878
  FUNCTION_TABLE_vii[$41 & 31]($$pre$phiZ2D, $1); //@line 4879
  if (___async) {
   HEAP32[$AsyncCtx5 >> 2] = 144; //@line 4882
   HEAP32[$AsyncCtx5 + 4 >> 2] = $26; //@line 4884
   HEAP32[$AsyncCtx5 + 8 >> 2] = $29; //@line 4886
   HEAP32[$AsyncCtx5 + 12 >> 2] = $1; //@line 4888
   sp = STACKTOP; //@line 4889
   STACKTOP = sp; //@line 4890
   return;
  }
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 4892
  $$pre$i$i59 = HEAP32[$26 >> 2] | 0; //@line 4893
  HEAP32[$29 >> 2] = $$pre$i$i59; //@line 4895
  if (!$$pre$i$i59) {
   STACKTOP = sp; //@line 4898
   return;
  } else {
   $48 = $$pre$i$i59; //@line 4900
  }
 }
 $49 = HEAP32[$48 + 8 >> 2] | 0; //@line 4904
 $AsyncCtx8 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4905
 FUNCTION_TABLE_vi[$49 & 1023]($1); //@line 4906
 if (___async) {
  HEAP32[$AsyncCtx8 >> 2] = 145; //@line 4909
  HEAP32[$AsyncCtx8 + 4 >> 2] = $1; //@line 4911
  sp = STACKTOP; //@line 4912
  STACKTOP = sp; //@line 4913
  return;
 }
 _emscripten_free_async_context($AsyncCtx8 | 0); //@line 4915
 STACKTOP = sp; //@line 4916
 return;
}
function _mbedtls_internal_aes_encrypt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$in = 0, $$0136 = 0, $$0137 = 0, $$0138 = 0, $$0139 = 0, $$0140 = 0, $110 = 0, $130 = 0, $150 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $230 = 0, $250 = 0, $261 = 0, $268 = 0, $274 = 0, $276 = 0, $281 = 0, $288 = 0, $295 = 0, $301 = 0, $303 = 0, $308 = 0, $315 = 0, $322 = 0, $328 = 0, $329 = 0, $334 = 0, $341 = 0, $348 = 0, $354 = 0, $4 = 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 1053
 $$0$in = HEAP32[$0 >> 2] >> 1; //@line 1139
 $$0136 = $4 + 16 | 0; //@line 1139
 $$0137 = ((HEAPU8[$1 + 1 >> 0] | 0) << 8 | (HEAPU8[$1 >> 0] | 0) | (HEAPU8[$1 + 2 >> 0] | 0) << 16 | (HEAPU8[$1 + 3 >> 0] | 0) << 24) ^ HEAP32[$4 >> 2]; //@line 1139
 $$0138 = ((HEAPU8[$1 + 5 >> 0] | 0) << 8 | (HEAPU8[$1 + 4 >> 0] | 0) | (HEAPU8[$1 + 6 >> 0] | 0) << 16 | (HEAPU8[$1 + 7 >> 0] | 0) << 24) ^ HEAP32[$4 + 4 >> 2]; //@line 1139
 $$0139 = ((HEAPU8[$1 + 13 >> 0] | 0) << 8 | (HEAPU8[$1 + 12 >> 0] | 0) | (HEAPU8[$1 + 14 >> 0] | 0) << 16 | (HEAPU8[$1 + 15 >> 0] | 0) << 24) ^ HEAP32[$4 + 12 >> 2]; //@line 1139
 $$0140 = ((HEAPU8[$1 + 9 >> 0] | 0) << 8 | (HEAPU8[$1 + 8 >> 0] | 0) | (HEAPU8[$1 + 10 >> 0] | 0) << 16 | (HEAPU8[$1 + 11 >> 0] | 0) << 24) ^ HEAP32[$4 + 8 >> 2]; //@line 1139
 while (1) {
  $110 = HEAP32[5460 + (($$0137 & 255) << 2) >> 2] ^ HEAP32[$$0136 >> 2] ^ HEAP32[6484 + (($$0138 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7508 + (($$0140 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8532 + ($$0139 >>> 24 << 2) >> 2]; //@line 1161
  $130 = HEAP32[5460 + (($$0138 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 4 >> 2] ^ HEAP32[6484 + (($$0140 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7508 + (($$0139 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8532 + ($$0137 >>> 24 << 2) >> 2]; //@line 1181
  $150 = HEAP32[5460 + (($$0140 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 8 >> 2] ^ HEAP32[6484 + (($$0139 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7508 + (($$0137 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8532 + ($$0138 >>> 24 << 2) >> 2]; //@line 1201
  $170 = HEAP32[5460 + (($$0139 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 12 >> 2] ^ HEAP32[6484 + (($$0137 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7508 + (($$0138 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8532 + ($$0140 >>> 24 << 2) >> 2]; //@line 1221
  $171 = $$0136 + 20 | 0; //@line 1222
  $172 = HEAP32[$$0136 + 16 >> 2] | 0; //@line 1223
  $173 = $110 & 255; //@line 1224
  if (($$0$in | 0) <= 1) {
   break;
  }
  $230 = HEAP32[5460 + (($150 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 24 >> 2] ^ HEAP32[6484 + (($170 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7508 + (($110 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8532 + ($130 >>> 24 << 2) >> 2]; //@line 1285
  $250 = HEAP32[5460 + (($170 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 28 >> 2] ^ HEAP32[6484 + (($110 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7508 + (($130 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8532 + ($150 >>> 24 << 2) >> 2]; //@line 1305
  $$0$in = $$0$in + -1 | 0; //@line 1306
  $$0136 = $$0136 + 32 | 0; //@line 1306
  $$0137 = HEAP32[5460 + ($173 << 2) >> 2] ^ $172 ^ HEAP32[6484 + (($130 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7508 + (($150 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8532 + ($170 >>> 24 << 2) >> 2]; //@line 1306
  $$0138 = HEAP32[5460 + (($130 & 255) << 2) >> 2] ^ HEAP32[$171 >> 2] ^ HEAP32[6484 + (($150 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7508 + (($170 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8532 + ($110 >>> 24 << 2) >> 2]; //@line 1306
  $$0139 = $250; //@line 1306
  $$0140 = $230; //@line 1306
 }
 $261 = (HEAPU8[14451 + ($130 >>> 8 & 255) >> 0] | 0) << 8 ^ $172; //@line 1318
 $268 = (HEAPU8[14451 + ($150 >>> 16 & 255) >> 0] | 0) << 16 ^ $172; //@line 1325
 $274 = (HEAPU8[14451 + ($170 >>> 24) >> 0] | 0) << 24 ^ $172; //@line 1331
 $276 = HEAP32[$171 >> 2] | 0; //@line 1333
 $281 = $276 ^ (HEAPU8[14451 + ($130 & 255) >> 0] | 0); //@line 1338
 $288 = (HEAPU8[14451 + ($150 >>> 8 & 255) >> 0] | 0) << 8 ^ $276; //@line 1345
 $295 = (HEAPU8[14451 + ($170 >>> 16 & 255) >> 0] | 0) << 16 ^ $276; //@line 1352
 $301 = (HEAPU8[14451 + ($110 >>> 24) >> 0] | 0) << 24 ^ $276; //@line 1358
 $303 = HEAP32[$$0136 + 24 >> 2] | 0; //@line 1360
 $308 = $303 ^ (HEAPU8[14451 + ($150 & 255) >> 0] | 0); //@line 1365
 $315 = (HEAPU8[14451 + ($170 >>> 8 & 255) >> 0] | 0) << 8 ^ $303; //@line 1372
 $322 = (HEAPU8[14451 + ($110 >>> 16 & 255) >> 0] | 0) << 16 ^ $303; //@line 1379
 $328 = (HEAPU8[14451 + ($130 >>> 24) >> 0] | 0) << 24 ^ $303; //@line 1385
 $329 = HEAP32[$$0136 + 28 >> 2] | 0; //@line 1386
 $334 = $329 ^ (HEAPU8[14451 + ($170 & 255) >> 0] | 0); //@line 1391
 $341 = (HEAPU8[14451 + ($110 >>> 8 & 255) >> 0] | 0) << 8 ^ $329; //@line 1398
 $348 = (HEAPU8[14451 + ($130 >>> 16 & 255) >> 0] | 0) << 16 ^ $329; //@line 1405
 $354 = (HEAPU8[14451 + ($150 >>> 24) >> 0] | 0) << 24 ^ $329; //@line 1411
 HEAP8[$2 >> 0] = $172 ^ (HEAPU8[14451 + $173 >> 0] | 0); //@line 1413
 HEAP8[$2 + 1 >> 0] = $261 >>> 8; //@line 1417
 HEAP8[$2 + 2 >> 0] = $268 >>> 16; //@line 1421
 HEAP8[$2 + 3 >> 0] = $274 >>> 24; //@line 1425
 HEAP8[$2 + 4 >> 0] = $281; //@line 1428
 HEAP8[$2 + 5 >> 0] = $288 >>> 8; //@line 1432
 HEAP8[$2 + 6 >> 0] = $295 >>> 16; //@line 1436
 HEAP8[$2 + 7 >> 0] = $301 >>> 24; //@line 1440
 HEAP8[$2 + 8 >> 0] = $308; //@line 1443
 HEAP8[$2 + 9 >> 0] = $315 >>> 8; //@line 1447
 HEAP8[$2 + 10 >> 0] = $322 >>> 16; //@line 1451
 HEAP8[$2 + 11 >> 0] = $328 >>> 24; //@line 1455
 HEAP8[$2 + 12 >> 0] = $334; //@line 1458
 HEAP8[$2 + 13 >> 0] = $341 >>> 8; //@line 1462
 HEAP8[$2 + 14 >> 0] = $348 >>> 16; //@line 1466
 HEAP8[$2 + 15 >> 0] = $354 >>> 24; //@line 1470
 return 0; //@line 1471
}
function _mbedtls_internal_aes_decrypt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$in = 0, $$0136 = 0, $$0137 = 0, $$0138 = 0, $$0139 = 0, $$0140 = 0, $110 = 0, $130 = 0, $150 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $230 = 0, $250 = 0, $261 = 0, $268 = 0, $274 = 0, $276 = 0, $281 = 0, $288 = 0, $295 = 0, $301 = 0, $303 = 0, $308 = 0, $315 = 0, $322 = 0, $328 = 0, $329 = 0, $334 = 0, $341 = 0, $348 = 0, $354 = 0, $4 = 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 1500
 $$0$in = HEAP32[$0 >> 2] >> 1; //@line 1586
 $$0136 = $4 + 16 | 0; //@line 1586
 $$0137 = ((HEAPU8[$1 + 1 >> 0] | 0) << 8 | (HEAPU8[$1 >> 0] | 0) | (HEAPU8[$1 + 2 >> 0] | 0) << 16 | (HEAPU8[$1 + 3 >> 0] | 0) << 24) ^ HEAP32[$4 >> 2]; //@line 1586
 $$0138 = ((HEAPU8[$1 + 5 >> 0] | 0) << 8 | (HEAPU8[$1 + 4 >> 0] | 0) | (HEAPU8[$1 + 6 >> 0] | 0) << 16 | (HEAPU8[$1 + 7 >> 0] | 0) << 24) ^ HEAP32[$4 + 4 >> 2]; //@line 1586
 $$0139 = ((HEAPU8[$1 + 13 >> 0] | 0) << 8 | (HEAPU8[$1 + 12 >> 0] | 0) | (HEAPU8[$1 + 14 >> 0] | 0) << 16 | (HEAPU8[$1 + 15 >> 0] | 0) << 24) ^ HEAP32[$4 + 12 >> 2]; //@line 1586
 $$0140 = ((HEAPU8[$1 + 9 >> 0] | 0) << 8 | (HEAPU8[$1 + 8 >> 0] | 0) | (HEAPU8[$1 + 10 >> 0] | 0) << 16 | (HEAPU8[$1 + 11 >> 0] | 0) << 24) ^ HEAP32[$4 + 8 >> 2]; //@line 1586
 while (1) {
  $110 = HEAP32[1364 + (($$0137 & 255) << 2) >> 2] ^ HEAP32[$$0136 >> 2] ^ HEAP32[2388 + (($$0139 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3412 + (($$0140 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4436 + ($$0138 >>> 24 << 2) >> 2]; //@line 1608
  $130 = HEAP32[1364 + (($$0138 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 4 >> 2] ^ HEAP32[2388 + (($$0137 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3412 + (($$0139 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4436 + ($$0140 >>> 24 << 2) >> 2]; //@line 1628
  $150 = HEAP32[1364 + (($$0140 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 8 >> 2] ^ HEAP32[2388 + (($$0138 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3412 + (($$0137 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4436 + ($$0139 >>> 24 << 2) >> 2]; //@line 1648
  $170 = HEAP32[1364 + (($$0139 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 12 >> 2] ^ HEAP32[2388 + (($$0140 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3412 + (($$0138 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4436 + ($$0137 >>> 24 << 2) >> 2]; //@line 1668
  $171 = $$0136 + 20 | 0; //@line 1669
  $172 = HEAP32[$$0136 + 16 >> 2] | 0; //@line 1670
  $173 = $110 & 255; //@line 1671
  if (($$0$in | 0) <= 1) {
   break;
  }
  $230 = HEAP32[1364 + (($150 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 24 >> 2] ^ HEAP32[2388 + (($130 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3412 + (($110 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4436 + ($170 >>> 24 << 2) >> 2]; //@line 1732
  $250 = HEAP32[1364 + (($170 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 28 >> 2] ^ HEAP32[2388 + (($150 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3412 + (($130 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4436 + ($110 >>> 24 << 2) >> 2]; //@line 1752
  $$0$in = $$0$in + -1 | 0; //@line 1753
  $$0136 = $$0136 + 32 | 0; //@line 1753
  $$0137 = HEAP32[1364 + ($173 << 2) >> 2] ^ $172 ^ HEAP32[2388 + (($170 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3412 + (($150 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4436 + ($130 >>> 24 << 2) >> 2]; //@line 1753
  $$0138 = HEAP32[1364 + (($130 & 255) << 2) >> 2] ^ HEAP32[$171 >> 2] ^ HEAP32[2388 + (($110 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3412 + (($170 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4436 + ($150 >>> 24 << 2) >> 2]; //@line 1753
  $$0139 = $250; //@line 1753
  $$0140 = $230; //@line 1753
 }
 $261 = (HEAPU8[14707 + ($170 >>> 8 & 255) >> 0] | 0) << 8 ^ $172; //@line 1765
 $268 = (HEAPU8[14707 + ($150 >>> 16 & 255) >> 0] | 0) << 16 ^ $172; //@line 1772
 $274 = (HEAPU8[14707 + ($130 >>> 24) >> 0] | 0) << 24 ^ $172; //@line 1778
 $276 = HEAP32[$171 >> 2] | 0; //@line 1780
 $281 = $276 ^ (HEAPU8[14707 + ($130 & 255) >> 0] | 0); //@line 1785
 $288 = (HEAPU8[14707 + ($110 >>> 8 & 255) >> 0] | 0) << 8 ^ $276; //@line 1792
 $295 = (HEAPU8[14707 + ($170 >>> 16 & 255) >> 0] | 0) << 16 ^ $276; //@line 1799
 $301 = (HEAPU8[14707 + ($150 >>> 24) >> 0] | 0) << 24 ^ $276; //@line 1805
 $303 = HEAP32[$$0136 + 24 >> 2] | 0; //@line 1807
 $308 = $303 ^ (HEAPU8[14707 + ($150 & 255) >> 0] | 0); //@line 1812
 $315 = (HEAPU8[14707 + ($130 >>> 8 & 255) >> 0] | 0) << 8 ^ $303; //@line 1819
 $322 = (HEAPU8[14707 + ($110 >>> 16 & 255) >> 0] | 0) << 16 ^ $303; //@line 1826
 $328 = (HEAPU8[14707 + ($170 >>> 24) >> 0] | 0) << 24 ^ $303; //@line 1832
 $329 = HEAP32[$$0136 + 28 >> 2] | 0; //@line 1833
 $334 = $329 ^ (HEAPU8[14707 + ($170 & 255) >> 0] | 0); //@line 1838
 $341 = (HEAPU8[14707 + ($150 >>> 8 & 255) >> 0] | 0) << 8 ^ $329; //@line 1845
 $348 = (HEAPU8[14707 + ($130 >>> 16 & 255) >> 0] | 0) << 16 ^ $329; //@line 1852
 $354 = (HEAPU8[14707 + ($110 >>> 24) >> 0] | 0) << 24 ^ $329; //@line 1858
 HEAP8[$2 >> 0] = $172 ^ (HEAPU8[14707 + $173 >> 0] | 0); //@line 1860
 HEAP8[$2 + 1 >> 0] = $261 >>> 8; //@line 1864
 HEAP8[$2 + 2 >> 0] = $268 >>> 16; //@line 1868
 HEAP8[$2 + 3 >> 0] = $274 >>> 24; //@line 1872
 HEAP8[$2 + 4 >> 0] = $281; //@line 1875
 HEAP8[$2 + 5 >> 0] = $288 >>> 8; //@line 1879
 HEAP8[$2 + 6 >> 0] = $295 >>> 16; //@line 1883
 HEAP8[$2 + 7 >> 0] = $301 >>> 24; //@line 1887
 HEAP8[$2 + 8 >> 0] = $308; //@line 1890
 HEAP8[$2 + 9 >> 0] = $315 >>> 8; //@line 1894
 HEAP8[$2 + 10 >> 0] = $322 >>> 16; //@line 1898
 HEAP8[$2 + 11 >> 0] = $328 >>> 24; //@line 1902
 HEAP8[$2 + 12 >> 0] = $334; //@line 1905
 HEAP8[$2 + 13 >> 0] = $341 >>> 8; //@line 1909
 HEAP8[$2 + 14 >> 0] = $348 >>> 16; //@line 1913
 HEAP8[$2 + 15 >> 0] = $354 >>> 24; //@line 1917
 return 0; //@line 1918
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_124($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $85 = 0, $86 = 0, $ReallocAsyncCtx28 = 0, sp = 0;
 sp = STACKTOP; //@line 27637
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27639
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27641
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27643
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27645
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27647
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27649
 $14 = HEAP8[$0 + 28 >> 0] | 0; //@line 27651
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27653
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 27655
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 27657
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 27659
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 27661
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 27663
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 27665
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 27667
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 27669
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 27671
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 27673
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 27675
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 27677
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 27679
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 27681
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 27683
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 27685
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 27687
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 27689
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 27691
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 27693
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 27695
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 27697
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 27699
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 27701
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 27703
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 27705
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 27707
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 27709
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 27711
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 27713
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 27715
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 27717
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 27719
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 27721
 $85 = $8 + 356 | 0; //@line 27722
 $86 = HEAP32[$85 >> 2] | 0; //@line 27723
 $ReallocAsyncCtx28 = _emscripten_realloc_async_context(176) | 0; //@line 27725
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($86, $8 + 1056 | 0); //@line 27726
 if (!___async) {
  ___async_unwind = 0; //@line 27729
 }
 HEAP32[$ReallocAsyncCtx28 >> 2] = 303; //@line 27731
 HEAP32[$ReallocAsyncCtx28 + 4 >> 2] = $2; //@line 27733
 HEAP32[$ReallocAsyncCtx28 + 8 >> 2] = $4; //@line 27735
 HEAP32[$ReallocAsyncCtx28 + 12 >> 2] = $6; //@line 27737
 HEAP32[$ReallocAsyncCtx28 + 16 >> 2] = $8; //@line 27739
 HEAP32[$ReallocAsyncCtx28 + 20 >> 2] = $10; //@line 27741
 HEAP32[$ReallocAsyncCtx28 + 24 >> 2] = $12; //@line 27743
 HEAP8[$ReallocAsyncCtx28 + 28 >> 0] = $14; //@line 27745
 HEAP32[$ReallocAsyncCtx28 + 32 >> 2] = $16; //@line 27747
 HEAP32[$ReallocAsyncCtx28 + 36 >> 2] = $18; //@line 27749
 HEAP32[$ReallocAsyncCtx28 + 40 >> 2] = $20; //@line 27751
 HEAP32[$ReallocAsyncCtx28 + 44 >> 2] = $22; //@line 27753
 HEAP32[$ReallocAsyncCtx28 + 48 >> 2] = $24; //@line 27755
 HEAP32[$ReallocAsyncCtx28 + 52 >> 2] = $26; //@line 27757
 HEAP32[$ReallocAsyncCtx28 + 56 >> 2] = $28; //@line 27759
 HEAP32[$ReallocAsyncCtx28 + 60 >> 2] = $30; //@line 27761
 HEAP32[$ReallocAsyncCtx28 + 64 >> 2] = $32; //@line 27763
 HEAP32[$ReallocAsyncCtx28 + 68 >> 2] = $34; //@line 27765
 HEAP32[$ReallocAsyncCtx28 + 72 >> 2] = $36; //@line 27767
 HEAP32[$ReallocAsyncCtx28 + 76 >> 2] = $38; //@line 27769
 HEAP32[$ReallocAsyncCtx28 + 80 >> 2] = $40; //@line 27771
 HEAP32[$ReallocAsyncCtx28 + 84 >> 2] = $42; //@line 27773
 HEAP32[$ReallocAsyncCtx28 + 88 >> 2] = $44; //@line 27775
 HEAP32[$ReallocAsyncCtx28 + 92 >> 2] = $46; //@line 27777
 HEAP32[$ReallocAsyncCtx28 + 96 >> 2] = $48; //@line 27779
 HEAP32[$ReallocAsyncCtx28 + 100 >> 2] = $85; //@line 27781
 HEAP32[$ReallocAsyncCtx28 + 104 >> 2] = $50; //@line 27783
 HEAP32[$ReallocAsyncCtx28 + 108 >> 2] = $52; //@line 27785
 HEAP32[$ReallocAsyncCtx28 + 112 >> 2] = $54; //@line 27787
 HEAP32[$ReallocAsyncCtx28 + 116 >> 2] = $56; //@line 27789
 HEAP32[$ReallocAsyncCtx28 + 120 >> 2] = $58; //@line 27791
 HEAP32[$ReallocAsyncCtx28 + 124 >> 2] = $60; //@line 27793
 HEAP32[$ReallocAsyncCtx28 + 128 >> 2] = $62; //@line 27795
 HEAP32[$ReallocAsyncCtx28 + 132 >> 2] = $64; //@line 27797
 HEAP32[$ReallocAsyncCtx28 + 136 >> 2] = $66; //@line 27799
 HEAP32[$ReallocAsyncCtx28 + 140 >> 2] = $68; //@line 27801
 HEAP32[$ReallocAsyncCtx28 + 144 >> 2] = $70; //@line 27803
 HEAP32[$ReallocAsyncCtx28 + 148 >> 2] = $74; //@line 27805
 HEAP32[$ReallocAsyncCtx28 + 152 >> 2] = $72; //@line 27807
 HEAP32[$ReallocAsyncCtx28 + 156 >> 2] = $76; //@line 27809
 HEAP32[$ReallocAsyncCtx28 + 160 >> 2] = $78; //@line 27811
 HEAP32[$ReallocAsyncCtx28 + 164 >> 2] = $80; //@line 27813
 HEAP32[$ReallocAsyncCtx28 + 168 >> 2] = $82; //@line 27815
 HEAP32[$ReallocAsyncCtx28 + 172 >> 2] = $84; //@line 27817
 sp = STACKTOP; //@line 27818
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$05$i = 0, $$06$i = 0, $1 = 0, $12 = 0, $3 = 0, $34 = 0, $46 = 0, $49 = 0, $54 = 0, $55 = 0, $67 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx4 = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 13886
 STACKTOP = STACKTOP + 16 | 0; //@line 13887
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13887
 $vararg_buffer1 = sp + 8 | 0; //@line 13888
 $vararg_buffer = sp; //@line 13889
 $1 = sp + 12 | 0; //@line 13890
 _mbed_tracef(16, 13704, 14083, $vararg_buffer); //@line 13891
 $3 = HEAP32[$0 + 356 >> 2] | 0; //@line 13893
 $AsyncCtx10 = _emscripten_alloc_async_context(32, sp) | 0; //@line 13895
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($3, $0 + 1016 | 0); //@line 13896
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 395; //@line 13899
  HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 13901
  HEAP32[$AsyncCtx10 + 8 >> 2] = $vararg_buffer; //@line 13903
  HEAP32[$AsyncCtx10 + 12 >> 2] = $1; //@line 13905
  HEAP32[$AsyncCtx10 + 16 >> 2] = $vararg_buffer; //@line 13907
  HEAP32[$AsyncCtx10 + 20 >> 2] = $1; //@line 13909
  HEAP32[$AsyncCtx10 + 24 >> 2] = $vararg_buffer1; //@line 13911
  HEAP32[$AsyncCtx10 + 28 >> 2] = $vararg_buffer1; //@line 13913
  sp = STACKTOP; //@line 13914
  STACKTOP = sp; //@line 13915
  return;
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 13917
 $12 = $0 + 968 | 0; //@line 13918
 HEAP32[$12 >> 2] = HEAP32[$12 >> 2] & -17; //@line 13921
 if (HEAP8[$0 + 944 >> 0] & 8) {
  if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) >> 2] | 0)) {
   HEAP8[$0 + 372 >> 0] = 0; //@line 13934
   HEAP32[$0 + 956 >> 2] = 0; //@line 13936
   HEAP32[$0 + 960 >> 2] = 0; //@line 13938
   HEAP32[$0 + 964 >> 2] = 0; //@line 13940
   HEAP8[$0 + 380 >> 0] = 0; //@line 13942
   HEAP8[$0 + 894 >> 0] = 1; //@line 13944
   HEAP8[$0 + 895 >> 0] = 1; //@line 13946
   HEAP8[$0 + 377 >> 0] = 0; //@line 13948
   HEAP8[$0 + 1152 >> 0] = 0; //@line 13950
   HEAP16[$0 + 1154 >> 1] = 1; //@line 13952
   $34 = $0 + 4 | 0; //@line 13953
   __ZN14LoRaMacCommand20clear_command_bufferEv($34); //@line 13954
   __ZN14LoRaMacCommand19clear_repeat_bufferEv($34); //@line 13955
   __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($34); //@line 13956
   HEAP8[$0 + 371 >> 0] = 1; //@line 13958
   __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$0 >> 2] | 0, $0 + 360 | 0, 0); //@line 13960
   HEAP8[$0 + 373 >> 0] = 0; //@line 13962
   HEAP8[$0 + 374 >> 0] = 0; //@line 13964
   $$05$i = HEAP32[$0 + 1208 >> 2] | 0; //@line 13966
   if ($$05$i | 0) {
    $$06$i = $$05$i; //@line 13969
    do {
     HEAP32[$$06$i + 36 >> 2] = 0; //@line 13972
     $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 13974
    } while (($$06$i | 0) != 0);
   }
   HEAP8[$0 + 378 >> 0] = 0; //@line 13984
   HEAP8[$0 + 379 >> 0] = 0; //@line 13986
   $46 = HEAP32[$0 >> 2] | 0; //@line 13987
   $49 = HEAP32[(HEAP32[$46 >> 2] | 0) + 52 >> 2] | 0; //@line 13990
   $54 = (HEAPU8[$0 + 897 >> 0] | 0) + 1 & 255; //@line 13995
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 13996
   $55 = FUNCTION_TABLE_iii[$49 & 31]($46, $54) | 0; //@line 13997
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 396; //@line 14000
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 14002
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 14004
    HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 14006
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer; //@line 14008
    HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 14010
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer1; //@line 14012
    HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer1; //@line 14014
    sp = STACKTOP; //@line 14015
    STACKTOP = sp; //@line 14016
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 14018
   HEAP8[$0 + 1097 >> 0] = $55; //@line 14020
   HEAP8[$vararg_buffer >> 0] = 0; //@line 14021
   HEAP8[$1 >> 0] = HEAP8[$0 + 1156 >> 0] << 7; //@line 14025
   $AsyncCtx4 = _emscripten_alloc_async_context(24, sp) | 0; //@line 14026
   $67 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($0, $vararg_buffer, $1, 0, 0, 0) | 0; //@line 14027
   if (___async) {
    HEAP32[$AsyncCtx4 >> 2] = 397; //@line 14030
    HEAP32[$AsyncCtx4 + 4 >> 2] = $0; //@line 14032
    HEAP32[$AsyncCtx4 + 8 >> 2] = $vararg_buffer1; //@line 14034
    HEAP32[$AsyncCtx4 + 12 >> 2] = $vararg_buffer1; //@line 14036
    HEAP32[$AsyncCtx4 + 16 >> 2] = $1; //@line 14038
    HEAP32[$AsyncCtx4 + 20 >> 2] = $vararg_buffer; //@line 14040
    sp = STACKTOP; //@line 14041
    STACKTOP = sp; //@line 14042
    return;
   }
   _emscripten_free_async_context($AsyncCtx4 | 0); //@line 14044
   if ($67 | 0) {
    HEAP32[$vararg_buffer1 >> 2] = $67; //@line 14047
    _mbed_tracef(2, 13704, 14109, $vararg_buffer1); //@line 14048
    STACKTOP = sp; //@line 14049
    return;
   }
  }
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14053
 __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 14054
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 398; //@line 14057
  HEAP32[$AsyncCtx7 + 4 >> 2] = $1; //@line 14059
  HEAP32[$AsyncCtx7 + 8 >> 2] = $vararg_buffer; //@line 14061
  sp = STACKTOP; //@line 14062
  STACKTOP = sp; //@line 14063
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 14065
 STACKTOP = sp; //@line 14066
 return;
}
function __ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$01722$i = 0, $$01821$i = 0, $$023$i = 0, $$2$i = 0, $$220$i = 0, $$sink = 0, $10 = 0, $11 = 0, $15 = 0, $22 = 0, $23 = 0, $25 = 0, $37 = 0, $39 = 0, $40 = 0, $42 = 0, $44 = 0, $45 = 0, $47 = 0, $5 = 0, $55 = 0, $57 = 0, $7 = 0, $75 = 0, $78 = 0, $8 = 0, $9 = 0, $91 = 0, $92 = 0, $indvars$iv$i = 0, $indvars$iv$i27 = 0, $wide$trip$count$i = 0, $wide$trip$count$i25 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 22716
 STACKTOP = STACKTOP + 16 | 0; //@line 22717
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 22717
 $5 = sp; //@line 22718
 dest = $5; //@line 22719
 stop = dest + 16 | 0; //@line 22719
 do {
  HEAP8[dest >> 0] = 255; //@line 22719
  dest = dest + 1 | 0; //@line 22719
 } while ((dest | 0) < (stop | 0));
 $7 = HEAP32[$0 + 72 >> 2] | 0; //@line 22721
 $8 = $0 + 120 | 0; //@line 22722
 $9 = HEAP32[$8 >> 2] | 0; //@line 22723
 $10 = $0 + 128 | 0; //@line 22724
 $11 = HEAP8[$10 >> 0] | 0; //@line 22725
 if (!((__ZN7LoRaPHY19num_active_channelsEPthh(0, $9, 0, $11) | 0) << 24 >> 24)) {
  $15 = HEAP32[$0 + 124 >> 2] | 0; //@line 22730
  if ($11 << 24 >> 24 != 0 & (($9 | 0) != 0 & ($15 | 0) != 0)) {
   $wide$trip$count$i = $11 & 255; //@line 22737
   $indvars$iv$i = 0; //@line 22738
   do {
    HEAP16[$9 + ($indvars$iv$i << 1) >> 1] = HEAP16[$15 + ($indvars$iv$i << 1) >> 1] | 0; //@line 22743
    $indvars$iv$i = $indvars$iv$i + 1 | 0; //@line 22744
   } while (($indvars$iv$i | 0) != ($wide$trip$count$i | 0));
  }
 }
 $22 = HEAP32[$1 >> 2] | 0; //@line 22754
 $23 = $0 + 8 | 0; //@line 22755
 $25 = $1 + 4 | 0; //@line 22757
 if ($22 >>> 0 > (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$23 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0) >>> 0) {
  $78 = HEAP32[$1 >> 2] | 0; //@line 22762
  $$0 = 1; //@line 22767
  $$sink = $78 - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$23 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0) | 0; //@line 22767
  HEAP32[$3 >> 2] = $$sink; //@line 22768
  STACKTOP = sp; //@line 22769
  return $$0 | 0; //@line 22769
 }
 HEAP32[$4 >> 2] = 0; //@line 22771
 $37 = __ZN7LoRaPHY19update_band_timeoffEbbP6band_th($0, (HEAP8[$1 + 9 >> 0] | 0) != 0, (HEAP8[$1 + 10 >> 0] | 0) != 0, $7, HEAP8[$0 + 76 >> 0] | 0) | 0; //@line 22780
 $39 = HEAP8[$1 + 8 >> 0] | 0; //@line 22782
 $40 = HEAP32[$8 >> 2] | 0; //@line 22783
 $42 = HEAP8[$0 + 20 >> 0] | 0; //@line 22785
 do {
  if ($42 << 24 >> 24) {
   $44 = $0 + 112 | 0; //@line 22789
   $45 = $0 + 72 | 0; //@line 22790
   $$01722$i = 0; //@line 22791
   $$01821$i = 0; //@line 22791
   $$023$i = 0; //@line 22791
   $47 = 0; //@line 22791
   while (1) {
    do {
     if (!(1 << ($47 & 15) & HEAPU16[$40 + ($47 >>> 4 << 1) >> 1])) {
      $$2$i = $$023$i; //@line 22803
      $$220$i = $$01821$i; //@line 22803
     } else {
      $55 = HEAP32[$44 >> 2] | 0; //@line 22805
      $57 = HEAP8[$55 + ($47 * 12 | 0) + 8 >> 0] | 0; //@line 22807
      if ($57 << 24 >> 24 >> 4 << 24 >> 24 < $39 << 24 >> 24 ? 1 : ($57 << 4 & 255) << 24 >> 24 >> 4 << 24 >> 24 > $39 << 24 >> 24) {
       $$2$i = $$023$i; //@line 22815
       $$220$i = $$01821$i; //@line 22815
      } else {
       if (!(HEAP32[(HEAP32[$45 >> 2] | 0) + ((HEAPU8[$55 + ($47 * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 12 >> 2] | 0)) {
        HEAP8[$5 + ($$023$i & 255) >> 0] = $$01722$i; //@line 22828
        $$2$i = $$023$i + 1 << 24 >> 24; //@line 22829
        $$220$i = $$01821$i; //@line 22829
        break;
       } else {
        $$2$i = $$023$i; //@line 22833
        $$220$i = $$01821$i + 1 << 24 >> 24; //@line 22833
        break;
       }
      }
     }
    } while (0);
    $75 = $$01722$i + 1 << 24 >> 24; //@line 22839
    if (($75 & 255) < ($42 & 255)) {
     $$01722$i = $75; //@line 22843
     $$01821$i = $$220$i; //@line 22843
     $$023$i = $$2$i; //@line 22843
     $47 = $75 & 255; //@line 22843
    } else {
     break;
    }
   }
   if (!($$2$i << 24 >> 24)) {
    if (!($$220$i << 24 >> 24)) {
     break;
    } else {
     $$0 = 1; //@line 22854
     $$sink = $37; //@line 22854
    }
    HEAP32[$3 >> 2] = $$sink; //@line 22856
    STACKTOP = sp; //@line 22857
    return $$0 | 0; //@line 22857
   } else {
    HEAP8[$2 >> 0] = HEAP8[$5 + ((_rand() | 0) % ($$2$i & 255 | 0) | 0) >> 0] | 0; //@line 22864
    $$0 = 1; //@line 22865
    $$sink = 0; //@line 22865
    HEAP32[$3 >> 2] = $$sink; //@line 22866
    STACKTOP = sp; //@line 22867
    return $$0 | 0; //@line 22867
   }
  }
 } while (0);
 $91 = HEAP32[$0 + 124 >> 2] | 0; //@line 22872
 $92 = HEAP8[$10 >> 0] | 0; //@line 22873
 if (!(($40 | 0) != 0 & ($91 | 0) != 0 & $92 << 24 >> 24 != 0)) {
  $$0 = 0; //@line 22880
  $$sink = 0; //@line 22880
  HEAP32[$3 >> 2] = $$sink; //@line 22881
  STACKTOP = sp; //@line 22882
  return $$0 | 0; //@line 22882
 }
 $wide$trip$count$i25 = $92 & 255; //@line 22884
 $indvars$iv$i27 = 0; //@line 22885
 do {
  HEAP16[$40 + ($indvars$iv$i27 << 1) >> 1] = HEAP16[$91 + ($indvars$iv$i27 << 1) >> 1] | 0; //@line 22890
  $indvars$iv$i27 = $indvars$iv$i27 + 1 | 0; //@line 22891
 } while (($indvars$iv$i27 | 0) != ($wide$trip$count$i25 | 0));
 $$0 = 0; //@line 22894
 $$sink = 0; //@line 22894
 HEAP32[$3 >> 2] = $$sink; //@line 22900
 STACKTOP = sp; //@line 22901
 return $$0 | 0; //@line 22901
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_277($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 18589
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18591
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18593
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18597
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18599
 $11 = $8 + 12 | 0; //@line 18600
 HEAP32[$8 >> 2] = 477; //@line 18601
 HEAP32[$8 + 4 >> 2] = 0; //@line 18603
 HEAP32[$8 + 8 >> 2] = $2; //@line 18605
 HEAP32[$11 >> 2] = 912; //@line 18606
 $12 = $2 + 1228 | 0; //@line 18607
 if (($12 | 0) == ($8 | 0)) {
  $35 = HEAP32[230] | 0; //@line 18611
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 18612
  FUNCTION_TABLE_vi[$35 & 1023]($8); //@line 18613
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 480; //@line 18616
   $36 = $ReallocAsyncCtx12 + 4 | 0; //@line 18617
   HEAP32[$36 >> 2] = $8; //@line 18618
   $37 = $ReallocAsyncCtx12 + 8 | 0; //@line 18619
   HEAP32[$37 >> 2] = $10; //@line 18620
   $38 = $ReallocAsyncCtx12 + 12 | 0; //@line 18621
   HEAP32[$38 >> 2] = $2; //@line 18622
   $39 = $ReallocAsyncCtx12 + 16 | 0; //@line 18623
   HEAP32[$39 >> 2] = $4; //@line 18624
   sp = STACKTOP; //@line 18625
   return;
  }
  ___async_unwind = 0; //@line 18628
  HEAP32[$ReallocAsyncCtx12 >> 2] = 480; //@line 18629
  $36 = $ReallocAsyncCtx12 + 4 | 0; //@line 18630
  HEAP32[$36 >> 2] = $8; //@line 18631
  $37 = $ReallocAsyncCtx12 + 8 | 0; //@line 18632
  HEAP32[$37 >> 2] = $10; //@line 18633
  $38 = $ReallocAsyncCtx12 + 12 | 0; //@line 18634
  HEAP32[$38 >> 2] = $2; //@line 18635
  $39 = $ReallocAsyncCtx12 + 16 | 0; //@line 18636
  HEAP32[$39 >> 2] = $4; //@line 18637
  sp = STACKTOP; //@line 18638
  return;
 }
 $14 = $2 + 1240 | 0; //@line 18641
 $15 = HEAP32[$14 >> 2] | 0; //@line 18642
 if (!$15) {
  $27 = HEAP32[229] | 0; //@line 18646
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(28) | 0; //@line 18647
  FUNCTION_TABLE_vii[$27 & 31]($12, $8); //@line 18648
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 479; //@line 18651
   $28 = $ReallocAsyncCtx11 + 4 | 0; //@line 18652
   HEAP32[$28 >> 2] = $2; //@line 18653
   $29 = $ReallocAsyncCtx11 + 8 | 0; //@line 18654
   HEAP32[$29 >> 2] = $4; //@line 18655
   $30 = $ReallocAsyncCtx11 + 12 | 0; //@line 18656
   HEAP32[$30 >> 2] = $11; //@line 18657
   $31 = $ReallocAsyncCtx11 + 16 | 0; //@line 18658
   HEAP32[$31 >> 2] = $14; //@line 18659
   $32 = $ReallocAsyncCtx11 + 20 | 0; //@line 18660
   HEAP32[$32 >> 2] = $8; //@line 18661
   $33 = $ReallocAsyncCtx11 + 24 | 0; //@line 18662
   HEAP32[$33 >> 2] = $10; //@line 18663
   sp = STACKTOP; //@line 18664
   return;
  }
  ___async_unwind = 0; //@line 18667
  HEAP32[$ReallocAsyncCtx11 >> 2] = 479; //@line 18668
  $28 = $ReallocAsyncCtx11 + 4 | 0; //@line 18669
  HEAP32[$28 >> 2] = $2; //@line 18670
  $29 = $ReallocAsyncCtx11 + 8 | 0; //@line 18671
  HEAP32[$29 >> 2] = $4; //@line 18672
  $30 = $ReallocAsyncCtx11 + 12 | 0; //@line 18673
  HEAP32[$30 >> 2] = $11; //@line 18674
  $31 = $ReallocAsyncCtx11 + 16 | 0; //@line 18675
  HEAP32[$31 >> 2] = $14; //@line 18676
  $32 = $ReallocAsyncCtx11 + 20 | 0; //@line 18677
  HEAP32[$32 >> 2] = $8; //@line 18678
  $33 = $ReallocAsyncCtx11 + 24 | 0; //@line 18679
  HEAP32[$33 >> 2] = $10; //@line 18680
  sp = STACKTOP; //@line 18681
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 18685
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 18686
  FUNCTION_TABLE_vi[$18 & 1023]($12); //@line 18687
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 478; //@line 18690
   $19 = $ReallocAsyncCtx10 + 4 | 0; //@line 18691
   HEAP32[$19 >> 2] = $11; //@line 18692
   $20 = $ReallocAsyncCtx10 + 8 | 0; //@line 18693
   HEAP32[$20 >> 2] = $2; //@line 18694
   $21 = $ReallocAsyncCtx10 + 12 | 0; //@line 18695
   HEAP32[$21 >> 2] = $4; //@line 18696
   $22 = $ReallocAsyncCtx10 + 16 | 0; //@line 18697
   HEAP32[$22 >> 2] = $14; //@line 18698
   $23 = $ReallocAsyncCtx10 + 20 | 0; //@line 18699
   HEAP32[$23 >> 2] = $8; //@line 18700
   $24 = $ReallocAsyncCtx10 + 24 | 0; //@line 18701
   HEAP32[$24 >> 2] = $10; //@line 18702
   $25 = $ReallocAsyncCtx10 + 28 | 0; //@line 18703
   HEAP32[$25 >> 2] = $12; //@line 18704
   sp = STACKTOP; //@line 18705
   return;
  }
  ___async_unwind = 0; //@line 18708
  HEAP32[$ReallocAsyncCtx10 >> 2] = 478; //@line 18709
  $19 = $ReallocAsyncCtx10 + 4 | 0; //@line 18710
  HEAP32[$19 >> 2] = $11; //@line 18711
  $20 = $ReallocAsyncCtx10 + 8 | 0; //@line 18712
  HEAP32[$20 >> 2] = $2; //@line 18713
  $21 = $ReallocAsyncCtx10 + 12 | 0; //@line 18714
  HEAP32[$21 >> 2] = $4; //@line 18715
  $22 = $ReallocAsyncCtx10 + 16 | 0; //@line 18716
  HEAP32[$22 >> 2] = $14; //@line 18717
  $23 = $ReallocAsyncCtx10 + 20 | 0; //@line 18718
  HEAP32[$23 >> 2] = $8; //@line 18719
  $24 = $ReallocAsyncCtx10 + 24 | 0; //@line 18720
  HEAP32[$24 >> 2] = $10; //@line 18721
  $25 = $ReallocAsyncCtx10 + 28 | 0; //@line 18722
  HEAP32[$25 >> 2] = $12; //@line 18723
  sp = STACKTOP; //@line 18724
  return;
 }
}
function _mbedtls_aes_setkey_enc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0103117 = 0, $$0106 = 0, $$0112 = 0, $$1104111 = 0, $$1114 = 0, $$2105113 = 0, $$2116 = 0, $$3115 = 0, $$sink = 0, $107 = 0, $111 = 0, $115 = 0, $119 = 0, $127 = 0, $129 = 0, $158 = 0, $162 = 0, $166 = 0, $194 = 0, $198 = 0, $202 = 0, $3 = 0, $33 = 0, $35 = 0, $5 = 0, $6 = 0, $64 = 0, $68 = 0, $76 = 0, $78 = 0, $$0112$looptemp = 0, $$1114$looptemp = 0, $$2116$looptemp = 0;
 switch ($2 | 0) {
 case 128:
  {
   $$sink = 10; //@line 491
   break;
  }
 case 192:
  {
   $$sink = 12; //@line 495
   break;
  }
 case 256:
  {
   $$sink = 14; //@line 499
   break;
  }
 default:
  {
   $$0106 = -32; //@line 503
   return $$0106 | 0; //@line 504
  }
 }
 HEAP32[$0 >> 2] = $$sink; //@line 507
 $3 = $0 + 8 | 0; //@line 508
 HEAP32[$0 + 4 >> 2] = $3; //@line 510
 $5 = $2 >>> 5; //@line 511
 $$0103117 = 0; //@line 512
 do {
  $6 = $$0103117 << 2; //@line 514
  HEAP32[$0 + 8 + ($$0103117 << 2) >> 2] = (HEAPU8[$1 + ($6 | 1) >> 0] | 0) << 8 | (HEAPU8[$1 + $6 >> 0] | 0) | (HEAPU8[$1 + ($6 | 2) >> 0] | 0) << 16 | (HEAPU8[$1 + ($6 | 3) >> 0] | 0) << 24; //@line 537
  $$0103117 = $$0103117 + 1 | 0; //@line 538
 } while (($$0103117 | 0) != ($5 | 0));
 switch (HEAP32[$0 >> 2] | 0) {
 case 10:
  {
   $$0112 = $3; //@line 550
   $$1104111 = 0; //@line 550
   $33 = HEAP32[$3 >> 2] | 0; //@line 550
   do {
    $35 = HEAP32[$$0112 + 12 >> 2] | 0; //@line 556
    $33 = HEAP32[1324 + ($$1104111 << 2) >> 2] ^ $33 ^ (HEAPU8[14451 + ($35 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[14451 + ($35 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[14451 + ($35 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[14451 + ($35 & 255) >> 0] | 0) << 24; //@line 581
    $$0112$looptemp = $$0112;
    $$0112 = $$0112 + 16 | 0; //@line 582
    HEAP32[$$0112 >> 2] = $33; //@line 583
    $64 = $33 ^ HEAP32[$$0112$looptemp + 4 >> 2]; //@line 586
    HEAP32[$$0112$looptemp + 20 >> 2] = $64; //@line 588
    $68 = HEAP32[$$0112$looptemp + 8 >> 2] ^ $64; //@line 591
    HEAP32[$$0112$looptemp + 24 >> 2] = $68; //@line 593
    HEAP32[$$0112$looptemp + 28 >> 2] = $35 ^ $68; //@line 596
    $$1104111 = $$1104111 + 1 | 0; //@line 597
   } while (($$1104111 | 0) != 10);
   $$0106 = 0; //@line 600
   return $$0106 | 0; //@line 606
  }
 case 12:
  {
   $$1114 = $3; //@line 611
   $$2105113 = 0; //@line 611
   $76 = HEAP32[$3 >> 2] | 0; //@line 611
   do {
    $78 = HEAP32[$$1114 + 20 >> 2] | 0; //@line 617
    $76 = HEAP32[1324 + ($$2105113 << 2) >> 2] ^ $76 ^ (HEAPU8[14451 + ($78 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[14451 + ($78 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[14451 + ($78 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[14451 + ($78 & 255) >> 0] | 0) << 24; //@line 642
    $$1114$looptemp = $$1114;
    $$1114 = $$1114 + 24 | 0; //@line 643
    HEAP32[$$1114 >> 2] = $76; //@line 644
    $107 = $76 ^ HEAP32[$$1114$looptemp + 4 >> 2]; //@line 647
    HEAP32[$$1114$looptemp + 28 >> 2] = $107; //@line 649
    $111 = HEAP32[$$1114$looptemp + 8 >> 2] ^ $107; //@line 652
    HEAP32[$$1114$looptemp + 32 >> 2] = $111; //@line 654
    $115 = HEAP32[$$1114$looptemp + 12 >> 2] ^ $111; //@line 657
    HEAP32[$$1114$looptemp + 36 >> 2] = $115; //@line 659
    $119 = HEAP32[$$1114$looptemp + 16 >> 2] ^ $115; //@line 662
    HEAP32[$$1114$looptemp + 40 >> 2] = $119; //@line 664
    HEAP32[$$1114$looptemp + 44 >> 2] = $78 ^ $119; //@line 667
    $$2105113 = $$2105113 + 1 | 0; //@line 668
   } while (($$2105113 | 0) != 8);
   $$0106 = 0; //@line 671
   return $$0106 | 0; //@line 677
  }
 case 14:
  {
   $$2116 = $3; //@line 682
   $$3115 = 0; //@line 682
   $127 = HEAP32[$3 >> 2] | 0; //@line 682
   do {
    $129 = HEAP32[$$2116 + 28 >> 2] | 0; //@line 688
    $127 = HEAP32[1324 + ($$3115 << 2) >> 2] ^ $127 ^ (HEAPU8[14451 + ($129 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[14451 + ($129 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[14451 + ($129 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[14451 + ($129 & 255) >> 0] | 0) << 24; //@line 713
    $$2116$looptemp = $$2116;
    $$2116 = $$2116 + 32 | 0; //@line 714
    HEAP32[$$2116 >> 2] = $127; //@line 715
    $158 = $127 ^ HEAP32[$$2116$looptemp + 4 >> 2]; //@line 718
    HEAP32[$$2116$looptemp + 36 >> 2] = $158; //@line 720
    $162 = HEAP32[$$2116$looptemp + 8 >> 2] ^ $158; //@line 723
    HEAP32[$$2116$looptemp + 40 >> 2] = $162; //@line 725
    $166 = HEAP32[$$2116$looptemp + 12 >> 2] ^ $162; //@line 728
    HEAP32[$$2116$looptemp + 44 >> 2] = $166; //@line 730
    $194 = HEAP32[$$2116$looptemp + 16 >> 2] ^ (HEAPU8[14451 + ($166 & 255) >> 0] | 0) ^ (HEAPU8[14451 + ($166 >>> 8 & 255) >> 0] | 0) << 8 ^ (HEAPU8[14451 + ($166 >>> 16 & 255) >> 0] | 0) << 16 ^ (HEAPU8[14451 + ($166 >>> 24) >> 0] | 0) << 24; //@line 757
    HEAP32[$$2116$looptemp + 48 >> 2] = $194; //@line 759
    $198 = $194 ^ HEAP32[$$2116$looptemp + 20 >> 2]; //@line 762
    HEAP32[$$2116$looptemp + 52 >> 2] = $198; //@line 764
    $202 = HEAP32[$$2116$looptemp + 24 >> 2] ^ $198; //@line 767
    HEAP32[$$2116$looptemp + 56 >> 2] = $202; //@line 769
    HEAP32[$$2116$looptemp + 60 >> 2] = $129 ^ $202; //@line 772
    $$3115 = $$3115 + 1 | 0; //@line 773
   } while (($$3115 | 0) != 7);
   $$0106 = 0; //@line 776
   return $$0106 | 0; //@line 782
  }
 default:
  {
   $$0106 = 0; //@line 786
   return $$0106 | 0; //@line 787
  }
 }
 return 0; //@line 790
}
function _ticker_read_us($0) {
 $0 = $0 | 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $35 = 0, $36 = 0, $37 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $88 = 0, $89 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6392
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6393
 _initialize($0); //@line 6394
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 612; //@line 6397
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 6399
  sp = STACKTOP; //@line 6400
  tempRet0 = 0; //@line 6401
  return 0; //@line 6402
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6404
 $2 = $0 + 4 | 0; //@line 6405
 $3 = HEAP32[$2 >> 2] | 0; //@line 6406
 $6 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 6409
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 6410
 $7 = FUNCTION_TABLE_i[$6 & 7]() | 0; //@line 6411
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 613; //@line 6414
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 6416
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 6418
  sp = STACKTOP; //@line 6419
  tempRet0 = 0; //@line 6420
  return 0; //@line 6421
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6423
 if (($7 | 0) == (HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0)) {
  $103 = HEAP32[$2 >> 2] | 0; //@line 6429
  $104 = $103 + 48 | 0; //@line 6430
  $105 = $104; //@line 6431
  $106 = $105; //@line 6432
  $107 = HEAP32[$106 >> 2] | 0; //@line 6433
  $108 = $105 + 4 | 0; //@line 6434
  $109 = $108; //@line 6435
  $110 = HEAP32[$109 >> 2] | 0; //@line 6436
  tempRet0 = $110; //@line 6437
  return $107 | 0; //@line 6438
 }
 $14 = $3 + 32 | 0; //@line 6440
 $19 = $7 - (HEAP32[$14 >> 2] | 0) & HEAP32[$3 + 12 >> 2]; //@line 6445
 HEAP32[$14 >> 2] = $7; //@line 6446
 $21 = HEAP32[$3 + 8 >> 2] | 0; //@line 6448
 L10 : do {
  if (($21 | 0) < 1e6) {
   switch ($21 | 0) {
   case 32768:
    {
     break;
    }
   default:
    {
     label = 9; //@line 6457
     break L10;
    }
   }
   $22 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 6461
   $24 = _bitshift64Lshr($22 | 0, tempRet0 | 0, 15) | 0; //@line 6463
   $25 = tempRet0; //@line 6464
   $28 = $3 + 40 | 0; //@line 6467
   $29 = $28; //@line 6468
   $35 = _i64Add(HEAP32[$29 >> 2] | 0, HEAP32[$29 + 4 >> 2] | 0, $19 * 1e6 & 32704 | 0, 0) | 0; //@line 6474
   $36 = tempRet0; //@line 6475
   $37 = $28; //@line 6476
   HEAP32[$37 >> 2] = $35; //@line 6478
   HEAP32[$37 + 4 >> 2] = $36; //@line 6481
   if ($36 >>> 0 < 0 | ($36 | 0) == 0 & $35 >>> 0 < 32768) {
    $95 = $24; //@line 6488
    $96 = $25; //@line 6488
   } else {
    $46 = _i64Add($24 | 0, $25 | 0, 1, 0) | 0; //@line 6490
    $47 = tempRet0; //@line 6491
    $48 = _i64Add($35 | 0, $36 | 0, -32768, -1) | 0; //@line 6492
    $50 = $28; //@line 6494
    HEAP32[$50 >> 2] = $48; //@line 6496
    HEAP32[$50 + 4 >> 2] = tempRet0; //@line 6499
    $95 = $46; //@line 6500
    $96 = $47; //@line 6500
   }
  } else {
   switch ($21 | 0) {
   case 1e6:
    {
     $95 = $19; //@line 6505
     $96 = 0; //@line 6505
     break;
    }
   default:
    {
     label = 9; //@line 6509
    }
   }
  }
 } while (0);
 if ((label | 0) == 9) {
  $54 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 6515
  $55 = tempRet0; //@line 6516
  $56 = ___udivdi3($54 | 0, $55 | 0, $21 | 0, 0) | 0; //@line 6517
  $57 = tempRet0; //@line 6518
  $58 = ___muldi3($56 | 0, $57 | 0, $21 | 0, 0) | 0; //@line 6519
  $60 = _i64Subtract($54 | 0, $55 | 0, $58 | 0, tempRet0 | 0) | 0; //@line 6521
  $62 = $3 + 40 | 0; //@line 6523
  $63 = $62; //@line 6524
  $69 = _i64Add($60 | 0, tempRet0 | 0, HEAP32[$63 >> 2] | 0, HEAP32[$63 + 4 >> 2] | 0) | 0; //@line 6530
  $70 = tempRet0; //@line 6531
  $71 = $62; //@line 6532
  HEAP32[$71 >> 2] = $69; //@line 6534
  HEAP32[$71 + 4 >> 2] = $70; //@line 6537
  if ($70 >>> 0 < 0 | ($70 | 0) == 0 & $69 >>> 0 < $21 >>> 0) {
   $95 = $56; //@line 6544
   $96 = $57; //@line 6544
  } else {
   $80 = _i64Add($56 | 0, $57 | 0, 1, 0) | 0; //@line 6546
   $81 = tempRet0; //@line 6547
   $82 = _i64Subtract($69 | 0, $70 | 0, $21 | 0, 0) | 0; //@line 6548
   $84 = $62; //@line 6550
   HEAP32[$84 >> 2] = $82; //@line 6552
   HEAP32[$84 + 4 >> 2] = tempRet0; //@line 6555
   $95 = $80; //@line 6556
   $96 = $81; //@line 6556
  }
 }
 $88 = $3 + 48 | 0; //@line 6559
 $89 = $88; //@line 6560
 $97 = _i64Add(HEAP32[$89 >> 2] | 0, HEAP32[$89 + 4 >> 2] | 0, $95 | 0, $96 | 0) | 0; //@line 6566
 $99 = $88; //@line 6568
 HEAP32[$99 >> 2] = $97; //@line 6570
 HEAP32[$99 + 4 >> 2] = tempRet0; //@line 6573
 $103 = HEAP32[$2 >> 2] | 0; //@line 6574
 $104 = $103 + 48 | 0; //@line 6575
 $105 = $104; //@line 6576
 $106 = $105; //@line 6577
 $107 = HEAP32[$106 >> 2] | 0; //@line 6578
 $108 = $105 + 4 | 0; //@line 6579
 $109 = $108; //@line 6580
 $110 = HEAP32[$109 >> 2] | 0; //@line 6581
 tempRet0 = $110; //@line 6582
 return $107 | 0; //@line 6583
}
function _mbed_vtracef__async_cb_380($0) {
 $0 = $0 | 0;
 var $$10 = 0, $$3147168 = 0, $$3169 = 0, $$5156 = 0, $$5156$ = 0, $$expand_i1_val = 0, $12 = 0, $16 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $50 = 0, $53 = 0, $54 = 0, $56 = 0, $67 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 31505
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31507
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31509
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31513
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31517
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31521
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 31525
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 31527
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 31529
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 31533
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 31535
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 31537
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 31539
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 31541
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 31543
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 31545
 $42 = HEAP8[$0 + 84 >> 0] & 1; //@line 31548
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 31550
 HEAP32[$44 >> 2] = HEAP32[___async_retval >> 2]; //@line 31557
 $50 = _snprintf($32, $34, 12216, $44) | 0; //@line 31558
 $$10 = ($50 | 0) >= ($34 | 0) ? 0 : $50; //@line 31560
 $53 = $32 + $$10 | 0; //@line 31562
 $54 = $34 - $$10 | 0; //@line 31563
 if (($$10 | 0) > 0) {
  if (($54 | 0) > 0) {
   $$3147168 = $54; //@line 31567
   $$3169 = $53; //@line 31567
   label = 4; //@line 31568
  }
 } else {
  $$3147168 = $34; //@line 31571
  $$3169 = $32; //@line 31571
  label = 4; //@line 31572
 }
 if ((label | 0) == 4) {
  $56 = $36 + -2 | 0; //@line 31575
  switch ($56 >>> 1 | $56 << 31 | 0) {
  case 0:
   {
    HEAP32[$12 >> 2] = $4; //@line 31581
    $$5156 = _snprintf($$3169, $$3147168, 12219, $12) | 0; //@line 31583
    break;
   }
  case 1:
   {
    HEAP32[$16 >> 2] = $4; //@line 31587
    $$5156 = _snprintf($$3169, $$3147168, 12234, $16) | 0; //@line 31589
    break;
   }
  case 3:
   {
    HEAP32[$2 >> 2] = $4; //@line 31593
    $$5156 = _snprintf($$3169, $$3147168, 12249, $2) | 0; //@line 31595
    break;
   }
  case 7:
   {
    HEAP32[$8 >> 2] = $4; //@line 31599
    $$5156 = _snprintf($$3169, $$3147168, 12264, $8) | 0; //@line 31601
    break;
   }
  default:
   {
    $$5156 = _snprintf($$3169, $$3147168, 12279, $24) | 0; //@line 31606
   }
  }
  $$5156$ = ($$5156 | 0) < ($$3147168 | 0) ? $$5156 : 0; //@line 31610
  $67 = $$3169 + $$5156$ | 0; //@line 31612
  $68 = $$3147168 - $$5156$ | 0; //@line 31613
  if (($$5156$ | 0) > 0 & ($68 | 0) > 0) {
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 31617
   $70 = _vsnprintf($67, $68, $20, $22) | 0; //@line 31618
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 132; //@line 31621
    $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 31622
    HEAP32[$71 >> 2] = $28; //@line 31623
    $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 31624
    HEAP32[$72 >> 2] = $30; //@line 31625
    $73 = $ReallocAsyncCtx10 + 12 | 0; //@line 31626
    $$expand_i1_val = $42 & 1; //@line 31627
    HEAP8[$73 >> 0] = $$expand_i1_val; //@line 31628
    $74 = $ReallocAsyncCtx10 + 16 | 0; //@line 31629
    HEAP32[$74 >> 2] = $38; //@line 31630
    $75 = $ReallocAsyncCtx10 + 20 | 0; //@line 31631
    HEAP32[$75 >> 2] = $40; //@line 31632
    $76 = $ReallocAsyncCtx10 + 24 | 0; //@line 31633
    HEAP32[$76 >> 2] = $68; //@line 31634
    $77 = $ReallocAsyncCtx10 + 28 | 0; //@line 31635
    HEAP32[$77 >> 2] = $67; //@line 31636
    sp = STACKTOP; //@line 31637
    return;
   }
   HEAP32[___async_retval >> 2] = $70; //@line 31641
   ___async_unwind = 0; //@line 31642
   HEAP32[$ReallocAsyncCtx10 >> 2] = 132; //@line 31643
   $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 31644
   HEAP32[$71 >> 2] = $28; //@line 31645
   $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 31646
   HEAP32[$72 >> 2] = $30; //@line 31647
   $73 = $ReallocAsyncCtx10 + 12 | 0; //@line 31648
   $$expand_i1_val = $42 & 1; //@line 31649
   HEAP8[$73 >> 0] = $$expand_i1_val; //@line 31650
   $74 = $ReallocAsyncCtx10 + 16 | 0; //@line 31651
   HEAP32[$74 >> 2] = $38; //@line 31652
   $75 = $ReallocAsyncCtx10 + 20 | 0; //@line 31653
   HEAP32[$75 >> 2] = $40; //@line 31654
   $76 = $ReallocAsyncCtx10 + 24 | 0; //@line 31655
   HEAP32[$76 >> 2] = $68; //@line 31656
   $77 = $ReallocAsyncCtx10 + 28 | 0; //@line 31657
   HEAP32[$77 >> 2] = $67; //@line 31658
   sp = STACKTOP; //@line 31659
   return;
  }
 }
 $79 = HEAP32[190] | 0; //@line 31663
 $80 = HEAP32[183] | 0; //@line 31664
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 31665
 FUNCTION_TABLE_vi[$79 & 1023]($80); //@line 31666
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 134; //@line 31669
  sp = STACKTOP; //@line 31670
  return;
 }
 ___async_unwind = 0; //@line 31673
 HEAP32[$ReallocAsyncCtx7 >> 2] = 134; //@line 31674
 sp = STACKTOP; //@line 31675
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_350($0) {
 $0 = $0 | 0;
 var $$029 = 0, $10 = 0, $14 = 0, $16 = 0, $2 = 0, $24 = 0, $25 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $43 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 28536
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28538
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28540
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28542
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28544
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28546
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28550
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28552
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28560
 switch ($AsyncRetVal | 0) {
 case 0:
  {
   _mbed_tracef(16, 12332, 12683, HEAP32[$0 + 40 >> 2] | 0); //@line 28563
   $$029 = 0; //@line 28564
   break;
  }
 case -1014:
  {
   _mbed_tracef(2, 12332, 12707, $16); //@line 28568
   $24 = $8 + 1892 | 0; //@line 28569
   $25 = HEAP32[$24 >> 2] | 0; //@line 28570
   if (!$25) {
    $$029 = -1014; //@line 28573
   } else {
    $29 = HEAP32[$8 + 2288 >> 2] | 0; //@line 28577
    $31 = HEAP32[$25 + 4 >> 2] | 0; //@line 28579
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(28) | 0; //@line 28580
    FUNCTION_TABLE_vii[$31 & 31]($14, $8 + 1880 | 0); //@line 28581
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 203; //@line 28584
     $32 = $ReallocAsyncCtx7 + 4 | 0; //@line 28585
     HEAP32[$32 >> 2] = $24; //@line 28586
     $33 = $ReallocAsyncCtx7 + 8 | 0; //@line 28587
     HEAP32[$33 >> 2] = $14; //@line 28588
     $34 = $ReallocAsyncCtx7 + 12 | 0; //@line 28589
     HEAP32[$34 >> 2] = $29; //@line 28590
     $35 = $ReallocAsyncCtx7 + 16 | 0; //@line 28591
     HEAP32[$35 >> 2] = $14; //@line 28592
     $36 = $ReallocAsyncCtx7 + 20 | 0; //@line 28593
     HEAP32[$36 >> 2] = $2; //@line 28594
     $37 = $ReallocAsyncCtx7 + 24 | 0; //@line 28595
     HEAP32[$37 >> 2] = $4; //@line 28596
     sp = STACKTOP; //@line 28597
     return;
    }
    ___async_unwind = 0; //@line 28600
    HEAP32[$ReallocAsyncCtx7 >> 2] = 203; //@line 28601
    $32 = $ReallocAsyncCtx7 + 4 | 0; //@line 28602
    HEAP32[$32 >> 2] = $24; //@line 28603
    $33 = $ReallocAsyncCtx7 + 8 | 0; //@line 28604
    HEAP32[$33 >> 2] = $14; //@line 28605
    $34 = $ReallocAsyncCtx7 + 12 | 0; //@line 28606
    HEAP32[$34 >> 2] = $29; //@line 28607
    $35 = $ReallocAsyncCtx7 + 16 | 0; //@line 28608
    HEAP32[$35 >> 2] = $14; //@line 28609
    $36 = $ReallocAsyncCtx7 + 20 | 0; //@line 28610
    HEAP32[$36 >> 2] = $2; //@line 28611
    $37 = $ReallocAsyncCtx7 + 24 | 0; //@line 28612
    HEAP32[$37 >> 2] = $4; //@line 28613
    sp = STACKTOP; //@line 28614
    return;
   }
   break;
  }
 default:
  {
   _mbed_tracef(2, 12332, 12742, $10); //@line 28620
   $38 = $8 + 1892 | 0; //@line 28621
   $39 = HEAP32[$38 >> 2] | 0; //@line 28622
   if (!$39) {
    $$029 = $AsyncRetVal; //@line 28625
   } else {
    $43 = HEAP32[$8 + 2288 >> 2] | 0; //@line 28629
    $45 = HEAP32[$39 + 4 >> 2] | 0; //@line 28631
    $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 28632
    FUNCTION_TABLE_vii[$45 & 31]($6, $8 + 1880 | 0); //@line 28633
    if (___async) {
     HEAP32[$ReallocAsyncCtx9 >> 2] = 207; //@line 28636
     $46 = $ReallocAsyncCtx9 + 4 | 0; //@line 28637
     HEAP32[$46 >> 2] = $38; //@line 28638
     $47 = $ReallocAsyncCtx9 + 8 | 0; //@line 28639
     HEAP32[$47 >> 2] = $6; //@line 28640
     $48 = $ReallocAsyncCtx9 + 12 | 0; //@line 28641
     HEAP32[$48 >> 2] = $43; //@line 28642
     $49 = $ReallocAsyncCtx9 + 16 | 0; //@line 28643
     HEAP32[$49 >> 2] = $6; //@line 28644
     $50 = $ReallocAsyncCtx9 + 20 | 0; //@line 28645
     HEAP32[$50 >> 2] = $AsyncRetVal; //@line 28646
     $51 = $ReallocAsyncCtx9 + 24 | 0; //@line 28647
     HEAP32[$51 >> 2] = $2; //@line 28648
     $52 = $ReallocAsyncCtx9 + 28 | 0; //@line 28649
     HEAP32[$52 >> 2] = $4; //@line 28650
     sp = STACKTOP; //@line 28651
     return;
    }
    ___async_unwind = 0; //@line 28654
    HEAP32[$ReallocAsyncCtx9 >> 2] = 207; //@line 28655
    $46 = $ReallocAsyncCtx9 + 4 | 0; //@line 28656
    HEAP32[$46 >> 2] = $38; //@line 28657
    $47 = $ReallocAsyncCtx9 + 8 | 0; //@line 28658
    HEAP32[$47 >> 2] = $6; //@line 28659
    $48 = $ReallocAsyncCtx9 + 12 | 0; //@line 28660
    HEAP32[$48 >> 2] = $43; //@line 28661
    $49 = $ReallocAsyncCtx9 + 16 | 0; //@line 28662
    HEAP32[$49 >> 2] = $6; //@line 28663
    $50 = $ReallocAsyncCtx9 + 20 | 0; //@line 28664
    HEAP32[$50 >> 2] = $AsyncRetVal; //@line 28665
    $51 = $ReallocAsyncCtx9 + 24 | 0; //@line 28666
    HEAP32[$51 >> 2] = $2; //@line 28667
    $52 = $ReallocAsyncCtx9 + 28 | 0; //@line 28668
    HEAP32[$52 >> 2] = $4; //@line 28669
    sp = STACKTOP; //@line 28670
    return;
   }
  }
 }
 HEAP32[$2 >> 2] = 6; //@line 28675
 HEAP32[___async_retval >> 2] = $$029; //@line 28677
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 30862
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30866
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30868
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30870
 $10 = HEAP16[$0 + 20 >> 1] | 0; //@line 30872
 $12 = HEAP16[$0 + 22 >> 1] | 0; //@line 30874
 $14 = HEAP8[$0 + 24 >> 0] | 0; //@line 30876
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 30878
 $$pre$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 30879
 $17 = $4 + 12 | 0; //@line 30880
 HEAP32[$17 >> 2] = $$pre$i; //@line 30881
 if (!$$pre$i) {
  $30 = $6 + 12 | 0; //@line 30884
  HEAP32[$30 >> 2] = 0; //@line 30885
  $31 = $6 + 16 | 0; //@line 30886
  HEAP32[$31 >> 2] = $8; //@line 30887
  HEAP16[$6 + 20 >> 1] = $10; //@line 30889
  HEAP16[$6 + 22 >> 1] = $12; //@line 30891
  HEAP8[$6 + 24 >> 0] = $14; //@line 30893
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 30894
  $35 = _equeue_alloc($16, 28) | 0; //@line 30895
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 341; //@line 30898
   $36 = $ReallocAsyncCtx7 + 4 | 0; //@line 30899
   HEAP32[$36 >> 2] = $30; //@line 30900
   $37 = $ReallocAsyncCtx7 + 8 | 0; //@line 30901
   HEAP32[$37 >> 2] = $30; //@line 30902
   $38 = $ReallocAsyncCtx7 + 12 | 0; //@line 30903
   HEAP32[$38 >> 2] = $6; //@line 30904
   $39 = $ReallocAsyncCtx7 + 16 | 0; //@line 30905
   HEAP32[$39 >> 2] = $31; //@line 30906
   $40 = $ReallocAsyncCtx7 + 20 | 0; //@line 30907
   HEAP32[$40 >> 2] = $16; //@line 30908
   $41 = $ReallocAsyncCtx7 + 24 | 0; //@line 30909
   HEAP32[$41 >> 2] = $17; //@line 30910
   $42 = $ReallocAsyncCtx7 + 28 | 0; //@line 30911
   HEAP32[$42 >> 2] = $4; //@line 30912
   sp = STACKTOP; //@line 30913
   return;
  }
  HEAP32[___async_retval >> 2] = $35; //@line 30917
  ___async_unwind = 0; //@line 30918
  HEAP32[$ReallocAsyncCtx7 >> 2] = 341; //@line 30919
  $36 = $ReallocAsyncCtx7 + 4 | 0; //@line 30920
  HEAP32[$36 >> 2] = $30; //@line 30921
  $37 = $ReallocAsyncCtx7 + 8 | 0; //@line 30922
  HEAP32[$37 >> 2] = $30; //@line 30923
  $38 = $ReallocAsyncCtx7 + 12 | 0; //@line 30924
  HEAP32[$38 >> 2] = $6; //@line 30925
  $39 = $ReallocAsyncCtx7 + 16 | 0; //@line 30926
  HEAP32[$39 >> 2] = $31; //@line 30927
  $40 = $ReallocAsyncCtx7 + 20 | 0; //@line 30928
  HEAP32[$40 >> 2] = $16; //@line 30929
  $41 = $ReallocAsyncCtx7 + 24 | 0; //@line 30930
  HEAP32[$41 >> 2] = $17; //@line 30931
  $42 = $ReallocAsyncCtx7 + 28 | 0; //@line 30932
  HEAP32[$42 >> 2] = $4; //@line 30933
  sp = STACKTOP; //@line 30934
  return;
 } else {
  $20 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 30939
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 30940
  FUNCTION_TABLE_vii[$20 & 31]($6, $4); //@line 30941
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 340; //@line 30944
   $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 30945
   HEAP32[$21 >> 2] = $17; //@line 30946
   $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 30947
   HEAP32[$22 >> 2] = $6; //@line 30948
   $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 30949
   HEAP32[$23 >> 2] = $17; //@line 30950
   $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 30951
   HEAP32[$24 >> 2] = $8; //@line 30952
   $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 30953
   HEAP16[$25 >> 1] = $10; //@line 30954
   $26 = $ReallocAsyncCtx2 + 22 | 0; //@line 30955
   HEAP16[$26 >> 1] = $12; //@line 30956
   $27 = $ReallocAsyncCtx2 + 24 | 0; //@line 30957
   HEAP8[$27 >> 0] = $14; //@line 30958
   $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 30959
   HEAP32[$28 >> 2] = $16; //@line 30960
   $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 30961
   HEAP32[$29 >> 2] = $4; //@line 30962
   sp = STACKTOP; //@line 30963
   return;
  }
  ___async_unwind = 0; //@line 30966
  HEAP32[$ReallocAsyncCtx2 >> 2] = 340; //@line 30967
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 30968
  HEAP32[$21 >> 2] = $17; //@line 30969
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 30970
  HEAP32[$22 >> 2] = $6; //@line 30971
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 30972
  HEAP32[$23 >> 2] = $17; //@line 30973
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 30974
  HEAP32[$24 >> 2] = $8; //@line 30975
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 30976
  HEAP16[$25 >> 1] = $10; //@line 30977
  $26 = $ReallocAsyncCtx2 + 22 | 0; //@line 30978
  HEAP16[$26 >> 1] = $12; //@line 30979
  $27 = $ReallocAsyncCtx2 + 24 | 0; //@line 30980
  HEAP8[$27 >> 0] = $14; //@line 30981
  $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 30982
  HEAP32[$28 >> 2] = $16; //@line 30983
  $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 30984
  HEAP32[$29 >> 2] = $4; //@line 30985
  sp = STACKTOP; //@line 30986
  return;
 }
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_230($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $36 = 0, $37 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 14073
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14075
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14077
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14079
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14081
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14083
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14085
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14087
 if ($AsyncRetVal | 0) {
  $15 = HEAP32[$12 >> 2] | 0; //@line 14090
  if (!$15) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 14094
   _equeue_event_delay($AsyncRetVal, $4); //@line 14095
   _equeue_event_dtor($AsyncRetVal, 288); //@line 14096
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 14097
   $27 = _equeue_post($6, 289, $AsyncRetVal) | 0; //@line 14098
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 564; //@line 14101
    $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 14102
    HEAP32[$28 >> 2] = $10; //@line 14103
    $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 14104
    HEAP32[$29 >> 2] = $12; //@line 14105
    $30 = $ReallocAsyncCtx4 + 12 | 0; //@line 14106
    HEAP32[$30 >> 2] = $2; //@line 14107
    sp = STACKTOP; //@line 14108
    return;
   }
   HEAP32[___async_retval >> 2] = $27; //@line 14112
   ___async_unwind = 0; //@line 14113
   HEAP32[$ReallocAsyncCtx4 >> 2] = 564; //@line 14114
   $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 14115
   HEAP32[$28 >> 2] = $10; //@line 14116
   $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 14117
   HEAP32[$29 >> 2] = $12; //@line 14118
   $30 = $ReallocAsyncCtx4 + 12 | 0; //@line 14119
   HEAP32[$30 >> 2] = $2; //@line 14120
   sp = STACKTOP; //@line 14121
   return;
  } else {
   $18 = HEAP32[$15 + 4 >> 2] | 0; //@line 14125
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 14126
   FUNCTION_TABLE_vii[$18 & 31]($AsyncRetVal, $2); //@line 14127
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 563; //@line 14130
    $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 14131
    HEAP32[$19 >> 2] = $8; //@line 14132
    $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 14133
    HEAP32[$20 >> 2] = $AsyncRetVal; //@line 14134
    $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 14135
    HEAP32[$21 >> 2] = $4; //@line 14136
    $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 14137
    HEAP32[$22 >> 2] = $6; //@line 14138
    $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 14139
    HEAP32[$23 >> 2] = $10; //@line 14140
    $24 = $ReallocAsyncCtx2 + 24 | 0; //@line 14141
    HEAP32[$24 >> 2] = $12; //@line 14142
    $25 = $ReallocAsyncCtx2 + 28 | 0; //@line 14143
    HEAP32[$25 >> 2] = $2; //@line 14144
    sp = STACKTOP; //@line 14145
    return;
   }
   ___async_unwind = 0; //@line 14148
   HEAP32[$ReallocAsyncCtx2 >> 2] = 563; //@line 14149
   $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 14150
   HEAP32[$19 >> 2] = $8; //@line 14151
   $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 14152
   HEAP32[$20 >> 2] = $AsyncRetVal; //@line 14153
   $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 14154
   HEAP32[$21 >> 2] = $4; //@line 14155
   $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 14156
   HEAP32[$22 >> 2] = $6; //@line 14157
   $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 14158
   HEAP32[$23 >> 2] = $10; //@line 14159
   $24 = $ReallocAsyncCtx2 + 24 | 0; //@line 14160
   HEAP32[$24 >> 2] = $12; //@line 14161
   $25 = $ReallocAsyncCtx2 + 28 | 0; //@line 14162
   HEAP32[$25 >> 2] = $2; //@line 14163
   sp = STACKTOP; //@line 14164
   return;
  }
 }
 $32 = $10 + 16 | 0; //@line 14168
 HEAP32[$32 >> 2] = 0; //@line 14169
 $33 = HEAP32[$12 >> 2] | 0; //@line 14170
 if ($33 | 0) {
  $36 = HEAP32[$33 + 8 >> 2] | 0; //@line 14174
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 14175
  FUNCTION_TABLE_vi[$36 & 1023]($2); //@line 14176
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 565; //@line 14179
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 14180
   HEAP32[$37 >> 2] = $32; //@line 14181
   sp = STACKTOP; //@line 14182
   return;
  }
  ___async_unwind = 0; //@line 14185
  HEAP32[$ReallocAsyncCtx3 >> 2] = 565; //@line 14186
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 14187
  HEAP32[$37 >> 2] = $32; //@line 14188
  sp = STACKTOP; //@line 14189
  return;
 }
 if (0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 14196
 _mbed_assert_internal(14328, 14346, 57); //@line 14197
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 566; //@line 14200
  sp = STACKTOP; //@line 14201
  return;
 }
 ___async_unwind = 0; //@line 14204
 HEAP32[$ReallocAsyncCtx6 >> 2] = 566; //@line 14205
 sp = STACKTOP; //@line 14206
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $15 = 0, $16 = 0, $17 = 0, $25 = 0, $28 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $42 = 0, $43 = 0, $46 = 0, $49 = 0, $5 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 251
 STACKTOP = STACKTOP + 16 | 0; //@line 252
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 252
 $3 = sp; //@line 253
 $4 = HEAP32[$0 >> 2] | 0; //@line 254
 $5 = $1 + 12 | 0; //@line 255
 $6 = HEAP32[$5 >> 2] | 0; //@line 256
 do {
  if (!$6) {
   $16 = 0; //@line 260
  } else {
   $9 = HEAP32[$6 + 4 >> 2] | 0; //@line 263
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 264
   FUNCTION_TABLE_vii[$9 & 31]($3, $1); //@line 265
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 561; //@line 268
    HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 270
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 272
    HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 274
    HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 276
    HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 278
    sp = STACKTOP; //@line 279
    STACKTOP = sp; //@line 280
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 282
    $16 = HEAP32[$5 >> 2] | 0; //@line 284
    break;
   }
  }
 } while (0);
 $15 = $3 + 12 | 0; //@line 289
 HEAP32[$15 >> 2] = $16; //@line 290
 $AsyncCtx12 = _emscripten_alloc_async_context(28, sp) | 0; //@line 291
 $17 = _equeue_alloc($4, 16) | 0; //@line 292
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 562; //@line 295
  HEAP32[$AsyncCtx12 + 4 >> 2] = $3; //@line 297
  HEAP32[$AsyncCtx12 + 8 >> 2] = $2; //@line 299
  HEAP32[$AsyncCtx12 + 12 >> 2] = $4; //@line 301
  HEAP32[$AsyncCtx12 + 16 >> 2] = $15; //@line 303
  HEAP32[$AsyncCtx12 + 20 >> 2] = $1; //@line 305
  HEAP32[$AsyncCtx12 + 24 >> 2] = $15; //@line 307
  sp = STACKTOP; //@line 308
  STACKTOP = sp; //@line 309
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 311
 do {
  if (!$17) {
   $$0$i = 0; //@line 315
  } else {
   $25 = HEAP32[$15 >> 2] | 0; //@line 317
   do {
    if (!$25) {
     $37 = 0; //@line 321
    } else {
     $28 = HEAP32[$25 + 4 >> 2] | 0; //@line 324
     $AsyncCtx2 = _emscripten_alloc_async_context(32, sp) | 0; //@line 325
     FUNCTION_TABLE_vii[$28 & 31]($17, $3); //@line 326
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 563; //@line 329
      HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 331
      HEAP32[$AsyncCtx2 + 8 >> 2] = $17; //@line 333
      HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 335
      HEAP32[$AsyncCtx2 + 16 >> 2] = $4; //@line 337
      HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 339
      HEAP32[$AsyncCtx2 + 24 >> 2] = $15; //@line 341
      HEAP32[$AsyncCtx2 + 28 >> 2] = $3; //@line 343
      sp = STACKTOP; //@line 344
      STACKTOP = sp; //@line 345
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 347
      $37 = HEAP32[$15 >> 2] | 0; //@line 349
      break;
     }
    }
   } while (0);
   HEAP32[$17 + 12 >> 2] = $37; //@line 355
   _equeue_event_delay($17, $2); //@line 356
   _equeue_event_dtor($17, 288); //@line 357
   $AsyncCtx9 = _emscripten_alloc_async_context(16, sp) | 0; //@line 358
   $38 = _equeue_post($4, 289, $17) | 0; //@line 359
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 564; //@line 362
    HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 364
    HEAP32[$AsyncCtx9 + 8 >> 2] = $15; //@line 366
    HEAP32[$AsyncCtx9 + 12 >> 2] = $3; //@line 368
    sp = STACKTOP; //@line 369
    STACKTOP = sp; //@line 370
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 372
    $$0$i = $38; //@line 373
    break;
   }
  }
 } while (0);
 $42 = $1 + 16 | 0; //@line 378
 HEAP32[$42 >> 2] = $$0$i; //@line 379
 $43 = HEAP32[$15 >> 2] | 0; //@line 380
 do {
  if (!$43) {
   $49 = $$0$i; //@line 384
  } else {
   $46 = HEAP32[$43 + 8 >> 2] | 0; //@line 387
   $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 388
   FUNCTION_TABLE_vi[$46 & 1023]($3); //@line 389
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 565; //@line 392
    HEAP32[$AsyncCtx6 + 4 >> 2] = $42; //@line 394
    sp = STACKTOP; //@line 395
    STACKTOP = sp; //@line 396
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx6 | 0); //@line 398
    $49 = HEAP32[$42 >> 2] | 0; //@line 400
    break;
   }
  }
 } while (0);
 if ($49 | 0) {
  STACKTOP = sp; //@line 407
  return;
 }
 $AsyncCtx16 = _emscripten_alloc_async_context(4, sp) | 0; //@line 409
 _mbed_assert_internal(14328, 14346, 57); //@line 410
 if (___async) {
  HEAP32[$AsyncCtx16 >> 2] = 566; //@line 413
  sp = STACKTOP; //@line 414
  STACKTOP = sp; //@line 415
  return;
 }
 _emscripten_free_async_context($AsyncCtx16 | 0); //@line 417
 STACKTOP = sp; //@line 418
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_114($0) {
 $0 = $0 | 0;
 var $10 = 0, $109 = 0, $113 = 0, $12 = 0, $120 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $132 = 0, $135 = 0, $137 = 0, $138 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 27302
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27304
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27306
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27308
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27310
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27312
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27314
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27316
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27318
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 27320
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 27322
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 27324
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 27326
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 27328
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 27330
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 27332
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 13; //@line 27339
  return;
 }
 if (((HEAPU8[$6 + -3 + ($2 + 638) >> 0] | 0) << 8 | (HEAPU8[$2 + 638 + $4 >> 0] | 0) | (HEAPU8[$6 + -2 + ($2 + 638) >> 0] | 0) << 16 | (HEAPU8[$6 + -1 + ($2 + 638) >> 0] | 0) << 24 | 0) != (HEAP32[$8 >> 2] | 0)) {
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 7; //@line 27369
  $132 = $2 + 944 | 0; //@line 27370
  HEAP8[$132 >> 0] = HEAP8[$132 >> 0] | 32; //@line 27373
  $135 = HEAP32[$24 >> 2] | 0; //@line 27374
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 27376
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($135, $2 + 996 | 0, 1); //@line 27377
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 338; //@line 27380
   $137 = $ReallocAsyncCtx5 + 4 | 0; //@line 27381
   HEAP32[$137 >> 2] = $12; //@line 27382
   $138 = $ReallocAsyncCtx5 + 8 | 0; //@line 27383
   HEAP32[$138 >> 2] = $14; //@line 27384
   sp = STACKTOP; //@line 27385
   return;
  }
  ___async_unwind = 0; //@line 27388
  HEAP32[$ReallocAsyncCtx5 >> 2] = 338; //@line 27389
  $137 = $ReallocAsyncCtx5 + 4 | 0; //@line 27390
  HEAP32[$137 >> 2] = $12; //@line 27391
  $138 = $ReallocAsyncCtx5 + 8 | 0; //@line 27392
  HEAP32[$138 >> 2] = $14; //@line 27393
  sp = STACKTOP; //@line 27394
  return;
 }
 if (__Z28compute_skeys_for_join_framePKhS0_tPhS1_(HEAP32[$16 >> 2] | 0, $18, HEAP16[$2 + 946 >> 1] | 0, $20, $22) | 0) {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 13; //@line 27405
  return;
 }
 HEAP32[$2 + 948 >> 2] = (HEAPU8[$2 + 644 >> 0] | 0) << 16 | ((HEAPU8[$2 + 643 >> 0] | 0) << 8 | (HEAPU8[$2 + 642 >> 0] | 0)); //@line 27422
 HEAP32[$2 + 952 >> 2] = (HEAPU8[$2 + 648 >> 0] | 0) << 24 | ((HEAPU8[$2 + 647 >> 0] | 0) << 16 | ((HEAPU8[$2 + 646 >> 0] | 0) << 8 | (HEAPU8[$2 + 645 >> 0] | 0))); //@line 27442
 $99 = HEAP8[$2 + 649 >> 0] | 0; //@line 27444
 HEAP8[$2 + 1129 >> 0] = ($99 & 255) >>> 4 & 7; //@line 27450
 HEAP8[$2 + 1136 >> 0] = $99 & 15; //@line 27453
 $109 = HEAP8[$2 + 650 >> 0] & 15; //@line 27456
 $113 = $109 << 24 >> 24 == 0 ? 1e3 : ($109 & 255) * 1e3 | 0; //@line 27461
 HEAP32[$2 + 1112 >> 2] = $113; //@line 27462
 HEAP32[$2 + 1116 >> 2] = $113 + 1e3; //@line 27465
 HEAP32[$26 >> 2] = $2 + 651; //@line 27467
 HEAP8[$26 + 4 >> 0] = $6 + 239; //@line 27471
 $120 = HEAP32[$28 >> 2] | 0; //@line 27472
 $123 = HEAP32[(HEAP32[$120 >> 2] | 0) + 20 >> 2] | 0; //@line 27475
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 27476
 FUNCTION_TABLE_vii[$123 & 31]($120, $26); //@line 27477
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 309; //@line 27480
  $124 = $ReallocAsyncCtx + 4 | 0; //@line 27481
  HEAP32[$124 >> 2] = $2; //@line 27482
  $125 = $ReallocAsyncCtx + 8 | 0; //@line 27483
  HEAP32[$125 >> 2] = $30; //@line 27484
  $126 = $ReallocAsyncCtx + 12 | 0; //@line 27485
  HEAP32[$126 >> 2] = $24; //@line 27486
  $127 = $ReallocAsyncCtx + 16 | 0; //@line 27487
  HEAP32[$127 >> 2] = $12; //@line 27488
  $128 = $ReallocAsyncCtx + 20 | 0; //@line 27489
  HEAP32[$128 >> 2] = $14; //@line 27490
  sp = STACKTOP; //@line 27491
  return;
 }
 ___async_unwind = 0; //@line 27494
 HEAP32[$ReallocAsyncCtx >> 2] = 309; //@line 27495
 $124 = $ReallocAsyncCtx + 4 | 0; //@line 27496
 HEAP32[$124 >> 2] = $2; //@line 27497
 $125 = $ReallocAsyncCtx + 8 | 0; //@line 27498
 HEAP32[$125 >> 2] = $30; //@line 27499
 $126 = $ReallocAsyncCtx + 12 | 0; //@line 27500
 HEAP32[$126 >> 2] = $24; //@line 27501
 $127 = $ReallocAsyncCtx + 16 | 0; //@line 27502
 HEAP32[$127 >> 2] = $12; //@line 27503
 $128 = $ReallocAsyncCtx + 20 | 0; //@line 27504
 HEAP32[$128 >> 2] = $14; //@line 27505
 sp = STACKTOP; //@line 27506
 return;
}
function __Z15encrypt_payloadPKhtS0_jhjPh($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$044$lcssa$off0 = 0, $$04458 = 0, $$045$lcssa = 0, $$04557 = 0, $$048$lcssa = 0, $$1 = 0, $101 = 0, $107 = 0, $113 = 0, $119 = 0, $125 = 0, $126 = 0, $127 = 0, $134 = 0, $136 = 0, $27 = 0, $29 = 0, $35 = 0, $41 = 0, $47 = 0, $53 = 0, $59 = 0, $65 = 0, $7 = 0, $71 = 0, $77 = 0, $83 = 0, $89 = 0, $95 = 0, $indvars$iv = 0, $wide$trip$count = 0, label = 0;
 _mbedtls_aes_init(22528); //@line 19815
 $7 = _mbedtls_aes_setkey_enc(22528, $2, 128) | 0; //@line 19816
 if ($7 | 0) {
  $$1 = $7; //@line 19819
  _mbedtls_aes_free(22528); //@line 19820
  return $$1 | 0; //@line 19821
 }
 HEAP8[14238] = $4; //@line 19823
 HEAP8[14239] = $3; //@line 19825
 HEAP8[14240] = $3 >>> 8; //@line 19828
 HEAP8[14241] = $3 >>> 16; //@line 19831
 HEAP8[14242] = $3 >>> 24; //@line 19834
 HEAP8[14243] = $5; //@line 19836
 HEAP8[14244] = $5 >>> 8; //@line 19839
 HEAP8[14245] = $5 >>> 16; //@line 19842
 HEAP8[14246] = $5 >>> 24; //@line 19845
 do {
  if (($1 & 65535) > 15) {
   $$04458 = 1; //@line 19850
   $$04557 = 0; //@line 19850
   $126 = $1 & 65535; //@line 19850
   while (1) {
    HEAP8[14248] = $$04458; //@line 19853
    $$04458 = $$04458 + 1 << 16 >> 16; //@line 19854
    $27 = _mbedtls_aes_crypt_ecb(22528, 1, 14233, 23788) | 0; //@line 19855
    if ($27 | 0) {
     $$1 = $27; //@line 19858
     label = 11; //@line 19859
     break;
    }
    $29 = $$04557 & 255; //@line 19862
    HEAP8[$6 + $29 >> 0] = HEAP8[23788] ^ HEAP8[$0 + $29 >> 0]; //@line 19868
    $35 = $29 + 1 | 0; //@line 19869
    HEAP8[$6 + $35 >> 0] = HEAP8[23789] ^ HEAP8[$0 + $35 >> 0]; //@line 19875
    $41 = $29 + 2 | 0; //@line 19876
    HEAP8[$6 + $41 >> 0] = HEAP8[23790] ^ HEAP8[$0 + $41 >> 0]; //@line 19882
    $47 = $29 + 3 | 0; //@line 19883
    HEAP8[$6 + $47 >> 0] = HEAP8[23791] ^ HEAP8[$0 + $47 >> 0]; //@line 19889
    $53 = $29 + 4 | 0; //@line 19890
    HEAP8[$6 + $53 >> 0] = HEAP8[23792] ^ HEAP8[$0 + $53 >> 0]; //@line 19896
    $59 = $29 + 5 | 0; //@line 19897
    HEAP8[$6 + $59 >> 0] = HEAP8[23793] ^ HEAP8[$0 + $59 >> 0]; //@line 19903
    $65 = $29 + 6 | 0; //@line 19904
    HEAP8[$6 + $65 >> 0] = HEAP8[23794] ^ HEAP8[$0 + $65 >> 0]; //@line 19910
    $71 = $29 + 7 | 0; //@line 19911
    HEAP8[$6 + $71 >> 0] = HEAP8[23795] ^ HEAP8[$0 + $71 >> 0]; //@line 19917
    $77 = $29 + 8 | 0; //@line 19918
    HEAP8[$6 + $77 >> 0] = HEAP8[23796] ^ HEAP8[$0 + $77 >> 0]; //@line 19924
    $83 = $29 + 9 | 0; //@line 19925
    HEAP8[$6 + $83 >> 0] = HEAP8[23797] ^ HEAP8[$0 + $83 >> 0]; //@line 19931
    $89 = $29 + 10 | 0; //@line 19932
    HEAP8[$6 + $89 >> 0] = HEAP8[23798] ^ HEAP8[$0 + $89 >> 0]; //@line 19938
    $95 = $29 + 11 | 0; //@line 19939
    HEAP8[$6 + $95 >> 0] = HEAP8[23799] ^ HEAP8[$0 + $95 >> 0]; //@line 19945
    $101 = $29 + 12 | 0; //@line 19946
    HEAP8[$6 + $101 >> 0] = HEAP8[23800] ^ HEAP8[$0 + $101 >> 0]; //@line 19952
    $107 = $29 + 13 | 0; //@line 19953
    HEAP8[$6 + $107 >> 0] = HEAP8[23801] ^ HEAP8[$0 + $107 >> 0]; //@line 19959
    $113 = $29 + 14 | 0; //@line 19960
    HEAP8[$6 + $113 >> 0] = HEAP8[23802] ^ HEAP8[$0 + $113 >> 0]; //@line 19966
    $119 = $29 + 15 | 0; //@line 19967
    HEAP8[$6 + $119 >> 0] = HEAP8[23803] ^ HEAP8[$0 + $119 >> 0]; //@line 19973
    $125 = $126 + 65520 | 0; //@line 19974
    $127 = $125 & 65535; //@line 19975
    if (($127 & 65535) <= 15) {
     label = 6; //@line 19983
     break;
    } else {
     $$04557 = $29 + 16 & 255; //@line 19981
     $126 = $125 & 65535; //@line 19981
    }
   }
   if ((label | 0) == 6) {
    $$044$lcssa$off0 = $$04458 & 255; //@line 19991
    $$045$lcssa = $$04557 + 16 & 255; //@line 19991
    $$048$lcssa = $127; //@line 19991
    break;
   } else if ((label | 0) == 11) {
    _mbedtls_aes_free(22528); //@line 19995
    return $$1 | 0; //@line 19996
   }
  } else {
   $$044$lcssa$off0 = 1; //@line 19999
   $$045$lcssa = 0; //@line 19999
   $$048$lcssa = $1; //@line 19999
  }
 } while (0);
 if (!($$048$lcssa << 16 >> 16)) {
  $$1 = 0; //@line 20004
  _mbedtls_aes_free(22528); //@line 20005
  return $$1 | 0; //@line 20006
 }
 HEAP8[14248] = $$044$lcssa$off0; //@line 20008
 $134 = _mbedtls_aes_crypt_ecb(22528, 1, 14233, 23788) | 0; //@line 20009
 if ($134 | 0) {
  $$1 = $134; //@line 20012
  _mbedtls_aes_free(22528); //@line 20013
  return $$1 | 0; //@line 20014
 }
 $wide$trip$count = $$048$lcssa & 65535; //@line 20016
 $indvars$iv = 0; //@line 20017
 do {
  $136 = $indvars$iv + $$045$lcssa | 0; //@line 20019
  HEAP8[$6 + $136 >> 0] = HEAP8[23788 + $indvars$iv >> 0] ^ HEAP8[$0 + $136 >> 0]; //@line 20026
  $indvars$iv = $indvars$iv + 1 | 0; //@line 20027
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 $$1 = 0; //@line 20030
 _mbedtls_aes_free(22528); //@line 20036
 return $$1 | 0; //@line 20037
}
function __ZN7LoRaPHY13apply_cf_listEP15cflist_params_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01314 = 0, $$015 = 0, $15 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $30 = 0, $33 = 0, $34 = 0, $37 = 0, $43 = 0, $49 = 0, $54 = 0, $71 = 0, $86 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 21340
 STACKTOP = STACKTOP + 16 | 0; //@line 21341
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 21341
 $2 = sp; //@line 21342
 if (!(HEAP8[$0 + 15 >> 0] | 0)) {
  STACKTOP = sp; //@line 21347
  return;
 }
 $15 = $2 + 8 | 0; //@line 21358
 HEAP8[$15 >> 0] = HEAPU8[$0 + 31 >> 0] << 4 | HEAPU8[$0 + 30 >> 0]; //@line 21359
 L4 : do {
  if ((HEAP8[$1 + 4 >> 0] | 0) == 16) {
   $19 = $0 + 18 | 0; //@line 21365
   $20 = HEAP8[$19 >> 0] | 0; //@line 21366
   $21 = $0 + 20 | 0; //@line 21367
   if (($20 & 255) < (HEAPU8[$21 >> 0] | 0)) {
    $24 = $0 + 19 | 0; //@line 21371
    $25 = $2 + 4 | 0; //@line 21372
    $$01314 = 0; //@line 21373
    $$015 = $20; //@line 21373
    $30 = $20; //@line 21373
    while (1) {
     if ((($30 & 255) + (HEAPU8[$24 >> 0] | 0) | 0) >>> 0 > ($$015 & 255) >>> 0) {
      $33 = HEAP32[$1 >> 2] | 0; //@line 21382
      $34 = $$01314 & 255; //@line 21383
      $37 = HEAPU8[$33 + $34 >> 0] | 0; //@line 21386
      HEAP32[$2 >> 2] = $37; //@line 21387
      $43 = HEAPU8[$33 + ($34 + 1) >> 0] << 8 | $37; //@line 21393
      HEAP32[$2 >> 2] = $43; //@line 21394
      $49 = HEAPU8[$33 + ($34 + 2) >> 0] << 16 | $43; //@line 21400
      HEAP32[$2 >> 2] = $49 * 100; //@line 21402
      HEAP32[$25 >> 2] = 0; //@line 21403
      if (!$49) {
       label = 11; //@line 21406
      } else {
       $54 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 21410
       $AsyncCtx = _emscripten_alloc_async_context(56, sp) | 0; //@line 21411
       FUNCTION_TABLE_iiii[$54 & 15]($0, $2, $$015) | 0; //@line 21412
       if (___async) {
        label = 9; //@line 21415
        break;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 21418
      }
     } else {
      HEAP32[$2 >> 2] = 0; //@line 21421
      HEAP8[$15 >> 0] = 0; //@line 21422
      HEAP32[$25 >> 2] = 0; //@line 21423
      label = 11; //@line 21424
     }
     if ((label | 0) == 11) {
      label = 0; //@line 21427
      $71 = HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] | 0; //@line 21430
      $AsyncCtx3 = _emscripten_alloc_async_context(56, sp) | 0; //@line 21431
      FUNCTION_TABLE_iii[$71 & 31]($0, $$015) | 0; //@line 21432
      if (___async) {
       label = 12; //@line 21435
       break;
      }
      _emscripten_free_async_context($AsyncCtx3 | 0); //@line 21438
     }
     $86 = HEAP8[$19 >> 0] | 0; //@line 21440
     $91 = $$015 + 1 << 24 >> 24; //@line 21445
     if (($91 & 255) < (HEAPU8[$21 >> 0] | 0)) {
      $$01314 = ($86 & 255) + ($$01314 & 255) & 255; //@line 21449
      $$015 = $91; //@line 21449
      $30 = $86; //@line 21449
     } else {
      break L4;
     }
    }
    if ((label | 0) == 9) {
     HEAP32[$AsyncCtx >> 2] = 515; //@line 21455
     HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 21457
     HEAP8[$AsyncCtx + 8 >> 0] = $$01314; //@line 21459
     HEAP8[$AsyncCtx + 9 >> 0] = $$015; //@line 21461
     HEAP32[$AsyncCtx + 12 >> 2] = $21; //@line 21463
     HEAP32[$AsyncCtx + 16 >> 2] = $24; //@line 21465
     HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 21467
     HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 21469
     HEAP32[$AsyncCtx + 28 >> 2] = $2; //@line 21471
     HEAP32[$AsyncCtx + 32 >> 2] = $25; //@line 21473
     HEAP32[$AsyncCtx + 36 >> 2] = $15; //@line 21475
     HEAP32[$AsyncCtx + 40 >> 2] = $0; //@line 21477
     HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 21479
     HEAP32[$AsyncCtx + 48 >> 2] = $0; //@line 21481
     HEAP32[$AsyncCtx + 52 >> 2] = $2; //@line 21483
     sp = STACKTOP; //@line 21484
     STACKTOP = sp; //@line 21485
     return;
    } else if ((label | 0) == 12) {
     HEAP32[$AsyncCtx3 >> 2] = 516; //@line 21488
     HEAP32[$AsyncCtx3 + 4 >> 2] = $19; //@line 21490
     HEAP8[$AsyncCtx3 + 8 >> 0] = $$01314; //@line 21492
     HEAP8[$AsyncCtx3 + 9 >> 0] = $$015; //@line 21494
     HEAP32[$AsyncCtx3 + 12 >> 2] = $21; //@line 21496
     HEAP32[$AsyncCtx3 + 16 >> 2] = $24; //@line 21498
     HEAP32[$AsyncCtx3 + 20 >> 2] = $2; //@line 21500
     HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 21502
     HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 21504
     HEAP32[$AsyncCtx3 + 32 >> 2] = $25; //@line 21506
     HEAP32[$AsyncCtx3 + 36 >> 2] = $15; //@line 21508
     HEAP32[$AsyncCtx3 + 40 >> 2] = $0; //@line 21510
     HEAP32[$AsyncCtx3 + 44 >> 2] = $0; //@line 21512
     HEAP32[$AsyncCtx3 + 48 >> 2] = $0; //@line 21514
     HEAP32[$AsyncCtx3 + 52 >> 2] = $2; //@line 21516
     sp = STACKTOP; //@line 21517
     STACKTOP = sp; //@line 21518
     return;
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 21523
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_331($0) {
 $0 = $0 | 0;
 var $$pre17 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26155
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26157
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26159
 HEAP32[$4 + 364 >> 2] = 2; //@line 26163
 $$pre17 = HEAP8[$2 >> 0] | 0; //@line 26164
 if (!($$pre17 & 4)) {
  $11 = HEAP32[$4 + 1324 >> 2] | 0; //@line 26169
  $12 = $11 + 16 | 0; //@line 26170
  $14 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 26172
  $15 = $11 + 28 | 0; //@line 26173
  $16 = HEAP32[$15 >> 2] | 0; //@line 26174
  if (!$16) {
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 26177
   _mbed_assert_internal(15615, 15620, 1102); //@line 26178
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 391; //@line 26181
    $18 = $ReallocAsyncCtx13 + 4 | 0; //@line 26182
    HEAP32[$18 >> 2] = $15; //@line 26183
    $19 = $ReallocAsyncCtx13 + 8 | 0; //@line 26184
    HEAP32[$19 >> 2] = $12; //@line 26185
    $20 = $ReallocAsyncCtx13 + 12 | 0; //@line 26186
    HEAP32[$20 >> 2] = $14; //@line 26187
    $21 = $ReallocAsyncCtx13 + 16 | 0; //@line 26188
    HEAP32[$21 >> 2] = $2; //@line 26189
    $22 = $ReallocAsyncCtx13 + 20 | 0; //@line 26190
    HEAP32[$22 >> 2] = $4; //@line 26191
    sp = STACKTOP; //@line 26192
    return;
   }
   ___async_unwind = 0; //@line 26195
   HEAP32[$ReallocAsyncCtx13 >> 2] = 391; //@line 26196
   $18 = $ReallocAsyncCtx13 + 4 | 0; //@line 26197
   HEAP32[$18 >> 2] = $15; //@line 26198
   $19 = $ReallocAsyncCtx13 + 8 | 0; //@line 26199
   HEAP32[$19 >> 2] = $12; //@line 26200
   $20 = $ReallocAsyncCtx13 + 12 | 0; //@line 26201
   HEAP32[$20 >> 2] = $14; //@line 26202
   $21 = $ReallocAsyncCtx13 + 16 | 0; //@line 26203
   HEAP32[$21 >> 2] = $2; //@line 26204
   $22 = $ReallocAsyncCtx13 + 20 | 0; //@line 26205
   HEAP32[$22 >> 2] = $4; //@line 26206
   sp = STACKTOP; //@line 26207
   return;
  } else {
   $23 = HEAP32[$16 >> 2] | 0; //@line 26210
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 26211
   FUNCTION_TABLE_vii[$23 & 31]($12, $14); //@line 26212
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 392; //@line 26215
    $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 26216
    HEAP32[$24 >> 2] = $2; //@line 26217
    $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 26218
    HEAP32[$25 >> 2] = $4; //@line 26219
    sp = STACKTOP; //@line 26220
    return;
   }
   ___async_unwind = 0; //@line 26223
   HEAP32[$ReallocAsyncCtx4 >> 2] = 392; //@line 26224
   $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 26225
   HEAP32[$24 >> 2] = $2; //@line 26226
   $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 26227
   HEAP32[$25 >> 2] = $4; //@line 26228
   sp = STACKTOP; //@line 26229
   return;
  }
 }
 $26 = $$pre17 & -5; //@line 26233
 HEAP8[$2 >> 0] = $26; //@line 26234
 if (!($26 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $26 & -17; //@line 26241
 $31 = HEAP32[$4 + 1324 >> 2] | 0; //@line 26243
 $32 = $31 + 48 | 0; //@line 26244
 $34 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 26246
 $35 = $31 + 60 | 0; //@line 26247
 $36 = HEAP32[$35 >> 2] | 0; //@line 26248
 if (!$36) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 26251
  _mbed_assert_internal(15615, 15620, 1102); //@line 26252
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 393; //@line 26255
   $38 = $ReallocAsyncCtx12 + 4 | 0; //@line 26256
   HEAP32[$38 >> 2] = $35; //@line 26257
   $39 = $ReallocAsyncCtx12 + 8 | 0; //@line 26258
   HEAP32[$39 >> 2] = $32; //@line 26259
   $40 = $ReallocAsyncCtx12 + 12 | 0; //@line 26260
   HEAP32[$40 >> 2] = $34; //@line 26261
   sp = STACKTOP; //@line 26262
   return;
  }
  ___async_unwind = 0; //@line 26265
  HEAP32[$ReallocAsyncCtx12 >> 2] = 393; //@line 26266
  $38 = $ReallocAsyncCtx12 + 4 | 0; //@line 26267
  HEAP32[$38 >> 2] = $35; //@line 26268
  $39 = $ReallocAsyncCtx12 + 8 | 0; //@line 26269
  HEAP32[$39 >> 2] = $32; //@line 26270
  $40 = $ReallocAsyncCtx12 + 12 | 0; //@line 26271
  HEAP32[$40 >> 2] = $34; //@line 26272
  sp = STACKTOP; //@line 26273
  return;
 } else {
  $41 = HEAP32[$36 >> 2] | 0; //@line 26276
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 26277
  FUNCTION_TABLE_vii[$41 & 31]($32, $34); //@line 26278
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 394; //@line 26281
   sp = STACKTOP; //@line 26282
   return;
  }
  ___async_unwind = 0; //@line 26285
  HEAP32[$ReallocAsyncCtx5 >> 2] = 394; //@line 26286
  sp = STACKTOP; //@line 26287
  return;
 }
}
function __ZN12LoRaPHYEU868C2ER18LoRaWANTimeHandler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $28 = 0, $3 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 __ZN7LoRaPHYC2ER18LoRaWANTimeHandler($0, $1); //@line 8
 HEAP32[$0 >> 2] = 1032; //@line 9
 $2 = $0 + 328 | 0; //@line 10
 HEAP32[$2 >> 2] = HEAP32[278]; //@line 11
 HEAP32[$2 + 4 >> 2] = HEAP32[279]; //@line 11
 HEAP32[$2 + 8 >> 2] = HEAP32[280]; //@line 11
 HEAP32[$2 + 12 >> 2] = HEAP32[281]; //@line 11
 HEAP32[$2 + 16 >> 2] = HEAP32[282]; //@line 11
 HEAP32[$2 + 20 >> 2] = HEAP32[283]; //@line 11
 $3 = $0 + 352 | 0; //@line 12
 HEAP32[$3 >> 2] = HEAP32[284]; //@line 13
 HEAP32[$3 + 4 >> 2] = HEAP32[285]; //@line 13
 HEAP32[$3 + 8 >> 2] = HEAP32[286]; //@line 13
 HEAP32[$3 + 12 >> 2] = HEAP32[287]; //@line 13
 HEAP32[$3 + 16 >> 2] = HEAP32[288]; //@line 13
 HEAP32[$3 + 20 >> 2] = HEAP32[289]; //@line 13
 $4 = $0 + 376 | 0; //@line 14
 HEAP32[$4 >> 2] = HEAP32[290]; //@line 15
 HEAP32[$4 + 4 >> 2] = HEAP32[291]; //@line 15
 HEAP32[$4 + 8 >> 2] = HEAP32[292]; //@line 15
 HEAP32[$4 + 12 >> 2] = HEAP32[293]; //@line 15
 HEAP32[$4 + 16 >> 2] = HEAP32[294]; //@line 15
 HEAP32[$4 + 20 >> 2] = HEAP32[295]; //@line 15
 $5 = $0 + 400 | 0; //@line 16
 HEAP32[$5 >> 2] = HEAP32[296]; //@line 17
 HEAP32[$5 + 4 >> 2] = HEAP32[297]; //@line 17
 HEAP32[$5 + 8 >> 2] = HEAP32[298]; //@line 17
 HEAP32[$5 + 12 >> 2] = HEAP32[299]; //@line 17
 HEAP32[$5 + 16 >> 2] = HEAP32[300]; //@line 17
 HEAP32[$5 + 20 >> 2] = HEAP32[301]; //@line 17
 $6 = $0 + 424 | 0; //@line 18
 HEAP32[$6 >> 2] = HEAP32[302]; //@line 19
 HEAP32[$6 + 4 >> 2] = HEAP32[303]; //@line 19
 HEAP32[$6 + 8 >> 2] = HEAP32[304]; //@line 19
 HEAP32[$6 + 12 >> 2] = HEAP32[305]; //@line 19
 HEAP32[$6 + 16 >> 2] = HEAP32[306]; //@line 19
 HEAP32[$6 + 20 >> 2] = HEAP32[307]; //@line 19
 $7 = $0 + 448 | 0; //@line 20
 HEAP32[$7 >> 2] = HEAP32[308]; //@line 21
 HEAP32[$7 + 4 >> 2] = HEAP32[309]; //@line 21
 HEAP32[$7 + 8 >> 2] = HEAP32[310]; //@line 21
 HEAP32[$7 + 12 >> 2] = HEAP32[311]; //@line 21
 HEAP32[$7 + 16 >> 2] = HEAP32[312]; //@line 21
 HEAP32[$7 + 20 >> 2] = HEAP32[313]; //@line 21
 $8 = $0 + 136 | 0; //@line 22
 HEAP32[$8 >> 2] = HEAP32[314]; //@line 23
 HEAP32[$8 + 4 >> 2] = HEAP32[315]; //@line 23
 HEAP32[$8 + 8 >> 2] = HEAP32[316]; //@line 23
 $9 = $0 + 148 | 0; //@line 24
 HEAP32[$9 >> 2] = HEAP32[317]; //@line 25
 HEAP32[$9 + 4 >> 2] = HEAP32[318]; //@line 25
 HEAP32[$9 + 8 >> 2] = HEAP32[319]; //@line 25
 $10 = $0 + 160 | 0; //@line 26
 HEAP32[$10 >> 2] = HEAP32[320]; //@line 27
 HEAP32[$10 + 4 >> 2] = HEAP32[321]; //@line 27
 HEAP32[$10 + 8 >> 2] = HEAP32[322]; //@line 27
 $11 = $0 + 474 | 0; //@line 28
 HEAP16[$11 >> 1] = 7; //@line 29
 $12 = $0 + 472 | 0; //@line 30
 __ZN7LoRaPHY17copy_channel_maskEPtS0_h($0, $12, $11, 1); //@line 31
 HEAP32[$0 + 112 >> 2] = $8; //@line 33
 HEAP8[$0 + 116 >> 0] = 16; //@line 35
 HEAP32[$0 + 120 >> 2] = $12; //@line 37
 HEAP32[$0 + 124 >> 2] = $11; //@line 39
 HEAP8[$0 + 128 >> 0] = 1; //@line 41
 HEAP32[$0 + 72 >> 2] = $2; //@line 43
 HEAP8[$0 + 76 >> 0] = 6; //@line 45
 HEAP32[$0 + 80 >> 2] = 1292; //@line 47
 HEAP8[$0 + 84 >> 0] = 8; //@line 49
 HEAP32[$0 + 88 >> 2] = 14304; //@line 51
 HEAP8[$0 + 92 >> 0] = 8; //@line 53
 HEAP32[$0 + 96 >> 2] = 14312; //@line 55
 HEAP8[$0 + 100 >> 0] = 8; //@line 57
 HEAP32[$0 + 104 >> 2] = 14320; //@line 59
 HEAP8[$0 + 108 >> 0] = 8; //@line 61
 $28 = $0 + 132 | 0; //@line 62
 HEAP8[$28 >> 0] = HEAP8[$28 >> 0] & -4; //@line 65
 $31 = $0 + 12 | 0; //@line 66
 $32 = $0 + 18 | 0; //@line 67
 HEAP32[$31 >> 2] = 16843009; //@line 68
 HEAP16[$31 + 4 >> 1] = 257; //@line 68
 HEAP8[$32 >> 0] = 3; //@line 69
 HEAP8[$0 + 20 >> 0] = 16; //@line 71
 HEAP8[$0 + 19 >> 0] = 5; //@line 73
 HEAP8[$0 + 26 >> 0] = 0; //@line 75
 HEAP8[$0 + 27 >> 0] = 7; //@line 77
 HEAP8[$0 + 28 >> 0] = 0; //@line 79
 HEAP8[$0 + 29 >> 0] = 7; //@line 81
 HEAP8[$0 + 30 >> 0] = 0; //@line 83
 HEAP8[$0 + 31 >> 0] = 5; //@line 85
 HEAP8[$0 + 32 >> 0] = 0; //@line 87
 HEAP8[$0 + 33 >> 0] = 5; //@line 89
 HEAP8[$0 + 34 >> 0] = 0; //@line 91
 HEAP8[$0 + 21 >> 0] = 7; //@line 93
 HEAP8[$0 + 22 >> 0] = 0; //@line 95
 HEAP8[$0 + 23 >> 0] = 0; //@line 97
 HEAPF32[$0 + 56 >> 2] = 16.0; //@line 99
 HEAPF32[$0 + 60 >> 2] = 2.1500000953674316; //@line 101
 HEAP8[$0 + 24 >> 0] = 64; //@line 103
 HEAP8[$0 + 25 >> 0] = 32; //@line 105
 HEAP16[$0 + 36 >> 1] = 3e3; //@line 107
 HEAP16[$0 + 38 >> 1] = 1e3; //@line 109
 HEAP16[$0 + 40 >> 1] = 2e3; //@line 111
 HEAP16[$0 + 46 >> 1] = 7; //@line 113
 HEAP16[$0 + 42 >> 1] = 5e3; //@line 115
 HEAP16[$0 + 44 >> 1] = 6e3; //@line 117
 HEAP16[$0 + 48 >> 1] = 16384; //@line 119
 HEAP16[$0 + 50 >> 1] = 2e3; //@line 121
 HEAP16[$0 + 52 >> 1] = 1e3; //@line 123
 HEAP8[$0 + 64 >> 0] = 0; //@line 125
 HEAP32[$0 + 68 >> 2] = 869525e3; //@line 127
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_340($0) {
 $0 = $0 | 0;
 var $$05$i = 0, $$06$i = 0, $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $37 = 0, $4 = 0, $49 = 0, $52 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $67 = 0, $68 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28014
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28016
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28018
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28020
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28022
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28024
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28026
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28028
 $15 = $2 + 968 | 0; //@line 28029
 HEAP32[$15 >> 2] = HEAP32[$15 >> 2] & -17; //@line 28032
 if (HEAP8[$2 + 944 >> 0] & 8) {
  if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) >> 2] | 0)) {
   HEAP8[$2 + 372 >> 0] = 0; //@line 28045
   HEAP32[$2 + 956 >> 2] = 0; //@line 28047
   HEAP32[$2 + 960 >> 2] = 0; //@line 28049
   HEAP32[$2 + 964 >> 2] = 0; //@line 28051
   HEAP8[$2 + 380 >> 0] = 0; //@line 28053
   HEAP8[$2 + 894 >> 0] = 1; //@line 28055
   HEAP8[$2 + 895 >> 0] = 1; //@line 28057
   HEAP8[$2 + 377 >> 0] = 0; //@line 28059
   HEAP8[$2 + 1152 >> 0] = 0; //@line 28061
   HEAP16[$2 + 1154 >> 1] = 1; //@line 28063
   $37 = $2 + 4 | 0; //@line 28064
   __ZN14LoRaMacCommand20clear_command_bufferEv($37); //@line 28065
   __ZN14LoRaMacCommand19clear_repeat_bufferEv($37); //@line 28066
   __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($37); //@line 28067
   HEAP8[$2 + 371 >> 0] = 1; //@line 28069
   __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$2 >> 2] | 0, $2 + 360 | 0, 0); //@line 28071
   HEAP8[$2 + 373 >> 0] = 0; //@line 28073
   HEAP8[$2 + 374 >> 0] = 0; //@line 28075
   $$05$i = HEAP32[$2 + 1208 >> 2] | 0; //@line 28077
   if ($$05$i | 0) {
    $$06$i = $$05$i; //@line 28080
    do {
     HEAP32[$$06$i + 36 >> 2] = 0; //@line 28083
     $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 28085
    } while (($$06$i | 0) != 0);
   }
   HEAP8[$2 + 378 >> 0] = 0; //@line 28095
   HEAP8[$2 + 379 >> 0] = 0; //@line 28097
   $49 = HEAP32[$2 >> 2] | 0; //@line 28098
   $52 = HEAP32[(HEAP32[$49 >> 2] | 0) + 52 >> 2] | 0; //@line 28101
   $57 = (HEAPU8[$2 + 897 >> 0] | 0) + 1 & 255; //@line 28106
   $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 28107
   $58 = FUNCTION_TABLE_iii[$52 & 31]($49, $57) | 0; //@line 28108
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 396; //@line 28111
    $59 = $ReallocAsyncCtx + 4 | 0; //@line 28112
    HEAP32[$59 >> 2] = $2; //@line 28113
    $60 = $ReallocAsyncCtx + 8 | 0; //@line 28114
    HEAP32[$60 >> 2] = $4; //@line 28115
    $61 = $ReallocAsyncCtx + 12 | 0; //@line 28116
    HEAP32[$61 >> 2] = $6; //@line 28117
    $62 = $ReallocAsyncCtx + 16 | 0; //@line 28118
    HEAP32[$62 >> 2] = $8; //@line 28119
    $63 = $ReallocAsyncCtx + 20 | 0; //@line 28120
    HEAP32[$63 >> 2] = $10; //@line 28121
    $64 = $ReallocAsyncCtx + 24 | 0; //@line 28122
    HEAP32[$64 >> 2] = $12; //@line 28123
    $65 = $ReallocAsyncCtx + 28 | 0; //@line 28124
    HEAP32[$65 >> 2] = $14; //@line 28125
    sp = STACKTOP; //@line 28126
    return;
   }
   HEAP8[___async_retval >> 0] = $58; //@line 28130
   ___async_unwind = 0; //@line 28131
   HEAP32[$ReallocAsyncCtx >> 2] = 396; //@line 28132
   $59 = $ReallocAsyncCtx + 4 | 0; //@line 28133
   HEAP32[$59 >> 2] = $2; //@line 28134
   $60 = $ReallocAsyncCtx + 8 | 0; //@line 28135
   HEAP32[$60 >> 2] = $4; //@line 28136
   $61 = $ReallocAsyncCtx + 12 | 0; //@line 28137
   HEAP32[$61 >> 2] = $6; //@line 28138
   $62 = $ReallocAsyncCtx + 16 | 0; //@line 28139
   HEAP32[$62 >> 2] = $8; //@line 28140
   $63 = $ReallocAsyncCtx + 20 | 0; //@line 28141
   HEAP32[$63 >> 2] = $10; //@line 28142
   $64 = $ReallocAsyncCtx + 24 | 0; //@line 28143
   HEAP32[$64 >> 2] = $12; //@line 28144
   $65 = $ReallocAsyncCtx + 28 | 0; //@line 28145
   HEAP32[$65 >> 2] = $14; //@line 28146
   sp = STACKTOP; //@line 28147
   return;
  }
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 28151
 __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 28152
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 398; //@line 28155
  $67 = $ReallocAsyncCtx3 + 4 | 0; //@line 28156
  HEAP32[$67 >> 2] = $6; //@line 28157
  $68 = $ReallocAsyncCtx3 + 8 | 0; //@line 28158
  HEAP32[$68 >> 2] = $4; //@line 28159
  sp = STACKTOP; //@line 28160
  return;
 }
 ___async_unwind = 0; //@line 28163
 HEAP32[$ReallocAsyncCtx3 >> 2] = 398; //@line 28164
 $67 = $ReallocAsyncCtx3 + 4 | 0; //@line 28165
 HEAP32[$67 >> 2] = $6; //@line 28166
 $68 = $ReallocAsyncCtx3 + 8 | 0; //@line 28167
 HEAP32[$68 >> 2] = $4; //@line 28168
 sp = STACKTOP; //@line 28169
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $78 = 0, $8 = 0, $80 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29599
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29601
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29603
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29605
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29607
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29609
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29611
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29613
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29615
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 29617
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 29619
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 29621
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 29623
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 29625
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 29627
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 29629
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 29631
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 29633
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 29635
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 29639
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 29641
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 29643
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 29645
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 29647
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 29651
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 29653
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 29655
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 29657
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 29659
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 29663
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 29665
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 29667
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 29669
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 29671
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 29675
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 29677
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29679
 if (!$AsyncRetVal) {
  _memcpy(HEAP32[$0 + 80 >> 2] | 0, $12 | 0, HEAP32[$0 + 128 >> 2] | 0) | 0; //@line 29682
 }
 HEAP8[$66 >> 0] = 0; //@line 29684
 HEAP8[$50 >> 0] = 0; //@line 29685
 HEAP8[$70 >> 0] = 0; //@line 29686
 HEAP8[$8 >> 0] = 0; //@line 29687
 HEAP8[$28 >> 0] = 0; //@line 29688
 HEAP8[$72 >> 0] = 0; //@line 29689
 HEAP8[$18 >> 0] = 0; //@line 29690
 HEAP8[$38 >> 0] = 0; //@line 29691
 HEAP8[$46 >> 0] = 0; //@line 29692
 HEAP8[$10 >> 0] = 0; //@line 29693
 HEAP8[$30 >> 0] = 0; //@line 29694
 HEAP8[$48 >> 0] = 0; //@line 29695
 HEAP8[$2 >> 0] = 0; //@line 29696
 HEAP8[$60 >> 0] = 0; //@line 29697
 HEAP8[$32 >> 0] = 0; //@line 29698
 HEAP8[$4 >> 0] = 0; //@line 29699
 HEAP8[$6 >> 0] = 0; //@line 29700
 HEAP8[$62 >> 0] = 0; //@line 29701
 HEAP8[$54 >> 0] = 0; //@line 29702
 HEAP8[$34 >> 0] = 0; //@line 29703
 HEAP8[$68 >> 0] = 0; //@line 29704
 HEAP8[$42 >> 0] = 0; //@line 29705
 HEAP8[$36 >> 0] = 0; //@line 29706
 HEAP8[$20 >> 0] = 0; //@line 29707
 HEAP8[$80 >> 0] = 0; //@line 29708
 HEAP8[$14 >> 0] = 0; //@line 29709
 HEAP8[$22 >> 0] = 0; //@line 29710
 HEAP8[$44 >> 0] = 0; //@line 29711
 HEAP8[$16 >> 0] = 0; //@line 29712
 HEAP8[$24 >> 0] = 0; //@line 29713
 HEAP8[$56 >> 0] = 0; //@line 29714
 HEAP8[$74 >> 0] = 0; //@line 29715
 HEAP32[$58 >> 2] = 0; //@line 29716
 HEAP8[$78 >> 0] = 0; //@line 29718
 HEAP8[$26 + 17 >> 0] = 0; //@line 29720
 HEAP8[$26 + 18 >> 0] = 0; //@line 29722
 HEAP8[$26 + 19 >> 0] = 0; //@line 29724
 HEAP8[$26 + 20 >> 0] = 0; //@line 29726
 HEAP8[$26 + 21 >> 0] = 0; //@line 29728
 HEAP8[$26 + 22 >> 0] = 0; //@line 29730
 HEAP8[$26 + 23 >> 0] = 0; //@line 29732
 HEAP8[$26 + 24 >> 0] = 0; //@line 29734
 HEAP8[$26 + 25 >> 0] = 0; //@line 29736
 HEAP8[$26 + 26 >> 0] = 0; //@line 29738
 HEAP8[$26 + 27 >> 0] = 0; //@line 29740
 HEAP8[$26 + 28 >> 0] = 0; //@line 29742
 HEAP8[$26 + 29 >> 0] = 0; //@line 29744
 HEAP8[$26 + 30 >> 0] = 0; //@line 29746
 HEAP8[$26 + 31 >> 0] = 0; //@line 29747
 HEAP8[$12 >> 0] = 0; //@line 29749
 HEAP8[$26 + 1 >> 0] = 0; //@line 29751
 HEAP8[$26 + 2 >> 0] = 0; //@line 29753
 HEAP8[$26 + 3 >> 0] = 0; //@line 29755
 HEAP8[$26 + 4 >> 0] = 0; //@line 29757
 HEAP8[$26 + 5 >> 0] = 0; //@line 29759
 HEAP8[$26 + 6 >> 0] = 0; //@line 29761
 HEAP8[$26 + 7 >> 0] = 0; //@line 29763
 HEAP8[$26 + 8 >> 0] = 0; //@line 29765
 HEAP8[$26 + 9 >> 0] = 0; //@line 29767
 HEAP8[$26 + 10 >> 0] = 0; //@line 29769
 HEAP8[$26 + 11 >> 0] = 0; //@line 29771
 HEAP8[$26 + 12 >> 0] = 0; //@line 29773
 HEAP8[$26 + 13 >> 0] = 0; //@line 29775
 HEAP8[$26 + 14 >> 0] = 0; //@line 29777
 HEAP8[$26 + 15 >> 0] = 0; //@line 29778
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 29780
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_170($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $23 = 0, $26 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $45 = 0, $48 = 0, $52 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 32567
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32573
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32575
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 32577
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32579
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32581
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32583
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 32585
 if ((HEAP8[$0 + 4 >> 0] | 0) == 7) {
  if (HEAP8[(HEAP32[$0 + 8 >> 2] | 0) + 14 >> 0] | 0) {
   $23 = HEAP32[$6 >> 2] | 0; //@line 32592
   $26 = HEAP32[(HEAP32[$23 >> 2] | 0) + 16 >> 2] | 0; //@line 32595
   $31 = HEAP32[$8 + 8 >> 2] & 65535; //@line 32600
   $34 = (HEAP8[$8 + 18 >> 0] | 0) != 0; //@line 32603
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 32604
   FUNCTION_TABLE_viiiiiiiiiiiiiii[$26 & 1]($23, 0, 5e4, ($10 & 255) * 1e3 | 0, 0, 83333, 5, $31, 0, 0, 1, 0, 0, 0, $34); //@line 32605
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 522; //@line 32608
    $35 = $ReallocAsyncCtx6 + 4 | 0; //@line 32609
    HEAP32[$35 >> 2] = $8; //@line 32610
    $36 = $ReallocAsyncCtx6 + 8 | 0; //@line 32611
    HEAP32[$36 >> 2] = $12; //@line 32612
    $37 = $ReallocAsyncCtx6 + 12 | 0; //@line 32613
    HEAP32[$37 >> 2] = $14; //@line 32614
    $38 = $ReallocAsyncCtx6 + 16 | 0; //@line 32615
    HEAP32[$38 >> 2] = $16; //@line 32616
    $39 = $ReallocAsyncCtx6 + 20 | 0; //@line 32617
    HEAP32[$39 >> 2] = $6; //@line 32618
    $40 = $ReallocAsyncCtx6 + 24 | 0; //@line 32619
    HEAP8[$40 >> 0] = $10; //@line 32620
    $41 = $ReallocAsyncCtx6 + 28 | 0; //@line 32621
    HEAP32[$41 >> 2] = $18; //@line 32622
    sp = STACKTOP; //@line 32623
    return;
   }
   ___async_unwind = 0; //@line 32626
   HEAP32[$ReallocAsyncCtx6 >> 2] = 522; //@line 32627
   $35 = $ReallocAsyncCtx6 + 4 | 0; //@line 32628
   HEAP32[$35 >> 2] = $8; //@line 32629
   $36 = $ReallocAsyncCtx6 + 8 | 0; //@line 32630
   HEAP32[$36 >> 2] = $12; //@line 32631
   $37 = $ReallocAsyncCtx6 + 12 | 0; //@line 32632
   HEAP32[$37 >> 2] = $14; //@line 32633
   $38 = $ReallocAsyncCtx6 + 16 | 0; //@line 32634
   HEAP32[$38 >> 2] = $16; //@line 32635
   $39 = $ReallocAsyncCtx6 + 20 | 0; //@line 32636
   HEAP32[$39 >> 2] = $6; //@line 32637
   $40 = $ReallocAsyncCtx6 + 24 | 0; //@line 32638
   HEAP8[$40 >> 0] = $10; //@line 32639
   $41 = $ReallocAsyncCtx6 + 28 | 0; //@line 32640
   HEAP32[$41 >> 2] = $18; //@line 32641
   sp = STACKTOP; //@line 32642
   return;
  }
 }
 $42 = HEAP32[$6 >> 2] | 0; //@line 32646
 $45 = HEAP32[(HEAP32[$42 >> 2] | 0) + 16 >> 2] | 0; //@line 32649
 $48 = HEAPU8[$8 + 2 >> 0] | 0; //@line 32652
 $52 = HEAP32[$8 + 8 >> 2] & 65535; //@line 32656
 $55 = (HEAP8[$8 + 18 >> 0] | 0) != 0; //@line 32659
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 32660
 FUNCTION_TABLE_viiiiiiiiiiiiiii[$45 & 1]($42, 1, $48, $10 & 255, 1, 0, 8, $52, 0, 0, 0, 0, 0, 1, $55); //@line 32661
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 523; //@line 32664
  $56 = $ReallocAsyncCtx7 + 4 | 0; //@line 32665
  HEAP32[$56 >> 2] = $8; //@line 32666
  $57 = $ReallocAsyncCtx7 + 8 | 0; //@line 32667
  HEAP32[$57 >> 2] = $12; //@line 32668
  $58 = $ReallocAsyncCtx7 + 12 | 0; //@line 32669
  HEAP32[$58 >> 2] = $14; //@line 32670
  $59 = $ReallocAsyncCtx7 + 16 | 0; //@line 32671
  HEAP32[$59 >> 2] = $16; //@line 32672
  $60 = $ReallocAsyncCtx7 + 20 | 0; //@line 32673
  HEAP32[$60 >> 2] = $6; //@line 32674
  $61 = $ReallocAsyncCtx7 + 24 | 0; //@line 32675
  HEAP8[$61 >> 0] = $10; //@line 32676
  $62 = $ReallocAsyncCtx7 + 28 | 0; //@line 32677
  HEAP32[$62 >> 2] = $18; //@line 32678
  sp = STACKTOP; //@line 32679
  return;
 }
 ___async_unwind = 0; //@line 32682
 HEAP32[$ReallocAsyncCtx7 >> 2] = 523; //@line 32683
 $56 = $ReallocAsyncCtx7 + 4 | 0; //@line 32684
 HEAP32[$56 >> 2] = $8; //@line 32685
 $57 = $ReallocAsyncCtx7 + 8 | 0; //@line 32686
 HEAP32[$57 >> 2] = $12; //@line 32687
 $58 = $ReallocAsyncCtx7 + 12 | 0; //@line 32688
 HEAP32[$58 >> 2] = $14; //@line 32689
 $59 = $ReallocAsyncCtx7 + 16 | 0; //@line 32690
 HEAP32[$59 >> 2] = $16; //@line 32691
 $60 = $ReallocAsyncCtx7 + 20 | 0; //@line 32692
 HEAP32[$60 >> 2] = $6; //@line 32693
 $61 = $ReallocAsyncCtx7 + 24 | 0; //@line 32694
 HEAP8[$61 >> 0] = $10; //@line 32695
 $62 = $ReallocAsyncCtx7 + 28 | 0; //@line 32696
 HEAP32[$62 >> 2] = $18; //@line 32697
 sp = STACKTOP; //@line 32698
 return;
}
function _ticker_read_us__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $58 = 0, $59 = 0, $65 = 0, $66 = 0, $67 = 0, $76 = 0, $77 = 0, $78 = 0, $80 = 0, $84 = 0, $85 = 0, $91 = 0, $92 = 0, $93 = 0, $95 = 0, $99 = 0, $AsyncRetVal = 0, label = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 370
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 372
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 374
 if (($AsyncRetVal | 0) == (HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0)) {
  $99 = HEAP32[$2 >> 2] | 0; //@line 380
  $100 = $99 + 48 | 0; //@line 381
  $101 = $100; //@line 382
  $102 = $101; //@line 383
  $103 = HEAP32[$102 >> 2] | 0; //@line 384
  $104 = $101 + 4 | 0; //@line 385
  $105 = $104; //@line 386
  $106 = HEAP32[$105 >> 2] | 0; //@line 387
  $107 = ___async_retval; //@line 388
  $108 = $107; //@line 389
  $109 = $108; //@line 390
  HEAP32[$109 >> 2] = $103; //@line 391
  $110 = $108 + 4 | 0; //@line 392
  $111 = $110; //@line 393
  HEAP32[$111 >> 2] = $106; //@line 394
  return;
 }
 $10 = $4 + 32 | 0; //@line 397
 $15 = $AsyncRetVal - (HEAP32[$10 >> 2] | 0) & HEAP32[$4 + 12 >> 2]; //@line 402
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 403
 $17 = HEAP32[$4 + 8 >> 2] | 0; //@line 405
 L5 : do {
  if (($17 | 0) < 1e6) {
   switch ($17 | 0) {
   case 32768:
    {
     break;
    }
   default:
    {
     label = 6; //@line 414
     break L5;
    }
   }
   $18 = ___muldi3($15 | 0, 0, 1e6, 0) | 0; //@line 418
   $20 = _bitshift64Lshr($18 | 0, tempRet0 | 0, 15) | 0; //@line 420
   $21 = tempRet0; //@line 421
   $24 = $4 + 40 | 0; //@line 424
   $25 = $24; //@line 425
   $31 = _i64Add(HEAP32[$25 >> 2] | 0, HEAP32[$25 + 4 >> 2] | 0, $15 * 1e6 & 32704 | 0, 0) | 0; //@line 431
   $32 = tempRet0; //@line 432
   $33 = $24; //@line 433
   HEAP32[$33 >> 2] = $31; //@line 435
   HEAP32[$33 + 4 >> 2] = $32; //@line 438
   if ($32 >>> 0 < 0 | ($32 | 0) == 0 & $31 >>> 0 < 32768) {
    $91 = $20; //@line 445
    $92 = $21; //@line 445
   } else {
    $42 = _i64Add($20 | 0, $21 | 0, 1, 0) | 0; //@line 447
    $43 = tempRet0; //@line 448
    $44 = _i64Add($31 | 0, $32 | 0, -32768, -1) | 0; //@line 449
    $46 = $24; //@line 451
    HEAP32[$46 >> 2] = $44; //@line 453
    HEAP32[$46 + 4 >> 2] = tempRet0; //@line 456
    $91 = $42; //@line 457
    $92 = $43; //@line 457
   }
  } else {
   switch ($17 | 0) {
   case 1e6:
    {
     $91 = $15; //@line 462
     $92 = 0; //@line 462
     break;
    }
   default:
    {
     label = 6; //@line 466
    }
   }
  }
 } while (0);
 if ((label | 0) == 6) {
  $50 = ___muldi3($15 | 0, 0, 1e6, 0) | 0; //@line 472
  $51 = tempRet0; //@line 473
  $52 = ___udivdi3($50 | 0, $51 | 0, $17 | 0, 0) | 0; //@line 474
  $53 = tempRet0; //@line 475
  $54 = ___muldi3($52 | 0, $53 | 0, $17 | 0, 0) | 0; //@line 476
  $56 = _i64Subtract($50 | 0, $51 | 0, $54 | 0, tempRet0 | 0) | 0; //@line 478
  $58 = $4 + 40 | 0; //@line 480
  $59 = $58; //@line 481
  $65 = _i64Add($56 | 0, tempRet0 | 0, HEAP32[$59 >> 2] | 0, HEAP32[$59 + 4 >> 2] | 0) | 0; //@line 487
  $66 = tempRet0; //@line 488
  $67 = $58; //@line 489
  HEAP32[$67 >> 2] = $65; //@line 491
  HEAP32[$67 + 4 >> 2] = $66; //@line 494
  if ($66 >>> 0 < 0 | ($66 | 0) == 0 & $65 >>> 0 < $17 >>> 0) {
   $91 = $52; //@line 501
   $92 = $53; //@line 501
  } else {
   $76 = _i64Add($52 | 0, $53 | 0, 1, 0) | 0; //@line 503
   $77 = tempRet0; //@line 504
   $78 = _i64Subtract($65 | 0, $66 | 0, $17 | 0, 0) | 0; //@line 505
   $80 = $58; //@line 507
   HEAP32[$80 >> 2] = $78; //@line 509
   HEAP32[$80 + 4 >> 2] = tempRet0; //@line 512
   $91 = $76; //@line 513
   $92 = $77; //@line 513
  }
 }
 $84 = $4 + 48 | 0; //@line 516
 $85 = $84; //@line 517
 $93 = _i64Add(HEAP32[$85 >> 2] | 0, HEAP32[$85 + 4 >> 2] | 0, $91 | 0, $92 | 0) | 0; //@line 523
 $95 = $84; //@line 525
 HEAP32[$95 >> 2] = $93; //@line 527
 HEAP32[$95 + 4 >> 2] = tempRet0; //@line 530
 $99 = HEAP32[$2 >> 2] | 0; //@line 531
 $100 = $99 + 48 | 0; //@line 532
 $101 = $100; //@line 533
 $102 = $101; //@line 534
 $103 = HEAP32[$102 >> 2] | 0; //@line 535
 $104 = $101 + 4 | 0; //@line 536
 $105 = $104; //@line 537
 $106 = HEAP32[$105 >> 2] | 0; //@line 538
 $107 = ___async_retval; //@line 539
 $108 = $107; //@line 540
 $109 = $108; //@line 541
 HEAP32[$109 >> 2] = $103; //@line 542
 $110 = $108 + 4 | 0; //@line 543
 $111 = $110; //@line 544
 HEAP32[$111 >> 2] = $106; //@line 545
 return;
}
function __ZN14LoRaMacCommand15add_mac_commandEhhh($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $15 = 0, $25 = 0, $26 = 0, $32 = 0, $33 = 0, $34 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $72 = 0, $73 = 0, $80 = 0, $81 = 0, $87 = 0, $88 = 0;
 $5 = HEAP8[$0 + 3 >> 0] | 0; //@line 17961
 L1 : do {
  switch ($1 << 24 >> 24) {
  case 2:
   {
    $6 = $0 + 2 | 0; //@line 17965
    $7 = HEAP8[$6 >> 0] | 0; //@line 17966
    if (($7 & 255) < (-128 - $5 & 255)) {
     HEAP8[$6 >> 0] = $7 + 1 << 24 >> 24; //@line 17973
     HEAP8[($7 & 255) + ($0 + 4) >> 0] = 2; //@line 17974
     break L1;
    } else {
     $$0 = -1e3; //@line 17977
     return $$0 | 0; //@line 17978
    }
    break;
   }
  case 3:
   {
    $13 = $0 + 2 | 0; //@line 17983
    $14 = HEAP8[$13 >> 0] | 0; //@line 17984
    $15 = $14 & 255; //@line 17985
    if (((-128 - $5 & 255) + -1 | 0) > ($15 | 0)) {
     HEAP8[$0 + 4 + $15 >> 0] = 3; //@line 17996
     HEAP8[$13 >> 0] = $14 + 2 << 24 >> 24; //@line 17997
     HEAP8[($14 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 17998
     break L1;
    } else {
     $$0 = -1e3; //@line 18001
     return $$0 | 0; //@line 18002
    }
    break;
   }
  case 4:
   {
    $25 = $0 + 2 | 0; //@line 18007
    $26 = HEAP8[$25 >> 0] | 0; //@line 18008
    if (($26 & 255) < (-128 - $5 & 255)) {
     HEAP8[$25 >> 0] = $26 + 1 << 24 >> 24; //@line 18015
     HEAP8[($26 & 255) + ($0 + 4) >> 0] = 4; //@line 18016
     break L1;
    } else {
     $$0 = -1e3; //@line 18019
     return $$0 | 0; //@line 18020
    }
    break;
   }
  case 5:
   {
    $32 = $0 + 2 | 0; //@line 18025
    $33 = HEAP8[$32 >> 0] | 0; //@line 18026
    $34 = $33 & 255; //@line 18027
    if (((-128 - $5 & 255) + -1 | 0) > ($34 | 0)) {
     HEAP8[$0 + 4 + $34 >> 0] = 5; //@line 18035
     HEAP8[$32 >> 0] = $33 + 2 << 24 >> 24; //@line 18037
     HEAP8[($33 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 18040
     HEAP8[$0 + 1 >> 0] = 1; //@line 18042
     break L1;
    } else {
     $$0 = -1e3; //@line 18045
     return $$0 | 0; //@line 18046
    }
    break;
   }
  case 6:
   {
    $45 = $0 + 2 | 0; //@line 18051
    $46 = HEAP8[$45 >> 0] | 0; //@line 18052
    $47 = $46 & 255; //@line 18053
    if (((-128 - $5 & 255) + -2 | 0) > ($47 | 0)) {
     HEAP8[$0 + 4 + $47 >> 0] = 6; //@line 18061
     HEAP8[($46 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 18065
     HEAP8[$45 >> 0] = $46 + 3 << 24 >> 24; //@line 18067
     HEAP8[($46 + 2 & 255) + ($0 + 4) >> 0] = $3; //@line 18070
     break L1;
    } else {
     $$0 = -1e3; //@line 18073
     return $$0 | 0; //@line 18074
    }
    break;
   }
  case 7:
   {
    $60 = $0 + 2 | 0; //@line 18079
    $61 = HEAP8[$60 >> 0] | 0; //@line 18080
    $62 = $61 & 255; //@line 18081
    if (((-128 - $5 & 255) + -1 | 0) > ($62 | 0)) {
     HEAP8[$0 + 4 + $62 >> 0] = 7; //@line 18092
     HEAP8[$60 >> 0] = $61 + 2 << 24 >> 24; //@line 18093
     HEAP8[($61 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 18094
     break L1;
    } else {
     $$0 = -1e3; //@line 18097
     return $$0 | 0; //@line 18098
    }
    break;
   }
  case 8:
   {
    $72 = $0 + 2 | 0; //@line 18103
    $73 = HEAP8[$72 >> 0] | 0; //@line 18104
    if (($73 & 255) < (-128 - $5 & 255)) {
     HEAP8[$72 >> 0] = $73 + 1 << 24 >> 24; //@line 18112
     HEAP8[($73 & 255) + ($0 + 4) >> 0] = 8; //@line 18113
     HEAP8[$0 + 1 >> 0] = 1; //@line 18114
     break L1;
    } else {
     $$0 = -1e3; //@line 18117
     return $$0 | 0; //@line 18118
    }
    break;
   }
  case 9:
   {
    $80 = $0 + 2 | 0; //@line 18123
    $81 = HEAP8[$80 >> 0] | 0; //@line 18124
    if (($81 & 255) < (-128 - $5 & 255)) {
     HEAP8[$80 >> 0] = $81 + 1 << 24 >> 24; //@line 18131
     HEAP8[($81 & 255) + ($0 + 4) >> 0] = 9; //@line 18132
     break L1;
    } else {
     $$0 = -1e3; //@line 18135
     return $$0 | 0; //@line 18136
    }
    break;
   }
  case 10:
   {
    $87 = $0 + 2 | 0; //@line 18141
    $88 = HEAP8[$87 >> 0] | 0; //@line 18142
    if (($88 & 255) < (-128 - $5 & 255)) {
     HEAP8[($88 & 255) + ($0 + 4) >> 0] = 10; //@line 18149
     HEAP8[$87 >> 0] = $88 + 2 << 24 >> 24; //@line 18151
     HEAP8[($88 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 18154
     HEAP8[$0 + 1 >> 0] = 1; //@line 18156
     break L1;
    } else {
     $$0 = -1e3; //@line 18159
     return $$0 | 0; //@line 18160
    }
    break;
   }
  default:
   {
    $$0 = -1002; //@line 18165
    return $$0 | 0; //@line 18166
   }
  }
 } while (0);
 HEAP8[$0 >> 0] = 1; //@line 18170
 $$0 = 0; //@line 18171
 return $$0 | 0; //@line 18172
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $18 = 0, $23 = 0, $30 = 0, $34 = 0, $38 = 0, $41 = 0, $5 = 0, $52 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12571
 STACKTOP = STACKTOP + 16 | 0; //@line 12572
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12572
 $$byval_copy = sp + 8 | 0; //@line 12573
 $vararg_buffer = sp; //@line 12574
 _mbed_tracef(16, 13704, 13942, $vararg_buffer); //@line 12575
 $1 = $0 + 360 | 0; //@line 12576
 do {
  if ((HEAP32[$1 >> 2] | 0) == 2) {
   _mbed_tracef(16, 13704, 13723, $$byval_copy); //@line 12581
   $5 = HEAP32[$0 + 1328 >> 2] | 0; //@line 12583
   HEAP32[$vararg_buffer >> 2] = 279; //@line 12584
   HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 12586
   $AsyncCtx5 = _emscripten_alloc_async_context(16, sp) | 0; //@line 12587
   HEAP32[$$byval_copy >> 2] = HEAP32[$vararg_buffer >> 2]; //@line 12588
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$vararg_buffer + 4 >> 2]; //@line 12588
   $6 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($5, $0, $$byval_copy) | 0; //@line 12589
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 363; //@line 12592
    HEAP32[$AsyncCtx5 + 4 >> 2] = $vararg_buffer; //@line 12594
    HEAP32[$AsyncCtx5 + 8 >> 2] = $0; //@line 12596
    HEAP32[$AsyncCtx5 + 12 >> 2] = $1; //@line 12598
    sp = STACKTOP; //@line 12599
    STACKTOP = sp; //@line 12600
    return;
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 12602
   do {
    if (!$6) {
     $AsyncCtx13 = _emscripten_alloc_async_context(16, sp) | 0; //@line 12606
     _mbed_assert_internal(13588, 13597, 215); //@line 12607
     if (___async) {
      HEAP32[$AsyncCtx13 >> 2] = 364; //@line 12610
      HEAP32[$AsyncCtx13 + 4 >> 2] = $vararg_buffer; //@line 12612
      HEAP32[$AsyncCtx13 + 8 >> 2] = $0; //@line 12614
      HEAP32[$AsyncCtx13 + 12 >> 2] = $1; //@line 12616
      sp = STACKTOP; //@line 12617
      STACKTOP = sp; //@line 12618
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx13 | 0); //@line 12620
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 12626
   if (HEAP8[$0 + 373 >> 0] | 0) {
    label = 19; //@line 12631
   }
  } else {
   $18 = HEAP32[$0 >> 2] | 0; //@line 12634
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 12635
   __ZN7LoRaPHY18put_radio_to_sleepEv($18); //@line 12636
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 365; //@line 12639
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 12641
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 12643
    sp = STACKTOP; //@line 12644
    STACKTOP = sp; //@line 12645
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 12647
   $23 = (HEAP8[$0 + 373 >> 0] | 0) != 0; //@line 12653
   if (HEAP32[$0 + 364 >> 2] | 0) {
    if ($23) {
     label = 19; //@line 12656
     break;
    } else {
     break;
    }
   }
   if ($23) {
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 3; //@line 12666
   }
   HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 3; //@line 12671
   $30 = $0 + 356 | 0; //@line 12672
   $34 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$30 >> 2] | 0, HEAP32[$0 + 980 >> 2] | 0) | 0; //@line 12676
   if ($34 >>> 0 < (HEAP32[$0 + 976 >> 2] | 0) >>> 0) {
    STACKTOP = sp; //@line 12681
    return;
   }
   $38 = HEAP32[$30 >> 2] | 0; //@line 12683
   $AsyncCtx9 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12685
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($38, $0 + 1056 | 0); //@line 12686
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 366; //@line 12689
    HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 12691
    sp = STACKTOP; //@line 12692
    STACKTOP = sp; //@line 12693
    return;
   }
   _emscripten_free_async_context($AsyncCtx9 | 0); //@line 12695
   $41 = $0 + 944 | 0; //@line 12696
   HEAP8[$41 >> 0] = HEAP8[$41 >> 0] | 32; //@line 12699
   STACKTOP = sp; //@line 12700
   return;
  }
 } while (0);
 if ((label | 0) == 19) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 4; //@line 12707
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 4; //@line 12712
 if ((HEAP32[$1 >> 2] | 0) == 2) {
  STACKTOP = sp; //@line 12716
  return;
 }
 $52 = $0 + 944 | 0; //@line 12718
 HEAP8[$52 >> 0] = HEAP8[$52 >> 0] | 32; //@line 12721
 STACKTOP = sp; //@line 12722
 return;
}
function _equeue_cancel($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$sink$in$i$i = 0, $$sink$in$in$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $24 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $42 = 0, $44 = 0, $46 = 0, $49 = 0, $5 = 0, $56 = 0, $57 = 0, $59 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $72 = 0, $73 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3427
 if (!$1) {
  return;
 }
 $5 = $0 + 16 | 0; //@line 3434
 $10 = (HEAP32[$0 + 12 >> 2] | 0) + ((1 << HEAP32[$5 >> 2]) + -1 & $1) | 0; //@line 3439
 $11 = $0 + 128 | 0; //@line 3440
 _equeue_mutex_lock($11); //@line 3441
 $12 = $10 + 4 | 0; //@line 3442
 $13 = HEAP8[$12 >> 0] | 0; //@line 3443
 $14 = $13 & 255; //@line 3444
 $15 = HEAP32[$5 >> 2] | 0; //@line 3445
 if (($1 >> $15 | 0) != ($14 | 0)) {
  _equeue_mutex_unlock($11); //@line 3449
  return;
 }
 HEAP32[$10 + 32 >> 2] = 0; //@line 3453
 HEAP32[$10 + 24 >> 2] = -1; //@line 3455
 $24 = (HEAP32[$10 + 20 >> 2] | 0) - (HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 3460
 do {
  if (($24 | 0) >= 0) {
   if (!$24) {
    if ((HEAP8[$10 + 5 >> 0] | 0) != (HEAP8[$0 + 9 >> 0] | 0)) {
     break;
    }
   }
   $32 = $10 + 12 | 0; //@line 3475
   $33 = HEAP32[$32 >> 2] | 0; //@line 3476
   $35 = $10 + 8 | 0; //@line 3478
   $36 = HEAP32[$35 >> 2] | 0; //@line 3479
   $37 = $33; //@line 3480
   if (!$33) {
    $44 = $10 + 16 | 0; //@line 3482
    HEAP32[HEAP32[$44 >> 2] >> 2] = $36; //@line 3484
    $46 = HEAP32[$35 >> 2] | 0; //@line 3485
    if ($46 | 0) {
     $$sink$in$in$i = $44; //@line 3488
     $49 = $46; //@line 3488
     label = 13; //@line 3489
    }
   } else {
    $38 = $33 + 8 | 0; //@line 3492
    HEAP32[$38 >> 2] = $36; //@line 3493
    if ($36 | 0) {
     HEAP32[$36 + 16 >> 2] = $38; //@line 3498
    }
    $42 = $10 + 16 | 0; //@line 3500
    HEAP32[HEAP32[$42 >> 2] >> 2] = $37; //@line 3502
    $$sink$in$in$i = $42; //@line 3504
    $49 = HEAP32[$32 >> 2] | 0; //@line 3504
    label = 13; //@line 3505
   }
   if ((label | 0) == 13) {
    HEAP32[$49 + 16 >> 2] = HEAP32[$$sink$in$in$i >> 2]; //@line 3510
   }
   HEAP8[$12 >> 0] = (($13 + 1 & 255) << $15 | 0) == 0 ? 1 : $14 + 1 & 255; //@line 3519
   _equeue_mutex_unlock($11); //@line 3520
   $56 = $10 + 36 | 0; //@line 3521
   $57 = $56 + -36 | 0; //@line 3522
   $59 = HEAP32[$56 + -8 >> 2] | 0; //@line 3524
   do {
    if ($59 | 0) {
     $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 3528
     FUNCTION_TABLE_vi[$59 & 1023]($56); //@line 3529
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 122; //@line 3532
      HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3534
      HEAP32[$AsyncCtx + 8 >> 2] = $56; //@line 3536
      HEAP32[$AsyncCtx + 12 >> 2] = $57; //@line 3538
      sp = STACKTOP; //@line 3539
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 3542
      break;
     }
    }
   } while (0);
   $64 = $0 + 156 | 0; //@line 3547
   _equeue_mutex_lock($64); //@line 3548
   $65 = $0 + 24 | 0; //@line 3549
   $66 = HEAP32[$65 >> 2] | 0; //@line 3550
   L28 : do {
    if (!$66) {
     $$02329$i$i = $65; //@line 3554
     label = 24; //@line 3555
    } else {
     $68 = HEAP32[$57 >> 2] | 0; //@line 3557
     $$025$i$i = $65; //@line 3558
     $70 = $66; //@line 3558
     while (1) {
      $69 = HEAP32[$70 >> 2] | 0; //@line 3560
      if ($69 >>> 0 >= $68 >>> 0) {
       break;
      }
      $72 = $70 + 8 | 0; //@line 3565
      $73 = HEAP32[$72 >> 2] | 0; //@line 3566
      if (!$73) {
       $$02329$i$i = $72; //@line 3569
       label = 24; //@line 3570
       break L28;
      } else {
       $$025$i$i = $72; //@line 3573
       $70 = $73; //@line 3573
      }
     }
     if (($69 | 0) == ($68 | 0)) {
      HEAP32[$56 + -24 >> 2] = $70; //@line 3579
      $$02330$i$i = $$025$i$i; //@line 3582
      $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 3582
     } else {
      $$02329$i$i = $$025$i$i; //@line 3584
      label = 24; //@line 3585
     }
    }
   } while (0);
   if ((label | 0) == 24) {
    HEAP32[$56 + -24 >> 2] = 0; //@line 3591
    $$02330$i$i = $$02329$i$i; //@line 3592
    $$sink$in$i$i = $$02329$i$i; //@line 3592
   }
   HEAP32[$56 + -28 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 3596
   HEAP32[$$02330$i$i >> 2] = $57; //@line 3597
   _equeue_mutex_unlock($64); //@line 3598
   return;
  }
 } while (0);
 _equeue_mutex_unlock($11); //@line 3602
 return;
}
function _gcm_mult($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$07475 = 0, $100 = 0, $101 = 0, $103 = 0, $109 = 0, $110 = 0, $111 = 0, $113 = 0, $116 = 0, $120 = 0, $126 = 0, $130 = 0, $134 = 0, $140 = 0, $144 = 0, $148 = 0, $15 = 0, $154 = 0, $158 = 0, $162 = 0, $22 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $46 = 0, $51 = 0, $6 = 0, $60 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $88 = 0, $92 = 0, $94 = 0;
 $4 = HEAP8[$1 + 15 >> 0] | 0; //@line 5138
 $6 = $4 & 15; //@line 5140
 $8 = $0 + 200 + ($6 << 3) | 0; //@line 5142
 $15 = $0 + 72 + ($6 << 3) | 0; //@line 5149
 $$07475 = 15; //@line 5155
 $22 = $4; //@line 5155
 $27 = HEAP32[$15 >> 2] | 0; //@line 5155
 $28 = HEAP32[$8 >> 2] | 0; //@line 5155
 $29 = HEAP32[$8 + 4 >> 2] | 0; //@line 5155
 $32 = HEAP32[$15 + 4 >> 2] | 0; //@line 5155
 while (1) {
  if (($$07475 | 0) == 15) {
   $69 = $27; //@line 5160
   $70 = $28; //@line 5160
   $71 = $29; //@line 5160
   $74 = $32; //@line 5160
  } else {
   $25 = $22 & 15; //@line 5163
   $30 = _bitshift64Shl($28 | 0, $29 | 0, 60) | 0; //@line 5165
   $31 = tempRet0; //@line 5166
   $33 = _bitshift64Lshr($27 | 0, $32 | 0, 4) | 0; //@line 5167
   $36 = tempRet0 | $31; //@line 5170
   $37 = _bitshift64Lshr($28 | 0, $29 | 0, 4) | 0; //@line 5171
   $38 = tempRet0; //@line 5172
   $40 = 208 + (($27 & 15) << 3) | 0; //@line 5174
   $46 = _bitshift64Shl(HEAP32[$40 >> 2] | 0, HEAP32[$40 + 4 >> 2] | 0, 48) | 0; //@line 5180
   $51 = $0 + 200 + ($25 << 3) | 0; //@line 5185
   $60 = $0 + 72 + ($25 << 3) | 0; //@line 5194
   $69 = HEAP32[$60 >> 2] ^ ($33 | $30); //@line 5202
   $70 = $46 ^ $37 ^ HEAP32[$51 >> 2]; //@line 5202
   $71 = tempRet0 ^ $38 ^ HEAP32[$51 + 4 >> 2]; //@line 5202
   $74 = HEAP32[$60 + 4 >> 2] ^ $36; //@line 5202
  }
  $72 = _bitshift64Shl($70 | 0, $71 | 0, 60) | 0; //@line 5205
  $73 = tempRet0; //@line 5206
  $75 = _bitshift64Lshr($69 | 0, $74 | 0, 4) | 0; //@line 5207
  $78 = tempRet0 | $73; //@line 5210
  $79 = _bitshift64Lshr($70 | 0, $71 | 0, 4) | 0; //@line 5211
  $80 = tempRet0; //@line 5212
  $82 = 208 + (($69 & 15) << 3) | 0; //@line 5214
  $88 = _bitshift64Shl(HEAP32[$82 >> 2] | 0, HEAP32[$82 + 4 >> 2] | 0, 48) | 0; //@line 5220
  $92 = ($22 & 255) >>> 4 & 255; //@line 5224
  $94 = $0 + 200 + ($92 << 3) | 0; //@line 5226
  $100 = $88 ^ $79 ^ HEAP32[$94 >> 2]; //@line 5232
  $101 = tempRet0 ^ $80 ^ HEAP32[$94 + 4 >> 2]; //@line 5233
  $103 = $0 + 72 + ($92 << 3) | 0; //@line 5235
  $109 = HEAP32[$103 >> 2] ^ ($75 | $72); //@line 5241
  $110 = HEAP32[$103 + 4 >> 2] ^ $78; //@line 5242
  $111 = $$07475 + -1 | 0; //@line 5243
  if (($$07475 | 0) <= 0) {
   break;
  }
  $$07475 = $111; //@line 5250
  $22 = HEAP8[$1 + $111 >> 0] | 0; //@line 5250
  $27 = $109; //@line 5250
  $28 = $100; //@line 5250
  $29 = $101; //@line 5250
  $32 = $110; //@line 5250
 }
 $113 = _bitshift64Lshr($100 | 0, $101 | 0, 56) | 0; //@line 5252
 HEAP8[$2 >> 0] = $113; //@line 5255
 $116 = _bitshift64Lshr($100 | 0, $101 | 0, 48) | 0; //@line 5256
 HEAP8[$2 + 1 >> 0] = $116; //@line 5260
 $120 = _bitshift64Lshr($100 | 0, $101 | 0, 40) | 0; //@line 5261
 HEAP8[$2 + 2 >> 0] = $120; //@line 5265
 HEAP8[$2 + 3 >> 0] = $101; //@line 5268
 $126 = _bitshift64Lshr($100 | 0, $101 | 0, 24) | 0; //@line 5269
 HEAP8[$2 + 4 >> 0] = $126; //@line 5273
 $130 = _bitshift64Lshr($100 | 0, $101 | 0, 16) | 0; //@line 5274
 HEAP8[$2 + 5 >> 0] = $130; //@line 5278
 $134 = _bitshift64Lshr($100 | 0, $101 | 0, 8) | 0; //@line 5279
 HEAP8[$2 + 6 >> 0] = $134; //@line 5283
 HEAP8[$2 + 7 >> 0] = $100; //@line 5286
 $140 = _bitshift64Lshr($109 | 0, $110 | 0, 56) | 0; //@line 5287
 HEAP8[$2 + 8 >> 0] = $140; //@line 5291
 $144 = _bitshift64Lshr($109 | 0, $110 | 0, 48) | 0; //@line 5292
 HEAP8[$2 + 9 >> 0] = $144; //@line 5296
 $148 = _bitshift64Lshr($109 | 0, $110 | 0, 40) | 0; //@line 5297
 HEAP8[$2 + 10 >> 0] = $148; //@line 5301
 HEAP8[$2 + 11 >> 0] = $110; //@line 5304
 $154 = _bitshift64Lshr($109 | 0, $110 | 0, 24) | 0; //@line 5305
 HEAP8[$2 + 12 >> 0] = $154; //@line 5309
 $158 = _bitshift64Lshr($109 | 0, $110 | 0, 16) | 0; //@line 5310
 HEAP8[$2 + 13 >> 0] = $158; //@line 5314
 $162 = _bitshift64Lshr($109 | 0, $110 | 0, 8) | 0; //@line 5315
 HEAP8[$2 + 14 >> 0] = $162; //@line 5319
 HEAP8[$2 + 15 >> 0] = $109; //@line 5322
 return;
}
function __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$i15 = 0, $$1 = 0, $14 = 0, $16 = 0, $2 = 0, $20 = 0, $24 = 0, $28 = 0, $3 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $46 = 0, $49 = 0, $56 = 0, $58 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16647
 STACKTOP = STACKTOP + 16 | 0; //@line 16648
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16648
 $2 = sp + 1 | 0; //@line 16649
 $3 = sp; //@line 16650
 if (HEAP32[$0 + 968 >> 2] | 0) {
  $$1 = -1e3; //@line 16655
  STACKTOP = sp; //@line 16656
  return $$1 | 0; //@line 16656
 }
 $8 = HEAP8[$1 + 5 >> 0] | 0; //@line 16659
 if ($8 << 24 >> 24 > (__ZN7LoRaPHY23get_minimum_tx_datarateEv(HEAP32[$0 >> 2] | 0) | 0) << 24 >> 24) {
  $24 = $8; //@line 16664
 } else {
  $24 = __ZN7LoRaPHY23get_minimum_tx_datarateEv(HEAP32[$0 >> 2] | 0) | 0; //@line 16668
 }
 HEAP8[$3 >> 0] = 0; //@line 16670
 $14 = $0 + 288 | 0; //@line 16671
 __ZN11LoRaMacMcps18reset_confirmationEv($14); //@line 16672
 HEAP8[$0 + 895 >> 0] = 1; //@line 16674
 $16 = $0 + 894 | 0; //@line 16675
 HEAP8[$16 >> 0] = 1; //@line 16676
 switch (HEAP32[$1 >> 2] | 0) {
 case 0:
  {
   HEAP8[$3 >> 0] = 64; //@line 16680
   label = 8; //@line 16681
   break;
  }
 case 1:
  {
   HEAP8[$3 >> 0] = -128; //@line 16685
   HEAP8[$16 >> 0] = HEAP8[$1 + 6 >> 0] | 0; //@line 16688
   label = 8; //@line 16689
   break;
  }
 case 3:
  {
   HEAP8[$3 >> 0] = -32; //@line 16693
   label = 8; //@line 16694
   break;
  }
 default:
  {
   $$0 = -1003; //@line 16698
  }
 }
 do {
  if ((label | 0) == 8) {
   $20 = $0 + 1156 | 0; //@line 16703
   if (!(HEAP8[$20 >> 0] | 0)) {
    if (!(__ZN7LoRaPHY18verify_tx_datarateEhb(HEAP32[$0 >> 2] | 0, $24, 0) | 0)) {
     $$0 = -1003; //@line 16710
     break;
    }
    HEAP8[$0 + 1097 >> 0] = $24; //@line 16714
    $33 = HEAP8[$20 >> 0] << 7 & 255; //@line 16717
   } else {
    $33 = -128; //@line 16719
   }
   $28 = HEAP8[$1 + 4 >> 0] | 0; //@line 16722
   $30 = HEAP32[$1 + 8 >> 2] | 0; //@line 16724
   $32 = HEAP16[$1 + 12 >> 1] | 0; //@line 16726
   HEAP8[$2 >> 0] = $33; //@line 16727
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 16728
   $34 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($0, $3, $2, $28, $30, $32) | 0; //@line 16729
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 461; //@line 16732
    HEAP32[$AsyncCtx + 4 >> 2] = $14; //@line 16734
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 16736
    HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 16738
    HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 16740
    HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 16742
    sp = STACKTOP; //@line 16743
    STACKTOP = sp; //@line 16744
    return 0; //@line 16744
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 16746
   if (!$34) {
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($14) | 0) + 11 >> 0] = 0; //@line 16751
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($14) | 0) + 10 >> 0] = 0; //@line 16754
    $46 = HEAP32[$0 + 956 >> 2] | 0; //@line 16756
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($14) | 0) + 16 >> 2] = $46; //@line 16759
    $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 16760
    $49 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 16761
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 462; //@line 16764
     HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 16766
     HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 16768
     HEAP32[$AsyncCtx2 + 12 >> 2] = $14; //@line 16770
     HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 16772
     HEAP32[$AsyncCtx2 + 20 >> 2] = $3; //@line 16774
     sp = STACKTOP; //@line 16775
     STACKTOP = sp; //@line 16776
     return 0; //@line 16776
    }
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 16778
    if (!$49) {
     $56 = HEAP32[$1 >> 2] | 0; //@line 16781
     HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($14) | 0) >> 2] = $56; //@line 16783
     $58 = $0 + 944 | 0; //@line 16784
     HEAP8[$58 >> 0] = HEAP8[$58 >> 0] | 1; //@line 16787
     $$0 = 0; //@line 16788
     break;
    } else {
     $$0$i15 = $49; //@line 16791
    }
   } else {
    $$0$i15 = $34; //@line 16794
   }
   HEAP8[$0 + 373 >> 0] = 0; //@line 16797
   $$0 = $$0$i15; //@line 16798
  }
 } while (0);
 $$1 = $$0; //@line 16801
 STACKTOP = sp; //@line 16802
 return $$1 | 0; //@line 16802
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 20752
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20754
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 20756
 $6 = HEAP8[$0 + 9 >> 0] | 0; //@line 20758
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 20760
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 20762
 $$pre$i = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 20765
 $13 = $10 + 12 | 0; //@line 20766
 HEAP32[$13 >> 2] = $$pre$i; //@line 20767
 if (!$$pre$i) {
  $24 = $2 + 12 | 0; //@line 20770
  HEAP32[$24 >> 2] = 0; //@line 20771
  $25 = $2 + 16 | 0; //@line 20772
  HEAP8[$25 >> 0] = $4; //@line 20773
  HEAP8[$2 + 17 >> 0] = $6; //@line 20775
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 20776
  $27 = _equeue_alloc($8, 20) | 0; //@line 20777
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 222; //@line 20780
   $28 = $ReallocAsyncCtx7 + 4 | 0; //@line 20781
   HEAP32[$28 >> 2] = $13; //@line 20782
   $29 = $ReallocAsyncCtx7 + 8 | 0; //@line 20783
   HEAP32[$29 >> 2] = $10; //@line 20784
   $30 = $ReallocAsyncCtx7 + 12 | 0; //@line 20785
   HEAP32[$30 >> 2] = $2; //@line 20786
   $31 = $ReallocAsyncCtx7 + 16 | 0; //@line 20787
   HEAP32[$31 >> 2] = $24; //@line 20788
   $32 = $ReallocAsyncCtx7 + 20 | 0; //@line 20789
   HEAP32[$32 >> 2] = $24; //@line 20790
   $33 = $ReallocAsyncCtx7 + 24 | 0; //@line 20791
   HEAP32[$33 >> 2] = $25; //@line 20792
   $34 = $ReallocAsyncCtx7 + 28 | 0; //@line 20793
   HEAP32[$34 >> 2] = $8; //@line 20794
   sp = STACKTOP; //@line 20795
   return;
  }
  HEAP32[___async_retval >> 2] = $27; //@line 20799
  ___async_unwind = 0; //@line 20800
  HEAP32[$ReallocAsyncCtx7 >> 2] = 222; //@line 20801
  $28 = $ReallocAsyncCtx7 + 4 | 0; //@line 20802
  HEAP32[$28 >> 2] = $13; //@line 20803
  $29 = $ReallocAsyncCtx7 + 8 | 0; //@line 20804
  HEAP32[$29 >> 2] = $10; //@line 20805
  $30 = $ReallocAsyncCtx7 + 12 | 0; //@line 20806
  HEAP32[$30 >> 2] = $2; //@line 20807
  $31 = $ReallocAsyncCtx7 + 16 | 0; //@line 20808
  HEAP32[$31 >> 2] = $24; //@line 20809
  $32 = $ReallocAsyncCtx7 + 20 | 0; //@line 20810
  HEAP32[$32 >> 2] = $24; //@line 20811
  $33 = $ReallocAsyncCtx7 + 24 | 0; //@line 20812
  HEAP32[$33 >> 2] = $25; //@line 20813
  $34 = $ReallocAsyncCtx7 + 28 | 0; //@line 20814
  HEAP32[$34 >> 2] = $8; //@line 20815
  sp = STACKTOP; //@line 20816
  return;
 } else {
  $16 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 20821
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 20822
  FUNCTION_TABLE_vii[$16 & 31]($2, $10); //@line 20823
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 221; //@line 20826
   $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 20827
   HEAP32[$17 >> 2] = $13; //@line 20828
   $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 20829
   HEAP32[$18 >> 2] = $13; //@line 20830
   $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 20831
   HEAP32[$19 >> 2] = $2; //@line 20832
   $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 20833
   HEAP8[$20 >> 0] = $4; //@line 20834
   $21 = $ReallocAsyncCtx2 + 17 | 0; //@line 20835
   HEAP8[$21 >> 0] = $6; //@line 20836
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 20837
   HEAP32[$22 >> 2] = $8; //@line 20838
   $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 20839
   HEAP32[$23 >> 2] = $10; //@line 20840
   sp = STACKTOP; //@line 20841
   return;
  }
  ___async_unwind = 0; //@line 20844
  HEAP32[$ReallocAsyncCtx2 >> 2] = 221; //@line 20845
  $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 20846
  HEAP32[$17 >> 2] = $13; //@line 20847
  $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 20848
  HEAP32[$18 >> 2] = $13; //@line 20849
  $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 20850
  HEAP32[$19 >> 2] = $2; //@line 20851
  $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 20852
  HEAP8[$20 >> 0] = $4; //@line 20853
  $21 = $ReallocAsyncCtx2 + 17 | 0; //@line 20854
  HEAP8[$21 >> 0] = $6; //@line 20855
  $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 20856
  HEAP32[$22 >> 2] = $8; //@line 20857
  $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 20858
  HEAP32[$23 >> 2] = $10; //@line 20859
  sp = STACKTOP; //@line 20860
  return;
 }
}
function __ZN7LoRaMac21send_frame_on_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $15 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $3 = 0, $30 = 0, $33 = 0, $36 = 0, $39 = 0, $42 = 0, $45 = 0, $49 = 0, $59 = 0, $62 = 0, $65 = 0, $69 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 14526
 STACKTOP = STACKTOP + 32 | 0; //@line 14527
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 14527
 $vararg_buffer = sp; //@line 14528
 $2 = sp + 16 | 0; //@line 14529
 _mbed_tracef(16, 13704, 14061, $vararg_buffer); //@line 14530
 HEAP8[$2 >> 0] = 0; //@line 14531
 HEAP8[$vararg_buffer >> 0] = $1; //@line 14532
 $3 = $0 + 1097 | 0; //@line 14533
 HEAP8[$vararg_buffer + 1 >> 0] = HEAP8[$3 >> 0] | 0; //@line 14536
 HEAP8[$vararg_buffer + 2 >> 0] = HEAP8[$0 + 1096 >> 0] | 0; //@line 14540
 HEAP32[$vararg_buffer + 4 >> 2] = HEAP32[$0 + 1144 >> 2]; //@line 14544
 HEAP32[$vararg_buffer + 8 >> 2] = HEAP32[$0 + 1148 >> 2]; //@line 14548
 $15 = $0 + 636 | 0; //@line 14549
 HEAP16[$vararg_buffer + 12 >> 1] = HEAP16[$15 >> 1] | 0; //@line 14552
 $18 = HEAP32[$0 >> 2] | 0; //@line 14553
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 32 >> 2] | 0; //@line 14556
 $22 = $0 + 992 | 0; //@line 14557
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 14558
 FUNCTION_TABLE_iiiii[$21 & 3]($18, $vararg_buffer, $2, $22) | 0; //@line 14559
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 406; //@line 14562
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 14564
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 14566
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 14568
  HEAP32[$AsyncCtx + 16 >> 2] = $22; //@line 14570
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 14572
  HEAP32[$AsyncCtx + 24 >> 2] = $15; //@line 14574
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer; //@line 14576
  sp = STACKTOP; //@line 14577
  STACKTOP = sp; //@line 14578
  return 0; //@line 14578
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14580
 $30 = $0 + 264 | 0; //@line 14581
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($30) | 0) + 4 >> 2] = 1; //@line 14584
 $33 = $0 + 288 | 0; //@line 14585
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($33) | 0) + 4 >> 2] = 1; //@line 14588
 $36 = HEAP8[$3 >> 0] | 0; //@line 14589
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($33) | 0) + 8 >> 0] = $36; //@line 14592
 $39 = HEAP8[$2 >> 0] | 0; //@line 14593
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($33) | 0) + 9 >> 0] = $39; //@line 14596
 $42 = HEAP32[$22 >> 2] | 0; //@line 14597
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($33) | 0) + 12 >> 2] = $42; //@line 14600
 $45 = HEAP32[$22 >> 2] | 0; //@line 14601
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($30) | 0) + 8 >> 2] = $45; //@line 14604
 $49 = HEAP32[$0 + 356 >> 2] | 0; //@line 14606
 $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 14608
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($49, $0 + 996 | 0, 1e3); //@line 14609
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 407; //@line 14612
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 14614
  HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 14616
  HEAP32[$AsyncCtx2 + 12 >> 2] = $15; //@line 14618
  HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 14620
  HEAP32[$AsyncCtx2 + 20 >> 2] = $vararg_buffer; //@line 14622
  sp = STACKTOP; //@line 14623
  STACKTOP = sp; //@line 14624
  return 0; //@line 14624
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 14626
 if (!(HEAP8[$0 + 372 >> 0] | 0)) {
  $59 = $0 + 897 | 0; //@line 14631
  HEAP8[$59 >> 0] = (HEAP8[$59 >> 0] | 0) + 1 << 24 >> 24; //@line 14634
 }
 $62 = HEAP32[$0 >> 2] | 0; //@line 14636
 $65 = HEAP16[$15 >> 1] & 255; //@line 14639
 $AsyncCtx6 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14640
 __ZN7LoRaPHY11handle_sendEPhh($62, $0 + 381 | 0, $65); //@line 14641
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 408; //@line 14644
  HEAP32[$AsyncCtx6 + 4 >> 2] = $0; //@line 14646
  HEAP32[$AsyncCtx6 + 8 >> 2] = $2; //@line 14648
  HEAP32[$AsyncCtx6 + 12 >> 2] = $vararg_buffer; //@line 14650
  sp = STACKTOP; //@line 14651
  STACKTOP = sp; //@line 14652
  return 0; //@line 14652
 } else {
  _emscripten_free_async_context($AsyncCtx6 | 0); //@line 14654
  $69 = $0 + 968 | 0; //@line 14655
  HEAP32[$69 >> 2] = HEAP32[$69 >> 2] | 1; //@line 14658
  STACKTOP = sp; //@line 14659
  return 0; //@line 14659
 }
 return 0; //@line 14661
}
function __ZN12radio_eventsD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $32 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 21272
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21274
 $4 = HEAP32[$2 + 92 >> 2] | 0; //@line 21276
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 21281
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 21282
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 80 | 0); //@line 21283
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 264; //@line 21286
   $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 21287
   HEAP32[$9 >> 2] = $2; //@line 21288
   sp = STACKTOP; //@line 21289
   return;
  }
  ___async_unwind = 0; //@line 21292
  HEAP32[$ReallocAsyncCtx2 >> 2] = 264; //@line 21293
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 21294
  HEAP32[$9 >> 2] = $2; //@line 21295
  sp = STACKTOP; //@line 21296
  return;
 }
 $11 = HEAP32[$2 + 76 >> 2] | 0; //@line 21300
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 21305
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 21306
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 64 | 0); //@line 21307
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 265; //@line 21310
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 21311
   HEAP32[$16 >> 2] = $2; //@line 21312
   sp = STACKTOP; //@line 21313
   return;
  }
  ___async_unwind = 0; //@line 21316
  HEAP32[$ReallocAsyncCtx3 >> 2] = 265; //@line 21317
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 21318
  HEAP32[$16 >> 2] = $2; //@line 21319
  sp = STACKTOP; //@line 21320
  return;
 }
 $18 = HEAP32[$2 + 60 >> 2] | 0; //@line 21324
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 21329
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 21330
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 48 | 0); //@line 21331
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 266; //@line 21334
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 21335
   HEAP32[$23 >> 2] = $2; //@line 21336
   sp = STACKTOP; //@line 21337
   return;
  }
  ___async_unwind = 0; //@line 21340
  HEAP32[$ReallocAsyncCtx4 >> 2] = 266; //@line 21341
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 21342
  HEAP32[$23 >> 2] = $2; //@line 21343
  sp = STACKTOP; //@line 21344
  return;
 }
 $25 = HEAP32[$2 + 44 >> 2] | 0; //@line 21348
 if ($25 | 0) {
  $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 21353
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 21354
  FUNCTION_TABLE_vi[$29 & 1023]($2 + 32 | 0); //@line 21355
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 267; //@line 21358
   $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 21359
   HEAP32[$30 >> 2] = $2; //@line 21360
   sp = STACKTOP; //@line 21361
   return;
  }
  ___async_unwind = 0; //@line 21364
  HEAP32[$ReallocAsyncCtx5 >> 2] = 267; //@line 21365
  $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 21366
  HEAP32[$30 >> 2] = $2; //@line 21367
  sp = STACKTOP; //@line 21368
  return;
 }
 $32 = HEAP32[$2 + 28 >> 2] | 0; //@line 21372
 if ($32 | 0) {
  $36 = HEAP32[$32 + 8 >> 2] | 0; //@line 21377
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 21378
  FUNCTION_TABLE_vi[$36 & 1023]($2 + 16 | 0); //@line 21379
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 268; //@line 21382
   $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 21383
   HEAP32[$37 >> 2] = $2; //@line 21384
   sp = STACKTOP; //@line 21385
   return;
  }
  ___async_unwind = 0; //@line 21388
  HEAP32[$ReallocAsyncCtx6 >> 2] = 268; //@line 21389
  $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 21390
  HEAP32[$37 >> 2] = $2; //@line 21391
  sp = STACKTOP; //@line 21392
  return;
 }
 $39 = HEAP32[$2 + 12 >> 2] | 0; //@line 21396
 if (!$39) {
  return;
 }
 $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 21402
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 21403
 FUNCTION_TABLE_vi[$42 & 1023]($2); //@line 21404
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 269; //@line 21407
  sp = STACKTOP; //@line 21408
  return;
 }
 ___async_unwind = 0; //@line 21411
 HEAP32[$ReallocAsyncCtx7 >> 2] = 269; //@line 21412
 sp = STACKTOP; //@line 21413
 return;
}
function _initialize__async_cb_261($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 16502
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16504
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16506
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16508
 $10 = HEAP32[(HEAP32[$0 + 16 >> 2] | 0) + 4 >> 2] | 0; //@line 16512
 if (($10 + -4 | 0) >>> 0 > 28) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 16516
  _mbed_assert_internal(15107, 15109, 47); //@line 16517
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 600; //@line 16520
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 16521
   HEAP32[$12 >> 2] = 1e6; //@line 16522
   $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 16523
   HEAP32[$13 >> 2] = $4; //@line 16524
   $14 = $ReallocAsyncCtx6 + 12 | 0; //@line 16525
   HEAP32[$14 >> 2] = $6; //@line 16526
   $15 = $ReallocAsyncCtx6 + 16 | 0; //@line 16527
   HEAP32[$15 >> 2] = $2; //@line 16528
   sp = STACKTOP; //@line 16529
   return;
  }
  ___async_unwind = 0; //@line 16532
  HEAP32[$ReallocAsyncCtx6 >> 2] = 600; //@line 16533
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 16534
  HEAP32[$12 >> 2] = 1e6; //@line 16535
  $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 16536
  HEAP32[$13 >> 2] = $4; //@line 16537
  $14 = $ReallocAsyncCtx6 + 12 | 0; //@line 16538
  HEAP32[$14 >> 2] = $6; //@line 16539
  $15 = $ReallocAsyncCtx6 + 16 | 0; //@line 16540
  HEAP32[$15 >> 2] = $2; //@line 16541
  sp = STACKTOP; //@line 16542
  return;
 } else {
  $17 = 7 << $10 + -4; //@line 16546
  $18 = ___muldi3($17 | 0, 0, 1e6, 0) | 0; //@line 16547
  $19 = tempRet0; //@line 16548
  $20 = _i64Add(1e6, 0, -1, -1) | 0; //@line 16549
  $22 = _i64Add($20 | 0, tempRet0 | 0, $18 | 0, $19 | 0) | 0; //@line 16551
  $24 = ___udivdi3($22 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 16553
  $25 = tempRet0; //@line 16554
  $26 = HEAP32[$4 >> 2] | 0; //@line 16555
  HEAP32[$26 >> 2] = 0; //@line 16556
  HEAP32[$26 + 4 >> 2] = 0; //@line 16558
  $30 = HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0; //@line 16561
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 16562
  $31 = FUNCTION_TABLE_i[$30 & 7]() | 0; //@line 16563
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 601; //@line 16566
   $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 16567
   HEAP32[$32 >> 2] = $4; //@line 16568
   $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 16569
   HEAP32[$33 >> 2] = 1e6; //@line 16570
   $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 16571
   HEAP32[$34 >> 2] = $10; //@line 16572
   $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 16573
   HEAP32[$35 >> 2] = $17; //@line 16574
   $36 = $ReallocAsyncCtx3 + 24 | 0; //@line 16575
   $37 = $36; //@line 16576
   $38 = $37; //@line 16577
   HEAP32[$38 >> 2] = $24; //@line 16578
   $39 = $37 + 4 | 0; //@line 16579
   $40 = $39; //@line 16580
   HEAP32[$40 >> 2] = $25; //@line 16581
   $41 = $ReallocAsyncCtx3 + 32 | 0; //@line 16582
   HEAP32[$41 >> 2] = $6; //@line 16583
   $42 = $ReallocAsyncCtx3 + 36 | 0; //@line 16584
   HEAP32[$42 >> 2] = $2; //@line 16585
   sp = STACKTOP; //@line 16586
   return;
  }
  HEAP32[___async_retval >> 2] = $31; //@line 16590
  ___async_unwind = 0; //@line 16591
  HEAP32[$ReallocAsyncCtx3 >> 2] = 601; //@line 16592
  $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 16593
  HEAP32[$32 >> 2] = $4; //@line 16594
  $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 16595
  HEAP32[$33 >> 2] = 1e6; //@line 16596
  $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 16597
  HEAP32[$34 >> 2] = $10; //@line 16598
  $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 16599
  HEAP32[$35 >> 2] = $17; //@line 16600
  $36 = $ReallocAsyncCtx3 + 24 | 0; //@line 16601
  $37 = $36; //@line 16602
  $38 = $37; //@line 16603
  HEAP32[$38 >> 2] = $24; //@line 16604
  $39 = $37 + 4 | 0; //@line 16605
  $40 = $39; //@line 16606
  HEAP32[$40 >> 2] = $25; //@line 16607
  $41 = $ReallocAsyncCtx3 + 32 | 0; //@line 16608
  HEAP32[$41 >> 2] = $6; //@line 16609
  $42 = $ReallocAsyncCtx3 + 36 | 0; //@line 16610
  HEAP32[$42 >> 2] = $2; //@line 16611
  sp = STACKTOP; //@line 16612
  return;
 }
}
function _mbedtls_aes_setkey_dec($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$02$i$i = 0, $$031$i$i = 0, $$043$lcssa = 0, $$04353 = 0, $$04555$in = 0, $$051 = 0, $$054 = 0, $$pn$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $128 = 0, $13 = 0, $16 = 0, $19 = 0, $22 = 0, $24 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $64 = 0, $8 = 0, $96 = 0, sp = 0, $$04353$looptemp = 0;
 sp = STACKTOP; //@line 806
 STACKTOP = STACKTOP + 288 | 0; //@line 807
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288); //@line 807
 $3 = sp; //@line 808
 _memset($3 | 0, 0, 280) | 0; //@line 809
 $4 = $0 + 8 | 0; //@line 810
 HEAP32[$0 + 4 >> 2] = $4; //@line 812
 $6 = _mbedtls_aes_setkey_enc($3, $1, $2) | 0; //@line 813
 if (!$6) {
  $8 = HEAP32[$3 >> 2] | 0; //@line 816
  HEAP32[$0 >> 2] = $8; //@line 817
  $10 = HEAP32[$3 + 4 >> 2] | 0; //@line 819
  $11 = $8 << 2; //@line 820
  $12 = $10 + ($11 << 2) | 0; //@line 821
  $13 = $12 + 4 | 0; //@line 822
  HEAP32[$4 >> 2] = HEAP32[$12 >> 2]; //@line 825
  $16 = $13 + 4 | 0; //@line 826
  HEAP32[$0 + 12 >> 2] = HEAP32[$13 >> 2]; //@line 829
  $19 = $16 + 4 | 0; //@line 830
  HEAP32[$0 + 16 >> 2] = HEAP32[$16 >> 2]; //@line 833
  $22 = $19 + 4 | 0; //@line 834
  $24 = $0 + 24 | 0; //@line 836
  HEAP32[$0 + 20 >> 2] = HEAP32[$19 >> 2]; //@line 837
  $$051 = $22 + -32 | 0; //@line 838
  if (($8 | 0) > 1) {
   $26 = ~$8; //@line 841
   $31 = $11 + -4 - ($8 + (($26 | 0) > -3 ? $26 : -3) << 2) | 0; //@line 847
   $$04353 = $24; //@line 848
   $$04555$in = $8; //@line 848
   $$054 = $$051; //@line 848
   while (1) {
    $$04353$looptemp = $$04353;
    $$04353 = $$04353 + 16 | 0; //@line 851
    $32 = HEAP32[$$054 >> 2] | 0; //@line 852
    HEAP32[$$04353$looptemp >> 2] = HEAP32[2388 + ((HEAPU8[14451 + ($32 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1364 + ((HEAPU8[14451 + ($32 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3412 + ((HEAPU8[14451 + ($32 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4436 + ((HEAPU8[14451 + ($32 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 883
    $64 = HEAP32[$$054 + 4 >> 2] | 0; //@line 885
    HEAP32[$$04353$looptemp + 4 >> 2] = HEAP32[2388 + ((HEAPU8[14451 + ($64 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1364 + ((HEAPU8[14451 + ($64 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3412 + ((HEAPU8[14451 + ($64 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4436 + ((HEAPU8[14451 + ($64 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 916
    $96 = HEAP32[$$054 + 8 >> 2] | 0; //@line 918
    HEAP32[$$04353$looptemp + 8 >> 2] = HEAP32[2388 + ((HEAPU8[14451 + ($96 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1364 + ((HEAPU8[14451 + ($96 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3412 + ((HEAPU8[14451 + ($96 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4436 + ((HEAPU8[14451 + ($96 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 949
    $128 = HEAP32[$$054 + 12 >> 2] | 0; //@line 951
    HEAP32[$$04353$looptemp + 12 >> 2] = HEAP32[2388 + ((HEAPU8[14451 + ($128 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1364 + ((HEAPU8[14451 + ($128 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3412 + ((HEAPU8[14451 + ($128 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4436 + ((HEAPU8[14451 + ($128 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 981
    $$054 = $$054 + -16 | 0; //@line 982
    if (($$04555$in | 0) <= 2) {
     break;
    } else {
     $$04555$in = $$04555$in + -1 | 0; //@line 985
    }
   }
   $$0$lcssa = $$054; //@line 991
   $$043$lcssa = $$04353; //@line 991
   $$pn$lcssa = $10 + ($31 << 2) | 0; //@line 991
  } else {
   $$0$lcssa = $$051; //@line 993
   $$043$lcssa = $24; //@line 993
   $$pn$lcssa = $22; //@line 993
  }
  HEAP32[$$043$lcssa >> 2] = HEAP32[$$0$lcssa >> 2]; //@line 998
  HEAP32[$$043$lcssa + 4 >> 2] = HEAP32[$$pn$lcssa + -28 >> 2]; //@line 1002
  HEAP32[$$043$lcssa + 8 >> 2] = HEAP32[$$pn$lcssa + -24 >> 2]; //@line 1006
  HEAP32[$$043$lcssa + 12 >> 2] = HEAP32[$$pn$lcssa + -20 >> 2]; //@line 1008
  $$02$i$i = $3; //@line 1009
  $$031$i$i = 280; //@line 1009
 } else {
  $$02$i$i = $3; //@line 1011
  $$031$i$i = 280; //@line 1011
 }
 while (1) {
  $$031$i$i = $$031$i$i + -1 | 0; //@line 1014
  HEAP8[$$02$i$i >> 0] = 0; //@line 1016
  if (!$$031$i$i) {
   break;
  } else {
   $$02$i$i = $$02$i$i + 1 | 0; //@line 1021
  }
 }
 STACKTOP = sp; //@line 1024
 return $6 | 0; //@line 1024
}
function _mbedtls_cipher_cmac_update__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$09$i75 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $27 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $53 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 30369
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30371
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30373
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30375
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30377
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30379
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30381
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30383
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30385
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 30387
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 30389
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 30391
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30393
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 30396
  $53 = ___async_retval; //@line 30397
  HEAP32[$53 >> 2] = $$0; //@line 30398
  return;
 }
 $33 = $2 - $4 | 0; //@line 30401
 $25 = $6 + $4 | 0; //@line 30402
 $37 = $8 + 1 | 0; //@line 30403
 if ($37 >>> 0 >= $10 >>> 0) {
  if (!$33) {
   $$0 = 0; //@line 30408
   $53 = ___async_retval; //@line 30409
   HEAP32[$53 >> 2] = $$0; //@line 30410
   return;
  }
  _memcpy((HEAP32[$14 >> 2] | 0) + ($16 + 16) | 0, $25 | 0, $33 | 0) | 0; //@line 30415
  HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + $33; //@line 30418
  $$0 = 0; //@line 30419
  $53 = ___async_retval; //@line 30420
  HEAP32[$53 >> 2] = $$0; //@line 30421
  return;
 }
 $$09$i75 = 0; //@line 30424
 do {
  $27 = $16 + $$09$i75 | 0; //@line 30428
  HEAP8[$27 >> 0] = HEAP8[$27 >> 0] ^ HEAP8[$25 + $$09$i75 >> 0]; //@line 30431
  $$09$i75 = $$09$i75 + 1 | 0; //@line 30432
 } while (($$09$i75 | 0) != ($4 | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 30440
 $31 = _mbedtls_cipher_update($18, $20, $4, $20, $22) | 0; //@line 30441
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 587; //@line 30444
  $32 = $ReallocAsyncCtx + 4 | 0; //@line 30445
  HEAP32[$32 >> 2] = $33; //@line 30446
  $34 = $ReallocAsyncCtx + 8 | 0; //@line 30447
  HEAP32[$34 >> 2] = $4; //@line 30448
  $35 = $ReallocAsyncCtx + 12 | 0; //@line 30449
  HEAP32[$35 >> 2] = $25; //@line 30450
  $36 = $ReallocAsyncCtx + 16 | 0; //@line 30451
  HEAP32[$36 >> 2] = $37; //@line 30452
  $38 = $ReallocAsyncCtx + 20 | 0; //@line 30453
  HEAP32[$38 >> 2] = $10; //@line 30454
  $39 = $ReallocAsyncCtx + 24 | 0; //@line 30455
  HEAP32[$39 >> 2] = $12; //@line 30456
  $40 = $ReallocAsyncCtx + 28 | 0; //@line 30457
  HEAP32[$40 >> 2] = $14; //@line 30458
  $41 = $ReallocAsyncCtx + 32 | 0; //@line 30459
  HEAP32[$41 >> 2] = $16; //@line 30460
  $42 = $ReallocAsyncCtx + 36 | 0; //@line 30461
  HEAP32[$42 >> 2] = $18; //@line 30462
  $43 = $ReallocAsyncCtx + 40 | 0; //@line 30463
  HEAP32[$43 >> 2] = $20; //@line 30464
  $44 = $ReallocAsyncCtx + 44 | 0; //@line 30465
  HEAP32[$44 >> 2] = $22; //@line 30466
  sp = STACKTOP; //@line 30467
  return;
 }
 HEAP32[___async_retval >> 2] = $31; //@line 30471
 ___async_unwind = 0; //@line 30472
 HEAP32[$ReallocAsyncCtx >> 2] = 587; //@line 30473
 $32 = $ReallocAsyncCtx + 4 | 0; //@line 30474
 HEAP32[$32 >> 2] = $33; //@line 30475
 $34 = $ReallocAsyncCtx + 8 | 0; //@line 30476
 HEAP32[$34 >> 2] = $4; //@line 30477
 $35 = $ReallocAsyncCtx + 12 | 0; //@line 30478
 HEAP32[$35 >> 2] = $25; //@line 30479
 $36 = $ReallocAsyncCtx + 16 | 0; //@line 30480
 HEAP32[$36 >> 2] = $37; //@line 30481
 $38 = $ReallocAsyncCtx + 20 | 0; //@line 30482
 HEAP32[$38 >> 2] = $10; //@line 30483
 $39 = $ReallocAsyncCtx + 24 | 0; //@line 30484
 HEAP32[$39 >> 2] = $12; //@line 30485
 $40 = $ReallocAsyncCtx + 28 | 0; //@line 30486
 HEAP32[$40 >> 2] = $14; //@line 30487
 $41 = $ReallocAsyncCtx + 32 | 0; //@line 30488
 HEAP32[$41 >> 2] = $16; //@line 30489
 $42 = $ReallocAsyncCtx + 36 | 0; //@line 30490
 HEAP32[$42 >> 2] = $18; //@line 30491
 $43 = $ReallocAsyncCtx + 40 | 0; //@line 30492
 HEAP32[$43 >> 2] = $20; //@line 30493
 $44 = $ReallocAsyncCtx + 44 | 0; //@line 30494
 HEAP32[$44 >> 2] = $22; //@line 30495
 sp = STACKTOP; //@line 30496
 return;
}
function _mbedtls_gcm_update($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$05966 = 0, $$06065 = 0, $$061 = 0, $$06264 = 0, $$163 = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $30 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $46 = 0, $5 = 0, $67 = 0, $68 = 0, $75 = 0, $83 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5335
 STACKTOP = STACKTOP + 32 | 0; //@line 5336
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 5336
 $4 = sp + 8 | 0; //@line 5337
 $5 = sp; //@line 5338
 HEAP32[$5 >> 2] = 0; //@line 5339
 if ($3 >>> 0 > $2 >>> 0) {
  if (($3 - $2 | 0) >>> 0 < $1 >>> 0) {
   $$0 = -20; //@line 5347
   STACKTOP = sp; //@line 5348
   return $$0 | 0; //@line 5348
  }
 }
 $11 = $0 + 328 | 0; //@line 5351
 $12 = $11; //@line 5352
 $14 = HEAP32[$12 >> 2] | 0; //@line 5354
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 5357
 $18 = _i64Add($14 | 0, $17 | 0, $1 | 0, 0) | 0; //@line 5358
 $19 = tempRet0; //@line 5359
 if ($19 >>> 0 < $17 >>> 0 | ($19 | 0) == ($17 | 0) & $18 >>> 0 < $14 >>> 0 | ($19 >>> 0 > 15 | ($19 | 0) == 15 & $18 >>> 0 > 4294967264)) {
  $$0 = -20; //@line 5372
  STACKTOP = sp; //@line 5373
  return $$0 | 0; //@line 5373
 }
 $30 = $11; //@line 5375
 HEAP32[$30 >> 2] = $18; //@line 5377
 HEAP32[$30 + 4 >> 2] = $19; //@line 5380
 if (!$1) {
  $$0 = 0; //@line 5383
  STACKTOP = sp; //@line 5384
  return $$0 | 0; //@line 5384
 }
 $35 = $0 + 360 | 0; //@line 5386
 $36 = $0 + 376 | 0; //@line 5387
 $37 = $0 + 392 | 0; //@line 5388
 $$05966 = $3; //@line 5389
 $$06065 = $2; //@line 5389
 $$06264 = $1; //@line 5389
 while (1) {
  $39 = $$06264 >>> 0 < 16 ? $$06264 : 16; //@line 5392
  $$061 = 16; //@line 5393
  do {
   if ($$061 >>> 0 <= 12) {
    break;
   }
   $$061 = $$061 + -1 | 0; //@line 5399
   $42 = $0 + 360 + $$061 | 0; //@line 5400
   $44 = (HEAP8[$42 >> 0] | 0) + 1 << 24 >> 24; //@line 5402
   HEAP8[$42 >> 0] = $44; //@line 5403
  } while (!($44 << 24 >> 24));
  $AsyncCtx = _emscripten_alloc_async_context(68, sp) | 0; //@line 5411
  $46 = _mbedtls_cipher_update($0, $35, 16, $4, $5) | 0; //@line 5412
  if (___async) {
   label = 10; //@line 5415
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5418
  if ($46 | 0) {
   $$0 = $46; //@line 5421
   label = 19; //@line 5422
   break;
  }
  if ($39 | 0) {
   $$163 = 0; //@line 5427
   do {
    $67 = $0 + 376 + $$163 | 0; //@line 5431
    $68 = $$06065 + $$163 | 0; //@line 5432
    if (!(HEAP32[$37 >> 2] | 0)) {
     HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ HEAP8[$68 >> 0]; //@line 5437
    }
    $75 = HEAP8[$68 >> 0] ^ HEAP8[$4 + $$163 >> 0]; //@line 5442
    HEAP8[$$05966 + $$163 >> 0] = $75; //@line 5444
    if ((HEAP32[$37 >> 2] | 0) == 1) {
     HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ $75; //@line 5450
    }
    $$163 = $$163 + 1 | 0; //@line 5452
   } while ($$163 >>> 0 < $39 >>> 0);
  }
  _gcm_mult($0, $36, $36); //@line 5461
  $83 = $$06264 - $39 | 0; //@line 5462
  if (!$83) {
   $$0 = 0; //@line 5467
   label = 19; //@line 5468
   break;
  } else {
   $$05966 = $$05966 + $39 | 0; //@line 5471
   $$06065 = $$06065 + $39 | 0; //@line 5471
   $$06264 = $83; //@line 5471
  }
 }
 if ((label | 0) == 10) {
  HEAP32[$AsyncCtx >> 2] = 594; //@line 5475
  HEAP32[$AsyncCtx + 4 >> 2] = $39; //@line 5477
  HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 5479
  HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 5481
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 5483
  HEAP32[$AsyncCtx + 20 >> 2] = $36; //@line 5485
  HEAP32[$AsyncCtx + 24 >> 2] = $$06264; //@line 5487
  HEAP32[$AsyncCtx + 28 >> 2] = $$06065; //@line 5489
  HEAP32[$AsyncCtx + 32 >> 2] = $$05966; //@line 5491
  HEAP32[$AsyncCtx + 36 >> 2] = $37; //@line 5493
  HEAP32[$AsyncCtx + 40 >> 2] = $4; //@line 5495
  HEAP32[$AsyncCtx + 44 >> 2] = $3; //@line 5497
  HEAP32[$AsyncCtx + 48 >> 2] = $2; //@line 5499
  HEAP32[$AsyncCtx + 52 >> 2] = $1; //@line 5501
  HEAP32[$AsyncCtx + 56 >> 2] = $0; //@line 5503
  HEAP32[$AsyncCtx + 60 >> 2] = $35; //@line 5505
  HEAP32[$AsyncCtx + 64 >> 2] = $5; //@line 5507
  sp = STACKTOP; //@line 5508
  STACKTOP = sp; //@line 5509
  return 0; //@line 5509
 } else if ((label | 0) == 19) {
  STACKTOP = sp; //@line 5512
  return $$0 | 0; //@line 5512
 }
 return 0; //@line 5514
}
function __ZN7LoRaMac17on_radio_rx_errorEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $16 = 0, $20 = 0, $27 = 0, $31 = 0, $35 = 0, $44 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12383
 STACKTOP = STACKTOP + 16 | 0; //@line 12384
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12384
 $$byval_copy = sp + 8 | 0; //@line 12385
 $vararg_buffer = sp; //@line 12386
 _mbed_tracef(16, 13704, 13924, $vararg_buffer); //@line 12387
 do {
  if ((HEAP32[$0 + 360 >> 2] | 0) == 2) {
   _mbed_tracef(16, 13704, 13723, $$byval_copy); //@line 12393
   $5 = HEAP32[$0 + 1328 >> 2] | 0; //@line 12395
   HEAP32[$vararg_buffer >> 2] = 279; //@line 12396
   HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 12398
   $AsyncCtx5 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12399
   HEAP32[$$byval_copy >> 2] = HEAP32[$vararg_buffer >> 2]; //@line 12400
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$vararg_buffer + 4 >> 2]; //@line 12400
   $6 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($5, $0, $$byval_copy) | 0; //@line 12401
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 356; //@line 12404
    HEAP32[$AsyncCtx5 + 4 >> 2] = $vararg_buffer; //@line 12406
    HEAP32[$AsyncCtx5 + 8 >> 2] = $0; //@line 12408
    sp = STACKTOP; //@line 12409
    STACKTOP = sp; //@line 12410
    return;
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 12412
   do {
    if (!$6) {
     $AsyncCtx13 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12416
     _mbed_assert_internal(13588, 13597, 215); //@line 12417
     if (___async) {
      HEAP32[$AsyncCtx13 >> 2] = 357; //@line 12420
      HEAP32[$AsyncCtx13 + 4 >> 2] = $vararg_buffer; //@line 12422
      HEAP32[$AsyncCtx13 + 8 >> 2] = $0; //@line 12424
      sp = STACKTOP; //@line 12425
      STACKTOP = sp; //@line 12426
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx13 | 0); //@line 12428
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 12434
   if (!(HEAP8[$0 + 373 >> 0] | 0)) {
    label = 20; //@line 12439
   } else {
    label = 19; //@line 12441
   }
  } else {
   $16 = HEAP32[$0 >> 2] | 0; //@line 12444
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 12445
   __ZN7LoRaPHY18put_radio_to_sleepEv($16); //@line 12446
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 358; //@line 12449
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 12451
    sp = STACKTOP; //@line 12452
    STACKTOP = sp; //@line 12453
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 12455
   $20 = (HEAP8[$0 + 373 >> 0] | 0) != 0; //@line 12461
   if (HEAP32[$0 + 364 >> 2] | 0) {
    if ($20) {
     label = 19; //@line 12464
     break;
    } else {
     label = 20; //@line 12467
     break;
    }
   }
   if ($20) {
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 5; //@line 12475
   }
   HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 5; //@line 12480
   $27 = $0 + 356 | 0; //@line 12481
   $31 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$27 >> 2] | 0, HEAP32[$0 + 980 >> 2] | 0) | 0; //@line 12485
   if ($31 >>> 0 < (HEAP32[$0 + 976 >> 2] | 0) >>> 0) {
    STACKTOP = sp; //@line 12490
    return;
   }
   $35 = HEAP32[$27 >> 2] | 0; //@line 12492
   $AsyncCtx9 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12494
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($35, $0 + 1056 | 0); //@line 12495
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 359; //@line 12498
    HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 12500
    sp = STACKTOP; //@line 12501
    STACKTOP = sp; //@line 12502
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 12504
    break;
   }
  }
 } while (0);
 if ((label | 0) == 19) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 6; //@line 12513
  label = 20; //@line 12514
 }
 if ((label | 0) == 20) {
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 6; //@line 12520
 }
 $44 = $0 + 944 | 0; //@line 12522
 HEAP8[$44 >> 0] = HEAP8[$44 >> 0] | 32; //@line 12525
 STACKTOP = sp; //@line 12526
 return;
}
function __Z11compute_micPKhtS0_jhjPj($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $22 = 0, $24 = 0, $26 = 0, $32 = 0, $37 = 0, $42 = 0, $45 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 19638
 HEAP8[14222] = $4; //@line 19639
 HEAP8[14223] = $3; //@line 19641
 HEAP8[14224] = $3 >>> 8; //@line 19644
 HEAP8[14225] = $3 >>> 16; //@line 19647
 HEAP8[14226] = $3 >>> 24; //@line 19650
 HEAP8[14227] = $5; //@line 19652
 HEAP8[14228] = $5 >>> 8; //@line 19655
 HEAP8[14229] = $5 >>> 16; //@line 19658
 HEAP8[14230] = $5 >>> 24; //@line 19661
 $22 = $1 & 255; //@line 19663
 HEAP8[14232] = $1; //@line 19665
 _mbedtls_cipher_init(22460); //@line 19666
 $24 = _mbedtls_cipher_info_from_type(2) | 0; //@line 19667
 if (!$24) {
  $$0 = -24960; //@line 19670
 } else {
  $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 19672
  $26 = _mbedtls_cipher_setup(22460, $24) | 0; //@line 19673
  if (___async) {
   HEAP32[$AsyncCtx15 >> 2] = 495; //@line 19676
   HEAP32[$AsyncCtx15 + 4 >> 2] = $2; //@line 19678
   HEAP32[$AsyncCtx15 + 8 >> 2] = $6; //@line 19680
   HEAP32[$AsyncCtx15 + 12 >> 2] = $0; //@line 19682
   HEAP32[$AsyncCtx15 + 16 >> 2] = $22; //@line 19684
   sp = STACKTOP; //@line 19685
   return 0; //@line 19686
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 19688
  if (!$26) {
   $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 19691
   $32 = _mbedtls_cipher_cmac_starts(22460, $2, 128) | 0; //@line 19692
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 496; //@line 19695
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 19697
    HEAP32[$AsyncCtx11 + 8 >> 2] = $22; //@line 19699
    HEAP32[$AsyncCtx11 + 12 >> 2] = $6; //@line 19701
    sp = STACKTOP; //@line 19702
    return 0; //@line 19703
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 19705
   if (!$32) {
    $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 19708
    $37 = _mbedtls_cipher_cmac_update(22460, 14217, 16) | 0; //@line 19709
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 497; //@line 19712
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 19714
     HEAP32[$AsyncCtx3 + 8 >> 2] = $22; //@line 19716
     HEAP32[$AsyncCtx3 + 12 >> 2] = $6; //@line 19718
     sp = STACKTOP; //@line 19719
     return 0; //@line 19720
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 19722
    if (!$37) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 19725
     $42 = _mbedtls_cipher_cmac_update(22460, $0, $22) | 0; //@line 19726
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 498; //@line 19729
      HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 19731
      sp = STACKTOP; //@line 19732
      return 0; //@line 19733
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 19735
     if (!$42) {
      $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19738
      $45 = _mbedtls_cipher_cmac_finish(22460, 23772) | 0; //@line 19739
      if (___async) {
       HEAP32[$AsyncCtx7 >> 2] = 499; //@line 19742
       HEAP32[$AsyncCtx7 + 4 >> 2] = $6; //@line 19744
       sp = STACKTOP; //@line 19745
       return 0; //@line 19746
      }
      _emscripten_free_async_context($AsyncCtx7 | 0); //@line 19748
      if (!$45) {
       HEAP32[$6 >> 2] = (HEAPU8[23774] | 0) << 16 | (HEAPU8[23775] | 0) << 24 | (HEAPU8[23773] | 0) << 8 | (HEAPU8[23772] | 0); //@line 19765
       $$0 = 0; //@line 19766
      } else {
       $$0 = $45; //@line 19768
      }
     } else {
      $$0 = $42; //@line 19771
     }
    } else {
     $$0 = $37; //@line 19774
    }
   } else {
    $$0 = $32; //@line 19777
   }
  } else {
   $$0 = $26; //@line 19780
  }
 }
 $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19783
 _mbedtls_cipher_free(22460); //@line 19784
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 500; //@line 19787
  HEAP32[$AsyncCtx19 + 4 >> 2] = $$0; //@line 19789
  sp = STACKTOP; //@line 19790
  return 0; //@line 19791
 } else {
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 19793
  return $$0 | 0; //@line 19794
 }
 return 0; //@line 19796
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_25($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 18880
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18882
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18884
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18886
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18888
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18890
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18894
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18896
 $17 = HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0; //@line 18897
 if (!$17) {
  $27 = HEAP32[$2 >> 2] | 0; //@line 18900
  $29 = $16 + 12 | 0; //@line 18902
  HEAP32[$16 >> 2] = 432; //@line 18903
  HEAP32[$16 + 4 >> 2] = 0; //@line 18905
  HEAP32[$16 + 8 >> 2] = $4; //@line 18907
  HEAP32[$29 >> 2] = 912; //@line 18908
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 18909
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($27, $4 + 1016 | 0, $16); //@line 18910
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 433; //@line 18913
   $30 = $ReallocAsyncCtx9 + 4 | 0; //@line 18914
   HEAP32[$30 >> 2] = $2; //@line 18915
   $31 = $ReallocAsyncCtx9 + 8 | 0; //@line 18916
   HEAP32[$31 >> 2] = $4; //@line 18917
   $32 = $ReallocAsyncCtx9 + 12 | 0; //@line 18918
   HEAP32[$32 >> 2] = $6; //@line 18919
   $33 = $ReallocAsyncCtx9 + 16 | 0; //@line 18920
   HEAP32[$33 >> 2] = $8; //@line 18921
   $34 = $ReallocAsyncCtx9 + 20 | 0; //@line 18922
   HEAP32[$34 >> 2] = $14; //@line 18923
   $35 = $ReallocAsyncCtx9 + 24 | 0; //@line 18924
   HEAP32[$35 >> 2] = $16; //@line 18925
   $36 = $ReallocAsyncCtx9 + 28 | 0; //@line 18926
   HEAP32[$36 >> 2] = $29; //@line 18927
   sp = STACKTOP; //@line 18928
   return;
  }
  ___async_unwind = 0; //@line 18931
  HEAP32[$ReallocAsyncCtx9 >> 2] = 433; //@line 18932
  $30 = $ReallocAsyncCtx9 + 4 | 0; //@line 18933
  HEAP32[$30 >> 2] = $2; //@line 18934
  $31 = $ReallocAsyncCtx9 + 8 | 0; //@line 18935
  HEAP32[$31 >> 2] = $4; //@line 18936
  $32 = $ReallocAsyncCtx9 + 12 | 0; //@line 18937
  HEAP32[$32 >> 2] = $6; //@line 18938
  $33 = $ReallocAsyncCtx9 + 16 | 0; //@line 18939
  HEAP32[$33 >> 2] = $8; //@line 18940
  $34 = $ReallocAsyncCtx9 + 20 | 0; //@line 18941
  HEAP32[$34 >> 2] = $14; //@line 18942
  $35 = $ReallocAsyncCtx9 + 24 | 0; //@line 18943
  HEAP32[$35 >> 2] = $16; //@line 18944
  $36 = $ReallocAsyncCtx9 + 28 | 0; //@line 18945
  HEAP32[$36 >> 2] = $29; //@line 18946
  sp = STACKTOP; //@line 18947
  return;
 } else {
  $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 18951
  $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 18952
  FUNCTION_TABLE_vi[$20 & 1023]($10); //@line 18953
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 431; //@line 18956
   $21 = $ReallocAsyncCtx + 4 | 0; //@line 18957
   HEAP32[$21 >> 2] = $2; //@line 18958
   $22 = $ReallocAsyncCtx + 8 | 0; //@line 18959
   HEAP32[$22 >> 2] = $4; //@line 18960
   $23 = $ReallocAsyncCtx + 12 | 0; //@line 18961
   HEAP32[$23 >> 2] = $8; //@line 18962
   $24 = $ReallocAsyncCtx + 16 | 0; //@line 18963
   HEAP32[$24 >> 2] = $6; //@line 18964
   $25 = $ReallocAsyncCtx + 20 | 0; //@line 18965
   HEAP32[$25 >> 2] = $16; //@line 18966
   $26 = $ReallocAsyncCtx + 24 | 0; //@line 18967
   HEAP32[$26 >> 2] = $14; //@line 18968
   sp = STACKTOP; //@line 18969
   return;
  }
  ___async_unwind = 0; //@line 18972
  HEAP32[$ReallocAsyncCtx >> 2] = 431; //@line 18973
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 18974
  HEAP32[$21 >> 2] = $2; //@line 18975
  $22 = $ReallocAsyncCtx + 8 | 0; //@line 18976
  HEAP32[$22 >> 2] = $4; //@line 18977
  $23 = $ReallocAsyncCtx + 12 | 0; //@line 18978
  HEAP32[$23 >> 2] = $8; //@line 18979
  $24 = $ReallocAsyncCtx + 16 | 0; //@line 18980
  HEAP32[$24 >> 2] = $6; //@line 18981
  $25 = $ReallocAsyncCtx + 20 | 0; //@line 18982
  HEAP32[$25 >> 2] = $16; //@line 18983
  $26 = $ReallocAsyncCtx + 24 | 0; //@line 18984
  HEAP32[$26 >> 2] = $14; //@line 18985
  sp = STACKTOP; //@line 18986
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_207($0) {
 $0 = $0 | 0;
 var $$pre12 = 0, $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 12206
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12208
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12210
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12212
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12214
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12216
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12218
 $$pre12 = HEAP32[$2 >> 2] | 0; //@line 12219
 if ($$pre12 | 0) {
  $15 = HEAP32[$$pre12 + 4 >> 2] | 0; //@line 12223
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 12224
  FUNCTION_TABLE_vii[$15 & 31]($6, $8); //@line 12225
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 249; //@line 12228
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 12229
   HEAP32[$16 >> 2] = $2; //@line 12230
   $17 = $ReallocAsyncCtx4 + 8 | 0; //@line 12231
   HEAP32[$17 >> 2] = $4; //@line 12232
   $18 = $ReallocAsyncCtx4 + 12 | 0; //@line 12233
   HEAP32[$18 >> 2] = $10; //@line 12234
   $19 = $ReallocAsyncCtx4 + 16 | 0; //@line 12235
   HEAP32[$19 >> 2] = $12; //@line 12236
   sp = STACKTOP; //@line 12237
   return;
  }
  ___async_unwind = 0; //@line 12240
  HEAP32[$ReallocAsyncCtx4 >> 2] = 249; //@line 12241
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 12242
  HEAP32[$16 >> 2] = $2; //@line 12243
  $17 = $ReallocAsyncCtx4 + 8 | 0; //@line 12244
  HEAP32[$17 >> 2] = $4; //@line 12245
  $18 = $ReallocAsyncCtx4 + 12 | 0; //@line 12246
  HEAP32[$18 >> 2] = $10; //@line 12247
  $19 = $ReallocAsyncCtx4 + 16 | 0; //@line 12248
  HEAP32[$19 >> 2] = $12; //@line 12249
  sp = STACKTOP; //@line 12250
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 12253
 $20 = $10 + 32 | 0; //@line 12254
 $21 = $10 + 44 | 0; //@line 12255
 $22 = HEAP32[$21 >> 2] | 0; //@line 12256
 if (!$22) {
  return;
 }
 $24 = $12 + 1912 | 0; //@line 12261
 if (($24 | 0) == ($20 | 0)) {
  return;
 }
 $26 = $12 + 1924 | 0; //@line 12266
 $27 = HEAP32[$26 >> 2] | 0; //@line 12267
 if (!$27) {
  $36 = HEAP32[$22 + 4 >> 2] | 0; //@line 12271
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 12272
  FUNCTION_TABLE_vii[$36 & 31]($24, $20); //@line 12273
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 251; //@line 12276
   $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 12277
   HEAP32[$37 >> 2] = $21; //@line 12278
   $38 = $ReallocAsyncCtx6 + 8 | 0; //@line 12279
   HEAP32[$38 >> 2] = $26; //@line 12280
   sp = STACKTOP; //@line 12281
   return;
  }
  ___async_unwind = 0; //@line 12284
  HEAP32[$ReallocAsyncCtx6 >> 2] = 251; //@line 12285
  $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 12286
  HEAP32[$37 >> 2] = $21; //@line 12287
  $38 = $ReallocAsyncCtx6 + 8 | 0; //@line 12288
  HEAP32[$38 >> 2] = $26; //@line 12289
  sp = STACKTOP; //@line 12290
  return;
 } else {
  $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 12294
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 12295
  FUNCTION_TABLE_vi[$30 & 1023]($24); //@line 12296
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 250; //@line 12299
   $31 = $ReallocAsyncCtx5 + 4 | 0; //@line 12300
   HEAP32[$31 >> 2] = $21; //@line 12301
   $32 = $ReallocAsyncCtx5 + 8 | 0; //@line 12302
   HEAP32[$32 >> 2] = $26; //@line 12303
   $33 = $ReallocAsyncCtx5 + 12 | 0; //@line 12304
   HEAP32[$33 >> 2] = $24; //@line 12305
   $34 = $ReallocAsyncCtx5 + 16 | 0; //@line 12306
   HEAP32[$34 >> 2] = $20; //@line 12307
   sp = STACKTOP; //@line 12308
   return;
  }
  ___async_unwind = 0; //@line 12311
  HEAP32[$ReallocAsyncCtx5 >> 2] = 250; //@line 12312
  $31 = $ReallocAsyncCtx5 + 4 | 0; //@line 12313
  HEAP32[$31 >> 2] = $21; //@line 12314
  $32 = $ReallocAsyncCtx5 + 8 | 0; //@line 12315
  HEAP32[$32 >> 2] = $26; //@line 12316
  $33 = $ReallocAsyncCtx5 + 12 | 0; //@line 12317
  HEAP32[$33 >> 2] = $24; //@line 12318
  $34 = $ReallocAsyncCtx5 + 16 | 0; //@line 12319
  HEAP32[$34 >> 2] = $20; //@line 12320
  sp = STACKTOP; //@line 12321
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_214($0) {
 $0 = $0 | 0;
 var $$085$off0$reg2mem$0 = 0, $$182$off0 = 0, $$186$off0 = 0, $$283$off0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $59 = 0, $6 = 0, $67 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12816
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12818
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12820
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12822
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12824
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 12827
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12829
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12831
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12833
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12835
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12837
 $22 = HEAP8[$0 + 44 >> 0] & 1; //@line 12840
 $24 = HEAP8[$0 + 45 >> 0] & 1; //@line 12843
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 12845
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 12847
 L2 : do {
  if (!(HEAP8[$14 >> 0] | 0)) {
   do {
    if (!(HEAP8[$4 >> 0] | 0)) {
     $$182$off0 = $22; //@line 12856
     $$186$off0 = $24; //@line 12856
    } else {
     if (!(HEAP8[$2 >> 0] | 0)) {
      if (!(HEAP32[$16 >> 2] & 1)) {
       $$085$off0$reg2mem$0 = $24; //@line 12865
       $$283$off0 = 1; //@line 12865
       label = 13; //@line 12866
       break L2;
      } else {
       $$182$off0 = 1; //@line 12869
       $$186$off0 = $24; //@line 12869
       break;
      }
     }
     if ((HEAP32[$18 >> 2] | 0) == 1) {
      label = 18; //@line 12876
      break L2;
     }
     if (!(HEAP32[$16 >> 2] & 2)) {
      label = 18; //@line 12883
      break L2;
     } else {
      $$182$off0 = 1; //@line 12886
      $$186$off0 = 1; //@line 12886
     }
    }
   } while (0);
   $30 = $28 + 8 | 0; //@line 12890
   if ($30 >>> 0 < $12 >>> 0) {
    HEAP8[$2 >> 0] = 0; //@line 12893
    HEAP8[$4 >> 0] = 0; //@line 12894
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 12895
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($30, $6, $8, $8, 1, $10); //@line 12896
    if (!___async) {
     ___async_unwind = 0; //@line 12899
    }
    HEAP32[$ReallocAsyncCtx5 >> 2] = 680; //@line 12901
    HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 12903
    HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 12905
    HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 12907
    HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 12909
    HEAP8[$ReallocAsyncCtx5 + 20 >> 0] = $10 & 1; //@line 12912
    HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $12; //@line 12914
    HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $14; //@line 12916
    HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $16; //@line 12918
    HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $18; //@line 12920
    HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $20; //@line 12922
    HEAP8[$ReallocAsyncCtx5 + 44 >> 0] = $$182$off0 & 1; //@line 12925
    HEAP8[$ReallocAsyncCtx5 + 45 >> 0] = $$186$off0 & 1; //@line 12928
    HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $26; //@line 12930
    HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $30; //@line 12932
    sp = STACKTOP; //@line 12933
    return;
   } else {
    $$085$off0$reg2mem$0 = $$186$off0; //@line 12936
    $$283$off0 = $$182$off0; //@line 12936
    label = 13; //@line 12937
   }
  } else {
   $$085$off0$reg2mem$0 = $24; //@line 12940
   $$283$off0 = $22; //@line 12940
   label = 13; //@line 12941
  }
 } while (0);
 do {
  if ((label | 0) == 13) {
   if (!$$085$off0$reg2mem$0) {
    HEAP32[$26 >> 2] = $8; //@line 12947
    $59 = $6 + 40 | 0; //@line 12948
    HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + 1; //@line 12951
    if ((HEAP32[$6 + 36 >> 2] | 0) == 1) {
     if ((HEAP32[$18 >> 2] | 0) == 2) {
      HEAP8[$14 >> 0] = 1; //@line 12959
      if ($$283$off0) {
       label = 18; //@line 12961
       break;
      } else {
       $67 = 4; //@line 12964
       break;
      }
     }
    }
   }
   if ($$283$off0) {
    label = 18; //@line 12971
   } else {
    $67 = 4; //@line 12973
   }
  }
 } while (0);
 if ((label | 0) == 18) {
  $67 = 3; //@line 12978
 }
 HEAP32[$20 >> 2] = $67; //@line 12980
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_39($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $47 = 0, $53 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 20010
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20014
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20016
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20018
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20020
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20022
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20024
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20026
 HEAP32[$4 + 364 >> 2] = 2; //@line 20028
 if (HEAP8[$4 + 371 >> 0] | 0) {
  $21 = HEAP32[$6 >> 2] | 0; //@line 20033
  $24 = HEAP32[$4 + 972 >> 2] | 0; //@line 20036
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 20037
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $4 + 1036 | 0, $24); //@line 20038
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 282; //@line 20041
   $25 = $ReallocAsyncCtx4 + 4 | 0; //@line 20042
   HEAP32[$25 >> 2] = $10; //@line 20043
   $26 = $ReallocAsyncCtx4 + 8 | 0; //@line 20044
   HEAP32[$26 >> 2] = $4; //@line 20045
   $27 = $ReallocAsyncCtx4 + 12 | 0; //@line 20046
   HEAP32[$27 >> 2] = $6; //@line 20047
   $28 = $ReallocAsyncCtx4 + 16 | 0; //@line 20048
   HEAP32[$28 >> 2] = $12; //@line 20049
   $29 = $ReallocAsyncCtx4 + 20 | 0; //@line 20050
   HEAP32[$29 >> 2] = $14; //@line 20051
   $30 = $ReallocAsyncCtx4 + 24 | 0; //@line 20052
   HEAP32[$30 >> 2] = $16; //@line 20053
   $31 = $ReallocAsyncCtx4 + 28 | 0; //@line 20054
   HEAP32[$31 >> 2] = $8; //@line 20055
   sp = STACKTOP; //@line 20056
   return;
  }
  ___async_unwind = 0; //@line 20059
  HEAP32[$ReallocAsyncCtx4 >> 2] = 282; //@line 20060
  $25 = $ReallocAsyncCtx4 + 4 | 0; //@line 20061
  HEAP32[$25 >> 2] = $10; //@line 20062
  $26 = $ReallocAsyncCtx4 + 8 | 0; //@line 20063
  HEAP32[$26 >> 2] = $4; //@line 20064
  $27 = $ReallocAsyncCtx4 + 12 | 0; //@line 20065
  HEAP32[$27 >> 2] = $6; //@line 20066
  $28 = $ReallocAsyncCtx4 + 16 | 0; //@line 20067
  HEAP32[$28 >> 2] = $12; //@line 20068
  $29 = $ReallocAsyncCtx4 + 20 | 0; //@line 20069
  HEAP32[$29 >> 2] = $14; //@line 20070
  $30 = $ReallocAsyncCtx4 + 24 | 0; //@line 20071
  HEAP32[$30 >> 2] = $16; //@line 20072
  $31 = $ReallocAsyncCtx4 + 28 | 0; //@line 20073
  HEAP32[$31 >> 2] = $8; //@line 20074
  sp = STACKTOP; //@line 20075
  return;
 }
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 20081
 $35 = $4 + 944 | 0; //@line 20082
 $36 = HEAP8[$35 >> 0] | 0; //@line 20083
 if (!($36 << 24 >> 24)) {
  HEAP8[$35 >> 0] = 1; //@line 20086
  $39 = 1; //@line 20087
 } else {
  $39 = $36; //@line 20089
 }
 HEAP8[$35 >> 0] = $39 | 32; //@line 20092
 HEAP8[$4 + 376 >> 0] = ($12 | 0) == 0 & (HEAP8[$4 + 944 >> 0] & 8) != 0 & 1; //@line 20101
 $47 = HEAP8[$4 + 378 >> 0] | 0; //@line 20103
 HEAP8[$4 + 379 >> 0] = $47; //@line 20105
 HEAP8[$14 >> 0] = $47; //@line 20106
 HEAP8[$16 + 1 >> 0] = HEAP8[$4 + 372 >> 0] | 0; //@line 20110
 HEAP32[$16 + 4 >> 2] = $8; //@line 20112
 $53 = HEAP32[$4 >> 2] | 0; //@line 20113
 $56 = HEAP32[(HEAP32[$53 >> 2] | 0) + 12 >> 2] | 0; //@line 20116
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 20117
 FUNCTION_TABLE_vii[$56 & 31]($53, $16); //@line 20118
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 285; //@line 20121
  $57 = $ReallocAsyncCtx + 4 | 0; //@line 20122
  HEAP32[$57 >> 2] = $4; //@line 20123
  $58 = $ReallocAsyncCtx + 8 | 0; //@line 20124
  HEAP32[$58 >> 2] = $8; //@line 20125
  $59 = $ReallocAsyncCtx + 12 | 0; //@line 20126
  HEAP32[$59 >> 2] = $14; //@line 20127
  sp = STACKTOP; //@line 20128
  return;
 }
 ___async_unwind = 0; //@line 20131
 HEAP32[$ReallocAsyncCtx >> 2] = 285; //@line 20132
 $57 = $ReallocAsyncCtx + 4 | 0; //@line 20133
 HEAP32[$57 >> 2] = $4; //@line 20134
 $58 = $ReallocAsyncCtx + 8 | 0; //@line 20135
 HEAP32[$58 >> 2] = $8; //@line 20136
 $59 = $ReallocAsyncCtx + 12 | 0; //@line 20137
 HEAP32[$59 >> 2] = $14; //@line 20138
 sp = STACKTOP; //@line 20139
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_36($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19576
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19578
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19580
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19582
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19584
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19586
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19588
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19590
 if ((HEAP32[$2 >> 2] | 0) != 2) {
  $17 = HEAP32[$6 >> 2] | 0; //@line 19594
  $19 = $4 + 976 | 0; //@line 19596
  $20 = HEAP32[$19 >> 2] | 0; //@line 19597
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 19598
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($17, $4 + 1056 | 0, $20); //@line 19599
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 283; //@line 19602
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 19603
   HEAP32[$21 >> 2] = $2; //@line 19604
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 19605
   HEAP32[$22 >> 2] = $19; //@line 19606
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 19607
   HEAP32[$23 >> 2] = $6; //@line 19608
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 19609
   HEAP32[$24 >> 2] = $4; //@line 19610
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 19611
   HEAP32[$25 >> 2] = $8; //@line 19612
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 19613
   HEAP32[$26 >> 2] = $10; //@line 19614
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 19615
   HEAP32[$27 >> 2] = $12; //@line 19616
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 19617
   HEAP32[$28 >> 2] = $14; //@line 19618
   sp = STACKTOP; //@line 19619
   return;
  }
  ___async_unwind = 0; //@line 19622
  HEAP32[$ReallocAsyncCtx3 >> 2] = 283; //@line 19623
  $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 19624
  HEAP32[$21 >> 2] = $2; //@line 19625
  $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 19626
  HEAP32[$22 >> 2] = $19; //@line 19627
  $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 19628
  HEAP32[$23 >> 2] = $6; //@line 19629
  $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 19630
  HEAP32[$24 >> 2] = $4; //@line 19631
  $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 19632
  HEAP32[$25 >> 2] = $8; //@line 19633
  $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 19634
  HEAP32[$26 >> 2] = $10; //@line 19635
  $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 19636
  HEAP32[$27 >> 2] = $12; //@line 19637
  $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 19638
  HEAP32[$28 >> 2] = $14; //@line 19639
  sp = STACKTOP; //@line 19640
  return;
 }
 $29 = HEAP32[$6 >> 2] | 0; //@line 19644
 $31 = HEAP32[$4 + 976 >> 2] | 0; //@line 19646
 $34 = (__ZN7LoRaPHY15get_ack_timeoutEv(HEAP32[$4 >> 2] | 0) | 0) + $31 | 0; //@line 19649
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 19650
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($29, $4 + 1076 | 0, $34); //@line 19651
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 284; //@line 19654
  $35 = $ReallocAsyncCtx2 + 4 | 0; //@line 19655
  HEAP32[$35 >> 2] = $4; //@line 19656
  $36 = $ReallocAsyncCtx2 + 8 | 0; //@line 19657
  HEAP32[$36 >> 2] = $8; //@line 19658
  $37 = $ReallocAsyncCtx2 + 12 | 0; //@line 19659
  HEAP32[$37 >> 2] = $10; //@line 19660
  $38 = $ReallocAsyncCtx2 + 16 | 0; //@line 19661
  HEAP32[$38 >> 2] = $12; //@line 19662
  $39 = $ReallocAsyncCtx2 + 20 | 0; //@line 19663
  HEAP32[$39 >> 2] = $14; //@line 19664
  sp = STACKTOP; //@line 19665
  return;
 }
 ___async_unwind = 0; //@line 19668
 HEAP32[$ReallocAsyncCtx2 >> 2] = 284; //@line 19669
 $35 = $ReallocAsyncCtx2 + 4 | 0; //@line 19670
 HEAP32[$35 >> 2] = $4; //@line 19671
 $36 = $ReallocAsyncCtx2 + 8 | 0; //@line 19672
 HEAP32[$36 >> 2] = $8; //@line 19673
 $37 = $ReallocAsyncCtx2 + 12 | 0; //@line 19674
 HEAP32[$37 >> 2] = $10; //@line 19675
 $38 = $ReallocAsyncCtx2 + 16 | 0; //@line 19676
 HEAP32[$38 >> 2] = $12; //@line 19677
 $39 = $ReallocAsyncCtx2 + 20 | 0; //@line 19678
 HEAP32[$39 >> 2] = $14; //@line 19679
 sp = STACKTOP; //@line 19680
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_37($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $36 = 0, $4 = 0, $44 = 0, $50 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 19689
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19691
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19693
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19695
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19697
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19699
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19701
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19703
 if (HEAP8[$2 + 371 >> 0] | 0) {
  $18 = HEAP32[$4 >> 2] | 0; //@line 19708
  $21 = HEAP32[$2 + 972 >> 2] | 0; //@line 19711
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 19712
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($18, $2 + 1036 | 0, $21); //@line 19713
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 282; //@line 19716
   $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 19717
   HEAP32[$22 >> 2] = $8; //@line 19718
   $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 19719
   HEAP32[$23 >> 2] = $2; //@line 19720
   $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 19721
   HEAP32[$24 >> 2] = $4; //@line 19722
   $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 19723
   HEAP32[$25 >> 2] = $10; //@line 19724
   $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 19725
   HEAP32[$26 >> 2] = $12; //@line 19726
   $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 19727
   HEAP32[$27 >> 2] = $14; //@line 19728
   $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 19729
   HEAP32[$28 >> 2] = $6; //@line 19730
   sp = STACKTOP; //@line 19731
   return;
  }
  ___async_unwind = 0; //@line 19734
  HEAP32[$ReallocAsyncCtx4 >> 2] = 282; //@line 19735
  $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 19736
  HEAP32[$22 >> 2] = $8; //@line 19737
  $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 19738
  HEAP32[$23 >> 2] = $2; //@line 19739
  $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 19740
  HEAP32[$24 >> 2] = $4; //@line 19741
  $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 19742
  HEAP32[$25 >> 2] = $10; //@line 19743
  $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 19744
  HEAP32[$26 >> 2] = $12; //@line 19745
  $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 19746
  HEAP32[$27 >> 2] = $14; //@line 19747
  $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 19748
  HEAP32[$28 >> 2] = $6; //@line 19749
  sp = STACKTOP; //@line 19750
  return;
 }
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 19756
 $32 = $2 + 944 | 0; //@line 19757
 $33 = HEAP8[$32 >> 0] | 0; //@line 19758
 if (!($33 << 24 >> 24)) {
  HEAP8[$32 >> 0] = 1; //@line 19761
  $36 = 1; //@line 19762
 } else {
  $36 = $33; //@line 19764
 }
 HEAP8[$32 >> 0] = $36 | 32; //@line 19767
 HEAP8[$2 + 376 >> 0] = ($10 | 0) == 0 & (HEAP8[$2 + 944 >> 0] & 8) != 0 & 1; //@line 19776
 $44 = HEAP8[$2 + 378 >> 0] | 0; //@line 19778
 HEAP8[$2 + 379 >> 0] = $44; //@line 19780
 HEAP8[$12 >> 0] = $44; //@line 19781
 HEAP8[$14 + 1 >> 0] = HEAP8[$2 + 372 >> 0] | 0; //@line 19785
 HEAP32[$14 + 4 >> 2] = $6; //@line 19787
 $50 = HEAP32[$2 >> 2] | 0; //@line 19788
 $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 12 >> 2] | 0; //@line 19791
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 19792
 FUNCTION_TABLE_vii[$53 & 31]($50, $14); //@line 19793
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 285; //@line 19796
  $54 = $ReallocAsyncCtx + 4 | 0; //@line 19797
  HEAP32[$54 >> 2] = $2; //@line 19798
  $55 = $ReallocAsyncCtx + 8 | 0; //@line 19799
  HEAP32[$55 >> 2] = $6; //@line 19800
  $56 = $ReallocAsyncCtx + 12 | 0; //@line 19801
  HEAP32[$56 >> 2] = $12; //@line 19802
  sp = STACKTOP; //@line 19803
  return;
 }
 ___async_unwind = 0; //@line 19806
 HEAP32[$ReallocAsyncCtx >> 2] = 285; //@line 19807
 $54 = $ReallocAsyncCtx + 4 | 0; //@line 19808
 HEAP32[$54 >> 2] = $2; //@line 19809
 $55 = $ReallocAsyncCtx + 8 | 0; //@line 19810
 HEAP32[$55 >> 2] = $6; //@line 19811
 $56 = $ReallocAsyncCtx + 12 | 0; //@line 19812
 HEAP32[$56 >> 2] = $12; //@line 19813
 sp = STACKTOP; //@line 19814
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_280($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 19058
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19062
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19064
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19066
 $9 = $4 + 12 | 0; //@line 19067
 HEAP32[$4 >> 2] = 481; //@line 19068
 HEAP32[$4 + 4 >> 2] = 0; //@line 19070
 HEAP32[$4 + 8 >> 2] = $6; //@line 19072
 HEAP32[$9 >> 2] = 912; //@line 19073
 $10 = $6 + 1260 | 0; //@line 19074
 if (($10 | 0) == ($4 | 0)) {
  $29 = HEAP32[230] | 0; //@line 19078
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 19079
  FUNCTION_TABLE_vi[$29 & 1023]($4); //@line 19080
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 484; //@line 19083
   $30 = $ReallocAsyncCtx15 + 4 | 0; //@line 19084
   HEAP32[$30 >> 2] = $4; //@line 19085
   $31 = $ReallocAsyncCtx15 + 8 | 0; //@line 19086
   HEAP32[$31 >> 2] = $8; //@line 19087
   sp = STACKTOP; //@line 19088
   return;
  }
  ___async_unwind = 0; //@line 19091
  HEAP32[$ReallocAsyncCtx15 >> 2] = 484; //@line 19092
  $30 = $ReallocAsyncCtx15 + 4 | 0; //@line 19093
  HEAP32[$30 >> 2] = $4; //@line 19094
  $31 = $ReallocAsyncCtx15 + 8 | 0; //@line 19095
  HEAP32[$31 >> 2] = $8; //@line 19096
  sp = STACKTOP; //@line 19097
  return;
 }
 $12 = $6 + 1272 | 0; //@line 19100
 $13 = HEAP32[$12 >> 2] | 0; //@line 19101
 if (!$13) {
  $23 = HEAP32[229] | 0; //@line 19105
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(20) | 0; //@line 19106
  FUNCTION_TABLE_vii[$23 & 31]($10, $4); //@line 19107
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 19110
   $24 = $ReallocAsyncCtx14 + 4 | 0; //@line 19111
   HEAP32[$24 >> 2] = $9; //@line 19112
   $25 = $ReallocAsyncCtx14 + 8 | 0; //@line 19113
   HEAP32[$25 >> 2] = $12; //@line 19114
   $26 = $ReallocAsyncCtx14 + 12 | 0; //@line 19115
   HEAP32[$26 >> 2] = $4; //@line 19116
   $27 = $ReallocAsyncCtx14 + 16 | 0; //@line 19117
   HEAP32[$27 >> 2] = $8; //@line 19118
   sp = STACKTOP; //@line 19119
   return;
  }
  ___async_unwind = 0; //@line 19122
  HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 19123
  $24 = $ReallocAsyncCtx14 + 4 | 0; //@line 19124
  HEAP32[$24 >> 2] = $9; //@line 19125
  $25 = $ReallocAsyncCtx14 + 8 | 0; //@line 19126
  HEAP32[$25 >> 2] = $12; //@line 19127
  $26 = $ReallocAsyncCtx14 + 12 | 0; //@line 19128
  HEAP32[$26 >> 2] = $4; //@line 19129
  $27 = $ReallocAsyncCtx14 + 16 | 0; //@line 19130
  HEAP32[$27 >> 2] = $8; //@line 19131
  sp = STACKTOP; //@line 19132
  return;
 } else {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 19136
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 19137
  FUNCTION_TABLE_vi[$16 & 1023]($10); //@line 19138
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 482; //@line 19141
   $17 = $ReallocAsyncCtx13 + 4 | 0; //@line 19142
   HEAP32[$17 >> 2] = $9; //@line 19143
   $18 = $ReallocAsyncCtx13 + 8 | 0; //@line 19144
   HEAP32[$18 >> 2] = $12; //@line 19145
   $19 = $ReallocAsyncCtx13 + 12 | 0; //@line 19146
   HEAP32[$19 >> 2] = $10; //@line 19147
   $20 = $ReallocAsyncCtx13 + 16 | 0; //@line 19148
   HEAP32[$20 >> 2] = $4; //@line 19149
   $21 = $ReallocAsyncCtx13 + 20 | 0; //@line 19150
   HEAP32[$21 >> 2] = $8; //@line 19151
   sp = STACKTOP; //@line 19152
   return;
  }
  ___async_unwind = 0; //@line 19155
  HEAP32[$ReallocAsyncCtx13 >> 2] = 482; //@line 19156
  $17 = $ReallocAsyncCtx13 + 4 | 0; //@line 19157
  HEAP32[$17 >> 2] = $9; //@line 19158
  $18 = $ReallocAsyncCtx13 + 8 | 0; //@line 19159
  HEAP32[$18 >> 2] = $12; //@line 19160
  $19 = $ReallocAsyncCtx13 + 12 | 0; //@line 19161
  HEAP32[$19 >> 2] = $10; //@line 19162
  $20 = $ReallocAsyncCtx13 + 16 | 0; //@line 19163
  HEAP32[$20 >> 2] = $4; //@line 19164
  $21 = $ReallocAsyncCtx13 + 20 | 0; //@line 19165
  HEAP32[$21 >> 2] = $8; //@line 19166
  sp = STACKTOP; //@line 19167
  return;
 }
}
function _initialize__async_cb_258($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $70 = 0, $71 = 0, $72 = 0, $81 = 0, $82 = 0, $83 = 0, $85 = 0, $89 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16244
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16248
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16250
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16254
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16256
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16258
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16260
 if (($AsyncRetVal | 0) != (HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 32 >> 2] | 0)) {
  $23 = $AsyncRetVal - (HEAP32[$6 >> 2] | 0) & HEAP32[HEAP32[$0 + 16 >> 2] >> 2]; //@line 16269
  HEAP32[$6 >> 2] = $AsyncRetVal; //@line 16270
  $24 = HEAP32[$10 >> 2] | 0; //@line 16271
  L4 : do {
   if (($24 | 0) < 1e6) {
    switch ($24 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 6; //@line 16280
      break L4;
     }
    }
    $25 = ___muldi3($23 | 0, 0, 1e6, 0) | 0; //@line 16284
    $27 = _bitshift64Lshr($25 | 0, tempRet0 | 0, 15) | 0; //@line 16286
    $28 = tempRet0; //@line 16287
    $31 = $12; //@line 16290
    $37 = _i64Add(HEAP32[$31 >> 2] | 0, HEAP32[$31 + 4 >> 2] | 0, $23 * 1e6 & 32704 | 0, 0) | 0; //@line 16296
    $38 = tempRet0; //@line 16297
    $39 = $12; //@line 16298
    HEAP32[$39 >> 2] = $37; //@line 16300
    HEAP32[$39 + 4 >> 2] = $38; //@line 16303
    if ($38 >>> 0 < 0 | ($38 | 0) == 0 & $37 >>> 0 < 32768) {
     $95 = $27; //@line 16310
     $96 = $28; //@line 16310
    } else {
     $48 = _i64Add($27 | 0, $28 | 0, 1, 0) | 0; //@line 16312
     $49 = tempRet0; //@line 16313
     $50 = _i64Add($37 | 0, $38 | 0, -32768, -1) | 0; //@line 16314
     $52 = $12; //@line 16316
     HEAP32[$52 >> 2] = $50; //@line 16318
     HEAP32[$52 + 4 >> 2] = tempRet0; //@line 16321
     $95 = $48; //@line 16322
     $96 = $49; //@line 16322
    }
   } else {
    switch ($24 | 0) {
    case 1e6:
     {
      $95 = $23; //@line 16327
      $96 = 0; //@line 16327
      break;
     }
    default:
     {
      label = 6; //@line 16331
     }
    }
   }
  } while (0);
  if ((label | 0) == 6) {
   $56 = ___muldi3($23 | 0, 0, 1e6, 0) | 0; //@line 16337
   $57 = tempRet0; //@line 16338
   $58 = ___udivdi3($56 | 0, $57 | 0, $24 | 0, 0) | 0; //@line 16339
   $59 = tempRet0; //@line 16340
   $60 = ___muldi3($58 | 0, $59 | 0, $24 | 0, 0) | 0; //@line 16341
   $62 = _i64Subtract($56 | 0, $57 | 0, $60 | 0, tempRet0 | 0) | 0; //@line 16343
   $64 = $12; //@line 16345
   $70 = _i64Add($62 | 0, tempRet0 | 0, HEAP32[$64 >> 2] | 0, HEAP32[$64 + 4 >> 2] | 0) | 0; //@line 16351
   $71 = tempRet0; //@line 16352
   $72 = $12; //@line 16353
   HEAP32[$72 >> 2] = $70; //@line 16355
   HEAP32[$72 + 4 >> 2] = $71; //@line 16358
   if ($71 >>> 0 < 0 | ($71 | 0) == 0 & $70 >>> 0 < $24 >>> 0) {
    $95 = $58; //@line 16365
    $96 = $59; //@line 16365
   } else {
    $81 = _i64Add($58 | 0, $59 | 0, 1, 0) | 0; //@line 16367
    $82 = tempRet0; //@line 16368
    $83 = _i64Subtract($70 | 0, $71 | 0, $24 | 0, 0) | 0; //@line 16369
    $85 = $12; //@line 16371
    HEAP32[$85 >> 2] = $83; //@line 16373
    HEAP32[$85 + 4 >> 2] = tempRet0; //@line 16376
    $95 = $81; //@line 16377
    $96 = $82; //@line 16377
   }
  }
  $89 = $14; //@line 16380
  $97 = _i64Add(HEAP32[$89 >> 2] | 0, HEAP32[$89 + 4 >> 2] | 0, $95 | 0, $96 | 0) | 0; //@line 16386
  $99 = $14; //@line 16388
  HEAP32[$99 >> 2] = $97; //@line 16390
  HEAP32[$99 + 4 >> 2] = tempRet0; //@line 16393
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 16395
 _schedule_interrupt($4); //@line 16396
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 603; //@line 16399
  sp = STACKTOP; //@line 16400
  return;
 }
 ___async_unwind = 0; //@line 16403
 HEAP32[$ReallocAsyncCtx5 >> 2] = 603; //@line 16404
 sp = STACKTOP; //@line 16405
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 22080
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22082
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22084
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22086
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22088
 $$pre$i = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 22091
 $11 = $8 + 12 | 0; //@line 22092
 HEAP32[$11 >> 2] = $$pre$i; //@line 22093
 if (!$$pre$i) {
  $21 = $2 + 12 | 0; //@line 22096
  HEAP32[$21 >> 2] = 0; //@line 22097
  $22 = $2 + 16 | 0; //@line 22098
  HEAP32[$22 >> 2] = $4; //@line 22099
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 22100
  $23 = _equeue_alloc($6, 20) | 0; //@line 22101
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 213; //@line 22104
   $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 22105
   HEAP32[$24 >> 2] = $11; //@line 22106
   $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 22107
   HEAP32[$25 >> 2] = $8; //@line 22108
   $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 22109
   HEAP32[$26 >> 2] = $21; //@line 22110
   $27 = $ReallocAsyncCtx7 + 16 | 0; //@line 22111
   HEAP32[$27 >> 2] = $22; //@line 22112
   $28 = $ReallocAsyncCtx7 + 20 | 0; //@line 22113
   HEAP32[$28 >> 2] = $6; //@line 22114
   $29 = $ReallocAsyncCtx7 + 24 | 0; //@line 22115
   HEAP32[$29 >> 2] = $21; //@line 22116
   $30 = $ReallocAsyncCtx7 + 28 | 0; //@line 22117
   HEAP32[$30 >> 2] = $2; //@line 22118
   sp = STACKTOP; //@line 22119
   return;
  }
  HEAP32[___async_retval >> 2] = $23; //@line 22123
  ___async_unwind = 0; //@line 22124
  HEAP32[$ReallocAsyncCtx7 >> 2] = 213; //@line 22125
  $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 22126
  HEAP32[$24 >> 2] = $11; //@line 22127
  $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 22128
  HEAP32[$25 >> 2] = $8; //@line 22129
  $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 22130
  HEAP32[$26 >> 2] = $21; //@line 22131
  $27 = $ReallocAsyncCtx7 + 16 | 0; //@line 22132
  HEAP32[$27 >> 2] = $22; //@line 22133
  $28 = $ReallocAsyncCtx7 + 20 | 0; //@line 22134
  HEAP32[$28 >> 2] = $6; //@line 22135
  $29 = $ReallocAsyncCtx7 + 24 | 0; //@line 22136
  HEAP32[$29 >> 2] = $21; //@line 22137
  $30 = $ReallocAsyncCtx7 + 28 | 0; //@line 22138
  HEAP32[$30 >> 2] = $2; //@line 22139
  sp = STACKTOP; //@line 22140
  return;
 } else {
  $14 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 22145
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 22146
  FUNCTION_TABLE_vii[$14 & 31]($2, $8); //@line 22147
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 212; //@line 22150
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 22151
   HEAP32[$15 >> 2] = $11; //@line 22152
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 22153
   HEAP32[$16 >> 2] = $11; //@line 22154
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 22155
   HEAP32[$17 >> 2] = $2; //@line 22156
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 22157
   HEAP32[$18 >> 2] = $4; //@line 22158
   $19 = $ReallocAsyncCtx2 + 20 | 0; //@line 22159
   HEAP32[$19 >> 2] = $6; //@line 22160
   $20 = $ReallocAsyncCtx2 + 24 | 0; //@line 22161
   HEAP32[$20 >> 2] = $8; //@line 22162
   sp = STACKTOP; //@line 22163
   return;
  }
  ___async_unwind = 0; //@line 22166
  HEAP32[$ReallocAsyncCtx2 >> 2] = 212; //@line 22167
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 22168
  HEAP32[$15 >> 2] = $11; //@line 22169
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 22170
  HEAP32[$16 >> 2] = $11; //@line 22171
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 22172
  HEAP32[$17 >> 2] = $2; //@line 22173
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 22174
  HEAP32[$18 >> 2] = $4; //@line 22175
  $19 = $ReallocAsyncCtx2 + 20 | 0; //@line 22176
  HEAP32[$19 >> 2] = $6; //@line 22177
  $20 = $ReallocAsyncCtx2 + 24 | 0; //@line 22178
  HEAP32[$20 >> 2] = $8; //@line 22179
  sp = STACKTOP; //@line 22180
  return;
 }
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $43 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 21818
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21820
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21822
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21824
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21826
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21828
 $12 = $0 + 24 | 0; //@line 21830
 $14 = HEAP32[$12 >> 2] | 0; //@line 21832
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 21835
 $19 = HEAP32[$0 + 32 >> 2] | 0; //@line 21837
 $20 = HEAP32[$2 >> 2] | 0; //@line 21838
 if ($20 | 0) {
  $23 = HEAP32[$20 + 4 >> 2] | 0; //@line 21842
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 21843
  FUNCTION_TABLE_vii[$23 & 31]($6, $8); //@line 21844
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 86; //@line 21847
   $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 21848
   HEAP32[$24 >> 2] = $2; //@line 21849
   $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 21850
   HEAP32[$25 >> 2] = $4; //@line 21851
   $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 21852
   HEAP32[$26 >> 2] = $10; //@line 21853
   $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 21854
   $28 = $27; //@line 21855
   $29 = $28; //@line 21856
   HEAP32[$29 >> 2] = $14; //@line 21857
   $30 = $28 + 4 | 0; //@line 21858
   $31 = $30; //@line 21859
   HEAP32[$31 >> 2] = $17; //@line 21860
   $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 21861
   HEAP32[$32 >> 2] = $19; //@line 21862
   $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 21863
   HEAP32[$33 >> 2] = $8; //@line 21864
   sp = STACKTOP; //@line 21865
   return;
  }
  ___async_unwind = 0; //@line 21868
  HEAP32[$ReallocAsyncCtx2 >> 2] = 86; //@line 21869
  $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 21870
  HEAP32[$24 >> 2] = $2; //@line 21871
  $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 21872
  HEAP32[$25 >> 2] = $4; //@line 21873
  $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 21874
  HEAP32[$26 >> 2] = $10; //@line 21875
  $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 21876
  $28 = $27; //@line 21877
  $29 = $28; //@line 21878
  HEAP32[$29 >> 2] = $14; //@line 21879
  $30 = $28 + 4 | 0; //@line 21880
  $31 = $30; //@line 21881
  HEAP32[$31 >> 2] = $17; //@line 21882
  $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 21883
  HEAP32[$32 >> 2] = $19; //@line 21884
  $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 21885
  HEAP32[$33 >> 2] = $8; //@line 21886
  sp = STACKTOP; //@line 21887
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 21890
 __ZN4mbed6Ticker5setupEy($10, $14, $17); //@line 21891
 $34 = HEAP32[$2 >> 2] | 0; //@line 21892
 if ($34 | 0) {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 21896
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 21897
  FUNCTION_TABLE_vi[$37 & 1023]($8); //@line 21898
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 87; //@line 21901
   $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 21902
   HEAP32[$38 >> 2] = $19; //@line 21903
   sp = STACKTOP; //@line 21904
   return;
  }
  ___async_unwind = 0; //@line 21907
  HEAP32[$ReallocAsyncCtx3 >> 2] = 87; //@line 21908
  $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 21909
  HEAP32[$38 >> 2] = $19; //@line 21910
  sp = STACKTOP; //@line 21911
  return;
 }
 $40 = HEAP32[$19 + 788 >> 2] | 0; //@line 21915
 if (!$40) {
  return;
 }
 $43 = HEAP32[$40 + 60 >> 2] | 0; //@line 21921
 if (!$43) {
  return;
 }
 $46 = HEAP32[$43 >> 2] | 0; //@line 21927
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 21928
 FUNCTION_TABLE_vi[$46 & 1023]($40 + 48 | 0); //@line 21929
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 88; //@line 21932
  sp = STACKTOP; //@line 21933
  return;
 }
 ___async_unwind = 0; //@line 21936
 HEAP32[$ReallocAsyncCtx4 >> 2] = 88; //@line 21937
 sp = STACKTOP; //@line 21938
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_213($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 12660
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12662
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12664
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12666
 $8 = HEAP8[$0 + 16 >> 0] & 1; //@line 12669
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12671
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12673
 $15 = $12 + 24 | 0; //@line 12676
 do {
  if ((HEAP32[$0 + 28 >> 2] | 0) > 1) {
   $18 = HEAP32[$12 + 8 >> 2] | 0; //@line 12681
   if (!($18 & 2)) {
    $21 = $2 + 36 | 0; //@line 12685
    if ((HEAP32[$21 >> 2] | 0) != 1) {
     if (!($18 & 1)) {
      $38 = $2 + 54 | 0; //@line 12692
      if (HEAP8[$38 >> 0] | 0) {
       break;
      }
      if ((HEAP32[$21 >> 2] | 0) == 1) {
       break;
      }
      $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 12703
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $2, $4, $6, $8); //@line 12704
      if (!___async) {
       ___async_unwind = 0; //@line 12707
      }
      HEAP32[$ReallocAsyncCtx >> 2] = 684; //@line 12709
      HEAP32[$ReallocAsyncCtx + 4 >> 2] = $15; //@line 12711
      HEAP32[$ReallocAsyncCtx + 8 >> 2] = $10; //@line 12713
      HEAP32[$ReallocAsyncCtx + 12 >> 2] = $38; //@line 12715
      HEAP32[$ReallocAsyncCtx + 16 >> 2] = $21; //@line 12717
      HEAP32[$ReallocAsyncCtx + 20 >> 2] = $2; //@line 12719
      HEAP32[$ReallocAsyncCtx + 24 >> 2] = $4; //@line 12721
      HEAP32[$ReallocAsyncCtx + 28 >> 2] = $6; //@line 12723
      HEAP8[$ReallocAsyncCtx + 32 >> 0] = $8 & 1; //@line 12726
      sp = STACKTOP; //@line 12727
      return;
     }
     $36 = $2 + 24 | 0; //@line 12730
     $37 = $2 + 54 | 0; //@line 12731
     if (HEAP8[$37 >> 0] | 0) {
      break;
     }
     if ((HEAP32[$21 >> 2] | 0) == 1) {
      if ((HEAP32[$36 >> 2] | 0) == 1) {
       break;
      }
     }
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 12746
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $2, $4, $6, $8); //@line 12747
     if (!___async) {
      ___async_unwind = 0; //@line 12750
     }
     HEAP32[$ReallocAsyncCtx2 >> 2] = 683; //@line 12752
     HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $15; //@line 12754
     HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 12756
     HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $37; //@line 12758
     HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $21; //@line 12760
     HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $36; //@line 12762
     HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $2; //@line 12764
     HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $4; //@line 12766
     HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $6; //@line 12768
     HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $8 & 1; //@line 12771
     sp = STACKTOP; //@line 12772
     return;
    }
   }
   $24 = $2 + 54 | 0; //@line 12776
   if (!(HEAP8[$24 >> 0] | 0)) {
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 12780
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $2, $4, $6, $8); //@line 12781
    if (!___async) {
     ___async_unwind = 0; //@line 12784
    }
    HEAP32[$ReallocAsyncCtx3 >> 2] = 682; //@line 12786
    HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $15; //@line 12788
    HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $10; //@line 12790
    HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $24; //@line 12792
    HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $2; //@line 12794
    HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $4; //@line 12796
    HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $6; //@line 12798
    HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $8 & 1; //@line 12801
    sp = STACKTOP; //@line 12802
    return;
   }
  }
 } while (0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $31 = 0, $32 = 0, $33 = 0, $62 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16693
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 16698
 } else {
  $9 = $1 + 52 | 0; //@line 16700
  $10 = HEAP8[$9 >> 0] | 0; //@line 16701
  $11 = $1 + 53 | 0; //@line 16702
  $12 = HEAP8[$11 >> 0] | 0; //@line 16703
  $15 = HEAP32[$0 + 12 >> 2] | 0; //@line 16706
  $16 = $0 + 16 + ($15 << 3) | 0; //@line 16707
  HEAP8[$9 >> 0] = 0; //@line 16708
  HEAP8[$11 >> 0] = 0; //@line 16709
  $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 16710
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0 + 16 | 0, $1, $2, $3, $4, $5); //@line 16711
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 678; //@line 16714
   HEAP32[$AsyncCtx3 + 4 >> 2] = $15; //@line 16716
   HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 16718
   HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 16720
   HEAP8[$AsyncCtx3 + 16 >> 0] = $10; //@line 16722
   HEAP32[$AsyncCtx3 + 20 >> 2] = $9; //@line 16724
   HEAP8[$AsyncCtx3 + 24 >> 0] = $12; //@line 16726
   HEAP32[$AsyncCtx3 + 28 >> 2] = $11; //@line 16728
   HEAP32[$AsyncCtx3 + 32 >> 2] = $2; //@line 16730
   HEAP32[$AsyncCtx3 + 36 >> 2] = $3; //@line 16732
   HEAP32[$AsyncCtx3 + 40 >> 2] = $4; //@line 16734
   HEAP8[$AsyncCtx3 + 44 >> 0] = $5 & 1; //@line 16737
   HEAP32[$AsyncCtx3 + 48 >> 2] = $16; //@line 16739
   sp = STACKTOP; //@line 16740
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16743
  L7 : do {
   if (($15 | 0) > 1) {
    $31 = $1 + 24 | 0; //@line 16748
    $32 = $0 + 8 | 0; //@line 16749
    $33 = $1 + 54 | 0; //@line 16750
    $$0 = $0 + 24 | 0; //@line 16751
    while (1) {
     if (HEAP8[$33 >> 0] | 0) {
      break L7;
     }
     if (!(HEAP8[$9 >> 0] | 0)) {
      if (HEAP8[$11 >> 0] | 0) {
       if (!(HEAP32[$32 >> 2] & 1)) {
        break L7;
       }
      }
     } else {
      if ((HEAP32[$31 >> 2] | 0) == 1) {
       break L7;
      }
      if (!(HEAP32[$32 >> 2] & 2)) {
       break L7;
      }
     }
     HEAP8[$9 >> 0] = 0; //@line 16784
     HEAP8[$11 >> 0] = 0; //@line 16785
     $AsyncCtx = _emscripten_alloc_async_context(60, sp) | 0; //@line 16786
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0, $1, $2, $3, $4, $5); //@line 16787
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 16792
     $62 = $$0 + 8 | 0; //@line 16793
     if ($62 >>> 0 < $16 >>> 0) {
      $$0 = $62; //@line 16796
     } else {
      break L7;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 679; //@line 16801
    HEAP32[$AsyncCtx + 4 >> 2] = $$0; //@line 16803
    HEAP32[$AsyncCtx + 8 >> 2] = $16; //@line 16805
    HEAP32[$AsyncCtx + 12 >> 2] = $33; //@line 16807
    HEAP8[$AsyncCtx + 16 >> 0] = $10; //@line 16809
    HEAP32[$AsyncCtx + 20 >> 2] = $9; //@line 16811
    HEAP8[$AsyncCtx + 24 >> 0] = $12; //@line 16813
    HEAP32[$AsyncCtx + 28 >> 2] = $11; //@line 16815
    HEAP32[$AsyncCtx + 32 >> 2] = $31; //@line 16817
    HEAP32[$AsyncCtx + 36 >> 2] = $32; //@line 16819
    HEAP32[$AsyncCtx + 40 >> 2] = $1; //@line 16821
    HEAP32[$AsyncCtx + 44 >> 2] = $2; //@line 16823
    HEAP32[$AsyncCtx + 48 >> 2] = $3; //@line 16825
    HEAP32[$AsyncCtx + 52 >> 2] = $4; //@line 16827
    HEAP8[$AsyncCtx + 56 >> 0] = $5 & 1; //@line 16830
    sp = STACKTOP; //@line 16831
    return;
   }
  } while (0);
  HEAP8[$9 >> 0] = $10; //@line 16835
  HEAP8[$11 >> 0] = $12; //@line 16836
 }
 return;
}
function __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 var $$1 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $35 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $54 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15278
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15282
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15284
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15286
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15288
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15290
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15292
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15294
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 15296
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 15298
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15300
 $24 = (HEAP8[$0 + 4 >> 0] | 0) + 1 << 24 >> 24; //@line 15302
 if ($AsyncRetVal | 0) {
  $$1 = $AsyncRetVal; //@line 15304
  $54 = ___async_retval; //@line 15305
  HEAP32[$54 >> 2] = $$1; //@line 15306
  return;
 }
 $25 = $24 & 255; //@line 15311
 if (($24 & 255) >= (HEAPU8[$4 >> 0] | 0)) {
  $$1 = 0; //@line 15313
  $54 = ___async_retval; //@line 15314
  HEAP32[$54 >> 2] = $$1; //@line 15315
  return;
 }
 $26 = HEAP32[$8 >> 2] | 0; //@line 15318
 HEAP8[$10 >> 0] = HEAP8[$26 + ($25 << 4) + 13 >> 0] | 0; //@line 15321
 HEAP8[$12 >> 0] = HEAP8[$26 + ($25 << 4) + 12 >> 0] | 0; //@line 15324
 HEAP32[$14 >> 2] = HEAP32[$26 + ($25 << 4) + 4 >> 2]; //@line 15327
 HEAP32[$16 >> 2] = HEAP32[$26 + ($25 << 4) + 8 >> 2]; //@line 15330
 $35 = HEAP32[$18 >> 2] | 0; //@line 15331
 $38 = HEAP32[(HEAP32[$35 >> 2] | 0) + 60 >> 2] | 0; //@line 15334
 $40 = HEAP8[$26 + ($25 << 4) >> 0] | 0; //@line 15336
 $ReallocAsyncCtx = _emscripten_realloc_async_context(44) | 0; //@line 15337
 $41 = FUNCTION_TABLE_iiii[$38 & 15]($35, $20, $40) | 0; //@line 15338
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 485; //@line 15341
  $42 = $ReallocAsyncCtx + 4 | 0; //@line 15342
  HEAP8[$42 >> 0] = $24; //@line 15343
  $43 = $ReallocAsyncCtx + 8 | 0; //@line 15344
  HEAP32[$43 >> 2] = $4; //@line 15345
  $44 = $ReallocAsyncCtx + 12 | 0; //@line 15346
  HEAP32[$44 >> 2] = $6; //@line 15347
  $45 = $ReallocAsyncCtx + 16 | 0; //@line 15348
  HEAP32[$45 >> 2] = $8; //@line 15349
  $46 = $ReallocAsyncCtx + 20 | 0; //@line 15350
  HEAP32[$46 >> 2] = $10; //@line 15351
  $47 = $ReallocAsyncCtx + 24 | 0; //@line 15352
  HEAP32[$47 >> 2] = $12; //@line 15353
  $48 = $ReallocAsyncCtx + 28 | 0; //@line 15354
  HEAP32[$48 >> 2] = $14; //@line 15355
  $49 = $ReallocAsyncCtx + 32 | 0; //@line 15356
  HEAP32[$49 >> 2] = $16; //@line 15357
  $50 = $ReallocAsyncCtx + 36 | 0; //@line 15358
  HEAP32[$50 >> 2] = $18; //@line 15359
  $51 = $ReallocAsyncCtx + 40 | 0; //@line 15360
  HEAP32[$51 >> 2] = $20; //@line 15361
  sp = STACKTOP; //@line 15362
  return;
 }
 HEAP32[___async_retval >> 2] = $41; //@line 15366
 ___async_unwind = 0; //@line 15367
 HEAP32[$ReallocAsyncCtx >> 2] = 485; //@line 15368
 $42 = $ReallocAsyncCtx + 4 | 0; //@line 15369
 HEAP8[$42 >> 0] = $24; //@line 15370
 $43 = $ReallocAsyncCtx + 8 | 0; //@line 15371
 HEAP32[$43 >> 2] = $4; //@line 15372
 $44 = $ReallocAsyncCtx + 12 | 0; //@line 15373
 HEAP32[$44 >> 2] = $6; //@line 15374
 $45 = $ReallocAsyncCtx + 16 | 0; //@line 15375
 HEAP32[$45 >> 2] = $8; //@line 15376
 $46 = $ReallocAsyncCtx + 20 | 0; //@line 15377
 HEAP32[$46 >> 2] = $10; //@line 15378
 $47 = $ReallocAsyncCtx + 24 | 0; //@line 15379
 HEAP32[$47 >> 2] = $12; //@line 15380
 $48 = $ReallocAsyncCtx + 28 | 0; //@line 15381
 HEAP32[$48 >> 2] = $14; //@line 15382
 $49 = $ReallocAsyncCtx + 32 | 0; //@line 15383
 HEAP32[$49 >> 2] = $16; //@line 15384
 $50 = $ReallocAsyncCtx + 36 | 0; //@line 15385
 HEAP32[$50 >> 2] = $18; //@line 15386
 $51 = $ReallocAsyncCtx + 40 | 0; //@line 15387
 HEAP32[$51 >> 2] = $20; //@line 15388
 sp = STACKTOP; //@line 15389
 return;
}
function _pop_arg_673($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $108 = 0, $109 = 0.0, $115 = 0, $116 = 0.0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $9 = 0, $97 = 0, $98 = 0, $99 = 0;
 L1 : do {
  if ($1 >>> 0 <= 20) {
   do {
    switch ($1 | 0) {
    case 9:
     {
      $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13116
      $10 = HEAP32[$9 >> 2] | 0; //@line 13117
      HEAP32[$2 >> 2] = $9 + 4; //@line 13119
      HEAP32[$0 >> 2] = $10; //@line 13120
      break L1;
      break;
     }
    case 10:
     {
      $16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13136
      $17 = HEAP32[$16 >> 2] | 0; //@line 13137
      HEAP32[$2 >> 2] = $16 + 4; //@line 13139
      $20 = $0; //@line 13142
      HEAP32[$20 >> 2] = $17; //@line 13144
      HEAP32[$20 + 4 >> 2] = (($17 | 0) < 0) << 31 >> 31; //@line 13147
      break L1;
      break;
     }
    case 11:
     {
      $29 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13163
      $30 = HEAP32[$29 >> 2] | 0; //@line 13164
      HEAP32[$2 >> 2] = $29 + 4; //@line 13166
      $31 = $0; //@line 13167
      HEAP32[$31 >> 2] = $30; //@line 13169
      HEAP32[$31 + 4 >> 2] = 0; //@line 13172
      break L1;
      break;
     }
    case 12:
     {
      $40 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 13188
      $41 = $40; //@line 13189
      $43 = HEAP32[$41 >> 2] | 0; //@line 13191
      $46 = HEAP32[$41 + 4 >> 2] | 0; //@line 13194
      HEAP32[$2 >> 2] = $40 + 8; //@line 13196
      $47 = $0; //@line 13197
      HEAP32[$47 >> 2] = $43; //@line 13199
      HEAP32[$47 + 4 >> 2] = $46; //@line 13202
      break L1;
      break;
     }
    case 13:
     {
      $56 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13218
      $57 = HEAP32[$56 >> 2] | 0; //@line 13219
      HEAP32[$2 >> 2] = $56 + 4; //@line 13221
      $59 = ($57 & 65535) << 16 >> 16; //@line 13223
      $62 = $0; //@line 13226
      HEAP32[$62 >> 2] = $59; //@line 13228
      HEAP32[$62 + 4 >> 2] = (($59 | 0) < 0) << 31 >> 31; //@line 13231
      break L1;
      break;
     }
    case 14:
     {
      $71 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13247
      $72 = HEAP32[$71 >> 2] | 0; //@line 13248
      HEAP32[$2 >> 2] = $71 + 4; //@line 13250
      $73 = $0; //@line 13252
      HEAP32[$73 >> 2] = $72 & 65535; //@line 13254
      HEAP32[$73 + 4 >> 2] = 0; //@line 13257
      break L1;
      break;
     }
    case 15:
     {
      $82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13273
      $83 = HEAP32[$82 >> 2] | 0; //@line 13274
      HEAP32[$2 >> 2] = $82 + 4; //@line 13276
      $85 = ($83 & 255) << 24 >> 24; //@line 13278
      $88 = $0; //@line 13281
      HEAP32[$88 >> 2] = $85; //@line 13283
      HEAP32[$88 + 4 >> 2] = (($85 | 0) < 0) << 31 >> 31; //@line 13286
      break L1;
      break;
     }
    case 16:
     {
      $97 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13302
      $98 = HEAP32[$97 >> 2] | 0; //@line 13303
      HEAP32[$2 >> 2] = $97 + 4; //@line 13305
      $99 = $0; //@line 13307
      HEAP32[$99 >> 2] = $98 & 255; //@line 13309
      HEAP32[$99 + 4 >> 2] = 0; //@line 13312
      break L1;
      break;
     }
    case 17:
     {
      $108 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 13328
      $109 = +HEAPF64[$108 >> 3]; //@line 13329
      HEAP32[$2 >> 2] = $108 + 8; //@line 13331
      HEAPF64[$0 >> 3] = $109; //@line 13332
      break L1;
      break;
     }
    case 18:
     {
      $115 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 13348
      $116 = +HEAPF64[$115 >> 3]; //@line 13349
      HEAP32[$2 >> 2] = $115 + 8; //@line 13351
      HEAPF64[$0 >> 3] = $116; //@line 13352
      break L1;
      break;
     }
    default:
     {
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 return;
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_46($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 20502
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20504
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20506
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20508
 HEAP32[$2 + 364 >> 2] = 0; //@line 20510
 $10 = $2 + 1160 | 0; //@line 20513
 HEAP8[$10 >> 0] = HEAP8[$2 + 378 >> 0] | 0; //@line 20514
 HEAP8[$2 + 1163 >> 0] = HEAP8[$2 + 1129 >> 0] | 0; //@line 20518
 HEAP8[$2 + 1176 >> 0] = HEAP8[$2 + 1141 >> 0] | 0; //@line 20522
 HEAP8[$2 + 1177 >> 0] = HEAP8[$2 + 369 >> 0] | 0; //@line 20526
 $20 = $2 + 1178 | 0; //@line 20527
 HEAP8[$20 >> 0] = 0; //@line 20528
 HEAP32[$2 + 1180 >> 2] = 0; //@line 20530
 if ((HEAP32[$2 + 360 >> 2] | 0) == 2) {
  $25 = HEAP32[$2 >> 2] | 0; //@line 20535
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 20536
  __ZN7LoRaPHY20put_radio_to_standbyEv($25); //@line 20537
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 421; //@line 20540
   $26 = $ReallocAsyncCtx3 + 4 | 0; //@line 20541
   HEAP32[$26 >> 2] = $2; //@line 20542
   $27 = $ReallocAsyncCtx3 + 8 | 0; //@line 20543
   HEAP32[$27 >> 2] = $2; //@line 20544
   $28 = $ReallocAsyncCtx3 + 12 | 0; //@line 20545
   HEAP32[$28 >> 2] = $10; //@line 20546
   $29 = $ReallocAsyncCtx3 + 16 | 0; //@line 20547
   HEAP32[$29 >> 2] = $20; //@line 20548
   $30 = $ReallocAsyncCtx3 + 20 | 0; //@line 20549
   HEAP32[$30 >> 2] = $4; //@line 20550
   $31 = $ReallocAsyncCtx3 + 24 | 0; //@line 20551
   HEAP32[$31 >> 2] = $6; //@line 20552
   sp = STACKTOP; //@line 20553
   return;
  }
  ___async_unwind = 0; //@line 20556
  HEAP32[$ReallocAsyncCtx3 >> 2] = 421; //@line 20557
  $26 = $ReallocAsyncCtx3 + 4 | 0; //@line 20558
  HEAP32[$26 >> 2] = $2; //@line 20559
  $27 = $ReallocAsyncCtx3 + 8 | 0; //@line 20560
  HEAP32[$27 >> 2] = $2; //@line 20561
  $28 = $ReallocAsyncCtx3 + 12 | 0; //@line 20562
  HEAP32[$28 >> 2] = $10; //@line 20563
  $29 = $ReallocAsyncCtx3 + 16 | 0; //@line 20564
  HEAP32[$29 >> 2] = $20; //@line 20565
  $30 = $ReallocAsyncCtx3 + 20 | 0; //@line 20566
  HEAP32[$30 >> 2] = $4; //@line 20567
  $31 = $ReallocAsyncCtx3 + 24 | 0; //@line 20568
  HEAP32[$31 >> 2] = $6; //@line 20569
  sp = STACKTOP; //@line 20570
  return;
 } else {
  $32 = HEAP32[$2 >> 2] | 0; //@line 20573
  $35 = HEAP32[(HEAP32[$32 >> 2] | 0) + 24 >> 2] | 0; //@line 20576
  $38 = (__ZN11LoRaMacMcps14get_indicationEv($2 + 288 | 0) | 0) + 10 | 0; //@line 20579
  $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 20580
  FUNCTION_TABLE_iiii[$35 & 15]($32, $10, $38) | 0; //@line 20581
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 422; //@line 20584
   $39 = $ReallocAsyncCtx + 4 | 0; //@line 20585
   HEAP32[$39 >> 2] = $20; //@line 20586
   $40 = $ReallocAsyncCtx + 8 | 0; //@line 20587
   HEAP32[$40 >> 2] = $2; //@line 20588
   $41 = $ReallocAsyncCtx + 12 | 0; //@line 20589
   HEAP32[$41 >> 2] = $4; //@line 20590
   $42 = $ReallocAsyncCtx + 16 | 0; //@line 20591
   HEAP32[$42 >> 2] = $6; //@line 20592
   $43 = $ReallocAsyncCtx + 20 | 0; //@line 20593
   HEAP32[$43 >> 2] = $2; //@line 20594
   sp = STACKTOP; //@line 20595
   return;
  }
  ___async_unwind = 0; //@line 20598
  HEAP32[$ReallocAsyncCtx >> 2] = 422; //@line 20599
  $39 = $ReallocAsyncCtx + 4 | 0; //@line 20600
  HEAP32[$39 >> 2] = $20; //@line 20601
  $40 = $ReallocAsyncCtx + 8 | 0; //@line 20602
  HEAP32[$40 >> 2] = $2; //@line 20603
  $41 = $ReallocAsyncCtx + 12 | 0; //@line 20604
  HEAP32[$41 >> 2] = $4; //@line 20605
  $42 = $ReallocAsyncCtx + 16 | 0; //@line 20606
  HEAP32[$42 >> 2] = $6; //@line 20607
  $43 = $ReallocAsyncCtx + 20 | 0; //@line 20608
  HEAP32[$43 >> 2] = $2; //@line 20609
  sp = STACKTOP; //@line 20610
  return;
 }
}
function __ZN12radio_eventsD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0, $30 = 0, $34 = 0, $37 = 0, $41 = 0, $44 = 0, $47 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 8867
 $2 = HEAP32[$0 + 108 >> 2] | 0; //@line 8869
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 8875
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 8876
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 96 | 0); //@line 8877
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 263; //@line 8880
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 8882
    sp = STACKTOP; //@line 8883
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 8886
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 92 >> 2] | 0; //@line 8892
 do {
  if ($9 | 0) {
   $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 8898
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8899
   FUNCTION_TABLE_vi[$13 & 1023]($0 + 80 | 0); //@line 8900
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 264; //@line 8903
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 8905
    sp = STACKTOP; //@line 8906
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 8909
    break;
   }
  }
 } while (0);
 $16 = HEAP32[$0 + 76 >> 2] | 0; //@line 8915
 do {
  if ($16 | 0) {
   $20 = HEAP32[$16 + 8 >> 2] | 0; //@line 8921
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8922
   FUNCTION_TABLE_vi[$20 & 1023]($0 + 64 | 0); //@line 8923
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 265; //@line 8926
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 8928
    sp = STACKTOP; //@line 8929
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 8932
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$0 + 60 >> 2] | 0; //@line 8938
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 8944
   $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8945
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 48 | 0); //@line 8946
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 266; //@line 8949
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 8951
    sp = STACKTOP; //@line 8952
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 8955
    break;
   }
  }
 } while (0);
 $30 = HEAP32[$0 + 44 >> 2] | 0; //@line 8961
 do {
  if ($30 | 0) {
   $34 = HEAP32[$30 + 8 >> 2] | 0; //@line 8967
   $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8968
   FUNCTION_TABLE_vi[$34 & 1023]($0 + 32 | 0); //@line 8969
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 267; //@line 8972
    HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 8974
    sp = STACKTOP; //@line 8975
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 8978
    break;
   }
  }
 } while (0);
 $37 = HEAP32[$0 + 28 >> 2] | 0; //@line 8984
 do {
  if ($37 | 0) {
   $41 = HEAP32[$37 + 8 >> 2] | 0; //@line 8990
   $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8991
   FUNCTION_TABLE_vi[$41 & 1023]($0 + 16 | 0); //@line 8992
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 268; //@line 8995
    HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 8997
    sp = STACKTOP; //@line 8998
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx19 | 0); //@line 9001
    break;
   }
  }
 } while (0);
 $44 = HEAP32[$0 + 12 >> 2] | 0; //@line 9007
 if (!$44) {
  return;
 }
 $47 = HEAP32[$44 + 8 >> 2] | 0; //@line 9013
 $AsyncCtx23 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9014
 FUNCTION_TABLE_vi[$47 & 1023]($0); //@line 9015
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 269; //@line 9018
  sp = STACKTOP; //@line 9019
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 9022
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_253($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $25 = 0, $27 = 0, $29 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 15710
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15712
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15716
 $8 = $0 + 16 | 0; //@line 15718
 $10 = HEAP32[$8 >> 2] | 0; //@line 15720
 $13 = HEAP32[$8 + 4 >> 2] | 0; //@line 15723
 $15 = HEAP32[$0 + 24 >> 2] | 0; //@line 15725
 $17 = HEAP32[$0 + 28 >> 2] | 0; //@line 15727
 $19 = HEAP32[$0 + 32 >> 2] | 0; //@line 15729
 $21 = HEAP32[$0 + 36 >> 2] | 0; //@line 15731
 $23 = HEAP32[$0 + 40 >> 2] | 0; //@line 15733
 $25 = HEAP32[$0 + 44 >> 2] | 0; //@line 15735
 $27 = HEAP32[$0 + 48 >> 2] | 0; //@line 15737
 $29 = HEAP32[$0 + 52 >> 2] | 0; //@line 15739
 $31 = HEAP32[$0 + 56 >> 2] | 0; //@line 15741
 $33 = HEAP32[$0 + 60 >> 2] | 0; //@line 15743
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 15745
 __ZN4mbed6Ticker5setupEy($6, $10, $13); //@line 15746
 $34 = HEAP32[$2 >> 2] | 0; //@line 15747
 if ($34 | 0) {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 15751
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(40) | 0; //@line 15752
  FUNCTION_TABLE_vi[$37 & 1023]($17); //@line 15753
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 15756
   $38 = $ReallocAsyncCtx6 + 4 | 0; //@line 15757
   HEAP32[$38 >> 2] = $15; //@line 15758
   $39 = $ReallocAsyncCtx6 + 8 | 0; //@line 15759
   HEAP32[$39 >> 2] = $19; //@line 15760
   $40 = $ReallocAsyncCtx6 + 12 | 0; //@line 15761
   HEAP32[$40 >> 2] = $21; //@line 15762
   $41 = $ReallocAsyncCtx6 + 16 | 0; //@line 15763
   HEAP32[$41 >> 2] = $23; //@line 15764
   $42 = $ReallocAsyncCtx6 + 20 | 0; //@line 15765
   HEAP32[$42 >> 2] = $25; //@line 15766
   $43 = $ReallocAsyncCtx6 + 24 | 0; //@line 15767
   HEAP32[$43 >> 2] = $27; //@line 15768
   $44 = $ReallocAsyncCtx6 + 28 | 0; //@line 15769
   HEAP32[$44 >> 2] = $29; //@line 15770
   $45 = $ReallocAsyncCtx6 + 32 | 0; //@line 15771
   HEAP32[$45 >> 2] = $31; //@line 15772
   $46 = $ReallocAsyncCtx6 + 36 | 0; //@line 15773
   HEAP32[$46 >> 2] = $33; //@line 15774
   sp = STACKTOP; //@line 15775
   return;
  }
  ___async_unwind = 0; //@line 15778
  HEAP32[$ReallocAsyncCtx6 >> 2] = 57; //@line 15779
  $38 = $ReallocAsyncCtx6 + 4 | 0; //@line 15780
  HEAP32[$38 >> 2] = $15; //@line 15781
  $39 = $ReallocAsyncCtx6 + 8 | 0; //@line 15782
  HEAP32[$39 >> 2] = $19; //@line 15783
  $40 = $ReallocAsyncCtx6 + 12 | 0; //@line 15784
  HEAP32[$40 >> 2] = $21; //@line 15785
  $41 = $ReallocAsyncCtx6 + 16 | 0; //@line 15786
  HEAP32[$41 >> 2] = $23; //@line 15787
  $42 = $ReallocAsyncCtx6 + 20 | 0; //@line 15788
  HEAP32[$42 >> 2] = $25; //@line 15789
  $43 = $ReallocAsyncCtx6 + 24 | 0; //@line 15790
  HEAP32[$43 >> 2] = $27; //@line 15791
  $44 = $ReallocAsyncCtx6 + 28 | 0; //@line 15792
  HEAP32[$44 >> 2] = $29; //@line 15793
  $45 = $ReallocAsyncCtx6 + 32 | 0; //@line 15794
  HEAP32[$45 >> 2] = $31; //@line 15795
  $46 = $ReallocAsyncCtx6 + 36 | 0; //@line 15796
  HEAP32[$46 >> 2] = $33; //@line 15797
  sp = STACKTOP; //@line 15798
  return;
 }
 if (!(HEAP8[$15 + 770 >> 0] | 0)) {
  HEAP32[$19 >> 2] = 6; //@line 15805
  _mbed_tracef(16, 10944, 11001, $19); //@line 15806
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($15); //@line 15807
  HEAP32[$23 >> 2] = 6; //@line 15808
  _mbed_tracef(16, 10944, 11030, $23); //@line 15809
  return;
 } else {
  HEAP32[$27 >> 2] = 5; //@line 15812
  _mbed_tracef(16, 10944, 11001, $27); //@line 15813
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($15); //@line 15814
  HEAP32[$31 >> 2] = 5; //@line 15815
  _mbed_tracef(16, 10944, 11030, $31); //@line 15816
  return;
 }
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_24($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 18775
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18777
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18779
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18781
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18783
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18785
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18787
 $15 = HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0; //@line 18790
 if (!$15) {
  $24 = HEAP32[$2 >> 2] | 0; //@line 18793
  $26 = $10 + 12 | 0; //@line 18795
  HEAP32[$10 >> 2] = 435; //@line 18796
  HEAP32[$10 + 4 >> 2] = 0; //@line 18798
  HEAP32[$10 + 8 >> 2] = $4; //@line 18800
  HEAP32[$26 >> 2] = 912; //@line 18801
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(28) | 0; //@line 18802
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($24, $4 + 1036 | 0, $10); //@line 18803
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 436; //@line 18806
   $27 = $ReallocAsyncCtx8 + 4 | 0; //@line 18807
   HEAP32[$27 >> 2] = $2; //@line 18808
   $28 = $ReallocAsyncCtx8 + 8 | 0; //@line 18809
   HEAP32[$28 >> 2] = $4; //@line 18810
   $29 = $ReallocAsyncCtx8 + 12 | 0; //@line 18811
   HEAP32[$29 >> 2] = $6; //@line 18812
   $30 = $ReallocAsyncCtx8 + 16 | 0; //@line 18813
   HEAP32[$30 >> 2] = $8; //@line 18814
   $31 = $ReallocAsyncCtx8 + 20 | 0; //@line 18815
   HEAP32[$31 >> 2] = $26; //@line 18816
   $32 = $ReallocAsyncCtx8 + 24 | 0; //@line 18817
   HEAP32[$32 >> 2] = $10; //@line 18818
   sp = STACKTOP; //@line 18819
   return;
  }
  ___async_unwind = 0; //@line 18822
  HEAP32[$ReallocAsyncCtx8 >> 2] = 436; //@line 18823
  $27 = $ReallocAsyncCtx8 + 4 | 0; //@line 18824
  HEAP32[$27 >> 2] = $2; //@line 18825
  $28 = $ReallocAsyncCtx8 + 8 | 0; //@line 18826
  HEAP32[$28 >> 2] = $4; //@line 18827
  $29 = $ReallocAsyncCtx8 + 12 | 0; //@line 18828
  HEAP32[$29 >> 2] = $6; //@line 18829
  $30 = $ReallocAsyncCtx8 + 16 | 0; //@line 18830
  HEAP32[$30 >> 2] = $8; //@line 18831
  $31 = $ReallocAsyncCtx8 + 20 | 0; //@line 18832
  HEAP32[$31 >> 2] = $26; //@line 18833
  $32 = $ReallocAsyncCtx8 + 24 | 0; //@line 18834
  HEAP32[$32 >> 2] = $10; //@line 18835
  sp = STACKTOP; //@line 18836
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 18840
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 18841
  FUNCTION_TABLE_vi[$18 & 1023]($12); //@line 18842
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 434; //@line 18845
   $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 18846
   HEAP32[$19 >> 2] = $2; //@line 18847
   $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 18848
   HEAP32[$20 >> 2] = $4; //@line 18849
   $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 18850
   HEAP32[$21 >> 2] = $8; //@line 18851
   $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 18852
   HEAP32[$22 >> 2] = $6; //@line 18853
   $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 18854
   HEAP32[$23 >> 2] = $10; //@line 18855
   sp = STACKTOP; //@line 18856
   return;
  }
  ___async_unwind = 0; //@line 18859
  HEAP32[$ReallocAsyncCtx2 >> 2] = 434; //@line 18860
  $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 18861
  HEAP32[$19 >> 2] = $2; //@line 18862
  $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 18863
  HEAP32[$20 >> 2] = $4; //@line 18864
  $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 18865
  HEAP32[$21 >> 2] = $8; //@line 18866
  $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 18867
  HEAP32[$22 >> 2] = $6; //@line 18868
  $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 18869
  HEAP32[$23 >> 2] = $10; //@line 18870
  sp = STACKTOP; //@line 18871
  return;
 }
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $20 = 0, $25 = 0, $32 = 0, $35 = 0, $38 = 0, $45 = 0, $47 = 0, $48 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx4 = 0, $AsyncCtx7 = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 15320
 STACKTOP = STACKTOP + 16 | 0; //@line 15321
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15321
 $vararg_buffer1 = sp + 8 | 0; //@line 15322
 _mbed_tracef(16, 13704, 14175, sp); //@line 15324
 $2 = HEAP32[$0 + 356 >> 2] | 0; //@line 15326
 $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 15328
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $0 + 1036 | 0); //@line 15329
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 420; //@line 15332
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 15334
  HEAP32[$AsyncCtx11 + 8 >> 2] = $vararg_buffer1; //@line 15336
  HEAP32[$AsyncCtx11 + 12 >> 2] = $vararg_buffer1; //@line 15338
  sp = STACKTOP; //@line 15339
  STACKTOP = sp; //@line 15340
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 15342
 HEAP32[$0 + 364 >> 2] = 0; //@line 15344
 $10 = $0 + 1160 | 0; //@line 15347
 HEAP8[$10 >> 0] = HEAP8[$0 + 378 >> 0] | 0; //@line 15348
 HEAP8[$0 + 1163 >> 0] = HEAP8[$0 + 1129 >> 0] | 0; //@line 15352
 HEAP8[$0 + 1176 >> 0] = HEAP8[$0 + 1141 >> 0] | 0; //@line 15356
 HEAP8[$0 + 1177 >> 0] = HEAP8[$0 + 369 >> 0] | 0; //@line 15360
 $20 = $0 + 1178 | 0; //@line 15361
 HEAP8[$20 >> 0] = 0; //@line 15362
 HEAP32[$0 + 1180 >> 2] = 0; //@line 15364
 do {
  if ((HEAP32[$0 + 360 >> 2] | 0) == 2) {
   $25 = HEAP32[$0 >> 2] | 0; //@line 15370
   $AsyncCtx7 = _emscripten_alloc_async_context(28, sp) | 0; //@line 15371
   __ZN7LoRaPHY20put_radio_to_standbyEv($25); //@line 15372
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 421; //@line 15375
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 15377
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 15379
    HEAP32[$AsyncCtx7 + 12 >> 2] = $10; //@line 15381
    HEAP32[$AsyncCtx7 + 16 >> 2] = $20; //@line 15383
    HEAP32[$AsyncCtx7 + 20 >> 2] = $vararg_buffer1; //@line 15385
    HEAP32[$AsyncCtx7 + 24 >> 2] = $vararg_buffer1; //@line 15387
    sp = STACKTOP; //@line 15388
    STACKTOP = sp; //@line 15389
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 15391
    break;
   }
  }
 } while (0);
 $32 = HEAP32[$0 >> 2] | 0; //@line 15396
 $35 = HEAP32[(HEAP32[$32 >> 2] | 0) + 24 >> 2] | 0; //@line 15399
 $38 = (__ZN11LoRaMacMcps14get_indicationEv($0 + 288 | 0) | 0) + 10 | 0; //@line 15402
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 15403
 FUNCTION_TABLE_iiii[$35 & 15]($32, $10, $38) | 0; //@line 15404
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 422; //@line 15407
  HEAP32[$AsyncCtx + 4 >> 2] = $20; //@line 15409
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 15411
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 15413
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer1; //@line 15415
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 15417
  sp = STACKTOP; //@line 15418
  STACKTOP = sp; //@line 15419
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15421
 $45 = (HEAP8[$20 >> 0] | 0) != 0; //@line 15423
 $47 = HEAP32[$0 + 1108 >> 2] | 0; //@line 15425
 _mbed_tracef(16, 13704, 13772, $vararg_buffer1); //@line 15426
 $48 = HEAP32[$0 >> 2] | 0; //@line 15427
 $AsyncCtx4 = _emscripten_alloc_async_context(4, sp) | 0; //@line 15428
 __ZN7LoRaPHY15setup_rx_windowEbj($48, $45, $47); //@line 15429
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 423; //@line 15432
  sp = STACKTOP; //@line 15433
  STACKTOP = sp; //@line 15434
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx4 | 0); //@line 15436
  STACKTOP = sp; //@line 15437
  return;
 }
}
function __ZN7LoRaMac11schedule_txEv__async_cb_305($0) {
 $0 = $0 | 0;
 var $$sink = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $26 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $48 = 0, $6 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 20645
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20649
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20651
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20653
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20657
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20659
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20661
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20663
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20665
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20667
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20671
 do {
  if (!(HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0)) {
   HEAP32[$4 + 972 >> 2] = (HEAP32[$4 + 1172 >> 2] | 0) + (HEAP32[$4 + 1120 >> 2] | 0); //@line 20682
   $$sink = $4 + 1124 | 0; //@line 20684
  } else {
   $37 = HEAP8[$4 + 893 >> 0] | 0; //@line 20687
   $38 = HEAP8[$6 >> 0] | 0; //@line 20688
   $40 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($4 + 4 | 0) | 0; //@line 20690
   _mbed_tracef(16, 13704, 14009, $8); //@line 20691
   $48 = ($40 & 255) + ($37 & 255) | 0; //@line 20699
   if ($48 >>> 0 < 256 & $48 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$12 >> 2] | 0, $38, (HEAP8[$4 + 369 >> 0] | 0) != 0) | 0) & 255) >>> 0) {
    HEAP32[$4 + 972 >> 2] = (HEAP32[$4 + 1172 >> 2] | 0) + (HEAP32[$4 + 1112 >> 2] | 0); //@line 20711
    $$sink = $4 + 1116 | 0; //@line 20713
    break;
   } else {
    HEAP32[___async_retval >> 2] = -1010; //@line 20717
    return;
   }
  }
 } while (0);
 HEAP32[$4 + 976 >> 2] = (HEAP32[$4 + 1196 >> 2] | 0) + (HEAP32[$$sink >> 2] | 0); //@line 20727
 $64 = HEAP32[$18 >> 2] | 0; //@line 20728
 if (!$64) {
  $66 = HEAP8[$20 >> 0] | 0; //@line 20731
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 20732
  __ZN7LoRaMac21send_frame_on_channelEh($4, $66) | 0; //@line 20733
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 404; //@line 20736
   $67 = $ReallocAsyncCtx7 + 4 | 0; //@line 20737
   HEAP32[$67 >> 2] = $14; //@line 20738
   $68 = $ReallocAsyncCtx7 + 8 | 0; //@line 20739
   HEAP32[$68 >> 2] = $16; //@line 20740
   sp = STACKTOP; //@line 20741
   return;
  }
  ___async_unwind = 0; //@line 20744
  HEAP32[$ReallocAsyncCtx7 >> 2] = 404; //@line 20745
  $67 = $ReallocAsyncCtx7 + 4 | 0; //@line 20746
  HEAP32[$67 >> 2] = $14; //@line 20747
  $68 = $ReallocAsyncCtx7 + 8 | 0; //@line 20748
  HEAP32[$68 >> 2] = $16; //@line 20749
  sp = STACKTOP; //@line 20750
  return;
 } else {
  $69 = $4 + 968 | 0; //@line 20753
  HEAP32[$69 >> 2] = HEAP32[$69 >> 2] | 16; //@line 20756
  HEAP32[$22 >> 2] = $64; //@line 20757
  _mbed_tracef(16, 13704, 14033, $22); //@line 20758
  $72 = HEAP32[$26 >> 2] | 0; //@line 20759
  $74 = HEAP32[$18 >> 2] | 0; //@line 20761
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 20762
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($72, $4 + 1016 | 0, $74); //@line 20763
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 405; //@line 20766
   $75 = $ReallocAsyncCtx6 + 4 | 0; //@line 20767
   HEAP32[$75 >> 2] = $14; //@line 20768
   $76 = $ReallocAsyncCtx6 + 8 | 0; //@line 20769
   HEAP32[$76 >> 2] = $16; //@line 20770
   sp = STACKTOP; //@line 20771
   return;
  }
  ___async_unwind = 0; //@line 20774
  HEAP32[$ReallocAsyncCtx6 >> 2] = 405; //@line 20775
  $75 = $ReallocAsyncCtx6 + 4 | 0; //@line 20776
  HEAP32[$75 >> 2] = $14; //@line 20777
  $76 = $ReallocAsyncCtx6 + 8 | 0; //@line 20778
  HEAP32[$76 >> 2] = $16; //@line 20779
  sp = STACKTOP; //@line 20780
  return;
 }
}
function _mbedtls_ccm_free($0) {
 $0 = $0 | 0;
 var $13 = 0, $17 = 0, $21 = 0, $25 = 0, $29 = 0, $33 = 0, $37 = 0, $41 = 0, $45 = 0, $49 = 0, $5 = 0, $53 = 0, $57 = 0, $61 = 0, $65 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2413
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2414
 _mbedtls_cipher_free($0); //@line 2415
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 571; //@line 2418
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2420
  sp = STACKTOP; //@line 2421
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2424
  HEAP8[$0 >> 0] = 0; //@line 2426
  HEAP8[$0 + 1 >> 0] = 0; //@line 2428
  HEAP8[$0 + 2 >> 0] = 0; //@line 2430
  $5 = $0 + 4 | 0; //@line 2431
  HEAP8[$0 + 3 >> 0] = 0; //@line 2432
  HEAP8[$5 >> 0] = 0; //@line 2434
  HEAP8[$5 + 1 >> 0] = 0; //@line 2436
  HEAP8[$5 + 2 >> 0] = 0; //@line 2438
  $9 = $5 + 4 | 0; //@line 2439
  HEAP8[$5 + 3 >> 0] = 0; //@line 2440
  HEAP8[$9 >> 0] = 0; //@line 2442
  HEAP8[$9 + 1 >> 0] = 0; //@line 2444
  HEAP8[$9 + 2 >> 0] = 0; //@line 2446
  $13 = $5 + 8 | 0; //@line 2447
  HEAP8[$9 + 3 >> 0] = 0; //@line 2448
  HEAP8[$13 >> 0] = 0; //@line 2450
  HEAP8[$13 + 1 >> 0] = 0; //@line 2452
  HEAP8[$13 + 2 >> 0] = 0; //@line 2454
  $17 = $5 + 12 | 0; //@line 2455
  HEAP8[$13 + 3 >> 0] = 0; //@line 2456
  HEAP8[$17 >> 0] = 0; //@line 2458
  HEAP8[$17 + 1 >> 0] = 0; //@line 2460
  HEAP8[$17 + 2 >> 0] = 0; //@line 2462
  $21 = $5 + 16 | 0; //@line 2463
  HEAP8[$17 + 3 >> 0] = 0; //@line 2464
  HEAP8[$21 >> 0] = 0; //@line 2466
  HEAP8[$21 + 1 >> 0] = 0; //@line 2468
  HEAP8[$21 + 2 >> 0] = 0; //@line 2470
  $25 = $5 + 20 | 0; //@line 2471
  HEAP8[$21 + 3 >> 0] = 0; //@line 2472
  HEAP8[$25 >> 0] = 0; //@line 2474
  HEAP8[$25 + 1 >> 0] = 0; //@line 2476
  HEAP8[$25 + 2 >> 0] = 0; //@line 2478
  $29 = $5 + 24 | 0; //@line 2479
  HEAP8[$25 + 3 >> 0] = 0; //@line 2480
  HEAP8[$29 >> 0] = 0; //@line 2482
  HEAP8[$29 + 1 >> 0] = 0; //@line 2484
  HEAP8[$29 + 2 >> 0] = 0; //@line 2486
  $33 = $5 + 28 | 0; //@line 2487
  HEAP8[$29 + 3 >> 0] = 0; //@line 2488
  HEAP8[$33 >> 0] = 0; //@line 2490
  HEAP8[$33 + 1 >> 0] = 0; //@line 2492
  HEAP8[$33 + 2 >> 0] = 0; //@line 2494
  $37 = $5 + 32 | 0; //@line 2495
  HEAP8[$33 + 3 >> 0] = 0; //@line 2496
  HEAP8[$37 >> 0] = 0; //@line 2498
  HEAP8[$37 + 1 >> 0] = 0; //@line 2500
  HEAP8[$37 + 2 >> 0] = 0; //@line 2502
  $41 = $5 + 36 | 0; //@line 2503
  HEAP8[$37 + 3 >> 0] = 0; //@line 2504
  HEAP8[$41 >> 0] = 0; //@line 2506
  HEAP8[$41 + 1 >> 0] = 0; //@line 2508
  HEAP8[$41 + 2 >> 0] = 0; //@line 2510
  $45 = $5 + 40 | 0; //@line 2511
  HEAP8[$41 + 3 >> 0] = 0; //@line 2512
  HEAP8[$45 >> 0] = 0; //@line 2514
  HEAP8[$45 + 1 >> 0] = 0; //@line 2516
  HEAP8[$45 + 2 >> 0] = 0; //@line 2518
  $49 = $5 + 44 | 0; //@line 2519
  HEAP8[$45 + 3 >> 0] = 0; //@line 2520
  HEAP8[$49 >> 0] = 0; //@line 2522
  HEAP8[$49 + 1 >> 0] = 0; //@line 2524
  HEAP8[$49 + 2 >> 0] = 0; //@line 2526
  $53 = $5 + 48 | 0; //@line 2527
  HEAP8[$49 + 3 >> 0] = 0; //@line 2528
  HEAP8[$53 >> 0] = 0; //@line 2530
  HEAP8[$53 + 1 >> 0] = 0; //@line 2532
  HEAP8[$53 + 2 >> 0] = 0; //@line 2534
  $57 = $5 + 52 | 0; //@line 2535
  HEAP8[$53 + 3 >> 0] = 0; //@line 2536
  HEAP8[$57 >> 0] = 0; //@line 2538
  HEAP8[$57 + 1 >> 0] = 0; //@line 2540
  HEAP8[$57 + 2 >> 0] = 0; //@line 2542
  $61 = $5 + 56 | 0; //@line 2543
  HEAP8[$57 + 3 >> 0] = 0; //@line 2544
  HEAP8[$61 >> 0] = 0; //@line 2546
  HEAP8[$61 + 1 >> 0] = 0; //@line 2548
  HEAP8[$61 + 2 >> 0] = 0; //@line 2550
  $65 = $5 + 60 | 0; //@line 2551
  HEAP8[$61 + 3 >> 0] = 0; //@line 2552
  HEAP8[$65 >> 0] = 0; //@line 2554
  HEAP8[$65 + 1 >> 0] = 0; //@line 2556
  HEAP8[$65 + 2 >> 0] = 0; //@line 2558
  HEAP8[$65 + 3 >> 0] = 0; //@line 2559
  return;
 }
}
function _vfprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $13 = 0, $14 = 0, $19 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $43 = 0, $5 = 0, $51 = 0, $6 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 12016
 STACKTOP = STACKTOP + 224 | 0; //@line 12017
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 12017
 $3 = sp + 120 | 0; //@line 12018
 $4 = sp + 80 | 0; //@line 12019
 $5 = sp; //@line 12020
 $6 = sp + 136 | 0; //@line 12021
 dest = $4; //@line 12022
 stop = dest + 40 | 0; //@line 12022
 do {
  HEAP32[dest >> 2] = 0; //@line 12022
  dest = dest + 4 | 0; //@line 12022
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 12024
 if ((_printf_core(0, $1, $3, $5, $4) | 0) < 0) {
  $$0 = -1; //@line 12028
 } else {
  if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
   $43 = ___lockfile($0) | 0; //@line 12035
  } else {
   $43 = 0; //@line 12037
  }
  $13 = HEAP32[$0 >> 2] | 0; //@line 12039
  $14 = $13 & 32; //@line 12040
  if ((HEAP8[$0 + 74 >> 0] | 0) < 1) {
   HEAP32[$0 >> 2] = $13 & -33; //@line 12046
  }
  $19 = $0 + 48 | 0; //@line 12048
  do {
   if (!(HEAP32[$19 >> 2] | 0)) {
    $23 = $0 + 44 | 0; //@line 12053
    $24 = HEAP32[$23 >> 2] | 0; //@line 12054
    HEAP32[$23 >> 2] = $6; //@line 12055
    $25 = $0 + 28 | 0; //@line 12056
    HEAP32[$25 >> 2] = $6; //@line 12057
    $26 = $0 + 20 | 0; //@line 12058
    HEAP32[$26 >> 2] = $6; //@line 12059
    HEAP32[$19 >> 2] = 80; //@line 12060
    $28 = $0 + 16 | 0; //@line 12062
    HEAP32[$28 >> 2] = $6 + 80; //@line 12063
    $29 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 12064
    if (!$24) {
     $$1 = $29; //@line 12067
    } else {
     $32 = HEAP32[$0 + 36 >> 2] | 0; //@line 12070
     $AsyncCtx = _emscripten_alloc_async_context(64, sp) | 0; //@line 12071
     FUNCTION_TABLE_iiii[$32 & 15]($0, 0, 0) | 0; //@line 12072
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 658; //@line 12075
      HEAP32[$AsyncCtx + 4 >> 2] = $26; //@line 12077
      HEAP32[$AsyncCtx + 8 >> 2] = $29; //@line 12079
      HEAP32[$AsyncCtx + 12 >> 2] = $24; //@line 12081
      HEAP32[$AsyncCtx + 16 >> 2] = $23; //@line 12083
      HEAP32[$AsyncCtx + 20 >> 2] = $19; //@line 12085
      HEAP32[$AsyncCtx + 24 >> 2] = $28; //@line 12087
      HEAP32[$AsyncCtx + 28 >> 2] = $25; //@line 12089
      HEAP32[$AsyncCtx + 32 >> 2] = $0; //@line 12091
      HEAP32[$AsyncCtx + 36 >> 2] = $14; //@line 12093
      HEAP32[$AsyncCtx + 40 >> 2] = $43; //@line 12095
      HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 12097
      HEAP32[$AsyncCtx + 48 >> 2] = $6; //@line 12099
      HEAP32[$AsyncCtx + 52 >> 2] = $5; //@line 12101
      HEAP32[$AsyncCtx + 56 >> 2] = $4; //@line 12103
      HEAP32[$AsyncCtx + 60 >> 2] = $3; //@line 12105
      sp = STACKTOP; //@line 12106
      STACKTOP = sp; //@line 12107
      return 0; //@line 12107
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 12109
      $$ = (HEAP32[$26 >> 2] | 0) == 0 ? -1 : $29; //@line 12112
      HEAP32[$23 >> 2] = $24; //@line 12113
      HEAP32[$19 >> 2] = 0; //@line 12114
      HEAP32[$28 >> 2] = 0; //@line 12115
      HEAP32[$25 >> 2] = 0; //@line 12116
      HEAP32[$26 >> 2] = 0; //@line 12117
      $$1 = $$; //@line 12118
      break;
     }
    }
   } else {
    $$1 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 12124
   }
  } while (0);
  $51 = HEAP32[$0 >> 2] | 0; //@line 12127
  HEAP32[$0 >> 2] = $51 | $14; //@line 12132
  if ($43 | 0) {
   ___unlockfile($0); //@line 12135
  }
  $$0 = ($51 & 32 | 0) == 0 ? $$1 : -1; //@line 12137
 }
 STACKTOP = sp; //@line 12139
 return $$0 | 0; //@line 12139
}
function __ZN12LoRaWANStack9handle_rxEhPhth($0, $1, $2, $3, $trunc) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $trunc = $trunc | 0;
 var $$0$off0 = 0, $$029 = 0, $$1 = 0, $$pre$phi33Z2D = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $18 = 0, $19 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $31 = 0, $34 = 0, $36 = 0, $40 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8569
 STACKTOP = STACKTOP + 16 | 0; //@line 8570
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 8570
 $vararg_buffer1 = sp + 8 | 0; //@line 8571
 $vararg_buffer = sp; //@line 8572
 if (!(HEAP8[$0 + 1932 >> 0] | 0)) {
  $$1 = -1017; //@line 8577
  STACKTOP = sp; //@line 8578
  return $$1 | 0; //@line 8578
 }
 $7 = $0 + 2236 | 0; //@line 8580
 if (!(HEAP8[$7 >> 0] | 0)) {
  $$1 = -1001; //@line 8584
  STACKTOP = sp; //@line 8585
  return $$1 | 0; //@line 8585
 }
 if (!$2) {
  $$1 = -1003; //@line 8589
  STACKTOP = sp; //@line 8590
  return $$1 | 0; //@line 8590
 }
 $11 = $0 + 2256 | 0; //@line 8592
 $12 = HEAP32[$11 >> 2] | 0; //@line 8593
 $13 = $0 + 2260 | 0; //@line 8594
 $14 = HEAP16[$13 >> 1] | 0; //@line 8595
 if ((HEAP8[$0 + 2253 >> 0] | 0) != $1 << 24 >> 24) {
  $$1 = -1001; //@line 8600
  STACKTOP = sp; //@line 8601
  return $$1 | 0; //@line 8601
 }
 $18 = $0 + 2244 | 0; //@line 8603
 $19 = HEAP32[$18 >> 2] | 0; //@line 8604
 L13 : do {
  if (($19 | 0) == 1) {
   switch ($trunc & 15) {
   case 10:
   case 6:
   case 2:
    {
     break;
    }
   default:
    {
     break L13;
    }
   }
   HEAP32[$vararg_buffer >> 2] = $trunc & 255; //@line 8618
   _mbed_tracef(16, 12332, 13462, $vararg_buffer); //@line 8619
   $23 = HEAP32[$18 >> 2] | 0; //@line 8621
   label = 8; //@line 8622
  } else {
   $23 = $19; //@line 8624
   label = 8; //@line 8625
  }
 } while (0);
 L16 : do {
  if ((label | 0) == 8) {
   if (!$23) {
    switch ($trunc & 15) {
    case 9:
    case 5:
    case 1:
     {
      break;
     }
    default:
     {
      break L16;
     }
    }
    HEAP32[$vararg_buffer1 >> 2] = $trunc & 255; //@line 8642
    _mbed_tracef(16, 12332, 13495, $vararg_buffer1); //@line 8643
   }
  }
 } while (0);
 $25 = HEAP16[$13 >> 1] | 0; //@line 8647
 $26 = $25 & 65535; //@line 8648
 $27 = $3 & 65535; //@line 8649
 $29 = $0 + 2282 | 0; //@line 8651
 $31 = (HEAP16[$29 >> 1] | 0) == 0; //@line 8653
 if (($25 & 65535) > ($3 & 65535)) {
  if ($31) {
   $34 = $0 + 2280 | 0; //@line 8658
   HEAP16[$34 >> 1] = $26 - $27; //@line 8659
   HEAP16[$29 >> 1] = $3; //@line 8660
   _memcpy($2 | 0, $12 | 0, $27 | 0) | 0; //@line 8661
   $$0$off0 = 0; //@line 8662
   $$029 = $3; //@line 8662
   $$pre$phi33Z2D = $34; //@line 8662
  } else {
   label = 15; //@line 8664
  }
 } else {
  if ($31) {
   $36 = $0 + 2280 | 0; //@line 8669
   HEAP16[$36 >> 1] = 0; //@line 8670
   HEAP16[$29 >> 1] = 0; //@line 8671
   _memcpy($2 | 0, $12 | 0, $14 & 65535 | 0) | 0; //@line 8672
   $$0$off0 = 1; //@line 8673
   $$029 = $14; //@line 8673
   $$pre$phi33Z2D = $36; //@line 8673
  } else {
   label = 15; //@line 8675
  }
 }
 if ((label | 0) == 15) {
  $$0$off0 = 0; //@line 8680
  $$029 = $14; //@line 8680
  $$pre$phi33Z2D = $0 + 2280 | 0; //@line 8680
 }
 if (HEAP16[$$pre$phi33Z2D >> 1] | 0) {
  $40 = HEAP16[$0 + 2282 >> 1] | 0; //@line 8686
  if ($40 << 16 >> 16) {
   _memcpy($2 | 0, $12 + ($40 & 65535) | 0, $$029 & 65535 | 0) | 0; //@line 8692
  }
 }
 if (!$$0$off0) {
  $$1 = $$029; //@line 8696
  STACKTOP = sp; //@line 8697
  return $$1 | 0; //@line 8697
 }
 _memset(HEAP32[$11 >> 2] | 0, 0, 255) | 0; //@line 8700
 HEAP8[$7 >> 0] = 0; //@line 8701
 $$1 = $$029; //@line 8702
 STACKTOP = sp; //@line 8703
 return $$1 | 0; //@line 8703
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_184($0) {
 $0 = $0 | 0;
 var $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $29 = 0, $32 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 10470
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10476
 $14 = HEAP8[$0 + 19 >> 0] | 0; //@line 10486
 $16 = HEAP32[$0 + 20 >> 2] | 0; //@line 10488
 $18 = HEAP32[$0 + 24 >> 2] | 0; //@line 10490
 $20 = HEAP32[$0 + 28 >> 2] | 0; //@line 10492
 $22 = HEAP32[$0 + 32 >> 2] | 0; //@line 10494
 $29 = HEAP32[$6 >> 2] | 0; //@line 10501
 $32 = HEAP32[(HEAP32[$29 >> 2] | 0) + 20 >> 2] | 0; //@line 10504
 $34 = HEAP8[$0 + 17 >> 0] & 1 ? 2 : HEAP8[$0 + 16 >> 0] & 1; //@line 10506
 $35 = HEAP8[$0 + 18 >> 0] | 0; //@line 10507
 if ((HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) == (HEAPU8[(HEAP32[$0 + 8 >> 2] | 0) + 27 >> 0] | 0)) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 10510
  FUNCTION_TABLE_viiiiiiiiiiiiii[$32 & 1]($29, 0, $14, 25e3, $34, $35 * 1e3 | 0, 0, 5, 0, 1, 0, 0, 0, 3e3); //@line 10511
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 528; //@line 10514
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 10515
   HEAP32[$37 >> 2] = $6; //@line 10516
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 10517
   HEAP32[$38 >> 2] = $16; //@line 10518
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 10519
   HEAP32[$39 >> 2] = $18; //@line 10520
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 10521
   HEAP32[$40 >> 2] = $20; //@line 10522
   $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 10523
   HEAP32[$41 >> 2] = $22; //@line 10524
   sp = STACKTOP; //@line 10525
   return;
  }
  ___async_unwind = 0; //@line 10528
  HEAP32[$ReallocAsyncCtx3 >> 2] = 528; //@line 10529
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 10530
  HEAP32[$37 >> 2] = $6; //@line 10531
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 10532
  HEAP32[$38 >> 2] = $16; //@line 10533
  $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 10534
  HEAP32[$39 >> 2] = $18; //@line 10535
  $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 10536
  HEAP32[$40 >> 2] = $20; //@line 10537
  $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 10538
  HEAP32[$41 >> 2] = $22; //@line 10539
  sp = STACKTOP; //@line 10540
  return;
 } else {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 10543
  FUNCTION_TABLE_viiiiiiiiiiiiii[$32 & 1]($29, 1, $14, 0, $34, $35, 1, 8, 0, 1, 0, 0, 0, 3e3); //@line 10544
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 529; //@line 10547
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 10548
   HEAP32[$42 >> 2] = $6; //@line 10549
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 10550
   HEAP32[$43 >> 2] = $16; //@line 10551
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 10552
   HEAP32[$44 >> 2] = $18; //@line 10553
   $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 10554
   HEAP32[$45 >> 2] = $20; //@line 10555
   $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 10556
   HEAP32[$46 >> 2] = $22; //@line 10557
   sp = STACKTOP; //@line 10558
   return;
  }
  ___async_unwind = 0; //@line 10561
  HEAP32[$ReallocAsyncCtx4 >> 2] = 529; //@line 10562
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 10563
  HEAP32[$42 >> 2] = $6; //@line 10564
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 10565
  HEAP32[$43 >> 2] = $16; //@line 10566
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 10567
  HEAP32[$44 >> 2] = $18; //@line 10568
  $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 10569
  HEAP32[$45 >> 2] = $20; //@line 10570
  $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 10571
  HEAP32[$46 >> 2] = $22; //@line 10572
  sp = STACKTOP; //@line 10573
  return;
 }
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $2 = 0, $26 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 7898
 STACKTOP = STACKTOP + 32 | 0; //@line 7899
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 7899
 $vararg_buffer1 = sp + 8 | 0; //@line 7900
 $2 = $0 + 1876 | 0; //@line 7902
 if (HEAP32[$2 >> 2] | 0) {
  _mbed_tracef(16, 12332, 13239, sp); //@line 7906
  $$0 = 0; //@line 7907
  STACKTOP = sp; //@line 7908
  return $$0 | 0; //@line 7908
 }
 _mbed_tracef(16, 12332, 13259, $vararg_buffer1); //@line 7910
 HEAP32[$0 + 2288 >> 2] = $1; //@line 7912
 __ZN18LoRaWANTimeHandler24activate_timer_subsystemEPN6events10EventQueueE($0, $1); //@line 7913
 $6 = $0 + 4 | 0; //@line 7914
 $AsyncCtx9 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7917
 __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE($6, $0 + 1812 | 0, $0 + 1336 | 0, $1) | 0; //@line 7918
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 242; //@line 7921
  HEAP32[$AsyncCtx9 + 4 >> 2] = $vararg_buffer1; //@line 7923
  HEAP32[$AsyncCtx9 + 8 >> 2] = $6; //@line 7925
  HEAP32[$AsyncCtx9 + 12 >> 2] = $0; //@line 7927
  HEAP32[$AsyncCtx9 + 16 >> 2] = $2; //@line 7929
  sp = STACKTOP; //@line 7930
  STACKTOP = sp; //@line 7931
  return 0; //@line 7931
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 7933
 HEAP32[$vararg_buffer1 >> 2] = 2; //@line 7934
 $13 = $vararg_buffer1 + 4 | 0; //@line 7935
 HEAP8[$13 >> 0] = 1; //@line 7936
 $AsyncCtx5 = _emscripten_alloc_async_context(32, sp) | 0; //@line 7937
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($6, $vararg_buffer1) | 0; //@line 7938
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 243; //@line 7941
  HEAP32[$AsyncCtx5 + 4 >> 2] = $vararg_buffer1; //@line 7943
  HEAP32[$AsyncCtx5 + 8 >> 2] = $13; //@line 7945
  HEAP32[$AsyncCtx5 + 12 >> 2] = $6; //@line 7947
  HEAP32[$AsyncCtx5 + 16 >> 2] = $vararg_buffer1; //@line 7949
  HEAP32[$AsyncCtx5 + 20 >> 2] = $0; //@line 7951
  HEAP32[$AsyncCtx5 + 24 >> 2] = $2; //@line 7953
  HEAP32[$AsyncCtx5 + 28 >> 2] = $vararg_buffer1; //@line 7955
  sp = STACKTOP; //@line 7956
  STACKTOP = sp; //@line 7957
  return 0; //@line 7957
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 7959
 HEAP32[$vararg_buffer1 >> 2] = 7; //@line 7960
 HEAP8[$13 >> 0] = 1; //@line 7961
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 7962
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($6, $vararg_buffer1) | 0; //@line 7963
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 244; //@line 7966
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7968
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 7970
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 7972
  sp = STACKTOP; //@line 7973
  STACKTOP = sp; //@line 7974
  return 0; //@line 7974
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7976
 HEAP32[$0 + 1960 >> 2] = 0; //@line 7978
 HEAP32[$0 + 1956 >> 2] = 0; //@line 7980
 HEAP32[$2 >> 2] = 1; //@line 7981
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7982
 $26 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 7983
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 245; //@line 7986
  HEAP32[$AsyncCtx12 + 4 >> 2] = $vararg_buffer1; //@line 7988
  sp = STACKTOP; //@line 7989
  STACKTOP = sp; //@line 7990
  return 0; //@line 7990
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 7992
 $$0 = $26; //@line 7993
 STACKTOP = sp; //@line 7994
 return $$0 | 0; //@line 7994
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_35($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $23 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $39 = 0, $4 = 0, $45 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19458
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19462
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19464
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19466
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19468
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19470
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19472
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19474
 if ((HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) != 2) {
  if (!(HEAP8[$8 + 373 >> 0] | 0)) {
   HEAP8[$8 + 376 >> 0] = ($10 | 0) == 0 & (HEAP8[$8 + 944 >> 0] & 8) != 0 & 1; //@line 19490
   $39 = HEAP8[$8 + 378 >> 0] | 0; //@line 19492
   HEAP8[$8 + 379 >> 0] = $39; //@line 19494
   HEAP8[$12 >> 0] = $39; //@line 19495
   HEAP8[$14 + 1 >> 0] = HEAP8[$8 + 372 >> 0] | 0; //@line 19499
   HEAP32[$14 + 4 >> 2] = $16; //@line 19501
   $45 = HEAP32[$8 >> 2] | 0; //@line 19502
   $48 = HEAP32[(HEAP32[$45 >> 2] | 0) + 12 >> 2] | 0; //@line 19505
   $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 19506
   FUNCTION_TABLE_vii[$48 & 31]($45, $14); //@line 19507
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 285; //@line 19510
    $49 = $ReallocAsyncCtx + 4 | 0; //@line 19511
    HEAP32[$49 >> 2] = $8; //@line 19512
    $50 = $ReallocAsyncCtx + 8 | 0; //@line 19513
    HEAP32[$50 >> 2] = $16; //@line 19514
    $51 = $ReallocAsyncCtx + 12 | 0; //@line 19515
    HEAP32[$51 >> 2] = $12; //@line 19516
    sp = STACKTOP; //@line 19517
    return;
   }
   ___async_unwind = 0; //@line 19520
   HEAP32[$ReallocAsyncCtx >> 2] = 285; //@line 19521
   $49 = $ReallocAsyncCtx + 4 | 0; //@line 19522
   HEAP32[$49 >> 2] = $8; //@line 19523
   $50 = $ReallocAsyncCtx + 8 | 0; //@line 19524
   HEAP32[$50 >> 2] = $16; //@line 19525
   $51 = $ReallocAsyncCtx + 12 | 0; //@line 19526
   HEAP32[$51 >> 2] = $12; //@line 19527
   sp = STACKTOP; //@line 19528
   return;
  }
 }
 $21 = HEAP32[$6 >> 2] | 0; //@line 19532
 $23 = HEAP32[$4 >> 2] | 0; //@line 19534
 $26 = (__ZN7LoRaPHY15get_ack_timeoutEv(HEAP32[$8 >> 2] | 0) | 0) + $23 | 0; //@line 19537
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 19538
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $8 + 1076 | 0, $26); //@line 19539
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 284; //@line 19542
  $27 = $ReallocAsyncCtx2 + 4 | 0; //@line 19543
  HEAP32[$27 >> 2] = $8; //@line 19544
  $28 = $ReallocAsyncCtx2 + 8 | 0; //@line 19545
  HEAP32[$28 >> 2] = $10; //@line 19546
  $29 = $ReallocAsyncCtx2 + 12 | 0; //@line 19547
  HEAP32[$29 >> 2] = $12; //@line 19548
  $30 = $ReallocAsyncCtx2 + 16 | 0; //@line 19549
  HEAP32[$30 >> 2] = $14; //@line 19550
  $31 = $ReallocAsyncCtx2 + 20 | 0; //@line 19551
  HEAP32[$31 >> 2] = $16; //@line 19552
  sp = STACKTOP; //@line 19553
  return;
 }
 ___async_unwind = 0; //@line 19556
 HEAP32[$ReallocAsyncCtx2 >> 2] = 284; //@line 19557
 $27 = $ReallocAsyncCtx2 + 4 | 0; //@line 19558
 HEAP32[$27 >> 2] = $8; //@line 19559
 $28 = $ReallocAsyncCtx2 + 8 | 0; //@line 19560
 HEAP32[$28 >> 2] = $10; //@line 19561
 $29 = $ReallocAsyncCtx2 + 12 | 0; //@line 19562
 HEAP32[$29 >> 2] = $12; //@line 19563
 $30 = $ReallocAsyncCtx2 + 16 | 0; //@line 19564
 HEAP32[$30 >> 2] = $14; //@line 19565
 $31 = $ReallocAsyncCtx2 + 20 | 0; //@line 19566
 HEAP32[$31 >> 2] = $16; //@line 19567
 sp = STACKTOP; //@line 19568
 return;
}
function __ZN7LoRaMac10disconnectEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $14 = 0, $18 = 0, $2 = 0, $21 = 0, $29 = 0, $30 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 15968
 $1 = $0 + 356 | 0; //@line 15969
 $2 = HEAP32[$1 >> 2] | 0; //@line 15970
 $AsyncCtx19 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15972
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $0 + 996 | 0); //@line 15973
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 444; //@line 15976
  HEAP32[$AsyncCtx19 + 4 >> 2] = $1; //@line 15978
  HEAP32[$AsyncCtx19 + 8 >> 2] = $0; //@line 15980
  sp = STACKTOP; //@line 15981
  return;
 }
 _emscripten_free_async_context($AsyncCtx19 | 0); //@line 15984
 $6 = HEAP32[$1 >> 2] | 0; //@line 15985
 $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15987
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($6, $0 + 1016 | 0); //@line 15988
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 445; //@line 15991
  HEAP32[$AsyncCtx15 + 4 >> 2] = $1; //@line 15993
  HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 15995
  sp = STACKTOP; //@line 15996
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 15999
 $10 = HEAP32[$1 >> 2] | 0; //@line 16000
 $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16002
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($10, $0 + 1036 | 0); //@line 16003
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 446; //@line 16006
  HEAP32[$AsyncCtx11 + 4 >> 2] = $1; //@line 16008
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 16010
  sp = STACKTOP; //@line 16011
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 16014
 $14 = HEAP32[$1 >> 2] | 0; //@line 16015
 $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16017
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($14, $0 + 1056 | 0); //@line 16018
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 447; //@line 16021
  HEAP32[$AsyncCtx7 + 4 >> 2] = $1; //@line 16023
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 16025
  sp = STACKTOP; //@line 16026
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 16029
 $18 = HEAP32[$1 >> 2] | 0; //@line 16030
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 16032
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($18, $0 + 1076 | 0); //@line 16033
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 448; //@line 16036
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 16038
  sp = STACKTOP; //@line 16039
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16042
 $21 = HEAP32[$0 >> 2] | 0; //@line 16043
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 16044
 __ZN7LoRaPHY18put_radio_to_sleepEv($21); //@line 16045
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 449; //@line 16048
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16050
  sp = STACKTOP; //@line 16051
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16054
  HEAP8[$0 + 372 >> 0] = 0; //@line 16056
  HEAP8[$0 + 377 >> 0] = 0; //@line 16058
  HEAP8[$0 + 371 >> 0] = 1; //@line 16060
  HEAP8[$0 + 373 >> 0] = 0; //@line 16062
  HEAP8[$0 + 374 >> 0] = 0; //@line 16064
  HEAP8[$0 + 944 >> 0] = 0; //@line 16066
  $29 = $0 + 968 | 0; //@line 16067
  HEAP32[$29 >> 2] = 0; //@line 16068
  $30 = $0 + 4 | 0; //@line 16069
  __ZN14LoRaMacCommand20clear_command_bufferEv($30); //@line 16070
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($30); //@line 16071
  __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($30); //@line 16072
  HEAP32[$29 >> 2] = 0; //@line 16073
  return;
 }
}
function ___dynamic_cast($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $24 = 0, $30 = 0, $33 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 16228
 STACKTOP = STACKTOP + 64 | 0; //@line 16229
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 16229
 $4 = sp; //@line 16230
 $5 = HEAP32[$0 >> 2] | 0; //@line 16231
 $8 = $0 + (HEAP32[$5 + -8 >> 2] | 0) | 0; //@line 16234
 $10 = HEAP32[$5 + -4 >> 2] | 0; //@line 16236
 HEAP32[$4 >> 2] = $2; //@line 16237
 HEAP32[$4 + 4 >> 2] = $0; //@line 16239
 HEAP32[$4 + 8 >> 2] = $1; //@line 16241
 HEAP32[$4 + 12 >> 2] = $3; //@line 16243
 $14 = $4 + 16 | 0; //@line 16244
 $15 = $4 + 20 | 0; //@line 16245
 $16 = $4 + 24 | 0; //@line 16246
 $17 = $4 + 28 | 0; //@line 16247
 $18 = $4 + 32 | 0; //@line 16248
 $19 = $4 + 40 | 0; //@line 16249
 dest = $14; //@line 16250
 stop = dest + 36 | 0; //@line 16250
 do {
  HEAP32[dest >> 2] = 0; //@line 16250
  dest = dest + 4 | 0; //@line 16250
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 36 >> 1] = 0; //@line 16250
 HEAP8[$14 + 38 >> 0] = 0; //@line 16250
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10, $2, 0) | 0) {
   HEAP32[$4 + 48 >> 2] = 1; //@line 16255
   $24 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 16258
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 16259
   FUNCTION_TABLE_viiiiii[$24 & 3]($10, $4, $8, $8, 1, 0); //@line 16260
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 670; //@line 16263
    HEAP32[$AsyncCtx + 4 >> 2] = $16; //@line 16265
    HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 16267
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 16269
    sp = STACKTOP; //@line 16270
    STACKTOP = sp; //@line 16271
    return 0; //@line 16271
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16273
    $$0 = (HEAP32[$16 >> 2] | 0) == 1 ? $8 : 0; //@line 16277
    break;
   }
  } else {
   $30 = $4 + 36 | 0; //@line 16281
   $33 = HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] | 0; //@line 16284
   $AsyncCtx3 = _emscripten_alloc_async_context(36, sp) | 0; //@line 16285
   FUNCTION_TABLE_viiiii[$33 & 7]($10, $4, $8, 1, 0); //@line 16286
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 671; //@line 16289
    HEAP32[$AsyncCtx3 + 4 >> 2] = $30; //@line 16291
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 16293
    HEAP32[$AsyncCtx3 + 12 >> 2] = $19; //@line 16295
    HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 16297
    HEAP32[$AsyncCtx3 + 20 >> 2] = $18; //@line 16299
    HEAP32[$AsyncCtx3 + 24 >> 2] = $15; //@line 16301
    HEAP32[$AsyncCtx3 + 28 >> 2] = $16; //@line 16303
    HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 16305
    sp = STACKTOP; //@line 16306
    STACKTOP = sp; //@line 16307
    return 0; //@line 16307
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16309
   switch (HEAP32[$30 >> 2] | 0) {
   case 0:
    {
     $$0 = (HEAP32[$19 >> 2] | 0) == 1 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1 ? HEAP32[$15 >> 2] | 0 : 0; //@line 16323
     break L1;
     break;
    }
   case 1:
    {
     break;
    }
   default:
    {
     $$0 = 0; //@line 16331
     break L1;
    }
   }
   if ((HEAP32[$16 >> 2] | 0) != 1) {
    if (!((HEAP32[$19 >> 2] | 0) == 0 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1)) {
     $$0 = 0; //@line 16347
     break;
    }
   }
   $$0 = HEAP32[$14 >> 2] | 0; //@line 16352
  }
 } while (0);
 STACKTOP = sp; //@line 16355
 return $$0 | 0; //@line 16355
}
function __ZN12radio_eventsD2Ev__async_cb_55($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $32 = 0, $35 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 21421
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21423
 $4 = HEAP32[$2 + 76 >> 2] | 0; //@line 21425
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 21430
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 21431
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 64 | 0); //@line 21432
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 265; //@line 21435
   $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 21436
   HEAP32[$9 >> 2] = $2; //@line 21437
   sp = STACKTOP; //@line 21438
   return;
  }
  ___async_unwind = 0; //@line 21441
  HEAP32[$ReallocAsyncCtx3 >> 2] = 265; //@line 21442
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 21443
  HEAP32[$9 >> 2] = $2; //@line 21444
  sp = STACKTOP; //@line 21445
  return;
 }
 $11 = HEAP32[$2 + 60 >> 2] | 0; //@line 21449
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 21454
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 21455
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 48 | 0); //@line 21456
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 266; //@line 21459
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 21460
   HEAP32[$16 >> 2] = $2; //@line 21461
   sp = STACKTOP; //@line 21462
   return;
  }
  ___async_unwind = 0; //@line 21465
  HEAP32[$ReallocAsyncCtx4 >> 2] = 266; //@line 21466
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 21467
  HEAP32[$16 >> 2] = $2; //@line 21468
  sp = STACKTOP; //@line 21469
  return;
 }
 $18 = HEAP32[$2 + 44 >> 2] | 0; //@line 21473
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 21478
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 21479
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 32 | 0); //@line 21480
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 267; //@line 21483
   $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 21484
   HEAP32[$23 >> 2] = $2; //@line 21485
   sp = STACKTOP; //@line 21486
   return;
  }
  ___async_unwind = 0; //@line 21489
  HEAP32[$ReallocAsyncCtx5 >> 2] = 267; //@line 21490
  $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 21491
  HEAP32[$23 >> 2] = $2; //@line 21492
  sp = STACKTOP; //@line 21493
  return;
 }
 $25 = HEAP32[$2 + 28 >> 2] | 0; //@line 21497
 if ($25 | 0) {
  $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 21502
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 21503
  FUNCTION_TABLE_vi[$29 & 1023]($2 + 16 | 0); //@line 21504
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 268; //@line 21507
   $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 21508
   HEAP32[$30 >> 2] = $2; //@line 21509
   sp = STACKTOP; //@line 21510
   return;
  }
  ___async_unwind = 0; //@line 21513
  HEAP32[$ReallocAsyncCtx6 >> 2] = 268; //@line 21514
  $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 21515
  HEAP32[$30 >> 2] = $2; //@line 21516
  sp = STACKTOP; //@line 21517
  return;
 }
 $32 = HEAP32[$2 + 12 >> 2] | 0; //@line 21521
 if (!$32) {
  return;
 }
 $35 = HEAP32[$32 + 8 >> 2] | 0; //@line 21527
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 21528
 FUNCTION_TABLE_vi[$35 & 1023]($2); //@line 21529
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 269; //@line 21532
  sp = STACKTOP; //@line 21533
  return;
 }
 ___async_unwind = 0; //@line 21536
 HEAP32[$ReallocAsyncCtx7 >> 2] = 269; //@line 21537
 sp = STACKTOP; //@line 21538
 return;
}
function __ZN12LoRaWANStack17send_frame_to_macEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$pre$phiZ2D = 0, $$sink2$sink = 0, $1 = 0, $14 = 0, $2 = 0, $32 = 0, $4 = 0, $46 = 0, $54 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7374
 STACKTOP = STACKTOP + 48 | 0; //@line 7375
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 7375
 $1 = sp + 32 | 0; //@line 7379
 $2 = sp + 20 | 0; //@line 7380
 $4 = HEAP32[$0 + 1968 >> 2] | 0; //@line 7382
 HEAP32[$1 >> 2] = $4; //@line 7383
 L1 : do {
  switch ($4 | 0) {
  case 0:
   {
    HEAP32[$1 + 8 >> 2] = $0 + 1975; //@line 7389
    HEAP16[$1 + 12 >> 1] = HEAP16[$0 + 2230 >> 1] | 0; //@line 7393
    HEAP8[$1 + 4 >> 0] = HEAP8[$0 + 1972 >> 0] | 0; //@line 7397
    HEAP8[$1 + 6 >> 0] = 1; //@line 7399
    HEAP32[$2 >> 2] = 21; //@line 7400
    $14 = $0 + 4 | 0; //@line 7401
    if (!(__ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($14, $2) | 0)) {
     $$pre$phiZ2D = $14; //@line 7407
     $$sink2$sink = HEAP8[$2 + 4 >> 0] | 0; //@line 7407
     break L1;
    } else {
     _mbed_tracef(16, 12332, 12766, sp); //@line 7410
     $$pre$phiZ2D = $14; //@line 7413
     $$sink2$sink = __ZN7LoRaPHY23get_default_tx_datarateEv($0 + 1336 | 0) | 0; //@line 7413
     break L1;
    }
    break;
   }
  case 1:
   {
    HEAP32[$1 + 8 >> 2] = $0 + 1975; //@line 7421
    HEAP16[$1 + 12 >> 1] = HEAP16[$0 + 2230 >> 1] | 0; //@line 7425
    HEAP8[$1 + 4 >> 0] = HEAP8[$0 + 1972 >> 0] | 0; //@line 7429
    HEAP8[$1 + 6 >> 0] = HEAP8[$0 + 1974 >> 0] | 0; //@line 7433
    HEAP32[$2 >> 2] = 21; //@line 7434
    $32 = $0 + 4 | 0; //@line 7435
    if (!(__ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($32, $2) | 0)) {
     $$pre$phiZ2D = $32; //@line 7441
     $$sink2$sink = HEAP8[$2 + 4 >> 0] | 0; //@line 7441
     break L1;
    } else {
     _mbed_tracef(16, 12332, 12766, sp + 8 | 0); //@line 7444
     $$pre$phiZ2D = $32; //@line 7447
     $$sink2$sink = __ZN7LoRaPHY23get_default_tx_datarateEv($0 + 1336 | 0) | 0; //@line 7447
     break L1;
    }
    break;
   }
  case 3:
   {
    HEAP32[$1 + 8 >> 2] = $0 + 1975; //@line 7455
    HEAP16[$1 + 12 >> 1] = HEAP16[$0 + 2230 >> 1] | 0; //@line 7459
    HEAP8[$1 + 4 >> 0] = 0; //@line 7461
    HEAP8[$1 + 6 >> 0] = 1; //@line 7463
    HEAP32[$2 >> 2] = 21; //@line 7464
    $46 = $0 + 4 | 0; //@line 7465
    if (!(__ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($46, $2) | 0)) {
     $$pre$phiZ2D = $46; //@line 7471
     $$sink2$sink = HEAP8[$2 + 4 >> 0] | 0; //@line 7471
     break L1;
    } else {
     _mbed_tracef(16, 12332, 12766, sp + 16 | 0); //@line 7474
     $$pre$phiZ2D = $46; //@line 7477
     $$sink2$sink = __ZN7LoRaPHY23get_default_tx_datarateEv($0 + 1336 | 0) | 0; //@line 7477
     break L1;
    }
    break;
   }
  default:
   {
    $$0 = -1002; //@line 7483
    STACKTOP = sp; //@line 7484
    return $$0 | 0; //@line 7484
   }
  }
 } while (0);
 HEAP8[$1 + 5 >> 0] = $$sink2$sink; //@line 7489
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 7490
 $54 = __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t($$pre$phiZ2D, $1) | 0; //@line 7491
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 235; //@line 7494
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 7496
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 7498
  sp = STACKTOP; //@line 7499
  STACKTOP = sp; //@line 7500
  return 0; //@line 7500
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7502
 $$0 = $54; //@line 7503
 STACKTOP = sp; //@line 7504
 return $$0 | 0; //@line 7504
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_168($0) {
 $0 = $0 | 0;
 var $$040 = 0, $10 = 0, $12 = 0, $14 = 0, $19 = 0, $21 = 0, $25 = 0, $30 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 32398
 $4 = HEAP8[$0 + 5 >> 0] | 0; //@line 32403
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 32405
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 32407
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 32409
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 32411
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 32413
 if (!(HEAP8[$0 + 4 >> 0] & 1)) {
  HEAP8[___async_retval >> 0] = 0; //@line 32417
  return;
 }
 if (!(HEAP32[$12 + 20 >> 2] | 0)) {
  $19 = HEAP32[$10 + 112 >> 2] | 0; //@line 32425
  $21 = HEAPU8[$12 >> 0] | 0; //@line 32427
  $25 = HEAP32[$19 + ($21 * 12 | 0) + 4 >> 2] | 0; //@line 32431
  $$040 = ($25 | 0) == 0 ? HEAP32[$19 + ($21 * 12 | 0) >> 2] | 0 : $25; //@line 32434
 } else {
  $$040 = $8; //@line 32436
 }
 $30 = HEAP32[$10 + 96 >> 2] | 0; //@line 32441
 $32 = HEAP32[$10 + 104 >> 2] | 0; //@line 32443
 $33 = $4 & 255; //@line 32444
 $35 = HEAP8[(HEAP32[$10 + 88 >> 2] | 0) + $33 >> 0] | 0; //@line 32446
 $36 = HEAP32[$6 >> 2] | 0; //@line 32447
 $39 = HEAP32[(HEAP32[$36 >> 2] | 0) + 72 >> 2] | 0; //@line 32450
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(44) | 0; //@line 32451
 FUNCTION_TABLE_vi[$39 & 1023]($36); //@line 32452
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 520; //@line 32455
  $40 = $ReallocAsyncCtx4 + 4 | 0; //@line 32456
  HEAP32[$40 >> 2] = $6; //@line 32457
  $41 = $ReallocAsyncCtx4 + 8 | 0; //@line 32458
  HEAP32[$41 >> 2] = $$040; //@line 32459
  $42 = $ReallocAsyncCtx4 + 12 | 0; //@line 32460
  HEAP8[$42 >> 0] = $4; //@line 32461
  $43 = $ReallocAsyncCtx4 + 16 | 0; //@line 32462
  HEAP32[$43 >> 2] = $10; //@line 32463
  $44 = $ReallocAsyncCtx4 + 20 | 0; //@line 32464
  HEAP32[$44 >> 2] = $12; //@line 32465
  $45 = $ReallocAsyncCtx4 + 24 | 0; //@line 32466
  HEAP8[$45 >> 0] = $35; //@line 32467
  $46 = $ReallocAsyncCtx4 + 28 | 0; //@line 32468
  HEAP32[$46 >> 2] = $30; //@line 32469
  $47 = $ReallocAsyncCtx4 + 32 | 0; //@line 32470
  HEAP32[$47 >> 2] = $32; //@line 32471
  $48 = $ReallocAsyncCtx4 + 36 | 0; //@line 32472
  HEAP32[$48 >> 2] = $33; //@line 32473
  $49 = $ReallocAsyncCtx4 + 40 | 0; //@line 32474
  HEAP32[$49 >> 2] = $14; //@line 32475
  sp = STACKTOP; //@line 32476
  return;
 }
 ___async_unwind = 0; //@line 32479
 HEAP32[$ReallocAsyncCtx4 >> 2] = 520; //@line 32480
 $40 = $ReallocAsyncCtx4 + 4 | 0; //@line 32481
 HEAP32[$40 >> 2] = $6; //@line 32482
 $41 = $ReallocAsyncCtx4 + 8 | 0; //@line 32483
 HEAP32[$41 >> 2] = $$040; //@line 32484
 $42 = $ReallocAsyncCtx4 + 12 | 0; //@line 32485
 HEAP8[$42 >> 0] = $4; //@line 32486
 $43 = $ReallocAsyncCtx4 + 16 | 0; //@line 32487
 HEAP32[$43 >> 2] = $10; //@line 32488
 $44 = $ReallocAsyncCtx4 + 20 | 0; //@line 32489
 HEAP32[$44 >> 2] = $12; //@line 32490
 $45 = $ReallocAsyncCtx4 + 24 | 0; //@line 32491
 HEAP8[$45 >> 0] = $35; //@line 32492
 $46 = $ReallocAsyncCtx4 + 28 | 0; //@line 32493
 HEAP32[$46 >> 2] = $30; //@line 32494
 $47 = $ReallocAsyncCtx4 + 32 | 0; //@line 32495
 HEAP32[$47 >> 2] = $32; //@line 32496
 $48 = $ReallocAsyncCtx4 + 36 | 0; //@line 32497
 HEAP32[$48 >> 2] = $33; //@line 32498
 $49 = $ReallocAsyncCtx4 + 40 | 0; //@line 32499
 HEAP32[$49 >> 2] = $14; //@line 32500
 sp = STACKTOP; //@line 32501
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $18 = 0, $2 = 0, $21 = 0, $26 = 0, $27 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, sp = 0;
 sp = STACKTOP; //@line 1915
 STACKTOP = STACKTOP + 48 | 0; //@line 1916
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 1916
 $vararg_buffer4 = sp + 16 | 0; //@line 1917
 $vararg_buffer1 = sp + 8 | 0; //@line 1918
 $vararg_buffer = sp; //@line 1919
 $2 = sp + 24 | 0; //@line 1920
 HEAP32[$vararg_buffer >> 2] = $1; //@line 1921
 _mbed_tracef(16, 10944, 11592, $vararg_buffer); //@line 1922
 HEAP8[$0 + 688 >> 0] = 2; //@line 1924
 HEAP32[$vararg_buffer1 >> 2] = 3; //@line 1925
 _mbed_tracef(16, 10944, 11001, $vararg_buffer1); //@line 1926
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 1927
 HEAP32[$vararg_buffer4 >> 2] = 3; //@line 1928
 _mbed_tracef(16, 10944, 11030, $vararg_buffer4); //@line 1929
 $4 = $0 + 1240 | 0; //@line 1930
 $5 = $2 + 12 | 0; //@line 1931
 HEAP32[$2 >> 2] = 91; //@line 1932
 HEAP32[$2 + 4 >> 2] = 0; //@line 1934
 HEAP32[$2 + 8 >> 2] = $0; //@line 1936
 HEAP32[$5 >> 2] = 648; //@line 1937
 $6 = $0 + 1280 | 0; //@line 1938
 if (($6 | 0) != ($2 | 0)) {
  $8 = $0 + 1292 | 0; //@line 1941
  $9 = HEAP32[$8 >> 2] | 0; //@line 1942
  do {
   if ($9 | 0) {
    $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 1947
    $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 1948
    FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 1949
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 92; //@line 1952
     HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 1954
     HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 1956
     HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 1958
     HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 1960
     HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 1962
     sp = STACKTOP; //@line 1963
     STACKTOP = sp; //@line 1964
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 1966
     break;
    }
   }
  } while (0);
  $18 = HEAP32[$5 >> 2] | 0; //@line 1971
  do {
   if (!$18) {
    $26 = 0; //@line 1975
   } else {
    $21 = HEAP32[$18 + 4 >> 2] | 0; //@line 1978
    $AsyncCtx8 = _emscripten_alloc_async_context(20, sp) | 0; //@line 1979
    FUNCTION_TABLE_vii[$21 & 31]($6, $2); //@line 1980
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 93; //@line 1983
     HEAP32[$AsyncCtx8 + 4 >> 2] = $5; //@line 1985
     HEAP32[$AsyncCtx8 + 8 >> 2] = $8; //@line 1987
     HEAP32[$AsyncCtx8 + 12 >> 2] = $4; //@line 1989
     HEAP32[$AsyncCtx8 + 16 >> 2] = $2; //@line 1991
     sp = STACKTOP; //@line 1992
     STACKTOP = sp; //@line 1993
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx8 | 0); //@line 1995
     $26 = HEAP32[$5 >> 2] | 0; //@line 1997
     break;
    }
   }
  } while (0);
  HEAP32[$8 >> 2] = $26; //@line 2002
 }
 __ZN4mbed6Ticker5setupEy($4, 1e5, 0); //@line 2004
 $27 = HEAP32[$5 >> 2] | 0; //@line 2005
 if (!$27) {
  STACKTOP = sp; //@line 2008
  return;
 }
 $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 2011
 $AsyncCtx12 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2012
 FUNCTION_TABLE_vi[$30 & 1023]($2); //@line 2013
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 94; //@line 2016
  sp = STACKTOP; //@line 2017
  STACKTOP = sp; //@line 2018
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 2020
 STACKTOP = sp; //@line 2021
 return;
}
function _memchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = $1 & 255; //@line 11888
 $7 = ($2 | 0) != 0; //@line 11892
 L1 : do {
  if ($7 & ($0 & 3 | 0) != 0) {
   $8 = $1 & 255; //@line 11896
   $$03555 = $0; //@line 11897
   $$03654 = $2; //@line 11897
   while (1) {
    if ((HEAP8[$$03555 >> 0] | 0) == $8 << 24 >> 24) {
     $$035$lcssa65 = $$03555; //@line 11902
     $$036$lcssa64 = $$03654; //@line 11902
     label = 6; //@line 11903
     break L1;
    }
    $11 = $$03555 + 1 | 0; //@line 11906
    $12 = $$03654 + -1 | 0; //@line 11907
    $16 = ($12 | 0) != 0; //@line 11911
    if ($16 & ($11 & 3 | 0) != 0) {
     $$03555 = $11; //@line 11914
     $$03654 = $12; //@line 11914
    } else {
     $$035$lcssa = $11; //@line 11916
     $$036$lcssa = $12; //@line 11916
     $$lcssa = $16; //@line 11916
     label = 5; //@line 11917
     break;
    }
   }
  } else {
   $$035$lcssa = $0; //@line 11922
   $$036$lcssa = $2; //@line 11922
   $$lcssa = $7; //@line 11922
   label = 5; //@line 11923
  }
 } while (0);
 if ((label | 0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa; //@line 11928
   $$036$lcssa64 = $$036$lcssa; //@line 11928
   label = 6; //@line 11929
  } else {
   $$2 = $$035$lcssa; //@line 11931
   $$3 = 0; //@line 11931
  }
 }
 L8 : do {
  if ((label | 0) == 6) {
   $18 = $1 & 255; //@line 11937
   if ((HEAP8[$$035$lcssa65 >> 0] | 0) == $18 << 24 >> 24) {
    $$2 = $$035$lcssa65; //@line 11940
    $$3 = $$036$lcssa64; //@line 11940
   } else {
    $20 = Math_imul($3, 16843009) | 0; //@line 11942
    L11 : do {
     if ($$036$lcssa64 >>> 0 > 3) {
      $$046 = $$035$lcssa65; //@line 11946
      $$13745 = $$036$lcssa64; //@line 11946
      while (1) {
       $23 = HEAP32[$$046 >> 2] ^ $20; //@line 11949
       if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) {
        break;
       }
       $29 = $$046 + 4 | 0; //@line 11958
       $30 = $$13745 + -4 | 0; //@line 11959
       if ($30 >>> 0 > 3) {
        $$046 = $29; //@line 11962
        $$13745 = $30; //@line 11962
       } else {
        $$0$lcssa = $29; //@line 11964
        $$137$lcssa = $30; //@line 11964
        label = 11; //@line 11965
        break L11;
       }
      }
      $$140 = $$046; //@line 11969
      $$23839 = $$13745; //@line 11969
     } else {
      $$0$lcssa = $$035$lcssa65; //@line 11971
      $$137$lcssa = $$036$lcssa64; //@line 11971
      label = 11; //@line 11972
     }
    } while (0);
    if ((label | 0) == 11) {
     if (!$$137$lcssa) {
      $$2 = $$0$lcssa; //@line 11978
      $$3 = 0; //@line 11978
      break;
     } else {
      $$140 = $$0$lcssa; //@line 11981
      $$23839 = $$137$lcssa; //@line 11981
     }
    }
    while (1) {
     if ((HEAP8[$$140 >> 0] | 0) == $18 << 24 >> 24) {
      $$2 = $$140; //@line 11988
      $$3 = $$23839; //@line 11988
      break L8;
     }
     $35 = $$140 + 1 | 0; //@line 11991
     $$23839 = $$23839 + -1 | 0; //@line 11992
     if (!$$23839) {
      $$2 = $35; //@line 11995
      $$3 = 0; //@line 11995
      break;
     } else {
      $$140 = $35; //@line 11998
     }
    }
   }
  }
 } while (0);
 return ($$3 | 0 ? $$2 : 0) | 0; //@line 12006
}
function _fflush($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $12 = 0, $13 = 0, $25 = 0, $28 = 0, $34 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $phitmp = 0, sp = 0;
 sp = STACKTOP; //@line 11659
 do {
  if (!$0) {
   do {
    if (!(HEAP32[2612] | 0)) {
     $34 = 0; //@line 11667
    } else {
     $12 = HEAP32[2612] | 0; //@line 11669
     $AsyncCtx10 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11670
     $13 = _fflush($12) | 0; //@line 11671
     if (___async) {
      HEAP32[$AsyncCtx10 >> 2] = 654; //@line 11674
      sp = STACKTOP; //@line 11675
      return 0; //@line 11676
     } else {
      _emscripten_free_async_context($AsyncCtx10 | 0); //@line 11678
      $34 = $13; //@line 11679
      break;
     }
    }
   } while (0);
   $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 11685
   L9 : do {
    if (!$$02325) {
     $$024$lcssa = $34; //@line 11689
    } else {
     $$02327 = $$02325; //@line 11691
     $$02426 = $34; //@line 11691
     while (1) {
      if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
       $28 = ___lockfile($$02327) | 0; //@line 11698
      } else {
       $28 = 0; //@line 11700
      }
      if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
       $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 11708
       $25 = ___fflush_unlocked($$02327) | 0; //@line 11709
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 11714
       $$1 = $25 | $$02426; //@line 11716
      } else {
       $$1 = $$02426; //@line 11718
      }
      if ($28 | 0) {
       ___unlockfile($$02327); //@line 11722
      }
      $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 11725
      if (!$$023) {
       $$024$lcssa = $$1; //@line 11728
       break L9;
      } else {
       $$02327 = $$023; //@line 11731
       $$02426 = $$1; //@line 11731
      }
     }
     HEAP32[$AsyncCtx >> 2] = 655; //@line 11734
     HEAP32[$AsyncCtx + 4 >> 2] = $$02426; //@line 11736
     HEAP32[$AsyncCtx + 8 >> 2] = $28; //@line 11738
     HEAP32[$AsyncCtx + 12 >> 2] = $$02327; //@line 11740
     sp = STACKTOP; //@line 11741
     return 0; //@line 11742
    }
   } while (0);
   ___ofl_unlock(); //@line 11745
   $$0 = $$024$lcssa; //@line 11746
  } else {
   if ((HEAP32[$0 + 76 >> 2] | 0) <= -1) {
    $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11752
    $5 = ___fflush_unlocked($0) | 0; //@line 11753
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 652; //@line 11756
     sp = STACKTOP; //@line 11757
     return 0; //@line 11758
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 11760
     $$0 = $5; //@line 11761
     break;
    }
   }
   $phitmp = (___lockfile($0) | 0) == 0; //@line 11766
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11767
   $7 = ___fflush_unlocked($0) | 0; //@line 11768
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 653; //@line 11771
    HEAP8[$AsyncCtx3 + 4 >> 0] = $phitmp & 1; //@line 11774
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 11776
    sp = STACKTOP; //@line 11777
    return 0; //@line 11778
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11780
   if ($phitmp) {
    $$0 = $7; //@line 11782
   } else {
    ___unlockfile($0); //@line 11784
    $$0 = $7; //@line 11785
   }
  }
 } while (0);
 return $$0 | 0; //@line 11789
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_11($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17925
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17927
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17929
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17931
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17933
 if (!$AsyncRetVal) {
  $22 = HEAP32[$2 >> 2] | 0; //@line 17936
  if (!$22) {
   HEAP32[___async_retval >> 2] = 0; //@line 17940
   return;
  }
  $25 = HEAP32[$22 + 8 >> 2] | 0; //@line 17944
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 17945
  FUNCTION_TABLE_vi[$25 & 1023]($6); //@line 17946
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 291; //@line 17949
   $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 17950
   HEAP32[$26 >> 2] = 0; //@line 17951
   sp = STACKTOP; //@line 17952
   return;
  }
  ___async_unwind = 0; //@line 17955
  HEAP32[$ReallocAsyncCtx2 >> 2] = 291; //@line 17956
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 17957
  HEAP32[$26 >> 2] = 0; //@line 17958
  sp = STACKTOP; //@line 17959
  return;
 }
 $9 = HEAP32[$2 >> 2] | 0; //@line 17962
 if (!$9) {
  HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 17966
  _equeue_event_dtor($AsyncRetVal, 288); //@line 17967
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 17968
  $18 = _equeue_post($4, 289, $AsyncRetVal) | 0; //@line 17969
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 290; //@line 17972
   $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 17973
   HEAP32[$19 >> 2] = $2; //@line 17974
   $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 17975
   HEAP32[$20 >> 2] = $6; //@line 17976
   sp = STACKTOP; //@line 17977
   return;
  }
  HEAP32[___async_retval >> 2] = $18; //@line 17981
  ___async_unwind = 0; //@line 17982
  HEAP32[$ReallocAsyncCtx3 >> 2] = 290; //@line 17983
  $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 17984
  HEAP32[$19 >> 2] = $2; //@line 17985
  $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 17986
  HEAP32[$20 >> 2] = $6; //@line 17987
  sp = STACKTOP; //@line 17988
  return;
 } else {
  $12 = HEAP32[$9 + 4 >> 2] | 0; //@line 17992
  $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 17993
  FUNCTION_TABLE_vii[$12 & 31]($AsyncRetVal, $6); //@line 17994
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 287; //@line 17997
   $13 = $ReallocAsyncCtx + 4 | 0; //@line 17998
   HEAP32[$13 >> 2] = $2; //@line 17999
   $14 = $ReallocAsyncCtx + 8 | 0; //@line 18000
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 18001
   $15 = $ReallocAsyncCtx + 12 | 0; //@line 18002
   HEAP32[$15 >> 2] = $4; //@line 18003
   $16 = $ReallocAsyncCtx + 16 | 0; //@line 18004
   HEAP32[$16 >> 2] = $6; //@line 18005
   sp = STACKTOP; //@line 18006
   return;
  }
  ___async_unwind = 0; //@line 18009
  HEAP32[$ReallocAsyncCtx >> 2] = 287; //@line 18010
  $13 = $ReallocAsyncCtx + 4 | 0; //@line 18011
  HEAP32[$13 >> 2] = $2; //@line 18012
  $14 = $ReallocAsyncCtx + 8 | 0; //@line 18013
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 18014
  $15 = $ReallocAsyncCtx + 12 | 0; //@line 18015
  HEAP32[$15 >> 2] = $4; //@line 18016
  $16 = $ReallocAsyncCtx + 16 | 0; //@line 18017
  HEAP32[$16 >> 2] = $6; //@line 18018
  sp = STACKTOP; //@line 18019
  return;
 }
}
function __ZN12LoRaWANStackC2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 19659
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19663
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19665
 $7 = $4 + 12 | 0; //@line 19666
 HEAP32[$4 >> 2] = 22; //@line 19667
 HEAP32[$4 + 4 >> 2] = 0; //@line 19669
 HEAP32[$4 + 8 >> 2] = $6; //@line 19671
 HEAP32[$7 >> 2] = 900; //@line 19672
 $8 = $6 + 1860 | 0; //@line 19673
 if (($8 | 0) == ($4 | 0)) {
  $25 = HEAP32[227] | 0; //@line 19677
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 19678
  FUNCTION_TABLE_vi[$25 & 1023]($4); //@line 19679
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 145; //@line 19682
   $26 = $ReallocAsyncCtx4 + 4 | 0; //@line 19683
   HEAP32[$26 >> 2] = $4; //@line 19684
   sp = STACKTOP; //@line 19685
   return;
  }
  ___async_unwind = 0; //@line 19688
  HEAP32[$ReallocAsyncCtx4 >> 2] = 145; //@line 19689
  $26 = $ReallocAsyncCtx4 + 4 | 0; //@line 19690
  HEAP32[$26 >> 2] = $4; //@line 19691
  sp = STACKTOP; //@line 19692
  return;
 }
 $10 = $6 + 1872 | 0; //@line 19695
 $11 = HEAP32[$10 >> 2] | 0; //@line 19696
 if ($11 | 0) {
  $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 19700
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 19701
  FUNCTION_TABLE_vi[$14 & 1023]($8); //@line 19702
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 143; //@line 19705
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 19706
   HEAP32[$15 >> 2] = $7; //@line 19707
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 19708
   HEAP32[$16 >> 2] = $10; //@line 19709
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 19710
   HEAP32[$17 >> 2] = $8; //@line 19711
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 19712
   HEAP32[$18 >> 2] = $4; //@line 19713
   sp = STACKTOP; //@line 19714
   return;
  }
  ___async_unwind = 0; //@line 19717
  HEAP32[$ReallocAsyncCtx2 >> 2] = 143; //@line 19718
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 19719
  HEAP32[$15 >> 2] = $7; //@line 19720
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 19721
  HEAP32[$16 >> 2] = $10; //@line 19722
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 19723
  HEAP32[$17 >> 2] = $8; //@line 19724
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 19725
  HEAP32[$18 >> 2] = $4; //@line 19726
  sp = STACKTOP; //@line 19727
  return;
 }
 $20 = HEAP32[226] | 0; //@line 19731
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 19732
 FUNCTION_TABLE_vii[$20 & 31]($8, $4); //@line 19733
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 144; //@line 19736
  $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 19737
  HEAP32[$21 >> 2] = $7; //@line 19738
  $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 19739
  HEAP32[$22 >> 2] = $10; //@line 19740
  $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 19741
  HEAP32[$23 >> 2] = $4; //@line 19742
  sp = STACKTOP; //@line 19743
  return;
 }
 ___async_unwind = 0; //@line 19746
 HEAP32[$ReallocAsyncCtx3 >> 2] = 144; //@line 19747
 $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 19748
 HEAP32[$21 >> 2] = $7; //@line 19749
 $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 19750
 HEAP32[$22 >> 2] = $10; //@line 19751
 $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 19752
 HEAP32[$23 >> 2] = $4; //@line 19753
 sp = STACKTOP; //@line 19754
 return;
}
function _mbedtls_ccm_free__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $18 = 0, $2 = 0, $22 = 0, $26 = 0, $30 = 0, $34 = 0, $38 = 0, $42 = 0, $46 = 0, $50 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $66 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23601
 HEAP8[$2 >> 0] = 0; //@line 23603
 HEAP8[$2 + 1 >> 0] = 0; //@line 23605
 HEAP8[$2 + 2 >> 0] = 0; //@line 23607
 $6 = $2 + 4 | 0; //@line 23608
 HEAP8[$2 + 3 >> 0] = 0; //@line 23609
 HEAP8[$6 >> 0] = 0; //@line 23611
 HEAP8[$6 + 1 >> 0] = 0; //@line 23613
 HEAP8[$6 + 2 >> 0] = 0; //@line 23615
 $10 = $6 + 4 | 0; //@line 23616
 HEAP8[$6 + 3 >> 0] = 0; //@line 23617
 HEAP8[$10 >> 0] = 0; //@line 23619
 HEAP8[$10 + 1 >> 0] = 0; //@line 23621
 HEAP8[$10 + 2 >> 0] = 0; //@line 23623
 $14 = $6 + 8 | 0; //@line 23624
 HEAP8[$10 + 3 >> 0] = 0; //@line 23625
 HEAP8[$14 >> 0] = 0; //@line 23627
 HEAP8[$14 + 1 >> 0] = 0; //@line 23629
 HEAP8[$14 + 2 >> 0] = 0; //@line 23631
 $18 = $6 + 12 | 0; //@line 23632
 HEAP8[$14 + 3 >> 0] = 0; //@line 23633
 HEAP8[$18 >> 0] = 0; //@line 23635
 HEAP8[$18 + 1 >> 0] = 0; //@line 23637
 HEAP8[$18 + 2 >> 0] = 0; //@line 23639
 $22 = $6 + 16 | 0; //@line 23640
 HEAP8[$18 + 3 >> 0] = 0; //@line 23641
 HEAP8[$22 >> 0] = 0; //@line 23643
 HEAP8[$22 + 1 >> 0] = 0; //@line 23645
 HEAP8[$22 + 2 >> 0] = 0; //@line 23647
 $26 = $6 + 20 | 0; //@line 23648
 HEAP8[$22 + 3 >> 0] = 0; //@line 23649
 HEAP8[$26 >> 0] = 0; //@line 23651
 HEAP8[$26 + 1 >> 0] = 0; //@line 23653
 HEAP8[$26 + 2 >> 0] = 0; //@line 23655
 $30 = $6 + 24 | 0; //@line 23656
 HEAP8[$26 + 3 >> 0] = 0; //@line 23657
 HEAP8[$30 >> 0] = 0; //@line 23659
 HEAP8[$30 + 1 >> 0] = 0; //@line 23661
 HEAP8[$30 + 2 >> 0] = 0; //@line 23663
 $34 = $6 + 28 | 0; //@line 23664
 HEAP8[$30 + 3 >> 0] = 0; //@line 23665
 HEAP8[$34 >> 0] = 0; //@line 23667
 HEAP8[$34 + 1 >> 0] = 0; //@line 23669
 HEAP8[$34 + 2 >> 0] = 0; //@line 23671
 $38 = $6 + 32 | 0; //@line 23672
 HEAP8[$34 + 3 >> 0] = 0; //@line 23673
 HEAP8[$38 >> 0] = 0; //@line 23675
 HEAP8[$38 + 1 >> 0] = 0; //@line 23677
 HEAP8[$38 + 2 >> 0] = 0; //@line 23679
 $42 = $6 + 36 | 0; //@line 23680
 HEAP8[$38 + 3 >> 0] = 0; //@line 23681
 HEAP8[$42 >> 0] = 0; //@line 23683
 HEAP8[$42 + 1 >> 0] = 0; //@line 23685
 HEAP8[$42 + 2 >> 0] = 0; //@line 23687
 $46 = $6 + 40 | 0; //@line 23688
 HEAP8[$42 + 3 >> 0] = 0; //@line 23689
 HEAP8[$46 >> 0] = 0; //@line 23691
 HEAP8[$46 + 1 >> 0] = 0; //@line 23693
 HEAP8[$46 + 2 >> 0] = 0; //@line 23695
 $50 = $6 + 44 | 0; //@line 23696
 HEAP8[$46 + 3 >> 0] = 0; //@line 23697
 HEAP8[$50 >> 0] = 0; //@line 23699
 HEAP8[$50 + 1 >> 0] = 0; //@line 23701
 HEAP8[$50 + 2 >> 0] = 0; //@line 23703
 $54 = $6 + 48 | 0; //@line 23704
 HEAP8[$50 + 3 >> 0] = 0; //@line 23705
 HEAP8[$54 >> 0] = 0; //@line 23707
 HEAP8[$54 + 1 >> 0] = 0; //@line 23709
 HEAP8[$54 + 2 >> 0] = 0; //@line 23711
 $58 = $6 + 52 | 0; //@line 23712
 HEAP8[$54 + 3 >> 0] = 0; //@line 23713
 HEAP8[$58 >> 0] = 0; //@line 23715
 HEAP8[$58 + 1 >> 0] = 0; //@line 23717
 HEAP8[$58 + 2 >> 0] = 0; //@line 23719
 $62 = $6 + 56 | 0; //@line 23720
 HEAP8[$58 + 3 >> 0] = 0; //@line 23721
 HEAP8[$62 >> 0] = 0; //@line 23723
 HEAP8[$62 + 1 >> 0] = 0; //@line 23725
 HEAP8[$62 + 2 >> 0] = 0; //@line 23727
 $66 = $6 + 60 | 0; //@line 23728
 HEAP8[$62 + 3 >> 0] = 0; //@line 23729
 HEAP8[$66 >> 0] = 0; //@line 23731
 HEAP8[$66 + 1 >> 0] = 0; //@line 23733
 HEAP8[$66 + 2 >> 0] = 0; //@line 23735
 HEAP8[$66 + 3 >> 0] = 0; //@line 23736
 return;
}
function _mbed_vtracef__async_cb_385($0) {
 $0 = $0 | 0;
 var $$13 = 0, $$expand_i1_val = 0, $10 = 0, $12 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 31835
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31837
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31839
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 31842
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31844
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31846
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31848
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31852
 $$13 = ($AsyncRetVal | 0) >= ($12 | 0) ? 0 : $AsyncRetVal; //@line 31854
 $18 = (HEAP32[$0 + 28 >> 2] | 0) + $$13 | 0; //@line 31856
 $19 = $12 - $$13 | 0; //@line 31857
 do {
  if (($$13 | 0) > 0) {
   $21 = HEAP32[189] | 0; //@line 31861
   if (!(($19 | 0) > 0 & ($21 | 0) != 0)) {
    if (($$13 | 0) < 1 | ($19 | 0) < 1 | $6 ^ 1) {
     break;
    }
    _snprintf($18, $19, 12294, $8) | 0; //@line 31873
    break;
   }
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 31876
   $23 = FUNCTION_TABLE_i[$21 & 7]() | 0; //@line 31877
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 133; //@line 31880
    $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 31881
    HEAP32[$24 >> 2] = $2; //@line 31882
    $25 = $ReallocAsyncCtx6 + 8 | 0; //@line 31883
    HEAP32[$25 >> 2] = $18; //@line 31884
    $26 = $ReallocAsyncCtx6 + 12 | 0; //@line 31885
    HEAP32[$26 >> 2] = $19; //@line 31886
    $27 = $ReallocAsyncCtx6 + 16 | 0; //@line 31887
    HEAP32[$27 >> 2] = $4; //@line 31888
    $28 = $ReallocAsyncCtx6 + 20 | 0; //@line 31889
    $$expand_i1_val = $6 & 1; //@line 31890
    HEAP8[$28 >> 0] = $$expand_i1_val; //@line 31891
    $29 = $ReallocAsyncCtx6 + 24 | 0; //@line 31892
    HEAP32[$29 >> 2] = $8; //@line 31893
    $30 = $ReallocAsyncCtx6 + 28 | 0; //@line 31894
    HEAP32[$30 >> 2] = $10; //@line 31895
    sp = STACKTOP; //@line 31896
    return;
   }
   HEAP32[___async_retval >> 2] = $23; //@line 31900
   ___async_unwind = 0; //@line 31901
   HEAP32[$ReallocAsyncCtx6 >> 2] = 133; //@line 31902
   $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 31903
   HEAP32[$24 >> 2] = $2; //@line 31904
   $25 = $ReallocAsyncCtx6 + 8 | 0; //@line 31905
   HEAP32[$25 >> 2] = $18; //@line 31906
   $26 = $ReallocAsyncCtx6 + 12 | 0; //@line 31907
   HEAP32[$26 >> 2] = $19; //@line 31908
   $27 = $ReallocAsyncCtx6 + 16 | 0; //@line 31909
   HEAP32[$27 >> 2] = $4; //@line 31910
   $28 = $ReallocAsyncCtx6 + 20 | 0; //@line 31911
   $$expand_i1_val = $6 & 1; //@line 31912
   HEAP8[$28 >> 0] = $$expand_i1_val; //@line 31913
   $29 = $ReallocAsyncCtx6 + 24 | 0; //@line 31914
   HEAP32[$29 >> 2] = $8; //@line 31915
   $30 = $ReallocAsyncCtx6 + 28 | 0; //@line 31916
   HEAP32[$30 >> 2] = $10; //@line 31917
   sp = STACKTOP; //@line 31918
   return;
  }
 } while (0);
 $34 = HEAP32[190] | 0; //@line 31922
 $35 = HEAP32[183] | 0; //@line 31923
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 31924
 FUNCTION_TABLE_vi[$34 & 1023]($35); //@line 31925
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 134; //@line 31928
  sp = STACKTOP; //@line 31929
  return;
 }
 ___async_unwind = 0; //@line 31932
 HEAP32[$ReallocAsyncCtx7 >> 2] = 134; //@line 31933
 sp = STACKTOP; //@line 31934
 return;
}
function __ZN7LoRaPHY19update_band_timeoffEbbP6band_th($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$060 = 0, $$060$us = 0, $$2 = 0, $$2$us = 0, $$pr$us = 0, $$sink2 = 0, $10 = 0, $20 = 0, $26 = 0, $28 = 0, $34 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $6 = 0, $7 = 0, $8 = 0, $indvars$iv = 0, $indvars$iv62 = 0, $wide$trip$count = 0, label = 0;
 if (!($4 << 24 >> 24)) {
  $$0$lcssa = -1; //@line 23358
  return $$0$lcssa | 0; //@line 23359
 }
 $6 = $0 + 8 | 0; //@line 23361
 $wide$trip$count = $4 & 255; //@line 23362
 if ($1) {
  $$060$us = -1; //@line 23364
  $indvars$iv = 0; //@line 23364
  while (1) {
   $7 = $3 + ($indvars$iv * 24 | 0) + 12 | 0; //@line 23366
   do {
    if ($2) {
     $8 = HEAP32[$7 >> 2] | 0; //@line 23369
     $10 = $3 + ($indvars$iv * 24 | 0) + 8 | 0; //@line 23371
     if ($8 >>> 0 <= (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) >>> 0) {
      HEAP32[$7 >> 2] = 0; //@line 23376
      $$2$us = $$060$us; //@line 23377
      break;
     }
     $$pr$us = HEAP32[$7 >> 2] | 0; //@line 23380
     if (!$$pr$us) {
      $$2$us = $$060$us; //@line 23383
     } else {
      if (($$pr$us - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) | 0) >>> 0 < $$060$us >>> 0) {
       $20 = HEAP32[$7 >> 2] | 0; //@line 23391
       $$2$us = $20 - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) | 0; //@line 23396
      } else {
       $$2$us = $$060$us; //@line 23398
      }
     }
    } else {
     HEAP32[$7 >> 2] = 0; //@line 23402
     $$2$us = 0; //@line 23403
    }
   } while (0);
   $indvars$iv = $indvars$iv + 1 | 0; //@line 23406
   if (($indvars$iv | 0) == ($wide$trip$count | 0)) {
    $$0$lcssa = $$2$us; //@line 23409
    break;
   } else {
    $$060$us = $$2$us; //@line 23412
   }
  }
  return $$0$lcssa | 0; //@line 23415
 } else {
  $$060 = -1; //@line 23417
  $indvars$iv62 = 0; //@line 23417
 }
 while (1) {
  $26 = $3 + ($indvars$iv62 * 24 | 0) + 4 | 0; //@line 23421
  $28 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$26 >> 2] | 0) | 0; //@line 23423
  if ($2) {
   $34 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$3 + ($indvars$iv62 * 24 | 0) + 8 >> 2] | 0) | 0; //@line 23429
  } else {
   $34 = 0; //@line 23431
  }
  if ($28 >>> 0 > $34 >>> 0) {
   $$sink2 = $26; //@line 23435
   label = 17; //@line 23436
  } else {
   if ($2) {
    $$sink2 = $3 + ($indvars$iv62 * 24 | 0) + 8 | 0; //@line 23440
    label = 17; //@line 23441
   } else {
    $41 = 0; //@line 23443
   }
  }
  if ((label | 0) == 17) {
   label = 0; //@line 23447
   $41 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$$sink2 >> 2] | 0) | 0; //@line 23451
  }
  $38 = $3 + ($indvars$iv62 * 24 | 0) + 12 | 0; //@line 23453
  $39 = HEAP32[$38 >> 2] | 0; //@line 23454
  if ($39 >>> 0 > $41 >>> 0) {
   $42 = $39 - $41 | 0; //@line 23457
   $$2 = $42 >>> 0 < $$060 >>> 0 ? $42 : $$060; //@line 23460
  } else {
   HEAP32[$38 >> 2] = 0; //@line 23462
   $$2 = $$060; //@line 23463
  }
  $indvars$iv62 = $indvars$iv62 + 1 | 0; //@line 23465
  if (($indvars$iv62 | 0) == ($wide$trip$count | 0)) {
   $$0$lcssa = $$2; //@line 23468
   break;
  } else {
   $$060 = $$2; //@line 23471
  }
 }
 return $$0$lcssa | 0; //@line 23474
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $13 = 0, $19 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $39 = 0, $50 = 0, $53 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16410
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 16416
  } else {
   if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
    $50 = HEAP32[$0 + 8 >> 2] | 0; //@line 16422
    $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 24 >> 2] | 0; //@line 16425
    $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16426
    FUNCTION_TABLE_viiiii[$53 & 7]($50, $1, $2, $3, $4); //@line 16427
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 674; //@line 16430
     sp = STACKTOP; //@line 16431
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16434
     break;
    }
   }
   if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
    $13 = $1 + 20 | 0; //@line 16442
    if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
     HEAP32[$1 + 32 >> 2] = $3; //@line 16447
     $19 = $1 + 44 | 0; //@line 16448
     if ((HEAP32[$19 >> 2] | 0) == 4) {
      break;
     }
     $22 = $1 + 52 | 0; //@line 16454
     HEAP8[$22 >> 0] = 0; //@line 16455
     $23 = $1 + 53 | 0; //@line 16456
     HEAP8[$23 >> 0] = 0; //@line 16457
     $25 = HEAP32[$0 + 8 >> 2] | 0; //@line 16459
     $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 20 >> 2] | 0; //@line 16462
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 16463
     FUNCTION_TABLE_viiiiii[$28 & 3]($25, $1, $2, $2, 1, $4); //@line 16464
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 673; //@line 16467
      HEAP32[$AsyncCtx + 4 >> 2] = $23; //@line 16469
      HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 16471
      HEAP32[$AsyncCtx + 12 >> 2] = $13; //@line 16473
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 16475
      HEAP32[$AsyncCtx + 20 >> 2] = $22; //@line 16477
      HEAP32[$AsyncCtx + 24 >> 2] = $19; //@line 16479
      sp = STACKTOP; //@line 16480
      return;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 16483
     if (!(HEAP8[$23 >> 0] | 0)) {
      $$037$off038 = 4; //@line 16487
      label = 13; //@line 16488
     } else {
      if (!(HEAP8[$22 >> 0] | 0)) {
       $$037$off038 = 3; //@line 16493
       label = 13; //@line 16494
      } else {
       $$037$off039 = 3; //@line 16496
      }
     }
     if ((label | 0) == 13) {
      HEAP32[$13 >> 2] = $2; //@line 16500
      $39 = $1 + 40 | 0; //@line 16501
      HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1; //@line 16504
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 16514
        $$037$off039 = $$037$off038; //@line 16515
       } else {
        $$037$off039 = $$037$off038; //@line 16517
       }
      } else {
       $$037$off039 = $$037$off038; //@line 16520
      }
     }
     HEAP32[$19 >> 2] = $$037$off039; //@line 16523
     break;
    }
   }
   if (($3 | 0) == 1) {
    HEAP32[$1 + 32 >> 2] = 1; //@line 16530
   }
  }
 } while (0);
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_23($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 18681
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18683
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18685
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18687
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18689
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18693
 $13 = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 18694
 if (!$13) {
  $21 = HEAP32[$2 >> 2] | 0; //@line 18697
  $23 = $6 + 12 | 0; //@line 18699
  HEAP32[$6 >> 2] = 438; //@line 18700
  HEAP32[$6 + 4 >> 2] = 0; //@line 18702
  HEAP32[$6 + 8 >> 2] = $4; //@line 18704
  HEAP32[$23 >> 2] = 912; //@line 18705
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(24) | 0; //@line 18706
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($21, $4 + 1056 | 0, $6); //@line 18707
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 439; //@line 18710
   $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 18711
   HEAP32[$24 >> 2] = $23; //@line 18712
   $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 18713
   HEAP32[$25 >> 2] = $2; //@line 18714
   $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 18715
   HEAP32[$26 >> 2] = $4; //@line 18716
   $27 = $ReallocAsyncCtx7 + 16 | 0; //@line 18717
   HEAP32[$27 >> 2] = $8; //@line 18718
   $28 = $ReallocAsyncCtx7 + 20 | 0; //@line 18719
   HEAP32[$28 >> 2] = $6; //@line 18720
   sp = STACKTOP; //@line 18721
   return;
  }
  ___async_unwind = 0; //@line 18724
  HEAP32[$ReallocAsyncCtx7 >> 2] = 439; //@line 18725
  $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 18726
  HEAP32[$24 >> 2] = $23; //@line 18727
  $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 18728
  HEAP32[$25 >> 2] = $2; //@line 18729
  $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 18730
  HEAP32[$26 >> 2] = $4; //@line 18731
  $27 = $ReallocAsyncCtx7 + 16 | 0; //@line 18732
  HEAP32[$27 >> 2] = $8; //@line 18733
  $28 = $ReallocAsyncCtx7 + 20 | 0; //@line 18734
  HEAP32[$28 >> 2] = $6; //@line 18735
  sp = STACKTOP; //@line 18736
  return;
 } else {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 18740
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 18741
  FUNCTION_TABLE_vi[$16 & 1023]($12); //@line 18742
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 437; //@line 18745
   $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 18746
   HEAP32[$17 >> 2] = $2; //@line 18747
   $18 = $ReallocAsyncCtx3 + 8 | 0; //@line 18748
   HEAP32[$18 >> 2] = $4; //@line 18749
   $19 = $ReallocAsyncCtx3 + 12 | 0; //@line 18750
   HEAP32[$19 >> 2] = $6; //@line 18751
   $20 = $ReallocAsyncCtx3 + 16 | 0; //@line 18752
   HEAP32[$20 >> 2] = $8; //@line 18753
   sp = STACKTOP; //@line 18754
   return;
  }
  ___async_unwind = 0; //@line 18757
  HEAP32[$ReallocAsyncCtx3 >> 2] = 437; //@line 18758
  $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 18759
  HEAP32[$17 >> 2] = $2; //@line 18760
  $18 = $ReallocAsyncCtx3 + 8 | 0; //@line 18761
  HEAP32[$18 >> 2] = $4; //@line 18762
  $19 = $ReallocAsyncCtx3 + 12 | 0; //@line 18763
  HEAP32[$19 >> 2] = $6; //@line 18764
  $20 = $ReallocAsyncCtx3 + 16 | 0; //@line 18765
  HEAP32[$20 >> 2] = $8; //@line 18766
  sp = STACKTOP; //@line 18767
  return;
 }
}
function _initialize__async_cb_257($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $31 = 0, $33 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 16132
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16134
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16136
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16138
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16140
 $10 = $0 + 24 | 0; //@line 16142
 $12 = HEAP32[$10 >> 2] | 0; //@line 16144
 $15 = HEAP32[$10 + 4 >> 2] | 0; //@line 16147
 $17 = HEAP32[$0 + 32 >> 2] | 0; //@line 16149
 $19 = HEAP32[$0 + 36 >> 2] | 0; //@line 16151
 $21 = HEAP32[$2 >> 2] | 0; //@line 16154
 $22 = $21 + 32 | 0; //@line 16155
 HEAP32[$22 >> 2] = HEAP32[___async_retval >> 2]; //@line 16156
 $23 = $21 + 40 | 0; //@line 16157
 $24 = $23; //@line 16158
 HEAP32[$24 >> 2] = 0; //@line 16160
 HEAP32[$24 + 4 >> 2] = 0; //@line 16163
 $28 = $21 + 8 | 0; //@line 16164
 HEAP32[$28 >> 2] = $4; //@line 16165
 $29 = _bitshift64Shl(1, 0, $6 | 0) | 0; //@line 16166
 $31 = _i64Add($29 | 0, tempRet0 | 0, -1, 0) | 0; //@line 16168
 $33 = $21 + 12 | 0; //@line 16170
 HEAP32[$33 >> 2] = $31; //@line 16171
 HEAP32[$21 + 16 >> 2] = $8; //@line 16173
 $36 = $21 + 24 | 0; //@line 16175
 HEAP32[$36 >> 2] = $12; //@line 16177
 HEAP32[$36 + 4 >> 2] = $15; //@line 16180
 $40 = $21 + 48 | 0; //@line 16181
 $41 = $40; //@line 16182
 HEAP32[$41 >> 2] = 0; //@line 16184
 HEAP32[$41 + 4 >> 2] = 0; //@line 16187
 HEAP8[$21 + 56 >> 0] = 1; //@line 16189
 $48 = HEAP32[(HEAP32[$17 >> 2] | 0) + 4 >> 2] | 0; //@line 16192
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 16193
 $49 = FUNCTION_TABLE_i[$48 & 7]() | 0; //@line 16194
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 602; //@line 16197
  $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 16198
  HEAP32[$50 >> 2] = $2; //@line 16199
  $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 16200
  HEAP32[$51 >> 2] = $19; //@line 16201
  $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 16202
  HEAP32[$52 >> 2] = $22; //@line 16203
  $53 = $ReallocAsyncCtx4 + 16 | 0; //@line 16204
  HEAP32[$53 >> 2] = $33; //@line 16205
  $54 = $ReallocAsyncCtx4 + 20 | 0; //@line 16206
  HEAP32[$54 >> 2] = $28; //@line 16207
  $55 = $ReallocAsyncCtx4 + 24 | 0; //@line 16208
  HEAP32[$55 >> 2] = $23; //@line 16209
  $56 = $ReallocAsyncCtx4 + 28 | 0; //@line 16210
  HEAP32[$56 >> 2] = $40; //@line 16211
  sp = STACKTOP; //@line 16212
  return;
 }
 HEAP32[___async_retval >> 2] = $49; //@line 16216
 ___async_unwind = 0; //@line 16217
 HEAP32[$ReallocAsyncCtx4 >> 2] = 602; //@line 16218
 $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 16219
 HEAP32[$50 >> 2] = $2; //@line 16220
 $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 16221
 HEAP32[$51 >> 2] = $19; //@line 16222
 $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 16223
 HEAP32[$52 >> 2] = $22; //@line 16224
 $53 = $ReallocAsyncCtx4 + 16 | 0; //@line 16225
 HEAP32[$53 >> 2] = $33; //@line 16226
 $54 = $ReallocAsyncCtx4 + 20 | 0; //@line 16227
 HEAP32[$54 >> 2] = $28; //@line 16228
 $55 = $ReallocAsyncCtx4 + 24 | 0; //@line 16229
 HEAP32[$55 >> 2] = $23; //@line 16230
 $56 = $ReallocAsyncCtx4 + 28 | 0; //@line 16231
 HEAP32[$56 >> 2] = $40; //@line 16232
 sp = STACKTOP; //@line 16233
 return;
}
function _mbed_vtracef__async_cb_386($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 31944
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31946
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31948
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31950
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31952
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31954
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31956
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31958
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31960
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 31962
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 31964
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 31966
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 31968
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 31970
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 31972
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 31974
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 31976
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 31978
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 31980
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 31982
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 31984
 $42 = HEAP8[$0 + 84 >> 0] & 1; //@line 31987
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 31989
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 31991
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 31993
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 31995
 $55 = ($50 | 0 ? 4 : 0) + $50 + (HEAP32[___async_retval >> 2] | 0) | 0; //@line 32001
 $56 = HEAP32[188] | 0; //@line 32002
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(100) | 0; //@line 32003
 $57 = FUNCTION_TABLE_ii[$56 & 15]($55) | 0; //@line 32004
 if (!___async) {
  HEAP32[___async_retval >> 2] = $57; //@line 32008
  ___async_unwind = 0; //@line 32009
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 131; //@line 32011
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 32013
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 32015
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 32017
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 32019
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 32021
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $12; //@line 32023
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $14; //@line 32025
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $16; //@line 32027
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $18; //@line 32029
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $20; //@line 32031
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $22; //@line 32033
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $24; //@line 32035
 HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $26; //@line 32037
 HEAP32[$ReallocAsyncCtx5 + 56 >> 2] = $28; //@line 32039
 HEAP32[$ReallocAsyncCtx5 + 60 >> 2] = $30; //@line 32041
 HEAP32[$ReallocAsyncCtx5 + 64 >> 2] = $32; //@line 32043
 HEAP32[$ReallocAsyncCtx5 + 68 >> 2] = $34; //@line 32045
 HEAP32[$ReallocAsyncCtx5 + 72 >> 2] = $36; //@line 32047
 HEAP32[$ReallocAsyncCtx5 + 76 >> 2] = $38; //@line 32049
 HEAP32[$ReallocAsyncCtx5 + 80 >> 2] = $40; //@line 32051
 HEAP8[$ReallocAsyncCtx5 + 84 >> 0] = $42 & 1; //@line 32054
 HEAP32[$ReallocAsyncCtx5 + 88 >> 2] = $44; //@line 32056
 HEAP32[$ReallocAsyncCtx5 + 92 >> 2] = $46; //@line 32058
 HEAP32[$ReallocAsyncCtx5 + 96 >> 2] = $48; //@line 32060
 sp = STACKTOP; //@line 32061
 return;
}
function _equeue_enqueue($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$051$ph = 0, $$05157 = 0, $$0515859 = 0, $$053 = 0, $13 = 0, $14 = 0, $16 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $33 = 0, $34 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $49 = 0, $54 = 0, $65 = 0, $67 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3271
 $13 = $1 - (HEAP32[$0 + 12 >> 2] | 0) | HEAPU8[$1 + 4 >> 0] << HEAP32[$0 + 16 >> 2]; //@line 3282
 $14 = $1 + 20 | 0; //@line 3283
 $16 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 3285
 HEAP32[$14 >> 2] = ($16 & ~($16 >> 31)) + $2; //@line 3290
 HEAP8[$1 + 5 >> 0] = HEAP8[$0 + 9 >> 0] | 0; //@line 3294
 $24 = $0 + 128 | 0; //@line 3295
 _equeue_mutex_lock($24); //@line 3296
 $25 = HEAP32[$0 >> 2] | 0; //@line 3297
 L1 : do {
  if (!$25) {
   $$051$ph = $0; //@line 3301
   label = 5; //@line 3302
  } else {
   $27 = HEAP32[$14 >> 2] | 0; //@line 3304
   $$053 = $0; //@line 3305
   $29 = $25; //@line 3305
   while (1) {
    if (((HEAP32[$29 + 20 >> 2] | 0) - $27 | 0) >= 0) {
     break;
    }
    $33 = $29 + 8 | 0; //@line 3314
    $34 = HEAP32[$33 >> 2] | 0; //@line 3315
    if (!$34) {
     $$051$ph = $33; //@line 3318
     label = 5; //@line 3319
     break L1;
    } else {
     $$053 = $33; //@line 3322
     $29 = $34; //@line 3322
    }
   }
   if ((HEAP32[$29 + 20 >> 2] | 0) != (HEAP32[$14 >> 2] | 0)) {
    $49 = $1 + 8 | 0; //@line 3330
    HEAP32[$49 >> 2] = $29; //@line 3331
    HEAP32[$29 + 16 >> 2] = $49; //@line 3333
    $$0515859 = $$053; //@line 3334
    label = 11; //@line 3335
    break;
   }
   $42 = HEAP32[$29 + 8 >> 2] | 0; //@line 3339
   $43 = $1 + 8 | 0; //@line 3340
   HEAP32[$43 >> 2] = $42; //@line 3341
   if ($42 | 0) {
    HEAP32[$42 + 16 >> 2] = $43; //@line 3345
   }
   $46 = HEAP32[$$053 >> 2] | 0; //@line 3347
   $47 = $1 + 12 | 0; //@line 3348
   HEAP32[$47 >> 2] = $46; //@line 3349
   HEAP32[$46 + 16 >> 2] = $47; //@line 3351
   $$05157 = $$053; //@line 3352
  }
 } while (0);
 if ((label | 0) == 5) {
  HEAP32[$1 + 8 >> 2] = 0; //@line 3357
  $$0515859 = $$051$ph; //@line 3358
  label = 11; //@line 3359
 }
 if ((label | 0) == 11) {
  HEAP32[$1 + 12 >> 2] = 0; //@line 3363
  $$05157 = $$0515859; //@line 3364
 }
 HEAP32[$$05157 >> 2] = $1; //@line 3366
 HEAP32[$1 + 16 >> 2] = $$05157; //@line 3368
 $54 = HEAP32[$0 + 40 >> 2] | 0; //@line 3370
 if (!$54) {
  _equeue_mutex_unlock($24); //@line 3373
  return $13 | 0; //@line 3374
 }
 if (!(HEAP8[$0 + 36 >> 0] | 0)) {
  _equeue_mutex_unlock($24); //@line 3380
  return $13 | 0; //@line 3381
 }
 if ((HEAP32[$0 >> 2] | 0) != ($1 | 0)) {
  _equeue_mutex_unlock($24); //@line 3386
  return $13 | 0; //@line 3387
 }
 if (HEAP32[$1 + 12 >> 2] | 0) {
  _equeue_mutex_unlock($24); //@line 3393
  return $13 | 0; //@line 3394
 }
 $65 = HEAP32[$0 + 44 >> 2] | 0; //@line 3397
 $67 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 3399
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 3403
 FUNCTION_TABLE_vii[$54 & 31]($65, $67 & ~($67 >> 31)); //@line 3404
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 121; //@line 3407
  HEAP32[$AsyncCtx + 4 >> 2] = $24; //@line 3409
  HEAP32[$AsyncCtx + 8 >> 2] = $13; //@line 3411
  sp = STACKTOP; //@line 3412
  return 0; //@line 3413
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3415
 _equeue_mutex_unlock($24); //@line 3416
 return $13 | 0; //@line 3417
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$unpack10 = 0, $10 = 0, $13 = 0, $19 = 0, $20 = 0, $23 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 9493
 STACKTOP = STACKTOP + 16 | 0; //@line 9494
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9494
 $3 = sp; //@line 9495
 $$unpack10 = HEAP32[$2 + 4 >> 2] | 0; //@line 9498
 $4 = $3 + 12 | 0; //@line 9499
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 9500
 HEAP32[$3 + 4 >> 2] = $$unpack10; //@line 9502
 HEAP32[$3 + 8 >> 2] = $1; //@line 9504
 HEAP32[$4 >> 2] = 912; //@line 9505
 $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 9506
 $5 = _equeue_alloc($0, 16) | 0; //@line 9507
 if (___async) {
  HEAP32[$AsyncCtx8 >> 2] = 286; //@line 9510
  HEAP32[$AsyncCtx8 + 4 >> 2] = $4; //@line 9512
  HEAP32[$AsyncCtx8 + 8 >> 2] = $0; //@line 9514
  HEAP32[$AsyncCtx8 + 12 >> 2] = $3; //@line 9516
  sp = STACKTOP; //@line 9517
  STACKTOP = sp; //@line 9518
  return 0; //@line 9518
 }
 _emscripten_free_async_context($AsyncCtx8 | 0); //@line 9520
 do {
  if (!$5) {
   $$0$i = 0; //@line 9524
  } else {
   $10 = HEAP32[$4 >> 2] | 0; //@line 9526
   do {
    if (!$10) {
     $19 = 0; //@line 9530
    } else {
     $13 = HEAP32[$10 + 4 >> 2] | 0; //@line 9533
     $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 9534
     FUNCTION_TABLE_vii[$13 & 31]($5, $3); //@line 9535
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 287; //@line 9538
      HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 9540
      HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 9542
      HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 9544
      HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 9546
      sp = STACKTOP; //@line 9547
      STACKTOP = sp; //@line 9548
      return 0; //@line 9548
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 9550
      $19 = HEAP32[$4 >> 2] | 0; //@line 9552
      break;
     }
    }
   } while (0);
   HEAP32[$5 + 12 >> 2] = $19; //@line 9558
   _equeue_event_dtor($5, 288); //@line 9559
   $AsyncCtx5 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9560
   $20 = _equeue_post($0, 289, $5) | 0; //@line 9561
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 290; //@line 9564
    HEAP32[$AsyncCtx5 + 4 >> 2] = $4; //@line 9566
    HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 9568
    sp = STACKTOP; //@line 9569
    STACKTOP = sp; //@line 9570
    return 0; //@line 9570
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 9572
    $$0$i = $20; //@line 9573
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$4 >> 2] | 0; //@line 9578
 if (!$23) {
  STACKTOP = sp; //@line 9581
  return $$0$i | 0; //@line 9581
 }
 $26 = HEAP32[$23 + 8 >> 2] | 0; //@line 9584
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9585
 FUNCTION_TABLE_vi[$26 & 1023]($3); //@line 9586
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 291; //@line 9589
  HEAP32[$AsyncCtx2 + 4 >> 2] = $$0$i; //@line 9591
  sp = STACKTOP; //@line 9592
  STACKTOP = sp; //@line 9593
  return 0; //@line 9593
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9595
 STACKTOP = sp; //@line 9596
 return $$0$i | 0; //@line 9596
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $12 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $36 = 0, $39 = 0, $40 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx14 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 15722
 STACKTOP = STACKTOP + 48 | 0; //@line 15723
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 15723
 $vararg_buffer10 = sp + 32 | 0; //@line 15724
 $vararg_buffer7 = sp + 24 | 0; //@line 15725
 $vararg_buffer3 = sp + 16 | 0; //@line 15726
 $vararg_buffer = sp; //@line 15727
 $0 = sp + 36 | 0; //@line 15728
 $1 = ___cxa_get_globals_fast() | 0; //@line 15729
 if ($1 | 0) {
  $3 = HEAP32[$1 >> 2] | 0; //@line 15732
  if ($3 | 0) {
   $7 = $3 + 48 | 0; //@line 15737
   $9 = HEAP32[$7 >> 2] | 0; //@line 15739
   $12 = HEAP32[$7 + 4 >> 2] | 0; //@line 15742
   if (!(($9 & -256 | 0) == 1126902528 & ($12 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer7 >> 2] = 18397; //@line 15748
    _abort_message(18347, $vararg_buffer7); //@line 15749
   }
   if (($9 | 0) == 1126902529 & ($12 | 0) == 1129074247) {
    $22 = HEAP32[$3 + 44 >> 2] | 0; //@line 15758
   } else {
    $22 = $3 + 80 | 0; //@line 15760
   }
   HEAP32[$0 >> 2] = $22; //@line 15762
   $23 = HEAP32[$3 >> 2] | 0; //@line 15763
   $25 = HEAP32[$23 + 4 >> 2] | 0; //@line 15765
   $28 = HEAP32[(HEAP32[110] | 0) + 16 >> 2] | 0; //@line 15768
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 15769
   $29 = FUNCTION_TABLE_iiii[$28 & 15](440, $23, $0) | 0; //@line 15770
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 664; //@line 15773
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 15775
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer3; //@line 15777
    HEAP32[$AsyncCtx + 12 >> 2] = $25; //@line 15779
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 15781
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 15783
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 15785
    sp = STACKTOP; //@line 15786
    STACKTOP = sp; //@line 15787
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 15789
   if (!$29) {
    HEAP32[$vararg_buffer3 >> 2] = 18397; //@line 15791
    HEAP32[$vararg_buffer3 + 4 >> 2] = $25; //@line 15793
    _abort_message(18306, $vararg_buffer3); //@line 15794
   }
   $36 = HEAP32[$0 >> 2] | 0; //@line 15797
   $39 = HEAP32[(HEAP32[$36 >> 2] | 0) + 8 >> 2] | 0; //@line 15800
   $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 15801
   $40 = FUNCTION_TABLE_ii[$39 & 15]($36) | 0; //@line 15802
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 665; //@line 15805
    HEAP32[$AsyncCtx14 + 4 >> 2] = $vararg_buffer; //@line 15807
    HEAP32[$AsyncCtx14 + 8 >> 2] = $25; //@line 15809
    HEAP32[$AsyncCtx14 + 12 >> 2] = $vararg_buffer; //@line 15811
    sp = STACKTOP; //@line 15812
    STACKTOP = sp; //@line 15813
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 15815
    HEAP32[$vararg_buffer >> 2] = 18397; //@line 15816
    HEAP32[$vararg_buffer + 4 >> 2] = $25; //@line 15818
    HEAP32[$vararg_buffer + 8 >> 2] = $40; //@line 15820
    _abort_message(18261, $vararg_buffer); //@line 15821
   }
  }
 }
 _abort_message(18385, $vararg_buffer10); //@line 15826
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_313($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21075
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21077
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21079
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21081
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21083
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21085
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21087
 if ((HEAP32[___async_retval >> 2] | 0) >= ($2 | 0)) {
  $25 = HEAP32[(HEAP32[$8 >> 2] | 0) + 8 >> 2] | 0; //@line 21094
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 21095
  FUNCTION_TABLE_vi[$25 & 1023]($8); //@line 21096
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 65; //@line 21099
   $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 21100
   HEAP32[$26 >> 2] = $10; //@line 21101
   $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 21102
   HEAP32[$27 >> 2] = $12; //@line 21103
   $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 21104
   $$expand_i1_val = 1; //@line 21105
   HEAP8[$28 >> 0] = $$expand_i1_val; //@line 21106
   sp = STACKTOP; //@line 21107
   return;
  }
  ___async_unwind = 0; //@line 21110
  HEAP32[$ReallocAsyncCtx2 >> 2] = 65; //@line 21111
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 21112
  HEAP32[$26 >> 2] = $10; //@line 21113
  $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 21114
  HEAP32[$27 >> 2] = $12; //@line 21115
  $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 21116
  $$expand_i1_val = 1; //@line 21117
  HEAP8[$28 >> 0] = $$expand_i1_val; //@line 21118
  sp = STACKTOP; //@line 21119
  return;
 }
 _mbed_tracef(16, 10944, 11110, $4); //@line 21122
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 21123
 $14 = __ZN4mbed5Timer7read_msEv($10) | 0; //@line 21124
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 21127
  $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 21128
  HEAP32[$15 >> 2] = $2; //@line 21129
  $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 21130
  HEAP32[$16 >> 2] = $4; //@line 21131
  $17 = $ReallocAsyncCtx5 + 12 | 0; //@line 21132
  HEAP32[$17 >> 2] = $6; //@line 21133
  $18 = $ReallocAsyncCtx5 + 16 | 0; //@line 21134
  HEAP32[$18 >> 2] = $8; //@line 21135
  $19 = $ReallocAsyncCtx5 + 20 | 0; //@line 21136
  HEAP32[$19 >> 2] = $10; //@line 21137
  $20 = $ReallocAsyncCtx5 + 24 | 0; //@line 21138
  HEAP32[$20 >> 2] = $12; //@line 21139
  sp = STACKTOP; //@line 21140
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 21144
 ___async_unwind = 0; //@line 21145
 HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 21146
 $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 21147
 HEAP32[$15 >> 2] = $2; //@line 21148
 $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 21149
 HEAP32[$16 >> 2] = $4; //@line 21150
 $17 = $ReallocAsyncCtx5 + 12 | 0; //@line 21151
 HEAP32[$17 >> 2] = $6; //@line 21152
 $18 = $ReallocAsyncCtx5 + 16 | 0; //@line 21153
 HEAP32[$18 >> 2] = $8; //@line 21154
 $19 = $ReallocAsyncCtx5 + 20 | 0; //@line 21155
 HEAP32[$19 >> 2] = $10; //@line 21156
 $20 = $ReallocAsyncCtx5 + 24 | 0; //@line 21157
 HEAP32[$20 >> 2] = $12; //@line 21158
 sp = STACKTOP; //@line 21159
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_200($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 11473
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11477
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11479
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11481
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11483
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11485
 $12 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 11486
 if ($12 | 0) {
  $15 = HEAP32[$12 + 8 >> 2] | 0; //@line 11490
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 11491
  FUNCTION_TABLE_vi[$15 & 1023]($4); //@line 11492
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 165; //@line 11495
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 11496
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 11497
   $17 = $ReallocAsyncCtx4 + 8 | 0; //@line 11498
   HEAP32[$17 >> 2] = $6; //@line 11499
   $18 = $ReallocAsyncCtx4 + 12 | 0; //@line 11500
   HEAP32[$18 >> 2] = $8; //@line 11501
   $19 = $ReallocAsyncCtx4 + 16 | 0; //@line 11502
   HEAP32[$19 >> 2] = $10; //@line 11503
   sp = STACKTOP; //@line 11504
   return;
  }
  ___async_unwind = 0; //@line 11507
  HEAP32[$ReallocAsyncCtx4 >> 2] = 165; //@line 11508
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 11509
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 11510
  $17 = $ReallocAsyncCtx4 + 8 | 0; //@line 11511
  HEAP32[$17 >> 2] = $6; //@line 11512
  $18 = $ReallocAsyncCtx4 + 12 | 0; //@line 11513
  HEAP32[$18 >> 2] = $8; //@line 11514
  $19 = $ReallocAsyncCtx4 + 16 | 0; //@line 11515
  HEAP32[$19 >> 2] = $10; //@line 11516
  sp = STACKTOP; //@line 11517
  return;
 }
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 11522
  _mbed_assert_internal(13588, 12372, 902); //@line 11523
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 166; //@line 11526
   $21 = $ReallocAsyncCtx8 + 4 | 0; //@line 11527
   HEAP32[$21 >> 2] = $6; //@line 11528
   $22 = $ReallocAsyncCtx8 + 8 | 0; //@line 11529
   HEAP32[$22 >> 2] = $8; //@line 11530
   $23 = $ReallocAsyncCtx8 + 12 | 0; //@line 11531
   HEAP32[$23 >> 2] = $10; //@line 11532
   sp = STACKTOP; //@line 11533
   return;
  }
  ___async_unwind = 0; //@line 11536
  HEAP32[$ReallocAsyncCtx8 >> 2] = 166; //@line 11537
  $21 = $ReallocAsyncCtx8 + 4 | 0; //@line 11538
  HEAP32[$21 >> 2] = $6; //@line 11539
  $22 = $ReallocAsyncCtx8 + 8 | 0; //@line 11540
  HEAP32[$22 >> 2] = $8; //@line 11541
  $23 = $ReallocAsyncCtx8 + 12 | 0; //@line 11542
  HEAP32[$23 >> 2] = $10; //@line 11543
  sp = STACKTOP; //@line 11544
  return;
 }
 if (!(HEAP8[$6 + 11 >> 0] | 0)) {
  return;
 }
 $27 = HEAP8[$8 >> 0] | 0; //@line 11553
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 11554
 __ZN12LoRaWANStack9handle_txEhPKhth($10, $27, 0, 0, 2) | 0; //@line 11555
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 167; //@line 11558
  sp = STACKTOP; //@line 11559
  return;
 }
 ___async_unwind = 0; //@line 11562
 HEAP32[$ReallocAsyncCtx5 >> 2] = 167; //@line 11563
 sp = STACKTOP; //@line 11564
 return;
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $2 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16819
 STACKTOP = STACKTOP + 16 | 0; //@line 16820
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16820
 $$byval_copy = sp; //@line 16821
 $2 = sp + 8 | 0; //@line 16822
 $4 = $0 + 360 | 0; //@line 16824
 $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 16825
 $5 = __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0 + 348 | 0, $1, $4) | 0; //@line 16826
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 463; //@line 16829
  HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 16831
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 16833
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 16835
  HEAP32[$AsyncCtx + 16 >> 2] = $$byval_copy; //@line 16837
  HEAP32[$AsyncCtx + 20 >> 2] = $$byval_copy; //@line 16839
  HEAP32[$AsyncCtx + 24 >> 2] = $0; //@line 16841
  sp = STACKTOP; //@line 16842
  STACKTOP = sp; //@line 16843
  return 0; //@line 16843
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16845
 if ($5 | 0) {
  STACKTOP = sp; //@line 16848
  return $5 | 0; //@line 16848
 }
 if ((HEAP32[$4 >> 2] | 0) != 2) {
  STACKTOP = sp; //@line 16853
  return $5 | 0; //@line 16853
 }
 switch (HEAP32[$1 >> 2] | 0) {
 case 0:
  {
   break;
  }
 case 10:
  {
   label = 6; //@line 16861
   break;
  }
 default:
  {
   STACKTOP = sp; //@line 16865
   return $5 | 0; //@line 16865
  }
 }
 if ((label | 0) == 6) {
  if (!(HEAP8[$0 + 372 >> 0] | 0)) {
   STACKTOP = sp; //@line 16873
   return $5 | 0; //@line 16873
  }
 }
 _mbed_tracef(16, 13704, 13723, $$byval_copy); //@line 16876
 $20 = HEAP32[$0 + 1328 >> 2] | 0; //@line 16878
 HEAP32[$2 >> 2] = 279; //@line 16879
 HEAP32[$2 + 4 >> 2] = 0; //@line 16881
 $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 16882
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 16883
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 16883
 $21 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($20, $0, $$byval_copy) | 0; //@line 16884
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 464; //@line 16887
  HEAP32[$AsyncCtx3 + 4 >> 2] = $2; //@line 16889
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 16891
  HEAP32[$AsyncCtx3 + 12 >> 2] = $5; //@line 16893
  sp = STACKTOP; //@line 16894
  STACKTOP = sp; //@line 16895
  return 0; //@line 16895
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16897
 do {
  if (!$21) {
   $AsyncCtx7 = _emscripten_alloc_async_context(16, sp) | 0; //@line 16901
   _mbed_assert_internal(13588, 13597, 215); //@line 16902
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 465; //@line 16905
    HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 16907
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 16909
    HEAP32[$AsyncCtx7 + 12 >> 2] = $5; //@line 16911
    sp = STACKTOP; //@line 16912
    STACKTOP = sp; //@line 16913
    return 0; //@line 16913
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 16915
    break;
   }
  }
 } while (0);
 HEAP32[$0 + 364 >> 2] = 2; //@line 16921
 STACKTOP = sp; //@line 16922
 return $5 | 0; //@line 16922
}
function __ZN18LoRaMacChannelPlan11remove_planEv($0) {
 $0 = $0 | 0;
 var $10 = 0, $21 = 0, $24 = 0, $26 = 0, $32 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $indvars$iv = 0, $indvars$iv$next = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17769
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $39 = -1002; //@line 17773
  return $39 | 0; //@line 17774
 }
 $4 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 17777
 $6 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 0) | 0; //@line 17779
 $8 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 1) | 0; //@line 17781
 if (!($4 << 24 >> 24)) {
  $39 = 0; //@line 17784
  return $39 | 0; //@line 17785
 }
 $10 = $4 & 255; //@line 17787
 $indvars$iv = 0; //@line 17788
 while (1) {
  if (!(__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $8, $indvars$iv) | 0)) {
   if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $6, $indvars$iv) | 0) {
    if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
     $39 = -1002; //@line 17799
     label = 15; //@line 17800
     break;
    }
    if ($indvars$iv >>> 0 >= ((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0) & 255) >>> 0) {
     $39 = -1003; //@line 17808
     label = 15; //@line 17809
     break;
    }
    $21 = HEAP32[$0 >> 2] | 0; //@line 17812
    $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 64 >> 2] | 0; //@line 17815
    $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 17817
    $26 = FUNCTION_TABLE_iii[$24 & 31]($21, $indvars$iv & 255) | 0; //@line 17818
    if (___async) {
     label = 9; //@line 17821
     break;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 17824
    if (!$26) {
     $39 = -1003; //@line 17826
     label = 15; //@line 17827
     break;
    }
    $32 = HEAP32[$0 >> 2] | 0; //@line 17830
    $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 17831
    __ZN7LoRaPHY18put_radio_to_sleepEv($32); //@line 17832
    if (___async) {
     label = 12; //@line 17835
     break;
    }
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 17838
   }
  }
  $indvars$iv$next = $indvars$iv + 1 | 0; //@line 17841
  if ($indvars$iv$next >>> 0 < $10 >>> 0) {
   $indvars$iv = $indvars$iv$next; //@line 17844
  } else {
   $39 = 0; //@line 17846
   label = 15; //@line 17847
   break;
  }
 }
 if ((label | 0) == 9) {
  HEAP32[$AsyncCtx >> 2] = 486; //@line 17852
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 17854
  HEAP32[$AsyncCtx + 8 >> 2] = $indvars$iv; //@line 17856
  HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 17858
  HEAP32[$AsyncCtx + 16 >> 2] = $8; //@line 17860
  HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 17862
  sp = STACKTOP; //@line 17863
  return 0; //@line 17864
 } else if ((label | 0) == 12) {
  HEAP32[$AsyncCtx2 >> 2] = 487; //@line 17867
  HEAP32[$AsyncCtx2 + 4 >> 2] = $indvars$iv; //@line 17869
  HEAP32[$AsyncCtx2 + 8 >> 2] = $10; //@line 17871
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 17873
  HEAP32[$AsyncCtx2 + 16 >> 2] = $8; //@line 17875
  HEAP32[$AsyncCtx2 + 20 >> 2] = $6; //@line 17877
  sp = STACKTOP; //@line 17878
  return 0; //@line 17879
 } else if ((label | 0) == 15) {
  return $39 | 0; //@line 17882
 }
 return 0; //@line 17884
}
function _mbedtls_cipher_free__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $18 = 0, $2 = 0, $22 = 0, $26 = 0, $30 = 0, $34 = 0, $38 = 0, $42 = 0, $46 = 0, $50 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $66 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 206
 HEAP8[$2 >> 0] = 0; //@line 208
 HEAP8[$2 + 1 >> 0] = 0; //@line 210
 HEAP8[$2 + 2 >> 0] = 0; //@line 212
 $6 = $2 + 4 | 0; //@line 213
 HEAP8[$2 + 3 >> 0] = 0; //@line 214
 HEAP8[$6 >> 0] = 0; //@line 216
 HEAP8[$6 + 1 >> 0] = 0; //@line 218
 HEAP8[$6 + 2 >> 0] = 0; //@line 220
 $10 = $6 + 4 | 0; //@line 221
 HEAP8[$6 + 3 >> 0] = 0; //@line 222
 HEAP8[$10 >> 0] = 0; //@line 224
 HEAP8[$10 + 1 >> 0] = 0; //@line 226
 HEAP8[$10 + 2 >> 0] = 0; //@line 228
 $14 = $6 + 8 | 0; //@line 229
 HEAP8[$10 + 3 >> 0] = 0; //@line 230
 HEAP8[$14 >> 0] = 0; //@line 232
 HEAP8[$14 + 1 >> 0] = 0; //@line 234
 HEAP8[$14 + 2 >> 0] = 0; //@line 236
 $18 = $6 + 12 | 0; //@line 237
 HEAP8[$14 + 3 >> 0] = 0; //@line 238
 HEAP8[$18 >> 0] = 0; //@line 240
 HEAP8[$18 + 1 >> 0] = 0; //@line 242
 HEAP8[$18 + 2 >> 0] = 0; //@line 244
 $22 = $6 + 16 | 0; //@line 245
 HEAP8[$18 + 3 >> 0] = 0; //@line 246
 HEAP8[$22 >> 0] = 0; //@line 248
 HEAP8[$22 + 1 >> 0] = 0; //@line 250
 HEAP8[$22 + 2 >> 0] = 0; //@line 252
 $26 = $6 + 20 | 0; //@line 253
 HEAP8[$22 + 3 >> 0] = 0; //@line 254
 HEAP8[$26 >> 0] = 0; //@line 256
 HEAP8[$26 + 1 >> 0] = 0; //@line 258
 HEAP8[$26 + 2 >> 0] = 0; //@line 260
 $30 = $6 + 24 | 0; //@line 261
 HEAP8[$26 + 3 >> 0] = 0; //@line 262
 HEAP8[$30 >> 0] = 0; //@line 264
 HEAP8[$30 + 1 >> 0] = 0; //@line 266
 HEAP8[$30 + 2 >> 0] = 0; //@line 268
 $34 = $6 + 28 | 0; //@line 269
 HEAP8[$30 + 3 >> 0] = 0; //@line 270
 HEAP8[$34 >> 0] = 0; //@line 272
 HEAP8[$34 + 1 >> 0] = 0; //@line 274
 HEAP8[$34 + 2 >> 0] = 0; //@line 276
 $38 = $6 + 32 | 0; //@line 277
 HEAP8[$34 + 3 >> 0] = 0; //@line 278
 HEAP8[$38 >> 0] = 0; //@line 280
 HEAP8[$38 + 1 >> 0] = 0; //@line 282
 HEAP8[$38 + 2 >> 0] = 0; //@line 284
 $42 = $6 + 36 | 0; //@line 285
 HEAP8[$38 + 3 >> 0] = 0; //@line 286
 HEAP8[$42 >> 0] = 0; //@line 288
 HEAP8[$42 + 1 >> 0] = 0; //@line 290
 HEAP8[$42 + 2 >> 0] = 0; //@line 292
 $46 = $6 + 40 | 0; //@line 293
 HEAP8[$42 + 3 >> 0] = 0; //@line 294
 HEAP8[$46 >> 0] = 0; //@line 296
 HEAP8[$46 + 1 >> 0] = 0; //@line 298
 HEAP8[$46 + 2 >> 0] = 0; //@line 300
 $50 = $6 + 44 | 0; //@line 301
 HEAP8[$46 + 3 >> 0] = 0; //@line 302
 HEAP8[$50 >> 0] = 0; //@line 304
 HEAP8[$50 + 1 >> 0] = 0; //@line 306
 HEAP8[$50 + 2 >> 0] = 0; //@line 308
 $54 = $6 + 48 | 0; //@line 309
 HEAP8[$50 + 3 >> 0] = 0; //@line 310
 HEAP8[$54 >> 0] = 0; //@line 312
 HEAP8[$54 + 1 >> 0] = 0; //@line 314
 HEAP8[$54 + 2 >> 0] = 0; //@line 316
 $58 = $6 + 52 | 0; //@line 317
 HEAP8[$54 + 3 >> 0] = 0; //@line 318
 HEAP8[$58 >> 0] = 0; //@line 320
 HEAP8[$58 + 1 >> 0] = 0; //@line 322
 HEAP8[$58 + 2 >> 0] = 0; //@line 324
 $62 = $6 + 56 | 0; //@line 325
 HEAP8[$58 + 3 >> 0] = 0; //@line 326
 HEAP8[$62 >> 0] = 0; //@line 328
 HEAP8[$62 + 1 >> 0] = 0; //@line 330
 HEAP8[$62 + 2 >> 0] = 0; //@line 332
 $66 = $6 + 60 | 0; //@line 333
 HEAP8[$62 + 3 >> 0] = 0; //@line 334
 HEAP8[$66 >> 0] = 0; //@line 336
 HEAP8[$66 + 1 >> 0] = 0; //@line 338
 HEAP8[$66 + 2 >> 0] = 0; //@line 340
 HEAP8[$66 + 3 >> 0] = 0; //@line 341
 return;
}
function _mbed_error_vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 30565
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30567
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30569
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30571
 if (($AsyncRetVal | 0) <= 0) {
  return;
 }
 if (!(HEAP32[5703] | 0)) {
  _serial_init(22816, 2, 3); //@line 30579
 }
 $9 = HEAP8[$4 >> 0] | 0; //@line 30581
 if (0 == 13 | $9 << 24 >> 24 != 10) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 30587
  _serial_putc(22816, $9 << 24 >> 24); //@line 30588
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 634; //@line 30591
   $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 30592
   HEAP32[$18 >> 2] = 0; //@line 30593
   $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 30594
   HEAP32[$19 >> 2] = $AsyncRetVal; //@line 30595
   $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 30596
   HEAP32[$20 >> 2] = $2; //@line 30597
   $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 30598
   HEAP8[$21 >> 0] = $9; //@line 30599
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 30600
   HEAP32[$22 >> 2] = $4; //@line 30601
   sp = STACKTOP; //@line 30602
   return;
  }
  ___async_unwind = 0; //@line 30605
  HEAP32[$ReallocAsyncCtx2 >> 2] = 634; //@line 30606
  $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 30607
  HEAP32[$18 >> 2] = 0; //@line 30608
  $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 30609
  HEAP32[$19 >> 2] = $AsyncRetVal; //@line 30610
  $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 30611
  HEAP32[$20 >> 2] = $2; //@line 30612
  $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 30613
  HEAP8[$21 >> 0] = $9; //@line 30614
  $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 30615
  HEAP32[$22 >> 2] = $4; //@line 30616
  sp = STACKTOP; //@line 30617
  return;
 } else {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 30620
  _serial_putc(22816, 13); //@line 30621
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 633; //@line 30624
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 30625
   HEAP8[$12 >> 0] = $9; //@line 30626
   $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 30627
   HEAP32[$13 >> 2] = 0; //@line 30628
   $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 30629
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 30630
   $15 = $ReallocAsyncCtx3 + 16 | 0; //@line 30631
   HEAP32[$15 >> 2] = $2; //@line 30632
   $16 = $ReallocAsyncCtx3 + 20 | 0; //@line 30633
   HEAP32[$16 >> 2] = $4; //@line 30634
   sp = STACKTOP; //@line 30635
   return;
  }
  ___async_unwind = 0; //@line 30638
  HEAP32[$ReallocAsyncCtx3 >> 2] = 633; //@line 30639
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 30640
  HEAP8[$12 >> 0] = $9; //@line 30641
  $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 30642
  HEAP32[$13 >> 2] = 0; //@line 30643
  $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 30644
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 30645
  $15 = $ReallocAsyncCtx3 + 16 | 0; //@line 30646
  HEAP32[$15 >> 2] = $2; //@line 30647
  $16 = $ReallocAsyncCtx3 + 20 | 0; //@line 30648
  HEAP32[$16 >> 2] = $4; //@line 30649
  sp = STACKTOP; //@line 30650
  return;
 }
}
function _mbed_error_vfprintf__async_cb_147($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 30658
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30662
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30664
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30668
 $12 = (HEAP32[$0 + 4 >> 2] | 0) + 1 | 0; //@line 30669
 if (($12 | 0) == ($4 | 0)) {
  return;
 }
 $13 = HEAP8[$10 + $12 >> 0] | 0; //@line 30675
 if ((HEAP8[$0 + 16 >> 0] | 0) == 13 | $13 << 24 >> 24 != 10) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 30681
  _serial_putc(22816, $13 << 24 >> 24); //@line 30682
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 634; //@line 30685
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 30686
   HEAP32[$22 >> 2] = $12; //@line 30687
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 30688
   HEAP32[$23 >> 2] = $4; //@line 30689
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 30690
   HEAP32[$24 >> 2] = $6; //@line 30691
   $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 30692
   HEAP8[$25 >> 0] = $13; //@line 30693
   $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 30694
   HEAP32[$26 >> 2] = $10; //@line 30695
   sp = STACKTOP; //@line 30696
   return;
  }
  ___async_unwind = 0; //@line 30699
  HEAP32[$ReallocAsyncCtx2 >> 2] = 634; //@line 30700
  $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 30701
  HEAP32[$22 >> 2] = $12; //@line 30702
  $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 30703
  HEAP32[$23 >> 2] = $4; //@line 30704
  $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 30705
  HEAP32[$24 >> 2] = $6; //@line 30706
  $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 30707
  HEAP8[$25 >> 0] = $13; //@line 30708
  $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 30709
  HEAP32[$26 >> 2] = $10; //@line 30710
  sp = STACKTOP; //@line 30711
  return;
 } else {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 30714
  _serial_putc(22816, 13); //@line 30715
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 633; //@line 30718
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 30719
   HEAP8[$16 >> 0] = $13; //@line 30720
   $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 30721
   HEAP32[$17 >> 2] = $12; //@line 30722
   $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 30723
   HEAP32[$18 >> 2] = $4; //@line 30724
   $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 30725
   HEAP32[$19 >> 2] = $6; //@line 30726
   $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 30727
   HEAP32[$20 >> 2] = $10; //@line 30728
   sp = STACKTOP; //@line 30729
   return;
  }
  ___async_unwind = 0; //@line 30732
  HEAP32[$ReallocAsyncCtx3 >> 2] = 633; //@line 30733
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 30734
  HEAP8[$16 >> 0] = $13; //@line 30735
  $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 30736
  HEAP32[$17 >> 2] = $12; //@line 30737
  $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 30738
  HEAP32[$18 >> 2] = $4; //@line 30739
  $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 30740
  HEAP32[$19 >> 2] = $6; //@line 30741
  $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 30742
  HEAP32[$20 >> 2] = $10; //@line 30743
  sp = STACKTOP; //@line 30744
  return;
 }
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb($0) {
 $0 = $0 | 0;
 var $$0$i34 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $31 = 0, $50 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 24415
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 24421
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24423
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24427
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24429
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 24432
 $trunc = HEAP8[$0 + 33 >> 0] | 0; //@line 24434
 $19 = HEAP32[$0 + 36 >> 2] | 0; //@line 24436
 $23 = HEAP32[$0 + 44 >> 2] | 0; //@line 24440
 $25 = HEAP32[$0 + 48 >> 2] | 0; //@line 24442
 $29 = (HEAP32[___async_retval >> 2] | 0) == -1010 ? HEAP8[HEAP32[$0 + 8 >> 2] >> 0] | 0 : HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 1 >> 0] | 0; //@line 24449
 $$0$i34 = $29 & 255; //@line 24450
 $30 = $29 & 255; //@line 24451
 $31 = $6 & 65535; //@line 24452
 if (($$0$i34 & 65535) < ($6 & 65535)) {
  HEAP32[$8 >> 2] = $31; //@line 24455
  HEAP32[$8 + 4 >> 2] = $30; //@line 24457
  _mbed_tracef(8, 12332, 13051, $8); //@line 24458
  HEAP16[$12 + 2232 >> 1] = $31 - $30; //@line 24462
  HEAP16[$12 + 2230 >> 1] = $$0$i34; //@line 24464
  _memcpy($12 + 1975 | 0, $14 | 0, $30 | 0) | 0; //@line 24466
 } else {
  HEAP16[$12 + 2230 >> 1] = $6; //@line 24469
  HEAP16[$12 + 2232 >> 1] = 0; //@line 24471
  if (!$16) {
   _memcpy($12 + 1975 | 0, $14 | 0, $31 | 0) | 0; //@line 24474
  }
 }
 switch ($trunc & 15) {
 case 9:
 case 5:
 case 1:
  {
   HEAP32[$12 + 1968 >> 2] = 0; //@line 24481
   HEAP8[$12 + 1972 >> 0] = HEAP8[$23 >> 0] | 0; //@line 24484
   switch ($trunc & 15) {
   case 6:
   case 2:
    {
     label = 8; //@line 24488
     break;
    }
   default:
    {}
   }
   break;
  }
 case 10:
 case 6:
 case 2:
  {
   label = 8; //@line 24497
   break;
  }
 default:
  {}
 }
 if ((label | 0) == 8) {
  HEAP32[$12 + 1968 >> 2] = 1; //@line 24505
  HEAP8[$12 + 1972 >> 0] = HEAP8[$23 >> 0] | 0; //@line 24508
  HEAP8[$12 + 1974 >> 0] = HEAP8[$12 + 2284 >> 0] | 0; //@line 24512
 }
 $50 = $12 + 2230 | 0; //@line 24514
 $55 = HEAPU16[$12 + 2232 >> 1] | 0; //@line 24519
 HEAP32[$19 >> 2] = HEAPU16[$50 >> 1]; //@line 24520
 HEAP32[$19 + 4 >> 2] = $55; //@line 24522
 _mbed_tracef(8, 12332, 13106, $19); //@line 24523
 HEAP32[$12 + 1876 >> 2] = 5; //@line 24525
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 24526
 $57 = __ZN12LoRaWANStack18lora_state_machineEv($12) | 0; //@line 24527
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 238; //@line 24530
  $58 = $ReallocAsyncCtx2 + 4 | 0; //@line 24531
  HEAP32[$58 >> 2] = $50; //@line 24532
  $59 = $ReallocAsyncCtx2 + 8 | 0; //@line 24533
  HEAP32[$59 >> 2] = $25; //@line 24534
  sp = STACKTOP; //@line 24535
  return;
 }
 HEAP32[___async_retval >> 2] = $57; //@line 24539
 ___async_unwind = 0; //@line 24540
 HEAP32[$ReallocAsyncCtx2 >> 2] = 238; //@line 24541
 $58 = $ReallocAsyncCtx2 + 4 | 0; //@line 24542
 HEAP32[$58 >> 2] = $50; //@line 24543
 $59 = $ReallocAsyncCtx2 + 8 | 0; //@line 24544
 HEAP32[$59 >> 2] = $25; //@line 24545
 sp = STACKTOP; //@line 24546
 return;
}
function __ZN18LoRaMacChannelPlan11remove_planEv__async_cb_205($0) {
 $0 = $0 | 0;
 var $10 = 0, $21 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $indvars$iv$reg2mem$0 = 0, label = 0, sp = 0, $indvars$iv$reg2mem$0$looptemp = 0;
 sp = STACKTOP; //@line 11724
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11728
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11730
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11732
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11734
 $indvars$iv$reg2mem$0 = HEAP32[$0 + 4 >> 2] | 0; //@line 11735
 while (1) {
  $indvars$iv$reg2mem$0$looptemp = $indvars$iv$reg2mem$0;
  $indvars$iv$reg2mem$0 = $indvars$iv$reg2mem$0 + 1 | 0; //@line 11737
  if ($indvars$iv$reg2mem$0 >>> 0 >= $4 >>> 0) {
   $35 = 0; //@line 11740
   label = 11; //@line 11741
   break;
  }
  if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$6 >> 2] | 0, $8, $indvars$iv$reg2mem$0) | 0) {
   $indvars$iv$reg2mem$0 = $indvars$iv$reg2mem$0; //@line 11747
   continue;
  }
  if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$6 >> 2] | 0, $10, $indvars$iv$reg2mem$0) | 0) {
   break;
  }
 }
 if ((label | 0) == 11) {
  $34 = ___async_retval; //@line 11759
  HEAP32[$34 >> 2] = $35; //@line 11760
  return;
 }
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$6 >> 2] | 0) | 0)) {
  $35 = -1002; //@line 11766
  $34 = ___async_retval; //@line 11767
  HEAP32[$34 >> 2] = $35; //@line 11768
  return;
 }
 if ($indvars$iv$reg2mem$0 >>> 0 >= ((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$6 >> 2] | 0) | 0) & 255) >>> 0) {
  $35 = -1003; //@line 11776
  $34 = ___async_retval; //@line 11777
  HEAP32[$34 >> 2] = $35; //@line 11778
  return;
 }
 $21 = HEAP32[$6 >> 2] | 0; //@line 11781
 $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 64 >> 2] | 0; //@line 11784
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 11786
 $26 = FUNCTION_TABLE_iii[$24 & 31]($21, $indvars$iv$reg2mem$0 & 255) | 0; //@line 11787
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 486; //@line 11790
  $27 = $ReallocAsyncCtx + 4 | 0; //@line 11791
  HEAP32[$27 >> 2] = $6; //@line 11792
  $28 = $ReallocAsyncCtx + 8 | 0; //@line 11793
  HEAP32[$28 >> 2] = $indvars$iv$reg2mem$0; //@line 11794
  $29 = $ReallocAsyncCtx + 12 | 0; //@line 11795
  HEAP32[$29 >> 2] = $4; //@line 11796
  $30 = $ReallocAsyncCtx + 16 | 0; //@line 11797
  HEAP32[$30 >> 2] = $8; //@line 11798
  $31 = $ReallocAsyncCtx + 20 | 0; //@line 11799
  HEAP32[$31 >> 2] = $10; //@line 11800
  sp = STACKTOP; //@line 11801
  return;
 }
 HEAP8[___async_retval >> 0] = $26 & 1; //@line 11806
 ___async_unwind = 0; //@line 11807
 HEAP32[$ReallocAsyncCtx >> 2] = 486; //@line 11808
 $27 = $ReallocAsyncCtx + 4 | 0; //@line 11809
 HEAP32[$27 >> 2] = $6; //@line 11810
 $28 = $ReallocAsyncCtx + 8 | 0; //@line 11811
 HEAP32[$28 >> 2] = $indvars$iv$reg2mem$0; //@line 11812
 $29 = $ReallocAsyncCtx + 12 | 0; //@line 11813
 HEAP32[$29 >> 2] = $4; //@line 11814
 $30 = $ReallocAsyncCtx + 16 | 0; //@line 11815
 HEAP32[$30 >> 2] = $8; //@line 11816
 $31 = $ReallocAsyncCtx + 20 | 0; //@line 11817
 HEAP32[$31 >> 2] = $10; //@line 11818
 sp = STACKTOP; //@line 11819
 return;
}
function __Z22compute_join_frame_micPKhtS0_Pj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $19 = 0, $22 = 0, $4 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 20060
 _mbedtls_cipher_init(22460); //@line 20061
 $4 = _mbedtls_cipher_info_from_type(2) | 0; //@line 20062
 if (!$4) {
  $$0 = -24960; //@line 20065
 } else {
  $AsyncCtx11 = _emscripten_alloc_async_context(20, sp) | 0; //@line 20067
  $6 = _mbedtls_cipher_setup(22460, $4) | 0; //@line 20068
  if (___async) {
   HEAP32[$AsyncCtx11 >> 2] = 501; //@line 20071
   HEAP32[$AsyncCtx11 + 4 >> 2] = $2; //@line 20073
   HEAP16[$AsyncCtx11 + 8 >> 1] = $1; //@line 20075
   HEAP32[$AsyncCtx11 + 12 >> 2] = $0; //@line 20077
   HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 20079
   sp = STACKTOP; //@line 20080
   return 0; //@line 20081
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 20083
  if (!$6) {
   $AsyncCtx7 = _emscripten_alloc_async_context(16, sp) | 0; //@line 20086
   $12 = _mbedtls_cipher_cmac_starts(22460, $2, 128) | 0; //@line 20087
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 502; //@line 20090
    HEAP16[$AsyncCtx7 + 4 >> 1] = $1; //@line 20092
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 20094
    HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 20096
    sp = STACKTOP; //@line 20097
    return 0; //@line 20098
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 20100
   if (!$12) {
    $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 20105
    $19 = _mbedtls_cipher_cmac_update(22460, $0, $1 & 255) | 0; //@line 20106
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 503; //@line 20109
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 20111
     sp = STACKTOP; //@line 20112
     return 0; //@line 20113
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 20115
    if (!$19) {
     $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 20118
     $22 = _mbedtls_cipher_cmac_finish(22460, 23772) | 0; //@line 20119
     if (___async) {
      HEAP32[$AsyncCtx3 >> 2] = 504; //@line 20122
      HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 20124
      sp = STACKTOP; //@line 20125
      return 0; //@line 20126
     }
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 20128
     if (!$22) {
      HEAP32[$3 >> 2] = (HEAPU8[23774] | 0) << 16 | (HEAPU8[23775] | 0) << 24 | (HEAPU8[23773] | 0) << 8 | (HEAPU8[23772] | 0); //@line 20145
      $$0 = 0; //@line 20146
     } else {
      $$0 = $22; //@line 20148
     }
    } else {
     $$0 = $19; //@line 20151
    }
   } else {
    $$0 = $12; //@line 20154
   }
  } else {
   $$0 = $6; //@line 20157
  }
 }
 $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 20160
 _mbedtls_cipher_free(22460); //@line 20161
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 505; //@line 20164
  HEAP32[$AsyncCtx15 + 4 >> 2] = $$0; //@line 20166
  sp = STACKTOP; //@line 20167
  return 0; //@line 20168
 } else {
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 20170
  return $$0 | 0; //@line 20171
 }
 return 0; //@line 20173
}
function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $27 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10700
 STACKTOP = STACKTOP + 48 | 0; //@line 10701
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 10701
 $vararg_buffer3 = sp + 16 | 0; //@line 10702
 $vararg_buffer = sp; //@line 10703
 $3 = sp + 32 | 0; //@line 10704
 $4 = $0 + 28 | 0; //@line 10705
 $5 = HEAP32[$4 >> 2] | 0; //@line 10706
 HEAP32[$3 >> 2] = $5; //@line 10707
 $7 = $0 + 20 | 0; //@line 10709
 $9 = (HEAP32[$7 >> 2] | 0) - $5 | 0; //@line 10711
 HEAP32[$3 + 4 >> 2] = $9; //@line 10712
 HEAP32[$3 + 8 >> 2] = $1; //@line 10714
 HEAP32[$3 + 12 >> 2] = $2; //@line 10716
 $12 = $9 + $2 | 0; //@line 10717
 $13 = $0 + 60 | 0; //@line 10718
 HEAP32[$vararg_buffer >> 2] = HEAP32[$13 >> 2]; //@line 10721
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 10723
 HEAP32[$vararg_buffer + 8 >> 2] = 2; //@line 10725
 $17 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0; //@line 10727
 L1 : do {
  if (($12 | 0) == ($17 | 0)) {
   label = 3; //@line 10731
  } else {
   $$04756 = 2; //@line 10733
   $$04855 = $12; //@line 10733
   $$04954 = $3; //@line 10733
   $27 = $17; //@line 10733
   while (1) {
    if (($27 | 0) < 0) {
     break;
    }
    $$04855 = $$04855 - $27 | 0; //@line 10739
    $37 = HEAP32[$$04954 + 4 >> 2] | 0; //@line 10741
    $38 = $27 >>> 0 > $37 >>> 0; //@line 10742
    $$150 = $38 ? $$04954 + 8 | 0 : $$04954; //@line 10744
    $$1 = $$04756 + ($38 << 31 >> 31) | 0; //@line 10746
    $$0 = $27 - ($38 ? $37 : 0) | 0; //@line 10748
    HEAP32[$$150 >> 2] = (HEAP32[$$150 >> 2] | 0) + $$0; //@line 10751
    $44 = $$150 + 4 | 0; //@line 10752
    HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) - $$0; //@line 10755
    HEAP32[$vararg_buffer3 >> 2] = HEAP32[$13 >> 2]; //@line 10758
    HEAP32[$vararg_buffer3 + 4 >> 2] = $$150; //@line 10760
    HEAP32[$vararg_buffer3 + 8 >> 2] = $$1; //@line 10762
    $27 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0; //@line 10764
    if (($$04855 | 0) == ($27 | 0)) {
     label = 3; //@line 10767
     break L1;
    } else {
     $$04756 = $$1; //@line 10770
     $$04954 = $$150; //@line 10770
    }
   }
   HEAP32[$0 + 16 >> 2] = 0; //@line 10774
   HEAP32[$4 >> 2] = 0; //@line 10775
   HEAP32[$7 >> 2] = 0; //@line 10776
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32; //@line 10779
   if (($$04756 | 0) == 2) {
    $$051 = 0; //@line 10782
   } else {
    $$051 = $2 - (HEAP32[$$04954 + 4 >> 2] | 0) | 0; //@line 10787
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $20 = HEAP32[$0 + 44 >> 2] | 0; //@line 10793
  HEAP32[$0 + 16 >> 2] = $20 + (HEAP32[$0 + 48 >> 2] | 0); //@line 10798
  $25 = $20; //@line 10799
  HEAP32[$4 >> 2] = $25; //@line 10800
  HEAP32[$7 >> 2] = $25; //@line 10801
  $$051 = $2; //@line 10802
 }
 STACKTOP = sp; //@line 10804
 return $$051 | 0; //@line 10804
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_128($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx29 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 28397
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28399
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28401
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28403
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28405
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28407
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx29 = _emscripten_realloc_async_context(24) | 0; //@line 28412
  _mbed_assert_internal(13588, 13597, 199); //@line 28413
  if (___async) {
   HEAP32[$ReallocAsyncCtx29 >> 2] = 336; //@line 28416
   $13 = $ReallocAsyncCtx29 + 4 | 0; //@line 28417
   HEAP32[$13 >> 2] = $2; //@line 28418
   $14 = $ReallocAsyncCtx29 + 8 | 0; //@line 28419
   HEAP32[$14 >> 2] = $4; //@line 28420
   $15 = $ReallocAsyncCtx29 + 12 | 0; //@line 28421
   HEAP32[$15 >> 2] = $6; //@line 28422
   $16 = $ReallocAsyncCtx29 + 16 | 0; //@line 28423
   HEAP32[$16 >> 2] = $8; //@line 28424
   $17 = $ReallocAsyncCtx29 + 20 | 0; //@line 28425
   HEAP32[$17 >> 2] = $10; //@line 28426
   sp = STACKTOP; //@line 28427
   return;
  }
  ___async_unwind = 0; //@line 28430
  HEAP32[$ReallocAsyncCtx29 >> 2] = 336; //@line 28431
  $13 = $ReallocAsyncCtx29 + 4 | 0; //@line 28432
  HEAP32[$13 >> 2] = $2; //@line 28433
  $14 = $ReallocAsyncCtx29 + 8 | 0; //@line 28434
  HEAP32[$14 >> 2] = $4; //@line 28435
  $15 = $ReallocAsyncCtx29 + 12 | 0; //@line 28436
  HEAP32[$15 >> 2] = $6; //@line 28437
  $16 = $ReallocAsyncCtx29 + 16 | 0; //@line 28438
  HEAP32[$16 >> 2] = $8; //@line 28439
  $17 = $ReallocAsyncCtx29 + 20 | 0; //@line 28440
  HEAP32[$17 >> 2] = $10; //@line 28441
  sp = STACKTOP; //@line 28442
  return;
 }
 $18 = $4 + 944 | 0; //@line 28445
 HEAP8[$18 >> 0] = HEAP8[$18 >> 0] | 34; //@line 28448
 $21 = HEAP32[$6 >> 2] | 0; //@line 28449
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 28451
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $4 + 996 | 0, 1); //@line 28452
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 337; //@line 28455
  $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 28456
  HEAP32[$23 >> 2] = $4; //@line 28457
  $24 = $ReallocAsyncCtx6 + 8 | 0; //@line 28458
  HEAP32[$24 >> 2] = $6; //@line 28459
  $25 = $ReallocAsyncCtx6 + 12 | 0; //@line 28460
  HEAP32[$25 >> 2] = $8; //@line 28461
  $26 = $ReallocAsyncCtx6 + 16 | 0; //@line 28462
  HEAP32[$26 >> 2] = $10; //@line 28463
  sp = STACKTOP; //@line 28464
  return;
 }
 ___async_unwind = 0; //@line 28467
 HEAP32[$ReallocAsyncCtx6 >> 2] = 337; //@line 28468
 $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 28469
 HEAP32[$23 >> 2] = $4; //@line 28470
 $24 = $ReallocAsyncCtx6 + 8 | 0; //@line 28471
 HEAP32[$24 >> 2] = $6; //@line 28472
 $25 = $ReallocAsyncCtx6 + 12 | 0; //@line 28473
 HEAP32[$25 >> 2] = $8; //@line 28474
 $26 = $ReallocAsyncCtx6 + 16 | 0; //@line 28475
 HEAP32[$26 >> 2] = $10; //@line 28476
 sp = STACKTOP; //@line 28477
 return;
}
function __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$026 = 0, $$1 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $28 = 0, $31 = 0, $33 = 0, $34 = 0, $6 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17560
 STACKTOP = STACKTOP + 16 | 0; //@line 17561
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17561
 $2 = sp; //@line 17562
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $$1 = -1002; //@line 17566
  STACKTOP = sp; //@line 17567
  return $$1 | 0; //@line 17567
 }
 $6 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 17570
 $7 = HEAP8[$1 >> 0] | 0; //@line 17571
 if (($7 & 255) > ($6 & 255)) {
  $$1 = -1003; //@line 17574
  STACKTOP = sp; //@line 17575
  return $$1 | 0; //@line 17575
 }
 $9 = $1 + 4 | 0; //@line 17577
 if (!($7 << 24 >> 24)) {
  $$1 = 0; //@line 17580
  STACKTOP = sp; //@line 17581
  return $$1 | 0; //@line 17581
 }
 $11 = $2 + 9 | 0; //@line 17583
 $12 = $2 + 8 | 0; //@line 17584
 $13 = $2 + 4 | 0; //@line 17585
 $$026 = 0; //@line 17586
 $20 = 0; //@line 17586
 while (1) {
  $18 = HEAP32[$9 >> 2] | 0; //@line 17588
  HEAP8[$11 >> 0] = HEAP8[$18 + ($20 << 4) + 13 >> 0] | 0; //@line 17591
  HEAP8[$12 >> 0] = HEAP8[$18 + ($20 << 4) + 12 >> 0] | 0; //@line 17594
  HEAP32[$2 >> 2] = HEAP32[$18 + ($20 << 4) + 4 >> 2]; //@line 17597
  HEAP32[$13 >> 2] = HEAP32[$18 + ($20 << 4) + 8 >> 2]; //@line 17600
  $28 = HEAP32[$0 >> 2] | 0; //@line 17601
  $31 = HEAP32[(HEAP32[$28 >> 2] | 0) + 60 >> 2] | 0; //@line 17604
  $33 = HEAP8[$18 + ($20 << 4) >> 0] | 0; //@line 17606
  $AsyncCtx = _emscripten_alloc_async_context(44, sp) | 0; //@line 17607
  $34 = FUNCTION_TABLE_iiii[$31 & 15]($28, $2, $33) | 0; //@line 17608
  if (___async) {
   label = 7; //@line 17611
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 17614
  $16 = $$026 + 1 << 24 >> 24; //@line 17616
  if ($34 | 0) {
   $$1 = $34; //@line 17618
   label = 9; //@line 17619
   break;
  }
  if (($16 & 255) < (HEAPU8[$1 >> 0] | 0)) {
   $$026 = $16; //@line 17626
   $20 = $16 & 255; //@line 17626
  } else {
   $$1 = 0; //@line 17628
   label = 9; //@line 17629
   break;
  }
 }
 if ((label | 0) == 7) {
  HEAP32[$AsyncCtx >> 2] = 485; //@line 17634
  HEAP8[$AsyncCtx + 4 >> 0] = $$026; //@line 17636
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 17638
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 17640
  HEAP32[$AsyncCtx + 16 >> 2] = $9; //@line 17642
  HEAP32[$AsyncCtx + 20 >> 2] = $11; //@line 17644
  HEAP32[$AsyncCtx + 24 >> 2] = $12; //@line 17646
  HEAP32[$AsyncCtx + 28 >> 2] = $2; //@line 17648
  HEAP32[$AsyncCtx + 32 >> 2] = $13; //@line 17650
  HEAP32[$AsyncCtx + 36 >> 2] = $0; //@line 17652
  HEAP32[$AsyncCtx + 40 >> 2] = $2; //@line 17654
  sp = STACKTOP; //@line 17655
  STACKTOP = sp; //@line 17656
  return 0; //@line 17656
 } else if ((label | 0) == 9) {
  STACKTOP = sp; //@line 17659
  return $$1 | 0; //@line 17659
 }
 return 0; //@line 17661
}
function _initialize__async_cb_260($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16418
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16420
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16422
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16424
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16426
 $10 = 7 << 32 + -4; //@line 16428
 $11 = ___muldi3($10 | 0, 0, 1e6, 0) | 0; //@line 16429
 $12 = tempRet0; //@line 16430
 $13 = _i64Add($2 | 0, 0, -1, -1) | 0; //@line 16431
 $15 = _i64Add($13 | 0, tempRet0 | 0, $11 | 0, $12 | 0) | 0; //@line 16433
 $17 = ___udivdi3($15 | 0, tempRet0 | 0, $2 | 0, 0) | 0; //@line 16435
 $18 = tempRet0; //@line 16436
 $19 = HEAP32[$4 >> 2] | 0; //@line 16437
 HEAP32[$19 >> 2] = 0; //@line 16438
 HEAP32[$19 + 4 >> 2] = 0; //@line 16440
 $23 = HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0; //@line 16443
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 16444
 $24 = FUNCTION_TABLE_i[$23 & 7]() | 0; //@line 16445
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 601; //@line 16448
  $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 16449
  HEAP32[$25 >> 2] = $4; //@line 16450
  $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 16451
  HEAP32[$26 >> 2] = $2; //@line 16452
  $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 16453
  HEAP32[$27 >> 2] = 32; //@line 16454
  $28 = $ReallocAsyncCtx3 + 16 | 0; //@line 16455
  HEAP32[$28 >> 2] = $10; //@line 16456
  $29 = $ReallocAsyncCtx3 + 24 | 0; //@line 16457
  $30 = $29; //@line 16458
  $31 = $30; //@line 16459
  HEAP32[$31 >> 2] = $17; //@line 16460
  $32 = $30 + 4 | 0; //@line 16461
  $33 = $32; //@line 16462
  HEAP32[$33 >> 2] = $18; //@line 16463
  $34 = $ReallocAsyncCtx3 + 32 | 0; //@line 16464
  HEAP32[$34 >> 2] = $6; //@line 16465
  $35 = $ReallocAsyncCtx3 + 36 | 0; //@line 16466
  HEAP32[$35 >> 2] = $8; //@line 16467
  sp = STACKTOP; //@line 16468
  return;
 }
 HEAP32[___async_retval >> 2] = $24; //@line 16472
 ___async_unwind = 0; //@line 16473
 HEAP32[$ReallocAsyncCtx3 >> 2] = 601; //@line 16474
 $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 16475
 HEAP32[$25 >> 2] = $4; //@line 16476
 $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 16477
 HEAP32[$26 >> 2] = $2; //@line 16478
 $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 16479
 HEAP32[$27 >> 2] = 32; //@line 16480
 $28 = $ReallocAsyncCtx3 + 16 | 0; //@line 16481
 HEAP32[$28 >> 2] = $10; //@line 16482
 $29 = $ReallocAsyncCtx3 + 24 | 0; //@line 16483
 $30 = $29; //@line 16484
 $31 = $30; //@line 16485
 HEAP32[$31 >> 2] = $17; //@line 16486
 $32 = $30 + 4 | 0; //@line 16487
 $33 = $32; //@line 16488
 HEAP32[$33 >> 2] = $18; //@line 16489
 $34 = $ReallocAsyncCtx3 + 32 | 0; //@line 16490
 HEAP32[$34 >> 2] = $6; //@line 16491
 $35 = $ReallocAsyncCtx3 + 36 | 0; //@line 16492
 HEAP32[$35 >> 2] = $8; //@line 16493
 sp = STACKTOP; //@line 16494
 return;
}
function __ZN7LoRaPHY11add_channelEP16channel_params_th($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$$123$off0 = 0, $$024 = 0, $$4$off0 = 0, $$5$off039 = 0, $11 = 0, $13 = 0, $15 = 0, $17 = 0, $20 = 0, $22 = 0, $35 = 0, $43 = 0, $44 = 0, $45 = 0, $50 = 0, $52 = 0, $6 = 0, $62 = 0, $AsyncCtx = 0, $not$ = 0, sp = 0;
 sp = STACKTOP; //@line 22912
 if (!(HEAP8[$0 + 16 >> 0] | 0)) {
  $$024 = -1003; //@line 22917
  return $$024 | 0; //@line 22918
 }
 $6 = $2 & 255; //@line 22920
 if ((HEAPU8[$0 + 20 >> 0] | 0) <= ($2 & 255)) {
  $$024 = -1003; //@line 22925
  return $$024 | 0; //@line 22926
 }
 $11 = HEAP8[$1 + 8 >> 0] | 0; //@line 22929
 $13 = ($11 << 4 & 255) << 24 >> 24 >> 4; //@line 22931
 $15 = HEAP8[$0 + 26 >> 0] | 0; //@line 22933
 $17 = HEAP8[$0 + 27 >> 0] | 0; //@line 22935
 $20 = $11 << 24 >> 24 >> 4; //@line 22939
 $22 = $20 << 24 >> 24 <= $17 << 24 >> 24; //@line 22941
 $$$123$off0 = $13 << 24 >> 24 > $20 << 24 >> 24 | (($13 << 24 >> 24 > $17 << 24 >> 24 ? 1 : $13 << 24 >> 24 < $15 << 24 >> 24) | $20 << 24 >> 24 >= $15 << 24 >> 24 & $22 ^ 1); //@line 22946
 if ((HEAPU8[$0 + 18 >> 0] | 0) > ($2 & 255)) {
  $$4$off0 = ($13 << 24 >> 24 | 0) > ($15 & 255 | 0) | $$$123$off0 | $22 & $20 << 24 >> 24 >= (HEAP8[$0 + 31 >> 0] | 0) ^ 1; //@line 22960
  $35 = HEAP32[$1 >> 2] | 0; //@line 22961
  if (($35 | 0) == (HEAP32[(HEAP32[$0 + 112 >> 2] | 0) + ($6 * 12 | 0) >> 2] | 0)) {
   $$5$off039 = $$4$off0; //@line 22968
   $44 = $35; //@line 22968
  } else {
   $$024 = $$4$off0 ? -1006 : -1004; //@line 22971
   return $$024 | 0; //@line 22972
  }
 } else {
  $$5$off039 = $$$123$off0; //@line 22976
  $44 = HEAP32[$1 >> 2] | 0; //@line 22976
 }
 $43 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 22980
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 22981
 $45 = FUNCTION_TABLE_iii[$43 & 31]($0, $44) | 0; //@line 22982
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 535; //@line 22985
  HEAP8[$AsyncCtx + 4 >> 0] = $$5$off039 & 1; //@line 22988
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 22990
  HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 22992
  HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 22994
  sp = STACKTOP; //@line 22995
  return 0; //@line 22996
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 22998
 $not$ = $45 ^ 1; //@line 22999
 if ($$5$off039 | $not$) {
  $$024 = $$5$off039 ? $$5$off039 & $not$ ? -1006 : -1005 : -1004; //@line 23005
  return $$024 | 0; //@line 23006
 }
 $50 = $0 + 112 | 0; //@line 23008
 $52 = (HEAP32[$50 >> 2] | 0) + ($6 * 12 | 0) | 0; //@line 23010
 HEAP32[$52 >> 2] = HEAP32[$1 >> 2]; //@line 23011
 HEAP32[$52 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 23011
 HEAP32[$52 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 23011
 HEAP8[(HEAP32[$50 >> 2] | 0) + ($6 * 12 | 0) + 9 >> 0] = HEAP8[$1 + 9 >> 0] | 0; //@line 23016
 $62 = (HEAP32[$0 + 120 >> 2] | 0) + ($6 >>> 4 << 1) | 0; //@line 23022
 HEAP16[$62 >> 1] = 1 << ($6 & 15) | HEAPU16[$62 >> 1]; //@line 23027
 $$024 = 0; //@line 23028
 return $$024 | 0; //@line 23029
}
function __ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$011 = 0, $$pre$phi13Z2D = 0, $13 = 0, $14 = 0, $28 = 0, $3 = 0, $31 = 0, $33 = 0, $34 = 0, $38 = 0, $44 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $or$cond$i = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 16084
 STACKTOP = STACKTOP + 16 | 0; //@line 16085
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16085
 $vararg_buffer = sp; //@line 16086
 $3 = $0 + 4 | 0; //@line 16087
 $5 = (__ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($3) | 0) & 255; //@line 16089
 $8 = ((__ZNK14LoRaMacCommand26get_repeat_commands_lengthEv($3) | 0) & 255) + $5 | 0; //@line 16092
 if (!$2) {
  $$011 = -1003; //@line 16095
  STACKTOP = sp; //@line 16096
  return $$011 | 0; //@line 16096
 }
 do {
  if (!(HEAP8[$0 + 1156 >> 0] | 0)) {
   $$pre$phi13Z2D = $0 + 1097 | 0; //@line 16104
  } else {
   $13 = HEAP32[$0 >> 2] | 0; //@line 16106
   $14 = $0 + 1097 | 0; //@line 16107
   $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 16110
   __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($13, 0, $14, $0 + 1096 | 0, $0 + 964 | 0) | 0; //@line 16111
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 450; //@line 16114
    HEAP32[$AsyncCtx + 4 >> 2] = $14; //@line 16116
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 16118
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 16120
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 16122
    HEAP32[$AsyncCtx + 20 >> 2] = $8; //@line 16124
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 16126
    HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer; //@line 16128
    HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer; //@line 16130
    HEAP8[$AsyncCtx + 36 >> 0] = $1; //@line 16132
    sp = STACKTOP; //@line 16133
    STACKTOP = sp; //@line 16134
    return 0; //@line 16134
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16136
    $$pre$phi13Z2D = $14; //@line 16137
    break;
   }
  }
 } while (0);
 $28 = $0 + 369 | 0; //@line 16144
 $31 = __ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$0 >> 2] | 0, HEAP8[$$pre$phi13Z2D >> 0] | 0, (HEAP8[$28 >> 0] | 0) != 0) | 0; //@line 16147
 HEAP8[$2 + 1 >> 0] = $31; //@line 16149
 $33 = $31 & 255; //@line 16150
 $34 = $8 & 255; //@line 16151
 if ($34 >>> 0 > $33 >>> 0) {
  HEAP8[$2 >> 0] = $31; //@line 16154
  __ZN14LoRaMacCommand20clear_command_bufferEv($3); //@line 16155
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($3); //@line 16156
  $$0 = 0; //@line 16157
 } else {
  HEAP8[$2 >> 0] = $33 - $8; //@line 16161
  $$0 = $34; //@line 16162
 }
 $38 = HEAP8[$$pre$phi13Z2D >> 0] | 0; //@line 16164
 _mbed_tracef(16, 13704, 14009, $vararg_buffer); //@line 16165
 $44 = $$0 + ($1 & 255) | 0; //@line 16171
 $or$cond$i = $44 >>> 0 < 256 & $44 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$0 >> 2] | 0, $38, (HEAP8[$28 >> 0] | 0) != 0) | 0) & 255) >>> 0; //@line 16175
 $$011 = $or$cond$i ? 0 : -1010; //@line 16177
 STACKTOP = sp; //@line 16178
 return $$011 | 0; //@line 16178
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0, $38 = 0, $40 = 0, $41 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 9717
 STACKTOP = STACKTOP + 16 | 0; //@line 9718
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9718
 $vararg_buffer1 = sp + 8 | 0; //@line 9719
 _mbed_tracef(16, 13704, 13746, sp); //@line 9721
 $2 = HEAP32[$0 + 356 >> 2] | 0; //@line 9723
 $AsyncCtx9 = _emscripten_alloc_async_context(16, sp) | 0; //@line 9725
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $0 + 1056 | 0); //@line 9726
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 296; //@line 9729
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 9731
  HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer1; //@line 9733
  HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer1; //@line 9735
  sp = STACKTOP; //@line 9736
  STACKTOP = sp; //@line 9737
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 9739
 $9 = $0 + 1184 | 0; //@line 9742
 HEAP8[$9 >> 0] = HEAP8[$0 + 378 >> 0] | 0; //@line 9743
 HEAP32[$0 + 1188 >> 2] = HEAP32[$0 + 1132 >> 2]; //@line 9747
 HEAP8[$0 + 1200 >> 0] = HEAP8[$0 + 1141 >> 0] | 0; //@line 9751
 HEAP8[$0 + 1201 >> 0] = HEAP8[$0 + 369 >> 0] | 0; //@line 9755
 HEAP32[$0 + 1204 >> 2] = 1; //@line 9757
 $23 = $0 + 1202 | 0; //@line 9761
 HEAP8[$23 >> 0] = (HEAP32[$0 + 360 >> 2] | 0) == 2 & 1; //@line 9763
 $24 = HEAP32[$0 >> 2] | 0; //@line 9764
 $27 = HEAP32[(HEAP32[$24 >> 2] | 0) + 24 >> 2] | 0; //@line 9767
 $30 = (__ZN11LoRaMacMcps14get_indicationEv($0 + 288 | 0) | 0) + 10 | 0; //@line 9770
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 9771
 $31 = FUNCTION_TABLE_iiii[$27 & 15]($24, $9, $30) | 0; //@line 9772
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 297; //@line 9775
  HEAP32[$AsyncCtx + 4 >> 2] = $23; //@line 9777
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 9779
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 9781
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer1; //@line 9783
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 9785
  sp = STACKTOP; //@line 9786
  STACKTOP = sp; //@line 9787
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9789
 if (!$31) {
  STACKTOP = sp; //@line 9791
  return;
 }
 $38 = (HEAP8[$23 >> 0] | 0) != 0; //@line 9794
 $40 = HEAP32[$0 + 1108 >> 2] | 0; //@line 9796
 _mbed_tracef(16, 13704, 13772, $vararg_buffer1); //@line 9797
 $41 = HEAP32[$0 >> 2] | 0; //@line 9798
 $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9799
 __ZN7LoRaPHY15setup_rx_windowEbj($41, $38, $40); //@line 9800
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 298; //@line 9803
  HEAP32[$AsyncCtx5 + 4 >> 2] = $0; //@line 9805
  sp = STACKTOP; //@line 9806
  STACKTOP = sp; //@line 9807
  return;
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 9809
 HEAP32[$0 + 364 >> 2] = 1; //@line 9811
 STACKTOP = sp; //@line 9812
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_22($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 18597
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18601
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18603
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18605
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18607
 $11 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 18608
 if (!$11) {
  $18 = HEAP32[$4 >> 2] | 0; //@line 18611
  $20 = $8 + 12 | 0; //@line 18613
  HEAP32[$8 >> 2] = 441; //@line 18614
  HEAP32[$8 + 4 >> 2] = 0; //@line 18616
  HEAP32[$8 + 8 >> 2] = $6; //@line 18618
  HEAP32[$20 >> 2] = 912; //@line 18619
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 18620
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($18, $6 + 1076 | 0, $8); //@line 18621
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 442; //@line 18624
   $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 18625
   HEAP32[$21 >> 2] = $20; //@line 18626
   $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 18627
   HEAP32[$22 >> 2] = $4; //@line 18628
   $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 18629
   HEAP32[$23 >> 2] = $6; //@line 18630
   $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 18631
   HEAP32[$24 >> 2] = $8; //@line 18632
   sp = STACKTOP; //@line 18633
   return;
  }
  ___async_unwind = 0; //@line 18636
  HEAP32[$ReallocAsyncCtx6 >> 2] = 442; //@line 18637
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 18638
  HEAP32[$21 >> 2] = $20; //@line 18639
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 18640
  HEAP32[$22 >> 2] = $4; //@line 18641
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 18642
  HEAP32[$23 >> 2] = $6; //@line 18643
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 18644
  HEAP32[$24 >> 2] = $8; //@line 18645
  sp = STACKTOP; //@line 18646
  return;
 } else {
  $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 18650
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 18651
  FUNCTION_TABLE_vi[$14 & 1023]($10); //@line 18652
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 440; //@line 18655
   $15 = $ReallocAsyncCtx4 + 4 | 0; //@line 18656
   HEAP32[$15 >> 2] = $4; //@line 18657
   $16 = $ReallocAsyncCtx4 + 8 | 0; //@line 18658
   HEAP32[$16 >> 2] = $6; //@line 18659
   $17 = $ReallocAsyncCtx4 + 12 | 0; //@line 18660
   HEAP32[$17 >> 2] = $8; //@line 18661
   sp = STACKTOP; //@line 18662
   return;
  }
  ___async_unwind = 0; //@line 18665
  HEAP32[$ReallocAsyncCtx4 >> 2] = 440; //@line 18666
  $15 = $ReallocAsyncCtx4 + 4 | 0; //@line 18667
  HEAP32[$15 >> 2] = $4; //@line 18668
  $16 = $ReallocAsyncCtx4 + 8 | 0; //@line 18669
  HEAP32[$16 >> 2] = $6; //@line 18670
  $17 = $ReallocAsyncCtx4 + 12 | 0; //@line 18671
  HEAP32[$17 >> 2] = $8; //@line 18672
  sp = STACKTOP; //@line 18673
  return;
 }
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $12 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19850
 STACKTOP = STACKTOP + 16 | 0; //@line 19851
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 19851
 $$byval_copy = sp; //@line 19852
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19854
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19856
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19858
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19860
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19864
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19866
 if ($AsyncRetVal | 0) {
  $28 = ___async_retval; //@line 19869
  HEAP32[$28 >> 2] = $AsyncRetVal; //@line 19870
  STACKTOP = sp; //@line 19871
  return;
 }
 if ((HEAP32[$2 >> 2] | 0) != 2) {
  $28 = ___async_retval; //@line 19876
  HEAP32[$28 >> 2] = $AsyncRetVal; //@line 19877
  STACKTOP = sp; //@line 19878
  return;
 }
 switch (HEAP32[$4 >> 2] | 0) {
 case 0:
  {
   break;
  }
 case 10:
  {
   label = 5; //@line 19886
   break;
  }
 default:
  {
   $28 = ___async_retval; //@line 19890
   HEAP32[$28 >> 2] = $AsyncRetVal; //@line 19891
   STACKTOP = sp; //@line 19892
   return;
  }
 }
 if ((label | 0) == 5) {
  if (!(HEAP8[$12 + 372 >> 0] | 0)) {
   $28 = ___async_retval; //@line 19900
   HEAP32[$28 >> 2] = $AsyncRetVal; //@line 19901
   STACKTOP = sp; //@line 19902
   return;
  }
 }
 _mbed_tracef(16, 13704, 13723, $8); //@line 19905
 $22 = HEAP32[$12 + 1328 >> 2] | 0; //@line 19907
 HEAP32[$6 >> 2] = 279; //@line 19908
 HEAP32[$6 + 4 >> 2] = 0; //@line 19910
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 19911
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 19912
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 19912
 $23 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($22, $12, $$byval_copy) | 0; //@line 19913
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 464; //@line 19916
  $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 19917
  HEAP32[$24 >> 2] = $6; //@line 19918
  $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 19919
  HEAP32[$25 >> 2] = $12; //@line 19920
  $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 19921
  HEAP32[$26 >> 2] = $AsyncRetVal; //@line 19922
  sp = STACKTOP; //@line 19923
  STACKTOP = sp; //@line 19924
  return;
 }
 HEAP32[___async_retval >> 2] = $23; //@line 19927
 ___async_unwind = 0; //@line 19928
 HEAP32[$ReallocAsyncCtx2 >> 2] = 464; //@line 19929
 $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 19930
 HEAP32[$24 >> 2] = $6; //@line 19931
 $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 19932
 HEAP32[$25 >> 2] = $12; //@line 19933
 $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 19934
 HEAP32[$26 >> 2] = $AsyncRetVal; //@line 19935
 sp = STACKTOP; //@line 19936
 STACKTOP = sp; //@line 19937
 return;
}
function __ZN14lorawan_timersD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22581
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22583
 $4 = HEAP32[$2 + 88 >> 2] | 0; //@line 22585
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 22590
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 22591
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 76 | 0); //@line 22592
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 271; //@line 22595
   $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 22596
   HEAP32[$9 >> 2] = $2; //@line 22597
   sp = STACKTOP; //@line 22598
   return;
  }
  ___async_unwind = 0; //@line 22601
  HEAP32[$ReallocAsyncCtx2 >> 2] = 271; //@line 22602
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 22603
  HEAP32[$9 >> 2] = $2; //@line 22604
  sp = STACKTOP; //@line 22605
  return;
 }
 $11 = HEAP32[$2 + 68 >> 2] | 0; //@line 22609
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 22614
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 22615
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 56 | 0); //@line 22616
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 272; //@line 22619
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 22620
   HEAP32[$16 >> 2] = $2; //@line 22621
   sp = STACKTOP; //@line 22622
   return;
  }
  ___async_unwind = 0; //@line 22625
  HEAP32[$ReallocAsyncCtx3 >> 2] = 272; //@line 22626
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 22627
  HEAP32[$16 >> 2] = $2; //@line 22628
  sp = STACKTOP; //@line 22629
  return;
 }
 $18 = HEAP32[$2 + 48 >> 2] | 0; //@line 22633
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 22638
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 22639
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 36 | 0); //@line 22640
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 273; //@line 22643
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 22644
   HEAP32[$23 >> 2] = $2; //@line 22645
   sp = STACKTOP; //@line 22646
   return;
  }
  ___async_unwind = 0; //@line 22649
  HEAP32[$ReallocAsyncCtx4 >> 2] = 273; //@line 22650
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 22651
  HEAP32[$23 >> 2] = $2; //@line 22652
  sp = STACKTOP; //@line 22653
  return;
 }
 $25 = HEAP32[$2 + 28 >> 2] | 0; //@line 22657
 if (!$25) {
  return;
 }
 $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 22664
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 22665
 FUNCTION_TABLE_vi[$29 & 1023]($2 + 16 | 0); //@line 22666
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 274; //@line 22669
  sp = STACKTOP; //@line 22670
  return;
 }
 ___async_unwind = 0; //@line 22673
 HEAP32[$ReallocAsyncCtx5 >> 2] = 274; //@line 22674
 sp = STACKTOP; //@line 22675
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_56($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 21545
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21547
 $4 = HEAP32[$2 + 60 >> 2] | 0; //@line 21549
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 21554
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 21555
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 48 | 0); //@line 21556
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 266; //@line 21559
   $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 21560
   HEAP32[$9 >> 2] = $2; //@line 21561
   sp = STACKTOP; //@line 21562
   return;
  }
  ___async_unwind = 0; //@line 21565
  HEAP32[$ReallocAsyncCtx4 >> 2] = 266; //@line 21566
  $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 21567
  HEAP32[$9 >> 2] = $2; //@line 21568
  sp = STACKTOP; //@line 21569
  return;
 }
 $11 = HEAP32[$2 + 44 >> 2] | 0; //@line 21573
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 21578
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 21579
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 32 | 0); //@line 21580
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 267; //@line 21583
   $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 21584
   HEAP32[$16 >> 2] = $2; //@line 21585
   sp = STACKTOP; //@line 21586
   return;
  }
  ___async_unwind = 0; //@line 21589
  HEAP32[$ReallocAsyncCtx5 >> 2] = 267; //@line 21590
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 21591
  HEAP32[$16 >> 2] = $2; //@line 21592
  sp = STACKTOP; //@line 21593
  return;
 }
 $18 = HEAP32[$2 + 28 >> 2] | 0; //@line 21597
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 21602
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 21603
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 16 | 0); //@line 21604
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 268; //@line 21607
   $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 21608
   HEAP32[$23 >> 2] = $2; //@line 21609
   sp = STACKTOP; //@line 21610
   return;
  }
  ___async_unwind = 0; //@line 21613
  HEAP32[$ReallocAsyncCtx6 >> 2] = 268; //@line 21614
  $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 21615
  HEAP32[$23 >> 2] = $2; //@line 21616
  sp = STACKTOP; //@line 21617
  return;
 }
 $25 = HEAP32[$2 + 12 >> 2] | 0; //@line 21621
 if (!$25) {
  return;
 }
 $28 = HEAP32[$25 + 8 >> 2] | 0; //@line 21627
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 21628
 FUNCTION_TABLE_vi[$28 & 1023]($2); //@line 21629
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 269; //@line 21632
  sp = STACKTOP; //@line 21633
  return;
 }
 ___async_unwind = 0; //@line 21636
 HEAP32[$ReallocAsyncCtx7 >> 2] = 269; //@line 21637
 sp = STACKTOP; //@line 21638
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_360($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx26 = 0, sp = 0;
 sp = STACKTOP; //@line 29145
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29149
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29151
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29153
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29155
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29157
 $12 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 29158
 if ($12 | 0) {
  $15 = HEAP32[$12 + 8 >> 2] | 0; //@line 29162
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(20) | 0; //@line 29163
  FUNCTION_TABLE_vi[$15 & 1023]($4); //@line 29164
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 209; //@line 29167
   $16 = $ReallocAsyncCtx10 + 4 | 0; //@line 29168
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 29169
   $17 = $ReallocAsyncCtx10 + 8 | 0; //@line 29170
   HEAP32[$17 >> 2] = $6; //@line 29171
   $18 = $ReallocAsyncCtx10 + 12 | 0; //@line 29172
   HEAP32[$18 >> 2] = $8; //@line 29173
   $19 = $ReallocAsyncCtx10 + 16 | 0; //@line 29174
   HEAP32[$19 >> 2] = $10; //@line 29175
   sp = STACKTOP; //@line 29176
   return;
  }
  ___async_unwind = 0; //@line 29179
  HEAP32[$ReallocAsyncCtx10 >> 2] = 209; //@line 29180
  $16 = $ReallocAsyncCtx10 + 4 | 0; //@line 29181
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 29182
  $17 = $ReallocAsyncCtx10 + 8 | 0; //@line 29183
  HEAP32[$17 >> 2] = $6; //@line 29184
  $18 = $ReallocAsyncCtx10 + 12 | 0; //@line 29185
  HEAP32[$18 >> 2] = $8; //@line 29186
  $19 = $ReallocAsyncCtx10 + 16 | 0; //@line 29187
  HEAP32[$19 >> 2] = $10; //@line 29188
  sp = STACKTOP; //@line 29189
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[$8 >> 2] = 6; //@line 29194
  HEAP32[___async_retval >> 2] = $6; //@line 29196
  return;
 }
 $ReallocAsyncCtx26 = _emscripten_realloc_async_context(16) | 0; //@line 29199
 _mbed_assert_internal(13588, 12372, 1245); //@line 29200
 if (___async) {
  HEAP32[$ReallocAsyncCtx26 >> 2] = 210; //@line 29203
  $21 = $ReallocAsyncCtx26 + 4 | 0; //@line 29204
  HEAP32[$21 >> 2] = $6; //@line 29205
  $22 = $ReallocAsyncCtx26 + 8 | 0; //@line 29206
  HEAP32[$22 >> 2] = $8; //@line 29207
  $23 = $ReallocAsyncCtx26 + 12 | 0; //@line 29208
  HEAP32[$23 >> 2] = $10; //@line 29209
  sp = STACKTOP; //@line 29210
  return;
 }
 ___async_unwind = 0; //@line 29213
 HEAP32[$ReallocAsyncCtx26 >> 2] = 210; //@line 29214
 $21 = $ReallocAsyncCtx26 + 4 | 0; //@line 29215
 HEAP32[$21 >> 2] = $6; //@line 29216
 $22 = $ReallocAsyncCtx26 + 8 | 0; //@line 29217
 HEAP32[$22 >> 2] = $8; //@line 29218
 $23 = $ReallocAsyncCtx26 + 12 | 0; //@line 29219
 HEAP32[$23 >> 2] = $10; //@line 29220
 sp = STACKTOP; //@line 29221
 return;
}
function __ZN7LoRaMacC2ER18LoRaWANTimeHandler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $18 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, stop = 0;
 __ZN14LoRaMacCommandC2Ev($0 + 4 | 0); //@line 8762
 __ZN11LoRaMacMlmeC2Ev($0 + 264 | 0); //@line 8764
 __ZN10LoRaMacMibC2Ev($0 + 348 | 0); //@line 8766
 __ZN18LoRaMacChannelPlanC2Ev($0 + 352 | 0); //@line 8768
 HEAP32[$0 + 356 >> 2] = $1; //@line 8770
 $7 = $0 + 996 | 0; //@line 8771
 HEAP32[$7 >> 2] = 0; //@line 8772
 HEAP32[$7 + 4 >> 2] = 0; //@line 8772
 HEAP32[$7 + 8 >> 2] = 0; //@line 8772
 HEAP32[$7 + 12 >> 2] = 0; //@line 8772
 $8 = $0 + 1016 | 0; //@line 8773
 HEAP32[$8 >> 2] = 0; //@line 8774
 HEAP32[$8 + 4 >> 2] = 0; //@line 8774
 HEAP32[$8 + 8 >> 2] = 0; //@line 8774
 HEAP32[$8 + 12 >> 2] = 0; //@line 8774
 $9 = $0 + 1036 | 0; //@line 8775
 HEAP32[$9 >> 2] = 0; //@line 8776
 HEAP32[$9 + 4 >> 2] = 0; //@line 8776
 HEAP32[$9 + 8 >> 2] = 0; //@line 8776
 HEAP32[$9 + 12 >> 2] = 0; //@line 8776
 $10 = $0 + 1056 | 0; //@line 8777
 HEAP32[$10 >> 2] = 0; //@line 8778
 HEAP32[$10 + 4 >> 2] = 0; //@line 8778
 HEAP32[$10 + 8 >> 2] = 0; //@line 8778
 HEAP32[$10 + 12 >> 2] = 0; //@line 8778
 $11 = $0 + 1076 | 0; //@line 8779
 HEAP32[$11 >> 2] = 0; //@line 8780
 HEAP32[$11 + 4 >> 2] = 0; //@line 8780
 HEAP32[$11 + 8 >> 2] = 0; //@line 8780
 HEAP32[$11 + 12 >> 2] = 0; //@line 8780
 dest = $0 + 1212 | 0; //@line 8782
 stop = dest + 112 | 0; //@line 8782
 do {
  HEAP32[dest >> 2] = 0; //@line 8782
  dest = dest + 4 | 0; //@line 8782
 } while ((dest | 0) < (stop | 0));
 HEAP32[$0 >> 2] = 0; //@line 8783
 $14 = $0 + 946 | 0; //@line 8785
 HEAP16[$0 + 636 >> 1] = 0; //@line 8787
 HEAP8[$0 + 893 >> 0] = 0; //@line 8789
 HEAP8[$0 + 370 >> 0] = 0; //@line 8791
 $18 = $0 + 371 | 0; //@line 8792
 dest = $0 + 900 | 0; //@line 8793
 stop = dest + 44 | 0; //@line 8793
 do {
  HEAP32[dest >> 2] = 0; //@line 8793
  dest = dest + 4 | 0; //@line 8793
 } while ((dest | 0) < (stop | 0));
 dest = $14; //@line 8794
 stop = dest + 18 | 0; //@line 8794
 do {
  HEAP16[dest >> 1] = 0; //@line 8794
  dest = dest + 2 | 0; //@line 8794
 } while ((dest | 0) < (stop | 0));
 HEAP8[$18 >> 0] = 1; //@line 8795
 HEAP8[$0 + 372 >> 0] = 0; //@line 8797
 HEAP32[$0 + 964 >> 2] = 0; //@line 8799
 HEAP8[$0 + 373 >> 0] = 0; //@line 8801
 HEAP8[$0 + 374 >> 0] = 0; //@line 8803
 HEAP8[$0 + 380 >> 0] = 0; //@line 8805
 HEAP32[$0 + 988 >> 2] = 0; //@line 8807
 HEAP32[$0 + 968 >> 2] = 0; //@line 8809
 HEAP8[$0 + 894 >> 0] = 1; //@line 8811
 HEAP8[$0 + 895 >> 0] = 1; //@line 8813
 HEAP8[$0 + 377 >> 0] = 0; //@line 8815
 HEAP32[$0 + 992 >> 2] = 0; //@line 8817
 HEAP32[$0 + 1208 >> 2] = 0; //@line 8819
 HEAP8[$0 + 1156 >> 0] = 0; //@line 8821
 HEAP8[$0 + 1152 >> 0] = 0; //@line 8823
 HEAP32[$0 + 1324 >> 2] = 0; //@line 8825
 HEAP32[$0 + 1328 >> 2] = 0; //@line 8827
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $21 = 0, $4 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 12765
 STACKTOP = STACKTOP + 16 | 0; //@line 12766
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12766
 $$byval_copy = sp + 8 | 0; //@line 12767
 $vararg_buffer = sp; //@line 12768
 _mbed_tracef(16, 13704, 13962, $vararg_buffer); //@line 12769
 do {
  if ((HEAP32[$0 + 360 >> 2] | 0) == 2) {
   _mbed_tracef(16, 13704, 13723, $$byval_copy); //@line 12775
   $7 = HEAP32[$0 + 1328 >> 2] | 0; //@line 12777
   HEAP32[$vararg_buffer >> 2] = 279; //@line 12778
   HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 12780
   $AsyncCtx5 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12781
   HEAP32[$$byval_copy >> 2] = HEAP32[$vararg_buffer >> 2]; //@line 12782
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$vararg_buffer + 4 >> 2]; //@line 12782
   $8 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($7, $0, $$byval_copy) | 0; //@line 12783
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 371; //@line 12786
    HEAP32[$AsyncCtx5 + 4 >> 2] = $vararg_buffer; //@line 12788
    HEAP32[$AsyncCtx5 + 8 >> 2] = $0; //@line 12790
    sp = STACKTOP; //@line 12791
    STACKTOP = sp; //@line 12792
    return;
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 12794
   do {
    if (!$8) {
     $AsyncCtx9 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12798
     _mbed_assert_internal(13588, 13597, 215); //@line 12799
     if (___async) {
      HEAP32[$AsyncCtx9 >> 2] = 372; //@line 12802
      HEAP32[$AsyncCtx9 + 4 >> 2] = $vararg_buffer; //@line 12804
      HEAP32[$AsyncCtx9 + 8 >> 2] = $0; //@line 12806
      sp = STACKTOP; //@line 12807
      STACKTOP = sp; //@line 12808
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx9 | 0); //@line 12810
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 12816
  } else {
   $4 = HEAP32[$0 >> 2] | 0; //@line 12818
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 12819
   __ZN7LoRaPHY18put_radio_to_sleepEv($4); //@line 12820
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 370; //@line 12823
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 12825
    sp = STACKTOP; //@line 12826
    STACKTOP = sp; //@line 12827
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 12829
    break;
   }
  }
 } while (0);
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 2; //@line 12837
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 2; //@line 12841
 $21 = $0 + 944 | 0; //@line 12842
 HEAP8[$21 >> 0] = HEAP8[$21 >> 0] | 32; //@line 12845
 STACKTOP = sp; //@line 12846
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$026 = 0, $10 = 0, $15 = 0, $21 = 0.0, $24 = 0.0, $27 = 0, $34 = 0, $35 = 0, $38 = 0, $43 = 0, $46 = 0, $48 = 0, $50 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 23088
 $6 = HEAP32[$0 + 112 >> 2] | 0; //@line 23092
 $7 = $1 + 2 | 0; //@line 23093
 $8 = HEAP8[$7 >> 0] | 0; //@line 23094
 $10 = HEAPU8[$1 >> 0] | 0; //@line 23096
 $15 = HEAP8[(HEAP32[$0 + 72 >> 2] | 0) + ((HEAPU8[$6 + ($10 * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 2 >> 0] | 0; //@line 23101
 if ($8 << 24 >> 24 > $15 << 24 >> 24) {
  HEAP8[$7 >> 0] = $15; //@line 23104
  $27 = $15; //@line 23105
 } else {
  $27 = $8; //@line 23107
 }
 if (!$2) {
  $$0 = HEAP32[$6 + ($10 * 12 | 0) >> 2] | 0; //@line 23113
 } else {
  $$0 = $2; //@line 23115
 }
 $21 = +HEAPF32[$1 + 4 >> 2]; //@line 23118
 if ($21 > 0.0) {
  $24 = +HEAPF32[$1 + 8 >> 2]; //@line 23122
  if ($24 > 0.0) {
   $$026 = ~~+Math_floor(+($21 - +($27 << 24 >> 24 << 1 >>> 0) - $24)); //@line 23132
  } else {
   $$026 = $27; //@line 23134
  }
 } else {
  $$026 = $27; //@line 23137
 }
 $34 = $0 + 4 | 0; //@line 23139
 $35 = HEAP32[$34 >> 2] | 0; //@line 23140
 $38 = HEAP32[(HEAP32[$35 >> 2] | 0) + 72 >> 2] | 0; //@line 23143
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 23144
 FUNCTION_TABLE_vi[$38 & 1023]($35); //@line 23145
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 536; //@line 23148
  HEAP32[$AsyncCtx + 4 >> 2] = $34; //@line 23150
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 23152
  HEAP32[$AsyncCtx + 12 >> 2] = $$0; //@line 23154
  HEAP8[$AsyncCtx + 16 >> 0] = $$026; //@line 23156
  sp = STACKTOP; //@line 23157
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 23160
 $43 = HEAP32[$34 >> 2] | 0; //@line 23161
 $46 = HEAP32[(HEAP32[$43 >> 2] | 0) + 68 >> 2] | 0; //@line 23164
 $48 = HEAP16[$1 + 12 >> 1] | 0; //@line 23166
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 23167
 FUNCTION_TABLE_viiii[$46 & 7]($43, $$0, $$026, $48); //@line 23168
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 537; //@line 23171
  HEAP32[$AsyncCtx2 + 4 >> 2] = $34; //@line 23173
  sp = STACKTOP; //@line 23174
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 23177
 $50 = HEAP32[$34 >> 2] | 0; //@line 23178
 $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 76 >> 2] | 0; //@line 23181
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 23182
 FUNCTION_TABLE_vi[$53 & 1023]($50); //@line 23183
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 538; //@line 23186
  sp = STACKTOP; //@line 23187
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 23190
  return;
 }
}
function _mbedtls_cipher_update__async_cb_6($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$1 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $26 = 0, $27 = 0, $29 = 0, $34 = 0, $4 = 0, $43 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17701
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17703
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17705
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17707
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17709
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17711
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17713
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17715
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17717
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17719
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 17721
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17723
 if ($AsyncRetVal | 0) {
  $$1 = $AsyncRetVal; //@line 17726
  $52 = ___async_retval; //@line 17727
  HEAP32[$52 >> 2] = $$1; //@line 17728
  return;
 }
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $4; //@line 17733
 HEAP32[$8 >> 2] = 0; //@line 17735
 $26 = $10 + $12 | 0; //@line 17736
 $27 = $14 - $12 | 0; //@line 17737
 if (!$27) {
  $$1 = 0; //@line 17740
  $52 = ___async_retval; //@line 17741
  HEAP32[$52 >> 2] = $$1; //@line 17742
  return;
 }
 $29 = ($27 >>> 0) % ($4 >>> 0) | 0; //@line 17745
 if (!$29) {
  $$0 = (HEAP32[$16 >> 2] | 0) == 0 ? $4 : 0; //@line 17751
 } else {
  $$0 = $29; //@line 17753
 }
 $34 = $27 - $$0 | 0; //@line 17756
 _memcpy($18 + 20 | 0, $26 + $34 | 0, $$0 | 0) | 0; //@line 17758
 HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + $$0; //@line 17761
 if (!$34) {
  $$1 = 0; //@line 17764
  $52 = ___async_retval; //@line 17765
  HEAP32[$52 >> 2] = $$1; //@line 17766
  return;
 }
 $43 = HEAP32[(HEAP32[(HEAP32[$20 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 17773
 $45 = HEAP32[$18 + 60 >> 2] | 0; //@line 17775
 $46 = HEAP32[$16 >> 2] | 0; //@line 17776
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 17778
 $48 = FUNCTION_TABLE_iiiiiii[$43 & 3]($45, $46, $34, $18 + 40 | 0, $26, $6 + $4 | 0) | 0; //@line 17779
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 579; //@line 17782
  $49 = $ReallocAsyncCtx3 + 4 | 0; //@line 17783
  HEAP32[$49 >> 2] = $2; //@line 17784
  $50 = $ReallocAsyncCtx3 + 8 | 0; //@line 17785
  HEAP32[$50 >> 2] = $34; //@line 17786
  sp = STACKTOP; //@line 17787
  return;
 }
 HEAP32[___async_retval >> 2] = $48; //@line 17791
 ___async_unwind = 0; //@line 17792
 HEAP32[$ReallocAsyncCtx3 >> 2] = 579; //@line 17793
 $49 = $ReallocAsyncCtx3 + 4 | 0; //@line 17794
 HEAP32[$49 >> 2] = $2; //@line 17795
 $50 = $ReallocAsyncCtx3 + 8 | 0; //@line 17796
 HEAP32[$50 >> 2] = $34; //@line 17797
 sp = STACKTOP; //@line 17798
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_208($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 12329
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12335
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12337
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 12339
 $9 = $6 + 32 | 0; //@line 12340
 $10 = $6 + 44 | 0; //@line 12341
 $11 = HEAP32[$10 >> 2] | 0; //@line 12342
 if (!$11) {
  return;
 }
 $13 = $8 + 1912 | 0; //@line 12347
 if (($13 | 0) == ($9 | 0)) {
  return;
 }
 $15 = $8 + 1924 | 0; //@line 12352
 $16 = HEAP32[$15 >> 2] | 0; //@line 12353
 if (!$16) {
  $25 = HEAP32[$11 + 4 >> 2] | 0; //@line 12357
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 12358
  FUNCTION_TABLE_vii[$25 & 31]($13, $9); //@line 12359
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 251; //@line 12362
   $26 = $ReallocAsyncCtx6 + 4 | 0; //@line 12363
   HEAP32[$26 >> 2] = $10; //@line 12364
   $27 = $ReallocAsyncCtx6 + 8 | 0; //@line 12365
   HEAP32[$27 >> 2] = $15; //@line 12366
   sp = STACKTOP; //@line 12367
   return;
  }
  ___async_unwind = 0; //@line 12370
  HEAP32[$ReallocAsyncCtx6 >> 2] = 251; //@line 12371
  $26 = $ReallocAsyncCtx6 + 4 | 0; //@line 12372
  HEAP32[$26 >> 2] = $10; //@line 12373
  $27 = $ReallocAsyncCtx6 + 8 | 0; //@line 12374
  HEAP32[$27 >> 2] = $15; //@line 12375
  sp = STACKTOP; //@line 12376
  return;
 } else {
  $19 = HEAP32[$16 + 8 >> 2] | 0; //@line 12380
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 12381
  FUNCTION_TABLE_vi[$19 & 1023]($13); //@line 12382
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 250; //@line 12385
   $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 12386
   HEAP32[$20 >> 2] = $10; //@line 12387
   $21 = $ReallocAsyncCtx5 + 8 | 0; //@line 12388
   HEAP32[$21 >> 2] = $15; //@line 12389
   $22 = $ReallocAsyncCtx5 + 12 | 0; //@line 12390
   HEAP32[$22 >> 2] = $13; //@line 12391
   $23 = $ReallocAsyncCtx5 + 16 | 0; //@line 12392
   HEAP32[$23 >> 2] = $9; //@line 12393
   sp = STACKTOP; //@line 12394
   return;
  }
  ___async_unwind = 0; //@line 12397
  HEAP32[$ReallocAsyncCtx5 >> 2] = 250; //@line 12398
  $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 12399
  HEAP32[$20 >> 2] = $10; //@line 12400
  $21 = $ReallocAsyncCtx5 + 8 | 0; //@line 12401
  HEAP32[$21 >> 2] = $15; //@line 12402
  $22 = $ReallocAsyncCtx5 + 12 | 0; //@line 12403
  HEAP32[$22 >> 2] = $13; //@line 12404
  $23 = $ReallocAsyncCtx5 + 16 | 0; //@line 12405
  HEAP32[$23 >> 2] = $9; //@line 12406
  sp = STACKTOP; //@line 12407
  return;
 }
}
function __ZN14lorawan_timersD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0, $30 = 0, $34 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 9030
 $2 = HEAP32[$0 + 108 >> 2] | 0; //@line 9032
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 9038
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 9039
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 96 | 0); //@line 9040
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 270; //@line 9043
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 9045
    sp = STACKTOP; //@line 9046
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 9049
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 88 >> 2] | 0; //@line 9055
 do {
  if ($9 | 0) {
   $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 9061
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9062
   FUNCTION_TABLE_vi[$13 & 1023]($0 + 76 | 0); //@line 9063
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 271; //@line 9066
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 9068
    sp = STACKTOP; //@line 9069
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 9072
    break;
   }
  }
 } while (0);
 $16 = HEAP32[$0 + 68 >> 2] | 0; //@line 9078
 do {
  if ($16 | 0) {
   $20 = HEAP32[$16 + 8 >> 2] | 0; //@line 9084
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9085
   FUNCTION_TABLE_vi[$20 & 1023]($0 + 56 | 0); //@line 9086
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 272; //@line 9089
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 9091
    sp = STACKTOP; //@line 9092
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 9095
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$0 + 48 >> 2] | 0; //@line 9101
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 9107
   $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9108
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 36 | 0); //@line 9109
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 273; //@line 9112
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 9114
    sp = STACKTOP; //@line 9115
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 9118
    break;
   }
  }
 } while (0);
 $30 = HEAP32[$0 + 28 >> 2] | 0; //@line 9124
 if (!$30) {
  return;
 }
 $34 = HEAP32[$30 + 8 >> 2] | 0; //@line 9131
 $AsyncCtx15 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9132
 FUNCTION_TABLE_vi[$34 & 1023]($0 + 16 | 0); //@line 9133
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 274; //@line 9136
  sp = STACKTOP; //@line 9137
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 9140
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_135($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx36 = 0, sp = 0;
 sp = STACKTOP; //@line 28958
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28960
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28962
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28964
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28966
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28968
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx36 = _emscripten_realloc_async_context(24) | 0; //@line 28973
  _mbed_assert_internal(13588, 13597, 199); //@line 28974
  if (___async) {
   HEAP32[$ReallocAsyncCtx36 >> 2] = 306; //@line 28977
   $13 = $ReallocAsyncCtx36 + 4 | 0; //@line 28978
   HEAP32[$13 >> 2] = $2; //@line 28979
   $14 = $ReallocAsyncCtx36 + 8 | 0; //@line 28980
   HEAP32[$14 >> 2] = $4; //@line 28981
   $15 = $ReallocAsyncCtx36 + 12 | 0; //@line 28982
   HEAP32[$15 >> 2] = $6; //@line 28983
   $16 = $ReallocAsyncCtx36 + 16 | 0; //@line 28984
   HEAP32[$16 >> 2] = $8; //@line 28985
   $17 = $ReallocAsyncCtx36 + 20 | 0; //@line 28986
   HEAP32[$17 >> 2] = $10; //@line 28987
   sp = STACKTOP; //@line 28988
   return;
  }
  ___async_unwind = 0; //@line 28991
  HEAP32[$ReallocAsyncCtx36 >> 2] = 306; //@line 28992
  $13 = $ReallocAsyncCtx36 + 4 | 0; //@line 28993
  HEAP32[$13 >> 2] = $2; //@line 28994
  $14 = $ReallocAsyncCtx36 + 8 | 0; //@line 28995
  HEAP32[$14 >> 2] = $4; //@line 28996
  $15 = $ReallocAsyncCtx36 + 12 | 0; //@line 28997
  HEAP32[$15 >> 2] = $6; //@line 28998
  $16 = $ReallocAsyncCtx36 + 16 | 0; //@line 28999
  HEAP32[$16 >> 2] = $8; //@line 29000
  $17 = $ReallocAsyncCtx36 + 20 | 0; //@line 29001
  HEAP32[$17 >> 2] = $10; //@line 29002
  sp = STACKTOP; //@line 29003
  return;
 }
 $18 = $4 + 944 | 0; //@line 29006
 HEAP8[$18 >> 0] = HEAP8[$18 >> 0] | 34; //@line 29009
 $21 = HEAP32[$6 >> 2] | 0; //@line 29010
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 29012
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $4 + 996 | 0, 1); //@line 29013
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 307; //@line 29016
  $23 = $ReallocAsyncCtx13 + 4 | 0; //@line 29017
  HEAP32[$23 >> 2] = $8; //@line 29018
  $24 = $ReallocAsyncCtx13 + 8 | 0; //@line 29019
  HEAP32[$24 >> 2] = $10; //@line 29020
  sp = STACKTOP; //@line 29021
  return;
 }
 ___async_unwind = 0; //@line 29024
 HEAP32[$ReallocAsyncCtx13 >> 2] = 307; //@line 29025
 $23 = $ReallocAsyncCtx13 + 4 | 0; //@line 29026
 HEAP32[$23 >> 2] = $8; //@line 29027
 $24 = $ReallocAsyncCtx13 + 8 | 0; //@line 29028
 HEAP32[$24 >> 2] = $10; //@line 29029
 sp = STACKTOP; //@line 29030
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_134($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx35 = 0, sp = 0;
 sp = STACKTOP; //@line 28879
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28881
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28883
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28885
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28887
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28889
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx35 = _emscripten_realloc_async_context(24) | 0; //@line 28894
  _mbed_assert_internal(13588, 13597, 199); //@line 28895
  if (___async) {
   HEAP32[$ReallocAsyncCtx35 >> 2] = 311; //@line 28898
   $13 = $ReallocAsyncCtx35 + 4 | 0; //@line 28899
   HEAP32[$13 >> 2] = $2; //@line 28900
   $14 = $ReallocAsyncCtx35 + 8 | 0; //@line 28901
   HEAP32[$14 >> 2] = $4; //@line 28902
   $15 = $ReallocAsyncCtx35 + 12 | 0; //@line 28903
   HEAP32[$15 >> 2] = $6; //@line 28904
   $16 = $ReallocAsyncCtx35 + 16 | 0; //@line 28905
   HEAP32[$16 >> 2] = $8; //@line 28906
   $17 = $ReallocAsyncCtx35 + 20 | 0; //@line 28907
   HEAP32[$17 >> 2] = $10; //@line 28908
   sp = STACKTOP; //@line 28909
   return;
  }
  ___async_unwind = 0; //@line 28912
  HEAP32[$ReallocAsyncCtx35 >> 2] = 311; //@line 28913
  $13 = $ReallocAsyncCtx35 + 4 | 0; //@line 28914
  HEAP32[$13 >> 2] = $2; //@line 28915
  $14 = $ReallocAsyncCtx35 + 8 | 0; //@line 28916
  HEAP32[$14 >> 2] = $4; //@line 28917
  $15 = $ReallocAsyncCtx35 + 12 | 0; //@line 28918
  HEAP32[$15 >> 2] = $6; //@line 28919
  $16 = $ReallocAsyncCtx35 + 16 | 0; //@line 28920
  HEAP32[$16 >> 2] = $8; //@line 28921
  $17 = $ReallocAsyncCtx35 + 20 | 0; //@line 28922
  HEAP32[$17 >> 2] = $10; //@line 28923
  sp = STACKTOP; //@line 28924
  return;
 }
 $18 = $4 + 944 | 0; //@line 28927
 HEAP8[$18 >> 0] = HEAP8[$18 >> 0] | 34; //@line 28930
 $21 = HEAP32[$6 >> 2] | 0; //@line 28931
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(12) | 0; //@line 28933
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $4 + 996 | 0, 1); //@line 28934
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 312; //@line 28937
  $23 = $ReallocAsyncCtx12 + 4 | 0; //@line 28938
  HEAP32[$23 >> 2] = $8; //@line 28939
  $24 = $ReallocAsyncCtx12 + 8 | 0; //@line 28940
  HEAP32[$24 >> 2] = $10; //@line 28941
  sp = STACKTOP; //@line 28942
  return;
 }
 ___async_unwind = 0; //@line 28945
 HEAP32[$ReallocAsyncCtx12 >> 2] = 312; //@line 28946
 $23 = $ReallocAsyncCtx12 + 4 | 0; //@line 28947
 HEAP32[$23 >> 2] = $8; //@line 28948
 $24 = $ReallocAsyncCtx12 + 8 | 0; //@line 28949
 HEAP32[$24 >> 2] = $10; //@line 28950
 sp = STACKTOP; //@line 28951
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_133($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx34 = 0, sp = 0;
 sp = STACKTOP; //@line 28800
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28802
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28804
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28806
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28808
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28810
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx34 = _emscripten_realloc_async_context(24) | 0; //@line 28815
  _mbed_assert_internal(13588, 13597, 199); //@line 28816
  if (___async) {
   HEAP32[$ReallocAsyncCtx34 >> 2] = 314; //@line 28819
   $13 = $ReallocAsyncCtx34 + 4 | 0; //@line 28820
   HEAP32[$13 >> 2] = $2; //@line 28821
   $14 = $ReallocAsyncCtx34 + 8 | 0; //@line 28822
   HEAP32[$14 >> 2] = $4; //@line 28823
   $15 = $ReallocAsyncCtx34 + 12 | 0; //@line 28824
   HEAP32[$15 >> 2] = $6; //@line 28825
   $16 = $ReallocAsyncCtx34 + 16 | 0; //@line 28826
   HEAP32[$16 >> 2] = $8; //@line 28827
   $17 = $ReallocAsyncCtx34 + 20 | 0; //@line 28828
   HEAP32[$17 >> 2] = $10; //@line 28829
   sp = STACKTOP; //@line 28830
   return;
  }
  ___async_unwind = 0; //@line 28833
  HEAP32[$ReallocAsyncCtx34 >> 2] = 314; //@line 28834
  $13 = $ReallocAsyncCtx34 + 4 | 0; //@line 28835
  HEAP32[$13 >> 2] = $2; //@line 28836
  $14 = $ReallocAsyncCtx34 + 8 | 0; //@line 28837
  HEAP32[$14 >> 2] = $4; //@line 28838
  $15 = $ReallocAsyncCtx34 + 12 | 0; //@line 28839
  HEAP32[$15 >> 2] = $6; //@line 28840
  $16 = $ReallocAsyncCtx34 + 16 | 0; //@line 28841
  HEAP32[$16 >> 2] = $8; //@line 28842
  $17 = $ReallocAsyncCtx34 + 20 | 0; //@line 28843
  HEAP32[$17 >> 2] = $10; //@line 28844
  sp = STACKTOP; //@line 28845
  return;
 }
 $18 = $4 + 944 | 0; //@line 28848
 HEAP8[$18 >> 0] = HEAP8[$18 >> 0] | 34; //@line 28851
 $21 = HEAP32[$6 >> 2] | 0; //@line 28852
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(12) | 0; //@line 28854
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $4 + 996 | 0, 1); //@line 28855
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 315; //@line 28858
  $23 = $ReallocAsyncCtx11 + 4 | 0; //@line 28859
  HEAP32[$23 >> 2] = $8; //@line 28860
  $24 = $ReallocAsyncCtx11 + 8 | 0; //@line 28861
  HEAP32[$24 >> 2] = $10; //@line 28862
  sp = STACKTOP; //@line 28863
  return;
 }
 ___async_unwind = 0; //@line 28866
 HEAP32[$ReallocAsyncCtx11 >> 2] = 315; //@line 28867
 $23 = $ReallocAsyncCtx11 + 4 | 0; //@line 28868
 HEAP32[$23 >> 2] = $8; //@line 28869
 $24 = $ReallocAsyncCtx11 + 8 | 0; //@line 28870
 HEAP32[$24 >> 2] = $10; //@line 28871
 sp = STACKTOP; //@line 28872
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_132($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx33 = 0, sp = 0;
 sp = STACKTOP; //@line 28721
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28723
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28725
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28727
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28729
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28731
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx33 = _emscripten_realloc_async_context(24) | 0; //@line 28736
  _mbed_assert_internal(13588, 13597, 199); //@line 28737
  if (___async) {
   HEAP32[$ReallocAsyncCtx33 >> 2] = 319; //@line 28740
   $13 = $ReallocAsyncCtx33 + 4 | 0; //@line 28741
   HEAP32[$13 >> 2] = $2; //@line 28742
   $14 = $ReallocAsyncCtx33 + 8 | 0; //@line 28743
   HEAP32[$14 >> 2] = $4; //@line 28744
   $15 = $ReallocAsyncCtx33 + 12 | 0; //@line 28745
   HEAP32[$15 >> 2] = $6; //@line 28746
   $16 = $ReallocAsyncCtx33 + 16 | 0; //@line 28747
   HEAP32[$16 >> 2] = $8; //@line 28748
   $17 = $ReallocAsyncCtx33 + 20 | 0; //@line 28749
   HEAP32[$17 >> 2] = $10; //@line 28750
   sp = STACKTOP; //@line 28751
   return;
  }
  ___async_unwind = 0; //@line 28754
  HEAP32[$ReallocAsyncCtx33 >> 2] = 319; //@line 28755
  $13 = $ReallocAsyncCtx33 + 4 | 0; //@line 28756
  HEAP32[$13 >> 2] = $2; //@line 28757
  $14 = $ReallocAsyncCtx33 + 8 | 0; //@line 28758
  HEAP32[$14 >> 2] = $4; //@line 28759
  $15 = $ReallocAsyncCtx33 + 12 | 0; //@line 28760
  HEAP32[$15 >> 2] = $6; //@line 28761
  $16 = $ReallocAsyncCtx33 + 16 | 0; //@line 28762
  HEAP32[$16 >> 2] = $8; //@line 28763
  $17 = $ReallocAsyncCtx33 + 20 | 0; //@line 28764
  HEAP32[$17 >> 2] = $10; //@line 28765
  sp = STACKTOP; //@line 28766
  return;
 }
 $18 = $4 + 944 | 0; //@line 28769
 HEAP8[$18 >> 0] = HEAP8[$18 >> 0] | 34; //@line 28772
 $21 = HEAP32[$6 >> 2] | 0; //@line 28773
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 28775
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $4 + 996 | 0, 1); //@line 28776
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 320; //@line 28779
  $23 = $ReallocAsyncCtx10 + 4 | 0; //@line 28780
  HEAP32[$23 >> 2] = $8; //@line 28781
  $24 = $ReallocAsyncCtx10 + 8 | 0; //@line 28782
  HEAP32[$24 >> 2] = $10; //@line 28783
  sp = STACKTOP; //@line 28784
  return;
 }
 ___async_unwind = 0; //@line 28787
 HEAP32[$ReallocAsyncCtx10 >> 2] = 320; //@line 28788
 $23 = $ReallocAsyncCtx10 + 4 | 0; //@line 28789
 HEAP32[$23 >> 2] = $8; //@line 28790
 $24 = $ReallocAsyncCtx10 + 8 | 0; //@line 28791
 HEAP32[$24 >> 2] = $10; //@line 28792
 sp = STACKTOP; //@line 28793
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_131($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx32 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 28642
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28644
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28646
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28648
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28650
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28652
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx32 = _emscripten_realloc_async_context(24) | 0; //@line 28657
  _mbed_assert_internal(13588, 13597, 199); //@line 28658
  if (___async) {
   HEAP32[$ReallocAsyncCtx32 >> 2] = 322; //@line 28661
   $13 = $ReallocAsyncCtx32 + 4 | 0; //@line 28662
   HEAP32[$13 >> 2] = $2; //@line 28663
   $14 = $ReallocAsyncCtx32 + 8 | 0; //@line 28664
   HEAP32[$14 >> 2] = $4; //@line 28665
   $15 = $ReallocAsyncCtx32 + 12 | 0; //@line 28666
   HEAP32[$15 >> 2] = $6; //@line 28667
   $16 = $ReallocAsyncCtx32 + 16 | 0; //@line 28668
   HEAP32[$16 >> 2] = $8; //@line 28669
   $17 = $ReallocAsyncCtx32 + 20 | 0; //@line 28670
   HEAP32[$17 >> 2] = $10; //@line 28671
   sp = STACKTOP; //@line 28672
   return;
  }
  ___async_unwind = 0; //@line 28675
  HEAP32[$ReallocAsyncCtx32 >> 2] = 322; //@line 28676
  $13 = $ReallocAsyncCtx32 + 4 | 0; //@line 28677
  HEAP32[$13 >> 2] = $2; //@line 28678
  $14 = $ReallocAsyncCtx32 + 8 | 0; //@line 28679
  HEAP32[$14 >> 2] = $4; //@line 28680
  $15 = $ReallocAsyncCtx32 + 12 | 0; //@line 28681
  HEAP32[$15 >> 2] = $6; //@line 28682
  $16 = $ReallocAsyncCtx32 + 16 | 0; //@line 28683
  HEAP32[$16 >> 2] = $8; //@line 28684
  $17 = $ReallocAsyncCtx32 + 20 | 0; //@line 28685
  HEAP32[$17 >> 2] = $10; //@line 28686
  sp = STACKTOP; //@line 28687
  return;
 }
 $18 = $4 + 944 | 0; //@line 28690
 HEAP8[$18 >> 0] = HEAP8[$18 >> 0] | 34; //@line 28693
 $21 = HEAP32[$6 >> 2] | 0; //@line 28694
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 28696
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $4 + 996 | 0, 1); //@line 28697
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 323; //@line 28700
  $23 = $ReallocAsyncCtx9 + 4 | 0; //@line 28701
  HEAP32[$23 >> 2] = $8; //@line 28702
  $24 = $ReallocAsyncCtx9 + 8 | 0; //@line 28703
  HEAP32[$24 >> 2] = $10; //@line 28704
  sp = STACKTOP; //@line 28705
  return;
 }
 ___async_unwind = 0; //@line 28708
 HEAP32[$ReallocAsyncCtx9 >> 2] = 323; //@line 28709
 $23 = $ReallocAsyncCtx9 + 4 | 0; //@line 28710
 HEAP32[$23 >> 2] = $8; //@line 28711
 $24 = $ReallocAsyncCtx9 + 8 | 0; //@line 28712
 HEAP32[$24 >> 2] = $10; //@line 28713
 sp = STACKTOP; //@line 28714
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_130($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx31 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 28563
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28565
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28567
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28569
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28571
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28573
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx31 = _emscripten_realloc_async_context(24) | 0; //@line 28578
  _mbed_assert_internal(13588, 13597, 199); //@line 28579
  if (___async) {
   HEAP32[$ReallocAsyncCtx31 >> 2] = 325; //@line 28582
   $13 = $ReallocAsyncCtx31 + 4 | 0; //@line 28583
   HEAP32[$13 >> 2] = $2; //@line 28584
   $14 = $ReallocAsyncCtx31 + 8 | 0; //@line 28585
   HEAP32[$14 >> 2] = $4; //@line 28586
   $15 = $ReallocAsyncCtx31 + 12 | 0; //@line 28587
   HEAP32[$15 >> 2] = $6; //@line 28588
   $16 = $ReallocAsyncCtx31 + 16 | 0; //@line 28589
   HEAP32[$16 >> 2] = $8; //@line 28590
   $17 = $ReallocAsyncCtx31 + 20 | 0; //@line 28591
   HEAP32[$17 >> 2] = $10; //@line 28592
   sp = STACKTOP; //@line 28593
   return;
  }
  ___async_unwind = 0; //@line 28596
  HEAP32[$ReallocAsyncCtx31 >> 2] = 325; //@line 28597
  $13 = $ReallocAsyncCtx31 + 4 | 0; //@line 28598
  HEAP32[$13 >> 2] = $2; //@line 28599
  $14 = $ReallocAsyncCtx31 + 8 | 0; //@line 28600
  HEAP32[$14 >> 2] = $4; //@line 28601
  $15 = $ReallocAsyncCtx31 + 12 | 0; //@line 28602
  HEAP32[$15 >> 2] = $6; //@line 28603
  $16 = $ReallocAsyncCtx31 + 16 | 0; //@line 28604
  HEAP32[$16 >> 2] = $8; //@line 28605
  $17 = $ReallocAsyncCtx31 + 20 | 0; //@line 28606
  HEAP32[$17 >> 2] = $10; //@line 28607
  sp = STACKTOP; //@line 28608
  return;
 }
 $18 = $4 + 944 | 0; //@line 28611
 HEAP8[$18 >> 0] = HEAP8[$18 >> 0] | 34; //@line 28614
 $21 = HEAP32[$6 >> 2] | 0; //@line 28615
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 28617
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $4 + 996 | 0, 1); //@line 28618
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 326; //@line 28621
  $23 = $ReallocAsyncCtx8 + 4 | 0; //@line 28622
  HEAP32[$23 >> 2] = $8; //@line 28623
  $24 = $ReallocAsyncCtx8 + 8 | 0; //@line 28624
  HEAP32[$24 >> 2] = $10; //@line 28625
  sp = STACKTOP; //@line 28626
  return;
 }
 ___async_unwind = 0; //@line 28629
 HEAP32[$ReallocAsyncCtx8 >> 2] = 326; //@line 28630
 $23 = $ReallocAsyncCtx8 + 4 | 0; //@line 28631
 HEAP32[$23 >> 2] = $8; //@line 28632
 $24 = $ReallocAsyncCtx8 + 8 | 0; //@line 28633
 HEAP32[$24 >> 2] = $10; //@line 28634
 sp = STACKTOP; //@line 28635
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_129($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx30 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 28484
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28486
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28488
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28490
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28492
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28494
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx30 = _emscripten_realloc_async_context(24) | 0; //@line 28499
  _mbed_assert_internal(13588, 13597, 199); //@line 28500
  if (___async) {
   HEAP32[$ReallocAsyncCtx30 >> 2] = 333; //@line 28503
   $13 = $ReallocAsyncCtx30 + 4 | 0; //@line 28504
   HEAP32[$13 >> 2] = $2; //@line 28505
   $14 = $ReallocAsyncCtx30 + 8 | 0; //@line 28506
   HEAP32[$14 >> 2] = $4; //@line 28507
   $15 = $ReallocAsyncCtx30 + 12 | 0; //@line 28508
   HEAP32[$15 >> 2] = $6; //@line 28509
   $16 = $ReallocAsyncCtx30 + 16 | 0; //@line 28510
   HEAP32[$16 >> 2] = $8; //@line 28511
   $17 = $ReallocAsyncCtx30 + 20 | 0; //@line 28512
   HEAP32[$17 >> 2] = $10; //@line 28513
   sp = STACKTOP; //@line 28514
   return;
  }
  ___async_unwind = 0; //@line 28517
  HEAP32[$ReallocAsyncCtx30 >> 2] = 333; //@line 28518
  $13 = $ReallocAsyncCtx30 + 4 | 0; //@line 28519
  HEAP32[$13 >> 2] = $2; //@line 28520
  $14 = $ReallocAsyncCtx30 + 8 | 0; //@line 28521
  HEAP32[$14 >> 2] = $4; //@line 28522
  $15 = $ReallocAsyncCtx30 + 12 | 0; //@line 28523
  HEAP32[$15 >> 2] = $6; //@line 28524
  $16 = $ReallocAsyncCtx30 + 16 | 0; //@line 28525
  HEAP32[$16 >> 2] = $8; //@line 28526
  $17 = $ReallocAsyncCtx30 + 20 | 0; //@line 28527
  HEAP32[$17 >> 2] = $10; //@line 28528
  sp = STACKTOP; //@line 28529
  return;
 }
 $18 = $4 + 944 | 0; //@line 28532
 HEAP8[$18 >> 0] = HEAP8[$18 >> 0] | 34; //@line 28535
 $21 = HEAP32[$6 >> 2] | 0; //@line 28536
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 28538
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $4 + 996 | 0, 1); //@line 28539
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 334; //@line 28542
  $23 = $ReallocAsyncCtx7 + 4 | 0; //@line 28543
  HEAP32[$23 >> 2] = $8; //@line 28544
  $24 = $ReallocAsyncCtx7 + 8 | 0; //@line 28545
  HEAP32[$24 >> 2] = $10; //@line 28546
  sp = STACKTOP; //@line 28547
  return;
 }
 ___async_unwind = 0; //@line 28550
 HEAP32[$ReallocAsyncCtx7 >> 2] = 334; //@line 28551
 $23 = $ReallocAsyncCtx7 + 4 | 0; //@line 28552
 HEAP32[$23 >> 2] = $8; //@line 28553
 $24 = $ReallocAsyncCtx7 + 8 | 0; //@line 28554
 HEAP32[$24 >> 2] = $10; //@line 28555
 sp = STACKTOP; //@line 28556
 return;
}
function _mbed_error_vfprintf($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01213 = 0, $$014 = 0, $2 = 0, $24 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0, $$01213$looptemp = 0;
 sp = STACKTOP; //@line 6946
 STACKTOP = STACKTOP + 128 | 0; //@line 6947
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 6947
 $2 = sp; //@line 6948
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 6949
 $3 = _vsnprintf($2, 128, $0, $1) | 0; //@line 6950
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 632; //@line 6953
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 6955
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 6957
  sp = STACKTOP; //@line 6958
  STACKTOP = sp; //@line 6959
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6961
 if (($3 | 0) <= 0) {
  STACKTOP = sp; //@line 6964
  return;
 }
 if (!(HEAP32[5703] | 0)) {
  _serial_init(22816, 2, 3); //@line 6969
  $$01213 = 0; //@line 6970
  $$014 = 0; //@line 6970
 } else {
  $$01213 = 0; //@line 6972
  $$014 = 0; //@line 6972
 }
 while (1) {
  $$01213$looptemp = $$01213;
  $$01213 = HEAP8[$2 + $$014 >> 0] | 0; //@line 6976
  if (!($$01213$looptemp << 24 >> 24 == 13 | $$01213 << 24 >> 24 != 10)) {
   $AsyncCtx7 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6981
   _serial_putc(22816, 13); //@line 6982
   if (___async) {
    label = 8; //@line 6985
    break;
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6988
  }
  $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6991
  _serial_putc(22816, $$01213 << 24 >> 24); //@line 6992
  if (___async) {
   label = 11; //@line 6995
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6998
  $24 = $$014 + 1 | 0; //@line 6999
  if (($24 | 0) == ($3 | 0)) {
   label = 13; //@line 7002
   break;
  } else {
   $$014 = $24; //@line 7005
  }
 }
 if ((label | 0) == 8) {
  HEAP32[$AsyncCtx7 >> 2] = 633; //@line 7009
  HEAP8[$AsyncCtx7 + 4 >> 0] = $$01213; //@line 7011
  HEAP32[$AsyncCtx7 + 8 >> 2] = $$014; //@line 7013
  HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 7015
  HEAP32[$AsyncCtx7 + 16 >> 2] = $2; //@line 7017
  HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 7019
  sp = STACKTOP; //@line 7020
  STACKTOP = sp; //@line 7021
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$AsyncCtx3 >> 2] = 634; //@line 7024
  HEAP32[$AsyncCtx3 + 4 >> 2] = $$014; //@line 7026
  HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 7028
  HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 7030
  HEAP8[$AsyncCtx3 + 16 >> 0] = $$01213; //@line 7032
  HEAP32[$AsyncCtx3 + 20 >> 2] = $2; //@line 7034
  sp = STACKTOP; //@line 7035
  STACKTOP = sp; //@line 7036
  return;
 } else if ((label | 0) == 13) {
  STACKTOP = sp; //@line 7039
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_195($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11189
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11193
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11195
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 11197
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11199
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 11201
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11203
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11205
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11207
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 11209
 $22 = HEAP8[$0 + 44 >> 0] & 1; //@line 11212
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 11214
 do {
  if ((HEAP32[$0 + 4 >> 2] | 0) > 1) {
   $26 = $4 + 24 | 0; //@line 11218
   $27 = $6 + 24 | 0; //@line 11219
   $28 = $4 + 8 | 0; //@line 11220
   $29 = $6 + 54 | 0; //@line 11221
   if (!(HEAP8[$29 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$28 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$27 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$28 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 11251
    HEAP8[$14 >> 0] = 0; //@line 11252
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 11253
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($26, $6, $16, $18, $20, $22); //@line 11254
    if (!___async) {
     ___async_unwind = 0; //@line 11257
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 679; //@line 11259
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $26; //@line 11261
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $24; //@line 11263
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $29; //@line 11265
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 11267
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 11269
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 11271
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 11273
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $27; //@line 11275
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $28; //@line 11277
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $6; //@line 11279
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $16; //@line 11281
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $18; //@line 11283
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $20; //@line 11285
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $22 & 1; //@line 11288
    sp = STACKTOP; //@line 11289
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 11294
 HEAP8[$14 >> 0] = $12; //@line 11295
 return;
}
function __Z28compute_skeys_for_join_framePKhS0_tPhS1_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0$$sroa_idx12 = 0, $10 = 0, $12 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 20211
 STACKTOP = STACKTOP + 16 | 0; //@line 20212
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 20212
 $5 = sp; //@line 20213
 _mbedtls_aes_init(22528); //@line 20214
 $6 = _mbedtls_aes_setkey_enc(22528, $0, 128) | 0; //@line 20215
 if ($6 | 0) {
  $$0 = $6; //@line 20218
  _mbedtls_aes_free(22528); //@line 20219
  STACKTOP = sp; //@line 20220
  return $$0 | 0; //@line 20220
 }
 $8 = $5 + 9 | 0; //@line 20222
 HEAP8[$8 >> 0] = 0; //@line 20223
 HEAP8[$8 + 1 >> 0] = 0; //@line 20223
 HEAP8[$8 + 2 >> 0] = 0; //@line 20223
 HEAP8[$8 + 3 >> 0] = 0; //@line 20223
 HEAP8[$8 + 4 >> 0] = 0; //@line 20223
 HEAP8[$8 + 5 >> 0] = 0; //@line 20223
 HEAP8[$8 + 6 >> 0] = 0; //@line 20223
 HEAP8[$5 >> 0] = 1; //@line 20224
 $9 = $5 + 1 | 0; //@line 20225
 HEAP8[$9 >> 0] = HEAP8[$1 >> 0] | 0; //@line 20226
 HEAP8[$9 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0; //@line 20226
 HEAP8[$9 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0; //@line 20226
 HEAP8[$9 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0; //@line 20226
 HEAP8[$9 + 4 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 20226
 HEAP8[$9 + 5 >> 0] = HEAP8[$1 + 5 >> 0] | 0; //@line 20226
 $$0$$sroa_idx12 = $5 + 7 | 0; //@line 20227
 HEAP8[$$0$$sroa_idx12 >> 0] = $2; //@line 20228
 HEAP8[$$0$$sroa_idx12 + 1 >> 0] = $2 >> 8; //@line 20228
 $10 = _mbedtls_aes_crypt_ecb(22528, 1, $5, $3) | 0; //@line 20229
 if ($10 | 0) {
  $$0 = $10; //@line 20232
  _mbedtls_aes_free(22528); //@line 20233
  STACKTOP = sp; //@line 20234
  return $$0 | 0; //@line 20234
 }
 $12 = $5 + 9 | 0; //@line 20236
 HEAP8[$12 >> 0] = 0; //@line 20237
 HEAP8[$12 + 1 >> 0] = 0; //@line 20237
 HEAP8[$12 + 2 >> 0] = 0; //@line 20237
 HEAP8[$12 + 3 >> 0] = 0; //@line 20237
 HEAP8[$12 + 4 >> 0] = 0; //@line 20237
 HEAP8[$12 + 5 >> 0] = 0; //@line 20237
 HEAP8[$12 + 6 >> 0] = 0; //@line 20237
 HEAP8[$5 >> 0] = 2; //@line 20238
 HEAP8[$9 >> 0] = HEAP8[$1 >> 0] | 0; //@line 20239
 HEAP8[$9 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0; //@line 20239
 HEAP8[$9 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0; //@line 20239
 HEAP8[$9 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0; //@line 20239
 HEAP8[$9 + 4 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 20239
 HEAP8[$9 + 5 >> 0] = HEAP8[$1 + 5 >> 0] | 0; //@line 20239
 HEAP8[$$0$$sroa_idx12 >> 0] = $2; //@line 20240
 HEAP8[$$0$$sroa_idx12 + 1 >> 0] = $2 >> 8; //@line 20240
 $$0 = _mbedtls_aes_crypt_ecb(22528, 1, $5, $4) | 0; //@line 20242
 _mbedtls_aes_free(22528); //@line 20243
 STACKTOP = sp; //@line 20244
 return $$0 | 0; //@line 20244
}
function __ZN7LoRaMac21send_frame_on_channelEh__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $27 = 0, $30 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 21329
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21331
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21333
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21335
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21337
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21339
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21341
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21343
 $15 = $2 + 264 | 0; //@line 21344
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($15) | 0) + 4 >> 2] = 1; //@line 21347
 $18 = $2 + 288 | 0; //@line 21348
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($18) | 0) + 4 >> 2] = 1; //@line 21351
 $21 = HEAP8[$4 >> 0] | 0; //@line 21352
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($18) | 0) + 8 >> 0] = $21; //@line 21355
 $24 = HEAP8[$6 >> 0] | 0; //@line 21356
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($18) | 0) + 9 >> 0] = $24; //@line 21359
 $27 = HEAP32[$8 >> 2] | 0; //@line 21360
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($18) | 0) + 12 >> 2] = $27; //@line 21363
 $30 = HEAP32[$8 >> 2] | 0; //@line 21364
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($15) | 0) + 8 >> 2] = $30; //@line 21367
 $34 = HEAP32[$2 + 356 >> 2] | 0; //@line 21369
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 21371
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($34, $2 + 996 | 0, 1e3); //@line 21372
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 407; //@line 21375
  $36 = $ReallocAsyncCtx2 + 4 | 0; //@line 21376
  HEAP32[$36 >> 2] = $2; //@line 21377
  $37 = $ReallocAsyncCtx2 + 8 | 0; //@line 21378
  HEAP32[$37 >> 2] = $10; //@line 21379
  $38 = $ReallocAsyncCtx2 + 12 | 0; //@line 21380
  HEAP32[$38 >> 2] = $12; //@line 21381
  $39 = $ReallocAsyncCtx2 + 16 | 0; //@line 21382
  HEAP32[$39 >> 2] = $6; //@line 21383
  $40 = $ReallocAsyncCtx2 + 20 | 0; //@line 21384
  HEAP32[$40 >> 2] = $14; //@line 21385
  sp = STACKTOP; //@line 21386
  return;
 }
 ___async_unwind = 0; //@line 21389
 HEAP32[$ReallocAsyncCtx2 >> 2] = 407; //@line 21390
 $36 = $ReallocAsyncCtx2 + 4 | 0; //@line 21391
 HEAP32[$36 >> 2] = $2; //@line 21392
 $37 = $ReallocAsyncCtx2 + 8 | 0; //@line 21393
 HEAP32[$37 >> 2] = $10; //@line 21394
 $38 = $ReallocAsyncCtx2 + 12 | 0; //@line 21395
 HEAP32[$38 >> 2] = $12; //@line 21396
 $39 = $ReallocAsyncCtx2 + 16 | 0; //@line 21397
 HEAP32[$39 >> 2] = $6; //@line 21398
 $40 = $ReallocAsyncCtx2 + 20 | 0; //@line 21399
 HEAP32[$40 >> 2] = $14; //@line 21400
 sp = STACKTOP; //@line 21401
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11073
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11077
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11079
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 11081
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11083
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 11085
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11087
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11089
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11091
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 11093
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 11095
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 11097
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 11099
 $28 = HEAP8[$0 + 56 >> 0] & 1; //@line 11102
 $43 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 11103
 do {
  if ($43 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$18 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$16 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$18 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 11136
    HEAP8[$14 >> 0] = 0; //@line 11137
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 11138
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($43, $20, $22, $24, $26, $28); //@line 11139
    if (!___async) {
     ___async_unwind = 0; //@line 11142
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 679; //@line 11144
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $43; //@line 11146
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 11148
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 11150
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 11152
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 11154
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 11156
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 11158
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 11160
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 11162
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 11164
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 11166
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 11168
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $26; //@line 11170
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $28 & 1; //@line 11173
    sp = STACKTOP; //@line 11174
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 11179
 HEAP8[$14 >> 0] = $12; //@line 11180
 return;
}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) {
  return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0; //@line 33661
 }
 ret = dest | 0; //@line 33664
 dest_end = dest + num | 0; //@line 33665
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0; //@line 33669
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 33670
   dest = dest + 1 | 0; //@line 33671
   src = src + 1 | 0; //@line 33672
   num = num - 1 | 0; //@line 33673
  }
  aligned_dest_end = dest_end & -4 | 0; //@line 33675
  block_aligned_dest_end = aligned_dest_end - 64 | 0; //@line 33676
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 33678
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2]; //@line 33679
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2]; //@line 33680
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2]; //@line 33681
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2]; //@line 33682
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2]; //@line 33683
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2]; //@line 33684
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2]; //@line 33685
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2]; //@line 33686
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2]; //@line 33687
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2]; //@line 33688
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2]; //@line 33689
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2]; //@line 33690
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2]; //@line 33691
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2]; //@line 33692
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2]; //@line 33693
   dest = dest + 64 | 0; //@line 33694
   src = src + 64 | 0; //@line 33695
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 33698
   dest = dest + 4 | 0; //@line 33699
   src = src + 4 | 0; //@line 33700
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0; //@line 33704
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 33706
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0; //@line 33707
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0; //@line 33708
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0; //@line 33709
   dest = dest + 4 | 0; //@line 33710
   src = src + 4 | 0; //@line 33711
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 33716
  dest = dest + 1 | 0; //@line 33717
  src = src + 1 | 0; //@line 33718
 }
 return ret | 0; //@line 33720
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $18 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, sp = 0;
 sp = STACKTOP; //@line 1180
 STACKTOP = STACKTOP + 32 | 0; //@line 1181
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 1181
 $vararg_buffer6 = sp + 24 | 0; //@line 1182
 $vararg_buffer3 = sp + 16 | 0; //@line 1183
 $vararg_buffer = sp; //@line 1184
 $5 = $3 & 65535; //@line 1186
 HEAP32[$vararg_buffer >> 2] = $1; //@line 1187
 HEAP32[$vararg_buffer + 4 >> 2] = $2 << 24 >> 24; //@line 1189
 HEAP32[$vararg_buffer + 8 >> 2] = $5; //@line 1191
 _mbed_tracef(16, 10944, 10949, $vararg_buffer); //@line 1192
 $8 = HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] | 0; //@line 1195
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 1196
 FUNCTION_TABLE_vii[$8 & 31]($0, $1); //@line 1197
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 66; //@line 1200
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1202
  HEAP8[$AsyncCtx + 8 >> 0] = $2; //@line 1204
  HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 1206
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 1208
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer3; //@line 1210
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer6; //@line 1212
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer6; //@line 1214
  sp = STACKTOP; //@line 1215
  STACKTOP = sp; //@line 1216
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1218
 $18 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 1221
 $AsyncCtx10 = _emscripten_alloc_async_context(24, sp) | 0; //@line 1222
 FUNCTION_TABLE_viiiiiiiiiiiiii[$18 & 1]($0, 0, $2, 0, 0, 4800, 0, 5, 0, 0, 0, 0, 0, $5); //@line 1223
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 67; //@line 1226
  HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 1228
  HEAP32[$AsyncCtx10 + 8 >> 2] = $vararg_buffer3; //@line 1230
  HEAP32[$AsyncCtx10 + 12 >> 2] = $vararg_buffer3; //@line 1232
  HEAP32[$AsyncCtx10 + 16 >> 2] = $vararg_buffer6; //@line 1234
  HEAP32[$AsyncCtx10 + 20 >> 2] = $vararg_buffer6; //@line 1236
  sp = STACKTOP; //@line 1237
  STACKTOP = sp; //@line 1238
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx10 | 0); //@line 1240
  HEAP8[$0 + 688 >> 0] = 2; //@line 1242
  HEAP32[$vararg_buffer3 >> 2] = 3; //@line 1243
  _mbed_tracef(16, 10944, 11001, $vararg_buffer3); //@line 1244
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 1245
  HEAP32[$vararg_buffer6 >> 2] = 3; //@line 1246
  _mbed_tracef(16, 10944, 11030, $vararg_buffer6); //@line 1247
  STACKTOP = sp; //@line 1248
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_149($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 30994
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30998
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31000
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31002
 $10 = HEAP16[$0 + 20 >> 1] | 0; //@line 31004
 $12 = HEAP16[$0 + 22 >> 1] | 0; //@line 31006
 $14 = HEAP8[$0 + 24 >> 0] | 0; //@line 31008
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 31010
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 31012
 $19 = $4 + 12 | 0; //@line 31014
 HEAP32[$19 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 31015
 $20 = $4 + 16 | 0; //@line 31016
 HEAP32[$20 >> 2] = $8; //@line 31017
 HEAP16[$4 + 20 >> 1] = $10; //@line 31019
 HEAP16[$4 + 22 >> 1] = $12; //@line 31021
 HEAP8[$4 + 24 >> 0] = $14; //@line 31023
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 31024
 $24 = _equeue_alloc($16, 28) | 0; //@line 31025
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 341; //@line 31028
  $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 31029
  HEAP32[$25 >> 2] = $19; //@line 31030
  $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 31031
  HEAP32[$26 >> 2] = $19; //@line 31032
  $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 31033
  HEAP32[$27 >> 2] = $4; //@line 31034
  $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 31035
  HEAP32[$28 >> 2] = $20; //@line 31036
  $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 31037
  HEAP32[$29 >> 2] = $16; //@line 31038
  $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 31039
  HEAP32[$30 >> 2] = $6; //@line 31040
  $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 31041
  HEAP32[$31 >> 2] = $18; //@line 31042
  sp = STACKTOP; //@line 31043
  return;
 }
 HEAP32[___async_retval >> 2] = $24; //@line 31047
 ___async_unwind = 0; //@line 31048
 HEAP32[$ReallocAsyncCtx7 >> 2] = 341; //@line 31049
 $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 31050
 HEAP32[$25 >> 2] = $19; //@line 31051
 $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 31052
 HEAP32[$26 >> 2] = $19; //@line 31053
 $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 31054
 HEAP32[$27 >> 2] = $4; //@line 31055
 $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 31056
 HEAP32[$28 >> 2] = $20; //@line 31057
 $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 31058
 HEAP32[$29 >> 2] = $16; //@line 31059
 $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 31060
 HEAP32[$30 >> 2] = $6; //@line 31061
 $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 31062
 HEAP32[$31 >> 2] = $18; //@line 31063
 sp = STACKTOP; //@line 31064
 return;
}
function _equeue_alloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$038$sink$i = 0, $$03842$i = 0, $$1$i9 = 0, $10 = 0, $11 = 0, $14 = 0, $17 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3123
 do {
  if (HEAP8[$0 + 184 >> 0] | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 3129
   _wait_ms(10); //@line 3130
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 119; //@line 3133
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 3135
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 3137
    sp = STACKTOP; //@line 3138
    return 0; //@line 3139
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3141
    break;
   }
  }
 } while (0);
 $8 = $1 + 39 & -4; //@line 3147
 $9 = $0 + 156 | 0; //@line 3148
 _equeue_mutex_lock($9); //@line 3149
 $10 = $0 + 24 | 0; //@line 3150
 $11 = HEAP32[$10 >> 2] | 0; //@line 3151
 L7 : do {
  if (!$11) {
   label = 11; //@line 3155
  } else {
   $$03842$i = $10; //@line 3157
   $14 = $11; //@line 3157
   while (1) {
    if ((HEAP32[$14 >> 2] | 0) >>> 0 >= $8 >>> 0) {
     break;
    }
    $20 = $14 + 8 | 0; //@line 3164
    $21 = HEAP32[$20 >> 2] | 0; //@line 3165
    if (!$21) {
     label = 11; //@line 3168
     break L7;
    } else {
     $$03842$i = $20; //@line 3171
     $14 = $21; //@line 3171
    }
   }
   $17 = HEAP32[$14 + 12 >> 2] | 0; //@line 3175
   if (!$17) {
    $$038$sink$i = $$03842$i; //@line 3178
   } else {
    HEAP32[$$03842$i >> 2] = $17; //@line 3180
    $$038$sink$i = $17 + 8 | 0; //@line 3182
   }
   HEAP32[$$038$sink$i >> 2] = HEAP32[$14 + 8 >> 2]; //@line 3186
   _equeue_mutex_unlock($9); //@line 3187
   $$1$i9 = $14; //@line 3188
  }
 } while (0);
 do {
  if ((label | 0) == 11) {
   $23 = $0 + 28 | 0; //@line 3193
   $24 = HEAP32[$23 >> 2] | 0; //@line 3194
   if ($24 >>> 0 < $8 >>> 0) {
    _equeue_mutex_unlock($9); //@line 3197
    $$0 = 0; //@line 3198
    return $$0 | 0; //@line 3199
   } else {
    $26 = $0 + 32 | 0; //@line 3201
    $27 = HEAP32[$26 >> 2] | 0; //@line 3202
    HEAP32[$26 >> 2] = $27 + $8; //@line 3204
    HEAP32[$23 >> 2] = $24 - $8; //@line 3206
    HEAP32[$27 >> 2] = $8; //@line 3207
    HEAP8[$27 + 4 >> 0] = 1; //@line 3209
    _equeue_mutex_unlock($9); //@line 3210
    if (!$27) {
     $$0 = 0; //@line 3213
    } else {
     $$1$i9 = $27; //@line 3215
     break;
    }
    return $$0 | 0; //@line 3218
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 3223
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 3225
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 3227
 $$0 = $$1$i9 + 36 | 0; //@line 3229
 return $$0 | 0; //@line 3230
}
function __ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 var $$ = 0, $$sink = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $32 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 266
 STACKTOP = STACKTOP + 32 | 0; //@line 267
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 267
 $vararg_buffer3 = sp + 16 | 0; //@line 268
 $vararg_buffer = sp; //@line 270
 $14 = $8 & 1; //@line 271
 $15 = $9 & 1; //@line 272
 $16 = $10 & 1; //@line 273
 $17 = $12 & 1; //@line 274
 HEAP8[$0 + 689 >> 0] = $1; //@line 277
 HEAP32[$vararg_buffer >> 2] = $2 << 24 >> 24; //@line 279
 _mbed_tracef(16, 10944, 11614, $vararg_buffer); //@line 280
 switch ($1 | 0) {
 case 0:
  {
   HEAP8[$0 + 696 >> 0] = $2; //@line 284
   HEAP32[$0 + 700 >> 2] = $3; //@line 286
   HEAP32[$0 + 704 >> 2] = $4; //@line 288
   HEAP32[$0 + 712 >> 2] = $5; //@line 290
   HEAP16[$0 + 716 >> 1] = $7; //@line 292
   HEAP8[$0 + 718 >> 0] = $14; //@line 294
   HEAP8[$0 + 720 >> 0] = $15; //@line 296
   HEAP8[$0 + 721 >> 0] = $17; //@line 298
   HEAP32[$0 + 724 >> 2] = $13; //@line 300
   _mbed_tracef(16, 10944, 11641, sp + 8 | 0); //@line 301
   STACKTOP = sp; //@line 302
   return;
  }
 case 1:
  {
   HEAP8[$0 + 748 >> 0] = $2; //@line 307
   if ($4 >>> 0 > 2) {
    while (1) {}
   }
   $32 = $4 + 7 | 0; //@line 313
   HEAP32[$0 + 752 >> 2] = $32; //@line 315
   HEAP32[$0 + 756 >> 2] = $5; //@line 317
   HEAP8[$0 + 761 >> 0] = $6; //@line 319
   HEAP16[$0 + 762 >> 1] = $7; //@line 321
   HEAP8[$0 + 764 >> 0] = $14; //@line 323
   HEAP8[$0 + 767 >> 0] = $16; //@line 325
   HEAP8[$0 + 768 >> 0] = $11; //@line 327
   HEAP8[$0 + 766 >> 0] = $15; //@line 329
   HEAP8[$0 + 769 >> 0] = $17; //@line 331
   HEAP32[$0 + 772 >> 2] = $13; //@line 333
   $$ = $5 >>> 0 > 6 ? $5 : 6; //@line 335
   if (($4 | 0) == 0 & (($$ >>> 0 < 12 ? $$ : 12) + -11 | 0) >>> 0 < 2) {
    label = 7; //@line 343
   } else {
    if (($32 | 0) == 8 & $$ >>> 0 > 11) {
     label = 7; //@line 349
    } else {
     $$sink = 0; //@line 351
    }
   }
   if ((label | 0) == 7) {
    $$sink = 1; //@line 355
   }
   HEAP8[$0 + 760 >> 0] = $$sink; //@line 358
   _mbed_tracef(16, 10944, 11659, $vararg_buffer3); //@line 359
   STACKTOP = sp; //@line 360
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 364
   return;
  }
 }
}
function __ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 var $$ = 0, $$sink = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $40 = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 140
 STACKTOP = STACKTOP + 16 | 0; //@line 141
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 141
 $vararg_buffer1 = sp + 8 | 0; //@line 142
 $15 = $8 & 1; //@line 144
 $16 = $10 & 1; //@line 145
 $17 = $11 & 1; //@line 146
 $18 = $13 & 1; //@line 147
 $19 = $14 & 1; //@line 148
 HEAP8[$0 + 689 >> 0] = $1; //@line 151
 switch ($1 | 0) {
 case 0:
  {
   HEAP32[$0 + 704 >> 2] = $2; //@line 155
   HEAP32[$0 + 712 >> 2] = $3; //@line 157
   HEAP32[$0 + 708 >> 2] = $5; //@line 159
   HEAP8[$0 + 718 >> 0] = $15; //@line 161
   HEAP8[$0 + 719 >> 0] = $9; //@line 163
   HEAP8[$0 + 720 >> 0] = $16; //@line 165
   HEAP8[$0 + 721 >> 0] = $18; //@line 167
   HEAP8[$0 + 722 >> 0] = $19; //@line 169
   HEAP16[$0 + 716 >> 1] = $6; //@line 171
   HEAP32[$0 + 728 >> 2] = ~~(1.0 / +($3 >>> 0) * 8.0 * +($7 & 65535) * 1.0e3) >>> 0; //@line 180
   _mbed_tracef(16, 10944, 11678, sp); //@line 181
   STACKTOP = sp; //@line 182
   return;
  }
 case 1:
  {
   if ($2 >>> 0 > 2) {
    while (1) {}
   }
   $40 = $2 + 7 | 0; //@line 191
   HEAP32[$0 + 752 >> 2] = $40; //@line 193
   HEAP32[$0 + 756 >> 2] = $3; //@line 195
   HEAP8[$0 + 761 >> 0] = $4; //@line 197
   HEAP16[$0 + 762 >> 1] = $6; //@line 199
   HEAP8[$0 + 764 >> 0] = $15; //@line 201
   HEAP8[$0 + 765 >> 0] = $9; //@line 203
   HEAP8[$0 + 766 >> 0] = $16; //@line 205
   HEAP8[$0 + 767 >> 0] = $17; //@line 207
   HEAP8[$0 + 768 >> 0] = $12; //@line 209
   HEAP8[$0 + 769 >> 0] = $18; //@line 211
   HEAP8[$0 + 770 >> 0] = $19; //@line 213
   $$ = $3 >>> 0 > 6 ? $3 : 6; //@line 215
   if (($2 | 0) == 0 & (($$ >>> 0 < 12 ? $$ : 12) + -11 | 0) >>> 0 < 2) {
    label = 7; //@line 223
   } else {
    if (($40 | 0) == 8 & $$ >>> 0 > 11) {
     label = 7; //@line 229
    } else {
     $$sink = 0; //@line 231
    }
   }
   if ((label | 0) == 7) {
    $$sink = 1; //@line 235
   }
   HEAP8[$0 + 760 >> 0] = $$sink; //@line 238
   _mbed_tracef(16, 10944, 11659, $vararg_buffer1); //@line 239
   STACKTOP = sp; //@line 240
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 244
   return;
  }
 }
}
function __ZN18LoRaMacChannelPlan8get_planER16lora_channelplanPK25loramac_mib_req_confirm_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038$lcssa = 0, $$03841 = 0, $$1 = 0, $$140 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $32 = 0, $41 = 0, $48 = 0, $7 = 0, $9 = 0, $indvars$iv = 0, $wide$trip$count = 0;
 if (!$2) {
  $$140 = -1003; //@line 17674
  return $$140 | 0; //@line 17675
 }
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $$140 = -1002; //@line 17680
  return $$140 | 0; //@line 17681
 }
 $7 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 17684
 $9 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 0) | 0; //@line 17686
 if (!($7 << 24 >> 24)) {
  $$038$lcssa = 0; //@line 17689
 } else {
  $11 = $1 + 4 | 0; //@line 17691
  $12 = $2 + 4 | 0; //@line 17692
  $wide$trip$count = $7 & 255; //@line 17693
  $$03841 = 0; //@line 17694
  $indvars$iv = 0; //@line 17694
  while (1) {
   if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $9, $indvars$iv) | 0) {
    $15 = HEAP32[$11 >> 2] | 0; //@line 17699
    $16 = $$03841 & 255; //@line 17700
    HEAP8[$15 + ($16 << 4) >> 0] = $indvars$iv; //@line 17703
    HEAP32[$15 + ($16 << 4) + 4 >> 2] = HEAP32[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) >> 2]; //@line 17708
    HEAP8[$15 + ($16 << 4) + 12 >> 0] = HEAP8[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 8 >> 0] | 0; //@line 17713
    $32 = (HEAP32[$11 >> 2] | 0) + ($16 << 4) + 12 | 0; //@line 17719
    HEAP8[$32 >> 0] = HEAP8[$32 >> 0] & -16 | HEAP8[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 8 >> 0] & 15; //@line 17723
    $41 = (HEAP32[$11 >> 2] | 0) + ($16 << 4) + 12 | 0; //@line 17729
    HEAP8[$41 >> 0] = HEAP8[$41 >> 0] & 15 | HEAP8[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 8 >> 0] & -16; //@line 17733
    $48 = HEAP32[$11 >> 2] | 0; //@line 17737
    HEAP8[$48 + ($16 << 4) + 13 >> 0] = HEAP8[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 9 >> 0] | 0; //@line 17739
    HEAP32[$48 + ($16 << 4) + 8 >> 2] = HEAP32[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 4 >> 2]; //@line 17744
    $$1 = $$03841 + 1 << 24 >> 24; //@line 17746
   } else {
    $$1 = $$03841; //@line 17748
   }
   $indvars$iv = $indvars$iv + 1 | 0; //@line 17750
   if (($indvars$iv | 0) == ($wide$trip$count | 0)) {
    $$038$lcssa = $$1; //@line 17753
    break;
   } else {
    $$03841 = $$1; //@line 17756
   }
  }
 }
 HEAP8[$1 >> 0] = $$038$lcssa; //@line 17760
 $$140 = 0; //@line 17761
 return $$140 | 0; //@line 17762
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_106($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$pre = 0, $10 = 0, $13 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 25178
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25180
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25182
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25184
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25186
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25188
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 25190
 if (!$AsyncRetVal) {
  $13 = $2 + 288 | 0; //@line 25193
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($13) | 0) + 11 >> 0] = 0; //@line 25196
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($13) | 0) + 10 >> 0] = 0; //@line 25199
  $18 = HEAP32[$4 >> 2] | 0; //@line 25200
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($13) | 0) + 16 >> 2] = $18; //@line 25203
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 25204
  $21 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 25205
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 456; //@line 25208
   $22 = $ReallocAsyncCtx7 + 4 | 0; //@line 25209
   HEAP32[$22 >> 2] = $6; //@line 25210
   $23 = $ReallocAsyncCtx7 + 8 | 0; //@line 25211
   HEAP32[$23 >> 2] = $8; //@line 25212
   $24 = $ReallocAsyncCtx7 + 12 | 0; //@line 25213
   HEAP32[$24 >> 2] = $10; //@line 25214
   $25 = $ReallocAsyncCtx7 + 16 | 0; //@line 25215
   HEAP32[$25 >> 2] = $2; //@line 25216
   sp = STACKTOP; //@line 25217
   return;
  }
  HEAP32[___async_retval >> 2] = $21; //@line 25221
  ___async_unwind = 0; //@line 25222
  HEAP32[$ReallocAsyncCtx7 >> 2] = 456; //@line 25223
  $22 = $ReallocAsyncCtx7 + 4 | 0; //@line 25224
  HEAP32[$22 >> 2] = $6; //@line 25225
  $23 = $ReallocAsyncCtx7 + 8 | 0; //@line 25226
  HEAP32[$23 >> 2] = $8; //@line 25227
  $24 = $ReallocAsyncCtx7 + 12 | 0; //@line 25228
  HEAP32[$24 >> 2] = $10; //@line 25229
  $25 = $ReallocAsyncCtx7 + 16 | 0; //@line 25230
  HEAP32[$25 >> 2] = $2; //@line 25231
  sp = STACKTOP; //@line 25232
  return;
 }
 if (!$AsyncRetVal) {
  $$1 = 0; //@line 25237
  $30 = ___async_retval; //@line 25238
  HEAP32[$30 >> 2] = $$1; //@line 25239
  return;
 }
 $$pre = HEAP8[$10 >> 0] | 0; //@line 25242
 HEAP8[$2 + 373 >> 0] = 0; //@line 25244
 HEAP8[$10 >> 0] = $$pre & -9; //@line 25246
 $$1 = $AsyncRetVal; //@line 25247
 $30 = ___async_retval; //@line 25248
 HEAP32[$30 >> 2] = $$1; //@line 25249
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$2 = 0, $17 = 0, $18 = 0, $3 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 15911
 STACKTOP = STACKTOP + 64 | 0; //@line 15912
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 15912
 $3 = sp; //@line 15913
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0) {
  $$2 = 1; //@line 15916
 } else {
  if (!$1) {
   $$2 = 0; //@line 15920
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 15922
   $6 = ___dynamic_cast($1, 464, 448, 0) | 0; //@line 15923
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 668; //@line 15926
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 15928
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 15930
    HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 15932
    sp = STACKTOP; //@line 15933
    STACKTOP = sp; //@line 15934
    return 0; //@line 15934
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15936
   if (!$6) {
    $$2 = 0; //@line 15939
   } else {
    dest = $3 + 4 | 0; //@line 15942
    stop = dest + 52 | 0; //@line 15942
    do {
     HEAP32[dest >> 2] = 0; //@line 15942
     dest = dest + 4 | 0; //@line 15942
    } while ((dest | 0) < (stop | 0));
    HEAP32[$3 >> 2] = $6; //@line 15943
    HEAP32[$3 + 8 >> 2] = $0; //@line 15945
    HEAP32[$3 + 12 >> 2] = -1; //@line 15947
    HEAP32[$3 + 48 >> 2] = 1; //@line 15949
    $17 = HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] | 0; //@line 15952
    $18 = HEAP32[$2 >> 2] | 0; //@line 15953
    $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 15954
    FUNCTION_TABLE_viiii[$17 & 7]($6, $3, $18, 1); //@line 15955
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 669; //@line 15958
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 15960
     HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 15962
     HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 15964
     sp = STACKTOP; //@line 15965
     STACKTOP = sp; //@line 15966
     return 0; //@line 15966
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 15968
    if ((HEAP32[$3 + 24 >> 2] | 0) == 1) {
     HEAP32[$2 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 15975
     $$0 = 1; //@line 15976
    } else {
     $$0 = 0; //@line 15978
    }
    $$2 = $$0; //@line 15980
   }
  }
 }
 STACKTOP = sp; //@line 15984
 return $$2 | 0; //@line 15984
}
function __ZN7LoRaMac11schedule_txEv__async_cb_303($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 20479
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20481
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20483
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20485
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20487
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20489
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20491
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20493
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20495
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20497
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20499
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20501
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20503
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20505
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 20507
 $28 = HEAP32[$2 >> 2] | 0; //@line 20508
 $31 = HEAP32[(HEAP32[$28 >> 2] | 0) + 28 >> 2] | 0; //@line 20511
 $32 = $4 + 1104 | 0; //@line 20512
 $33 = HEAP8[$32 >> 0] | 0; //@line 20513
 $34 = $4 + 1100 | 0; //@line 20514
 $35 = HEAP32[$34 >> 2] | 0; //@line 20515
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(64) | 0; //@line 20517
 FUNCTION_TABLE_viiiii[$31 & 7]($28, $AsyncRetVal, $33, $35, $4 + 1160 | 0); //@line 20518
 if (!___async) {
  ___async_unwind = 0; //@line 20521
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 402; //@line 20523
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 20525
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $4; //@line 20527
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $32; //@line 20529
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $34; //@line 20531
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $6; //@line 20533
 HEAP32[$ReallocAsyncCtx4 + 24 >> 2] = $8; //@line 20535
 HEAP32[$ReallocAsyncCtx4 + 28 >> 2] = $10; //@line 20537
 HEAP32[$ReallocAsyncCtx4 + 32 >> 2] = $12; //@line 20539
 HEAP32[$ReallocAsyncCtx4 + 36 >> 2] = $14; //@line 20541
 HEAP32[$ReallocAsyncCtx4 + 40 >> 2] = $16; //@line 20543
 HEAP32[$ReallocAsyncCtx4 + 44 >> 2] = $18; //@line 20545
 HEAP32[$ReallocAsyncCtx4 + 48 >> 2] = $20; //@line 20547
 HEAP32[$ReallocAsyncCtx4 + 52 >> 2] = $22; //@line 20549
 HEAP32[$ReallocAsyncCtx4 + 56 >> 2] = $24; //@line 20551
 HEAP32[$ReallocAsyncCtx4 + 60 >> 2] = $26; //@line 20553
 sp = STACKTOP; //@line 20554
 return;
}
function _vsnprintf($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $26 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 15421
 STACKTOP = STACKTOP + 128 | 0; //@line 15422
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 15422
 $4 = sp + 124 | 0; //@line 15423
 $5 = sp; //@line 15424
 dest = $5; //@line 15425
 src = 10696; //@line 15425
 stop = dest + 124 | 0; //@line 15425
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 15425
  dest = dest + 4 | 0; //@line 15425
  src = src + 4 | 0; //@line 15425
 } while ((dest | 0) < (stop | 0));
 if (($1 + -1 | 0) >>> 0 > 2147483646) {
  if (!$1) {
   $$014 = $4; //@line 15431
   $$015 = 1; //@line 15431
   label = 4; //@line 15432
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 15435
   $$0 = -1; //@line 15436
  }
 } else {
  $$014 = $0; //@line 15439
  $$015 = $1; //@line 15439
  label = 4; //@line 15440
 }
 if ((label | 0) == 4) {
  $11 = -2 - $$014 | 0; //@line 15444
  $$$015 = $$015 >>> 0 > $11 >>> 0 ? $11 : $$015; //@line 15446
  HEAP32[$5 + 48 >> 2] = $$$015; //@line 15448
  $14 = $5 + 20 | 0; //@line 15449
  HEAP32[$14 >> 2] = $$014; //@line 15450
  HEAP32[$5 + 44 >> 2] = $$014; //@line 15452
  $16 = $$014 + $$$015 | 0; //@line 15453
  $17 = $5 + 16 | 0; //@line 15454
  HEAP32[$17 >> 2] = $16; //@line 15455
  HEAP32[$5 + 28 >> 2] = $16; //@line 15457
  $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 15458
  $19 = _vfprintf($5, $2, $3) | 0; //@line 15459
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 660; //@line 15462
   HEAP32[$AsyncCtx + 4 >> 2] = $$$015; //@line 15464
   HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 15466
   HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 15468
   HEAP32[$AsyncCtx + 16 >> 2] = $14; //@line 15470
   HEAP32[$AsyncCtx + 20 >> 2] = $17; //@line 15472
   sp = STACKTOP; //@line 15473
   STACKTOP = sp; //@line 15474
   return 0; //@line 15474
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15476
  if (!$$$015) {
   $$0 = $19; //@line 15479
  } else {
   $26 = HEAP32[$14 >> 2] | 0; //@line 15481
   HEAP8[$26 + ((($26 | 0) == (HEAP32[$17 >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 15486
   $$0 = $19; //@line 15487
  }
 }
 STACKTOP = sp; //@line 15490
 return $$0 | 0; //@line 15490
}
function _equeue_alloc__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$038$sink$i = 0, $$03842$i = 0, $$1$i9 = 0, $12 = 0, $15 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $34 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23748
 $6 = (HEAP32[$0 + 4 >> 2] | 0) + 39 & -4; //@line 23750
 $7 = $4 + 156 | 0; //@line 23751
 _equeue_mutex_lock($7); //@line 23752
 $8 = $4 + 24 | 0; //@line 23753
 $9 = HEAP32[$8 >> 2] | 0; //@line 23754
 L3 : do {
  if (!$9) {
   label = 9; //@line 23758
  } else {
   $$03842$i = $8; //@line 23760
   $12 = $9; //@line 23760
   while (1) {
    if ((HEAP32[$12 >> 2] | 0) >>> 0 >= $6 >>> 0) {
     break;
    }
    $18 = $12 + 8 | 0; //@line 23767
    $19 = HEAP32[$18 >> 2] | 0; //@line 23768
    if (!$19) {
     label = 9; //@line 23771
     break L3;
    } else {
     $$03842$i = $18; //@line 23774
     $12 = $19; //@line 23774
    }
   }
   $15 = HEAP32[$12 + 12 >> 2] | 0; //@line 23778
   if (!$15) {
    $$038$sink$i = $$03842$i; //@line 23781
   } else {
    HEAP32[$$03842$i >> 2] = $15; //@line 23783
    $$038$sink$i = $15 + 8 | 0; //@line 23785
   }
   HEAP32[$$038$sink$i >> 2] = HEAP32[$12 + 8 >> 2]; //@line 23789
   _equeue_mutex_unlock($7); //@line 23790
   $$1$i9 = $12; //@line 23791
  }
 } while (0);
 do {
  if ((label | 0) == 9) {
   $21 = $4 + 28 | 0; //@line 23796
   $22 = HEAP32[$21 >> 2] | 0; //@line 23797
   if ($22 >>> 0 < $6 >>> 0) {
    _equeue_mutex_unlock($7); //@line 23800
    $$0 = 0; //@line 23801
    $34 = ___async_retval; //@line 23802
    HEAP32[$34 >> 2] = $$0; //@line 23803
    return;
   } else {
    $24 = $4 + 32 | 0; //@line 23806
    $25 = HEAP32[$24 >> 2] | 0; //@line 23807
    HEAP32[$24 >> 2] = $25 + $6; //@line 23809
    HEAP32[$21 >> 2] = $22 - $6; //@line 23811
    HEAP32[$25 >> 2] = $6; //@line 23812
    HEAP8[$25 + 4 >> 0] = 1; //@line 23814
    _equeue_mutex_unlock($7); //@line 23815
    if (!$25) {
     $$0 = 0; //@line 23818
    } else {
     $$1$i9 = $25; //@line 23820
     break;
    }
    $34 = ___async_retval; //@line 23823
    HEAP32[$34 >> 2] = $$0; //@line 23824
    return;
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 23830
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 23832
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 23834
 $$0 = $$1$i9 + 36 | 0; //@line 23836
 $34 = ___async_retval; //@line 23837
 HEAP32[$34 >> 2] = $$0; //@line 23838
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $19 = 0, $28 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17243
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 17249
  } else {
   $9 = HEAP32[$0 + 12 >> 2] | 0; //@line 17253
   $10 = $0 + 16 + ($9 << 3) | 0; //@line 17254
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 17255
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0 + 16 | 0, $1, $2, $3); //@line 17256
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 685; //@line 17259
    HEAP32[$AsyncCtx3 + 4 >> 2] = $9; //@line 17261
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 17263
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 17265
    HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 17267
    HEAP32[$AsyncCtx3 + 20 >> 2] = $3; //@line 17269
    HEAP32[$AsyncCtx3 + 24 >> 2] = $10; //@line 17271
    sp = STACKTOP; //@line 17272
    return;
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17275
   if (($9 | 0) > 1) {
    $19 = $1 + 54 | 0; //@line 17279
    $$0 = $0 + 24 | 0; //@line 17280
    while (1) {
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 17282
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0, $1, $2, $3); //@line 17283
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 17288
     if (HEAP8[$19 >> 0] | 0) {
      break L1;
     }
     $28 = $$0 + 8 | 0; //@line 17294
     if ($28 >>> 0 < $10 >>> 0) {
      $$0 = $28; //@line 17297
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 686; //@line 17302
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 17304
    HEAP32[$AsyncCtx + 8 >> 2] = $$0; //@line 17306
    HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 17308
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 17310
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 17312
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 17314
    sp = STACKTOP; //@line 17315
    return;
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_361($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx27 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 29228
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29232
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29234
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29236
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29238
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 29239
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 29243
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 29244
  FUNCTION_TABLE_vi[$13 & 1023]($4); //@line 29245
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 205; //@line 29248
   $14 = $ReallocAsyncCtx8 + 4 | 0; //@line 29249
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 29250
   $15 = $ReallocAsyncCtx8 + 8 | 0; //@line 29251
   HEAP32[$15 >> 2] = $6; //@line 29252
   $16 = $ReallocAsyncCtx8 + 12 | 0; //@line 29253
   HEAP32[$16 >> 2] = $8; //@line 29254
   sp = STACKTOP; //@line 29255
   return;
  }
  ___async_unwind = 0; //@line 29258
  HEAP32[$ReallocAsyncCtx8 >> 2] = 205; //@line 29259
  $14 = $ReallocAsyncCtx8 + 4 | 0; //@line 29260
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 29261
  $15 = $ReallocAsyncCtx8 + 8 | 0; //@line 29262
  HEAP32[$15 >> 2] = $6; //@line 29263
  $16 = $ReallocAsyncCtx8 + 12 | 0; //@line 29264
  HEAP32[$16 >> 2] = $8; //@line 29265
  sp = STACKTOP; //@line 29266
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[$6 >> 2] = 6; //@line 29271
  HEAP32[___async_retval >> 2] = -1014; //@line 29273
  return;
 }
 $ReallocAsyncCtx27 = _emscripten_realloc_async_context(12) | 0; //@line 29276
 _mbed_assert_internal(13588, 12372, 1237); //@line 29277
 if (___async) {
  HEAP32[$ReallocAsyncCtx27 >> 2] = 206; //@line 29280
  $18 = $ReallocAsyncCtx27 + 4 | 0; //@line 29281
  HEAP32[$18 >> 2] = $6; //@line 29282
  $19 = $ReallocAsyncCtx27 + 8 | 0; //@line 29283
  HEAP32[$19 >> 2] = $8; //@line 29284
  sp = STACKTOP; //@line 29285
  return;
 }
 ___async_unwind = 0; //@line 29288
 HEAP32[$ReallocAsyncCtx27 >> 2] = 206; //@line 29289
 $18 = $ReallocAsyncCtx27 + 4 | 0; //@line 29290
 HEAP32[$18 >> 2] = $6; //@line 29291
 $19 = $ReallocAsyncCtx27 + 8 | 0; //@line 29292
 HEAP32[$19 >> 2] = $8; //@line 29293
 sp = STACKTOP; //@line 29294
 return;
}
function __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 24262
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24264
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24266
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24268
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24270
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24272
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24274
 if (!$AsyncRetVal) {
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($2) | 0) + 11 >> 0] = 0; //@line 24279
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($2) | 0) + 10 >> 0] = 0; //@line 24282
  $18 = HEAP32[$4 + 956 >> 2] | 0; //@line 24284
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2) | 0) + 16 >> 2] = $18; //@line 24287
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 24288
  $21 = __ZN7LoRaMac11schedule_txEv($4) | 0; //@line 24289
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 462; //@line 24292
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 24293
   HEAP32[$22 >> 2] = $6; //@line 24294
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 24295
   HEAP32[$23 >> 2] = $10; //@line 24296
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 24297
   HEAP32[$24 >> 2] = $2; //@line 24298
   $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 24299
   HEAP32[$25 >> 2] = $4; //@line 24300
   $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 24301
   HEAP32[$26 >> 2] = $8; //@line 24302
   sp = STACKTOP; //@line 24303
   return;
  }
  HEAP32[___async_retval >> 2] = $21; //@line 24307
  ___async_unwind = 0; //@line 24308
  HEAP32[$ReallocAsyncCtx2 >> 2] = 462; //@line 24309
  $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 24310
  HEAP32[$22 >> 2] = $6; //@line 24311
  $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 24312
  HEAP32[$23 >> 2] = $10; //@line 24313
  $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 24314
  HEAP32[$24 >> 2] = $2; //@line 24315
  $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 24316
  HEAP32[$25 >> 2] = $4; //@line 24317
  $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 24318
  HEAP32[$26 >> 2] = $8; //@line 24319
  sp = STACKTOP; //@line 24320
  return;
 } else {
  HEAP8[$4 + 373 >> 0] = 0; //@line 24324
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 24326
  return;
 }
}
function _mbedtls_cipher_cmac_update__async_cb_374($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $4 = 0, $42 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30504
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30506
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30508
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30510
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30512
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30514
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30516
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30518
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30520
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 30522
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 30524
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30526
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 30529
  $42 = ___async_retval; //@line 30530
  HEAP32[$42 >> 2] = $$0; //@line 30531
  return;
 }
 $24 = $2 + 1 | 0; //@line 30534
 if ($24 >>> 0 < $4 >>> 0) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 30537
  $22 = _mbedtls_cipher_update($8, $10, 0, $10, $12) | 0; //@line 30538
  if (!___async) {
   HEAP32[___async_retval >> 2] = $22; //@line 30542
   ___async_unwind = 0; //@line 30543
  }
  HEAP32[$ReallocAsyncCtx2 >> 2] = 586; //@line 30545
  HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $24; //@line 30547
  HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 30549
  HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 30551
  HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 30553
  HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 30555
  HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 30557
  HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 30559
  HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 30561
  HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 30563
  HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 30565
  sp = STACKTOP; //@line 30566
  return;
 }
 if (!$14) {
  $$0 = 0; //@line 30571
  $42 = ___async_retval; //@line 30572
  HEAP32[$42 >> 2] = $$0; //@line 30573
  return;
 }
 _memcpy((HEAP32[$18 >> 2] | 0) + ($20 + 16) | 0, $16 | 0, $14 | 0) | 0; //@line 30578
 HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + $14; //@line 30581
 $$0 = 0; //@line 30582
 $42 = ___async_retval; //@line 30583
 HEAP32[$42 >> 2] = $$0; //@line 30584
 return;
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_165($0) {
 $0 = $0 | 0;
 var $2 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 32089
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32091
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32093
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32095
 $9 = $2 + 1184 | 0; //@line 32098
 HEAP8[$9 >> 0] = HEAP8[$2 + 378 >> 0] | 0; //@line 32099
 HEAP32[$2 + 1188 >> 2] = HEAP32[$2 + 1132 >> 2]; //@line 32103
 HEAP8[$2 + 1200 >> 0] = HEAP8[$2 + 1141 >> 0] | 0; //@line 32107
 HEAP8[$2 + 1201 >> 0] = HEAP8[$2 + 369 >> 0] | 0; //@line 32111
 HEAP32[$2 + 1204 >> 2] = 1; //@line 32113
 $23 = $2 + 1202 | 0; //@line 32117
 HEAP8[$23 >> 0] = (HEAP32[$2 + 360 >> 2] | 0) == 2 & 1; //@line 32119
 $24 = HEAP32[$2 >> 2] | 0; //@line 32120
 $27 = HEAP32[(HEAP32[$24 >> 2] | 0) + 24 >> 2] | 0; //@line 32123
 $30 = (__ZN11LoRaMacMcps14get_indicationEv($2 + 288 | 0) | 0) + 10 | 0; //@line 32126
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 32127
 $31 = FUNCTION_TABLE_iiii[$27 & 15]($24, $9, $30) | 0; //@line 32128
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 297; //@line 32131
  $32 = $ReallocAsyncCtx + 4 | 0; //@line 32132
  HEAP32[$32 >> 2] = $23; //@line 32133
  $33 = $ReallocAsyncCtx + 8 | 0; //@line 32134
  HEAP32[$33 >> 2] = $2; //@line 32135
  $34 = $ReallocAsyncCtx + 12 | 0; //@line 32136
  HEAP32[$34 >> 2] = $4; //@line 32137
  $35 = $ReallocAsyncCtx + 16 | 0; //@line 32138
  HEAP32[$35 >> 2] = $6; //@line 32139
  $36 = $ReallocAsyncCtx + 20 | 0; //@line 32140
  HEAP32[$36 >> 2] = $2; //@line 32141
  sp = STACKTOP; //@line 32142
  return;
 }
 HEAP8[___async_retval >> 0] = $31 & 1; //@line 32147
 ___async_unwind = 0; //@line 32148
 HEAP32[$ReallocAsyncCtx >> 2] = 297; //@line 32149
 $32 = $ReallocAsyncCtx + 4 | 0; //@line 32150
 HEAP32[$32 >> 2] = $23; //@line 32151
 $33 = $ReallocAsyncCtx + 8 | 0; //@line 32152
 HEAP32[$33 >> 2] = $2; //@line 32153
 $34 = $ReallocAsyncCtx + 12 | 0; //@line 32154
 HEAP32[$34 >> 2] = $4; //@line 32155
 $35 = $ReallocAsyncCtx + 16 | 0; //@line 32156
 HEAP32[$35 >> 2] = $6; //@line 32157
 $36 = $ReallocAsyncCtx + 20 | 0; //@line 32158
 HEAP32[$36 >> 2] = $2; //@line 32159
 sp = STACKTOP; //@line 32160
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_83($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $2 = 0, $21 = 0, $22 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23451
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23453
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23455
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23457
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23459
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23461
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23463
 $13 = $2 + 946 | 0; //@line 23465
 HEAP16[$13 >> 1] = $AsyncRetVal; //@line 23466
 $15 = HEAP16[$4 >> 1] | 0; //@line 23468
 HEAP16[$4 >> 1] = $15 + 1 << 16 >> 16; //@line 23470
 HEAP8[($15 & 65535) + ($2 + 381) >> 0] = $AsyncRetVal; //@line 23473
 $21 = (HEAPU16[$13 >> 1] | 0) >>> 8 & 255; //@line 23476
 $22 = HEAP16[$4 >> 1] | 0; //@line 23477
 HEAP16[$4 >> 1] = $22 + 1 << 16 >> 16; //@line 23479
 HEAP8[($22 & 65535) + ($2 + 381) >> 0] = $21; //@line 23482
 $27 = HEAP16[$4 >> 1] & 255; //@line 23484
 $29 = HEAP32[$2 + 908 >> 2] | 0; //@line 23486
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 23487
 $30 = __Z22compute_join_frame_micPKhtS0_Pj($6, $27, $29, $8) | 0; //@line 23488
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 410; //@line 23491
  $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 23492
  HEAP32[$31 >> 2] = $8; //@line 23493
  $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 23494
  HEAP32[$32 >> 2] = $4; //@line 23495
  $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 23496
  HEAP32[$33 >> 2] = $2; //@line 23497
  $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 23498
  HEAP32[$34 >> 2] = $10; //@line 23499
  sp = STACKTOP; //@line 23500
  return;
 }
 HEAP32[___async_retval >> 2] = $30; //@line 23504
 ___async_unwind = 0; //@line 23505
 HEAP32[$ReallocAsyncCtx2 >> 2] = 410; //@line 23506
 $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 23507
 HEAP32[$31 >> 2] = $8; //@line 23508
 $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 23509
 HEAP32[$32 >> 2] = $4; //@line 23510
 $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 23511
 HEAP32[$33 >> 2] = $2; //@line 23512
 $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 23513
 HEAP32[$34 >> 2] = $10; //@line 23514
 sp = STACKTOP; //@line 23515
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_153($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 31175
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31179
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31181
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31183
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31185
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 31186
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 31190
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 31191
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 31192
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 346; //@line 31195
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 31196
   HEAP32[$14 >> 2] = $4; //@line 31197
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 31198
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 31199
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 31200
   HEAP32[$16 >> 2] = $8; //@line 31201
   sp = STACKTOP; //@line 31202
   return;
  }
  ___async_unwind = 0; //@line 31205
  HEAP32[$ReallocAsyncCtx4 >> 2] = 346; //@line 31206
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 31207
  HEAP32[$14 >> 2] = $4; //@line 31208
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 31209
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 31210
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 31211
  HEAP32[$16 >> 2] = $8; //@line 31212
  sp = STACKTOP; //@line 31213
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 31216
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 31220
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 31224
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 31225
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 31226
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 347; //@line 31229
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 31230
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 31231
  sp = STACKTOP; //@line 31232
  return;
 }
 ___async_unwind = 0; //@line 31235
 HEAP32[$ReallocAsyncCtx5 >> 2] = 347; //@line 31236
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 31237
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 31238
 sp = STACKTOP; //@line 31239
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_69($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22341
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22345
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22347
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22349
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22351
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 22352
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 22356
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 22357
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 22358
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 218; //@line 22361
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 22362
   HEAP32[$14 >> 2] = $4; //@line 22363
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 22364
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 22365
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 22366
   HEAP32[$16 >> 2] = $8; //@line 22367
   sp = STACKTOP; //@line 22368
   return;
  }
  ___async_unwind = 0; //@line 22371
  HEAP32[$ReallocAsyncCtx4 >> 2] = 218; //@line 22372
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 22373
  HEAP32[$14 >> 2] = $4; //@line 22374
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 22375
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 22376
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 22377
  HEAP32[$16 >> 2] = $8; //@line 22378
  sp = STACKTOP; //@line 22379
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 22382
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 22386
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 22390
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 22391
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 22392
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 219; //@line 22395
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 22396
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 22397
  sp = STACKTOP; //@line 22398
  return;
 }
 ___async_unwind = 0; //@line 22401
 HEAP32[$ReallocAsyncCtx5 >> 2] = 219; //@line 22402
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 22403
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 22404
 sp = STACKTOP; //@line 22405
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_53($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21025
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21029
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21031
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21033
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21035
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 21036
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 21040
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 21041
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 21042
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 227; //@line 21045
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 21046
   HEAP32[$14 >> 2] = $4; //@line 21047
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 21048
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 21049
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 21050
   HEAP32[$16 >> 2] = $8; //@line 21051
   sp = STACKTOP; //@line 21052
   return;
  }
  ___async_unwind = 0; //@line 21055
  HEAP32[$ReallocAsyncCtx4 >> 2] = 227; //@line 21056
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 21057
  HEAP32[$14 >> 2] = $4; //@line 21058
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 21059
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 21060
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 21061
  HEAP32[$16 >> 2] = $8; //@line 21062
  sp = STACKTOP; //@line 21063
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 21066
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 21070
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 21074
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 21075
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 21076
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 228; //@line 21079
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 21080
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 21081
  sp = STACKTOP; //@line 21082
  return;
 }
 ___async_unwind = 0; //@line 21085
 HEAP32[$ReallocAsyncCtx5 >> 2] = 228; //@line 21086
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 21087
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 21088
 sp = STACKTOP; //@line 21089
 return;
}
function ___mo_lookup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$090 = 0, $$094 = 0, $$4 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $4 = 0, $44 = 0, $46 = 0, $49 = 0, $53 = 0, $63 = 0, $7 = 0;
 $4 = (HEAP32[$0 >> 2] | 0) + 1794895138 | 0; //@line 11410
 $7 = _swapc(HEAP32[$0 + 8 >> 2] | 0, $4) | 0; //@line 11413
 $10 = _swapc(HEAP32[$0 + 12 >> 2] | 0, $4) | 0; //@line 11416
 $13 = _swapc(HEAP32[$0 + 16 >> 2] | 0, $4) | 0; //@line 11419
 L1 : do {
  if ($7 >>> 0 < $1 >>> 2 >>> 0) {
   $17 = $1 - ($7 << 2) | 0; //@line 11425
   if ($10 >>> 0 < $17 >>> 0 & $13 >>> 0 < $17 >>> 0) {
    if (!(($13 | $10) & 3)) {
     $23 = $10 >>> 2; //@line 11434
     $24 = $13 >>> 2; //@line 11435
     $$090 = 0; //@line 11436
     $$094 = $7; //@line 11436
     while (1) {
      $25 = $$094 >>> 1; //@line 11438
      $26 = $$090 + $25 | 0; //@line 11439
      $27 = $26 << 1; //@line 11440
      $28 = $27 + $23 | 0; //@line 11441
      $31 = _swapc(HEAP32[$0 + ($28 << 2) >> 2] | 0, $4) | 0; //@line 11444
      $35 = _swapc(HEAP32[$0 + ($28 + 1 << 2) >> 2] | 0, $4) | 0; //@line 11448
      if (!($35 >>> 0 < $1 >>> 0 & $31 >>> 0 < ($1 - $35 | 0) >>> 0)) {
       $$4 = 0; //@line 11454
       break L1;
      }
      if (HEAP8[$0 + ($35 + $31) >> 0] | 0) {
       $$4 = 0; //@line 11462
       break L1;
      }
      $44 = _strcmp($2, $0 + $35 | 0) | 0; //@line 11466
      if (!$44) {
       break;
      }
      $63 = ($44 | 0) < 0; //@line 11472
      if (($$094 | 0) == 1) {
       $$4 = 0; //@line 11477
       break L1;
      } else {
       $$090 = $63 ? $$090 : $26; //@line 11480
       $$094 = $63 ? $25 : $$094 - $25 | 0; //@line 11480
      }
     }
     $46 = $27 + $24 | 0; //@line 11483
     $49 = _swapc(HEAP32[$0 + ($46 << 2) >> 2] | 0, $4) | 0; //@line 11486
     $53 = _swapc(HEAP32[$0 + ($46 + 1 << 2) >> 2] | 0, $4) | 0; //@line 11490
     if ($53 >>> 0 < $1 >>> 0 & $49 >>> 0 < ($1 - $53 | 0) >>> 0) {
      $$4 = (HEAP8[$0 + ($53 + $49) >> 0] | 0) == 0 ? $0 + $53 | 0 : 0; //@line 11502
     } else {
      $$4 = 0; //@line 11504
     }
    } else {
     $$4 = 0; //@line 11507
    }
   } else {
    $$4 = 0; //@line 11510
   }
  } else {
   $$4 = 0; //@line 11513
  }
 } while (0);
 return $$4 | 0; //@line 11516
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_357($0) {
 $0 = $0 | 0;
 var $10 = 0, $18 = 0, $19 = 0, $2 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 29010
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29012
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29014
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29018
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29020
 HEAP8[$2 + 1964 >> 0] = 0; //@line 29023
 HEAP32[$2 + 2256 >> 2] = 0; //@line 29025
 HEAP8[$2 + 2236 >> 0] = 0; //@line 29027
 HEAP16[$2 + 2282 >> 1] = 0; //@line 29029
 HEAP16[$2 + 2260 >> 1] = 0; //@line 29031
 HEAP8[$2 + 1932 >> 0] = 0; //@line 29033
 _memset($2 + 1975 | 0, 0, 259) | 0; //@line 29034
 _mbed_tracef(16, 12332, 12598, $4); //@line 29035
 $18 = $2 + 1892 | 0; //@line 29036
 $19 = HEAP32[$18 >> 2] | 0; //@line 29037
 if (!$19) {
  HEAP32[___async_retval >> 2] = -1011; //@line 29041
  return;
 }
 $23 = HEAP32[$2 + 2288 >> 2] | 0; //@line 29046
 $25 = HEAP32[$19 + 4 >> 2] | 0; //@line 29048
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 29049
 FUNCTION_TABLE_vii[$25 & 31]($10, $2 + 1880 | 0); //@line 29050
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 184; //@line 29053
  $26 = $ReallocAsyncCtx + 4 | 0; //@line 29054
  HEAP32[$26 >> 2] = $18; //@line 29055
  $27 = $ReallocAsyncCtx + 8 | 0; //@line 29056
  HEAP32[$27 >> 2] = $10; //@line 29057
  $28 = $ReallocAsyncCtx + 12 | 0; //@line 29058
  HEAP32[$28 >> 2] = $23; //@line 29059
  $29 = $ReallocAsyncCtx + 16 | 0; //@line 29060
  HEAP32[$29 >> 2] = $10; //@line 29061
  $30 = $ReallocAsyncCtx + 20 | 0; //@line 29062
  HEAP32[$30 >> 2] = $8; //@line 29063
  sp = STACKTOP; //@line 29064
  return;
 }
 ___async_unwind = 0; //@line 29067
 HEAP32[$ReallocAsyncCtx >> 2] = 184; //@line 29068
 $26 = $ReallocAsyncCtx + 4 | 0; //@line 29069
 HEAP32[$26 >> 2] = $18; //@line 29070
 $27 = $ReallocAsyncCtx + 8 | 0; //@line 29071
 HEAP32[$27 >> 2] = $10; //@line 29072
 $28 = $ReallocAsyncCtx + 12 | 0; //@line 29073
 HEAP32[$28 >> 2] = $23; //@line 29074
 $29 = $ReallocAsyncCtx + 16 | 0; //@line 29075
 HEAP32[$29 >> 2] = $10; //@line 29076
 $30 = $ReallocAsyncCtx + 20 | 0; //@line 29077
 HEAP32[$30 >> 2] = $8; //@line 29078
 sp = STACKTOP; //@line 29079
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15396
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15398
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15400
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15402
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15404
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15406
 $11 = HEAP32[$2 >> 2] | 0; //@line 15407
 if ($11 | 0) {
  $14 = HEAP32[$11 + 4 >> 2] | 0; //@line 15411
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 15412
  FUNCTION_TABLE_vii[$14 & 31]($6, $8); //@line 15413
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 52; //@line 15416
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 15417
   HEAP32[$15 >> 2] = $2; //@line 15418
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 15419
   HEAP32[$16 >> 2] = $4; //@line 15420
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 15421
   HEAP32[$17 >> 2] = $10; //@line 15422
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 15423
   HEAP32[$18 >> 2] = $8; //@line 15424
   sp = STACKTOP; //@line 15425
   return;
  }
  ___async_unwind = 0; //@line 15428
  HEAP32[$ReallocAsyncCtx2 >> 2] = 52; //@line 15429
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 15430
  HEAP32[$15 >> 2] = $2; //@line 15431
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 15432
  HEAP32[$16 >> 2] = $4; //@line 15433
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 15434
  HEAP32[$17 >> 2] = $10; //@line 15435
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 15436
  HEAP32[$18 >> 2] = $8; //@line 15437
  sp = STACKTOP; //@line 15438
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 15441
 __ZN4mbed6Ticker5setupEy($10, 2e5, 0); //@line 15442
 $19 = HEAP32[$2 >> 2] | 0; //@line 15443
 if (!$19) {
  return;
 }
 $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 15449
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 15450
 FUNCTION_TABLE_vi[$22 & 1023]($8); //@line 15451
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 53; //@line 15454
  sp = STACKTOP; //@line 15455
  return;
 }
 ___async_unwind = 0; //@line 15458
 HEAP32[$ReallocAsyncCtx3 >> 2] = 53; //@line 15459
 sp = STACKTOP; //@line 15460
 return;
}
function _fputc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15553
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 15558
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 15563
  } else {
   $20 = $0 & 255; //@line 15565
   $21 = $0 & 255; //@line 15566
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 15572
   } else {
    $26 = $1 + 20 | 0; //@line 15574
    $27 = HEAP32[$26 >> 2] | 0; //@line 15575
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 15581
     HEAP8[$27 >> 0] = $20; //@line 15582
     $34 = $21; //@line 15583
    } else {
     label = 12; //@line 15585
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 15590
     $32 = ___overflow($1, $0) | 0; //@line 15591
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 662; //@line 15594
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 15596
      sp = STACKTOP; //@line 15597
      return 0; //@line 15598
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 15600
      $34 = $32; //@line 15601
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 15606
   $$0 = $34; //@line 15607
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 15612
   $8 = $0 & 255; //@line 15613
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 15619
    $14 = HEAP32[$13 >> 2] | 0; //@line 15620
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 15626
     HEAP8[$14 >> 0] = $7; //@line 15627
     $$0 = $8; //@line 15628
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 15632
   $19 = ___overflow($1, $0) | 0; //@line 15633
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 661; //@line 15636
    sp = STACKTOP; //@line 15637
    return 0; //@line 15638
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15640
    $$0 = $19; //@line 15641
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 15646
}
function _putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11075
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 11080
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 11085
  } else {
   $20 = $0 & 255; //@line 11087
   $21 = $0 & 255; //@line 11088
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 11094
   } else {
    $26 = $1 + 20 | 0; //@line 11096
    $27 = HEAP32[$26 >> 2] | 0; //@line 11097
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 11103
     HEAP8[$27 >> 0] = $20; //@line 11104
     $34 = $21; //@line 11105
    } else {
     label = 12; //@line 11107
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 11112
     $32 = ___overflow($1, $0) | 0; //@line 11113
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 650; //@line 11116
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 11118
      sp = STACKTOP; //@line 11119
      return 0; //@line 11120
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 11122
      $34 = $32; //@line 11123
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 11128
   $$0 = $34; //@line 11129
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 11134
   $8 = $0 & 255; //@line 11135
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 11141
    $14 = HEAP32[$13 >> 2] | 0; //@line 11142
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 11148
     HEAP8[$14 >> 0] = $7; //@line 11149
     $$0 = $8; //@line 11150
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11154
   $19 = ___overflow($1, $0) | 0; //@line 11155
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 649; //@line 11158
    sp = STACKTOP; //@line 11159
    return 0; //@line 11160
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11162
    $$0 = $19; //@line 11163
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 11168
}
function ___fflush_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $22 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11795
 $1 = $0 + 20 | 0; //@line 11796
 $3 = $0 + 28 | 0; //@line 11798
 do {
  if ((HEAP32[$1 >> 2] | 0) >>> 0 > (HEAP32[$3 >> 2] | 0) >>> 0) {
   $7 = HEAP32[$0 + 36 >> 2] | 0; //@line 11804
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 11805
   FUNCTION_TABLE_iiii[$7 & 15]($0, 0, 0) | 0; //@line 11806
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 656; //@line 11809
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 11811
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 11813
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 11815
    sp = STACKTOP; //@line 11816
    return 0; //@line 11817
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 11819
    if (!(HEAP32[$1 >> 2] | 0)) {
     $$0 = -1; //@line 11823
     break;
    } else {
     label = 5; //@line 11826
     break;
    }
   }
  } else {
   label = 5; //@line 11831
  }
 } while (0);
 if ((label | 0) == 5) {
  $13 = $0 + 4 | 0; //@line 11835
  $14 = HEAP32[$13 >> 2] | 0; //@line 11836
  $15 = $0 + 8 | 0; //@line 11837
  $16 = HEAP32[$15 >> 2] | 0; //@line 11838
  do {
   if ($14 >>> 0 < $16 >>> 0) {
    $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 11846
    $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11847
    FUNCTION_TABLE_iiii[$22 & 15]($0, $14 - $16 | 0, 1) | 0; //@line 11848
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 657; //@line 11851
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 11853
     HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 11855
     HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 11857
     HEAP32[$AsyncCtx3 + 16 >> 2] = $15; //@line 11859
     HEAP32[$AsyncCtx3 + 20 >> 2] = $13; //@line 11861
     sp = STACKTOP; //@line 11862
     return 0; //@line 11863
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11865
     break;
    }
   }
  } while (0);
  HEAP32[$0 + 16 >> 2] = 0; //@line 11871
  HEAP32[$3 >> 2] = 0; //@line 11872
  HEAP32[$1 >> 2] = 0; //@line 11873
  HEAP32[$15 >> 2] = 0; //@line 11874
  HEAP32[$13 >> 2] = 0; //@line 11875
  $$0 = 0; //@line 11876
 }
 return $$0 | 0; //@line 11878
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_17($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 18370
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18372
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18374
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18376
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18378
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18380
 $11 = HEAP32[$2 >> 2] | 0; //@line 18381
 $13 = $10 + 12 | 0; //@line 18383
 HEAP32[$10 >> 2] = 435; //@line 18384
 HEAP32[$10 + 4 >> 2] = 0; //@line 18386
 HEAP32[$10 + 8 >> 2] = $4; //@line 18388
 HEAP32[$13 >> 2] = 912; //@line 18389
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(28) | 0; //@line 18390
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($11, $4 + 1036 | 0, $10); //@line 18391
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 436; //@line 18394
  $14 = $ReallocAsyncCtx8 + 4 | 0; //@line 18395
  HEAP32[$14 >> 2] = $2; //@line 18396
  $15 = $ReallocAsyncCtx8 + 8 | 0; //@line 18397
  HEAP32[$15 >> 2] = $4; //@line 18398
  $16 = $ReallocAsyncCtx8 + 12 | 0; //@line 18399
  HEAP32[$16 >> 2] = $8; //@line 18400
  $17 = $ReallocAsyncCtx8 + 16 | 0; //@line 18401
  HEAP32[$17 >> 2] = $6; //@line 18402
  $18 = $ReallocAsyncCtx8 + 20 | 0; //@line 18403
  HEAP32[$18 >> 2] = $13; //@line 18404
  $19 = $ReallocAsyncCtx8 + 24 | 0; //@line 18405
  HEAP32[$19 >> 2] = $10; //@line 18406
  sp = STACKTOP; //@line 18407
  return;
 }
 ___async_unwind = 0; //@line 18410
 HEAP32[$ReallocAsyncCtx8 >> 2] = 436; //@line 18411
 $14 = $ReallocAsyncCtx8 + 4 | 0; //@line 18412
 HEAP32[$14 >> 2] = $2; //@line 18413
 $15 = $ReallocAsyncCtx8 + 8 | 0; //@line 18414
 HEAP32[$15 >> 2] = $4; //@line 18415
 $16 = $ReallocAsyncCtx8 + 12 | 0; //@line 18416
 HEAP32[$16 >> 2] = $8; //@line 18417
 $17 = $ReallocAsyncCtx8 + 16 | 0; //@line 18418
 HEAP32[$17 >> 2] = $6; //@line 18419
 $18 = $ReallocAsyncCtx8 + 20 | 0; //@line 18420
 HEAP32[$18 >> 2] = $13; //@line 18421
 $19 = $ReallocAsyncCtx8 + 24 | 0; //@line 18422
 HEAP32[$19 >> 2] = $10; //@line 18423
 sp = STACKTOP; //@line 18424
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_304($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $31 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20562
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20564
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20566
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20572
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20574
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20576
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20578
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20580
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20582
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20584
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20586
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20588
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 20590
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 20592
 $31 = HEAP32[$2 >> 2] | 0; //@line 20593
 $34 = HEAP32[(HEAP32[$31 >> 2] | 0) + 28 >> 2] | 0; //@line 20596
 $36 = HEAP8[$4 + 1136 >> 0] | 0; //@line 20598
 $37 = HEAP8[HEAP32[$0 + 12 >> 2] >> 0] | 0; //@line 20599
 $38 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 20600
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 20602
 FUNCTION_TABLE_viiiii[$34 & 7]($31, $36, $37, $38, $4 + 1184 | 0); //@line 20603
 if (!___async) {
  ___async_unwind = 0; //@line 20606
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 403; //@line 20608
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $10; //@line 20610
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 20612
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $12; //@line 20614
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $14; //@line 20616
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $16; //@line 20618
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $2; //@line 20620
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $18; //@line 20622
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $20; //@line 20624
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $22; //@line 20626
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $24; //@line 20628
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $26; //@line 20630
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $28; //@line 20632
 HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $30; //@line 20634
 sp = STACKTOP; //@line 20635
 return;
}
function __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $13 = 0, $16 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 2078
 STACKTOP = STACKTOP + 48 | 0; //@line 2079
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 2079
 $vararg_buffer12 = sp + 32 | 0; //@line 2080
 $vararg_buffer8 = sp + 24 | 0; //@line 2081
 $vararg_buffer4 = sp + 16 | 0; //@line 2082
 $vararg_buffer = sp; //@line 2083
 $6 = $4 & 255; //@line 2084
 $7 = $5 & 255; //@line 2085
 HEAP32[$vararg_buffer >> 2] = $2; //@line 2086
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 2088
 HEAP32[$vararg_buffer + 8 >> 2] = $6; //@line 2090
 HEAP32[$vararg_buffer + 12 >> 2] = $7; //@line 2092
 _mbed_tracef(16, 10944, 11752, $vararg_buffer); //@line 2093
 _emscripten_asm_const_i(6) | 0; //@line 2094
 $10 = HEAP32[$0 + 752 >> 2] | 0; //@line 2096
 if (($10 | 0) != ($6 | 0)) {
  HEAP32[$vararg_buffer4 >> 2] = $10; //@line 2099
  HEAP32[$vararg_buffer4 + 4 >> 2] = $6; //@line 2101
  _mbed_tracef(16, 10944, 11834, $vararg_buffer4); //@line 2102
  STACKTOP = sp; //@line 2103
  return;
 }
 $13 = HEAP32[$0 + 756 >> 2] | 0; //@line 2106
 if (($13 | 0) != ($7 | 0)) {
  HEAP32[$vararg_buffer8 >> 2] = $13; //@line 2109
  HEAP32[$vararg_buffer8 + 4 >> 2] = $7; //@line 2111
  _mbed_tracef(16, 10944, 11881, $vararg_buffer8); //@line 2112
  STACKTOP = sp; //@line 2113
  return;
 }
 $16 = HEAP32[$0 + 692 >> 2] | 0; //@line 2116
 if (($16 | 0) == ($3 | 0)) {
  _memcpy($0 + 792 | 0, $1 | 0, $2 | 0) | 0; //@line 2120
  HEAP8[$0 + 782 >> 0] = $2; //@line 2123
  HEAP8[$0 + 781 >> 0] = -35; //@line 2125
  HEAP8[$0 + 780 >> 0] = -5; //@line 2127
  HEAP8[$0 + 783 >> 0] = 1; //@line 2129
  HEAP32[$0 + 784 >> 2] = _emscripten_asm_const_i(3) | 0; //@line 2132
  STACKTOP = sp; //@line 2133
  return;
 } else {
  HEAP32[$vararg_buffer12 >> 2] = $16; //@line 2135
  HEAP32[$vararg_buffer12 + 4 >> 2] = $3; //@line 2137
  _mbed_tracef(16, 10944, 11928, $vararg_buffer12); //@line 2138
  STACKTOP = sp; //@line 2139
  return;
 }
}
function __ZN7LoRaPHY15setup_rx_windowEbj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $14 = 0, $17 = 0, $20 = 0, $3 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 23681
 $3 = $0 + 4 | 0; //@line 23682
 $4 = HEAP32[$3 >> 2] | 0; //@line 23683
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 72 >> 2] | 0; //@line 23686
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 23687
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 23688
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 548; //@line 23691
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 23693
  HEAP8[$AsyncCtx + 8 >> 0] = $1 & 1; //@line 23696
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 23698
  sp = STACKTOP; //@line 23699
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 23702
 $11 = HEAP32[$3 >> 2] | 0; //@line 23703
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 28 >> 2] | 0; //@line 23706
 do {
  if ($1) {
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 23709
   FUNCTION_TABLE_vii[$14 & 31]($11, 0); //@line 23710
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 550; //@line 23713
    HEAP32[$AsyncCtx7 + 4 >> 2] = $3; //@line 23715
    sp = STACKTOP; //@line 23716
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 23719
    break;
   }
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 23723
   FUNCTION_TABLE_vii[$14 & 31]($11, $2); //@line 23724
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 549; //@line 23727
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 23729
    sp = STACKTOP; //@line 23730
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 23733
    break;
   }
  }
 } while (0);
 $17 = HEAP32[$3 >> 2] | 0; //@line 23738
 $20 = HEAP32[(HEAP32[$17 >> 2] | 0) + 76 >> 2] | 0; //@line 23741
 $AsyncCtx11 = _emscripten_alloc_async_context(4, sp) | 0; //@line 23742
 FUNCTION_TABLE_vi[$20 & 1023]($17); //@line 23743
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 551; //@line 23746
  sp = STACKTOP; //@line 23747
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 23750
  return;
 }
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 599
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 601
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 603
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 605
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 607
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 609
 $11 = HEAP32[$2 >> 2] | 0; //@line 610
 if ($11 | 0) {
  $14 = HEAP32[$11 + 4 >> 2] | 0; //@line 614
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 615
  FUNCTION_TABLE_vii[$14 & 31]($6, $8); //@line 616
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 93; //@line 619
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 620
   HEAP32[$15 >> 2] = $2; //@line 621
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 622
   HEAP32[$16 >> 2] = $4; //@line 623
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 624
   HEAP32[$17 >> 2] = $10; //@line 625
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 626
   HEAP32[$18 >> 2] = $8; //@line 627
   sp = STACKTOP; //@line 628
   return;
  }
  ___async_unwind = 0; //@line 631
  HEAP32[$ReallocAsyncCtx2 >> 2] = 93; //@line 632
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 633
  HEAP32[$15 >> 2] = $2; //@line 634
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 635
  HEAP32[$16 >> 2] = $4; //@line 636
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 637
  HEAP32[$17 >> 2] = $10; //@line 638
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 639
  HEAP32[$18 >> 2] = $8; //@line 640
  sp = STACKTOP; //@line 641
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 644
 __ZN4mbed6Ticker5setupEy($10, 1e5, 0); //@line 645
 $19 = HEAP32[$2 >> 2] | 0; //@line 646
 if (!$19) {
  return;
 }
 $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 652
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 653
 FUNCTION_TABLE_vi[$22 & 1023]($8); //@line 654
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 94; //@line 657
  sp = STACKTOP; //@line 658
  return;
 }
 ___async_unwind = 0; //@line 661
 HEAP32[$ReallocAsyncCtx3 >> 2] = 94; //@line 662
 sp = STACKTOP; //@line 663
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_321($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22592
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22594
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22596
 $5 = HEAP8[$2 >> 0] & -5; //@line 22598
 HEAP8[$2 >> 0] = $5; //@line 22599
 if (!($5 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $5 & -17; //@line 22606
 $10 = HEAP32[$4 + 1324 >> 2] | 0; //@line 22608
 $11 = $10 + 48 | 0; //@line 22609
 $13 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 22611
 $14 = $10 + 60 | 0; //@line 22612
 $15 = HEAP32[$14 >> 2] | 0; //@line 22613
 if (!$15) {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(16) | 0; //@line 22616
  _mbed_assert_internal(15615, 15620, 1102); //@line 22617
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 393; //@line 22620
   $17 = $ReallocAsyncCtx12 + 4 | 0; //@line 22621
   HEAP32[$17 >> 2] = $14; //@line 22622
   $18 = $ReallocAsyncCtx12 + 8 | 0; //@line 22623
   HEAP32[$18 >> 2] = $11; //@line 22624
   $19 = $ReallocAsyncCtx12 + 12 | 0; //@line 22625
   HEAP32[$19 >> 2] = $13; //@line 22626
   sp = STACKTOP; //@line 22627
   return;
  }
  ___async_unwind = 0; //@line 22630
  HEAP32[$ReallocAsyncCtx12 >> 2] = 393; //@line 22631
  $17 = $ReallocAsyncCtx12 + 4 | 0; //@line 22632
  HEAP32[$17 >> 2] = $14; //@line 22633
  $18 = $ReallocAsyncCtx12 + 8 | 0; //@line 22634
  HEAP32[$18 >> 2] = $11; //@line 22635
  $19 = $ReallocAsyncCtx12 + 12 | 0; //@line 22636
  HEAP32[$19 >> 2] = $13; //@line 22637
  sp = STACKTOP; //@line 22638
  return;
 } else {
  $20 = HEAP32[$15 >> 2] | 0; //@line 22641
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 22642
  FUNCTION_TABLE_vii[$20 & 31]($11, $13); //@line 22643
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 394; //@line 22646
   sp = STACKTOP; //@line 22647
   return;
  }
  ___async_unwind = 0; //@line 22650
  HEAP32[$ReallocAsyncCtx5 >> 2] = 394; //@line 22651
  sp = STACKTOP; //@line 22652
  return;
 }
}
function __ZN14lorawan_timersD2Ev__async_cb_71($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22682
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22684
 $4 = HEAP32[$2 + 68 >> 2] | 0; //@line 22686
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 22691
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 22692
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 56 | 0); //@line 22693
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 272; //@line 22696
   $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 22697
   HEAP32[$9 >> 2] = $2; //@line 22698
   sp = STACKTOP; //@line 22699
   return;
  }
  ___async_unwind = 0; //@line 22702
  HEAP32[$ReallocAsyncCtx3 >> 2] = 272; //@line 22703
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 22704
  HEAP32[$9 >> 2] = $2; //@line 22705
  sp = STACKTOP; //@line 22706
  return;
 }
 $11 = HEAP32[$2 + 48 >> 2] | 0; //@line 22710
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 22715
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 22716
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 36 | 0); //@line 22717
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 273; //@line 22720
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 22721
   HEAP32[$16 >> 2] = $2; //@line 22722
   sp = STACKTOP; //@line 22723
   return;
  }
  ___async_unwind = 0; //@line 22726
  HEAP32[$ReallocAsyncCtx4 >> 2] = 273; //@line 22727
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 22728
  HEAP32[$16 >> 2] = $2; //@line 22729
  sp = STACKTOP; //@line 22730
  return;
 }
 $18 = HEAP32[$2 + 28 >> 2] | 0; //@line 22734
 if (!$18) {
  return;
 }
 $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 22741
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 22742
 FUNCTION_TABLE_vi[$22 & 1023]($2 + 16 | 0); //@line 22743
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 274; //@line 22746
  sp = STACKTOP; //@line 22747
  return;
 }
 ___async_unwind = 0; //@line 22750
 HEAP32[$ReallocAsyncCtx5 >> 2] = 274; //@line 22751
 sp = STACKTOP; //@line 22752
 return;
}
function __ZN7LoRaMac14handle_rx_doneEPhtsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $12 = 0, $15 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 9822
 STACKTOP = STACKTOP + 16 | 0; //@line 9823
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9823
 $5 = sp; //@line 9824
 $7 = HEAP32[$0 + 1328 >> 2] | 0; //@line 9826
 $8 = $5 + 12 | 0; //@line 9827
 HEAP32[$5 >> 2] = 6; //@line 9828
 HEAP32[$5 + 4 >> 2] = 0; //@line 9830
 HEAP32[$5 + 8 >> 2] = $0; //@line 9832
 HEAP32[$8 >> 2] = 924; //@line 9833
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9834
 $9 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3_($7, $5, $1, $2, $3, $4) | 0; //@line 9835
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 299; //@line 9838
  HEAP32[$AsyncCtx3 + 4 >> 2] = $8; //@line 9840
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 9842
  sp = STACKTOP; //@line 9843
  STACKTOP = sp; //@line 9844
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 9846
 $12 = HEAP32[$8 >> 2] | 0; //@line 9847
 do {
  if ($12 | 0) {
   $15 = HEAP32[$12 + 8 >> 2] | 0; //@line 9852
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 9853
   FUNCTION_TABLE_vi[$15 & 1023]($5); //@line 9854
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 300; //@line 9857
    HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 9859
    HEAP32[$AsyncCtx + 8 >> 2] = $9; //@line 9861
    sp = STACKTOP; //@line 9862
    STACKTOP = sp; //@line 9863
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 9865
    break;
   }
  }
 } while (0);
 if ($9 | 0) {
  STACKTOP = sp; //@line 9872
  return;
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9874
 _mbed_assert_internal(13588, 13597, 141); //@line 9875
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 301; //@line 9878
  sp = STACKTOP; //@line 9879
  STACKTOP = sp; //@line 9880
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 9882
 STACKTOP = sp; //@line 9883
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_226($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13822
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13824
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13826
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13828
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13830
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13832
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13834
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13836
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13838
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13840
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13842
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 13844
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 13846
 $25 = $4 + 1088 | 0; //@line 13847
 HEAP32[$25 >> 2] = 0; //@line 13848
 HEAP32[$25 + 4 >> 2] = 0; //@line 13848
 HEAP32[$25 + 8 >> 2] = 0; //@line 13848
 HEAP32[$25 + 12 >> 2] = 0; //@line 13848
 HEAP8[$4 + 1104 >> 0] = 1; //@line 13850
 HEAP32[$2 >> 2] = 684; //@line 13851
 $27 = $4 + 1112 | 0; //@line 13852
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(52) | 0; //@line 13853
 __ZN4mbed10TimerEventC2Ev($27); //@line 13854
 if (!___async) {
  ___async_unwind = 0; //@line 13857
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 97; //@line 13859
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $27; //@line 13861
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 13863
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 13865
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 13867
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 13869
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 13871
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $14; //@line 13873
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $16; //@line 13875
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $18; //@line 13877
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $20; //@line 13879
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $22; //@line 13881
 HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $24; //@line 13883
 sp = STACKTOP; //@line 13884
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_225($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13752
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13754
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13756
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13758
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13760
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13762
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13764
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13766
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13768
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13770
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13772
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 13774
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 13776
 $25 = $4 + 1152 | 0; //@line 13777
 HEAP32[$25 >> 2] = 0; //@line 13778
 HEAP32[$25 + 4 >> 2] = 0; //@line 13778
 HEAP32[$25 + 8 >> 2] = 0; //@line 13778
 HEAP32[$25 + 12 >> 2] = 0; //@line 13778
 HEAP8[$4 + 1168 >> 0] = 1; //@line 13780
 HEAP32[$2 >> 2] = 684; //@line 13781
 $27 = $4 + 1176 | 0; //@line 13782
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(52) | 0; //@line 13783
 __ZN4mbed10TimerEventC2Ev($27); //@line 13784
 if (!___async) {
  ___async_unwind = 0; //@line 13787
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 98; //@line 13789
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $27; //@line 13791
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 13793
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 13795
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 13797
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 13799
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 13801
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 13803
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 13805
 HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 13807
 HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 13809
 HEAP32[$ReallocAsyncCtx2 + 44 >> 2] = $22; //@line 13811
 HEAP32[$ReallocAsyncCtx2 + 48 >> 2] = $24; //@line 13813
 sp = STACKTOP; //@line 13814
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_57($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 21645
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21647
 $4 = HEAP32[$2 + 44 >> 2] | 0; //@line 21649
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 21654
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 21655
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 32 | 0); //@line 21656
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 267; //@line 21659
   $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 21660
   HEAP32[$9 >> 2] = $2; //@line 21661
   sp = STACKTOP; //@line 21662
   return;
  }
  ___async_unwind = 0; //@line 21665
  HEAP32[$ReallocAsyncCtx5 >> 2] = 267; //@line 21666
  $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 21667
  HEAP32[$9 >> 2] = $2; //@line 21668
  sp = STACKTOP; //@line 21669
  return;
 }
 $11 = HEAP32[$2 + 28 >> 2] | 0; //@line 21673
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 21678
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 21679
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 16 | 0); //@line 21680
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 268; //@line 21683
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 21684
   HEAP32[$16 >> 2] = $2; //@line 21685
   sp = STACKTOP; //@line 21686
   return;
  }
  ___async_unwind = 0; //@line 21689
  HEAP32[$ReallocAsyncCtx6 >> 2] = 268; //@line 21690
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 21691
  HEAP32[$16 >> 2] = $2; //@line 21692
  sp = STACKTOP; //@line 21693
  return;
 }
 $18 = HEAP32[$2 + 12 >> 2] | 0; //@line 21697
 if (!$18) {
  return;
 }
 $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 21703
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 21704
 FUNCTION_TABLE_vi[$21 & 1023]($2); //@line 21705
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 269; //@line 21708
  sp = STACKTOP; //@line 21709
  return;
 }
 ___async_unwind = 0; //@line 21712
 HEAP32[$ReallocAsyncCtx7 >> 2] = 269; //@line 21713
 sp = STACKTOP; //@line 21714
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_224($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13682
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13684
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13686
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13688
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13690
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13692
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13694
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13696
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13698
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13700
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13702
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 13704
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 13706
 $25 = $4 + 1216 | 0; //@line 13707
 HEAP32[$25 >> 2] = 0; //@line 13708
 HEAP32[$25 + 4 >> 2] = 0; //@line 13708
 HEAP32[$25 + 8 >> 2] = 0; //@line 13708
 HEAP32[$25 + 12 >> 2] = 0; //@line 13708
 HEAP8[$4 + 1232 >> 0] = 1; //@line 13710
 HEAP32[$2 >> 2] = 684; //@line 13711
 $27 = $4 + 1240 | 0; //@line 13712
 $ReallocAsyncCtx = _emscripten_realloc_async_context(52) | 0; //@line 13713
 __ZN4mbed10TimerEventC2Ev($27); //@line 13714
 if (!___async) {
  ___async_unwind = 0; //@line 13717
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 99; //@line 13719
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $27; //@line 13721
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 13723
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 13725
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 13727
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 13729
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 13731
 HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 13733
 HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 13735
 HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 13737
 HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 13739
 HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 13741
 HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 13743
 sp = STACKTOP; //@line 13744
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 27896
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27898
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27900
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27902
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27904
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27906
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27908
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27910
 HEAP8[$2 + 1097 >> 0] = HEAP8[___async_retval >> 0] | 0; //@line 27914
 HEAP8[$4 >> 0] = 0; //@line 27915
 HEAP8[$6 >> 0] = HEAP8[$2 + 1156 >> 0] << 7; //@line 27919
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 27920
 $20 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($2, $8, $10, 0, 0, 0) | 0; //@line 27921
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 397; //@line 27924
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 27925
  HEAP32[$21 >> 2] = $2; //@line 27926
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 27927
  HEAP32[$22 >> 2] = $12; //@line 27928
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 27929
  HEAP32[$23 >> 2] = $14; //@line 27930
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 27931
  HEAP32[$24 >> 2] = $6; //@line 27932
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 27933
  HEAP32[$25 >> 2] = $4; //@line 27934
  sp = STACKTOP; //@line 27935
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 27939
 ___async_unwind = 0; //@line 27940
 HEAP32[$ReallocAsyncCtx2 >> 2] = 397; //@line 27941
 $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 27942
 HEAP32[$21 >> 2] = $2; //@line 27943
 $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 27944
 HEAP32[$22 >> 2] = $12; //@line 27945
 $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 27946
 HEAP32[$23 >> 2] = $14; //@line 27947
 $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 27948
 HEAP32[$24 >> 2] = $6; //@line 27949
 $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 27950
 HEAP32[$25 >> 2] = $4; //@line 27951
 sp = STACKTOP; //@line 27952
 return;
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb_42($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20333
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20335
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 20337
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20339
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20341
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20343
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 20346
  $11 = _mbedtls_cipher_cmac_starts(22460, $2, 128) | 0; //@line 20347
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 502; //@line 20350
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 20351
   HEAP16[$12 >> 1] = $4; //@line 20352
   $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 20353
   HEAP32[$13 >> 2] = $6; //@line 20354
   $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 20355
   HEAP32[$14 >> 2] = $8; //@line 20356
   sp = STACKTOP; //@line 20357
   return;
  }
  HEAP32[___async_retval >> 2] = $11; //@line 20361
  ___async_unwind = 0; //@line 20362
  HEAP32[$ReallocAsyncCtx3 >> 2] = 502; //@line 20363
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 20364
  HEAP16[$12 >> 1] = $4; //@line 20365
  $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 20366
  HEAP32[$13 >> 2] = $6; //@line 20367
  $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 20368
  HEAP32[$14 >> 2] = $8; //@line 20369
  sp = STACKTOP; //@line 20370
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 20373
  _mbedtls_cipher_free(22460); //@line 20374
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 505; //@line 20377
   $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 20378
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 20379
   sp = STACKTOP; //@line 20380
   return;
  }
  ___async_unwind = 0; //@line 20383
  HEAP32[$ReallocAsyncCtx5 >> 2] = 505; //@line 20384
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 20385
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 20386
  sp = STACKTOP; //@line 20387
  return;
 }
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_15($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 18242
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18244
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18246
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18248
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18250
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18252
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 18255
  $11 = _mbedtls_cipher_cmac_starts(22460, $2, 128) | 0; //@line 18256
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 496; //@line 18259
   $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 18260
   HEAP32[$12 >> 2] = $6; //@line 18261
   $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 18262
   HEAP32[$13 >> 2] = $8; //@line 18263
   $14 = $ReallocAsyncCtx4 + 12 | 0; //@line 18264
   HEAP32[$14 >> 2] = $4; //@line 18265
   sp = STACKTOP; //@line 18266
   return;
  }
  HEAP32[___async_retval >> 2] = $11; //@line 18270
  ___async_unwind = 0; //@line 18271
  HEAP32[$ReallocAsyncCtx4 >> 2] = 496; //@line 18272
  $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 18273
  HEAP32[$12 >> 2] = $6; //@line 18274
  $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 18275
  HEAP32[$13 >> 2] = $8; //@line 18276
  $14 = $ReallocAsyncCtx4 + 12 | 0; //@line 18277
  HEAP32[$14 >> 2] = $4; //@line 18278
  sp = STACKTOP; //@line 18279
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 18282
  _mbedtls_cipher_free(22460); //@line 18283
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 500; //@line 18286
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 18287
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 18288
   sp = STACKTOP; //@line 18289
   return;
  }
  ___async_unwind = 0; //@line 18292
  HEAP32[$ReallocAsyncCtx6 >> 2] = 500; //@line 18293
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 18294
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 18295
  sp = STACKTOP; //@line 18296
  return;
 }
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_312($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21001
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21005
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21007
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21009
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21011
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21013
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21015
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21017
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21019
 if ((HEAP16[$0 + 4 >> 1] | 0) < -1) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 21022
  $20 = __ZN4mbed5Timer7read_msEv($4) | 0; //@line 21023
  if (!___async) {
   HEAP32[___async_retval >> 2] = $20; //@line 21027
   ___async_unwind = 0; //@line 21028
  }
  HEAP32[$ReallocAsyncCtx6 >> 2] = 63; //@line 21030
  HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $6; //@line 21032
  HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $16; //@line 21034
  HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $18; //@line 21036
  HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $12; //@line 21038
  HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $4; //@line 21040
  HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $14; //@line 21042
  sp = STACKTOP; //@line 21043
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 21046
  $28 = __ZN4mbed5Timer7read_msEv($4) | 0; //@line 21047
  if (!___async) {
   HEAP32[___async_retval >> 2] = $28; //@line 21051
   ___async_unwind = 0; //@line 21052
  }
  HEAP32[$ReallocAsyncCtx5 >> 2] = 64; //@line 21054
  HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $6; //@line 21056
  HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $8; //@line 21058
  HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $10; //@line 21060
  HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $12; //@line 21062
  HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $4; //@line 21064
  HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $14; //@line 21066
  sp = STACKTOP; //@line 21067
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_150($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 31071
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31075
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31077
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31079
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31081
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31083
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31085
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31087
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 31090
 $18 = $4 + 16 | 0; //@line 31091
 HEAP32[$18 >> 2] = HEAP32[$6 >> 2]; //@line 31092
 HEAP32[$18 + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 31092
 HEAP8[$18 + 8 >> 0] = HEAP8[$6 + 8 >> 0] | 0; //@line 31092
 _equeue_event_dtor($4, 343); //@line 31093
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 31094
 $19 = _equeue_post($8, 344, $4) | 0; //@line 31095
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 345; //@line 31098
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 31099
  HEAP32[$20 >> 2] = $10; //@line 31100
  $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 31101
  HEAP32[$21 >> 2] = $12; //@line 31102
  $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 31103
  HEAP32[$22 >> 2] = $14; //@line 31104
  $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 31105
  HEAP32[$23 >> 2] = $16; //@line 31106
  sp = STACKTOP; //@line 31107
  return;
 }
 HEAP32[___async_retval >> 2] = $19; //@line 31111
 ___async_unwind = 0; //@line 31112
 HEAP32[$ReallocAsyncCtx6 >> 2] = 345; //@line 31113
 $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 31114
 HEAP32[$20 >> 2] = $10; //@line 31115
 $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 31116
 HEAP32[$21 >> 2] = $12; //@line 31117
 $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 31118
 HEAP32[$22 >> 2] = $14; //@line 31119
 $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 31120
 HEAP32[$23 >> 2] = $16; //@line 31121
 sp = STACKTOP; //@line 31122
 return;
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_14($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 18182
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18184
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18186
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18188
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18190
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 18193
  $9 = _mbedtls_cipher_cmac_update(22460, 14217, 16) | 0; //@line 18194
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 497; //@line 18197
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 18198
   HEAP32[$10 >> 2] = $2; //@line 18199
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 18200
   HEAP32[$11 >> 2] = $4; //@line 18201
   $12 = $ReallocAsyncCtx2 + 12 | 0; //@line 18202
   HEAP32[$12 >> 2] = $6; //@line 18203
   sp = STACKTOP; //@line 18204
   return;
  }
  HEAP32[___async_retval >> 2] = $9; //@line 18208
  ___async_unwind = 0; //@line 18209
  HEAP32[$ReallocAsyncCtx2 >> 2] = 497; //@line 18210
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 18211
  HEAP32[$10 >> 2] = $2; //@line 18212
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 18213
  HEAP32[$11 >> 2] = $4; //@line 18214
  $12 = $ReallocAsyncCtx2 + 12 | 0; //@line 18215
  HEAP32[$12 >> 2] = $6; //@line 18216
  sp = STACKTOP; //@line 18217
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 18220
  _mbedtls_cipher_free(22460); //@line 18221
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 500; //@line 18224
   $14 = $ReallocAsyncCtx6 + 4 | 0; //@line 18225
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 18226
   sp = STACKTOP; //@line 18227
   return;
  }
  ___async_unwind = 0; //@line 18230
  HEAP32[$ReallocAsyncCtx6 >> 2] = 500; //@line 18231
  $14 = $ReallocAsyncCtx6 + 4 | 0; //@line 18232
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 18233
  sp = STACKTOP; //@line 18234
  return;
 }
}
function ___strchrnul($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $13 = 0, $17 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $31 = 0, $38 = 0, $39 = 0, $7 = 0;
 $2 = $1 & 255; //@line 11559
 L1 : do {
  if (!$2) {
   $$0 = $0 + (_strlen($0) | 0) | 0; //@line 11565
  } else {
   if (!($0 & 3)) {
    $$030$lcssa = $0; //@line 11571
   } else {
    $7 = $1 & 255; //@line 11573
    $$03039 = $0; //@line 11574
    while (1) {
     $10 = HEAP8[$$03039 >> 0] | 0; //@line 11576
     if ($10 << 24 >> 24 == 0 ? 1 : $10 << 24 >> 24 == $7 << 24 >> 24) {
      $$0 = $$03039; //@line 11581
      break L1;
     }
     $13 = $$03039 + 1 | 0; //@line 11584
     if (!($13 & 3)) {
      $$030$lcssa = $13; //@line 11589
      break;
     } else {
      $$03039 = $13; //@line 11592
     }
    }
   }
   $17 = Math_imul($2, 16843009) | 0; //@line 11596
   $18 = HEAP32[$$030$lcssa >> 2] | 0; //@line 11597
   L10 : do {
    if (!(($18 & -2139062144 ^ -2139062144) & $18 + -16843009)) {
     $$02936 = $$030$lcssa; //@line 11605
     $25 = $18; //@line 11605
     while (1) {
      $24 = $25 ^ $17; //@line 11607
      if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
       $$029$lcssa = $$02936; //@line 11614
       break L10;
      }
      $31 = $$02936 + 4 | 0; //@line 11617
      $25 = HEAP32[$31 >> 2] | 0; //@line 11618
      if (($25 & -2139062144 ^ -2139062144) & $25 + -16843009 | 0) {
       $$029$lcssa = $31; //@line 11627
       break;
      } else {
       $$02936 = $31; //@line 11625
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa; //@line 11632
    }
   } while (0);
   $38 = $1 & 255; //@line 11635
   $$1 = $$029$lcssa; //@line 11636
   while (1) {
    $39 = HEAP8[$$1 >> 0] | 0; //@line 11638
    if ($39 << 24 >> 24 == 0 ? 1 : $39 << 24 >> 24 == $38 << 24 >> 24) {
     $$0 = $$1; //@line 11644
     break;
    } else {
     $$1 = $$1 + 1 | 0; //@line 11647
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 11652
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_352($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 28726
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28732
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28734
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28736
 _mbed_tracef(16, 12332, 12664, HEAP32[$0 + 4 >> 2] | 0); //@line 28737
 HEAP8[$6 + 1932 >> 0] = 1; //@line 28739
 $12 = $6 + 1892 | 0; //@line 28740
 $13 = HEAP32[$12 >> 2] | 0; //@line 28741
 if (!$13) {
  HEAP32[___async_retval >> 2] = 0; //@line 28745
  return;
 }
 $17 = HEAP32[$6 + 2288 >> 2] | 0; //@line 28750
 $19 = HEAP32[$13 + 4 >> 2] | 0; //@line 28752
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 28753
 FUNCTION_TABLE_vii[$19 & 31]($10, $6 + 1880 | 0); //@line 28754
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 198; //@line 28757
  $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 28758
  HEAP32[$20 >> 2] = $12; //@line 28759
  $21 = $ReallocAsyncCtx5 + 8 | 0; //@line 28760
  HEAP32[$21 >> 2] = $10; //@line 28761
  $22 = $ReallocAsyncCtx5 + 12 | 0; //@line 28762
  HEAP32[$22 >> 2] = $17; //@line 28763
  $23 = $ReallocAsyncCtx5 + 16 | 0; //@line 28764
  HEAP32[$23 >> 2] = $10; //@line 28765
  $24 = $ReallocAsyncCtx5 + 20 | 0; //@line 28766
  HEAP32[$24 >> 2] = $8; //@line 28767
  sp = STACKTOP; //@line 28768
  return;
 }
 ___async_unwind = 0; //@line 28771
 HEAP32[$ReallocAsyncCtx5 >> 2] = 198; //@line 28772
 $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 28773
 HEAP32[$20 >> 2] = $12; //@line 28774
 $21 = $ReallocAsyncCtx5 + 8 | 0; //@line 28775
 HEAP32[$21 >> 2] = $10; //@line 28776
 $22 = $ReallocAsyncCtx5 + 12 | 0; //@line 28777
 HEAP32[$22 >> 2] = $17; //@line 28778
 $23 = $ReallocAsyncCtx5 + 16 | 0; //@line 28779
 HEAP32[$23 >> 2] = $10; //@line 28780
 $24 = $ReallocAsyncCtx5 + 20 | 0; //@line 28781
 HEAP32[$24 >> 2] = $8; //@line 28782
 sp = STACKTOP; //@line 28783
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 25119
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25121
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25123
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25125
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25127
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25129
 HEAP8[$2 + 1097 >> 0] = HEAP8[___async_retval >> 0] | 0; //@line 25133
 HEAP8[$4 >> 0] = 0; //@line 25134
 HEAP8[$6 >> 0] = HEAP8[$2 + 1156 >> 0] << 7; //@line 25138
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 25139
 $16 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($2, $4, $6, 0, 0, 0) | 0; //@line 25140
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 455; //@line 25143
  $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 25144
  HEAP32[$17 >> 2] = $2; //@line 25145
  $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 25146
  HEAP32[$18 >> 2] = $8; //@line 25147
  $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 25148
  HEAP32[$19 >> 2] = $6; //@line 25149
  $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 25150
  HEAP32[$20 >> 2] = $4; //@line 25151
  $21 = $ReallocAsyncCtx2 + 20 | 0; //@line 25152
  HEAP32[$21 >> 2] = $10; //@line 25153
  sp = STACKTOP; //@line 25154
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 25158
 ___async_unwind = 0; //@line 25159
 HEAP32[$ReallocAsyncCtx2 >> 2] = 455; //@line 25160
 $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 25161
 HEAP32[$17 >> 2] = $2; //@line 25162
 $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 25163
 HEAP32[$18 >> 2] = $8; //@line 25164
 $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 25165
 HEAP32[$19 >> 2] = $6; //@line 25166
 $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 25167
 HEAP32[$20 >> 2] = $4; //@line 25168
 $21 = $ReallocAsyncCtx2 + 20 | 0; //@line 25169
 HEAP32[$21 >> 2] = $10; //@line 25170
 sp = STACKTOP; //@line 25171
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_18($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 18431
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18433
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18435
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18437
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18439
 $9 = HEAP32[$2 >> 2] | 0; //@line 18440
 $11 = $6 + 12 | 0; //@line 18442
 HEAP32[$6 >> 2] = 438; //@line 18443
 HEAP32[$6 + 4 >> 2] = 0; //@line 18445
 HEAP32[$6 + 8 >> 2] = $4; //@line 18447
 HEAP32[$11 >> 2] = 912; //@line 18448
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(24) | 0; //@line 18449
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($9, $4 + 1056 | 0, $6); //@line 18450
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 439; //@line 18453
  $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 18454
  HEAP32[$12 >> 2] = $11; //@line 18455
  $13 = $ReallocAsyncCtx7 + 8 | 0; //@line 18456
  HEAP32[$13 >> 2] = $2; //@line 18457
  $14 = $ReallocAsyncCtx7 + 12 | 0; //@line 18458
  HEAP32[$14 >> 2] = $4; //@line 18459
  $15 = $ReallocAsyncCtx7 + 16 | 0; //@line 18460
  HEAP32[$15 >> 2] = $8; //@line 18461
  $16 = $ReallocAsyncCtx7 + 20 | 0; //@line 18462
  HEAP32[$16 >> 2] = $6; //@line 18463
  sp = STACKTOP; //@line 18464
  return;
 }
 ___async_unwind = 0; //@line 18467
 HEAP32[$ReallocAsyncCtx7 >> 2] = 439; //@line 18468
 $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 18469
 HEAP32[$12 >> 2] = $11; //@line 18470
 $13 = $ReallocAsyncCtx7 + 8 | 0; //@line 18471
 HEAP32[$13 >> 2] = $2; //@line 18472
 $14 = $ReallocAsyncCtx7 + 12 | 0; //@line 18473
 HEAP32[$14 >> 2] = $4; //@line 18474
 $15 = $ReallocAsyncCtx7 + 16 | 0; //@line 18475
 HEAP32[$15 >> 2] = $8; //@line 18476
 $16 = $ReallocAsyncCtx7 + 20 | 0; //@line 18477
 HEAP32[$16 >> 2] = $6; //@line 18478
 sp = STACKTOP; //@line 18479
 return;
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_45($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 20444
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20446
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20448
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20450
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20452
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20454
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20456
 $13 = HEAP32[$2 >> 2] | 0; //@line 20457
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] | 0; //@line 20460
 $19 = (__ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0) + 10 | 0; //@line 20463
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 20464
 FUNCTION_TABLE_iiii[$16 & 15]($13, $6, $19) | 0; //@line 20465
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 422; //@line 20468
  $20 = $ReallocAsyncCtx + 4 | 0; //@line 20469
  HEAP32[$20 >> 2] = $8; //@line 20470
  $21 = $ReallocAsyncCtx + 8 | 0; //@line 20471
  HEAP32[$21 >> 2] = $4; //@line 20472
  $22 = $ReallocAsyncCtx + 12 | 0; //@line 20473
  HEAP32[$22 >> 2] = $10; //@line 20474
  $23 = $ReallocAsyncCtx + 16 | 0; //@line 20475
  HEAP32[$23 >> 2] = $12; //@line 20476
  $24 = $ReallocAsyncCtx + 20 | 0; //@line 20477
  HEAP32[$24 >> 2] = $2; //@line 20478
  sp = STACKTOP; //@line 20479
  return;
 }
 ___async_unwind = 0; //@line 20482
 HEAP32[$ReallocAsyncCtx >> 2] = 422; //@line 20483
 $20 = $ReallocAsyncCtx + 4 | 0; //@line 20484
 HEAP32[$20 >> 2] = $8; //@line 20485
 $21 = $ReallocAsyncCtx + 8 | 0; //@line 20486
 HEAP32[$21 >> 2] = $4; //@line 20487
 $22 = $ReallocAsyncCtx + 12 | 0; //@line 20488
 HEAP32[$22 >> 2] = $10; //@line 20489
 $23 = $ReallocAsyncCtx + 16 | 0; //@line 20490
 HEAP32[$23 >> 2] = $12; //@line 20491
 $24 = $ReallocAsyncCtx + 20 | 0; //@line 20492
 HEAP32[$24 >> 2] = $2; //@line 20493
 sp = STACKTOP; //@line 20494
 return;
}
function __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$01315 = 0, $$016 = 0, $$1 = 0, $$114 = 0, $$sink = 0, $2 = 0, $23 = 0, $26 = 0, $27 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = HEAP8[$0 + 2 >> 0] | 0; //@line 18203
 if (!($2 << 24 >> 24)) {
  $$0$lcssa = 0; //@line 18206
  $26 = $$0$lcssa << 24 >> 24 != 0; //@line 18207
  $$sink = $26 & 1; //@line 18208
  HEAP8[$0 >> 0] = $$sink; //@line 18209
  $27 = $0 + 3 | 0; //@line 18210
  HEAP8[$27 >> 0] = $$0$lcssa; //@line 18211
  return;
 } else {
  $$01315 = 0; //@line 18214
  $$016 = 0; //@line 18214
  $5 = 0; //@line 18214
 }
 while (1) {
  $6 = HEAP8[$0 + 4 + $5 >> 0] | 0; //@line 18218
  switch ($6 << 24 >> 24) {
  case 5:
  case 10:
   {
    $7 = $$01315 + 1 << 24 >> 24; //@line 18221
    HEAP8[($$016 & 255) + ($0 + 132) >> 0] = $6; //@line 18225
    HEAP8[($$016 + 1 & 255) + ($0 + 132) >> 0] = HEAP8[($7 & 255) + ($0 + 4) >> 0] | 0; //@line 18232
    $$1 = $$016 + 2 << 24 >> 24; //@line 18233
    $$114 = $7; //@line 18233
    break;
   }
  case 8:
   {
    HEAP8[($$016 & 255) + ($0 + 132) >> 0] = 8; //@line 18240
    $$1 = $$016 + 1 << 24 >> 24; //@line 18241
    $$114 = $$01315; //@line 18241
    break;
   }
  case 6:
   {
    $$1 = $$016; //@line 18247
    $$114 = $5 + 2 & 255; //@line 18247
    break;
   }
  case 7:
  case 3:
   {
    $$1 = $$016; //@line 18252
    $$114 = $$01315 + 1 << 24 >> 24; //@line 18252
    break;
   }
  default:
   {
    $$1 = $$016; //@line 18256
    $$114 = $$01315; //@line 18256
   }
  }
  $23 = $$114 + 1 << 24 >> 24; //@line 18259
  if (($23 & 255) < ($2 & 255)) {
   $$01315 = $23; //@line 18263
   $$016 = $$1; //@line 18263
   $5 = $23 & 255; //@line 18263
  } else {
   $$0$lcssa = $$1; //@line 18265
   break;
  }
 }
 $26 = $$0$lcssa << 24 >> 24 != 0; //@line 18269
 $$sink = $26 & 1; //@line 18270
 HEAP8[$0 >> 0] = $$sink; //@line 18271
 $27 = $0 + 3 | 0; //@line 18272
 HEAP8[$27 >> 0] = $$0$lcssa; //@line 18273
 return;
}
function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $10 = 0, $12 = 0, $14 = 0, $22 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $9 = 0, label = 0;
 $3 = $2 + 16 | 0; //@line 11301
 $4 = HEAP32[$3 >> 2] | 0; //@line 11302
 if (!$4) {
  if (!(___towrite($2) | 0)) {
   $12 = HEAP32[$3 >> 2] | 0; //@line 11309
   label = 5; //@line 11310
  } else {
   $$1 = 0; //@line 11312
  }
 } else {
  $12 = $4; //@line 11316
  label = 5; //@line 11317
 }
 L5 : do {
  if ((label | 0) == 5) {
   $9 = $2 + 20 | 0; //@line 11321
   $10 = HEAP32[$9 >> 2] | 0; //@line 11322
   $14 = $10; //@line 11325
   if (($12 - $10 | 0) >>> 0 < $1 >>> 0) {
    $$1 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 15]($2, $0, $1) | 0; //@line 11330
    break;
   }
   L10 : do {
    if ((HEAP8[$2 + 75 >> 0] | 0) > -1) {
     $$038 = $1; //@line 11338
     while (1) {
      if (!$$038) {
       $$139 = 0; //@line 11342
       $$141 = $0; //@line 11342
       $$143 = $1; //@line 11342
       $31 = $14; //@line 11342
       break L10;
      }
      $22 = $$038 + -1 | 0; //@line 11345
      if ((HEAP8[$0 + $22 >> 0] | 0) == 10) {
       break;
      } else {
       $$038 = $22; //@line 11352
      }
     }
     $28 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 15]($2, $0, $$038) | 0; //@line 11357
     if ($28 >>> 0 < $$038 >>> 0) {
      $$1 = $28; //@line 11360
      break L5;
     }
     $$139 = $$038; //@line 11366
     $$141 = $0 + $$038 | 0; //@line 11366
     $$143 = $1 - $$038 | 0; //@line 11366
     $31 = HEAP32[$9 >> 2] | 0; //@line 11366
    } else {
     $$139 = 0; //@line 11368
     $$141 = $0; //@line 11368
     $$143 = $1; //@line 11368
     $31 = $14; //@line 11368
    }
   } while (0);
   _memcpy($31 | 0, $$141 | 0, $$143 | 0) | 0; //@line 11371
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $$143; //@line 11374
   $$1 = $$139 + $$143 | 0; //@line 11376
  }
 } while (0);
 return $$1 | 0; //@line 11379
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_61($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $27 = 0, $30 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 21945
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21947
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21951
 $8 = $0 + 16 | 0; //@line 21953
 $10 = HEAP32[$8 >> 2] | 0; //@line 21955
 $13 = HEAP32[$8 + 4 >> 2] | 0; //@line 21958
 $15 = HEAP32[$0 + 24 >> 2] | 0; //@line 21960
 $17 = HEAP32[$0 + 28 >> 2] | 0; //@line 21962
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 21964
 __ZN4mbed6Ticker5setupEy($6, $10, $13); //@line 21965
 $18 = HEAP32[$2 >> 2] | 0; //@line 21966
 if ($18 | 0) {
  $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 21970
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 21971
  FUNCTION_TABLE_vi[$21 & 1023]($17); //@line 21972
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 87; //@line 21975
   $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 21976
   HEAP32[$22 >> 2] = $15; //@line 21977
   sp = STACKTOP; //@line 21978
   return;
  }
  ___async_unwind = 0; //@line 21981
  HEAP32[$ReallocAsyncCtx3 >> 2] = 87; //@line 21982
  $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 21983
  HEAP32[$22 >> 2] = $15; //@line 21984
  sp = STACKTOP; //@line 21985
  return;
 }
 $24 = HEAP32[$15 + 788 >> 2] | 0; //@line 21989
 if (!$24) {
  return;
 }
 $27 = HEAP32[$24 + 60 >> 2] | 0; //@line 21995
 if (!$27) {
  return;
 }
 $30 = HEAP32[$27 >> 2] | 0; //@line 22001
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 22002
 FUNCTION_TABLE_vi[$30 & 1023]($24 + 48 | 0); //@line 22003
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 88; //@line 22006
  sp = STACKTOP; //@line 22007
  return;
 }
 ___async_unwind = 0; //@line 22010
 HEAP32[$ReallocAsyncCtx4 >> 2] = 88; //@line 22011
 sp = STACKTOP; //@line 22012
 return;
}
function _mbedtls_cipher_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $22 = 0, $24 = 0, $25 = 0, $30 = 0, $32 = 0, $33 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 3050
 if (!$0) {
  $$0 = -24832; //@line 3053
  return $$0 | 0; //@line 3054
 }
 $5 = HEAP32[$0 >> 2] | 0; //@line 3056
 if (!$5) {
  $$0 = -24832; //@line 3059
  return $$0 | 0; //@line 3060
 }
 if (!(HEAP32[$5 + 20 >> 2] & 2)) {
  if ((HEAP32[$5 + 8 >> 2] | 0) != ($2 | 0)) {
   $$0 = -24832; //@line 3071
   return $$0 | 0; //@line 3072
  }
 }
 HEAP32[$0 + 4 >> 2] = $2; //@line 3076
 HEAP32[$0 + 8 >> 2] = $3; //@line 3078
 L11 : do {
  if (($3 | 0) != 1) {
   switch (HEAP32[$5 + 4 >> 2] | 0) {
   case 5:
   case 3:
    {
     break L11;
     break;
    }
   default:
    {}
   }
   if ($3 | 0) {
    $$0 = -24832; //@line 3094
    return $$0 | 0; //@line 3095
   }
   $30 = HEAP32[(HEAP32[$5 + 28 >> 2] | 0) + 16 >> 2] | 0; //@line 3100
   $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 3102
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3103
   $33 = FUNCTION_TABLE_iiii[$30 & 15]($32, $1, $2) | 0; //@line 3104
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 575; //@line 3107
    sp = STACKTOP; //@line 3108
    return 0; //@line 3109
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3111
   $$0 = $33; //@line 3112
   return $$0 | 0; //@line 3113
  }
 } while (0);
 $22 = HEAP32[(HEAP32[$5 + 28 >> 2] | 0) + 12 >> 2] | 0; //@line 3119
 $24 = HEAP32[$0 + 60 >> 2] | 0; //@line 3121
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3122
 $25 = FUNCTION_TABLE_iiii[$22 & 15]($24, $1, $2) | 0; //@line 3123
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 574; //@line 3126
  sp = STACKTOP; //@line 3127
  return 0; //@line 3128
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3130
 $$0 = $25; //@line 3131
 return $$0 | 0; //@line 3132
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_364($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx30 = 0, sp = 0;
 sp = STACKTOP; //@line 29425
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29429
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29431
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29433
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 29434
 if ($8 | 0) {
  $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 29438
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 29439
  FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 29440
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 186; //@line 29443
   $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 29444
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 29445
   $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 29446
   HEAP32[$13 >> 2] = $6; //@line 29447
   sp = STACKTOP; //@line 29448
   return;
  }
  ___async_unwind = 0; //@line 29451
  HEAP32[$ReallocAsyncCtx2 >> 2] = 186; //@line 29452
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 29453
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 29454
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 29455
  HEAP32[$13 >> 2] = $6; //@line 29456
  sp = STACKTOP; //@line 29457
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = -1011; //@line 29463
  return;
 }
 $ReallocAsyncCtx30 = _emscripten_realloc_async_context(8) | 0; //@line 29466
 _mbed_assert_internal(13588, 12372, 1135); //@line 29467
 if (___async) {
  HEAP32[$ReallocAsyncCtx30 >> 2] = 187; //@line 29470
  $15 = $ReallocAsyncCtx30 + 4 | 0; //@line 29471
  HEAP32[$15 >> 2] = $6; //@line 29472
  sp = STACKTOP; //@line 29473
  return;
 }
 ___async_unwind = 0; //@line 29476
 HEAP32[$ReallocAsyncCtx30 >> 2] = 187; //@line 29477
 $15 = $ReallocAsyncCtx30 + 4 | 0; //@line 29478
 HEAP32[$15 >> 2] = $6; //@line 29479
 sp = STACKTOP; //@line 29480
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $30 = 0, $34 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 10394
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10396
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10402
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10404
 $12 = HEAP8[$0 + 24 >> 0] & 1; //@line 10407
 $14 = HEAP8[$0 + 25 >> 0] & 1; //@line 10410
 $16 = HEAP8[$0 + 26 >> 0] | 0; //@line 10412
 $18 = HEAP8[$0 + 27 >> 0] | 0; //@line 10414
 $20 = HEAP32[$0 + 28 >> 2] | 0; //@line 10416
 $22 = HEAP32[$0 + 32 >> 2] | 0; //@line 10418
 $24 = HEAP32[$0 + 36 >> 2] | 0; //@line 10420
 $26 = HEAP32[$0 + 40 >> 2] | 0; //@line 10422
 $27 = HEAP32[$2 >> 2] | 0; //@line 10423
 $30 = HEAP32[(HEAP32[$27 >> 2] | 0) + 32 >> 2] | 0; //@line 10426
 $34 = HEAP32[(HEAP32[$0 + 12 >> 2] | 0) + ((HEAPU8[HEAP32[$0 + 8 >> 2] >> 0] | 0) * 12 | 0) >> 2] | 0; //@line 10430
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 10431
 FUNCTION_TABLE_vii[$30 & 31]($27, $34); //@line 10432
 if (!___async) {
  ___async_unwind = 0; //@line 10435
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 527; //@line 10437
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 10439
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 10441
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 10443
 HEAP8[$ReallocAsyncCtx2 + 16 >> 0] = $12 & 1; //@line 10446
 HEAP8[$ReallocAsyncCtx2 + 17 >> 0] = $14 & 1; //@line 10449
 HEAP8[$ReallocAsyncCtx2 + 18 >> 0] = $16; //@line 10451
 HEAP8[$ReallocAsyncCtx2 + 19 >> 0] = $18; //@line 10453
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $20; //@line 10455
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $22; //@line 10457
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $24; //@line 10459
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $26; //@line 10461
 sp = STACKTOP; //@line 10462
 return;
}
function _mbedtls_gcm_setkey__async_cb_232($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 14637
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14639
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14641
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14643
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14645
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14647
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 14651
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 14654
 dest = $2; //@line 14655
 stop = dest + 16 | 0; //@line 14655
 do {
  HEAP8[dest >> 0] = 0; //@line 14655
  dest = dest + 1 | 0; //@line 14655
 } while ((dest | 0) < (stop | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 14656
 $11 = _mbedtls_cipher_update($6, $2, 16, $2, $4) | 0; //@line 14657
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 593; //@line 14660
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 14661
  HEAP32[$12 >> 2] = $2; //@line 14662
  $13 = $ReallocAsyncCtx + 8 | 0; //@line 14663
  HEAP32[$13 >> 2] = $2; //@line 14664
  $14 = $ReallocAsyncCtx + 12 | 0; //@line 14665
  HEAP32[$14 >> 2] = $8; //@line 14666
  $15 = $ReallocAsyncCtx + 16 | 0; //@line 14667
  HEAP32[$15 >> 2] = $4; //@line 14668
  sp = STACKTOP; //@line 14669
  return;
 }
 HEAP32[___async_retval >> 2] = $11; //@line 14673
 ___async_unwind = 0; //@line 14674
 HEAP32[$ReallocAsyncCtx >> 2] = 593; //@line 14675
 $12 = $ReallocAsyncCtx + 4 | 0; //@line 14676
 HEAP32[$12 >> 2] = $2; //@line 14677
 $13 = $ReallocAsyncCtx + 8 | 0; //@line 14678
 HEAP32[$13 >> 2] = $2; //@line 14679
 $14 = $ReallocAsyncCtx + 12 | 0; //@line 14680
 HEAP32[$14 >> 2] = $8; //@line 14681
 $15 = $ReallocAsyncCtx + 16 | 0; //@line 14682
 HEAP32[$15 >> 2] = $4; //@line 14683
 sp = STACKTOP; //@line 14684
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_363($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx29 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 29363
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29367
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29369
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29371
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 29372
 if ($8 | 0) {
  $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 29376
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 29377
  FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 29378
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 191; //@line 29381
   $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 29382
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 29383
   $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 29384
   HEAP32[$13 >> 2] = $6; //@line 29385
   sp = STACKTOP; //@line 29386
   return;
  }
  ___async_unwind = 0; //@line 29389
  HEAP32[$ReallocAsyncCtx4 >> 2] = 191; //@line 29390
  $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 29391
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 29392
  $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 29393
  HEAP32[$13 >> 2] = $6; //@line 29394
  sp = STACKTOP; //@line 29395
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = 0; //@line 29401
  return;
 }
 $ReallocAsyncCtx29 = _emscripten_realloc_async_context(8) | 0; //@line 29404
 _mbed_assert_internal(13588, 12372, 1180); //@line 29405
 if (___async) {
  HEAP32[$ReallocAsyncCtx29 >> 2] = 192; //@line 29408
  $15 = $ReallocAsyncCtx29 + 4 | 0; //@line 29409
  HEAP32[$15 >> 2] = $6; //@line 29410
  sp = STACKTOP; //@line 29411
  return;
 }
 ___async_unwind = 0; //@line 29414
 HEAP32[$ReallocAsyncCtx29 >> 2] = 192; //@line 29415
 $15 = $ReallocAsyncCtx29 + 4 | 0; //@line 29416
 HEAP32[$15 >> 2] = $6; //@line 29417
 sp = STACKTOP; //@line 29418
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_362($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx28 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 29301
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29305
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29307
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29309
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 29310
 if ($8 | 0) {
  $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 29314
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 29315
  FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 29316
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 200; //@line 29319
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 29320
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 29321
   $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 29322
   HEAP32[$13 >> 2] = $6; //@line 29323
   sp = STACKTOP; //@line 29324
   return;
  }
  ___async_unwind = 0; //@line 29327
  HEAP32[$ReallocAsyncCtx6 >> 2] = 200; //@line 29328
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 29329
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 29330
  $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 29331
  HEAP32[$13 >> 2] = $6; //@line 29332
  sp = STACKTOP; //@line 29333
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = 0; //@line 29339
  return;
 }
 $ReallocAsyncCtx28 = _emscripten_realloc_async_context(8) | 0; //@line 29342
 _mbed_assert_internal(13588, 12372, 1217); //@line 29343
 if (___async) {
  HEAP32[$ReallocAsyncCtx28 >> 2] = 201; //@line 29346
  $15 = $ReallocAsyncCtx28 + 4 | 0; //@line 29347
  HEAP32[$15 >> 2] = $6; //@line 29348
  sp = STACKTOP; //@line 29349
  return;
 }
 ___async_unwind = 0; //@line 29352
 HEAP32[$ReallocAsyncCtx28 >> 2] = 201; //@line 29353
 $15 = $ReallocAsyncCtx28 + 4 | 0; //@line 29354
 HEAP32[$15 >> 2] = $6; //@line 29355
 sp = STACKTOP; //@line 29356
 return;
}
function __ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$031 = 0.0, $10 = 0.0, $45 = 0.0, $6 = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 828
 STACKTOP = STACKTOP + 16 | 0; //@line 829
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 829
 $vararg_buffer1 = sp + 8 | 0; //@line 830
 _mbed_tracef(16, 10944, 11119, sp); //@line 832
 switch ($1 | 0) {
 case 0:
  {
   $$0 = 1; //@line 835
   HEAP32[$vararg_buffer1 >> 2] = $$0; //@line 836
   _mbed_tracef(16, 10944, 11131, $vararg_buffer1); //@line 837
   STACKTOP = sp; //@line 838
   return $$0 | 0; //@line 838
  }
 case 1:
  {
   switch (HEAP32[$0 + 752 >> 2] | 0) {
   case 7:
    {
     $$031 = 125.0e3; //@line 846
     break;
    }
   case 8:
    {
     $$031 = 25.0e4; //@line 850
     break;
    }
   case 9:
    {
     $$031 = 5.0e5; //@line 854
     break;
    }
   default:
    {
     $$031 = 0.0; //@line 858
    }
   }
   $6 = HEAP32[$0 + 756 >> 2] | 0; //@line 862
   $10 = 1.0 / ($$031 / +(1 << $6 | 0)); //@line 866
   $45 = +Math_ceil(+(+(((($2 & 255) << 3) + 28 - ($6 << 2) + (HEAP8[$0 + 766 >> 0] << 4 & 255) + (HEAP8[$0 + 764 >> 0] | 0 ? -20 : 0) | 0) >>> 0) / +($6 - (HEAP8[$0 + 760 >> 0] | 0 ? 2 : 0) << 2 >>> 0))) * +((HEAPU8[$0 + 761 >> 0] | 0) + 4 | 0); //@line 902
   $$0 = ~~+Math_floor(+(((+(HEAPU16[$0 + 762 >> 1] | 0) + 4.25) * $10 + $10 * (($45 > 0.0 ? $45 : 0.0) + 8.0)) * 1.0e3 + .999)) >>> 0; //@line 912
   HEAP32[$vararg_buffer1 >> 2] = $$0; //@line 913
   _mbed_tracef(16, 10944, 11131, $vararg_buffer1); //@line 914
   STACKTOP = sp; //@line 915
   return $$0 | 0; //@line 915
  }
 default:
  {
   $$0 = 0; //@line 919
   HEAP32[$vararg_buffer1 >> 2] = $$0; //@line 920
   _mbed_tracef(16, 10944, 11131, $vararg_buffer1); //@line 921
   STACKTOP = sp; //@line 922
   return $$0 | 0; //@line 922
  }
 }
 return 0; //@line 925
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_66($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22236
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22240
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22242
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22244
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22246
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22248
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22250
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22252
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 22255
 HEAP32[$4 + 16 >> 2] = HEAP32[$6 >> 2]; //@line 22258
 _equeue_event_dtor($4, 215); //@line 22259
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 22260
 $20 = _equeue_post($8, 216, $4) | 0; //@line 22261
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 217; //@line 22264
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 22265
  HEAP32[$21 >> 2] = $10; //@line 22266
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 22267
  HEAP32[$22 >> 2] = $12; //@line 22268
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 22269
  HEAP32[$23 >> 2] = $14; //@line 22270
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 22271
  HEAP32[$24 >> 2] = $16; //@line 22272
  sp = STACKTOP; //@line 22273
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 22277
 ___async_unwind = 0; //@line 22278
 HEAP32[$ReallocAsyncCtx6 >> 2] = 217; //@line 22279
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 22280
 HEAP32[$21 >> 2] = $10; //@line 22281
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 22282
 HEAP32[$22 >> 2] = $12; //@line 22283
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 22284
 HEAP32[$23 >> 2] = $14; //@line 22285
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 22286
 HEAP32[$24 >> 2] = $16; //@line 22287
 sp = STACKTOP; //@line 22288
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_50($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 20920
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20924
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20926
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20928
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20930
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20932
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20934
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20936
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 20939
 HEAP16[$4 + 16 >> 1] = HEAP16[$6 >> 1] | 0; //@line 20942
 _equeue_event_dtor($4, 224); //@line 20943
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 20944
 $20 = _equeue_post($8, 225, $4) | 0; //@line 20945
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 226; //@line 20948
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 20949
  HEAP32[$21 >> 2] = $10; //@line 20950
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 20951
  HEAP32[$22 >> 2] = $12; //@line 20952
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 20953
  HEAP32[$23 >> 2] = $14; //@line 20954
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 20955
  HEAP32[$24 >> 2] = $16; //@line 20956
  sp = STACKTOP; //@line 20957
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 20961
 ___async_unwind = 0; //@line 20962
 HEAP32[$ReallocAsyncCtx6 >> 2] = 226; //@line 20963
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 20964
 HEAP32[$21 >> 2] = $10; //@line 20965
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 20966
 HEAP32[$22 >> 2] = $12; //@line 20967
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 20968
 HEAP32[$23 >> 2] = $14; //@line 20969
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 20970
 HEAP32[$24 >> 2] = $16; //@line 20971
 sp = STACKTOP; //@line 20972
 return;
}
function __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0$i$i = 0, $$sink$i = 0, $11 = 0, $14 = 0, $22 = 0, $28 = 0, $41 = 0, $44 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 24217
 $7 = HEAPU8[$0 + 24 >> 0] | 0; //@line 24220
 $8 = $0 + 25 | 0; //@line 24221
 $11 = (HEAPU8[$8 >> 0] | 0) + $7 | 0; //@line 24224
 $14 = $0 + 26 | 0; //@line 24227
 if ((HEAP8[$2 >> 0] | 0) == (HEAPU8[$14 >> 0] | 0)) {
  HEAP32[$4 >> 2] = 0; //@line 24232
  $$0 = 0; //@line 24233
  return $$0 | 0; //@line 24234
 }
 if ((HEAP32[$4 >> 2] | 0) >>> 0 < $7 >>> 0) {
  $$0 = 0; //@line 24239
  return $$0 | 0; //@line 24240
 }
 HEAP8[$3 >> 0] = HEAP8[$0 + 22 >> 0] | 0; //@line 24244
 $22 = HEAP32[$4 >> 2] | 0; //@line 24245
 if ($22 >>> 0 < $11 >>> 0) {
  $$0 = 1; //@line 24248
  return $$0 | 0; //@line 24249
 }
 if ((($22 >>> 0) % ((HEAPU8[$8 >> 0] | 0) >>> 0) | 0 | 0) != 1) {
  $$0 = 1; //@line 24256
  return $$0 | 0; //@line 24257
 }
 $28 = HEAP8[$2 >> 0] | 0; //@line 24259
 $$sink$i = HEAP8[((HEAP8[$0 + 132 >> 0] & 1) == 0 ? $14 : $0 + 35 | 0) >> 0] | 0; //@line 24266
 $$0$i$i = $$sink$i << 24 >> 24 == $28 << 24 >> 24 ? $$sink$i : ($28 & 255) + 255 & 255; //@line 24271
 HEAP8[$2 >> 0] = $$0$i$i; //@line 24272
 $41 = ($$0$i$i << 24 >> 24 | 0) != (HEAPU8[$14 >> 0] | 0); //@line 24276
 if ($41 | $1 ^ 1) {
  $$0 = $41; //@line 24280
  return $$0 | 0; //@line 24281
 }
 $44 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 24285
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 24286
 FUNCTION_TABLE_vi[$44 & 1023]($0); //@line 24287
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 558; //@line 24290
  sp = STACKTOP; //@line 24291
  return 0; //@line 24292
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 24294
 $$0 = 0; //@line 24295
 return $$0 | 0; //@line 24296
}
function __ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $19 = 0, $2 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP; //@line 8509
 STACKTOP = STACKTOP + 32 | 0; //@line 8510
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 8510
 $vararg_buffer3 = sp + 16 | 0; //@line 8511
 $2 = $0 + 1876 | 0; //@line 8514
 if (!(HEAP32[$2 >> 2] | 0)) {
  _mbed_tracef(2, 12332, 13282, sp); //@line 8518
  $$0 = -1012; //@line 8519
  STACKTOP = sp; //@line 8520
  return $$0 | 0; //@line 8520
 }
 _mbed_tracef(16, 12332, 13408, sp + 8 | 0); //@line 8522
 $6 = HEAP32[$1 + 8 >> 2] | 0; //@line 8524
 $8 = HEAP32[$1 + 12 >> 2] | 0; //@line 8526
 $10 = HEAP32[$1 + 16 >> 2] | 0; //@line 8528
 $11 = $0 + 1960 | 0; //@line 8529
 $12 = HEAP32[$11 >> 2] | 0; //@line 8530
 $13 = $0 + 1956 | 0; //@line 8531
 $14 = HEAP32[$13 >> 2] | 0; //@line 8532
 HEAP32[$vararg_buffer3 >> 2] = $14; //@line 8533
 HEAP32[$vararg_buffer3 + 4 >> 2] = $12; //@line 8535
 _mbed_tracef(16, 12332, 13423, $vararg_buffer3); //@line 8536
 HEAP8[$0 + 1936 >> 0] = 1; //@line 8538
 HEAP32[$11 >> 2] = $12; //@line 8539
 HEAP32[$13 >> 2] = $14; //@line 8540
 HEAP32[$0 + 1944 >> 2] = $6; //@line 8542
 HEAP32[$0 + 1948 >> 2] = $8; //@line 8544
 HEAP32[$0 + 1952 >> 2] = $10; //@line 8546
 HEAP32[$2 >> 2] = 3; //@line 8547
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8548
 $19 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 8549
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 258; //@line 8552
  sp = STACKTOP; //@line 8553
  STACKTOP = sp; //@line 8554
  return 0; //@line 8554
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8556
 $$0 = $19; //@line 8557
 STACKTOP = sp; //@line 8558
 return $$0 | 0; //@line 8558
}
function __ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $10 = 0, $12 = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 21193
 L1 : do {
  if (!(HEAP8[$0 + 16 >> 0] | 0)) {
   $$011 = 0; //@line 21199
  } else {
   $5 = HEAP32[$1 >> 2] | 0; //@line 21201
   if (!(HEAP32[$5 >> 2] | 0)) {
    $10 = HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] | 0; //@line 21207
    $12 = HEAP8[$1 + 4 >> 0] | 0; //@line 21209
    $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 21210
    $13 = FUNCTION_TABLE_iii[$10 & 31]($0, $12) | 0; //@line 21211
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 513; //@line 21214
     sp = STACKTOP; //@line 21215
     return 0; //@line 21216
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 21218
     return ($13 ? 3 : 0) | 0; //@line 21220
    }
   }
   $16 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 21225
   $18 = HEAP8[$1 + 4 >> 0] | 0; //@line 21227
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 21228
   $19 = FUNCTION_TABLE_iiii[$16 & 15]($0, $5, $18) | 0; //@line 21229
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 514; //@line 21232
    sp = STACKTOP; //@line 21233
    return 0; //@line 21234
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 21236
   switch ($19 | 0) {
   case 0:
    {
     $$011 = 3; //@line 21239
     break L1;
     break;
    }
   case -1004:
    {
     $$011 = 2; //@line 21244
     break L1;
     break;
    }
   case -1005:
    {
     $$011 = 1; //@line 21249
     break L1;
     break;
    }
   case -1006:
    {
     $$011 = 0; //@line 21254
     break L1;
     break;
    }
   default:
    {
     $$011 = 0; //@line 21259
     break L1;
    }
   }
  }
 } while (0);
 return $$011 | 0; //@line 21265
}
function _mbedtls_cipher_cmac_starts($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $13 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3576
 if (!$0) {
  $$0 = -24832; //@line 3579
  return $$0 | 0; //@line 3580
 }
 if (($1 | 0) == 0 | (HEAP32[$0 >> 2] | 0) == 0) {
  $$0 = -24832; //@line 3587
  return $$0 | 0; //@line 3588
 }
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 3590
 $7 = _mbedtls_cipher_setkey($0, $1, $2, 1) | 0; //@line 3591
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 584; //@line 3594
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3596
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 3598
  sp = STACKTOP; //@line 3599
  return 0; //@line 3600
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3602
 if ($7 | 0) {
  $$0 = $7; //@line 3605
  return $$0 | 0; //@line 3606
 }
 switch (HEAP32[HEAP32[$0 >> 2] >> 2] | 0) {
 case 36:
 case 4:
 case 3:
 case 2:
  {
   break;
  }
 default:
  {
   $$0 = -24832; //@line 3615
   return $$0 | 0; //@line 3616
  }
 }
 $13 = _calloc(1, 36) | 0; //@line 3619
 if (!$13) {
  $$0 = -24960; //@line 3622
  return $$0 | 0; //@line 3623
 }
 HEAP32[$0 + 64 >> 2] = $13; //@line 3626
 HEAP8[$13 >> 0] = 0; //@line 3628
 HEAP8[$13 + 1 >> 0] = 0; //@line 3630
 HEAP8[$13 + 2 >> 0] = 0; //@line 3632
 HEAP8[$13 + 3 >> 0] = 0; //@line 3634
 HEAP8[$13 + 4 >> 0] = 0; //@line 3636
 HEAP8[$13 + 5 >> 0] = 0; //@line 3638
 HEAP8[$13 + 6 >> 0] = 0; //@line 3640
 HEAP8[$13 + 7 >> 0] = 0; //@line 3642
 HEAP8[$13 + 8 >> 0] = 0; //@line 3644
 HEAP8[$13 + 9 >> 0] = 0; //@line 3646
 HEAP8[$13 + 10 >> 0] = 0; //@line 3648
 HEAP8[$13 + 11 >> 0] = 0; //@line 3650
 HEAP8[$13 + 12 >> 0] = 0; //@line 3652
 HEAP8[$13 + 13 >> 0] = 0; //@line 3654
 HEAP8[$13 + 14 >> 0] = 0; //@line 3656
 HEAP8[$13 + 15 >> 0] = 0; //@line 3657
 $$0 = 0; //@line 3658
 return $$0 | 0; //@line 3659
}
function _mbedtls_ccm_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $13 = 0, $18 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 2344
 $4 = _mbedtls_cipher_info_from_values($1, $3, 1) | 0; //@line 2345
 if (!$4) {
  $$0 = -13; //@line 2348
  return $$0 | 0; //@line 2349
 }
 if ((HEAP32[$4 + 24 >> 2] | 0) != 16) {
  $$0 = -13; //@line 2355
  return $$0 | 0; //@line 2356
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 2358
 _mbedtls_cipher_free($0); //@line 2359
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 568; //@line 2362
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 2364
  HEAP32[$AsyncCtx7 + 8 >> 2] = $4; //@line 2366
  HEAP32[$AsyncCtx7 + 12 >> 2] = $2; //@line 2368
  HEAP32[$AsyncCtx7 + 16 >> 2] = $3; //@line 2370
  sp = STACKTOP; //@line 2371
  return 0; //@line 2372
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 2374
 $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 2375
 $13 = _mbedtls_cipher_setup($0, $4) | 0; //@line 2376
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 569; //@line 2379
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 2381
  HEAP32[$AsyncCtx3 + 8 >> 2] = $2; //@line 2383
  HEAP32[$AsyncCtx3 + 12 >> 2] = $3; //@line 2385
  sp = STACKTOP; //@line 2386
  return 0; //@line 2387
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2389
 if ($13 | 0) {
  $$0 = $13; //@line 2392
  return $$0 | 0; //@line 2393
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2395
 $18 = _mbedtls_cipher_setkey($0, $2, $3, 1) | 0; //@line 2396
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 570; //@line 2399
  sp = STACKTOP; //@line 2400
  return 0; //@line 2401
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2403
 $$0 = $18; //@line 2404
 return $$0 | 0; //@line 2405
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_198($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 11407
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11411
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11413
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11415
 if (!(HEAP32[$0 + 4 >> 2] | 0)) {
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 11418
  _mbed_assert_internal(13588, 12372, 902); //@line 11419
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 166; //@line 11422
   $10 = $ReallocAsyncCtx8 + 4 | 0; //@line 11423
   HEAP32[$10 >> 2] = $4; //@line 11424
   $11 = $ReallocAsyncCtx8 + 8 | 0; //@line 11425
   HEAP32[$11 >> 2] = $6; //@line 11426
   $12 = $ReallocAsyncCtx8 + 12 | 0; //@line 11427
   HEAP32[$12 >> 2] = $8; //@line 11428
   sp = STACKTOP; //@line 11429
   return;
  }
  ___async_unwind = 0; //@line 11432
  HEAP32[$ReallocAsyncCtx8 >> 2] = 166; //@line 11433
  $10 = $ReallocAsyncCtx8 + 4 | 0; //@line 11434
  HEAP32[$10 >> 2] = $4; //@line 11435
  $11 = $ReallocAsyncCtx8 + 8 | 0; //@line 11436
  HEAP32[$11 >> 2] = $6; //@line 11437
  $12 = $ReallocAsyncCtx8 + 12 | 0; //@line 11438
  HEAP32[$12 >> 2] = $8; //@line 11439
  sp = STACKTOP; //@line 11440
  return;
 }
 if (!(HEAP8[$4 + 11 >> 0] | 0)) {
  return;
 }
 $16 = HEAP8[$6 >> 0] | 0; //@line 11449
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 11450
 __ZN12LoRaWANStack9handle_txEhPKhth($8, $16, 0, 0, 2) | 0; //@line 11451
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 167; //@line 11454
  sp = STACKTOP; //@line 11455
  return;
 }
 ___async_unwind = 0; //@line 11458
 HEAP32[$ReallocAsyncCtx5 >> 2] = 167; //@line 11459
 sp = STACKTOP; //@line 11460
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_211($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 12531
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12535
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12537
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12539
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12541
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12543
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12545
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12547
 $18 = HEAP8[$0 + 36 >> 0] & 1; //@line 12550
 $25 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 12551
 do {
  if ($25 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if ((HEAP32[$8 >> 2] | 0) == 1) {
     if ((HEAP32[$10 >> 2] | 0) == 1) {
      break;
     }
    }
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 12567
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($25, $12, $14, $16, $18); //@line 12568
    if (!___async) {
     ___async_unwind = 0; //@line 12571
    }
    HEAP32[$ReallocAsyncCtx2 >> 2] = 683; //@line 12573
    HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $25; //@line 12575
    HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 12577
    HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 12579
    HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 12581
    HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 12583
    HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 12585
    HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 12587
    HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 12589
    HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $18 & 1; //@line 12592
    sp = STACKTOP; //@line 12593
    return;
   }
  }
 } while (0);
 return;
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 175
 if (($1 | 0) == ($2 | 0)) {
  $21 = $1 + 16 | 0; //@line 178
  HEAP32[$21 >> 2] = 0; //@line 179
  return;
 }
 $4 = $1 + 12 | 0; //@line 182
 $5 = HEAP32[$4 >> 2] | 0; //@line 183
 do {
  if ($5 | 0) {
   $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 188
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 189
   FUNCTION_TABLE_vi[$8 & 1023]($1); //@line 190
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 559; //@line 193
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 195
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 197
    HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 199
    sp = STACKTOP; //@line 200
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 203
    break;
   }
  }
 } while (0);
 $12 = $2 + 12 | 0; //@line 208
 $13 = HEAP32[$12 >> 2] | 0; //@line 209
 do {
  if (!$13) {
   $20 = 0; //@line 213
  } else {
   $16 = HEAP32[$13 + 4 >> 2] | 0; //@line 216
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 217
   FUNCTION_TABLE_vii[$16 & 31]($1, $2); //@line 218
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 560; //@line 221
    HEAP32[$AsyncCtx3 + 4 >> 2] = $12; //@line 223
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 225
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 227
    sp = STACKTOP; //@line 228
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 231
    $20 = HEAP32[$12 >> 2] | 0; //@line 233
    break;
   }
  }
 } while (0);
 HEAP32[$4 >> 2] = $20; //@line 238
 $21 = $1 + 16 | 0; //@line 239
 HEAP32[$21 >> 2] = 0; //@line 240
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_187($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 10669
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10671
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10675
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10677
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10679
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10681
 $13 = HEAP32[$2 >> 2] | 0; //@line 10682
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 52 >> 2] | 0; //@line 10685
 $18 = HEAP16[HEAP32[$0 + 8 >> 2] >> 1] & 255; //@line 10687
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 10688
 $19 = FUNCTION_TABLE_iiii[$16 & 15]($13, $6, $18) | 0; //@line 10689
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 531; //@line 10692
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 10693
  HEAP32[$20 >> 2] = $8; //@line 10694
  $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 10695
  HEAP32[$21 >> 2] = $2; //@line 10696
  $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 10697
  HEAP32[$22 >> 2] = $10; //@line 10698
  $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 10699
  HEAP32[$23 >> 2] = $12; //@line 10700
  sp = STACKTOP; //@line 10701
  return;
 }
 HEAP32[___async_retval >> 2] = $19; //@line 10705
 ___async_unwind = 0; //@line 10706
 HEAP32[$ReallocAsyncCtx6 >> 2] = 531; //@line 10707
 $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 10708
 HEAP32[$20 >> 2] = $8; //@line 10709
 $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 10710
 HEAP32[$21 >> 2] = $2; //@line 10711
 $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 10712
 HEAP32[$22 >> 2] = $10; //@line 10713
 $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 10714
 HEAP32[$23 >> 2] = $12; //@line 10715
 sp = STACKTOP; //@line 10716
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_404($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 32678
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32680
 $3 = $2 + 1176 | 0; //@line 32681
 HEAP32[$3 >> 2] = 10172; //@line 32682
 __ZN4mbed6Ticker6detachEv($3); //@line 32683
 $5 = HEAP32[$2 + 1228 >> 2] | 0; //@line 32685
 if (!$5) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 32688
  __ZN4mbed10TimerEventD2Ev($3); //@line 32689
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 71; //@line 32692
   $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 32693
   HEAP32[$12 >> 2] = $2; //@line 32694
   sp = STACKTOP; //@line 32695
   return;
  }
  ___async_unwind = 0; //@line 32698
  HEAP32[$ReallocAsyncCtx7 >> 2] = 71; //@line 32699
  $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 32700
  HEAP32[$12 >> 2] = $2; //@line 32701
  sp = STACKTOP; //@line 32702
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 32707
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 32708
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1216 | 0); //@line 32709
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 70; //@line 32712
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 32713
   HEAP32[$10 >> 2] = $2; //@line 32714
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 32715
   HEAP32[$11 >> 2] = $3; //@line 32716
   sp = STACKTOP; //@line 32717
   return;
  }
  ___async_unwind = 0; //@line 32720
  HEAP32[$ReallocAsyncCtx2 >> 2] = 70; //@line 32721
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 32722
  HEAP32[$10 >> 2] = $2; //@line 32723
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 32724
  HEAP32[$11 >> 2] = $3; //@line 32725
  sp = STACKTOP; //@line 32726
  return;
 }
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_403($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 32623
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32625
 $3 = $2 + 1112 | 0; //@line 32626
 HEAP32[$3 >> 2] = 10172; //@line 32627
 __ZN4mbed6Ticker6detachEv($3); //@line 32628
 $5 = HEAP32[$2 + 1164 >> 2] | 0; //@line 32630
 if (!$5) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 32633
  __ZN4mbed10TimerEventD2Ev($3); //@line 32634
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 73; //@line 32637
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 32638
   HEAP32[$12 >> 2] = $2; //@line 32639
   sp = STACKTOP; //@line 32640
   return;
  }
  ___async_unwind = 0; //@line 32643
  HEAP32[$ReallocAsyncCtx6 >> 2] = 73; //@line 32644
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 32645
  HEAP32[$12 >> 2] = $2; //@line 32646
  sp = STACKTOP; //@line 32647
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 32652
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 32653
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1152 | 0); //@line 32654
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 72; //@line 32657
   $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 32658
   HEAP32[$10 >> 2] = $2; //@line 32659
   $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 32660
   HEAP32[$11 >> 2] = $3; //@line 32661
   sp = STACKTOP; //@line 32662
   return;
  }
  ___async_unwind = 0; //@line 32665
  HEAP32[$ReallocAsyncCtx3 >> 2] = 72; //@line 32666
  $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 32667
  HEAP32[$10 >> 2] = $2; //@line 32668
  $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 32669
  HEAP32[$11 >> 2] = $3; //@line 32670
  sp = STACKTOP; //@line 32671
  return;
 }
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_402($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 32568
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32570
 $3 = $2 + 1048 | 0; //@line 32571
 HEAP32[$3 >> 2] = 10172; //@line 32572
 __ZN4mbed6Ticker6detachEv($3); //@line 32573
 $5 = HEAP32[$2 + 1100 >> 2] | 0; //@line 32575
 if (!$5) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 32578
  __ZN4mbed10TimerEventD2Ev($3); //@line 32579
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 75; //@line 32582
   $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 32583
   HEAP32[$12 >> 2] = $2; //@line 32584
   sp = STACKTOP; //@line 32585
   return;
  }
  ___async_unwind = 0; //@line 32588
  HEAP32[$ReallocAsyncCtx5 >> 2] = 75; //@line 32589
  $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 32590
  HEAP32[$12 >> 2] = $2; //@line 32591
  sp = STACKTOP; //@line 32592
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 32597
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 32598
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1088 | 0); //@line 32599
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 74; //@line 32602
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 32603
   HEAP32[$10 >> 2] = $3; //@line 32604
   $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 32605
   HEAP32[$11 >> 2] = $2; //@line 32606
   sp = STACKTOP; //@line 32607
   return;
  }
  ___async_unwind = 0; //@line 32610
  HEAP32[$ReallocAsyncCtx4 >> 2] = 74; //@line 32611
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 32612
  HEAP32[$10 >> 2] = $3; //@line 32613
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 32614
  HEAP32[$11 >> 2] = $2; //@line 32615
  sp = STACKTOP; //@line 32616
  return;
 }
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $14 = 0, $18 = 0, $2 = 0, $22 = 0, $24 = 0, $33 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 33100
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33102
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33104
 $7 = (HEAP8[$2 + 373 >> 0] | 0) != 0; //@line 33110
 if (HEAP32[$2 + 364 >> 2] | 0) {
  if ($7) {
   HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 4; //@line 33116
  }
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 4; //@line 33121
  if ((HEAP32[$4 >> 2] | 0) == 2) {
   return;
  }
  $33 = $2 + 944 | 0; //@line 33127
  HEAP8[$33 >> 0] = HEAP8[$33 >> 0] | 32; //@line 33130
  return;
 }
 if ($7) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 3; //@line 33137
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 3; //@line 33142
 $14 = $2 + 356 | 0; //@line 33143
 $18 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$14 >> 2] | 0, HEAP32[$2 + 980 >> 2] | 0) | 0; //@line 33147
 if ($18 >>> 0 < (HEAP32[$2 + 976 >> 2] | 0) >>> 0) {
  return;
 }
 $22 = HEAP32[$14 >> 2] | 0; //@line 33154
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 33156
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($22, $2 + 1056 | 0); //@line 33157
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 366; //@line 33160
  $24 = $ReallocAsyncCtx3 + 4 | 0; //@line 33161
  HEAP32[$24 >> 2] = $2; //@line 33162
  sp = STACKTOP; //@line 33163
  return;
 }
 ___async_unwind = 0; //@line 33166
 HEAP32[$ReallocAsyncCtx3 >> 2] = 366; //@line 33167
 $24 = $ReallocAsyncCtx3 + 4 | 0; //@line 33168
 HEAP32[$24 >> 2] = $2; //@line 33169
 sp = STACKTOP; //@line 33170
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13619
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13621
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13623
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13625
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13627
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13629
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13631
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13633
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13635
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13637
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 13639
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 13641
 $25 = $4 + 1280 | 0; //@line 13642
 HEAP32[$25 >> 2] = 0; //@line 13643
 HEAP32[$25 + 4 >> 2] = 0; //@line 13643
 HEAP32[$25 + 8 >> 2] = 0; //@line 13643
 HEAP32[$25 + 12 >> 2] = 0; //@line 13643
 HEAP8[$4 + 1296 >> 0] = 1; //@line 13645
 HEAP32[$2 >> 2] = 684; //@line 13646
 HEAP32[$4 + 668 >> 2] = $6; //@line 13648
 HEAP32[$4 + 672 >> 2] = $8; //@line 13650
 HEAP32[$4 + 652 >> 2] = $10; //@line 13652
 HEAP32[$4 + 656 >> 2] = $12; //@line 13654
 HEAP32[$4 + 664 >> 2] = $14; //@line 13656
 HEAP32[$4 + 660 >> 2] = $16; //@line 13658
 HEAP32[$4 + 676 >> 2] = $18; //@line 13660
 HEAP32[$4 + 680 >> 2] = $20; //@line 13662
 HEAP32[$4 + 684 >> 2] = $22; //@line 13664
 HEAP32[$4 + 788 >> 2] = 0; //@line 13666
 if (($18 | 0) == -1) {
  $39 = _emscripten_asm_const_ii(7, $4 | 0) | 0; //@line 13669
  return;
 }
 _emscripten_asm_const_iii(5, HEAP32[$24 >> 2] | 0, 1) | 0; //@line 13673
 $39 = _emscripten_asm_const_ii(7, $4 | 0) | 0; //@line 13674
 return;
}
function ___overflow($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11187
 STACKTOP = STACKTOP + 16 | 0; //@line 11188
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11188
 $2 = sp; //@line 11189
 $3 = $1 & 255; //@line 11190
 HEAP8[$2 >> 0] = $3; //@line 11191
 $4 = $0 + 16 | 0; //@line 11192
 $5 = HEAP32[$4 >> 2] | 0; //@line 11193
 if (!$5) {
  if (!(___towrite($0) | 0)) {
   $12 = HEAP32[$4 >> 2] | 0; //@line 11200
   label = 4; //@line 11201
  } else {
   $$0 = -1; //@line 11203
  }
 } else {
  $12 = $5; //@line 11206
  label = 4; //@line 11207
 }
 do {
  if ((label | 0) == 4) {
   $9 = $0 + 20 | 0; //@line 11211
   $10 = HEAP32[$9 >> 2] | 0; //@line 11212
   if ($10 >>> 0 < $12 >>> 0) {
    $13 = $1 & 255; //@line 11215
    if (($13 | 0) != (HEAP8[$0 + 75 >> 0] | 0)) {
     HEAP32[$9 >> 2] = $10 + 1; //@line 11222
     HEAP8[$10 >> 0] = $3; //@line 11223
     $$0 = $13; //@line 11224
     break;
    }
   }
   $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 11229
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 11230
   $21 = FUNCTION_TABLE_iiii[$20 & 15]($0, $2, 1) | 0; //@line 11231
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 651; //@line 11234
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 11236
    sp = STACKTOP; //@line 11237
    STACKTOP = sp; //@line 11238
    return 0; //@line 11238
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 11240
   if (($21 | 0) == 1) {
    $$0 = HEAPU8[$2 >> 0] | 0; //@line 11245
   } else {
    $$0 = -1; //@line 11247
   }
  }
 } while (0);
 STACKTOP = sp; //@line 11251
 return $$0 | 0; //@line 11251
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_19($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 18485
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18487
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18489
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18491
 $7 = HEAP32[$2 >> 2] | 0; //@line 18492
 $9 = $6 + 12 | 0; //@line 18494
 HEAP32[$6 >> 2] = 441; //@line 18495
 HEAP32[$6 + 4 >> 2] = 0; //@line 18497
 HEAP32[$6 + 8 >> 2] = $4; //@line 18499
 HEAP32[$9 >> 2] = 912; //@line 18500
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 18501
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($7, $4 + 1076 | 0, $6); //@line 18502
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 442; //@line 18505
  $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 18506
  HEAP32[$10 >> 2] = $9; //@line 18507
  $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 18508
  HEAP32[$11 >> 2] = $2; //@line 18509
  $12 = $ReallocAsyncCtx6 + 12 | 0; //@line 18510
  HEAP32[$12 >> 2] = $4; //@line 18511
  $13 = $ReallocAsyncCtx6 + 16 | 0; //@line 18512
  HEAP32[$13 >> 2] = $6; //@line 18513
  sp = STACKTOP; //@line 18514
  return;
 }
 ___async_unwind = 0; //@line 18517
 HEAP32[$ReallocAsyncCtx6 >> 2] = 442; //@line 18518
 $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 18519
 HEAP32[$10 >> 2] = $9; //@line 18520
 $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 18521
 HEAP32[$11 >> 2] = $2; //@line 18522
 $12 = $ReallocAsyncCtx6 + 12 | 0; //@line 18523
 HEAP32[$12 >> 2] = $4; //@line 18524
 $13 = $ReallocAsyncCtx6 + 16 | 0; //@line 18525
 HEAP32[$13 >> 2] = $6; //@line 18526
 sp = STACKTOP; //@line 18527
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_242($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15066
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15068
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15074
 if ((HEAP32[___async_retval >> 2] | 0) != -1018) {
  _mbed_tracef(2, 12332, 12522, HEAP32[$0 + 8 >> 2] | 0); //@line 15079
 }
 $11 = $2 + 1892 | 0; //@line 15081
 $12 = HEAP32[$11 >> 2] | 0; //@line 15082
 if (!$12) {
  return;
 }
 $16 = HEAP32[$2 + 2288 >> 2] | 0; //@line 15089
 $18 = HEAP32[$12 + 4 >> 2] | 0; //@line 15091
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 15092
 FUNCTION_TABLE_vii[$18 & 31]($8, $2 + 1880 | 0); //@line 15093
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 171; //@line 15096
  $19 = $ReallocAsyncCtx + 4 | 0; //@line 15097
  HEAP32[$19 >> 2] = $11; //@line 15098
  $20 = $ReallocAsyncCtx + 8 | 0; //@line 15099
  HEAP32[$20 >> 2] = $8; //@line 15100
  $21 = $ReallocAsyncCtx + 12 | 0; //@line 15101
  HEAP32[$21 >> 2] = $16; //@line 15102
  $22 = $ReallocAsyncCtx + 16 | 0; //@line 15103
  HEAP32[$22 >> 2] = $8; //@line 15104
  sp = STACKTOP; //@line 15105
  return;
 }
 ___async_unwind = 0; //@line 15108
 HEAP32[$ReallocAsyncCtx >> 2] = 171; //@line 15109
 $19 = $ReallocAsyncCtx + 4 | 0; //@line 15110
 HEAP32[$19 >> 2] = $11; //@line 15111
 $20 = $ReallocAsyncCtx + 8 | 0; //@line 15112
 HEAP32[$20 >> 2] = $8; //@line 15113
 $21 = $ReallocAsyncCtx + 12 | 0; //@line 15114
 HEAP32[$21 >> 2] = $16; //@line 15115
 $22 = $ReallocAsyncCtx + 16 | 0; //@line 15116
 HEAP32[$22 >> 2] = $8; //@line 15117
 sp = STACKTOP; //@line 15118
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_34($0) {
 $0 = $0 | 0;
 var $10 = 0, $18 = 0, $2 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19393
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19395
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19399
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19401
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19403
 HEAP8[$2 + 376 >> 0] = (HEAP32[$0 + 8 >> 2] | 0) == 0 & (HEAP8[$2 + 944 >> 0] & 8) != 0 & 1; //@line 19412
 $18 = HEAP8[$2 + 378 >> 0] | 0; //@line 19414
 HEAP8[$2 + 379 >> 0] = $18; //@line 19416
 HEAP8[$6 >> 0] = $18; //@line 19417
 HEAP8[$8 + 1 >> 0] = HEAP8[$2 + 372 >> 0] | 0; //@line 19421
 HEAP32[$8 + 4 >> 2] = $10; //@line 19423
 $24 = HEAP32[$2 >> 2] | 0; //@line 19424
 $27 = HEAP32[(HEAP32[$24 >> 2] | 0) + 12 >> 2] | 0; //@line 19427
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 19428
 FUNCTION_TABLE_vii[$27 & 31]($24, $8); //@line 19429
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 285; //@line 19432
  $28 = $ReallocAsyncCtx + 4 | 0; //@line 19433
  HEAP32[$28 >> 2] = $2; //@line 19434
  $29 = $ReallocAsyncCtx + 8 | 0; //@line 19435
  HEAP32[$29 >> 2] = $10; //@line 19436
  $30 = $ReallocAsyncCtx + 12 | 0; //@line 19437
  HEAP32[$30 >> 2] = $6; //@line 19438
  sp = STACKTOP; //@line 19439
  return;
 }
 ___async_unwind = 0; //@line 19442
 HEAP32[$ReallocAsyncCtx >> 2] = 285; //@line 19443
 $28 = $ReallocAsyncCtx + 4 | 0; //@line 19444
 HEAP32[$28 >> 2] = $2; //@line 19445
 $29 = $ReallocAsyncCtx + 8 | 0; //@line 19446
 HEAP32[$29 >> 2] = $10; //@line 19447
 $30 = $ReallocAsyncCtx + 12 | 0; //@line 19448
 HEAP32[$30 >> 2] = $6; //@line 19449
 sp = STACKTOP; //@line 19450
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_314($0) {
 $0 = $0 | 0;
 var $$0$off0 = 0, $$0$off0$expand_i1_val = 0, $10 = 0, $12 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 21166
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21174
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21176
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21178
 if ((HEAP32[___async_retval >> 2] | 0) < (HEAP32[$0 + 4 >> 2] | 0)) {
  _mbed_tracef(16, 10944, 11110, HEAP32[$0 + 8 >> 2] | 0); //@line 21183
  $$0$off0 = 0; //@line 21184
 } else {
  $$0$off0 = 1; //@line 21186
 }
 $17 = HEAP32[(HEAP32[$8 >> 2] | 0) + 8 >> 2] | 0; //@line 21190
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 21191
 FUNCTION_TABLE_vi[$17 & 1023]($8); //@line 21192
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 65; //@line 21195
  $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 21196
  HEAP32[$18 >> 2] = $10; //@line 21197
  $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 21198
  HEAP32[$19 >> 2] = $12; //@line 21199
  $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 21200
  $$0$off0$expand_i1_val = $$0$off0 & 1; //@line 21201
  HEAP8[$20 >> 0] = $$0$off0$expand_i1_val; //@line 21202
  sp = STACKTOP; //@line 21203
  return;
 }
 ___async_unwind = 0; //@line 21206
 HEAP32[$ReallocAsyncCtx2 >> 2] = 65; //@line 21207
 $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 21208
 HEAP32[$18 >> 2] = $10; //@line 21209
 $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 21210
 HEAP32[$19 >> 2] = $12; //@line 21211
 $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 21212
 $$0$off0$expand_i1_val = $$0$off0 & 1; //@line 21213
 HEAP8[$20 >> 0] = $$0$off0$expand_i1_val; //@line 21214
 sp = STACKTOP; //@line 21215
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_416($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $24 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 33177
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33179
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33181
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33183
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 33188
  _mbed_assert_internal(13588, 13597, 215); //@line 33189
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 364; //@line 33192
   $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 33193
   HEAP32[$9 >> 2] = $2; //@line 33194
   $10 = $ReallocAsyncCtx4 + 8 | 0; //@line 33195
   HEAP32[$10 >> 2] = $4; //@line 33196
   $11 = $ReallocAsyncCtx4 + 12 | 0; //@line 33197
   HEAP32[$11 >> 2] = $6; //@line 33198
   sp = STACKTOP; //@line 33199
   return;
  }
  ___async_unwind = 0; //@line 33202
  HEAP32[$ReallocAsyncCtx4 >> 2] = 364; //@line 33203
  $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 33204
  HEAP32[$9 >> 2] = $2; //@line 33205
  $10 = $ReallocAsyncCtx4 + 8 | 0; //@line 33206
  HEAP32[$10 >> 2] = $4; //@line 33207
  $11 = $ReallocAsyncCtx4 + 12 | 0; //@line 33208
  HEAP32[$11 >> 2] = $6; //@line 33209
  sp = STACKTOP; //@line 33210
  return;
 }
 HEAP32[$4 + 364 >> 2] = 2; //@line 33214
 if (HEAP8[$4 + 373 >> 0] | 0) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 4; //@line 33222
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 4; //@line 33227
 if ((HEAP32[$6 >> 2] | 0) == 2) {
  return;
 }
 $24 = $4 + 944 | 0; //@line 33233
 HEAP8[$24 >> 0] = HEAP8[$24 >> 0] | 32; //@line 33236
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $13 = 0, $16 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 23758
 $1 = $0 + 4 | 0; //@line 23759
 $2 = HEAP32[$1 >> 2] | 0; //@line 23760
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 23763
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 23764
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 23765
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 552; //@line 23768
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 23770
  sp = STACKTOP; //@line 23771
  return 0; //@line 23772
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 23774
 $7 = HEAP32[$1 >> 2] | 0; //@line 23775
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] | 0; //@line 23778
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 23779
 $11 = FUNCTION_TABLE_ii[$10 & 15]($7) | 0; //@line 23780
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 553; //@line 23783
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 23785
  sp = STACKTOP; //@line 23786
  return 0; //@line 23787
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 23789
 $13 = HEAP32[$1 >> 2] | 0; //@line 23790
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 76 >> 2] | 0; //@line 23793
 $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 23794
 FUNCTION_TABLE_vi[$16 & 1023]($13); //@line 23795
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 554; //@line 23798
  HEAP32[$AsyncCtx5 + 4 >> 2] = $11; //@line 23800
  sp = STACKTOP; //@line 23801
  return 0; //@line 23802
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 23804
  return $11 | 0; //@line 23805
 }
 return 0; //@line 23807
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $17 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 4684
 HEAP32[$0 >> 2] = 788; //@line 4685
 HEAP8[$0 + 4 >> 0] = 0; //@line 4687
 $4 = __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 4689
 $7 = HEAP32[(HEAP32[$1 >> 2] | 0) + 72 >> 2] | 0; //@line 4692
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 4693
 FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 4694
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 139; //@line 4697
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 4699
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 4701
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 4703
  sp = STACKTOP; //@line 4704
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4707
 $12 = HEAP32[HEAP32[$1 >> 2] >> 2] | 0; //@line 4709
 $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 4710
 FUNCTION_TABLE_vii[$12 & 31]($1, $4); //@line 4711
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 140; //@line 4714
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 4716
  HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 4718
  sp = STACKTOP; //@line 4719
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 4722
 $17 = HEAP32[(HEAP32[$1 >> 2] | 0) + 76 >> 2] | 0; //@line 4725
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4726
 FUNCTION_TABLE_vi[$17 & 1023]($1); //@line 4727
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 141; //@line 4730
  sp = STACKTOP; //@line 4731
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 4734
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_356($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 28951
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28953
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28955
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28957
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28959
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28961
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28963
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28965
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28967
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28969
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28971
 HEAP32[$12 >> 2] = 4; //@line 28972
 HEAP32[$20 >> 2] = HEAP32[$6 + 1944 >> 2]; //@line 28975
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(44) | 0; //@line 28976
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($16, $18) | 0; //@line 28977
 if (!___async) {
  ___async_unwind = 0; //@line 28980
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 194; //@line 28982
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $2; //@line 28984
 HEAP32[$ReallocAsyncCtx16 + 8 >> 2] = $4; //@line 28986
 HEAP32[$ReallocAsyncCtx16 + 12 >> 2] = $6; //@line 28988
 HEAP32[$ReallocAsyncCtx16 + 16 >> 2] = $8; //@line 28990
 HEAP32[$ReallocAsyncCtx16 + 20 >> 2] = $10; //@line 28992
 HEAP32[$ReallocAsyncCtx16 + 24 >> 2] = $12; //@line 28994
 HEAP32[$ReallocAsyncCtx16 + 28 >> 2] = $14; //@line 28996
 HEAP32[$ReallocAsyncCtx16 + 32 >> 2] = $16; //@line 28998
 HEAP32[$ReallocAsyncCtx16 + 36 >> 2] = $18; //@line 29000
 HEAP32[$ReallocAsyncCtx16 + 40 >> 2] = $20; //@line 29002
 sp = STACKTOP; //@line 29003
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_355($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 28892
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28894
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28896
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28898
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28900
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28902
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28904
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28906
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28908
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28910
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28912
 HEAP32[$12 >> 2] = 5; //@line 28913
 HEAP32[$20 >> 2] = HEAP32[$6 + 1948 >> 2]; //@line 28916
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(44) | 0; //@line 28917
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($16, $18) | 0; //@line 28918
 if (!___async) {
  ___async_unwind = 0; //@line 28921
 }
 HEAP32[$ReallocAsyncCtx15 >> 2] = 195; //@line 28923
 HEAP32[$ReallocAsyncCtx15 + 4 >> 2] = $2; //@line 28925
 HEAP32[$ReallocAsyncCtx15 + 8 >> 2] = $4; //@line 28927
 HEAP32[$ReallocAsyncCtx15 + 12 >> 2] = $6; //@line 28929
 HEAP32[$ReallocAsyncCtx15 + 16 >> 2] = $8; //@line 28931
 HEAP32[$ReallocAsyncCtx15 + 20 >> 2] = $10; //@line 28933
 HEAP32[$ReallocAsyncCtx15 + 24 >> 2] = $12; //@line 28935
 HEAP32[$ReallocAsyncCtx15 + 28 >> 2] = $14; //@line 28937
 HEAP32[$ReallocAsyncCtx15 + 32 >> 2] = $16; //@line 28939
 HEAP32[$ReallocAsyncCtx15 + 36 >> 2] = $18; //@line 28941
 HEAP32[$ReallocAsyncCtx15 + 40 >> 2] = $20; //@line 28943
 sp = STACKTOP; //@line 28944
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $14 = 0, $16 = 0, $19 = 0, $3 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 23815
 $3 = $0 + 4 | 0; //@line 23816
 $4 = HEAP32[$3 >> 2] | 0; //@line 23817
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 72 >> 2] | 0; //@line 23820
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 23821
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 23822
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 555; //@line 23825
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 23827
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 23829
  HEAP8[$AsyncCtx + 12 >> 0] = $2; //@line 23831
  sp = STACKTOP; //@line 23832
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 23835
 $11 = HEAP32[$3 >> 2] | 0; //@line 23836
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 24 >> 2] | 0; //@line 23839
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 23840
 FUNCTION_TABLE_viii[$14 & 7]($11, $1, $2); //@line 23841
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 556; //@line 23844
  HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 23846
  sp = STACKTOP; //@line 23847
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 23850
 $16 = HEAP32[$3 >> 2] | 0; //@line 23851
 $19 = HEAP32[(HEAP32[$16 >> 2] | 0) + 76 >> 2] | 0; //@line 23854
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 23855
 FUNCTION_TABLE_vi[$19 & 1023]($16); //@line 23856
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 557; //@line 23859
  sp = STACKTOP; //@line 23860
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 23863
  return;
 }
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $16 = 0, $2 = 0, $20 = 0, $22 = 0, $29 = 0, $5 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13357
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13359
 $5 = (HEAP8[$2 + 373 >> 0] | 0) != 0; //@line 13365
 if (HEAP32[$2 + 364 >> 2] | 0) {
  if ($5) {
   HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 6; //@line 13371
  }
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 6; //@line 13376
  $29 = $2 + 944 | 0; //@line 13377
  HEAP8[$29 >> 0] = HEAP8[$29 >> 0] | 32; //@line 13380
  return;
 }
 if ($5) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 5; //@line 13387
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 5; //@line 13392
 $12 = $2 + 356 | 0; //@line 13393
 $16 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$12 >> 2] | 0, HEAP32[$2 + 980 >> 2] | 0) | 0; //@line 13397
 if ($16 >>> 0 < (HEAP32[$2 + 976 >> 2] | 0) >>> 0) {
  return;
 }
 $20 = HEAP32[$12 >> 2] | 0; //@line 13404
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 13406
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($20, $2 + 1056 | 0); //@line 13407
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 359; //@line 13410
  $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 13411
  HEAP32[$22 >> 2] = $2; //@line 13412
  sp = STACKTOP; //@line 13413
  return;
 }
 ___async_unwind = 0; //@line 13416
 HEAP32[$ReallocAsyncCtx3 >> 2] = 359; //@line 13417
 $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 13418
 HEAP32[$22 >> 2] = $2; //@line 13419
 sp = STACKTOP; //@line 13420
 return;
}
function _fflush__async_cb_163($0) {
 $0 = $0 | 0;
 var $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $13 = 0, $16 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 31963
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31965
 $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 31967
 L3 : do {
  if (!$$02325) {
   $$024$lcssa = $AsyncRetVal; //@line 31971
  } else {
   $$02327 = $$02325; //@line 31973
   $$02426 = $AsyncRetVal; //@line 31973
   while (1) {
    if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
     $16 = ___lockfile($$02327) | 0; //@line 31980
    } else {
     $16 = 0; //@line 31982
    }
    if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
     break;
    }
    if ($16 | 0) {
     ___unlockfile($$02327); //@line 31994
    }
    $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 31997
    if (!$$023) {
     $$024$lcssa = $$02426; //@line 32000
     break L3;
    } else {
     $$02327 = $$023; //@line 32003
    }
   }
   $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 32006
   $13 = ___fflush_unlocked($$02327) | 0; //@line 32007
   if (!___async) {
    HEAP32[___async_retval >> 2] = $13; //@line 32011
    ___async_unwind = 0; //@line 32012
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 655; //@line 32014
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$02426; //@line 32016
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $16; //@line 32018
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327; //@line 32020
   sp = STACKTOP; //@line 32021
   return;
  }
 } while (0);
 ___ofl_unlock(); //@line 32025
 HEAP32[___async_retval >> 2] = $$024$lcssa; //@line 32027
 return;
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb_41($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20279
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20283
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20285
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20287
 if (!$AsyncRetVal) {
  $10 = HEAP16[$0 + 4 >> 1] & 255; //@line 20291
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 20292
  $11 = _mbedtls_cipher_cmac_update(22460, $4, $10) | 0; //@line 20293
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 503; //@line 20296
   $12 = $ReallocAsyncCtx + 4 | 0; //@line 20297
   HEAP32[$12 >> 2] = $6; //@line 20298
   sp = STACKTOP; //@line 20299
   return;
  }
  HEAP32[___async_retval >> 2] = $11; //@line 20303
  ___async_unwind = 0; //@line 20304
  HEAP32[$ReallocAsyncCtx >> 2] = 503; //@line 20305
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 20306
  HEAP32[$12 >> 2] = $6; //@line 20307
  sp = STACKTOP; //@line 20308
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 20311
  _mbedtls_cipher_free(22460); //@line 20312
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 505; //@line 20315
   $14 = $ReallocAsyncCtx5 + 4 | 0; //@line 20316
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 20317
   sp = STACKTOP; //@line 20318
   return;
  }
  ___async_unwind = 0; //@line 20321
  HEAP32[$ReallocAsyncCtx5 >> 2] = 505; //@line 20322
  $14 = $ReallocAsyncCtx5 + 4 | 0; //@line 20323
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 20324
  sp = STACKTOP; //@line 20325
  return;
 }
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $20 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 20872
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20874
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20876
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20878
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20880
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20882
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20884
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20886
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20888
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20892
 $24 = HEAP16[$0 + 48 >> 1] | 0; //@line 20896
 HEAP32[$16 >> 2] = 5; //@line 20897
 _mbed_tracef(16, 10944, 11001, $16); //@line 20898
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($10); //@line 20899
 HEAP32[$20 >> 2] = 5; //@line 20900
 _mbed_tracef(16, 10944, 11030, $20); //@line 20901
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 20902
 _wait_ms(1); //@line 20903
 if (!___async) {
  ___async_unwind = 0; //@line 20906
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 60; //@line 20908
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 20910
 HEAP16[$ReallocAsyncCtx7 + 8 >> 1] = $24; //@line 20912
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $8; //@line 20914
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $12; //@line 20916
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $14; //@line 20918
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $10; //@line 20920
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $4; //@line 20922
 HEAP32[$ReallocAsyncCtx7 + 32 >> 2] = $6; //@line 20924
 sp = STACKTOP; //@line 20925
 return;
}
function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0; //@line 33725
 value = value & 255; //@line 33727
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value; //@line 33730
   ptr = ptr + 1 | 0; //@line 33731
  }
  aligned_end = end & -4 | 0; //@line 33734
  block_aligned_end = aligned_end - 64 | 0; //@line 33735
  value4 = value | value << 8 | value << 16 | value << 24; //@line 33736
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 33739
   HEAP32[ptr + 4 >> 2] = value4; //@line 33740
   HEAP32[ptr + 8 >> 2] = value4; //@line 33741
   HEAP32[ptr + 12 >> 2] = value4; //@line 33742
   HEAP32[ptr + 16 >> 2] = value4; //@line 33743
   HEAP32[ptr + 20 >> 2] = value4; //@line 33744
   HEAP32[ptr + 24 >> 2] = value4; //@line 33745
   HEAP32[ptr + 28 >> 2] = value4; //@line 33746
   HEAP32[ptr + 32 >> 2] = value4; //@line 33747
   HEAP32[ptr + 36 >> 2] = value4; //@line 33748
   HEAP32[ptr + 40 >> 2] = value4; //@line 33749
   HEAP32[ptr + 44 >> 2] = value4; //@line 33750
   HEAP32[ptr + 48 >> 2] = value4; //@line 33751
   HEAP32[ptr + 52 >> 2] = value4; //@line 33752
   HEAP32[ptr + 56 >> 2] = value4; //@line 33753
   HEAP32[ptr + 60 >> 2] = value4; //@line 33754
   ptr = ptr + 64 | 0; //@line 33755
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 33759
   ptr = ptr + 4 | 0; //@line 33760
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value; //@line 33765
  ptr = ptr + 1 | 0; //@line 33766
 }
 return end - num | 0; //@line 33768
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv($0) {
 $0 = $0 | 0;
 var $10 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 12187
 $2 = HEAP32[$0 + 16 >> 2] | 0; //@line 12189
 $4 = HEAP16[$0 + 20 >> 1] | 0; //@line 12191
 $6 = HEAP16[$0 + 22 >> 1] | 0; //@line 12193
 $8 = HEAP8[$0 + 24 >> 0] | 0; //@line 12195
 $9 = $0 + 12 | 0; //@line 12196
 $10 = HEAP32[$9 >> 2] | 0; //@line 12197
 do {
  if (!$10) {
   $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 12201
   _mbed_assert_internal(15615, 15620, 2830); //@line 12202
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 349; //@line 12205
    HEAP32[$AsyncCtx2 + 4 >> 2] = $9; //@line 12207
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 12209
    HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 12211
    HEAP16[$AsyncCtx2 + 16 >> 1] = $4; //@line 12213
    HEAP16[$AsyncCtx2 + 18 >> 1] = $6; //@line 12215
    HEAP8[$AsyncCtx2 + 20 >> 0] = $8; //@line 12217
    sp = STACKTOP; //@line 12218
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 12221
    $19 = HEAP32[$9 >> 2] | 0; //@line 12223
    break;
   }
  } else {
   $19 = $10; //@line 12227
  }
 } while (0);
 $18 = HEAP32[$19 >> 2] | 0; //@line 12230
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12231
 FUNCTION_TABLE_viiiii[$18 & 7]($0, $2, $4, $6, $8); //@line 12232
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 350; //@line 12235
  sp = STACKTOP; //@line 12236
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12239
  return;
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_139($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30221
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30225
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30227
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30229
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30231
 $11 = $4 + 944 | 0; //@line 30232
 HEAP8[$11 >> 0] = HEAP8[$11 >> 0] | 34; //@line 30235
 $14 = HEAP32[$6 >> 2] | 0; //@line 30236
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 30238
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($14, $4 + 996 | 0, 1); //@line 30239
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 337; //@line 30242
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 30243
  HEAP32[$16 >> 2] = $4; //@line 30244
  $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 30245
  HEAP32[$17 >> 2] = $6; //@line 30246
  $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 30247
  HEAP32[$18 >> 2] = $8; //@line 30248
  $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 30249
  HEAP32[$19 >> 2] = $10; //@line 30250
  sp = STACKTOP; //@line 30251
  return;
 }
 ___async_unwind = 0; //@line 30254
 HEAP32[$ReallocAsyncCtx6 >> 2] = 337; //@line 30255
 $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 30256
 HEAP32[$16 >> 2] = $4; //@line 30257
 $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 30258
 HEAP32[$17 >> 2] = $6; //@line 30259
 $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 30260
 HEAP32[$18 >> 2] = $8; //@line 30261
 $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 30262
 HEAP32[$19 >> 2] = $10; //@line 30263
 sp = STACKTOP; //@line 30264
 return;
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_12($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 18083
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18085
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18087
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18089
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18091
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 18094
  $9 = _mbedtls_cipher_cmac_update(22460, $2, $4) | 0; //@line 18095
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 498; //@line 18098
   $10 = $ReallocAsyncCtx + 4 | 0; //@line 18099
   HEAP32[$10 >> 2] = $6; //@line 18100
   sp = STACKTOP; //@line 18101
   return;
  }
  HEAP32[___async_retval >> 2] = $9; //@line 18105
  ___async_unwind = 0; //@line 18106
  HEAP32[$ReallocAsyncCtx >> 2] = 498; //@line 18107
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 18108
  HEAP32[$10 >> 2] = $6; //@line 18109
  sp = STACKTOP; //@line 18110
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 18113
  _mbedtls_cipher_free(22460); //@line 18114
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 500; //@line 18117
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 18118
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 18119
   sp = STACKTOP; //@line 18120
   return;
  }
  ___async_unwind = 0; //@line 18123
  HEAP32[$ReallocAsyncCtx6 >> 2] = 500; //@line 18124
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 18125
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 18126
  sp = STACKTOP; //@line 18127
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_354($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 28835
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28837
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28839
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28841
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28843
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28845
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28847
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28849
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28851
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28853
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28855
 HEAP32[$12 >> 2] = 6; //@line 28856
 HEAP32[$20 >> 2] = HEAP32[$6 + 1952 >> 2]; //@line 28859
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(40) | 0; //@line 28860
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($16, $18) | 0; //@line 28861
 if (!___async) {
  ___async_unwind = 0; //@line 28864
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 196; //@line 28866
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $12; //@line 28868
 HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $14; //@line 28870
 HEAP32[$ReallocAsyncCtx14 + 12 >> 2] = $16; //@line 28872
 HEAP32[$ReallocAsyncCtx14 + 16 >> 2] = $18; //@line 28874
 HEAP32[$ReallocAsyncCtx14 + 20 >> 2] = $2; //@line 28876
 HEAP32[$ReallocAsyncCtx14 + 24 >> 2] = $4; //@line 28878
 HEAP32[$ReallocAsyncCtx14 + 28 >> 2] = $6; //@line 28880
 HEAP32[$ReallocAsyncCtx14 + 32 >> 2] = $8; //@line 28882
 HEAP32[$ReallocAsyncCtx14 + 36 >> 2] = $10; //@line 28884
 sp = STACKTOP; //@line 28885
 return;
}
function __ZN7LoRaPHY25setup_public_network_modeEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $14 = 0, $17 = 0, $2 = 0, $3 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 23624
 $2 = $0 + 4 | 0; //@line 23625
 $3 = HEAP32[$2 >> 2] | 0; //@line 23626
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 72 >> 2] | 0; //@line 23629
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 23630
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 23631
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 545; //@line 23634
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 23636
  HEAP8[$AsyncCtx + 8 >> 0] = $1 & 1; //@line 23639
  sp = STACKTOP; //@line 23640
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 23643
 $9 = HEAP32[$2 >> 2] | 0; //@line 23644
 $12 = HEAP32[(HEAP32[$9 >> 2] | 0) + 48 >> 2] | 0; //@line 23647
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 23648
 FUNCTION_TABLE_vii[$12 & 31]($9, $1); //@line 23649
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 546; //@line 23652
  HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 23654
  sp = STACKTOP; //@line 23655
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 23658
 $14 = HEAP32[$2 >> 2] | 0; //@line 23659
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 76 >> 2] | 0; //@line 23662
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 23663
 FUNCTION_TABLE_vi[$17 & 1023]($14); //@line 23664
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 547; //@line 23667
  sp = STACKTOP; //@line 23668
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 23671
  return;
 }
}
function _equeue_cancel__async_cb($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$sink$in$i$i = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 55
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 57
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 59
 $7 = $2 + 156 | 0; //@line 60
 _equeue_mutex_lock($7); //@line 61
 $8 = $2 + 24 | 0; //@line 62
 $9 = HEAP32[$8 >> 2] | 0; //@line 63
 L3 : do {
  if (!$9) {
   $$02329$i$i = $8; //@line 67
   label = 9; //@line 68
  } else {
   $11 = HEAP32[$6 >> 2] | 0; //@line 70
   $$025$i$i = $8; //@line 71
   $13 = $9; //@line 71
   while (1) {
    $12 = HEAP32[$13 >> 2] | 0; //@line 73
    if ($12 >>> 0 >= $11 >>> 0) {
     break;
    }
    $15 = $13 + 8 | 0; //@line 78
    $16 = HEAP32[$15 >> 2] | 0; //@line 79
    if (!$16) {
     $$02329$i$i = $15; //@line 82
     label = 9; //@line 83
     break L3;
    } else {
     $$025$i$i = $15; //@line 86
     $13 = $16; //@line 86
    }
   }
   if (($12 | 0) == ($11 | 0)) {
    HEAP32[$4 + -24 >> 2] = $13; //@line 92
    $$02330$i$i = $$025$i$i; //@line 95
    $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 95
   } else {
    $$02329$i$i = $$025$i$i; //@line 97
    label = 9; //@line 98
   }
  }
 } while (0);
 if ((label | 0) == 9) {
  HEAP32[$4 + -24 >> 2] = 0; //@line 104
  $$02330$i$i = $$02329$i$i; //@line 105
  $$sink$in$i$i = $$02329$i$i; //@line 105
 }
 HEAP32[$4 + -28 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 109
 HEAP32[$$02330$i$i >> 2] = $6; //@line 110
 _equeue_mutex_unlock($7); //@line 111
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_227($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 13943
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13947
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13949
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13951
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13953
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13955
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13957
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 13960
 _equeue_event_delay($4, $6); //@line 13961
 _equeue_event_dtor($4, 288); //@line 13962
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 13963
 $16 = _equeue_post($8, 289, $4) | 0; //@line 13964
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 564; //@line 13967
  $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 13968
  HEAP32[$17 >> 2] = $10; //@line 13969
  $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 13970
  HEAP32[$18 >> 2] = $12; //@line 13971
  $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 13972
  HEAP32[$19 >> 2] = $14; //@line 13973
  sp = STACKTOP; //@line 13974
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 13978
 ___async_unwind = 0; //@line 13979
 HEAP32[$ReallocAsyncCtx4 >> 2] = 564; //@line 13980
 $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 13981
 HEAP32[$17 >> 2] = $10; //@line 13982
 $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 13983
 HEAP32[$18 >> 2] = $12; //@line 13984
 $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 13985
 HEAP32[$19 >> 2] = $14; //@line 13986
 sp = STACKTOP; //@line 13987
 return;
}
function _mbedtls_cipher_cmac_starts__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $27 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30858
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30860
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30862
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 30865
  $27 = ___async_retval; //@line 30866
  HEAP32[$27 >> 2] = $$0; //@line 30867
  return;
 }
 switch (HEAP32[HEAP32[$2 >> 2] >> 2] | 0) {
 case 36:
 case 4:
 case 3:
 case 2:
  {
   break;
  }
 default:
  {
   $$0 = -24832; //@line 30877
   $27 = ___async_retval; //@line 30878
   HEAP32[$27 >> 2] = $$0; //@line 30879
   return;
  }
 }
 $9 = _calloc(1, 36) | 0; //@line 30883
 if (!$9) {
  $$0 = -24960; //@line 30886
  $27 = ___async_retval; //@line 30887
  HEAP32[$27 >> 2] = $$0; //@line 30888
  return;
 }
 HEAP32[$4 + 64 >> 2] = $9; //@line 30892
 HEAP8[$9 >> 0] = 0; //@line 30894
 HEAP8[$9 + 1 >> 0] = 0; //@line 30896
 HEAP8[$9 + 2 >> 0] = 0; //@line 30898
 HEAP8[$9 + 3 >> 0] = 0; //@line 30900
 HEAP8[$9 + 4 >> 0] = 0; //@line 30902
 HEAP8[$9 + 5 >> 0] = 0; //@line 30904
 HEAP8[$9 + 6 >> 0] = 0; //@line 30906
 HEAP8[$9 + 7 >> 0] = 0; //@line 30908
 HEAP8[$9 + 8 >> 0] = 0; //@line 30910
 HEAP8[$9 + 9 >> 0] = 0; //@line 30912
 HEAP8[$9 + 10 >> 0] = 0; //@line 30914
 HEAP8[$9 + 11 >> 0] = 0; //@line 30916
 HEAP8[$9 + 12 >> 0] = 0; //@line 30918
 HEAP8[$9 + 13 >> 0] = 0; //@line 30920
 HEAP8[$9 + 14 >> 0] = 0; //@line 30922
 HEAP8[$9 + 15 >> 0] = 0; //@line 30923
 $$0 = 0; //@line 30924
 $27 = ___async_retval; //@line 30925
 HEAP32[$27 >> 2] = $$0; //@line 30926
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_169($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 32508
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32510
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32512
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 32514
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32516
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32518
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 32520
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32522
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32524
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 32526
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 32528
 $21 = HEAP32[$2 >> 2] | 0; //@line 32529
 $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 32 >> 2] | 0; //@line 32532
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 32533
 FUNCTION_TABLE_vii[$24 & 31]($21, $4); //@line 32534
 if (!___async) {
  ___async_unwind = 0; //@line 32537
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 521; //@line 32539
 HEAP8[$ReallocAsyncCtx5 + 4 >> 0] = $6; //@line 32541
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $8; //@line 32543
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $2; //@line 32545
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $10; //@line 32547
 HEAP8[$ReallocAsyncCtx5 + 20 >> 0] = $12; //@line 32549
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $14; //@line 32551
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $16; //@line 32553
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $18; //@line 32555
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $20; //@line 32557
 sp = STACKTOP; //@line 32558
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12468
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12472
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12474
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12476
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12478
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12480
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12482
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 12485
 $21 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 12486
 if ($21 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   if ((HEAP32[$8 >> 2] | 0) != 1) {
    $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 12495
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($21, $10, $12, $14, $16); //@line 12496
    if (!___async) {
     ___async_unwind = 0; //@line 12499
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 684; //@line 12501
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $21; //@line 12503
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 12505
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 12507
    HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 12509
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 12511
    HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 12513
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 12515
    HEAP8[$ReallocAsyncCtx + 32 >> 0] = $16 & 1; //@line 12518
    sp = STACKTOP; //@line 12519
    return;
   }
  }
 }
 return;
}
function __ZN7LoRaMac21send_frame_on_channelEh__async_cb_317($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 21408
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21410
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21412
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21414
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21416
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21418
 if (!(HEAP8[$2 + 372 >> 0] | 0)) {
  $14 = $2 + 897 | 0; //@line 21423
  HEAP8[$14 >> 0] = (HEAP8[$14 >> 0] | 0) + 1 << 24 >> 24; //@line 21426
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 21428
 $20 = HEAP16[$6 >> 1] & 255; //@line 21431
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 21432
 __ZN7LoRaPHY11handle_sendEPhh($17, $2 + 381 | 0, $20); //@line 21433
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 408; //@line 21436
  $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 21437
  HEAP32[$21 >> 2] = $2; //@line 21438
  $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 21439
  HEAP32[$22 >> 2] = $8; //@line 21440
  $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 21441
  HEAP32[$23 >> 2] = $10; //@line 21442
  sp = STACKTOP; //@line 21443
  return;
 }
 ___async_unwind = 0; //@line 21446
 HEAP32[$ReallocAsyncCtx3 >> 2] = 408; //@line 21447
 $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 21448
 HEAP32[$21 >> 2] = $2; //@line 21449
 $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 21450
 HEAP32[$22 >> 2] = $8; //@line 21451
 $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 21452
 HEAP32[$23 >> 2] = $10; //@line 21453
 sp = STACKTOP; //@line 21454
 return;
}
function __ZN4mbed5Timer7read_msEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $21 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2802
 $2 = $0 + 16 | 0; //@line 2804
 $4 = HEAP32[$2 >> 2] | 0; //@line 2806
 $7 = HEAP32[$2 + 4 >> 2] | 0; //@line 2809
 if (!(HEAP32[$0 >> 2] | 0)) {
  $29 = 0; //@line 2813
  $30 = 0; //@line 2813
  $31 = _i64Add($29 | 0, $30 | 0, $4 | 0, $7 | 0) | 0; //@line 2814
  $32 = tempRet0; //@line 2815
  $33 = ___udivdi3($31 | 0, $32 | 0, 1e3, 0) | 0; //@line 2816
  $34 = tempRet0; //@line 2817
  return $33 | 0; //@line 2818
 }
 $11 = HEAP32[$0 + 24 >> 2] | 0; //@line 2821
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 2822
 $12 = _ticker_read_us($11) | 0; //@line 2823
 $13 = tempRet0; //@line 2824
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 114; //@line 2827
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2829
  $16 = $AsyncCtx + 8 | 0; //@line 2831
  HEAP32[$16 >> 2] = $4; //@line 2833
  HEAP32[$16 + 4 >> 2] = $7; //@line 2836
  sp = STACKTOP; //@line 2837
  return 0; //@line 2838
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2840
 $21 = $0 + 8 | 0; //@line 2842
 $27 = _i64Subtract($12 | 0, $13 | 0, HEAP32[$21 >> 2] | 0, HEAP32[$21 + 4 >> 2] | 0) | 0; //@line 2848
 $29 = $27; //@line 2850
 $30 = tempRet0; //@line 2850
 $31 = _i64Add($29 | 0, $30 | 0, $4 | 0, $7 | 0) | 0; //@line 2851
 $32 = tempRet0; //@line 2852
 $33 = ___udivdi3($31 | 0, $32 | 0, 1e3, 0) | 0; //@line 2853
 $34 = tempRet0; //@line 2854
 return $33 | 0; //@line 2855
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_28($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 19085
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19087
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19089
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19091
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19093
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19095
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19097
 $13 = $2 + 356 | 0; //@line 19098
 $14 = HEAP32[$13 >> 2] | 0; //@line 19099
 $16 = $8 + 12 | 0; //@line 19101
 HEAP32[$8 >> 2] = 429; //@line 19102
 HEAP32[$8 + 4 >> 2] = 0; //@line 19104
 HEAP32[$8 + 8 >> 2] = $2; //@line 19106
 HEAP32[$16 >> 2] = 912; //@line 19107
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(36) | 0; //@line 19108
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($14, $2 + 996 | 0, $8); //@line 19109
 if (!___async) {
  ___async_unwind = 0; //@line 19112
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 430; //@line 19114
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $13; //@line 19116
 HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $2; //@line 19118
 HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $4; //@line 19120
 HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $6; //@line 19122
 HEAP32[$ReallocAsyncCtx10 + 20 >> 2] = $8; //@line 19124
 HEAP32[$ReallocAsyncCtx10 + 24 >> 2] = $16; //@line 19126
 HEAP32[$ReallocAsyncCtx10 + 28 >> 2] = $10; //@line 19128
 HEAP32[$ReallocAsyncCtx10 + 32 >> 2] = $12; //@line 19130
 sp = STACKTOP; //@line 19131
 return;
}
function _fflush__async_cb($0) {
 $0 = $0 | 0;
 var $$02327$reg2mem$0 = 0, $$1 = 0, $$reg2mem$0 = 0, $17 = 0, $20 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 31864
 $$02327$reg2mem$0 = HEAP32[$0 + 12 >> 2] | 0; //@line 31874
 $$1 = HEAP32[___async_retval >> 2] | HEAP32[$0 + 4 >> 2]; //@line 31874
 $$reg2mem$0 = HEAP32[$0 + 8 >> 2] | 0; //@line 31874
 while (1) {
  if ($$reg2mem$0 | 0) {
   ___unlockfile($$02327$reg2mem$0); //@line 31878
  }
  $$02327$reg2mem$0 = HEAP32[$$02327$reg2mem$0 + 56 >> 2] | 0; //@line 31881
  if (!$$02327$reg2mem$0) {
   label = 12; //@line 31884
   break;
  }
  if ((HEAP32[$$02327$reg2mem$0 + 76 >> 2] | 0) > -1) {
   $20 = ___lockfile($$02327$reg2mem$0) | 0; //@line 31892
  } else {
   $20 = 0; //@line 31894
  }
  if ((HEAP32[$$02327$reg2mem$0 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327$reg2mem$0 + 28 >> 2] | 0) >>> 0) {
   break;
  } else {
   $$reg2mem$0 = $20; //@line 31904
  }
 }
 if ((label | 0) == 12) {
  ___ofl_unlock(); //@line 31908
  HEAP32[___async_retval >> 2] = $$1; //@line 31910
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 31913
 $17 = ___fflush_unlocked($$02327$reg2mem$0) | 0; //@line 31914
 if (!___async) {
  HEAP32[___async_retval >> 2] = $17; //@line 31918
  ___async_unwind = 0; //@line 31919
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 655; //@line 31921
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$1; //@line 31923
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $20; //@line 31925
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327$reg2mem$0; //@line 31927
 sp = STACKTOP; //@line 31928
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_229($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 14018
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14022
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14024
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14026
 $8 = (HEAP32[$0 + 4 >> 2] | 0) + 16 | 0; //@line 14027
 HEAP32[$8 >> 2] = $AsyncRetVal; //@line 14028
 $9 = HEAP32[$4 >> 2] | 0; //@line 14029
 if ($9 | 0) {
  $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 14033
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 14034
  FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 14035
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 565; //@line 14038
   $13 = $ReallocAsyncCtx3 + 4 | 0; //@line 14039
   HEAP32[$13 >> 2] = $8; //@line 14040
   sp = STACKTOP; //@line 14041
   return;
  }
  ___async_unwind = 0; //@line 14044
  HEAP32[$ReallocAsyncCtx3 >> 2] = 565; //@line 14045
  $13 = $ReallocAsyncCtx3 + 4 | 0; //@line 14046
  HEAP32[$13 >> 2] = $8; //@line 14047
  sp = STACKTOP; //@line 14048
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 14055
 _mbed_assert_internal(14328, 14346, 57); //@line 14056
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 566; //@line 14059
  sp = STACKTOP; //@line 14060
  return;
 }
 ___async_unwind = 0; //@line 14063
 HEAP32[$ReallocAsyncCtx6 >> 2] = 566; //@line 14064
 sp = STACKTOP; //@line 14065
 return;
}
function ___fflush_unlocked__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 32217
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32219
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32221
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32223
 do {
  if (!(HEAP32[$2 >> 2] | 0)) {
   $$0 = -1; //@line 32228
  } else {
   $9 = $4 + 4 | 0; //@line 32230
   $10 = HEAP32[$9 >> 2] | 0; //@line 32231
   $11 = $4 + 8 | 0; //@line 32232
   $12 = HEAP32[$11 >> 2] | 0; //@line 32233
   if ($10 >>> 0 >= $12 >>> 0) {
    HEAP32[$4 + 16 >> 2] = 0; //@line 32237
    HEAP32[$6 >> 2] = 0; //@line 32238
    HEAP32[$2 >> 2] = 0; //@line 32239
    HEAP32[$11 >> 2] = 0; //@line 32240
    HEAP32[$9 >> 2] = 0; //@line 32241
    $$0 = 0; //@line 32242
    break;
   }
   $18 = HEAP32[$4 + 40 >> 2] | 0; //@line 32249
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 32250
   FUNCTION_TABLE_iiii[$18 & 15]($4, $10 - $12 | 0, 1) | 0; //@line 32251
   if (!___async) {
    ___async_unwind = 0; //@line 32254
   }
   HEAP32[$ReallocAsyncCtx2 >> 2] = 657; //@line 32256
   HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 32258
   HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 32260
   HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 32262
   HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $11; //@line 32264
   HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $9; //@line 32266
   sp = STACKTOP; //@line 32267
   return;
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 32272
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_172($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $18 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 32762
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32772
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 32774
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32776
 $18 = HEAP32[$10 >> 2] | 0; //@line 32783
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 44 >> 2] | 0; //@line 32786
 $24 = (HEAPU8[((HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 17 >> 0] | 0) == 0 ? HEAP32[$0 + 8 >> 2] | 0 : HEAP32[$0 + 12 >> 2] | 0) + (HEAP32[$0 + 16 >> 2] | 0) >> 0] | 0) + 13 & 255; //@line 32789
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 32790
 FUNCTION_TABLE_viii[$21 & 7]($18, 1, $24); //@line 32791
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 524; //@line 32794
  $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 32795
  HEAP32[$25 >> 2] = $10; //@line 32796
  $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 32797
  HEAP8[$26 >> 0] = $12; //@line 32798
  $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 32799
  HEAP32[$27 >> 2] = $14; //@line 32800
  sp = STACKTOP; //@line 32801
  return;
 }
 ___async_unwind = 0; //@line 32804
 HEAP32[$ReallocAsyncCtx8 >> 2] = 524; //@line 32805
 $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 32806
 HEAP32[$25 >> 2] = $10; //@line 32807
 $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 32808
 HEAP8[$26 >> 0] = $12; //@line 32809
 $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 32810
 HEAP32[$27 >> 2] = $14; //@line 32811
 sp = STACKTOP; //@line 32812
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_171($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $18 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 32705
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32715
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 32717
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32719
 $18 = HEAP32[$10 >> 2] | 0; //@line 32726
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 44 >> 2] | 0; //@line 32729
 $24 = (HEAPU8[((HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 17 >> 0] | 0) == 0 ? HEAP32[$0 + 8 >> 2] | 0 : HEAP32[$0 + 12 >> 2] | 0) + (HEAP32[$0 + 16 >> 2] | 0) >> 0] | 0) + 13 & 255; //@line 32732
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 32733
 FUNCTION_TABLE_viii[$21 & 7]($18, 0, $24); //@line 32734
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 524; //@line 32737
  $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 32738
  HEAP32[$25 >> 2] = $10; //@line 32739
  $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 32740
  HEAP8[$26 >> 0] = $12; //@line 32741
  $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 32742
  HEAP32[$27 >> 2] = $14; //@line 32743
  sp = STACKTOP; //@line 32744
  return;
 }
 ___async_unwind = 0; //@line 32747
 HEAP32[$ReallocAsyncCtx8 >> 2] = 524; //@line 32748
 $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 32749
 HEAP32[$25 >> 2] = $10; //@line 32750
 $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 32751
 HEAP8[$26 >> 0] = $12; //@line 32752
 $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 32753
 HEAP32[$27 >> 2] = $14; //@line 32754
 sp = STACKTOP; //@line 32755
 return;
}
function _equeue_create($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$033$i = 0, $$034$i = 0, $2 = 0, $21 = 0, $23 = 0, $27 = 0, $30 = 0, $5 = 0, $6 = 0;
 $2 = _malloc($1) | 0; //@line 2974
 if (!$2) {
  $$0 = -1; //@line 2977
  return $$0 | 0; //@line 2978
 }
 HEAP32[$0 + 12 >> 2] = $2; //@line 2981
 $5 = $0 + 20 | 0; //@line 2982
 HEAP32[$5 >> 2] = 0; //@line 2983
 $6 = $0 + 16 | 0; //@line 2984
 HEAP32[$6 >> 2] = 0; //@line 2985
 if ($1 | 0) {
  $$034$i = $1; //@line 2988
  $23 = 0; //@line 2988
  do {
   $23 = $23 + 1 | 0; //@line 2990
   $$034$i = $$034$i >>> 1; //@line 2991
  } while (($$034$i | 0) != 0);
  HEAP32[$6 >> 2] = $23; //@line 2999
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 3002
 HEAP32[$0 + 28 >> 2] = $1; //@line 3004
 HEAP32[$0 + 32 >> 2] = $2; //@line 3006
 HEAP32[$0 >> 2] = 0; //@line 3007
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 3010
 HEAP8[$0 + 9 >> 0] = 0; //@line 3012
 HEAP8[$0 + 8 >> 0] = 0; //@line 3014
 HEAP8[$0 + 36 >> 0] = 0; //@line 3016
 HEAP32[$0 + 40 >> 2] = 0; //@line 3018
 HEAP32[$0 + 44 >> 2] = 0; //@line 3020
 HEAP8[$0 + 184 >> 0] = 0; //@line 3022
 $21 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 3024
 if (($21 | 0) < 0) {
  $$033$i = $21; //@line 3027
 } else {
  $27 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 3030
  if (($27 | 0) < 0) {
   $$033$i = $27; //@line 3033
  } else {
   $30 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 3036
   $$033$i = ($30 | 0) < 0 ? $30 : 0; //@line 3039
  }
 }
 HEAP32[$5 >> 2] = $2; //@line 3042
 $$0 = $$033$i; //@line 3043
 return $$0 | 0; //@line 3044
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 10967
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10969
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10974
 $7 = HEAP32[$2 >> 2] | 0; //@line 10975
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 28 >> 2] | 0; //@line 10978
 if (HEAP8[$0 + 8 >> 0] & 1) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 10980
  FUNCTION_TABLE_vii[$10 & 31]($7, 0); //@line 10981
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 550; //@line 10984
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 10985
   HEAP32[$12 >> 2] = $2; //@line 10986
   sp = STACKTOP; //@line 10987
   return;
  }
  ___async_unwind = 0; //@line 10990
  HEAP32[$ReallocAsyncCtx3 >> 2] = 550; //@line 10991
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 10992
  HEAP32[$12 >> 2] = $2; //@line 10993
  sp = STACKTOP; //@line 10994
  return;
 } else {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 10997
  FUNCTION_TABLE_vii[$10 & 31]($7, $6); //@line 10998
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 549; //@line 11001
   $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 11002
   HEAP32[$11 >> 2] = $2; //@line 11003
   sp = STACKTOP; //@line 11004
   return;
  }
  ___async_unwind = 0; //@line 11007
  HEAP32[$ReallocAsyncCtx2 >> 2] = 549; //@line 11008
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 11009
  HEAP32[$11 >> 2] = $2; //@line 11010
  sp = STACKTOP; //@line 11011
  return;
 }
}
function __ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_175($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 142
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 146
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 148
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 149
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 153
  $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 154
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 155
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 300; //@line 158
   $10 = $ReallocAsyncCtx + 4 | 0; //@line 159
   HEAP32[$10 >> 2] = $4; //@line 160
   $11 = $ReallocAsyncCtx + 8 | 0; //@line 161
   HEAP32[$11 >> 2] = $AsyncRetVal; //@line 162
   sp = STACKTOP; //@line 163
   return;
  }
  ___async_unwind = 0; //@line 166
  HEAP32[$ReallocAsyncCtx >> 2] = 300; //@line 167
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 168
  HEAP32[$10 >> 2] = $4; //@line 169
  $11 = $ReallocAsyncCtx + 8 | 0; //@line 170
  HEAP32[$11 >> 2] = $AsyncRetVal; //@line 171
  sp = STACKTOP; //@line 172
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 179
 _mbed_assert_internal(13588, 13597, 141); //@line 180
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 301; //@line 183
  sp = STACKTOP; //@line 184
  return;
 }
 ___async_unwind = 0; //@line 187
 HEAP32[$ReallocAsyncCtx3 >> 2] = 301; //@line 188
 sp = STACKTOP; //@line 189
 return;
}
function __ZN7LoRaPHY20put_radio_to_standbyEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $12 = 0, $15 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 23571
 $1 = $0 + 4 | 0; //@line 23572
 $2 = HEAP32[$1 >> 2] | 0; //@line 23573
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 23576
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 23577
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 23578
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 542; //@line 23581
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 23583
  sp = STACKTOP; //@line 23584
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 23587
 $7 = HEAP32[$1 >> 2] | 0; //@line 23588
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0; //@line 23591
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 23592
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 23593
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 543; //@line 23596
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 23598
  sp = STACKTOP; //@line 23599
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 23602
 $12 = HEAP32[$1 >> 2] | 0; //@line 23603
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 23606
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 23607
 FUNCTION_TABLE_vi[$15 & 1023]($12); //@line 23608
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 544; //@line 23611
  sp = STACKTOP; //@line 23612
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 23615
  return;
 }
}
function __ZN7LoRaPHY18put_radio_to_sleepEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $12 = 0, $15 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 23519
 $1 = $0 + 4 | 0; //@line 23520
 $2 = HEAP32[$1 >> 2] | 0; //@line 23521
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 23524
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 23525
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 23526
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 539; //@line 23529
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 23531
  sp = STACKTOP; //@line 23532
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 23535
 $7 = HEAP32[$1 >> 2] | 0; //@line 23536
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0; //@line 23539
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 23540
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 23541
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 540; //@line 23544
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 23546
  sp = STACKTOP; //@line 23547
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 23550
 $12 = HEAP32[$1 >> 2] | 0; //@line 23551
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 23554
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 23555
 FUNCTION_TABLE_vi[$15 & 1023]($12); //@line 23556
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 541; //@line 23559
  sp = STACKTOP; //@line 23560
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 23563
  return;
 }
}
function __ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $2 = 0, $20 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8456
 STACKTOP = STACKTOP + 16 | 0; //@line 8457
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 8457
 $2 = $0 + 1876 | 0; //@line 8460
 if (!(HEAP32[$2 >> 2] | 0)) {
  _mbed_tracef(2, 12332, 13282, sp); //@line 8464
  $$0 = -1012; //@line 8465
  STACKTOP = sp; //@line 8466
  return $$0 | 0; //@line 8466
 }
 _mbed_tracef(16, 12332, 13392, sp + 8 | 0); //@line 8468
 $6 = HEAP32[$1 + 4 >> 2] | 0; //@line 8470
 $8 = HEAP32[$1 + 8 >> 2] | 0; //@line 8472
 $10 = HEAP32[$1 + 12 >> 2] | 0; //@line 8474
 $12 = HEAP8[$1 + 16 >> 0] | 0; //@line 8476
 HEAP8[$0 + 1936 >> 0] = 0; //@line 8478
 HEAP32[$0 + 1960 >> 2] = 0; //@line 8480
 HEAP32[$0 + 1956 >> 2] = 0; //@line 8482
 HEAP32[$0 + 1944 >> 2] = $8; //@line 8485
 HEAP32[$0 + 1948 >> 2] = $10; //@line 8487
 HEAP32[$0 + 1940 >> 2] = $6; //@line 8488
 HEAP8[$0 + 1952 >> 0] = $12; //@line 8490
 HEAP32[$2 >> 2] = 2; //@line 8491
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8492
 $20 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 8493
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 257; //@line 8496
  sp = STACKTOP; //@line 8497
  STACKTOP = sp; //@line 8498
  return 0; //@line 8498
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8500
 $$0 = $20; //@line 8501
 STACKTOP = sp; //@line 8502
 return $$0 | 0; //@line 8502
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20184
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20186
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20188
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 20191
  $5 = _mbedtls_cipher_cmac_finish(22460, 23772) | 0; //@line 20192
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 504; //@line 20195
   $6 = $ReallocAsyncCtx2 + 4 | 0; //@line 20196
   HEAP32[$6 >> 2] = $2; //@line 20197
   sp = STACKTOP; //@line 20198
   return;
  }
  HEAP32[___async_retval >> 2] = $5; //@line 20202
  ___async_unwind = 0; //@line 20203
  HEAP32[$ReallocAsyncCtx2 >> 2] = 504; //@line 20204
  $6 = $ReallocAsyncCtx2 + 4 | 0; //@line 20205
  HEAP32[$6 >> 2] = $2; //@line 20206
  sp = STACKTOP; //@line 20207
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 20210
  _mbedtls_cipher_free(22460); //@line 20211
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 505; //@line 20214
   $8 = $ReallocAsyncCtx5 + 4 | 0; //@line 20215
   HEAP32[$8 >> 2] = $AsyncRetVal; //@line 20216
   sp = STACKTOP; //@line 20217
   return;
  }
  ___async_unwind = 0; //@line 20220
  HEAP32[$ReallocAsyncCtx5 >> 2] = 505; //@line 20221
  $8 = $ReallocAsyncCtx5 + 4 | 0; //@line 20222
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 20223
  sp = STACKTOP; //@line 20224
  return;
 }
}
function __ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $26 = 0, $27 = 0, $31 = 0, $37 = 0, $4 = 0, $8 = 0, $or$cond$i = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10781
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10783
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10787
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10789
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10791
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 10793
 $18 = HEAP8[$0 + 36 >> 0] | 0; //@line 10797
 $21 = (HEAP32[$0 + 12 >> 2] | 0) + 369 | 0; //@line 10800
 $24 = __ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$4 >> 2] | 0, HEAP8[$2 >> 0] | 0, (HEAP8[$21 >> 0] | 0) != 0) | 0; //@line 10803
 HEAP8[$8 + 1 >> 0] = $24; //@line 10805
 $26 = $24 & 255; //@line 10806
 $27 = $10 & 255; //@line 10807
 if ($27 >>> 0 > $26 >>> 0) {
  HEAP8[$8 >> 0] = $24; //@line 10810
  __ZN14LoRaMacCommand20clear_command_bufferEv($12); //@line 10811
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($12); //@line 10812
  $$0 = 0; //@line 10813
 } else {
  HEAP8[$8 >> 0] = $26 - $10; //@line 10817
  $$0 = $27; //@line 10818
 }
 $31 = HEAP8[$2 >> 0] | 0; //@line 10820
 _mbed_tracef(16, 13704, 14009, $14); //@line 10821
 $37 = $$0 + ($18 & 255) | 0; //@line 10827
 $or$cond$i = $37 >>> 0 < 256 & $37 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$4 >> 2] | 0, $31, (HEAP8[$21 >> 0] | 0) != 0) | 0) & 255) >>> 0; //@line 10831
 HEAP32[___async_retval >> 2] = $or$cond$i ? 0 : -1010; //@line 10834
 return;
}
function __Z11compute_micPKhtS0_jhjPj__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 18036
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18038
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18040
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 18043
  $5 = _mbedtls_cipher_cmac_finish(22460, 23772) | 0; //@line 18044
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 499; //@line 18047
   $6 = $ReallocAsyncCtx3 + 4 | 0; //@line 18048
   HEAP32[$6 >> 2] = $2; //@line 18049
   sp = STACKTOP; //@line 18050
   return;
  }
  HEAP32[___async_retval >> 2] = $5; //@line 18054
  ___async_unwind = 0; //@line 18055
  HEAP32[$ReallocAsyncCtx3 >> 2] = 499; //@line 18056
  $6 = $ReallocAsyncCtx3 + 4 | 0; //@line 18057
  HEAP32[$6 >> 2] = $2; //@line 18058
  sp = STACKTOP; //@line 18059
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 18062
  _mbedtls_cipher_free(22460); //@line 18063
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 500; //@line 18066
   $8 = $ReallocAsyncCtx6 + 4 | 0; //@line 18067
   HEAP32[$8 >> 2] = $AsyncRetVal; //@line 18068
   sp = STACKTOP; //@line 18069
   return;
  }
  ___async_unwind = 0; //@line 18072
  HEAP32[$ReallocAsyncCtx6 >> 2] = 500; //@line 18073
  $8 = $ReallocAsyncCtx6 + 4 | 0; //@line 18074
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 18075
  sp = STACKTOP; //@line 18076
  return;
 }
}
function __ZN12LoRaWANStack21set_channel_data_rateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$1 = 0, $10 = 0, $2 = 0, $6 = 0, $AsyncCtx = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 8407
 STACKTOP = STACKTOP + 32 | 0; //@line 8408
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 8408
 $vararg_buffer1 = sp + 8 | 0; //@line 8409
 $2 = sp + 12 | 0; //@line 8411
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _mbed_tracef(2, 12332, 13282, sp); //@line 8416
  $$1 = -1012; //@line 8417
  STACKTOP = sp; //@line 8418
  return $$1 | 0; //@line 8418
 }
 HEAP32[$2 >> 2] = 2; //@line 8420
 $6 = $0 + 4 | 0; //@line 8421
 do {
  if (!(__ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($6, $2) | 0)) {
   HEAP32[$2 >> 2] = 21; //@line 8426
   HEAP8[$2 + 4 >> 0] = $1; //@line 8428
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 8429
   $10 = __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($6, $2) | 0; //@line 8430
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 256; //@line 8433
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 8435
    sp = STACKTOP; //@line 8436
    STACKTOP = sp; //@line 8437
    return 0; //@line 8437
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 8439
    $$0 = $10; //@line 8440
    break;
   }
  } else {
   _mbed_tracef(2, 12332, 13343, $vararg_buffer1); //@line 8444
   $$0 = -1003; //@line 8445
  }
 } while (0);
 $$1 = $$0; //@line 8448
 STACKTOP = sp; //@line 8449
 return $$1 | 0; //@line 8449
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 32108
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32110
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32112
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32114
 $7 = $2 + 12 | 0; //@line 32115
 $8 = HEAP32[$7 >> 2] | 0; //@line 32116
 if (!$8) {
  HEAP32[$4 >> 2] = 0; //@line 32119
  HEAP32[$6 + 16 >> 2] = 0; //@line 32121
  return;
 }
 $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 32125
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 32126
 FUNCTION_TABLE_vii[$11 & 31]($6, $2); //@line 32127
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 560; //@line 32130
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 32131
  HEAP32[$12 >> 2] = $7; //@line 32132
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 32133
  HEAP32[$13 >> 2] = $4; //@line 32134
  $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 32135
  HEAP32[$14 >> 2] = $6; //@line 32136
  sp = STACKTOP; //@line 32137
  return;
 }
 ___async_unwind = 0; //@line 32140
 HEAP32[$ReallocAsyncCtx2 >> 2] = 560; //@line 32141
 $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 32142
 HEAP32[$12 >> 2] = $7; //@line 32143
 $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 32144
 HEAP32[$13 >> 2] = $4; //@line 32145
 $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 32146
 HEAP32[$14 >> 2] = $6; //@line 32147
 sp = STACKTOP; //@line 32148
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 18320
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18322
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18324
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18326
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18328
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18330
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18332
 $13 = HEAP32[$2 >> 2] | 0; //@line 18333
 $15 = $10 + 12 | 0; //@line 18335
 HEAP32[$10 >> 2] = 432; //@line 18336
 HEAP32[$10 + 4 >> 2] = 0; //@line 18338
 HEAP32[$10 + 8 >> 2] = $4; //@line 18340
 HEAP32[$15 >> 2] = 912; //@line 18341
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 18342
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($13, $4 + 1016 | 0, $10); //@line 18343
 if (!___async) {
  ___async_unwind = 0; //@line 18346
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 433; //@line 18348
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $2; //@line 18350
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $4; //@line 18352
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $8; //@line 18354
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $6; //@line 18356
 HEAP32[$ReallocAsyncCtx9 + 20 >> 2] = $12; //@line 18358
 HEAP32[$ReallocAsyncCtx9 + 24 >> 2] = $10; //@line 18360
 HEAP32[$ReallocAsyncCtx9 + 28 >> 2] = $15; //@line 18362
 sp = STACKTOP; //@line 18363
 return;
}
function __ZN7LoRaMac22handle_rx2_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15443
 STACKTOP = STACKTOP + 16 | 0; //@line 15444
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15444
 $$byval_copy = sp; //@line 15445
 $1 = sp + 8 | 0; //@line 15446
 _mbed_tracef(16, 13704, 13723, $$byval_copy); //@line 15447
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 15449
 HEAP32[$1 >> 2] = 279; //@line 15450
 HEAP32[$1 + 4 >> 2] = 0; //@line 15452
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15453
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 15454
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 15454
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 15455
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 424; //@line 15458
  sp = STACKTOP; //@line 15459
  STACKTOP = sp; //@line 15460
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15462
 if ($4 | 0) {
  STACKTOP = sp; //@line 15465
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 15467
 _mbed_assert_internal(13588, 13597, 215); //@line 15468
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 425; //@line 15471
  sp = STACKTOP; //@line 15472
  STACKTOP = sp; //@line 15473
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15475
 STACKTOP = sp; //@line 15476
 return;
}
function __ZN7LoRaMac22handle_rx1_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15280
 STACKTOP = STACKTOP + 16 | 0; //@line 15281
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15281
 $$byval_copy = sp; //@line 15282
 $1 = sp + 8 | 0; //@line 15283
 _mbed_tracef(16, 13704, 14152, $$byval_copy); //@line 15284
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 15286
 HEAP32[$1 >> 2] = 417; //@line 15287
 HEAP32[$1 + 4 >> 2] = 0; //@line 15289
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15290
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 15291
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 15291
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 15292
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 418; //@line 15295
  sp = STACKTOP; //@line 15296
  STACKTOP = sp; //@line 15297
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15299
 if ($4 | 0) {
  STACKTOP = sp; //@line 15302
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 15304
 _mbed_assert_internal(13588, 13597, 207); //@line 15305
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 419; //@line 15308
  sp = STACKTOP; //@line 15309
  STACKTOP = sp; //@line 15310
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15312
 STACKTOP = sp; //@line 15313
 return;
}
function _wcrtomb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 do {
  if (!$0) {
   $$0 = 1; //@line 14567
  } else {
   if ($1 >>> 0 < 128) {
    HEAP8[$0 >> 0] = $1; //@line 14572
    $$0 = 1; //@line 14573
    break;
   }
   if (!(HEAP32[HEAP32[(___pthread_self_910() | 0) + 188 >> 2] >> 2] | 0)) {
    if (($1 & -128 | 0) == 57216) {
     HEAP8[$0 >> 0] = $1; //@line 14586
     $$0 = 1; //@line 14587
     break;
    } else {
     HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 14591
     $$0 = -1; //@line 14592
     break;
    }
   }
   if ($1 >>> 0 < 2048) {
    HEAP8[$0 >> 0] = $1 >>> 6 | 192; //@line 14602
    HEAP8[$0 + 1 >> 0] = $1 & 63 | 128; //@line 14606
    $$0 = 2; //@line 14607
    break;
   }
   if ($1 >>> 0 < 55296 | ($1 & -8192 | 0) == 57344) {
    HEAP8[$0 >> 0] = $1 >>> 12 | 224; //@line 14619
    HEAP8[$0 + 1 >> 0] = $1 >>> 6 & 63 | 128; //@line 14625
    HEAP8[$0 + 2 >> 0] = $1 & 63 | 128; //@line 14629
    $$0 = 3; //@line 14630
    break;
   }
   if (($1 + -65536 | 0) >>> 0 < 1048576) {
    HEAP8[$0 >> 0] = $1 >>> 18 | 240; //@line 14640
    HEAP8[$0 + 1 >> 0] = $1 >>> 12 & 63 | 128; //@line 14646
    HEAP8[$0 + 2 >> 0] = $1 >>> 6 & 63 | 128; //@line 14652
    HEAP8[$0 + 3 >> 0] = $1 & 63 | 128; //@line 14656
    $$0 = 4; //@line 14657
    break;
   } else {
    HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 14661
    $$0 = -1; //@line 14662
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 14667
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_84($0) {
 $0 = $0 | 0;
 var $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 23548
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23550
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23552
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23554
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23556
 if (!$AsyncRetVal) {
  HEAP8[___async_retval >> 0] = 0; //@line 23561
  return;
 }
 dest = $2 + 4 | 0; //@line 23565
 stop = dest + 52 | 0; //@line 23565
 do {
  HEAP32[dest >> 2] = 0; //@line 23565
  dest = dest + 4 | 0; //@line 23565
 } while ((dest | 0) < (stop | 0));
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 23566
 HEAP32[$2 + 8 >> 2] = $4; //@line 23568
 HEAP32[$2 + 12 >> 2] = -1; //@line 23570
 HEAP32[$2 + 48 >> 2] = 1; //@line 23572
 $15 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 28 >> 2] | 0; //@line 23575
 $16 = HEAP32[$6 >> 2] | 0; //@line 23576
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 23577
 FUNCTION_TABLE_viiii[$15 & 7]($AsyncRetVal, $2, $16, 1); //@line 23578
 if (!___async) {
  ___async_unwind = 0; //@line 23581
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 669; //@line 23583
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 23585
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 23587
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $2; //@line 23589
 sp = STACKTOP; //@line 23590
 return;
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $13 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17890
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $$0 = -1002; //@line 17894
  return $$0 | 0; //@line 17895
 }
 if (((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0) & 255) <= ($1 & 255)) {
  $$0 = -1003; //@line 17901
  return $$0 | 0; //@line 17902
 }
 $7 = HEAP32[$0 >> 2] | 0; //@line 17904
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 64 >> 2] | 0; //@line 17907
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 17908
 $11 = FUNCTION_TABLE_iii[$10 & 31]($7, $1) | 0; //@line 17909
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 488; //@line 17912
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 17914
  sp = STACKTOP; //@line 17915
  return 0; //@line 17916
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17918
 if (!$11) {
  $$0 = -1003; //@line 17920
  return $$0 | 0; //@line 17921
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 17923
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 17924
 __ZN7LoRaPHY18put_radio_to_sleepEv($13); //@line 17925
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 489; //@line 17928
  sp = STACKTOP; //@line 17929
  return 0; //@line 17930
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17932
 $$0 = 0; //@line 17933
 return $$0 | 0; //@line 17934
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_201($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 11570
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11574
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11576
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 11577
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 11581
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 11582
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 11583
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 161; //@line 11586
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 11587
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 11588
   sp = STACKTOP; //@line 11589
   return;
  }
  ___async_unwind = 0; //@line 11592
  HEAP32[$ReallocAsyncCtx2 >> 2] = 161; //@line 11593
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 11594
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 11595
  sp = STACKTOP; //@line 11596
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 11603
 _mbed_assert_internal(13588, 12372, 836); //@line 11604
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 162; //@line 11607
  sp = STACKTOP; //@line 11608
  return;
 }
 ___async_unwind = 0; //@line 11611
 HEAP32[$ReallocAsyncCtx9 >> 2] = 162; //@line 11612
 sp = STACKTOP; //@line 11613
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_241($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15016
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15020
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15022
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 15023
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 15027
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 15028
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 15029
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 173; //@line 15032
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 15033
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 15034
   sp = STACKTOP; //@line 15035
   return;
  }
  ___async_unwind = 0; //@line 15038
  HEAP32[$ReallocAsyncCtx2 >> 2] = 173; //@line 15039
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 15040
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 15041
  sp = STACKTOP; //@line 15042
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(4) | 0; //@line 15049
 _mbed_assert_internal(13588, 12372, 712); //@line 15050
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 174; //@line 15053
  sp = STACKTOP; //@line 15054
  return;
 }
 ___async_unwind = 0; //@line 15057
 HEAP32[$ReallocAsyncCtx10 >> 2] = 174; //@line 15058
 sp = STACKTOP; //@line 15059
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_292($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19585
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19589
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19591
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 19592
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 19596
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 19597
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 19598
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 149; //@line 19601
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 19602
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 19603
   sp = STACKTOP; //@line 19604
   return;
  }
  ___async_unwind = 0; //@line 19607
  HEAP32[$ReallocAsyncCtx2 >> 2] = 149; //@line 19608
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 19609
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 19610
  sp = STACKTOP; //@line 19611
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(4) | 0; //@line 19618
 _mbed_assert_internal(13588, 12372, 781); //@line 19619
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 150; //@line 19622
  sp = STACKTOP; //@line 19623
  return;
 }
 ___async_unwind = 0; //@line 19626
 HEAP32[$ReallocAsyncCtx12 >> 2] = 150; //@line 19627
 sp = STACKTOP; //@line 19628
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_291($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 19536
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19540
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19542
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 19543
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 19547
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 19548
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 19549
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 153; //@line 19552
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 19553
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 19554
   sp = STACKTOP; //@line 19555
   return;
  }
  ___async_unwind = 0; //@line 19558
  HEAP32[$ReallocAsyncCtx4 >> 2] = 153; //@line 19559
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 19560
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 19561
  sp = STACKTOP; //@line 19562
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(4) | 0; //@line 19569
 _mbed_assert_internal(13588, 12372, 792); //@line 19570
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 154; //@line 19573
  sp = STACKTOP; //@line 19574
  return;
 }
 ___async_unwind = 0; //@line 19577
 HEAP32[$ReallocAsyncCtx11 >> 2] = 154; //@line 19578
 sp = STACKTOP; //@line 19579
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_290($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 19487
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19491
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19493
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 19494
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 19498
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 19499
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 19500
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 157; //@line 19503
   $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 19504
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 19505
   sp = STACKTOP; //@line 19506
   return;
  }
  ___async_unwind = 0; //@line 19509
  HEAP32[$ReallocAsyncCtx6 >> 2] = 157; //@line 19510
  $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 19511
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 19512
  sp = STACKTOP; //@line 19513
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(4) | 0; //@line 19520
 _mbed_assert_internal(13588, 12372, 816); //@line 19521
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 158; //@line 19524
  sp = STACKTOP; //@line 19525
  return;
 }
 ___async_unwind = 0; //@line 19528
 HEAP32[$ReallocAsyncCtx10 >> 2] = 158; //@line 19529
 sp = STACKTOP; //@line 19530
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_238($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 14900
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14904
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14906
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14908
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14910
 $11 = $4 + 12 | 0; //@line 14912
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 14913
 $13 = HEAP8[$6 + 12 >> 0] | 0; //@line 14915
 $15 = HEAP8[$6 + 13 >> 0] | 0; //@line 14917
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 14918
 $16 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($8, $4, $13, $15) | 0; //@line 14919
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 176; //@line 14922
  $17 = $ReallocAsyncCtx5 + 4 | 0; //@line 14923
  HEAP32[$17 >> 2] = $11; //@line 14924
  $18 = $ReallocAsyncCtx5 + 8 | 0; //@line 14925
  HEAP32[$18 >> 2] = $10; //@line 14926
  sp = STACKTOP; //@line 14927
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 14931
 ___async_unwind = 0; //@line 14932
 HEAP32[$ReallocAsyncCtx5 >> 2] = 176; //@line 14933
 $17 = $ReallocAsyncCtx5 + 4 | 0; //@line 14934
 HEAP32[$17 >> 2] = $11; //@line 14935
 $18 = $ReallocAsyncCtx5 + 8 | 0; //@line 14936
 HEAP32[$18 >> 2] = $10; //@line 14937
 sp = STACKTOP; //@line 14938
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_49($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 20868
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20872
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20874
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 20876
 $10 = HEAP8[$0 + 17 >> 0] | 0; //@line 20878
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 20880
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 20882
 $15 = $6 + 12 | 0; //@line 20884
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 20885
 $16 = $6 + 16 | 0; //@line 20886
 HEAP8[$16 >> 0] = $8; //@line 20887
 HEAP8[$6 + 17 >> 0] = $10; //@line 20889
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 20890
 $18 = _equeue_alloc($12, 20) | 0; //@line 20891
 if (!___async) {
  HEAP32[___async_retval >> 2] = $18; //@line 20895
  ___async_unwind = 0; //@line 20896
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 222; //@line 20898
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $4; //@line 20900
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $14; //@line 20902
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $6; //@line 20904
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $15; //@line 20906
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $15; //@line 20908
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $16; //@line 20910
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $12; //@line 20912
 sp = STACKTOP; //@line 20913
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_240($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 14967
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14971
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14973
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 14974
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 14978
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 14979
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 14980
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 177; //@line 14983
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 14984
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 14985
   sp = STACKTOP; //@line 14986
   return;
  }
  ___async_unwind = 0; //@line 14989
  HEAP32[$ReallocAsyncCtx4 >> 2] = 177; //@line 14990
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 14991
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 14992
  sp = STACKTOP; //@line 14993
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 15000
 _mbed_assert_internal(13588, 12372, 734); //@line 15001
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 178; //@line 15004
  sp = STACKTOP; //@line 15005
  return;
 }
 ___async_unwind = 0; //@line 15008
 HEAP32[$ReallocAsyncCtx9 >> 2] = 178; //@line 15009
 sp = STACKTOP; //@line 15010
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 25381
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25383
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25385
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25387
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25389
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25391
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 0; //@line 25395
 HEAP8[$4 >> 0] = 1; //@line 25396
 $14 = $2 + 944 | 0; //@line 25397
 HEAP8[$14 >> 0] = HEAP8[$14 >> 0] | 32; //@line 25400
 $17 = HEAP32[$6 >> 2] | 0; //@line 25401
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 25403
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($17, $2 + 996 | 0, 1); //@line 25404
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 338; //@line 25407
  $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 25408
  HEAP32[$19 >> 2] = $8; //@line 25409
  $20 = $ReallocAsyncCtx5 + 8 | 0; //@line 25410
  HEAP32[$20 >> 2] = $10; //@line 25411
  sp = STACKTOP; //@line 25412
  return;
 }
 ___async_unwind = 0; //@line 25415
 HEAP32[$ReallocAsyncCtx5 >> 2] = 338; //@line 25416
 $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 25417
 HEAP32[$19 >> 2] = $8; //@line 25418
 $20 = $ReallocAsyncCtx5 + 8 | 0; //@line 25419
 HEAP32[$20 >> 2] = $10; //@line 25420
 sp = STACKTOP; //@line 25421
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_212($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 12604
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12608
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12610
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12612
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12614
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12616
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 12619
 $17 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 12620
 if ($17 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 12626
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($17, $8, $10, $12, $14); //@line 12627
   if (!___async) {
    ___async_unwind = 0; //@line 12630
   }
   HEAP32[$ReallocAsyncCtx3 >> 2] = 682; //@line 12632
   HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 12634
   HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 12636
   HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 12638
   HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 12640
   HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 12642
   HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 12644
   HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $14 & 1; //@line 12647
   sp = STACKTOP; //@line 12648
   return;
  }
 }
 return;
}
function __ZN12LoRaWANStackC2Ev__async_cb_297($0) {
 $0 = $0 | 0;
 var $$pre106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19760
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19762
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19764
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19766
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19768
 $$pre106 = HEAP32[$2 >> 2] | 0; //@line 19769
 if (!$$pre106) {
  HEAP32[$4 >> 2] = 0; //@line 19772
  return;
 }
 $11 = HEAP32[$$pre106 + 4 >> 2] | 0; //@line 19776
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 19777
 FUNCTION_TABLE_vii[$11 & 31]($6, $8); //@line 19778
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 144; //@line 19781
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 19782
  HEAP32[$12 >> 2] = $2; //@line 19783
  $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 19784
  HEAP32[$13 >> 2] = $4; //@line 19785
  $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 19786
  HEAP32[$14 >> 2] = $8; //@line 19787
  sp = STACKTOP; //@line 19788
  return;
 }
 ___async_unwind = 0; //@line 19791
 HEAP32[$ReallocAsyncCtx3 >> 2] = 144; //@line 19792
 $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 19793
 HEAP32[$12 >> 2] = $2; //@line 19794
 $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 19795
 HEAP32[$13 >> 2] = $4; //@line 19796
 $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 19797
 HEAP32[$14 >> 2] = $8; //@line 19798
 sp = STACKTOP; //@line 19799
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_311($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 20949
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20951
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 20953
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20955
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20957
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20959
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20961
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20963
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20965
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20967
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 20968
 __ZN4mbed5Timer5startEv($2); //@line 20969
 if (!___async) {
  ___async_unwind = 0; //@line 20972
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 62; //@line 20974
 HEAP16[$ReallocAsyncCtx4 + 4 >> 1] = $4; //@line 20976
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $2; //@line 20978
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $6; //@line 20980
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $8; //@line 20982
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $10; //@line 20984
 HEAP32[$ReallocAsyncCtx4 + 24 >> 2] = $12; //@line 20986
 HEAP32[$ReallocAsyncCtx4 + 28 >> 2] = $14; //@line 20988
 HEAP32[$ReallocAsyncCtx4 + 32 >> 2] = $16; //@line 20990
 HEAP32[$ReallocAsyncCtx4 + 36 >> 2] = $18; //@line 20992
 sp = STACKTOP; //@line 20993
 return;
}
function __ZN7LoRaMac34handle_mac_state_check_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 12851
 STACKTOP = STACKTOP + 16 | 0; //@line 12852
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12852
 $$byval_copy = sp + 8 | 0; //@line 12853
 $1 = sp; //@line 12854
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 12856
 HEAP32[$1 >> 2] = 373; //@line 12857
 HEAP32[$1 + 4 >> 2] = 0; //@line 12859
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12860
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 12861
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 12861
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 12862
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 374; //@line 12865
  sp = STACKTOP; //@line 12866
  STACKTOP = sp; //@line 12867
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 12869
 if ($4 | 0) {
  STACKTOP = sp; //@line 12872
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 12874
 _mbed_assert_internal(13588, 13597, 185); //@line 12875
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 375; //@line 12878
  sp = STACKTOP; //@line 12879
  STACKTOP = sp; //@line 12880
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12882
 STACKTOP = sp; //@line 12883
 return;
}
function __ZN7LoRaMac29handle_delayed_tx_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15206
 STACKTOP = STACKTOP + 16 | 0; //@line 15207
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15207
 $$byval_copy = sp + 8 | 0; //@line 15208
 $1 = sp; //@line 15209
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 15211
 HEAP32[$1 >> 2] = 377; //@line 15212
 HEAP32[$1 + 4 >> 2] = 0; //@line 15214
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15215
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 15216
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 15216
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 15217
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 413; //@line 15220
  sp = STACKTOP; //@line 15221
  STACKTOP = sp; //@line 15222
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15224
 if ($4 | 0) {
  STACKTOP = sp; //@line 15227
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 15229
 _mbed_assert_internal(13588, 13597, 192); //@line 15230
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 414; //@line 15233
  sp = STACKTOP; //@line 15234
  STACKTOP = sp; //@line 15235
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15237
 STACKTOP = sp; //@line 15238
 return;
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb_220($0) {
 $0 = $0 | 0;
 var $19 = 0, $2 = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 13427
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13429
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13431
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 13436
  _mbed_assert_internal(13588, 13597, 215); //@line 13437
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 357; //@line 13440
   $7 = $ReallocAsyncCtx4 + 4 | 0; //@line 13441
   HEAP32[$7 >> 2] = $2; //@line 13442
   $8 = $ReallocAsyncCtx4 + 8 | 0; //@line 13443
   HEAP32[$8 >> 2] = $4; //@line 13444
   sp = STACKTOP; //@line 13445
   return;
  }
  ___async_unwind = 0; //@line 13448
  HEAP32[$ReallocAsyncCtx4 >> 2] = 357; //@line 13449
  $7 = $ReallocAsyncCtx4 + 4 | 0; //@line 13450
  HEAP32[$7 >> 2] = $2; //@line 13451
  $8 = $ReallocAsyncCtx4 + 8 | 0; //@line 13452
  HEAP32[$8 >> 2] = $4; //@line 13453
  sp = STACKTOP; //@line 13454
  return;
 }
 HEAP32[$4 + 364 >> 2] = 2; //@line 13458
 if (HEAP8[$4 + 373 >> 0] | 0) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 6; //@line 13466
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 6; //@line 13471
 $19 = $4 + 944 | 0; //@line 13472
 HEAP8[$19 >> 0] = HEAP8[$19 >> 0] | 32; //@line 13475
 return;
}
function __ZN7LoRaMac18handle_ack_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15243
 STACKTOP = STACKTOP + 16 | 0; //@line 15244
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15244
 $$byval_copy = sp + 8 | 0; //@line 15245
 $1 = sp; //@line 15246
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 15248
 HEAP32[$1 >> 2] = 304; //@line 15249
 HEAP32[$1 + 4 >> 2] = 0; //@line 15251
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15252
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 15253
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 15253
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 15254
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 415; //@line 15257
  sp = STACKTOP; //@line 15258
  STACKTOP = sp; //@line 15259
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15261
 if ($4 | 0) {
  STACKTOP = sp; //@line 15264
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 15266
 _mbed_assert_internal(13588, 13597, 199); //@line 15267
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 416; //@line 15270
  sp = STACKTOP; //@line 15271
  STACKTOP = sp; //@line 15272
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15274
 STACKTOP = sp; //@line 15275
 return;
}
function __ZN7LoRaMac17handle_tx_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 12727
 STACKTOP = STACKTOP + 16 | 0; //@line 12728
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12728
 $$byval_copy = sp + 8 | 0; //@line 12729
 $1 = sp; //@line 12730
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 12732
 HEAP32[$1 >> 2] = 367; //@line 12733
 HEAP32[$1 + 4 >> 2] = 0; //@line 12735
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12736
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 12737
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 12737
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 12738
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 368; //@line 12741
  sp = STACKTOP; //@line 12742
  STACKTOP = sp; //@line 12743
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 12745
 if ($4 | 0) {
  STACKTOP = sp; //@line 12748
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 12750
 _mbed_assert_internal(13588, 13597, 162); //@line 12751
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 369; //@line 12754
  sp = STACKTOP; //@line 12755
  STACKTOP = sp; //@line 12756
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12758
 STACKTOP = sp; //@line 12759
 return;
}
function __ZN7LoRaMac17handle_rx_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 12531
 STACKTOP = STACKTOP + 16 | 0; //@line 12532
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12532
 $$byval_copy = sp + 8 | 0; //@line 12533
 $1 = sp; //@line 12534
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 12536
 HEAP32[$1 >> 2] = 360; //@line 12537
 HEAP32[$1 + 4 >> 2] = 0; //@line 12539
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12540
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 12541
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 12541
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 12542
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 361; //@line 12545
  sp = STACKTOP; //@line 12546
  STACKTOP = sp; //@line 12547
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 12549
 if ($4 | 0) {
  STACKTOP = sp; //@line 12552
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 12554
 _mbed_assert_internal(13588, 13597, 155); //@line 12555
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 362; //@line 12558
  sp = STACKTOP; //@line 12559
  STACKTOP = sp; //@line 12560
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12562
 STACKTOP = sp; //@line 12563
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_26($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 18994
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18996
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18998
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19000
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19002
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19004
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19006
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19008
 _srand(HEAP32[___async_retval >> 2] | 0); //@line 19011
 HEAP8[$2 + 368 >> 0] = 1; //@line 19013
 $17 = HEAP32[$14 >> 2] | 0; //@line 19014
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(32) | 0; //@line 19015
 __ZN7LoRaPHY25setup_public_network_modeEb($17, 1); //@line 19016
 if (!___async) {
  ___async_unwind = 0; //@line 19019
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 427; //@line 19021
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 19023
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $4; //@line 19025
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $6; //@line 19027
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $8; //@line 19029
 HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $10; //@line 19031
 HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $12; //@line 19033
 HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $14; //@line 19035
 sp = STACKTOP; //@line 19036
 return;
}
function __ZN14lorawan_timersD2Ev__async_cb_72($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22759
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22761
 $4 = HEAP32[$2 + 48 >> 2] | 0; //@line 22763
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 22768
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 22769
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 36 | 0); //@line 22770
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 273; //@line 22773
   $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 22774
   HEAP32[$9 >> 2] = $2; //@line 22775
   sp = STACKTOP; //@line 22776
   return;
  }
  ___async_unwind = 0; //@line 22779
  HEAP32[$ReallocAsyncCtx4 >> 2] = 273; //@line 22780
  $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 22781
  HEAP32[$9 >> 2] = $2; //@line 22782
  sp = STACKTOP; //@line 22783
  return;
 }
 $11 = HEAP32[$2 + 28 >> 2] | 0; //@line 22787
 if (!$11) {
  return;
 }
 $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 22794
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 22795
 FUNCTION_TABLE_vi[$15 & 1023]($2 + 16 | 0); //@line 22796
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 274; //@line 22799
  sp = STACKTOP; //@line 22800
  return;
 }
 ___async_unwind = 0; //@line 22803
 HEAP32[$ReallocAsyncCtx5 >> 2] = 274; //@line 22804
 sp = STACKTOP; //@line 22805
 return;
}
function __ZN7LoRaMac15handle_rx_errorEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 12343
 STACKTOP = STACKTOP + 16 | 0; //@line 12344
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12344
 $$byval_copy = sp + 8 | 0; //@line 12345
 $1 = sp; //@line 12346
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 12348
 HEAP32[$1 >> 2] = 353; //@line 12349
 HEAP32[$1 + 4 >> 2] = 0; //@line 12351
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12352
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 12353
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 12353
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 12354
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 354; //@line 12357
  sp = STACKTOP; //@line 12358
  STACKTOP = sp; //@line 12359
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 12361
 if ($4 | 0) {
  STACKTOP = sp; //@line 12364
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 12366
 _mbed_assert_internal(13588, 13597, 148); //@line 12367
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 355; //@line 12370
  sp = STACKTOP; //@line 12371
  STACKTOP = sp; //@line 12372
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12374
 STACKTOP = sp; //@line 12375
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_333($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26346
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26348
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26350
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26354
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26356
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26358
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26360
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26362
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26364
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26366
 $21 = HEAP32[HEAP32[HEAP32[$0 + 12 >> 2] >> 2] >> 2] | 0; //@line 26368
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 26369
 FUNCTION_TABLE_vii[$21 & 31]($8, $10); //@line 26370
 if (!___async) {
  ___async_unwind = 0; //@line 26373
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 385; //@line 26375
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 26377
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 26379
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $12; //@line 26381
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $14; //@line 26383
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $16; //@line 26385
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $18; //@line 26387
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $20; //@line 26389
 sp = STACKTOP; //@line 26390
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_332($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26295
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26297
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26299
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26301
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26303
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26305
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26307
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26309
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26311
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26313
 $21 = HEAP32[HEAP32[HEAP32[$0 + 40 >> 2] >> 2] >> 2] | 0; //@line 26317
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 26318
 FUNCTION_TABLE_vii[$21 & 31]($6, $8); //@line 26319
 if (!___async) {
  ___async_unwind = 0; //@line 26322
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 387; //@line 26324
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 26326
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 26328
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $10; //@line 26330
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $12; //@line 26332
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $14; //@line 26334
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $16; //@line 26336
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $18; //@line 26338
 sp = STACKTOP; //@line 26339
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7250
 $2 = HEAP8[$0 + 16 >> 0] | 0; //@line 7252
 $4 = HEAP8[$0 + 17 >> 0] | 0; //@line 7254
 $5 = $0 + 12 | 0; //@line 7255
 $6 = HEAP32[$5 >> 2] | 0; //@line 7256
 do {
  if (!$6) {
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7260
   _mbed_assert_internal(15615, 15620, 1677); //@line 7261
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 230; //@line 7264
    HEAP32[$AsyncCtx2 + 4 >> 2] = $5; //@line 7266
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 7268
    HEAP8[$AsyncCtx2 + 12 >> 0] = $2; //@line 7270
    HEAP8[$AsyncCtx2 + 13 >> 0] = $4; //@line 7272
    sp = STACKTOP; //@line 7273
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7276
    $13 = HEAP32[$5 >> 2] | 0; //@line 7278
    break;
   }
  } else {
   $13 = $6; //@line 7282
  }
 } while (0);
 $12 = HEAP32[$13 >> 2] | 0; //@line 7285
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7286
 FUNCTION_TABLE_viii[$12 & 7]($0, $2, $4); //@line 7287
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 231; //@line 7290
  sp = STACKTOP; //@line 7291
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7294
  return;
 }
}
function __ZN12radio_eventsD2Ev__async_cb_58($0) {
 $0 = $0 | 0;
 var $11 = 0, $14 = 0, $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 21720
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21722
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 21724
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 21729
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 21730
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 16 | 0); //@line 21731
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 268; //@line 21734
   $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 21735
   HEAP32[$9 >> 2] = $2; //@line 21736
   sp = STACKTOP; //@line 21737
   return;
  }
  ___async_unwind = 0; //@line 21740
  HEAP32[$ReallocAsyncCtx6 >> 2] = 268; //@line 21741
  $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 21742
  HEAP32[$9 >> 2] = $2; //@line 21743
  sp = STACKTOP; //@line 21744
  return;
 }
 $11 = HEAP32[$2 + 12 >> 2] | 0; //@line 21748
 if (!$11) {
  return;
 }
 $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 21754
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 21755
 FUNCTION_TABLE_vi[$14 & 1023]($2); //@line 21756
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 269; //@line 21759
  sp = STACKTOP; //@line 21760
  return;
 }
 ___async_unwind = 0; //@line 21763
 HEAP32[$ReallocAsyncCtx7 >> 2] = 269; //@line 21764
 sp = STACKTOP; //@line 21765
 return;
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_300($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19942
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19944
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19946
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19948
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$4 + 364 >> 2] = 2; //@line 19954
  HEAP32[___async_retval >> 2] = $6; //@line 19956
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 19959
 _mbed_assert_internal(13588, 13597, 215); //@line 19960
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 465; //@line 19963
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 19964
  HEAP32[$9 >> 2] = $2; //@line 19965
  $10 = $ReallocAsyncCtx3 + 8 | 0; //@line 19966
  HEAP32[$10 >> 2] = $4; //@line 19967
  $11 = $ReallocAsyncCtx3 + 12 | 0; //@line 19968
  HEAP32[$11 >> 2] = $6; //@line 19969
  sp = STACKTOP; //@line 19970
  return;
 }
 ___async_unwind = 0; //@line 19973
 HEAP32[$ReallocAsyncCtx3 >> 2] = 465; //@line 19974
 $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 19975
 HEAP32[$9 >> 2] = $2; //@line 19976
 $10 = $ReallocAsyncCtx3 + 8 | 0; //@line 19977
 HEAP32[$10 >> 2] = $4; //@line 19978
 $11 = $ReallocAsyncCtx3 + 12 | 0; //@line 19979
 HEAP32[$11 >> 2] = $6; //@line 19980
 sp = STACKTOP; //@line 19981
 return;
}
function _equeue_create_inplace($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$033 = 0, $$034 = 0, $20 = 0, $22 = 0, $26 = 0, $29 = 0, $5 = 0;
 HEAP32[$0 + 12 >> 2] = $2; //@line 3054
 HEAP32[$0 + 20 >> 2] = 0; //@line 3056
 $5 = $0 + 16 | 0; //@line 3057
 HEAP32[$5 >> 2] = 0; //@line 3058
 if ($1 | 0) {
  $$034 = $1; //@line 3061
  $22 = 0; //@line 3061
  do {
   $22 = $22 + 1 | 0; //@line 3063
   $$034 = $$034 >>> 1; //@line 3064
  } while (($$034 | 0) != 0);
  HEAP32[$5 >> 2] = $22; //@line 3072
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 3075
 HEAP32[$0 + 28 >> 2] = $1; //@line 3077
 HEAP32[$0 + 32 >> 2] = $2; //@line 3079
 HEAP32[$0 >> 2] = 0; //@line 3080
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 3083
 HEAP8[$0 + 9 >> 0] = 0; //@line 3085
 HEAP8[$0 + 8 >> 0] = 0; //@line 3087
 HEAP8[$0 + 36 >> 0] = 0; //@line 3089
 HEAP32[$0 + 40 >> 2] = 0; //@line 3091
 HEAP32[$0 + 44 >> 2] = 0; //@line 3093
 HEAP8[$0 + 184 >> 0] = 0; //@line 3095
 $20 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 3097
 if (($20 | 0) < 0) {
  $$033 = $20; //@line 3100
  return $$033 | 0; //@line 3101
 }
 $26 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 3104
 if (($26 | 0) < 0) {
  $$033 = $26; //@line 3107
  return $$033 | 0; //@line 3108
 }
 $29 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 3111
 $$033 = ($29 | 0) < 0 ? $29 : 0; //@line 3114
 return $$033 | 0; //@line 3115
}
function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $26 = 0, $8 = 0, $9 = 0, $8$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$0914 = $2; //@line 13451
  $8 = $0; //@line 13451
  $9 = $1; //@line 13451
  while (1) {
   $10 = ___uremdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 13453
   $$0914 = $$0914 + -1 | 0; //@line 13457
   HEAP8[$$0914 >> 0] = $10 & 255 | 48; //@line 13458
   $8$looptemp = $8;
   $8 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 13459
   if (!($9 >>> 0 > 9 | ($9 | 0) == 9 & $8$looptemp >>> 0 > 4294967295)) {
    break;
   } else {
    $9 = tempRet0; //@line 13467
   }
  }
  $$010$lcssa$off0 = $8; //@line 13472
  $$09$lcssa = $$0914; //@line 13472
 } else {
  $$010$lcssa$off0 = $0; //@line 13474
  $$09$lcssa = $2; //@line 13474
 }
 if (!$$010$lcssa$off0) {
  $$1$lcssa = $$09$lcssa; //@line 13478
 } else {
  $$012 = $$010$lcssa$off0; //@line 13480
  $$111 = $$09$lcssa; //@line 13480
  while (1) {
   $26 = $$111 + -1 | 0; //@line 13485
   HEAP8[$26 >> 0] = ($$012 >>> 0) % 10 | 0 | 48; //@line 13486
   if ($$012 >>> 0 < 10) {
    $$1$lcssa = $26; //@line 13490
    break;
   } else {
    $$012 = ($$012 >>> 0) / 10 | 0; //@line 13493
    $$111 = $26; //@line 13493
   }
  }
 }
 return $$1$lcssa | 0; //@line 13497
}
function __ZN7LoRaMac14handle_tx_doneEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 9146
 STACKTOP = STACKTOP + 16 | 0; //@line 9147
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9147
 $$byval_copy = sp + 8 | 0; //@line 9148
 $1 = sp; //@line 9149
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 9151
 HEAP32[$1 >> 2] = 275; //@line 9152
 HEAP32[$1 + 4 >> 2] = 0; //@line 9154
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9155
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 9156
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 9156
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 9157
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 276; //@line 9160
  sp = STACKTOP; //@line 9161
  STACKTOP = sp; //@line 9162
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9164
 if ($4 | 0) {
  STACKTOP = sp; //@line 9167
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9169
 _mbed_assert_internal(13588, 13597, 134); //@line 9170
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 277; //@line 9173
  sp = STACKTOP; //@line 9174
  STACKTOP = sp; //@line 9175
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 9177
 STACKTOP = sp; //@line 9178
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_21($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 18550
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18554
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18556
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18558
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 18559
 if (!$9) {
  HEAP32[$6 + 988 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[$4 >> 2] | 0) | 0; //@line 18565
  HEAP32[___async_retval >> 2] = 0; //@line 18567
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 18571
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 18572
 FUNCTION_TABLE_vi[$12 & 1023]($8); //@line 18573
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 443; //@line 18576
  $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 18577
  HEAP32[$13 >> 2] = $4; //@line 18578
  $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 18579
  HEAP32[$14 >> 2] = $6; //@line 18580
  sp = STACKTOP; //@line 18581
  return;
 }
 ___async_unwind = 0; //@line 18584
 HEAP32[$ReallocAsyncCtx5 >> 2] = 443; //@line 18585
 $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 18586
 HEAP32[$13 >> 2] = $4; //@line 18587
 $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 18588
 HEAP32[$14 >> 2] = $6; //@line 18589
 sp = STACKTOP; //@line 18590
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_315($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 21222
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21224
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 21226
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21228
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21230
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21232
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21234
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21236
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21238
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 21239
 __ZN4mbed5TimerC2Ev($2); //@line 21240
 if (!___async) {
  ___async_unwind = 0; //@line 21243
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 21245
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 21247
 HEAP16[$ReallocAsyncCtx3 + 8 >> 1] = $4; //@line 21249
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 21251
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 21253
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 21255
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 21257
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $2; //@line 21259
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $14; //@line 21261
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $16; //@line 21263
 sp = STACKTOP; //@line 21264
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_65($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 22188
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22192
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22194
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22196
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22198
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22200
 $13 = $6 + 12 | 0; //@line 22202
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 22203
 $14 = $6 + 16 | 0; //@line 22204
 HEAP32[$14 >> 2] = $8; //@line 22205
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 22206
 $15 = _equeue_alloc($10, 20) | 0; //@line 22207
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 22211
  ___async_unwind = 0; //@line 22212
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 213; //@line 22214
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $4; //@line 22216
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $12; //@line 22218
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $13; //@line 22220
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $14; //@line 22222
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $10; //@line 22224
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $13; //@line 22226
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $6; //@line 22228
 sp = STACKTOP; //@line 22229
 return;
}
function __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$ = 0, $$$i = 0, $$0 = 0.0, $10 = 0, $13 = 0, $16 = 0, $23 = 0, $28 = 0, $41 = 0, $5 = 0, $51 = 0, $7 = 0, $8 = 0;
 $5 = $1 << 24 >> 24; //@line 21874
 $7 = HEAP8[$0 + 29 >> 0] | 0; //@line 21876
 $8 = $7 & 255; //@line 21877
 $$ = ($5 | 0) < ($8 | 0) ? $5 : $8; //@line 21879
 $10 = $$ & 255; //@line 21880
 HEAP8[$4 + 1 >> 0] = $10; //@line 21882
 $13 = HEAP32[$0 + 80 >> 2] | 0; //@line 21884
 $16 = HEAP32[$13 + (($$ & 255) << 2) >> 2] | 0; //@line 21887
 HEAP8[$4 + 2 >> 0] = ($16 | 0) == 5e5 ? 2 : ($16 | 0) == 25e4 & 1; //@line 21893
 $23 = HEAP32[$0 + 88 >> 2] | 0; //@line 21900
 if (HEAP8[$0 + 14 >> 0] | 0 ? $7 << 24 >> 24 == $10 << 24 >> 24 : 0) {
  $$0 = 8.0 / +(HEAPU8[$23 + $8 >> 0] | 0); //@line 21906
 } else {
  $28 = $$ & 255; //@line 21908
  $$0 = +(1 << HEAPU8[$23 + $28 >> 0] | 0) / +((HEAP32[$13 + ($28 << 2) >> 2] | 0) >>> 0) * 1.0e3; //@line 21919
 }
 $41 = $2 & 255; //@line 21923
 $51 = ~~+Math_ceil(+(($$0 * +(($41 << 1) + -8 | 0) + +($3 << 1 >>> 0)) / $$0)) >>> 0; //@line 21933
 $$$i = $51 >>> 0 > $41 >>> 0 ? $51 : $41; //@line 21935
 HEAP32[$4 + 8 >> 2] = $$$i; //@line 21936
 HEAP32[$4 + 12 >> 2] = ~~+Math_ceil(+($$0 * 4.0 - $$0 * +($$$i >>> 0) * .5 + -1.0)); //@line 21945
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_137($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 29082
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29084
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29086
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29088
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29090
 $9 = $2 + 944 | 0; //@line 29091
 HEAP8[$9 >> 0] = 2 | HEAP8[$9 >> 0] & -7; //@line 29095
 $13 = $2 + 944 | 0; //@line 29096
 HEAP8[$13 >> 0] = HEAP8[$13 >> 0] | 32; //@line 29099
 $16 = HEAP32[$4 >> 2] | 0; //@line 29100
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 29102
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($16, $2 + 996 | 0, 1); //@line 29103
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 338; //@line 29106
  $18 = $ReallocAsyncCtx5 + 4 | 0; //@line 29107
  HEAP32[$18 >> 2] = $6; //@line 29108
  $19 = $ReallocAsyncCtx5 + 8 | 0; //@line 29109
  HEAP32[$19 >> 2] = $8; //@line 29110
  sp = STACKTOP; //@line 29111
  return;
 }
 ___async_unwind = 0; //@line 29114
 HEAP32[$ReallocAsyncCtx5 >> 2] = 338; //@line 29115
 $18 = $ReallocAsyncCtx5 + 4 | 0; //@line 29116
 HEAP32[$18 >> 2] = $6; //@line 29117
 $19 = $ReallocAsyncCtx5 + 8 | 0; //@line 29118
 HEAP32[$19 >> 2] = $8; //@line 29119
 sp = STACKTOP; //@line 29120
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_136($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 29037
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29039
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29041
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29043
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29045
 $9 = $2 + 944 | 0; //@line 29046
 HEAP8[$9 >> 0] = 2 | HEAP8[$9 >> 0] & -7; //@line 29050
 $13 = $2 + 944 | 0; //@line 29051
 HEAP8[$13 >> 0] = HEAP8[$13 >> 0] | 32; //@line 29054
 $16 = HEAP32[$4 >> 2] | 0; //@line 29055
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 29057
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($16, $2 + 996 | 0, 1); //@line 29058
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 338; //@line 29061
  $18 = $ReallocAsyncCtx5 + 4 | 0; //@line 29062
  HEAP32[$18 >> 2] = $6; //@line 29063
  $19 = $ReallocAsyncCtx5 + 8 | 0; //@line 29064
  HEAP32[$19 >> 2] = $8; //@line 29065
  sp = STACKTOP; //@line 29066
  return;
 }
 ___async_unwind = 0; //@line 29069
 HEAP32[$ReallocAsyncCtx5 >> 2] = 338; //@line 29070
 $18 = $ReallocAsyncCtx5 + 4 | 0; //@line 29071
 HEAP32[$18 >> 2] = $6; //@line 29072
 $19 = $ReallocAsyncCtx5 + 8 | 0; //@line 29073
 HEAP32[$19 >> 2] = $8; //@line 29074
 sp = STACKTOP; //@line 29075
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_389($0) {
 $0 = $0 | 0;
 var $16 = 0, $2 = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 32191
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32193
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32195
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$4 + 364 >> 2] = 2; //@line 32201
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 2; //@line 32205
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 2; //@line 32209
  $16 = $4 + 944 | 0; //@line 32210
  HEAP8[$16 >> 0] = HEAP8[$16 >> 0] | 32; //@line 32213
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 32216
 _mbed_assert_internal(13588, 13597, 215); //@line 32217
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 372; //@line 32220
  $7 = $ReallocAsyncCtx3 + 4 | 0; //@line 32221
  HEAP32[$7 >> 2] = $2; //@line 32222
  $8 = $ReallocAsyncCtx3 + 8 | 0; //@line 32223
  HEAP32[$8 >> 2] = $4; //@line 32224
  sp = STACKTOP; //@line 32225
  return;
 }
 ___async_unwind = 0; //@line 32228
 HEAP32[$ReallocAsyncCtx3 >> 2] = 372; //@line 32229
 $7 = $ReallocAsyncCtx3 + 4 | 0; //@line 32230
 HEAP32[$7 >> 2] = $2; //@line 32231
 $8 = $ReallocAsyncCtx3 + 8 | 0; //@line 32232
 HEAP32[$8 >> 2] = $4; //@line 32233
 sp = STACKTOP; //@line 32234
 return;
}
function __ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$09 = 0, $$1 = 0, $10 = 0, $15 = 0, $17 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 22618
 if (!(HEAP8[$0 + 17 >> 0] | 0)) {
  $$09 = 0; //@line 22623
  return $$09 | 0; //@line 22624
 }
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 22628
 $8 = $1 + 4 | 0; //@line 22629
 $9 = HEAP32[$8 >> 2] | 0; //@line 22630
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 22631
 $10 = FUNCTION_TABLE_iii[$7 & 31]($0, $9) | 0; //@line 22632
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 534; //@line 22635
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 22637
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 22639
  HEAP32[$AsyncCtx + 12 >> 2] = $8; //@line 22641
  sp = STACKTOP; //@line 22642
  return 0; //@line 22643
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 22645
 $$ = $10 ? 3 : 2; //@line 22646
 $15 = HEAP32[$0 + 112 >> 2] | 0; //@line 22648
 $17 = HEAPU8[$1 >> 0] | 0; //@line 22650
 $$1 = (HEAP32[$15 + ($17 * 12 | 0) >> 2] | 0) == 0 ? $$ & 1 : $$; //@line 22655
 if ($$1 << 24 >> 24 != 3) {
  $$09 = $$1; //@line 22658
  return $$09 | 0; //@line 22659
 }
 HEAP32[$15 + ($17 * 12 | 0) + 4 >> 2] = HEAP32[$8 >> 2]; //@line 22663
 $$09 = 3; //@line 22664
 return $$09 | 0; //@line 22665
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_167($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 32348
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 32350
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32352
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32354
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32356
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32358
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32360
 $14 = (HEAP8[___async_retval >> 0] | 0) == 0; //@line 32363
 $15 = HEAP32[$4 >> 2] | 0; //@line 32364
 $18 = HEAP32[(HEAP32[$15 >> 2] | 0) + 76 >> 2] | 0; //@line 32367
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 32368
 FUNCTION_TABLE_vi[$18 & 1023]($15); //@line 32369
 if (!___async) {
  ___async_unwind = 0; //@line 32372
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 519; //@line 32374
 HEAP8[$ReallocAsyncCtx3 + 4 >> 0] = $14 & 1; //@line 32377
 HEAP8[$ReallocAsyncCtx3 + 5 >> 0] = $2; //@line 32379
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 32381
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 32383
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 32385
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 32387
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 32389
 sp = STACKTOP; //@line 32390
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13523
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13525
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13529
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13531
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13533
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13535
 if (!(HEAP8[$2 >> 0] | 0)) {
  $13 = (HEAP32[$0 + 8 >> 2] | 0) + 8 | 0; //@line 13539
  if ($13 >>> 0 < $6 >>> 0) {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 13542
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($13, $8, $10, $12); //@line 13543
   if (!___async) {
    ___async_unwind = 0; //@line 13546
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 686; //@line 13548
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 13550
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $13; //@line 13552
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 13554
   HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 13556
   HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 13558
   HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 13560
   sp = STACKTOP; //@line 13561
   return;
  }
 }
 return;
}
function _strlen($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$sink = 0, $1 = 0, $10 = 0, $19 = 0, $23 = 0, $6 = 0, label = 0;
 $1 = $0; //@line 10953
 L1 : do {
  if (!($1 & 3)) {
   $$015$lcssa = $0; //@line 10958
   label = 4; //@line 10959
  } else {
   $$01519 = $0; //@line 10961
   $23 = $1; //@line 10961
   while (1) {
    if (!(HEAP8[$$01519 >> 0] | 0)) {
     $$sink = $23; //@line 10966
     break L1;
    }
    $6 = $$01519 + 1 | 0; //@line 10969
    $23 = $6; //@line 10970
    if (!($23 & 3)) {
     $$015$lcssa = $6; //@line 10974
     label = 4; //@line 10975
     break;
    } else {
     $$01519 = $6; //@line 10978
    }
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  $$0 = $$015$lcssa; //@line 10984
  while (1) {
   $10 = HEAP32[$$0 >> 2] | 0; //@line 10986
   if (!(($10 & -2139062144 ^ -2139062144) & $10 + -16843009)) {
    $$0 = $$0 + 4 | 0; //@line 10994
   } else {
    break;
   }
  }
  if (!(($10 & 255) << 24 >> 24)) {
   $$1$lcssa = $$0; //@line 11002
  } else {
   $$pn = $$0; //@line 11004
   while (1) {
    $19 = $$pn + 1 | 0; //@line 11006
    if (!(HEAP8[$19 >> 0] | 0)) {
     $$1$lcssa = $19; //@line 11010
     break;
    } else {
     $$pn = $19; //@line 11013
    }
   }
  }
  $$sink = $$1$lcssa; //@line 11018
 }
 return $$sink - $1 | 0; //@line 11021
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_338($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 27958
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27960
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27962
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27966
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27968
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27970
 if ($AsyncRetVal | 0) {
  HEAP32[$4 >> 2] = $AsyncRetVal; //@line 27973
  _mbed_tracef(2, 13704, 14109, $4); //@line 27974
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 27977
 __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 27978
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 398; //@line 27981
  $13 = $ReallocAsyncCtx3 + 4 | 0; //@line 27982
  HEAP32[$13 >> 2] = $8; //@line 27983
  $14 = $ReallocAsyncCtx3 + 8 | 0; //@line 27984
  HEAP32[$14 >> 2] = $10; //@line 27985
  sp = STACKTOP; //@line 27986
  return;
 }
 ___async_unwind = 0; //@line 27989
 HEAP32[$ReallocAsyncCtx3 >> 2] = 398; //@line 27990
 $13 = $ReallocAsyncCtx3 + 4 | 0; //@line 27991
 HEAP32[$13 >> 2] = $8; //@line 27992
 $14 = $ReallocAsyncCtx3 + 8 | 0; //@line 27993
 HEAP32[$14 >> 2] = $10; //@line 27994
 sp = STACKTOP; //@line 27995
 return;
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $2 = 0, $4 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2517
 $2 = $0; //@line 2518
 L1 : do {
  switch ($1 | 0) {
  case 1:
   {
    $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 2523
    if ($4 | 0) {
     $7 = HEAP32[$4 >> 2] | 0; //@line 2527
     $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2528
     FUNCTION_TABLE_vi[$7 & 1023]($2 + 40 | 0); //@line 2529
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 104; //@line 2532
      sp = STACKTOP; //@line 2533
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 2536
      break L1;
     }
    }
    break;
   }
  case 2:
   {
    $9 = HEAP32[$2 + 68 >> 2] | 0; //@line 2544
    if ($9 | 0) {
     $12 = HEAP32[$9 >> 2] | 0; //@line 2548
     $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2549
     FUNCTION_TABLE_vi[$12 & 1023]($2 + 56 | 0); //@line 2550
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 105; //@line 2553
      sp = STACKTOP; //@line 2554
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2557
      break L1;
     }
    }
    break;
   }
  default:
   {}
  }
 } while (0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $21 = 0, $22 = 0, $28 = 0, $30 = 0;
 HEAP8[$1 + 53 >> 0] = 1; //@line 16158
 do {
  if ((HEAP32[$1 + 4 >> 2] | 0) == ($3 | 0)) {
   HEAP8[$1 + 52 >> 0] = 1; //@line 16165
   $10 = $1 + 16 | 0; //@line 16166
   $11 = HEAP32[$10 >> 2] | 0; //@line 16167
   if (!$11) {
    HEAP32[$10 >> 2] = $2; //@line 16170
    HEAP32[$1 + 24 >> 2] = $4; //@line 16172
    HEAP32[$1 + 36 >> 2] = 1; //@line 16174
    if (!(($4 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0)) {
     break;
    }
    HEAP8[$1 + 54 >> 0] = 1; //@line 16184
    break;
   }
   if (($11 | 0) != ($2 | 0)) {
    $30 = $1 + 36 | 0; //@line 16189
    HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1; //@line 16192
    HEAP8[$1 + 54 >> 0] = 1; //@line 16194
    break;
   }
   $21 = $1 + 24 | 0; //@line 16197
   $22 = HEAP32[$21 >> 2] | 0; //@line 16198
   if (($22 | 0) == 2) {
    HEAP32[$21 >> 2] = $4; //@line 16201
    $28 = $4; //@line 16202
   } else {
    $28 = $22; //@line 16204
   }
   if (($28 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0) {
    HEAP8[$1 + 54 >> 0] = 1; //@line 16213
   }
  }
 } while (0);
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7324
 $2 = HEAP32[$0 + 16 >> 2] | 0; //@line 7326
 $3 = $0 + 12 | 0; //@line 7327
 $4 = HEAP32[$3 >> 2] | 0; //@line 7328
 do {
  if (!$4) {
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7332
   _mbed_assert_internal(15615, 15620, 1102); //@line 7333
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 233; //@line 7336
    HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 7338
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 7340
    HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 7342
    sp = STACKTOP; //@line 7343
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7346
    $10 = HEAP32[$3 >> 2] | 0; //@line 7348
    break;
   }
  } else {
   $10 = $4; //@line 7352
  }
 } while (0);
 $9 = HEAP32[$10 >> 2] | 0; //@line 7355
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7356
 FUNCTION_TABLE_vii[$9 & 31]($0, $2); //@line 7357
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 234; //@line 7360
  sp = STACKTOP; //@line 7361
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7364
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_209($0) {
 $0 = $0 | 0;
 var $$pre13 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 12414
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12416
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12418
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12420
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12422
 $$pre13 = HEAP32[$2 >> 2] | 0; //@line 12423
 if (!$$pre13) {
  HEAP32[$4 >> 2] = 0; //@line 12426
  return;
 }
 $11 = HEAP32[$$pre13 + 4 >> 2] | 0; //@line 12430
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 12431
 FUNCTION_TABLE_vii[$11 & 31]($6, $8); //@line 12432
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 251; //@line 12435
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 12436
  HEAP32[$12 >> 2] = $2; //@line 12437
  $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 12438
  HEAP32[$13 >> 2] = $4; //@line 12439
  sp = STACKTOP; //@line 12440
  return;
 }
 ___async_unwind = 0; //@line 12443
 HEAP32[$ReallocAsyncCtx6 >> 2] = 251; //@line 12444
 $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 12445
 HEAP32[$12 >> 2] = $2; //@line 12446
 $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 12447
 HEAP32[$13 >> 2] = $4; //@line 12448
 sp = STACKTOP; //@line 12449
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_197($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 11363
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11367
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11369
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11371
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11373
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11375
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11377
 $15 = $4 + 12 | 0; //@line 11379
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 11380
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 11381
 $16 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 7) | 0; //@line 11382
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 11386
  ___async_unwind = 0; //@line 11387
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 164; //@line 11389
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $15; //@line 11391
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $8; //@line 11393
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $10; //@line 11395
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $12; //@line 11397
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $14; //@line 11399
 sp = STACKTOP; //@line 11400
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 11301
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11305
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11307
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11309
 $9 = $4 + 12 | 0; //@line 11311
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 11312
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 11313
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 9) | 0; //@line 11314
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 160; //@line 11317
  $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 11318
  HEAP32[$11 >> 2] = $9; //@line 11319
  $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 11320
  HEAP32[$12 >> 2] = $8; //@line 11321
  sp = STACKTOP; //@line 11322
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 11326
 ___async_unwind = 0; //@line 11327
 HEAP32[$ReallocAsyncCtx7 >> 2] = 160; //@line 11328
 $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 11329
 HEAP32[$11 >> 2] = $9; //@line 11330
 $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 11331
 HEAP32[$12 >> 2] = $8; //@line 11332
 sp = STACKTOP; //@line 11333
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_81($0) {
 $0 = $0 | 0;
 var $$0 = 0, $11 = 0, $13 = 0, $19 = 0, $2 = 0, $25 = 0, $31 = 0, $35 = 0, $4 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23131
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23133
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23135
 if (HEAP32[___async_retval >> 2] | 0) {
  $$0 = -1014; //@line 23142
  $35 = ___async_retval; //@line 23143
  HEAP32[$35 >> 2] = $$0; //@line 23144
  return;
 }
 $11 = HEAP32[$2 >> 2] | 0; //@line 23147
 $13 = HEAP16[$4 >> 1] | 0; //@line 23149
 HEAP16[$4 >> 1] = $13 + 1 << 16 >> 16; //@line 23151
 HEAP8[($13 & 65535) + ($6 + 381) >> 0] = $11; //@line 23154
 $19 = HEAP16[$4 >> 1] | 0; //@line 23157
 HEAP16[$4 >> 1] = $19 + 1 << 16 >> 16; //@line 23159
 HEAP8[($19 & 65535) + ($6 + 381) >> 0] = $11 >>> 8; //@line 23162
 $25 = HEAP16[$4 >> 1] | 0; //@line 23165
 HEAP16[$4 >> 1] = $25 + 1 << 16 >> 16; //@line 23167
 HEAP8[($25 & 65535) + ($6 + 381) >> 0] = $11 >>> 16; //@line 23170
 $31 = HEAP16[$4 >> 1] | 0; //@line 23173
 HEAP16[$4 >> 1] = $31 + 1 << 16 >> 16; //@line 23175
 HEAP8[($31 & 65535) + ($6 + 381) >> 0] = $11 >>> 24; //@line 23178
 $$0 = 0; //@line 23179
 $35 = ___async_retval; //@line 23180
 HEAP32[$35 >> 2] = $$0; //@line 23181
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_288($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 19426
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19430
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19432
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19434
 $9 = $4 + 12 | 0; //@line 19436
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 19437
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 19438
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 2) | 0; //@line 19439
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 156; //@line 19442
  $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 19443
  HEAP32[$11 >> 2] = $9; //@line 19444
  $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 19445
  HEAP32[$12 >> 2] = $8; //@line 19446
  sp = STACKTOP; //@line 19447
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 19451
 ___async_unwind = 0; //@line 19452
 HEAP32[$ReallocAsyncCtx7 >> 2] = 156; //@line 19453
 $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 19454
 HEAP32[$11 >> 2] = $9; //@line 19455
 $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 19456
 HEAP32[$12 >> 2] = $8; //@line 19457
 sp = STACKTOP; //@line 19458
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_286($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 19365
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19369
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19371
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19373
 $9 = $4 + 12 | 0; //@line 19375
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 19376
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 19377
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 4) | 0; //@line 19378
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 152; //@line 19381
  $11 = $ReallocAsyncCtx8 + 4 | 0; //@line 19382
  HEAP32[$11 >> 2] = $9; //@line 19383
  $12 = $ReallocAsyncCtx8 + 8 | 0; //@line 19384
  HEAP32[$12 >> 2] = $8; //@line 19385
  sp = STACKTOP; //@line 19386
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 19390
 ___async_unwind = 0; //@line 19391
 HEAP32[$ReallocAsyncCtx8 >> 2] = 152; //@line 19392
 $11 = $ReallocAsyncCtx8 + 4 | 0; //@line 19393
 HEAP32[$11 >> 2] = $9; //@line 19394
 $12 = $ReallocAsyncCtx8 + 8 | 0; //@line 19395
 HEAP32[$12 >> 2] = $8; //@line 19396
 sp = STACKTOP; //@line 19397
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 14838
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14842
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14844
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14846
 $9 = $4 + 12 | 0; //@line 14848
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 14849
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 14850
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 10) | 0; //@line 14851
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 172; //@line 14854
  $11 = $ReallocAsyncCtx6 + 4 | 0; //@line 14855
  HEAP32[$11 >> 2] = $9; //@line 14856
  $12 = $ReallocAsyncCtx6 + 8 | 0; //@line 14857
  HEAP32[$12 >> 2] = $8; //@line 14858
  sp = STACKTOP; //@line 14859
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 14863
 ___async_unwind = 0; //@line 14864
 HEAP32[$ReallocAsyncCtx6 >> 2] = 172; //@line 14865
 $11 = $ReallocAsyncCtx6 + 4 | 0; //@line 14866
 HEAP32[$11 >> 2] = $9; //@line 14867
 $12 = $ReallocAsyncCtx6 + 8 | 0; //@line 14868
 HEAP32[$12 >> 2] = $8; //@line 14869
 sp = STACKTOP; //@line 14870
 return;
}
function _mbedtls_cipher_setup($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 2913
 if (($0 | 0) == 0 | ($1 | 0) == 0) {
  $$0 = -24832; //@line 2918
  return $$0 | 0; //@line 2919
 }
 dest = $0; //@line 2921
 stop = dest + 68 | 0; //@line 2921
 do {
  HEAP32[dest >> 2] = 0; //@line 2921
  dest = dest + 4 | 0; //@line 2921
 } while ((dest | 0) < (stop | 0));
 $7 = HEAP32[(HEAP32[$1 + 28 >> 2] | 0) + 20 >> 2] | 0; //@line 2925
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2926
 $8 = FUNCTION_TABLE_i[$7 & 7]() | 0; //@line 2927
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 573; //@line 2930
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2932
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 2934
  sp = STACKTOP; //@line 2935
  return 0; //@line 2936
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2938
 HEAP32[$0 + 60 >> 2] = $8; //@line 2940
 if (!$8) {
  $$0 = -24960; //@line 2943
  return $$0 | 0; //@line 2944
 }
 HEAP32[$0 >> 2] = $1; //@line 2946
 if ((HEAP32[$1 + 4 >> 2] | 0) != 2) {
  $$0 = 0; //@line 2951
  return $$0 | 0; //@line 2952
 }
 HEAP32[$0 + 12 >> 2] = 4; //@line 2955
 HEAP32[$0 + 16 >> 2] = 14; //@line 2957
 $$0 = 0; //@line 2958
 return $$0 | 0; //@line 2959
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 19304
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19308
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19310
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19312
 $9 = $4 + 12 | 0; //@line 19314
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 19315
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 19316
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 3) | 0; //@line 19317
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 148; //@line 19320
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 19321
  HEAP32[$11 >> 2] = $9; //@line 19322
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 19323
  HEAP32[$12 >> 2] = $8; //@line 19324
  sp = STACKTOP; //@line 19325
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 19329
 ___async_unwind = 0; //@line 19330
 HEAP32[$ReallocAsyncCtx9 >> 2] = 148; //@line 19331
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 19332
 HEAP32[$11 >> 2] = $9; //@line 19333
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 19334
 HEAP32[$12 >> 2] = $8; //@line 19335
 sp = STACKTOP; //@line 19336
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_353($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 28790
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28794
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28796
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28798
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28800
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28802
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28804
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28806
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28808
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 1; //@line 28809
 HEAP8[$4 >> 0] = 1; //@line 28810
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 28811
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($6, $8) | 0; //@line 28812
 if (!___async) {
  ___async_unwind = 0; //@line 28815
 }
 HEAP32[$ReallocAsyncCtx13 >> 2] = 197; //@line 28817
 HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $10; //@line 28819
 HEAP32[$ReallocAsyncCtx13 + 8 >> 2] = $12; //@line 28821
 HEAP32[$ReallocAsyncCtx13 + 12 >> 2] = $14; //@line 28823
 HEAP32[$ReallocAsyncCtx13 + 16 >> 2] = $16; //@line 28825
 HEAP32[$ReallocAsyncCtx13 + 20 >> 2] = $18; //@line 28827
 sp = STACKTOP; //@line 28828
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_282($0) {
 $0 = $0 | 0;
 var $$pre$i$i66 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 19217
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19223
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19225
 $$pre$i$i66 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 19226
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i66; //@line 19228
 if (!$$pre$i$i66) {
  HEAP32[___async_retval >> 2] = $8; //@line 19232
  return;
 }
 $12 = HEAP32[$$pre$i$i66 + 8 >> 2] | 0; //@line 19236
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 19237
 FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 19238
 if (___async) {
  HEAP32[$ReallocAsyncCtx15 >> 2] = 484; //@line 19241
  $13 = $ReallocAsyncCtx15 + 4 | 0; //@line 19242
  HEAP32[$13 >> 2] = $6; //@line 19243
  $14 = $ReallocAsyncCtx15 + 8 | 0; //@line 19244
  HEAP32[$14 >> 2] = $8; //@line 19245
  sp = STACKTOP; //@line 19246
  return;
 }
 ___async_unwind = 0; //@line 19249
 HEAP32[$ReallocAsyncCtx15 >> 2] = 484; //@line 19250
 $13 = $ReallocAsyncCtx15 + 4 | 0; //@line 19251
 HEAP32[$13 >> 2] = $6; //@line 19252
 $14 = $ReallocAsyncCtx15 + 8 | 0; //@line 19253
 HEAP32[$14 >> 2] = $8; //@line 19254
 sp = STACKTOP; //@line 19255
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_146($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 30523
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30527
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30529
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30531
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30533
 $11 = $4 + 944 | 0; //@line 30534
 HEAP8[$11 >> 0] = HEAP8[$11 >> 0] | 34; //@line 30537
 $14 = HEAP32[$6 >> 2] | 0; //@line 30538
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 30540
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($14, $4 + 996 | 0, 1); //@line 30541
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 307; //@line 30544
  $16 = $ReallocAsyncCtx13 + 4 | 0; //@line 30545
  HEAP32[$16 >> 2] = $8; //@line 30546
  $17 = $ReallocAsyncCtx13 + 8 | 0; //@line 30547
  HEAP32[$17 >> 2] = $10; //@line 30548
  sp = STACKTOP; //@line 30549
  return;
 }
 ___async_unwind = 0; //@line 30552
 HEAP32[$ReallocAsyncCtx13 >> 2] = 307; //@line 30553
 $16 = $ReallocAsyncCtx13 + 4 | 0; //@line 30554
 HEAP32[$16 >> 2] = $8; //@line 30555
 $17 = $ReallocAsyncCtx13 + 8 | 0; //@line 30556
 HEAP32[$17 >> 2] = $10; //@line 30557
 sp = STACKTOP; //@line 30558
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_145($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 30481
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30485
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30487
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30489
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30491
 $11 = $4 + 944 | 0; //@line 30492
 HEAP8[$11 >> 0] = HEAP8[$11 >> 0] | 34; //@line 30495
 $14 = HEAP32[$6 >> 2] | 0; //@line 30496
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(12) | 0; //@line 30498
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($14, $4 + 996 | 0, 1); //@line 30499
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 312; //@line 30502
  $16 = $ReallocAsyncCtx12 + 4 | 0; //@line 30503
  HEAP32[$16 >> 2] = $8; //@line 30504
  $17 = $ReallocAsyncCtx12 + 8 | 0; //@line 30505
  HEAP32[$17 >> 2] = $10; //@line 30506
  sp = STACKTOP; //@line 30507
  return;
 }
 ___async_unwind = 0; //@line 30510
 HEAP32[$ReallocAsyncCtx12 >> 2] = 312; //@line 30511
 $16 = $ReallocAsyncCtx12 + 4 | 0; //@line 30512
 HEAP32[$16 >> 2] = $8; //@line 30513
 $17 = $ReallocAsyncCtx12 + 8 | 0; //@line 30514
 HEAP32[$17 >> 2] = $10; //@line 30515
 sp = STACKTOP; //@line 30516
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_144($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 30439
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30443
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30445
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30447
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30449
 $11 = $4 + 944 | 0; //@line 30450
 HEAP8[$11 >> 0] = HEAP8[$11 >> 0] | 34; //@line 30453
 $14 = HEAP32[$6 >> 2] | 0; //@line 30454
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(12) | 0; //@line 30456
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($14, $4 + 996 | 0, 1); //@line 30457
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 315; //@line 30460
  $16 = $ReallocAsyncCtx11 + 4 | 0; //@line 30461
  HEAP32[$16 >> 2] = $8; //@line 30462
  $17 = $ReallocAsyncCtx11 + 8 | 0; //@line 30463
  HEAP32[$17 >> 2] = $10; //@line 30464
  sp = STACKTOP; //@line 30465
  return;
 }
 ___async_unwind = 0; //@line 30468
 HEAP32[$ReallocAsyncCtx11 >> 2] = 315; //@line 30469
 $16 = $ReallocAsyncCtx11 + 4 | 0; //@line 30470
 HEAP32[$16 >> 2] = $8; //@line 30471
 $17 = $ReallocAsyncCtx11 + 8 | 0; //@line 30472
 HEAP32[$17 >> 2] = $10; //@line 30473
 sp = STACKTOP; //@line 30474
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_143($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 30397
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30401
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30403
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30405
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30407
 $11 = $4 + 944 | 0; //@line 30408
 HEAP8[$11 >> 0] = HEAP8[$11 >> 0] | 34; //@line 30411
 $14 = HEAP32[$6 >> 2] | 0; //@line 30412
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 30414
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($14, $4 + 996 | 0, 1); //@line 30415
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 320; //@line 30418
  $16 = $ReallocAsyncCtx10 + 4 | 0; //@line 30419
  HEAP32[$16 >> 2] = $8; //@line 30420
  $17 = $ReallocAsyncCtx10 + 8 | 0; //@line 30421
  HEAP32[$17 >> 2] = $10; //@line 30422
  sp = STACKTOP; //@line 30423
  return;
 }
 ___async_unwind = 0; //@line 30426
 HEAP32[$ReallocAsyncCtx10 >> 2] = 320; //@line 30427
 $16 = $ReallocAsyncCtx10 + 4 | 0; //@line 30428
 HEAP32[$16 >> 2] = $8; //@line 30429
 $17 = $ReallocAsyncCtx10 + 8 | 0; //@line 30430
 HEAP32[$17 >> 2] = $10; //@line 30431
 sp = STACKTOP; //@line 30432
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 32303
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 32305
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32307
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32309
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32311
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32313
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32315
 $13 = HEAP32[$4 >> 2] | 0; //@line 32316
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 40 >> 2] | 0; //@line 32319
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 32320
 $17 = FUNCTION_TABLE_ii[$16 & 15]($13) | 0; //@line 32321
 if (!___async) {
  HEAP8[___async_retval >> 0] = $17; //@line 32325
  ___async_unwind = 0; //@line 32326
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 518; //@line 32328
 HEAP8[$ReallocAsyncCtx2 + 4 >> 0] = $2; //@line 32330
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 32332
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 32334
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 32336
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 32338
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 32340
 sp = STACKTOP; //@line 32341
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_142($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 30355
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30359
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30361
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30363
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30365
 $11 = $4 + 944 | 0; //@line 30366
 HEAP8[$11 >> 0] = HEAP8[$11 >> 0] | 34; //@line 30369
 $14 = HEAP32[$6 >> 2] | 0; //@line 30370
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 30372
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($14, $4 + 996 | 0, 1); //@line 30373
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 323; //@line 30376
  $16 = $ReallocAsyncCtx9 + 4 | 0; //@line 30377
  HEAP32[$16 >> 2] = $8; //@line 30378
  $17 = $ReallocAsyncCtx9 + 8 | 0; //@line 30379
  HEAP32[$17 >> 2] = $10; //@line 30380
  sp = STACKTOP; //@line 30381
  return;
 }
 ___async_unwind = 0; //@line 30384
 HEAP32[$ReallocAsyncCtx9 >> 2] = 323; //@line 30385
 $16 = $ReallocAsyncCtx9 + 4 | 0; //@line 30386
 HEAP32[$16 >> 2] = $8; //@line 30387
 $17 = $ReallocAsyncCtx9 + 8 | 0; //@line 30388
 HEAP32[$17 >> 2] = $10; //@line 30389
 sp = STACKTOP; //@line 30390
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_141($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 30313
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30317
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30319
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30321
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30323
 $11 = $4 + 944 | 0; //@line 30324
 HEAP8[$11 >> 0] = HEAP8[$11 >> 0] | 34; //@line 30327
 $14 = HEAP32[$6 >> 2] | 0; //@line 30328
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 30330
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($14, $4 + 996 | 0, 1); //@line 30331
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 326; //@line 30334
  $16 = $ReallocAsyncCtx8 + 4 | 0; //@line 30335
  HEAP32[$16 >> 2] = $8; //@line 30336
  $17 = $ReallocAsyncCtx8 + 8 | 0; //@line 30337
  HEAP32[$17 >> 2] = $10; //@line 30338
  sp = STACKTOP; //@line 30339
  return;
 }
 ___async_unwind = 0; //@line 30342
 HEAP32[$ReallocAsyncCtx8 >> 2] = 326; //@line 30343
 $16 = $ReallocAsyncCtx8 + 4 | 0; //@line 30344
 HEAP32[$16 >> 2] = $8; //@line 30345
 $17 = $ReallocAsyncCtx8 + 8 | 0; //@line 30346
 HEAP32[$17 >> 2] = $10; //@line 30347
 sp = STACKTOP; //@line 30348
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_140($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 30271
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30275
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30277
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30279
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30281
 $11 = $4 + 944 | 0; //@line 30282
 HEAP8[$11 >> 0] = HEAP8[$11 >> 0] | 34; //@line 30285
 $14 = HEAP32[$6 >> 2] | 0; //@line 30286
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 30288
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($14, $4 + 996 | 0, 1); //@line 30289
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 334; //@line 30292
  $16 = $ReallocAsyncCtx7 + 4 | 0; //@line 30293
  HEAP32[$16 >> 2] = $8; //@line 30294
  $17 = $ReallocAsyncCtx7 + 8 | 0; //@line 30295
  HEAP32[$17 >> 2] = $10; //@line 30296
  sp = STACKTOP; //@line 30297
  return;
 }
 ___async_unwind = 0; //@line 30300
 HEAP32[$ReallocAsyncCtx7 >> 2] = 334; //@line 30301
 $16 = $ReallocAsyncCtx7 + 4 | 0; //@line 30302
 HEAP32[$16 >> 2] = $8; //@line 30303
 $17 = $ReallocAsyncCtx7 + 8 | 0; //@line 30304
 HEAP32[$17 >> 2] = $10; //@line 30305
 sp = STACKTOP; //@line 30306
 return;
}
function _puts($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $12 = 0, $17 = 0, $19 = 0, $22 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15652
 $1 = HEAP32[2580] | 0; //@line 15653
 if ((HEAP32[$1 + 76 >> 2] | 0) > -1) {
  $19 = ___lockfile($1) | 0; //@line 15659
 } else {
  $19 = 0; //@line 15661
 }
 do {
  if ((_fputs($0, $1) | 0) < 0) {
   $22 = -1; //@line 15667
  } else {
   if ((HEAP8[$1 + 75 >> 0] | 0) != 10) {
    $11 = $1 + 20 | 0; //@line 15673
    $12 = HEAP32[$11 >> 2] | 0; //@line 15674
    if ($12 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$11 >> 2] = $12 + 1; //@line 15680
     HEAP8[$12 >> 0] = 10; //@line 15681
     $22 = 0; //@line 15682
     break;
    }
   }
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 15686
   $17 = ___overflow($1, 10) | 0; //@line 15687
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 663; //@line 15690
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 15692
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 15694
    sp = STACKTOP; //@line 15695
    return 0; //@line 15696
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 15698
    $22 = $17 >> 31; //@line 15700
    break;
   }
  }
 } while (0);
 if ($19 | 0) {
  ___unlockfile($1); //@line 15707
 }
 return $22 | 0; //@line 15709
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_348($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx21 = 0, sp = 0;
 sp = STACKTOP; //@line 28455
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28459
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28461
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28463
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28465
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28467
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28469
 $15 = $4 + 12 | 0; //@line 28471
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 28472
 $ReallocAsyncCtx21 = _emscripten_realloc_async_context(24) | 0; //@line 28473
 $16 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 6) | 0; //@line 28474
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 28478
  ___async_unwind = 0; //@line 28479
 }
 HEAP32[$ReallocAsyncCtx21 >> 2] = 208; //@line 28481
 HEAP32[$ReallocAsyncCtx21 + 4 >> 2] = $15; //@line 28483
 HEAP32[$ReallocAsyncCtx21 + 8 >> 2] = $8; //@line 28485
 HEAP32[$ReallocAsyncCtx21 + 12 >> 2] = $10; //@line 28487
 HEAP32[$ReallocAsyncCtx21 + 16 >> 2] = $12; //@line 28489
 HEAP32[$ReallocAsyncCtx21 + 20 >> 2] = $14; //@line 28491
 sp = STACKTOP; //@line 28492
 return;
}
function __ZN4mbed11InterruptInD0Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2448
 HEAP32[$0 >> 2] = 668; //@line 2449
 _gpio_irq_free($0 + 28 | 0); //@line 2451
 $3 = HEAP32[$0 + 68 >> 2] | 0; //@line 2453
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 2459
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2460
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 56 | 0); //@line 2461
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 102; //@line 2464
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2466
    sp = STACKTOP; //@line 2467
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2470
    break;
   }
  }
 } while (0);
 $10 = HEAP32[$0 + 52 >> 2] | 0; //@line 2476
 if (!$10) {
  __ZdlPv($0); //@line 2479
  return;
 }
 $14 = HEAP32[$10 + 8 >> 2] | 0; //@line 2484
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2485
 FUNCTION_TABLE_vi[$14 & 1023]($0 + 40 | 0); //@line 2486
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 103; //@line 2489
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 2491
  sp = STACKTOP; //@line 2492
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2495
 __ZdlPv($0); //@line 2496
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_116($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 27522
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27524
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27526
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27528
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27530
 $9 = $2 + 944 | 0; //@line 27531
 HEAP8[$9 >> 0] = HEAP8[$9 >> 0] | 32; //@line 27534
 $12 = HEAP32[$4 >> 2] | 0; //@line 27535
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 27537
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($12, $2 + 996 | 0, 1); //@line 27538
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 338; //@line 27541
  $14 = $ReallocAsyncCtx5 + 4 | 0; //@line 27542
  HEAP32[$14 >> 2] = $6; //@line 27543
  $15 = $ReallocAsyncCtx5 + 8 | 0; //@line 27544
  HEAP32[$15 >> 2] = $8; //@line 27545
  sp = STACKTOP; //@line 27546
  return;
 }
 ___async_unwind = 0; //@line 27549
 HEAP32[$ReallocAsyncCtx5 >> 2] = 338; //@line 27550
 $14 = $ReallocAsyncCtx5 + 4 | 0; //@line 27551
 HEAP32[$14 >> 2] = $6; //@line 27552
 $15 = $ReallocAsyncCtx5 + 8 | 0; //@line 27553
 HEAP32[$15 >> 2] = $8; //@line 27554
 sp = STACKTOP; //@line 27555
 return;
}
function _mbed_vtracef__async_cb_381($0) {
 $0 = $0 | 0;
 var $$18 = 0, $10 = 0, $12 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 31682
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31684
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31686
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31688
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 31693
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31695
 HEAP32[$2 >> 2] = HEAP32[___async_retval >> 2]; //@line 31700
 $16 = _snprintf($4, $6, 12216, $2) | 0; //@line 31701
 $$18 = ($16 | 0) >= ($6 | 0) ? 0 : $16; //@line 31703
 $19 = $4 + $$18 | 0; //@line 31705
 $20 = $6 - $$18 | 0; //@line 31706
 if (($$18 | 0) > 0) {
  if (!(($$18 | 0) < 1 | ($20 | 0) < 1 | $10 ^ 1)) {
   _snprintf($19, $20, 12294, $12) | 0; //@line 31714
  }
 }
 $23 = HEAP32[190] | 0; //@line 31717
 $24 = HEAP32[183] | 0; //@line 31718
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 31719
 FUNCTION_TABLE_vi[$23 & 1023]($24); //@line 31720
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 134; //@line 31723
  sp = STACKTOP; //@line 31724
  return;
 }
 ___async_unwind = 0; //@line 31727
 HEAP32[$ReallocAsyncCtx7 >> 2] = 134; //@line 31728
 sp = STACKTOP; //@line 31729
 return;
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17839
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17841
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17843
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17845
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17847
 HEAP32[$4 + 12 >> 2] = HEAP32[$2 >> 2]; //@line 17850
 _equeue_event_dtor($4, 288); //@line 17851
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 17852
 $10 = _equeue_post($6, 289, $4) | 0; //@line 17853
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 290; //@line 17856
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 17857
  HEAP32[$11 >> 2] = $2; //@line 17858
  $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 17859
  HEAP32[$12 >> 2] = $8; //@line 17860
  sp = STACKTOP; //@line 17861
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 17865
 ___async_unwind = 0; //@line 17866
 HEAP32[$ReallocAsyncCtx3 >> 2] = 290; //@line 17867
 $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 17868
 HEAP32[$11 >> 2] = $2; //@line 17869
 $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 17870
 HEAP32[$12 >> 2] = $8; //@line 17871
 sp = STACKTOP; //@line 17872
 return;
}
function __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$pre$phiZ2D = 0, $26 = 0;
 if ($2) {
  HEAP8[$1 + 15 >> 0] = HEAP8[$0 + 12 >> 0] | 0; //@line 23911
  HEAP32[$1 + 748 >> 2] = HEAPU16[$0 + 36 >> 1]; //@line 23916
  HEAP32[$1 + 752 >> 2] = HEAPU16[$0 + 38 >> 1]; //@line 23921
  HEAP32[$1 + 756 >> 2] = HEAPU16[$0 + 40 >> 1]; //@line 23926
  HEAP32[$1 + 760 >> 2] = HEAPU16[$0 + 42 >> 1]; //@line 23931
  HEAP32[$1 + 764 >> 2] = HEAPU16[$0 + 44 >> 1]; //@line 23936
  $26 = $0 + 132 | 0; //@line 23937
  HEAP8[$1 + 781 >> 0] = (HEAPU8[$26 >> 0] | 0) >>> 1 & 1; //@line 23942
  $$pre$phiZ2D = $26; //@line 23943
 } else {
  $$pre$phiZ2D = $0 + 132 | 0; //@line 23946
 }
 HEAP8[$1 + 736 >> 0] = HEAP8[$0 + 23 >> 0] | 0; //@line 23951
 HEAP8[$1 + 737 >> 0] = HEAP8[$0 + 30 >> 0] | 0; //@line 23955
 HEAP8[$1 + 769 >> 0] = HEAP8[$0 + 34 >> 0] | 0; //@line 23959
 HEAP32[$1 + 772 >> 2] = HEAP32[$0 + 68 >> 2]; //@line 23963
 HEAP8[$1 + 776 >> 0] = HEAP8[$0 + 64 >> 0] | 0; //@line 23967
 HEAP8[$1 + 780 >> 0] = HEAP8[$$pre$phiZ2D >> 0] & 1; //@line 23971
 HEAP32[$1 + 784 >> 2] = HEAP32[$0 + 56 >> 2]; //@line 23975
 HEAP32[$1 + 788 >> 2] = HEAP32[$0 + 60 >> 2]; //@line 23979
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_188($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 10722
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10726
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10728
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10730
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[___async_retval >> 2]; //@line 10733
 $10 = HEAP32[$4 >> 2] | 0; //@line 10734
 $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 76 >> 2] | 0; //@line 10737
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 10738
 FUNCTION_TABLE_vi[$13 & 1023]($10); //@line 10739
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 532; //@line 10742
  $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 10743
  HEAP32[$14 >> 2] = $6; //@line 10744
  $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 10745
  HEAP32[$15 >> 2] = $8; //@line 10746
  sp = STACKTOP; //@line 10747
  return;
 }
 ___async_unwind = 0; //@line 10750
 HEAP32[$ReallocAsyncCtx7 >> 2] = 532; //@line 10751
 $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 10752
 HEAP32[$14 >> 2] = $6; //@line 10753
 $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 10754
 HEAP32[$15 >> 2] = $8; //@line 10755
 sp = STACKTOP; //@line 10756
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_223($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13571
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13577
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13579
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13581
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13583
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 1) {
  return;
 }
 $14 = (HEAP32[$0 + 8 >> 2] | 0) + 24 | 0; //@line 13588
 $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 13590
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($14, $6, $8, $10); //@line 13591
 if (!___async) {
  ___async_unwind = 0; //@line 13594
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 686; //@line 13596
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $6 + 54; //@line 13598
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $14; //@line 13600
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $12; //@line 13602
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $6; //@line 13604
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $8; //@line 13606
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $10; //@line 13608
 sp = STACKTOP; //@line 13609
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_186($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 10625
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10627
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10631
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10633
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10635
 $11 = HEAP32[$2 >> 2] | 0; //@line 10636
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 44 >> 2] | 0; //@line 10639
 $15 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 10640
 $17 = HEAP16[$15 >> 1] & 255; //@line 10642
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 10643
 FUNCTION_TABLE_viii[$14 & 7]($11, 1, $17); //@line 10644
 if (!___async) {
  ___async_unwind = 0; //@line 10647
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 530; //@line 10649
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 10651
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $15; //@line 10653
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = 1; //@line 10655
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $6; //@line 10657
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $8; //@line 10659
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $10; //@line 10661
 sp = STACKTOP; //@line 10662
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_185($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 10581
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10583
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10587
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10589
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10591
 $11 = HEAP32[$2 >> 2] | 0; //@line 10592
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 44 >> 2] | 0; //@line 10595
 $15 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 10596
 $17 = HEAP16[$15 >> 1] & 255; //@line 10598
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 10599
 FUNCTION_TABLE_viii[$14 & 7]($11, 0, $17); //@line 10600
 if (!___async) {
  ___async_unwind = 0; //@line 10603
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 530; //@line 10605
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 10607
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $15; //@line 10609
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = 0; //@line 10611
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $6; //@line 10613
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $8; //@line 10615
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $10; //@line 10617
 sp = STACKTOP; //@line 10618
 return;
}
function __ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$1 = 0, $12 = 0, $22 = 0, $3 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 22537
 $3 = HEAP32[$0 + 4 >> 2] | 0; //@line 22539
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 64 >> 2] | 0; //@line 22542
 $8 = HEAP32[$1 + 4 >> 2] | 0; //@line 22544
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 22545
 $9 = FUNCTION_TABLE_iii[$6 & 31]($3, $8) | 0; //@line 22546
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 533; //@line 22549
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 22551
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 22553
  sp = STACKTOP; //@line 22554
  return 0; //@line 22555
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 22557
  $$ = $9 ? 7 : 6; //@line 22558
  $12 = HEAP8[$1 >> 0] | 0; //@line 22559
  $$1 = ($12 << 24 >> 24 < (HEAP8[$0 + 28 >> 0] | 0) ? 1 : $12 << 24 >> 24 > (HEAP8[$0 + 29 >> 0] | 0)) ? $$ & 5 : $$; //@line 22568
  $22 = HEAP8[$1 + 1 >> 0] | 0; //@line 22570
  return (($22 << 24 >> 24 < (HEAP8[$0 + 32 >> 0] | 0) ? 1 : $22 << 24 >> 24 > (HEAP8[$0 + 33 >> 0] | 0)) ? $$1 & 3 : $$1) | 0; //@line 22580
 }
 return 0; //@line 22582
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16675
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16677
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 16679
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16681
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16683
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16685
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16687
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16689
 $17 = HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] | 0; //@line 16692
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 16693
 FUNCTION_TABLE_viiiiiiiiiiiiii[$17 & 1]($2, 0, $4, 0, 0, 4800, 0, 5, 0, 0, 0, 0, 0, $6); //@line 16694
 if (!___async) {
  ___async_unwind = 0; //@line 16697
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 67; //@line 16699
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 16701
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $8; //@line 16703
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 16705
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $12; //@line 16707
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $14; //@line 16709
 sp = STACKTOP; //@line 16710
 return;
}
function __ZN4mbed5TimerC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2702
 HEAP32[$0 >> 2] = 0; //@line 2703
 $1 = $0 + 8 | 0; //@line 2704
 $2 = $0 + 16 | 0; //@line 2705
 HEAP32[$1 >> 2] = 0; //@line 2706
 HEAP32[$1 + 4 >> 2] = 0; //@line 2706
 HEAP32[$1 + 8 >> 2] = 0; //@line 2706
 HEAP32[$1 + 12 >> 2] = 0; //@line 2706
 $4 = $0 + 24 | 0; //@line 2708
 HEAP32[$4 >> 2] = _get_us_ticker_data() | 0; //@line 2709
 HEAP8[$0 + 28 >> 0] = 1; //@line 2711
 $6 = HEAP32[$4 >> 2] | 0; //@line 2712
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2713
 $7 = _ticker_read_us($6) | 0; //@line 2714
 $8 = tempRet0; //@line 2715
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 112; //@line 2718
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 2720
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 2722
  sp = STACKTOP; //@line 2723
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2726
  $11 = $1; //@line 2727
  HEAP32[$11 >> 2] = $7; //@line 2729
  HEAP32[$11 + 4 >> 2] = $8; //@line 2732
  $15 = $2; //@line 2733
  HEAP32[$15 >> 2] = 0; //@line 2735
  HEAP32[$15 + 4 >> 2] = 0; //@line 2738
  return;
 }
}
function __GLOBAL__sub_I_main_cpp() {
 var $AsyncCtx = 0, $AsyncCtx2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 7454
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7455
 __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_(18848, 9, 8, 7, 6, 23, 4, 5, 66, 67, 0, 1, -1, -1, -1, -1, 62, -1, -1); //@line 7456
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 646; //@line 7459
  sp = STACKTOP; //@line 7460
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7463
 __ZN5Sht31C2E7PinNameS0_(23804, 10, 11); //@line 7464
 __ZN4mbed11InterruptInC2E7PinName(22824, 1337); //@line 7465
 __ZN6events10EventQueueC2EjPh(22896, 1664, 0); //@line 7466
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7467
 __ZN16LoRaWANInterfaceC2ER9LoRaRadio(23100, 18848); //@line 7468
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 647; //@line 7471
  sp = STACKTOP; //@line 7472
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7475
  dest = 23108; //@line 7476
  stop = dest + 48 | 0; //@line 7476
  do {
   HEAP32[dest >> 2] = 0; //@line 7476
   dest = dest + 4 | 0; //@line 7476
  } while ((dest | 0) < (stop | 0));
  return;
 }
}
function __ZN7LoRaPHY11add_channelEP16channel_params_th__async_cb($0) {
 $0 = $0 | 0;
 var $$024 = 0, $10 = 0, $12 = 0, $2 = 0, $22 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $not$ = 0;
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 20672
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20674
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20676
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20678
 $not$ = HEAP8[___async_retval >> 0] & 1 ^ 1; //@line 20682
 if ($2 | $not$) {
  $$024 = $2 ? $2 & $not$ ? -1006 : -1005 : -1004; //@line 20688
  $27 = ___async_retval; //@line 20689
  HEAP32[$27 >> 2] = $$024; //@line 20690
  return;
 }
 $10 = $4 + 112 | 0; //@line 20693
 $12 = (HEAP32[$10 >> 2] | 0) + ($6 * 12 | 0) | 0; //@line 20695
 HEAP32[$12 >> 2] = HEAP32[$8 >> 2]; //@line 20696
 HEAP32[$12 + 4 >> 2] = HEAP32[$8 + 4 >> 2]; //@line 20696
 HEAP32[$12 + 8 >> 2] = HEAP32[$8 + 8 >> 2]; //@line 20696
 HEAP8[(HEAP32[$10 >> 2] | 0) + ($6 * 12 | 0) + 9 >> 0] = HEAP8[$8 + 9 >> 0] | 0; //@line 20701
 $22 = (HEAP32[$4 + 120 >> 2] | 0) + ($6 >>> 4 << 1) | 0; //@line 20707
 HEAP16[$22 >> 1] = 1 << ($6 & 15) | (HEAPU16[$22 >> 1] | 0); //@line 20712
 $$024 = 0; //@line 20713
 $27 = ___async_retval; //@line 20714
 HEAP32[$27 >> 2] = $$024; //@line 20715
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_351($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx18 = 0, sp = 0;
 sp = STACKTOP; //@line 28684
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28686
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28688
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28690
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28692
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28694
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28696
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28698
 HEAP32[$2 >> 2] = 1; //@line 28699
 HEAP8[$2 + 4 >> 0] = 0; //@line 28701
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(24) | 0; //@line 28702
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($4, $2) | 0; //@line 28703
 if (!___async) {
  ___async_unwind = 0; //@line 28706
 }
 HEAP32[$ReallocAsyncCtx18 >> 2] = 183; //@line 28708
 HEAP32[$ReallocAsyncCtx18 + 4 >> 2] = $6; //@line 28710
 HEAP32[$ReallocAsyncCtx18 + 8 >> 2] = $8; //@line 28712
 HEAP32[$ReallocAsyncCtx18 + 12 >> 2] = $10; //@line 28714
 HEAP32[$ReallocAsyncCtx18 + 16 >> 2] = $12; //@line 28716
 HEAP32[$ReallocAsyncCtx18 + 20 >> 2] = $14; //@line 28718
 sp = STACKTOP; //@line 28719
 return;
}
function __ZL25default_terminate_handlerv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 10855
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10857
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10859
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10861
 $8 = HEAP32[$0 + 20 >> 2] | 0; //@line 10863
 $10 = HEAP32[$0 + 24 >> 2] | 0; //@line 10865
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[$4 >> 2] = 18397; //@line 10870
  HEAP32[$4 + 4 >> 2] = $6; //@line 10872
  _abort_message(18306, $4); //@line 10873
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 10876
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0; //@line 10879
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 10880
 $16 = FUNCTION_TABLE_ii[$15 & 15]($12) | 0; //@line 10881
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 10885
  ___async_unwind = 0; //@line 10886
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 665; //@line 10888
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 10890
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 10892
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 10894
 sp = STACKTOP; //@line 10895
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_27($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 19043
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19045
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19047
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19049
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19051
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19053
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19055
 $15 = HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0; //@line 19058
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(28) | 0; //@line 19059
 __ZN7LoRaPHY18put_radio_to_sleepEv($15); //@line 19060
 if (!___async) {
  ___async_unwind = 0; //@line 19063
 }
 HEAP32[$ReallocAsyncCtx13 >> 2] = 428; //@line 19065
 HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $2; //@line 19067
 HEAP32[$ReallocAsyncCtx13 + 8 >> 2] = $4; //@line 19069
 HEAP32[$ReallocAsyncCtx13 + 12 >> 2] = $6; //@line 19071
 HEAP32[$ReallocAsyncCtx13 + 16 >> 2] = $8; //@line 19073
 HEAP32[$ReallocAsyncCtx13 + 20 >> 2] = $10; //@line 19075
 HEAP32[$ReallocAsyncCtx13 + 24 >> 2] = $12; //@line 19077
 sp = STACKTOP; //@line 19078
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_265($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16846
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16848
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16850
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16852
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16854
 HEAP32[$2 >> 2] = 2; //@line 16855
 $9 = $2 + 4 | 0; //@line 16856
 HEAP8[$9 >> 0] = 1; //@line 16857
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 16858
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($4, $2) | 0; //@line 16859
 if (!___async) {
  ___async_unwind = 0; //@line 16862
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 243; //@line 16864
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 16866
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $9; //@line 16868
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $4; //@line 16870
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $2; //@line 16872
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $6; //@line 16874
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $8; //@line 16876
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $2; //@line 16878
 sp = STACKTOP; //@line 16879
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_358($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 29086
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29088
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29090
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29092
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29094
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29096
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29098
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29100
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(32) | 0; //@line 29101
 __ZN7LoRaMac10disconnectEv($14); //@line 29102
 if (!___async) {
  ___async_unwind = 0; //@line 29105
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 182; //@line 29107
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $12; //@line 29109
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $14; //@line 29111
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $2; //@line 29113
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $4; //@line 29115
 HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $6; //@line 29117
 HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $8; //@line 29119
 HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $10; //@line 29121
 sp = STACKTOP; //@line 29122
 return;
}
function _mbedtls_gcm_setkey__async_cb_233($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14691
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14693
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14695
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14697
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14699
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14701
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14703
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14705
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 14709
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 14712
 $15 = _mbedtls_cipher_setkey($2, $4, $6, 1) | 0; //@line 14713
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 14717
  ___async_unwind = 0; //@line 14718
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 592; //@line 14720
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 14722
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 14724
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 14726
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $12; //@line 14728
 sp = STACKTOP; //@line 14729
 return;
}
function __ZN16SX1276_LoRaRadio11rx_done_irqEv($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $18 = 0, $19 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1591
 STACKTOP = STACKTOP + 16 | 0; //@line 1592
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1592
 _mbed_tracef(16, 10944, 11461, sp); //@line 1594
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 1596
 HEAP8[$0 + 688 >> 0] = 0; //@line 1598
 $4 = HEAP32[$0 + 788 >> 2] | 0; //@line 1600
 if (!$4) {
  STACKTOP = sp; //@line 1603
  return;
 }
 $7 = HEAP32[$4 + 44 >> 2] | 0; //@line 1606
 if (!$7) {
  STACKTOP = sp; //@line 1609
  return;
 }
 $13 = HEAPU8[$0 + 782 >> 0] | 0; //@line 1615
 $16 = HEAP8[$0 + 781 >> 0] | 0; //@line 1618
 $18 = HEAP8[$0 + 780 >> 0] | 0; //@line 1620
 $19 = HEAP32[$7 >> 2] | 0; //@line 1621
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1622
 FUNCTION_TABLE_viiiii[$19 & 7]($4 + 32 | 0, $0 + 792 | 0, $13, $16, $18); //@line 1623
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 83; //@line 1626
  sp = STACKTOP; //@line 1627
  STACKTOP = sp; //@line 1628
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1630
 STACKTOP = sp; //@line 1631
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $12 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30789
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30791
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30793
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30797
 if (!(HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0)) {
  $$037$off038 = 4; //@line 30801
  label = 4; //@line 30802
 } else {
  if (!(HEAP8[HEAP32[$0 + 20 >> 2] >> 0] | 0)) {
   $$037$off038 = 3; //@line 30807
   label = 4; //@line 30808
  } else {
   $$037$off039 = 3; //@line 30810
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$6 >> 2] = $4; //@line 30814
  $17 = $8 + 40 | 0; //@line 30815
  HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1; //@line 30818
  if ((HEAP32[$8 + 36 >> 2] | 0) == 1) {
   if ((HEAP32[$8 + 24 >> 2] | 0) == 2) {
    HEAP8[$8 + 54 >> 0] = 1; //@line 30828
    $$037$off039 = $$037$off038; //@line 30829
   } else {
    $$037$off039 = $$037$off038; //@line 30831
   }
  } else {
   $$037$off039 = $$037$off038; //@line 30834
  }
 }
 HEAP32[$12 >> 2] = $$037$off039; //@line 30837
 return;
}
function ___strerror_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $7 = 0, label = 0, $$113$looptemp = 0;
 $$016 = 0; //@line 14687
 while (1) {
  if ((HEAPU8[16369 + $$016 >> 0] | 0) == ($0 | 0)) {
   label = 2; //@line 14694
   break;
  }
  $7 = $$016 + 1 | 0; //@line 14697
  if (($7 | 0) == 87) {
   $$01214 = 16457; //@line 14700
   $$115 = 87; //@line 14700
   label = 5; //@line 14701
   break;
  } else {
   $$016 = $7; //@line 14704
  }
 }
 if ((label | 0) == 2) {
  if (!$$016) {
   $$012$lcssa = 16457; //@line 14710
  } else {
   $$01214 = 16457; //@line 14712
   $$115 = $$016; //@line 14712
   label = 5; //@line 14713
  }
 }
 if ((label | 0) == 5) {
  while (1) {
   label = 0; //@line 14718
   $$113 = $$01214; //@line 14719
   do {
    $$113$looptemp = $$113;
    $$113 = $$113 + 1 | 0; //@line 14723
   } while ((HEAP8[$$113$looptemp >> 0] | 0) != 0);
   $$115 = $$115 + -1 | 0; //@line 14730
   if (!$$115) {
    $$012$lcssa = $$113; //@line 14733
    break;
   } else {
    $$01214 = $$113; //@line 14736
    label = 5; //@line 14737
   }
  }
 }
 return ___lctrans($$012$lcssa, HEAP32[$1 + 20 >> 2] | 0) | 0; //@line 14744
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $19 = 0;
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 16017
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 16026
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 16031
      HEAP32[$13 >> 2] = $2; //@line 16032
      $19 = $1 + 40 | 0; //@line 16033
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1; //@line 16036
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 16046
       }
      }
      HEAP32[$1 + 44 >> 2] = 4; //@line 16050
      break;
     }
    }
    if (($3 | 0) == 1) {
     HEAP32[$1 + 32 >> 2] = 1; //@line 16057
    }
   }
  }
 } while (0);
 return;
}
function _mbedtls_gcm_setkey__async_cb_234($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14736
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14738
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14740
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14742
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14744
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14746
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14748
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14750
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 14751
 $15 = _mbedtls_cipher_setup($2, $4) | 0; //@line 14752
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 14756
  ___async_unwind = 0; //@line 14757
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 591; //@line 14759
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 14761
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $6; //@line 14763
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $8; //@line 14765
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $10; //@line 14767
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $12; //@line 14769
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $14; //@line 14771
 sp = STACKTOP; //@line 14772
 return;
}
function __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 $5 = +$5;
 $6 = $6 | 0;
 var $13 = 0, $16 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 21140
 STACKTOP = STACKTOP + 16 | 0; //@line 21141
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 21141
 $7 = sp; //@line 21142
 HEAP8[$7 >> 0] = $1; //@line 21143
 HEAP8[$7 + 1 >> 0] = $2; //@line 21145
 HEAP8[$7 + 2 >> 0] = $3; //@line 21147
 HEAPF32[$7 + 4 >> 2] = $4; //@line 21149
 HEAPF32[$7 + 8 >> 2] = $5; //@line 21151
 HEAP16[$7 + 12 >> 1] = $6; //@line 21153
 $13 = HEAP32[$0 >> 2] | 0; //@line 21154
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 68 >> 2] | 0; //@line 21157
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 21158
 FUNCTION_TABLE_viii[$16 & 7]($13, $7, 0); //@line 21159
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 512; //@line 21162
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 21164
  sp = STACKTOP; //@line 21165
  STACKTOP = sp; //@line 21166
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 21168
  STACKTOP = sp; //@line 21169
  return;
 }
}
function __ZN4mbed11InterruptInD2Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2397
 HEAP32[$0 >> 2] = 668; //@line 2398
 _gpio_irq_free($0 + 28 | 0); //@line 2400
 $3 = HEAP32[$0 + 68 >> 2] | 0; //@line 2402
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 2408
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2409
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 56 | 0); //@line 2410
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 100; //@line 2413
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2415
    sp = STACKTOP; //@line 2416
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2419
    break;
   }
  }
 } while (0);
 $10 = HEAP32[$0 + 52 >> 2] | 0; //@line 2425
 if (!$10) {
  return;
 }
 $14 = HEAP32[$10 + 8 >> 2] | 0; //@line 2432
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2433
 FUNCTION_TABLE_vi[$14 & 1023]($0 + 40 | 0); //@line 2434
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 101; //@line 2437
  sp = STACKTOP; //@line 2438
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2441
 return;
}
function _strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $5 = 0;
 $2 = HEAP8[$1 >> 0] | 0; //@line 14760
 do {
  if (!($2 << 24 >> 24)) {
   $$0 = $0; //@line 14764
  } else {
   $5 = _strchr($0, $2 << 24 >> 24) | 0; //@line 14767
   if (!$5) {
    $$0 = 0; //@line 14770
   } else {
    if (!(HEAP8[$1 + 1 >> 0] | 0)) {
     $$0 = $5; //@line 14776
    } else {
     if (!(HEAP8[$5 + 1 >> 0] | 0)) {
      $$0 = 0; //@line 14782
     } else {
      if (!(HEAP8[$1 + 2 >> 0] | 0)) {
       $$0 = _twobyte_strstr($5, $1) | 0; //@line 14789
       break;
      }
      if (!(HEAP8[$5 + 2 >> 0] | 0)) {
       $$0 = 0; //@line 14796
      } else {
       if (!(HEAP8[$1 + 3 >> 0] | 0)) {
        $$0 = _threebyte_strstr($5, $1) | 0; //@line 14803
        break;
       }
       if (!(HEAP8[$5 + 3 >> 0] | 0)) {
        $$0 = 0; //@line 14810
       } else {
        if (!(HEAP8[$1 + 4 >> 0] | 0)) {
         $$0 = _fourbyte_strstr($5, $1) | 0; //@line 14817
         break;
        } else {
         $$0 = _twoway_strstr($5, $1) | 0; //@line 14821
         break;
        }
       }
      }
     }
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 14831
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_281($0) {
 $0 = $0 | 0;
 var $$pre122 = 0, $10 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 19175
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19177
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19179
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19181
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19183
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19185
 $$pre122 = HEAP32[$2 >> 2] | 0; //@line 19186
 if (!$$pre122) {
  HEAP32[$4 >> 2] = 0; //@line 19189
  HEAP32[___async_retval >> 2] = $10; //@line 19191
  return;
 }
 $13 = HEAP32[$$pre122 + 4 >> 2] | 0; //@line 19195
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(20) | 0; //@line 19196
 FUNCTION_TABLE_vii[$13 & 31]($6, $8); //@line 19197
 if (!___async) {
  ___async_unwind = 0; //@line 19200
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 483; //@line 19202
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $2; //@line 19204
 HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $4; //@line 19206
 HEAP32[$ReallocAsyncCtx14 + 12 >> 2] = $8; //@line 19208
 HEAP32[$ReallocAsyncCtx14 + 16 >> 2] = $10; //@line 19210
 sp = STACKTOP; //@line 19211
 return;
}
function __ZN4mbed7Timeout7handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2657
 $1 = $0 + 40 | 0; //@line 2658
 $2 = $0 + 52 | 0; //@line 2659
 $3 = HEAP32[$2 >> 2] | 0; //@line 2660
 do {
  if (!$3) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2664
   _mbed_assert_internal(15615, 15620, 528); //@line 2665
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 110; //@line 2668
    HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 2670
    HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 2672
    sp = STACKTOP; //@line 2673
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2676
    $8 = HEAP32[$2 >> 2] | 0; //@line 2678
    break;
   }
  } else {
   $8 = $3; //@line 2682
  }
 } while (0);
 $7 = HEAP32[$8 >> 2] | 0; //@line 2685
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2686
 FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 2687
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 111; //@line 2690
  sp = STACKTOP; //@line 2691
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2694
  return;
 }
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 9624
 $1 = $0 + 12 | 0; //@line 9625
 $2 = HEAP32[$1 >> 2] | 0; //@line 9626
 do {
  if (!$2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9630
   _mbed_assert_internal(15615, 15620, 528); //@line 9631
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 293; //@line 9634
    HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 9636
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 9638
    sp = STACKTOP; //@line 9639
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9642
    $7 = HEAP32[$1 >> 2] | 0; //@line 9644
    break;
   }
  } else {
   $7 = $2; //@line 9648
  }
 } while (0);
 $6 = HEAP32[$7 >> 2] | 0; //@line 9651
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9652
 FUNCTION_TABLE_vi[$6 & 1023]($0); //@line 9653
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 294; //@line 9656
  sp = STACKTOP; //@line 9657
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9660
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_346($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx22 = 0, sp = 0;
 sp = STACKTOP; //@line 28377
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28381
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28383
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28385
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28387
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28389
 $13 = $4 + 12 | 0; //@line 28391
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 28392
 $ReallocAsyncCtx22 = _emscripten_realloc_async_context(20) | 0; //@line 28393
 $14 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 5) | 0; //@line 28394
 if (!___async) {
  HEAP32[___async_retval >> 2] = $14; //@line 28398
  ___async_unwind = 0; //@line 28399
 }
 HEAP32[$ReallocAsyncCtx22 >> 2] = 204; //@line 28401
 HEAP32[$ReallocAsyncCtx22 + 4 >> 2] = $13; //@line 28403
 HEAP32[$ReallocAsyncCtx22 + 8 >> 2] = $8; //@line 28405
 HEAP32[$ReallocAsyncCtx22 + 12 >> 2] = $10; //@line 28407
 HEAP32[$ReallocAsyncCtx22 + 16 >> 2] = $12; //@line 28409
 sp = STACKTOP; //@line 28410
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 13901
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13903
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13905
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13907
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13911
 $11 = $2 + 12 | 0; //@line 13913
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 16 >> 2] >> 2]; //@line 13914
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 13915
 $12 = _equeue_alloc($10, 16) | 0; //@line 13916
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 13920
  ___async_unwind = 0; //@line 13921
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 562; //@line 13923
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 13925
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 13927
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $10; //@line 13929
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $11; //@line 13931
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $6; //@line 13933
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $11; //@line 13935
 sp = STACKTOP; //@line 13936
 return;
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv($0) {
 $0 = $0 | 0;
 var $15 = 0, $2 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12299
 STACKTOP = STACKTOP + 16 | 0; //@line 12300
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12300
 _mbed_tracef(16, 13704, 13897, sp); //@line 12302
 $2 = HEAP32[$0 + 356 >> 2] | 0; //@line 12304
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 12306
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $0 + 1076 | 0); //@line 12307
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 352; //@line 12310
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 12312
  sp = STACKTOP; //@line 12313
  STACKTOP = sp; //@line 12314
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 12316
 if (HEAP8[$0 + 373 >> 0] | 0) {
  HEAP8[$0 + 377 >> 0] = 1; //@line 12322
  $9 = $0 + 968 | 0; //@line 12323
  HEAP32[$9 >> 2] = HEAP32[$9 >> 2] & -5; //@line 12326
 }
 if ((HEAP32[$0 + 360 >> 2] | 0) != 2) {
  STACKTOP = sp; //@line 12332
  return;
 }
 $15 = $0 + 944 | 0; //@line 12334
 HEAP8[$15 >> 0] = HEAP8[$15 >> 0] | 32; //@line 12337
 STACKTOP = sp; //@line 12338
 return;
}
function __ZN4mbed6TickerD0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7283
 HEAP32[$0 >> 2] = 10172; //@line 7284
 $1 = $0 + 40 | 0; //@line 7285
 _emscripten_asm_const_ii(14, $1 | 0) | 0; //@line 7286
 $4 = HEAP32[$0 + 52 >> 2] | 0; //@line 7288
 do {
  if ($4 | 0) {
   $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 7293
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7294
   FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 7295
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 640; //@line 7298
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7300
    sp = STACKTOP; //@line 7301
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7304
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7309
 __ZN4mbed10TimerEventD2Ev($0); //@line 7310
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 641; //@line 7313
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 7315
  sp = STACKTOP; //@line 7316
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7319
  __ZdlPv($0); //@line 7320
  return;
 }
}
function _mbed_vtracef__async_cb_387($0) {
 $0 = $0 | 0;
 var $3 = 0, $5 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 32067
 $3 = HEAP32[191] | 0; //@line 32071
 if (HEAP8[$0 + 4 >> 0] & 1 & ($3 | 0) != 0) {
  $5 = HEAP32[183] | 0; //@line 32075
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 32076
  FUNCTION_TABLE_vi[$3 & 1023]($5); //@line 32077
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 127; //@line 32080
   sp = STACKTOP; //@line 32081
   return;
  }
  ___async_unwind = 0; //@line 32084
  HEAP32[$ReallocAsyncCtx2 >> 2] = 127; //@line 32085
  sp = STACKTOP; //@line 32086
  return;
 } else {
  $6 = HEAP32[190] | 0; //@line 32089
  $7 = HEAP32[183] | 0; //@line 32090
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 32091
  FUNCTION_TABLE_vi[$6 & 1023]($7); //@line 32092
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 129; //@line 32095
   sp = STACKTOP; //@line 32096
   return;
  }
  ___async_unwind = 0; //@line 32099
  HEAP32[$ReallocAsyncCtx4 >> 2] = 129; //@line 32100
  sp = STACKTOP; //@line 32101
  return;
 }
}
function _fourbyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$lcssa = 0, $$sink21$lcssa = 0, $$sink2123 = 0, $18 = 0, $32 = 0, $33 = 0, $35 = 0, $39 = 0, $40 = 0, $41 = 0;
 $18 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8 | (HEAPU8[$1 + 3 >> 0] | 0); //@line 14956
 $32 = $0 + 3 | 0; //@line 14970
 $33 = HEAP8[$32 >> 0] | 0; //@line 14971
 $35 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | (HEAPU8[$0 + 2 >> 0] | 0) << 8 | $33 & 255; //@line 14973
 if ($33 << 24 >> 24 == 0 | ($35 | 0) == ($18 | 0)) {
  $$lcssa = $33; //@line 14978
  $$sink21$lcssa = $32; //@line 14978
 } else {
  $$sink2123 = $32; //@line 14980
  $39 = $35; //@line 14980
  while (1) {
   $40 = $$sink2123 + 1 | 0; //@line 14983
   $41 = HEAP8[$40 >> 0] | 0; //@line 14984
   $39 = $39 << 8 | $41 & 255; //@line 14986
   if ($41 << 24 >> 24 == 0 | ($39 | 0) == ($18 | 0)) {
    $$lcssa = $41; //@line 14991
    $$sink21$lcssa = $40; //@line 14991
    break;
   } else {
    $$sink2123 = $40; //@line 14994
   }
  }
 }
 return ($$lcssa << 24 >> 24 ? $$sink21$lcssa + -3 | 0 : 0) | 0; //@line 15001
}
function __ZN18LoRaMacChannelPlan11remove_planEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 11679
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11681
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11683
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11685
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11687
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11689
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[___async_retval >> 2] = -1003; //@line 11695
  return;
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 11698
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 11699
 __ZN7LoRaPHY18put_radio_to_sleepEv($12); //@line 11700
 if (!___async) {
  ___async_unwind = 0; //@line 11703
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 487; //@line 11705
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 11707
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 11709
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 11711
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 11713
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 11715
 sp = STACKTOP; //@line 11716
 return;
}
function __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0) {
 $0 = $0 | 0;
 var $13 = 0, sp = 0;
 sp = STACKTOP; //@line 1533
 STACKTOP = STACKTOP + 16 | 0; //@line 1534
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1534
 _mbed_tracef(16, 10944, 11059, sp); //@line 1536
 if ((HEAP32[$0 + 652 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 + 484 >> 2] | 0, 0) | 0; //@line 1543
 }
 if ((HEAP32[$0 + 656 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 + 508 >> 2] | 0, 0) | 0; //@line 1551
 }
 if ((HEAP32[$0 + 672 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 + 604 >> 2] | 0, 0) | 0; //@line 1559
 }
 $13 = $0 + 660 | 0; //@line 1561
 if ((HEAP32[$13 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 + 532 >> 2] | 0, 0) | 0; //@line 1567
  if ((HEAP32[$13 >> 2] | 0) != -1) {
   _emscripten_asm_const_iii(5, HEAP32[$0 + 556 >> 2] | 0, 0) | 0; //@line 1573
  }
 }
 if ((HEAP32[$0 + 668 >> 2] | 0) == -1) {
  STACKTOP = sp; //@line 1580
  return;
 }
 _emscripten_asm_const_iii(5, HEAP32[$0 + 580 >> 2] | 0, 0) | 0; //@line 1584
 STACKTOP = sp; //@line 1585
 return;
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 32034
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32038
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32044
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  return;
 }
 $13 = (HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) != 0; //@line 32052
 $15 = HEAP32[$4 + 1108 >> 2] | 0; //@line 32054
 _mbed_tracef(16, 13704, 13772, HEAP32[$0 + 12 >> 2] | 0); //@line 32055
 $16 = HEAP32[$10 >> 2] | 0; //@line 32056
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 32057
 __ZN7LoRaPHY15setup_rx_windowEbj($16, $13, $15); //@line 32058
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 298; //@line 32061
  $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 32062
  HEAP32[$17 >> 2] = $4; //@line 32063
  sp = STACKTOP; //@line 32064
  return;
 }
 ___async_unwind = 0; //@line 32067
 HEAP32[$ReallocAsyncCtx2 >> 2] = 298; //@line 32068
 $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 32069
 HEAP32[$17 >> 2] = $4; //@line 32070
 sp = STACKTOP; //@line 32071
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_347($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx27 = 0, sp = 0;
 sp = STACKTOP; //@line 28416
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28420
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28422
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[$4 >> 2] = 6; //@line 28425
  HEAP32[___async_retval >> 2] = -1014; //@line 28427
  return;
 }
 $ReallocAsyncCtx27 = _emscripten_realloc_async_context(12) | 0; //@line 28430
 _mbed_assert_internal(13588, 12372, 1237); //@line 28431
 if (___async) {
  HEAP32[$ReallocAsyncCtx27 >> 2] = 206; //@line 28434
  $8 = $ReallocAsyncCtx27 + 4 | 0; //@line 28435
  HEAP32[$8 >> 2] = $4; //@line 28436
  $9 = $ReallocAsyncCtx27 + 8 | 0; //@line 28437
  HEAP32[$9 >> 2] = $6; //@line 28438
  sp = STACKTOP; //@line 28439
  return;
 }
 ___async_unwind = 0; //@line 28442
 HEAP32[$ReallocAsyncCtx27 >> 2] = 206; //@line 28443
 $8 = $ReallocAsyncCtx27 + 4 | 0; //@line 28444
 HEAP32[$8 >> 2] = $4; //@line 28445
 $9 = $ReallocAsyncCtx27 + 8 | 0; //@line 28446
 HEAP32[$9 >> 2] = $6; //@line 28447
 sp = STACKTOP; //@line 28448
 return;
}
function _invoke_ticker($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7350
 $2 = $0 + 12 | 0; //@line 7352
 $3 = HEAP32[$2 >> 2] | 0; //@line 7353
 do {
  if (!$3) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7357
   _mbed_assert_internal(15615, 15620, 528); //@line 7358
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 643; //@line 7361
    HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 7363
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 7365
    sp = STACKTOP; //@line 7366
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7369
    $8 = HEAP32[$2 >> 2] | 0; //@line 7371
    break;
   }
  } else {
   $8 = $3; //@line 7375
  }
 } while (0);
 $7 = HEAP32[$8 >> 2] | 0; //@line 7378
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7380
 FUNCTION_TABLE_vi[$7 & 1023]($0); //@line 7381
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 644; //@line 7384
  sp = STACKTOP; //@line 7385
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7388
  return;
 }
}
function __ZN4mbed7TimeoutD0Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2613
 HEAP32[$0 >> 2] = 10172; //@line 2614
 __ZN4mbed6Ticker6detachEv($0); //@line 2615
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 2617
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 2623
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2624
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 40 | 0); //@line 2625
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 108; //@line 2628
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2630
    sp = STACKTOP; //@line 2631
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2634
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2639
 __ZN4mbed10TimerEventD2Ev($0); //@line 2640
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 109; //@line 2643
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 2645
  sp = STACKTOP; //@line 2646
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2649
  __ZdlPv($0); //@line 2650
  return;
 }
}
function __ZN16LoRaWANInterface4sendEhPKhti($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $10 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4582
 do {
  if (HEAP8[$0 + 4 >> 0] | 0) {
   $10 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 4590
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 4591
   FUNCTION_TABLE_ii[$10 & 15]($0) | 0; //@line 4592
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 138; //@line 4595
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 4597
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 4599
    HEAP8[$AsyncCtx + 12 >> 0] = $1; //@line 4601
    HEAP16[$AsyncCtx + 14 >> 1] = $3; //@line 4603
    sp = STACKTOP; //@line 4604
    return 0; //@line 4605
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 4607
    break;
   }
  }
 } while (0);
 if (!$2) {
  $$0 = -1003; //@line 4614
  return $$0 | 0; //@line 4615
 }
 $$0 = __ZN12LoRaWANStack9handle_txEhPKhth(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1, $2, $3, $4 & 255) | 0; //@line 4620
 return $$0 | 0; //@line 4621
}
function _abort_message($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15850
 STACKTOP = STACKTOP + 16 | 0; //@line 15851
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15851
 $1 = sp; //@line 15852
 HEAP32[$1 >> 2] = $varargs; //@line 15853
 $2 = HEAP32[2548] | 0; //@line 15854
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 15855
 _vfprintf($2, $0, $1) | 0; //@line 15856
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 666; //@line 15859
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 15861
  sp = STACKTOP; //@line 15862
  STACKTOP = sp; //@line 15863
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15865
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 15866
 _fputc(10, $2) | 0; //@line 15867
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 667; //@line 15870
  sp = STACKTOP; //@line 15871
  STACKTOP = sp; //@line 15872
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 15874
  _abort(); //@line 15875
 }
}
function __ZN12LoRaWANStack24enable_adaptive_datarateEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8372
 STACKTOP = STACKTOP + 16 | 0; //@line 8373
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 8373
 $2 = sp + 4 | 0; //@line 8375
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _mbed_tracef(2, 12332, 13282, sp); //@line 8380
  $$0 = -1012; //@line 8381
  STACKTOP = sp; //@line 8382
  return $$0 | 0; //@line 8382
 }
 HEAP32[$2 >> 2] = 2; //@line 8385
 HEAP8[$2 + 4 >> 0] = $1 & 1; //@line 8387
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 8389
 $9 = __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($0 + 4 | 0, $2) | 0; //@line 8390
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 255; //@line 8393
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 8395
  sp = STACKTOP; //@line 8396
  STACKTOP = sp; //@line 8397
  return 0; //@line 8397
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8399
 $$0 = $9; //@line 8400
 STACKTOP = sp; //@line 8401
 return $$0 | 0; //@line 8401
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $15 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23002
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23004
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23008
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 23010
 $9 = HEAP32[$2 >> 2] | 0; //@line 23011
 $12 = HEAP32[(HEAP32[$9 >> 2] | 0) + 68 >> 2] | 0; //@line 23014
 $14 = HEAP16[(HEAP32[$0 + 8 >> 2] | 0) + 12 >> 1] | 0; //@line 23016
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 23017
 FUNCTION_TABLE_viiii[$12 & 7]($9, $6, $8, $14); //@line 23018
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 537; //@line 23021
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 23022
  HEAP32[$15 >> 2] = $2; //@line 23023
  sp = STACKTOP; //@line 23024
  return;
 }
 ___async_unwind = 0; //@line 23027
 HEAP32[$ReallocAsyncCtx2 >> 2] = 537; //@line 23028
 $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 23029
 HEAP32[$15 >> 2] = $2; //@line 23030
 sp = STACKTOP; //@line 23031
 return;
}
function _threebyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$016$lcssa = 0, $$01618 = 0, $$019 = 0, $$lcssa = 0, $14 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0;
 $14 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8; //@line 14890
 $23 = $0 + 2 | 0; //@line 14899
 $24 = HEAP8[$23 >> 0] | 0; //@line 14900
 $27 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | ($24 & 255) << 8; //@line 14903
 if (($27 | 0) == ($14 | 0) | $24 << 24 >> 24 == 0) {
  $$016$lcssa = $23; //@line 14908
  $$lcssa = $24; //@line 14908
 } else {
  $$01618 = $23; //@line 14910
  $$019 = $27; //@line 14910
  while (1) {
   $30 = $$01618 + 1 | 0; //@line 14912
   $31 = HEAP8[$30 >> 0] | 0; //@line 14913
   $$019 = ($$019 | $31 & 255) << 8; //@line 14916
   if (($$019 | 0) == ($14 | 0) | $31 << 24 >> 24 == 0) {
    $$016$lcssa = $30; //@line 14921
    $$lcssa = $31; //@line 14921
    break;
   } else {
    $$01618 = $30; //@line 14924
   }
  }
 }
 return ($$lcssa << 24 >> 24 ? $$016$lcssa + -2 | 0 : 0) | 0; //@line 14931
}
function __ZN7LoRaPHY17calculate_backoffEP16backoff_params_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$034 = 0, $$sink = 0, $11 = 0, $13 = 0, $14 = 0, $18 = 0, $3 = 0, $30 = 0;
 $3 = HEAP32[$0 + 72 >> 2] | 0; //@line 24305
 $11 = HEAPU8[(HEAP32[$0 + 112 >> 2] | 0) + ((HEAPU8[$1 + 3 >> 0] | 0) * 12 | 0) + 9 >> 0] | 0; //@line 24313
 $13 = HEAP16[$3 + ($11 * 24 | 0) >> 1] | 0; //@line 24315
 $14 = $3 + ($11 * 24 | 0) + 12 | 0; //@line 24316
 HEAP32[$14 >> 2] = 0; //@line 24317
 if (!(HEAP8[$1 >> 0] | 0)) {
  $18 = HEAP32[$1 + 4 >> 2] | 0; //@line 24322
  $$0 = $18 >>> 0 < 36e5 ? 100 : $18 >>> 0 < 396e5 ? 1e3 : 1e4; //@line 24326
  $$034 = ($13 & 65535) > ($$0 & 65535) ? $13 : $$0; //@line 24329
 } else {
  $$034 = $13; //@line 24331
 }
 if (!(HEAP8[$1 + 2 >> 0] | 0)) {
  if (!(HEAP8[$1 + 1 >> 0] | 0)) {
   $$sink = 0; //@line 24341
   HEAP32[$14 >> 2] = $$sink; //@line 24342
   return;
  }
 }
 $30 = HEAP32[$1 + 8 >> 2] | 0; //@line 24347
 $$sink = (Math_imul($30, $$034 & 65535) | 0) - $30 | 0; //@line 24351
 HEAP32[$14 >> 2] = $$sink; //@line 24352
 return;
}
function __ZN4mbed6TickerD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7242
 HEAP32[$0 >> 2] = 10172; //@line 7243
 $1 = $0 + 40 | 0; //@line 7244
 _emscripten_asm_const_ii(14, $1 | 0) | 0; //@line 7245
 $4 = HEAP32[$0 + 52 >> 2] | 0; //@line 7247
 do {
  if ($4 | 0) {
   $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 7252
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7253
   FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 7254
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 638; //@line 7257
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7259
    sp = STACKTOP; //@line 7260
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7263
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7268
 __ZN4mbed10TimerEventD2Ev($0); //@line 7269
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 639; //@line 7272
  sp = STACKTOP; //@line 7273
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7276
  return;
 }
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 16775
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16777
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16779
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16781
 HEAP32[$2 + 1960 >> 2] = 0; //@line 16783
 HEAP32[$2 + 1956 >> 2] = 0; //@line 16785
 HEAP32[$4 >> 2] = 1; //@line 16786
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 16787
 $9 = __ZN12LoRaWANStack18lora_state_machineEv($2) | 0; //@line 16788
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 245; //@line 16791
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 16792
  HEAP32[$10 >> 2] = $6; //@line 16793
  sp = STACKTOP; //@line 16794
  return;
 }
 HEAP32[___async_retval >> 2] = $9; //@line 16798
 ___async_unwind = 0; //@line 16799
 HEAP32[$ReallocAsyncCtx4 >> 2] = 245; //@line 16800
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 16801
 HEAP32[$10 >> 2] = $6; //@line 16802
 sp = STACKTOP; //@line 16803
 return;
}
function _ticker_read_us__async_cb_177($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 551
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 553
 $3 = $2 + 4 | 0; //@line 554
 $4 = HEAP32[$3 >> 2] | 0; //@line 555
 $7 = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0; //@line 558
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 559
 $8 = FUNCTION_TABLE_i[$7 & 7]() | 0; //@line 560
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 613; //@line 563
  $9 = $ReallocAsyncCtx + 4 | 0; //@line 564
  HEAP32[$9 >> 2] = $3; //@line 565
  $10 = $ReallocAsyncCtx + 8 | 0; //@line 566
  HEAP32[$10 >> 2] = $4; //@line 567
  sp = STACKTOP; //@line 568
  return;
 }
 HEAP32[___async_retval >> 2] = $8; //@line 572
 ___async_unwind = 0; //@line 573
 HEAP32[$ReallocAsyncCtx >> 2] = 613; //@line 574
 $9 = $ReallocAsyncCtx + 4 | 0; //@line 575
 HEAP32[$9 >> 2] = $3; //@line 576
 $10 = $ReallocAsyncCtx + 8 | 0; //@line 577
 HEAP32[$10 >> 2] = $4; //@line 578
 sp = STACKTOP; //@line 579
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_264($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16810
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16814
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16816
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16818
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16820
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16822
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16824
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 7; //@line 16825
 HEAP8[$4 >> 0] = 1; //@line 16826
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 16827
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($6, $8) | 0; //@line 16828
 if (!___async) {
  ___async_unwind = 0; //@line 16831
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 244; //@line 16833
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $10; //@line 16835
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $12; //@line 16837
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $14; //@line 16839
 sp = STACKTOP; //@line 16840
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_173($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 3
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 7
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 10
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 76 >> 2] | 0; //@line 13
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 14
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 15
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 525; //@line 18
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 19
  HEAP8[$11 >> 0] = $4; //@line 20
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 21
  HEAP32[$12 >> 2] = $6; //@line 22
  sp = STACKTOP; //@line 23
  return;
 }
 ___async_unwind = 0; //@line 26
 HEAP32[$ReallocAsyncCtx9 >> 2] = 525; //@line 27
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 28
 HEAP8[$11 >> 0] = $4; //@line 29
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 30
 HEAP32[$12 >> 2] = $6; //@line 31
 sp = STACKTOP; //@line 32
 return;
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_10($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 17888
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17892
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17894
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 17895
 if (!$6) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 17899
  return;
 }
 $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 17903
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 17904
 FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 17905
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 291; //@line 17908
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 17909
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 17910
  sp = STACKTOP; //@line 17911
  return;
 }
 ___async_unwind = 0; //@line 17914
 HEAP32[$ReallocAsyncCtx2 >> 2] = 291; //@line 17915
 $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 17916
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 17917
 sp = STACKTOP; //@line 17918
 return;
}
function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $2 = 0, $3 = 0, $4 = 0, $9 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 14518
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 14518
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 14519
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 14520
 switch ($4 & 2047) {
 case 0:
  {
   if ($0 != 0.0) {
    $9 = +_frexp($0 * 18446744073709552000.0, $1); //@line 14529
    $$016 = $9; //@line 14532
    $storemerge = (HEAP32[$1 >> 2] | 0) + -64 | 0; //@line 14532
   } else {
    $$016 = $0; //@line 14534
    $storemerge = 0; //@line 14534
   }
   HEAP32[$1 >> 2] = $storemerge; //@line 14536
   $$0 = $$016; //@line 14537
   break;
  }
 case 2047:
  {
   $$0 = $0; //@line 14541
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = ($4 & 2047) + -1022; //@line 14547
   HEAP32[tempDoublePtr >> 2] = $2; //@line 14550
   HEAP32[tempDoublePtr + 4 >> 2] = $3 & -2146435073 | 1071644672; //@line 14550
   $$0 = +HEAPF64[tempDoublePtr >> 3]; //@line 14551
  }
 }
 return +$$0;
}
function ___cxa_can_catch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17479
 STACKTOP = STACKTOP + 16 | 0; //@line 17480
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17480
 $3 = sp; //@line 17481
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 17483
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 17486
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 17487
 $8 = FUNCTION_TABLE_iiii[$7 & 15]($0, $1, $3) | 0; //@line 17488
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 690; //@line 17491
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 17493
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 17495
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 17497
  sp = STACKTOP; //@line 17498
  STACKTOP = sp; //@line 17499
  return 0; //@line 17499
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17501
 if ($8) {
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2]; //@line 17505
 }
 STACKTOP = sp; //@line 17507
 return $8 & 1 | 0; //@line 17507
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_344($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx23 = 0, sp = 0;
 sp = STACKTOP; //@line 28310
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28314
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28316
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28318
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28320
 $11 = $4 + 12 | 0; //@line 28322
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 28323
 $ReallocAsyncCtx23 = _emscripten_realloc_async_context(16) | 0; //@line 28324
 $12 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 0) | 0; //@line 28325
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 28329
  ___async_unwind = 0; //@line 28330
 }
 HEAP32[$ReallocAsyncCtx23 >> 2] = 199; //@line 28332
 HEAP32[$ReallocAsyncCtx23 + 4 >> 2] = $11; //@line 28334
 HEAP32[$ReallocAsyncCtx23 + 8 >> 2] = $8; //@line 28336
 HEAP32[$ReallocAsyncCtx23 + 12 >> 2] = $10; //@line 28338
 sp = STACKTOP; //@line 28339
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_342($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx24 = 0, sp = 0;
 sp = STACKTOP; //@line 28243
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28247
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28249
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28251
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28253
 $11 = $4 + 12 | 0; //@line 28255
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 28256
 $ReallocAsyncCtx24 = _emscripten_realloc_async_context(16) | 0; //@line 28257
 $12 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 0) | 0; //@line 28258
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 28262
  ___async_unwind = 0; //@line 28263
 }
 HEAP32[$ReallocAsyncCtx24 >> 2] = 190; //@line 28265
 HEAP32[$ReallocAsyncCtx24 + 4 >> 2] = $11; //@line 28267
 HEAP32[$ReallocAsyncCtx24 + 8 >> 2] = $8; //@line 28269
 HEAP32[$ReallocAsyncCtx24 + 12 >> 2] = $10; //@line 28271
 sp = STACKTOP; //@line 28272
 return;
}
function __ZN7LoRaPHY19num_active_channelsEPthh($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$01012 = 0, $$011 = 0, $8 = 0, $9 = 0, $indvars$iv = 0, $wide$trip$count = 0;
 if (!(($1 | 0) != 0 & ($2 & 255) < ($3 & 255))) {
  $$011 = 0; //@line 23275
  return $$011 | 0; //@line 23276
 }
 $wide$trip$count = $3 & 255; //@line 23279
 $$01012 = 0; //@line 23280
 $indvars$iv = $2 & 255; //@line 23280
 do {
  $8 = HEAP16[$1 + ($indvars$iv << 1) >> 1] | 0; //@line 23283
  $9 = $8 & 65535; //@line 23284
  $$01012 = ($$01012 & 255) + (($9 & 1) + ($9 >>> 1 & 1) + ($9 >>> 2 & 1) + ($9 >>> 3 & 1) + ($9 >>> 4 & 1) + ($9 >>> 5 & 1) + ($9 >>> 6 & 1) + ($9 >>> 7 & 1) + ($9 >>> 8 & 1) + ($9 >>> 9 & 1) + ($9 >>> 10 & 1) + ($9 >>> 11 & 1) + ($9 >>> 12 & 1) + ($9 >>> 13 & 1) + ($9 >>> 14 & 1) + (($8 & 65535) >>> 15 & 65535) & 255) | 0; //@line 23333
  $indvars$iv = $indvars$iv + 1 | 0; //@line 23334
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 $$011 = $$01012 & 255; //@line 23343
 return $$011 | 0; //@line 23344
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx25 = 0, sp = 0;
 sp = STACKTOP; //@line 28176
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28180
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28182
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28184
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28186
 $11 = $4 + 12 | 0; //@line 28188
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 28189
 $ReallocAsyncCtx25 = _emscripten_realloc_async_context(16) | 0; //@line 28190
 $12 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 1) | 0; //@line 28191
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 28195
  ___async_unwind = 0; //@line 28196
 }
 HEAP32[$ReallocAsyncCtx25 >> 2] = 185; //@line 28198
 HEAP32[$ReallocAsyncCtx25 + 4 >> 2] = $11; //@line 28200
 HEAP32[$ReallocAsyncCtx25 + 8 >> 2] = $8; //@line 28202
 HEAP32[$ReallocAsyncCtx25 + 12 >> 2] = $10; //@line 28204
 sp = STACKTOP; //@line 28205
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_151($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 31128
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31132
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31134
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 31135
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 31139
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 31143
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 31144
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 31145
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 347; //@line 31148
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 31149
  HEAP32[$11 >> 2] = $4; //@line 31150
  sp = STACKTOP; //@line 31151
  return;
 }
 ___async_unwind = 0; //@line 31154
 HEAP32[$ReallocAsyncCtx5 >> 2] = 347; //@line 31155
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 31156
 HEAP32[$11 >> 2] = $4; //@line 31157
 sp = STACKTOP; //@line 31158
 return;
}
function _vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $33 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30796
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30804
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30806
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30808
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30810
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 30812
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 30814
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 30816
 $$ = (HEAP32[$2 >> 2] | 0) == 0 ? -1 : HEAP32[$0 + 8 >> 2] | 0; //@line 30827
 HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = HEAP32[$0 + 12 >> 2]; //@line 30828
 HEAP32[$10 >> 2] = 0; //@line 30829
 HEAP32[$12 >> 2] = 0; //@line 30830
 HEAP32[$14 >> 2] = 0; //@line 30831
 HEAP32[$2 >> 2] = 0; //@line 30832
 $33 = HEAP32[$16 >> 2] | 0; //@line 30833
 HEAP32[$16 >> 2] = $33 | $18; //@line 30838
 if ($20 | 0) {
  ___unlockfile($22); //@line 30841
 }
 HEAP32[___async_retval >> 2] = ($33 & 32 | 0) == 0 ? $$ : -1; //@line 30844
 return;
}
function _schedule_interrupt__async_cb_158($0) {
 $0 = $0 | 0;
 var $16 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 31806
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31810
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31812
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31814
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 31815
 if ($4 >>> 0 > $8 >>> 0) {
  if (!($AsyncRetVal >>> 0 >= $4 >>> 0 | $AsyncRetVal >>> 0 < $8 >>> 0)) {
   return;
  }
 } else {
  if (!($AsyncRetVal >>> 0 >= $4 >>> 0 & $AsyncRetVal >>> 0 < $8 >>> 0)) {
   return;
  }
 }
 $16 = HEAP32[(HEAP32[$6 >> 2] | 0) + 20 >> 2] | 0; //@line 31834
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 31835
 FUNCTION_TABLE_v[$16 & 7](); //@line 31836
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 609; //@line 31839
  sp = STACKTOP; //@line 31840
  return;
 }
 ___async_unwind = 0; //@line 31843
 HEAP32[$ReallocAsyncCtx6 >> 2] = 609; //@line 31844
 sp = STACKTOP; //@line 31845
 return;
}
function _mbed_vtracef__async_cb_384($0) {
 $0 = $0 | 0;
 var $$pre = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 31798
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31802
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 2) {
  return;
 }
 $5 = $4 + -1 | 0; //@line 31807
 $$pre = HEAP32[193] | 0; //@line 31808
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 31809
 FUNCTION_TABLE_v[$$pre & 7](); //@line 31810
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 136; //@line 31813
  $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 31814
  HEAP32[$6 >> 2] = $4; //@line 31815
  $7 = $ReallocAsyncCtx9 + 8 | 0; //@line 31816
  HEAP32[$7 >> 2] = $5; //@line 31817
  sp = STACKTOP; //@line 31818
  return;
 }
 ___async_unwind = 0; //@line 31821
 HEAP32[$ReallocAsyncCtx9 >> 2] = 136; //@line 31822
 $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 31823
 HEAP32[$6 >> 2] = $4; //@line 31824
 $7 = $ReallocAsyncCtx9 + 8 | 0; //@line 31825
 HEAP32[$7 >> 2] = $5; //@line 31826
 sp = STACKTOP; //@line 31827
 return;
}
function __ZN4mbed7TimeoutD2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2572
 HEAP32[$0 >> 2] = 10172; //@line 2573
 __ZN4mbed6Ticker6detachEv($0); //@line 2574
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 2576
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 2582
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2583
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 40 | 0); //@line 2584
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 106; //@line 2587
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2589
    sp = STACKTOP; //@line 2590
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2593
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2598
 __ZN4mbed10TimerEventD2Ev($0); //@line 2599
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 107; //@line 2602
  sp = STACKTOP; //@line 2603
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2606
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_67($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22294
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22298
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22300
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 22301
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 22305
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 22309
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 22310
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 22311
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 219; //@line 22314
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 22315
  HEAP32[$11 >> 2] = $4; //@line 22316
  sp = STACKTOP; //@line 22317
  return;
 }
 ___async_unwind = 0; //@line 22320
 HEAP32[$ReallocAsyncCtx5 >> 2] = 219; //@line 22321
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 22322
 HEAP32[$11 >> 2] = $4; //@line 22323
 sp = STACKTOP; //@line 22324
 return;
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb_40($0) {
 $0 = $0 | 0;
 var $$0 = 0, $19 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20232
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20236
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = (HEAPU8[23774] | 0) << 16 | (HEAPU8[23775] | 0) << 24 | (HEAPU8[23773] | 0) << 8 | (HEAPU8[23772] | 0); //@line 20253
  $$0 = 0; //@line 20254
 } else {
  $$0 = $AsyncRetVal; //@line 20256
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 20258
 _mbedtls_cipher_free(22460); //@line 20259
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 505; //@line 20262
  $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 20263
  HEAP32[$19 >> 2] = $$0; //@line 20264
  sp = STACKTOP; //@line 20265
  return;
 }
 ___async_unwind = 0; //@line 20268
 HEAP32[$ReallocAsyncCtx5 >> 2] = 505; //@line 20269
 $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 20270
 HEAP32[$19 >> 2] = $$0; //@line 20271
 sp = STACKTOP; //@line 20272
 return;
}
function __ZN16LoRaWANInterface7connectEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4425
 STACKTOP = STACKTOP + 32 | 0; //@line 4426
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4426
 $1 = sp; //@line 4427
 HEAP8[$1 >> 0] = 1; //@line 4428
 HEAP32[$1 + 4 >> 2] = 0; //@line 4430
 HEAP32[$1 + 8 >> 2] = 0; //@line 4432
 HEAP32[$1 + 12 >> 2] = 23740; //@line 4434
 HEAP32[$1 + 16 >> 2] = 23756; //@line 4436
 $8 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 4439
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4440
 $9 = FUNCTION_TABLE_iii[$8 & 31]($0, $1) | 0; //@line 4441
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 137; //@line 4444
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 4446
  sp = STACKTOP; //@line 4447
  STACKTOP = sp; //@line 4448
  return 0; //@line 4448
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4450
  STACKTOP = sp; //@line 4451
  return $9 | 0; //@line 4451
 }
 return 0; //@line 4453
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $13 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16373
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 16379
  } else {
   $10 = HEAP32[$0 + 8 >> 2] | 0; //@line 16382
   $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 16385
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16386
   FUNCTION_TABLE_viiiiii[$13 & 3]($10, $1, $2, $3, $4, $5); //@line 16387
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 672; //@line 16390
    sp = STACKTOP; //@line 16391
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16394
    break;
   }
  }
 } while (0);
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_51($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20978
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20982
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20984
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 20985
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 20989
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 20993
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 20994
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 20995
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 228; //@line 20998
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 20999
  HEAP32[$11 >> 2] = $4; //@line 21000
  sp = STACKTOP; //@line 21001
  return;
 }
 ___async_unwind = 0; //@line 21004
 HEAP32[$ReallocAsyncCtx5 >> 2] = 228; //@line 21005
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 21006
 HEAP32[$11 >> 2] = $4; //@line 21007
 sp = STACKTOP; //@line 21008
 return;
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_13($0) {
 $0 = $0 | 0;
 var $$0 = 0, $19 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 18135
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18139
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = (HEAPU8[23774] | 0) << 16 | (HEAPU8[23775] | 0) << 24 | (HEAPU8[23773] | 0) << 8 | (HEAPU8[23772] | 0); //@line 18156
  $$0 = 0; //@line 18157
 } else {
  $$0 = $AsyncRetVal; //@line 18159
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 18161
 _mbedtls_cipher_free(22460); //@line 18162
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 500; //@line 18165
  $19 = $ReallocAsyncCtx6 + 4 | 0; //@line 18166
  HEAP32[$19 >> 2] = $$0; //@line 18167
  sp = STACKTOP; //@line 18168
  return;
 }
 ___async_unwind = 0; //@line 18171
 HEAP32[$ReallocAsyncCtx6 >> 2] = 500; //@line 18172
 $19 = $ReallocAsyncCtx6 + 4 | 0; //@line 18173
 HEAP32[$19 >> 2] = $$0; //@line 18174
 sp = STACKTOP; //@line 18175
 return;
}
function _mbed_vtracef__async_cb_383($0) {
 $0 = $0 | 0;
 var $$pre = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 31765
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31767
 if (($2 | 0) <= 1) {
  return;
 }
 $4 = $2 + -1 | 0; //@line 31772
 $$pre = HEAP32[193] | 0; //@line 31773
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 31774
 FUNCTION_TABLE_v[$$pre & 7](); //@line 31775
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 136; //@line 31778
  $5 = $ReallocAsyncCtx9 + 4 | 0; //@line 31779
  HEAP32[$5 >> 2] = $2; //@line 31780
  $6 = $ReallocAsyncCtx9 + 8 | 0; //@line 31781
  HEAP32[$6 >> 2] = $4; //@line 31782
  sp = STACKTOP; //@line 31783
  return;
 }
 ___async_unwind = 0; //@line 31786
 HEAP32[$ReallocAsyncCtx9 >> 2] = 136; //@line 31787
 $5 = $ReallocAsyncCtx9 + 4 | 0; //@line 31788
 HEAP32[$5 >> 2] = $2; //@line 31789
 $6 = $ReallocAsyncCtx9 + 8 | 0; //@line 31790
 HEAP32[$6 >> 2] = $4; //@line 31791
 sp = STACKTOP; //@line 31792
 return;
}
function __ZN12LoRaWANStack22set_link_check_requestEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8708
 STACKTOP = STACKTOP + 32 | 0; //@line 8709
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 8709
 $1 = sp + 4 | 0; //@line 8711
 if (!(HEAP32[$0 + 1908 >> 2] | 0)) {
  _mbed_tracef(2, 12332, 13531, sp); //@line 8716
  $$0 = -1003; //@line 8717
  STACKTOP = sp; //@line 8718
  return $$0 | 0; //@line 8718
 }
 HEAP32[$1 >> 2] = 1; //@line 8720
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 8722
 $6 = __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t($0 + 4 | 0, $1) | 0; //@line 8723
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 259; //@line 8726
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 8728
  sp = STACKTOP; //@line 8729
  STACKTOP = sp; //@line 8730
  return 0; //@line 8730
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8732
 $$0 = $6; //@line 8733
 STACKTOP = sp; //@line 8734
 return $$0 | 0; //@line 8734
}
function _get_pkcs_padding($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$028 = 0, $$02930 = 0, $$031 = 0, $13 = 0, $23 = 0, $7 = 0, $8 = 0, $9 = 0;
 if (($0 | 0) == 0 | ($2 | 0) == 0) {
  $$028 = -24832; //@line 3000
  return $$028 | 0; //@line 3001
 }
 $7 = HEAP8[$0 + ($1 + -1) >> 0] | 0; //@line 3005
 $8 = $7 & 255; //@line 3006
 $9 = $1 - $8 | 0; //@line 3007
 HEAP32[$2 >> 2] = $9; //@line 3008
 $13 = ($7 << 24 >> 24 == 0 | $8 >>> 0 > $1 >>> 0) & 1; //@line 3012
 if (!$1) {
  $$0$lcssa = $13; //@line 3015
 } else {
  $$02930 = 0; //@line 3017
  $$031 = $13; //@line 3017
  while (1) {
   $23 = (($$02930 >>> 0 >= $9 >>> 0 ? (HEAP8[$0 + $$02930 >> 0] ^ $7) & 255 : 0) | $$031 & 255) & 255; //@line 3027
   $$02930 = $$02930 + 1 | 0; //@line 3028
   if (($$02930 | 0) == ($1 | 0)) {
    $$0$lcssa = $23; //@line 3031
    break;
   } else {
    $$031 = $23; //@line 3034
   }
  }
 }
 $$028 = $$0$lcssa << 24 >> 24 ? -25088 : 0; //@line 3040
 return $$028 | 0; //@line 3041
}
function __ZN12LoRaWANStackC2Ev__async_cb_298($0) {
 $0 = $0 | 0;
 var $$pre$i$i59 = 0, $10 = 0, $11 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 19805
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19811
 $$pre$i$i59 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 19812
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i59; //@line 19814
 if (!$$pre$i$i59) {
  return;
 }
 $10 = HEAP32[$$pre$i$i59 + 8 >> 2] | 0; //@line 19820
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 19821
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 19822
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 145; //@line 19825
  $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 19826
  HEAP32[$11 >> 2] = $6; //@line 19827
  sp = STACKTOP; //@line 19828
  return;
 }
 ___async_unwind = 0; //@line 19831
 HEAP32[$ReallocAsyncCtx4 >> 2] = 145; //@line 19832
 $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 19833
 HEAP32[$11 >> 2] = $6; //@line 19834
 sp = STACKTOP; //@line 19835
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $14 = 0, $17 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17372
 $7 = HEAP32[$0 + 4 >> 2] | 0; //@line 17374
 $8 = $7 >> 8; //@line 17375
 if (!($7 & 1)) {
  $$0 = $8; //@line 17379
 } else {
  $$0 = HEAP32[(HEAP32[$3 >> 2] | 0) + $8 >> 2] | 0; //@line 17384
 }
 $14 = HEAP32[$0 >> 2] | 0; //@line 17386
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] | 0; //@line 17389
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17394
 FUNCTION_TABLE_viiiiii[$17 & 3]($14, $1, $2, $3 + $$0 | 0, $7 & 2 | 0 ? $4 : 2, $5); //@line 17395
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 688; //@line 17398
  sp = STACKTOP; //@line 17399
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 17402
  return;
 }
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14778
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14780
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14782
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 14784
 $7 = HEAP32[$2 >> 2] | 0; //@line 14785
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 24 >> 2] | 0; //@line 14788
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 14789
 FUNCTION_TABLE_viii[$10 & 7]($7, $4, $6); //@line 14790
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 556; //@line 14793
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 14794
  HEAP32[$11 >> 2] = $2; //@line 14795
  sp = STACKTOP; //@line 14796
  return;
 }
 ___async_unwind = 0; //@line 14799
 HEAP32[$ReallocAsyncCtx2 >> 2] = 556; //@line 14800
 $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 14801
 HEAP32[$11 >> 2] = $2; //@line 14802
 sp = STACKTOP; //@line 14803
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16542
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 16548
  } else {
   $8 = HEAP32[$0 + 8 >> 2] | 0; //@line 16551
   $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0; //@line 16554
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16555
   FUNCTION_TABLE_viiii[$11 & 7]($8, $1, $2, $3); //@line 16556
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 675; //@line 16559
    sp = STACKTOP; //@line 16560
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16563
    break;
   }
  }
 } while (0);
 return;
}
function _mbed_error_vfprintf__async_cb_148($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30751
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 30753
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30755
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30757
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30759
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30761
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 30763
 _serial_putc(22816, $2 << 24 >> 24); //@line 30764
 if (!___async) {
  ___async_unwind = 0; //@line 30767
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 634; //@line 30769
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 30771
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 30773
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $8; //@line 30775
 HEAP8[$ReallocAsyncCtx2 + 16 >> 0] = $2; //@line 30777
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 30779
 sp = STACKTOP; //@line 30780
 return;
}
function __ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$unpack$i = 0, $$unpack5$i = 0, $15 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12250
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 12253
 $$unpack5$i = HEAP32[$0 + 4 >> 2] | 0; //@line 12255
 $8 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack5$i >> 1) | 0; //@line 12257
 if (!($$unpack5$i & 1)) {
  $15 = $$unpack$i; //@line 12262
 } else {
  $15 = HEAP32[(HEAP32[$8 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 12267
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12269
 FUNCTION_TABLE_viiiii[$15 & 7]($8, $1, $2, $3, $4); //@line 12270
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 351; //@line 12273
  sp = STACKTOP; //@line 12274
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12277
  return;
 }
}
function ___dynamic_cast__async_cb_414($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $16 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32981
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32983
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32985
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32991
 L2 : do {
  switch (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  case 0:
   {
    $$0 = (HEAP32[$6 >> 2] | 0) == 1 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1 ? HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0 : 0; //@line 33006
    break;
   }
  case 1:
   {
    if ((HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0) != 1) {
     if (!((HEAP32[$6 >> 2] | 0) == 0 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1)) {
      $$0 = 0; //@line 33022
      break L2;
     }
    }
    $$0 = HEAP32[$16 >> 2] | 0; //@line 33027
    break;
   }
  default:
   {
    $$0 = 0; //@line 33031
   }
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 33036
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $13 = 0, $16 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17414
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 17416
 $7 = $6 >> 8; //@line 17417
 if (!($6 & 1)) {
  $$0 = $7; //@line 17421
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $7 >> 2] | 0; //@line 17426
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 17428
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] | 0; //@line 17431
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17436
 FUNCTION_TABLE_viiiii[$16 & 7]($13, $1, $2 + $$0 | 0, $6 & 2 | 0 ? $3 : 2, $4); //@line 17437
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 689; //@line 17440
  sp = STACKTOP; //@line 17441
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 17444
  return;
 }
}
function _ticker_remove_event($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6338
 $4 = (HEAP32[$0 + 4 >> 2] | 0) + 4 | 0; //@line 6341
 $5 = HEAP32[$4 >> 2] | 0; //@line 6342
 if (($5 | 0) == ($1 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 6347
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6348
  _schedule_interrupt($0); //@line 6349
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 611; //@line 6352
   sp = STACKTOP; //@line 6353
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6356
  return;
 } else {
  $$0 = $5; //@line 6359
 }
 do {
  if (!$$0) {
   label = 8; //@line 6364
   break;
  }
  $10 = $$0 + 12 | 0; //@line 6367
  $$0 = HEAP32[$10 >> 2] | 0; //@line 6368
 } while (($$0 | 0) != ($1 | 0));
 if ((label | 0) == 8) {
  return;
 }
 HEAP32[$10 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 6381
 return;
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_393($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 32341
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32345
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 32346
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] | 0; //@line 32349
 $10 = HEAP8[$4 + 776 >> 0] | 0; //@line 32351
 $12 = HEAP8[$4 + 744 >> 0] | 0; //@line 32353
 $14 = HEAP32[$4 + 740 >> 2] | 0; //@line 32355
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 32357
 FUNCTION_TABLE_viiiii[$8 & 7]($5, $10, $12, $14, $4 + 824 | 0); //@line 32358
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 511; //@line 32361
  sp = STACKTOP; //@line 32362
  return;
 }
 ___async_unwind = 0; //@line 32365
 HEAP32[$ReallocAsyncCtx2 >> 2] = 511; //@line 32366
 sp = STACKTOP; //@line 32367
 return;
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_394($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 32373
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32377
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 32378
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] | 0; //@line 32381
 $10 = HEAP8[$4 + 776 >> 0] | 0; //@line 32383
 $12 = HEAP8[$4 + 744 >> 0] | 0; //@line 32385
 $14 = HEAP32[$4 + 740 >> 2] | 0; //@line 32387
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 32389
 FUNCTION_TABLE_viiiii[$8 & 7]($5, $10, $12, $14, $4 + 824 | 0); //@line 32390
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 508; //@line 32393
  sp = STACKTOP; //@line 32394
  return;
 }
 ___async_unwind = 0; //@line 32397
 HEAP32[$ReallocAsyncCtx >> 2] = 508; //@line 32398
 sp = STACKTOP; //@line 32399
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $15 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17329
 $5 = HEAP32[$0 + 4 >> 2] | 0; //@line 17331
 $6 = $5 >> 8; //@line 17332
 if (!($5 & 1)) {
  $$0 = $6; //@line 17336
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $6 >> 2] | 0; //@line 17341
 }
 $12 = HEAP32[$0 >> 2] | 0; //@line 17343
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] | 0; //@line 17346
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17351
 FUNCTION_TABLE_viiii[$15 & 7]($12, $1, $2 + $$0 | 0, $5 & 2 | 0 ? $3 : 2); //@line 17352
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 687; //@line 17355
  sp = STACKTOP; //@line 17356
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 17359
  return;
 }
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb_267($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16903
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16907
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16909
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 16911
 $10 = HEAP16[$0 + 18 >> 1] | 0; //@line 16913
 $12 = HEAP8[$0 + 20 >> 0] | 0; //@line 16915
 $13 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 16917
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 16918
 FUNCTION_TABLE_viiiii[$13 & 7]($4, $6, $8, $10, $12); //@line 16919
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 350; //@line 16922
  sp = STACKTOP; //@line 16923
  return;
 }
 ___async_unwind = 0; //@line 16926
 HEAP32[$ReallocAsyncCtx >> 2] = 350; //@line 16927
 sp = STACKTOP; //@line 16928
 return;
}
function __ZN16SX1276_LoRaRadio4sendEPhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 374
 switch (HEAP8[$0 + 689 >> 0] | 0) {
 case 0:
  {
   _emscripten_asm_const_iiiiiii(0, HEAP32[$0 + 692 >> 2] | 0, HEAP8[$0 + 696 >> 0] | 0, HEAP32[$0 + 704 >> 2] | 0, HEAP32[$0 + 712 >> 2] | 0, $1 | 0, $2 & 255 | 0) | 0; //@line 389
   break;
  }
 case 1:
  {
   _emscripten_asm_const_iiiiiii(1, HEAP32[$0 + 692 >> 2] | 0, HEAP8[$0 + 748 >> 0] | 0, HEAP32[$0 + 752 >> 2] | 0, HEAP32[$0 + 756 >> 2] | 0, $1 | 0, $2 & 255 | 0) | 0; //@line 403
   break;
  }
 default:
  {}
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 409
 __ZN16SX1276_LoRaRadio8transmitEj($0, 0); //@line 410
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 49; //@line 413
  sp = STACKTOP; //@line 414
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 417
  return;
 }
}
function __ZN12LoRaWANStack12add_channelsERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8267
 STACKTOP = STACKTOP + 16 | 0; //@line 8268
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 8268
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _mbed_tracef(2, 12332, 13282, sp); //@line 8274
  $$0 = -1012; //@line 8275
  STACKTOP = sp; //@line 8276
  return $$0 | 0; //@line 8276
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8279
 $6 = __ZN7LoRaMac16add_channel_planERK16lora_channelplan($0 + 4 | 0, $1) | 0; //@line 8280
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 252; //@line 8283
  sp = STACKTOP; //@line 8284
  STACKTOP = sp; //@line 8285
  return 0; //@line 8285
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8287
 $$0 = $6; //@line 8288
 STACKTOP = sp; //@line 8289
 return $$0 | 0; //@line 8289
}
function __ZN7LoRaPHY14remove_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $15 = 0, $25 = 0, $4 = 0, $5 = 0;
 $4 = $1 & 255; //@line 23039
 $5 = $4 >>> 4; //@line 23040
 $10 = 1 << ($4 & 15); //@line 23045
 if ($10 & (HEAPU16[(HEAP32[$0 + 124 >> 2] | 0) + ($5 << 1) >> 1] | 0) | 0) {
  $$0 = 0; //@line 23049
  return $$0 | 0; //@line 23050
 }
 $15 = (HEAP32[$0 + 112 >> 2] | 0) + ($4 * 12 | 0) | 0; //@line 23054
 HEAP32[$15 >> 2] = 0; //@line 23055
 HEAP32[$15 + 4 >> 2] = 0; //@line 23055
 HEAP32[$15 + 8 >> 2] = 0; //@line 23055
 if (!((HEAPU8[$0 + 20 >> 0] | 0) > ($1 & 255) ? (($1 & 255) >>> 4 & 255) <= (HEAPU8[$0 + 128 >> 0] | 0) : 0)) {
  $$0 = 0; //@line 23065
  return $$0 | 0; //@line 23066
 }
 $25 = (HEAP32[$0 + 120 >> 2] | 0) + ($5 << 1) | 0; //@line 23071
 HEAP16[$25 >> 1] = ($10 ^ 65535) & (HEAPU16[$25 >> 1] | 0); //@line 23076
 $$0 = 1; //@line 23077
 return $$0 | 0; //@line 23078
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb_247($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15187
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15191
 $4 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 15192
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 76 >> 2] | 0; //@line 15195
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 15196
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 15197
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 554; //@line 15200
  $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 15201
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 15202
  sp = STACKTOP; //@line 15203
  return;
 }
 ___async_unwind = 0; //@line 15206
 HEAP32[$ReallocAsyncCtx3 >> 2] = 554; //@line 15207
 $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 15208
 HEAP32[$8 >> 2] = $AsyncRetVal; //@line 15209
 sp = STACKTOP; //@line 15210
 return;
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13210
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13212
 $4 = HEAP8[$0 + 8 >> 0] & 1; //@line 13215
 $5 = HEAP32[$2 >> 2] | 0; //@line 13216
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 48 >> 2] | 0; //@line 13219
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 13220
 FUNCTION_TABLE_vii[$8 & 31]($5, $4); //@line 13221
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 546; //@line 13224
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 13225
  HEAP32[$9 >> 2] = $2; //@line 13226
  sp = STACKTOP; //@line 13227
  return;
 }
 ___async_unwind = 0; //@line 13230
 HEAP32[$ReallocAsyncCtx2 >> 2] = 546; //@line 13231
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 13232
 HEAP32[$9 >> 2] = $2; //@line 13233
 sp = STACKTOP; //@line 13234
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15158
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15160
 $3 = HEAP32[$2 >> 2] | 0; //@line 15161
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0; //@line 15164
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 15165
 $7 = FUNCTION_TABLE_ii[$6 & 15]($3) | 0; //@line 15166
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 553; //@line 15169
  $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 15170
  HEAP32[$8 >> 2] = $2; //@line 15171
  sp = STACKTOP; //@line 15172
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 15176
 ___async_unwind = 0; //@line 15177
 HEAP32[$ReallocAsyncCtx2 >> 2] = 553; //@line 15178
 $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 15179
 HEAP32[$8 >> 2] = $2; //@line 15180
 sp = STACKTOP; //@line 15181
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_250($0) {
 $0 = $0 | 0;
 var $12 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15466
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15468
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15472
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15474
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 15476
 __ZN4mbed6Ticker5setupEy($6, 2e5, 0); //@line 15477
 $9 = HEAP32[$2 >> 2] | 0; //@line 15478
 if (!$9) {
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 15484
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 15485
 FUNCTION_TABLE_vi[$12 & 1023]($8); //@line 15486
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 53; //@line 15489
  sp = STACKTOP; //@line 15490
  return;
 }
 ___async_unwind = 0; //@line 15493
 HEAP32[$ReallocAsyncCtx3 >> 2] = 53; //@line 15494
 sp = STACKTOP; //@line 15495
 return;
}
function _pad_676($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $14 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 13516
 STACKTOP = STACKTOP + 256 | 0; //@line 13517
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256); //@line 13517
 $5 = sp; //@line 13518
 if (($2 | 0) > ($3 | 0) & ($4 & 73728 | 0) == 0) {
  $9 = $2 - $3 | 0; //@line 13524
  _memset($5 | 0, $1 << 24 >> 24 | 0, ($9 >>> 0 < 256 ? $9 : 256) | 0) | 0; //@line 13528
  if ($9 >>> 0 > 255) {
   $14 = $2 - $3 | 0; //@line 13531
   $$011 = $9; //@line 13532
   do {
    _out_670($0, $5, 256); //@line 13534
    $$011 = $$011 + -256 | 0; //@line 13535
   } while ($$011 >>> 0 > 255);
   $$0$lcssa = $14 & 255; //@line 13544
  } else {
   $$0$lcssa = $9; //@line 13546
  }
  _out_670($0, $5, $$0$lcssa); //@line 13548
 }
 STACKTOP = sp; //@line 13550
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_254($0) {
 $0 = $0 | 0;
 var $12 = 0, $16 = 0, $2 = 0, $4 = 0, $8 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15826
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15828
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15832
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15836
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15840
 if (!(HEAP8[$2 + 770 >> 0] | 0)) {
  HEAP32[$4 >> 2] = 6; //@line 15847
  _mbed_tracef(16, 10944, 11001, $4); //@line 15848
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 15849
  HEAP32[$8 >> 2] = 6; //@line 15850
  _mbed_tracef(16, 10944, 11030, $8); //@line 15851
  return;
 } else {
  HEAP32[$12 >> 2] = 5; //@line 15854
  _mbed_tracef(16, 10944, 11001, $12); //@line 15855
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 15856
  HEAP32[$16 >> 2] = 5; //@line 15857
  _mbed_tracef(16, 10944, 11030, $16); //@line 15858
  return;
 }
}
function __ZN7LoRaMac16get_channel_planER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $2 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 16235
 STACKTOP = STACKTOP + 16 | 0; //@line 16236
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16236
 $2 = sp; //@line 16237
 $4 = $2 + 4 | 0; //@line 16239
 HEAP32[$4 >> 2] = 0; //@line 16241
 HEAP32[$4 + 4 >> 2] = 0; //@line 16244
 HEAP32[$2 >> 2] = 9; //@line 16245
 $10 = __ZN10LoRaMacMib11get_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0 + 348 | 0, $2, $0 + 360 | 0) | 0; //@line 16248
 if ($10 | 0) {
  $$0 = $10; //@line 16251
  STACKTOP = sp; //@line 16252
  return $$0 | 0; //@line 16252
 }
 $$0 = __ZN18LoRaMacChannelPlan8get_planER16lora_channelplanPK25loramac_mib_req_confirm_t($0 + 352 | 0, $1, $2) | 0; //@line 16256
 STACKTOP = sp; //@line 16257
 return $$0 | 0; //@line 16257
}
function _mbedtls_ccm_setkey__async_cb_103($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 24587
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24589
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24591
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24593
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24595
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 24599
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 24602
 $9 = _mbedtls_cipher_setkey($2, $4, $6, 1) | 0; //@line 24603
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 570; //@line 24606
  sp = STACKTOP; //@line 24607
  return;
 }
 HEAP32[___async_retval >> 2] = $9; //@line 24611
 ___async_unwind = 0; //@line 24612
 HEAP32[$ReallocAsyncCtx >> 2] = 570; //@line 24613
 sp = STACKTOP; //@line 24614
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i = 0, $$unpack3$i = 0, $12 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5781
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 5784
 $$unpack3$i = HEAP32[$0 + 4 >> 2] | 0; //@line 5786
 $5 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack3$i >> 1) | 0; //@line 5788
 if (!($$unpack3$i & 1)) {
  $12 = $$unpack$i; //@line 5793
 } else {
  $12 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 5798
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5800
 FUNCTION_TABLE_vii[$12 & 31]($5, $1); //@line 5801
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 179; //@line 5804
  sp = STACKTOP; //@line 5805
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5808
  return;
 }
}
function __ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i = 0, $$unpack3$i = 0, $12 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7510
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 7513
 $$unpack3$i = HEAP32[$0 + 4 >> 2] | 0; //@line 7515
 $5 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack3$i >> 1) | 0; //@line 7517
 if (!($$unpack3$i & 1)) {
  $12 = $$unpack$i; //@line 7522
 } else {
  $12 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 7527
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7529
 FUNCTION_TABLE_vii[$12 & 31]($5, $1); //@line 7530
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 236; //@line 7533
  sp = STACKTOP; //@line 7534
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7537
  return;
 }
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_110($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 25309
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25311
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25313
 $6 = HEAP32[$2 + 356 >> 2] | 0; //@line 25315
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 25317
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($6, $2 + 996 | 0, 1e3); //@line 25318
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 458; //@line 25321
  $8 = $ReallocAsyncCtx4 + 4 | 0; //@line 25322
  HEAP32[$8 >> 2] = $4; //@line 25323
  sp = STACKTOP; //@line 25324
  return;
 }
 ___async_unwind = 0; //@line 25327
 HEAP32[$ReallocAsyncCtx4 >> 2] = 458; //@line 25328
 $8 = $ReallocAsyncCtx4 + 4 | 0; //@line 25329
 HEAP32[$8 >> 2] = $4; //@line 25330
 sp = STACKTOP; //@line 25331
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_109($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 25281
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25283
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25285
 $6 = HEAP32[$2 + 356 >> 2] | 0; //@line 25287
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 25289
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($6, $2 + 996 | 0, 1e3); //@line 25290
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 460; //@line 25293
  $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 25294
  HEAP32[$8 >> 2] = $4; //@line 25295
  sp = STACKTOP; //@line 25296
  return;
 }
 ___async_unwind = 0; //@line 25299
 HEAP32[$ReallocAsyncCtx3 >> 2] = 460; //@line 25300
 $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 25301
 HEAP32[$8 >> 2] = $4; //@line 25302
 sp = STACKTOP; //@line 25303
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_349($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx26 = 0, sp = 0;
 sp = STACKTOP; //@line 28498
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28502
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28504
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28506
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[$6 >> 2] = 6; //@line 28509
  HEAP32[___async_retval >> 2] = $4; //@line 28511
  return;
 }
 $ReallocAsyncCtx26 = _emscripten_realloc_async_context(16) | 0; //@line 28514
 _mbed_assert_internal(13588, 12372, 1245); //@line 28515
 if (!___async) {
  ___async_unwind = 0; //@line 28518
 }
 HEAP32[$ReallocAsyncCtx26 >> 2] = 210; //@line 28520
 HEAP32[$ReallocAsyncCtx26 + 4 >> 2] = $4; //@line 28522
 HEAP32[$ReallocAsyncCtx26 + 8 >> 2] = $6; //@line 28524
 HEAP32[$ReallocAsyncCtx26 + 12 >> 2] = $8; //@line 28526
 sp = STACKTOP; //@line 28527
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i = 0, $$unpack3$i = 0, $12 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5830
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 5833
 $$unpack3$i = HEAP32[$0 + 4 >> 2] | 0; //@line 5835
 $5 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack3$i >> 1) | 0; //@line 5837
 if (!($$unpack3$i & 1)) {
  $12 = $$unpack$i; //@line 5842
 } else {
  $12 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 5847
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5849
 FUNCTION_TABLE_vii[$12 & 31]($5, $1); //@line 5850
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 180; //@line 5853
  sp = STACKTOP; //@line 5854
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5857
  return;
 }
}
function __ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i = 0, $$unpack3$i = 0, $12 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7794
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 7797
 $$unpack3$i = HEAP32[$0 + 4 >> 2] | 0; //@line 7799
 $5 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack3$i >> 1) | 0; //@line 7801
 if (!($$unpack3$i & 1)) {
  $12 = $$unpack$i; //@line 7806
 } else {
  $12 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 7811
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7813
 FUNCTION_TABLE_vii[$12 & 31]($5, $1); //@line 7814
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 239; //@line 7817
  sp = STACKTOP; //@line 7818
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7821
  return;
 }
}
function __ZN12LoRaWANStack16remove_a_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8322
 STACKTOP = STACKTOP + 16 | 0; //@line 8323
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 8323
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _mbed_tracef(2, 12332, 13282, sp); //@line 8329
  $$0 = -1012; //@line 8330
  STACKTOP = sp; //@line 8331
  return $$0 | 0; //@line 8331
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8334
 $6 = __ZN7LoRaMac21remove_single_channelEh($0 + 4 | 0, $1) | 0; //@line 8335
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 254; //@line 8338
  sp = STACKTOP; //@line 8339
  STACKTOP = sp; //@line 8340
  return 0; //@line 8340
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8342
 $$0 = $6; //@line 8343
 STACKTOP = sp; //@line 8344
 return $$0 | 0; //@line 8344
}
function __ZN4mbed11InterruptInD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 10925
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10927
 $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 10929
 if (!$4) {
  __ZdlPv($2); //@line 10932
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 10937
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 10938
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 40 | 0); //@line 10939
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 103; //@line 10942
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 10943
  HEAP32[$9 >> 2] = $2; //@line 10944
  sp = STACKTOP; //@line 10945
  return;
 }
 ___async_unwind = 0; //@line 10948
 HEAP32[$ReallocAsyncCtx2 >> 2] = 103; //@line 10949
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 10950
 HEAP32[$9 >> 2] = $2; //@line 10951
 sp = STACKTOP; //@line 10952
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_178($0) {
 $0 = $0 | 0;
 var $12 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 669
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 671
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 675
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 677
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 679
 __ZN4mbed6Ticker5setupEy($6, 1e5, 0); //@line 680
 $9 = HEAP32[$2 >> 2] | 0; //@line 681
 if (!$9) {
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 687
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 688
 FUNCTION_TABLE_vi[$12 & 1023]($8); //@line 689
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 94; //@line 692
  sp = STACKTOP; //@line 693
  return;
 }
 ___async_unwind = 0; //@line 696
 HEAP32[$ReallocAsyncCtx3 >> 2] = 94; //@line 697
 sp = STACKTOP; //@line 698
 return;
}
function ___stdio_seek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 10811
 STACKTOP = STACKTOP + 32 | 0; //@line 10812
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10812
 $vararg_buffer = sp; //@line 10813
 $3 = sp + 20 | 0; //@line 10814
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 10818
 HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 10820
 HEAP32[$vararg_buffer + 8 >> 2] = $1; //@line 10822
 HEAP32[$vararg_buffer + 12 >> 2] = $3; //@line 10824
 HEAP32[$vararg_buffer + 16 >> 2] = $2; //@line 10826
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$3 >> 2] = -1; //@line 10831
  $10 = -1; //@line 10832
 } else {
  $10 = HEAP32[$3 >> 2] | 0; //@line 10835
 }
 STACKTOP = sp; //@line 10837
 return $10 | 0; //@line 10837
}
function __ZN12LoRaWANStack17drop_channel_listEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8294
 STACKTOP = STACKTOP + 16 | 0; //@line 8295
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 8295
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _mbed_tracef(2, 12332, 13282, sp); //@line 8301
  $$0 = -1012; //@line 8302
  STACKTOP = sp; //@line 8303
  return $$0 | 0; //@line 8303
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8306
 $5 = __ZN7LoRaMac19remove_channel_planEv($0 + 4 | 0) | 0; //@line 8307
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 253; //@line 8310
  sp = STACKTOP; //@line 8311
  STACKTOP = sp; //@line 8312
  return 0; //@line 8312
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8314
 $$0 = $5; //@line 8315
 STACKTOP = sp; //@line 8316
 return $$0 | 0; //@line 8316
}
function _mbed_assert_internal($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 6595
 STACKTOP = STACKTOP + 16 | 0; //@line 6596
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6596
 $vararg_buffer = sp; //@line 6597
 HEAP32[$vararg_buffer >> 2] = $0; //@line 6598
 HEAP32[$vararg_buffer + 4 >> 2] = $1; //@line 6600
 HEAP32[$vararg_buffer + 8 >> 2] = $2; //@line 6602
 _mbed_error_printf(15195, $vararg_buffer); //@line 6603
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6604
 _mbed_die(); //@line 6605
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 614; //@line 6608
  sp = STACKTOP; //@line 6609
  STACKTOP = sp; //@line 6610
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6612
  STACKTOP = sp; //@line 6613
  return;
 }
}
function _schedule_interrupt__async_cb_157($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 31774
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31776
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31778
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31780
 $9 = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0; //@line 31783
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(16) | 0; //@line 31784
 $10 = FUNCTION_TABLE_i[$9 & 7]() | 0; //@line 31785
 if (!___async) {
  HEAP32[___async_retval >> 2] = $10; //@line 31789
  ___async_unwind = 0; //@line 31790
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 608; //@line 31792
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $4; //@line 31794
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $6; //@line 31796
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $2; //@line 31798
 sp = STACKTOP; //@line 31799
 return;
}
function __ZN7LoRaPHY16verify_frequencyEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01113 = 0, $16 = 0, $3 = 0, $5 = 0, $7 = 0, label = 0;
 $3 = HEAP32[$0 + 72 >> 2] | 0; //@line 23221
 $5 = HEAP8[$0 + 76 >> 0] | 0; //@line 23223
 if (!($5 << 24 >> 24)) {
  $16 = 0; //@line 23226
  return $16 | 0; //@line 23227
 } else {
  $$01113 = 0; //@line 23229
 }
 while (1) {
  $7 = $$01113 & 255; //@line 23232
  if ((HEAP32[$3 + ($7 * 24 | 0) + 20 >> 2] | 0) >>> 0 >= $1 >>> 0) {
   if ((HEAP32[$3 + ($7 * 24 | 0) + 16 >> 2] | 0) >>> 0 <= $1 >>> 0) {
    $16 = 1; //@line 23241
    label = 5; //@line 23242
    break;
   }
  }
  $$01113 = $$01113 + 1 << 24 >> 24; //@line 23246
  if (($$01113 & 255) >= ($5 & 255)) {
   $16 = 0; //@line 23251
   label = 5; //@line 23252
   break;
  }
 }
 if ((label | 0) == 5) {
  return $16 | 0; //@line 23257
 }
 return 0; //@line 23259
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20404
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20414
 $12 = (HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) != 0; //@line 20416
 $14 = HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + 1108 >> 2] | 0; //@line 20418
 _mbed_tracef(16, 13704, 13772, HEAP32[$0 + 12 >> 2] | 0); //@line 20419
 $15 = HEAP32[$10 >> 2] | 0; //@line 20420
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 20421
 __ZN7LoRaPHY15setup_rx_windowEbj($15, $12, $14); //@line 20422
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 423; //@line 20425
  sp = STACKTOP; //@line 20426
  return;
 }
 ___async_unwind = 0; //@line 20429
 HEAP32[$ReallocAsyncCtx2 >> 2] = 423; //@line 20430
 sp = STACKTOP; //@line 20431
 return;
}
function __ZN16SX1276_LoRaRadio7standbyEv($0) {
 $0 = $0 | 0;
 var $vararg_buffer1 = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP; //@line 102
 STACKTOP = STACKTOP + 32 | 0; //@line 103
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 103
 $vararg_buffer3 = sp + 16 | 0; //@line 104
 $vararg_buffer1 = sp + 8 | 0; //@line 105
 _mbed_tracef(16, 10944, 11696, sp); //@line 107
 __ZN4mbed6Ticker6detachEv($0 + 1048 | 0); //@line 109
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 111
 HEAP32[$vararg_buffer1 >> 2] = 1; //@line 112
 _mbed_tracef(16, 10944, 11001, $vararg_buffer1); //@line 113
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 114
 HEAP32[$vararg_buffer3 >> 2] = 1; //@line 115
 _mbed_tracef(16, 10944, 11030, $vararg_buffer3); //@line 116
 HEAP8[$0 + 688 >> 0] = 0; //@line 118
 STACKTOP = sp; //@line 119
 return;
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13300
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13302
 $3 = HEAP32[$2 >> 2] | 0; //@line 13303
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0; //@line 13306
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 13307
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 13308
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 543; //@line 13311
  $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 13312
  HEAP32[$7 >> 2] = $2; //@line 13313
  sp = STACKTOP; //@line 13314
  return;
 }
 ___async_unwind = 0; //@line 13317
 HEAP32[$ReallocAsyncCtx2 >> 2] = 543; //@line 13318
 $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 13319
 HEAP32[$7 >> 2] = $2; //@line 13320
 sp = STACKTOP; //@line 13321
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_341($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx30 = 0, sp = 0;
 sp = STACKTOP; //@line 28211
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28215
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[___async_retval >> 2] = -1011; //@line 28219
  return;
 }
 $ReallocAsyncCtx30 = _emscripten_realloc_async_context(8) | 0; //@line 28222
 _mbed_assert_internal(13588, 12372, 1135); //@line 28223
 if (___async) {
  HEAP32[$ReallocAsyncCtx30 >> 2] = 187; //@line 28226
  $6 = $ReallocAsyncCtx30 + 4 | 0; //@line 28227
  HEAP32[$6 >> 2] = $4; //@line 28228
  sp = STACKTOP; //@line 28229
  return;
 }
 ___async_unwind = 0; //@line 28232
 HEAP32[$ReallocAsyncCtx30 >> 2] = 187; //@line 28233
 $6 = $ReallocAsyncCtx30 + 4 | 0; //@line 28234
 HEAP32[$6 >> 2] = $4; //@line 28235
 sp = STACKTOP; //@line 28236
 return;
}
function _snprintf($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15395
 STACKTOP = STACKTOP + 16 | 0; //@line 15396
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15396
 $3 = sp; //@line 15397
 HEAP32[$3 >> 2] = $varargs; //@line 15398
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 15399
 $4 = _vsnprintf($0, $1, $2, $3) | 0; //@line 15400
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 659; //@line 15403
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 15405
  sp = STACKTOP; //@line 15406
  STACKTOP = sp; //@line 15407
  return 0; //@line 15407
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15409
  STACKTOP = sp; //@line 15410
  return $4 | 0; //@line 15410
 }
 return 0; //@line 15412
}
function _initialize__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15947
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15949
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15951
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15953
 $9 = HEAP32[(HEAP32[$6 >> 2] | 0) + 24 >> 2] | 0; //@line 15956
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 15957
 $10 = FUNCTION_TABLE_i[$9 & 7]() | 0; //@line 15958
 if (!___async) {
  HEAP32[___async_retval >> 2] = $10; //@line 15962
  ___async_unwind = 0; //@line 15963
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 598; //@line 15965
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 15967
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 15969
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 15971
 sp = STACKTOP; //@line 15972
 return;
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 32413
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32415
 $3 = HEAP32[$2 >> 2] | 0; //@line 32416
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0; //@line 32419
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 32420
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 32421
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 540; //@line 32424
  $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 32425
  HEAP32[$7 >> 2] = $2; //@line 32426
  sp = STACKTOP; //@line 32427
  return;
 }
 ___async_unwind = 0; //@line 32430
 HEAP32[$ReallocAsyncCtx2 >> 2] = 540; //@line 32431
 $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 32432
 HEAP32[$7 >> 2] = $2; //@line 32433
 sp = STACKTOP; //@line 32434
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_345($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx28 = 0, sp = 0;
 sp = STACKTOP; //@line 28345
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28349
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[___async_retval >> 2] = 0; //@line 28353
  return;
 }
 $ReallocAsyncCtx28 = _emscripten_realloc_async_context(8) | 0; //@line 28356
 _mbed_assert_internal(13588, 12372, 1217); //@line 28357
 if (___async) {
  HEAP32[$ReallocAsyncCtx28 >> 2] = 201; //@line 28360
  $6 = $ReallocAsyncCtx28 + 4 | 0; //@line 28361
  HEAP32[$6 >> 2] = $4; //@line 28362
  sp = STACKTOP; //@line 28363
  return;
 }
 ___async_unwind = 0; //@line 28366
 HEAP32[$ReallocAsyncCtx28 >> 2] = 201; //@line 28367
 $6 = $ReallocAsyncCtx28 + 4 | 0; //@line 28368
 HEAP32[$6 >> 2] = $4; //@line 28369
 sp = STACKTOP; //@line 28370
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_343($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx29 = 0, sp = 0;
 sp = STACKTOP; //@line 28278
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28282
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[___async_retval >> 2] = 0; //@line 28286
  return;
 }
 $ReallocAsyncCtx29 = _emscripten_realloc_async_context(8) | 0; //@line 28289
 _mbed_assert_internal(13588, 12372, 1180); //@line 28290
 if (___async) {
  HEAP32[$ReallocAsyncCtx29 >> 2] = 192; //@line 28293
  $6 = $ReallocAsyncCtx29 + 4 | 0; //@line 28294
  HEAP32[$6 >> 2] = $4; //@line 28295
  sp = STACKTOP; //@line 28296
  return;
 }
 ___async_unwind = 0; //@line 28299
 HEAP32[$ReallocAsyncCtx29 >> 2] = 192; //@line 28300
 $6 = $ReallocAsyncCtx29 + 4 | 0; //@line 28301
 HEAP32[$6 >> 2] = $4; //@line 28302
 sp = STACKTOP; //@line 28303
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1864
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 1867
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 1869
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 1871
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 1876
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 1881
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1883
 FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 1884
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 90; //@line 1887
  sp = STACKTOP; //@line 1888
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1891
  return;
 }
}
function _mbedtls_ccm_setkey__async_cb_104($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 24620
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24622
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24624
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24626
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24628
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 24629
 $9 = _mbedtls_cipher_setup($2, $4) | 0; //@line 24630
 if (!___async) {
  HEAP32[___async_retval >> 2] = $9; //@line 24634
  ___async_unwind = 0; //@line 24635
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 569; //@line 24637
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 24639
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 24641
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $8; //@line 24643
 sp = STACKTOP; //@line 24644
 return;
}
function _mbed_vtracef__async_cb_382($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 31735
 HEAP32[187] = HEAP32[185]; //@line 31737
 $2 = HEAP32[193] | 0; //@line 31738
 if (!$2) {
  return;
 }
 $4 = HEAP32[194] | 0; //@line 31743
 HEAP32[194] = 0; //@line 31744
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 31745
 FUNCTION_TABLE_v[$2 & 7](); //@line 31746
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 135; //@line 31749
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 31750
  HEAP32[$5 >> 2] = $4; //@line 31751
  sp = STACKTOP; //@line 31752
  return;
 }
 ___async_unwind = 0; //@line 31755
 HEAP32[$ReallocAsyncCtx8 >> 2] = 135; //@line 31756
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 31757
 HEAP32[$5 >> 2] = $4; //@line 31758
 sp = STACKTOP; //@line 31759
 return;
}
function _mbed_vtracef__async_cb_379($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 31471
 HEAP32[187] = HEAP32[185]; //@line 31473
 $2 = HEAP32[193] | 0; //@line 31474
 if (!$2) {
  return;
 }
 $4 = HEAP32[194] | 0; //@line 31479
 HEAP32[194] = 0; //@line 31480
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 31481
 FUNCTION_TABLE_v[$2 & 7](); //@line 31482
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 135; //@line 31485
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 31486
  HEAP32[$5 >> 2] = $4; //@line 31487
  sp = STACKTOP; //@line 31488
  return;
 }
 ___async_unwind = 0; //@line 31491
 HEAP32[$ReallocAsyncCtx8 >> 2] = 135; //@line 31492
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 31493
 HEAP32[$5 >> 2] = $4; //@line 31494
 sp = STACKTOP; //@line 31495
 return;
}
function _mbed_vtracef__async_cb_378($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 31441
 HEAP32[187] = HEAP32[185]; //@line 31443
 $2 = HEAP32[193] | 0; //@line 31444
 if (!$2) {
  return;
 }
 $4 = HEAP32[194] | 0; //@line 31449
 HEAP32[194] = 0; //@line 31450
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 31451
 FUNCTION_TABLE_v[$2 & 7](); //@line 31452
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 135; //@line 31455
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 31456
  HEAP32[$5 >> 2] = $4; //@line 31457
  sp = STACKTOP; //@line 31458
  return;
 }
 ___async_unwind = 0; //@line 31461
 HEAP32[$ReallocAsyncCtx8 >> 2] = 135; //@line 31462
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 31463
 HEAP32[$5 >> 2] = $4; //@line 31464
 sp = STACKTOP; //@line 31465
 return;
}
function _mbedtls_cipher_info_from_values($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010 = 0, $$011 = 0, $3 = 0, $6 = 0, label = 0;
 $3 = HEAP32[2390] | 0; //@line 2603
 if (!$3) {
  $$010 = 0; //@line 2606
  return $$010 | 0; //@line 2607
 } else {
  $$011 = 9556; //@line 2609
  $6 = $3; //@line 2609
 }
 while (1) {
  if ((HEAP32[HEAP32[$6 + 28 >> 2] >> 2] | 0) == ($0 | 0)) {
   if ((HEAP32[$6 + 8 >> 2] | 0) == ($1 | 0)) {
    if ((HEAP32[$6 + 4 >> 2] | 0) == ($2 | 0)) {
     $$010 = $6; //@line 2625
     label = 6; //@line 2626
     break;
    }
   }
  }
  $6 = HEAP32[$$011 + 12 >> 2] | 0; //@line 2633
  if (!$6) {
   $$010 = 0; //@line 2636
   label = 6; //@line 2637
   break;
  } else {
   $$011 = $$011 + 8 | 0; //@line 2640
  }
 }
 if ((label | 0) == 6) {
  return $$010 | 0; //@line 2644
 }
 return 0; //@line 2646
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_330($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 26123
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26127
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26129
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26131
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26133
 $11 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 26135
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 26136
 FUNCTION_TABLE_vii[$11 & 31]($4, $6); //@line 26137
 if (!___async) {
  ___async_unwind = 0; //@line 26140
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 392; //@line 26142
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $8; //@line 26144
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $10; //@line 26146
 sp = STACKTOP; //@line 26147
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9667
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 9670
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 9672
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 9674
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 9679
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 9684
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9686
 FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 9687
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 295; //@line 9690
  sp = STACKTOP; //@line 9691
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9694
  return;
 }
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb($0) {
 $0 = $0 | 0;
 var $$054$ = 0, $13 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23080
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23082
 $$054$ = (HEAP32[___async_retval >> 2] | 0) == 0 ? HEAP32[$0 + 4 >> 2] | 0 : -1014; //@line 23088
 $13 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 23089
 HEAP8[(HEAPU16[$6 >> 1] | 0) + ($8 + 381) >> 0] = $13; //@line 23094
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 1 + ($8 + 381) >> 0] = $13 >>> 8; //@line 23101
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 2 + ($8 + 381) >> 0] = $13 >>> 16; //@line 23108
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 3 + ($8 + 381) >> 0] = $13 >>> 24; //@line 23115
 HEAP16[$6 >> 1] = (HEAPU16[$6 >> 1] | 0) + 4; //@line 23120
 HEAP32[___async_retval >> 2] = $$054$; //@line 23122
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_2($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 17590
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17594
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 17595
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 17597
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($5, $4 + 1076 | 0); //@line 17598
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 448; //@line 17601
  $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 17602
  HEAP32[$7 >> 2] = $4; //@line 17603
  sp = STACKTOP; //@line 17604
  return;
 }
 ___async_unwind = 0; //@line 17607
 HEAP32[$ReallocAsyncCtx2 >> 2] = 448; //@line 17608
 $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 17609
 HEAP32[$7 >> 2] = $4; //@line 17610
 sp = STACKTOP; //@line 17611
 return;
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $13 = 0, $4 = 0, $5 = 0;
 $4 = $1 + 16 | 0; //@line 16095
 $5 = HEAP32[$4 >> 2] | 0; //@line 16096
 do {
  if (!$5) {
   HEAP32[$4 >> 2] = $2; //@line 16100
   HEAP32[$1 + 24 >> 2] = $3; //@line 16102
   HEAP32[$1 + 36 >> 2] = 1; //@line 16104
  } else {
   if (($5 | 0) != ($2 | 0)) {
    $13 = $1 + 36 | 0; //@line 16108
    HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1; //@line 16111
    HEAP32[$1 + 24 >> 2] = 2; //@line 16113
    HEAP8[$1 + 54 >> 0] = 1; //@line 16115
    break;
   }
   $10 = $1 + 24 | 0; //@line 16118
   if ((HEAP32[$10 >> 2] | 0) == 2) {
    HEAP32[$10 >> 2] = $3; //@line 16122
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7869
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 7871
 $3 = __ZN7LoRaMac22get_phy_event_handlersEv($0 + 4 | 0) | 0; //@line 7872
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 241; //@line 7875
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7877
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 7879
  sp = STACKTOP; //@line 7880
  return 0; //@line 7881
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7883
  $6 = $0 + 1928 | 0; //@line 7884
  HEAP32[$6 >> 2] = $3; //@line 7885
  __ZN7LoRaPHY18set_radio_instanceER9LoRaRadio($0 + 1336 | 0, $1); //@line 7887
  return HEAP32[$6 >> 2] | 0; //@line 7889
 }
 return 0; //@line 7891
}
function __ZN4mbed5Timer5startEv($0) {
 $0 = $0 | 0;
 var $13 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2761
 if (HEAP32[$0 >> 2] | 0) {
  return;
 }
 if (HEAP8[$0 + 28 >> 0] | 0) {}
 $7 = HEAP32[$0 + 24 >> 2] | 0; //@line 2773
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2774
 $8 = _ticker_read_us($7) | 0; //@line 2775
 $9 = tempRet0; //@line 2776
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 113; //@line 2779
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2781
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 2783
  sp = STACKTOP; //@line 2784
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2787
 $13 = $0 + 8 | 0; //@line 2789
 HEAP32[$13 >> 2] = $8; //@line 2791
 HEAP32[$13 + 4 >> 2] = $9; //@line 2794
 HEAP32[$0 >> 2] = 1; //@line 2795
 return;
}
function __ZN7LoRaMacD2Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 8833
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8835
 __ZN12radio_eventsD2Ev($0 + 1212 | 0); //@line 8836
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 261; //@line 8839
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 8841
  sp = STACKTOP; //@line 8842
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 8845
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 8847
 __ZN14lorawan_timersD2Ev($0 + 980 | 0); //@line 8848
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 262; //@line 8851
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 8853
  sp = STACKTOP; //@line 8854
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8857
  return;
 }
}
function __ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$09 = 0, $$1 = 0, $11 = 0, $19 = 0, $6 = 0, $9 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20152
 $$ = HEAP8[___async_retval >> 0] & 1 ? 3 : 2; //@line 20156
 $9 = HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 112 >> 2] | 0; //@line 20158
 $11 = HEAPU8[HEAP32[$0 + 8 >> 2] >> 0] | 0; //@line 20160
 $$1 = (HEAP32[$9 + ($11 * 12 | 0) >> 2] | 0) == 0 ? $$ & 1 : $$; //@line 20165
 if ($$1 << 24 >> 24 != 3) {
  $$09 = $$1; //@line 20168
  $19 = ___async_retval; //@line 20169
  HEAP8[$19 >> 0] = $$09; //@line 20170
  return;
 }
 HEAP32[$9 + ($11 * 12 | 0) + 4 >> 2] = HEAP32[$6 >> 2]; //@line 20175
 $$09 = 3; //@line 20176
 $19 = ___async_retval; //@line 20177
 HEAP8[$19 >> 0] = $$09; //@line 20178
 return;
}
function _equeue_post($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3237
 $4 = _equeue_tick() | 0; //@line 3239
 HEAP32[$2 + -4 >> 2] = $1; //@line 3241
 $6 = $2 + -16 | 0; //@line 3242
 HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + $4; //@line 3245
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3246
 $9 = _equeue_enqueue($0, $2 + -36 | 0, $4) | 0; //@line 3247
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 120; //@line 3250
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3252
  sp = STACKTOP; //@line 3253
  return 0; //@line 3254
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3256
  _equeue_sema_signal($0 + 48 | 0); //@line 3258
  return $9 | 0; //@line 3259
 }
 return 0; //@line 3261
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_78($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 22948
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22952
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 22954
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 22956
 $9 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 22958
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 22959
 FUNCTION_TABLE_viii[$9 & 7]($4, $6, $8); //@line 22960
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 231; //@line 22963
  sp = STACKTOP; //@line 22964
  return;
 }
 ___async_unwind = 0; //@line 22967
 HEAP32[$ReallocAsyncCtx >> 2] = 231; //@line 22968
 sp = STACKTOP; //@line 22969
 return;
}
function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = HEAP8[$0 >> 0] | 0; //@line 10918
 $3 = HEAP8[$1 >> 0] | 0; //@line 10919
 if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24) {
  $$lcssa = $3; //@line 10924
  $$lcssa8 = $2; //@line 10924
 } else {
  $$011 = $1; //@line 10926
  $$0710 = $0; //@line 10926
  do {
   $$0710 = $$0710 + 1 | 0; //@line 10928
   $$011 = $$011 + 1 | 0; //@line 10929
   $8 = HEAP8[$$0710 >> 0] | 0; //@line 10930
   $9 = HEAP8[$$011 >> 0] | 0; //@line 10931
  } while (!($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 != $9 << 24 >> 24));
  $$lcssa = $9; //@line 10936
  $$lcssa8 = $8; //@line 10936
 }
 return ($$lcssa8 & 255) - ($$lcssa & 255) | 0; //@line 10946
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 16645
 STACKTOP = STACKTOP + 16 | 0; //@line 16646
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16646
 $vararg_buffer = sp; //@line 16647
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 16648
 FUNCTION_TABLE_v[$0 & 7](); //@line 16649
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 677; //@line 16652
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 16654
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 16656
  sp = STACKTOP; //@line 16657
  STACKTOP = sp; //@line 16658
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16660
  _abort_message(18688, $vararg_buffer); //@line 16661
 }
}
function _serial_putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 7183
 $2 = HEAP32[2580] | 0; //@line 7184
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7185
 _putc($1, $2) | 0; //@line 7186
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 636; //@line 7189
  HEAP32[$AsyncCtx3 + 4 >> 2] = $2; //@line 7191
  sp = STACKTOP; //@line 7192
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 7195
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7196
 _fflush($2) | 0; //@line 7197
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 637; //@line 7200
  sp = STACKTOP; //@line 7201
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7204
  return;
 }
}
function _memcmp($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $14 = 0, $4 = 0, $5 = 0;
 L1 : do {
  if (!$2) {
   $14 = 0; //@line 15360
  } else {
   $$01318 = $0; //@line 15362
   $$01417 = $2; //@line 15362
   $$019 = $1; //@line 15362
   while (1) {
    $4 = HEAP8[$$01318 >> 0] | 0; //@line 15364
    $5 = HEAP8[$$019 >> 0] | 0; //@line 15365
    if ($4 << 24 >> 24 != $5 << 24 >> 24) {
     break;
    }
    $$01417 = $$01417 + -1 | 0; //@line 15370
    if (!$$01417) {
     $14 = 0; //@line 15375
     break L1;
    } else {
     $$01318 = $$01318 + 1 | 0; //@line 15378
     $$019 = $$019 + 1 | 0; //@line 15378
    }
   }
   $14 = ($4 & 255) - ($5 & 255) | 0; //@line 15384
  }
 } while (0);
 return $14 | 0; //@line 15387
}
function ___stdout_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 10870
 STACKTOP = STACKTOP + 32 | 0; //@line 10871
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10871
 $vararg_buffer = sp; //@line 10872
 HEAP32[$0 + 36 >> 2] = 9; //@line 10875
 if (!(HEAP32[$0 >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 10883
  HEAP32[$vararg_buffer + 4 >> 2] = 21523; //@line 10885
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 16; //@line 10887
  if (___syscall54(54, $vararg_buffer | 0) | 0) {
   HEAP8[$0 + 75 >> 0] = -1; //@line 10892
  }
 }
 $14 = ___stdio_write($0, $1, $2) | 0; //@line 10895
 STACKTOP = sp; //@line 10896
 return $14 | 0; //@line 10896
}
function __ZN7LoRaMac10disconnectEv__async_cb_1($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17566
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17568
 $3 = HEAP32[$2 >> 2] | 0; //@line 17569
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 17570
 __ZN7LoRaPHY18put_radio_to_sleepEv($3); //@line 17571
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 449; //@line 17574
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 17575
  HEAP32[$4 >> 2] = $2; //@line 17576
  sp = STACKTOP; //@line 17577
  return;
 }
 ___async_unwind = 0; //@line 17580
 HEAP32[$ReallocAsyncCtx >> 2] = 449; //@line 17581
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 17582
 HEAP32[$4 >> 2] = $2; //@line 17583
 sp = STACKTOP; //@line 17584
 return;
}
function _mbed_die__async_cb_98($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 24189
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24191
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 24193
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 24194
 _wait_ms(150); //@line 24195
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 617; //@line 24198
  $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 24199
  HEAP32[$4 >> 2] = $2; //@line 24200
  sp = STACKTOP; //@line 24201
  return;
 }
 ___async_unwind = 0; //@line 24204
 HEAP32[$ReallocAsyncCtx14 >> 2] = 617; //@line 24205
 $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 24206
 HEAP32[$4 >> 2] = $2; //@line 24207
 sp = STACKTOP; //@line 24208
 return;
}
function _mbed_die__async_cb_97($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 24164
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24166
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 24168
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 24169
 _wait_ms(150); //@line 24170
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 618; //@line 24173
  $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 24174
  HEAP32[$4 >> 2] = $2; //@line 24175
  sp = STACKTOP; //@line 24176
  return;
 }
 ___async_unwind = 0; //@line 24179
 HEAP32[$ReallocAsyncCtx13 >> 2] = 618; //@line 24180
 $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 24181
 HEAP32[$4 >> 2] = $2; //@line 24182
 sp = STACKTOP; //@line 24183
 return;
}
function _mbed_die__async_cb_96($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 24139
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24141
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 24143
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 24144
 _wait_ms(150); //@line 24145
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 619; //@line 24148
  $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 24149
  HEAP32[$4 >> 2] = $2; //@line 24150
  sp = STACKTOP; //@line 24151
  return;
 }
 ___async_unwind = 0; //@line 24154
 HEAP32[$ReallocAsyncCtx12 >> 2] = 619; //@line 24155
 $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 24156
 HEAP32[$4 >> 2] = $2; //@line 24157
 sp = STACKTOP; //@line 24158
 return;
}
function _mbed_die__async_cb_95($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 24114
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24116
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 24118
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 24119
 _wait_ms(150); //@line 24120
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 620; //@line 24123
  $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 24124
  HEAP32[$4 >> 2] = $2; //@line 24125
  sp = STACKTOP; //@line 24126
  return;
 }
 ___async_unwind = 0; //@line 24129
 HEAP32[$ReallocAsyncCtx11 >> 2] = 620; //@line 24130
 $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 24131
 HEAP32[$4 >> 2] = $2; //@line 24132
 sp = STACKTOP; //@line 24133
 return;
}
function _mbed_die__async_cb_94($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 24089
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24091
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 24093
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 24094
 _wait_ms(150); //@line 24095
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 621; //@line 24098
  $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 24099
  HEAP32[$4 >> 2] = $2; //@line 24100
  sp = STACKTOP; //@line 24101
  return;
 }
 ___async_unwind = 0; //@line 24104
 HEAP32[$ReallocAsyncCtx10 >> 2] = 621; //@line 24105
 $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 24106
 HEAP32[$4 >> 2] = $2; //@line 24107
 sp = STACKTOP; //@line 24108
 return;
}
function _mbed_tracef($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3714
 STACKTOP = STACKTOP + 16 | 0; //@line 3715
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 3715
 $3 = sp; //@line 3716
 HEAP32[$3 >> 2] = $varargs; //@line 3717
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3718
 _mbed_vtracef($0, $1, $2, $3); //@line 3719
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 124; //@line 3722
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 3724
  sp = STACKTOP; //@line 3725
  STACKTOP = sp; //@line 3726
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3728
  STACKTOP = sp; //@line 3729
  return;
 }
}
function _mbed_die__async_cb_93($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 24064
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24066
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 24068
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 24069
 _wait_ms(150); //@line 24070
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 622; //@line 24073
  $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 24074
  HEAP32[$4 >> 2] = $2; //@line 24075
  sp = STACKTOP; //@line 24076
  return;
 }
 ___async_unwind = 0; //@line 24079
 HEAP32[$ReallocAsyncCtx9 >> 2] = 622; //@line 24080
 $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 24081
 HEAP32[$4 >> 2] = $2; //@line 24082
 sp = STACKTOP; //@line 24083
 return;
}
function _mbed_die__async_cb_92($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 24039
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24041
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 24043
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 24044
 _wait_ms(400); //@line 24045
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 623; //@line 24048
  $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 24049
  HEAP32[$4 >> 2] = $2; //@line 24050
  sp = STACKTOP; //@line 24051
  return;
 }
 ___async_unwind = 0; //@line 24054
 HEAP32[$ReallocAsyncCtx8 >> 2] = 623; //@line 24055
 $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 24056
 HEAP32[$4 >> 2] = $2; //@line 24057
 sp = STACKTOP; //@line 24058
 return;
}
function _mbed_die__async_cb_91($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 24014
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24016
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 24018
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 24019
 _wait_ms(400); //@line 24020
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 624; //@line 24023
  $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 24024
  HEAP32[$4 >> 2] = $2; //@line 24025
  sp = STACKTOP; //@line 24026
  return;
 }
 ___async_unwind = 0; //@line 24029
 HEAP32[$ReallocAsyncCtx7 >> 2] = 624; //@line 24030
 $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 24031
 HEAP32[$4 >> 2] = $2; //@line 24032
 sp = STACKTOP; //@line 24033
 return;
}
function _mbed_die__async_cb_90($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 23989
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23991
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 23993
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 23994
 _wait_ms(400); //@line 23995
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 625; //@line 23998
  $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 23999
  HEAP32[$4 >> 2] = $2; //@line 24000
  sp = STACKTOP; //@line 24001
  return;
 }
 ___async_unwind = 0; //@line 24004
 HEAP32[$ReallocAsyncCtx6 >> 2] = 625; //@line 24005
 $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 24006
 HEAP32[$4 >> 2] = $2; //@line 24007
 sp = STACKTOP; //@line 24008
 return;
}
function _mbed_die__async_cb_89($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 23964
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23966
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 23968
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 23969
 _wait_ms(400); //@line 23970
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 626; //@line 23973
  $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 23974
  HEAP32[$4 >> 2] = $2; //@line 23975
  sp = STACKTOP; //@line 23976
  return;
 }
 ___async_unwind = 0; //@line 23979
 HEAP32[$ReallocAsyncCtx5 >> 2] = 626; //@line 23980
 $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 23981
 HEAP32[$4 >> 2] = $2; //@line 23982
 sp = STACKTOP; //@line 23983
 return;
}
function _mbed_die__async_cb_88($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 23939
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23941
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 23943
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 23944
 _wait_ms(400); //@line 23945
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 627; //@line 23948
  $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 23949
  HEAP32[$4 >> 2] = $2; //@line 23950
  sp = STACKTOP; //@line 23951
  return;
 }
 ___async_unwind = 0; //@line 23954
 HEAP32[$ReallocAsyncCtx4 >> 2] = 627; //@line 23955
 $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 23956
 HEAP32[$4 >> 2] = $2; //@line 23957
 sp = STACKTOP; //@line 23958
 return;
}
function _mbed_die__async_cb_87($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23914
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23916
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 23918
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 23919
 _wait_ms(400); //@line 23920
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 628; //@line 23923
  $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 23924
  HEAP32[$4 >> 2] = $2; //@line 23925
  sp = STACKTOP; //@line 23926
  return;
 }
 ___async_unwind = 0; //@line 23929
 HEAP32[$ReallocAsyncCtx3 >> 2] = 628; //@line 23930
 $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 23931
 HEAP32[$4 >> 2] = $2; //@line 23932
 sp = STACKTOP; //@line 23933
 return;
}
function _mbed_die__async_cb_86($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23889
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23891
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 23893
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 23894
 _wait_ms(400); //@line 23895
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 629; //@line 23898
  $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 23899
  HEAP32[$4 >> 2] = $2; //@line 23900
  sp = STACKTOP; //@line 23901
  return;
 }
 ___async_unwind = 0; //@line 23904
 HEAP32[$ReallocAsyncCtx2 >> 2] = 629; //@line 23905
 $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 23906
 HEAP32[$4 >> 2] = $2; //@line 23907
 sp = STACKTOP; //@line 23908
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_202($0) {
 $0 = $0 | 0;
 var $10 = 0, $6 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 11619
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11625
 if (!(HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 11 >> 0] | 0)) {
  return;
 }
 $10 = HEAP8[HEAP32[$0 + 8 >> 2] >> 0] | 0; //@line 11632
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 11633
 __ZN12LoRaWANStack9handle_txEhPKhth($6, $10, 0, 0, 2) | 0; //@line 11634
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 167; //@line 11637
  sp = STACKTOP; //@line 11638
  return;
 }
 ___async_unwind = 0; //@line 11641
 HEAP32[$ReallocAsyncCtx5 >> 2] = 167; //@line 11642
 sp = STACKTOP; //@line 11643
 return;
}
function _mbed_die__async_cb_85($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 23864
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23866
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 23868
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 23869
 _wait_ms(400); //@line 23870
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 630; //@line 23873
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 23874
  HEAP32[$4 >> 2] = $2; //@line 23875
  sp = STACKTOP; //@line 23876
  return;
 }
 ___async_unwind = 0; //@line 23879
 HEAP32[$ReallocAsyncCtx >> 2] = 630; //@line 23880
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 23881
 HEAP32[$4 >> 2] = $2; //@line 23882
 sp = STACKTOP; //@line 23883
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_62($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 22018
 $4 = HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 788 >> 2] | 0; //@line 22022
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 60 >> 2] | 0; //@line 22028
 if (!$7) {
  return;
 }
 $10 = HEAP32[$7 >> 2] | 0; //@line 22034
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 22035
 FUNCTION_TABLE_vi[$10 & 1023]($4 + 48 | 0); //@line 22036
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 88; //@line 22039
  sp = STACKTOP; //@line 22040
  return;
 }
 ___async_unwind = 0; //@line 22043
 HEAP32[$ReallocAsyncCtx4 >> 2] = 88; //@line 22044
 sp = STACKTOP; //@line 22045
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_33($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19333
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19337
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19339
 $7 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 19341
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 19342
 FUNCTION_TABLE_vii[$7 & 31]($4, $6); //@line 19343
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 234; //@line 19346
  sp = STACKTOP; //@line 19347
  return;
 }
 ___async_unwind = 0; //@line 19350
 HEAP32[$ReallocAsyncCtx >> 2] = 234; //@line 19351
 sp = STACKTOP; //@line 19352
 return;
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16934
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16936
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16938
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16940
 $8 = HEAP32[HEAP32[$2 >> 2] >> 2] | 0; //@line 16942
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 16943
 FUNCTION_TABLE_vii[$8 & 31]($2, $4); //@line 16944
 if (!___async) {
  ___async_unwind = 0; //@line 16947
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 140; //@line 16949
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $6; //@line 16951
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $2; //@line 16953
 sp = STACKTOP; //@line 16954
 return;
}
function _mbed_error_printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6923
 STACKTOP = STACKTOP + 16 | 0; //@line 6924
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6924
 $1 = sp; //@line 6925
 HEAP32[$1 >> 2] = $varargs; //@line 6926
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6927
 _mbed_error_vfprintf($0, $1); //@line 6928
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 631; //@line 6931
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 6933
  sp = STACKTOP; //@line 6934
  STACKTOP = sp; //@line 6935
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6937
  STACKTOP = sp; //@line 6938
  return;
 }
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 33054
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33056
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[___async_retval >> 2] = -1003; //@line 33062
  return;
 }
 $4 = HEAP32[$2 >> 2] | 0; //@line 33065
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 33066
 __ZN7LoRaPHY18put_radio_to_sleepEv($4); //@line 33067
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 489; //@line 33070
  sp = STACKTOP; //@line 33071
  return;
 }
 ___async_unwind = 0; //@line 33074
 HEAP32[$ReallocAsyncCtx2 >> 2] = 489; //@line 33075
 sp = STACKTOP; //@line 33076
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $9 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17541
 HEAP8[$2 + 372 >> 0] = 0; //@line 17543
 HEAP8[$2 + 377 >> 0] = 0; //@line 17545
 HEAP8[$2 + 371 >> 0] = 1; //@line 17547
 HEAP8[$2 + 373 >> 0] = 0; //@line 17549
 HEAP8[$2 + 374 >> 0] = 0; //@line 17551
 HEAP8[$2 + 944 >> 0] = 0; //@line 17553
 $9 = $2 + 968 | 0; //@line 17554
 HEAP32[$9 >> 2] = 0; //@line 17555
 $10 = $2 + 4 | 0; //@line 17556
 __ZN14LoRaMacCommand20clear_command_bufferEv($10); //@line 17557
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($10); //@line 17558
 __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($10); //@line 17559
 HEAP32[$9 >> 2] = 0; //@line 17560
 return;
}
function __ZN4mbed10TimerEventC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2887
 HEAP32[$0 >> 2] = 704; //@line 2888
 $1 = $0 + 8 | 0; //@line 2889
 HEAP32[$1 >> 2] = 0; //@line 2890
 HEAP32[$1 + 4 >> 2] = 0; //@line 2890
 HEAP32[$1 + 8 >> 2] = 0; //@line 2890
 HEAP32[$1 + 12 >> 2] = 0; //@line 2890
 $2 = _get_us_ticker_data() | 0; //@line 2891
 HEAP32[$0 + 24 >> 2] = $2; //@line 2893
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2894
 _ticker_set_handler($2, 38); //@line 2895
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 116; //@line 2898
  sp = STACKTOP; //@line 2899
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2902
  return;
 }
}
function __ZN7LoRaMacD2Ev__async_cb_47($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 20635
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20637
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 20639
 __ZN14lorawan_timersD2Ev($2 + 980 | 0); //@line 20640
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 262; //@line 20643
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 20644
  HEAP32[$4 >> 2] = $2; //@line 20645
  sp = STACKTOP; //@line 20646
  return;
 }
 ___async_unwind = 0; //@line 20649
 HEAP32[$ReallocAsyncCtx >> 2] = 262; //@line 20650
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 20651
 HEAP32[$4 >> 2] = $2; //@line 20652
 sp = STACKTOP; //@line 20653
 return;
}
function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0; //@line 33784
 newDynamicTop = oldDynamicTop + increment | 0; //@line 33785
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory() | 0; //@line 33789
  ___setErrNo(12); //@line 33790
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop; //@line 33794
 if ((newDynamicTop | 0) > (getTotalMemory() | 0)) {
  if (!(enlargeMemory() | 0)) {
   HEAP32[DYNAMICTOP_PTR >> 2] = oldDynamicTop; //@line 33798
   ___setErrNo(12); //@line 33799
   return -1;
  }
 }
 return oldDynamicTop | 0; //@line 33803
}
function _fwrite($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $11 = 0, $13 = 0, $15 = 0, $4 = 0, $phitmp = 0;
 $4 = Math_imul($2, $1) | 0; //@line 11041
 $$ = ($1 | 0) == 0 ? 0 : $2; //@line 11043
 if ((HEAP32[$3 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($3) | 0) == 0; //@line 11049
  $11 = ___fwritex($0, $4, $3) | 0; //@line 11050
  if ($phitmp) {
   $13 = $11; //@line 11052
  } else {
   ___unlockfile($3); //@line 11054
   $13 = $11; //@line 11055
  }
 } else {
  $13 = ___fwritex($0, $4, $3) | 0; //@line 11059
 }
 if (($13 | 0) == ($4 | 0)) {
  $15 = $$; //@line 11063
 } else {
  $15 = ($13 >>> 0) / ($1 >>> 0) | 0; //@line 11066
 }
 return $15 | 0; //@line 11068
}
function __ZN16SX1276_LoRaRadio11tx_done_irqEv($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2026
 __ZN4mbed6Ticker6detachEv($0 + 1240 | 0); //@line 2028
 HEAP8[$0 + 688 >> 0] = 0; //@line 2030
 $4 = HEAP32[$0 + 788 >> 2] | 0; //@line 2032
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 12 >> 2] | 0; //@line 2038
 if (!$7) {
  return;
 }
 $9 = HEAP32[$7 >> 2] | 0; //@line 2043
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2044
 FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 2045
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 95; //@line 2048
  sp = STACKTOP; //@line 2049
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2052
 return;
}
function __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb_100($0) {
 $0 = $0 | 0;
 var $$0 = 0, $13 = 0, $15 = 0, $8 = 0, $AsyncRetVal = 0;
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24342
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24346
 if (!$AsyncRetVal) {
  $13 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 24349
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv(HEAP32[$0 + 12 >> 2] | 0) | 0) >> 2] = $13; //@line 24351
  $15 = $8 + 944 | 0; //@line 24352
  HEAP8[$15 >> 0] = HEAP8[$15 >> 0] | 1; //@line 24355
  $$0 = 0; //@line 24356
 } else {
  HEAP8[$8 + 373 >> 0] = 0; //@line 24359
  $$0 = $AsyncRetVal; //@line 24360
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 24363
 return;
}
function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $14 = 0, $15 = 0, $8 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$05$lcssa = $2; //@line 13377
 } else {
  $$056 = $2; //@line 13379
  $15 = $1; //@line 13379
  $8 = $0; //@line 13379
  while (1) {
   $14 = $$056 + -1 | 0; //@line 13387
   HEAP8[$14 >> 0] = HEAPU8[16351 + ($8 & 15) >> 0] | 0 | $3; //@line 13388
   $8 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0; //@line 13389
   $15 = tempRet0; //@line 13390
   if (($8 | 0) == 0 & ($15 | 0) == 0) {
    $$05$lcssa = $14; //@line 13395
    break;
   } else {
    $$056 = $14; //@line 13398
   }
  }
 }
 return $$05$lcssa | 0; //@line 13402
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_329($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26098
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26102
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26104
 $7 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 26106
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 26107
 FUNCTION_TABLE_vii[$7 & 31]($4, $6); //@line 26108
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 394; //@line 26111
  sp = STACKTOP; //@line 26112
  return;
 }
 ___async_unwind = 0; //@line 26115
 HEAP32[$ReallocAsyncCtx5 >> 2] = 394; //@line 26116
 sp = STACKTOP; //@line 26117
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_5($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 17665
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17667
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17669
 $5 = HEAP32[$2 >> 2] | 0; //@line 17670
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 17672
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($5, $4 + 1016 | 0); //@line 17673
 if (!___async) {
  ___async_unwind = 0; //@line 17676
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 445; //@line 17678
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 17680
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 17682
 sp = STACKTOP; //@line 17683
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_4($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 17641
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17643
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17645
 $5 = HEAP32[$2 >> 2] | 0; //@line 17646
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 17648
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($5, $4 + 1036 | 0); //@line 17649
 if (!___async) {
  ___async_unwind = 0; //@line 17652
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 446; //@line 17654
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 17656
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $4; //@line 17658
 sp = STACKTOP; //@line 17659
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_3($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17617
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17619
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17621
 $5 = HEAP32[$2 >> 2] | 0; //@line 17622
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 17624
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($5, $4 + 1056 | 0); //@line 17625
 if (!___async) {
  ___async_unwind = 0; //@line 17628
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 447; //@line 17630
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 17632
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 17634
 sp = STACKTOP; //@line 17635
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_111($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$pre = 0, $13 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25343
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25345
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 25347
 if (!$AsyncRetVal) {
  $$1 = 0; //@line 25350
  $13 = ___async_retval; //@line 25351
  HEAP32[$13 >> 2] = $$1; //@line 25352
  return;
 }
 $$pre = HEAP8[$6 >> 0] | 0; //@line 25355
 HEAP8[$8 + 373 >> 0] = 0; //@line 25357
 HEAP8[$6 >> 0] = $$pre & -9; //@line 25359
 $$1 = $AsyncRetVal; //@line 25360
 $13 = ___async_retval; //@line 25361
 HEAP32[$13 >> 2] = $$1; //@line 25362
 return;
}
function _mbedtls_gcm_free($0) {
 $0 = $0 | 0;
 var $$034$i = 0, $$05$i = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5519
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5520
 _mbedtls_cipher_free($0); //@line 5521
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 595; //@line 5524
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5526
  sp = STACKTOP; //@line 5527
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5530
 $$034$i = 400; //@line 5531
 $$05$i = $0; //@line 5531
 while (1) {
  $$034$i = $$034$i + -1 | 0; //@line 5533
  HEAP8[$$05$i >> 0] = 0; //@line 5535
  if (!$$034$i) {
   break;
  } else {
   $$05$i = $$05$i + 1 | 0; //@line 5540
  }
 }
 return;
}
function __ZSt9terminatev() {
 var $0 = 0, $16 = 0, $17 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 16610
 $0 = ___cxa_get_globals_fast() | 0; //@line 16611
 if ($0 | 0) {
  $2 = HEAP32[$0 >> 2] | 0; //@line 16614
  if ($2 | 0) {
   $5 = $2 + 48 | 0; //@line 16618
   if ((HEAP32[$5 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$5 + 4 >> 2] | 0) == 1129074247 : 0) {
    $16 = HEAP32[$2 + 12 >> 2] | 0; //@line 16630
    _emscripten_alloc_async_context(4, sp) | 0; //@line 16631
    __ZSt11__terminatePFvvE($16); //@line 16632
   }
  }
 }
 $17 = __ZSt13get_terminatev() | 0; //@line 16637
 _emscripten_alloc_async_context(4, sp) | 0; //@line 16638
 __ZSt11__terminatePFvvE($17); //@line 16639
}
function __GLOBAL__sub_I_main_cpp__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15912
 __ZN5Sht31C2E7PinNameS0_(23804, 10, 11); //@line 15913
 __ZN4mbed11InterruptInC2E7PinName(22824, 1337); //@line 15914
 __ZN6events10EventQueueC2EjPh(22896, 1664, 0); //@line 15915
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 15916
 __ZN16LoRaWANInterfaceC2ER9LoRaRadio(23100, 18848); //@line 15917
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 647; //@line 15920
  sp = STACKTOP; //@line 15921
  return;
 }
 ___async_unwind = 0; //@line 15924
 HEAP32[$ReallocAsyncCtx2 >> 2] = 647; //@line 15925
 sp = STACKTOP; //@line 15926
 return;
}
function __ZN14lorawan_timersD2Ev__async_cb_73($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22811
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22813
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 22815
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 22822
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 22823
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 16 | 0); //@line 22824
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 274; //@line 22827
  sp = STACKTOP; //@line 22828
  return;
 }
 ___async_unwind = 0; //@line 22831
 HEAP32[$ReallocAsyncCtx5 >> 2] = 274; //@line 22832
 sp = STACKTOP; //@line 22833
 return;
}
function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $3 = 0, $7 = 0;
 $1 = $0 + 74 | 0; //@line 11258
 $3 = HEAP8[$1 >> 0] | 0; //@line 11260
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 11264
 $7 = HEAP32[$0 >> 2] | 0; //@line 11265
 if (!($7 & 8)) {
  HEAP32[$0 + 8 >> 2] = 0; //@line 11270
  HEAP32[$0 + 4 >> 2] = 0; //@line 11272
  $14 = HEAP32[$0 + 44 >> 2] | 0; //@line 11274
  HEAP32[$0 + 28 >> 2] = $14; //@line 11276
  HEAP32[$0 + 20 >> 2] = $14; //@line 11278
  HEAP32[$0 + 16 >> 2] = $14 + (HEAP32[$0 + 48 >> 2] | 0); //@line 11284
  $$0 = 0; //@line 11285
 } else {
  HEAP32[$0 >> 2] = $7 | 32; //@line 11288
  $$0 = -1; //@line 11289
 }
 return $$0 | 0; //@line 11291
}
function __ZN4mbed11InterruptInD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15232
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15234
 $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 15236
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 15243
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 15244
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 40 | 0); //@line 15245
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 101; //@line 15248
  sp = STACKTOP; //@line 15249
  return;
 }
 ___async_unwind = 0; //@line 15252
 HEAP32[$ReallocAsyncCtx2 >> 2] = 101; //@line 15253
 sp = STACKTOP; //@line 15254
 return;
}
function __ZN7LoRaMac16add_channel_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16184
 if ((HEAP32[$0 + 968 >> 2] & 33 | 0) == 1) {
  $$0 = -1e3; //@line 16190
  return $$0 | 0; //@line 16191
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16194
 $7 = __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan($0 + 352 | 0, $1) | 0; //@line 16195
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 451; //@line 16198
  sp = STACKTOP; //@line 16199
  return 0; //@line 16200
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16202
 $$0 = $7; //@line 16203
 return $$0 | 0; //@line 16204
}
function __ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$1 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19140
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19142
 $$ = HEAP8[___async_retval >> 0] & 1 ? 7 : 6; //@line 19146
 $6 = HEAP8[$2 >> 0] | 0; //@line 19147
 $$1 = ($6 << 24 >> 24 < (HEAP8[$4 + 28 >> 0] | 0) ? 1 : $6 << 24 >> 24 > (HEAP8[$4 + 29 >> 0] | 0)) ? $$ & 5 : $$; //@line 19156
 $16 = HEAP8[$2 + 1 >> 0] | 0; //@line 19158
 HEAP8[___async_retval >> 0] = ($16 << 24 >> 24 < (HEAP8[$4 + 32 >> 0] | 0) ? 1 : $16 << 24 >> 24 > (HEAP8[$4 + 33 >> 0] | 0)) ? $$1 & 3 : $$1; //@line 19169
 return;
}
function __ZN4mbed5Timer7read_msEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $18 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $6 = 0, $9 = 0;
 $4 = $0 + 8 | 0; //@line 32892
 $6 = HEAP32[$4 >> 2] | 0; //@line 32894
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 32897
 $11 = ___async_retval; //@line 32899
 $18 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 32906
 $24 = _i64Subtract(HEAP32[$11 >> 2] | 0, HEAP32[$11 + 4 >> 2] | 0, HEAP32[$18 >> 2] | 0, HEAP32[$18 + 4 >> 2] | 0) | 0; //@line 32912
 $26 = _i64Add($24 | 0, tempRet0 | 0, $6 | 0, $9 | 0) | 0; //@line 32914
 $28 = ___udivdi3($26 | 0, tempRet0 | 0, 1e3, 0) | 0; //@line 32916
 HEAP32[___async_retval >> 2] = $28; //@line 32919
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_59($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 21771
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21773
 $4 = HEAP32[$2 + 12 >> 2] | 0; //@line 21775
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 21781
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 21782
 FUNCTION_TABLE_vi[$7 & 1023]($2); //@line 21783
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 269; //@line 21786
  sp = STACKTOP; //@line 21787
  return;
 }
 ___async_unwind = 0; //@line 21790
 HEAP32[$ReallocAsyncCtx7 >> 2] = 269; //@line 21791
 sp = STACKTOP; //@line 21792
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_79($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23037
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23040
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 23043
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 23044
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 23045
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 538; //@line 23048
  sp = STACKTOP; //@line 23049
  return;
 }
 ___async_unwind = 0; //@line 23052
 HEAP32[$ReallocAsyncCtx3 >> 2] = 538; //@line 23053
 sp = STACKTOP; //@line 23054
 return;
}
function __ZN16SX1276_LoRaRadio10init_radioEP12radio_events($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 49
 HEAP32[$0 + 788 >> 2] = $1; //@line 51
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 54
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 55
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 56
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 48; //@line 59
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 61
  sp = STACKTOP; //@line 62
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 65
  HEAP8[$0 + 689 >> 0] = 0; //@line 67
  HEAP8[$0 + 688 >> 0] = 0; //@line 69
  return;
 }
}
function __ZN7LoRaMac21remove_single_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16263
 if ((HEAP32[$0 + 968 >> 2] & 33 | 0) == 1) {
  $$0 = -1e3; //@line 16269
  return $$0 | 0; //@line 16270
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16273
 $7 = __ZN18LoRaMacChannelPlan21remove_single_channelEh($0 + 352 | 0, $1) | 0; //@line 16274
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 453; //@line 16277
  sp = STACKTOP; //@line 16278
  return 0; //@line 16279
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16281
 $$0 = $7; //@line 16282
 return $$0 | 0; //@line 16283
}
function __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 424
 $2 = HEAP32[$0 >> 2] | 0; //@line 425
 $3 = $1 + 16 | 0; //@line 426
 $4 = HEAP32[$3 >> 2] | 0; //@line 427
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 428
 __ZN6events10EventQueue6cancelEi($2, $4); //@line 429
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 567; //@line 432
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 434
  sp = STACKTOP; //@line 435
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 438
  HEAP32[$3 >> 2] = 0; //@line 439
  return;
 }
}
function _mbedtls_cipher_setup__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32168
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32170
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 32172
 HEAP32[$2 + 60 >> 2] = $AsyncRetVal; //@line 32174
 if (!$AsyncRetVal) {
  $$0 = -24960; //@line 32177
 } else {
  HEAP32[$2 >> 2] = $4; //@line 32179
  if ((HEAP32[$4 + 4 >> 2] | 0) == 2) {
   HEAP32[$2 + 12 >> 2] = 4; //@line 32185
   HEAP32[$2 + 16 >> 2] = 14; //@line 32187
   $$0 = 0; //@line 32188
  } else {
   $$0 = 0; //@line 32190
  }
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 32194
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_76($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 22890
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22894
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 22896
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 22897
 FUNCTION_TABLE_vi[$5 & 1023]($4); //@line 22898
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 294; //@line 22901
  sp = STACKTOP; //@line 22902
  return;
 }
 ___async_unwind = 0; //@line 22905
 HEAP32[$ReallocAsyncCtx >> 2] = 294; //@line 22906
 sp = STACKTOP; //@line 22907
 return;
}
function _twobyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink$in = 0, $$sink17$sink = 0, $11 = 0, $12 = 0, $8 = 0;
 $8 = (HEAPU8[$1 >> 0] | 0) << 8 | (HEAPU8[$1 + 1 >> 0] | 0); //@line 14845
 $$sink$in = HEAPU8[$0 >> 0] | 0; //@line 14848
 $$sink17$sink = $0; //@line 14848
 while (1) {
  $11 = $$sink17$sink + 1 | 0; //@line 14850
  $12 = HEAP8[$11 >> 0] | 0; //@line 14851
  if (!($12 << 24 >> 24)) {
   break;
  }
  $$sink$in = $$sink$in << 8 & 65280 | $12 & 255; //@line 14859
  if (($$sink$in | 0) == ($8 | 0)) {
   break;
  } else {
   $$sink17$sink = $11; //@line 14864
  }
 }
 return ($12 << 24 >> 24 ? $$sink17$sink : 0) | 0; //@line 14869
}
function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $7 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$0$lcssa = $2; //@line 13414
 } else {
  $$06 = $2; //@line 13416
  $11 = $1; //@line 13416
  $7 = $0; //@line 13416
  while (1) {
   $10 = $$06 + -1 | 0; //@line 13421
   HEAP8[$10 >> 0] = $7 & 7 | 48; //@line 13422
   $7 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0; //@line 13423
   $11 = tempRet0; //@line 13424
   if (($7 | 0) == 0 & ($11 | 0) == 0) {
    $$0$lcssa = $10; //@line 13429
    break;
   } else {
    $$06 = $10; //@line 13432
   }
  }
 }
 return $$0$lcssa | 0; //@line 13436
}
function __ZN16LoRaWANInterface4sendEhPKhti__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24236
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24238
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 24240
 $8 = HEAP16[$0 + 14 >> 1] | 0; //@line 24242
 if (!$2) {
  $$0 = -1003; //@line 24245
  $13 = ___async_retval; //@line 24246
  HEAP16[$13 >> 1] = $$0; //@line 24247
  return;
 }
 $$0 = __ZN12LoRaWANStack9handle_txEhPKhth(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $6, $2, $8, $4 & 255) | 0; //@line 24253
 $13 = ___async_retval; //@line 24254
 HEAP16[$13 >> 1] = $$0; //@line 24255
 return;
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb_216($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13240
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 13243
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 13246
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 13247
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 13248
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 547; //@line 13251
  sp = STACKTOP; //@line 13252
  return;
 }
 ___async_unwind = 0; //@line 13255
 HEAP32[$ReallocAsyncCtx3 >> 2] = 547; //@line 13256
 sp = STACKTOP; //@line 13257
 return;
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_268($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16960
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16964
 $7 = HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 76 >> 2] | 0; //@line 16967
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 16968
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 16969
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 141; //@line 16972
  sp = STACKTOP; //@line 16973
  return;
 }
 ___async_unwind = 0; //@line 16976
 HEAP32[$ReallocAsyncCtx3 >> 2] = 141; //@line 16977
 sp = STACKTOP; //@line 16978
 return;
}
function __ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, sp = 0;
 sp = STACKTOP; //@line 8350
 STACKTOP = STACKTOP + 16 | 0; //@line 8351
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 8351
 if ((HEAP32[$0 + 1876 >> 2] | 0) >>> 0 < 3) {
  _mbed_tracef(2, 12332, 13305, sp); //@line 8357
  $$0 = -1e3; //@line 8358
  STACKTOP = sp; //@line 8359
  return $$0 | 0; //@line 8359
 } else {
  $$0 = __ZN7LoRaMac16get_channel_planER16lora_channelplan($0 + 4 | 0, $1) | 0; //@line 8363
  STACKTOP = sp; //@line 8364
  return $$0 | 0; //@line 8364
 }
 return 0; //@line 8366
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_218($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13327
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 13330
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 13333
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 13334
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 13335
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 544; //@line 13338
  sp = STACKTOP; //@line 13339
  return;
 }
 ___async_unwind = 0; //@line 13342
 HEAP32[$ReallocAsyncCtx3 >> 2] = 544; //@line 13343
 sp = STACKTOP; //@line 13344
 return;
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_396($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 32440
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 32443
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 32446
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 32447
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 32448
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 541; //@line 32451
  sp = STACKTOP; //@line 32452
  return;
 }
 ___async_unwind = 0; //@line 32455
 HEAP32[$ReallocAsyncCtx3 >> 2] = 541; //@line 32456
 sp = STACKTOP; //@line 32457
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_193($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 11041
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 11044
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 11047
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 11048
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 11049
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 551; //@line 11052
  sp = STACKTOP; //@line 11053
  return;
 }
 ___async_unwind = 0; //@line 11056
 HEAP32[$ReallocAsyncCtx4 >> 2] = 551; //@line 11057
 sp = STACKTOP; //@line 11058
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_192($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 11018
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 11021
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 11024
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 11025
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 11026
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 551; //@line 11029
  sp = STACKTOP; //@line 11030
  return;
 }
 ___async_unwind = 0; //@line 11033
 HEAP32[$ReallocAsyncCtx4 >> 2] = 551; //@line 11034
 sp = STACKTOP; //@line 11035
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb_235($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14809
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 14812
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 14815
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 14816
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 14817
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 557; //@line 14820
  sp = STACKTOP; //@line 14821
  return;
 }
 ___async_unwind = 0; //@line 14824
 HEAP32[$ReallocAsyncCtx3 >> 2] = 557; //@line 14825
 sp = STACKTOP; //@line 14826
 return;
}
function __ZN16SX1276_LoRaRadio6randomEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 763
 $1 = _emscripten_asm_const_i(4) | 0; //@line 764
 $4 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 767
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 768
 FUNCTION_TABLE_vi[$4 & 1023]($0); //@line 769
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 58; //@line 772
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 774
  sp = STACKTOP; //@line 775
  return 0; //@line 776
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 778
  return $1 | 0; //@line 779
 }
 return 0; //@line 781
}
function __ZN7LoRaPHY16get_alternate_DREh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $12 = 0, $3 = 0, $6 = 0, $8 = 0;
 $3 = HEAP8[$0 + 31 >> 0] | 0; //@line 22673
 $6 = HEAP8[$0 + 26 >> 0] | 0; //@line 22676
 $8 = ($3 & 255) + 1 | 0; //@line 22678
 $12 = (($1 & 255) >>> 0) % (($8 - ($6 & 255) & 255) >>> 0) | 0; //@line 22682
 switch (($12 & 255) << 24 >> 24) {
 case 1:
  {
   $$0 = $3; //@line 22686
   return $$0 | 0; //@line 22687
  }
 case 0:
  {
   $$0 = $6; //@line 22691
   return $$0 | 0; //@line 22692
  }
 default:
  {
   $$0 = $8 - $12 & 255; //@line 22698
   return $$0 | 0; //@line 22699
  }
 }
 return 0; //@line 22702
}
function __ZN16SX1276_LoRaRadio5sleepEv($0) {
 $0 = $0 | 0;
 var $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 85
 STACKTOP = STACKTOP + 16 | 0; //@line 86
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 86
 $vararg_buffer1 = sp + 8 | 0; //@line 87
 _mbed_tracef(16, 10944, 11704, sp); //@line 89
 __ZN4mbed6Ticker6detachEv($0 + 1048 | 0); //@line 91
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 93
 HEAP32[$vararg_buffer1 >> 2] = 0; //@line 94
 _mbed_tracef(16, 10944, 11001, $vararg_buffer1); //@line 95
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 96
 STACKTOP = sp; //@line 97
 return;
}
function __ZN7LoRaMac19remove_channel_planEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16209
 if ((HEAP32[$0 + 968 >> 2] & 33 | 0) == 1) {
  $$0 = -1e3; //@line 16215
  return $$0 | 0; //@line 16216
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16219
 $6 = __ZN18LoRaMacChannelPlan11remove_planEv($0 + 352 | 0) | 0; //@line 16220
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 452; //@line 16223
  sp = STACKTOP; //@line 16224
  return 0; //@line 16225
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16227
 $$0 = $6; //@line 16228
 return $$0 | 0; //@line 16229
}
function __ZN4mbed7Timeout7handlerEv__async_cb_316($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 21276
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21280
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 21282
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 21283
 FUNCTION_TABLE_vi[$5 & 1023]($4); //@line 21284
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 111; //@line 21287
  sp = STACKTOP; //@line 21288
  return;
 }
 ___async_unwind = 0; //@line 21291
 HEAP32[$ReallocAsyncCtx >> 2] = 111; //@line 21292
 sp = STACKTOP; //@line 21293
 return;
}
function __ZN7LoRaPHY18verify_tx_datarateEhb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$sink$in = 0, $$sink5 = 0;
 do {
  if ($2) {
   $$sink$in = $0 + 30 | 0; //@line 24160
   $$sink5 = $0 + 31 | 0; //@line 24160
  } else {
   if (!(HEAP8[$0 + 132 >> 0] & 1)) {
    $$sink$in = $0 + 26 | 0; //@line 24169
    $$sink5 = $0 + 27 | 0; //@line 24169
    break;
   } else {
    $$sink$in = $0 + 35 | 0; //@line 24174
    $$sink5 = $0 + 27 | 0; //@line 24174
    break;
   }
  }
 } while (0);
 return ((HEAP8[$$sink$in >> 0] | 0) <= $1 << 24 >> 24 ? (HEAP8[$$sink5 >> 0] | 0) >= $1 << 24 >> 24 : 0) | 0; //@line 24184
}
function ___cxa_is_pointer_type($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17512
 do {
  if (!$0) {
   $3 = 0; //@line 17516
  } else {
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17518
   $2 = ___dynamic_cast($0, 464, 520, 0) | 0; //@line 17519
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 691; //@line 17522
    sp = STACKTOP; //@line 17523
    return 0; //@line 17524
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 17526
    $3 = ($2 | 0) != 0 & 1; //@line 17529
    break;
   }
  }
 } while (0);
 return $3 | 0; //@line 17534
}
function __ZN7LoRaPHY24restore_default_channelsEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $2 = 0, $5 = 0, $7 = 0, $8 = 0, $indvars$iv = 0;
 $2 = HEAP8[$0 + 128 >> 0] | 0; //@line 21304
 if (!($2 << 24 >> 24)) {
  return;
 }
 $5 = HEAP32[$0 + 124 >> 2] | 0; //@line 21310
 $7 = HEAP32[$0 + 120 >> 2] | 0; //@line 21312
 $8 = $2 & 255; //@line 21313
 $indvars$iv = 0; //@line 21314
 do {
  $11 = $7 + ($indvars$iv << 1) | 0; //@line 21318
  HEAP16[$11 >> 1] = HEAP16[$11 >> 1] | HEAP16[$5 + ($indvars$iv << 1) >> 1]; //@line 21321
  $indvars$iv = $indvars$iv + 1 | 0; //@line 21322
 } while ($indvars$iv >>> 0 < $8 >>> 0);
 return;
}
function _invoke_ticker__async_cb_336($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 27802
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 27808
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 27809
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 27810
 FUNCTION_TABLE_vi[$5 & 1023]($6); //@line 27811
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 644; //@line 27814
  sp = STACKTOP; //@line 27815
  return;
 }
 ___async_unwind = 0; //@line 27818
 HEAP32[$ReallocAsyncCtx >> 2] = 644; //@line 27819
 sp = STACKTOP; //@line 27820
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_418($0) {
 $0 = $0 | 0;
 var $19 = 0, $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33259
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33261
 HEAP32[$4 + 364 >> 2] = 2; //@line 33263
 if (HEAP8[$4 + 373 >> 0] | 0) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 4; //@line 33271
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 4; //@line 33276
 if ((HEAP32[$6 >> 2] | 0) == 2) {
  return;
 }
 $19 = $4 + 944 | 0; //@line 33282
 HEAP8[$19 >> 0] = HEAP8[$19 >> 0] | 32; //@line 33285
 return;
}
function __Z18decrypt_join_framePKhtS0_Ph($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $4 = 0, $6 = 0;
 _mbedtls_aes_init(22528); //@line 20182
 $4 = _mbedtls_aes_setkey_enc(22528, $2, 128) | 0; //@line 20183
 if (!$4) {
  $6 = _mbedtls_aes_crypt_ecb(22528, 1, $0, $3) | 0; //@line 20186
  if (($1 & 65535) > 15 & ($6 | 0) == 0) {
   $$0 = _mbedtls_aes_crypt_ecb(22528, 1, $0 + 16 | 0, $3 + 16 | 0) | 0; //@line 20194
  } else {
   $$0 = $6; //@line 20196
  }
 } else {
  $$0 = $4; //@line 20199
 }
 _mbedtls_aes_free(22528); //@line 20201
 return $$0 | 0; //@line 20202
}
function __ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12163
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 12165
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 12171
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12172
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 12173
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 348; //@line 12176
  sp = STACKTOP; //@line 12177
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 12180
 return;
}
function _getint_671($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$04 = 0, $11 = 0, $12 = 0, $7 = 0;
 if (!(_isdigit(HEAP8[HEAP32[$0 >> 2] >> 0] | 0) | 0)) {
  $$0$lcssa = 0; //@line 13058
 } else {
  $$04 = 0; //@line 13060
  while (1) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 13063
   $11 = ($$04 * 10 | 0) + -48 + (HEAP8[$7 >> 0] | 0) | 0; //@line 13067
   $12 = $7 + 1 | 0; //@line 13068
   HEAP32[$0 >> 2] = $12; //@line 13069
   if (!(_isdigit(HEAP8[$12 >> 0] | 0) | 0)) {
    $$0$lcssa = $11; //@line 13075
    break;
   } else {
    $$04 = $11; //@line 13078
   }
  }
 }
 return $$0$lcssa | 0; //@line 13082
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7301
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 7303
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 7309
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7310
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 7311
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 232; //@line 7314
  sp = STACKTOP; //@line 7315
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7318
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_196($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 11339
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 11346
 _mbed_assert_internal(13588, 12372, 836); //@line 11347
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 162; //@line 11350
  sp = STACKTOP; //@line 11351
  return;
 }
 ___async_unwind = 0; //@line 11354
 HEAP32[$ReallocAsyncCtx9 >> 2] = 162; //@line 11355
 sp = STACKTOP; //@line 11356
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_237($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 14876
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(4) | 0; //@line 14883
 _mbed_assert_internal(13588, 12372, 712); //@line 14884
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 174; //@line 14887
  sp = STACKTOP; //@line 14888
  return;
 }
 ___async_unwind = 0; //@line 14891
 HEAP32[$ReallocAsyncCtx10 >> 2] = 174; //@line 14892
 sp = STACKTOP; //@line 14893
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_289($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 19464
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(4) | 0; //@line 19471
 _mbed_assert_internal(13588, 12372, 816); //@line 19472
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 158; //@line 19475
  sp = STACKTOP; //@line 19476
  return;
 }
 ___async_unwind = 0; //@line 19479
 HEAP32[$ReallocAsyncCtx10 >> 2] = 158; //@line 19480
 sp = STACKTOP; //@line 19481
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_287($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 19403
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(4) | 0; //@line 19410
 _mbed_assert_internal(13588, 12372, 792); //@line 19411
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 154; //@line 19414
  sp = STACKTOP; //@line 19415
  return;
 }
 ___async_unwind = 0; //@line 19418
 HEAP32[$ReallocAsyncCtx11 >> 2] = 154; //@line 19419
 sp = STACKTOP; //@line 19420
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_285($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 19342
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(4) | 0; //@line 19349
 _mbed_assert_internal(13588, 12372, 781); //@line 19350
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 150; //@line 19353
  sp = STACKTOP; //@line 19354
  return;
 }
 ___async_unwind = 0; //@line 19357
 HEAP32[$ReallocAsyncCtx12 >> 2] = 150; //@line 19358
 sp = STACKTOP; //@line 19359
 return;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0; //@line 33309
 $y_sroa_0_0_extract_trunc = $b$0; //@line 33310
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0; //@line 33311
 $1$1 = tempRet0; //@line 33312
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0; //@line 33314
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_239($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 14944
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 14951
 _mbed_assert_internal(13588, 12372, 734); //@line 14952
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 178; //@line 14955
  sp = STACKTOP; //@line 14956
  return;
 }
 ___async_unwind = 0; //@line 14959
 HEAP32[$ReallocAsyncCtx9 >> 2] = 178; //@line 14960
 sp = STACKTOP; //@line 14961
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7227
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 7229
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 7235
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7236
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 7237
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 229; //@line 7240
  sp = STACKTOP; //@line 7241
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7244
 return;
}
function _mbedtls_cipher_update__async_cb_7($0) {
 $0 = $0 | 0;
 var $$1 = 0, $2 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17806
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17808
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17810
 if ($AsyncRetVal | 0) {
  $$1 = $AsyncRetVal; //@line 17813
  $9 = ___async_retval; //@line 17814
  HEAP32[$9 >> 2] = $$1; //@line 17815
  return;
 }
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $4; //@line 17820
 $$1 = 0; //@line 17821
 $9 = ___async_retval; //@line 17822
 HEAP32[$9 >> 2] = $$1; //@line 17823
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_228($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 13993
 if (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 14001
 _mbed_assert_internal(14328, 14346, 57); //@line 14002
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 566; //@line 14005
  sp = STACKTOP; //@line 14006
  return;
 }
 ___async_unwind = 0; //@line 14009
 HEAP32[$ReallocAsyncCtx6 >> 2] = 566; //@line 14010
 sp = STACKTOP; //@line 14011
 return;
}
function __ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30337
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 30344
 _mbed_assert_internal(13588, 13597, 185); //@line 30345
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 375; //@line 30348
  sp = STACKTOP; //@line 30349
  return;
 }
 ___async_unwind = 0; //@line 30352
 HEAP32[$ReallocAsyncCtx2 >> 2] = 375; //@line 30353
 sp = STACKTOP; //@line 30354
 return;
}
function __ZN12LoRaWANStack17get_lorawan_stackEv() {
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7841
 do {
  if (!(HEAP8[18840] | 0)) {
   if (___cxa_guard_acquire(18840) | 0) {
    $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7849
    __ZN12LoRaWANStackC2Ev(20168); //@line 7850
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 240; //@line 7853
     sp = STACKTOP; //@line 7854
     return 0; //@line 7855
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 7857
     break;
    }
   }
  }
 } while (0);
 return 20168; //@line 7863
}
function _mbedtls_cipher_info_from_type($0) {
 $0 = $0 | 0;
 var $$05 = 0, $$06 = 0, $1 = 0, $9 = 0;
 $1 = HEAP32[2390] | 0; //@line 2567
 L1 : do {
  if (!$1) {
   $$05 = 0; //@line 2571
  } else {
   $$06 = 9556; //@line 2573
   $9 = $1; //@line 2573
   while (1) {
    if ((HEAP32[$$06 >> 2] | 0) == ($0 | 0)) {
     $$05 = $9; //@line 2578
     break L1;
    }
    $9 = HEAP32[$$06 + 12 >> 2] | 0; //@line 2583
    if (!$9) {
     $$05 = 0; //@line 2586
     break;
    } else {
     $$06 = $$06 + 8 | 0; //@line 2589
    }
   }
  }
 } while (0);
 return $$05 | 0; //@line 2594
}
function __ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22913
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 22920
 _mbed_assert_internal(13588, 13597, 192); //@line 22921
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 414; //@line 22924
  sp = STACKTOP; //@line 22925
  return;
 }
 ___async_unwind = 0; //@line 22928
 HEAP32[$ReallocAsyncCtx2 >> 2] = 414; //@line 22929
 sp = STACKTOP; //@line 22930
 return;
}
function __ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 796
 STACKTOP = STACKTOP + 16 | 0; //@line 797
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 797
 $vararg_buffer = sp; //@line 798
 HEAP8[$0 + 689 >> 0] = $1; //@line 801
 HEAP32[$vararg_buffer >> 2] = $1; //@line 803
 HEAP32[$vararg_buffer + 4 >> 2] = $2 & 255; //@line 805
 _mbed_tracef(16, 10944, 11154, $vararg_buffer); //@line 806
 STACKTOP = sp; //@line 807
 return;
}
function __ZN7LoRaPHY25accept_tx_param_setup_reqEP20tx_param_setup_req_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $17 = 0, $3 = 0, $6 = 0;
 $3 = HEAP8[$0 + 13 >> 0] | 0; //@line 22590
 if (!($3 << 24 >> 24)) {
  $17 = $3 << 24 >> 24 != 0; //@line 22593
  return $17 | 0; //@line 22594
 }
 $6 = $0 + 132 | 0; //@line 22597
 $10 = HEAP8[$6 >> 0] & -2 | HEAP8[$1 >> 0] & 1; //@line 22601
 HEAP8[$6 >> 0] = $10; //@line 22602
 HEAP8[$6 >> 0] = HEAP8[$1 + 1 >> 0] << 1 & 2 | $10 & -3; //@line 22609
 $17 = $3 << 24 >> 24 != 0; //@line 22610
 return $17 | 0; //@line 22611
}
function runPostSets() {}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535; //@line 33294
 $2 = $b & 65535; //@line 33295
 $3 = Math_imul($2, $1) | 0; //@line 33296
 $6 = $a >>> 16; //@line 33297
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0; //@line 33298
 $11 = $b >>> 16; //@line 33299
 $12 = Math_imul($11, $1) | 0; //@line 33300
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0; //@line 33301
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9601
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 9603
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 9609
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9610
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 9611
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 292; //@line 9614
  sp = STACKTOP; //@line 9615
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9618
 return;
}
function __ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19230
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 19237
 _mbed_assert_internal(13588, 13597, 215); //@line 19238
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 425; //@line 19241
  sp = STACKTOP; //@line 19242
  return;
 }
 ___async_unwind = 0; //@line 19245
 HEAP32[$ReallocAsyncCtx2 >> 2] = 425; //@line 19246
 sp = STACKTOP; //@line 19247
 return;
}
function __ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20721
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 20728
 _mbed_assert_internal(13588, 13597, 207); //@line 20729
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 419; //@line 20732
  sp = STACKTOP; //@line 20733
  return;
 }
 ___async_unwind = 0; //@line 20736
 HEAP32[$ReallocAsyncCtx2 >> 2] = 419; //@line 20737
 sp = STACKTOP; //@line 20738
 return;
}
function __ZN7LoRaPHY16set_last_tx_doneEP24set_band_txdone_params_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $16 = 0, $4 = 0, $9 = 0;
 if (!$1) {
  return;
 }
 $4 = HEAP32[$0 + 72 >> 2] | 0; //@line 21277
 $9 = (HEAP8[$1 + 1 >> 0] | 0) == 0; //@line 21282
 $11 = HEAP32[$1 + 4 >> 2] | 0; //@line 21284
 $16 = HEAPU8[(HEAP32[$0 + 112 >> 2] | 0) + ((HEAPU8[$1 >> 0] | 0) * 12 | 0) + 9 >> 0] | 0; //@line 21289
 HEAP32[$4 + ($16 * 24 | 0) + 8 >> 2] = $11; //@line 21291
 if (!$9) {
  return;
 }
 HEAP32[$4 + ($16 * 24 | 0) + 4 >> 2] = $11; //@line 21296
 return;
}
function __ZN7LoRaMac18handle_ack_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22845
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 22852
 _mbed_assert_internal(13588, 13597, 199); //@line 22853
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 416; //@line 22856
  sp = STACKTOP; //@line 22857
  return;
 }
 ___async_unwind = 0; //@line 22860
 HEAP32[$ReallocAsyncCtx2 >> 2] = 416; //@line 22861
 sp = STACKTOP; //@line 22862
 return;
}
function __ZN7LoRaMac17handle_tx_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30308
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 30315
 _mbed_assert_internal(13588, 13597, 162); //@line 30316
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 369; //@line 30319
  sp = STACKTOP; //@line 30320
  return;
 }
 ___async_unwind = 0; //@line 30323
 HEAP32[$ReallocAsyncCtx2 >> 2] = 369; //@line 30324
 sp = STACKTOP; //@line 30325
 return;
}
function __ZN7LoRaMac17handle_rx_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 32835
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 32842
 _mbed_assert_internal(13588, 13597, 155); //@line 32843
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 362; //@line 32846
  sp = STACKTOP; //@line 32847
  return;
 }
 ___async_unwind = 0; //@line 32850
 HEAP32[$ReallocAsyncCtx2 >> 2] = 362; //@line 32851
 sp = STACKTOP; //@line 32852
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_400($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 32529
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32531
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32533
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 32534
 __ZN4mbed10TimerEventD2Ev($2); //@line 32535
 if (!___async) {
  ___async_unwind = 0; //@line 32538
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 75; //@line 32540
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $4; //@line 32542
 sp = STACKTOP; //@line 32543
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_399($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 32509
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32511
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32513
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 32514
 __ZN4mbed10TimerEventD2Ev($4); //@line 32515
 if (!___async) {
  ___async_unwind = 0; //@line 32518
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 73; //@line 32520
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 32522
 sp = STACKTOP; //@line 32523
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_398($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 32489
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32491
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32493
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 32494
 __ZN4mbed10TimerEventD2Ev($4); //@line 32495
 if (!___async) {
  ___async_unwind = 0; //@line 32498
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 71; //@line 32500
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 32502
 sp = STACKTOP; //@line 32503
 return;
}
function __ZN16LoRaWANInterface7connectERK15lorawan_connect($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$07 = 0;
 switch (HEAP8[$1 >> 0] | 0) {
 case 0:
  {
   $$07 = __ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 4465
   break;
  }
 case 1:
  {
   $$07 = __ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 4471
   break;
  }
 default:
  {
   $$07 = -1003; //@line 4475
  }
 }
 return $$07 | 0; //@line 4478
}
function __ZN7LoRaMac15handle_rx_errorEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13181
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 13188
 _mbed_assert_internal(13588, 13597, 148); //@line 13189
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 355; //@line 13192
  sp = STACKTOP; //@line 13193
  return;
 }
 ___async_unwind = 0; //@line 13196
 HEAP32[$ReallocAsyncCtx2 >> 2] = 355; //@line 13197
 sp = STACKTOP; //@line 13198
 return;
}
function __ZN7LoRaMac14handle_tx_doneEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19298
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 19305
 _mbed_assert_internal(13588, 13597, 134); //@line 19306
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 277; //@line 19309
  sp = STACKTOP; //@line 19310
  return;
 }
 ___async_unwind = 0; //@line 19313
 HEAP32[$ReallocAsyncCtx2 >> 2] = 277; //@line 19314
 sp = STACKTOP; //@line 19315
 return;
}
function _calloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $3 = 0, $8 = 0;
 if (!$0) {
  $$0 = 0; //@line 10649
 } else {
  $3 = Math_imul($1, $0) | 0; //@line 10651
  if (($1 | $0) >>> 0 > 65535) {
   $$0 = (($3 >>> 0) / ($0 >>> 0) | 0 | 0) == ($1 | 0) ? $3 : -1; //@line 10658
  } else {
   $$0 = $3; //@line 10660
  }
 }
 $8 = _malloc($$0) | 0; //@line 10663
 if (!$8) {
  return $8 | 0; //@line 10666
 }
 if (!(HEAP32[$8 + -4 >> 2] & 3)) {
  return $8 | 0; //@line 10673
 }
 _memset($8 | 0, 0, $$0 | 0) | 0; //@line 10675
 return $8 | 0; //@line 10676
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 32469
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32471
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32473
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 32474
 __ZN4mbed10TimerEventD2Ev($4); //@line 32475
 if (!___async) {
  ___async_unwind = 0; //@line 32478
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 69; //@line 32480
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $2; //@line 32482
 sp = STACKTOP; //@line 32483
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_406($0) {
 $0 = $0 | 0;
 var $3 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 32739
 $3 = (HEAP32[$0 + 4 >> 2] | 0) + 52 | 0; //@line 32742
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 32743
 __ZN4mbed11InterruptInD2Ev($3); //@line 32744
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 81; //@line 32747
  sp = STACKTOP; //@line 32748
  return;
 }
 ___async_unwind = 0; //@line 32751
 HEAP32[$ReallocAsyncCtx9 >> 2] = 81; //@line 32752
 sp = STACKTOP; //@line 32753
 return;
}
function _ticker_set_handler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5559
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 5560
 _initialize($0); //@line 5561
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 596; //@line 5564
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5566
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 5568
  sp = STACKTOP; //@line 5569
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5572
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = $1; //@line 5575
  return;
 }
}
function _mbed_die__async_cb_99($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 24214
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24216
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 24218
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(8) | 0; //@line 24219
 _wait_ms(150); //@line 24220
 if (!___async) {
  ___async_unwind = 0; //@line 24223
 }
 HEAP32[$ReallocAsyncCtx15 >> 2] = 616; //@line 24225
 HEAP32[$ReallocAsyncCtx15 + 4 >> 2] = $2; //@line 24227
 sp = STACKTOP; //@line 24228
 return;
}
function _mbed_die__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 23844
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23846
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 23848
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(8) | 0; //@line 23849
 _wait_ms(150); //@line 23850
 if (!___async) {
  ___async_unwind = 0; //@line 23853
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 615; //@line 23855
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $2; //@line 23857
 sp = STACKTOP; //@line 23858
 return;
}
function ___fflush_unlocked__async_cb_166($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32282
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32284
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32286
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32288
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 16 >> 2] = 0; //@line 32290
 HEAP32[$4 >> 2] = 0; //@line 32291
 HEAP32[$6 >> 2] = 0; //@line 32292
 HEAP32[$8 >> 2] = 0; //@line 32293
 HEAP32[$10 >> 2] = 0; //@line 32294
 HEAP32[___async_retval >> 2] = 0; //@line 32296
 return;
}
function __ZN12LoRaWANStack8shutdownEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8739
 HEAP32[$0 + 1876 >> 2] = 7; //@line 8741
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8742
 $2 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 8743
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 260; //@line 8746
  sp = STACKTOP; //@line 8747
  return 0; //@line 8748
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8750
  return $2 | 0; //@line 8751
 }
 return 0; //@line 8753
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_263($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16718
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16720
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16724
 HEAP8[$2 + 688 >> 0] = 2; //@line 16728
 HEAP32[$4 >> 2] = 3; //@line 16729
 _mbed_tracef(16, 10944, 11001, $4); //@line 16730
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 16731
 HEAP32[$8 >> 2] = 3; //@line 16732
 _mbed_tracef(16, 10944, 11030, $8); //@line 16733
 return;
}
function __ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 117
 if (HEAP32[$0 + 8 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 126
 _mbed_assert_internal(13588, 13597, 141); //@line 127
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 301; //@line 130
  sp = STACKTOP; //@line 131
  return;
 }
 ___async_unwind = 0; //@line 134
 HEAP32[$ReallocAsyncCtx3 >> 2] = 301; //@line 135
 sp = STACKTOP; //@line 136
 return;
}
function __ZN4mbed7TimeoutD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 27858
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27860
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 27861
 __ZN4mbed10TimerEventD2Ev($2); //@line 27862
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 107; //@line 27865
  sp = STACKTOP; //@line 27866
  return;
 }
 ___async_unwind = 0; //@line 27869
 HEAP32[$ReallocAsyncCtx2 >> 2] = 107; //@line 27870
 sp = STACKTOP; //@line 27871
 return;
}
function __ZN4mbed6TickerD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 32925
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32927
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 32928
 __ZN4mbed10TimerEventD2Ev($2); //@line 32929
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 639; //@line 32932
  sp = STACKTOP; //@line 32933
  return;
 }
 ___async_unwind = 0; //@line 32936
 HEAP32[$ReallocAsyncCtx2 >> 2] = 639; //@line 32937
 sp = STACKTOP; //@line 32938
 return;
}
function __ZN4mbed6Ticker7handlerEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7327
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 7329
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 >> 2] | 0; //@line 7335
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7336
 FUNCTION_TABLE_vi[$5 & 1023]($0 + 40 | 0); //@line 7337
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 642; //@line 7340
  sp = STACKTOP; //@line 7341
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7344
 return;
}
function _mbed_vtracef__async_cb_377($0) {
 $0 = $0 | 0;
 var $1 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 31423
 $1 = HEAP32[191] | 0; //@line 31424
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 31425
 FUNCTION_TABLE_vi[$1 & 1023](12184); //@line 31426
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 128; //@line 31429
  sp = STACKTOP; //@line 31430
  return;
 }
 ___async_unwind = 0; //@line 31433
 HEAP32[$ReallocAsyncCtx3 >> 2] = 128; //@line 31434
 sp = STACKTOP; //@line 31435
 return;
}
function __ZN7LoRaPHY17copy_channel_maskEPtS0_h($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $indvars$iv = 0, $wide$trip$count = 0;
 if (!(($1 | 0) != 0 & ($2 | 0) != 0 & $3 << 24 >> 24 != 0)) {
  return;
 }
 $wide$trip$count = $3 & 255; //@line 23882
 $indvars$iv = 0; //@line 23883
 do {
  HEAP16[$1 + ($indvars$iv << 1) >> 1] = HEAP16[$2 + ($indvars$iv << 1) >> 1] | 0; //@line 23888
  $indvars$iv = $indvars$iv + 1 | 0; //@line 23889
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 return;
}
function dynCall_viiiiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 a11 = a11 | 0;
 a12 = a12 | 0;
 a13 = a13 | 0;
 a14 = a14 | 0;
 a15 = a15 | 0;
 FUNCTION_TABLE_viiiiiiiiiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0, a11 | 0, a12 | 0, a13 | 0, a14 | 0, a15 | 0); //@line 33915
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_410($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 32816
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32818
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 32820
 __ZN4mbed11InterruptInD2Ev($2 + 340 | 0); //@line 32821
 if (!___async) {
  ___async_unwind = 0; //@line 32824
 }
 HEAP32[$ReallocAsyncCtx13 >> 2] = 77; //@line 32826
 HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $2; //@line 32828
 sp = STACKTOP; //@line 32829
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_409($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 32797
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32799
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 32801
 __ZN4mbed11InterruptInD2Ev($2 + 268 | 0); //@line 32802
 if (!___async) {
  ___async_unwind = 0; //@line 32805
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 78; //@line 32807
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 32809
 sp = STACKTOP; //@line 32810
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_408($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 32778
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32780
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 32782
 __ZN4mbed11InterruptInD2Ev($2 + 196 | 0); //@line 32783
 if (!___async) {
  ___async_unwind = 0; //@line 32786
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 79; //@line 32788
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 32790
 sp = STACKTOP; //@line 32791
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_407($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 32759
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32761
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 32763
 __ZN4mbed11InterruptInD2Ev($2 + 124 | 0); //@line 32764
 if (!___async) {
  ___async_unwind = 0; //@line 32767
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 80; //@line 32769
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $2; //@line 32771
 sp = STACKTOP; //@line 32772
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_401($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 32549
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32551
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 32553
 __ZN4mbed11InterruptInD2Ev($2 + 412 | 0); //@line 32554
 if (!___async) {
  ___async_unwind = 0; //@line 32557
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 76; //@line 32559
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $2; //@line 32561
 sp = STACKTOP; //@line 32562
 return;
}
function _gcm_aes_setkey_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3466
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3467
 $3 = _mbedtls_gcm_setkey($0, 2, $1, $2) | 0; //@line 3468
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 582; //@line 3471
  sp = STACKTOP; //@line 3472
  return 0; //@line 3473
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3475
  return $3 | 0; //@line 3476
 }
 return 0; //@line 3478
}
function _ccm_aes_setkey_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3418
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3419
 $3 = _mbedtls_ccm_setkey($0, 2, $1, $2) | 0; //@line 3420
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 580; //@line 3423
  sp = STACKTOP; //@line 3424
  return 0; //@line 3425
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3427
  return $3 | 0; //@line 3428
 }
 return 0; //@line 3430
}
function __ZN4mbed11InterruptInC2E7PinName($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, dest = 0, stop = 0;
 HEAP32[$0 >> 2] = 668; //@line 2504
 $2 = $0 + 4 | 0; //@line 2505
 $3 = $0 + 28 | 0; //@line 2506
 $4 = $0; //@line 2507
 dest = $2; //@line 2508
 stop = dest + 68 | 0; //@line 2508
 do {
  HEAP32[dest >> 2] = 0; //@line 2508
  dest = dest + 4 | 0; //@line 2508
 } while ((dest | 0) < (stop | 0));
 _gpio_irq_init($3, $1, 18, $4) | 0; //@line 2509
 _gpio_init_in($2, $1); //@line 2510
 return;
}
function _serial_putc__async_cb_31($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19279
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19281
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 19282
 _fflush($2) | 0; //@line 19283
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 637; //@line 19286
  sp = STACKTOP; //@line 19287
  return;
 }
 ___async_unwind = 0; //@line 19290
 HEAP32[$ReallocAsyncCtx >> 2] = 637; //@line 19291
 sp = STACKTOP; //@line 19292
 return;
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb_222($0) {
 $0 = $0 | 0;
 var $15 = 0, $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13497
 HEAP32[$4 + 364 >> 2] = 2; //@line 13499
 if (HEAP8[$4 + 373 >> 0] | 0) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 6; //@line 13507
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 6; //@line 13512
 $15 = $4 + 944 | 0; //@line 13513
 HEAP8[$15 >> 0] = HEAP8[$15 >> 0] | 32; //@line 13516
 return;
}
function __ZN4mbed10TimerEventD2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2860
 HEAP32[$0 >> 2] = 704; //@line 2861
 $2 = HEAP32[$0 + 24 >> 2] | 0; //@line 2863
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2865
 _ticker_remove_event($2, $0 + 8 | 0); //@line 2866
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 115; //@line 2869
  sp = STACKTOP; //@line 2870
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2873
  return;
 }
}
function __ZN4mbed7TimeoutD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 29544
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29546
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 29547
 __ZN4mbed10TimerEventD2Ev($2); //@line 29548
 if (!___async) {
  ___async_unwind = 0; //@line 29551
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 109; //@line 29553
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 29555
 sp = STACKTOP; //@line 29556
 return;
}
function __ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb_101($0) {
 $0 = $0 | 0;
 var $$011 = 0;
 switch (HEAP32[___async_retval >> 2] | 0) {
 case 0:
  {
   $$011 = 3; //@line 24386
   break;
  }
 case -1004:
  {
   $$011 = 2; //@line 24390
   break;
  }
 case -1005:
  {
   $$011 = 1; //@line 24394
   break;
  }
 case -1006:
  {
   $$011 = 0; //@line 24398
   break;
  }
 default:
  {
   $$011 = 0; //@line 24402
  }
 }
 HEAP8[___async_retval >> 0] = $$011; //@line 24406
 return;
}
function __ZN4mbed6TickerD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20834
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20836
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 20837
 __ZN4mbed10TimerEventD2Ev($2); //@line 20838
 if (!___async) {
  ___async_unwind = 0; //@line 20841
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 641; //@line 20843
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 20845
 sp = STACKTOP; //@line 20846
 return;
}
function dynCall_viiiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 a11 = a11 | 0;
 a12 = a12 | 0;
 a13 = a13 | 0;
 a14 = a14 | 0;
 FUNCTION_TABLE_viiiiiiiiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0, a11 | 0, a12 | 0, a13 | 0, a14 | 0); //@line 33908
}
function _emscripten_async_resume() {
 ___async = 0; //@line 33627
 ___async_unwind = 1; //@line 33628
 while (1) {
  if (!___async_cur_frame) return;
  dynCall_vi(HEAP32[___async_cur_frame + 8 >> 2] | 0, ___async_cur_frame + 8 | 0); //@line 33634
  if (___async) return;
  if (!___async_unwind) {
   ___async_unwind = 1; //@line 33638
   continue;
  }
  stackRestore(HEAP32[___async_cur_frame + 4 >> 2] | 0); //@line 33642
  ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 33644
 }
}
function _rand() {
 var $0 = 0, $10 = 0, $14 = 0, $6 = 0, $8 = 0, $9 = 0;
 $0 = 20160; //@line 15528
 $6 = ___muldi3(HEAP32[$0 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0, 1284865837, 1481765933) | 0; //@line 15534
 $8 = _i64Add($6 | 0, tempRet0 | 0, 1, 0) | 0; //@line 15536
 $9 = tempRet0; //@line 15537
 $10 = 20160; //@line 15538
 HEAP32[$10 >> 2] = $8; //@line 15540
 HEAP32[$10 + 4 >> 2] = $9; //@line 15543
 $14 = _bitshift64Lshr($8 | 0, $9 | 0, 33) | 0; //@line 15544
 return $14 | 0; //@line 15546
}
function ___stdio_close($0) {
 $0 = $0 | 0;
 var $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 10681
 STACKTOP = STACKTOP + 16 | 0; //@line 10682
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10682
 $vararg_buffer = sp; //@line 10683
 HEAP32[$vararg_buffer >> 2] = _dummy(HEAP32[$0 + 60 >> 2] | 0) | 0; //@line 10687
 $5 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0; //@line 10689
 STACKTOP = sp; //@line 10690
 return $5 | 0; //@line 10690
}
function __ZN16SX1276_LoRaRadioD0Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1504
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1505
 __ZN16SX1276_LoRaRadioD2Ev($0); //@line 1506
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 82; //@line 1509
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1511
  sp = STACKTOP; //@line 1512
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1515
  __ZdlPv($0); //@line 1516
  return;
 }
}
function __ZN4mbed10TimerEvent3irqEj($0) {
 $0 = $0 | 0;
 var $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2909
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 2914
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2915
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 2916
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 117; //@line 2919
  sp = STACKTOP; //@line 2920
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2923
  return;
 }
}
function __ZN7LoRaPHY18verify_rx_datarateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink5 = 0, $$sink6 = 0, $7 = 0;
 if (!(HEAP8[$0 + 132 >> 0] & 2)) {
  $7 = HEAP8[$0 + 28 >> 0] | 0; //@line 24136
  $$sink5 = $7; //@line 24137
  $$sink6 = $7; //@line 24137
 } else {
  $$sink5 = HEAP8[$0 + 28 >> 0] | 0; //@line 24143
  $$sink6 = HEAP8[$0 + 35 >> 0] | 0; //@line 24143
 }
 return ($$sink6 << 24 >> 24 <= $1 << 24 >> 24 ? $$sink5 << 24 >> 24 >= $1 << 24 >> 24 : 0) | 0; //@line 24148
}
function __ZN4mbed5TimerC2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $16 = 0, $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21499
 $6 = ___async_retval; //@line 21501
 $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 21506
 $12 = HEAP32[$0 + 4 >> 2] | 0; //@line 21507
 HEAP32[$12 >> 2] = HEAP32[$6 >> 2]; //@line 21509
 HEAP32[$12 + 4 >> 2] = $11; //@line 21512
 $16 = $4; //@line 21513
 HEAP32[$16 >> 2] = 0; //@line 21515
 HEAP32[$16 + 4 >> 2] = 0; //@line 21518
 return;
}
function __ZN16SX1276_LoRaRadio11set_channelEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 751
 STACKTOP = STACKTOP + 16 | 0; //@line 752
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 752
 $vararg_buffer = sp; //@line 753
 HEAP32[$vararg_buffer >> 2] = $1; //@line 754
 _mbed_tracef(16, 10944, 11238, $vararg_buffer); //@line 755
 HEAP32[$0 + 692 >> 2] = $1; //@line 757
 STACKTOP = sp; //@line 758
 return;
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $13 = 0, $2 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15885
 if (HEAP8[$2 + 373 >> 0] | 0) {
  HEAP8[$2 + 377 >> 0] = 1; //@line 15891
  $7 = $2 + 968 | 0; //@line 15892
  HEAP32[$7 >> 2] = HEAP32[$7 >> 2] & -5; //@line 15895
 }
 if ((HEAP32[$2 + 360 >> 2] | 0) != 2) {
  return;
 }
 $13 = $2 + 944 | 0; //@line 15903
 HEAP8[$13 >> 0] = HEAP8[$13 >> 0] | 32; //@line 15906
 return;
}
function _handle_interrupt_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7110
 $2 = HEAP32[5702] | 0; //@line 7111
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7112
 FUNCTION_TABLE_vii[$2 & 31]($0, $1); //@line 7113
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 635; //@line 7116
  sp = STACKTOP; //@line 7117
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7120
  return;
 }
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_390($0) {
 $0 = $0 | 0;
 var $12 = 0, $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32244
 HEAP32[$4 + 364 >> 2] = 2; //@line 32246
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 2; //@line 32250
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 2; //@line 32254
 $12 = $4 + 944 | 0; //@line 32255
 HEAP8[$12 >> 0] = HEAP8[$12 >> 0] | 32; //@line 32258
 return;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP; //@line 33569
 STACKTOP = STACKTOP + 16 | 0; //@line 33570
 $rem = __stackBase__ | 0; //@line 33571
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0; //@line 33572
 STACKTOP = __stackBase__; //@line 33573
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0; //@line 33574
}
function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0; //@line 33339
 if ((ret | 0) < 8) return ret | 0; //@line 33340
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0; //@line 33341
 if ((ret | 0) < 8) return ret + 8 | 0; //@line 33342
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0; //@line 33343
 if ((ret | 0) < 8) return ret + 16 | 0; //@line 33344
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0; //@line 33345
}
function _gcm_ctx_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3493
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3494
 _mbedtls_gcm_free($0); //@line 3495
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 583; //@line 3498
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3500
  sp = STACKTOP; //@line 3501
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3504
  _free($0); //@line 3505
  return;
 }
}
function _ccm_ctx_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3445
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3446
 _mbedtls_ccm_free($0); //@line 3447
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 581; //@line 3450
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3452
  sp = STACKTOP; //@line 3453
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3456
  _free($0); //@line 3457
  return;
 }
}
function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP; //@line 15831
 STACKTOP = STACKTOP + 16 | 0; //@line 15832
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15832
 if (!(_pthread_once(23732, 7) | 0)) {
  $3 = _pthread_getspecific(HEAP32[5934] | 0) | 0; //@line 15838
  STACKTOP = sp; //@line 15839
  return $3 | 0; //@line 15839
 } else {
  _abort_message(18536, sp); //@line 15841
 }
 return 0; //@line 15844
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19275
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19277
 $6 = $2 + 1928 | 0; //@line 19280
 HEAP32[$6 >> 2] = HEAP32[___async_retval >> 2]; //@line 19281
 __ZN7LoRaPHY18set_radio_instanceER9LoRaRadio($2 + 1336 | 0, $4); //@line 19283
 HEAP32[___async_retval >> 2] = HEAP32[$6 >> 2]; //@line 19286
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb($0) {
 $0 = $0 | 0;
 var $14 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19366
 HEAP32[$2 + 980 >> 2] = HEAP32[$0 + 8 >> 2]; //@line 19372
 if (HEAP8[$2 + 373 >> 0] | 0) {
  return;
 }
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 19382
 $14 = $2 + 380 | 0; //@line 19383
 HEAP8[$14 >> 0] = (HEAP8[$14 >> 0] | 0) + 1 << 24 >> 24; //@line 19386
 return;
}
function __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = -1003; //@line 4651
 } else {
  if (!(HEAP32[$1 + 12 >> 2] | 0)) {
   $$0 = -1003; //@line 4657
  } else {
   __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1); //@line 4660
   $$0 = 0; //@line 4661
  }
 }
 return $$0 | 0; //@line 4664
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 15999
 }
 return;
}
function __ZN16SX1276_LoRaRadio15timeout_irq_isrEv($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1636
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1637
 __ZN16SX1276_LoRaRadio18handle_timeout_irqEv($0); //@line 1638
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 84; //@line 1641
  sp = STACKTOP; //@line 1642
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1645
  return;
 }
}
function __ZL25default_terminate_handlerv__async_cb_190($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10903
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10905
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10907
 HEAP32[$2 >> 2] = 18397; //@line 10908
 HEAP32[$2 + 4 >> 2] = $4; //@line 10910
 HEAP32[$2 + 8 >> 2] = $AsyncRetVal; //@line 10912
 _abort_message(18261, $2); //@line 10913
}
function _sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = $0 + 20 | 0; //@line 15500
 $6 = HEAP32[$5 >> 2] | 0; //@line 15501
 $7 = (HEAP32[$0 + 16 >> 2] | 0) - $6 | 0; //@line 15502
 $$ = $7 >>> 0 > $2 >>> 0 ? $2 : $7; //@line 15504
 _memcpy($6 | 0, $1 | 0, $$ | 0) | 0; //@line 15506
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $$; //@line 15509
 return $2 | 0; //@line 15510
}
function __ZN6events10EventQueueC2EjPh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = $0 + 188 | 0; //@line 2933
 HEAP32[$3 >> 2] = 0; //@line 2934
 HEAP32[$3 + 4 >> 2] = 0; //@line 2934
 HEAP32[$3 + 8 >> 2] = 0; //@line 2934
 HEAP32[$3 + 12 >> 2] = 0; //@line 2934
 if (!$2) {
  _equeue_create($0, $1) | 0; //@line 2937
  return;
 } else {
  _equeue_create_inplace($0, $1, $2) | 0; //@line 2940
  return;
 }
}
function _abort_message__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 32864
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32866
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 32867
 _fputc(10, $2) | 0; //@line 32868
 if (!___async) {
  ___async_unwind = 0; //@line 32871
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 667; //@line 32873
 sp = STACKTOP; //@line 32874
 return;
}
function __ZN6events10EventQueue6cancelEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2955
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2956
 _equeue_cancel($0, $1); //@line 2957
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 118; //@line 2960
  sp = STACKTOP; //@line 2961
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2964
  return;
 }
}
function __ZN7LoRaPHYC2ER18LoRaWANTimeHandler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var dest = 0, stop = 0;
 HEAP32[$0 >> 2] = 944; //@line 23481
 HEAP32[$0 + 4 >> 2] = 0; //@line 23483
 HEAP32[$0 + 8 >> 2] = $1; //@line 23485
 dest = $0 + 12 | 0; //@line 23487
 stop = dest + 124 | 0; //@line 23487
 do {
  HEAP32[dest >> 2] = 0; //@line 23487
  dest = dest + 4 | 0; //@line 23487
 } while ((dest | 0) < (stop | 0));
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $9 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32172
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 2; //@line 32176
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 2; //@line 32180
 $9 = $2 + 944 | 0; //@line 32181
 HEAP8[$9 >> 0] = HEAP8[$9 >> 0] | 32; //@line 32184
 return;
}
function _add_pkcs_padding($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$09 = 0, $3 = 0, $5 = 0, $7 = 0;
 $3 = $1 - $2 | 0; //@line 2967
 if (!$3) {
  return;
 }
 $5 = $3 & 255; //@line 2972
 $$09 = 0; //@line 2973
 $7 = 0; //@line 2973
 do {
  HEAP8[$0 + ($7 + $2) >> 0] = $5; //@line 2977
  $$09 = $$09 + 1 << 24 >> 24; //@line 2978
  $7 = $$09 & 255; //@line 2979
 } while ($3 >>> 0 > $7 >>> 0);
 return;
}
function __ZN4mbed5Timer5startEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $13 = 0, $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32278
 $6 = ___async_retval; //@line 32280
 $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 32285
 $13 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 32287
 HEAP32[$13 >> 2] = HEAP32[$6 >> 2]; //@line 32289
 HEAP32[$13 + 4 >> 2] = $11; //@line 32292
 HEAP32[$4 >> 2] = 1; //@line 32293
 return;
}
function _gpio_irq_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0;
 if (($1 | 0) == -1) {
  $$0 = -1; //@line 7133
  return $$0 | 0; //@line 7134
 }
 HEAP32[5702] = $2; //@line 7136
 HEAP32[$0 >> 2] = $1; //@line 7137
 HEAP32[$0 + 4 >> 2] = $1; //@line 7139
 _emscripten_asm_const_iii(12, $3 | 0, $1 | 0) | 0; //@line 7140
 $$0 = 0; //@line 7141
 return $$0 | 0; //@line 7142
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23523
 if ((HEAP32[$2 + 24 >> 2] | 0) == 1) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 + 16 >> 2]; //@line 23534
  $$0 = 1; //@line 23535
 } else {
  $$0 = 0; //@line 23537
 }
 HEAP8[___async_retval >> 0] = $$0 & 1; //@line 23541
 return;
}
function _vsnprintf__async_cb($0) {
 $0 = $0 | 0;
 var $13 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16758
 if (HEAP32[$0 + 4 >> 2] | 0) {
  $13 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 16761
  HEAP8[$13 + ((($13 | 0) == (HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 16766
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 16769
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 16593
 STACKTOP = STACKTOP + 16 | 0; //@line 16594
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16594
 _free($0); //@line 16596
 if (!(_pthread_setspecific(HEAP32[5934] | 0, 0) | 0)) {
  STACKTOP = sp; //@line 16601
  return;
 } else {
  _abort_message(18635, sp); //@line 16603
 }
}
function __ZN16LoRaWANInterface7receiveEhPhti($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0;
 if (($2 | 0) == 0 | $3 << 16 >> 16 == 0) {
  $$0 = -1003; //@line 4635
  return $$0 | 0; //@line 4636
 }
 $$0 = __ZN12LoRaWANStack9handle_rxEhPhth(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1, $2, $3, $4 & 255) | 0; //@line 4641
 return $$0 | 0; //@line 4642
}
function _serial_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $4 = 0, $9 = 0;
 HEAP32[$0 + 4 >> 2] = $2; //@line 7162
 HEAP32[$0 >> 2] = $1; //@line 7163
 HEAP32[5703] = 1; //@line 7164
 $4 = $0; //@line 7165
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 7170
 $10 = 22816; //@line 7171
 HEAP32[$10 >> 2] = HEAP32[$4 >> 2]; //@line 7173
 HEAP32[$10 + 4 >> 2] = $9; //@line 7176
 return;
}
function _main() {
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7482
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7483
 _puts(15799) | 0; //@line 7484
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 648; //@line 7487
  sp = STACKTOP; //@line 7488
  return 0; //@line 7489
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7491
  return -1;
 }
 return 0; //@line 7494
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 16075
 }
 return;
}
function __ZN11LoRaMacMcps18reset_confirmationEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 36 | 0; //@line 20262
 HEAP32[$1 >> 2] = 0; //@line 20263
 HEAP32[$1 + 4 >> 2] = 0; //@line 20263
 HEAP32[$1 + 8 >> 2] = 0; //@line 20263
 HEAP32[$1 + 12 >> 2] = 0; //@line 20263
 HEAP32[$1 + 16 >> 2] = 0; //@line 20263
 HEAP32[$1 + 20 >> 2] = 0; //@line 20263
 HEAP32[$0 + 40 >> 2] = 1; //@line 20265
 return;
}
function _mbed_trace_default_print($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3695
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3696
 _puts($0) | 0; //@line 3697
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 123; //@line 3700
  sp = STACKTOP; //@line 3701
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3704
  return;
 }
}
function _equeue_sema_create($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $4 = 0;
 $1 = _pthread_mutex_init($0 | 0, 0) | 0; //@line 3662
 if (!$1) {
  $4 = _pthread_cond_init($0 + 28 | 0, 0) | 0; //@line 3666
  if (!$4) {
   HEAP8[$0 + 76 >> 0] = 0; //@line 3670
   $$0 = 0; //@line 3671
  } else {
   $$0 = $4; //@line 3673
  }
 } else {
  $$0 = $1; //@line 3676
 }
 return $$0 | 0; //@line 3678
}
function _wait_ms($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7430
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7431
 _emscripten_sleep($0 | 0); //@line 7432
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 645; //@line 7435
  sp = STACKTOP; //@line 7436
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7439
  return;
 }
}
function _equeue_tick() {
 var $0 = 0, sp = 0;
 sp = STACKTOP; //@line 3625
 STACKTOP = STACKTOP + 16 | 0; //@line 3626
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 3626
 $0 = sp; //@line 3627
 _gettimeofday($0 | 0, 0) | 0; //@line 3628
 STACKTOP = sp; //@line 3635
 return ((HEAP32[$0 + 4 >> 2] | 0) / 1e3 | 0) + ((HEAP32[$0 >> 2] | 0) * 1e3 | 0) | 0; //@line 3635
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_102($0) {
 $0 = $0 | 0;
 var $11 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24558
 if (!$AsyncRetVal) {
  $11 = HEAPU16[HEAP32[$0 + 4 >> 2] >> 1] | 0; //@line 24563
 } else {
  $11 = $AsyncRetVal << 16 >> 16; //@line 24567
 }
 HEAP16[___async_retval >> 1] = $11; //@line 24571
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP; //@line 16578
 STACKTOP = STACKTOP + 16 | 0; //@line 16579
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16579
 if (!(_pthread_key_create(23736, 676) | 0)) {
  STACKTOP = sp; //@line 16584
  return;
 } else {
  _abort_message(18585, sp); //@line 16586
 }
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 if ((HEAP32[$1 + 4 >> 2] | 0) == ($2 | 0)) {
  $7 = $1 + 28 | 0; //@line 16139
  if ((HEAP32[$7 >> 2] | 0) != 1) {
   HEAP32[$7 >> 2] = $3; //@line 16143
  }
 }
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_20($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18537
 HEAP32[$4 + 988 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) | 0; //@line 18541
 HEAP32[___async_retval >> 2] = 0; //@line 18543
 return;
}
function _emscripten_alloc_async_context(len, sp) {
 len = len | 0;
 sp = sp | 0;
 var new_frame = 0;
 new_frame = stackAlloc(len + 8 | 0) | 0; //@line 33603
 HEAP32[new_frame + 4 >> 2] = sp; //@line 33605
 HEAP32[new_frame >> 2] = ___async_cur_frame; //@line 33607
 ___async_cur_frame = new_frame; //@line 33608
 return ___async_cur_frame + 8 | 0; //@line 33609
}
function _mbedtls_gcm_free__async_cb($0) {
 $0 = $0 | 0;
 var $$034$i = 0, $$05$i = 0;
 $$034$i = 400; //@line 20006
 $$05$i = HEAP32[$0 + 4 >> 2] | 0; //@line 20006
 while (1) {
  $$034$i = $$034$i + -1 | 0; //@line 20008
  HEAP8[$$05$i >> 0] = 0; //@line 20010
  if (!$$034$i) {
   break;
  } else {
   $$05$i = $$05$i + 1 | 0; //@line 20015
  }
 }
 return;
}
function __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $8 = 0;
 $1 = $0 + 2 | 0; //@line 18288
 $3 = HEAPU8[$1 >> 0] | 0; //@line 18290
 $8 = HEAPU8[$0 + 3 >> 0] | 0; //@line 18295
 _memcpy($0 + 4 + $3 | 0, $0 + 132 | 0, $8 | 0) | 0; //@line 18296
 HEAP8[$1 >> 0] = $3 + $8; //@line 18299
 return;
}
function b407(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 p11 = p11 | 0;
 p12 = p12 | 0;
 p13 = p13 | 0;
 p14 = p14 | 0;
 nullFunc_viiiiiiiiiiiiiii(0); //@line 334
}
function _mbedtls_aes_free($0) {
 $0 = $0 | 0;
 var $$02$i = 0, $$031$i = 0;
 if (!$0) {
  return;
 }
 $$02$i = $0; //@line 458
 $$031$i = 280; //@line 458
 while (1) {
  $$031$i = $$031$i + -1 | 0; //@line 460
  HEAP8[$$02$i >> 0] = 0; //@line 462
  if (!$$031$i) {
   break;
  } else {
   $$02$i = $$02$i + 1 | 0; //@line 467
  }
 }
 return;
}
function __ZN16LoRaWANInterface10initializeEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = -1003; //@line 4414
 } else {
  $$0 = __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 4418
 }
 return $$0 | 0; //@line 4420
}
function __ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 5817
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 5817
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 5817
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 7546
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 7546
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 7546
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 5767
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 5767
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 5767
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 7830
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 7830
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 7830
 return;
}
function __ZN7LoRaPHY15apply_DR_offsetEaa($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $5 = 0;
 $5 = ($1 & 255) - ($2 & 255) | 0; //@line 23202
 if (!($5 & 128)) {
  $$0 = $5 & 255; //@line 23207
  return $$0 | 0; //@line 23208
 }
 $$0 = HEAP8[$0 + 26 >> 0] | 0; //@line 23212
 return $$0 | 0; //@line 23213
}
function _gpio_init_inout($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 HEAP32[$0 >> 2] = $1; //@line 7096
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 7102
 _emscripten_asm_const_iiiiii(11, $0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0) | 0; //@line 7103
 return;
}
function ___cxa_can_catch__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP8[___async_retval >> 0] & 1; //@line 21308
 if ($AsyncRetVal) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 21312
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal & 1; //@line 21315
 return;
}
function b405(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 p11 = p11 | 0;
 p12 = p12 | 0;
 p13 = p13 | 0;
 nullFunc_viiiiiiiiiiiiii(0); //@line 331
}
function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits; //@line 33592
  return low << bits; //@line 33593
 }
 tempRet0 = low << bits - 32; //@line 33595
 return 0; //@line 33596
}
function __ZN11LoRaMacMlme18reset_confirmationEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 8 | 0; //@line 21103
 HEAP32[$1 >> 2] = 0; //@line 21104
 HEAP32[$1 + 4 >> 2] = 0; //@line 21104
 HEAP32[$1 + 8 >> 2] = 0; //@line 21104
 HEAP32[$1 + 12 >> 2] = 0; //@line 21104
 HEAP32[$0 + 12 >> 2] = 1; //@line 21106
 return;
}
function __ZN4mbed8CallbackIFvPhtsaEE13function_moveINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 12286
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 12286
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 12286
 return;
}
function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits; //@line 33581
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits; //@line 33582
 }
 tempRet0 = 0; //@line 33584
 return high >>> bits - 32 | 0; //@line 33585
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 1900
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 1900
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 1900
 return;
}
function __ZN16SX1276_LoRaRadio9start_cadEv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 1160
 STACKTOP = STACKTOP + 16 | 0; //@line 1161
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1161
 _mbed_tracef(16, 10944, 11078, sp); //@line 1163
 STACKTOP = sp; //@line 1164
 return;
}
function __ZN7LoRaPHY26get_next_lower_tx_datarateEa($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink = 0;
 $$sink = HEAP8[((HEAP8[$0 + 132 >> 0] & 1) == 0 ? $0 + 26 | 0 : $0 + 35 | 0) >> 0] | 0; //@line 24026
 return ($$sink << 24 >> 24 == $1 << 24 >> 24 ? $$sink : ($1 & 255) + 255 & 255) | 0; //@line 24032
}
function __ZN16SX1276_LoRaRadio11radio_resetEv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 76
 STACKTOP = STACKTOP + 16 | 0; //@line 77
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 77
 _mbed_tracef(16, 10944, 11710, sp); //@line 79
 STACKTOP = sp; //@line 80
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 9703
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 9703
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 9703
 return;
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_388($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32160
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 32162
 HEAP32[$6 + 16 >> 2] = 0; //@line 32164
 return;
}
function _fflush__async_cb_161($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31941
 if (!(HEAP8[$0 + 4 >> 0] & 1)) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 31943
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 31946
 return;
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_301($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19993
 HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + 364 >> 2] = 2; //@line 19995
 HEAP32[___async_retval >> 2] = $6; //@line 19997
 return;
}
function _mbedtls_aes_crypt_ecb($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (($1 | 0) == 1) {
  _mbedtls_internal_aes_encrypt($0, $2, $3) | 0; //@line 1929
 } else {
  _mbedtls_internal_aes_decrypt($0, $2, $3) | 0; //@line 1931
 }
 return 0; //@line 1933
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_310($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 20938
 __ZN4mbed5TimerD2Ev(HEAP32[$0 + 4 >> 2] | 0); //@line 20939
 HEAP8[___async_retval >> 0] = $6 & 1; //@line 20942
 return;
}
function __GLOBAL__sub_I_main_cpp__async_cb_255($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = 23108; //@line 15933
 stop = dest + 48 | 0; //@line 15933
 do {
  HEAP32[dest >> 2] = 0; //@line 15933
  dest = dest + 4 | 0; //@line 15933
 } while ((dest | 0) < (stop | 0));
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP; //@line 4
 STACKTOP = STACKTOP + size | 0; //@line 5
 STACKTOP = STACKTOP + 15 & -16; //@line 6
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0); //@line 7
 return ret | 0; //@line 9
}
function _equeue_post__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10844
 _equeue_sema_signal((HEAP32[$0 + 4 >> 2] | 0) + 48 | 0); //@line 10846
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 10848
 return;
}
function _puts__async_cb($0) {
 $0 = $0 | 0;
 var $$lobit = 0;
 $$lobit = HEAP32[___async_retval >> 2] >> 31; //@line 13288
 if (HEAP32[$0 + 4 >> 2] | 0) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 13291
 }
 HEAP32[___async_retval >> 2] = $$lobit; //@line 13294
 return;
}
function _gpio_init_out_ex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 HEAP32[$0 >> 2] = $1; //@line 7078
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 7084
 _emscripten_asm_const_iiii(10, $0 | 0, $1 | 0, $2 | 0) | 0; //@line 7085
 return;
}
function __ZN12LoRaWANStack23set_confirmed_msg_retryEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if ($1 << 24 >> 24 == -1) {
  $$0 = -1003; //@line 8003
 } else {
  HEAP8[$0 + 2284 >> 0] = $1; //@line 8006
  $$0 = 0; //@line 8007
 }
 return $$0 | 0; //@line 8009
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_359($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29134
 HEAP32[___async_retval >> 2] = ($AsyncRetVal | 0) == 0 ? -1016 : $AsyncRetVal; //@line 29138
 return;
}
function ___overflow__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP32[___async_retval >> 2] | 0) == 1) {
  $$0 = HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 27835
 } else {
  $$0 = -1; //@line 27837
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 27840
 return;
}
function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0; //@line 33852
}
function ___lctrans_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = 0; //@line 11388
 } else {
  $$0 = ___mo_lookup(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, $0) | 0; //@line 11394
 }
 return ($$0 | 0 ? $$0 : $0) | 0; //@line 11398
}
function __ZN7LoRaMac21send_frame_on_channelEh__async_cb_318($0) {
 $0 = $0 | 0;
 var $7 = 0;
 $7 = (HEAP32[$0 + 4 >> 2] | 0) + 968 | 0; //@line 21467
 HEAP32[$7 >> 2] = HEAP32[$7 >> 2] | 1; //@line 21470
 HEAP32[___async_retval >> 2] = 0; //@line 21472
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_108($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25270
 HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 1; //@line 25273
 HEAP32[___async_retval >> 2] = 0; //@line 25275
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_107($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25257
 HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 1; //@line 25260
 HEAP32[___async_retval >> 2] = 0; //@line 25262
 return;
}
function _mbedtls_cipher_init($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = $0; //@line 2652
 stop = dest + 68 | 0; //@line 2652
 do {
  HEAP32[dest >> 2] = 0; //@line 2652
  dest = dest + 4 | 0; //@line 2652
 } while ((dest | 0) < (stop | 0));
 return;
}
function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0); //@line 33901
}
function _emscripten_free_async_context(ctx) {
 ctx = ctx | 0;
 assert((___async_cur_frame + 8 | 0) == (ctx | 0) | 0); //@line 33615
 stackRestore(___async_cur_frame | 0); //@line 33616
 ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 33617
}
function _mbedtls_ccm_init($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = $0; //@line 2334
 stop = dest + 68 | 0; //@line 2334
 do {
  HEAP32[dest >> 2] = 0; //@line 2334
  dest = dest + 4 | 0; //@line 2334
 } while ((dest | 0) < (stop | 0));
 return;
}
function __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN10LoRaMacMib11get_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0 + 348 | 0, $1, $0 + 360 | 0) | 0; //@line 16812
}
function __Z15decrypt_payloadPKhtS0_jhjPh($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 return __Z15encrypt_payloadPKhtS0_jhjPh($0, $1, $2, $3, $4, $5, $6) | 0; //@line 20050
}
function _fputc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11659
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 11660
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 11662
 return;
}
function _putc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20815
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 20816
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 20818
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_365($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29488
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = 6; //@line 29493
 HEAP32[___async_retval >> 2] = $2; //@line 29495
 return;
}
function __ZN7LoRaPHY15get_ack_timeoutEv($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0;
 $5 = HEAPU16[$0 + 50 >> 1] | 0; //@line 24079
 $6 = HEAPU16[$0 + 52 >> 1] | 0; //@line 24080
 return $5 - $6 + ((_rand() | 0) % ($6 << 1 | 1 | 0) | 0) | 0; //@line 24087
}
function ___DOUBLE_BITS_677($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 14499
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 14499
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 14501
 return $1 | 0; //@line 14502
}
function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ($0 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $0; //@line 10847
  $$0 = -1; //@line 10848
 } else {
  $$0 = $0; //@line 10850
 }
 return $$0 | 0; //@line 10852
}
function _gpio_init_out($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 7062
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 7068
 _emscripten_asm_const_iii(9, $0 | 0, $1 | 0) | 0; //@line 7069
 return;
}
function _gpio_init_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 7047
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 7053
 _emscripten_asm_const_iii(8, $0 | 0, $1 | 0) | 0; //@line 7054
 return;
}
function _equeue_sema_signal($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 3684
 HEAP8[$0 + 76 >> 0] = 1; //@line 3686
 _pthread_cond_signal($0 + 28 | 0) | 0; //@line 3688
 _pthread_mutex_unlock($0 | 0) | 0; //@line 3689
 return;
}
function __ZN16LoRaWANInterface16get_channel_planER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 4556
}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0; //@line 33332
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0; //@line 33333
 return (tempRet0 = h, a - c >>> 0 | 0) | 0; //@line 33334
}
function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0; //@line 33845
}
function __ZN4mbed6Ticker5setupEy($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0;
 $4 = ___udivdi3($1 | 0, $2 | 0, 1e3, 0) | 0; //@line 7399
 _emscripten_asm_const_iii(15, $0 + 40 | 0, $4 | 0) | 0; //@line 7401
 return;
}
function __ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack12add_channelsERK16lora_channelplan(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 4547
}
function __ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25370
 HEAP8[$2 + 689 >> 0] = 0; //@line 25372
 HEAP8[$2 + 688 >> 0] = 0; //@line 25374
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_189($0) {
 $0 = $0 | 0;
 HEAP8[HEAP32[$0 + 8 >> 2] >> 0] = HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 10768
 HEAP8[___async_retval >> 0] = 1; //@line 10771
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_243($0) {
 $0 = $0 | 0;
 if (HEAP32[___async_retval >> 2] | 0) {
  _mbed_tracef(2, 12332, 12470, HEAP32[$0 + 4 >> 2] | 0); //@line 15133
 }
 return;
}
function __ZN16LoRaWANInterface22add_link_check_requestEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 4 >> 0] = 1; //@line 4493
 return __ZN12LoRaWANStack22set_link_check_requestEv(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0) | 0; //@line 4496
}
function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 1523
 ___cxa_begin_catch($0 | 0) | 0; //@line 1524
 _emscripten_alloc_async_context(4, sp) | 0; //@line 1525
 __ZSt9terminatev(); //@line 1526
}
function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0); //@line 33894
}
function _aes_ctx_alloc() {
 var $$0 = 0, $0 = 0;
 $0 = _calloc(1, 280) | 0; //@line 3552
 if (!$0) {
  $$0 = 0; //@line 3555
 } else {
  _mbedtls_aes_init($0); //@line 3557
  $$0 = $0; //@line 3558
 }
 return $$0 | 0; //@line 3560
}
function _handle_lora_downlink($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh($0, $1, $2, $3, $4, $5); //@line 2066
 return;
}
function _equeue_enqueue__async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 589
 _equeue_mutex_unlock(HEAP32[$0 + 4 >> 2] | 0); //@line 590
 HEAP32[___async_retval >> 2] = $4; //@line 592
 return;
}
function ___cxa_guard_acquire($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP8[$0 >> 0] | 0) == 1) {
  $$0 = 0; //@line 17455
 } else {
  HEAP8[$0 >> 0] = 1; //@line 17457
  $$0 = 1; //@line 17458
 }
 return $$0 | 0; //@line 17460
}
function __ZN16LoRaWANInterface25set_confirmed_msg_retriesEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack23set_confirmed_msg_retryEh(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 4538
}
function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0; //@line 33838
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_174($0) {
 $0 = $0 | 0;
 HEAP8[HEAP32[$0 + 8 >> 2] >> 0] = HEAP8[$0 + 4 >> 0] | 0; //@line 43
 HEAP8[___async_retval >> 0] = 1; //@line 46
 return;
}
function _aes_crypt_cbc_wrap($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return _mbedtls_aes_crypt_cbc($0, $1, $2, $3, $4, $5) | 0; //@line 3529
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_417($0) {
 $0 = $0 | 0;
 var $3 = 0;
 $3 = (HEAP32[$0 + 4 >> 2] | 0) + 944 | 0; //@line 33245
 HEAP8[$3 >> 0] = HEAP8[$3 >> 0] | 32; //@line 33248
 return;
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb_221($0) {
 $0 = $0 | 0;
 var $3 = 0;
 $3 = (HEAP32[$0 + 4 >> 2] | 0) + 944 | 0; //@line 13484
 HEAP8[$3 >> 0] = HEAP8[$3 >> 0] | 32; //@line 13487
 return;
}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0; //@line 33324
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0; //@line 33326
}
function __ZN16LoRaWANInterface12set_datarateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack21set_channel_data_rateEh(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 4513
}
function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0); //@line 33887
}
function __ZN16LoRaWANInterface25disable_adaptive_datarateEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack24enable_adaptive_datarateEb(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, 0) | 0; //@line 4529
}
function __ZN16LoRaWANInterface14remove_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack16remove_a_channelEh(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 4573
}
function __ZN7LoRaPHY15get_max_payloadEhb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return HEAP8[(HEAP32[($2 ? $0 + 104 | 0 : $0 + 96 | 0) >> 2] | 0) + ($1 & 255) >> 0] | 0; //@line 24061
}
function __ZN16LoRaWANInterface24enable_adaptive_datarateEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack24enable_adaptive_datarateEb(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, 1) | 0; //@line 4521
}
function __ZN7LoRaPHY15verify_tx_powerEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP8[$0 + 22 >> 0] | 0) <= $1 << 24 >> 24 ? (HEAP8[$0 + 21 >> 0] | 0) >= $1 << 24 >> 24 : 0) | 0; //@line 24198
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_210($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 12461
 return;
}
function _strchr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = ___strchrnul($0, $1) | 0; //@line 11533
 return ((HEAP8[$2 >> 0] | 0) == ($1 & 255) << 24 >> 24 ? $2 : 0) | 0; //@line 11538
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_366($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 6; //@line 29506
 HEAP32[___async_retval >> 2] = -1014; //@line 29508
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_152($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 31168
 return;
}
function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) {
  $$0 = 0; //@line 13559
 } else {
  $$0 = _wcrtomb($0, $1, 0) | 0; //@line 13562
 }
 return $$0 | 0; //@line 13564
}
function __ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = HEAP8[___async_retval >> 0] & 1 ? 3 : 0; //@line 24375
 return;
}
function __ZN7LoRaPHY13mask_bit_testEPKtj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return (1 << ($2 & 15) & (HEAPU16[$1 + ($2 >>> 4 << 1) >> 1] | 0) | 0) != 0 | 0; //@line 23504
}
function __ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 20865
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_68($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 22334
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_266($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 16891
 return;
}
function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 15](a1 | 0, a2 | 0, a3 | 0) | 0; //@line 33831
}
function __ZN16LoRaWANInterface19remove_channel_planEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack17drop_channel_listEv(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0) | 0; //@line 4564
}
function _fputs($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = _strlen($0) | 0; //@line 11028
 return ((_fwrite($0, 1, $2, $1) | 0) != ($2 | 0)) << 31 >> 31 | 0; //@line 11032
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0; //@line 33561
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_395($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 32407
 return;
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_392($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 32335
 return;
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_391($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 32327
 return;
}
function ___dynamic_cast__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) == 1 ? HEAP32[$0 + 8 >> 2] | 0 : 0; //@line 32967
 return;
}
function __ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 21482
 return;
}
function b42(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(3); //@line 34024
 return 0; //@line 34024
}
function b41(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(0); //@line 34021
 return 0; //@line 34021
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_52($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 21018
 return;
}
function __ZN16SX1276_LoRaRadio18set_public_networkEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 + 689 >> 0] = 1; //@line 816
 HEAP8[$0 + 776 >> 0] = $1 & 1; //@line 818
 return;
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 32319
 return;
}
function _emscripten_realloc_async_context(len) {
 len = len | 0;
 stackRestore(___async_cur_frame | 0); //@line 33622
 return (stackAlloc(len + 8 | 0) | 0) + 8 | 0; //@line 33623
}
function __ZN18LoRaWANTimeHandler16get_elapsed_timeEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (__ZN6events10EventQueue4tickEv(HEAP32[$0 >> 2] | 0) | 0) - $1 | 0; //@line 167
}
function __ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 15270
 return;
}
function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 7](a1 | 0, a2 | 0, a3 | 0); //@line 33880
}
function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase; //@line 21
 STACK_MAX = stackMax; //@line 22
}
function __ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 357
 return;
}
function __ZN5Sht31C2E7PinNameS0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 _emscripten_asm_const_iiii(16, $0 | 0, $1 | 0, $2 | 0) | 0; //@line 7449
 return;
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_9($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 17882
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 33048
 return;
}
function __ZN7LoRaPHY23get_minimum_tx_datarateEv($0) {
 $0 = $0 | 0;
 return HEAP8[((HEAP8[$0 + 132 >> 0] & 1) == 0 ? $0 + 26 | 0 : $0 + 35 | 0) >> 0] | 0; //@line 24046
}
function _swapc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = _llvm_bswap_i32($0 | 0) | 0; //@line 11524
 return (($1 | 0) == 0 ? $0 : $3) | 0; //@line 11526
}
function __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterface10disconnectEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack8shutdownEv(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0) | 0; //@line 4486
}
function __ZN12LoRaWANStack22set_link_check_requestEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 27889
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 16678
 __ZdlPv($0); //@line 16679
 return;
}
function _aes_crypt_ecb_wrap($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return _mbedtls_aes_crypt_ecb($0, $1, $2, $3) | 0; //@line 3517
}
function __ZN12LoRaWANStack21set_channel_data_rateEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 32311
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 16361
 __ZdlPv($0); //@line 16362
 return;
}
function _srand($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = 20160; //@line 15517
 HEAP32[$2 >> 2] = $0 + -1; //@line 15519
 HEAP32[$2 + 4 >> 2] = 0; //@line 15522
 return;
}
function _gcm_ctx_alloc() {
 var $0 = 0;
 $0 = _calloc(1, 400) | 0; //@line 3483
 if ($0 | 0) {
  _mbedtls_gcm_init($0); //@line 3486
 }
 return $0 | 0; //@line 3488
}
function b39(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(7); //@line 34018
 return 0; //@line 34018
}
function b38(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(6); //@line 34015
 return 0; //@line 34015
}
function b37(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(5); //@line 34012
 return 0; //@line 34012
}
function b36(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(0); //@line 34009
 return 0; //@line 34009
}
function _ccm_ctx_alloc() {
 var $0 = 0;
 $0 = _calloc(1, 68) | 0; //@line 3435
 if ($0 | 0) {
  _mbedtls_ccm_init($0); //@line 3438
 }
 return $0 | 0; //@line 3440
}
function __ZN18LoRaWANTimeHandler24activate_timer_subsystemEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 148
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 15889
 __ZdlPv($0); //@line 15890
 return;
}
function __ZN12LoRaWANStack17send_frame_to_macEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 19267
 return;
}
function __ZN12LoRaWANStack17drop_channel_listEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 13894
 return;
}
function __ZN12LoRaWANStack16remove_a_channelEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 32268
 return;
}
function _ticker_set_handler__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 4 >> 2] >> 2] = HEAP32[$0 + 8 >> 2]; //@line 16668
 return;
}
function _out_670($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (!(HEAP32[$0 >> 2] & 32)) {
  ___fwritex($1, $2, $0) | 0; //@line 13044
 }
 return;
}
function ___cxa_is_pointer_type__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[___async_retval >> 2] | 0) != 0 & 1; //@line 27852
 return;
}
function __ZN7LoRaMac21remove_single_channelEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 30854
 return;
}
function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw; //@line 32
  threwValue = value; //@line 33
 }
}
function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 31](a1 | 0, a2 | 0) | 0; //@line 33824
}
function __ZN7LoRaMac19remove_channel_planEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 32210
 return;
}
function __ZN18LoRaMacChannelPlan30activate_channelplan_subsystemEP7LoRaPHY($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 17551
 return;
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_164($0) {
 $0 = $0 | 0;
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 364 >> 2] = 1; //@line 32081
 return;
}
function b403(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(0); //@line 328
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_283($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 8 >> 2]; //@line 19267
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed5TimerD2Ev($0) {
 $0 = $0 | 0;
 if (HEAP32[$0 >> 2] | 0) {
  if (HEAP8[$0 + 28 >> 0] | 0) {}
 }
 HEAP32[$0 >> 2] = 0; //@line 2755
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($0 | 0) == ($1 | 0) | 0; //@line 16086
}
function __ZN16LoRaWANInterface7connectEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 21810
 return;
}
function __ZN7LoRaPHY16get_channel_maskEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return HEAP32[($1 ? $0 + 124 | 0 : $0 + 120 | 0) >> 2] | 0; //@line 24098
}
function __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb_43($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 20398
 return;
}
function __ZSt13get_terminatev() {
 var $0 = 0;
 $0 = HEAP32[2705] | 0; //@line 16668
 HEAP32[2705] = $0 + 0; //@line 16670
 return $0 | 0; //@line 16672
}
function __ZN12LoRaWANStack8shutdownEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 22878
 return;
}
function _gpio_irq_free($0) {
 $0 = $0 | 0;
 _emscripten_asm_const_iii(13, HEAP32[$0 + 4 >> 2] | 0, HEAP32[$0 + 8 >> 2] | 0) | 0; //@line 7152
 return;
}
function __ZN18LoRaWANTimeHandler16get_current_timeEv($0) {
 $0 = $0 | 0;
 return __ZN6events10EventQueue4tickEv(HEAP32[$0 >> 2] | 0) | 0; //@line 157
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_415($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 33084
 return;
}
function _mbedtls_cipher_setkey__async_cb_29($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 19189
 return;
}
function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 31](a1 | 0, a2 | 0); //@line 33873
}
function _mbedtls_cipher_update__async_cb_8($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 17833
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb_248($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 15220
 return;
}
function __ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _aes_setkey_enc_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return _mbedtls_aes_setkey_enc($0, $1, $2) | 0; //@line 3538
}
function _aes_setkey_dec_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return _mbedtls_aes_setkey_dec($0, $1, $2) | 0; //@line 3547
}
function __ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 0; //@line 15877
 return;
}
function _mbedtls_cipher_update__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 17693
 return;
}
function _mbedtls_cipher_setkey__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 19179
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio6randomEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 16655
 return;
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_16($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 18307
 return;
}
function b34(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(3); //@line 34006
 return 0; //@line 34006
}
function b33(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(0); //@line 34003
 return 0; //@line 34003
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_369($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1011; //@line 29538
 return;
}
function __ZN11LoRaMacMlme23activate_mlme_subsystemEP7LoRaPHY($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 21128
 return;
}
function _gcm_aes_setkey_wrap__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 22067
 return;
}
function _ccm_aes_setkey_wrap__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 18030
 return;
}
function _mbedtls_ccm_setkey__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 24581
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN10LoRaMacMib22activate_mib_subsystemEP7LoRaPHY($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 20305
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0; //@line 33649
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_376($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY18set_radio_instanceER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 4 >> 2] = $1; //@line 23512
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_368($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 29528
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_367($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 29518
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack17get_lorawan_stackEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 20168; //@line 15941
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 3 >> 0] | 0) != 0 | 0; //@line 19624
}
function b401(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(0); //@line 325
}
function _fflush__async_cb_162($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 31956
 return;
}
function __ZN7LoRaPHY32is_custom_channel_plan_supportedEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 16 >> 0] | 0) != 0 | 0; //@line 24123
}
function _strerror($0) {
 $0 = $0 | 0;
 return ___strerror_l($0, HEAP32[(___pthread_self_85() | 0) + 188 >> 2] | 0) | 0; //@line 13507
}
function _fputc__async_cb_204($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 11672
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _snprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 20623
 return;
}
function _putc__async_cb_308($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 20828
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 >> 0] | 0) != 0 | 0; //@line 18323
}
function __ZN7LoRaPHYD2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 944; //@line 21176
 HEAP32[$0 + 4 >> 2] = 0; //@line 21178
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 15](a1 | 0) | 0; //@line 33817
}
function __ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = 0; //@line 20662
 return;
}
function __ZN4mbed8CallbackIFvPhtsaEE13function_dtorINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 1 >> 0] | 0) != 0 | 0; //@line 18340
}
function __ZN7LoRaMac11schedule_txEv__async_cb_307($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 20805
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_306($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 20793
 return;
}
function __ZN12LoRaWANStack23mlme_indication_handlerEP25loramac_mlme_indication_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}
function b31(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(15); //@line 34000
 return 0; //@line 34000
}
function __ZN7LoRaPHY21verify_nb_join_trialsEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ($1 & 255) > 11 | 0; //@line 24206
}
function __ZN4mbed11InterruptInD0Ev__async_cb_191($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 10961
 return;
}
function __ZN16LoRaWANInterface25remove_link_check_requestEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 4 >> 0] = 0; //@line 4503
 return;
}
function b30(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(0); //@line 33997
 return 0; //@line 33997
}
function __ZNK14LoRaMacCommand26get_repeat_commands_lengthEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 3 >> 0] | 0; //@line 18308
}
function __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 >> 0] = 0; //@line 18314
 return;
}
function __ZSt11__terminatePFvvE__async_cb($0) {
 $0 = $0 | 0;
 _abort_message(18688, HEAP32[$0 + 4 >> 2] | 0); //@line 15868
}
function __ZN12LoRaPHYEU868D0Ev($0) {
 $0 = $0 | 0;
 __ZN7LoRaPHYD2Ev($0); //@line 24366
 __ZdlPv($0); //@line 24367
 return;
}
function __ZN4mbed6Ticker6detachEv($0) {
 $0 = $0 | 0;
 _emscripten_asm_const_ii(14, $0 + 40 | 0) | 0; //@line 7409
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_203($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_199($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadioD0Ev__async_cb($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 19224
 return;
}
function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 1023](a1 | 0); //@line 33866
}
function __ZN7LoRaPHY29get_maximum_frame_counter_gapEv($0) {
 $0 = $0 | 0;
 return HEAP16[$0 + 48 >> 1] | 0; //@line 24069
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed7TimeoutD0Ev__async_cb_370($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 29565
 return;
}
function __ZN4mbed6TickerD0Ev__async_cb_309($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 20855
 return;
}
function __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 1 >> 0] = 0; //@line 18330
 return;
}
function __ZN14LoRaMacCommand20clear_command_bufferEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2 >> 0] = 0; //@line 18179
 return;
}
function __ZN14LoRaMacCommand19clear_repeat_bufferEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 3 >> 0] = 0; //@line 18281
 return;
}
function b399(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(7); //@line 322
}
function b398(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(6); //@line 319
}
function b397(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(5); //@line 316
}
function b396(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(0); //@line 313
}
function __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 2 >> 0] | 0; //@line 18188
}
function __ZN7LoRaPHY25get_default_rx2_frequencyEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 68 >> 2] | 0; //@line 24004
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_246($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_245($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_244($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_296($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_295($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_294($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_293($0) {
 $0 = $0 | 0;
 return;
}
function _equeue_event_delay($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -16 >> 2] = $1; //@line 3611
 return;
}
function __ZN7LoRaPHY24get_default_rx2_datarateEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 64 >> 0] | 0; //@line 24012
}
function _equeue_event_dtor($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -8 >> 2] = $1; //@line 3620
 return;
}
function __ZN7LoRaPHY23get_default_tx_datarateEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 30 >> 0] | 0; //@line 23996
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_80($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio18check_rf_frequencyEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return 1; //@line 1171
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _aes_ctx_free($0) {
 $0 = $0 | 0;
 _mbedtls_aes_free($0); //@line 3566
 _free($0); //@line 3567
 return;
}
function __ZN7LoRaPHY20get_default_tx_powerEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 23 >> 0] | 0; //@line 23988
}
function __ZN7LoRaPHY19get_max_nb_channelsEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 20 >> 0] | 0; //@line 24106
}
function __ZN16SX1276_LoRaRadio10get_statusEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 688 >> 0] | 0; //@line 789
}
function __ZN7LoRaPHY16get_phy_channelsEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 112 >> 2] | 0; //@line 24114
}
function __ZN14LoRaMacCommand23get_mac_commands_bufferEv($0) {
 $0 = $0 | 0;
 return $0 + 4 | 0; //@line 18195
}
function b28(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(31); //@line 33994
 return 0; //@line 33994
}
function b27(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(30); //@line 33991
 return 0; //@line 33991
}
function b26(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(29); //@line 33988
 return 0; //@line 33988
}
function b25(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(28); //@line 33985
 return 0; //@line 33985
}
function b24(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(27); //@line 33982
 return 0; //@line 33982
}
function b23(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(26); //@line 33979
 return 0; //@line 33979
}
function b22(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(25); //@line 33976
 return 0; //@line 33976
}
function b21(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(24); //@line 33973
 return 0; //@line 33973
}
function b20(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(23); //@line 33970
 return 0; //@line 33970
}
function b19(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(22); //@line 33967
 return 0; //@line 33967
}
function b18(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(21); //@line 33964
 return 0; //@line 33964
}
function b17(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(20); //@line 33961
 return 0; //@line 33961
}
function b16(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(19); //@line 33958
 return 0; //@line 33958
}
function b15(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(18); //@line 33955
 return 0; //@line 33955
}
function b14(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(17); //@line 33952
 return 0; //@line 33952
}
function _gcm_ctx_free__async_cb($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 29574
 return;
}
function _ccm_ctx_free__async_cb($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 22984
 return;
}
function ___lctrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ___lctrans_impl($0, $1) | 0; //@line 14752
}
function b13(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(0); //@line 33949
 return 0; //@line 33949
}
function _equeue_mutex_unlock($0) {
 $0 = $0 | 0;
 _pthread_mutex_unlock($0 | 0) | 0; //@line 3655
 return;
}
function _equeue_mutex_create($0) {
 $0 = $0 | 0;
 return _pthread_mutex_init($0 | 0, 0) | 0; //@line 3642
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_284($0) {
 $0 = $0 | 0;
 return;
}
function __ZN14LoRaMacCommandC2Ev($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 260) | 0; //@line 17940
 return;
}
function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 7]() | 0; //@line 33810
}
function _main__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1; //@line 31414
 return;
}
function _equeue_mutex_lock($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 3648
 return;
}
function __ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb_373($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaMacChannelPlanC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 17537
 return;
}
function __ZN11LoRaMacMcps16get_confirmationEv($0) {
 $0 = $0 | 0;
 return $0 + 36 | 0; //@line 20273
}
function b394(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(7); //@line 310
}
function b393(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(6); //@line 307
}
function b392(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(5); //@line 304
}
function b391(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(0); //@line 301
}
function __ZN6events10EventQueue4tickEv($0) {
 $0 = $0 | 0;
 return _equeue_tick() | 0; //@line 2949
}
function __ZN18LoRaWANTimeHandlerC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 134
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_231($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMlme16get_confirmationEv($0) {
 $0 = $0 | 0;
 return $0 + 8 | 0; //@line 21114
}
function _mbedtls_gcm_init($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 400) | 0; //@line 4602
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_322($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMlme14get_indicationEv($0) {
 $0 = $0 | 0;
 return $0 + 4 | 0; //@line 21121
}
function _mbedtls_aes_init($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 280) | 0; //@line 447
 return;
}
function __ZN12LoRaPHYEU868D2Ev($0) {
 $0 = $0 | 0;
 __ZN7LoRaPHYD2Ev($0); //@line 24359
 return;
}
function __ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb_77($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_64($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_63($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMlmeC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 21090
 return;
}
function __ZN11LoRaMacMcps14get_indicationEv($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 20279
}
function __ZN10LoRaMacMibC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 20291
 return;
}
function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 7](); //@line 33859
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb_217($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_339($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_44($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterfaceD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 4676
 return;
}
function _isdigit($0) {
 $0 = $0 | 0;
 return ($0 + -48 | 0) >>> 0 < 10 | 0; //@line 10905
}
function b11(p0) {
 p0 = p0 | 0;
 nullFunc_ii(15); //@line 33946
 return 0; //@line 33946
}
function b10(p0) {
 p0 = p0 | 0;
 nullFunc_ii(14); //@line 33943
 return 0; //@line 33943
}
function __ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb_30($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb_48($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b9(p0) {
 p0 = p0 | 0;
 nullFunc_ii(13); //@line 33940
 return 0; //@line 33940
}
function b8(p0) {
 p0 = p0 | 0;
 nullFunc_ii(12); //@line 33937
 return 0; //@line 33937
}
function b7(p0) {
 p0 = p0 | 0;
 nullFunc_ii(11); //@line 33934
 return 0; //@line 33934
}
function b6(p0) {
 p0 = p0 | 0;
 nullFunc_ii(10); //@line 33931
 return 0; //@line 33931
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_219($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_123($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_122($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_121($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_120($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_119($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_118($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_117($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_115($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_269($0) {
 $0 = $0 | 0;
 return;
}
function b5(p0) {
 p0 = p0 | 0;
 nullFunc_ii(0); //@line 33928
 return 0; //@line 33928
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_397($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_176($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac18handle_ack_timeoutEv__async_cb_75($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac17handle_tx_timeoutEv__async_cb_372($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac17handle_rx_timeoutEv__async_cb_411($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_179($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___ofl_lock() {
 ___lock(23720); //@line 11543
 return 23728; //@line 11544
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_194($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_251($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac15handle_rx_errorEv__async_cb_215($0) {
 $0 = $0 | 0;
 return;
}
function b389(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(31); //@line 298
}
function b388(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(30); //@line 295
}
function b387(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(29); //@line 292
}
function b386(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(28); //@line 289
}
function b385(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(27); //@line 286
}
function b384(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(26); //@line 283
}
function b383(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(25); //@line 280
}
function b382(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(24); //@line 277
}
function b381(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(23); //@line 274
}
function _abort_message__async_cb_412($0) {
 $0 = $0 | 0;
 _abort(); //@line 32881
}
function __ZN7LoRaPHYD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 21185
 return;
}
function __ZN4mbed10TimerEventD0Ev($0) {
 $0 = $0 | 0;
 _llvm_trap(); //@line 2881
}
function __ZN11LoRaMacMcps23activate_mcps_subsystemEv($0) {
 $0 = $0 | 0;
 return;
}
function b380(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(0); //@line 271
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb_236($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac14handle_tx_doneEv__async_cb_32($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue6cancelEi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value; //@line 39
}
function _frexpl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_frexp($0, $1));
}
function ___cxa_pure_virtual__wrapper() {
 ___cxa_pure_virtual(); //@line 34030
}
function __ZN16SX1276_LoRaRadio4sendEPhh__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed11InterruptInD2Ev__async_cb_249($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_405($0) {
 $0 = $0 | 0;
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_910() {
 return _pthread_self() | 0; //@line 14673
}
function __ZN4mbed7Timeout7handlerEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEvent3irqEj__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN14lorawan_timersD2Ev__async_cb_74($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_85() {
 return _pthread_self() | 0; //@line 14679
}
function __ZN4mbed6Ticker7handlerEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStackC2Ev__async_cb_299($0) {
 $0 = $0 | 0;
 return;
}
function _mbed_trace_default_print__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed7TimeoutD2Ev__async_cb_337($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventD2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventC2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_60($0) {
 $0 = $0 | 0;
 return;
}
function stackRestore(top) {
 top = top | 0;
 STACKTOP = top; //@line 16
}
function _pthread_mutex_unlock(x) {
 x = x | 0;
 return 0; //@line 33776
}
function __ZN4mbed6TickerD2Ev__async_cb_413($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_160($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_159($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_156($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_155($0) {
 $0 = $0 | 0;
 return;
}
function __ZdlPv($0) {
 $0 = $0 | 0;
 _free($0); //@line 15715
 return;
}
function b3() {
 nullFunc_i(7); //@line 33925
 return 0; //@line 33925
}
function b2() {
 nullFunc_i(6); //@line 33922
 return 0; //@line 33922
}
function b1() {
 nullFunc_i(0); //@line 33919
 return 0; //@line 33919
}
function _pthread_mutex_lock(x) {
 x = x | 0;
 return 0; //@line 33772
}
function _mbed_assert_internal__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio6unlockEv($0) {
 $0 = $0 | 0;
 return;
}
function _ticker_remove_event__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _handle_interrupt_in__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___ofl_unlock() {
 ___unlock(23720); //@line 11549
 return;
}
function __ZN16SX1276_LoRaRadio4lockEv($0) {
 $0 = $0 | 0;
 return;
}
function b288(p0) {
 p0 = p0 | 0;
 nullFunc_vi(933); //@line 34759
}
function b287(p0) {
 p0 = p0 | 0;
 nullFunc_vi(932); //@line 34756
}
function b286(p0) {
 p0 = p0 | 0;
 nullFunc_vi(931); //@line 34753
}
function b285(p0) {
 p0 = p0 | 0;
 nullFunc_vi(930); //@line 34750
}
function b284(p0) {
 p0 = p0 | 0;
 nullFunc_vi(929); //@line 34747
}
function b283(p0) {
 p0 = p0 | 0;
 nullFunc_vi(928); //@line 34744
}
function b282(p0) {
 p0 = p0 | 0;
 nullFunc_vi(927); //@line 34741
}
function b281(p0) {
 p0 = p0 | 0;
 nullFunc_vi(926); //@line 34738
}
function b280(p0) {
 p0 = p0 | 0;
 nullFunc_vi(925); //@line 34735
}
function b279(p0) {
 p0 = p0 | 0;
 nullFunc_vi(924); //@line 34732
}
function b278(p0) {
 p0 = p0 | 0;
 nullFunc_vi(923); //@line 34729
}
function b277(p0) {
 p0 = p0 | 0;
 nullFunc_vi(922); //@line 34726
}
function b276(p0) {
 p0 = p0 | 0;
 nullFunc_vi(921); //@line 34723
}
function b275(p0) {
 p0 = p0 | 0;
 nullFunc_vi(920); //@line 34720
}
function b274(p0) {
 p0 = p0 | 0;
 nullFunc_vi(919); //@line 34717
}
function b273(p0) {
 p0 = p0 | 0;
 nullFunc_vi(918); //@line 34714
}
function b272(p0) {
 p0 = p0 | 0;
 nullFunc_vi(917); //@line 34711
}
function b271(p0) {
 p0 = p0 | 0;
 nullFunc_vi(916); //@line 34708
}
function b270(p0) {
 p0 = p0 | 0;
 nullFunc_vi(915); //@line 34705
}
function b269(p0) {
 p0 = p0 | 0;
 nullFunc_vi(914); //@line 34702
}
function b268(p0) {
 p0 = p0 | 0;
 nullFunc_vi(913); //@line 34699
}
function b267(p0) {
 p0 = p0 | 0;
 nullFunc_vi(912); //@line 34696
}
function b266(p0) {
 p0 = p0 | 0;
 nullFunc_vi(911); //@line 34693
}
function b265(p0) {
 p0 = p0 | 0;
 nullFunc_vi(910); //@line 34690
}
function b264(p0) {
 p0 = p0 | 0;
 nullFunc_vi(909); //@line 34687
}
function b263(p0) {
 p0 = p0 | 0;
 nullFunc_vi(908); //@line 34684
}
function b262(p0) {
 p0 = p0 | 0;
 nullFunc_vi(907); //@line 34681
}
function b261(p0) {
 p0 = p0 | 0;
 nullFunc_vi(906); //@line 34678
}
function b260(p0) {
 p0 = p0 | 0;
 nullFunc_vi(905); //@line 34675
}
function b259(p0) {
 p0 = p0 | 0;
 nullFunc_vi(904); //@line 34672
}
function b258(p0) {
 p0 = p0 | 0;
 nullFunc_vi(903); //@line 34669
}
function b257(p0) {
 p0 = p0 | 0;
 nullFunc_vi(902); //@line 34666
}
function b256(p0) {
 p0 = p0 | 0;
 nullFunc_vi(901); //@line 34663
}
function b255(p0) {
 p0 = p0 | 0;
 nullFunc_vi(900); //@line 34660
}
function b254(p0) {
 p0 = p0 | 0;
 nullFunc_vi(899); //@line 34657
}
function b253(p0) {
 p0 = p0 | 0;
 nullFunc_vi(898); //@line 34654
}
function b252(p0) {
 p0 = p0 | 0;
 nullFunc_vi(897); //@line 34651
}
function b251(p0) {
 p0 = p0 | 0;
 nullFunc_vi(896); //@line 34648
}
function b250(p0) {
 p0 = p0 | 0;
 nullFunc_vi(895); //@line 34645
}
function b249(p0) {
 p0 = p0 | 0;
 nullFunc_vi(894); //@line 34642
}
function b248(p0) {
 p0 = p0 | 0;
 nullFunc_vi(893); //@line 34639
}
function b247(p0) {
 p0 = p0 | 0;
 nullFunc_vi(892); //@line 34636
}
function b246(p0) {
 p0 = p0 | 0;
 nullFunc_vi(891); //@line 34633
}
function b245(p0) {
 p0 = p0 | 0;
 nullFunc_vi(890); //@line 34630
}
function b244(p0) {
 p0 = p0 | 0;
 nullFunc_vi(889); //@line 34627
}
function b243(p0) {
 p0 = p0 | 0;
 nullFunc_vi(888); //@line 34624
}
function b242(p0) {
 p0 = p0 | 0;
 nullFunc_vi(887); //@line 34621
}
function b241(p0) {
 p0 = p0 | 0;
 nullFunc_vi(886); //@line 34618
}
function b240(p0) {
 p0 = p0 | 0;
 nullFunc_vi(885); //@line 34615
}
function b239(p0) {
 p0 = p0 | 0;
 nullFunc_vi(884); //@line 34612
}
function b238(p0) {
 p0 = p0 | 0;
 nullFunc_vi(883); //@line 34609
}
function b237(p0) {
 p0 = p0 | 0;
 nullFunc_vi(882); //@line 34606
}
function b236(p0) {
 p0 = p0 | 0;
 nullFunc_vi(881); //@line 34603
}
function b235(p0) {
 p0 = p0 | 0;
 nullFunc_vi(880); //@line 34600
}
function b234(p0) {
 p0 = p0 | 0;
 nullFunc_vi(879); //@line 34597
}
function b233(p0) {
 p0 = p0 | 0;
 nullFunc_vi(878); //@line 34594
}
function b232(p0) {
 p0 = p0 | 0;
 nullFunc_vi(877); //@line 34591
}
function b231(p0) {
 p0 = p0 | 0;
 nullFunc_vi(876); //@line 34588
}
function b230(p0) {
 p0 = p0 | 0;
 nullFunc_vi(875); //@line 34585
}
function b229(p0) {
 p0 = p0 | 0;
 nullFunc_vi(874); //@line 34582
}
function b228(p0) {
 p0 = p0 | 0;
 nullFunc_vi(873); //@line 34579
}
function b227(p0) {
 p0 = p0 | 0;
 nullFunc_vi(872); //@line 34576
}
function b226(p0) {
 p0 = p0 | 0;
 nullFunc_vi(871); //@line 34573
}
function b225(p0) {
 p0 = p0 | 0;
 nullFunc_vi(870); //@line 34570
}
function b224(p0) {
 p0 = p0 | 0;
 nullFunc_vi(869); //@line 34567
}
function b223(p0) {
 p0 = p0 | 0;
 nullFunc_vi(868); //@line 34564
}
function b222(p0) {
 p0 = p0 | 0;
 nullFunc_vi(867); //@line 34561
}
function b221(p0) {
 p0 = p0 | 0;
 nullFunc_vi(866); //@line 34558
}
function b220(p0) {
 p0 = p0 | 0;
 nullFunc_vi(865); //@line 34555
}
function b219(p0) {
 p0 = p0 | 0;
 nullFunc_vi(864); //@line 34552
}
function b218(p0) {
 p0 = p0 | 0;
 nullFunc_vi(863); //@line 34549
}
function b217(p0) {
 p0 = p0 | 0;
 nullFunc_vi(862); //@line 34546
}
function b216(p0) {
 p0 = p0 | 0;
 nullFunc_vi(861); //@line 34543
}
function b215(p0) {
 p0 = p0 | 0;
 nullFunc_vi(860); //@line 34540
}
function b214(p0) {
 p0 = p0 | 0;
 nullFunc_vi(859); //@line 34537
}
function b213(p0) {
 p0 = p0 | 0;
 nullFunc_vi(858); //@line 34534
}
function b212(p0) {
 p0 = p0 | 0;
 nullFunc_vi(857); //@line 34531
}
function b211(p0) {
 p0 = p0 | 0;
 nullFunc_vi(856); //@line 34528
}
function b210(p0) {
 p0 = p0 | 0;
 nullFunc_vi(855); //@line 34525
}
function b209(p0) {
 p0 = p0 | 0;
 nullFunc_vi(854); //@line 34522
}
function b208(p0) {
 p0 = p0 | 0;
 nullFunc_vi(853); //@line 34519
}
function b207(p0) {
 p0 = p0 | 0;
 nullFunc_vi(852); //@line 34516
}
function b206(p0) {
 p0 = p0 | 0;
 nullFunc_vi(851); //@line 34513
}
function b205(p0) {
 p0 = p0 | 0;
 nullFunc_vi(850); //@line 34510
}
function b204(p0) {
 p0 = p0 | 0;
 nullFunc_vi(849); //@line 34507
}
function b203(p0) {
 p0 = p0 | 0;
 nullFunc_vi(848); //@line 34504
}
function b202(p0) {
 p0 = p0 | 0;
 nullFunc_vi(847); //@line 34501
}
function b201(p0) {
 p0 = p0 | 0;
 nullFunc_vi(846); //@line 34498
}
function b200(p0) {
 p0 = p0 | 0;
 nullFunc_vi(845); //@line 34495
}
function b199(p0) {
 p0 = p0 | 0;
 nullFunc_vi(844); //@line 34492
}
function b198(p0) {
 p0 = p0 | 0;
 nullFunc_vi(843); //@line 34489
}
function b197(p0) {
 p0 = p0 | 0;
 nullFunc_vi(842); //@line 34486
}
function b196(p0) {
 p0 = p0 | 0;
 nullFunc_vi(841); //@line 34483
}
function b195(p0) {
 p0 = p0 | 0;
 nullFunc_vi(840); //@line 34480
}
function b194(p0) {
 p0 = p0 | 0;
 nullFunc_vi(839); //@line 34477
}
function b193(p0) {
 p0 = p0 | 0;
 nullFunc_vi(838); //@line 34474
}
function b192(p0) {
 p0 = p0 | 0;
 nullFunc_vi(837); //@line 34471
}
function b191(p0) {
 p0 = p0 | 0;
 nullFunc_vi(836); //@line 34468
}
function b190(p0) {
 p0 = p0 | 0;
 nullFunc_vi(835); //@line 34465
}
function b189(p0) {
 p0 = p0 | 0;
 nullFunc_vi(834); //@line 34462
}
function b188(p0) {
 p0 = p0 | 0;
 nullFunc_vi(833); //@line 34459
}
function b187(p0) {
 p0 = p0 | 0;
 nullFunc_vi(832); //@line 34456
}
function b186(p0) {
 p0 = p0 | 0;
 nullFunc_vi(831); //@line 34453
}
function b185(p0) {
 p0 = p0 | 0;
 nullFunc_vi(830); //@line 34450
}
function b184(p0) {
 p0 = p0 | 0;
 nullFunc_vi(829); //@line 34447
}
function b183(p0) {
 p0 = p0 | 0;
 nullFunc_vi(828); //@line 34444
}
function b182(p0) {
 p0 = p0 | 0;
 nullFunc_vi(827); //@line 34441
}
function b181(p0) {
 p0 = p0 | 0;
 nullFunc_vi(826); //@line 34438
}
function b180(p0) {
 p0 = p0 | 0;
 nullFunc_vi(825); //@line 34435
}
function b179(p0) {
 p0 = p0 | 0;
 nullFunc_vi(824); //@line 34432
}
function b178(p0) {
 p0 = p0 | 0;
 nullFunc_vi(823); //@line 34429
}
function b177(p0) {
 p0 = p0 | 0;
 nullFunc_vi(822); //@line 34426
}
function b176(p0) {
 p0 = p0 | 0;
 nullFunc_vi(821); //@line 34423
}
function b175(p0) {
 p0 = p0 | 0;
 nullFunc_vi(820); //@line 34420
}
function b174(p0) {
 p0 = p0 | 0;
 nullFunc_vi(819); //@line 34417
}
function b173(p0) {
 p0 = p0 | 0;
 nullFunc_vi(818); //@line 34414
}
function b172(p0) {
 p0 = p0 | 0;
 nullFunc_vi(817); //@line 34411
}
function b171(p0) {
 p0 = p0 | 0;
 nullFunc_vi(816); //@line 34408
}
function b170(p0) {
 p0 = p0 | 0;
 nullFunc_vi(815); //@line 34405
}
function b169(p0) {
 p0 = p0 | 0;
 nullFunc_vi(814); //@line 34402
}
function b168(p0) {
 p0 = p0 | 0;
 nullFunc_vi(813); //@line 34399
}
function b167(p0) {
 p0 = p0 | 0;
 nullFunc_vi(812); //@line 34396
}
function b166(p0) {
 p0 = p0 | 0;
 nullFunc_vi(811); //@line 34393
}
function b165(p0) {
 p0 = p0 | 0;
 nullFunc_vi(810); //@line 34390
}
function b164(p0) {
 p0 = p0 | 0;
 nullFunc_vi(809); //@line 34387
}
function b163(p0) {
 p0 = p0 | 0;
 nullFunc_vi(808); //@line 34384
}
function b162(p0) {
 p0 = p0 | 0;
 nullFunc_vi(807); //@line 34381
}
function b161(p0) {
 p0 = p0 | 0;
 nullFunc_vi(806); //@line 34378
}
function b160(p0) {
 p0 = p0 | 0;
 nullFunc_vi(805); //@line 34375
}
function b159(p0) {
 p0 = p0 | 0;
 nullFunc_vi(804); //@line 34372
}
function b158(p0) {
 p0 = p0 | 0;
 nullFunc_vi(803); //@line 34369
}
function b157(p0) {
 p0 = p0 | 0;
 nullFunc_vi(802); //@line 34366
}
function b156(p0) {
 p0 = p0 | 0;
 nullFunc_vi(801); //@line 34363
}
function b155(p0) {
 p0 = p0 | 0;
 nullFunc_vi(800); //@line 34360
}
function b154(p0) {
 p0 = p0 | 0;
 nullFunc_vi(799); //@line 34357
}
function b153(p0) {
 p0 = p0 | 0;
 nullFunc_vi(798); //@line 34354
}
function b152(p0) {
 p0 = p0 | 0;
 nullFunc_vi(797); //@line 34351
}
function b151(p0) {
 p0 = p0 | 0;
 nullFunc_vi(796); //@line 34348
}
function b150(p0) {
 p0 = p0 | 0;
 nullFunc_vi(795); //@line 34345
}
function b149(p0) {
 p0 = p0 | 0;
 nullFunc_vi(794); //@line 34342
}
function b148(p0) {
 p0 = p0 | 0;
 nullFunc_vi(793); //@line 34339
}
function b147(p0) {
 p0 = p0 | 0;
 nullFunc_vi(792); //@line 34336
}
function b146(p0) {
 p0 = p0 | 0;
 nullFunc_vi(791); //@line 34333
}
function b145(p0) {
 p0 = p0 | 0;
 nullFunc_vi(790); //@line 34330
}
function b144(p0) {
 p0 = p0 | 0;
 nullFunc_vi(789); //@line 34327
}
function b143(p0) {
 p0 = p0 | 0;
 nullFunc_vi(788); //@line 34324
}
function b142(p0) {
 p0 = p0 | 0;
 nullFunc_vi(787); //@line 34321
}
function b141(p0) {
 p0 = p0 | 0;
 nullFunc_vi(786); //@line 34318
}
function b140(p0) {
 p0 = p0 | 0;
 nullFunc_vi(785); //@line 34315
}
function b139(p0) {
 p0 = p0 | 0;
 nullFunc_vi(784); //@line 34312
}
function b138(p0) {
 p0 = p0 | 0;
 nullFunc_vi(783); //@line 34309
}
function b137(p0) {
 p0 = p0 | 0;
 nullFunc_vi(782); //@line 34306
}
function b136(p0) {
 p0 = p0 | 0;
 nullFunc_vi(781); //@line 34303
}
function b135(p0) {
 p0 = p0 | 0;
 nullFunc_vi(780); //@line 34300
}
function b134(p0) {
 p0 = p0 | 0;
 nullFunc_vi(779); //@line 34297
}
function b133(p0) {
 p0 = p0 | 0;
 nullFunc_vi(778); //@line 34294
}
function b132(p0) {
 p0 = p0 | 0;
 nullFunc_vi(777); //@line 34291
}
function b131(p0) {
 p0 = p0 | 0;
 nullFunc_vi(776); //@line 34288
}
function b130(p0) {
 p0 = p0 | 0;
 nullFunc_vi(775); //@line 34285
}
function b129(p0) {
 p0 = p0 | 0;
 nullFunc_vi(774); //@line 34282
}
function b128(p0) {
 p0 = p0 | 0;
 nullFunc_vi(773); //@line 34279
}
function b127(p0) {
 p0 = p0 | 0;
 nullFunc_vi(772); //@line 34276
}
function b126(p0) {
 p0 = p0 | 0;
 nullFunc_vi(771); //@line 34273
}
function b125(p0) {
 p0 = p0 | 0;
 nullFunc_vi(770); //@line 34270
}
function b124(p0) {
 p0 = p0 | 0;
 nullFunc_vi(769); //@line 34267
}
function b123(p0) {
 p0 = p0 | 0;
 nullFunc_vi(768); //@line 34264
}
function b122(p0) {
 p0 = p0 | 0;
 nullFunc_vi(767); //@line 34261
}
function b121(p0) {
 p0 = p0 | 0;
 nullFunc_vi(766); //@line 34258
}
function b120(p0) {
 p0 = p0 | 0;
 nullFunc_vi(765); //@line 34255
}
function b119(p0) {
 p0 = p0 | 0;
 nullFunc_vi(764); //@line 34252
}
function b118(p0) {
 p0 = p0 | 0;
 nullFunc_vi(763); //@line 34249
}
function b117(p0) {
 p0 = p0 | 0;
 nullFunc_vi(762); //@line 34246
}
function b116(p0) {
 p0 = p0 | 0;
 nullFunc_vi(761); //@line 34243
}
function b115(p0) {
 p0 = p0 | 0;
 nullFunc_vi(760); //@line 34240
}
function b114(p0) {
 p0 = p0 | 0;
 nullFunc_vi(759); //@line 34237
}
function b113(p0) {
 p0 = p0 | 0;
 nullFunc_vi(758); //@line 34234
}
function b112(p0) {
 p0 = p0 | 0;
 nullFunc_vi(757); //@line 34231
}
function b111(p0) {
 p0 = p0 | 0;
 nullFunc_vi(756); //@line 34228
}
function b110(p0) {
 p0 = p0 | 0;
 nullFunc_vi(755); //@line 34225
}
function b109(p0) {
 p0 = p0 | 0;
 nullFunc_vi(754); //@line 34222
}
function b108(p0) {
 p0 = p0 | 0;
 nullFunc_vi(753); //@line 34219
}
function b107(p0) {
 p0 = p0 | 0;
 nullFunc_vi(752); //@line 34216
}
function b106(p0) {
 p0 = p0 | 0;
 nullFunc_vi(751); //@line 34213
}
function b105(p0) {
 p0 = p0 | 0;
 nullFunc_vi(750); //@line 34210
}
function b104(p0) {
 p0 = p0 | 0;
 nullFunc_vi(749); //@line 34207
}
function b103(p0) {
 p0 = p0 | 0;
 nullFunc_vi(748); //@line 34204
}
function b102(p0) {
 p0 = p0 | 0;
 nullFunc_vi(747); //@line 34201
}
function b101(p0) {
 p0 = p0 | 0;
 nullFunc_vi(746); //@line 34198
}
function b100(p0) {
 p0 = p0 | 0;
 nullFunc_vi(745); //@line 34195
}
function _mbed_error_printf__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaWANTimeHandlerD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaMacChannelPlanD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function b99(p0) {
 p0 = p0 | 0;
 nullFunc_vi(744); //@line 34192
}
function b98(p0) {
 p0 = p0 | 0;
 nullFunc_vi(743); //@line 34189
}
function b97(p0) {
 p0 = p0 | 0;
 nullFunc_vi(742); //@line 34186
}
function b96(p0) {
 p0 = p0 | 0;
 nullFunc_vi(741); //@line 34183
}
function b95(p0) {
 p0 = p0 | 0;
 nullFunc_vi(740); //@line 34180
}
function b94(p0) {
 p0 = p0 | 0;
 nullFunc_vi(739); //@line 34177
}
function b93(p0) {
 p0 = p0 | 0;
 nullFunc_vi(738); //@line 34174
}
function b92(p0) {
 p0 = p0 | 0;
 nullFunc_vi(737); //@line 34171
}
function b91(p0) {
 p0 = p0 | 0;
 nullFunc_vi(736); //@line 34168
}
function b90(p0) {
 p0 = p0 | 0;
 nullFunc_vi(735); //@line 34165
}
function b89(p0) {
 p0 = p0 | 0;
 nullFunc_vi(734); //@line 34162
}
function b88(p0) {
 p0 = p0 | 0;
 nullFunc_vi(733); //@line 34159
}
function b87(p0) {
 p0 = p0 | 0;
 nullFunc_vi(732); //@line 34156
}
function b86(p0) {
 p0 = p0 | 0;
 nullFunc_vi(731); //@line 34153
}
function b85(p0) {
 p0 = p0 | 0;
 nullFunc_vi(730); //@line 34150
}
function b84(p0) {
 p0 = p0 | 0;
 nullFunc_vi(729); //@line 34147
}
function b83(p0) {
 p0 = p0 | 0;
 nullFunc_vi(728); //@line 34144
}
function b82(p0) {
 p0 = p0 | 0;
 nullFunc_vi(727); //@line 34141
}
function b81(p0) {
 p0 = p0 | 0;
 nullFunc_vi(726); //@line 34138
}
function b80(p0) {
 p0 = p0 | 0;
 nullFunc_vi(725); //@line 34135
}
function b79(p0) {
 p0 = p0 | 0;
 nullFunc_vi(724); //@line 34132
}
function b78(p0) {
 p0 = p0 | 0;
 nullFunc_vi(723); //@line 34129
}
function b77(p0) {
 p0 = p0 | 0;
 nullFunc_vi(722); //@line 34126
}
function b76(p0) {
 p0 = p0 | 0;
 nullFunc_vi(721); //@line 34123
}
function b75(p0) {
 p0 = p0 | 0;
 nullFunc_vi(720); //@line 34120
}
function b74(p0) {
 p0 = p0 | 0;
 nullFunc_vi(719); //@line 34117
}
function b73(p0) {
 p0 = p0 | 0;
 nullFunc_vi(718); //@line 34114
}
function b72(p0) {
 p0 = p0 | 0;
 nullFunc_vi(717); //@line 34111
}
function b71(p0) {
 p0 = p0 | 0;
 nullFunc_vi(716); //@line 34108
}
function b70(p0) {
 p0 = p0 | 0;
 nullFunc_vi(715); //@line 34105
}
function b69(p0) {
 p0 = p0 | 0;
 nullFunc_vi(714); //@line 34102
}
function b68(p0) {
 p0 = p0 | 0;
 nullFunc_vi(713); //@line 34099
}
function b67(p0) {
 p0 = p0 | 0;
 nullFunc_vi(712); //@line 34096
}
function b66(p0) {
 p0 = p0 | 0;
 nullFunc_vi(711); //@line 34093
}
function b65(p0) {
 p0 = p0 | 0;
 nullFunc_vi(710); //@line 34090
}
function b64(p0) {
 p0 = p0 | 0;
 nullFunc_vi(709); //@line 34087
}
function b63(p0) {
 p0 = p0 | 0;
 nullFunc_vi(708); //@line 34084
}
function b62(p0) {
 p0 = p0 | 0;
 nullFunc_vi(707); //@line 34081
}
function b61(p0) {
 p0 = p0 | 0;
 nullFunc_vi(706); //@line 34078
}
function b60(p0) {
 p0 = p0 | 0;
 nullFunc_vi(705); //@line 34075
}
function b59(p0) {
 p0 = p0 | 0;
 nullFunc_vi(704); //@line 34072
}
function b58(p0) {
 p0 = p0 | 0;
 nullFunc_vi(703); //@line 34069
}
function b57(p0) {
 p0 = p0 | 0;
 nullFunc_vi(702); //@line 34066
}
function b56(p0) {
 p0 = p0 | 0;
 nullFunc_vi(701); //@line 34063
}
function b55(p0) {
 p0 = p0 | 0;
 nullFunc_vi(700); //@line 34060
}
function b54(p0) {
 p0 = p0 | 0;
 nullFunc_vi(699); //@line 34057
}
function b53(p0) {
 p0 = p0 | 0;
 nullFunc_vi(698); //@line 34054
}
function b52(p0) {
 p0 = p0 | 0;
 nullFunc_vi(697); //@line 34051
}
function b51(p0) {
 p0 = p0 | 0;
 nullFunc_vi(696); //@line 34048
}
function b50(p0) {
 p0 = p0 | 0;
 nullFunc_vi(695); //@line 34045
}
function b49(p0) {
 p0 = p0 | 0;
 nullFunc_vi(694); //@line 34042
}
function b48(p0) {
 p0 = p0 | 0;
 nullFunc_vi(693); //@line 34039
}
function b47(p0) {
 p0 = p0 | 0;
 nullFunc_vi(692); //@line 34036
}
function b378(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1023); //@line 268
}
function b377(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1022); //@line 265
}
function b376(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1021); //@line 262
}
function b375(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1020); //@line 259
}
function b374(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1019); //@line 256
}
function b373(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1018); //@line 253
}
function b372(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1017); //@line 250
}
function b371(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1016); //@line 247
}
function b370(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1015); //@line 244
}
function b369(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1014); //@line 241
}
function b368(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1013); //@line 238
}
function b367(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1012); //@line 235
}
function b366(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1011); //@line 232
}
function b365(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1010); //@line 229
}
function b364(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1009); //@line 226
}
function b363(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1008); //@line 223
}
function b362(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1007); //@line 220
}
function b361(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1006); //@line 217
}
function b360(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1005); //@line 214
}
function b359(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1004); //@line 211
}
function b358(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1003); //@line 208
}
function b357(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1002); //@line 205
}
function b356(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1001); //@line 202
}
function _dummy($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 10863
}
function ___lockfile($0) {
 $0 = $0 | 0;
 return 0; //@line 11180
}
function b355(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1e3); //@line 199
}
function b354(p0) {
 p0 = p0 | 0;
 nullFunc_vi(999); //@line 196
}
function b353(p0) {
 p0 = p0 | 0;
 nullFunc_vi(998); //@line 193
}
function b352(p0) {
 p0 = p0 | 0;
 nullFunc_vi(997); //@line 190
}
function b351(p0) {
 p0 = p0 | 0;
 nullFunc_vi(996); //@line 187
}
function b350(p0) {
 p0 = p0 | 0;
 nullFunc_vi(995); //@line 184
}
function b349(p0) {
 p0 = p0 | 0;
 nullFunc_vi(994); //@line 181
}
function b348(p0) {
 p0 = p0 | 0;
 nullFunc_vi(993); //@line 178
}
function b347(p0) {
 p0 = p0 | 0;
 nullFunc_vi(992); //@line 175
}
function b346(p0) {
 p0 = p0 | 0;
 nullFunc_vi(991); //@line 172
}
function b345(p0) {
 p0 = p0 | 0;
 nullFunc_vi(990); //@line 169
}
function b344(p0) {
 p0 = p0 | 0;
 nullFunc_vi(989); //@line 166
}
function b343(p0) {
 p0 = p0 | 0;
 nullFunc_vi(988); //@line 163
}
function b342(p0) {
 p0 = p0 | 0;
 nullFunc_vi(987); //@line 160
}
function b341(p0) {
 p0 = p0 | 0;
 nullFunc_vi(986); //@line 157
}
function b340(p0) {
 p0 = p0 | 0;
 nullFunc_vi(985); //@line 154
}
function b339(p0) {
 p0 = p0 | 0;
 nullFunc_vi(984); //@line 151
}
function b338(p0) {
 p0 = p0 | 0;
 nullFunc_vi(983); //@line 148
}
function b337(p0) {
 p0 = p0 | 0;
 nullFunc_vi(982); //@line 145
}
function b336(p0) {
 p0 = p0 | 0;
 nullFunc_vi(981); //@line 142
}
function b335(p0) {
 p0 = p0 | 0;
 nullFunc_vi(980); //@line 139
}
function b334(p0) {
 p0 = p0 | 0;
 nullFunc_vi(979); //@line 136
}
function b333(p0) {
 p0 = p0 | 0;
 nullFunc_vi(978); //@line 133
}
function b332(p0) {
 p0 = p0 | 0;
 nullFunc_vi(977); //@line 130
}
function b331(p0) {
 p0 = p0 | 0;
 nullFunc_vi(976); //@line 127
}
function b330(p0) {
 p0 = p0 | 0;
 nullFunc_vi(975); //@line 124
}
function b329(p0) {
 p0 = p0 | 0;
 nullFunc_vi(974); //@line 121
}
function b328(p0) {
 p0 = p0 | 0;
 nullFunc_vi(973); //@line 118
}
function b327(p0) {
 p0 = p0 | 0;
 nullFunc_vi(972); //@line 115
}
function b326(p0) {
 p0 = p0 | 0;
 nullFunc_vi(971); //@line 112
}
function b325(p0) {
 p0 = p0 | 0;
 nullFunc_vi(970); //@line 109
}
function b324(p0) {
 p0 = p0 | 0;
 nullFunc_vi(969); //@line 106
}
function b323(p0) {
 p0 = p0 | 0;
 nullFunc_vi(968); //@line 103
}
function b322(p0) {
 p0 = p0 | 0;
 nullFunc_vi(967); //@line 100
}
function __ZN7LoRaMacD2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterfaceD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function b46(p0) {
 p0 = p0 | 0;
 nullFunc_vi(0); //@line 34033
}
function b321(p0) {
 p0 = p0 | 0;
 nullFunc_vi(966); //@line 97
}
function b320(p0) {
 p0 = p0 | 0;
 nullFunc_vi(965); //@line 94
}
function b319(p0) {
 p0 = p0 | 0;
 nullFunc_vi(964); //@line 91
}
function b318(p0) {
 p0 = p0 | 0;
 nullFunc_vi(963); //@line 88
}
function b317(p0) {
 p0 = p0 | 0;
 nullFunc_vi(962); //@line 85
}
function b316(p0) {
 p0 = p0 | 0;
 nullFunc_vi(961); //@line 82
}
function b315(p0) {
 p0 = p0 | 0;
 nullFunc_vi(960); //@line 79
}
function b314(p0) {
 p0 = p0 | 0;
 nullFunc_vi(959); //@line 76
}
function b313(p0) {
 p0 = p0 | 0;
 nullFunc_vi(958); //@line 73
}
function b312(p0) {
 p0 = p0 | 0;
 nullFunc_vi(957); //@line 70
}
function b311(p0) {
 p0 = p0 | 0;
 nullFunc_vi(956); //@line 67
}
function b310(p0) {
 p0 = p0 | 0;
 nullFunc_vi(955); //@line 64
}
function b309(p0) {
 p0 = p0 | 0;
 nullFunc_vi(954); //@line 61
}
function b308(p0) {
 p0 = p0 | 0;
 nullFunc_vi(953); //@line 58
}
function b307(p0) {
 p0 = p0 | 0;
 nullFunc_vi(952); //@line 55
}
function b306(p0) {
 p0 = p0 | 0;
 nullFunc_vi(951); //@line 52
}
function b305(p0) {
 p0 = p0 | 0;
 nullFunc_vi(950); //@line 49
}
function b304(p0) {
 p0 = p0 | 0;
 nullFunc_vi(949); //@line 46
}
function b303(p0) {
 p0 = p0 | 0;
 nullFunc_vi(948); //@line 43
}
function b302(p0) {
 p0 = p0 | 0;
 nullFunc_vi(947); //@line 40
}
function b301(p0) {
 p0 = p0 | 0;
 nullFunc_vi(946); //@line 37
}
function b300(p0) {
 p0 = p0 | 0;
 nullFunc_vi(945); //@line 34
}
function b299(p0) {
 p0 = p0 | 0;
 nullFunc_vi(944); //@line 31
}
function b298(p0) {
 p0 = p0 | 0;
 nullFunc_vi(943); //@line 28
}
function b297(p0) {
 p0 = p0 | 0;
 nullFunc_vi(942); //@line 25
}
function b296(p0) {
 p0 = p0 | 0;
 nullFunc_vi(941); //@line 22
}
function b295(p0) {
 p0 = p0 | 0;
 nullFunc_vi(940); //@line 19
}
function b294(p0) {
 p0 = p0 | 0;
 nullFunc_vi(939); //@line 16
}
function b293(p0) {
 p0 = p0 | 0;
 nullFunc_vi(938); //@line 13
}
function b292(p0) {
 p0 = p0 | 0;
 nullFunc_vi(937); //@line 10
}
function _sleep_manager_unlock_deep_sleep_internal() {
 return;
}
function _initialize__async_cb_259($0) {
 $0 = $0 | 0;
 return;
}
function b291(p0) {
 p0 = p0 | 0;
 nullFunc_vi(936); //@line 7
}
function b290(p0) {
 p0 = p0 | 0;
 nullFunc_vi(935); //@line 4
}
function b289(p0) {
 p0 = p0 | 0;
 nullFunc_vi(934); //@line 1
}
function _us_ticker_set_interrupt($0) {
 $0 = $0 | 0;
 return;
}
function _invoke_ticker__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___clang_call_terminate__async_cb($0) {
 $0 = $0 | 0;
}
function __ZN14LoRaMacCommandD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function _sleep_manager_lock_deep_sleep_internal() {
 return;
}
function _us_ticker_get_info() {
 return 10184; //@line 7425
}
function _serial_putc__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbed_tracef__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _get_us_ticker_data() {
 return 10128; //@line 6588
}
function ___errno_location() {
 return 23716; //@line 10857
}
function __ZSt9terminatev__async_cb_262($0) {
 $0 = $0 | 0;
}
function __ZN11LoRaMacMlmeD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMcpsD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMcpsC2Ev($0) {
 $0 = $0 | 0;
 return;
}
function ___cxa_guard_release($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN10LoRaMacMibD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function getTempRet0() {
 return tempRet0 | 0; //@line 42
}
function _wait_ms__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___cxa_guard_abort($0) {
 $0 = $0 | 0;
 return;
}
function stackSave() {
 return STACKTOP | 0; //@line 12
}
function _pthread_self() {
 return 10452; //@line 10910
}
function _core_util_critical_section_enter() {
 return;
}
function __ZSt9terminatev__async_cb($0) {
 $0 = $0 | 0;
}
function _core_util_critical_section_exit() {
 return;
}
function _us_ticker_read() {
 return 0; //@line 7216
}
function ___unlockfile($0) {
 $0 = $0 | 0;
 return;
}
function _us_ticker_disable_interrupt() {
 return;
}
function _us_ticker_clear_interrupt() {
 return;
}
function setAsync() {
 ___async = 1; //@line 26
}
function _us_ticker_fire_interrupt() {
 return;
}
function b44() {
 nullFunc_v(0); //@line 34027
}
function _us_ticker_init() {
 return;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b1,_ccm_ctx_alloc,_gcm_ctx_alloc,_aes_ctx_alloc,_us_ticker_read,_us_ticker_get_info,b2,b3];
var FUNCTION_TABLE_ii = [b5,__ZN16SX1276_LoRaRadio6randomEv,__ZN16SX1276_LoRaRadio10get_statusEv,__ZN16LoRaWANInterface7connectEv,__ZN16LoRaWANInterface10disconnectEv,__ZN16LoRaWANInterface22add_link_check_requestEv,__ZN16LoRaWANInterface24enable_adaptive_datarateEv,__ZN16LoRaWANInterface25disable_adaptive_datarateEv,__ZN16LoRaWANInterface19remove_channel_planEv,___stdio_close,b6,b7,b8,b9,b10,b11];
var FUNCTION_TABLE_iii = [b13,__ZN16SX1276_LoRaRadio18check_rf_frequencyEj,__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE,__ZN16LoRaWANInterface7connectERK15lorawan_connect,__ZN16LoRaWANInterface12set_datarateEh,__ZN16LoRaWANInterface25set_confirmed_msg_retriesEh,__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan,__ZN16LoRaWANInterface16get_channel_planER16lora_channelplan,__ZN16LoRaWANInterface14remove_channelEh,__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t,__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s,__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s,__ZN7LoRaPHY25accept_tx_param_setup_reqEP20tx_param_setup_req_s,__ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s,__ZN7LoRaPHY16get_alternate_DREh,__ZN7LoRaPHY14remove_channelEh,__ZN7LoRaPHY16verify_frequencyEj,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25
,b26,b27,b28];
var FUNCTION_TABLE_iiii = [b30,__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa,__ZN7LoRaPHY11add_channelEP16channel_params_th,__ZN7LoRaPHY15apply_DR_offsetEaa,_ccm_aes_setkey_wrap,_gcm_aes_setkey_wrap,_aes_setkey_enc_wrap,_aes_setkey_dec_wrap,___stdio_write,___stdio_seek,___stdout_write,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_get_pkcs_padding,b31];
var FUNCTION_TABLE_iiiii = [b33,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj,_aes_crypt_ecb_wrap,b34];
var FUNCTION_TABLE_iiiiii = [b36,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj,__ZN16LoRaWANInterface4sendEhPKhti,__ZN16LoRaWANInterface7receiveEhPhti,__ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_,b37,b38,b39];
var FUNCTION_TABLE_iiiiiii = [b41,__ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_,_aes_crypt_cbc_wrap,b42];
var FUNCTION_TABLE_v = [b44,___cxa_pure_virtual__wrapper,_us_ticker_init,_us_ticker_disable_interrupt,_us_ticker_clear_interrupt,_us_ticker_fire_interrupt,__ZL25default_terminate_handlerv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev];
var FUNCTION_TABLE_vi = [b46,__ZN16SX1276_LoRaRadio11radio_resetEv,__ZN16SX1276_LoRaRadio5sleepEv,__ZN16SX1276_LoRaRadio7standbyEv,__ZN16SX1276_LoRaRadio9start_cadEv,__ZN16SX1276_LoRaRadio4lockEv,__ZN16SX1276_LoRaRadio6unlockEv,__ZN16SX1276_LoRaRadioD2Ev,__ZN16SX1276_LoRaRadioD0Ev,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv,__ZN4mbed11InterruptInD2Ev,__ZN4mbed11InterruptInD0Ev,__ZN4mbed7TimeoutD2Ev,__ZN4mbed7TimeoutD0Ev,__ZN4mbed7Timeout7handlerEv,__ZN4mbed10TimerEventD2Ev,__ZN4mbed10TimerEventD0Ev,_mbed_trace_default_print,__ZN16LoRaWANInterface25remove_link_check_requestEv,__ZN16LoRaWANInterfaceD2Ev,__ZN16LoRaWANInterfaceD0Ev,__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv,__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv,__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv,__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv,__ZN4mbed8CallbackIFvPhtsaEE13function_dtorINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPv
,__ZN7LoRaPHYD2Ev,__ZN7LoRaPHYD0Ev,__ZN7LoRaPHY24restore_default_channelsEv,__ZN12LoRaPHYEU868D2Ev,__ZN12LoRaPHYEU868D0Ev,_ccm_ctx_free,_gcm_ctx_free,_aes_ctx_free,_us_ticker_set_interrupt,__ZN4mbed10TimerEvent3irqEj,__ZN4mbed6TickerD2Ev,__ZN4mbed6TickerD0Ev,__ZN4mbed6Ticker7handlerEv,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb,__ZN16SX1276_LoRaRadio4sendEPhh__async_cb,__ZN16SX1276_LoRaRadio11rx_done_irqEv,__ZN16SX1276_LoRaRadio7receiveEj__async_cb,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_250,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_251,__ZN16SX1276_LoRaRadio15timeout_irq_isrEv,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_252,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_253,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_254,__ZN16SX1276_LoRaRadio6randomEv__async_cb
,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_315,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_311,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_312,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_314,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_313,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_310,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_263,__ZN16SX1276_LoRaRadioD2Ev__async_cb,__ZN16SX1276_LoRaRadioD2Ev__async_cb_404,__ZN16SX1276_LoRaRadioD2Ev__async_cb_398,__ZN16SX1276_LoRaRadioD2Ev__async_cb_403,__ZN16SX1276_LoRaRadioD2Ev__async_cb_399,__ZN16SX1276_LoRaRadioD2Ev__async_cb_402,__ZN16SX1276_LoRaRadioD2Ev__async_cb_400,__ZN16SX1276_LoRaRadioD2Ev__async_cb_401,__ZN16SX1276_LoRaRadioD2Ev__async_cb_410,__ZN16SX1276_LoRaRadioD2Ev__async_cb_409,__ZN16SX1276_LoRaRadioD2Ev__async_cb_408,__ZN16SX1276_LoRaRadioD2Ev__async_cb_407,__ZN16SX1276_LoRaRadioD2Ev__async_cb_406,__ZN16SX1276_LoRaRadioD2Ev__async_cb_405,__ZN16SX1276_LoRaRadioD0Ev__async_cb,__ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb,__ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_61,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_62,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_63
,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_64,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb,__ZN16SX1276_LoRaRadio11tx_done_irqEv,__ZN16SX1276_LoRaRadio8transmitEj__async_cb,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_178,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_179,__ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_226,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_225,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_224,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb,__ZN4mbed11InterruptInD2Ev__async_cb,__ZN4mbed11InterruptInD2Ev__async_cb_249,__ZN4mbed11InterruptInD0Ev__async_cb,__ZN4mbed11InterruptInD0Ev__async_cb_191,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_284,__ZN4mbed7TimeoutD2Ev__async_cb,__ZN4mbed7TimeoutD2Ev__async_cb_337,__ZN4mbed7TimeoutD0Ev__async_cb,__ZN4mbed7TimeoutD0Ev__async_cb_370,__ZN4mbed7Timeout7handlerEv__async_cb_316,__ZN4mbed7Timeout7handlerEv__async_cb,__ZN4mbed5TimerC2Ev__async_cb,__ZN4mbed5Timer5startEv__async_cb,__ZN4mbed5Timer7read_msEv__async_cb,__ZN4mbed10TimerEventD2Ev__async_cb,__ZN4mbed10TimerEventC2Ev__async_cb,__ZN4mbed10TimerEvent3irqEj__async_cb,__ZN6events10EventQueue6cancelEi__async_cb
,_equeue_alloc__async_cb,_equeue_post__async_cb,_equeue_enqueue__async_cb,_equeue_cancel__async_cb,_mbed_trace_default_print__async_cb,_mbed_tracef__async_cb,_mbed_vtracef__async_cb,_mbed_vtracef__async_cb_387,_mbed_vtracef__async_cb_377,_mbed_vtracef__async_cb_378,_mbed_vtracef__async_cb_379,_mbed_vtracef__async_cb_386,_mbed_vtracef__async_cb_380,_mbed_vtracef__async_cb_385,_mbed_vtracef__async_cb_381,_mbed_vtracef__async_cb_382,_mbed_vtracef__async_cb_383,_mbed_vtracef__async_cb_384,__ZN16LoRaWANInterface7connectEv__async_cb,__ZN16LoRaWANInterface4sendEhPKhti__async_cb,__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb,__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_268,__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_269,__ZN12LoRaWANStackC2Ev__async_cb,__ZN12LoRaWANStackC2Ev__async_cb_297,__ZN12LoRaWANStackC2Ev__async_cb_298,__ZN12LoRaWANStackC2Ev__async_cb_299,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_296,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_292
,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_285,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_295,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_286,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_291,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_287,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_294,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_288,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_290,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_289,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_293,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_201,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_196,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_203,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_197,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_200,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_198,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_202,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_199,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_246,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_243,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_242,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_241,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_237,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_245,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_238,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_240,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_239,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_244
,__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb,__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_358,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_351,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_357,__ZN12LoRaWANStack18lora_state_machineEv__async_cb,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_364,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_341,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_369,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_359,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_342,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_363,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_343,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_368,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_356,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_355,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_354,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_353,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_352,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_344,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_362,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_345,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_367,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_350,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_346,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_361,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_347,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_366,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_348,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_360
,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_349,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_365,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_65,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_70,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_66,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_69,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_67,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_68,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_49,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_54,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_50,__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_53,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_51,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_52,__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_78,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_33,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb,__ZN12LoRaWANStack17send_frame_to_macEv__async_cb,__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_102
,__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb,__ZN12LoRaWANStack17get_lorawan_stackEv__async_cb,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb,__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_265,__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_264,__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb,__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_266,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_206,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_207,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_208,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_209,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_210,__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb,__ZN12LoRaWANStack17drop_channel_listEv__async_cb,__ZN12LoRaWANStack16remove_a_channelEh__async_cb,__ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb,__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb,__ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb,__ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb,__ZN12LoRaWANStack22set_link_check_requestEv__async_cb,__ZN12LoRaWANStack8shutdownEv__async_cb,__ZN7LoRaMacD2Ev__async_cb_47,__ZN7LoRaMacD2Ev__async_cb,__ZN12radio_eventsD2Ev__async_cb,__ZN12radio_eventsD2Ev__async_cb_55,__ZN12radio_eventsD2Ev__async_cb_56,__ZN12radio_eventsD2Ev__async_cb_57,__ZN12radio_eventsD2Ev__async_cb_58,__ZN12radio_eventsD2Ev__async_cb_59
,__ZN12radio_eventsD2Ev__async_cb_60,__ZN14lorawan_timersD2Ev__async_cb,__ZN14lorawan_timersD2Ev__async_cb_71,__ZN14lorawan_timersD2Ev__async_cb_72,__ZN14lorawan_timersD2Ev__async_cb_73,__ZN14lorawan_timersD2Ev__async_cb_74,__ZN7LoRaMac16on_radio_tx_doneEv,__ZN7LoRaMac14handle_tx_doneEv__async_cb,__ZN7LoRaMac14handle_tx_doneEv__async_cb_32,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_37,__ZN7LoRaMac25on_rx_window2_timer_eventEv,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_38,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_39,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_36,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_35,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_34,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb,__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_11,__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv,__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_10,__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_9,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_76,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb,__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_165,__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb,__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_164
,__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_175,__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb,__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_176,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_124,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_138,__ZN7LoRaMac26on_ack_timeout_timer_eventEv,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_135,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_146,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_123,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_114,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_134,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_145,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_122,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_133,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_144,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_121,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_113,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_112,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_132,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_143,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_120,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_131,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_142,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_119,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_130,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_141,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_118,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_127,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_126
,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_125,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_137,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_136,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_129,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_140,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_117,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_128,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_139,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_116,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_115,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_149,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_154,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_150,__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_153,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_151,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_152,__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb_267,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb,__ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa__async_cb,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb,__ZN7LoRaMac17on_radio_rx_errorEv,__ZN7LoRaMac15handle_rx_errorEv__async_cb,__ZN7LoRaMac15handle_rx_errorEv__async_cb_215,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_220,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_222,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb
,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_221,__ZN7LoRaMac19on_radio_rx_timeoutEv,__ZN7LoRaMac17handle_rx_timeoutEv__async_cb,__ZN7LoRaMac17handle_rx_timeoutEv__async_cb_411,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_416,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_418,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_417,__ZN7LoRaMac19on_radio_tx_timeoutEv,__ZN7LoRaMac17handle_tx_timeoutEv__async_cb,__ZN7LoRaMac17handle_tx_timeoutEv__async_cb_372,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_389,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_390,__ZN7LoRaMac30on_mac_state_check_timer_eventEv,__ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb,__ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb_373,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_328,__ZN7LoRaMac25on_tx_delayed_timer_eventEv,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_327,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_335,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_326,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_334,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_324,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_333,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_319,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_332,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_320,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_323
,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_325,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_331,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_330,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_321,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_329,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_322,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_340,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_338,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_339,__ZN7LoRaMac11schedule_txEv__async_cb,__ZN7LoRaMac11schedule_txEv__async_cb_302,__ZN7LoRaMac11schedule_txEv__async_cb_303,__ZN7LoRaMac11schedule_txEv__async_cb_304,__ZN7LoRaMac11schedule_txEv__async_cb_305,__ZN7LoRaMac11schedule_txEv__async_cb_307,__ZN7LoRaMac11schedule_txEv__async_cb_306,__ZN7LoRaMac21send_frame_on_channelEh__async_cb,__ZN7LoRaMac21send_frame_on_channelEh__async_cb_317,__ZN7LoRaMac21send_frame_on_channelEh__async_cb_318,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_83,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_81,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_82,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb,__ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb,__ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb_77,__ZN7LoRaMac18handle_ack_timeoutEv__async_cb,__ZN7LoRaMac18handle_ack_timeoutEv__async_cb_75,__ZN7LoRaMac25on_rx_window1_timer_eventEv,__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb
,__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb_48,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_46,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_45,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_44,__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb,__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb_30,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_26,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_27,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_28,__ZN7LoRaMac34handle_mac_state_check_timer_eventEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_25,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb,__ZN7LoRaMac29handle_delayed_tx_timer_eventEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_24,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_17,__ZN7LoRaMac22handle_rx1_timer_eventEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_23,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_18,__ZN7LoRaMac22handle_rx2_timer_eventEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_22,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_19,__ZN7LoRaMac18handle_ack_timeoutEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_21,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_20,__ZN7LoRaMac10disconnectEv__async_cb_5,__ZN7LoRaMac10disconnectEv__async_cb_4,__ZN7LoRaMac10disconnectEv__async_cb_3,__ZN7LoRaMac10disconnectEv__async_cb_2,__ZN7LoRaMac10disconnectEv__async_cb_1
,__ZN7LoRaMac10disconnectEv__async_cb,__ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t__async_cb,__ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb,__ZN7LoRaMac19remove_channel_planEv__async_cb,__ZN7LoRaMac21remove_single_channelEh__async_cb,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_106,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_111,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_110,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_108,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_109,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_107,__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb,__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb_100,__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb,__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_300,__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_301,__ZN7LoRaMac14handle_tx_doneEv,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_270,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_271,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_272,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_273,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_274,__ZN7LoRaMac15handle_rx_errorEv,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_275,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_276,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_277,__ZN7LoRaMac17handle_tx_timeoutEv,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_278
,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_279,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_280,__ZN7LoRaMac17handle_rx_timeoutEv,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_281,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_282,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_283,__ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb,__ZN18LoRaMacChannelPlan11remove_planEv__async_cb,__ZN18LoRaMacChannelPlan11remove_planEv__async_cb_205,__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb,__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_415,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_180,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_181,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_182,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_183,__Z11compute_micPKhtS0_jhjPj__async_cb_15,__Z11compute_micPKhtS0_jhjPj__async_cb_14,__Z11compute_micPKhtS0_jhjPj__async_cb_12,__Z11compute_micPKhtS0_jhjPj__async_cb,__Z11compute_micPKhtS0_jhjPj__async_cb_13,__Z11compute_micPKhtS0_jhjPj__async_cb_16,__Z22compute_join_frame_micPKhtS0_Pj__async_cb_42,__Z22compute_join_frame_micPKhtS0_Pj__async_cb_41,__Z22compute_join_frame_micPKhtS0_Pj__async_cb,__Z22compute_join_frame_micPKhtS0_Pj__async_cb_40,__Z22compute_join_frame_micPKhtS0_Pj__async_cb_43,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_395,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_394,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb
,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_392,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_393,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_391,__ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft__async_cb,__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb,__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb_101,__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb,__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb_105,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_167,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_168,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_169,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_170,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_171,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_172,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_173,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_174,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_184,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_185,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_186,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_187,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_188,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_189,__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb,__ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s__async_cb,__ZN7LoRaPHY11add_channelEP16channel_params_th__async_cb,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_79,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_80
,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_396,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_397,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_218,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_219,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_216,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_217,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_192,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_193,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_194,__ZN7LoRaPHY13get_radio_rngEv__async_cb,__ZN7LoRaPHY13get_radio_rngEv__async_cb_247,__ZN7LoRaPHY13get_radio_rngEv__async_cb_248,__ZN7LoRaPHY11handle_sendEPhh__async_cb,__ZN7LoRaPHY11handle_sendEPhh__async_cb_235,__ZN7LoRaPHY11handle_sendEPhh__async_cb_236,__ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb,__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb,__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_388,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_230,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_227,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_229,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_228,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_231,__ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb,_mbedtls_ccm_setkey__async_cb_104
,_mbedtls_ccm_setkey__async_cb_103,_mbedtls_ccm_setkey__async_cb,_mbedtls_ccm_free__async_cb,_mbedtls_cipher_free__async_cb,_mbedtls_cipher_setup__async_cb,_mbedtls_cipher_setkey__async_cb,_mbedtls_cipher_setkey__async_cb_29,_mbedtls_cipher_update__async_cb,_mbedtls_cipher_update__async_cb_8,_mbedtls_cipher_update__async_cb_6,_mbedtls_cipher_update__async_cb_7,_ccm_aes_setkey_wrap__async_cb,_ccm_ctx_free__async_cb,_gcm_aes_setkey_wrap__async_cb,_gcm_ctx_free__async_cb,_mbedtls_cipher_cmac_starts__async_cb,_mbedtls_cipher_cmac_update__async_cb_375,_mbedtls_cipher_cmac_update__async_cb_374,_mbedtls_cipher_cmac_update__async_cb,_mbedtls_cipher_cmac_finish__async_cb_371,_mbedtls_cipher_cmac_finish__async_cb,_mbedtls_gcm_setkey__async_cb_234,_mbedtls_gcm_setkey__async_cb_233,_mbedtls_gcm_setkey__async_cb_232,_mbedtls_gcm_setkey__async_cb,_mbedtls_gcm_update__async_cb,_mbedtls_gcm_free__async_cb,_ticker_set_handler__async_cb,_initialize__async_cb,_initialize__async_cb_256
,_initialize__async_cb_261,_initialize__async_cb_260,_initialize__async_cb_257,_initialize__async_cb_258,_initialize__async_cb_259,_schedule_interrupt__async_cb,_schedule_interrupt__async_cb_155,_schedule_interrupt__async_cb_156,_schedule_interrupt__async_cb_157,_schedule_interrupt__async_cb_158,_schedule_interrupt__async_cb_159,_schedule_interrupt__async_cb_160,_ticker_remove_event__async_cb,_ticker_read_us__async_cb_177,_ticker_read_us__async_cb,_mbed_assert_internal__async_cb,_mbed_die__async_cb_99,_mbed_die__async_cb_98,_mbed_die__async_cb_97,_mbed_die__async_cb_96,_mbed_die__async_cb_95,_mbed_die__async_cb_94,_mbed_die__async_cb_93,_mbed_die__async_cb_92,_mbed_die__async_cb_91,_mbed_die__async_cb_90,_mbed_die__async_cb_89,_mbed_die__async_cb_88,_mbed_die__async_cb_87,_mbed_die__async_cb_86
,_mbed_die__async_cb_85,_mbed_die__async_cb,_mbed_error_printf__async_cb,_mbed_error_vfprintf__async_cb,_mbed_error_vfprintf__async_cb_148,_mbed_error_vfprintf__async_cb_147,_handle_interrupt_in__async_cb,_serial_putc__async_cb_31,_serial_putc__async_cb,__ZN4mbed6TickerD2Ev__async_cb,__ZN4mbed6TickerD2Ev__async_cb_413,__ZN4mbed6TickerD0Ev__async_cb,__ZN4mbed6TickerD0Ev__async_cb_309,__ZN4mbed6Ticker7handlerEv__async_cb,_invoke_ticker__async_cb_336,_invoke_ticker__async_cb,_wait_ms__async_cb,__GLOBAL__sub_I_main_cpp__async_cb,__GLOBAL__sub_I_main_cpp__async_cb_255,_main__async_cb,_putc__async_cb_308,_putc__async_cb,___overflow__async_cb,_fflush__async_cb_162,_fflush__async_cb_161,_fflush__async_cb_163,_fflush__async_cb,___fflush_unlocked__async_cb,___fflush_unlocked__async_cb_166,_vfprintf__async_cb
,_snprintf__async_cb,_vsnprintf__async_cb,_fputc__async_cb_204,_fputc__async_cb,_puts__async_cb,__ZL25default_terminate_handlerv__async_cb,__ZL25default_terminate_handlerv__async_cb_190,_abort_message__async_cb,_abort_message__async_cb_412,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_84,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb,___dynamic_cast__async_cb,___dynamic_cast__async_cb_414,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_376,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,__ZSt11__terminatePFvvE__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_195,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_214,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_213,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_212,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_211,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_223,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb
,__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,___cxa_can_catch__async_cb,___cxa_is_pointer_type__async_cb,b47,b48,b49,b50,b51,b52,b53,b54,b55,b56,b57,b58,b59,b60,b61,b62,b63,b64,b65,b66,b67,b68,b69,b70,b71,b72,b73
,b74,b75,b76,b77,b78,b79,b80,b81,b82,b83,b84,b85,b86,b87,b88,b89,b90,b91,b92,b93,b94,b95,b96,b97,b98,b99,b100,b101,b102,b103
,b104,b105,b106,b107,b108,b109,b110,b111,b112,b113,b114,b115,b116,b117,b118,b119,b120,b121,b122,b123,b124,b125,b126,b127,b128,b129,b130,b131,b132,b133
,b134,b135,b136,b137,b138,b139,b140,b141,b142,b143,b144,b145,b146,b147,b148,b149,b150,b151,b152,b153,b154,b155,b156,b157,b158,b159,b160,b161,b162,b163
,b164,b165,b166,b167,b168,b169,b170,b171,b172,b173,b174,b175,b176,b177,b178,b179,b180,b181,b182,b183,b184,b185,b186,b187,b188,b189,b190,b191,b192,b193
,b194,b195,b196,b197,b198,b199,b200,b201,b202,b203,b204,b205,b206,b207,b208,b209,b210,b211,b212,b213,b214,b215,b216,b217,b218,b219,b220,b221,b222,b223
,b224,b225,b226,b227,b228,b229,b230,b231,b232,b233,b234,b235,b236,b237,b238,b239,b240,b241,b242,b243,b244,b245,b246,b247,b248,b249,b250,b251,b252,b253
,b254,b255,b256,b257,b258,b259,b260,b261,b262,b263,b264,b265,b266,b267,b268,b269,b270,b271,b272,b273,b274,b275,b276,b277,b278,b279,b280,b281,b282,b283
,b284,b285,b286,b287,b288,b289,b290,b291,b292,b293,b294,b295,b296,b297,b298,b299,b300,b301,b302,b303,b304,b305,b306,b307,b308,b309,b310,b311,b312,b313
,b314,b315,b316,b317,b318,b319,b320,b321,b322,b323,b324,b325,b326,b327,b328,b329,b330,b331,b332,b333,b334,b335,b336,b337,b338,b339,b340,b341,b342,b343
,b344,b345,b346,b347,b348,b349,b350,b351,b352,b353,b354,b355,b356,b357,b358,b359,b360,b361,b362,b363,b364,b365,b366,b367,b368,b369,b370,b371,b372,b373
,b374,b375,b376,b377,b378];
var FUNCTION_TABLE_vii = [b380,__ZN16SX1276_LoRaRadio10init_radioEP12radio_events,__ZN16SX1276_LoRaRadio7receiveEj,__ZN16SX1276_LoRaRadio11set_channelEj,__ZN16SX1276_LoRaRadio18set_public_networkEb,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_,__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_,__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_,__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_,__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvPhtsaEE13function_moveINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPvPKv,__ZN7LoRaPHY16set_last_tx_doneEP24set_band_txdone_params_t,__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t,__ZN12LoRaWANStack23mlme_indication_handlerEP25loramac_mlme_indication_t,b381,b382,b383,b384,b385,b386
,b387,b388,b389];
var FUNCTION_TABLE_viii = [b391,__ZN16SX1276_LoRaRadio4sendEPhh,__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj,_add_pkcs_padding,b392,b393,b394];
var FUNCTION_TABLE_viiii = [b396,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b397,b398,b399];
var FUNCTION_TABLE_viiiii = [b401,__ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa,__ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZN7LoRaMac16on_radio_rx_doneEPhtsa,__ZN7LoRaMac14handle_rx_doneEPhtsa];
var FUNCTION_TABLE_viiiiii = [b403,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];
var FUNCTION_TABLE_viiiiiiiiiiiiii = [b405,__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj];
var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b407,__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb];

  return { __GLOBAL__sub_I_main_cpp: __GLOBAL__sub_I_main_cpp, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_alloc_async_context: _emscripten_alloc_async_context, _emscripten_async_resume: _emscripten_async_resume, _emscripten_free_async_context: _emscripten_free_async_context, _emscripten_realloc_async_context: _emscripten_realloc_async_context, _fflush: _fflush, _free: _free, _handle_interrupt_in: _handle_interrupt_in, _handle_lora_downlink: _handle_lora_downlink, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _invoke_ticker: _invoke_ticker, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memset: _memset, _pthread_mutex_lock: _pthread_mutex_lock, _pthread_mutex_unlock: _pthread_mutex_unlock, _sbrk: _sbrk, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setAsync: setAsync, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real___GLOBAL__sub_I_main_cpp = asm["__GLOBAL__sub_I_main_cpp"]; asm["__GLOBAL__sub_I_main_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_main_cpp.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__emscripten_alloc_async_context = asm["_emscripten_alloc_async_context"]; asm["_emscripten_alloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_alloc_async_context.apply(null, arguments);
};

var real__emscripten_async_resume = asm["_emscripten_async_resume"]; asm["_emscripten_async_resume"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_async_resume.apply(null, arguments);
};

var real__emscripten_free_async_context = asm["_emscripten_free_async_context"]; asm["_emscripten_free_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_free_async_context.apply(null, arguments);
};

var real__emscripten_realloc_async_context = asm["_emscripten_realloc_async_context"]; asm["_emscripten_realloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_realloc_async_context.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__handle_interrupt_in = asm["_handle_interrupt_in"]; asm["_handle_interrupt_in"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_interrupt_in.apply(null, arguments);
};

var real__handle_lora_downlink = asm["_handle_lora_downlink"]; asm["_handle_lora_downlink"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_lora_downlink.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__invoke_ticker = asm["_invoke_ticker"]; asm["_invoke_ticker"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__invoke_ticker.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_lock.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setAsync = asm["setAsync"]; asm["setAsync"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setAsync.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var __GLOBAL__sub_I_main_cpp = Module["__GLOBAL__sub_I_main_cpp"] = asm["__GLOBAL__sub_I_main_cpp"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_alloc_async_context = Module["_emscripten_alloc_async_context"] = asm["_emscripten_alloc_async_context"];
var _emscripten_async_resume = Module["_emscripten_async_resume"] = asm["_emscripten_async_resume"];
var _emscripten_free_async_context = Module["_emscripten_free_async_context"] = asm["_emscripten_free_async_context"];
var _emscripten_realloc_async_context = Module["_emscripten_realloc_async_context"] = asm["_emscripten_realloc_async_context"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _handle_interrupt_in = Module["_handle_interrupt_in"] = asm["_handle_interrupt_in"];
var _handle_lora_downlink = Module["_handle_lora_downlink"] = asm["_handle_lora_downlink"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _invoke_ticker = Module["_invoke_ticker"] = asm["_invoke_ticker"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memset = Module["_memset"] = asm["_memset"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setAsync = Module["setAsync"] = asm["setAsync"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = flush_NO_FILESYSTEM;
    if (flush) flush(0);
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}






//# sourceMappingURL=lorawan-abp.js.map