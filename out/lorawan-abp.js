// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [function($0, $1, $2, $3, $4, $5) { window.MbedJSHal.lora.sendFsk($0, $1, $2, $3, $4, $5); },
 function($0, $1, $2, $3, $4, $5) { window.MbedJSHal.lora.sendLoRa($0, $1, $2, $3, $4, $5); },
 function() { console.log('receive', Date.now()); },
 function() { return Date.now(); },
 function() { return Math.random() * 0x8000000 | 0; },
 function($0, $1) { MbedJSHal.gpio.write($0, $1); },
 function() { console.log('rx_frame', Date.now()); },
 function($0) { window.MbedJSHal.lora.init($0); },
 function($0, $1) { MbedJSHal.gpio.init_in($0, $1, 3); },
 function($0, $1) { MbedJSHal.gpio.init_out($0, $1, 0); },
 function($0, $1, $2) { MbedJSHal.gpio.init_out($0, $1, $2); },
 function($0, $1, $2, $3, $4) { MbedJSHal.gpio.init_inout($0, $1, $2, $3, $4); },
 function($0, $1) { MbedJSHal.gpio.irq_init($0, $1); },
 function($0, $1) { MbedJSHal.gpio.irq_free($0); },
 function($0) { window.MbedJSHal.timers.ticker_detach($0); },
 function($0, $1) { window.MbedJSHal.timers.ticker_setup($0, $1); },
 function($0, $1, $2) { window.MbedJSHal.sht31.init($0, $1, $2); }];

function _emscripten_asm_const_iii(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}

function _emscripten_asm_const_iiiiii(code, a0, a1, a2, a3, a4) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4);
}

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
  return ASM_CONSTS[code](a0, a1, a2);
}

function _emscripten_asm_const_i(code) {
  return ASM_CONSTS[code]();
}

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iiiiiii(code, a0, a1, a2, a3, a4, a5) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5);
}




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 24704;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_main_cpp() } });


memoryInitializer = "lorawan-abp.js.mem";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      var fflush = Module["_fflush"];
      if (fflush) fflush(0);
      var printChar = ___syscall146.printChar;
      if (!printChar) return;
      var buffers = ___syscall146.buffers;
      if (buffers[1].length) printChar(1, 10);
      if (buffers[2].length) printChar(2, 10);
    }function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffers) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___unlock() {}

   

  function _abort() {
      Module['abort']();
    }

   

   

  
  var ___async_cur_frame=0; 

  var _emscripten_asm_const_int=true;

   

   

  
  
  var ___async=0;
  
  var ___async_unwind=1;
  
  var ___async_retval=STATICTOP; STATICTOP += 16;; 
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_sleep(ms) {
      Module['setAsync'](); // tell the scheduler that we have a callback on hold
      Browser.safeSetTimeout(_emscripten_async_resume, ms);
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }



   

  var _llvm_ceil_f64=Math_ceil;

  var _llvm_floor_f64=Math_floor;

  function _llvm_trap() {
      abort('trap!');
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

  function _pthread_cond_init() { return 0; }

  function _pthread_cond_signal() { return 0; }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_mutex_init() {}

   

   

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    } 
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



var debug_table_i = ["0", "_ccm_ctx_alloc", "_gcm_ctx_alloc", "_aes_ctx_alloc", "_us_ticker_read", "_us_ticker_get_info", "0", "0"];
var debug_table_ii = ["0", "__ZN16SX1276_LoRaRadio6randomEv", "__ZN16SX1276_LoRaRadio10get_statusEv", "__ZN16LoRaWANInterface7connectEv", "__ZN16LoRaWANInterface10disconnectEv", "__ZN16LoRaWANInterface22add_link_check_requestEv", "__ZN16LoRaWANInterface24enable_adaptive_datarateEv", "__ZN16LoRaWANInterface25disable_adaptive_datarateEv", "__ZN16LoRaWANInterface19remove_channel_planEv", "___stdio_close", "0", "0", "0", "0", "0", "0"];
var debug_table_iii = ["0", "__ZN16SX1276_LoRaRadio18check_rf_frequencyEj", "__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE", "__ZN16LoRaWANInterface7connectERK15lorawan_connect", "__ZN16LoRaWANInterface12set_datarateEh", "__ZN16LoRaWANInterface25set_confirmed_msg_retriesEh", "__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan", "__ZN16LoRaWANInterface16get_channel_planER16lora_channelplan", "__ZN16LoRaWANInterface14remove_channelEh", "__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t", "__ZN16LoRaWANInterface16set_device_classE14device_class_t", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t", "__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s", "__ZN7LoRaPHY16get_alternate_DREh", "__ZN7LoRaPHY14remove_channelEh", "0"];
var debug_table_iiii = ["0", "__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh", "__ZN7LoRaPHY19request_new_channelEaP16channel_params_t", "__ZN7LoRaPHY25accept_tx_param_setup_reqEhh", "__ZN7LoRaPHY18dl_channel_requestEhj", "__ZN7LoRaPHY11add_channelEPK16channel_params_th", "__ZN7LoRaPHY15apply_DR_offsetEaa", "__ZNK7LoRaPHY25verify_frequency_for_bandEjh", "_ccm_aes_setkey_wrap", "_gcm_aes_setkey_wrap", "_aes_setkey_enc_wrap", "_aes_setkey_dec_wrap", "___stdio_write", "___stdio_seek", "___stdout_write", "_sn_write", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv", "_get_pkcs_padding", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiiii = ["0", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj", "_aes_crypt_ecb_wrap", "0"];
var debug_table_iiiiii = ["0", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj", "__ZN16LoRaWANInterface4sendEhPKhti", "__ZN16LoRaWANInterface7receiveEhPhti", "__ZN16LoRaWANInterface7receiveEPhtRhRi", "__ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_", "0", "0"];
var debug_table_iiiiiii = ["0", "__ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_", "_aes_crypt_cbc_wrap", "0"];
var debug_table_iiiiiiii = ["0", "_aes_crypt_ctr_wrap"];
var debug_table_v = ["0", "___cxa_pure_virtual", "_us_ticker_init", "_us_ticker_disable_interrupt", "_us_ticker_clear_interrupt", "_us_ticker_fire_interrupt", "__ZL25default_terminate_handlerv", "__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev"];
var debug_table_vi = ["0", "__ZN16SX1276_LoRaRadio11radio_resetEv", "__ZN16SX1276_LoRaRadio5sleepEv", "__ZN16SX1276_LoRaRadio7standbyEv", "__ZN16SX1276_LoRaRadio9start_cadEv", "__ZN16SX1276_LoRaRadio4lockEv", "__ZN16SX1276_LoRaRadio6unlockEv", "__ZN16SX1276_LoRaRadioD2Ev", "__ZN16SX1276_LoRaRadioD0Ev", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv", "__ZN4mbed11InterruptInD2Ev", "__ZN4mbed11InterruptInD0Ev", "__ZN4mbed7TimeoutD2Ev", "__ZN4mbed7TimeoutD0Ev", "__ZN4mbed7Timeout7handlerEv", "__ZN4mbed10TimerEventD2Ev", "__ZN4mbed10TimerEventD0Ev", "_mbed_trace_default_print", "__ZN16LoRaWANInterface25remove_link_check_requestEv", "__ZN16LoRaWANInterfaceD2Ev", "__ZN16LoRaWANInterfaceD0Ev", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPv", "__ZN4mbed8CallbackIFvPKhtsaEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPv", "__ZN4mbed8CallbackIFvbEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPv", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv", "__ZN7LoRaPHYD2Ev", "__ZN7LoRaPHYD0Ev", "__ZN7LoRaPHY24restore_default_channelsEv", "__ZN12LoRaPHYEU868D2Ev", "__ZN12LoRaPHYEU868D0Ev", "_ccm_ctx_free", "_gcm_ctx_free", "_aes_ctx_free", "_us_ticker_set_interrupt", "__ZN4mbed6TickerD2Ev", "__ZN4mbed6TickerD0Ev", "__ZN4mbed6Ticker7handlerEv", "__ZN10__cxxabiv116__shim_type_infoD2Ev", "__ZN10__cxxabiv117__class_type_infoD0Ev", "__ZNK10__cxxabiv116__shim_type_info5noop1Ev", "__ZNK10__cxxabiv116__shim_type_info5noop2Ev", "__ZN10__cxxabiv120__si_class_type_infoD0Ev", "__ZN10__cxxabiv121__vmi_class_type_infoD0Ev", "__ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb", "__ZN16SX1276_LoRaRadio4sendEPhh__async_cb", "__ZN16SX1276_LoRaRadio11rx_done_irqEv", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_115", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_116", "__ZN16SX1276_LoRaRadio15timeout_irq_isrEv", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_117", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_118", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_119", "__ZN16SX1276_LoRaRadio6randomEv__async_cb", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_47", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_43", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_44", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_46", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_45", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_42", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_124", "__ZN16SX1276_LoRaRadioD2Ev__async_cb", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_347", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_341", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_346", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_342", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_345", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_343", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_344", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_353", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_352", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_351", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_350", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_349", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_348", "__ZN16SX1276_LoRaRadioD0Ev__async_cb", "__ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb", "__ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_210", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_211", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_212", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_213", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb", "__ZN16SX1276_LoRaRadio11tx_done_irqEv", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_278", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_279", "__ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_86", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_85", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_84", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb", "__ZN4mbed11InterruptInD2Ev__async_cb", "__ZN4mbed11InterruptInD2Ev__async_cb_127", "__ZN4mbed11InterruptInD0Ev__async_cb", "__ZN4mbed11InterruptInD0Ev__async_cb_158", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_19", "__ZN4mbed7TimeoutD2Ev__async_cb", "__ZN4mbed7TimeoutD2Ev__async_cb_13", "__ZN4mbed7TimeoutD0Ev__async_cb", "__ZN4mbed7TimeoutD0Ev__async_cb_64", "__ZN4mbed7Timeout7handlerEv__async_cb", "__ZN4mbed7Timeout7handlerEv__async_cb_67", "__ZN4mbed7Timeout7handlerEv__async_cb_65", "__ZN4mbed7Timeout7handlerEv__async_cb_66", "__ZN4mbed5TimerC2Ev__async_cb", "__ZN4mbed5Timer5startEv__async_cb", "__ZN4mbed5Timer7read_msEv__async_cb", "__ZN4mbed10TimerEventD2Ev__async_cb", "__ZN4mbed10TimerEvent3irqEj", "__ZN4mbed10TimerEventC2Ev__async_cb", "__ZN4mbed10TimerEvent3irqEj__async_cb", "__ZN6events10EventQueue6cancelEi__async_cb", "_equeue_alloc__async_cb", "_equeue_post__async_cb", "_equeue_enqueue__async_cb", "_equeue_cancel__async_cb", "_mbed_trace_default_print__async_cb", "_mbed_tracef__async_cb", "_mbed_vtracef__async_cb", "_mbed_vtracef__async_cb_324", "_mbed_vtracef__async_cb_314", "_mbed_vtracef__async_cb_315", "_mbed_vtracef__async_cb_316", "_mbed_vtracef__async_cb_323", "_mbed_vtracef__async_cb_317", "_mbed_vtracef__async_cb_322", "_mbed_vtracef__async_cb_318", "_mbed_vtracef__async_cb_319", "_mbed_vtracef__async_cb_320", "_mbed_vtracef__async_cb_321", "__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE__async_cb", "__ZN16LoRaWANInterface7connectEv__async_cb", "__ZN16LoRaWANInterface7connectERK15lorawan_connect__async_cb", "__ZN16LoRaWANInterface10disconnectEv__async_cb", "__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan__async_cb", "__ZN16LoRaWANInterface19remove_channel_planEv__async_cb", "__ZN16LoRaWANInterface14remove_channelEh__async_cb", "__ZN16LoRaWANInterface4sendEhPKhti__async_cb", "__ZN16LoRaWANInterface7receiveEhPhti__async_cb", "__ZN16LoRaWANInterface7receiveEPhtRhRi__async_cb", "__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t__async_cb", "__ZN16LoRaWANInterface16set_device_classE14device_class_t__async_cb", "__ZN16LoRaWANInterfaceD2Ev__async_cb", "__ZN16LoRaWANInterfaceD0Ev__async_cb", "__ZN12LoRaWANStackD2Ev__async_cb", "__ZN12LoRaWANStackD2Ev__async_cb_306", "__ZN12LoRaWANStackD2Ev__async_cb_307", "__ZN12LoRaWANStackD2Ev__async_cb_309", "__ZN12LoRaWANStackD2Ev__async_cb_308", "__ZN12radio_eventsD2Ev__async_cb", "__ZN12radio_eventsD2Ev__async_cb_330", "__ZN12radio_eventsD2Ev__async_cb_331", "__ZN12radio_eventsD2Ev__async_cb_332", "__ZN12radio_eventsD2Ev__async_cb_333", "__ZN12radio_eventsD2Ev__async_cb_334", "__ZN12radio_eventsD2Ev__async_cb_335", "__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb", "__ZN12LoRaWANStack20tx_interrupt_handlerEv", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_362", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_363", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_364", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_365", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_366", "__ZN12LoRaWANStack26rx_error_interrupt_handlerEv", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_367", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_368", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_369", "__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_370", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_371", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_372", "__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_373", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_374", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_375", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_376", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_377", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_378", "__ZN12LoRaWANStack20process_transmissionEv", "__ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb", "__ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb_384", "__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_390", "__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb", "__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_391", "__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_168", "__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb", "__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_169", "__ZN12LoRaWANStack28process_transmission_timeoutEv", "__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb", "__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb_185", "__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_201", "__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb", "__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_202", "__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb", "__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_206", "__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_205", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_227", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_232", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_228", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_231", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_229", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_230", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb_277", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb", "__ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb__async_cb", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_89", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_88", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_90", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_87", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_91", "__ZN12LoRaWANStack26process_status_check_stateEv__async_cb_122", "__ZN12LoRaWANStack26process_status_check_stateEv__async_cb_121", "__ZN12LoRaWANStack26process_status_check_stateEv__async_cb", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_111", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_104", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_114", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_105", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_110", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_106", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_113", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_107", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_109", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_108", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_112", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_148", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_141", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_151", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_142", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_147", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_143", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_150", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_144", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_146", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_145", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_149", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_152", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_157", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_153", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_156", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_154", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_155", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_1", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb", "__ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb", "__ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb_33", "__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_18", "__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv", "__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_17", "__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_16", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_35", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa__async_cb", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_337", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_340", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_339", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_338", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_336", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_300", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_305", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_301", "__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_304", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_302", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_303", "__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb_392", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_387", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_385", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_389", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_386", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_388", "__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb", "__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_187", "__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_186", "__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_188", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_179", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_184", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_180", "__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_183", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_181", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_182", "__ZN12LoRaWANStack23process_connected_stateEv__async_cb", "__ZN12LoRaWANStack23process_connected_stateEv__async_cb_208", "__ZN12LoRaWANStack23process_connected_stateEv__async_cb_207", "__ZN12LoRaWANStack23process_connected_stateEv__async_cb_209", "__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_267", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv__async_cb", "__ZN12LoRaWANStack20process_transmissionEv__async_cb", "__ZN12LoRaWANStack20process_transmissionEv__async_cb_100", "__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb", "__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_75", "__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb", "__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_74", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_81", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_80", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_82", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_79", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_83", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_130", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_131", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_132", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_133", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_134", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_135", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_137", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_136", "__ZN12LoRaWANStack7connectEv__async_cb", "__ZN12LoRaWANStack7connectERK15lorawan_connect__async_cb", "__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb", "__ZN12LoRaWANStack16remove_a_channelEh__async_cb", "__ZN12LoRaWANStack17drop_channel_listEv__async_cb", "__ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb_36", "__ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb", "__ZN12LoRaWANStack9handle_rxEPhtRhRib__async_cb", "__ZN12LoRaWANStack8shutdownEv__async_cb", "__ZN12LoRaWANStack16set_device_classERK14device_class_t__async_cb", "__ZN7LoRaMacD2Ev__async_cb", "__ZN7LoRaMacD2Ev__async_cb_379", "__ZN7LoRaMacD2Ev__async_cb_380", "__ZN7LoRaMacD2Ev__async_cb_381", "__ZN7LoRaMacD2Ev__async_cb_382", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_274", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_276", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_275", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_273", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_272", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_271", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb", "__ZN7LoRaMac15open_rx2_windowEv__async_cb_290", "__ZN7LoRaMac15open_rx2_windowEv__async_cb_289", "__ZN7LoRaMac15open_rx2_windowEv__async_cb", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_235", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_236", "__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_266", "__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb", "__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_265", "__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_264", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb", "__ZN7LoRaMac21handle_retransmissionEv__async_cb", "__ZN7LoRaMac21handle_retransmissionEv__async_cb_77", "__ZN7LoRaMac21handle_retransmissionEv__async_cb_76", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_167", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_165", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_166", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb", "__ZN7LoRaMac11schedule_txEv__async_cb", "__ZN7LoRaMac11schedule_txEv__async_cb_129", "__ZN7LoRaMac11schedule_txEv__async_cb_128", "__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb", "__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_123", "__ZN7LoRaMac23message_integrity_checkEPKhtPhjPjS1___async_cb", "__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_34", "__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_25", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_32", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_24", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_31", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_23", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_30", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_22", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_29", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_21", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_20", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_28", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_27", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_26", "__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb", "__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_15", "__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_14", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_9", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_8", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_7", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_5", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_3", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_4", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_6", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_10", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_2", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_61", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_60", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_59", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_58", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_57", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_56", "__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_38", "__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_41", "__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_40", "__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_39", "__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb", "__ZN7LoRaMac24continue_joining_processEv__async_cb", "__ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb", "__ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb_311", "__ZN7LoRaMac15open_rx1_windowEv__async_cb_299", "__ZN7LoRaMac15open_rx1_windowEv__async_cb_297", "__ZN7LoRaMac15open_rx1_windowEv__async_cb_298", "__ZN7LoRaMac15open_rx1_windowEv__async_cb", "__ZN7LoRaMac18prepare_ongoing_txEhPKhthh__async_cb", "__ZN7LoRaMac24get_max_possible_tx_sizeEh__async_cb", "__ZN7LoRaMac15send_ongoing_txEv__async_cb", "__ZN7LoRaMac15send_ongoing_txEv__async_cb_192", "__ZN7LoRaMac16set_device_classERK14device_class_t__async_cb_198", "__ZN7LoRaMac16set_device_classERK14device_class_t__async_cb_197", "__ZN7LoRaMac16set_device_classERK14device_class_t__async_cb_200", "__ZN7LoRaMac16set_device_classERK14device_class_t__async_cb_199", "__ZN7LoRaMac16set_device_classERK14device_class_t__async_cb", "__ZN7LoRaMac4joinEb__async_cb", "__ZN7LoRaMac4joinEb__async_cb_270", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_244", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_246", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_247", "__ZN7LoRaMac23on_backoff_timer_expiryEv", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_243", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb", "__ZN7LoRaMac15open_rx1_windowEv", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_242", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_237", "__ZN7LoRaMac15open_rx2_windowEv", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_241", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_238", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_240", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_239", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_245", "__ZN7LoRaMac10disconnectEv__async_cb_222", "__ZN7LoRaMac10disconnectEv__async_cb_221", "__ZN7LoRaMac10disconnectEv__async_cb_220", "__ZN7LoRaMac10disconnectEv__async_cb_219", "__ZN7LoRaMac10disconnectEv__async_cb", "__ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb", "__ZN7LoRaMac19remove_channel_planEv__async_cb", "__ZN7LoRaMac21remove_single_channelEh__async_cb", "__ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb", "__ZN18LoRaMacChannelPlan11remove_planEv__async_cb", "__ZN18LoRaMacChannelPlan11remove_planEv__async_cb_62", "__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb", "__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_68", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_325", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_326", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_327", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_328", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_329", "__ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb", "__ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_269", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_285", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_284", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_282", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_283", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_286", "__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_195", "__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_194", "__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb", "__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_193", "__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_196", "__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb", "__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_125", "__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_126", "__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb", "__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_101", "__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_102", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_92", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_93", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_94", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_95", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_96", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_97", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_98", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_99", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_49", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_50", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_51", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_52", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_53", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_54", "__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb", "__ZN7LoRaPHY18dl_channel_requestEhj__async_cb", "__ZN7LoRaPHY18dl_channel_requestEhj__async_cb_11", "__ZN7LoRaPHY11add_channelEPK16channel_params_th__async_cb", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_359", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_360", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_233", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_234", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_287", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_288", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_291", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_292", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_189", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_190", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_191", "__ZN7LoRaPHY13get_radio_rngEv__async_cb", "__ZN7LoRaPHY13get_radio_rngEv__async_cb_170", "__ZN7LoRaPHY13get_radio_rngEv__async_cb_171", "__ZN7LoRaPHY11handle_sendEPhh__async_cb", "__ZN7LoRaPHY11handle_sendEPhh__async_cb_214", "__ZN7LoRaPHY11handle_sendEPhh__async_cb_215", "__ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb", "__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb", "__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_310", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_357", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_354", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_356", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_355", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_358", "__ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb", "_mbedtls_ccm_setkey__async_cb_139", "_mbedtls_ccm_setkey__async_cb_138", "_mbedtls_ccm_setkey__async_cb", "_mbedtls_ccm_free__async_cb", "_mbedtls_cipher_free__async_cb", "_mbedtls_cipher_setup__async_cb", "_mbedtls_cipher_setkey__async_cb", "_mbedtls_cipher_setkey__async_cb_73", "_mbedtls_cipher_update__async_cb", "_mbedtls_cipher_update__async_cb_72", "_mbedtls_cipher_update__async_cb_69", "_mbedtls_cipher_update__async_cb_70", "_mbedtls_cipher_update__async_cb_71", "_ccm_aes_setkey_wrap__async_cb", "_ccm_ctx_free__async_cb", "_gcm_aes_setkey_wrap__async_cb", "_gcm_ctx_free__async_cb", "_mbedtls_cipher_cmac_starts__async_cb", "_mbedtls_cipher_cmac_update__async_cb_313", "_mbedtls_cipher_cmac_update__async_cb_312", "_mbedtls_cipher_cmac_update__async_cb", "_mbedtls_cipher_cmac_finish__async_cb_296", "_mbedtls_cipher_cmac_finish__async_cb", "_mbedtls_gcm_setkey__async_cb_295", "_mbedtls_gcm_setkey__async_cb_294", "_mbedtls_gcm_setkey__async_cb_293", "_mbedtls_gcm_setkey__async_cb", "_mbedtls_gcm_update__async_cb", "_mbedtls_gcm_free__async_cb", "_ticker_set_handler__async_cb", "_initialize__async_cb", "_initialize__async_cb_159", "_initialize__async_cb_164", "_initialize__async_cb_163", "_initialize__async_cb_160", "_initialize__async_cb_161", "_initialize__async_cb_162", "_schedule_interrupt__async_cb", "_schedule_interrupt__async_cb_172", "_schedule_interrupt__async_cb_173", "_schedule_interrupt__async_cb_174", "_schedule_interrupt__async_cb_175", "_schedule_interrupt__async_cb_176", "_schedule_interrupt__async_cb_177", "_ticker_remove_event__async_cb", "_ticker_read_us__async_cb_203", "_ticker_read_us__async_cb", "_mbed_assert_internal__async_cb", "_mbed_die__async_cb_262", "_mbed_die__async_cb_261", "_mbed_die__async_cb_260", "_mbed_die__async_cb_259", "_mbed_die__async_cb_258", "_mbed_die__async_cb_257", "_mbed_die__async_cb_256", "_mbed_die__async_cb_255", "_mbed_die__async_cb_254", "_mbed_die__async_cb_253", "_mbed_die__async_cb_252", "_mbed_die__async_cb_251", "_mbed_die__async_cb_250", "_mbed_die__async_cb_249", "_mbed_die__async_cb_248", "_mbed_die__async_cb", "_mbed_error_printf__async_cb", "_mbed_error_vfprintf__async_cb", "_mbed_error_vfprintf__async_cb_281", "_mbed_error_vfprintf__async_cb_280", "_handle_interrupt_in__async_cb", "_serial_putc__async_cb_383", "_serial_putc__async_cb", "__ZN4mbed6TickerD2Ev__async_cb", "__ZN4mbed6TickerD2Ev__async_cb_37", "__ZN4mbed6TickerD0Ev__async_cb", "__ZN4mbed6TickerD0Ev__async_cb_55", "__ZN4mbed6Ticker7handlerEv__async_cb", "_invoke_ticker__async_cb_63", "_invoke_ticker__async_cb", "_wait_ms__async_cb", "__GLOBAL__sub_I_main_cpp__async_cb", "_main__async_cb", "_putc__async_cb_48", "_putc__async_cb", "___overflow__async_cb", "_fflush__async_cb_217", "_fflush__async_cb_216", "_fflush__async_cb_218", "_fflush__async_cb", "___fflush_unlocked__async_cb", "___fflush_unlocked__async_cb_178", "_vfprintf__async_cb", "_snprintf__async_cb", "_vsnprintf__async_cb", "_fputc__async_cb_140", "_fputc__async_cb", "_puts__async_cb", "__ZL25default_terminate_handlerv__async_cb", "__ZL25default_terminate_handlerv__async_cb_204", "_abort_message__async_cb", "_abort_message__async_cb_103", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_268", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb", "___dynamic_cast__async_cb", "___dynamic_cast__async_cb_361", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_12", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv", "__ZSt11__terminatePFvvE__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_120", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_226", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_225", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_224", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_223", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_263", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "___cxa_can_catch__async_cb", "___cxa_is_pointer_type__async_cb", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_vii = ["0", "__ZN16SX1276_LoRaRadio10init_radioEP12radio_events", "__ZN16SX1276_LoRaRadio7receiveEj", "__ZN16SX1276_LoRaRadio11set_channelEj", "__ZN16SX1276_LoRaRadio18set_public_networkEb", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvPKhtsaEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPvPKv", "__ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb", "__ZN4mbed8CallbackIFvbEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event", "__ZN12LoRaWANStack25process_reception_timeoutEb", "0", "0", "0"];
var debug_table_viii = ["0", "__ZN16SX1276_LoRaRadio4sendEPhh", "__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh", "__ZN7LoRaPHY13apply_cf_listEPKhh", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj", "_add_pkcs_padding", "0", "0"];
var debug_table_viiii = ["0", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat", "__ZN7LoRaPHY16set_last_tx_doneEhbj", "__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "0", "0"];
var debug_table_viiiii = ["0", "__ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa", "__ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t", "__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa", "__ZN12LoRaWANStack17process_receptionEPKhtsa"];
var debug_table_viiiiii = ["0", "__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];
var debug_table_viiiiiiiiiiiiii = ["0", "__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj"];
var debug_table_viiiiiiiiiiiiiii = ["0", "__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb"];
function nullFunc_i(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: i: " + debug_table_i[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  i: " + debug_table_i[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  v: " + debug_table_v[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  i: " + debug_table_i[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  v: " + debug_table_v[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  v: " + debug_table_v[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iii: " + debug_table_iii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  v: " + debug_table_v[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iii: " + debug_table_iii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14) {
  try {
    Module["dynCall_viiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiiiiiiiiiiiii": invoke_viiiiiiiiiiiiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_pure_virtual": ___cxa_pure_virtual, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "_abort": _abort, "_emscripten_asm_const_i": _emscripten_asm_const_i, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "_emscripten_asm_const_iiiiii": _emscripten_asm_const_iiiiii, "_emscripten_asm_const_iiiiiii": _emscripten_asm_const_iiiiiii, "_emscripten_get_now": _emscripten_get_now, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_sleep": _emscripten_sleep, "_gettimeofday": _gettimeofday, "_llvm_ceil_f64": _llvm_ceil_f64, "_llvm_floor_f64": _llvm_floor_f64, "_llvm_trap": _llvm_trap, "_pthread_cond_init": _pthread_cond_init, "_pthread_cond_signal": _pthread_cond_signal, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_mutex_init": _pthread_mutex_init, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "flush_NO_FILESYSTEM": flush_NO_FILESYSTEM, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8, "___async": ___async, "___async_unwind": ___async_unwind, "___async_retval": ___async_retval, "___async_cur_frame": ___async_cur_frame };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;
  var ___async=env.___async|0;
  var ___async_unwind=env.___async_unwind|0;
  var ___async_retval=env.___async_retval|0;
  var ___async_cur_frame=env.___async_cur_frame|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var invoke_i=env.invoke_i;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall146=env.___syscall146;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var _abort=env._abort;
  var _emscripten_asm_const_i=env._emscripten_asm_const_i;
  var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
  var _emscripten_asm_const_iii=env._emscripten_asm_const_iii;
  var _emscripten_asm_const_iiii=env._emscripten_asm_const_iiii;
  var _emscripten_asm_const_iiiiii=env._emscripten_asm_const_iiiiii;
  var _emscripten_asm_const_iiiiiii=env._emscripten_asm_const_iiiiiii;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _emscripten_sleep=env._emscripten_sleep;
  var _gettimeofday=env._gettimeofday;
  var _llvm_ceil_f64=env._llvm_ceil_f64;
  var _llvm_floor_f64=env._llvm_floor_f64;
  var _llvm_trap=env._llvm_trap;
  var _pthread_cond_init=env._pthread_cond_init;
  var _pthread_cond_signal=env._pthread_cond_signal;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_mutex_init=env._pthread_mutex_init;
  var _pthread_once=env._pthread_once;
  var _pthread_setspecific=env._pthread_setspecific;
  var flush_NO_FILESYSTEM=env.flush_NO_FILESYSTEM;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i = 0, $$0107$be = 0, $$0109129 = 0, $$1$lcssa = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $121 = 0, $132 = 0, $133 = 0, $14 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $211 = 0, $214 = 0, $219 = 0, $22 = 0, $220 = 0, $226 = 0, $230 = 0, $233 = 0, $24 = 0, $240 = 0, $241 = 0, $247 = 0, $26 = 0, $266 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $337 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $4 = 0, $40 = 0, $403 = 0, $404 = 0, $418 = 0, $42 = 0, $439 = 0, $44 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $507 = 0, $511 = 0, $515 = 0, $52 = 0, $520 = 0, $521 = 0, $525 = 0, $529 = 0, $531 = 0, $533 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $604 = 0, $617 = 0, $62 = 0, $624 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $689 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $div = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12859
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12861
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 12863
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12865
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12867
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12869
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12871
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12873
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12875
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12877
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12879
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12881
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 12883
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 12885
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 12887
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 12889
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 12891
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 12893
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 12895
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 12897
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 12899
 $42 = HEAP8[$0 + 84 >> 0] | 0; //@line 12901
 $44 = HEAP8[$0 + 85 >> 0] | 0; //@line 12903
 $46 = HEAP32[$0 + 88 >> 2] | 0; //@line 12905
 $48 = HEAP32[$0 + 92 >> 2] | 0; //@line 12907
 $50 = HEAP32[$0 + 96 >> 2] | 0; //@line 12909
 $52 = HEAP32[$0 + 100 >> 2] | 0; //@line 12911
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 12913
 $56 = HEAP32[$0 + 108 >> 2] | 0; //@line 12915
 $58 = HEAP32[$0 + 112 >> 2] | 0; //@line 12917
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 12919
 $62 = HEAP32[$0 + 120 >> 2] | 0; //@line 12921
 $64 = HEAP32[$0 + 124 >> 2] | 0; //@line 12923
 $66 = HEAP32[$0 + 128 >> 2] | 0; //@line 12925
 $68 = HEAP32[$0 + 132 >> 2] | 0; //@line 12927
 $70 = HEAP32[$0 + 136 >> 2] | 0; //@line 12929
 $72 = HEAP32[$0 + 140 >> 2] | 0; //@line 12931
 $74 = HEAP32[$0 + 144 >> 2] | 0; //@line 12933
 $76 = HEAP32[$0 + 148 >> 2] | 0; //@line 12935
 $78 = HEAP32[$0 + 152 >> 2] | 0; //@line 12937
 $80 = HEAP32[$0 + 156 >> 2] | 0; //@line 12939
 $82 = HEAP32[$0 + 160 >> 2] | 0; //@line 12941
 $84 = HEAP32[$0 + 164 >> 2] | 0; //@line 12943
 $86 = HEAP32[$0 + 168 >> 2] | 0; //@line 12945
 $88 = HEAP32[$0 + 172 >> 2] | 0; //@line 12947
 $90 = HEAP32[$0 + 176 >> 2] | 0; //@line 12949
 $92 = HEAP32[$0 + 180 >> 2] | 0; //@line 12951
 $94 = HEAP32[$0 + 184 >> 2] | 0; //@line 12953
 $96 = HEAP32[$0 + 188 >> 2] | 0; //@line 12955
 $98 = HEAP32[$0 + 192 >> 2] | 0; //@line 12957
 $100 = HEAP32[$0 + 196 >> 2] | 0; //@line 12959
 $102 = HEAP32[$0 + 200 >> 2] | 0; //@line 12961
 $104 = HEAP32[$0 + 204 >> 2] | 0; //@line 12963
 $106 = HEAP32[$0 + 208 >> 2] | 0; //@line 12965
 $108 = HEAP32[$0 + 212 >> 2] | 0; //@line 12967
 $110 = HEAP32[$0 + 216 >> 2] | 0; //@line 12969
 $112 = HEAP32[$0 + 220 >> 2] | 0; //@line 12971
 $114 = HEAP32[$0 + 224 >> 2] | 0; //@line 12973
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 12975
 $118 = HEAP32[$0 + 232 >> 2] | 0; //@line 12977
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 12979
 if (($AsyncRetVal & 7) == 7) {
  HEAP8[$58 >> 0] = HEAP8[$94 >> 0] | 0; //@line 12984
  HEAP8[$32 >> 0] = HEAP8[$110 >> 0] | 0; //@line 12986
  HEAP8[$10 >> 0] = HEAP8[$116 >> 0] | 0; //@line 12988
 }
 $211 = HEAP8[$108 >> 0] | 0; //@line 12990
 if (($211 & 255) > 4) {
  $div = ($211 & 255) / 5 | 0; //@line 12993
  $214 = 128 - (HEAPU8[$118 >> 0] | 0) | 0; //@line 12997
  $$0109129 = 0; //@line 12998
  $220 = HEAP8[$104 >> 0] | 0; //@line 12998
  while (1) {
   $219 = $220 & 255; //@line 13000
   if (($214 - $219 | 0) > 1) {
    $226 = $220 + 2 << 24 >> 24; //@line 13007
    HEAP8[$38 + 4 + $219 >> 0] = 3; //@line 13009
    HEAP8[$104 >> 0] = $226; //@line 13010
    HEAP8[($220 + 1 & 255) + ($38 + 4) >> 0] = $AsyncRetVal; //@line 13011
    HEAP8[$100 >> 0] = 1; //@line 13012
    $$0$i = 0; //@line 13013
    $689 = $226; //@line 13013
   } else {
    $$0$i = -1010; //@line 13015
    $689 = $220; //@line 13015
   }
   $$0109129 = $$0109129 + 1 << 24 >> 24; //@line 13017
   if (($$0109129 & 255) >= ($div & 255)) {
    $$1$lcssa = $$0$i; //@line 13022
    break;
   } else {
    $220 = $689; //@line 13020
   }
  }
 } else {
  $$1$lcssa = $114; //@line 13027
 }
 $$0$be = $112 + 255 + ($211 & 255) & 255; //@line 13033
 $$0107$be = $$1$lcssa; //@line 13033
 L13 : while (1) {
  if (($$0$be & 255) >= ($42 & 255)) {
   label = 38; //@line 13037
   break;
  }
  $121 = $$0$be + 1 << 24 >> 24; //@line 13041
  switch (HEAP8[$36 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 13046
    break L13;
    break;
   }
  case 5:
   {
    label = 17; //@line 13051
    break L13;
    break;
   }
  case 7:
   {
    label = 26; //@line 13056
    break L13;
    break;
   }
  case 9:
   {
    label = 32; //@line 13061
    break L13;
    break;
   }
  case 10:
   {
    label = 35; //@line 13066
    break L13;
    break;
   }
  case 2:
   {
    HEAP32[$50 >> 2] = 0; //@line 13071
    HEAP8[$22 >> 0] = HEAP8[$36 + ($121 & 255) >> 0] | 0; //@line 13076
    HEAP8[$28 >> 0] = HEAP8[$36 + ($$0$be + 2 & 255) >> 0] | 0; //@line 13081
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 13082
    continue L13;
    break;
   }
  case 4:
   {
    $230 = $$0$be + 2 << 24 >> 24; //@line 13087
    $233 = HEAP8[$36 + ($121 & 255) >> 0] | 0; //@line 13090
    HEAP8[$96 >> 0] = $233; //@line 13091
    HEAP16[$88 >> 1] = 1 << ($233 & 255); //@line 13095
    $240 = HEAP8[$104 >> 0] | 0; //@line 13099
    $241 = $240 & 255; //@line 13100
    if ((128 - (HEAPU8[$118 >> 0] | 0) | 0) <= ($241 | 0)) {
     $$0$be = $230; //@line 13103
     $$0107$be = -1010; //@line 13103
     continue L13;
    }
    HEAP8[$104 >> 0] = $240 + 1 << 24 >> 24; //@line 13108
    HEAP8[$38 + 4 + $241 >> 0] = 4; //@line 13109
    HEAP8[$100 >> 0] = 1; //@line 13110
    $$0$be = $230; //@line 13111
    $$0107$be = 0; //@line 13111
    continue L13;
    break;
   }
  case 6:
   {
    $337 = HEAP32[$6 >> 2] | 0; //@line 13116
    if ($337 | 0) {
     label = 21; //@line 13119
     break L13;
    }
    $403 = HEAP8[$104 >> 0] | 0; //@line 13125
    $404 = $403 & 255; //@line 13126
    if ((128 - (HEAPU8[$118 >> 0] | 0) - $404 | 0) <= 2) {
     $$0$be = $121; //@line 13130
     $$0107$be = -1010; //@line 13130
     continue L13;
    }
    HEAP8[$38 + 4 + $404 >> 0] = 6; //@line 13135
    HEAP8[($403 + 1 & 255) + ($38 + 4) >> 0] = -1; //@line 13139
    HEAP8[$104 >> 0] = $403 + 3 << 24 >> 24; //@line 13141
    HEAP8[($403 + 2 & 255) + ($38 + 4) >> 0] = $4; //@line 13144
    HEAP8[$100 >> 0] = 1; //@line 13145
    $$0$be = $121; //@line 13146
    $$0107$be = 0; //@line 13146
    continue L13;
    break;
   }
  case 8:
   {
    $507 = $$0$be + 2 << 24 >> 24; //@line 13151
    $511 = HEAP8[$36 + ($121 & 255) >> 0] & 15; //@line 13155
    $515 = ($511 + ($511 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 13160
    HEAP32[$64 >> 2] = $515; //@line 13161
    HEAP32[$74 >> 2] = $515 + 1e3; //@line 13163
    $520 = HEAP8[$104 >> 0] | 0; //@line 13167
    $521 = $520 & 255; //@line 13168
    if ((128 - (HEAPU8[$118 >> 0] | 0) | 0) <= ($521 | 0)) {
     $$0$be = $507; //@line 13171
     $$0107$be = -1010; //@line 13171
     continue L13;
    }
    HEAP8[$104 >> 0] = $520 + 1 << 24 >> 24; //@line 13176
    HEAP8[$38 + 4 + $521 >> 0] = 8; //@line 13177
    HEAP8[$14 >> 0] = 1; //@line 13178
    HEAP8[$100 >> 0] = 1; //@line 13179
    $$0$be = $507; //@line 13180
    $$0107$be = 0; //@line 13180
    continue L13;
    break;
   }
  default:
   {
    $$0$be = $121; //@line 13185
    $$0107$be = -1013; //@line 13185
    continue L13;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$94 >> 0] = 0; //@line 13191
  HEAP8[$110 >> 0] = 0; //@line 13192
  HEAP8[$116 >> 0] = 0; //@line 13193
  HEAP8[$108 >> 0] = 0; //@line 13194
  $132 = $121 & 255; //@line 13195
  $133 = $132 + -1 | 0; //@line 13196
  HEAP32[$12 >> 2] = $36 + $133; //@line 13198
  HEAP8[$106 >> 0] = $52 - $133; //@line 13201
  HEAP8[$76 >> 0] = HEAP8[$82 >> 0] | 0; //@line 13203
  HEAP8[$66 >> 0] = HEAP8[$70 >> 0] | 0; //@line 13205
  HEAP8[$46 >> 0] = HEAP8[$58 >> 0] | 0; //@line 13207
  HEAP8[$18 >> 0] = HEAP8[$32 >> 0] | 0; //@line 13209
  HEAP8[$2 >> 0] = HEAP8[$10 >> 0] | 0; //@line 13211
  $144 = HEAP32[(HEAP32[$84 >> 2] | 0) + 36 >> 2] | 0; //@line 13214
  $ReallocAsyncCtx = _emscripten_realloc_async_context(236) | 0; //@line 13215
  $145 = FUNCTION_TABLE_iiiiiii[$144 & 3]($60, $102, $94, $110, $116, $108) | 0; //@line 13216
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 475; //@line 13219
   $146 = $ReallocAsyncCtx + 4 | 0; //@line 13220
   HEAP32[$146 >> 2] = $2; //@line 13221
   $147 = $ReallocAsyncCtx + 8 | 0; //@line 13222
   HEAP8[$147 >> 0] = $4; //@line 13223
   $148 = $ReallocAsyncCtx + 12 | 0; //@line 13224
   HEAP32[$148 >> 2] = $6; //@line 13225
   $149 = $ReallocAsyncCtx + 16 | 0; //@line 13226
   HEAP32[$149 >> 2] = $8; //@line 13227
   $150 = $ReallocAsyncCtx + 20 | 0; //@line 13228
   HEAP32[$150 >> 2] = $10; //@line 13229
   $151 = $ReallocAsyncCtx + 24 | 0; //@line 13230
   HEAP32[$151 >> 2] = $12; //@line 13231
   $152 = $ReallocAsyncCtx + 28 | 0; //@line 13232
   HEAP32[$152 >> 2] = $14; //@line 13233
   $153 = $ReallocAsyncCtx + 32 | 0; //@line 13234
   HEAP32[$153 >> 2] = $16; //@line 13235
   $154 = $ReallocAsyncCtx + 36 | 0; //@line 13236
   HEAP32[$154 >> 2] = $18; //@line 13237
   $155 = $ReallocAsyncCtx + 40 | 0; //@line 13238
   HEAP32[$155 >> 2] = $20; //@line 13239
   $156 = $ReallocAsyncCtx + 44 | 0; //@line 13240
   HEAP32[$156 >> 2] = $22; //@line 13241
   $157 = $ReallocAsyncCtx + 48 | 0; //@line 13242
   HEAP32[$157 >> 2] = $24; //@line 13243
   $158 = $ReallocAsyncCtx + 52 | 0; //@line 13244
   HEAP32[$158 >> 2] = $26; //@line 13245
   $159 = $ReallocAsyncCtx + 56 | 0; //@line 13246
   HEAP32[$159 >> 2] = $28; //@line 13247
   $160 = $ReallocAsyncCtx + 60 | 0; //@line 13248
   HEAP32[$160 >> 2] = $30; //@line 13249
   $161 = $ReallocAsyncCtx + 64 | 0; //@line 13250
   HEAP32[$161 >> 2] = $32; //@line 13251
   $162 = $ReallocAsyncCtx + 68 | 0; //@line 13252
   HEAP32[$162 >> 2] = $34; //@line 13253
   $163 = $ReallocAsyncCtx + 72 | 0; //@line 13254
   HEAP32[$163 >> 2] = $36; //@line 13255
   $164 = $ReallocAsyncCtx + 76 | 0; //@line 13256
   HEAP32[$164 >> 2] = $38; //@line 13257
   $165 = $ReallocAsyncCtx + 80 | 0; //@line 13258
   HEAP32[$165 >> 2] = $40; //@line 13259
   $166 = $ReallocAsyncCtx + 84 | 0; //@line 13260
   HEAP8[$166 >> 0] = $42; //@line 13261
   $167 = $ReallocAsyncCtx + 85 | 0; //@line 13262
   HEAP8[$167 >> 0] = $44; //@line 13263
   $168 = $ReallocAsyncCtx + 88 | 0; //@line 13264
   HEAP32[$168 >> 2] = $46; //@line 13265
   $169 = $ReallocAsyncCtx + 92 | 0; //@line 13266
   HEAP32[$169 >> 2] = $48; //@line 13267
   $170 = $ReallocAsyncCtx + 96 | 0; //@line 13268
   HEAP32[$170 >> 2] = $50; //@line 13269
   $171 = $ReallocAsyncCtx + 100 | 0; //@line 13270
   HEAP32[$171 >> 2] = $52; //@line 13271
   $172 = $ReallocAsyncCtx + 104 | 0; //@line 13272
   HEAP32[$172 >> 2] = $54; //@line 13273
   $173 = $ReallocAsyncCtx + 108 | 0; //@line 13274
   HEAP32[$173 >> 2] = $56; //@line 13275
   $174 = $ReallocAsyncCtx + 112 | 0; //@line 13276
   HEAP32[$174 >> 2] = $58; //@line 13277
   $175 = $ReallocAsyncCtx + 116 | 0; //@line 13278
   HEAP32[$175 >> 2] = $60; //@line 13279
   $176 = $ReallocAsyncCtx + 120 | 0; //@line 13280
   HEAP32[$176 >> 2] = $62; //@line 13281
   $177 = $ReallocAsyncCtx + 124 | 0; //@line 13282
   HEAP32[$177 >> 2] = $64; //@line 13283
   $178 = $ReallocAsyncCtx + 128 | 0; //@line 13284
   HEAP32[$178 >> 2] = $66; //@line 13285
   $179 = $ReallocAsyncCtx + 132 | 0; //@line 13286
   HEAP32[$179 >> 2] = $68; //@line 13287
   $180 = $ReallocAsyncCtx + 136 | 0; //@line 13288
   HEAP32[$180 >> 2] = $70; //@line 13289
   $181 = $ReallocAsyncCtx + 140 | 0; //@line 13290
   HEAP32[$181 >> 2] = $72; //@line 13291
   $182 = $ReallocAsyncCtx + 144 | 0; //@line 13292
   HEAP32[$182 >> 2] = $74; //@line 13293
   $183 = $ReallocAsyncCtx + 148 | 0; //@line 13294
   HEAP32[$183 >> 2] = $76; //@line 13295
   $184 = $ReallocAsyncCtx + 152 | 0; //@line 13296
   HEAP32[$184 >> 2] = $78; //@line 13297
   $185 = $ReallocAsyncCtx + 156 | 0; //@line 13298
   HEAP32[$185 >> 2] = $80; //@line 13299
   $186 = $ReallocAsyncCtx + 160 | 0; //@line 13300
   HEAP32[$186 >> 2] = $82; //@line 13301
   $187 = $ReallocAsyncCtx + 164 | 0; //@line 13302
   HEAP32[$187 >> 2] = $84; //@line 13303
   $188 = $ReallocAsyncCtx + 168 | 0; //@line 13304
   HEAP32[$188 >> 2] = $86; //@line 13305
   $189 = $ReallocAsyncCtx + 172 | 0; //@line 13306
   HEAP32[$189 >> 2] = $88; //@line 13307
   $190 = $ReallocAsyncCtx + 176 | 0; //@line 13308
   HEAP32[$190 >> 2] = $90; //@line 13309
   $191 = $ReallocAsyncCtx + 180 | 0; //@line 13310
   HEAP32[$191 >> 2] = $92; //@line 13311
   $192 = $ReallocAsyncCtx + 184 | 0; //@line 13312
   HEAP32[$192 >> 2] = $94; //@line 13313
   $193 = $ReallocAsyncCtx + 188 | 0; //@line 13314
   HEAP32[$193 >> 2] = $96; //@line 13315
   $194 = $ReallocAsyncCtx + 192 | 0; //@line 13316
   HEAP32[$194 >> 2] = $98; //@line 13317
   $195 = $ReallocAsyncCtx + 196 | 0; //@line 13318
   HEAP32[$195 >> 2] = $100; //@line 13319
   $196 = $ReallocAsyncCtx + 200 | 0; //@line 13320
   HEAP32[$196 >> 2] = $102; //@line 13321
   $197 = $ReallocAsyncCtx + 204 | 0; //@line 13322
   HEAP32[$197 >> 2] = $104; //@line 13323
   $198 = $ReallocAsyncCtx + 208 | 0; //@line 13324
   HEAP32[$198 >> 2] = $106; //@line 13325
   $199 = $ReallocAsyncCtx + 212 | 0; //@line 13326
   HEAP32[$199 >> 2] = $108; //@line 13327
   $200 = $ReallocAsyncCtx + 216 | 0; //@line 13328
   HEAP32[$200 >> 2] = $110; //@line 13329
   $201 = $ReallocAsyncCtx + 220 | 0; //@line 13330
   HEAP32[$201 >> 2] = $132; //@line 13331
   $202 = $ReallocAsyncCtx + 224 | 0; //@line 13332
   HEAP32[$202 >> 2] = $$0107$be; //@line 13333
   $203 = $ReallocAsyncCtx + 228 | 0; //@line 13334
   HEAP32[$203 >> 2] = $116; //@line 13335
   $204 = $ReallocAsyncCtx + 232 | 0; //@line 13336
   HEAP32[$204 >> 2] = $118; //@line 13337
   sp = STACKTOP; //@line 13338
   return;
  }
  HEAP8[___async_retval >> 0] = $145; //@line 13342
  ___async_unwind = 0; //@line 13343
  HEAP32[$ReallocAsyncCtx >> 2] = 475; //@line 13344
  $146 = $ReallocAsyncCtx + 4 | 0; //@line 13345
  HEAP32[$146 >> 2] = $2; //@line 13346
  $147 = $ReallocAsyncCtx + 8 | 0; //@line 13347
  HEAP8[$147 >> 0] = $4; //@line 13348
  $148 = $ReallocAsyncCtx + 12 | 0; //@line 13349
  HEAP32[$148 >> 2] = $6; //@line 13350
  $149 = $ReallocAsyncCtx + 16 | 0; //@line 13351
  HEAP32[$149 >> 2] = $8; //@line 13352
  $150 = $ReallocAsyncCtx + 20 | 0; //@line 13353
  HEAP32[$150 >> 2] = $10; //@line 13354
  $151 = $ReallocAsyncCtx + 24 | 0; //@line 13355
  HEAP32[$151 >> 2] = $12; //@line 13356
  $152 = $ReallocAsyncCtx + 28 | 0; //@line 13357
  HEAP32[$152 >> 2] = $14; //@line 13358
  $153 = $ReallocAsyncCtx + 32 | 0; //@line 13359
  HEAP32[$153 >> 2] = $16; //@line 13360
  $154 = $ReallocAsyncCtx + 36 | 0; //@line 13361
  HEAP32[$154 >> 2] = $18; //@line 13362
  $155 = $ReallocAsyncCtx + 40 | 0; //@line 13363
  HEAP32[$155 >> 2] = $20; //@line 13364
  $156 = $ReallocAsyncCtx + 44 | 0; //@line 13365
  HEAP32[$156 >> 2] = $22; //@line 13366
  $157 = $ReallocAsyncCtx + 48 | 0; //@line 13367
  HEAP32[$157 >> 2] = $24; //@line 13368
  $158 = $ReallocAsyncCtx + 52 | 0; //@line 13369
  HEAP32[$158 >> 2] = $26; //@line 13370
  $159 = $ReallocAsyncCtx + 56 | 0; //@line 13371
  HEAP32[$159 >> 2] = $28; //@line 13372
  $160 = $ReallocAsyncCtx + 60 | 0; //@line 13373
  HEAP32[$160 >> 2] = $30; //@line 13374
  $161 = $ReallocAsyncCtx + 64 | 0; //@line 13375
  HEAP32[$161 >> 2] = $32; //@line 13376
  $162 = $ReallocAsyncCtx + 68 | 0; //@line 13377
  HEAP32[$162 >> 2] = $34; //@line 13378
  $163 = $ReallocAsyncCtx + 72 | 0; //@line 13379
  HEAP32[$163 >> 2] = $36; //@line 13380
  $164 = $ReallocAsyncCtx + 76 | 0; //@line 13381
  HEAP32[$164 >> 2] = $38; //@line 13382
  $165 = $ReallocAsyncCtx + 80 | 0; //@line 13383
  HEAP32[$165 >> 2] = $40; //@line 13384
  $166 = $ReallocAsyncCtx + 84 | 0; //@line 13385
  HEAP8[$166 >> 0] = $42; //@line 13386
  $167 = $ReallocAsyncCtx + 85 | 0; //@line 13387
  HEAP8[$167 >> 0] = $44; //@line 13388
  $168 = $ReallocAsyncCtx + 88 | 0; //@line 13389
  HEAP32[$168 >> 2] = $46; //@line 13390
  $169 = $ReallocAsyncCtx + 92 | 0; //@line 13391
  HEAP32[$169 >> 2] = $48; //@line 13392
  $170 = $ReallocAsyncCtx + 96 | 0; //@line 13393
  HEAP32[$170 >> 2] = $50; //@line 13394
  $171 = $ReallocAsyncCtx + 100 | 0; //@line 13395
  HEAP32[$171 >> 2] = $52; //@line 13396
  $172 = $ReallocAsyncCtx + 104 | 0; //@line 13397
  HEAP32[$172 >> 2] = $54; //@line 13398
  $173 = $ReallocAsyncCtx + 108 | 0; //@line 13399
  HEAP32[$173 >> 2] = $56; //@line 13400
  $174 = $ReallocAsyncCtx + 112 | 0; //@line 13401
  HEAP32[$174 >> 2] = $58; //@line 13402
  $175 = $ReallocAsyncCtx + 116 | 0; //@line 13403
  HEAP32[$175 >> 2] = $60; //@line 13404
  $176 = $ReallocAsyncCtx + 120 | 0; //@line 13405
  HEAP32[$176 >> 2] = $62; //@line 13406
  $177 = $ReallocAsyncCtx + 124 | 0; //@line 13407
  HEAP32[$177 >> 2] = $64; //@line 13408
  $178 = $ReallocAsyncCtx + 128 | 0; //@line 13409
  HEAP32[$178 >> 2] = $66; //@line 13410
  $179 = $ReallocAsyncCtx + 132 | 0; //@line 13411
  HEAP32[$179 >> 2] = $68; //@line 13412
  $180 = $ReallocAsyncCtx + 136 | 0; //@line 13413
  HEAP32[$180 >> 2] = $70; //@line 13414
  $181 = $ReallocAsyncCtx + 140 | 0; //@line 13415
  HEAP32[$181 >> 2] = $72; //@line 13416
  $182 = $ReallocAsyncCtx + 144 | 0; //@line 13417
  HEAP32[$182 >> 2] = $74; //@line 13418
  $183 = $ReallocAsyncCtx + 148 | 0; //@line 13419
  HEAP32[$183 >> 2] = $76; //@line 13420
  $184 = $ReallocAsyncCtx + 152 | 0; //@line 13421
  HEAP32[$184 >> 2] = $78; //@line 13422
  $185 = $ReallocAsyncCtx + 156 | 0; //@line 13423
  HEAP32[$185 >> 2] = $80; //@line 13424
  $186 = $ReallocAsyncCtx + 160 | 0; //@line 13425
  HEAP32[$186 >> 2] = $82; //@line 13426
  $187 = $ReallocAsyncCtx + 164 | 0; //@line 13427
  HEAP32[$187 >> 2] = $84; //@line 13428
  $188 = $ReallocAsyncCtx + 168 | 0; //@line 13429
  HEAP32[$188 >> 2] = $86; //@line 13430
  $189 = $ReallocAsyncCtx + 172 | 0; //@line 13431
  HEAP32[$189 >> 2] = $88; //@line 13432
  $190 = $ReallocAsyncCtx + 176 | 0; //@line 13433
  HEAP32[$190 >> 2] = $90; //@line 13434
  $191 = $ReallocAsyncCtx + 180 | 0; //@line 13435
  HEAP32[$191 >> 2] = $92; //@line 13436
  $192 = $ReallocAsyncCtx + 184 | 0; //@line 13437
  HEAP32[$192 >> 2] = $94; //@line 13438
  $193 = $ReallocAsyncCtx + 188 | 0; //@line 13439
  HEAP32[$193 >> 2] = $96; //@line 13440
  $194 = $ReallocAsyncCtx + 192 | 0; //@line 13441
  HEAP32[$194 >> 2] = $98; //@line 13442
  $195 = $ReallocAsyncCtx + 196 | 0; //@line 13443
  HEAP32[$195 >> 2] = $100; //@line 13444
  $196 = $ReallocAsyncCtx + 200 | 0; //@line 13445
  HEAP32[$196 >> 2] = $102; //@line 13446
  $197 = $ReallocAsyncCtx + 204 | 0; //@line 13447
  HEAP32[$197 >> 2] = $104; //@line 13448
  $198 = $ReallocAsyncCtx + 208 | 0; //@line 13449
  HEAP32[$198 >> 2] = $106; //@line 13450
  $199 = $ReallocAsyncCtx + 212 | 0; //@line 13451
  HEAP32[$199 >> 2] = $108; //@line 13452
  $200 = $ReallocAsyncCtx + 216 | 0; //@line 13453
  HEAP32[$200 >> 2] = $110; //@line 13454
  $201 = $ReallocAsyncCtx + 220 | 0; //@line 13455
  HEAP32[$201 >> 2] = $132; //@line 13456
  $202 = $ReallocAsyncCtx + 224 | 0; //@line 13457
  HEAP32[$202 >> 2] = $$0107$be; //@line 13458
  $203 = $ReallocAsyncCtx + 228 | 0; //@line 13459
  HEAP32[$203 >> 2] = $116; //@line 13460
  $204 = $ReallocAsyncCtx + 232 | 0; //@line 13461
  HEAP32[$204 >> 2] = $118; //@line 13462
  sp = STACKTOP; //@line 13463
  return;
 } else if ((label | 0) == 17) {
  $247 = HEAP8[$36 + ($121 & 255) >> 0] | 0; //@line 13469
  HEAP8[$72 >> 0] = ($247 & 255) >>> 4 & 7; //@line 13474
  HEAP8[$80 >> 0] = $247 & 15; //@line 13476
  $266 = $$0$be + 5 << 24 >> 24; //@line 13490
  HEAP32[$62 >> 2] = (HEAPU8[$36 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$36 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$36 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 13498
  $276 = HEAP32[(HEAP32[$54 >> 2] | 0) + 40 >> 2] | 0; //@line 13501
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(232) | 0; //@line 13502
  $277 = FUNCTION_TABLE_iii[$276 & 15]($60, $68) | 0; //@line 13503
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 476; //@line 13506
   $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 13507
   HEAP32[$278 >> 2] = $2; //@line 13508
   $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 13509
   HEAP8[$279 >> 0] = $4; //@line 13510
   $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 13511
   HEAP32[$280 >> 2] = $6; //@line 13512
   $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 13513
   HEAP32[$281 >> 2] = $8; //@line 13514
   $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 13515
   HEAP32[$282 >> 2] = $10; //@line 13516
   $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 13517
   HEAP32[$283 >> 2] = $12; //@line 13518
   $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 13519
   HEAP32[$284 >> 2] = $14; //@line 13520
   $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 13521
   HEAP32[$285 >> 2] = $16; //@line 13522
   $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 13523
   HEAP32[$286 >> 2] = $18; //@line 13524
   $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 13525
   HEAP32[$287 >> 2] = $20; //@line 13526
   $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 13527
   HEAP32[$288 >> 2] = $22; //@line 13528
   $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 13529
   HEAP32[$289 >> 2] = $24; //@line 13530
   $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 13531
   HEAP32[$290 >> 2] = $26; //@line 13532
   $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 13533
   HEAP32[$291 >> 2] = $28; //@line 13534
   $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 13535
   HEAP32[$292 >> 2] = $30; //@line 13536
   $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 13537
   HEAP32[$293 >> 2] = $32; //@line 13538
   $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 13539
   HEAP32[$294 >> 2] = $34; //@line 13540
   $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 13541
   HEAP32[$295 >> 2] = $36; //@line 13542
   $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 13543
   HEAP32[$296 >> 2] = $38; //@line 13544
   $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 13545
   HEAP32[$297 >> 2] = $40; //@line 13546
   $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 13547
   HEAP8[$298 >> 0] = $42; //@line 13548
   $299 = $ReallocAsyncCtx2 + 85 | 0; //@line 13549
   HEAP8[$299 >> 0] = $44; //@line 13550
   $300 = $ReallocAsyncCtx2 + 88 | 0; //@line 13551
   HEAP32[$300 >> 2] = $46; //@line 13552
   $301 = $ReallocAsyncCtx2 + 92 | 0; //@line 13553
   HEAP32[$301 >> 2] = $48; //@line 13554
   $302 = $ReallocAsyncCtx2 + 96 | 0; //@line 13555
   HEAP32[$302 >> 2] = $50; //@line 13556
   $303 = $ReallocAsyncCtx2 + 100 | 0; //@line 13557
   HEAP32[$303 >> 2] = $52; //@line 13558
   $304 = $ReallocAsyncCtx2 + 104 | 0; //@line 13559
   HEAP32[$304 >> 2] = $54; //@line 13560
   $305 = $ReallocAsyncCtx2 + 108 | 0; //@line 13561
   HEAP32[$305 >> 2] = $56; //@line 13562
   $306 = $ReallocAsyncCtx2 + 112 | 0; //@line 13563
   HEAP32[$306 >> 2] = $58; //@line 13564
   $307 = $ReallocAsyncCtx2 + 116 | 0; //@line 13565
   HEAP32[$307 >> 2] = $60; //@line 13566
   $308 = $ReallocAsyncCtx2 + 120 | 0; //@line 13567
   HEAP32[$308 >> 2] = $62; //@line 13568
   $309 = $ReallocAsyncCtx2 + 124 | 0; //@line 13569
   HEAP32[$309 >> 2] = $64; //@line 13570
   $310 = $ReallocAsyncCtx2 + 128 | 0; //@line 13571
   HEAP32[$310 >> 2] = $66; //@line 13572
   $311 = $ReallocAsyncCtx2 + 132 | 0; //@line 13573
   HEAP32[$311 >> 2] = $68; //@line 13574
   $312 = $ReallocAsyncCtx2 + 136 | 0; //@line 13575
   HEAP32[$312 >> 2] = $70; //@line 13576
   $313 = $ReallocAsyncCtx2 + 140 | 0; //@line 13577
   HEAP32[$313 >> 2] = $72; //@line 13578
   $314 = $ReallocAsyncCtx2 + 144 | 0; //@line 13579
   HEAP32[$314 >> 2] = $74; //@line 13580
   $315 = $ReallocAsyncCtx2 + 148 | 0; //@line 13581
   HEAP32[$315 >> 2] = $76; //@line 13582
   $316 = $ReallocAsyncCtx2 + 152 | 0; //@line 13583
   HEAP32[$316 >> 2] = $78; //@line 13584
   $317 = $ReallocAsyncCtx2 + 156 | 0; //@line 13585
   HEAP32[$317 >> 2] = $80; //@line 13586
   $318 = $ReallocAsyncCtx2 + 160 | 0; //@line 13587
   HEAP32[$318 >> 2] = $82; //@line 13588
   $319 = $ReallocAsyncCtx2 + 164 | 0; //@line 13589
   HEAP32[$319 >> 2] = $84; //@line 13590
   $320 = $ReallocAsyncCtx2 + 168 | 0; //@line 13591
   HEAP32[$320 >> 2] = $86; //@line 13592
   $321 = $ReallocAsyncCtx2 + 172 | 0; //@line 13593
   HEAP32[$321 >> 2] = $88; //@line 13594
   $322 = $ReallocAsyncCtx2 + 176 | 0; //@line 13595
   HEAP32[$322 >> 2] = $90; //@line 13596
   $323 = $ReallocAsyncCtx2 + 180 | 0; //@line 13597
   HEAP32[$323 >> 2] = $92; //@line 13598
   $324 = $ReallocAsyncCtx2 + 184 | 0; //@line 13599
   HEAP32[$324 >> 2] = $94; //@line 13600
   $325 = $ReallocAsyncCtx2 + 188 | 0; //@line 13601
   HEAP32[$325 >> 2] = $96; //@line 13602
   $326 = $ReallocAsyncCtx2 + 192 | 0; //@line 13603
   HEAP32[$326 >> 2] = $98; //@line 13604
   $327 = $ReallocAsyncCtx2 + 196 | 0; //@line 13605
   HEAP32[$327 >> 2] = $100; //@line 13606
   $328 = $ReallocAsyncCtx2 + 200 | 0; //@line 13607
   HEAP32[$328 >> 2] = $102; //@line 13608
   $329 = $ReallocAsyncCtx2 + 204 | 0; //@line 13609
   HEAP32[$329 >> 2] = $104; //@line 13610
   $330 = $ReallocAsyncCtx2 + 208 | 0; //@line 13611
   HEAP32[$330 >> 2] = $106; //@line 13612
   $331 = $ReallocAsyncCtx2 + 212 | 0; //@line 13613
   HEAP8[$331 >> 0] = $266; //@line 13614
   $332 = $ReallocAsyncCtx2 + 216 | 0; //@line 13615
   HEAP32[$332 >> 2] = $108; //@line 13616
   $333 = $ReallocAsyncCtx2 + 220 | 0; //@line 13617
   HEAP32[$333 >> 2] = $110; //@line 13618
   $334 = $ReallocAsyncCtx2 + 224 | 0; //@line 13619
   HEAP32[$334 >> 2] = $116; //@line 13620
   $335 = $ReallocAsyncCtx2 + 228 | 0; //@line 13621
   HEAP32[$335 >> 2] = $118; //@line 13622
   sp = STACKTOP; //@line 13623
   return;
  }
  HEAP8[___async_retval >> 0] = $277; //@line 13627
  ___async_unwind = 0; //@line 13628
  HEAP32[$ReallocAsyncCtx2 >> 2] = 476; //@line 13629
  $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 13630
  HEAP32[$278 >> 2] = $2; //@line 13631
  $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 13632
  HEAP8[$279 >> 0] = $4; //@line 13633
  $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 13634
  HEAP32[$280 >> 2] = $6; //@line 13635
  $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 13636
  HEAP32[$281 >> 2] = $8; //@line 13637
  $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 13638
  HEAP32[$282 >> 2] = $10; //@line 13639
  $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 13640
  HEAP32[$283 >> 2] = $12; //@line 13641
  $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 13642
  HEAP32[$284 >> 2] = $14; //@line 13643
  $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 13644
  HEAP32[$285 >> 2] = $16; //@line 13645
  $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 13646
  HEAP32[$286 >> 2] = $18; //@line 13647
  $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 13648
  HEAP32[$287 >> 2] = $20; //@line 13649
  $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 13650
  HEAP32[$288 >> 2] = $22; //@line 13651
  $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 13652
  HEAP32[$289 >> 2] = $24; //@line 13653
  $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 13654
  HEAP32[$290 >> 2] = $26; //@line 13655
  $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 13656
  HEAP32[$291 >> 2] = $28; //@line 13657
  $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 13658
  HEAP32[$292 >> 2] = $30; //@line 13659
  $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 13660
  HEAP32[$293 >> 2] = $32; //@line 13661
  $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 13662
  HEAP32[$294 >> 2] = $34; //@line 13663
  $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 13664
  HEAP32[$295 >> 2] = $36; //@line 13665
  $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 13666
  HEAP32[$296 >> 2] = $38; //@line 13667
  $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 13668
  HEAP32[$297 >> 2] = $40; //@line 13669
  $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 13670
  HEAP8[$298 >> 0] = $42; //@line 13671
  $299 = $ReallocAsyncCtx2 + 85 | 0; //@line 13672
  HEAP8[$299 >> 0] = $44; //@line 13673
  $300 = $ReallocAsyncCtx2 + 88 | 0; //@line 13674
  HEAP32[$300 >> 2] = $46; //@line 13675
  $301 = $ReallocAsyncCtx2 + 92 | 0; //@line 13676
  HEAP32[$301 >> 2] = $48; //@line 13677
  $302 = $ReallocAsyncCtx2 + 96 | 0; //@line 13678
  HEAP32[$302 >> 2] = $50; //@line 13679
  $303 = $ReallocAsyncCtx2 + 100 | 0; //@line 13680
  HEAP32[$303 >> 2] = $52; //@line 13681
  $304 = $ReallocAsyncCtx2 + 104 | 0; //@line 13682
  HEAP32[$304 >> 2] = $54; //@line 13683
  $305 = $ReallocAsyncCtx2 + 108 | 0; //@line 13684
  HEAP32[$305 >> 2] = $56; //@line 13685
  $306 = $ReallocAsyncCtx2 + 112 | 0; //@line 13686
  HEAP32[$306 >> 2] = $58; //@line 13687
  $307 = $ReallocAsyncCtx2 + 116 | 0; //@line 13688
  HEAP32[$307 >> 2] = $60; //@line 13689
  $308 = $ReallocAsyncCtx2 + 120 | 0; //@line 13690
  HEAP32[$308 >> 2] = $62; //@line 13691
  $309 = $ReallocAsyncCtx2 + 124 | 0; //@line 13692
  HEAP32[$309 >> 2] = $64; //@line 13693
  $310 = $ReallocAsyncCtx2 + 128 | 0; //@line 13694
  HEAP32[$310 >> 2] = $66; //@line 13695
  $311 = $ReallocAsyncCtx2 + 132 | 0; //@line 13696
  HEAP32[$311 >> 2] = $68; //@line 13697
  $312 = $ReallocAsyncCtx2 + 136 | 0; //@line 13698
  HEAP32[$312 >> 2] = $70; //@line 13699
  $313 = $ReallocAsyncCtx2 + 140 | 0; //@line 13700
  HEAP32[$313 >> 2] = $72; //@line 13701
  $314 = $ReallocAsyncCtx2 + 144 | 0; //@line 13702
  HEAP32[$314 >> 2] = $74; //@line 13703
  $315 = $ReallocAsyncCtx2 + 148 | 0; //@line 13704
  HEAP32[$315 >> 2] = $76; //@line 13705
  $316 = $ReallocAsyncCtx2 + 152 | 0; //@line 13706
  HEAP32[$316 >> 2] = $78; //@line 13707
  $317 = $ReallocAsyncCtx2 + 156 | 0; //@line 13708
  HEAP32[$317 >> 2] = $80; //@line 13709
  $318 = $ReallocAsyncCtx2 + 160 | 0; //@line 13710
  HEAP32[$318 >> 2] = $82; //@line 13711
  $319 = $ReallocAsyncCtx2 + 164 | 0; //@line 13712
  HEAP32[$319 >> 2] = $84; //@line 13713
  $320 = $ReallocAsyncCtx2 + 168 | 0; //@line 13714
  HEAP32[$320 >> 2] = $86; //@line 13715
  $321 = $ReallocAsyncCtx2 + 172 | 0; //@line 13716
  HEAP32[$321 >> 2] = $88; //@line 13717
  $322 = $ReallocAsyncCtx2 + 176 | 0; //@line 13718
  HEAP32[$322 >> 2] = $90; //@line 13719
  $323 = $ReallocAsyncCtx2 + 180 | 0; //@line 13720
  HEAP32[$323 >> 2] = $92; //@line 13721
  $324 = $ReallocAsyncCtx2 + 184 | 0; //@line 13722
  HEAP32[$324 >> 2] = $94; //@line 13723
  $325 = $ReallocAsyncCtx2 + 188 | 0; //@line 13724
  HEAP32[$325 >> 2] = $96; //@line 13725
  $326 = $ReallocAsyncCtx2 + 192 | 0; //@line 13726
  HEAP32[$326 >> 2] = $98; //@line 13727
  $327 = $ReallocAsyncCtx2 + 196 | 0; //@line 13728
  HEAP32[$327 >> 2] = $100; //@line 13729
  $328 = $ReallocAsyncCtx2 + 200 | 0; //@line 13730
  HEAP32[$328 >> 2] = $102; //@line 13731
  $329 = $ReallocAsyncCtx2 + 204 | 0; //@line 13732
  HEAP32[$329 >> 2] = $104; //@line 13733
  $330 = $ReallocAsyncCtx2 + 208 | 0; //@line 13734
  HEAP32[$330 >> 2] = $106; //@line 13735
  $331 = $ReallocAsyncCtx2 + 212 | 0; //@line 13736
  HEAP8[$331 >> 0] = $266; //@line 13737
  $332 = $ReallocAsyncCtx2 + 216 | 0; //@line 13738
  HEAP32[$332 >> 2] = $108; //@line 13739
  $333 = $ReallocAsyncCtx2 + 220 | 0; //@line 13740
  HEAP32[$333 >> 2] = $110; //@line 13741
  $334 = $ReallocAsyncCtx2 + 224 | 0; //@line 13742
  HEAP32[$334 >> 2] = $116; //@line 13743
  $335 = $ReallocAsyncCtx2 + 228 | 0; //@line 13744
  HEAP32[$335 >> 2] = $118; //@line 13745
  sp = STACKTOP; //@line 13746
  return;
 } else if ((label | 0) == 21) {
  $339 = HEAP32[$337 >> 2] | 0; //@line 13750
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(232) | 0; //@line 13751
  $340 = FUNCTION_TABLE_ii[$339 & 15]($16) | 0; //@line 13752
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 477; //@line 13755
   $341 = $ReallocAsyncCtx3 + 4 | 0; //@line 13756
   HEAP32[$341 >> 2] = $2; //@line 13757
   $342 = $ReallocAsyncCtx3 + 8 | 0; //@line 13758
   HEAP8[$342 >> 0] = $4; //@line 13759
   $343 = $ReallocAsyncCtx3 + 12 | 0; //@line 13760
   HEAP32[$343 >> 2] = $6; //@line 13761
   $344 = $ReallocAsyncCtx3 + 16 | 0; //@line 13762
   HEAP32[$344 >> 2] = $8; //@line 13763
   $345 = $ReallocAsyncCtx3 + 20 | 0; //@line 13764
   HEAP32[$345 >> 2] = $10; //@line 13765
   $346 = $ReallocAsyncCtx3 + 24 | 0; //@line 13766
   HEAP32[$346 >> 2] = $12; //@line 13767
   $347 = $ReallocAsyncCtx3 + 28 | 0; //@line 13768
   HEAP32[$347 >> 2] = $14; //@line 13769
   $348 = $ReallocAsyncCtx3 + 32 | 0; //@line 13770
   HEAP32[$348 >> 2] = $16; //@line 13771
   $349 = $ReallocAsyncCtx3 + 36 | 0; //@line 13772
   HEAP32[$349 >> 2] = $18; //@line 13773
   $350 = $ReallocAsyncCtx3 + 40 | 0; //@line 13774
   HEAP32[$350 >> 2] = $20; //@line 13775
   $351 = $ReallocAsyncCtx3 + 44 | 0; //@line 13776
   HEAP32[$351 >> 2] = $22; //@line 13777
   $352 = $ReallocAsyncCtx3 + 48 | 0; //@line 13778
   HEAP32[$352 >> 2] = $24; //@line 13779
   $353 = $ReallocAsyncCtx3 + 52 | 0; //@line 13780
   HEAP32[$353 >> 2] = $26; //@line 13781
   $354 = $ReallocAsyncCtx3 + 56 | 0; //@line 13782
   HEAP32[$354 >> 2] = $28; //@line 13783
   $355 = $ReallocAsyncCtx3 + 60 | 0; //@line 13784
   HEAP32[$355 >> 2] = $30; //@line 13785
   $356 = $ReallocAsyncCtx3 + 64 | 0; //@line 13786
   HEAP32[$356 >> 2] = $32; //@line 13787
   $357 = $ReallocAsyncCtx3 + 68 | 0; //@line 13788
   HEAP32[$357 >> 2] = $34; //@line 13789
   $358 = $ReallocAsyncCtx3 + 72 | 0; //@line 13790
   HEAP8[$358 >> 0] = $121; //@line 13791
   $359 = $ReallocAsyncCtx3 + 76 | 0; //@line 13792
   HEAP32[$359 >> 2] = $36; //@line 13793
   $360 = $ReallocAsyncCtx3 + 80 | 0; //@line 13794
   HEAP32[$360 >> 2] = $38; //@line 13795
   $361 = $ReallocAsyncCtx3 + 84 | 0; //@line 13796
   HEAP32[$361 >> 2] = $40; //@line 13797
   $362 = $ReallocAsyncCtx3 + 88 | 0; //@line 13798
   HEAP8[$362 >> 0] = $42; //@line 13799
   $363 = $ReallocAsyncCtx3 + 89 | 0; //@line 13800
   HEAP8[$363 >> 0] = $44; //@line 13801
   $364 = $ReallocAsyncCtx3 + 92 | 0; //@line 13802
   HEAP32[$364 >> 2] = $46; //@line 13803
   $365 = $ReallocAsyncCtx3 + 96 | 0; //@line 13804
   HEAP32[$365 >> 2] = $48; //@line 13805
   $366 = $ReallocAsyncCtx3 + 100 | 0; //@line 13806
   HEAP32[$366 >> 2] = $50; //@line 13807
   $367 = $ReallocAsyncCtx3 + 104 | 0; //@line 13808
   HEAP32[$367 >> 2] = $52; //@line 13809
   $368 = $ReallocAsyncCtx3 + 108 | 0; //@line 13810
   HEAP32[$368 >> 2] = $54; //@line 13811
   $369 = $ReallocAsyncCtx3 + 112 | 0; //@line 13812
   HEAP32[$369 >> 2] = $56; //@line 13813
   $370 = $ReallocAsyncCtx3 + 116 | 0; //@line 13814
   HEAP32[$370 >> 2] = $58; //@line 13815
   $371 = $ReallocAsyncCtx3 + 120 | 0; //@line 13816
   HEAP32[$371 >> 2] = $60; //@line 13817
   $372 = $ReallocAsyncCtx3 + 124 | 0; //@line 13818
   HEAP32[$372 >> 2] = $62; //@line 13819
   $373 = $ReallocAsyncCtx3 + 128 | 0; //@line 13820
   HEAP32[$373 >> 2] = $64; //@line 13821
   $374 = $ReallocAsyncCtx3 + 132 | 0; //@line 13822
   HEAP32[$374 >> 2] = $66; //@line 13823
   $375 = $ReallocAsyncCtx3 + 136 | 0; //@line 13824
   HEAP32[$375 >> 2] = $68; //@line 13825
   $376 = $ReallocAsyncCtx3 + 140 | 0; //@line 13826
   HEAP32[$376 >> 2] = $70; //@line 13827
   $377 = $ReallocAsyncCtx3 + 144 | 0; //@line 13828
   HEAP32[$377 >> 2] = $72; //@line 13829
   $378 = $ReallocAsyncCtx3 + 148 | 0; //@line 13830
   HEAP32[$378 >> 2] = $74; //@line 13831
   $379 = $ReallocAsyncCtx3 + 152 | 0; //@line 13832
   HEAP32[$379 >> 2] = $76; //@line 13833
   $380 = $ReallocAsyncCtx3 + 156 | 0; //@line 13834
   HEAP32[$380 >> 2] = $78; //@line 13835
   $381 = $ReallocAsyncCtx3 + 160 | 0; //@line 13836
   HEAP32[$381 >> 2] = $80; //@line 13837
   $382 = $ReallocAsyncCtx3 + 164 | 0; //@line 13838
   HEAP32[$382 >> 2] = $82; //@line 13839
   $383 = $ReallocAsyncCtx3 + 168 | 0; //@line 13840
   HEAP32[$383 >> 2] = $84; //@line 13841
   $384 = $ReallocAsyncCtx3 + 172 | 0; //@line 13842
   HEAP32[$384 >> 2] = $86; //@line 13843
   $385 = $ReallocAsyncCtx3 + 176 | 0; //@line 13844
   HEAP32[$385 >> 2] = $88; //@line 13845
   $386 = $ReallocAsyncCtx3 + 180 | 0; //@line 13846
   HEAP32[$386 >> 2] = $90; //@line 13847
   $387 = $ReallocAsyncCtx3 + 184 | 0; //@line 13848
   HEAP32[$387 >> 2] = $92; //@line 13849
   $388 = $ReallocAsyncCtx3 + 188 | 0; //@line 13850
   HEAP32[$388 >> 2] = $94; //@line 13851
   $389 = $ReallocAsyncCtx3 + 192 | 0; //@line 13852
   HEAP32[$389 >> 2] = $96; //@line 13853
   $390 = $ReallocAsyncCtx3 + 196 | 0; //@line 13854
   HEAP32[$390 >> 2] = $98; //@line 13855
   $391 = $ReallocAsyncCtx3 + 200 | 0; //@line 13856
   HEAP32[$391 >> 2] = $100; //@line 13857
   $392 = $ReallocAsyncCtx3 + 204 | 0; //@line 13858
   HEAP32[$392 >> 2] = $102; //@line 13859
   $393 = $ReallocAsyncCtx3 + 208 | 0; //@line 13860
   HEAP32[$393 >> 2] = $104; //@line 13861
   $394 = $ReallocAsyncCtx3 + 212 | 0; //@line 13862
   HEAP32[$394 >> 2] = $106; //@line 13863
   $395 = $ReallocAsyncCtx3 + 216 | 0; //@line 13864
   HEAP32[$395 >> 2] = $108; //@line 13865
   $396 = $ReallocAsyncCtx3 + 220 | 0; //@line 13866
   HEAP32[$396 >> 2] = $110; //@line 13867
   $397 = $ReallocAsyncCtx3 + 224 | 0; //@line 13868
   HEAP32[$397 >> 2] = $116; //@line 13869
   $398 = $ReallocAsyncCtx3 + 228 | 0; //@line 13870
   HEAP32[$398 >> 2] = $118; //@line 13871
   sp = STACKTOP; //@line 13872
   return;
  }
  HEAP8[___async_retval >> 0] = $340; //@line 13876
  ___async_unwind = 0; //@line 13877
  HEAP32[$ReallocAsyncCtx3 >> 2] = 477; //@line 13878
  $341 = $ReallocAsyncCtx3 + 4 | 0; //@line 13879
  HEAP32[$341 >> 2] = $2; //@line 13880
  $342 = $ReallocAsyncCtx3 + 8 | 0; //@line 13881
  HEAP8[$342 >> 0] = $4; //@line 13882
  $343 = $ReallocAsyncCtx3 + 12 | 0; //@line 13883
  HEAP32[$343 >> 2] = $6; //@line 13884
  $344 = $ReallocAsyncCtx3 + 16 | 0; //@line 13885
  HEAP32[$344 >> 2] = $8; //@line 13886
  $345 = $ReallocAsyncCtx3 + 20 | 0; //@line 13887
  HEAP32[$345 >> 2] = $10; //@line 13888
  $346 = $ReallocAsyncCtx3 + 24 | 0; //@line 13889
  HEAP32[$346 >> 2] = $12; //@line 13890
  $347 = $ReallocAsyncCtx3 + 28 | 0; //@line 13891
  HEAP32[$347 >> 2] = $14; //@line 13892
  $348 = $ReallocAsyncCtx3 + 32 | 0; //@line 13893
  HEAP32[$348 >> 2] = $16; //@line 13894
  $349 = $ReallocAsyncCtx3 + 36 | 0; //@line 13895
  HEAP32[$349 >> 2] = $18; //@line 13896
  $350 = $ReallocAsyncCtx3 + 40 | 0; //@line 13897
  HEAP32[$350 >> 2] = $20; //@line 13898
  $351 = $ReallocAsyncCtx3 + 44 | 0; //@line 13899
  HEAP32[$351 >> 2] = $22; //@line 13900
  $352 = $ReallocAsyncCtx3 + 48 | 0; //@line 13901
  HEAP32[$352 >> 2] = $24; //@line 13902
  $353 = $ReallocAsyncCtx3 + 52 | 0; //@line 13903
  HEAP32[$353 >> 2] = $26; //@line 13904
  $354 = $ReallocAsyncCtx3 + 56 | 0; //@line 13905
  HEAP32[$354 >> 2] = $28; //@line 13906
  $355 = $ReallocAsyncCtx3 + 60 | 0; //@line 13907
  HEAP32[$355 >> 2] = $30; //@line 13908
  $356 = $ReallocAsyncCtx3 + 64 | 0; //@line 13909
  HEAP32[$356 >> 2] = $32; //@line 13910
  $357 = $ReallocAsyncCtx3 + 68 | 0; //@line 13911
  HEAP32[$357 >> 2] = $34; //@line 13912
  $358 = $ReallocAsyncCtx3 + 72 | 0; //@line 13913
  HEAP8[$358 >> 0] = $121; //@line 13914
  $359 = $ReallocAsyncCtx3 + 76 | 0; //@line 13915
  HEAP32[$359 >> 2] = $36; //@line 13916
  $360 = $ReallocAsyncCtx3 + 80 | 0; //@line 13917
  HEAP32[$360 >> 2] = $38; //@line 13918
  $361 = $ReallocAsyncCtx3 + 84 | 0; //@line 13919
  HEAP32[$361 >> 2] = $40; //@line 13920
  $362 = $ReallocAsyncCtx3 + 88 | 0; //@line 13921
  HEAP8[$362 >> 0] = $42; //@line 13922
  $363 = $ReallocAsyncCtx3 + 89 | 0; //@line 13923
  HEAP8[$363 >> 0] = $44; //@line 13924
  $364 = $ReallocAsyncCtx3 + 92 | 0; //@line 13925
  HEAP32[$364 >> 2] = $46; //@line 13926
  $365 = $ReallocAsyncCtx3 + 96 | 0; //@line 13927
  HEAP32[$365 >> 2] = $48; //@line 13928
  $366 = $ReallocAsyncCtx3 + 100 | 0; //@line 13929
  HEAP32[$366 >> 2] = $50; //@line 13930
  $367 = $ReallocAsyncCtx3 + 104 | 0; //@line 13931
  HEAP32[$367 >> 2] = $52; //@line 13932
  $368 = $ReallocAsyncCtx3 + 108 | 0; //@line 13933
  HEAP32[$368 >> 2] = $54; //@line 13934
  $369 = $ReallocAsyncCtx3 + 112 | 0; //@line 13935
  HEAP32[$369 >> 2] = $56; //@line 13936
  $370 = $ReallocAsyncCtx3 + 116 | 0; //@line 13937
  HEAP32[$370 >> 2] = $58; //@line 13938
  $371 = $ReallocAsyncCtx3 + 120 | 0; //@line 13939
  HEAP32[$371 >> 2] = $60; //@line 13940
  $372 = $ReallocAsyncCtx3 + 124 | 0; //@line 13941
  HEAP32[$372 >> 2] = $62; //@line 13942
  $373 = $ReallocAsyncCtx3 + 128 | 0; //@line 13943
  HEAP32[$373 >> 2] = $64; //@line 13944
  $374 = $ReallocAsyncCtx3 + 132 | 0; //@line 13945
  HEAP32[$374 >> 2] = $66; //@line 13946
  $375 = $ReallocAsyncCtx3 + 136 | 0; //@line 13947
  HEAP32[$375 >> 2] = $68; //@line 13948
  $376 = $ReallocAsyncCtx3 + 140 | 0; //@line 13949
  HEAP32[$376 >> 2] = $70; //@line 13950
  $377 = $ReallocAsyncCtx3 + 144 | 0; //@line 13951
  HEAP32[$377 >> 2] = $72; //@line 13952
  $378 = $ReallocAsyncCtx3 + 148 | 0; //@line 13953
  HEAP32[$378 >> 2] = $74; //@line 13954
  $379 = $ReallocAsyncCtx3 + 152 | 0; //@line 13955
  HEAP32[$379 >> 2] = $76; //@line 13956
  $380 = $ReallocAsyncCtx3 + 156 | 0; //@line 13957
  HEAP32[$380 >> 2] = $78; //@line 13958
  $381 = $ReallocAsyncCtx3 + 160 | 0; //@line 13959
  HEAP32[$381 >> 2] = $80; //@line 13960
  $382 = $ReallocAsyncCtx3 + 164 | 0; //@line 13961
  HEAP32[$382 >> 2] = $82; //@line 13962
  $383 = $ReallocAsyncCtx3 + 168 | 0; //@line 13963
  HEAP32[$383 >> 2] = $84; //@line 13964
  $384 = $ReallocAsyncCtx3 + 172 | 0; //@line 13965
  HEAP32[$384 >> 2] = $86; //@line 13966
  $385 = $ReallocAsyncCtx3 + 176 | 0; //@line 13967
  HEAP32[$385 >> 2] = $88; //@line 13968
  $386 = $ReallocAsyncCtx3 + 180 | 0; //@line 13969
  HEAP32[$386 >> 2] = $90; //@line 13970
  $387 = $ReallocAsyncCtx3 + 184 | 0; //@line 13971
  HEAP32[$387 >> 2] = $92; //@line 13972
  $388 = $ReallocAsyncCtx3 + 188 | 0; //@line 13973
  HEAP32[$388 >> 2] = $94; //@line 13974
  $389 = $ReallocAsyncCtx3 + 192 | 0; //@line 13975
  HEAP32[$389 >> 2] = $96; //@line 13976
  $390 = $ReallocAsyncCtx3 + 196 | 0; //@line 13977
  HEAP32[$390 >> 2] = $98; //@line 13978
  $391 = $ReallocAsyncCtx3 + 200 | 0; //@line 13979
  HEAP32[$391 >> 2] = $100; //@line 13980
  $392 = $ReallocAsyncCtx3 + 204 | 0; //@line 13981
  HEAP32[$392 >> 2] = $102; //@line 13982
  $393 = $ReallocAsyncCtx3 + 208 | 0; //@line 13983
  HEAP32[$393 >> 2] = $104; //@line 13984
  $394 = $ReallocAsyncCtx3 + 212 | 0; //@line 13985
  HEAP32[$394 >> 2] = $106; //@line 13986
  $395 = $ReallocAsyncCtx3 + 216 | 0; //@line 13987
  HEAP32[$395 >> 2] = $108; //@line 13988
  $396 = $ReallocAsyncCtx3 + 220 | 0; //@line 13989
  HEAP32[$396 >> 2] = $110; //@line 13990
  $397 = $ReallocAsyncCtx3 + 224 | 0; //@line 13991
  HEAP32[$397 >> 2] = $116; //@line 13992
  $398 = $ReallocAsyncCtx3 + 228 | 0; //@line 13993
  HEAP32[$398 >> 2] = $118; //@line 13994
  sp = STACKTOP; //@line 13995
  return;
 } else if ((label | 0) == 26) {
  $418 = HEAP8[$36 + ($121 & 255) >> 0] | 0; //@line 14002
  HEAP32[$26 >> 2] = (HEAPU8[$36 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$36 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$36 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 14023
  HEAP32[$34 >> 2] = 0; //@line 14024
  $439 = $$0$be + 6 << 24 >> 24; //@line 14025
  HEAP8[$48 >> 0] = HEAP8[$36 + ($$0$be + 5 & 255) >> 0] | 0; //@line 14029
  $445 = HEAP32[(HEAP32[$56 >> 2] | 0) + 8 >> 2] | 0; //@line 14032
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(228) | 0; //@line 14033
  $446 = FUNCTION_TABLE_iiii[$445 & 31]($60, $418, $92) | 0; //@line 14034
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 478; //@line 14037
   $447 = $ReallocAsyncCtx4 + 4 | 0; //@line 14038
   HEAP32[$447 >> 2] = $2; //@line 14039
   $448 = $ReallocAsyncCtx4 + 8 | 0; //@line 14040
   HEAP8[$448 >> 0] = $4; //@line 14041
   $449 = $ReallocAsyncCtx4 + 12 | 0; //@line 14042
   HEAP32[$449 >> 2] = $6; //@line 14043
   $450 = $ReallocAsyncCtx4 + 16 | 0; //@line 14044
   HEAP32[$450 >> 2] = $8; //@line 14045
   $451 = $ReallocAsyncCtx4 + 20 | 0; //@line 14046
   HEAP32[$451 >> 2] = $10; //@line 14047
   $452 = $ReallocAsyncCtx4 + 24 | 0; //@line 14048
   HEAP32[$452 >> 2] = $12; //@line 14049
   $453 = $ReallocAsyncCtx4 + 28 | 0; //@line 14050
   HEAP32[$453 >> 2] = $14; //@line 14051
   $454 = $ReallocAsyncCtx4 + 32 | 0; //@line 14052
   HEAP32[$454 >> 2] = $16; //@line 14053
   $455 = $ReallocAsyncCtx4 + 36 | 0; //@line 14054
   HEAP32[$455 >> 2] = $18; //@line 14055
   $456 = $ReallocAsyncCtx4 + 40 | 0; //@line 14056
   HEAP32[$456 >> 2] = $20; //@line 14057
   $457 = $ReallocAsyncCtx4 + 44 | 0; //@line 14058
   HEAP32[$457 >> 2] = $22; //@line 14059
   $458 = $ReallocAsyncCtx4 + 48 | 0; //@line 14060
   HEAP32[$458 >> 2] = $24; //@line 14061
   $459 = $ReallocAsyncCtx4 + 52 | 0; //@line 14062
   HEAP32[$459 >> 2] = $26; //@line 14063
   $460 = $ReallocAsyncCtx4 + 56 | 0; //@line 14064
   HEAP32[$460 >> 2] = $28; //@line 14065
   $461 = $ReallocAsyncCtx4 + 60 | 0; //@line 14066
   HEAP32[$461 >> 2] = $30; //@line 14067
   $462 = $ReallocAsyncCtx4 + 64 | 0; //@line 14068
   HEAP32[$462 >> 2] = $32; //@line 14069
   $463 = $ReallocAsyncCtx4 + 68 | 0; //@line 14070
   HEAP32[$463 >> 2] = $34; //@line 14071
   $464 = $ReallocAsyncCtx4 + 72 | 0; //@line 14072
   HEAP32[$464 >> 2] = $36; //@line 14073
   $465 = $ReallocAsyncCtx4 + 76 | 0; //@line 14074
   HEAP32[$465 >> 2] = $38; //@line 14075
   $466 = $ReallocAsyncCtx4 + 80 | 0; //@line 14076
   HEAP32[$466 >> 2] = $40; //@line 14077
   $467 = $ReallocAsyncCtx4 + 84 | 0; //@line 14078
   HEAP8[$467 >> 0] = $439; //@line 14079
   $468 = $ReallocAsyncCtx4 + 85 | 0; //@line 14080
   HEAP8[$468 >> 0] = $44; //@line 14081
   $469 = $ReallocAsyncCtx4 + 86 | 0; //@line 14082
   HEAP8[$469 >> 0] = $42; //@line 14083
   $470 = $ReallocAsyncCtx4 + 88 | 0; //@line 14084
   HEAP32[$470 >> 2] = $48; //@line 14085
   $471 = $ReallocAsyncCtx4 + 92 | 0; //@line 14086
   HEAP32[$471 >> 2] = $50; //@line 14087
   $472 = $ReallocAsyncCtx4 + 96 | 0; //@line 14088
   HEAP32[$472 >> 2] = $46; //@line 14089
   $473 = $ReallocAsyncCtx4 + 100 | 0; //@line 14090
   HEAP32[$473 >> 2] = $52; //@line 14091
   $474 = $ReallocAsyncCtx4 + 104 | 0; //@line 14092
   HEAP32[$474 >> 2] = $54; //@line 14093
   $475 = $ReallocAsyncCtx4 + 108 | 0; //@line 14094
   HEAP32[$475 >> 2] = $56; //@line 14095
   $476 = $ReallocAsyncCtx4 + 112 | 0; //@line 14096
   HEAP32[$476 >> 2] = $58; //@line 14097
   $477 = $ReallocAsyncCtx4 + 116 | 0; //@line 14098
   HEAP32[$477 >> 2] = $60; //@line 14099
   $478 = $ReallocAsyncCtx4 + 120 | 0; //@line 14100
   HEAP32[$478 >> 2] = $62; //@line 14101
   $479 = $ReallocAsyncCtx4 + 124 | 0; //@line 14102
   HEAP32[$479 >> 2] = $64; //@line 14103
   $480 = $ReallocAsyncCtx4 + 128 | 0; //@line 14104
   HEAP32[$480 >> 2] = $66; //@line 14105
   $481 = $ReallocAsyncCtx4 + 132 | 0; //@line 14106
   HEAP32[$481 >> 2] = $68; //@line 14107
   $482 = $ReallocAsyncCtx4 + 136 | 0; //@line 14108
   HEAP32[$482 >> 2] = $70; //@line 14109
   $483 = $ReallocAsyncCtx4 + 140 | 0; //@line 14110
   HEAP32[$483 >> 2] = $72; //@line 14111
   $484 = $ReallocAsyncCtx4 + 144 | 0; //@line 14112
   HEAP32[$484 >> 2] = $74; //@line 14113
   $485 = $ReallocAsyncCtx4 + 148 | 0; //@line 14114
   HEAP32[$485 >> 2] = $76; //@line 14115
   $486 = $ReallocAsyncCtx4 + 152 | 0; //@line 14116
   HEAP32[$486 >> 2] = $78; //@line 14117
   $487 = $ReallocAsyncCtx4 + 156 | 0; //@line 14118
   HEAP32[$487 >> 2] = $80; //@line 14119
   $488 = $ReallocAsyncCtx4 + 160 | 0; //@line 14120
   HEAP32[$488 >> 2] = $82; //@line 14121
   $489 = $ReallocAsyncCtx4 + 164 | 0; //@line 14122
   HEAP32[$489 >> 2] = $84; //@line 14123
   $490 = $ReallocAsyncCtx4 + 168 | 0; //@line 14124
   HEAP32[$490 >> 2] = $86; //@line 14125
   $491 = $ReallocAsyncCtx4 + 172 | 0; //@line 14126
   HEAP32[$491 >> 2] = $88; //@line 14127
   $492 = $ReallocAsyncCtx4 + 176 | 0; //@line 14128
   HEAP32[$492 >> 2] = $90; //@line 14129
   $493 = $ReallocAsyncCtx4 + 180 | 0; //@line 14130
   HEAP32[$493 >> 2] = $92; //@line 14131
   $494 = $ReallocAsyncCtx4 + 184 | 0; //@line 14132
   HEAP32[$494 >> 2] = $94; //@line 14133
   $495 = $ReallocAsyncCtx4 + 188 | 0; //@line 14134
   HEAP32[$495 >> 2] = $96; //@line 14135
   $496 = $ReallocAsyncCtx4 + 192 | 0; //@line 14136
   HEAP32[$496 >> 2] = $98; //@line 14137
   $497 = $ReallocAsyncCtx4 + 196 | 0; //@line 14138
   HEAP32[$497 >> 2] = $100; //@line 14139
   $498 = $ReallocAsyncCtx4 + 200 | 0; //@line 14140
   HEAP32[$498 >> 2] = $102; //@line 14141
   $499 = $ReallocAsyncCtx4 + 204 | 0; //@line 14142
   HEAP32[$499 >> 2] = $104; //@line 14143
   $500 = $ReallocAsyncCtx4 + 208 | 0; //@line 14144
   HEAP32[$500 >> 2] = $106; //@line 14145
   $501 = $ReallocAsyncCtx4 + 212 | 0; //@line 14146
   HEAP32[$501 >> 2] = $108; //@line 14147
   $502 = $ReallocAsyncCtx4 + 216 | 0; //@line 14148
   HEAP32[$502 >> 2] = $110; //@line 14149
   $503 = $ReallocAsyncCtx4 + 220 | 0; //@line 14150
   HEAP32[$503 >> 2] = $116; //@line 14151
   $504 = $ReallocAsyncCtx4 + 224 | 0; //@line 14152
   HEAP32[$504 >> 2] = $118; //@line 14153
   sp = STACKTOP; //@line 14154
   return;
  }
  HEAP8[___async_retval >> 0] = $446; //@line 14158
  ___async_unwind = 0; //@line 14159
  HEAP32[$ReallocAsyncCtx4 >> 2] = 478; //@line 14160
  $447 = $ReallocAsyncCtx4 + 4 | 0; //@line 14161
  HEAP32[$447 >> 2] = $2; //@line 14162
  $448 = $ReallocAsyncCtx4 + 8 | 0; //@line 14163
  HEAP8[$448 >> 0] = $4; //@line 14164
  $449 = $ReallocAsyncCtx4 + 12 | 0; //@line 14165
  HEAP32[$449 >> 2] = $6; //@line 14166
  $450 = $ReallocAsyncCtx4 + 16 | 0; //@line 14167
  HEAP32[$450 >> 2] = $8; //@line 14168
  $451 = $ReallocAsyncCtx4 + 20 | 0; //@line 14169
  HEAP32[$451 >> 2] = $10; //@line 14170
  $452 = $ReallocAsyncCtx4 + 24 | 0; //@line 14171
  HEAP32[$452 >> 2] = $12; //@line 14172
  $453 = $ReallocAsyncCtx4 + 28 | 0; //@line 14173
  HEAP32[$453 >> 2] = $14; //@line 14174
  $454 = $ReallocAsyncCtx4 + 32 | 0; //@line 14175
  HEAP32[$454 >> 2] = $16; //@line 14176
  $455 = $ReallocAsyncCtx4 + 36 | 0; //@line 14177
  HEAP32[$455 >> 2] = $18; //@line 14178
  $456 = $ReallocAsyncCtx4 + 40 | 0; //@line 14179
  HEAP32[$456 >> 2] = $20; //@line 14180
  $457 = $ReallocAsyncCtx4 + 44 | 0; //@line 14181
  HEAP32[$457 >> 2] = $22; //@line 14182
  $458 = $ReallocAsyncCtx4 + 48 | 0; //@line 14183
  HEAP32[$458 >> 2] = $24; //@line 14184
  $459 = $ReallocAsyncCtx4 + 52 | 0; //@line 14185
  HEAP32[$459 >> 2] = $26; //@line 14186
  $460 = $ReallocAsyncCtx4 + 56 | 0; //@line 14187
  HEAP32[$460 >> 2] = $28; //@line 14188
  $461 = $ReallocAsyncCtx4 + 60 | 0; //@line 14189
  HEAP32[$461 >> 2] = $30; //@line 14190
  $462 = $ReallocAsyncCtx4 + 64 | 0; //@line 14191
  HEAP32[$462 >> 2] = $32; //@line 14192
  $463 = $ReallocAsyncCtx4 + 68 | 0; //@line 14193
  HEAP32[$463 >> 2] = $34; //@line 14194
  $464 = $ReallocAsyncCtx4 + 72 | 0; //@line 14195
  HEAP32[$464 >> 2] = $36; //@line 14196
  $465 = $ReallocAsyncCtx4 + 76 | 0; //@line 14197
  HEAP32[$465 >> 2] = $38; //@line 14198
  $466 = $ReallocAsyncCtx4 + 80 | 0; //@line 14199
  HEAP32[$466 >> 2] = $40; //@line 14200
  $467 = $ReallocAsyncCtx4 + 84 | 0; //@line 14201
  HEAP8[$467 >> 0] = $439; //@line 14202
  $468 = $ReallocAsyncCtx4 + 85 | 0; //@line 14203
  HEAP8[$468 >> 0] = $44; //@line 14204
  $469 = $ReallocAsyncCtx4 + 86 | 0; //@line 14205
  HEAP8[$469 >> 0] = $42; //@line 14206
  $470 = $ReallocAsyncCtx4 + 88 | 0; //@line 14207
  HEAP32[$470 >> 2] = $48; //@line 14208
  $471 = $ReallocAsyncCtx4 + 92 | 0; //@line 14209
  HEAP32[$471 >> 2] = $50; //@line 14210
  $472 = $ReallocAsyncCtx4 + 96 | 0; //@line 14211
  HEAP32[$472 >> 2] = $46; //@line 14212
  $473 = $ReallocAsyncCtx4 + 100 | 0; //@line 14213
  HEAP32[$473 >> 2] = $52; //@line 14214
  $474 = $ReallocAsyncCtx4 + 104 | 0; //@line 14215
  HEAP32[$474 >> 2] = $54; //@line 14216
  $475 = $ReallocAsyncCtx4 + 108 | 0; //@line 14217
  HEAP32[$475 >> 2] = $56; //@line 14218
  $476 = $ReallocAsyncCtx4 + 112 | 0; //@line 14219
  HEAP32[$476 >> 2] = $58; //@line 14220
  $477 = $ReallocAsyncCtx4 + 116 | 0; //@line 14221
  HEAP32[$477 >> 2] = $60; //@line 14222
  $478 = $ReallocAsyncCtx4 + 120 | 0; //@line 14223
  HEAP32[$478 >> 2] = $62; //@line 14224
  $479 = $ReallocAsyncCtx4 + 124 | 0; //@line 14225
  HEAP32[$479 >> 2] = $64; //@line 14226
  $480 = $ReallocAsyncCtx4 + 128 | 0; //@line 14227
  HEAP32[$480 >> 2] = $66; //@line 14228
  $481 = $ReallocAsyncCtx4 + 132 | 0; //@line 14229
  HEAP32[$481 >> 2] = $68; //@line 14230
  $482 = $ReallocAsyncCtx4 + 136 | 0; //@line 14231
  HEAP32[$482 >> 2] = $70; //@line 14232
  $483 = $ReallocAsyncCtx4 + 140 | 0; //@line 14233
  HEAP32[$483 >> 2] = $72; //@line 14234
  $484 = $ReallocAsyncCtx4 + 144 | 0; //@line 14235
  HEAP32[$484 >> 2] = $74; //@line 14236
  $485 = $ReallocAsyncCtx4 + 148 | 0; //@line 14237
  HEAP32[$485 >> 2] = $76; //@line 14238
  $486 = $ReallocAsyncCtx4 + 152 | 0; //@line 14239
  HEAP32[$486 >> 2] = $78; //@line 14240
  $487 = $ReallocAsyncCtx4 + 156 | 0; //@line 14241
  HEAP32[$487 >> 2] = $80; //@line 14242
  $488 = $ReallocAsyncCtx4 + 160 | 0; //@line 14243
  HEAP32[$488 >> 2] = $82; //@line 14244
  $489 = $ReallocAsyncCtx4 + 164 | 0; //@line 14245
  HEAP32[$489 >> 2] = $84; //@line 14246
  $490 = $ReallocAsyncCtx4 + 168 | 0; //@line 14247
  HEAP32[$490 >> 2] = $86; //@line 14248
  $491 = $ReallocAsyncCtx4 + 172 | 0; //@line 14249
  HEAP32[$491 >> 2] = $88; //@line 14250
  $492 = $ReallocAsyncCtx4 + 176 | 0; //@line 14251
  HEAP32[$492 >> 2] = $90; //@line 14252
  $493 = $ReallocAsyncCtx4 + 180 | 0; //@line 14253
  HEAP32[$493 >> 2] = $92; //@line 14254
  $494 = $ReallocAsyncCtx4 + 184 | 0; //@line 14255
  HEAP32[$494 >> 2] = $94; //@line 14256
  $495 = $ReallocAsyncCtx4 + 188 | 0; //@line 14257
  HEAP32[$495 >> 2] = $96; //@line 14258
  $496 = $ReallocAsyncCtx4 + 192 | 0; //@line 14259
  HEAP32[$496 >> 2] = $98; //@line 14260
  $497 = $ReallocAsyncCtx4 + 196 | 0; //@line 14261
  HEAP32[$497 >> 2] = $100; //@line 14262
  $498 = $ReallocAsyncCtx4 + 200 | 0; //@line 14263
  HEAP32[$498 >> 2] = $102; //@line 14264
  $499 = $ReallocAsyncCtx4 + 204 | 0; //@line 14265
  HEAP32[$499 >> 2] = $104; //@line 14266
  $500 = $ReallocAsyncCtx4 + 208 | 0; //@line 14267
  HEAP32[$500 >> 2] = $106; //@line 14268
  $501 = $ReallocAsyncCtx4 + 212 | 0; //@line 14269
  HEAP32[$501 >> 2] = $108; //@line 14270
  $502 = $ReallocAsyncCtx4 + 216 | 0; //@line 14271
  HEAP32[$502 >> 2] = $110; //@line 14272
  $503 = $ReallocAsyncCtx4 + 220 | 0; //@line 14273
  HEAP32[$503 >> 2] = $116; //@line 14274
  $504 = $ReallocAsyncCtx4 + 224 | 0; //@line 14275
  HEAP32[$504 >> 2] = $118; //@line 14276
  sp = STACKTOP; //@line 14277
  return;
 } else if ((label | 0) == 32) {
  $525 = $$0$be + 2 << 24 >> 24; //@line 14281
  $529 = HEAPU8[$36 + ($121 & 255) >> 0] | 0; //@line 14285
  $531 = $529 >>> 5 & 1; //@line 14288
  $533 = $529 >>> 4 & 1; //@line 14291
  $536 = HEAP32[(HEAP32[$78 >> 2] | 0) + 44 >> 2] | 0; //@line 14294
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(248) | 0; //@line 14295
  $537 = FUNCTION_TABLE_iiii[$536 & 31]($60, $533, $531) | 0; //@line 14296
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 14299
   $538 = $ReallocAsyncCtx5 + 4 | 0; //@line 14300
   HEAP32[$538 >> 2] = $2; //@line 14301
   $539 = $ReallocAsyncCtx5 + 8 | 0; //@line 14302
   HEAP8[$539 >> 0] = $4; //@line 14303
   $540 = $ReallocAsyncCtx5 + 12 | 0; //@line 14304
   HEAP32[$540 >> 2] = $6; //@line 14305
   $541 = $ReallocAsyncCtx5 + 16 | 0; //@line 14306
   HEAP32[$541 >> 2] = $8; //@line 14307
   $542 = $ReallocAsyncCtx5 + 20 | 0; //@line 14308
   HEAP32[$542 >> 2] = $10; //@line 14309
   $543 = $ReallocAsyncCtx5 + 24 | 0; //@line 14310
   HEAP32[$543 >> 2] = $529; //@line 14311
   $544 = $ReallocAsyncCtx5 + 28 | 0; //@line 14312
   HEAP32[$544 >> 2] = $12; //@line 14313
   $545 = $ReallocAsyncCtx5 + 32 | 0; //@line 14314
   HEAP32[$545 >> 2] = $14; //@line 14315
   $546 = $ReallocAsyncCtx5 + 36 | 0; //@line 14316
   HEAP32[$546 >> 2] = $16; //@line 14317
   $547 = $ReallocAsyncCtx5 + 40 | 0; //@line 14318
   HEAP32[$547 >> 2] = $18; //@line 14319
   $548 = $ReallocAsyncCtx5 + 44 | 0; //@line 14320
   HEAP32[$548 >> 2] = $20; //@line 14321
   $549 = $ReallocAsyncCtx5 + 48 | 0; //@line 14322
   HEAP32[$549 >> 2] = $22; //@line 14323
   $550 = $ReallocAsyncCtx5 + 52 | 0; //@line 14324
   HEAP32[$550 >> 2] = $24; //@line 14325
   $551 = $ReallocAsyncCtx5 + 56 | 0; //@line 14326
   HEAP32[$551 >> 2] = $26; //@line 14327
   $552 = $ReallocAsyncCtx5 + 60 | 0; //@line 14328
   HEAP32[$552 >> 2] = $28; //@line 14329
   $553 = $ReallocAsyncCtx5 + 64 | 0; //@line 14330
   HEAP32[$553 >> 2] = $30; //@line 14331
   $554 = $ReallocAsyncCtx5 + 68 | 0; //@line 14332
   HEAP32[$554 >> 2] = $32; //@line 14333
   $555 = $ReallocAsyncCtx5 + 72 | 0; //@line 14334
   HEAP8[$555 >> 0] = $531; //@line 14335
   $556 = $ReallocAsyncCtx5 + 76 | 0; //@line 14336
   HEAP32[$556 >> 2] = $34; //@line 14337
   $557 = $ReallocAsyncCtx5 + 80 | 0; //@line 14338
   HEAP32[$557 >> 2] = $36; //@line 14339
   $558 = $ReallocAsyncCtx5 + 84 | 0; //@line 14340
   HEAP32[$558 >> 2] = $38; //@line 14341
   $559 = $ReallocAsyncCtx5 + 88 | 0; //@line 14342
   HEAP32[$559 >> 2] = $40; //@line 14343
   $560 = $ReallocAsyncCtx5 + 92 | 0; //@line 14344
   HEAP8[$560 >> 0] = $42; //@line 14345
   $561 = $ReallocAsyncCtx5 + 93 | 0; //@line 14346
   HEAP8[$561 >> 0] = $44; //@line 14347
   $562 = $ReallocAsyncCtx5 + 96 | 0; //@line 14348
   HEAP32[$562 >> 2] = $50; //@line 14349
   $563 = $ReallocAsyncCtx5 + 100 | 0; //@line 14350
   HEAP32[$563 >> 2] = $48; //@line 14351
   $564 = $ReallocAsyncCtx5 + 104 | 0; //@line 14352
   HEAP32[$564 >> 2] = $46; //@line 14353
   $565 = $ReallocAsyncCtx5 + 108 | 0; //@line 14354
   HEAP32[$565 >> 2] = $52; //@line 14355
   $566 = $ReallocAsyncCtx5 + 112 | 0; //@line 14356
   HEAP8[$566 >> 0] = $525; //@line 14357
   $567 = $ReallocAsyncCtx5 + 116 | 0; //@line 14358
   HEAP32[$567 >> 2] = $54; //@line 14359
   $568 = $ReallocAsyncCtx5 + 120 | 0; //@line 14360
   HEAP32[$568 >> 2] = $56; //@line 14361
   $569 = $ReallocAsyncCtx5 + 124 | 0; //@line 14362
   HEAP32[$569 >> 2] = $58; //@line 14363
   $570 = $ReallocAsyncCtx5 + 128 | 0; //@line 14364
   HEAP32[$570 >> 2] = $60; //@line 14365
   $571 = $ReallocAsyncCtx5 + 132 | 0; //@line 14366
   HEAP32[$571 >> 2] = $62; //@line 14367
   $572 = $ReallocAsyncCtx5 + 136 | 0; //@line 14368
   HEAP32[$572 >> 2] = $64; //@line 14369
   $573 = $ReallocAsyncCtx5 + 140 | 0; //@line 14370
   HEAP32[$573 >> 2] = $66; //@line 14371
   $574 = $ReallocAsyncCtx5 + 144 | 0; //@line 14372
   HEAP32[$574 >> 2] = $68; //@line 14373
   $575 = $ReallocAsyncCtx5 + 148 | 0; //@line 14374
   HEAP32[$575 >> 2] = $70; //@line 14375
   $576 = $ReallocAsyncCtx5 + 152 | 0; //@line 14376
   HEAP32[$576 >> 2] = $72; //@line 14377
   $577 = $ReallocAsyncCtx5 + 156 | 0; //@line 14378
   HEAP8[$577 >> 0] = $533; //@line 14379
   $578 = $ReallocAsyncCtx5 + 160 | 0; //@line 14380
   HEAP32[$578 >> 2] = $74; //@line 14381
   $579 = $ReallocAsyncCtx5 + 164 | 0; //@line 14382
   HEAP32[$579 >> 2] = $76; //@line 14383
   $580 = $ReallocAsyncCtx5 + 168 | 0; //@line 14384
   HEAP32[$580 >> 2] = $78; //@line 14385
   $581 = $ReallocAsyncCtx5 + 172 | 0; //@line 14386
   HEAP32[$581 >> 2] = $80; //@line 14387
   $582 = $ReallocAsyncCtx5 + 176 | 0; //@line 14388
   HEAP32[$582 >> 2] = $82; //@line 14389
   $583 = $ReallocAsyncCtx5 + 180 | 0; //@line 14390
   HEAP32[$583 >> 2] = $84; //@line 14391
   $584 = $ReallocAsyncCtx5 + 184 | 0; //@line 14392
   HEAP32[$584 >> 2] = $86; //@line 14393
   $585 = $ReallocAsyncCtx5 + 188 | 0; //@line 14394
   HEAP32[$585 >> 2] = $88; //@line 14395
   $586 = $ReallocAsyncCtx5 + 192 | 0; //@line 14396
   HEAP32[$586 >> 2] = $90; //@line 14397
   $587 = $ReallocAsyncCtx5 + 196 | 0; //@line 14398
   HEAP32[$587 >> 2] = $92; //@line 14399
   $588 = $ReallocAsyncCtx5 + 200 | 0; //@line 14400
   HEAP32[$588 >> 2] = $94; //@line 14401
   $589 = $ReallocAsyncCtx5 + 204 | 0; //@line 14402
   HEAP32[$589 >> 2] = $96; //@line 14403
   $590 = $ReallocAsyncCtx5 + 208 | 0; //@line 14404
   HEAP32[$590 >> 2] = $98; //@line 14405
   $591 = $ReallocAsyncCtx5 + 212 | 0; //@line 14406
   HEAP32[$591 >> 2] = $100; //@line 14407
   $592 = $ReallocAsyncCtx5 + 216 | 0; //@line 14408
   HEAP32[$592 >> 2] = $102; //@line 14409
   $593 = $ReallocAsyncCtx5 + 220 | 0; //@line 14410
   HEAP32[$593 >> 2] = $104; //@line 14411
   $594 = $ReallocAsyncCtx5 + 224 | 0; //@line 14412
   HEAP32[$594 >> 2] = $106; //@line 14413
   $595 = $ReallocAsyncCtx5 + 228 | 0; //@line 14414
   HEAP32[$595 >> 2] = $108; //@line 14415
   $596 = $ReallocAsyncCtx5 + 232 | 0; //@line 14416
   HEAP32[$596 >> 2] = $110; //@line 14417
   $597 = $ReallocAsyncCtx5 + 236 | 0; //@line 14418
   HEAP32[$597 >> 2] = $$0107$be; //@line 14419
   $598 = $ReallocAsyncCtx5 + 240 | 0; //@line 14420
   HEAP32[$598 >> 2] = $116; //@line 14421
   $599 = $ReallocAsyncCtx5 + 244 | 0; //@line 14422
   HEAP32[$599 >> 2] = $118; //@line 14423
   sp = STACKTOP; //@line 14424
   return;
  }
  HEAP8[___async_retval >> 0] = $537 & 1; //@line 14429
  ___async_unwind = 0; //@line 14430
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 14431
  $538 = $ReallocAsyncCtx5 + 4 | 0; //@line 14432
  HEAP32[$538 >> 2] = $2; //@line 14433
  $539 = $ReallocAsyncCtx5 + 8 | 0; //@line 14434
  HEAP8[$539 >> 0] = $4; //@line 14435
  $540 = $ReallocAsyncCtx5 + 12 | 0; //@line 14436
  HEAP32[$540 >> 2] = $6; //@line 14437
  $541 = $ReallocAsyncCtx5 + 16 | 0; //@line 14438
  HEAP32[$541 >> 2] = $8; //@line 14439
  $542 = $ReallocAsyncCtx5 + 20 | 0; //@line 14440
  HEAP32[$542 >> 2] = $10; //@line 14441
  $543 = $ReallocAsyncCtx5 + 24 | 0; //@line 14442
  HEAP32[$543 >> 2] = $529; //@line 14443
  $544 = $ReallocAsyncCtx5 + 28 | 0; //@line 14444
  HEAP32[$544 >> 2] = $12; //@line 14445
  $545 = $ReallocAsyncCtx5 + 32 | 0; //@line 14446
  HEAP32[$545 >> 2] = $14; //@line 14447
  $546 = $ReallocAsyncCtx5 + 36 | 0; //@line 14448
  HEAP32[$546 >> 2] = $16; //@line 14449
  $547 = $ReallocAsyncCtx5 + 40 | 0; //@line 14450
  HEAP32[$547 >> 2] = $18; //@line 14451
  $548 = $ReallocAsyncCtx5 + 44 | 0; //@line 14452
  HEAP32[$548 >> 2] = $20; //@line 14453
  $549 = $ReallocAsyncCtx5 + 48 | 0; //@line 14454
  HEAP32[$549 >> 2] = $22; //@line 14455
  $550 = $ReallocAsyncCtx5 + 52 | 0; //@line 14456
  HEAP32[$550 >> 2] = $24; //@line 14457
  $551 = $ReallocAsyncCtx5 + 56 | 0; //@line 14458
  HEAP32[$551 >> 2] = $26; //@line 14459
  $552 = $ReallocAsyncCtx5 + 60 | 0; //@line 14460
  HEAP32[$552 >> 2] = $28; //@line 14461
  $553 = $ReallocAsyncCtx5 + 64 | 0; //@line 14462
  HEAP32[$553 >> 2] = $30; //@line 14463
  $554 = $ReallocAsyncCtx5 + 68 | 0; //@line 14464
  HEAP32[$554 >> 2] = $32; //@line 14465
  $555 = $ReallocAsyncCtx5 + 72 | 0; //@line 14466
  HEAP8[$555 >> 0] = $531; //@line 14467
  $556 = $ReallocAsyncCtx5 + 76 | 0; //@line 14468
  HEAP32[$556 >> 2] = $34; //@line 14469
  $557 = $ReallocAsyncCtx5 + 80 | 0; //@line 14470
  HEAP32[$557 >> 2] = $36; //@line 14471
  $558 = $ReallocAsyncCtx5 + 84 | 0; //@line 14472
  HEAP32[$558 >> 2] = $38; //@line 14473
  $559 = $ReallocAsyncCtx5 + 88 | 0; //@line 14474
  HEAP32[$559 >> 2] = $40; //@line 14475
  $560 = $ReallocAsyncCtx5 + 92 | 0; //@line 14476
  HEAP8[$560 >> 0] = $42; //@line 14477
  $561 = $ReallocAsyncCtx5 + 93 | 0; //@line 14478
  HEAP8[$561 >> 0] = $44; //@line 14479
  $562 = $ReallocAsyncCtx5 + 96 | 0; //@line 14480
  HEAP32[$562 >> 2] = $50; //@line 14481
  $563 = $ReallocAsyncCtx5 + 100 | 0; //@line 14482
  HEAP32[$563 >> 2] = $48; //@line 14483
  $564 = $ReallocAsyncCtx5 + 104 | 0; //@line 14484
  HEAP32[$564 >> 2] = $46; //@line 14485
  $565 = $ReallocAsyncCtx5 + 108 | 0; //@line 14486
  HEAP32[$565 >> 2] = $52; //@line 14487
  $566 = $ReallocAsyncCtx5 + 112 | 0; //@line 14488
  HEAP8[$566 >> 0] = $525; //@line 14489
  $567 = $ReallocAsyncCtx5 + 116 | 0; //@line 14490
  HEAP32[$567 >> 2] = $54; //@line 14491
  $568 = $ReallocAsyncCtx5 + 120 | 0; //@line 14492
  HEAP32[$568 >> 2] = $56; //@line 14493
  $569 = $ReallocAsyncCtx5 + 124 | 0; //@line 14494
  HEAP32[$569 >> 2] = $58; //@line 14495
  $570 = $ReallocAsyncCtx5 + 128 | 0; //@line 14496
  HEAP32[$570 >> 2] = $60; //@line 14497
  $571 = $ReallocAsyncCtx5 + 132 | 0; //@line 14498
  HEAP32[$571 >> 2] = $62; //@line 14499
  $572 = $ReallocAsyncCtx5 + 136 | 0; //@line 14500
  HEAP32[$572 >> 2] = $64; //@line 14501
  $573 = $ReallocAsyncCtx5 + 140 | 0; //@line 14502
  HEAP32[$573 >> 2] = $66; //@line 14503
  $574 = $ReallocAsyncCtx5 + 144 | 0; //@line 14504
  HEAP32[$574 >> 2] = $68; //@line 14505
  $575 = $ReallocAsyncCtx5 + 148 | 0; //@line 14506
  HEAP32[$575 >> 2] = $70; //@line 14507
  $576 = $ReallocAsyncCtx5 + 152 | 0; //@line 14508
  HEAP32[$576 >> 2] = $72; //@line 14509
  $577 = $ReallocAsyncCtx5 + 156 | 0; //@line 14510
  HEAP8[$577 >> 0] = $533; //@line 14511
  $578 = $ReallocAsyncCtx5 + 160 | 0; //@line 14512
  HEAP32[$578 >> 2] = $74; //@line 14513
  $579 = $ReallocAsyncCtx5 + 164 | 0; //@line 14514
  HEAP32[$579 >> 2] = $76; //@line 14515
  $580 = $ReallocAsyncCtx5 + 168 | 0; //@line 14516
  HEAP32[$580 >> 2] = $78; //@line 14517
  $581 = $ReallocAsyncCtx5 + 172 | 0; //@line 14518
  HEAP32[$581 >> 2] = $80; //@line 14519
  $582 = $ReallocAsyncCtx5 + 176 | 0; //@line 14520
  HEAP32[$582 >> 2] = $82; //@line 14521
  $583 = $ReallocAsyncCtx5 + 180 | 0; //@line 14522
  HEAP32[$583 >> 2] = $84; //@line 14523
  $584 = $ReallocAsyncCtx5 + 184 | 0; //@line 14524
  HEAP32[$584 >> 2] = $86; //@line 14525
  $585 = $ReallocAsyncCtx5 + 188 | 0; //@line 14526
  HEAP32[$585 >> 2] = $88; //@line 14527
  $586 = $ReallocAsyncCtx5 + 192 | 0; //@line 14528
  HEAP32[$586 >> 2] = $90; //@line 14529
  $587 = $ReallocAsyncCtx5 + 196 | 0; //@line 14530
  HEAP32[$587 >> 2] = $92; //@line 14531
  $588 = $ReallocAsyncCtx5 + 200 | 0; //@line 14532
  HEAP32[$588 >> 2] = $94; //@line 14533
  $589 = $ReallocAsyncCtx5 + 204 | 0; //@line 14534
  HEAP32[$589 >> 2] = $96; //@line 14535
  $590 = $ReallocAsyncCtx5 + 208 | 0; //@line 14536
  HEAP32[$590 >> 2] = $98; //@line 14537
  $591 = $ReallocAsyncCtx5 + 212 | 0; //@line 14538
  HEAP32[$591 >> 2] = $100; //@line 14539
  $592 = $ReallocAsyncCtx5 + 216 | 0; //@line 14540
  HEAP32[$592 >> 2] = $102; //@line 14541
  $593 = $ReallocAsyncCtx5 + 220 | 0; //@line 14542
  HEAP32[$593 >> 2] = $104; //@line 14543
  $594 = $ReallocAsyncCtx5 + 224 | 0; //@line 14544
  HEAP32[$594 >> 2] = $106; //@line 14545
  $595 = $ReallocAsyncCtx5 + 228 | 0; //@line 14546
  HEAP32[$595 >> 2] = $108; //@line 14547
  $596 = $ReallocAsyncCtx5 + 232 | 0; //@line 14548
  HEAP32[$596 >> 2] = $110; //@line 14549
  $597 = $ReallocAsyncCtx5 + 236 | 0; //@line 14550
  HEAP32[$597 >> 2] = $$0107$be; //@line 14551
  $598 = $ReallocAsyncCtx5 + 240 | 0; //@line 14552
  HEAP32[$598 >> 2] = $116; //@line 14553
  $599 = $ReallocAsyncCtx5 + 244 | 0; //@line 14554
  HEAP32[$599 >> 2] = $118; //@line 14555
  sp = STACKTOP; //@line 14556
  return;
 } else if ((label | 0) == 35) {
  $604 = HEAP8[$36 + ($121 & 255) >> 0] | 0; //@line 14563
  $617 = $$0$be + 5 << 24 >> 24; //@line 14576
  $624 = (HEAPU8[$36 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$36 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$36 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 14583
  $627 = HEAP32[(HEAP32[$98 >> 2] | 0) + 48 >> 2] | 0; //@line 14586
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(232) | 0; //@line 14587
  $628 = FUNCTION_TABLE_iiii[$627 & 31]($60, $604, $624) | 0; //@line 14588
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 480; //@line 14591
   $629 = $ReallocAsyncCtx6 + 4 | 0; //@line 14592
   HEAP32[$629 >> 2] = $2; //@line 14593
   $630 = $ReallocAsyncCtx6 + 8 | 0; //@line 14594
   HEAP8[$630 >> 0] = $4; //@line 14595
   $631 = $ReallocAsyncCtx6 + 12 | 0; //@line 14596
   HEAP32[$631 >> 2] = $6; //@line 14597
   $632 = $ReallocAsyncCtx6 + 16 | 0; //@line 14598
   HEAP32[$632 >> 2] = $8; //@line 14599
   $633 = $ReallocAsyncCtx6 + 20 | 0; //@line 14600
   HEAP32[$633 >> 2] = $10; //@line 14601
   $634 = $ReallocAsyncCtx6 + 24 | 0; //@line 14602
   HEAP32[$634 >> 2] = $12; //@line 14603
   $635 = $ReallocAsyncCtx6 + 28 | 0; //@line 14604
   HEAP32[$635 >> 2] = $14; //@line 14605
   $636 = $ReallocAsyncCtx6 + 32 | 0; //@line 14606
   HEAP32[$636 >> 2] = $16; //@line 14607
   $637 = $ReallocAsyncCtx6 + 36 | 0; //@line 14608
   HEAP32[$637 >> 2] = $18; //@line 14609
   $638 = $ReallocAsyncCtx6 + 40 | 0; //@line 14610
   HEAP32[$638 >> 2] = $20; //@line 14611
   $639 = $ReallocAsyncCtx6 + 44 | 0; //@line 14612
   HEAP32[$639 >> 2] = $22; //@line 14613
   $640 = $ReallocAsyncCtx6 + 48 | 0; //@line 14614
   HEAP32[$640 >> 2] = $24; //@line 14615
   $641 = $ReallocAsyncCtx6 + 52 | 0; //@line 14616
   HEAP32[$641 >> 2] = $26; //@line 14617
   $642 = $ReallocAsyncCtx6 + 56 | 0; //@line 14618
   HEAP32[$642 >> 2] = $28; //@line 14619
   $643 = $ReallocAsyncCtx6 + 60 | 0; //@line 14620
   HEAP32[$643 >> 2] = $30; //@line 14621
   $644 = $ReallocAsyncCtx6 + 64 | 0; //@line 14622
   HEAP32[$644 >> 2] = $32; //@line 14623
   $645 = $ReallocAsyncCtx6 + 68 | 0; //@line 14624
   HEAP32[$645 >> 2] = $34; //@line 14625
   $646 = $ReallocAsyncCtx6 + 72 | 0; //@line 14626
   HEAP32[$646 >> 2] = $36; //@line 14627
   $647 = $ReallocAsyncCtx6 + 76 | 0; //@line 14628
   HEAP32[$647 >> 2] = $38; //@line 14629
   $648 = $ReallocAsyncCtx6 + 80 | 0; //@line 14630
   HEAP32[$648 >> 2] = $40; //@line 14631
   $649 = $ReallocAsyncCtx6 + 84 | 0; //@line 14632
   HEAP8[$649 >> 0] = $42; //@line 14633
   $650 = $ReallocAsyncCtx6 + 85 | 0; //@line 14634
   HEAP8[$650 >> 0] = $44; //@line 14635
   $651 = $ReallocAsyncCtx6 + 88 | 0; //@line 14636
   HEAP32[$651 >> 2] = $50; //@line 14637
   $652 = $ReallocAsyncCtx6 + 92 | 0; //@line 14638
   HEAP32[$652 >> 2] = $48; //@line 14639
   $653 = $ReallocAsyncCtx6 + 96 | 0; //@line 14640
   HEAP32[$653 >> 2] = $46; //@line 14641
   $654 = $ReallocAsyncCtx6 + 100 | 0; //@line 14642
   HEAP32[$654 >> 2] = $52; //@line 14643
   $655 = $ReallocAsyncCtx6 + 104 | 0; //@line 14644
   HEAP32[$655 >> 2] = $54; //@line 14645
   $656 = $ReallocAsyncCtx6 + 108 | 0; //@line 14646
   HEAP32[$656 >> 2] = $56; //@line 14647
   $657 = $ReallocAsyncCtx6 + 112 | 0; //@line 14648
   HEAP32[$657 >> 2] = $58; //@line 14649
   $658 = $ReallocAsyncCtx6 + 116 | 0; //@line 14650
   HEAP32[$658 >> 2] = $60; //@line 14651
   $659 = $ReallocAsyncCtx6 + 120 | 0; //@line 14652
   HEAP32[$659 >> 2] = $62; //@line 14653
   $660 = $ReallocAsyncCtx6 + 124 | 0; //@line 14654
   HEAP32[$660 >> 2] = $64; //@line 14655
   $661 = $ReallocAsyncCtx6 + 128 | 0; //@line 14656
   HEAP32[$661 >> 2] = $66; //@line 14657
   $662 = $ReallocAsyncCtx6 + 132 | 0; //@line 14658
   HEAP32[$662 >> 2] = $68; //@line 14659
   $663 = $ReallocAsyncCtx6 + 136 | 0; //@line 14660
   HEAP32[$663 >> 2] = $70; //@line 14661
   $664 = $ReallocAsyncCtx6 + 140 | 0; //@line 14662
   HEAP32[$664 >> 2] = $72; //@line 14663
   $665 = $ReallocAsyncCtx6 + 144 | 0; //@line 14664
   HEAP32[$665 >> 2] = $74; //@line 14665
   $666 = $ReallocAsyncCtx6 + 148 | 0; //@line 14666
   HEAP32[$666 >> 2] = $76; //@line 14667
   $667 = $ReallocAsyncCtx6 + 152 | 0; //@line 14668
   HEAP32[$667 >> 2] = $78; //@line 14669
   $668 = $ReallocAsyncCtx6 + 156 | 0; //@line 14670
   HEAP32[$668 >> 2] = $80; //@line 14671
   $669 = $ReallocAsyncCtx6 + 160 | 0; //@line 14672
   HEAP32[$669 >> 2] = $82; //@line 14673
   $670 = $ReallocAsyncCtx6 + 164 | 0; //@line 14674
   HEAP8[$670 >> 0] = $617; //@line 14675
   $671 = $ReallocAsyncCtx6 + 168 | 0; //@line 14676
   HEAP32[$671 >> 2] = $84; //@line 14677
   $672 = $ReallocAsyncCtx6 + 172 | 0; //@line 14678
   HEAP32[$672 >> 2] = $86; //@line 14679
   $673 = $ReallocAsyncCtx6 + 176 | 0; //@line 14680
   HEAP32[$673 >> 2] = $88; //@line 14681
   $674 = $ReallocAsyncCtx6 + 180 | 0; //@line 14682
   HEAP32[$674 >> 2] = $90; //@line 14683
   $675 = $ReallocAsyncCtx6 + 184 | 0; //@line 14684
   HEAP32[$675 >> 2] = $92; //@line 14685
   $676 = $ReallocAsyncCtx6 + 188 | 0; //@line 14686
   HEAP32[$676 >> 2] = $94; //@line 14687
   $677 = $ReallocAsyncCtx6 + 192 | 0; //@line 14688
   HEAP32[$677 >> 2] = $96; //@line 14689
   $678 = $ReallocAsyncCtx6 + 196 | 0; //@line 14690
   HEAP32[$678 >> 2] = $98; //@line 14691
   $679 = $ReallocAsyncCtx6 + 200 | 0; //@line 14692
   HEAP32[$679 >> 2] = $100; //@line 14693
   $680 = $ReallocAsyncCtx6 + 204 | 0; //@line 14694
   HEAP32[$680 >> 2] = $102; //@line 14695
   $681 = $ReallocAsyncCtx6 + 208 | 0; //@line 14696
   HEAP32[$681 >> 2] = $104; //@line 14697
   $682 = $ReallocAsyncCtx6 + 212 | 0; //@line 14698
   HEAP32[$682 >> 2] = $106; //@line 14699
   $683 = $ReallocAsyncCtx6 + 216 | 0; //@line 14700
   HEAP32[$683 >> 2] = $108; //@line 14701
   $684 = $ReallocAsyncCtx6 + 220 | 0; //@line 14702
   HEAP32[$684 >> 2] = $110; //@line 14703
   $685 = $ReallocAsyncCtx6 + 224 | 0; //@line 14704
   HEAP32[$685 >> 2] = $116; //@line 14705
   $686 = $ReallocAsyncCtx6 + 228 | 0; //@line 14706
   HEAP32[$686 >> 2] = $118; //@line 14707
   sp = STACKTOP; //@line 14708
   return;
  }
  HEAP8[___async_retval >> 0] = $628; //@line 14712
  ___async_unwind = 0; //@line 14713
  HEAP32[$ReallocAsyncCtx6 >> 2] = 480; //@line 14714
  $629 = $ReallocAsyncCtx6 + 4 | 0; //@line 14715
  HEAP32[$629 >> 2] = $2; //@line 14716
  $630 = $ReallocAsyncCtx6 + 8 | 0; //@line 14717
  HEAP8[$630 >> 0] = $4; //@line 14718
  $631 = $ReallocAsyncCtx6 + 12 | 0; //@line 14719
  HEAP32[$631 >> 2] = $6; //@line 14720
  $632 = $ReallocAsyncCtx6 + 16 | 0; //@line 14721
  HEAP32[$632 >> 2] = $8; //@line 14722
  $633 = $ReallocAsyncCtx6 + 20 | 0; //@line 14723
  HEAP32[$633 >> 2] = $10; //@line 14724
  $634 = $ReallocAsyncCtx6 + 24 | 0; //@line 14725
  HEAP32[$634 >> 2] = $12; //@line 14726
  $635 = $ReallocAsyncCtx6 + 28 | 0; //@line 14727
  HEAP32[$635 >> 2] = $14; //@line 14728
  $636 = $ReallocAsyncCtx6 + 32 | 0; //@line 14729
  HEAP32[$636 >> 2] = $16; //@line 14730
  $637 = $ReallocAsyncCtx6 + 36 | 0; //@line 14731
  HEAP32[$637 >> 2] = $18; //@line 14732
  $638 = $ReallocAsyncCtx6 + 40 | 0; //@line 14733
  HEAP32[$638 >> 2] = $20; //@line 14734
  $639 = $ReallocAsyncCtx6 + 44 | 0; //@line 14735
  HEAP32[$639 >> 2] = $22; //@line 14736
  $640 = $ReallocAsyncCtx6 + 48 | 0; //@line 14737
  HEAP32[$640 >> 2] = $24; //@line 14738
  $641 = $ReallocAsyncCtx6 + 52 | 0; //@line 14739
  HEAP32[$641 >> 2] = $26; //@line 14740
  $642 = $ReallocAsyncCtx6 + 56 | 0; //@line 14741
  HEAP32[$642 >> 2] = $28; //@line 14742
  $643 = $ReallocAsyncCtx6 + 60 | 0; //@line 14743
  HEAP32[$643 >> 2] = $30; //@line 14744
  $644 = $ReallocAsyncCtx6 + 64 | 0; //@line 14745
  HEAP32[$644 >> 2] = $32; //@line 14746
  $645 = $ReallocAsyncCtx6 + 68 | 0; //@line 14747
  HEAP32[$645 >> 2] = $34; //@line 14748
  $646 = $ReallocAsyncCtx6 + 72 | 0; //@line 14749
  HEAP32[$646 >> 2] = $36; //@line 14750
  $647 = $ReallocAsyncCtx6 + 76 | 0; //@line 14751
  HEAP32[$647 >> 2] = $38; //@line 14752
  $648 = $ReallocAsyncCtx6 + 80 | 0; //@line 14753
  HEAP32[$648 >> 2] = $40; //@line 14754
  $649 = $ReallocAsyncCtx6 + 84 | 0; //@line 14755
  HEAP8[$649 >> 0] = $42; //@line 14756
  $650 = $ReallocAsyncCtx6 + 85 | 0; //@line 14757
  HEAP8[$650 >> 0] = $44; //@line 14758
  $651 = $ReallocAsyncCtx6 + 88 | 0; //@line 14759
  HEAP32[$651 >> 2] = $50; //@line 14760
  $652 = $ReallocAsyncCtx6 + 92 | 0; //@line 14761
  HEAP32[$652 >> 2] = $48; //@line 14762
  $653 = $ReallocAsyncCtx6 + 96 | 0; //@line 14763
  HEAP32[$653 >> 2] = $46; //@line 14764
  $654 = $ReallocAsyncCtx6 + 100 | 0; //@line 14765
  HEAP32[$654 >> 2] = $52; //@line 14766
  $655 = $ReallocAsyncCtx6 + 104 | 0; //@line 14767
  HEAP32[$655 >> 2] = $54; //@line 14768
  $656 = $ReallocAsyncCtx6 + 108 | 0; //@line 14769
  HEAP32[$656 >> 2] = $56; //@line 14770
  $657 = $ReallocAsyncCtx6 + 112 | 0; //@line 14771
  HEAP32[$657 >> 2] = $58; //@line 14772
  $658 = $ReallocAsyncCtx6 + 116 | 0; //@line 14773
  HEAP32[$658 >> 2] = $60; //@line 14774
  $659 = $ReallocAsyncCtx6 + 120 | 0; //@line 14775
  HEAP32[$659 >> 2] = $62; //@line 14776
  $660 = $ReallocAsyncCtx6 + 124 | 0; //@line 14777
  HEAP32[$660 >> 2] = $64; //@line 14778
  $661 = $ReallocAsyncCtx6 + 128 | 0; //@line 14779
  HEAP32[$661 >> 2] = $66; //@line 14780
  $662 = $ReallocAsyncCtx6 + 132 | 0; //@line 14781
  HEAP32[$662 >> 2] = $68; //@line 14782
  $663 = $ReallocAsyncCtx6 + 136 | 0; //@line 14783
  HEAP32[$663 >> 2] = $70; //@line 14784
  $664 = $ReallocAsyncCtx6 + 140 | 0; //@line 14785
  HEAP32[$664 >> 2] = $72; //@line 14786
  $665 = $ReallocAsyncCtx6 + 144 | 0; //@line 14787
  HEAP32[$665 >> 2] = $74; //@line 14788
  $666 = $ReallocAsyncCtx6 + 148 | 0; //@line 14789
  HEAP32[$666 >> 2] = $76; //@line 14790
  $667 = $ReallocAsyncCtx6 + 152 | 0; //@line 14791
  HEAP32[$667 >> 2] = $78; //@line 14792
  $668 = $ReallocAsyncCtx6 + 156 | 0; //@line 14793
  HEAP32[$668 >> 2] = $80; //@line 14794
  $669 = $ReallocAsyncCtx6 + 160 | 0; //@line 14795
  HEAP32[$669 >> 2] = $82; //@line 14796
  $670 = $ReallocAsyncCtx6 + 164 | 0; //@line 14797
  HEAP8[$670 >> 0] = $617; //@line 14798
  $671 = $ReallocAsyncCtx6 + 168 | 0; //@line 14799
  HEAP32[$671 >> 2] = $84; //@line 14800
  $672 = $ReallocAsyncCtx6 + 172 | 0; //@line 14801
  HEAP32[$672 >> 2] = $86; //@line 14802
  $673 = $ReallocAsyncCtx6 + 176 | 0; //@line 14803
  HEAP32[$673 >> 2] = $88; //@line 14804
  $674 = $ReallocAsyncCtx6 + 180 | 0; //@line 14805
  HEAP32[$674 >> 2] = $90; //@line 14806
  $675 = $ReallocAsyncCtx6 + 184 | 0; //@line 14807
  HEAP32[$675 >> 2] = $92; //@line 14808
  $676 = $ReallocAsyncCtx6 + 188 | 0; //@line 14809
  HEAP32[$676 >> 2] = $94; //@line 14810
  $677 = $ReallocAsyncCtx6 + 192 | 0; //@line 14811
  HEAP32[$677 >> 2] = $96; //@line 14812
  $678 = $ReallocAsyncCtx6 + 196 | 0; //@line 14813
  HEAP32[$678 >> 2] = $98; //@line 14814
  $679 = $ReallocAsyncCtx6 + 200 | 0; //@line 14815
  HEAP32[$679 >> 2] = $100; //@line 14816
  $680 = $ReallocAsyncCtx6 + 204 | 0; //@line 14817
  HEAP32[$680 >> 2] = $102; //@line 14818
  $681 = $ReallocAsyncCtx6 + 208 | 0; //@line 14819
  HEAP32[$681 >> 2] = $104; //@line 14820
  $682 = $ReallocAsyncCtx6 + 212 | 0; //@line 14821
  HEAP32[$682 >> 2] = $106; //@line 14822
  $683 = $ReallocAsyncCtx6 + 216 | 0; //@line 14823
  HEAP32[$683 >> 2] = $108; //@line 14824
  $684 = $ReallocAsyncCtx6 + 220 | 0; //@line 14825
  HEAP32[$684 >> 2] = $110; //@line 14826
  $685 = $ReallocAsyncCtx6 + 224 | 0; //@line 14827
  HEAP32[$685 >> 2] = $116; //@line 14828
  $686 = $ReallocAsyncCtx6 + 228 | 0; //@line 14829
  HEAP32[$686 >> 2] = $118; //@line 14830
  sp = STACKTOP; //@line 14831
  return;
 } else if ((label | 0) == 38) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 14836
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_328($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0107$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $120 = 0, $122 = 0, $124 = 0, $127 = 0, $138 = 0, $139 = 0, $14 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $212 = 0, $215 = 0, $22 = 0, $222 = 0, $223 = 0, $229 = 0, $24 = 0, $248 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $319 = 0, $32 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $385 = 0, $386 = 0, $4 = 0, $40 = 0, $400 = 0, $42 = 0, $421 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $489 = 0, $493 = 0, $497 = 0, $50 = 0, $502 = 0, $503 = 0, $507 = 0, $511 = 0, $513 = 0, $515 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $583 = 0, $590 = 0, $591 = 0, $598 = 0, $6 = 0, $60 = 0, $611 = 0, $618 = 0, $62 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20825
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20827
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 20829
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20831
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20833
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20835
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20839
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20841
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20843
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20845
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20847
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20849
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20851
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 20853
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 20855
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 20857
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 20859
 $36 = HEAP8[$0 + 72 >> 0] | 0; //@line 20861
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 20863
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 20865
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 20867
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 20869
 $46 = HEAP8[$0 + 92 >> 0] | 0; //@line 20871
 $48 = HEAP8[$0 + 93 >> 0] | 0; //@line 20873
 $50 = HEAP32[$0 + 96 >> 2] | 0; //@line 20875
 $52 = HEAP32[$0 + 100 >> 2] | 0; //@line 20877
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 20879
 $56 = HEAP32[$0 + 108 >> 2] | 0; //@line 20881
 $58 = HEAP8[$0 + 112 >> 0] | 0; //@line 20883
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 20885
 $62 = HEAP32[$0 + 120 >> 2] | 0; //@line 20887
 $64 = HEAP32[$0 + 124 >> 2] | 0; //@line 20889
 $66 = HEAP32[$0 + 128 >> 2] | 0; //@line 20891
 $68 = HEAP32[$0 + 132 >> 2] | 0; //@line 20893
 $70 = HEAP32[$0 + 136 >> 2] | 0; //@line 20895
 $72 = HEAP32[$0 + 140 >> 2] | 0; //@line 20897
 $74 = HEAP32[$0 + 144 >> 2] | 0; //@line 20899
 $76 = HEAP32[$0 + 148 >> 2] | 0; //@line 20901
 $78 = HEAP32[$0 + 152 >> 2] | 0; //@line 20903
 $82 = HEAP32[$0 + 160 >> 2] | 0; //@line 20907
 $84 = HEAP32[$0 + 164 >> 2] | 0; //@line 20909
 $86 = HEAP32[$0 + 168 >> 2] | 0; //@line 20911
 $88 = HEAP32[$0 + 172 >> 2] | 0; //@line 20913
 $90 = HEAP32[$0 + 176 >> 2] | 0; //@line 20915
 $92 = HEAP32[$0 + 180 >> 2] | 0; //@line 20917
 $94 = HEAP32[$0 + 184 >> 2] | 0; //@line 20919
 $96 = HEAP32[$0 + 188 >> 2] | 0; //@line 20921
 $98 = HEAP32[$0 + 192 >> 2] | 0; //@line 20923
 $100 = HEAP32[$0 + 196 >> 2] | 0; //@line 20925
 $102 = HEAP32[$0 + 200 >> 2] | 0; //@line 20927
 $104 = HEAP32[$0 + 204 >> 2] | 0; //@line 20929
 $106 = HEAP32[$0 + 208 >> 2] | 0; //@line 20931
 $108 = HEAP32[$0 + 212 >> 2] | 0; //@line 20933
 $110 = HEAP32[$0 + 216 >> 2] | 0; //@line 20935
 $112 = HEAP32[$0 + 220 >> 2] | 0; //@line 20937
 $114 = HEAP32[$0 + 224 >> 2] | 0; //@line 20939
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 20941
 $118 = HEAP32[$0 + 232 >> 2] | 0; //@line 20943
 $120 = HEAP32[$0 + 236 >> 2] | 0; //@line 20945
 $122 = HEAP32[$0 + 240 >> 2] | 0; //@line 20947
 $124 = HEAP32[$0 + 244 >> 2] | 0; //@line 20949
 if (HEAP8[___async_retval >> 0] & 1) {
  $583 = HEAP32[$0 + 24 >> 2] & 15; //@line 20954
  HEAP8[$76 >> 0] = HEAP8[$0 + 156 >> 0] | 0; //@line 20955
  HEAP8[$94 >> 0] = $36; //@line 20956
  HEAPF32[$98 >> 2] = +(HEAPU8[13555 + $583 >> 0] | 0); //@line 20960
  $590 = HEAP8[$112 >> 0] | 0; //@line 20964
  $591 = $590 & 255; //@line 20965
  if ((128 - (HEAPU8[$124 >> 0] | 0) | 0) > ($591 | 0)) {
   HEAP8[$112 >> 0] = $590 + 1 << 24 >> 24; //@line 20970
   HEAP8[$42 + 4 + $591 >> 0] = 9; //@line 20971
   HEAP8[$108 >> 0] = 1; //@line 20972
   $$0$be = $58; //@line 20973
   $$0107$be = 0; //@line 20973
  } else {
   $$0$be = $58; //@line 20975
   $$0107$be = -1010; //@line 20975
  }
 } else {
  $$0$be = $58; //@line 20978
  $$0107$be = $120; //@line 20978
 }
 L5 : while (1) {
  if (($$0$be & 255) >= ($46 & 255)) {
   label = 33; //@line 20983
   break;
  }
  $127 = $$0$be + 1 << 24 >> 24; //@line 20987
  switch (HEAP8[$40 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 20992
    break L5;
    break;
   }
  case 5:
   {
    label = 9; //@line 20997
    break L5;
    break;
   }
  case 7:
   {
    label = 18; //@line 21002
    break L5;
    break;
   }
  case 9:
   {
    label = 24; //@line 21007
    break L5;
    break;
   }
  case 10:
   {
    label = 30; //@line 21012
    break L5;
    break;
   }
  case 2:
   {
    HEAP32[$50 >> 2] = 0; //@line 21017
    HEAP8[$24 >> 0] = HEAP8[$40 + ($127 & 255) >> 0] | 0; //@line 21022
    HEAP8[$30 >> 0] = HEAP8[$40 + ($$0$be + 2 & 255) >> 0] | 0; //@line 21027
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 21028
    continue L5;
    break;
   }
  case 4:
   {
    $212 = $$0$be + 2 << 24 >> 24; //@line 21033
    $215 = HEAP8[$40 + ($127 & 255) >> 0] | 0; //@line 21036
    HEAP8[$104 >> 0] = $215; //@line 21037
    HEAP16[$96 >> 1] = 1 << ($215 & 255); //@line 21041
    $222 = HEAP8[$112 >> 0] | 0; //@line 21045
    $223 = $222 & 255; //@line 21046
    if ((128 - (HEAPU8[$124 >> 0] | 0) | 0) <= ($223 | 0)) {
     $$0$be = $212; //@line 21049
     $$0107$be = -1010; //@line 21049
     continue L5;
    }
    HEAP8[$112 >> 0] = $222 + 1 << 24 >> 24; //@line 21054
    HEAP8[$42 + 4 + $223 >> 0] = 4; //@line 21055
    HEAP8[$108 >> 0] = 1; //@line 21056
    $$0$be = $212; //@line 21057
    $$0107$be = 0; //@line 21057
    continue L5;
    break;
   }
  case 6:
   {
    $319 = HEAP32[$6 >> 2] | 0; //@line 21062
    if ($319 | 0) {
     label = 13; //@line 21065
     break L5;
    }
    $385 = HEAP8[$112 >> 0] | 0; //@line 21071
    $386 = $385 & 255; //@line 21072
    if ((128 - (HEAPU8[$124 >> 0] | 0) - $386 | 0) <= 2) {
     $$0$be = $127; //@line 21076
     $$0107$be = -1010; //@line 21076
     continue L5;
    }
    HEAP8[$42 + 4 + $386 >> 0] = 6; //@line 21081
    HEAP8[($385 + 1 & 255) + ($42 + 4) >> 0] = -1; //@line 21085
    HEAP8[$112 >> 0] = $385 + 3 << 24 >> 24; //@line 21087
    HEAP8[($385 + 2 & 255) + ($42 + 4) >> 0] = $4; //@line 21090
    HEAP8[$108 >> 0] = 1; //@line 21091
    $$0$be = $127; //@line 21092
    $$0107$be = 0; //@line 21092
    continue L5;
    break;
   }
  case 8:
   {
    $489 = $$0$be + 2 << 24 >> 24; //@line 21097
    $493 = HEAP8[$40 + ($127 & 255) >> 0] & 15; //@line 21101
    $497 = ($493 + ($493 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 21106
    HEAP32[$70 >> 2] = $497; //@line 21107
    HEAP32[$82 >> 2] = $497 + 1e3; //@line 21109
    $502 = HEAP8[$112 >> 0] | 0; //@line 21113
    $503 = $502 & 255; //@line 21114
    if ((128 - (HEAPU8[$124 >> 0] | 0) | 0) <= ($503 | 0)) {
     $$0$be = $489; //@line 21117
     $$0107$be = -1010; //@line 21117
     continue L5;
    }
    HEAP8[$112 >> 0] = $502 + 1 << 24 >> 24; //@line 21122
    HEAP8[$42 + 4 + $503 >> 0] = 8; //@line 21123
    HEAP8[$16 >> 0] = 1; //@line 21124
    HEAP8[$108 >> 0] = 1; //@line 21125
    $$0$be = $489; //@line 21126
    $$0107$be = 0; //@line 21126
    continue L5;
    break;
   }
  default:
   {
    $$0$be = $127; //@line 21131
    $$0107$be = -1013; //@line 21131
    continue L5;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$102 >> 0] = 0; //@line 21137
  HEAP8[$118 >> 0] = 0; //@line 21138
  HEAP8[$122 >> 0] = 0; //@line 21139
  HEAP8[$116 >> 0] = 0; //@line 21140
  $138 = $127 & 255; //@line 21141
  $139 = $138 + -1 | 0; //@line 21142
  HEAP32[$14 >> 2] = $40 + $139; //@line 21144
  HEAP8[$114 >> 0] = $56 - $139; //@line 21147
  HEAP8[$84 >> 0] = HEAP8[$90 >> 0] | 0; //@line 21149
  HEAP8[$72 >> 0] = HEAP8[$76 >> 0] | 0; //@line 21151
  HEAP8[$54 >> 0] = HEAP8[$64 >> 0] | 0; //@line 21153
  HEAP8[$20 >> 0] = HEAP8[$34 >> 0] | 0; //@line 21155
  HEAP8[$2 >> 0] = HEAP8[$10 >> 0] | 0; //@line 21157
  $150 = HEAP32[(HEAP32[$92 >> 2] | 0) + 36 >> 2] | 0; //@line 21160
  $ReallocAsyncCtx = _emscripten_realloc_async_context(236) | 0; //@line 21161
  $151 = FUNCTION_TABLE_iiiiiii[$150 & 3]($66, $110, $102, $118, $122, $116) | 0; //@line 21162
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 475; //@line 21165
   $152 = $ReallocAsyncCtx + 4 | 0; //@line 21166
   HEAP32[$152 >> 2] = $2; //@line 21167
   $153 = $ReallocAsyncCtx + 8 | 0; //@line 21168
   HEAP8[$153 >> 0] = $4; //@line 21169
   $154 = $ReallocAsyncCtx + 12 | 0; //@line 21170
   HEAP32[$154 >> 2] = $6; //@line 21171
   $155 = $ReallocAsyncCtx + 16 | 0; //@line 21172
   HEAP32[$155 >> 2] = $8; //@line 21173
   $156 = $ReallocAsyncCtx + 20 | 0; //@line 21174
   HEAP32[$156 >> 2] = $10; //@line 21175
   $157 = $ReallocAsyncCtx + 24 | 0; //@line 21176
   HEAP32[$157 >> 2] = $14; //@line 21177
   $158 = $ReallocAsyncCtx + 28 | 0; //@line 21178
   HEAP32[$158 >> 2] = $16; //@line 21179
   $159 = $ReallocAsyncCtx + 32 | 0; //@line 21180
   HEAP32[$159 >> 2] = $18; //@line 21181
   $160 = $ReallocAsyncCtx + 36 | 0; //@line 21182
   HEAP32[$160 >> 2] = $20; //@line 21183
   $161 = $ReallocAsyncCtx + 40 | 0; //@line 21184
   HEAP32[$161 >> 2] = $22; //@line 21185
   $162 = $ReallocAsyncCtx + 44 | 0; //@line 21186
   HEAP32[$162 >> 2] = $24; //@line 21187
   $163 = $ReallocAsyncCtx + 48 | 0; //@line 21188
   HEAP32[$163 >> 2] = $26; //@line 21189
   $164 = $ReallocAsyncCtx + 52 | 0; //@line 21190
   HEAP32[$164 >> 2] = $28; //@line 21191
   $165 = $ReallocAsyncCtx + 56 | 0; //@line 21192
   HEAP32[$165 >> 2] = $30; //@line 21193
   $166 = $ReallocAsyncCtx + 60 | 0; //@line 21194
   HEAP32[$166 >> 2] = $32; //@line 21195
   $167 = $ReallocAsyncCtx + 64 | 0; //@line 21196
   HEAP32[$167 >> 2] = $34; //@line 21197
   $168 = $ReallocAsyncCtx + 68 | 0; //@line 21198
   HEAP32[$168 >> 2] = $38; //@line 21199
   $169 = $ReallocAsyncCtx + 72 | 0; //@line 21200
   HEAP32[$169 >> 2] = $40; //@line 21201
   $170 = $ReallocAsyncCtx + 76 | 0; //@line 21202
   HEAP32[$170 >> 2] = $42; //@line 21203
   $171 = $ReallocAsyncCtx + 80 | 0; //@line 21204
   HEAP32[$171 >> 2] = $44; //@line 21205
   $172 = $ReallocAsyncCtx + 84 | 0; //@line 21206
   HEAP8[$172 >> 0] = $46; //@line 21207
   $173 = $ReallocAsyncCtx + 85 | 0; //@line 21208
   HEAP8[$173 >> 0] = $48; //@line 21209
   $174 = $ReallocAsyncCtx + 88 | 0; //@line 21210
   HEAP32[$174 >> 2] = $54; //@line 21211
   $175 = $ReallocAsyncCtx + 92 | 0; //@line 21212
   HEAP32[$175 >> 2] = $52; //@line 21213
   $176 = $ReallocAsyncCtx + 96 | 0; //@line 21214
   HEAP32[$176 >> 2] = $50; //@line 21215
   $177 = $ReallocAsyncCtx + 100 | 0; //@line 21216
   HEAP32[$177 >> 2] = $56; //@line 21217
   $178 = $ReallocAsyncCtx + 104 | 0; //@line 21218
   HEAP32[$178 >> 2] = $60; //@line 21219
   $179 = $ReallocAsyncCtx + 108 | 0; //@line 21220
   HEAP32[$179 >> 2] = $62; //@line 21221
   $180 = $ReallocAsyncCtx + 112 | 0; //@line 21222
   HEAP32[$180 >> 2] = $64; //@line 21223
   $181 = $ReallocAsyncCtx + 116 | 0; //@line 21224
   HEAP32[$181 >> 2] = $66; //@line 21225
   $182 = $ReallocAsyncCtx + 120 | 0; //@line 21226
   HEAP32[$182 >> 2] = $68; //@line 21227
   $183 = $ReallocAsyncCtx + 124 | 0; //@line 21228
   HEAP32[$183 >> 2] = $70; //@line 21229
   $184 = $ReallocAsyncCtx + 128 | 0; //@line 21230
   HEAP32[$184 >> 2] = $72; //@line 21231
   $185 = $ReallocAsyncCtx + 132 | 0; //@line 21232
   HEAP32[$185 >> 2] = $74; //@line 21233
   $186 = $ReallocAsyncCtx + 136 | 0; //@line 21234
   HEAP32[$186 >> 2] = $76; //@line 21235
   $187 = $ReallocAsyncCtx + 140 | 0; //@line 21236
   HEAP32[$187 >> 2] = $78; //@line 21237
   $188 = $ReallocAsyncCtx + 144 | 0; //@line 21238
   HEAP32[$188 >> 2] = $82; //@line 21239
   $189 = $ReallocAsyncCtx + 148 | 0; //@line 21240
   HEAP32[$189 >> 2] = $84; //@line 21241
   $190 = $ReallocAsyncCtx + 152 | 0; //@line 21242
   HEAP32[$190 >> 2] = $86; //@line 21243
   $191 = $ReallocAsyncCtx + 156 | 0; //@line 21244
   HEAP32[$191 >> 2] = $88; //@line 21245
   $192 = $ReallocAsyncCtx + 160 | 0; //@line 21246
   HEAP32[$192 >> 2] = $90; //@line 21247
   $193 = $ReallocAsyncCtx + 164 | 0; //@line 21248
   HEAP32[$193 >> 2] = $92; //@line 21249
   $194 = $ReallocAsyncCtx + 168 | 0; //@line 21250
   HEAP32[$194 >> 2] = $94; //@line 21251
   $195 = $ReallocAsyncCtx + 172 | 0; //@line 21252
   HEAP32[$195 >> 2] = $96; //@line 21253
   $196 = $ReallocAsyncCtx + 176 | 0; //@line 21254
   HEAP32[$196 >> 2] = $98; //@line 21255
   $197 = $ReallocAsyncCtx + 180 | 0; //@line 21256
   HEAP32[$197 >> 2] = $100; //@line 21257
   $198 = $ReallocAsyncCtx + 184 | 0; //@line 21258
   HEAP32[$198 >> 2] = $102; //@line 21259
   $199 = $ReallocAsyncCtx + 188 | 0; //@line 21260
   HEAP32[$199 >> 2] = $104; //@line 21261
   $200 = $ReallocAsyncCtx + 192 | 0; //@line 21262
   HEAP32[$200 >> 2] = $106; //@line 21263
   $201 = $ReallocAsyncCtx + 196 | 0; //@line 21264
   HEAP32[$201 >> 2] = $108; //@line 21265
   $202 = $ReallocAsyncCtx + 200 | 0; //@line 21266
   HEAP32[$202 >> 2] = $110; //@line 21267
   $203 = $ReallocAsyncCtx + 204 | 0; //@line 21268
   HEAP32[$203 >> 2] = $112; //@line 21269
   $204 = $ReallocAsyncCtx + 208 | 0; //@line 21270
   HEAP32[$204 >> 2] = $114; //@line 21271
   $205 = $ReallocAsyncCtx + 212 | 0; //@line 21272
   HEAP32[$205 >> 2] = $116; //@line 21273
   $206 = $ReallocAsyncCtx + 216 | 0; //@line 21274
   HEAP32[$206 >> 2] = $118; //@line 21275
   $207 = $ReallocAsyncCtx + 220 | 0; //@line 21276
   HEAP32[$207 >> 2] = $138; //@line 21277
   $208 = $ReallocAsyncCtx + 224 | 0; //@line 21278
   HEAP32[$208 >> 2] = $$0107$be; //@line 21279
   $209 = $ReallocAsyncCtx + 228 | 0; //@line 21280
   HEAP32[$209 >> 2] = $122; //@line 21281
   $210 = $ReallocAsyncCtx + 232 | 0; //@line 21282
   HEAP32[$210 >> 2] = $124; //@line 21283
   sp = STACKTOP; //@line 21284
   return;
  }
  HEAP8[___async_retval >> 0] = $151; //@line 21288
  ___async_unwind = 0; //@line 21289
  HEAP32[$ReallocAsyncCtx >> 2] = 475; //@line 21290
  $152 = $ReallocAsyncCtx + 4 | 0; //@line 21291
  HEAP32[$152 >> 2] = $2; //@line 21292
  $153 = $ReallocAsyncCtx + 8 | 0; //@line 21293
  HEAP8[$153 >> 0] = $4; //@line 21294
  $154 = $ReallocAsyncCtx + 12 | 0; //@line 21295
  HEAP32[$154 >> 2] = $6; //@line 21296
  $155 = $ReallocAsyncCtx + 16 | 0; //@line 21297
  HEAP32[$155 >> 2] = $8; //@line 21298
  $156 = $ReallocAsyncCtx + 20 | 0; //@line 21299
  HEAP32[$156 >> 2] = $10; //@line 21300
  $157 = $ReallocAsyncCtx + 24 | 0; //@line 21301
  HEAP32[$157 >> 2] = $14; //@line 21302
  $158 = $ReallocAsyncCtx + 28 | 0; //@line 21303
  HEAP32[$158 >> 2] = $16; //@line 21304
  $159 = $ReallocAsyncCtx + 32 | 0; //@line 21305
  HEAP32[$159 >> 2] = $18; //@line 21306
  $160 = $ReallocAsyncCtx + 36 | 0; //@line 21307
  HEAP32[$160 >> 2] = $20; //@line 21308
  $161 = $ReallocAsyncCtx + 40 | 0; //@line 21309
  HEAP32[$161 >> 2] = $22; //@line 21310
  $162 = $ReallocAsyncCtx + 44 | 0; //@line 21311
  HEAP32[$162 >> 2] = $24; //@line 21312
  $163 = $ReallocAsyncCtx + 48 | 0; //@line 21313
  HEAP32[$163 >> 2] = $26; //@line 21314
  $164 = $ReallocAsyncCtx + 52 | 0; //@line 21315
  HEAP32[$164 >> 2] = $28; //@line 21316
  $165 = $ReallocAsyncCtx + 56 | 0; //@line 21317
  HEAP32[$165 >> 2] = $30; //@line 21318
  $166 = $ReallocAsyncCtx + 60 | 0; //@line 21319
  HEAP32[$166 >> 2] = $32; //@line 21320
  $167 = $ReallocAsyncCtx + 64 | 0; //@line 21321
  HEAP32[$167 >> 2] = $34; //@line 21322
  $168 = $ReallocAsyncCtx + 68 | 0; //@line 21323
  HEAP32[$168 >> 2] = $38; //@line 21324
  $169 = $ReallocAsyncCtx + 72 | 0; //@line 21325
  HEAP32[$169 >> 2] = $40; //@line 21326
  $170 = $ReallocAsyncCtx + 76 | 0; //@line 21327
  HEAP32[$170 >> 2] = $42; //@line 21328
  $171 = $ReallocAsyncCtx + 80 | 0; //@line 21329
  HEAP32[$171 >> 2] = $44; //@line 21330
  $172 = $ReallocAsyncCtx + 84 | 0; //@line 21331
  HEAP8[$172 >> 0] = $46; //@line 21332
  $173 = $ReallocAsyncCtx + 85 | 0; //@line 21333
  HEAP8[$173 >> 0] = $48; //@line 21334
  $174 = $ReallocAsyncCtx + 88 | 0; //@line 21335
  HEAP32[$174 >> 2] = $54; //@line 21336
  $175 = $ReallocAsyncCtx + 92 | 0; //@line 21337
  HEAP32[$175 >> 2] = $52; //@line 21338
  $176 = $ReallocAsyncCtx + 96 | 0; //@line 21339
  HEAP32[$176 >> 2] = $50; //@line 21340
  $177 = $ReallocAsyncCtx + 100 | 0; //@line 21341
  HEAP32[$177 >> 2] = $56; //@line 21342
  $178 = $ReallocAsyncCtx + 104 | 0; //@line 21343
  HEAP32[$178 >> 2] = $60; //@line 21344
  $179 = $ReallocAsyncCtx + 108 | 0; //@line 21345
  HEAP32[$179 >> 2] = $62; //@line 21346
  $180 = $ReallocAsyncCtx + 112 | 0; //@line 21347
  HEAP32[$180 >> 2] = $64; //@line 21348
  $181 = $ReallocAsyncCtx + 116 | 0; //@line 21349
  HEAP32[$181 >> 2] = $66; //@line 21350
  $182 = $ReallocAsyncCtx + 120 | 0; //@line 21351
  HEAP32[$182 >> 2] = $68; //@line 21352
  $183 = $ReallocAsyncCtx + 124 | 0; //@line 21353
  HEAP32[$183 >> 2] = $70; //@line 21354
  $184 = $ReallocAsyncCtx + 128 | 0; //@line 21355
  HEAP32[$184 >> 2] = $72; //@line 21356
  $185 = $ReallocAsyncCtx + 132 | 0; //@line 21357
  HEAP32[$185 >> 2] = $74; //@line 21358
  $186 = $ReallocAsyncCtx + 136 | 0; //@line 21359
  HEAP32[$186 >> 2] = $76; //@line 21360
  $187 = $ReallocAsyncCtx + 140 | 0; //@line 21361
  HEAP32[$187 >> 2] = $78; //@line 21362
  $188 = $ReallocAsyncCtx + 144 | 0; //@line 21363
  HEAP32[$188 >> 2] = $82; //@line 21364
  $189 = $ReallocAsyncCtx + 148 | 0; //@line 21365
  HEAP32[$189 >> 2] = $84; //@line 21366
  $190 = $ReallocAsyncCtx + 152 | 0; //@line 21367
  HEAP32[$190 >> 2] = $86; //@line 21368
  $191 = $ReallocAsyncCtx + 156 | 0; //@line 21369
  HEAP32[$191 >> 2] = $88; //@line 21370
  $192 = $ReallocAsyncCtx + 160 | 0; //@line 21371
  HEAP32[$192 >> 2] = $90; //@line 21372
  $193 = $ReallocAsyncCtx + 164 | 0; //@line 21373
  HEAP32[$193 >> 2] = $92; //@line 21374
  $194 = $ReallocAsyncCtx + 168 | 0; //@line 21375
  HEAP32[$194 >> 2] = $94; //@line 21376
  $195 = $ReallocAsyncCtx + 172 | 0; //@line 21377
  HEAP32[$195 >> 2] = $96; //@line 21378
  $196 = $ReallocAsyncCtx + 176 | 0; //@line 21379
  HEAP32[$196 >> 2] = $98; //@line 21380
  $197 = $ReallocAsyncCtx + 180 | 0; //@line 21381
  HEAP32[$197 >> 2] = $100; //@line 21382
  $198 = $ReallocAsyncCtx + 184 | 0; //@line 21383
  HEAP32[$198 >> 2] = $102; //@line 21384
  $199 = $ReallocAsyncCtx + 188 | 0; //@line 21385
  HEAP32[$199 >> 2] = $104; //@line 21386
  $200 = $ReallocAsyncCtx + 192 | 0; //@line 21387
  HEAP32[$200 >> 2] = $106; //@line 21388
  $201 = $ReallocAsyncCtx + 196 | 0; //@line 21389
  HEAP32[$201 >> 2] = $108; //@line 21390
  $202 = $ReallocAsyncCtx + 200 | 0; //@line 21391
  HEAP32[$202 >> 2] = $110; //@line 21392
  $203 = $ReallocAsyncCtx + 204 | 0; //@line 21393
  HEAP32[$203 >> 2] = $112; //@line 21394
  $204 = $ReallocAsyncCtx + 208 | 0; //@line 21395
  HEAP32[$204 >> 2] = $114; //@line 21396
  $205 = $ReallocAsyncCtx + 212 | 0; //@line 21397
  HEAP32[$205 >> 2] = $116; //@line 21398
  $206 = $ReallocAsyncCtx + 216 | 0; //@line 21399
  HEAP32[$206 >> 2] = $118; //@line 21400
  $207 = $ReallocAsyncCtx + 220 | 0; //@line 21401
  HEAP32[$207 >> 2] = $138; //@line 21402
  $208 = $ReallocAsyncCtx + 224 | 0; //@line 21403
  HEAP32[$208 >> 2] = $$0107$be; //@line 21404
  $209 = $ReallocAsyncCtx + 228 | 0; //@line 21405
  HEAP32[$209 >> 2] = $122; //@line 21406
  $210 = $ReallocAsyncCtx + 232 | 0; //@line 21407
  HEAP32[$210 >> 2] = $124; //@line 21408
  sp = STACKTOP; //@line 21409
  return;
 } else if ((label | 0) == 9) {
  $229 = HEAP8[$40 + ($127 & 255) >> 0] | 0; //@line 21415
  HEAP8[$78 >> 0] = ($229 & 255) >>> 4 & 7; //@line 21420
  HEAP8[$88 >> 0] = $229 & 15; //@line 21422
  $248 = $$0$be + 5 << 24 >> 24; //@line 21436
  HEAP32[$68 >> 2] = (HEAPU8[$40 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$40 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$40 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 21444
  $258 = HEAP32[(HEAP32[$60 >> 2] | 0) + 40 >> 2] | 0; //@line 21447
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(232) | 0; //@line 21448
  $259 = FUNCTION_TABLE_iii[$258 & 15]($66, $74) | 0; //@line 21449
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 476; //@line 21452
   $260 = $ReallocAsyncCtx2 + 4 | 0; //@line 21453
   HEAP32[$260 >> 2] = $2; //@line 21454
   $261 = $ReallocAsyncCtx2 + 8 | 0; //@line 21455
   HEAP8[$261 >> 0] = $4; //@line 21456
   $262 = $ReallocAsyncCtx2 + 12 | 0; //@line 21457
   HEAP32[$262 >> 2] = $6; //@line 21458
   $263 = $ReallocAsyncCtx2 + 16 | 0; //@line 21459
   HEAP32[$263 >> 2] = $8; //@line 21460
   $264 = $ReallocAsyncCtx2 + 20 | 0; //@line 21461
   HEAP32[$264 >> 2] = $10; //@line 21462
   $265 = $ReallocAsyncCtx2 + 24 | 0; //@line 21463
   HEAP32[$265 >> 2] = $14; //@line 21464
   $266 = $ReallocAsyncCtx2 + 28 | 0; //@line 21465
   HEAP32[$266 >> 2] = $16; //@line 21466
   $267 = $ReallocAsyncCtx2 + 32 | 0; //@line 21467
   HEAP32[$267 >> 2] = $18; //@line 21468
   $268 = $ReallocAsyncCtx2 + 36 | 0; //@line 21469
   HEAP32[$268 >> 2] = $20; //@line 21470
   $269 = $ReallocAsyncCtx2 + 40 | 0; //@line 21471
   HEAP32[$269 >> 2] = $22; //@line 21472
   $270 = $ReallocAsyncCtx2 + 44 | 0; //@line 21473
   HEAP32[$270 >> 2] = $24; //@line 21474
   $271 = $ReallocAsyncCtx2 + 48 | 0; //@line 21475
   HEAP32[$271 >> 2] = $26; //@line 21476
   $272 = $ReallocAsyncCtx2 + 52 | 0; //@line 21477
   HEAP32[$272 >> 2] = $28; //@line 21478
   $273 = $ReallocAsyncCtx2 + 56 | 0; //@line 21479
   HEAP32[$273 >> 2] = $30; //@line 21480
   $274 = $ReallocAsyncCtx2 + 60 | 0; //@line 21481
   HEAP32[$274 >> 2] = $32; //@line 21482
   $275 = $ReallocAsyncCtx2 + 64 | 0; //@line 21483
   HEAP32[$275 >> 2] = $34; //@line 21484
   $276 = $ReallocAsyncCtx2 + 68 | 0; //@line 21485
   HEAP32[$276 >> 2] = $38; //@line 21486
   $277 = $ReallocAsyncCtx2 + 72 | 0; //@line 21487
   HEAP32[$277 >> 2] = $40; //@line 21488
   $278 = $ReallocAsyncCtx2 + 76 | 0; //@line 21489
   HEAP32[$278 >> 2] = $42; //@line 21490
   $279 = $ReallocAsyncCtx2 + 80 | 0; //@line 21491
   HEAP32[$279 >> 2] = $44; //@line 21492
   $280 = $ReallocAsyncCtx2 + 84 | 0; //@line 21493
   HEAP8[$280 >> 0] = $46; //@line 21494
   $281 = $ReallocAsyncCtx2 + 85 | 0; //@line 21495
   HEAP8[$281 >> 0] = $48; //@line 21496
   $282 = $ReallocAsyncCtx2 + 88 | 0; //@line 21497
   HEAP32[$282 >> 2] = $54; //@line 21498
   $283 = $ReallocAsyncCtx2 + 92 | 0; //@line 21499
   HEAP32[$283 >> 2] = $52; //@line 21500
   $284 = $ReallocAsyncCtx2 + 96 | 0; //@line 21501
   HEAP32[$284 >> 2] = $50; //@line 21502
   $285 = $ReallocAsyncCtx2 + 100 | 0; //@line 21503
   HEAP32[$285 >> 2] = $56; //@line 21504
   $286 = $ReallocAsyncCtx2 + 104 | 0; //@line 21505
   HEAP32[$286 >> 2] = $60; //@line 21506
   $287 = $ReallocAsyncCtx2 + 108 | 0; //@line 21507
   HEAP32[$287 >> 2] = $62; //@line 21508
   $288 = $ReallocAsyncCtx2 + 112 | 0; //@line 21509
   HEAP32[$288 >> 2] = $64; //@line 21510
   $289 = $ReallocAsyncCtx2 + 116 | 0; //@line 21511
   HEAP32[$289 >> 2] = $66; //@line 21512
   $290 = $ReallocAsyncCtx2 + 120 | 0; //@line 21513
   HEAP32[$290 >> 2] = $68; //@line 21514
   $291 = $ReallocAsyncCtx2 + 124 | 0; //@line 21515
   HEAP32[$291 >> 2] = $70; //@line 21516
   $292 = $ReallocAsyncCtx2 + 128 | 0; //@line 21517
   HEAP32[$292 >> 2] = $72; //@line 21518
   $293 = $ReallocAsyncCtx2 + 132 | 0; //@line 21519
   HEAP32[$293 >> 2] = $74; //@line 21520
   $294 = $ReallocAsyncCtx2 + 136 | 0; //@line 21521
   HEAP32[$294 >> 2] = $76; //@line 21522
   $295 = $ReallocAsyncCtx2 + 140 | 0; //@line 21523
   HEAP32[$295 >> 2] = $78; //@line 21524
   $296 = $ReallocAsyncCtx2 + 144 | 0; //@line 21525
   HEAP32[$296 >> 2] = $82; //@line 21526
   $297 = $ReallocAsyncCtx2 + 148 | 0; //@line 21527
   HEAP32[$297 >> 2] = $84; //@line 21528
   $298 = $ReallocAsyncCtx2 + 152 | 0; //@line 21529
   HEAP32[$298 >> 2] = $86; //@line 21530
   $299 = $ReallocAsyncCtx2 + 156 | 0; //@line 21531
   HEAP32[$299 >> 2] = $88; //@line 21532
   $300 = $ReallocAsyncCtx2 + 160 | 0; //@line 21533
   HEAP32[$300 >> 2] = $90; //@line 21534
   $301 = $ReallocAsyncCtx2 + 164 | 0; //@line 21535
   HEAP32[$301 >> 2] = $92; //@line 21536
   $302 = $ReallocAsyncCtx2 + 168 | 0; //@line 21537
   HEAP32[$302 >> 2] = $94; //@line 21538
   $303 = $ReallocAsyncCtx2 + 172 | 0; //@line 21539
   HEAP32[$303 >> 2] = $96; //@line 21540
   $304 = $ReallocAsyncCtx2 + 176 | 0; //@line 21541
   HEAP32[$304 >> 2] = $98; //@line 21542
   $305 = $ReallocAsyncCtx2 + 180 | 0; //@line 21543
   HEAP32[$305 >> 2] = $100; //@line 21544
   $306 = $ReallocAsyncCtx2 + 184 | 0; //@line 21545
   HEAP32[$306 >> 2] = $102; //@line 21546
   $307 = $ReallocAsyncCtx2 + 188 | 0; //@line 21547
   HEAP32[$307 >> 2] = $104; //@line 21548
   $308 = $ReallocAsyncCtx2 + 192 | 0; //@line 21549
   HEAP32[$308 >> 2] = $106; //@line 21550
   $309 = $ReallocAsyncCtx2 + 196 | 0; //@line 21551
   HEAP32[$309 >> 2] = $108; //@line 21552
   $310 = $ReallocAsyncCtx2 + 200 | 0; //@line 21553
   HEAP32[$310 >> 2] = $110; //@line 21554
   $311 = $ReallocAsyncCtx2 + 204 | 0; //@line 21555
   HEAP32[$311 >> 2] = $112; //@line 21556
   $312 = $ReallocAsyncCtx2 + 208 | 0; //@line 21557
   HEAP32[$312 >> 2] = $114; //@line 21558
   $313 = $ReallocAsyncCtx2 + 212 | 0; //@line 21559
   HEAP8[$313 >> 0] = $248; //@line 21560
   $314 = $ReallocAsyncCtx2 + 216 | 0; //@line 21561
   HEAP32[$314 >> 2] = $116; //@line 21562
   $315 = $ReallocAsyncCtx2 + 220 | 0; //@line 21563
   HEAP32[$315 >> 2] = $118; //@line 21564
   $316 = $ReallocAsyncCtx2 + 224 | 0; //@line 21565
   HEAP32[$316 >> 2] = $122; //@line 21566
   $317 = $ReallocAsyncCtx2 + 228 | 0; //@line 21567
   HEAP32[$317 >> 2] = $124; //@line 21568
   sp = STACKTOP; //@line 21569
   return;
  }
  HEAP8[___async_retval >> 0] = $259; //@line 21573
  ___async_unwind = 0; //@line 21574
  HEAP32[$ReallocAsyncCtx2 >> 2] = 476; //@line 21575
  $260 = $ReallocAsyncCtx2 + 4 | 0; //@line 21576
  HEAP32[$260 >> 2] = $2; //@line 21577
  $261 = $ReallocAsyncCtx2 + 8 | 0; //@line 21578
  HEAP8[$261 >> 0] = $4; //@line 21579
  $262 = $ReallocAsyncCtx2 + 12 | 0; //@line 21580
  HEAP32[$262 >> 2] = $6; //@line 21581
  $263 = $ReallocAsyncCtx2 + 16 | 0; //@line 21582
  HEAP32[$263 >> 2] = $8; //@line 21583
  $264 = $ReallocAsyncCtx2 + 20 | 0; //@line 21584
  HEAP32[$264 >> 2] = $10; //@line 21585
  $265 = $ReallocAsyncCtx2 + 24 | 0; //@line 21586
  HEAP32[$265 >> 2] = $14; //@line 21587
  $266 = $ReallocAsyncCtx2 + 28 | 0; //@line 21588
  HEAP32[$266 >> 2] = $16; //@line 21589
  $267 = $ReallocAsyncCtx2 + 32 | 0; //@line 21590
  HEAP32[$267 >> 2] = $18; //@line 21591
  $268 = $ReallocAsyncCtx2 + 36 | 0; //@line 21592
  HEAP32[$268 >> 2] = $20; //@line 21593
  $269 = $ReallocAsyncCtx2 + 40 | 0; //@line 21594
  HEAP32[$269 >> 2] = $22; //@line 21595
  $270 = $ReallocAsyncCtx2 + 44 | 0; //@line 21596
  HEAP32[$270 >> 2] = $24; //@line 21597
  $271 = $ReallocAsyncCtx2 + 48 | 0; //@line 21598
  HEAP32[$271 >> 2] = $26; //@line 21599
  $272 = $ReallocAsyncCtx2 + 52 | 0; //@line 21600
  HEAP32[$272 >> 2] = $28; //@line 21601
  $273 = $ReallocAsyncCtx2 + 56 | 0; //@line 21602
  HEAP32[$273 >> 2] = $30; //@line 21603
  $274 = $ReallocAsyncCtx2 + 60 | 0; //@line 21604
  HEAP32[$274 >> 2] = $32; //@line 21605
  $275 = $ReallocAsyncCtx2 + 64 | 0; //@line 21606
  HEAP32[$275 >> 2] = $34; //@line 21607
  $276 = $ReallocAsyncCtx2 + 68 | 0; //@line 21608
  HEAP32[$276 >> 2] = $38; //@line 21609
  $277 = $ReallocAsyncCtx2 + 72 | 0; //@line 21610
  HEAP32[$277 >> 2] = $40; //@line 21611
  $278 = $ReallocAsyncCtx2 + 76 | 0; //@line 21612
  HEAP32[$278 >> 2] = $42; //@line 21613
  $279 = $ReallocAsyncCtx2 + 80 | 0; //@line 21614
  HEAP32[$279 >> 2] = $44; //@line 21615
  $280 = $ReallocAsyncCtx2 + 84 | 0; //@line 21616
  HEAP8[$280 >> 0] = $46; //@line 21617
  $281 = $ReallocAsyncCtx2 + 85 | 0; //@line 21618
  HEAP8[$281 >> 0] = $48; //@line 21619
  $282 = $ReallocAsyncCtx2 + 88 | 0; //@line 21620
  HEAP32[$282 >> 2] = $54; //@line 21621
  $283 = $ReallocAsyncCtx2 + 92 | 0; //@line 21622
  HEAP32[$283 >> 2] = $52; //@line 21623
  $284 = $ReallocAsyncCtx2 + 96 | 0; //@line 21624
  HEAP32[$284 >> 2] = $50; //@line 21625
  $285 = $ReallocAsyncCtx2 + 100 | 0; //@line 21626
  HEAP32[$285 >> 2] = $56; //@line 21627
  $286 = $ReallocAsyncCtx2 + 104 | 0; //@line 21628
  HEAP32[$286 >> 2] = $60; //@line 21629
  $287 = $ReallocAsyncCtx2 + 108 | 0; //@line 21630
  HEAP32[$287 >> 2] = $62; //@line 21631
  $288 = $ReallocAsyncCtx2 + 112 | 0; //@line 21632
  HEAP32[$288 >> 2] = $64; //@line 21633
  $289 = $ReallocAsyncCtx2 + 116 | 0; //@line 21634
  HEAP32[$289 >> 2] = $66; //@line 21635
  $290 = $ReallocAsyncCtx2 + 120 | 0; //@line 21636
  HEAP32[$290 >> 2] = $68; //@line 21637
  $291 = $ReallocAsyncCtx2 + 124 | 0; //@line 21638
  HEAP32[$291 >> 2] = $70; //@line 21639
  $292 = $ReallocAsyncCtx2 + 128 | 0; //@line 21640
  HEAP32[$292 >> 2] = $72; //@line 21641
  $293 = $ReallocAsyncCtx2 + 132 | 0; //@line 21642
  HEAP32[$293 >> 2] = $74; //@line 21643
  $294 = $ReallocAsyncCtx2 + 136 | 0; //@line 21644
  HEAP32[$294 >> 2] = $76; //@line 21645
  $295 = $ReallocAsyncCtx2 + 140 | 0; //@line 21646
  HEAP32[$295 >> 2] = $78; //@line 21647
  $296 = $ReallocAsyncCtx2 + 144 | 0; //@line 21648
  HEAP32[$296 >> 2] = $82; //@line 21649
  $297 = $ReallocAsyncCtx2 + 148 | 0; //@line 21650
  HEAP32[$297 >> 2] = $84; //@line 21651
  $298 = $ReallocAsyncCtx2 + 152 | 0; //@line 21652
  HEAP32[$298 >> 2] = $86; //@line 21653
  $299 = $ReallocAsyncCtx2 + 156 | 0; //@line 21654
  HEAP32[$299 >> 2] = $88; //@line 21655
  $300 = $ReallocAsyncCtx2 + 160 | 0; //@line 21656
  HEAP32[$300 >> 2] = $90; //@line 21657
  $301 = $ReallocAsyncCtx2 + 164 | 0; //@line 21658
  HEAP32[$301 >> 2] = $92; //@line 21659
  $302 = $ReallocAsyncCtx2 + 168 | 0; //@line 21660
  HEAP32[$302 >> 2] = $94; //@line 21661
  $303 = $ReallocAsyncCtx2 + 172 | 0; //@line 21662
  HEAP32[$303 >> 2] = $96; //@line 21663
  $304 = $ReallocAsyncCtx2 + 176 | 0; //@line 21664
  HEAP32[$304 >> 2] = $98; //@line 21665
  $305 = $ReallocAsyncCtx2 + 180 | 0; //@line 21666
  HEAP32[$305 >> 2] = $100; //@line 21667
  $306 = $ReallocAsyncCtx2 + 184 | 0; //@line 21668
  HEAP32[$306 >> 2] = $102; //@line 21669
  $307 = $ReallocAsyncCtx2 + 188 | 0; //@line 21670
  HEAP32[$307 >> 2] = $104; //@line 21671
  $308 = $ReallocAsyncCtx2 + 192 | 0; //@line 21672
  HEAP32[$308 >> 2] = $106; //@line 21673
  $309 = $ReallocAsyncCtx2 + 196 | 0; //@line 21674
  HEAP32[$309 >> 2] = $108; //@line 21675
  $310 = $ReallocAsyncCtx2 + 200 | 0; //@line 21676
  HEAP32[$310 >> 2] = $110; //@line 21677
  $311 = $ReallocAsyncCtx2 + 204 | 0; //@line 21678
  HEAP32[$311 >> 2] = $112; //@line 21679
  $312 = $ReallocAsyncCtx2 + 208 | 0; //@line 21680
  HEAP32[$312 >> 2] = $114; //@line 21681
  $313 = $ReallocAsyncCtx2 + 212 | 0; //@line 21682
  HEAP8[$313 >> 0] = $248; //@line 21683
  $314 = $ReallocAsyncCtx2 + 216 | 0; //@line 21684
  HEAP32[$314 >> 2] = $116; //@line 21685
  $315 = $ReallocAsyncCtx2 + 220 | 0; //@line 21686
  HEAP32[$315 >> 2] = $118; //@line 21687
  $316 = $ReallocAsyncCtx2 + 224 | 0; //@line 21688
  HEAP32[$316 >> 2] = $122; //@line 21689
  $317 = $ReallocAsyncCtx2 + 228 | 0; //@line 21690
  HEAP32[$317 >> 2] = $124; //@line 21691
  sp = STACKTOP; //@line 21692
  return;
 } else if ((label | 0) == 13) {
  $321 = HEAP32[$319 >> 2] | 0; //@line 21696
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(232) | 0; //@line 21697
  $322 = FUNCTION_TABLE_ii[$321 & 15]($18) | 0; //@line 21698
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 477; //@line 21701
   $323 = $ReallocAsyncCtx3 + 4 | 0; //@line 21702
   HEAP32[$323 >> 2] = $2; //@line 21703
   $324 = $ReallocAsyncCtx3 + 8 | 0; //@line 21704
   HEAP8[$324 >> 0] = $4; //@line 21705
   $325 = $ReallocAsyncCtx3 + 12 | 0; //@line 21706
   HEAP32[$325 >> 2] = $6; //@line 21707
   $326 = $ReallocAsyncCtx3 + 16 | 0; //@line 21708
   HEAP32[$326 >> 2] = $8; //@line 21709
   $327 = $ReallocAsyncCtx3 + 20 | 0; //@line 21710
   HEAP32[$327 >> 2] = $10; //@line 21711
   $328 = $ReallocAsyncCtx3 + 24 | 0; //@line 21712
   HEAP32[$328 >> 2] = $14; //@line 21713
   $329 = $ReallocAsyncCtx3 + 28 | 0; //@line 21714
   HEAP32[$329 >> 2] = $16; //@line 21715
   $330 = $ReallocAsyncCtx3 + 32 | 0; //@line 21716
   HEAP32[$330 >> 2] = $18; //@line 21717
   $331 = $ReallocAsyncCtx3 + 36 | 0; //@line 21718
   HEAP32[$331 >> 2] = $20; //@line 21719
   $332 = $ReallocAsyncCtx3 + 40 | 0; //@line 21720
   HEAP32[$332 >> 2] = $22; //@line 21721
   $333 = $ReallocAsyncCtx3 + 44 | 0; //@line 21722
   HEAP32[$333 >> 2] = $24; //@line 21723
   $334 = $ReallocAsyncCtx3 + 48 | 0; //@line 21724
   HEAP32[$334 >> 2] = $26; //@line 21725
   $335 = $ReallocAsyncCtx3 + 52 | 0; //@line 21726
   HEAP32[$335 >> 2] = $28; //@line 21727
   $336 = $ReallocAsyncCtx3 + 56 | 0; //@line 21728
   HEAP32[$336 >> 2] = $30; //@line 21729
   $337 = $ReallocAsyncCtx3 + 60 | 0; //@line 21730
   HEAP32[$337 >> 2] = $32; //@line 21731
   $338 = $ReallocAsyncCtx3 + 64 | 0; //@line 21732
   HEAP32[$338 >> 2] = $34; //@line 21733
   $339 = $ReallocAsyncCtx3 + 68 | 0; //@line 21734
   HEAP32[$339 >> 2] = $38; //@line 21735
   $340 = $ReallocAsyncCtx3 + 72 | 0; //@line 21736
   HEAP8[$340 >> 0] = $127; //@line 21737
   $341 = $ReallocAsyncCtx3 + 76 | 0; //@line 21738
   HEAP32[$341 >> 2] = $40; //@line 21739
   $342 = $ReallocAsyncCtx3 + 80 | 0; //@line 21740
   HEAP32[$342 >> 2] = $42; //@line 21741
   $343 = $ReallocAsyncCtx3 + 84 | 0; //@line 21742
   HEAP32[$343 >> 2] = $44; //@line 21743
   $344 = $ReallocAsyncCtx3 + 88 | 0; //@line 21744
   HEAP8[$344 >> 0] = $46; //@line 21745
   $345 = $ReallocAsyncCtx3 + 89 | 0; //@line 21746
   HEAP8[$345 >> 0] = $48; //@line 21747
   $346 = $ReallocAsyncCtx3 + 92 | 0; //@line 21748
   HEAP32[$346 >> 2] = $54; //@line 21749
   $347 = $ReallocAsyncCtx3 + 96 | 0; //@line 21750
   HEAP32[$347 >> 2] = $52; //@line 21751
   $348 = $ReallocAsyncCtx3 + 100 | 0; //@line 21752
   HEAP32[$348 >> 2] = $50; //@line 21753
   $349 = $ReallocAsyncCtx3 + 104 | 0; //@line 21754
   HEAP32[$349 >> 2] = $56; //@line 21755
   $350 = $ReallocAsyncCtx3 + 108 | 0; //@line 21756
   HEAP32[$350 >> 2] = $60; //@line 21757
   $351 = $ReallocAsyncCtx3 + 112 | 0; //@line 21758
   HEAP32[$351 >> 2] = $62; //@line 21759
   $352 = $ReallocAsyncCtx3 + 116 | 0; //@line 21760
   HEAP32[$352 >> 2] = $64; //@line 21761
   $353 = $ReallocAsyncCtx3 + 120 | 0; //@line 21762
   HEAP32[$353 >> 2] = $66; //@line 21763
   $354 = $ReallocAsyncCtx3 + 124 | 0; //@line 21764
   HEAP32[$354 >> 2] = $68; //@line 21765
   $355 = $ReallocAsyncCtx3 + 128 | 0; //@line 21766
   HEAP32[$355 >> 2] = $70; //@line 21767
   $356 = $ReallocAsyncCtx3 + 132 | 0; //@line 21768
   HEAP32[$356 >> 2] = $72; //@line 21769
   $357 = $ReallocAsyncCtx3 + 136 | 0; //@line 21770
   HEAP32[$357 >> 2] = $74; //@line 21771
   $358 = $ReallocAsyncCtx3 + 140 | 0; //@line 21772
   HEAP32[$358 >> 2] = $76; //@line 21773
   $359 = $ReallocAsyncCtx3 + 144 | 0; //@line 21774
   HEAP32[$359 >> 2] = $78; //@line 21775
   $360 = $ReallocAsyncCtx3 + 148 | 0; //@line 21776
   HEAP32[$360 >> 2] = $82; //@line 21777
   $361 = $ReallocAsyncCtx3 + 152 | 0; //@line 21778
   HEAP32[$361 >> 2] = $84; //@line 21779
   $362 = $ReallocAsyncCtx3 + 156 | 0; //@line 21780
   HEAP32[$362 >> 2] = $86; //@line 21781
   $363 = $ReallocAsyncCtx3 + 160 | 0; //@line 21782
   HEAP32[$363 >> 2] = $88; //@line 21783
   $364 = $ReallocAsyncCtx3 + 164 | 0; //@line 21784
   HEAP32[$364 >> 2] = $90; //@line 21785
   $365 = $ReallocAsyncCtx3 + 168 | 0; //@line 21786
   HEAP32[$365 >> 2] = $92; //@line 21787
   $366 = $ReallocAsyncCtx3 + 172 | 0; //@line 21788
   HEAP32[$366 >> 2] = $94; //@line 21789
   $367 = $ReallocAsyncCtx3 + 176 | 0; //@line 21790
   HEAP32[$367 >> 2] = $96; //@line 21791
   $368 = $ReallocAsyncCtx3 + 180 | 0; //@line 21792
   HEAP32[$368 >> 2] = $98; //@line 21793
   $369 = $ReallocAsyncCtx3 + 184 | 0; //@line 21794
   HEAP32[$369 >> 2] = $100; //@line 21795
   $370 = $ReallocAsyncCtx3 + 188 | 0; //@line 21796
   HEAP32[$370 >> 2] = $102; //@line 21797
   $371 = $ReallocAsyncCtx3 + 192 | 0; //@line 21798
   HEAP32[$371 >> 2] = $104; //@line 21799
   $372 = $ReallocAsyncCtx3 + 196 | 0; //@line 21800
   HEAP32[$372 >> 2] = $106; //@line 21801
   $373 = $ReallocAsyncCtx3 + 200 | 0; //@line 21802
   HEAP32[$373 >> 2] = $108; //@line 21803
   $374 = $ReallocAsyncCtx3 + 204 | 0; //@line 21804
   HEAP32[$374 >> 2] = $110; //@line 21805
   $375 = $ReallocAsyncCtx3 + 208 | 0; //@line 21806
   HEAP32[$375 >> 2] = $112; //@line 21807
   $376 = $ReallocAsyncCtx3 + 212 | 0; //@line 21808
   HEAP32[$376 >> 2] = $114; //@line 21809
   $377 = $ReallocAsyncCtx3 + 216 | 0; //@line 21810
   HEAP32[$377 >> 2] = $116; //@line 21811
   $378 = $ReallocAsyncCtx3 + 220 | 0; //@line 21812
   HEAP32[$378 >> 2] = $118; //@line 21813
   $379 = $ReallocAsyncCtx3 + 224 | 0; //@line 21814
   HEAP32[$379 >> 2] = $122; //@line 21815
   $380 = $ReallocAsyncCtx3 + 228 | 0; //@line 21816
   HEAP32[$380 >> 2] = $124; //@line 21817
   sp = STACKTOP; //@line 21818
   return;
  }
  HEAP8[___async_retval >> 0] = $322; //@line 21822
  ___async_unwind = 0; //@line 21823
  HEAP32[$ReallocAsyncCtx3 >> 2] = 477; //@line 21824
  $323 = $ReallocAsyncCtx3 + 4 | 0; //@line 21825
  HEAP32[$323 >> 2] = $2; //@line 21826
  $324 = $ReallocAsyncCtx3 + 8 | 0; //@line 21827
  HEAP8[$324 >> 0] = $4; //@line 21828
  $325 = $ReallocAsyncCtx3 + 12 | 0; //@line 21829
  HEAP32[$325 >> 2] = $6; //@line 21830
  $326 = $ReallocAsyncCtx3 + 16 | 0; //@line 21831
  HEAP32[$326 >> 2] = $8; //@line 21832
  $327 = $ReallocAsyncCtx3 + 20 | 0; //@line 21833
  HEAP32[$327 >> 2] = $10; //@line 21834
  $328 = $ReallocAsyncCtx3 + 24 | 0; //@line 21835
  HEAP32[$328 >> 2] = $14; //@line 21836
  $329 = $ReallocAsyncCtx3 + 28 | 0; //@line 21837
  HEAP32[$329 >> 2] = $16; //@line 21838
  $330 = $ReallocAsyncCtx3 + 32 | 0; //@line 21839
  HEAP32[$330 >> 2] = $18; //@line 21840
  $331 = $ReallocAsyncCtx3 + 36 | 0; //@line 21841
  HEAP32[$331 >> 2] = $20; //@line 21842
  $332 = $ReallocAsyncCtx3 + 40 | 0; //@line 21843
  HEAP32[$332 >> 2] = $22; //@line 21844
  $333 = $ReallocAsyncCtx3 + 44 | 0; //@line 21845
  HEAP32[$333 >> 2] = $24; //@line 21846
  $334 = $ReallocAsyncCtx3 + 48 | 0; //@line 21847
  HEAP32[$334 >> 2] = $26; //@line 21848
  $335 = $ReallocAsyncCtx3 + 52 | 0; //@line 21849
  HEAP32[$335 >> 2] = $28; //@line 21850
  $336 = $ReallocAsyncCtx3 + 56 | 0; //@line 21851
  HEAP32[$336 >> 2] = $30; //@line 21852
  $337 = $ReallocAsyncCtx3 + 60 | 0; //@line 21853
  HEAP32[$337 >> 2] = $32; //@line 21854
  $338 = $ReallocAsyncCtx3 + 64 | 0; //@line 21855
  HEAP32[$338 >> 2] = $34; //@line 21856
  $339 = $ReallocAsyncCtx3 + 68 | 0; //@line 21857
  HEAP32[$339 >> 2] = $38; //@line 21858
  $340 = $ReallocAsyncCtx3 + 72 | 0; //@line 21859
  HEAP8[$340 >> 0] = $127; //@line 21860
  $341 = $ReallocAsyncCtx3 + 76 | 0; //@line 21861
  HEAP32[$341 >> 2] = $40; //@line 21862
  $342 = $ReallocAsyncCtx3 + 80 | 0; //@line 21863
  HEAP32[$342 >> 2] = $42; //@line 21864
  $343 = $ReallocAsyncCtx3 + 84 | 0; //@line 21865
  HEAP32[$343 >> 2] = $44; //@line 21866
  $344 = $ReallocAsyncCtx3 + 88 | 0; //@line 21867
  HEAP8[$344 >> 0] = $46; //@line 21868
  $345 = $ReallocAsyncCtx3 + 89 | 0; //@line 21869
  HEAP8[$345 >> 0] = $48; //@line 21870
  $346 = $ReallocAsyncCtx3 + 92 | 0; //@line 21871
  HEAP32[$346 >> 2] = $54; //@line 21872
  $347 = $ReallocAsyncCtx3 + 96 | 0; //@line 21873
  HEAP32[$347 >> 2] = $52; //@line 21874
  $348 = $ReallocAsyncCtx3 + 100 | 0; //@line 21875
  HEAP32[$348 >> 2] = $50; //@line 21876
  $349 = $ReallocAsyncCtx3 + 104 | 0; //@line 21877
  HEAP32[$349 >> 2] = $56; //@line 21878
  $350 = $ReallocAsyncCtx3 + 108 | 0; //@line 21879
  HEAP32[$350 >> 2] = $60; //@line 21880
  $351 = $ReallocAsyncCtx3 + 112 | 0; //@line 21881
  HEAP32[$351 >> 2] = $62; //@line 21882
  $352 = $ReallocAsyncCtx3 + 116 | 0; //@line 21883
  HEAP32[$352 >> 2] = $64; //@line 21884
  $353 = $ReallocAsyncCtx3 + 120 | 0; //@line 21885
  HEAP32[$353 >> 2] = $66; //@line 21886
  $354 = $ReallocAsyncCtx3 + 124 | 0; //@line 21887
  HEAP32[$354 >> 2] = $68; //@line 21888
  $355 = $ReallocAsyncCtx3 + 128 | 0; //@line 21889
  HEAP32[$355 >> 2] = $70; //@line 21890
  $356 = $ReallocAsyncCtx3 + 132 | 0; //@line 21891
  HEAP32[$356 >> 2] = $72; //@line 21892
  $357 = $ReallocAsyncCtx3 + 136 | 0; //@line 21893
  HEAP32[$357 >> 2] = $74; //@line 21894
  $358 = $ReallocAsyncCtx3 + 140 | 0; //@line 21895
  HEAP32[$358 >> 2] = $76; //@line 21896
  $359 = $ReallocAsyncCtx3 + 144 | 0; //@line 21897
  HEAP32[$359 >> 2] = $78; //@line 21898
  $360 = $ReallocAsyncCtx3 + 148 | 0; //@line 21899
  HEAP32[$360 >> 2] = $82; //@line 21900
  $361 = $ReallocAsyncCtx3 + 152 | 0; //@line 21901
  HEAP32[$361 >> 2] = $84; //@line 21902
  $362 = $ReallocAsyncCtx3 + 156 | 0; //@line 21903
  HEAP32[$362 >> 2] = $86; //@line 21904
  $363 = $ReallocAsyncCtx3 + 160 | 0; //@line 21905
  HEAP32[$363 >> 2] = $88; //@line 21906
  $364 = $ReallocAsyncCtx3 + 164 | 0; //@line 21907
  HEAP32[$364 >> 2] = $90; //@line 21908
  $365 = $ReallocAsyncCtx3 + 168 | 0; //@line 21909
  HEAP32[$365 >> 2] = $92; //@line 21910
  $366 = $ReallocAsyncCtx3 + 172 | 0; //@line 21911
  HEAP32[$366 >> 2] = $94; //@line 21912
  $367 = $ReallocAsyncCtx3 + 176 | 0; //@line 21913
  HEAP32[$367 >> 2] = $96; //@line 21914
  $368 = $ReallocAsyncCtx3 + 180 | 0; //@line 21915
  HEAP32[$368 >> 2] = $98; //@line 21916
  $369 = $ReallocAsyncCtx3 + 184 | 0; //@line 21917
  HEAP32[$369 >> 2] = $100; //@line 21918
  $370 = $ReallocAsyncCtx3 + 188 | 0; //@line 21919
  HEAP32[$370 >> 2] = $102; //@line 21920
  $371 = $ReallocAsyncCtx3 + 192 | 0; //@line 21921
  HEAP32[$371 >> 2] = $104; //@line 21922
  $372 = $ReallocAsyncCtx3 + 196 | 0; //@line 21923
  HEAP32[$372 >> 2] = $106; //@line 21924
  $373 = $ReallocAsyncCtx3 + 200 | 0; //@line 21925
  HEAP32[$373 >> 2] = $108; //@line 21926
  $374 = $ReallocAsyncCtx3 + 204 | 0; //@line 21927
  HEAP32[$374 >> 2] = $110; //@line 21928
  $375 = $ReallocAsyncCtx3 + 208 | 0; //@line 21929
  HEAP32[$375 >> 2] = $112; //@line 21930
  $376 = $ReallocAsyncCtx3 + 212 | 0; //@line 21931
  HEAP32[$376 >> 2] = $114; //@line 21932
  $377 = $ReallocAsyncCtx3 + 216 | 0; //@line 21933
  HEAP32[$377 >> 2] = $116; //@line 21934
  $378 = $ReallocAsyncCtx3 + 220 | 0; //@line 21935
  HEAP32[$378 >> 2] = $118; //@line 21936
  $379 = $ReallocAsyncCtx3 + 224 | 0; //@line 21937
  HEAP32[$379 >> 2] = $122; //@line 21938
  $380 = $ReallocAsyncCtx3 + 228 | 0; //@line 21939
  HEAP32[$380 >> 2] = $124; //@line 21940
  sp = STACKTOP; //@line 21941
  return;
 } else if ((label | 0) == 18) {
  $400 = HEAP8[$40 + ($127 & 255) >> 0] | 0; //@line 21948
  HEAP32[$28 >> 2] = (HEAPU8[$40 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$40 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$40 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 21969
  HEAP32[$38 >> 2] = 0; //@line 21970
  $421 = $$0$be + 6 << 24 >> 24; //@line 21971
  HEAP8[$52 >> 0] = HEAP8[$40 + ($$0$be + 5 & 255) >> 0] | 0; //@line 21975
  $427 = HEAP32[(HEAP32[$62 >> 2] | 0) + 8 >> 2] | 0; //@line 21978
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(228) | 0; //@line 21979
  $428 = FUNCTION_TABLE_iiii[$427 & 31]($66, $400, $100) | 0; //@line 21980
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 478; //@line 21983
   $429 = $ReallocAsyncCtx4 + 4 | 0; //@line 21984
   HEAP32[$429 >> 2] = $2; //@line 21985
   $430 = $ReallocAsyncCtx4 + 8 | 0; //@line 21986
   HEAP8[$430 >> 0] = $4; //@line 21987
   $431 = $ReallocAsyncCtx4 + 12 | 0; //@line 21988
   HEAP32[$431 >> 2] = $6; //@line 21989
   $432 = $ReallocAsyncCtx4 + 16 | 0; //@line 21990
   HEAP32[$432 >> 2] = $8; //@line 21991
   $433 = $ReallocAsyncCtx4 + 20 | 0; //@line 21992
   HEAP32[$433 >> 2] = $10; //@line 21993
   $434 = $ReallocAsyncCtx4 + 24 | 0; //@line 21994
   HEAP32[$434 >> 2] = $14; //@line 21995
   $435 = $ReallocAsyncCtx4 + 28 | 0; //@line 21996
   HEAP32[$435 >> 2] = $16; //@line 21997
   $436 = $ReallocAsyncCtx4 + 32 | 0; //@line 21998
   HEAP32[$436 >> 2] = $18; //@line 21999
   $437 = $ReallocAsyncCtx4 + 36 | 0; //@line 22000
   HEAP32[$437 >> 2] = $20; //@line 22001
   $438 = $ReallocAsyncCtx4 + 40 | 0; //@line 22002
   HEAP32[$438 >> 2] = $22; //@line 22003
   $439 = $ReallocAsyncCtx4 + 44 | 0; //@line 22004
   HEAP32[$439 >> 2] = $24; //@line 22005
   $440 = $ReallocAsyncCtx4 + 48 | 0; //@line 22006
   HEAP32[$440 >> 2] = $26; //@line 22007
   $441 = $ReallocAsyncCtx4 + 52 | 0; //@line 22008
   HEAP32[$441 >> 2] = $28; //@line 22009
   $442 = $ReallocAsyncCtx4 + 56 | 0; //@line 22010
   HEAP32[$442 >> 2] = $30; //@line 22011
   $443 = $ReallocAsyncCtx4 + 60 | 0; //@line 22012
   HEAP32[$443 >> 2] = $32; //@line 22013
   $444 = $ReallocAsyncCtx4 + 64 | 0; //@line 22014
   HEAP32[$444 >> 2] = $34; //@line 22015
   $445 = $ReallocAsyncCtx4 + 68 | 0; //@line 22016
   HEAP32[$445 >> 2] = $38; //@line 22017
   $446 = $ReallocAsyncCtx4 + 72 | 0; //@line 22018
   HEAP32[$446 >> 2] = $40; //@line 22019
   $447 = $ReallocAsyncCtx4 + 76 | 0; //@line 22020
   HEAP32[$447 >> 2] = $42; //@line 22021
   $448 = $ReallocAsyncCtx4 + 80 | 0; //@line 22022
   HEAP32[$448 >> 2] = $44; //@line 22023
   $449 = $ReallocAsyncCtx4 + 84 | 0; //@line 22024
   HEAP8[$449 >> 0] = $421; //@line 22025
   $450 = $ReallocAsyncCtx4 + 85 | 0; //@line 22026
   HEAP8[$450 >> 0] = $48; //@line 22027
   $451 = $ReallocAsyncCtx4 + 86 | 0; //@line 22028
   HEAP8[$451 >> 0] = $46; //@line 22029
   $452 = $ReallocAsyncCtx4 + 88 | 0; //@line 22030
   HEAP32[$452 >> 2] = $52; //@line 22031
   $453 = $ReallocAsyncCtx4 + 92 | 0; //@line 22032
   HEAP32[$453 >> 2] = $50; //@line 22033
   $454 = $ReallocAsyncCtx4 + 96 | 0; //@line 22034
   HEAP32[$454 >> 2] = $54; //@line 22035
   $455 = $ReallocAsyncCtx4 + 100 | 0; //@line 22036
   HEAP32[$455 >> 2] = $56; //@line 22037
   $456 = $ReallocAsyncCtx4 + 104 | 0; //@line 22038
   HEAP32[$456 >> 2] = $60; //@line 22039
   $457 = $ReallocAsyncCtx4 + 108 | 0; //@line 22040
   HEAP32[$457 >> 2] = $62; //@line 22041
   $458 = $ReallocAsyncCtx4 + 112 | 0; //@line 22042
   HEAP32[$458 >> 2] = $64; //@line 22043
   $459 = $ReallocAsyncCtx4 + 116 | 0; //@line 22044
   HEAP32[$459 >> 2] = $66; //@line 22045
   $460 = $ReallocAsyncCtx4 + 120 | 0; //@line 22046
   HEAP32[$460 >> 2] = $68; //@line 22047
   $461 = $ReallocAsyncCtx4 + 124 | 0; //@line 22048
   HEAP32[$461 >> 2] = $70; //@line 22049
   $462 = $ReallocAsyncCtx4 + 128 | 0; //@line 22050
   HEAP32[$462 >> 2] = $72; //@line 22051
   $463 = $ReallocAsyncCtx4 + 132 | 0; //@line 22052
   HEAP32[$463 >> 2] = $74; //@line 22053
   $464 = $ReallocAsyncCtx4 + 136 | 0; //@line 22054
   HEAP32[$464 >> 2] = $76; //@line 22055
   $465 = $ReallocAsyncCtx4 + 140 | 0; //@line 22056
   HEAP32[$465 >> 2] = $78; //@line 22057
   $466 = $ReallocAsyncCtx4 + 144 | 0; //@line 22058
   HEAP32[$466 >> 2] = $82; //@line 22059
   $467 = $ReallocAsyncCtx4 + 148 | 0; //@line 22060
   HEAP32[$467 >> 2] = $84; //@line 22061
   $468 = $ReallocAsyncCtx4 + 152 | 0; //@line 22062
   HEAP32[$468 >> 2] = $86; //@line 22063
   $469 = $ReallocAsyncCtx4 + 156 | 0; //@line 22064
   HEAP32[$469 >> 2] = $88; //@line 22065
   $470 = $ReallocAsyncCtx4 + 160 | 0; //@line 22066
   HEAP32[$470 >> 2] = $90; //@line 22067
   $471 = $ReallocAsyncCtx4 + 164 | 0; //@line 22068
   HEAP32[$471 >> 2] = $92; //@line 22069
   $472 = $ReallocAsyncCtx4 + 168 | 0; //@line 22070
   HEAP32[$472 >> 2] = $94; //@line 22071
   $473 = $ReallocAsyncCtx4 + 172 | 0; //@line 22072
   HEAP32[$473 >> 2] = $96; //@line 22073
   $474 = $ReallocAsyncCtx4 + 176 | 0; //@line 22074
   HEAP32[$474 >> 2] = $98; //@line 22075
   $475 = $ReallocAsyncCtx4 + 180 | 0; //@line 22076
   HEAP32[$475 >> 2] = $100; //@line 22077
   $476 = $ReallocAsyncCtx4 + 184 | 0; //@line 22078
   HEAP32[$476 >> 2] = $102; //@line 22079
   $477 = $ReallocAsyncCtx4 + 188 | 0; //@line 22080
   HEAP32[$477 >> 2] = $104; //@line 22081
   $478 = $ReallocAsyncCtx4 + 192 | 0; //@line 22082
   HEAP32[$478 >> 2] = $106; //@line 22083
   $479 = $ReallocAsyncCtx4 + 196 | 0; //@line 22084
   HEAP32[$479 >> 2] = $108; //@line 22085
   $480 = $ReallocAsyncCtx4 + 200 | 0; //@line 22086
   HEAP32[$480 >> 2] = $110; //@line 22087
   $481 = $ReallocAsyncCtx4 + 204 | 0; //@line 22088
   HEAP32[$481 >> 2] = $112; //@line 22089
   $482 = $ReallocAsyncCtx4 + 208 | 0; //@line 22090
   HEAP32[$482 >> 2] = $114; //@line 22091
   $483 = $ReallocAsyncCtx4 + 212 | 0; //@line 22092
   HEAP32[$483 >> 2] = $116; //@line 22093
   $484 = $ReallocAsyncCtx4 + 216 | 0; //@line 22094
   HEAP32[$484 >> 2] = $118; //@line 22095
   $485 = $ReallocAsyncCtx4 + 220 | 0; //@line 22096
   HEAP32[$485 >> 2] = $122; //@line 22097
   $486 = $ReallocAsyncCtx4 + 224 | 0; //@line 22098
   HEAP32[$486 >> 2] = $124; //@line 22099
   sp = STACKTOP; //@line 22100
   return;
  }
  HEAP8[___async_retval >> 0] = $428; //@line 22104
  ___async_unwind = 0; //@line 22105
  HEAP32[$ReallocAsyncCtx4 >> 2] = 478; //@line 22106
  $429 = $ReallocAsyncCtx4 + 4 | 0; //@line 22107
  HEAP32[$429 >> 2] = $2; //@line 22108
  $430 = $ReallocAsyncCtx4 + 8 | 0; //@line 22109
  HEAP8[$430 >> 0] = $4; //@line 22110
  $431 = $ReallocAsyncCtx4 + 12 | 0; //@line 22111
  HEAP32[$431 >> 2] = $6; //@line 22112
  $432 = $ReallocAsyncCtx4 + 16 | 0; //@line 22113
  HEAP32[$432 >> 2] = $8; //@line 22114
  $433 = $ReallocAsyncCtx4 + 20 | 0; //@line 22115
  HEAP32[$433 >> 2] = $10; //@line 22116
  $434 = $ReallocAsyncCtx4 + 24 | 0; //@line 22117
  HEAP32[$434 >> 2] = $14; //@line 22118
  $435 = $ReallocAsyncCtx4 + 28 | 0; //@line 22119
  HEAP32[$435 >> 2] = $16; //@line 22120
  $436 = $ReallocAsyncCtx4 + 32 | 0; //@line 22121
  HEAP32[$436 >> 2] = $18; //@line 22122
  $437 = $ReallocAsyncCtx4 + 36 | 0; //@line 22123
  HEAP32[$437 >> 2] = $20; //@line 22124
  $438 = $ReallocAsyncCtx4 + 40 | 0; //@line 22125
  HEAP32[$438 >> 2] = $22; //@line 22126
  $439 = $ReallocAsyncCtx4 + 44 | 0; //@line 22127
  HEAP32[$439 >> 2] = $24; //@line 22128
  $440 = $ReallocAsyncCtx4 + 48 | 0; //@line 22129
  HEAP32[$440 >> 2] = $26; //@line 22130
  $441 = $ReallocAsyncCtx4 + 52 | 0; //@line 22131
  HEAP32[$441 >> 2] = $28; //@line 22132
  $442 = $ReallocAsyncCtx4 + 56 | 0; //@line 22133
  HEAP32[$442 >> 2] = $30; //@line 22134
  $443 = $ReallocAsyncCtx4 + 60 | 0; //@line 22135
  HEAP32[$443 >> 2] = $32; //@line 22136
  $444 = $ReallocAsyncCtx4 + 64 | 0; //@line 22137
  HEAP32[$444 >> 2] = $34; //@line 22138
  $445 = $ReallocAsyncCtx4 + 68 | 0; //@line 22139
  HEAP32[$445 >> 2] = $38; //@line 22140
  $446 = $ReallocAsyncCtx4 + 72 | 0; //@line 22141
  HEAP32[$446 >> 2] = $40; //@line 22142
  $447 = $ReallocAsyncCtx4 + 76 | 0; //@line 22143
  HEAP32[$447 >> 2] = $42; //@line 22144
  $448 = $ReallocAsyncCtx4 + 80 | 0; //@line 22145
  HEAP32[$448 >> 2] = $44; //@line 22146
  $449 = $ReallocAsyncCtx4 + 84 | 0; //@line 22147
  HEAP8[$449 >> 0] = $421; //@line 22148
  $450 = $ReallocAsyncCtx4 + 85 | 0; //@line 22149
  HEAP8[$450 >> 0] = $48; //@line 22150
  $451 = $ReallocAsyncCtx4 + 86 | 0; //@line 22151
  HEAP8[$451 >> 0] = $46; //@line 22152
  $452 = $ReallocAsyncCtx4 + 88 | 0; //@line 22153
  HEAP32[$452 >> 2] = $52; //@line 22154
  $453 = $ReallocAsyncCtx4 + 92 | 0; //@line 22155
  HEAP32[$453 >> 2] = $50; //@line 22156
  $454 = $ReallocAsyncCtx4 + 96 | 0; //@line 22157
  HEAP32[$454 >> 2] = $54; //@line 22158
  $455 = $ReallocAsyncCtx4 + 100 | 0; //@line 22159
  HEAP32[$455 >> 2] = $56; //@line 22160
  $456 = $ReallocAsyncCtx4 + 104 | 0; //@line 22161
  HEAP32[$456 >> 2] = $60; //@line 22162
  $457 = $ReallocAsyncCtx4 + 108 | 0; //@line 22163
  HEAP32[$457 >> 2] = $62; //@line 22164
  $458 = $ReallocAsyncCtx4 + 112 | 0; //@line 22165
  HEAP32[$458 >> 2] = $64; //@line 22166
  $459 = $ReallocAsyncCtx4 + 116 | 0; //@line 22167
  HEAP32[$459 >> 2] = $66; //@line 22168
  $460 = $ReallocAsyncCtx4 + 120 | 0; //@line 22169
  HEAP32[$460 >> 2] = $68; //@line 22170
  $461 = $ReallocAsyncCtx4 + 124 | 0; //@line 22171
  HEAP32[$461 >> 2] = $70; //@line 22172
  $462 = $ReallocAsyncCtx4 + 128 | 0; //@line 22173
  HEAP32[$462 >> 2] = $72; //@line 22174
  $463 = $ReallocAsyncCtx4 + 132 | 0; //@line 22175
  HEAP32[$463 >> 2] = $74; //@line 22176
  $464 = $ReallocAsyncCtx4 + 136 | 0; //@line 22177
  HEAP32[$464 >> 2] = $76; //@line 22178
  $465 = $ReallocAsyncCtx4 + 140 | 0; //@line 22179
  HEAP32[$465 >> 2] = $78; //@line 22180
  $466 = $ReallocAsyncCtx4 + 144 | 0; //@line 22181
  HEAP32[$466 >> 2] = $82; //@line 22182
  $467 = $ReallocAsyncCtx4 + 148 | 0; //@line 22183
  HEAP32[$467 >> 2] = $84; //@line 22184
  $468 = $ReallocAsyncCtx4 + 152 | 0; //@line 22185
  HEAP32[$468 >> 2] = $86; //@line 22186
  $469 = $ReallocAsyncCtx4 + 156 | 0; //@line 22187
  HEAP32[$469 >> 2] = $88; //@line 22188
  $470 = $ReallocAsyncCtx4 + 160 | 0; //@line 22189
  HEAP32[$470 >> 2] = $90; //@line 22190
  $471 = $ReallocAsyncCtx4 + 164 | 0; //@line 22191
  HEAP32[$471 >> 2] = $92; //@line 22192
  $472 = $ReallocAsyncCtx4 + 168 | 0; //@line 22193
  HEAP32[$472 >> 2] = $94; //@line 22194
  $473 = $ReallocAsyncCtx4 + 172 | 0; //@line 22195
  HEAP32[$473 >> 2] = $96; //@line 22196
  $474 = $ReallocAsyncCtx4 + 176 | 0; //@line 22197
  HEAP32[$474 >> 2] = $98; //@line 22198
  $475 = $ReallocAsyncCtx4 + 180 | 0; //@line 22199
  HEAP32[$475 >> 2] = $100; //@line 22200
  $476 = $ReallocAsyncCtx4 + 184 | 0; //@line 22201
  HEAP32[$476 >> 2] = $102; //@line 22202
  $477 = $ReallocAsyncCtx4 + 188 | 0; //@line 22203
  HEAP32[$477 >> 2] = $104; //@line 22204
  $478 = $ReallocAsyncCtx4 + 192 | 0; //@line 22205
  HEAP32[$478 >> 2] = $106; //@line 22206
  $479 = $ReallocAsyncCtx4 + 196 | 0; //@line 22207
  HEAP32[$479 >> 2] = $108; //@line 22208
  $480 = $ReallocAsyncCtx4 + 200 | 0; //@line 22209
  HEAP32[$480 >> 2] = $110; //@line 22210
  $481 = $ReallocAsyncCtx4 + 204 | 0; //@line 22211
  HEAP32[$481 >> 2] = $112; //@line 22212
  $482 = $ReallocAsyncCtx4 + 208 | 0; //@line 22213
  HEAP32[$482 >> 2] = $114; //@line 22214
  $483 = $ReallocAsyncCtx4 + 212 | 0; //@line 22215
  HEAP32[$483 >> 2] = $116; //@line 22216
  $484 = $ReallocAsyncCtx4 + 216 | 0; //@line 22217
  HEAP32[$484 >> 2] = $118; //@line 22218
  $485 = $ReallocAsyncCtx4 + 220 | 0; //@line 22219
  HEAP32[$485 >> 2] = $122; //@line 22220
  $486 = $ReallocAsyncCtx4 + 224 | 0; //@line 22221
  HEAP32[$486 >> 2] = $124; //@line 22222
  sp = STACKTOP; //@line 22223
  return;
 } else if ((label | 0) == 24) {
  $507 = $$0$be + 2 << 24 >> 24; //@line 22227
  $511 = HEAPU8[$40 + ($127 & 255) >> 0] | 0; //@line 22231
  $513 = $511 >>> 5 & 1; //@line 22234
  $515 = $511 >>> 4 & 1; //@line 22237
  $518 = HEAP32[(HEAP32[$86 >> 2] | 0) + 44 >> 2] | 0; //@line 22240
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(248) | 0; //@line 22241
  $519 = FUNCTION_TABLE_iiii[$518 & 31]($66, $515, $513) | 0; //@line 22242
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 22245
   $520 = $ReallocAsyncCtx5 + 4 | 0; //@line 22246
   HEAP32[$520 >> 2] = $2; //@line 22247
   $521 = $ReallocAsyncCtx5 + 8 | 0; //@line 22248
   HEAP8[$521 >> 0] = $4; //@line 22249
   $522 = $ReallocAsyncCtx5 + 12 | 0; //@line 22250
   HEAP32[$522 >> 2] = $6; //@line 22251
   $523 = $ReallocAsyncCtx5 + 16 | 0; //@line 22252
   HEAP32[$523 >> 2] = $8; //@line 22253
   $524 = $ReallocAsyncCtx5 + 20 | 0; //@line 22254
   HEAP32[$524 >> 2] = $10; //@line 22255
   $525 = $ReallocAsyncCtx5 + 24 | 0; //@line 22256
   HEAP32[$525 >> 2] = $511; //@line 22257
   $526 = $ReallocAsyncCtx5 + 28 | 0; //@line 22258
   HEAP32[$526 >> 2] = $14; //@line 22259
   $527 = $ReallocAsyncCtx5 + 32 | 0; //@line 22260
   HEAP32[$527 >> 2] = $16; //@line 22261
   $528 = $ReallocAsyncCtx5 + 36 | 0; //@line 22262
   HEAP32[$528 >> 2] = $18; //@line 22263
   $529 = $ReallocAsyncCtx5 + 40 | 0; //@line 22264
   HEAP32[$529 >> 2] = $20; //@line 22265
   $530 = $ReallocAsyncCtx5 + 44 | 0; //@line 22266
   HEAP32[$530 >> 2] = $22; //@line 22267
   $531 = $ReallocAsyncCtx5 + 48 | 0; //@line 22268
   HEAP32[$531 >> 2] = $24; //@line 22269
   $532 = $ReallocAsyncCtx5 + 52 | 0; //@line 22270
   HEAP32[$532 >> 2] = $26; //@line 22271
   $533 = $ReallocAsyncCtx5 + 56 | 0; //@line 22272
   HEAP32[$533 >> 2] = $28; //@line 22273
   $534 = $ReallocAsyncCtx5 + 60 | 0; //@line 22274
   HEAP32[$534 >> 2] = $30; //@line 22275
   $535 = $ReallocAsyncCtx5 + 64 | 0; //@line 22276
   HEAP32[$535 >> 2] = $32; //@line 22277
   $536 = $ReallocAsyncCtx5 + 68 | 0; //@line 22278
   HEAP32[$536 >> 2] = $34; //@line 22279
   $537 = $ReallocAsyncCtx5 + 72 | 0; //@line 22280
   HEAP8[$537 >> 0] = $513; //@line 22281
   $538 = $ReallocAsyncCtx5 + 76 | 0; //@line 22282
   HEAP32[$538 >> 2] = $38; //@line 22283
   $539 = $ReallocAsyncCtx5 + 80 | 0; //@line 22284
   HEAP32[$539 >> 2] = $40; //@line 22285
   $540 = $ReallocAsyncCtx5 + 84 | 0; //@line 22286
   HEAP32[$540 >> 2] = $42; //@line 22287
   $541 = $ReallocAsyncCtx5 + 88 | 0; //@line 22288
   HEAP32[$541 >> 2] = $44; //@line 22289
   $542 = $ReallocAsyncCtx5 + 92 | 0; //@line 22290
   HEAP8[$542 >> 0] = $46; //@line 22291
   $543 = $ReallocAsyncCtx5 + 93 | 0; //@line 22292
   HEAP8[$543 >> 0] = $48; //@line 22293
   $544 = $ReallocAsyncCtx5 + 96 | 0; //@line 22294
   HEAP32[$544 >> 2] = $50; //@line 22295
   $545 = $ReallocAsyncCtx5 + 100 | 0; //@line 22296
   HEAP32[$545 >> 2] = $52; //@line 22297
   $546 = $ReallocAsyncCtx5 + 104 | 0; //@line 22298
   HEAP32[$546 >> 2] = $54; //@line 22299
   $547 = $ReallocAsyncCtx5 + 108 | 0; //@line 22300
   HEAP32[$547 >> 2] = $56; //@line 22301
   $548 = $ReallocAsyncCtx5 + 112 | 0; //@line 22302
   HEAP8[$548 >> 0] = $507; //@line 22303
   $549 = $ReallocAsyncCtx5 + 116 | 0; //@line 22304
   HEAP32[$549 >> 2] = $60; //@line 22305
   $550 = $ReallocAsyncCtx5 + 120 | 0; //@line 22306
   HEAP32[$550 >> 2] = $62; //@line 22307
   $551 = $ReallocAsyncCtx5 + 124 | 0; //@line 22308
   HEAP32[$551 >> 2] = $64; //@line 22309
   $552 = $ReallocAsyncCtx5 + 128 | 0; //@line 22310
   HEAP32[$552 >> 2] = $66; //@line 22311
   $553 = $ReallocAsyncCtx5 + 132 | 0; //@line 22312
   HEAP32[$553 >> 2] = $68; //@line 22313
   $554 = $ReallocAsyncCtx5 + 136 | 0; //@line 22314
   HEAP32[$554 >> 2] = $70; //@line 22315
   $555 = $ReallocAsyncCtx5 + 140 | 0; //@line 22316
   HEAP32[$555 >> 2] = $72; //@line 22317
   $556 = $ReallocAsyncCtx5 + 144 | 0; //@line 22318
   HEAP32[$556 >> 2] = $74; //@line 22319
   $557 = $ReallocAsyncCtx5 + 148 | 0; //@line 22320
   HEAP32[$557 >> 2] = $76; //@line 22321
   $558 = $ReallocAsyncCtx5 + 152 | 0; //@line 22322
   HEAP32[$558 >> 2] = $78; //@line 22323
   $559 = $ReallocAsyncCtx5 + 156 | 0; //@line 22324
   HEAP8[$559 >> 0] = $515; //@line 22325
   $560 = $ReallocAsyncCtx5 + 160 | 0; //@line 22326
   HEAP32[$560 >> 2] = $82; //@line 22327
   $561 = $ReallocAsyncCtx5 + 164 | 0; //@line 22328
   HEAP32[$561 >> 2] = $84; //@line 22329
   $562 = $ReallocAsyncCtx5 + 168 | 0; //@line 22330
   HEAP32[$562 >> 2] = $86; //@line 22331
   $563 = $ReallocAsyncCtx5 + 172 | 0; //@line 22332
   HEAP32[$563 >> 2] = $88; //@line 22333
   $564 = $ReallocAsyncCtx5 + 176 | 0; //@line 22334
   HEAP32[$564 >> 2] = $90; //@line 22335
   $565 = $ReallocAsyncCtx5 + 180 | 0; //@line 22336
   HEAP32[$565 >> 2] = $92; //@line 22337
   $566 = $ReallocAsyncCtx5 + 184 | 0; //@line 22338
   HEAP32[$566 >> 2] = $94; //@line 22339
   $567 = $ReallocAsyncCtx5 + 188 | 0; //@line 22340
   HEAP32[$567 >> 2] = $96; //@line 22341
   $568 = $ReallocAsyncCtx5 + 192 | 0; //@line 22342
   HEAP32[$568 >> 2] = $98; //@line 22343
   $569 = $ReallocAsyncCtx5 + 196 | 0; //@line 22344
   HEAP32[$569 >> 2] = $100; //@line 22345
   $570 = $ReallocAsyncCtx5 + 200 | 0; //@line 22346
   HEAP32[$570 >> 2] = $102; //@line 22347
   $571 = $ReallocAsyncCtx5 + 204 | 0; //@line 22348
   HEAP32[$571 >> 2] = $104; //@line 22349
   $572 = $ReallocAsyncCtx5 + 208 | 0; //@line 22350
   HEAP32[$572 >> 2] = $106; //@line 22351
   $573 = $ReallocAsyncCtx5 + 212 | 0; //@line 22352
   HEAP32[$573 >> 2] = $108; //@line 22353
   $574 = $ReallocAsyncCtx5 + 216 | 0; //@line 22354
   HEAP32[$574 >> 2] = $110; //@line 22355
   $575 = $ReallocAsyncCtx5 + 220 | 0; //@line 22356
   HEAP32[$575 >> 2] = $112; //@line 22357
   $576 = $ReallocAsyncCtx5 + 224 | 0; //@line 22358
   HEAP32[$576 >> 2] = $114; //@line 22359
   $577 = $ReallocAsyncCtx5 + 228 | 0; //@line 22360
   HEAP32[$577 >> 2] = $116; //@line 22361
   $578 = $ReallocAsyncCtx5 + 232 | 0; //@line 22362
   HEAP32[$578 >> 2] = $118; //@line 22363
   $579 = $ReallocAsyncCtx5 + 236 | 0; //@line 22364
   HEAP32[$579 >> 2] = $$0107$be; //@line 22365
   $580 = $ReallocAsyncCtx5 + 240 | 0; //@line 22366
   HEAP32[$580 >> 2] = $122; //@line 22367
   $581 = $ReallocAsyncCtx5 + 244 | 0; //@line 22368
   HEAP32[$581 >> 2] = $124; //@line 22369
   sp = STACKTOP; //@line 22370
   return;
  }
  HEAP8[___async_retval >> 0] = $519 & 1; //@line 22375
  ___async_unwind = 0; //@line 22376
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 22377
  $520 = $ReallocAsyncCtx5 + 4 | 0; //@line 22378
  HEAP32[$520 >> 2] = $2; //@line 22379
  $521 = $ReallocAsyncCtx5 + 8 | 0; //@line 22380
  HEAP8[$521 >> 0] = $4; //@line 22381
  $522 = $ReallocAsyncCtx5 + 12 | 0; //@line 22382
  HEAP32[$522 >> 2] = $6; //@line 22383
  $523 = $ReallocAsyncCtx5 + 16 | 0; //@line 22384
  HEAP32[$523 >> 2] = $8; //@line 22385
  $524 = $ReallocAsyncCtx5 + 20 | 0; //@line 22386
  HEAP32[$524 >> 2] = $10; //@line 22387
  $525 = $ReallocAsyncCtx5 + 24 | 0; //@line 22388
  HEAP32[$525 >> 2] = $511; //@line 22389
  $526 = $ReallocAsyncCtx5 + 28 | 0; //@line 22390
  HEAP32[$526 >> 2] = $14; //@line 22391
  $527 = $ReallocAsyncCtx5 + 32 | 0; //@line 22392
  HEAP32[$527 >> 2] = $16; //@line 22393
  $528 = $ReallocAsyncCtx5 + 36 | 0; //@line 22394
  HEAP32[$528 >> 2] = $18; //@line 22395
  $529 = $ReallocAsyncCtx5 + 40 | 0; //@line 22396
  HEAP32[$529 >> 2] = $20; //@line 22397
  $530 = $ReallocAsyncCtx5 + 44 | 0; //@line 22398
  HEAP32[$530 >> 2] = $22; //@line 22399
  $531 = $ReallocAsyncCtx5 + 48 | 0; //@line 22400
  HEAP32[$531 >> 2] = $24; //@line 22401
  $532 = $ReallocAsyncCtx5 + 52 | 0; //@line 22402
  HEAP32[$532 >> 2] = $26; //@line 22403
  $533 = $ReallocAsyncCtx5 + 56 | 0; //@line 22404
  HEAP32[$533 >> 2] = $28; //@line 22405
  $534 = $ReallocAsyncCtx5 + 60 | 0; //@line 22406
  HEAP32[$534 >> 2] = $30; //@line 22407
  $535 = $ReallocAsyncCtx5 + 64 | 0; //@line 22408
  HEAP32[$535 >> 2] = $32; //@line 22409
  $536 = $ReallocAsyncCtx5 + 68 | 0; //@line 22410
  HEAP32[$536 >> 2] = $34; //@line 22411
  $537 = $ReallocAsyncCtx5 + 72 | 0; //@line 22412
  HEAP8[$537 >> 0] = $513; //@line 22413
  $538 = $ReallocAsyncCtx5 + 76 | 0; //@line 22414
  HEAP32[$538 >> 2] = $38; //@line 22415
  $539 = $ReallocAsyncCtx5 + 80 | 0; //@line 22416
  HEAP32[$539 >> 2] = $40; //@line 22417
  $540 = $ReallocAsyncCtx5 + 84 | 0; //@line 22418
  HEAP32[$540 >> 2] = $42; //@line 22419
  $541 = $ReallocAsyncCtx5 + 88 | 0; //@line 22420
  HEAP32[$541 >> 2] = $44; //@line 22421
  $542 = $ReallocAsyncCtx5 + 92 | 0; //@line 22422
  HEAP8[$542 >> 0] = $46; //@line 22423
  $543 = $ReallocAsyncCtx5 + 93 | 0; //@line 22424
  HEAP8[$543 >> 0] = $48; //@line 22425
  $544 = $ReallocAsyncCtx5 + 96 | 0; //@line 22426
  HEAP32[$544 >> 2] = $50; //@line 22427
  $545 = $ReallocAsyncCtx5 + 100 | 0; //@line 22428
  HEAP32[$545 >> 2] = $52; //@line 22429
  $546 = $ReallocAsyncCtx5 + 104 | 0; //@line 22430
  HEAP32[$546 >> 2] = $54; //@line 22431
  $547 = $ReallocAsyncCtx5 + 108 | 0; //@line 22432
  HEAP32[$547 >> 2] = $56; //@line 22433
  $548 = $ReallocAsyncCtx5 + 112 | 0; //@line 22434
  HEAP8[$548 >> 0] = $507; //@line 22435
  $549 = $ReallocAsyncCtx5 + 116 | 0; //@line 22436
  HEAP32[$549 >> 2] = $60; //@line 22437
  $550 = $ReallocAsyncCtx5 + 120 | 0; //@line 22438
  HEAP32[$550 >> 2] = $62; //@line 22439
  $551 = $ReallocAsyncCtx5 + 124 | 0; //@line 22440
  HEAP32[$551 >> 2] = $64; //@line 22441
  $552 = $ReallocAsyncCtx5 + 128 | 0; //@line 22442
  HEAP32[$552 >> 2] = $66; //@line 22443
  $553 = $ReallocAsyncCtx5 + 132 | 0; //@line 22444
  HEAP32[$553 >> 2] = $68; //@line 22445
  $554 = $ReallocAsyncCtx5 + 136 | 0; //@line 22446
  HEAP32[$554 >> 2] = $70; //@line 22447
  $555 = $ReallocAsyncCtx5 + 140 | 0; //@line 22448
  HEAP32[$555 >> 2] = $72; //@line 22449
  $556 = $ReallocAsyncCtx5 + 144 | 0; //@line 22450
  HEAP32[$556 >> 2] = $74; //@line 22451
  $557 = $ReallocAsyncCtx5 + 148 | 0; //@line 22452
  HEAP32[$557 >> 2] = $76; //@line 22453
  $558 = $ReallocAsyncCtx5 + 152 | 0; //@line 22454
  HEAP32[$558 >> 2] = $78; //@line 22455
  $559 = $ReallocAsyncCtx5 + 156 | 0; //@line 22456
  HEAP8[$559 >> 0] = $515; //@line 22457
  $560 = $ReallocAsyncCtx5 + 160 | 0; //@line 22458
  HEAP32[$560 >> 2] = $82; //@line 22459
  $561 = $ReallocAsyncCtx5 + 164 | 0; //@line 22460
  HEAP32[$561 >> 2] = $84; //@line 22461
  $562 = $ReallocAsyncCtx5 + 168 | 0; //@line 22462
  HEAP32[$562 >> 2] = $86; //@line 22463
  $563 = $ReallocAsyncCtx5 + 172 | 0; //@line 22464
  HEAP32[$563 >> 2] = $88; //@line 22465
  $564 = $ReallocAsyncCtx5 + 176 | 0; //@line 22466
  HEAP32[$564 >> 2] = $90; //@line 22467
  $565 = $ReallocAsyncCtx5 + 180 | 0; //@line 22468
  HEAP32[$565 >> 2] = $92; //@line 22469
  $566 = $ReallocAsyncCtx5 + 184 | 0; //@line 22470
  HEAP32[$566 >> 2] = $94; //@line 22471
  $567 = $ReallocAsyncCtx5 + 188 | 0; //@line 22472
  HEAP32[$567 >> 2] = $96; //@line 22473
  $568 = $ReallocAsyncCtx5 + 192 | 0; //@line 22474
  HEAP32[$568 >> 2] = $98; //@line 22475
  $569 = $ReallocAsyncCtx5 + 196 | 0; //@line 22476
  HEAP32[$569 >> 2] = $100; //@line 22477
  $570 = $ReallocAsyncCtx5 + 200 | 0; //@line 22478
  HEAP32[$570 >> 2] = $102; //@line 22479
  $571 = $ReallocAsyncCtx5 + 204 | 0; //@line 22480
  HEAP32[$571 >> 2] = $104; //@line 22481
  $572 = $ReallocAsyncCtx5 + 208 | 0; //@line 22482
  HEAP32[$572 >> 2] = $106; //@line 22483
  $573 = $ReallocAsyncCtx5 + 212 | 0; //@line 22484
  HEAP32[$573 >> 2] = $108; //@line 22485
  $574 = $ReallocAsyncCtx5 + 216 | 0; //@line 22486
  HEAP32[$574 >> 2] = $110; //@line 22487
  $575 = $ReallocAsyncCtx5 + 220 | 0; //@line 22488
  HEAP32[$575 >> 2] = $112; //@line 22489
  $576 = $ReallocAsyncCtx5 + 224 | 0; //@line 22490
  HEAP32[$576 >> 2] = $114; //@line 22491
  $577 = $ReallocAsyncCtx5 + 228 | 0; //@line 22492
  HEAP32[$577 >> 2] = $116; //@line 22493
  $578 = $ReallocAsyncCtx5 + 232 | 0; //@line 22494
  HEAP32[$578 >> 2] = $118; //@line 22495
  $579 = $ReallocAsyncCtx5 + 236 | 0; //@line 22496
  HEAP32[$579 >> 2] = $$0107$be; //@line 22497
  $580 = $ReallocAsyncCtx5 + 240 | 0; //@line 22498
  HEAP32[$580 >> 2] = $122; //@line 22499
  $581 = $ReallocAsyncCtx5 + 244 | 0; //@line 22500
  HEAP32[$581 >> 2] = $124; //@line 22501
  sp = STACKTOP; //@line 22502
  return;
 } else if ((label | 0) == 30) {
  $598 = HEAP8[$40 + ($127 & 255) >> 0] | 0; //@line 22509
  $611 = $$0$be + 5 << 24 >> 24; //@line 22522
  $618 = (HEAPU8[$40 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$40 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$40 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 22529
  $621 = HEAP32[(HEAP32[$106 >> 2] | 0) + 48 >> 2] | 0; //@line 22532
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(232) | 0; //@line 22533
  $622 = FUNCTION_TABLE_iiii[$621 & 31]($66, $598, $618) | 0; //@line 22534
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 480; //@line 22537
   $623 = $ReallocAsyncCtx6 + 4 | 0; //@line 22538
   HEAP32[$623 >> 2] = $2; //@line 22539
   $624 = $ReallocAsyncCtx6 + 8 | 0; //@line 22540
   HEAP8[$624 >> 0] = $4; //@line 22541
   $625 = $ReallocAsyncCtx6 + 12 | 0; //@line 22542
   HEAP32[$625 >> 2] = $6; //@line 22543
   $626 = $ReallocAsyncCtx6 + 16 | 0; //@line 22544
   HEAP32[$626 >> 2] = $8; //@line 22545
   $627 = $ReallocAsyncCtx6 + 20 | 0; //@line 22546
   HEAP32[$627 >> 2] = $10; //@line 22547
   $628 = $ReallocAsyncCtx6 + 24 | 0; //@line 22548
   HEAP32[$628 >> 2] = $14; //@line 22549
   $629 = $ReallocAsyncCtx6 + 28 | 0; //@line 22550
   HEAP32[$629 >> 2] = $16; //@line 22551
   $630 = $ReallocAsyncCtx6 + 32 | 0; //@line 22552
   HEAP32[$630 >> 2] = $18; //@line 22553
   $631 = $ReallocAsyncCtx6 + 36 | 0; //@line 22554
   HEAP32[$631 >> 2] = $20; //@line 22555
   $632 = $ReallocAsyncCtx6 + 40 | 0; //@line 22556
   HEAP32[$632 >> 2] = $22; //@line 22557
   $633 = $ReallocAsyncCtx6 + 44 | 0; //@line 22558
   HEAP32[$633 >> 2] = $24; //@line 22559
   $634 = $ReallocAsyncCtx6 + 48 | 0; //@line 22560
   HEAP32[$634 >> 2] = $26; //@line 22561
   $635 = $ReallocAsyncCtx6 + 52 | 0; //@line 22562
   HEAP32[$635 >> 2] = $28; //@line 22563
   $636 = $ReallocAsyncCtx6 + 56 | 0; //@line 22564
   HEAP32[$636 >> 2] = $30; //@line 22565
   $637 = $ReallocAsyncCtx6 + 60 | 0; //@line 22566
   HEAP32[$637 >> 2] = $32; //@line 22567
   $638 = $ReallocAsyncCtx6 + 64 | 0; //@line 22568
   HEAP32[$638 >> 2] = $34; //@line 22569
   $639 = $ReallocAsyncCtx6 + 68 | 0; //@line 22570
   HEAP32[$639 >> 2] = $38; //@line 22571
   $640 = $ReallocAsyncCtx6 + 72 | 0; //@line 22572
   HEAP32[$640 >> 2] = $40; //@line 22573
   $641 = $ReallocAsyncCtx6 + 76 | 0; //@line 22574
   HEAP32[$641 >> 2] = $42; //@line 22575
   $642 = $ReallocAsyncCtx6 + 80 | 0; //@line 22576
   HEAP32[$642 >> 2] = $44; //@line 22577
   $643 = $ReallocAsyncCtx6 + 84 | 0; //@line 22578
   HEAP8[$643 >> 0] = $46; //@line 22579
   $644 = $ReallocAsyncCtx6 + 85 | 0; //@line 22580
   HEAP8[$644 >> 0] = $48; //@line 22581
   $645 = $ReallocAsyncCtx6 + 88 | 0; //@line 22582
   HEAP32[$645 >> 2] = $50; //@line 22583
   $646 = $ReallocAsyncCtx6 + 92 | 0; //@line 22584
   HEAP32[$646 >> 2] = $52; //@line 22585
   $647 = $ReallocAsyncCtx6 + 96 | 0; //@line 22586
   HEAP32[$647 >> 2] = $54; //@line 22587
   $648 = $ReallocAsyncCtx6 + 100 | 0; //@line 22588
   HEAP32[$648 >> 2] = $56; //@line 22589
   $649 = $ReallocAsyncCtx6 + 104 | 0; //@line 22590
   HEAP32[$649 >> 2] = $60; //@line 22591
   $650 = $ReallocAsyncCtx6 + 108 | 0; //@line 22592
   HEAP32[$650 >> 2] = $62; //@line 22593
   $651 = $ReallocAsyncCtx6 + 112 | 0; //@line 22594
   HEAP32[$651 >> 2] = $64; //@line 22595
   $652 = $ReallocAsyncCtx6 + 116 | 0; //@line 22596
   HEAP32[$652 >> 2] = $66; //@line 22597
   $653 = $ReallocAsyncCtx6 + 120 | 0; //@line 22598
   HEAP32[$653 >> 2] = $68; //@line 22599
   $654 = $ReallocAsyncCtx6 + 124 | 0; //@line 22600
   HEAP32[$654 >> 2] = $70; //@line 22601
   $655 = $ReallocAsyncCtx6 + 128 | 0; //@line 22602
   HEAP32[$655 >> 2] = $72; //@line 22603
   $656 = $ReallocAsyncCtx6 + 132 | 0; //@line 22604
   HEAP32[$656 >> 2] = $74; //@line 22605
   $657 = $ReallocAsyncCtx6 + 136 | 0; //@line 22606
   HEAP32[$657 >> 2] = $76; //@line 22607
   $658 = $ReallocAsyncCtx6 + 140 | 0; //@line 22608
   HEAP32[$658 >> 2] = $78; //@line 22609
   $659 = $ReallocAsyncCtx6 + 144 | 0; //@line 22610
   HEAP32[$659 >> 2] = $82; //@line 22611
   $660 = $ReallocAsyncCtx6 + 148 | 0; //@line 22612
   HEAP32[$660 >> 2] = $84; //@line 22613
   $661 = $ReallocAsyncCtx6 + 152 | 0; //@line 22614
   HEAP32[$661 >> 2] = $86; //@line 22615
   $662 = $ReallocAsyncCtx6 + 156 | 0; //@line 22616
   HEAP32[$662 >> 2] = $88; //@line 22617
   $663 = $ReallocAsyncCtx6 + 160 | 0; //@line 22618
   HEAP32[$663 >> 2] = $90; //@line 22619
   $664 = $ReallocAsyncCtx6 + 164 | 0; //@line 22620
   HEAP8[$664 >> 0] = $611; //@line 22621
   $665 = $ReallocAsyncCtx6 + 168 | 0; //@line 22622
   HEAP32[$665 >> 2] = $92; //@line 22623
   $666 = $ReallocAsyncCtx6 + 172 | 0; //@line 22624
   HEAP32[$666 >> 2] = $94; //@line 22625
   $667 = $ReallocAsyncCtx6 + 176 | 0; //@line 22626
   HEAP32[$667 >> 2] = $96; //@line 22627
   $668 = $ReallocAsyncCtx6 + 180 | 0; //@line 22628
   HEAP32[$668 >> 2] = $98; //@line 22629
   $669 = $ReallocAsyncCtx6 + 184 | 0; //@line 22630
   HEAP32[$669 >> 2] = $100; //@line 22631
   $670 = $ReallocAsyncCtx6 + 188 | 0; //@line 22632
   HEAP32[$670 >> 2] = $102; //@line 22633
   $671 = $ReallocAsyncCtx6 + 192 | 0; //@line 22634
   HEAP32[$671 >> 2] = $104; //@line 22635
   $672 = $ReallocAsyncCtx6 + 196 | 0; //@line 22636
   HEAP32[$672 >> 2] = $106; //@line 22637
   $673 = $ReallocAsyncCtx6 + 200 | 0; //@line 22638
   HEAP32[$673 >> 2] = $108; //@line 22639
   $674 = $ReallocAsyncCtx6 + 204 | 0; //@line 22640
   HEAP32[$674 >> 2] = $110; //@line 22641
   $675 = $ReallocAsyncCtx6 + 208 | 0; //@line 22642
   HEAP32[$675 >> 2] = $112; //@line 22643
   $676 = $ReallocAsyncCtx6 + 212 | 0; //@line 22644
   HEAP32[$676 >> 2] = $114; //@line 22645
   $677 = $ReallocAsyncCtx6 + 216 | 0; //@line 22646
   HEAP32[$677 >> 2] = $116; //@line 22647
   $678 = $ReallocAsyncCtx6 + 220 | 0; //@line 22648
   HEAP32[$678 >> 2] = $118; //@line 22649
   $679 = $ReallocAsyncCtx6 + 224 | 0; //@line 22650
   HEAP32[$679 >> 2] = $122; //@line 22651
   $680 = $ReallocAsyncCtx6 + 228 | 0; //@line 22652
   HEAP32[$680 >> 2] = $124; //@line 22653
   sp = STACKTOP; //@line 22654
   return;
  }
  HEAP8[___async_retval >> 0] = $622; //@line 22658
  ___async_unwind = 0; //@line 22659
  HEAP32[$ReallocAsyncCtx6 >> 2] = 480; //@line 22660
  $623 = $ReallocAsyncCtx6 + 4 | 0; //@line 22661
  HEAP32[$623 >> 2] = $2; //@line 22662
  $624 = $ReallocAsyncCtx6 + 8 | 0; //@line 22663
  HEAP8[$624 >> 0] = $4; //@line 22664
  $625 = $ReallocAsyncCtx6 + 12 | 0; //@line 22665
  HEAP32[$625 >> 2] = $6; //@line 22666
  $626 = $ReallocAsyncCtx6 + 16 | 0; //@line 22667
  HEAP32[$626 >> 2] = $8; //@line 22668
  $627 = $ReallocAsyncCtx6 + 20 | 0; //@line 22669
  HEAP32[$627 >> 2] = $10; //@line 22670
  $628 = $ReallocAsyncCtx6 + 24 | 0; //@line 22671
  HEAP32[$628 >> 2] = $14; //@line 22672
  $629 = $ReallocAsyncCtx6 + 28 | 0; //@line 22673
  HEAP32[$629 >> 2] = $16; //@line 22674
  $630 = $ReallocAsyncCtx6 + 32 | 0; //@line 22675
  HEAP32[$630 >> 2] = $18; //@line 22676
  $631 = $ReallocAsyncCtx6 + 36 | 0; //@line 22677
  HEAP32[$631 >> 2] = $20; //@line 22678
  $632 = $ReallocAsyncCtx6 + 40 | 0; //@line 22679
  HEAP32[$632 >> 2] = $22; //@line 22680
  $633 = $ReallocAsyncCtx6 + 44 | 0; //@line 22681
  HEAP32[$633 >> 2] = $24; //@line 22682
  $634 = $ReallocAsyncCtx6 + 48 | 0; //@line 22683
  HEAP32[$634 >> 2] = $26; //@line 22684
  $635 = $ReallocAsyncCtx6 + 52 | 0; //@line 22685
  HEAP32[$635 >> 2] = $28; //@line 22686
  $636 = $ReallocAsyncCtx6 + 56 | 0; //@line 22687
  HEAP32[$636 >> 2] = $30; //@line 22688
  $637 = $ReallocAsyncCtx6 + 60 | 0; //@line 22689
  HEAP32[$637 >> 2] = $32; //@line 22690
  $638 = $ReallocAsyncCtx6 + 64 | 0; //@line 22691
  HEAP32[$638 >> 2] = $34; //@line 22692
  $639 = $ReallocAsyncCtx6 + 68 | 0; //@line 22693
  HEAP32[$639 >> 2] = $38; //@line 22694
  $640 = $ReallocAsyncCtx6 + 72 | 0; //@line 22695
  HEAP32[$640 >> 2] = $40; //@line 22696
  $641 = $ReallocAsyncCtx6 + 76 | 0; //@line 22697
  HEAP32[$641 >> 2] = $42; //@line 22698
  $642 = $ReallocAsyncCtx6 + 80 | 0; //@line 22699
  HEAP32[$642 >> 2] = $44; //@line 22700
  $643 = $ReallocAsyncCtx6 + 84 | 0; //@line 22701
  HEAP8[$643 >> 0] = $46; //@line 22702
  $644 = $ReallocAsyncCtx6 + 85 | 0; //@line 22703
  HEAP8[$644 >> 0] = $48; //@line 22704
  $645 = $ReallocAsyncCtx6 + 88 | 0; //@line 22705
  HEAP32[$645 >> 2] = $50; //@line 22706
  $646 = $ReallocAsyncCtx6 + 92 | 0; //@line 22707
  HEAP32[$646 >> 2] = $52; //@line 22708
  $647 = $ReallocAsyncCtx6 + 96 | 0; //@line 22709
  HEAP32[$647 >> 2] = $54; //@line 22710
  $648 = $ReallocAsyncCtx6 + 100 | 0; //@line 22711
  HEAP32[$648 >> 2] = $56; //@line 22712
  $649 = $ReallocAsyncCtx6 + 104 | 0; //@line 22713
  HEAP32[$649 >> 2] = $60; //@line 22714
  $650 = $ReallocAsyncCtx6 + 108 | 0; //@line 22715
  HEAP32[$650 >> 2] = $62; //@line 22716
  $651 = $ReallocAsyncCtx6 + 112 | 0; //@line 22717
  HEAP32[$651 >> 2] = $64; //@line 22718
  $652 = $ReallocAsyncCtx6 + 116 | 0; //@line 22719
  HEAP32[$652 >> 2] = $66; //@line 22720
  $653 = $ReallocAsyncCtx6 + 120 | 0; //@line 22721
  HEAP32[$653 >> 2] = $68; //@line 22722
  $654 = $ReallocAsyncCtx6 + 124 | 0; //@line 22723
  HEAP32[$654 >> 2] = $70; //@line 22724
  $655 = $ReallocAsyncCtx6 + 128 | 0; //@line 22725
  HEAP32[$655 >> 2] = $72; //@line 22726
  $656 = $ReallocAsyncCtx6 + 132 | 0; //@line 22727
  HEAP32[$656 >> 2] = $74; //@line 22728
  $657 = $ReallocAsyncCtx6 + 136 | 0; //@line 22729
  HEAP32[$657 >> 2] = $76; //@line 22730
  $658 = $ReallocAsyncCtx6 + 140 | 0; //@line 22731
  HEAP32[$658 >> 2] = $78; //@line 22732
  $659 = $ReallocAsyncCtx6 + 144 | 0; //@line 22733
  HEAP32[$659 >> 2] = $82; //@line 22734
  $660 = $ReallocAsyncCtx6 + 148 | 0; //@line 22735
  HEAP32[$660 >> 2] = $84; //@line 22736
  $661 = $ReallocAsyncCtx6 + 152 | 0; //@line 22737
  HEAP32[$661 >> 2] = $86; //@line 22738
  $662 = $ReallocAsyncCtx6 + 156 | 0; //@line 22739
  HEAP32[$662 >> 2] = $88; //@line 22740
  $663 = $ReallocAsyncCtx6 + 160 | 0; //@line 22741
  HEAP32[$663 >> 2] = $90; //@line 22742
  $664 = $ReallocAsyncCtx6 + 164 | 0; //@line 22743
  HEAP8[$664 >> 0] = $611; //@line 22744
  $665 = $ReallocAsyncCtx6 + 168 | 0; //@line 22745
  HEAP32[$665 >> 2] = $92; //@line 22746
  $666 = $ReallocAsyncCtx6 + 172 | 0; //@line 22747
  HEAP32[$666 >> 2] = $94; //@line 22748
  $667 = $ReallocAsyncCtx6 + 176 | 0; //@line 22749
  HEAP32[$667 >> 2] = $96; //@line 22750
  $668 = $ReallocAsyncCtx6 + 180 | 0; //@line 22751
  HEAP32[$668 >> 2] = $98; //@line 22752
  $669 = $ReallocAsyncCtx6 + 184 | 0; //@line 22753
  HEAP32[$669 >> 2] = $100; //@line 22754
  $670 = $ReallocAsyncCtx6 + 188 | 0; //@line 22755
  HEAP32[$670 >> 2] = $102; //@line 22756
  $671 = $ReallocAsyncCtx6 + 192 | 0; //@line 22757
  HEAP32[$671 >> 2] = $104; //@line 22758
  $672 = $ReallocAsyncCtx6 + 196 | 0; //@line 22759
  HEAP32[$672 >> 2] = $106; //@line 22760
  $673 = $ReallocAsyncCtx6 + 200 | 0; //@line 22761
  HEAP32[$673 >> 2] = $108; //@line 22762
  $674 = $ReallocAsyncCtx6 + 204 | 0; //@line 22763
  HEAP32[$674 >> 2] = $110; //@line 22764
  $675 = $ReallocAsyncCtx6 + 208 | 0; //@line 22765
  HEAP32[$675 >> 2] = $112; //@line 22766
  $676 = $ReallocAsyncCtx6 + 212 | 0; //@line 22767
  HEAP32[$676 >> 2] = $114; //@line 22768
  $677 = $ReallocAsyncCtx6 + 216 | 0; //@line 22769
  HEAP32[$677 >> 2] = $116; //@line 22770
  $678 = $ReallocAsyncCtx6 + 220 | 0; //@line 22771
  HEAP32[$678 >> 2] = $118; //@line 22772
  $679 = $ReallocAsyncCtx6 + 224 | 0; //@line 22773
  HEAP32[$679 >> 2] = $122; //@line 22774
  $680 = $ReallocAsyncCtx6 + 228 | 0; //@line 22775
  HEAP32[$680 >> 2] = $124; //@line 22776
  sp = STACKTOP; //@line 22777
  return;
 } else if ((label | 0) == 33) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 22782
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_325($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i116 = 0, $$0107$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $119 = 0, $12 = 0, $130 = 0, $131 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $204 = 0, $207 = 0, $214 = 0, $215 = 0, $22 = 0, $221 = 0, $24 = 0, $240 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $319 = 0, $32 = 0, $320 = 0, $328 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $394 = 0, $395 = 0, $4 = 0, $40 = 0, $409 = 0, $42 = 0, $430 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $498 = 0, $50 = 0, $502 = 0, $506 = 0, $511 = 0, $512 = 0, $516 = 0, $52 = 0, $520 = 0, $522 = 0, $524 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $590 = 0, $595 = 0, $6 = 0, $60 = 0, $608 = 0, $615 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14878
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14880
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 14882
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14884
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14886
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14888
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14890
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14892
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 14894
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 14896
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 14898
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 14900
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 14902
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 14904
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 14906
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 14908
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 14910
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 14912
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 14914
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 14916
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 14918
 $42 = HEAP8[$0 + 84 >> 0] | 0; //@line 14920
 $44 = HEAP8[$0 + 85 >> 0] | 0; //@line 14922
 $46 = HEAP32[$0 + 88 >> 2] | 0; //@line 14924
 $48 = HEAP32[$0 + 92 >> 2] | 0; //@line 14926
 $50 = HEAP32[$0 + 96 >> 2] | 0; //@line 14928
 $52 = HEAP32[$0 + 100 >> 2] | 0; //@line 14930
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 14932
 $56 = HEAP32[$0 + 108 >> 2] | 0; //@line 14934
 $58 = HEAP32[$0 + 112 >> 2] | 0; //@line 14936
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 14938
 $62 = HEAP32[$0 + 120 >> 2] | 0; //@line 14940
 $64 = HEAP32[$0 + 124 >> 2] | 0; //@line 14942
 $66 = HEAP32[$0 + 128 >> 2] | 0; //@line 14944
 $68 = HEAP32[$0 + 132 >> 2] | 0; //@line 14946
 $70 = HEAP32[$0 + 136 >> 2] | 0; //@line 14948
 $72 = HEAP32[$0 + 140 >> 2] | 0; //@line 14950
 $74 = HEAP32[$0 + 144 >> 2] | 0; //@line 14952
 $76 = HEAP32[$0 + 148 >> 2] | 0; //@line 14954
 $78 = HEAP32[$0 + 152 >> 2] | 0; //@line 14956
 $80 = HEAP32[$0 + 156 >> 2] | 0; //@line 14958
 $82 = HEAP32[$0 + 160 >> 2] | 0; //@line 14960
 $84 = HEAP32[$0 + 164 >> 2] | 0; //@line 14962
 $86 = HEAP32[$0 + 168 >> 2] | 0; //@line 14964
 $88 = HEAP32[$0 + 172 >> 2] | 0; //@line 14966
 $90 = HEAP32[$0 + 176 >> 2] | 0; //@line 14968
 $92 = HEAP32[$0 + 180 >> 2] | 0; //@line 14970
 $94 = HEAP32[$0 + 184 >> 2] | 0; //@line 14972
 $96 = HEAP32[$0 + 188 >> 2] | 0; //@line 14974
 $98 = HEAP32[$0 + 192 >> 2] | 0; //@line 14976
 $100 = HEAP32[$0 + 196 >> 2] | 0; //@line 14978
 $102 = HEAP32[$0 + 200 >> 2] | 0; //@line 14980
 $104 = HEAP32[$0 + 204 >> 2] | 0; //@line 14982
 $106 = HEAP32[$0 + 208 >> 2] | 0; //@line 14984
 $108 = HEAP8[$0 + 212 >> 0] | 0; //@line 14986
 $110 = HEAP32[$0 + 216 >> 2] | 0; //@line 14988
 $112 = HEAP32[$0 + 220 >> 2] | 0; //@line 14990
 $114 = HEAP32[$0 + 224 >> 2] | 0; //@line 14992
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 14994
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 14996
 if (($AsyncRetVal & 7) == 7) {
  HEAP8[$40 >> 0] = HEAP8[$80 >> 0] | 0; //@line 15001
  HEAP32[$30 >> 2] = HEAP32[$62 >> 2]; //@line 15003
  HEAP8[$24 >> 0] = HEAP8[$72 >> 0] | 0; //@line 15005
 }
 $319 = HEAP8[$104 >> 0] | 0; //@line 15010
 $320 = $319 & 255; //@line 15011
 if ((128 - (HEAPU8[$116 >> 0] | 0) - $320 | 0) > 1) {
  HEAP8[$38 + 4 + $320 >> 0] = 5; //@line 15017
  HEAP8[$104 >> 0] = $319 + 2 << 24 >> 24; //@line 15019
  HEAP8[($319 + 1 & 255) + ($38 + 4) >> 0] = $AsyncRetVal; //@line 15022
  HEAP8[$14 >> 0] = 1; //@line 15023
  HEAP8[$100 >> 0] = 1; //@line 15024
  $$0$i116 = 0; //@line 15025
 } else {
  $$0$i116 = -1010; //@line 15027
 }
 $$0$be = $108; //@line 15029
 $$0107$be = $$0$i116; //@line 15029
 L8 : while (1) {
  if (($$0$be & 255) >= ($42 & 255)) {
   label = 35; //@line 15033
   break;
  }
  $119 = $$0$be + 1 << 24 >> 24; //@line 15037
  switch (HEAP8[$36 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 15042
    break L8;
    break;
   }
  case 5:
   {
    label = 9; //@line 15047
    break L8;
    break;
   }
  case 7:
   {
    label = 23; //@line 15052
    break L8;
    break;
   }
  case 9:
   {
    label = 29; //@line 15057
    break L8;
    break;
   }
  case 10:
   {
    label = 32; //@line 15062
    break L8;
    break;
   }
  case 2:
   {
    HEAP32[$50 >> 2] = 0; //@line 15067
    HEAP8[$22 >> 0] = HEAP8[$36 + ($119 & 255) >> 0] | 0; //@line 15072
    HEAP8[$28 >> 0] = HEAP8[$36 + ($$0$be + 2 & 255) >> 0] | 0; //@line 15077
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 15078
    continue L8;
    break;
   }
  case 4:
   {
    $204 = $$0$be + 2 << 24 >> 24; //@line 15083
    $207 = HEAP8[$36 + ($119 & 255) >> 0] | 0; //@line 15086
    HEAP8[$96 >> 0] = $207; //@line 15087
    HEAP16[$88 >> 1] = 1 << ($207 & 255); //@line 15091
    $214 = HEAP8[$104 >> 0] | 0; //@line 15095
    $215 = $214 & 255; //@line 15096
    if ((128 - (HEAPU8[$116 >> 0] | 0) | 0) <= ($215 | 0)) {
     $$0$be = $204; //@line 15099
     $$0107$be = -1010; //@line 15099
     continue L8;
    }
    HEAP8[$104 >> 0] = $214 + 1 << 24 >> 24; //@line 15104
    HEAP8[$38 + 4 + $215 >> 0] = 4; //@line 15105
    HEAP8[$100 >> 0] = 1; //@line 15106
    $$0$be = $204; //@line 15107
    $$0107$be = 0; //@line 15107
    continue L8;
    break;
   }
  case 6:
   {
    $328 = HEAP32[$6 >> 2] | 0; //@line 15112
    if ($328 | 0) {
     label = 18; //@line 15115
     break L8;
    }
    $394 = HEAP8[$104 >> 0] | 0; //@line 15121
    $395 = $394 & 255; //@line 15122
    if ((128 - (HEAPU8[$116 >> 0] | 0) - $395 | 0) <= 2) {
     $$0$be = $119; //@line 15126
     $$0107$be = -1010; //@line 15126
     continue L8;
    }
    HEAP8[$38 + 4 + $395 >> 0] = 6; //@line 15131
    HEAP8[($394 + 1 & 255) + ($38 + 4) >> 0] = -1; //@line 15135
    HEAP8[$104 >> 0] = $394 + 3 << 24 >> 24; //@line 15137
    HEAP8[($394 + 2 & 255) + ($38 + 4) >> 0] = $4; //@line 15140
    HEAP8[$100 >> 0] = 1; //@line 15141
    $$0$be = $119; //@line 15142
    $$0107$be = 0; //@line 15142
    continue L8;
    break;
   }
  case 8:
   {
    $498 = $$0$be + 2 << 24 >> 24; //@line 15147
    $502 = HEAP8[$36 + ($119 & 255) >> 0] & 15; //@line 15151
    $506 = ($502 + ($502 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 15156
    HEAP32[$64 >> 2] = $506; //@line 15157
    HEAP32[$74 >> 2] = $506 + 1e3; //@line 15159
    $511 = HEAP8[$104 >> 0] | 0; //@line 15163
    $512 = $511 & 255; //@line 15164
    if ((128 - (HEAPU8[$116 >> 0] | 0) | 0) <= ($512 | 0)) {
     $$0$be = $498; //@line 15167
     $$0107$be = -1010; //@line 15167
     continue L8;
    }
    HEAP8[$104 >> 0] = $511 + 1 << 24 >> 24; //@line 15172
    HEAP8[$38 + 4 + $512 >> 0] = 8; //@line 15173
    HEAP8[$14 >> 0] = 1; //@line 15174
    HEAP8[$100 >> 0] = 1; //@line 15175
    $$0$be = $498; //@line 15176
    $$0107$be = 0; //@line 15176
    continue L8;
    break;
   }
  default:
   {
    $$0$be = $119; //@line 15181
    $$0107$be = -1013; //@line 15181
    continue L8;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$94 >> 0] = 0; //@line 15187
  HEAP8[$112 >> 0] = 0; //@line 15188
  HEAP8[$114 >> 0] = 0; //@line 15189
  HEAP8[$110 >> 0] = 0; //@line 15190
  $130 = $119 & 255; //@line 15191
  $131 = $130 + -1 | 0; //@line 15192
  HEAP32[$12 >> 2] = $36 + $131; //@line 15194
  HEAP8[$106 >> 0] = $52 - $131; //@line 15197
  HEAP8[$76 >> 0] = HEAP8[$82 >> 0] | 0; //@line 15199
  HEAP8[$66 >> 0] = HEAP8[$70 >> 0] | 0; //@line 15201
  HEAP8[$46 >> 0] = HEAP8[$58 >> 0] | 0; //@line 15203
  HEAP8[$18 >> 0] = HEAP8[$32 >> 0] | 0; //@line 15205
  HEAP8[$2 >> 0] = HEAP8[$10 >> 0] | 0; //@line 15207
  $142 = HEAP32[(HEAP32[$84 >> 2] | 0) + 36 >> 2] | 0; //@line 15210
  $ReallocAsyncCtx = _emscripten_realloc_async_context(236) | 0; //@line 15211
  $143 = FUNCTION_TABLE_iiiiiii[$142 & 3]($60, $102, $94, $112, $114, $110) | 0; //@line 15212
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 475; //@line 15215
   $144 = $ReallocAsyncCtx + 4 | 0; //@line 15216
   HEAP32[$144 >> 2] = $2; //@line 15217
   $145 = $ReallocAsyncCtx + 8 | 0; //@line 15218
   HEAP8[$145 >> 0] = $4; //@line 15219
   $146 = $ReallocAsyncCtx + 12 | 0; //@line 15220
   HEAP32[$146 >> 2] = $6; //@line 15221
   $147 = $ReallocAsyncCtx + 16 | 0; //@line 15222
   HEAP32[$147 >> 2] = $8; //@line 15223
   $148 = $ReallocAsyncCtx + 20 | 0; //@line 15224
   HEAP32[$148 >> 2] = $10; //@line 15225
   $149 = $ReallocAsyncCtx + 24 | 0; //@line 15226
   HEAP32[$149 >> 2] = $12; //@line 15227
   $150 = $ReallocAsyncCtx + 28 | 0; //@line 15228
   HEAP32[$150 >> 2] = $14; //@line 15229
   $151 = $ReallocAsyncCtx + 32 | 0; //@line 15230
   HEAP32[$151 >> 2] = $16; //@line 15231
   $152 = $ReallocAsyncCtx + 36 | 0; //@line 15232
   HEAP32[$152 >> 2] = $18; //@line 15233
   $153 = $ReallocAsyncCtx + 40 | 0; //@line 15234
   HEAP32[$153 >> 2] = $20; //@line 15235
   $154 = $ReallocAsyncCtx + 44 | 0; //@line 15236
   HEAP32[$154 >> 2] = $22; //@line 15237
   $155 = $ReallocAsyncCtx + 48 | 0; //@line 15238
   HEAP32[$155 >> 2] = $24; //@line 15239
   $156 = $ReallocAsyncCtx + 52 | 0; //@line 15240
   HEAP32[$156 >> 2] = $26; //@line 15241
   $157 = $ReallocAsyncCtx + 56 | 0; //@line 15242
   HEAP32[$157 >> 2] = $28; //@line 15243
   $158 = $ReallocAsyncCtx + 60 | 0; //@line 15244
   HEAP32[$158 >> 2] = $30; //@line 15245
   $159 = $ReallocAsyncCtx + 64 | 0; //@line 15246
   HEAP32[$159 >> 2] = $32; //@line 15247
   $160 = $ReallocAsyncCtx + 68 | 0; //@line 15248
   HEAP32[$160 >> 2] = $34; //@line 15249
   $161 = $ReallocAsyncCtx + 72 | 0; //@line 15250
   HEAP32[$161 >> 2] = $36; //@line 15251
   $162 = $ReallocAsyncCtx + 76 | 0; //@line 15252
   HEAP32[$162 >> 2] = $38; //@line 15253
   $163 = $ReallocAsyncCtx + 80 | 0; //@line 15254
   HEAP32[$163 >> 2] = $40; //@line 15255
   $164 = $ReallocAsyncCtx + 84 | 0; //@line 15256
   HEAP8[$164 >> 0] = $42; //@line 15257
   $165 = $ReallocAsyncCtx + 85 | 0; //@line 15258
   HEAP8[$165 >> 0] = $44; //@line 15259
   $166 = $ReallocAsyncCtx + 88 | 0; //@line 15260
   HEAP32[$166 >> 2] = $46; //@line 15261
   $167 = $ReallocAsyncCtx + 92 | 0; //@line 15262
   HEAP32[$167 >> 2] = $48; //@line 15263
   $168 = $ReallocAsyncCtx + 96 | 0; //@line 15264
   HEAP32[$168 >> 2] = $50; //@line 15265
   $169 = $ReallocAsyncCtx + 100 | 0; //@line 15266
   HEAP32[$169 >> 2] = $52; //@line 15267
   $170 = $ReallocAsyncCtx + 104 | 0; //@line 15268
   HEAP32[$170 >> 2] = $54; //@line 15269
   $171 = $ReallocAsyncCtx + 108 | 0; //@line 15270
   HEAP32[$171 >> 2] = $56; //@line 15271
   $172 = $ReallocAsyncCtx + 112 | 0; //@line 15272
   HEAP32[$172 >> 2] = $58; //@line 15273
   $173 = $ReallocAsyncCtx + 116 | 0; //@line 15274
   HEAP32[$173 >> 2] = $60; //@line 15275
   $174 = $ReallocAsyncCtx + 120 | 0; //@line 15276
   HEAP32[$174 >> 2] = $62; //@line 15277
   $175 = $ReallocAsyncCtx + 124 | 0; //@line 15278
   HEAP32[$175 >> 2] = $64; //@line 15279
   $176 = $ReallocAsyncCtx + 128 | 0; //@line 15280
   HEAP32[$176 >> 2] = $66; //@line 15281
   $177 = $ReallocAsyncCtx + 132 | 0; //@line 15282
   HEAP32[$177 >> 2] = $68; //@line 15283
   $178 = $ReallocAsyncCtx + 136 | 0; //@line 15284
   HEAP32[$178 >> 2] = $70; //@line 15285
   $179 = $ReallocAsyncCtx + 140 | 0; //@line 15286
   HEAP32[$179 >> 2] = $72; //@line 15287
   $180 = $ReallocAsyncCtx + 144 | 0; //@line 15288
   HEAP32[$180 >> 2] = $74; //@line 15289
   $181 = $ReallocAsyncCtx + 148 | 0; //@line 15290
   HEAP32[$181 >> 2] = $76; //@line 15291
   $182 = $ReallocAsyncCtx + 152 | 0; //@line 15292
   HEAP32[$182 >> 2] = $78; //@line 15293
   $183 = $ReallocAsyncCtx + 156 | 0; //@line 15294
   HEAP32[$183 >> 2] = $80; //@line 15295
   $184 = $ReallocAsyncCtx + 160 | 0; //@line 15296
   HEAP32[$184 >> 2] = $82; //@line 15297
   $185 = $ReallocAsyncCtx + 164 | 0; //@line 15298
   HEAP32[$185 >> 2] = $84; //@line 15299
   $186 = $ReallocAsyncCtx + 168 | 0; //@line 15300
   HEAP32[$186 >> 2] = $86; //@line 15301
   $187 = $ReallocAsyncCtx + 172 | 0; //@line 15302
   HEAP32[$187 >> 2] = $88; //@line 15303
   $188 = $ReallocAsyncCtx + 176 | 0; //@line 15304
   HEAP32[$188 >> 2] = $90; //@line 15305
   $189 = $ReallocAsyncCtx + 180 | 0; //@line 15306
   HEAP32[$189 >> 2] = $92; //@line 15307
   $190 = $ReallocAsyncCtx + 184 | 0; //@line 15308
   HEAP32[$190 >> 2] = $94; //@line 15309
   $191 = $ReallocAsyncCtx + 188 | 0; //@line 15310
   HEAP32[$191 >> 2] = $96; //@line 15311
   $192 = $ReallocAsyncCtx + 192 | 0; //@line 15312
   HEAP32[$192 >> 2] = $98; //@line 15313
   $193 = $ReallocAsyncCtx + 196 | 0; //@line 15314
   HEAP32[$193 >> 2] = $100; //@line 15315
   $194 = $ReallocAsyncCtx + 200 | 0; //@line 15316
   HEAP32[$194 >> 2] = $102; //@line 15317
   $195 = $ReallocAsyncCtx + 204 | 0; //@line 15318
   HEAP32[$195 >> 2] = $104; //@line 15319
   $196 = $ReallocAsyncCtx + 208 | 0; //@line 15320
   HEAP32[$196 >> 2] = $106; //@line 15321
   $197 = $ReallocAsyncCtx + 212 | 0; //@line 15322
   HEAP32[$197 >> 2] = $110; //@line 15323
   $198 = $ReallocAsyncCtx + 216 | 0; //@line 15324
   HEAP32[$198 >> 2] = $112; //@line 15325
   $199 = $ReallocAsyncCtx + 220 | 0; //@line 15326
   HEAP32[$199 >> 2] = $130; //@line 15327
   $200 = $ReallocAsyncCtx + 224 | 0; //@line 15328
   HEAP32[$200 >> 2] = $$0107$be; //@line 15329
   $201 = $ReallocAsyncCtx + 228 | 0; //@line 15330
   HEAP32[$201 >> 2] = $114; //@line 15331
   $202 = $ReallocAsyncCtx + 232 | 0; //@line 15332
   HEAP32[$202 >> 2] = $116; //@line 15333
   sp = STACKTOP; //@line 15334
   return;
  }
  HEAP8[___async_retval >> 0] = $143; //@line 15338
  ___async_unwind = 0; //@line 15339
  HEAP32[$ReallocAsyncCtx >> 2] = 475; //@line 15340
  $144 = $ReallocAsyncCtx + 4 | 0; //@line 15341
  HEAP32[$144 >> 2] = $2; //@line 15342
  $145 = $ReallocAsyncCtx + 8 | 0; //@line 15343
  HEAP8[$145 >> 0] = $4; //@line 15344
  $146 = $ReallocAsyncCtx + 12 | 0; //@line 15345
  HEAP32[$146 >> 2] = $6; //@line 15346
  $147 = $ReallocAsyncCtx + 16 | 0; //@line 15347
  HEAP32[$147 >> 2] = $8; //@line 15348
  $148 = $ReallocAsyncCtx + 20 | 0; //@line 15349
  HEAP32[$148 >> 2] = $10; //@line 15350
  $149 = $ReallocAsyncCtx + 24 | 0; //@line 15351
  HEAP32[$149 >> 2] = $12; //@line 15352
  $150 = $ReallocAsyncCtx + 28 | 0; //@line 15353
  HEAP32[$150 >> 2] = $14; //@line 15354
  $151 = $ReallocAsyncCtx + 32 | 0; //@line 15355
  HEAP32[$151 >> 2] = $16; //@line 15356
  $152 = $ReallocAsyncCtx + 36 | 0; //@line 15357
  HEAP32[$152 >> 2] = $18; //@line 15358
  $153 = $ReallocAsyncCtx + 40 | 0; //@line 15359
  HEAP32[$153 >> 2] = $20; //@line 15360
  $154 = $ReallocAsyncCtx + 44 | 0; //@line 15361
  HEAP32[$154 >> 2] = $22; //@line 15362
  $155 = $ReallocAsyncCtx + 48 | 0; //@line 15363
  HEAP32[$155 >> 2] = $24; //@line 15364
  $156 = $ReallocAsyncCtx + 52 | 0; //@line 15365
  HEAP32[$156 >> 2] = $26; //@line 15366
  $157 = $ReallocAsyncCtx + 56 | 0; //@line 15367
  HEAP32[$157 >> 2] = $28; //@line 15368
  $158 = $ReallocAsyncCtx + 60 | 0; //@line 15369
  HEAP32[$158 >> 2] = $30; //@line 15370
  $159 = $ReallocAsyncCtx + 64 | 0; //@line 15371
  HEAP32[$159 >> 2] = $32; //@line 15372
  $160 = $ReallocAsyncCtx + 68 | 0; //@line 15373
  HEAP32[$160 >> 2] = $34; //@line 15374
  $161 = $ReallocAsyncCtx + 72 | 0; //@line 15375
  HEAP32[$161 >> 2] = $36; //@line 15376
  $162 = $ReallocAsyncCtx + 76 | 0; //@line 15377
  HEAP32[$162 >> 2] = $38; //@line 15378
  $163 = $ReallocAsyncCtx + 80 | 0; //@line 15379
  HEAP32[$163 >> 2] = $40; //@line 15380
  $164 = $ReallocAsyncCtx + 84 | 0; //@line 15381
  HEAP8[$164 >> 0] = $42; //@line 15382
  $165 = $ReallocAsyncCtx + 85 | 0; //@line 15383
  HEAP8[$165 >> 0] = $44; //@line 15384
  $166 = $ReallocAsyncCtx + 88 | 0; //@line 15385
  HEAP32[$166 >> 2] = $46; //@line 15386
  $167 = $ReallocAsyncCtx + 92 | 0; //@line 15387
  HEAP32[$167 >> 2] = $48; //@line 15388
  $168 = $ReallocAsyncCtx + 96 | 0; //@line 15389
  HEAP32[$168 >> 2] = $50; //@line 15390
  $169 = $ReallocAsyncCtx + 100 | 0; //@line 15391
  HEAP32[$169 >> 2] = $52; //@line 15392
  $170 = $ReallocAsyncCtx + 104 | 0; //@line 15393
  HEAP32[$170 >> 2] = $54; //@line 15394
  $171 = $ReallocAsyncCtx + 108 | 0; //@line 15395
  HEAP32[$171 >> 2] = $56; //@line 15396
  $172 = $ReallocAsyncCtx + 112 | 0; //@line 15397
  HEAP32[$172 >> 2] = $58; //@line 15398
  $173 = $ReallocAsyncCtx + 116 | 0; //@line 15399
  HEAP32[$173 >> 2] = $60; //@line 15400
  $174 = $ReallocAsyncCtx + 120 | 0; //@line 15401
  HEAP32[$174 >> 2] = $62; //@line 15402
  $175 = $ReallocAsyncCtx + 124 | 0; //@line 15403
  HEAP32[$175 >> 2] = $64; //@line 15404
  $176 = $ReallocAsyncCtx + 128 | 0; //@line 15405
  HEAP32[$176 >> 2] = $66; //@line 15406
  $177 = $ReallocAsyncCtx + 132 | 0; //@line 15407
  HEAP32[$177 >> 2] = $68; //@line 15408
  $178 = $ReallocAsyncCtx + 136 | 0; //@line 15409
  HEAP32[$178 >> 2] = $70; //@line 15410
  $179 = $ReallocAsyncCtx + 140 | 0; //@line 15411
  HEAP32[$179 >> 2] = $72; //@line 15412
  $180 = $ReallocAsyncCtx + 144 | 0; //@line 15413
  HEAP32[$180 >> 2] = $74; //@line 15414
  $181 = $ReallocAsyncCtx + 148 | 0; //@line 15415
  HEAP32[$181 >> 2] = $76; //@line 15416
  $182 = $ReallocAsyncCtx + 152 | 0; //@line 15417
  HEAP32[$182 >> 2] = $78; //@line 15418
  $183 = $ReallocAsyncCtx + 156 | 0; //@line 15419
  HEAP32[$183 >> 2] = $80; //@line 15420
  $184 = $ReallocAsyncCtx + 160 | 0; //@line 15421
  HEAP32[$184 >> 2] = $82; //@line 15422
  $185 = $ReallocAsyncCtx + 164 | 0; //@line 15423
  HEAP32[$185 >> 2] = $84; //@line 15424
  $186 = $ReallocAsyncCtx + 168 | 0; //@line 15425
  HEAP32[$186 >> 2] = $86; //@line 15426
  $187 = $ReallocAsyncCtx + 172 | 0; //@line 15427
  HEAP32[$187 >> 2] = $88; //@line 15428
  $188 = $ReallocAsyncCtx + 176 | 0; //@line 15429
  HEAP32[$188 >> 2] = $90; //@line 15430
  $189 = $ReallocAsyncCtx + 180 | 0; //@line 15431
  HEAP32[$189 >> 2] = $92; //@line 15432
  $190 = $ReallocAsyncCtx + 184 | 0; //@line 15433
  HEAP32[$190 >> 2] = $94; //@line 15434
  $191 = $ReallocAsyncCtx + 188 | 0; //@line 15435
  HEAP32[$191 >> 2] = $96; //@line 15436
  $192 = $ReallocAsyncCtx + 192 | 0; //@line 15437
  HEAP32[$192 >> 2] = $98; //@line 15438
  $193 = $ReallocAsyncCtx + 196 | 0; //@line 15439
  HEAP32[$193 >> 2] = $100; //@line 15440
  $194 = $ReallocAsyncCtx + 200 | 0; //@line 15441
  HEAP32[$194 >> 2] = $102; //@line 15442
  $195 = $ReallocAsyncCtx + 204 | 0; //@line 15443
  HEAP32[$195 >> 2] = $104; //@line 15444
  $196 = $ReallocAsyncCtx + 208 | 0; //@line 15445
  HEAP32[$196 >> 2] = $106; //@line 15446
  $197 = $ReallocAsyncCtx + 212 | 0; //@line 15447
  HEAP32[$197 >> 2] = $110; //@line 15448
  $198 = $ReallocAsyncCtx + 216 | 0; //@line 15449
  HEAP32[$198 >> 2] = $112; //@line 15450
  $199 = $ReallocAsyncCtx + 220 | 0; //@line 15451
  HEAP32[$199 >> 2] = $130; //@line 15452
  $200 = $ReallocAsyncCtx + 224 | 0; //@line 15453
  HEAP32[$200 >> 2] = $$0107$be; //@line 15454
  $201 = $ReallocAsyncCtx + 228 | 0; //@line 15455
  HEAP32[$201 >> 2] = $114; //@line 15456
  $202 = $ReallocAsyncCtx + 232 | 0; //@line 15457
  HEAP32[$202 >> 2] = $116; //@line 15458
  sp = STACKTOP; //@line 15459
  return;
 } else if ((label | 0) == 9) {
  $221 = HEAP8[$36 + ($119 & 255) >> 0] | 0; //@line 15465
  HEAP8[$72 >> 0] = ($221 & 255) >>> 4 & 7; //@line 15470
  HEAP8[$80 >> 0] = $221 & 15; //@line 15472
  $240 = $$0$be + 5 << 24 >> 24; //@line 15486
  HEAP32[$62 >> 2] = (HEAPU8[$36 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$36 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$36 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 15494
  $250 = HEAP32[(HEAP32[$54 >> 2] | 0) + 40 >> 2] | 0; //@line 15497
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(232) | 0; //@line 15498
  $251 = FUNCTION_TABLE_iii[$250 & 15]($60, $68) | 0; //@line 15499
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 476; //@line 15502
   $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 15503
   HEAP32[$252 >> 2] = $2; //@line 15504
   $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 15505
   HEAP8[$253 >> 0] = $4; //@line 15506
   $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 15507
   HEAP32[$254 >> 2] = $6; //@line 15508
   $255 = $ReallocAsyncCtx2 + 16 | 0; //@line 15509
   HEAP32[$255 >> 2] = $8; //@line 15510
   $256 = $ReallocAsyncCtx2 + 20 | 0; //@line 15511
   HEAP32[$256 >> 2] = $10; //@line 15512
   $257 = $ReallocAsyncCtx2 + 24 | 0; //@line 15513
   HEAP32[$257 >> 2] = $12; //@line 15514
   $258 = $ReallocAsyncCtx2 + 28 | 0; //@line 15515
   HEAP32[$258 >> 2] = $14; //@line 15516
   $259 = $ReallocAsyncCtx2 + 32 | 0; //@line 15517
   HEAP32[$259 >> 2] = $16; //@line 15518
   $260 = $ReallocAsyncCtx2 + 36 | 0; //@line 15519
   HEAP32[$260 >> 2] = $18; //@line 15520
   $261 = $ReallocAsyncCtx2 + 40 | 0; //@line 15521
   HEAP32[$261 >> 2] = $20; //@line 15522
   $262 = $ReallocAsyncCtx2 + 44 | 0; //@line 15523
   HEAP32[$262 >> 2] = $22; //@line 15524
   $263 = $ReallocAsyncCtx2 + 48 | 0; //@line 15525
   HEAP32[$263 >> 2] = $24; //@line 15526
   $264 = $ReallocAsyncCtx2 + 52 | 0; //@line 15527
   HEAP32[$264 >> 2] = $26; //@line 15528
   $265 = $ReallocAsyncCtx2 + 56 | 0; //@line 15529
   HEAP32[$265 >> 2] = $28; //@line 15530
   $266 = $ReallocAsyncCtx2 + 60 | 0; //@line 15531
   HEAP32[$266 >> 2] = $30; //@line 15532
   $267 = $ReallocAsyncCtx2 + 64 | 0; //@line 15533
   HEAP32[$267 >> 2] = $32; //@line 15534
   $268 = $ReallocAsyncCtx2 + 68 | 0; //@line 15535
   HEAP32[$268 >> 2] = $34; //@line 15536
   $269 = $ReallocAsyncCtx2 + 72 | 0; //@line 15537
   HEAP32[$269 >> 2] = $36; //@line 15538
   $270 = $ReallocAsyncCtx2 + 76 | 0; //@line 15539
   HEAP32[$270 >> 2] = $38; //@line 15540
   $271 = $ReallocAsyncCtx2 + 80 | 0; //@line 15541
   HEAP32[$271 >> 2] = $40; //@line 15542
   $272 = $ReallocAsyncCtx2 + 84 | 0; //@line 15543
   HEAP8[$272 >> 0] = $42; //@line 15544
   $273 = $ReallocAsyncCtx2 + 85 | 0; //@line 15545
   HEAP8[$273 >> 0] = $44; //@line 15546
   $274 = $ReallocAsyncCtx2 + 88 | 0; //@line 15547
   HEAP32[$274 >> 2] = $46; //@line 15548
   $275 = $ReallocAsyncCtx2 + 92 | 0; //@line 15549
   HEAP32[$275 >> 2] = $48; //@line 15550
   $276 = $ReallocAsyncCtx2 + 96 | 0; //@line 15551
   HEAP32[$276 >> 2] = $50; //@line 15552
   $277 = $ReallocAsyncCtx2 + 100 | 0; //@line 15553
   HEAP32[$277 >> 2] = $52; //@line 15554
   $278 = $ReallocAsyncCtx2 + 104 | 0; //@line 15555
   HEAP32[$278 >> 2] = $54; //@line 15556
   $279 = $ReallocAsyncCtx2 + 108 | 0; //@line 15557
   HEAP32[$279 >> 2] = $56; //@line 15558
   $280 = $ReallocAsyncCtx2 + 112 | 0; //@line 15559
   HEAP32[$280 >> 2] = $58; //@line 15560
   $281 = $ReallocAsyncCtx2 + 116 | 0; //@line 15561
   HEAP32[$281 >> 2] = $60; //@line 15562
   $282 = $ReallocAsyncCtx2 + 120 | 0; //@line 15563
   HEAP32[$282 >> 2] = $62; //@line 15564
   $283 = $ReallocAsyncCtx2 + 124 | 0; //@line 15565
   HEAP32[$283 >> 2] = $64; //@line 15566
   $284 = $ReallocAsyncCtx2 + 128 | 0; //@line 15567
   HEAP32[$284 >> 2] = $66; //@line 15568
   $285 = $ReallocAsyncCtx2 + 132 | 0; //@line 15569
   HEAP32[$285 >> 2] = $68; //@line 15570
   $286 = $ReallocAsyncCtx2 + 136 | 0; //@line 15571
   HEAP32[$286 >> 2] = $70; //@line 15572
   $287 = $ReallocAsyncCtx2 + 140 | 0; //@line 15573
   HEAP32[$287 >> 2] = $72; //@line 15574
   $288 = $ReallocAsyncCtx2 + 144 | 0; //@line 15575
   HEAP32[$288 >> 2] = $74; //@line 15576
   $289 = $ReallocAsyncCtx2 + 148 | 0; //@line 15577
   HEAP32[$289 >> 2] = $76; //@line 15578
   $290 = $ReallocAsyncCtx2 + 152 | 0; //@line 15579
   HEAP32[$290 >> 2] = $78; //@line 15580
   $291 = $ReallocAsyncCtx2 + 156 | 0; //@line 15581
   HEAP32[$291 >> 2] = $80; //@line 15582
   $292 = $ReallocAsyncCtx2 + 160 | 0; //@line 15583
   HEAP32[$292 >> 2] = $82; //@line 15584
   $293 = $ReallocAsyncCtx2 + 164 | 0; //@line 15585
   HEAP32[$293 >> 2] = $84; //@line 15586
   $294 = $ReallocAsyncCtx2 + 168 | 0; //@line 15587
   HEAP32[$294 >> 2] = $86; //@line 15588
   $295 = $ReallocAsyncCtx2 + 172 | 0; //@line 15589
   HEAP32[$295 >> 2] = $88; //@line 15590
   $296 = $ReallocAsyncCtx2 + 176 | 0; //@line 15591
   HEAP32[$296 >> 2] = $90; //@line 15592
   $297 = $ReallocAsyncCtx2 + 180 | 0; //@line 15593
   HEAP32[$297 >> 2] = $92; //@line 15594
   $298 = $ReallocAsyncCtx2 + 184 | 0; //@line 15595
   HEAP32[$298 >> 2] = $94; //@line 15596
   $299 = $ReallocAsyncCtx2 + 188 | 0; //@line 15597
   HEAP32[$299 >> 2] = $96; //@line 15598
   $300 = $ReallocAsyncCtx2 + 192 | 0; //@line 15599
   HEAP32[$300 >> 2] = $98; //@line 15600
   $301 = $ReallocAsyncCtx2 + 196 | 0; //@line 15601
   HEAP32[$301 >> 2] = $100; //@line 15602
   $302 = $ReallocAsyncCtx2 + 200 | 0; //@line 15603
   HEAP32[$302 >> 2] = $102; //@line 15604
   $303 = $ReallocAsyncCtx2 + 204 | 0; //@line 15605
   HEAP32[$303 >> 2] = $104; //@line 15606
   $304 = $ReallocAsyncCtx2 + 208 | 0; //@line 15607
   HEAP32[$304 >> 2] = $106; //@line 15608
   $305 = $ReallocAsyncCtx2 + 212 | 0; //@line 15609
   HEAP8[$305 >> 0] = $240; //@line 15610
   $306 = $ReallocAsyncCtx2 + 216 | 0; //@line 15611
   HEAP32[$306 >> 2] = $110; //@line 15612
   $307 = $ReallocAsyncCtx2 + 220 | 0; //@line 15613
   HEAP32[$307 >> 2] = $112; //@line 15614
   $308 = $ReallocAsyncCtx2 + 224 | 0; //@line 15615
   HEAP32[$308 >> 2] = $114; //@line 15616
   $309 = $ReallocAsyncCtx2 + 228 | 0; //@line 15617
   HEAP32[$309 >> 2] = $116; //@line 15618
   sp = STACKTOP; //@line 15619
   return;
  }
  HEAP8[___async_retval >> 0] = $251; //@line 15623
  ___async_unwind = 0; //@line 15624
  HEAP32[$ReallocAsyncCtx2 >> 2] = 476; //@line 15625
  $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 15626
  HEAP32[$252 >> 2] = $2; //@line 15627
  $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 15628
  HEAP8[$253 >> 0] = $4; //@line 15629
  $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 15630
  HEAP32[$254 >> 2] = $6; //@line 15631
  $255 = $ReallocAsyncCtx2 + 16 | 0; //@line 15632
  HEAP32[$255 >> 2] = $8; //@line 15633
  $256 = $ReallocAsyncCtx2 + 20 | 0; //@line 15634
  HEAP32[$256 >> 2] = $10; //@line 15635
  $257 = $ReallocAsyncCtx2 + 24 | 0; //@line 15636
  HEAP32[$257 >> 2] = $12; //@line 15637
  $258 = $ReallocAsyncCtx2 + 28 | 0; //@line 15638
  HEAP32[$258 >> 2] = $14; //@line 15639
  $259 = $ReallocAsyncCtx2 + 32 | 0; //@line 15640
  HEAP32[$259 >> 2] = $16; //@line 15641
  $260 = $ReallocAsyncCtx2 + 36 | 0; //@line 15642
  HEAP32[$260 >> 2] = $18; //@line 15643
  $261 = $ReallocAsyncCtx2 + 40 | 0; //@line 15644
  HEAP32[$261 >> 2] = $20; //@line 15645
  $262 = $ReallocAsyncCtx2 + 44 | 0; //@line 15646
  HEAP32[$262 >> 2] = $22; //@line 15647
  $263 = $ReallocAsyncCtx2 + 48 | 0; //@line 15648
  HEAP32[$263 >> 2] = $24; //@line 15649
  $264 = $ReallocAsyncCtx2 + 52 | 0; //@line 15650
  HEAP32[$264 >> 2] = $26; //@line 15651
  $265 = $ReallocAsyncCtx2 + 56 | 0; //@line 15652
  HEAP32[$265 >> 2] = $28; //@line 15653
  $266 = $ReallocAsyncCtx2 + 60 | 0; //@line 15654
  HEAP32[$266 >> 2] = $30; //@line 15655
  $267 = $ReallocAsyncCtx2 + 64 | 0; //@line 15656
  HEAP32[$267 >> 2] = $32; //@line 15657
  $268 = $ReallocAsyncCtx2 + 68 | 0; //@line 15658
  HEAP32[$268 >> 2] = $34; //@line 15659
  $269 = $ReallocAsyncCtx2 + 72 | 0; //@line 15660
  HEAP32[$269 >> 2] = $36; //@line 15661
  $270 = $ReallocAsyncCtx2 + 76 | 0; //@line 15662
  HEAP32[$270 >> 2] = $38; //@line 15663
  $271 = $ReallocAsyncCtx2 + 80 | 0; //@line 15664
  HEAP32[$271 >> 2] = $40; //@line 15665
  $272 = $ReallocAsyncCtx2 + 84 | 0; //@line 15666
  HEAP8[$272 >> 0] = $42; //@line 15667
  $273 = $ReallocAsyncCtx2 + 85 | 0; //@line 15668
  HEAP8[$273 >> 0] = $44; //@line 15669
  $274 = $ReallocAsyncCtx2 + 88 | 0; //@line 15670
  HEAP32[$274 >> 2] = $46; //@line 15671
  $275 = $ReallocAsyncCtx2 + 92 | 0; //@line 15672
  HEAP32[$275 >> 2] = $48; //@line 15673
  $276 = $ReallocAsyncCtx2 + 96 | 0; //@line 15674
  HEAP32[$276 >> 2] = $50; //@line 15675
  $277 = $ReallocAsyncCtx2 + 100 | 0; //@line 15676
  HEAP32[$277 >> 2] = $52; //@line 15677
  $278 = $ReallocAsyncCtx2 + 104 | 0; //@line 15678
  HEAP32[$278 >> 2] = $54; //@line 15679
  $279 = $ReallocAsyncCtx2 + 108 | 0; //@line 15680
  HEAP32[$279 >> 2] = $56; //@line 15681
  $280 = $ReallocAsyncCtx2 + 112 | 0; //@line 15682
  HEAP32[$280 >> 2] = $58; //@line 15683
  $281 = $ReallocAsyncCtx2 + 116 | 0; //@line 15684
  HEAP32[$281 >> 2] = $60; //@line 15685
  $282 = $ReallocAsyncCtx2 + 120 | 0; //@line 15686
  HEAP32[$282 >> 2] = $62; //@line 15687
  $283 = $ReallocAsyncCtx2 + 124 | 0; //@line 15688
  HEAP32[$283 >> 2] = $64; //@line 15689
  $284 = $ReallocAsyncCtx2 + 128 | 0; //@line 15690
  HEAP32[$284 >> 2] = $66; //@line 15691
  $285 = $ReallocAsyncCtx2 + 132 | 0; //@line 15692
  HEAP32[$285 >> 2] = $68; //@line 15693
  $286 = $ReallocAsyncCtx2 + 136 | 0; //@line 15694
  HEAP32[$286 >> 2] = $70; //@line 15695
  $287 = $ReallocAsyncCtx2 + 140 | 0; //@line 15696
  HEAP32[$287 >> 2] = $72; //@line 15697
  $288 = $ReallocAsyncCtx2 + 144 | 0; //@line 15698
  HEAP32[$288 >> 2] = $74; //@line 15699
  $289 = $ReallocAsyncCtx2 + 148 | 0; //@line 15700
  HEAP32[$289 >> 2] = $76; //@line 15701
  $290 = $ReallocAsyncCtx2 + 152 | 0; //@line 15702
  HEAP32[$290 >> 2] = $78; //@line 15703
  $291 = $ReallocAsyncCtx2 + 156 | 0; //@line 15704
  HEAP32[$291 >> 2] = $80; //@line 15705
  $292 = $ReallocAsyncCtx2 + 160 | 0; //@line 15706
  HEAP32[$292 >> 2] = $82; //@line 15707
  $293 = $ReallocAsyncCtx2 + 164 | 0; //@line 15708
  HEAP32[$293 >> 2] = $84; //@line 15709
  $294 = $ReallocAsyncCtx2 + 168 | 0; //@line 15710
  HEAP32[$294 >> 2] = $86; //@line 15711
  $295 = $ReallocAsyncCtx2 + 172 | 0; //@line 15712
  HEAP32[$295 >> 2] = $88; //@line 15713
  $296 = $ReallocAsyncCtx2 + 176 | 0; //@line 15714
  HEAP32[$296 >> 2] = $90; //@line 15715
  $297 = $ReallocAsyncCtx2 + 180 | 0; //@line 15716
  HEAP32[$297 >> 2] = $92; //@line 15717
  $298 = $ReallocAsyncCtx2 + 184 | 0; //@line 15718
  HEAP32[$298 >> 2] = $94; //@line 15719
  $299 = $ReallocAsyncCtx2 + 188 | 0; //@line 15720
  HEAP32[$299 >> 2] = $96; //@line 15721
  $300 = $ReallocAsyncCtx2 + 192 | 0; //@line 15722
  HEAP32[$300 >> 2] = $98; //@line 15723
  $301 = $ReallocAsyncCtx2 + 196 | 0; //@line 15724
  HEAP32[$301 >> 2] = $100; //@line 15725
  $302 = $ReallocAsyncCtx2 + 200 | 0; //@line 15726
  HEAP32[$302 >> 2] = $102; //@line 15727
  $303 = $ReallocAsyncCtx2 + 204 | 0; //@line 15728
  HEAP32[$303 >> 2] = $104; //@line 15729
  $304 = $ReallocAsyncCtx2 + 208 | 0; //@line 15730
  HEAP32[$304 >> 2] = $106; //@line 15731
  $305 = $ReallocAsyncCtx2 + 212 | 0; //@line 15732
  HEAP8[$305 >> 0] = $240; //@line 15733
  $306 = $ReallocAsyncCtx2 + 216 | 0; //@line 15734
  HEAP32[$306 >> 2] = $110; //@line 15735
  $307 = $ReallocAsyncCtx2 + 220 | 0; //@line 15736
  HEAP32[$307 >> 2] = $112; //@line 15737
  $308 = $ReallocAsyncCtx2 + 224 | 0; //@line 15738
  HEAP32[$308 >> 2] = $114; //@line 15739
  $309 = $ReallocAsyncCtx2 + 228 | 0; //@line 15740
  HEAP32[$309 >> 2] = $116; //@line 15741
  sp = STACKTOP; //@line 15742
  return;
 } else if ((label | 0) == 18) {
  $330 = HEAP32[$328 >> 2] | 0; //@line 15746
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(232) | 0; //@line 15747
  $331 = FUNCTION_TABLE_ii[$330 & 15]($16) | 0; //@line 15748
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 477; //@line 15751
   $332 = $ReallocAsyncCtx3 + 4 | 0; //@line 15752
   HEAP32[$332 >> 2] = $2; //@line 15753
   $333 = $ReallocAsyncCtx3 + 8 | 0; //@line 15754
   HEAP8[$333 >> 0] = $4; //@line 15755
   $334 = $ReallocAsyncCtx3 + 12 | 0; //@line 15756
   HEAP32[$334 >> 2] = $6; //@line 15757
   $335 = $ReallocAsyncCtx3 + 16 | 0; //@line 15758
   HEAP32[$335 >> 2] = $8; //@line 15759
   $336 = $ReallocAsyncCtx3 + 20 | 0; //@line 15760
   HEAP32[$336 >> 2] = $10; //@line 15761
   $337 = $ReallocAsyncCtx3 + 24 | 0; //@line 15762
   HEAP32[$337 >> 2] = $12; //@line 15763
   $338 = $ReallocAsyncCtx3 + 28 | 0; //@line 15764
   HEAP32[$338 >> 2] = $14; //@line 15765
   $339 = $ReallocAsyncCtx3 + 32 | 0; //@line 15766
   HEAP32[$339 >> 2] = $16; //@line 15767
   $340 = $ReallocAsyncCtx3 + 36 | 0; //@line 15768
   HEAP32[$340 >> 2] = $18; //@line 15769
   $341 = $ReallocAsyncCtx3 + 40 | 0; //@line 15770
   HEAP32[$341 >> 2] = $20; //@line 15771
   $342 = $ReallocAsyncCtx3 + 44 | 0; //@line 15772
   HEAP32[$342 >> 2] = $22; //@line 15773
   $343 = $ReallocAsyncCtx3 + 48 | 0; //@line 15774
   HEAP32[$343 >> 2] = $24; //@line 15775
   $344 = $ReallocAsyncCtx3 + 52 | 0; //@line 15776
   HEAP32[$344 >> 2] = $26; //@line 15777
   $345 = $ReallocAsyncCtx3 + 56 | 0; //@line 15778
   HEAP32[$345 >> 2] = $28; //@line 15779
   $346 = $ReallocAsyncCtx3 + 60 | 0; //@line 15780
   HEAP32[$346 >> 2] = $30; //@line 15781
   $347 = $ReallocAsyncCtx3 + 64 | 0; //@line 15782
   HEAP32[$347 >> 2] = $32; //@line 15783
   $348 = $ReallocAsyncCtx3 + 68 | 0; //@line 15784
   HEAP32[$348 >> 2] = $34; //@line 15785
   $349 = $ReallocAsyncCtx3 + 72 | 0; //@line 15786
   HEAP8[$349 >> 0] = $119; //@line 15787
   $350 = $ReallocAsyncCtx3 + 76 | 0; //@line 15788
   HEAP32[$350 >> 2] = $36; //@line 15789
   $351 = $ReallocAsyncCtx3 + 80 | 0; //@line 15790
   HEAP32[$351 >> 2] = $38; //@line 15791
   $352 = $ReallocAsyncCtx3 + 84 | 0; //@line 15792
   HEAP32[$352 >> 2] = $40; //@line 15793
   $353 = $ReallocAsyncCtx3 + 88 | 0; //@line 15794
   HEAP8[$353 >> 0] = $42; //@line 15795
   $354 = $ReallocAsyncCtx3 + 89 | 0; //@line 15796
   HEAP8[$354 >> 0] = $44; //@line 15797
   $355 = $ReallocAsyncCtx3 + 92 | 0; //@line 15798
   HEAP32[$355 >> 2] = $46; //@line 15799
   $356 = $ReallocAsyncCtx3 + 96 | 0; //@line 15800
   HEAP32[$356 >> 2] = $48; //@line 15801
   $357 = $ReallocAsyncCtx3 + 100 | 0; //@line 15802
   HEAP32[$357 >> 2] = $50; //@line 15803
   $358 = $ReallocAsyncCtx3 + 104 | 0; //@line 15804
   HEAP32[$358 >> 2] = $52; //@line 15805
   $359 = $ReallocAsyncCtx3 + 108 | 0; //@line 15806
   HEAP32[$359 >> 2] = $54; //@line 15807
   $360 = $ReallocAsyncCtx3 + 112 | 0; //@line 15808
   HEAP32[$360 >> 2] = $56; //@line 15809
   $361 = $ReallocAsyncCtx3 + 116 | 0; //@line 15810
   HEAP32[$361 >> 2] = $58; //@line 15811
   $362 = $ReallocAsyncCtx3 + 120 | 0; //@line 15812
   HEAP32[$362 >> 2] = $60; //@line 15813
   $363 = $ReallocAsyncCtx3 + 124 | 0; //@line 15814
   HEAP32[$363 >> 2] = $62; //@line 15815
   $364 = $ReallocAsyncCtx3 + 128 | 0; //@line 15816
   HEAP32[$364 >> 2] = $64; //@line 15817
   $365 = $ReallocAsyncCtx3 + 132 | 0; //@line 15818
   HEAP32[$365 >> 2] = $66; //@line 15819
   $366 = $ReallocAsyncCtx3 + 136 | 0; //@line 15820
   HEAP32[$366 >> 2] = $68; //@line 15821
   $367 = $ReallocAsyncCtx3 + 140 | 0; //@line 15822
   HEAP32[$367 >> 2] = $70; //@line 15823
   $368 = $ReallocAsyncCtx3 + 144 | 0; //@line 15824
   HEAP32[$368 >> 2] = $72; //@line 15825
   $369 = $ReallocAsyncCtx3 + 148 | 0; //@line 15826
   HEAP32[$369 >> 2] = $74; //@line 15827
   $370 = $ReallocAsyncCtx3 + 152 | 0; //@line 15828
   HEAP32[$370 >> 2] = $76; //@line 15829
   $371 = $ReallocAsyncCtx3 + 156 | 0; //@line 15830
   HEAP32[$371 >> 2] = $78; //@line 15831
   $372 = $ReallocAsyncCtx3 + 160 | 0; //@line 15832
   HEAP32[$372 >> 2] = $80; //@line 15833
   $373 = $ReallocAsyncCtx3 + 164 | 0; //@line 15834
   HEAP32[$373 >> 2] = $82; //@line 15835
   $374 = $ReallocAsyncCtx3 + 168 | 0; //@line 15836
   HEAP32[$374 >> 2] = $84; //@line 15837
   $375 = $ReallocAsyncCtx3 + 172 | 0; //@line 15838
   HEAP32[$375 >> 2] = $86; //@line 15839
   $376 = $ReallocAsyncCtx3 + 176 | 0; //@line 15840
   HEAP32[$376 >> 2] = $88; //@line 15841
   $377 = $ReallocAsyncCtx3 + 180 | 0; //@line 15842
   HEAP32[$377 >> 2] = $90; //@line 15843
   $378 = $ReallocAsyncCtx3 + 184 | 0; //@line 15844
   HEAP32[$378 >> 2] = $92; //@line 15845
   $379 = $ReallocAsyncCtx3 + 188 | 0; //@line 15846
   HEAP32[$379 >> 2] = $94; //@line 15847
   $380 = $ReallocAsyncCtx3 + 192 | 0; //@line 15848
   HEAP32[$380 >> 2] = $96; //@line 15849
   $381 = $ReallocAsyncCtx3 + 196 | 0; //@line 15850
   HEAP32[$381 >> 2] = $98; //@line 15851
   $382 = $ReallocAsyncCtx3 + 200 | 0; //@line 15852
   HEAP32[$382 >> 2] = $100; //@line 15853
   $383 = $ReallocAsyncCtx3 + 204 | 0; //@line 15854
   HEAP32[$383 >> 2] = $102; //@line 15855
   $384 = $ReallocAsyncCtx3 + 208 | 0; //@line 15856
   HEAP32[$384 >> 2] = $104; //@line 15857
   $385 = $ReallocAsyncCtx3 + 212 | 0; //@line 15858
   HEAP32[$385 >> 2] = $106; //@line 15859
   $386 = $ReallocAsyncCtx3 + 216 | 0; //@line 15860
   HEAP32[$386 >> 2] = $110; //@line 15861
   $387 = $ReallocAsyncCtx3 + 220 | 0; //@line 15862
   HEAP32[$387 >> 2] = $112; //@line 15863
   $388 = $ReallocAsyncCtx3 + 224 | 0; //@line 15864
   HEAP32[$388 >> 2] = $114; //@line 15865
   $389 = $ReallocAsyncCtx3 + 228 | 0; //@line 15866
   HEAP32[$389 >> 2] = $116; //@line 15867
   sp = STACKTOP; //@line 15868
   return;
  }
  HEAP8[___async_retval >> 0] = $331; //@line 15872
  ___async_unwind = 0; //@line 15873
  HEAP32[$ReallocAsyncCtx3 >> 2] = 477; //@line 15874
  $332 = $ReallocAsyncCtx3 + 4 | 0; //@line 15875
  HEAP32[$332 >> 2] = $2; //@line 15876
  $333 = $ReallocAsyncCtx3 + 8 | 0; //@line 15877
  HEAP8[$333 >> 0] = $4; //@line 15878
  $334 = $ReallocAsyncCtx3 + 12 | 0; //@line 15879
  HEAP32[$334 >> 2] = $6; //@line 15880
  $335 = $ReallocAsyncCtx3 + 16 | 0; //@line 15881
  HEAP32[$335 >> 2] = $8; //@line 15882
  $336 = $ReallocAsyncCtx3 + 20 | 0; //@line 15883
  HEAP32[$336 >> 2] = $10; //@line 15884
  $337 = $ReallocAsyncCtx3 + 24 | 0; //@line 15885
  HEAP32[$337 >> 2] = $12; //@line 15886
  $338 = $ReallocAsyncCtx3 + 28 | 0; //@line 15887
  HEAP32[$338 >> 2] = $14; //@line 15888
  $339 = $ReallocAsyncCtx3 + 32 | 0; //@line 15889
  HEAP32[$339 >> 2] = $16; //@line 15890
  $340 = $ReallocAsyncCtx3 + 36 | 0; //@line 15891
  HEAP32[$340 >> 2] = $18; //@line 15892
  $341 = $ReallocAsyncCtx3 + 40 | 0; //@line 15893
  HEAP32[$341 >> 2] = $20; //@line 15894
  $342 = $ReallocAsyncCtx3 + 44 | 0; //@line 15895
  HEAP32[$342 >> 2] = $22; //@line 15896
  $343 = $ReallocAsyncCtx3 + 48 | 0; //@line 15897
  HEAP32[$343 >> 2] = $24; //@line 15898
  $344 = $ReallocAsyncCtx3 + 52 | 0; //@line 15899
  HEAP32[$344 >> 2] = $26; //@line 15900
  $345 = $ReallocAsyncCtx3 + 56 | 0; //@line 15901
  HEAP32[$345 >> 2] = $28; //@line 15902
  $346 = $ReallocAsyncCtx3 + 60 | 0; //@line 15903
  HEAP32[$346 >> 2] = $30; //@line 15904
  $347 = $ReallocAsyncCtx3 + 64 | 0; //@line 15905
  HEAP32[$347 >> 2] = $32; //@line 15906
  $348 = $ReallocAsyncCtx3 + 68 | 0; //@line 15907
  HEAP32[$348 >> 2] = $34; //@line 15908
  $349 = $ReallocAsyncCtx3 + 72 | 0; //@line 15909
  HEAP8[$349 >> 0] = $119; //@line 15910
  $350 = $ReallocAsyncCtx3 + 76 | 0; //@line 15911
  HEAP32[$350 >> 2] = $36; //@line 15912
  $351 = $ReallocAsyncCtx3 + 80 | 0; //@line 15913
  HEAP32[$351 >> 2] = $38; //@line 15914
  $352 = $ReallocAsyncCtx3 + 84 | 0; //@line 15915
  HEAP32[$352 >> 2] = $40; //@line 15916
  $353 = $ReallocAsyncCtx3 + 88 | 0; //@line 15917
  HEAP8[$353 >> 0] = $42; //@line 15918
  $354 = $ReallocAsyncCtx3 + 89 | 0; //@line 15919
  HEAP8[$354 >> 0] = $44; //@line 15920
  $355 = $ReallocAsyncCtx3 + 92 | 0; //@line 15921
  HEAP32[$355 >> 2] = $46; //@line 15922
  $356 = $ReallocAsyncCtx3 + 96 | 0; //@line 15923
  HEAP32[$356 >> 2] = $48; //@line 15924
  $357 = $ReallocAsyncCtx3 + 100 | 0; //@line 15925
  HEAP32[$357 >> 2] = $50; //@line 15926
  $358 = $ReallocAsyncCtx3 + 104 | 0; //@line 15927
  HEAP32[$358 >> 2] = $52; //@line 15928
  $359 = $ReallocAsyncCtx3 + 108 | 0; //@line 15929
  HEAP32[$359 >> 2] = $54; //@line 15930
  $360 = $ReallocAsyncCtx3 + 112 | 0; //@line 15931
  HEAP32[$360 >> 2] = $56; //@line 15932
  $361 = $ReallocAsyncCtx3 + 116 | 0; //@line 15933
  HEAP32[$361 >> 2] = $58; //@line 15934
  $362 = $ReallocAsyncCtx3 + 120 | 0; //@line 15935
  HEAP32[$362 >> 2] = $60; //@line 15936
  $363 = $ReallocAsyncCtx3 + 124 | 0; //@line 15937
  HEAP32[$363 >> 2] = $62; //@line 15938
  $364 = $ReallocAsyncCtx3 + 128 | 0; //@line 15939
  HEAP32[$364 >> 2] = $64; //@line 15940
  $365 = $ReallocAsyncCtx3 + 132 | 0; //@line 15941
  HEAP32[$365 >> 2] = $66; //@line 15942
  $366 = $ReallocAsyncCtx3 + 136 | 0; //@line 15943
  HEAP32[$366 >> 2] = $68; //@line 15944
  $367 = $ReallocAsyncCtx3 + 140 | 0; //@line 15945
  HEAP32[$367 >> 2] = $70; //@line 15946
  $368 = $ReallocAsyncCtx3 + 144 | 0; //@line 15947
  HEAP32[$368 >> 2] = $72; //@line 15948
  $369 = $ReallocAsyncCtx3 + 148 | 0; //@line 15949
  HEAP32[$369 >> 2] = $74; //@line 15950
  $370 = $ReallocAsyncCtx3 + 152 | 0; //@line 15951
  HEAP32[$370 >> 2] = $76; //@line 15952
  $371 = $ReallocAsyncCtx3 + 156 | 0; //@line 15953
  HEAP32[$371 >> 2] = $78; //@line 15954
  $372 = $ReallocAsyncCtx3 + 160 | 0; //@line 15955
  HEAP32[$372 >> 2] = $80; //@line 15956
  $373 = $ReallocAsyncCtx3 + 164 | 0; //@line 15957
  HEAP32[$373 >> 2] = $82; //@line 15958
  $374 = $ReallocAsyncCtx3 + 168 | 0; //@line 15959
  HEAP32[$374 >> 2] = $84; //@line 15960
  $375 = $ReallocAsyncCtx3 + 172 | 0; //@line 15961
  HEAP32[$375 >> 2] = $86; //@line 15962
  $376 = $ReallocAsyncCtx3 + 176 | 0; //@line 15963
  HEAP32[$376 >> 2] = $88; //@line 15964
  $377 = $ReallocAsyncCtx3 + 180 | 0; //@line 15965
  HEAP32[$377 >> 2] = $90; //@line 15966
  $378 = $ReallocAsyncCtx3 + 184 | 0; //@line 15967
  HEAP32[$378 >> 2] = $92; //@line 15968
  $379 = $ReallocAsyncCtx3 + 188 | 0; //@line 15969
  HEAP32[$379 >> 2] = $94; //@line 15970
  $380 = $ReallocAsyncCtx3 + 192 | 0; //@line 15971
  HEAP32[$380 >> 2] = $96; //@line 15972
  $381 = $ReallocAsyncCtx3 + 196 | 0; //@line 15973
  HEAP32[$381 >> 2] = $98; //@line 15974
  $382 = $ReallocAsyncCtx3 + 200 | 0; //@line 15975
  HEAP32[$382 >> 2] = $100; //@line 15976
  $383 = $ReallocAsyncCtx3 + 204 | 0; //@line 15977
  HEAP32[$383 >> 2] = $102; //@line 15978
  $384 = $ReallocAsyncCtx3 + 208 | 0; //@line 15979
  HEAP32[$384 >> 2] = $104; //@line 15980
  $385 = $ReallocAsyncCtx3 + 212 | 0; //@line 15981
  HEAP32[$385 >> 2] = $106; //@line 15982
  $386 = $ReallocAsyncCtx3 + 216 | 0; //@line 15983
  HEAP32[$386 >> 2] = $110; //@line 15984
  $387 = $ReallocAsyncCtx3 + 220 | 0; //@line 15985
  HEAP32[$387 >> 2] = $112; //@line 15986
  $388 = $ReallocAsyncCtx3 + 224 | 0; //@line 15987
  HEAP32[$388 >> 2] = $114; //@line 15988
  $389 = $ReallocAsyncCtx3 + 228 | 0; //@line 15989
  HEAP32[$389 >> 2] = $116; //@line 15990
  sp = STACKTOP; //@line 15991
  return;
 } else if ((label | 0) == 23) {
  $409 = HEAP8[$36 + ($119 & 255) >> 0] | 0; //@line 15998
  HEAP32[$26 >> 2] = (HEAPU8[$36 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$36 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$36 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 16019
  HEAP32[$34 >> 2] = 0; //@line 16020
  $430 = $$0$be + 6 << 24 >> 24; //@line 16021
  HEAP8[$48 >> 0] = HEAP8[$36 + ($$0$be + 5 & 255) >> 0] | 0; //@line 16025
  $436 = HEAP32[(HEAP32[$56 >> 2] | 0) + 8 >> 2] | 0; //@line 16028
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(228) | 0; //@line 16029
  $437 = FUNCTION_TABLE_iiii[$436 & 31]($60, $409, $92) | 0; //@line 16030
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 478; //@line 16033
   $438 = $ReallocAsyncCtx4 + 4 | 0; //@line 16034
   HEAP32[$438 >> 2] = $2; //@line 16035
   $439 = $ReallocAsyncCtx4 + 8 | 0; //@line 16036
   HEAP8[$439 >> 0] = $4; //@line 16037
   $440 = $ReallocAsyncCtx4 + 12 | 0; //@line 16038
   HEAP32[$440 >> 2] = $6; //@line 16039
   $441 = $ReallocAsyncCtx4 + 16 | 0; //@line 16040
   HEAP32[$441 >> 2] = $8; //@line 16041
   $442 = $ReallocAsyncCtx4 + 20 | 0; //@line 16042
   HEAP32[$442 >> 2] = $10; //@line 16043
   $443 = $ReallocAsyncCtx4 + 24 | 0; //@line 16044
   HEAP32[$443 >> 2] = $12; //@line 16045
   $444 = $ReallocAsyncCtx4 + 28 | 0; //@line 16046
   HEAP32[$444 >> 2] = $14; //@line 16047
   $445 = $ReallocAsyncCtx4 + 32 | 0; //@line 16048
   HEAP32[$445 >> 2] = $16; //@line 16049
   $446 = $ReallocAsyncCtx4 + 36 | 0; //@line 16050
   HEAP32[$446 >> 2] = $18; //@line 16051
   $447 = $ReallocAsyncCtx4 + 40 | 0; //@line 16052
   HEAP32[$447 >> 2] = $20; //@line 16053
   $448 = $ReallocAsyncCtx4 + 44 | 0; //@line 16054
   HEAP32[$448 >> 2] = $22; //@line 16055
   $449 = $ReallocAsyncCtx4 + 48 | 0; //@line 16056
   HEAP32[$449 >> 2] = $24; //@line 16057
   $450 = $ReallocAsyncCtx4 + 52 | 0; //@line 16058
   HEAP32[$450 >> 2] = $26; //@line 16059
   $451 = $ReallocAsyncCtx4 + 56 | 0; //@line 16060
   HEAP32[$451 >> 2] = $28; //@line 16061
   $452 = $ReallocAsyncCtx4 + 60 | 0; //@line 16062
   HEAP32[$452 >> 2] = $30; //@line 16063
   $453 = $ReallocAsyncCtx4 + 64 | 0; //@line 16064
   HEAP32[$453 >> 2] = $32; //@line 16065
   $454 = $ReallocAsyncCtx4 + 68 | 0; //@line 16066
   HEAP32[$454 >> 2] = $34; //@line 16067
   $455 = $ReallocAsyncCtx4 + 72 | 0; //@line 16068
   HEAP32[$455 >> 2] = $36; //@line 16069
   $456 = $ReallocAsyncCtx4 + 76 | 0; //@line 16070
   HEAP32[$456 >> 2] = $38; //@line 16071
   $457 = $ReallocAsyncCtx4 + 80 | 0; //@line 16072
   HEAP32[$457 >> 2] = $40; //@line 16073
   $458 = $ReallocAsyncCtx4 + 84 | 0; //@line 16074
   HEAP8[$458 >> 0] = $430; //@line 16075
   $459 = $ReallocAsyncCtx4 + 85 | 0; //@line 16076
   HEAP8[$459 >> 0] = $44; //@line 16077
   $460 = $ReallocAsyncCtx4 + 86 | 0; //@line 16078
   HEAP8[$460 >> 0] = $42; //@line 16079
   $461 = $ReallocAsyncCtx4 + 88 | 0; //@line 16080
   HEAP32[$461 >> 2] = $48; //@line 16081
   $462 = $ReallocAsyncCtx4 + 92 | 0; //@line 16082
   HEAP32[$462 >> 2] = $50; //@line 16083
   $463 = $ReallocAsyncCtx4 + 96 | 0; //@line 16084
   HEAP32[$463 >> 2] = $46; //@line 16085
   $464 = $ReallocAsyncCtx4 + 100 | 0; //@line 16086
   HEAP32[$464 >> 2] = $52; //@line 16087
   $465 = $ReallocAsyncCtx4 + 104 | 0; //@line 16088
   HEAP32[$465 >> 2] = $54; //@line 16089
   $466 = $ReallocAsyncCtx4 + 108 | 0; //@line 16090
   HEAP32[$466 >> 2] = $56; //@line 16091
   $467 = $ReallocAsyncCtx4 + 112 | 0; //@line 16092
   HEAP32[$467 >> 2] = $58; //@line 16093
   $468 = $ReallocAsyncCtx4 + 116 | 0; //@line 16094
   HEAP32[$468 >> 2] = $60; //@line 16095
   $469 = $ReallocAsyncCtx4 + 120 | 0; //@line 16096
   HEAP32[$469 >> 2] = $62; //@line 16097
   $470 = $ReallocAsyncCtx4 + 124 | 0; //@line 16098
   HEAP32[$470 >> 2] = $64; //@line 16099
   $471 = $ReallocAsyncCtx4 + 128 | 0; //@line 16100
   HEAP32[$471 >> 2] = $66; //@line 16101
   $472 = $ReallocAsyncCtx4 + 132 | 0; //@line 16102
   HEAP32[$472 >> 2] = $68; //@line 16103
   $473 = $ReallocAsyncCtx4 + 136 | 0; //@line 16104
   HEAP32[$473 >> 2] = $70; //@line 16105
   $474 = $ReallocAsyncCtx4 + 140 | 0; //@line 16106
   HEAP32[$474 >> 2] = $72; //@line 16107
   $475 = $ReallocAsyncCtx4 + 144 | 0; //@line 16108
   HEAP32[$475 >> 2] = $74; //@line 16109
   $476 = $ReallocAsyncCtx4 + 148 | 0; //@line 16110
   HEAP32[$476 >> 2] = $76; //@line 16111
   $477 = $ReallocAsyncCtx4 + 152 | 0; //@line 16112
   HEAP32[$477 >> 2] = $78; //@line 16113
   $478 = $ReallocAsyncCtx4 + 156 | 0; //@line 16114
   HEAP32[$478 >> 2] = $80; //@line 16115
   $479 = $ReallocAsyncCtx4 + 160 | 0; //@line 16116
   HEAP32[$479 >> 2] = $82; //@line 16117
   $480 = $ReallocAsyncCtx4 + 164 | 0; //@line 16118
   HEAP32[$480 >> 2] = $84; //@line 16119
   $481 = $ReallocAsyncCtx4 + 168 | 0; //@line 16120
   HEAP32[$481 >> 2] = $86; //@line 16121
   $482 = $ReallocAsyncCtx4 + 172 | 0; //@line 16122
   HEAP32[$482 >> 2] = $88; //@line 16123
   $483 = $ReallocAsyncCtx4 + 176 | 0; //@line 16124
   HEAP32[$483 >> 2] = $90; //@line 16125
   $484 = $ReallocAsyncCtx4 + 180 | 0; //@line 16126
   HEAP32[$484 >> 2] = $92; //@line 16127
   $485 = $ReallocAsyncCtx4 + 184 | 0; //@line 16128
   HEAP32[$485 >> 2] = $94; //@line 16129
   $486 = $ReallocAsyncCtx4 + 188 | 0; //@line 16130
   HEAP32[$486 >> 2] = $96; //@line 16131
   $487 = $ReallocAsyncCtx4 + 192 | 0; //@line 16132
   HEAP32[$487 >> 2] = $98; //@line 16133
   $488 = $ReallocAsyncCtx4 + 196 | 0; //@line 16134
   HEAP32[$488 >> 2] = $100; //@line 16135
   $489 = $ReallocAsyncCtx4 + 200 | 0; //@line 16136
   HEAP32[$489 >> 2] = $102; //@line 16137
   $490 = $ReallocAsyncCtx4 + 204 | 0; //@line 16138
   HEAP32[$490 >> 2] = $104; //@line 16139
   $491 = $ReallocAsyncCtx4 + 208 | 0; //@line 16140
   HEAP32[$491 >> 2] = $106; //@line 16141
   $492 = $ReallocAsyncCtx4 + 212 | 0; //@line 16142
   HEAP32[$492 >> 2] = $110; //@line 16143
   $493 = $ReallocAsyncCtx4 + 216 | 0; //@line 16144
   HEAP32[$493 >> 2] = $112; //@line 16145
   $494 = $ReallocAsyncCtx4 + 220 | 0; //@line 16146
   HEAP32[$494 >> 2] = $114; //@line 16147
   $495 = $ReallocAsyncCtx4 + 224 | 0; //@line 16148
   HEAP32[$495 >> 2] = $116; //@line 16149
   sp = STACKTOP; //@line 16150
   return;
  }
  HEAP8[___async_retval >> 0] = $437; //@line 16154
  ___async_unwind = 0; //@line 16155
  HEAP32[$ReallocAsyncCtx4 >> 2] = 478; //@line 16156
  $438 = $ReallocAsyncCtx4 + 4 | 0; //@line 16157
  HEAP32[$438 >> 2] = $2; //@line 16158
  $439 = $ReallocAsyncCtx4 + 8 | 0; //@line 16159
  HEAP8[$439 >> 0] = $4; //@line 16160
  $440 = $ReallocAsyncCtx4 + 12 | 0; //@line 16161
  HEAP32[$440 >> 2] = $6; //@line 16162
  $441 = $ReallocAsyncCtx4 + 16 | 0; //@line 16163
  HEAP32[$441 >> 2] = $8; //@line 16164
  $442 = $ReallocAsyncCtx4 + 20 | 0; //@line 16165
  HEAP32[$442 >> 2] = $10; //@line 16166
  $443 = $ReallocAsyncCtx4 + 24 | 0; //@line 16167
  HEAP32[$443 >> 2] = $12; //@line 16168
  $444 = $ReallocAsyncCtx4 + 28 | 0; //@line 16169
  HEAP32[$444 >> 2] = $14; //@line 16170
  $445 = $ReallocAsyncCtx4 + 32 | 0; //@line 16171
  HEAP32[$445 >> 2] = $16; //@line 16172
  $446 = $ReallocAsyncCtx4 + 36 | 0; //@line 16173
  HEAP32[$446 >> 2] = $18; //@line 16174
  $447 = $ReallocAsyncCtx4 + 40 | 0; //@line 16175
  HEAP32[$447 >> 2] = $20; //@line 16176
  $448 = $ReallocAsyncCtx4 + 44 | 0; //@line 16177
  HEAP32[$448 >> 2] = $22; //@line 16178
  $449 = $ReallocAsyncCtx4 + 48 | 0; //@line 16179
  HEAP32[$449 >> 2] = $24; //@line 16180
  $450 = $ReallocAsyncCtx4 + 52 | 0; //@line 16181
  HEAP32[$450 >> 2] = $26; //@line 16182
  $451 = $ReallocAsyncCtx4 + 56 | 0; //@line 16183
  HEAP32[$451 >> 2] = $28; //@line 16184
  $452 = $ReallocAsyncCtx4 + 60 | 0; //@line 16185
  HEAP32[$452 >> 2] = $30; //@line 16186
  $453 = $ReallocAsyncCtx4 + 64 | 0; //@line 16187
  HEAP32[$453 >> 2] = $32; //@line 16188
  $454 = $ReallocAsyncCtx4 + 68 | 0; //@line 16189
  HEAP32[$454 >> 2] = $34; //@line 16190
  $455 = $ReallocAsyncCtx4 + 72 | 0; //@line 16191
  HEAP32[$455 >> 2] = $36; //@line 16192
  $456 = $ReallocAsyncCtx4 + 76 | 0; //@line 16193
  HEAP32[$456 >> 2] = $38; //@line 16194
  $457 = $ReallocAsyncCtx4 + 80 | 0; //@line 16195
  HEAP32[$457 >> 2] = $40; //@line 16196
  $458 = $ReallocAsyncCtx4 + 84 | 0; //@line 16197
  HEAP8[$458 >> 0] = $430; //@line 16198
  $459 = $ReallocAsyncCtx4 + 85 | 0; //@line 16199
  HEAP8[$459 >> 0] = $44; //@line 16200
  $460 = $ReallocAsyncCtx4 + 86 | 0; //@line 16201
  HEAP8[$460 >> 0] = $42; //@line 16202
  $461 = $ReallocAsyncCtx4 + 88 | 0; //@line 16203
  HEAP32[$461 >> 2] = $48; //@line 16204
  $462 = $ReallocAsyncCtx4 + 92 | 0; //@line 16205
  HEAP32[$462 >> 2] = $50; //@line 16206
  $463 = $ReallocAsyncCtx4 + 96 | 0; //@line 16207
  HEAP32[$463 >> 2] = $46; //@line 16208
  $464 = $ReallocAsyncCtx4 + 100 | 0; //@line 16209
  HEAP32[$464 >> 2] = $52; //@line 16210
  $465 = $ReallocAsyncCtx4 + 104 | 0; //@line 16211
  HEAP32[$465 >> 2] = $54; //@line 16212
  $466 = $ReallocAsyncCtx4 + 108 | 0; //@line 16213
  HEAP32[$466 >> 2] = $56; //@line 16214
  $467 = $ReallocAsyncCtx4 + 112 | 0; //@line 16215
  HEAP32[$467 >> 2] = $58; //@line 16216
  $468 = $ReallocAsyncCtx4 + 116 | 0; //@line 16217
  HEAP32[$468 >> 2] = $60; //@line 16218
  $469 = $ReallocAsyncCtx4 + 120 | 0; //@line 16219
  HEAP32[$469 >> 2] = $62; //@line 16220
  $470 = $ReallocAsyncCtx4 + 124 | 0; //@line 16221
  HEAP32[$470 >> 2] = $64; //@line 16222
  $471 = $ReallocAsyncCtx4 + 128 | 0; //@line 16223
  HEAP32[$471 >> 2] = $66; //@line 16224
  $472 = $ReallocAsyncCtx4 + 132 | 0; //@line 16225
  HEAP32[$472 >> 2] = $68; //@line 16226
  $473 = $ReallocAsyncCtx4 + 136 | 0; //@line 16227
  HEAP32[$473 >> 2] = $70; //@line 16228
  $474 = $ReallocAsyncCtx4 + 140 | 0; //@line 16229
  HEAP32[$474 >> 2] = $72; //@line 16230
  $475 = $ReallocAsyncCtx4 + 144 | 0; //@line 16231
  HEAP32[$475 >> 2] = $74; //@line 16232
  $476 = $ReallocAsyncCtx4 + 148 | 0; //@line 16233
  HEAP32[$476 >> 2] = $76; //@line 16234
  $477 = $ReallocAsyncCtx4 + 152 | 0; //@line 16235
  HEAP32[$477 >> 2] = $78; //@line 16236
  $478 = $ReallocAsyncCtx4 + 156 | 0; //@line 16237
  HEAP32[$478 >> 2] = $80; //@line 16238
  $479 = $ReallocAsyncCtx4 + 160 | 0; //@line 16239
  HEAP32[$479 >> 2] = $82; //@line 16240
  $480 = $ReallocAsyncCtx4 + 164 | 0; //@line 16241
  HEAP32[$480 >> 2] = $84; //@line 16242
  $481 = $ReallocAsyncCtx4 + 168 | 0; //@line 16243
  HEAP32[$481 >> 2] = $86; //@line 16244
  $482 = $ReallocAsyncCtx4 + 172 | 0; //@line 16245
  HEAP32[$482 >> 2] = $88; //@line 16246
  $483 = $ReallocAsyncCtx4 + 176 | 0; //@line 16247
  HEAP32[$483 >> 2] = $90; //@line 16248
  $484 = $ReallocAsyncCtx4 + 180 | 0; //@line 16249
  HEAP32[$484 >> 2] = $92; //@line 16250
  $485 = $ReallocAsyncCtx4 + 184 | 0; //@line 16251
  HEAP32[$485 >> 2] = $94; //@line 16252
  $486 = $ReallocAsyncCtx4 + 188 | 0; //@line 16253
  HEAP32[$486 >> 2] = $96; //@line 16254
  $487 = $ReallocAsyncCtx4 + 192 | 0; //@line 16255
  HEAP32[$487 >> 2] = $98; //@line 16256
  $488 = $ReallocAsyncCtx4 + 196 | 0; //@line 16257
  HEAP32[$488 >> 2] = $100; //@line 16258
  $489 = $ReallocAsyncCtx4 + 200 | 0; //@line 16259
  HEAP32[$489 >> 2] = $102; //@line 16260
  $490 = $ReallocAsyncCtx4 + 204 | 0; //@line 16261
  HEAP32[$490 >> 2] = $104; //@line 16262
  $491 = $ReallocAsyncCtx4 + 208 | 0; //@line 16263
  HEAP32[$491 >> 2] = $106; //@line 16264
  $492 = $ReallocAsyncCtx4 + 212 | 0; //@line 16265
  HEAP32[$492 >> 2] = $110; //@line 16266
  $493 = $ReallocAsyncCtx4 + 216 | 0; //@line 16267
  HEAP32[$493 >> 2] = $112; //@line 16268
  $494 = $ReallocAsyncCtx4 + 220 | 0; //@line 16269
  HEAP32[$494 >> 2] = $114; //@line 16270
  $495 = $ReallocAsyncCtx4 + 224 | 0; //@line 16271
  HEAP32[$495 >> 2] = $116; //@line 16272
  sp = STACKTOP; //@line 16273
  return;
 } else if ((label | 0) == 29) {
  $516 = $$0$be + 2 << 24 >> 24; //@line 16277
  $520 = HEAPU8[$36 + ($119 & 255) >> 0] | 0; //@line 16281
  $522 = $520 >>> 5 & 1; //@line 16284
  $524 = $520 >>> 4 & 1; //@line 16287
  $527 = HEAP32[(HEAP32[$78 >> 2] | 0) + 44 >> 2] | 0; //@line 16290
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(248) | 0; //@line 16291
  $528 = FUNCTION_TABLE_iiii[$527 & 31]($60, $524, $522) | 0; //@line 16292
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 16295
   $529 = $ReallocAsyncCtx5 + 4 | 0; //@line 16296
   HEAP32[$529 >> 2] = $2; //@line 16297
   $530 = $ReallocAsyncCtx5 + 8 | 0; //@line 16298
   HEAP8[$530 >> 0] = $4; //@line 16299
   $531 = $ReallocAsyncCtx5 + 12 | 0; //@line 16300
   HEAP32[$531 >> 2] = $6; //@line 16301
   $532 = $ReallocAsyncCtx5 + 16 | 0; //@line 16302
   HEAP32[$532 >> 2] = $8; //@line 16303
   $533 = $ReallocAsyncCtx5 + 20 | 0; //@line 16304
   HEAP32[$533 >> 2] = $10; //@line 16305
   $534 = $ReallocAsyncCtx5 + 24 | 0; //@line 16306
   HEAP32[$534 >> 2] = $520; //@line 16307
   $535 = $ReallocAsyncCtx5 + 28 | 0; //@line 16308
   HEAP32[$535 >> 2] = $12; //@line 16309
   $536 = $ReallocAsyncCtx5 + 32 | 0; //@line 16310
   HEAP32[$536 >> 2] = $14; //@line 16311
   $537 = $ReallocAsyncCtx5 + 36 | 0; //@line 16312
   HEAP32[$537 >> 2] = $16; //@line 16313
   $538 = $ReallocAsyncCtx5 + 40 | 0; //@line 16314
   HEAP32[$538 >> 2] = $18; //@line 16315
   $539 = $ReallocAsyncCtx5 + 44 | 0; //@line 16316
   HEAP32[$539 >> 2] = $20; //@line 16317
   $540 = $ReallocAsyncCtx5 + 48 | 0; //@line 16318
   HEAP32[$540 >> 2] = $22; //@line 16319
   $541 = $ReallocAsyncCtx5 + 52 | 0; //@line 16320
   HEAP32[$541 >> 2] = $24; //@line 16321
   $542 = $ReallocAsyncCtx5 + 56 | 0; //@line 16322
   HEAP32[$542 >> 2] = $26; //@line 16323
   $543 = $ReallocAsyncCtx5 + 60 | 0; //@line 16324
   HEAP32[$543 >> 2] = $28; //@line 16325
   $544 = $ReallocAsyncCtx5 + 64 | 0; //@line 16326
   HEAP32[$544 >> 2] = $30; //@line 16327
   $545 = $ReallocAsyncCtx5 + 68 | 0; //@line 16328
   HEAP32[$545 >> 2] = $32; //@line 16329
   $546 = $ReallocAsyncCtx5 + 72 | 0; //@line 16330
   HEAP8[$546 >> 0] = $522; //@line 16331
   $547 = $ReallocAsyncCtx5 + 76 | 0; //@line 16332
   HEAP32[$547 >> 2] = $34; //@line 16333
   $548 = $ReallocAsyncCtx5 + 80 | 0; //@line 16334
   HEAP32[$548 >> 2] = $36; //@line 16335
   $549 = $ReallocAsyncCtx5 + 84 | 0; //@line 16336
   HEAP32[$549 >> 2] = $38; //@line 16337
   $550 = $ReallocAsyncCtx5 + 88 | 0; //@line 16338
   HEAP32[$550 >> 2] = $40; //@line 16339
   $551 = $ReallocAsyncCtx5 + 92 | 0; //@line 16340
   HEAP8[$551 >> 0] = $42; //@line 16341
   $552 = $ReallocAsyncCtx5 + 93 | 0; //@line 16342
   HEAP8[$552 >> 0] = $44; //@line 16343
   $553 = $ReallocAsyncCtx5 + 96 | 0; //@line 16344
   HEAP32[$553 >> 2] = $50; //@line 16345
   $554 = $ReallocAsyncCtx5 + 100 | 0; //@line 16346
   HEAP32[$554 >> 2] = $48; //@line 16347
   $555 = $ReallocAsyncCtx5 + 104 | 0; //@line 16348
   HEAP32[$555 >> 2] = $46; //@line 16349
   $556 = $ReallocAsyncCtx5 + 108 | 0; //@line 16350
   HEAP32[$556 >> 2] = $52; //@line 16351
   $557 = $ReallocAsyncCtx5 + 112 | 0; //@line 16352
   HEAP8[$557 >> 0] = $516; //@line 16353
   $558 = $ReallocAsyncCtx5 + 116 | 0; //@line 16354
   HEAP32[$558 >> 2] = $54; //@line 16355
   $559 = $ReallocAsyncCtx5 + 120 | 0; //@line 16356
   HEAP32[$559 >> 2] = $56; //@line 16357
   $560 = $ReallocAsyncCtx5 + 124 | 0; //@line 16358
   HEAP32[$560 >> 2] = $58; //@line 16359
   $561 = $ReallocAsyncCtx5 + 128 | 0; //@line 16360
   HEAP32[$561 >> 2] = $60; //@line 16361
   $562 = $ReallocAsyncCtx5 + 132 | 0; //@line 16362
   HEAP32[$562 >> 2] = $62; //@line 16363
   $563 = $ReallocAsyncCtx5 + 136 | 0; //@line 16364
   HEAP32[$563 >> 2] = $64; //@line 16365
   $564 = $ReallocAsyncCtx5 + 140 | 0; //@line 16366
   HEAP32[$564 >> 2] = $66; //@line 16367
   $565 = $ReallocAsyncCtx5 + 144 | 0; //@line 16368
   HEAP32[$565 >> 2] = $68; //@line 16369
   $566 = $ReallocAsyncCtx5 + 148 | 0; //@line 16370
   HEAP32[$566 >> 2] = $70; //@line 16371
   $567 = $ReallocAsyncCtx5 + 152 | 0; //@line 16372
   HEAP32[$567 >> 2] = $72; //@line 16373
   $568 = $ReallocAsyncCtx5 + 156 | 0; //@line 16374
   HEAP8[$568 >> 0] = $524; //@line 16375
   $569 = $ReallocAsyncCtx5 + 160 | 0; //@line 16376
   HEAP32[$569 >> 2] = $74; //@line 16377
   $570 = $ReallocAsyncCtx5 + 164 | 0; //@line 16378
   HEAP32[$570 >> 2] = $76; //@line 16379
   $571 = $ReallocAsyncCtx5 + 168 | 0; //@line 16380
   HEAP32[$571 >> 2] = $78; //@line 16381
   $572 = $ReallocAsyncCtx5 + 172 | 0; //@line 16382
   HEAP32[$572 >> 2] = $80; //@line 16383
   $573 = $ReallocAsyncCtx5 + 176 | 0; //@line 16384
   HEAP32[$573 >> 2] = $82; //@line 16385
   $574 = $ReallocAsyncCtx5 + 180 | 0; //@line 16386
   HEAP32[$574 >> 2] = $84; //@line 16387
   $575 = $ReallocAsyncCtx5 + 184 | 0; //@line 16388
   HEAP32[$575 >> 2] = $86; //@line 16389
   $576 = $ReallocAsyncCtx5 + 188 | 0; //@line 16390
   HEAP32[$576 >> 2] = $88; //@line 16391
   $577 = $ReallocAsyncCtx5 + 192 | 0; //@line 16392
   HEAP32[$577 >> 2] = $90; //@line 16393
   $578 = $ReallocAsyncCtx5 + 196 | 0; //@line 16394
   HEAP32[$578 >> 2] = $92; //@line 16395
   $579 = $ReallocAsyncCtx5 + 200 | 0; //@line 16396
   HEAP32[$579 >> 2] = $94; //@line 16397
   $580 = $ReallocAsyncCtx5 + 204 | 0; //@line 16398
   HEAP32[$580 >> 2] = $96; //@line 16399
   $581 = $ReallocAsyncCtx5 + 208 | 0; //@line 16400
   HEAP32[$581 >> 2] = $98; //@line 16401
   $582 = $ReallocAsyncCtx5 + 212 | 0; //@line 16402
   HEAP32[$582 >> 2] = $100; //@line 16403
   $583 = $ReallocAsyncCtx5 + 216 | 0; //@line 16404
   HEAP32[$583 >> 2] = $102; //@line 16405
   $584 = $ReallocAsyncCtx5 + 220 | 0; //@line 16406
   HEAP32[$584 >> 2] = $104; //@line 16407
   $585 = $ReallocAsyncCtx5 + 224 | 0; //@line 16408
   HEAP32[$585 >> 2] = $106; //@line 16409
   $586 = $ReallocAsyncCtx5 + 228 | 0; //@line 16410
   HEAP32[$586 >> 2] = $110; //@line 16411
   $587 = $ReallocAsyncCtx5 + 232 | 0; //@line 16412
   HEAP32[$587 >> 2] = $112; //@line 16413
   $588 = $ReallocAsyncCtx5 + 236 | 0; //@line 16414
   HEAP32[$588 >> 2] = $$0107$be; //@line 16415
   $589 = $ReallocAsyncCtx5 + 240 | 0; //@line 16416
   HEAP32[$589 >> 2] = $114; //@line 16417
   $590 = $ReallocAsyncCtx5 + 244 | 0; //@line 16418
   HEAP32[$590 >> 2] = $116; //@line 16419
   sp = STACKTOP; //@line 16420
   return;
  }
  HEAP8[___async_retval >> 0] = $528 & 1; //@line 16425
  ___async_unwind = 0; //@line 16426
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 16427
  $529 = $ReallocAsyncCtx5 + 4 | 0; //@line 16428
  HEAP32[$529 >> 2] = $2; //@line 16429
  $530 = $ReallocAsyncCtx5 + 8 | 0; //@line 16430
  HEAP8[$530 >> 0] = $4; //@line 16431
  $531 = $ReallocAsyncCtx5 + 12 | 0; //@line 16432
  HEAP32[$531 >> 2] = $6; //@line 16433
  $532 = $ReallocAsyncCtx5 + 16 | 0; //@line 16434
  HEAP32[$532 >> 2] = $8; //@line 16435
  $533 = $ReallocAsyncCtx5 + 20 | 0; //@line 16436
  HEAP32[$533 >> 2] = $10; //@line 16437
  $534 = $ReallocAsyncCtx5 + 24 | 0; //@line 16438
  HEAP32[$534 >> 2] = $520; //@line 16439
  $535 = $ReallocAsyncCtx5 + 28 | 0; //@line 16440
  HEAP32[$535 >> 2] = $12; //@line 16441
  $536 = $ReallocAsyncCtx5 + 32 | 0; //@line 16442
  HEAP32[$536 >> 2] = $14; //@line 16443
  $537 = $ReallocAsyncCtx5 + 36 | 0; //@line 16444
  HEAP32[$537 >> 2] = $16; //@line 16445
  $538 = $ReallocAsyncCtx5 + 40 | 0; //@line 16446
  HEAP32[$538 >> 2] = $18; //@line 16447
  $539 = $ReallocAsyncCtx5 + 44 | 0; //@line 16448
  HEAP32[$539 >> 2] = $20; //@line 16449
  $540 = $ReallocAsyncCtx5 + 48 | 0; //@line 16450
  HEAP32[$540 >> 2] = $22; //@line 16451
  $541 = $ReallocAsyncCtx5 + 52 | 0; //@line 16452
  HEAP32[$541 >> 2] = $24; //@line 16453
  $542 = $ReallocAsyncCtx5 + 56 | 0; //@line 16454
  HEAP32[$542 >> 2] = $26; //@line 16455
  $543 = $ReallocAsyncCtx5 + 60 | 0; //@line 16456
  HEAP32[$543 >> 2] = $28; //@line 16457
  $544 = $ReallocAsyncCtx5 + 64 | 0; //@line 16458
  HEAP32[$544 >> 2] = $30; //@line 16459
  $545 = $ReallocAsyncCtx5 + 68 | 0; //@line 16460
  HEAP32[$545 >> 2] = $32; //@line 16461
  $546 = $ReallocAsyncCtx5 + 72 | 0; //@line 16462
  HEAP8[$546 >> 0] = $522; //@line 16463
  $547 = $ReallocAsyncCtx5 + 76 | 0; //@line 16464
  HEAP32[$547 >> 2] = $34; //@line 16465
  $548 = $ReallocAsyncCtx5 + 80 | 0; //@line 16466
  HEAP32[$548 >> 2] = $36; //@line 16467
  $549 = $ReallocAsyncCtx5 + 84 | 0; //@line 16468
  HEAP32[$549 >> 2] = $38; //@line 16469
  $550 = $ReallocAsyncCtx5 + 88 | 0; //@line 16470
  HEAP32[$550 >> 2] = $40; //@line 16471
  $551 = $ReallocAsyncCtx5 + 92 | 0; //@line 16472
  HEAP8[$551 >> 0] = $42; //@line 16473
  $552 = $ReallocAsyncCtx5 + 93 | 0; //@line 16474
  HEAP8[$552 >> 0] = $44; //@line 16475
  $553 = $ReallocAsyncCtx5 + 96 | 0; //@line 16476
  HEAP32[$553 >> 2] = $50; //@line 16477
  $554 = $ReallocAsyncCtx5 + 100 | 0; //@line 16478
  HEAP32[$554 >> 2] = $48; //@line 16479
  $555 = $ReallocAsyncCtx5 + 104 | 0; //@line 16480
  HEAP32[$555 >> 2] = $46; //@line 16481
  $556 = $ReallocAsyncCtx5 + 108 | 0; //@line 16482
  HEAP32[$556 >> 2] = $52; //@line 16483
  $557 = $ReallocAsyncCtx5 + 112 | 0; //@line 16484
  HEAP8[$557 >> 0] = $516; //@line 16485
  $558 = $ReallocAsyncCtx5 + 116 | 0; //@line 16486
  HEAP32[$558 >> 2] = $54; //@line 16487
  $559 = $ReallocAsyncCtx5 + 120 | 0; //@line 16488
  HEAP32[$559 >> 2] = $56; //@line 16489
  $560 = $ReallocAsyncCtx5 + 124 | 0; //@line 16490
  HEAP32[$560 >> 2] = $58; //@line 16491
  $561 = $ReallocAsyncCtx5 + 128 | 0; //@line 16492
  HEAP32[$561 >> 2] = $60; //@line 16493
  $562 = $ReallocAsyncCtx5 + 132 | 0; //@line 16494
  HEAP32[$562 >> 2] = $62; //@line 16495
  $563 = $ReallocAsyncCtx5 + 136 | 0; //@line 16496
  HEAP32[$563 >> 2] = $64; //@line 16497
  $564 = $ReallocAsyncCtx5 + 140 | 0; //@line 16498
  HEAP32[$564 >> 2] = $66; //@line 16499
  $565 = $ReallocAsyncCtx5 + 144 | 0; //@line 16500
  HEAP32[$565 >> 2] = $68; //@line 16501
  $566 = $ReallocAsyncCtx5 + 148 | 0; //@line 16502
  HEAP32[$566 >> 2] = $70; //@line 16503
  $567 = $ReallocAsyncCtx5 + 152 | 0; //@line 16504
  HEAP32[$567 >> 2] = $72; //@line 16505
  $568 = $ReallocAsyncCtx5 + 156 | 0; //@line 16506
  HEAP8[$568 >> 0] = $524; //@line 16507
  $569 = $ReallocAsyncCtx5 + 160 | 0; //@line 16508
  HEAP32[$569 >> 2] = $74; //@line 16509
  $570 = $ReallocAsyncCtx5 + 164 | 0; //@line 16510
  HEAP32[$570 >> 2] = $76; //@line 16511
  $571 = $ReallocAsyncCtx5 + 168 | 0; //@line 16512
  HEAP32[$571 >> 2] = $78; //@line 16513
  $572 = $ReallocAsyncCtx5 + 172 | 0; //@line 16514
  HEAP32[$572 >> 2] = $80; //@line 16515
  $573 = $ReallocAsyncCtx5 + 176 | 0; //@line 16516
  HEAP32[$573 >> 2] = $82; //@line 16517
  $574 = $ReallocAsyncCtx5 + 180 | 0; //@line 16518
  HEAP32[$574 >> 2] = $84; //@line 16519
  $575 = $ReallocAsyncCtx5 + 184 | 0; //@line 16520
  HEAP32[$575 >> 2] = $86; //@line 16521
  $576 = $ReallocAsyncCtx5 + 188 | 0; //@line 16522
  HEAP32[$576 >> 2] = $88; //@line 16523
  $577 = $ReallocAsyncCtx5 + 192 | 0; //@line 16524
  HEAP32[$577 >> 2] = $90; //@line 16525
  $578 = $ReallocAsyncCtx5 + 196 | 0; //@line 16526
  HEAP32[$578 >> 2] = $92; //@line 16527
  $579 = $ReallocAsyncCtx5 + 200 | 0; //@line 16528
  HEAP32[$579 >> 2] = $94; //@line 16529
  $580 = $ReallocAsyncCtx5 + 204 | 0; //@line 16530
  HEAP32[$580 >> 2] = $96; //@line 16531
  $581 = $ReallocAsyncCtx5 + 208 | 0; //@line 16532
  HEAP32[$581 >> 2] = $98; //@line 16533
  $582 = $ReallocAsyncCtx5 + 212 | 0; //@line 16534
  HEAP32[$582 >> 2] = $100; //@line 16535
  $583 = $ReallocAsyncCtx5 + 216 | 0; //@line 16536
  HEAP32[$583 >> 2] = $102; //@line 16537
  $584 = $ReallocAsyncCtx5 + 220 | 0; //@line 16538
  HEAP32[$584 >> 2] = $104; //@line 16539
  $585 = $ReallocAsyncCtx5 + 224 | 0; //@line 16540
  HEAP32[$585 >> 2] = $106; //@line 16541
  $586 = $ReallocAsyncCtx5 + 228 | 0; //@line 16542
  HEAP32[$586 >> 2] = $110; //@line 16543
  $587 = $ReallocAsyncCtx5 + 232 | 0; //@line 16544
  HEAP32[$587 >> 2] = $112; //@line 16545
  $588 = $ReallocAsyncCtx5 + 236 | 0; //@line 16546
  HEAP32[$588 >> 2] = $$0107$be; //@line 16547
  $589 = $ReallocAsyncCtx5 + 240 | 0; //@line 16548
  HEAP32[$589 >> 2] = $114; //@line 16549
  $590 = $ReallocAsyncCtx5 + 244 | 0; //@line 16550
  HEAP32[$590 >> 2] = $116; //@line 16551
  sp = STACKTOP; //@line 16552
  return;
 } else if ((label | 0) == 32) {
  $595 = HEAP8[$36 + ($119 & 255) >> 0] | 0; //@line 16559
  $608 = $$0$be + 5 << 24 >> 24; //@line 16572
  $615 = (HEAPU8[$36 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$36 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$36 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 16579
  $618 = HEAP32[(HEAP32[$98 >> 2] | 0) + 48 >> 2] | 0; //@line 16582
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(232) | 0; //@line 16583
  $619 = FUNCTION_TABLE_iiii[$618 & 31]($60, $595, $615) | 0; //@line 16584
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 480; //@line 16587
   $620 = $ReallocAsyncCtx6 + 4 | 0; //@line 16588
   HEAP32[$620 >> 2] = $2; //@line 16589
   $621 = $ReallocAsyncCtx6 + 8 | 0; //@line 16590
   HEAP8[$621 >> 0] = $4; //@line 16591
   $622 = $ReallocAsyncCtx6 + 12 | 0; //@line 16592
   HEAP32[$622 >> 2] = $6; //@line 16593
   $623 = $ReallocAsyncCtx6 + 16 | 0; //@line 16594
   HEAP32[$623 >> 2] = $8; //@line 16595
   $624 = $ReallocAsyncCtx6 + 20 | 0; //@line 16596
   HEAP32[$624 >> 2] = $10; //@line 16597
   $625 = $ReallocAsyncCtx6 + 24 | 0; //@line 16598
   HEAP32[$625 >> 2] = $12; //@line 16599
   $626 = $ReallocAsyncCtx6 + 28 | 0; //@line 16600
   HEAP32[$626 >> 2] = $14; //@line 16601
   $627 = $ReallocAsyncCtx6 + 32 | 0; //@line 16602
   HEAP32[$627 >> 2] = $16; //@line 16603
   $628 = $ReallocAsyncCtx6 + 36 | 0; //@line 16604
   HEAP32[$628 >> 2] = $18; //@line 16605
   $629 = $ReallocAsyncCtx6 + 40 | 0; //@line 16606
   HEAP32[$629 >> 2] = $20; //@line 16607
   $630 = $ReallocAsyncCtx6 + 44 | 0; //@line 16608
   HEAP32[$630 >> 2] = $22; //@line 16609
   $631 = $ReallocAsyncCtx6 + 48 | 0; //@line 16610
   HEAP32[$631 >> 2] = $24; //@line 16611
   $632 = $ReallocAsyncCtx6 + 52 | 0; //@line 16612
   HEAP32[$632 >> 2] = $26; //@line 16613
   $633 = $ReallocAsyncCtx6 + 56 | 0; //@line 16614
   HEAP32[$633 >> 2] = $28; //@line 16615
   $634 = $ReallocAsyncCtx6 + 60 | 0; //@line 16616
   HEAP32[$634 >> 2] = $30; //@line 16617
   $635 = $ReallocAsyncCtx6 + 64 | 0; //@line 16618
   HEAP32[$635 >> 2] = $32; //@line 16619
   $636 = $ReallocAsyncCtx6 + 68 | 0; //@line 16620
   HEAP32[$636 >> 2] = $34; //@line 16621
   $637 = $ReallocAsyncCtx6 + 72 | 0; //@line 16622
   HEAP32[$637 >> 2] = $36; //@line 16623
   $638 = $ReallocAsyncCtx6 + 76 | 0; //@line 16624
   HEAP32[$638 >> 2] = $38; //@line 16625
   $639 = $ReallocAsyncCtx6 + 80 | 0; //@line 16626
   HEAP32[$639 >> 2] = $40; //@line 16627
   $640 = $ReallocAsyncCtx6 + 84 | 0; //@line 16628
   HEAP8[$640 >> 0] = $42; //@line 16629
   $641 = $ReallocAsyncCtx6 + 85 | 0; //@line 16630
   HEAP8[$641 >> 0] = $44; //@line 16631
   $642 = $ReallocAsyncCtx6 + 88 | 0; //@line 16632
   HEAP32[$642 >> 2] = $50; //@line 16633
   $643 = $ReallocAsyncCtx6 + 92 | 0; //@line 16634
   HEAP32[$643 >> 2] = $48; //@line 16635
   $644 = $ReallocAsyncCtx6 + 96 | 0; //@line 16636
   HEAP32[$644 >> 2] = $46; //@line 16637
   $645 = $ReallocAsyncCtx6 + 100 | 0; //@line 16638
   HEAP32[$645 >> 2] = $52; //@line 16639
   $646 = $ReallocAsyncCtx6 + 104 | 0; //@line 16640
   HEAP32[$646 >> 2] = $54; //@line 16641
   $647 = $ReallocAsyncCtx6 + 108 | 0; //@line 16642
   HEAP32[$647 >> 2] = $56; //@line 16643
   $648 = $ReallocAsyncCtx6 + 112 | 0; //@line 16644
   HEAP32[$648 >> 2] = $58; //@line 16645
   $649 = $ReallocAsyncCtx6 + 116 | 0; //@line 16646
   HEAP32[$649 >> 2] = $60; //@line 16647
   $650 = $ReallocAsyncCtx6 + 120 | 0; //@line 16648
   HEAP32[$650 >> 2] = $62; //@line 16649
   $651 = $ReallocAsyncCtx6 + 124 | 0; //@line 16650
   HEAP32[$651 >> 2] = $64; //@line 16651
   $652 = $ReallocAsyncCtx6 + 128 | 0; //@line 16652
   HEAP32[$652 >> 2] = $66; //@line 16653
   $653 = $ReallocAsyncCtx6 + 132 | 0; //@line 16654
   HEAP32[$653 >> 2] = $68; //@line 16655
   $654 = $ReallocAsyncCtx6 + 136 | 0; //@line 16656
   HEAP32[$654 >> 2] = $70; //@line 16657
   $655 = $ReallocAsyncCtx6 + 140 | 0; //@line 16658
   HEAP32[$655 >> 2] = $72; //@line 16659
   $656 = $ReallocAsyncCtx6 + 144 | 0; //@line 16660
   HEAP32[$656 >> 2] = $74; //@line 16661
   $657 = $ReallocAsyncCtx6 + 148 | 0; //@line 16662
   HEAP32[$657 >> 2] = $76; //@line 16663
   $658 = $ReallocAsyncCtx6 + 152 | 0; //@line 16664
   HEAP32[$658 >> 2] = $78; //@line 16665
   $659 = $ReallocAsyncCtx6 + 156 | 0; //@line 16666
   HEAP32[$659 >> 2] = $80; //@line 16667
   $660 = $ReallocAsyncCtx6 + 160 | 0; //@line 16668
   HEAP32[$660 >> 2] = $82; //@line 16669
   $661 = $ReallocAsyncCtx6 + 164 | 0; //@line 16670
   HEAP8[$661 >> 0] = $608; //@line 16671
   $662 = $ReallocAsyncCtx6 + 168 | 0; //@line 16672
   HEAP32[$662 >> 2] = $84; //@line 16673
   $663 = $ReallocAsyncCtx6 + 172 | 0; //@line 16674
   HEAP32[$663 >> 2] = $86; //@line 16675
   $664 = $ReallocAsyncCtx6 + 176 | 0; //@line 16676
   HEAP32[$664 >> 2] = $88; //@line 16677
   $665 = $ReallocAsyncCtx6 + 180 | 0; //@line 16678
   HEAP32[$665 >> 2] = $90; //@line 16679
   $666 = $ReallocAsyncCtx6 + 184 | 0; //@line 16680
   HEAP32[$666 >> 2] = $92; //@line 16681
   $667 = $ReallocAsyncCtx6 + 188 | 0; //@line 16682
   HEAP32[$667 >> 2] = $94; //@line 16683
   $668 = $ReallocAsyncCtx6 + 192 | 0; //@line 16684
   HEAP32[$668 >> 2] = $96; //@line 16685
   $669 = $ReallocAsyncCtx6 + 196 | 0; //@line 16686
   HEAP32[$669 >> 2] = $98; //@line 16687
   $670 = $ReallocAsyncCtx6 + 200 | 0; //@line 16688
   HEAP32[$670 >> 2] = $100; //@line 16689
   $671 = $ReallocAsyncCtx6 + 204 | 0; //@line 16690
   HEAP32[$671 >> 2] = $102; //@line 16691
   $672 = $ReallocAsyncCtx6 + 208 | 0; //@line 16692
   HEAP32[$672 >> 2] = $104; //@line 16693
   $673 = $ReallocAsyncCtx6 + 212 | 0; //@line 16694
   HEAP32[$673 >> 2] = $106; //@line 16695
   $674 = $ReallocAsyncCtx6 + 216 | 0; //@line 16696
   HEAP32[$674 >> 2] = $110; //@line 16697
   $675 = $ReallocAsyncCtx6 + 220 | 0; //@line 16698
   HEAP32[$675 >> 2] = $112; //@line 16699
   $676 = $ReallocAsyncCtx6 + 224 | 0; //@line 16700
   HEAP32[$676 >> 2] = $114; //@line 16701
   $677 = $ReallocAsyncCtx6 + 228 | 0; //@line 16702
   HEAP32[$677 >> 2] = $116; //@line 16703
   sp = STACKTOP; //@line 16704
   return;
  }
  HEAP8[___async_retval >> 0] = $619; //@line 16708
  ___async_unwind = 0; //@line 16709
  HEAP32[$ReallocAsyncCtx6 >> 2] = 480; //@line 16710
  $620 = $ReallocAsyncCtx6 + 4 | 0; //@line 16711
  HEAP32[$620 >> 2] = $2; //@line 16712
  $621 = $ReallocAsyncCtx6 + 8 | 0; //@line 16713
  HEAP8[$621 >> 0] = $4; //@line 16714
  $622 = $ReallocAsyncCtx6 + 12 | 0; //@line 16715
  HEAP32[$622 >> 2] = $6; //@line 16716
  $623 = $ReallocAsyncCtx6 + 16 | 0; //@line 16717
  HEAP32[$623 >> 2] = $8; //@line 16718
  $624 = $ReallocAsyncCtx6 + 20 | 0; //@line 16719
  HEAP32[$624 >> 2] = $10; //@line 16720
  $625 = $ReallocAsyncCtx6 + 24 | 0; //@line 16721
  HEAP32[$625 >> 2] = $12; //@line 16722
  $626 = $ReallocAsyncCtx6 + 28 | 0; //@line 16723
  HEAP32[$626 >> 2] = $14; //@line 16724
  $627 = $ReallocAsyncCtx6 + 32 | 0; //@line 16725
  HEAP32[$627 >> 2] = $16; //@line 16726
  $628 = $ReallocAsyncCtx6 + 36 | 0; //@line 16727
  HEAP32[$628 >> 2] = $18; //@line 16728
  $629 = $ReallocAsyncCtx6 + 40 | 0; //@line 16729
  HEAP32[$629 >> 2] = $20; //@line 16730
  $630 = $ReallocAsyncCtx6 + 44 | 0; //@line 16731
  HEAP32[$630 >> 2] = $22; //@line 16732
  $631 = $ReallocAsyncCtx6 + 48 | 0; //@line 16733
  HEAP32[$631 >> 2] = $24; //@line 16734
  $632 = $ReallocAsyncCtx6 + 52 | 0; //@line 16735
  HEAP32[$632 >> 2] = $26; //@line 16736
  $633 = $ReallocAsyncCtx6 + 56 | 0; //@line 16737
  HEAP32[$633 >> 2] = $28; //@line 16738
  $634 = $ReallocAsyncCtx6 + 60 | 0; //@line 16739
  HEAP32[$634 >> 2] = $30; //@line 16740
  $635 = $ReallocAsyncCtx6 + 64 | 0; //@line 16741
  HEAP32[$635 >> 2] = $32; //@line 16742
  $636 = $ReallocAsyncCtx6 + 68 | 0; //@line 16743
  HEAP32[$636 >> 2] = $34; //@line 16744
  $637 = $ReallocAsyncCtx6 + 72 | 0; //@line 16745
  HEAP32[$637 >> 2] = $36; //@line 16746
  $638 = $ReallocAsyncCtx6 + 76 | 0; //@line 16747
  HEAP32[$638 >> 2] = $38; //@line 16748
  $639 = $ReallocAsyncCtx6 + 80 | 0; //@line 16749
  HEAP32[$639 >> 2] = $40; //@line 16750
  $640 = $ReallocAsyncCtx6 + 84 | 0; //@line 16751
  HEAP8[$640 >> 0] = $42; //@line 16752
  $641 = $ReallocAsyncCtx6 + 85 | 0; //@line 16753
  HEAP8[$641 >> 0] = $44; //@line 16754
  $642 = $ReallocAsyncCtx6 + 88 | 0; //@line 16755
  HEAP32[$642 >> 2] = $50; //@line 16756
  $643 = $ReallocAsyncCtx6 + 92 | 0; //@line 16757
  HEAP32[$643 >> 2] = $48; //@line 16758
  $644 = $ReallocAsyncCtx6 + 96 | 0; //@line 16759
  HEAP32[$644 >> 2] = $46; //@line 16760
  $645 = $ReallocAsyncCtx6 + 100 | 0; //@line 16761
  HEAP32[$645 >> 2] = $52; //@line 16762
  $646 = $ReallocAsyncCtx6 + 104 | 0; //@line 16763
  HEAP32[$646 >> 2] = $54; //@line 16764
  $647 = $ReallocAsyncCtx6 + 108 | 0; //@line 16765
  HEAP32[$647 >> 2] = $56; //@line 16766
  $648 = $ReallocAsyncCtx6 + 112 | 0; //@line 16767
  HEAP32[$648 >> 2] = $58; //@line 16768
  $649 = $ReallocAsyncCtx6 + 116 | 0; //@line 16769
  HEAP32[$649 >> 2] = $60; //@line 16770
  $650 = $ReallocAsyncCtx6 + 120 | 0; //@line 16771
  HEAP32[$650 >> 2] = $62; //@line 16772
  $651 = $ReallocAsyncCtx6 + 124 | 0; //@line 16773
  HEAP32[$651 >> 2] = $64; //@line 16774
  $652 = $ReallocAsyncCtx6 + 128 | 0; //@line 16775
  HEAP32[$652 >> 2] = $66; //@line 16776
  $653 = $ReallocAsyncCtx6 + 132 | 0; //@line 16777
  HEAP32[$653 >> 2] = $68; //@line 16778
  $654 = $ReallocAsyncCtx6 + 136 | 0; //@line 16779
  HEAP32[$654 >> 2] = $70; //@line 16780
  $655 = $ReallocAsyncCtx6 + 140 | 0; //@line 16781
  HEAP32[$655 >> 2] = $72; //@line 16782
  $656 = $ReallocAsyncCtx6 + 144 | 0; //@line 16783
  HEAP32[$656 >> 2] = $74; //@line 16784
  $657 = $ReallocAsyncCtx6 + 148 | 0; //@line 16785
  HEAP32[$657 >> 2] = $76; //@line 16786
  $658 = $ReallocAsyncCtx6 + 152 | 0; //@line 16787
  HEAP32[$658 >> 2] = $78; //@line 16788
  $659 = $ReallocAsyncCtx6 + 156 | 0; //@line 16789
  HEAP32[$659 >> 2] = $80; //@line 16790
  $660 = $ReallocAsyncCtx6 + 160 | 0; //@line 16791
  HEAP32[$660 >> 2] = $82; //@line 16792
  $661 = $ReallocAsyncCtx6 + 164 | 0; //@line 16793
  HEAP8[$661 >> 0] = $608; //@line 16794
  $662 = $ReallocAsyncCtx6 + 168 | 0; //@line 16795
  HEAP32[$662 >> 2] = $84; //@line 16796
  $663 = $ReallocAsyncCtx6 + 172 | 0; //@line 16797
  HEAP32[$663 >> 2] = $86; //@line 16798
  $664 = $ReallocAsyncCtx6 + 176 | 0; //@line 16799
  HEAP32[$664 >> 2] = $88; //@line 16800
  $665 = $ReallocAsyncCtx6 + 180 | 0; //@line 16801
  HEAP32[$665 >> 2] = $90; //@line 16802
  $666 = $ReallocAsyncCtx6 + 184 | 0; //@line 16803
  HEAP32[$666 >> 2] = $92; //@line 16804
  $667 = $ReallocAsyncCtx6 + 188 | 0; //@line 16805
  HEAP32[$667 >> 2] = $94; //@line 16806
  $668 = $ReallocAsyncCtx6 + 192 | 0; //@line 16807
  HEAP32[$668 >> 2] = $96; //@line 16808
  $669 = $ReallocAsyncCtx6 + 196 | 0; //@line 16809
  HEAP32[$669 >> 2] = $98; //@line 16810
  $670 = $ReallocAsyncCtx6 + 200 | 0; //@line 16811
  HEAP32[$670 >> 2] = $100; //@line 16812
  $671 = $ReallocAsyncCtx6 + 204 | 0; //@line 16813
  HEAP32[$671 >> 2] = $102; //@line 16814
  $672 = $ReallocAsyncCtx6 + 208 | 0; //@line 16815
  HEAP32[$672 >> 2] = $104; //@line 16816
  $673 = $ReallocAsyncCtx6 + 212 | 0; //@line 16817
  HEAP32[$673 >> 2] = $106; //@line 16818
  $674 = $ReallocAsyncCtx6 + 216 | 0; //@line 16819
  HEAP32[$674 >> 2] = $110; //@line 16820
  $675 = $ReallocAsyncCtx6 + 220 | 0; //@line 16821
  HEAP32[$675 >> 2] = $112; //@line 16822
  $676 = $ReallocAsyncCtx6 + 224 | 0; //@line 16823
  HEAP32[$676 >> 2] = $114; //@line 16824
  $677 = $ReallocAsyncCtx6 + 228 | 0; //@line 16825
  HEAP32[$677 >> 2] = $116; //@line 16826
  sp = STACKTOP; //@line 16827
  return;
 } else if ((label | 0) == 35) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 16832
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_329($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0107$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $119 = 0, $12 = 0, $130 = 0, $131 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $204 = 0, $207 = 0, $214 = 0, $215 = 0, $22 = 0, $221 = 0, $24 = 0, $240 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $311 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $377 = 0, $378 = 0, $38 = 0, $392 = 0, $4 = 0, $40 = 0, $413 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $48 = 0, $481 = 0, $485 = 0, $489 = 0, $494 = 0, $495 = 0, $499 = 0, $50 = 0, $503 = 0, $505 = 0, $507 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $578 = 0, $58 = 0, $591 = 0, $598 = 0, $6 = 0, $60 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $665 = 0, $666 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 22823
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22825
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 22827
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22829
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22831
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22833
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22835
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22837
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22839
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22841
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22843
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 22845
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 22847
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 22849
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 22851
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 22853
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 22855
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 22857
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 22859
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 22861
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 22863
 $42 = HEAP8[$0 + 84 >> 0] | 0; //@line 22865
 $44 = HEAP8[$0 + 85 >> 0] | 0; //@line 22867
 $46 = HEAP32[$0 + 88 >> 2] | 0; //@line 22869
 $48 = HEAP32[$0 + 92 >> 2] | 0; //@line 22871
 $50 = HEAP32[$0 + 96 >> 2] | 0; //@line 22873
 $52 = HEAP32[$0 + 100 >> 2] | 0; //@line 22875
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 22877
 $56 = HEAP32[$0 + 108 >> 2] | 0; //@line 22879
 $58 = HEAP32[$0 + 112 >> 2] | 0; //@line 22881
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 22883
 $62 = HEAP32[$0 + 120 >> 2] | 0; //@line 22885
 $64 = HEAP32[$0 + 124 >> 2] | 0; //@line 22887
 $66 = HEAP32[$0 + 128 >> 2] | 0; //@line 22889
 $68 = HEAP32[$0 + 132 >> 2] | 0; //@line 22891
 $70 = HEAP32[$0 + 136 >> 2] | 0; //@line 22893
 $72 = HEAP32[$0 + 140 >> 2] | 0; //@line 22895
 $74 = HEAP32[$0 + 144 >> 2] | 0; //@line 22897
 $76 = HEAP32[$0 + 148 >> 2] | 0; //@line 22899
 $78 = HEAP32[$0 + 152 >> 2] | 0; //@line 22901
 $80 = HEAP32[$0 + 156 >> 2] | 0; //@line 22903
 $82 = HEAP32[$0 + 160 >> 2] | 0; //@line 22905
 $84 = HEAP8[$0 + 164 >> 0] | 0; //@line 22907
 $86 = HEAP32[$0 + 168 >> 2] | 0; //@line 22909
 $88 = HEAP32[$0 + 172 >> 2] | 0; //@line 22911
 $90 = HEAP32[$0 + 176 >> 2] | 0; //@line 22913
 $92 = HEAP32[$0 + 180 >> 2] | 0; //@line 22915
 $94 = HEAP32[$0 + 184 >> 2] | 0; //@line 22917
 $96 = HEAP32[$0 + 188 >> 2] | 0; //@line 22919
 $98 = HEAP32[$0 + 192 >> 2] | 0; //@line 22921
 $100 = HEAP32[$0 + 196 >> 2] | 0; //@line 22923
 $102 = HEAP32[$0 + 200 >> 2] | 0; //@line 22925
 $104 = HEAP32[$0 + 204 >> 2] | 0; //@line 22927
 $106 = HEAP32[$0 + 208 >> 2] | 0; //@line 22929
 $108 = HEAP32[$0 + 212 >> 2] | 0; //@line 22931
 $110 = HEAP32[$0 + 216 >> 2] | 0; //@line 22933
 $112 = HEAP32[$0 + 220 >> 2] | 0; //@line 22935
 $114 = HEAP32[$0 + 224 >> 2] | 0; //@line 22937
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 22939
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 22941
 $665 = HEAP8[$106 >> 0] | 0; //@line 22945
 $666 = $665 & 255; //@line 22946
 if ((128 - (HEAPU8[$116 >> 0] | 0) | 0) > ($666 | 0)) {
  HEAP8[$38 + 4 + $666 >> 0] = 10; //@line 22951
  HEAP8[$106 >> 0] = $665 + 2 << 24 >> 24; //@line 22953
  HEAP8[($665 + 1 & 255) + ($38 + 4) >> 0] = $AsyncRetVal; //@line 22956
  HEAP8[$14 >> 0] = 1; //@line 22957
  HEAP8[$102 >> 0] = 1; //@line 22958
  $$0$be = $84; //@line 22959
  $$0107$be = 0; //@line 22959
 } else {
  $$0$be = $84; //@line 22961
  $$0107$be = -1010; //@line 22961
 }
 L4 : while (1) {
  if (($$0$be & 255) >= ($42 & 255)) {
   label = 32; //@line 22966
   break;
  }
  $119 = $$0$be + 1 << 24 >> 24; //@line 22970
  switch (HEAP8[$36 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 22975
    break L4;
    break;
   }
  case 5:
   {
    label = 9; //@line 22980
    break L4;
    break;
   }
  case 7:
   {
    label = 18; //@line 22985
    break L4;
    break;
   }
  case 9:
   {
    label = 24; //@line 22990
    break L4;
    break;
   }
  case 10:
   {
    label = 27; //@line 22995
    break L4;
    break;
   }
  case 2:
   {
    HEAP32[$46 >> 2] = 0; //@line 23000
    HEAP8[$22 >> 0] = HEAP8[$36 + ($119 & 255) >> 0] | 0; //@line 23005
    HEAP8[$28 >> 0] = HEAP8[$36 + ($$0$be + 2 & 255) >> 0] | 0; //@line 23010
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 23011
    continue L4;
    break;
   }
  case 4:
   {
    $204 = $$0$be + 2 << 24 >> 24; //@line 23016
    $207 = HEAP8[$36 + ($119 & 255) >> 0] | 0; //@line 23019
    HEAP8[$98 >> 0] = $207; //@line 23020
    HEAP16[$90 >> 1] = 1 << ($207 & 255); //@line 23024
    $214 = HEAP8[$106 >> 0] | 0; //@line 23028
    $215 = $214 & 255; //@line 23029
    if ((128 - (HEAPU8[$116 >> 0] | 0) | 0) <= ($215 | 0)) {
     $$0$be = $204; //@line 23032
     $$0107$be = -1010; //@line 23032
     continue L4;
    }
    HEAP8[$106 >> 0] = $214 + 1 << 24 >> 24; //@line 23037
    HEAP8[$38 + 4 + $215 >> 0] = 4; //@line 23038
    HEAP8[$102 >> 0] = 1; //@line 23039
    $$0$be = $204; //@line 23040
    $$0107$be = 0; //@line 23040
    continue L4;
    break;
   }
  case 6:
   {
    $311 = HEAP32[$6 >> 2] | 0; //@line 23045
    if ($311 | 0) {
     label = 13; //@line 23048
     break L4;
    }
    $377 = HEAP8[$106 >> 0] | 0; //@line 23054
    $378 = $377 & 255; //@line 23055
    if ((128 - (HEAPU8[$116 >> 0] | 0) - $378 | 0) <= 2) {
     $$0$be = $119; //@line 23059
     $$0107$be = -1010; //@line 23059
     continue L4;
    }
    HEAP8[$38 + 4 + $378 >> 0] = 6; //@line 23064
    HEAP8[($377 + 1 & 255) + ($38 + 4) >> 0] = -1; //@line 23068
    HEAP8[$106 >> 0] = $377 + 3 << 24 >> 24; //@line 23070
    HEAP8[($377 + 2 & 255) + ($38 + 4) >> 0] = $4; //@line 23073
    HEAP8[$102 >> 0] = 1; //@line 23074
    $$0$be = $119; //@line 23075
    $$0107$be = 0; //@line 23075
    continue L4;
    break;
   }
  case 8:
   {
    $481 = $$0$be + 2 << 24 >> 24; //@line 23080
    $485 = HEAP8[$36 + ($119 & 255) >> 0] & 15; //@line 23084
    $489 = ($485 + ($485 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 23089
    HEAP32[$64 >> 2] = $489; //@line 23090
    HEAP32[$74 >> 2] = $489 + 1e3; //@line 23092
    $494 = HEAP8[$106 >> 0] | 0; //@line 23096
    $495 = $494 & 255; //@line 23097
    if ((128 - (HEAPU8[$116 >> 0] | 0) | 0) <= ($495 | 0)) {
     $$0$be = $481; //@line 23100
     $$0107$be = -1010; //@line 23100
     continue L4;
    }
    HEAP8[$106 >> 0] = $494 + 1 << 24 >> 24; //@line 23105
    HEAP8[$38 + 4 + $495 >> 0] = 8; //@line 23106
    HEAP8[$14 >> 0] = 1; //@line 23107
    HEAP8[$102 >> 0] = 1; //@line 23108
    $$0$be = $481; //@line 23109
    $$0107$be = 0; //@line 23109
    continue L4;
    break;
   }
  default:
   {
    $$0$be = $119; //@line 23114
    $$0107$be = -1013; //@line 23114
    continue L4;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$96 >> 0] = 0; //@line 23120
  HEAP8[$112 >> 0] = 0; //@line 23121
  HEAP8[$114 >> 0] = 0; //@line 23122
  HEAP8[$110 >> 0] = 0; //@line 23123
  $130 = $119 & 255; //@line 23124
  $131 = $130 + -1 | 0; //@line 23125
  HEAP32[$12 >> 2] = $36 + $131; //@line 23127
  HEAP8[$108 >> 0] = $52 - $131; //@line 23130
  HEAP8[$76 >> 0] = HEAP8[$82 >> 0] | 0; //@line 23132
  HEAP8[$66 >> 0] = HEAP8[$70 >> 0] | 0; //@line 23134
  HEAP8[$50 >> 0] = HEAP8[$58 >> 0] | 0; //@line 23136
  HEAP8[$18 >> 0] = HEAP8[$32 >> 0] | 0; //@line 23138
  HEAP8[$2 >> 0] = HEAP8[$10 >> 0] | 0; //@line 23140
  $142 = HEAP32[(HEAP32[$86 >> 2] | 0) + 36 >> 2] | 0; //@line 23143
  $ReallocAsyncCtx = _emscripten_realloc_async_context(236) | 0; //@line 23144
  $143 = FUNCTION_TABLE_iiiiiii[$142 & 3]($60, $104, $96, $112, $114, $110) | 0; //@line 23145
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 475; //@line 23148
   $144 = $ReallocAsyncCtx + 4 | 0; //@line 23149
   HEAP32[$144 >> 2] = $2; //@line 23150
   $145 = $ReallocAsyncCtx + 8 | 0; //@line 23151
   HEAP8[$145 >> 0] = $4; //@line 23152
   $146 = $ReallocAsyncCtx + 12 | 0; //@line 23153
   HEAP32[$146 >> 2] = $6; //@line 23154
   $147 = $ReallocAsyncCtx + 16 | 0; //@line 23155
   HEAP32[$147 >> 2] = $8; //@line 23156
   $148 = $ReallocAsyncCtx + 20 | 0; //@line 23157
   HEAP32[$148 >> 2] = $10; //@line 23158
   $149 = $ReallocAsyncCtx + 24 | 0; //@line 23159
   HEAP32[$149 >> 2] = $12; //@line 23160
   $150 = $ReallocAsyncCtx + 28 | 0; //@line 23161
   HEAP32[$150 >> 2] = $14; //@line 23162
   $151 = $ReallocAsyncCtx + 32 | 0; //@line 23163
   HEAP32[$151 >> 2] = $16; //@line 23164
   $152 = $ReallocAsyncCtx + 36 | 0; //@line 23165
   HEAP32[$152 >> 2] = $18; //@line 23166
   $153 = $ReallocAsyncCtx + 40 | 0; //@line 23167
   HEAP32[$153 >> 2] = $20; //@line 23168
   $154 = $ReallocAsyncCtx + 44 | 0; //@line 23169
   HEAP32[$154 >> 2] = $22; //@line 23170
   $155 = $ReallocAsyncCtx + 48 | 0; //@line 23171
   HEAP32[$155 >> 2] = $24; //@line 23172
   $156 = $ReallocAsyncCtx + 52 | 0; //@line 23173
   HEAP32[$156 >> 2] = $26; //@line 23174
   $157 = $ReallocAsyncCtx + 56 | 0; //@line 23175
   HEAP32[$157 >> 2] = $28; //@line 23176
   $158 = $ReallocAsyncCtx + 60 | 0; //@line 23177
   HEAP32[$158 >> 2] = $30; //@line 23178
   $159 = $ReallocAsyncCtx + 64 | 0; //@line 23179
   HEAP32[$159 >> 2] = $32; //@line 23180
   $160 = $ReallocAsyncCtx + 68 | 0; //@line 23181
   HEAP32[$160 >> 2] = $34; //@line 23182
   $161 = $ReallocAsyncCtx + 72 | 0; //@line 23183
   HEAP32[$161 >> 2] = $36; //@line 23184
   $162 = $ReallocAsyncCtx + 76 | 0; //@line 23185
   HEAP32[$162 >> 2] = $38; //@line 23186
   $163 = $ReallocAsyncCtx + 80 | 0; //@line 23187
   HEAP32[$163 >> 2] = $40; //@line 23188
   $164 = $ReallocAsyncCtx + 84 | 0; //@line 23189
   HEAP8[$164 >> 0] = $42; //@line 23190
   $165 = $ReallocAsyncCtx + 85 | 0; //@line 23191
   HEAP8[$165 >> 0] = $44; //@line 23192
   $166 = $ReallocAsyncCtx + 88 | 0; //@line 23193
   HEAP32[$166 >> 2] = $50; //@line 23194
   $167 = $ReallocAsyncCtx + 92 | 0; //@line 23195
   HEAP32[$167 >> 2] = $48; //@line 23196
   $168 = $ReallocAsyncCtx + 96 | 0; //@line 23197
   HEAP32[$168 >> 2] = $46; //@line 23198
   $169 = $ReallocAsyncCtx + 100 | 0; //@line 23199
   HEAP32[$169 >> 2] = $52; //@line 23200
   $170 = $ReallocAsyncCtx + 104 | 0; //@line 23201
   HEAP32[$170 >> 2] = $54; //@line 23202
   $171 = $ReallocAsyncCtx + 108 | 0; //@line 23203
   HEAP32[$171 >> 2] = $56; //@line 23204
   $172 = $ReallocAsyncCtx + 112 | 0; //@line 23205
   HEAP32[$172 >> 2] = $58; //@line 23206
   $173 = $ReallocAsyncCtx + 116 | 0; //@line 23207
   HEAP32[$173 >> 2] = $60; //@line 23208
   $174 = $ReallocAsyncCtx + 120 | 0; //@line 23209
   HEAP32[$174 >> 2] = $62; //@line 23210
   $175 = $ReallocAsyncCtx + 124 | 0; //@line 23211
   HEAP32[$175 >> 2] = $64; //@line 23212
   $176 = $ReallocAsyncCtx + 128 | 0; //@line 23213
   HEAP32[$176 >> 2] = $66; //@line 23214
   $177 = $ReallocAsyncCtx + 132 | 0; //@line 23215
   HEAP32[$177 >> 2] = $68; //@line 23216
   $178 = $ReallocAsyncCtx + 136 | 0; //@line 23217
   HEAP32[$178 >> 2] = $70; //@line 23218
   $179 = $ReallocAsyncCtx + 140 | 0; //@line 23219
   HEAP32[$179 >> 2] = $72; //@line 23220
   $180 = $ReallocAsyncCtx + 144 | 0; //@line 23221
   HEAP32[$180 >> 2] = $74; //@line 23222
   $181 = $ReallocAsyncCtx + 148 | 0; //@line 23223
   HEAP32[$181 >> 2] = $76; //@line 23224
   $182 = $ReallocAsyncCtx + 152 | 0; //@line 23225
   HEAP32[$182 >> 2] = $78; //@line 23226
   $183 = $ReallocAsyncCtx + 156 | 0; //@line 23227
   HEAP32[$183 >> 2] = $80; //@line 23228
   $184 = $ReallocAsyncCtx + 160 | 0; //@line 23229
   HEAP32[$184 >> 2] = $82; //@line 23230
   $185 = $ReallocAsyncCtx + 164 | 0; //@line 23231
   HEAP32[$185 >> 2] = $86; //@line 23232
   $186 = $ReallocAsyncCtx + 168 | 0; //@line 23233
   HEAP32[$186 >> 2] = $88; //@line 23234
   $187 = $ReallocAsyncCtx + 172 | 0; //@line 23235
   HEAP32[$187 >> 2] = $90; //@line 23236
   $188 = $ReallocAsyncCtx + 176 | 0; //@line 23237
   HEAP32[$188 >> 2] = $92; //@line 23238
   $189 = $ReallocAsyncCtx + 180 | 0; //@line 23239
   HEAP32[$189 >> 2] = $94; //@line 23240
   $190 = $ReallocAsyncCtx + 184 | 0; //@line 23241
   HEAP32[$190 >> 2] = $96; //@line 23242
   $191 = $ReallocAsyncCtx + 188 | 0; //@line 23243
   HEAP32[$191 >> 2] = $98; //@line 23244
   $192 = $ReallocAsyncCtx + 192 | 0; //@line 23245
   HEAP32[$192 >> 2] = $100; //@line 23246
   $193 = $ReallocAsyncCtx + 196 | 0; //@line 23247
   HEAP32[$193 >> 2] = $102; //@line 23248
   $194 = $ReallocAsyncCtx + 200 | 0; //@line 23249
   HEAP32[$194 >> 2] = $104; //@line 23250
   $195 = $ReallocAsyncCtx + 204 | 0; //@line 23251
   HEAP32[$195 >> 2] = $106; //@line 23252
   $196 = $ReallocAsyncCtx + 208 | 0; //@line 23253
   HEAP32[$196 >> 2] = $108; //@line 23254
   $197 = $ReallocAsyncCtx + 212 | 0; //@line 23255
   HEAP32[$197 >> 2] = $110; //@line 23256
   $198 = $ReallocAsyncCtx + 216 | 0; //@line 23257
   HEAP32[$198 >> 2] = $112; //@line 23258
   $199 = $ReallocAsyncCtx + 220 | 0; //@line 23259
   HEAP32[$199 >> 2] = $130; //@line 23260
   $200 = $ReallocAsyncCtx + 224 | 0; //@line 23261
   HEAP32[$200 >> 2] = $$0107$be; //@line 23262
   $201 = $ReallocAsyncCtx + 228 | 0; //@line 23263
   HEAP32[$201 >> 2] = $114; //@line 23264
   $202 = $ReallocAsyncCtx + 232 | 0; //@line 23265
   HEAP32[$202 >> 2] = $116; //@line 23266
   sp = STACKTOP; //@line 23267
   return;
  }
  HEAP8[___async_retval >> 0] = $143; //@line 23271
  ___async_unwind = 0; //@line 23272
  HEAP32[$ReallocAsyncCtx >> 2] = 475; //@line 23273
  $144 = $ReallocAsyncCtx + 4 | 0; //@line 23274
  HEAP32[$144 >> 2] = $2; //@line 23275
  $145 = $ReallocAsyncCtx + 8 | 0; //@line 23276
  HEAP8[$145 >> 0] = $4; //@line 23277
  $146 = $ReallocAsyncCtx + 12 | 0; //@line 23278
  HEAP32[$146 >> 2] = $6; //@line 23279
  $147 = $ReallocAsyncCtx + 16 | 0; //@line 23280
  HEAP32[$147 >> 2] = $8; //@line 23281
  $148 = $ReallocAsyncCtx + 20 | 0; //@line 23282
  HEAP32[$148 >> 2] = $10; //@line 23283
  $149 = $ReallocAsyncCtx + 24 | 0; //@line 23284
  HEAP32[$149 >> 2] = $12; //@line 23285
  $150 = $ReallocAsyncCtx + 28 | 0; //@line 23286
  HEAP32[$150 >> 2] = $14; //@line 23287
  $151 = $ReallocAsyncCtx + 32 | 0; //@line 23288
  HEAP32[$151 >> 2] = $16; //@line 23289
  $152 = $ReallocAsyncCtx + 36 | 0; //@line 23290
  HEAP32[$152 >> 2] = $18; //@line 23291
  $153 = $ReallocAsyncCtx + 40 | 0; //@line 23292
  HEAP32[$153 >> 2] = $20; //@line 23293
  $154 = $ReallocAsyncCtx + 44 | 0; //@line 23294
  HEAP32[$154 >> 2] = $22; //@line 23295
  $155 = $ReallocAsyncCtx + 48 | 0; //@line 23296
  HEAP32[$155 >> 2] = $24; //@line 23297
  $156 = $ReallocAsyncCtx + 52 | 0; //@line 23298
  HEAP32[$156 >> 2] = $26; //@line 23299
  $157 = $ReallocAsyncCtx + 56 | 0; //@line 23300
  HEAP32[$157 >> 2] = $28; //@line 23301
  $158 = $ReallocAsyncCtx + 60 | 0; //@line 23302
  HEAP32[$158 >> 2] = $30; //@line 23303
  $159 = $ReallocAsyncCtx + 64 | 0; //@line 23304
  HEAP32[$159 >> 2] = $32; //@line 23305
  $160 = $ReallocAsyncCtx + 68 | 0; //@line 23306
  HEAP32[$160 >> 2] = $34; //@line 23307
  $161 = $ReallocAsyncCtx + 72 | 0; //@line 23308
  HEAP32[$161 >> 2] = $36; //@line 23309
  $162 = $ReallocAsyncCtx + 76 | 0; //@line 23310
  HEAP32[$162 >> 2] = $38; //@line 23311
  $163 = $ReallocAsyncCtx + 80 | 0; //@line 23312
  HEAP32[$163 >> 2] = $40; //@line 23313
  $164 = $ReallocAsyncCtx + 84 | 0; //@line 23314
  HEAP8[$164 >> 0] = $42; //@line 23315
  $165 = $ReallocAsyncCtx + 85 | 0; //@line 23316
  HEAP8[$165 >> 0] = $44; //@line 23317
  $166 = $ReallocAsyncCtx + 88 | 0; //@line 23318
  HEAP32[$166 >> 2] = $50; //@line 23319
  $167 = $ReallocAsyncCtx + 92 | 0; //@line 23320
  HEAP32[$167 >> 2] = $48; //@line 23321
  $168 = $ReallocAsyncCtx + 96 | 0; //@line 23322
  HEAP32[$168 >> 2] = $46; //@line 23323
  $169 = $ReallocAsyncCtx + 100 | 0; //@line 23324
  HEAP32[$169 >> 2] = $52; //@line 23325
  $170 = $ReallocAsyncCtx + 104 | 0; //@line 23326
  HEAP32[$170 >> 2] = $54; //@line 23327
  $171 = $ReallocAsyncCtx + 108 | 0; //@line 23328
  HEAP32[$171 >> 2] = $56; //@line 23329
  $172 = $ReallocAsyncCtx + 112 | 0; //@line 23330
  HEAP32[$172 >> 2] = $58; //@line 23331
  $173 = $ReallocAsyncCtx + 116 | 0; //@line 23332
  HEAP32[$173 >> 2] = $60; //@line 23333
  $174 = $ReallocAsyncCtx + 120 | 0; //@line 23334
  HEAP32[$174 >> 2] = $62; //@line 23335
  $175 = $ReallocAsyncCtx + 124 | 0; //@line 23336
  HEAP32[$175 >> 2] = $64; //@line 23337
  $176 = $ReallocAsyncCtx + 128 | 0; //@line 23338
  HEAP32[$176 >> 2] = $66; //@line 23339
  $177 = $ReallocAsyncCtx + 132 | 0; //@line 23340
  HEAP32[$177 >> 2] = $68; //@line 23341
  $178 = $ReallocAsyncCtx + 136 | 0; //@line 23342
  HEAP32[$178 >> 2] = $70; //@line 23343
  $179 = $ReallocAsyncCtx + 140 | 0; //@line 23344
  HEAP32[$179 >> 2] = $72; //@line 23345
  $180 = $ReallocAsyncCtx + 144 | 0; //@line 23346
  HEAP32[$180 >> 2] = $74; //@line 23347
  $181 = $ReallocAsyncCtx + 148 | 0; //@line 23348
  HEAP32[$181 >> 2] = $76; //@line 23349
  $182 = $ReallocAsyncCtx + 152 | 0; //@line 23350
  HEAP32[$182 >> 2] = $78; //@line 23351
  $183 = $ReallocAsyncCtx + 156 | 0; //@line 23352
  HEAP32[$183 >> 2] = $80; //@line 23353
  $184 = $ReallocAsyncCtx + 160 | 0; //@line 23354
  HEAP32[$184 >> 2] = $82; //@line 23355
  $185 = $ReallocAsyncCtx + 164 | 0; //@line 23356
  HEAP32[$185 >> 2] = $86; //@line 23357
  $186 = $ReallocAsyncCtx + 168 | 0; //@line 23358
  HEAP32[$186 >> 2] = $88; //@line 23359
  $187 = $ReallocAsyncCtx + 172 | 0; //@line 23360
  HEAP32[$187 >> 2] = $90; //@line 23361
  $188 = $ReallocAsyncCtx + 176 | 0; //@line 23362
  HEAP32[$188 >> 2] = $92; //@line 23363
  $189 = $ReallocAsyncCtx + 180 | 0; //@line 23364
  HEAP32[$189 >> 2] = $94; //@line 23365
  $190 = $ReallocAsyncCtx + 184 | 0; //@line 23366
  HEAP32[$190 >> 2] = $96; //@line 23367
  $191 = $ReallocAsyncCtx + 188 | 0; //@line 23368
  HEAP32[$191 >> 2] = $98; //@line 23369
  $192 = $ReallocAsyncCtx + 192 | 0; //@line 23370
  HEAP32[$192 >> 2] = $100; //@line 23371
  $193 = $ReallocAsyncCtx + 196 | 0; //@line 23372
  HEAP32[$193 >> 2] = $102; //@line 23373
  $194 = $ReallocAsyncCtx + 200 | 0; //@line 23374
  HEAP32[$194 >> 2] = $104; //@line 23375
  $195 = $ReallocAsyncCtx + 204 | 0; //@line 23376
  HEAP32[$195 >> 2] = $106; //@line 23377
  $196 = $ReallocAsyncCtx + 208 | 0; //@line 23378
  HEAP32[$196 >> 2] = $108; //@line 23379
  $197 = $ReallocAsyncCtx + 212 | 0; //@line 23380
  HEAP32[$197 >> 2] = $110; //@line 23381
  $198 = $ReallocAsyncCtx + 216 | 0; //@line 23382
  HEAP32[$198 >> 2] = $112; //@line 23383
  $199 = $ReallocAsyncCtx + 220 | 0; //@line 23384
  HEAP32[$199 >> 2] = $130; //@line 23385
  $200 = $ReallocAsyncCtx + 224 | 0; //@line 23386
  HEAP32[$200 >> 2] = $$0107$be; //@line 23387
  $201 = $ReallocAsyncCtx + 228 | 0; //@line 23388
  HEAP32[$201 >> 2] = $114; //@line 23389
  $202 = $ReallocAsyncCtx + 232 | 0; //@line 23390
  HEAP32[$202 >> 2] = $116; //@line 23391
  sp = STACKTOP; //@line 23392
  return;
 } else if ((label | 0) == 9) {
  $221 = HEAP8[$36 + ($119 & 255) >> 0] | 0; //@line 23398
  HEAP8[$72 >> 0] = ($221 & 255) >>> 4 & 7; //@line 23403
  HEAP8[$80 >> 0] = $221 & 15; //@line 23405
  $240 = $$0$be + 5 << 24 >> 24; //@line 23419
  HEAP32[$62 >> 2] = (HEAPU8[$36 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$36 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$36 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 23427
  $250 = HEAP32[(HEAP32[$54 >> 2] | 0) + 40 >> 2] | 0; //@line 23430
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(232) | 0; //@line 23431
  $251 = FUNCTION_TABLE_iii[$250 & 15]($60, $68) | 0; //@line 23432
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 476; //@line 23435
   $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 23436
   HEAP32[$252 >> 2] = $2; //@line 23437
   $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 23438
   HEAP8[$253 >> 0] = $4; //@line 23439
   $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 23440
   HEAP32[$254 >> 2] = $6; //@line 23441
   $255 = $ReallocAsyncCtx2 + 16 | 0; //@line 23442
   HEAP32[$255 >> 2] = $8; //@line 23443
   $256 = $ReallocAsyncCtx2 + 20 | 0; //@line 23444
   HEAP32[$256 >> 2] = $10; //@line 23445
   $257 = $ReallocAsyncCtx2 + 24 | 0; //@line 23446
   HEAP32[$257 >> 2] = $12; //@line 23447
   $258 = $ReallocAsyncCtx2 + 28 | 0; //@line 23448
   HEAP32[$258 >> 2] = $14; //@line 23449
   $259 = $ReallocAsyncCtx2 + 32 | 0; //@line 23450
   HEAP32[$259 >> 2] = $16; //@line 23451
   $260 = $ReallocAsyncCtx2 + 36 | 0; //@line 23452
   HEAP32[$260 >> 2] = $18; //@line 23453
   $261 = $ReallocAsyncCtx2 + 40 | 0; //@line 23454
   HEAP32[$261 >> 2] = $20; //@line 23455
   $262 = $ReallocAsyncCtx2 + 44 | 0; //@line 23456
   HEAP32[$262 >> 2] = $22; //@line 23457
   $263 = $ReallocAsyncCtx2 + 48 | 0; //@line 23458
   HEAP32[$263 >> 2] = $24; //@line 23459
   $264 = $ReallocAsyncCtx2 + 52 | 0; //@line 23460
   HEAP32[$264 >> 2] = $26; //@line 23461
   $265 = $ReallocAsyncCtx2 + 56 | 0; //@line 23462
   HEAP32[$265 >> 2] = $28; //@line 23463
   $266 = $ReallocAsyncCtx2 + 60 | 0; //@line 23464
   HEAP32[$266 >> 2] = $30; //@line 23465
   $267 = $ReallocAsyncCtx2 + 64 | 0; //@line 23466
   HEAP32[$267 >> 2] = $32; //@line 23467
   $268 = $ReallocAsyncCtx2 + 68 | 0; //@line 23468
   HEAP32[$268 >> 2] = $34; //@line 23469
   $269 = $ReallocAsyncCtx2 + 72 | 0; //@line 23470
   HEAP32[$269 >> 2] = $36; //@line 23471
   $270 = $ReallocAsyncCtx2 + 76 | 0; //@line 23472
   HEAP32[$270 >> 2] = $38; //@line 23473
   $271 = $ReallocAsyncCtx2 + 80 | 0; //@line 23474
   HEAP32[$271 >> 2] = $40; //@line 23475
   $272 = $ReallocAsyncCtx2 + 84 | 0; //@line 23476
   HEAP8[$272 >> 0] = $42; //@line 23477
   $273 = $ReallocAsyncCtx2 + 85 | 0; //@line 23478
   HEAP8[$273 >> 0] = $44; //@line 23479
   $274 = $ReallocAsyncCtx2 + 88 | 0; //@line 23480
   HEAP32[$274 >> 2] = $50; //@line 23481
   $275 = $ReallocAsyncCtx2 + 92 | 0; //@line 23482
   HEAP32[$275 >> 2] = $48; //@line 23483
   $276 = $ReallocAsyncCtx2 + 96 | 0; //@line 23484
   HEAP32[$276 >> 2] = $46; //@line 23485
   $277 = $ReallocAsyncCtx2 + 100 | 0; //@line 23486
   HEAP32[$277 >> 2] = $52; //@line 23487
   $278 = $ReallocAsyncCtx2 + 104 | 0; //@line 23488
   HEAP32[$278 >> 2] = $54; //@line 23489
   $279 = $ReallocAsyncCtx2 + 108 | 0; //@line 23490
   HEAP32[$279 >> 2] = $56; //@line 23491
   $280 = $ReallocAsyncCtx2 + 112 | 0; //@line 23492
   HEAP32[$280 >> 2] = $58; //@line 23493
   $281 = $ReallocAsyncCtx2 + 116 | 0; //@line 23494
   HEAP32[$281 >> 2] = $60; //@line 23495
   $282 = $ReallocAsyncCtx2 + 120 | 0; //@line 23496
   HEAP32[$282 >> 2] = $62; //@line 23497
   $283 = $ReallocAsyncCtx2 + 124 | 0; //@line 23498
   HEAP32[$283 >> 2] = $64; //@line 23499
   $284 = $ReallocAsyncCtx2 + 128 | 0; //@line 23500
   HEAP32[$284 >> 2] = $66; //@line 23501
   $285 = $ReallocAsyncCtx2 + 132 | 0; //@line 23502
   HEAP32[$285 >> 2] = $68; //@line 23503
   $286 = $ReallocAsyncCtx2 + 136 | 0; //@line 23504
   HEAP32[$286 >> 2] = $70; //@line 23505
   $287 = $ReallocAsyncCtx2 + 140 | 0; //@line 23506
   HEAP32[$287 >> 2] = $72; //@line 23507
   $288 = $ReallocAsyncCtx2 + 144 | 0; //@line 23508
   HEAP32[$288 >> 2] = $74; //@line 23509
   $289 = $ReallocAsyncCtx2 + 148 | 0; //@line 23510
   HEAP32[$289 >> 2] = $76; //@line 23511
   $290 = $ReallocAsyncCtx2 + 152 | 0; //@line 23512
   HEAP32[$290 >> 2] = $78; //@line 23513
   $291 = $ReallocAsyncCtx2 + 156 | 0; //@line 23514
   HEAP32[$291 >> 2] = $80; //@line 23515
   $292 = $ReallocAsyncCtx2 + 160 | 0; //@line 23516
   HEAP32[$292 >> 2] = $82; //@line 23517
   $293 = $ReallocAsyncCtx2 + 164 | 0; //@line 23518
   HEAP32[$293 >> 2] = $86; //@line 23519
   $294 = $ReallocAsyncCtx2 + 168 | 0; //@line 23520
   HEAP32[$294 >> 2] = $88; //@line 23521
   $295 = $ReallocAsyncCtx2 + 172 | 0; //@line 23522
   HEAP32[$295 >> 2] = $90; //@line 23523
   $296 = $ReallocAsyncCtx2 + 176 | 0; //@line 23524
   HEAP32[$296 >> 2] = $92; //@line 23525
   $297 = $ReallocAsyncCtx2 + 180 | 0; //@line 23526
   HEAP32[$297 >> 2] = $94; //@line 23527
   $298 = $ReallocAsyncCtx2 + 184 | 0; //@line 23528
   HEAP32[$298 >> 2] = $96; //@line 23529
   $299 = $ReallocAsyncCtx2 + 188 | 0; //@line 23530
   HEAP32[$299 >> 2] = $98; //@line 23531
   $300 = $ReallocAsyncCtx2 + 192 | 0; //@line 23532
   HEAP32[$300 >> 2] = $100; //@line 23533
   $301 = $ReallocAsyncCtx2 + 196 | 0; //@line 23534
   HEAP32[$301 >> 2] = $102; //@line 23535
   $302 = $ReallocAsyncCtx2 + 200 | 0; //@line 23536
   HEAP32[$302 >> 2] = $104; //@line 23537
   $303 = $ReallocAsyncCtx2 + 204 | 0; //@line 23538
   HEAP32[$303 >> 2] = $106; //@line 23539
   $304 = $ReallocAsyncCtx2 + 208 | 0; //@line 23540
   HEAP32[$304 >> 2] = $108; //@line 23541
   $305 = $ReallocAsyncCtx2 + 212 | 0; //@line 23542
   HEAP8[$305 >> 0] = $240; //@line 23543
   $306 = $ReallocAsyncCtx2 + 216 | 0; //@line 23544
   HEAP32[$306 >> 2] = $110; //@line 23545
   $307 = $ReallocAsyncCtx2 + 220 | 0; //@line 23546
   HEAP32[$307 >> 2] = $112; //@line 23547
   $308 = $ReallocAsyncCtx2 + 224 | 0; //@line 23548
   HEAP32[$308 >> 2] = $114; //@line 23549
   $309 = $ReallocAsyncCtx2 + 228 | 0; //@line 23550
   HEAP32[$309 >> 2] = $116; //@line 23551
   sp = STACKTOP; //@line 23552
   return;
  }
  HEAP8[___async_retval >> 0] = $251; //@line 23556
  ___async_unwind = 0; //@line 23557
  HEAP32[$ReallocAsyncCtx2 >> 2] = 476; //@line 23558
  $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 23559
  HEAP32[$252 >> 2] = $2; //@line 23560
  $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 23561
  HEAP8[$253 >> 0] = $4; //@line 23562
  $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 23563
  HEAP32[$254 >> 2] = $6; //@line 23564
  $255 = $ReallocAsyncCtx2 + 16 | 0; //@line 23565
  HEAP32[$255 >> 2] = $8; //@line 23566
  $256 = $ReallocAsyncCtx2 + 20 | 0; //@line 23567
  HEAP32[$256 >> 2] = $10; //@line 23568
  $257 = $ReallocAsyncCtx2 + 24 | 0; //@line 23569
  HEAP32[$257 >> 2] = $12; //@line 23570
  $258 = $ReallocAsyncCtx2 + 28 | 0; //@line 23571
  HEAP32[$258 >> 2] = $14; //@line 23572
  $259 = $ReallocAsyncCtx2 + 32 | 0; //@line 23573
  HEAP32[$259 >> 2] = $16; //@line 23574
  $260 = $ReallocAsyncCtx2 + 36 | 0; //@line 23575
  HEAP32[$260 >> 2] = $18; //@line 23576
  $261 = $ReallocAsyncCtx2 + 40 | 0; //@line 23577
  HEAP32[$261 >> 2] = $20; //@line 23578
  $262 = $ReallocAsyncCtx2 + 44 | 0; //@line 23579
  HEAP32[$262 >> 2] = $22; //@line 23580
  $263 = $ReallocAsyncCtx2 + 48 | 0; //@line 23581
  HEAP32[$263 >> 2] = $24; //@line 23582
  $264 = $ReallocAsyncCtx2 + 52 | 0; //@line 23583
  HEAP32[$264 >> 2] = $26; //@line 23584
  $265 = $ReallocAsyncCtx2 + 56 | 0; //@line 23585
  HEAP32[$265 >> 2] = $28; //@line 23586
  $266 = $ReallocAsyncCtx2 + 60 | 0; //@line 23587
  HEAP32[$266 >> 2] = $30; //@line 23588
  $267 = $ReallocAsyncCtx2 + 64 | 0; //@line 23589
  HEAP32[$267 >> 2] = $32; //@line 23590
  $268 = $ReallocAsyncCtx2 + 68 | 0; //@line 23591
  HEAP32[$268 >> 2] = $34; //@line 23592
  $269 = $ReallocAsyncCtx2 + 72 | 0; //@line 23593
  HEAP32[$269 >> 2] = $36; //@line 23594
  $270 = $ReallocAsyncCtx2 + 76 | 0; //@line 23595
  HEAP32[$270 >> 2] = $38; //@line 23596
  $271 = $ReallocAsyncCtx2 + 80 | 0; //@line 23597
  HEAP32[$271 >> 2] = $40; //@line 23598
  $272 = $ReallocAsyncCtx2 + 84 | 0; //@line 23599
  HEAP8[$272 >> 0] = $42; //@line 23600
  $273 = $ReallocAsyncCtx2 + 85 | 0; //@line 23601
  HEAP8[$273 >> 0] = $44; //@line 23602
  $274 = $ReallocAsyncCtx2 + 88 | 0; //@line 23603
  HEAP32[$274 >> 2] = $50; //@line 23604
  $275 = $ReallocAsyncCtx2 + 92 | 0; //@line 23605
  HEAP32[$275 >> 2] = $48; //@line 23606
  $276 = $ReallocAsyncCtx2 + 96 | 0; //@line 23607
  HEAP32[$276 >> 2] = $46; //@line 23608
  $277 = $ReallocAsyncCtx2 + 100 | 0; //@line 23609
  HEAP32[$277 >> 2] = $52; //@line 23610
  $278 = $ReallocAsyncCtx2 + 104 | 0; //@line 23611
  HEAP32[$278 >> 2] = $54; //@line 23612
  $279 = $ReallocAsyncCtx2 + 108 | 0; //@line 23613
  HEAP32[$279 >> 2] = $56; //@line 23614
  $280 = $ReallocAsyncCtx2 + 112 | 0; //@line 23615
  HEAP32[$280 >> 2] = $58; //@line 23616
  $281 = $ReallocAsyncCtx2 + 116 | 0; //@line 23617
  HEAP32[$281 >> 2] = $60; //@line 23618
  $282 = $ReallocAsyncCtx2 + 120 | 0; //@line 23619
  HEAP32[$282 >> 2] = $62; //@line 23620
  $283 = $ReallocAsyncCtx2 + 124 | 0; //@line 23621
  HEAP32[$283 >> 2] = $64; //@line 23622
  $284 = $ReallocAsyncCtx2 + 128 | 0; //@line 23623
  HEAP32[$284 >> 2] = $66; //@line 23624
  $285 = $ReallocAsyncCtx2 + 132 | 0; //@line 23625
  HEAP32[$285 >> 2] = $68; //@line 23626
  $286 = $ReallocAsyncCtx2 + 136 | 0; //@line 23627
  HEAP32[$286 >> 2] = $70; //@line 23628
  $287 = $ReallocAsyncCtx2 + 140 | 0; //@line 23629
  HEAP32[$287 >> 2] = $72; //@line 23630
  $288 = $ReallocAsyncCtx2 + 144 | 0; //@line 23631
  HEAP32[$288 >> 2] = $74; //@line 23632
  $289 = $ReallocAsyncCtx2 + 148 | 0; //@line 23633
  HEAP32[$289 >> 2] = $76; //@line 23634
  $290 = $ReallocAsyncCtx2 + 152 | 0; //@line 23635
  HEAP32[$290 >> 2] = $78; //@line 23636
  $291 = $ReallocAsyncCtx2 + 156 | 0; //@line 23637
  HEAP32[$291 >> 2] = $80; //@line 23638
  $292 = $ReallocAsyncCtx2 + 160 | 0; //@line 23639
  HEAP32[$292 >> 2] = $82; //@line 23640
  $293 = $ReallocAsyncCtx2 + 164 | 0; //@line 23641
  HEAP32[$293 >> 2] = $86; //@line 23642
  $294 = $ReallocAsyncCtx2 + 168 | 0; //@line 23643
  HEAP32[$294 >> 2] = $88; //@line 23644
  $295 = $ReallocAsyncCtx2 + 172 | 0; //@line 23645
  HEAP32[$295 >> 2] = $90; //@line 23646
  $296 = $ReallocAsyncCtx2 + 176 | 0; //@line 23647
  HEAP32[$296 >> 2] = $92; //@line 23648
  $297 = $ReallocAsyncCtx2 + 180 | 0; //@line 23649
  HEAP32[$297 >> 2] = $94; //@line 23650
  $298 = $ReallocAsyncCtx2 + 184 | 0; //@line 23651
  HEAP32[$298 >> 2] = $96; //@line 23652
  $299 = $ReallocAsyncCtx2 + 188 | 0; //@line 23653
  HEAP32[$299 >> 2] = $98; //@line 23654
  $300 = $ReallocAsyncCtx2 + 192 | 0; //@line 23655
  HEAP32[$300 >> 2] = $100; //@line 23656
  $301 = $ReallocAsyncCtx2 + 196 | 0; //@line 23657
  HEAP32[$301 >> 2] = $102; //@line 23658
  $302 = $ReallocAsyncCtx2 + 200 | 0; //@line 23659
  HEAP32[$302 >> 2] = $104; //@line 23660
  $303 = $ReallocAsyncCtx2 + 204 | 0; //@line 23661
  HEAP32[$303 >> 2] = $106; //@line 23662
  $304 = $ReallocAsyncCtx2 + 208 | 0; //@line 23663
  HEAP32[$304 >> 2] = $108; //@line 23664
  $305 = $ReallocAsyncCtx2 + 212 | 0; //@line 23665
  HEAP8[$305 >> 0] = $240; //@line 23666
  $306 = $ReallocAsyncCtx2 + 216 | 0; //@line 23667
  HEAP32[$306 >> 2] = $110; //@line 23668
  $307 = $ReallocAsyncCtx2 + 220 | 0; //@line 23669
  HEAP32[$307 >> 2] = $112; //@line 23670
  $308 = $ReallocAsyncCtx2 + 224 | 0; //@line 23671
  HEAP32[$308 >> 2] = $114; //@line 23672
  $309 = $ReallocAsyncCtx2 + 228 | 0; //@line 23673
  HEAP32[$309 >> 2] = $116; //@line 23674
  sp = STACKTOP; //@line 23675
  return;
 } else if ((label | 0) == 13) {
  $313 = HEAP32[$311 >> 2] | 0; //@line 23679
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(232) | 0; //@line 23680
  $314 = FUNCTION_TABLE_ii[$313 & 15]($16) | 0; //@line 23681
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 477; //@line 23684
   $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 23685
   HEAP32[$315 >> 2] = $2; //@line 23686
   $316 = $ReallocAsyncCtx3 + 8 | 0; //@line 23687
   HEAP8[$316 >> 0] = $4; //@line 23688
   $317 = $ReallocAsyncCtx3 + 12 | 0; //@line 23689
   HEAP32[$317 >> 2] = $6; //@line 23690
   $318 = $ReallocAsyncCtx3 + 16 | 0; //@line 23691
   HEAP32[$318 >> 2] = $8; //@line 23692
   $319 = $ReallocAsyncCtx3 + 20 | 0; //@line 23693
   HEAP32[$319 >> 2] = $10; //@line 23694
   $320 = $ReallocAsyncCtx3 + 24 | 0; //@line 23695
   HEAP32[$320 >> 2] = $12; //@line 23696
   $321 = $ReallocAsyncCtx3 + 28 | 0; //@line 23697
   HEAP32[$321 >> 2] = $14; //@line 23698
   $322 = $ReallocAsyncCtx3 + 32 | 0; //@line 23699
   HEAP32[$322 >> 2] = $16; //@line 23700
   $323 = $ReallocAsyncCtx3 + 36 | 0; //@line 23701
   HEAP32[$323 >> 2] = $18; //@line 23702
   $324 = $ReallocAsyncCtx3 + 40 | 0; //@line 23703
   HEAP32[$324 >> 2] = $20; //@line 23704
   $325 = $ReallocAsyncCtx3 + 44 | 0; //@line 23705
   HEAP32[$325 >> 2] = $22; //@line 23706
   $326 = $ReallocAsyncCtx3 + 48 | 0; //@line 23707
   HEAP32[$326 >> 2] = $24; //@line 23708
   $327 = $ReallocAsyncCtx3 + 52 | 0; //@line 23709
   HEAP32[$327 >> 2] = $26; //@line 23710
   $328 = $ReallocAsyncCtx3 + 56 | 0; //@line 23711
   HEAP32[$328 >> 2] = $28; //@line 23712
   $329 = $ReallocAsyncCtx3 + 60 | 0; //@line 23713
   HEAP32[$329 >> 2] = $30; //@line 23714
   $330 = $ReallocAsyncCtx3 + 64 | 0; //@line 23715
   HEAP32[$330 >> 2] = $32; //@line 23716
   $331 = $ReallocAsyncCtx3 + 68 | 0; //@line 23717
   HEAP32[$331 >> 2] = $34; //@line 23718
   $332 = $ReallocAsyncCtx3 + 72 | 0; //@line 23719
   HEAP8[$332 >> 0] = $119; //@line 23720
   $333 = $ReallocAsyncCtx3 + 76 | 0; //@line 23721
   HEAP32[$333 >> 2] = $36; //@line 23722
   $334 = $ReallocAsyncCtx3 + 80 | 0; //@line 23723
   HEAP32[$334 >> 2] = $38; //@line 23724
   $335 = $ReallocAsyncCtx3 + 84 | 0; //@line 23725
   HEAP32[$335 >> 2] = $40; //@line 23726
   $336 = $ReallocAsyncCtx3 + 88 | 0; //@line 23727
   HEAP8[$336 >> 0] = $42; //@line 23728
   $337 = $ReallocAsyncCtx3 + 89 | 0; //@line 23729
   HEAP8[$337 >> 0] = $44; //@line 23730
   $338 = $ReallocAsyncCtx3 + 92 | 0; //@line 23731
   HEAP32[$338 >> 2] = $50; //@line 23732
   $339 = $ReallocAsyncCtx3 + 96 | 0; //@line 23733
   HEAP32[$339 >> 2] = $48; //@line 23734
   $340 = $ReallocAsyncCtx3 + 100 | 0; //@line 23735
   HEAP32[$340 >> 2] = $46; //@line 23736
   $341 = $ReallocAsyncCtx3 + 104 | 0; //@line 23737
   HEAP32[$341 >> 2] = $52; //@line 23738
   $342 = $ReallocAsyncCtx3 + 108 | 0; //@line 23739
   HEAP32[$342 >> 2] = $54; //@line 23740
   $343 = $ReallocAsyncCtx3 + 112 | 0; //@line 23741
   HEAP32[$343 >> 2] = $56; //@line 23742
   $344 = $ReallocAsyncCtx3 + 116 | 0; //@line 23743
   HEAP32[$344 >> 2] = $58; //@line 23744
   $345 = $ReallocAsyncCtx3 + 120 | 0; //@line 23745
   HEAP32[$345 >> 2] = $60; //@line 23746
   $346 = $ReallocAsyncCtx3 + 124 | 0; //@line 23747
   HEAP32[$346 >> 2] = $62; //@line 23748
   $347 = $ReallocAsyncCtx3 + 128 | 0; //@line 23749
   HEAP32[$347 >> 2] = $64; //@line 23750
   $348 = $ReallocAsyncCtx3 + 132 | 0; //@line 23751
   HEAP32[$348 >> 2] = $66; //@line 23752
   $349 = $ReallocAsyncCtx3 + 136 | 0; //@line 23753
   HEAP32[$349 >> 2] = $68; //@line 23754
   $350 = $ReallocAsyncCtx3 + 140 | 0; //@line 23755
   HEAP32[$350 >> 2] = $70; //@line 23756
   $351 = $ReallocAsyncCtx3 + 144 | 0; //@line 23757
   HEAP32[$351 >> 2] = $72; //@line 23758
   $352 = $ReallocAsyncCtx3 + 148 | 0; //@line 23759
   HEAP32[$352 >> 2] = $74; //@line 23760
   $353 = $ReallocAsyncCtx3 + 152 | 0; //@line 23761
   HEAP32[$353 >> 2] = $76; //@line 23762
   $354 = $ReallocAsyncCtx3 + 156 | 0; //@line 23763
   HEAP32[$354 >> 2] = $78; //@line 23764
   $355 = $ReallocAsyncCtx3 + 160 | 0; //@line 23765
   HEAP32[$355 >> 2] = $80; //@line 23766
   $356 = $ReallocAsyncCtx3 + 164 | 0; //@line 23767
   HEAP32[$356 >> 2] = $82; //@line 23768
   $357 = $ReallocAsyncCtx3 + 168 | 0; //@line 23769
   HEAP32[$357 >> 2] = $86; //@line 23770
   $358 = $ReallocAsyncCtx3 + 172 | 0; //@line 23771
   HEAP32[$358 >> 2] = $88; //@line 23772
   $359 = $ReallocAsyncCtx3 + 176 | 0; //@line 23773
   HEAP32[$359 >> 2] = $90; //@line 23774
   $360 = $ReallocAsyncCtx3 + 180 | 0; //@line 23775
   HEAP32[$360 >> 2] = $92; //@line 23776
   $361 = $ReallocAsyncCtx3 + 184 | 0; //@line 23777
   HEAP32[$361 >> 2] = $94; //@line 23778
   $362 = $ReallocAsyncCtx3 + 188 | 0; //@line 23779
   HEAP32[$362 >> 2] = $96; //@line 23780
   $363 = $ReallocAsyncCtx3 + 192 | 0; //@line 23781
   HEAP32[$363 >> 2] = $98; //@line 23782
   $364 = $ReallocAsyncCtx3 + 196 | 0; //@line 23783
   HEAP32[$364 >> 2] = $100; //@line 23784
   $365 = $ReallocAsyncCtx3 + 200 | 0; //@line 23785
   HEAP32[$365 >> 2] = $102; //@line 23786
   $366 = $ReallocAsyncCtx3 + 204 | 0; //@line 23787
   HEAP32[$366 >> 2] = $104; //@line 23788
   $367 = $ReallocAsyncCtx3 + 208 | 0; //@line 23789
   HEAP32[$367 >> 2] = $106; //@line 23790
   $368 = $ReallocAsyncCtx3 + 212 | 0; //@line 23791
   HEAP32[$368 >> 2] = $108; //@line 23792
   $369 = $ReallocAsyncCtx3 + 216 | 0; //@line 23793
   HEAP32[$369 >> 2] = $110; //@line 23794
   $370 = $ReallocAsyncCtx3 + 220 | 0; //@line 23795
   HEAP32[$370 >> 2] = $112; //@line 23796
   $371 = $ReallocAsyncCtx3 + 224 | 0; //@line 23797
   HEAP32[$371 >> 2] = $114; //@line 23798
   $372 = $ReallocAsyncCtx3 + 228 | 0; //@line 23799
   HEAP32[$372 >> 2] = $116; //@line 23800
   sp = STACKTOP; //@line 23801
   return;
  }
  HEAP8[___async_retval >> 0] = $314; //@line 23805
  ___async_unwind = 0; //@line 23806
  HEAP32[$ReallocAsyncCtx3 >> 2] = 477; //@line 23807
  $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 23808
  HEAP32[$315 >> 2] = $2; //@line 23809
  $316 = $ReallocAsyncCtx3 + 8 | 0; //@line 23810
  HEAP8[$316 >> 0] = $4; //@line 23811
  $317 = $ReallocAsyncCtx3 + 12 | 0; //@line 23812
  HEAP32[$317 >> 2] = $6; //@line 23813
  $318 = $ReallocAsyncCtx3 + 16 | 0; //@line 23814
  HEAP32[$318 >> 2] = $8; //@line 23815
  $319 = $ReallocAsyncCtx3 + 20 | 0; //@line 23816
  HEAP32[$319 >> 2] = $10; //@line 23817
  $320 = $ReallocAsyncCtx3 + 24 | 0; //@line 23818
  HEAP32[$320 >> 2] = $12; //@line 23819
  $321 = $ReallocAsyncCtx3 + 28 | 0; //@line 23820
  HEAP32[$321 >> 2] = $14; //@line 23821
  $322 = $ReallocAsyncCtx3 + 32 | 0; //@line 23822
  HEAP32[$322 >> 2] = $16; //@line 23823
  $323 = $ReallocAsyncCtx3 + 36 | 0; //@line 23824
  HEAP32[$323 >> 2] = $18; //@line 23825
  $324 = $ReallocAsyncCtx3 + 40 | 0; //@line 23826
  HEAP32[$324 >> 2] = $20; //@line 23827
  $325 = $ReallocAsyncCtx3 + 44 | 0; //@line 23828
  HEAP32[$325 >> 2] = $22; //@line 23829
  $326 = $ReallocAsyncCtx3 + 48 | 0; //@line 23830
  HEAP32[$326 >> 2] = $24; //@line 23831
  $327 = $ReallocAsyncCtx3 + 52 | 0; //@line 23832
  HEAP32[$327 >> 2] = $26; //@line 23833
  $328 = $ReallocAsyncCtx3 + 56 | 0; //@line 23834
  HEAP32[$328 >> 2] = $28; //@line 23835
  $329 = $ReallocAsyncCtx3 + 60 | 0; //@line 23836
  HEAP32[$329 >> 2] = $30; //@line 23837
  $330 = $ReallocAsyncCtx3 + 64 | 0; //@line 23838
  HEAP32[$330 >> 2] = $32; //@line 23839
  $331 = $ReallocAsyncCtx3 + 68 | 0; //@line 23840
  HEAP32[$331 >> 2] = $34; //@line 23841
  $332 = $ReallocAsyncCtx3 + 72 | 0; //@line 23842
  HEAP8[$332 >> 0] = $119; //@line 23843
  $333 = $ReallocAsyncCtx3 + 76 | 0; //@line 23844
  HEAP32[$333 >> 2] = $36; //@line 23845
  $334 = $ReallocAsyncCtx3 + 80 | 0; //@line 23846
  HEAP32[$334 >> 2] = $38; //@line 23847
  $335 = $ReallocAsyncCtx3 + 84 | 0; //@line 23848
  HEAP32[$335 >> 2] = $40; //@line 23849
  $336 = $ReallocAsyncCtx3 + 88 | 0; //@line 23850
  HEAP8[$336 >> 0] = $42; //@line 23851
  $337 = $ReallocAsyncCtx3 + 89 | 0; //@line 23852
  HEAP8[$337 >> 0] = $44; //@line 23853
  $338 = $ReallocAsyncCtx3 + 92 | 0; //@line 23854
  HEAP32[$338 >> 2] = $50; //@line 23855
  $339 = $ReallocAsyncCtx3 + 96 | 0; //@line 23856
  HEAP32[$339 >> 2] = $48; //@line 23857
  $340 = $ReallocAsyncCtx3 + 100 | 0; //@line 23858
  HEAP32[$340 >> 2] = $46; //@line 23859
  $341 = $ReallocAsyncCtx3 + 104 | 0; //@line 23860
  HEAP32[$341 >> 2] = $52; //@line 23861
  $342 = $ReallocAsyncCtx3 + 108 | 0; //@line 23862
  HEAP32[$342 >> 2] = $54; //@line 23863
  $343 = $ReallocAsyncCtx3 + 112 | 0; //@line 23864
  HEAP32[$343 >> 2] = $56; //@line 23865
  $344 = $ReallocAsyncCtx3 + 116 | 0; //@line 23866
  HEAP32[$344 >> 2] = $58; //@line 23867
  $345 = $ReallocAsyncCtx3 + 120 | 0; //@line 23868
  HEAP32[$345 >> 2] = $60; //@line 23869
  $346 = $ReallocAsyncCtx3 + 124 | 0; //@line 23870
  HEAP32[$346 >> 2] = $62; //@line 23871
  $347 = $ReallocAsyncCtx3 + 128 | 0; //@line 23872
  HEAP32[$347 >> 2] = $64; //@line 23873
  $348 = $ReallocAsyncCtx3 + 132 | 0; //@line 23874
  HEAP32[$348 >> 2] = $66; //@line 23875
  $349 = $ReallocAsyncCtx3 + 136 | 0; //@line 23876
  HEAP32[$349 >> 2] = $68; //@line 23877
  $350 = $ReallocAsyncCtx3 + 140 | 0; //@line 23878
  HEAP32[$350 >> 2] = $70; //@line 23879
  $351 = $ReallocAsyncCtx3 + 144 | 0; //@line 23880
  HEAP32[$351 >> 2] = $72; //@line 23881
  $352 = $ReallocAsyncCtx3 + 148 | 0; //@line 23882
  HEAP32[$352 >> 2] = $74; //@line 23883
  $353 = $ReallocAsyncCtx3 + 152 | 0; //@line 23884
  HEAP32[$353 >> 2] = $76; //@line 23885
  $354 = $ReallocAsyncCtx3 + 156 | 0; //@line 23886
  HEAP32[$354 >> 2] = $78; //@line 23887
  $355 = $ReallocAsyncCtx3 + 160 | 0; //@line 23888
  HEAP32[$355 >> 2] = $80; //@line 23889
  $356 = $ReallocAsyncCtx3 + 164 | 0; //@line 23890
  HEAP32[$356 >> 2] = $82; //@line 23891
  $357 = $ReallocAsyncCtx3 + 168 | 0; //@line 23892
  HEAP32[$357 >> 2] = $86; //@line 23893
  $358 = $ReallocAsyncCtx3 + 172 | 0; //@line 23894
  HEAP32[$358 >> 2] = $88; //@line 23895
  $359 = $ReallocAsyncCtx3 + 176 | 0; //@line 23896
  HEAP32[$359 >> 2] = $90; //@line 23897
  $360 = $ReallocAsyncCtx3 + 180 | 0; //@line 23898
  HEAP32[$360 >> 2] = $92; //@line 23899
  $361 = $ReallocAsyncCtx3 + 184 | 0; //@line 23900
  HEAP32[$361 >> 2] = $94; //@line 23901
  $362 = $ReallocAsyncCtx3 + 188 | 0; //@line 23902
  HEAP32[$362 >> 2] = $96; //@line 23903
  $363 = $ReallocAsyncCtx3 + 192 | 0; //@line 23904
  HEAP32[$363 >> 2] = $98; //@line 23905
  $364 = $ReallocAsyncCtx3 + 196 | 0; //@line 23906
  HEAP32[$364 >> 2] = $100; //@line 23907
  $365 = $ReallocAsyncCtx3 + 200 | 0; //@line 23908
  HEAP32[$365 >> 2] = $102; //@line 23909
  $366 = $ReallocAsyncCtx3 + 204 | 0; //@line 23910
  HEAP32[$366 >> 2] = $104; //@line 23911
  $367 = $ReallocAsyncCtx3 + 208 | 0; //@line 23912
  HEAP32[$367 >> 2] = $106; //@line 23913
  $368 = $ReallocAsyncCtx3 + 212 | 0; //@line 23914
  HEAP32[$368 >> 2] = $108; //@line 23915
  $369 = $ReallocAsyncCtx3 + 216 | 0; //@line 23916
  HEAP32[$369 >> 2] = $110; //@line 23917
  $370 = $ReallocAsyncCtx3 + 220 | 0; //@line 23918
  HEAP32[$370 >> 2] = $112; //@line 23919
  $371 = $ReallocAsyncCtx3 + 224 | 0; //@line 23920
  HEAP32[$371 >> 2] = $114; //@line 23921
  $372 = $ReallocAsyncCtx3 + 228 | 0; //@line 23922
  HEAP32[$372 >> 2] = $116; //@line 23923
  sp = STACKTOP; //@line 23924
  return;
 } else if ((label | 0) == 18) {
  $392 = HEAP8[$36 + ($119 & 255) >> 0] | 0; //@line 23931
  HEAP32[$26 >> 2] = (HEAPU8[$36 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$36 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$36 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 23952
  HEAP32[$34 >> 2] = 0; //@line 23953
  $413 = $$0$be + 6 << 24 >> 24; //@line 23954
  HEAP8[$48 >> 0] = HEAP8[$36 + ($$0$be + 5 & 255) >> 0] | 0; //@line 23958
  $419 = HEAP32[(HEAP32[$56 >> 2] | 0) + 8 >> 2] | 0; //@line 23961
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(228) | 0; //@line 23962
  $420 = FUNCTION_TABLE_iiii[$419 & 31]($60, $392, $94) | 0; //@line 23963
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 478; //@line 23966
   $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 23967
   HEAP32[$421 >> 2] = $2; //@line 23968
   $422 = $ReallocAsyncCtx4 + 8 | 0; //@line 23969
   HEAP8[$422 >> 0] = $4; //@line 23970
   $423 = $ReallocAsyncCtx4 + 12 | 0; //@line 23971
   HEAP32[$423 >> 2] = $6; //@line 23972
   $424 = $ReallocAsyncCtx4 + 16 | 0; //@line 23973
   HEAP32[$424 >> 2] = $8; //@line 23974
   $425 = $ReallocAsyncCtx4 + 20 | 0; //@line 23975
   HEAP32[$425 >> 2] = $10; //@line 23976
   $426 = $ReallocAsyncCtx4 + 24 | 0; //@line 23977
   HEAP32[$426 >> 2] = $12; //@line 23978
   $427 = $ReallocAsyncCtx4 + 28 | 0; //@line 23979
   HEAP32[$427 >> 2] = $14; //@line 23980
   $428 = $ReallocAsyncCtx4 + 32 | 0; //@line 23981
   HEAP32[$428 >> 2] = $16; //@line 23982
   $429 = $ReallocAsyncCtx4 + 36 | 0; //@line 23983
   HEAP32[$429 >> 2] = $18; //@line 23984
   $430 = $ReallocAsyncCtx4 + 40 | 0; //@line 23985
   HEAP32[$430 >> 2] = $20; //@line 23986
   $431 = $ReallocAsyncCtx4 + 44 | 0; //@line 23987
   HEAP32[$431 >> 2] = $22; //@line 23988
   $432 = $ReallocAsyncCtx4 + 48 | 0; //@line 23989
   HEAP32[$432 >> 2] = $24; //@line 23990
   $433 = $ReallocAsyncCtx4 + 52 | 0; //@line 23991
   HEAP32[$433 >> 2] = $26; //@line 23992
   $434 = $ReallocAsyncCtx4 + 56 | 0; //@line 23993
   HEAP32[$434 >> 2] = $28; //@line 23994
   $435 = $ReallocAsyncCtx4 + 60 | 0; //@line 23995
   HEAP32[$435 >> 2] = $30; //@line 23996
   $436 = $ReallocAsyncCtx4 + 64 | 0; //@line 23997
   HEAP32[$436 >> 2] = $32; //@line 23998
   $437 = $ReallocAsyncCtx4 + 68 | 0; //@line 23999
   HEAP32[$437 >> 2] = $34; //@line 24000
   $438 = $ReallocAsyncCtx4 + 72 | 0; //@line 24001
   HEAP32[$438 >> 2] = $36; //@line 24002
   $439 = $ReallocAsyncCtx4 + 76 | 0; //@line 24003
   HEAP32[$439 >> 2] = $38; //@line 24004
   $440 = $ReallocAsyncCtx4 + 80 | 0; //@line 24005
   HEAP32[$440 >> 2] = $40; //@line 24006
   $441 = $ReallocAsyncCtx4 + 84 | 0; //@line 24007
   HEAP8[$441 >> 0] = $413; //@line 24008
   $442 = $ReallocAsyncCtx4 + 85 | 0; //@line 24009
   HEAP8[$442 >> 0] = $44; //@line 24010
   $443 = $ReallocAsyncCtx4 + 86 | 0; //@line 24011
   HEAP8[$443 >> 0] = $42; //@line 24012
   $444 = $ReallocAsyncCtx4 + 88 | 0; //@line 24013
   HEAP32[$444 >> 2] = $48; //@line 24014
   $445 = $ReallocAsyncCtx4 + 92 | 0; //@line 24015
   HEAP32[$445 >> 2] = $46; //@line 24016
   $446 = $ReallocAsyncCtx4 + 96 | 0; //@line 24017
   HEAP32[$446 >> 2] = $50; //@line 24018
   $447 = $ReallocAsyncCtx4 + 100 | 0; //@line 24019
   HEAP32[$447 >> 2] = $52; //@line 24020
   $448 = $ReallocAsyncCtx4 + 104 | 0; //@line 24021
   HEAP32[$448 >> 2] = $54; //@line 24022
   $449 = $ReallocAsyncCtx4 + 108 | 0; //@line 24023
   HEAP32[$449 >> 2] = $56; //@line 24024
   $450 = $ReallocAsyncCtx4 + 112 | 0; //@line 24025
   HEAP32[$450 >> 2] = $58; //@line 24026
   $451 = $ReallocAsyncCtx4 + 116 | 0; //@line 24027
   HEAP32[$451 >> 2] = $60; //@line 24028
   $452 = $ReallocAsyncCtx4 + 120 | 0; //@line 24029
   HEAP32[$452 >> 2] = $62; //@line 24030
   $453 = $ReallocAsyncCtx4 + 124 | 0; //@line 24031
   HEAP32[$453 >> 2] = $64; //@line 24032
   $454 = $ReallocAsyncCtx4 + 128 | 0; //@line 24033
   HEAP32[$454 >> 2] = $66; //@line 24034
   $455 = $ReallocAsyncCtx4 + 132 | 0; //@line 24035
   HEAP32[$455 >> 2] = $68; //@line 24036
   $456 = $ReallocAsyncCtx4 + 136 | 0; //@line 24037
   HEAP32[$456 >> 2] = $70; //@line 24038
   $457 = $ReallocAsyncCtx4 + 140 | 0; //@line 24039
   HEAP32[$457 >> 2] = $72; //@line 24040
   $458 = $ReallocAsyncCtx4 + 144 | 0; //@line 24041
   HEAP32[$458 >> 2] = $74; //@line 24042
   $459 = $ReallocAsyncCtx4 + 148 | 0; //@line 24043
   HEAP32[$459 >> 2] = $76; //@line 24044
   $460 = $ReallocAsyncCtx4 + 152 | 0; //@line 24045
   HEAP32[$460 >> 2] = $78; //@line 24046
   $461 = $ReallocAsyncCtx4 + 156 | 0; //@line 24047
   HEAP32[$461 >> 2] = $80; //@line 24048
   $462 = $ReallocAsyncCtx4 + 160 | 0; //@line 24049
   HEAP32[$462 >> 2] = $82; //@line 24050
   $463 = $ReallocAsyncCtx4 + 164 | 0; //@line 24051
   HEAP32[$463 >> 2] = $86; //@line 24052
   $464 = $ReallocAsyncCtx4 + 168 | 0; //@line 24053
   HEAP32[$464 >> 2] = $88; //@line 24054
   $465 = $ReallocAsyncCtx4 + 172 | 0; //@line 24055
   HEAP32[$465 >> 2] = $90; //@line 24056
   $466 = $ReallocAsyncCtx4 + 176 | 0; //@line 24057
   HEAP32[$466 >> 2] = $92; //@line 24058
   $467 = $ReallocAsyncCtx4 + 180 | 0; //@line 24059
   HEAP32[$467 >> 2] = $94; //@line 24060
   $468 = $ReallocAsyncCtx4 + 184 | 0; //@line 24061
   HEAP32[$468 >> 2] = $96; //@line 24062
   $469 = $ReallocAsyncCtx4 + 188 | 0; //@line 24063
   HEAP32[$469 >> 2] = $98; //@line 24064
   $470 = $ReallocAsyncCtx4 + 192 | 0; //@line 24065
   HEAP32[$470 >> 2] = $100; //@line 24066
   $471 = $ReallocAsyncCtx4 + 196 | 0; //@line 24067
   HEAP32[$471 >> 2] = $102; //@line 24068
   $472 = $ReallocAsyncCtx4 + 200 | 0; //@line 24069
   HEAP32[$472 >> 2] = $104; //@line 24070
   $473 = $ReallocAsyncCtx4 + 204 | 0; //@line 24071
   HEAP32[$473 >> 2] = $106; //@line 24072
   $474 = $ReallocAsyncCtx4 + 208 | 0; //@line 24073
   HEAP32[$474 >> 2] = $108; //@line 24074
   $475 = $ReallocAsyncCtx4 + 212 | 0; //@line 24075
   HEAP32[$475 >> 2] = $110; //@line 24076
   $476 = $ReallocAsyncCtx4 + 216 | 0; //@line 24077
   HEAP32[$476 >> 2] = $112; //@line 24078
   $477 = $ReallocAsyncCtx4 + 220 | 0; //@line 24079
   HEAP32[$477 >> 2] = $114; //@line 24080
   $478 = $ReallocAsyncCtx4 + 224 | 0; //@line 24081
   HEAP32[$478 >> 2] = $116; //@line 24082
   sp = STACKTOP; //@line 24083
   return;
  }
  HEAP8[___async_retval >> 0] = $420; //@line 24087
  ___async_unwind = 0; //@line 24088
  HEAP32[$ReallocAsyncCtx4 >> 2] = 478; //@line 24089
  $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 24090
  HEAP32[$421 >> 2] = $2; //@line 24091
  $422 = $ReallocAsyncCtx4 + 8 | 0; //@line 24092
  HEAP8[$422 >> 0] = $4; //@line 24093
  $423 = $ReallocAsyncCtx4 + 12 | 0; //@line 24094
  HEAP32[$423 >> 2] = $6; //@line 24095
  $424 = $ReallocAsyncCtx4 + 16 | 0; //@line 24096
  HEAP32[$424 >> 2] = $8; //@line 24097
  $425 = $ReallocAsyncCtx4 + 20 | 0; //@line 24098
  HEAP32[$425 >> 2] = $10; //@line 24099
  $426 = $ReallocAsyncCtx4 + 24 | 0; //@line 24100
  HEAP32[$426 >> 2] = $12; //@line 24101
  $427 = $ReallocAsyncCtx4 + 28 | 0; //@line 24102
  HEAP32[$427 >> 2] = $14; //@line 24103
  $428 = $ReallocAsyncCtx4 + 32 | 0; //@line 24104
  HEAP32[$428 >> 2] = $16; //@line 24105
  $429 = $ReallocAsyncCtx4 + 36 | 0; //@line 24106
  HEAP32[$429 >> 2] = $18; //@line 24107
  $430 = $ReallocAsyncCtx4 + 40 | 0; //@line 24108
  HEAP32[$430 >> 2] = $20; //@line 24109
  $431 = $ReallocAsyncCtx4 + 44 | 0; //@line 24110
  HEAP32[$431 >> 2] = $22; //@line 24111
  $432 = $ReallocAsyncCtx4 + 48 | 0; //@line 24112
  HEAP32[$432 >> 2] = $24; //@line 24113
  $433 = $ReallocAsyncCtx4 + 52 | 0; //@line 24114
  HEAP32[$433 >> 2] = $26; //@line 24115
  $434 = $ReallocAsyncCtx4 + 56 | 0; //@line 24116
  HEAP32[$434 >> 2] = $28; //@line 24117
  $435 = $ReallocAsyncCtx4 + 60 | 0; //@line 24118
  HEAP32[$435 >> 2] = $30; //@line 24119
  $436 = $ReallocAsyncCtx4 + 64 | 0; //@line 24120
  HEAP32[$436 >> 2] = $32; //@line 24121
  $437 = $ReallocAsyncCtx4 + 68 | 0; //@line 24122
  HEAP32[$437 >> 2] = $34; //@line 24123
  $438 = $ReallocAsyncCtx4 + 72 | 0; //@line 24124
  HEAP32[$438 >> 2] = $36; //@line 24125
  $439 = $ReallocAsyncCtx4 + 76 | 0; //@line 24126
  HEAP32[$439 >> 2] = $38; //@line 24127
  $440 = $ReallocAsyncCtx4 + 80 | 0; //@line 24128
  HEAP32[$440 >> 2] = $40; //@line 24129
  $441 = $ReallocAsyncCtx4 + 84 | 0; //@line 24130
  HEAP8[$441 >> 0] = $413; //@line 24131
  $442 = $ReallocAsyncCtx4 + 85 | 0; //@line 24132
  HEAP8[$442 >> 0] = $44; //@line 24133
  $443 = $ReallocAsyncCtx4 + 86 | 0; //@line 24134
  HEAP8[$443 >> 0] = $42; //@line 24135
  $444 = $ReallocAsyncCtx4 + 88 | 0; //@line 24136
  HEAP32[$444 >> 2] = $48; //@line 24137
  $445 = $ReallocAsyncCtx4 + 92 | 0; //@line 24138
  HEAP32[$445 >> 2] = $46; //@line 24139
  $446 = $ReallocAsyncCtx4 + 96 | 0; //@line 24140
  HEAP32[$446 >> 2] = $50; //@line 24141
  $447 = $ReallocAsyncCtx4 + 100 | 0; //@line 24142
  HEAP32[$447 >> 2] = $52; //@line 24143
  $448 = $ReallocAsyncCtx4 + 104 | 0; //@line 24144
  HEAP32[$448 >> 2] = $54; //@line 24145
  $449 = $ReallocAsyncCtx4 + 108 | 0; //@line 24146
  HEAP32[$449 >> 2] = $56; //@line 24147
  $450 = $ReallocAsyncCtx4 + 112 | 0; //@line 24148
  HEAP32[$450 >> 2] = $58; //@line 24149
  $451 = $ReallocAsyncCtx4 + 116 | 0; //@line 24150
  HEAP32[$451 >> 2] = $60; //@line 24151
  $452 = $ReallocAsyncCtx4 + 120 | 0; //@line 24152
  HEAP32[$452 >> 2] = $62; //@line 24153
  $453 = $ReallocAsyncCtx4 + 124 | 0; //@line 24154
  HEAP32[$453 >> 2] = $64; //@line 24155
  $454 = $ReallocAsyncCtx4 + 128 | 0; //@line 24156
  HEAP32[$454 >> 2] = $66; //@line 24157
  $455 = $ReallocAsyncCtx4 + 132 | 0; //@line 24158
  HEAP32[$455 >> 2] = $68; //@line 24159
  $456 = $ReallocAsyncCtx4 + 136 | 0; //@line 24160
  HEAP32[$456 >> 2] = $70; //@line 24161
  $457 = $ReallocAsyncCtx4 + 140 | 0; //@line 24162
  HEAP32[$457 >> 2] = $72; //@line 24163
  $458 = $ReallocAsyncCtx4 + 144 | 0; //@line 24164
  HEAP32[$458 >> 2] = $74; //@line 24165
  $459 = $ReallocAsyncCtx4 + 148 | 0; //@line 24166
  HEAP32[$459 >> 2] = $76; //@line 24167
  $460 = $ReallocAsyncCtx4 + 152 | 0; //@line 24168
  HEAP32[$460 >> 2] = $78; //@line 24169
  $461 = $ReallocAsyncCtx4 + 156 | 0; //@line 24170
  HEAP32[$461 >> 2] = $80; //@line 24171
  $462 = $ReallocAsyncCtx4 + 160 | 0; //@line 24172
  HEAP32[$462 >> 2] = $82; //@line 24173
  $463 = $ReallocAsyncCtx4 + 164 | 0; //@line 24174
  HEAP32[$463 >> 2] = $86; //@line 24175
  $464 = $ReallocAsyncCtx4 + 168 | 0; //@line 24176
  HEAP32[$464 >> 2] = $88; //@line 24177
  $465 = $ReallocAsyncCtx4 + 172 | 0; //@line 24178
  HEAP32[$465 >> 2] = $90; //@line 24179
  $466 = $ReallocAsyncCtx4 + 176 | 0; //@line 24180
  HEAP32[$466 >> 2] = $92; //@line 24181
  $467 = $ReallocAsyncCtx4 + 180 | 0; //@line 24182
  HEAP32[$467 >> 2] = $94; //@line 24183
  $468 = $ReallocAsyncCtx4 + 184 | 0; //@line 24184
  HEAP32[$468 >> 2] = $96; //@line 24185
  $469 = $ReallocAsyncCtx4 + 188 | 0; //@line 24186
  HEAP32[$469 >> 2] = $98; //@line 24187
  $470 = $ReallocAsyncCtx4 + 192 | 0; //@line 24188
  HEAP32[$470 >> 2] = $100; //@line 24189
  $471 = $ReallocAsyncCtx4 + 196 | 0; //@line 24190
  HEAP32[$471 >> 2] = $102; //@line 24191
  $472 = $ReallocAsyncCtx4 + 200 | 0; //@line 24192
  HEAP32[$472 >> 2] = $104; //@line 24193
  $473 = $ReallocAsyncCtx4 + 204 | 0; //@line 24194
  HEAP32[$473 >> 2] = $106; //@line 24195
  $474 = $ReallocAsyncCtx4 + 208 | 0; //@line 24196
  HEAP32[$474 >> 2] = $108; //@line 24197
  $475 = $ReallocAsyncCtx4 + 212 | 0; //@line 24198
  HEAP32[$475 >> 2] = $110; //@line 24199
  $476 = $ReallocAsyncCtx4 + 216 | 0; //@line 24200
  HEAP32[$476 >> 2] = $112; //@line 24201
  $477 = $ReallocAsyncCtx4 + 220 | 0; //@line 24202
  HEAP32[$477 >> 2] = $114; //@line 24203
  $478 = $ReallocAsyncCtx4 + 224 | 0; //@line 24204
  HEAP32[$478 >> 2] = $116; //@line 24205
  sp = STACKTOP; //@line 24206
  return;
 } else if ((label | 0) == 24) {
  $499 = $$0$be + 2 << 24 >> 24; //@line 24210
  $503 = HEAPU8[$36 + ($119 & 255) >> 0] | 0; //@line 24214
  $505 = $503 >>> 5 & 1; //@line 24217
  $507 = $503 >>> 4 & 1; //@line 24220
  $510 = HEAP32[(HEAP32[$78 >> 2] | 0) + 44 >> 2] | 0; //@line 24223
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(248) | 0; //@line 24224
  $511 = FUNCTION_TABLE_iiii[$510 & 31]($60, $507, $505) | 0; //@line 24225
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 24228
   $512 = $ReallocAsyncCtx5 + 4 | 0; //@line 24229
   HEAP32[$512 >> 2] = $2; //@line 24230
   $513 = $ReallocAsyncCtx5 + 8 | 0; //@line 24231
   HEAP8[$513 >> 0] = $4; //@line 24232
   $514 = $ReallocAsyncCtx5 + 12 | 0; //@line 24233
   HEAP32[$514 >> 2] = $6; //@line 24234
   $515 = $ReallocAsyncCtx5 + 16 | 0; //@line 24235
   HEAP32[$515 >> 2] = $8; //@line 24236
   $516 = $ReallocAsyncCtx5 + 20 | 0; //@line 24237
   HEAP32[$516 >> 2] = $10; //@line 24238
   $517 = $ReallocAsyncCtx5 + 24 | 0; //@line 24239
   HEAP32[$517 >> 2] = $503; //@line 24240
   $518 = $ReallocAsyncCtx5 + 28 | 0; //@line 24241
   HEAP32[$518 >> 2] = $12; //@line 24242
   $519 = $ReallocAsyncCtx5 + 32 | 0; //@line 24243
   HEAP32[$519 >> 2] = $14; //@line 24244
   $520 = $ReallocAsyncCtx5 + 36 | 0; //@line 24245
   HEAP32[$520 >> 2] = $16; //@line 24246
   $521 = $ReallocAsyncCtx5 + 40 | 0; //@line 24247
   HEAP32[$521 >> 2] = $18; //@line 24248
   $522 = $ReallocAsyncCtx5 + 44 | 0; //@line 24249
   HEAP32[$522 >> 2] = $20; //@line 24250
   $523 = $ReallocAsyncCtx5 + 48 | 0; //@line 24251
   HEAP32[$523 >> 2] = $22; //@line 24252
   $524 = $ReallocAsyncCtx5 + 52 | 0; //@line 24253
   HEAP32[$524 >> 2] = $24; //@line 24254
   $525 = $ReallocAsyncCtx5 + 56 | 0; //@line 24255
   HEAP32[$525 >> 2] = $26; //@line 24256
   $526 = $ReallocAsyncCtx5 + 60 | 0; //@line 24257
   HEAP32[$526 >> 2] = $28; //@line 24258
   $527 = $ReallocAsyncCtx5 + 64 | 0; //@line 24259
   HEAP32[$527 >> 2] = $30; //@line 24260
   $528 = $ReallocAsyncCtx5 + 68 | 0; //@line 24261
   HEAP32[$528 >> 2] = $32; //@line 24262
   $529 = $ReallocAsyncCtx5 + 72 | 0; //@line 24263
   HEAP8[$529 >> 0] = $505; //@line 24264
   $530 = $ReallocAsyncCtx5 + 76 | 0; //@line 24265
   HEAP32[$530 >> 2] = $34; //@line 24266
   $531 = $ReallocAsyncCtx5 + 80 | 0; //@line 24267
   HEAP32[$531 >> 2] = $36; //@line 24268
   $532 = $ReallocAsyncCtx5 + 84 | 0; //@line 24269
   HEAP32[$532 >> 2] = $38; //@line 24270
   $533 = $ReallocAsyncCtx5 + 88 | 0; //@line 24271
   HEAP32[$533 >> 2] = $40; //@line 24272
   $534 = $ReallocAsyncCtx5 + 92 | 0; //@line 24273
   HEAP8[$534 >> 0] = $42; //@line 24274
   $535 = $ReallocAsyncCtx5 + 93 | 0; //@line 24275
   HEAP8[$535 >> 0] = $44; //@line 24276
   $536 = $ReallocAsyncCtx5 + 96 | 0; //@line 24277
   HEAP32[$536 >> 2] = $46; //@line 24278
   $537 = $ReallocAsyncCtx5 + 100 | 0; //@line 24279
   HEAP32[$537 >> 2] = $48; //@line 24280
   $538 = $ReallocAsyncCtx5 + 104 | 0; //@line 24281
   HEAP32[$538 >> 2] = $50; //@line 24282
   $539 = $ReallocAsyncCtx5 + 108 | 0; //@line 24283
   HEAP32[$539 >> 2] = $52; //@line 24284
   $540 = $ReallocAsyncCtx5 + 112 | 0; //@line 24285
   HEAP8[$540 >> 0] = $499; //@line 24286
   $541 = $ReallocAsyncCtx5 + 116 | 0; //@line 24287
   HEAP32[$541 >> 2] = $54; //@line 24288
   $542 = $ReallocAsyncCtx5 + 120 | 0; //@line 24289
   HEAP32[$542 >> 2] = $56; //@line 24290
   $543 = $ReallocAsyncCtx5 + 124 | 0; //@line 24291
   HEAP32[$543 >> 2] = $58; //@line 24292
   $544 = $ReallocAsyncCtx5 + 128 | 0; //@line 24293
   HEAP32[$544 >> 2] = $60; //@line 24294
   $545 = $ReallocAsyncCtx5 + 132 | 0; //@line 24295
   HEAP32[$545 >> 2] = $62; //@line 24296
   $546 = $ReallocAsyncCtx5 + 136 | 0; //@line 24297
   HEAP32[$546 >> 2] = $64; //@line 24298
   $547 = $ReallocAsyncCtx5 + 140 | 0; //@line 24299
   HEAP32[$547 >> 2] = $66; //@line 24300
   $548 = $ReallocAsyncCtx5 + 144 | 0; //@line 24301
   HEAP32[$548 >> 2] = $68; //@line 24302
   $549 = $ReallocAsyncCtx5 + 148 | 0; //@line 24303
   HEAP32[$549 >> 2] = $70; //@line 24304
   $550 = $ReallocAsyncCtx5 + 152 | 0; //@line 24305
   HEAP32[$550 >> 2] = $72; //@line 24306
   $551 = $ReallocAsyncCtx5 + 156 | 0; //@line 24307
   HEAP8[$551 >> 0] = $507; //@line 24308
   $552 = $ReallocAsyncCtx5 + 160 | 0; //@line 24309
   HEAP32[$552 >> 2] = $74; //@line 24310
   $553 = $ReallocAsyncCtx5 + 164 | 0; //@line 24311
   HEAP32[$553 >> 2] = $76; //@line 24312
   $554 = $ReallocAsyncCtx5 + 168 | 0; //@line 24313
   HEAP32[$554 >> 2] = $78; //@line 24314
   $555 = $ReallocAsyncCtx5 + 172 | 0; //@line 24315
   HEAP32[$555 >> 2] = $80; //@line 24316
   $556 = $ReallocAsyncCtx5 + 176 | 0; //@line 24317
   HEAP32[$556 >> 2] = $82; //@line 24318
   $557 = $ReallocAsyncCtx5 + 180 | 0; //@line 24319
   HEAP32[$557 >> 2] = $86; //@line 24320
   $558 = $ReallocAsyncCtx5 + 184 | 0; //@line 24321
   HEAP32[$558 >> 2] = $88; //@line 24322
   $559 = $ReallocAsyncCtx5 + 188 | 0; //@line 24323
   HEAP32[$559 >> 2] = $90; //@line 24324
   $560 = $ReallocAsyncCtx5 + 192 | 0; //@line 24325
   HEAP32[$560 >> 2] = $92; //@line 24326
   $561 = $ReallocAsyncCtx5 + 196 | 0; //@line 24327
   HEAP32[$561 >> 2] = $94; //@line 24328
   $562 = $ReallocAsyncCtx5 + 200 | 0; //@line 24329
   HEAP32[$562 >> 2] = $96; //@line 24330
   $563 = $ReallocAsyncCtx5 + 204 | 0; //@line 24331
   HEAP32[$563 >> 2] = $98; //@line 24332
   $564 = $ReallocAsyncCtx5 + 208 | 0; //@line 24333
   HEAP32[$564 >> 2] = $100; //@line 24334
   $565 = $ReallocAsyncCtx5 + 212 | 0; //@line 24335
   HEAP32[$565 >> 2] = $102; //@line 24336
   $566 = $ReallocAsyncCtx5 + 216 | 0; //@line 24337
   HEAP32[$566 >> 2] = $104; //@line 24338
   $567 = $ReallocAsyncCtx5 + 220 | 0; //@line 24339
   HEAP32[$567 >> 2] = $106; //@line 24340
   $568 = $ReallocAsyncCtx5 + 224 | 0; //@line 24341
   HEAP32[$568 >> 2] = $108; //@line 24342
   $569 = $ReallocAsyncCtx5 + 228 | 0; //@line 24343
   HEAP32[$569 >> 2] = $110; //@line 24344
   $570 = $ReallocAsyncCtx5 + 232 | 0; //@line 24345
   HEAP32[$570 >> 2] = $112; //@line 24346
   $571 = $ReallocAsyncCtx5 + 236 | 0; //@line 24347
   HEAP32[$571 >> 2] = $$0107$be; //@line 24348
   $572 = $ReallocAsyncCtx5 + 240 | 0; //@line 24349
   HEAP32[$572 >> 2] = $114; //@line 24350
   $573 = $ReallocAsyncCtx5 + 244 | 0; //@line 24351
   HEAP32[$573 >> 2] = $116; //@line 24352
   sp = STACKTOP; //@line 24353
   return;
  }
  HEAP8[___async_retval >> 0] = $511 & 1; //@line 24358
  ___async_unwind = 0; //@line 24359
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 24360
  $512 = $ReallocAsyncCtx5 + 4 | 0; //@line 24361
  HEAP32[$512 >> 2] = $2; //@line 24362
  $513 = $ReallocAsyncCtx5 + 8 | 0; //@line 24363
  HEAP8[$513 >> 0] = $4; //@line 24364
  $514 = $ReallocAsyncCtx5 + 12 | 0; //@line 24365
  HEAP32[$514 >> 2] = $6; //@line 24366
  $515 = $ReallocAsyncCtx5 + 16 | 0; //@line 24367
  HEAP32[$515 >> 2] = $8; //@line 24368
  $516 = $ReallocAsyncCtx5 + 20 | 0; //@line 24369
  HEAP32[$516 >> 2] = $10; //@line 24370
  $517 = $ReallocAsyncCtx5 + 24 | 0; //@line 24371
  HEAP32[$517 >> 2] = $503; //@line 24372
  $518 = $ReallocAsyncCtx5 + 28 | 0; //@line 24373
  HEAP32[$518 >> 2] = $12; //@line 24374
  $519 = $ReallocAsyncCtx5 + 32 | 0; //@line 24375
  HEAP32[$519 >> 2] = $14; //@line 24376
  $520 = $ReallocAsyncCtx5 + 36 | 0; //@line 24377
  HEAP32[$520 >> 2] = $16; //@line 24378
  $521 = $ReallocAsyncCtx5 + 40 | 0; //@line 24379
  HEAP32[$521 >> 2] = $18; //@line 24380
  $522 = $ReallocAsyncCtx5 + 44 | 0; //@line 24381
  HEAP32[$522 >> 2] = $20; //@line 24382
  $523 = $ReallocAsyncCtx5 + 48 | 0; //@line 24383
  HEAP32[$523 >> 2] = $22; //@line 24384
  $524 = $ReallocAsyncCtx5 + 52 | 0; //@line 24385
  HEAP32[$524 >> 2] = $24; //@line 24386
  $525 = $ReallocAsyncCtx5 + 56 | 0; //@line 24387
  HEAP32[$525 >> 2] = $26; //@line 24388
  $526 = $ReallocAsyncCtx5 + 60 | 0; //@line 24389
  HEAP32[$526 >> 2] = $28; //@line 24390
  $527 = $ReallocAsyncCtx5 + 64 | 0; //@line 24391
  HEAP32[$527 >> 2] = $30; //@line 24392
  $528 = $ReallocAsyncCtx5 + 68 | 0; //@line 24393
  HEAP32[$528 >> 2] = $32; //@line 24394
  $529 = $ReallocAsyncCtx5 + 72 | 0; //@line 24395
  HEAP8[$529 >> 0] = $505; //@line 24396
  $530 = $ReallocAsyncCtx5 + 76 | 0; //@line 24397
  HEAP32[$530 >> 2] = $34; //@line 24398
  $531 = $ReallocAsyncCtx5 + 80 | 0; //@line 24399
  HEAP32[$531 >> 2] = $36; //@line 24400
  $532 = $ReallocAsyncCtx5 + 84 | 0; //@line 24401
  HEAP32[$532 >> 2] = $38; //@line 24402
  $533 = $ReallocAsyncCtx5 + 88 | 0; //@line 24403
  HEAP32[$533 >> 2] = $40; //@line 24404
  $534 = $ReallocAsyncCtx5 + 92 | 0; //@line 24405
  HEAP8[$534 >> 0] = $42; //@line 24406
  $535 = $ReallocAsyncCtx5 + 93 | 0; //@line 24407
  HEAP8[$535 >> 0] = $44; //@line 24408
  $536 = $ReallocAsyncCtx5 + 96 | 0; //@line 24409
  HEAP32[$536 >> 2] = $46; //@line 24410
  $537 = $ReallocAsyncCtx5 + 100 | 0; //@line 24411
  HEAP32[$537 >> 2] = $48; //@line 24412
  $538 = $ReallocAsyncCtx5 + 104 | 0; //@line 24413
  HEAP32[$538 >> 2] = $50; //@line 24414
  $539 = $ReallocAsyncCtx5 + 108 | 0; //@line 24415
  HEAP32[$539 >> 2] = $52; //@line 24416
  $540 = $ReallocAsyncCtx5 + 112 | 0; //@line 24417
  HEAP8[$540 >> 0] = $499; //@line 24418
  $541 = $ReallocAsyncCtx5 + 116 | 0; //@line 24419
  HEAP32[$541 >> 2] = $54; //@line 24420
  $542 = $ReallocAsyncCtx5 + 120 | 0; //@line 24421
  HEAP32[$542 >> 2] = $56; //@line 24422
  $543 = $ReallocAsyncCtx5 + 124 | 0; //@line 24423
  HEAP32[$543 >> 2] = $58; //@line 24424
  $544 = $ReallocAsyncCtx5 + 128 | 0; //@line 24425
  HEAP32[$544 >> 2] = $60; //@line 24426
  $545 = $ReallocAsyncCtx5 + 132 | 0; //@line 24427
  HEAP32[$545 >> 2] = $62; //@line 24428
  $546 = $ReallocAsyncCtx5 + 136 | 0; //@line 24429
  HEAP32[$546 >> 2] = $64; //@line 24430
  $547 = $ReallocAsyncCtx5 + 140 | 0; //@line 24431
  HEAP32[$547 >> 2] = $66; //@line 24432
  $548 = $ReallocAsyncCtx5 + 144 | 0; //@line 24433
  HEAP32[$548 >> 2] = $68; //@line 24434
  $549 = $ReallocAsyncCtx5 + 148 | 0; //@line 24435
  HEAP32[$549 >> 2] = $70; //@line 24436
  $550 = $ReallocAsyncCtx5 + 152 | 0; //@line 24437
  HEAP32[$550 >> 2] = $72; //@line 24438
  $551 = $ReallocAsyncCtx5 + 156 | 0; //@line 24439
  HEAP8[$551 >> 0] = $507; //@line 24440
  $552 = $ReallocAsyncCtx5 + 160 | 0; //@line 24441
  HEAP32[$552 >> 2] = $74; //@line 24442
  $553 = $ReallocAsyncCtx5 + 164 | 0; //@line 24443
  HEAP32[$553 >> 2] = $76; //@line 24444
  $554 = $ReallocAsyncCtx5 + 168 | 0; //@line 24445
  HEAP32[$554 >> 2] = $78; //@line 24446
  $555 = $ReallocAsyncCtx5 + 172 | 0; //@line 24447
  HEAP32[$555 >> 2] = $80; //@line 24448
  $556 = $ReallocAsyncCtx5 + 176 | 0; //@line 24449
  HEAP32[$556 >> 2] = $82; //@line 24450
  $557 = $ReallocAsyncCtx5 + 180 | 0; //@line 24451
  HEAP32[$557 >> 2] = $86; //@line 24452
  $558 = $ReallocAsyncCtx5 + 184 | 0; //@line 24453
  HEAP32[$558 >> 2] = $88; //@line 24454
  $559 = $ReallocAsyncCtx5 + 188 | 0; //@line 24455
  HEAP32[$559 >> 2] = $90; //@line 24456
  $560 = $ReallocAsyncCtx5 + 192 | 0; //@line 24457
  HEAP32[$560 >> 2] = $92; //@line 24458
  $561 = $ReallocAsyncCtx5 + 196 | 0; //@line 24459
  HEAP32[$561 >> 2] = $94; //@line 24460
  $562 = $ReallocAsyncCtx5 + 200 | 0; //@line 24461
  HEAP32[$562 >> 2] = $96; //@line 24462
  $563 = $ReallocAsyncCtx5 + 204 | 0; //@line 24463
  HEAP32[$563 >> 2] = $98; //@line 24464
  $564 = $ReallocAsyncCtx5 + 208 | 0; //@line 24465
  HEAP32[$564 >> 2] = $100; //@line 24466
  $565 = $ReallocAsyncCtx5 + 212 | 0; //@line 24467
  HEAP32[$565 >> 2] = $102; //@line 24468
  $566 = $ReallocAsyncCtx5 + 216 | 0; //@line 24469
  HEAP32[$566 >> 2] = $104; //@line 24470
  $567 = $ReallocAsyncCtx5 + 220 | 0; //@line 24471
  HEAP32[$567 >> 2] = $106; //@line 24472
  $568 = $ReallocAsyncCtx5 + 224 | 0; //@line 24473
  HEAP32[$568 >> 2] = $108; //@line 24474
  $569 = $ReallocAsyncCtx5 + 228 | 0; //@line 24475
  HEAP32[$569 >> 2] = $110; //@line 24476
  $570 = $ReallocAsyncCtx5 + 232 | 0; //@line 24477
  HEAP32[$570 >> 2] = $112; //@line 24478
  $571 = $ReallocAsyncCtx5 + 236 | 0; //@line 24479
  HEAP32[$571 >> 2] = $$0107$be; //@line 24480
  $572 = $ReallocAsyncCtx5 + 240 | 0; //@line 24481
  HEAP32[$572 >> 2] = $114; //@line 24482
  $573 = $ReallocAsyncCtx5 + 244 | 0; //@line 24483
  HEAP32[$573 >> 2] = $116; //@line 24484
  sp = STACKTOP; //@line 24485
  return;
 } else if ((label | 0) == 27) {
  $578 = HEAP8[$36 + ($119 & 255) >> 0] | 0; //@line 24492
  $591 = $$0$be + 5 << 24 >> 24; //@line 24505
  $598 = (HEAPU8[$36 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$36 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$36 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 24512
  $601 = HEAP32[(HEAP32[$100 >> 2] | 0) + 48 >> 2] | 0; //@line 24515
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(232) | 0; //@line 24516
  $602 = FUNCTION_TABLE_iiii[$601 & 31]($60, $578, $598) | 0; //@line 24517
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 480; //@line 24520
   $603 = $ReallocAsyncCtx6 + 4 | 0; //@line 24521
   HEAP32[$603 >> 2] = $2; //@line 24522
   $604 = $ReallocAsyncCtx6 + 8 | 0; //@line 24523
   HEAP8[$604 >> 0] = $4; //@line 24524
   $605 = $ReallocAsyncCtx6 + 12 | 0; //@line 24525
   HEAP32[$605 >> 2] = $6; //@line 24526
   $606 = $ReallocAsyncCtx6 + 16 | 0; //@line 24527
   HEAP32[$606 >> 2] = $8; //@line 24528
   $607 = $ReallocAsyncCtx6 + 20 | 0; //@line 24529
   HEAP32[$607 >> 2] = $10; //@line 24530
   $608 = $ReallocAsyncCtx6 + 24 | 0; //@line 24531
   HEAP32[$608 >> 2] = $12; //@line 24532
   $609 = $ReallocAsyncCtx6 + 28 | 0; //@line 24533
   HEAP32[$609 >> 2] = $14; //@line 24534
   $610 = $ReallocAsyncCtx6 + 32 | 0; //@line 24535
   HEAP32[$610 >> 2] = $16; //@line 24536
   $611 = $ReallocAsyncCtx6 + 36 | 0; //@line 24537
   HEAP32[$611 >> 2] = $18; //@line 24538
   $612 = $ReallocAsyncCtx6 + 40 | 0; //@line 24539
   HEAP32[$612 >> 2] = $20; //@line 24540
   $613 = $ReallocAsyncCtx6 + 44 | 0; //@line 24541
   HEAP32[$613 >> 2] = $22; //@line 24542
   $614 = $ReallocAsyncCtx6 + 48 | 0; //@line 24543
   HEAP32[$614 >> 2] = $24; //@line 24544
   $615 = $ReallocAsyncCtx6 + 52 | 0; //@line 24545
   HEAP32[$615 >> 2] = $26; //@line 24546
   $616 = $ReallocAsyncCtx6 + 56 | 0; //@line 24547
   HEAP32[$616 >> 2] = $28; //@line 24548
   $617 = $ReallocAsyncCtx6 + 60 | 0; //@line 24549
   HEAP32[$617 >> 2] = $30; //@line 24550
   $618 = $ReallocAsyncCtx6 + 64 | 0; //@line 24551
   HEAP32[$618 >> 2] = $32; //@line 24552
   $619 = $ReallocAsyncCtx6 + 68 | 0; //@line 24553
   HEAP32[$619 >> 2] = $34; //@line 24554
   $620 = $ReallocAsyncCtx6 + 72 | 0; //@line 24555
   HEAP32[$620 >> 2] = $36; //@line 24556
   $621 = $ReallocAsyncCtx6 + 76 | 0; //@line 24557
   HEAP32[$621 >> 2] = $38; //@line 24558
   $622 = $ReallocAsyncCtx6 + 80 | 0; //@line 24559
   HEAP32[$622 >> 2] = $40; //@line 24560
   $623 = $ReallocAsyncCtx6 + 84 | 0; //@line 24561
   HEAP8[$623 >> 0] = $42; //@line 24562
   $624 = $ReallocAsyncCtx6 + 85 | 0; //@line 24563
   HEAP8[$624 >> 0] = $44; //@line 24564
   $625 = $ReallocAsyncCtx6 + 88 | 0; //@line 24565
   HEAP32[$625 >> 2] = $46; //@line 24566
   $626 = $ReallocAsyncCtx6 + 92 | 0; //@line 24567
   HEAP32[$626 >> 2] = $48; //@line 24568
   $627 = $ReallocAsyncCtx6 + 96 | 0; //@line 24569
   HEAP32[$627 >> 2] = $50; //@line 24570
   $628 = $ReallocAsyncCtx6 + 100 | 0; //@line 24571
   HEAP32[$628 >> 2] = $52; //@line 24572
   $629 = $ReallocAsyncCtx6 + 104 | 0; //@line 24573
   HEAP32[$629 >> 2] = $54; //@line 24574
   $630 = $ReallocAsyncCtx6 + 108 | 0; //@line 24575
   HEAP32[$630 >> 2] = $56; //@line 24576
   $631 = $ReallocAsyncCtx6 + 112 | 0; //@line 24577
   HEAP32[$631 >> 2] = $58; //@line 24578
   $632 = $ReallocAsyncCtx6 + 116 | 0; //@line 24579
   HEAP32[$632 >> 2] = $60; //@line 24580
   $633 = $ReallocAsyncCtx6 + 120 | 0; //@line 24581
   HEAP32[$633 >> 2] = $62; //@line 24582
   $634 = $ReallocAsyncCtx6 + 124 | 0; //@line 24583
   HEAP32[$634 >> 2] = $64; //@line 24584
   $635 = $ReallocAsyncCtx6 + 128 | 0; //@line 24585
   HEAP32[$635 >> 2] = $66; //@line 24586
   $636 = $ReallocAsyncCtx6 + 132 | 0; //@line 24587
   HEAP32[$636 >> 2] = $68; //@line 24588
   $637 = $ReallocAsyncCtx6 + 136 | 0; //@line 24589
   HEAP32[$637 >> 2] = $70; //@line 24590
   $638 = $ReallocAsyncCtx6 + 140 | 0; //@line 24591
   HEAP32[$638 >> 2] = $72; //@line 24592
   $639 = $ReallocAsyncCtx6 + 144 | 0; //@line 24593
   HEAP32[$639 >> 2] = $74; //@line 24594
   $640 = $ReallocAsyncCtx6 + 148 | 0; //@line 24595
   HEAP32[$640 >> 2] = $76; //@line 24596
   $641 = $ReallocAsyncCtx6 + 152 | 0; //@line 24597
   HEAP32[$641 >> 2] = $78; //@line 24598
   $642 = $ReallocAsyncCtx6 + 156 | 0; //@line 24599
   HEAP32[$642 >> 2] = $80; //@line 24600
   $643 = $ReallocAsyncCtx6 + 160 | 0; //@line 24601
   HEAP32[$643 >> 2] = $82; //@line 24602
   $644 = $ReallocAsyncCtx6 + 164 | 0; //@line 24603
   HEAP8[$644 >> 0] = $591; //@line 24604
   $645 = $ReallocAsyncCtx6 + 168 | 0; //@line 24605
   HEAP32[$645 >> 2] = $86; //@line 24606
   $646 = $ReallocAsyncCtx6 + 172 | 0; //@line 24607
   HEAP32[$646 >> 2] = $88; //@line 24608
   $647 = $ReallocAsyncCtx6 + 176 | 0; //@line 24609
   HEAP32[$647 >> 2] = $90; //@line 24610
   $648 = $ReallocAsyncCtx6 + 180 | 0; //@line 24611
   HEAP32[$648 >> 2] = $92; //@line 24612
   $649 = $ReallocAsyncCtx6 + 184 | 0; //@line 24613
   HEAP32[$649 >> 2] = $94; //@line 24614
   $650 = $ReallocAsyncCtx6 + 188 | 0; //@line 24615
   HEAP32[$650 >> 2] = $96; //@line 24616
   $651 = $ReallocAsyncCtx6 + 192 | 0; //@line 24617
   HEAP32[$651 >> 2] = $98; //@line 24618
   $652 = $ReallocAsyncCtx6 + 196 | 0; //@line 24619
   HEAP32[$652 >> 2] = $100; //@line 24620
   $653 = $ReallocAsyncCtx6 + 200 | 0; //@line 24621
   HEAP32[$653 >> 2] = $102; //@line 24622
   $654 = $ReallocAsyncCtx6 + 204 | 0; //@line 24623
   HEAP32[$654 >> 2] = $104; //@line 24624
   $655 = $ReallocAsyncCtx6 + 208 | 0; //@line 24625
   HEAP32[$655 >> 2] = $106; //@line 24626
   $656 = $ReallocAsyncCtx6 + 212 | 0; //@line 24627
   HEAP32[$656 >> 2] = $108; //@line 24628
   $657 = $ReallocAsyncCtx6 + 216 | 0; //@line 24629
   HEAP32[$657 >> 2] = $110; //@line 24630
   $658 = $ReallocAsyncCtx6 + 220 | 0; //@line 24631
   HEAP32[$658 >> 2] = $112; //@line 24632
   $659 = $ReallocAsyncCtx6 + 224 | 0; //@line 24633
   HEAP32[$659 >> 2] = $114; //@line 24634
   $660 = $ReallocAsyncCtx6 + 228 | 0; //@line 24635
   HEAP32[$660 >> 2] = $116; //@line 24636
   sp = STACKTOP; //@line 24637
   return;
  }
  HEAP8[___async_retval >> 0] = $602; //@line 24641
  ___async_unwind = 0; //@line 24642
  HEAP32[$ReallocAsyncCtx6 >> 2] = 480; //@line 24643
  $603 = $ReallocAsyncCtx6 + 4 | 0; //@line 24644
  HEAP32[$603 >> 2] = $2; //@line 24645
  $604 = $ReallocAsyncCtx6 + 8 | 0; //@line 24646
  HEAP8[$604 >> 0] = $4; //@line 24647
  $605 = $ReallocAsyncCtx6 + 12 | 0; //@line 24648
  HEAP32[$605 >> 2] = $6; //@line 24649
  $606 = $ReallocAsyncCtx6 + 16 | 0; //@line 24650
  HEAP32[$606 >> 2] = $8; //@line 24651
  $607 = $ReallocAsyncCtx6 + 20 | 0; //@line 24652
  HEAP32[$607 >> 2] = $10; //@line 24653
  $608 = $ReallocAsyncCtx6 + 24 | 0; //@line 24654
  HEAP32[$608 >> 2] = $12; //@line 24655
  $609 = $ReallocAsyncCtx6 + 28 | 0; //@line 24656
  HEAP32[$609 >> 2] = $14; //@line 24657
  $610 = $ReallocAsyncCtx6 + 32 | 0; //@line 24658
  HEAP32[$610 >> 2] = $16; //@line 24659
  $611 = $ReallocAsyncCtx6 + 36 | 0; //@line 24660
  HEAP32[$611 >> 2] = $18; //@line 24661
  $612 = $ReallocAsyncCtx6 + 40 | 0; //@line 24662
  HEAP32[$612 >> 2] = $20; //@line 24663
  $613 = $ReallocAsyncCtx6 + 44 | 0; //@line 24664
  HEAP32[$613 >> 2] = $22; //@line 24665
  $614 = $ReallocAsyncCtx6 + 48 | 0; //@line 24666
  HEAP32[$614 >> 2] = $24; //@line 24667
  $615 = $ReallocAsyncCtx6 + 52 | 0; //@line 24668
  HEAP32[$615 >> 2] = $26; //@line 24669
  $616 = $ReallocAsyncCtx6 + 56 | 0; //@line 24670
  HEAP32[$616 >> 2] = $28; //@line 24671
  $617 = $ReallocAsyncCtx6 + 60 | 0; //@line 24672
  HEAP32[$617 >> 2] = $30; //@line 24673
  $618 = $ReallocAsyncCtx6 + 64 | 0; //@line 24674
  HEAP32[$618 >> 2] = $32; //@line 24675
  $619 = $ReallocAsyncCtx6 + 68 | 0; //@line 24676
  HEAP32[$619 >> 2] = $34; //@line 24677
  $620 = $ReallocAsyncCtx6 + 72 | 0; //@line 24678
  HEAP32[$620 >> 2] = $36; //@line 24679
  $621 = $ReallocAsyncCtx6 + 76 | 0; //@line 24680
  HEAP32[$621 >> 2] = $38; //@line 24681
  $622 = $ReallocAsyncCtx6 + 80 | 0; //@line 24682
  HEAP32[$622 >> 2] = $40; //@line 24683
  $623 = $ReallocAsyncCtx6 + 84 | 0; //@line 24684
  HEAP8[$623 >> 0] = $42; //@line 24685
  $624 = $ReallocAsyncCtx6 + 85 | 0; //@line 24686
  HEAP8[$624 >> 0] = $44; //@line 24687
  $625 = $ReallocAsyncCtx6 + 88 | 0; //@line 24688
  HEAP32[$625 >> 2] = $46; //@line 24689
  $626 = $ReallocAsyncCtx6 + 92 | 0; //@line 24690
  HEAP32[$626 >> 2] = $48; //@line 24691
  $627 = $ReallocAsyncCtx6 + 96 | 0; //@line 24692
  HEAP32[$627 >> 2] = $50; //@line 24693
  $628 = $ReallocAsyncCtx6 + 100 | 0; //@line 24694
  HEAP32[$628 >> 2] = $52; //@line 24695
  $629 = $ReallocAsyncCtx6 + 104 | 0; //@line 24696
  HEAP32[$629 >> 2] = $54; //@line 24697
  $630 = $ReallocAsyncCtx6 + 108 | 0; //@line 24698
  HEAP32[$630 >> 2] = $56; //@line 24699
  $631 = $ReallocAsyncCtx6 + 112 | 0; //@line 24700
  HEAP32[$631 >> 2] = $58; //@line 24701
  $632 = $ReallocAsyncCtx6 + 116 | 0; //@line 24702
  HEAP32[$632 >> 2] = $60; //@line 24703
  $633 = $ReallocAsyncCtx6 + 120 | 0; //@line 24704
  HEAP32[$633 >> 2] = $62; //@line 24705
  $634 = $ReallocAsyncCtx6 + 124 | 0; //@line 24706
  HEAP32[$634 >> 2] = $64; //@line 24707
  $635 = $ReallocAsyncCtx6 + 128 | 0; //@line 24708
  HEAP32[$635 >> 2] = $66; //@line 24709
  $636 = $ReallocAsyncCtx6 + 132 | 0; //@line 24710
  HEAP32[$636 >> 2] = $68; //@line 24711
  $637 = $ReallocAsyncCtx6 + 136 | 0; //@line 24712
  HEAP32[$637 >> 2] = $70; //@line 24713
  $638 = $ReallocAsyncCtx6 + 140 | 0; //@line 24714
  HEAP32[$638 >> 2] = $72; //@line 24715
  $639 = $ReallocAsyncCtx6 + 144 | 0; //@line 24716
  HEAP32[$639 >> 2] = $74; //@line 24717
  $640 = $ReallocAsyncCtx6 + 148 | 0; //@line 24718
  HEAP32[$640 >> 2] = $76; //@line 24719
  $641 = $ReallocAsyncCtx6 + 152 | 0; //@line 24720
  HEAP32[$641 >> 2] = $78; //@line 24721
  $642 = $ReallocAsyncCtx6 + 156 | 0; //@line 24722
  HEAP32[$642 >> 2] = $80; //@line 24723
  $643 = $ReallocAsyncCtx6 + 160 | 0; //@line 24724
  HEAP32[$643 >> 2] = $82; //@line 24725
  $644 = $ReallocAsyncCtx6 + 164 | 0; //@line 24726
  HEAP8[$644 >> 0] = $591; //@line 24727
  $645 = $ReallocAsyncCtx6 + 168 | 0; //@line 24728
  HEAP32[$645 >> 2] = $86; //@line 24729
  $646 = $ReallocAsyncCtx6 + 172 | 0; //@line 24730
  HEAP32[$646 >> 2] = $88; //@line 24731
  $647 = $ReallocAsyncCtx6 + 176 | 0; //@line 24732
  HEAP32[$647 >> 2] = $90; //@line 24733
  $648 = $ReallocAsyncCtx6 + 180 | 0; //@line 24734
  HEAP32[$648 >> 2] = $92; //@line 24735
  $649 = $ReallocAsyncCtx6 + 184 | 0; //@line 24736
  HEAP32[$649 >> 2] = $94; //@line 24737
  $650 = $ReallocAsyncCtx6 + 188 | 0; //@line 24738
  HEAP32[$650 >> 2] = $96; //@line 24739
  $651 = $ReallocAsyncCtx6 + 192 | 0; //@line 24740
  HEAP32[$651 >> 2] = $98; //@line 24741
  $652 = $ReallocAsyncCtx6 + 196 | 0; //@line 24742
  HEAP32[$652 >> 2] = $100; //@line 24743
  $653 = $ReallocAsyncCtx6 + 200 | 0; //@line 24744
  HEAP32[$653 >> 2] = $102; //@line 24745
  $654 = $ReallocAsyncCtx6 + 204 | 0; //@line 24746
  HEAP32[$654 >> 2] = $104; //@line 24747
  $655 = $ReallocAsyncCtx6 + 208 | 0; //@line 24748
  HEAP32[$655 >> 2] = $106; //@line 24749
  $656 = $ReallocAsyncCtx6 + 212 | 0; //@line 24750
  HEAP32[$656 >> 2] = $108; //@line 24751
  $657 = $ReallocAsyncCtx6 + 216 | 0; //@line 24752
  HEAP32[$657 >> 2] = $110; //@line 24753
  $658 = $ReallocAsyncCtx6 + 220 | 0; //@line 24754
  HEAP32[$658 >> 2] = $112; //@line 24755
  $659 = $ReallocAsyncCtx6 + 224 | 0; //@line 24756
  HEAP32[$659 >> 2] = $114; //@line 24757
  $660 = $ReallocAsyncCtx6 + 228 | 0; //@line 24758
  HEAP32[$660 >> 2] = $116; //@line 24759
  sp = STACKTOP; //@line 24760
  return;
 } else if ((label | 0) == 32) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 24765
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_327($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i118 = 0, $$0107$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $119 = 0, $12 = 0, $130 = 0, $131 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $204 = 0, $207 = 0, $214 = 0, $215 = 0, $22 = 0, $221 = 0, $24 = 0, $240 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $311 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $377 = 0, $378 = 0, $38 = 0, $392 = 0, $4 = 0, $40 = 0, $413 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $48 = 0, $483 = 0, $484 = 0, $493 = 0, $497 = 0, $50 = 0, $501 = 0, $506 = 0, $507 = 0, $511 = 0, $515 = 0, $517 = 0, $519 = 0, $52 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $590 = 0, $6 = 0, $60 = 0, $603 = 0, $610 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18840
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18842
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 18844
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18846
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18848
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18850
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18852
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18854
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18856
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18858
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18860
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18862
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 18864
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 18866
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 18868
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 18870
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 18872
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 18874
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 18876
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 18878
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 18880
 $42 = HEAP8[$0 + 84 >> 0] | 0; //@line 18882
 $44 = HEAP8[$0 + 85 >> 0] | 0; //@line 18884
 $46 = HEAP8[$0 + 86 >> 0] | 0; //@line 18886
 $48 = HEAP32[$0 + 88 >> 2] | 0; //@line 18888
 $50 = HEAP32[$0 + 92 >> 2] | 0; //@line 18890
 $52 = HEAP32[$0 + 96 >> 2] | 0; //@line 18892
 $54 = HEAP32[$0 + 100 >> 2] | 0; //@line 18894
 $56 = HEAP32[$0 + 104 >> 2] | 0; //@line 18896
 $58 = HEAP32[$0 + 108 >> 2] | 0; //@line 18898
 $60 = HEAP32[$0 + 112 >> 2] | 0; //@line 18900
 $62 = HEAP32[$0 + 116 >> 2] | 0; //@line 18902
 $64 = HEAP32[$0 + 120 >> 2] | 0; //@line 18904
 $66 = HEAP32[$0 + 124 >> 2] | 0; //@line 18906
 $68 = HEAP32[$0 + 128 >> 2] | 0; //@line 18908
 $70 = HEAP32[$0 + 132 >> 2] | 0; //@line 18910
 $72 = HEAP32[$0 + 136 >> 2] | 0; //@line 18912
 $74 = HEAP32[$0 + 140 >> 2] | 0; //@line 18914
 $76 = HEAP32[$0 + 144 >> 2] | 0; //@line 18916
 $78 = HEAP32[$0 + 148 >> 2] | 0; //@line 18918
 $80 = HEAP32[$0 + 152 >> 2] | 0; //@line 18920
 $82 = HEAP32[$0 + 156 >> 2] | 0; //@line 18922
 $84 = HEAP32[$0 + 160 >> 2] | 0; //@line 18924
 $86 = HEAP32[$0 + 164 >> 2] | 0; //@line 18926
 $88 = HEAP32[$0 + 168 >> 2] | 0; //@line 18928
 $90 = HEAP32[$0 + 172 >> 2] | 0; //@line 18930
 $92 = HEAP32[$0 + 176 >> 2] | 0; //@line 18932
 $94 = HEAP32[$0 + 180 >> 2] | 0; //@line 18934
 $96 = HEAP32[$0 + 184 >> 2] | 0; //@line 18936
 $98 = HEAP32[$0 + 188 >> 2] | 0; //@line 18938
 $100 = HEAP32[$0 + 192 >> 2] | 0; //@line 18940
 $102 = HEAP32[$0 + 196 >> 2] | 0; //@line 18942
 $104 = HEAP32[$0 + 200 >> 2] | 0; //@line 18944
 $106 = HEAP32[$0 + 204 >> 2] | 0; //@line 18946
 $108 = HEAP32[$0 + 208 >> 2] | 0; //@line 18948
 $110 = HEAP32[$0 + 212 >> 2] | 0; //@line 18950
 $112 = HEAP32[$0 + 216 >> 2] | 0; //@line 18952
 $114 = HEAP32[$0 + 220 >> 2] | 0; //@line 18954
 $116 = HEAP32[$0 + 224 >> 2] | 0; //@line 18956
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 18958
 $483 = HEAP8[$106 >> 0] | 0; //@line 18962
 $484 = $483 & 255; //@line 18963
 if ((128 - (HEAPU8[$116 >> 0] | 0) - $484 | 0) > 1) {
  HEAP8[$38 + 4 + $484 >> 0] = 7; //@line 18972
  HEAP8[$106 >> 0] = $483 + 2 << 24 >> 24; //@line 18973
  HEAP8[($483 + 1 & 255) + ($38 + 4) >> 0] = $AsyncRetVal; //@line 18974
  HEAP8[$102 >> 0] = 1; //@line 18975
  $$0$i118 = 0; //@line 18976
 } else {
  $$0$i118 = -1010; //@line 18978
 }
 $$0$be = $42; //@line 18980
 $$0107$be = $$0$i118; //@line 18980
 L5 : while (1) {
  if (($$0$be & 255) >= ($46 & 255)) {
   label = 33; //@line 18984
   break;
  }
  $119 = $$0$be + 1 << 24 >> 24; //@line 18988
  switch (HEAP8[$36 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 18993
    break L5;
    break;
   }
  case 5:
   {
    label = 9; //@line 18998
    break L5;
    break;
   }
  case 7:
   {
    label = 18; //@line 19003
    break L5;
    break;
   }
  case 9:
   {
    label = 27; //@line 19008
    break L5;
    break;
   }
  case 10:
   {
    label = 30; //@line 19013
    break L5;
    break;
   }
  case 2:
   {
    HEAP32[$50 >> 2] = 0; //@line 19018
    HEAP8[$22 >> 0] = HEAP8[$36 + ($119 & 255) >> 0] | 0; //@line 19023
    HEAP8[$28 >> 0] = HEAP8[$36 + ($$0$be + 2 & 255) >> 0] | 0; //@line 19028
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 19029
    continue L5;
    break;
   }
  case 4:
   {
    $204 = $$0$be + 2 << 24 >> 24; //@line 19034
    $207 = HEAP8[$36 + ($119 & 255) >> 0] | 0; //@line 19037
    HEAP8[$98 >> 0] = $207; //@line 19038
    HEAP16[$90 >> 1] = 1 << ($207 & 255); //@line 19042
    $214 = HEAP8[$106 >> 0] | 0; //@line 19046
    $215 = $214 & 255; //@line 19047
    if ((128 - (HEAPU8[$116 >> 0] | 0) | 0) <= ($215 | 0)) {
     $$0$be = $204; //@line 19050
     $$0107$be = -1010; //@line 19050
     continue L5;
    }
    HEAP8[$106 >> 0] = $214 + 1 << 24 >> 24; //@line 19055
    HEAP8[$38 + 4 + $215 >> 0] = 4; //@line 19056
    HEAP8[$102 >> 0] = 1; //@line 19057
    $$0$be = $204; //@line 19058
    $$0107$be = 0; //@line 19058
    continue L5;
    break;
   }
  case 6:
   {
    $311 = HEAP32[$6 >> 2] | 0; //@line 19063
    if ($311 | 0) {
     label = 13; //@line 19066
     break L5;
    }
    $377 = HEAP8[$106 >> 0] | 0; //@line 19072
    $378 = $377 & 255; //@line 19073
    if ((128 - (HEAPU8[$116 >> 0] | 0) - $378 | 0) <= 2) {
     $$0$be = $119; //@line 19077
     $$0107$be = -1010; //@line 19077
     continue L5;
    }
    HEAP8[$38 + 4 + $378 >> 0] = 6; //@line 19082
    HEAP8[($377 + 1 & 255) + ($38 + 4) >> 0] = -1; //@line 19086
    HEAP8[$106 >> 0] = $377 + 3 << 24 >> 24; //@line 19088
    HEAP8[($377 + 2 & 255) + ($38 + 4) >> 0] = $4; //@line 19091
    HEAP8[$102 >> 0] = 1; //@line 19092
    $$0$be = $119; //@line 19093
    $$0107$be = 0; //@line 19093
    continue L5;
    break;
   }
  case 8:
   {
    $493 = $$0$be + 2 << 24 >> 24; //@line 19098
    $497 = HEAP8[$36 + ($119 & 255) >> 0] & 15; //@line 19102
    $501 = ($497 + ($497 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 19107
    HEAP32[$66 >> 2] = $501; //@line 19108
    HEAP32[$76 >> 2] = $501 + 1e3; //@line 19110
    $506 = HEAP8[$106 >> 0] | 0; //@line 19114
    $507 = $506 & 255; //@line 19115
    if ((128 - (HEAPU8[$116 >> 0] | 0) | 0) <= ($507 | 0)) {
     $$0$be = $493; //@line 19118
     $$0107$be = -1010; //@line 19118
     continue L5;
    }
    HEAP8[$106 >> 0] = $506 + 1 << 24 >> 24; //@line 19123
    HEAP8[$38 + 4 + $507 >> 0] = 8; //@line 19124
    HEAP8[$14 >> 0] = 1; //@line 19125
    HEAP8[$102 >> 0] = 1; //@line 19126
    $$0$be = $493; //@line 19127
    $$0107$be = 0; //@line 19127
    continue L5;
    break;
   }
  default:
   {
    $$0$be = $119; //@line 19132
    $$0107$be = -1013; //@line 19132
    continue L5;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$96 >> 0] = 0; //@line 19138
  HEAP8[$112 >> 0] = 0; //@line 19139
  HEAP8[$114 >> 0] = 0; //@line 19140
  HEAP8[$110 >> 0] = 0; //@line 19141
  $130 = $119 & 255; //@line 19142
  $131 = $130 + -1 | 0; //@line 19143
  HEAP32[$12 >> 2] = $36 + $131; //@line 19145
  HEAP8[$108 >> 0] = $54 - $131; //@line 19148
  HEAP8[$78 >> 0] = HEAP8[$84 >> 0] | 0; //@line 19150
  HEAP8[$68 >> 0] = HEAP8[$72 >> 0] | 0; //@line 19152
  HEAP8[$52 >> 0] = HEAP8[$60 >> 0] | 0; //@line 19154
  HEAP8[$18 >> 0] = HEAP8[$32 >> 0] | 0; //@line 19156
  HEAP8[$2 >> 0] = HEAP8[$10 >> 0] | 0; //@line 19158
  $142 = HEAP32[(HEAP32[$86 >> 2] | 0) + 36 >> 2] | 0; //@line 19161
  $ReallocAsyncCtx = _emscripten_realloc_async_context(236) | 0; //@line 19162
  $143 = FUNCTION_TABLE_iiiiiii[$142 & 3]($62, $104, $96, $112, $114, $110) | 0; //@line 19163
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 475; //@line 19166
   $144 = $ReallocAsyncCtx + 4 | 0; //@line 19167
   HEAP32[$144 >> 2] = $2; //@line 19168
   $145 = $ReallocAsyncCtx + 8 | 0; //@line 19169
   HEAP8[$145 >> 0] = $4; //@line 19170
   $146 = $ReallocAsyncCtx + 12 | 0; //@line 19171
   HEAP32[$146 >> 2] = $6; //@line 19172
   $147 = $ReallocAsyncCtx + 16 | 0; //@line 19173
   HEAP32[$147 >> 2] = $8; //@line 19174
   $148 = $ReallocAsyncCtx + 20 | 0; //@line 19175
   HEAP32[$148 >> 2] = $10; //@line 19176
   $149 = $ReallocAsyncCtx + 24 | 0; //@line 19177
   HEAP32[$149 >> 2] = $12; //@line 19178
   $150 = $ReallocAsyncCtx + 28 | 0; //@line 19179
   HEAP32[$150 >> 2] = $14; //@line 19180
   $151 = $ReallocAsyncCtx + 32 | 0; //@line 19181
   HEAP32[$151 >> 2] = $16; //@line 19182
   $152 = $ReallocAsyncCtx + 36 | 0; //@line 19183
   HEAP32[$152 >> 2] = $18; //@line 19184
   $153 = $ReallocAsyncCtx + 40 | 0; //@line 19185
   HEAP32[$153 >> 2] = $20; //@line 19186
   $154 = $ReallocAsyncCtx + 44 | 0; //@line 19187
   HEAP32[$154 >> 2] = $22; //@line 19188
   $155 = $ReallocAsyncCtx + 48 | 0; //@line 19189
   HEAP32[$155 >> 2] = $24; //@line 19190
   $156 = $ReallocAsyncCtx + 52 | 0; //@line 19191
   HEAP32[$156 >> 2] = $26; //@line 19192
   $157 = $ReallocAsyncCtx + 56 | 0; //@line 19193
   HEAP32[$157 >> 2] = $28; //@line 19194
   $158 = $ReallocAsyncCtx + 60 | 0; //@line 19195
   HEAP32[$158 >> 2] = $30; //@line 19196
   $159 = $ReallocAsyncCtx + 64 | 0; //@line 19197
   HEAP32[$159 >> 2] = $32; //@line 19198
   $160 = $ReallocAsyncCtx + 68 | 0; //@line 19199
   HEAP32[$160 >> 2] = $34; //@line 19200
   $161 = $ReallocAsyncCtx + 72 | 0; //@line 19201
   HEAP32[$161 >> 2] = $36; //@line 19202
   $162 = $ReallocAsyncCtx + 76 | 0; //@line 19203
   HEAP32[$162 >> 2] = $38; //@line 19204
   $163 = $ReallocAsyncCtx + 80 | 0; //@line 19205
   HEAP32[$163 >> 2] = $40; //@line 19206
   $164 = $ReallocAsyncCtx + 84 | 0; //@line 19207
   HEAP8[$164 >> 0] = $46; //@line 19208
   $165 = $ReallocAsyncCtx + 85 | 0; //@line 19209
   HEAP8[$165 >> 0] = $44; //@line 19210
   $166 = $ReallocAsyncCtx + 88 | 0; //@line 19211
   HEAP32[$166 >> 2] = $52; //@line 19212
   $167 = $ReallocAsyncCtx + 92 | 0; //@line 19213
   HEAP32[$167 >> 2] = $48; //@line 19214
   $168 = $ReallocAsyncCtx + 96 | 0; //@line 19215
   HEAP32[$168 >> 2] = $50; //@line 19216
   $169 = $ReallocAsyncCtx + 100 | 0; //@line 19217
   HEAP32[$169 >> 2] = $54; //@line 19218
   $170 = $ReallocAsyncCtx + 104 | 0; //@line 19219
   HEAP32[$170 >> 2] = $56; //@line 19220
   $171 = $ReallocAsyncCtx + 108 | 0; //@line 19221
   HEAP32[$171 >> 2] = $58; //@line 19222
   $172 = $ReallocAsyncCtx + 112 | 0; //@line 19223
   HEAP32[$172 >> 2] = $60; //@line 19224
   $173 = $ReallocAsyncCtx + 116 | 0; //@line 19225
   HEAP32[$173 >> 2] = $62; //@line 19226
   $174 = $ReallocAsyncCtx + 120 | 0; //@line 19227
   HEAP32[$174 >> 2] = $64; //@line 19228
   $175 = $ReallocAsyncCtx + 124 | 0; //@line 19229
   HEAP32[$175 >> 2] = $66; //@line 19230
   $176 = $ReallocAsyncCtx + 128 | 0; //@line 19231
   HEAP32[$176 >> 2] = $68; //@line 19232
   $177 = $ReallocAsyncCtx + 132 | 0; //@line 19233
   HEAP32[$177 >> 2] = $70; //@line 19234
   $178 = $ReallocAsyncCtx + 136 | 0; //@line 19235
   HEAP32[$178 >> 2] = $72; //@line 19236
   $179 = $ReallocAsyncCtx + 140 | 0; //@line 19237
   HEAP32[$179 >> 2] = $74; //@line 19238
   $180 = $ReallocAsyncCtx + 144 | 0; //@line 19239
   HEAP32[$180 >> 2] = $76; //@line 19240
   $181 = $ReallocAsyncCtx + 148 | 0; //@line 19241
   HEAP32[$181 >> 2] = $78; //@line 19242
   $182 = $ReallocAsyncCtx + 152 | 0; //@line 19243
   HEAP32[$182 >> 2] = $80; //@line 19244
   $183 = $ReallocAsyncCtx + 156 | 0; //@line 19245
   HEAP32[$183 >> 2] = $82; //@line 19246
   $184 = $ReallocAsyncCtx + 160 | 0; //@line 19247
   HEAP32[$184 >> 2] = $84; //@line 19248
   $185 = $ReallocAsyncCtx + 164 | 0; //@line 19249
   HEAP32[$185 >> 2] = $86; //@line 19250
   $186 = $ReallocAsyncCtx + 168 | 0; //@line 19251
   HEAP32[$186 >> 2] = $88; //@line 19252
   $187 = $ReallocAsyncCtx + 172 | 0; //@line 19253
   HEAP32[$187 >> 2] = $90; //@line 19254
   $188 = $ReallocAsyncCtx + 176 | 0; //@line 19255
   HEAP32[$188 >> 2] = $92; //@line 19256
   $189 = $ReallocAsyncCtx + 180 | 0; //@line 19257
   HEAP32[$189 >> 2] = $94; //@line 19258
   $190 = $ReallocAsyncCtx + 184 | 0; //@line 19259
   HEAP32[$190 >> 2] = $96; //@line 19260
   $191 = $ReallocAsyncCtx + 188 | 0; //@line 19261
   HEAP32[$191 >> 2] = $98; //@line 19262
   $192 = $ReallocAsyncCtx + 192 | 0; //@line 19263
   HEAP32[$192 >> 2] = $100; //@line 19264
   $193 = $ReallocAsyncCtx + 196 | 0; //@line 19265
   HEAP32[$193 >> 2] = $102; //@line 19266
   $194 = $ReallocAsyncCtx + 200 | 0; //@line 19267
   HEAP32[$194 >> 2] = $104; //@line 19268
   $195 = $ReallocAsyncCtx + 204 | 0; //@line 19269
   HEAP32[$195 >> 2] = $106; //@line 19270
   $196 = $ReallocAsyncCtx + 208 | 0; //@line 19271
   HEAP32[$196 >> 2] = $108; //@line 19272
   $197 = $ReallocAsyncCtx + 212 | 0; //@line 19273
   HEAP32[$197 >> 2] = $110; //@line 19274
   $198 = $ReallocAsyncCtx + 216 | 0; //@line 19275
   HEAP32[$198 >> 2] = $112; //@line 19276
   $199 = $ReallocAsyncCtx + 220 | 0; //@line 19277
   HEAP32[$199 >> 2] = $130; //@line 19278
   $200 = $ReallocAsyncCtx + 224 | 0; //@line 19279
   HEAP32[$200 >> 2] = $$0107$be; //@line 19280
   $201 = $ReallocAsyncCtx + 228 | 0; //@line 19281
   HEAP32[$201 >> 2] = $114; //@line 19282
   $202 = $ReallocAsyncCtx + 232 | 0; //@line 19283
   HEAP32[$202 >> 2] = $116; //@line 19284
   sp = STACKTOP; //@line 19285
   return;
  }
  HEAP8[___async_retval >> 0] = $143; //@line 19289
  ___async_unwind = 0; //@line 19290
  HEAP32[$ReallocAsyncCtx >> 2] = 475; //@line 19291
  $144 = $ReallocAsyncCtx + 4 | 0; //@line 19292
  HEAP32[$144 >> 2] = $2; //@line 19293
  $145 = $ReallocAsyncCtx + 8 | 0; //@line 19294
  HEAP8[$145 >> 0] = $4; //@line 19295
  $146 = $ReallocAsyncCtx + 12 | 0; //@line 19296
  HEAP32[$146 >> 2] = $6; //@line 19297
  $147 = $ReallocAsyncCtx + 16 | 0; //@line 19298
  HEAP32[$147 >> 2] = $8; //@line 19299
  $148 = $ReallocAsyncCtx + 20 | 0; //@line 19300
  HEAP32[$148 >> 2] = $10; //@line 19301
  $149 = $ReallocAsyncCtx + 24 | 0; //@line 19302
  HEAP32[$149 >> 2] = $12; //@line 19303
  $150 = $ReallocAsyncCtx + 28 | 0; //@line 19304
  HEAP32[$150 >> 2] = $14; //@line 19305
  $151 = $ReallocAsyncCtx + 32 | 0; //@line 19306
  HEAP32[$151 >> 2] = $16; //@line 19307
  $152 = $ReallocAsyncCtx + 36 | 0; //@line 19308
  HEAP32[$152 >> 2] = $18; //@line 19309
  $153 = $ReallocAsyncCtx + 40 | 0; //@line 19310
  HEAP32[$153 >> 2] = $20; //@line 19311
  $154 = $ReallocAsyncCtx + 44 | 0; //@line 19312
  HEAP32[$154 >> 2] = $22; //@line 19313
  $155 = $ReallocAsyncCtx + 48 | 0; //@line 19314
  HEAP32[$155 >> 2] = $24; //@line 19315
  $156 = $ReallocAsyncCtx + 52 | 0; //@line 19316
  HEAP32[$156 >> 2] = $26; //@line 19317
  $157 = $ReallocAsyncCtx + 56 | 0; //@line 19318
  HEAP32[$157 >> 2] = $28; //@line 19319
  $158 = $ReallocAsyncCtx + 60 | 0; //@line 19320
  HEAP32[$158 >> 2] = $30; //@line 19321
  $159 = $ReallocAsyncCtx + 64 | 0; //@line 19322
  HEAP32[$159 >> 2] = $32; //@line 19323
  $160 = $ReallocAsyncCtx + 68 | 0; //@line 19324
  HEAP32[$160 >> 2] = $34; //@line 19325
  $161 = $ReallocAsyncCtx + 72 | 0; //@line 19326
  HEAP32[$161 >> 2] = $36; //@line 19327
  $162 = $ReallocAsyncCtx + 76 | 0; //@line 19328
  HEAP32[$162 >> 2] = $38; //@line 19329
  $163 = $ReallocAsyncCtx + 80 | 0; //@line 19330
  HEAP32[$163 >> 2] = $40; //@line 19331
  $164 = $ReallocAsyncCtx + 84 | 0; //@line 19332
  HEAP8[$164 >> 0] = $46; //@line 19333
  $165 = $ReallocAsyncCtx + 85 | 0; //@line 19334
  HEAP8[$165 >> 0] = $44; //@line 19335
  $166 = $ReallocAsyncCtx + 88 | 0; //@line 19336
  HEAP32[$166 >> 2] = $52; //@line 19337
  $167 = $ReallocAsyncCtx + 92 | 0; //@line 19338
  HEAP32[$167 >> 2] = $48; //@line 19339
  $168 = $ReallocAsyncCtx + 96 | 0; //@line 19340
  HEAP32[$168 >> 2] = $50; //@line 19341
  $169 = $ReallocAsyncCtx + 100 | 0; //@line 19342
  HEAP32[$169 >> 2] = $54; //@line 19343
  $170 = $ReallocAsyncCtx + 104 | 0; //@line 19344
  HEAP32[$170 >> 2] = $56; //@line 19345
  $171 = $ReallocAsyncCtx + 108 | 0; //@line 19346
  HEAP32[$171 >> 2] = $58; //@line 19347
  $172 = $ReallocAsyncCtx + 112 | 0; //@line 19348
  HEAP32[$172 >> 2] = $60; //@line 19349
  $173 = $ReallocAsyncCtx + 116 | 0; //@line 19350
  HEAP32[$173 >> 2] = $62; //@line 19351
  $174 = $ReallocAsyncCtx + 120 | 0; //@line 19352
  HEAP32[$174 >> 2] = $64; //@line 19353
  $175 = $ReallocAsyncCtx + 124 | 0; //@line 19354
  HEAP32[$175 >> 2] = $66; //@line 19355
  $176 = $ReallocAsyncCtx + 128 | 0; //@line 19356
  HEAP32[$176 >> 2] = $68; //@line 19357
  $177 = $ReallocAsyncCtx + 132 | 0; //@line 19358
  HEAP32[$177 >> 2] = $70; //@line 19359
  $178 = $ReallocAsyncCtx + 136 | 0; //@line 19360
  HEAP32[$178 >> 2] = $72; //@line 19361
  $179 = $ReallocAsyncCtx + 140 | 0; //@line 19362
  HEAP32[$179 >> 2] = $74; //@line 19363
  $180 = $ReallocAsyncCtx + 144 | 0; //@line 19364
  HEAP32[$180 >> 2] = $76; //@line 19365
  $181 = $ReallocAsyncCtx + 148 | 0; //@line 19366
  HEAP32[$181 >> 2] = $78; //@line 19367
  $182 = $ReallocAsyncCtx + 152 | 0; //@line 19368
  HEAP32[$182 >> 2] = $80; //@line 19369
  $183 = $ReallocAsyncCtx + 156 | 0; //@line 19370
  HEAP32[$183 >> 2] = $82; //@line 19371
  $184 = $ReallocAsyncCtx + 160 | 0; //@line 19372
  HEAP32[$184 >> 2] = $84; //@line 19373
  $185 = $ReallocAsyncCtx + 164 | 0; //@line 19374
  HEAP32[$185 >> 2] = $86; //@line 19375
  $186 = $ReallocAsyncCtx + 168 | 0; //@line 19376
  HEAP32[$186 >> 2] = $88; //@line 19377
  $187 = $ReallocAsyncCtx + 172 | 0; //@line 19378
  HEAP32[$187 >> 2] = $90; //@line 19379
  $188 = $ReallocAsyncCtx + 176 | 0; //@line 19380
  HEAP32[$188 >> 2] = $92; //@line 19381
  $189 = $ReallocAsyncCtx + 180 | 0; //@line 19382
  HEAP32[$189 >> 2] = $94; //@line 19383
  $190 = $ReallocAsyncCtx + 184 | 0; //@line 19384
  HEAP32[$190 >> 2] = $96; //@line 19385
  $191 = $ReallocAsyncCtx + 188 | 0; //@line 19386
  HEAP32[$191 >> 2] = $98; //@line 19387
  $192 = $ReallocAsyncCtx + 192 | 0; //@line 19388
  HEAP32[$192 >> 2] = $100; //@line 19389
  $193 = $ReallocAsyncCtx + 196 | 0; //@line 19390
  HEAP32[$193 >> 2] = $102; //@line 19391
  $194 = $ReallocAsyncCtx + 200 | 0; //@line 19392
  HEAP32[$194 >> 2] = $104; //@line 19393
  $195 = $ReallocAsyncCtx + 204 | 0; //@line 19394
  HEAP32[$195 >> 2] = $106; //@line 19395
  $196 = $ReallocAsyncCtx + 208 | 0; //@line 19396
  HEAP32[$196 >> 2] = $108; //@line 19397
  $197 = $ReallocAsyncCtx + 212 | 0; //@line 19398
  HEAP32[$197 >> 2] = $110; //@line 19399
  $198 = $ReallocAsyncCtx + 216 | 0; //@line 19400
  HEAP32[$198 >> 2] = $112; //@line 19401
  $199 = $ReallocAsyncCtx + 220 | 0; //@line 19402
  HEAP32[$199 >> 2] = $130; //@line 19403
  $200 = $ReallocAsyncCtx + 224 | 0; //@line 19404
  HEAP32[$200 >> 2] = $$0107$be; //@line 19405
  $201 = $ReallocAsyncCtx + 228 | 0; //@line 19406
  HEAP32[$201 >> 2] = $114; //@line 19407
  $202 = $ReallocAsyncCtx + 232 | 0; //@line 19408
  HEAP32[$202 >> 2] = $116; //@line 19409
  sp = STACKTOP; //@line 19410
  return;
 } else if ((label | 0) == 9) {
  $221 = HEAP8[$36 + ($119 & 255) >> 0] | 0; //@line 19416
  HEAP8[$74 >> 0] = ($221 & 255) >>> 4 & 7; //@line 19421
  HEAP8[$82 >> 0] = $221 & 15; //@line 19423
  $240 = $$0$be + 5 << 24 >> 24; //@line 19437
  HEAP32[$64 >> 2] = (HEAPU8[$36 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$36 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$36 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 19445
  $250 = HEAP32[(HEAP32[$56 >> 2] | 0) + 40 >> 2] | 0; //@line 19448
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(232) | 0; //@line 19449
  $251 = FUNCTION_TABLE_iii[$250 & 15]($62, $70) | 0; //@line 19450
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 476; //@line 19453
   $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 19454
   HEAP32[$252 >> 2] = $2; //@line 19455
   $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 19456
   HEAP8[$253 >> 0] = $4; //@line 19457
   $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 19458
   HEAP32[$254 >> 2] = $6; //@line 19459
   $255 = $ReallocAsyncCtx2 + 16 | 0; //@line 19460
   HEAP32[$255 >> 2] = $8; //@line 19461
   $256 = $ReallocAsyncCtx2 + 20 | 0; //@line 19462
   HEAP32[$256 >> 2] = $10; //@line 19463
   $257 = $ReallocAsyncCtx2 + 24 | 0; //@line 19464
   HEAP32[$257 >> 2] = $12; //@line 19465
   $258 = $ReallocAsyncCtx2 + 28 | 0; //@line 19466
   HEAP32[$258 >> 2] = $14; //@line 19467
   $259 = $ReallocAsyncCtx2 + 32 | 0; //@line 19468
   HEAP32[$259 >> 2] = $16; //@line 19469
   $260 = $ReallocAsyncCtx2 + 36 | 0; //@line 19470
   HEAP32[$260 >> 2] = $18; //@line 19471
   $261 = $ReallocAsyncCtx2 + 40 | 0; //@line 19472
   HEAP32[$261 >> 2] = $20; //@line 19473
   $262 = $ReallocAsyncCtx2 + 44 | 0; //@line 19474
   HEAP32[$262 >> 2] = $22; //@line 19475
   $263 = $ReallocAsyncCtx2 + 48 | 0; //@line 19476
   HEAP32[$263 >> 2] = $24; //@line 19477
   $264 = $ReallocAsyncCtx2 + 52 | 0; //@line 19478
   HEAP32[$264 >> 2] = $26; //@line 19479
   $265 = $ReallocAsyncCtx2 + 56 | 0; //@line 19480
   HEAP32[$265 >> 2] = $28; //@line 19481
   $266 = $ReallocAsyncCtx2 + 60 | 0; //@line 19482
   HEAP32[$266 >> 2] = $30; //@line 19483
   $267 = $ReallocAsyncCtx2 + 64 | 0; //@line 19484
   HEAP32[$267 >> 2] = $32; //@line 19485
   $268 = $ReallocAsyncCtx2 + 68 | 0; //@line 19486
   HEAP32[$268 >> 2] = $34; //@line 19487
   $269 = $ReallocAsyncCtx2 + 72 | 0; //@line 19488
   HEAP32[$269 >> 2] = $36; //@line 19489
   $270 = $ReallocAsyncCtx2 + 76 | 0; //@line 19490
   HEAP32[$270 >> 2] = $38; //@line 19491
   $271 = $ReallocAsyncCtx2 + 80 | 0; //@line 19492
   HEAP32[$271 >> 2] = $40; //@line 19493
   $272 = $ReallocAsyncCtx2 + 84 | 0; //@line 19494
   HEAP8[$272 >> 0] = $46; //@line 19495
   $273 = $ReallocAsyncCtx2 + 85 | 0; //@line 19496
   HEAP8[$273 >> 0] = $44; //@line 19497
   $274 = $ReallocAsyncCtx2 + 88 | 0; //@line 19498
   HEAP32[$274 >> 2] = $52; //@line 19499
   $275 = $ReallocAsyncCtx2 + 92 | 0; //@line 19500
   HEAP32[$275 >> 2] = $48; //@line 19501
   $276 = $ReallocAsyncCtx2 + 96 | 0; //@line 19502
   HEAP32[$276 >> 2] = $50; //@line 19503
   $277 = $ReallocAsyncCtx2 + 100 | 0; //@line 19504
   HEAP32[$277 >> 2] = $54; //@line 19505
   $278 = $ReallocAsyncCtx2 + 104 | 0; //@line 19506
   HEAP32[$278 >> 2] = $56; //@line 19507
   $279 = $ReallocAsyncCtx2 + 108 | 0; //@line 19508
   HEAP32[$279 >> 2] = $58; //@line 19509
   $280 = $ReallocAsyncCtx2 + 112 | 0; //@line 19510
   HEAP32[$280 >> 2] = $60; //@line 19511
   $281 = $ReallocAsyncCtx2 + 116 | 0; //@line 19512
   HEAP32[$281 >> 2] = $62; //@line 19513
   $282 = $ReallocAsyncCtx2 + 120 | 0; //@line 19514
   HEAP32[$282 >> 2] = $64; //@line 19515
   $283 = $ReallocAsyncCtx2 + 124 | 0; //@line 19516
   HEAP32[$283 >> 2] = $66; //@line 19517
   $284 = $ReallocAsyncCtx2 + 128 | 0; //@line 19518
   HEAP32[$284 >> 2] = $68; //@line 19519
   $285 = $ReallocAsyncCtx2 + 132 | 0; //@line 19520
   HEAP32[$285 >> 2] = $70; //@line 19521
   $286 = $ReallocAsyncCtx2 + 136 | 0; //@line 19522
   HEAP32[$286 >> 2] = $72; //@line 19523
   $287 = $ReallocAsyncCtx2 + 140 | 0; //@line 19524
   HEAP32[$287 >> 2] = $74; //@line 19525
   $288 = $ReallocAsyncCtx2 + 144 | 0; //@line 19526
   HEAP32[$288 >> 2] = $76; //@line 19527
   $289 = $ReallocAsyncCtx2 + 148 | 0; //@line 19528
   HEAP32[$289 >> 2] = $78; //@line 19529
   $290 = $ReallocAsyncCtx2 + 152 | 0; //@line 19530
   HEAP32[$290 >> 2] = $80; //@line 19531
   $291 = $ReallocAsyncCtx2 + 156 | 0; //@line 19532
   HEAP32[$291 >> 2] = $82; //@line 19533
   $292 = $ReallocAsyncCtx2 + 160 | 0; //@line 19534
   HEAP32[$292 >> 2] = $84; //@line 19535
   $293 = $ReallocAsyncCtx2 + 164 | 0; //@line 19536
   HEAP32[$293 >> 2] = $86; //@line 19537
   $294 = $ReallocAsyncCtx2 + 168 | 0; //@line 19538
   HEAP32[$294 >> 2] = $88; //@line 19539
   $295 = $ReallocAsyncCtx2 + 172 | 0; //@line 19540
   HEAP32[$295 >> 2] = $90; //@line 19541
   $296 = $ReallocAsyncCtx2 + 176 | 0; //@line 19542
   HEAP32[$296 >> 2] = $92; //@line 19543
   $297 = $ReallocAsyncCtx2 + 180 | 0; //@line 19544
   HEAP32[$297 >> 2] = $94; //@line 19545
   $298 = $ReallocAsyncCtx2 + 184 | 0; //@line 19546
   HEAP32[$298 >> 2] = $96; //@line 19547
   $299 = $ReallocAsyncCtx2 + 188 | 0; //@line 19548
   HEAP32[$299 >> 2] = $98; //@line 19549
   $300 = $ReallocAsyncCtx2 + 192 | 0; //@line 19550
   HEAP32[$300 >> 2] = $100; //@line 19551
   $301 = $ReallocAsyncCtx2 + 196 | 0; //@line 19552
   HEAP32[$301 >> 2] = $102; //@line 19553
   $302 = $ReallocAsyncCtx2 + 200 | 0; //@line 19554
   HEAP32[$302 >> 2] = $104; //@line 19555
   $303 = $ReallocAsyncCtx2 + 204 | 0; //@line 19556
   HEAP32[$303 >> 2] = $106; //@line 19557
   $304 = $ReallocAsyncCtx2 + 208 | 0; //@line 19558
   HEAP32[$304 >> 2] = $108; //@line 19559
   $305 = $ReallocAsyncCtx2 + 212 | 0; //@line 19560
   HEAP8[$305 >> 0] = $240; //@line 19561
   $306 = $ReallocAsyncCtx2 + 216 | 0; //@line 19562
   HEAP32[$306 >> 2] = $110; //@line 19563
   $307 = $ReallocAsyncCtx2 + 220 | 0; //@line 19564
   HEAP32[$307 >> 2] = $112; //@line 19565
   $308 = $ReallocAsyncCtx2 + 224 | 0; //@line 19566
   HEAP32[$308 >> 2] = $114; //@line 19567
   $309 = $ReallocAsyncCtx2 + 228 | 0; //@line 19568
   HEAP32[$309 >> 2] = $116; //@line 19569
   sp = STACKTOP; //@line 19570
   return;
  }
  HEAP8[___async_retval >> 0] = $251; //@line 19574
  ___async_unwind = 0; //@line 19575
  HEAP32[$ReallocAsyncCtx2 >> 2] = 476; //@line 19576
  $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 19577
  HEAP32[$252 >> 2] = $2; //@line 19578
  $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 19579
  HEAP8[$253 >> 0] = $4; //@line 19580
  $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 19581
  HEAP32[$254 >> 2] = $6; //@line 19582
  $255 = $ReallocAsyncCtx2 + 16 | 0; //@line 19583
  HEAP32[$255 >> 2] = $8; //@line 19584
  $256 = $ReallocAsyncCtx2 + 20 | 0; //@line 19585
  HEAP32[$256 >> 2] = $10; //@line 19586
  $257 = $ReallocAsyncCtx2 + 24 | 0; //@line 19587
  HEAP32[$257 >> 2] = $12; //@line 19588
  $258 = $ReallocAsyncCtx2 + 28 | 0; //@line 19589
  HEAP32[$258 >> 2] = $14; //@line 19590
  $259 = $ReallocAsyncCtx2 + 32 | 0; //@line 19591
  HEAP32[$259 >> 2] = $16; //@line 19592
  $260 = $ReallocAsyncCtx2 + 36 | 0; //@line 19593
  HEAP32[$260 >> 2] = $18; //@line 19594
  $261 = $ReallocAsyncCtx2 + 40 | 0; //@line 19595
  HEAP32[$261 >> 2] = $20; //@line 19596
  $262 = $ReallocAsyncCtx2 + 44 | 0; //@line 19597
  HEAP32[$262 >> 2] = $22; //@line 19598
  $263 = $ReallocAsyncCtx2 + 48 | 0; //@line 19599
  HEAP32[$263 >> 2] = $24; //@line 19600
  $264 = $ReallocAsyncCtx2 + 52 | 0; //@line 19601
  HEAP32[$264 >> 2] = $26; //@line 19602
  $265 = $ReallocAsyncCtx2 + 56 | 0; //@line 19603
  HEAP32[$265 >> 2] = $28; //@line 19604
  $266 = $ReallocAsyncCtx2 + 60 | 0; //@line 19605
  HEAP32[$266 >> 2] = $30; //@line 19606
  $267 = $ReallocAsyncCtx2 + 64 | 0; //@line 19607
  HEAP32[$267 >> 2] = $32; //@line 19608
  $268 = $ReallocAsyncCtx2 + 68 | 0; //@line 19609
  HEAP32[$268 >> 2] = $34; //@line 19610
  $269 = $ReallocAsyncCtx2 + 72 | 0; //@line 19611
  HEAP32[$269 >> 2] = $36; //@line 19612
  $270 = $ReallocAsyncCtx2 + 76 | 0; //@line 19613
  HEAP32[$270 >> 2] = $38; //@line 19614
  $271 = $ReallocAsyncCtx2 + 80 | 0; //@line 19615
  HEAP32[$271 >> 2] = $40; //@line 19616
  $272 = $ReallocAsyncCtx2 + 84 | 0; //@line 19617
  HEAP8[$272 >> 0] = $46; //@line 19618
  $273 = $ReallocAsyncCtx2 + 85 | 0; //@line 19619
  HEAP8[$273 >> 0] = $44; //@line 19620
  $274 = $ReallocAsyncCtx2 + 88 | 0; //@line 19621
  HEAP32[$274 >> 2] = $52; //@line 19622
  $275 = $ReallocAsyncCtx2 + 92 | 0; //@line 19623
  HEAP32[$275 >> 2] = $48; //@line 19624
  $276 = $ReallocAsyncCtx2 + 96 | 0; //@line 19625
  HEAP32[$276 >> 2] = $50; //@line 19626
  $277 = $ReallocAsyncCtx2 + 100 | 0; //@line 19627
  HEAP32[$277 >> 2] = $54; //@line 19628
  $278 = $ReallocAsyncCtx2 + 104 | 0; //@line 19629
  HEAP32[$278 >> 2] = $56; //@line 19630
  $279 = $ReallocAsyncCtx2 + 108 | 0; //@line 19631
  HEAP32[$279 >> 2] = $58; //@line 19632
  $280 = $ReallocAsyncCtx2 + 112 | 0; //@line 19633
  HEAP32[$280 >> 2] = $60; //@line 19634
  $281 = $ReallocAsyncCtx2 + 116 | 0; //@line 19635
  HEAP32[$281 >> 2] = $62; //@line 19636
  $282 = $ReallocAsyncCtx2 + 120 | 0; //@line 19637
  HEAP32[$282 >> 2] = $64; //@line 19638
  $283 = $ReallocAsyncCtx2 + 124 | 0; //@line 19639
  HEAP32[$283 >> 2] = $66; //@line 19640
  $284 = $ReallocAsyncCtx2 + 128 | 0; //@line 19641
  HEAP32[$284 >> 2] = $68; //@line 19642
  $285 = $ReallocAsyncCtx2 + 132 | 0; //@line 19643
  HEAP32[$285 >> 2] = $70; //@line 19644
  $286 = $ReallocAsyncCtx2 + 136 | 0; //@line 19645
  HEAP32[$286 >> 2] = $72; //@line 19646
  $287 = $ReallocAsyncCtx2 + 140 | 0; //@line 19647
  HEAP32[$287 >> 2] = $74; //@line 19648
  $288 = $ReallocAsyncCtx2 + 144 | 0; //@line 19649
  HEAP32[$288 >> 2] = $76; //@line 19650
  $289 = $ReallocAsyncCtx2 + 148 | 0; //@line 19651
  HEAP32[$289 >> 2] = $78; //@line 19652
  $290 = $ReallocAsyncCtx2 + 152 | 0; //@line 19653
  HEAP32[$290 >> 2] = $80; //@line 19654
  $291 = $ReallocAsyncCtx2 + 156 | 0; //@line 19655
  HEAP32[$291 >> 2] = $82; //@line 19656
  $292 = $ReallocAsyncCtx2 + 160 | 0; //@line 19657
  HEAP32[$292 >> 2] = $84; //@line 19658
  $293 = $ReallocAsyncCtx2 + 164 | 0; //@line 19659
  HEAP32[$293 >> 2] = $86; //@line 19660
  $294 = $ReallocAsyncCtx2 + 168 | 0; //@line 19661
  HEAP32[$294 >> 2] = $88; //@line 19662
  $295 = $ReallocAsyncCtx2 + 172 | 0; //@line 19663
  HEAP32[$295 >> 2] = $90; //@line 19664
  $296 = $ReallocAsyncCtx2 + 176 | 0; //@line 19665
  HEAP32[$296 >> 2] = $92; //@line 19666
  $297 = $ReallocAsyncCtx2 + 180 | 0; //@line 19667
  HEAP32[$297 >> 2] = $94; //@line 19668
  $298 = $ReallocAsyncCtx2 + 184 | 0; //@line 19669
  HEAP32[$298 >> 2] = $96; //@line 19670
  $299 = $ReallocAsyncCtx2 + 188 | 0; //@line 19671
  HEAP32[$299 >> 2] = $98; //@line 19672
  $300 = $ReallocAsyncCtx2 + 192 | 0; //@line 19673
  HEAP32[$300 >> 2] = $100; //@line 19674
  $301 = $ReallocAsyncCtx2 + 196 | 0; //@line 19675
  HEAP32[$301 >> 2] = $102; //@line 19676
  $302 = $ReallocAsyncCtx2 + 200 | 0; //@line 19677
  HEAP32[$302 >> 2] = $104; //@line 19678
  $303 = $ReallocAsyncCtx2 + 204 | 0; //@line 19679
  HEAP32[$303 >> 2] = $106; //@line 19680
  $304 = $ReallocAsyncCtx2 + 208 | 0; //@line 19681
  HEAP32[$304 >> 2] = $108; //@line 19682
  $305 = $ReallocAsyncCtx2 + 212 | 0; //@line 19683
  HEAP8[$305 >> 0] = $240; //@line 19684
  $306 = $ReallocAsyncCtx2 + 216 | 0; //@line 19685
  HEAP32[$306 >> 2] = $110; //@line 19686
  $307 = $ReallocAsyncCtx2 + 220 | 0; //@line 19687
  HEAP32[$307 >> 2] = $112; //@line 19688
  $308 = $ReallocAsyncCtx2 + 224 | 0; //@line 19689
  HEAP32[$308 >> 2] = $114; //@line 19690
  $309 = $ReallocAsyncCtx2 + 228 | 0; //@line 19691
  HEAP32[$309 >> 2] = $116; //@line 19692
  sp = STACKTOP; //@line 19693
  return;
 } else if ((label | 0) == 13) {
  $313 = HEAP32[$311 >> 2] | 0; //@line 19697
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(232) | 0; //@line 19698
  $314 = FUNCTION_TABLE_ii[$313 & 15]($16) | 0; //@line 19699
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 477; //@line 19702
   $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 19703
   HEAP32[$315 >> 2] = $2; //@line 19704
   $316 = $ReallocAsyncCtx3 + 8 | 0; //@line 19705
   HEAP8[$316 >> 0] = $4; //@line 19706
   $317 = $ReallocAsyncCtx3 + 12 | 0; //@line 19707
   HEAP32[$317 >> 2] = $6; //@line 19708
   $318 = $ReallocAsyncCtx3 + 16 | 0; //@line 19709
   HEAP32[$318 >> 2] = $8; //@line 19710
   $319 = $ReallocAsyncCtx3 + 20 | 0; //@line 19711
   HEAP32[$319 >> 2] = $10; //@line 19712
   $320 = $ReallocAsyncCtx3 + 24 | 0; //@line 19713
   HEAP32[$320 >> 2] = $12; //@line 19714
   $321 = $ReallocAsyncCtx3 + 28 | 0; //@line 19715
   HEAP32[$321 >> 2] = $14; //@line 19716
   $322 = $ReallocAsyncCtx3 + 32 | 0; //@line 19717
   HEAP32[$322 >> 2] = $16; //@line 19718
   $323 = $ReallocAsyncCtx3 + 36 | 0; //@line 19719
   HEAP32[$323 >> 2] = $18; //@line 19720
   $324 = $ReallocAsyncCtx3 + 40 | 0; //@line 19721
   HEAP32[$324 >> 2] = $20; //@line 19722
   $325 = $ReallocAsyncCtx3 + 44 | 0; //@line 19723
   HEAP32[$325 >> 2] = $22; //@line 19724
   $326 = $ReallocAsyncCtx3 + 48 | 0; //@line 19725
   HEAP32[$326 >> 2] = $24; //@line 19726
   $327 = $ReallocAsyncCtx3 + 52 | 0; //@line 19727
   HEAP32[$327 >> 2] = $26; //@line 19728
   $328 = $ReallocAsyncCtx3 + 56 | 0; //@line 19729
   HEAP32[$328 >> 2] = $28; //@line 19730
   $329 = $ReallocAsyncCtx3 + 60 | 0; //@line 19731
   HEAP32[$329 >> 2] = $30; //@line 19732
   $330 = $ReallocAsyncCtx3 + 64 | 0; //@line 19733
   HEAP32[$330 >> 2] = $32; //@line 19734
   $331 = $ReallocAsyncCtx3 + 68 | 0; //@line 19735
   HEAP32[$331 >> 2] = $34; //@line 19736
   $332 = $ReallocAsyncCtx3 + 72 | 0; //@line 19737
   HEAP8[$332 >> 0] = $119; //@line 19738
   $333 = $ReallocAsyncCtx3 + 76 | 0; //@line 19739
   HEAP32[$333 >> 2] = $36; //@line 19740
   $334 = $ReallocAsyncCtx3 + 80 | 0; //@line 19741
   HEAP32[$334 >> 2] = $38; //@line 19742
   $335 = $ReallocAsyncCtx3 + 84 | 0; //@line 19743
   HEAP32[$335 >> 2] = $40; //@line 19744
   $336 = $ReallocAsyncCtx3 + 88 | 0; //@line 19745
   HEAP8[$336 >> 0] = $46; //@line 19746
   $337 = $ReallocAsyncCtx3 + 89 | 0; //@line 19747
   HEAP8[$337 >> 0] = $44; //@line 19748
   $338 = $ReallocAsyncCtx3 + 92 | 0; //@line 19749
   HEAP32[$338 >> 2] = $52; //@line 19750
   $339 = $ReallocAsyncCtx3 + 96 | 0; //@line 19751
   HEAP32[$339 >> 2] = $48; //@line 19752
   $340 = $ReallocAsyncCtx3 + 100 | 0; //@line 19753
   HEAP32[$340 >> 2] = $50; //@line 19754
   $341 = $ReallocAsyncCtx3 + 104 | 0; //@line 19755
   HEAP32[$341 >> 2] = $54; //@line 19756
   $342 = $ReallocAsyncCtx3 + 108 | 0; //@line 19757
   HEAP32[$342 >> 2] = $56; //@line 19758
   $343 = $ReallocAsyncCtx3 + 112 | 0; //@line 19759
   HEAP32[$343 >> 2] = $58; //@line 19760
   $344 = $ReallocAsyncCtx3 + 116 | 0; //@line 19761
   HEAP32[$344 >> 2] = $60; //@line 19762
   $345 = $ReallocAsyncCtx3 + 120 | 0; //@line 19763
   HEAP32[$345 >> 2] = $62; //@line 19764
   $346 = $ReallocAsyncCtx3 + 124 | 0; //@line 19765
   HEAP32[$346 >> 2] = $64; //@line 19766
   $347 = $ReallocAsyncCtx3 + 128 | 0; //@line 19767
   HEAP32[$347 >> 2] = $66; //@line 19768
   $348 = $ReallocAsyncCtx3 + 132 | 0; //@line 19769
   HEAP32[$348 >> 2] = $68; //@line 19770
   $349 = $ReallocAsyncCtx3 + 136 | 0; //@line 19771
   HEAP32[$349 >> 2] = $70; //@line 19772
   $350 = $ReallocAsyncCtx3 + 140 | 0; //@line 19773
   HEAP32[$350 >> 2] = $72; //@line 19774
   $351 = $ReallocAsyncCtx3 + 144 | 0; //@line 19775
   HEAP32[$351 >> 2] = $74; //@line 19776
   $352 = $ReallocAsyncCtx3 + 148 | 0; //@line 19777
   HEAP32[$352 >> 2] = $76; //@line 19778
   $353 = $ReallocAsyncCtx3 + 152 | 0; //@line 19779
   HEAP32[$353 >> 2] = $78; //@line 19780
   $354 = $ReallocAsyncCtx3 + 156 | 0; //@line 19781
   HEAP32[$354 >> 2] = $80; //@line 19782
   $355 = $ReallocAsyncCtx3 + 160 | 0; //@line 19783
   HEAP32[$355 >> 2] = $82; //@line 19784
   $356 = $ReallocAsyncCtx3 + 164 | 0; //@line 19785
   HEAP32[$356 >> 2] = $84; //@line 19786
   $357 = $ReallocAsyncCtx3 + 168 | 0; //@line 19787
   HEAP32[$357 >> 2] = $86; //@line 19788
   $358 = $ReallocAsyncCtx3 + 172 | 0; //@line 19789
   HEAP32[$358 >> 2] = $88; //@line 19790
   $359 = $ReallocAsyncCtx3 + 176 | 0; //@line 19791
   HEAP32[$359 >> 2] = $90; //@line 19792
   $360 = $ReallocAsyncCtx3 + 180 | 0; //@line 19793
   HEAP32[$360 >> 2] = $92; //@line 19794
   $361 = $ReallocAsyncCtx3 + 184 | 0; //@line 19795
   HEAP32[$361 >> 2] = $94; //@line 19796
   $362 = $ReallocAsyncCtx3 + 188 | 0; //@line 19797
   HEAP32[$362 >> 2] = $96; //@line 19798
   $363 = $ReallocAsyncCtx3 + 192 | 0; //@line 19799
   HEAP32[$363 >> 2] = $98; //@line 19800
   $364 = $ReallocAsyncCtx3 + 196 | 0; //@line 19801
   HEAP32[$364 >> 2] = $100; //@line 19802
   $365 = $ReallocAsyncCtx3 + 200 | 0; //@line 19803
   HEAP32[$365 >> 2] = $102; //@line 19804
   $366 = $ReallocAsyncCtx3 + 204 | 0; //@line 19805
   HEAP32[$366 >> 2] = $104; //@line 19806
   $367 = $ReallocAsyncCtx3 + 208 | 0; //@line 19807
   HEAP32[$367 >> 2] = $106; //@line 19808
   $368 = $ReallocAsyncCtx3 + 212 | 0; //@line 19809
   HEAP32[$368 >> 2] = $108; //@line 19810
   $369 = $ReallocAsyncCtx3 + 216 | 0; //@line 19811
   HEAP32[$369 >> 2] = $110; //@line 19812
   $370 = $ReallocAsyncCtx3 + 220 | 0; //@line 19813
   HEAP32[$370 >> 2] = $112; //@line 19814
   $371 = $ReallocAsyncCtx3 + 224 | 0; //@line 19815
   HEAP32[$371 >> 2] = $114; //@line 19816
   $372 = $ReallocAsyncCtx3 + 228 | 0; //@line 19817
   HEAP32[$372 >> 2] = $116; //@line 19818
   sp = STACKTOP; //@line 19819
   return;
  }
  HEAP8[___async_retval >> 0] = $314; //@line 19823
  ___async_unwind = 0; //@line 19824
  HEAP32[$ReallocAsyncCtx3 >> 2] = 477; //@line 19825
  $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 19826
  HEAP32[$315 >> 2] = $2; //@line 19827
  $316 = $ReallocAsyncCtx3 + 8 | 0; //@line 19828
  HEAP8[$316 >> 0] = $4; //@line 19829
  $317 = $ReallocAsyncCtx3 + 12 | 0; //@line 19830
  HEAP32[$317 >> 2] = $6; //@line 19831
  $318 = $ReallocAsyncCtx3 + 16 | 0; //@line 19832
  HEAP32[$318 >> 2] = $8; //@line 19833
  $319 = $ReallocAsyncCtx3 + 20 | 0; //@line 19834
  HEAP32[$319 >> 2] = $10; //@line 19835
  $320 = $ReallocAsyncCtx3 + 24 | 0; //@line 19836
  HEAP32[$320 >> 2] = $12; //@line 19837
  $321 = $ReallocAsyncCtx3 + 28 | 0; //@line 19838
  HEAP32[$321 >> 2] = $14; //@line 19839
  $322 = $ReallocAsyncCtx3 + 32 | 0; //@line 19840
  HEAP32[$322 >> 2] = $16; //@line 19841
  $323 = $ReallocAsyncCtx3 + 36 | 0; //@line 19842
  HEAP32[$323 >> 2] = $18; //@line 19843
  $324 = $ReallocAsyncCtx3 + 40 | 0; //@line 19844
  HEAP32[$324 >> 2] = $20; //@line 19845
  $325 = $ReallocAsyncCtx3 + 44 | 0; //@line 19846
  HEAP32[$325 >> 2] = $22; //@line 19847
  $326 = $ReallocAsyncCtx3 + 48 | 0; //@line 19848
  HEAP32[$326 >> 2] = $24; //@line 19849
  $327 = $ReallocAsyncCtx3 + 52 | 0; //@line 19850
  HEAP32[$327 >> 2] = $26; //@line 19851
  $328 = $ReallocAsyncCtx3 + 56 | 0; //@line 19852
  HEAP32[$328 >> 2] = $28; //@line 19853
  $329 = $ReallocAsyncCtx3 + 60 | 0; //@line 19854
  HEAP32[$329 >> 2] = $30; //@line 19855
  $330 = $ReallocAsyncCtx3 + 64 | 0; //@line 19856
  HEAP32[$330 >> 2] = $32; //@line 19857
  $331 = $ReallocAsyncCtx3 + 68 | 0; //@line 19858
  HEAP32[$331 >> 2] = $34; //@line 19859
  $332 = $ReallocAsyncCtx3 + 72 | 0; //@line 19860
  HEAP8[$332 >> 0] = $119; //@line 19861
  $333 = $ReallocAsyncCtx3 + 76 | 0; //@line 19862
  HEAP32[$333 >> 2] = $36; //@line 19863
  $334 = $ReallocAsyncCtx3 + 80 | 0; //@line 19864
  HEAP32[$334 >> 2] = $38; //@line 19865
  $335 = $ReallocAsyncCtx3 + 84 | 0; //@line 19866
  HEAP32[$335 >> 2] = $40; //@line 19867
  $336 = $ReallocAsyncCtx3 + 88 | 0; //@line 19868
  HEAP8[$336 >> 0] = $46; //@line 19869
  $337 = $ReallocAsyncCtx3 + 89 | 0; //@line 19870
  HEAP8[$337 >> 0] = $44; //@line 19871
  $338 = $ReallocAsyncCtx3 + 92 | 0; //@line 19872
  HEAP32[$338 >> 2] = $52; //@line 19873
  $339 = $ReallocAsyncCtx3 + 96 | 0; //@line 19874
  HEAP32[$339 >> 2] = $48; //@line 19875
  $340 = $ReallocAsyncCtx3 + 100 | 0; //@line 19876
  HEAP32[$340 >> 2] = $50; //@line 19877
  $341 = $ReallocAsyncCtx3 + 104 | 0; //@line 19878
  HEAP32[$341 >> 2] = $54; //@line 19879
  $342 = $ReallocAsyncCtx3 + 108 | 0; //@line 19880
  HEAP32[$342 >> 2] = $56; //@line 19881
  $343 = $ReallocAsyncCtx3 + 112 | 0; //@line 19882
  HEAP32[$343 >> 2] = $58; //@line 19883
  $344 = $ReallocAsyncCtx3 + 116 | 0; //@line 19884
  HEAP32[$344 >> 2] = $60; //@line 19885
  $345 = $ReallocAsyncCtx3 + 120 | 0; //@line 19886
  HEAP32[$345 >> 2] = $62; //@line 19887
  $346 = $ReallocAsyncCtx3 + 124 | 0; //@line 19888
  HEAP32[$346 >> 2] = $64; //@line 19889
  $347 = $ReallocAsyncCtx3 + 128 | 0; //@line 19890
  HEAP32[$347 >> 2] = $66; //@line 19891
  $348 = $ReallocAsyncCtx3 + 132 | 0; //@line 19892
  HEAP32[$348 >> 2] = $68; //@line 19893
  $349 = $ReallocAsyncCtx3 + 136 | 0; //@line 19894
  HEAP32[$349 >> 2] = $70; //@line 19895
  $350 = $ReallocAsyncCtx3 + 140 | 0; //@line 19896
  HEAP32[$350 >> 2] = $72; //@line 19897
  $351 = $ReallocAsyncCtx3 + 144 | 0; //@line 19898
  HEAP32[$351 >> 2] = $74; //@line 19899
  $352 = $ReallocAsyncCtx3 + 148 | 0; //@line 19900
  HEAP32[$352 >> 2] = $76; //@line 19901
  $353 = $ReallocAsyncCtx3 + 152 | 0; //@line 19902
  HEAP32[$353 >> 2] = $78; //@line 19903
  $354 = $ReallocAsyncCtx3 + 156 | 0; //@line 19904
  HEAP32[$354 >> 2] = $80; //@line 19905
  $355 = $ReallocAsyncCtx3 + 160 | 0; //@line 19906
  HEAP32[$355 >> 2] = $82; //@line 19907
  $356 = $ReallocAsyncCtx3 + 164 | 0; //@line 19908
  HEAP32[$356 >> 2] = $84; //@line 19909
  $357 = $ReallocAsyncCtx3 + 168 | 0; //@line 19910
  HEAP32[$357 >> 2] = $86; //@line 19911
  $358 = $ReallocAsyncCtx3 + 172 | 0; //@line 19912
  HEAP32[$358 >> 2] = $88; //@line 19913
  $359 = $ReallocAsyncCtx3 + 176 | 0; //@line 19914
  HEAP32[$359 >> 2] = $90; //@line 19915
  $360 = $ReallocAsyncCtx3 + 180 | 0; //@line 19916
  HEAP32[$360 >> 2] = $92; //@line 19917
  $361 = $ReallocAsyncCtx3 + 184 | 0; //@line 19918
  HEAP32[$361 >> 2] = $94; //@line 19919
  $362 = $ReallocAsyncCtx3 + 188 | 0; //@line 19920
  HEAP32[$362 >> 2] = $96; //@line 19921
  $363 = $ReallocAsyncCtx3 + 192 | 0; //@line 19922
  HEAP32[$363 >> 2] = $98; //@line 19923
  $364 = $ReallocAsyncCtx3 + 196 | 0; //@line 19924
  HEAP32[$364 >> 2] = $100; //@line 19925
  $365 = $ReallocAsyncCtx3 + 200 | 0; //@line 19926
  HEAP32[$365 >> 2] = $102; //@line 19927
  $366 = $ReallocAsyncCtx3 + 204 | 0; //@line 19928
  HEAP32[$366 >> 2] = $104; //@line 19929
  $367 = $ReallocAsyncCtx3 + 208 | 0; //@line 19930
  HEAP32[$367 >> 2] = $106; //@line 19931
  $368 = $ReallocAsyncCtx3 + 212 | 0; //@line 19932
  HEAP32[$368 >> 2] = $108; //@line 19933
  $369 = $ReallocAsyncCtx3 + 216 | 0; //@line 19934
  HEAP32[$369 >> 2] = $110; //@line 19935
  $370 = $ReallocAsyncCtx3 + 220 | 0; //@line 19936
  HEAP32[$370 >> 2] = $112; //@line 19937
  $371 = $ReallocAsyncCtx3 + 224 | 0; //@line 19938
  HEAP32[$371 >> 2] = $114; //@line 19939
  $372 = $ReallocAsyncCtx3 + 228 | 0; //@line 19940
  HEAP32[$372 >> 2] = $116; //@line 19941
  sp = STACKTOP; //@line 19942
  return;
 } else if ((label | 0) == 18) {
  $392 = HEAP8[$36 + ($119 & 255) >> 0] | 0; //@line 19949
  HEAP32[$26 >> 2] = (HEAPU8[$36 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$36 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$36 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 19970
  HEAP32[$34 >> 2] = 0; //@line 19971
  $413 = $$0$be + 6 << 24 >> 24; //@line 19972
  HEAP8[$48 >> 0] = HEAP8[$36 + ($$0$be + 5 & 255) >> 0] | 0; //@line 19976
  $419 = HEAP32[(HEAP32[$58 >> 2] | 0) + 8 >> 2] | 0; //@line 19979
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(228) | 0; //@line 19980
  $420 = FUNCTION_TABLE_iiii[$419 & 31]($62, $392, $94) | 0; //@line 19981
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 478; //@line 19984
   $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 19985
   HEAP32[$421 >> 2] = $2; //@line 19986
   $422 = $ReallocAsyncCtx4 + 8 | 0; //@line 19987
   HEAP8[$422 >> 0] = $4; //@line 19988
   $423 = $ReallocAsyncCtx4 + 12 | 0; //@line 19989
   HEAP32[$423 >> 2] = $6; //@line 19990
   $424 = $ReallocAsyncCtx4 + 16 | 0; //@line 19991
   HEAP32[$424 >> 2] = $8; //@line 19992
   $425 = $ReallocAsyncCtx4 + 20 | 0; //@line 19993
   HEAP32[$425 >> 2] = $10; //@line 19994
   $426 = $ReallocAsyncCtx4 + 24 | 0; //@line 19995
   HEAP32[$426 >> 2] = $12; //@line 19996
   $427 = $ReallocAsyncCtx4 + 28 | 0; //@line 19997
   HEAP32[$427 >> 2] = $14; //@line 19998
   $428 = $ReallocAsyncCtx4 + 32 | 0; //@line 19999
   HEAP32[$428 >> 2] = $16; //@line 20000
   $429 = $ReallocAsyncCtx4 + 36 | 0; //@line 20001
   HEAP32[$429 >> 2] = $18; //@line 20002
   $430 = $ReallocAsyncCtx4 + 40 | 0; //@line 20003
   HEAP32[$430 >> 2] = $20; //@line 20004
   $431 = $ReallocAsyncCtx4 + 44 | 0; //@line 20005
   HEAP32[$431 >> 2] = $22; //@line 20006
   $432 = $ReallocAsyncCtx4 + 48 | 0; //@line 20007
   HEAP32[$432 >> 2] = $24; //@line 20008
   $433 = $ReallocAsyncCtx4 + 52 | 0; //@line 20009
   HEAP32[$433 >> 2] = $26; //@line 20010
   $434 = $ReallocAsyncCtx4 + 56 | 0; //@line 20011
   HEAP32[$434 >> 2] = $28; //@line 20012
   $435 = $ReallocAsyncCtx4 + 60 | 0; //@line 20013
   HEAP32[$435 >> 2] = $30; //@line 20014
   $436 = $ReallocAsyncCtx4 + 64 | 0; //@line 20015
   HEAP32[$436 >> 2] = $32; //@line 20016
   $437 = $ReallocAsyncCtx4 + 68 | 0; //@line 20017
   HEAP32[$437 >> 2] = $34; //@line 20018
   $438 = $ReallocAsyncCtx4 + 72 | 0; //@line 20019
   HEAP32[$438 >> 2] = $36; //@line 20020
   $439 = $ReallocAsyncCtx4 + 76 | 0; //@line 20021
   HEAP32[$439 >> 2] = $38; //@line 20022
   $440 = $ReallocAsyncCtx4 + 80 | 0; //@line 20023
   HEAP32[$440 >> 2] = $40; //@line 20024
   $441 = $ReallocAsyncCtx4 + 84 | 0; //@line 20025
   HEAP8[$441 >> 0] = $413; //@line 20026
   $442 = $ReallocAsyncCtx4 + 85 | 0; //@line 20027
   HEAP8[$442 >> 0] = $44; //@line 20028
   $443 = $ReallocAsyncCtx4 + 86 | 0; //@line 20029
   HEAP8[$443 >> 0] = $46; //@line 20030
   $444 = $ReallocAsyncCtx4 + 88 | 0; //@line 20031
   HEAP32[$444 >> 2] = $48; //@line 20032
   $445 = $ReallocAsyncCtx4 + 92 | 0; //@line 20033
   HEAP32[$445 >> 2] = $50; //@line 20034
   $446 = $ReallocAsyncCtx4 + 96 | 0; //@line 20035
   HEAP32[$446 >> 2] = $52; //@line 20036
   $447 = $ReallocAsyncCtx4 + 100 | 0; //@line 20037
   HEAP32[$447 >> 2] = $54; //@line 20038
   $448 = $ReallocAsyncCtx4 + 104 | 0; //@line 20039
   HEAP32[$448 >> 2] = $56; //@line 20040
   $449 = $ReallocAsyncCtx4 + 108 | 0; //@line 20041
   HEAP32[$449 >> 2] = $58; //@line 20042
   $450 = $ReallocAsyncCtx4 + 112 | 0; //@line 20043
   HEAP32[$450 >> 2] = $60; //@line 20044
   $451 = $ReallocAsyncCtx4 + 116 | 0; //@line 20045
   HEAP32[$451 >> 2] = $62; //@line 20046
   $452 = $ReallocAsyncCtx4 + 120 | 0; //@line 20047
   HEAP32[$452 >> 2] = $64; //@line 20048
   $453 = $ReallocAsyncCtx4 + 124 | 0; //@line 20049
   HEAP32[$453 >> 2] = $66; //@line 20050
   $454 = $ReallocAsyncCtx4 + 128 | 0; //@line 20051
   HEAP32[$454 >> 2] = $68; //@line 20052
   $455 = $ReallocAsyncCtx4 + 132 | 0; //@line 20053
   HEAP32[$455 >> 2] = $70; //@line 20054
   $456 = $ReallocAsyncCtx4 + 136 | 0; //@line 20055
   HEAP32[$456 >> 2] = $72; //@line 20056
   $457 = $ReallocAsyncCtx4 + 140 | 0; //@line 20057
   HEAP32[$457 >> 2] = $74; //@line 20058
   $458 = $ReallocAsyncCtx4 + 144 | 0; //@line 20059
   HEAP32[$458 >> 2] = $76; //@line 20060
   $459 = $ReallocAsyncCtx4 + 148 | 0; //@line 20061
   HEAP32[$459 >> 2] = $78; //@line 20062
   $460 = $ReallocAsyncCtx4 + 152 | 0; //@line 20063
   HEAP32[$460 >> 2] = $80; //@line 20064
   $461 = $ReallocAsyncCtx4 + 156 | 0; //@line 20065
   HEAP32[$461 >> 2] = $82; //@line 20066
   $462 = $ReallocAsyncCtx4 + 160 | 0; //@line 20067
   HEAP32[$462 >> 2] = $84; //@line 20068
   $463 = $ReallocAsyncCtx4 + 164 | 0; //@line 20069
   HEAP32[$463 >> 2] = $86; //@line 20070
   $464 = $ReallocAsyncCtx4 + 168 | 0; //@line 20071
   HEAP32[$464 >> 2] = $88; //@line 20072
   $465 = $ReallocAsyncCtx4 + 172 | 0; //@line 20073
   HEAP32[$465 >> 2] = $90; //@line 20074
   $466 = $ReallocAsyncCtx4 + 176 | 0; //@line 20075
   HEAP32[$466 >> 2] = $92; //@line 20076
   $467 = $ReallocAsyncCtx4 + 180 | 0; //@line 20077
   HEAP32[$467 >> 2] = $94; //@line 20078
   $468 = $ReallocAsyncCtx4 + 184 | 0; //@line 20079
   HEAP32[$468 >> 2] = $96; //@line 20080
   $469 = $ReallocAsyncCtx4 + 188 | 0; //@line 20081
   HEAP32[$469 >> 2] = $98; //@line 20082
   $470 = $ReallocAsyncCtx4 + 192 | 0; //@line 20083
   HEAP32[$470 >> 2] = $100; //@line 20084
   $471 = $ReallocAsyncCtx4 + 196 | 0; //@line 20085
   HEAP32[$471 >> 2] = $102; //@line 20086
   $472 = $ReallocAsyncCtx4 + 200 | 0; //@line 20087
   HEAP32[$472 >> 2] = $104; //@line 20088
   $473 = $ReallocAsyncCtx4 + 204 | 0; //@line 20089
   HEAP32[$473 >> 2] = $106; //@line 20090
   $474 = $ReallocAsyncCtx4 + 208 | 0; //@line 20091
   HEAP32[$474 >> 2] = $108; //@line 20092
   $475 = $ReallocAsyncCtx4 + 212 | 0; //@line 20093
   HEAP32[$475 >> 2] = $110; //@line 20094
   $476 = $ReallocAsyncCtx4 + 216 | 0; //@line 20095
   HEAP32[$476 >> 2] = $112; //@line 20096
   $477 = $ReallocAsyncCtx4 + 220 | 0; //@line 20097
   HEAP32[$477 >> 2] = $114; //@line 20098
   $478 = $ReallocAsyncCtx4 + 224 | 0; //@line 20099
   HEAP32[$478 >> 2] = $116; //@line 20100
   sp = STACKTOP; //@line 20101
   return;
  }
  HEAP8[___async_retval >> 0] = $420; //@line 20105
  ___async_unwind = 0; //@line 20106
  HEAP32[$ReallocAsyncCtx4 >> 2] = 478; //@line 20107
  $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 20108
  HEAP32[$421 >> 2] = $2; //@line 20109
  $422 = $ReallocAsyncCtx4 + 8 | 0; //@line 20110
  HEAP8[$422 >> 0] = $4; //@line 20111
  $423 = $ReallocAsyncCtx4 + 12 | 0; //@line 20112
  HEAP32[$423 >> 2] = $6; //@line 20113
  $424 = $ReallocAsyncCtx4 + 16 | 0; //@line 20114
  HEAP32[$424 >> 2] = $8; //@line 20115
  $425 = $ReallocAsyncCtx4 + 20 | 0; //@line 20116
  HEAP32[$425 >> 2] = $10; //@line 20117
  $426 = $ReallocAsyncCtx4 + 24 | 0; //@line 20118
  HEAP32[$426 >> 2] = $12; //@line 20119
  $427 = $ReallocAsyncCtx4 + 28 | 0; //@line 20120
  HEAP32[$427 >> 2] = $14; //@line 20121
  $428 = $ReallocAsyncCtx4 + 32 | 0; //@line 20122
  HEAP32[$428 >> 2] = $16; //@line 20123
  $429 = $ReallocAsyncCtx4 + 36 | 0; //@line 20124
  HEAP32[$429 >> 2] = $18; //@line 20125
  $430 = $ReallocAsyncCtx4 + 40 | 0; //@line 20126
  HEAP32[$430 >> 2] = $20; //@line 20127
  $431 = $ReallocAsyncCtx4 + 44 | 0; //@line 20128
  HEAP32[$431 >> 2] = $22; //@line 20129
  $432 = $ReallocAsyncCtx4 + 48 | 0; //@line 20130
  HEAP32[$432 >> 2] = $24; //@line 20131
  $433 = $ReallocAsyncCtx4 + 52 | 0; //@line 20132
  HEAP32[$433 >> 2] = $26; //@line 20133
  $434 = $ReallocAsyncCtx4 + 56 | 0; //@line 20134
  HEAP32[$434 >> 2] = $28; //@line 20135
  $435 = $ReallocAsyncCtx4 + 60 | 0; //@line 20136
  HEAP32[$435 >> 2] = $30; //@line 20137
  $436 = $ReallocAsyncCtx4 + 64 | 0; //@line 20138
  HEAP32[$436 >> 2] = $32; //@line 20139
  $437 = $ReallocAsyncCtx4 + 68 | 0; //@line 20140
  HEAP32[$437 >> 2] = $34; //@line 20141
  $438 = $ReallocAsyncCtx4 + 72 | 0; //@line 20142
  HEAP32[$438 >> 2] = $36; //@line 20143
  $439 = $ReallocAsyncCtx4 + 76 | 0; //@line 20144
  HEAP32[$439 >> 2] = $38; //@line 20145
  $440 = $ReallocAsyncCtx4 + 80 | 0; //@line 20146
  HEAP32[$440 >> 2] = $40; //@line 20147
  $441 = $ReallocAsyncCtx4 + 84 | 0; //@line 20148
  HEAP8[$441 >> 0] = $413; //@line 20149
  $442 = $ReallocAsyncCtx4 + 85 | 0; //@line 20150
  HEAP8[$442 >> 0] = $44; //@line 20151
  $443 = $ReallocAsyncCtx4 + 86 | 0; //@line 20152
  HEAP8[$443 >> 0] = $46; //@line 20153
  $444 = $ReallocAsyncCtx4 + 88 | 0; //@line 20154
  HEAP32[$444 >> 2] = $48; //@line 20155
  $445 = $ReallocAsyncCtx4 + 92 | 0; //@line 20156
  HEAP32[$445 >> 2] = $50; //@line 20157
  $446 = $ReallocAsyncCtx4 + 96 | 0; //@line 20158
  HEAP32[$446 >> 2] = $52; //@line 20159
  $447 = $ReallocAsyncCtx4 + 100 | 0; //@line 20160
  HEAP32[$447 >> 2] = $54; //@line 20161
  $448 = $ReallocAsyncCtx4 + 104 | 0; //@line 20162
  HEAP32[$448 >> 2] = $56; //@line 20163
  $449 = $ReallocAsyncCtx4 + 108 | 0; //@line 20164
  HEAP32[$449 >> 2] = $58; //@line 20165
  $450 = $ReallocAsyncCtx4 + 112 | 0; //@line 20166
  HEAP32[$450 >> 2] = $60; //@line 20167
  $451 = $ReallocAsyncCtx4 + 116 | 0; //@line 20168
  HEAP32[$451 >> 2] = $62; //@line 20169
  $452 = $ReallocAsyncCtx4 + 120 | 0; //@line 20170
  HEAP32[$452 >> 2] = $64; //@line 20171
  $453 = $ReallocAsyncCtx4 + 124 | 0; //@line 20172
  HEAP32[$453 >> 2] = $66; //@line 20173
  $454 = $ReallocAsyncCtx4 + 128 | 0; //@line 20174
  HEAP32[$454 >> 2] = $68; //@line 20175
  $455 = $ReallocAsyncCtx4 + 132 | 0; //@line 20176
  HEAP32[$455 >> 2] = $70; //@line 20177
  $456 = $ReallocAsyncCtx4 + 136 | 0; //@line 20178
  HEAP32[$456 >> 2] = $72; //@line 20179
  $457 = $ReallocAsyncCtx4 + 140 | 0; //@line 20180
  HEAP32[$457 >> 2] = $74; //@line 20181
  $458 = $ReallocAsyncCtx4 + 144 | 0; //@line 20182
  HEAP32[$458 >> 2] = $76; //@line 20183
  $459 = $ReallocAsyncCtx4 + 148 | 0; //@line 20184
  HEAP32[$459 >> 2] = $78; //@line 20185
  $460 = $ReallocAsyncCtx4 + 152 | 0; //@line 20186
  HEAP32[$460 >> 2] = $80; //@line 20187
  $461 = $ReallocAsyncCtx4 + 156 | 0; //@line 20188
  HEAP32[$461 >> 2] = $82; //@line 20189
  $462 = $ReallocAsyncCtx4 + 160 | 0; //@line 20190
  HEAP32[$462 >> 2] = $84; //@line 20191
  $463 = $ReallocAsyncCtx4 + 164 | 0; //@line 20192
  HEAP32[$463 >> 2] = $86; //@line 20193
  $464 = $ReallocAsyncCtx4 + 168 | 0; //@line 20194
  HEAP32[$464 >> 2] = $88; //@line 20195
  $465 = $ReallocAsyncCtx4 + 172 | 0; //@line 20196
  HEAP32[$465 >> 2] = $90; //@line 20197
  $466 = $ReallocAsyncCtx4 + 176 | 0; //@line 20198
  HEAP32[$466 >> 2] = $92; //@line 20199
  $467 = $ReallocAsyncCtx4 + 180 | 0; //@line 20200
  HEAP32[$467 >> 2] = $94; //@line 20201
  $468 = $ReallocAsyncCtx4 + 184 | 0; //@line 20202
  HEAP32[$468 >> 2] = $96; //@line 20203
  $469 = $ReallocAsyncCtx4 + 188 | 0; //@line 20204
  HEAP32[$469 >> 2] = $98; //@line 20205
  $470 = $ReallocAsyncCtx4 + 192 | 0; //@line 20206
  HEAP32[$470 >> 2] = $100; //@line 20207
  $471 = $ReallocAsyncCtx4 + 196 | 0; //@line 20208
  HEAP32[$471 >> 2] = $102; //@line 20209
  $472 = $ReallocAsyncCtx4 + 200 | 0; //@line 20210
  HEAP32[$472 >> 2] = $104; //@line 20211
  $473 = $ReallocAsyncCtx4 + 204 | 0; //@line 20212
  HEAP32[$473 >> 2] = $106; //@line 20213
  $474 = $ReallocAsyncCtx4 + 208 | 0; //@line 20214
  HEAP32[$474 >> 2] = $108; //@line 20215
  $475 = $ReallocAsyncCtx4 + 212 | 0; //@line 20216
  HEAP32[$475 >> 2] = $110; //@line 20217
  $476 = $ReallocAsyncCtx4 + 216 | 0; //@line 20218
  HEAP32[$476 >> 2] = $112; //@line 20219
  $477 = $ReallocAsyncCtx4 + 220 | 0; //@line 20220
  HEAP32[$477 >> 2] = $114; //@line 20221
  $478 = $ReallocAsyncCtx4 + 224 | 0; //@line 20222
  HEAP32[$478 >> 2] = $116; //@line 20223
  sp = STACKTOP; //@line 20224
  return;
 } else if ((label | 0) == 27) {
  $511 = $$0$be + 2 << 24 >> 24; //@line 20228
  $515 = HEAPU8[$36 + ($119 & 255) >> 0] | 0; //@line 20232
  $517 = $515 >>> 5 & 1; //@line 20235
  $519 = $515 >>> 4 & 1; //@line 20238
  $522 = HEAP32[(HEAP32[$80 >> 2] | 0) + 44 >> 2] | 0; //@line 20241
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(248) | 0; //@line 20242
  $523 = FUNCTION_TABLE_iiii[$522 & 31]($62, $519, $517) | 0; //@line 20243
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 20246
   $524 = $ReallocAsyncCtx5 + 4 | 0; //@line 20247
   HEAP32[$524 >> 2] = $2; //@line 20248
   $525 = $ReallocAsyncCtx5 + 8 | 0; //@line 20249
   HEAP8[$525 >> 0] = $4; //@line 20250
   $526 = $ReallocAsyncCtx5 + 12 | 0; //@line 20251
   HEAP32[$526 >> 2] = $6; //@line 20252
   $527 = $ReallocAsyncCtx5 + 16 | 0; //@line 20253
   HEAP32[$527 >> 2] = $8; //@line 20254
   $528 = $ReallocAsyncCtx5 + 20 | 0; //@line 20255
   HEAP32[$528 >> 2] = $10; //@line 20256
   $529 = $ReallocAsyncCtx5 + 24 | 0; //@line 20257
   HEAP32[$529 >> 2] = $515; //@line 20258
   $530 = $ReallocAsyncCtx5 + 28 | 0; //@line 20259
   HEAP32[$530 >> 2] = $12; //@line 20260
   $531 = $ReallocAsyncCtx5 + 32 | 0; //@line 20261
   HEAP32[$531 >> 2] = $14; //@line 20262
   $532 = $ReallocAsyncCtx5 + 36 | 0; //@line 20263
   HEAP32[$532 >> 2] = $16; //@line 20264
   $533 = $ReallocAsyncCtx5 + 40 | 0; //@line 20265
   HEAP32[$533 >> 2] = $18; //@line 20266
   $534 = $ReallocAsyncCtx5 + 44 | 0; //@line 20267
   HEAP32[$534 >> 2] = $20; //@line 20268
   $535 = $ReallocAsyncCtx5 + 48 | 0; //@line 20269
   HEAP32[$535 >> 2] = $22; //@line 20270
   $536 = $ReallocAsyncCtx5 + 52 | 0; //@line 20271
   HEAP32[$536 >> 2] = $24; //@line 20272
   $537 = $ReallocAsyncCtx5 + 56 | 0; //@line 20273
   HEAP32[$537 >> 2] = $26; //@line 20274
   $538 = $ReallocAsyncCtx5 + 60 | 0; //@line 20275
   HEAP32[$538 >> 2] = $28; //@line 20276
   $539 = $ReallocAsyncCtx5 + 64 | 0; //@line 20277
   HEAP32[$539 >> 2] = $30; //@line 20278
   $540 = $ReallocAsyncCtx5 + 68 | 0; //@line 20279
   HEAP32[$540 >> 2] = $32; //@line 20280
   $541 = $ReallocAsyncCtx5 + 72 | 0; //@line 20281
   HEAP8[$541 >> 0] = $517; //@line 20282
   $542 = $ReallocAsyncCtx5 + 76 | 0; //@line 20283
   HEAP32[$542 >> 2] = $34; //@line 20284
   $543 = $ReallocAsyncCtx5 + 80 | 0; //@line 20285
   HEAP32[$543 >> 2] = $36; //@line 20286
   $544 = $ReallocAsyncCtx5 + 84 | 0; //@line 20287
   HEAP32[$544 >> 2] = $38; //@line 20288
   $545 = $ReallocAsyncCtx5 + 88 | 0; //@line 20289
   HEAP32[$545 >> 2] = $40; //@line 20290
   $546 = $ReallocAsyncCtx5 + 92 | 0; //@line 20291
   HEAP8[$546 >> 0] = $46; //@line 20292
   $547 = $ReallocAsyncCtx5 + 93 | 0; //@line 20293
   HEAP8[$547 >> 0] = $44; //@line 20294
   $548 = $ReallocAsyncCtx5 + 96 | 0; //@line 20295
   HEAP32[$548 >> 2] = $50; //@line 20296
   $549 = $ReallocAsyncCtx5 + 100 | 0; //@line 20297
   HEAP32[$549 >> 2] = $48; //@line 20298
   $550 = $ReallocAsyncCtx5 + 104 | 0; //@line 20299
   HEAP32[$550 >> 2] = $52; //@line 20300
   $551 = $ReallocAsyncCtx5 + 108 | 0; //@line 20301
   HEAP32[$551 >> 2] = $54; //@line 20302
   $552 = $ReallocAsyncCtx5 + 112 | 0; //@line 20303
   HEAP8[$552 >> 0] = $511; //@line 20304
   $553 = $ReallocAsyncCtx5 + 116 | 0; //@line 20305
   HEAP32[$553 >> 2] = $56; //@line 20306
   $554 = $ReallocAsyncCtx5 + 120 | 0; //@line 20307
   HEAP32[$554 >> 2] = $58; //@line 20308
   $555 = $ReallocAsyncCtx5 + 124 | 0; //@line 20309
   HEAP32[$555 >> 2] = $60; //@line 20310
   $556 = $ReallocAsyncCtx5 + 128 | 0; //@line 20311
   HEAP32[$556 >> 2] = $62; //@line 20312
   $557 = $ReallocAsyncCtx5 + 132 | 0; //@line 20313
   HEAP32[$557 >> 2] = $64; //@line 20314
   $558 = $ReallocAsyncCtx5 + 136 | 0; //@line 20315
   HEAP32[$558 >> 2] = $66; //@line 20316
   $559 = $ReallocAsyncCtx5 + 140 | 0; //@line 20317
   HEAP32[$559 >> 2] = $68; //@line 20318
   $560 = $ReallocAsyncCtx5 + 144 | 0; //@line 20319
   HEAP32[$560 >> 2] = $70; //@line 20320
   $561 = $ReallocAsyncCtx5 + 148 | 0; //@line 20321
   HEAP32[$561 >> 2] = $72; //@line 20322
   $562 = $ReallocAsyncCtx5 + 152 | 0; //@line 20323
   HEAP32[$562 >> 2] = $74; //@line 20324
   $563 = $ReallocAsyncCtx5 + 156 | 0; //@line 20325
   HEAP8[$563 >> 0] = $519; //@line 20326
   $564 = $ReallocAsyncCtx5 + 160 | 0; //@line 20327
   HEAP32[$564 >> 2] = $76; //@line 20328
   $565 = $ReallocAsyncCtx5 + 164 | 0; //@line 20329
   HEAP32[$565 >> 2] = $78; //@line 20330
   $566 = $ReallocAsyncCtx5 + 168 | 0; //@line 20331
   HEAP32[$566 >> 2] = $80; //@line 20332
   $567 = $ReallocAsyncCtx5 + 172 | 0; //@line 20333
   HEAP32[$567 >> 2] = $82; //@line 20334
   $568 = $ReallocAsyncCtx5 + 176 | 0; //@line 20335
   HEAP32[$568 >> 2] = $84; //@line 20336
   $569 = $ReallocAsyncCtx5 + 180 | 0; //@line 20337
   HEAP32[$569 >> 2] = $86; //@line 20338
   $570 = $ReallocAsyncCtx5 + 184 | 0; //@line 20339
   HEAP32[$570 >> 2] = $88; //@line 20340
   $571 = $ReallocAsyncCtx5 + 188 | 0; //@line 20341
   HEAP32[$571 >> 2] = $90; //@line 20342
   $572 = $ReallocAsyncCtx5 + 192 | 0; //@line 20343
   HEAP32[$572 >> 2] = $92; //@line 20344
   $573 = $ReallocAsyncCtx5 + 196 | 0; //@line 20345
   HEAP32[$573 >> 2] = $94; //@line 20346
   $574 = $ReallocAsyncCtx5 + 200 | 0; //@line 20347
   HEAP32[$574 >> 2] = $96; //@line 20348
   $575 = $ReallocAsyncCtx5 + 204 | 0; //@line 20349
   HEAP32[$575 >> 2] = $98; //@line 20350
   $576 = $ReallocAsyncCtx5 + 208 | 0; //@line 20351
   HEAP32[$576 >> 2] = $100; //@line 20352
   $577 = $ReallocAsyncCtx5 + 212 | 0; //@line 20353
   HEAP32[$577 >> 2] = $102; //@line 20354
   $578 = $ReallocAsyncCtx5 + 216 | 0; //@line 20355
   HEAP32[$578 >> 2] = $104; //@line 20356
   $579 = $ReallocAsyncCtx5 + 220 | 0; //@line 20357
   HEAP32[$579 >> 2] = $106; //@line 20358
   $580 = $ReallocAsyncCtx5 + 224 | 0; //@line 20359
   HEAP32[$580 >> 2] = $108; //@line 20360
   $581 = $ReallocAsyncCtx5 + 228 | 0; //@line 20361
   HEAP32[$581 >> 2] = $110; //@line 20362
   $582 = $ReallocAsyncCtx5 + 232 | 0; //@line 20363
   HEAP32[$582 >> 2] = $112; //@line 20364
   $583 = $ReallocAsyncCtx5 + 236 | 0; //@line 20365
   HEAP32[$583 >> 2] = $$0107$be; //@line 20366
   $584 = $ReallocAsyncCtx5 + 240 | 0; //@line 20367
   HEAP32[$584 >> 2] = $114; //@line 20368
   $585 = $ReallocAsyncCtx5 + 244 | 0; //@line 20369
   HEAP32[$585 >> 2] = $116; //@line 20370
   sp = STACKTOP; //@line 20371
   return;
  }
  HEAP8[___async_retval >> 0] = $523 & 1; //@line 20376
  ___async_unwind = 0; //@line 20377
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 20378
  $524 = $ReallocAsyncCtx5 + 4 | 0; //@line 20379
  HEAP32[$524 >> 2] = $2; //@line 20380
  $525 = $ReallocAsyncCtx5 + 8 | 0; //@line 20381
  HEAP8[$525 >> 0] = $4; //@line 20382
  $526 = $ReallocAsyncCtx5 + 12 | 0; //@line 20383
  HEAP32[$526 >> 2] = $6; //@line 20384
  $527 = $ReallocAsyncCtx5 + 16 | 0; //@line 20385
  HEAP32[$527 >> 2] = $8; //@line 20386
  $528 = $ReallocAsyncCtx5 + 20 | 0; //@line 20387
  HEAP32[$528 >> 2] = $10; //@line 20388
  $529 = $ReallocAsyncCtx5 + 24 | 0; //@line 20389
  HEAP32[$529 >> 2] = $515; //@line 20390
  $530 = $ReallocAsyncCtx5 + 28 | 0; //@line 20391
  HEAP32[$530 >> 2] = $12; //@line 20392
  $531 = $ReallocAsyncCtx5 + 32 | 0; //@line 20393
  HEAP32[$531 >> 2] = $14; //@line 20394
  $532 = $ReallocAsyncCtx5 + 36 | 0; //@line 20395
  HEAP32[$532 >> 2] = $16; //@line 20396
  $533 = $ReallocAsyncCtx5 + 40 | 0; //@line 20397
  HEAP32[$533 >> 2] = $18; //@line 20398
  $534 = $ReallocAsyncCtx5 + 44 | 0; //@line 20399
  HEAP32[$534 >> 2] = $20; //@line 20400
  $535 = $ReallocAsyncCtx5 + 48 | 0; //@line 20401
  HEAP32[$535 >> 2] = $22; //@line 20402
  $536 = $ReallocAsyncCtx5 + 52 | 0; //@line 20403
  HEAP32[$536 >> 2] = $24; //@line 20404
  $537 = $ReallocAsyncCtx5 + 56 | 0; //@line 20405
  HEAP32[$537 >> 2] = $26; //@line 20406
  $538 = $ReallocAsyncCtx5 + 60 | 0; //@line 20407
  HEAP32[$538 >> 2] = $28; //@line 20408
  $539 = $ReallocAsyncCtx5 + 64 | 0; //@line 20409
  HEAP32[$539 >> 2] = $30; //@line 20410
  $540 = $ReallocAsyncCtx5 + 68 | 0; //@line 20411
  HEAP32[$540 >> 2] = $32; //@line 20412
  $541 = $ReallocAsyncCtx5 + 72 | 0; //@line 20413
  HEAP8[$541 >> 0] = $517; //@line 20414
  $542 = $ReallocAsyncCtx5 + 76 | 0; //@line 20415
  HEAP32[$542 >> 2] = $34; //@line 20416
  $543 = $ReallocAsyncCtx5 + 80 | 0; //@line 20417
  HEAP32[$543 >> 2] = $36; //@line 20418
  $544 = $ReallocAsyncCtx5 + 84 | 0; //@line 20419
  HEAP32[$544 >> 2] = $38; //@line 20420
  $545 = $ReallocAsyncCtx5 + 88 | 0; //@line 20421
  HEAP32[$545 >> 2] = $40; //@line 20422
  $546 = $ReallocAsyncCtx5 + 92 | 0; //@line 20423
  HEAP8[$546 >> 0] = $46; //@line 20424
  $547 = $ReallocAsyncCtx5 + 93 | 0; //@line 20425
  HEAP8[$547 >> 0] = $44; //@line 20426
  $548 = $ReallocAsyncCtx5 + 96 | 0; //@line 20427
  HEAP32[$548 >> 2] = $50; //@line 20428
  $549 = $ReallocAsyncCtx5 + 100 | 0; //@line 20429
  HEAP32[$549 >> 2] = $48; //@line 20430
  $550 = $ReallocAsyncCtx5 + 104 | 0; //@line 20431
  HEAP32[$550 >> 2] = $52; //@line 20432
  $551 = $ReallocAsyncCtx5 + 108 | 0; //@line 20433
  HEAP32[$551 >> 2] = $54; //@line 20434
  $552 = $ReallocAsyncCtx5 + 112 | 0; //@line 20435
  HEAP8[$552 >> 0] = $511; //@line 20436
  $553 = $ReallocAsyncCtx5 + 116 | 0; //@line 20437
  HEAP32[$553 >> 2] = $56; //@line 20438
  $554 = $ReallocAsyncCtx5 + 120 | 0; //@line 20439
  HEAP32[$554 >> 2] = $58; //@line 20440
  $555 = $ReallocAsyncCtx5 + 124 | 0; //@line 20441
  HEAP32[$555 >> 2] = $60; //@line 20442
  $556 = $ReallocAsyncCtx5 + 128 | 0; //@line 20443
  HEAP32[$556 >> 2] = $62; //@line 20444
  $557 = $ReallocAsyncCtx5 + 132 | 0; //@line 20445
  HEAP32[$557 >> 2] = $64; //@line 20446
  $558 = $ReallocAsyncCtx5 + 136 | 0; //@line 20447
  HEAP32[$558 >> 2] = $66; //@line 20448
  $559 = $ReallocAsyncCtx5 + 140 | 0; //@line 20449
  HEAP32[$559 >> 2] = $68; //@line 20450
  $560 = $ReallocAsyncCtx5 + 144 | 0; //@line 20451
  HEAP32[$560 >> 2] = $70; //@line 20452
  $561 = $ReallocAsyncCtx5 + 148 | 0; //@line 20453
  HEAP32[$561 >> 2] = $72; //@line 20454
  $562 = $ReallocAsyncCtx5 + 152 | 0; //@line 20455
  HEAP32[$562 >> 2] = $74; //@line 20456
  $563 = $ReallocAsyncCtx5 + 156 | 0; //@line 20457
  HEAP8[$563 >> 0] = $519; //@line 20458
  $564 = $ReallocAsyncCtx5 + 160 | 0; //@line 20459
  HEAP32[$564 >> 2] = $76; //@line 20460
  $565 = $ReallocAsyncCtx5 + 164 | 0; //@line 20461
  HEAP32[$565 >> 2] = $78; //@line 20462
  $566 = $ReallocAsyncCtx5 + 168 | 0; //@line 20463
  HEAP32[$566 >> 2] = $80; //@line 20464
  $567 = $ReallocAsyncCtx5 + 172 | 0; //@line 20465
  HEAP32[$567 >> 2] = $82; //@line 20466
  $568 = $ReallocAsyncCtx5 + 176 | 0; //@line 20467
  HEAP32[$568 >> 2] = $84; //@line 20468
  $569 = $ReallocAsyncCtx5 + 180 | 0; //@line 20469
  HEAP32[$569 >> 2] = $86; //@line 20470
  $570 = $ReallocAsyncCtx5 + 184 | 0; //@line 20471
  HEAP32[$570 >> 2] = $88; //@line 20472
  $571 = $ReallocAsyncCtx5 + 188 | 0; //@line 20473
  HEAP32[$571 >> 2] = $90; //@line 20474
  $572 = $ReallocAsyncCtx5 + 192 | 0; //@line 20475
  HEAP32[$572 >> 2] = $92; //@line 20476
  $573 = $ReallocAsyncCtx5 + 196 | 0; //@line 20477
  HEAP32[$573 >> 2] = $94; //@line 20478
  $574 = $ReallocAsyncCtx5 + 200 | 0; //@line 20479
  HEAP32[$574 >> 2] = $96; //@line 20480
  $575 = $ReallocAsyncCtx5 + 204 | 0; //@line 20481
  HEAP32[$575 >> 2] = $98; //@line 20482
  $576 = $ReallocAsyncCtx5 + 208 | 0; //@line 20483
  HEAP32[$576 >> 2] = $100; //@line 20484
  $577 = $ReallocAsyncCtx5 + 212 | 0; //@line 20485
  HEAP32[$577 >> 2] = $102; //@line 20486
  $578 = $ReallocAsyncCtx5 + 216 | 0; //@line 20487
  HEAP32[$578 >> 2] = $104; //@line 20488
  $579 = $ReallocAsyncCtx5 + 220 | 0; //@line 20489
  HEAP32[$579 >> 2] = $106; //@line 20490
  $580 = $ReallocAsyncCtx5 + 224 | 0; //@line 20491
  HEAP32[$580 >> 2] = $108; //@line 20492
  $581 = $ReallocAsyncCtx5 + 228 | 0; //@line 20493
  HEAP32[$581 >> 2] = $110; //@line 20494
  $582 = $ReallocAsyncCtx5 + 232 | 0; //@line 20495
  HEAP32[$582 >> 2] = $112; //@line 20496
  $583 = $ReallocAsyncCtx5 + 236 | 0; //@line 20497
  HEAP32[$583 >> 2] = $$0107$be; //@line 20498
  $584 = $ReallocAsyncCtx5 + 240 | 0; //@line 20499
  HEAP32[$584 >> 2] = $114; //@line 20500
  $585 = $ReallocAsyncCtx5 + 244 | 0; //@line 20501
  HEAP32[$585 >> 2] = $116; //@line 20502
  sp = STACKTOP; //@line 20503
  return;
 } else if ((label | 0) == 30) {
  $590 = HEAP8[$36 + ($119 & 255) >> 0] | 0; //@line 20510
  $603 = $$0$be + 5 << 24 >> 24; //@line 20523
  $610 = (HEAPU8[$36 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$36 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$36 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 20530
  $613 = HEAP32[(HEAP32[$100 >> 2] | 0) + 48 >> 2] | 0; //@line 20533
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(232) | 0; //@line 20534
  $614 = FUNCTION_TABLE_iiii[$613 & 31]($62, $590, $610) | 0; //@line 20535
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 480; //@line 20538
   $615 = $ReallocAsyncCtx6 + 4 | 0; //@line 20539
   HEAP32[$615 >> 2] = $2; //@line 20540
   $616 = $ReallocAsyncCtx6 + 8 | 0; //@line 20541
   HEAP8[$616 >> 0] = $4; //@line 20542
   $617 = $ReallocAsyncCtx6 + 12 | 0; //@line 20543
   HEAP32[$617 >> 2] = $6; //@line 20544
   $618 = $ReallocAsyncCtx6 + 16 | 0; //@line 20545
   HEAP32[$618 >> 2] = $8; //@line 20546
   $619 = $ReallocAsyncCtx6 + 20 | 0; //@line 20547
   HEAP32[$619 >> 2] = $10; //@line 20548
   $620 = $ReallocAsyncCtx6 + 24 | 0; //@line 20549
   HEAP32[$620 >> 2] = $12; //@line 20550
   $621 = $ReallocAsyncCtx6 + 28 | 0; //@line 20551
   HEAP32[$621 >> 2] = $14; //@line 20552
   $622 = $ReallocAsyncCtx6 + 32 | 0; //@line 20553
   HEAP32[$622 >> 2] = $16; //@line 20554
   $623 = $ReallocAsyncCtx6 + 36 | 0; //@line 20555
   HEAP32[$623 >> 2] = $18; //@line 20556
   $624 = $ReallocAsyncCtx6 + 40 | 0; //@line 20557
   HEAP32[$624 >> 2] = $20; //@line 20558
   $625 = $ReallocAsyncCtx6 + 44 | 0; //@line 20559
   HEAP32[$625 >> 2] = $22; //@line 20560
   $626 = $ReallocAsyncCtx6 + 48 | 0; //@line 20561
   HEAP32[$626 >> 2] = $24; //@line 20562
   $627 = $ReallocAsyncCtx6 + 52 | 0; //@line 20563
   HEAP32[$627 >> 2] = $26; //@line 20564
   $628 = $ReallocAsyncCtx6 + 56 | 0; //@line 20565
   HEAP32[$628 >> 2] = $28; //@line 20566
   $629 = $ReallocAsyncCtx6 + 60 | 0; //@line 20567
   HEAP32[$629 >> 2] = $30; //@line 20568
   $630 = $ReallocAsyncCtx6 + 64 | 0; //@line 20569
   HEAP32[$630 >> 2] = $32; //@line 20570
   $631 = $ReallocAsyncCtx6 + 68 | 0; //@line 20571
   HEAP32[$631 >> 2] = $34; //@line 20572
   $632 = $ReallocAsyncCtx6 + 72 | 0; //@line 20573
   HEAP32[$632 >> 2] = $36; //@line 20574
   $633 = $ReallocAsyncCtx6 + 76 | 0; //@line 20575
   HEAP32[$633 >> 2] = $38; //@line 20576
   $634 = $ReallocAsyncCtx6 + 80 | 0; //@line 20577
   HEAP32[$634 >> 2] = $40; //@line 20578
   $635 = $ReallocAsyncCtx6 + 84 | 0; //@line 20579
   HEAP8[$635 >> 0] = $46; //@line 20580
   $636 = $ReallocAsyncCtx6 + 85 | 0; //@line 20581
   HEAP8[$636 >> 0] = $44; //@line 20582
   $637 = $ReallocAsyncCtx6 + 88 | 0; //@line 20583
   HEAP32[$637 >> 2] = $50; //@line 20584
   $638 = $ReallocAsyncCtx6 + 92 | 0; //@line 20585
   HEAP32[$638 >> 2] = $48; //@line 20586
   $639 = $ReallocAsyncCtx6 + 96 | 0; //@line 20587
   HEAP32[$639 >> 2] = $52; //@line 20588
   $640 = $ReallocAsyncCtx6 + 100 | 0; //@line 20589
   HEAP32[$640 >> 2] = $54; //@line 20590
   $641 = $ReallocAsyncCtx6 + 104 | 0; //@line 20591
   HEAP32[$641 >> 2] = $56; //@line 20592
   $642 = $ReallocAsyncCtx6 + 108 | 0; //@line 20593
   HEAP32[$642 >> 2] = $58; //@line 20594
   $643 = $ReallocAsyncCtx6 + 112 | 0; //@line 20595
   HEAP32[$643 >> 2] = $60; //@line 20596
   $644 = $ReallocAsyncCtx6 + 116 | 0; //@line 20597
   HEAP32[$644 >> 2] = $62; //@line 20598
   $645 = $ReallocAsyncCtx6 + 120 | 0; //@line 20599
   HEAP32[$645 >> 2] = $64; //@line 20600
   $646 = $ReallocAsyncCtx6 + 124 | 0; //@line 20601
   HEAP32[$646 >> 2] = $66; //@line 20602
   $647 = $ReallocAsyncCtx6 + 128 | 0; //@line 20603
   HEAP32[$647 >> 2] = $68; //@line 20604
   $648 = $ReallocAsyncCtx6 + 132 | 0; //@line 20605
   HEAP32[$648 >> 2] = $70; //@line 20606
   $649 = $ReallocAsyncCtx6 + 136 | 0; //@line 20607
   HEAP32[$649 >> 2] = $72; //@line 20608
   $650 = $ReallocAsyncCtx6 + 140 | 0; //@line 20609
   HEAP32[$650 >> 2] = $74; //@line 20610
   $651 = $ReallocAsyncCtx6 + 144 | 0; //@line 20611
   HEAP32[$651 >> 2] = $76; //@line 20612
   $652 = $ReallocAsyncCtx6 + 148 | 0; //@line 20613
   HEAP32[$652 >> 2] = $78; //@line 20614
   $653 = $ReallocAsyncCtx6 + 152 | 0; //@line 20615
   HEAP32[$653 >> 2] = $80; //@line 20616
   $654 = $ReallocAsyncCtx6 + 156 | 0; //@line 20617
   HEAP32[$654 >> 2] = $82; //@line 20618
   $655 = $ReallocAsyncCtx6 + 160 | 0; //@line 20619
   HEAP32[$655 >> 2] = $84; //@line 20620
   $656 = $ReallocAsyncCtx6 + 164 | 0; //@line 20621
   HEAP8[$656 >> 0] = $603; //@line 20622
   $657 = $ReallocAsyncCtx6 + 168 | 0; //@line 20623
   HEAP32[$657 >> 2] = $86; //@line 20624
   $658 = $ReallocAsyncCtx6 + 172 | 0; //@line 20625
   HEAP32[$658 >> 2] = $88; //@line 20626
   $659 = $ReallocAsyncCtx6 + 176 | 0; //@line 20627
   HEAP32[$659 >> 2] = $90; //@line 20628
   $660 = $ReallocAsyncCtx6 + 180 | 0; //@line 20629
   HEAP32[$660 >> 2] = $92; //@line 20630
   $661 = $ReallocAsyncCtx6 + 184 | 0; //@line 20631
   HEAP32[$661 >> 2] = $94; //@line 20632
   $662 = $ReallocAsyncCtx6 + 188 | 0; //@line 20633
   HEAP32[$662 >> 2] = $96; //@line 20634
   $663 = $ReallocAsyncCtx6 + 192 | 0; //@line 20635
   HEAP32[$663 >> 2] = $98; //@line 20636
   $664 = $ReallocAsyncCtx6 + 196 | 0; //@line 20637
   HEAP32[$664 >> 2] = $100; //@line 20638
   $665 = $ReallocAsyncCtx6 + 200 | 0; //@line 20639
   HEAP32[$665 >> 2] = $102; //@line 20640
   $666 = $ReallocAsyncCtx6 + 204 | 0; //@line 20641
   HEAP32[$666 >> 2] = $104; //@line 20642
   $667 = $ReallocAsyncCtx6 + 208 | 0; //@line 20643
   HEAP32[$667 >> 2] = $106; //@line 20644
   $668 = $ReallocAsyncCtx6 + 212 | 0; //@line 20645
   HEAP32[$668 >> 2] = $108; //@line 20646
   $669 = $ReallocAsyncCtx6 + 216 | 0; //@line 20647
   HEAP32[$669 >> 2] = $110; //@line 20648
   $670 = $ReallocAsyncCtx6 + 220 | 0; //@line 20649
   HEAP32[$670 >> 2] = $112; //@line 20650
   $671 = $ReallocAsyncCtx6 + 224 | 0; //@line 20651
   HEAP32[$671 >> 2] = $114; //@line 20652
   $672 = $ReallocAsyncCtx6 + 228 | 0; //@line 20653
   HEAP32[$672 >> 2] = $116; //@line 20654
   sp = STACKTOP; //@line 20655
   return;
  }
  HEAP8[___async_retval >> 0] = $614; //@line 20659
  ___async_unwind = 0; //@line 20660
  HEAP32[$ReallocAsyncCtx6 >> 2] = 480; //@line 20661
  $615 = $ReallocAsyncCtx6 + 4 | 0; //@line 20662
  HEAP32[$615 >> 2] = $2; //@line 20663
  $616 = $ReallocAsyncCtx6 + 8 | 0; //@line 20664
  HEAP8[$616 >> 0] = $4; //@line 20665
  $617 = $ReallocAsyncCtx6 + 12 | 0; //@line 20666
  HEAP32[$617 >> 2] = $6; //@line 20667
  $618 = $ReallocAsyncCtx6 + 16 | 0; //@line 20668
  HEAP32[$618 >> 2] = $8; //@line 20669
  $619 = $ReallocAsyncCtx6 + 20 | 0; //@line 20670
  HEAP32[$619 >> 2] = $10; //@line 20671
  $620 = $ReallocAsyncCtx6 + 24 | 0; //@line 20672
  HEAP32[$620 >> 2] = $12; //@line 20673
  $621 = $ReallocAsyncCtx6 + 28 | 0; //@line 20674
  HEAP32[$621 >> 2] = $14; //@line 20675
  $622 = $ReallocAsyncCtx6 + 32 | 0; //@line 20676
  HEAP32[$622 >> 2] = $16; //@line 20677
  $623 = $ReallocAsyncCtx6 + 36 | 0; //@line 20678
  HEAP32[$623 >> 2] = $18; //@line 20679
  $624 = $ReallocAsyncCtx6 + 40 | 0; //@line 20680
  HEAP32[$624 >> 2] = $20; //@line 20681
  $625 = $ReallocAsyncCtx6 + 44 | 0; //@line 20682
  HEAP32[$625 >> 2] = $22; //@line 20683
  $626 = $ReallocAsyncCtx6 + 48 | 0; //@line 20684
  HEAP32[$626 >> 2] = $24; //@line 20685
  $627 = $ReallocAsyncCtx6 + 52 | 0; //@line 20686
  HEAP32[$627 >> 2] = $26; //@line 20687
  $628 = $ReallocAsyncCtx6 + 56 | 0; //@line 20688
  HEAP32[$628 >> 2] = $28; //@line 20689
  $629 = $ReallocAsyncCtx6 + 60 | 0; //@line 20690
  HEAP32[$629 >> 2] = $30; //@line 20691
  $630 = $ReallocAsyncCtx6 + 64 | 0; //@line 20692
  HEAP32[$630 >> 2] = $32; //@line 20693
  $631 = $ReallocAsyncCtx6 + 68 | 0; //@line 20694
  HEAP32[$631 >> 2] = $34; //@line 20695
  $632 = $ReallocAsyncCtx6 + 72 | 0; //@line 20696
  HEAP32[$632 >> 2] = $36; //@line 20697
  $633 = $ReallocAsyncCtx6 + 76 | 0; //@line 20698
  HEAP32[$633 >> 2] = $38; //@line 20699
  $634 = $ReallocAsyncCtx6 + 80 | 0; //@line 20700
  HEAP32[$634 >> 2] = $40; //@line 20701
  $635 = $ReallocAsyncCtx6 + 84 | 0; //@line 20702
  HEAP8[$635 >> 0] = $46; //@line 20703
  $636 = $ReallocAsyncCtx6 + 85 | 0; //@line 20704
  HEAP8[$636 >> 0] = $44; //@line 20705
  $637 = $ReallocAsyncCtx6 + 88 | 0; //@line 20706
  HEAP32[$637 >> 2] = $50; //@line 20707
  $638 = $ReallocAsyncCtx6 + 92 | 0; //@line 20708
  HEAP32[$638 >> 2] = $48; //@line 20709
  $639 = $ReallocAsyncCtx6 + 96 | 0; //@line 20710
  HEAP32[$639 >> 2] = $52; //@line 20711
  $640 = $ReallocAsyncCtx6 + 100 | 0; //@line 20712
  HEAP32[$640 >> 2] = $54; //@line 20713
  $641 = $ReallocAsyncCtx6 + 104 | 0; //@line 20714
  HEAP32[$641 >> 2] = $56; //@line 20715
  $642 = $ReallocAsyncCtx6 + 108 | 0; //@line 20716
  HEAP32[$642 >> 2] = $58; //@line 20717
  $643 = $ReallocAsyncCtx6 + 112 | 0; //@line 20718
  HEAP32[$643 >> 2] = $60; //@line 20719
  $644 = $ReallocAsyncCtx6 + 116 | 0; //@line 20720
  HEAP32[$644 >> 2] = $62; //@line 20721
  $645 = $ReallocAsyncCtx6 + 120 | 0; //@line 20722
  HEAP32[$645 >> 2] = $64; //@line 20723
  $646 = $ReallocAsyncCtx6 + 124 | 0; //@line 20724
  HEAP32[$646 >> 2] = $66; //@line 20725
  $647 = $ReallocAsyncCtx6 + 128 | 0; //@line 20726
  HEAP32[$647 >> 2] = $68; //@line 20727
  $648 = $ReallocAsyncCtx6 + 132 | 0; //@line 20728
  HEAP32[$648 >> 2] = $70; //@line 20729
  $649 = $ReallocAsyncCtx6 + 136 | 0; //@line 20730
  HEAP32[$649 >> 2] = $72; //@line 20731
  $650 = $ReallocAsyncCtx6 + 140 | 0; //@line 20732
  HEAP32[$650 >> 2] = $74; //@line 20733
  $651 = $ReallocAsyncCtx6 + 144 | 0; //@line 20734
  HEAP32[$651 >> 2] = $76; //@line 20735
  $652 = $ReallocAsyncCtx6 + 148 | 0; //@line 20736
  HEAP32[$652 >> 2] = $78; //@line 20737
  $653 = $ReallocAsyncCtx6 + 152 | 0; //@line 20738
  HEAP32[$653 >> 2] = $80; //@line 20739
  $654 = $ReallocAsyncCtx6 + 156 | 0; //@line 20740
  HEAP32[$654 >> 2] = $82; //@line 20741
  $655 = $ReallocAsyncCtx6 + 160 | 0; //@line 20742
  HEAP32[$655 >> 2] = $84; //@line 20743
  $656 = $ReallocAsyncCtx6 + 164 | 0; //@line 20744
  HEAP8[$656 >> 0] = $603; //@line 20745
  $657 = $ReallocAsyncCtx6 + 168 | 0; //@line 20746
  HEAP32[$657 >> 2] = $86; //@line 20747
  $658 = $ReallocAsyncCtx6 + 172 | 0; //@line 20748
  HEAP32[$658 >> 2] = $88; //@line 20749
  $659 = $ReallocAsyncCtx6 + 176 | 0; //@line 20750
  HEAP32[$659 >> 2] = $90; //@line 20751
  $660 = $ReallocAsyncCtx6 + 180 | 0; //@line 20752
  HEAP32[$660 >> 2] = $92; //@line 20753
  $661 = $ReallocAsyncCtx6 + 184 | 0; //@line 20754
  HEAP32[$661 >> 2] = $94; //@line 20755
  $662 = $ReallocAsyncCtx6 + 188 | 0; //@line 20756
  HEAP32[$662 >> 2] = $96; //@line 20757
  $663 = $ReallocAsyncCtx6 + 192 | 0; //@line 20758
  HEAP32[$663 >> 2] = $98; //@line 20759
  $664 = $ReallocAsyncCtx6 + 196 | 0; //@line 20760
  HEAP32[$664 >> 2] = $100; //@line 20761
  $665 = $ReallocAsyncCtx6 + 200 | 0; //@line 20762
  HEAP32[$665 >> 2] = $102; //@line 20763
  $666 = $ReallocAsyncCtx6 + 204 | 0; //@line 20764
  HEAP32[$666 >> 2] = $104; //@line 20765
  $667 = $ReallocAsyncCtx6 + 208 | 0; //@line 20766
  HEAP32[$667 >> 2] = $106; //@line 20767
  $668 = $ReallocAsyncCtx6 + 212 | 0; //@line 20768
  HEAP32[$668 >> 2] = $108; //@line 20769
  $669 = $ReallocAsyncCtx6 + 216 | 0; //@line 20770
  HEAP32[$669 >> 2] = $110; //@line 20771
  $670 = $ReallocAsyncCtx6 + 220 | 0; //@line 20772
  HEAP32[$670 >> 2] = $112; //@line 20773
  $671 = $ReallocAsyncCtx6 + 224 | 0; //@line 20774
  HEAP32[$671 >> 2] = $114; //@line 20775
  $672 = $ReallocAsyncCtx6 + 228 | 0; //@line 20776
  HEAP32[$672 >> 2] = $116; //@line 20777
  sp = STACKTOP; //@line 20778
  return;
 } else if ((label | 0) == 33) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 20783
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_326($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0107$be = 0, $$0111 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $119 = 0, $12 = 0, $130 = 0, $131 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $204 = 0, $207 = 0, $214 = 0, $215 = 0, $22 = 0, $221 = 0, $24 = 0, $240 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $311 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $377 = 0, $378 = 0, $38 = 0, $392 = 0, $4 = 0, $40 = 0, $413 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $48 = 0, $481 = 0, $485 = 0, $489 = 0, $494 = 0, $495 = 0, $499 = 0, $50 = 0, $503 = 0, $505 = 0, $507 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $578 = 0, $58 = 0, $591 = 0, $598 = 0, $6 = 0, $60 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16873
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16875
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 16877
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16879
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16881
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16883
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16885
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16887
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16889
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 16891
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 16893
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 16895
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 16897
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 16899
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 16901
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 16903
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 16905
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 16907
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 16911
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 16913
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 16915
 $44 = HEAP8[$0 + 88 >> 0] | 0; //@line 16917
 $46 = HEAP8[$0 + 89 >> 0] | 0; //@line 16919
 $48 = HEAP32[$0 + 92 >> 2] | 0; //@line 16921
 $50 = HEAP32[$0 + 96 >> 2] | 0; //@line 16923
 $52 = HEAP32[$0 + 100 >> 2] | 0; //@line 16925
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 16927
 $56 = HEAP32[$0 + 108 >> 2] | 0; //@line 16929
 $58 = HEAP32[$0 + 112 >> 2] | 0; //@line 16931
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 16933
 $62 = HEAP32[$0 + 120 >> 2] | 0; //@line 16935
 $64 = HEAP32[$0 + 124 >> 2] | 0; //@line 16937
 $66 = HEAP32[$0 + 128 >> 2] | 0; //@line 16939
 $68 = HEAP32[$0 + 132 >> 2] | 0; //@line 16941
 $70 = HEAP32[$0 + 136 >> 2] | 0; //@line 16943
 $72 = HEAP32[$0 + 140 >> 2] | 0; //@line 16945
 $74 = HEAP32[$0 + 144 >> 2] | 0; //@line 16947
 $76 = HEAP32[$0 + 148 >> 2] | 0; //@line 16949
 $78 = HEAP32[$0 + 152 >> 2] | 0; //@line 16951
 $80 = HEAP32[$0 + 156 >> 2] | 0; //@line 16953
 $82 = HEAP32[$0 + 160 >> 2] | 0; //@line 16955
 $84 = HEAP32[$0 + 164 >> 2] | 0; //@line 16957
 $86 = HEAP32[$0 + 168 >> 2] | 0; //@line 16959
 $88 = HEAP32[$0 + 172 >> 2] | 0; //@line 16961
 $90 = HEAP32[$0 + 176 >> 2] | 0; //@line 16963
 $92 = HEAP32[$0 + 180 >> 2] | 0; //@line 16965
 $94 = HEAP32[$0 + 184 >> 2] | 0; //@line 16967
 $96 = HEAP32[$0 + 188 >> 2] | 0; //@line 16969
 $98 = HEAP32[$0 + 192 >> 2] | 0; //@line 16971
 $100 = HEAP32[$0 + 196 >> 2] | 0; //@line 16973
 $102 = HEAP32[$0 + 200 >> 2] | 0; //@line 16975
 $104 = HEAP32[$0 + 204 >> 2] | 0; //@line 16977
 $106 = HEAP32[$0 + 208 >> 2] | 0; //@line 16979
 $108 = HEAP32[$0 + 212 >> 2] | 0; //@line 16981
 $110 = HEAP32[$0 + 216 >> 2] | 0; //@line 16983
 $112 = HEAP32[$0 + 220 >> 2] | 0; //@line 16985
 $114 = HEAP32[$0 + 224 >> 2] | 0; //@line 16987
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 16989
 $$0111 = HEAP8[___async_retval >> 0] | 0; //@line 16992
 $$reg2mem$0 = HEAP8[$0 + 72 >> 0] | 0; //@line 16992
 L2 : while (1) {
  $377 = HEAP8[$106 >> 0] | 0; //@line 16997
  $378 = $377 & 255; //@line 16998
  if ((128 - (HEAPU8[$116 >> 0] | 0) - $378 | 0) > 2) {
   HEAP8[$40 + 4 + $378 >> 0] = 6; //@line 17004
   HEAP8[($377 + 1 & 255) + ($40 + 4) >> 0] = $$0111; //@line 17008
   HEAP8[$106 >> 0] = $377 + 3 << 24 >> 24; //@line 17010
   HEAP8[($377 + 2 & 255) + ($40 + 4) >> 0] = $4; //@line 17013
   HEAP8[$102 >> 0] = 1; //@line 17014
   $$0$be = $$reg2mem$0; //@line 17015
   $$0107$be = 0; //@line 17015
  } else {
   $$0$be = $$reg2mem$0; //@line 17017
   $$0107$be = -1010; //@line 17017
  }
  L6 : while (1) {
   if (($$0$be & 255) >= ($44 & 255)) {
    label = 31; //@line 17022
    break L2;
   }
   $119 = $$0$be + 1 << 24 >> 24; //@line 17026
   switch (HEAP8[$38 + ($$0$be & 255) >> 0] | 0) {
   case 3:
    {
     label = 4; //@line 17031
     break L2;
     break;
    }
   case 5:
    {
     label = 9; //@line 17036
     break L2;
     break;
    }
   case 7:
    {
     label = 19; //@line 17041
     break L2;
     break;
    }
   case 9:
    {
     label = 25; //@line 17046
     break L2;
     break;
    }
   case 10:
    {
     label = 28; //@line 17051
     break L2;
     break;
    }
   case 6:
    {
     break L6;
     break;
    }
   case 2:
    {
     HEAP32[$52 >> 2] = 0; //@line 17060
     HEAP8[$22 >> 0] = HEAP8[$38 + ($119 & 255) >> 0] | 0; //@line 17065
     HEAP8[$28 >> 0] = HEAP8[$38 + ($$0$be + 2 & 255) >> 0] | 0; //@line 17070
     $$0$be = $$0$be + 3 << 24 >> 24; //@line 17071
     continue L6;
     break;
    }
   case 4:
    {
     $204 = $$0$be + 2 << 24 >> 24; //@line 17076
     $207 = HEAP8[$38 + ($119 & 255) >> 0] | 0; //@line 17079
     HEAP8[$98 >> 0] = $207; //@line 17080
     HEAP16[$90 >> 1] = 1 << ($207 & 255); //@line 17084
     $214 = HEAP8[$106 >> 0] | 0; //@line 17088
     $215 = $214 & 255; //@line 17089
     if ((128 - (HEAPU8[$116 >> 0] | 0) | 0) <= ($215 | 0)) {
      $$0$be = $204; //@line 17092
      $$0107$be = -1010; //@line 17092
      continue L6;
     }
     HEAP8[$106 >> 0] = $214 + 1 << 24 >> 24; //@line 17097
     HEAP8[$40 + 4 + $215 >> 0] = 4; //@line 17098
     HEAP8[$102 >> 0] = 1; //@line 17099
     $$0$be = $204; //@line 17100
     $$0107$be = 0; //@line 17100
     continue L6;
     break;
    }
   case 8:
    {
     $481 = $$0$be + 2 << 24 >> 24; //@line 17105
     $485 = HEAP8[$38 + ($119 & 255) >> 0] & 15; //@line 17109
     $489 = ($485 + ($485 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 17114
     HEAP32[$66 >> 2] = $489; //@line 17115
     HEAP32[$76 >> 2] = $489 + 1e3; //@line 17117
     $494 = HEAP8[$106 >> 0] | 0; //@line 17121
     $495 = $494 & 255; //@line 17122
     if ((128 - (HEAPU8[$116 >> 0] | 0) | 0) <= ($495 | 0)) {
      $$0$be = $481; //@line 17125
      $$0107$be = -1010; //@line 17125
      continue L6;
     }
     HEAP8[$106 >> 0] = $494 + 1 << 24 >> 24; //@line 17130
     HEAP8[$40 + 4 + $495 >> 0] = 8; //@line 17131
     HEAP8[$14 >> 0] = 1; //@line 17132
     HEAP8[$102 >> 0] = 1; //@line 17133
     $$0$be = $481; //@line 17134
     $$0107$be = 0; //@line 17134
     continue L6;
     break;
    }
   default:
    {
     $$0$be = $119; //@line 17139
     $$0107$be = -1013; //@line 17139
     continue L6;
    }
   }
  }
  $311 = HEAP32[$6 >> 2] | 0; //@line 17144
  if (!$311) {
   $$0111 = -1; //@line 17147
   $$reg2mem$0 = $119; //@line 17147
  } else {
   label = 13; //@line 17149
   break;
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$96 >> 0] = 0; //@line 17154
  HEAP8[$112 >> 0] = 0; //@line 17155
  HEAP8[$114 >> 0] = 0; //@line 17156
  HEAP8[$110 >> 0] = 0; //@line 17157
  $130 = $119 & 255; //@line 17158
  $131 = $130 + -1 | 0; //@line 17159
  HEAP32[$12 >> 2] = $38 + $131; //@line 17161
  HEAP8[$108 >> 0] = $54 - $131; //@line 17164
  HEAP8[$78 >> 0] = HEAP8[$84 >> 0] | 0; //@line 17166
  HEAP8[$68 >> 0] = HEAP8[$72 >> 0] | 0; //@line 17168
  HEAP8[$48 >> 0] = HEAP8[$60 >> 0] | 0; //@line 17170
  HEAP8[$18 >> 0] = HEAP8[$32 >> 0] | 0; //@line 17172
  HEAP8[$2 >> 0] = HEAP8[$10 >> 0] | 0; //@line 17174
  $142 = HEAP32[(HEAP32[$86 >> 2] | 0) + 36 >> 2] | 0; //@line 17177
  $ReallocAsyncCtx = _emscripten_realloc_async_context(236) | 0; //@line 17178
  $143 = FUNCTION_TABLE_iiiiiii[$142 & 3]($62, $104, $96, $112, $114, $110) | 0; //@line 17179
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 475; //@line 17182
   $144 = $ReallocAsyncCtx + 4 | 0; //@line 17183
   HEAP32[$144 >> 2] = $2; //@line 17184
   $145 = $ReallocAsyncCtx + 8 | 0; //@line 17185
   HEAP8[$145 >> 0] = $4; //@line 17186
   $146 = $ReallocAsyncCtx + 12 | 0; //@line 17187
   HEAP32[$146 >> 2] = $6; //@line 17188
   $147 = $ReallocAsyncCtx + 16 | 0; //@line 17189
   HEAP32[$147 >> 2] = $8; //@line 17190
   $148 = $ReallocAsyncCtx + 20 | 0; //@line 17191
   HEAP32[$148 >> 2] = $10; //@line 17192
   $149 = $ReallocAsyncCtx + 24 | 0; //@line 17193
   HEAP32[$149 >> 2] = $12; //@line 17194
   $150 = $ReallocAsyncCtx + 28 | 0; //@line 17195
   HEAP32[$150 >> 2] = $14; //@line 17196
   $151 = $ReallocAsyncCtx + 32 | 0; //@line 17197
   HEAP32[$151 >> 2] = $16; //@line 17198
   $152 = $ReallocAsyncCtx + 36 | 0; //@line 17199
   HEAP32[$152 >> 2] = $18; //@line 17200
   $153 = $ReallocAsyncCtx + 40 | 0; //@line 17201
   HEAP32[$153 >> 2] = $20; //@line 17202
   $154 = $ReallocAsyncCtx + 44 | 0; //@line 17203
   HEAP32[$154 >> 2] = $22; //@line 17204
   $155 = $ReallocAsyncCtx + 48 | 0; //@line 17205
   HEAP32[$155 >> 2] = $24; //@line 17206
   $156 = $ReallocAsyncCtx + 52 | 0; //@line 17207
   HEAP32[$156 >> 2] = $26; //@line 17208
   $157 = $ReallocAsyncCtx + 56 | 0; //@line 17209
   HEAP32[$157 >> 2] = $28; //@line 17210
   $158 = $ReallocAsyncCtx + 60 | 0; //@line 17211
   HEAP32[$158 >> 2] = $30; //@line 17212
   $159 = $ReallocAsyncCtx + 64 | 0; //@line 17213
   HEAP32[$159 >> 2] = $32; //@line 17214
   $160 = $ReallocAsyncCtx + 68 | 0; //@line 17215
   HEAP32[$160 >> 2] = $34; //@line 17216
   $161 = $ReallocAsyncCtx + 72 | 0; //@line 17217
   HEAP32[$161 >> 2] = $38; //@line 17218
   $162 = $ReallocAsyncCtx + 76 | 0; //@line 17219
   HEAP32[$162 >> 2] = $40; //@line 17220
   $163 = $ReallocAsyncCtx + 80 | 0; //@line 17221
   HEAP32[$163 >> 2] = $42; //@line 17222
   $164 = $ReallocAsyncCtx + 84 | 0; //@line 17223
   HEAP8[$164 >> 0] = $44; //@line 17224
   $165 = $ReallocAsyncCtx + 85 | 0; //@line 17225
   HEAP8[$165 >> 0] = $46; //@line 17226
   $166 = $ReallocAsyncCtx + 88 | 0; //@line 17227
   HEAP32[$166 >> 2] = $48; //@line 17228
   $167 = $ReallocAsyncCtx + 92 | 0; //@line 17229
   HEAP32[$167 >> 2] = $50; //@line 17230
   $168 = $ReallocAsyncCtx + 96 | 0; //@line 17231
   HEAP32[$168 >> 2] = $52; //@line 17232
   $169 = $ReallocAsyncCtx + 100 | 0; //@line 17233
   HEAP32[$169 >> 2] = $54; //@line 17234
   $170 = $ReallocAsyncCtx + 104 | 0; //@line 17235
   HEAP32[$170 >> 2] = $56; //@line 17236
   $171 = $ReallocAsyncCtx + 108 | 0; //@line 17237
   HEAP32[$171 >> 2] = $58; //@line 17238
   $172 = $ReallocAsyncCtx + 112 | 0; //@line 17239
   HEAP32[$172 >> 2] = $60; //@line 17240
   $173 = $ReallocAsyncCtx + 116 | 0; //@line 17241
   HEAP32[$173 >> 2] = $62; //@line 17242
   $174 = $ReallocAsyncCtx + 120 | 0; //@line 17243
   HEAP32[$174 >> 2] = $64; //@line 17244
   $175 = $ReallocAsyncCtx + 124 | 0; //@line 17245
   HEAP32[$175 >> 2] = $66; //@line 17246
   $176 = $ReallocAsyncCtx + 128 | 0; //@line 17247
   HEAP32[$176 >> 2] = $68; //@line 17248
   $177 = $ReallocAsyncCtx + 132 | 0; //@line 17249
   HEAP32[$177 >> 2] = $70; //@line 17250
   $178 = $ReallocAsyncCtx + 136 | 0; //@line 17251
   HEAP32[$178 >> 2] = $72; //@line 17252
   $179 = $ReallocAsyncCtx + 140 | 0; //@line 17253
   HEAP32[$179 >> 2] = $74; //@line 17254
   $180 = $ReallocAsyncCtx + 144 | 0; //@line 17255
   HEAP32[$180 >> 2] = $76; //@line 17256
   $181 = $ReallocAsyncCtx + 148 | 0; //@line 17257
   HEAP32[$181 >> 2] = $78; //@line 17258
   $182 = $ReallocAsyncCtx + 152 | 0; //@line 17259
   HEAP32[$182 >> 2] = $80; //@line 17260
   $183 = $ReallocAsyncCtx + 156 | 0; //@line 17261
   HEAP32[$183 >> 2] = $82; //@line 17262
   $184 = $ReallocAsyncCtx + 160 | 0; //@line 17263
   HEAP32[$184 >> 2] = $84; //@line 17264
   $185 = $ReallocAsyncCtx + 164 | 0; //@line 17265
   HEAP32[$185 >> 2] = $86; //@line 17266
   $186 = $ReallocAsyncCtx + 168 | 0; //@line 17267
   HEAP32[$186 >> 2] = $88; //@line 17268
   $187 = $ReallocAsyncCtx + 172 | 0; //@line 17269
   HEAP32[$187 >> 2] = $90; //@line 17270
   $188 = $ReallocAsyncCtx + 176 | 0; //@line 17271
   HEAP32[$188 >> 2] = $92; //@line 17272
   $189 = $ReallocAsyncCtx + 180 | 0; //@line 17273
   HEAP32[$189 >> 2] = $94; //@line 17274
   $190 = $ReallocAsyncCtx + 184 | 0; //@line 17275
   HEAP32[$190 >> 2] = $96; //@line 17276
   $191 = $ReallocAsyncCtx + 188 | 0; //@line 17277
   HEAP32[$191 >> 2] = $98; //@line 17278
   $192 = $ReallocAsyncCtx + 192 | 0; //@line 17279
   HEAP32[$192 >> 2] = $100; //@line 17280
   $193 = $ReallocAsyncCtx + 196 | 0; //@line 17281
   HEAP32[$193 >> 2] = $102; //@line 17282
   $194 = $ReallocAsyncCtx + 200 | 0; //@line 17283
   HEAP32[$194 >> 2] = $104; //@line 17284
   $195 = $ReallocAsyncCtx + 204 | 0; //@line 17285
   HEAP32[$195 >> 2] = $106; //@line 17286
   $196 = $ReallocAsyncCtx + 208 | 0; //@line 17287
   HEAP32[$196 >> 2] = $108; //@line 17288
   $197 = $ReallocAsyncCtx + 212 | 0; //@line 17289
   HEAP32[$197 >> 2] = $110; //@line 17290
   $198 = $ReallocAsyncCtx + 216 | 0; //@line 17291
   HEAP32[$198 >> 2] = $112; //@line 17292
   $199 = $ReallocAsyncCtx + 220 | 0; //@line 17293
   HEAP32[$199 >> 2] = $130; //@line 17294
   $200 = $ReallocAsyncCtx + 224 | 0; //@line 17295
   HEAP32[$200 >> 2] = $$0107$be; //@line 17296
   $201 = $ReallocAsyncCtx + 228 | 0; //@line 17297
   HEAP32[$201 >> 2] = $114; //@line 17298
   $202 = $ReallocAsyncCtx + 232 | 0; //@line 17299
   HEAP32[$202 >> 2] = $116; //@line 17300
   sp = STACKTOP; //@line 17301
   return;
  }
  HEAP8[___async_retval >> 0] = $143; //@line 17305
  ___async_unwind = 0; //@line 17306
  HEAP32[$ReallocAsyncCtx >> 2] = 475; //@line 17307
  $144 = $ReallocAsyncCtx + 4 | 0; //@line 17308
  HEAP32[$144 >> 2] = $2; //@line 17309
  $145 = $ReallocAsyncCtx + 8 | 0; //@line 17310
  HEAP8[$145 >> 0] = $4; //@line 17311
  $146 = $ReallocAsyncCtx + 12 | 0; //@line 17312
  HEAP32[$146 >> 2] = $6; //@line 17313
  $147 = $ReallocAsyncCtx + 16 | 0; //@line 17314
  HEAP32[$147 >> 2] = $8; //@line 17315
  $148 = $ReallocAsyncCtx + 20 | 0; //@line 17316
  HEAP32[$148 >> 2] = $10; //@line 17317
  $149 = $ReallocAsyncCtx + 24 | 0; //@line 17318
  HEAP32[$149 >> 2] = $12; //@line 17319
  $150 = $ReallocAsyncCtx + 28 | 0; //@line 17320
  HEAP32[$150 >> 2] = $14; //@line 17321
  $151 = $ReallocAsyncCtx + 32 | 0; //@line 17322
  HEAP32[$151 >> 2] = $16; //@line 17323
  $152 = $ReallocAsyncCtx + 36 | 0; //@line 17324
  HEAP32[$152 >> 2] = $18; //@line 17325
  $153 = $ReallocAsyncCtx + 40 | 0; //@line 17326
  HEAP32[$153 >> 2] = $20; //@line 17327
  $154 = $ReallocAsyncCtx + 44 | 0; //@line 17328
  HEAP32[$154 >> 2] = $22; //@line 17329
  $155 = $ReallocAsyncCtx + 48 | 0; //@line 17330
  HEAP32[$155 >> 2] = $24; //@line 17331
  $156 = $ReallocAsyncCtx + 52 | 0; //@line 17332
  HEAP32[$156 >> 2] = $26; //@line 17333
  $157 = $ReallocAsyncCtx + 56 | 0; //@line 17334
  HEAP32[$157 >> 2] = $28; //@line 17335
  $158 = $ReallocAsyncCtx + 60 | 0; //@line 17336
  HEAP32[$158 >> 2] = $30; //@line 17337
  $159 = $ReallocAsyncCtx + 64 | 0; //@line 17338
  HEAP32[$159 >> 2] = $32; //@line 17339
  $160 = $ReallocAsyncCtx + 68 | 0; //@line 17340
  HEAP32[$160 >> 2] = $34; //@line 17341
  $161 = $ReallocAsyncCtx + 72 | 0; //@line 17342
  HEAP32[$161 >> 2] = $38; //@line 17343
  $162 = $ReallocAsyncCtx + 76 | 0; //@line 17344
  HEAP32[$162 >> 2] = $40; //@line 17345
  $163 = $ReallocAsyncCtx + 80 | 0; //@line 17346
  HEAP32[$163 >> 2] = $42; //@line 17347
  $164 = $ReallocAsyncCtx + 84 | 0; //@line 17348
  HEAP8[$164 >> 0] = $44; //@line 17349
  $165 = $ReallocAsyncCtx + 85 | 0; //@line 17350
  HEAP8[$165 >> 0] = $46; //@line 17351
  $166 = $ReallocAsyncCtx + 88 | 0; //@line 17352
  HEAP32[$166 >> 2] = $48; //@line 17353
  $167 = $ReallocAsyncCtx + 92 | 0; //@line 17354
  HEAP32[$167 >> 2] = $50; //@line 17355
  $168 = $ReallocAsyncCtx + 96 | 0; //@line 17356
  HEAP32[$168 >> 2] = $52; //@line 17357
  $169 = $ReallocAsyncCtx + 100 | 0; //@line 17358
  HEAP32[$169 >> 2] = $54; //@line 17359
  $170 = $ReallocAsyncCtx + 104 | 0; //@line 17360
  HEAP32[$170 >> 2] = $56; //@line 17361
  $171 = $ReallocAsyncCtx + 108 | 0; //@line 17362
  HEAP32[$171 >> 2] = $58; //@line 17363
  $172 = $ReallocAsyncCtx + 112 | 0; //@line 17364
  HEAP32[$172 >> 2] = $60; //@line 17365
  $173 = $ReallocAsyncCtx + 116 | 0; //@line 17366
  HEAP32[$173 >> 2] = $62; //@line 17367
  $174 = $ReallocAsyncCtx + 120 | 0; //@line 17368
  HEAP32[$174 >> 2] = $64; //@line 17369
  $175 = $ReallocAsyncCtx + 124 | 0; //@line 17370
  HEAP32[$175 >> 2] = $66; //@line 17371
  $176 = $ReallocAsyncCtx + 128 | 0; //@line 17372
  HEAP32[$176 >> 2] = $68; //@line 17373
  $177 = $ReallocAsyncCtx + 132 | 0; //@line 17374
  HEAP32[$177 >> 2] = $70; //@line 17375
  $178 = $ReallocAsyncCtx + 136 | 0; //@line 17376
  HEAP32[$178 >> 2] = $72; //@line 17377
  $179 = $ReallocAsyncCtx + 140 | 0; //@line 17378
  HEAP32[$179 >> 2] = $74; //@line 17379
  $180 = $ReallocAsyncCtx + 144 | 0; //@line 17380
  HEAP32[$180 >> 2] = $76; //@line 17381
  $181 = $ReallocAsyncCtx + 148 | 0; //@line 17382
  HEAP32[$181 >> 2] = $78; //@line 17383
  $182 = $ReallocAsyncCtx + 152 | 0; //@line 17384
  HEAP32[$182 >> 2] = $80; //@line 17385
  $183 = $ReallocAsyncCtx + 156 | 0; //@line 17386
  HEAP32[$183 >> 2] = $82; //@line 17387
  $184 = $ReallocAsyncCtx + 160 | 0; //@line 17388
  HEAP32[$184 >> 2] = $84; //@line 17389
  $185 = $ReallocAsyncCtx + 164 | 0; //@line 17390
  HEAP32[$185 >> 2] = $86; //@line 17391
  $186 = $ReallocAsyncCtx + 168 | 0; //@line 17392
  HEAP32[$186 >> 2] = $88; //@line 17393
  $187 = $ReallocAsyncCtx + 172 | 0; //@line 17394
  HEAP32[$187 >> 2] = $90; //@line 17395
  $188 = $ReallocAsyncCtx + 176 | 0; //@line 17396
  HEAP32[$188 >> 2] = $92; //@line 17397
  $189 = $ReallocAsyncCtx + 180 | 0; //@line 17398
  HEAP32[$189 >> 2] = $94; //@line 17399
  $190 = $ReallocAsyncCtx + 184 | 0; //@line 17400
  HEAP32[$190 >> 2] = $96; //@line 17401
  $191 = $ReallocAsyncCtx + 188 | 0; //@line 17402
  HEAP32[$191 >> 2] = $98; //@line 17403
  $192 = $ReallocAsyncCtx + 192 | 0; //@line 17404
  HEAP32[$192 >> 2] = $100; //@line 17405
  $193 = $ReallocAsyncCtx + 196 | 0; //@line 17406
  HEAP32[$193 >> 2] = $102; //@line 17407
  $194 = $ReallocAsyncCtx + 200 | 0; //@line 17408
  HEAP32[$194 >> 2] = $104; //@line 17409
  $195 = $ReallocAsyncCtx + 204 | 0; //@line 17410
  HEAP32[$195 >> 2] = $106; //@line 17411
  $196 = $ReallocAsyncCtx + 208 | 0; //@line 17412
  HEAP32[$196 >> 2] = $108; //@line 17413
  $197 = $ReallocAsyncCtx + 212 | 0; //@line 17414
  HEAP32[$197 >> 2] = $110; //@line 17415
  $198 = $ReallocAsyncCtx + 216 | 0; //@line 17416
  HEAP32[$198 >> 2] = $112; //@line 17417
  $199 = $ReallocAsyncCtx + 220 | 0; //@line 17418
  HEAP32[$199 >> 2] = $130; //@line 17419
  $200 = $ReallocAsyncCtx + 224 | 0; //@line 17420
  HEAP32[$200 >> 2] = $$0107$be; //@line 17421
  $201 = $ReallocAsyncCtx + 228 | 0; //@line 17422
  HEAP32[$201 >> 2] = $114; //@line 17423
  $202 = $ReallocAsyncCtx + 232 | 0; //@line 17424
  HEAP32[$202 >> 2] = $116; //@line 17425
  sp = STACKTOP; //@line 17426
  return;
 } else if ((label | 0) == 9) {
  $221 = HEAP8[$38 + ($119 & 255) >> 0] | 0; //@line 17432
  HEAP8[$74 >> 0] = ($221 & 255) >>> 4 & 7; //@line 17437
  HEAP8[$82 >> 0] = $221 & 15; //@line 17439
  $240 = $$0$be + 5 << 24 >> 24; //@line 17453
  HEAP32[$64 >> 2] = (HEAPU8[$38 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$38 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$38 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 17461
  $250 = HEAP32[(HEAP32[$56 >> 2] | 0) + 40 >> 2] | 0; //@line 17464
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(232) | 0; //@line 17465
  $251 = FUNCTION_TABLE_iii[$250 & 15]($62, $70) | 0; //@line 17466
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 476; //@line 17469
   $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 17470
   HEAP32[$252 >> 2] = $2; //@line 17471
   $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 17472
   HEAP8[$253 >> 0] = $4; //@line 17473
   $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 17474
   HEAP32[$254 >> 2] = $6; //@line 17475
   $255 = $ReallocAsyncCtx2 + 16 | 0; //@line 17476
   HEAP32[$255 >> 2] = $8; //@line 17477
   $256 = $ReallocAsyncCtx2 + 20 | 0; //@line 17478
   HEAP32[$256 >> 2] = $10; //@line 17479
   $257 = $ReallocAsyncCtx2 + 24 | 0; //@line 17480
   HEAP32[$257 >> 2] = $12; //@line 17481
   $258 = $ReallocAsyncCtx2 + 28 | 0; //@line 17482
   HEAP32[$258 >> 2] = $14; //@line 17483
   $259 = $ReallocAsyncCtx2 + 32 | 0; //@line 17484
   HEAP32[$259 >> 2] = $16; //@line 17485
   $260 = $ReallocAsyncCtx2 + 36 | 0; //@line 17486
   HEAP32[$260 >> 2] = $18; //@line 17487
   $261 = $ReallocAsyncCtx2 + 40 | 0; //@line 17488
   HEAP32[$261 >> 2] = $20; //@line 17489
   $262 = $ReallocAsyncCtx2 + 44 | 0; //@line 17490
   HEAP32[$262 >> 2] = $22; //@line 17491
   $263 = $ReallocAsyncCtx2 + 48 | 0; //@line 17492
   HEAP32[$263 >> 2] = $24; //@line 17493
   $264 = $ReallocAsyncCtx2 + 52 | 0; //@line 17494
   HEAP32[$264 >> 2] = $26; //@line 17495
   $265 = $ReallocAsyncCtx2 + 56 | 0; //@line 17496
   HEAP32[$265 >> 2] = $28; //@line 17497
   $266 = $ReallocAsyncCtx2 + 60 | 0; //@line 17498
   HEAP32[$266 >> 2] = $30; //@line 17499
   $267 = $ReallocAsyncCtx2 + 64 | 0; //@line 17500
   HEAP32[$267 >> 2] = $32; //@line 17501
   $268 = $ReallocAsyncCtx2 + 68 | 0; //@line 17502
   HEAP32[$268 >> 2] = $34; //@line 17503
   $269 = $ReallocAsyncCtx2 + 72 | 0; //@line 17504
   HEAP32[$269 >> 2] = $38; //@line 17505
   $270 = $ReallocAsyncCtx2 + 76 | 0; //@line 17506
   HEAP32[$270 >> 2] = $40; //@line 17507
   $271 = $ReallocAsyncCtx2 + 80 | 0; //@line 17508
   HEAP32[$271 >> 2] = $42; //@line 17509
   $272 = $ReallocAsyncCtx2 + 84 | 0; //@line 17510
   HEAP8[$272 >> 0] = $44; //@line 17511
   $273 = $ReallocAsyncCtx2 + 85 | 0; //@line 17512
   HEAP8[$273 >> 0] = $46; //@line 17513
   $274 = $ReallocAsyncCtx2 + 88 | 0; //@line 17514
   HEAP32[$274 >> 2] = $48; //@line 17515
   $275 = $ReallocAsyncCtx2 + 92 | 0; //@line 17516
   HEAP32[$275 >> 2] = $50; //@line 17517
   $276 = $ReallocAsyncCtx2 + 96 | 0; //@line 17518
   HEAP32[$276 >> 2] = $52; //@line 17519
   $277 = $ReallocAsyncCtx2 + 100 | 0; //@line 17520
   HEAP32[$277 >> 2] = $54; //@line 17521
   $278 = $ReallocAsyncCtx2 + 104 | 0; //@line 17522
   HEAP32[$278 >> 2] = $56; //@line 17523
   $279 = $ReallocAsyncCtx2 + 108 | 0; //@line 17524
   HEAP32[$279 >> 2] = $58; //@line 17525
   $280 = $ReallocAsyncCtx2 + 112 | 0; //@line 17526
   HEAP32[$280 >> 2] = $60; //@line 17527
   $281 = $ReallocAsyncCtx2 + 116 | 0; //@line 17528
   HEAP32[$281 >> 2] = $62; //@line 17529
   $282 = $ReallocAsyncCtx2 + 120 | 0; //@line 17530
   HEAP32[$282 >> 2] = $64; //@line 17531
   $283 = $ReallocAsyncCtx2 + 124 | 0; //@line 17532
   HEAP32[$283 >> 2] = $66; //@line 17533
   $284 = $ReallocAsyncCtx2 + 128 | 0; //@line 17534
   HEAP32[$284 >> 2] = $68; //@line 17535
   $285 = $ReallocAsyncCtx2 + 132 | 0; //@line 17536
   HEAP32[$285 >> 2] = $70; //@line 17537
   $286 = $ReallocAsyncCtx2 + 136 | 0; //@line 17538
   HEAP32[$286 >> 2] = $72; //@line 17539
   $287 = $ReallocAsyncCtx2 + 140 | 0; //@line 17540
   HEAP32[$287 >> 2] = $74; //@line 17541
   $288 = $ReallocAsyncCtx2 + 144 | 0; //@line 17542
   HEAP32[$288 >> 2] = $76; //@line 17543
   $289 = $ReallocAsyncCtx2 + 148 | 0; //@line 17544
   HEAP32[$289 >> 2] = $78; //@line 17545
   $290 = $ReallocAsyncCtx2 + 152 | 0; //@line 17546
   HEAP32[$290 >> 2] = $80; //@line 17547
   $291 = $ReallocAsyncCtx2 + 156 | 0; //@line 17548
   HEAP32[$291 >> 2] = $82; //@line 17549
   $292 = $ReallocAsyncCtx2 + 160 | 0; //@line 17550
   HEAP32[$292 >> 2] = $84; //@line 17551
   $293 = $ReallocAsyncCtx2 + 164 | 0; //@line 17552
   HEAP32[$293 >> 2] = $86; //@line 17553
   $294 = $ReallocAsyncCtx2 + 168 | 0; //@line 17554
   HEAP32[$294 >> 2] = $88; //@line 17555
   $295 = $ReallocAsyncCtx2 + 172 | 0; //@line 17556
   HEAP32[$295 >> 2] = $90; //@line 17557
   $296 = $ReallocAsyncCtx2 + 176 | 0; //@line 17558
   HEAP32[$296 >> 2] = $92; //@line 17559
   $297 = $ReallocAsyncCtx2 + 180 | 0; //@line 17560
   HEAP32[$297 >> 2] = $94; //@line 17561
   $298 = $ReallocAsyncCtx2 + 184 | 0; //@line 17562
   HEAP32[$298 >> 2] = $96; //@line 17563
   $299 = $ReallocAsyncCtx2 + 188 | 0; //@line 17564
   HEAP32[$299 >> 2] = $98; //@line 17565
   $300 = $ReallocAsyncCtx2 + 192 | 0; //@line 17566
   HEAP32[$300 >> 2] = $100; //@line 17567
   $301 = $ReallocAsyncCtx2 + 196 | 0; //@line 17568
   HEAP32[$301 >> 2] = $102; //@line 17569
   $302 = $ReallocAsyncCtx2 + 200 | 0; //@line 17570
   HEAP32[$302 >> 2] = $104; //@line 17571
   $303 = $ReallocAsyncCtx2 + 204 | 0; //@line 17572
   HEAP32[$303 >> 2] = $106; //@line 17573
   $304 = $ReallocAsyncCtx2 + 208 | 0; //@line 17574
   HEAP32[$304 >> 2] = $108; //@line 17575
   $305 = $ReallocAsyncCtx2 + 212 | 0; //@line 17576
   HEAP8[$305 >> 0] = $240; //@line 17577
   $306 = $ReallocAsyncCtx2 + 216 | 0; //@line 17578
   HEAP32[$306 >> 2] = $110; //@line 17579
   $307 = $ReallocAsyncCtx2 + 220 | 0; //@line 17580
   HEAP32[$307 >> 2] = $112; //@line 17581
   $308 = $ReallocAsyncCtx2 + 224 | 0; //@line 17582
   HEAP32[$308 >> 2] = $114; //@line 17583
   $309 = $ReallocAsyncCtx2 + 228 | 0; //@line 17584
   HEAP32[$309 >> 2] = $116; //@line 17585
   sp = STACKTOP; //@line 17586
   return;
  }
  HEAP8[___async_retval >> 0] = $251; //@line 17590
  ___async_unwind = 0; //@line 17591
  HEAP32[$ReallocAsyncCtx2 >> 2] = 476; //@line 17592
  $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 17593
  HEAP32[$252 >> 2] = $2; //@line 17594
  $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 17595
  HEAP8[$253 >> 0] = $4; //@line 17596
  $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 17597
  HEAP32[$254 >> 2] = $6; //@line 17598
  $255 = $ReallocAsyncCtx2 + 16 | 0; //@line 17599
  HEAP32[$255 >> 2] = $8; //@line 17600
  $256 = $ReallocAsyncCtx2 + 20 | 0; //@line 17601
  HEAP32[$256 >> 2] = $10; //@line 17602
  $257 = $ReallocAsyncCtx2 + 24 | 0; //@line 17603
  HEAP32[$257 >> 2] = $12; //@line 17604
  $258 = $ReallocAsyncCtx2 + 28 | 0; //@line 17605
  HEAP32[$258 >> 2] = $14; //@line 17606
  $259 = $ReallocAsyncCtx2 + 32 | 0; //@line 17607
  HEAP32[$259 >> 2] = $16; //@line 17608
  $260 = $ReallocAsyncCtx2 + 36 | 0; //@line 17609
  HEAP32[$260 >> 2] = $18; //@line 17610
  $261 = $ReallocAsyncCtx2 + 40 | 0; //@line 17611
  HEAP32[$261 >> 2] = $20; //@line 17612
  $262 = $ReallocAsyncCtx2 + 44 | 0; //@line 17613
  HEAP32[$262 >> 2] = $22; //@line 17614
  $263 = $ReallocAsyncCtx2 + 48 | 0; //@line 17615
  HEAP32[$263 >> 2] = $24; //@line 17616
  $264 = $ReallocAsyncCtx2 + 52 | 0; //@line 17617
  HEAP32[$264 >> 2] = $26; //@line 17618
  $265 = $ReallocAsyncCtx2 + 56 | 0; //@line 17619
  HEAP32[$265 >> 2] = $28; //@line 17620
  $266 = $ReallocAsyncCtx2 + 60 | 0; //@line 17621
  HEAP32[$266 >> 2] = $30; //@line 17622
  $267 = $ReallocAsyncCtx2 + 64 | 0; //@line 17623
  HEAP32[$267 >> 2] = $32; //@line 17624
  $268 = $ReallocAsyncCtx2 + 68 | 0; //@line 17625
  HEAP32[$268 >> 2] = $34; //@line 17626
  $269 = $ReallocAsyncCtx2 + 72 | 0; //@line 17627
  HEAP32[$269 >> 2] = $38; //@line 17628
  $270 = $ReallocAsyncCtx2 + 76 | 0; //@line 17629
  HEAP32[$270 >> 2] = $40; //@line 17630
  $271 = $ReallocAsyncCtx2 + 80 | 0; //@line 17631
  HEAP32[$271 >> 2] = $42; //@line 17632
  $272 = $ReallocAsyncCtx2 + 84 | 0; //@line 17633
  HEAP8[$272 >> 0] = $44; //@line 17634
  $273 = $ReallocAsyncCtx2 + 85 | 0; //@line 17635
  HEAP8[$273 >> 0] = $46; //@line 17636
  $274 = $ReallocAsyncCtx2 + 88 | 0; //@line 17637
  HEAP32[$274 >> 2] = $48; //@line 17638
  $275 = $ReallocAsyncCtx2 + 92 | 0; //@line 17639
  HEAP32[$275 >> 2] = $50; //@line 17640
  $276 = $ReallocAsyncCtx2 + 96 | 0; //@line 17641
  HEAP32[$276 >> 2] = $52; //@line 17642
  $277 = $ReallocAsyncCtx2 + 100 | 0; //@line 17643
  HEAP32[$277 >> 2] = $54; //@line 17644
  $278 = $ReallocAsyncCtx2 + 104 | 0; //@line 17645
  HEAP32[$278 >> 2] = $56; //@line 17646
  $279 = $ReallocAsyncCtx2 + 108 | 0; //@line 17647
  HEAP32[$279 >> 2] = $58; //@line 17648
  $280 = $ReallocAsyncCtx2 + 112 | 0; //@line 17649
  HEAP32[$280 >> 2] = $60; //@line 17650
  $281 = $ReallocAsyncCtx2 + 116 | 0; //@line 17651
  HEAP32[$281 >> 2] = $62; //@line 17652
  $282 = $ReallocAsyncCtx2 + 120 | 0; //@line 17653
  HEAP32[$282 >> 2] = $64; //@line 17654
  $283 = $ReallocAsyncCtx2 + 124 | 0; //@line 17655
  HEAP32[$283 >> 2] = $66; //@line 17656
  $284 = $ReallocAsyncCtx2 + 128 | 0; //@line 17657
  HEAP32[$284 >> 2] = $68; //@line 17658
  $285 = $ReallocAsyncCtx2 + 132 | 0; //@line 17659
  HEAP32[$285 >> 2] = $70; //@line 17660
  $286 = $ReallocAsyncCtx2 + 136 | 0; //@line 17661
  HEAP32[$286 >> 2] = $72; //@line 17662
  $287 = $ReallocAsyncCtx2 + 140 | 0; //@line 17663
  HEAP32[$287 >> 2] = $74; //@line 17664
  $288 = $ReallocAsyncCtx2 + 144 | 0; //@line 17665
  HEAP32[$288 >> 2] = $76; //@line 17666
  $289 = $ReallocAsyncCtx2 + 148 | 0; //@line 17667
  HEAP32[$289 >> 2] = $78; //@line 17668
  $290 = $ReallocAsyncCtx2 + 152 | 0; //@line 17669
  HEAP32[$290 >> 2] = $80; //@line 17670
  $291 = $ReallocAsyncCtx2 + 156 | 0; //@line 17671
  HEAP32[$291 >> 2] = $82; //@line 17672
  $292 = $ReallocAsyncCtx2 + 160 | 0; //@line 17673
  HEAP32[$292 >> 2] = $84; //@line 17674
  $293 = $ReallocAsyncCtx2 + 164 | 0; //@line 17675
  HEAP32[$293 >> 2] = $86; //@line 17676
  $294 = $ReallocAsyncCtx2 + 168 | 0; //@line 17677
  HEAP32[$294 >> 2] = $88; //@line 17678
  $295 = $ReallocAsyncCtx2 + 172 | 0; //@line 17679
  HEAP32[$295 >> 2] = $90; //@line 17680
  $296 = $ReallocAsyncCtx2 + 176 | 0; //@line 17681
  HEAP32[$296 >> 2] = $92; //@line 17682
  $297 = $ReallocAsyncCtx2 + 180 | 0; //@line 17683
  HEAP32[$297 >> 2] = $94; //@line 17684
  $298 = $ReallocAsyncCtx2 + 184 | 0; //@line 17685
  HEAP32[$298 >> 2] = $96; //@line 17686
  $299 = $ReallocAsyncCtx2 + 188 | 0; //@line 17687
  HEAP32[$299 >> 2] = $98; //@line 17688
  $300 = $ReallocAsyncCtx2 + 192 | 0; //@line 17689
  HEAP32[$300 >> 2] = $100; //@line 17690
  $301 = $ReallocAsyncCtx2 + 196 | 0; //@line 17691
  HEAP32[$301 >> 2] = $102; //@line 17692
  $302 = $ReallocAsyncCtx2 + 200 | 0; //@line 17693
  HEAP32[$302 >> 2] = $104; //@line 17694
  $303 = $ReallocAsyncCtx2 + 204 | 0; //@line 17695
  HEAP32[$303 >> 2] = $106; //@line 17696
  $304 = $ReallocAsyncCtx2 + 208 | 0; //@line 17697
  HEAP32[$304 >> 2] = $108; //@line 17698
  $305 = $ReallocAsyncCtx2 + 212 | 0; //@line 17699
  HEAP8[$305 >> 0] = $240; //@line 17700
  $306 = $ReallocAsyncCtx2 + 216 | 0; //@line 17701
  HEAP32[$306 >> 2] = $110; //@line 17702
  $307 = $ReallocAsyncCtx2 + 220 | 0; //@line 17703
  HEAP32[$307 >> 2] = $112; //@line 17704
  $308 = $ReallocAsyncCtx2 + 224 | 0; //@line 17705
  HEAP32[$308 >> 2] = $114; //@line 17706
  $309 = $ReallocAsyncCtx2 + 228 | 0; //@line 17707
  HEAP32[$309 >> 2] = $116; //@line 17708
  sp = STACKTOP; //@line 17709
  return;
 } else if ((label | 0) == 13) {
  $313 = HEAP32[$311 >> 2] | 0; //@line 17713
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(232) | 0; //@line 17714
  $314 = FUNCTION_TABLE_ii[$313 & 15]($16) | 0; //@line 17715
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 477; //@line 17718
   $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 17719
   HEAP32[$315 >> 2] = $2; //@line 17720
   $316 = $ReallocAsyncCtx3 + 8 | 0; //@line 17721
   HEAP8[$316 >> 0] = $4; //@line 17722
   $317 = $ReallocAsyncCtx3 + 12 | 0; //@line 17723
   HEAP32[$317 >> 2] = $6; //@line 17724
   $318 = $ReallocAsyncCtx3 + 16 | 0; //@line 17725
   HEAP32[$318 >> 2] = $8; //@line 17726
   $319 = $ReallocAsyncCtx3 + 20 | 0; //@line 17727
   HEAP32[$319 >> 2] = $10; //@line 17728
   $320 = $ReallocAsyncCtx3 + 24 | 0; //@line 17729
   HEAP32[$320 >> 2] = $12; //@line 17730
   $321 = $ReallocAsyncCtx3 + 28 | 0; //@line 17731
   HEAP32[$321 >> 2] = $14; //@line 17732
   $322 = $ReallocAsyncCtx3 + 32 | 0; //@line 17733
   HEAP32[$322 >> 2] = $16; //@line 17734
   $323 = $ReallocAsyncCtx3 + 36 | 0; //@line 17735
   HEAP32[$323 >> 2] = $18; //@line 17736
   $324 = $ReallocAsyncCtx3 + 40 | 0; //@line 17737
   HEAP32[$324 >> 2] = $20; //@line 17738
   $325 = $ReallocAsyncCtx3 + 44 | 0; //@line 17739
   HEAP32[$325 >> 2] = $22; //@line 17740
   $326 = $ReallocAsyncCtx3 + 48 | 0; //@line 17741
   HEAP32[$326 >> 2] = $24; //@line 17742
   $327 = $ReallocAsyncCtx3 + 52 | 0; //@line 17743
   HEAP32[$327 >> 2] = $26; //@line 17744
   $328 = $ReallocAsyncCtx3 + 56 | 0; //@line 17745
   HEAP32[$328 >> 2] = $28; //@line 17746
   $329 = $ReallocAsyncCtx3 + 60 | 0; //@line 17747
   HEAP32[$329 >> 2] = $30; //@line 17748
   $330 = $ReallocAsyncCtx3 + 64 | 0; //@line 17749
   HEAP32[$330 >> 2] = $32; //@line 17750
   $331 = $ReallocAsyncCtx3 + 68 | 0; //@line 17751
   HEAP32[$331 >> 2] = $34; //@line 17752
   $332 = $ReallocAsyncCtx3 + 72 | 0; //@line 17753
   HEAP8[$332 >> 0] = $119; //@line 17754
   $333 = $ReallocAsyncCtx3 + 76 | 0; //@line 17755
   HEAP32[$333 >> 2] = $38; //@line 17756
   $334 = $ReallocAsyncCtx3 + 80 | 0; //@line 17757
   HEAP32[$334 >> 2] = $40; //@line 17758
   $335 = $ReallocAsyncCtx3 + 84 | 0; //@line 17759
   HEAP32[$335 >> 2] = $42; //@line 17760
   $336 = $ReallocAsyncCtx3 + 88 | 0; //@line 17761
   HEAP8[$336 >> 0] = $44; //@line 17762
   $337 = $ReallocAsyncCtx3 + 89 | 0; //@line 17763
   HEAP8[$337 >> 0] = $46; //@line 17764
   $338 = $ReallocAsyncCtx3 + 92 | 0; //@line 17765
   HEAP32[$338 >> 2] = $48; //@line 17766
   $339 = $ReallocAsyncCtx3 + 96 | 0; //@line 17767
   HEAP32[$339 >> 2] = $50; //@line 17768
   $340 = $ReallocAsyncCtx3 + 100 | 0; //@line 17769
   HEAP32[$340 >> 2] = $52; //@line 17770
   $341 = $ReallocAsyncCtx3 + 104 | 0; //@line 17771
   HEAP32[$341 >> 2] = $54; //@line 17772
   $342 = $ReallocAsyncCtx3 + 108 | 0; //@line 17773
   HEAP32[$342 >> 2] = $56; //@line 17774
   $343 = $ReallocAsyncCtx3 + 112 | 0; //@line 17775
   HEAP32[$343 >> 2] = $58; //@line 17776
   $344 = $ReallocAsyncCtx3 + 116 | 0; //@line 17777
   HEAP32[$344 >> 2] = $60; //@line 17778
   $345 = $ReallocAsyncCtx3 + 120 | 0; //@line 17779
   HEAP32[$345 >> 2] = $62; //@line 17780
   $346 = $ReallocAsyncCtx3 + 124 | 0; //@line 17781
   HEAP32[$346 >> 2] = $64; //@line 17782
   $347 = $ReallocAsyncCtx3 + 128 | 0; //@line 17783
   HEAP32[$347 >> 2] = $66; //@line 17784
   $348 = $ReallocAsyncCtx3 + 132 | 0; //@line 17785
   HEAP32[$348 >> 2] = $68; //@line 17786
   $349 = $ReallocAsyncCtx3 + 136 | 0; //@line 17787
   HEAP32[$349 >> 2] = $70; //@line 17788
   $350 = $ReallocAsyncCtx3 + 140 | 0; //@line 17789
   HEAP32[$350 >> 2] = $72; //@line 17790
   $351 = $ReallocAsyncCtx3 + 144 | 0; //@line 17791
   HEAP32[$351 >> 2] = $74; //@line 17792
   $352 = $ReallocAsyncCtx3 + 148 | 0; //@line 17793
   HEAP32[$352 >> 2] = $76; //@line 17794
   $353 = $ReallocAsyncCtx3 + 152 | 0; //@line 17795
   HEAP32[$353 >> 2] = $78; //@line 17796
   $354 = $ReallocAsyncCtx3 + 156 | 0; //@line 17797
   HEAP32[$354 >> 2] = $80; //@line 17798
   $355 = $ReallocAsyncCtx3 + 160 | 0; //@line 17799
   HEAP32[$355 >> 2] = $82; //@line 17800
   $356 = $ReallocAsyncCtx3 + 164 | 0; //@line 17801
   HEAP32[$356 >> 2] = $84; //@line 17802
   $357 = $ReallocAsyncCtx3 + 168 | 0; //@line 17803
   HEAP32[$357 >> 2] = $86; //@line 17804
   $358 = $ReallocAsyncCtx3 + 172 | 0; //@line 17805
   HEAP32[$358 >> 2] = $88; //@line 17806
   $359 = $ReallocAsyncCtx3 + 176 | 0; //@line 17807
   HEAP32[$359 >> 2] = $90; //@line 17808
   $360 = $ReallocAsyncCtx3 + 180 | 0; //@line 17809
   HEAP32[$360 >> 2] = $92; //@line 17810
   $361 = $ReallocAsyncCtx3 + 184 | 0; //@line 17811
   HEAP32[$361 >> 2] = $94; //@line 17812
   $362 = $ReallocAsyncCtx3 + 188 | 0; //@line 17813
   HEAP32[$362 >> 2] = $96; //@line 17814
   $363 = $ReallocAsyncCtx3 + 192 | 0; //@line 17815
   HEAP32[$363 >> 2] = $98; //@line 17816
   $364 = $ReallocAsyncCtx3 + 196 | 0; //@line 17817
   HEAP32[$364 >> 2] = $100; //@line 17818
   $365 = $ReallocAsyncCtx3 + 200 | 0; //@line 17819
   HEAP32[$365 >> 2] = $102; //@line 17820
   $366 = $ReallocAsyncCtx3 + 204 | 0; //@line 17821
   HEAP32[$366 >> 2] = $104; //@line 17822
   $367 = $ReallocAsyncCtx3 + 208 | 0; //@line 17823
   HEAP32[$367 >> 2] = $106; //@line 17824
   $368 = $ReallocAsyncCtx3 + 212 | 0; //@line 17825
   HEAP32[$368 >> 2] = $108; //@line 17826
   $369 = $ReallocAsyncCtx3 + 216 | 0; //@line 17827
   HEAP32[$369 >> 2] = $110; //@line 17828
   $370 = $ReallocAsyncCtx3 + 220 | 0; //@line 17829
   HEAP32[$370 >> 2] = $112; //@line 17830
   $371 = $ReallocAsyncCtx3 + 224 | 0; //@line 17831
   HEAP32[$371 >> 2] = $114; //@line 17832
   $372 = $ReallocAsyncCtx3 + 228 | 0; //@line 17833
   HEAP32[$372 >> 2] = $116; //@line 17834
   sp = STACKTOP; //@line 17835
   return;
  }
  HEAP8[___async_retval >> 0] = $314; //@line 17839
  ___async_unwind = 0; //@line 17840
  HEAP32[$ReallocAsyncCtx3 >> 2] = 477; //@line 17841
  $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 17842
  HEAP32[$315 >> 2] = $2; //@line 17843
  $316 = $ReallocAsyncCtx3 + 8 | 0; //@line 17844
  HEAP8[$316 >> 0] = $4; //@line 17845
  $317 = $ReallocAsyncCtx3 + 12 | 0; //@line 17846
  HEAP32[$317 >> 2] = $6; //@line 17847
  $318 = $ReallocAsyncCtx3 + 16 | 0; //@line 17848
  HEAP32[$318 >> 2] = $8; //@line 17849
  $319 = $ReallocAsyncCtx3 + 20 | 0; //@line 17850
  HEAP32[$319 >> 2] = $10; //@line 17851
  $320 = $ReallocAsyncCtx3 + 24 | 0; //@line 17852
  HEAP32[$320 >> 2] = $12; //@line 17853
  $321 = $ReallocAsyncCtx3 + 28 | 0; //@line 17854
  HEAP32[$321 >> 2] = $14; //@line 17855
  $322 = $ReallocAsyncCtx3 + 32 | 0; //@line 17856
  HEAP32[$322 >> 2] = $16; //@line 17857
  $323 = $ReallocAsyncCtx3 + 36 | 0; //@line 17858
  HEAP32[$323 >> 2] = $18; //@line 17859
  $324 = $ReallocAsyncCtx3 + 40 | 0; //@line 17860
  HEAP32[$324 >> 2] = $20; //@line 17861
  $325 = $ReallocAsyncCtx3 + 44 | 0; //@line 17862
  HEAP32[$325 >> 2] = $22; //@line 17863
  $326 = $ReallocAsyncCtx3 + 48 | 0; //@line 17864
  HEAP32[$326 >> 2] = $24; //@line 17865
  $327 = $ReallocAsyncCtx3 + 52 | 0; //@line 17866
  HEAP32[$327 >> 2] = $26; //@line 17867
  $328 = $ReallocAsyncCtx3 + 56 | 0; //@line 17868
  HEAP32[$328 >> 2] = $28; //@line 17869
  $329 = $ReallocAsyncCtx3 + 60 | 0; //@line 17870
  HEAP32[$329 >> 2] = $30; //@line 17871
  $330 = $ReallocAsyncCtx3 + 64 | 0; //@line 17872
  HEAP32[$330 >> 2] = $32; //@line 17873
  $331 = $ReallocAsyncCtx3 + 68 | 0; //@line 17874
  HEAP32[$331 >> 2] = $34; //@line 17875
  $332 = $ReallocAsyncCtx3 + 72 | 0; //@line 17876
  HEAP8[$332 >> 0] = $119; //@line 17877
  $333 = $ReallocAsyncCtx3 + 76 | 0; //@line 17878
  HEAP32[$333 >> 2] = $38; //@line 17879
  $334 = $ReallocAsyncCtx3 + 80 | 0; //@line 17880
  HEAP32[$334 >> 2] = $40; //@line 17881
  $335 = $ReallocAsyncCtx3 + 84 | 0; //@line 17882
  HEAP32[$335 >> 2] = $42; //@line 17883
  $336 = $ReallocAsyncCtx3 + 88 | 0; //@line 17884
  HEAP8[$336 >> 0] = $44; //@line 17885
  $337 = $ReallocAsyncCtx3 + 89 | 0; //@line 17886
  HEAP8[$337 >> 0] = $46; //@line 17887
  $338 = $ReallocAsyncCtx3 + 92 | 0; //@line 17888
  HEAP32[$338 >> 2] = $48; //@line 17889
  $339 = $ReallocAsyncCtx3 + 96 | 0; //@line 17890
  HEAP32[$339 >> 2] = $50; //@line 17891
  $340 = $ReallocAsyncCtx3 + 100 | 0; //@line 17892
  HEAP32[$340 >> 2] = $52; //@line 17893
  $341 = $ReallocAsyncCtx3 + 104 | 0; //@line 17894
  HEAP32[$341 >> 2] = $54; //@line 17895
  $342 = $ReallocAsyncCtx3 + 108 | 0; //@line 17896
  HEAP32[$342 >> 2] = $56; //@line 17897
  $343 = $ReallocAsyncCtx3 + 112 | 0; //@line 17898
  HEAP32[$343 >> 2] = $58; //@line 17899
  $344 = $ReallocAsyncCtx3 + 116 | 0; //@line 17900
  HEAP32[$344 >> 2] = $60; //@line 17901
  $345 = $ReallocAsyncCtx3 + 120 | 0; //@line 17902
  HEAP32[$345 >> 2] = $62; //@line 17903
  $346 = $ReallocAsyncCtx3 + 124 | 0; //@line 17904
  HEAP32[$346 >> 2] = $64; //@line 17905
  $347 = $ReallocAsyncCtx3 + 128 | 0; //@line 17906
  HEAP32[$347 >> 2] = $66; //@line 17907
  $348 = $ReallocAsyncCtx3 + 132 | 0; //@line 17908
  HEAP32[$348 >> 2] = $68; //@line 17909
  $349 = $ReallocAsyncCtx3 + 136 | 0; //@line 17910
  HEAP32[$349 >> 2] = $70; //@line 17911
  $350 = $ReallocAsyncCtx3 + 140 | 0; //@line 17912
  HEAP32[$350 >> 2] = $72; //@line 17913
  $351 = $ReallocAsyncCtx3 + 144 | 0; //@line 17914
  HEAP32[$351 >> 2] = $74; //@line 17915
  $352 = $ReallocAsyncCtx3 + 148 | 0; //@line 17916
  HEAP32[$352 >> 2] = $76; //@line 17917
  $353 = $ReallocAsyncCtx3 + 152 | 0; //@line 17918
  HEAP32[$353 >> 2] = $78; //@line 17919
  $354 = $ReallocAsyncCtx3 + 156 | 0; //@line 17920
  HEAP32[$354 >> 2] = $80; //@line 17921
  $355 = $ReallocAsyncCtx3 + 160 | 0; //@line 17922
  HEAP32[$355 >> 2] = $82; //@line 17923
  $356 = $ReallocAsyncCtx3 + 164 | 0; //@line 17924
  HEAP32[$356 >> 2] = $84; //@line 17925
  $357 = $ReallocAsyncCtx3 + 168 | 0; //@line 17926
  HEAP32[$357 >> 2] = $86; //@line 17927
  $358 = $ReallocAsyncCtx3 + 172 | 0; //@line 17928
  HEAP32[$358 >> 2] = $88; //@line 17929
  $359 = $ReallocAsyncCtx3 + 176 | 0; //@line 17930
  HEAP32[$359 >> 2] = $90; //@line 17931
  $360 = $ReallocAsyncCtx3 + 180 | 0; //@line 17932
  HEAP32[$360 >> 2] = $92; //@line 17933
  $361 = $ReallocAsyncCtx3 + 184 | 0; //@line 17934
  HEAP32[$361 >> 2] = $94; //@line 17935
  $362 = $ReallocAsyncCtx3 + 188 | 0; //@line 17936
  HEAP32[$362 >> 2] = $96; //@line 17937
  $363 = $ReallocAsyncCtx3 + 192 | 0; //@line 17938
  HEAP32[$363 >> 2] = $98; //@line 17939
  $364 = $ReallocAsyncCtx3 + 196 | 0; //@line 17940
  HEAP32[$364 >> 2] = $100; //@line 17941
  $365 = $ReallocAsyncCtx3 + 200 | 0; //@line 17942
  HEAP32[$365 >> 2] = $102; //@line 17943
  $366 = $ReallocAsyncCtx3 + 204 | 0; //@line 17944
  HEAP32[$366 >> 2] = $104; //@line 17945
  $367 = $ReallocAsyncCtx3 + 208 | 0; //@line 17946
  HEAP32[$367 >> 2] = $106; //@line 17947
  $368 = $ReallocAsyncCtx3 + 212 | 0; //@line 17948
  HEAP32[$368 >> 2] = $108; //@line 17949
  $369 = $ReallocAsyncCtx3 + 216 | 0; //@line 17950
  HEAP32[$369 >> 2] = $110; //@line 17951
  $370 = $ReallocAsyncCtx3 + 220 | 0; //@line 17952
  HEAP32[$370 >> 2] = $112; //@line 17953
  $371 = $ReallocAsyncCtx3 + 224 | 0; //@line 17954
  HEAP32[$371 >> 2] = $114; //@line 17955
  $372 = $ReallocAsyncCtx3 + 228 | 0; //@line 17956
  HEAP32[$372 >> 2] = $116; //@line 17957
  sp = STACKTOP; //@line 17958
  return;
 } else if ((label | 0) == 19) {
  $392 = HEAP8[$38 + ($119 & 255) >> 0] | 0; //@line 17965
  HEAP32[$26 >> 2] = (HEAPU8[$38 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$38 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$38 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 17986
  HEAP32[$34 >> 2] = 0; //@line 17987
  $413 = $$0$be + 6 << 24 >> 24; //@line 17988
  HEAP8[$50 >> 0] = HEAP8[$38 + ($$0$be + 5 & 255) >> 0] | 0; //@line 17992
  $419 = HEAP32[(HEAP32[$58 >> 2] | 0) + 8 >> 2] | 0; //@line 17995
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(228) | 0; //@line 17996
  $420 = FUNCTION_TABLE_iiii[$419 & 31]($62, $392, $94) | 0; //@line 17997
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 478; //@line 18000
   $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 18001
   HEAP32[$421 >> 2] = $2; //@line 18002
   $422 = $ReallocAsyncCtx4 + 8 | 0; //@line 18003
   HEAP8[$422 >> 0] = $4; //@line 18004
   $423 = $ReallocAsyncCtx4 + 12 | 0; //@line 18005
   HEAP32[$423 >> 2] = $6; //@line 18006
   $424 = $ReallocAsyncCtx4 + 16 | 0; //@line 18007
   HEAP32[$424 >> 2] = $8; //@line 18008
   $425 = $ReallocAsyncCtx4 + 20 | 0; //@line 18009
   HEAP32[$425 >> 2] = $10; //@line 18010
   $426 = $ReallocAsyncCtx4 + 24 | 0; //@line 18011
   HEAP32[$426 >> 2] = $12; //@line 18012
   $427 = $ReallocAsyncCtx4 + 28 | 0; //@line 18013
   HEAP32[$427 >> 2] = $14; //@line 18014
   $428 = $ReallocAsyncCtx4 + 32 | 0; //@line 18015
   HEAP32[$428 >> 2] = $16; //@line 18016
   $429 = $ReallocAsyncCtx4 + 36 | 0; //@line 18017
   HEAP32[$429 >> 2] = $18; //@line 18018
   $430 = $ReallocAsyncCtx4 + 40 | 0; //@line 18019
   HEAP32[$430 >> 2] = $20; //@line 18020
   $431 = $ReallocAsyncCtx4 + 44 | 0; //@line 18021
   HEAP32[$431 >> 2] = $22; //@line 18022
   $432 = $ReallocAsyncCtx4 + 48 | 0; //@line 18023
   HEAP32[$432 >> 2] = $24; //@line 18024
   $433 = $ReallocAsyncCtx4 + 52 | 0; //@line 18025
   HEAP32[$433 >> 2] = $26; //@line 18026
   $434 = $ReallocAsyncCtx4 + 56 | 0; //@line 18027
   HEAP32[$434 >> 2] = $28; //@line 18028
   $435 = $ReallocAsyncCtx4 + 60 | 0; //@line 18029
   HEAP32[$435 >> 2] = $30; //@line 18030
   $436 = $ReallocAsyncCtx4 + 64 | 0; //@line 18031
   HEAP32[$436 >> 2] = $32; //@line 18032
   $437 = $ReallocAsyncCtx4 + 68 | 0; //@line 18033
   HEAP32[$437 >> 2] = $34; //@line 18034
   $438 = $ReallocAsyncCtx4 + 72 | 0; //@line 18035
   HEAP32[$438 >> 2] = $38; //@line 18036
   $439 = $ReallocAsyncCtx4 + 76 | 0; //@line 18037
   HEAP32[$439 >> 2] = $40; //@line 18038
   $440 = $ReallocAsyncCtx4 + 80 | 0; //@line 18039
   HEAP32[$440 >> 2] = $42; //@line 18040
   $441 = $ReallocAsyncCtx4 + 84 | 0; //@line 18041
   HEAP8[$441 >> 0] = $413; //@line 18042
   $442 = $ReallocAsyncCtx4 + 85 | 0; //@line 18043
   HEAP8[$442 >> 0] = $46; //@line 18044
   $443 = $ReallocAsyncCtx4 + 86 | 0; //@line 18045
   HEAP8[$443 >> 0] = $44; //@line 18046
   $444 = $ReallocAsyncCtx4 + 88 | 0; //@line 18047
   HEAP32[$444 >> 2] = $50; //@line 18048
   $445 = $ReallocAsyncCtx4 + 92 | 0; //@line 18049
   HEAP32[$445 >> 2] = $52; //@line 18050
   $446 = $ReallocAsyncCtx4 + 96 | 0; //@line 18051
   HEAP32[$446 >> 2] = $48; //@line 18052
   $447 = $ReallocAsyncCtx4 + 100 | 0; //@line 18053
   HEAP32[$447 >> 2] = $54; //@line 18054
   $448 = $ReallocAsyncCtx4 + 104 | 0; //@line 18055
   HEAP32[$448 >> 2] = $56; //@line 18056
   $449 = $ReallocAsyncCtx4 + 108 | 0; //@line 18057
   HEAP32[$449 >> 2] = $58; //@line 18058
   $450 = $ReallocAsyncCtx4 + 112 | 0; //@line 18059
   HEAP32[$450 >> 2] = $60; //@line 18060
   $451 = $ReallocAsyncCtx4 + 116 | 0; //@line 18061
   HEAP32[$451 >> 2] = $62; //@line 18062
   $452 = $ReallocAsyncCtx4 + 120 | 0; //@line 18063
   HEAP32[$452 >> 2] = $64; //@line 18064
   $453 = $ReallocAsyncCtx4 + 124 | 0; //@line 18065
   HEAP32[$453 >> 2] = $66; //@line 18066
   $454 = $ReallocAsyncCtx4 + 128 | 0; //@line 18067
   HEAP32[$454 >> 2] = $68; //@line 18068
   $455 = $ReallocAsyncCtx4 + 132 | 0; //@line 18069
   HEAP32[$455 >> 2] = $70; //@line 18070
   $456 = $ReallocAsyncCtx4 + 136 | 0; //@line 18071
   HEAP32[$456 >> 2] = $72; //@line 18072
   $457 = $ReallocAsyncCtx4 + 140 | 0; //@line 18073
   HEAP32[$457 >> 2] = $74; //@line 18074
   $458 = $ReallocAsyncCtx4 + 144 | 0; //@line 18075
   HEAP32[$458 >> 2] = $76; //@line 18076
   $459 = $ReallocAsyncCtx4 + 148 | 0; //@line 18077
   HEAP32[$459 >> 2] = $78; //@line 18078
   $460 = $ReallocAsyncCtx4 + 152 | 0; //@line 18079
   HEAP32[$460 >> 2] = $80; //@line 18080
   $461 = $ReallocAsyncCtx4 + 156 | 0; //@line 18081
   HEAP32[$461 >> 2] = $82; //@line 18082
   $462 = $ReallocAsyncCtx4 + 160 | 0; //@line 18083
   HEAP32[$462 >> 2] = $84; //@line 18084
   $463 = $ReallocAsyncCtx4 + 164 | 0; //@line 18085
   HEAP32[$463 >> 2] = $86; //@line 18086
   $464 = $ReallocAsyncCtx4 + 168 | 0; //@line 18087
   HEAP32[$464 >> 2] = $88; //@line 18088
   $465 = $ReallocAsyncCtx4 + 172 | 0; //@line 18089
   HEAP32[$465 >> 2] = $90; //@line 18090
   $466 = $ReallocAsyncCtx4 + 176 | 0; //@line 18091
   HEAP32[$466 >> 2] = $92; //@line 18092
   $467 = $ReallocAsyncCtx4 + 180 | 0; //@line 18093
   HEAP32[$467 >> 2] = $94; //@line 18094
   $468 = $ReallocAsyncCtx4 + 184 | 0; //@line 18095
   HEAP32[$468 >> 2] = $96; //@line 18096
   $469 = $ReallocAsyncCtx4 + 188 | 0; //@line 18097
   HEAP32[$469 >> 2] = $98; //@line 18098
   $470 = $ReallocAsyncCtx4 + 192 | 0; //@line 18099
   HEAP32[$470 >> 2] = $100; //@line 18100
   $471 = $ReallocAsyncCtx4 + 196 | 0; //@line 18101
   HEAP32[$471 >> 2] = $102; //@line 18102
   $472 = $ReallocAsyncCtx4 + 200 | 0; //@line 18103
   HEAP32[$472 >> 2] = $104; //@line 18104
   $473 = $ReallocAsyncCtx4 + 204 | 0; //@line 18105
   HEAP32[$473 >> 2] = $106; //@line 18106
   $474 = $ReallocAsyncCtx4 + 208 | 0; //@line 18107
   HEAP32[$474 >> 2] = $108; //@line 18108
   $475 = $ReallocAsyncCtx4 + 212 | 0; //@line 18109
   HEAP32[$475 >> 2] = $110; //@line 18110
   $476 = $ReallocAsyncCtx4 + 216 | 0; //@line 18111
   HEAP32[$476 >> 2] = $112; //@line 18112
   $477 = $ReallocAsyncCtx4 + 220 | 0; //@line 18113
   HEAP32[$477 >> 2] = $114; //@line 18114
   $478 = $ReallocAsyncCtx4 + 224 | 0; //@line 18115
   HEAP32[$478 >> 2] = $116; //@line 18116
   sp = STACKTOP; //@line 18117
   return;
  }
  HEAP8[___async_retval >> 0] = $420; //@line 18121
  ___async_unwind = 0; //@line 18122
  HEAP32[$ReallocAsyncCtx4 >> 2] = 478; //@line 18123
  $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 18124
  HEAP32[$421 >> 2] = $2; //@line 18125
  $422 = $ReallocAsyncCtx4 + 8 | 0; //@line 18126
  HEAP8[$422 >> 0] = $4; //@line 18127
  $423 = $ReallocAsyncCtx4 + 12 | 0; //@line 18128
  HEAP32[$423 >> 2] = $6; //@line 18129
  $424 = $ReallocAsyncCtx4 + 16 | 0; //@line 18130
  HEAP32[$424 >> 2] = $8; //@line 18131
  $425 = $ReallocAsyncCtx4 + 20 | 0; //@line 18132
  HEAP32[$425 >> 2] = $10; //@line 18133
  $426 = $ReallocAsyncCtx4 + 24 | 0; //@line 18134
  HEAP32[$426 >> 2] = $12; //@line 18135
  $427 = $ReallocAsyncCtx4 + 28 | 0; //@line 18136
  HEAP32[$427 >> 2] = $14; //@line 18137
  $428 = $ReallocAsyncCtx4 + 32 | 0; //@line 18138
  HEAP32[$428 >> 2] = $16; //@line 18139
  $429 = $ReallocAsyncCtx4 + 36 | 0; //@line 18140
  HEAP32[$429 >> 2] = $18; //@line 18141
  $430 = $ReallocAsyncCtx4 + 40 | 0; //@line 18142
  HEAP32[$430 >> 2] = $20; //@line 18143
  $431 = $ReallocAsyncCtx4 + 44 | 0; //@line 18144
  HEAP32[$431 >> 2] = $22; //@line 18145
  $432 = $ReallocAsyncCtx4 + 48 | 0; //@line 18146
  HEAP32[$432 >> 2] = $24; //@line 18147
  $433 = $ReallocAsyncCtx4 + 52 | 0; //@line 18148
  HEAP32[$433 >> 2] = $26; //@line 18149
  $434 = $ReallocAsyncCtx4 + 56 | 0; //@line 18150
  HEAP32[$434 >> 2] = $28; //@line 18151
  $435 = $ReallocAsyncCtx4 + 60 | 0; //@line 18152
  HEAP32[$435 >> 2] = $30; //@line 18153
  $436 = $ReallocAsyncCtx4 + 64 | 0; //@line 18154
  HEAP32[$436 >> 2] = $32; //@line 18155
  $437 = $ReallocAsyncCtx4 + 68 | 0; //@line 18156
  HEAP32[$437 >> 2] = $34; //@line 18157
  $438 = $ReallocAsyncCtx4 + 72 | 0; //@line 18158
  HEAP32[$438 >> 2] = $38; //@line 18159
  $439 = $ReallocAsyncCtx4 + 76 | 0; //@line 18160
  HEAP32[$439 >> 2] = $40; //@line 18161
  $440 = $ReallocAsyncCtx4 + 80 | 0; //@line 18162
  HEAP32[$440 >> 2] = $42; //@line 18163
  $441 = $ReallocAsyncCtx4 + 84 | 0; //@line 18164
  HEAP8[$441 >> 0] = $413; //@line 18165
  $442 = $ReallocAsyncCtx4 + 85 | 0; //@line 18166
  HEAP8[$442 >> 0] = $46; //@line 18167
  $443 = $ReallocAsyncCtx4 + 86 | 0; //@line 18168
  HEAP8[$443 >> 0] = $44; //@line 18169
  $444 = $ReallocAsyncCtx4 + 88 | 0; //@line 18170
  HEAP32[$444 >> 2] = $50; //@line 18171
  $445 = $ReallocAsyncCtx4 + 92 | 0; //@line 18172
  HEAP32[$445 >> 2] = $52; //@line 18173
  $446 = $ReallocAsyncCtx4 + 96 | 0; //@line 18174
  HEAP32[$446 >> 2] = $48; //@line 18175
  $447 = $ReallocAsyncCtx4 + 100 | 0; //@line 18176
  HEAP32[$447 >> 2] = $54; //@line 18177
  $448 = $ReallocAsyncCtx4 + 104 | 0; //@line 18178
  HEAP32[$448 >> 2] = $56; //@line 18179
  $449 = $ReallocAsyncCtx4 + 108 | 0; //@line 18180
  HEAP32[$449 >> 2] = $58; //@line 18181
  $450 = $ReallocAsyncCtx4 + 112 | 0; //@line 18182
  HEAP32[$450 >> 2] = $60; //@line 18183
  $451 = $ReallocAsyncCtx4 + 116 | 0; //@line 18184
  HEAP32[$451 >> 2] = $62; //@line 18185
  $452 = $ReallocAsyncCtx4 + 120 | 0; //@line 18186
  HEAP32[$452 >> 2] = $64; //@line 18187
  $453 = $ReallocAsyncCtx4 + 124 | 0; //@line 18188
  HEAP32[$453 >> 2] = $66; //@line 18189
  $454 = $ReallocAsyncCtx4 + 128 | 0; //@line 18190
  HEAP32[$454 >> 2] = $68; //@line 18191
  $455 = $ReallocAsyncCtx4 + 132 | 0; //@line 18192
  HEAP32[$455 >> 2] = $70; //@line 18193
  $456 = $ReallocAsyncCtx4 + 136 | 0; //@line 18194
  HEAP32[$456 >> 2] = $72; //@line 18195
  $457 = $ReallocAsyncCtx4 + 140 | 0; //@line 18196
  HEAP32[$457 >> 2] = $74; //@line 18197
  $458 = $ReallocAsyncCtx4 + 144 | 0; //@line 18198
  HEAP32[$458 >> 2] = $76; //@line 18199
  $459 = $ReallocAsyncCtx4 + 148 | 0; //@line 18200
  HEAP32[$459 >> 2] = $78; //@line 18201
  $460 = $ReallocAsyncCtx4 + 152 | 0; //@line 18202
  HEAP32[$460 >> 2] = $80; //@line 18203
  $461 = $ReallocAsyncCtx4 + 156 | 0; //@line 18204
  HEAP32[$461 >> 2] = $82; //@line 18205
  $462 = $ReallocAsyncCtx4 + 160 | 0; //@line 18206
  HEAP32[$462 >> 2] = $84; //@line 18207
  $463 = $ReallocAsyncCtx4 + 164 | 0; //@line 18208
  HEAP32[$463 >> 2] = $86; //@line 18209
  $464 = $ReallocAsyncCtx4 + 168 | 0; //@line 18210
  HEAP32[$464 >> 2] = $88; //@line 18211
  $465 = $ReallocAsyncCtx4 + 172 | 0; //@line 18212
  HEAP32[$465 >> 2] = $90; //@line 18213
  $466 = $ReallocAsyncCtx4 + 176 | 0; //@line 18214
  HEAP32[$466 >> 2] = $92; //@line 18215
  $467 = $ReallocAsyncCtx4 + 180 | 0; //@line 18216
  HEAP32[$467 >> 2] = $94; //@line 18217
  $468 = $ReallocAsyncCtx4 + 184 | 0; //@line 18218
  HEAP32[$468 >> 2] = $96; //@line 18219
  $469 = $ReallocAsyncCtx4 + 188 | 0; //@line 18220
  HEAP32[$469 >> 2] = $98; //@line 18221
  $470 = $ReallocAsyncCtx4 + 192 | 0; //@line 18222
  HEAP32[$470 >> 2] = $100; //@line 18223
  $471 = $ReallocAsyncCtx4 + 196 | 0; //@line 18224
  HEAP32[$471 >> 2] = $102; //@line 18225
  $472 = $ReallocAsyncCtx4 + 200 | 0; //@line 18226
  HEAP32[$472 >> 2] = $104; //@line 18227
  $473 = $ReallocAsyncCtx4 + 204 | 0; //@line 18228
  HEAP32[$473 >> 2] = $106; //@line 18229
  $474 = $ReallocAsyncCtx4 + 208 | 0; //@line 18230
  HEAP32[$474 >> 2] = $108; //@line 18231
  $475 = $ReallocAsyncCtx4 + 212 | 0; //@line 18232
  HEAP32[$475 >> 2] = $110; //@line 18233
  $476 = $ReallocAsyncCtx4 + 216 | 0; //@line 18234
  HEAP32[$476 >> 2] = $112; //@line 18235
  $477 = $ReallocAsyncCtx4 + 220 | 0; //@line 18236
  HEAP32[$477 >> 2] = $114; //@line 18237
  $478 = $ReallocAsyncCtx4 + 224 | 0; //@line 18238
  HEAP32[$478 >> 2] = $116; //@line 18239
  sp = STACKTOP; //@line 18240
  return;
 } else if ((label | 0) == 25) {
  $499 = $$0$be + 2 << 24 >> 24; //@line 18244
  $503 = HEAPU8[$38 + ($119 & 255) >> 0] | 0; //@line 18248
  $505 = $503 >>> 5 & 1; //@line 18251
  $507 = $503 >>> 4 & 1; //@line 18254
  $510 = HEAP32[(HEAP32[$80 >> 2] | 0) + 44 >> 2] | 0; //@line 18257
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(248) | 0; //@line 18258
  $511 = FUNCTION_TABLE_iiii[$510 & 31]($62, $507, $505) | 0; //@line 18259
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 18262
   $512 = $ReallocAsyncCtx5 + 4 | 0; //@line 18263
   HEAP32[$512 >> 2] = $2; //@line 18264
   $513 = $ReallocAsyncCtx5 + 8 | 0; //@line 18265
   HEAP8[$513 >> 0] = $4; //@line 18266
   $514 = $ReallocAsyncCtx5 + 12 | 0; //@line 18267
   HEAP32[$514 >> 2] = $6; //@line 18268
   $515 = $ReallocAsyncCtx5 + 16 | 0; //@line 18269
   HEAP32[$515 >> 2] = $8; //@line 18270
   $516 = $ReallocAsyncCtx5 + 20 | 0; //@line 18271
   HEAP32[$516 >> 2] = $10; //@line 18272
   $517 = $ReallocAsyncCtx5 + 24 | 0; //@line 18273
   HEAP32[$517 >> 2] = $503; //@line 18274
   $518 = $ReallocAsyncCtx5 + 28 | 0; //@line 18275
   HEAP32[$518 >> 2] = $12; //@line 18276
   $519 = $ReallocAsyncCtx5 + 32 | 0; //@line 18277
   HEAP32[$519 >> 2] = $14; //@line 18278
   $520 = $ReallocAsyncCtx5 + 36 | 0; //@line 18279
   HEAP32[$520 >> 2] = $16; //@line 18280
   $521 = $ReallocAsyncCtx5 + 40 | 0; //@line 18281
   HEAP32[$521 >> 2] = $18; //@line 18282
   $522 = $ReallocAsyncCtx5 + 44 | 0; //@line 18283
   HEAP32[$522 >> 2] = $20; //@line 18284
   $523 = $ReallocAsyncCtx5 + 48 | 0; //@line 18285
   HEAP32[$523 >> 2] = $22; //@line 18286
   $524 = $ReallocAsyncCtx5 + 52 | 0; //@line 18287
   HEAP32[$524 >> 2] = $24; //@line 18288
   $525 = $ReallocAsyncCtx5 + 56 | 0; //@line 18289
   HEAP32[$525 >> 2] = $26; //@line 18290
   $526 = $ReallocAsyncCtx5 + 60 | 0; //@line 18291
   HEAP32[$526 >> 2] = $28; //@line 18292
   $527 = $ReallocAsyncCtx5 + 64 | 0; //@line 18293
   HEAP32[$527 >> 2] = $30; //@line 18294
   $528 = $ReallocAsyncCtx5 + 68 | 0; //@line 18295
   HEAP32[$528 >> 2] = $32; //@line 18296
   $529 = $ReallocAsyncCtx5 + 72 | 0; //@line 18297
   HEAP8[$529 >> 0] = $505; //@line 18298
   $530 = $ReallocAsyncCtx5 + 76 | 0; //@line 18299
   HEAP32[$530 >> 2] = $34; //@line 18300
   $531 = $ReallocAsyncCtx5 + 80 | 0; //@line 18301
   HEAP32[$531 >> 2] = $38; //@line 18302
   $532 = $ReallocAsyncCtx5 + 84 | 0; //@line 18303
   HEAP32[$532 >> 2] = $40; //@line 18304
   $533 = $ReallocAsyncCtx5 + 88 | 0; //@line 18305
   HEAP32[$533 >> 2] = $42; //@line 18306
   $534 = $ReallocAsyncCtx5 + 92 | 0; //@line 18307
   HEAP8[$534 >> 0] = $44; //@line 18308
   $535 = $ReallocAsyncCtx5 + 93 | 0; //@line 18309
   HEAP8[$535 >> 0] = $46; //@line 18310
   $536 = $ReallocAsyncCtx5 + 96 | 0; //@line 18311
   HEAP32[$536 >> 2] = $52; //@line 18312
   $537 = $ReallocAsyncCtx5 + 100 | 0; //@line 18313
   HEAP32[$537 >> 2] = $50; //@line 18314
   $538 = $ReallocAsyncCtx5 + 104 | 0; //@line 18315
   HEAP32[$538 >> 2] = $48; //@line 18316
   $539 = $ReallocAsyncCtx5 + 108 | 0; //@line 18317
   HEAP32[$539 >> 2] = $54; //@line 18318
   $540 = $ReallocAsyncCtx5 + 112 | 0; //@line 18319
   HEAP8[$540 >> 0] = $499; //@line 18320
   $541 = $ReallocAsyncCtx5 + 116 | 0; //@line 18321
   HEAP32[$541 >> 2] = $56; //@line 18322
   $542 = $ReallocAsyncCtx5 + 120 | 0; //@line 18323
   HEAP32[$542 >> 2] = $58; //@line 18324
   $543 = $ReallocAsyncCtx5 + 124 | 0; //@line 18325
   HEAP32[$543 >> 2] = $60; //@line 18326
   $544 = $ReallocAsyncCtx5 + 128 | 0; //@line 18327
   HEAP32[$544 >> 2] = $62; //@line 18328
   $545 = $ReallocAsyncCtx5 + 132 | 0; //@line 18329
   HEAP32[$545 >> 2] = $64; //@line 18330
   $546 = $ReallocAsyncCtx5 + 136 | 0; //@line 18331
   HEAP32[$546 >> 2] = $66; //@line 18332
   $547 = $ReallocAsyncCtx5 + 140 | 0; //@line 18333
   HEAP32[$547 >> 2] = $68; //@line 18334
   $548 = $ReallocAsyncCtx5 + 144 | 0; //@line 18335
   HEAP32[$548 >> 2] = $70; //@line 18336
   $549 = $ReallocAsyncCtx5 + 148 | 0; //@line 18337
   HEAP32[$549 >> 2] = $72; //@line 18338
   $550 = $ReallocAsyncCtx5 + 152 | 0; //@line 18339
   HEAP32[$550 >> 2] = $74; //@line 18340
   $551 = $ReallocAsyncCtx5 + 156 | 0; //@line 18341
   HEAP8[$551 >> 0] = $507; //@line 18342
   $552 = $ReallocAsyncCtx5 + 160 | 0; //@line 18343
   HEAP32[$552 >> 2] = $76; //@line 18344
   $553 = $ReallocAsyncCtx5 + 164 | 0; //@line 18345
   HEAP32[$553 >> 2] = $78; //@line 18346
   $554 = $ReallocAsyncCtx5 + 168 | 0; //@line 18347
   HEAP32[$554 >> 2] = $80; //@line 18348
   $555 = $ReallocAsyncCtx5 + 172 | 0; //@line 18349
   HEAP32[$555 >> 2] = $82; //@line 18350
   $556 = $ReallocAsyncCtx5 + 176 | 0; //@line 18351
   HEAP32[$556 >> 2] = $84; //@line 18352
   $557 = $ReallocAsyncCtx5 + 180 | 0; //@line 18353
   HEAP32[$557 >> 2] = $86; //@line 18354
   $558 = $ReallocAsyncCtx5 + 184 | 0; //@line 18355
   HEAP32[$558 >> 2] = $88; //@line 18356
   $559 = $ReallocAsyncCtx5 + 188 | 0; //@line 18357
   HEAP32[$559 >> 2] = $90; //@line 18358
   $560 = $ReallocAsyncCtx5 + 192 | 0; //@line 18359
   HEAP32[$560 >> 2] = $92; //@line 18360
   $561 = $ReallocAsyncCtx5 + 196 | 0; //@line 18361
   HEAP32[$561 >> 2] = $94; //@line 18362
   $562 = $ReallocAsyncCtx5 + 200 | 0; //@line 18363
   HEAP32[$562 >> 2] = $96; //@line 18364
   $563 = $ReallocAsyncCtx5 + 204 | 0; //@line 18365
   HEAP32[$563 >> 2] = $98; //@line 18366
   $564 = $ReallocAsyncCtx5 + 208 | 0; //@line 18367
   HEAP32[$564 >> 2] = $100; //@line 18368
   $565 = $ReallocAsyncCtx5 + 212 | 0; //@line 18369
   HEAP32[$565 >> 2] = $102; //@line 18370
   $566 = $ReallocAsyncCtx5 + 216 | 0; //@line 18371
   HEAP32[$566 >> 2] = $104; //@line 18372
   $567 = $ReallocAsyncCtx5 + 220 | 0; //@line 18373
   HEAP32[$567 >> 2] = $106; //@line 18374
   $568 = $ReallocAsyncCtx5 + 224 | 0; //@line 18375
   HEAP32[$568 >> 2] = $108; //@line 18376
   $569 = $ReallocAsyncCtx5 + 228 | 0; //@line 18377
   HEAP32[$569 >> 2] = $110; //@line 18378
   $570 = $ReallocAsyncCtx5 + 232 | 0; //@line 18379
   HEAP32[$570 >> 2] = $112; //@line 18380
   $571 = $ReallocAsyncCtx5 + 236 | 0; //@line 18381
   HEAP32[$571 >> 2] = $$0107$be; //@line 18382
   $572 = $ReallocAsyncCtx5 + 240 | 0; //@line 18383
   HEAP32[$572 >> 2] = $114; //@line 18384
   $573 = $ReallocAsyncCtx5 + 244 | 0; //@line 18385
   HEAP32[$573 >> 2] = $116; //@line 18386
   sp = STACKTOP; //@line 18387
   return;
  }
  HEAP8[___async_retval >> 0] = $511 & 1; //@line 18392
  ___async_unwind = 0; //@line 18393
  HEAP32[$ReallocAsyncCtx5 >> 2] = 479; //@line 18394
  $512 = $ReallocAsyncCtx5 + 4 | 0; //@line 18395
  HEAP32[$512 >> 2] = $2; //@line 18396
  $513 = $ReallocAsyncCtx5 + 8 | 0; //@line 18397
  HEAP8[$513 >> 0] = $4; //@line 18398
  $514 = $ReallocAsyncCtx5 + 12 | 0; //@line 18399
  HEAP32[$514 >> 2] = $6; //@line 18400
  $515 = $ReallocAsyncCtx5 + 16 | 0; //@line 18401
  HEAP32[$515 >> 2] = $8; //@line 18402
  $516 = $ReallocAsyncCtx5 + 20 | 0; //@line 18403
  HEAP32[$516 >> 2] = $10; //@line 18404
  $517 = $ReallocAsyncCtx5 + 24 | 0; //@line 18405
  HEAP32[$517 >> 2] = $503; //@line 18406
  $518 = $ReallocAsyncCtx5 + 28 | 0; //@line 18407
  HEAP32[$518 >> 2] = $12; //@line 18408
  $519 = $ReallocAsyncCtx5 + 32 | 0; //@line 18409
  HEAP32[$519 >> 2] = $14; //@line 18410
  $520 = $ReallocAsyncCtx5 + 36 | 0; //@line 18411
  HEAP32[$520 >> 2] = $16; //@line 18412
  $521 = $ReallocAsyncCtx5 + 40 | 0; //@line 18413
  HEAP32[$521 >> 2] = $18; //@line 18414
  $522 = $ReallocAsyncCtx5 + 44 | 0; //@line 18415
  HEAP32[$522 >> 2] = $20; //@line 18416
  $523 = $ReallocAsyncCtx5 + 48 | 0; //@line 18417
  HEAP32[$523 >> 2] = $22; //@line 18418
  $524 = $ReallocAsyncCtx5 + 52 | 0; //@line 18419
  HEAP32[$524 >> 2] = $24; //@line 18420
  $525 = $ReallocAsyncCtx5 + 56 | 0; //@line 18421
  HEAP32[$525 >> 2] = $26; //@line 18422
  $526 = $ReallocAsyncCtx5 + 60 | 0; //@line 18423
  HEAP32[$526 >> 2] = $28; //@line 18424
  $527 = $ReallocAsyncCtx5 + 64 | 0; //@line 18425
  HEAP32[$527 >> 2] = $30; //@line 18426
  $528 = $ReallocAsyncCtx5 + 68 | 0; //@line 18427
  HEAP32[$528 >> 2] = $32; //@line 18428
  $529 = $ReallocAsyncCtx5 + 72 | 0; //@line 18429
  HEAP8[$529 >> 0] = $505; //@line 18430
  $530 = $ReallocAsyncCtx5 + 76 | 0; //@line 18431
  HEAP32[$530 >> 2] = $34; //@line 18432
  $531 = $ReallocAsyncCtx5 + 80 | 0; //@line 18433
  HEAP32[$531 >> 2] = $38; //@line 18434
  $532 = $ReallocAsyncCtx5 + 84 | 0; //@line 18435
  HEAP32[$532 >> 2] = $40; //@line 18436
  $533 = $ReallocAsyncCtx5 + 88 | 0; //@line 18437
  HEAP32[$533 >> 2] = $42; //@line 18438
  $534 = $ReallocAsyncCtx5 + 92 | 0; //@line 18439
  HEAP8[$534 >> 0] = $44; //@line 18440
  $535 = $ReallocAsyncCtx5 + 93 | 0; //@line 18441
  HEAP8[$535 >> 0] = $46; //@line 18442
  $536 = $ReallocAsyncCtx5 + 96 | 0; //@line 18443
  HEAP32[$536 >> 2] = $52; //@line 18444
  $537 = $ReallocAsyncCtx5 + 100 | 0; //@line 18445
  HEAP32[$537 >> 2] = $50; //@line 18446
  $538 = $ReallocAsyncCtx5 + 104 | 0; //@line 18447
  HEAP32[$538 >> 2] = $48; //@line 18448
  $539 = $ReallocAsyncCtx5 + 108 | 0; //@line 18449
  HEAP32[$539 >> 2] = $54; //@line 18450
  $540 = $ReallocAsyncCtx5 + 112 | 0; //@line 18451
  HEAP8[$540 >> 0] = $499; //@line 18452
  $541 = $ReallocAsyncCtx5 + 116 | 0; //@line 18453
  HEAP32[$541 >> 2] = $56; //@line 18454
  $542 = $ReallocAsyncCtx5 + 120 | 0; //@line 18455
  HEAP32[$542 >> 2] = $58; //@line 18456
  $543 = $ReallocAsyncCtx5 + 124 | 0; //@line 18457
  HEAP32[$543 >> 2] = $60; //@line 18458
  $544 = $ReallocAsyncCtx5 + 128 | 0; //@line 18459
  HEAP32[$544 >> 2] = $62; //@line 18460
  $545 = $ReallocAsyncCtx5 + 132 | 0; //@line 18461
  HEAP32[$545 >> 2] = $64; //@line 18462
  $546 = $ReallocAsyncCtx5 + 136 | 0; //@line 18463
  HEAP32[$546 >> 2] = $66; //@line 18464
  $547 = $ReallocAsyncCtx5 + 140 | 0; //@line 18465
  HEAP32[$547 >> 2] = $68; //@line 18466
  $548 = $ReallocAsyncCtx5 + 144 | 0; //@line 18467
  HEAP32[$548 >> 2] = $70; //@line 18468
  $549 = $ReallocAsyncCtx5 + 148 | 0; //@line 18469
  HEAP32[$549 >> 2] = $72; //@line 18470
  $550 = $ReallocAsyncCtx5 + 152 | 0; //@line 18471
  HEAP32[$550 >> 2] = $74; //@line 18472
  $551 = $ReallocAsyncCtx5 + 156 | 0; //@line 18473
  HEAP8[$551 >> 0] = $507; //@line 18474
  $552 = $ReallocAsyncCtx5 + 160 | 0; //@line 18475
  HEAP32[$552 >> 2] = $76; //@line 18476
  $553 = $ReallocAsyncCtx5 + 164 | 0; //@line 18477
  HEAP32[$553 >> 2] = $78; //@line 18478
  $554 = $ReallocAsyncCtx5 + 168 | 0; //@line 18479
  HEAP32[$554 >> 2] = $80; //@line 18480
  $555 = $ReallocAsyncCtx5 + 172 | 0; //@line 18481
  HEAP32[$555 >> 2] = $82; //@line 18482
  $556 = $ReallocAsyncCtx5 + 176 | 0; //@line 18483
  HEAP32[$556 >> 2] = $84; //@line 18484
  $557 = $ReallocAsyncCtx5 + 180 | 0; //@line 18485
  HEAP32[$557 >> 2] = $86; //@line 18486
  $558 = $ReallocAsyncCtx5 + 184 | 0; //@line 18487
  HEAP32[$558 >> 2] = $88; //@line 18488
  $559 = $ReallocAsyncCtx5 + 188 | 0; //@line 18489
  HEAP32[$559 >> 2] = $90; //@line 18490
  $560 = $ReallocAsyncCtx5 + 192 | 0; //@line 18491
  HEAP32[$560 >> 2] = $92; //@line 18492
  $561 = $ReallocAsyncCtx5 + 196 | 0; //@line 18493
  HEAP32[$561 >> 2] = $94; //@line 18494
  $562 = $ReallocAsyncCtx5 + 200 | 0; //@line 18495
  HEAP32[$562 >> 2] = $96; //@line 18496
  $563 = $ReallocAsyncCtx5 + 204 | 0; //@line 18497
  HEAP32[$563 >> 2] = $98; //@line 18498
  $564 = $ReallocAsyncCtx5 + 208 | 0; //@line 18499
  HEAP32[$564 >> 2] = $100; //@line 18500
  $565 = $ReallocAsyncCtx5 + 212 | 0; //@line 18501
  HEAP32[$565 >> 2] = $102; //@line 18502
  $566 = $ReallocAsyncCtx5 + 216 | 0; //@line 18503
  HEAP32[$566 >> 2] = $104; //@line 18504
  $567 = $ReallocAsyncCtx5 + 220 | 0; //@line 18505
  HEAP32[$567 >> 2] = $106; //@line 18506
  $568 = $ReallocAsyncCtx5 + 224 | 0; //@line 18507
  HEAP32[$568 >> 2] = $108; //@line 18508
  $569 = $ReallocAsyncCtx5 + 228 | 0; //@line 18509
  HEAP32[$569 >> 2] = $110; //@line 18510
  $570 = $ReallocAsyncCtx5 + 232 | 0; //@line 18511
  HEAP32[$570 >> 2] = $112; //@line 18512
  $571 = $ReallocAsyncCtx5 + 236 | 0; //@line 18513
  HEAP32[$571 >> 2] = $$0107$be; //@line 18514
  $572 = $ReallocAsyncCtx5 + 240 | 0; //@line 18515
  HEAP32[$572 >> 2] = $114; //@line 18516
  $573 = $ReallocAsyncCtx5 + 244 | 0; //@line 18517
  HEAP32[$573 >> 2] = $116; //@line 18518
  sp = STACKTOP; //@line 18519
  return;
 } else if ((label | 0) == 28) {
  $578 = HEAP8[$38 + ($119 & 255) >> 0] | 0; //@line 18526
  $591 = $$0$be + 5 << 24 >> 24; //@line 18539
  $598 = (HEAPU8[$38 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$38 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$38 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 18546
  $601 = HEAP32[(HEAP32[$100 >> 2] | 0) + 48 >> 2] | 0; //@line 18549
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(232) | 0; //@line 18550
  $602 = FUNCTION_TABLE_iiii[$601 & 31]($62, $578, $598) | 0; //@line 18551
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 480; //@line 18554
   $603 = $ReallocAsyncCtx6 + 4 | 0; //@line 18555
   HEAP32[$603 >> 2] = $2; //@line 18556
   $604 = $ReallocAsyncCtx6 + 8 | 0; //@line 18557
   HEAP8[$604 >> 0] = $4; //@line 18558
   $605 = $ReallocAsyncCtx6 + 12 | 0; //@line 18559
   HEAP32[$605 >> 2] = $6; //@line 18560
   $606 = $ReallocAsyncCtx6 + 16 | 0; //@line 18561
   HEAP32[$606 >> 2] = $8; //@line 18562
   $607 = $ReallocAsyncCtx6 + 20 | 0; //@line 18563
   HEAP32[$607 >> 2] = $10; //@line 18564
   $608 = $ReallocAsyncCtx6 + 24 | 0; //@line 18565
   HEAP32[$608 >> 2] = $12; //@line 18566
   $609 = $ReallocAsyncCtx6 + 28 | 0; //@line 18567
   HEAP32[$609 >> 2] = $14; //@line 18568
   $610 = $ReallocAsyncCtx6 + 32 | 0; //@line 18569
   HEAP32[$610 >> 2] = $16; //@line 18570
   $611 = $ReallocAsyncCtx6 + 36 | 0; //@line 18571
   HEAP32[$611 >> 2] = $18; //@line 18572
   $612 = $ReallocAsyncCtx6 + 40 | 0; //@line 18573
   HEAP32[$612 >> 2] = $20; //@line 18574
   $613 = $ReallocAsyncCtx6 + 44 | 0; //@line 18575
   HEAP32[$613 >> 2] = $22; //@line 18576
   $614 = $ReallocAsyncCtx6 + 48 | 0; //@line 18577
   HEAP32[$614 >> 2] = $24; //@line 18578
   $615 = $ReallocAsyncCtx6 + 52 | 0; //@line 18579
   HEAP32[$615 >> 2] = $26; //@line 18580
   $616 = $ReallocAsyncCtx6 + 56 | 0; //@line 18581
   HEAP32[$616 >> 2] = $28; //@line 18582
   $617 = $ReallocAsyncCtx6 + 60 | 0; //@line 18583
   HEAP32[$617 >> 2] = $30; //@line 18584
   $618 = $ReallocAsyncCtx6 + 64 | 0; //@line 18585
   HEAP32[$618 >> 2] = $32; //@line 18586
   $619 = $ReallocAsyncCtx6 + 68 | 0; //@line 18587
   HEAP32[$619 >> 2] = $34; //@line 18588
   $620 = $ReallocAsyncCtx6 + 72 | 0; //@line 18589
   HEAP32[$620 >> 2] = $38; //@line 18590
   $621 = $ReallocAsyncCtx6 + 76 | 0; //@line 18591
   HEAP32[$621 >> 2] = $40; //@line 18592
   $622 = $ReallocAsyncCtx6 + 80 | 0; //@line 18593
   HEAP32[$622 >> 2] = $42; //@line 18594
   $623 = $ReallocAsyncCtx6 + 84 | 0; //@line 18595
   HEAP8[$623 >> 0] = $44; //@line 18596
   $624 = $ReallocAsyncCtx6 + 85 | 0; //@line 18597
   HEAP8[$624 >> 0] = $46; //@line 18598
   $625 = $ReallocAsyncCtx6 + 88 | 0; //@line 18599
   HEAP32[$625 >> 2] = $52; //@line 18600
   $626 = $ReallocAsyncCtx6 + 92 | 0; //@line 18601
   HEAP32[$626 >> 2] = $50; //@line 18602
   $627 = $ReallocAsyncCtx6 + 96 | 0; //@line 18603
   HEAP32[$627 >> 2] = $48; //@line 18604
   $628 = $ReallocAsyncCtx6 + 100 | 0; //@line 18605
   HEAP32[$628 >> 2] = $54; //@line 18606
   $629 = $ReallocAsyncCtx6 + 104 | 0; //@line 18607
   HEAP32[$629 >> 2] = $56; //@line 18608
   $630 = $ReallocAsyncCtx6 + 108 | 0; //@line 18609
   HEAP32[$630 >> 2] = $58; //@line 18610
   $631 = $ReallocAsyncCtx6 + 112 | 0; //@line 18611
   HEAP32[$631 >> 2] = $60; //@line 18612
   $632 = $ReallocAsyncCtx6 + 116 | 0; //@line 18613
   HEAP32[$632 >> 2] = $62; //@line 18614
   $633 = $ReallocAsyncCtx6 + 120 | 0; //@line 18615
   HEAP32[$633 >> 2] = $64; //@line 18616
   $634 = $ReallocAsyncCtx6 + 124 | 0; //@line 18617
   HEAP32[$634 >> 2] = $66; //@line 18618
   $635 = $ReallocAsyncCtx6 + 128 | 0; //@line 18619
   HEAP32[$635 >> 2] = $68; //@line 18620
   $636 = $ReallocAsyncCtx6 + 132 | 0; //@line 18621
   HEAP32[$636 >> 2] = $70; //@line 18622
   $637 = $ReallocAsyncCtx6 + 136 | 0; //@line 18623
   HEAP32[$637 >> 2] = $72; //@line 18624
   $638 = $ReallocAsyncCtx6 + 140 | 0; //@line 18625
   HEAP32[$638 >> 2] = $74; //@line 18626
   $639 = $ReallocAsyncCtx6 + 144 | 0; //@line 18627
   HEAP32[$639 >> 2] = $76; //@line 18628
   $640 = $ReallocAsyncCtx6 + 148 | 0; //@line 18629
   HEAP32[$640 >> 2] = $78; //@line 18630
   $641 = $ReallocAsyncCtx6 + 152 | 0; //@line 18631
   HEAP32[$641 >> 2] = $80; //@line 18632
   $642 = $ReallocAsyncCtx6 + 156 | 0; //@line 18633
   HEAP32[$642 >> 2] = $82; //@line 18634
   $643 = $ReallocAsyncCtx6 + 160 | 0; //@line 18635
   HEAP32[$643 >> 2] = $84; //@line 18636
   $644 = $ReallocAsyncCtx6 + 164 | 0; //@line 18637
   HEAP8[$644 >> 0] = $591; //@line 18638
   $645 = $ReallocAsyncCtx6 + 168 | 0; //@line 18639
   HEAP32[$645 >> 2] = $86; //@line 18640
   $646 = $ReallocAsyncCtx6 + 172 | 0; //@line 18641
   HEAP32[$646 >> 2] = $88; //@line 18642
   $647 = $ReallocAsyncCtx6 + 176 | 0; //@line 18643
   HEAP32[$647 >> 2] = $90; //@line 18644
   $648 = $ReallocAsyncCtx6 + 180 | 0; //@line 18645
   HEAP32[$648 >> 2] = $92; //@line 18646
   $649 = $ReallocAsyncCtx6 + 184 | 0; //@line 18647
   HEAP32[$649 >> 2] = $94; //@line 18648
   $650 = $ReallocAsyncCtx6 + 188 | 0; //@line 18649
   HEAP32[$650 >> 2] = $96; //@line 18650
   $651 = $ReallocAsyncCtx6 + 192 | 0; //@line 18651
   HEAP32[$651 >> 2] = $98; //@line 18652
   $652 = $ReallocAsyncCtx6 + 196 | 0; //@line 18653
   HEAP32[$652 >> 2] = $100; //@line 18654
   $653 = $ReallocAsyncCtx6 + 200 | 0; //@line 18655
   HEAP32[$653 >> 2] = $102; //@line 18656
   $654 = $ReallocAsyncCtx6 + 204 | 0; //@line 18657
   HEAP32[$654 >> 2] = $104; //@line 18658
   $655 = $ReallocAsyncCtx6 + 208 | 0; //@line 18659
   HEAP32[$655 >> 2] = $106; //@line 18660
   $656 = $ReallocAsyncCtx6 + 212 | 0; //@line 18661
   HEAP32[$656 >> 2] = $108; //@line 18662
   $657 = $ReallocAsyncCtx6 + 216 | 0; //@line 18663
   HEAP32[$657 >> 2] = $110; //@line 18664
   $658 = $ReallocAsyncCtx6 + 220 | 0; //@line 18665
   HEAP32[$658 >> 2] = $112; //@line 18666
   $659 = $ReallocAsyncCtx6 + 224 | 0; //@line 18667
   HEAP32[$659 >> 2] = $114; //@line 18668
   $660 = $ReallocAsyncCtx6 + 228 | 0; //@line 18669
   HEAP32[$660 >> 2] = $116; //@line 18670
   sp = STACKTOP; //@line 18671
   return;
  }
  HEAP8[___async_retval >> 0] = $602; //@line 18675
  ___async_unwind = 0; //@line 18676
  HEAP32[$ReallocAsyncCtx6 >> 2] = 480; //@line 18677
  $603 = $ReallocAsyncCtx6 + 4 | 0; //@line 18678
  HEAP32[$603 >> 2] = $2; //@line 18679
  $604 = $ReallocAsyncCtx6 + 8 | 0; //@line 18680
  HEAP8[$604 >> 0] = $4; //@line 18681
  $605 = $ReallocAsyncCtx6 + 12 | 0; //@line 18682
  HEAP32[$605 >> 2] = $6; //@line 18683
  $606 = $ReallocAsyncCtx6 + 16 | 0; //@line 18684
  HEAP32[$606 >> 2] = $8; //@line 18685
  $607 = $ReallocAsyncCtx6 + 20 | 0; //@line 18686
  HEAP32[$607 >> 2] = $10; //@line 18687
  $608 = $ReallocAsyncCtx6 + 24 | 0; //@line 18688
  HEAP32[$608 >> 2] = $12; //@line 18689
  $609 = $ReallocAsyncCtx6 + 28 | 0; //@line 18690
  HEAP32[$609 >> 2] = $14; //@line 18691
  $610 = $ReallocAsyncCtx6 + 32 | 0; //@line 18692
  HEAP32[$610 >> 2] = $16; //@line 18693
  $611 = $ReallocAsyncCtx6 + 36 | 0; //@line 18694
  HEAP32[$611 >> 2] = $18; //@line 18695
  $612 = $ReallocAsyncCtx6 + 40 | 0; //@line 18696
  HEAP32[$612 >> 2] = $20; //@line 18697
  $613 = $ReallocAsyncCtx6 + 44 | 0; //@line 18698
  HEAP32[$613 >> 2] = $22; //@line 18699
  $614 = $ReallocAsyncCtx6 + 48 | 0; //@line 18700
  HEAP32[$614 >> 2] = $24; //@line 18701
  $615 = $ReallocAsyncCtx6 + 52 | 0; //@line 18702
  HEAP32[$615 >> 2] = $26; //@line 18703
  $616 = $ReallocAsyncCtx6 + 56 | 0; //@line 18704
  HEAP32[$616 >> 2] = $28; //@line 18705
  $617 = $ReallocAsyncCtx6 + 60 | 0; //@line 18706
  HEAP32[$617 >> 2] = $30; //@line 18707
  $618 = $ReallocAsyncCtx6 + 64 | 0; //@line 18708
  HEAP32[$618 >> 2] = $32; //@line 18709
  $619 = $ReallocAsyncCtx6 + 68 | 0; //@line 18710
  HEAP32[$619 >> 2] = $34; //@line 18711
  $620 = $ReallocAsyncCtx6 + 72 | 0; //@line 18712
  HEAP32[$620 >> 2] = $38; //@line 18713
  $621 = $ReallocAsyncCtx6 + 76 | 0; //@line 18714
  HEAP32[$621 >> 2] = $40; //@line 18715
  $622 = $ReallocAsyncCtx6 + 80 | 0; //@line 18716
  HEAP32[$622 >> 2] = $42; //@line 18717
  $623 = $ReallocAsyncCtx6 + 84 | 0; //@line 18718
  HEAP8[$623 >> 0] = $44; //@line 18719
  $624 = $ReallocAsyncCtx6 + 85 | 0; //@line 18720
  HEAP8[$624 >> 0] = $46; //@line 18721
  $625 = $ReallocAsyncCtx6 + 88 | 0; //@line 18722
  HEAP32[$625 >> 2] = $52; //@line 18723
  $626 = $ReallocAsyncCtx6 + 92 | 0; //@line 18724
  HEAP32[$626 >> 2] = $50; //@line 18725
  $627 = $ReallocAsyncCtx6 + 96 | 0; //@line 18726
  HEAP32[$627 >> 2] = $48; //@line 18727
  $628 = $ReallocAsyncCtx6 + 100 | 0; //@line 18728
  HEAP32[$628 >> 2] = $54; //@line 18729
  $629 = $ReallocAsyncCtx6 + 104 | 0; //@line 18730
  HEAP32[$629 >> 2] = $56; //@line 18731
  $630 = $ReallocAsyncCtx6 + 108 | 0; //@line 18732
  HEAP32[$630 >> 2] = $58; //@line 18733
  $631 = $ReallocAsyncCtx6 + 112 | 0; //@line 18734
  HEAP32[$631 >> 2] = $60; //@line 18735
  $632 = $ReallocAsyncCtx6 + 116 | 0; //@line 18736
  HEAP32[$632 >> 2] = $62; //@line 18737
  $633 = $ReallocAsyncCtx6 + 120 | 0; //@line 18738
  HEAP32[$633 >> 2] = $64; //@line 18739
  $634 = $ReallocAsyncCtx6 + 124 | 0; //@line 18740
  HEAP32[$634 >> 2] = $66; //@line 18741
  $635 = $ReallocAsyncCtx6 + 128 | 0; //@line 18742
  HEAP32[$635 >> 2] = $68; //@line 18743
  $636 = $ReallocAsyncCtx6 + 132 | 0; //@line 18744
  HEAP32[$636 >> 2] = $70; //@line 18745
  $637 = $ReallocAsyncCtx6 + 136 | 0; //@line 18746
  HEAP32[$637 >> 2] = $72; //@line 18747
  $638 = $ReallocAsyncCtx6 + 140 | 0; //@line 18748
  HEAP32[$638 >> 2] = $74; //@line 18749
  $639 = $ReallocAsyncCtx6 + 144 | 0; //@line 18750
  HEAP32[$639 >> 2] = $76; //@line 18751
  $640 = $ReallocAsyncCtx6 + 148 | 0; //@line 18752
  HEAP32[$640 >> 2] = $78; //@line 18753
  $641 = $ReallocAsyncCtx6 + 152 | 0; //@line 18754
  HEAP32[$641 >> 2] = $80; //@line 18755
  $642 = $ReallocAsyncCtx6 + 156 | 0; //@line 18756
  HEAP32[$642 >> 2] = $82; //@line 18757
  $643 = $ReallocAsyncCtx6 + 160 | 0; //@line 18758
  HEAP32[$643 >> 2] = $84; //@line 18759
  $644 = $ReallocAsyncCtx6 + 164 | 0; //@line 18760
  HEAP8[$644 >> 0] = $591; //@line 18761
  $645 = $ReallocAsyncCtx6 + 168 | 0; //@line 18762
  HEAP32[$645 >> 2] = $86; //@line 18763
  $646 = $ReallocAsyncCtx6 + 172 | 0; //@line 18764
  HEAP32[$646 >> 2] = $88; //@line 18765
  $647 = $ReallocAsyncCtx6 + 176 | 0; //@line 18766
  HEAP32[$647 >> 2] = $90; //@line 18767
  $648 = $ReallocAsyncCtx6 + 180 | 0; //@line 18768
  HEAP32[$648 >> 2] = $92; //@line 18769
  $649 = $ReallocAsyncCtx6 + 184 | 0; //@line 18770
  HEAP32[$649 >> 2] = $94; //@line 18771
  $650 = $ReallocAsyncCtx6 + 188 | 0; //@line 18772
  HEAP32[$650 >> 2] = $96; //@line 18773
  $651 = $ReallocAsyncCtx6 + 192 | 0; //@line 18774
  HEAP32[$651 >> 2] = $98; //@line 18775
  $652 = $ReallocAsyncCtx6 + 196 | 0; //@line 18776
  HEAP32[$652 >> 2] = $100; //@line 18777
  $653 = $ReallocAsyncCtx6 + 200 | 0; //@line 18778
  HEAP32[$653 >> 2] = $102; //@line 18779
  $654 = $ReallocAsyncCtx6 + 204 | 0; //@line 18780
  HEAP32[$654 >> 2] = $104; //@line 18781
  $655 = $ReallocAsyncCtx6 + 208 | 0; //@line 18782
  HEAP32[$655 >> 2] = $106; //@line 18783
  $656 = $ReallocAsyncCtx6 + 212 | 0; //@line 18784
  HEAP32[$656 >> 2] = $108; //@line 18785
  $657 = $ReallocAsyncCtx6 + 216 | 0; //@line 18786
  HEAP32[$657 >> 2] = $110; //@line 18787
  $658 = $ReallocAsyncCtx6 + 220 | 0; //@line 18788
  HEAP32[$658 >> 2] = $112; //@line 18789
  $659 = $ReallocAsyncCtx6 + 224 | 0; //@line 18790
  HEAP32[$659 >> 2] = $114; //@line 18791
  $660 = $ReallocAsyncCtx6 + 228 | 0; //@line 18792
  HEAP32[$660 >> 2] = $116; //@line 18793
  sp = STACKTOP; //@line 18794
  return;
 } else if ((label | 0) == 31) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 18799
  return;
 }
}
function _malloc($0) {
 $0 = $0 | 0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01926$i = 0, $$0193$lcssa$i = 0, $$01935$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024367$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0, $$124466$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i203 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$414$i = 0, $$4236$i = 0, $$4351$lcssa$i = 0, $$435113$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435712$i = 0, $$723947$i = 0, $$748$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i19$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0, $1 = 0, $1004 = 0, $101 = 0, $1010 = 0, $1013 = 0, $1014 = 0, $102 = 0, $1032 = 0, $1034 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1052 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $108 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $134 = 0, $138 = 0, $14 = 0, $143 = 0, $146 = 0, $149 = 0, $150 = 0, $157 = 0, $159 = 0, $16 = 0, $162 = 0, $164 = 0, $167 = 0, $169 = 0, $17 = 0, $172 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $19 = 0, $190 = 0, $191 = 0, $20 = 0, $204 = 0, $208 = 0, $214 = 0, $221 = 0, $225 = 0, $234 = 0, $235 = 0, $237 = 0, $238 = 0, $242 = 0, $243 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $261 = 0, $262 = 0, $265 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $282 = 0, $292 = 0, $296 = 0, $30 = 0, $302 = 0, $306 = 0, $309 = 0, $313 = 0, $315 = 0, $316 = 0, $318 = 0, $320 = 0, $322 = 0, $324 = 0, $326 = 0, $328 = 0, $330 = 0, $34 = 0, $340 = 0, $341 = 0, $352 = 0, $354 = 0, $357 = 0, $359 = 0, $362 = 0, $364 = 0, $367 = 0, $37 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $376 = 0, $377 = 0, $379 = 0, $380 = 0, $385 = 0, $386 = 0, $391 = 0, $399 = 0, $403 = 0, $409 = 0, $41 = 0, $416 = 0, $420 = 0, $428 = 0, $431 = 0, $432 = 0, $433 = 0, $437 = 0, $438 = 0, $44 = 0, $444 = 0, $449 = 0, $450 = 0, $453 = 0, $455 = 0, $458 = 0, $463 = 0, $469 = 0, $47 = 0, $471 = 0, $473 = 0, $475 = 0, $49 = 0, $492 = 0, $494 = 0, $50 = 0, $501 = 0, $502 = 0, $503 = 0, $512 = 0, $514 = 0, $515 = 0, $517 = 0, $52 = 0, $526 = 0, $530 = 0, $532 = 0, $533 = 0, $534 = 0, $54 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $552 = 0, $554 = 0, $555 = 0, $56 = 0, $561 = 0, $563 = 0, $565 = 0, $570 = 0, $572 = 0, $574 = 0, $575 = 0, $576 = 0, $58 = 0, $584 = 0, $585 = 0, $588 = 0, $592 = 0, $595 = 0, $597 = 0, $6 = 0, $60 = 0, $603 = 0, $607 = 0, $611 = 0, $62 = 0, $620 = 0, $621 = 0, $627 = 0, $629 = 0, $633 = 0, $636 = 0, $638 = 0, $64 = 0, $642 = 0, $644 = 0, $649 = 0, $650 = 0, $651 = 0, $657 = 0, $658 = 0, $659 = 0, $663 = 0, $67 = 0, $673 = 0, $675 = 0, $680 = 0, $681 = 0, $682 = 0, $688 = 0, $69 = 0, $690 = 0, $694 = 0, $7 = 0, $70 = 0, $700 = 0, $704 = 0, $71 = 0, $710 = 0, $712 = 0, $718 = 0, $72 = 0, $722 = 0, $723 = 0, $728 = 0, $73 = 0, $734 = 0, $739 = 0, $742 = 0, $743 = 0, $746 = 0, $748 = 0, $750 = 0, $753 = 0, $764 = 0, $769 = 0, $77 = 0, $771 = 0, $774 = 0, $776 = 0, $779 = 0, $782 = 0, $783 = 0, $784 = 0, $786 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $797 = 0, $798 = 0, $8 = 0, $80 = 0, $812 = 0, $815 = 0, $816 = 0, $822 = 0, $83 = 0, $830 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $845 = 0, $846 = 0, $852 = 0, $857 = 0, $858 = 0, $861 = 0, $863 = 0, $866 = 0, $87 = 0, $871 = 0, $877 = 0, $879 = 0, $881 = 0, $882 = 0, $9 = 0, $900 = 0, $902 = 0, $909 = 0, $910 = 0, $911 = 0, $919 = 0, $92 = 0, $923 = 0, $927 = 0, $929 = 0, $93 = 0, $935 = 0, $936 = 0, $938 = 0, $939 = 0, $940 = 0, $941 = 0, $943 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $956 = 0, $958 = 0, $96 = 0, $964 = 0, $969 = 0, $972 = 0, $973 = 0, $974 = 0, $978 = 0, $979 = 0, $98 = 0, $985 = 0, $990 = 0, $991 = 0, $994 = 0, $996 = 0, $999 = 0, label = 0, sp = 0, $958$looptemp = 0;
 sp = STACKTOP; //@line 7698
 STACKTOP = STACKTOP + 16 | 0; //@line 7699
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7699
 $1 = sp; //@line 7700
 do {
  if ($0 >>> 0 < 245) {
   $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8; //@line 7707
   $7 = $6 >>> 3; //@line 7708
   $8 = HEAP32[5767] | 0; //@line 7709
   $9 = $8 >>> $7; //@line 7710
   if ($9 & 3 | 0) {
    $14 = ($9 & 1 ^ 1) + $7 | 0; //@line 7716
    $16 = 23108 + ($14 << 1 << 2) | 0; //@line 7718
    $17 = $16 + 8 | 0; //@line 7719
    $18 = HEAP32[$17 >> 2] | 0; //@line 7720
    $19 = $18 + 8 | 0; //@line 7721
    $20 = HEAP32[$19 >> 2] | 0; //@line 7722
    do {
     if (($20 | 0) == ($16 | 0)) {
      HEAP32[5767] = $8 & ~(1 << $14); //@line 7729
     } else {
      if ((HEAP32[5771] | 0) >>> 0 > $20 >>> 0) {
       _abort(); //@line 7734
      }
      $27 = $20 + 12 | 0; //@line 7737
      if ((HEAP32[$27 >> 2] | 0) == ($18 | 0)) {
       HEAP32[$27 >> 2] = $16; //@line 7741
       HEAP32[$17 >> 2] = $20; //@line 7742
       break;
      } else {
       _abort(); //@line 7745
      }
     }
    } while (0);
    $30 = $14 << 3; //@line 7750
    HEAP32[$18 + 4 >> 2] = $30 | 3; //@line 7753
    $34 = $18 + $30 + 4 | 0; //@line 7755
    HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1; //@line 7758
    $$0 = $19; //@line 7759
    STACKTOP = sp; //@line 7760
    return $$0 | 0; //@line 7760
   }
   $37 = HEAP32[5769] | 0; //@line 7762
   if ($6 >>> 0 > $37 >>> 0) {
    if ($9 | 0) {
     $41 = 2 << $7; //@line 7768
     $44 = $9 << $7 & ($41 | 0 - $41); //@line 7771
     $47 = ($44 & 0 - $44) + -1 | 0; //@line 7774
     $49 = $47 >>> 12 & 16; //@line 7776
     $50 = $47 >>> $49; //@line 7777
     $52 = $50 >>> 5 & 8; //@line 7779
     $54 = $50 >>> $52; //@line 7781
     $56 = $54 >>> 2 & 4; //@line 7783
     $58 = $54 >>> $56; //@line 7785
     $60 = $58 >>> 1 & 2; //@line 7787
     $62 = $58 >>> $60; //@line 7789
     $64 = $62 >>> 1 & 1; //@line 7791
     $67 = ($52 | $49 | $56 | $60 | $64) + ($62 >>> $64) | 0; //@line 7794
     $69 = 23108 + ($67 << 1 << 2) | 0; //@line 7796
     $70 = $69 + 8 | 0; //@line 7797
     $71 = HEAP32[$70 >> 2] | 0; //@line 7798
     $72 = $71 + 8 | 0; //@line 7799
     $73 = HEAP32[$72 >> 2] | 0; //@line 7800
     do {
      if (($73 | 0) == ($69 | 0)) {
       $77 = $8 & ~(1 << $67); //@line 7806
       HEAP32[5767] = $77; //@line 7807
       $98 = $77; //@line 7808
      } else {
       if ((HEAP32[5771] | 0) >>> 0 > $73 >>> 0) {
        _abort(); //@line 7813
       }
       $80 = $73 + 12 | 0; //@line 7816
       if ((HEAP32[$80 >> 2] | 0) == ($71 | 0)) {
        HEAP32[$80 >> 2] = $69; //@line 7820
        HEAP32[$70 >> 2] = $73; //@line 7821
        $98 = $8; //@line 7822
        break;
       } else {
        _abort(); //@line 7825
       }
      }
     } while (0);
     $83 = $67 << 3; //@line 7830
     $84 = $83 - $6 | 0; //@line 7831
     HEAP32[$71 + 4 >> 2] = $6 | 3; //@line 7834
     $87 = $71 + $6 | 0; //@line 7835
     HEAP32[$87 + 4 >> 2] = $84 | 1; //@line 7838
     HEAP32[$71 + $83 >> 2] = $84; //@line 7840
     if ($37 | 0) {
      $92 = HEAP32[5772] | 0; //@line 7843
      $93 = $37 >>> 3; //@line 7844
      $95 = 23108 + ($93 << 1 << 2) | 0; //@line 7846
      $96 = 1 << $93; //@line 7847
      if (!($98 & $96)) {
       HEAP32[5767] = $98 | $96; //@line 7852
       $$0199 = $95; //@line 7854
       $$pre$phiZ2D = $95 + 8 | 0; //@line 7854
      } else {
       $101 = $95 + 8 | 0; //@line 7856
       $102 = HEAP32[$101 >> 2] | 0; //@line 7857
       if ((HEAP32[5771] | 0) >>> 0 > $102 >>> 0) {
        _abort(); //@line 7861
       } else {
        $$0199 = $102; //@line 7864
        $$pre$phiZ2D = $101; //@line 7864
       }
      }
      HEAP32[$$pre$phiZ2D >> 2] = $92; //@line 7867
      HEAP32[$$0199 + 12 >> 2] = $92; //@line 7869
      HEAP32[$92 + 8 >> 2] = $$0199; //@line 7871
      HEAP32[$92 + 12 >> 2] = $95; //@line 7873
     }
     HEAP32[5769] = $84; //@line 7875
     HEAP32[5772] = $87; //@line 7876
     $$0 = $72; //@line 7877
     STACKTOP = sp; //@line 7878
     return $$0 | 0; //@line 7878
    }
    $108 = HEAP32[5768] | 0; //@line 7880
    if (!$108) {
     $$0197 = $6; //@line 7883
    } else {
     $112 = ($108 & 0 - $108) + -1 | 0; //@line 7887
     $114 = $112 >>> 12 & 16; //@line 7889
     $115 = $112 >>> $114; //@line 7890
     $117 = $115 >>> 5 & 8; //@line 7892
     $119 = $115 >>> $117; //@line 7894
     $121 = $119 >>> 2 & 4; //@line 7896
     $123 = $119 >>> $121; //@line 7898
     $125 = $123 >>> 1 & 2; //@line 7900
     $127 = $123 >>> $125; //@line 7902
     $129 = $127 >>> 1 & 1; //@line 7904
     $134 = HEAP32[23372 + (($117 | $114 | $121 | $125 | $129) + ($127 >>> $129) << 2) >> 2] | 0; //@line 7909
     $138 = (HEAP32[$134 + 4 >> 2] & -8) - $6 | 0; //@line 7913
     $143 = HEAP32[$134 + 16 + (((HEAP32[$134 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 7919
     if (!$143) {
      $$0192$lcssa$i = $134; //@line 7922
      $$0193$lcssa$i = $138; //@line 7922
     } else {
      $$01926$i = $134; //@line 7924
      $$01935$i = $138; //@line 7924
      $146 = $143; //@line 7924
      while (1) {
       $149 = (HEAP32[$146 + 4 >> 2] & -8) - $6 | 0; //@line 7929
       $150 = $149 >>> 0 < $$01935$i >>> 0; //@line 7930
       $$$0193$i = $150 ? $149 : $$01935$i; //@line 7931
       $$$0192$i = $150 ? $146 : $$01926$i; //@line 7932
       $146 = HEAP32[$146 + 16 + (((HEAP32[$146 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 7938
       if (!$146) {
        $$0192$lcssa$i = $$$0192$i; //@line 7941
        $$0193$lcssa$i = $$$0193$i; //@line 7941
        break;
       } else {
        $$01926$i = $$$0192$i; //@line 7944
        $$01935$i = $$$0193$i; //@line 7944
       }
      }
     }
     $157 = HEAP32[5771] | 0; //@line 7948
     if ($157 >>> 0 > $$0192$lcssa$i >>> 0) {
      _abort(); //@line 7951
     }
     $159 = $$0192$lcssa$i + $6 | 0; //@line 7954
     if ($159 >>> 0 <= $$0192$lcssa$i >>> 0) {
      _abort(); //@line 7957
     }
     $162 = HEAP32[$$0192$lcssa$i + 24 >> 2] | 0; //@line 7961
     $164 = HEAP32[$$0192$lcssa$i + 12 >> 2] | 0; //@line 7963
     do {
      if (($164 | 0) == ($$0192$lcssa$i | 0)) {
       $175 = $$0192$lcssa$i + 20 | 0; //@line 7967
       $176 = HEAP32[$175 >> 2] | 0; //@line 7968
       if (!$176) {
        $178 = $$0192$lcssa$i + 16 | 0; //@line 7971
        $179 = HEAP32[$178 >> 2] | 0; //@line 7972
        if (!$179) {
         $$3$i = 0; //@line 7975
         break;
        } else {
         $$1196$i = $179; //@line 7978
         $$1198$i = $178; //@line 7978
        }
       } else {
        $$1196$i = $176; //@line 7981
        $$1198$i = $175; //@line 7981
       }
       while (1) {
        $181 = $$1196$i + 20 | 0; //@line 7984
        $182 = HEAP32[$181 >> 2] | 0; //@line 7985
        if ($182 | 0) {
         $$1196$i = $182; //@line 7988
         $$1198$i = $181; //@line 7988
         continue;
        }
        $184 = $$1196$i + 16 | 0; //@line 7991
        $185 = HEAP32[$184 >> 2] | 0; //@line 7992
        if (!$185) {
         break;
        } else {
         $$1196$i = $185; //@line 7997
         $$1198$i = $184; //@line 7997
        }
       }
       if ($157 >>> 0 > $$1198$i >>> 0) {
        _abort(); //@line 8002
       } else {
        HEAP32[$$1198$i >> 2] = 0; //@line 8005
        $$3$i = $$1196$i; //@line 8006
        break;
       }
      } else {
       $167 = HEAP32[$$0192$lcssa$i + 8 >> 2] | 0; //@line 8011
       if ($157 >>> 0 > $167 >>> 0) {
        _abort(); //@line 8014
       }
       $169 = $167 + 12 | 0; //@line 8017
       if ((HEAP32[$169 >> 2] | 0) != ($$0192$lcssa$i | 0)) {
        _abort(); //@line 8021
       }
       $172 = $164 + 8 | 0; //@line 8024
       if ((HEAP32[$172 >> 2] | 0) == ($$0192$lcssa$i | 0)) {
        HEAP32[$169 >> 2] = $164; //@line 8028
        HEAP32[$172 >> 2] = $167; //@line 8029
        $$3$i = $164; //@line 8030
        break;
       } else {
        _abort(); //@line 8033
       }
      }
     } while (0);
     L73 : do {
      if ($162 | 0) {
       $190 = HEAP32[$$0192$lcssa$i + 28 >> 2] | 0; //@line 8042
       $191 = 23372 + ($190 << 2) | 0; //@line 8043
       do {
        if (($$0192$lcssa$i | 0) == (HEAP32[$191 >> 2] | 0)) {
         HEAP32[$191 >> 2] = $$3$i; //@line 8048
         if (!$$3$i) {
          HEAP32[5768] = $108 & ~(1 << $190); //@line 8054
          break L73;
         }
        } else {
         if ((HEAP32[5771] | 0) >>> 0 > $162 >>> 0) {
          _abort(); //@line 8061
         } else {
          HEAP32[$162 + 16 + (((HEAP32[$162 + 16 >> 2] | 0) != ($$0192$lcssa$i | 0) & 1) << 2) >> 2] = $$3$i; //@line 8069
          if (!$$3$i) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while (0);
       $204 = HEAP32[5771] | 0; //@line 8079
       if ($204 >>> 0 > $$3$i >>> 0) {
        _abort(); //@line 8082
       }
       HEAP32[$$3$i + 24 >> 2] = $162; //@line 8086
       $208 = HEAP32[$$0192$lcssa$i + 16 >> 2] | 0; //@line 8088
       do {
        if ($208 | 0) {
         if ($204 >>> 0 > $208 >>> 0) {
          _abort(); //@line 8094
         } else {
          HEAP32[$$3$i + 16 >> 2] = $208; //@line 8098
          HEAP32[$208 + 24 >> 2] = $$3$i; //@line 8100
          break;
         }
        }
       } while (0);
       $214 = HEAP32[$$0192$lcssa$i + 20 >> 2] | 0; //@line 8106
       if ($214 | 0) {
        if ((HEAP32[5771] | 0) >>> 0 > $214 >>> 0) {
         _abort(); //@line 8112
        } else {
         HEAP32[$$3$i + 20 >> 2] = $214; //@line 8116
         HEAP32[$214 + 24 >> 2] = $$3$i; //@line 8118
         break;
        }
       }
      }
     } while (0);
     if ($$0193$lcssa$i >>> 0 < 16) {
      $221 = $$0193$lcssa$i + $6 | 0; //@line 8126
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $221 | 3; //@line 8129
      $225 = $$0192$lcssa$i + $221 + 4 | 0; //@line 8131
      HEAP32[$225 >> 2] = HEAP32[$225 >> 2] | 1; //@line 8134
     } else {
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $6 | 3; //@line 8138
      HEAP32[$159 + 4 >> 2] = $$0193$lcssa$i | 1; //@line 8141
      HEAP32[$159 + $$0193$lcssa$i >> 2] = $$0193$lcssa$i; //@line 8143
      if ($37 | 0) {
       $234 = HEAP32[5772] | 0; //@line 8146
       $235 = $37 >>> 3; //@line 8147
       $237 = 23108 + ($235 << 1 << 2) | 0; //@line 8149
       $238 = 1 << $235; //@line 8150
       if (!($8 & $238)) {
        HEAP32[5767] = $8 | $238; //@line 8155
        $$0189$i = $237; //@line 8157
        $$pre$phi$iZ2D = $237 + 8 | 0; //@line 8157
       } else {
        $242 = $237 + 8 | 0; //@line 8159
        $243 = HEAP32[$242 >> 2] | 0; //@line 8160
        if ((HEAP32[5771] | 0) >>> 0 > $243 >>> 0) {
         _abort(); //@line 8164
        } else {
         $$0189$i = $243; //@line 8167
         $$pre$phi$iZ2D = $242; //@line 8167
        }
       }
       HEAP32[$$pre$phi$iZ2D >> 2] = $234; //@line 8170
       HEAP32[$$0189$i + 12 >> 2] = $234; //@line 8172
       HEAP32[$234 + 8 >> 2] = $$0189$i; //@line 8174
       HEAP32[$234 + 12 >> 2] = $237; //@line 8176
      }
      HEAP32[5769] = $$0193$lcssa$i; //@line 8178
      HEAP32[5772] = $159; //@line 8179
     }
     $$0 = $$0192$lcssa$i + 8 | 0; //@line 8182
     STACKTOP = sp; //@line 8183
     return $$0 | 0; //@line 8183
    }
   } else {
    $$0197 = $6; //@line 8186
   }
  } else {
   if ($0 >>> 0 > 4294967231) {
    $$0197 = -1; //@line 8191
   } else {
    $251 = $0 + 11 | 0; //@line 8193
    $252 = $251 & -8; //@line 8194
    $253 = HEAP32[5768] | 0; //@line 8195
    if (!$253) {
     $$0197 = $252; //@line 8198
    } else {
     $255 = 0 - $252 | 0; //@line 8200
     $256 = $251 >>> 8; //@line 8201
     if (!$256) {
      $$0358$i = 0; //@line 8204
     } else {
      if ($252 >>> 0 > 16777215) {
       $$0358$i = 31; //@line 8208
      } else {
       $261 = ($256 + 1048320 | 0) >>> 16 & 8; //@line 8212
       $262 = $256 << $261; //@line 8213
       $265 = ($262 + 520192 | 0) >>> 16 & 4; //@line 8216
       $267 = $262 << $265; //@line 8218
       $270 = ($267 + 245760 | 0) >>> 16 & 2; //@line 8221
       $275 = 14 - ($265 | $261 | $270) + ($267 << $270 >>> 15) | 0; //@line 8226
       $$0358$i = $252 >>> ($275 + 7 | 0) & 1 | $275 << 1; //@line 8232
      }
     }
     $282 = HEAP32[23372 + ($$0358$i << 2) >> 2] | 0; //@line 8236
     L117 : do {
      if (!$282) {
       $$2355$i = 0; //@line 8240
       $$3$i203 = 0; //@line 8240
       $$3350$i = $255; //@line 8240
       label = 81; //@line 8241
      } else {
       $$0342$i = 0; //@line 8248
       $$0347$i = $255; //@line 8248
       $$0353$i = $282; //@line 8248
       $$0359$i = $252 << (($$0358$i | 0) == 31 ? 0 : 25 - ($$0358$i >>> 1) | 0); //@line 8248
       $$0362$i = 0; //@line 8248
       while (1) {
        $292 = (HEAP32[$$0353$i + 4 >> 2] & -8) - $252 | 0; //@line 8253
        if ($292 >>> 0 < $$0347$i >>> 0) {
         if (!$292) {
          $$414$i = $$0353$i; //@line 8258
          $$435113$i = 0; //@line 8258
          $$435712$i = $$0353$i; //@line 8258
          label = 85; //@line 8259
          break L117;
         } else {
          $$1343$i = $$0353$i; //@line 8262
          $$1348$i = $292; //@line 8262
         }
        } else {
         $$1343$i = $$0342$i; //@line 8265
         $$1348$i = $$0347$i; //@line 8265
        }
        $296 = HEAP32[$$0353$i + 20 >> 2] | 0; //@line 8268
        $$0353$i = HEAP32[$$0353$i + 16 + ($$0359$i >>> 31 << 2) >> 2] | 0; //@line 8271
        $$1363$i = ($296 | 0) == 0 | ($296 | 0) == ($$0353$i | 0) ? $$0362$i : $296; //@line 8275
        $302 = ($$0353$i | 0) == 0; //@line 8276
        if ($302) {
         $$2355$i = $$1363$i; //@line 8281
         $$3$i203 = $$1343$i; //@line 8281
         $$3350$i = $$1348$i; //@line 8281
         label = 81; //@line 8282
         break;
        } else {
         $$0342$i = $$1343$i; //@line 8285
         $$0347$i = $$1348$i; //@line 8285
         $$0359$i = $$0359$i << (($302 ^ 1) & 1); //@line 8285
         $$0362$i = $$1363$i; //@line 8285
        }
       }
      }
     } while (0);
     if ((label | 0) == 81) {
      if (($$2355$i | 0) == 0 & ($$3$i203 | 0) == 0) {
       $306 = 2 << $$0358$i; //@line 8295
       $309 = $253 & ($306 | 0 - $306); //@line 8298
       if (!$309) {
        $$0197 = $252; //@line 8301
        break;
       }
       $313 = ($309 & 0 - $309) + -1 | 0; //@line 8306
       $315 = $313 >>> 12 & 16; //@line 8308
       $316 = $313 >>> $315; //@line 8309
       $318 = $316 >>> 5 & 8; //@line 8311
       $320 = $316 >>> $318; //@line 8313
       $322 = $320 >>> 2 & 4; //@line 8315
       $324 = $320 >>> $322; //@line 8317
       $326 = $324 >>> 1 & 2; //@line 8319
       $328 = $324 >>> $326; //@line 8321
       $330 = $328 >>> 1 & 1; //@line 8323
       $$4$ph$i = 0; //@line 8329
       $$4357$ph$i = HEAP32[23372 + (($318 | $315 | $322 | $326 | $330) + ($328 >>> $330) << 2) >> 2] | 0; //@line 8329
      } else {
       $$4$ph$i = $$3$i203; //@line 8331
       $$4357$ph$i = $$2355$i; //@line 8331
      }
      if (!$$4357$ph$i) {
       $$4$lcssa$i = $$4$ph$i; //@line 8335
       $$4351$lcssa$i = $$3350$i; //@line 8335
      } else {
       $$414$i = $$4$ph$i; //@line 8337
       $$435113$i = $$3350$i; //@line 8337
       $$435712$i = $$4357$ph$i; //@line 8337
       label = 85; //@line 8338
      }
     }
     if ((label | 0) == 85) {
      while (1) {
       label = 0; //@line 8343
       $340 = (HEAP32[$$435712$i + 4 >> 2] & -8) - $252 | 0; //@line 8347
       $341 = $340 >>> 0 < $$435113$i >>> 0; //@line 8348
       $$$4351$i = $341 ? $340 : $$435113$i; //@line 8349
       $$4357$$4$i = $341 ? $$435712$i : $$414$i; //@line 8350
       $$435712$i = HEAP32[$$435712$i + 16 + (((HEAP32[$$435712$i + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 8356
       if (!$$435712$i) {
        $$4$lcssa$i = $$4357$$4$i; //@line 8359
        $$4351$lcssa$i = $$$4351$i; //@line 8359
        break;
       } else {
        $$414$i = $$4357$$4$i; //@line 8362
        $$435113$i = $$$4351$i; //@line 8362
        label = 85; //@line 8363
       }
      }
     }
     if (!$$4$lcssa$i) {
      $$0197 = $252; //@line 8369
     } else {
      if ($$4351$lcssa$i >>> 0 < ((HEAP32[5769] | 0) - $252 | 0) >>> 0) {
       $352 = HEAP32[5771] | 0; //@line 8375
       if ($352 >>> 0 > $$4$lcssa$i >>> 0) {
        _abort(); //@line 8378
       }
       $354 = $$4$lcssa$i + $252 | 0; //@line 8381
       if ($354 >>> 0 <= $$4$lcssa$i >>> 0) {
        _abort(); //@line 8384
       }
       $357 = HEAP32[$$4$lcssa$i + 24 >> 2] | 0; //@line 8388
       $359 = HEAP32[$$4$lcssa$i + 12 >> 2] | 0; //@line 8390
       do {
        if (($359 | 0) == ($$4$lcssa$i | 0)) {
         $370 = $$4$lcssa$i + 20 | 0; //@line 8394
         $371 = HEAP32[$370 >> 2] | 0; //@line 8395
         if (!$371) {
          $373 = $$4$lcssa$i + 16 | 0; //@line 8398
          $374 = HEAP32[$373 >> 2] | 0; //@line 8399
          if (!$374) {
           $$3372$i = 0; //@line 8402
           break;
          } else {
           $$1370$i = $374; //@line 8405
           $$1374$i = $373; //@line 8405
          }
         } else {
          $$1370$i = $371; //@line 8408
          $$1374$i = $370; //@line 8408
         }
         while (1) {
          $376 = $$1370$i + 20 | 0; //@line 8411
          $377 = HEAP32[$376 >> 2] | 0; //@line 8412
          if ($377 | 0) {
           $$1370$i = $377; //@line 8415
           $$1374$i = $376; //@line 8415
           continue;
          }
          $379 = $$1370$i + 16 | 0; //@line 8418
          $380 = HEAP32[$379 >> 2] | 0; //@line 8419
          if (!$380) {
           break;
          } else {
           $$1370$i = $380; //@line 8424
           $$1374$i = $379; //@line 8424
          }
         }
         if ($352 >>> 0 > $$1374$i >>> 0) {
          _abort(); //@line 8429
         } else {
          HEAP32[$$1374$i >> 2] = 0; //@line 8432
          $$3372$i = $$1370$i; //@line 8433
          break;
         }
        } else {
         $362 = HEAP32[$$4$lcssa$i + 8 >> 2] | 0; //@line 8438
         if ($352 >>> 0 > $362 >>> 0) {
          _abort(); //@line 8441
         }
         $364 = $362 + 12 | 0; //@line 8444
         if ((HEAP32[$364 >> 2] | 0) != ($$4$lcssa$i | 0)) {
          _abort(); //@line 8448
         }
         $367 = $359 + 8 | 0; //@line 8451
         if ((HEAP32[$367 >> 2] | 0) == ($$4$lcssa$i | 0)) {
          HEAP32[$364 >> 2] = $359; //@line 8455
          HEAP32[$367 >> 2] = $362; //@line 8456
          $$3372$i = $359; //@line 8457
          break;
         } else {
          _abort(); //@line 8460
         }
        }
       } while (0);
       L164 : do {
        if (!$357) {
         $475 = $253; //@line 8468
        } else {
         $385 = HEAP32[$$4$lcssa$i + 28 >> 2] | 0; //@line 8471
         $386 = 23372 + ($385 << 2) | 0; //@line 8472
         do {
          if (($$4$lcssa$i | 0) == (HEAP32[$386 >> 2] | 0)) {
           HEAP32[$386 >> 2] = $$3372$i; //@line 8477
           if (!$$3372$i) {
            $391 = $253 & ~(1 << $385); //@line 8482
            HEAP32[5768] = $391; //@line 8483
            $475 = $391; //@line 8484
            break L164;
           }
          } else {
           if ((HEAP32[5771] | 0) >>> 0 > $357 >>> 0) {
            _abort(); //@line 8491
           } else {
            HEAP32[$357 + 16 + (((HEAP32[$357 + 16 >> 2] | 0) != ($$4$lcssa$i | 0) & 1) << 2) >> 2] = $$3372$i; //@line 8499
            if (!$$3372$i) {
             $475 = $253; //@line 8502
             break L164;
            } else {
             break;
            }
           }
          }
         } while (0);
         $399 = HEAP32[5771] | 0; //@line 8510
         if ($399 >>> 0 > $$3372$i >>> 0) {
          _abort(); //@line 8513
         }
         HEAP32[$$3372$i + 24 >> 2] = $357; //@line 8517
         $403 = HEAP32[$$4$lcssa$i + 16 >> 2] | 0; //@line 8519
         do {
          if ($403 | 0) {
           if ($399 >>> 0 > $403 >>> 0) {
            _abort(); //@line 8525
           } else {
            HEAP32[$$3372$i + 16 >> 2] = $403; //@line 8529
            HEAP32[$403 + 24 >> 2] = $$3372$i; //@line 8531
            break;
           }
          }
         } while (0);
         $409 = HEAP32[$$4$lcssa$i + 20 >> 2] | 0; //@line 8537
         if (!$409) {
          $475 = $253; //@line 8540
         } else {
          if ((HEAP32[5771] | 0) >>> 0 > $409 >>> 0) {
           _abort(); //@line 8545
          } else {
           HEAP32[$$3372$i + 20 >> 2] = $409; //@line 8549
           HEAP32[$409 + 24 >> 2] = $$3372$i; //@line 8551
           $475 = $253; //@line 8552
           break;
          }
         }
        }
       } while (0);
       do {
        if ($$4351$lcssa$i >>> 0 < 16) {
         $416 = $$4351$lcssa$i + $252 | 0; //@line 8561
         HEAP32[$$4$lcssa$i + 4 >> 2] = $416 | 3; //@line 8564
         $420 = $$4$lcssa$i + $416 + 4 | 0; //@line 8566
         HEAP32[$420 >> 2] = HEAP32[$420 >> 2] | 1; //@line 8569
        } else {
         HEAP32[$$4$lcssa$i + 4 >> 2] = $252 | 3; //@line 8573
         HEAP32[$354 + 4 >> 2] = $$4351$lcssa$i | 1; //@line 8576
         HEAP32[$354 + $$4351$lcssa$i >> 2] = $$4351$lcssa$i; //@line 8578
         $428 = $$4351$lcssa$i >>> 3; //@line 8579
         if ($$4351$lcssa$i >>> 0 < 256) {
          $431 = 23108 + ($428 << 1 << 2) | 0; //@line 8583
          $432 = HEAP32[5767] | 0; //@line 8584
          $433 = 1 << $428; //@line 8585
          if (!($432 & $433)) {
           HEAP32[5767] = $432 | $433; //@line 8590
           $$0368$i = $431; //@line 8592
           $$pre$phi$i211Z2D = $431 + 8 | 0; //@line 8592
          } else {
           $437 = $431 + 8 | 0; //@line 8594
           $438 = HEAP32[$437 >> 2] | 0; //@line 8595
           if ((HEAP32[5771] | 0) >>> 0 > $438 >>> 0) {
            _abort(); //@line 8599
           } else {
            $$0368$i = $438; //@line 8602
            $$pre$phi$i211Z2D = $437; //@line 8602
           }
          }
          HEAP32[$$pre$phi$i211Z2D >> 2] = $354; //@line 8605
          HEAP32[$$0368$i + 12 >> 2] = $354; //@line 8607
          HEAP32[$354 + 8 >> 2] = $$0368$i; //@line 8609
          HEAP32[$354 + 12 >> 2] = $431; //@line 8611
          break;
         }
         $444 = $$4351$lcssa$i >>> 8; //@line 8614
         if (!$444) {
          $$0361$i = 0; //@line 8617
         } else {
          if ($$4351$lcssa$i >>> 0 > 16777215) {
           $$0361$i = 31; //@line 8621
          } else {
           $449 = ($444 + 1048320 | 0) >>> 16 & 8; //@line 8625
           $450 = $444 << $449; //@line 8626
           $453 = ($450 + 520192 | 0) >>> 16 & 4; //@line 8629
           $455 = $450 << $453; //@line 8631
           $458 = ($455 + 245760 | 0) >>> 16 & 2; //@line 8634
           $463 = 14 - ($453 | $449 | $458) + ($455 << $458 >>> 15) | 0; //@line 8639
           $$0361$i = $$4351$lcssa$i >>> ($463 + 7 | 0) & 1 | $463 << 1; //@line 8645
          }
         }
         $469 = 23372 + ($$0361$i << 2) | 0; //@line 8648
         HEAP32[$354 + 28 >> 2] = $$0361$i; //@line 8650
         $471 = $354 + 16 | 0; //@line 8651
         HEAP32[$471 + 4 >> 2] = 0; //@line 8653
         HEAP32[$471 >> 2] = 0; //@line 8654
         $473 = 1 << $$0361$i; //@line 8655
         if (!($475 & $473)) {
          HEAP32[5768] = $475 | $473; //@line 8660
          HEAP32[$469 >> 2] = $354; //@line 8661
          HEAP32[$354 + 24 >> 2] = $469; //@line 8663
          HEAP32[$354 + 12 >> 2] = $354; //@line 8665
          HEAP32[$354 + 8 >> 2] = $354; //@line 8667
          break;
         }
         $$0344$i = $$4351$lcssa$i << (($$0361$i | 0) == 31 ? 0 : 25 - ($$0361$i >>> 1) | 0); //@line 8676
         $$0345$i = HEAP32[$469 >> 2] | 0; //@line 8676
         while (1) {
          if ((HEAP32[$$0345$i + 4 >> 2] & -8 | 0) == ($$4351$lcssa$i | 0)) {
           label = 139; //@line 8683
           break;
          }
          $492 = $$0345$i + 16 + ($$0344$i >>> 31 << 2) | 0; //@line 8687
          $494 = HEAP32[$492 >> 2] | 0; //@line 8689
          if (!$494) {
           label = 136; //@line 8692
           break;
          } else {
           $$0344$i = $$0344$i << 1; //@line 8695
           $$0345$i = $494; //@line 8695
          }
         }
         if ((label | 0) == 136) {
          if ((HEAP32[5771] | 0) >>> 0 > $492 >>> 0) {
           _abort(); //@line 8702
          } else {
           HEAP32[$492 >> 2] = $354; //@line 8705
           HEAP32[$354 + 24 >> 2] = $$0345$i; //@line 8707
           HEAP32[$354 + 12 >> 2] = $354; //@line 8709
           HEAP32[$354 + 8 >> 2] = $354; //@line 8711
           break;
          }
         } else if ((label | 0) == 139) {
          $501 = $$0345$i + 8 | 0; //@line 8716
          $502 = HEAP32[$501 >> 2] | 0; //@line 8717
          $503 = HEAP32[5771] | 0; //@line 8718
          if ($503 >>> 0 <= $502 >>> 0 & $503 >>> 0 <= $$0345$i >>> 0) {
           HEAP32[$502 + 12 >> 2] = $354; //@line 8724
           HEAP32[$501 >> 2] = $354; //@line 8725
           HEAP32[$354 + 8 >> 2] = $502; //@line 8727
           HEAP32[$354 + 12 >> 2] = $$0345$i; //@line 8729
           HEAP32[$354 + 24 >> 2] = 0; //@line 8731
           break;
          } else {
           _abort(); //@line 8734
          }
         }
        }
       } while (0);
       $$0 = $$4$lcssa$i + 8 | 0; //@line 8741
       STACKTOP = sp; //@line 8742
       return $$0 | 0; //@line 8742
      } else {
       $$0197 = $252; //@line 8744
      }
     }
    }
   }
  }
 } while (0);
 $512 = HEAP32[5769] | 0; //@line 8751
 if ($512 >>> 0 >= $$0197 >>> 0) {
  $514 = $512 - $$0197 | 0; //@line 8754
  $515 = HEAP32[5772] | 0; //@line 8755
  if ($514 >>> 0 > 15) {
   $517 = $515 + $$0197 | 0; //@line 8758
   HEAP32[5772] = $517; //@line 8759
   HEAP32[5769] = $514; //@line 8760
   HEAP32[$517 + 4 >> 2] = $514 | 1; //@line 8763
   HEAP32[$515 + $512 >> 2] = $514; //@line 8765
   HEAP32[$515 + 4 >> 2] = $$0197 | 3; //@line 8768
  } else {
   HEAP32[5769] = 0; //@line 8770
   HEAP32[5772] = 0; //@line 8771
   HEAP32[$515 + 4 >> 2] = $512 | 3; //@line 8774
   $526 = $515 + $512 + 4 | 0; //@line 8776
   HEAP32[$526 >> 2] = HEAP32[$526 >> 2] | 1; //@line 8779
  }
  $$0 = $515 + 8 | 0; //@line 8782
  STACKTOP = sp; //@line 8783
  return $$0 | 0; //@line 8783
 }
 $530 = HEAP32[5770] | 0; //@line 8785
 if ($530 >>> 0 > $$0197 >>> 0) {
  $532 = $530 - $$0197 | 0; //@line 8788
  HEAP32[5770] = $532; //@line 8789
  $533 = HEAP32[5773] | 0; //@line 8790
  $534 = $533 + $$0197 | 0; //@line 8791
  HEAP32[5773] = $534; //@line 8792
  HEAP32[$534 + 4 >> 2] = $532 | 1; //@line 8795
  HEAP32[$533 + 4 >> 2] = $$0197 | 3; //@line 8798
  $$0 = $533 + 8 | 0; //@line 8800
  STACKTOP = sp; //@line 8801
  return $$0 | 0; //@line 8801
 }
 if (!(HEAP32[5885] | 0)) {
  HEAP32[5887] = 4096; //@line 8806
  HEAP32[5886] = 4096; //@line 8807
  HEAP32[5888] = -1; //@line 8808
  HEAP32[5889] = -1; //@line 8809
  HEAP32[5890] = 0; //@line 8810
  HEAP32[5878] = 0; //@line 8811
  HEAP32[5885] = $1 & -16 ^ 1431655768; //@line 8815
  $548 = 4096; //@line 8816
 } else {
  $548 = HEAP32[5887] | 0; //@line 8819
 }
 $545 = $$0197 + 48 | 0; //@line 8821
 $546 = $$0197 + 47 | 0; //@line 8822
 $547 = $548 + $546 | 0; //@line 8823
 $549 = 0 - $548 | 0; //@line 8824
 $550 = $547 & $549; //@line 8825
 if ($550 >>> 0 <= $$0197 >>> 0) {
  $$0 = 0; //@line 8828
  STACKTOP = sp; //@line 8829
  return $$0 | 0; //@line 8829
 }
 $552 = HEAP32[5877] | 0; //@line 8831
 if ($552 | 0) {
  $554 = HEAP32[5875] | 0; //@line 8834
  $555 = $554 + $550 | 0; //@line 8835
  if ($555 >>> 0 <= $554 >>> 0 | $555 >>> 0 > $552 >>> 0) {
   $$0 = 0; //@line 8840
   STACKTOP = sp; //@line 8841
   return $$0 | 0; //@line 8841
  }
 }
 L244 : do {
  if (!(HEAP32[5878] & 4)) {
   $561 = HEAP32[5773] | 0; //@line 8849
   L246 : do {
    if (!$561) {
     label = 163; //@line 8853
    } else {
     $$0$i$i = 23516; //@line 8855
     while (1) {
      $563 = HEAP32[$$0$i$i >> 2] | 0; //@line 8857
      if ($563 >>> 0 <= $561 >>> 0) {
       $565 = $$0$i$i + 4 | 0; //@line 8860
       if (($563 + (HEAP32[$565 >> 2] | 0) | 0) >>> 0 > $561 >>> 0) {
        break;
       }
      }
      $570 = HEAP32[$$0$i$i + 8 >> 2] | 0; //@line 8869
      if (!$570) {
       label = 163; //@line 8872
       break L246;
      } else {
       $$0$i$i = $570; //@line 8875
      }
     }
     $595 = $547 - $530 & $549; //@line 8879
     if ($595 >>> 0 < 2147483647) {
      $597 = _sbrk($595 | 0) | 0; //@line 8882
      if (($597 | 0) == ((HEAP32[$$0$i$i >> 2] | 0) + (HEAP32[$565 >> 2] | 0) | 0)) {
       if (($597 | 0) == (-1 | 0)) {
        $$2234243136$i = $595; //@line 8890
       } else {
        $$723947$i = $595; //@line 8892
        $$748$i = $597; //@line 8892
        label = 180; //@line 8893
        break L244;
       }
      } else {
       $$2247$ph$i = $597; //@line 8897
       $$2253$ph$i = $595; //@line 8897
       label = 171; //@line 8898
      }
     } else {
      $$2234243136$i = 0; //@line 8901
     }
    }
   } while (0);
   do {
    if ((label | 0) == 163) {
     $572 = _sbrk(0) | 0; //@line 8907
     if (($572 | 0) == (-1 | 0)) {
      $$2234243136$i = 0; //@line 8910
     } else {
      $574 = $572; //@line 8912
      $575 = HEAP32[5886] | 0; //@line 8913
      $576 = $575 + -1 | 0; //@line 8914
      $$$i = (($576 & $574 | 0) == 0 ? 0 : ($576 + $574 & 0 - $575) - $574 | 0) + $550 | 0; //@line 8922
      $584 = HEAP32[5875] | 0; //@line 8923
      $585 = $$$i + $584 | 0; //@line 8924
      if ($$$i >>> 0 > $$0197 >>> 0 & $$$i >>> 0 < 2147483647) {
       $588 = HEAP32[5877] | 0; //@line 8929
       if ($588 | 0) {
        if ($585 >>> 0 <= $584 >>> 0 | $585 >>> 0 > $588 >>> 0) {
         $$2234243136$i = 0; //@line 8936
         break;
        }
       }
       $592 = _sbrk($$$i | 0) | 0; //@line 8940
       if (($592 | 0) == ($572 | 0)) {
        $$723947$i = $$$i; //@line 8943
        $$748$i = $572; //@line 8943
        label = 180; //@line 8944
        break L244;
       } else {
        $$2247$ph$i = $592; //@line 8947
        $$2253$ph$i = $$$i; //@line 8947
        label = 171; //@line 8948
       }
      } else {
       $$2234243136$i = 0; //@line 8951
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 171) {
     $603 = 0 - $$2253$ph$i | 0; //@line 8958
     if (!($545 >>> 0 > $$2253$ph$i >>> 0 & ($$2253$ph$i >>> 0 < 2147483647 & ($$2247$ph$i | 0) != (-1 | 0)))) {
      if (($$2247$ph$i | 0) == (-1 | 0)) {
       $$2234243136$i = 0; //@line 8967
       break;
      } else {
       $$723947$i = $$2253$ph$i; //@line 8970
       $$748$i = $$2247$ph$i; //@line 8970
       label = 180; //@line 8971
       break L244;
      }
     }
     $607 = HEAP32[5887] | 0; //@line 8975
     $611 = $546 - $$2253$ph$i + $607 & 0 - $607; //@line 8979
     if ($611 >>> 0 >= 2147483647) {
      $$723947$i = $$2253$ph$i; //@line 8982
      $$748$i = $$2247$ph$i; //@line 8982
      label = 180; //@line 8983
      break L244;
     }
     if ((_sbrk($611 | 0) | 0) == (-1 | 0)) {
      _sbrk($603 | 0) | 0; //@line 8989
      $$2234243136$i = 0; //@line 8990
      break;
     } else {
      $$723947$i = $611 + $$2253$ph$i | 0; //@line 8994
      $$748$i = $$2247$ph$i; //@line 8994
      label = 180; //@line 8995
      break L244;
     }
    }
   } while (0);
   HEAP32[5878] = HEAP32[5878] | 4; //@line 9002
   $$4236$i = $$2234243136$i; //@line 9003
   label = 178; //@line 9004
  } else {
   $$4236$i = 0; //@line 9006
   label = 178; //@line 9007
  }
 } while (0);
 if ((label | 0) == 178) {
  if ($550 >>> 0 < 2147483647) {
   $620 = _sbrk($550 | 0) | 0; //@line 9013
   $621 = _sbrk(0) | 0; //@line 9014
   $627 = $621 - $620 | 0; //@line 9022
   $629 = $627 >>> 0 > ($$0197 + 40 | 0) >>> 0; //@line 9024
   if (!(($620 | 0) == (-1 | 0) | $629 ^ 1 | $620 >>> 0 < $621 >>> 0 & (($620 | 0) != (-1 | 0) & ($621 | 0) != (-1 | 0)) ^ 1)) {
    $$723947$i = $629 ? $627 : $$4236$i; //@line 9032
    $$748$i = $620; //@line 9032
    label = 180; //@line 9033
   }
  }
 }
 if ((label | 0) == 180) {
  $633 = (HEAP32[5875] | 0) + $$723947$i | 0; //@line 9039
  HEAP32[5875] = $633; //@line 9040
  if ($633 >>> 0 > (HEAP32[5876] | 0) >>> 0) {
   HEAP32[5876] = $633; //@line 9044
  }
  $636 = HEAP32[5773] | 0; //@line 9046
  do {
   if (!$636) {
    $638 = HEAP32[5771] | 0; //@line 9050
    if (($638 | 0) == 0 | $$748$i >>> 0 < $638 >>> 0) {
     HEAP32[5771] = $$748$i; //@line 9055
    }
    HEAP32[5879] = $$748$i; //@line 9057
    HEAP32[5880] = $$723947$i; //@line 9058
    HEAP32[5882] = 0; //@line 9059
    HEAP32[5776] = HEAP32[5885]; //@line 9061
    HEAP32[5775] = -1; //@line 9062
    HEAP32[5780] = 23108; //@line 9063
    HEAP32[5779] = 23108; //@line 9064
    HEAP32[5782] = 23116; //@line 9065
    HEAP32[5781] = 23116; //@line 9066
    HEAP32[5784] = 23124; //@line 9067
    HEAP32[5783] = 23124; //@line 9068
    HEAP32[5786] = 23132; //@line 9069
    HEAP32[5785] = 23132; //@line 9070
    HEAP32[5788] = 23140; //@line 9071
    HEAP32[5787] = 23140; //@line 9072
    HEAP32[5790] = 23148; //@line 9073
    HEAP32[5789] = 23148; //@line 9074
    HEAP32[5792] = 23156; //@line 9075
    HEAP32[5791] = 23156; //@line 9076
    HEAP32[5794] = 23164; //@line 9077
    HEAP32[5793] = 23164; //@line 9078
    HEAP32[5796] = 23172; //@line 9079
    HEAP32[5795] = 23172; //@line 9080
    HEAP32[5798] = 23180; //@line 9081
    HEAP32[5797] = 23180; //@line 9082
    HEAP32[5800] = 23188; //@line 9083
    HEAP32[5799] = 23188; //@line 9084
    HEAP32[5802] = 23196; //@line 9085
    HEAP32[5801] = 23196; //@line 9086
    HEAP32[5804] = 23204; //@line 9087
    HEAP32[5803] = 23204; //@line 9088
    HEAP32[5806] = 23212; //@line 9089
    HEAP32[5805] = 23212; //@line 9090
    HEAP32[5808] = 23220; //@line 9091
    HEAP32[5807] = 23220; //@line 9092
    HEAP32[5810] = 23228; //@line 9093
    HEAP32[5809] = 23228; //@line 9094
    HEAP32[5812] = 23236; //@line 9095
    HEAP32[5811] = 23236; //@line 9096
    HEAP32[5814] = 23244; //@line 9097
    HEAP32[5813] = 23244; //@line 9098
    HEAP32[5816] = 23252; //@line 9099
    HEAP32[5815] = 23252; //@line 9100
    HEAP32[5818] = 23260; //@line 9101
    HEAP32[5817] = 23260; //@line 9102
    HEAP32[5820] = 23268; //@line 9103
    HEAP32[5819] = 23268; //@line 9104
    HEAP32[5822] = 23276; //@line 9105
    HEAP32[5821] = 23276; //@line 9106
    HEAP32[5824] = 23284; //@line 9107
    HEAP32[5823] = 23284; //@line 9108
    HEAP32[5826] = 23292; //@line 9109
    HEAP32[5825] = 23292; //@line 9110
    HEAP32[5828] = 23300; //@line 9111
    HEAP32[5827] = 23300; //@line 9112
    HEAP32[5830] = 23308; //@line 9113
    HEAP32[5829] = 23308; //@line 9114
    HEAP32[5832] = 23316; //@line 9115
    HEAP32[5831] = 23316; //@line 9116
    HEAP32[5834] = 23324; //@line 9117
    HEAP32[5833] = 23324; //@line 9118
    HEAP32[5836] = 23332; //@line 9119
    HEAP32[5835] = 23332; //@line 9120
    HEAP32[5838] = 23340; //@line 9121
    HEAP32[5837] = 23340; //@line 9122
    HEAP32[5840] = 23348; //@line 9123
    HEAP32[5839] = 23348; //@line 9124
    HEAP32[5842] = 23356; //@line 9125
    HEAP32[5841] = 23356; //@line 9126
    $642 = $$723947$i + -40 | 0; //@line 9127
    $644 = $$748$i + 8 | 0; //@line 9129
    $649 = ($644 & 7 | 0) == 0 ? 0 : 0 - $644 & 7; //@line 9134
    $650 = $$748$i + $649 | 0; //@line 9135
    $651 = $642 - $649 | 0; //@line 9136
    HEAP32[5773] = $650; //@line 9137
    HEAP32[5770] = $651; //@line 9138
    HEAP32[$650 + 4 >> 2] = $651 | 1; //@line 9141
    HEAP32[$$748$i + $642 + 4 >> 2] = 40; //@line 9144
    HEAP32[5774] = HEAP32[5889]; //@line 9146
   } else {
    $$024367$i = 23516; //@line 9148
    while (1) {
     $657 = HEAP32[$$024367$i >> 2] | 0; //@line 9150
     $658 = $$024367$i + 4 | 0; //@line 9151
     $659 = HEAP32[$658 >> 2] | 0; //@line 9152
     if (($$748$i | 0) == ($657 + $659 | 0)) {
      label = 188; //@line 9156
      break;
     }
     $663 = HEAP32[$$024367$i + 8 >> 2] | 0; //@line 9160
     if (!$663) {
      break;
     } else {
      $$024367$i = $663; //@line 9165
     }
    }
    if ((label | 0) == 188) {
     if (!(HEAP32[$$024367$i + 12 >> 2] & 8)) {
      if ($$748$i >>> 0 > $636 >>> 0 & $657 >>> 0 <= $636 >>> 0) {
       HEAP32[$658 >> 2] = $659 + $$723947$i; //@line 9179
       $673 = (HEAP32[5770] | 0) + $$723947$i | 0; //@line 9181
       $675 = $636 + 8 | 0; //@line 9183
       $680 = ($675 & 7 | 0) == 0 ? 0 : 0 - $675 & 7; //@line 9188
       $681 = $636 + $680 | 0; //@line 9189
       $682 = $673 - $680 | 0; //@line 9190
       HEAP32[5773] = $681; //@line 9191
       HEAP32[5770] = $682; //@line 9192
       HEAP32[$681 + 4 >> 2] = $682 | 1; //@line 9195
       HEAP32[$636 + $673 + 4 >> 2] = 40; //@line 9198
       HEAP32[5774] = HEAP32[5889]; //@line 9200
       break;
      }
     }
    }
    $688 = HEAP32[5771] | 0; //@line 9205
    if ($$748$i >>> 0 < $688 >>> 0) {
     HEAP32[5771] = $$748$i; //@line 9208
     $753 = $$748$i; //@line 9209
    } else {
     $753 = $688; //@line 9211
    }
    $690 = $$748$i + $$723947$i | 0; //@line 9213
    $$124466$i = 23516; //@line 9214
    while (1) {
     if ((HEAP32[$$124466$i >> 2] | 0) == ($690 | 0)) {
      label = 196; //@line 9219
      break;
     }
     $694 = HEAP32[$$124466$i + 8 >> 2] | 0; //@line 9223
     if (!$694) {
      $$0$i$i$i = 23516; //@line 9226
      break;
     } else {
      $$124466$i = $694; //@line 9229
     }
    }
    if ((label | 0) == 196) {
     if (!(HEAP32[$$124466$i + 12 >> 2] & 8)) {
      HEAP32[$$124466$i >> 2] = $$748$i; //@line 9238
      $700 = $$124466$i + 4 | 0; //@line 9239
      HEAP32[$700 >> 2] = (HEAP32[$700 >> 2] | 0) + $$723947$i; //@line 9242
      $704 = $$748$i + 8 | 0; //@line 9244
      $710 = $$748$i + (($704 & 7 | 0) == 0 ? 0 : 0 - $704 & 7) | 0; //@line 9250
      $712 = $690 + 8 | 0; //@line 9252
      $718 = $690 + (($712 & 7 | 0) == 0 ? 0 : 0 - $712 & 7) | 0; //@line 9258
      $722 = $710 + $$0197 | 0; //@line 9262
      $723 = $718 - $710 - $$0197 | 0; //@line 9263
      HEAP32[$710 + 4 >> 2] = $$0197 | 3; //@line 9266
      do {
       if (($636 | 0) == ($718 | 0)) {
        $728 = (HEAP32[5770] | 0) + $723 | 0; //@line 9271
        HEAP32[5770] = $728; //@line 9272
        HEAP32[5773] = $722; //@line 9273
        HEAP32[$722 + 4 >> 2] = $728 | 1; //@line 9276
       } else {
        if ((HEAP32[5772] | 0) == ($718 | 0)) {
         $734 = (HEAP32[5769] | 0) + $723 | 0; //@line 9282
         HEAP32[5769] = $734; //@line 9283
         HEAP32[5772] = $722; //@line 9284
         HEAP32[$722 + 4 >> 2] = $734 | 1; //@line 9287
         HEAP32[$722 + $734 >> 2] = $734; //@line 9289
         break;
        }
        $739 = HEAP32[$718 + 4 >> 2] | 0; //@line 9293
        if (($739 & 3 | 0) == 1) {
         $742 = $739 & -8; //@line 9297
         $743 = $739 >>> 3; //@line 9298
         L311 : do {
          if ($739 >>> 0 < 256) {
           $746 = HEAP32[$718 + 8 >> 2] | 0; //@line 9303
           $748 = HEAP32[$718 + 12 >> 2] | 0; //@line 9305
           $750 = 23108 + ($743 << 1 << 2) | 0; //@line 9307
           do {
            if (($746 | 0) != ($750 | 0)) {
             if ($753 >>> 0 > $746 >>> 0) {
              _abort(); //@line 9313
             }
             if ((HEAP32[$746 + 12 >> 2] | 0) == ($718 | 0)) {
              break;
             }
             _abort(); //@line 9322
            }
           } while (0);
           if (($748 | 0) == ($746 | 0)) {
            HEAP32[5767] = HEAP32[5767] & ~(1 << $743); //@line 9332
            break;
           }
           do {
            if (($748 | 0) == ($750 | 0)) {
             $$pre$phi11$i$iZ2D = $748 + 8 | 0; //@line 9339
            } else {
             if ($753 >>> 0 > $748 >>> 0) {
              _abort(); //@line 9343
             }
             $764 = $748 + 8 | 0; //@line 9346
             if ((HEAP32[$764 >> 2] | 0) == ($718 | 0)) {
              $$pre$phi11$i$iZ2D = $764; //@line 9350
              break;
             }
             _abort(); //@line 9353
            }
           } while (0);
           HEAP32[$746 + 12 >> 2] = $748; //@line 9358
           HEAP32[$$pre$phi11$i$iZ2D >> 2] = $746; //@line 9359
          } else {
           $769 = HEAP32[$718 + 24 >> 2] | 0; //@line 9362
           $771 = HEAP32[$718 + 12 >> 2] | 0; //@line 9364
           do {
            if (($771 | 0) == ($718 | 0)) {
             $782 = $718 + 16 | 0; //@line 9368
             $783 = $782 + 4 | 0; //@line 9369
             $784 = HEAP32[$783 >> 2] | 0; //@line 9370
             if (!$784) {
              $786 = HEAP32[$782 >> 2] | 0; //@line 9373
              if (!$786) {
               $$3$i$i = 0; //@line 9376
               break;
              } else {
               $$1291$i$i = $786; //@line 9379
               $$1293$i$i = $782; //@line 9379
              }
             } else {
              $$1291$i$i = $784; //@line 9382
              $$1293$i$i = $783; //@line 9382
             }
             while (1) {
              $788 = $$1291$i$i + 20 | 0; //@line 9385
              $789 = HEAP32[$788 >> 2] | 0; //@line 9386
              if ($789 | 0) {
               $$1291$i$i = $789; //@line 9389
               $$1293$i$i = $788; //@line 9389
               continue;
              }
              $791 = $$1291$i$i + 16 | 0; //@line 9392
              $792 = HEAP32[$791 >> 2] | 0; //@line 9393
              if (!$792) {
               break;
              } else {
               $$1291$i$i = $792; //@line 9398
               $$1293$i$i = $791; //@line 9398
              }
             }
             if ($753 >>> 0 > $$1293$i$i >>> 0) {
              _abort(); //@line 9403
             } else {
              HEAP32[$$1293$i$i >> 2] = 0; //@line 9406
              $$3$i$i = $$1291$i$i; //@line 9407
              break;
             }
            } else {
             $774 = HEAP32[$718 + 8 >> 2] | 0; //@line 9412
             if ($753 >>> 0 > $774 >>> 0) {
              _abort(); //@line 9415
             }
             $776 = $774 + 12 | 0; //@line 9418
             if ((HEAP32[$776 >> 2] | 0) != ($718 | 0)) {
              _abort(); //@line 9422
             }
             $779 = $771 + 8 | 0; //@line 9425
             if ((HEAP32[$779 >> 2] | 0) == ($718 | 0)) {
              HEAP32[$776 >> 2] = $771; //@line 9429
              HEAP32[$779 >> 2] = $774; //@line 9430
              $$3$i$i = $771; //@line 9431
              break;
             } else {
              _abort(); //@line 9434
             }
            }
           } while (0);
           if (!$769) {
            break;
           }
           $797 = HEAP32[$718 + 28 >> 2] | 0; //@line 9444
           $798 = 23372 + ($797 << 2) | 0; //@line 9445
           do {
            if ((HEAP32[$798 >> 2] | 0) == ($718 | 0)) {
             HEAP32[$798 >> 2] = $$3$i$i; //@line 9450
             if ($$3$i$i | 0) {
              break;
             }
             HEAP32[5768] = HEAP32[5768] & ~(1 << $797); //@line 9459
             break L311;
            } else {
             if ((HEAP32[5771] | 0) >>> 0 > $769 >>> 0) {
              _abort(); //@line 9465
             } else {
              HEAP32[$769 + 16 + (((HEAP32[$769 + 16 >> 2] | 0) != ($718 | 0) & 1) << 2) >> 2] = $$3$i$i; //@line 9473
              if (!$$3$i$i) {
               break L311;
              } else {
               break;
              }
             }
            }
           } while (0);
           $812 = HEAP32[5771] | 0; //@line 9483
           if ($812 >>> 0 > $$3$i$i >>> 0) {
            _abort(); //@line 9486
           }
           HEAP32[$$3$i$i + 24 >> 2] = $769; //@line 9490
           $815 = $718 + 16 | 0; //@line 9491
           $816 = HEAP32[$815 >> 2] | 0; //@line 9492
           do {
            if ($816 | 0) {
             if ($812 >>> 0 > $816 >>> 0) {
              _abort(); //@line 9498
             } else {
              HEAP32[$$3$i$i + 16 >> 2] = $816; //@line 9502
              HEAP32[$816 + 24 >> 2] = $$3$i$i; //@line 9504
              break;
             }
            }
           } while (0);
           $822 = HEAP32[$815 + 4 >> 2] | 0; //@line 9510
           if (!$822) {
            break;
           }
           if ((HEAP32[5771] | 0) >>> 0 > $822 >>> 0) {
            _abort(); //@line 9518
           } else {
            HEAP32[$$3$i$i + 20 >> 2] = $822; //@line 9522
            HEAP32[$822 + 24 >> 2] = $$3$i$i; //@line 9524
            break;
           }
          }
         } while (0);
         $$0$i17$i = $718 + $742 | 0; //@line 9531
         $$0287$i$i = $742 + $723 | 0; //@line 9531
        } else {
         $$0$i17$i = $718; //@line 9533
         $$0287$i$i = $723; //@line 9533
        }
        $830 = $$0$i17$i + 4 | 0; //@line 9535
        HEAP32[$830 >> 2] = HEAP32[$830 >> 2] & -2; //@line 9538
        HEAP32[$722 + 4 >> 2] = $$0287$i$i | 1; //@line 9541
        HEAP32[$722 + $$0287$i$i >> 2] = $$0287$i$i; //@line 9543
        $836 = $$0287$i$i >>> 3; //@line 9544
        if ($$0287$i$i >>> 0 < 256) {
         $839 = 23108 + ($836 << 1 << 2) | 0; //@line 9548
         $840 = HEAP32[5767] | 0; //@line 9549
         $841 = 1 << $836; //@line 9550
         do {
          if (!($840 & $841)) {
           HEAP32[5767] = $840 | $841; //@line 9556
           $$0295$i$i = $839; //@line 9558
           $$pre$phi$i19$iZ2D = $839 + 8 | 0; //@line 9558
          } else {
           $845 = $839 + 8 | 0; //@line 9560
           $846 = HEAP32[$845 >> 2] | 0; //@line 9561
           if ((HEAP32[5771] | 0) >>> 0 <= $846 >>> 0) {
            $$0295$i$i = $846; //@line 9565
            $$pre$phi$i19$iZ2D = $845; //@line 9565
            break;
           }
           _abort(); //@line 9568
          }
         } while (0);
         HEAP32[$$pre$phi$i19$iZ2D >> 2] = $722; //@line 9572
         HEAP32[$$0295$i$i + 12 >> 2] = $722; //@line 9574
         HEAP32[$722 + 8 >> 2] = $$0295$i$i; //@line 9576
         HEAP32[$722 + 12 >> 2] = $839; //@line 9578
         break;
        }
        $852 = $$0287$i$i >>> 8; //@line 9581
        do {
         if (!$852) {
          $$0296$i$i = 0; //@line 9585
         } else {
          if ($$0287$i$i >>> 0 > 16777215) {
           $$0296$i$i = 31; //@line 9589
           break;
          }
          $857 = ($852 + 1048320 | 0) >>> 16 & 8; //@line 9594
          $858 = $852 << $857; //@line 9595
          $861 = ($858 + 520192 | 0) >>> 16 & 4; //@line 9598
          $863 = $858 << $861; //@line 9600
          $866 = ($863 + 245760 | 0) >>> 16 & 2; //@line 9603
          $871 = 14 - ($861 | $857 | $866) + ($863 << $866 >>> 15) | 0; //@line 9608
          $$0296$i$i = $$0287$i$i >>> ($871 + 7 | 0) & 1 | $871 << 1; //@line 9614
         }
        } while (0);
        $877 = 23372 + ($$0296$i$i << 2) | 0; //@line 9617
        HEAP32[$722 + 28 >> 2] = $$0296$i$i; //@line 9619
        $879 = $722 + 16 | 0; //@line 9620
        HEAP32[$879 + 4 >> 2] = 0; //@line 9622
        HEAP32[$879 >> 2] = 0; //@line 9623
        $881 = HEAP32[5768] | 0; //@line 9624
        $882 = 1 << $$0296$i$i; //@line 9625
        if (!($881 & $882)) {
         HEAP32[5768] = $881 | $882; //@line 9630
         HEAP32[$877 >> 2] = $722; //@line 9631
         HEAP32[$722 + 24 >> 2] = $877; //@line 9633
         HEAP32[$722 + 12 >> 2] = $722; //@line 9635
         HEAP32[$722 + 8 >> 2] = $722; //@line 9637
         break;
        }
        $$0288$i$i = $$0287$i$i << (($$0296$i$i | 0) == 31 ? 0 : 25 - ($$0296$i$i >>> 1) | 0); //@line 9646
        $$0289$i$i = HEAP32[$877 >> 2] | 0; //@line 9646
        while (1) {
         if ((HEAP32[$$0289$i$i + 4 >> 2] & -8 | 0) == ($$0287$i$i | 0)) {
          label = 263; //@line 9653
          break;
         }
         $900 = $$0289$i$i + 16 + ($$0288$i$i >>> 31 << 2) | 0; //@line 9657
         $902 = HEAP32[$900 >> 2] | 0; //@line 9659
         if (!$902) {
          label = 260; //@line 9662
          break;
         } else {
          $$0288$i$i = $$0288$i$i << 1; //@line 9665
          $$0289$i$i = $902; //@line 9665
         }
        }
        if ((label | 0) == 260) {
         if ((HEAP32[5771] | 0) >>> 0 > $900 >>> 0) {
          _abort(); //@line 9672
         } else {
          HEAP32[$900 >> 2] = $722; //@line 9675
          HEAP32[$722 + 24 >> 2] = $$0289$i$i; //@line 9677
          HEAP32[$722 + 12 >> 2] = $722; //@line 9679
          HEAP32[$722 + 8 >> 2] = $722; //@line 9681
          break;
         }
        } else if ((label | 0) == 263) {
         $909 = $$0289$i$i + 8 | 0; //@line 9686
         $910 = HEAP32[$909 >> 2] | 0; //@line 9687
         $911 = HEAP32[5771] | 0; //@line 9688
         if ($911 >>> 0 <= $910 >>> 0 & $911 >>> 0 <= $$0289$i$i >>> 0) {
          HEAP32[$910 + 12 >> 2] = $722; //@line 9694
          HEAP32[$909 >> 2] = $722; //@line 9695
          HEAP32[$722 + 8 >> 2] = $910; //@line 9697
          HEAP32[$722 + 12 >> 2] = $$0289$i$i; //@line 9699
          HEAP32[$722 + 24 >> 2] = 0; //@line 9701
          break;
         } else {
          _abort(); //@line 9704
         }
        }
       }
      } while (0);
      $$0 = $710 + 8 | 0; //@line 9711
      STACKTOP = sp; //@line 9712
      return $$0 | 0; //@line 9712
     } else {
      $$0$i$i$i = 23516; //@line 9714
     }
    }
    while (1) {
     $919 = HEAP32[$$0$i$i$i >> 2] | 0; //@line 9718
     if ($919 >>> 0 <= $636 >>> 0) {
      $923 = $919 + (HEAP32[$$0$i$i$i + 4 >> 2] | 0) | 0; //@line 9723
      if ($923 >>> 0 > $636 >>> 0) {
       break;
      }
     }
     $$0$i$i$i = HEAP32[$$0$i$i$i + 8 >> 2] | 0; //@line 9731
    }
    $927 = $923 + -47 | 0; //@line 9733
    $929 = $927 + 8 | 0; //@line 9735
    $935 = $927 + (($929 & 7 | 0) == 0 ? 0 : 0 - $929 & 7) | 0; //@line 9741
    $936 = $636 + 16 | 0; //@line 9742
    $938 = $935 >>> 0 < $936 >>> 0 ? $636 : $935; //@line 9744
    $939 = $938 + 8 | 0; //@line 9745
    $940 = $938 + 24 | 0; //@line 9746
    $941 = $$723947$i + -40 | 0; //@line 9747
    $943 = $$748$i + 8 | 0; //@line 9749
    $948 = ($943 & 7 | 0) == 0 ? 0 : 0 - $943 & 7; //@line 9754
    $949 = $$748$i + $948 | 0; //@line 9755
    $950 = $941 - $948 | 0; //@line 9756
    HEAP32[5773] = $949; //@line 9757
    HEAP32[5770] = $950; //@line 9758
    HEAP32[$949 + 4 >> 2] = $950 | 1; //@line 9761
    HEAP32[$$748$i + $941 + 4 >> 2] = 40; //@line 9764
    HEAP32[5774] = HEAP32[5889]; //@line 9766
    $956 = $938 + 4 | 0; //@line 9767
    HEAP32[$956 >> 2] = 27; //@line 9768
    HEAP32[$939 >> 2] = HEAP32[5879]; //@line 9769
    HEAP32[$939 + 4 >> 2] = HEAP32[5880]; //@line 9769
    HEAP32[$939 + 8 >> 2] = HEAP32[5881]; //@line 9769
    HEAP32[$939 + 12 >> 2] = HEAP32[5882]; //@line 9769
    HEAP32[5879] = $$748$i; //@line 9770
    HEAP32[5880] = $$723947$i; //@line 9771
    HEAP32[5882] = 0; //@line 9772
    HEAP32[5881] = $939; //@line 9773
    $958 = $940; //@line 9774
    do {
     $958$looptemp = $958;
     $958 = $958 + 4 | 0; //@line 9776
     HEAP32[$958 >> 2] = 7; //@line 9777
    } while (($958$looptemp + 8 | 0) >>> 0 < $923 >>> 0);
    if (($938 | 0) != ($636 | 0)) {
     $964 = $938 - $636 | 0; //@line 9790
     HEAP32[$956 >> 2] = HEAP32[$956 >> 2] & -2; //@line 9793
     HEAP32[$636 + 4 >> 2] = $964 | 1; //@line 9796
     HEAP32[$938 >> 2] = $964; //@line 9797
     $969 = $964 >>> 3; //@line 9798
     if ($964 >>> 0 < 256) {
      $972 = 23108 + ($969 << 1 << 2) | 0; //@line 9802
      $973 = HEAP32[5767] | 0; //@line 9803
      $974 = 1 << $969; //@line 9804
      if (!($973 & $974)) {
       HEAP32[5767] = $973 | $974; //@line 9809
       $$0211$i$i = $972; //@line 9811
       $$pre$phi$i$iZ2D = $972 + 8 | 0; //@line 9811
      } else {
       $978 = $972 + 8 | 0; //@line 9813
       $979 = HEAP32[$978 >> 2] | 0; //@line 9814
       if ((HEAP32[5771] | 0) >>> 0 > $979 >>> 0) {
        _abort(); //@line 9818
       } else {
        $$0211$i$i = $979; //@line 9821
        $$pre$phi$i$iZ2D = $978; //@line 9821
       }
      }
      HEAP32[$$pre$phi$i$iZ2D >> 2] = $636; //@line 9824
      HEAP32[$$0211$i$i + 12 >> 2] = $636; //@line 9826
      HEAP32[$636 + 8 >> 2] = $$0211$i$i; //@line 9828
      HEAP32[$636 + 12 >> 2] = $972; //@line 9830
      break;
     }
     $985 = $964 >>> 8; //@line 9833
     if (!$985) {
      $$0212$i$i = 0; //@line 9836
     } else {
      if ($964 >>> 0 > 16777215) {
       $$0212$i$i = 31; //@line 9840
      } else {
       $990 = ($985 + 1048320 | 0) >>> 16 & 8; //@line 9844
       $991 = $985 << $990; //@line 9845
       $994 = ($991 + 520192 | 0) >>> 16 & 4; //@line 9848
       $996 = $991 << $994; //@line 9850
       $999 = ($996 + 245760 | 0) >>> 16 & 2; //@line 9853
       $1004 = 14 - ($994 | $990 | $999) + ($996 << $999 >>> 15) | 0; //@line 9858
       $$0212$i$i = $964 >>> ($1004 + 7 | 0) & 1 | $1004 << 1; //@line 9864
      }
     }
     $1010 = 23372 + ($$0212$i$i << 2) | 0; //@line 9867
     HEAP32[$636 + 28 >> 2] = $$0212$i$i; //@line 9869
     HEAP32[$636 + 20 >> 2] = 0; //@line 9871
     HEAP32[$936 >> 2] = 0; //@line 9872
     $1013 = HEAP32[5768] | 0; //@line 9873
     $1014 = 1 << $$0212$i$i; //@line 9874
     if (!($1013 & $1014)) {
      HEAP32[5768] = $1013 | $1014; //@line 9879
      HEAP32[$1010 >> 2] = $636; //@line 9880
      HEAP32[$636 + 24 >> 2] = $1010; //@line 9882
      HEAP32[$636 + 12 >> 2] = $636; //@line 9884
      HEAP32[$636 + 8 >> 2] = $636; //@line 9886
      break;
     }
     $$0206$i$i = $964 << (($$0212$i$i | 0) == 31 ? 0 : 25 - ($$0212$i$i >>> 1) | 0); //@line 9895
     $$0207$i$i = HEAP32[$1010 >> 2] | 0; //@line 9895
     while (1) {
      if ((HEAP32[$$0207$i$i + 4 >> 2] & -8 | 0) == ($964 | 0)) {
       label = 289; //@line 9902
       break;
      }
      $1032 = $$0207$i$i + 16 + ($$0206$i$i >>> 31 << 2) | 0; //@line 9906
      $1034 = HEAP32[$1032 >> 2] | 0; //@line 9908
      if (!$1034) {
       label = 286; //@line 9911
       break;
      } else {
       $$0206$i$i = $$0206$i$i << 1; //@line 9914
       $$0207$i$i = $1034; //@line 9914
      }
     }
     if ((label | 0) == 286) {
      if ((HEAP32[5771] | 0) >>> 0 > $1032 >>> 0) {
       _abort(); //@line 9921
      } else {
       HEAP32[$1032 >> 2] = $636; //@line 9924
       HEAP32[$636 + 24 >> 2] = $$0207$i$i; //@line 9926
       HEAP32[$636 + 12 >> 2] = $636; //@line 9928
       HEAP32[$636 + 8 >> 2] = $636; //@line 9930
       break;
      }
     } else if ((label | 0) == 289) {
      $1041 = $$0207$i$i + 8 | 0; //@line 9935
      $1042 = HEAP32[$1041 >> 2] | 0; //@line 9936
      $1043 = HEAP32[5771] | 0; //@line 9937
      if ($1043 >>> 0 <= $1042 >>> 0 & $1043 >>> 0 <= $$0207$i$i >>> 0) {
       HEAP32[$1042 + 12 >> 2] = $636; //@line 9943
       HEAP32[$1041 >> 2] = $636; //@line 9944
       HEAP32[$636 + 8 >> 2] = $1042; //@line 9946
       HEAP32[$636 + 12 >> 2] = $$0207$i$i; //@line 9948
       HEAP32[$636 + 24 >> 2] = 0; //@line 9950
       break;
      } else {
       _abort(); //@line 9953
      }
     }
    }
   }
  } while (0);
  $1052 = HEAP32[5770] | 0; //@line 9960
  if ($1052 >>> 0 > $$0197 >>> 0) {
   $1054 = $1052 - $$0197 | 0; //@line 9963
   HEAP32[5770] = $1054; //@line 9964
   $1055 = HEAP32[5773] | 0; //@line 9965
   $1056 = $1055 + $$0197 | 0; //@line 9966
   HEAP32[5773] = $1056; //@line 9967
   HEAP32[$1056 + 4 >> 2] = $1054 | 1; //@line 9970
   HEAP32[$1055 + 4 >> 2] = $$0197 | 3; //@line 9973
   $$0 = $1055 + 8 | 0; //@line 9975
   STACKTOP = sp; //@line 9976
   return $$0 | 0; //@line 9976
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 9980
 $$0 = 0; //@line 9981
 STACKTOP = sp; //@line 9982
 return $$0 | 0; //@line 9982
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$0$be = 0, $$0$i = 0, $$0$i116 = 0, $$0$i118 = 0, $$0107$be = 0, $$0107$lcssa = 0, $$0107131 = 0, $$0109129 = 0, $$0111 = 0, $$0132 = 0, $$1$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $137 = 0, $140 = 0, $145 = 0, $146 = 0, $15 = 0, $152 = 0, $156 = 0, $159 = 0, $16 = 0, $166 = 0, $167 = 0, $17 = 0, $173 = 0, $18 = 0, $19 = 0, $192 = 0, $20 = 0, $202 = 0, $203 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $270 = 0, $271 = 0, $279 = 0, $28 = 0, $281 = 0, $282 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $344 = 0, $345 = 0, $35 = 0, $359 = 0, $36 = 0, $37 = 0, $38 = 0, $380 = 0, $386 = 0, $387 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $449 = 0, $45 = 0, $450 = 0, $459 = 0, $46 = 0, $463 = 0, $467 = 0, $472 = 0, $473 = 0, $477 = 0, $48 = 0, $481 = 0, $483 = 0, $485 = 0, $488 = 0, $489 = 0, $559 = 0, $560 = 0, $567 = 0, $580 = 0, $587 = 0, $59 = 0, $590 = 0, $591 = 0, $60 = 0, $653 = 0, $654 = 0, $661 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $div = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16568
 STACKTOP = STACKTOP + 16 | 0; //@line 16569
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16569
 $8 = sp; //@line 16570
 $9 = sp + 15 | 0; //@line 16571
 $10 = sp + 14 | 0; //@line 16572
 $11 = sp + 13 | 0; //@line 16573
 $12 = sp + 12 | 0; //@line 16574
 $13 = $3 & 255; //@line 16575
 if (($2 & 255) >= ($3 & 255)) {
  $$0107$lcssa = 0; //@line 16578
  STACKTOP = sp; //@line 16579
  return $$0107$lcssa | 0; //@line 16579
 }
 $15 = $5 + 8 | 0; //@line 16581
 $16 = $5 + 16 | 0; //@line 16582
 $17 = $5 + 17 | 0; //@line 16583
 $18 = $8 + 4 | 0; //@line 16584
 $19 = $6 + 60 | 0; //@line 16585
 $20 = $8 + 6 | 0; //@line 16586
 $21 = $6 + 44 | 0; //@line 16587
 $22 = $8 + 5 | 0; //@line 16588
 $23 = $6 + 1 | 0; //@line 16589
 $24 = $8 + 7 | 0; //@line 16590
 $25 = $8 + 8 | 0; //@line 16591
 $26 = $6 + 32 | 0; //@line 16592
 $27 = $8 + 9 | 0; //@line 16593
 $28 = $0 + 3 | 0; //@line 16594
 $29 = $0 + 2 | 0; //@line 16595
 $30 = $6 + 56 | 0; //@line 16596
 $31 = $6 + 58 | 0; //@line 16597
 $32 = $8 + 1 | 0; //@line 16598
 $33 = $8 + 4 | 0; //@line 16599
 $34 = $6 + 40 | 0; //@line 16600
 $35 = $6 + 36 | 0; //@line 16601
 $36 = $6 + 33 | 0; //@line 16602
 $37 = $0 + 1 | 0; //@line 16603
 $38 = $0 + 272 | 0; //@line 16604
 $39 = $4 & 63; //@line 16605
 $40 = $0 + 260 | 0; //@line 16606
 $41 = $8 + 4 | 0; //@line 16607
 $42 = $8 + 8 | 0; //@line 16608
 $43 = $6 + 16 | 0; //@line 16609
 $44 = $6 + 20 | 0; //@line 16610
 $45 = $6 + 45 | 0; //@line 16611
 $46 = $6 + 48 | 0; //@line 16612
 $$0107131 = 0; //@line 16613
 $$0132 = $2; //@line 16613
 L4 : while (1) {
  $48 = $$0132 + 1 << 24 >> 24; //@line 16616
  switch (HEAP8[$1 + ($$0132 & 255) >> 0] | 0) {
  case 2:
   {
    HEAP32[$15 >> 2] = 0; //@line 16621
    HEAP8[$16 >> 0] = HEAP8[$1 + ($48 & 255) >> 0] | 0; //@line 16626
    HEAP8[$17 >> 0] = HEAP8[$1 + ($$0132 + 2 & 255) >> 0] | 0; //@line 16631
    $$0$be = $$0132 + 3 << 24 >> 24; //@line 16632
    $$0107$be = $$0107131; //@line 16632
    break;
   }
  case 3:
   {
    HEAP8[$9 >> 0] = 0; //@line 16636
    HEAP8[$10 >> 0] = 0; //@line 16637
    HEAP8[$11 >> 0] = 0; //@line 16638
    HEAP8[$12 >> 0] = 0; //@line 16639
    $59 = $48 & 255; //@line 16640
    $60 = $59 + -1 | 0; //@line 16641
    HEAP32[$8 >> 2] = $1 + $60; //@line 16643
    HEAP8[$18 >> 0] = $13 - $60; //@line 16646
    HEAP8[$20 >> 0] = HEAP8[$19 >> 0] | 0; //@line 16648
    HEAP8[$22 >> 0] = HEAP8[$21 >> 0] | 0; //@line 16650
    HEAP8[$24 >> 0] = HEAP8[$23 >> 0] | 0; //@line 16652
    HEAP8[$25 >> 0] = HEAP8[$6 >> 0] | 0; //@line 16654
    HEAP8[$27 >> 0] = HEAP8[$26 >> 0] | 0; //@line 16656
    $71 = HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] | 0; //@line 16659
    $AsyncCtx = _emscripten_alloc_async_context(236, sp) | 0; //@line 16660
    $72 = FUNCTION_TABLE_iiiiiii[$71 & 3]($7, $8, $9, $10, $11, $12) | 0; //@line 16661
    if (___async) {
     label = 6; //@line 16664
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16667
    if (($72 & 7) == 7) {
     HEAP8[$23 >> 0] = HEAP8[$9 >> 0] | 0; //@line 16672
     HEAP8[$6 >> 0] = HEAP8[$10 >> 0] | 0; //@line 16674
     HEAP8[$26 >> 0] = HEAP8[$11 >> 0] | 0; //@line 16676
    }
    $137 = HEAP8[$12 >> 0] | 0; //@line 16678
    if (($137 & 255) > 4) {
     $div = ($137 & 255) / 5 | 0; //@line 16681
     $140 = 128 - (HEAPU8[$28 >> 0] | 0) | 0; //@line 16685
     $$0109129 = 0; //@line 16686
     $146 = HEAP8[$29 >> 0] | 0; //@line 16686
     while (1) {
      $145 = $146 & 255; //@line 16688
      if (($140 - $145 | 0) > 1) {
       $152 = $146 + 2 << 24 >> 24; //@line 16695
       HEAP8[$0 + 4 + $145 >> 0] = 3; //@line 16697
       HEAP8[$29 >> 0] = $152; //@line 16698
       HEAP8[($146 + 1 & 255) + ($0 + 4) >> 0] = $72; //@line 16699
       HEAP8[$0 >> 0] = 1; //@line 16700
       $$0$i = 0; //@line 16701
       $661 = $152; //@line 16701
      } else {
       $$0$i = -1010; //@line 16703
       $661 = $146; //@line 16703
      }
      $$0109129 = $$0109129 + 1 << 24 >> 24; //@line 16705
      if (($$0109129 & 255) >= ($div & 255)) {
       $$1$lcssa = $$0$i; //@line 16710
       break;
      } else {
       $146 = $661; //@line 16708
      }
     }
    } else {
     $$1$lcssa = $$0107131; //@line 16715
    }
    $$0$be = $59 + 255 + ($137 & 255) & 255; //@line 16721
    $$0107$be = $$1$lcssa; //@line 16721
    break;
   }
  case 4:
   {
    $156 = $$0132 + 2 << 24 >> 24; //@line 16725
    $159 = HEAP8[$1 + ($48 & 255) >> 0] | 0; //@line 16728
    HEAP8[$30 >> 0] = $159; //@line 16729
    HEAP16[$31 >> 1] = 1 << ($159 & 255); //@line 16733
    $166 = HEAP8[$29 >> 0] | 0; //@line 16737
    $167 = $166 & 255; //@line 16738
    if ((128 - (HEAPU8[$28 >> 0] | 0) | 0) > ($167 | 0)) {
     HEAP8[$29 >> 0] = $166 + 1 << 24 >> 24; //@line 16743
     HEAP8[$0 + 4 + $167 >> 0] = 4; //@line 16744
     HEAP8[$0 >> 0] = 1; //@line 16745
     $$0$be = $156; //@line 16746
     $$0107$be = 0; //@line 16746
    } else {
     $$0$be = $156; //@line 16748
     $$0107$be = -1010; //@line 16748
    }
    break;
   }
  case 5:
   {
    $173 = HEAP8[$1 + ($48 & 255) >> 0] | 0; //@line 16755
    HEAP8[$32 >> 0] = ($173 & 255) >>> 4 & 7; //@line 16760
    HEAP8[$8 >> 0] = $173 & 15; //@line 16762
    $192 = $$0132 + 5 << 24 >> 24; //@line 16776
    HEAP32[$33 >> 2] = (HEAPU8[$1 + ($$0132 + 4 & 255) >> 0] << 16 | (HEAPU8[$1 + ($$0132 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0132 + 2 & 255) >> 0])) * 100; //@line 16784
    $202 = HEAP32[(HEAP32[$7 >> 2] | 0) + 40 >> 2] | 0; //@line 16787
    $AsyncCtx3 = _emscripten_alloc_async_context(232, sp) | 0; //@line 16788
    $203 = FUNCTION_TABLE_iii[$202 & 15]($7, $8) | 0; //@line 16789
    if (___async) {
     label = 18; //@line 16792
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16795
    if (($203 & 7) == 7) {
     HEAP8[$34 >> 0] = HEAP8[$8 >> 0] | 0; //@line 16800
     HEAP32[$35 >> 2] = HEAP32[$33 >> 2]; //@line 16802
     HEAP8[$36 >> 0] = HEAP8[$32 >> 0] | 0; //@line 16804
    }
    $270 = HEAP8[$29 >> 0] | 0; //@line 16809
    $271 = $270 & 255; //@line 16810
    if ((128 - (HEAPU8[$28 >> 0] | 0) - $271 | 0) > 1) {
     HEAP8[$0 + 4 + $271 >> 0] = 5; //@line 16816
     HEAP8[$29 >> 0] = $270 + 2 << 24 >> 24; //@line 16818
     HEAP8[($270 + 1 & 255) + ($0 + 4) >> 0] = $203; //@line 16821
     HEAP8[$37 >> 0] = 1; //@line 16822
     HEAP8[$0 >> 0] = 1; //@line 16823
     $$0$i116 = 0; //@line 16824
    } else {
     $$0$i116 = -1010; //@line 16826
    }
    $$0$be = $192; //@line 16828
    $$0107$be = $$0$i116; //@line 16828
    break;
   }
  case 6:
   {
    $279 = HEAP32[$38 >> 2] | 0; //@line 16832
    if (!$279) {
     $$0111 = -1; //@line 16835
    } else {
     $281 = HEAP32[$279 >> 2] | 0; //@line 16837
     $AsyncCtx6 = _emscripten_alloc_async_context(232, sp) | 0; //@line 16838
     $282 = FUNCTION_TABLE_ii[$281 & 15]($40) | 0; //@line 16839
     if (___async) {
      label = 26; //@line 16842
      break L4;
     }
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 16845
     $$0111 = $282; //@line 16846
    }
    $344 = HEAP8[$29 >> 0] | 0; //@line 16851
    $345 = $344 & 255; //@line 16852
    if ((128 - (HEAPU8[$28 >> 0] | 0) - $345 | 0) > 2) {
     HEAP8[$0 + 4 + $345 >> 0] = 6; //@line 16858
     HEAP8[($344 + 1 & 255) + ($0 + 4) >> 0] = $$0111; //@line 16862
     HEAP8[$29 >> 0] = $344 + 3 << 24 >> 24; //@line 16864
     HEAP8[($344 + 2 & 255) + ($0 + 4) >> 0] = $39; //@line 16867
     HEAP8[$0 >> 0] = 1; //@line 16868
     $$0$be = $48; //@line 16869
     $$0107$be = 0; //@line 16869
    } else {
     $$0$be = $48; //@line 16871
     $$0107$be = -1010; //@line 16871
    }
    break;
   }
  case 7:
   {
    $359 = HEAP8[$1 + ($48 & 255) >> 0] | 0; //@line 16879
    HEAP32[$8 >> 2] = (HEAPU8[$1 + ($$0132 + 4 & 255) >> 0] << 16 | (HEAPU8[$1 + ($$0132 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0132 + 2 & 255) >> 0])) * 100; //@line 16900
    HEAP32[$41 >> 2] = 0; //@line 16901
    $380 = $$0132 + 6 << 24 >> 24; //@line 16902
    HEAP8[$42 >> 0] = HEAP8[$1 + ($$0132 + 5 & 255) >> 0] | 0; //@line 16906
    $386 = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0; //@line 16909
    $AsyncCtx10 = _emscripten_alloc_async_context(228, sp) | 0; //@line 16910
    $387 = FUNCTION_TABLE_iiii[$386 & 31]($7, $359, $8) | 0; //@line 16911
    if (___async) {
     label = 31; //@line 16914
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx10 | 0); //@line 16917
    $449 = HEAP8[$29 >> 0] | 0; //@line 16921
    $450 = $449 & 255; //@line 16922
    if ((128 - (HEAPU8[$28 >> 0] | 0) - $450 | 0) > 1) {
     HEAP8[$0 + 4 + $450 >> 0] = 7; //@line 16931
     HEAP8[$29 >> 0] = $449 + 2 << 24 >> 24; //@line 16932
     HEAP8[($449 + 1 & 255) + ($0 + 4) >> 0] = $387; //@line 16933
     HEAP8[$0 >> 0] = 1; //@line 16934
     $$0$i118 = 0; //@line 16935
    } else {
     $$0$i118 = -1010; //@line 16937
    }
    $$0$be = $380; //@line 16939
    $$0107$be = $$0$i118; //@line 16939
    break;
   }
  case 8:
   {
    $459 = $$0132 + 2 << 24 >> 24; //@line 16943
    $463 = HEAP8[$1 + ($48 & 255) >> 0] & 15; //@line 16947
    $467 = ($463 + ($463 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 16952
    HEAP32[$43 >> 2] = $467; //@line 16953
    HEAP32[$44 >> 2] = $467 + 1e3; //@line 16955
    $472 = HEAP8[$29 >> 0] | 0; //@line 16959
    $473 = $472 & 255; //@line 16960
    if ((128 - (HEAPU8[$28 >> 0] | 0) | 0) > ($473 | 0)) {
     HEAP8[$29 >> 0] = $472 + 1 << 24 >> 24; //@line 16965
     HEAP8[$0 + 4 + $473 >> 0] = 8; //@line 16966
     HEAP8[$37 >> 0] = 1; //@line 16967
     HEAP8[$0 >> 0] = 1; //@line 16968
     $$0$be = $459; //@line 16969
     $$0107$be = 0; //@line 16969
    } else {
     $$0$be = $459; //@line 16971
     $$0107$be = -1010; //@line 16971
    }
    break;
   }
  case 9:
   {
    $477 = $$0132 + 2 << 24 >> 24; //@line 16976
    $481 = HEAPU8[$1 + ($48 & 255) >> 0] | 0; //@line 16980
    $483 = $481 >>> 5 & 1; //@line 16983
    $485 = $481 >>> 4 & 1; //@line 16986
    $488 = HEAP32[(HEAP32[$7 >> 2] | 0) + 44 >> 2] | 0; //@line 16989
    $AsyncCtx14 = _emscripten_alloc_async_context(248, sp) | 0; //@line 16990
    $489 = FUNCTION_TABLE_iiii[$488 & 31]($7, $485, $483) | 0; //@line 16991
    if (___async) {
     label = 39; //@line 16994
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 16997
    if ($489) {
     HEAP8[$21 >> 0] = $485; //@line 17000
     HEAP8[$45 >> 0] = $483; //@line 17001
     HEAPF32[$46 >> 2] = +(HEAPU8[13555 + ($481 & 15) >> 0] | 0); //@line 17005
     $559 = HEAP8[$29 >> 0] | 0; //@line 17009
     $560 = $559 & 255; //@line 17010
     if ((128 - (HEAPU8[$28 >> 0] | 0) | 0) > ($560 | 0)) {
      HEAP8[$29 >> 0] = $559 + 1 << 24 >> 24; //@line 17015
      HEAP8[$0 + 4 + $560 >> 0] = 9; //@line 17016
      HEAP8[$0 >> 0] = 1; //@line 17017
      $$0$be = $477; //@line 17018
      $$0107$be = 0; //@line 17018
     } else {
      $$0$be = $477; //@line 17020
      $$0107$be = -1010; //@line 17020
     }
    } else {
     $$0$be = $477; //@line 17023
     $$0107$be = $$0107131; //@line 17023
    }
    break;
   }
  case 10:
   {
    $567 = HEAP8[$1 + ($48 & 255) >> 0] | 0; //@line 17031
    $580 = $$0132 + 5 << 24 >> 24; //@line 17044
    $587 = (HEAPU8[$1 + ($$0132 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0132 + 2 & 255) >> 0] | HEAPU8[$1 + ($$0132 + 4 & 255) >> 0] << 16) * 100 | 0; //@line 17051
    $590 = HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] | 0; //@line 17054
    $AsyncCtx18 = _emscripten_alloc_async_context(232, sp) | 0; //@line 17055
    $591 = FUNCTION_TABLE_iiii[$590 & 31]($7, $567, $587) | 0; //@line 17056
    if (___async) {
     label = 44; //@line 17059
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx18 | 0); //@line 17062
    $653 = HEAP8[$29 >> 0] | 0; //@line 17066
    $654 = $653 & 255; //@line 17067
    if ((128 - (HEAPU8[$28 >> 0] | 0) | 0) > ($654 | 0)) {
     HEAP8[$0 + 4 + $654 >> 0] = 10; //@line 17072
     HEAP8[$29 >> 0] = $653 + 2 << 24 >> 24; //@line 17074
     HEAP8[($653 + 1 & 255) + ($0 + 4) >> 0] = $591; //@line 17077
     HEAP8[$37 >> 0] = 1; //@line 17078
     HEAP8[$0 >> 0] = 1; //@line 17079
     $$0$be = $580; //@line 17080
     $$0107$be = 0; //@line 17080
    } else {
     $$0$be = $580; //@line 17082
     $$0107$be = -1010; //@line 17082
    }
    break;
   }
  default:
   {
    $$0$be = $48; //@line 17087
    $$0107$be = -1013; //@line 17087
   }
  }
  if (($$0$be & 255) < ($3 & 255)) {
   $$0107131 = $$0107$be; //@line 17092
   $$0132 = $$0$be; //@line 17092
  } else {
   $$0107$lcssa = $$0107$be; //@line 17094
   label = 47; //@line 17095
   break;
  }
 }
 if ((label | 0) == 6) {
  HEAP32[$AsyncCtx >> 2] = 475; //@line 17100
  HEAP32[$AsyncCtx + 4 >> 2] = $27; //@line 17102
  HEAP8[$AsyncCtx + 8 >> 0] = $39; //@line 17104
  HEAP32[$AsyncCtx + 12 >> 2] = $38; //@line 17106
  HEAP32[$AsyncCtx + 16 >> 2] = $8; //@line 17108
  HEAP32[$AsyncCtx + 20 >> 2] = $26; //@line 17110
  HEAP32[$AsyncCtx + 24 >> 2] = $8; //@line 17112
  HEAP32[$AsyncCtx + 28 >> 2] = $37; //@line 17114
  HEAP32[$AsyncCtx + 32 >> 2] = $40; //@line 17116
  HEAP32[$AsyncCtx + 36 >> 2] = $25; //@line 17118
  HEAP32[$AsyncCtx + 40 >> 2] = $8; //@line 17120
  HEAP32[$AsyncCtx + 44 >> 2] = $16; //@line 17122
  HEAP32[$AsyncCtx + 48 >> 2] = $36; //@line 17124
  HEAP32[$AsyncCtx + 52 >> 2] = $8; //@line 17126
  HEAP32[$AsyncCtx + 56 >> 2] = $17; //@line 17128
  HEAP32[$AsyncCtx + 60 >> 2] = $35; //@line 17130
  HEAP32[$AsyncCtx + 64 >> 2] = $6; //@line 17132
  HEAP32[$AsyncCtx + 68 >> 2] = $41; //@line 17134
  HEAP32[$AsyncCtx + 72 >> 2] = $1; //@line 17136
  HEAP32[$AsyncCtx + 76 >> 2] = $0; //@line 17138
  HEAP32[$AsyncCtx + 80 >> 2] = $34; //@line 17140
  HEAP8[$AsyncCtx + 84 >> 0] = $3; //@line 17142
  HEAP8[$AsyncCtx + 85 >> 0] = $2; //@line 17144
  HEAP32[$AsyncCtx + 88 >> 2] = $24; //@line 17146
  HEAP32[$AsyncCtx + 92 >> 2] = $42; //@line 17148
  HEAP32[$AsyncCtx + 96 >> 2] = $15; //@line 17150
  HEAP32[$AsyncCtx + 100 >> 2] = $13; //@line 17152
  HEAP32[$AsyncCtx + 104 >> 2] = $7; //@line 17154
  HEAP32[$AsyncCtx + 108 >> 2] = $7; //@line 17156
  HEAP32[$AsyncCtx + 112 >> 2] = $23; //@line 17158
  HEAP32[$AsyncCtx + 116 >> 2] = $7; //@line 17160
  HEAP32[$AsyncCtx + 120 >> 2] = $33; //@line 17162
  HEAP32[$AsyncCtx + 124 >> 2] = $43; //@line 17164
  HEAP32[$AsyncCtx + 128 >> 2] = $22; //@line 17166
  HEAP32[$AsyncCtx + 132 >> 2] = $8; //@line 17168
  HEAP32[$AsyncCtx + 136 >> 2] = $21; //@line 17170
  HEAP32[$AsyncCtx + 140 >> 2] = $32; //@line 17172
  HEAP32[$AsyncCtx + 144 >> 2] = $44; //@line 17174
  HEAP32[$AsyncCtx + 148 >> 2] = $20; //@line 17176
  HEAP32[$AsyncCtx + 152 >> 2] = $7; //@line 17178
  HEAP32[$AsyncCtx + 156 >> 2] = $8; //@line 17180
  HEAP32[$AsyncCtx + 160 >> 2] = $19; //@line 17182
  HEAP32[$AsyncCtx + 164 >> 2] = $7; //@line 17184
  HEAP32[$AsyncCtx + 168 >> 2] = $45; //@line 17186
  HEAP32[$AsyncCtx + 172 >> 2] = $31; //@line 17188
  HEAP32[$AsyncCtx + 176 >> 2] = $46; //@line 17190
  HEAP32[$AsyncCtx + 180 >> 2] = $8; //@line 17192
  HEAP32[$AsyncCtx + 184 >> 2] = $9; //@line 17194
  HEAP32[$AsyncCtx + 188 >> 2] = $30; //@line 17196
  HEAP32[$AsyncCtx + 192 >> 2] = $7; //@line 17198
  HEAP32[$AsyncCtx + 196 >> 2] = $0; //@line 17200
  HEAP32[$AsyncCtx + 200 >> 2] = $8; //@line 17202
  HEAP32[$AsyncCtx + 204 >> 2] = $29; //@line 17204
  HEAP32[$AsyncCtx + 208 >> 2] = $18; //@line 17206
  HEAP32[$AsyncCtx + 212 >> 2] = $12; //@line 17208
  HEAP32[$AsyncCtx + 216 >> 2] = $10; //@line 17210
  HEAP32[$AsyncCtx + 220 >> 2] = $59; //@line 17212
  HEAP32[$AsyncCtx + 224 >> 2] = $$0107131; //@line 17214
  HEAP32[$AsyncCtx + 228 >> 2] = $11; //@line 17216
  HEAP32[$AsyncCtx + 232 >> 2] = $28; //@line 17218
  sp = STACKTOP; //@line 17219
  STACKTOP = sp; //@line 17220
  return 0; //@line 17220
 } else if ((label | 0) == 18) {
  HEAP32[$AsyncCtx3 >> 2] = 476; //@line 17223
  HEAP32[$AsyncCtx3 + 4 >> 2] = $27; //@line 17225
  HEAP8[$AsyncCtx3 + 8 >> 0] = $39; //@line 17227
  HEAP32[$AsyncCtx3 + 12 >> 2] = $38; //@line 17229
  HEAP32[$AsyncCtx3 + 16 >> 2] = $8; //@line 17231
  HEAP32[$AsyncCtx3 + 20 >> 2] = $26; //@line 17233
  HEAP32[$AsyncCtx3 + 24 >> 2] = $8; //@line 17235
  HEAP32[$AsyncCtx3 + 28 >> 2] = $37; //@line 17237
  HEAP32[$AsyncCtx3 + 32 >> 2] = $40; //@line 17239
  HEAP32[$AsyncCtx3 + 36 >> 2] = $25; //@line 17241
  HEAP32[$AsyncCtx3 + 40 >> 2] = $8; //@line 17243
  HEAP32[$AsyncCtx3 + 44 >> 2] = $16; //@line 17245
  HEAP32[$AsyncCtx3 + 48 >> 2] = $36; //@line 17247
  HEAP32[$AsyncCtx3 + 52 >> 2] = $8; //@line 17249
  HEAP32[$AsyncCtx3 + 56 >> 2] = $17; //@line 17251
  HEAP32[$AsyncCtx3 + 60 >> 2] = $35; //@line 17253
  HEAP32[$AsyncCtx3 + 64 >> 2] = $6; //@line 17255
  HEAP32[$AsyncCtx3 + 68 >> 2] = $41; //@line 17257
  HEAP32[$AsyncCtx3 + 72 >> 2] = $1; //@line 17259
  HEAP32[$AsyncCtx3 + 76 >> 2] = $0; //@line 17261
  HEAP32[$AsyncCtx3 + 80 >> 2] = $34; //@line 17263
  HEAP8[$AsyncCtx3 + 84 >> 0] = $3; //@line 17265
  HEAP8[$AsyncCtx3 + 85 >> 0] = $2; //@line 17267
  HEAP32[$AsyncCtx3 + 88 >> 2] = $24; //@line 17269
  HEAP32[$AsyncCtx3 + 92 >> 2] = $42; //@line 17271
  HEAP32[$AsyncCtx3 + 96 >> 2] = $15; //@line 17273
  HEAP32[$AsyncCtx3 + 100 >> 2] = $13; //@line 17275
  HEAP32[$AsyncCtx3 + 104 >> 2] = $7; //@line 17277
  HEAP32[$AsyncCtx3 + 108 >> 2] = $7; //@line 17279
  HEAP32[$AsyncCtx3 + 112 >> 2] = $23; //@line 17281
  HEAP32[$AsyncCtx3 + 116 >> 2] = $7; //@line 17283
  HEAP32[$AsyncCtx3 + 120 >> 2] = $33; //@line 17285
  HEAP32[$AsyncCtx3 + 124 >> 2] = $43; //@line 17287
  HEAP32[$AsyncCtx3 + 128 >> 2] = $22; //@line 17289
  HEAP32[$AsyncCtx3 + 132 >> 2] = $8; //@line 17291
  HEAP32[$AsyncCtx3 + 136 >> 2] = $21; //@line 17293
  HEAP32[$AsyncCtx3 + 140 >> 2] = $32; //@line 17295
  HEAP32[$AsyncCtx3 + 144 >> 2] = $44; //@line 17297
  HEAP32[$AsyncCtx3 + 148 >> 2] = $20; //@line 17299
  HEAP32[$AsyncCtx3 + 152 >> 2] = $7; //@line 17301
  HEAP32[$AsyncCtx3 + 156 >> 2] = $8; //@line 17303
  HEAP32[$AsyncCtx3 + 160 >> 2] = $19; //@line 17305
  HEAP32[$AsyncCtx3 + 164 >> 2] = $7; //@line 17307
  HEAP32[$AsyncCtx3 + 168 >> 2] = $45; //@line 17309
  HEAP32[$AsyncCtx3 + 172 >> 2] = $31; //@line 17311
  HEAP32[$AsyncCtx3 + 176 >> 2] = $46; //@line 17313
  HEAP32[$AsyncCtx3 + 180 >> 2] = $8; //@line 17315
  HEAP32[$AsyncCtx3 + 184 >> 2] = $9; //@line 17317
  HEAP32[$AsyncCtx3 + 188 >> 2] = $30; //@line 17319
  HEAP32[$AsyncCtx3 + 192 >> 2] = $7; //@line 17321
  HEAP32[$AsyncCtx3 + 196 >> 2] = $0; //@line 17323
  HEAP32[$AsyncCtx3 + 200 >> 2] = $8; //@line 17325
  HEAP32[$AsyncCtx3 + 204 >> 2] = $29; //@line 17327
  HEAP32[$AsyncCtx3 + 208 >> 2] = $18; //@line 17329
  HEAP8[$AsyncCtx3 + 212 >> 0] = $192; //@line 17331
  HEAP32[$AsyncCtx3 + 216 >> 2] = $12; //@line 17333
  HEAP32[$AsyncCtx3 + 220 >> 2] = $10; //@line 17335
  HEAP32[$AsyncCtx3 + 224 >> 2] = $11; //@line 17337
  HEAP32[$AsyncCtx3 + 228 >> 2] = $28; //@line 17339
  sp = STACKTOP; //@line 17340
  STACKTOP = sp; //@line 17341
  return 0; //@line 17341
 } else if ((label | 0) == 26) {
  HEAP32[$AsyncCtx6 >> 2] = 477; //@line 17344
  HEAP32[$AsyncCtx6 + 4 >> 2] = $27; //@line 17346
  HEAP8[$AsyncCtx6 + 8 >> 0] = $39; //@line 17348
  HEAP32[$AsyncCtx6 + 12 >> 2] = $38; //@line 17350
  HEAP32[$AsyncCtx6 + 16 >> 2] = $8; //@line 17352
  HEAP32[$AsyncCtx6 + 20 >> 2] = $26; //@line 17354
  HEAP32[$AsyncCtx6 + 24 >> 2] = $8; //@line 17356
  HEAP32[$AsyncCtx6 + 28 >> 2] = $37; //@line 17358
  HEAP32[$AsyncCtx6 + 32 >> 2] = $40; //@line 17360
  HEAP32[$AsyncCtx6 + 36 >> 2] = $25; //@line 17362
  HEAP32[$AsyncCtx6 + 40 >> 2] = $8; //@line 17364
  HEAP32[$AsyncCtx6 + 44 >> 2] = $16; //@line 17366
  HEAP32[$AsyncCtx6 + 48 >> 2] = $36; //@line 17368
  HEAP32[$AsyncCtx6 + 52 >> 2] = $8; //@line 17370
  HEAP32[$AsyncCtx6 + 56 >> 2] = $17; //@line 17372
  HEAP32[$AsyncCtx6 + 60 >> 2] = $35; //@line 17374
  HEAP32[$AsyncCtx6 + 64 >> 2] = $6; //@line 17376
  HEAP32[$AsyncCtx6 + 68 >> 2] = $41; //@line 17378
  HEAP8[$AsyncCtx6 + 72 >> 0] = $48; //@line 17380
  HEAP32[$AsyncCtx6 + 76 >> 2] = $1; //@line 17382
  HEAP32[$AsyncCtx6 + 80 >> 2] = $0; //@line 17384
  HEAP32[$AsyncCtx6 + 84 >> 2] = $34; //@line 17386
  HEAP8[$AsyncCtx6 + 88 >> 0] = $3; //@line 17388
  HEAP8[$AsyncCtx6 + 89 >> 0] = $2; //@line 17390
  HEAP32[$AsyncCtx6 + 92 >> 2] = $24; //@line 17392
  HEAP32[$AsyncCtx6 + 96 >> 2] = $42; //@line 17394
  HEAP32[$AsyncCtx6 + 100 >> 2] = $15; //@line 17396
  HEAP32[$AsyncCtx6 + 104 >> 2] = $13; //@line 17398
  HEAP32[$AsyncCtx6 + 108 >> 2] = $7; //@line 17400
  HEAP32[$AsyncCtx6 + 112 >> 2] = $7; //@line 17402
  HEAP32[$AsyncCtx6 + 116 >> 2] = $23; //@line 17404
  HEAP32[$AsyncCtx6 + 120 >> 2] = $7; //@line 17406
  HEAP32[$AsyncCtx6 + 124 >> 2] = $33; //@line 17408
  HEAP32[$AsyncCtx6 + 128 >> 2] = $43; //@line 17410
  HEAP32[$AsyncCtx6 + 132 >> 2] = $22; //@line 17412
  HEAP32[$AsyncCtx6 + 136 >> 2] = $8; //@line 17414
  HEAP32[$AsyncCtx6 + 140 >> 2] = $21; //@line 17416
  HEAP32[$AsyncCtx6 + 144 >> 2] = $32; //@line 17418
  HEAP32[$AsyncCtx6 + 148 >> 2] = $44; //@line 17420
  HEAP32[$AsyncCtx6 + 152 >> 2] = $20; //@line 17422
  HEAP32[$AsyncCtx6 + 156 >> 2] = $7; //@line 17424
  HEAP32[$AsyncCtx6 + 160 >> 2] = $8; //@line 17426
  HEAP32[$AsyncCtx6 + 164 >> 2] = $19; //@line 17428
  HEAP32[$AsyncCtx6 + 168 >> 2] = $7; //@line 17430
  HEAP32[$AsyncCtx6 + 172 >> 2] = $45; //@line 17432
  HEAP32[$AsyncCtx6 + 176 >> 2] = $31; //@line 17434
  HEAP32[$AsyncCtx6 + 180 >> 2] = $46; //@line 17436
  HEAP32[$AsyncCtx6 + 184 >> 2] = $8; //@line 17438
  HEAP32[$AsyncCtx6 + 188 >> 2] = $9; //@line 17440
  HEAP32[$AsyncCtx6 + 192 >> 2] = $30; //@line 17442
  HEAP32[$AsyncCtx6 + 196 >> 2] = $7; //@line 17444
  HEAP32[$AsyncCtx6 + 200 >> 2] = $0; //@line 17446
  HEAP32[$AsyncCtx6 + 204 >> 2] = $8; //@line 17448
  HEAP32[$AsyncCtx6 + 208 >> 2] = $29; //@line 17450
  HEAP32[$AsyncCtx6 + 212 >> 2] = $18; //@line 17452
  HEAP32[$AsyncCtx6 + 216 >> 2] = $12; //@line 17454
  HEAP32[$AsyncCtx6 + 220 >> 2] = $10; //@line 17456
  HEAP32[$AsyncCtx6 + 224 >> 2] = $11; //@line 17458
  HEAP32[$AsyncCtx6 + 228 >> 2] = $28; //@line 17460
  sp = STACKTOP; //@line 17461
  STACKTOP = sp; //@line 17462
  return 0; //@line 17462
 } else if ((label | 0) == 31) {
  HEAP32[$AsyncCtx10 >> 2] = 478; //@line 17465
  HEAP32[$AsyncCtx10 + 4 >> 2] = $27; //@line 17467
  HEAP8[$AsyncCtx10 + 8 >> 0] = $39; //@line 17469
  HEAP32[$AsyncCtx10 + 12 >> 2] = $38; //@line 17471
  HEAP32[$AsyncCtx10 + 16 >> 2] = $8; //@line 17473
  HEAP32[$AsyncCtx10 + 20 >> 2] = $26; //@line 17475
  HEAP32[$AsyncCtx10 + 24 >> 2] = $8; //@line 17477
  HEAP32[$AsyncCtx10 + 28 >> 2] = $37; //@line 17479
  HEAP32[$AsyncCtx10 + 32 >> 2] = $40; //@line 17481
  HEAP32[$AsyncCtx10 + 36 >> 2] = $25; //@line 17483
  HEAP32[$AsyncCtx10 + 40 >> 2] = $8; //@line 17485
  HEAP32[$AsyncCtx10 + 44 >> 2] = $16; //@line 17487
  HEAP32[$AsyncCtx10 + 48 >> 2] = $36; //@line 17489
  HEAP32[$AsyncCtx10 + 52 >> 2] = $8; //@line 17491
  HEAP32[$AsyncCtx10 + 56 >> 2] = $17; //@line 17493
  HEAP32[$AsyncCtx10 + 60 >> 2] = $35; //@line 17495
  HEAP32[$AsyncCtx10 + 64 >> 2] = $6; //@line 17497
  HEAP32[$AsyncCtx10 + 68 >> 2] = $41; //@line 17499
  HEAP32[$AsyncCtx10 + 72 >> 2] = $1; //@line 17501
  HEAP32[$AsyncCtx10 + 76 >> 2] = $0; //@line 17503
  HEAP32[$AsyncCtx10 + 80 >> 2] = $34; //@line 17505
  HEAP8[$AsyncCtx10 + 84 >> 0] = $380; //@line 17507
  HEAP8[$AsyncCtx10 + 85 >> 0] = $2; //@line 17509
  HEAP8[$AsyncCtx10 + 86 >> 0] = $3; //@line 17511
  HEAP32[$AsyncCtx10 + 88 >> 2] = $42; //@line 17513
  HEAP32[$AsyncCtx10 + 92 >> 2] = $15; //@line 17515
  HEAP32[$AsyncCtx10 + 96 >> 2] = $24; //@line 17517
  HEAP32[$AsyncCtx10 + 100 >> 2] = $13; //@line 17519
  HEAP32[$AsyncCtx10 + 104 >> 2] = $7; //@line 17521
  HEAP32[$AsyncCtx10 + 108 >> 2] = $7; //@line 17523
  HEAP32[$AsyncCtx10 + 112 >> 2] = $23; //@line 17525
  HEAP32[$AsyncCtx10 + 116 >> 2] = $7; //@line 17527
  HEAP32[$AsyncCtx10 + 120 >> 2] = $33; //@line 17529
  HEAP32[$AsyncCtx10 + 124 >> 2] = $43; //@line 17531
  HEAP32[$AsyncCtx10 + 128 >> 2] = $22; //@line 17533
  HEAP32[$AsyncCtx10 + 132 >> 2] = $8; //@line 17535
  HEAP32[$AsyncCtx10 + 136 >> 2] = $21; //@line 17537
  HEAP32[$AsyncCtx10 + 140 >> 2] = $32; //@line 17539
  HEAP32[$AsyncCtx10 + 144 >> 2] = $44; //@line 17541
  HEAP32[$AsyncCtx10 + 148 >> 2] = $20; //@line 17543
  HEAP32[$AsyncCtx10 + 152 >> 2] = $7; //@line 17545
  HEAP32[$AsyncCtx10 + 156 >> 2] = $8; //@line 17547
  HEAP32[$AsyncCtx10 + 160 >> 2] = $19; //@line 17549
  HEAP32[$AsyncCtx10 + 164 >> 2] = $7; //@line 17551
  HEAP32[$AsyncCtx10 + 168 >> 2] = $45; //@line 17553
  HEAP32[$AsyncCtx10 + 172 >> 2] = $31; //@line 17555
  HEAP32[$AsyncCtx10 + 176 >> 2] = $46; //@line 17557
  HEAP32[$AsyncCtx10 + 180 >> 2] = $8; //@line 17559
  HEAP32[$AsyncCtx10 + 184 >> 2] = $9; //@line 17561
  HEAP32[$AsyncCtx10 + 188 >> 2] = $30; //@line 17563
  HEAP32[$AsyncCtx10 + 192 >> 2] = $7; //@line 17565
  HEAP32[$AsyncCtx10 + 196 >> 2] = $0; //@line 17567
  HEAP32[$AsyncCtx10 + 200 >> 2] = $8; //@line 17569
  HEAP32[$AsyncCtx10 + 204 >> 2] = $29; //@line 17571
  HEAP32[$AsyncCtx10 + 208 >> 2] = $18; //@line 17573
  HEAP32[$AsyncCtx10 + 212 >> 2] = $12; //@line 17575
  HEAP32[$AsyncCtx10 + 216 >> 2] = $10; //@line 17577
  HEAP32[$AsyncCtx10 + 220 >> 2] = $11; //@line 17579
  HEAP32[$AsyncCtx10 + 224 >> 2] = $28; //@line 17581
  sp = STACKTOP; //@line 17582
  STACKTOP = sp; //@line 17583
  return 0; //@line 17583
 } else if ((label | 0) == 39) {
  HEAP32[$AsyncCtx14 >> 2] = 479; //@line 17586
  HEAP32[$AsyncCtx14 + 4 >> 2] = $27; //@line 17588
  HEAP8[$AsyncCtx14 + 8 >> 0] = $39; //@line 17590
  HEAP32[$AsyncCtx14 + 12 >> 2] = $38; //@line 17592
  HEAP32[$AsyncCtx14 + 16 >> 2] = $8; //@line 17594
  HEAP32[$AsyncCtx14 + 20 >> 2] = $26; //@line 17596
  HEAP32[$AsyncCtx14 + 24 >> 2] = $481; //@line 17598
  HEAP32[$AsyncCtx14 + 28 >> 2] = $8; //@line 17600
  HEAP32[$AsyncCtx14 + 32 >> 2] = $37; //@line 17602
  HEAP32[$AsyncCtx14 + 36 >> 2] = $40; //@line 17604
  HEAP32[$AsyncCtx14 + 40 >> 2] = $25; //@line 17606
  HEAP32[$AsyncCtx14 + 44 >> 2] = $8; //@line 17608
  HEAP32[$AsyncCtx14 + 48 >> 2] = $16; //@line 17610
  HEAP32[$AsyncCtx14 + 52 >> 2] = $36; //@line 17612
  HEAP32[$AsyncCtx14 + 56 >> 2] = $8; //@line 17614
  HEAP32[$AsyncCtx14 + 60 >> 2] = $17; //@line 17616
  HEAP32[$AsyncCtx14 + 64 >> 2] = $35; //@line 17618
  HEAP32[$AsyncCtx14 + 68 >> 2] = $6; //@line 17620
  HEAP8[$AsyncCtx14 + 72 >> 0] = $483; //@line 17622
  HEAP32[$AsyncCtx14 + 76 >> 2] = $41; //@line 17624
  HEAP32[$AsyncCtx14 + 80 >> 2] = $1; //@line 17626
  HEAP32[$AsyncCtx14 + 84 >> 2] = $0; //@line 17628
  HEAP32[$AsyncCtx14 + 88 >> 2] = $34; //@line 17630
  HEAP8[$AsyncCtx14 + 92 >> 0] = $3; //@line 17632
  HEAP8[$AsyncCtx14 + 93 >> 0] = $2; //@line 17634
  HEAP32[$AsyncCtx14 + 96 >> 2] = $15; //@line 17636
  HEAP32[$AsyncCtx14 + 100 >> 2] = $42; //@line 17638
  HEAP32[$AsyncCtx14 + 104 >> 2] = $24; //@line 17640
  HEAP32[$AsyncCtx14 + 108 >> 2] = $13; //@line 17642
  HEAP8[$AsyncCtx14 + 112 >> 0] = $477; //@line 17644
  HEAP32[$AsyncCtx14 + 116 >> 2] = $7; //@line 17646
  HEAP32[$AsyncCtx14 + 120 >> 2] = $7; //@line 17648
  HEAP32[$AsyncCtx14 + 124 >> 2] = $23; //@line 17650
  HEAP32[$AsyncCtx14 + 128 >> 2] = $7; //@line 17652
  HEAP32[$AsyncCtx14 + 132 >> 2] = $33; //@line 17654
  HEAP32[$AsyncCtx14 + 136 >> 2] = $43; //@line 17656
  HEAP32[$AsyncCtx14 + 140 >> 2] = $22; //@line 17658
  HEAP32[$AsyncCtx14 + 144 >> 2] = $8; //@line 17660
  HEAP32[$AsyncCtx14 + 148 >> 2] = $21; //@line 17662
  HEAP32[$AsyncCtx14 + 152 >> 2] = $32; //@line 17664
  HEAP8[$AsyncCtx14 + 156 >> 0] = $485; //@line 17666
  HEAP32[$AsyncCtx14 + 160 >> 2] = $44; //@line 17668
  HEAP32[$AsyncCtx14 + 164 >> 2] = $20; //@line 17670
  HEAP32[$AsyncCtx14 + 168 >> 2] = $7; //@line 17672
  HEAP32[$AsyncCtx14 + 172 >> 2] = $8; //@line 17674
  HEAP32[$AsyncCtx14 + 176 >> 2] = $19; //@line 17676
  HEAP32[$AsyncCtx14 + 180 >> 2] = $7; //@line 17678
  HEAP32[$AsyncCtx14 + 184 >> 2] = $45; //@line 17680
  HEAP32[$AsyncCtx14 + 188 >> 2] = $31; //@line 17682
  HEAP32[$AsyncCtx14 + 192 >> 2] = $46; //@line 17684
  HEAP32[$AsyncCtx14 + 196 >> 2] = $8; //@line 17686
  HEAP32[$AsyncCtx14 + 200 >> 2] = $9; //@line 17688
  HEAP32[$AsyncCtx14 + 204 >> 2] = $30; //@line 17690
  HEAP32[$AsyncCtx14 + 208 >> 2] = $7; //@line 17692
  HEAP32[$AsyncCtx14 + 212 >> 2] = $0; //@line 17694
  HEAP32[$AsyncCtx14 + 216 >> 2] = $8; //@line 17696
  HEAP32[$AsyncCtx14 + 220 >> 2] = $29; //@line 17698
  HEAP32[$AsyncCtx14 + 224 >> 2] = $18; //@line 17700
  HEAP32[$AsyncCtx14 + 228 >> 2] = $12; //@line 17702
  HEAP32[$AsyncCtx14 + 232 >> 2] = $10; //@line 17704
  HEAP32[$AsyncCtx14 + 236 >> 2] = $$0107131; //@line 17706
  HEAP32[$AsyncCtx14 + 240 >> 2] = $11; //@line 17708
  HEAP32[$AsyncCtx14 + 244 >> 2] = $28; //@line 17710
  sp = STACKTOP; //@line 17711
  STACKTOP = sp; //@line 17712
  return 0; //@line 17712
 } else if ((label | 0) == 44) {
  HEAP32[$AsyncCtx18 >> 2] = 480; //@line 17715
  HEAP32[$AsyncCtx18 + 4 >> 2] = $27; //@line 17717
  HEAP8[$AsyncCtx18 + 8 >> 0] = $39; //@line 17719
  HEAP32[$AsyncCtx18 + 12 >> 2] = $38; //@line 17721
  HEAP32[$AsyncCtx18 + 16 >> 2] = $8; //@line 17723
  HEAP32[$AsyncCtx18 + 20 >> 2] = $26; //@line 17725
  HEAP32[$AsyncCtx18 + 24 >> 2] = $8; //@line 17727
  HEAP32[$AsyncCtx18 + 28 >> 2] = $37; //@line 17729
  HEAP32[$AsyncCtx18 + 32 >> 2] = $40; //@line 17731
  HEAP32[$AsyncCtx18 + 36 >> 2] = $25; //@line 17733
  HEAP32[$AsyncCtx18 + 40 >> 2] = $8; //@line 17735
  HEAP32[$AsyncCtx18 + 44 >> 2] = $16; //@line 17737
  HEAP32[$AsyncCtx18 + 48 >> 2] = $36; //@line 17739
  HEAP32[$AsyncCtx18 + 52 >> 2] = $8; //@line 17741
  HEAP32[$AsyncCtx18 + 56 >> 2] = $17; //@line 17743
  HEAP32[$AsyncCtx18 + 60 >> 2] = $35; //@line 17745
  HEAP32[$AsyncCtx18 + 64 >> 2] = $6; //@line 17747
  HEAP32[$AsyncCtx18 + 68 >> 2] = $41; //@line 17749
  HEAP32[$AsyncCtx18 + 72 >> 2] = $1; //@line 17751
  HEAP32[$AsyncCtx18 + 76 >> 2] = $0; //@line 17753
  HEAP32[$AsyncCtx18 + 80 >> 2] = $34; //@line 17755
  HEAP8[$AsyncCtx18 + 84 >> 0] = $3; //@line 17757
  HEAP8[$AsyncCtx18 + 85 >> 0] = $2; //@line 17759
  HEAP32[$AsyncCtx18 + 88 >> 2] = $15; //@line 17761
  HEAP32[$AsyncCtx18 + 92 >> 2] = $42; //@line 17763
  HEAP32[$AsyncCtx18 + 96 >> 2] = $24; //@line 17765
  HEAP32[$AsyncCtx18 + 100 >> 2] = $13; //@line 17767
  HEAP32[$AsyncCtx18 + 104 >> 2] = $7; //@line 17769
  HEAP32[$AsyncCtx18 + 108 >> 2] = $7; //@line 17771
  HEAP32[$AsyncCtx18 + 112 >> 2] = $23; //@line 17773
  HEAP32[$AsyncCtx18 + 116 >> 2] = $7; //@line 17775
  HEAP32[$AsyncCtx18 + 120 >> 2] = $33; //@line 17777
  HEAP32[$AsyncCtx18 + 124 >> 2] = $43; //@line 17779
  HEAP32[$AsyncCtx18 + 128 >> 2] = $22; //@line 17781
  HEAP32[$AsyncCtx18 + 132 >> 2] = $8; //@line 17783
  HEAP32[$AsyncCtx18 + 136 >> 2] = $21; //@line 17785
  HEAP32[$AsyncCtx18 + 140 >> 2] = $32; //@line 17787
  HEAP32[$AsyncCtx18 + 144 >> 2] = $44; //@line 17789
  HEAP32[$AsyncCtx18 + 148 >> 2] = $20; //@line 17791
  HEAP32[$AsyncCtx18 + 152 >> 2] = $7; //@line 17793
  HEAP32[$AsyncCtx18 + 156 >> 2] = $8; //@line 17795
  HEAP32[$AsyncCtx18 + 160 >> 2] = $19; //@line 17797
  HEAP8[$AsyncCtx18 + 164 >> 0] = $580; //@line 17799
  HEAP32[$AsyncCtx18 + 168 >> 2] = $7; //@line 17801
  HEAP32[$AsyncCtx18 + 172 >> 2] = $45; //@line 17803
  HEAP32[$AsyncCtx18 + 176 >> 2] = $31; //@line 17805
  HEAP32[$AsyncCtx18 + 180 >> 2] = $46; //@line 17807
  HEAP32[$AsyncCtx18 + 184 >> 2] = $8; //@line 17809
  HEAP32[$AsyncCtx18 + 188 >> 2] = $9; //@line 17811
  HEAP32[$AsyncCtx18 + 192 >> 2] = $30; //@line 17813
  HEAP32[$AsyncCtx18 + 196 >> 2] = $7; //@line 17815
  HEAP32[$AsyncCtx18 + 200 >> 2] = $0; //@line 17817
  HEAP32[$AsyncCtx18 + 204 >> 2] = $8; //@line 17819
  HEAP32[$AsyncCtx18 + 208 >> 2] = $29; //@line 17821
  HEAP32[$AsyncCtx18 + 212 >> 2] = $18; //@line 17823
  HEAP32[$AsyncCtx18 + 216 >> 2] = $12; //@line 17825
  HEAP32[$AsyncCtx18 + 220 >> 2] = $10; //@line 17827
  HEAP32[$AsyncCtx18 + 224 >> 2] = $11; //@line 17829
  HEAP32[$AsyncCtx18 + 228 >> 2] = $28; //@line 17831
  sp = STACKTOP; //@line 17832
  STACKTOP = sp; //@line 17833
  return 0; //@line 17833
 } else if ((label | 0) == 47) {
  STACKTOP = sp; //@line 17836
  return $$0107$lcssa | 0; //@line 17836
 }
 return 0; //@line 17838
}
function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$3484 = 0, $$$3484700 = 0, $$$4502 = 0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488655 = 0, $$0488657 = 0, $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$5605 = 0, $$561 = 0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa675 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre693 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $101 = 0, $104 = 0, $106 = 0, $11 = 0, $113 = 0, $116 = 0, $124 = 0, $125 = 0, $128 = 0, $130 = 0, $131 = 0, $132 = 0, $138 = 0, $140 = 0, $144 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $160 = 0, $161 = 0, $162 = 0, $174 = 0, $185 = 0, $189 = 0, $190 = 0, $193 = 0, $198 = 0, $199 = 0, $201 = 0, $209 = 0, $212 = 0, $213 = 0, $215 = 0, $217 = 0, $218 = 0, $221 = 0, $225 = 0, $230 = 0, $233 = 0, $236 = 0, $238 = 0, $240 = 0, $242 = 0, $247 = 0, $248 = 0, $251 = 0, $253 = 0, $256 = 0, $259 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $284 = 0, $285 = 0, $289 = 0, $292 = 0, $294 = 0, $296 = 0, $300 = 0, $303 = 0, $304 = 0, $308 = 0, $31 = 0, $318 = 0, $323 = 0, $326 = 0, $327 = 0, $328 = 0, $330 = 0, $335 = 0, $347 = 0, $35 = 0.0, $351 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $369 = 0, $373 = 0, $375 = 0, $378 = 0, $381 = 0, $39 = 0, $41 = 0, $44 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $66 = 0, $68 = 0, $7 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13740
 STACKTOP = STACKTOP + 560 | 0; //@line 13741
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560); //@line 13741
 $6 = sp + 8 | 0; //@line 13742
 $7 = sp; //@line 13743
 $8 = sp + 524 | 0; //@line 13744
 $9 = $8; //@line 13745
 $10 = sp + 512 | 0; //@line 13746
 HEAP32[$7 >> 2] = 0; //@line 13747
 $11 = $10 + 12 | 0; //@line 13748
 ___DOUBLE_BITS_677($1) | 0; //@line 13749
 if ((tempRet0 | 0) < 0) {
  $$0471 = -$1; //@line 13754
  $$0520 = 1; //@line 13754
  $$0521 = 15674; //@line 13754
 } else {
  $$0471 = $1; //@line 13765
  $$0520 = ($4 & 2049 | 0) != 0 & 1; //@line 13765
  $$0521 = ($4 & 2048 | 0) == 0 ? ($4 & 1 | 0) == 0 ? 15675 : 15680 : 15677; //@line 13765
 }
 ___DOUBLE_BITS_677($$0471) | 0; //@line 13767
 do {
  if (0 == 0 & (tempRet0 & 2146435072 | 0) == 2146435072) {
   $27 = ($5 & 32 | 0) != 0; //@line 13776
   $31 = $$0520 + 3 | 0; //@line 13781
   _pad_676($0, 32, $2, $31, $4 & -65537); //@line 13783
   _out_670($0, $$0521, $$0520); //@line 13784
   _out_670($0, $$0471 != $$0471 | 0.0 != 0.0 ? $27 ? 15701 : 15705 : $27 ? 15693 : 15697, 3); //@line 13785
   _pad_676($0, 32, $2, $31, $4 ^ 8192); //@line 13787
   $$sink560 = $31; //@line 13788
  } else {
   $35 = +_frexpl($$0471, $7) * 2.0; //@line 13791
   $36 = $35 != 0.0; //@line 13792
   if ($36) {
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1; //@line 13796
   }
   $39 = $5 | 32; //@line 13798
   if (($39 | 0) == 97) {
    $41 = $5 & 32; //@line 13801
    $$0521$ = ($41 | 0) == 0 ? $$0521 : $$0521 + 9 | 0; //@line 13804
    $44 = $$0520 | 2; //@line 13805
    $46 = 12 - $3 | 0; //@line 13807
    do {
     if ($3 >>> 0 > 11 | ($46 | 0) == 0) {
      $$1472 = $35; //@line 13812
     } else {
      $$0509585 = 8.0; //@line 13814
      $$1508586 = $46; //@line 13814
      do {
       $$1508586 = $$1508586 + -1 | 0; //@line 13816
       $$0509585 = $$0509585 * 16.0; //@line 13817
      } while (($$1508586 | 0) != 0);
      if ((HEAP8[$$0521$ >> 0] | 0) == 45) {
       $$1472 = -($$0509585 + (-$35 - $$0509585)); //@line 13832
       break;
      } else {
       $$1472 = $35 + $$0509585 - $$0509585; //@line 13837
       break;
      }
     }
    } while (0);
    $60 = HEAP32[$7 >> 2] | 0; //@line 13842
    $63 = ($60 | 0) < 0 ? 0 - $60 | 0 : $60; //@line 13845
    $66 = _fmt_u($63, (($63 | 0) < 0) << 31 >> 31, $11) | 0; //@line 13848
    if (($66 | 0) == ($11 | 0)) {
     $68 = $10 + 11 | 0; //@line 13851
     HEAP8[$68 >> 0] = 48; //@line 13852
     $$0511 = $68; //@line 13853
    } else {
     $$0511 = $66; //@line 13855
    }
    HEAP8[$$0511 + -1 >> 0] = ($60 >> 31 & 2) + 43; //@line 13862
    $76 = $$0511 + -2 | 0; //@line 13865
    HEAP8[$76 >> 0] = $5 + 15; //@line 13866
    $77 = ($3 | 0) < 1; //@line 13867
    $79 = ($4 & 8 | 0) == 0; //@line 13869
    $$0523 = $8; //@line 13870
    $$2473 = $$1472; //@line 13870
    while (1) {
     $80 = ~~$$2473; //@line 13872
     $86 = $$0523 + 1 | 0; //@line 13878
     HEAP8[$$0523 >> 0] = $41 | HEAPU8[15709 + $80 >> 0]; //@line 13879
     $$2473 = ($$2473 - +($80 | 0)) * 16.0; //@line 13882
     if (($86 - $9 | 0) == 1) {
      if ($79 & ($77 & $$2473 == 0.0)) {
       $$1524 = $86; //@line 13891
      } else {
       HEAP8[$86 >> 0] = 46; //@line 13894
       $$1524 = $$0523 + 2 | 0; //@line 13895
      }
     } else {
      $$1524 = $86; //@line 13898
     }
     if (!($$2473 != 0.0)) {
      break;
     } else {
      $$0523 = $$1524; //@line 13902
     }
    }
    $$pre693 = $$1524; //@line 13908
    if (!$3) {
     label = 24; //@line 13910
    } else {
     if ((-2 - $9 + $$pre693 | 0) < ($3 | 0)) {
      $$pre$phi691Z2D = $$pre693 - $9 | 0; //@line 13918
      $$sink = $3 + 2 | 0; //@line 13918
     } else {
      label = 24; //@line 13920
     }
    }
    if ((label | 0) == 24) {
     $101 = $$pre693 - $9 | 0; //@line 13924
     $$pre$phi691Z2D = $101; //@line 13925
     $$sink = $101; //@line 13925
    }
    $104 = $11 - $76 | 0; //@line 13929
    $106 = $104 + $44 + $$sink | 0; //@line 13931
    _pad_676($0, 32, $2, $106, $4); //@line 13932
    _out_670($0, $$0521$, $44); //@line 13933
    _pad_676($0, 48, $2, $106, $4 ^ 65536); //@line 13935
    _out_670($0, $8, $$pre$phi691Z2D); //@line 13936
    _pad_676($0, 48, $$sink - $$pre$phi691Z2D | 0, 0, 0); //@line 13938
    _out_670($0, $76, $104); //@line 13939
    _pad_676($0, 32, $2, $106, $4 ^ 8192); //@line 13941
    $$sink560 = $106; //@line 13942
    break;
   }
   $$540 = ($3 | 0) < 0 ? 6 : $3; //@line 13946
   if ($36) {
    $113 = (HEAP32[$7 >> 2] | 0) + -28 | 0; //@line 13950
    HEAP32[$7 >> 2] = $113; //@line 13951
    $$3 = $35 * 268435456.0; //@line 13952
    $$pr = $113; //@line 13952
   } else {
    $$3 = $35; //@line 13955
    $$pr = HEAP32[$7 >> 2] | 0; //@line 13955
   }
   $$561 = ($$pr | 0) < 0 ? $6 : $6 + 288 | 0; //@line 13959
   $$0498 = $$561; //@line 13960
   $$4 = $$3; //@line 13960
   do {
    $116 = ~~$$4 >>> 0; //@line 13962
    HEAP32[$$0498 >> 2] = $116; //@line 13963
    $$0498 = $$0498 + 4 | 0; //@line 13964
    $$4 = ($$4 - +($116 >>> 0)) * 1.0e9; //@line 13967
   } while ($$4 != 0.0);
   if (($$pr | 0) > 0) {
    $$1482663 = $$561; //@line 13977
    $$1499662 = $$0498; //@line 13977
    $124 = $$pr; //@line 13977
    while (1) {
     $125 = ($124 | 0) < 29 ? $124 : 29; //@line 13980
     $$0488655 = $$1499662 + -4 | 0; //@line 13981
     if ($$0488655 >>> 0 < $$1482663 >>> 0) {
      $$2483$ph = $$1482663; //@line 13984
     } else {
      $$0488657 = $$0488655; //@line 13986
      $$0497656 = 0; //@line 13986
      do {
       $128 = _bitshift64Shl(HEAP32[$$0488657 >> 2] | 0, 0, $125 | 0) | 0; //@line 13989
       $130 = _i64Add($128 | 0, tempRet0 | 0, $$0497656 | 0, 0) | 0; //@line 13991
       $131 = tempRet0; //@line 13992
       $132 = ___uremdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 13993
       HEAP32[$$0488657 >> 2] = $132; //@line 13995
       $$0497656 = ___udivdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 13996
       $$0488657 = $$0488657 + -4 | 0; //@line 13998
      } while ($$0488657 >>> 0 >= $$1482663 >>> 0);
      if (!$$0497656) {
       $$2483$ph = $$1482663; //@line 14008
      } else {
       $138 = $$1482663 + -4 | 0; //@line 14010
       HEAP32[$138 >> 2] = $$0497656; //@line 14011
       $$2483$ph = $138; //@line 14012
      }
     }
     $$2500 = $$1499662; //@line 14015
     while (1) {
      if ($$2500 >>> 0 <= $$2483$ph >>> 0) {
       break;
      }
      $140 = $$2500 + -4 | 0; //@line 14021
      if (!(HEAP32[$140 >> 2] | 0)) {
       $$2500 = $140; //@line 14025
      } else {
       break;
      }
     }
     $144 = (HEAP32[$7 >> 2] | 0) - $125 | 0; //@line 14031
     HEAP32[$7 >> 2] = $144; //@line 14032
     if (($144 | 0) > 0) {
      $$1482663 = $$2483$ph; //@line 14035
      $$1499662 = $$2500; //@line 14035
      $124 = $144; //@line 14035
     } else {
      $$1482$lcssa = $$2483$ph; //@line 14037
      $$1499$lcssa = $$2500; //@line 14037
      $$pr566 = $144; //@line 14037
      break;
     }
    }
   } else {
    $$1482$lcssa = $$561; //@line 14042
    $$1499$lcssa = $$0498; //@line 14042
    $$pr566 = $$pr; //@line 14042
   }
   if (($$pr566 | 0) < 0) {
    $149 = (($$540 + 25 | 0) / 9 | 0) + 1 | 0; //@line 14048
    $150 = ($39 | 0) == 102; //@line 14049
    $$3484650 = $$1482$lcssa; //@line 14050
    $$3501649 = $$1499$lcssa; //@line 14050
    $152 = $$pr566; //@line 14050
    while (1) {
     $151 = 0 - $152 | 0; //@line 14052
     $154 = ($151 | 0) < 9 ? $151 : 9; //@line 14054
     if ($$3484650 >>> 0 < $$3501649 >>> 0) {
      $160 = (1 << $154) + -1 | 0; //@line 14058
      $161 = 1e9 >>> $154; //@line 14059
      $$0487644 = 0; //@line 14060
      $$1489643 = $$3484650; //@line 14060
      do {
       $162 = HEAP32[$$1489643 >> 2] | 0; //@line 14062
       HEAP32[$$1489643 >> 2] = ($162 >>> $154) + $$0487644; //@line 14066
       $$0487644 = Math_imul($162 & $160, $161) | 0; //@line 14067
       $$1489643 = $$1489643 + 4 | 0; //@line 14068
      } while ($$1489643 >>> 0 < $$3501649 >>> 0);
      $$$3484 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 14079
      if (!$$0487644) {
       $$$3484700 = $$$3484; //@line 14082
       $$4502 = $$3501649; //@line 14082
      } else {
       HEAP32[$$3501649 >> 2] = $$0487644; //@line 14085
       $$$3484700 = $$$3484; //@line 14086
       $$4502 = $$3501649 + 4 | 0; //@line 14086
      }
     } else {
      $$$3484700 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 14093
      $$4502 = $$3501649; //@line 14093
     }
     $174 = $150 ? $$561 : $$$3484700; //@line 14095
     $$$4502 = ($$4502 - $174 >> 2 | 0) > ($149 | 0) ? $174 + ($149 << 2) | 0 : $$4502; //@line 14102
     $152 = (HEAP32[$7 >> 2] | 0) + $154 | 0; //@line 14104
     HEAP32[$7 >> 2] = $152; //@line 14105
     if (($152 | 0) >= 0) {
      $$3484$lcssa = $$$3484700; //@line 14110
      $$3501$lcssa = $$$4502; //@line 14110
      break;
     } else {
      $$3484650 = $$$3484700; //@line 14108
      $$3501649 = $$$4502; //@line 14108
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa; //@line 14115
    $$3501$lcssa = $$1499$lcssa; //@line 14115
   }
   $185 = $$561; //@line 14118
   if ($$3484$lcssa >>> 0 < $$3501$lcssa >>> 0) {
    $189 = ($185 - $$3484$lcssa >> 2) * 9 | 0; //@line 14123
    $190 = HEAP32[$$3484$lcssa >> 2] | 0; //@line 14124
    if ($190 >>> 0 < 10) {
     $$1515 = $189; //@line 14127
    } else {
     $$0514639 = $189; //@line 14129
     $$0530638 = 10; //@line 14129
     while (1) {
      $$0530638 = $$0530638 * 10 | 0; //@line 14131
      $193 = $$0514639 + 1 | 0; //@line 14132
      if ($190 >>> 0 < $$0530638 >>> 0) {
       $$1515 = $193; //@line 14135
       break;
      } else {
       $$0514639 = $193; //@line 14138
      }
     }
    }
   } else {
    $$1515 = 0; //@line 14143
   }
   $198 = ($39 | 0) == 103; //@line 14148
   $199 = ($$540 | 0) != 0; //@line 14149
   $201 = $$540 - (($39 | 0) != 102 ? $$1515 : 0) + (($199 & $198) << 31 >> 31) | 0; //@line 14152
   if (($201 | 0) < ((($$3501$lcssa - $185 >> 2) * 9 | 0) + -9 | 0)) {
    $209 = $201 + 9216 | 0; //@line 14161
    $212 = $$561 + 4 + ((($209 | 0) / 9 | 0) + -1024 << 2) | 0; //@line 14164
    $213 = ($209 | 0) % 9 | 0; //@line 14165
    if (($213 | 0) < 8) {
     $$0527$in633 = $213; //@line 14168
     $$1531632 = 10; //@line 14168
     while (1) {
      $215 = $$1531632 * 10 | 0; //@line 14171
      if (($$0527$in633 | 0) < 7) {
       $$0527$in633 = $$0527$in633 + 1 | 0; //@line 14174
       $$1531632 = $215; //@line 14174
      } else {
       $$1531$lcssa = $215; //@line 14176
       break;
      }
     }
    } else {
     $$1531$lcssa = 10; //@line 14181
    }
    $217 = HEAP32[$212 >> 2] | 0; //@line 14183
    $218 = ($217 >>> 0) % ($$1531$lcssa >>> 0) | 0; //@line 14184
    $221 = ($212 + 4 | 0) == ($$3501$lcssa | 0); //@line 14187
    if ($221 & ($218 | 0) == 0) {
     $$4492 = $212; //@line 14190
     $$4518 = $$1515; //@line 14190
     $$8 = $$3484$lcssa; //@line 14190
    } else {
     $$543 = ((($217 >>> 0) / ($$1531$lcssa >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0; //@line 14195
     $225 = ($$1531$lcssa | 0) / 2 | 0; //@line 14196
     $$$564 = $218 >>> 0 < $225 >>> 0 ? .5 : $221 & ($218 | 0) == ($225 | 0) ? 1.0 : 1.5; //@line 14201
     if (!$$0520) {
      $$1467 = $$$564; //@line 14204
      $$1469 = $$543; //@line 14204
     } else {
      $230 = (HEAP8[$$0521 >> 0] | 0) == 45; //@line 14207
      $$1467 = $230 ? -$$$564 : $$$564; //@line 14212
      $$1469 = $230 ? -$$543 : $$543; //@line 14212
     }
     $233 = $217 - $218 | 0; //@line 14214
     HEAP32[$212 >> 2] = $233; //@line 14215
     if ($$1469 + $$1467 != $$1469) {
      $236 = $233 + $$1531$lcssa | 0; //@line 14219
      HEAP32[$212 >> 2] = $236; //@line 14220
      if ($236 >>> 0 > 999999999) {
       $$5486626 = $$3484$lcssa; //@line 14223
       $$sink547625 = $212; //@line 14223
       while (1) {
        $238 = $$sink547625 + -4 | 0; //@line 14225
        HEAP32[$$sink547625 >> 2] = 0; //@line 14226
        if ($238 >>> 0 < $$5486626 >>> 0) {
         $240 = $$5486626 + -4 | 0; //@line 14229
         HEAP32[$240 >> 2] = 0; //@line 14230
         $$6 = $240; //@line 14231
        } else {
         $$6 = $$5486626; //@line 14233
        }
        $242 = (HEAP32[$238 >> 2] | 0) + 1 | 0; //@line 14236
        HEAP32[$238 >> 2] = $242; //@line 14237
        if ($242 >>> 0 > 999999999) {
         $$5486626 = $$6; //@line 14240
         $$sink547625 = $238; //@line 14240
        } else {
         $$5486$lcssa = $$6; //@line 14242
         $$sink547$lcssa = $238; //@line 14242
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa; //@line 14247
       $$sink547$lcssa = $212; //@line 14247
      }
      $247 = ($185 - $$5486$lcssa >> 2) * 9 | 0; //@line 14252
      $248 = HEAP32[$$5486$lcssa >> 2] | 0; //@line 14253
      if ($248 >>> 0 < 10) {
       $$4492 = $$sink547$lcssa; //@line 14256
       $$4518 = $247; //@line 14256
       $$8 = $$5486$lcssa; //@line 14256
      } else {
       $$2516621 = $247; //@line 14258
       $$2532620 = 10; //@line 14258
       while (1) {
        $$2532620 = $$2532620 * 10 | 0; //@line 14260
        $251 = $$2516621 + 1 | 0; //@line 14261
        if ($248 >>> 0 < $$2532620 >>> 0) {
         $$4492 = $$sink547$lcssa; //@line 14264
         $$4518 = $251; //@line 14264
         $$8 = $$5486$lcssa; //@line 14264
         break;
        } else {
         $$2516621 = $251; //@line 14267
        }
       }
      }
     } else {
      $$4492 = $212; //@line 14272
      $$4518 = $$1515; //@line 14272
      $$8 = $$3484$lcssa; //@line 14272
     }
    }
    $253 = $$4492 + 4 | 0; //@line 14275
    $$5519$ph = $$4518; //@line 14278
    $$7505$ph = $$3501$lcssa >>> 0 > $253 >>> 0 ? $253 : $$3501$lcssa; //@line 14278
    $$9$ph = $$8; //@line 14278
   } else {
    $$5519$ph = $$1515; //@line 14280
    $$7505$ph = $$3501$lcssa; //@line 14280
    $$9$ph = $$3484$lcssa; //@line 14280
   }
   $$7505 = $$7505$ph; //@line 14282
   while (1) {
    if ($$7505 >>> 0 <= $$9$ph >>> 0) {
     $$lcssa675 = 0; //@line 14286
     break;
    }
    $256 = $$7505 + -4 | 0; //@line 14289
    if (!(HEAP32[$256 >> 2] | 0)) {
     $$7505 = $256; //@line 14293
    } else {
     $$lcssa675 = 1; //@line 14295
     break;
    }
   }
   $259 = 0 - $$5519$ph | 0; //@line 14299
   do {
    if ($198) {
     $$540$ = $$540 + (($199 ^ 1) & 1) | 0; //@line 14304
     if (($$540$ | 0) > ($$5519$ph | 0) & ($$5519$ph | 0) > -5) {
      $$0479 = $5 + -1 | 0; //@line 14312
      $$2476 = $$540$ + -1 - $$5519$ph | 0; //@line 14312
     } else {
      $$0479 = $5 + -2 | 0; //@line 14316
      $$2476 = $$540$ + -1 | 0; //@line 14316
     }
     $267 = $4 & 8; //@line 14318
     if (!$267) {
      if ($$lcssa675) {
       $270 = HEAP32[$$7505 + -4 >> 2] | 0; //@line 14323
       if (!$270) {
        $$2529 = 9; //@line 14326
       } else {
        if (!(($270 >>> 0) % 10 | 0)) {
         $$1528617 = 0; //@line 14331
         $$3533616 = 10; //@line 14331
         while (1) {
          $$3533616 = $$3533616 * 10 | 0; //@line 14333
          $275 = $$1528617 + 1 | 0; //@line 14334
          if (($270 >>> 0) % ($$3533616 >>> 0) | 0 | 0) {
           $$2529 = $275; //@line 14340
           break;
          } else {
           $$1528617 = $275; //@line 14338
          }
         }
        } else {
         $$2529 = 0; //@line 14345
        }
       }
      } else {
       $$2529 = 9; //@line 14349
      }
      $284 = (($$7505 - $185 >> 2) * 9 | 0) + -9 | 0; //@line 14357
      if (($$0479 | 32 | 0) == 102) {
       $285 = $284 - $$2529 | 0; //@line 14359
       $$548 = ($285 | 0) > 0 ? $285 : 0; //@line 14361
       $$1480 = $$0479; //@line 14364
       $$3477 = ($$2476 | 0) < ($$548 | 0) ? $$2476 : $$548; //@line 14364
       $$pre$phi698Z2D = 0; //@line 14364
       break;
      } else {
       $289 = $284 + $$5519$ph - $$2529 | 0; //@line 14368
       $$550 = ($289 | 0) > 0 ? $289 : 0; //@line 14370
       $$1480 = $$0479; //@line 14373
       $$3477 = ($$2476 | 0) < ($$550 | 0) ? $$2476 : $$550; //@line 14373
       $$pre$phi698Z2D = 0; //@line 14373
       break;
      }
     } else {
      $$1480 = $$0479; //@line 14377
      $$3477 = $$2476; //@line 14377
      $$pre$phi698Z2D = $267; //@line 14377
     }
    } else {
     $$1480 = $5; //@line 14381
     $$3477 = $$540; //@line 14381
     $$pre$phi698Z2D = $4 & 8; //@line 14381
    }
   } while (0);
   $292 = $$3477 | $$pre$phi698Z2D; //@line 14384
   $294 = ($292 | 0) != 0 & 1; //@line 14386
   $296 = ($$1480 | 32 | 0) == 102; //@line 14388
   if ($296) {
    $$2513 = 0; //@line 14392
    $$pn = ($$5519$ph | 0) > 0 ? $$5519$ph : 0; //@line 14392
   } else {
    $300 = ($$5519$ph | 0) < 0 ? $259 : $$5519$ph; //@line 14395
    $303 = _fmt_u($300, (($300 | 0) < 0) << 31 >> 31, $11) | 0; //@line 14398
    $304 = $11; //@line 14399
    if (($304 - $303 | 0) < 2) {
     $$1512610 = $303; //@line 14404
     while (1) {
      $308 = $$1512610 + -1 | 0; //@line 14406
      HEAP8[$308 >> 0] = 48; //@line 14407
      if (($304 - $308 | 0) < 2) {
       $$1512610 = $308; //@line 14412
      } else {
       $$1512$lcssa = $308; //@line 14414
       break;
      }
     }
    } else {
     $$1512$lcssa = $303; //@line 14419
    }
    HEAP8[$$1512$lcssa + -1 >> 0] = ($$5519$ph >> 31 & 2) + 43; //@line 14426
    $318 = $$1512$lcssa + -2 | 0; //@line 14428
    HEAP8[$318 >> 0] = $$1480; //@line 14429
    $$2513 = $318; //@line 14432
    $$pn = $304 - $318 | 0; //@line 14432
   }
   $323 = $$0520 + 1 + $$3477 + $294 + $$pn | 0; //@line 14437
   _pad_676($0, 32, $2, $323, $4); //@line 14438
   _out_670($0, $$0521, $$0520); //@line 14439
   _pad_676($0, 48, $2, $323, $4 ^ 65536); //@line 14441
   if ($296) {
    $$0496$$9 = $$9$ph >>> 0 > $$561 >>> 0 ? $$561 : $$9$ph; //@line 14444
    $326 = $8 + 9 | 0; //@line 14445
    $327 = $326; //@line 14446
    $328 = $8 + 8 | 0; //@line 14447
    $$5493600 = $$0496$$9; //@line 14448
    do {
     $330 = _fmt_u(HEAP32[$$5493600 >> 2] | 0, 0, $326) | 0; //@line 14451
     if (($$5493600 | 0) == ($$0496$$9 | 0)) {
      if (($330 | 0) == ($326 | 0)) {
       HEAP8[$328 >> 0] = 48; //@line 14456
       $$1465 = $328; //@line 14457
      } else {
       $$1465 = $330; //@line 14459
      }
     } else {
      if ($330 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $330 - $9 | 0) | 0; //@line 14466
       $$0464597 = $330; //@line 14467
       while (1) {
        $335 = $$0464597 + -1 | 0; //@line 14469
        if ($335 >>> 0 > $8 >>> 0) {
         $$0464597 = $335; //@line 14472
        } else {
         $$1465 = $335; //@line 14474
         break;
        }
       }
      } else {
       $$1465 = $330; //@line 14479
      }
     }
     _out_670($0, $$1465, $327 - $$1465 | 0); //@line 14484
     $$5493600 = $$5493600 + 4 | 0; //@line 14485
    } while ($$5493600 >>> 0 <= $$561 >>> 0);
    if ($292 | 0) {
     _out_670($0, 15725, 1); //@line 14495
    }
    if ($$5493600 >>> 0 < $$7505 >>> 0 & ($$3477 | 0) > 0) {
     $$4478593 = $$3477; //@line 14501
     $$6494592 = $$5493600; //@line 14501
     while (1) {
      $347 = _fmt_u(HEAP32[$$6494592 >> 2] | 0, 0, $326) | 0; //@line 14504
      if ($347 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $347 - $9 | 0) | 0; //@line 14509
       $$0463587 = $347; //@line 14510
       while (1) {
        $351 = $$0463587 + -1 | 0; //@line 14512
        if ($351 >>> 0 > $8 >>> 0) {
         $$0463587 = $351; //@line 14515
        } else {
         $$0463$lcssa = $351; //@line 14517
         break;
        }
       }
      } else {
       $$0463$lcssa = $347; //@line 14522
      }
      _out_670($0, $$0463$lcssa, ($$4478593 | 0) < 9 ? $$4478593 : 9); //@line 14526
      $$6494592 = $$6494592 + 4 | 0; //@line 14527
      $356 = $$4478593 + -9 | 0; //@line 14528
      if (!($$6494592 >>> 0 < $$7505 >>> 0 & ($$4478593 | 0) > 9)) {
       $$4478$lcssa = $356; //@line 14535
       break;
      } else {
       $$4478593 = $356; //@line 14533
      }
     }
    } else {
     $$4478$lcssa = $$3477; //@line 14540
    }
    _pad_676($0, 48, $$4478$lcssa + 9 | 0, 9, 0); //@line 14543
   } else {
    $$7505$ = $$lcssa675 ? $$7505 : $$9$ph + 4 | 0; //@line 14546
    if (($$3477 | 0) > -1) {
     $363 = $8 + 9 | 0; //@line 14549
     $364 = ($$pre$phi698Z2D | 0) == 0; //@line 14550
     $365 = $363; //@line 14551
     $366 = 0 - $9 | 0; //@line 14552
     $367 = $8 + 8 | 0; //@line 14553
     $$5605 = $$3477; //@line 14554
     $$7495604 = $$9$ph; //@line 14554
     while (1) {
      $369 = _fmt_u(HEAP32[$$7495604 >> 2] | 0, 0, $363) | 0; //@line 14557
      if (($369 | 0) == ($363 | 0)) {
       HEAP8[$367 >> 0] = 48; //@line 14560
       $$0 = $367; //@line 14561
      } else {
       $$0 = $369; //@line 14563
      }
      do {
       if (($$7495604 | 0) == ($$9$ph | 0)) {
        $375 = $$0 + 1 | 0; //@line 14568
        _out_670($0, $$0, 1); //@line 14569
        if ($364 & ($$5605 | 0) < 1) {
         $$2 = $375; //@line 14573
         break;
        }
        _out_670($0, 15725, 1); //@line 14576
        $$2 = $375; //@line 14577
       } else {
        if ($$0 >>> 0 <= $8 >>> 0) {
         $$2 = $$0; //@line 14581
         break;
        }
        _memset($8 | 0, 48, $$0 + $366 | 0) | 0; //@line 14586
        $$1601 = $$0; //@line 14587
        while (1) {
         $373 = $$1601 + -1 | 0; //@line 14589
         if ($373 >>> 0 > $8 >>> 0) {
          $$1601 = $373; //@line 14592
         } else {
          $$2 = $373; //@line 14594
          break;
         }
        }
       }
      } while (0);
      $378 = $365 - $$2 | 0; //@line 14601
      _out_670($0, $$2, ($$5605 | 0) > ($378 | 0) ? $378 : $$5605); //@line 14604
      $381 = $$5605 - $378 | 0; //@line 14605
      $$7495604 = $$7495604 + 4 | 0; //@line 14606
      if (!($$7495604 >>> 0 < $$7505$ >>> 0 & ($381 | 0) > -1)) {
       $$5$lcssa = $381; //@line 14613
       break;
      } else {
       $$5605 = $381; //@line 14611
      }
     }
    } else {
     $$5$lcssa = $$3477; //@line 14618
    }
    _pad_676($0, 48, $$5$lcssa + 18 | 0, 18, 0); //@line 14621
    _out_670($0, $$2513, $11 - $$2513 | 0); //@line 14625
   }
   _pad_676($0, 32, $2, $323, $4 ^ 8192); //@line 14628
   $$sink560 = $323; //@line 14629
  }
 } while (0);
 STACKTOP = sp; //@line 14634
 return (($$sink560 | 0) < ($2 | 0) ? $2 : $$sink560) | 0; //@line 14634
}
function _printf_core($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$$5 = 0, $$0 = 0, $$0228 = 0, $$0229316 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa356 = 0, $$0240315 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249303 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262309 = 0, $$0269 = 0, $$1 = 0, $$1230327 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241326 = 0, $$1244314 = 0, $$1248 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242302 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2261 = 0, $$2271 = 0, $$3265 = 0, $$3272 = 0, $$3300 = 0, $$4258354 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$pre342 = 0, $$pre345 = 0, $$pre348 = 0, $$sink = 0, $10 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $112 = 0, $115 = 0, $12 = 0, $125 = 0, $129 = 0, $13 = 0, $14 = 0, $140 = 0, $144 = 0, $151 = 0, $152 = 0, $154 = 0, $156 = 0, $158 = 0, $167 = 0, $168 = 0, $173 = 0, $176 = 0, $181 = 0, $182 = 0, $187 = 0, $189 = 0, $196 = 0, $197 = 0, $20 = 0, $208 = 0, $21 = 0, $220 = 0, $227 = 0, $229 = 0, $23 = 0, $232 = 0, $234 = 0, $24 = 0, $242 = 0, $244 = 0, $247 = 0, $248 = 0, $25 = 0, $252 = 0, $256 = 0, $258 = 0, $261 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $275 = 0, $276 = 0, $281 = 0, $283 = 0, $284 = 0, $290 = 0, $30 = 0, $302 = 0, $305 = 0, $306 = 0, $318 = 0, $320 = 0, $325 = 0, $329 = 0, $331 = 0, $343 = 0, $345 = 0, $352 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $43 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $6 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $79 = 0, $8 = 0, $83 = 0, $9 = 0, $or$cond = 0, $or$cond278 = 0, $storemerge274 = 0, label = 0, sp = 0, $158$looptemp = 0;
 sp = STACKTOP; //@line 12312
 STACKTOP = STACKTOP + 64 | 0; //@line 12313
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 12313
 $5 = sp + 16 | 0; //@line 12314
 $6 = sp; //@line 12315
 $7 = sp + 24 | 0; //@line 12316
 $8 = sp + 8 | 0; //@line 12317
 $9 = sp + 20 | 0; //@line 12318
 HEAP32[$5 >> 2] = $1; //@line 12319
 $10 = ($0 | 0) != 0; //@line 12320
 $11 = $7 + 40 | 0; //@line 12321
 $12 = $11; //@line 12322
 $13 = $7 + 39 | 0; //@line 12323
 $14 = $8 + 4 | 0; //@line 12324
 $$0243 = 0; //@line 12325
 $$0247 = 0; //@line 12325
 $$0269 = 0; //@line 12325
 L1 : while (1) {
  do {
   if (($$0247 | 0) > -1) {
    if (($$0243 | 0) > (2147483647 - $$0247 | 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 12334
     $$1248 = -1; //@line 12335
     break;
    } else {
     $$1248 = $$0243 + $$0247 | 0; //@line 12339
     break;
    }
   } else {
    $$1248 = $$0247; //@line 12343
   }
  } while (0);
  $20 = HEAP32[$5 >> 2] | 0; //@line 12346
  $21 = HEAP8[$20 >> 0] | 0; //@line 12347
  if (!($21 << 24 >> 24)) {
   label = 88; //@line 12350
   break;
  } else {
   $23 = $21; //@line 12353
   $25 = $20; //@line 12353
  }
  L9 : while (1) {
   switch ($23 << 24 >> 24) {
   case 37:
    {
     $$0249303 = $25; //@line 12358
     $27 = $25; //@line 12358
     label = 9; //@line 12359
     break L9;
     break;
    }
   case 0:
    {
     $$0249$lcssa = $25; //@line 12364
     break L9;
     break;
    }
   default:
    {}
   }
   $24 = $25 + 1 | 0; //@line 12371
   HEAP32[$5 >> 2] = $24; //@line 12372
   $23 = HEAP8[$24 >> 0] | 0; //@line 12374
   $25 = $24; //@line 12374
  }
  L12 : do {
   if ((label | 0) == 9) {
    while (1) {
     label = 0; //@line 12379
     if ((HEAP8[$27 + 1 >> 0] | 0) != 37) {
      $$0249$lcssa = $$0249303; //@line 12384
      break L12;
     }
     $30 = $$0249303 + 1 | 0; //@line 12387
     $27 = $27 + 2 | 0; //@line 12388
     HEAP32[$5 >> 2] = $27; //@line 12389
     if ((HEAP8[$27 >> 0] | 0) != 37) {
      $$0249$lcssa = $30; //@line 12396
      break;
     } else {
      $$0249303 = $30; //@line 12393
      label = 9; //@line 12394
     }
    }
   }
  } while (0);
  $36 = $$0249$lcssa - $20 | 0; //@line 12404
  if ($10) {
   _out_670($0, $20, $36); //@line 12406
  }
  if ($36 | 0) {
   $$0243 = $36; //@line 12410
   $$0247 = $$1248; //@line 12410
   continue;
  }
  $43 = (_isdigit(HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] | 0) | 0) == 0; //@line 12418
  $$pre342 = HEAP32[$5 >> 2] | 0; //@line 12419
  if ($43) {
   $$0253 = -1; //@line 12421
   $$1270 = $$0269; //@line 12421
   $$sink = 1; //@line 12421
  } else {
   if ((HEAP8[$$pre342 + 2 >> 0] | 0) == 36) {
    $$0253 = (HEAP8[$$pre342 + 1 >> 0] | 0) + -48 | 0; //@line 12431
    $$1270 = 1; //@line 12431
    $$sink = 3; //@line 12431
   } else {
    $$0253 = -1; //@line 12433
    $$1270 = $$0269; //@line 12433
    $$sink = 1; //@line 12433
   }
  }
  $51 = $$pre342 + $$sink | 0; //@line 12436
  HEAP32[$5 >> 2] = $51; //@line 12437
  $52 = HEAP8[$51 >> 0] | 0; //@line 12438
  $54 = ($52 << 24 >> 24) + -32 | 0; //@line 12440
  if ($54 >>> 0 > 31 | (1 << $54 & 75913 | 0) == 0) {
   $$0262$lcssa = 0; //@line 12447
   $$lcssa291 = $52; //@line 12447
   $$lcssa292 = $51; //@line 12447
  } else {
   $$0262309 = 0; //@line 12449
   $60 = $52; //@line 12449
   $65 = $51; //@line 12449
   while (1) {
    $63 = 1 << ($60 << 24 >> 24) + -32 | $$0262309; //@line 12454
    $64 = $65 + 1 | 0; //@line 12455
    HEAP32[$5 >> 2] = $64; //@line 12456
    $66 = HEAP8[$64 >> 0] | 0; //@line 12457
    $68 = ($66 << 24 >> 24) + -32 | 0; //@line 12459
    if ($68 >>> 0 > 31 | (1 << $68 & 75913 | 0) == 0) {
     $$0262$lcssa = $63; //@line 12466
     $$lcssa291 = $66; //@line 12466
     $$lcssa292 = $64; //@line 12466
     break;
    } else {
     $$0262309 = $63; //@line 12469
     $60 = $66; //@line 12469
     $65 = $64; //@line 12469
    }
   }
  }
  if ($$lcssa291 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[$$lcssa292 + 1 >> 0] | 0) | 0)) {
    label = 23; //@line 12481
   } else {
    $79 = HEAP32[$5 >> 2] | 0; //@line 12483
    if ((HEAP8[$79 + 2 >> 0] | 0) == 36) {
     $83 = $79 + 1 | 0; //@line 12488
     HEAP32[$4 + ((HEAP8[$83 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 12493
     $$0259 = HEAP32[$3 + ((HEAP8[$83 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 12505
     $$2271 = 1; //@line 12505
     $storemerge274 = $79 + 3 | 0; //@line 12505
    } else {
     label = 23; //@line 12507
    }
   }
   if ((label | 0) == 23) {
    label = 0; //@line 12511
    if ($$1270 | 0) {
     $$0 = -1; //@line 12514
     break;
    }
    if ($10) {
     $105 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12529
     $106 = HEAP32[$105 >> 2] | 0; //@line 12530
     HEAP32[$2 >> 2] = $105 + 4; //@line 12532
     $363 = $106; //@line 12533
    } else {
     $363 = 0; //@line 12535
    }
    $$0259 = $363; //@line 12539
    $$2271 = 0; //@line 12539
    $storemerge274 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 12539
   }
   HEAP32[$5 >> 2] = $storemerge274; //@line 12541
   $109 = ($$0259 | 0) < 0; //@line 12542
   $$1260 = $109 ? 0 - $$0259 | 0 : $$0259; //@line 12547
   $$1263 = $109 ? $$0262$lcssa | 8192 : $$0262$lcssa; //@line 12547
   $$3272 = $$2271; //@line 12547
   $115 = $storemerge274; //@line 12547
  } else {
   $112 = _getint_671($5) | 0; //@line 12549
   if (($112 | 0) < 0) {
    $$0 = -1; //@line 12552
    break;
   }
   $$1260 = $112; //@line 12556
   $$1263 = $$0262$lcssa; //@line 12556
   $$3272 = $$1270; //@line 12556
   $115 = HEAP32[$5 >> 2] | 0; //@line 12556
  }
  do {
   if ((HEAP8[$115 >> 0] | 0) == 46) {
    if ((HEAP8[$115 + 1 >> 0] | 0) != 42) {
     HEAP32[$5 >> 2] = $115 + 1; //@line 12567
     $156 = _getint_671($5) | 0; //@line 12568
     $$0254 = $156; //@line 12570
     $$pre345 = HEAP32[$5 >> 2] | 0; //@line 12570
     break;
    }
    if (_isdigit(HEAP8[$115 + 2 >> 0] | 0) | 0) {
     $125 = HEAP32[$5 >> 2] | 0; //@line 12579
     if ((HEAP8[$125 + 3 >> 0] | 0) == 36) {
      $129 = $125 + 2 | 0; //@line 12584
      HEAP32[$4 + ((HEAP8[$129 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 12589
      $140 = HEAP32[$3 + ((HEAP8[$129 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 12596
      $144 = $125 + 4 | 0; //@line 12600
      HEAP32[$5 >> 2] = $144; //@line 12601
      $$0254 = $140; //@line 12602
      $$pre345 = $144; //@line 12602
      break;
     }
    }
    if ($$3272 | 0) {
     $$0 = -1; //@line 12608
     break L1;
    }
    if ($10) {
     $151 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12623
     $152 = HEAP32[$151 >> 2] | 0; //@line 12624
     HEAP32[$2 >> 2] = $151 + 4; //@line 12626
     $364 = $152; //@line 12627
    } else {
     $364 = 0; //@line 12629
    }
    $154 = (HEAP32[$5 >> 2] | 0) + 2 | 0; //@line 12632
    HEAP32[$5 >> 2] = $154; //@line 12633
    $$0254 = $364; //@line 12634
    $$pre345 = $154; //@line 12634
   } else {
    $$0254 = -1; //@line 12636
    $$pre345 = $115; //@line 12636
   }
  } while (0);
  $$0252 = 0; //@line 12639
  $158 = $$pre345; //@line 12639
  while (1) {
   if (((HEAP8[$158 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $$0 = -1; //@line 12646
    break L1;
   }
   $158$looptemp = $158;
   $158 = $158 + 1 | 0; //@line 12649
   HEAP32[$5 >> 2] = $158; //@line 12650
   $167 = HEAP8[(HEAP8[$158$looptemp >> 0] | 0) + -65 + (15193 + ($$0252 * 58 | 0)) >> 0] | 0; //@line 12655
   $168 = $167 & 255; //@line 12656
   if (($168 + -1 | 0) >>> 0 >= 8) {
    break;
   } else {
    $$0252 = $168; //@line 12660
   }
  }
  if (!($167 << 24 >> 24)) {
   $$0 = -1; //@line 12667
   break;
  }
  $173 = ($$0253 | 0) > -1; //@line 12671
  do {
   if ($167 << 24 >> 24 == 19) {
    if ($173) {
     $$0 = -1; //@line 12675
     break L1;
    } else {
     label = 50; //@line 12678
    }
   } else {
    if ($173) {
     HEAP32[$4 + ($$0253 << 2) >> 2] = $168; //@line 12683
     $176 = $3 + ($$0253 << 3) | 0; //@line 12685
     $181 = HEAP32[$176 + 4 >> 2] | 0; //@line 12690
     $182 = $6; //@line 12691
     HEAP32[$182 >> 2] = HEAP32[$176 >> 2]; //@line 12693
     HEAP32[$182 + 4 >> 2] = $181; //@line 12696
     label = 50; //@line 12697
     break;
    }
    if (!$10) {
     $$0 = 0; //@line 12701
     break L1;
    }
    _pop_arg_673($6, $168, $2); //@line 12704
    $187 = HEAP32[$5 >> 2] | 0; //@line 12706
   }
  } while (0);
  if ((label | 0) == 50) {
   label = 0; //@line 12710
   if ($10) {
    $187 = $158; //@line 12712
   } else {
    $$0243 = 0; //@line 12714
    $$0247 = $$1248; //@line 12714
    $$0269 = $$3272; //@line 12714
    continue;
   }
  }
  $189 = HEAP8[$187 + -1 >> 0] | 0; //@line 12720
  $$0235 = ($$0252 | 0) != 0 & ($189 & 15 | 0) == 3 ? $189 & -33 : $189; //@line 12726
  $196 = $$1263 & -65537; //@line 12729
  $$1263$ = ($$1263 & 8192 | 0) == 0 ? $$1263 : $196; //@line 12730
  L73 : do {
   switch ($$0235 | 0) {
   case 110:
    {
     switch (($$0252 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 12738
       $$0243 = 0; //@line 12739
       $$0247 = $$1248; //@line 12739
       $$0269 = $$3272; //@line 12739
       continue L1;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 12745
       $$0243 = 0; //@line 12746
       $$0247 = $$1248; //@line 12746
       $$0269 = $$3272; //@line 12746
       continue L1;
       break;
      }
     case 2:
      {
       $208 = HEAP32[$6 >> 2] | 0; //@line 12754
       HEAP32[$208 >> 2] = $$1248; //@line 12756
       HEAP32[$208 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 12759
       $$0243 = 0; //@line 12760
       $$0247 = $$1248; //@line 12760
       $$0269 = $$3272; //@line 12760
       continue L1;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$6 >> 2] >> 1] = $$1248; //@line 12767
       $$0243 = 0; //@line 12768
       $$0247 = $$1248; //@line 12768
       $$0269 = $$3272; //@line 12768
       continue L1;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$6 >> 2] >> 0] = $$1248; //@line 12775
       $$0243 = 0; //@line 12776
       $$0247 = $$1248; //@line 12776
       $$0269 = $$3272; //@line 12776
       continue L1;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 12782
       $$0243 = 0; //@line 12783
       $$0247 = $$1248; //@line 12783
       $$0269 = $$3272; //@line 12783
       continue L1;
       break;
      }
     case 7:
      {
       $220 = HEAP32[$6 >> 2] | 0; //@line 12791
       HEAP32[$220 >> 2] = $$1248; //@line 12793
       HEAP32[$220 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 12796
       $$0243 = 0; //@line 12797
       $$0247 = $$1248; //@line 12797
       $$0269 = $$3272; //@line 12797
       continue L1;
       break;
      }
     default:
      {
       $$0243 = 0; //@line 12802
       $$0247 = $$1248; //@line 12802
       $$0269 = $$3272; //@line 12802
       continue L1;
      }
     }
     break;
    }
   case 112:
    {
     $$1236 = 120; //@line 12812
     $$1255 = $$0254 >>> 0 > 8 ? $$0254 : 8; //@line 12812
     $$3265 = $$1263$ | 8; //@line 12812
     label = 62; //@line 12813
     break;
    }
   case 88:
   case 120:
    {
     $$1236 = $$0235; //@line 12817
     $$1255 = $$0254; //@line 12817
     $$3265 = $$1263$; //@line 12817
     label = 62; //@line 12818
     break;
    }
   case 111:
    {
     $242 = $6; //@line 12822
     $244 = HEAP32[$242 >> 2] | 0; //@line 12824
     $247 = HEAP32[$242 + 4 >> 2] | 0; //@line 12827
     $248 = _fmt_o($244, $247, $11) | 0; //@line 12828
     $252 = $12 - $248 | 0; //@line 12832
     $$0228 = $248; //@line 12837
     $$1233 = 0; //@line 12837
     $$1238 = 15657; //@line 12837
     $$2256 = ($$1263$ & 8 | 0) == 0 | ($$0254 | 0) > ($252 | 0) ? $$0254 : $252 + 1 | 0; //@line 12837
     $$4266 = $$1263$; //@line 12837
     $281 = $244; //@line 12837
     $283 = $247; //@line 12837
     label = 68; //@line 12838
     break;
    }
   case 105:
   case 100:
    {
     $256 = $6; //@line 12842
     $258 = HEAP32[$256 >> 2] | 0; //@line 12844
     $261 = HEAP32[$256 + 4 >> 2] | 0; //@line 12847
     if (($261 | 0) < 0) {
      $263 = _i64Subtract(0, 0, $258 | 0, $261 | 0) | 0; //@line 12850
      $264 = tempRet0; //@line 12851
      $265 = $6; //@line 12852
      HEAP32[$265 >> 2] = $263; //@line 12854
      HEAP32[$265 + 4 >> 2] = $264; //@line 12857
      $$0232 = 1; //@line 12858
      $$0237 = 15657; //@line 12858
      $275 = $263; //@line 12858
      $276 = $264; //@line 12858
      label = 67; //@line 12859
      break L73;
     } else {
      $$0232 = ($$1263$ & 2049 | 0) != 0 & 1; //@line 12871
      $$0237 = ($$1263$ & 2048 | 0) == 0 ? ($$1263$ & 1 | 0) == 0 ? 15657 : 15659 : 15658; //@line 12871
      $275 = $258; //@line 12871
      $276 = $261; //@line 12871
      label = 67; //@line 12872
      break L73;
     }
     break;
    }
   case 117:
    {
     $197 = $6; //@line 12878
     $$0232 = 0; //@line 12884
     $$0237 = 15657; //@line 12884
     $275 = HEAP32[$197 >> 2] | 0; //@line 12884
     $276 = HEAP32[$197 + 4 >> 2] | 0; //@line 12884
     label = 67; //@line 12885
     break;
    }
   case 99:
    {
     HEAP8[$13 >> 0] = HEAP32[$6 >> 2]; //@line 12896
     $$2 = $13; //@line 12897
     $$2234 = 0; //@line 12897
     $$2239 = 15657; //@line 12897
     $$2251 = $11; //@line 12897
     $$5 = 1; //@line 12897
     $$6268 = $196; //@line 12897
     break;
    }
   case 109:
    {
     $$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0; //@line 12904
     label = 72; //@line 12905
     break;
    }
   case 115:
    {
     $302 = HEAP32[$6 >> 2] | 0; //@line 12909
     $$1 = $302 | 0 ? $302 : 15667; //@line 12912
     label = 72; //@line 12913
     break;
    }
   case 67:
    {
     HEAP32[$8 >> 2] = HEAP32[$6 >> 2]; //@line 12923
     HEAP32[$14 >> 2] = 0; //@line 12924
     HEAP32[$6 >> 2] = $8; //@line 12925
     $$4258354 = -1; //@line 12926
     $365 = $8; //@line 12926
     label = 76; //@line 12927
     break;
    }
   case 83:
    {
     $$pre348 = HEAP32[$6 >> 2] | 0; //@line 12931
     if (!$$0254) {
      _pad_676($0, 32, $$1260, 0, $$1263$); //@line 12934
      $$0240$lcssa356 = 0; //@line 12935
      label = 85; //@line 12936
     } else {
      $$4258354 = $$0254; //@line 12938
      $365 = $$pre348; //@line 12938
      label = 76; //@line 12939
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $$0243 = _fmt_fp($0, +HEAPF64[$6 >> 3], $$1260, $$0254, $$1263$, $$0235) | 0; //@line 12946
     $$0247 = $$1248; //@line 12946
     $$0269 = $$3272; //@line 12946
     continue L1;
     break;
    }
   default:
    {
     $$2 = $20; //@line 12951
     $$2234 = 0; //@line 12951
     $$2239 = 15657; //@line 12951
     $$2251 = $11; //@line 12951
     $$5 = $$0254; //@line 12951
     $$6268 = $$1263$; //@line 12951
    }
   }
  } while (0);
  L97 : do {
   if ((label | 0) == 62) {
    label = 0; //@line 12957
    $227 = $6; //@line 12958
    $229 = HEAP32[$227 >> 2] | 0; //@line 12960
    $232 = HEAP32[$227 + 4 >> 2] | 0; //@line 12963
    $234 = _fmt_x($229, $232, $11, $$1236 & 32) | 0; //@line 12965
    $or$cond278 = ($$3265 & 8 | 0) == 0 | ($229 | 0) == 0 & ($232 | 0) == 0; //@line 12971
    $$0228 = $234; //@line 12976
    $$1233 = $or$cond278 ? 0 : 2; //@line 12976
    $$1238 = $or$cond278 ? 15657 : 15657 + ($$1236 >> 4) | 0; //@line 12976
    $$2256 = $$1255; //@line 12976
    $$4266 = $$3265; //@line 12976
    $281 = $229; //@line 12976
    $283 = $232; //@line 12976
    label = 68; //@line 12977
   } else if ((label | 0) == 67) {
    label = 0; //@line 12980
    $$0228 = _fmt_u($275, $276, $11) | 0; //@line 12982
    $$1233 = $$0232; //@line 12982
    $$1238 = $$0237; //@line 12982
    $$2256 = $$0254; //@line 12982
    $$4266 = $$1263$; //@line 12982
    $281 = $275; //@line 12982
    $283 = $276; //@line 12982
    label = 68; //@line 12983
   } else if ((label | 0) == 72) {
    label = 0; //@line 12986
    $305 = _memchr($$1, 0, $$0254) | 0; //@line 12987
    $306 = ($305 | 0) == 0; //@line 12988
    $$2 = $$1; //@line 12995
    $$2234 = 0; //@line 12995
    $$2239 = 15657; //@line 12995
    $$2251 = $306 ? $$1 + $$0254 | 0 : $305; //@line 12995
    $$5 = $306 ? $$0254 : $305 - $$1 | 0; //@line 12995
    $$6268 = $196; //@line 12995
   } else if ((label | 0) == 76) {
    label = 0; //@line 12998
    $$0229316 = $365; //@line 12999
    $$0240315 = 0; //@line 12999
    $$1244314 = 0; //@line 12999
    while (1) {
     $318 = HEAP32[$$0229316 >> 2] | 0; //@line 13001
     if (!$318) {
      $$0240$lcssa = $$0240315; //@line 13004
      $$2245 = $$1244314; //@line 13004
      break;
     }
     $320 = _wctomb($9, $318) | 0; //@line 13007
     if (($320 | 0) < 0 | $320 >>> 0 > ($$4258354 - $$0240315 | 0) >>> 0) {
      $$0240$lcssa = $$0240315; //@line 13013
      $$2245 = $320; //@line 13013
      break;
     }
     $325 = $320 + $$0240315 | 0; //@line 13017
     if ($$4258354 >>> 0 > $325 >>> 0) {
      $$0229316 = $$0229316 + 4 | 0; //@line 13020
      $$0240315 = $325; //@line 13020
      $$1244314 = $320; //@line 13020
     } else {
      $$0240$lcssa = $325; //@line 13022
      $$2245 = $320; //@line 13022
      break;
     }
    }
    if (($$2245 | 0) < 0) {
     $$0 = -1; //@line 13028
     break L1;
    }
    _pad_676($0, 32, $$1260, $$0240$lcssa, $$1263$); //@line 13031
    if (!$$0240$lcssa) {
     $$0240$lcssa356 = 0; //@line 13034
     label = 85; //@line 13035
    } else {
     $$1230327 = $365; //@line 13037
     $$1241326 = 0; //@line 13037
     while (1) {
      $329 = HEAP32[$$1230327 >> 2] | 0; //@line 13039
      if (!$329) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 13042
       label = 85; //@line 13043
       break L97;
      }
      $331 = _wctomb($9, $329) | 0; //@line 13046
      $$1241326 = $331 + $$1241326 | 0; //@line 13047
      if (($$1241326 | 0) > ($$0240$lcssa | 0)) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 13050
       label = 85; //@line 13051
       break L97;
      }
      _out_670($0, $9, $331); //@line 13055
      if ($$1241326 >>> 0 >= $$0240$lcssa >>> 0) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 13060
       label = 85; //@line 13061
       break;
      } else {
       $$1230327 = $$1230327 + 4 | 0; //@line 13058
      }
     }
    }
   }
  } while (0);
  if ((label | 0) == 68) {
   label = 0; //@line 13069
   $284 = ($281 | 0) != 0 | ($283 | 0) != 0; //@line 13075
   $or$cond = ($$2256 | 0) != 0 | $284; //@line 13077
   $290 = $12 - $$0228 + (($284 ^ 1) & 1) | 0; //@line 13082
   $$2 = $or$cond ? $$0228 : $11; //@line 13087
   $$2234 = $$1233; //@line 13087
   $$2239 = $$1238; //@line 13087
   $$2251 = $11; //@line 13087
   $$5 = $or$cond ? ($$2256 | 0) > ($290 | 0) ? $$2256 : $290 : $$2256; //@line 13087
   $$6268 = ($$2256 | 0) > -1 ? $$4266 & -65537 : $$4266; //@line 13087
  } else if ((label | 0) == 85) {
   label = 0; //@line 13090
   _pad_676($0, 32, $$1260, $$0240$lcssa356, $$1263$ ^ 8192); //@line 13092
   $$0243 = ($$1260 | 0) > ($$0240$lcssa356 | 0) ? $$1260 : $$0240$lcssa356; //@line 13095
   $$0247 = $$1248; //@line 13095
   $$0269 = $$3272; //@line 13095
   continue;
  }
  $343 = $$2251 - $$2 | 0; //@line 13100
  $$$5 = ($$5 | 0) < ($343 | 0) ? $343 : $$5; //@line 13102
  $345 = $$$5 + $$2234 | 0; //@line 13103
  $$2261 = ($$1260 | 0) < ($345 | 0) ? $345 : $$1260; //@line 13105
  _pad_676($0, 32, $$2261, $345, $$6268); //@line 13106
  _out_670($0, $$2239, $$2234); //@line 13107
  _pad_676($0, 48, $$2261, $345, $$6268 ^ 65536); //@line 13109
  _pad_676($0, 48, $$$5, $343, 0); //@line 13110
  _out_670($0, $$2, $343); //@line 13111
  _pad_676($0, 32, $$2261, $345, $$6268 ^ 8192); //@line 13113
  $$0243 = $$2261; //@line 13114
  $$0247 = $$1248; //@line 13114
  $$0269 = $$3272; //@line 13114
 }
 L116 : do {
  if ((label | 0) == 88) {
   if (!$0) {
    if (!$$0269) {
     $$0 = 0; //@line 13122
    } else {
     $$2242302 = 1; //@line 13124
     while (1) {
      $352 = HEAP32[$4 + ($$2242302 << 2) >> 2] | 0; //@line 13127
      if (!$352) {
       $$2242$lcssa = $$2242302; //@line 13130
       break;
      }
      _pop_arg_673($3 + ($$2242302 << 3) | 0, $352, $2); //@line 13134
      $356 = $$2242302 + 1 | 0; //@line 13135
      if (($$2242302 | 0) < 9) {
       $$2242302 = $356; //@line 13138
      } else {
       $$2242$lcssa = $356; //@line 13140
       break;
      }
     }
     if (($$2242$lcssa | 0) < 10) {
      $$3300 = $$2242$lcssa; //@line 13146
      while (1) {
       if (HEAP32[$4 + ($$3300 << 2) >> 2] | 0) {
        $$0 = -1; //@line 13152
        break L116;
       }
       if (($$3300 | 0) < 9) {
        $$3300 = $$3300 + 1 | 0; //@line 13158
       } else {
        $$0 = 1; //@line 13160
        break;
       }
      }
     } else {
      $$0 = 1; //@line 13165
     }
    }
   } else {
    $$0 = $$1248; //@line 13169
   }
  }
 } while (0);
 STACKTOP = sp; //@line 13173
 return $$0 | 0; //@line 13173
}
function _mbed_vtracef($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0$i = 0, $$0141 = 0, $$0142 = 0, $$0144 = 0, $$0199 = 0, $$1$off0 = 0, $$10 = 0, $$1143 = 0, $$1145 = 0, $$1152 = 0, $$1152$ = 0, $$13 = 0, $$18 = 0, $$3 = 0, $$3147 = 0, $$3147168 = 0, $$3154 = 0, $$3169 = 0, $$5156 = 0, $$5156$ = 0, $$6 = 0, $$6150 = 0, $$9 = 0, $$lobit = 0, $$pre = 0, $$sink = 0, $125 = 0, $126 = 0, $151 = 0, $157 = 0, $168 = 0, $169 = 0, $171 = 0, $181 = 0, $182 = 0, $184 = 0, $186 = 0, $194 = 0, $201 = 0, $202 = 0, $204 = 0, $206 = 0, $209 = 0, $34 = 0, $38 = 0, $4 = 0, $43 = 0, $5 = 0, $54 = 0, $55 = 0, $59 = 0, $60 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $78 = 0, $82 = 0, $89 = 0, $95 = 0, $AsyncCtx = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx45 = 0, $AsyncCtx49 = 0, $AsyncCtx52 = 0, $AsyncCtx56 = 0, $AsyncCtx60 = 0, $AsyncCtx64 = 0, $extract$t159 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3810
 STACKTOP = STACKTOP + 96 | 0; //@line 3811
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 3811
 $vararg_buffer23 = sp + 72 | 0; //@line 3812
 $vararg_buffer20 = sp + 64 | 0; //@line 3813
 $vararg_buffer18 = sp + 56 | 0; //@line 3814
 $vararg_buffer15 = sp + 48 | 0; //@line 3815
 $vararg_buffer12 = sp + 40 | 0; //@line 3816
 $vararg_buffer9 = sp + 32 | 0; //@line 3817
 $vararg_buffer6 = sp + 24 | 0; //@line 3818
 $vararg_buffer3 = sp + 16 | 0; //@line 3819
 $vararg_buffer1 = sp + 8 | 0; //@line 3820
 $vararg_buffer = sp; //@line 3821
 $4 = sp + 80 | 0; //@line 3822
 $5 = HEAP32[176] | 0; //@line 3823
 do {
  if ($5 | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(104, sp) | 0; //@line 3827
   FUNCTION_TABLE_v[$5 & 7](); //@line 3828
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 126; //@line 3831
    HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer18; //@line 3833
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer18; //@line 3835
    HEAP8[$AsyncCtx + 12 >> 0] = $0; //@line 3837
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 3839
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer15; //@line 3841
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer15; //@line 3843
    HEAP32[$AsyncCtx + 28 >> 2] = $2; //@line 3845
    HEAP32[$AsyncCtx + 32 >> 2] = $3; //@line 3847
    HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer23; //@line 3849
    HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer23; //@line 3851
    HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer; //@line 3853
    HEAP32[$AsyncCtx + 48 >> 2] = $vararg_buffer; //@line 3855
    HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer1; //@line 3857
    HEAP32[$AsyncCtx + 56 >> 2] = $vararg_buffer1; //@line 3859
    HEAP32[$AsyncCtx + 60 >> 2] = $vararg_buffer3; //@line 3861
    HEAP32[$AsyncCtx + 64 >> 2] = $vararg_buffer3; //@line 3863
    HEAP32[$AsyncCtx + 68 >> 2] = $vararg_buffer20; //@line 3865
    HEAP32[$AsyncCtx + 72 >> 2] = $vararg_buffer20; //@line 3867
    HEAP32[$AsyncCtx + 76 >> 2] = $4; //@line 3869
    HEAP32[$AsyncCtx + 80 >> 2] = $vararg_buffer6; //@line 3871
    HEAP32[$AsyncCtx + 84 >> 2] = $vararg_buffer6; //@line 3873
    HEAP32[$AsyncCtx + 88 >> 2] = $vararg_buffer12; //@line 3875
    HEAP32[$AsyncCtx + 92 >> 2] = $vararg_buffer12; //@line 3877
    HEAP32[$AsyncCtx + 96 >> 2] = $vararg_buffer9; //@line 3879
    HEAP32[$AsyncCtx + 100 >> 2] = $vararg_buffer9; //@line 3881
    sp = STACKTOP; //@line 3882
    STACKTOP = sp; //@line 3883
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3885
    HEAP32[178] = (HEAP32[178] | 0) + 1; //@line 3888
    break;
   }
  }
 } while (0);
 $34 = HEAP32[167] | 0; //@line 3893
 do {
  if ($34 | 0) {
   HEAP8[$34 >> 0] = 0; //@line 3897
   do {
    if ($0 << 24 >> 24 > -1 & ($1 | 0) != 0) {
     $38 = HEAP32[164] | 0; //@line 3903
     if (HEAP8[$38 >> 0] | 0) {
      if (_strstr($38, $1) | 0) {
       $$0$i = 1; //@line 3910
       break;
      }
     }
     $43 = HEAP32[165] | 0; //@line 3914
     if (!(HEAP8[$43 >> 0] | 0)) {
      label = 11; //@line 3918
     } else {
      if (!(_strstr($43, $1) | 0)) {
       $$0$i = 1; //@line 3923
      } else {
       label = 11; //@line 3925
      }
     }
    } else {
     label = 11; //@line 3929
    }
   } while (0);
   if ((label | 0) == 11) {
    $$0$i = 0; //@line 3933
   }
   if (!((HEAP32[174] | 0) != 0 & ((($1 | 0) == 0 | (($2 | 0) == 0 | $$0$i)) ^ 1))) {
    HEAP32[171] = HEAP32[169]; //@line 3945
    break;
   }
   $54 = HEAPU8[652] | 0; //@line 3949
   $55 = $0 & 255; //@line 3950
   if ($55 & 31 & $54 | 0) {
    $59 = $54 & 64; //@line 3955
    $$lobit = $59 >>> 6; //@line 3956
    $60 = $$lobit & 255; //@line 3957
    $64 = ($54 & 32 | 0) == 0; //@line 3961
    $65 = HEAP32[168] | 0; //@line 3962
    $66 = HEAP32[167] | 0; //@line 3963
    $67 = $0 << 24 >> 24 == 1; //@line 3964
    do {
     if ($67 | ($54 & 128 | 0) != 0) {
      $AsyncCtx64 = _emscripten_alloc_async_context(8, sp) | 0; //@line 3968
      _vsnprintf($66, $65, $2, $3) | 0; //@line 3969
      if (___async) {
       HEAP32[$AsyncCtx64 >> 2] = 127; //@line 3972
       HEAP8[$AsyncCtx64 + 4 >> 0] = $67 & 1; //@line 3975
       sp = STACKTOP; //@line 3976
       STACKTOP = sp; //@line 3977
       return;
      }
      _emscripten_free_async_context($AsyncCtx64 | 0); //@line 3979
      $69 = HEAP32[175] | 0; //@line 3980
      if (!($67 & ($69 | 0) != 0)) {
       $73 = HEAP32[174] | 0; //@line 3984
       $74 = HEAP32[167] | 0; //@line 3985
       $AsyncCtx34 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3986
       FUNCTION_TABLE_vi[$73 & 1023]($74); //@line 3987
       if (___async) {
        HEAP32[$AsyncCtx34 >> 2] = 130; //@line 3990
        sp = STACKTOP; //@line 3991
        STACKTOP = sp; //@line 3992
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx34 | 0); //@line 3994
        break;
       }
      }
      $71 = HEAP32[167] | 0; //@line 3998
      $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3999
      FUNCTION_TABLE_vi[$69 & 1023]($71); //@line 4000
      if (___async) {
       HEAP32[$AsyncCtx27 >> 2] = 128; //@line 4003
       sp = STACKTOP; //@line 4004
       STACKTOP = sp; //@line 4005
       return;
      }
      _emscripten_free_async_context($AsyncCtx27 | 0); //@line 4007
      $72 = HEAP32[175] | 0; //@line 4008
      $AsyncCtx30 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4009
      FUNCTION_TABLE_vi[$72 & 1023](12236); //@line 4010
      if (___async) {
       HEAP32[$AsyncCtx30 >> 2] = 129; //@line 4013
       sp = STACKTOP; //@line 4014
       STACKTOP = sp; //@line 4015
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx30 | 0); //@line 4017
       break;
      }
     } else {
      if (!$59) {
       $$1$off0 = ($$lobit | 0) != 0; //@line 4024
       $$1143 = $66; //@line 4024
       $$1145 = $65; //@line 4024
       $$3154 = 0; //@line 4024
       label = 38; //@line 4025
      } else {
       if ($64) {
        $$0142 = $66; //@line 4028
        $$0144 = $65; //@line 4028
       } else {
        $76 = _snprintf($66, $65, 12238, $vararg_buffer) | 0; //@line 4030
        $$ = ($76 | 0) >= ($65 | 0) ? 0 : $76; //@line 4032
        $78 = ($$ | 0) > 0; //@line 4033
        $$0142 = $78 ? $66 + $$ | 0 : $66; //@line 4038
        $$0144 = $65 - ($78 ? $$ : 0) | 0; //@line 4038
       }
       if (($$0144 | 0) > 0) {
        $82 = $55 + -2 | 0; //@line 4042
        switch ($82 >>> 1 | $82 << 31 | 0) {
        case 0:
         {
          $$sink = 12256; //@line 4048
          label = 35; //@line 4049
          break;
         }
        case 1:
         {
          $$sink = 12262; //@line 4053
          label = 35; //@line 4054
          break;
         }
        case 3:
         {
          $$sink = 12250; //@line 4058
          label = 35; //@line 4059
          break;
         }
        case 7:
         {
          $$sink = 12244; //@line 4063
          label = 35; //@line 4064
          break;
         }
        default:
         {
          $$0141 = 0; //@line 4068
          $$1152 = 0; //@line 4068
         }
        }
        if ((label | 0) == 35) {
         HEAP32[$vararg_buffer1 >> 2] = $$sink; //@line 4072
         $$0141 = $60 & 1; //@line 4075
         $$1152 = _snprintf($$0142, $$0144, 12268, $vararg_buffer1) | 0; //@line 4075
        }
        $$1152$ = ($$1152 | 0) < ($$0144 | 0) ? $$1152 : 0; //@line 4078
        $extract$t159 = $$0141 << 24 >> 24 != 0; //@line 4080
        if (($$1152$ | 0) > 0) {
         $89 = $$0141 << 24 >> 24 == 0; //@line 4082
         $$1$off0 = $extract$t159; //@line 4087
         $$1143 = $89 ? $$0142 : $$0142 + $$1152$ | 0; //@line 4087
         $$1145 = $$0144 - ($89 ? 0 : $$1152$) | 0; //@line 4087
         $$3154 = $$1152; //@line 4087
         label = 38; //@line 4088
        } else {
         $$1$off0 = $extract$t159; //@line 4090
         $$1143 = $$0142; //@line 4090
         $$1145 = $$0144; //@line 4090
         $$3154 = $$1152$; //@line 4090
         label = 38; //@line 4091
        }
       }
      }
      L54 : do {
       if ((label | 0) == 38) {
        do {
         if (($$1145 | 0) > 0 & (HEAP32[172] | 0) != 0) {
          HEAP32[$4 >> 2] = HEAP32[$3 >> 2]; //@line 4104
          $AsyncCtx60 = _emscripten_alloc_async_context(104, sp) | 0; //@line 4105
          $95 = _vsnprintf(0, 0, $2, $4) | 0; //@line 4106
          if (___async) {
           HEAP32[$AsyncCtx60 >> 2] = 131; //@line 4109
           HEAP32[$AsyncCtx60 + 4 >> 2] = $$3154; //@line 4111
           HEAP32[$AsyncCtx60 + 8 >> 2] = $vararg_buffer18; //@line 4113
           HEAP32[$AsyncCtx60 + 12 >> 2] = $vararg_buffer18; //@line 4115
           HEAP32[$AsyncCtx60 + 16 >> 2] = $vararg_buffer23; //@line 4117
           HEAP32[$AsyncCtx60 + 20 >> 2] = $vararg_buffer23; //@line 4119
           HEAP8[$AsyncCtx60 + 24 >> 0] = $$1$off0 & 1; //@line 4122
           HEAP32[$AsyncCtx60 + 28 >> 2] = $vararg_buffer20; //@line 4124
           HEAP32[$AsyncCtx60 + 32 >> 2] = $vararg_buffer20; //@line 4126
           HEAP32[$AsyncCtx60 + 36 >> 2] = $vararg_buffer15; //@line 4128
           HEAP32[$AsyncCtx60 + 40 >> 2] = $1; //@line 4130
           HEAP32[$AsyncCtx60 + 44 >> 2] = $vararg_buffer15; //@line 4132
           HEAP32[$AsyncCtx60 + 48 >> 2] = $2; //@line 4134
           HEAP32[$AsyncCtx60 + 52 >> 2] = $3; //@line 4136
           HEAP32[$AsyncCtx60 + 56 >> 2] = $vararg_buffer3; //@line 4138
           HEAP32[$AsyncCtx60 + 60 >> 2] = $$1143; //@line 4140
           HEAP32[$AsyncCtx60 + 64 >> 2] = $$1145; //@line 4142
           HEAP32[$AsyncCtx60 + 68 >> 2] = $vararg_buffer3; //@line 4144
           HEAP32[$AsyncCtx60 + 72 >> 2] = $4; //@line 4146
           HEAP32[$AsyncCtx60 + 76 >> 2] = $vararg_buffer6; //@line 4148
           HEAP32[$AsyncCtx60 + 80 >> 2] = $vararg_buffer6; //@line 4150
           HEAP32[$AsyncCtx60 + 84 >> 2] = $55; //@line 4152
           HEAP32[$AsyncCtx60 + 88 >> 2] = $vararg_buffer12; //@line 4154
           HEAP32[$AsyncCtx60 + 92 >> 2] = $vararg_buffer12; //@line 4156
           HEAP32[$AsyncCtx60 + 96 >> 2] = $vararg_buffer9; //@line 4158
           HEAP32[$AsyncCtx60 + 100 >> 2] = $vararg_buffer9; //@line 4160
           sp = STACKTOP; //@line 4161
           STACKTOP = sp; //@line 4162
           return;
          }
          _emscripten_free_async_context($AsyncCtx60 | 0); //@line 4164
          $125 = HEAP32[172] | 0; //@line 4169
          $AsyncCtx38 = _emscripten_alloc_async_context(100, sp) | 0; //@line 4170
          $126 = FUNCTION_TABLE_ii[$125 & 15](($$3154 | 0 ? 4 : 0) + $$3154 + $95 | 0) | 0; //@line 4171
          if (___async) {
           HEAP32[$AsyncCtx38 >> 2] = 132; //@line 4174
           HEAP32[$AsyncCtx38 + 4 >> 2] = $vararg_buffer18; //@line 4176
           HEAP32[$AsyncCtx38 + 8 >> 2] = $vararg_buffer18; //@line 4178
           HEAP32[$AsyncCtx38 + 12 >> 2] = $vararg_buffer15; //@line 4180
           HEAP32[$AsyncCtx38 + 16 >> 2] = $1; //@line 4182
           HEAP32[$AsyncCtx38 + 20 >> 2] = $vararg_buffer15; //@line 4184
           HEAP32[$AsyncCtx38 + 24 >> 2] = $2; //@line 4186
           HEAP32[$AsyncCtx38 + 28 >> 2] = $3; //@line 4188
           HEAP32[$AsyncCtx38 + 32 >> 2] = $vararg_buffer23; //@line 4190
           HEAP32[$AsyncCtx38 + 36 >> 2] = $vararg_buffer23; //@line 4192
           HEAP8[$AsyncCtx38 + 40 >> 0] = $$1$off0 & 1; //@line 4195
           HEAP32[$AsyncCtx38 + 44 >> 2] = $vararg_buffer3; //@line 4197
           HEAP32[$AsyncCtx38 + 48 >> 2] = $$1143; //@line 4199
           HEAP32[$AsyncCtx38 + 52 >> 2] = $$1145; //@line 4201
           HEAP32[$AsyncCtx38 + 56 >> 2] = $vararg_buffer3; //@line 4203
           HEAP32[$AsyncCtx38 + 60 >> 2] = $4; //@line 4205
           HEAP32[$AsyncCtx38 + 64 >> 2] = $vararg_buffer20; //@line 4207
           HEAP32[$AsyncCtx38 + 68 >> 2] = $vararg_buffer20; //@line 4209
           HEAP32[$AsyncCtx38 + 72 >> 2] = $vararg_buffer6; //@line 4211
           HEAP32[$AsyncCtx38 + 76 >> 2] = $vararg_buffer6; //@line 4213
           HEAP32[$AsyncCtx38 + 80 >> 2] = $55; //@line 4215
           HEAP32[$AsyncCtx38 + 84 >> 2] = $vararg_buffer12; //@line 4217
           HEAP32[$AsyncCtx38 + 88 >> 2] = $vararg_buffer12; //@line 4219
           HEAP32[$AsyncCtx38 + 92 >> 2] = $vararg_buffer9; //@line 4221
           HEAP32[$AsyncCtx38 + 96 >> 2] = $vararg_buffer9; //@line 4223
           sp = STACKTOP; //@line 4224
           STACKTOP = sp; //@line 4225
           return;
          } else {
           _emscripten_free_async_context($AsyncCtx38 | 0); //@line 4227
           HEAP32[$vararg_buffer3 >> 2] = $126; //@line 4228
           $151 = _snprintf($$1143, $$1145, 12268, $vararg_buffer3) | 0; //@line 4229
           $$10 = ($151 | 0) >= ($$1145 | 0) ? 0 : $151; //@line 4231
           if (($$10 | 0) > 0) {
            $$3 = $$1143 + $$10 | 0; //@line 4236
            $$3147 = $$1145 - $$10 | 0; //@line 4236
            label = 44; //@line 4237
            break;
           } else {
            $$3147168 = $$1145; //@line 4240
            $$3169 = $$1143; //@line 4240
            break;
           }
          }
         } else {
          $$3 = $$1143; //@line 4245
          $$3147 = $$1145; //@line 4245
          label = 44; //@line 4246
         }
        } while (0);
        if ((label | 0) == 44) {
         if (($$3147 | 0) > 0) {
          $$3147168 = $$3147; //@line 4252
          $$3169 = $$3; //@line 4252
         } else {
          break;
         }
        }
        $157 = $55 + -2 | 0; //@line 4257
        switch ($157 >>> 1 | $157 << 31 | 0) {
        case 0:
         {
          HEAP32[$vararg_buffer6 >> 2] = $1; //@line 4263
          $$5156 = _snprintf($$3169, $$3147168, 12271, $vararg_buffer6) | 0; //@line 4265
          break;
         }
        case 1:
         {
          HEAP32[$vararg_buffer9 >> 2] = $1; //@line 4269
          $$5156 = _snprintf($$3169, $$3147168, 12286, $vararg_buffer9) | 0; //@line 4271
          break;
         }
        case 3:
         {
          HEAP32[$vararg_buffer12 >> 2] = $1; //@line 4275
          $$5156 = _snprintf($$3169, $$3147168, 12301, $vararg_buffer12) | 0; //@line 4277
          break;
         }
        case 7:
         {
          HEAP32[$vararg_buffer15 >> 2] = $1; //@line 4281
          $$5156 = _snprintf($$3169, $$3147168, 12316, $vararg_buffer15) | 0; //@line 4283
          break;
         }
        default:
         {
          $$5156 = _snprintf($$3169, $$3147168, 12331, $vararg_buffer18) | 0; //@line 4288
         }
        }
        $$5156$ = ($$5156 | 0) < ($$3147168 | 0) ? $$5156 : 0; //@line 4292
        $168 = $$3169 + $$5156$ | 0; //@line 4294
        $169 = $$3147168 - $$5156$ | 0; //@line 4295
        if (($$5156$ | 0) > 0 & ($169 | 0) > 0) {
         $AsyncCtx56 = _emscripten_alloc_async_context(32, sp) | 0; //@line 4299
         $171 = _vsnprintf($168, $169, $2, $3) | 0; //@line 4300
         if (___async) {
          HEAP32[$AsyncCtx56 >> 2] = 133; //@line 4303
          HEAP32[$AsyncCtx56 + 4 >> 2] = $vararg_buffer23; //@line 4305
          HEAP32[$AsyncCtx56 + 8 >> 2] = $vararg_buffer23; //@line 4307
          HEAP8[$AsyncCtx56 + 12 >> 0] = $$1$off0 & 1; //@line 4310
          HEAP32[$AsyncCtx56 + 16 >> 2] = $vararg_buffer20; //@line 4312
          HEAP32[$AsyncCtx56 + 20 >> 2] = $vararg_buffer20; //@line 4314
          HEAP32[$AsyncCtx56 + 24 >> 2] = $169; //@line 4316
          HEAP32[$AsyncCtx56 + 28 >> 2] = $168; //@line 4318
          sp = STACKTOP; //@line 4319
          STACKTOP = sp; //@line 4320
          return;
         }
         _emscripten_free_async_context($AsyncCtx56 | 0); //@line 4322
         $$13 = ($171 | 0) >= ($169 | 0) ? 0 : $171; //@line 4324
         $181 = $168 + $$13 | 0; //@line 4326
         $182 = $169 - $$13 | 0; //@line 4327
         if (($$13 | 0) > 0) {
          $184 = HEAP32[173] | 0; //@line 4330
          do {
           if (($182 | 0) > 0 & ($184 | 0) != 0) {
            $AsyncCtx42 = _emscripten_alloc_async_context(32, sp) | 0; //@line 4335
            $186 = FUNCTION_TABLE_i[$184 & 7]() | 0; //@line 4336
            if (___async) {
             HEAP32[$AsyncCtx42 >> 2] = 134; //@line 4339
             HEAP32[$AsyncCtx42 + 4 >> 2] = $vararg_buffer20; //@line 4341
             HEAP32[$AsyncCtx42 + 8 >> 2] = $181; //@line 4343
             HEAP32[$AsyncCtx42 + 12 >> 2] = $182; //@line 4345
             HEAP32[$AsyncCtx42 + 16 >> 2] = $vararg_buffer20; //@line 4347
             HEAP8[$AsyncCtx42 + 20 >> 0] = $$1$off0 & 1; //@line 4350
             HEAP32[$AsyncCtx42 + 24 >> 2] = $vararg_buffer23; //@line 4352
             HEAP32[$AsyncCtx42 + 28 >> 2] = $vararg_buffer23; //@line 4354
             sp = STACKTOP; //@line 4355
             STACKTOP = sp; //@line 4356
             return;
            } else {
             _emscripten_free_async_context($AsyncCtx42 | 0); //@line 4358
             HEAP32[$vararg_buffer20 >> 2] = $186; //@line 4359
             $194 = _snprintf($181, $182, 12268, $vararg_buffer20) | 0; //@line 4360
             $$18 = ($194 | 0) >= ($182 | 0) ? 0 : $194; //@line 4362
             if (($$18 | 0) > 0) {
              $$6 = $181 + $$18 | 0; //@line 4367
              $$6150 = $182 - $$18 | 0; //@line 4367
              $$9 = $$18; //@line 4367
              break;
             } else {
              break L54;
             }
            }
           } else {
            $$6 = $181; //@line 4374
            $$6150 = $182; //@line 4374
            $$9 = $$13; //@line 4374
           }
          } while (0);
          if (!(($$9 | 0) < 1 | ($$6150 | 0) < 1 | $$1$off0 ^ 1)) {
           _snprintf($$6, $$6150, 12346, $vararg_buffer23) | 0; //@line 4383
          }
         }
        }
       }
      } while (0);
      $201 = HEAP32[174] | 0; //@line 4389
      $202 = HEAP32[167] | 0; //@line 4390
      $AsyncCtx45 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4391
      FUNCTION_TABLE_vi[$201 & 1023]($202); //@line 4392
      if (___async) {
       HEAP32[$AsyncCtx45 >> 2] = 135; //@line 4395
       sp = STACKTOP; //@line 4396
       STACKTOP = sp; //@line 4397
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx45 | 0); //@line 4399
       break;
      }
     }
    } while (0);
    HEAP32[171] = HEAP32[169]; //@line 4405
   }
  }
 } while (0);
 $204 = HEAP32[177] | 0; //@line 4409
 if (!$204) {
  STACKTOP = sp; //@line 4412
  return;
 }
 $206 = HEAP32[178] | 0; //@line 4414
 HEAP32[178] = 0; //@line 4415
 $AsyncCtx49 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4416
 FUNCTION_TABLE_v[$204 & 7](); //@line 4417
 if (___async) {
  HEAP32[$AsyncCtx49 >> 2] = 136; //@line 4420
  HEAP32[$AsyncCtx49 + 4 >> 2] = $206; //@line 4422
  sp = STACKTOP; //@line 4423
  STACKTOP = sp; //@line 4424
  return;
 }
 _emscripten_free_async_context($AsyncCtx49 | 0); //@line 4426
 if (($206 | 0) > 1) {
  $$0199 = $206; //@line 4429
 } else {
  STACKTOP = sp; //@line 4431
  return;
 }
 while (1) {
  $209 = $$0199 + -1 | 0; //@line 4434
  $$pre = HEAP32[177] | 0; //@line 4435
  $AsyncCtx52 = _emscripten_alloc_async_context(12, sp) | 0; //@line 4436
  FUNCTION_TABLE_v[$$pre & 7](); //@line 4437
  if (___async) {
   label = 70; //@line 4440
   break;
  }
  _emscripten_free_async_context($AsyncCtx52 | 0); //@line 4443
  if (($$0199 | 0) > 2) {
   $$0199 = $209; //@line 4446
  } else {
   label = 72; //@line 4448
   break;
  }
 }
 if ((label | 0) == 70) {
  HEAP32[$AsyncCtx52 >> 2] = 137; //@line 4453
  HEAP32[$AsyncCtx52 + 4 >> 2] = $$0199; //@line 4455
  HEAP32[$AsyncCtx52 + 8 >> 2] = $209; //@line 4457
  sp = STACKTOP; //@line 4458
  STACKTOP = sp; //@line 4459
  return;
 } else if ((label | 0) == 72) {
  STACKTOP = sp; //@line 4462
  return;
 }
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre = 0, $$pre$i$i = 0, $$pre$i$i25 = 0, $$pre$i$i38 = 0, $$pre$i$i54 = 0, $$pre$i$i70 = 0, $$pre123 = 0, $$pre124 = 0, $$pre125 = 0, $$pre126 = 0, $10 = 0, $110 = 0, $111 = 0, $123 = 0, $124 = 0, $131 = 0, $132 = 0, $134 = 0, $135 = 0, $138 = 0, $149 = 0, $150 = 0, $161 = 0, $162 = 0, $168 = 0, $169 = 0, $171 = 0, $172 = 0, $175 = 0, $185 = 0, $186 = 0, $196 = 0, $197 = 0, $2 = 0, $204 = 0, $209 = 0, $214 = 0, $23 = 0, $24 = 0, $3 = 0, $38 = 0, $39 = 0, $4 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $55 = 0, $6 = 0, $68 = 0, $69 = 0, $7 = 0, $82 = 0, $83 = 0, $91 = 0, $92 = 0, $94 = 0, $95 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx29 = 0, $AsyncCtx32 = 0, $AsyncCtx35 = 0, $AsyncCtx38 = 0, $AsyncCtx41 = 0, $AsyncCtx44 = 0, $AsyncCtx47 = 0, $AsyncCtx5 = 0, $AsyncCtx50 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5132
 STACKTOP = STACKTOP + 16 | 0; //@line 5133
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5133
 $2 = sp; //@line 5134
 $3 = $2 + 12 | 0; //@line 5135
 HEAP32[$2 >> 2] = 165; //@line 5136
 HEAP32[$2 + 4 >> 2] = 0; //@line 5138
 HEAP32[$2 + 8 >> 2] = $0; //@line 5140
 HEAP32[$3 >> 2] = 808; //@line 5141
 $4 = $0 + 2368 | 0; //@line 5142
 do {
  if (($4 | 0) == ($2 | 0)) {
   $38 = 808; //@line 5146
   label = 10; //@line 5147
  } else {
   $6 = $0 + 2380 | 0; //@line 5149
   $7 = HEAP32[$6 >> 2] | 0; //@line 5150
   if (!$7) {
    $23 = 808; //@line 5153
   } else {
    $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 5156
    $AsyncCtx = _emscripten_alloc_async_context(44, sp) | 0; //@line 5157
    FUNCTION_TABLE_vi[$10 & 1023]($4); //@line 5158
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 166; //@line 5161
     HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 5163
     HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 5165
     HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 5167
     HEAP32[$AsyncCtx + 16 >> 2] = $4; //@line 5169
     HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 5171
     HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 5173
     HEAP32[$AsyncCtx + 28 >> 2] = $6; //@line 5175
     HEAP32[$AsyncCtx + 32 >> 2] = $2; //@line 5177
     HEAP32[$AsyncCtx + 36 >> 2] = $2; //@line 5179
     HEAP32[$AsyncCtx + 40 >> 2] = $2; //@line 5181
     sp = STACKTOP; //@line 5182
     STACKTOP = sp; //@line 5183
     return;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5185
    $$pre = HEAP32[$3 >> 2] | 0; //@line 5186
    if (!$$pre) {
     HEAP32[$6 >> 2] = 0; //@line 5189
     break;
    } else {
     $23 = $$pre; //@line 5192
    }
   }
   $24 = HEAP32[$23 + 4 >> 2] | 0; //@line 5196
   $AsyncCtx2 = _emscripten_alloc_async_context(44, sp) | 0; //@line 5197
   FUNCTION_TABLE_vii[$24 & 15]($4, $2); //@line 5198
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 167; //@line 5201
    HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 5203
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 5205
    HEAP32[$AsyncCtx2 + 12 >> 2] = $1; //@line 5207
    HEAP32[$AsyncCtx2 + 16 >> 2] = $4; //@line 5209
    HEAP32[$AsyncCtx2 + 20 >> 2] = $2; //@line 5211
    HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 5213
    HEAP32[$AsyncCtx2 + 28 >> 2] = $6; //@line 5215
    HEAP32[$AsyncCtx2 + 32 >> 2] = $2; //@line 5217
    HEAP32[$AsyncCtx2 + 36 >> 2] = $2; //@line 5219
    HEAP32[$AsyncCtx2 + 40 >> 2] = $2; //@line 5221
    sp = STACKTOP; //@line 5222
    STACKTOP = sp; //@line 5223
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 5225
    $$pre$i$i = HEAP32[$3 >> 2] | 0; //@line 5226
    HEAP32[$6 >> 2] = $$pre$i$i; //@line 5228
    if (!$$pre$i$i) {
     break;
    } else {
     $38 = $$pre$i$i; //@line 5233
     label = 10; //@line 5234
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 10) {
   $39 = HEAP32[$38 + 8 >> 2] | 0; //@line 5243
   $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 5244
   FUNCTION_TABLE_vi[$39 & 1023]($2); //@line 5245
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 168; //@line 5248
    HEAP32[$AsyncCtx5 + 4 >> 2] = $2; //@line 5250
    HEAP32[$AsyncCtx5 + 8 >> 2] = $0; //@line 5252
    HEAP32[$AsyncCtx5 + 12 >> 2] = $1; //@line 5254
    HEAP32[$AsyncCtx5 + 16 >> 2] = $4; //@line 5256
    HEAP32[$AsyncCtx5 + 20 >> 2] = $2; //@line 5258
    HEAP32[$AsyncCtx5 + 24 >> 2] = $2; //@line 5260
    HEAP32[$AsyncCtx5 + 28 >> 2] = $2; //@line 5262
    HEAP32[$AsyncCtx5 + 32 >> 2] = $2; //@line 5264
    sp = STACKTOP; //@line 5265
    STACKTOP = sp; //@line 5266
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 5268
    break;
   }
  }
 } while (0);
 $48 = $2 + 12 | 0; //@line 5273
 HEAP32[$2 >> 2] = 6; //@line 5274
 HEAP32[$2 + 4 >> 2] = 0; //@line 5276
 HEAP32[$2 + 8 >> 2] = $0; //@line 5278
 HEAP32[$48 >> 2] = 820; //@line 5279
 $49 = $0 + 2400 | 0; //@line 5280
 do {
  if (($49 | 0) == ($2 | 0)) {
   $82 = 820; //@line 5284
   label = 22; //@line 5285
  } else {
   $51 = $0 + 2412 | 0; //@line 5287
   $52 = HEAP32[$51 >> 2] | 0; //@line 5288
   if (!$52) {
    $68 = 820; //@line 5291
   } else {
    $55 = HEAP32[$52 + 8 >> 2] | 0; //@line 5294
    $AsyncCtx8 = _emscripten_alloc_async_context(44, sp) | 0; //@line 5295
    FUNCTION_TABLE_vi[$55 & 1023]($49); //@line 5296
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 169; //@line 5299
     HEAP32[$AsyncCtx8 + 4 >> 2] = $2; //@line 5301
     HEAP32[$AsyncCtx8 + 8 >> 2] = $0; //@line 5303
     HEAP32[$AsyncCtx8 + 12 >> 2] = $48; //@line 5305
     HEAP32[$AsyncCtx8 + 16 >> 2] = $51; //@line 5307
     HEAP32[$AsyncCtx8 + 20 >> 2] = $1; //@line 5309
     HEAP32[$AsyncCtx8 + 24 >> 2] = $4; //@line 5311
     HEAP32[$AsyncCtx8 + 28 >> 2] = $2; //@line 5313
     HEAP32[$AsyncCtx8 + 32 >> 2] = $2; //@line 5315
     HEAP32[$AsyncCtx8 + 36 >> 2] = $49; //@line 5317
     HEAP32[$AsyncCtx8 + 40 >> 2] = $2; //@line 5319
     sp = STACKTOP; //@line 5320
     STACKTOP = sp; //@line 5321
     return;
    }
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 5323
    $$pre123 = HEAP32[$48 >> 2] | 0; //@line 5324
    if (!$$pre123) {
     HEAP32[$51 >> 2] = 0; //@line 5327
     break;
    } else {
     $68 = $$pre123; //@line 5330
    }
   }
   $69 = HEAP32[$68 + 4 >> 2] | 0; //@line 5334
   $AsyncCtx11 = _emscripten_alloc_async_context(40, sp) | 0; //@line 5335
   FUNCTION_TABLE_vii[$69 & 15]($49, $2); //@line 5336
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 170; //@line 5339
    HEAP32[$AsyncCtx11 + 4 >> 2] = $2; //@line 5341
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 5343
    HEAP32[$AsyncCtx11 + 12 >> 2] = $48; //@line 5345
    HEAP32[$AsyncCtx11 + 16 >> 2] = $51; //@line 5347
    HEAP32[$AsyncCtx11 + 20 >> 2] = $1; //@line 5349
    HEAP32[$AsyncCtx11 + 24 >> 2] = $4; //@line 5351
    HEAP32[$AsyncCtx11 + 28 >> 2] = $2; //@line 5353
    HEAP32[$AsyncCtx11 + 32 >> 2] = $2; //@line 5355
    HEAP32[$AsyncCtx11 + 36 >> 2] = $2; //@line 5357
    sp = STACKTOP; //@line 5358
    STACKTOP = sp; //@line 5359
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 5361
    $$pre$i$i25 = HEAP32[$48 >> 2] | 0; //@line 5362
    HEAP32[$51 >> 2] = $$pre$i$i25; //@line 5364
    if (!$$pre$i$i25) {
     break;
    } else {
     $82 = $$pre$i$i25; //@line 5369
     label = 22; //@line 5370
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 22) {
   $83 = HEAP32[$82 + 8 >> 2] | 0; //@line 5379
   $AsyncCtx14 = _emscripten_alloc_async_context(32, sp) | 0; //@line 5380
   FUNCTION_TABLE_vi[$83 & 1023]($2); //@line 5381
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 171; //@line 5384
    HEAP32[$AsyncCtx14 + 4 >> 2] = $2; //@line 5386
    HEAP32[$AsyncCtx14 + 8 >> 2] = $0; //@line 5388
    HEAP32[$AsyncCtx14 + 12 >> 2] = $1; //@line 5390
    HEAP32[$AsyncCtx14 + 16 >> 2] = $4; //@line 5392
    HEAP32[$AsyncCtx14 + 20 >> 2] = $2; //@line 5394
    HEAP32[$AsyncCtx14 + 24 >> 2] = $2; //@line 5396
    HEAP32[$AsyncCtx14 + 28 >> 2] = $2; //@line 5398
    sp = STACKTOP; //@line 5399
    STACKTOP = sp; //@line 5400
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 5402
    break;
   }
  }
 } while (0);
 $91 = $2 + 12 | 0; //@line 5407
 HEAP32[$2 >> 2] = 172; //@line 5408
 HEAP32[$2 + 4 >> 2] = 0; //@line 5410
 HEAP32[$2 + 8 >> 2] = $0; //@line 5412
 HEAP32[$91 >> 2] = 808; //@line 5413
 $92 = $0 + 2432 | 0; //@line 5414
 do {
  if (($92 | 0) == ($2 | 0)) {
   $123 = 808; //@line 5418
   label = 34; //@line 5419
  } else {
   $94 = $0 + 2444 | 0; //@line 5421
   $95 = HEAP32[$94 >> 2] | 0; //@line 5422
   if (!$95) {
    $110 = 808; //@line 5425
   } else {
    $98 = HEAP32[$95 + 8 >> 2] | 0; //@line 5428
    $AsyncCtx17 = _emscripten_alloc_async_context(40, sp) | 0; //@line 5429
    FUNCTION_TABLE_vi[$98 & 1023]($92); //@line 5430
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 173; //@line 5433
     HEAP32[$AsyncCtx17 + 4 >> 2] = $2; //@line 5435
     HEAP32[$AsyncCtx17 + 8 >> 2] = $2; //@line 5437
     HEAP32[$AsyncCtx17 + 12 >> 2] = $0; //@line 5439
     HEAP32[$AsyncCtx17 + 16 >> 2] = $94; //@line 5441
     HEAP32[$AsyncCtx17 + 20 >> 2] = $91; //@line 5443
     HEAP32[$AsyncCtx17 + 24 >> 2] = $92; //@line 5445
     HEAP32[$AsyncCtx17 + 28 >> 2] = $1; //@line 5447
     HEAP32[$AsyncCtx17 + 32 >> 2] = $4; //@line 5449
     HEAP32[$AsyncCtx17 + 36 >> 2] = $2; //@line 5451
     sp = STACKTOP; //@line 5452
     STACKTOP = sp; //@line 5453
     return;
    }
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 5455
    $$pre124 = HEAP32[$91 >> 2] | 0; //@line 5456
    if (!$$pre124) {
     HEAP32[$94 >> 2] = 0; //@line 5459
     break;
    } else {
     $110 = $$pre124; //@line 5462
    }
   }
   $111 = HEAP32[$110 + 4 >> 2] | 0; //@line 5466
   $AsyncCtx20 = _emscripten_alloc_async_context(36, sp) | 0; //@line 5467
   FUNCTION_TABLE_vii[$111 & 15]($92, $2); //@line 5468
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 174; //@line 5471
    HEAP32[$AsyncCtx20 + 4 >> 2] = $2; //@line 5473
    HEAP32[$AsyncCtx20 + 8 >> 2] = $2; //@line 5475
    HEAP32[$AsyncCtx20 + 12 >> 2] = $0; //@line 5477
    HEAP32[$AsyncCtx20 + 16 >> 2] = $91; //@line 5479
    HEAP32[$AsyncCtx20 + 20 >> 2] = $94; //@line 5481
    HEAP32[$AsyncCtx20 + 24 >> 2] = $1; //@line 5483
    HEAP32[$AsyncCtx20 + 28 >> 2] = $4; //@line 5485
    HEAP32[$AsyncCtx20 + 32 >> 2] = $2; //@line 5487
    sp = STACKTOP; //@line 5488
    STACKTOP = sp; //@line 5489
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 5491
    $$pre$i$i38 = HEAP32[$91 >> 2] | 0; //@line 5492
    HEAP32[$94 >> 2] = $$pre$i$i38; //@line 5494
    if (!$$pre$i$i38) {
     break;
    } else {
     $123 = $$pre$i$i38; //@line 5499
     label = 34; //@line 5500
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 34) {
   $124 = HEAP32[$123 + 8 >> 2] | 0; //@line 5509
   $AsyncCtx23 = _emscripten_alloc_async_context(28, sp) | 0; //@line 5510
   FUNCTION_TABLE_vi[$124 & 1023]($2); //@line 5511
   if (___async) {
    HEAP32[$AsyncCtx23 >> 2] = 175; //@line 5514
    HEAP32[$AsyncCtx23 + 4 >> 2] = $2; //@line 5516
    HEAP32[$AsyncCtx23 + 8 >> 2] = $2; //@line 5518
    HEAP32[$AsyncCtx23 + 12 >> 2] = $0; //@line 5520
    HEAP32[$AsyncCtx23 + 16 >> 2] = $1; //@line 5522
    HEAP32[$AsyncCtx23 + 20 >> 2] = $4; //@line 5524
    HEAP32[$AsyncCtx23 + 24 >> 2] = $2; //@line 5526
    sp = STACKTOP; //@line 5527
    STACKTOP = sp; //@line 5528
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx23 | 0); //@line 5530
    break;
   }
  }
 } while (0);
 $131 = $2 + 12 | 0; //@line 5535
 HEAP32[$2 >> 2] = 176; //@line 5536
 HEAP32[$2 + 4 >> 2] = 0; //@line 5538
 HEAP32[$2 + 8 >> 2] = $0; //@line 5540
 HEAP32[$131 >> 2] = 808; //@line 5541
 $132 = $0 + 2384 | 0; //@line 5542
 do {
  if (($132 | 0) == ($2 | 0)) {
   $161 = 808; //@line 5546
   label = 46; //@line 5547
  } else {
   $134 = $0 + 2396 | 0; //@line 5549
   $135 = HEAP32[$134 >> 2] | 0; //@line 5550
   if (!$135) {
    $149 = 808; //@line 5553
   } else {
    $138 = HEAP32[$135 + 8 >> 2] | 0; //@line 5556
    $AsyncCtx26 = _emscripten_alloc_async_context(36, sp) | 0; //@line 5557
    FUNCTION_TABLE_vi[$138 & 1023]($132); //@line 5558
    if (___async) {
     HEAP32[$AsyncCtx26 >> 2] = 177; //@line 5561
     HEAP32[$AsyncCtx26 + 4 >> 2] = $1; //@line 5563
     HEAP32[$AsyncCtx26 + 8 >> 2] = $4; //@line 5565
     HEAP32[$AsyncCtx26 + 12 >> 2] = $131; //@line 5567
     HEAP32[$AsyncCtx26 + 16 >> 2] = $0; //@line 5569
     HEAP32[$AsyncCtx26 + 20 >> 2] = $134; //@line 5571
     HEAP32[$AsyncCtx26 + 24 >> 2] = $2; //@line 5573
     HEAP32[$AsyncCtx26 + 28 >> 2] = $2; //@line 5575
     HEAP32[$AsyncCtx26 + 32 >> 2] = $132; //@line 5577
     sp = STACKTOP; //@line 5578
     STACKTOP = sp; //@line 5579
     return;
    }
    _emscripten_free_async_context($AsyncCtx26 | 0); //@line 5581
    $$pre125 = HEAP32[$131 >> 2] | 0; //@line 5582
    if (!$$pre125) {
     HEAP32[$134 >> 2] = 0; //@line 5585
     break;
    } else {
     $149 = $$pre125; //@line 5588
    }
   }
   $150 = HEAP32[$149 + 4 >> 2] | 0; //@line 5592
   $AsyncCtx29 = _emscripten_alloc_async_context(32, sp) | 0; //@line 5593
   FUNCTION_TABLE_vii[$150 & 15]($132, $2); //@line 5594
   if (___async) {
    HEAP32[$AsyncCtx29 >> 2] = 178; //@line 5597
    HEAP32[$AsyncCtx29 + 4 >> 2] = $1; //@line 5599
    HEAP32[$AsyncCtx29 + 8 >> 2] = $4; //@line 5601
    HEAP32[$AsyncCtx29 + 12 >> 2] = $0; //@line 5603
    HEAP32[$AsyncCtx29 + 16 >> 2] = $131; //@line 5605
    HEAP32[$AsyncCtx29 + 20 >> 2] = $134; //@line 5607
    HEAP32[$AsyncCtx29 + 24 >> 2] = $2; //@line 5609
    HEAP32[$AsyncCtx29 + 28 >> 2] = $2; //@line 5611
    sp = STACKTOP; //@line 5612
    STACKTOP = sp; //@line 5613
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx29 | 0); //@line 5615
    $$pre$i$i54 = HEAP32[$131 >> 2] | 0; //@line 5616
    HEAP32[$134 >> 2] = $$pre$i$i54; //@line 5618
    if (!$$pre$i$i54) {
     break;
    } else {
     $161 = $$pre$i$i54; //@line 5623
     label = 46; //@line 5624
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 46) {
   $162 = HEAP32[$161 + 8 >> 2] | 0; //@line 5633
   $AsyncCtx32 = _emscripten_alloc_async_context(24, sp) | 0; //@line 5634
   FUNCTION_TABLE_vi[$162 & 1023]($2); //@line 5635
   if (___async) {
    HEAP32[$AsyncCtx32 >> 2] = 179; //@line 5638
    HEAP32[$AsyncCtx32 + 4 >> 2] = $1; //@line 5640
    HEAP32[$AsyncCtx32 + 8 >> 2] = $4; //@line 5642
    HEAP32[$AsyncCtx32 + 12 >> 2] = $0; //@line 5644
    HEAP32[$AsyncCtx32 + 16 >> 2] = $2; //@line 5646
    HEAP32[$AsyncCtx32 + 20 >> 2] = $2; //@line 5648
    sp = STACKTOP; //@line 5649
    STACKTOP = sp; //@line 5650
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx32 | 0); //@line 5652
    break;
   }
  }
 } while (0);
 $168 = $2 + 12 | 0; //@line 5657
 HEAP32[$2 >> 2] = 180; //@line 5658
 HEAP32[$2 + 4 >> 2] = 0; //@line 5660
 HEAP32[$2 + 8 >> 2] = $0; //@line 5662
 HEAP32[$168 >> 2] = 808; //@line 5663
 $169 = $0 + 2416 | 0; //@line 5664
 do {
  if (($169 | 0) == ($2 | 0)) {
   $196 = 808; //@line 5668
   label = 58; //@line 5669
  } else {
   $171 = $0 + 2428 | 0; //@line 5671
   $172 = HEAP32[$171 >> 2] | 0; //@line 5672
   if (!$172) {
    $185 = 808; //@line 5675
   } else {
    $175 = HEAP32[$172 + 8 >> 2] | 0; //@line 5678
    $AsyncCtx35 = _emscripten_alloc_async_context(32, sp) | 0; //@line 5679
    FUNCTION_TABLE_vi[$175 & 1023]($169); //@line 5680
    if (___async) {
     HEAP32[$AsyncCtx35 >> 2] = 181; //@line 5683
     HEAP32[$AsyncCtx35 + 4 >> 2] = $168; //@line 5685
     HEAP32[$AsyncCtx35 + 8 >> 2] = $171; //@line 5687
     HEAP32[$AsyncCtx35 + 12 >> 2] = $169; //@line 5689
     HEAP32[$AsyncCtx35 + 16 >> 2] = $2; //@line 5691
     HEAP32[$AsyncCtx35 + 20 >> 2] = $0; //@line 5693
     HEAP32[$AsyncCtx35 + 24 >> 2] = $1; //@line 5695
     HEAP32[$AsyncCtx35 + 28 >> 2] = $4; //@line 5697
     sp = STACKTOP; //@line 5698
     STACKTOP = sp; //@line 5699
     return;
    }
    _emscripten_free_async_context($AsyncCtx35 | 0); //@line 5701
    $$pre126 = HEAP32[$168 >> 2] | 0; //@line 5702
    if (!$$pre126) {
     HEAP32[$171 >> 2] = 0; //@line 5705
     break;
    } else {
     $185 = $$pre126; //@line 5708
    }
   }
   $186 = HEAP32[$185 + 4 >> 2] | 0; //@line 5712
   $AsyncCtx38 = _emscripten_alloc_async_context(28, sp) | 0; //@line 5713
   FUNCTION_TABLE_vii[$186 & 15]($169, $2); //@line 5714
   if (___async) {
    HEAP32[$AsyncCtx38 >> 2] = 182; //@line 5717
    HEAP32[$AsyncCtx38 + 4 >> 2] = $168; //@line 5719
    HEAP32[$AsyncCtx38 + 8 >> 2] = $171; //@line 5721
    HEAP32[$AsyncCtx38 + 12 >> 2] = $2; //@line 5723
    HEAP32[$AsyncCtx38 + 16 >> 2] = $0; //@line 5725
    HEAP32[$AsyncCtx38 + 20 >> 2] = $1; //@line 5727
    HEAP32[$AsyncCtx38 + 24 >> 2] = $4; //@line 5729
    sp = STACKTOP; //@line 5730
    STACKTOP = sp; //@line 5731
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx38 | 0); //@line 5733
    $$pre$i$i70 = HEAP32[$168 >> 2] | 0; //@line 5734
    HEAP32[$171 >> 2] = $$pre$i$i70; //@line 5736
    if (!$$pre$i$i70) {
     break;
    } else {
     $196 = $$pre$i$i70; //@line 5741
     label = 58; //@line 5742
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 58) {
   $197 = HEAP32[$196 + 8 >> 2] | 0; //@line 5751
   $AsyncCtx41 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5752
   FUNCTION_TABLE_vi[$197 & 1023]($2); //@line 5753
   if (___async) {
    HEAP32[$AsyncCtx41 >> 2] = 183; //@line 5756
    HEAP32[$AsyncCtx41 + 4 >> 2] = $2; //@line 5758
    HEAP32[$AsyncCtx41 + 8 >> 2] = $0; //@line 5760
    HEAP32[$AsyncCtx41 + 12 >> 2] = $1; //@line 5762
    HEAP32[$AsyncCtx41 + 16 >> 2] = $4; //@line 5764
    sp = STACKTOP; //@line 5765
    STACKTOP = sp; //@line 5766
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx41 | 0); //@line 5768
    break;
   }
  }
 } while (0);
 __ZN7LoRaMac17bind_radio_driverER9LoRaRadio($0, $1); //@line 5773
 $204 = HEAP32[(HEAP32[$1 >> 2] | 0) + 72 >> 2] | 0; //@line 5776
 $AsyncCtx44 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5777
 FUNCTION_TABLE_vi[$204 & 1023]($1); //@line 5778
 if (___async) {
  HEAP32[$AsyncCtx44 >> 2] = 184; //@line 5781
  HEAP32[$AsyncCtx44 + 4 >> 2] = $1; //@line 5783
  HEAP32[$AsyncCtx44 + 8 >> 2] = $4; //@line 5785
  HEAP32[$AsyncCtx44 + 12 >> 2] = $1; //@line 5787
  sp = STACKTOP; //@line 5788
  STACKTOP = sp; //@line 5789
  return;
 }
 _emscripten_free_async_context($AsyncCtx44 | 0); //@line 5791
 $209 = HEAP32[HEAP32[$1 >> 2] >> 2] | 0; //@line 5793
 $AsyncCtx47 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5794
 FUNCTION_TABLE_vii[$209 & 15]($1, $4); //@line 5795
 if (___async) {
  HEAP32[$AsyncCtx47 >> 2] = 185; //@line 5798
  HEAP32[$AsyncCtx47 + 4 >> 2] = $1; //@line 5800
  HEAP32[$AsyncCtx47 + 8 >> 2] = $1; //@line 5802
  sp = STACKTOP; //@line 5803
  STACKTOP = sp; //@line 5804
  return;
 }
 _emscripten_free_async_context($AsyncCtx47 | 0); //@line 5806
 $214 = HEAP32[(HEAP32[$1 >> 2] | 0) + 76 >> 2] | 0; //@line 5809
 $AsyncCtx50 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5810
 FUNCTION_TABLE_vi[$214 & 1023]($1); //@line 5811
 if (___async) {
  HEAP32[$AsyncCtx50 >> 2] = 186; //@line 5814
  sp = STACKTOP; //@line 5815
  STACKTOP = sp; //@line 5816
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx50 | 0); //@line 5818
  STACKTOP = sp; //@line 5819
  return;
 }
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$063 = 0, $$06379 = 0, $$06380 = 0, $$1$off0 = 0, $$160 = 0, $$162 = 0, $$164 = 0, $$byval_copy74 = 0, $$pre$phi$sinkZ2D = 0, $10 = 0, $114 = 0, $115 = 0, $121 = 0, $122 = 0, $123 = 0, $125 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $139 = 0, $141 = 0, $142 = 0, $149 = 0, $150 = 0, $158 = 0, $159 = 0, $16 = 0, $164 = 0, $165 = 0, $17 = 0, $172 = 0, $173 = 0, $179 = 0, $203 = 0, $221 = 0, $223 = 0, $231 = 0, $233 = 0, $41 = 0, $42 = 0, $48 = 0, $66 = 0, $67 = 0, $7 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx21 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx33 = 0, $AsyncCtx37 = 0, $AsyncCtx41 = 0, $AsyncCtx45 = 0, $AsyncCtx49 = 0, $AsyncCtx53 = 0, $AsyncCtx57 = 0, $AsyncCtx9 = 0, $addconv = 0, $sext$i = 0, $storemerge$in = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 12995
 STACKTOP = STACKTOP + 64 | 0; //@line 12996
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 12996
 $$byval_copy74 = sp + 48 | 0; //@line 12997
 $vararg_buffer5 = sp + 24 | 0; //@line 12998
 $vararg_buffer3 = sp + 16 | 0; //@line 12999
 $vararg_buffer1 = sp + 8 | 0; //@line 13000
 $7 = sp + 40 | 0; //@line 13002
 $8 = sp + 56 | 0; //@line 13003
 $9 = sp + 32 | 0; //@line 13004
 HEAP8[$8 >> 0] = $3; //@line 13005
 $10 = $0 + 4 | 0; //@line 13006
 $16 = __ZN7LoRaPHY15get_max_payloadEhb($10, HEAP8[$0 + 2010 >> 0] | 0, (HEAP8[$0 + 1173 >> 0] | 0) != 0) | 0; //@line 13012
 $17 = $2 & 65535; //@line 13013
 $sext$i = ($17 << 16) + -851968 | 0; //@line 13015
 if (((($sext$i | 0) < 0 ? 0 : $sext$i >> 16) | 0) > ($16 & 255 | 0)) {
  _mbed_tracef(2, 13239, 13358, sp); //@line 13022
 }
 HEAP32[$9 >> 2] = 0; //@line 13024
 $41 = HEAPU8[$1 + ($3 + 1 & 255) >> 0] << 8 | HEAPU8[$1 + ($3 & 255) >> 0] | HEAPU8[$1 + ($3 + 2 & 255) >> 0] << 16; //@line 13043
 $42 = $3 + 4 << 24 >> 24; //@line 13044
 HEAP8[$8 >> 0] = $42; //@line 13045
 $48 = $41 | HEAPU8[$1 + ($3 + 3 & 255) >> 0] << 24; //@line 13051
 L4 : do {
  if (($48 | 0) == (HEAP32[$0 + 1756 >> 2] | 0)) {
   $$1$off0 = 0; //@line 13060
   $$160 = $0 + 1732 | 0; //@line 13060
   $$162 = $0 + 1716 | 0; //@line 13060
   $$164 = 0; //@line 13060
   $storemerge$in = $0 + 1764 | 0; //@line 13060
  } else {
   $$06379 = HEAP32[$0 + 1988 >> 2] | 0; //@line 13063
   L7 : do {
    if ($$06379 | 0) {
     $$06380 = $$06379; //@line 13067
     while (1) {
      if (($48 | 0) == (HEAP32[$$06380 >> 2] | 0)) {
       break;
      }
      $$063 = HEAP32[$$06380 + 40 >> 2] | 0; //@line 13075
      if (!$$063) {
       break L7;
      } else {
       $$06380 = $$063; //@line 13080
      }
     }
     $$1$off0 = 1; //@line 13086
     $$160 = $$06380 + 20 | 0; //@line 13086
     $$162 = $$06380 + 4 | 0; //@line 13086
     $$164 = $$06380; //@line 13086
     $storemerge$in = $$06380 + 36 | 0; //@line 13086
     break L4;
    }
   } while (0);
   HEAP32[$0 + 2004 >> 2] = 11; //@line 13091
   do {
    if (HEAP8[$0 + 1177 >> 0] | 0) {
     $66 = HEAP32[$0 + 1992 >> 2] | 0; //@line 13098
     HEAP32[$7 >> 2] = 389; //@line 13099
     HEAP32[$7 + 4 >> 2] = 0; //@line 13101
     $AsyncCtx29 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13102
     HEAP32[$$byval_copy74 >> 2] = HEAP32[$7 >> 2]; //@line 13103
     HEAP32[$$byval_copy74 + 4 >> 2] = HEAP32[$7 + 4 >> 2]; //@line 13103
     $67 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($66, $0, $$byval_copy74) | 0; //@line 13104
     if (___async) {
      HEAP32[$AsyncCtx29 >> 2] = 390; //@line 13107
      HEAP32[$AsyncCtx29 + 4 >> 2] = $7; //@line 13109
      HEAP32[$AsyncCtx29 + 8 >> 2] = $9; //@line 13111
      sp = STACKTOP; //@line 13112
      STACKTOP = sp; //@line 13113
      return;
     }
     _emscripten_free_async_context($AsyncCtx29 | 0); //@line 13115
     if (!$67) {
      $AsyncCtx57 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13118
      _mbed_assert_internal(13097, 13106, 231); //@line 13119
      if (___async) {
       HEAP32[$AsyncCtx57 >> 2] = 391; //@line 13122
       HEAP32[$AsyncCtx57 + 4 >> 2] = $7; //@line 13124
       HEAP32[$AsyncCtx57 + 8 >> 2] = $9; //@line 13126
       sp = STACKTOP; //@line 13127
       STACKTOP = sp; //@line 13128
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx57 | 0); //@line 13130
       break;
      }
     }
    }
   } while (0);
   STACKTOP = sp; //@line 13136
   return;
  }
 } while (0);
 HEAP32[$9 >> 2] = HEAP32[$storemerge$in >> 2]; //@line 13140
 HEAP8[$8 >> 0] = $3 + 5 << 24 >> 24; //@line 13142
 $79 = HEAP8[$1 + ($42 & 255) >> 0] | 0; //@line 13145
 $80 = $79 & 15; //@line 13146
 $addconv = $80 + 8 << 24 >> 24; //@line 13147
 $AsyncCtx = _emscripten_alloc_async_context(104, sp) | 0; //@line 13148
 $81 = __ZN7LoRaMac23message_integrity_checkEPKhtPhjPjS1_($0, $1, $2, $8, $48, $9, $$162) | 0; //@line 13149
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 392; //@line 13152
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 13154
  HEAP8[$AsyncCtx + 8 >> 0] = $$1$off0 & 1; //@line 13157
  HEAP8[$AsyncCtx + 9 >> 0] = $79; //@line 13159
  HEAP32[$AsyncCtx + 12 >> 2] = $9; //@line 13161
  HEAP16[$AsyncCtx + 16 >> 1] = $5; //@line 13163
  HEAP8[$AsyncCtx + 18 >> 0] = $6; //@line 13165
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer1; //@line 13167
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer1; //@line 13169
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer1; //@line 13171
  HEAP32[$AsyncCtx + 32 >> 2] = $8; //@line 13173
  HEAP32[$AsyncCtx + 36 >> 2] = $1; //@line 13175
  HEAP32[$AsyncCtx + 40 >> 2] = $17; //@line 13177
  HEAP8[$AsyncCtx + 44 >> 0] = $4; //@line 13179
  HEAP32[$AsyncCtx + 48 >> 2] = $7; //@line 13181
  HEAP32[$AsyncCtx + 52 >> 2] = $9; //@line 13183
  HEAP32[$AsyncCtx + 56 >> 2] = $$164; //@line 13185
  HEAP32[$AsyncCtx + 60 >> 2] = $vararg_buffer5; //@line 13187
  HEAP32[$AsyncCtx + 64 >> 2] = $vararg_buffer5; //@line 13189
  HEAP32[$AsyncCtx + 68 >> 2] = $vararg_buffer5; //@line 13191
  HEAP32[$AsyncCtx + 72 >> 2] = $vararg_buffer3; //@line 13193
  HEAP32[$AsyncCtx + 76 >> 2] = $vararg_buffer3; //@line 13195
  HEAP8[$AsyncCtx + 80 >> 0] = $80; //@line 13197
  HEAP8[$AsyncCtx + 81 >> 0] = $addconv; //@line 13199
  HEAP32[$AsyncCtx + 84 >> 2] = $10; //@line 13201
  HEAP16[$AsyncCtx + 88 >> 1] = $2; //@line 13203
  HEAP32[$AsyncCtx + 92 >> 2] = $$162; //@line 13205
  HEAP32[$AsyncCtx + 96 >> 2] = $$160; //@line 13207
  HEAP32[$AsyncCtx + 100 >> 2] = $48; //@line 13209
  sp = STACKTOP; //@line 13210
  STACKTOP = sp; //@line 13211
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13213
 if (!$81) {
  _mbed_tracef(2, 13239, 13377, $vararg_buffer1); //@line 13215
  do {
   if (HEAP8[$0 + 1177 >> 0] | 0) {
    $114 = HEAP32[$0 + 1992 >> 2] | 0; //@line 13222
    HEAP32[$vararg_buffer1 >> 2] = 389; //@line 13223
    HEAP32[$vararg_buffer1 + 4 >> 2] = 0; //@line 13225
    $AsyncCtx25 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13226
    HEAP32[$$byval_copy74 >> 2] = HEAP32[$vararg_buffer1 >> 2]; //@line 13227
    HEAP32[$$byval_copy74 + 4 >> 2] = HEAP32[$vararg_buffer1 + 4 >> 2]; //@line 13227
    $115 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($114, $0, $$byval_copy74) | 0; //@line 13228
    if (___async) {
     HEAP32[$AsyncCtx25 >> 2] = 393; //@line 13231
     HEAP32[$AsyncCtx25 + 4 >> 2] = $vararg_buffer1; //@line 13233
     HEAP32[$AsyncCtx25 + 8 >> 2] = $9; //@line 13235
     sp = STACKTOP; //@line 13236
     STACKTOP = sp; //@line 13237
     return;
    }
    _emscripten_free_async_context($AsyncCtx25 | 0); //@line 13239
    if (!$115) {
     $AsyncCtx53 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13242
     _mbed_assert_internal(13097, 13106, 231); //@line 13243
     if (___async) {
      HEAP32[$AsyncCtx53 >> 2] = 394; //@line 13246
      HEAP32[$AsyncCtx53 + 4 >> 2] = $vararg_buffer1; //@line 13248
      HEAP32[$AsyncCtx53 + 8 >> 2] = $9; //@line 13250
      sp = STACKTOP; //@line 13251
      STACKTOP = sp; //@line 13252
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx53 | 0); //@line 13254
      break;
     }
    }
   }
  } while (0);
  STACKTOP = sp; //@line 13260
  return;
 }
 $121 = $0 + 2046 | 0; //@line 13262
 HEAP8[$121 >> 0] = 0; //@line 13263
 $122 = $0 + 2028 | 0; //@line 13264
 HEAP8[$122 >> 0] = 0; //@line 13265
 $123 = $0 + 1996 | 0; //@line 13266
 HEAP8[$123 >> 0] = 1; //@line 13267
 HEAP8[$0 + 2018 >> 0] = 0; //@line 13269
 $125 = $0 + 2004 | 0; //@line 13270
 HEAP32[$125 >> 2] = 0; //@line 13271
 HEAP8[$0 + 2008 >> 0] = $$1$off0 & 1; //@line 13274
 HEAP8[$0 + 2011 >> 0] = ($79 & 255) >>> 4 & 1; //@line 13278
 $131 = $0 + 2012 | 0; //@line 13279
 HEAP32[$131 >> 2] = 0; //@line 13280
 $132 = $0 + 2016 | 0; //@line 13281
 HEAP16[$132 >> 1] = 0; //@line 13282
 $133 = HEAP32[$9 >> 2] | 0; //@line 13283
 $134 = $0 + 2032 | 0; //@line 13284
 HEAP32[$134 >> 2] = $133; //@line 13285
 HEAP16[$0 + 2020 >> 1] = $5; //@line 13287
 HEAP8[$0 + 2022 >> 0] = $6; //@line 13289
 HEAP32[$0 + 2040 >> 2] = 0; //@line 13291
 HEAP32[$0 + 1768 >> 2] = 0; //@line 13293
 $139 = $0 + 476 | 0; //@line 13294
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($139); //@line 13295
 L42 : do {
  if ($$1$off0) {
   HEAP32[$0 + 2e3 >> 2] = 2; //@line 13299
   $141 = $$164 + 36 | 0; //@line 13300
   $142 = HEAP32[$141 >> 2] | 0; //@line 13301
   if (($142 | 0) == 0 | ($142 | 0) != ($133 | 0)) {
    $$pre$phi$sinkZ2D = $141; //@line 13306
   } else {
    HEAP32[$125 >> 2] = 8; //@line 13308
    HEAP32[$134 >> 2] = $133; //@line 13309
    HEAP8[$123 >> 0] = 0; //@line 13310
    do {
     if (HEAP8[$0 + 1177 >> 0] | 0) {
      $149 = HEAP32[$0 + 1992 >> 2] | 0; //@line 13317
      HEAP32[$7 >> 2] = 389; //@line 13318
      HEAP32[$7 + 4 >> 2] = 0; //@line 13320
      $AsyncCtx21 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13321
      HEAP32[$$byval_copy74 >> 2] = HEAP32[$7 >> 2]; //@line 13322
      HEAP32[$$byval_copy74 + 4 >> 2] = HEAP32[$7 + 4 >> 2]; //@line 13322
      $150 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($149, $0, $$byval_copy74) | 0; //@line 13323
      if (___async) {
       HEAP32[$AsyncCtx21 >> 2] = 395; //@line 13326
       HEAP32[$AsyncCtx21 + 4 >> 2] = $7; //@line 13328
       HEAP32[$AsyncCtx21 + 8 >> 2] = $9; //@line 13330
       sp = STACKTOP; //@line 13331
       STACKTOP = sp; //@line 13332
       return;
      }
      _emscripten_free_async_context($AsyncCtx21 | 0); //@line 13334
      if (!$150) {
       $AsyncCtx49 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13337
       _mbed_assert_internal(13097, 13106, 231); //@line 13338
       if (___async) {
        HEAP32[$AsyncCtx49 >> 2] = 396; //@line 13341
        HEAP32[$AsyncCtx49 + 4 >> 2] = $7; //@line 13343
        HEAP32[$AsyncCtx49 + 8 >> 2] = $9; //@line 13345
        sp = STACKTOP; //@line 13346
        STACKTOP = sp; //@line 13347
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx49 | 0); //@line 13349
        break;
       }
      }
     }
    } while (0);
    STACKTOP = sp; //@line 13355
    return;
   }
  } else {
   switch ($4 << 24 >> 24) {
   case 5:
    {
     HEAP8[$0 + 1178 >> 0] = 1; //@line 13361
     HEAP32[$0 + 2e3 >> 2] = 1; //@line 13363
     $158 = $0 + 1764 | 0; //@line 13364
     $159 = HEAP32[$158 >> 2] | 0; //@line 13365
     if (($159 | 0) == 0 | ($159 | 0) != ($133 | 0)) {
      $$pre$phi$sinkZ2D = $158; //@line 13370
      break L42;
     }
     _mbed_tracef(16, 13239, 13388, $vararg_buffer3); //@line 13373
     HEAP8[$123 >> 0] = 0; //@line 13374
     HEAP32[$125 >> 2] = 8; //@line 13375
     $$pre$phi$sinkZ2D = $158; //@line 13376
     break L42;
     break;
    }
   case 3:
    {
     HEAP8[$0 + 1178 >> 0] = 0; //@line 13382
     HEAP32[$0 + 2e3 >> 2] = 0; //@line 13384
     $164 = $0 + 1764 | 0; //@line 13385
     $165 = HEAP32[$164 >> 2] | 0; //@line 13386
     if (($165 | 0) == 0 | ($165 | 0) != ($133 | 0)) {
      $$pre$phi$sinkZ2D = $164; //@line 13391
      break L42;
     }
     _mbed_tracef(16, 13239, 13388, $vararg_buffer5); //@line 13394
     HEAP8[$123 >> 0] = 0; //@line 13395
     HEAP32[$125 >> 2] = 8; //@line 13396
     do {
      if (HEAP8[$0 + 1177 >> 0] | 0) {
       $172 = HEAP32[$0 + 1992 >> 2] | 0; //@line 13403
       HEAP32[$vararg_buffer5 >> 2] = 389; //@line 13404
       HEAP32[$vararg_buffer5 + 4 >> 2] = 0; //@line 13406
       $AsyncCtx17 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13407
       HEAP32[$$byval_copy74 >> 2] = HEAP32[$vararg_buffer5 >> 2]; //@line 13408
       HEAP32[$$byval_copy74 + 4 >> 2] = HEAP32[$vararg_buffer5 + 4 >> 2]; //@line 13408
       $173 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($172, $0, $$byval_copy74) | 0; //@line 13409
       if (___async) {
        HEAP32[$AsyncCtx17 >> 2] = 397; //@line 13412
        HEAP32[$AsyncCtx17 + 4 >> 2] = $vararg_buffer5; //@line 13414
        HEAP32[$AsyncCtx17 + 8 >> 2] = $9; //@line 13416
        sp = STACKTOP; //@line 13417
        STACKTOP = sp; //@line 13418
        return;
       }
       _emscripten_free_async_context($AsyncCtx17 | 0); //@line 13420
       if (!$173) {
        $AsyncCtx45 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13423
        _mbed_assert_internal(13097, 13106, 231); //@line 13424
        if (___async) {
         HEAP32[$AsyncCtx45 >> 2] = 398; //@line 13427
         HEAP32[$AsyncCtx45 + 4 >> 2] = $vararg_buffer5; //@line 13429
         HEAP32[$AsyncCtx45 + 8 >> 2] = $9; //@line 13431
         sp = STACKTOP; //@line 13432
         STACKTOP = sp; //@line 13433
         return;
        } else {
         _emscripten_free_async_context($AsyncCtx45 | 0); //@line 13435
         break;
        }
       }
      }
     } while (0);
     STACKTOP = sp; //@line 13441
     return;
    }
   default:
    {
     $$pre$phi$sinkZ2D = $0 + 1764 | 0; //@line 13446
     break L42;
    }
   }
  }
 } while (0);
 HEAP32[$$pre$phi$sinkZ2D >> 2] = $133; //@line 13452
 $179 = $0 + 1177 | 0; //@line 13453
 if (!(HEAP8[$179 >> 0] | 0)) {
  __ZN14LoRaMacCommand20clear_command_bufferEv($139); //@line 13457
 } else {
  if ($79 & 32) {
   __ZN14LoRaMacCommand20clear_command_bufferEv($139); //@line 13462
   HEAP8[$121 >> 0] = 1; //@line 13463
   HEAP8[$122 >> 0] = 1; //@line 13464
  }
 }
 do {
  if (!($17 + 252 - ($addconv & 255) & 255)) {
   if ($80 << 24 >> 24) {
    $AsyncCtx9 = _emscripten_alloc_async_context(52, sp) | 0; //@line 13478
    $203 = __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($139, $1, 8, $addconv, $6, $0 + 2068 | 0, $0 + 1876 | 0, $10) | 0; //@line 13479
    if (___async) {
     HEAP32[$AsyncCtx9 >> 2] = 400; //@line 13482
     HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 13484
     HEAP32[$AsyncCtx9 + 8 >> 2] = $121; //@line 13486
     HEAP32[$AsyncCtx9 + 12 >> 2] = $179; //@line 13488
     HEAP32[$AsyncCtx9 + 16 >> 2] = $8; //@line 13490
     HEAP32[$AsyncCtx9 + 20 >> 2] = $1; //@line 13492
     HEAP32[$AsyncCtx9 + 24 >> 2] = $17; //@line 13494
     HEAP32[$AsyncCtx9 + 28 >> 2] = $125; //@line 13496
     HEAP32[$AsyncCtx9 + 32 >> 2] = $131; //@line 13498
     HEAP32[$AsyncCtx9 + 36 >> 2] = $132; //@line 13500
     HEAP8[$AsyncCtx9 + 40 >> 0] = $4; //@line 13502
     HEAP32[$AsyncCtx9 + 44 >> 2] = $139; //@line 13504
     HEAP32[$AsyncCtx9 + 48 >> 2] = $9; //@line 13506
     sp = STACKTOP; //@line 13507
     STACKTOP = sp; //@line 13508
     return;
    }
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 13510
    if ($203 | 0) {
     HEAP32[$125 >> 2] = 1; //@line 13513
     break;
    }
    if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($139) | 0) {
     HEAP32[$0 + 2060 >> 2] = 4; //@line 13519
     HEAP8[$0 + 2064 >> 0] = 1; //@line 13521
     __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($139); //@line 13522
    }
   }
  } else {
   $AsyncCtx13 = _emscripten_alloc_async_context(48, sp) | 0; //@line 13526
   __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa($0, $1, $2, $80, $$162, $$160, $48, $133, 0, $6); //@line 13527
   if (___async) {
    HEAP32[$AsyncCtx13 >> 2] = 399; //@line 13530
    HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 13532
    HEAP32[$AsyncCtx13 + 8 >> 2] = $121; //@line 13534
    HEAP32[$AsyncCtx13 + 12 >> 2] = $179; //@line 13536
    HEAP32[$AsyncCtx13 + 16 >> 2] = $8; //@line 13538
    HEAP32[$AsyncCtx13 + 20 >> 2] = $1; //@line 13540
    HEAP32[$AsyncCtx13 + 24 >> 2] = $17; //@line 13542
    HEAP32[$AsyncCtx13 + 28 >> 2] = $125; //@line 13544
    HEAP32[$AsyncCtx13 + 32 >> 2] = $131; //@line 13546
    HEAP32[$AsyncCtx13 + 36 >> 2] = $132; //@line 13548
    HEAP8[$AsyncCtx13 + 40 >> 0] = $4; //@line 13550
    HEAP32[$AsyncCtx13 + 44 >> 2] = $9; //@line 13552
    sp = STACKTOP; //@line 13553
    STACKTOP = sp; //@line 13554
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx13 | 0); //@line 13556
    break;
   }
  }
 } while (0);
 if ($4 << 24 >> 24 == 7) {
  $221 = $0 + 1442 | 0; //@line 13563
  $223 = HEAPU8[$8 >> 0] | 0; //@line 13565
  _memcpy($221 | 0, $1 + $223 | 0, $17 | 0) | 0; //@line 13567
  HEAP32[$0 + 2e3 >> 2] = 3; //@line 13569
  HEAP32[$125 >> 2] = 0; //@line 13570
  HEAP32[$131 >> 2] = $221; //@line 13571
  HEAP16[$132 >> 1] = $17 - $223; //@line 13574
 }
 $231 = HEAP8[$0 + 1699 >> 0] | 0; //@line 13579
 $233 = HEAP8[$0 + 1698 >> 0] | 0; //@line 13581
 if (!(HEAP8[$179 >> 0] | 0)) {
  if ((HEAP32[$0 + 2364 >> 2] | 0) != 2) {
   STACKTOP = sp; //@line 13587
   return;
  }
  $AsyncCtx41 = _emscripten_alloc_async_context(8, sp) | 0; //@line 13590
  __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1856 | 0); //@line 13591
  if (___async) {
   HEAP32[$AsyncCtx41 >> 2] = 401; //@line 13594
   HEAP32[$AsyncCtx41 + 4 >> 2] = $9; //@line 13596
   sp = STACKTOP; //@line 13597
   STACKTOP = sp; //@line 13598
   return;
  }
  _emscripten_free_async_context($AsyncCtx41 | 0); //@line 13600
  STACKTOP = sp; //@line 13601
  return;
 }
 if (HEAP8[$121 >> 0] | 0) {
  $AsyncCtx37 = _emscripten_alloc_async_context(8, sp) | 0; //@line 13607
  __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1856 | 0); //@line 13608
  if (___async) {
   HEAP32[$AsyncCtx37 >> 2] = 402; //@line 13611
   HEAP32[$AsyncCtx37 + 4 >> 2] = $9; //@line 13613
   sp = STACKTOP; //@line 13614
   STACKTOP = sp; //@line 13615
   return;
  }
  _emscripten_free_async_context($AsyncCtx37 | 0); //@line 13617
  STACKTOP = sp; //@line 13618
  return;
 }
 if (($231 & 255) <= ($233 & 255)) {
  STACKTOP = sp; //@line 13622
  return;
 }
 $AsyncCtx33 = _emscripten_alloc_async_context(8, sp) | 0; //@line 13625
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1856 | 0); //@line 13626
 if (___async) {
  HEAP32[$AsyncCtx33 >> 2] = 403; //@line 13629
  HEAP32[$AsyncCtx33 + 4 >> 2] = $9; //@line 13631
  sp = STACKTOP; //@line 13632
  STACKTOP = sp; //@line 13633
  return;
 }
 _emscripten_free_async_context($AsyncCtx33 | 0); //@line 13635
 STACKTOP = sp; //@line 13636
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$pre$phi$sinkZ2D = 0, $10 = 0, $102 = 0, $103 = 0, $108 = 0, $109 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $121 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $160 = 0, $162 = 0, $170 = 0, $172 = 0, $177 = 0, $181 = 0, $184 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $38 = 0, $4 = 0, $40 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $71 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $85 = 0, $87 = 0, $88 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 18983
 STACKTOP = STACKTOP + 32 | 0; //@line 18984
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 18984
 $$byval_copy23 = sp + 16 | 0; //@line 18985
 $$byval_copy22 = sp + 8 | 0; //@line 18986
 $$byval_copy = sp; //@line 18987
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18989
 $4 = HEAP8[$0 + 8 >> 0] & 1; //@line 18992
 $6 = HEAP8[$0 + 9 >> 0] | 0; //@line 18994
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 18996
 $10 = HEAP16[$0 + 16 >> 1] | 0; //@line 18998
 $12 = HEAP8[$0 + 18 >> 0] | 0; //@line 19000
 $14 = HEAP32[$0 + 20 >> 2] | 0; //@line 19002
 $20 = HEAP32[$0 + 32 >> 2] | 0; //@line 19008
 $22 = HEAP32[$0 + 36 >> 2] | 0; //@line 19010
 $24 = HEAP32[$0 + 40 >> 2] | 0; //@line 19012
 $26 = HEAP8[$0 + 44 >> 0] | 0; //@line 19014
 $28 = HEAP32[$0 + 48 >> 2] | 0; //@line 19016
 $30 = HEAP32[$0 + 52 >> 2] | 0; //@line 19018
 $32 = HEAP32[$0 + 56 >> 2] | 0; //@line 19020
 $34 = HEAP32[$0 + 60 >> 2] | 0; //@line 19022
 $38 = HEAP32[$0 + 68 >> 2] | 0; //@line 19026
 $40 = HEAP32[$0 + 72 >> 2] | 0; //@line 19028
 $44 = HEAP8[$0 + 80 >> 0] | 0; //@line 19032
 $46 = HEAP8[$0 + 81 >> 0] | 0; //@line 19034
 $48 = HEAP32[$0 + 84 >> 2] | 0; //@line 19036
 $50 = HEAP16[$0 + 88 >> 1] | 0; //@line 19038
 $52 = HEAP32[$0 + 92 >> 2] | 0; //@line 19040
 $54 = HEAP32[$0 + 96 >> 2] | 0; //@line 19042
 $56 = HEAP32[$0 + 100 >> 2] | 0; //@line 19044
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  _mbed_tracef(2, 13239, 13377, HEAP32[$0 + 24 >> 2] | 0); //@line 19049
  if (!(HEAP8[$2 + 1177 >> 0] | 0)) {
   STACKTOP = sp; //@line 19054
   return;
  }
  $62 = HEAP32[$2 + 1992 >> 2] | 0; //@line 19057
  HEAP32[$14 >> 2] = 389; //@line 19058
  HEAP32[$14 + 4 >> 2] = 0; //@line 19060
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 19061
  HEAP32[$$byval_copy >> 2] = HEAP32[$14 >> 2]; //@line 19062
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$14 + 4 >> 2]; //@line 19062
  $63 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($62, $2, $$byval_copy) | 0; //@line 19063
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 393; //@line 19066
   $64 = $ReallocAsyncCtx6 + 4 | 0; //@line 19067
   HEAP32[$64 >> 2] = $14; //@line 19068
   $65 = $ReallocAsyncCtx6 + 8 | 0; //@line 19069
   HEAP32[$65 >> 2] = $30; //@line 19070
   sp = STACKTOP; //@line 19071
   STACKTOP = sp; //@line 19072
   return;
  }
  HEAP32[___async_retval >> 2] = $63; //@line 19075
  ___async_unwind = 0; //@line 19076
  HEAP32[$ReallocAsyncCtx6 >> 2] = 393; //@line 19077
  $64 = $ReallocAsyncCtx6 + 4 | 0; //@line 19078
  HEAP32[$64 >> 2] = $14; //@line 19079
  $65 = $ReallocAsyncCtx6 + 8 | 0; //@line 19080
  HEAP32[$65 >> 2] = $30; //@line 19081
  sp = STACKTOP; //@line 19082
  STACKTOP = sp; //@line 19083
  return;
 }
 $67 = $2 + 2046 | 0; //@line 19085
 HEAP8[$67 >> 0] = 0; //@line 19086
 $68 = $2 + 2028 | 0; //@line 19087
 HEAP8[$68 >> 0] = 0; //@line 19088
 $69 = $2 + 1996 | 0; //@line 19089
 HEAP8[$69 >> 0] = 1; //@line 19090
 HEAP8[$2 + 2018 >> 0] = 0; //@line 19092
 $71 = $2 + 2004 | 0; //@line 19093
 HEAP32[$71 >> 2] = 0; //@line 19094
 HEAP8[$2 + 2008 >> 0] = $4 & 1; //@line 19097
 HEAP8[$2 + 2011 >> 0] = ($6 & 255) >>> 4 & 1; //@line 19101
 $77 = $2 + 2012 | 0; //@line 19102
 HEAP32[$77 >> 2] = 0; //@line 19103
 $78 = $2 + 2016 | 0; //@line 19104
 HEAP16[$78 >> 1] = 0; //@line 19105
 $79 = HEAP32[$8 >> 2] | 0; //@line 19106
 $80 = $2 + 2032 | 0; //@line 19107
 HEAP32[$80 >> 2] = $79; //@line 19108
 HEAP16[$2 + 2020 >> 1] = $10; //@line 19110
 HEAP8[$2 + 2022 >> 0] = $12; //@line 19112
 HEAP32[$2 + 2040 >> 2] = 0; //@line 19114
 HEAP32[$2 + 1768 >> 2] = 0; //@line 19116
 $85 = $2 + 476 | 0; //@line 19117
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($85); //@line 19118
 L13 : do {
  if ($4) {
   HEAP32[$2 + 2e3 >> 2] = 2; //@line 19122
   $87 = $32 + 36 | 0; //@line 19123
   $88 = HEAP32[$87 >> 2] | 0; //@line 19124
   if (($88 | 0) == 0 | ($88 | 0) != ($79 | 0)) {
    $$pre$phi$sinkZ2D = $87; //@line 19129
   } else {
    HEAP32[$71 >> 2] = 8; //@line 19131
    HEAP32[$80 >> 2] = $79; //@line 19132
    HEAP8[$69 >> 0] = 0; //@line 19133
    if (!(HEAP8[$2 + 1177 >> 0] | 0)) {
     STACKTOP = sp; //@line 19138
     return;
    }
    $95 = HEAP32[$2 + 1992 >> 2] | 0; //@line 19141
    HEAP32[$28 >> 2] = 389; //@line 19142
    HEAP32[$28 + 4 >> 2] = 0; //@line 19144
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 19145
    HEAP32[$$byval_copy22 >> 2] = HEAP32[$28 >> 2]; //@line 19146
    HEAP32[$$byval_copy22 + 4 >> 2] = HEAP32[$28 + 4 >> 2]; //@line 19146
    $96 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($95, $2, $$byval_copy22) | 0; //@line 19147
    if (___async) {
     HEAP32[$ReallocAsyncCtx5 >> 2] = 395; //@line 19150
     $97 = $ReallocAsyncCtx5 + 4 | 0; //@line 19151
     HEAP32[$97 >> 2] = $28; //@line 19152
     $98 = $ReallocAsyncCtx5 + 8 | 0; //@line 19153
     HEAP32[$98 >> 2] = $30; //@line 19154
     sp = STACKTOP; //@line 19155
     STACKTOP = sp; //@line 19156
     return;
    }
    HEAP32[___async_retval >> 2] = $96; //@line 19159
    ___async_unwind = 0; //@line 19160
    HEAP32[$ReallocAsyncCtx5 >> 2] = 395; //@line 19161
    $97 = $ReallocAsyncCtx5 + 4 | 0; //@line 19162
    HEAP32[$97 >> 2] = $28; //@line 19163
    $98 = $ReallocAsyncCtx5 + 8 | 0; //@line 19164
    HEAP32[$98 >> 2] = $30; //@line 19165
    sp = STACKTOP; //@line 19166
    STACKTOP = sp; //@line 19167
    return;
   }
  } else {
   switch ($26 << 24 >> 24) {
   case 5:
    {
     HEAP8[$2 + 1178 >> 0] = 1; //@line 19173
     HEAP32[$2 + 2e3 >> 2] = 1; //@line 19175
     $102 = $2 + 1764 | 0; //@line 19176
     $103 = HEAP32[$102 >> 2] | 0; //@line 19177
     if (($103 | 0) == 0 | ($103 | 0) != ($79 | 0)) {
      $$pre$phi$sinkZ2D = $102; //@line 19182
      break L13;
     }
     _mbed_tracef(16, 13239, 13388, $40); //@line 19185
     HEAP8[$69 >> 0] = 0; //@line 19186
     HEAP32[$71 >> 2] = 8; //@line 19187
     $$pre$phi$sinkZ2D = $102; //@line 19188
     break L13;
     break;
    }
   case 3:
    {
     HEAP8[$2 + 1178 >> 0] = 0; //@line 19194
     HEAP32[$2 + 2e3 >> 2] = 0; //@line 19196
     $108 = $2 + 1764 | 0; //@line 19197
     $109 = HEAP32[$108 >> 2] | 0; //@line 19198
     if (($109 | 0) == 0 | ($109 | 0) != ($79 | 0)) {
      $$pre$phi$sinkZ2D = $108; //@line 19203
      break L13;
     }
     _mbed_tracef(16, 13239, 13388, $34); //@line 19206
     HEAP8[$69 >> 0] = 0; //@line 19207
     HEAP32[$71 >> 2] = 8; //@line 19208
     if (!(HEAP8[$2 + 1177 >> 0] | 0)) {
      STACKTOP = sp; //@line 19213
      return;
     }
     $116 = HEAP32[$2 + 1992 >> 2] | 0; //@line 19216
     HEAP32[$38 >> 2] = 389; //@line 19217
     HEAP32[$38 + 4 >> 2] = 0; //@line 19219
     $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 19220
     HEAP32[$$byval_copy23 >> 2] = HEAP32[$38 >> 2]; //@line 19221
     HEAP32[$$byval_copy23 + 4 >> 2] = HEAP32[$38 + 4 >> 2]; //@line 19221
     $117 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($116, $2, $$byval_copy23) | 0; //@line 19222
     if (___async) {
      HEAP32[$ReallocAsyncCtx4 >> 2] = 397; //@line 19225
      $118 = $ReallocAsyncCtx4 + 4 | 0; //@line 19226
      HEAP32[$118 >> 2] = $38; //@line 19227
      $119 = $ReallocAsyncCtx4 + 8 | 0; //@line 19228
      HEAP32[$119 >> 2] = $30; //@line 19229
      sp = STACKTOP; //@line 19230
      STACKTOP = sp; //@line 19231
      return;
     }
     HEAP32[___async_retval >> 2] = $117; //@line 19234
     ___async_unwind = 0; //@line 19235
     HEAP32[$ReallocAsyncCtx4 >> 2] = 397; //@line 19236
     $118 = $ReallocAsyncCtx4 + 4 | 0; //@line 19237
     HEAP32[$118 >> 2] = $38; //@line 19238
     $119 = $ReallocAsyncCtx4 + 8 | 0; //@line 19239
     HEAP32[$119 >> 2] = $30; //@line 19240
     sp = STACKTOP; //@line 19241
     STACKTOP = sp; //@line 19242
     return;
    }
   default:
    {
     $$pre$phi$sinkZ2D = $2 + 1764 | 0; //@line 19247
     break L13;
    }
   }
  }
 } while (0);
 HEAP32[$$pre$phi$sinkZ2D >> 2] = $79; //@line 19253
 $121 = $2 + 1177 | 0; //@line 19254
 if (!(HEAP8[$121 >> 0] | 0)) {
  __ZN14LoRaMacCommand20clear_command_bufferEv($85); //@line 19258
 } else {
  if ($6 & 32) {
   __ZN14LoRaMacCommand20clear_command_bufferEv($85); //@line 19263
   HEAP8[$67 >> 0] = 1; //@line 19264
   HEAP8[$68 >> 0] = 1; //@line 19265
  }
 }
 if ($24 + 252 - ($46 & 255) & 255 | 0) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 19274
  __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa($2, $22, $50, $44, $52, $54, $56, $79, 0, $12); //@line 19275
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 399; //@line 19278
   $131 = $ReallocAsyncCtx3 + 4 | 0; //@line 19279
   HEAP32[$131 >> 2] = $2; //@line 19280
   $132 = $ReallocAsyncCtx3 + 8 | 0; //@line 19281
   HEAP32[$132 >> 2] = $67; //@line 19282
   $133 = $ReallocAsyncCtx3 + 12 | 0; //@line 19283
   HEAP32[$133 >> 2] = $121; //@line 19284
   $134 = $ReallocAsyncCtx3 + 16 | 0; //@line 19285
   HEAP32[$134 >> 2] = $20; //@line 19286
   $135 = $ReallocAsyncCtx3 + 20 | 0; //@line 19287
   HEAP32[$135 >> 2] = $22; //@line 19288
   $136 = $ReallocAsyncCtx3 + 24 | 0; //@line 19289
   HEAP32[$136 >> 2] = $24; //@line 19290
   $137 = $ReallocAsyncCtx3 + 28 | 0; //@line 19291
   HEAP32[$137 >> 2] = $71; //@line 19292
   $138 = $ReallocAsyncCtx3 + 32 | 0; //@line 19293
   HEAP32[$138 >> 2] = $77; //@line 19294
   $139 = $ReallocAsyncCtx3 + 36 | 0; //@line 19295
   HEAP32[$139 >> 2] = $78; //@line 19296
   $140 = $ReallocAsyncCtx3 + 40 | 0; //@line 19297
   HEAP8[$140 >> 0] = $26; //@line 19298
   $141 = $ReallocAsyncCtx3 + 44 | 0; //@line 19299
   HEAP32[$141 >> 2] = $30; //@line 19300
   sp = STACKTOP; //@line 19301
   STACKTOP = sp; //@line 19302
   return;
  }
  ___async_unwind = 0; //@line 19304
  HEAP32[$ReallocAsyncCtx3 >> 2] = 399; //@line 19305
  $131 = $ReallocAsyncCtx3 + 4 | 0; //@line 19306
  HEAP32[$131 >> 2] = $2; //@line 19307
  $132 = $ReallocAsyncCtx3 + 8 | 0; //@line 19308
  HEAP32[$132 >> 2] = $67; //@line 19309
  $133 = $ReallocAsyncCtx3 + 12 | 0; //@line 19310
  HEAP32[$133 >> 2] = $121; //@line 19311
  $134 = $ReallocAsyncCtx3 + 16 | 0; //@line 19312
  HEAP32[$134 >> 2] = $20; //@line 19313
  $135 = $ReallocAsyncCtx3 + 20 | 0; //@line 19314
  HEAP32[$135 >> 2] = $22; //@line 19315
  $136 = $ReallocAsyncCtx3 + 24 | 0; //@line 19316
  HEAP32[$136 >> 2] = $24; //@line 19317
  $137 = $ReallocAsyncCtx3 + 28 | 0; //@line 19318
  HEAP32[$137 >> 2] = $71; //@line 19319
  $138 = $ReallocAsyncCtx3 + 32 | 0; //@line 19320
  HEAP32[$138 >> 2] = $77; //@line 19321
  $139 = $ReallocAsyncCtx3 + 36 | 0; //@line 19322
  HEAP32[$139 >> 2] = $78; //@line 19323
  $140 = $ReallocAsyncCtx3 + 40 | 0; //@line 19324
  HEAP8[$140 >> 0] = $26; //@line 19325
  $141 = $ReallocAsyncCtx3 + 44 | 0; //@line 19326
  HEAP32[$141 >> 2] = $30; //@line 19327
  sp = STACKTOP; //@line 19328
  STACKTOP = sp; //@line 19329
  return;
 }
 if ($44 << 24 >> 24) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(52) | 0; //@line 19335
  $145 = __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($85, $22, 8, $46, $12, $2 + 2068 | 0, $2 + 1876 | 0, $48) | 0; //@line 19336
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 400; //@line 19339
   $146 = $ReallocAsyncCtx2 + 4 | 0; //@line 19340
   HEAP32[$146 >> 2] = $2; //@line 19341
   $147 = $ReallocAsyncCtx2 + 8 | 0; //@line 19342
   HEAP32[$147 >> 2] = $67; //@line 19343
   $148 = $ReallocAsyncCtx2 + 12 | 0; //@line 19344
   HEAP32[$148 >> 2] = $121; //@line 19345
   $149 = $ReallocAsyncCtx2 + 16 | 0; //@line 19346
   HEAP32[$149 >> 2] = $20; //@line 19347
   $150 = $ReallocAsyncCtx2 + 20 | 0; //@line 19348
   HEAP32[$150 >> 2] = $22; //@line 19349
   $151 = $ReallocAsyncCtx2 + 24 | 0; //@line 19350
   HEAP32[$151 >> 2] = $24; //@line 19351
   $152 = $ReallocAsyncCtx2 + 28 | 0; //@line 19352
   HEAP32[$152 >> 2] = $71; //@line 19353
   $153 = $ReallocAsyncCtx2 + 32 | 0; //@line 19354
   HEAP32[$153 >> 2] = $77; //@line 19355
   $154 = $ReallocAsyncCtx2 + 36 | 0; //@line 19356
   HEAP32[$154 >> 2] = $78; //@line 19357
   $155 = $ReallocAsyncCtx2 + 40 | 0; //@line 19358
   HEAP8[$155 >> 0] = $26; //@line 19359
   $156 = $ReallocAsyncCtx2 + 44 | 0; //@line 19360
   HEAP32[$156 >> 2] = $85; //@line 19361
   $157 = $ReallocAsyncCtx2 + 48 | 0; //@line 19362
   HEAP32[$157 >> 2] = $30; //@line 19363
   sp = STACKTOP; //@line 19364
   STACKTOP = sp; //@line 19365
   return;
  }
  HEAP32[___async_retval >> 2] = $145; //@line 19368
  ___async_unwind = 0; //@line 19369
  HEAP32[$ReallocAsyncCtx2 >> 2] = 400; //@line 19370
  $146 = $ReallocAsyncCtx2 + 4 | 0; //@line 19371
  HEAP32[$146 >> 2] = $2; //@line 19372
  $147 = $ReallocAsyncCtx2 + 8 | 0; //@line 19373
  HEAP32[$147 >> 2] = $67; //@line 19374
  $148 = $ReallocAsyncCtx2 + 12 | 0; //@line 19375
  HEAP32[$148 >> 2] = $121; //@line 19376
  $149 = $ReallocAsyncCtx2 + 16 | 0; //@line 19377
  HEAP32[$149 >> 2] = $20; //@line 19378
  $150 = $ReallocAsyncCtx2 + 20 | 0; //@line 19379
  HEAP32[$150 >> 2] = $22; //@line 19380
  $151 = $ReallocAsyncCtx2 + 24 | 0; //@line 19381
  HEAP32[$151 >> 2] = $24; //@line 19382
  $152 = $ReallocAsyncCtx2 + 28 | 0; //@line 19383
  HEAP32[$152 >> 2] = $71; //@line 19384
  $153 = $ReallocAsyncCtx2 + 32 | 0; //@line 19385
  HEAP32[$153 >> 2] = $77; //@line 19386
  $154 = $ReallocAsyncCtx2 + 36 | 0; //@line 19387
  HEAP32[$154 >> 2] = $78; //@line 19388
  $155 = $ReallocAsyncCtx2 + 40 | 0; //@line 19389
  HEAP8[$155 >> 0] = $26; //@line 19390
  $156 = $ReallocAsyncCtx2 + 44 | 0; //@line 19391
  HEAP32[$156 >> 2] = $85; //@line 19392
  $157 = $ReallocAsyncCtx2 + 48 | 0; //@line 19393
  HEAP32[$157 >> 2] = $30; //@line 19394
  sp = STACKTOP; //@line 19395
  STACKTOP = sp; //@line 19396
  return;
 }
 if ($26 << 24 >> 24 == 7) {
  $160 = $2 + 1442 | 0; //@line 19400
  $162 = HEAPU8[$20 >> 0] | 0; //@line 19402
  _memcpy($160 | 0, $22 + $162 | 0, $24 | 0) | 0; //@line 19404
  HEAP32[$2 + 2e3 >> 2] = 3; //@line 19406
  HEAP32[$71 >> 2] = 0; //@line 19407
  HEAP32[$77 >> 2] = $160; //@line 19408
  HEAP16[$78 >> 1] = $24 - $162; //@line 19411
 }
 $170 = HEAP8[$2 + 1699 >> 0] | 0; //@line 19416
 $172 = HEAP8[$2 + 1698 >> 0] | 0; //@line 19418
 if (!(HEAP8[$121 >> 0] | 0)) {
  if ((HEAP32[$2 + 2364 >> 2] | 0) != 2) {
   STACKTOP = sp; //@line 19424
   return;
  }
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 19427
  __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1856 | 0); //@line 19428
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 401; //@line 19431
   $177 = $ReallocAsyncCtx10 + 4 | 0; //@line 19432
   HEAP32[$177 >> 2] = $30; //@line 19433
   sp = STACKTOP; //@line 19434
   STACKTOP = sp; //@line 19435
   return;
  }
  ___async_unwind = 0; //@line 19437
  HEAP32[$ReallocAsyncCtx10 >> 2] = 401; //@line 19438
  $177 = $ReallocAsyncCtx10 + 4 | 0; //@line 19439
  HEAP32[$177 >> 2] = $30; //@line 19440
  sp = STACKTOP; //@line 19441
  STACKTOP = sp; //@line 19442
  return;
 }
 if (HEAP8[$67 >> 0] | 0) {
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 19448
  __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1856 | 0); //@line 19449
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 402; //@line 19452
   $181 = $ReallocAsyncCtx9 + 4 | 0; //@line 19453
   HEAP32[$181 >> 2] = $30; //@line 19454
   sp = STACKTOP; //@line 19455
   STACKTOP = sp; //@line 19456
   return;
  }
  ___async_unwind = 0; //@line 19458
  HEAP32[$ReallocAsyncCtx9 >> 2] = 402; //@line 19459
  $181 = $ReallocAsyncCtx9 + 4 | 0; //@line 19460
  HEAP32[$181 >> 2] = $30; //@line 19461
  sp = STACKTOP; //@line 19462
  STACKTOP = sp; //@line 19463
  return;
 }
 if (($170 & 255) <= ($172 & 255)) {
  STACKTOP = sp; //@line 19467
  return;
 }
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 19470
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1856 | 0); //@line 19471
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 403; //@line 19474
  $184 = $ReallocAsyncCtx8 + 4 | 0; //@line 19475
  HEAP32[$184 >> 2] = $30; //@line 19476
  sp = STACKTOP; //@line 19477
  STACKTOP = sp; //@line 19478
  return;
 }
 ___async_unwind = 0; //@line 19480
 HEAP32[$ReallocAsyncCtx8 >> 2] = 403; //@line 19481
 $184 = $ReallocAsyncCtx8 + 4 | 0; //@line 19482
 HEAP32[$184 >> 2] = $30; //@line 19483
 sp = STACKTOP; //@line 19484
 STACKTOP = sp; //@line 19485
 return;
}
function _mbed_vtracef__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$0$i = 0, $$0141 = 0, $$0142 = 0, $$0144 = 0, $$1$off0 = 0, $$1$off0$expand_i1_val = 0, $$1$off0$expand_i1_val18 = 0, $$1143 = 0, $$1145 = 0, $$1152 = 0, $$1152$ = 0, $$3154 = 0, $$5156 = 0, $$5156$ = 0, $$expand_i1_val = 0, $$lobit = 0, $$sink = 0, $10 = 0, $102 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $136 = 0, $14 = 0, $147 = 0, $148 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $163 = 0, $164 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $26 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $53 = 0, $57 = 0, $6 = 0, $62 = 0, $73 = 0, $74 = 0, $78 = 0, $79 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $91 = 0, $95 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $extract$t159 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11658
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11660
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11662
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 11664
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11666
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11668
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11670
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11672
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11674
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11676
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 11678
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 11680
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 11684
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 11688
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 11690
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 11692
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 11694
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 11696
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 11698
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 11700
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 11702
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 11704
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 11706
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 11708
 HEAP32[178] = (HEAP32[178] | 0) + 1; //@line 11711
 $53 = HEAP32[167] | 0; //@line 11712
 do {
  if ($53 | 0) {
   HEAP8[$53 >> 0] = 0; //@line 11716
   do {
    if ($6 << 24 >> 24 > -1 & ($8 | 0) != 0) {
     $57 = HEAP32[164] | 0; //@line 11722
     if (HEAP8[$57 >> 0] | 0) {
      if (_strstr($57, $8) | 0) {
       $$0$i = 1; //@line 11729
       break;
      }
     }
     $62 = HEAP32[165] | 0; //@line 11733
     if (!(HEAP8[$62 >> 0] | 0)) {
      label = 9; //@line 11737
     } else {
      if (!(_strstr($62, $8) | 0)) {
       $$0$i = 1; //@line 11742
      } else {
       label = 9; //@line 11744
      }
     }
    } else {
     label = 9; //@line 11748
    }
   } while (0);
   if ((label | 0) == 9) {
    $$0$i = 0; //@line 11752
   }
   if (!((HEAP32[174] | 0) != 0 & ((($8 | 0) == 0 | (($14 | 0) == 0 | $$0$i)) ^ 1))) {
    HEAP32[171] = HEAP32[169]; //@line 11764
    break;
   }
   $73 = HEAPU8[652] | 0; //@line 11768
   $74 = $6 & 255; //@line 11769
   if ($74 & 31 & $73 | 0) {
    $78 = $73 & 64; //@line 11774
    $$lobit = $78 >>> 6; //@line 11775
    $79 = $$lobit & 255; //@line 11776
    $83 = ($73 & 32 | 0) == 0; //@line 11780
    $84 = HEAP32[168] | 0; //@line 11781
    $85 = HEAP32[167] | 0; //@line 11782
    $86 = $6 << 24 >> 24 == 1; //@line 11783
    if ($86 | ($73 & 128 | 0) != 0) {
     $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 11786
     _vsnprintf($85, $84, $14, $16) | 0; //@line 11787
     if (___async) {
      HEAP32[$ReallocAsyncCtx12 >> 2] = 127; //@line 11790
      $87 = $ReallocAsyncCtx12 + 4 | 0; //@line 11791
      $$expand_i1_val = $86 & 1; //@line 11792
      HEAP8[$87 >> 0] = $$expand_i1_val; //@line 11793
      sp = STACKTOP; //@line 11794
      return;
     }
     ___async_unwind = 0; //@line 11797
     HEAP32[$ReallocAsyncCtx12 >> 2] = 127; //@line 11798
     $87 = $ReallocAsyncCtx12 + 4 | 0; //@line 11799
     $$expand_i1_val = $86 & 1; //@line 11800
     HEAP8[$87 >> 0] = $$expand_i1_val; //@line 11801
     sp = STACKTOP; //@line 11802
     return;
    }
    if (!$78) {
     $$1$off0 = ($$lobit | 0) != 0; //@line 11808
     $$1143 = $85; //@line 11808
     $$1145 = $84; //@line 11808
     $$3154 = 0; //@line 11808
     label = 28; //@line 11809
    } else {
     if ($83) {
      $$0142 = $85; //@line 11812
      $$0144 = $84; //@line 11812
     } else {
      $89 = _snprintf($85, $84, 12238, $22) | 0; //@line 11814
      $$ = ($89 | 0) >= ($84 | 0) ? 0 : $89; //@line 11816
      $91 = ($$ | 0) > 0; //@line 11817
      $$0142 = $91 ? $85 + $$ | 0 : $85; //@line 11822
      $$0144 = $84 - ($91 ? $$ : 0) | 0; //@line 11822
     }
     if (($$0144 | 0) > 0) {
      $95 = $74 + -2 | 0; //@line 11826
      switch ($95 >>> 1 | $95 << 31 | 0) {
      case 0:
       {
        $$sink = 12256; //@line 11832
        label = 25; //@line 11833
        break;
       }
      case 1:
       {
        $$sink = 12262; //@line 11837
        label = 25; //@line 11838
        break;
       }
      case 3:
       {
        $$sink = 12250; //@line 11842
        label = 25; //@line 11843
        break;
       }
      case 7:
       {
        $$sink = 12244; //@line 11847
        label = 25; //@line 11848
        break;
       }
      default:
       {
        $$0141 = 0; //@line 11852
        $$1152 = 0; //@line 11852
       }
      }
      if ((label | 0) == 25) {
       HEAP32[$26 >> 2] = $$sink; //@line 11856
       $$0141 = $79 & 1; //@line 11859
       $$1152 = _snprintf($$0142, $$0144, 12268, $26) | 0; //@line 11859
      }
      $$1152$ = ($$1152 | 0) < ($$0144 | 0) ? $$1152 : 0; //@line 11862
      $extract$t159 = $$0141 << 24 >> 24 != 0; //@line 11864
      if (($$1152$ | 0) > 0) {
       $102 = $$0141 << 24 >> 24 == 0; //@line 11866
       $$1$off0 = $extract$t159; //@line 11871
       $$1143 = $102 ? $$0142 : $$0142 + $$1152$ | 0; //@line 11871
       $$1145 = $$0144 - ($102 ? 0 : $$1152$) | 0; //@line 11871
       $$3154 = $$1152; //@line 11871
       label = 28; //@line 11872
      } else {
       $$1$off0 = $extract$t159; //@line 11874
       $$1143 = $$0142; //@line 11874
       $$1145 = $$0144; //@line 11874
       $$3154 = $$1152$; //@line 11874
       label = 28; //@line 11875
      }
     }
    }
    if ((label | 0) == 28) {
     if (($$1145 | 0) > 0 & (HEAP32[172] | 0) != 0) {
      HEAP32[$38 >> 2] = HEAP32[$16 >> 2]; //@line 11886
      $ReallocAsyncCtx11 = _emscripten_realloc_async_context(104) | 0; //@line 11887
      $108 = _vsnprintf(0, 0, $14, $38) | 0; //@line 11888
      if (___async) {
       HEAP32[$ReallocAsyncCtx11 >> 2] = 131; //@line 11891
       $109 = $ReallocAsyncCtx11 + 4 | 0; //@line 11892
       HEAP32[$109 >> 2] = $$3154; //@line 11893
       $110 = $ReallocAsyncCtx11 + 8 | 0; //@line 11894
       HEAP32[$110 >> 2] = $2; //@line 11895
       $111 = $ReallocAsyncCtx11 + 12 | 0; //@line 11896
       HEAP32[$111 >> 2] = $4; //@line 11897
       $112 = $ReallocAsyncCtx11 + 16 | 0; //@line 11898
       HEAP32[$112 >> 2] = $18; //@line 11899
       $113 = $ReallocAsyncCtx11 + 20 | 0; //@line 11900
       HEAP32[$113 >> 2] = $20; //@line 11901
       $114 = $ReallocAsyncCtx11 + 24 | 0; //@line 11902
       $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 11903
       HEAP8[$114 >> 0] = $$1$off0$expand_i1_val; //@line 11904
       $115 = $ReallocAsyncCtx11 + 28 | 0; //@line 11905
       HEAP32[$115 >> 2] = $34; //@line 11906
       $116 = $ReallocAsyncCtx11 + 32 | 0; //@line 11907
       HEAP32[$116 >> 2] = $36; //@line 11908
       $117 = $ReallocAsyncCtx11 + 36 | 0; //@line 11909
       HEAP32[$117 >> 2] = $10; //@line 11910
       $118 = $ReallocAsyncCtx11 + 40 | 0; //@line 11911
       HEAP32[$118 >> 2] = $8; //@line 11912
       $119 = $ReallocAsyncCtx11 + 44 | 0; //@line 11913
       HEAP32[$119 >> 2] = $12; //@line 11914
       $120 = $ReallocAsyncCtx11 + 48 | 0; //@line 11915
       HEAP32[$120 >> 2] = $14; //@line 11916
       $121 = $ReallocAsyncCtx11 + 52 | 0; //@line 11917
       HEAP32[$121 >> 2] = $16; //@line 11918
       $122 = $ReallocAsyncCtx11 + 56 | 0; //@line 11919
       HEAP32[$122 >> 2] = $30; //@line 11920
       $123 = $ReallocAsyncCtx11 + 60 | 0; //@line 11921
       HEAP32[$123 >> 2] = $$1143; //@line 11922
       $124 = $ReallocAsyncCtx11 + 64 | 0; //@line 11923
       HEAP32[$124 >> 2] = $$1145; //@line 11924
       $125 = $ReallocAsyncCtx11 + 68 | 0; //@line 11925
       HEAP32[$125 >> 2] = $32; //@line 11926
       $126 = $ReallocAsyncCtx11 + 72 | 0; //@line 11927
       HEAP32[$126 >> 2] = $38; //@line 11928
       $127 = $ReallocAsyncCtx11 + 76 | 0; //@line 11929
       HEAP32[$127 >> 2] = $40; //@line 11930
       $128 = $ReallocAsyncCtx11 + 80 | 0; //@line 11931
       HEAP32[$128 >> 2] = $42; //@line 11932
       $129 = $ReallocAsyncCtx11 + 84 | 0; //@line 11933
       HEAP32[$129 >> 2] = $74; //@line 11934
       $130 = $ReallocAsyncCtx11 + 88 | 0; //@line 11935
       HEAP32[$130 >> 2] = $44; //@line 11936
       $131 = $ReallocAsyncCtx11 + 92 | 0; //@line 11937
       HEAP32[$131 >> 2] = $46; //@line 11938
       $132 = $ReallocAsyncCtx11 + 96 | 0; //@line 11939
       HEAP32[$132 >> 2] = $48; //@line 11940
       $133 = $ReallocAsyncCtx11 + 100 | 0; //@line 11941
       HEAP32[$133 >> 2] = $50; //@line 11942
       sp = STACKTOP; //@line 11943
       return;
      }
      HEAP32[___async_retval >> 2] = $108; //@line 11947
      ___async_unwind = 0; //@line 11948
      HEAP32[$ReallocAsyncCtx11 >> 2] = 131; //@line 11949
      $109 = $ReallocAsyncCtx11 + 4 | 0; //@line 11950
      HEAP32[$109 >> 2] = $$3154; //@line 11951
      $110 = $ReallocAsyncCtx11 + 8 | 0; //@line 11952
      HEAP32[$110 >> 2] = $2; //@line 11953
      $111 = $ReallocAsyncCtx11 + 12 | 0; //@line 11954
      HEAP32[$111 >> 2] = $4; //@line 11955
      $112 = $ReallocAsyncCtx11 + 16 | 0; //@line 11956
      HEAP32[$112 >> 2] = $18; //@line 11957
      $113 = $ReallocAsyncCtx11 + 20 | 0; //@line 11958
      HEAP32[$113 >> 2] = $20; //@line 11959
      $114 = $ReallocAsyncCtx11 + 24 | 0; //@line 11960
      $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 11961
      HEAP8[$114 >> 0] = $$1$off0$expand_i1_val; //@line 11962
      $115 = $ReallocAsyncCtx11 + 28 | 0; //@line 11963
      HEAP32[$115 >> 2] = $34; //@line 11964
      $116 = $ReallocAsyncCtx11 + 32 | 0; //@line 11965
      HEAP32[$116 >> 2] = $36; //@line 11966
      $117 = $ReallocAsyncCtx11 + 36 | 0; //@line 11967
      HEAP32[$117 >> 2] = $10; //@line 11968
      $118 = $ReallocAsyncCtx11 + 40 | 0; //@line 11969
      HEAP32[$118 >> 2] = $8; //@line 11970
      $119 = $ReallocAsyncCtx11 + 44 | 0; //@line 11971
      HEAP32[$119 >> 2] = $12; //@line 11972
      $120 = $ReallocAsyncCtx11 + 48 | 0; //@line 11973
      HEAP32[$120 >> 2] = $14; //@line 11974
      $121 = $ReallocAsyncCtx11 + 52 | 0; //@line 11975
      HEAP32[$121 >> 2] = $16; //@line 11976
      $122 = $ReallocAsyncCtx11 + 56 | 0; //@line 11977
      HEAP32[$122 >> 2] = $30; //@line 11978
      $123 = $ReallocAsyncCtx11 + 60 | 0; //@line 11979
      HEAP32[$123 >> 2] = $$1143; //@line 11980
      $124 = $ReallocAsyncCtx11 + 64 | 0; //@line 11981
      HEAP32[$124 >> 2] = $$1145; //@line 11982
      $125 = $ReallocAsyncCtx11 + 68 | 0; //@line 11983
      HEAP32[$125 >> 2] = $32; //@line 11984
      $126 = $ReallocAsyncCtx11 + 72 | 0; //@line 11985
      HEAP32[$126 >> 2] = $38; //@line 11986
      $127 = $ReallocAsyncCtx11 + 76 | 0; //@line 11987
      HEAP32[$127 >> 2] = $40; //@line 11988
      $128 = $ReallocAsyncCtx11 + 80 | 0; //@line 11989
      HEAP32[$128 >> 2] = $42; //@line 11990
      $129 = $ReallocAsyncCtx11 + 84 | 0; //@line 11991
      HEAP32[$129 >> 2] = $74; //@line 11992
      $130 = $ReallocAsyncCtx11 + 88 | 0; //@line 11993
      HEAP32[$130 >> 2] = $44; //@line 11994
      $131 = $ReallocAsyncCtx11 + 92 | 0; //@line 11995
      HEAP32[$131 >> 2] = $46; //@line 11996
      $132 = $ReallocAsyncCtx11 + 96 | 0; //@line 11997
      HEAP32[$132 >> 2] = $48; //@line 11998
      $133 = $ReallocAsyncCtx11 + 100 | 0; //@line 11999
      HEAP32[$133 >> 2] = $50; //@line 12000
      sp = STACKTOP; //@line 12001
      return;
     }
     if (($$1145 | 0) > 0) {
      $136 = $74 + -2 | 0; //@line 12006
      switch ($136 >>> 1 | $136 << 31 | 0) {
      case 0:
       {
        HEAP32[$40 >> 2] = $8; //@line 12012
        $$5156 = _snprintf($$1143, $$1145, 12271, $40) | 0; //@line 12014
        break;
       }
      case 1:
       {
        HEAP32[$48 >> 2] = $8; //@line 12018
        $$5156 = _snprintf($$1143, $$1145, 12286, $48) | 0; //@line 12020
        break;
       }
      case 3:
       {
        HEAP32[$44 >> 2] = $8; //@line 12024
        $$5156 = _snprintf($$1143, $$1145, 12301, $44) | 0; //@line 12026
        break;
       }
      case 7:
       {
        HEAP32[$10 >> 2] = $8; //@line 12030
        $$5156 = _snprintf($$1143, $$1145, 12316, $10) | 0; //@line 12032
        break;
       }
      default:
       {
        $$5156 = _snprintf($$1143, $$1145, 12331, $2) | 0; //@line 12037
       }
      }
      $$5156$ = ($$5156 | 0) < ($$1145 | 0) ? $$5156 : 0; //@line 12041
      $147 = $$1143 + $$5156$ | 0; //@line 12043
      $148 = $$1145 - $$5156$ | 0; //@line 12044
      if (($$5156$ | 0) > 0 & ($148 | 0) > 0) {
       $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 12048
       $150 = _vsnprintf($147, $148, $14, $16) | 0; //@line 12049
       if (___async) {
        HEAP32[$ReallocAsyncCtx10 >> 2] = 133; //@line 12052
        $151 = $ReallocAsyncCtx10 + 4 | 0; //@line 12053
        HEAP32[$151 >> 2] = $18; //@line 12054
        $152 = $ReallocAsyncCtx10 + 8 | 0; //@line 12055
        HEAP32[$152 >> 2] = $20; //@line 12056
        $153 = $ReallocAsyncCtx10 + 12 | 0; //@line 12057
        $$1$off0$expand_i1_val18 = $$1$off0 & 1; //@line 12058
        HEAP8[$153 >> 0] = $$1$off0$expand_i1_val18; //@line 12059
        $154 = $ReallocAsyncCtx10 + 16 | 0; //@line 12060
        HEAP32[$154 >> 2] = $34; //@line 12061
        $155 = $ReallocAsyncCtx10 + 20 | 0; //@line 12062
        HEAP32[$155 >> 2] = $36; //@line 12063
        $156 = $ReallocAsyncCtx10 + 24 | 0; //@line 12064
        HEAP32[$156 >> 2] = $148; //@line 12065
        $157 = $ReallocAsyncCtx10 + 28 | 0; //@line 12066
        HEAP32[$157 >> 2] = $147; //@line 12067
        sp = STACKTOP; //@line 12068
        return;
       }
       HEAP32[___async_retval >> 2] = $150; //@line 12072
       ___async_unwind = 0; //@line 12073
       HEAP32[$ReallocAsyncCtx10 >> 2] = 133; //@line 12074
       $151 = $ReallocAsyncCtx10 + 4 | 0; //@line 12075
       HEAP32[$151 >> 2] = $18; //@line 12076
       $152 = $ReallocAsyncCtx10 + 8 | 0; //@line 12077
       HEAP32[$152 >> 2] = $20; //@line 12078
       $153 = $ReallocAsyncCtx10 + 12 | 0; //@line 12079
       $$1$off0$expand_i1_val18 = $$1$off0 & 1; //@line 12080
       HEAP8[$153 >> 0] = $$1$off0$expand_i1_val18; //@line 12081
       $154 = $ReallocAsyncCtx10 + 16 | 0; //@line 12082
       HEAP32[$154 >> 2] = $34; //@line 12083
       $155 = $ReallocAsyncCtx10 + 20 | 0; //@line 12084
       HEAP32[$155 >> 2] = $36; //@line 12085
       $156 = $ReallocAsyncCtx10 + 24 | 0; //@line 12086
       HEAP32[$156 >> 2] = $148; //@line 12087
       $157 = $ReallocAsyncCtx10 + 28 | 0; //@line 12088
       HEAP32[$157 >> 2] = $147; //@line 12089
       sp = STACKTOP; //@line 12090
       return;
      }
     }
    }
    $159 = HEAP32[174] | 0; //@line 12095
    $160 = HEAP32[167] | 0; //@line 12096
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 12097
    FUNCTION_TABLE_vi[$159 & 1023]($160); //@line 12098
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 135; //@line 12101
     sp = STACKTOP; //@line 12102
     return;
    }
    ___async_unwind = 0; //@line 12105
    HEAP32[$ReallocAsyncCtx7 >> 2] = 135; //@line 12106
    sp = STACKTOP; //@line 12107
    return;
   }
  }
 } while (0);
 $161 = HEAP32[177] | 0; //@line 12112
 if (!$161) {
  return;
 }
 $163 = HEAP32[178] | 0; //@line 12117
 HEAP32[178] = 0; //@line 12118
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 12119
 FUNCTION_TABLE_v[$161 & 7](); //@line 12120
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 136; //@line 12123
  $164 = $ReallocAsyncCtx8 + 4 | 0; //@line 12124
  HEAP32[$164 >> 2] = $163; //@line 12125
  sp = STACKTOP; //@line 12126
  return;
 }
 ___async_unwind = 0; //@line 12129
 HEAP32[$ReallocAsyncCtx8 >> 2] = 136; //@line 12130
 $164 = $ReallocAsyncCtx8 + 4 | 0; //@line 12131
 HEAP32[$164 >> 2] = $163; //@line 12132
 sp = STACKTOP; //@line 12133
 return;
}
function _mbedtls_cipher_cmac_finish($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$013$i = 0, $$01720$i55 = 0, $$019$i = 0, $$019$i52 = 0, $$021$i54 = 0, $$09$i = 0, $$09$i41 = 0, $$09$i45 = 0, $$sink$sink$i = 0, $12 = 0, $129 = 0, $132 = 0, $145 = 0, $148 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $170 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $185 = 0, $19 = 0, $2 = 0, $20 = 0, $202 = 0, $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $64 = 0, $65 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, label = 0, sp = 0, $156$looptemp = 0;
 sp = STACKTOP; //@line 4093
 STACKTOP = STACKTOP + 80 | 0; //@line 4094
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 4094
 $2 = sp + 56 | 0; //@line 4095
 $3 = sp + 4 | 0; //@line 4096
 $4 = sp + 40 | 0; //@line 4097
 $5 = sp + 24 | 0; //@line 4098
 $6 = sp + 8 | 0; //@line 4099
 $7 = sp; //@line 4100
 if (!$0) {
  $$0 = -24832; //@line 4103
  STACKTOP = sp; //@line 4104
  return $$0 | 0; //@line 4104
 }
 $9 = HEAP32[$0 >> 2] | 0; //@line 4106
 if (!$9) {
  $$0 = -24832; //@line 4109
  STACKTOP = sp; //@line 4110
  return $$0 | 0; //@line 4110
 }
 $12 = HEAP32[$0 + 64 >> 2] | 0; //@line 4113
 if (($1 | 0) == 0 | ($12 | 0) == 0) {
  $$0 = -24832; //@line 4118
  STACKTOP = sp; //@line 4119
  return $$0 | 0; //@line 4119
 }
 $16 = HEAP32[$9 + 24 >> 2] | 0; //@line 4122
 $17 = $4 + 1 | 0; //@line 4123
 HEAP8[$4 >> 0] = 0; //@line 4124
 $18 = $4 + 2 | 0; //@line 4125
 HEAP8[$17 >> 0] = 0; //@line 4126
 $19 = $4 + 3 | 0; //@line 4127
 HEAP8[$18 >> 0] = 0; //@line 4128
 $20 = $4 + 4 | 0; //@line 4129
 HEAP8[$19 >> 0] = 0; //@line 4130
 $21 = $4 + 5 | 0; //@line 4131
 HEAP8[$20 >> 0] = 0; //@line 4132
 $22 = $4 + 6 | 0; //@line 4133
 HEAP8[$21 >> 0] = 0; //@line 4134
 $23 = $4 + 7 | 0; //@line 4135
 HEAP8[$22 >> 0] = 0; //@line 4136
 $24 = $4 + 8 | 0; //@line 4137
 HEAP8[$23 >> 0] = 0; //@line 4138
 $25 = $4 + 9 | 0; //@line 4139
 HEAP8[$24 >> 0] = 0; //@line 4140
 $26 = $4 + 10 | 0; //@line 4141
 HEAP8[$25 >> 0] = 0; //@line 4142
 $27 = $4 + 11 | 0; //@line 4143
 HEAP8[$26 >> 0] = 0; //@line 4144
 $28 = $4 + 12 | 0; //@line 4145
 HEAP8[$27 >> 0] = 0; //@line 4146
 $29 = $4 + 13 | 0; //@line 4147
 HEAP8[$28 >> 0] = 0; //@line 4148
 $30 = $4 + 14 | 0; //@line 4149
 HEAP8[$29 >> 0] = 0; //@line 4150
 $31 = $4 + 15 | 0; //@line 4151
 HEAP8[$30 >> 0] = 0; //@line 4152
 HEAP8[$31 >> 0] = 0; //@line 4153
 $32 = $5 + 1 | 0; //@line 4154
 HEAP8[$5 >> 0] = 0; //@line 4155
 $33 = $5 + 2 | 0; //@line 4156
 HEAP8[$32 >> 0] = 0; //@line 4157
 $34 = $5 + 3 | 0; //@line 4158
 HEAP8[$33 >> 0] = 0; //@line 4159
 $35 = $5 + 4 | 0; //@line 4160
 HEAP8[$34 >> 0] = 0; //@line 4161
 $36 = $5 + 5 | 0; //@line 4162
 HEAP8[$35 >> 0] = 0; //@line 4163
 $37 = $5 + 6 | 0; //@line 4164
 HEAP8[$36 >> 0] = 0; //@line 4165
 $38 = $5 + 7 | 0; //@line 4166
 HEAP8[$37 >> 0] = 0; //@line 4167
 $39 = $5 + 8 | 0; //@line 4168
 HEAP8[$38 >> 0] = 0; //@line 4169
 $40 = $5 + 9 | 0; //@line 4170
 HEAP8[$39 >> 0] = 0; //@line 4171
 $41 = $5 + 10 | 0; //@line 4172
 HEAP8[$40 >> 0] = 0; //@line 4173
 $42 = $5 + 11 | 0; //@line 4174
 HEAP8[$41 >> 0] = 0; //@line 4175
 $43 = $5 + 12 | 0; //@line 4176
 HEAP8[$42 >> 0] = 0; //@line 4177
 $44 = $5 + 13 | 0; //@line 4178
 HEAP8[$43 >> 0] = 0; //@line 4179
 $45 = $5 + 14 | 0; //@line 4180
 HEAP8[$44 >> 0] = 0; //@line 4181
 $46 = $5 + 15 | 0; //@line 4182
 HEAP8[$45 >> 0] = 0; //@line 4183
 HEAP8[$46 >> 0] = 0; //@line 4184
 $47 = $2 + 1 | 0; //@line 4185
 HEAP8[$2 >> 0] = 0; //@line 4186
 $48 = $2 + 2 | 0; //@line 4187
 HEAP8[$47 >> 0] = 0; //@line 4188
 $49 = $2 + 3 | 0; //@line 4189
 HEAP8[$48 >> 0] = 0; //@line 4190
 $50 = $2 + 4 | 0; //@line 4191
 HEAP8[$49 >> 0] = 0; //@line 4192
 $51 = $2 + 5 | 0; //@line 4193
 HEAP8[$50 >> 0] = 0; //@line 4194
 $52 = $2 + 6 | 0; //@line 4195
 HEAP8[$51 >> 0] = 0; //@line 4196
 $53 = $2 + 7 | 0; //@line 4197
 HEAP8[$52 >> 0] = 0; //@line 4198
 $54 = $2 + 8 | 0; //@line 4199
 HEAP8[$53 >> 0] = 0; //@line 4200
 $55 = $2 + 9 | 0; //@line 4201
 HEAP8[$54 >> 0] = 0; //@line 4202
 $56 = $2 + 10 | 0; //@line 4203
 HEAP8[$55 >> 0] = 0; //@line 4204
 $57 = $2 + 11 | 0; //@line 4205
 HEAP8[$56 >> 0] = 0; //@line 4206
 $58 = $2 + 12 | 0; //@line 4207
 HEAP8[$57 >> 0] = 0; //@line 4208
 $59 = $2 + 13 | 0; //@line 4209
 HEAP8[$58 >> 0] = 0; //@line 4210
 $60 = $2 + 14 | 0; //@line 4211
 HEAP8[$59 >> 0] = 0; //@line 4212
 $61 = $2 + 15 | 0; //@line 4213
 HEAP8[$60 >> 0] = 0; //@line 4214
 HEAP8[$61 >> 0] = 0; //@line 4215
 $64 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 4218
 $AsyncCtx2 = _emscripten_alloc_async_context(252, sp) | 0; //@line 4219
 $65 = _mbedtls_cipher_update($0, $2, $64, $2, $3) | 0; //@line 4220
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 573; //@line 4223
  HEAP32[$AsyncCtx2 + 4 >> 2] = $7; //@line 4225
  HEAP32[$AsyncCtx2 + 8 >> 2] = $39; //@line 4227
  HEAP32[$AsyncCtx2 + 12 >> 2] = $45; //@line 4229
  HEAP32[$AsyncCtx2 + 16 >> 2] = $30; //@line 4231
  HEAP32[$AsyncCtx2 + 20 >> 2] = $7; //@line 4233
  HEAP32[$AsyncCtx2 + 24 >> 2] = $1; //@line 4235
  HEAP32[$AsyncCtx2 + 28 >> 2] = $0; //@line 4237
  HEAP32[$AsyncCtx2 + 32 >> 2] = $50; //@line 4239
  HEAP32[$AsyncCtx2 + 36 >> 2] = $53; //@line 4241
  HEAP32[$AsyncCtx2 + 40 >> 2] = $33; //@line 4243
  HEAP32[$AsyncCtx2 + 44 >> 2] = $18; //@line 4245
  HEAP32[$AsyncCtx2 + 48 >> 2] = $42; //@line 4247
  HEAP32[$AsyncCtx2 + 52 >> 2] = $23; //@line 4249
  HEAP32[$AsyncCtx2 + 56 >> 2] = $4; //@line 4251
  HEAP32[$AsyncCtx2 + 60 >> 2] = $34; //@line 4253
  HEAP32[$AsyncCtx2 + 64 >> 2] = $37; //@line 4255
  HEAP32[$AsyncCtx2 + 68 >> 2] = $31; //@line 4257
  HEAP32[$AsyncCtx2 + 72 >> 2] = $48; //@line 4259
  HEAP32[$AsyncCtx2 + 76 >> 2] = $21; //@line 4261
  HEAP32[$AsyncCtx2 + 80 >> 2] = $2; //@line 4263
  HEAP32[$AsyncCtx2 + 84 >> 2] = $27; //@line 4265
  HEAP32[$AsyncCtx2 + 88 >> 2] = $51; //@line 4267
  HEAP32[$AsyncCtx2 + 92 >> 2] = $20; //@line 4269
  HEAP32[$AsyncCtx2 + 96 >> 2] = $12; //@line 4271
  HEAP32[$AsyncCtx2 + 100 >> 2] = $16; //@line 4273
  HEAP32[$AsyncCtx2 + 104 >> 2] = $17; //@line 4275
  HEAP32[$AsyncCtx2 + 108 >> 2] = $54; //@line 4277
  HEAP32[$AsyncCtx2 + 112 >> 2] = $24; //@line 4279
  HEAP32[$AsyncCtx2 + 116 >> 2] = $47; //@line 4281
  HEAP32[$AsyncCtx2 + 120 >> 2] = $41; //@line 4283
  HEAP32[$AsyncCtx2 + 124 >> 2] = $61; //@line 4285
  HEAP32[$AsyncCtx2 + 128 >> 2] = $5; //@line 4287
  HEAP32[$AsyncCtx2 + 132 >> 2] = $57; //@line 4289
  HEAP32[$AsyncCtx2 + 136 >> 2] = $19; //@line 4291
  HEAP32[$AsyncCtx2 + 140 >> 2] = $22; //@line 4293
  HEAP32[$AsyncCtx2 + 144 >> 2] = $25; //@line 4295
  HEAP32[$AsyncCtx2 + 148 >> 2] = $28; //@line 4297
  HEAP32[$AsyncCtx2 + 152 >> 2] = $38; //@line 4299
  HEAP32[$AsyncCtx2 + 156 >> 2] = $44; //@line 4301
  HEAP32[$AsyncCtx2 + 160 >> 2] = $52; //@line 4303
  HEAP32[$AsyncCtx2 + 164 >> 2] = $29; //@line 4305
  HEAP32[$AsyncCtx2 + 168 >> 2] = $58; //@line 4307
  HEAP32[$AsyncCtx2 + 172 >> 2] = $64; //@line 4309
  HEAP32[$AsyncCtx2 + 176 >> 2] = $3; //@line 4311
  HEAP32[$AsyncCtx2 + 180 >> 2] = $35; //@line 4313
  HEAP32[$AsyncCtx2 + 184 >> 2] = $55; //@line 4315
  HEAP32[$AsyncCtx2 + 188 >> 2] = $2; //@line 4317
  HEAP32[$AsyncCtx2 + 192 >> 2] = $6; //@line 4319
  HEAP32[$AsyncCtx2 + 196 >> 2] = $40; //@line 4321
  HEAP32[$AsyncCtx2 + 200 >> 2] = $43; //@line 4323
  HEAP32[$AsyncCtx2 + 204 >> 2] = $46; //@line 4325
  HEAP32[$AsyncCtx2 + 208 >> 2] = $60; //@line 4327
  HEAP32[$AsyncCtx2 + 212 >> 2] = $56; //@line 4329
  HEAP32[$AsyncCtx2 + 216 >> 2] = $5; //@line 4331
  HEAP32[$AsyncCtx2 + 220 >> 2] = $12; //@line 4333
  HEAP32[$AsyncCtx2 + 224 >> 2] = $26; //@line 4335
  HEAP32[$AsyncCtx2 + 228 >> 2] = $32; //@line 4337
  HEAP32[$AsyncCtx2 + 232 >> 2] = $6; //@line 4339
  HEAP32[$AsyncCtx2 + 236 >> 2] = $36; //@line 4341
  HEAP32[$AsyncCtx2 + 240 >> 2] = $59; //@line 4343
  HEAP32[$AsyncCtx2 + 244 >> 2] = $4; //@line 4345
  HEAP32[$AsyncCtx2 + 248 >> 2] = $49; //@line 4347
  sp = STACKTOP; //@line 4348
  STACKTOP = sp; //@line 4349
  return 0; //@line 4349
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 4351
 L13 : do {
  if (!$65) {
   switch ($64 | 0) {
   case 16:
    {
     $$019$i52 = 135; //@line 4357
     break;
    }
   case 8:
    {
     $$019$i52 = 27; //@line 4361
     break;
    }
   default:
    {
     break L13;
    }
   }
   $129 = $64 + -1 | 0; //@line 4368
   $$01720$i55 = 0; //@line 4369
   $$021$i54 = $129; //@line 4369
   while (1) {
    $132 = HEAPU8[$2 + $$021$i54 >> 0] | 0; //@line 4373
    HEAP8[$4 + $$021$i54 >> 0] = $132 << 1 | $$01720$i55; //@line 4378
    if (($$021$i54 | 0) > 0) {
     $$01720$i55 = $132 >>> 7; //@line 4383
     $$021$i54 = $$021$i54 + -1 | 0; //@line 4383
    } else {
     break;
    }
   }
   $145 = $4 + $129 | 0; //@line 4393
   $148 = $$019$i52 & 0 - ((HEAPU8[$2 >> 0] | 0) >>> 7) ^ (HEAPU8[$145 >> 0] | 0); //@line 4396
   HEAP8[$145 >> 0] = $148; //@line 4398
   switch ($64 | 0) {
   case 16:
    {
     $$019$i = 135; //@line 4401
     break;
    }
   case 8:
    {
     $$019$i = 27; //@line 4405
     break;
    }
   default:
    {
     break L13;
    }
   }
   HEAP8[$5 + $129 >> 0] = $148 << 1; //@line 4415
   if (($129 | 0) > 0) {
    $156 = $148; //@line 4419
    $157 = $64 + -2 | 0; //@line 4419
    while (1) {
     $156$looptemp = $156;
     $156 = HEAPU8[$4 + $157 >> 0] | 0; //@line 4424
     HEAP8[$5 + $157 >> 0] = $156 << 1 | $156$looptemp >>> 7; //@line 4429
     if (($157 | 0) <= 0) {
      break;
     } else {
      $157 = $157 + -1 | 0; //@line 4433
     }
    }
   }
   $170 = $5 + $129 | 0; //@line 4444
   HEAP8[$170 >> 0] = $$019$i & 0 - ((HEAPU8[$4 >> 0] | 0) >>> 7) ^ (HEAPU8[$170 >> 0] | 0); //@line 4449
  }
 } while (0);
 HEAP8[$2 >> 0] = 0; //@line 4452
 HEAP8[$47 >> 0] = 0; //@line 4453
 HEAP8[$48 >> 0] = 0; //@line 4454
 HEAP8[$49 >> 0] = 0; //@line 4455
 HEAP8[$50 >> 0] = 0; //@line 4456
 HEAP8[$51 >> 0] = 0; //@line 4457
 HEAP8[$52 >> 0] = 0; //@line 4458
 HEAP8[$53 >> 0] = 0; //@line 4459
 HEAP8[$54 >> 0] = 0; //@line 4460
 HEAP8[$55 >> 0] = 0; //@line 4461
 HEAP8[$56 >> 0] = 0; //@line 4462
 HEAP8[$57 >> 0] = 0; //@line 4463
 HEAP8[$58 >> 0] = 0; //@line 4464
 HEAP8[$59 >> 0] = 0; //@line 4465
 HEAP8[$60 >> 0] = 0; //@line 4466
 HEAP8[$61 >> 0] = 0; //@line 4467
 $175 = $12 + 16 | 0; //@line 4468
 $176 = $12 + 32 | 0; //@line 4469
 $177 = HEAP32[$176 >> 2] | 0; //@line 4470
 if ($177 >>> 0 < $16 >>> 0) {
  $$013$i = 0; //@line 4473
  do {
   if ($$013$i >>> 0 < $177 >>> 0) {
    $$sink$sink$i = HEAP8[$12 + 16 + $$013$i >> 0] | 0; //@line 4479
   } else {
    $$sink$sink$i = ($$013$i | 0) == ($177 | 0) ? -128 : 0; //@line 4483
   }
   HEAP8[$6 + $$013$i >> 0] = $$sink$sink$i; //@line 4486
   $$013$i = $$013$i + 1 | 0; //@line 4487
  } while (($$013$i | 0) != ($16 | 0));
  $$09$i45 = 0; //@line 4490
  do {
   $185 = $6 + $$09$i45 | 0; //@line 4497
   HEAP8[$185 >> 0] = HEAP8[$5 + $$09$i45 >> 0] ^ HEAP8[$185 >> 0]; //@line 4502
   $$09$i45 = $$09$i45 + 1 | 0; //@line 4503
  } while (($$09$i45 | 0) != ($16 | 0));
  label = 25; //@line 4506
 } else {
  if ($16 | 0) {
   $$09$i41 = 0; //@line 4515
   do {
    HEAP8[$6 + $$09$i41 >> 0] = HEAP8[$4 + $$09$i41 >> 0] ^ HEAP8[$12 + 16 + $$09$i41 >> 0]; //@line 4523
    $$09$i41 = $$09$i41 + 1 | 0; //@line 4524
   } while (($$09$i41 | 0) != ($16 | 0));
   label = 25; //@line 4527
  }
 }
 if ((label | 0) == 25) {
  if ($16 | 0) {
   $$09$i = 0; //@line 4538
   do {
    $202 = $12 + $$09$i | 0; //@line 4542
    HEAP8[$202 >> 0] = HEAP8[$202 >> 0] ^ HEAP8[$6 + $$09$i >> 0]; //@line 4545
    $$09$i = $$09$i + 1 | 0; //@line 4546
   } while (($$09$i | 0) != ($16 | 0));
  }
 }
 $AsyncCtx = _emscripten_alloc_async_context(164, sp) | 0; //@line 4556
 $206 = _mbedtls_cipher_update($0, $12, $16, $12, $7) | 0; //@line 4557
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 574; //@line 4560
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 4562
  HEAP32[$AsyncCtx + 8 >> 2] = $39; //@line 4564
  HEAP32[$AsyncCtx + 12 >> 2] = $45; //@line 4566
  HEAP32[$AsyncCtx + 16 >> 2] = $30; //@line 4568
  HEAP32[$AsyncCtx + 20 >> 2] = $175; //@line 4570
  HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 4572
  HEAP32[$AsyncCtx + 28 >> 2] = $33; //@line 4574
  HEAP32[$AsyncCtx + 32 >> 2] = $18; //@line 4576
  HEAP32[$AsyncCtx + 36 >> 2] = $42; //@line 4578
  HEAP32[$AsyncCtx + 40 >> 2] = $23; //@line 4580
  HEAP32[$AsyncCtx + 44 >> 2] = $4; //@line 4582
  HEAP32[$AsyncCtx + 48 >> 2] = $34; //@line 4584
  HEAP32[$AsyncCtx + 52 >> 2] = $37; //@line 4586
  HEAP32[$AsyncCtx + 56 >> 2] = $31; //@line 4588
  HEAP32[$AsyncCtx + 60 >> 2] = $21; //@line 4590
  HEAP32[$AsyncCtx + 64 >> 2] = $27; //@line 4592
  HEAP32[$AsyncCtx + 68 >> 2] = $20; //@line 4594
  HEAP32[$AsyncCtx + 72 >> 2] = $12; //@line 4596
  HEAP32[$AsyncCtx + 76 >> 2] = $16; //@line 4598
  HEAP32[$AsyncCtx + 80 >> 2] = $17; //@line 4600
  HEAP32[$AsyncCtx + 84 >> 2] = $176; //@line 4602
  HEAP32[$AsyncCtx + 88 >> 2] = $24; //@line 4604
  HEAP32[$AsyncCtx + 92 >> 2] = $41; //@line 4606
  HEAP32[$AsyncCtx + 96 >> 2] = $5; //@line 4608
  HEAP32[$AsyncCtx + 100 >> 2] = $19; //@line 4610
  HEAP32[$AsyncCtx + 104 >> 2] = $22; //@line 4612
  HEAP32[$AsyncCtx + 108 >> 2] = $25; //@line 4614
  HEAP32[$AsyncCtx + 112 >> 2] = $28; //@line 4616
  HEAP32[$AsyncCtx + 116 >> 2] = $38; //@line 4618
  HEAP32[$AsyncCtx + 120 >> 2] = $44; //@line 4620
  HEAP32[$AsyncCtx + 124 >> 2] = $29; //@line 4622
  HEAP32[$AsyncCtx + 128 >> 2] = $35; //@line 4624
  HEAP32[$AsyncCtx + 132 >> 2] = $6; //@line 4626
  HEAP32[$AsyncCtx + 136 >> 2] = $40; //@line 4628
  HEAP32[$AsyncCtx + 140 >> 2] = $43; //@line 4630
  HEAP32[$AsyncCtx + 144 >> 2] = $46; //@line 4632
  HEAP32[$AsyncCtx + 148 >> 2] = $12; //@line 4634
  HEAP32[$AsyncCtx + 152 >> 2] = $26; //@line 4636
  HEAP32[$AsyncCtx + 156 >> 2] = $32; //@line 4638
  HEAP32[$AsyncCtx + 160 >> 2] = $36; //@line 4640
  sp = STACKTOP; //@line 4641
  STACKTOP = sp; //@line 4642
  return 0; //@line 4642
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4644
 if (!$206) {
  _memcpy($1 | 0, $12 | 0, $16 | 0) | 0; //@line 4647
 }
 HEAP8[$4 >> 0] = 0; //@line 4649
 HEAP8[$17 >> 0] = 0; //@line 4650
 HEAP8[$18 >> 0] = 0; //@line 4651
 HEAP8[$19 >> 0] = 0; //@line 4652
 HEAP8[$20 >> 0] = 0; //@line 4653
 HEAP8[$21 >> 0] = 0; //@line 4654
 HEAP8[$22 >> 0] = 0; //@line 4655
 HEAP8[$23 >> 0] = 0; //@line 4656
 HEAP8[$24 >> 0] = 0; //@line 4657
 HEAP8[$25 >> 0] = 0; //@line 4658
 HEAP8[$26 >> 0] = 0; //@line 4659
 HEAP8[$27 >> 0] = 0; //@line 4660
 HEAP8[$28 >> 0] = 0; //@line 4661
 HEAP8[$29 >> 0] = 0; //@line 4662
 HEAP8[$30 >> 0] = 0; //@line 4663
 HEAP8[$31 >> 0] = 0; //@line 4664
 HEAP8[$5 >> 0] = 0; //@line 4665
 HEAP8[$32 >> 0] = 0; //@line 4666
 HEAP8[$33 >> 0] = 0; //@line 4667
 HEAP8[$34 >> 0] = 0; //@line 4668
 HEAP8[$35 >> 0] = 0; //@line 4669
 HEAP8[$36 >> 0] = 0; //@line 4670
 HEAP8[$37 >> 0] = 0; //@line 4671
 HEAP8[$38 >> 0] = 0; //@line 4672
 HEAP8[$39 >> 0] = 0; //@line 4673
 HEAP8[$40 >> 0] = 0; //@line 4674
 HEAP8[$41 >> 0] = 0; //@line 4675
 HEAP8[$42 >> 0] = 0; //@line 4676
 HEAP8[$43 >> 0] = 0; //@line 4677
 HEAP8[$44 >> 0] = 0; //@line 4678
 HEAP8[$45 >> 0] = 0; //@line 4679
 HEAP8[$46 >> 0] = 0; //@line 4680
 HEAP32[$176 >> 2] = 0; //@line 4681
 HEAP8[$175 >> 0] = 0; //@line 4683
 HEAP8[$12 + 17 >> 0] = 0; //@line 4685
 HEAP8[$12 + 18 >> 0] = 0; //@line 4687
 HEAP8[$12 + 19 >> 0] = 0; //@line 4689
 HEAP8[$12 + 20 >> 0] = 0; //@line 4691
 HEAP8[$12 + 21 >> 0] = 0; //@line 4693
 HEAP8[$12 + 22 >> 0] = 0; //@line 4695
 HEAP8[$12 + 23 >> 0] = 0; //@line 4697
 HEAP8[$12 + 24 >> 0] = 0; //@line 4699
 HEAP8[$12 + 25 >> 0] = 0; //@line 4701
 HEAP8[$12 + 26 >> 0] = 0; //@line 4703
 HEAP8[$12 + 27 >> 0] = 0; //@line 4705
 HEAP8[$12 + 28 >> 0] = 0; //@line 4707
 HEAP8[$12 + 29 >> 0] = 0; //@line 4709
 HEAP8[$12 + 30 >> 0] = 0; //@line 4711
 HEAP8[$12 + 31 >> 0] = 0; //@line 4712
 HEAP8[$12 >> 0] = 0; //@line 4714
 HEAP8[$12 + 1 >> 0] = 0; //@line 4716
 HEAP8[$12 + 2 >> 0] = 0; //@line 4718
 HEAP8[$12 + 3 >> 0] = 0; //@line 4720
 HEAP8[$12 + 4 >> 0] = 0; //@line 4722
 HEAP8[$12 + 5 >> 0] = 0; //@line 4724
 HEAP8[$12 + 6 >> 0] = 0; //@line 4726
 HEAP8[$12 + 7 >> 0] = 0; //@line 4728
 HEAP8[$12 + 8 >> 0] = 0; //@line 4730
 HEAP8[$12 + 9 >> 0] = 0; //@line 4732
 HEAP8[$12 + 10 >> 0] = 0; //@line 4734
 HEAP8[$12 + 11 >> 0] = 0; //@line 4736
 HEAP8[$12 + 12 >> 0] = 0; //@line 4738
 HEAP8[$12 + 13 >> 0] = 0; //@line 4740
 HEAP8[$12 + 14 >> 0] = 0; //@line 4742
 HEAP8[$12 + 15 >> 0] = 0; //@line 4743
 $$0 = $206; //@line 4744
 STACKTOP = sp; //@line 4745
 return $$0 | 0; //@line 4745
}
function _free($0) {
 $0 = $0 | 0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre$phi442Z2D = 0, $$pre$phi444Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $105 = 0, $106 = 0, $114 = 0, $115 = 0, $116 = 0, $124 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $141 = 0, $143 = 0, $145 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $17 = 0, $170 = 0, $173 = 0, $176 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $195 = 0, $196 = 0, $2 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $220 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $245 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $270 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $299 = 0, $3 = 0, $301 = 0, $308 = 0, $309 = 0, $310 = 0, $319 = 0, $41 = 0, $46 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0, label = 0;
 if (!$0) {
  return;
 }
 $2 = $0 + -8 | 0; //@line 10009
 $3 = HEAP32[5771] | 0; //@line 10010
 if ($2 >>> 0 < $3 >>> 0) {
  _abort(); //@line 10013
 }
 $6 = HEAP32[$0 + -4 >> 2] | 0; //@line 10017
 $7 = $6 & 3; //@line 10018
 if (($7 | 0) == 1) {
  _abort(); //@line 10021
 }
 $9 = $6 & -8; //@line 10024
 $10 = $2 + $9 | 0; //@line 10025
 L10 : do {
  if (!($6 & 1)) {
   $13 = HEAP32[$2 >> 2] | 0; //@line 10030
   if (!$7) {
    return;
   }
   $16 = $2 + (0 - $13) | 0; //@line 10036
   $17 = $13 + $9 | 0; //@line 10037
   if ($16 >>> 0 < $3 >>> 0) {
    _abort(); //@line 10040
   }
   if ((HEAP32[5772] | 0) == ($16 | 0)) {
    $105 = $10 + 4 | 0; //@line 10046
    $106 = HEAP32[$105 >> 2] | 0; //@line 10047
    if (($106 & 3 | 0) != 3) {
     $$1 = $16; //@line 10051
     $$1382 = $17; //@line 10051
     $114 = $16; //@line 10051
     break;
    }
    HEAP32[5769] = $17; //@line 10054
    HEAP32[$105 >> 2] = $106 & -2; //@line 10056
    HEAP32[$16 + 4 >> 2] = $17 | 1; //@line 10059
    HEAP32[$16 + $17 >> 2] = $17; //@line 10061
    return;
   }
   $21 = $13 >>> 3; //@line 10064
   if ($13 >>> 0 < 256) {
    $24 = HEAP32[$16 + 8 >> 2] | 0; //@line 10068
    $26 = HEAP32[$16 + 12 >> 2] | 0; //@line 10070
    $28 = 23108 + ($21 << 1 << 2) | 0; //@line 10072
    if (($24 | 0) != ($28 | 0)) {
     if ($3 >>> 0 > $24 >>> 0) {
      _abort(); //@line 10077
     }
     if ((HEAP32[$24 + 12 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 10084
     }
    }
    if (($26 | 0) == ($24 | 0)) {
     HEAP32[5767] = HEAP32[5767] & ~(1 << $21); //@line 10094
     $$1 = $16; //@line 10095
     $$1382 = $17; //@line 10095
     $114 = $16; //@line 10095
     break;
    }
    if (($26 | 0) == ($28 | 0)) {
     $$pre$phi444Z2D = $26 + 8 | 0; //@line 10101
    } else {
     if ($3 >>> 0 > $26 >>> 0) {
      _abort(); //@line 10105
     }
     $41 = $26 + 8 | 0; //@line 10108
     if ((HEAP32[$41 >> 2] | 0) == ($16 | 0)) {
      $$pre$phi444Z2D = $41; //@line 10112
     } else {
      _abort(); //@line 10114
     }
    }
    HEAP32[$24 + 12 >> 2] = $26; //@line 10119
    HEAP32[$$pre$phi444Z2D >> 2] = $24; //@line 10120
    $$1 = $16; //@line 10121
    $$1382 = $17; //@line 10121
    $114 = $16; //@line 10121
    break;
   }
   $46 = HEAP32[$16 + 24 >> 2] | 0; //@line 10125
   $48 = HEAP32[$16 + 12 >> 2] | 0; //@line 10127
   do {
    if (($48 | 0) == ($16 | 0)) {
     $59 = $16 + 16 | 0; //@line 10131
     $60 = $59 + 4 | 0; //@line 10132
     $61 = HEAP32[$60 >> 2] | 0; //@line 10133
     if (!$61) {
      $63 = HEAP32[$59 >> 2] | 0; //@line 10136
      if (!$63) {
       $$3 = 0; //@line 10139
       break;
      } else {
       $$1387 = $63; //@line 10142
       $$1390 = $59; //@line 10142
      }
     } else {
      $$1387 = $61; //@line 10145
      $$1390 = $60; //@line 10145
     }
     while (1) {
      $65 = $$1387 + 20 | 0; //@line 10148
      $66 = HEAP32[$65 >> 2] | 0; //@line 10149
      if ($66 | 0) {
       $$1387 = $66; //@line 10152
       $$1390 = $65; //@line 10152
       continue;
      }
      $68 = $$1387 + 16 | 0; //@line 10155
      $69 = HEAP32[$68 >> 2] | 0; //@line 10156
      if (!$69) {
       break;
      } else {
       $$1387 = $69; //@line 10161
       $$1390 = $68; //@line 10161
      }
     }
     if ($3 >>> 0 > $$1390 >>> 0) {
      _abort(); //@line 10166
     } else {
      HEAP32[$$1390 >> 2] = 0; //@line 10169
      $$3 = $$1387; //@line 10170
      break;
     }
    } else {
     $51 = HEAP32[$16 + 8 >> 2] | 0; //@line 10175
     if ($3 >>> 0 > $51 >>> 0) {
      _abort(); //@line 10178
     }
     $53 = $51 + 12 | 0; //@line 10181
     if ((HEAP32[$53 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 10185
     }
     $56 = $48 + 8 | 0; //@line 10188
     if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$53 >> 2] = $48; //@line 10192
      HEAP32[$56 >> 2] = $51; //@line 10193
      $$3 = $48; //@line 10194
      break;
     } else {
      _abort(); //@line 10197
     }
    }
   } while (0);
   if (!$46) {
    $$1 = $16; //@line 10204
    $$1382 = $17; //@line 10204
    $114 = $16; //@line 10204
   } else {
    $74 = HEAP32[$16 + 28 >> 2] | 0; //@line 10207
    $75 = 23372 + ($74 << 2) | 0; //@line 10208
    do {
     if ((HEAP32[$75 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$75 >> 2] = $$3; //@line 10213
      if (!$$3) {
       HEAP32[5768] = HEAP32[5768] & ~(1 << $74); //@line 10220
       $$1 = $16; //@line 10221
       $$1382 = $17; //@line 10221
       $114 = $16; //@line 10221
       break L10;
      }
     } else {
      if ((HEAP32[5771] | 0) >>> 0 > $46 >>> 0) {
       _abort(); //@line 10228
      } else {
       HEAP32[$46 + 16 + (((HEAP32[$46 + 16 >> 2] | 0) != ($16 | 0) & 1) << 2) >> 2] = $$3; //@line 10236
       if (!$$3) {
        $$1 = $16; //@line 10239
        $$1382 = $17; //@line 10239
        $114 = $16; //@line 10239
        break L10;
       } else {
        break;
       }
      }
     }
    } while (0);
    $89 = HEAP32[5771] | 0; //@line 10247
    if ($89 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 10250
    }
    HEAP32[$$3 + 24 >> 2] = $46; //@line 10254
    $92 = $16 + 16 | 0; //@line 10255
    $93 = HEAP32[$92 >> 2] | 0; //@line 10256
    do {
     if ($93 | 0) {
      if ($89 >>> 0 > $93 >>> 0) {
       _abort(); //@line 10262
      } else {
       HEAP32[$$3 + 16 >> 2] = $93; //@line 10266
       HEAP32[$93 + 24 >> 2] = $$3; //@line 10268
       break;
      }
     }
    } while (0);
    $99 = HEAP32[$92 + 4 >> 2] | 0; //@line 10274
    if (!$99) {
     $$1 = $16; //@line 10277
     $$1382 = $17; //@line 10277
     $114 = $16; //@line 10277
    } else {
     if ((HEAP32[5771] | 0) >>> 0 > $99 >>> 0) {
      _abort(); //@line 10282
     } else {
      HEAP32[$$3 + 20 >> 2] = $99; //@line 10286
      HEAP32[$99 + 24 >> 2] = $$3; //@line 10288
      $$1 = $16; //@line 10289
      $$1382 = $17; //@line 10289
      $114 = $16; //@line 10289
      break;
     }
    }
   }
  } else {
   $$1 = $2; //@line 10295
   $$1382 = $9; //@line 10295
   $114 = $2; //@line 10295
  }
 } while (0);
 if ($114 >>> 0 >= $10 >>> 0) {
  _abort(); //@line 10300
 }
 $115 = $10 + 4 | 0; //@line 10303
 $116 = HEAP32[$115 >> 2] | 0; //@line 10304
 if (!($116 & 1)) {
  _abort(); //@line 10308
 }
 if (!($116 & 2)) {
  if ((HEAP32[5773] | 0) == ($10 | 0)) {
   $124 = (HEAP32[5770] | 0) + $$1382 | 0; //@line 10318
   HEAP32[5770] = $124; //@line 10319
   HEAP32[5773] = $$1; //@line 10320
   HEAP32[$$1 + 4 >> 2] = $124 | 1; //@line 10323
   if (($$1 | 0) != (HEAP32[5772] | 0)) {
    return;
   }
   HEAP32[5772] = 0; //@line 10329
   HEAP32[5769] = 0; //@line 10330
   return;
  }
  if ((HEAP32[5772] | 0) == ($10 | 0)) {
   $132 = (HEAP32[5769] | 0) + $$1382 | 0; //@line 10337
   HEAP32[5769] = $132; //@line 10338
   HEAP32[5772] = $114; //@line 10339
   HEAP32[$$1 + 4 >> 2] = $132 | 1; //@line 10342
   HEAP32[$114 + $132 >> 2] = $132; //@line 10344
   return;
  }
  $137 = ($116 & -8) + $$1382 | 0; //@line 10348
  $138 = $116 >>> 3; //@line 10349
  L108 : do {
   if ($116 >>> 0 < 256) {
    $141 = HEAP32[$10 + 8 >> 2] | 0; //@line 10354
    $143 = HEAP32[$10 + 12 >> 2] | 0; //@line 10356
    $145 = 23108 + ($138 << 1 << 2) | 0; //@line 10358
    if (($141 | 0) != ($145 | 0)) {
     if ((HEAP32[5771] | 0) >>> 0 > $141 >>> 0) {
      _abort(); //@line 10364
     }
     if ((HEAP32[$141 + 12 >> 2] | 0) != ($10 | 0)) {
      _abort(); //@line 10371
     }
    }
    if (($143 | 0) == ($141 | 0)) {
     HEAP32[5767] = HEAP32[5767] & ~(1 << $138); //@line 10381
     break;
    }
    if (($143 | 0) == ($145 | 0)) {
     $$pre$phi442Z2D = $143 + 8 | 0; //@line 10387
    } else {
     if ((HEAP32[5771] | 0) >>> 0 > $143 >>> 0) {
      _abort(); //@line 10392
     }
     $160 = $143 + 8 | 0; //@line 10395
     if ((HEAP32[$160 >> 2] | 0) == ($10 | 0)) {
      $$pre$phi442Z2D = $160; //@line 10399
     } else {
      _abort(); //@line 10401
     }
    }
    HEAP32[$141 + 12 >> 2] = $143; //@line 10406
    HEAP32[$$pre$phi442Z2D >> 2] = $141; //@line 10407
   } else {
    $165 = HEAP32[$10 + 24 >> 2] | 0; //@line 10410
    $167 = HEAP32[$10 + 12 >> 2] | 0; //@line 10412
    do {
     if (($167 | 0) == ($10 | 0)) {
      $179 = $10 + 16 | 0; //@line 10416
      $180 = $179 + 4 | 0; //@line 10417
      $181 = HEAP32[$180 >> 2] | 0; //@line 10418
      if (!$181) {
       $183 = HEAP32[$179 >> 2] | 0; //@line 10421
       if (!$183) {
        $$3400 = 0; //@line 10424
        break;
       } else {
        $$1398 = $183; //@line 10427
        $$1402 = $179; //@line 10427
       }
      } else {
       $$1398 = $181; //@line 10430
       $$1402 = $180; //@line 10430
      }
      while (1) {
       $185 = $$1398 + 20 | 0; //@line 10433
       $186 = HEAP32[$185 >> 2] | 0; //@line 10434
       if ($186 | 0) {
        $$1398 = $186; //@line 10437
        $$1402 = $185; //@line 10437
        continue;
       }
       $188 = $$1398 + 16 | 0; //@line 10440
       $189 = HEAP32[$188 >> 2] | 0; //@line 10441
       if (!$189) {
        break;
       } else {
        $$1398 = $189; //@line 10446
        $$1402 = $188; //@line 10446
       }
      }
      if ((HEAP32[5771] | 0) >>> 0 > $$1402 >>> 0) {
       _abort(); //@line 10452
      } else {
       HEAP32[$$1402 >> 2] = 0; //@line 10455
       $$3400 = $$1398; //@line 10456
       break;
      }
     } else {
      $170 = HEAP32[$10 + 8 >> 2] | 0; //@line 10461
      if ((HEAP32[5771] | 0) >>> 0 > $170 >>> 0) {
       _abort(); //@line 10465
      }
      $173 = $170 + 12 | 0; //@line 10468
      if ((HEAP32[$173 >> 2] | 0) != ($10 | 0)) {
       _abort(); //@line 10472
      }
      $176 = $167 + 8 | 0; //@line 10475
      if ((HEAP32[$176 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$173 >> 2] = $167; //@line 10479
       HEAP32[$176 >> 2] = $170; //@line 10480
       $$3400 = $167; //@line 10481
       break;
      } else {
       _abort(); //@line 10484
      }
     }
    } while (0);
    if ($165 | 0) {
     $195 = HEAP32[$10 + 28 >> 2] | 0; //@line 10492
     $196 = 23372 + ($195 << 2) | 0; //@line 10493
     do {
      if ((HEAP32[$196 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$196 >> 2] = $$3400; //@line 10498
       if (!$$3400) {
        HEAP32[5768] = HEAP32[5768] & ~(1 << $195); //@line 10505
        break L108;
       }
      } else {
       if ((HEAP32[5771] | 0) >>> 0 > $165 >>> 0) {
        _abort(); //@line 10512
       } else {
        HEAP32[$165 + 16 + (((HEAP32[$165 + 16 >> 2] | 0) != ($10 | 0) & 1) << 2) >> 2] = $$3400; //@line 10520
        if (!$$3400) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while (0);
     $210 = HEAP32[5771] | 0; //@line 10530
     if ($210 >>> 0 > $$3400 >>> 0) {
      _abort(); //@line 10533
     }
     HEAP32[$$3400 + 24 >> 2] = $165; //@line 10537
     $213 = $10 + 16 | 0; //@line 10538
     $214 = HEAP32[$213 >> 2] | 0; //@line 10539
     do {
      if ($214 | 0) {
       if ($210 >>> 0 > $214 >>> 0) {
        _abort(); //@line 10545
       } else {
        HEAP32[$$3400 + 16 >> 2] = $214; //@line 10549
        HEAP32[$214 + 24 >> 2] = $$3400; //@line 10551
        break;
       }
      }
     } while (0);
     $220 = HEAP32[$213 + 4 >> 2] | 0; //@line 10557
     if ($220 | 0) {
      if ((HEAP32[5771] | 0) >>> 0 > $220 >>> 0) {
       _abort(); //@line 10563
      } else {
       HEAP32[$$3400 + 20 >> 2] = $220; //@line 10567
       HEAP32[$220 + 24 >> 2] = $$3400; //@line 10569
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $137 | 1; //@line 10578
  HEAP32[$114 + $137 >> 2] = $137; //@line 10580
  if (($$1 | 0) == (HEAP32[5772] | 0)) {
   HEAP32[5769] = $137; //@line 10584
   return;
  } else {
   $$2 = $137; //@line 10587
  }
 } else {
  HEAP32[$115 >> 2] = $116 & -2; //@line 10591
  HEAP32[$$1 + 4 >> 2] = $$1382 | 1; //@line 10594
  HEAP32[$114 + $$1382 >> 2] = $$1382; //@line 10596
  $$2 = $$1382; //@line 10597
 }
 $235 = $$2 >>> 3; //@line 10599
 if ($$2 >>> 0 < 256) {
  $238 = 23108 + ($235 << 1 << 2) | 0; //@line 10603
  $239 = HEAP32[5767] | 0; //@line 10604
  $240 = 1 << $235; //@line 10605
  if (!($239 & $240)) {
   HEAP32[5767] = $239 | $240; //@line 10610
   $$0403 = $238; //@line 10612
   $$pre$phiZ2D = $238 + 8 | 0; //@line 10612
  } else {
   $244 = $238 + 8 | 0; //@line 10614
   $245 = HEAP32[$244 >> 2] | 0; //@line 10615
   if ((HEAP32[5771] | 0) >>> 0 > $245 >>> 0) {
    _abort(); //@line 10619
   } else {
    $$0403 = $245; //@line 10622
    $$pre$phiZ2D = $244; //@line 10622
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 10625
  HEAP32[$$0403 + 12 >> 2] = $$1; //@line 10627
  HEAP32[$$1 + 8 >> 2] = $$0403; //@line 10629
  HEAP32[$$1 + 12 >> 2] = $238; //@line 10631
  return;
 }
 $251 = $$2 >>> 8; //@line 10634
 if (!$251) {
  $$0396 = 0; //@line 10637
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0396 = 31; //@line 10641
  } else {
   $256 = ($251 + 1048320 | 0) >>> 16 & 8; //@line 10645
   $257 = $251 << $256; //@line 10646
   $260 = ($257 + 520192 | 0) >>> 16 & 4; //@line 10649
   $262 = $257 << $260; //@line 10651
   $265 = ($262 + 245760 | 0) >>> 16 & 2; //@line 10654
   $270 = 14 - ($260 | $256 | $265) + ($262 << $265 >>> 15) | 0; //@line 10659
   $$0396 = $$2 >>> ($270 + 7 | 0) & 1 | $270 << 1; //@line 10665
  }
 }
 $276 = 23372 + ($$0396 << 2) | 0; //@line 10668
 HEAP32[$$1 + 28 >> 2] = $$0396; //@line 10670
 HEAP32[$$1 + 20 >> 2] = 0; //@line 10673
 HEAP32[$$1 + 16 >> 2] = 0; //@line 10674
 $280 = HEAP32[5768] | 0; //@line 10675
 $281 = 1 << $$0396; //@line 10676
 do {
  if (!($280 & $281)) {
   HEAP32[5768] = $280 | $281; //@line 10682
   HEAP32[$276 >> 2] = $$1; //@line 10683
   HEAP32[$$1 + 24 >> 2] = $276; //@line 10685
   HEAP32[$$1 + 12 >> 2] = $$1; //@line 10687
   HEAP32[$$1 + 8 >> 2] = $$1; //@line 10689
  } else {
   $$0383 = $$2 << (($$0396 | 0) == 31 ? 0 : 25 - ($$0396 >>> 1) | 0); //@line 10697
   $$0384 = HEAP32[$276 >> 2] | 0; //@line 10697
   while (1) {
    if ((HEAP32[$$0384 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
     label = 124; //@line 10704
     break;
    }
    $299 = $$0384 + 16 + ($$0383 >>> 31 << 2) | 0; //@line 10708
    $301 = HEAP32[$299 >> 2] | 0; //@line 10710
    if (!$301) {
     label = 121; //@line 10713
     break;
    } else {
     $$0383 = $$0383 << 1; //@line 10716
     $$0384 = $301; //@line 10716
    }
   }
   if ((label | 0) == 121) {
    if ((HEAP32[5771] | 0) >>> 0 > $299 >>> 0) {
     _abort(); //@line 10723
    } else {
     HEAP32[$299 >> 2] = $$1; //@line 10726
     HEAP32[$$1 + 24 >> 2] = $$0384; //@line 10728
     HEAP32[$$1 + 12 >> 2] = $$1; //@line 10730
     HEAP32[$$1 + 8 >> 2] = $$1; //@line 10732
     break;
    }
   } else if ((label | 0) == 124) {
    $308 = $$0384 + 8 | 0; //@line 10737
    $309 = HEAP32[$308 >> 2] | 0; //@line 10738
    $310 = HEAP32[5771] | 0; //@line 10739
    if ($310 >>> 0 <= $309 >>> 0 & $310 >>> 0 <= $$0384 >>> 0) {
     HEAP32[$309 + 12 >> 2] = $$1; //@line 10745
     HEAP32[$308 >> 2] = $$1; //@line 10746
     HEAP32[$$1 + 8 >> 2] = $309; //@line 10748
     HEAP32[$$1 + 12 >> 2] = $$0384; //@line 10750
     HEAP32[$$1 + 24 >> 2] = 0; //@line 10752
     break;
    } else {
     _abort(); //@line 10755
    }
   }
  }
 } while (0);
 $319 = (HEAP32[5775] | 0) + -1 | 0; //@line 10762
 HEAP32[5775] = $319; //@line 10763
 if (!$319) {
  $$0212$in$i = 23524; //@line 10766
 } else {
  return;
 }
 while (1) {
  $$0212$i = HEAP32[$$0212$in$i >> 2] | 0; //@line 10771
  if (!$$0212$i) {
   break;
  } else {
   $$0212$in$i = $$0212$i + 8 | 0; //@line 10777
  }
 }
 HEAP32[5775] = -1; //@line 10780
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb_296($0) {
 $0 = $0 | 0;
 var $$013$i = 0, $$01720$i55 = 0, $$019$i = 0, $$019$i52 = 0, $$021$i54 = 0, $$09$i = 0, $$09$i41 = 0, $$09$i45 = 0, $$sink$sink$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $127 = 0, $130 = 0, $14 = 0, $143 = 0, $146 = 0, $154 = 0, $155 = 0, $16 = 0, $168 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $183 = 0, $2 = 0, $20 = 0, $200 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0, $154$looptemp = 0;
 sp = STACKTOP; //@line 9641
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9643
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9645
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9647
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9649
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9651
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9653
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9655
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 9657
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 9659
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 9661
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 9663
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 9665
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 9667
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 9669
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 9671
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 9673
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 9675
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 9677
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 9679
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 9681
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 9683
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 9685
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 9687
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 9689
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 9691
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 9693
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 9695
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 9697
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 9699
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 9701
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 9703
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 9705
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 9707
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 9709
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 9711
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 9713
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 9715
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 9717
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 9719
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 9721
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 9723
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 9725
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 9727
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 9731
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 9733
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 9735
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 9737
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 9739
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 9741
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 9743
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 9745
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 9747
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 9749
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 9751
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 9753
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 9755
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 9757
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 9759
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 9761
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 9763
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 9765
 L2 : do {
  if (!(HEAP32[___async_retval >> 2] | 0)) {
   switch ($86 | 0) {
   case 16:
    {
     $$019$i52 = 135; //@line 9773
     break;
    }
   case 8:
    {
     $$019$i52 = 27; //@line 9777
     break;
    }
   default:
    {
     break L2;
    }
   }
   $127 = $86 + -1 | 0; //@line 9784
   $$01720$i55 = 0; //@line 9785
   $$021$i54 = $127; //@line 9785
   while (1) {
    $130 = HEAPU8[$94 + $$021$i54 >> 0] | 0; //@line 9789
    HEAP8[$122 + $$021$i54 >> 0] = $130 << 1 | $$01720$i55; //@line 9794
    if (($$021$i54 | 0) > 0) {
     $$01720$i55 = $130 >>> 7; //@line 9799
     $$021$i54 = $$021$i54 + -1 | 0; //@line 9799
    } else {
     break;
    }
   }
   $143 = $122 + $127 | 0; //@line 9809
   $146 = $$019$i52 & 0 - ((HEAPU8[$40 >> 0] | 0) >>> 7) ^ (HEAPU8[$143 >> 0] | 0); //@line 9812
   HEAP8[$143 >> 0] = $146; //@line 9814
   switch ($86 | 0) {
   case 16:
    {
     $$019$i = 135; //@line 9817
     break;
    }
   case 8:
    {
     $$019$i = 27; //@line 9821
     break;
    }
   default:
    {
     break L2;
    }
   }
   HEAP8[$108 + $127 >> 0] = $146 << 1; //@line 9831
   if (($127 | 0) > 0) {
    $154 = $146; //@line 9835
    $155 = $86 + -2 | 0; //@line 9835
    while (1) {
     $154$looptemp = $154;
     $154 = HEAPU8[$122 + $155 >> 0] | 0; //@line 9840
     HEAP8[$108 + $155 >> 0] = $154 << 1 | $154$looptemp >>> 7; //@line 9845
     if (($155 | 0) <= 0) {
      break;
     } else {
      $155 = $155 + -1 | 0; //@line 9849
     }
    }
   }
   $168 = $108 + $127 | 0; //@line 9860
   HEAP8[$168 >> 0] = $$019$i & 0 - ((HEAPU8[$28 >> 0] | 0) >>> 7) ^ (HEAPU8[$168 >> 0] | 0); //@line 9865
  }
 } while (0);
 HEAP8[$40 >> 0] = 0; //@line 9868
 HEAP8[$58 >> 0] = 0; //@line 9869
 HEAP8[$36 >> 0] = 0; //@line 9870
 HEAP8[$124 >> 0] = 0; //@line 9871
 HEAP8[$16 >> 0] = 0; //@line 9872
 HEAP8[$44 >> 0] = 0; //@line 9873
 HEAP8[$80 >> 0] = 0; //@line 9874
 HEAP8[$18 >> 0] = 0; //@line 9875
 HEAP8[$54 >> 0] = 0; //@line 9876
 HEAP8[$92 >> 0] = 0; //@line 9877
 HEAP8[$106 >> 0] = 0; //@line 9878
 HEAP8[$66 >> 0] = 0; //@line 9879
 HEAP8[$84 >> 0] = 0; //@line 9880
 HEAP8[$120 >> 0] = 0; //@line 9881
 HEAP8[$104 >> 0] = 0; //@line 9882
 HEAP8[$62 >> 0] = 0; //@line 9883
 $173 = $110 + 16 | 0; //@line 9884
 $174 = $110 + 32 | 0; //@line 9885
 $175 = HEAP32[$174 >> 2] | 0; //@line 9886
 if ($175 >>> 0 < $50 >>> 0) {
  $$013$i = 0; //@line 9889
  do {
   if ($$013$i >>> 0 < $175 >>> 0) {
    $$sink$sink$i = HEAP8[$110 + 16 + $$013$i >> 0] | 0; //@line 9895
   } else {
    $$sink$sink$i = ($$013$i | 0) == ($175 | 0) ? -128 : 0; //@line 9899
   }
   HEAP8[$116 + $$013$i >> 0] = $$sink$sink$i; //@line 9902
   $$013$i = $$013$i + 1 | 0; //@line 9903
  } while (($$013$i | 0) != ($50 | 0));
  $$09$i45 = 0; //@line 9906
  do {
   $183 = $116 + $$09$i45 | 0; //@line 9913
   HEAP8[$183 >> 0] = HEAP8[$108 + $$09$i45 >> 0] ^ HEAP8[$183 >> 0]; //@line 9918
   $$09$i45 = $$09$i45 + 1 | 0; //@line 9919
  } while (($$09$i45 | 0) != ($50 | 0));
  label = 21; //@line 9922
 } else {
  if ($50 | 0) {
   $$09$i41 = 0; //@line 9931
   do {
    HEAP8[$116 + $$09$i41 >> 0] = HEAP8[$122 + $$09$i41 >> 0] ^ HEAP8[$110 + 16 + $$09$i41 >> 0]; //@line 9939
    $$09$i41 = $$09$i41 + 1 | 0; //@line 9940
   } while (($$09$i41 | 0) != ($50 | 0));
   label = 21; //@line 9943
  }
 }
 if ((label | 0) == 21) {
  if ($50 | 0) {
   $$09$i = 0; //@line 9954
   do {
    $200 = $110 + $$09$i | 0; //@line 9958
    HEAP8[$200 >> 0] = HEAP8[$200 >> 0] ^ HEAP8[$116 + $$09$i >> 0]; //@line 9961
    $$09$i = $$09$i + 1 | 0; //@line 9962
   } while (($$09$i | 0) != ($50 | 0));
  }
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(164) | 0; //@line 9972
 $204 = _mbedtls_cipher_update($14, $48, $50, $48, $10) | 0; //@line 9973
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 574; //@line 9976
  $205 = $ReallocAsyncCtx + 4 | 0; //@line 9977
  HEAP32[$205 >> 2] = $2; //@line 9978
  $206 = $ReallocAsyncCtx + 8 | 0; //@line 9979
  HEAP32[$206 >> 2] = $4; //@line 9980
  $207 = $ReallocAsyncCtx + 12 | 0; //@line 9981
  HEAP32[$207 >> 2] = $6; //@line 9982
  $208 = $ReallocAsyncCtx + 16 | 0; //@line 9983
  HEAP32[$208 >> 2] = $8; //@line 9984
  $209 = $ReallocAsyncCtx + 20 | 0; //@line 9985
  HEAP32[$209 >> 2] = $173; //@line 9986
  $210 = $ReallocAsyncCtx + 24 | 0; //@line 9987
  HEAP32[$210 >> 2] = $12; //@line 9988
  $211 = $ReallocAsyncCtx + 28 | 0; //@line 9989
  HEAP32[$211 >> 2] = $20; //@line 9990
  $212 = $ReallocAsyncCtx + 32 | 0; //@line 9991
  HEAP32[$212 >> 2] = $22; //@line 9992
  $213 = $ReallocAsyncCtx + 36 | 0; //@line 9993
  HEAP32[$213 >> 2] = $24; //@line 9994
  $214 = $ReallocAsyncCtx + 40 | 0; //@line 9995
  HEAP32[$214 >> 2] = $26; //@line 9996
  $215 = $ReallocAsyncCtx + 44 | 0; //@line 9997
  HEAP32[$215 >> 2] = $28; //@line 9998
  $216 = $ReallocAsyncCtx + 48 | 0; //@line 9999
  HEAP32[$216 >> 2] = $30; //@line 10000
  $217 = $ReallocAsyncCtx + 52 | 0; //@line 10001
  HEAP32[$217 >> 2] = $32; //@line 10002
  $218 = $ReallocAsyncCtx + 56 | 0; //@line 10003
  HEAP32[$218 >> 2] = $34; //@line 10004
  $219 = $ReallocAsyncCtx + 60 | 0; //@line 10005
  HEAP32[$219 >> 2] = $38; //@line 10006
  $220 = $ReallocAsyncCtx + 64 | 0; //@line 10007
  HEAP32[$220 >> 2] = $42; //@line 10008
  $221 = $ReallocAsyncCtx + 68 | 0; //@line 10009
  HEAP32[$221 >> 2] = $46; //@line 10010
  $222 = $ReallocAsyncCtx + 72 | 0; //@line 10011
  HEAP32[$222 >> 2] = $48; //@line 10012
  $223 = $ReallocAsyncCtx + 76 | 0; //@line 10013
  HEAP32[$223 >> 2] = $50; //@line 10014
  $224 = $ReallocAsyncCtx + 80 | 0; //@line 10015
  HEAP32[$224 >> 2] = $52; //@line 10016
  $225 = $ReallocAsyncCtx + 84 | 0; //@line 10017
  HEAP32[$225 >> 2] = $174; //@line 10018
  $226 = $ReallocAsyncCtx + 88 | 0; //@line 10019
  HEAP32[$226 >> 2] = $56; //@line 10020
  $227 = $ReallocAsyncCtx + 92 | 0; //@line 10021
  HEAP32[$227 >> 2] = $60; //@line 10022
  $228 = $ReallocAsyncCtx + 96 | 0; //@line 10023
  HEAP32[$228 >> 2] = $64; //@line 10024
  $229 = $ReallocAsyncCtx + 100 | 0; //@line 10025
  HEAP32[$229 >> 2] = $68; //@line 10026
  $230 = $ReallocAsyncCtx + 104 | 0; //@line 10027
  HEAP32[$230 >> 2] = $70; //@line 10028
  $231 = $ReallocAsyncCtx + 108 | 0; //@line 10029
  HEAP32[$231 >> 2] = $72; //@line 10030
  $232 = $ReallocAsyncCtx + 112 | 0; //@line 10031
  HEAP32[$232 >> 2] = $74; //@line 10032
  $233 = $ReallocAsyncCtx + 116 | 0; //@line 10033
  HEAP32[$233 >> 2] = $76; //@line 10034
  $234 = $ReallocAsyncCtx + 120 | 0; //@line 10035
  HEAP32[$234 >> 2] = $78; //@line 10036
  $235 = $ReallocAsyncCtx + 124 | 0; //@line 10037
  HEAP32[$235 >> 2] = $82; //@line 10038
  $236 = $ReallocAsyncCtx + 128 | 0; //@line 10039
  HEAP32[$236 >> 2] = $90; //@line 10040
  $237 = $ReallocAsyncCtx + 132 | 0; //@line 10041
  HEAP32[$237 >> 2] = $96; //@line 10042
  $238 = $ReallocAsyncCtx + 136 | 0; //@line 10043
  HEAP32[$238 >> 2] = $98; //@line 10044
  $239 = $ReallocAsyncCtx + 140 | 0; //@line 10045
  HEAP32[$239 >> 2] = $100; //@line 10046
  $240 = $ReallocAsyncCtx + 144 | 0; //@line 10047
  HEAP32[$240 >> 2] = $102; //@line 10048
  $241 = $ReallocAsyncCtx + 148 | 0; //@line 10049
  HEAP32[$241 >> 2] = $110; //@line 10050
  $242 = $ReallocAsyncCtx + 152 | 0; //@line 10051
  HEAP32[$242 >> 2] = $112; //@line 10052
  $243 = $ReallocAsyncCtx + 156 | 0; //@line 10053
  HEAP32[$243 >> 2] = $114; //@line 10054
  $244 = $ReallocAsyncCtx + 160 | 0; //@line 10055
  HEAP32[$244 >> 2] = $118; //@line 10056
  sp = STACKTOP; //@line 10057
  return;
 }
 HEAP32[___async_retval >> 2] = $204; //@line 10061
 ___async_unwind = 0; //@line 10062
 HEAP32[$ReallocAsyncCtx >> 2] = 574; //@line 10063
 $205 = $ReallocAsyncCtx + 4 | 0; //@line 10064
 HEAP32[$205 >> 2] = $2; //@line 10065
 $206 = $ReallocAsyncCtx + 8 | 0; //@line 10066
 HEAP32[$206 >> 2] = $4; //@line 10067
 $207 = $ReallocAsyncCtx + 12 | 0; //@line 10068
 HEAP32[$207 >> 2] = $6; //@line 10069
 $208 = $ReallocAsyncCtx + 16 | 0; //@line 10070
 HEAP32[$208 >> 2] = $8; //@line 10071
 $209 = $ReallocAsyncCtx + 20 | 0; //@line 10072
 HEAP32[$209 >> 2] = $173; //@line 10073
 $210 = $ReallocAsyncCtx + 24 | 0; //@line 10074
 HEAP32[$210 >> 2] = $12; //@line 10075
 $211 = $ReallocAsyncCtx + 28 | 0; //@line 10076
 HEAP32[$211 >> 2] = $20; //@line 10077
 $212 = $ReallocAsyncCtx + 32 | 0; //@line 10078
 HEAP32[$212 >> 2] = $22; //@line 10079
 $213 = $ReallocAsyncCtx + 36 | 0; //@line 10080
 HEAP32[$213 >> 2] = $24; //@line 10081
 $214 = $ReallocAsyncCtx + 40 | 0; //@line 10082
 HEAP32[$214 >> 2] = $26; //@line 10083
 $215 = $ReallocAsyncCtx + 44 | 0; //@line 10084
 HEAP32[$215 >> 2] = $28; //@line 10085
 $216 = $ReallocAsyncCtx + 48 | 0; //@line 10086
 HEAP32[$216 >> 2] = $30; //@line 10087
 $217 = $ReallocAsyncCtx + 52 | 0; //@line 10088
 HEAP32[$217 >> 2] = $32; //@line 10089
 $218 = $ReallocAsyncCtx + 56 | 0; //@line 10090
 HEAP32[$218 >> 2] = $34; //@line 10091
 $219 = $ReallocAsyncCtx + 60 | 0; //@line 10092
 HEAP32[$219 >> 2] = $38; //@line 10093
 $220 = $ReallocAsyncCtx + 64 | 0; //@line 10094
 HEAP32[$220 >> 2] = $42; //@line 10095
 $221 = $ReallocAsyncCtx + 68 | 0; //@line 10096
 HEAP32[$221 >> 2] = $46; //@line 10097
 $222 = $ReallocAsyncCtx + 72 | 0; //@line 10098
 HEAP32[$222 >> 2] = $48; //@line 10099
 $223 = $ReallocAsyncCtx + 76 | 0; //@line 10100
 HEAP32[$223 >> 2] = $50; //@line 10101
 $224 = $ReallocAsyncCtx + 80 | 0; //@line 10102
 HEAP32[$224 >> 2] = $52; //@line 10103
 $225 = $ReallocAsyncCtx + 84 | 0; //@line 10104
 HEAP32[$225 >> 2] = $174; //@line 10105
 $226 = $ReallocAsyncCtx + 88 | 0; //@line 10106
 HEAP32[$226 >> 2] = $56; //@line 10107
 $227 = $ReallocAsyncCtx + 92 | 0; //@line 10108
 HEAP32[$227 >> 2] = $60; //@line 10109
 $228 = $ReallocAsyncCtx + 96 | 0; //@line 10110
 HEAP32[$228 >> 2] = $64; //@line 10111
 $229 = $ReallocAsyncCtx + 100 | 0; //@line 10112
 HEAP32[$229 >> 2] = $68; //@line 10113
 $230 = $ReallocAsyncCtx + 104 | 0; //@line 10114
 HEAP32[$230 >> 2] = $70; //@line 10115
 $231 = $ReallocAsyncCtx + 108 | 0; //@line 10116
 HEAP32[$231 >> 2] = $72; //@line 10117
 $232 = $ReallocAsyncCtx + 112 | 0; //@line 10118
 HEAP32[$232 >> 2] = $74; //@line 10119
 $233 = $ReallocAsyncCtx + 116 | 0; //@line 10120
 HEAP32[$233 >> 2] = $76; //@line 10121
 $234 = $ReallocAsyncCtx + 120 | 0; //@line 10122
 HEAP32[$234 >> 2] = $78; //@line 10123
 $235 = $ReallocAsyncCtx + 124 | 0; //@line 10124
 HEAP32[$235 >> 2] = $82; //@line 10125
 $236 = $ReallocAsyncCtx + 128 | 0; //@line 10126
 HEAP32[$236 >> 2] = $90; //@line 10127
 $237 = $ReallocAsyncCtx + 132 | 0; //@line 10128
 HEAP32[$237 >> 2] = $96; //@line 10129
 $238 = $ReallocAsyncCtx + 136 | 0; //@line 10130
 HEAP32[$238 >> 2] = $98; //@line 10131
 $239 = $ReallocAsyncCtx + 140 | 0; //@line 10132
 HEAP32[$239 >> 2] = $100; //@line 10133
 $240 = $ReallocAsyncCtx + 144 | 0; //@line 10134
 HEAP32[$240 >> 2] = $102; //@line 10135
 $241 = $ReallocAsyncCtx + 148 | 0; //@line 10136
 HEAP32[$241 >> 2] = $110; //@line 10137
 $242 = $ReallocAsyncCtx + 152 | 0; //@line 10138
 HEAP32[$242 >> 2] = $112; //@line 10139
 $243 = $ReallocAsyncCtx + 156 | 0; //@line 10140
 HEAP32[$243 >> 2] = $114; //@line 10141
 $244 = $ReallocAsyncCtx + 160 | 0; //@line 10142
 HEAP32[$244 >> 2] = $118; //@line 10143
 sp = STACKTOP; //@line 10144
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$ = 0, $$058 = 0, $$059 = 0, $$062 = 0, $$06272 = 0, $$06273 = 0, $$064 = 0, $$06471 = 0, $$06575 = 0, $$06874 = 0, $$1 = 0, $$163 = 0, $$166 = 0, $$16670 = 0, $$267 = 0, $$3 = 0, $$pre$phiZ2D = 0, $101 = 0, $103 = 0, $109 = 0, $11 = 0, $115 = 0, $121 = 0, $135 = 0, $149 = 0, $15 = 0, $154 = 0, $155 = 0, $168 = 0, $169 = 0, $170 = 0, $176 = 0, $177 = 0, $181 = 0, $183 = 0, $189 = 0, $190 = 0, $193 = 0, $195 = 0, $210 = 0, $223 = 0, $228 = 0, $231 = 0, $232 = 0, $233 = 0, $244 = 0, $40 = 0, $6 = 0, $64 = 0, $7 = 0, $74 = 0, $76 = 0, $8 = 0, $82 = 0, $83 = 0, $89 = 0, $9 = 0, $91 = 0, $92 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11668
 STACKTOP = STACKTOP + 16 | 0; //@line 11669
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11669
 $vararg_buffer = sp; //@line 11670
 $6 = sp + 4 | 0; //@line 11671
 HEAP32[$6 >> 2] = 0; //@line 11672
 $7 = $0 + 1440 | 0; //@line 11673
 $8 = $0 + 1177 | 0; //@line 11674
 HEAP8[$8 >> 0] = 0; //@line 11675
 $9 = ($4 | 0) == 0; //@line 11676
 $$ = $9 ? 0 : $5; //@line 11677
 HEAP16[$7 >> 1] = $$; //@line 11678
 $11 = $0 + 1185 | 0; //@line 11680
 HEAP8[$11 >> 0] = HEAP8[$1 >> 0] | 0; //@line 11681
 L1 : do {
  switch ((HEAPU8[$1 >> 0] | 0) >>> 5 & 7) {
  case 0:
   {
    HEAP16[$7 >> 1] = 1; //@line 11688
    $15 = HEAP32[$0 + 1708 >> 2] | 0; //@line 11691
    HEAP8[$0 + 1193 >> 0] = HEAP8[$15 >> 0] | 0; //@line 11696
    HEAP8[$0 + 1192 >> 0] = HEAP8[$15 + 1 >> 0] | 0; //@line 11700
    HEAP8[$0 + 1191 >> 0] = HEAP8[$15 + 2 >> 0] | 0; //@line 11704
    HEAP8[$0 + 1190 >> 0] = HEAP8[$15 + 3 >> 0] | 0; //@line 11708
    HEAP8[$0 + 1189 >> 0] = HEAP8[$15 + 4 >> 0] | 0; //@line 11712
    HEAP8[$0 + 1188 >> 0] = HEAP8[$15 + 5 >> 0] | 0; //@line 11716
    HEAP8[$0 + 1187 >> 0] = HEAP8[$15 + 6 >> 0] | 0; //@line 11719
    HEAP8[$0 + 1186 >> 0] = HEAP8[$15 + 7 >> 0] | 0; //@line 11721
    HEAP16[$7 >> 1] = 9; //@line 11722
    $40 = HEAP32[$0 + 1704 >> 2] | 0; //@line 11725
    HEAP8[$0 + 1201 >> 0] = HEAP8[$40 >> 0] | 0; //@line 11730
    HEAP8[$0 + 1200 >> 0] = HEAP8[$40 + 1 >> 0] | 0; //@line 11734
    HEAP8[$0 + 1199 >> 0] = HEAP8[$40 + 2 >> 0] | 0; //@line 11738
    HEAP8[$0 + 1198 >> 0] = HEAP8[$40 + 3 >> 0] | 0; //@line 11742
    HEAP8[$0 + 1197 >> 0] = HEAP8[$40 + 4 >> 0] | 0; //@line 11746
    HEAP8[$0 + 1196 >> 0] = HEAP8[$40 + 5 >> 0] | 0; //@line 11750
    HEAP8[$0 + 1195 >> 0] = HEAP8[$40 + 6 >> 0] | 0; //@line 11753
    HEAP8[$0 + 1194 >> 0] = HEAP8[$40 + 7 >> 0] | 0; //@line 11755
    HEAP16[$7 >> 1] = 17; //@line 11756
    $AsyncCtx11 = _emscripten_alloc_async_context(36, sp) | 0; //@line 11758
    $64 = __ZN7LoRaPHY13get_radio_rngEv($0 + 4 | 0) | 0; //@line 11759
    if (___async) {
     HEAP32[$AsyncCtx11 >> 2] = 377; //@line 11762
     HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 11764
     HEAP32[$AsyncCtx11 + 8 >> 2] = $7; //@line 11766
     HEAP32[$AsyncCtx11 + 12 >> 2] = $11; //@line 11768
     HEAP32[$AsyncCtx11 + 16 >> 2] = $6; //@line 11770
     HEAP32[$AsyncCtx11 + 20 >> 2] = $6; //@line 11772
     HEAP8[$AsyncCtx11 + 24 >> 0] = $3; //@line 11774
     HEAP32[$AsyncCtx11 + 28 >> 2] = $vararg_buffer; //@line 11776
     HEAP32[$AsyncCtx11 + 32 >> 2] = $vararg_buffer; //@line 11778
     sp = STACKTOP; //@line 11779
     STACKTOP = sp; //@line 11780
     return 0; //@line 11780
    }
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 11782
    $74 = $0 + 1748 | 0; //@line 11784
    HEAP16[$74 >> 1] = $64; //@line 11785
    $76 = HEAP16[$7 >> 1] | 0; //@line 11787
    HEAP16[$7 >> 1] = $76 + 1 << 16 >> 16; //@line 11789
    HEAP8[($76 & 65535) + ($0 + 1185) >> 0] = $64; //@line 11792
    $82 = (HEAPU16[$74 >> 1] | 0) >>> 8 & 255; //@line 11795
    $83 = HEAP16[$7 >> 1] | 0; //@line 11796
    HEAP16[$7 >> 1] = $83 + 1 << 16 >> 16; //@line 11798
    HEAP8[($83 & 65535) + ($0 + 1185) >> 0] = $82; //@line 11801
    $89 = HEAP16[$7 >> 1] & 255; //@line 11804
    $91 = HEAP32[$0 + 1712 >> 2] | 0; //@line 11806
    $AsyncCtx3 = _emscripten_alloc_async_context(32, sp) | 0; //@line 11807
    $92 = __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj($0 + 756 | 0, $11, $89, $91, 128, $6) | 0; //@line 11808
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 378; //@line 11811
     HEAP32[$AsyncCtx3 + 4 >> 2] = $6; //@line 11813
     HEAP32[$AsyncCtx3 + 8 >> 2] = $7; //@line 11815
     HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 11817
     HEAP32[$AsyncCtx3 + 16 >> 2] = $6; //@line 11819
     HEAP8[$AsyncCtx3 + 20 >> 0] = $3; //@line 11821
     HEAP32[$AsyncCtx3 + 24 >> 2] = $vararg_buffer; //@line 11823
     HEAP32[$AsyncCtx3 + 28 >> 2] = $vararg_buffer; //@line 11825
     sp = STACKTOP; //@line 11826
     STACKTOP = sp; //@line 11827
     return 0; //@line 11827
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11829
    if (!$92) {
     $101 = HEAP32[$6 >> 2] | 0; //@line 11832
     $103 = HEAP16[$7 >> 1] | 0; //@line 11834
     HEAP16[$7 >> 1] = $103 + 1 << 16 >> 16; //@line 11836
     HEAP8[($103 & 65535) + ($0 + 1185) >> 0] = $101; //@line 11839
     $109 = HEAP16[$7 >> 1] | 0; //@line 11842
     HEAP16[$7 >> 1] = $109 + 1 << 16 >> 16; //@line 11844
     HEAP8[($109 & 65535) + ($0 + 1185) >> 0] = $101 >>> 8; //@line 11847
     $115 = HEAP16[$7 >> 1] | 0; //@line 11850
     HEAP16[$7 >> 1] = $115 + 1 << 16 >> 16; //@line 11852
     HEAP8[($115 & 65535) + ($0 + 1185) >> 0] = $101 >>> 16; //@line 11855
     $121 = HEAP16[$7 >> 1] | 0; //@line 11858
     HEAP16[$7 >> 1] = $121 + 1 << 16 >> 16; //@line 11860
     HEAP8[($121 & 65535) + ($0 + 1185) >> 0] = $101 >>> 24; //@line 11863
     $$163 = $3; //@line 11864
     $$3 = 0; //@line 11864
     break L1;
    } else {
     $$059 = -1014; //@line 11867
     STACKTOP = sp; //@line 11868
     return $$059 | 0; //@line 11868
    }
    break;
   }
  case 4:
   {
    HEAP8[$8 >> 0] = 1; //@line 11873
    label = 9; //@line 11874
    break;
   }
  case 2:
   {
    label = 9; //@line 11878
    break;
   }
  case 7:
   {
    if ($9 | $$ << 16 >> 16 == 0) {
     $$163 = $3; //@line 11885
     $$3 = 0; //@line 11885
    } else {
     _memcpy($0 + 1186 | 0, $4 | 0, $$ & 65535 | 0) | 0; //@line 11889
     HEAP16[$7 >> 1] = (HEAPU16[$7 >> 1] | 0) + 1; //@line 11894
     $$163 = $3; //@line 11895
     $$3 = 0; //@line 11895
    }
    break;
   }
  default:
   {
    $$163 = $3; //@line 11900
    $$3 = -1002; //@line 11900
   }
  }
 } while (0);
 do {
  if ((label | 0) == 9) {
   if (!(HEAP8[$0 + 2360 >> 0] | 0)) {
    $$059 = -1009; //@line 11910
    STACKTOP = sp; //@line 11911
    return $$059 | 0; //@line 11911
   }
   if (HEAP8[$0 + 1936 >> 0] | 0) {
    $AsyncCtx7 = _emscripten_alloc_async_context(48, sp) | 0; //@line 11921
    $135 = __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($0 + 4 | 0, 1, $0 + 1877 | 0, $0 + 1876 | 0, $0 + 1768 | 0) | 0; //@line 11922
    if (___async) {
     HEAP32[$AsyncCtx7 >> 2] = 379; //@line 11925
     HEAP32[$AsyncCtx7 + 4 >> 2] = $7; //@line 11927
     HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 11929
     HEAP32[$AsyncCtx7 + 12 >> 2] = $11; //@line 11931
     HEAP32[$AsyncCtx7 + 16 >> 2] = $6; //@line 11933
     HEAP8[$AsyncCtx7 + 20 >> 0] = $3; //@line 11935
     HEAP32[$AsyncCtx7 + 24 >> 2] = $4; //@line 11937
     HEAP32[$AsyncCtx7 + 28 >> 2] = $vararg_buffer; //@line 11939
     HEAP32[$AsyncCtx7 + 32 >> 2] = $vararg_buffer; //@line 11941
     HEAP32[$AsyncCtx7 + 36 >> 2] = $6; //@line 11943
     HEAP8[$AsyncCtx7 + 40 >> 0] = $9 & 1; //@line 11946
     HEAP32[$AsyncCtx7 + 44 >> 2] = $2; //@line 11948
     sp = STACKTOP; //@line 11949
     STACKTOP = sp; //@line 11950
     return 0; //@line 11950
    }
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 11952
    if ($135) {
     HEAP8[$2 >> 0] = HEAP8[$2 >> 0] | 64; //@line 11956
    }
   }
   $149 = $0 + 1178 | 0; //@line 11959
   if (!(HEAP8[$149 >> 0] | 0)) {
    $$pre$phiZ2D = $2; //@line 11963
   } else {
    HEAP8[$149 >> 0] = 0; //@line 11965
    HEAP8[$2 >> 0] = HEAP8[$2 >> 0] | 32; //@line 11968
    $$pre$phiZ2D = $2; //@line 11969
   }
   $154 = $0 + 1756 | 0; //@line 11971
   $155 = HEAP32[$154 >> 2] | 0; //@line 11972
   HEAP8[$0 + 1186 >> 0] = $155; //@line 11975
   HEAP8[$0 + 1187 >> 0] = $155 >>> 8; //@line 11979
   HEAP8[$0 + 1188 >> 0] = $155 >>> 16; //@line 11983
   HEAP8[$0 + 1189 >> 0] = $155 >>> 24; //@line 11987
   $168 = $0 + 1190 | 0; //@line 11989
   HEAP8[$168 >> 0] = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 11990
   $169 = $0 + 1760 | 0; //@line 11991
   $170 = HEAP32[$169 >> 2] | 0; //@line 11992
   HEAP8[$0 + 1191 >> 0] = $170; //@line 11995
   HEAP8[$0 + 1192 >> 0] = $170 >>> 8; //@line 11999
   $176 = $0 + 476 | 0; //@line 12000
   __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($176); //@line 12001
   $177 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($176) | 0; //@line 12002
   do {
    if ($9) {
     label = 27; //@line 12005
    } else {
     if (!(HEAP16[$7 >> 1] | 0)) {
      label = 27; //@line 12010
     } else {
      if (!(__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($176) | 0)) {
       __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($176); //@line 12014
       $$06272 = $3; //@line 12015
       $$06471 = $4; //@line 12015
       $$16670 = 8; //@line 12015
       label = 31; //@line 12016
       break;
      }
      $181 = $177 & 255; //@line 12019
      if (($177 & 255) >= 16) {
       HEAP16[$7 >> 1] = $177 & 255; //@line 12023
       $$062 = 0; //@line 12025
       $$064 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($176) | 0; //@line 12025
       $$166 = 8; //@line 12025
       label = 30; //@line 12026
       break;
      }
      $183 = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 12029
      $189 = ($183 & 255) + $181 & 15 | $183 & -16; //@line 12035
      HEAP8[$$pre$phiZ2D >> 0] = $189; //@line 12036
      HEAP8[$168 >> 0] = $189; //@line 12037
      $190 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($176) | 0; //@line 12038
      if (!($177 << 24 >> 24)) {
       __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($176); //@line 12041
       $$06272 = $3; //@line 12042
       $$06471 = $4; //@line 12042
       $$16670 = 8; //@line 12042
       label = 31; //@line 12043
       break;
      } else {
       $$06575 = 8; //@line 12046
       $$06874 = 0; //@line 12046
       $193 = 0; //@line 12046
       while (1) {
        $195 = $$06575 + 1 << 24 >> 24; //@line 12050
        HEAP8[($$06575 & 255) + ($0 + 1185) >> 0] = HEAP8[$190 + $193 >> 0] | 0; //@line 12053
        $$06874 = $$06874 + 1 << 16 >> 16; //@line 12054
        $193 = $$06874 & 65535; //@line 12055
        if ($193 >>> 0 >= $181 >>> 0) {
         $$062 = $3; //@line 12060
         $$064 = $4; //@line 12060
         $$166 = $195; //@line 12060
         label = 30; //@line 12061
         break;
        } else {
         $$06575 = $195; //@line 12058
        }
       }
      }
     }
    }
   } while (0);
   if ((label | 0) == 27) {
    if (!($177 << 24 >> 24)) {
     $$062 = $3; //@line 12072
     $$064 = $4; //@line 12072
     $$166 = 8; //@line 12072
     label = 30; //@line 12073
    } else {
     if (__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($176) | 0) {
      HEAP16[$7 >> 1] = $177 & 255; //@line 12078
      $$062 = 0; //@line 12080
      $$064 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($176) | 0; //@line 12080
      $$166 = 8; //@line 12080
      label = 30; //@line 12081
     } else {
      $$062 = $3; //@line 12083
      $$064 = $4; //@line 12083
      $$166 = 8; //@line 12083
      label = 30; //@line 12084
     }
    }
   }
   if ((label | 0) == 30) {
    __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($176); //@line 12089
    if (!$$064) {
     $$06273 = $$062; //@line 12092
     $$1 = 0; //@line 12092
     $$267 = $$166; //@line 12092
    } else {
     $$06272 = $$062; //@line 12094
     $$06471 = $$064; //@line 12094
     $$16670 = $$166; //@line 12094
     label = 31; //@line 12095
    }
   }
   if ((label | 0) == 31) {
    if (!(HEAP16[$7 >> 1] | 0)) {
     $$06273 = $$06272; //@line 12102
     $$1 = 0; //@line 12102
     $$267 = $$16670; //@line 12102
    } else {
     $210 = $$16670 + 1 << 24 >> 24; //@line 12104
     HEAP8[($$16670 & 255) + ($0 + 1185) >> 0] = $$06272; //@line 12107
     if (!($$06272 << 24 >> 24)) {
      __ZN14LoRaMacCommand20clear_command_bufferEv($176); //@line 12111
      $$058 = $0 + 1716 | 0; //@line 12113
     } else {
      $$058 = $0 + 1732 | 0; //@line 12115
     }
     $223 = (__ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh($0 + 756 | 0, $$06471, HEAP16[$7 >> 1] | 0, $$058, 128, HEAP32[$154 >> 2] | 0, 0, HEAP32[$169 >> 2] | 0, ($210 & 255) + ($0 + 1185) | 0) | 0) == 0; //@line 12124
     $$06273 = $$06272; //@line 12126
     $$1 = $223 ? 0 : -1014; //@line 12126
     $$267 = $210; //@line 12126
    }
   }
   $228 = (HEAPU16[$7 >> 1] | 0) + ($$267 & 255) & 65535; //@line 12133
   HEAP16[$7 >> 1] = $228; //@line 12134
   $231 = HEAP32[$154 >> 2] | 0; //@line 12137
   $232 = HEAP32[$169 >> 2] | 0; //@line 12138
   $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 12139
   $233 = __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj($0 + 756 | 0, $11, $228, $0 + 1716 | 0, 128, $231, 0, $232, $6) | 0; //@line 12140
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 380; //@line 12143
    HEAP32[$AsyncCtx + 4 >> 2] = $$1; //@line 12145
    HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 12147
    HEAP32[$AsyncCtx + 12 >> 2] = $7; //@line 12149
    HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 12151
    HEAP8[$AsyncCtx + 20 >> 0] = $3; //@line 12153
    HEAP8[$AsyncCtx + 21 >> 0] = $$06273; //@line 12155
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 12157
    HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer; //@line 12159
    HEAP32[$AsyncCtx + 32 >> 2] = $6; //@line 12161
    sp = STACKTOP; //@line 12162
    STACKTOP = sp; //@line 12163
    return 0; //@line 12163
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 12165
    $244 = HEAP32[$6 >> 2] | 0; //@line 12168
    HEAP8[(HEAPU16[$7 >> 1] | 0) + ($0 + 1185) >> 0] = $244; //@line 12173
    HEAP8[(HEAPU16[$7 >> 1] | 0) + 1 + ($0 + 1185) >> 0] = $244 >>> 8; //@line 12180
    HEAP8[(HEAPU16[$7 >> 1] | 0) + 2 + ($0 + 1185) >> 0] = $244 >>> 16; //@line 12187
    HEAP8[(HEAPU16[$7 >> 1] | 0) + 3 + ($0 + 1185) >> 0] = $244 >>> 24; //@line 12194
    HEAP16[$7 >> 1] = (HEAPU16[$7 >> 1] | 0) + 4; //@line 12199
    $$163 = $$06273; //@line 12200
    $$3 = ($233 | 0) == 0 ? $$1 : -1014; //@line 12200
    break;
   }
  }
 } while (0);
 HEAP32[$vararg_buffer >> 2] = $$163 & 255; //@line 12206
 _mbed_tracef(16, 13239, 13324, $vararg_buffer); //@line 12207
 $$059 = $$3; //@line 12208
 STACKTOP = sp; //@line 12209
 return $$059 | 0; //@line 12209
}
function __ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_101($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $14 = 0, $16 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $42 = 0, $43 = 0, $58 = 0, $59 = 0, $6 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 24315
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24317
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24321
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24323
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24325
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24327
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24329
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24331
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 24335
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 24337
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 24339
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 24341
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 24343
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 24345
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 24347
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 24349
 $36 = (HEAP8[$0 + 36 >> 0] | 0) + 1 << 24 >> 24; //@line 24350
 if (($36 & 255) >= (HEAPU8[$20 >> 0] | 0)) {
  return;
 }
 $43 = (HEAPU8[$0 + 8 >> 0] | 0) + 3 & 255; //@line 24358
 if (((HEAPU8[$6 >> 0] | 0) + (HEAPU8[$34 >> 0] | 0) | 0) >>> 0 > ($36 & 255) >>> 0) {
  $42 = $43 & 255; //@line 24367
  $58 = HEAPU8[$24 + ($42 + 2) >> 0] << 16 | (HEAPU8[$24 + ($42 + 1) >> 0] << 8 | HEAPU8[$24 + $42 >> 0]); //@line 24382
  $59 = $58 * 100 | 0; //@line 24383
  HEAP32[$26 >> 2] = $59; //@line 24384
  HEAP32[$28 >> 2] = 0; //@line 24385
  if ($58 | 0) {
   if (!(HEAP8[$16 >> 0] | 0)) {
    HEAP8[$8 >> 0] = -1; //@line 24392
    $91 = HEAP32[(HEAP32[$10 >> 2] | 0) + 60 >> 2] | 0; //@line 24395
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(72) | 0; //@line 24396
    FUNCTION_TABLE_iiii[$91 & 31]($12, $14, $36) | 0; //@line 24397
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 498; //@line 24400
     $92 = $ReallocAsyncCtx2 + 4 | 0; //@line 24401
     HEAP32[$92 >> 2] = $2; //@line 24402
     $93 = $ReallocAsyncCtx2 + 8 | 0; //@line 24403
     HEAP8[$93 >> 0] = $43; //@line 24404
     $94 = $ReallocAsyncCtx2 + 12 | 0; //@line 24405
     HEAP32[$94 >> 2] = $6; //@line 24406
     $95 = $ReallocAsyncCtx2 + 16 | 0; //@line 24407
     HEAP32[$95 >> 2] = $8; //@line 24408
     $96 = $ReallocAsyncCtx2 + 20 | 0; //@line 24409
     HEAP32[$96 >> 2] = $10; //@line 24410
     $97 = $ReallocAsyncCtx2 + 24 | 0; //@line 24411
     HEAP32[$97 >> 2] = $12; //@line 24412
     $98 = $ReallocAsyncCtx2 + 28 | 0; //@line 24413
     HEAP32[$98 >> 2] = $14; //@line 24414
     $99 = $ReallocAsyncCtx2 + 32 | 0; //@line 24415
     HEAP32[$99 >> 2] = $16; //@line 24416
     $100 = $ReallocAsyncCtx2 + 36 | 0; //@line 24417
     HEAP8[$100 >> 0] = $36; //@line 24418
     $101 = $ReallocAsyncCtx2 + 40 | 0; //@line 24419
     HEAP32[$101 >> 2] = $20; //@line 24420
     $102 = $ReallocAsyncCtx2 + 44 | 0; //@line 24421
     HEAP32[$102 >> 2] = $22; //@line 24422
     $103 = $ReallocAsyncCtx2 + 48 | 0; //@line 24423
     HEAP32[$103 >> 2] = $24; //@line 24424
     $104 = $ReallocAsyncCtx2 + 52 | 0; //@line 24425
     HEAP32[$104 >> 2] = $26; //@line 24426
     $105 = $ReallocAsyncCtx2 + 56 | 0; //@line 24427
     HEAP32[$105 >> 2] = $28; //@line 24428
     $106 = $ReallocAsyncCtx2 + 60 | 0; //@line 24429
     HEAP32[$106 >> 2] = $30; //@line 24430
     $107 = $ReallocAsyncCtx2 + 64 | 0; //@line 24431
     HEAP32[$107 >> 2] = $32; //@line 24432
     $108 = $ReallocAsyncCtx2 + 68 | 0; //@line 24433
     HEAP32[$108 >> 2] = $34; //@line 24434
     sp = STACKTOP; //@line 24435
     return;
    }
    ___async_unwind = 0; //@line 24438
    HEAP32[$ReallocAsyncCtx2 >> 2] = 498; //@line 24439
    $92 = $ReallocAsyncCtx2 + 4 | 0; //@line 24440
    HEAP32[$92 >> 2] = $2; //@line 24441
    $93 = $ReallocAsyncCtx2 + 8 | 0; //@line 24442
    HEAP8[$93 >> 0] = $43; //@line 24443
    $94 = $ReallocAsyncCtx2 + 12 | 0; //@line 24444
    HEAP32[$94 >> 2] = $6; //@line 24445
    $95 = $ReallocAsyncCtx2 + 16 | 0; //@line 24446
    HEAP32[$95 >> 2] = $8; //@line 24447
    $96 = $ReallocAsyncCtx2 + 20 | 0; //@line 24448
    HEAP32[$96 >> 2] = $10; //@line 24449
    $97 = $ReallocAsyncCtx2 + 24 | 0; //@line 24450
    HEAP32[$97 >> 2] = $12; //@line 24451
    $98 = $ReallocAsyncCtx2 + 28 | 0; //@line 24452
    HEAP32[$98 >> 2] = $14; //@line 24453
    $99 = $ReallocAsyncCtx2 + 32 | 0; //@line 24454
    HEAP32[$99 >> 2] = $16; //@line 24455
    $100 = $ReallocAsyncCtx2 + 36 | 0; //@line 24456
    HEAP8[$100 >> 0] = $36; //@line 24457
    $101 = $ReallocAsyncCtx2 + 40 | 0; //@line 24458
    HEAP32[$101 >> 2] = $20; //@line 24459
    $102 = $ReallocAsyncCtx2 + 44 | 0; //@line 24460
    HEAP32[$102 >> 2] = $22; //@line 24461
    $103 = $ReallocAsyncCtx2 + 48 | 0; //@line 24462
    HEAP32[$103 >> 2] = $24; //@line 24463
    $104 = $ReallocAsyncCtx2 + 52 | 0; //@line 24464
    HEAP32[$104 >> 2] = $26; //@line 24465
    $105 = $ReallocAsyncCtx2 + 56 | 0; //@line 24466
    HEAP32[$105 >> 2] = $28; //@line 24467
    $106 = $ReallocAsyncCtx2 + 60 | 0; //@line 24468
    HEAP32[$106 >> 2] = $30; //@line 24469
    $107 = $ReallocAsyncCtx2 + 64 | 0; //@line 24470
    HEAP32[$107 >> 2] = $32; //@line 24471
    $108 = $ReallocAsyncCtx2 + 68 | 0; //@line 24472
    HEAP32[$108 >> 2] = $34; //@line 24473
    sp = STACKTOP; //@line 24474
    return;
   } else {
    $65 = HEAP32[(HEAP32[$32 >> 2] | 0) + 76 >> 2] | 0; //@line 24479
    $ReallocAsyncCtx = _emscripten_realloc_async_context(80) | 0; //@line 24481
    $67 = FUNCTION_TABLE_iiii[$65 & 31]($12, $59, 0) | 0; //@line 24482
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 497; //@line 24485
     $68 = $ReallocAsyncCtx + 4 | 0; //@line 24486
     HEAP32[$68 >> 2] = $2; //@line 24487
     $69 = $ReallocAsyncCtx + 8 | 0; //@line 24488
     HEAP8[$69 >> 0] = $43; //@line 24489
     $70 = $ReallocAsyncCtx + 12 | 0; //@line 24490
     HEAP32[$70 >> 2] = $6; //@line 24491
     $71 = $ReallocAsyncCtx + 16 | 0; //@line 24492
     HEAP32[$71 >> 2] = 0; //@line 24493
     $72 = $ReallocAsyncCtx + 20 | 0; //@line 24494
     HEAP32[$72 >> 2] = $8; //@line 24495
     $73 = $ReallocAsyncCtx + 24 | 0; //@line 24496
     HEAP32[$73 >> 2] = $10; //@line 24497
     $74 = $ReallocAsyncCtx + 28 | 0; //@line 24498
     HEAP32[$74 >> 2] = $12; //@line 24499
     $75 = $ReallocAsyncCtx + 32 | 0; //@line 24500
     HEAP32[$75 >> 2] = $14; //@line 24501
     $76 = $ReallocAsyncCtx + 36 | 0; //@line 24502
     HEAP8[$76 >> 0] = $36; //@line 24503
     $77 = $ReallocAsyncCtx + 40 | 0; //@line 24504
     HEAP32[$77 >> 2] = $16; //@line 24505
     $78 = $ReallocAsyncCtx + 44 | 0; //@line 24506
     HEAP32[$78 >> 2] = $20; //@line 24507
     $79 = $ReallocAsyncCtx + 48 | 0; //@line 24508
     HEAP32[$79 >> 2] = $22; //@line 24509
     $80 = $ReallocAsyncCtx + 52 | 0; //@line 24510
     HEAP32[$80 >> 2] = $24; //@line 24511
     $81 = $ReallocAsyncCtx + 56 | 0; //@line 24512
     HEAP32[$81 >> 2] = $26; //@line 24513
     $82 = $ReallocAsyncCtx + 60 | 0; //@line 24514
     HEAP32[$82 >> 2] = $28; //@line 24515
     $83 = $ReallocAsyncCtx + 64 | 0; //@line 24516
     HEAP32[$83 >> 2] = $30; //@line 24517
     $84 = $ReallocAsyncCtx + 68 | 0; //@line 24518
     HEAP32[$84 >> 2] = $32; //@line 24519
     $85 = $ReallocAsyncCtx + 72 | 0; //@line 24520
     HEAP32[$85 >> 2] = $59; //@line 24521
     $86 = $ReallocAsyncCtx + 76 | 0; //@line 24522
     HEAP32[$86 >> 2] = $34; //@line 24523
     sp = STACKTOP; //@line 24524
     return;
    }
    HEAP8[___async_retval >> 0] = $67 & 1; //@line 24529
    ___async_unwind = 0; //@line 24530
    HEAP32[$ReallocAsyncCtx >> 2] = 497; //@line 24531
    $68 = $ReallocAsyncCtx + 4 | 0; //@line 24532
    HEAP32[$68 >> 2] = $2; //@line 24533
    $69 = $ReallocAsyncCtx + 8 | 0; //@line 24534
    HEAP8[$69 >> 0] = $43; //@line 24535
    $70 = $ReallocAsyncCtx + 12 | 0; //@line 24536
    HEAP32[$70 >> 2] = $6; //@line 24537
    $71 = $ReallocAsyncCtx + 16 | 0; //@line 24538
    HEAP32[$71 >> 2] = 0; //@line 24539
    $72 = $ReallocAsyncCtx + 20 | 0; //@line 24540
    HEAP32[$72 >> 2] = $8; //@line 24541
    $73 = $ReallocAsyncCtx + 24 | 0; //@line 24542
    HEAP32[$73 >> 2] = $10; //@line 24543
    $74 = $ReallocAsyncCtx + 28 | 0; //@line 24544
    HEAP32[$74 >> 2] = $12; //@line 24545
    $75 = $ReallocAsyncCtx + 32 | 0; //@line 24546
    HEAP32[$75 >> 2] = $14; //@line 24547
    $76 = $ReallocAsyncCtx + 36 | 0; //@line 24548
    HEAP8[$76 >> 0] = $36; //@line 24549
    $77 = $ReallocAsyncCtx + 40 | 0; //@line 24550
    HEAP32[$77 >> 2] = $16; //@line 24551
    $78 = $ReallocAsyncCtx + 44 | 0; //@line 24552
    HEAP32[$78 >> 2] = $20; //@line 24553
    $79 = $ReallocAsyncCtx + 48 | 0; //@line 24554
    HEAP32[$79 >> 2] = $22; //@line 24555
    $80 = $ReallocAsyncCtx + 52 | 0; //@line 24556
    HEAP32[$80 >> 2] = $24; //@line 24557
    $81 = $ReallocAsyncCtx + 56 | 0; //@line 24558
    HEAP32[$81 >> 2] = $26; //@line 24559
    $82 = $ReallocAsyncCtx + 60 | 0; //@line 24560
    HEAP32[$82 >> 2] = $28; //@line 24561
    $83 = $ReallocAsyncCtx + 64 | 0; //@line 24562
    HEAP32[$83 >> 2] = $30; //@line 24563
    $84 = $ReallocAsyncCtx + 68 | 0; //@line 24564
    HEAP32[$84 >> 2] = $32; //@line 24565
    $85 = $ReallocAsyncCtx + 72 | 0; //@line 24566
    HEAP32[$85 >> 2] = $59; //@line 24567
    $86 = $ReallocAsyncCtx + 76 | 0; //@line 24568
    HEAP32[$86 >> 2] = $34; //@line 24569
    sp = STACKTOP; //@line 24570
    return;
   }
  }
 } else {
  HEAP32[$26 >> 2] = 0; //@line 24575
  HEAP8[$30 >> 0] = 0; //@line 24576
  HEAP32[$28 >> 2] = 0; //@line 24577
 }
 $111 = HEAP32[(HEAP32[$22 >> 2] | 0) + 64 >> 2] | 0; //@line 24581
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(68) | 0; //@line 24582
 FUNCTION_TABLE_iii[$111 & 15]($12, $36) | 0; //@line 24583
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 499; //@line 24586
  $112 = $ReallocAsyncCtx3 + 4 | 0; //@line 24587
  HEAP32[$112 >> 2] = $2; //@line 24588
  $113 = $ReallocAsyncCtx3 + 8 | 0; //@line 24589
  HEAP32[$113 >> 2] = $6; //@line 24590
  $114 = $ReallocAsyncCtx3 + 12 | 0; //@line 24591
  HEAP32[$114 >> 2] = $8; //@line 24592
  $115 = $ReallocAsyncCtx3 + 16 | 0; //@line 24593
  HEAP32[$115 >> 2] = $10; //@line 24594
  $116 = $ReallocAsyncCtx3 + 20 | 0; //@line 24595
  HEAP32[$116 >> 2] = $12; //@line 24596
  $117 = $ReallocAsyncCtx3 + 24 | 0; //@line 24597
  HEAP32[$117 >> 2] = $14; //@line 24598
  $118 = $ReallocAsyncCtx3 + 28 | 0; //@line 24599
  HEAP32[$118 >> 2] = $16; //@line 24600
  $119 = $ReallocAsyncCtx3 + 32 | 0; //@line 24601
  HEAP32[$119 >> 2] = $20; //@line 24602
  $120 = $ReallocAsyncCtx3 + 36 | 0; //@line 24603
  HEAP32[$120 >> 2] = $22; //@line 24604
  $121 = $ReallocAsyncCtx3 + 40 | 0; //@line 24605
  HEAP32[$121 >> 2] = $24; //@line 24606
  $122 = $ReallocAsyncCtx3 + 44 | 0; //@line 24607
  HEAP32[$122 >> 2] = $26; //@line 24608
  $123 = $ReallocAsyncCtx3 + 48 | 0; //@line 24609
  HEAP32[$123 >> 2] = $28; //@line 24610
  $124 = $ReallocAsyncCtx3 + 52 | 0; //@line 24611
  HEAP32[$124 >> 2] = $30; //@line 24612
  $125 = $ReallocAsyncCtx3 + 56 | 0; //@line 24613
  HEAP32[$125 >> 2] = $32; //@line 24614
  $126 = $ReallocAsyncCtx3 + 60 | 0; //@line 24615
  HEAP32[$126 >> 2] = $34; //@line 24616
  $127 = $ReallocAsyncCtx3 + 64 | 0; //@line 24617
  HEAP8[$127 >> 0] = $43; //@line 24618
  $128 = $ReallocAsyncCtx3 + 65 | 0; //@line 24619
  HEAP8[$128 >> 0] = $36; //@line 24620
  sp = STACKTOP; //@line 24621
  return;
 }
 ___async_unwind = 0; //@line 24624
 HEAP32[$ReallocAsyncCtx3 >> 2] = 499; //@line 24625
 $112 = $ReallocAsyncCtx3 + 4 | 0; //@line 24626
 HEAP32[$112 >> 2] = $2; //@line 24627
 $113 = $ReallocAsyncCtx3 + 8 | 0; //@line 24628
 HEAP32[$113 >> 2] = $6; //@line 24629
 $114 = $ReallocAsyncCtx3 + 12 | 0; //@line 24630
 HEAP32[$114 >> 2] = $8; //@line 24631
 $115 = $ReallocAsyncCtx3 + 16 | 0; //@line 24632
 HEAP32[$115 >> 2] = $10; //@line 24633
 $116 = $ReallocAsyncCtx3 + 20 | 0; //@line 24634
 HEAP32[$116 >> 2] = $12; //@line 24635
 $117 = $ReallocAsyncCtx3 + 24 | 0; //@line 24636
 HEAP32[$117 >> 2] = $14; //@line 24637
 $118 = $ReallocAsyncCtx3 + 28 | 0; //@line 24638
 HEAP32[$118 >> 2] = $16; //@line 24639
 $119 = $ReallocAsyncCtx3 + 32 | 0; //@line 24640
 HEAP32[$119 >> 2] = $20; //@line 24641
 $120 = $ReallocAsyncCtx3 + 36 | 0; //@line 24642
 HEAP32[$120 >> 2] = $22; //@line 24643
 $121 = $ReallocAsyncCtx3 + 40 | 0; //@line 24644
 HEAP32[$121 >> 2] = $24; //@line 24645
 $122 = $ReallocAsyncCtx3 + 44 | 0; //@line 24646
 HEAP32[$122 >> 2] = $26; //@line 24647
 $123 = $ReallocAsyncCtx3 + 48 | 0; //@line 24648
 HEAP32[$123 >> 2] = $28; //@line 24649
 $124 = $ReallocAsyncCtx3 + 52 | 0; //@line 24650
 HEAP32[$124 >> 2] = $30; //@line 24651
 $125 = $ReallocAsyncCtx3 + 56 | 0; //@line 24652
 HEAP32[$125 >> 2] = $32; //@line 24653
 $126 = $ReallocAsyncCtx3 + 60 | 0; //@line 24654
 HEAP32[$126 >> 2] = $34; //@line 24655
 $127 = $ReallocAsyncCtx3 + 64 | 0; //@line 24656
 HEAP8[$127 >> 0] = $43; //@line 24657
 $128 = $ReallocAsyncCtx3 + 65 | 0; //@line 24658
 HEAP8[$128 >> 0] = $36; //@line 24659
 sp = STACKTOP; //@line 24660
 return;
}
function __ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_102($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $36 = 0, $4 = 0, $42 = 0, $43 = 0, $58 = 0, $59 = 0, $6 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 24673
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24675
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24677
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24679
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24681
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24683
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24685
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24687
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24689
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 24691
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 24693
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 24695
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 24697
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 24699
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 24701
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 24703
 $36 = (HEAP8[$0 + 65 >> 0] | 0) + 1 << 24 >> 24; //@line 24708
 if (($36 & 255) >= (HEAPU8[$16 >> 0] | 0)) {
  return;
 }
 $43 = (HEAPU8[$0 + 64 >> 0] | 0) + 3 & 255; //@line 24716
 if (((HEAPU8[$4 >> 0] | 0) + (HEAPU8[$30 >> 0] | 0) | 0) >>> 0 > ($36 & 255) >>> 0) {
  $42 = $43 & 255; //@line 24725
  $58 = HEAPU8[$20 + ($42 + 2) >> 0] << 16 | (HEAPU8[$20 + ($42 + 1) >> 0] << 8 | HEAPU8[$20 + $42 >> 0]); //@line 24740
  $59 = $58 * 100 | 0; //@line 24741
  HEAP32[$22 >> 2] = $59; //@line 24742
  HEAP32[$24 >> 2] = 0; //@line 24743
  if ($58 | 0) {
   if (!(HEAP8[$14 >> 0] | 0)) {
    HEAP8[$6 >> 0] = -1; //@line 24750
    $91 = HEAP32[(HEAP32[$8 >> 2] | 0) + 60 >> 2] | 0; //@line 24753
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(72) | 0; //@line 24754
    FUNCTION_TABLE_iiii[$91 & 31]($10, $12, $36) | 0; //@line 24755
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 498; //@line 24758
     $92 = $ReallocAsyncCtx2 + 4 | 0; //@line 24759
     HEAP32[$92 >> 2] = $2; //@line 24760
     $93 = $ReallocAsyncCtx2 + 8 | 0; //@line 24761
     HEAP8[$93 >> 0] = $43; //@line 24762
     $94 = $ReallocAsyncCtx2 + 12 | 0; //@line 24763
     HEAP32[$94 >> 2] = $4; //@line 24764
     $95 = $ReallocAsyncCtx2 + 16 | 0; //@line 24765
     HEAP32[$95 >> 2] = $6; //@line 24766
     $96 = $ReallocAsyncCtx2 + 20 | 0; //@line 24767
     HEAP32[$96 >> 2] = $8; //@line 24768
     $97 = $ReallocAsyncCtx2 + 24 | 0; //@line 24769
     HEAP32[$97 >> 2] = $10; //@line 24770
     $98 = $ReallocAsyncCtx2 + 28 | 0; //@line 24771
     HEAP32[$98 >> 2] = $12; //@line 24772
     $99 = $ReallocAsyncCtx2 + 32 | 0; //@line 24773
     HEAP32[$99 >> 2] = $14; //@line 24774
     $100 = $ReallocAsyncCtx2 + 36 | 0; //@line 24775
     HEAP8[$100 >> 0] = $36; //@line 24776
     $101 = $ReallocAsyncCtx2 + 40 | 0; //@line 24777
     HEAP32[$101 >> 2] = $16; //@line 24778
     $102 = $ReallocAsyncCtx2 + 44 | 0; //@line 24779
     HEAP32[$102 >> 2] = $18; //@line 24780
     $103 = $ReallocAsyncCtx2 + 48 | 0; //@line 24781
     HEAP32[$103 >> 2] = $20; //@line 24782
     $104 = $ReallocAsyncCtx2 + 52 | 0; //@line 24783
     HEAP32[$104 >> 2] = $22; //@line 24784
     $105 = $ReallocAsyncCtx2 + 56 | 0; //@line 24785
     HEAP32[$105 >> 2] = $24; //@line 24786
     $106 = $ReallocAsyncCtx2 + 60 | 0; //@line 24787
     HEAP32[$106 >> 2] = $26; //@line 24788
     $107 = $ReallocAsyncCtx2 + 64 | 0; //@line 24789
     HEAP32[$107 >> 2] = $28; //@line 24790
     $108 = $ReallocAsyncCtx2 + 68 | 0; //@line 24791
     HEAP32[$108 >> 2] = $30; //@line 24792
     sp = STACKTOP; //@line 24793
     return;
    }
    ___async_unwind = 0; //@line 24796
    HEAP32[$ReallocAsyncCtx2 >> 2] = 498; //@line 24797
    $92 = $ReallocAsyncCtx2 + 4 | 0; //@line 24798
    HEAP32[$92 >> 2] = $2; //@line 24799
    $93 = $ReallocAsyncCtx2 + 8 | 0; //@line 24800
    HEAP8[$93 >> 0] = $43; //@line 24801
    $94 = $ReallocAsyncCtx2 + 12 | 0; //@line 24802
    HEAP32[$94 >> 2] = $4; //@line 24803
    $95 = $ReallocAsyncCtx2 + 16 | 0; //@line 24804
    HEAP32[$95 >> 2] = $6; //@line 24805
    $96 = $ReallocAsyncCtx2 + 20 | 0; //@line 24806
    HEAP32[$96 >> 2] = $8; //@line 24807
    $97 = $ReallocAsyncCtx2 + 24 | 0; //@line 24808
    HEAP32[$97 >> 2] = $10; //@line 24809
    $98 = $ReallocAsyncCtx2 + 28 | 0; //@line 24810
    HEAP32[$98 >> 2] = $12; //@line 24811
    $99 = $ReallocAsyncCtx2 + 32 | 0; //@line 24812
    HEAP32[$99 >> 2] = $14; //@line 24813
    $100 = $ReallocAsyncCtx2 + 36 | 0; //@line 24814
    HEAP8[$100 >> 0] = $36; //@line 24815
    $101 = $ReallocAsyncCtx2 + 40 | 0; //@line 24816
    HEAP32[$101 >> 2] = $16; //@line 24817
    $102 = $ReallocAsyncCtx2 + 44 | 0; //@line 24818
    HEAP32[$102 >> 2] = $18; //@line 24819
    $103 = $ReallocAsyncCtx2 + 48 | 0; //@line 24820
    HEAP32[$103 >> 2] = $20; //@line 24821
    $104 = $ReallocAsyncCtx2 + 52 | 0; //@line 24822
    HEAP32[$104 >> 2] = $22; //@line 24823
    $105 = $ReallocAsyncCtx2 + 56 | 0; //@line 24824
    HEAP32[$105 >> 2] = $24; //@line 24825
    $106 = $ReallocAsyncCtx2 + 60 | 0; //@line 24826
    HEAP32[$106 >> 2] = $26; //@line 24827
    $107 = $ReallocAsyncCtx2 + 64 | 0; //@line 24828
    HEAP32[$107 >> 2] = $28; //@line 24829
    $108 = $ReallocAsyncCtx2 + 68 | 0; //@line 24830
    HEAP32[$108 >> 2] = $30; //@line 24831
    sp = STACKTOP; //@line 24832
    return;
   } else {
    $65 = HEAP32[(HEAP32[$28 >> 2] | 0) + 76 >> 2] | 0; //@line 24837
    $ReallocAsyncCtx = _emscripten_realloc_async_context(80) | 0; //@line 24839
    $67 = FUNCTION_TABLE_iiii[$65 & 31]($10, $59, 0) | 0; //@line 24840
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 497; //@line 24843
     $68 = $ReallocAsyncCtx + 4 | 0; //@line 24844
     HEAP32[$68 >> 2] = $2; //@line 24845
     $69 = $ReallocAsyncCtx + 8 | 0; //@line 24846
     HEAP8[$69 >> 0] = $43; //@line 24847
     $70 = $ReallocAsyncCtx + 12 | 0; //@line 24848
     HEAP32[$70 >> 2] = $4; //@line 24849
     $71 = $ReallocAsyncCtx + 16 | 0; //@line 24850
     HEAP32[$71 >> 2] = 0; //@line 24851
     $72 = $ReallocAsyncCtx + 20 | 0; //@line 24852
     HEAP32[$72 >> 2] = $6; //@line 24853
     $73 = $ReallocAsyncCtx + 24 | 0; //@line 24854
     HEAP32[$73 >> 2] = $8; //@line 24855
     $74 = $ReallocAsyncCtx + 28 | 0; //@line 24856
     HEAP32[$74 >> 2] = $10; //@line 24857
     $75 = $ReallocAsyncCtx + 32 | 0; //@line 24858
     HEAP32[$75 >> 2] = $12; //@line 24859
     $76 = $ReallocAsyncCtx + 36 | 0; //@line 24860
     HEAP8[$76 >> 0] = $36; //@line 24861
     $77 = $ReallocAsyncCtx + 40 | 0; //@line 24862
     HEAP32[$77 >> 2] = $14; //@line 24863
     $78 = $ReallocAsyncCtx + 44 | 0; //@line 24864
     HEAP32[$78 >> 2] = $16; //@line 24865
     $79 = $ReallocAsyncCtx + 48 | 0; //@line 24866
     HEAP32[$79 >> 2] = $18; //@line 24867
     $80 = $ReallocAsyncCtx + 52 | 0; //@line 24868
     HEAP32[$80 >> 2] = $20; //@line 24869
     $81 = $ReallocAsyncCtx + 56 | 0; //@line 24870
     HEAP32[$81 >> 2] = $22; //@line 24871
     $82 = $ReallocAsyncCtx + 60 | 0; //@line 24872
     HEAP32[$82 >> 2] = $24; //@line 24873
     $83 = $ReallocAsyncCtx + 64 | 0; //@line 24874
     HEAP32[$83 >> 2] = $26; //@line 24875
     $84 = $ReallocAsyncCtx + 68 | 0; //@line 24876
     HEAP32[$84 >> 2] = $28; //@line 24877
     $85 = $ReallocAsyncCtx + 72 | 0; //@line 24878
     HEAP32[$85 >> 2] = $59; //@line 24879
     $86 = $ReallocAsyncCtx + 76 | 0; //@line 24880
     HEAP32[$86 >> 2] = $30; //@line 24881
     sp = STACKTOP; //@line 24882
     return;
    }
    HEAP8[___async_retval >> 0] = $67 & 1; //@line 24887
    ___async_unwind = 0; //@line 24888
    HEAP32[$ReallocAsyncCtx >> 2] = 497; //@line 24889
    $68 = $ReallocAsyncCtx + 4 | 0; //@line 24890
    HEAP32[$68 >> 2] = $2; //@line 24891
    $69 = $ReallocAsyncCtx + 8 | 0; //@line 24892
    HEAP8[$69 >> 0] = $43; //@line 24893
    $70 = $ReallocAsyncCtx + 12 | 0; //@line 24894
    HEAP32[$70 >> 2] = $4; //@line 24895
    $71 = $ReallocAsyncCtx + 16 | 0; //@line 24896
    HEAP32[$71 >> 2] = 0; //@line 24897
    $72 = $ReallocAsyncCtx + 20 | 0; //@line 24898
    HEAP32[$72 >> 2] = $6; //@line 24899
    $73 = $ReallocAsyncCtx + 24 | 0; //@line 24900
    HEAP32[$73 >> 2] = $8; //@line 24901
    $74 = $ReallocAsyncCtx + 28 | 0; //@line 24902
    HEAP32[$74 >> 2] = $10; //@line 24903
    $75 = $ReallocAsyncCtx + 32 | 0; //@line 24904
    HEAP32[$75 >> 2] = $12; //@line 24905
    $76 = $ReallocAsyncCtx + 36 | 0; //@line 24906
    HEAP8[$76 >> 0] = $36; //@line 24907
    $77 = $ReallocAsyncCtx + 40 | 0; //@line 24908
    HEAP32[$77 >> 2] = $14; //@line 24909
    $78 = $ReallocAsyncCtx + 44 | 0; //@line 24910
    HEAP32[$78 >> 2] = $16; //@line 24911
    $79 = $ReallocAsyncCtx + 48 | 0; //@line 24912
    HEAP32[$79 >> 2] = $18; //@line 24913
    $80 = $ReallocAsyncCtx + 52 | 0; //@line 24914
    HEAP32[$80 >> 2] = $20; //@line 24915
    $81 = $ReallocAsyncCtx + 56 | 0; //@line 24916
    HEAP32[$81 >> 2] = $22; //@line 24917
    $82 = $ReallocAsyncCtx + 60 | 0; //@line 24918
    HEAP32[$82 >> 2] = $24; //@line 24919
    $83 = $ReallocAsyncCtx + 64 | 0; //@line 24920
    HEAP32[$83 >> 2] = $26; //@line 24921
    $84 = $ReallocAsyncCtx + 68 | 0; //@line 24922
    HEAP32[$84 >> 2] = $28; //@line 24923
    $85 = $ReallocAsyncCtx + 72 | 0; //@line 24924
    HEAP32[$85 >> 2] = $59; //@line 24925
    $86 = $ReallocAsyncCtx + 76 | 0; //@line 24926
    HEAP32[$86 >> 2] = $30; //@line 24927
    sp = STACKTOP; //@line 24928
    return;
   }
  }
 } else {
  HEAP32[$22 >> 2] = 0; //@line 24933
  HEAP8[$26 >> 0] = 0; //@line 24934
  HEAP32[$24 >> 2] = 0; //@line 24935
 }
 $111 = HEAP32[(HEAP32[$18 >> 2] | 0) + 64 >> 2] | 0; //@line 24939
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(68) | 0; //@line 24940
 FUNCTION_TABLE_iii[$111 & 15]($10, $36) | 0; //@line 24941
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 499; //@line 24944
  $112 = $ReallocAsyncCtx3 + 4 | 0; //@line 24945
  HEAP32[$112 >> 2] = $2; //@line 24946
  $113 = $ReallocAsyncCtx3 + 8 | 0; //@line 24947
  HEAP32[$113 >> 2] = $4; //@line 24948
  $114 = $ReallocAsyncCtx3 + 12 | 0; //@line 24949
  HEAP32[$114 >> 2] = $6; //@line 24950
  $115 = $ReallocAsyncCtx3 + 16 | 0; //@line 24951
  HEAP32[$115 >> 2] = $8; //@line 24952
  $116 = $ReallocAsyncCtx3 + 20 | 0; //@line 24953
  HEAP32[$116 >> 2] = $10; //@line 24954
  $117 = $ReallocAsyncCtx3 + 24 | 0; //@line 24955
  HEAP32[$117 >> 2] = $12; //@line 24956
  $118 = $ReallocAsyncCtx3 + 28 | 0; //@line 24957
  HEAP32[$118 >> 2] = $14; //@line 24958
  $119 = $ReallocAsyncCtx3 + 32 | 0; //@line 24959
  HEAP32[$119 >> 2] = $16; //@line 24960
  $120 = $ReallocAsyncCtx3 + 36 | 0; //@line 24961
  HEAP32[$120 >> 2] = $18; //@line 24962
  $121 = $ReallocAsyncCtx3 + 40 | 0; //@line 24963
  HEAP32[$121 >> 2] = $20; //@line 24964
  $122 = $ReallocAsyncCtx3 + 44 | 0; //@line 24965
  HEAP32[$122 >> 2] = $22; //@line 24966
  $123 = $ReallocAsyncCtx3 + 48 | 0; //@line 24967
  HEAP32[$123 >> 2] = $24; //@line 24968
  $124 = $ReallocAsyncCtx3 + 52 | 0; //@line 24969
  HEAP32[$124 >> 2] = $26; //@line 24970
  $125 = $ReallocAsyncCtx3 + 56 | 0; //@line 24971
  HEAP32[$125 >> 2] = $28; //@line 24972
  $126 = $ReallocAsyncCtx3 + 60 | 0; //@line 24973
  HEAP32[$126 >> 2] = $30; //@line 24974
  $127 = $ReallocAsyncCtx3 + 64 | 0; //@line 24975
  HEAP8[$127 >> 0] = $43; //@line 24976
  $128 = $ReallocAsyncCtx3 + 65 | 0; //@line 24977
  HEAP8[$128 >> 0] = $36; //@line 24978
  sp = STACKTOP; //@line 24979
  return;
 }
 ___async_unwind = 0; //@line 24982
 HEAP32[$ReallocAsyncCtx3 >> 2] = 499; //@line 24983
 $112 = $ReallocAsyncCtx3 + 4 | 0; //@line 24984
 HEAP32[$112 >> 2] = $2; //@line 24985
 $113 = $ReallocAsyncCtx3 + 8 | 0; //@line 24986
 HEAP32[$113 >> 2] = $4; //@line 24987
 $114 = $ReallocAsyncCtx3 + 12 | 0; //@line 24988
 HEAP32[$114 >> 2] = $6; //@line 24989
 $115 = $ReallocAsyncCtx3 + 16 | 0; //@line 24990
 HEAP32[$115 >> 2] = $8; //@line 24991
 $116 = $ReallocAsyncCtx3 + 20 | 0; //@line 24992
 HEAP32[$116 >> 2] = $10; //@line 24993
 $117 = $ReallocAsyncCtx3 + 24 | 0; //@line 24994
 HEAP32[$117 >> 2] = $12; //@line 24995
 $118 = $ReallocAsyncCtx3 + 28 | 0; //@line 24996
 HEAP32[$118 >> 2] = $14; //@line 24997
 $119 = $ReallocAsyncCtx3 + 32 | 0; //@line 24998
 HEAP32[$119 >> 2] = $16; //@line 24999
 $120 = $ReallocAsyncCtx3 + 36 | 0; //@line 25000
 HEAP32[$120 >> 2] = $18; //@line 25001
 $121 = $ReallocAsyncCtx3 + 40 | 0; //@line 25002
 HEAP32[$121 >> 2] = $20; //@line 25003
 $122 = $ReallocAsyncCtx3 + 44 | 0; //@line 25004
 HEAP32[$122 >> 2] = $22; //@line 25005
 $123 = $ReallocAsyncCtx3 + 48 | 0; //@line 25006
 HEAP32[$123 >> 2] = $24; //@line 25007
 $124 = $ReallocAsyncCtx3 + 52 | 0; //@line 25008
 HEAP32[$124 >> 2] = $26; //@line 25009
 $125 = $ReallocAsyncCtx3 + 56 | 0; //@line 25010
 HEAP32[$125 >> 2] = $28; //@line 25011
 $126 = $ReallocAsyncCtx3 + 60 | 0; //@line 25012
 HEAP32[$126 >> 2] = $30; //@line 25013
 $127 = $ReallocAsyncCtx3 + 64 | 0; //@line 25014
 HEAP8[$127 >> 0] = $43; //@line 25015
 $128 = $ReallocAsyncCtx3 + 65 | 0; //@line 25016
 HEAP8[$128 >> 0] = $36; //@line 25017
 sp = STACKTOP; //@line 25018
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$05$i = 0, $$06$i = 0, $10 = 0, $100 = 0, $108 = 0, $116 = 0, $119 = 0, $126 = 0, $133 = 0, $136 = 0, $2 = 0, $29 = 0, $3 = 0, $4 = 0, $40 = 0, $48 = 0, $5 = 0, $66 = 0, $76 = 0, $79 = 0, $8 = 0, $88 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx30 = 0, $AsyncCtx33 = 0, $AsyncCtx36 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 15368
 STACKTOP = STACKTOP + 64 | 0; //@line 15369
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 15369
 $2 = sp + 48 | 0; //@line 15370
 $3 = sp + 32 | 0; //@line 15371
 $4 = sp + 16 | 0; //@line 15372
 $5 = sp; //@line 15373
 __ZN18LoRaWANTimeHandler24activate_timer_subsystemEPN6events10EventQueueE($0, $1); //@line 15374
 HEAP32[$0 + 1992 >> 2] = $1; //@line 15376
 $8 = $0 + 4 | 0; //@line 15378
 __ZN18LoRaMacChannelPlan30activate_channelplan_subsystemEP7LoRaPHY($0 + 752 | 0, $8); //@line 15379
 HEAP32[$0 + 2364 >> 2] = 0; //@line 15381
 $10 = $0 + 1168 | 0; //@line 15382
 HEAP8[$0 + 1701 >> 0] = 0; //@line 15384
 HEAP8[$0 + 1700 >> 0] = 1; //@line 15386
 HEAP8[$0 + 1173 >> 0] = 0; //@line 15388
 HEAP32[$0 + 1780 >> 2] = 0; //@line 15390
 HEAP32[$0 + 1784 >> 2] = 0; //@line 15392
 __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb($8, $10, 1); //@line 15393
 HEAP32[$0 + 1880 >> 2] = 10; //@line 15395
 HEAP8[$0 + 1884 >> 0] = 6; //@line 15397
 HEAP8[$0 + 1908 >> 0] = 1; //@line 15399
 HEAP8[$0 + 2360 >> 0] = 0; //@line 15401
 HEAP32[$0 + 1760 >> 2] = 0; //@line 15403
 HEAP32[$0 + 1764 >> 2] = 0; //@line 15405
 HEAP32[$0 + 1768 >> 2] = 0; //@line 15407
 HEAP8[$0 + 1184 >> 0] = 0; //@line 15409
 HEAP8[$0 + 1698 >> 0] = 1; //@line 15411
 HEAP8[$0 + 1699 >> 0] = 1; //@line 15413
 HEAP8[$0 + 1181 >> 0] = 0; //@line 15415
 HEAP8[$0 + 1932 >> 0] = 0; //@line 15417
 HEAP16[$0 + 1934 >> 1] = 1; //@line 15419
 $29 = $0 + 476 | 0; //@line 15420
 __ZN14LoRaMacCommand20clear_command_bufferEv($29); //@line 15421
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($29); //@line 15422
 __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($29); //@line 15423
 HEAP8[$0 + 1175 >> 0] = 1; //@line 15425
 __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb($8, $10, 0); //@line 15426
 HEAP8[$0 + 1177 >> 0] = 0; //@line 15428
 HEAP8[$0 + 1178 >> 0] = 0; //@line 15430
 $$05$i = HEAP32[$0 + 1988 >> 2] | 0; //@line 15432
 if ($$05$i | 0) {
  $$06$i = $$05$i; //@line 15435
  do {
   HEAP32[$$06$i + 36 >> 2] = 0; //@line 15438
   $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 15440
  } while (($$06$i | 0) != 0);
 }
 HEAP8[$0 + 1182 >> 0] = 0; //@line 15450
 HEAP8[$0 + 1183 >> 0] = 0; //@line 15452
 $AsyncCtx27 = _emscripten_alloc_async_context(32, sp) | 0; //@line 15453
 $40 = __ZN7LoRaPHY13get_radio_rngEv($8) | 0; //@line 15454
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 447; //@line 15457
  HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 15459
  HEAP32[$AsyncCtx27 + 8 >> 2] = $3; //@line 15461
  HEAP32[$AsyncCtx27 + 12 >> 2] = $0; //@line 15463
  HEAP32[$AsyncCtx27 + 16 >> 2] = $2; //@line 15465
  HEAP32[$AsyncCtx27 + 20 >> 2] = $5; //@line 15467
  HEAP32[$AsyncCtx27 + 24 >> 2] = $8; //@line 15469
  HEAP32[$AsyncCtx27 + 28 >> 2] = $4; //@line 15471
  sp = STACKTOP; //@line 15472
  STACKTOP = sp; //@line 15473
  return 0; //@line 15473
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 15475
 _srand($40); //@line 15476
 $48 = $0 + 1172 | 0; //@line 15477
 HEAP8[$48 >> 0] = 1; //@line 15478
 $AsyncCtx33 = _emscripten_alloc_async_context(36, sp) | 0; //@line 15479
 __ZN7LoRaPHY25setup_public_network_modeEb($8, 1); //@line 15480
 if (___async) {
  HEAP32[$AsyncCtx33 >> 2] = 448; //@line 15483
  HEAP32[$AsyncCtx33 + 4 >> 2] = $0; //@line 15485
  HEAP32[$AsyncCtx33 + 8 >> 2] = $3; //@line 15487
  HEAP32[$AsyncCtx33 + 12 >> 2] = $0; //@line 15489
  HEAP32[$AsyncCtx33 + 16 >> 2] = $2; //@line 15491
  HEAP32[$AsyncCtx33 + 20 >> 2] = $5; //@line 15493
  HEAP32[$AsyncCtx33 + 24 >> 2] = $48; //@line 15495
  HEAP32[$AsyncCtx33 + 28 >> 2] = $8; //@line 15497
  HEAP32[$AsyncCtx33 + 32 >> 2] = $4; //@line 15499
  sp = STACKTOP; //@line 15500
  STACKTOP = sp; //@line 15501
  return 0; //@line 15501
 }
 _emscripten_free_async_context($AsyncCtx33 | 0); //@line 15503
 $AsyncCtx36 = _emscripten_alloc_async_context(36, sp) | 0; //@line 15504
 __ZN7LoRaPHY18put_radio_to_sleepEv($8); //@line 15505
 if (___async) {
  HEAP32[$AsyncCtx36 >> 2] = 449; //@line 15508
  HEAP32[$AsyncCtx36 + 4 >> 2] = $0; //@line 15510
  HEAP32[$AsyncCtx36 + 8 >> 2] = $3; //@line 15512
  HEAP32[$AsyncCtx36 + 12 >> 2] = $0; //@line 15514
  HEAP32[$AsyncCtx36 + 16 >> 2] = $2; //@line 15516
  HEAP32[$AsyncCtx36 + 20 >> 2] = $5; //@line 15518
  HEAP32[$AsyncCtx36 + 24 >> 2] = $48; //@line 15520
  HEAP32[$AsyncCtx36 + 28 >> 2] = $8; //@line 15522
  HEAP32[$AsyncCtx36 + 32 >> 2] = $4; //@line 15524
  sp = STACKTOP; //@line 15525
  STACKTOP = sp; //@line 15526
  return 0; //@line 15526
 }
 _emscripten_free_async_context($AsyncCtx36 | 0); //@line 15528
 $66 = $2 + 12 | 0; //@line 15530
 HEAP32[$2 >> 2] = 450; //@line 15531
 HEAP32[$2 + 4 >> 2] = 0; //@line 15533
 HEAP32[$2 + 8 >> 2] = $0; //@line 15535
 HEAP32[$66 >> 2] = 844; //@line 15536
 $AsyncCtx23 = _emscripten_alloc_async_context(40, sp) | 0; //@line 15537
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $0 + 1796 | 0, $2); //@line 15538
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 451; //@line 15541
  HEAP32[$AsyncCtx23 + 4 >> 2] = $66; //@line 15543
  HEAP32[$AsyncCtx23 + 8 >> 2] = $0; //@line 15545
  HEAP32[$AsyncCtx23 + 12 >> 2] = $3; //@line 15547
  HEAP32[$AsyncCtx23 + 16 >> 2] = $0; //@line 15549
  HEAP32[$AsyncCtx23 + 20 >> 2] = $2; //@line 15551
  HEAP32[$AsyncCtx23 + 24 >> 2] = $5; //@line 15553
  HEAP32[$AsyncCtx23 + 28 >> 2] = $48; //@line 15555
  HEAP32[$AsyncCtx23 + 32 >> 2] = $8; //@line 15557
  HEAP32[$AsyncCtx23 + 36 >> 2] = $4; //@line 15559
  sp = STACKTOP; //@line 15560
  STACKTOP = sp; //@line 15561
  return 0; //@line 15561
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 15563
 $76 = HEAP32[$66 >> 2] | 0; //@line 15564
 do {
  if ($76 | 0) {
   $79 = HEAP32[$76 + 8 >> 2] | 0; //@line 15569
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 15570
   FUNCTION_TABLE_vi[$79 & 1023]($2); //@line 15571
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 452; //@line 15574
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 15576
    HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 15578
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 15580
    HEAP32[$AsyncCtx + 16 >> 2] = $48; //@line 15582
    HEAP32[$AsyncCtx + 20 >> 2] = $8; //@line 15584
    HEAP32[$AsyncCtx + 24 >> 2] = $5; //@line 15586
    HEAP32[$AsyncCtx + 28 >> 2] = $4; //@line 15588
    sp = STACKTOP; //@line 15589
    STACKTOP = sp; //@line 15590
    return 0; //@line 15590
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 15592
    break;
   }
  }
 } while (0);
 $88 = $3 + 12 | 0; //@line 15598
 HEAP32[$3 >> 2] = 453; //@line 15599
 HEAP32[$3 + 4 >> 2] = 0; //@line 15601
 HEAP32[$3 + 8 >> 2] = $0; //@line 15603
 HEAP32[$88 >> 2] = 844; //@line 15604
 $AsyncCtx20 = _emscripten_alloc_async_context(36, sp) | 0; //@line 15605
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $0 + 1816 | 0, $3); //@line 15606
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 454; //@line 15609
  HEAP32[$AsyncCtx20 + 4 >> 2] = $0; //@line 15611
  HEAP32[$AsyncCtx20 + 8 >> 2] = $5; //@line 15613
  HEAP32[$AsyncCtx20 + 12 >> 2] = $0; //@line 15615
  HEAP32[$AsyncCtx20 + 16 >> 2] = $48; //@line 15617
  HEAP32[$AsyncCtx20 + 20 >> 2] = $8; //@line 15619
  HEAP32[$AsyncCtx20 + 24 >> 2] = $88; //@line 15621
  HEAP32[$AsyncCtx20 + 28 >> 2] = $4; //@line 15623
  HEAP32[$AsyncCtx20 + 32 >> 2] = $3; //@line 15625
  sp = STACKTOP; //@line 15626
  STACKTOP = sp; //@line 15627
  return 0; //@line 15627
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 15629
 $97 = HEAP32[$88 >> 2] | 0; //@line 15630
 do {
  if ($97 | 0) {
   $100 = HEAP32[$97 + 8 >> 2] | 0; //@line 15635
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 15636
   FUNCTION_TABLE_vi[$100 & 1023]($3); //@line 15637
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 455; //@line 15640
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 15642
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 15644
    HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 15646
    HEAP32[$AsyncCtx3 + 16 >> 2] = $5; //@line 15648
    HEAP32[$AsyncCtx3 + 20 >> 2] = $48; //@line 15650
    HEAP32[$AsyncCtx3 + 24 >> 2] = $8; //@line 15652
    sp = STACKTOP; //@line 15653
    STACKTOP = sp; //@line 15654
    return 0; //@line 15654
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15656
    break;
   }
  }
 } while (0);
 $108 = $4 + 12 | 0; //@line 15662
 HEAP32[$4 >> 2] = 456; //@line 15663
 HEAP32[$4 + 4 >> 2] = 0; //@line 15665
 HEAP32[$4 + 8 >> 2] = $0; //@line 15667
 HEAP32[$108 >> 2] = 844; //@line 15668
 $AsyncCtx17 = _emscripten_alloc_async_context(32, sp) | 0; //@line 15669
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $0 + 1836 | 0, $4); //@line 15670
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 457; //@line 15673
  HEAP32[$AsyncCtx17 + 4 >> 2] = $108; //@line 15675
  HEAP32[$AsyncCtx17 + 8 >> 2] = $0; //@line 15677
  HEAP32[$AsyncCtx17 + 12 >> 2] = $5; //@line 15679
  HEAP32[$AsyncCtx17 + 16 >> 2] = $0; //@line 15681
  HEAP32[$AsyncCtx17 + 20 >> 2] = $4; //@line 15683
  HEAP32[$AsyncCtx17 + 24 >> 2] = $48; //@line 15685
  HEAP32[$AsyncCtx17 + 28 >> 2] = $8; //@line 15687
  sp = STACKTOP; //@line 15688
  STACKTOP = sp; //@line 15689
  return 0; //@line 15689
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 15691
 $116 = HEAP32[$108 >> 2] | 0; //@line 15692
 do {
  if ($116 | 0) {
   $119 = HEAP32[$116 + 8 >> 2] | 0; //@line 15697
   $AsyncCtx7 = _emscripten_alloc_async_context(24, sp) | 0; //@line 15698
   FUNCTION_TABLE_vi[$119 & 1023]($4); //@line 15699
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 458; //@line 15702
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 15704
    HEAP32[$AsyncCtx7 + 8 >> 2] = $5; //@line 15706
    HEAP32[$AsyncCtx7 + 12 >> 2] = $0; //@line 15708
    HEAP32[$AsyncCtx7 + 16 >> 2] = $48; //@line 15710
    HEAP32[$AsyncCtx7 + 20 >> 2] = $8; //@line 15712
    sp = STACKTOP; //@line 15713
    STACKTOP = sp; //@line 15714
    return 0; //@line 15714
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 15716
    break;
   }
  }
 } while (0);
 $126 = $5 + 12 | 0; //@line 15722
 HEAP32[$5 >> 2] = 389; //@line 15723
 HEAP32[$5 + 4 >> 2] = 0; //@line 15725
 HEAP32[$5 + 8 >> 2] = $0; //@line 15727
 HEAP32[$126 >> 2] = 844; //@line 15728
 $AsyncCtx14 = _emscripten_alloc_async_context(28, sp) | 0; //@line 15729
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $0 + 1856 | 0, $5); //@line 15730
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 459; //@line 15733
  HEAP32[$AsyncCtx14 + 4 >> 2] = $126; //@line 15735
  HEAP32[$AsyncCtx14 + 8 >> 2] = $0; //@line 15737
  HEAP32[$AsyncCtx14 + 12 >> 2] = $0; //@line 15739
  HEAP32[$AsyncCtx14 + 16 >> 2] = $48; //@line 15741
  HEAP32[$AsyncCtx14 + 20 >> 2] = $8; //@line 15743
  HEAP32[$AsyncCtx14 + 24 >> 2] = $5; //@line 15745
  sp = STACKTOP; //@line 15746
  STACKTOP = sp; //@line 15747
  return 0; //@line 15747
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 15749
 $133 = HEAP32[$126 >> 2] | 0; //@line 15750
 do {
  if ($133 | 0) {
   $136 = HEAP32[$133 + 8 >> 2] | 0; //@line 15755
   $AsyncCtx11 = _emscripten_alloc_async_context(20, sp) | 0; //@line 15756
   FUNCTION_TABLE_vi[$136 & 1023]($5); //@line 15757
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 460; //@line 15760
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 15762
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 15764
    HEAP32[$AsyncCtx11 + 12 >> 2] = $48; //@line 15766
    HEAP32[$AsyncCtx11 + 16 >> 2] = $8; //@line 15768
    sp = STACKTOP; //@line 15769
    STACKTOP = sp; //@line 15770
    return 0; //@line 15770
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 15772
    break;
   }
  }
 } while (0);
 HEAP32[$0 + 1788 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv($0) | 0; //@line 15779
 HEAP8[$0 + 1936 >> 0] = 1; //@line 15781
 HEAP8[$48 >> 0] = 1; //@line 15782
 $AsyncCtx30 = _emscripten_alloc_async_context(4, sp) | 0; //@line 15783
 __ZN7LoRaPHY25setup_public_network_modeEb($8, 1); //@line 15784
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 461; //@line 15787
  sp = STACKTOP; //@line 15788
  STACKTOP = sp; //@line 15789
  return 0; //@line 15789
 } else {
  _emscripten_free_async_context($AsyncCtx30 | 0); //@line 15791
  STACKTOP = sp; //@line 15792
  return 0; //@line 15792
 }
 return 0; //@line 15794
}
function _twoway_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0166 = 0, $$0168 = 0, $$0169 = 0, $$0169$be = 0, $$0170 = 0, $$0175$ph$ph$lcssa216 = 0, $$0175$ph$ph$lcssa216328 = 0, $$0175$ph$ph254 = 0, $$0179242 = 0, $$0183$ph197$ph253 = 0, $$0183$ph197248 = 0, $$0183$ph260 = 0, $$0185$ph$lcssa = 0, $$0185$ph$lcssa327 = 0, $$0185$ph259 = 0, $$0187219$ph325326 = 0, $$0187263 = 0, $$1176$$0175 = 0, $$1176$ph$ph$lcssa208 = 0, $$1176$ph$ph233 = 0, $$1180222 = 0, $$1184$ph193$ph232 = 0, $$1184$ph193227 = 0, $$1184$ph239 = 0, $$1186$$0185 = 0, $$1186$ph$lcssa = 0, $$1186$ph238 = 0, $$2181$sink = 0, $$3 = 0, $$3173 = 0, $$3178 = 0, $$3182221 = 0, $$4 = 0, $$pr = 0, $10 = 0, $105 = 0, $111 = 0, $113 = 0, $118 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $2 = 0, $23 = 0, $25 = 0, $27 = 0, $3 = 0, $32 = 0, $34 = 0, $37 = 0, $4 = 0, $41 = 0, $45 = 0, $50 = 0, $52 = 0, $53 = 0, $56 = 0, $60 = 0, $68 = 0, $70 = 0, $74 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $83 = 0, $86 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15156
 STACKTOP = STACKTOP + 1056 | 0; //@line 15157
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1056); //@line 15157
 $2 = sp + 1024 | 0; //@line 15158
 $3 = sp; //@line 15159
 HEAP32[$2 >> 2] = 0; //@line 15160
 HEAP32[$2 + 4 >> 2] = 0; //@line 15160
 HEAP32[$2 + 8 >> 2] = 0; //@line 15160
 HEAP32[$2 + 12 >> 2] = 0; //@line 15160
 HEAP32[$2 + 16 >> 2] = 0; //@line 15160
 HEAP32[$2 + 20 >> 2] = 0; //@line 15160
 HEAP32[$2 + 24 >> 2] = 0; //@line 15160
 HEAP32[$2 + 28 >> 2] = 0; //@line 15160
 $4 = HEAP8[$1 >> 0] | 0; //@line 15161
 L1 : do {
  if (!($4 << 24 >> 24)) {
   $$0175$ph$ph$lcssa216328 = 1; //@line 15165
   $$0185$ph$lcssa327 = -1; //@line 15165
   $$0187219$ph325326 = 0; //@line 15165
   $$1176$ph$ph$lcssa208 = 1; //@line 15165
   $$1186$ph$lcssa = -1; //@line 15165
   label = 26; //@line 15166
  } else {
   $$0187263 = 0; //@line 15168
   $10 = $4; //@line 15168
   do {
    if (!(HEAP8[$0 + $$0187263 >> 0] | 0)) {
     $$3 = 0; //@line 15174
     break L1;
    }
    $14 = $2 + ((($10 & 255) >>> 5 & 255) << 2) | 0; //@line 15182
    HEAP32[$14 >> 2] = HEAP32[$14 >> 2] | 1 << ($10 & 31); //@line 15185
    $$0187263 = $$0187263 + 1 | 0; //@line 15186
    HEAP32[$3 + (($10 & 255) << 2) >> 2] = $$0187263; //@line 15189
    $10 = HEAP8[$1 + $$0187263 >> 0] | 0; //@line 15191
   } while ($10 << 24 >> 24 != 0);
   $23 = $$0187263 >>> 0 > 1; //@line 15199
   if ($23) {
    $$0183$ph260 = 0; //@line 15201
    $$0185$ph259 = -1; //@line 15201
    $130 = 1; //@line 15201
    L6 : while (1) {
     $$0175$ph$ph254 = 1; //@line 15203
     $$0183$ph197$ph253 = $$0183$ph260; //@line 15203
     $131 = $130; //@line 15203
     while (1) {
      $$0183$ph197248 = $$0183$ph197$ph253; //@line 15205
      $132 = $131; //@line 15205
      L10 : while (1) {
       $$0179242 = 1; //@line 15207
       $25 = $132; //@line 15207
       while (1) {
        $32 = HEAP8[$1 + ($$0179242 + $$0185$ph259) >> 0] | 0; //@line 15211
        $34 = HEAP8[$1 + $25 >> 0] | 0; //@line 15213
        if ($32 << 24 >> 24 != $34 << 24 >> 24) {
         break L10;
        }
        if (($$0179242 | 0) == ($$0175$ph$ph254 | 0)) {
         break;
        }
        $$0179242 = $$0179242 + 1 | 0; //@line 15219
        $27 = $$0179242 + $$0183$ph197248 | 0; //@line 15223
        if ($27 >>> 0 >= $$0187263 >>> 0) {
         $$0175$ph$ph$lcssa216 = $$0175$ph$ph254; //@line 15228
         $$0185$ph$lcssa = $$0185$ph259; //@line 15228
         break L6;
        } else {
         $25 = $27; //@line 15226
        }
       }
       $37 = $$0175$ph$ph254 + $$0183$ph197248 | 0; //@line 15232
       $132 = $37 + 1 | 0; //@line 15233
       if ($132 >>> 0 >= $$0187263 >>> 0) {
        $$0175$ph$ph$lcssa216 = $$0175$ph$ph254; //@line 15238
        $$0185$ph$lcssa = $$0185$ph259; //@line 15238
        break L6;
       } else {
        $$0183$ph197248 = $37; //@line 15236
       }
      }
      $41 = $25 - $$0185$ph259 | 0; //@line 15243
      if (($32 & 255) <= ($34 & 255)) {
       break;
      }
      $131 = $25 + 1 | 0; //@line 15247
      if ($131 >>> 0 >= $$0187263 >>> 0) {
       $$0175$ph$ph$lcssa216 = $41; //@line 15252
       $$0185$ph$lcssa = $$0185$ph259; //@line 15252
       break L6;
      } else {
       $$0175$ph$ph254 = $41; //@line 15250
       $$0183$ph197$ph253 = $25; //@line 15250
      }
     }
     $130 = $$0183$ph197248 + 2 | 0; //@line 15257
     if ($130 >>> 0 >= $$0187263 >>> 0) {
      $$0175$ph$ph$lcssa216 = 1; //@line 15262
      $$0185$ph$lcssa = $$0183$ph197248; //@line 15262
      break;
     } else {
      $$0183$ph260 = $$0183$ph197248 + 1 | 0; //@line 15260
      $$0185$ph259 = $$0183$ph197248; //@line 15260
     }
    }
    if ($23) {
     $$1184$ph239 = 0; //@line 15267
     $$1186$ph238 = -1; //@line 15267
     $133 = 1; //@line 15267
     while (1) {
      $$1176$ph$ph233 = 1; //@line 15269
      $$1184$ph193$ph232 = $$1184$ph239; //@line 15269
      $135 = $133; //@line 15269
      while (1) {
       $$1184$ph193227 = $$1184$ph193$ph232; //@line 15271
       $134 = $135; //@line 15271
       L25 : while (1) {
        $$1180222 = 1; //@line 15273
        $52 = $134; //@line 15273
        while (1) {
         $50 = HEAP8[$1 + ($$1180222 + $$1186$ph238) >> 0] | 0; //@line 15277
         $53 = HEAP8[$1 + $52 >> 0] | 0; //@line 15279
         if ($50 << 24 >> 24 != $53 << 24 >> 24) {
          break L25;
         }
         if (($$1180222 | 0) == ($$1176$ph$ph233 | 0)) {
          break;
         }
         $$1180222 = $$1180222 + 1 | 0; //@line 15285
         $45 = $$1180222 + $$1184$ph193227 | 0; //@line 15289
         if ($45 >>> 0 >= $$0187263 >>> 0) {
          $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15294
          $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15294
          $$0187219$ph325326 = $$0187263; //@line 15294
          $$1176$ph$ph$lcssa208 = $$1176$ph$ph233; //@line 15294
          $$1186$ph$lcssa = $$1186$ph238; //@line 15294
          label = 26; //@line 15295
          break L1;
         } else {
          $52 = $45; //@line 15292
         }
        }
        $56 = $$1176$ph$ph233 + $$1184$ph193227 | 0; //@line 15299
        $134 = $56 + 1 | 0; //@line 15300
        if ($134 >>> 0 >= $$0187263 >>> 0) {
         $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15305
         $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15305
         $$0187219$ph325326 = $$0187263; //@line 15305
         $$1176$ph$ph$lcssa208 = $$1176$ph$ph233; //@line 15305
         $$1186$ph$lcssa = $$1186$ph238; //@line 15305
         label = 26; //@line 15306
         break L1;
        } else {
         $$1184$ph193227 = $56; //@line 15303
        }
       }
       $60 = $52 - $$1186$ph238 | 0; //@line 15311
       if (($50 & 255) >= ($53 & 255)) {
        break;
       }
       $135 = $52 + 1 | 0; //@line 15315
       if ($135 >>> 0 >= $$0187263 >>> 0) {
        $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15320
        $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15320
        $$0187219$ph325326 = $$0187263; //@line 15320
        $$1176$ph$ph$lcssa208 = $60; //@line 15320
        $$1186$ph$lcssa = $$1186$ph238; //@line 15320
        label = 26; //@line 15321
        break L1;
       } else {
        $$1176$ph$ph233 = $60; //@line 15318
        $$1184$ph193$ph232 = $52; //@line 15318
       }
      }
      $133 = $$1184$ph193227 + 2 | 0; //@line 15326
      if ($133 >>> 0 >= $$0187263 >>> 0) {
       $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15331
       $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15331
       $$0187219$ph325326 = $$0187263; //@line 15331
       $$1176$ph$ph$lcssa208 = 1; //@line 15331
       $$1186$ph$lcssa = $$1184$ph193227; //@line 15331
       label = 26; //@line 15332
       break;
      } else {
       $$1184$ph239 = $$1184$ph193227 + 1 | 0; //@line 15329
       $$1186$ph238 = $$1184$ph193227; //@line 15329
      }
     }
    } else {
     $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15337
     $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15337
     $$0187219$ph325326 = $$0187263; //@line 15337
     $$1176$ph$ph$lcssa208 = 1; //@line 15337
     $$1186$ph$lcssa = -1; //@line 15337
     label = 26; //@line 15338
    }
   } else {
    $$0175$ph$ph$lcssa216328 = 1; //@line 15341
    $$0185$ph$lcssa327 = -1; //@line 15341
    $$0187219$ph325326 = $$0187263; //@line 15341
    $$1176$ph$ph$lcssa208 = 1; //@line 15341
    $$1186$ph$lcssa = -1; //@line 15341
    label = 26; //@line 15342
   }
  }
 } while (0);
 L35 : do {
  if ((label | 0) == 26) {
   $68 = ($$1186$ph$lcssa + 1 | 0) >>> 0 > ($$0185$ph$lcssa327 + 1 | 0) >>> 0; //@line 15350
   $$1176$$0175 = $68 ? $$1176$ph$ph$lcssa208 : $$0175$ph$ph$lcssa216328; //@line 15351
   $$1186$$0185 = $68 ? $$1186$ph$lcssa : $$0185$ph$lcssa327; //@line 15352
   $70 = $$1186$$0185 + 1 | 0; //@line 15354
   if (!(_memcmp($1, $1 + $$1176$$0175 | 0, $70) | 0)) {
    $$0168 = $$0187219$ph325326 - $$1176$$0175 | 0; //@line 15359
    $$3178 = $$1176$$0175; //@line 15359
   } else {
    $74 = $$0187219$ph325326 - $$1186$$0185 + -1 | 0; //@line 15362
    $$0168 = 0; //@line 15366
    $$3178 = ($$1186$$0185 >>> 0 > $74 >>> 0 ? $$1186$$0185 : $74) + 1 | 0; //@line 15366
   }
   $78 = $$0187219$ph325326 | 63; //@line 15368
   $79 = $$0187219$ph325326 + -1 | 0; //@line 15369
   $80 = ($$0168 | 0) != 0; //@line 15370
   $81 = $$0187219$ph325326 - $$3178 | 0; //@line 15371
   $$0166 = $0; //@line 15372
   $$0169 = 0; //@line 15372
   $$0170 = $0; //@line 15372
   while (1) {
    $83 = $$0166; //@line 15375
    do {
     if (($$0170 - $83 | 0) >>> 0 < $$0187219$ph325326 >>> 0) {
      $86 = _memchr($$0170, 0, $78) | 0; //@line 15380
      if (!$86) {
       $$3173 = $$0170 + $78 | 0; //@line 15384
       break;
      } else {
       if (($86 - $83 | 0) >>> 0 < $$0187219$ph325326 >>> 0) {
        $$3 = 0; //@line 15391
        break L35;
       } else {
        $$3173 = $86; //@line 15394
        break;
       }
      }
     } else {
      $$3173 = $$0170; //@line 15399
     }
    } while (0);
    $93 = HEAP8[$$0166 + $79 >> 0] | 0; //@line 15403
    L49 : do {
     if (!(1 << ($93 & 31) & HEAP32[$2 + ((($93 & 255) >>> 5 & 255) << 2) >> 2])) {
      $$0169$be = 0; //@line 15415
      $$2181$sink = $$0187219$ph325326; //@line 15415
     } else {
      $105 = $$0187219$ph325326 - (HEAP32[$3 + (($93 & 255) << 2) >> 2] | 0) | 0; //@line 15420
      if ($105 | 0) {
       $$0169$be = 0; //@line 15428
       $$2181$sink = $80 & ($$0169 | 0) != 0 & $105 >>> 0 < $$3178 >>> 0 ? $81 : $105; //@line 15428
       break;
      }
      $111 = $70 >>> 0 > $$0169 >>> 0 ? $70 : $$0169; //@line 15432
      $113 = HEAP8[$1 + $111 >> 0] | 0; //@line 15434
      L54 : do {
       if (!($113 << 24 >> 24)) {
        $$4 = $70; //@line 15438
       } else {
        $$3182221 = $111; //@line 15440
        $$pr = $113; //@line 15440
        while (1) {
         if ($$pr << 24 >> 24 != (HEAP8[$$0166 + $$3182221 >> 0] | 0)) {
          break;
         }
         $118 = $$3182221 + 1 | 0; //@line 15448
         $$pr = HEAP8[$1 + $118 >> 0] | 0; //@line 15450
         if (!($$pr << 24 >> 24)) {
          $$4 = $70; //@line 15453
          break L54;
         } else {
          $$3182221 = $118; //@line 15456
         }
        }
        $$0169$be = 0; //@line 15460
        $$2181$sink = $$3182221 - $$1186$$0185 | 0; //@line 15460
        break L49;
       }
      } while (0);
      while (1) {
       if ($$4 >>> 0 <= $$0169 >>> 0) {
        $$3 = $$0166; //@line 15467
        break L35;
       }
       $$4 = $$4 + -1 | 0; //@line 15470
       if ((HEAP8[$1 + $$4 >> 0] | 0) != (HEAP8[$$0166 + $$4 >> 0] | 0)) {
        $$0169$be = $$0168; //@line 15479
        $$2181$sink = $$3178; //@line 15479
        break;
       }
      }
     }
    } while (0);
    $$0166 = $$0166 + $$2181$sink | 0; //@line 15486
    $$0169 = $$0169$be; //@line 15486
    $$0170 = $$3173; //@line 15486
   }
  }
 } while (0);
 STACKTOP = sp; //@line 15490
 return $$3 | 0; //@line 15490
}
function _mbedtls_gcm_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0$i = 0, $108 = 0, $110 = 0, $115 = 0, $120 = 0, $125 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $141 = 0, $143 = 0, $148 = 0, $153 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $164 = 0, $166 = 0, $171 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $182 = 0, $183 = 0, $184 = 0, $187 = 0, $189 = 0, $194 = 0, $198 = 0, $199 = 0, $201 = 0, $205 = 0, $206 = 0, $208 = 0, $212 = 0, $213 = 0, $215 = 0, $219 = 0, $220 = 0, $222 = 0, $226 = 0, $227 = 0, $229 = 0, $233 = 0, $234 = 0, $236 = 0, $240 = 0, $241 = 0, $243 = 0, $247 = 0, $248 = 0, $250 = 0, $257 = 0, $26 = 0, $264 = 0, $271 = 0, $278 = 0, $285 = 0, $292 = 0, $299 = 0, $306 = 0, $313 = 0, $32 = 0, $320 = 0, $327 = 0, $334 = 0, $341 = 0, $348 = 0, $4 = 0, $5 = 0, $54 = 0, $6 = 0, $72 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 4778
 STACKTOP = STACKTOP + 32 | 0; //@line 4779
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4779
 $4 = sp + 8 | 0; //@line 4780
 $5 = sp; //@line 4781
 $6 = _mbedtls_cipher_info_from_values($1, $3, 1) | 0; //@line 4782
 if (!$6) {
  $$0 = -20; //@line 4785
  STACKTOP = sp; //@line 4786
  return $$0 | 0; //@line 4786
 }
 if ((HEAP32[$6 + 24 >> 2] | 0) != 16) {
  $$0 = -20; //@line 4792
  STACKTOP = sp; //@line 4793
  return $$0 | 0; //@line 4793
 }
 $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 4795
 _mbedtls_cipher_free($0); //@line 4796
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 575; //@line 4799
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 4801
  HEAP32[$AsyncCtx11 + 8 >> 2] = $6; //@line 4803
  HEAP32[$AsyncCtx11 + 12 >> 2] = $2; //@line 4805
  HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 4807
  HEAP32[$AsyncCtx11 + 20 >> 2] = $4; //@line 4809
  HEAP32[$AsyncCtx11 + 24 >> 2] = $5; //@line 4811
  HEAP32[$AsyncCtx11 + 28 >> 2] = $0; //@line 4813
  sp = STACKTOP; //@line 4814
  STACKTOP = sp; //@line 4815
  return 0; //@line 4815
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 4817
 $AsyncCtx7 = _emscripten_alloc_async_context(28, sp) | 0; //@line 4818
 $18 = _mbedtls_cipher_setup($0, $6) | 0; //@line 4819
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 576; //@line 4822
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 4824
  HEAP32[$AsyncCtx7 + 8 >> 2] = $2; //@line 4826
  HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 4828
  HEAP32[$AsyncCtx7 + 16 >> 2] = $4; //@line 4830
  HEAP32[$AsyncCtx7 + 20 >> 2] = $5; //@line 4832
  HEAP32[$AsyncCtx7 + 24 >> 2] = $0; //@line 4834
  sp = STACKTOP; //@line 4835
  STACKTOP = sp; //@line 4836
  return 0; //@line 4836
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 4838
 if ($18 | 0) {
  $$0 = $18; //@line 4841
  STACKTOP = sp; //@line 4842
  return $$0 | 0; //@line 4842
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 4844
 $26 = _mbedtls_cipher_setkey($0, $2, $3, 1) | 0; //@line 4845
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 577; //@line 4848
  HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 4850
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 4852
  HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 4854
  HEAP32[$AsyncCtx3 + 16 >> 2] = $0; //@line 4856
  sp = STACKTOP; //@line 4857
  STACKTOP = sp; //@line 4858
  return 0; //@line 4858
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4860
 if ($26 | 0) {
  $$0 = $26; //@line 4863
  STACKTOP = sp; //@line 4864
  return $$0 | 0; //@line 4864
 }
 HEAP32[$5 >> 2] = 0; //@line 4866
 dest = $4; //@line 4867
 stop = dest + 16 | 0; //@line 4867
 do {
  HEAP8[dest >> 0] = 0; //@line 4867
  dest = dest + 1 | 0; //@line 4867
 } while ((dest | 0) < (stop | 0));
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 4868
 $32 = _mbedtls_cipher_update($0, $4, 16, $4, $5) | 0; //@line 4869
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 578; //@line 4872
  HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 4874
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 4876
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 4878
  HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 4880
  sp = STACKTOP; //@line 4881
  STACKTOP = sp; //@line 4882
  return 0; //@line 4882
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4884
 if (!$32) {
  $54 = (HEAPU8[$4 + 1 >> 0] | 0) << 16 | (HEAPU8[$4 >> 0] | 0) << 24 | (HEAPU8[$4 + 2 >> 0] | 0) << 8 | (HEAPU8[$4 + 3 >> 0] | 0); //@line 4903
  $72 = (HEAPU8[$4 + 5 >> 0] | 0) << 16 | (HEAPU8[$4 + 4 >> 0] | 0) << 24 | (HEAPU8[$4 + 6 >> 0] | 0) << 8 | (HEAPU8[$4 + 7 >> 0] | 0); //@line 4921
  $90 = (HEAPU8[$4 + 9 >> 0] | 0) << 16 | (HEAPU8[$4 + 8 >> 0] | 0) << 24 | (HEAPU8[$4 + 10 >> 0] | 0) << 8 | (HEAPU8[$4 + 11 >> 0] | 0); //@line 4939
  $108 = (HEAPU8[$4 + 13 >> 0] | 0) << 16 | (HEAPU8[$4 + 12 >> 0] | 0) << 24 | (HEAPU8[$4 + 14 >> 0] | 0) << 8 | (HEAPU8[$4 + 15 >> 0] | 0); //@line 4957
  $110 = $0 + 136 | 0; //@line 4959
  HEAP32[$110 >> 2] = $108; //@line 4961
  HEAP32[$110 + 4 >> 2] = $90; //@line 4964
  $115 = $0 + 264 | 0; //@line 4966
  HEAP32[$115 >> 2] = $72; //@line 4968
  HEAP32[$115 + 4 >> 2] = $54; //@line 4971
  $120 = $0 + 200 | 0; //@line 4973
  HEAP32[$120 >> 2] = 0; //@line 4975
  HEAP32[$120 + 4 >> 2] = 0; //@line 4978
  $125 = $0 + 72 | 0; //@line 4980
  HEAP32[$125 >> 2] = 0; //@line 4982
  HEAP32[$125 + 4 >> 2] = 0; //@line 4985
  $130 = _i64Subtract(0, 0, $108 & 1 | 0, 0) | 0; //@line 4987
  $132 = _bitshift64Shl($72 | 0, 0, 63) | 0; //@line 4989
  $133 = tempRet0; //@line 4990
  $134 = _bitshift64Lshr($108 | 0, $90 | 0, 1) | 0; //@line 4991
  $136 = $134 | $132; //@line 4993
  $137 = tempRet0 | $133; //@line 4994
  $138 = _bitshift64Lshr($72 | 0, $54 | 0, 1) | 0; //@line 4995
  $139 = tempRet0; //@line 4996
  $141 = $130 & -520093696 ^ $139; //@line 4998
  $143 = $0 + 104 | 0; //@line 5000
  HEAP32[$143 >> 2] = $136; //@line 5002
  HEAP32[$143 + 4 >> 2] = $137; //@line 5005
  $148 = $0 + 232 | 0; //@line 5007
  HEAP32[$148 >> 2] = $138; //@line 5009
  HEAP32[$148 + 4 >> 2] = $141; //@line 5012
  $153 = _i64Subtract(0, 0, $134 & 1 | 0, 0) | 0; //@line 5014
  $155 = _bitshift64Shl($138 | 0, $139 | 0, 63) | 0; //@line 5016
  $156 = tempRet0; //@line 5017
  $157 = _bitshift64Lshr($136 | 0, $137 | 0, 1) | 0; //@line 5018
  $159 = $157 | $155; //@line 5020
  $160 = tempRet0 | $156; //@line 5021
  $161 = _bitshift64Lshr($138 | 0, $141 | 0, 1) | 0; //@line 5022
  $162 = tempRet0; //@line 5023
  $164 = $153 & -520093696 ^ $162; //@line 5025
  $166 = $0 + 88 | 0; //@line 5027
  HEAP32[$166 >> 2] = $159; //@line 5029
  HEAP32[$166 + 4 >> 2] = $160; //@line 5032
  $171 = $0 + 216 | 0; //@line 5034
  HEAP32[$171 >> 2] = $161; //@line 5036
  HEAP32[$171 + 4 >> 2] = $164; //@line 5039
  $176 = _i64Subtract(0, 0, $157 & 1 | 0, 0) | 0; //@line 5041
  $178 = _bitshift64Shl($161 | 0, $162 | 0, 63) | 0; //@line 5043
  $179 = tempRet0; //@line 5044
  $180 = _bitshift64Lshr($159 | 0, $160 | 0, 1) | 0; //@line 5045
  $182 = $178 | $180; //@line 5047
  $183 = $179 | tempRet0; //@line 5048
  $184 = _bitshift64Lshr($161 | 0, $164 | 0, 1) | 0; //@line 5049
  $187 = $176 & -520093696 ^ tempRet0; //@line 5052
  $189 = $0 + 80 | 0; //@line 5054
  HEAP32[$189 >> 2] = $182; //@line 5056
  HEAP32[$189 + 4 >> 2] = $183; //@line 5059
  $194 = $0 + 208 | 0; //@line 5061
  HEAP32[$194 >> 2] = $184; //@line 5063
  HEAP32[$194 + 4 >> 2] = $187; //@line 5066
  $198 = $184 ^ $161; //@line 5067
  $199 = $187 ^ $164; //@line 5068
  $201 = $0 + 224 | 0; //@line 5070
  HEAP32[$201 >> 2] = $198; //@line 5072
  HEAP32[$201 + 4 >> 2] = $199; //@line 5075
  $205 = $182 ^ $159; //@line 5076
  $206 = $183 ^ $160; //@line 5077
  $208 = $0 + 96 | 0; //@line 5079
  HEAP32[$208 >> 2] = $205; //@line 5081
  HEAP32[$208 + 4 >> 2] = $206; //@line 5084
  $212 = $184 ^ $138; //@line 5085
  $213 = $187 ^ $141; //@line 5086
  $215 = $0 + 240 | 0; //@line 5088
  HEAP32[$215 >> 2] = $212; //@line 5090
  HEAP32[$215 + 4 >> 2] = $213; //@line 5093
  $219 = $182 ^ $136; //@line 5094
  $220 = $183 ^ $137; //@line 5095
  $222 = $0 + 112 | 0; //@line 5097
  HEAP32[$222 >> 2] = $219; //@line 5099
  HEAP32[$222 + 4 >> 2] = $220; //@line 5102
  $226 = $161 ^ $138; //@line 5103
  $227 = $164 ^ $141; //@line 5104
  $229 = $0 + 248 | 0; //@line 5106
  HEAP32[$229 >> 2] = $226; //@line 5108
  HEAP32[$229 + 4 >> 2] = $227; //@line 5111
  $233 = $159 ^ $136; //@line 5112
  $234 = $160 ^ $137; //@line 5113
  $236 = $0 + 120 | 0; //@line 5115
  HEAP32[$236 >> 2] = $233; //@line 5117
  HEAP32[$236 + 4 >> 2] = $234; //@line 5120
  $240 = $198 ^ $138; //@line 5121
  $241 = $199 ^ $141; //@line 5122
  $243 = $0 + 256 | 0; //@line 5124
  HEAP32[$243 >> 2] = $240; //@line 5126
  HEAP32[$243 + 4 >> 2] = $241; //@line 5129
  $247 = $205 ^ $136; //@line 5130
  $248 = $206 ^ $137; //@line 5131
  $250 = $0 + 128 | 0; //@line 5133
  HEAP32[$250 >> 2] = $247; //@line 5135
  HEAP32[$250 + 4 >> 2] = $248; //@line 5138
  $257 = $0 + 272 | 0; //@line 5142
  HEAP32[$257 >> 2] = $184 ^ $72; //@line 5144
  HEAP32[$257 + 4 >> 2] = $187 ^ $54; //@line 5147
  $264 = $0 + 144 | 0; //@line 5151
  HEAP32[$264 >> 2] = $182 ^ $108; //@line 5153
  HEAP32[$264 + 4 >> 2] = $183 ^ $90; //@line 5156
  $271 = $0 + 280 | 0; //@line 5160
  HEAP32[$271 >> 2] = $161 ^ $72; //@line 5162
  HEAP32[$271 + 4 >> 2] = $164 ^ $54; //@line 5165
  $278 = $0 + 152 | 0; //@line 5169
  HEAP32[$278 >> 2] = $159 ^ $108; //@line 5171
  HEAP32[$278 + 4 >> 2] = $160 ^ $90; //@line 5174
  $285 = $0 + 288 | 0; //@line 5178
  HEAP32[$285 >> 2] = $198 ^ $72; //@line 5180
  HEAP32[$285 + 4 >> 2] = $199 ^ $54; //@line 5183
  $292 = $0 + 160 | 0; //@line 5187
  HEAP32[$292 >> 2] = $205 ^ $108; //@line 5189
  HEAP32[$292 + 4 >> 2] = $206 ^ $90; //@line 5192
  $299 = $0 + 296 | 0; //@line 5196
  HEAP32[$299 >> 2] = $138 ^ $72; //@line 5198
  HEAP32[$299 + 4 >> 2] = $141 ^ $54; //@line 5201
  $306 = $0 + 168 | 0; //@line 5205
  HEAP32[$306 >> 2] = $136 ^ $108; //@line 5207
  HEAP32[$306 + 4 >> 2] = $137 ^ $90; //@line 5210
  $313 = $0 + 304 | 0; //@line 5214
  HEAP32[$313 >> 2] = $212 ^ $72; //@line 5216
  HEAP32[$313 + 4 >> 2] = $213 ^ $54; //@line 5219
  $320 = $0 + 176 | 0; //@line 5223
  HEAP32[$320 >> 2] = $219 ^ $108; //@line 5225
  HEAP32[$320 + 4 >> 2] = $220 ^ $90; //@line 5228
  $327 = $0 + 312 | 0; //@line 5232
  HEAP32[$327 >> 2] = $226 ^ $72; //@line 5234
  HEAP32[$327 + 4 >> 2] = $227 ^ $54; //@line 5237
  $334 = $0 + 184 | 0; //@line 5241
  HEAP32[$334 >> 2] = $233 ^ $108; //@line 5243
  HEAP32[$334 + 4 >> 2] = $234 ^ $90; //@line 5246
  $341 = $0 + 320 | 0; //@line 5250
  HEAP32[$341 >> 2] = $240 ^ $72; //@line 5252
  HEAP32[$341 + 4 >> 2] = $241 ^ $54; //@line 5255
  $348 = $0 + 192 | 0; //@line 5259
  HEAP32[$348 >> 2] = $247 ^ $108; //@line 5261
  HEAP32[$348 + 4 >> 2] = $248 ^ $90; //@line 5264
  $$0$i = 0; //@line 5265
 } else {
  $$0$i = $32; //@line 5267
 }
 $$0 = $$0$i; //@line 5269
 STACKTOP = sp; //@line 5270
 return $$0 | 0; //@line 5270
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $103 = 0, $104 = 0, $108 = 0, $11 = 0, $110 = 0, $115 = 0, $116 = 0, $119 = 0, $122 = 0, $13 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $25 = 0, $33 = 0, $4 = 0, $41 = 0, $53 = 0, $54 = 0, $58 = 0, $6 = 0, $60 = 0, $69 = 0, $7 = 0, $70 = 0, $77 = 0, $80 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx21 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7074
 STACKTOP = STACKTOP + 64 | 0; //@line 7075
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 7075
 $vararg_buffer3 = sp + 24 | 0; //@line 7076
 $vararg_buffer1 = sp + 16 | 0; //@line 7077
 $vararg_buffer = sp; //@line 7078
 $1 = sp + 40 | 0; //@line 7079
 $2 = __ZNK7LoRaMac19get_mcps_indicationEv($0) | 0; //@line 7080
 $4 = HEAP32[$2 + 8 >> 2] | 0; //@line 7082
 if ($4 | 0) {
  HEAP32[$vararg_buffer >> 2] = $4; //@line 7085
  _mbed_tracef(2, 12482, 12487, $vararg_buffer); //@line 7086
  $6 = $0 + 2496 | 0; //@line 7087
  $7 = HEAP32[$6 >> 2] | 0; //@line 7088
  do {
   if ($7 | 0) {
    $11 = HEAP32[$0 + 3136 >> 2] | 0; //@line 7094
    $13 = HEAP32[$7 + 4 >> 2] | 0; //@line 7096
    $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 7097
    FUNCTION_TABLE_vii[$13 & 15]($vararg_buffer, $0 + 2484 | 0); //@line 7098
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 239; //@line 7101
     HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 7103
     HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 7105
     HEAP32[$AsyncCtx + 12 >> 2] = $11; //@line 7107
     HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer; //@line 7109
     sp = STACKTOP; //@line 7110
     STACKTOP = sp; //@line 7111
     return;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7113
    $18 = $vararg_buffer + 12 | 0; //@line 7115
    HEAP32[$18 >> 2] = HEAP32[$6 >> 2]; //@line 7116
    $AsyncCtx30 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7117
    $19 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($11, $vararg_buffer, 9) | 0; //@line 7118
    if (___async) {
     HEAP32[$AsyncCtx30 >> 2] = 240; //@line 7121
     HEAP32[$AsyncCtx30 + 4 >> 2] = $18; //@line 7123
     HEAP32[$AsyncCtx30 + 8 >> 2] = $vararg_buffer; //@line 7125
     sp = STACKTOP; //@line 7126
     STACKTOP = sp; //@line 7127
     return;
    }
    _emscripten_free_async_context($AsyncCtx30 | 0); //@line 7129
    $22 = HEAP32[$18 >> 2] | 0; //@line 7130
    do {
     if ($22 | 0) {
      $25 = HEAP32[$22 + 8 >> 2] | 0; //@line 7135
      $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7136
      FUNCTION_TABLE_vi[$25 & 1023]($vararg_buffer); //@line 7137
      if (___async) {
       HEAP32[$AsyncCtx7 >> 2] = 241; //@line 7140
       HEAP32[$AsyncCtx7 + 4 >> 2] = $19; //@line 7142
       HEAP32[$AsyncCtx7 + 8 >> 2] = $vararg_buffer; //@line 7144
       sp = STACKTOP; //@line 7145
       STACKTOP = sp; //@line 7146
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx7 | 0); //@line 7148
       break;
      }
     }
    } while (0);
    if (!$19) {
     $AsyncCtx42 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7155
     _mbed_assert_internal(13097, 12384, 646); //@line 7156
     if (___async) {
      HEAP32[$AsyncCtx42 >> 2] = 242; //@line 7159
      HEAP32[$AsyncCtx42 + 4 >> 2] = $vararg_buffer; //@line 7161
      sp = STACKTOP; //@line 7162
      STACKTOP = sp; //@line 7163
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx42 | 0); //@line 7165
      break;
     }
    }
   }
  } while (0);
  STACKTOP = sp; //@line 7171
  return;
 }
 HEAP32[$0 + 2540 >> 2] = HEAP32[$2 + 36 >> 2]; //@line 7176
 $33 = $2 + 13 | 0; //@line 7177
 if ((HEAP8[$33 >> 0] | 0) == -32) {
  _mbed_tracef(8, 12482, 12525, $vararg_buffer1); //@line 7181
  STACKTOP = sp; //@line 7182
  return;
 }
 if (HEAP8[$2 + 22 >> 0] | 0) {
  HEAP32[$0 + 2820 >> 2] = 2; //@line 7189
  $41 = HEAP16[$2 + 20 >> 1] | 0; //@line 7191
  HEAP16[$0 + 2844 >> 1] = $41; //@line 7193
  HEAP8[$0 + 2837 >> 0] = HEAP8[$33 >> 0] | 0; //@line 7196
  HEAP32[$0 + 2840 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 7200
  HEAP32[$0 + 2828 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 7204
  HEAP32[$vararg_buffer3 >> 2] = $41 & 65535; //@line 7206
  _mbed_tracef(16, 12482, 12551, $vararg_buffer3); //@line 7207
  HEAP8[$0 + 2816 >> 0] = 1; //@line 7209
  $53 = $0 + 2496 | 0; //@line 7210
  $54 = HEAP32[$53 >> 2] | 0; //@line 7211
  do {
   if ($54 | 0) {
    $58 = HEAP32[$0 + 3136 >> 2] | 0; //@line 7217
    $60 = HEAP32[$54 + 4 >> 2] | 0; //@line 7219
    $AsyncCtx10 = _emscripten_alloc_async_context(36, sp) | 0; //@line 7220
    FUNCTION_TABLE_vii[$60 & 15]($vararg_buffer3, $0 + 2484 | 0); //@line 7221
    if (___async) {
     HEAP32[$AsyncCtx10 >> 2] = 243; //@line 7224
     HEAP32[$AsyncCtx10 + 4 >> 2] = $53; //@line 7226
     HEAP32[$AsyncCtx10 + 8 >> 2] = $vararg_buffer3; //@line 7228
     HEAP32[$AsyncCtx10 + 12 >> 2] = $58; //@line 7230
     HEAP32[$AsyncCtx10 + 16 >> 2] = $1; //@line 7232
     HEAP32[$AsyncCtx10 + 20 >> 2] = $vararg_buffer3; //@line 7234
     HEAP32[$AsyncCtx10 + 24 >> 2] = $0; //@line 7236
     HEAP32[$AsyncCtx10 + 28 >> 2] = $2; //@line 7238
     HEAP32[$AsyncCtx10 + 32 >> 2] = $0; //@line 7240
     sp = STACKTOP; //@line 7241
     STACKTOP = sp; //@line 7242
     return;
    }
    _emscripten_free_async_context($AsyncCtx10 | 0); //@line 7244
    $69 = $vararg_buffer3 + 12 | 0; //@line 7246
    HEAP32[$69 >> 2] = HEAP32[$53 >> 2]; //@line 7247
    $AsyncCtx27 = _emscripten_alloc_async_context(28, sp) | 0; //@line 7248
    $70 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($58, $vararg_buffer3, 7) | 0; //@line 7249
    if (___async) {
     HEAP32[$AsyncCtx27 >> 2] = 244; //@line 7252
     HEAP32[$AsyncCtx27 + 4 >> 2] = $1; //@line 7254
     HEAP32[$AsyncCtx27 + 8 >> 2] = $vararg_buffer3; //@line 7256
     HEAP32[$AsyncCtx27 + 12 >> 2] = $0; //@line 7258
     HEAP32[$AsyncCtx27 + 16 >> 2] = $2; //@line 7260
     HEAP32[$AsyncCtx27 + 20 >> 2] = $0; //@line 7262
     HEAP32[$AsyncCtx27 + 24 >> 2] = $69; //@line 7264
     sp = STACKTOP; //@line 7265
     STACKTOP = sp; //@line 7266
     return;
    }
    _emscripten_free_async_context($AsyncCtx27 | 0); //@line 7268
    $77 = HEAP32[$69 >> 2] | 0; //@line 7269
    do {
     if ($77 | 0) {
      $80 = HEAP32[$77 + 8 >> 2] | 0; //@line 7274
      $AsyncCtx14 = _emscripten_alloc_async_context(28, sp) | 0; //@line 7275
      FUNCTION_TABLE_vi[$80 & 1023]($vararg_buffer3); //@line 7276
      if (___async) {
       HEAP32[$AsyncCtx14 >> 2] = 245; //@line 7279
       HEAP32[$AsyncCtx14 + 4 >> 2] = $1; //@line 7281
       HEAP32[$AsyncCtx14 + 8 >> 2] = $vararg_buffer3; //@line 7283
       HEAP32[$AsyncCtx14 + 12 >> 2] = $0; //@line 7285
       HEAP32[$AsyncCtx14 + 16 >> 2] = $2; //@line 7287
       HEAP32[$AsyncCtx14 + 20 >> 2] = $0; //@line 7289
       HEAP32[$AsyncCtx14 + 24 >> 2] = $70; //@line 7291
       sp = STACKTOP; //@line 7292
       STACKTOP = sp; //@line 7293
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx14 | 0); //@line 7295
       break;
      }
     }
    } while (0);
    if (!$70) {
     $AsyncCtx38 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7302
     _mbed_assert_internal(13097, 12384, 646); //@line 7303
     if (___async) {
      HEAP32[$AsyncCtx38 >> 2] = 246; //@line 7306
      HEAP32[$AsyncCtx38 + 4 >> 2] = $1; //@line 7308
      HEAP32[$AsyncCtx38 + 8 >> 2] = $vararg_buffer3; //@line 7310
      HEAP32[$AsyncCtx38 + 12 >> 2] = $0; //@line 7312
      HEAP32[$AsyncCtx38 + 16 >> 2] = $2; //@line 7314
      HEAP32[$AsyncCtx38 + 20 >> 2] = $0; //@line 7316
      sp = STACKTOP; //@line 7317
      STACKTOP = sp; //@line 7318
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx38 | 0); //@line 7320
      break;
     }
    }
   }
  } while (0);
 }
 if ((__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2) {
  label = 35; //@line 7330
 } else {
  if (!(HEAP8[$2 + 15 >> 0] | 0)) {
   label = 35; //@line 7336
  }
 }
 if ((label | 0) == 35) {
  if ((__ZNK7LoRaMac16get_device_classEv($0) | 0) != 2) {
   STACKTOP = sp; //@line 7343
   return;
  }
  if ((HEAP32[$2 + 4 >> 2] | 0) != 1) {
   STACKTOP = sp; //@line 7349
   return;
  }
 }
 $103 = $0 + 2496 | 0; //@line 7352
 $104 = HEAP32[$103 >> 2] | 0; //@line 7353
 do {
  if ($104 | 0) {
   $108 = HEAP32[$0 + 3136 >> 2] | 0; //@line 7359
   $110 = HEAP32[$104 + 4 >> 2] | 0; //@line 7361
   $AsyncCtx17 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7362
   FUNCTION_TABLE_vii[$110 & 15]($1, $0 + 2484 | 0); //@line 7363
   if (___async) {
    HEAP32[$AsyncCtx17 >> 2] = 247; //@line 7366
    HEAP32[$AsyncCtx17 + 4 >> 2] = $103; //@line 7368
    HEAP32[$AsyncCtx17 + 8 >> 2] = $1; //@line 7370
    HEAP32[$AsyncCtx17 + 12 >> 2] = $108; //@line 7372
    HEAP32[$AsyncCtx17 + 16 >> 2] = $1; //@line 7374
    sp = STACKTOP; //@line 7375
    STACKTOP = sp; //@line 7376
    return;
   }
   _emscripten_free_async_context($AsyncCtx17 | 0); //@line 7378
   $115 = $1 + 12 | 0; //@line 7380
   HEAP32[$115 >> 2] = HEAP32[$103 >> 2]; //@line 7381
   $AsyncCtx24 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7382
   $116 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($108, $1, 11) | 0; //@line 7383
   if (___async) {
    HEAP32[$AsyncCtx24 >> 2] = 248; //@line 7386
    HEAP32[$AsyncCtx24 + 4 >> 2] = $115; //@line 7388
    HEAP32[$AsyncCtx24 + 8 >> 2] = $1; //@line 7390
    sp = STACKTOP; //@line 7391
    STACKTOP = sp; //@line 7392
    return;
   }
   _emscripten_free_async_context($AsyncCtx24 | 0); //@line 7394
   $119 = HEAP32[$115 >> 2] | 0; //@line 7395
   do {
    if ($119 | 0) {
     $122 = HEAP32[$119 + 8 >> 2] | 0; //@line 7400
     $AsyncCtx21 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7401
     FUNCTION_TABLE_vi[$122 & 1023]($1); //@line 7402
     if (___async) {
      HEAP32[$AsyncCtx21 >> 2] = 249; //@line 7405
      HEAP32[$AsyncCtx21 + 4 >> 2] = $116; //@line 7407
      HEAP32[$AsyncCtx21 + 8 >> 2] = $1; //@line 7409
      sp = STACKTOP; //@line 7410
      STACKTOP = sp; //@line 7411
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx21 | 0); //@line 7413
      break;
     }
    }
   } while (0);
   if (!$116) {
    $AsyncCtx34 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7420
    _mbed_assert_internal(13097, 12384, 646); //@line 7421
    if (___async) {
     HEAP32[$AsyncCtx34 >> 2] = 250; //@line 7424
     HEAP32[$AsyncCtx34 + 4 >> 2] = $1; //@line 7426
     sp = STACKTOP; //@line 7427
     STACKTOP = sp; //@line 7428
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx34 | 0); //@line 7430
     break;
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 7436
 return;
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $83 = 0, $88 = 0, $89 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 25323
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25325
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25327
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25329
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25331
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25333
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25335
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25337
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 25339
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 25341
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 25343
 if (HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($2) | 0) >> 0] | 0) {
  __ZN7LoRaMac25post_process_mlme_requestEv($2); //@line 25348
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(44) | 0; //@line 25349
  __ZN12LoRaWANStack20mlme_confirm_handlerEv($4); //@line 25350
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 276; //@line 25353
   $24 = $ReallocAsyncCtx3 + 4 | 0; //@line 25354
   HEAP32[$24 >> 2] = $2; //@line 25355
   $25 = $ReallocAsyncCtx3 + 8 | 0; //@line 25356
   HEAP32[$25 >> 2] = $6; //@line 25357
   $26 = $ReallocAsyncCtx3 + 12 | 0; //@line 25358
   HEAP32[$26 >> 2] = $8; //@line 25359
   $27 = $ReallocAsyncCtx3 + 16 | 0; //@line 25360
   HEAP32[$27 >> 2] = $10; //@line 25361
   $28 = $ReallocAsyncCtx3 + 20 | 0; //@line 25362
   HEAP32[$28 >> 2] = $4; //@line 25363
   $29 = $ReallocAsyncCtx3 + 24 | 0; //@line 25364
   HEAP32[$29 >> 2] = $12; //@line 25365
   $30 = $ReallocAsyncCtx3 + 28 | 0; //@line 25366
   HEAP32[$30 >> 2] = $14; //@line 25367
   $31 = $ReallocAsyncCtx3 + 32 | 0; //@line 25368
   HEAP32[$31 >> 2] = $16; //@line 25369
   $32 = $ReallocAsyncCtx3 + 36 | 0; //@line 25370
   HEAP32[$32 >> 2] = $18; //@line 25371
   $33 = $ReallocAsyncCtx3 + 40 | 0; //@line 25372
   HEAP32[$33 >> 2] = $20; //@line 25373
   sp = STACKTOP; //@line 25374
   return;
  }
  ___async_unwind = 0; //@line 25377
  HEAP32[$ReallocAsyncCtx3 >> 2] = 276; //@line 25378
  $24 = $ReallocAsyncCtx3 + 4 | 0; //@line 25379
  HEAP32[$24 >> 2] = $2; //@line 25380
  $25 = $ReallocAsyncCtx3 + 8 | 0; //@line 25381
  HEAP32[$25 >> 2] = $6; //@line 25382
  $26 = $ReallocAsyncCtx3 + 12 | 0; //@line 25383
  HEAP32[$26 >> 2] = $8; //@line 25384
  $27 = $ReallocAsyncCtx3 + 16 | 0; //@line 25385
  HEAP32[$27 >> 2] = $10; //@line 25386
  $28 = $ReallocAsyncCtx3 + 20 | 0; //@line 25387
  HEAP32[$28 >> 2] = $4; //@line 25388
  $29 = $ReallocAsyncCtx3 + 24 | 0; //@line 25389
  HEAP32[$29 >> 2] = $12; //@line 25390
  $30 = $ReallocAsyncCtx3 + 28 | 0; //@line 25391
  HEAP32[$30 >> 2] = $14; //@line 25392
  $31 = $ReallocAsyncCtx3 + 32 | 0; //@line 25393
  HEAP32[$31 >> 2] = $16; //@line 25394
  $32 = $ReallocAsyncCtx3 + 36 | 0; //@line 25395
  HEAP32[$32 >> 2] = $18; //@line 25396
  $33 = $ReallocAsyncCtx3 + 40 | 0; //@line 25397
  HEAP32[$33 >> 2] = $20; //@line 25398
  sp = STACKTOP; //@line 25399
  return;
 }
 if (!(__ZN7LoRaMac10nwk_joinedEv($2) | 0)) {
  $89 = $4 + 2879 | 0; //@line 25404
  HEAP8[$89 >> 0] = 1; //@line 25405
  return;
 }
 if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($2) | 0) >> 2] | 0) != 1) {
  __ZN7LoRaMac21post_process_mcps_reqEv($2); //@line 25412
  HEAP32[$10 >> 2] = HEAP32[$10 >> 2] | 16; //@line 25415
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 25416
  __ZN12LoRaWANStack26process_status_check_stateEv($4); //@line 25417
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 278; //@line 25420
   $58 = $ReallocAsyncCtx5 + 4 | 0; //@line 25421
   HEAP32[$58 >> 2] = $2; //@line 25422
   $59 = $ReallocAsyncCtx5 + 8 | 0; //@line 25423
   HEAP32[$59 >> 2] = $10; //@line 25424
   $60 = $ReallocAsyncCtx5 + 12 | 0; //@line 25425
   HEAP32[$60 >> 2] = $4; //@line 25426
   $61 = $ReallocAsyncCtx5 + 16 | 0; //@line 25427
   HEAP32[$61 >> 2] = $20; //@line 25428
   $62 = $ReallocAsyncCtx5 + 20 | 0; //@line 25429
   HEAP32[$62 >> 2] = $12; //@line 25430
   $63 = $ReallocAsyncCtx5 + 24 | 0; //@line 25431
   HEAP32[$63 >> 2] = $14; //@line 25432
   $64 = $ReallocAsyncCtx5 + 28 | 0; //@line 25433
   HEAP32[$64 >> 2] = $16; //@line 25434
   $65 = $ReallocAsyncCtx5 + 32 | 0; //@line 25435
   HEAP32[$65 >> 2] = $18; //@line 25436
   sp = STACKTOP; //@line 25437
   return;
  }
  ___async_unwind = 0; //@line 25440
  HEAP32[$ReallocAsyncCtx5 >> 2] = 278; //@line 25441
  $58 = $ReallocAsyncCtx5 + 4 | 0; //@line 25442
  HEAP32[$58 >> 2] = $2; //@line 25443
  $59 = $ReallocAsyncCtx5 + 8 | 0; //@line 25444
  HEAP32[$59 >> 2] = $10; //@line 25445
  $60 = $ReallocAsyncCtx5 + 12 | 0; //@line 25446
  HEAP32[$60 >> 2] = $4; //@line 25447
  $61 = $ReallocAsyncCtx5 + 16 | 0; //@line 25448
  HEAP32[$61 >> 2] = $20; //@line 25449
  $62 = $ReallocAsyncCtx5 + 20 | 0; //@line 25450
  HEAP32[$62 >> 2] = $12; //@line 25451
  $63 = $ReallocAsyncCtx5 + 24 | 0; //@line 25452
  HEAP32[$63 >> 2] = $14; //@line 25453
  $64 = $ReallocAsyncCtx5 + 28 | 0; //@line 25454
  HEAP32[$64 >> 2] = $16; //@line 25455
  $65 = $ReallocAsyncCtx5 + 32 | 0; //@line 25456
  HEAP32[$65 >> 2] = $18; //@line 25457
  sp = STACKTOP; //@line 25458
  return;
 }
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) + 32 >> 0] | 0) {
  HEAP32[$6 >> 2] = HEAPU8[(__ZNK7LoRaMac21get_mcps_confirmationEv($2) | 0) + 11 >> 0]; //@line 25470
  _mbed_tracef(16, 12482, 12647, $6); //@line 25471
  __ZN7LoRaMac21post_process_mcps_reqEv($2); //@line 25472
  HEAP32[$10 >> 2] = HEAP32[$10 >> 2] | 16; //@line 25475
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(36) | 0; //@line 25476
  __ZN12LoRaWANStack26process_status_check_stateEv($4); //@line 25477
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 277; //@line 25480
   $48 = $ReallocAsyncCtx6 + 4 | 0; //@line 25481
   HEAP32[$48 >> 2] = $2; //@line 25482
   $49 = $ReallocAsyncCtx6 + 8 | 0; //@line 25483
   HEAP32[$49 >> 2] = $10; //@line 25484
   $50 = $ReallocAsyncCtx6 + 12 | 0; //@line 25485
   HEAP32[$50 >> 2] = $4; //@line 25486
   $51 = $ReallocAsyncCtx6 + 16 | 0; //@line 25487
   HEAP32[$51 >> 2] = $20; //@line 25488
   $52 = $ReallocAsyncCtx6 + 20 | 0; //@line 25489
   HEAP32[$52 >> 2] = $12; //@line 25490
   $53 = $ReallocAsyncCtx6 + 24 | 0; //@line 25491
   HEAP32[$53 >> 2] = $14; //@line 25492
   $54 = $ReallocAsyncCtx6 + 28 | 0; //@line 25493
   HEAP32[$54 >> 2] = $16; //@line 25494
   $55 = $ReallocAsyncCtx6 + 32 | 0; //@line 25495
   HEAP32[$55 >> 2] = $18; //@line 25496
   sp = STACKTOP; //@line 25497
   return;
  }
  ___async_unwind = 0; //@line 25500
  HEAP32[$ReallocAsyncCtx6 >> 2] = 277; //@line 25501
  $48 = $ReallocAsyncCtx6 + 4 | 0; //@line 25502
  HEAP32[$48 >> 2] = $2; //@line 25503
  $49 = $ReallocAsyncCtx6 + 8 | 0; //@line 25504
  HEAP32[$49 >> 2] = $10; //@line 25505
  $50 = $ReallocAsyncCtx6 + 12 | 0; //@line 25506
  HEAP32[$50 >> 2] = $4; //@line 25507
  $51 = $ReallocAsyncCtx6 + 16 | 0; //@line 25508
  HEAP32[$51 >> 2] = $20; //@line 25509
  $52 = $ReallocAsyncCtx6 + 20 | 0; //@line 25510
  HEAP32[$52 >> 2] = $12; //@line 25511
  $53 = $ReallocAsyncCtx6 + 24 | 0; //@line 25512
  HEAP32[$53 >> 2] = $14; //@line 25513
  $54 = $ReallocAsyncCtx6 + 28 | 0; //@line 25514
  HEAP32[$54 >> 2] = $16; //@line 25515
  $55 = $ReallocAsyncCtx6 + 32 | 0; //@line 25516
  HEAP32[$55 >> 2] = $18; //@line 25517
  sp = STACKTOP; //@line 25518
  return;
 }
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) >> 0] | 0) {
  __ZN7LoRaMac21post_process_mcps_indEv($2); //@line 25525
  HEAP32[$10 >> 2] = HEAP32[$10 >> 2] | 2; //@line 25528
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 25529
  __ZN12LoRaWANStack26process_status_check_stateEv($4); //@line 25530
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 279; //@line 25533
   $71 = $ReallocAsyncCtx4 + 4 | 0; //@line 25534
   HEAP32[$71 >> 2] = $10; //@line 25535
   $72 = $ReallocAsyncCtx4 + 8 | 0; //@line 25536
   HEAP32[$72 >> 2] = $2; //@line 25537
   $73 = $ReallocAsyncCtx4 + 12 | 0; //@line 25538
   HEAP32[$73 >> 2] = $20; //@line 25539
   $74 = $ReallocAsyncCtx4 + 16 | 0; //@line 25540
   HEAP32[$74 >> 2] = $4; //@line 25541
   $75 = $ReallocAsyncCtx4 + 20 | 0; //@line 25542
   HEAP32[$75 >> 2] = $12; //@line 25543
   $76 = $ReallocAsyncCtx4 + 24 | 0; //@line 25544
   HEAP32[$76 >> 2] = $14; //@line 25545
   $77 = $ReallocAsyncCtx4 + 28 | 0; //@line 25546
   HEAP32[$77 >> 2] = $16; //@line 25547
   $78 = $ReallocAsyncCtx4 + 32 | 0; //@line 25548
   HEAP32[$78 >> 2] = $18; //@line 25549
   sp = STACKTOP; //@line 25550
   return;
  }
  ___async_unwind = 0; //@line 25553
  HEAP32[$ReallocAsyncCtx4 >> 2] = 279; //@line 25554
  $71 = $ReallocAsyncCtx4 + 4 | 0; //@line 25555
  HEAP32[$71 >> 2] = $10; //@line 25556
  $72 = $ReallocAsyncCtx4 + 8 | 0; //@line 25557
  HEAP32[$72 >> 2] = $2; //@line 25558
  $73 = $ReallocAsyncCtx4 + 12 | 0; //@line 25559
  HEAP32[$73 >> 2] = $20; //@line 25560
  $74 = $ReallocAsyncCtx4 + 16 | 0; //@line 25561
  HEAP32[$74 >> 2] = $4; //@line 25562
  $75 = $ReallocAsyncCtx4 + 20 | 0; //@line 25563
  HEAP32[$75 >> 2] = $12; //@line 25564
  $76 = $ReallocAsyncCtx4 + 24 | 0; //@line 25565
  HEAP32[$76 >> 2] = $14; //@line 25566
  $77 = $ReallocAsyncCtx4 + 28 | 0; //@line 25567
  HEAP32[$77 >> 2] = $16; //@line 25568
  $78 = $ReallocAsyncCtx4 + 32 | 0; //@line 25569
  HEAP32[$78 >> 2] = $18; //@line 25570
  sp = STACKTOP; //@line 25571
  return;
 }
 if (!(HEAP32[$10 >> 2] & 1)) {
  $83 = (__ZNK7LoRaMac16get_device_classEv($2) | 0) == 2; //@line 25579
  HEAP32[$20 >> 2] = $83 ? 5 : 2; //@line 25581
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($2) | 0) + 4 >> 0] | 0)) {
  $89 = $4 + 2879 | 0; //@line 25588
  HEAP8[$89 >> 0] = 1; //@line 25589
  return;
 }
 _mbed_tracef(16, 12482, 12667, $12); //@line 25592
 __ZN7LoRaMac21post_process_mlme_indEv($2); //@line 25593
 _mbed_tracef(16, 12482, 12691, $16); //@line 25594
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 25595
 __ZN12LoRaWANStack23mlme_indication_handlerEv($4); //@line 25596
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 280; //@line 25599
  $88 = $ReallocAsyncCtx2 + 4 | 0; //@line 25600
  HEAP32[$88 >> 2] = $4; //@line 25601
  sp = STACKTOP; //@line 25602
  return;
 }
 ___async_unwind = 0; //@line 25605
 HEAP32[$ReallocAsyncCtx2 >> 2] = 280; //@line 25606
 $88 = $ReallocAsyncCtx2 + 4 | 0; //@line 25607
 HEAP32[$88 >> 2] = $4; //@line 25608
 sp = STACKTOP; //@line 25609
 return;
}
function __ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$130$$$i = 0, $$026$$$026$i = 0, $$026$i = 0, $$028$i = 0, $$028$lcssa = 0, $$02864 = 0, $$029$be = 0, $$029$lcssa = 0, $$02963 = 0, $$1 = 0, $$2$i = 0, $$258 = 0, $$3 = 0, $$452 = 0, $$lcssa78 = 0, $$lcssa79 = 0, $$pre = 0, $$sroa$035$0$lcssa = 0, $$sroa$035$060 = 0, $$sroa$035$349 = 0, $$sroa$11$0$lcssa = 0, $$sroa$11$062 = 0, $$sroa$11$351 = 0, $$sroa$637$0$lcssa = 0, $$sroa$637$061 = 0, $$sroa$637$350 = 0, $10 = 0, $100 = 0, $101 = 0, $107 = 0, $11 = 0, $116 = 0, $12 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $13 = 0, $131 = 0, $135 = 0, $136 = 0, $140 = 0, $17 = 0, $18 = 0, $19 = 0, $27 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $42 = 0, $45 = 0, $52 = 0, $66 = 0, $7 = 0, $79 = 0, $81 = 0, $9 = 0, $93 = 0, $97 = 0, $99 = 0, $indvars$iv = 0, $indvars$iv$i = 0, $indvars$iv$i31 = 0, $indvars$iv82 = 0, $not$or$cond$i$i = 0, $wide$trip$count$i = 0, label = 0;
 $7 = HEAP8[$1 + 4 >> 0] | 0; //@line 19852
 L1 : do {
  if (!($7 << 24 >> 24)) {
   $$028$lcssa = 0; //@line 19856
   $$029$lcssa = 7; //@line 19856
   $$sroa$035$0$lcssa = 0; //@line 19856
   $$sroa$11$0$lcssa = 0; //@line 19856
   $$sroa$637$0$lcssa = 0; //@line 19856
   $101 = 0; //@line 19856
  } else {
   $9 = HEAP32[$1 >> 2] | 0; //@line 19858
   $10 = $0 + 20 | 0; //@line 19859
   $11 = $0 + 124 | 0; //@line 19860
   $$02864 = 0; //@line 19861
   $$02963 = 7; //@line 19861
   $$lcssa78 = 0; //@line 19861
   $$sroa$035$060 = 0; //@line 19861
   $$sroa$11$062 = 0; //@line 19861
   $$sroa$637$061 = 0; //@line 19861
   $13 = 0; //@line 19861
   while (1) {
    $12 = $9 + $13 | 0; //@line 19863
    if ((HEAP8[$12 >> 0] | 0) != 3) {
     $$028$lcssa = $$02864; //@line 19867
     $$029$lcssa = $$02963; //@line 19867
     $$sroa$035$0$lcssa = $$sroa$035$060; //@line 19867
     $$sroa$11$0$lcssa = $$sroa$11$062; //@line 19867
     $$sroa$637$0$lcssa = $$sroa$637$061; //@line 19867
     $101 = $$lcssa78; //@line 19867
     break L1;
    }
    $17 = HEAP8[$12 + 1 >> 0] | 0; //@line 19871
    $18 = $17 & 15; //@line 19872
    $19 = ($17 & 255) >>> 4; //@line 19873
    $27 = HEAPU8[$12 + 3 >> 0] << 8 | HEAPU8[$12 + 2 >> 0]; //@line 19881
    $28 = $27 & 65535; //@line 19882
    $30 = HEAP8[$12 + 4 >> 0] | 0; //@line 19884
    $32 = ($30 & 255) >>> 4; //@line 19886
    $34 = $32 & 7; //@line 19888
    $35 = $30 & 15; //@line 19889
    $36 = $13 + 5 | 0; //@line 19890
    $37 = $36 & 255; //@line 19891
    $$1 = $28 << 16 >> 16 == 0 & $34 << 24 >> 24 == 0 ? 6 : 7; //@line 19895
    L6 : do {
     switch ($32 & 7) {
     case 6:
     case 0:
      {
       $42 = HEAP8[$10 >> 0] | 0; //@line 19901
       if (!($42 << 24 >> 24)) {
        $$029$be = $$1; //@line 19904
        $$lcssa79 = $28; //@line 19904
       } else {
        $45 = $42 & 255; //@line 19907
        if ($34 << 24 >> 24 != 6) {
         $$258 = $$1; //@line 19909
         $indvars$iv = 0; //@line 19909
         while (1) {
          if (!($27 & 1 << ($indvars$iv & 15))) {
           $$3 = $$258; //@line 19916
          } else {
           $$3 = (HEAP32[(HEAP32[$11 >> 2] | 0) + ($indvars$iv * 12 | 0) >> 2] | 0) == 0 ? $$258 & -2 : $$258; //@line 19924
          }
          $indvars$iv = $indvars$iv + 1 | 0; //@line 19926
          if ($indvars$iv >>> 0 >= $45 >>> 0) {
           $$029$be = $$3; //@line 19931
           $$lcssa79 = $28; //@line 19931
           break L6;
          } else {
           $$258 = $$3; //@line 19929
          }
         }
        }
        $$pre = HEAP32[$11 >> 2] | 0; //@line 19936
        $52 = $28; //@line 19937
        $indvars$iv82 = 0; //@line 19937
        while (1) {
         if (!(HEAP32[$$pre + ($indvars$iv82 * 12 | 0) >> 2] | 0)) {
          $140 = $52; //@line 19943
         } else {
          $140 = (1 << ($indvars$iv82 & 15) | $52 & 65535) & 65535; //@line 19950
         }
         $indvars$iv82 = $indvars$iv82 + 1 | 0; //@line 19952
         if ($indvars$iv82 >>> 0 >= $45 >>> 0) {
          $$029$be = $$1; //@line 19957
          $$lcssa79 = $140; //@line 19957
          break;
         } else {
          $52 = $140; //@line 19955
         }
        }
       }
       break;
      }
     default:
      {
       $$029$be = 6; //@line 19965
       $$lcssa79 = $28; //@line 19965
      }
     }
    } while (0);
    if (($7 & 255) > ($37 & 255)) {
     $$02864 = $37; //@line 19972
     $$02963 = $$029$be; //@line 19972
     $$lcssa78 = $$lcssa79; //@line 19972
     $$sroa$035$060 = $35; //@line 19972
     $$sroa$11$062 = $18; //@line 19972
     $$sroa$637$061 = $19; //@line 19972
     $13 = $36 & 255; //@line 19972
    } else {
     $$028$lcssa = $37; //@line 19974
     $$029$lcssa = $$029$be; //@line 19974
     $$sroa$035$0$lcssa = $35; //@line 19974
     $$sroa$11$0$lcssa = $18; //@line 19974
     $$sroa$637$0$lcssa = $19; //@line 19974
     $101 = $$lcssa79; //@line 19974
     break L1;
    }
   }
  }
 } while (0);
 $66 = $$sroa$637$0$lcssa << 24 >> 24; //@line 19980
 if (($66 | 0) < (HEAPU8[$0 + 92 >> 0] | 0)) {
  if (HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + $66 >> 0] | 0) {
   $79 = HEAP8[$1 + 7 >> 0] | 0; //@line 19995
   $81 = HEAP8[$1 + 8 >> 0] | 0; //@line 19997
   if (!(HEAP8[$1 + 6 >> 0] | 0)) {
    if ($$sroa$637$0$lcssa << 24 >> 24 == 15 & $$sroa$11$0$lcssa << 24 >> 24 == 15) {
     $$026$i = $81; //@line 20006
     $$028$i = $79; //@line 20006
    } else {
     $$452 = 0; //@line 20008
     $$sroa$035$349 = HEAP8[$1 + 9 >> 0] | 0; //@line 20008
     $$sroa$11$351 = $81; //@line 20008
     $$sroa$637$350 = $79; //@line 20008
     HEAP8[$2 >> 0] = $$sroa$637$350; //@line 20009
     HEAP8[$3 >> 0] = $$sroa$11$351; //@line 20010
     HEAP8[$4 >> 0] = $$sroa$035$349; //@line 20011
     HEAP8[$5 >> 0] = $$028$lcssa; //@line 20012
     return $$452 | 0; //@line 20013
    }
   } else {
    $$026$i = $$sroa$11$0$lcssa; //@line 20016
    $$028$i = $$sroa$637$0$lcssa; //@line 20016
   }
   if (!($$029$lcssa << 24 >> 24)) {
    $$452 = 0; //@line 20020
    $$sroa$035$349 = $$sroa$035$0$lcssa; //@line 20020
    $$sroa$11$351 = $$026$i; //@line 20020
    $$sroa$637$350 = $$028$i; //@line 20020
    HEAP8[$2 >> 0] = $$sroa$637$350; //@line 20021
    HEAP8[$3 >> 0] = $$sroa$11$351; //@line 20022
    HEAP8[$4 >> 0] = $$sroa$035$349; //@line 20023
    HEAP8[$5 >> 0] = $$028$lcssa; //@line 20024
    return $$452 | 0; //@line 20025
   }
   $93 = HEAP32[$0 + 124 >> 2] | 0; //@line 20032
   L33 : do {
    if ($$028$i << 24 >> 24 >= (HEAP8[$0 + 26 >> 0] | 0) ? $$028$i << 24 >> 24 <= (HEAP8[$0 + 27 >> 0] | 0) : 0) {
     $97 = HEAP8[$0 + 20 >> 0] | 0; //@line 20039
     if (!($97 << 24 >> 24)) {
      label = 26; //@line 20042
     } else {
      $99 = $97 & 255; //@line 20044
      $100 = $101 & 65535; //@line 20045
      $indvars$iv$i31 = 0; //@line 20046
      while (1) {
       if (1 << ($indvars$iv$i31 & 15) & $100 | 0) {
        $107 = HEAP8[$93 + ($indvars$iv$i31 * 12 | 0) + 8 >> 0] | 0; //@line 20054
        if (($107 & 15) <= $$028$i << 24 >> 24 ? ($107 & 255) >>> 4 << 24 >> 24 >= $$028$i << 24 >> 24 : 0) {
         $125 = $$029$lcssa; //@line 20061
         break L33;
        }
       }
       $indvars$iv$i31 = $indvars$iv$i31 + 1 | 0; //@line 20065
       if ($indvars$iv$i31 >>> 0 >= $99 >>> 0) {
        label = 26; //@line 20070
        break;
       }
      }
     }
    } else {
     label = 26; //@line 20076
    }
   } while (0);
   if ((label | 0) == 26) {
    $125 = $$029$lcssa & -3; //@line 20081
   }
   $116 = HEAP8[$0 + 22 >> 0] | 0; //@line 20084
   $not$or$cond$i$i = $$026$i << 24 >> 24 >= $116 << 24 >> 24 ? $$026$i << 24 >> 24 <= (HEAP8[$0 + 21 >> 0] | 0) : 0; //@line 20089
   $123 = ($116 & 255 | 0) > ($$026$i << 24 >> 24 | 0); //@line 20092
   $$$130$$$i = $123 | $not$or$cond$i$i ? $125 : $125 & -5; //@line 20096
   $$026$$$026$i = $not$or$cond$i$i ? $$026$i : $123 ? $116 : $$026$i; //@line 20097
   $127 = $$$130$$$i << 24 >> 24 == 7; //@line 20098
   $$2$i = $$sroa$035$0$lcssa << 24 >> 24 == 0 & $127 ? 1 : $$sroa$035$0$lcssa; //@line 20101
   if (!$127) {
    $$452 = $$$130$$$i; //@line 20103
    $$sroa$035$349 = $$2$i; //@line 20103
    $$sroa$11$351 = $$026$$$026$i; //@line 20103
    $$sroa$637$350 = $$028$i; //@line 20103
    HEAP8[$2 >> 0] = $$sroa$637$350; //@line 20104
    HEAP8[$3 >> 0] = $$sroa$11$351; //@line 20105
    HEAP8[$4 >> 0] = $$sroa$035$349; //@line 20106
    HEAP8[$5 >> 0] = $$028$lcssa; //@line 20107
    return $$452 | 0; //@line 20108
   }
   $129 = $0 + 116 | 0; //@line 20110
   $131 = $0 + 113 | 0; //@line 20112
   _memset(HEAP32[$129 >> 2] | 0, 0, HEAPU8[$131 >> 0] << 1 | 0) | 0; //@line 20116
   $135 = HEAP32[$129 >> 2] | 0; //@line 20117
   $136 = HEAP8[$131 >> 0] | 0; //@line 20118
   if (!(($135 | 0) != 0 & $136 << 24 >> 24 != 0)) {
    $$452 = 7; //@line 20123
    $$sroa$035$349 = $$2$i; //@line 20123
    $$sroa$11$351 = $$026$$$026$i; //@line 20123
    $$sroa$637$350 = $$028$i; //@line 20123
    HEAP8[$2 >> 0] = $$sroa$637$350; //@line 20124
    HEAP8[$3 >> 0] = $$sroa$11$351; //@line 20125
    HEAP8[$4 >> 0] = $$sroa$035$349; //@line 20126
    HEAP8[$5 >> 0] = $$028$lcssa; //@line 20127
    return $$452 | 0; //@line 20128
   }
   $wide$trip$count$i = $136 & 255; //@line 20130
   $indvars$iv$i = 0; //@line 20131
   do {
    HEAP16[$135 + ($indvars$iv$i << 1) >> 1] = $101; //@line 20134
    $indvars$iv$i = $indvars$iv$i + 1 | 0; //@line 20135
   } while (($indvars$iv$i | 0) != ($wide$trip$count$i | 0));
   $$452 = 7; //@line 20138
   $$sroa$035$349 = $$2$i; //@line 20138
   $$sroa$11$351 = $$026$$$026$i; //@line 20138
   $$sroa$637$350 = $$028$i; //@line 20138
   HEAP8[$2 >> 0] = $$sroa$637$350; //@line 20144
   HEAP8[$3 >> 0] = $$sroa$11$351; //@line 20145
   HEAP8[$4 >> 0] = $$sroa$035$349; //@line 20146
   HEAP8[$5 >> 0] = $$028$lcssa; //@line 20147
   return $$452 | 0; //@line 20148
  }
 }
 $$452 = $$029$lcssa & -3; //@line 20152
 $$sroa$035$349 = $$sroa$035$0$lcssa; //@line 20152
 $$sroa$11$351 = $$sroa$11$0$lcssa; //@line 20152
 $$sroa$637$350 = $$sroa$637$0$lcssa; //@line 20152
 HEAP8[$2 >> 0] = $$sroa$637$350; //@line 20153
 HEAP8[$3 >> 0] = $$sroa$11$351; //@line 20154
 HEAP8[$4 >> 0] = $$sroa$035$349; //@line 20155
 HEAP8[$5 >> 0] = $$028$lcssa; //@line 20156
 return $$452 | 0; //@line 20157
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0; //@line 30571
 $n_sroa_1_4_extract_shift$0 = $a$1; //@line 30572
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0; //@line 30573
 $d_sroa_0_0_extract_trunc = $b$0; //@line 30574
 $d_sroa_1_4_extract_shift$0 = $b$1; //@line 30575
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0; //@line 30576
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0; //@line 30578
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 30581
    HEAP32[$rem + 4 >> 2] = 0; //@line 30582
   }
   $_0$1 = 0; //@line 30584
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 30585
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 30586
  } else {
   if (!$4) {
    $_0$1 = 0; //@line 30589
    $_0$0 = 0; //@line 30590
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 30591
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 30593
   HEAP32[$rem + 4 >> 2] = $a$1 & 0; //@line 30594
   $_0$1 = 0; //@line 30595
   $_0$0 = 0; //@line 30596
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 30597
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0; //@line 30600
 do {
  if (!$d_sroa_0_0_extract_trunc) {
   if ($17) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 30605
     HEAP32[$rem + 4 >> 2] = 0; //@line 30606
    }
    $_0$1 = 0; //@line 30608
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 30609
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 30610
   }
   if (!$n_sroa_0_0_extract_trunc) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = 0; //@line 30614
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0); //@line 30615
    }
    $_0$1 = 0; //@line 30617
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0; //@line 30618
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 30619
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0; //@line 30621
   if (!($37 & $d_sroa_1_4_extract_trunc)) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = $a$0 | 0; //@line 30624
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0; //@line 30625
    }
    $_0$1 = 0; //@line 30627
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0); //@line 30628
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 30629
   }
   $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 30632
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0; //@line 30634
    $58 = 31 - $51 | 0; //@line 30635
    $sr_1_ph = $57; //@line 30636
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0); //@line 30637
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0); //@line 30638
    $q_sroa_0_1_ph = 0; //@line 30639
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58; //@line 30640
    break;
   }
   if (!$rem) {
    $_0$1 = 0; //@line 30644
    $_0$0 = 0; //@line 30645
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 30646
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 30648
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 30649
   $_0$1 = 0; //@line 30650
   $_0$0 = 0; //@line 30651
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 30652
  } else {
   if (!$17) {
    $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 30656
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0; //@line 30658
     $126 = 31 - $119 | 0; //@line 30659
     $130 = $119 - 31 >> 31; //@line 30660
     $sr_1_ph = $125; //@line 30661
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126; //@line 30662
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130; //@line 30663
     $q_sroa_0_1_ph = 0; //@line 30664
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126; //@line 30665
     break;
    }
    if (!$rem) {
     $_0$1 = 0; //@line 30669
     $_0$0 = 0; //@line 30670
     return (tempRet0 = $_0$1, $_0$0) | 0; //@line 30671
    }
    HEAP32[$rem >> 2] = $a$0 | 0; //@line 30673
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 30674
    $_0$1 = 0; //@line 30675
    $_0$0 = 0; //@line 30676
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 30677
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0; //@line 30679
   if ($66 & $d_sroa_0_0_extract_trunc | 0) {
    $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 30682
    $89 = 64 - $88 | 0; //@line 30683
    $91 = 32 - $88 | 0; //@line 30684
    $92 = $91 >> 31; //@line 30685
    $95 = $88 - 32 | 0; //@line 30686
    $105 = $95 >> 31; //@line 30687
    $sr_1_ph = $88; //@line 30688
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105; //@line 30689
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0); //@line 30690
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92; //@line 30691
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31; //@line 30692
    break;
   }
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc; //@line 30696
    HEAP32[$rem + 4 >> 2] = 0; //@line 30697
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 30700
    $_0$0 = $a$0 | 0 | 0; //@line 30701
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 30702
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0; //@line 30704
    $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0; //@line 30705
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0; //@line 30706
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 30707
   }
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph; //@line 30712
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph; //@line 30713
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph; //@line 30714
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph; //@line 30715
  $carry_0_lcssa$1 = 0; //@line 30716
  $carry_0_lcssa$0 = 0; //@line 30717
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0; //@line 30719
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0; //@line 30720
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0; //@line 30721
  $137$1 = tempRet0; //@line 30722
  $q_sroa_1_1198 = $q_sroa_1_1_ph; //@line 30723
  $q_sroa_0_1199 = $q_sroa_0_1_ph; //@line 30724
  $r_sroa_1_1200 = $r_sroa_1_1_ph; //@line 30725
  $r_sroa_0_1201 = $r_sroa_0_1_ph; //@line 30726
  $sr_1202 = $sr_1_ph; //@line 30727
  $carry_0203 = 0; //@line 30728
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1; //@line 30730
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1; //@line 30731
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0; //@line 30732
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0; //@line 30733
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0; //@line 30734
   $150$1 = tempRet0; //@line 30735
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1; //@line 30736
   $carry_0203 = $151$0 & 1; //@line 30737
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0; //@line 30739
   $r_sroa_1_1200 = tempRet0; //@line 30740
   $sr_1202 = $sr_1202 - 1 | 0; //@line 30741
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198; //@line 30753
  $q_sroa_0_1_lcssa = $q_sroa_0_1199; //@line 30754
  $r_sroa_1_1_lcssa = $r_sroa_1_1200; //@line 30755
  $r_sroa_0_1_lcssa = $r_sroa_0_1201; //@line 30756
  $carry_0_lcssa$1 = 0; //@line 30757
  $carry_0_lcssa$0 = $carry_0203; //@line 30758
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa; //@line 30760
 $q_sroa_0_0_insert_ext75$1 = 0; //@line 30761
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa; //@line 30764
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa; //@line 30765
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1; //@line 30767
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0; //@line 30768
 return (tempRet0 = $_0$1, $_0$0) | 0; //@line 30769
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $122 = 0, $13 = 0, $136 = 0, $19 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $61 = 0, $69 = 0, $72 = 0, $73 = 0, $81 = 0, $84 = 0, $87 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16996
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 17002
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 17011
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 17016
      $19 = $1 + 44 | 0; //@line 17017
      if ((HEAP32[$19 >> 2] | 0) == 4) {
       break;
      }
      $25 = $0 + 16 + (HEAP32[$0 + 12 >> 2] << 3) | 0; //@line 17026
      $26 = $1 + 52 | 0; //@line 17027
      $27 = $1 + 53 | 0; //@line 17028
      $28 = $1 + 54 | 0; //@line 17029
      $29 = $0 + 8 | 0; //@line 17030
      $30 = $1 + 24 | 0; //@line 17031
      $$081$off0 = 0; //@line 17032
      $$084 = $0 + 16 | 0; //@line 17032
      $$085$off0 = 0; //@line 17032
      L10 : while (1) {
       if ($$084 >>> 0 >= $25 >>> 0) {
        $$283$off0 = $$081$off0; //@line 17036
        label = 20; //@line 17037
        break;
       }
       HEAP8[$26 >> 0] = 0; //@line 17040
       HEAP8[$27 >> 0] = 0; //@line 17041
       $AsyncCtx15 = _emscripten_alloc_async_context(56, sp) | 0; //@line 17042
       __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084, $1, $2, $2, 1, $4); //@line 17043
       if (___async) {
        label = 12; //@line 17046
        break;
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 17049
       if (HEAP8[$28 >> 0] | 0) {
        $$283$off0 = $$081$off0; //@line 17053
        label = 20; //@line 17054
        break;
       }
       do {
        if (!(HEAP8[$27 >> 0] | 0)) {
         $$182$off0 = $$081$off0; //@line 17061
         $$186$off0 = $$085$off0; //@line 17061
        } else {
         if (!(HEAP8[$26 >> 0] | 0)) {
          if (!(HEAP32[$29 >> 2] & 1)) {
           $$283$off0 = 1; //@line 17070
           label = 20; //@line 17071
           break L10;
          } else {
           $$182$off0 = 1; //@line 17074
           $$186$off0 = $$085$off0; //@line 17074
           break;
          }
         }
         if ((HEAP32[$30 >> 2] | 0) == 1) {
          label = 25; //@line 17081
          break L10;
         }
         if (!(HEAP32[$29 >> 2] & 2)) {
          label = 25; //@line 17088
          break L10;
         } else {
          $$182$off0 = 1; //@line 17091
          $$186$off0 = 1; //@line 17091
         }
        }
       } while (0);
       $$081$off0 = $$182$off0; //@line 17096
       $$084 = $$084 + 8 | 0; //@line 17096
       $$085$off0 = $$186$off0; //@line 17096
      }
      if ((label | 0) == 12) {
       HEAP32[$AsyncCtx15 >> 2] = 664; //@line 17099
       HEAP32[$AsyncCtx15 + 4 >> 2] = $28; //@line 17101
       HEAP32[$AsyncCtx15 + 8 >> 2] = $30; //@line 17103
       HEAP32[$AsyncCtx15 + 12 >> 2] = $19; //@line 17105
       HEAP32[$AsyncCtx15 + 16 >> 2] = $25; //@line 17107
       HEAP32[$AsyncCtx15 + 20 >> 2] = $26; //@line 17109
       HEAP32[$AsyncCtx15 + 24 >> 2] = $27; //@line 17111
       HEAP32[$AsyncCtx15 + 28 >> 2] = $1; //@line 17113
       HEAP32[$AsyncCtx15 + 32 >> 2] = $2; //@line 17115
       HEAP8[$AsyncCtx15 + 36 >> 0] = $4 & 1; //@line 17118
       HEAP32[$AsyncCtx15 + 40 >> 2] = $29; //@line 17120
       HEAP8[$AsyncCtx15 + 44 >> 0] = $$081$off0 & 1; //@line 17123
       HEAP8[$AsyncCtx15 + 45 >> 0] = $$085$off0 & 1; //@line 17126
       HEAP32[$AsyncCtx15 + 48 >> 2] = $13; //@line 17128
       HEAP32[$AsyncCtx15 + 52 >> 2] = $$084; //@line 17130
       sp = STACKTOP; //@line 17131
       return;
      }
      do {
       if ((label | 0) == 20) {
        if (!$$085$off0) {
         HEAP32[$13 >> 2] = $2; //@line 17137
         $61 = $1 + 40 | 0; //@line 17138
         HEAP32[$61 >> 2] = (HEAP32[$61 >> 2] | 0) + 1; //@line 17141
         if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
          if ((HEAP32[$30 >> 2] | 0) == 2) {
           HEAP8[$28 >> 0] = 1; //@line 17149
           if ($$283$off0) {
            label = 25; //@line 17151
            break;
           } else {
            $69 = 4; //@line 17154
            break;
           }
          }
         }
        }
        if ($$283$off0) {
         label = 25; //@line 17161
        } else {
         $69 = 4; //@line 17163
        }
       }
      } while (0);
      if ((label | 0) == 25) {
       $69 = 3; //@line 17168
      }
      HEAP32[$19 >> 2] = $69; //@line 17170
      break;
     }
    }
    if (($3 | 0) != 1) {
     break;
    }
    HEAP32[$1 + 32 >> 2] = 1; //@line 17179
    break;
   }
   $72 = HEAP32[$0 + 12 >> 2] | 0; //@line 17184
   $73 = $0 + 16 + ($72 << 3) | 0; //@line 17185
   $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 17186
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0 + 16 | 0, $1, $2, $3, $4); //@line 17187
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 665; //@line 17190
    HEAP32[$AsyncCtx11 + 4 >> 2] = $73; //@line 17192
    HEAP32[$AsyncCtx11 + 8 >> 2] = $1; //@line 17194
    HEAP32[$AsyncCtx11 + 12 >> 2] = $2; //@line 17196
    HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 17198
    HEAP8[$AsyncCtx11 + 20 >> 0] = $4 & 1; //@line 17201
    HEAP32[$AsyncCtx11 + 24 >> 2] = $0; //@line 17203
    HEAP32[$AsyncCtx11 + 28 >> 2] = $72; //@line 17205
    sp = STACKTOP; //@line 17206
    return;
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 17209
   $81 = $0 + 24 | 0; //@line 17210
   if (($72 | 0) > 1) {
    $84 = HEAP32[$0 + 8 >> 2] | 0; //@line 17214
    if (!($84 & 2)) {
     $87 = $1 + 36 | 0; //@line 17218
     if ((HEAP32[$87 >> 2] | 0) != 1) {
      if (!($84 & 1)) {
       $106 = $1 + 54 | 0; //@line 17225
       $$2 = $81; //@line 17226
       while (1) {
        if (HEAP8[$106 >> 0] | 0) {
         break L1;
        }
        if ((HEAP32[$87 >> 2] | 0) == 1) {
         break L1;
        }
        $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 17238
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2, $1, $2, $3, $4); //@line 17239
        if (___async) {
         break;
        }
        _emscripten_free_async_context($AsyncCtx | 0); //@line 17244
        $136 = $$2 + 8 | 0; //@line 17245
        if ($136 >>> 0 < $73 >>> 0) {
         $$2 = $136; //@line 17248
        } else {
         break L1;
        }
       }
       HEAP32[$AsyncCtx >> 2] = 668; //@line 17253
       HEAP32[$AsyncCtx + 4 >> 2] = $$2; //@line 17255
       HEAP32[$AsyncCtx + 8 >> 2] = $73; //@line 17257
       HEAP32[$AsyncCtx + 12 >> 2] = $106; //@line 17259
       HEAP32[$AsyncCtx + 16 >> 2] = $87; //@line 17261
       HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 17263
       HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 17265
       HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 17267
       HEAP8[$AsyncCtx + 32 >> 0] = $4 & 1; //@line 17270
       sp = STACKTOP; //@line 17271
       return;
      }
      $104 = $1 + 24 | 0; //@line 17274
      $105 = $1 + 54 | 0; //@line 17275
      $$1 = $81; //@line 17276
      while (1) {
       if (HEAP8[$105 >> 0] | 0) {
        break L1;
       }
       if ((HEAP32[$87 >> 2] | 0) == 1) {
        if ((HEAP32[$104 >> 2] | 0) == 1) {
         break L1;
        }
       }
       $AsyncCtx3 = _emscripten_alloc_async_context(40, sp) | 0; //@line 17292
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1, $1, $2, $3, $4); //@line 17293
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17298
       $122 = $$1 + 8 | 0; //@line 17299
       if ($122 >>> 0 < $73 >>> 0) {
        $$1 = $122; //@line 17302
       } else {
        break L1;
       }
      }
      HEAP32[$AsyncCtx3 >> 2] = 667; //@line 17307
      HEAP32[$AsyncCtx3 + 4 >> 2] = $$1; //@line 17309
      HEAP32[$AsyncCtx3 + 8 >> 2] = $73; //@line 17311
      HEAP32[$AsyncCtx3 + 12 >> 2] = $105; //@line 17313
      HEAP32[$AsyncCtx3 + 16 >> 2] = $87; //@line 17315
      HEAP32[$AsyncCtx3 + 20 >> 2] = $104; //@line 17317
      HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 17319
      HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 17321
      HEAP32[$AsyncCtx3 + 32 >> 2] = $3; //@line 17323
      HEAP8[$AsyncCtx3 + 36 >> 0] = $4 & 1; //@line 17326
      sp = STACKTOP; //@line 17327
      return;
     }
    }
    $90 = $1 + 54 | 0; //@line 17331
    $$0 = $81; //@line 17332
    while (1) {
     if (HEAP8[$90 >> 0] | 0) {
      break L1;
     }
     $AsyncCtx7 = _emscripten_alloc_async_context(32, sp) | 0; //@line 17339
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0, $1, $2, $3, $4); //@line 17340
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 17345
     $100 = $$0 + 8 | 0; //@line 17346
     if ($100 >>> 0 < $73 >>> 0) {
      $$0 = $100; //@line 17349
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx7 >> 2] = 666; //@line 17354
    HEAP32[$AsyncCtx7 + 4 >> 2] = $$0; //@line 17356
    HEAP32[$AsyncCtx7 + 8 >> 2] = $73; //@line 17358
    HEAP32[$AsyncCtx7 + 12 >> 2] = $90; //@line 17360
    HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 17362
    HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 17364
    HEAP32[$AsyncCtx7 + 24 >> 2] = $3; //@line 17366
    HEAP8[$AsyncCtx7 + 28 >> 0] = $4 & 1; //@line 17369
    sp = STACKTOP; //@line 17370
    return;
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $52 = 0, $53 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 27057
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27059
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27061
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27063
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27065
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27067
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27069
 $$pre = HEAP32[$6 >> 2] | 0; //@line 27070
 if ($$pre | 0) {
  $15 = HEAP32[$$pre + 4 >> 2] | 0; //@line 27074
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 27075
  FUNCTION_TABLE_vii[$15 & 15]($10, $4); //@line 27076
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 333; //@line 27079
   $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 27080
   HEAP32[$16 >> 2] = $2; //@line 27081
   $17 = $ReallocAsyncCtx2 + 8 | 0; //@line 27082
   HEAP32[$17 >> 2] = $4; //@line 27083
   $18 = $ReallocAsyncCtx2 + 12 | 0; //@line 27084
   HEAP32[$18 >> 2] = $8; //@line 27085
   $19 = $ReallocAsyncCtx2 + 16 | 0; //@line 27086
   HEAP32[$19 >> 2] = $6; //@line 27087
   $20 = $ReallocAsyncCtx2 + 20 | 0; //@line 27088
   HEAP32[$20 >> 2] = $12; //@line 27089
   sp = STACKTOP; //@line 27090
   return;
  }
  ___async_unwind = 0; //@line 27093
  HEAP32[$ReallocAsyncCtx2 >> 2] = 333; //@line 27094
  $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 27095
  HEAP32[$16 >> 2] = $2; //@line 27096
  $17 = $ReallocAsyncCtx2 + 8 | 0; //@line 27097
  HEAP32[$17 >> 2] = $4; //@line 27098
  $18 = $ReallocAsyncCtx2 + 12 | 0; //@line 27099
  HEAP32[$18 >> 2] = $8; //@line 27100
  $19 = $ReallocAsyncCtx2 + 16 | 0; //@line 27101
  HEAP32[$19 >> 2] = $6; //@line 27102
  $20 = $ReallocAsyncCtx2 + 20 | 0; //@line 27103
  HEAP32[$20 >> 2] = $12; //@line 27104
  sp = STACKTOP; //@line 27105
  return;
 }
 HEAP32[$12 >> 2] = 0; //@line 27108
 $21 = $4 + 16 | 0; //@line 27109
 $22 = $4 + 28 | 0; //@line 27110
 $23 = HEAP32[$22 >> 2] | 0; //@line 27111
 if ($23 | 0) {
  $25 = $2 + 2500 | 0; //@line 27114
  if (($25 | 0) != ($21 | 0)) {
   $27 = $2 + 2512 | 0; //@line 27117
   $28 = HEAP32[$27 >> 2] | 0; //@line 27118
   if (!$28) {
    $40 = HEAP32[$23 + 4 >> 2] | 0; //@line 27122
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 27123
    FUNCTION_TABLE_vii[$40 & 15]($25, $21); //@line 27124
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 335; //@line 27127
     $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 27128
     HEAP32[$41 >> 2] = $2; //@line 27129
     $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 27130
     HEAP32[$42 >> 2] = $22; //@line 27131
     $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 27132
     HEAP32[$43 >> 2] = $27; //@line 27133
     $44 = $ReallocAsyncCtx4 + 16 | 0; //@line 27134
     HEAP32[$44 >> 2] = $4; //@line 27135
     $45 = $ReallocAsyncCtx4 + 20 | 0; //@line 27136
     HEAP32[$45 >> 2] = $8; //@line 27137
     sp = STACKTOP; //@line 27138
     return;
    }
    ___async_unwind = 0; //@line 27141
    HEAP32[$ReallocAsyncCtx4 >> 2] = 335; //@line 27142
    $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 27143
    HEAP32[$41 >> 2] = $2; //@line 27144
    $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 27145
    HEAP32[$42 >> 2] = $22; //@line 27146
    $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 27147
    HEAP32[$43 >> 2] = $27; //@line 27148
    $44 = $ReallocAsyncCtx4 + 16 | 0; //@line 27149
    HEAP32[$44 >> 2] = $4; //@line 27150
    $45 = $ReallocAsyncCtx4 + 20 | 0; //@line 27151
    HEAP32[$45 >> 2] = $8; //@line 27152
    sp = STACKTOP; //@line 27153
    return;
   } else {
    $31 = HEAP32[$28 + 8 >> 2] | 0; //@line 27157
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 27158
    FUNCTION_TABLE_vi[$31 & 1023]($25); //@line 27159
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 334; //@line 27162
     $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 27163
     HEAP32[$32 >> 2] = $2; //@line 27164
     $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 27165
     HEAP32[$33 >> 2] = $22; //@line 27166
     $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 27167
     HEAP32[$34 >> 2] = $27; //@line 27168
     $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 27169
     HEAP32[$35 >> 2] = $4; //@line 27170
     $36 = $ReallocAsyncCtx3 + 20 | 0; //@line 27171
     HEAP32[$36 >> 2] = $8; //@line 27172
     $37 = $ReallocAsyncCtx3 + 24 | 0; //@line 27173
     HEAP32[$37 >> 2] = $25; //@line 27174
     $38 = $ReallocAsyncCtx3 + 28 | 0; //@line 27175
     HEAP32[$38 >> 2] = $21; //@line 27176
     sp = STACKTOP; //@line 27177
     return;
    }
    ___async_unwind = 0; //@line 27180
    HEAP32[$ReallocAsyncCtx3 >> 2] = 334; //@line 27181
    $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 27182
    HEAP32[$32 >> 2] = $2; //@line 27183
    $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 27184
    HEAP32[$33 >> 2] = $22; //@line 27185
    $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 27186
    HEAP32[$34 >> 2] = $27; //@line 27187
    $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 27188
    HEAP32[$35 >> 2] = $4; //@line 27189
    $36 = $ReallocAsyncCtx3 + 20 | 0; //@line 27190
    HEAP32[$36 >> 2] = $8; //@line 27191
    $37 = $ReallocAsyncCtx3 + 24 | 0; //@line 27192
    HEAP32[$37 >> 2] = $25; //@line 27193
    $38 = $ReallocAsyncCtx3 + 28 | 0; //@line 27194
    HEAP32[$38 >> 2] = $21; //@line 27195
    sp = STACKTOP; //@line 27196
    return;
   }
  }
 }
 $46 = $4 + 32 | 0; //@line 27201
 $47 = $4 + 44 | 0; //@line 27202
 $48 = HEAP32[$47 >> 2] | 0; //@line 27203
 if (!$48) {
  HEAP32[___async_retval >> 2] = 0; //@line 27207
  return;
 }
 $50 = $2 + 2516 | 0; //@line 27210
 if (($50 | 0) == ($46 | 0)) {
  $71 = HEAP32[$48 + 4 >> 2] | 0; //@line 27214
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 27215
  FUNCTION_TABLE_vii[$71 & 15]($8, $46); //@line 27216
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 338; //@line 27219
   $72 = $ReallocAsyncCtx7 + 4 | 0; //@line 27220
   HEAP32[$72 >> 2] = $47; //@line 27221
   $73 = $ReallocAsyncCtx7 + 8 | 0; //@line 27222
   HEAP32[$73 >> 2] = $2; //@line 27223
   $74 = $ReallocAsyncCtx7 + 12 | 0; //@line 27224
   HEAP32[$74 >> 2] = $8; //@line 27225
   sp = STACKTOP; //@line 27226
   return;
  }
  ___async_unwind = 0; //@line 27229
  HEAP32[$ReallocAsyncCtx7 >> 2] = 338; //@line 27230
  $72 = $ReallocAsyncCtx7 + 4 | 0; //@line 27231
  HEAP32[$72 >> 2] = $47; //@line 27232
  $73 = $ReallocAsyncCtx7 + 8 | 0; //@line 27233
  HEAP32[$73 >> 2] = $2; //@line 27234
  $74 = $ReallocAsyncCtx7 + 12 | 0; //@line 27235
  HEAP32[$74 >> 2] = $8; //@line 27236
  sp = STACKTOP; //@line 27237
  return;
 }
 $52 = $2 + 2528 | 0; //@line 27240
 $53 = HEAP32[$52 >> 2] | 0; //@line 27241
 if (!$53) {
  $64 = HEAP32[$48 + 4 >> 2] | 0; //@line 27245
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 27246
  FUNCTION_TABLE_vii[$64 & 15]($50, $46); //@line 27247
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 337; //@line 27250
   $65 = $ReallocAsyncCtx6 + 4 | 0; //@line 27251
   HEAP32[$65 >> 2] = $47; //@line 27252
   $66 = $ReallocAsyncCtx6 + 8 | 0; //@line 27253
   HEAP32[$66 >> 2] = $52; //@line 27254
   $67 = $ReallocAsyncCtx6 + 12 | 0; //@line 27255
   HEAP32[$67 >> 2] = $2; //@line 27256
   $68 = $ReallocAsyncCtx6 + 16 | 0; //@line 27257
   HEAP32[$68 >> 2] = $8; //@line 27258
   $69 = $ReallocAsyncCtx6 + 20 | 0; //@line 27259
   HEAP32[$69 >> 2] = $46; //@line 27260
   sp = STACKTOP; //@line 27261
   return;
  }
  ___async_unwind = 0; //@line 27264
  HEAP32[$ReallocAsyncCtx6 >> 2] = 337; //@line 27265
  $65 = $ReallocAsyncCtx6 + 4 | 0; //@line 27266
  HEAP32[$65 >> 2] = $47; //@line 27267
  $66 = $ReallocAsyncCtx6 + 8 | 0; //@line 27268
  HEAP32[$66 >> 2] = $52; //@line 27269
  $67 = $ReallocAsyncCtx6 + 12 | 0; //@line 27270
  HEAP32[$67 >> 2] = $2; //@line 27271
  $68 = $ReallocAsyncCtx6 + 16 | 0; //@line 27272
  HEAP32[$68 >> 2] = $8; //@line 27273
  $69 = $ReallocAsyncCtx6 + 20 | 0; //@line 27274
  HEAP32[$69 >> 2] = $46; //@line 27275
  sp = STACKTOP; //@line 27276
  return;
 } else {
  $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 27280
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 27281
  FUNCTION_TABLE_vi[$56 & 1023]($50); //@line 27282
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 336; //@line 27285
   $57 = $ReallocAsyncCtx5 + 4 | 0; //@line 27286
   HEAP32[$57 >> 2] = $47; //@line 27287
   $58 = $ReallocAsyncCtx5 + 8 | 0; //@line 27288
   HEAP32[$58 >> 2] = $52; //@line 27289
   $59 = $ReallocAsyncCtx5 + 12 | 0; //@line 27290
   HEAP32[$59 >> 2] = $2; //@line 27291
   $60 = $ReallocAsyncCtx5 + 16 | 0; //@line 27292
   HEAP32[$60 >> 2] = $50; //@line 27293
   $61 = $ReallocAsyncCtx5 + 20 | 0; //@line 27294
   HEAP32[$61 >> 2] = $46; //@line 27295
   $62 = $ReallocAsyncCtx5 + 24 | 0; //@line 27296
   HEAP32[$62 >> 2] = $8; //@line 27297
   sp = STACKTOP; //@line 27298
   return;
  }
  ___async_unwind = 0; //@line 27301
  HEAP32[$ReallocAsyncCtx5 >> 2] = 336; //@line 27302
  $57 = $ReallocAsyncCtx5 + 4 | 0; //@line 27303
  HEAP32[$57 >> 2] = $47; //@line 27304
  $58 = $ReallocAsyncCtx5 + 8 | 0; //@line 27305
  HEAP32[$58 >> 2] = $52; //@line 27306
  $59 = $ReallocAsyncCtx5 + 12 | 0; //@line 27307
  HEAP32[$59 >> 2] = $2; //@line 27308
  $60 = $ReallocAsyncCtx5 + 16 | 0; //@line 27309
  HEAP32[$60 >> 2] = $50; //@line 27310
  $61 = $ReallocAsyncCtx5 + 20 | 0; //@line 27311
  HEAP32[$61 >> 2] = $46; //@line 27312
  $62 = $ReallocAsyncCtx5 + 24 | 0; //@line 27313
  HEAP32[$62 >> 2] = $8; //@line 27314
  sp = STACKTOP; //@line 27315
  return;
 }
}
function __ZN16SX1276_LoRaRadio7receiveEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $100 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $3 = 0, $30 = 0, $33 = 0, $38 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $51 = 0, $54 = 0, $6 = 0, $61 = 0, $74 = 0, $77 = 0, $82 = 0, $96 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx21 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx32 = 0, $AsyncCtx36 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 431
 STACKTOP = STACKTOP + 96 | 0; //@line 432
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 432
 $vararg_buffer17 = sp + 48 | 0; //@line 433
 $vararg_buffer14 = sp + 40 | 0; //@line 434
 $vararg_buffer11 = sp + 32 | 0; //@line 435
 $vararg_buffer8 = sp + 24 | 0; //@line 436
 $vararg_buffer5 = sp + 16 | 0; //@line 437
 $vararg_buffer2 = sp + 8 | 0; //@line 438
 $vararg_buffer = sp; //@line 439
 $2 = sp + 72 | 0; //@line 440
 $3 = sp + 56 | 0; //@line 441
 $4 = $0 + 783 | 0; //@line 442
 $6 = HEAPU8[$4 >> 0] | 0; //@line 444
 HEAP32[$vararg_buffer >> 2] = $1; //@line 445
 HEAP32[$vararg_buffer + 4 >> 2] = $6; //@line 447
 _mbed_tracef(16, 10996, 11312, $vararg_buffer); //@line 448
 _emscripten_asm_const_i(2) | 0; //@line 449
 HEAP8[$0 + 688 >> 0] = 1; //@line 451
 if (HEAP8[$4 >> 0] | 0) {
  $11 = _emscripten_asm_const_i(3) | 0; //@line 455
  $14 = $11 - (HEAP32[$0 + 784 >> 2] | 0) | 0; //@line 458
  HEAP32[$vararg_buffer2 >> 2] = $14; //@line 459
  _mbed_tracef(16, 10996, 11412, $vararg_buffer2); //@line 460
  HEAP8[$4 >> 0] = 0; //@line 461
  if ($14 >>> 0 > 500) {
   HEAP32[$vararg_buffer5 >> 2] = $14; //@line 464
   _mbed_tracef(4, 10996, 11433, $vararg_buffer5); //@line 465
   STACKTOP = sp; //@line 466
   return;
  }
  $16 = $0 + 1112 | 0; //@line 468
  $17 = $2 + 12 | 0; //@line 469
  HEAP32[$2 >> 2] = 48; //@line 470
  HEAP32[$2 + 4 >> 2] = 0; //@line 472
  HEAP32[$2 + 8 >> 2] = $0; //@line 474
  HEAP32[$17 >> 2] = 584; //@line 475
  $18 = $0 + 1152 | 0; //@line 476
  if (($18 | 0) != ($2 | 0)) {
   $20 = $0 + 1164 | 0; //@line 479
   $21 = HEAP32[$20 >> 2] | 0; //@line 480
   do {
    if ($21 | 0) {
     $24 = HEAP32[$21 + 8 >> 2] | 0; //@line 485
     $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 486
     FUNCTION_TABLE_vi[$24 & 1023]($18); //@line 487
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 49; //@line 490
      HEAP32[$AsyncCtx + 4 >> 2] = $17; //@line 492
      HEAP32[$AsyncCtx + 8 >> 2] = $20; //@line 494
      HEAP32[$AsyncCtx + 12 >> 2] = $18; //@line 496
      HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 498
      HEAP32[$AsyncCtx + 20 >> 2] = $16; //@line 500
      sp = STACKTOP; //@line 501
      STACKTOP = sp; //@line 502
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 504
      break;
     }
    }
   } while (0);
   $30 = HEAP32[$17 >> 2] | 0; //@line 509
   do {
    if (!$30) {
     $38 = 0; //@line 513
    } else {
     $33 = HEAP32[$30 + 4 >> 2] | 0; //@line 516
     $AsyncCtx21 = _emscripten_alloc_async_context(20, sp) | 0; //@line 517
     FUNCTION_TABLE_vii[$33 & 15]($18, $2); //@line 518
     if (___async) {
      HEAP32[$AsyncCtx21 >> 2] = 50; //@line 521
      HEAP32[$AsyncCtx21 + 4 >> 2] = $17; //@line 523
      HEAP32[$AsyncCtx21 + 8 >> 2] = $20; //@line 525
      HEAP32[$AsyncCtx21 + 12 >> 2] = $16; //@line 527
      HEAP32[$AsyncCtx21 + 16 >> 2] = $2; //@line 529
      sp = STACKTOP; //@line 530
      STACKTOP = sp; //@line 531
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx21 | 0); //@line 533
      $38 = HEAP32[$17 >> 2] | 0; //@line 535
      break;
     }
    }
   } while (0);
   HEAP32[$20 >> 2] = $38; //@line 540
  }
  __ZN4mbed6Ticker5setupEy($16, 2e5, 0); //@line 542
  $39 = HEAP32[$17 >> 2] | 0; //@line 543
  if (!$39) {
   STACKTOP = sp; //@line 546
   return;
  }
  $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 549
  $AsyncCtx25 = _emscripten_alloc_async_context(4, sp) | 0; //@line 550
  FUNCTION_TABLE_vi[$42 & 1023]($2); //@line 551
  if (___async) {
   HEAP32[$AsyncCtx25 >> 2] = 51; //@line 554
   sp = STACKTOP; //@line 555
   STACKTOP = sp; //@line 556
   return;
  }
  _emscripten_free_async_context($AsyncCtx25 | 0); //@line 558
  STACKTOP = sp; //@line 559
  return;
 }
 do {
  if ($1 | 0) {
   $44 = $0 + 1112 | 0; //@line 564
   $45 = $3 + 12 | 0; //@line 565
   HEAP32[$3 >> 2] = 52; //@line 566
   HEAP32[$3 + 4 >> 2] = 0; //@line 568
   HEAP32[$3 + 8 >> 2] = $0; //@line 570
   HEAP32[$45 >> 2] = 584; //@line 571
   $46 = ___muldi3($1 | 0, 0, 1e3, 0) | 0; //@line 572
   $47 = tempRet0; //@line 573
   $48 = $0 + 1152 | 0; //@line 574
   if (($48 | 0) != ($3 | 0)) {
    $50 = $0 + 1164 | 0; //@line 577
    $51 = HEAP32[$50 >> 2] | 0; //@line 578
    do {
     if ($51 | 0) {
      $54 = HEAP32[$51 + 8 >> 2] | 0; //@line 583
      $AsyncCtx29 = _emscripten_alloc_async_context(72, sp) | 0; //@line 584
      FUNCTION_TABLE_vi[$54 & 1023]($48); //@line 585
      if (___async) {
       HEAP32[$AsyncCtx29 >> 2] = 53; //@line 588
       HEAP32[$AsyncCtx29 + 4 >> 2] = $45; //@line 590
       HEAP32[$AsyncCtx29 + 8 >> 2] = $50; //@line 592
       HEAP32[$AsyncCtx29 + 12 >> 2] = $48; //@line 594
       HEAP32[$AsyncCtx29 + 16 >> 2] = $3; //@line 596
       HEAP32[$AsyncCtx29 + 20 >> 2] = $44; //@line 598
       $61 = $AsyncCtx29 + 24 | 0; //@line 600
       HEAP32[$61 >> 2] = $46; //@line 602
       HEAP32[$61 + 4 >> 2] = $47; //@line 605
       HEAP32[$AsyncCtx29 + 32 >> 2] = $0; //@line 607
       HEAP32[$AsyncCtx29 + 36 >> 2] = $vararg_buffer14; //@line 609
       HEAP32[$AsyncCtx29 + 40 >> 2] = $vararg_buffer14; //@line 611
       HEAP32[$AsyncCtx29 + 44 >> 2] = $vararg_buffer17; //@line 613
       HEAP32[$AsyncCtx29 + 48 >> 2] = $vararg_buffer17; //@line 615
       HEAP32[$AsyncCtx29 + 52 >> 2] = $vararg_buffer8; //@line 617
       HEAP32[$AsyncCtx29 + 56 >> 2] = $vararg_buffer8; //@line 619
       HEAP32[$AsyncCtx29 + 60 >> 2] = $vararg_buffer11; //@line 621
       HEAP32[$AsyncCtx29 + 64 >> 2] = $vararg_buffer11; //@line 623
       sp = STACKTOP; //@line 624
       STACKTOP = sp; //@line 625
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx29 | 0); //@line 627
       break;
      }
     }
    } while (0);
    $74 = HEAP32[$45 >> 2] | 0; //@line 632
    do {
     if (!$74) {
      $96 = 0; //@line 636
     } else {
      $77 = HEAP32[$74 + 4 >> 2] | 0; //@line 639
      $AsyncCtx32 = _emscripten_alloc_async_context(64, sp) | 0; //@line 640
      FUNCTION_TABLE_vii[$77 & 15]($48, $3); //@line 641
      if (___async) {
       HEAP32[$AsyncCtx32 >> 2] = 54; //@line 644
       HEAP32[$AsyncCtx32 + 4 >> 2] = $45; //@line 646
       HEAP32[$AsyncCtx32 + 8 >> 2] = $50; //@line 648
       HEAP32[$AsyncCtx32 + 12 >> 2] = $44; //@line 650
       $82 = $AsyncCtx32 + 16 | 0; //@line 652
       HEAP32[$82 >> 2] = $46; //@line 654
       HEAP32[$82 + 4 >> 2] = $47; //@line 657
       HEAP32[$AsyncCtx32 + 24 >> 2] = $0; //@line 659
       HEAP32[$AsyncCtx32 + 28 >> 2] = $3; //@line 661
       HEAP32[$AsyncCtx32 + 32 >> 2] = $vararg_buffer14; //@line 663
       HEAP32[$AsyncCtx32 + 36 >> 2] = $vararg_buffer14; //@line 665
       HEAP32[$AsyncCtx32 + 40 >> 2] = $vararg_buffer17; //@line 667
       HEAP32[$AsyncCtx32 + 44 >> 2] = $vararg_buffer17; //@line 669
       HEAP32[$AsyncCtx32 + 48 >> 2] = $vararg_buffer8; //@line 671
       HEAP32[$AsyncCtx32 + 52 >> 2] = $vararg_buffer8; //@line 673
       HEAP32[$AsyncCtx32 + 56 >> 2] = $vararg_buffer11; //@line 675
       HEAP32[$AsyncCtx32 + 60 >> 2] = $vararg_buffer11; //@line 677
       sp = STACKTOP; //@line 678
       STACKTOP = sp; //@line 679
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx32 | 0); //@line 681
       $96 = HEAP32[$45 >> 2] | 0; //@line 683
       break;
      }
     }
    } while (0);
    HEAP32[$50 >> 2] = $96; //@line 688
   }
   __ZN4mbed6Ticker5setupEy($44, $46, $47); //@line 690
   $97 = HEAP32[$45 >> 2] | 0; //@line 691
   if ($97 | 0) {
    $100 = HEAP32[$97 + 8 >> 2] | 0; //@line 695
    $AsyncCtx36 = _emscripten_alloc_async_context(40, sp) | 0; //@line 696
    FUNCTION_TABLE_vi[$100 & 1023]($3); //@line 697
    if (___async) {
     HEAP32[$AsyncCtx36 >> 2] = 55; //@line 700
     HEAP32[$AsyncCtx36 + 4 >> 2] = $0; //@line 702
     HEAP32[$AsyncCtx36 + 8 >> 2] = $vararg_buffer14; //@line 704
     HEAP32[$AsyncCtx36 + 12 >> 2] = $vararg_buffer14; //@line 706
     HEAP32[$AsyncCtx36 + 16 >> 2] = $vararg_buffer17; //@line 708
     HEAP32[$AsyncCtx36 + 20 >> 2] = $vararg_buffer17; //@line 710
     HEAP32[$AsyncCtx36 + 24 >> 2] = $vararg_buffer8; //@line 712
     HEAP32[$AsyncCtx36 + 28 >> 2] = $vararg_buffer8; //@line 714
     HEAP32[$AsyncCtx36 + 32 >> 2] = $vararg_buffer11; //@line 716
     HEAP32[$AsyncCtx36 + 36 >> 2] = $vararg_buffer11; //@line 718
     sp = STACKTOP; //@line 719
     STACKTOP = sp; //@line 720
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx36 | 0); //@line 722
     break;
    }
   }
  }
 } while (0);
 if (!(HEAP8[$0 + 770 >> 0] | 0)) {
  HEAP32[$vararg_buffer14 >> 2] = 6; //@line 732
  _mbed_tracef(16, 10996, 11053, $vararg_buffer14); //@line 733
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 734
  HEAP32[$vararg_buffer17 >> 2] = 6; //@line 735
  _mbed_tracef(16, 10996, 11082, $vararg_buffer17); //@line 736
  STACKTOP = sp; //@line 737
  return;
 } else {
  HEAP32[$vararg_buffer8 >> 2] = 5; //@line 739
  _mbed_tracef(16, 10996, 11053, $vararg_buffer8); //@line 740
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 741
  HEAP32[$vararg_buffer11 >> 2] = 5; //@line 742
  _mbed_tracef(16, 10996, 11082, $vararg_buffer11); //@line 743
  STACKTOP = sp; //@line 744
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$pr = 0, $$pre = 0, $$pre16 = 0, $$pre17 = 0, $10 = 0, $101 = 0, $13 = 0, $2 = 0, $22 = 0, $23 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $5 = 0, $50 = 0, $51 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $62 = 0, $64 = 0, $65 = 0, $68 = 0, $7 = 0, $77 = 0, $78 = 0, $84 = 0, $87 = 0, $88 = 0, $9 = 0, $91 = 0, $93 = 0, $94 = 0, $95 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx21 = 0, $AsyncCtx24 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9681
 STACKTOP = STACKTOP + 16 | 0; //@line 9682
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9682
 $2 = sp; //@line 9683
 if (!$1) {
  $$0 = -1003; //@line 9686
  STACKTOP = sp; //@line 9687
  return $$0 | 0; //@line 9687
 }
 $4 = $1 + 12 | 0; //@line 9689
 $5 = HEAP32[$4 >> 2] | 0; //@line 9690
 if (!$5) {
  $$0 = -1003; //@line 9693
  STACKTOP = sp; //@line 9694
  return $$0 | 0; //@line 9694
 }
 $7 = $0 + 2484 | 0; //@line 9696
 if (($7 | 0) != ($1 | 0)) {
  $9 = $0 + 2496 | 0; //@line 9699
  $10 = HEAP32[$9 >> 2] | 0; //@line 9700
  do {
   if (!$10) {
    $22 = $5; //@line 9704
    label = 8; //@line 9705
   } else {
    $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 9708
    $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 9709
    FUNCTION_TABLE_vi[$13 & 1023]($7); //@line 9710
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 332; //@line 9713
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 9715
     HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 9717
     HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 9719
     HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 9721
     HEAP32[$AsyncCtx + 20 >> 2] = $7; //@line 9723
     HEAP32[$AsyncCtx + 24 >> 2] = $9; //@line 9725
     sp = STACKTOP; //@line 9726
     STACKTOP = sp; //@line 9727
     return 0; //@line 9727
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 9729
     $$pre = HEAP32[$4 >> 2] | 0; //@line 9730
     if (!$$pre) {
      $29 = 0; //@line 9733
      break;
     } else {
      $22 = $$pre; //@line 9736
      label = 8; //@line 9737
      break;
     }
    }
   }
  } while (0);
  do {
   if ((label | 0) == 8) {
    $23 = HEAP32[$22 + 4 >> 2] | 0; //@line 9746
    $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 9747
    FUNCTION_TABLE_vii[$23 & 15]($7, $1); //@line 9748
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 333; //@line 9751
     HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 9753
     HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 9755
     HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 9757
     HEAP32[$AsyncCtx2 + 16 >> 2] = $4; //@line 9759
     HEAP32[$AsyncCtx2 + 20 >> 2] = $9; //@line 9761
     sp = STACKTOP; //@line 9762
     STACKTOP = sp; //@line 9763
     return 0; //@line 9763
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9765
     $29 = HEAP32[$4 >> 2] | 0; //@line 9767
     break;
    }
   }
  } while (0);
  HEAP32[$9 >> 2] = $29; //@line 9772
 }
 $30 = $1 + 16 | 0; //@line 9774
 $31 = $1 + 28 | 0; //@line 9775
 $32 = HEAP32[$31 >> 2] | 0; //@line 9776
 if ($32 | 0) {
  $34 = $0 + 2500 | 0; //@line 9779
  if (($34 | 0) != ($30 | 0)) {
   $36 = $0 + 2512 | 0; //@line 9782
   $37 = HEAP32[$36 >> 2] | 0; //@line 9783
   do {
    if (!$37) {
     $50 = $32; //@line 9787
     label = 18; //@line 9788
    } else {
     $40 = HEAP32[$37 + 8 >> 2] | 0; //@line 9791
     $AsyncCtx5 = _emscripten_alloc_async_context(32, sp) | 0; //@line 9792
     FUNCTION_TABLE_vi[$40 & 1023]($34); //@line 9793
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 334; //@line 9796
      HEAP32[$AsyncCtx5 + 4 >> 2] = $0; //@line 9798
      HEAP32[$AsyncCtx5 + 8 >> 2] = $31; //@line 9800
      HEAP32[$AsyncCtx5 + 12 >> 2] = $36; //@line 9802
      HEAP32[$AsyncCtx5 + 16 >> 2] = $1; //@line 9804
      HEAP32[$AsyncCtx5 + 20 >> 2] = $2; //@line 9806
      HEAP32[$AsyncCtx5 + 24 >> 2] = $34; //@line 9808
      HEAP32[$AsyncCtx5 + 28 >> 2] = $30; //@line 9810
      sp = STACKTOP; //@line 9811
      STACKTOP = sp; //@line 9812
      return 0; //@line 9812
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 9814
      $$pre16 = HEAP32[$31 >> 2] | 0; //@line 9815
      if (!$$pre16) {
       $57 = 0; //@line 9818
       break;
      } else {
       $50 = $$pre16; //@line 9821
       label = 18; //@line 9822
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 18) {
     $51 = HEAP32[$50 + 4 >> 2] | 0; //@line 9831
     $AsyncCtx8 = _emscripten_alloc_async_context(24, sp) | 0; //@line 9832
     FUNCTION_TABLE_vii[$51 & 15]($34, $30); //@line 9833
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 335; //@line 9836
      HEAP32[$AsyncCtx8 + 4 >> 2] = $0; //@line 9838
      HEAP32[$AsyncCtx8 + 8 >> 2] = $31; //@line 9840
      HEAP32[$AsyncCtx8 + 12 >> 2] = $36; //@line 9842
      HEAP32[$AsyncCtx8 + 16 >> 2] = $1; //@line 9844
      HEAP32[$AsyncCtx8 + 20 >> 2] = $2; //@line 9846
      sp = STACKTOP; //@line 9847
      STACKTOP = sp; //@line 9848
      return 0; //@line 9848
     } else {
      _emscripten_free_async_context($AsyncCtx8 | 0); //@line 9850
      $57 = HEAP32[$31 >> 2] | 0; //@line 9852
      break;
     }
    }
   } while (0);
   HEAP32[$36 >> 2] = $57; //@line 9857
  }
 }
 $58 = $1 + 32 | 0; //@line 9860
 $59 = $1 + 44 | 0; //@line 9861
 $60 = HEAP32[$59 >> 2] | 0; //@line 9862
 if (!$60) {
  $$0 = 0; //@line 9865
  STACKTOP = sp; //@line 9866
  return $$0 | 0; //@line 9866
 }
 $62 = $0 + 2516 | 0; //@line 9868
 if (($62 | 0) == ($58 | 0)) {
  $87 = $60; //@line 9871
  $91 = $0; //@line 9871
  label = 33; //@line 9872
 } else {
  $64 = $0 + 2528 | 0; //@line 9874
  $65 = HEAP32[$64 >> 2] | 0; //@line 9875
  do {
   if (!$65) {
    $77 = $60; //@line 9879
    label = 29; //@line 9880
   } else {
    $68 = HEAP32[$65 + 8 >> 2] | 0; //@line 9883
    $AsyncCtx11 = _emscripten_alloc_async_context(28, sp) | 0; //@line 9884
    FUNCTION_TABLE_vi[$68 & 1023]($62); //@line 9885
    if (___async) {
     HEAP32[$AsyncCtx11 >> 2] = 336; //@line 9888
     HEAP32[$AsyncCtx11 + 4 >> 2] = $59; //@line 9890
     HEAP32[$AsyncCtx11 + 8 >> 2] = $64; //@line 9892
     HEAP32[$AsyncCtx11 + 12 >> 2] = $0; //@line 9894
     HEAP32[$AsyncCtx11 + 16 >> 2] = $62; //@line 9896
     HEAP32[$AsyncCtx11 + 20 >> 2] = $58; //@line 9898
     HEAP32[$AsyncCtx11 + 24 >> 2] = $2; //@line 9900
     sp = STACKTOP; //@line 9901
     STACKTOP = sp; //@line 9902
     return 0; //@line 9902
    } else {
     _emscripten_free_async_context($AsyncCtx11 | 0); //@line 9904
     $$pre17 = HEAP32[$59 >> 2] | 0; //@line 9905
     if (!$$pre17) {
      $84 = 0; //@line 9908
      break;
     } else {
      $77 = $$pre17; //@line 9911
      label = 29; //@line 9912
      break;
     }
    }
   }
  } while (0);
  do {
   if ((label | 0) == 29) {
    $78 = HEAP32[$77 + 4 >> 2] | 0; //@line 9921
    $AsyncCtx14 = _emscripten_alloc_async_context(24, sp) | 0; //@line 9922
    FUNCTION_TABLE_vii[$78 & 15]($62, $58); //@line 9923
    if (___async) {
     HEAP32[$AsyncCtx14 >> 2] = 337; //@line 9926
     HEAP32[$AsyncCtx14 + 4 >> 2] = $59; //@line 9928
     HEAP32[$AsyncCtx14 + 8 >> 2] = $64; //@line 9930
     HEAP32[$AsyncCtx14 + 12 >> 2] = $0; //@line 9932
     HEAP32[$AsyncCtx14 + 16 >> 2] = $2; //@line 9934
     HEAP32[$AsyncCtx14 + 20 >> 2] = $58; //@line 9936
     sp = STACKTOP; //@line 9937
     STACKTOP = sp; //@line 9938
     return 0; //@line 9938
    } else {
     _emscripten_free_async_context($AsyncCtx14 | 0); //@line 9940
     $84 = HEAP32[$59 >> 2] | 0; //@line 9942
     break;
    }
   }
  } while (0);
  HEAP32[$64 >> 2] = $84; //@line 9947
  $$pr = HEAP32[$59 >> 2] | 0; //@line 9948
  if (!$$pr) {
   $94 = 0; //@line 9951
   $95 = $0; //@line 9951
  } else {
   $87 = $$pr; //@line 9953
   $91 = $0; //@line 9953
   label = 33; //@line 9954
  }
 }
 do {
  if ((label | 0) == 33) {
   $88 = HEAP32[$87 + 4 >> 2] | 0; //@line 9960
   $AsyncCtx17 = _emscripten_alloc_async_context(16, sp) | 0; //@line 9961
   FUNCTION_TABLE_vii[$88 & 15]($2, $58); //@line 9962
   if (___async) {
    HEAP32[$AsyncCtx17 >> 2] = 338; //@line 9965
    HEAP32[$AsyncCtx17 + 4 >> 2] = $59; //@line 9967
    HEAP32[$AsyncCtx17 + 8 >> 2] = $91; //@line 9969
    HEAP32[$AsyncCtx17 + 12 >> 2] = $2; //@line 9971
    sp = STACKTOP; //@line 9972
    STACKTOP = sp; //@line 9973
    return 0; //@line 9973
   } else {
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 9975
    $94 = HEAP32[$59 >> 2] | 0; //@line 9977
    $95 = $91; //@line 9977
    break;
   }
  }
 } while (0);
 $93 = $2 + 12 | 0; //@line 9982
 HEAP32[$93 >> 2] = $94; //@line 9983
 $AsyncCtx24 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9984
 __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($95, $2); //@line 9985
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 339; //@line 9988
  HEAP32[$AsyncCtx24 + 4 >> 2] = $93; //@line 9990
  HEAP32[$AsyncCtx24 + 8 >> 2] = $2; //@line 9992
  sp = STACKTOP; //@line 9993
  STACKTOP = sp; //@line 9994
  return 0; //@line 9994
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 9996
 $98 = HEAP32[$93 >> 2] | 0; //@line 9997
 if (!$98) {
  $$0 = 0; //@line 10000
  STACKTOP = sp; //@line 10001
  return $$0 | 0; //@line 10001
 }
 $101 = HEAP32[$98 + 8 >> 2] | 0; //@line 10004
 $AsyncCtx21 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10005
 FUNCTION_TABLE_vi[$101 & 1023]($2); //@line 10006
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 340; //@line 10009
  sp = STACKTOP; //@line 10010
  STACKTOP = sp; //@line 10011
  return 0; //@line 10011
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 10013
 $$0 = 0; //@line 10014
 STACKTOP = sp; //@line 10015
 return $$0 | 0; //@line 10015
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 27184
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27186
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27188
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27190
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27192
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27194
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27196
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27198
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27200
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 27202
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 27204
 $$pre = HEAP32[$12 >> 2] | 0; //@line 27205
 if ($$pre | 0) {
  $23 = HEAP32[$$pre + 4 >> 2] | 0; //@line 27209
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 27210
  FUNCTION_TABLE_vii[$23 & 15]($8, $16); //@line 27211
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 167; //@line 27214
   $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 27215
   HEAP32[$24 >> 2] = $2; //@line 27216
   $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 27217
   HEAP32[$25 >> 2] = $4; //@line 27218
   $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 27219
   HEAP32[$26 >> 2] = $6; //@line 27220
   $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 27221
   HEAP32[$27 >> 2] = $8; //@line 27222
   $28 = $ReallocAsyncCtx2 + 20 | 0; //@line 27223
   HEAP32[$28 >> 2] = $10; //@line 27224
   $29 = $ReallocAsyncCtx2 + 24 | 0; //@line 27225
   HEAP32[$29 >> 2] = $12; //@line 27226
   $30 = $ReallocAsyncCtx2 + 28 | 0; //@line 27227
   HEAP32[$30 >> 2] = $14; //@line 27228
   $31 = $ReallocAsyncCtx2 + 32 | 0; //@line 27229
   HEAP32[$31 >> 2] = $16; //@line 27230
   $32 = $ReallocAsyncCtx2 + 36 | 0; //@line 27231
   HEAP32[$32 >> 2] = $18; //@line 27232
   $33 = $ReallocAsyncCtx2 + 40 | 0; //@line 27233
   HEAP32[$33 >> 2] = $20; //@line 27234
   sp = STACKTOP; //@line 27235
   return;
  }
  ___async_unwind = 0; //@line 27238
  HEAP32[$ReallocAsyncCtx2 >> 2] = 167; //@line 27239
  $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 27240
  HEAP32[$24 >> 2] = $2; //@line 27241
  $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 27242
  HEAP32[$25 >> 2] = $4; //@line 27243
  $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 27244
  HEAP32[$26 >> 2] = $6; //@line 27245
  $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 27246
  HEAP32[$27 >> 2] = $8; //@line 27247
  $28 = $ReallocAsyncCtx2 + 20 | 0; //@line 27248
  HEAP32[$28 >> 2] = $10; //@line 27249
  $29 = $ReallocAsyncCtx2 + 24 | 0; //@line 27250
  HEAP32[$29 >> 2] = $12; //@line 27251
  $30 = $ReallocAsyncCtx2 + 28 | 0; //@line 27252
  HEAP32[$30 >> 2] = $14; //@line 27253
  $31 = $ReallocAsyncCtx2 + 32 | 0; //@line 27254
  HEAP32[$31 >> 2] = $16; //@line 27255
  $32 = $ReallocAsyncCtx2 + 36 | 0; //@line 27256
  HEAP32[$32 >> 2] = $18; //@line 27257
  $33 = $ReallocAsyncCtx2 + 40 | 0; //@line 27258
  HEAP32[$33 >> 2] = $20; //@line 27259
  sp = STACKTOP; //@line 27260
  return;
 }
 HEAP32[$14 >> 2] = 0; //@line 27263
 $34 = $18 + 12 | 0; //@line 27264
 HEAP32[$18 >> 2] = 6; //@line 27265
 HEAP32[$18 + 4 >> 2] = 0; //@line 27267
 HEAP32[$18 + 8 >> 2] = $4; //@line 27269
 HEAP32[$34 >> 2] = 820; //@line 27270
 $35 = $4 + 2400 | 0; //@line 27271
 if (($35 | 0) == ($18 | 0)) {
  $64 = HEAP32[207] | 0; //@line 27275
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 27276
  FUNCTION_TABLE_vi[$64 & 1023]($18); //@line 27277
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 171; //@line 27280
   $65 = $ReallocAsyncCtx6 + 4 | 0; //@line 27281
   HEAP32[$65 >> 2] = $2; //@line 27282
   $66 = $ReallocAsyncCtx6 + 8 | 0; //@line 27283
   HEAP32[$66 >> 2] = $4; //@line 27284
   $67 = $ReallocAsyncCtx6 + 12 | 0; //@line 27285
   HEAP32[$67 >> 2] = $6; //@line 27286
   $68 = $ReallocAsyncCtx6 + 16 | 0; //@line 27287
   HEAP32[$68 >> 2] = $8; //@line 27288
   $69 = $ReallocAsyncCtx6 + 20 | 0; //@line 27289
   HEAP32[$69 >> 2] = $18; //@line 27290
   $70 = $ReallocAsyncCtx6 + 24 | 0; //@line 27291
   HEAP32[$70 >> 2] = $10; //@line 27292
   $71 = $ReallocAsyncCtx6 + 28 | 0; //@line 27293
   HEAP32[$71 >> 2] = $20; //@line 27294
   sp = STACKTOP; //@line 27295
   return;
  }
  ___async_unwind = 0; //@line 27298
  HEAP32[$ReallocAsyncCtx6 >> 2] = 171; //@line 27299
  $65 = $ReallocAsyncCtx6 + 4 | 0; //@line 27300
  HEAP32[$65 >> 2] = $2; //@line 27301
  $66 = $ReallocAsyncCtx6 + 8 | 0; //@line 27302
  HEAP32[$66 >> 2] = $4; //@line 27303
  $67 = $ReallocAsyncCtx6 + 12 | 0; //@line 27304
  HEAP32[$67 >> 2] = $6; //@line 27305
  $68 = $ReallocAsyncCtx6 + 16 | 0; //@line 27306
  HEAP32[$68 >> 2] = $8; //@line 27307
  $69 = $ReallocAsyncCtx6 + 20 | 0; //@line 27308
  HEAP32[$69 >> 2] = $18; //@line 27309
  $70 = $ReallocAsyncCtx6 + 24 | 0; //@line 27310
  HEAP32[$70 >> 2] = $10; //@line 27311
  $71 = $ReallocAsyncCtx6 + 28 | 0; //@line 27312
  HEAP32[$71 >> 2] = $20; //@line 27313
  sp = STACKTOP; //@line 27314
  return;
 }
 $37 = $4 + 2412 | 0; //@line 27317
 $38 = HEAP32[$37 >> 2] | 0; //@line 27318
 if (!$38) {
  $53 = HEAP32[206] | 0; //@line 27322
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 27323
  FUNCTION_TABLE_vii[$53 & 15]($35, $18); //@line 27324
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 170; //@line 27327
   $54 = $ReallocAsyncCtx5 + 4 | 0; //@line 27328
   HEAP32[$54 >> 2] = $2; //@line 27329
   $55 = $ReallocAsyncCtx5 + 8 | 0; //@line 27330
   HEAP32[$55 >> 2] = $4; //@line 27331
   $56 = $ReallocAsyncCtx5 + 12 | 0; //@line 27332
   HEAP32[$56 >> 2] = $34; //@line 27333
   $57 = $ReallocAsyncCtx5 + 16 | 0; //@line 27334
   HEAP32[$57 >> 2] = $37; //@line 27335
   $58 = $ReallocAsyncCtx5 + 20 | 0; //@line 27336
   HEAP32[$58 >> 2] = $6; //@line 27337
   $59 = $ReallocAsyncCtx5 + 24 | 0; //@line 27338
   HEAP32[$59 >> 2] = $8; //@line 27339
   $60 = $ReallocAsyncCtx5 + 28 | 0; //@line 27340
   HEAP32[$60 >> 2] = $18; //@line 27341
   $61 = $ReallocAsyncCtx5 + 32 | 0; //@line 27342
   HEAP32[$61 >> 2] = $10; //@line 27343
   $62 = $ReallocAsyncCtx5 + 36 | 0; //@line 27344
   HEAP32[$62 >> 2] = $20; //@line 27345
   sp = STACKTOP; //@line 27346
   return;
  }
  ___async_unwind = 0; //@line 27349
  HEAP32[$ReallocAsyncCtx5 >> 2] = 170; //@line 27350
  $54 = $ReallocAsyncCtx5 + 4 | 0; //@line 27351
  HEAP32[$54 >> 2] = $2; //@line 27352
  $55 = $ReallocAsyncCtx5 + 8 | 0; //@line 27353
  HEAP32[$55 >> 2] = $4; //@line 27354
  $56 = $ReallocAsyncCtx5 + 12 | 0; //@line 27355
  HEAP32[$56 >> 2] = $34; //@line 27356
  $57 = $ReallocAsyncCtx5 + 16 | 0; //@line 27357
  HEAP32[$57 >> 2] = $37; //@line 27358
  $58 = $ReallocAsyncCtx5 + 20 | 0; //@line 27359
  HEAP32[$58 >> 2] = $6; //@line 27360
  $59 = $ReallocAsyncCtx5 + 24 | 0; //@line 27361
  HEAP32[$59 >> 2] = $8; //@line 27362
  $60 = $ReallocAsyncCtx5 + 28 | 0; //@line 27363
  HEAP32[$60 >> 2] = $18; //@line 27364
  $61 = $ReallocAsyncCtx5 + 32 | 0; //@line 27365
  HEAP32[$61 >> 2] = $10; //@line 27366
  $62 = $ReallocAsyncCtx5 + 36 | 0; //@line 27367
  HEAP32[$62 >> 2] = $20; //@line 27368
  sp = STACKTOP; //@line 27369
  return;
 } else {
  $41 = HEAP32[$38 + 8 >> 2] | 0; //@line 27373
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(44) | 0; //@line 27374
  FUNCTION_TABLE_vi[$41 & 1023]($35); //@line 27375
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 169; //@line 27378
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 27379
   HEAP32[$42 >> 2] = $2; //@line 27380
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 27381
   HEAP32[$43 >> 2] = $4; //@line 27382
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 27383
   HEAP32[$44 >> 2] = $34; //@line 27384
   $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 27385
   HEAP32[$45 >> 2] = $37; //@line 27386
   $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 27387
   HEAP32[$46 >> 2] = $6; //@line 27388
   $47 = $ReallocAsyncCtx4 + 24 | 0; //@line 27389
   HEAP32[$47 >> 2] = $8; //@line 27390
   $48 = $ReallocAsyncCtx4 + 28 | 0; //@line 27391
   HEAP32[$48 >> 2] = $18; //@line 27392
   $49 = $ReallocAsyncCtx4 + 32 | 0; //@line 27393
   HEAP32[$49 >> 2] = $10; //@line 27394
   $50 = $ReallocAsyncCtx4 + 36 | 0; //@line 27395
   HEAP32[$50 >> 2] = $35; //@line 27396
   $51 = $ReallocAsyncCtx4 + 40 | 0; //@line 27397
   HEAP32[$51 >> 2] = $20; //@line 27398
   sp = STACKTOP; //@line 27399
   return;
  }
  ___async_unwind = 0; //@line 27402
  HEAP32[$ReallocAsyncCtx4 >> 2] = 169; //@line 27403
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 27404
  HEAP32[$42 >> 2] = $2; //@line 27405
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 27406
  HEAP32[$43 >> 2] = $4; //@line 27407
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 27408
  HEAP32[$44 >> 2] = $34; //@line 27409
  $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 27410
  HEAP32[$45 >> 2] = $37; //@line 27411
  $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 27412
  HEAP32[$46 >> 2] = $6; //@line 27413
  $47 = $ReallocAsyncCtx4 + 24 | 0; //@line 27414
  HEAP32[$47 >> 2] = $8; //@line 27415
  $48 = $ReallocAsyncCtx4 + 28 | 0; //@line 27416
  HEAP32[$48 >> 2] = $18; //@line 27417
  $49 = $ReallocAsyncCtx4 + 32 | 0; //@line 27418
  HEAP32[$49 >> 2] = $10; //@line 27419
  $50 = $ReallocAsyncCtx4 + 36 | 0; //@line 27420
  HEAP32[$50 >> 2] = $35; //@line 27421
  $51 = $ReallocAsyncCtx4 + 40 | 0; //@line 27422
  HEAP32[$51 >> 2] = $20; //@line 27423
  sp = STACKTOP; //@line 27424
  return;
 }
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = $15 | 0;
 $16 = $16 | 0;
 $17 = $17 | 0;
 $18 = $18 | 0;
 var $106 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $47 = 0, $49 = 0, $62 = 0, $64 = 0, $77 = 0, $79 = 0, $92 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 2167
 HEAP32[$0 >> 2] = 496; //@line 2168
 $19 = $0 + 4 | 0; //@line 2169
 HEAP32[$19 >> 2] = 0; //@line 2170
 HEAP32[$19 + 4 >> 2] = 0; //@line 2170
 HEAP32[$19 + 8 >> 2] = 0; //@line 2170
 HEAP32[$19 + 12 >> 2] = 0; //@line 2170
 HEAP32[$19 + 16 >> 2] = 0; //@line 2170
 HEAP32[$19 + 20 >> 2] = 0; //@line 2170
 _gpio_init_out_ex($19, $4, 1); //@line 2171
 $20 = $0 + 28 | 0; //@line 2172
 HEAP32[$20 >> 2] = 0; //@line 2173
 HEAP32[$20 + 4 >> 2] = 0; //@line 2173
 HEAP32[$20 + 8 >> 2] = 0; //@line 2173
 HEAP32[$20 + 12 >> 2] = 0; //@line 2173
 HEAP32[$20 + 16 >> 2] = 0; //@line 2173
 HEAP32[$20 + 20 >> 2] = 0; //@line 2173
 _gpio_init_in($20, $5); //@line 2174
 __ZN4mbed11InterruptInC2E7PinName($0 + 52 | 0, $6); //@line 2176
 __ZN4mbed11InterruptInC2E7PinName($0 + 124 | 0, $7); //@line 2178
 __ZN4mbed11InterruptInC2E7PinName($0 + 196 | 0, $8); //@line 2180
 __ZN4mbed11InterruptInC2E7PinName($0 + 268 | 0, $9); //@line 2182
 __ZN4mbed11InterruptInC2E7PinName($0 + 340 | 0, $10); //@line 2184
 __ZN4mbed11InterruptInC2E7PinName($0 + 412 | 0, $11); //@line 2186
 $27 = $0 + 484 | 0; //@line 2187
 HEAP32[$27 >> 2] = 0; //@line 2188
 HEAP32[$27 + 4 >> 2] = 0; //@line 2188
 HEAP32[$27 + 8 >> 2] = 0; //@line 2188
 HEAP32[$27 + 12 >> 2] = 0; //@line 2188
 HEAP32[$27 + 16 >> 2] = 0; //@line 2188
 HEAP32[$27 + 20 >> 2] = 0; //@line 2188
 _gpio_init_out_ex($27, $12, 0); //@line 2189
 $28 = $0 + 508 | 0; //@line 2190
 HEAP32[$28 >> 2] = 0; //@line 2191
 HEAP32[$28 + 4 >> 2] = 0; //@line 2191
 HEAP32[$28 + 8 >> 2] = 0; //@line 2191
 HEAP32[$28 + 12 >> 2] = 0; //@line 2191
 HEAP32[$28 + 16 >> 2] = 0; //@line 2191
 HEAP32[$28 + 20 >> 2] = 0; //@line 2191
 _gpio_init_out_ex($28, $13, 0); //@line 2192
 $29 = $0 + 532 | 0; //@line 2193
 HEAP32[$29 >> 2] = 0; //@line 2194
 HEAP32[$29 + 4 >> 2] = 0; //@line 2194
 HEAP32[$29 + 8 >> 2] = 0; //@line 2194
 HEAP32[$29 + 12 >> 2] = 0; //@line 2194
 HEAP32[$29 + 16 >> 2] = 0; //@line 2194
 HEAP32[$29 + 20 >> 2] = 0; //@line 2194
 _gpio_init_out_ex($29, $14, 0); //@line 2195
 $30 = $0 + 556 | 0; //@line 2196
 HEAP32[$30 >> 2] = 0; //@line 2197
 HEAP32[$30 + 4 >> 2] = 0; //@line 2197
 HEAP32[$30 + 8 >> 2] = 0; //@line 2197
 HEAP32[$30 + 12 >> 2] = 0; //@line 2197
 HEAP32[$30 + 16 >> 2] = 0; //@line 2197
 HEAP32[$30 + 20 >> 2] = 0; //@line 2197
 _gpio_init_out_ex($30, $15, 0); //@line 2198
 $31 = $0 + 580 | 0; //@line 2199
 HEAP32[$31 >> 2] = 0; //@line 2200
 HEAP32[$31 + 4 >> 2] = 0; //@line 2200
 HEAP32[$31 + 8 >> 2] = 0; //@line 2200
 HEAP32[$31 + 12 >> 2] = 0; //@line 2200
 HEAP32[$31 + 16 >> 2] = 0; //@line 2200
 HEAP32[$31 + 20 >> 2] = 0; //@line 2200
 _gpio_init_inout($31, $16, 0, 0, 0); //@line 2201
 $32 = $0 + 604 | 0; //@line 2202
 HEAP32[$32 >> 2] = 0; //@line 2203
 HEAP32[$32 + 4 >> 2] = 0; //@line 2203
 HEAP32[$32 + 8 >> 2] = 0; //@line 2203
 HEAP32[$32 + 12 >> 2] = 0; //@line 2203
 HEAP32[$32 + 16 >> 2] = 0; //@line 2203
 HEAP32[$32 + 20 >> 2] = 0; //@line 2203
 _gpio_init_out($32, $17); //@line 2204
 $33 = $0 + 628 | 0; //@line 2205
 HEAP32[$33 >> 2] = 0; //@line 2206
 HEAP32[$33 + 4 >> 2] = 0; //@line 2206
 HEAP32[$33 + 8 >> 2] = 0; //@line 2206
 HEAP32[$33 + 12 >> 2] = 0; //@line 2206
 HEAP32[$33 + 16 >> 2] = 0; //@line 2206
 HEAP32[$33 + 20 >> 2] = 0; //@line 2206
 _gpio_init_out($33, $18); //@line 2207
 $34 = $0 + 1048 | 0; //@line 2208
 $AsyncCtx11 = _emscripten_alloc_async_context(52, sp) | 0; //@line 2209
 __ZN4mbed10TimerEventC2Ev($34); //@line 2210
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 94; //@line 2213
  HEAP32[$AsyncCtx11 + 4 >> 2] = $34; //@line 2215
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 2217
  HEAP32[$AsyncCtx11 + 12 >> 2] = $16; //@line 2219
  HEAP32[$AsyncCtx11 + 16 >> 2] = $17; //@line 2221
  HEAP32[$AsyncCtx11 + 20 >> 2] = $12; //@line 2223
  HEAP32[$AsyncCtx11 + 24 >> 2] = $13; //@line 2225
  HEAP32[$AsyncCtx11 + 28 >> 2] = $15; //@line 2227
  HEAP32[$AsyncCtx11 + 32 >> 2] = $14; //@line 2229
  HEAP32[$AsyncCtx11 + 36 >> 2] = $18; //@line 2231
  HEAP32[$AsyncCtx11 + 40 >> 2] = $10; //@line 2233
  HEAP32[$AsyncCtx11 + 44 >> 2] = $11; //@line 2235
  HEAP32[$AsyncCtx11 + 48 >> 2] = $33; //@line 2237
  sp = STACKTOP; //@line 2238
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 2241
 $47 = $0 + 1088 | 0; //@line 2242
 HEAP32[$47 >> 2] = 0; //@line 2243
 HEAP32[$47 + 4 >> 2] = 0; //@line 2243
 HEAP32[$47 + 8 >> 2] = 0; //@line 2243
 HEAP32[$47 + 12 >> 2] = 0; //@line 2243
 HEAP8[$0 + 1104 >> 0] = 1; //@line 2245
 HEAP32[$34 >> 2] = 620; //@line 2246
 $49 = $0 + 1112 | 0; //@line 2247
 $AsyncCtx7 = _emscripten_alloc_async_context(52, sp) | 0; //@line 2248
 __ZN4mbed10TimerEventC2Ev($49); //@line 2249
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 95; //@line 2252
  HEAP32[$AsyncCtx7 + 4 >> 2] = $49; //@line 2254
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 2256
  HEAP32[$AsyncCtx7 + 12 >> 2] = $16; //@line 2258
  HEAP32[$AsyncCtx7 + 16 >> 2] = $17; //@line 2260
  HEAP32[$AsyncCtx7 + 20 >> 2] = $12; //@line 2262
  HEAP32[$AsyncCtx7 + 24 >> 2] = $13; //@line 2264
  HEAP32[$AsyncCtx7 + 28 >> 2] = $15; //@line 2266
  HEAP32[$AsyncCtx7 + 32 >> 2] = $14; //@line 2268
  HEAP32[$AsyncCtx7 + 36 >> 2] = $18; //@line 2270
  HEAP32[$AsyncCtx7 + 40 >> 2] = $10; //@line 2272
  HEAP32[$AsyncCtx7 + 44 >> 2] = $11; //@line 2274
  HEAP32[$AsyncCtx7 + 48 >> 2] = $33; //@line 2276
  sp = STACKTOP; //@line 2277
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 2280
 $62 = $0 + 1152 | 0; //@line 2281
 HEAP32[$62 >> 2] = 0; //@line 2282
 HEAP32[$62 + 4 >> 2] = 0; //@line 2282
 HEAP32[$62 + 8 >> 2] = 0; //@line 2282
 HEAP32[$62 + 12 >> 2] = 0; //@line 2282
 HEAP8[$0 + 1168 >> 0] = 1; //@line 2284
 HEAP32[$49 >> 2] = 620; //@line 2285
 $64 = $0 + 1176 | 0; //@line 2286
 $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 2287
 __ZN4mbed10TimerEventC2Ev($64); //@line 2288
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 96; //@line 2291
  HEAP32[$AsyncCtx3 + 4 >> 2] = $64; //@line 2293
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 2295
  HEAP32[$AsyncCtx3 + 12 >> 2] = $16; //@line 2297
  HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 2299
  HEAP32[$AsyncCtx3 + 20 >> 2] = $12; //@line 2301
  HEAP32[$AsyncCtx3 + 24 >> 2] = $13; //@line 2303
  HEAP32[$AsyncCtx3 + 28 >> 2] = $15; //@line 2305
  HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 2307
  HEAP32[$AsyncCtx3 + 36 >> 2] = $18; //@line 2309
  HEAP32[$AsyncCtx3 + 40 >> 2] = $10; //@line 2311
  HEAP32[$AsyncCtx3 + 44 >> 2] = $11; //@line 2313
  HEAP32[$AsyncCtx3 + 48 >> 2] = $33; //@line 2315
  sp = STACKTOP; //@line 2316
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2319
 $77 = $0 + 1216 | 0; //@line 2320
 HEAP32[$77 >> 2] = 0; //@line 2321
 HEAP32[$77 + 4 >> 2] = 0; //@line 2321
 HEAP32[$77 + 8 >> 2] = 0; //@line 2321
 HEAP32[$77 + 12 >> 2] = 0; //@line 2321
 HEAP8[$0 + 1232 >> 0] = 1; //@line 2323
 HEAP32[$64 >> 2] = 620; //@line 2324
 $79 = $0 + 1240 | 0; //@line 2325
 $AsyncCtx = _emscripten_alloc_async_context(52, sp) | 0; //@line 2326
 __ZN4mbed10TimerEventC2Ev($79); //@line 2327
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 97; //@line 2330
  HEAP32[$AsyncCtx + 4 >> 2] = $79; //@line 2332
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 2334
  HEAP32[$AsyncCtx + 12 >> 2] = $16; //@line 2336
  HEAP32[$AsyncCtx + 16 >> 2] = $17; //@line 2338
  HEAP32[$AsyncCtx + 20 >> 2] = $12; //@line 2340
  HEAP32[$AsyncCtx + 24 >> 2] = $13; //@line 2342
  HEAP32[$AsyncCtx + 28 >> 2] = $15; //@line 2344
  HEAP32[$AsyncCtx + 32 >> 2] = $14; //@line 2346
  HEAP32[$AsyncCtx + 36 >> 2] = $18; //@line 2348
  HEAP32[$AsyncCtx + 40 >> 2] = $10; //@line 2350
  HEAP32[$AsyncCtx + 44 >> 2] = $11; //@line 2352
  HEAP32[$AsyncCtx + 48 >> 2] = $33; //@line 2354
  sp = STACKTOP; //@line 2355
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2358
 $92 = $0 + 1280 | 0; //@line 2359
 HEAP32[$92 >> 2] = 0; //@line 2360
 HEAP32[$92 + 4 >> 2] = 0; //@line 2360
 HEAP32[$92 + 8 >> 2] = 0; //@line 2360
 HEAP32[$92 + 12 >> 2] = 0; //@line 2360
 HEAP8[$0 + 1296 >> 0] = 1; //@line 2362
 HEAP32[$79 >> 2] = 620; //@line 2363
 HEAP32[$0 + 668 >> 2] = $16; //@line 2365
 HEAP32[$0 + 672 >> 2] = $17; //@line 2367
 HEAP32[$0 + 652 >> 2] = $12; //@line 2369
 HEAP32[$0 + 656 >> 2] = $13; //@line 2371
 HEAP32[$0 + 664 >> 2] = $15; //@line 2373
 HEAP32[$0 + 660 >> 2] = $14; //@line 2375
 HEAP32[$0 + 676 >> 2] = $18; //@line 2377
 HEAP32[$0 + 680 >> 2] = $10; //@line 2379
 HEAP32[$0 + 684 >> 2] = $11; //@line 2381
 HEAP32[$0 + 788 >> 2] = 0; //@line 2383
 if (($18 | 0) == -1) {
  $106 = _emscripten_asm_const_ii(7, $0 | 0) | 0; //@line 2386
  return;
 }
 _emscripten_asm_const_iii(5, HEAP32[$33 >> 2] | 0, 1) | 0; //@line 2390
 $106 = _emscripten_asm_const_ii(7, $0 | 0) | 0; //@line 2391
 return;
}
function _mbedtls_aes_crypt_cbc($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$04056 = 0, $$04255 = 0, $$044 = 0, $$04554 = 0, $$14160 = 0, $$14160$us = 0, $$14359 = 0, $$14359$us = 0, $$14658 = 0, $$14658$us = 0, $10 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $127 = 0, $13 = 0, $131 = 0, $135 = 0, $139 = 0, $14 = 0, $143 = 0, $147 = 0, $15 = 0, $151 = 0, $155 = 0, $159 = 0, $16 = 0, $163 = 0, $167 = 0, $17 = 0, $171 = 0, $175 = 0, $179 = 0, $18 = 0, $183 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $6 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 1963
 STACKTOP = STACKTOP + 16 | 0; //@line 1964
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1964
 $6 = sp; //@line 1965
 if ($2 & 15 | 0) {
  $$044 = -34; //@line 1969
  STACKTOP = sp; //@line 1970
  return $$044 | 0; //@line 1970
 }
 $10 = ($2 | 0) == 0; //@line 1973
 if (!$1) {
  if ($10) {
   $$044 = 0; //@line 1976
   STACKTOP = sp; //@line 1977
   return $$044 | 0; //@line 1977
  }
  $109 = $3 + 1 | 0; //@line 1979
  $110 = $3 + 2 | 0; //@line 1980
  $111 = $3 + 3 | 0; //@line 1981
  $112 = $3 + 4 | 0; //@line 1982
  $113 = $3 + 5 | 0; //@line 1983
  $114 = $3 + 6 | 0; //@line 1984
  $115 = $3 + 7 | 0; //@line 1985
  $116 = $3 + 8 | 0; //@line 1986
  $117 = $3 + 9 | 0; //@line 1987
  $118 = $3 + 10 | 0; //@line 1988
  $119 = $3 + 11 | 0; //@line 1989
  $120 = $3 + 12 | 0; //@line 1990
  $121 = $3 + 13 | 0; //@line 1991
  $122 = $3 + 14 | 0; //@line 1992
  $123 = $3 + 15 | 0; //@line 1993
  $$04056 = $5; //@line 1994
  $$04255 = $4; //@line 1994
  $$04554 = $2; //@line 1994
  while (1) {
   dest = $6; //@line 1996
   src = $$04255; //@line 1996
   stop = dest + 16 | 0; //@line 1996
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1996
    dest = dest + 1 | 0; //@line 1996
    src = src + 1 | 0; //@line 1996
   } while ((dest | 0) < (stop | 0));
   _mbedtls_internal_aes_decrypt($0, $$04255, $$04056) | 0; //@line 1997
   HEAP8[$$04056 >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$04056 >> 0]; //@line 2001
   $127 = $$04056 + 1 | 0; //@line 2002
   HEAP8[$127 >> 0] = HEAP8[$109 >> 0] ^ HEAP8[$127 >> 0]; //@line 2006
   $131 = $$04056 + 2 | 0; //@line 2007
   HEAP8[$131 >> 0] = HEAP8[$110 >> 0] ^ HEAP8[$131 >> 0]; //@line 2011
   $135 = $$04056 + 3 | 0; //@line 2012
   HEAP8[$135 >> 0] = HEAP8[$111 >> 0] ^ HEAP8[$135 >> 0]; //@line 2016
   $139 = $$04056 + 4 | 0; //@line 2017
   HEAP8[$139 >> 0] = HEAP8[$112 >> 0] ^ HEAP8[$139 >> 0]; //@line 2021
   $143 = $$04056 + 5 | 0; //@line 2022
   HEAP8[$143 >> 0] = HEAP8[$113 >> 0] ^ HEAP8[$143 >> 0]; //@line 2026
   $147 = $$04056 + 6 | 0; //@line 2027
   HEAP8[$147 >> 0] = HEAP8[$114 >> 0] ^ HEAP8[$147 >> 0]; //@line 2031
   $151 = $$04056 + 7 | 0; //@line 2032
   HEAP8[$151 >> 0] = HEAP8[$115 >> 0] ^ HEAP8[$151 >> 0]; //@line 2036
   $155 = $$04056 + 8 | 0; //@line 2037
   HEAP8[$155 >> 0] = HEAP8[$116 >> 0] ^ HEAP8[$155 >> 0]; //@line 2041
   $159 = $$04056 + 9 | 0; //@line 2042
   HEAP8[$159 >> 0] = HEAP8[$117 >> 0] ^ HEAP8[$159 >> 0]; //@line 2046
   $163 = $$04056 + 10 | 0; //@line 2047
   HEAP8[$163 >> 0] = HEAP8[$118 >> 0] ^ HEAP8[$163 >> 0]; //@line 2051
   $167 = $$04056 + 11 | 0; //@line 2052
   HEAP8[$167 >> 0] = HEAP8[$119 >> 0] ^ HEAP8[$167 >> 0]; //@line 2056
   $171 = $$04056 + 12 | 0; //@line 2057
   HEAP8[$171 >> 0] = HEAP8[$120 >> 0] ^ HEAP8[$171 >> 0]; //@line 2061
   $175 = $$04056 + 13 | 0; //@line 2062
   HEAP8[$175 >> 0] = HEAP8[$121 >> 0] ^ HEAP8[$175 >> 0]; //@line 2066
   $179 = $$04056 + 14 | 0; //@line 2067
   HEAP8[$179 >> 0] = HEAP8[$122 >> 0] ^ HEAP8[$179 >> 0]; //@line 2071
   $183 = $$04056 + 15 | 0; //@line 2072
   HEAP8[$183 >> 0] = HEAP8[$123 >> 0] ^ HEAP8[$183 >> 0]; //@line 2076
   dest = $3; //@line 2077
   src = $6; //@line 2077
   stop = dest + 16 | 0; //@line 2077
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 2077
    dest = dest + 1 | 0; //@line 2077
    src = src + 1 | 0; //@line 2077
   } while ((dest | 0) < (stop | 0));
   $$04554 = $$04554 + -16 | 0; //@line 2080
   if (!$$04554) {
    $$044 = 0; //@line 2083
    break;
   } else {
    $$04056 = $$04056 + 16 | 0; //@line 2086
    $$04255 = $$04255 + 16 | 0; //@line 2086
   }
  }
  STACKTOP = sp; //@line 2089
  return $$044 | 0; //@line 2089
 }
 if ($10) {
  $$044 = 0; //@line 2092
  STACKTOP = sp; //@line 2093
  return $$044 | 0; //@line 2093
 }
 $12 = $3 + 1 | 0; //@line 2096
 $13 = $3 + 2 | 0; //@line 2097
 $14 = $3 + 3 | 0; //@line 2098
 $15 = $3 + 4 | 0; //@line 2099
 $16 = $3 + 5 | 0; //@line 2100
 $17 = $3 + 6 | 0; //@line 2101
 $18 = $3 + 7 | 0; //@line 2102
 $19 = $3 + 8 | 0; //@line 2103
 $20 = $3 + 9 | 0; //@line 2104
 $21 = $3 + 10 | 0; //@line 2105
 $22 = $3 + 11 | 0; //@line 2106
 $23 = $3 + 12 | 0; //@line 2107
 $24 = $3 + 13 | 0; //@line 2108
 $25 = $3 + 14 | 0; //@line 2109
 $26 = $3 + 15 | 0; //@line 2110
 if (($1 | 0) == 1) {
  $$14160$us = $5; //@line 2112
  $$14359$us = $4; //@line 2112
  $$14658$us = $2; //@line 2112
  while (1) {
   HEAP8[$$14160$us >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$14359$us >> 0]; //@line 2117
   HEAP8[$$14160$us + 1 >> 0] = HEAP8[$12 >> 0] ^ HEAP8[$$14359$us + 1 >> 0]; //@line 2123
   HEAP8[$$14160$us + 2 >> 0] = HEAP8[$13 >> 0] ^ HEAP8[$$14359$us + 2 >> 0]; //@line 2129
   HEAP8[$$14160$us + 3 >> 0] = HEAP8[$14 >> 0] ^ HEAP8[$$14359$us + 3 >> 0]; //@line 2135
   HEAP8[$$14160$us + 4 >> 0] = HEAP8[$15 >> 0] ^ HEAP8[$$14359$us + 4 >> 0]; //@line 2141
   HEAP8[$$14160$us + 5 >> 0] = HEAP8[$16 >> 0] ^ HEAP8[$$14359$us + 5 >> 0]; //@line 2147
   HEAP8[$$14160$us + 6 >> 0] = HEAP8[$17 >> 0] ^ HEAP8[$$14359$us + 6 >> 0]; //@line 2153
   HEAP8[$$14160$us + 7 >> 0] = HEAP8[$18 >> 0] ^ HEAP8[$$14359$us + 7 >> 0]; //@line 2159
   HEAP8[$$14160$us + 8 >> 0] = HEAP8[$19 >> 0] ^ HEAP8[$$14359$us + 8 >> 0]; //@line 2165
   HEAP8[$$14160$us + 9 >> 0] = HEAP8[$20 >> 0] ^ HEAP8[$$14359$us + 9 >> 0]; //@line 2171
   HEAP8[$$14160$us + 10 >> 0] = HEAP8[$21 >> 0] ^ HEAP8[$$14359$us + 10 >> 0]; //@line 2177
   HEAP8[$$14160$us + 11 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$$14359$us + 11 >> 0]; //@line 2183
   HEAP8[$$14160$us + 12 >> 0] = HEAP8[$23 >> 0] ^ HEAP8[$$14359$us + 12 >> 0]; //@line 2189
   HEAP8[$$14160$us + 13 >> 0] = HEAP8[$24 >> 0] ^ HEAP8[$$14359$us + 13 >> 0]; //@line 2195
   HEAP8[$$14160$us + 14 >> 0] = HEAP8[$25 >> 0] ^ HEAP8[$$14359$us + 14 >> 0]; //@line 2201
   HEAP8[$$14160$us + 15 >> 0] = HEAP8[$26 >> 0] ^ HEAP8[$$14359$us + 15 >> 0]; //@line 2207
   _mbedtls_internal_aes_encrypt($0, $$14160$us, $$14160$us) | 0; //@line 2208
   dest = $3; //@line 2209
   src = $$14160$us; //@line 2209
   stop = dest + 16 | 0; //@line 2209
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 2209
    dest = dest + 1 | 0; //@line 2209
    src = src + 1 | 0; //@line 2209
   } while ((dest | 0) < (stop | 0));
   $$14658$us = $$14658$us + -16 | 0; //@line 2212
   if (!$$14658$us) {
    $$044 = 0; //@line 2215
    break;
   } else {
    $$14160$us = $$14160$us + 16 | 0; //@line 2218
    $$14359$us = $$14359$us + 16 | 0; //@line 2218
   }
  }
  STACKTOP = sp; //@line 2221
  return $$044 | 0; //@line 2221
 } else {
  $$14160 = $5; //@line 2223
  $$14359 = $4; //@line 2223
  $$14658 = $2; //@line 2223
  while (1) {
   HEAP8[$$14160 >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$14359 >> 0]; //@line 2228
   HEAP8[$$14160 + 1 >> 0] = HEAP8[$12 >> 0] ^ HEAP8[$$14359 + 1 >> 0]; //@line 2234
   HEAP8[$$14160 + 2 >> 0] = HEAP8[$13 >> 0] ^ HEAP8[$$14359 + 2 >> 0]; //@line 2240
   HEAP8[$$14160 + 3 >> 0] = HEAP8[$14 >> 0] ^ HEAP8[$$14359 + 3 >> 0]; //@line 2246
   HEAP8[$$14160 + 4 >> 0] = HEAP8[$15 >> 0] ^ HEAP8[$$14359 + 4 >> 0]; //@line 2252
   HEAP8[$$14160 + 5 >> 0] = HEAP8[$16 >> 0] ^ HEAP8[$$14359 + 5 >> 0]; //@line 2258
   HEAP8[$$14160 + 6 >> 0] = HEAP8[$17 >> 0] ^ HEAP8[$$14359 + 6 >> 0]; //@line 2264
   HEAP8[$$14160 + 7 >> 0] = HEAP8[$18 >> 0] ^ HEAP8[$$14359 + 7 >> 0]; //@line 2270
   HEAP8[$$14160 + 8 >> 0] = HEAP8[$19 >> 0] ^ HEAP8[$$14359 + 8 >> 0]; //@line 2276
   HEAP8[$$14160 + 9 >> 0] = HEAP8[$20 >> 0] ^ HEAP8[$$14359 + 9 >> 0]; //@line 2282
   HEAP8[$$14160 + 10 >> 0] = HEAP8[$21 >> 0] ^ HEAP8[$$14359 + 10 >> 0]; //@line 2288
   HEAP8[$$14160 + 11 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$$14359 + 11 >> 0]; //@line 2294
   HEAP8[$$14160 + 12 >> 0] = HEAP8[$23 >> 0] ^ HEAP8[$$14359 + 12 >> 0]; //@line 2300
   HEAP8[$$14160 + 13 >> 0] = HEAP8[$24 >> 0] ^ HEAP8[$$14359 + 13 >> 0]; //@line 2306
   HEAP8[$$14160 + 14 >> 0] = HEAP8[$25 >> 0] ^ HEAP8[$$14359 + 14 >> 0]; //@line 2312
   HEAP8[$$14160 + 15 >> 0] = HEAP8[$26 >> 0] ^ HEAP8[$$14359 + 15 >> 0]; //@line 2318
   _mbedtls_internal_aes_decrypt($0, $$14160, $$14160) | 0; //@line 2319
   dest = $3; //@line 2320
   src = $$14160; //@line 2320
   stop = dest + 16 | 0; //@line 2320
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 2320
    dest = dest + 1 | 0; //@line 2320
    src = src + 1 | 0; //@line 2320
   } while ((dest | 0) < (stop | 0));
   $$14658 = $$14658 + -16 | 0; //@line 2323
   if (!$$14658) {
    $$044 = 0; //@line 2326
    break;
   } else {
    $$14160 = $$14160 + 16 | 0; //@line 2329
    $$14359 = $$14359 + 16 | 0; //@line 2329
   }
  }
  STACKTOP = sp; //@line 2332
  return $$044 | 0; //@line 2332
 }
 return 0; //@line 2334
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_362($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $10 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 27435
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27437
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27439
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27441
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27443
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27445
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27451
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 27453
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 27455
 $$pre$i$i = HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0; //@line 27456
 HEAP32[HEAP32[$0 + 28 >> 2] >> 2] = $$pre$i$i; //@line 27458
 if ($$pre$i$i | 0) {
  $24 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 27462
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 27463
  FUNCTION_TABLE_vi[$24 & 1023]($16); //@line 27464
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 168; //@line 27467
   $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 27468
   HEAP32[$25 >> 2] = $2; //@line 27469
   $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 27470
   HEAP32[$26 >> 2] = $4; //@line 27471
   $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 27472
   HEAP32[$27 >> 2] = $6; //@line 27473
   $28 = $ReallocAsyncCtx3 + 16 | 0; //@line 27474
   HEAP32[$28 >> 2] = $8; //@line 27475
   $29 = $ReallocAsyncCtx3 + 20 | 0; //@line 27476
   HEAP32[$29 >> 2] = $10; //@line 27477
   $30 = $ReallocAsyncCtx3 + 24 | 0; //@line 27478
   HEAP32[$30 >> 2] = $16; //@line 27479
   $31 = $ReallocAsyncCtx3 + 28 | 0; //@line 27480
   HEAP32[$31 >> 2] = $18; //@line 27481
   $32 = $ReallocAsyncCtx3 + 32 | 0; //@line 27482
   HEAP32[$32 >> 2] = $20; //@line 27483
   sp = STACKTOP; //@line 27484
   return;
  }
  ___async_unwind = 0; //@line 27487
  HEAP32[$ReallocAsyncCtx3 >> 2] = 168; //@line 27488
  $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 27489
  HEAP32[$25 >> 2] = $2; //@line 27490
  $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 27491
  HEAP32[$26 >> 2] = $4; //@line 27492
  $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 27493
  HEAP32[$27 >> 2] = $6; //@line 27494
  $28 = $ReallocAsyncCtx3 + 16 | 0; //@line 27495
  HEAP32[$28 >> 2] = $8; //@line 27496
  $29 = $ReallocAsyncCtx3 + 20 | 0; //@line 27497
  HEAP32[$29 >> 2] = $10; //@line 27498
  $30 = $ReallocAsyncCtx3 + 24 | 0; //@line 27499
  HEAP32[$30 >> 2] = $16; //@line 27500
  $31 = $ReallocAsyncCtx3 + 28 | 0; //@line 27501
  HEAP32[$31 >> 2] = $18; //@line 27502
  $32 = $ReallocAsyncCtx3 + 32 | 0; //@line 27503
  HEAP32[$32 >> 2] = $20; //@line 27504
  sp = STACKTOP; //@line 27505
  return;
 }
 $33 = $18 + 12 | 0; //@line 27508
 HEAP32[$18 >> 2] = 6; //@line 27509
 HEAP32[$18 + 4 >> 2] = 0; //@line 27511
 HEAP32[$18 + 8 >> 2] = $4; //@line 27513
 HEAP32[$33 >> 2] = 820; //@line 27514
 $34 = $4 + 2400 | 0; //@line 27515
 if (($34 | 0) == ($18 | 0)) {
  $63 = HEAP32[207] | 0; //@line 27519
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 27520
  FUNCTION_TABLE_vi[$63 & 1023]($18); //@line 27521
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 171; //@line 27524
   $64 = $ReallocAsyncCtx6 + 4 | 0; //@line 27525
   HEAP32[$64 >> 2] = $2; //@line 27526
   $65 = $ReallocAsyncCtx6 + 8 | 0; //@line 27527
   HEAP32[$65 >> 2] = $4; //@line 27528
   $66 = $ReallocAsyncCtx6 + 12 | 0; //@line 27529
   HEAP32[$66 >> 2] = $6; //@line 27530
   $67 = $ReallocAsyncCtx6 + 16 | 0; //@line 27531
   HEAP32[$67 >> 2] = $8; //@line 27532
   $68 = $ReallocAsyncCtx6 + 20 | 0; //@line 27533
   HEAP32[$68 >> 2] = $18; //@line 27534
   $69 = $ReallocAsyncCtx6 + 24 | 0; //@line 27535
   HEAP32[$69 >> 2] = $10; //@line 27536
   $70 = $ReallocAsyncCtx6 + 28 | 0; //@line 27537
   HEAP32[$70 >> 2] = $20; //@line 27538
   sp = STACKTOP; //@line 27539
   return;
  }
  ___async_unwind = 0; //@line 27542
  HEAP32[$ReallocAsyncCtx6 >> 2] = 171; //@line 27543
  $64 = $ReallocAsyncCtx6 + 4 | 0; //@line 27544
  HEAP32[$64 >> 2] = $2; //@line 27545
  $65 = $ReallocAsyncCtx6 + 8 | 0; //@line 27546
  HEAP32[$65 >> 2] = $4; //@line 27547
  $66 = $ReallocAsyncCtx6 + 12 | 0; //@line 27548
  HEAP32[$66 >> 2] = $6; //@line 27549
  $67 = $ReallocAsyncCtx6 + 16 | 0; //@line 27550
  HEAP32[$67 >> 2] = $8; //@line 27551
  $68 = $ReallocAsyncCtx6 + 20 | 0; //@line 27552
  HEAP32[$68 >> 2] = $18; //@line 27553
  $69 = $ReallocAsyncCtx6 + 24 | 0; //@line 27554
  HEAP32[$69 >> 2] = $10; //@line 27555
  $70 = $ReallocAsyncCtx6 + 28 | 0; //@line 27556
  HEAP32[$70 >> 2] = $20; //@line 27557
  sp = STACKTOP; //@line 27558
  return;
 }
 $36 = $4 + 2412 | 0; //@line 27561
 $37 = HEAP32[$36 >> 2] | 0; //@line 27562
 if (!$37) {
  $52 = HEAP32[206] | 0; //@line 27566
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 27567
  FUNCTION_TABLE_vii[$52 & 15]($34, $18); //@line 27568
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 170; //@line 27571
   $53 = $ReallocAsyncCtx5 + 4 | 0; //@line 27572
   HEAP32[$53 >> 2] = $2; //@line 27573
   $54 = $ReallocAsyncCtx5 + 8 | 0; //@line 27574
   HEAP32[$54 >> 2] = $4; //@line 27575
   $55 = $ReallocAsyncCtx5 + 12 | 0; //@line 27576
   HEAP32[$55 >> 2] = $33; //@line 27577
   $56 = $ReallocAsyncCtx5 + 16 | 0; //@line 27578
   HEAP32[$56 >> 2] = $36; //@line 27579
   $57 = $ReallocAsyncCtx5 + 20 | 0; //@line 27580
   HEAP32[$57 >> 2] = $6; //@line 27581
   $58 = $ReallocAsyncCtx5 + 24 | 0; //@line 27582
   HEAP32[$58 >> 2] = $8; //@line 27583
   $59 = $ReallocAsyncCtx5 + 28 | 0; //@line 27584
   HEAP32[$59 >> 2] = $18; //@line 27585
   $60 = $ReallocAsyncCtx5 + 32 | 0; //@line 27586
   HEAP32[$60 >> 2] = $10; //@line 27587
   $61 = $ReallocAsyncCtx5 + 36 | 0; //@line 27588
   HEAP32[$61 >> 2] = $20; //@line 27589
   sp = STACKTOP; //@line 27590
   return;
  }
  ___async_unwind = 0; //@line 27593
  HEAP32[$ReallocAsyncCtx5 >> 2] = 170; //@line 27594
  $53 = $ReallocAsyncCtx5 + 4 | 0; //@line 27595
  HEAP32[$53 >> 2] = $2; //@line 27596
  $54 = $ReallocAsyncCtx5 + 8 | 0; //@line 27597
  HEAP32[$54 >> 2] = $4; //@line 27598
  $55 = $ReallocAsyncCtx5 + 12 | 0; //@line 27599
  HEAP32[$55 >> 2] = $33; //@line 27600
  $56 = $ReallocAsyncCtx5 + 16 | 0; //@line 27601
  HEAP32[$56 >> 2] = $36; //@line 27602
  $57 = $ReallocAsyncCtx5 + 20 | 0; //@line 27603
  HEAP32[$57 >> 2] = $6; //@line 27604
  $58 = $ReallocAsyncCtx5 + 24 | 0; //@line 27605
  HEAP32[$58 >> 2] = $8; //@line 27606
  $59 = $ReallocAsyncCtx5 + 28 | 0; //@line 27607
  HEAP32[$59 >> 2] = $18; //@line 27608
  $60 = $ReallocAsyncCtx5 + 32 | 0; //@line 27609
  HEAP32[$60 >> 2] = $10; //@line 27610
  $61 = $ReallocAsyncCtx5 + 36 | 0; //@line 27611
  HEAP32[$61 >> 2] = $20; //@line 27612
  sp = STACKTOP; //@line 27613
  return;
 } else {
  $40 = HEAP32[$37 + 8 >> 2] | 0; //@line 27617
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(44) | 0; //@line 27618
  FUNCTION_TABLE_vi[$40 & 1023]($34); //@line 27619
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 169; //@line 27622
   $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 27623
   HEAP32[$41 >> 2] = $2; //@line 27624
   $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 27625
   HEAP32[$42 >> 2] = $4; //@line 27626
   $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 27627
   HEAP32[$43 >> 2] = $33; //@line 27628
   $44 = $ReallocAsyncCtx4 + 16 | 0; //@line 27629
   HEAP32[$44 >> 2] = $36; //@line 27630
   $45 = $ReallocAsyncCtx4 + 20 | 0; //@line 27631
   HEAP32[$45 >> 2] = $6; //@line 27632
   $46 = $ReallocAsyncCtx4 + 24 | 0; //@line 27633
   HEAP32[$46 >> 2] = $8; //@line 27634
   $47 = $ReallocAsyncCtx4 + 28 | 0; //@line 27635
   HEAP32[$47 >> 2] = $18; //@line 27636
   $48 = $ReallocAsyncCtx4 + 32 | 0; //@line 27637
   HEAP32[$48 >> 2] = $10; //@line 27638
   $49 = $ReallocAsyncCtx4 + 36 | 0; //@line 27639
   HEAP32[$49 >> 2] = $34; //@line 27640
   $50 = $ReallocAsyncCtx4 + 40 | 0; //@line 27641
   HEAP32[$50 >> 2] = $20; //@line 27642
   sp = STACKTOP; //@line 27643
   return;
  }
  ___async_unwind = 0; //@line 27646
  HEAP32[$ReallocAsyncCtx4 >> 2] = 169; //@line 27647
  $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 27648
  HEAP32[$41 >> 2] = $2; //@line 27649
  $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 27650
  HEAP32[$42 >> 2] = $4; //@line 27651
  $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 27652
  HEAP32[$43 >> 2] = $33; //@line 27653
  $44 = $ReallocAsyncCtx4 + 16 | 0; //@line 27654
  HEAP32[$44 >> 2] = $36; //@line 27655
  $45 = $ReallocAsyncCtx4 + 20 | 0; //@line 27656
  HEAP32[$45 >> 2] = $6; //@line 27657
  $46 = $ReallocAsyncCtx4 + 24 | 0; //@line 27658
  HEAP32[$46 >> 2] = $8; //@line 27659
  $47 = $ReallocAsyncCtx4 + 28 | 0; //@line 27660
  HEAP32[$47 >> 2] = $18; //@line 27661
  $48 = $ReallocAsyncCtx4 + 32 | 0; //@line 27662
  HEAP32[$48 >> 2] = $10; //@line 27663
  $49 = $ReallocAsyncCtx4 + 36 | 0; //@line 27664
  HEAP32[$49 >> 2] = $34; //@line 27665
  $50 = $ReallocAsyncCtx4 + 40 | 0; //@line 27666
  HEAP32[$50 >> 2] = $20; //@line 27667
  sp = STACKTOP; //@line 27668
  return;
 }
}
function _initialize($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$037 = 0, $1 = 0, $101 = 0, $102 = 0, $103 = 0, $105 = 0, $106 = 0, $109 = 0, $115 = 0, $116 = 0, $117 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $130 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $140 = 0, $142 = 0, $148 = 0, $149 = 0, $150 = 0, $159 = 0, $160 = 0, $161 = 0, $163 = 0, $167 = 0, $173 = 0, $174 = 0, $175 = 0, $177 = 0, $18 = 0, $25 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $45 = 0, $46 = 0, $52 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $70 = 0, $73 = 0, $77 = 0, $78 = 0, $85 = 0, $86 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5740
 $1 = $0 + 4 | 0; //@line 5741
 if (HEAP8[(HEAP32[$1 >> 2] | 0) + 56 >> 0] | 0) {
  return;
 }
 $7 = HEAP32[HEAP32[$0 >> 2] >> 2] | 0; //@line 5750
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5751
 FUNCTION_TABLE_v[$7 & 7](); //@line 5752
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 582; //@line 5755
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 5757
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 5759
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 5761
  sp = STACKTOP; //@line 5762
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5765
 $13 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 5768
 $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5769
 $14 = FUNCTION_TABLE_i[$13 & 7]() | 0; //@line 5770
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 583; //@line 5773
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 5775
  HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 5777
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 5779
  sp = STACKTOP; //@line 5780
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 5783
 $18 = HEAP32[$14 >> 2] | 0; //@line 5784
 do {
  if (!$18) {
   $AsyncCtx20 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5788
   _mbed_assert_internal(14465, 14467, 41); //@line 5789
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 584; //@line 5792
    HEAP32[$AsyncCtx20 + 4 >> 2] = $1; //@line 5794
    HEAP32[$AsyncCtx20 + 8 >> 2] = $0; //@line 5796
    HEAP32[$AsyncCtx20 + 12 >> 2] = $14; //@line 5798
    HEAP32[$AsyncCtx20 + 16 >> 2] = $0; //@line 5800
    sp = STACKTOP; //@line 5801
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 5804
    $$0 = 1e6; //@line 5805
    break;
   }
  } else {
   $$0 = $18; //@line 5809
  }
 } while (0);
 $25 = HEAP32[$14 + 4 >> 2] | 0; //@line 5813
 do {
  if (($25 + -4 | 0) >>> 0 > 28) {
   $AsyncCtx16 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5818
   _mbed_assert_internal(14465, 14467, 47); //@line 5819
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 585; //@line 5822
    HEAP32[$AsyncCtx16 + 4 >> 2] = $$0; //@line 5824
    HEAP32[$AsyncCtx16 + 8 >> 2] = $1; //@line 5826
    HEAP32[$AsyncCtx16 + 12 >> 2] = $0; //@line 5828
    HEAP32[$AsyncCtx16 + 16 >> 2] = $0; //@line 5830
    sp = STACKTOP; //@line 5831
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx16 | 0); //@line 5834
    $$037 = 32; //@line 5835
    break;
   }
  } else {
   $$037 = $25; //@line 5839
  }
 } while (0);
 $32 = 7 << $$037 + -4; //@line 5843
 $33 = ___muldi3($32 | 0, 0, 1e6, 0) | 0; //@line 5844
 $34 = tempRet0; //@line 5845
 $35 = _i64Add($$0 | 0, 0, -1, -1) | 0; //@line 5846
 $37 = _i64Add($35 | 0, tempRet0 | 0, $33 | 0, $34 | 0) | 0; //@line 5848
 $39 = ___udivdi3($37 | 0, tempRet0 | 0, $$0 | 0, 0) | 0; //@line 5850
 $40 = tempRet0; //@line 5851
 $41 = HEAP32[$1 >> 2] | 0; //@line 5852
 HEAP32[$41 >> 2] = 0; //@line 5853
 HEAP32[$41 + 4 >> 2] = 0; //@line 5855
 $45 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5858
 $AsyncCtx6 = _emscripten_alloc_async_context(40, sp) | 0; //@line 5859
 $46 = FUNCTION_TABLE_i[$45 & 7]() | 0; //@line 5860
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 586; //@line 5863
  HEAP32[$AsyncCtx6 + 4 >> 2] = $1; //@line 5865
  HEAP32[$AsyncCtx6 + 8 >> 2] = $$0; //@line 5867
  HEAP32[$AsyncCtx6 + 12 >> 2] = $$037; //@line 5869
  HEAP32[$AsyncCtx6 + 16 >> 2] = $32; //@line 5871
  $52 = $AsyncCtx6 + 24 | 0; //@line 5873
  HEAP32[$52 >> 2] = $39; //@line 5875
  HEAP32[$52 + 4 >> 2] = $40; //@line 5878
  HEAP32[$AsyncCtx6 + 32 >> 2] = $0; //@line 5880
  HEAP32[$AsyncCtx6 + 36 >> 2] = $0; //@line 5882
  sp = STACKTOP; //@line 5883
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 5886
 $58 = HEAP32[$1 >> 2] | 0; //@line 5887
 $59 = $58 + 32 | 0; //@line 5888
 HEAP32[$59 >> 2] = $46; //@line 5889
 $60 = $58 + 40 | 0; //@line 5890
 $61 = $60; //@line 5891
 HEAP32[$61 >> 2] = 0; //@line 5893
 HEAP32[$61 + 4 >> 2] = 0; //@line 5896
 $65 = $58 + 8 | 0; //@line 5897
 HEAP32[$65 >> 2] = $$0; //@line 5898
 $66 = _bitshift64Shl(1, 0, $$037 | 0) | 0; //@line 5899
 $68 = _i64Add($66 | 0, tempRet0 | 0, -1, 0) | 0; //@line 5901
 $70 = $58 + 12 | 0; //@line 5903
 HEAP32[$70 >> 2] = $68; //@line 5904
 HEAP32[$58 + 16 >> 2] = $32; //@line 5906
 $73 = $58 + 24 | 0; //@line 5908
 HEAP32[$73 >> 2] = $39; //@line 5910
 HEAP32[$73 + 4 >> 2] = $40; //@line 5913
 $77 = $58 + 48 | 0; //@line 5914
 $78 = $77; //@line 5915
 HEAP32[$78 >> 2] = 0; //@line 5917
 HEAP32[$78 + 4 >> 2] = 0; //@line 5920
 HEAP8[$58 + 56 >> 0] = 1; //@line 5922
 $85 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5925
 $AsyncCtx9 = _emscripten_alloc_async_context(32, sp) | 0; //@line 5926
 $86 = FUNCTION_TABLE_i[$85 & 7]() | 0; //@line 5927
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 587; //@line 5930
  HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 5932
  HEAP32[$AsyncCtx9 + 8 >> 2] = $0; //@line 5934
  HEAP32[$AsyncCtx9 + 12 >> 2] = $59; //@line 5936
  HEAP32[$AsyncCtx9 + 16 >> 2] = $70; //@line 5938
  HEAP32[$AsyncCtx9 + 20 >> 2] = $65; //@line 5940
  HEAP32[$AsyncCtx9 + 24 >> 2] = $60; //@line 5942
  HEAP32[$AsyncCtx9 + 28 >> 2] = $77; //@line 5944
  sp = STACKTOP; //@line 5945
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 5948
 if (($86 | 0) != (HEAP32[(HEAP32[$1 >> 2] | 0) + 32 >> 2] | 0)) {
  $101 = $86 - (HEAP32[$59 >> 2] | 0) & HEAP32[$70 >> 2]; //@line 5957
  HEAP32[$59 >> 2] = $86; //@line 5958
  $102 = HEAP32[$65 >> 2] | 0; //@line 5959
  L30 : do {
   if (($102 | 0) < 1e6) {
    switch ($102 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 22; //@line 5968
      break L30;
     }
    }
    $103 = ___muldi3($101 | 0, 0, 1e6, 0) | 0; //@line 5972
    $105 = _bitshift64Lshr($103 | 0, tempRet0 | 0, 15) | 0; //@line 5974
    $106 = tempRet0; //@line 5975
    $109 = $60; //@line 5978
    $115 = _i64Add(HEAP32[$109 >> 2] | 0, HEAP32[$109 + 4 >> 2] | 0, $101 * 1e6 & 32704 | 0, 0) | 0; //@line 5984
    $116 = tempRet0; //@line 5985
    $117 = $60; //@line 5986
    HEAP32[$117 >> 2] = $115; //@line 5988
    HEAP32[$117 + 4 >> 2] = $116; //@line 5991
    if ($116 >>> 0 < 0 | ($116 | 0) == 0 & $115 >>> 0 < 32768) {
     $173 = $105; //@line 5998
     $174 = $106; //@line 5998
    } else {
     $126 = _i64Add($105 | 0, $106 | 0, 1, 0) | 0; //@line 6000
     $127 = tempRet0; //@line 6001
     $128 = _i64Add($115 | 0, $116 | 0, -32768, -1) | 0; //@line 6002
     $130 = $60; //@line 6004
     HEAP32[$130 >> 2] = $128; //@line 6006
     HEAP32[$130 + 4 >> 2] = tempRet0; //@line 6009
     $173 = $126; //@line 6010
     $174 = $127; //@line 6010
    }
   } else {
    switch ($102 | 0) {
    case 1e6:
     {
      $173 = $101; //@line 6015
      $174 = 0; //@line 6015
      break;
     }
    default:
     {
      label = 22; //@line 6019
     }
    }
   }
  } while (0);
  if ((label | 0) == 22) {
   $134 = ___muldi3($101 | 0, 0, 1e6, 0) | 0; //@line 6025
   $135 = tempRet0; //@line 6026
   $136 = ___udivdi3($134 | 0, $135 | 0, $102 | 0, 0) | 0; //@line 6027
   $137 = tempRet0; //@line 6028
   $138 = ___muldi3($136 | 0, $137 | 0, $102 | 0, 0) | 0; //@line 6029
   $140 = _i64Subtract($134 | 0, $135 | 0, $138 | 0, tempRet0 | 0) | 0; //@line 6031
   $142 = $60; //@line 6033
   $148 = _i64Add($140 | 0, tempRet0 | 0, HEAP32[$142 >> 2] | 0, HEAP32[$142 + 4 >> 2] | 0) | 0; //@line 6039
   $149 = tempRet0; //@line 6040
   $150 = $60; //@line 6041
   HEAP32[$150 >> 2] = $148; //@line 6043
   HEAP32[$150 + 4 >> 2] = $149; //@line 6046
   if ($149 >>> 0 < 0 | ($149 | 0) == 0 & $148 >>> 0 < $102 >>> 0) {
    $173 = $136; //@line 6053
    $174 = $137; //@line 6053
   } else {
    $159 = _i64Add($136 | 0, $137 | 0, 1, 0) | 0; //@line 6055
    $160 = tempRet0; //@line 6056
    $161 = _i64Subtract($148 | 0, $149 | 0, $102 | 0, 0) | 0; //@line 6057
    $163 = $60; //@line 6059
    HEAP32[$163 >> 2] = $161; //@line 6061
    HEAP32[$163 + 4 >> 2] = tempRet0; //@line 6064
    $173 = $159; //@line 6065
    $174 = $160; //@line 6065
   }
  }
  $167 = $77; //@line 6068
  $175 = _i64Add(HEAP32[$167 >> 2] | 0, HEAP32[$167 + 4 >> 2] | 0, $173 | 0, $174 | 0) | 0; //@line 6074
  $177 = $77; //@line 6076
  HEAP32[$177 >> 2] = $175; //@line 6078
  HEAP32[$177 + 4 >> 2] = tempRet0; //@line 6081
 }
 $AsyncCtx12 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6083
 _schedule_interrupt($0); //@line 6084
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 588; //@line 6087
  sp = STACKTOP; //@line 6088
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 6091
 return;
}
function _schedule_interrupt($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $1 = 0, $10 = 0, $104 = 0, $107 = 0, $109 = 0, $11 = 0, $112 = 0, $113 = 0, $115 = 0, $118 = 0, $126 = 0, $127 = 0, $128 = 0, $130 = 0, $132 = 0, $137 = 0, $14 = 0, $144 = 0, $146 = 0, $148 = 0, $151 = 0, $153 = 0, $160 = 0, $161 = 0, $164 = 0, $166 = 0, $168 = 0, $174 = 0, $175 = 0, $179 = 0, $187 = 0, $19 = 0, $195 = 0, $198 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $35 = 0, $36 = 0, $37 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $50 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $69 = 0, $70 = 0, $71 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $88 = 0, $89 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx22 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6108
 $1 = $0 + 4 | 0; //@line 6109
 $2 = HEAP32[$1 >> 2] | 0; //@line 6110
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 6113
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 6114
 $6 = FUNCTION_TABLE_i[$5 & 7]() | 0; //@line 6115
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 589; //@line 6118
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 6120
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 6122
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 6124
  sp = STACKTOP; //@line 6125
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6128
 $10 = HEAP32[$1 >> 2] | 0; //@line 6129
 $11 = $10 + 32 | 0; //@line 6130
 if (($6 | 0) != (HEAP32[$11 >> 2] | 0)) {
  $14 = $2 + 32 | 0; //@line 6134
  $19 = $6 - (HEAP32[$14 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 6139
  HEAP32[$14 >> 2] = $6; //@line 6140
  $21 = HEAP32[$2 + 8 >> 2] | 0; //@line 6142
  L6 : do {
   if (($21 | 0) < 1e6) {
    switch ($21 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 7; //@line 6151
      break L6;
     }
    }
    $22 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 6155
    $24 = _bitshift64Lshr($22 | 0, tempRet0 | 0, 15) | 0; //@line 6157
    $25 = tempRet0; //@line 6158
    $28 = $2 + 40 | 0; //@line 6161
    $29 = $28; //@line 6162
    $35 = _i64Add(HEAP32[$29 >> 2] | 0, HEAP32[$29 + 4 >> 2] | 0, $19 * 1e6 & 32704 | 0, 0) | 0; //@line 6168
    $36 = tempRet0; //@line 6169
    $37 = $28; //@line 6170
    HEAP32[$37 >> 2] = $35; //@line 6172
    HEAP32[$37 + 4 >> 2] = $36; //@line 6175
    if ($36 >>> 0 < 0 | ($36 | 0) == 0 & $35 >>> 0 < 32768) {
     $95 = $24; //@line 6182
     $96 = $25; //@line 6182
    } else {
     $46 = _i64Add($24 | 0, $25 | 0, 1, 0) | 0; //@line 6184
     $47 = tempRet0; //@line 6185
     $48 = _i64Add($35 | 0, $36 | 0, -32768, -1) | 0; //@line 6186
     $50 = $28; //@line 6188
     HEAP32[$50 >> 2] = $48; //@line 6190
     HEAP32[$50 + 4 >> 2] = tempRet0; //@line 6193
     $95 = $46; //@line 6194
     $96 = $47; //@line 6194
    }
   } else {
    switch ($21 | 0) {
    case 1e6:
     {
      $95 = $19; //@line 6199
      $96 = 0; //@line 6199
      break;
     }
    default:
     {
      label = 7; //@line 6203
     }
    }
   }
  } while (0);
  if ((label | 0) == 7) {
   $54 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 6209
   $55 = tempRet0; //@line 6210
   $56 = ___udivdi3($54 | 0, $55 | 0, $21 | 0, 0) | 0; //@line 6211
   $57 = tempRet0; //@line 6212
   $58 = ___muldi3($56 | 0, $57 | 0, $21 | 0, 0) | 0; //@line 6213
   $60 = _i64Subtract($54 | 0, $55 | 0, $58 | 0, tempRet0 | 0) | 0; //@line 6215
   $62 = $2 + 40 | 0; //@line 6217
   $63 = $62; //@line 6218
   $69 = _i64Add($60 | 0, tempRet0 | 0, HEAP32[$63 >> 2] | 0, HEAP32[$63 + 4 >> 2] | 0) | 0; //@line 6224
   $70 = tempRet0; //@line 6225
   $71 = $62; //@line 6226
   HEAP32[$71 >> 2] = $69; //@line 6228
   HEAP32[$71 + 4 >> 2] = $70; //@line 6231
   if ($70 >>> 0 < 0 | ($70 | 0) == 0 & $69 >>> 0 < $21 >>> 0) {
    $95 = $56; //@line 6238
    $96 = $57; //@line 6238
   } else {
    $80 = _i64Add($56 | 0, $57 | 0, 1, 0) | 0; //@line 6240
    $81 = tempRet0; //@line 6241
    $82 = _i64Subtract($69 | 0, $70 | 0, $21 | 0, 0) | 0; //@line 6242
    $84 = $62; //@line 6244
    HEAP32[$84 >> 2] = $82; //@line 6246
    HEAP32[$84 + 4 >> 2] = tempRet0; //@line 6249
    $95 = $80; //@line 6250
    $96 = $81; //@line 6250
   }
  }
  $88 = $2 + 48 | 0; //@line 6253
  $89 = $88; //@line 6254
  $97 = _i64Add(HEAP32[$89 >> 2] | 0, HEAP32[$89 + 4 >> 2] | 0, $95 | 0, $96 | 0) | 0; //@line 6260
  $99 = $88; //@line 6262
  HEAP32[$99 >> 2] = $97; //@line 6264
  HEAP32[$99 + 4 >> 2] = tempRet0; //@line 6267
 }
 $104 = HEAP32[$10 + 4 >> 2] | 0; //@line 6270
 if (!$104) {
  $195 = (HEAP32[$2 + 16 >> 2] | 0) + (HEAP32[$2 + 32 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 6280
  $198 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 6283
  $AsyncCtx22 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6284
  FUNCTION_TABLE_vi[$198 & 1023]($195); //@line 6285
  if (___async) {
   HEAP32[$AsyncCtx22 >> 2] = 595; //@line 6288
   sp = STACKTOP; //@line 6289
   return;
  } else {
   _emscripten_free_async_context($AsyncCtx22 | 0); //@line 6292
   return;
  }
 }
 $107 = $10 + 48 | 0; //@line 6297
 $109 = HEAP32[$107 >> 2] | 0; //@line 6299
 $112 = HEAP32[$107 + 4 >> 2] | 0; //@line 6302
 $113 = $104; //@line 6303
 $115 = HEAP32[$113 >> 2] | 0; //@line 6305
 $118 = HEAP32[$113 + 4 >> 2] | 0; //@line 6308
 if (!($118 >>> 0 > $112 >>> 0 | ($118 | 0) == ($112 | 0) & $115 >>> 0 > $109 >>> 0)) {
  $126 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 6317
  $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6318
  FUNCTION_TABLE_v[$126 & 7](); //@line 6319
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 590; //@line 6322
   sp = STACKTOP; //@line 6323
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6326
  return;
 }
 $127 = _i64Subtract($115 | 0, $118 | 0, $109 | 0, $112 | 0) | 0; //@line 6329
 $128 = tempRet0; //@line 6330
 $130 = HEAP32[$10 + 16 >> 2] | 0; //@line 6332
 $132 = $10 + 24 | 0; //@line 6334
 $137 = HEAP32[$132 + 4 >> 2] | 0; //@line 6339
 L29 : do {
  if ($128 >>> 0 > $137 >>> 0 | (($128 | 0) == ($137 | 0) ? $127 >>> 0 > (HEAP32[$132 >> 2] | 0) >>> 0 : 0)) {
   $$0$i = $130; //@line 6347
  } else {
   $144 = HEAP32[$10 + 8 >> 2] | 0; //@line 6350
   L31 : do {
    if (($144 | 0) < 1e6) {
     switch ($144 | 0) {
     case 32768:
      {
       break;
      }
     default:
      {
       break L31;
      }
     }
     $146 = _bitshift64Shl($127 | 0, $128 | 0, 15) | 0; //@line 6362
     $148 = ___udivdi3($146 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 6364
     $$0$i = $130 >>> 0 < $148 >>> 0 ? $130 : $148; //@line 6368
     break L29;
    } else {
     switch ($144 | 0) {
     case 1e6:
      {
       break;
      }
     default:
      {
       break L31;
      }
     }
     $$0$i = $130 >>> 0 < $127 >>> 0 ? $130 : $127; //@line 6381
     break L29;
    }
   } while (0);
   $151 = ___muldi3($127 | 0, $128 | 0, $144 | 0, 0) | 0; //@line 6385
   $153 = ___udivdi3($151 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 6387
   $$0$i = $130 >>> 0 < $153 >>> 0 ? $130 : $153; //@line 6391
  }
 } while (0);
 $160 = (HEAP32[$11 >> 2] | 0) + $$0$i & HEAP32[$10 + 12 >> 2]; //@line 6398
 $161 = $2 + 32 | 0; //@line 6399
 $164 = HEAP32[$0 >> 2] | 0; //@line 6402
 if (($160 | 0) == (HEAP32[$161 >> 2] | 0)) {
  $166 = HEAP32[$164 + 20 >> 2] | 0; //@line 6405
  $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6406
  FUNCTION_TABLE_v[$166 & 7](); //@line 6407
  if (___async) {
   HEAP32[$AsyncCtx7 >> 2] = 591; //@line 6410
   sp = STACKTOP; //@line 6411
   return;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6414
  return;
 }
 $168 = HEAP32[$164 + 16 >> 2] | 0; //@line 6418
 $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6419
 FUNCTION_TABLE_vi[$168 & 1023]($160); //@line 6420
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 592; //@line 6423
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 6425
  HEAP32[$AsyncCtx11 + 8 >> 2] = $161; //@line 6427
  HEAP32[$AsyncCtx11 + 12 >> 2] = $160; //@line 6429
  sp = STACKTOP; //@line 6430
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 6433
 $174 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 6436
 $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6437
 $175 = FUNCTION_TABLE_i[$174 & 7]() | 0; //@line 6438
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 593; //@line 6441
  HEAP32[$AsyncCtx14 + 4 >> 2] = $161; //@line 6443
  HEAP32[$AsyncCtx14 + 8 >> 2] = $160; //@line 6445
  HEAP32[$AsyncCtx14 + 12 >> 2] = $0; //@line 6447
  sp = STACKTOP; //@line 6448
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 6451
 $179 = HEAP32[$161 >> 2] | 0; //@line 6452
 if ($160 >>> 0 > $179 >>> 0) {
  if (!($175 >>> 0 >= $160 >>> 0 | $175 >>> 0 < $179 >>> 0)) {
   return;
  }
 } else {
  if (!($175 >>> 0 >= $160 >>> 0 & $175 >>> 0 < $179 >>> 0)) {
   return;
  }
 }
 $187 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 6471
 $AsyncCtx18 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6472
 FUNCTION_TABLE_v[$187 & 7](); //@line 6473
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 594; //@line 6476
  sp = STACKTOP; //@line 6477
  return;
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 6480
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $15 = 0, $17 = 0, $22 = 0, $23 = 0, $26 = 0, $29 = 0, $40 = 0, $41 = 0, $45 = 0, $47 = 0, $5 = 0, $52 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $64 = 0, $65 = 0, $69 = 0, $71 = 0, $76 = 0, $77 = 0, $80 = 0, $83 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx19 = 0, $AsyncCtx2 = 0, $AsyncCtx22 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx33 = 0, $AsyncCtx37 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 6782
 STACKTOP = STACKTOP + 32 | 0; //@line 6783
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 6783
 $vararg_buffer = sp; //@line 6784
 $1 = sp + 16 | 0; //@line 6785
 $5 = (HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 4 >> 2] | 0) == 0; //@line 6789
 $6 = __ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0; //@line 6790
 if ($5) {
  HEAP32[$0 + 2536 >> 2] = HEAP32[$6 + 16 >> 2]; //@line 6795
  $10 = $0 + 2496 | 0; //@line 6796
  $11 = HEAP32[$10 >> 2] | 0; //@line 6797
  do {
   if ($11 | 0) {
    $15 = HEAP32[$0 + 3136 >> 2] | 0; //@line 6803
    $17 = HEAP32[$11 + 4 >> 2] | 0; //@line 6805
    $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 6806
    FUNCTION_TABLE_vii[$17 & 15]($1, $0 + 2484 | 0); //@line 6807
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 227; //@line 6810
     HEAP32[$AsyncCtx + 4 >> 2] = $10; //@line 6812
     HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 6814
     HEAP32[$AsyncCtx + 12 >> 2] = $15; //@line 6816
     HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 6818
     sp = STACKTOP; //@line 6819
     STACKTOP = sp; //@line 6820
     return;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6822
    $22 = $1 + 12 | 0; //@line 6824
    HEAP32[$22 >> 2] = HEAP32[$10 >> 2]; //@line 6825
    $AsyncCtx25 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6826
    $23 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($15, $1, 2) | 0; //@line 6827
    if (___async) {
     HEAP32[$AsyncCtx25 >> 2] = 228; //@line 6830
     HEAP32[$AsyncCtx25 + 4 >> 2] = $22; //@line 6832
     HEAP32[$AsyncCtx25 + 8 >> 2] = $1; //@line 6834
     sp = STACKTOP; //@line 6835
     STACKTOP = sp; //@line 6836
     return;
    }
    _emscripten_free_async_context($AsyncCtx25 | 0); //@line 6838
    $26 = HEAP32[$22 >> 2] | 0; //@line 6839
    do {
     if ($26 | 0) {
      $29 = HEAP32[$26 + 8 >> 2] | 0; //@line 6844
      $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6845
      FUNCTION_TABLE_vi[$29 & 1023]($1); //@line 6846
      if (___async) {
       HEAP32[$AsyncCtx2 >> 2] = 229; //@line 6849
       HEAP32[$AsyncCtx2 + 4 >> 2] = $23; //@line 6851
       HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 6853
       sp = STACKTOP; //@line 6854
       STACKTOP = sp; //@line 6855
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6857
       break;
      }
     }
    } while (0);
    if (!$23) {
     $AsyncCtx37 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6864
     _mbed_assert_internal(13097, 12384, 646); //@line 6865
     if (___async) {
      HEAP32[$AsyncCtx37 >> 2] = 230; //@line 6868
      HEAP32[$AsyncCtx37 + 4 >> 2] = $1; //@line 6870
      sp = STACKTOP; //@line 6871
      STACKTOP = sp; //@line 6872
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx37 | 0); //@line 6874
      break;
     }
    }
   }
  } while (0);
  STACKTOP = sp; //@line 6880
  return;
 }
 HEAP32[$vararg_buffer >> 2] = HEAP32[$6 + 4 >> 2]; //@line 6884
 _mbed_tracef(2, 12482, 12576, $vararg_buffer); //@line 6885
 if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 4 >> 2] | 0) == 2) {
  $40 = $0 + 2496 | 0; //@line 6891
  $41 = HEAP32[$40 >> 2] | 0; //@line 6892
  do {
   if ($41 | 0) {
    $45 = HEAP32[$0 + 3136 >> 2] | 0; //@line 6898
    $47 = HEAP32[$41 + 4 >> 2] | 0; //@line 6900
    $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6901
    FUNCTION_TABLE_vii[$47 & 15]($vararg_buffer, $0 + 2484 | 0); //@line 6902
    if (___async) {
     HEAP32[$AsyncCtx5 >> 2] = 231; //@line 6905
     HEAP32[$AsyncCtx5 + 4 >> 2] = $40; //@line 6907
     HEAP32[$AsyncCtx5 + 8 >> 2] = $vararg_buffer; //@line 6909
     HEAP32[$AsyncCtx5 + 12 >> 2] = $45; //@line 6911
     HEAP32[$AsyncCtx5 + 16 >> 2] = $vararg_buffer; //@line 6913
     sp = STACKTOP; //@line 6914
     STACKTOP = sp; //@line 6915
     return;
    }
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 6917
    $52 = $vararg_buffer + 12 | 0; //@line 6919
    HEAP32[$52 >> 2] = HEAP32[$40 >> 2]; //@line 6920
    $AsyncCtx22 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6921
    $53 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($45, $vararg_buffer, 3) | 0; //@line 6922
    if (___async) {
     HEAP32[$AsyncCtx22 >> 2] = 232; //@line 6925
     HEAP32[$AsyncCtx22 + 4 >> 2] = $52; //@line 6927
     HEAP32[$AsyncCtx22 + 8 >> 2] = $vararg_buffer; //@line 6929
     sp = STACKTOP; //@line 6930
     STACKTOP = sp; //@line 6931
     return;
    }
    _emscripten_free_async_context($AsyncCtx22 | 0); //@line 6933
    $56 = HEAP32[$52 >> 2] | 0; //@line 6934
    do {
     if ($56 | 0) {
      $59 = HEAP32[$56 + 8 >> 2] | 0; //@line 6939
      $AsyncCtx9 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6940
      FUNCTION_TABLE_vi[$59 & 1023]($vararg_buffer); //@line 6941
      if (___async) {
       HEAP32[$AsyncCtx9 >> 2] = 233; //@line 6944
       HEAP32[$AsyncCtx9 + 4 >> 2] = $53; //@line 6946
       HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer; //@line 6948
       sp = STACKTOP; //@line 6949
       STACKTOP = sp; //@line 6950
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx9 | 0); //@line 6952
       break;
      }
     }
    } while (0);
    if (!$53) {
     $AsyncCtx33 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6959
     _mbed_assert_internal(13097, 12384, 646); //@line 6960
     if (___async) {
      HEAP32[$AsyncCtx33 >> 2] = 234; //@line 6963
      HEAP32[$AsyncCtx33 + 4 >> 2] = $vararg_buffer; //@line 6965
      sp = STACKTOP; //@line 6966
      STACKTOP = sp; //@line 6967
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx33 | 0); //@line 6969
      break;
     }
    }
   }
  } while (0);
  STACKTOP = sp; //@line 6975
  return;
 } else {
  $64 = $0 + 2496 | 0; //@line 6977
  $65 = HEAP32[$64 >> 2] | 0; //@line 6978
  do {
   if ($65 | 0) {
    $69 = HEAP32[$0 + 3136 >> 2] | 0; //@line 6984
    $71 = HEAP32[$65 + 4 >> 2] | 0; //@line 6986
    $AsyncCtx12 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6987
    FUNCTION_TABLE_vii[$71 & 15]($vararg_buffer, $0 + 2484 | 0); //@line 6988
    if (___async) {
     HEAP32[$AsyncCtx12 >> 2] = 235; //@line 6991
     HEAP32[$AsyncCtx12 + 4 >> 2] = $64; //@line 6993
     HEAP32[$AsyncCtx12 + 8 >> 2] = $vararg_buffer; //@line 6995
     HEAP32[$AsyncCtx12 + 12 >> 2] = $69; //@line 6997
     HEAP32[$AsyncCtx12 + 16 >> 2] = $vararg_buffer; //@line 6999
     sp = STACKTOP; //@line 7000
     STACKTOP = sp; //@line 7001
     return;
    }
    _emscripten_free_async_context($AsyncCtx12 | 0); //@line 7003
    $76 = $vararg_buffer + 12 | 0; //@line 7005
    HEAP32[$76 >> 2] = HEAP32[$64 >> 2]; //@line 7006
    $AsyncCtx19 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7007
    $77 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($69, $vararg_buffer, 4) | 0; //@line 7008
    if (___async) {
     HEAP32[$AsyncCtx19 >> 2] = 236; //@line 7011
     HEAP32[$AsyncCtx19 + 4 >> 2] = $76; //@line 7013
     HEAP32[$AsyncCtx19 + 8 >> 2] = $vararg_buffer; //@line 7015
     sp = STACKTOP; //@line 7016
     STACKTOP = sp; //@line 7017
     return;
    }
    _emscripten_free_async_context($AsyncCtx19 | 0); //@line 7019
    $80 = HEAP32[$76 >> 2] | 0; //@line 7020
    do {
     if ($80 | 0) {
      $83 = HEAP32[$80 + 8 >> 2] | 0; //@line 7025
      $AsyncCtx16 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7026
      FUNCTION_TABLE_vi[$83 & 1023]($vararg_buffer); //@line 7027
      if (___async) {
       HEAP32[$AsyncCtx16 >> 2] = 237; //@line 7030
       HEAP32[$AsyncCtx16 + 4 >> 2] = $77; //@line 7032
       HEAP32[$AsyncCtx16 + 8 >> 2] = $vararg_buffer; //@line 7034
       sp = STACKTOP; //@line 7035
       STACKTOP = sp; //@line 7036
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx16 | 0); //@line 7038
       break;
      }
     }
    } while (0);
    if (!$77) {
     $AsyncCtx29 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7045
     _mbed_assert_internal(13097, 12384, 646); //@line 7046
     if (___async) {
      HEAP32[$AsyncCtx29 >> 2] = 238; //@line 7049
      HEAP32[$AsyncCtx29 + 4 >> 2] = $vararg_buffer; //@line 7051
      sp = STACKTOP; //@line 7052
      STACKTOP = sp; //@line 7053
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx29 | 0); //@line 7055
      break;
     }
    }
   }
  } while (0);
  STACKTOP = sp; //@line 7061
  return;
 }
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_364($0) {
 $0 = $0 | 0;
 var $$pre123 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 27865
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27867
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27869
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27871
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27873
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27875
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27877
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27879
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27881
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 27883
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 27885
 $$pre123 = HEAP32[$6 >> 2] | 0; //@line 27886
 if ($$pre123 | 0) {
  $23 = HEAP32[$$pre123 + 4 >> 2] | 0; //@line 27890
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 27891
  FUNCTION_TABLE_vii[$23 & 15]($18, $14); //@line 27892
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 170; //@line 27895
   $24 = $ReallocAsyncCtx5 + 4 | 0; //@line 27896
   HEAP32[$24 >> 2] = $2; //@line 27897
   $25 = $ReallocAsyncCtx5 + 8 | 0; //@line 27898
   HEAP32[$25 >> 2] = $4; //@line 27899
   $26 = $ReallocAsyncCtx5 + 12 | 0; //@line 27900
   HEAP32[$26 >> 2] = $6; //@line 27901
   $27 = $ReallocAsyncCtx5 + 16 | 0; //@line 27902
   HEAP32[$27 >> 2] = $8; //@line 27903
   $28 = $ReallocAsyncCtx5 + 20 | 0; //@line 27904
   HEAP32[$28 >> 2] = $10; //@line 27905
   $29 = $ReallocAsyncCtx5 + 24 | 0; //@line 27906
   HEAP32[$29 >> 2] = $12; //@line 27907
   $30 = $ReallocAsyncCtx5 + 28 | 0; //@line 27908
   HEAP32[$30 >> 2] = $14; //@line 27909
   $31 = $ReallocAsyncCtx5 + 32 | 0; //@line 27910
   HEAP32[$31 >> 2] = $16; //@line 27911
   $32 = $ReallocAsyncCtx5 + 36 | 0; //@line 27912
   HEAP32[$32 >> 2] = $20; //@line 27913
   sp = STACKTOP; //@line 27914
   return;
  }
  ___async_unwind = 0; //@line 27917
  HEAP32[$ReallocAsyncCtx5 >> 2] = 170; //@line 27918
  $24 = $ReallocAsyncCtx5 + 4 | 0; //@line 27919
  HEAP32[$24 >> 2] = $2; //@line 27920
  $25 = $ReallocAsyncCtx5 + 8 | 0; //@line 27921
  HEAP32[$25 >> 2] = $4; //@line 27922
  $26 = $ReallocAsyncCtx5 + 12 | 0; //@line 27923
  HEAP32[$26 >> 2] = $6; //@line 27924
  $27 = $ReallocAsyncCtx5 + 16 | 0; //@line 27925
  HEAP32[$27 >> 2] = $8; //@line 27926
  $28 = $ReallocAsyncCtx5 + 20 | 0; //@line 27927
  HEAP32[$28 >> 2] = $10; //@line 27928
  $29 = $ReallocAsyncCtx5 + 24 | 0; //@line 27929
  HEAP32[$29 >> 2] = $12; //@line 27930
  $30 = $ReallocAsyncCtx5 + 28 | 0; //@line 27931
  HEAP32[$30 >> 2] = $14; //@line 27932
  $31 = $ReallocAsyncCtx5 + 32 | 0; //@line 27933
  HEAP32[$31 >> 2] = $16; //@line 27934
  $32 = $ReallocAsyncCtx5 + 36 | 0; //@line 27935
  HEAP32[$32 >> 2] = $20; //@line 27936
  sp = STACKTOP; //@line 27937
  return;
 }
 HEAP32[$8 >> 2] = 0; //@line 27940
 $33 = $16 + 12 | 0; //@line 27941
 HEAP32[$16 >> 2] = 172; //@line 27942
 HEAP32[$16 + 4 >> 2] = 0; //@line 27944
 HEAP32[$16 + 8 >> 2] = $4; //@line 27946
 HEAP32[$33 >> 2] = 808; //@line 27947
 $34 = $4 + 2432 | 0; //@line 27948
 if (($34 | 0) == ($16 | 0)) {
  $61 = HEAP32[204] | 0; //@line 27952
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(28) | 0; //@line 27953
  FUNCTION_TABLE_vi[$61 & 1023]($16); //@line 27954
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 175; //@line 27957
   $62 = $ReallocAsyncCtx9 + 4 | 0; //@line 27958
   HEAP32[$62 >> 2] = $16; //@line 27959
   $63 = $ReallocAsyncCtx9 + 8 | 0; //@line 27960
   HEAP32[$63 >> 2] = $2; //@line 27961
   $64 = $ReallocAsyncCtx9 + 12 | 0; //@line 27962
   HEAP32[$64 >> 2] = $4; //@line 27963
   $65 = $ReallocAsyncCtx9 + 16 | 0; //@line 27964
   HEAP32[$65 >> 2] = $10; //@line 27965
   $66 = $ReallocAsyncCtx9 + 20 | 0; //@line 27966
   HEAP32[$66 >> 2] = $12; //@line 27967
   $67 = $ReallocAsyncCtx9 + 24 | 0; //@line 27968
   HEAP32[$67 >> 2] = $20; //@line 27969
   sp = STACKTOP; //@line 27970
   return;
  }
  ___async_unwind = 0; //@line 27973
  HEAP32[$ReallocAsyncCtx9 >> 2] = 175; //@line 27974
  $62 = $ReallocAsyncCtx9 + 4 | 0; //@line 27975
  HEAP32[$62 >> 2] = $16; //@line 27976
  $63 = $ReallocAsyncCtx9 + 8 | 0; //@line 27977
  HEAP32[$63 >> 2] = $2; //@line 27978
  $64 = $ReallocAsyncCtx9 + 12 | 0; //@line 27979
  HEAP32[$64 >> 2] = $4; //@line 27980
  $65 = $ReallocAsyncCtx9 + 16 | 0; //@line 27981
  HEAP32[$65 >> 2] = $10; //@line 27982
  $66 = $ReallocAsyncCtx9 + 20 | 0; //@line 27983
  HEAP32[$66 >> 2] = $12; //@line 27984
  $67 = $ReallocAsyncCtx9 + 24 | 0; //@line 27985
  HEAP32[$67 >> 2] = $20; //@line 27986
  sp = STACKTOP; //@line 27987
  return;
 }
 $36 = $4 + 2444 | 0; //@line 27990
 $37 = HEAP32[$36 >> 2] | 0; //@line 27991
 if (!$37) {
  $51 = HEAP32[203] | 0; //@line 27995
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 27996
  FUNCTION_TABLE_vii[$51 & 15]($34, $16); //@line 27997
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 174; //@line 28000
   $52 = $ReallocAsyncCtx8 + 4 | 0; //@line 28001
   HEAP32[$52 >> 2] = $16; //@line 28002
   $53 = $ReallocAsyncCtx8 + 8 | 0; //@line 28003
   HEAP32[$53 >> 2] = $2; //@line 28004
   $54 = $ReallocAsyncCtx8 + 12 | 0; //@line 28005
   HEAP32[$54 >> 2] = $4; //@line 28006
   $55 = $ReallocAsyncCtx8 + 16 | 0; //@line 28007
   HEAP32[$55 >> 2] = $33; //@line 28008
   $56 = $ReallocAsyncCtx8 + 20 | 0; //@line 28009
   HEAP32[$56 >> 2] = $36; //@line 28010
   $57 = $ReallocAsyncCtx8 + 24 | 0; //@line 28011
   HEAP32[$57 >> 2] = $10; //@line 28012
   $58 = $ReallocAsyncCtx8 + 28 | 0; //@line 28013
   HEAP32[$58 >> 2] = $12; //@line 28014
   $59 = $ReallocAsyncCtx8 + 32 | 0; //@line 28015
   HEAP32[$59 >> 2] = $20; //@line 28016
   sp = STACKTOP; //@line 28017
   return;
  }
  ___async_unwind = 0; //@line 28020
  HEAP32[$ReallocAsyncCtx8 >> 2] = 174; //@line 28021
  $52 = $ReallocAsyncCtx8 + 4 | 0; //@line 28022
  HEAP32[$52 >> 2] = $16; //@line 28023
  $53 = $ReallocAsyncCtx8 + 8 | 0; //@line 28024
  HEAP32[$53 >> 2] = $2; //@line 28025
  $54 = $ReallocAsyncCtx8 + 12 | 0; //@line 28026
  HEAP32[$54 >> 2] = $4; //@line 28027
  $55 = $ReallocAsyncCtx8 + 16 | 0; //@line 28028
  HEAP32[$55 >> 2] = $33; //@line 28029
  $56 = $ReallocAsyncCtx8 + 20 | 0; //@line 28030
  HEAP32[$56 >> 2] = $36; //@line 28031
  $57 = $ReallocAsyncCtx8 + 24 | 0; //@line 28032
  HEAP32[$57 >> 2] = $10; //@line 28033
  $58 = $ReallocAsyncCtx8 + 28 | 0; //@line 28034
  HEAP32[$58 >> 2] = $12; //@line 28035
  $59 = $ReallocAsyncCtx8 + 32 | 0; //@line 28036
  HEAP32[$59 >> 2] = $20; //@line 28037
  sp = STACKTOP; //@line 28038
  return;
 } else {
  $40 = HEAP32[$37 + 8 >> 2] | 0; //@line 28042
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(40) | 0; //@line 28043
  FUNCTION_TABLE_vi[$40 & 1023]($34); //@line 28044
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 173; //@line 28047
   $41 = $ReallocAsyncCtx7 + 4 | 0; //@line 28048
   HEAP32[$41 >> 2] = $16; //@line 28049
   $42 = $ReallocAsyncCtx7 + 8 | 0; //@line 28050
   HEAP32[$42 >> 2] = $2; //@line 28051
   $43 = $ReallocAsyncCtx7 + 12 | 0; //@line 28052
   HEAP32[$43 >> 2] = $4; //@line 28053
   $44 = $ReallocAsyncCtx7 + 16 | 0; //@line 28054
   HEAP32[$44 >> 2] = $36; //@line 28055
   $45 = $ReallocAsyncCtx7 + 20 | 0; //@line 28056
   HEAP32[$45 >> 2] = $33; //@line 28057
   $46 = $ReallocAsyncCtx7 + 24 | 0; //@line 28058
   HEAP32[$46 >> 2] = $34; //@line 28059
   $47 = $ReallocAsyncCtx7 + 28 | 0; //@line 28060
   HEAP32[$47 >> 2] = $10; //@line 28061
   $48 = $ReallocAsyncCtx7 + 32 | 0; //@line 28062
   HEAP32[$48 >> 2] = $12; //@line 28063
   $49 = $ReallocAsyncCtx7 + 36 | 0; //@line 28064
   HEAP32[$49 >> 2] = $20; //@line 28065
   sp = STACKTOP; //@line 28066
   return;
  }
  ___async_unwind = 0; //@line 28069
  HEAP32[$ReallocAsyncCtx7 >> 2] = 173; //@line 28070
  $41 = $ReallocAsyncCtx7 + 4 | 0; //@line 28071
  HEAP32[$41 >> 2] = $16; //@line 28072
  $42 = $ReallocAsyncCtx7 + 8 | 0; //@line 28073
  HEAP32[$42 >> 2] = $2; //@line 28074
  $43 = $ReallocAsyncCtx7 + 12 | 0; //@line 28075
  HEAP32[$43 >> 2] = $4; //@line 28076
  $44 = $ReallocAsyncCtx7 + 16 | 0; //@line 28077
  HEAP32[$44 >> 2] = $36; //@line 28078
  $45 = $ReallocAsyncCtx7 + 20 | 0; //@line 28079
  HEAP32[$45 >> 2] = $33; //@line 28080
  $46 = $ReallocAsyncCtx7 + 24 | 0; //@line 28081
  HEAP32[$46 >> 2] = $34; //@line 28082
  $47 = $ReallocAsyncCtx7 + 28 | 0; //@line 28083
  HEAP32[$47 >> 2] = $10; //@line 28084
  $48 = $ReallocAsyncCtx7 + 32 | 0; //@line 28085
  HEAP32[$48 >> 2] = $12; //@line 28086
  $49 = $ReallocAsyncCtx7 + 36 | 0; //@line 28087
  HEAP32[$49 >> 2] = $20; //@line 28088
  sp = STACKTOP; //@line 28089
  return;
 }
}
function _mbedtls_cipher_update($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0121 = 0, $$0122 = 0, $$0124 = 0, $$1 = 0, $$phi$trans$insert = 0, $$pre$phi128Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $102 = 0, $103 = 0, $105 = 0, $114 = 0, $116 = 0, $12 = 0, $120 = 0, $17 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $33 = 0, $38 = 0, $39 = 0, $40 = 0, $43 = 0, $44 = 0, $48 = 0, $52 = 0, $53 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $65 = 0, $83 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3220
 if (!$0) {
  $$1 = -24832; //@line 3223
  return $$1 | 0; //@line 3224
 }
 $6 = HEAP32[$0 >> 2] | 0; //@line 3226
 if (($4 | 0) == 0 | ($6 | 0) == 0) {
  $$1 = -24832; //@line 3231
  return $$1 | 0; //@line 3232
 }
 HEAP32[$4 >> 2] = 0; //@line 3234
 $10 = HEAP32[$6 + 24 >> 2] | 0; //@line 3236
 $12 = HEAP32[$6 + 4 >> 2] | 0; //@line 3238
 switch ($12 | 0) {
 case 1:
  {
   if (($10 | 0) != ($2 | 0)) {
    $$1 = -25216; //@line 3243
    return $$1 | 0; //@line 3244
   }
   HEAP32[$4 >> 2] = $2; //@line 3246
   $17 = HEAP32[(HEAP32[$6 + 28 >> 2] | 0) + 4 >> 2] | 0; //@line 3250
   $19 = HEAP32[$0 + 60 >> 2] | 0; //@line 3252
   $21 = HEAP32[$0 + 8 >> 2] | 0; //@line 3254
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3255
   $22 = FUNCTION_TABLE_iiiii[$17 & 3]($19, $21, $1, $3) | 0; //@line 3256
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 560; //@line 3259
    sp = STACKTOP; //@line 3260
    return 0; //@line 3261
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 3263
   $$1 = $22; //@line 3264
   return $$1 | 0; //@line 3265
  }
 case 6:
  {
   HEAP32[$4 >> 2] = $2; //@line 3269
   $24 = HEAP32[$0 + 60 >> 2] | 0; //@line 3271
   $AsyncCtx15 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3272
   $25 = _mbedtls_gcm_update($24, $2, $1, $3) | 0; //@line 3273
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 561; //@line 3276
    sp = STACKTOP; //@line 3277
    return 0; //@line 3278
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 3280
   $$1 = $25; //@line 3281
   return $$1 | 0; //@line 3282
  }
 default:
  {
   if (!$10) {
    $$1 = -25472; //@line 3288
    return $$1 | 0; //@line 3289
   }
   if (($1 | 0) == ($3 | 0)) {
    if (HEAP32[$0 + 36 >> 2] | 0) {
     $$1 = -24832; //@line 3297
     return $$1 | 0; //@line 3298
    }
    if (($2 >>> 0) % ($10 >>> 0) | 0 | 0) {
     $$1 = -24832; //@line 3303
     return $$1 | 0; //@line 3304
    }
   }
   switch ($12 | 0) {
   case 2:
    {
     $33 = $0 + 8 | 0; //@line 3309
     L21 : do {
      switch (HEAP32[$33 >> 2] | 0) {
      case 0:
       {
        $38 = $0 + 36 | 0; //@line 3317
        $39 = HEAP32[$38 >> 2] | 0; //@line 3318
        $40 = $10 - $39 | 0; //@line 3319
        if (!(HEAP32[$0 + 12 >> 2] | 0)) {
         if ($40 >>> 0 > $2 >>> 0) {
          $$pre$phiZ2D = $38; //@line 3323
          $48 = $39; //@line 3323
          label = 22; //@line 3324
          break L21;
         } else {
          label = 20; //@line 3327
          break L21;
         }
        } else {
         if ($40 >>> 0 < $2 >>> 0) {
          label = 20; //@line 3333
          break L21;
         } else {
          $$pre$phiZ2D = $38; //@line 3336
          $48 = $39; //@line 3336
          label = 22; //@line 3337
          break L21;
         }
        }
        break;
       }
      case 1:
       {
        $43 = $0 + 36 | 0; //@line 3344
        $44 = HEAP32[$43 >> 2] | 0; //@line 3345
        if (($10 - $44 | 0) >>> 0 > $2 >>> 0) {
         $$pre$phiZ2D = $43; //@line 3349
         $48 = $44; //@line 3349
         label = 22; //@line 3350
        } else {
         $$pre$phi128Z2D = $43; //@line 3352
         $52 = $44; //@line 3352
        }
        break;
       }
      default:
       {
        label = 20; //@line 3357
       }
      }
     } while (0);
     if ((label | 0) == 20) {
      $$phi$trans$insert = $0 + 36 | 0; //@line 3362
      $$pre$phi128Z2D = $$phi$trans$insert; //@line 3364
      $52 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 3364
     } else if ((label | 0) == 22) {
      _memcpy($0 + 20 + $48 | 0, $1 | 0, $2 | 0) | 0; //@line 3368
      HEAP32[$$pre$phiZ2D >> 2] = (HEAP32[$$pre$phiZ2D >> 2] | 0) + $2; //@line 3371
      $$1 = 0; //@line 3372
      return $$1 | 0; //@line 3373
     }
     do {
      if (!$52) {
       $$0121 = $3; //@line 3378
       $$0122 = $2; //@line 3378
       $$0124 = $1; //@line 3378
      } else {
       $53 = $10 - $52 | 0; //@line 3380
       _memcpy($0 + 20 + $52 | 0, $1 | 0, $53 | 0) | 0; //@line 3382
       $59 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 3387
       $61 = HEAP32[$0 + 60 >> 2] | 0; //@line 3389
       $62 = HEAP32[$33 >> 2] | 0; //@line 3390
       $AsyncCtx3 = _emscripten_alloc_async_context(44, sp) | 0; //@line 3393
       $65 = FUNCTION_TABLE_iiiiiii[$59 & 3]($61, $62, $10, $0 + 40 | 0, $0 + 20 | 0, $3) | 0; //@line 3394
       if (___async) {
        HEAP32[$AsyncCtx3 >> 2] = 562; //@line 3397
        HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 3399
        HEAP32[$AsyncCtx3 + 8 >> 2] = $10; //@line 3401
        HEAP32[$AsyncCtx3 + 12 >> 2] = $3; //@line 3403
        HEAP32[$AsyncCtx3 + 16 >> 2] = $$pre$phi128Z2D; //@line 3405
        HEAP32[$AsyncCtx3 + 20 >> 2] = $1; //@line 3407
        HEAP32[$AsyncCtx3 + 24 >> 2] = $53; //@line 3409
        HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 3411
        HEAP32[$AsyncCtx3 + 32 >> 2] = $33; //@line 3413
        HEAP32[$AsyncCtx3 + 36 >> 2] = $0; //@line 3415
        HEAP32[$AsyncCtx3 + 40 >> 2] = $0; //@line 3417
        sp = STACKTOP; //@line 3418
        return 0; //@line 3419
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3421
       if (!$65) {
        HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + $10; //@line 3426
        HEAP32[$$pre$phi128Z2D >> 2] = 0; //@line 3428
        $$0121 = $3 + $10 | 0; //@line 3431
        $$0122 = $2 - $53 | 0; //@line 3431
        $$0124 = $1 + $53 | 0; //@line 3431
        break;
       } else {
        $$1 = $65; //@line 3434
        return $$1 | 0; //@line 3435
       }
      }
     } while (0);
     if (!$$0122) {
      $$1 = 0; //@line 3441
      return $$1 | 0; //@line 3442
     }
     $83 = ($$0122 >>> 0) % ($10 >>> 0) | 0; //@line 3444
     if (!$83) {
      if (!(HEAP32[$33 >> 2] | 0)) {
       $$0 = (HEAP32[$0 + 12 >> 2] | 0) == 0 ? 0 : $10; //@line 3454
      } else {
       $$0 = 0; //@line 3456
      }
     } else {
      $$0 = $83; //@line 3459
     }
     $91 = $$0122 - $$0 | 0; //@line 3462
     _memcpy($0 + 20 | 0, $$0124 + $91 | 0, $$0 | 0) | 0; //@line 3464
     HEAP32[$$pre$phi128Z2D >> 2] = (HEAP32[$$pre$phi128Z2D >> 2] | 0) + $$0; //@line 3467
     if (!$91) {
      $$1 = 0; //@line 3470
      return $$1 | 0; //@line 3471
     }
     $100 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 3477
     $102 = HEAP32[$0 + 60 >> 2] | 0; //@line 3479
     $103 = HEAP32[$33 >> 2] | 0; //@line 3480
     $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 3482
     $105 = FUNCTION_TABLE_iiiiiii[$100 & 3]($102, $103, $91, $0 + 40 | 0, $$0124, $$0121) | 0; //@line 3483
     if (___async) {
      HEAP32[$AsyncCtx7 >> 2] = 563; //@line 3486
      HEAP32[$AsyncCtx7 + 4 >> 2] = $4; //@line 3488
      HEAP32[$AsyncCtx7 + 8 >> 2] = $91; //@line 3490
      sp = STACKTOP; //@line 3491
      return 0; //@line 3492
     }
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 3494
     if ($105 | 0) {
      $$1 = $105; //@line 3497
      return $$1 | 0; //@line 3498
     }
     HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + $91; //@line 3502
     $$1 = 0; //@line 3503
     return $$1 | 0; //@line 3504
    }
   case 5:
    {
     $114 = HEAP32[(HEAP32[$6 + 28 >> 2] | 0) + 12 >> 2] | 0; //@line 3511
     $116 = HEAP32[$0 + 60 >> 2] | 0; //@line 3513
     $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 3517
     $120 = FUNCTION_TABLE_iiiiiiii[$114 & 1]($116, $2, $0 + 36 | 0, $0 + 40 | 0, $0 + 20 | 0, $1, $3) | 0; //@line 3518
     if (___async) {
      HEAP32[$AsyncCtx11 >> 2] = 564; //@line 3521
      HEAP32[$AsyncCtx11 + 4 >> 2] = $2; //@line 3523
      HEAP32[$AsyncCtx11 + 8 >> 2] = $4; //@line 3525
      sp = STACKTOP; //@line 3526
      return 0; //@line 3527
     }
     _emscripten_free_async_context($AsyncCtx11 | 0); //@line 3529
     if ($120 | 0) {
      $$1 = $120; //@line 3532
      return $$1 | 0; //@line 3533
     }
     HEAP32[$4 >> 2] = $2; //@line 3535
     $$1 = 0; //@line 3536
     return $$1 | 0; //@line 3537
    }
   default:
    {
     $$1 = -24704; //@line 3541
     return $$1 | 0; //@line 3542
    }
   }
  }
 }
 return 0; //@line 3547
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$byval_copy = 0, $14 = 0, $23 = 0, $35 = 0, $48 = 0, $5 = 0, $53 = 0, $54 = 0, $64 = 0, $66 = 0, $93 = 0, $94 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx7 = 0, $trunc = 0, sp = 0;
 sp = STACKTOP; //@line 13723
 STACKTOP = STACKTOP + 16 | 0; //@line 13724
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13724
 $$byval_copy = sp + 8 | 0; //@line 13725
 $5 = sp; //@line 13726
 $AsyncCtx31 = _emscripten_alloc_async_context(28, sp) | 0; //@line 13728
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1816 | 0); //@line 13729
 if (___async) {
  HEAP32[$AsyncCtx31 >> 2] = 407; //@line 13732
  HEAP32[$AsyncCtx31 + 4 >> 2] = $0; //@line 13734
  HEAP32[$AsyncCtx31 + 8 >> 2] = $1; //@line 13736
  HEAP16[$AsyncCtx31 + 12 >> 1] = $2; //@line 13738
  HEAP32[$AsyncCtx31 + 16 >> 2] = $5; //@line 13740
  HEAP16[$AsyncCtx31 + 20 >> 1] = $3; //@line 13742
  HEAP8[$AsyncCtx31 + 22 >> 0] = $4; //@line 13744
  HEAP32[$AsyncCtx31 + 24 >> 2] = $0; //@line 13746
  sp = STACKTOP; //@line 13747
  STACKTOP = sp; //@line 13748
  return;
 }
 _emscripten_free_async_context($AsyncCtx31 | 0); //@line 13750
 $14 = $0 + 1836 | 0; //@line 13751
 $AsyncCtx27 = _emscripten_alloc_async_context(32, sp) | 0; //@line 13752
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $14); //@line 13753
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 408; //@line 13756
  HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 13758
  HEAP32[$AsyncCtx27 + 8 >> 2] = $1; //@line 13760
  HEAP16[$AsyncCtx27 + 12 >> 1] = $2; //@line 13762
  HEAP32[$AsyncCtx27 + 16 >> 2] = $5; //@line 13764
  HEAP16[$AsyncCtx27 + 20 >> 1] = $3; //@line 13766
  HEAP8[$AsyncCtx27 + 22 >> 0] = $4; //@line 13768
  HEAP32[$AsyncCtx27 + 24 >> 2] = $0; //@line 13770
  HEAP32[$AsyncCtx27 + 28 >> 2] = $14; //@line 13772
  sp = STACKTOP; //@line 13773
  STACKTOP = sp; //@line 13774
  return;
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 13776
 $23 = $0 + 2364 | 0; //@line 13777
 do {
  if ((HEAP32[$23 >> 2] | 0) == 2) {
   $AsyncCtx23 = _emscripten_alloc_async_context(28, sp) | 0; //@line 13782
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $14); //@line 13783
   if (___async) {
    HEAP32[$AsyncCtx23 >> 2] = 409; //@line 13786
    HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 13788
    HEAP32[$AsyncCtx23 + 8 >> 2] = $1; //@line 13790
    HEAP16[$AsyncCtx23 + 12 >> 1] = $2; //@line 13792
    HEAP32[$AsyncCtx23 + 16 >> 2] = $5; //@line 13794
    HEAP32[$AsyncCtx23 + 20 >> 2] = $23; //@line 13796
    HEAP16[$AsyncCtx23 + 24 >> 1] = $3; //@line 13798
    HEAP8[$AsyncCtx23 + 26 >> 0] = $4; //@line 13800
    sp = STACKTOP; //@line 13801
    STACKTOP = sp; //@line 13802
    return;
   }
   _emscripten_free_async_context($AsyncCtx23 | 0); //@line 13804
   $35 = $0 + 1964 | 0; //@line 13807
   HEAP8[$35 >> 0] = HEAP8[$0 + 1182 >> 0] | 0; //@line 13808
   HEAP32[$0 + 1968 >> 2] = HEAP32[$0 + 1912 >> 2]; //@line 13812
   HEAP8[$0 + 1980 >> 0] = HEAP8[$0 + 1921 >> 0] | 0; //@line 13816
   HEAP8[$0 + 1981 >> 0] = HEAP8[$0 + 1173 >> 0] | 0; //@line 13820
   HEAP32[$0 + 1984 >> 2] = 1; //@line 13822
   $48 = $0 + 1982 | 0; //@line 13825
   HEAP8[$48 >> 0] = (HEAP32[$23 >> 2] | 0) == 2 & 1; //@line 13827
   HEAP8[$0 + 2010 >> 0] = HEAP8[$0 + 1965 >> 0] | 0; //@line 13831
   $53 = $0 + 4 | 0; //@line 13832
   $AsyncCtx15 = _emscripten_alloc_async_context(32, sp) | 0; //@line 13833
   $54 = __ZN7LoRaPHY9rx_configEP18rx_config_params_t($53, $35) | 0; //@line 13834
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 410; //@line 13837
    HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 13839
    HEAP32[$AsyncCtx15 + 8 >> 2] = $1; //@line 13841
    HEAP16[$AsyncCtx15 + 12 >> 1] = $2; //@line 13843
    HEAP32[$AsyncCtx15 + 16 >> 2] = $5; //@line 13845
    HEAP32[$AsyncCtx15 + 20 >> 2] = $48; //@line 13847
    HEAP32[$AsyncCtx15 + 24 >> 2] = $53; //@line 13849
    HEAP16[$AsyncCtx15 + 28 >> 1] = $3; //@line 13851
    HEAP8[$AsyncCtx15 + 30 >> 0] = $4; //@line 13853
    sp = STACKTOP; //@line 13854
    STACKTOP = sp; //@line 13855
    return;
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 13857
   if ($54) {
    $64 = (HEAP8[$48 >> 0] | 0) != 0; //@line 13860
    $66 = HEAP32[$0 + 1888 >> 2] | 0; //@line 13862
    $AsyncCtx7 = _emscripten_alloc_async_context(28, sp) | 0; //@line 13863
    __ZN7LoRaPHY15setup_rx_windowEbj($53, $64, $66); //@line 13864
    if (___async) {
     HEAP32[$AsyncCtx7 >> 2] = 411; //@line 13867
     HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 13869
     HEAP32[$AsyncCtx7 + 8 >> 2] = $1; //@line 13871
     HEAP16[$AsyncCtx7 + 12 >> 1] = $2; //@line 13873
     HEAP32[$AsyncCtx7 + 16 >> 2] = $5; //@line 13875
     HEAP32[$AsyncCtx7 + 20 >> 2] = $48; //@line 13877
     HEAP16[$AsyncCtx7 + 24 >> 1] = $3; //@line 13879
     HEAP8[$AsyncCtx7 + 26 >> 0] = $4; //@line 13881
     sp = STACKTOP; //@line 13882
     STACKTOP = sp; //@line 13883
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 13885
     HEAP32[$0 + 1168 >> 2] = HEAP8[$48 >> 0] | 0 ? 2 : 1; //@line 13890
     break;
    }
   }
  } else {
   $AsyncCtx11 = _emscripten_alloc_async_context(24, sp) | 0; //@line 13896
   __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 13897
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 412; //@line 13900
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 13902
    HEAP32[$AsyncCtx11 + 8 >> 2] = $1; //@line 13904
    HEAP16[$AsyncCtx11 + 12 >> 1] = $2; //@line 13906
    HEAP32[$AsyncCtx11 + 16 >> 2] = $5; //@line 13908
    HEAP16[$AsyncCtx11 + 20 >> 1] = $3; //@line 13910
    HEAP8[$AsyncCtx11 + 22 >> 0] = $4; //@line 13912
    sp = STACKTOP; //@line 13913
    STACKTOP = sp; //@line 13914
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 13916
    break;
   }
  }
 } while (0);
 $trunc = (HEAPU8[$1 >> 0] | 0) >>> 5; //@line 13922
 switch ($trunc & 7) {
 case 1:
  {
   if (!(HEAP8[$0 + 2360 >> 0] | 0)) {
    $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 13930
    __ZN7LoRaMac24handle_join_accept_frameEPKht($0, $1, $2); //@line 13931
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 415; //@line 13934
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 13936
     sp = STACKTOP; //@line 13937
     STACKTOP = sp; //@line 13938
     return;
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13940
    HEAP8[$0 + 2068 >> 0] = 1; //@line 13942
    STACKTOP = sp; //@line 13943
    return;
   }
   do {
    if (HEAP8[$0 + 1177 >> 0] | 0) {
     $93 = HEAP32[$0 + 1992 >> 2] | 0; //@line 13951
     HEAP32[$5 >> 2] = 389; //@line 13952
     HEAP32[$5 + 4 >> 2] = 0; //@line 13954
     $AsyncCtx19 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13955
     HEAP32[$$byval_copy >> 2] = HEAP32[$5 >> 2]; //@line 13956
     HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$5 + 4 >> 2]; //@line 13956
     $94 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($93, $0, $$byval_copy) | 0; //@line 13957
     if (___async) {
      HEAP32[$AsyncCtx19 >> 2] = 413; //@line 13960
      HEAP32[$AsyncCtx19 + 4 >> 2] = $5; //@line 13962
      HEAP32[$AsyncCtx19 + 8 >> 2] = $0; //@line 13964
      sp = STACKTOP; //@line 13965
      STACKTOP = sp; //@line 13966
      return;
     }
     _emscripten_free_async_context($AsyncCtx19 | 0); //@line 13968
     if (!$94) {
      $AsyncCtx35 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13971
      _mbed_assert_internal(13097, 13106, 231); //@line 13972
      if (___async) {
       HEAP32[$AsyncCtx35 >> 2] = 414; //@line 13975
       HEAP32[$AsyncCtx35 + 4 >> 2] = $5; //@line 13977
       HEAP32[$AsyncCtx35 + 8 >> 2] = $0; //@line 13979
       sp = STACKTOP; //@line 13980
       STACKTOP = sp; //@line 13981
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx35 | 0); //@line 13983
       break;
      }
     }
    }
   } while (0);
   HEAP8[$0 + 2068 >> 0] = 0; //@line 13990
   STACKTOP = sp; //@line 13991
   return;
  }
 case 7:
 case 5:
 case 3:
  {
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13995
   __ZN7LoRaMac17handle_data_frameEPKhthhsa($0, $1, $2, 1, $trunc, $3, $4); //@line 13996
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 416; //@line 13999
    sp = STACKTOP; //@line 14000
    STACKTOP = sp; //@line 14001
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 14003
   STACKTOP = sp; //@line 14004
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 14008
   return;
  }
 }
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_365($0) {
 $0 = $0 | 0;
 var $$pre$i$i25 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 28099
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28101
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28103
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28109
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28111
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28113
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28115
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28117
 $$pre$i$i25 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 28118
 HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = $$pre$i$i25; //@line 28120
 if ($$pre$i$i25 | 0) {
  $22 = HEAP32[$$pre$i$i25 + 8 >> 2] | 0; //@line 28124
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 28125
  FUNCTION_TABLE_vi[$22 & 1023]($14); //@line 28126
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 171; //@line 28129
   $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 28130
   HEAP32[$23 >> 2] = $2; //@line 28131
   $24 = $ReallocAsyncCtx6 + 8 | 0; //@line 28132
   HEAP32[$24 >> 2] = $4; //@line 28133
   $25 = $ReallocAsyncCtx6 + 12 | 0; //@line 28134
   HEAP32[$25 >> 2] = $10; //@line 28135
   $26 = $ReallocAsyncCtx6 + 16 | 0; //@line 28136
   HEAP32[$26 >> 2] = $12; //@line 28137
   $27 = $ReallocAsyncCtx6 + 20 | 0; //@line 28138
   HEAP32[$27 >> 2] = $14; //@line 28139
   $28 = $ReallocAsyncCtx6 + 24 | 0; //@line 28140
   HEAP32[$28 >> 2] = $16; //@line 28141
   $29 = $ReallocAsyncCtx6 + 28 | 0; //@line 28142
   HEAP32[$29 >> 2] = $18; //@line 28143
   sp = STACKTOP; //@line 28144
   return;
  }
  ___async_unwind = 0; //@line 28147
  HEAP32[$ReallocAsyncCtx6 >> 2] = 171; //@line 28148
  $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 28149
  HEAP32[$23 >> 2] = $2; //@line 28150
  $24 = $ReallocAsyncCtx6 + 8 | 0; //@line 28151
  HEAP32[$24 >> 2] = $4; //@line 28152
  $25 = $ReallocAsyncCtx6 + 12 | 0; //@line 28153
  HEAP32[$25 >> 2] = $10; //@line 28154
  $26 = $ReallocAsyncCtx6 + 16 | 0; //@line 28155
  HEAP32[$26 >> 2] = $12; //@line 28156
  $27 = $ReallocAsyncCtx6 + 20 | 0; //@line 28157
  HEAP32[$27 >> 2] = $14; //@line 28158
  $28 = $ReallocAsyncCtx6 + 24 | 0; //@line 28159
  HEAP32[$28 >> 2] = $16; //@line 28160
  $29 = $ReallocAsyncCtx6 + 28 | 0; //@line 28161
  HEAP32[$29 >> 2] = $18; //@line 28162
  sp = STACKTOP; //@line 28163
  return;
 }
 $30 = $16 + 12 | 0; //@line 28166
 HEAP32[$16 >> 2] = 172; //@line 28167
 HEAP32[$16 + 4 >> 2] = 0; //@line 28169
 HEAP32[$16 + 8 >> 2] = $4; //@line 28171
 HEAP32[$30 >> 2] = 808; //@line 28172
 $31 = $4 + 2432 | 0; //@line 28173
 if (($31 | 0) == ($16 | 0)) {
  $58 = HEAP32[204] | 0; //@line 28177
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(28) | 0; //@line 28178
  FUNCTION_TABLE_vi[$58 & 1023]($16); //@line 28179
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 175; //@line 28182
   $59 = $ReallocAsyncCtx9 + 4 | 0; //@line 28183
   HEAP32[$59 >> 2] = $16; //@line 28184
   $60 = $ReallocAsyncCtx9 + 8 | 0; //@line 28185
   HEAP32[$60 >> 2] = $2; //@line 28186
   $61 = $ReallocAsyncCtx9 + 12 | 0; //@line 28187
   HEAP32[$61 >> 2] = $4; //@line 28188
   $62 = $ReallocAsyncCtx9 + 16 | 0; //@line 28189
   HEAP32[$62 >> 2] = $10; //@line 28190
   $63 = $ReallocAsyncCtx9 + 20 | 0; //@line 28191
   HEAP32[$63 >> 2] = $12; //@line 28192
   $64 = $ReallocAsyncCtx9 + 24 | 0; //@line 28193
   HEAP32[$64 >> 2] = $18; //@line 28194
   sp = STACKTOP; //@line 28195
   return;
  }
  ___async_unwind = 0; //@line 28198
  HEAP32[$ReallocAsyncCtx9 >> 2] = 175; //@line 28199
  $59 = $ReallocAsyncCtx9 + 4 | 0; //@line 28200
  HEAP32[$59 >> 2] = $16; //@line 28201
  $60 = $ReallocAsyncCtx9 + 8 | 0; //@line 28202
  HEAP32[$60 >> 2] = $2; //@line 28203
  $61 = $ReallocAsyncCtx9 + 12 | 0; //@line 28204
  HEAP32[$61 >> 2] = $4; //@line 28205
  $62 = $ReallocAsyncCtx9 + 16 | 0; //@line 28206
  HEAP32[$62 >> 2] = $10; //@line 28207
  $63 = $ReallocAsyncCtx9 + 20 | 0; //@line 28208
  HEAP32[$63 >> 2] = $12; //@line 28209
  $64 = $ReallocAsyncCtx9 + 24 | 0; //@line 28210
  HEAP32[$64 >> 2] = $18; //@line 28211
  sp = STACKTOP; //@line 28212
  return;
 }
 $33 = $4 + 2444 | 0; //@line 28215
 $34 = HEAP32[$33 >> 2] | 0; //@line 28216
 if (!$34) {
  $48 = HEAP32[203] | 0; //@line 28220
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 28221
  FUNCTION_TABLE_vii[$48 & 15]($31, $16); //@line 28222
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 174; //@line 28225
   $49 = $ReallocAsyncCtx8 + 4 | 0; //@line 28226
   HEAP32[$49 >> 2] = $16; //@line 28227
   $50 = $ReallocAsyncCtx8 + 8 | 0; //@line 28228
   HEAP32[$50 >> 2] = $2; //@line 28229
   $51 = $ReallocAsyncCtx8 + 12 | 0; //@line 28230
   HEAP32[$51 >> 2] = $4; //@line 28231
   $52 = $ReallocAsyncCtx8 + 16 | 0; //@line 28232
   HEAP32[$52 >> 2] = $30; //@line 28233
   $53 = $ReallocAsyncCtx8 + 20 | 0; //@line 28234
   HEAP32[$53 >> 2] = $33; //@line 28235
   $54 = $ReallocAsyncCtx8 + 24 | 0; //@line 28236
   HEAP32[$54 >> 2] = $10; //@line 28237
   $55 = $ReallocAsyncCtx8 + 28 | 0; //@line 28238
   HEAP32[$55 >> 2] = $12; //@line 28239
   $56 = $ReallocAsyncCtx8 + 32 | 0; //@line 28240
   HEAP32[$56 >> 2] = $18; //@line 28241
   sp = STACKTOP; //@line 28242
   return;
  }
  ___async_unwind = 0; //@line 28245
  HEAP32[$ReallocAsyncCtx8 >> 2] = 174; //@line 28246
  $49 = $ReallocAsyncCtx8 + 4 | 0; //@line 28247
  HEAP32[$49 >> 2] = $16; //@line 28248
  $50 = $ReallocAsyncCtx8 + 8 | 0; //@line 28249
  HEAP32[$50 >> 2] = $2; //@line 28250
  $51 = $ReallocAsyncCtx8 + 12 | 0; //@line 28251
  HEAP32[$51 >> 2] = $4; //@line 28252
  $52 = $ReallocAsyncCtx8 + 16 | 0; //@line 28253
  HEAP32[$52 >> 2] = $30; //@line 28254
  $53 = $ReallocAsyncCtx8 + 20 | 0; //@line 28255
  HEAP32[$53 >> 2] = $33; //@line 28256
  $54 = $ReallocAsyncCtx8 + 24 | 0; //@line 28257
  HEAP32[$54 >> 2] = $10; //@line 28258
  $55 = $ReallocAsyncCtx8 + 28 | 0; //@line 28259
  HEAP32[$55 >> 2] = $12; //@line 28260
  $56 = $ReallocAsyncCtx8 + 32 | 0; //@line 28261
  HEAP32[$56 >> 2] = $18; //@line 28262
  sp = STACKTOP; //@line 28263
  return;
 } else {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 28267
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(40) | 0; //@line 28268
  FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 28269
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 173; //@line 28272
   $38 = $ReallocAsyncCtx7 + 4 | 0; //@line 28273
   HEAP32[$38 >> 2] = $16; //@line 28274
   $39 = $ReallocAsyncCtx7 + 8 | 0; //@line 28275
   HEAP32[$39 >> 2] = $2; //@line 28276
   $40 = $ReallocAsyncCtx7 + 12 | 0; //@line 28277
   HEAP32[$40 >> 2] = $4; //@line 28278
   $41 = $ReallocAsyncCtx7 + 16 | 0; //@line 28279
   HEAP32[$41 >> 2] = $33; //@line 28280
   $42 = $ReallocAsyncCtx7 + 20 | 0; //@line 28281
   HEAP32[$42 >> 2] = $30; //@line 28282
   $43 = $ReallocAsyncCtx7 + 24 | 0; //@line 28283
   HEAP32[$43 >> 2] = $31; //@line 28284
   $44 = $ReallocAsyncCtx7 + 28 | 0; //@line 28285
   HEAP32[$44 >> 2] = $10; //@line 28286
   $45 = $ReallocAsyncCtx7 + 32 | 0; //@line 28287
   HEAP32[$45 >> 2] = $12; //@line 28288
   $46 = $ReallocAsyncCtx7 + 36 | 0; //@line 28289
   HEAP32[$46 >> 2] = $18; //@line 28290
   sp = STACKTOP; //@line 28291
   return;
  }
  ___async_unwind = 0; //@line 28294
  HEAP32[$ReallocAsyncCtx7 >> 2] = 173; //@line 28295
  $38 = $ReallocAsyncCtx7 + 4 | 0; //@line 28296
  HEAP32[$38 >> 2] = $16; //@line 28297
  $39 = $ReallocAsyncCtx7 + 8 | 0; //@line 28298
  HEAP32[$39 >> 2] = $2; //@line 28299
  $40 = $ReallocAsyncCtx7 + 12 | 0; //@line 28300
  HEAP32[$40 >> 2] = $4; //@line 28301
  $41 = $ReallocAsyncCtx7 + 16 | 0; //@line 28302
  HEAP32[$41 >> 2] = $33; //@line 28303
  $42 = $ReallocAsyncCtx7 + 20 | 0; //@line 28304
  HEAP32[$42 >> 2] = $30; //@line 28305
  $43 = $ReallocAsyncCtx7 + 24 | 0; //@line 28306
  HEAP32[$43 >> 2] = $31; //@line 28307
  $44 = $ReallocAsyncCtx7 + 28 | 0; //@line 28308
  HEAP32[$44 >> 2] = $10; //@line 28309
  $45 = $ReallocAsyncCtx7 + 32 | 0; //@line 28310
  HEAP32[$45 >> 2] = $12; //@line 28311
  $46 = $ReallocAsyncCtx7 + 36 | 0; //@line 28312
  HEAP32[$46 >> 2] = $18; //@line 28313
  sp = STACKTOP; //@line 28314
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_130($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 27325
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27327
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27329
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27331
 HEAP32[HEAP32[$0 + 20 >> 2] >> 2] = HEAP32[HEAP32[$0 + 16 >> 2] >> 2]; //@line 27337
 $11 = $4 + 16 | 0; //@line 27338
 $12 = $4 + 28 | 0; //@line 27339
 $13 = HEAP32[$12 >> 2] | 0; //@line 27340
 if ($13 | 0) {
  $15 = $2 + 2500 | 0; //@line 27343
  if (($15 | 0) != ($11 | 0)) {
   $17 = $2 + 2512 | 0; //@line 27346
   $18 = HEAP32[$17 >> 2] | 0; //@line 27347
   if (!$18) {
    $30 = HEAP32[$13 + 4 >> 2] | 0; //@line 27351
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 27352
    FUNCTION_TABLE_vii[$30 & 15]($15, $11); //@line 27353
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 335; //@line 27356
     $31 = $ReallocAsyncCtx4 + 4 | 0; //@line 27357
     HEAP32[$31 >> 2] = $2; //@line 27358
     $32 = $ReallocAsyncCtx4 + 8 | 0; //@line 27359
     HEAP32[$32 >> 2] = $12; //@line 27360
     $33 = $ReallocAsyncCtx4 + 12 | 0; //@line 27361
     HEAP32[$33 >> 2] = $17; //@line 27362
     $34 = $ReallocAsyncCtx4 + 16 | 0; //@line 27363
     HEAP32[$34 >> 2] = $4; //@line 27364
     $35 = $ReallocAsyncCtx4 + 20 | 0; //@line 27365
     HEAP32[$35 >> 2] = $6; //@line 27366
     sp = STACKTOP; //@line 27367
     return;
    }
    ___async_unwind = 0; //@line 27370
    HEAP32[$ReallocAsyncCtx4 >> 2] = 335; //@line 27371
    $31 = $ReallocAsyncCtx4 + 4 | 0; //@line 27372
    HEAP32[$31 >> 2] = $2; //@line 27373
    $32 = $ReallocAsyncCtx4 + 8 | 0; //@line 27374
    HEAP32[$32 >> 2] = $12; //@line 27375
    $33 = $ReallocAsyncCtx4 + 12 | 0; //@line 27376
    HEAP32[$33 >> 2] = $17; //@line 27377
    $34 = $ReallocAsyncCtx4 + 16 | 0; //@line 27378
    HEAP32[$34 >> 2] = $4; //@line 27379
    $35 = $ReallocAsyncCtx4 + 20 | 0; //@line 27380
    HEAP32[$35 >> 2] = $6; //@line 27381
    sp = STACKTOP; //@line 27382
    return;
   } else {
    $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 27386
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 27387
    FUNCTION_TABLE_vi[$21 & 1023]($15); //@line 27388
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 334; //@line 27391
     $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 27392
     HEAP32[$22 >> 2] = $2; //@line 27393
     $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 27394
     HEAP32[$23 >> 2] = $12; //@line 27395
     $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 27396
     HEAP32[$24 >> 2] = $17; //@line 27397
     $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 27398
     HEAP32[$25 >> 2] = $4; //@line 27399
     $26 = $ReallocAsyncCtx3 + 20 | 0; //@line 27400
     HEAP32[$26 >> 2] = $6; //@line 27401
     $27 = $ReallocAsyncCtx3 + 24 | 0; //@line 27402
     HEAP32[$27 >> 2] = $15; //@line 27403
     $28 = $ReallocAsyncCtx3 + 28 | 0; //@line 27404
     HEAP32[$28 >> 2] = $11; //@line 27405
     sp = STACKTOP; //@line 27406
     return;
    }
    ___async_unwind = 0; //@line 27409
    HEAP32[$ReallocAsyncCtx3 >> 2] = 334; //@line 27410
    $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 27411
    HEAP32[$22 >> 2] = $2; //@line 27412
    $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 27413
    HEAP32[$23 >> 2] = $12; //@line 27414
    $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 27415
    HEAP32[$24 >> 2] = $17; //@line 27416
    $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 27417
    HEAP32[$25 >> 2] = $4; //@line 27418
    $26 = $ReallocAsyncCtx3 + 20 | 0; //@line 27419
    HEAP32[$26 >> 2] = $6; //@line 27420
    $27 = $ReallocAsyncCtx3 + 24 | 0; //@line 27421
    HEAP32[$27 >> 2] = $15; //@line 27422
    $28 = $ReallocAsyncCtx3 + 28 | 0; //@line 27423
    HEAP32[$28 >> 2] = $11; //@line 27424
    sp = STACKTOP; //@line 27425
    return;
   }
  }
 }
 $36 = $4 + 32 | 0; //@line 27430
 $37 = $4 + 44 | 0; //@line 27431
 $38 = HEAP32[$37 >> 2] | 0; //@line 27432
 if (!$38) {
  HEAP32[___async_retval >> 2] = 0; //@line 27436
  return;
 }
 $40 = $2 + 2516 | 0; //@line 27439
 if (($40 | 0) == ($36 | 0)) {
  $61 = HEAP32[$38 + 4 >> 2] | 0; //@line 27443
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 27444
  FUNCTION_TABLE_vii[$61 & 15]($6, $36); //@line 27445
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 338; //@line 27448
   $62 = $ReallocAsyncCtx7 + 4 | 0; //@line 27449
   HEAP32[$62 >> 2] = $37; //@line 27450
   $63 = $ReallocAsyncCtx7 + 8 | 0; //@line 27451
   HEAP32[$63 >> 2] = $2; //@line 27452
   $64 = $ReallocAsyncCtx7 + 12 | 0; //@line 27453
   HEAP32[$64 >> 2] = $6; //@line 27454
   sp = STACKTOP; //@line 27455
   return;
  }
  ___async_unwind = 0; //@line 27458
  HEAP32[$ReallocAsyncCtx7 >> 2] = 338; //@line 27459
  $62 = $ReallocAsyncCtx7 + 4 | 0; //@line 27460
  HEAP32[$62 >> 2] = $37; //@line 27461
  $63 = $ReallocAsyncCtx7 + 8 | 0; //@line 27462
  HEAP32[$63 >> 2] = $2; //@line 27463
  $64 = $ReallocAsyncCtx7 + 12 | 0; //@line 27464
  HEAP32[$64 >> 2] = $6; //@line 27465
  sp = STACKTOP; //@line 27466
  return;
 }
 $42 = $2 + 2528 | 0; //@line 27469
 $43 = HEAP32[$42 >> 2] | 0; //@line 27470
 if (!$43) {
  $54 = HEAP32[$38 + 4 >> 2] | 0; //@line 27474
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 27475
  FUNCTION_TABLE_vii[$54 & 15]($40, $36); //@line 27476
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 337; //@line 27479
   $55 = $ReallocAsyncCtx6 + 4 | 0; //@line 27480
   HEAP32[$55 >> 2] = $37; //@line 27481
   $56 = $ReallocAsyncCtx6 + 8 | 0; //@line 27482
   HEAP32[$56 >> 2] = $42; //@line 27483
   $57 = $ReallocAsyncCtx6 + 12 | 0; //@line 27484
   HEAP32[$57 >> 2] = $2; //@line 27485
   $58 = $ReallocAsyncCtx6 + 16 | 0; //@line 27486
   HEAP32[$58 >> 2] = $6; //@line 27487
   $59 = $ReallocAsyncCtx6 + 20 | 0; //@line 27488
   HEAP32[$59 >> 2] = $36; //@line 27489
   sp = STACKTOP; //@line 27490
   return;
  }
  ___async_unwind = 0; //@line 27493
  HEAP32[$ReallocAsyncCtx6 >> 2] = 337; //@line 27494
  $55 = $ReallocAsyncCtx6 + 4 | 0; //@line 27495
  HEAP32[$55 >> 2] = $37; //@line 27496
  $56 = $ReallocAsyncCtx6 + 8 | 0; //@line 27497
  HEAP32[$56 >> 2] = $42; //@line 27498
  $57 = $ReallocAsyncCtx6 + 12 | 0; //@line 27499
  HEAP32[$57 >> 2] = $2; //@line 27500
  $58 = $ReallocAsyncCtx6 + 16 | 0; //@line 27501
  HEAP32[$58 >> 2] = $6; //@line 27502
  $59 = $ReallocAsyncCtx6 + 20 | 0; //@line 27503
  HEAP32[$59 >> 2] = $36; //@line 27504
  sp = STACKTOP; //@line 27505
  return;
 } else {
  $46 = HEAP32[$43 + 8 >> 2] | 0; //@line 27509
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 27510
  FUNCTION_TABLE_vi[$46 & 1023]($40); //@line 27511
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 336; //@line 27514
   $47 = $ReallocAsyncCtx5 + 4 | 0; //@line 27515
   HEAP32[$47 >> 2] = $37; //@line 27516
   $48 = $ReallocAsyncCtx5 + 8 | 0; //@line 27517
   HEAP32[$48 >> 2] = $42; //@line 27518
   $49 = $ReallocAsyncCtx5 + 12 | 0; //@line 27519
   HEAP32[$49 >> 2] = $2; //@line 27520
   $50 = $ReallocAsyncCtx5 + 16 | 0; //@line 27521
   HEAP32[$50 >> 2] = $40; //@line 27522
   $51 = $ReallocAsyncCtx5 + 20 | 0; //@line 27523
   HEAP32[$51 >> 2] = $36; //@line 27524
   $52 = $ReallocAsyncCtx5 + 24 | 0; //@line 27525
   HEAP32[$52 >> 2] = $6; //@line 27526
   sp = STACKTOP; //@line 27527
   return;
  }
  ___async_unwind = 0; //@line 27530
  HEAP32[$ReallocAsyncCtx5 >> 2] = 336; //@line 27531
  $47 = $ReallocAsyncCtx5 + 4 | 0; //@line 27532
  HEAP32[$47 >> 2] = $37; //@line 27533
  $48 = $ReallocAsyncCtx5 + 8 | 0; //@line 27534
  HEAP32[$48 >> 2] = $42; //@line 27535
  $49 = $ReallocAsyncCtx5 + 12 | 0; //@line 27536
  HEAP32[$49 >> 2] = $2; //@line 27537
  $50 = $ReallocAsyncCtx5 + 16 | 0; //@line 27538
  HEAP32[$50 >> 2] = $40; //@line 27539
  $51 = $ReallocAsyncCtx5 + 20 | 0; //@line 27540
  HEAP32[$51 >> 2] = $36; //@line 27541
  $52 = $ReallocAsyncCtx5 + 24 | 0; //@line 27542
  HEAP32[$52 >> 2] = $6; //@line 27543
  sp = STACKTOP; //@line 27544
  return;
 }
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$036 = 0, $$038 = 0, $10 = 0, $104 = 0, $107 = 0, $110 = 0, $114 = 0, $117 = 0, $126 = 0, $129 = 0, $132 = 0, $134 = 0, $137 = 0, $16 = 0, $19 = 0, $20 = 0, $26 = 0, $27 = 0, $3 = 0, $30 = 0, $41 = 0, $43 = 0, $47 = 0, $5 = 0, $52 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $6 = 0, $61 = 0, $7 = 0, $71 = 0, $74 = 0, $87 = 0, $90 = 0, $95 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19174
 $3 = HEAP8[$1 + 1 >> 0] | 0; //@line 19176
 $5 = HEAP32[$1 + 4 >> 2] | 0; //@line 19178
 $6 = $0 + 4 | 0; //@line 19179
 $7 = HEAP32[$6 >> 2] | 0; //@line 19180
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 72 >> 2] | 0; //@line 19183
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 19184
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 19185
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 500; //@line 19188
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 19190
  HEAP8[$AsyncCtx + 8 >> 0] = $3; //@line 19192
  HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 19194
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 19196
  HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 19198
  sp = STACKTOP; //@line 19199
  return 0; //@line 19200
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 19202
 $16 = HEAP32[$6 >> 2] | 0; //@line 19203
 $19 = HEAP32[(HEAP32[$16 >> 2] | 0) + 40 >> 2] | 0; //@line 19206
 $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19207
 $20 = FUNCTION_TABLE_ii[$19 & 15]($16) | 0; //@line 19208
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 501; //@line 19211
  HEAP32[$AsyncCtx2 + 4 >> 2] = $6; //@line 19213
  HEAP8[$AsyncCtx2 + 8 >> 0] = $3; //@line 19215
  HEAP32[$AsyncCtx2 + 12 >> 2] = $5; //@line 19217
  HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 19219
  HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 19221
  sp = STACKTOP; //@line 19222
  return 0; //@line 19223
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 19225
 $26 = $20 << 24 >> 24 == 0; //@line 19226
 $27 = HEAP32[$6 >> 2] | 0; //@line 19227
 $30 = HEAP32[(HEAP32[$27 >> 2] | 0) + 76 >> 2] | 0; //@line 19230
 $AsyncCtx5 = _emscripten_alloc_async_context(28, sp) | 0; //@line 19231
 FUNCTION_TABLE_vi[$30 & 1023]($27); //@line 19232
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 502; //@line 19235
  HEAP32[$AsyncCtx5 + 4 >> 2] = $6; //@line 19237
  HEAP8[$AsyncCtx5 + 8 >> 0] = $3; //@line 19239
  HEAP32[$AsyncCtx5 + 12 >> 2] = $5; //@line 19241
  HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 19243
  HEAP32[$AsyncCtx5 + 20 >> 2] = $1; //@line 19245
  HEAP8[$AsyncCtx5 + 24 >> 0] = $26 & 1; //@line 19248
  sp = STACKTOP; //@line 19249
  return 0; //@line 19250
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 19252
 if (!$26) {
  $$0 = 0; //@line 19254
  return $$0 | 0; //@line 19255
 }
 if (!(HEAP32[$1 + 20 >> 2] | 0)) {
  $41 = HEAP32[$0 + 124 >> 2] | 0; //@line 19262
  $43 = HEAPU8[$1 >> 0] | 0; //@line 19264
  $47 = HEAP32[$41 + ($43 * 12 | 0) + 4 >> 2] | 0; //@line 19268
  $$038 = ($47 | 0) == 0 ? HEAP32[$41 + ($43 * 12 | 0) >> 2] | 0 : $47; //@line 19271
 } else {
  $$038 = $5; //@line 19273
 }
 $52 = HEAP32[$0 + 96 >> 2] | 0; //@line 19278
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 19280
 $55 = $3 & 255; //@line 19281
 $57 = HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + $55 >> 0] | 0; //@line 19283
 $58 = HEAP32[$6 >> 2] | 0; //@line 19284
 $61 = HEAP32[(HEAP32[$58 >> 2] | 0) + 72 >> 2] | 0; //@line 19287
 $AsyncCtx9 = _emscripten_alloc_async_context(40, sp) | 0; //@line 19288
 FUNCTION_TABLE_vi[$61 & 1023]($58); //@line 19289
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 503; //@line 19292
  HEAP32[$AsyncCtx9 + 4 >> 2] = $6; //@line 19294
  HEAP32[$AsyncCtx9 + 8 >> 2] = $$038; //@line 19296
  HEAP8[$AsyncCtx9 + 12 >> 0] = $3; //@line 19298
  HEAP32[$AsyncCtx9 + 16 >> 2] = $0; //@line 19300
  HEAP32[$AsyncCtx9 + 20 >> 2] = $1; //@line 19302
  HEAP8[$AsyncCtx9 + 24 >> 0] = $57; //@line 19304
  HEAP32[$AsyncCtx9 + 28 >> 2] = $52; //@line 19306
  HEAP32[$AsyncCtx9 + 32 >> 2] = $54; //@line 19308
  HEAP32[$AsyncCtx9 + 36 >> 2] = $55; //@line 19310
  sp = STACKTOP; //@line 19311
  return 0; //@line 19312
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 19314
 $71 = HEAP32[$6 >> 2] | 0; //@line 19315
 $74 = HEAP32[(HEAP32[$71 >> 2] | 0) + 32 >> 2] | 0; //@line 19318
 $AsyncCtx12 = _emscripten_alloc_async_context(36, sp) | 0; //@line 19319
 FUNCTION_TABLE_vii[$74 & 15]($71, $$038); //@line 19320
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 504; //@line 19323
  HEAP8[$AsyncCtx12 + 4 >> 0] = $3; //@line 19325
  HEAP32[$AsyncCtx12 + 8 >> 2] = $0; //@line 19327
  HEAP32[$AsyncCtx12 + 12 >> 2] = $6; //@line 19329
  HEAP32[$AsyncCtx12 + 16 >> 2] = $1; //@line 19331
  HEAP8[$AsyncCtx12 + 20 >> 0] = $57; //@line 19333
  HEAP32[$AsyncCtx12 + 24 >> 2] = $52; //@line 19335
  HEAP32[$AsyncCtx12 + 28 >> 2] = $54; //@line 19337
  HEAP32[$AsyncCtx12 + 32 >> 2] = $55; //@line 19339
  sp = STACKTOP; //@line 19340
  return 0; //@line 19341
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 19343
 do {
  if ($3 << 24 >> 24 == 7) {
   if (!(HEAP8[$0 + 14 >> 0] | 0)) {
    label = 19; //@line 19351
   } else {
    $87 = HEAP32[$6 >> 2] | 0; //@line 19353
    $90 = HEAP32[(HEAP32[$87 >> 2] | 0) + 16 >> 2] | 0; //@line 19356
    $95 = HEAP32[$1 + 8 >> 2] & 65535; //@line 19361
    $98 = (HEAP8[$1 + 18 >> 0] | 0) != 0; //@line 19364
    $AsyncCtx16 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19365
    FUNCTION_TABLE_viiiiiiiiiiiiiii[$90 & 1]($87, 0, 5e4, ($57 & 255) * 1e3 | 0, 0, 83333, 5, $95, 0, 0, 1, 0, 0, 0, $98); //@line 19366
    if (___async) {
     HEAP32[$AsyncCtx16 >> 2] = 505; //@line 19369
     HEAP32[$AsyncCtx16 + 4 >> 2] = $1; //@line 19371
     HEAP32[$AsyncCtx16 + 8 >> 2] = $52; //@line 19373
     HEAP32[$AsyncCtx16 + 12 >> 2] = $54; //@line 19375
     HEAP32[$AsyncCtx16 + 16 >> 2] = $55; //@line 19377
     HEAP32[$AsyncCtx16 + 20 >> 2] = $6; //@line 19379
     sp = STACKTOP; //@line 19380
     return 0; //@line 19381
    } else {
     _emscripten_free_async_context($AsyncCtx16 | 0); //@line 19383
     $$036 = 0; //@line 19384
     break;
    }
   }
  } else {
   label = 19; //@line 19389
  }
 } while (0);
 do {
  if ((label | 0) == 19) {
   $104 = HEAP32[$6 >> 2] | 0; //@line 19394
   $107 = HEAP32[(HEAP32[$104 >> 2] | 0) + 16 >> 2] | 0; //@line 19397
   $110 = HEAPU8[$1 + 2 >> 0] | 0; //@line 19400
   $114 = HEAP32[$1 + 8 >> 2] & 65535; //@line 19404
   $117 = (HEAP8[$1 + 18 >> 0] | 0) != 0; //@line 19407
   $AsyncCtx20 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19408
   FUNCTION_TABLE_viiiiiiiiiiiiiii[$107 & 1]($104, 1, $110, $57 & 255, 1, 0, 8, $114, 0, 0, 0, 0, 0, 1, $117); //@line 19409
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 506; //@line 19412
    HEAP32[$AsyncCtx20 + 4 >> 2] = $1; //@line 19414
    HEAP32[$AsyncCtx20 + 8 >> 2] = $52; //@line 19416
    HEAP32[$AsyncCtx20 + 12 >> 2] = $54; //@line 19418
    HEAP32[$AsyncCtx20 + 16 >> 2] = $55; //@line 19420
    HEAP32[$AsyncCtx20 + 20 >> 2] = $6; //@line 19422
    sp = STACKTOP; //@line 19423
    return 0; //@line 19424
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 19426
    $$036 = 1; //@line 19427
    break;
   }
  }
 } while (0);
 $126 = HEAP32[$6 >> 2] | 0; //@line 19438
 $129 = HEAP32[(HEAP32[$126 >> 2] | 0) + 44 >> 2] | 0; //@line 19441
 $132 = (HEAPU8[((HEAP8[$1 + 17 >> 0] | 0) == 0 ? $52 : $54) + $55 >> 0] | 0) + 13 & 255; //@line 19444
 $AsyncCtx24 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19445
 FUNCTION_TABLE_viii[$129 & 7]($126, $$036, $132); //@line 19446
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 507; //@line 19449
  HEAP32[$AsyncCtx24 + 4 >> 2] = $6; //@line 19451
  sp = STACKTOP; //@line 19452
  return 0; //@line 19453
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 19455
 $134 = HEAP32[$6 >> 2] | 0; //@line 19456
 $137 = HEAP32[(HEAP32[$134 >> 2] | 0) + 76 >> 2] | 0; //@line 19459
 $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 19460
 FUNCTION_TABLE_vi[$137 & 1023]($134); //@line 19461
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 508; //@line 19464
  sp = STACKTOP; //@line 19465
  return 0; //@line 19466
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 19468
 $$0 = 1; //@line 19469
 return $$0 | 0; //@line 19470
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_337($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $70 = 0, $75 = 0, $76 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 25629
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25631
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25633
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25637
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25639
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25641
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25643
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 25645
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 25647
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 25649
 if (!(__ZN7LoRaMac10nwk_joinedEv($2) | 0)) {
  $76 = $10 + 2879 | 0; //@line 25652
  HEAP8[$76 >> 0] = 1; //@line 25653
  return;
 }
 if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($2) | 0) >> 2] | 0) != 1) {
  __ZN7LoRaMac21post_process_mcps_reqEv($2); //@line 25660
  HEAP32[$8 >> 2] = HEAP32[$8 >> 2] | 16; //@line 25663
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 25664
  __ZN12LoRaWANStack26process_status_check_stateEv($10); //@line 25665
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 278; //@line 25668
   $45 = $ReallocAsyncCtx5 + 4 | 0; //@line 25669
   HEAP32[$45 >> 2] = $2; //@line 25670
   $46 = $ReallocAsyncCtx5 + 8 | 0; //@line 25671
   HEAP32[$46 >> 2] = $8; //@line 25672
   $47 = $ReallocAsyncCtx5 + 12 | 0; //@line 25673
   HEAP32[$47 >> 2] = $10; //@line 25674
   $48 = $ReallocAsyncCtx5 + 16 | 0; //@line 25675
   HEAP32[$48 >> 2] = $20; //@line 25676
   $49 = $ReallocAsyncCtx5 + 20 | 0; //@line 25677
   HEAP32[$49 >> 2] = $12; //@line 25678
   $50 = $ReallocAsyncCtx5 + 24 | 0; //@line 25679
   HEAP32[$50 >> 2] = $14; //@line 25680
   $51 = $ReallocAsyncCtx5 + 28 | 0; //@line 25681
   HEAP32[$51 >> 2] = $16; //@line 25682
   $52 = $ReallocAsyncCtx5 + 32 | 0; //@line 25683
   HEAP32[$52 >> 2] = $18; //@line 25684
   sp = STACKTOP; //@line 25685
   return;
  }
  ___async_unwind = 0; //@line 25688
  HEAP32[$ReallocAsyncCtx5 >> 2] = 278; //@line 25689
  $45 = $ReallocAsyncCtx5 + 4 | 0; //@line 25690
  HEAP32[$45 >> 2] = $2; //@line 25691
  $46 = $ReallocAsyncCtx5 + 8 | 0; //@line 25692
  HEAP32[$46 >> 2] = $8; //@line 25693
  $47 = $ReallocAsyncCtx5 + 12 | 0; //@line 25694
  HEAP32[$47 >> 2] = $10; //@line 25695
  $48 = $ReallocAsyncCtx5 + 16 | 0; //@line 25696
  HEAP32[$48 >> 2] = $20; //@line 25697
  $49 = $ReallocAsyncCtx5 + 20 | 0; //@line 25698
  HEAP32[$49 >> 2] = $12; //@line 25699
  $50 = $ReallocAsyncCtx5 + 24 | 0; //@line 25700
  HEAP32[$50 >> 2] = $14; //@line 25701
  $51 = $ReallocAsyncCtx5 + 28 | 0; //@line 25702
  HEAP32[$51 >> 2] = $16; //@line 25703
  $52 = $ReallocAsyncCtx5 + 32 | 0; //@line 25704
  HEAP32[$52 >> 2] = $18; //@line 25705
  sp = STACKTOP; //@line 25706
  return;
 }
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) + 32 >> 0] | 0) {
  HEAP32[$4 >> 2] = HEAPU8[(__ZNK7LoRaMac21get_mcps_confirmationEv($2) | 0) + 11 >> 0]; //@line 25718
  _mbed_tracef(16, 12482, 12647, $4); //@line 25719
  __ZN7LoRaMac21post_process_mcps_reqEv($2); //@line 25720
  HEAP32[$8 >> 2] = HEAP32[$8 >> 2] | 16; //@line 25723
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(36) | 0; //@line 25724
  __ZN12LoRaWANStack26process_status_check_stateEv($10); //@line 25725
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 277; //@line 25728
   $35 = $ReallocAsyncCtx6 + 4 | 0; //@line 25729
   HEAP32[$35 >> 2] = $2; //@line 25730
   $36 = $ReallocAsyncCtx6 + 8 | 0; //@line 25731
   HEAP32[$36 >> 2] = $8; //@line 25732
   $37 = $ReallocAsyncCtx6 + 12 | 0; //@line 25733
   HEAP32[$37 >> 2] = $10; //@line 25734
   $38 = $ReallocAsyncCtx6 + 16 | 0; //@line 25735
   HEAP32[$38 >> 2] = $20; //@line 25736
   $39 = $ReallocAsyncCtx6 + 20 | 0; //@line 25737
   HEAP32[$39 >> 2] = $12; //@line 25738
   $40 = $ReallocAsyncCtx6 + 24 | 0; //@line 25739
   HEAP32[$40 >> 2] = $14; //@line 25740
   $41 = $ReallocAsyncCtx6 + 28 | 0; //@line 25741
   HEAP32[$41 >> 2] = $16; //@line 25742
   $42 = $ReallocAsyncCtx6 + 32 | 0; //@line 25743
   HEAP32[$42 >> 2] = $18; //@line 25744
   sp = STACKTOP; //@line 25745
   return;
  }
  ___async_unwind = 0; //@line 25748
  HEAP32[$ReallocAsyncCtx6 >> 2] = 277; //@line 25749
  $35 = $ReallocAsyncCtx6 + 4 | 0; //@line 25750
  HEAP32[$35 >> 2] = $2; //@line 25751
  $36 = $ReallocAsyncCtx6 + 8 | 0; //@line 25752
  HEAP32[$36 >> 2] = $8; //@line 25753
  $37 = $ReallocAsyncCtx6 + 12 | 0; //@line 25754
  HEAP32[$37 >> 2] = $10; //@line 25755
  $38 = $ReallocAsyncCtx6 + 16 | 0; //@line 25756
  HEAP32[$38 >> 2] = $20; //@line 25757
  $39 = $ReallocAsyncCtx6 + 20 | 0; //@line 25758
  HEAP32[$39 >> 2] = $12; //@line 25759
  $40 = $ReallocAsyncCtx6 + 24 | 0; //@line 25760
  HEAP32[$40 >> 2] = $14; //@line 25761
  $41 = $ReallocAsyncCtx6 + 28 | 0; //@line 25762
  HEAP32[$41 >> 2] = $16; //@line 25763
  $42 = $ReallocAsyncCtx6 + 32 | 0; //@line 25764
  HEAP32[$42 >> 2] = $18; //@line 25765
  sp = STACKTOP; //@line 25766
  return;
 }
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) >> 0] | 0) {
  __ZN7LoRaMac21post_process_mcps_indEv($2); //@line 25773
  HEAP32[$8 >> 2] = HEAP32[$8 >> 2] | 2; //@line 25776
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 25777
  __ZN12LoRaWANStack26process_status_check_stateEv($10); //@line 25778
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 279; //@line 25781
   $58 = $ReallocAsyncCtx4 + 4 | 0; //@line 25782
   HEAP32[$58 >> 2] = $8; //@line 25783
   $59 = $ReallocAsyncCtx4 + 8 | 0; //@line 25784
   HEAP32[$59 >> 2] = $2; //@line 25785
   $60 = $ReallocAsyncCtx4 + 12 | 0; //@line 25786
   HEAP32[$60 >> 2] = $20; //@line 25787
   $61 = $ReallocAsyncCtx4 + 16 | 0; //@line 25788
   HEAP32[$61 >> 2] = $10; //@line 25789
   $62 = $ReallocAsyncCtx4 + 20 | 0; //@line 25790
   HEAP32[$62 >> 2] = $12; //@line 25791
   $63 = $ReallocAsyncCtx4 + 24 | 0; //@line 25792
   HEAP32[$63 >> 2] = $14; //@line 25793
   $64 = $ReallocAsyncCtx4 + 28 | 0; //@line 25794
   HEAP32[$64 >> 2] = $16; //@line 25795
   $65 = $ReallocAsyncCtx4 + 32 | 0; //@line 25796
   HEAP32[$65 >> 2] = $18; //@line 25797
   sp = STACKTOP; //@line 25798
   return;
  }
  ___async_unwind = 0; //@line 25801
  HEAP32[$ReallocAsyncCtx4 >> 2] = 279; //@line 25802
  $58 = $ReallocAsyncCtx4 + 4 | 0; //@line 25803
  HEAP32[$58 >> 2] = $8; //@line 25804
  $59 = $ReallocAsyncCtx4 + 8 | 0; //@line 25805
  HEAP32[$59 >> 2] = $2; //@line 25806
  $60 = $ReallocAsyncCtx4 + 12 | 0; //@line 25807
  HEAP32[$60 >> 2] = $20; //@line 25808
  $61 = $ReallocAsyncCtx4 + 16 | 0; //@line 25809
  HEAP32[$61 >> 2] = $10; //@line 25810
  $62 = $ReallocAsyncCtx4 + 20 | 0; //@line 25811
  HEAP32[$62 >> 2] = $12; //@line 25812
  $63 = $ReallocAsyncCtx4 + 24 | 0; //@line 25813
  HEAP32[$63 >> 2] = $14; //@line 25814
  $64 = $ReallocAsyncCtx4 + 28 | 0; //@line 25815
  HEAP32[$64 >> 2] = $16; //@line 25816
  $65 = $ReallocAsyncCtx4 + 32 | 0; //@line 25817
  HEAP32[$65 >> 2] = $18; //@line 25818
  sp = STACKTOP; //@line 25819
  return;
 }
 if (!(HEAP32[$8 >> 2] & 1)) {
  $70 = (__ZNK7LoRaMac16get_device_classEv($2) | 0) == 2; //@line 25827
  HEAP32[$20 >> 2] = $70 ? 5 : 2; //@line 25829
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($2) | 0) + 4 >> 0] | 0)) {
  $76 = $10 + 2879 | 0; //@line 25836
  HEAP8[$76 >> 0] = 1; //@line 25837
  return;
 }
 _mbed_tracef(16, 12482, 12667, $12); //@line 25840
 __ZN7LoRaMac21post_process_mlme_indEv($2); //@line 25841
 _mbed_tracef(16, 12482, 12691, $16); //@line 25842
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 25843
 __ZN12LoRaWANStack23mlme_indication_handlerEv($10); //@line 25844
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 280; //@line 25847
  $75 = $ReallocAsyncCtx2 + 4 | 0; //@line 25848
  HEAP32[$75 >> 2] = $10; //@line 25849
  sp = STACKTOP; //@line 25850
  return;
 }
 ___async_unwind = 0; //@line 25853
 HEAP32[$ReallocAsyncCtx2 >> 2] = 280; //@line 25854
 $75 = $ReallocAsyncCtx2 + 4 | 0; //@line 25855
 HEAP32[$75 >> 2] = $10; //@line 25856
 sp = STACKTOP; //@line 25857
 return;
}
function _mbed_die() {
 var $0 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx43 = 0, $AsyncCtx47 = 0, $AsyncCtx51 = 0, $AsyncCtx55 = 0, $AsyncCtx59 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6771
 STACKTOP = STACKTOP + 32 | 0; //@line 6772
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 6772
 $0 = sp; //@line 6773
 _gpio_init_out($0, 50); //@line 6774
 while (1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6777
  $AsyncCtx59 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6778
  _wait_ms(150); //@line 6779
  if (___async) {
   label = 3; //@line 6782
   break;
  }
  _emscripten_free_async_context($AsyncCtx59 | 0); //@line 6785
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6787
  $AsyncCtx55 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6788
  _wait_ms(150); //@line 6789
  if (___async) {
   label = 5; //@line 6792
   break;
  }
  _emscripten_free_async_context($AsyncCtx55 | 0); //@line 6795
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6797
  $AsyncCtx51 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6798
  _wait_ms(150); //@line 6799
  if (___async) {
   label = 7; //@line 6802
   break;
  }
  _emscripten_free_async_context($AsyncCtx51 | 0); //@line 6805
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6807
  $AsyncCtx47 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6808
  _wait_ms(150); //@line 6809
  if (___async) {
   label = 9; //@line 6812
   break;
  }
  _emscripten_free_async_context($AsyncCtx47 | 0); //@line 6815
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6817
  $AsyncCtx43 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6818
  _wait_ms(150); //@line 6819
  if (___async) {
   label = 11; //@line 6822
   break;
  }
  _emscripten_free_async_context($AsyncCtx43 | 0); //@line 6825
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6827
  $AsyncCtx39 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6828
  _wait_ms(150); //@line 6829
  if (___async) {
   label = 13; //@line 6832
   break;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 6835
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6837
  $AsyncCtx35 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6838
  _wait_ms(150); //@line 6839
  if (___async) {
   label = 15; //@line 6842
   break;
  }
  _emscripten_free_async_context($AsyncCtx35 | 0); //@line 6845
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6847
  $AsyncCtx31 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6848
  _wait_ms(150); //@line 6849
  if (___async) {
   label = 17; //@line 6852
   break;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 6855
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6857
  $AsyncCtx27 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6858
  _wait_ms(400); //@line 6859
  if (___async) {
   label = 19; //@line 6862
   break;
  }
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 6865
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6867
  $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6868
  _wait_ms(400); //@line 6869
  if (___async) {
   label = 21; //@line 6872
   break;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 6875
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6877
  $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6878
  _wait_ms(400); //@line 6879
  if (___async) {
   label = 23; //@line 6882
   break;
  }
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 6885
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6887
  $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6888
  _wait_ms(400); //@line 6889
  if (___async) {
   label = 25; //@line 6892
   break;
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 6895
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6897
  $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6898
  _wait_ms(400); //@line 6899
  if (___async) {
   label = 27; //@line 6902
   break;
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 6905
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6907
  $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6908
  _wait_ms(400); //@line 6909
  if (___async) {
   label = 29; //@line 6912
   break;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6915
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6917
  $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6918
  _wait_ms(400); //@line 6919
  if (___async) {
   label = 31; //@line 6922
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6925
  _emscripten_asm_const_iii(5, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6927
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6928
  _wait_ms(400); //@line 6929
  if (___async) {
   label = 33; //@line 6932
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6935
 }
 switch (label | 0) {
 case 3:
  {
   HEAP32[$AsyncCtx59 >> 2] = 600; //@line 6939
   HEAP32[$AsyncCtx59 + 4 >> 2] = $0; //@line 6941
   sp = STACKTOP; //@line 6942
   STACKTOP = sp; //@line 6943
   return;
  }
 case 5:
  {
   HEAP32[$AsyncCtx55 >> 2] = 601; //@line 6947
   HEAP32[$AsyncCtx55 + 4 >> 2] = $0; //@line 6949
   sp = STACKTOP; //@line 6950
   STACKTOP = sp; //@line 6951
   return;
  }
 case 7:
  {
   HEAP32[$AsyncCtx51 >> 2] = 602; //@line 6955
   HEAP32[$AsyncCtx51 + 4 >> 2] = $0; //@line 6957
   sp = STACKTOP; //@line 6958
   STACKTOP = sp; //@line 6959
   return;
  }
 case 9:
  {
   HEAP32[$AsyncCtx47 >> 2] = 603; //@line 6963
   HEAP32[$AsyncCtx47 + 4 >> 2] = $0; //@line 6965
   sp = STACKTOP; //@line 6966
   STACKTOP = sp; //@line 6967
   return;
  }
 case 11:
  {
   HEAP32[$AsyncCtx43 >> 2] = 604; //@line 6971
   HEAP32[$AsyncCtx43 + 4 >> 2] = $0; //@line 6973
   sp = STACKTOP; //@line 6974
   STACKTOP = sp; //@line 6975
   return;
  }
 case 13:
  {
   HEAP32[$AsyncCtx39 >> 2] = 605; //@line 6979
   HEAP32[$AsyncCtx39 + 4 >> 2] = $0; //@line 6981
   sp = STACKTOP; //@line 6982
   STACKTOP = sp; //@line 6983
   return;
  }
 case 15:
  {
   HEAP32[$AsyncCtx35 >> 2] = 606; //@line 6987
   HEAP32[$AsyncCtx35 + 4 >> 2] = $0; //@line 6989
   sp = STACKTOP; //@line 6990
   STACKTOP = sp; //@line 6991
   return;
  }
 case 17:
  {
   HEAP32[$AsyncCtx31 >> 2] = 607; //@line 6995
   HEAP32[$AsyncCtx31 + 4 >> 2] = $0; //@line 6997
   sp = STACKTOP; //@line 6998
   STACKTOP = sp; //@line 6999
   return;
  }
 case 19:
  {
   HEAP32[$AsyncCtx27 >> 2] = 608; //@line 7003
   HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 7005
   sp = STACKTOP; //@line 7006
   STACKTOP = sp; //@line 7007
   return;
  }
 case 21:
  {
   HEAP32[$AsyncCtx23 >> 2] = 609; //@line 7011
   HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 7013
   sp = STACKTOP; //@line 7014
   STACKTOP = sp; //@line 7015
   return;
  }
 case 23:
  {
   HEAP32[$AsyncCtx19 >> 2] = 610; //@line 7019
   HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 7021
   sp = STACKTOP; //@line 7022
   STACKTOP = sp; //@line 7023
   return;
  }
 case 25:
  {
   HEAP32[$AsyncCtx15 >> 2] = 611; //@line 7027
   HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 7029
   sp = STACKTOP; //@line 7030
   STACKTOP = sp; //@line 7031
   return;
  }
 case 27:
  {
   HEAP32[$AsyncCtx11 >> 2] = 612; //@line 7035
   HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 7037
   sp = STACKTOP; //@line 7038
   STACKTOP = sp; //@line 7039
   return;
  }
 case 29:
  {
   HEAP32[$AsyncCtx7 >> 2] = 613; //@line 7043
   HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 7045
   sp = STACKTOP; //@line 7046
   STACKTOP = sp; //@line 7047
   return;
  }
 case 31:
  {
   HEAP32[$AsyncCtx3 >> 2] = 614; //@line 7051
   HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 7053
   sp = STACKTOP; //@line 7054
   STACKTOP = sp; //@line 7055
   return;
  }
 case 33:
  {
   HEAP32[$AsyncCtx >> 2] = 615; //@line 7059
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7061
   sp = STACKTOP; //@line 7062
   STACKTOP = sp; //@line 7063
   return;
  }
 }
}
function _schedule_interrupt__async_cb($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $102 = 0, $105 = 0, $107 = 0, $110 = 0, $111 = 0, $113 = 0, $116 = 0, $12 = 0, $124 = 0, $125 = 0, $126 = 0, $128 = 0, $130 = 0, $135 = 0, $142 = 0, $144 = 0, $146 = 0, $149 = 0, $151 = 0, $158 = 0, $159 = 0, $162 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $177 = 0, $180 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $60 = 0, $61 = 0, $67 = 0, $68 = 0, $69 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $86 = 0, $87 = 0, $9 = 0, $93 = 0, $94 = 0, $95 = 0, $97 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 814
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 816
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 818
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 822
 $8 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 823
 $9 = $8 + 32 | 0; //@line 824
 if (($AsyncRetVal | 0) != (HEAP32[$9 >> 2] | 0)) {
  $12 = $2 + 32 | 0; //@line 828
  $17 = $AsyncRetVal - (HEAP32[$12 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 833
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 834
  $19 = HEAP32[$2 + 8 >> 2] | 0; //@line 836
  L4 : do {
   if (($19 | 0) < 1e6) {
    switch ($19 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 6; //@line 845
      break L4;
     }
    }
    $20 = ___muldi3($17 | 0, 0, 1e6, 0) | 0; //@line 849
    $22 = _bitshift64Lshr($20 | 0, tempRet0 | 0, 15) | 0; //@line 851
    $23 = tempRet0; //@line 852
    $26 = $2 + 40 | 0; //@line 855
    $27 = $26; //@line 856
    $33 = _i64Add(HEAP32[$27 >> 2] | 0, HEAP32[$27 + 4 >> 2] | 0, $17 * 1e6 & 32704 | 0, 0) | 0; //@line 862
    $34 = tempRet0; //@line 863
    $35 = $26; //@line 864
    HEAP32[$35 >> 2] = $33; //@line 866
    HEAP32[$35 + 4 >> 2] = $34; //@line 869
    if ($34 >>> 0 < 0 | ($34 | 0) == 0 & $33 >>> 0 < 32768) {
     $93 = $22; //@line 876
     $94 = $23; //@line 876
    } else {
     $44 = _i64Add($22 | 0, $23 | 0, 1, 0) | 0; //@line 878
     $45 = tempRet0; //@line 879
     $46 = _i64Add($33 | 0, $34 | 0, -32768, -1) | 0; //@line 880
     $48 = $26; //@line 882
     HEAP32[$48 >> 2] = $46; //@line 884
     HEAP32[$48 + 4 >> 2] = tempRet0; //@line 887
     $93 = $44; //@line 888
     $94 = $45; //@line 888
    }
   } else {
    switch ($19 | 0) {
    case 1e6:
     {
      $93 = $17; //@line 893
      $94 = 0; //@line 893
      break;
     }
    default:
     {
      label = 6; //@line 897
     }
    }
   }
  } while (0);
  if ((label | 0) == 6) {
   $52 = ___muldi3($17 | 0, 0, 1e6, 0) | 0; //@line 903
   $53 = tempRet0; //@line 904
   $54 = ___udivdi3($52 | 0, $53 | 0, $19 | 0, 0) | 0; //@line 905
   $55 = tempRet0; //@line 906
   $56 = ___muldi3($54 | 0, $55 | 0, $19 | 0, 0) | 0; //@line 907
   $58 = _i64Subtract($52 | 0, $53 | 0, $56 | 0, tempRet0 | 0) | 0; //@line 909
   $60 = $2 + 40 | 0; //@line 911
   $61 = $60; //@line 912
   $67 = _i64Add($58 | 0, tempRet0 | 0, HEAP32[$61 >> 2] | 0, HEAP32[$61 + 4 >> 2] | 0) | 0; //@line 918
   $68 = tempRet0; //@line 919
   $69 = $60; //@line 920
   HEAP32[$69 >> 2] = $67; //@line 922
   HEAP32[$69 + 4 >> 2] = $68; //@line 925
   if ($68 >>> 0 < 0 | ($68 | 0) == 0 & $67 >>> 0 < $19 >>> 0) {
    $93 = $54; //@line 932
    $94 = $55; //@line 932
   } else {
    $78 = _i64Add($54 | 0, $55 | 0, 1, 0) | 0; //@line 934
    $79 = tempRet0; //@line 935
    $80 = _i64Subtract($67 | 0, $68 | 0, $19 | 0, 0) | 0; //@line 936
    $82 = $60; //@line 938
    HEAP32[$82 >> 2] = $80; //@line 940
    HEAP32[$82 + 4 >> 2] = tempRet0; //@line 943
    $93 = $78; //@line 944
    $94 = $79; //@line 944
   }
  }
  $86 = $2 + 48 | 0; //@line 947
  $87 = $86; //@line 948
  $95 = _i64Add(HEAP32[$87 >> 2] | 0, HEAP32[$87 + 4 >> 2] | 0, $93 | 0, $94 | 0) | 0; //@line 954
  $97 = $86; //@line 956
  HEAP32[$97 >> 2] = $95; //@line 958
  HEAP32[$97 + 4 >> 2] = tempRet0; //@line 961
 }
 $102 = HEAP32[$8 + 4 >> 2] | 0; //@line 964
 if (!$102) {
  $177 = (HEAP32[$2 + 16 >> 2] | 0) + (HEAP32[$2 + 32 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 974
  $180 = HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] | 0; //@line 977
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 978
  FUNCTION_TABLE_vi[$180 & 1023]($177); //@line 979
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 595; //@line 982
   sp = STACKTOP; //@line 983
   return;
  }
  ___async_unwind = 0; //@line 986
  HEAP32[$ReallocAsyncCtx7 >> 2] = 595; //@line 987
  sp = STACKTOP; //@line 988
  return;
 }
 $105 = $8 + 48 | 0; //@line 992
 $107 = HEAP32[$105 >> 2] | 0; //@line 994
 $110 = HEAP32[$105 + 4 >> 2] | 0; //@line 997
 $111 = $102; //@line 998
 $113 = HEAP32[$111 >> 2] | 0; //@line 1000
 $116 = HEAP32[$111 + 4 >> 2] | 0; //@line 1003
 if (!($116 >>> 0 > $110 >>> 0 | ($116 | 0) == ($110 | 0) & $113 >>> 0 > $107 >>> 0)) {
  $124 = HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] | 0; //@line 1012
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 1013
  FUNCTION_TABLE_v[$124 & 7](); //@line 1014
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 590; //@line 1017
   sp = STACKTOP; //@line 1018
   return;
  }
  ___async_unwind = 0; //@line 1021
  HEAP32[$ReallocAsyncCtx2 >> 2] = 590; //@line 1022
  sp = STACKTOP; //@line 1023
  return;
 }
 $125 = _i64Subtract($113 | 0, $116 | 0, $107 | 0, $110 | 0) | 0; //@line 1026
 $126 = tempRet0; //@line 1027
 $128 = HEAP32[$8 + 16 >> 2] | 0; //@line 1029
 $130 = $8 + 24 | 0; //@line 1031
 $135 = HEAP32[$130 + 4 >> 2] | 0; //@line 1036
 L28 : do {
  if ($126 >>> 0 > $135 >>> 0 | (($126 | 0) == ($135 | 0) ? $125 >>> 0 > (HEAP32[$130 >> 2] | 0) >>> 0 : 0)) {
   $$0$i = $128; //@line 1044
  } else {
   $142 = HEAP32[$8 + 8 >> 2] | 0; //@line 1047
   L30 : do {
    if (($142 | 0) < 1e6) {
     switch ($142 | 0) {
     case 32768:
      {
       break;
      }
     default:
      {
       break L30;
      }
     }
     $144 = _bitshift64Shl($125 | 0, $126 | 0, 15) | 0; //@line 1059
     $146 = ___udivdi3($144 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 1061
     $$0$i = $128 >>> 0 < $146 >>> 0 ? $128 : $146; //@line 1065
     break L28;
    } else {
     switch ($142 | 0) {
     case 1e6:
      {
       break;
      }
     default:
      {
       break L30;
      }
     }
     $$0$i = $128 >>> 0 < $125 >>> 0 ? $128 : $125; //@line 1078
     break L28;
    }
   } while (0);
   $149 = ___muldi3($125 | 0, $126 | 0, $142 | 0, 0) | 0; //@line 1082
   $151 = ___udivdi3($149 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 1084
   $$0$i = $128 >>> 0 < $151 >>> 0 ? $128 : $151; //@line 1088
  }
 } while (0);
 $158 = (HEAP32[$9 >> 2] | 0) + $$0$i & HEAP32[$8 + 12 >> 2]; //@line 1095
 $159 = $2 + 32 | 0; //@line 1096
 $162 = HEAP32[$4 >> 2] | 0; //@line 1099
 if (($158 | 0) == (HEAP32[$159 >> 2] | 0)) {
  $164 = HEAP32[$162 + 20 >> 2] | 0; //@line 1102
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 1103
  FUNCTION_TABLE_v[$164 & 7](); //@line 1104
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 591; //@line 1107
   sp = STACKTOP; //@line 1108
   return;
  }
  ___async_unwind = 0; //@line 1111
  HEAP32[$ReallocAsyncCtx3 >> 2] = 591; //@line 1112
  sp = STACKTOP; //@line 1113
  return;
 } else {
  $166 = HEAP32[$162 + 16 >> 2] | 0; //@line 1117
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 1118
  FUNCTION_TABLE_vi[$166 & 1023]($158); //@line 1119
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 592; //@line 1122
   $167 = $ReallocAsyncCtx4 + 4 | 0; //@line 1123
   HEAP32[$167 >> 2] = $4; //@line 1124
   $168 = $ReallocAsyncCtx4 + 8 | 0; //@line 1125
   HEAP32[$168 >> 2] = $159; //@line 1126
   $169 = $ReallocAsyncCtx4 + 12 | 0; //@line 1127
   HEAP32[$169 >> 2] = $158; //@line 1128
   sp = STACKTOP; //@line 1129
   return;
  }
  ___async_unwind = 0; //@line 1132
  HEAP32[$ReallocAsyncCtx4 >> 2] = 592; //@line 1133
  $167 = $ReallocAsyncCtx4 + 4 | 0; //@line 1134
  HEAP32[$167 >> 2] = $4; //@line 1135
  $168 = $ReallocAsyncCtx4 + 8 | 0; //@line 1136
  HEAP32[$168 >> 2] = $159; //@line 1137
  $169 = $ReallocAsyncCtx4 + 12 | 0; //@line 1138
  HEAP32[$169 >> 2] = $158; //@line 1139
  sp = STACKTOP; //@line 1140
  return;
 }
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_367($0) {
 $0 = $0 | 0;
 var $$pre124 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 28496
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28498
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28500
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28502
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28504
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28506
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28508
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28510
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28512
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28514
 $$pre124 = HEAP32[$10 >> 2] | 0; //@line 28515
 if ($$pre124 | 0) {
  $21 = HEAP32[$$pre124 + 4 >> 2] | 0; //@line 28519
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 28520
  FUNCTION_TABLE_vii[$21 & 15]($12, $2); //@line 28521
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 174; //@line 28524
   $22 = $ReallocAsyncCtx8 + 4 | 0; //@line 28525
   HEAP32[$22 >> 2] = $2; //@line 28526
   $23 = $ReallocAsyncCtx8 + 8 | 0; //@line 28527
   HEAP32[$23 >> 2] = $4; //@line 28528
   $24 = $ReallocAsyncCtx8 + 12 | 0; //@line 28529
   HEAP32[$24 >> 2] = $6; //@line 28530
   $25 = $ReallocAsyncCtx8 + 16 | 0; //@line 28531
   HEAP32[$25 >> 2] = $10; //@line 28532
   $26 = $ReallocAsyncCtx8 + 20 | 0; //@line 28533
   HEAP32[$26 >> 2] = $8; //@line 28534
   $27 = $ReallocAsyncCtx8 + 24 | 0; //@line 28535
   HEAP32[$27 >> 2] = $14; //@line 28536
   $28 = $ReallocAsyncCtx8 + 28 | 0; //@line 28537
   HEAP32[$28 >> 2] = $16; //@line 28538
   $29 = $ReallocAsyncCtx8 + 32 | 0; //@line 28539
   HEAP32[$29 >> 2] = $18; //@line 28540
   sp = STACKTOP; //@line 28541
   return;
  }
  ___async_unwind = 0; //@line 28544
  HEAP32[$ReallocAsyncCtx8 >> 2] = 174; //@line 28545
  $22 = $ReallocAsyncCtx8 + 4 | 0; //@line 28546
  HEAP32[$22 >> 2] = $2; //@line 28547
  $23 = $ReallocAsyncCtx8 + 8 | 0; //@line 28548
  HEAP32[$23 >> 2] = $4; //@line 28549
  $24 = $ReallocAsyncCtx8 + 12 | 0; //@line 28550
  HEAP32[$24 >> 2] = $6; //@line 28551
  $25 = $ReallocAsyncCtx8 + 16 | 0; //@line 28552
  HEAP32[$25 >> 2] = $10; //@line 28553
  $26 = $ReallocAsyncCtx8 + 20 | 0; //@line 28554
  HEAP32[$26 >> 2] = $8; //@line 28555
  $27 = $ReallocAsyncCtx8 + 24 | 0; //@line 28556
  HEAP32[$27 >> 2] = $14; //@line 28557
  $28 = $ReallocAsyncCtx8 + 28 | 0; //@line 28558
  HEAP32[$28 >> 2] = $16; //@line 28559
  $29 = $ReallocAsyncCtx8 + 32 | 0; //@line 28560
  HEAP32[$29 >> 2] = $18; //@line 28561
  sp = STACKTOP; //@line 28562
  return;
 }
 HEAP32[$8 >> 2] = 0; //@line 28565
 $30 = $4 + 12 | 0; //@line 28566
 HEAP32[$4 >> 2] = 176; //@line 28567
 HEAP32[$4 + 4 >> 2] = 0; //@line 28569
 HEAP32[$4 + 8 >> 2] = $6; //@line 28571
 HEAP32[$30 >> 2] = 808; //@line 28572
 $31 = $6 + 2384 | 0; //@line 28573
 if (($31 | 0) == ($4 | 0)) {
  $56 = HEAP32[204] | 0; //@line 28577
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(24) | 0; //@line 28578
  FUNCTION_TABLE_vi[$56 & 1023]($4); //@line 28579
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 179; //@line 28582
   $57 = $ReallocAsyncCtx12 + 4 | 0; //@line 28583
   HEAP32[$57 >> 2] = $14; //@line 28584
   $58 = $ReallocAsyncCtx12 + 8 | 0; //@line 28585
   HEAP32[$58 >> 2] = $16; //@line 28586
   $59 = $ReallocAsyncCtx12 + 12 | 0; //@line 28587
   HEAP32[$59 >> 2] = $6; //@line 28588
   $60 = $ReallocAsyncCtx12 + 16 | 0; //@line 28589
   HEAP32[$60 >> 2] = $4; //@line 28590
   $61 = $ReallocAsyncCtx12 + 20 | 0; //@line 28591
   HEAP32[$61 >> 2] = $18; //@line 28592
   sp = STACKTOP; //@line 28593
   return;
  }
  ___async_unwind = 0; //@line 28596
  HEAP32[$ReallocAsyncCtx12 >> 2] = 179; //@line 28597
  $57 = $ReallocAsyncCtx12 + 4 | 0; //@line 28598
  HEAP32[$57 >> 2] = $14; //@line 28599
  $58 = $ReallocAsyncCtx12 + 8 | 0; //@line 28600
  HEAP32[$58 >> 2] = $16; //@line 28601
  $59 = $ReallocAsyncCtx12 + 12 | 0; //@line 28602
  HEAP32[$59 >> 2] = $6; //@line 28603
  $60 = $ReallocAsyncCtx12 + 16 | 0; //@line 28604
  HEAP32[$60 >> 2] = $4; //@line 28605
  $61 = $ReallocAsyncCtx12 + 20 | 0; //@line 28606
  HEAP32[$61 >> 2] = $18; //@line 28607
  sp = STACKTOP; //@line 28608
  return;
 }
 $33 = $6 + 2396 | 0; //@line 28611
 $34 = HEAP32[$33 >> 2] | 0; //@line 28612
 if (!$34) {
  $47 = HEAP32[203] | 0; //@line 28616
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(32) | 0; //@line 28617
  FUNCTION_TABLE_vii[$47 & 15]($31, $4); //@line 28618
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 178; //@line 28621
   $48 = $ReallocAsyncCtx11 + 4 | 0; //@line 28622
   HEAP32[$48 >> 2] = $14; //@line 28623
   $49 = $ReallocAsyncCtx11 + 8 | 0; //@line 28624
   HEAP32[$49 >> 2] = $16; //@line 28625
   $50 = $ReallocAsyncCtx11 + 12 | 0; //@line 28626
   HEAP32[$50 >> 2] = $6; //@line 28627
   $51 = $ReallocAsyncCtx11 + 16 | 0; //@line 28628
   HEAP32[$51 >> 2] = $30; //@line 28629
   $52 = $ReallocAsyncCtx11 + 20 | 0; //@line 28630
   HEAP32[$52 >> 2] = $33; //@line 28631
   $53 = $ReallocAsyncCtx11 + 24 | 0; //@line 28632
   HEAP32[$53 >> 2] = $4; //@line 28633
   $54 = $ReallocAsyncCtx11 + 28 | 0; //@line 28634
   HEAP32[$54 >> 2] = $18; //@line 28635
   sp = STACKTOP; //@line 28636
   return;
  }
  ___async_unwind = 0; //@line 28639
  HEAP32[$ReallocAsyncCtx11 >> 2] = 178; //@line 28640
  $48 = $ReallocAsyncCtx11 + 4 | 0; //@line 28641
  HEAP32[$48 >> 2] = $14; //@line 28642
  $49 = $ReallocAsyncCtx11 + 8 | 0; //@line 28643
  HEAP32[$49 >> 2] = $16; //@line 28644
  $50 = $ReallocAsyncCtx11 + 12 | 0; //@line 28645
  HEAP32[$50 >> 2] = $6; //@line 28646
  $51 = $ReallocAsyncCtx11 + 16 | 0; //@line 28647
  HEAP32[$51 >> 2] = $30; //@line 28648
  $52 = $ReallocAsyncCtx11 + 20 | 0; //@line 28649
  HEAP32[$52 >> 2] = $33; //@line 28650
  $53 = $ReallocAsyncCtx11 + 24 | 0; //@line 28651
  HEAP32[$53 >> 2] = $4; //@line 28652
  $54 = $ReallocAsyncCtx11 + 28 | 0; //@line 28653
  HEAP32[$54 >> 2] = $18; //@line 28654
  sp = STACKTOP; //@line 28655
  return;
 } else {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 28659
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(36) | 0; //@line 28660
  FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 28661
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 177; //@line 28664
   $38 = $ReallocAsyncCtx10 + 4 | 0; //@line 28665
   HEAP32[$38 >> 2] = $14; //@line 28666
   $39 = $ReallocAsyncCtx10 + 8 | 0; //@line 28667
   HEAP32[$39 >> 2] = $16; //@line 28668
   $40 = $ReallocAsyncCtx10 + 12 | 0; //@line 28669
   HEAP32[$40 >> 2] = $30; //@line 28670
   $41 = $ReallocAsyncCtx10 + 16 | 0; //@line 28671
   HEAP32[$41 >> 2] = $6; //@line 28672
   $42 = $ReallocAsyncCtx10 + 20 | 0; //@line 28673
   HEAP32[$42 >> 2] = $33; //@line 28674
   $43 = $ReallocAsyncCtx10 + 24 | 0; //@line 28675
   HEAP32[$43 >> 2] = $4; //@line 28676
   $44 = $ReallocAsyncCtx10 + 28 | 0; //@line 28677
   HEAP32[$44 >> 2] = $18; //@line 28678
   $45 = $ReallocAsyncCtx10 + 32 | 0; //@line 28679
   HEAP32[$45 >> 2] = $31; //@line 28680
   sp = STACKTOP; //@line 28681
   return;
  }
  ___async_unwind = 0; //@line 28684
  HEAP32[$ReallocAsyncCtx10 >> 2] = 177; //@line 28685
  $38 = $ReallocAsyncCtx10 + 4 | 0; //@line 28686
  HEAP32[$38 >> 2] = $14; //@line 28687
  $39 = $ReallocAsyncCtx10 + 8 | 0; //@line 28688
  HEAP32[$39 >> 2] = $16; //@line 28689
  $40 = $ReallocAsyncCtx10 + 12 | 0; //@line 28690
  HEAP32[$40 >> 2] = $30; //@line 28691
  $41 = $ReallocAsyncCtx10 + 16 | 0; //@line 28692
  HEAP32[$41 >> 2] = $6; //@line 28693
  $42 = $ReallocAsyncCtx10 + 20 | 0; //@line 28694
  HEAP32[$42 >> 2] = $33; //@line 28695
  $43 = $ReallocAsyncCtx10 + 24 | 0; //@line 28696
  HEAP32[$43 >> 2] = $4; //@line 28697
  $44 = $ReallocAsyncCtx10 + 28 | 0; //@line 28698
  HEAP32[$44 >> 2] = $18; //@line 28699
  $45 = $ReallocAsyncCtx10 + 32 | 0; //@line 28700
  HEAP32[$45 >> 2] = $31; //@line 28701
  sp = STACKTOP; //@line 28702
  return;
 }
}
function __ZN7LoRaMac11schedule_txEv($0) {
 $0 = $0 | 0;
 var $$2 = 0, $$pre$phi11Z2D = 0, $$pre$phiZ2D = 0, $$sink = 0, $1 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $133 = 0, $138 = 0, $14 = 0, $143 = 0, $2 = 0, $20 = 0, $22 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $37 = 0, $38 = 0, $39 = 0, $42 = 0, $48 = 0, $53 = 0, $55 = 0, $6 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $8 = 0, $84 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx6 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 12222
 STACKTOP = STACKTOP + 48 | 0; //@line 12223
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 12223
 $vararg_buffer1 = sp + 8 | 0; //@line 12224
 $vararg_buffer = sp; //@line 12225
 $1 = sp + 40 | 0; //@line 12226
 $2 = sp + 28 | 0; //@line 12227
 $3 = sp + 24 | 0; //@line 12228
 HEAP32[$3 >> 2] = 0; //@line 12229
 switch (HEAP8[$0 + 1932 >> 0] | 0) {
 case 0:
  {
   $6 = $0 + 1784 | 0; //@line 12234
   HEAP32[$6 >> 2] = 0; //@line 12235
   $$pre$phi11Z2D = $6; //@line 12236
   break;
  }
 case -1:
  {
   $$2 = -1011; //@line 12240
   STACKTOP = sp; //@line 12241
   return $$2 | 0; //@line 12241
  }
 default:
  {
   $$pre$phi11Z2D = $0 + 1784 | 0; //@line 12246
  }
 }
 $8 = HEAP8[$0 + 1183 >> 0] | 0; //@line 12250
 $11 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj($0, HEAP32[$0 + 1788 >> 2] | 0) | 0; //@line 12253
 $12 = $0 + 1179 | 0; //@line 12254
 HEAP8[$12 >> 0] = 1; //@line 12255
 $13 = $0 + 4 | 0; //@line 12256
 $14 = $0 + 2360 | 0; //@line 12257
 $20 = $0 + 1792 | 0; //@line 12263
 __ZN7LoRaPHY17calculate_backoffEbbbhjj($13, (HEAP8[$14 >> 0] | 0) != 0, (HEAP8[$0 + 1180 >> 0] | 0) != 0, 1, $8, $11, HEAP32[$20 >> 2] | 0); //@line 12265
 $22 = HEAP32[$20 >> 2] | 0; //@line 12266
 $27 = (Math_imul($22, HEAPU16[$0 + 1934 >> 1] | 0) | 0) - $22 | 0; //@line 12271
 HEAP32[$$pre$phi11Z2D >> 2] = $27; //@line 12272
 HEAP32[$2 >> 2] = $27; //@line 12273
 $28 = $0 + 1877 | 0; //@line 12274
 $30 = $2 + 8 | 0; //@line 12276
 HEAP8[$30 >> 0] = HEAP8[$28 >> 0] | 0; //@line 12277
 HEAP8[$12 >> 0] = 1; //@line 12278
 HEAP8[$2 + 10 >> 0] = 1; //@line 12280
 HEAP8[$2 + 9 >> 0] = HEAP8[$14 >> 0] | 0; //@line 12283
 HEAP32[$2 + 4 >> 2] = HEAP32[$0 + 1780 >> 2]; //@line 12287
 $37 = $0 + 1182 | 0; //@line 12288
 $38 = __ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_($13, $2, $37, $3, $$pre$phi11Z2D) | 0; //@line 12289
 switch ($38 | 0) {
 case -1020:
  {
   $39 = HEAP32[$3 >> 2] | 0; //@line 12292
   if (!$39) {
    $$2 = 0; //@line 12295
    STACKTOP = sp; //@line 12296
    return $$2 | 0; //@line 12296
   }
   HEAP32[$vararg_buffer >> 2] = $39; //@line 12298
   _mbed_tracef(16, 13239, 13269, $vararg_buffer); //@line 12299
   $42 = HEAP32[$3 >> 2] | 0; //@line 12301
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 12302
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $0 + 1796 | 0, $42); //@line 12303
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 381; //@line 12306
    HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 12308
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 12310
    sp = STACKTOP; //@line 12311
    STACKTOP = sp; //@line 12312
    return 0; //@line 12312
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 12314
   $$2 = 0; //@line 12315
   STACKTOP = sp; //@line 12316
   return $$2 | 0; //@line 12316
  }
 case -1022:
 case -1021:
  {
   $$2 = $38; //@line 12320
   STACKTOP = sp; //@line 12321
   return $$2 | 0; //@line 12321
  }
 default:
  {
   $48 = HEAP8[$30 >> 0] | 0; //@line 12328
   HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$37 >> 0]; //@line 12329
   HEAP32[$vararg_buffer1 + 4 >> 2] = $48; //@line 12331
   _mbed_tracef(16, 13239, 13297, $vararg_buffer1); //@line 12332
   $53 = $0 + 1884 | 0; //@line 12337
   $55 = $0 + 1880 | 0; //@line 12339
   __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t($13, __ZN7LoRaPHY15apply_DR_offsetEaa($13, HEAP8[$28 >> 0] | 0, HEAP8[$0 + 1909 >> 0] | 0) | 0, HEAP8[$53 >> 0] | 0, HEAP32[$55 >> 2] | 0, $0 + 1940 | 0); //@line 12342
   __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t($13, HEAP8[$0 + 1916 >> 0] | 0, HEAP8[$53 >> 0] | 0, HEAP32[$55 >> 2] | 0, $0 + 1964 | 0); //@line 12348
   do {
    if (!(HEAP8[$14 >> 0] | 0)) {
     HEAP32[$0 + 1772 >> 2] = (HEAP32[$0 + 1952 >> 2] | 0) + (HEAP32[$0 + 1900 >> 2] | 0); //@line 12359
     $$pre$phiZ2D = $0 + 1440 | 0; //@line 12362
     $$sink = $0 + 1904 | 0; //@line 12362
    } else {
     $72 = $0 + 1440 | 0; //@line 12364
     $73 = HEAP16[$72 >> 1] | 0; //@line 12365
     $74 = HEAP8[$28 >> 0] | 0; //@line 12366
     $76 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($0 + 476 | 0) | 0; //@line 12368
     $84 = ($76 & 255) + ($73 & 65535) & 65535; //@line 12376
     if ($84 >>> 0 < 256 & $84 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb($13, $74, (HEAP8[$0 + 1173 >> 0] | 0) != 0) | 0) & 255) >>> 0) {
      HEAP32[$0 + 1772 >> 2] = (HEAP32[$0 + 1952 >> 2] | 0) + (HEAP32[$0 + 1892 >> 2] | 0); //@line 12388
      $$pre$phiZ2D = $72; //@line 12390
      $$sink = $0 + 1896 | 0; //@line 12390
      break;
     } else {
      $$2 = -1010; //@line 12393
      STACKTOP = sp; //@line 12394
      return $$2 | 0; //@line 12394
     }
    }
   } while (0);
   HEAP32[$0 + 1776 >> 2] = (HEAP32[$0 + 1976 >> 2] | 0) + (HEAP32[$$sink >> 2] | 0); //@line 12403
   $100 = HEAP8[$37 >> 0] | 0; //@line 12404
   HEAP8[$1 >> 0] = 0; //@line 12405
   HEAP8[$vararg_buffer1 >> 0] = $100; //@line 12406
   HEAP8[$vararg_buffer1 + 1 >> 0] = HEAP8[$28 >> 0] | 0; //@line 12409
   HEAP8[$vararg_buffer1 + 2 >> 0] = HEAP8[$0 + 1876 >> 0] | 0; //@line 12413
   HEAP32[$vararg_buffer1 + 4 >> 2] = HEAP32[$0 + 1924 >> 2]; //@line 12417
   HEAP32[$vararg_buffer1 + 8 >> 2] = HEAP32[$0 + 1928 >> 2]; //@line 12421
   HEAP16[$vararg_buffer1 + 12 >> 1] = HEAP16[$$pre$phiZ2D >> 1] | 0; //@line 12424
   $AsyncCtx10 = _emscripten_alloc_async_context(48, sp) | 0; //@line 12425
   __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj($13, $vararg_buffer1, $1, $20) | 0; //@line 12426
   if (___async) {
    HEAP32[$AsyncCtx10 >> 2] = 382; //@line 12429
    HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 12431
    HEAP32[$AsyncCtx10 + 8 >> 2] = $28; //@line 12433
    HEAP32[$AsyncCtx10 + 12 >> 2] = $1; //@line 12435
    HEAP8[$AsyncCtx10 + 16 >> 0] = $100; //@line 12437
    HEAP32[$AsyncCtx10 + 20 >> 2] = $20; //@line 12439
    HEAP32[$AsyncCtx10 + 24 >> 2] = $14; //@line 12441
    HEAP32[$AsyncCtx10 + 28 >> 2] = $$pre$phiZ2D; //@line 12443
    HEAP32[$AsyncCtx10 + 32 >> 2] = $13; //@line 12445
    HEAP32[$AsyncCtx10 + 36 >> 2] = $vararg_buffer1; //@line 12447
    HEAP32[$AsyncCtx10 + 40 >> 2] = $3; //@line 12449
    HEAP32[$AsyncCtx10 + 44 >> 2] = $2; //@line 12451
    sp = STACKTOP; //@line 12452
    STACKTOP = sp; //@line 12453
    return 0; //@line 12453
   }
   _emscripten_free_async_context($AsyncCtx10 | 0); //@line 12455
   HEAP32[$0 + 2076 >> 2] = 1; //@line 12457
   HEAP32[$0 + 2040 >> 2] = 1; //@line 12459
   HEAP8[$0 + 2044 >> 0] = HEAP8[$28 >> 0] | 0; //@line 12462
   HEAP8[$0 + 2045 >> 0] = HEAP8[$1 >> 0] | 0; //@line 12465
   HEAP32[$0 + 2056 >> 2] = $100 & 255; //@line 12468
   $133 = HEAP32[$20 >> 2] | 0; //@line 12469
   HEAP32[$0 + 2048 >> 2] = $133; //@line 12471
   HEAP32[$0 + 2080 >> 2] = $133; //@line 12473
   if (!(HEAP8[$14 >> 0] | 0)) {
    $138 = $0 + 1701 | 0; //@line 12477
    HEAP8[$138 >> 0] = (HEAP8[$138 >> 0] | 0) + 1 << 24 >> 24; //@line 12480
   }
   $143 = HEAP16[$$pre$phiZ2D >> 1] & 255; //@line 12484
   $AsyncCtx6 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12485
   __ZN7LoRaPHY11handle_sendEPhh($13, $0 + 1185 | 0, $143); //@line 12486
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 383; //@line 12489
    HEAP32[$AsyncCtx6 + 4 >> 2] = $1; //@line 12491
    HEAP32[$AsyncCtx6 + 8 >> 2] = $vararg_buffer1; //@line 12493
    HEAP32[$AsyncCtx6 + 12 >> 2] = $3; //@line 12495
    HEAP32[$AsyncCtx6 + 16 >> 2] = $2; //@line 12497
    sp = STACKTOP; //@line 12498
    STACKTOP = sp; //@line 12499
    return 0; //@line 12499
   }
   _emscripten_free_async_context($AsyncCtx6 | 0); //@line 12501
   $$2 = 0; //@line 12502
   STACKTOP = sp; //@line 12503
   return $$2 | 0; //@line 12503
  }
 }
 return 0; //@line 12506
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_166($0) {
 $0 = $0 | 0;
 var $$058 = 0, $$062 = 0, $$06272 = 0, $$06273 = 0, $$064 = 0, $$06471 = 0, $$06575 = 0, $$06874 = 0, $$1 = 0, $$166 = 0, $$16670 = 0, $$267 = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $105 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $26 = 0, $31 = 0, $32 = 0, $4 = 0, $45 = 0, $46 = 0, $47 = 0, $53 = 0, $54 = 0, $58 = 0, $6 = 0, $60 = 0, $66 = 0, $67 = 0, $70 = 0, $72 = 0, $8 = 0, $87 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 290
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 292
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 294
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 296
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 298
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 300
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 302
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 304
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 306
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 308
 $20 = HEAP8[$0 + 40 >> 0] & 1; //@line 311
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 313
 if (HEAP8[___async_retval >> 0] & 1) {
  HEAP8[$22 >> 0] = HEAP8[$22 >> 0] | 64; //@line 320
 }
 $26 = $4 + 1178 | 0; //@line 322
 if (!(HEAP8[$26 >> 0] | 0)) {
  $$pre$phiZ2D = $22; //@line 326
 } else {
  HEAP8[$26 >> 0] = 0; //@line 328
  HEAP8[$22 >> 0] = HEAP8[$22 >> 0] | 32; //@line 331
  $$pre$phiZ2D = $22; //@line 332
 }
 $31 = $4 + 1756 | 0; //@line 334
 $32 = HEAP32[$31 >> 2] | 0; //@line 335
 HEAP8[$4 + 1186 >> 0] = $32; //@line 338
 HEAP8[$4 + 1187 >> 0] = $32 >>> 8; //@line 342
 HEAP8[$4 + 1188 >> 0] = $32 >>> 16; //@line 346
 HEAP8[$4 + 1189 >> 0] = $32 >>> 24; //@line 350
 $45 = $4 + 1190 | 0; //@line 352
 HEAP8[$45 >> 0] = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 353
 $46 = $4 + 1760 | 0; //@line 354
 $47 = HEAP32[$46 >> 2] | 0; //@line 355
 HEAP8[$4 + 1191 >> 0] = $47; //@line 358
 HEAP8[$4 + 1192 >> 0] = $47 >>> 8; //@line 362
 $53 = $4 + 476 | 0; //@line 363
 __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($53); //@line 364
 $54 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($53) | 0; //@line 365
 do {
  if ($20) {
   label = 16; //@line 368
  } else {
   if (!(HEAP16[$2 >> 1] | 0)) {
    label = 16; //@line 373
   } else {
    if (!(__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($53) | 0)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($53); //@line 377
     $$06272 = $10; //@line 378
     $$06471 = $12; //@line 378
     $$16670 = 8; //@line 378
     label = 20; //@line 379
     break;
    }
    $58 = $54 & 255; //@line 382
    if (($54 & 255) >= 16) {
     HEAP16[$2 >> 1] = $54 & 255; //@line 386
     $$062 = 0; //@line 388
     $$064 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($53) | 0; //@line 388
     $$166 = 8; //@line 388
     label = 19; //@line 389
     break;
    }
    $60 = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 392
    $66 = ($60 & 255) + $58 & 15 | $60 & -16; //@line 398
    HEAP8[$$pre$phiZ2D >> 0] = $66; //@line 399
    HEAP8[$45 >> 0] = $66; //@line 400
    $67 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($53) | 0; //@line 401
    if (!($54 << 24 >> 24)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($53); //@line 404
     $$06272 = $10; //@line 405
     $$06471 = $12; //@line 405
     $$16670 = 8; //@line 405
     label = 20; //@line 406
     break;
    } else {
     $$06575 = 8; //@line 409
     $$06874 = 0; //@line 409
     $70 = 0; //@line 409
     while (1) {
      $72 = $$06575 + 1 << 24 >> 24; //@line 413
      HEAP8[($$06575 & 255) + ($4 + 1185) >> 0] = HEAP8[$67 + $70 >> 0] | 0; //@line 416
      $$06874 = $$06874 + 1 << 16 >> 16; //@line 417
      $70 = $$06874 & 65535; //@line 418
      if ($70 >>> 0 >= $58 >>> 0) {
       $$062 = $10; //@line 423
       $$064 = $12; //@line 423
       $$166 = $72; //@line 423
       label = 19; //@line 424
       break;
      } else {
       $$06575 = $72; //@line 421
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 16) {
  if (!($54 << 24 >> 24)) {
   $$062 = $10; //@line 435
   $$064 = $12; //@line 435
   $$166 = 8; //@line 435
   label = 19; //@line 436
  } else {
   if (__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($53) | 0) {
    HEAP16[$2 >> 1] = $54 & 255; //@line 441
    $$062 = 0; //@line 443
    $$064 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($53) | 0; //@line 443
    $$166 = 8; //@line 443
    label = 19; //@line 444
   } else {
    $$062 = $10; //@line 446
    $$064 = $12; //@line 446
    $$166 = 8; //@line 446
    label = 19; //@line 447
   }
  }
 }
 if ((label | 0) == 19) {
  __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($53); //@line 452
  if (!$$064) {
   $$06273 = $$062; //@line 455
   $$1 = 0; //@line 455
   $$267 = $$166; //@line 455
  } else {
   $$06272 = $$062; //@line 457
   $$06471 = $$064; //@line 457
   $$16670 = $$166; //@line 457
   label = 20; //@line 458
  }
 }
 if ((label | 0) == 20) {
  if (!(HEAP16[$2 >> 1] | 0)) {
   $$06273 = $$06272; //@line 465
   $$1 = 0; //@line 465
   $$267 = $$16670; //@line 465
  } else {
   $87 = $$16670 + 1 << 24 >> 24; //@line 467
   HEAP8[($$16670 & 255) + ($4 + 1185) >> 0] = $$06272; //@line 470
   if (!($$06272 << 24 >> 24)) {
    __ZN14LoRaMacCommand20clear_command_bufferEv($53); //@line 474
    $$058 = $4 + 1716 | 0; //@line 476
   } else {
    $$058 = $4 + 1732 | 0; //@line 478
   }
   $100 = (__ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh($4 + 756 | 0, $$06471, HEAP16[$2 >> 1] | 0, $$058, 128, HEAP32[$31 >> 2] | 0, 0, HEAP32[$46 >> 2] | 0, ($87 & 255) + ($4 + 1185) | 0) | 0) == 0; //@line 487
   $$06273 = $$06272; //@line 489
   $$1 = $100 ? 0 : -1014; //@line 489
   $$267 = $87; //@line 489
  }
 }
 $105 = (HEAPU16[$2 >> 1] | 0) + ($$267 & 255) & 65535; //@line 496
 HEAP16[$2 >> 1] = $105; //@line 497
 $108 = HEAP32[$31 >> 2] | 0; //@line 500
 $109 = HEAP32[$46 >> 2] | 0; //@line 501
 $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 502
 $110 = __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj($4 + 756 | 0, $6, $105, $4 + 1716 | 0, 128, $108, 0, $109, $8) | 0; //@line 503
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 380; //@line 506
  $111 = $ReallocAsyncCtx + 4 | 0; //@line 507
  HEAP32[$111 >> 2] = $$1; //@line 508
  $112 = $ReallocAsyncCtx + 8 | 0; //@line 509
  HEAP32[$112 >> 2] = $8; //@line 510
  $113 = $ReallocAsyncCtx + 12 | 0; //@line 511
  HEAP32[$113 >> 2] = $2; //@line 512
  $114 = $ReallocAsyncCtx + 16 | 0; //@line 513
  HEAP32[$114 >> 2] = $4; //@line 514
  $115 = $ReallocAsyncCtx + 20 | 0; //@line 515
  HEAP8[$115 >> 0] = $10; //@line 516
  $116 = $ReallocAsyncCtx + 21 | 0; //@line 517
  HEAP8[$116 >> 0] = $$06273; //@line 518
  $117 = $ReallocAsyncCtx + 24 | 0; //@line 519
  HEAP32[$117 >> 2] = $14; //@line 520
  $118 = $ReallocAsyncCtx + 28 | 0; //@line 521
  HEAP32[$118 >> 2] = $16; //@line 522
  $119 = $ReallocAsyncCtx + 32 | 0; //@line 523
  HEAP32[$119 >> 2] = $18; //@line 524
  sp = STACKTOP; //@line 525
  return;
 }
 HEAP32[___async_retval >> 2] = $110; //@line 529
 ___async_unwind = 0; //@line 530
 HEAP32[$ReallocAsyncCtx >> 2] = 380; //@line 531
 $111 = $ReallocAsyncCtx + 4 | 0; //@line 532
 HEAP32[$111 >> 2] = $$1; //@line 533
 $112 = $ReallocAsyncCtx + 8 | 0; //@line 534
 HEAP32[$112 >> 2] = $8; //@line 535
 $113 = $ReallocAsyncCtx + 12 | 0; //@line 536
 HEAP32[$113 >> 2] = $2; //@line 537
 $114 = $ReallocAsyncCtx + 16 | 0; //@line 538
 HEAP32[$114 >> 2] = $4; //@line 539
 $115 = $ReallocAsyncCtx + 20 | 0; //@line 540
 HEAP8[$115 >> 0] = $10; //@line 541
 $116 = $ReallocAsyncCtx + 21 | 0; //@line 542
 HEAP8[$116 >> 0] = $$06273; //@line 543
 $117 = $ReallocAsyncCtx + 24 | 0; //@line 544
 HEAP32[$117 >> 2] = $14; //@line 545
 $118 = $ReallocAsyncCtx + 28 | 0; //@line 546
 HEAP32[$118 >> 2] = $16; //@line 547
 $119 = $ReallocAsyncCtx + 32 | 0; //@line 548
 HEAP32[$119 >> 2] = $18; //@line 549
 sp = STACKTOP; //@line 550
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_368($0) {
 $0 = $0 | 0;
 var $$pre$i$i38 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 28712
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28714
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28716
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28718
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28724
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28726
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28728
 $$pre$i$i38 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 28729
 HEAP32[HEAP32[$0 + 20 >> 2] >> 2] = $$pre$i$i38; //@line 28731
 if ($$pre$i$i38 | 0) {
  $20 = HEAP32[$$pre$i$i38 + 8 >> 2] | 0; //@line 28735
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(28) | 0; //@line 28736
  FUNCTION_TABLE_vi[$20 & 1023]($2); //@line 28737
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 175; //@line 28740
   $21 = $ReallocAsyncCtx9 + 4 | 0; //@line 28741
   HEAP32[$21 >> 2] = $2; //@line 28742
   $22 = $ReallocAsyncCtx9 + 8 | 0; //@line 28743
   HEAP32[$22 >> 2] = $4; //@line 28744
   $23 = $ReallocAsyncCtx9 + 12 | 0; //@line 28745
   HEAP32[$23 >> 2] = $6; //@line 28746
   $24 = $ReallocAsyncCtx9 + 16 | 0; //@line 28747
   HEAP32[$24 >> 2] = $12; //@line 28748
   $25 = $ReallocAsyncCtx9 + 20 | 0; //@line 28749
   HEAP32[$25 >> 2] = $14; //@line 28750
   $26 = $ReallocAsyncCtx9 + 24 | 0; //@line 28751
   HEAP32[$26 >> 2] = $16; //@line 28752
   sp = STACKTOP; //@line 28753
   return;
  }
  ___async_unwind = 0; //@line 28756
  HEAP32[$ReallocAsyncCtx9 >> 2] = 175; //@line 28757
  $21 = $ReallocAsyncCtx9 + 4 | 0; //@line 28758
  HEAP32[$21 >> 2] = $2; //@line 28759
  $22 = $ReallocAsyncCtx9 + 8 | 0; //@line 28760
  HEAP32[$22 >> 2] = $4; //@line 28761
  $23 = $ReallocAsyncCtx9 + 12 | 0; //@line 28762
  HEAP32[$23 >> 2] = $6; //@line 28763
  $24 = $ReallocAsyncCtx9 + 16 | 0; //@line 28764
  HEAP32[$24 >> 2] = $12; //@line 28765
  $25 = $ReallocAsyncCtx9 + 20 | 0; //@line 28766
  HEAP32[$25 >> 2] = $14; //@line 28767
  $26 = $ReallocAsyncCtx9 + 24 | 0; //@line 28768
  HEAP32[$26 >> 2] = $16; //@line 28769
  sp = STACKTOP; //@line 28770
  return;
 }
 $27 = $4 + 12 | 0; //@line 28773
 HEAP32[$4 >> 2] = 176; //@line 28774
 HEAP32[$4 + 4 >> 2] = 0; //@line 28776
 HEAP32[$4 + 8 >> 2] = $6; //@line 28778
 HEAP32[$27 >> 2] = 808; //@line 28779
 $28 = $6 + 2384 | 0; //@line 28780
 if (($28 | 0) == ($4 | 0)) {
  $53 = HEAP32[204] | 0; //@line 28784
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(24) | 0; //@line 28785
  FUNCTION_TABLE_vi[$53 & 1023]($4); //@line 28786
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 179; //@line 28789
   $54 = $ReallocAsyncCtx12 + 4 | 0; //@line 28790
   HEAP32[$54 >> 2] = $12; //@line 28791
   $55 = $ReallocAsyncCtx12 + 8 | 0; //@line 28792
   HEAP32[$55 >> 2] = $14; //@line 28793
   $56 = $ReallocAsyncCtx12 + 12 | 0; //@line 28794
   HEAP32[$56 >> 2] = $6; //@line 28795
   $57 = $ReallocAsyncCtx12 + 16 | 0; //@line 28796
   HEAP32[$57 >> 2] = $4; //@line 28797
   $58 = $ReallocAsyncCtx12 + 20 | 0; //@line 28798
   HEAP32[$58 >> 2] = $16; //@line 28799
   sp = STACKTOP; //@line 28800
   return;
  }
  ___async_unwind = 0; //@line 28803
  HEAP32[$ReallocAsyncCtx12 >> 2] = 179; //@line 28804
  $54 = $ReallocAsyncCtx12 + 4 | 0; //@line 28805
  HEAP32[$54 >> 2] = $12; //@line 28806
  $55 = $ReallocAsyncCtx12 + 8 | 0; //@line 28807
  HEAP32[$55 >> 2] = $14; //@line 28808
  $56 = $ReallocAsyncCtx12 + 12 | 0; //@line 28809
  HEAP32[$56 >> 2] = $6; //@line 28810
  $57 = $ReallocAsyncCtx12 + 16 | 0; //@line 28811
  HEAP32[$57 >> 2] = $4; //@line 28812
  $58 = $ReallocAsyncCtx12 + 20 | 0; //@line 28813
  HEAP32[$58 >> 2] = $16; //@line 28814
  sp = STACKTOP; //@line 28815
  return;
 }
 $30 = $6 + 2396 | 0; //@line 28818
 $31 = HEAP32[$30 >> 2] | 0; //@line 28819
 if (!$31) {
  $44 = HEAP32[203] | 0; //@line 28823
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(32) | 0; //@line 28824
  FUNCTION_TABLE_vii[$44 & 15]($28, $4); //@line 28825
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 178; //@line 28828
   $45 = $ReallocAsyncCtx11 + 4 | 0; //@line 28829
   HEAP32[$45 >> 2] = $12; //@line 28830
   $46 = $ReallocAsyncCtx11 + 8 | 0; //@line 28831
   HEAP32[$46 >> 2] = $14; //@line 28832
   $47 = $ReallocAsyncCtx11 + 12 | 0; //@line 28833
   HEAP32[$47 >> 2] = $6; //@line 28834
   $48 = $ReallocAsyncCtx11 + 16 | 0; //@line 28835
   HEAP32[$48 >> 2] = $27; //@line 28836
   $49 = $ReallocAsyncCtx11 + 20 | 0; //@line 28837
   HEAP32[$49 >> 2] = $30; //@line 28838
   $50 = $ReallocAsyncCtx11 + 24 | 0; //@line 28839
   HEAP32[$50 >> 2] = $4; //@line 28840
   $51 = $ReallocAsyncCtx11 + 28 | 0; //@line 28841
   HEAP32[$51 >> 2] = $16; //@line 28842
   sp = STACKTOP; //@line 28843
   return;
  }
  ___async_unwind = 0; //@line 28846
  HEAP32[$ReallocAsyncCtx11 >> 2] = 178; //@line 28847
  $45 = $ReallocAsyncCtx11 + 4 | 0; //@line 28848
  HEAP32[$45 >> 2] = $12; //@line 28849
  $46 = $ReallocAsyncCtx11 + 8 | 0; //@line 28850
  HEAP32[$46 >> 2] = $14; //@line 28851
  $47 = $ReallocAsyncCtx11 + 12 | 0; //@line 28852
  HEAP32[$47 >> 2] = $6; //@line 28853
  $48 = $ReallocAsyncCtx11 + 16 | 0; //@line 28854
  HEAP32[$48 >> 2] = $27; //@line 28855
  $49 = $ReallocAsyncCtx11 + 20 | 0; //@line 28856
  HEAP32[$49 >> 2] = $30; //@line 28857
  $50 = $ReallocAsyncCtx11 + 24 | 0; //@line 28858
  HEAP32[$50 >> 2] = $4; //@line 28859
  $51 = $ReallocAsyncCtx11 + 28 | 0; //@line 28860
  HEAP32[$51 >> 2] = $16; //@line 28861
  sp = STACKTOP; //@line 28862
  return;
 } else {
  $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 28866
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(36) | 0; //@line 28867
  FUNCTION_TABLE_vi[$34 & 1023]($28); //@line 28868
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 177; //@line 28871
   $35 = $ReallocAsyncCtx10 + 4 | 0; //@line 28872
   HEAP32[$35 >> 2] = $12; //@line 28873
   $36 = $ReallocAsyncCtx10 + 8 | 0; //@line 28874
   HEAP32[$36 >> 2] = $14; //@line 28875
   $37 = $ReallocAsyncCtx10 + 12 | 0; //@line 28876
   HEAP32[$37 >> 2] = $27; //@line 28877
   $38 = $ReallocAsyncCtx10 + 16 | 0; //@line 28878
   HEAP32[$38 >> 2] = $6; //@line 28879
   $39 = $ReallocAsyncCtx10 + 20 | 0; //@line 28880
   HEAP32[$39 >> 2] = $30; //@line 28881
   $40 = $ReallocAsyncCtx10 + 24 | 0; //@line 28882
   HEAP32[$40 >> 2] = $4; //@line 28883
   $41 = $ReallocAsyncCtx10 + 28 | 0; //@line 28884
   HEAP32[$41 >> 2] = $16; //@line 28885
   $42 = $ReallocAsyncCtx10 + 32 | 0; //@line 28886
   HEAP32[$42 >> 2] = $28; //@line 28887
   sp = STACKTOP; //@line 28888
   return;
  }
  ___async_unwind = 0; //@line 28891
  HEAP32[$ReallocAsyncCtx10 >> 2] = 177; //@line 28892
  $35 = $ReallocAsyncCtx10 + 4 | 0; //@line 28893
  HEAP32[$35 >> 2] = $12; //@line 28894
  $36 = $ReallocAsyncCtx10 + 8 | 0; //@line 28895
  HEAP32[$36 >> 2] = $14; //@line 28896
  $37 = $ReallocAsyncCtx10 + 12 | 0; //@line 28897
  HEAP32[$37 >> 2] = $27; //@line 28898
  $38 = $ReallocAsyncCtx10 + 16 | 0; //@line 28899
  HEAP32[$38 >> 2] = $6; //@line 28900
  $39 = $ReallocAsyncCtx10 + 20 | 0; //@line 28901
  HEAP32[$39 >> 2] = $30; //@line 28902
  $40 = $ReallocAsyncCtx10 + 24 | 0; //@line 28903
  HEAP32[$40 >> 2] = $4; //@line 28904
  $41 = $ReallocAsyncCtx10 + 28 | 0; //@line 28905
  HEAP32[$41 >> 2] = $16; //@line 28906
  $42 = $ReallocAsyncCtx10 + 32 | 0; //@line 28907
  HEAP32[$42 >> 2] = $28; //@line 28908
  sp = STACKTOP; //@line 28909
  return;
 }
}
function _mbedtls_gcm_setkey__async_cb($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $103 = 0, $105 = 0, $106 = 0, $107 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $116 = 0, $121 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $137 = 0, $139 = 0, $144 = 0, $149 = 0, $151 = 0, $152 = 0, $153 = 0, $155 = 0, $156 = 0, $157 = 0, $160 = 0, $162 = 0, $167 = 0, $171 = 0, $172 = 0, $174 = 0, $178 = 0, $179 = 0, $181 = 0, $185 = 0, $186 = 0, $188 = 0, $192 = 0, $193 = 0, $195 = 0, $199 = 0, $200 = 0, $202 = 0, $206 = 0, $207 = 0, $209 = 0, $213 = 0, $214 = 0, $216 = 0, $220 = 0, $221 = 0, $223 = 0, $230 = 0, $237 = 0, $244 = 0, $251 = 0, $258 = 0, $265 = 0, $27 = 0, $272 = 0, $279 = 0, $286 = 0, $293 = 0, $300 = 0, $307 = 0, $314 = 0, $321 = 0, $4 = 0, $45 = 0, $6 = 0, $63 = 0, $81 = 0, $83 = 0, $88 = 0, $93 = 0, $98 = 0, $AsyncRetVal = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8848
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8850
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 8854
 if (!$AsyncRetVal) {
  $27 = (HEAPU8[$4 + 1 >> 0] | 0) << 16 | (HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0) << 24 | (HEAPU8[$4 + 2 >> 0] | 0) << 8 | (HEAPU8[$4 + 3 >> 0] | 0); //@line 8873
  $45 = (HEAPU8[$4 + 5 >> 0] | 0) << 16 | (HEAPU8[$4 + 4 >> 0] | 0) << 24 | (HEAPU8[$4 + 6 >> 0] | 0) << 8 | (HEAPU8[$4 + 7 >> 0] | 0); //@line 8891
  $63 = (HEAPU8[$4 + 9 >> 0] | 0) << 16 | (HEAPU8[$4 + 8 >> 0] | 0) << 24 | (HEAPU8[$4 + 10 >> 0] | 0) << 8 | (HEAPU8[$4 + 11 >> 0] | 0); //@line 8909
  $81 = (HEAPU8[$4 + 13 >> 0] | 0) << 16 | (HEAPU8[$4 + 12 >> 0] | 0) << 24 | (HEAPU8[$4 + 14 >> 0] | 0) << 8 | (HEAPU8[$4 + 15 >> 0] | 0); //@line 8927
  $83 = $6 + 136 | 0; //@line 8929
  HEAP32[$83 >> 2] = $81; //@line 8931
  HEAP32[$83 + 4 >> 2] = $63; //@line 8934
  $88 = $6 + 264 | 0; //@line 8936
  HEAP32[$88 >> 2] = $45; //@line 8938
  HEAP32[$88 + 4 >> 2] = $27; //@line 8941
  $93 = $6 + 200 | 0; //@line 8943
  HEAP32[$93 >> 2] = 0; //@line 8945
  HEAP32[$93 + 4 >> 2] = 0; //@line 8948
  $98 = $6 + 72 | 0; //@line 8950
  HEAP32[$98 >> 2] = 0; //@line 8952
  HEAP32[$98 + 4 >> 2] = 0; //@line 8955
  $103 = _i64Subtract(0, 0, $81 & 1 | 0, 0) | 0; //@line 8957
  $105 = _bitshift64Shl($45 | 0, 0, 63) | 0; //@line 8959
  $106 = tempRet0; //@line 8960
  $107 = _bitshift64Lshr($81 | 0, $63 | 0, 1) | 0; //@line 8961
  $109 = $107 | $105; //@line 8963
  $110 = tempRet0 | $106; //@line 8964
  $111 = _bitshift64Lshr($45 | 0, $27 | 0, 1) | 0; //@line 8965
  $112 = tempRet0; //@line 8966
  $114 = $103 & -520093696 ^ $112; //@line 8968
  $116 = $6 + 104 | 0; //@line 8970
  HEAP32[$116 >> 2] = $109; //@line 8972
  HEAP32[$116 + 4 >> 2] = $110; //@line 8975
  $121 = $6 + 232 | 0; //@line 8977
  HEAP32[$121 >> 2] = $111; //@line 8979
  HEAP32[$121 + 4 >> 2] = $114; //@line 8982
  $126 = _i64Subtract(0, 0, $107 & 1 | 0, 0) | 0; //@line 8984
  $128 = _bitshift64Shl($111 | 0, $112 | 0, 63) | 0; //@line 8986
  $129 = tempRet0; //@line 8987
  $130 = _bitshift64Lshr($109 | 0, $110 | 0, 1) | 0; //@line 8988
  $132 = $130 | $128; //@line 8990
  $133 = tempRet0 | $129; //@line 8991
  $134 = _bitshift64Lshr($111 | 0, $114 | 0, 1) | 0; //@line 8992
  $135 = tempRet0; //@line 8993
  $137 = $126 & -520093696 ^ $135; //@line 8995
  $139 = $6 + 88 | 0; //@line 8997
  HEAP32[$139 >> 2] = $132; //@line 8999
  HEAP32[$139 + 4 >> 2] = $133; //@line 9002
  $144 = $6 + 216 | 0; //@line 9004
  HEAP32[$144 >> 2] = $134; //@line 9006
  HEAP32[$144 + 4 >> 2] = $137; //@line 9009
  $149 = _i64Subtract(0, 0, $130 & 1 | 0, 0) | 0; //@line 9011
  $151 = _bitshift64Shl($134 | 0, $135 | 0, 63) | 0; //@line 9013
  $152 = tempRet0; //@line 9014
  $153 = _bitshift64Lshr($132 | 0, $133 | 0, 1) | 0; //@line 9015
  $155 = $151 | $153; //@line 9017
  $156 = $152 | tempRet0; //@line 9018
  $157 = _bitshift64Lshr($134 | 0, $137 | 0, 1) | 0; //@line 9019
  $160 = $149 & -520093696 ^ tempRet0; //@line 9022
  $162 = $6 + 80 | 0; //@line 9024
  HEAP32[$162 >> 2] = $155; //@line 9026
  HEAP32[$162 + 4 >> 2] = $156; //@line 9029
  $167 = $6 + 208 | 0; //@line 9031
  HEAP32[$167 >> 2] = $157; //@line 9033
  HEAP32[$167 + 4 >> 2] = $160; //@line 9036
  $171 = $157 ^ $134; //@line 9037
  $172 = $160 ^ $137; //@line 9038
  $174 = $6 + 224 | 0; //@line 9040
  HEAP32[$174 >> 2] = $171; //@line 9042
  HEAP32[$174 + 4 >> 2] = $172; //@line 9045
  $178 = $155 ^ $132; //@line 9046
  $179 = $156 ^ $133; //@line 9047
  $181 = $6 + 96 | 0; //@line 9049
  HEAP32[$181 >> 2] = $178; //@line 9051
  HEAP32[$181 + 4 >> 2] = $179; //@line 9054
  $185 = $157 ^ $111; //@line 9055
  $186 = $160 ^ $114; //@line 9056
  $188 = $6 + 240 | 0; //@line 9058
  HEAP32[$188 >> 2] = $185; //@line 9060
  HEAP32[$188 + 4 >> 2] = $186; //@line 9063
  $192 = $155 ^ $109; //@line 9064
  $193 = $156 ^ $110; //@line 9065
  $195 = $6 + 112 | 0; //@line 9067
  HEAP32[$195 >> 2] = $192; //@line 9069
  HEAP32[$195 + 4 >> 2] = $193; //@line 9072
  $199 = $134 ^ $111; //@line 9073
  $200 = $137 ^ $114; //@line 9074
  $202 = $6 + 248 | 0; //@line 9076
  HEAP32[$202 >> 2] = $199; //@line 9078
  HEAP32[$202 + 4 >> 2] = $200; //@line 9081
  $206 = $132 ^ $109; //@line 9082
  $207 = $133 ^ $110; //@line 9083
  $209 = $6 + 120 | 0; //@line 9085
  HEAP32[$209 >> 2] = $206; //@line 9087
  HEAP32[$209 + 4 >> 2] = $207; //@line 9090
  $213 = $171 ^ $111; //@line 9091
  $214 = $172 ^ $114; //@line 9092
  $216 = $6 + 256 | 0; //@line 9094
  HEAP32[$216 >> 2] = $213; //@line 9096
  HEAP32[$216 + 4 >> 2] = $214; //@line 9099
  $220 = $178 ^ $109; //@line 9100
  $221 = $179 ^ $110; //@line 9101
  $223 = $6 + 128 | 0; //@line 9103
  HEAP32[$223 >> 2] = $220; //@line 9105
  HEAP32[$223 + 4 >> 2] = $221; //@line 9108
  $230 = $6 + 272 | 0; //@line 9112
  HEAP32[$230 >> 2] = $157 ^ $45; //@line 9114
  HEAP32[$230 + 4 >> 2] = $160 ^ $27; //@line 9117
  $237 = $6 + 144 | 0; //@line 9121
  HEAP32[$237 >> 2] = $155 ^ $81; //@line 9123
  HEAP32[$237 + 4 >> 2] = $156 ^ $63; //@line 9126
  $244 = $6 + 280 | 0; //@line 9130
  HEAP32[$244 >> 2] = $134 ^ $45; //@line 9132
  HEAP32[$244 + 4 >> 2] = $137 ^ $27; //@line 9135
  $251 = $6 + 152 | 0; //@line 9139
  HEAP32[$251 >> 2] = $132 ^ $81; //@line 9141
  HEAP32[$251 + 4 >> 2] = $133 ^ $63; //@line 9144
  $258 = $6 + 288 | 0; //@line 9148
  HEAP32[$258 >> 2] = $171 ^ $45; //@line 9150
  HEAP32[$258 + 4 >> 2] = $172 ^ $27; //@line 9153
  $265 = $6 + 160 | 0; //@line 9157
  HEAP32[$265 >> 2] = $178 ^ $81; //@line 9159
  HEAP32[$265 + 4 >> 2] = $179 ^ $63; //@line 9162
  $272 = $6 + 296 | 0; //@line 9166
  HEAP32[$272 >> 2] = $111 ^ $45; //@line 9168
  HEAP32[$272 + 4 >> 2] = $114 ^ $27; //@line 9171
  $279 = $6 + 168 | 0; //@line 9175
  HEAP32[$279 >> 2] = $109 ^ $81; //@line 9177
  HEAP32[$279 + 4 >> 2] = $110 ^ $63; //@line 9180
  $286 = $6 + 304 | 0; //@line 9184
  HEAP32[$286 >> 2] = $185 ^ $45; //@line 9186
  HEAP32[$286 + 4 >> 2] = $186 ^ $27; //@line 9189
  $293 = $6 + 176 | 0; //@line 9193
  HEAP32[$293 >> 2] = $192 ^ $81; //@line 9195
  HEAP32[$293 + 4 >> 2] = $193 ^ $63; //@line 9198
  $300 = $6 + 312 | 0; //@line 9202
  HEAP32[$300 >> 2] = $199 ^ $45; //@line 9204
  HEAP32[$300 + 4 >> 2] = $200 ^ $27; //@line 9207
  $307 = $6 + 184 | 0; //@line 9211
  HEAP32[$307 >> 2] = $206 ^ $81; //@line 9213
  HEAP32[$307 + 4 >> 2] = $207 ^ $63; //@line 9216
  $314 = $6 + 320 | 0; //@line 9220
  HEAP32[$314 >> 2] = $213 ^ $45; //@line 9222
  HEAP32[$314 + 4 >> 2] = $214 ^ $27; //@line 9225
  $321 = $6 + 192 | 0; //@line 9229
  HEAP32[$321 >> 2] = $220 ^ $81; //@line 9231
  HEAP32[$321 + 4 >> 2] = $221 ^ $63; //@line 9234
  $$0$i = 0; //@line 9235
 } else {
  $$0$i = $AsyncRetVal; //@line 9237
 }
 HEAP32[___async_retval >> 2] = $$0$i; //@line 9240
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $103 = 0, $106 = 0, $107 = 0, $109 = 0, $116 = 0, $119 = 0, $12 = 0, $121 = 0, $122 = 0, $127 = 0, $130 = 0, $19 = 0, $20 = 0, $23 = 0, $25 = 0, $30 = 0, $41 = 0, $42 = 0, $43 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $67 = 0, $7 = 0, $85 = 0, $88 = 0, $90 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx6 = 0, $switch$selectcmp$i = 0, $switch$selectcmp4$i = 0, sp = 0;
 sp = STACKTOP; //@line 19570
 $6 = $1 + 1 | 0; //@line 19573
 $7 = HEAP8[$6 >> 0] | 0; //@line 19574
 $10 = HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + ($7 << 24 >> 24) >> 0] | 0; //@line 19577
 $12 = HEAP32[$0 + 124 >> 2] | 0; //@line 19579
 $19 = $1 + 2 | 0; //@line 19586
 $20 = HEAP8[$19 >> 0] | 0; //@line 19587
 $23 = HEAP8[(HEAP32[$0 + 72 >> 2] | 0) + ((HEAPU8[$12 + ((HEAPU8[$1 >> 0] | 0) * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 2 >> 0] | 0; //@line 19590
 $25 = $20 << 24 >> 24 > $23 << 24 >> 24 ? $20 : $23; //@line 19592
 HEAP8[$19 >> 0] = $25; //@line 19593
 $30 = HEAP32[(HEAP32[$0 + 80 >> 2] | 0) + (($7 & 255) << 2) >> 2] | 0; //@line 19598
 $switch$selectcmp$i = ($30 | 0) == 25e4; //@line 19599
 $switch$selectcmp4$i = ($30 | 0) == 5e5; //@line 19600
 $41 = ~~+Math_floor(+(+HEAPF32[$1 + 4 >> 2] - +($25 << 24 >> 24 << 1 >>> 0) - +HEAPF32[$1 + 8 >> 2])); //@line 19611
 $42 = $0 + 4 | 0; //@line 19612
 $43 = HEAP32[$42 >> 2] | 0; //@line 19613
 $46 = HEAP32[(HEAP32[$43 >> 2] | 0) + 72 >> 2] | 0; //@line 19616
 $AsyncCtx = _emscripten_alloc_async_context(44, sp) | 0; //@line 19617
 FUNCTION_TABLE_vi[$46 & 1023]($43); //@line 19618
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 509; //@line 19621
  HEAP32[$AsyncCtx + 4 >> 2] = $42; //@line 19623
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 19625
  HEAP32[$AsyncCtx + 12 >> 2] = $12; //@line 19627
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 19629
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 19631
  HEAP8[$AsyncCtx + 24 >> 0] = $switch$selectcmp$i & 1; //@line 19634
  HEAP8[$AsyncCtx + 25 >> 0] = $switch$selectcmp4$i & 1; //@line 19637
  HEAP8[$AsyncCtx + 26 >> 0] = $10; //@line 19639
  HEAP8[$AsyncCtx + 27 >> 0] = $41; //@line 19641
  HEAP32[$AsyncCtx + 28 >> 2] = $1; //@line 19643
  HEAP32[$AsyncCtx + 32 >> 2] = $3; //@line 19645
  HEAP32[$AsyncCtx + 36 >> 2] = $19; //@line 19647
  HEAP32[$AsyncCtx + 40 >> 2] = $2; //@line 19649
  sp = STACKTOP; //@line 19650
  return 0; //@line 19651
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 19653
 $60 = HEAP32[$42 >> 2] | 0; //@line 19654
 $63 = HEAP32[(HEAP32[$60 >> 2] | 0) + 32 >> 2] | 0; //@line 19657
 $67 = HEAP32[$12 + ((HEAPU8[$1 >> 0] | 0) * 12 | 0) >> 2] | 0; //@line 19661
 $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 19662
 FUNCTION_TABLE_vii[$63 & 15]($60, $67); //@line 19663
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 510; //@line 19666
  HEAP32[$AsyncCtx2 + 4 >> 2] = $6; //@line 19668
  HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 19670
  HEAP32[$AsyncCtx2 + 12 >> 2] = $42; //@line 19672
  HEAP8[$AsyncCtx2 + 16 >> 0] = $switch$selectcmp$i & 1; //@line 19675
  HEAP8[$AsyncCtx2 + 17 >> 0] = $switch$selectcmp4$i & 1; //@line 19678
  HEAP8[$AsyncCtx2 + 18 >> 0] = $10; //@line 19680
  HEAP8[$AsyncCtx2 + 19 >> 0] = $41; //@line 19682
  HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 19684
  HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 19686
  HEAP32[$AsyncCtx2 + 28 >> 2] = $19; //@line 19688
  HEAP32[$AsyncCtx2 + 32 >> 2] = $2; //@line 19690
  sp = STACKTOP; //@line 19691
  return 0; //@line 19692
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 19694
 $85 = HEAP32[$42 >> 2] | 0; //@line 19701
 $88 = HEAP32[(HEAP32[$85 >> 2] | 0) + 20 >> 2] | 0; //@line 19704
 $90 = $switch$selectcmp4$i ? 2 : $switch$selectcmp$i & 1; //@line 19706
 $91 = $10 << 24 >> 24; //@line 19707
 do {
  if ((HEAP8[$6 >> 0] | 0) == (HEAPU8[$0 + 27 >> 0] | 0)) {
   $AsyncCtx6 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19711
   FUNCTION_TABLE_viiiiiiiiiiiiii[$88 & 1]($85, 0, $41, 25e3, $90, $91 * 1e3 | 0, 0, 5, 0, 1, 0, 0, 0, 3e3); //@line 19712
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 511; //@line 19715
    HEAP32[$AsyncCtx6 + 4 >> 2] = $42; //@line 19717
    HEAP32[$AsyncCtx6 + 8 >> 2] = $1; //@line 19719
    HEAP32[$AsyncCtx6 + 12 >> 2] = $3; //@line 19721
    HEAP32[$AsyncCtx6 + 16 >> 2] = $19; //@line 19723
    HEAP32[$AsyncCtx6 + 20 >> 2] = $2; //@line 19725
    sp = STACKTOP; //@line 19726
    return 0; //@line 19727
   } else {
    _emscripten_free_async_context($AsyncCtx6 | 0); //@line 19729
    $$0 = 0; //@line 19730
    break;
   }
  } else {
   $AsyncCtx10 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19734
   FUNCTION_TABLE_viiiiiiiiiiiiii[$88 & 1]($85, 1, $41, 0, $90, $91, 1, 8, 0, 1, 0, 0, 0, 3e3); //@line 19735
   if (___async) {
    HEAP32[$AsyncCtx10 >> 2] = 512; //@line 19738
    HEAP32[$AsyncCtx10 + 4 >> 2] = $42; //@line 19740
    HEAP32[$AsyncCtx10 + 8 >> 2] = $1; //@line 19742
    HEAP32[$AsyncCtx10 + 12 >> 2] = $3; //@line 19744
    HEAP32[$AsyncCtx10 + 16 >> 2] = $19; //@line 19746
    HEAP32[$AsyncCtx10 + 20 >> 2] = $2; //@line 19748
    sp = STACKTOP; //@line 19749
    return 0; //@line 19750
   } else {
    _emscripten_free_async_context($AsyncCtx10 | 0); //@line 19752
    $$0 = 1; //@line 19753
    break;
   }
  }
 } while (0);
 $103 = HEAP32[$42 >> 2] | 0; //@line 19758
 $106 = HEAP32[(HEAP32[$103 >> 2] | 0) + 44 >> 2] | 0; //@line 19761
 $107 = $1 + 12 | 0; //@line 19762
 $109 = HEAP16[$107 >> 1] & 255; //@line 19764
 $AsyncCtx14 = _emscripten_alloc_async_context(28, sp) | 0; //@line 19765
 FUNCTION_TABLE_viii[$106 & 7]($103, $$0, $109); //@line 19766
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 513; //@line 19769
  HEAP32[$AsyncCtx14 + 4 >> 2] = $42; //@line 19771
  HEAP32[$AsyncCtx14 + 8 >> 2] = $107; //@line 19773
  HEAP32[$AsyncCtx14 + 12 >> 2] = $$0; //@line 19775
  HEAP32[$AsyncCtx14 + 16 >> 2] = $3; //@line 19777
  HEAP32[$AsyncCtx14 + 20 >> 2] = $19; //@line 19779
  HEAP32[$AsyncCtx14 + 24 >> 2] = $2; //@line 19781
  sp = STACKTOP; //@line 19782
  return 0; //@line 19783
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 19785
 $116 = HEAP32[$42 >> 2] | 0; //@line 19786
 $119 = HEAP32[(HEAP32[$116 >> 2] | 0) + 52 >> 2] | 0; //@line 19789
 $121 = HEAP16[$107 >> 1] & 255; //@line 19791
 $AsyncCtx17 = _emscripten_alloc_async_context(20, sp) | 0; //@line 19792
 $122 = FUNCTION_TABLE_iiii[$119 & 31]($116, $$0, $121) | 0; //@line 19793
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 514; //@line 19796
  HEAP32[$AsyncCtx17 + 4 >> 2] = $3; //@line 19798
  HEAP32[$AsyncCtx17 + 8 >> 2] = $42; //@line 19800
  HEAP32[$AsyncCtx17 + 12 >> 2] = $19; //@line 19802
  HEAP32[$AsyncCtx17 + 16 >> 2] = $2; //@line 19804
  sp = STACKTOP; //@line 19805
  return 0; //@line 19806
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 19808
 HEAP32[$3 >> 2] = $122; //@line 19809
 $127 = HEAP32[$42 >> 2] | 0; //@line 19810
 $130 = HEAP32[(HEAP32[$127 >> 2] | 0) + 76 >> 2] | 0; //@line 19813
 $AsyncCtx20 = _emscripten_alloc_async_context(12, sp) | 0; //@line 19814
 FUNCTION_TABLE_vi[$130 & 1023]($127); //@line 19815
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 515; //@line 19818
  HEAP32[$AsyncCtx20 + 4 >> 2] = $19; //@line 19820
  HEAP32[$AsyncCtx20 + 8 >> 2] = $2; //@line 19822
  sp = STACKTOP; //@line 19823
  return 0; //@line 19824
 } else {
  _emscripten_free_async_context($AsyncCtx20 | 0); //@line 19826
  HEAP8[$2 >> 0] = HEAP8[$19 >> 0] | 0; //@line 19828
  return 1; //@line 19829
 }
 return 0; //@line 19831
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_370($0) {
 $0 = $0 | 0;
 var $$pre125 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 29077
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29079
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29081
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29083
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29085
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29087
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29089
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29091
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29093
 $$pre125 = HEAP32[$6 >> 2] | 0; //@line 29094
 if ($$pre125 | 0) {
  $19 = HEAP32[$$pre125 + 4 >> 2] | 0; //@line 29098
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(32) | 0; //@line 29099
  FUNCTION_TABLE_vii[$19 & 15]($16, $12); //@line 29100
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 178; //@line 29103
   $20 = $ReallocAsyncCtx11 + 4 | 0; //@line 29104
   HEAP32[$20 >> 2] = $2; //@line 29105
   $21 = $ReallocAsyncCtx11 + 8 | 0; //@line 29106
   HEAP32[$21 >> 2] = $4; //@line 29107
   $22 = $ReallocAsyncCtx11 + 12 | 0; //@line 29108
   HEAP32[$22 >> 2] = $8; //@line 29109
   $23 = $ReallocAsyncCtx11 + 16 | 0; //@line 29110
   HEAP32[$23 >> 2] = $6; //@line 29111
   $24 = $ReallocAsyncCtx11 + 20 | 0; //@line 29112
   HEAP32[$24 >> 2] = $10; //@line 29113
   $25 = $ReallocAsyncCtx11 + 24 | 0; //@line 29114
   HEAP32[$25 >> 2] = $12; //@line 29115
   $26 = $ReallocAsyncCtx11 + 28 | 0; //@line 29116
   HEAP32[$26 >> 2] = $14; //@line 29117
   sp = STACKTOP; //@line 29118
   return;
  }
  ___async_unwind = 0; //@line 29121
  HEAP32[$ReallocAsyncCtx11 >> 2] = 178; //@line 29122
  $20 = $ReallocAsyncCtx11 + 4 | 0; //@line 29123
  HEAP32[$20 >> 2] = $2; //@line 29124
  $21 = $ReallocAsyncCtx11 + 8 | 0; //@line 29125
  HEAP32[$21 >> 2] = $4; //@line 29126
  $22 = $ReallocAsyncCtx11 + 12 | 0; //@line 29127
  HEAP32[$22 >> 2] = $8; //@line 29128
  $23 = $ReallocAsyncCtx11 + 16 | 0; //@line 29129
  HEAP32[$23 >> 2] = $6; //@line 29130
  $24 = $ReallocAsyncCtx11 + 20 | 0; //@line 29131
  HEAP32[$24 >> 2] = $10; //@line 29132
  $25 = $ReallocAsyncCtx11 + 24 | 0; //@line 29133
  HEAP32[$25 >> 2] = $12; //@line 29134
  $26 = $ReallocAsyncCtx11 + 28 | 0; //@line 29135
  HEAP32[$26 >> 2] = $14; //@line 29136
  sp = STACKTOP; //@line 29137
  return;
 }
 HEAP32[$10 >> 2] = 0; //@line 29140
 $27 = $14 + 12 | 0; //@line 29141
 HEAP32[$14 >> 2] = 180; //@line 29142
 HEAP32[$14 + 4 >> 2] = 0; //@line 29144
 HEAP32[$14 + 8 >> 2] = $8; //@line 29146
 HEAP32[$27 >> 2] = 808; //@line 29147
 $28 = $8 + 2416 | 0; //@line 29148
 if (($28 | 0) == ($14 | 0)) {
  $51 = HEAP32[204] | 0; //@line 29152
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(20) | 0; //@line 29153
  FUNCTION_TABLE_vi[$51 & 1023]($14); //@line 29154
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 183; //@line 29157
   $52 = $ReallocAsyncCtx15 + 4 | 0; //@line 29158
   HEAP32[$52 >> 2] = $14; //@line 29159
   $53 = $ReallocAsyncCtx15 + 8 | 0; //@line 29160
   HEAP32[$53 >> 2] = $8; //@line 29161
   $54 = $ReallocAsyncCtx15 + 12 | 0; //@line 29162
   HEAP32[$54 >> 2] = $2; //@line 29163
   $55 = $ReallocAsyncCtx15 + 16 | 0; //@line 29164
   HEAP32[$55 >> 2] = $4; //@line 29165
   sp = STACKTOP; //@line 29166
   return;
  }
  ___async_unwind = 0; //@line 29169
  HEAP32[$ReallocAsyncCtx15 >> 2] = 183; //@line 29170
  $52 = $ReallocAsyncCtx15 + 4 | 0; //@line 29171
  HEAP32[$52 >> 2] = $14; //@line 29172
  $53 = $ReallocAsyncCtx15 + 8 | 0; //@line 29173
  HEAP32[$53 >> 2] = $8; //@line 29174
  $54 = $ReallocAsyncCtx15 + 12 | 0; //@line 29175
  HEAP32[$54 >> 2] = $2; //@line 29176
  $55 = $ReallocAsyncCtx15 + 16 | 0; //@line 29177
  HEAP32[$55 >> 2] = $4; //@line 29178
  sp = STACKTOP; //@line 29179
  return;
 }
 $30 = $8 + 2428 | 0; //@line 29182
 $31 = HEAP32[$30 >> 2] | 0; //@line 29183
 if (!$31) {
  $43 = HEAP32[203] | 0; //@line 29187
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(28) | 0; //@line 29188
  FUNCTION_TABLE_vii[$43 & 15]($28, $14); //@line 29189
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 182; //@line 29192
   $44 = $ReallocAsyncCtx14 + 4 | 0; //@line 29193
   HEAP32[$44 >> 2] = $27; //@line 29194
   $45 = $ReallocAsyncCtx14 + 8 | 0; //@line 29195
   HEAP32[$45 >> 2] = $30; //@line 29196
   $46 = $ReallocAsyncCtx14 + 12 | 0; //@line 29197
   HEAP32[$46 >> 2] = $14; //@line 29198
   $47 = $ReallocAsyncCtx14 + 16 | 0; //@line 29199
   HEAP32[$47 >> 2] = $8; //@line 29200
   $48 = $ReallocAsyncCtx14 + 20 | 0; //@line 29201
   HEAP32[$48 >> 2] = $2; //@line 29202
   $49 = $ReallocAsyncCtx14 + 24 | 0; //@line 29203
   HEAP32[$49 >> 2] = $4; //@line 29204
   sp = STACKTOP; //@line 29205
   return;
  }
  ___async_unwind = 0; //@line 29208
  HEAP32[$ReallocAsyncCtx14 >> 2] = 182; //@line 29209
  $44 = $ReallocAsyncCtx14 + 4 | 0; //@line 29210
  HEAP32[$44 >> 2] = $27; //@line 29211
  $45 = $ReallocAsyncCtx14 + 8 | 0; //@line 29212
  HEAP32[$45 >> 2] = $30; //@line 29213
  $46 = $ReallocAsyncCtx14 + 12 | 0; //@line 29214
  HEAP32[$46 >> 2] = $14; //@line 29215
  $47 = $ReallocAsyncCtx14 + 16 | 0; //@line 29216
  HEAP32[$47 >> 2] = $8; //@line 29217
  $48 = $ReallocAsyncCtx14 + 20 | 0; //@line 29218
  HEAP32[$48 >> 2] = $2; //@line 29219
  $49 = $ReallocAsyncCtx14 + 24 | 0; //@line 29220
  HEAP32[$49 >> 2] = $4; //@line 29221
  sp = STACKTOP; //@line 29222
  return;
 } else {
  $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 29226
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(32) | 0; //@line 29227
  FUNCTION_TABLE_vi[$34 & 1023]($28); //@line 29228
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 29231
   $35 = $ReallocAsyncCtx13 + 4 | 0; //@line 29232
   HEAP32[$35 >> 2] = $27; //@line 29233
   $36 = $ReallocAsyncCtx13 + 8 | 0; //@line 29234
   HEAP32[$36 >> 2] = $30; //@line 29235
   $37 = $ReallocAsyncCtx13 + 12 | 0; //@line 29236
   HEAP32[$37 >> 2] = $28; //@line 29237
   $38 = $ReallocAsyncCtx13 + 16 | 0; //@line 29238
   HEAP32[$38 >> 2] = $14; //@line 29239
   $39 = $ReallocAsyncCtx13 + 20 | 0; //@line 29240
   HEAP32[$39 >> 2] = $8; //@line 29241
   $40 = $ReallocAsyncCtx13 + 24 | 0; //@line 29242
   HEAP32[$40 >> 2] = $2; //@line 29243
   $41 = $ReallocAsyncCtx13 + 28 | 0; //@line 29244
   HEAP32[$41 >> 2] = $4; //@line 29245
   sp = STACKTOP; //@line 29246
   return;
  }
  ___async_unwind = 0; //@line 29249
  HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 29250
  $35 = $ReallocAsyncCtx13 + 4 | 0; //@line 29251
  HEAP32[$35 >> 2] = $27; //@line 29252
  $36 = $ReallocAsyncCtx13 + 8 | 0; //@line 29253
  HEAP32[$36 >> 2] = $30; //@line 29254
  $37 = $ReallocAsyncCtx13 + 12 | 0; //@line 29255
  HEAP32[$37 >> 2] = $28; //@line 29256
  $38 = $ReallocAsyncCtx13 + 16 | 0; //@line 29257
  HEAP32[$38 >> 2] = $14; //@line 29258
  $39 = $ReallocAsyncCtx13 + 20 | 0; //@line 29259
  HEAP32[$39 >> 2] = $8; //@line 29260
  $40 = $ReallocAsyncCtx13 + 24 | 0; //@line 29261
  HEAP32[$40 >> 2] = $2; //@line 29262
  $41 = $ReallocAsyncCtx13 + 28 | 0; //@line 29263
  HEAP32[$41 >> 2] = $4; //@line 29264
  sp = STACKTOP; //@line 29265
  return;
 }
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_117($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $25 = 0, $27 = 0, $29 = 0, $31 = 0, $33 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 25748
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25750
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25752
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25754
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25756
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25758
 $12 = $0 + 24 | 0; //@line 25760
 $14 = HEAP32[$12 >> 2] | 0; //@line 25762
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 25765
 $19 = HEAP32[$0 + 32 >> 2] | 0; //@line 25767
 $21 = HEAP32[$0 + 36 >> 2] | 0; //@line 25769
 $23 = HEAP32[$0 + 40 >> 2] | 0; //@line 25771
 $25 = HEAP32[$0 + 44 >> 2] | 0; //@line 25773
 $27 = HEAP32[$0 + 48 >> 2] | 0; //@line 25775
 $29 = HEAP32[$0 + 52 >> 2] | 0; //@line 25777
 $31 = HEAP32[$0 + 56 >> 2] | 0; //@line 25779
 $33 = HEAP32[$0 + 60 >> 2] | 0; //@line 25781
 $35 = HEAP32[$0 + 64 >> 2] | 0; //@line 25783
 $36 = HEAP32[$2 >> 2] | 0; //@line 25784
 if ($36 | 0) {
  $39 = HEAP32[$36 + 4 >> 2] | 0; //@line 25788
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(64) | 0; //@line 25789
  FUNCTION_TABLE_vii[$39 & 15]($6, $8); //@line 25790
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 54; //@line 25793
   $40 = $ReallocAsyncCtx5 + 4 | 0; //@line 25794
   HEAP32[$40 >> 2] = $2; //@line 25795
   $41 = $ReallocAsyncCtx5 + 8 | 0; //@line 25796
   HEAP32[$41 >> 2] = $4; //@line 25797
   $42 = $ReallocAsyncCtx5 + 12 | 0; //@line 25798
   HEAP32[$42 >> 2] = $10; //@line 25799
   $43 = $ReallocAsyncCtx5 + 16 | 0; //@line 25800
   $44 = $43; //@line 25801
   $45 = $44; //@line 25802
   HEAP32[$45 >> 2] = $14; //@line 25803
   $46 = $44 + 4 | 0; //@line 25804
   $47 = $46; //@line 25805
   HEAP32[$47 >> 2] = $17; //@line 25806
   $48 = $ReallocAsyncCtx5 + 24 | 0; //@line 25807
   HEAP32[$48 >> 2] = $19; //@line 25808
   $49 = $ReallocAsyncCtx5 + 28 | 0; //@line 25809
   HEAP32[$49 >> 2] = $8; //@line 25810
   $50 = $ReallocAsyncCtx5 + 32 | 0; //@line 25811
   HEAP32[$50 >> 2] = $21; //@line 25812
   $51 = $ReallocAsyncCtx5 + 36 | 0; //@line 25813
   HEAP32[$51 >> 2] = $23; //@line 25814
   $52 = $ReallocAsyncCtx5 + 40 | 0; //@line 25815
   HEAP32[$52 >> 2] = $25; //@line 25816
   $53 = $ReallocAsyncCtx5 + 44 | 0; //@line 25817
   HEAP32[$53 >> 2] = $27; //@line 25818
   $54 = $ReallocAsyncCtx5 + 48 | 0; //@line 25819
   HEAP32[$54 >> 2] = $29; //@line 25820
   $55 = $ReallocAsyncCtx5 + 52 | 0; //@line 25821
   HEAP32[$55 >> 2] = $31; //@line 25822
   $56 = $ReallocAsyncCtx5 + 56 | 0; //@line 25823
   HEAP32[$56 >> 2] = $33; //@line 25824
   $57 = $ReallocAsyncCtx5 + 60 | 0; //@line 25825
   HEAP32[$57 >> 2] = $35; //@line 25826
   sp = STACKTOP; //@line 25827
   return;
  }
  ___async_unwind = 0; //@line 25830
  HEAP32[$ReallocAsyncCtx5 >> 2] = 54; //@line 25831
  $40 = $ReallocAsyncCtx5 + 4 | 0; //@line 25832
  HEAP32[$40 >> 2] = $2; //@line 25833
  $41 = $ReallocAsyncCtx5 + 8 | 0; //@line 25834
  HEAP32[$41 >> 2] = $4; //@line 25835
  $42 = $ReallocAsyncCtx5 + 12 | 0; //@line 25836
  HEAP32[$42 >> 2] = $10; //@line 25837
  $43 = $ReallocAsyncCtx5 + 16 | 0; //@line 25838
  $44 = $43; //@line 25839
  $45 = $44; //@line 25840
  HEAP32[$45 >> 2] = $14; //@line 25841
  $46 = $44 + 4 | 0; //@line 25842
  $47 = $46; //@line 25843
  HEAP32[$47 >> 2] = $17; //@line 25844
  $48 = $ReallocAsyncCtx5 + 24 | 0; //@line 25845
  HEAP32[$48 >> 2] = $19; //@line 25846
  $49 = $ReallocAsyncCtx5 + 28 | 0; //@line 25847
  HEAP32[$49 >> 2] = $8; //@line 25848
  $50 = $ReallocAsyncCtx5 + 32 | 0; //@line 25849
  HEAP32[$50 >> 2] = $21; //@line 25850
  $51 = $ReallocAsyncCtx5 + 36 | 0; //@line 25851
  HEAP32[$51 >> 2] = $23; //@line 25852
  $52 = $ReallocAsyncCtx5 + 40 | 0; //@line 25853
  HEAP32[$52 >> 2] = $25; //@line 25854
  $53 = $ReallocAsyncCtx5 + 44 | 0; //@line 25855
  HEAP32[$53 >> 2] = $27; //@line 25856
  $54 = $ReallocAsyncCtx5 + 48 | 0; //@line 25857
  HEAP32[$54 >> 2] = $29; //@line 25858
  $55 = $ReallocAsyncCtx5 + 52 | 0; //@line 25859
  HEAP32[$55 >> 2] = $31; //@line 25860
  $56 = $ReallocAsyncCtx5 + 56 | 0; //@line 25861
  HEAP32[$56 >> 2] = $33; //@line 25862
  $57 = $ReallocAsyncCtx5 + 60 | 0; //@line 25863
  HEAP32[$57 >> 2] = $35; //@line 25864
  sp = STACKTOP; //@line 25865
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 25868
 __ZN4mbed6Ticker5setupEy($10, $14, $17); //@line 25869
 $58 = HEAP32[$2 >> 2] | 0; //@line 25870
 if ($58 | 0) {
  $61 = HEAP32[$58 + 8 >> 2] | 0; //@line 25874
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(40) | 0; //@line 25875
  FUNCTION_TABLE_vi[$61 & 1023]($8); //@line 25876
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 55; //@line 25879
   $62 = $ReallocAsyncCtx6 + 4 | 0; //@line 25880
   HEAP32[$62 >> 2] = $19; //@line 25881
   $63 = $ReallocAsyncCtx6 + 8 | 0; //@line 25882
   HEAP32[$63 >> 2] = $21; //@line 25883
   $64 = $ReallocAsyncCtx6 + 12 | 0; //@line 25884
   HEAP32[$64 >> 2] = $23; //@line 25885
   $65 = $ReallocAsyncCtx6 + 16 | 0; //@line 25886
   HEAP32[$65 >> 2] = $25; //@line 25887
   $66 = $ReallocAsyncCtx6 + 20 | 0; //@line 25888
   HEAP32[$66 >> 2] = $27; //@line 25889
   $67 = $ReallocAsyncCtx6 + 24 | 0; //@line 25890
   HEAP32[$67 >> 2] = $29; //@line 25891
   $68 = $ReallocAsyncCtx6 + 28 | 0; //@line 25892
   HEAP32[$68 >> 2] = $31; //@line 25893
   $69 = $ReallocAsyncCtx6 + 32 | 0; //@line 25894
   HEAP32[$69 >> 2] = $33; //@line 25895
   $70 = $ReallocAsyncCtx6 + 36 | 0; //@line 25896
   HEAP32[$70 >> 2] = $35; //@line 25897
   sp = STACKTOP; //@line 25898
   return;
  }
  ___async_unwind = 0; //@line 25901
  HEAP32[$ReallocAsyncCtx6 >> 2] = 55; //@line 25902
  $62 = $ReallocAsyncCtx6 + 4 | 0; //@line 25903
  HEAP32[$62 >> 2] = $19; //@line 25904
  $63 = $ReallocAsyncCtx6 + 8 | 0; //@line 25905
  HEAP32[$63 >> 2] = $21; //@line 25906
  $64 = $ReallocAsyncCtx6 + 12 | 0; //@line 25907
  HEAP32[$64 >> 2] = $23; //@line 25908
  $65 = $ReallocAsyncCtx6 + 16 | 0; //@line 25909
  HEAP32[$65 >> 2] = $25; //@line 25910
  $66 = $ReallocAsyncCtx6 + 20 | 0; //@line 25911
  HEAP32[$66 >> 2] = $27; //@line 25912
  $67 = $ReallocAsyncCtx6 + 24 | 0; //@line 25913
  HEAP32[$67 >> 2] = $29; //@line 25914
  $68 = $ReallocAsyncCtx6 + 28 | 0; //@line 25915
  HEAP32[$68 >> 2] = $31; //@line 25916
  $69 = $ReallocAsyncCtx6 + 32 | 0; //@line 25917
  HEAP32[$69 >> 2] = $33; //@line 25918
  $70 = $ReallocAsyncCtx6 + 36 | 0; //@line 25919
  HEAP32[$70 >> 2] = $35; //@line 25920
  sp = STACKTOP; //@line 25921
  return;
 }
 if (!(HEAP8[$19 + 770 >> 0] | 0)) {
  HEAP32[$21 >> 2] = 6; //@line 25928
  _mbed_tracef(16, 10996, 11053, $21); //@line 25929
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($19); //@line 25930
  HEAP32[$25 >> 2] = 6; //@line 25931
  _mbed_tracef(16, 10996, 11082, $25); //@line 25932
  return;
 } else {
  HEAP32[$29 >> 2] = 5; //@line 25935
  _mbed_tracef(16, 10996, 11053, $29); //@line 25936
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($19); //@line 25937
  HEAP32[$33 >> 2] = 5; //@line 25938
  _mbed_tracef(16, 10996, 11082, $33); //@line 25939
  return;
 }
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $81 = 0, $87 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP; //@line 8021
 STACKTOP = STACKTOP + 32 | 0; //@line 8022
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 8022
 $vararg_buffer3 = sp + 16 | 0; //@line 8023
 $vararg_buffer1 = sp + 8 | 0; //@line 8024
 $vararg_buffer = sp; //@line 8025
 $5 = $0 + 2480 | 0; //@line 8026
 HEAP32[$5 >> 2] = 5; //@line 8027
 $6 = $0 + 2872 | 0; //@line 8028
 HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -3; //@line 8031
 $AsyncCtx = _emscripten_alloc_async_context(44, sp) | 0; //@line 8032
 __ZN7LoRaMac16on_radio_rx_doneEPKhtsa($0, $1, $2, $3, $4); //@line 8033
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 275; //@line 8036
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 8038
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 8040
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 8042
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer; //@line 8044
  HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 8046
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer1; //@line 8048
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer1; //@line 8050
  HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer3; //@line 8052
  HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer3; //@line 8054
  HEAP32[$AsyncCtx + 40 >> 2] = $5; //@line 8056
  sp = STACKTOP; //@line 8057
  STACKTOP = sp; //@line 8058
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8060
 do {
  if (HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) >> 0] | 0) {
   __ZN7LoRaMac25post_process_mlme_requestEv($0); //@line 8066
   $AsyncCtx11 = _emscripten_alloc_async_context(44, sp) | 0; //@line 8067
   __ZN12LoRaWANStack20mlme_confirm_handlerEv($0); //@line 8068
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 276; //@line 8071
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 8073
    HEAP32[$AsyncCtx11 + 8 >> 2] = $vararg_buffer; //@line 8075
    HEAP32[$AsyncCtx11 + 12 >> 2] = $vararg_buffer; //@line 8077
    HEAP32[$AsyncCtx11 + 16 >> 2] = $6; //@line 8079
    HEAP32[$AsyncCtx11 + 20 >> 2] = $0; //@line 8081
    HEAP32[$AsyncCtx11 + 24 >> 2] = $vararg_buffer1; //@line 8083
    HEAP32[$AsyncCtx11 + 28 >> 2] = $vararg_buffer1; //@line 8085
    HEAP32[$AsyncCtx11 + 32 >> 2] = $vararg_buffer3; //@line 8087
    HEAP32[$AsyncCtx11 + 36 >> 2] = $vararg_buffer3; //@line 8089
    HEAP32[$AsyncCtx11 + 40 >> 2] = $5; //@line 8091
    sp = STACKTOP; //@line 8092
    STACKTOP = sp; //@line 8093
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 8095
    break;
   }
  }
 } while (0);
 if (!(__ZN7LoRaMac10nwk_joinedEv($0) | 0)) {
  $87 = $0 + 2879 | 0; //@line 8102
  HEAP8[$87 >> 0] = 1; //@line 8103
  STACKTOP = sp; //@line 8104
  return;
 }
 do {
  if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) >> 2] | 0) == 1) {
   if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($0) | 0) + 32 >> 0] | 0) {
    HEAP32[$vararg_buffer >> 2] = HEAPU8[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 11 >> 0]; //@line 8120
    _mbed_tracef(16, 12482, 12647, $vararg_buffer); //@line 8121
    __ZN7LoRaMac21post_process_mcps_reqEv($0); //@line 8122
    HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 16; //@line 8125
    $AsyncCtx23 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8126
    __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 8127
    if (___async) {
     HEAP32[$AsyncCtx23 >> 2] = 277; //@line 8130
     HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 8132
     HEAP32[$AsyncCtx23 + 8 >> 2] = $6; //@line 8134
     HEAP32[$AsyncCtx23 + 12 >> 2] = $0; //@line 8136
     HEAP32[$AsyncCtx23 + 16 >> 2] = $5; //@line 8138
     HEAP32[$AsyncCtx23 + 20 >> 2] = $vararg_buffer1; //@line 8140
     HEAP32[$AsyncCtx23 + 24 >> 2] = $vararg_buffer1; //@line 8142
     HEAP32[$AsyncCtx23 + 28 >> 2] = $vararg_buffer3; //@line 8144
     HEAP32[$AsyncCtx23 + 32 >> 2] = $vararg_buffer3; //@line 8146
     sp = STACKTOP; //@line 8147
     STACKTOP = sp; //@line 8148
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx23 | 0); //@line 8150
     break;
    }
   }
  } else {
   __ZN7LoRaMac21post_process_mcps_reqEv($0); //@line 8155
   HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 16; //@line 8158
   $AsyncCtx19 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8159
   __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 8160
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 278; //@line 8163
    HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 8165
    HEAP32[$AsyncCtx19 + 8 >> 2] = $6; //@line 8167
    HEAP32[$AsyncCtx19 + 12 >> 2] = $0; //@line 8169
    HEAP32[$AsyncCtx19 + 16 >> 2] = $5; //@line 8171
    HEAP32[$AsyncCtx19 + 20 >> 2] = $vararg_buffer1; //@line 8173
    HEAP32[$AsyncCtx19 + 24 >> 2] = $vararg_buffer1; //@line 8175
    HEAP32[$AsyncCtx19 + 28 >> 2] = $vararg_buffer3; //@line 8177
    HEAP32[$AsyncCtx19 + 32 >> 2] = $vararg_buffer3; //@line 8179
    sp = STACKTOP; //@line 8180
    STACKTOP = sp; //@line 8181
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx19 | 0); //@line 8183
    break;
   }
  }
 } while (0);
 do {
  if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($0) | 0) >> 0] | 0) {
   __ZN7LoRaMac21post_process_mcps_indEv($0); //@line 8193
   HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 2; //@line 8196
   $AsyncCtx15 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8197
   __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 8198
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 279; //@line 8201
    HEAP32[$AsyncCtx15 + 4 >> 2] = $6; //@line 8203
    HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 8205
    HEAP32[$AsyncCtx15 + 12 >> 2] = $5; //@line 8207
    HEAP32[$AsyncCtx15 + 16 >> 2] = $0; //@line 8209
    HEAP32[$AsyncCtx15 + 20 >> 2] = $vararg_buffer1; //@line 8211
    HEAP32[$AsyncCtx15 + 24 >> 2] = $vararg_buffer1; //@line 8213
    HEAP32[$AsyncCtx15 + 28 >> 2] = $vararg_buffer3; //@line 8215
    HEAP32[$AsyncCtx15 + 32 >> 2] = $vararg_buffer3; //@line 8217
    sp = STACKTOP; //@line 8218
    STACKTOP = sp; //@line 8219
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 8221
    break;
   }
  }
 } while (0);
 if (!(HEAP32[$6 >> 2] & 1)) {
  $81 = (__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2; //@line 8231
  HEAP32[$5 >> 2] = $81 ? 5 : 2; //@line 8233
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($0) | 0) + 4 >> 0] | 0)) {
  $87 = $0 + 2879 | 0; //@line 8240
  HEAP8[$87 >> 0] = 1; //@line 8241
  STACKTOP = sp; //@line 8242
  return;
 }
 _mbed_tracef(16, 12482, 12667, $vararg_buffer1); //@line 8244
 __ZN7LoRaMac21post_process_mlme_indEv($0); //@line 8245
 _mbed_tracef(16, 12482, 12691, $vararg_buffer3); //@line 8246
 $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8247
 __ZN12LoRaWANStack23mlme_indication_handlerEv($0); //@line 8248
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 280; //@line 8251
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 8253
  sp = STACKTOP; //@line 8254
  STACKTOP = sp; //@line 8255
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 8257
 $87 = $0 + 2879 | 0; //@line 8258
 HEAP8[$87 >> 0] = 1; //@line 8259
 STACKTOP = sp; //@line 8260
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$off0 = 0, $49 = 0, $57 = 0, $67 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx21 = 0, $AsyncCtx24 = 0, $AsyncCtx28 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 938
 STACKTOP = STACKTOP + 64 | 0; //@line 939
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 939
 $vararg_buffer8 = sp + 56 | 0; //@line 940
 $vararg_buffer6 = sp + 48 | 0; //@line 941
 $vararg_buffer3 = sp + 16 | 0; //@line 942
 $vararg_buffer1 = sp + 8 | 0; //@line 943
 _mbed_tracef(16, 10996, 11140, sp); //@line 945
 HEAP8[$0 + 689 >> 0] = $1; //@line 948
 $9 = HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] | 0; //@line 951
 $AsyncCtx = _emscripten_alloc_async_context(52, sp) | 0; //@line 952
 FUNCTION_TABLE_vii[$9 & 15]($0, $2); //@line 953
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 57; //@line 956
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer3; //@line 958
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 960
  HEAP16[$AsyncCtx + 12 >> 1] = $3; //@line 962
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer1; //@line 964
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer1; //@line 966
  HEAP32[$AsyncCtx + 24 >> 2] = $0; //@line 968
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer3; //@line 970
  HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer3; //@line 972
  HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer6; //@line 974
  HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer6; //@line 976
  HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer8; //@line 978
  HEAP32[$AsyncCtx + 48 >> 2] = $vararg_buffer8; //@line 980
  sp = STACKTOP; //@line 981
  STACKTOP = sp; //@line 982
  return 0; //@line 982
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 984
 HEAP32[$vararg_buffer1 >> 2] = 5; //@line 985
 _mbed_tracef(16, 10996, 11053, $vararg_buffer1); //@line 986
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 987
 HEAP32[$vararg_buffer3 >> 2] = 5; //@line 988
 _mbed_tracef(16, 10996, 11082, $vararg_buffer3); //@line 989
 $AsyncCtx28 = _emscripten_alloc_async_context(36, sp) | 0; //@line 990
 _wait_ms(1); //@line 991
 if (___async) {
  HEAP32[$AsyncCtx28 >> 2] = 58; //@line 994
  HEAP32[$AsyncCtx28 + 4 >> 2] = $vararg_buffer3; //@line 996
  HEAP16[$AsyncCtx28 + 8 >> 1] = $3; //@line 998
  HEAP32[$AsyncCtx28 + 12 >> 2] = $4; //@line 1000
  HEAP32[$AsyncCtx28 + 16 >> 2] = $vararg_buffer8; //@line 1002
  HEAP32[$AsyncCtx28 + 20 >> 2] = $vararg_buffer8; //@line 1004
  HEAP32[$AsyncCtx28 + 24 >> 2] = $0; //@line 1006
  HEAP32[$AsyncCtx28 + 28 >> 2] = $vararg_buffer6; //@line 1008
  HEAP32[$AsyncCtx28 + 32 >> 2] = $vararg_buffer6; //@line 1010
  sp = STACKTOP; //@line 1011
  STACKTOP = sp; //@line 1012
  return 0; //@line 1012
 }
 _emscripten_free_async_context($AsyncCtx28 | 0); //@line 1014
 $AsyncCtx15 = _emscripten_alloc_async_context(40, sp) | 0; //@line 1015
 __ZN4mbed5TimerC2Ev($vararg_buffer3); //@line 1016
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 59; //@line 1019
  HEAP32[$AsyncCtx15 + 4 >> 2] = $vararg_buffer3; //@line 1021
  HEAP16[$AsyncCtx15 + 8 >> 1] = $3; //@line 1023
  HEAP32[$AsyncCtx15 + 12 >> 2] = $4; //@line 1025
  HEAP32[$AsyncCtx15 + 16 >> 2] = $vararg_buffer8; //@line 1027
  HEAP32[$AsyncCtx15 + 20 >> 2] = $vararg_buffer8; //@line 1029
  HEAP32[$AsyncCtx15 + 24 >> 2] = $0; //@line 1031
  HEAP32[$AsyncCtx15 + 28 >> 2] = $vararg_buffer3; //@line 1033
  HEAP32[$AsyncCtx15 + 32 >> 2] = $vararg_buffer6; //@line 1035
  HEAP32[$AsyncCtx15 + 36 >> 2] = $vararg_buffer6; //@line 1037
  sp = STACKTOP; //@line 1038
  STACKTOP = sp; //@line 1039
  return 0; //@line 1039
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 1041
 $AsyncCtx18 = _emscripten_alloc_async_context(40, sp) | 0; //@line 1042
 __ZN4mbed5Timer5startEv($vararg_buffer3); //@line 1043
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 60; //@line 1046
  HEAP16[$AsyncCtx18 + 4 >> 1] = $3; //@line 1048
  HEAP32[$AsyncCtx18 + 8 >> 2] = $vararg_buffer3; //@line 1050
  HEAP32[$AsyncCtx18 + 12 >> 2] = $4; //@line 1052
  HEAP32[$AsyncCtx18 + 16 >> 2] = $vararg_buffer8; //@line 1054
  HEAP32[$AsyncCtx18 + 20 >> 2] = $vararg_buffer8; //@line 1056
  HEAP32[$AsyncCtx18 + 24 >> 2] = $0; //@line 1058
  HEAP32[$AsyncCtx18 + 28 >> 2] = $vararg_buffer3; //@line 1060
  HEAP32[$AsyncCtx18 + 32 >> 2] = $vararg_buffer6; //@line 1062
  HEAP32[$AsyncCtx18 + 36 >> 2] = $vararg_buffer6; //@line 1064
  sp = STACKTOP; //@line 1065
  STACKTOP = sp; //@line 1066
  return 0; //@line 1066
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 1068
 L13 : do {
  if ($3 << 16 >> 16 < -1) {
   $AsyncCtx24 = _emscripten_alloc_async_context(28, sp) | 0; //@line 1072
   $49 = __ZN4mbed5Timer7read_msEv($vararg_buffer3) | 0; //@line 1073
   if (___async) {
    HEAP32[$AsyncCtx24 >> 2] = 61; //@line 1076
    HEAP32[$AsyncCtx24 + 4 >> 2] = $4; //@line 1078
    HEAP32[$AsyncCtx24 + 8 >> 2] = $vararg_buffer6; //@line 1080
    HEAP32[$AsyncCtx24 + 12 >> 2] = $vararg_buffer6; //@line 1082
    HEAP32[$AsyncCtx24 + 16 >> 2] = $0; //@line 1084
    HEAP32[$AsyncCtx24 + 20 >> 2] = $vararg_buffer3; //@line 1086
    HEAP32[$AsyncCtx24 + 24 >> 2] = $vararg_buffer3; //@line 1088
    sp = STACKTOP; //@line 1089
    STACKTOP = sp; //@line 1090
    return 0; //@line 1090
   }
   _emscripten_free_async_context($AsyncCtx24 | 0); //@line 1092
   if (($49 | 0) < ($4 | 0)) {
    _mbed_tracef(16, 10996, 11162, $vararg_buffer6); //@line 1095
    $$0$off0 = 0; //@line 1096
   } else {
    $$0$off0 = 1; //@line 1098
   }
  } else {
   while (1) {
    $AsyncCtx21 = _emscripten_alloc_async_context(28, sp) | 0; //@line 1102
    $57 = __ZN4mbed5Timer7read_msEv($vararg_buffer3) | 0; //@line 1103
    if (___async) {
     break;
    }
    _emscripten_free_async_context($AsyncCtx21 | 0); //@line 1108
    if (($57 | 0) >= ($4 | 0)) {
     $$0$off0 = 1; //@line 1111
     break L13;
    }
    _mbed_tracef(16, 10996, 11162, $vararg_buffer8); //@line 1114
   }
   HEAP32[$AsyncCtx21 >> 2] = 62; //@line 1116
   HEAP32[$AsyncCtx21 + 4 >> 2] = $4; //@line 1118
   HEAP32[$AsyncCtx21 + 8 >> 2] = $vararg_buffer8; //@line 1120
   HEAP32[$AsyncCtx21 + 12 >> 2] = $vararg_buffer8; //@line 1122
   HEAP32[$AsyncCtx21 + 16 >> 2] = $0; //@line 1124
   HEAP32[$AsyncCtx21 + 20 >> 2] = $vararg_buffer3; //@line 1126
   HEAP32[$AsyncCtx21 + 24 >> 2] = $vararg_buffer3; //@line 1128
   sp = STACKTOP; //@line 1129
   STACKTOP = sp; //@line 1130
   return 0; //@line 1130
  }
 } while (0);
 $67 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 1135
 $AsyncCtx12 = _emscripten_alloc_async_context(16, sp) | 0; //@line 1136
 FUNCTION_TABLE_vi[$67 & 1023]($0); //@line 1137
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 63; //@line 1140
  HEAP32[$AsyncCtx12 + 4 >> 2] = $vararg_buffer3; //@line 1142
  HEAP32[$AsyncCtx12 + 8 >> 2] = $vararg_buffer3; //@line 1144
  HEAP8[$AsyncCtx12 + 12 >> 0] = $$0$off0 & 1; //@line 1147
  sp = STACKTOP; //@line 1148
  STACKTOP = sp; //@line 1149
  return 0; //@line 1149
 } else {
  _emscripten_free_async_context($AsyncCtx12 | 0); //@line 1151
  __ZN4mbed5TimerD2Ev($vararg_buffer3); //@line 1152
  STACKTOP = sp; //@line 1153
  return $$0$off0 | 0; //@line 1153
 }
 return 0; //@line 1155
}
function __ZN7LoRaPHY13apply_cf_listEPKhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01314 = 0, $$015 = 0, $$079$i = 0, $106 = 0, $124 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $31 = 0, $34 = 0, $49 = 0, $50 = 0, $56 = 0, $58 = 0, $78 = 0, $83 = 0, $86 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18888
 STACKTOP = STACKTOP + 16 | 0; //@line 18889
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 18889
 $3 = sp; //@line 18890
 if (!(HEAP8[$0 + 15 >> 0] | 0)) {
  STACKTOP = sp; //@line 18895
  return;
 }
 $16 = $3 + 8 | 0; //@line 18906
 HEAP8[$16 >> 0] = HEAPU8[$0 + 31 >> 0] << 4 | HEAPU8[$0 + 30 >> 0]; //@line 18907
 L4 : do {
  if ($2 << 24 >> 24 == 16) {
   $18 = $0 + 18 | 0; //@line 18911
   $19 = HEAP8[$18 >> 0] | 0; //@line 18912
   $20 = $0 + 20 | 0; //@line 18913
   if (($19 & 255) < (HEAPU8[$20 >> 0] | 0)) {
    $23 = $0 + 19 | 0; //@line 18917
    $24 = $3 + 4 | 0; //@line 18918
    $25 = $0 + 76 | 0; //@line 18919
    $26 = $3 + 9 | 0; //@line 18920
    $$01314 = 0; //@line 18921
    $$015 = $19; //@line 18921
    $31 = $19; //@line 18921
    L7 : while (1) {
     if ((($31 & 255) + (HEAPU8[$23 >> 0] | 0) | 0) >>> 0 > ($$015 & 255) >>> 0) {
      $34 = $$01314 & 255; //@line 18930
      $49 = HEAPU8[$1 + ($34 + 2) >> 0] << 16 | (HEAPU8[$1 + ($34 + 1) >> 0] << 8 | HEAPU8[$1 + $34 >> 0]); //@line 18945
      $50 = $49 * 100 | 0; //@line 18946
      HEAP32[$3 >> 2] = $50; //@line 18947
      HEAP32[$24 >> 2] = 0; //@line 18948
      if (!$49) {
       label = 16; //@line 18951
      } else {
       L12 : do {
        if (!(HEAP8[$25 >> 0] | 0)) {
         $83 = -1; //@line 18957
        } else {
         $$079$i = 0; //@line 18959
         while (1) {
          $56 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 18963
          $AsyncCtx = _emscripten_alloc_async_context(80, sp) | 0; //@line 18965
          $58 = FUNCTION_TABLE_iiii[$56 & 31]($0, $50, $$079$i & 255) | 0; //@line 18966
          if (___async) {
           label = 10; //@line 18969
           break L7;
          }
          _emscripten_free_async_context($AsyncCtx | 0); //@line 18972
          if ($58) {
           $83 = $$079$i; //@line 18974
           break L12;
          }
          $78 = $$079$i + 1 | 0; //@line 18977
          if (($78 | 0) < (HEAPU8[$25 >> 0] | 0)) {
           $$079$i = $78; //@line 18982
          } else {
           $83 = -1; //@line 18984
           break;
          }
         }
        }
       } while (0);
       HEAP8[$26 >> 0] = $83; //@line 18991
       $86 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 18994
       $AsyncCtx2 = _emscripten_alloc_async_context(72, sp) | 0; //@line 18995
       FUNCTION_TABLE_iiii[$86 & 31]($0, $3, $$015) | 0; //@line 18996
       if (___async) {
        label = 14; //@line 18999
        break;
       }
       _emscripten_free_async_context($AsyncCtx2 | 0); //@line 19002
      }
     } else {
      HEAP32[$3 >> 2] = 0; //@line 19005
      HEAP8[$16 >> 0] = 0; //@line 19006
      HEAP32[$24 >> 2] = 0; //@line 19007
      label = 16; //@line 19008
     }
     if ((label | 0) == 16) {
      label = 0; //@line 19011
      $106 = HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] | 0; //@line 19014
      $AsyncCtx5 = _emscripten_alloc_async_context(68, sp) | 0; //@line 19015
      FUNCTION_TABLE_iii[$106 & 15]($0, $$015) | 0; //@line 19016
      if (___async) {
       label = 17; //@line 19019
       break;
      }
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 19022
     }
     $124 = $$015 + 1 << 24 >> 24; //@line 19024
     if (($124 & 255) >= (HEAPU8[$20 >> 0] | 0)) {
      break L4;
     }
     $$01314 = ($$01314 & 255) + 3 & 255; //@line 19034
     $$015 = $124; //@line 19034
     $31 = HEAP8[$18 >> 0] | 0; //@line 19034
    }
    if ((label | 0) == 10) {
     HEAP32[$AsyncCtx >> 2] = 497; //@line 19037
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 19039
     HEAP8[$AsyncCtx + 8 >> 0] = $$01314; //@line 19041
     HEAP32[$AsyncCtx + 12 >> 2] = $18; //@line 19043
     HEAP32[$AsyncCtx + 16 >> 2] = $$079$i; //@line 19045
     HEAP32[$AsyncCtx + 20 >> 2] = $26; //@line 19047
     HEAP32[$AsyncCtx + 24 >> 2] = $0; //@line 19049
     HEAP32[$AsyncCtx + 28 >> 2] = $0; //@line 19051
     HEAP32[$AsyncCtx + 32 >> 2] = $3; //@line 19053
     HEAP8[$AsyncCtx + 36 >> 0] = $$015; //@line 19055
     HEAP32[$AsyncCtx + 40 >> 2] = $25; //@line 19057
     HEAP32[$AsyncCtx + 44 >> 2] = $20; //@line 19059
     HEAP32[$AsyncCtx + 48 >> 2] = $0; //@line 19061
     HEAP32[$AsyncCtx + 52 >> 2] = $1; //@line 19063
     HEAP32[$AsyncCtx + 56 >> 2] = $3; //@line 19065
     HEAP32[$AsyncCtx + 60 >> 2] = $24; //@line 19067
     HEAP32[$AsyncCtx + 64 >> 2] = $16; //@line 19069
     HEAP32[$AsyncCtx + 68 >> 2] = $0; //@line 19071
     HEAP32[$AsyncCtx + 72 >> 2] = $50; //@line 19073
     HEAP32[$AsyncCtx + 76 >> 2] = $23; //@line 19075
     sp = STACKTOP; //@line 19076
     STACKTOP = sp; //@line 19077
     return;
    } else if ((label | 0) == 14) {
     HEAP32[$AsyncCtx2 >> 2] = 498; //@line 19080
     HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 19082
     HEAP8[$AsyncCtx2 + 8 >> 0] = $$01314; //@line 19084
     HEAP32[$AsyncCtx2 + 12 >> 2] = $18; //@line 19086
     HEAP32[$AsyncCtx2 + 16 >> 2] = $26; //@line 19088
     HEAP32[$AsyncCtx2 + 20 >> 2] = $0; //@line 19090
     HEAP32[$AsyncCtx2 + 24 >> 2] = $0; //@line 19092
     HEAP32[$AsyncCtx2 + 28 >> 2] = $3; //@line 19094
     HEAP32[$AsyncCtx2 + 32 >> 2] = $25; //@line 19096
     HEAP8[$AsyncCtx2 + 36 >> 0] = $$015; //@line 19098
     HEAP32[$AsyncCtx2 + 40 >> 2] = $20; //@line 19100
     HEAP32[$AsyncCtx2 + 44 >> 2] = $0; //@line 19102
     HEAP32[$AsyncCtx2 + 48 >> 2] = $1; //@line 19104
     HEAP32[$AsyncCtx2 + 52 >> 2] = $3; //@line 19106
     HEAP32[$AsyncCtx2 + 56 >> 2] = $24; //@line 19108
     HEAP32[$AsyncCtx2 + 60 >> 2] = $16; //@line 19110
     HEAP32[$AsyncCtx2 + 64 >> 2] = $0; //@line 19112
     HEAP32[$AsyncCtx2 + 68 >> 2] = $23; //@line 19114
     sp = STACKTOP; //@line 19115
     STACKTOP = sp; //@line 19116
     return;
    } else if ((label | 0) == 17) {
     HEAP32[$AsyncCtx5 >> 2] = 499; //@line 19119
     HEAP32[$AsyncCtx5 + 4 >> 2] = $3; //@line 19121
     HEAP32[$AsyncCtx5 + 8 >> 2] = $18; //@line 19123
     HEAP32[$AsyncCtx5 + 12 >> 2] = $26; //@line 19125
     HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 19127
     HEAP32[$AsyncCtx5 + 20 >> 2] = $0; //@line 19129
     HEAP32[$AsyncCtx5 + 24 >> 2] = $3; //@line 19131
     HEAP32[$AsyncCtx5 + 28 >> 2] = $25; //@line 19133
     HEAP32[$AsyncCtx5 + 32 >> 2] = $20; //@line 19135
     HEAP32[$AsyncCtx5 + 36 >> 2] = $0; //@line 19137
     HEAP32[$AsyncCtx5 + 40 >> 2] = $1; //@line 19139
     HEAP32[$AsyncCtx5 + 44 >> 2] = $3; //@line 19141
     HEAP32[$AsyncCtx5 + 48 >> 2] = $24; //@line 19143
     HEAP32[$AsyncCtx5 + 52 >> 2] = $16; //@line 19145
     HEAP32[$AsyncCtx5 + 56 >> 2] = $0; //@line 19147
     HEAP32[$AsyncCtx5 + 60 >> 2] = $23; //@line 19149
     HEAP8[$AsyncCtx5 + 64 >> 0] = $$01314; //@line 19151
     HEAP8[$AsyncCtx5 + 65 >> 0] = $$015; //@line 19153
     sp = STACKTOP; //@line 19154
     STACKTOP = sp; //@line 19155
     return;
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 19160
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i = 0, $$pre$i = 0, $11 = 0, $13 = 0, $22 = 0, $25 = 0, $35 = 0, $36 = 0, $37 = 0, $41 = 0, $43 = 0, $51 = 0, $54 = 0, $6 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $71 = 0, $74 = 0, $78 = 0, $8 = 0, $81 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 8274
 STACKTOP = STACKTOP + 48 | 0; //@line 8275
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 8275
 $6 = sp + 16 | 0; //@line 8276
 $7 = sp; //@line 8277
 $8 = $1 + 12 | 0; //@line 8278
 $9 = HEAP32[$8 >> 2] | 0; //@line 8279
 do {
  if (!$9) {
   $11 = $7 + 12 | 0; //@line 8283
   HEAP32[$11 >> 2] = 0; //@line 8284
   $36 = 0; //@line 8285
   $43 = $11; //@line 8285
  } else {
   $13 = HEAP32[$9 + 4 >> 2] | 0; //@line 8288
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 8289
   FUNCTION_TABLE_vii[$13 & 15]($7, $1); //@line 8290
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 281; //@line 8293
    HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 8295
    HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 8297
    HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 8299
    HEAP16[$AsyncCtx + 16 >> 1] = $3; //@line 8301
    HEAP16[$AsyncCtx + 18 >> 1] = $4; //@line 8303
    HEAP8[$AsyncCtx + 20 >> 0] = $5; //@line 8305
    HEAP32[$AsyncCtx + 24 >> 2] = $0; //@line 8307
    HEAP32[$AsyncCtx + 28 >> 2] = $8; //@line 8309
    sp = STACKTOP; //@line 8310
    STACKTOP = sp; //@line 8311
    return 0; //@line 8311
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 8313
   $$pre$i = HEAP32[$8 >> 2] | 0; //@line 8314
   $22 = $7 + 12 | 0; //@line 8315
   HEAP32[$22 >> 2] = $$pre$i; //@line 8316
   if (!$$pre$i) {
    $36 = 0; //@line 8319
    $43 = $22; //@line 8319
   } else {
    $25 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 8323
    $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8324
    FUNCTION_TABLE_vii[$25 & 15]($6, $7); //@line 8325
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 282; //@line 8328
     HEAP32[$AsyncCtx2 + 4 >> 2] = $7; //@line 8330
     HEAP32[$AsyncCtx2 + 8 >> 2] = $22; //@line 8332
     HEAP32[$AsyncCtx2 + 12 >> 2] = $6; //@line 8334
     HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 8336
     HEAP16[$AsyncCtx2 + 20 >> 1] = $3; //@line 8338
     HEAP16[$AsyncCtx2 + 22 >> 1] = $4; //@line 8340
     HEAP8[$AsyncCtx2 + 24 >> 0] = $5; //@line 8342
     HEAP32[$AsyncCtx2 + 28 >> 2] = $0; //@line 8344
     HEAP32[$AsyncCtx2 + 32 >> 2] = $22; //@line 8346
     sp = STACKTOP; //@line 8347
     STACKTOP = sp; //@line 8348
     return 0; //@line 8348
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8350
     $36 = HEAP32[$22 >> 2] | 0; //@line 8352
     $43 = $22; //@line 8352
     break;
    }
   }
  }
 } while (0);
 $35 = $6 + 12 | 0; //@line 8358
 HEAP32[$35 >> 2] = $36; //@line 8359
 $37 = $6 + 16 | 0; //@line 8360
 HEAP32[$37 >> 2] = $2; //@line 8361
 HEAP16[$6 + 20 >> 1] = $3; //@line 8363
 HEAP16[$6 + 22 >> 1] = $4; //@line 8365
 HEAP8[$6 + 24 >> 0] = $5; //@line 8367
 $AsyncCtx18 = _emscripten_alloc_async_context(32, sp) | 0; //@line 8368
 $41 = _equeue_alloc($0, 28) | 0; //@line 8369
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 283; //@line 8372
  HEAP32[$AsyncCtx18 + 4 >> 2] = $43; //@line 8374
  HEAP32[$AsyncCtx18 + 8 >> 2] = $7; //@line 8376
  HEAP32[$AsyncCtx18 + 12 >> 2] = $35; //@line 8378
  HEAP32[$AsyncCtx18 + 16 >> 2] = $6; //@line 8380
  HEAP32[$AsyncCtx18 + 20 >> 2] = $35; //@line 8382
  HEAP32[$AsyncCtx18 + 24 >> 2] = $37; //@line 8384
  HEAP32[$AsyncCtx18 + 28 >> 2] = $0; //@line 8386
  sp = STACKTOP; //@line 8387
  STACKTOP = sp; //@line 8388
  return 0; //@line 8388
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 8390
 do {
  if (!$41) {
   $$0$i = 0; //@line 8394
  } else {
   $51 = HEAP32[$35 >> 2] | 0; //@line 8396
   do {
    if (!$51) {
     $64 = 0; //@line 8400
    } else {
     $54 = HEAP32[$51 + 4 >> 2] | 0; //@line 8403
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8404
     FUNCTION_TABLE_vii[$54 & 15]($41, $6); //@line 8405
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 284; //@line 8408
      HEAP32[$AsyncCtx5 + 4 >> 2] = $35; //@line 8410
      HEAP32[$AsyncCtx5 + 8 >> 2] = $41; //@line 8412
      HEAP32[$AsyncCtx5 + 12 >> 2] = $37; //@line 8414
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 8416
      HEAP32[$AsyncCtx5 + 20 >> 2] = $35; //@line 8418
      HEAP32[$AsyncCtx5 + 24 >> 2] = $43; //@line 8420
      HEAP32[$AsyncCtx5 + 28 >> 2] = $6; //@line 8422
      HEAP32[$AsyncCtx5 + 32 >> 2] = $7; //@line 8424
      sp = STACKTOP; //@line 8425
      STACKTOP = sp; //@line 8426
      return 0; //@line 8426
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 8428
      $64 = HEAP32[$35 >> 2] | 0; //@line 8430
      break;
     }
    }
   } while (0);
   HEAP32[$41 + 12 >> 2] = $64; //@line 8436
   $65 = $41 + 16 | 0; //@line 8437
   HEAP32[$65 >> 2] = HEAP32[$37 >> 2]; //@line 8438
   HEAP32[$65 + 4 >> 2] = HEAP32[$37 + 4 >> 2]; //@line 8438
   HEAP8[$65 + 8 >> 0] = HEAP8[$37 + 8 >> 0] | 0; //@line 8438
   _equeue_event_dtor($41, 285); //@line 8439
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8440
   $66 = _equeue_post($0, 286, $41) | 0; //@line 8441
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 287; //@line 8444
    HEAP32[$AsyncCtx15 + 4 >> 2] = $35; //@line 8446
    HEAP32[$AsyncCtx15 + 8 >> 2] = $43; //@line 8448
    HEAP32[$AsyncCtx15 + 12 >> 2] = $6; //@line 8450
    HEAP32[$AsyncCtx15 + 16 >> 2] = $7; //@line 8452
    sp = STACKTOP; //@line 8453
    STACKTOP = sp; //@line 8454
    return 0; //@line 8454
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 8456
    $$0$i = $66; //@line 8457
    break;
   }
  }
 } while (0);
 $71 = HEAP32[$35 >> 2] | 0; //@line 8462
 do {
  if ($71 | 0) {
   $74 = HEAP32[$71 + 8 >> 2] | 0; //@line 8467
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8468
   FUNCTION_TABLE_vi[$74 & 1023]($6); //@line 8469
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 288; //@line 8472
    HEAP32[$AsyncCtx8 + 4 >> 2] = $43; //@line 8474
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 8476
    HEAP32[$AsyncCtx8 + 12 >> 2] = $7; //@line 8478
    sp = STACKTOP; //@line 8479
    STACKTOP = sp; //@line 8480
    return 0; //@line 8480
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 8482
    break;
   }
  }
 } while (0);
 $78 = HEAP32[$43 >> 2] | 0; //@line 8487
 if (!$78) {
  STACKTOP = sp; //@line 8490
  return $$0$i | 0; //@line 8490
 }
 $81 = HEAP32[$78 + 8 >> 2] | 0; //@line 8493
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8494
 FUNCTION_TABLE_vi[$81 & 1023]($7); //@line 8495
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 289; //@line 8498
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 8500
  sp = STACKTOP; //@line 8501
  STACKTOP = sp; //@line 8502
  return 0; //@line 8502
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 8504
 STACKTOP = sp; //@line 8505
 return $$0$i | 0; //@line 8505
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_363($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 27678
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27680
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27682
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27684
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27686
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27688
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27692
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27694
 $17 = $14 + 12 | 0; //@line 27695
 HEAP32[$14 >> 2] = 6; //@line 27696
 HEAP32[$14 + 4 >> 2] = 0; //@line 27698
 HEAP32[$14 + 8 >> 2] = $4; //@line 27700
 HEAP32[$17 >> 2] = 820; //@line 27701
 $18 = $4 + 2400 | 0; //@line 27702
 if (($18 | 0) == ($14 | 0)) {
  $47 = HEAP32[207] | 0; //@line 27706
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 27707
  FUNCTION_TABLE_vi[$47 & 1023]($14); //@line 27708
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 171; //@line 27711
   $48 = $ReallocAsyncCtx6 + 4 | 0; //@line 27712
   HEAP32[$48 >> 2] = $2; //@line 27713
   $49 = $ReallocAsyncCtx6 + 8 | 0; //@line 27714
   HEAP32[$49 >> 2] = $4; //@line 27715
   $50 = $ReallocAsyncCtx6 + 12 | 0; //@line 27716
   HEAP32[$50 >> 2] = $6; //@line 27717
   $51 = $ReallocAsyncCtx6 + 16 | 0; //@line 27718
   HEAP32[$51 >> 2] = $8; //@line 27719
   $52 = $ReallocAsyncCtx6 + 20 | 0; //@line 27720
   HEAP32[$52 >> 2] = $14; //@line 27721
   $53 = $ReallocAsyncCtx6 + 24 | 0; //@line 27722
   HEAP32[$53 >> 2] = $10; //@line 27723
   $54 = $ReallocAsyncCtx6 + 28 | 0; //@line 27724
   HEAP32[$54 >> 2] = $16; //@line 27725
   sp = STACKTOP; //@line 27726
   return;
  }
  ___async_unwind = 0; //@line 27729
  HEAP32[$ReallocAsyncCtx6 >> 2] = 171; //@line 27730
  $48 = $ReallocAsyncCtx6 + 4 | 0; //@line 27731
  HEAP32[$48 >> 2] = $2; //@line 27732
  $49 = $ReallocAsyncCtx6 + 8 | 0; //@line 27733
  HEAP32[$49 >> 2] = $4; //@line 27734
  $50 = $ReallocAsyncCtx6 + 12 | 0; //@line 27735
  HEAP32[$50 >> 2] = $6; //@line 27736
  $51 = $ReallocAsyncCtx6 + 16 | 0; //@line 27737
  HEAP32[$51 >> 2] = $8; //@line 27738
  $52 = $ReallocAsyncCtx6 + 20 | 0; //@line 27739
  HEAP32[$52 >> 2] = $14; //@line 27740
  $53 = $ReallocAsyncCtx6 + 24 | 0; //@line 27741
  HEAP32[$53 >> 2] = $10; //@line 27742
  $54 = $ReallocAsyncCtx6 + 28 | 0; //@line 27743
  HEAP32[$54 >> 2] = $16; //@line 27744
  sp = STACKTOP; //@line 27745
  return;
 }
 $20 = $4 + 2412 | 0; //@line 27748
 $21 = HEAP32[$20 >> 2] | 0; //@line 27749
 if (!$21) {
  $36 = HEAP32[206] | 0; //@line 27753
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 27754
  FUNCTION_TABLE_vii[$36 & 15]($18, $14); //@line 27755
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 170; //@line 27758
   $37 = $ReallocAsyncCtx5 + 4 | 0; //@line 27759
   HEAP32[$37 >> 2] = $2; //@line 27760
   $38 = $ReallocAsyncCtx5 + 8 | 0; //@line 27761
   HEAP32[$38 >> 2] = $4; //@line 27762
   $39 = $ReallocAsyncCtx5 + 12 | 0; //@line 27763
   HEAP32[$39 >> 2] = $17; //@line 27764
   $40 = $ReallocAsyncCtx5 + 16 | 0; //@line 27765
   HEAP32[$40 >> 2] = $20; //@line 27766
   $41 = $ReallocAsyncCtx5 + 20 | 0; //@line 27767
   HEAP32[$41 >> 2] = $6; //@line 27768
   $42 = $ReallocAsyncCtx5 + 24 | 0; //@line 27769
   HEAP32[$42 >> 2] = $8; //@line 27770
   $43 = $ReallocAsyncCtx5 + 28 | 0; //@line 27771
   HEAP32[$43 >> 2] = $14; //@line 27772
   $44 = $ReallocAsyncCtx5 + 32 | 0; //@line 27773
   HEAP32[$44 >> 2] = $10; //@line 27774
   $45 = $ReallocAsyncCtx5 + 36 | 0; //@line 27775
   HEAP32[$45 >> 2] = $16; //@line 27776
   sp = STACKTOP; //@line 27777
   return;
  }
  ___async_unwind = 0; //@line 27780
  HEAP32[$ReallocAsyncCtx5 >> 2] = 170; //@line 27781
  $37 = $ReallocAsyncCtx5 + 4 | 0; //@line 27782
  HEAP32[$37 >> 2] = $2; //@line 27783
  $38 = $ReallocAsyncCtx5 + 8 | 0; //@line 27784
  HEAP32[$38 >> 2] = $4; //@line 27785
  $39 = $ReallocAsyncCtx5 + 12 | 0; //@line 27786
  HEAP32[$39 >> 2] = $17; //@line 27787
  $40 = $ReallocAsyncCtx5 + 16 | 0; //@line 27788
  HEAP32[$40 >> 2] = $20; //@line 27789
  $41 = $ReallocAsyncCtx5 + 20 | 0; //@line 27790
  HEAP32[$41 >> 2] = $6; //@line 27791
  $42 = $ReallocAsyncCtx5 + 24 | 0; //@line 27792
  HEAP32[$42 >> 2] = $8; //@line 27793
  $43 = $ReallocAsyncCtx5 + 28 | 0; //@line 27794
  HEAP32[$43 >> 2] = $14; //@line 27795
  $44 = $ReallocAsyncCtx5 + 32 | 0; //@line 27796
  HEAP32[$44 >> 2] = $10; //@line 27797
  $45 = $ReallocAsyncCtx5 + 36 | 0; //@line 27798
  HEAP32[$45 >> 2] = $16; //@line 27799
  sp = STACKTOP; //@line 27800
  return;
 } else {
  $24 = HEAP32[$21 + 8 >> 2] | 0; //@line 27804
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(44) | 0; //@line 27805
  FUNCTION_TABLE_vi[$24 & 1023]($18); //@line 27806
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 169; //@line 27809
   $25 = $ReallocAsyncCtx4 + 4 | 0; //@line 27810
   HEAP32[$25 >> 2] = $2; //@line 27811
   $26 = $ReallocAsyncCtx4 + 8 | 0; //@line 27812
   HEAP32[$26 >> 2] = $4; //@line 27813
   $27 = $ReallocAsyncCtx4 + 12 | 0; //@line 27814
   HEAP32[$27 >> 2] = $17; //@line 27815
   $28 = $ReallocAsyncCtx4 + 16 | 0; //@line 27816
   HEAP32[$28 >> 2] = $20; //@line 27817
   $29 = $ReallocAsyncCtx4 + 20 | 0; //@line 27818
   HEAP32[$29 >> 2] = $6; //@line 27819
   $30 = $ReallocAsyncCtx4 + 24 | 0; //@line 27820
   HEAP32[$30 >> 2] = $8; //@line 27821
   $31 = $ReallocAsyncCtx4 + 28 | 0; //@line 27822
   HEAP32[$31 >> 2] = $14; //@line 27823
   $32 = $ReallocAsyncCtx4 + 32 | 0; //@line 27824
   HEAP32[$32 >> 2] = $10; //@line 27825
   $33 = $ReallocAsyncCtx4 + 36 | 0; //@line 27826
   HEAP32[$33 >> 2] = $18; //@line 27827
   $34 = $ReallocAsyncCtx4 + 40 | 0; //@line 27828
   HEAP32[$34 >> 2] = $16; //@line 27829
   sp = STACKTOP; //@line 27830
   return;
  }
  ___async_unwind = 0; //@line 27833
  HEAP32[$ReallocAsyncCtx4 >> 2] = 169; //@line 27834
  $25 = $ReallocAsyncCtx4 + 4 | 0; //@line 27835
  HEAP32[$25 >> 2] = $2; //@line 27836
  $26 = $ReallocAsyncCtx4 + 8 | 0; //@line 27837
  HEAP32[$26 >> 2] = $4; //@line 27838
  $27 = $ReallocAsyncCtx4 + 12 | 0; //@line 27839
  HEAP32[$27 >> 2] = $17; //@line 27840
  $28 = $ReallocAsyncCtx4 + 16 | 0; //@line 27841
  HEAP32[$28 >> 2] = $20; //@line 27842
  $29 = $ReallocAsyncCtx4 + 20 | 0; //@line 27843
  HEAP32[$29 >> 2] = $6; //@line 27844
  $30 = $ReallocAsyncCtx4 + 24 | 0; //@line 27845
  HEAP32[$30 >> 2] = $8; //@line 27846
  $31 = $ReallocAsyncCtx4 + 28 | 0; //@line 27847
  HEAP32[$31 >> 2] = $14; //@line 27848
  $32 = $ReallocAsyncCtx4 + 32 | 0; //@line 27849
  HEAP32[$32 >> 2] = $10; //@line 27850
  $33 = $ReallocAsyncCtx4 + 36 | 0; //@line 27851
  HEAP32[$33 >> 2] = $18; //@line 27852
  $34 = $ReallocAsyncCtx4 + 40 | 0; //@line 27853
  HEAP32[$34 >> 2] = $16; //@line 27854
  sp = STACKTOP; //@line 27855
  return;
 }
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_371($0) {
 $0 = $0 | 0;
 var $$pre$i$i54 = 0, $12 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 29275
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29277
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29279
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29281
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29287
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29289
 $$pre$i$i54 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 29290
 HEAP32[HEAP32[$0 + 20 >> 2] >> 2] = $$pre$i$i54; //@line 29292
 if ($$pre$i$i54 | 0) {
  $18 = HEAP32[$$pre$i$i54 + 8 >> 2] | 0; //@line 29296
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(24) | 0; //@line 29297
  FUNCTION_TABLE_vi[$18 & 1023]($12); //@line 29298
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 179; //@line 29301
   $19 = $ReallocAsyncCtx12 + 4 | 0; //@line 29302
   HEAP32[$19 >> 2] = $2; //@line 29303
   $20 = $ReallocAsyncCtx12 + 8 | 0; //@line 29304
   HEAP32[$20 >> 2] = $4; //@line 29305
   $21 = $ReallocAsyncCtx12 + 12 | 0; //@line 29306
   HEAP32[$21 >> 2] = $6; //@line 29307
   $22 = $ReallocAsyncCtx12 + 16 | 0; //@line 29308
   HEAP32[$22 >> 2] = $12; //@line 29309
   $23 = $ReallocAsyncCtx12 + 20 | 0; //@line 29310
   HEAP32[$23 >> 2] = $14; //@line 29311
   sp = STACKTOP; //@line 29312
   return;
  }
  ___async_unwind = 0; //@line 29315
  HEAP32[$ReallocAsyncCtx12 >> 2] = 179; //@line 29316
  $19 = $ReallocAsyncCtx12 + 4 | 0; //@line 29317
  HEAP32[$19 >> 2] = $2; //@line 29318
  $20 = $ReallocAsyncCtx12 + 8 | 0; //@line 29319
  HEAP32[$20 >> 2] = $4; //@line 29320
  $21 = $ReallocAsyncCtx12 + 12 | 0; //@line 29321
  HEAP32[$21 >> 2] = $6; //@line 29322
  $22 = $ReallocAsyncCtx12 + 16 | 0; //@line 29323
  HEAP32[$22 >> 2] = $12; //@line 29324
  $23 = $ReallocAsyncCtx12 + 20 | 0; //@line 29325
  HEAP32[$23 >> 2] = $14; //@line 29326
  sp = STACKTOP; //@line 29327
  return;
 }
 $24 = $14 + 12 | 0; //@line 29330
 HEAP32[$14 >> 2] = 180; //@line 29331
 HEAP32[$14 + 4 >> 2] = 0; //@line 29333
 HEAP32[$14 + 8 >> 2] = $6; //@line 29335
 HEAP32[$24 >> 2] = 808; //@line 29336
 $25 = $6 + 2416 | 0; //@line 29337
 if (($25 | 0) == ($14 | 0)) {
  $48 = HEAP32[204] | 0; //@line 29341
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(20) | 0; //@line 29342
  FUNCTION_TABLE_vi[$48 & 1023]($14); //@line 29343
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 183; //@line 29346
   $49 = $ReallocAsyncCtx15 + 4 | 0; //@line 29347
   HEAP32[$49 >> 2] = $14; //@line 29348
   $50 = $ReallocAsyncCtx15 + 8 | 0; //@line 29349
   HEAP32[$50 >> 2] = $6; //@line 29350
   $51 = $ReallocAsyncCtx15 + 12 | 0; //@line 29351
   HEAP32[$51 >> 2] = $2; //@line 29352
   $52 = $ReallocAsyncCtx15 + 16 | 0; //@line 29353
   HEAP32[$52 >> 2] = $4; //@line 29354
   sp = STACKTOP; //@line 29355
   return;
  }
  ___async_unwind = 0; //@line 29358
  HEAP32[$ReallocAsyncCtx15 >> 2] = 183; //@line 29359
  $49 = $ReallocAsyncCtx15 + 4 | 0; //@line 29360
  HEAP32[$49 >> 2] = $14; //@line 29361
  $50 = $ReallocAsyncCtx15 + 8 | 0; //@line 29362
  HEAP32[$50 >> 2] = $6; //@line 29363
  $51 = $ReallocAsyncCtx15 + 12 | 0; //@line 29364
  HEAP32[$51 >> 2] = $2; //@line 29365
  $52 = $ReallocAsyncCtx15 + 16 | 0; //@line 29366
  HEAP32[$52 >> 2] = $4; //@line 29367
  sp = STACKTOP; //@line 29368
  return;
 }
 $27 = $6 + 2428 | 0; //@line 29371
 $28 = HEAP32[$27 >> 2] | 0; //@line 29372
 if (!$28) {
  $40 = HEAP32[203] | 0; //@line 29376
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(28) | 0; //@line 29377
  FUNCTION_TABLE_vii[$40 & 15]($25, $14); //@line 29378
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 182; //@line 29381
   $41 = $ReallocAsyncCtx14 + 4 | 0; //@line 29382
   HEAP32[$41 >> 2] = $24; //@line 29383
   $42 = $ReallocAsyncCtx14 + 8 | 0; //@line 29384
   HEAP32[$42 >> 2] = $27; //@line 29385
   $43 = $ReallocAsyncCtx14 + 12 | 0; //@line 29386
   HEAP32[$43 >> 2] = $14; //@line 29387
   $44 = $ReallocAsyncCtx14 + 16 | 0; //@line 29388
   HEAP32[$44 >> 2] = $6; //@line 29389
   $45 = $ReallocAsyncCtx14 + 20 | 0; //@line 29390
   HEAP32[$45 >> 2] = $2; //@line 29391
   $46 = $ReallocAsyncCtx14 + 24 | 0; //@line 29392
   HEAP32[$46 >> 2] = $4; //@line 29393
   sp = STACKTOP; //@line 29394
   return;
  }
  ___async_unwind = 0; //@line 29397
  HEAP32[$ReallocAsyncCtx14 >> 2] = 182; //@line 29398
  $41 = $ReallocAsyncCtx14 + 4 | 0; //@line 29399
  HEAP32[$41 >> 2] = $24; //@line 29400
  $42 = $ReallocAsyncCtx14 + 8 | 0; //@line 29401
  HEAP32[$42 >> 2] = $27; //@line 29402
  $43 = $ReallocAsyncCtx14 + 12 | 0; //@line 29403
  HEAP32[$43 >> 2] = $14; //@line 29404
  $44 = $ReallocAsyncCtx14 + 16 | 0; //@line 29405
  HEAP32[$44 >> 2] = $6; //@line 29406
  $45 = $ReallocAsyncCtx14 + 20 | 0; //@line 29407
  HEAP32[$45 >> 2] = $2; //@line 29408
  $46 = $ReallocAsyncCtx14 + 24 | 0; //@line 29409
  HEAP32[$46 >> 2] = $4; //@line 29410
  sp = STACKTOP; //@line 29411
  return;
 } else {
  $31 = HEAP32[$28 + 8 >> 2] | 0; //@line 29415
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(32) | 0; //@line 29416
  FUNCTION_TABLE_vi[$31 & 1023]($25); //@line 29417
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 29420
   $32 = $ReallocAsyncCtx13 + 4 | 0; //@line 29421
   HEAP32[$32 >> 2] = $24; //@line 29422
   $33 = $ReallocAsyncCtx13 + 8 | 0; //@line 29423
   HEAP32[$33 >> 2] = $27; //@line 29424
   $34 = $ReallocAsyncCtx13 + 12 | 0; //@line 29425
   HEAP32[$34 >> 2] = $25; //@line 29426
   $35 = $ReallocAsyncCtx13 + 16 | 0; //@line 29427
   HEAP32[$35 >> 2] = $14; //@line 29428
   $36 = $ReallocAsyncCtx13 + 20 | 0; //@line 29429
   HEAP32[$36 >> 2] = $6; //@line 29430
   $37 = $ReallocAsyncCtx13 + 24 | 0; //@line 29431
   HEAP32[$37 >> 2] = $2; //@line 29432
   $38 = $ReallocAsyncCtx13 + 28 | 0; //@line 29433
   HEAP32[$38 >> 2] = $4; //@line 29434
   sp = STACKTOP; //@line 29435
   return;
  }
  ___async_unwind = 0; //@line 29438
  HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 29439
  $32 = $ReallocAsyncCtx13 + 4 | 0; //@line 29440
  HEAP32[$32 >> 2] = $24; //@line 29441
  $33 = $ReallocAsyncCtx13 + 8 | 0; //@line 29442
  HEAP32[$33 >> 2] = $27; //@line 29443
  $34 = $ReallocAsyncCtx13 + 12 | 0; //@line 29444
  HEAP32[$34 >> 2] = $25; //@line 29445
  $35 = $ReallocAsyncCtx13 + 16 | 0; //@line 29446
  HEAP32[$35 >> 2] = $14; //@line 29447
  $36 = $ReallocAsyncCtx13 + 20 | 0; //@line 29448
  HEAP32[$36 >> 2] = $6; //@line 29449
  $37 = $ReallocAsyncCtx13 + 24 | 0; //@line 29450
  HEAP32[$37 >> 2] = $2; //@line 29451
  $38 = $ReallocAsyncCtx13 + 28 | 0; //@line 29452
  HEAP32[$38 >> 2] = $4; //@line 29453
  sp = STACKTOP; //@line 29454
  return;
 }
}
function _mbedtls_cipher_cmac_update($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$06984 = 0, $$06984$us = 0, $$070 = 0, $$073 = 0, $$09$i = 0, $$09$i75 = 0, $$1$lcssa = 0, $$174$lcssa = 0, $$17481 = 0, $$182 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $22 = 0, $26 = 0, $3 = 0, $38 = 0, $43 = 0, $46 = 0, $5 = 0, $58 = 0, $62 = 0, $66 = 0, $79 = 0, $80 = 0, $81 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3820
 STACKTOP = STACKTOP + 16 | 0; //@line 3821
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 3821
 $3 = sp; //@line 3822
 if (!$0) {
  $$0 = -24832; //@line 3825
  STACKTOP = sp; //@line 3826
  return $$0 | 0; //@line 3826
 }
 $5 = HEAP32[$0 >> 2] | 0; //@line 3828
 if (($1 | 0) == 0 | ($5 | 0) == 0) {
  $$0 = -24832; //@line 3833
  STACKTOP = sp; //@line 3834
  return $$0 | 0; //@line 3834
 }
 $9 = HEAP32[$0 + 64 >> 2] | 0; //@line 3837
 if (!$9) {
  $$0 = -24832; //@line 3840
  STACKTOP = sp; //@line 3841
  return $$0 | 0; //@line 3841
 }
 $12 = HEAP32[$5 + 24 >> 2] | 0; //@line 3844
 $13 = $9 + 32 | 0; //@line 3845
 $14 = HEAP32[$13 >> 2] | 0; //@line 3846
 do {
  if (!$14) {
   $$070 = $1; //@line 3850
   $$073 = $2; //@line 3850
  } else {
   $16 = $12 - $14 | 0; //@line 3852
   if ($16 >>> 0 < $2 >>> 0) {
    _memcpy($9 + 16 + $14 | 0, $1 | 0, $16 | 0) | 0; //@line 3856
    if ($12 | 0) {
     $$09$i = 0; //@line 3859
     do {
      $22 = $9 + $$09$i | 0; //@line 3863
      HEAP8[$22 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$9 + 16 + $$09$i >> 0]; //@line 3866
      $$09$i = $$09$i + 1 | 0; //@line 3867
     } while (($$09$i | 0) != ($12 | 0));
    }
    $AsyncCtx5 = _emscripten_alloc_async_context(40, sp) | 0; //@line 3876
    $26 = _mbedtls_cipher_update($0, $9, $12, $9, $3) | 0; //@line 3877
    if (___async) {
     HEAP32[$AsyncCtx5 >> 2] = 570; //@line 3880
     HEAP32[$AsyncCtx5 + 4 >> 2] = $13; //@line 3882
     HEAP32[$AsyncCtx5 + 8 >> 2] = $12; //@line 3884
     HEAP32[$AsyncCtx5 + 12 >> 2] = $1; //@line 3886
     HEAP32[$AsyncCtx5 + 16 >> 2] = $2; //@line 3888
     HEAP32[$AsyncCtx5 + 20 >> 2] = $0; //@line 3890
     HEAP32[$AsyncCtx5 + 24 >> 2] = $9; //@line 3892
     HEAP32[$AsyncCtx5 + 28 >> 2] = $3; //@line 3894
     HEAP32[$AsyncCtx5 + 32 >> 2] = $3; //@line 3896
     HEAP32[$AsyncCtx5 + 36 >> 2] = $9; //@line 3898
     sp = STACKTOP; //@line 3899
     STACKTOP = sp; //@line 3900
     return 0; //@line 3900
    }
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 3902
    if (!$26) {
     $38 = $12 - (HEAP32[$13 >> 2] | 0) | 0; //@line 3906
     HEAP32[$13 >> 2] = 0; //@line 3909
     $$070 = $1 + $38 | 0; //@line 3910
     $$073 = $2 - $38 | 0; //@line 3910
     break;
    } else {
     $$0 = $26; //@line 3913
     STACKTOP = sp; //@line 3914
     return $$0 | 0; //@line 3914
    }
   } else {
    $$070 = $1; //@line 3917
    $$073 = $2; //@line 3917
   }
  }
 } while (0);
 $43 = (($12 + -1 + $$073 | 0) >>> 0) / ($12 >>> 0) | 0; //@line 3923
 L24 : do {
  if ($43 >>> 0 > 1) {
   if (!$12) {
    $$06984$us = 1; //@line 3929
    while (1) {
     $AsyncCtx2 = _emscripten_alloc_async_context(44, sp) | 0; //@line 3931
     $46 = _mbedtls_cipher_update($0, $9, 0, $9, $3) | 0; //@line 3932
     if (___async) {
      label = 15; //@line 3935
      break;
     }
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3938
     if ($46 | 0) {
      $$0 = $46; //@line 3941
      label = 26; //@line 3942
      break;
     }
     $58 = $$06984$us + 1 | 0; //@line 3945
     if ($58 >>> 0 < $43 >>> 0) {
      $$06984$us = $58; //@line 3948
     } else {
      $$1$lcssa = $$070; //@line 3950
      $$174$lcssa = $$073; //@line 3950
      break L24;
     }
    }
    if ((label | 0) == 15) {
     HEAP32[$AsyncCtx2 >> 2] = 571; //@line 3955
     HEAP32[$AsyncCtx2 + 4 >> 2] = $$06984$us; //@line 3957
     HEAP32[$AsyncCtx2 + 8 >> 2] = $43; //@line 3959
     HEAP32[$AsyncCtx2 + 12 >> 2] = $3; //@line 3961
     HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 3963
     HEAP32[$AsyncCtx2 + 20 >> 2] = $9; //@line 3965
     HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 3967
     HEAP32[$AsyncCtx2 + 28 >> 2] = $$073; //@line 3969
     HEAP32[$AsyncCtx2 + 32 >> 2] = $$070; //@line 3971
     HEAP32[$AsyncCtx2 + 36 >> 2] = $13; //@line 3973
     HEAP32[$AsyncCtx2 + 40 >> 2] = $9; //@line 3975
     sp = STACKTOP; //@line 3976
     STACKTOP = sp; //@line 3977
     return 0; //@line 3977
    } else if ((label | 0) == 26) {
     STACKTOP = sp; //@line 3980
     return $$0 | 0; //@line 3980
    }
   } else {
    $$06984 = 1; //@line 3983
    $$17481 = $$073; //@line 3983
    $$182 = $$070; //@line 3983
   }
   while (1) {
    $$09$i75 = 0; //@line 3986
    do {
     $62 = $9 + $$09$i75 | 0; //@line 3990
     HEAP8[$62 >> 0] = HEAP8[$62 >> 0] ^ HEAP8[$$182 + $$09$i75 >> 0]; //@line 3993
     $$09$i75 = $$09$i75 + 1 | 0; //@line 3994
    } while (($$09$i75 | 0) != ($12 | 0));
    $AsyncCtx = _emscripten_alloc_async_context(48, sp) | 0; //@line 4002
    $66 = _mbedtls_cipher_update($0, $9, $12, $9, $3) | 0; //@line 4003
    if (___async) {
     label = 21; //@line 4006
     break;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 4009
    if ($66 | 0) {
     $$0 = $66; //@line 4012
     label = 26; //@line 4013
     break;
    }
    $79 = $$17481 - $12 | 0; //@line 4016
    $80 = $$182 + $12 | 0; //@line 4017
    $81 = $$06984 + 1 | 0; //@line 4018
    if ($81 >>> 0 < $43 >>> 0) {
     $$06984 = $81; //@line 4021
     $$17481 = $79; //@line 4021
     $$182 = $80; //@line 4021
    } else {
     $$1$lcssa = $80; //@line 4023
     $$174$lcssa = $79; //@line 4023
     break L24;
    }
   }
   if ((label | 0) == 21) {
    HEAP32[$AsyncCtx >> 2] = 572; //@line 4028
    HEAP32[$AsyncCtx + 4 >> 2] = $$17481; //@line 4030
    HEAP32[$AsyncCtx + 8 >> 2] = $12; //@line 4032
    HEAP32[$AsyncCtx + 12 >> 2] = $$182; //@line 4034
    HEAP32[$AsyncCtx + 16 >> 2] = $$06984; //@line 4036
    HEAP32[$AsyncCtx + 20 >> 2] = $43; //@line 4038
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 4040
    HEAP32[$AsyncCtx + 28 >> 2] = $13; //@line 4042
    HEAP32[$AsyncCtx + 32 >> 2] = $9; //@line 4044
    HEAP32[$AsyncCtx + 36 >> 2] = $0; //@line 4046
    HEAP32[$AsyncCtx + 40 >> 2] = $9; //@line 4048
    HEAP32[$AsyncCtx + 44 >> 2] = $3; //@line 4050
    sp = STACKTOP; //@line 4051
    STACKTOP = sp; //@line 4052
    return 0; //@line 4052
   } else if ((label | 0) == 26) {
    STACKTOP = sp; //@line 4055
    return $$0 | 0; //@line 4055
   }
  } else {
   $$1$lcssa = $$070; //@line 4058
   $$174$lcssa = $$073; //@line 4058
  }
 } while (0);
 if (!$$174$lcssa) {
  $$0 = 0; //@line 4063
  STACKTOP = sp; //@line 4064
  return $$0 | 0; //@line 4064
 }
 _memcpy((HEAP32[$13 >> 2] | 0) + ($9 + 16) | 0, $$1$lcssa | 0, $$174$lcssa | 0) | 0; //@line 4068
 HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + $$174$lcssa; //@line 4071
 $$0 = 0; //@line 4072
 STACKTOP = sp; //@line 4073
 return $$0 | 0; //@line 4073
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i = 0, $$pre$i = 0, $11 = 0, $18 = 0, $21 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $4 = 0, $40 = 0, $43 = 0, $46 = 0, $5 = 0, $56 = 0, $59 = 0, $6 = 0, $64 = 0, $67 = 0, $7 = 0, $71 = 0, $74 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 8855
 STACKTOP = STACKTOP + 48 | 0; //@line 8856
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 8856
 $4 = sp + 16 | 0; //@line 8857
 $5 = sp; //@line 8858
 $6 = $1 + 12 | 0; //@line 8859
 $7 = HEAP32[$6 >> 2] | 0; //@line 8860
 do {
  if (!$7) {
   $9 = $5 + 12 | 0; //@line 8864
   HEAP32[$9 >> 2] = 0; //@line 8865
   $30 = 0; //@line 8866
   $40 = $9; //@line 8866
  } else {
   $11 = HEAP32[$7 + 4 >> 2] | 0; //@line 8869
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 8870
   FUNCTION_TABLE_vii[$11 & 15]($5, $1); //@line 8871
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 303; //@line 8874
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 8876
    HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 8878
    HEAP8[$AsyncCtx + 12 >> 0] = $2; //@line 8880
    HEAP8[$AsyncCtx + 13 >> 0] = $3; //@line 8882
    HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 8884
    HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 8886
    sp = STACKTOP; //@line 8887
    STACKTOP = sp; //@line 8888
    return 0; //@line 8888
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 8890
   $$pre$i = HEAP32[$6 >> 2] | 0; //@line 8891
   $18 = $5 + 12 | 0; //@line 8892
   HEAP32[$18 >> 2] = $$pre$i; //@line 8893
   if (!$$pre$i) {
    $30 = 0; //@line 8896
    $40 = $18; //@line 8896
   } else {
    $21 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 8900
    $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 8901
    FUNCTION_TABLE_vii[$21 & 15]($4, $5); //@line 8902
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 304; //@line 8905
     HEAP32[$AsyncCtx2 + 4 >> 2] = $4; //@line 8907
     HEAP32[$AsyncCtx2 + 8 >> 2] = $5; //@line 8909
     HEAP32[$AsyncCtx2 + 12 >> 2] = $18; //@line 8911
     HEAP8[$AsyncCtx2 + 16 >> 0] = $2; //@line 8913
     HEAP8[$AsyncCtx2 + 17 >> 0] = $3; //@line 8915
     HEAP32[$AsyncCtx2 + 20 >> 2] = $0; //@line 8917
     HEAP32[$AsyncCtx2 + 24 >> 2] = $18; //@line 8919
     sp = STACKTOP; //@line 8920
     STACKTOP = sp; //@line 8921
     return 0; //@line 8921
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8923
     $30 = HEAP32[$18 >> 2] | 0; //@line 8925
     $40 = $18; //@line 8925
     break;
    }
   }
  }
 } while (0);
 $29 = $4 + 12 | 0; //@line 8931
 HEAP32[$29 >> 2] = $30; //@line 8932
 $31 = $4 + 16 | 0; //@line 8933
 HEAP8[$31 >> 0] = $2; //@line 8934
 HEAP8[$4 + 17 >> 0] = $3; //@line 8936
 $AsyncCtx18 = _emscripten_alloc_async_context(32, sp) | 0; //@line 8937
 $33 = _equeue_alloc($0, 20) | 0; //@line 8938
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 305; //@line 8941
  HEAP32[$AsyncCtx18 + 4 >> 2] = $31; //@line 8943
  HEAP32[$AsyncCtx18 + 8 >> 2] = $0; //@line 8945
  HEAP32[$AsyncCtx18 + 12 >> 2] = $4; //@line 8947
  HEAP32[$AsyncCtx18 + 16 >> 2] = $29; //@line 8949
  HEAP32[$AsyncCtx18 + 20 >> 2] = $5; //@line 8951
  HEAP32[$AsyncCtx18 + 24 >> 2] = $40; //@line 8953
  HEAP32[$AsyncCtx18 + 28 >> 2] = $29; //@line 8955
  sp = STACKTOP; //@line 8956
  STACKTOP = sp; //@line 8957
  return 0; //@line 8957
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 8959
 do {
  if (!$33) {
   $$0$i = 0; //@line 8963
  } else {
   $43 = HEAP32[$29 >> 2] | 0; //@line 8965
   do {
    if (!$43) {
     $56 = 0; //@line 8969
    } else {
     $46 = HEAP32[$43 + 4 >> 2] | 0; //@line 8972
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8973
     FUNCTION_TABLE_vii[$46 & 15]($33, $4); //@line 8974
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 306; //@line 8977
      HEAP32[$AsyncCtx5 + 4 >> 2] = $29; //@line 8979
      HEAP32[$AsyncCtx5 + 8 >> 2] = $33; //@line 8981
      HEAP32[$AsyncCtx5 + 12 >> 2] = $31; //@line 8983
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 8985
      HEAP32[$AsyncCtx5 + 20 >> 2] = $29; //@line 8987
      HEAP32[$AsyncCtx5 + 24 >> 2] = $40; //@line 8989
      HEAP32[$AsyncCtx5 + 28 >> 2] = $4; //@line 8991
      HEAP32[$AsyncCtx5 + 32 >> 2] = $5; //@line 8993
      sp = STACKTOP; //@line 8994
      STACKTOP = sp; //@line 8995
      return 0; //@line 8995
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 8997
      $56 = HEAP32[$29 >> 2] | 0; //@line 8999
      break;
     }
    }
   } while (0);
   HEAP32[$33 + 12 >> 2] = $56; //@line 9005
   HEAP16[$33 + 16 >> 1] = HEAP16[$31 >> 1] | 0; //@line 9008
   _equeue_event_dtor($33, 307); //@line 9009
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9010
   $59 = _equeue_post($0, 308, $33) | 0; //@line 9011
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 309; //@line 9014
    HEAP32[$AsyncCtx15 + 4 >> 2] = $29; //@line 9016
    HEAP32[$AsyncCtx15 + 8 >> 2] = $40; //@line 9018
    HEAP32[$AsyncCtx15 + 12 >> 2] = $4; //@line 9020
    HEAP32[$AsyncCtx15 + 16 >> 2] = $5; //@line 9022
    sp = STACKTOP; //@line 9023
    STACKTOP = sp; //@line 9024
    return 0; //@line 9024
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 9026
    $$0$i = $59; //@line 9027
    break;
   }
  }
 } while (0);
 $64 = HEAP32[$29 >> 2] | 0; //@line 9032
 do {
  if ($64 | 0) {
   $67 = HEAP32[$64 + 8 >> 2] | 0; //@line 9037
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 9038
   FUNCTION_TABLE_vi[$67 & 1023]($4); //@line 9039
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 310; //@line 9042
    HEAP32[$AsyncCtx8 + 4 >> 2] = $40; //@line 9044
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 9046
    HEAP32[$AsyncCtx8 + 12 >> 2] = $5; //@line 9048
    sp = STACKTOP; //@line 9049
    STACKTOP = sp; //@line 9050
    return 0; //@line 9050
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 9052
    break;
   }
  }
 } while (0);
 $71 = HEAP32[$40 >> 2] | 0; //@line 9057
 if (!$71) {
  STACKTOP = sp; //@line 9060
  return $$0$i | 0; //@line 9060
 }
 $74 = HEAP32[$71 + 8 >> 2] | 0; //@line 9063
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9064
 FUNCTION_TABLE_vi[$74 & 1023]($5); //@line 9065
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 311; //@line 9068
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 9070
  sp = STACKTOP; //@line 9071
  STACKTOP = sp; //@line 9072
  return 0; //@line 9072
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 9074
 STACKTOP = sp; //@line 9075
 return $$0$i | 0; //@line 9075
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$pre$i = 0, $11 = 0, $17 = 0, $18 = 0, $21 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $38 = 0, $4 = 0, $42 = 0, $45 = 0, $5 = 0, $55 = 0, $58 = 0, $6 = 0, $63 = 0, $66 = 0, $70 = 0, $73 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 6195
 STACKTOP = STACKTOP + 48 | 0; //@line 6196
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 6196
 $3 = sp + 16 | 0; //@line 6197
 $4 = sp; //@line 6198
 $5 = $1 + 12 | 0; //@line 6199
 $6 = HEAP32[$5 >> 2] | 0; //@line 6200
 do {
  if (!$6) {
   $8 = $4 + 12 | 0; //@line 6204
   HEAP32[$8 >> 2] = 0; //@line 6205
   $29 = 0; //@line 6207
   $31 = $2 & 1; //@line 6207
   $38 = $8; //@line 6207
  } else {
   $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 6210
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 6211
   FUNCTION_TABLE_vii[$11 & 15]($4, $1); //@line 6212
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 205; //@line 6215
    HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 6217
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 6219
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 6221
    HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 6223
    HEAP8[$AsyncCtx + 20 >> 0] = $2 & 1; //@line 6226
    sp = STACKTOP; //@line 6227
    STACKTOP = sp; //@line 6228
    return 0; //@line 6228
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 6230
   $$pre$i = HEAP32[$5 >> 2] | 0; //@line 6231
   $17 = $4 + 12 | 0; //@line 6232
   HEAP32[$17 >> 2] = $$pre$i; //@line 6233
   $18 = $2 & 1; //@line 6234
   if (!$$pre$i) {
    $29 = 0; //@line 6237
    $31 = $18; //@line 6237
    $38 = $17; //@line 6237
   } else {
    $21 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 6241
    $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 6242
    FUNCTION_TABLE_vii[$21 & 15]($3, $4); //@line 6243
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 206; //@line 6246
     HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 6248
     HEAP32[$AsyncCtx2 + 8 >> 2] = $4; //@line 6250
     HEAP32[$AsyncCtx2 + 12 >> 2] = $17; //@line 6252
     HEAP8[$AsyncCtx2 + 16 >> 0] = $18; //@line 6254
     HEAP32[$AsyncCtx2 + 20 >> 2] = $17; //@line 6256
     HEAP32[$AsyncCtx2 + 24 >> 2] = $0; //@line 6258
     sp = STACKTOP; //@line 6259
     STACKTOP = sp; //@line 6260
     return 0; //@line 6260
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6262
     $29 = HEAP32[$17 >> 2] | 0; //@line 6264
     $31 = $18; //@line 6264
     $38 = $17; //@line 6264
     break;
    }
   }
  }
 } while (0);
 $28 = $3 + 12 | 0; //@line 6270
 HEAP32[$28 >> 2] = $29; //@line 6271
 $30 = $3 + 16 | 0; //@line 6272
 HEAP8[$30 >> 0] = $31; //@line 6273
 $AsyncCtx18 = _emscripten_alloc_async_context(32, sp) | 0; //@line 6274
 $32 = _equeue_alloc($0, 20) | 0; //@line 6275
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 207; //@line 6278
  HEAP32[$AsyncCtx18 + 4 >> 2] = $30; //@line 6280
  HEAP32[$AsyncCtx18 + 8 >> 2] = $0; //@line 6282
  HEAP32[$AsyncCtx18 + 12 >> 2] = $28; //@line 6284
  HEAP32[$AsyncCtx18 + 16 >> 2] = $3; //@line 6286
  HEAP32[$AsyncCtx18 + 20 >> 2] = $38; //@line 6288
  HEAP32[$AsyncCtx18 + 24 >> 2] = $4; //@line 6290
  HEAP32[$AsyncCtx18 + 28 >> 2] = $28; //@line 6292
  sp = STACKTOP; //@line 6293
  STACKTOP = sp; //@line 6294
  return 0; //@line 6294
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 6296
 do {
  if (!$32) {
   $$0$i = 0; //@line 6300
  } else {
   $42 = HEAP32[$28 >> 2] | 0; //@line 6302
   do {
    if (!$42) {
     $55 = 0; //@line 6306
    } else {
     $45 = HEAP32[$42 + 4 >> 2] | 0; //@line 6309
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 6310
     FUNCTION_TABLE_vii[$45 & 15]($32, $3); //@line 6311
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 208; //@line 6314
      HEAP32[$AsyncCtx5 + 4 >> 2] = $28; //@line 6316
      HEAP32[$AsyncCtx5 + 8 >> 2] = $32; //@line 6318
      HEAP32[$AsyncCtx5 + 12 >> 2] = $30; //@line 6320
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 6322
      HEAP32[$AsyncCtx5 + 20 >> 2] = $28; //@line 6324
      HEAP32[$AsyncCtx5 + 24 >> 2] = $38; //@line 6326
      HEAP32[$AsyncCtx5 + 28 >> 2] = $3; //@line 6328
      HEAP32[$AsyncCtx5 + 32 >> 2] = $4; //@line 6330
      sp = STACKTOP; //@line 6331
      STACKTOP = sp; //@line 6332
      return 0; //@line 6332
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 6334
      $55 = HEAP32[$28 >> 2] | 0; //@line 6336
      break;
     }
    }
   } while (0);
   HEAP32[$32 + 12 >> 2] = $55; //@line 6342
   HEAP8[$32 + 16 >> 0] = HEAP8[$30 >> 0] | 0; //@line 6345
   _equeue_event_dtor($32, 209); //@line 6346
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6347
   $58 = _equeue_post($0, 210, $32) | 0; //@line 6348
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 211; //@line 6351
    HEAP32[$AsyncCtx15 + 4 >> 2] = $28; //@line 6353
    HEAP32[$AsyncCtx15 + 8 >> 2] = $38; //@line 6355
    HEAP32[$AsyncCtx15 + 12 >> 2] = $3; //@line 6357
    HEAP32[$AsyncCtx15 + 16 >> 2] = $4; //@line 6359
    sp = STACKTOP; //@line 6360
    STACKTOP = sp; //@line 6361
    return 0; //@line 6361
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 6363
    $$0$i = $58; //@line 6364
    break;
   }
  }
 } while (0);
 $63 = HEAP32[$28 >> 2] | 0; //@line 6369
 do {
  if ($63 | 0) {
   $66 = HEAP32[$63 + 8 >> 2] | 0; //@line 6374
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6375
   FUNCTION_TABLE_vi[$66 & 1023]($3); //@line 6376
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 212; //@line 6379
    HEAP32[$AsyncCtx8 + 4 >> 2] = $38; //@line 6381
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 6383
    HEAP32[$AsyncCtx8 + 12 >> 2] = $4; //@line 6385
    sp = STACKTOP; //@line 6386
    STACKTOP = sp; //@line 6387
    return 0; //@line 6387
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 6389
    break;
   }
  }
 } while (0);
 $70 = HEAP32[$38 >> 2] | 0; //@line 6394
 if (!$70) {
  STACKTOP = sp; //@line 6397
  return $$0$i | 0; //@line 6397
 }
 $73 = HEAP32[$70 + 8 >> 2] | 0; //@line 6400
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6401
 FUNCTION_TABLE_vi[$73 & 1023]($4); //@line 6402
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 213; //@line 6405
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 6407
  sp = STACKTOP; //@line 6408
  STACKTOP = sp; //@line 6409
  return 0; //@line 6409
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 6411
 STACKTOP = sp; //@line 6412
 return $$0$i | 0; //@line 6412
}
function _mbedtls_cipher_cmac_update__async_cb_313($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$09$i75 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $66 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 11448
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11450
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11452
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11454
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11456
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11458
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11460
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11462
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11464
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11466
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11468
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 11471
  $66 = ___async_retval; //@line 11472
  HEAP32[$66 >> 2] = $$0; //@line 11473
  return;
 }
 $22 = $4 - (HEAP32[$2 >> 2] | 0) | 0; //@line 11477
 $23 = $6 + $22 | 0; //@line 11478
 $24 = $8 - $22 | 0; //@line 11479
 HEAP32[$2 >> 2] = 0; //@line 11480
 $27 = (($4 + -1 + $24 | 0) >>> 0) / ($4 >>> 0) | 0; //@line 11483
 if ($27 >>> 0 <= 1) {
  if (!$24) {
   $$0 = 0; //@line 11488
   $66 = ___async_retval; //@line 11489
   HEAP32[$66 >> 2] = $$0; //@line 11490
   return;
  }
  _memcpy((HEAP32[$2 >> 2] | 0) + ($18 + 16) | 0, $23 | 0, $24 | 0) | 0; //@line 11495
  HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $24; //@line 11498
  $$0 = 0; //@line 11499
  $66 = ___async_retval; //@line 11500
  HEAP32[$66 >> 2] = $$0; //@line 11501
  return;
 }
 if (!$4) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 11506
  $30 = _mbedtls_cipher_update($10, $12, 0, $12, $14) | 0; //@line 11507
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 571; //@line 11510
   $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 11511
   HEAP32[$31 >> 2] = 1; //@line 11512
   $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 11513
   HEAP32[$32 >> 2] = $27; //@line 11514
   $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 11515
   HEAP32[$33 >> 2] = $16; //@line 11516
   $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 11517
   HEAP32[$34 >> 2] = $10; //@line 11518
   $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 11519
   HEAP32[$35 >> 2] = $12; //@line 11520
   $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 11521
   HEAP32[$36 >> 2] = $14; //@line 11522
   $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 11523
   HEAP32[$37 >> 2] = $24; //@line 11524
   $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 11525
   HEAP32[$38 >> 2] = $23; //@line 11526
   $39 = $ReallocAsyncCtx2 + 36 | 0; //@line 11527
   HEAP32[$39 >> 2] = $2; //@line 11528
   $40 = $ReallocAsyncCtx2 + 40 | 0; //@line 11529
   HEAP32[$40 >> 2] = $18; //@line 11530
   sp = STACKTOP; //@line 11531
   return;
  }
  HEAP32[___async_retval >> 2] = $30; //@line 11535
  ___async_unwind = 0; //@line 11536
  HEAP32[$ReallocAsyncCtx2 >> 2] = 571; //@line 11537
  $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 11538
  HEAP32[$31 >> 2] = 1; //@line 11539
  $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 11540
  HEAP32[$32 >> 2] = $27; //@line 11541
  $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 11542
  HEAP32[$33 >> 2] = $16; //@line 11543
  $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 11544
  HEAP32[$34 >> 2] = $10; //@line 11545
  $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 11546
  HEAP32[$35 >> 2] = $12; //@line 11547
  $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 11548
  HEAP32[$36 >> 2] = $14; //@line 11549
  $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 11550
  HEAP32[$37 >> 2] = $24; //@line 11551
  $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 11552
  HEAP32[$38 >> 2] = $23; //@line 11553
  $39 = $ReallocAsyncCtx2 + 36 | 0; //@line 11554
  HEAP32[$39 >> 2] = $2; //@line 11555
  $40 = $ReallocAsyncCtx2 + 40 | 0; //@line 11556
  HEAP32[$40 >> 2] = $18; //@line 11557
  sp = STACKTOP; //@line 11558
  return;
 }
 $$09$i75 = 0; //@line 11561
 do {
  $44 = $18 + $$09$i75 | 0; //@line 11565
  HEAP8[$44 >> 0] = HEAP8[$44 >> 0] ^ HEAP8[$23 + $$09$i75 >> 0]; //@line 11568
  $$09$i75 = $$09$i75 + 1 | 0; //@line 11569
 } while (($$09$i75 | 0) != ($4 | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 11577
 $48 = _mbedtls_cipher_update($10, $12, $4, $12, $14) | 0; //@line 11578
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 572; //@line 11581
  $49 = $ReallocAsyncCtx + 4 | 0; //@line 11582
  HEAP32[$49 >> 2] = $24; //@line 11583
  $50 = $ReallocAsyncCtx + 8 | 0; //@line 11584
  HEAP32[$50 >> 2] = $4; //@line 11585
  $51 = $ReallocAsyncCtx + 12 | 0; //@line 11586
  HEAP32[$51 >> 2] = $23; //@line 11587
  $52 = $ReallocAsyncCtx + 16 | 0; //@line 11588
  HEAP32[$52 >> 2] = 1; //@line 11589
  $53 = $ReallocAsyncCtx + 20 | 0; //@line 11590
  HEAP32[$53 >> 2] = $27; //@line 11591
  $54 = $ReallocAsyncCtx + 24 | 0; //@line 11592
  HEAP32[$54 >> 2] = $16; //@line 11593
  $55 = $ReallocAsyncCtx + 28 | 0; //@line 11594
  HEAP32[$55 >> 2] = $2; //@line 11595
  $56 = $ReallocAsyncCtx + 32 | 0; //@line 11596
  HEAP32[$56 >> 2] = $18; //@line 11597
  $57 = $ReallocAsyncCtx + 36 | 0; //@line 11598
  HEAP32[$57 >> 2] = $10; //@line 11599
  $58 = $ReallocAsyncCtx + 40 | 0; //@line 11600
  HEAP32[$58 >> 2] = $12; //@line 11601
  $59 = $ReallocAsyncCtx + 44 | 0; //@line 11602
  HEAP32[$59 >> 2] = $14; //@line 11603
  sp = STACKTOP; //@line 11604
  return;
 }
 HEAP32[___async_retval >> 2] = $48; //@line 11608
 ___async_unwind = 0; //@line 11609
 HEAP32[$ReallocAsyncCtx >> 2] = 572; //@line 11610
 $49 = $ReallocAsyncCtx + 4 | 0; //@line 11611
 HEAP32[$49 >> 2] = $24; //@line 11612
 $50 = $ReallocAsyncCtx + 8 | 0; //@line 11613
 HEAP32[$50 >> 2] = $4; //@line 11614
 $51 = $ReallocAsyncCtx + 12 | 0; //@line 11615
 HEAP32[$51 >> 2] = $23; //@line 11616
 $52 = $ReallocAsyncCtx + 16 | 0; //@line 11617
 HEAP32[$52 >> 2] = 1; //@line 11618
 $53 = $ReallocAsyncCtx + 20 | 0; //@line 11619
 HEAP32[$53 >> 2] = $27; //@line 11620
 $54 = $ReallocAsyncCtx + 24 | 0; //@line 11621
 HEAP32[$54 >> 2] = $16; //@line 11622
 $55 = $ReallocAsyncCtx + 28 | 0; //@line 11623
 HEAP32[$55 >> 2] = $2; //@line 11624
 $56 = $ReallocAsyncCtx + 32 | 0; //@line 11625
 HEAP32[$56 >> 2] = $18; //@line 11626
 $57 = $ReallocAsyncCtx + 36 | 0; //@line 11627
 HEAP32[$57 >> 2] = $10; //@line 11628
 $58 = $ReallocAsyncCtx + 40 | 0; //@line 11629
 HEAP32[$58 >> 2] = $12; //@line 11630
 $59 = $ReallocAsyncCtx + 44 | 0; //@line 11631
 HEAP32[$59 >> 2] = $14; //@line 11632
 sp = STACKTOP; //@line 11633
 return;
}
function __ZN7LoRaPHY13apply_cf_listEPKhh__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $42 = 0, $44 = 0, $45 = 0, $6 = 0, $70 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 24111
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24113
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 24115
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24117
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24119
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24121
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24123
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24125
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24127
 $18 = HEAP8[$0 + 36 >> 0] | 0; //@line 24129
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 24131
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 24133
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 24135
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 24137
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 24139
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 24141
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 24143
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 24145
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 24147
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 24149
 if (HEAP8[___async_retval >> 0] & 1) {
  $70 = $8; //@line 24154
 } else {
  $44 = $8 + 1 | 0; //@line 24156
  if (($44 | 0) < (HEAPU8[$20 >> 0] | 0 | 0)) {
   $42 = HEAP32[(HEAP32[$34 >> 2] | 0) + 76 >> 2] | 0; //@line 24163
   $ReallocAsyncCtx = _emscripten_realloc_async_context(80) | 0; //@line 24165
   $45 = FUNCTION_TABLE_iiii[$42 & 31]($14, $36, $44 & 255) | 0; //@line 24166
   if (!___async) {
    HEAP8[___async_retval >> 0] = $45 & 1; //@line 24171
    ___async_unwind = 0; //@line 24172
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 497; //@line 24174
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 24176
   HEAP8[$ReallocAsyncCtx + 8 >> 0] = $4; //@line 24178
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 24180
   HEAP32[$ReallocAsyncCtx + 16 >> 2] = $44; //@line 24182
   HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 24184
   HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 24186
   HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 24188
   HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 24190
   HEAP8[$ReallocAsyncCtx + 36 >> 0] = $18; //@line 24192
   HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 24194
   HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 24196
   HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 24198
   HEAP32[$ReallocAsyncCtx + 52 >> 2] = $26; //@line 24200
   HEAP32[$ReallocAsyncCtx + 56 >> 2] = $28; //@line 24202
   HEAP32[$ReallocAsyncCtx + 60 >> 2] = $30; //@line 24204
   HEAP32[$ReallocAsyncCtx + 64 >> 2] = $32; //@line 24206
   HEAP32[$ReallocAsyncCtx + 68 >> 2] = $34; //@line 24208
   HEAP32[$ReallocAsyncCtx + 72 >> 2] = $36; //@line 24210
   HEAP32[$ReallocAsyncCtx + 76 >> 2] = $38; //@line 24212
   sp = STACKTOP; //@line 24213
   return;
  } else {
   $70 = -1; //@line 24216
  }
 }
 HEAP8[$10 >> 0] = $70; //@line 24220
 $73 = HEAP32[(HEAP32[$12 >> 2] | 0) + 60 >> 2] | 0; //@line 24223
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(72) | 0; //@line 24224
 FUNCTION_TABLE_iiii[$73 & 31]($14, $16, $18) | 0; //@line 24225
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 498; //@line 24228
  $74 = $ReallocAsyncCtx2 + 4 | 0; //@line 24229
  HEAP32[$74 >> 2] = $2; //@line 24230
  $75 = $ReallocAsyncCtx2 + 8 | 0; //@line 24231
  HEAP8[$75 >> 0] = $4; //@line 24232
  $76 = $ReallocAsyncCtx2 + 12 | 0; //@line 24233
  HEAP32[$76 >> 2] = $6; //@line 24234
  $77 = $ReallocAsyncCtx2 + 16 | 0; //@line 24235
  HEAP32[$77 >> 2] = $10; //@line 24236
  $78 = $ReallocAsyncCtx2 + 20 | 0; //@line 24237
  HEAP32[$78 >> 2] = $12; //@line 24238
  $79 = $ReallocAsyncCtx2 + 24 | 0; //@line 24239
  HEAP32[$79 >> 2] = $14; //@line 24240
  $80 = $ReallocAsyncCtx2 + 28 | 0; //@line 24241
  HEAP32[$80 >> 2] = $16; //@line 24242
  $81 = $ReallocAsyncCtx2 + 32 | 0; //@line 24243
  HEAP32[$81 >> 2] = $20; //@line 24244
  $82 = $ReallocAsyncCtx2 + 36 | 0; //@line 24245
  HEAP8[$82 >> 0] = $18; //@line 24246
  $83 = $ReallocAsyncCtx2 + 40 | 0; //@line 24247
  HEAP32[$83 >> 2] = $22; //@line 24248
  $84 = $ReallocAsyncCtx2 + 44 | 0; //@line 24249
  HEAP32[$84 >> 2] = $24; //@line 24250
  $85 = $ReallocAsyncCtx2 + 48 | 0; //@line 24251
  HEAP32[$85 >> 2] = $26; //@line 24252
  $86 = $ReallocAsyncCtx2 + 52 | 0; //@line 24253
  HEAP32[$86 >> 2] = $28; //@line 24254
  $87 = $ReallocAsyncCtx2 + 56 | 0; //@line 24255
  HEAP32[$87 >> 2] = $30; //@line 24256
  $88 = $ReallocAsyncCtx2 + 60 | 0; //@line 24257
  HEAP32[$88 >> 2] = $32; //@line 24258
  $89 = $ReallocAsyncCtx2 + 64 | 0; //@line 24259
  HEAP32[$89 >> 2] = $34; //@line 24260
  $90 = $ReallocAsyncCtx2 + 68 | 0; //@line 24261
  HEAP32[$90 >> 2] = $38; //@line 24262
  sp = STACKTOP; //@line 24263
  return;
 }
 ___async_unwind = 0; //@line 24266
 HEAP32[$ReallocAsyncCtx2 >> 2] = 498; //@line 24267
 $74 = $ReallocAsyncCtx2 + 4 | 0; //@line 24268
 HEAP32[$74 >> 2] = $2; //@line 24269
 $75 = $ReallocAsyncCtx2 + 8 | 0; //@line 24270
 HEAP8[$75 >> 0] = $4; //@line 24271
 $76 = $ReallocAsyncCtx2 + 12 | 0; //@line 24272
 HEAP32[$76 >> 2] = $6; //@line 24273
 $77 = $ReallocAsyncCtx2 + 16 | 0; //@line 24274
 HEAP32[$77 >> 2] = $10; //@line 24275
 $78 = $ReallocAsyncCtx2 + 20 | 0; //@line 24276
 HEAP32[$78 >> 2] = $12; //@line 24277
 $79 = $ReallocAsyncCtx2 + 24 | 0; //@line 24278
 HEAP32[$79 >> 2] = $14; //@line 24279
 $80 = $ReallocAsyncCtx2 + 28 | 0; //@line 24280
 HEAP32[$80 >> 2] = $16; //@line 24281
 $81 = $ReallocAsyncCtx2 + 32 | 0; //@line 24282
 HEAP32[$81 >> 2] = $20; //@line 24283
 $82 = $ReallocAsyncCtx2 + 36 | 0; //@line 24284
 HEAP8[$82 >> 0] = $18; //@line 24285
 $83 = $ReallocAsyncCtx2 + 40 | 0; //@line 24286
 HEAP32[$83 >> 2] = $22; //@line 24287
 $84 = $ReallocAsyncCtx2 + 44 | 0; //@line 24288
 HEAP32[$84 >> 2] = $24; //@line 24289
 $85 = $ReallocAsyncCtx2 + 48 | 0; //@line 24290
 HEAP32[$85 >> 2] = $26; //@line 24291
 $86 = $ReallocAsyncCtx2 + 52 | 0; //@line 24292
 HEAP32[$86 >> 2] = $28; //@line 24293
 $87 = $ReallocAsyncCtx2 + 56 | 0; //@line 24294
 HEAP32[$87 >> 2] = $30; //@line 24295
 $88 = $ReallocAsyncCtx2 + 60 | 0; //@line 24296
 HEAP32[$88 >> 2] = $32; //@line 24297
 $89 = $ReallocAsyncCtx2 + 64 | 0; //@line 24298
 HEAP32[$89 >> 2] = $34; //@line 24299
 $90 = $ReallocAsyncCtx2 + 68 | 0; //@line 24300
 HEAP32[$90 >> 2] = $38; //@line 24301
 sp = STACKTOP; //@line 24302
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $13 = 0, $17 = 0, $21 = 0, $23 = 0, $27 = 0, $3 = 0, $31 = 0, $33 = 0, $37 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx3 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx46 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 1270
 HEAP32[$0 >> 2] = 496; //@line 1271
 $1 = $0 + 1240 | 0; //@line 1272
 HEAP32[$1 >> 2] = 10224; //@line 1273
 __ZN4mbed6Ticker6detachEv($1); //@line 1274
 $3 = HEAP32[$0 + 1292 >> 2] | 0; //@line 1276
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 1282
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 1283
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 1280 | 0); //@line 1284
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 66; //@line 1287
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1289
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 1291
    sp = STACKTOP; //@line 1292
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 1295
    break;
   }
  }
 } while (0);
 $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1300
 __ZN4mbed10TimerEventD2Ev($1); //@line 1301
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 67; //@line 1304
  HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 1306
  sp = STACKTOP; //@line 1307
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 1310
 $11 = $0 + 1176 | 0; //@line 1311
 HEAP32[$11 >> 2] = 10224; //@line 1312
 __ZN4mbed6Ticker6detachEv($11); //@line 1313
 $13 = HEAP32[$0 + 1228 >> 2] | 0; //@line 1315
 do {
  if ($13 | 0) {
   $17 = HEAP32[$13 + 8 >> 2] | 0; //@line 1321
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 1322
   FUNCTION_TABLE_vi[$17 & 1023]($0 + 1216 | 0); //@line 1323
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 68; //@line 1326
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 1328
    HEAP32[$AsyncCtx3 + 8 >> 2] = $11; //@line 1330
    sp = STACKTOP; //@line 1331
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 1334
    break;
   }
  }
 } while (0);
 $AsyncCtx20 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1339
 __ZN4mbed10TimerEventD2Ev($11); //@line 1340
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 69; //@line 1343
  HEAP32[$AsyncCtx20 + 4 >> 2] = $0; //@line 1345
  sp = STACKTOP; //@line 1346
  return;
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 1349
 $21 = $0 + 1112 | 0; //@line 1350
 HEAP32[$21 >> 2] = 10224; //@line 1351
 __ZN4mbed6Ticker6detachEv($21); //@line 1352
 $23 = HEAP32[$0 + 1164 >> 2] | 0; //@line 1354
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 1360
   $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 1361
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 1152 | 0); //@line 1362
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 70; //@line 1365
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 1367
    HEAP32[$AsyncCtx7 + 8 >> 2] = $21; //@line 1369
    sp = STACKTOP; //@line 1370
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 1373
    break;
   }
  }
 } while (0);
 $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1378
 __ZN4mbed10TimerEventD2Ev($21); //@line 1379
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 71; //@line 1382
  HEAP32[$AsyncCtx17 + 4 >> 2] = $0; //@line 1384
  sp = STACKTOP; //@line 1385
  return;
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 1388
 $31 = $0 + 1048 | 0; //@line 1389
 HEAP32[$31 >> 2] = 10224; //@line 1390
 __ZN4mbed6Ticker6detachEv($31); //@line 1391
 $33 = HEAP32[$0 + 1100 >> 2] | 0; //@line 1393
 do {
  if ($33 | 0) {
   $37 = HEAP32[$33 + 8 >> 2] | 0; //@line 1399
   $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 1400
   FUNCTION_TABLE_vi[$37 & 1023]($0 + 1088 | 0); //@line 1401
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 72; //@line 1404
    HEAP32[$AsyncCtx11 + 4 >> 2] = $31; //@line 1406
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 1408
    sp = STACKTOP; //@line 1409
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 1412
    break;
   }
  }
 } while (0);
 $AsyncCtx14 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1417
 __ZN4mbed10TimerEventD2Ev($31); //@line 1418
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 73; //@line 1421
  HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 1423
  sp = STACKTOP; //@line 1424
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 1427
 $AsyncCtx46 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1429
 __ZN4mbed11InterruptInD2Ev($0 + 412 | 0); //@line 1430
 if (___async) {
  HEAP32[$AsyncCtx46 >> 2] = 74; //@line 1433
  HEAP32[$AsyncCtx46 + 4 >> 2] = $0; //@line 1435
  sp = STACKTOP; //@line 1436
  return;
 }
 _emscripten_free_async_context($AsyncCtx46 | 0); //@line 1439
 $AsyncCtx42 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1441
 __ZN4mbed11InterruptInD2Ev($0 + 340 | 0); //@line 1442
 if (___async) {
  HEAP32[$AsyncCtx42 >> 2] = 75; //@line 1445
  HEAP32[$AsyncCtx42 + 4 >> 2] = $0; //@line 1447
  sp = STACKTOP; //@line 1448
  return;
 }
 _emscripten_free_async_context($AsyncCtx42 | 0); //@line 1451
 $AsyncCtx38 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1453
 __ZN4mbed11InterruptInD2Ev($0 + 268 | 0); //@line 1454
 if (___async) {
  HEAP32[$AsyncCtx38 >> 2] = 76; //@line 1457
  HEAP32[$AsyncCtx38 + 4 >> 2] = $0; //@line 1459
  sp = STACKTOP; //@line 1460
  return;
 }
 _emscripten_free_async_context($AsyncCtx38 | 0); //@line 1463
 $AsyncCtx34 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1465
 __ZN4mbed11InterruptInD2Ev($0 + 196 | 0); //@line 1466
 if (___async) {
  HEAP32[$AsyncCtx34 >> 2] = 77; //@line 1469
  HEAP32[$AsyncCtx34 + 4 >> 2] = $0; //@line 1471
  sp = STACKTOP; //@line 1472
  return;
 }
 _emscripten_free_async_context($AsyncCtx34 | 0); //@line 1475
 $AsyncCtx30 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1477
 __ZN4mbed11InterruptInD2Ev($0 + 124 | 0); //@line 1478
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 78; //@line 1481
  HEAP32[$AsyncCtx30 + 4 >> 2] = $0; //@line 1483
  sp = STACKTOP; //@line 1484
  return;
 }
 _emscripten_free_async_context($AsyncCtx30 | 0); //@line 1487
 $AsyncCtx26 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1489
 __ZN4mbed11InterruptInD2Ev($0 + 52 | 0); //@line 1490
 if (___async) {
  HEAP32[$AsyncCtx26 >> 2] = 79; //@line 1493
  sp = STACKTOP; //@line 1494
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx26 | 0); //@line 1497
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$pre$i = 0, $10 = 0, $16 = 0, $19 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $35 = 0, $39 = 0, $4 = 0, $42 = 0, $5 = 0, $52 = 0, $55 = 0, $6 = 0, $60 = 0, $63 = 0, $67 = 0, $70 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 7447
 STACKTOP = STACKTOP + 48 | 0; //@line 7448
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 7448
 $3 = sp + 16 | 0; //@line 7449
 $4 = sp; //@line 7450
 $5 = $1 + 12 | 0; //@line 7451
 $6 = HEAP32[$5 >> 2] | 0; //@line 7452
 do {
  if (!$6) {
   $8 = $4 + 12 | 0; //@line 7456
   HEAP32[$8 >> 2] = 0; //@line 7457
   $27 = 0; //@line 7458
   $35 = $8; //@line 7458
  } else {
   $10 = HEAP32[$6 + 4 >> 2] | 0; //@line 7461
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 7462
   FUNCTION_TABLE_vii[$10 & 15]($4, $1); //@line 7463
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 251; //@line 7466
    HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 7468
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 7470
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 7472
    HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 7474
    HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 7476
    sp = STACKTOP; //@line 7477
    STACKTOP = sp; //@line 7478
    return 0; //@line 7478
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 7480
   $$pre$i = HEAP32[$5 >> 2] | 0; //@line 7481
   $16 = $4 + 12 | 0; //@line 7482
   HEAP32[$16 >> 2] = $$pre$i; //@line 7483
   if (!$$pre$i) {
    $27 = 0; //@line 7486
    $35 = $16; //@line 7486
   } else {
    $19 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 7490
    $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 7491
    FUNCTION_TABLE_vii[$19 & 15]($3, $4); //@line 7492
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 252; //@line 7495
     HEAP32[$AsyncCtx2 + 4 >> 2] = $16; //@line 7497
     HEAP32[$AsyncCtx2 + 8 >> 2] = $3; //@line 7499
     HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 7501
     HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 7503
     HEAP32[$AsyncCtx2 + 20 >> 2] = $16; //@line 7505
     HEAP32[$AsyncCtx2 + 24 >> 2] = $4; //@line 7507
     sp = STACKTOP; //@line 7508
     STACKTOP = sp; //@line 7509
     return 0; //@line 7509
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7511
     $27 = HEAP32[$16 >> 2] | 0; //@line 7513
     $35 = $16; //@line 7513
     break;
    }
   }
  }
 } while (0);
 $26 = $3 + 12 | 0; //@line 7519
 HEAP32[$26 >> 2] = $27; //@line 7520
 $28 = $3 + 16 | 0; //@line 7521
 HEAP32[$28 >> 2] = $2; //@line 7522
 $AsyncCtx18 = _emscripten_alloc_async_context(32, sp) | 0; //@line 7523
 $29 = _equeue_alloc($0, 20) | 0; //@line 7524
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 253; //@line 7527
  HEAP32[$AsyncCtx18 + 4 >> 2] = $26; //@line 7529
  HEAP32[$AsyncCtx18 + 8 >> 2] = $28; //@line 7531
  HEAP32[$AsyncCtx18 + 12 >> 2] = $0; //@line 7533
  HEAP32[$AsyncCtx18 + 16 >> 2] = $26; //@line 7535
  HEAP32[$AsyncCtx18 + 20 >> 2] = $35; //@line 7537
  HEAP32[$AsyncCtx18 + 24 >> 2] = $3; //@line 7539
  HEAP32[$AsyncCtx18 + 28 >> 2] = $4; //@line 7541
  sp = STACKTOP; //@line 7542
  STACKTOP = sp; //@line 7543
  return 0; //@line 7543
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 7545
 do {
  if (!$29) {
   $$0$i = 0; //@line 7549
  } else {
   $39 = HEAP32[$26 >> 2] | 0; //@line 7551
   do {
    if (!$39) {
     $52 = 0; //@line 7555
    } else {
     $42 = HEAP32[$39 + 4 >> 2] | 0; //@line 7558
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 7559
     FUNCTION_TABLE_vii[$42 & 15]($29, $3); //@line 7560
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 254; //@line 7563
      HEAP32[$AsyncCtx5 + 4 >> 2] = $26; //@line 7565
      HEAP32[$AsyncCtx5 + 8 >> 2] = $29; //@line 7567
      HEAP32[$AsyncCtx5 + 12 >> 2] = $28; //@line 7569
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 7571
      HEAP32[$AsyncCtx5 + 20 >> 2] = $26; //@line 7573
      HEAP32[$AsyncCtx5 + 24 >> 2] = $35; //@line 7575
      HEAP32[$AsyncCtx5 + 28 >> 2] = $3; //@line 7577
      HEAP32[$AsyncCtx5 + 32 >> 2] = $4; //@line 7579
      sp = STACKTOP; //@line 7580
      STACKTOP = sp; //@line 7581
      return 0; //@line 7581
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 7583
      $52 = HEAP32[$26 >> 2] | 0; //@line 7585
      break;
     }
    }
   } while (0);
   HEAP32[$29 + 12 >> 2] = $52; //@line 7591
   HEAP32[$29 + 16 >> 2] = HEAP32[$28 >> 2]; //@line 7594
   _equeue_event_dtor($29, 255); //@line 7595
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7596
   $55 = _equeue_post($0, 256, $29) | 0; //@line 7597
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 257; //@line 7600
    HEAP32[$AsyncCtx15 + 4 >> 2] = $26; //@line 7602
    HEAP32[$AsyncCtx15 + 8 >> 2] = $35; //@line 7604
    HEAP32[$AsyncCtx15 + 12 >> 2] = $3; //@line 7606
    HEAP32[$AsyncCtx15 + 16 >> 2] = $4; //@line 7608
    sp = STACKTOP; //@line 7609
    STACKTOP = sp; //@line 7610
    return 0; //@line 7610
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 7612
    $$0$i = $55; //@line 7613
    break;
   }
  }
 } while (0);
 $60 = HEAP32[$26 >> 2] | 0; //@line 7618
 do {
  if ($60 | 0) {
   $63 = HEAP32[$60 + 8 >> 2] | 0; //@line 7623
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7624
   FUNCTION_TABLE_vi[$63 & 1023]($3); //@line 7625
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 258; //@line 7628
    HEAP32[$AsyncCtx8 + 4 >> 2] = $35; //@line 7630
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 7632
    HEAP32[$AsyncCtx8 + 12 >> 2] = $4; //@line 7634
    sp = STACKTOP; //@line 7635
    STACKTOP = sp; //@line 7636
    return 0; //@line 7636
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 7638
    break;
   }
  }
 } while (0);
 $67 = HEAP32[$35 >> 2] | 0; //@line 7643
 if (!$67) {
  STACKTOP = sp; //@line 7646
  return $$0$i | 0; //@line 7646
 }
 $70 = HEAP32[$67 + 8 >> 2] | 0; //@line 7649
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7650
 FUNCTION_TABLE_vi[$70 & 1023]($4); //@line 7651
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 259; //@line 7654
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 7656
  sp = STACKTOP; //@line 7657
  STACKTOP = sp; //@line 7658
  return 0; //@line 7658
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 7660
 STACKTOP = sp; //@line 7661
 return $$0$i | 0; //@line 7661
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_366($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 28323
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28325
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28327
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28329
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28331
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28335
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28337
 $15 = $12 + 12 | 0; //@line 28338
 HEAP32[$12 >> 2] = 172; //@line 28339
 HEAP32[$12 + 4 >> 2] = 0; //@line 28341
 HEAP32[$12 + 8 >> 2] = $4; //@line 28343
 HEAP32[$15 >> 2] = 808; //@line 28344
 $16 = $4 + 2432 | 0; //@line 28345
 if (($16 | 0) == ($12 | 0)) {
  $43 = HEAP32[204] | 0; //@line 28349
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(28) | 0; //@line 28350
  FUNCTION_TABLE_vi[$43 & 1023]($12); //@line 28351
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 175; //@line 28354
   $44 = $ReallocAsyncCtx9 + 4 | 0; //@line 28355
   HEAP32[$44 >> 2] = $12; //@line 28356
   $45 = $ReallocAsyncCtx9 + 8 | 0; //@line 28357
   HEAP32[$45 >> 2] = $2; //@line 28358
   $46 = $ReallocAsyncCtx9 + 12 | 0; //@line 28359
   HEAP32[$46 >> 2] = $4; //@line 28360
   $47 = $ReallocAsyncCtx9 + 16 | 0; //@line 28361
   HEAP32[$47 >> 2] = $6; //@line 28362
   $48 = $ReallocAsyncCtx9 + 20 | 0; //@line 28363
   HEAP32[$48 >> 2] = $8; //@line 28364
   $49 = $ReallocAsyncCtx9 + 24 | 0; //@line 28365
   HEAP32[$49 >> 2] = $14; //@line 28366
   sp = STACKTOP; //@line 28367
   return;
  }
  ___async_unwind = 0; //@line 28370
  HEAP32[$ReallocAsyncCtx9 >> 2] = 175; //@line 28371
  $44 = $ReallocAsyncCtx9 + 4 | 0; //@line 28372
  HEAP32[$44 >> 2] = $12; //@line 28373
  $45 = $ReallocAsyncCtx9 + 8 | 0; //@line 28374
  HEAP32[$45 >> 2] = $2; //@line 28375
  $46 = $ReallocAsyncCtx9 + 12 | 0; //@line 28376
  HEAP32[$46 >> 2] = $4; //@line 28377
  $47 = $ReallocAsyncCtx9 + 16 | 0; //@line 28378
  HEAP32[$47 >> 2] = $6; //@line 28379
  $48 = $ReallocAsyncCtx9 + 20 | 0; //@line 28380
  HEAP32[$48 >> 2] = $8; //@line 28381
  $49 = $ReallocAsyncCtx9 + 24 | 0; //@line 28382
  HEAP32[$49 >> 2] = $14; //@line 28383
  sp = STACKTOP; //@line 28384
  return;
 }
 $18 = $4 + 2444 | 0; //@line 28387
 $19 = HEAP32[$18 >> 2] | 0; //@line 28388
 if (!$19) {
  $33 = HEAP32[203] | 0; //@line 28392
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 28393
  FUNCTION_TABLE_vii[$33 & 15]($16, $12); //@line 28394
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 174; //@line 28397
   $34 = $ReallocAsyncCtx8 + 4 | 0; //@line 28398
   HEAP32[$34 >> 2] = $12; //@line 28399
   $35 = $ReallocAsyncCtx8 + 8 | 0; //@line 28400
   HEAP32[$35 >> 2] = $2; //@line 28401
   $36 = $ReallocAsyncCtx8 + 12 | 0; //@line 28402
   HEAP32[$36 >> 2] = $4; //@line 28403
   $37 = $ReallocAsyncCtx8 + 16 | 0; //@line 28404
   HEAP32[$37 >> 2] = $15; //@line 28405
   $38 = $ReallocAsyncCtx8 + 20 | 0; //@line 28406
   HEAP32[$38 >> 2] = $18; //@line 28407
   $39 = $ReallocAsyncCtx8 + 24 | 0; //@line 28408
   HEAP32[$39 >> 2] = $6; //@line 28409
   $40 = $ReallocAsyncCtx8 + 28 | 0; //@line 28410
   HEAP32[$40 >> 2] = $8; //@line 28411
   $41 = $ReallocAsyncCtx8 + 32 | 0; //@line 28412
   HEAP32[$41 >> 2] = $14; //@line 28413
   sp = STACKTOP; //@line 28414
   return;
  }
  ___async_unwind = 0; //@line 28417
  HEAP32[$ReallocAsyncCtx8 >> 2] = 174; //@line 28418
  $34 = $ReallocAsyncCtx8 + 4 | 0; //@line 28419
  HEAP32[$34 >> 2] = $12; //@line 28420
  $35 = $ReallocAsyncCtx8 + 8 | 0; //@line 28421
  HEAP32[$35 >> 2] = $2; //@line 28422
  $36 = $ReallocAsyncCtx8 + 12 | 0; //@line 28423
  HEAP32[$36 >> 2] = $4; //@line 28424
  $37 = $ReallocAsyncCtx8 + 16 | 0; //@line 28425
  HEAP32[$37 >> 2] = $15; //@line 28426
  $38 = $ReallocAsyncCtx8 + 20 | 0; //@line 28427
  HEAP32[$38 >> 2] = $18; //@line 28428
  $39 = $ReallocAsyncCtx8 + 24 | 0; //@line 28429
  HEAP32[$39 >> 2] = $6; //@line 28430
  $40 = $ReallocAsyncCtx8 + 28 | 0; //@line 28431
  HEAP32[$40 >> 2] = $8; //@line 28432
  $41 = $ReallocAsyncCtx8 + 32 | 0; //@line 28433
  HEAP32[$41 >> 2] = $14; //@line 28434
  sp = STACKTOP; //@line 28435
  return;
 } else {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 28439
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(40) | 0; //@line 28440
  FUNCTION_TABLE_vi[$22 & 1023]($16); //@line 28441
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 173; //@line 28444
   $23 = $ReallocAsyncCtx7 + 4 | 0; //@line 28445
   HEAP32[$23 >> 2] = $12; //@line 28446
   $24 = $ReallocAsyncCtx7 + 8 | 0; //@line 28447
   HEAP32[$24 >> 2] = $2; //@line 28448
   $25 = $ReallocAsyncCtx7 + 12 | 0; //@line 28449
   HEAP32[$25 >> 2] = $4; //@line 28450
   $26 = $ReallocAsyncCtx7 + 16 | 0; //@line 28451
   HEAP32[$26 >> 2] = $18; //@line 28452
   $27 = $ReallocAsyncCtx7 + 20 | 0; //@line 28453
   HEAP32[$27 >> 2] = $15; //@line 28454
   $28 = $ReallocAsyncCtx7 + 24 | 0; //@line 28455
   HEAP32[$28 >> 2] = $16; //@line 28456
   $29 = $ReallocAsyncCtx7 + 28 | 0; //@line 28457
   HEAP32[$29 >> 2] = $6; //@line 28458
   $30 = $ReallocAsyncCtx7 + 32 | 0; //@line 28459
   HEAP32[$30 >> 2] = $8; //@line 28460
   $31 = $ReallocAsyncCtx7 + 36 | 0; //@line 28461
   HEAP32[$31 >> 2] = $14; //@line 28462
   sp = STACKTOP; //@line 28463
   return;
  }
  ___async_unwind = 0; //@line 28466
  HEAP32[$ReallocAsyncCtx7 >> 2] = 173; //@line 28467
  $23 = $ReallocAsyncCtx7 + 4 | 0; //@line 28468
  HEAP32[$23 >> 2] = $12; //@line 28469
  $24 = $ReallocAsyncCtx7 + 8 | 0; //@line 28470
  HEAP32[$24 >> 2] = $2; //@line 28471
  $25 = $ReallocAsyncCtx7 + 12 | 0; //@line 28472
  HEAP32[$25 >> 2] = $4; //@line 28473
  $26 = $ReallocAsyncCtx7 + 16 | 0; //@line 28474
  HEAP32[$26 >> 2] = $18; //@line 28475
  $27 = $ReallocAsyncCtx7 + 20 | 0; //@line 28476
  HEAP32[$27 >> 2] = $15; //@line 28477
  $28 = $ReallocAsyncCtx7 + 24 | 0; //@line 28478
  HEAP32[$28 >> 2] = $16; //@line 28479
  $29 = $ReallocAsyncCtx7 + 28 | 0; //@line 28480
  HEAP32[$29 >> 2] = $6; //@line 28481
  $30 = $ReallocAsyncCtx7 + 32 | 0; //@line 28482
  HEAP32[$30 >> 2] = $8; //@line 28483
  $31 = $ReallocAsyncCtx7 + 36 | 0; //@line 28484
  HEAP32[$31 >> 2] = $14; //@line 28485
  sp = STACKTOP; //@line 28486
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_131($0) {
 $0 = $0 | 0;
 var $$pre16 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 27554
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27556
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27558
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27560
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27562
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27564
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27566
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27568
 $$pre16 = HEAP32[$4 >> 2] | 0; //@line 27569
 if ($$pre16 | 0) {
  $17 = HEAP32[$$pre16 + 4 >> 2] | 0; //@line 27573
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 27574
  FUNCTION_TABLE_vii[$17 & 15]($12, $14); //@line 27575
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 335; //@line 27578
   $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 27579
   HEAP32[$18 >> 2] = $2; //@line 27580
   $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 27581
   HEAP32[$19 >> 2] = $4; //@line 27582
   $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 27583
   HEAP32[$20 >> 2] = $6; //@line 27584
   $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 27585
   HEAP32[$21 >> 2] = $8; //@line 27586
   $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 27587
   HEAP32[$22 >> 2] = $10; //@line 27588
   sp = STACKTOP; //@line 27589
   return;
  }
  ___async_unwind = 0; //@line 27592
  HEAP32[$ReallocAsyncCtx4 >> 2] = 335; //@line 27593
  $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 27594
  HEAP32[$18 >> 2] = $2; //@line 27595
  $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 27596
  HEAP32[$19 >> 2] = $4; //@line 27597
  $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 27598
  HEAP32[$20 >> 2] = $6; //@line 27599
  $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 27600
  HEAP32[$21 >> 2] = $8; //@line 27601
  $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 27602
  HEAP32[$22 >> 2] = $10; //@line 27603
  sp = STACKTOP; //@line 27604
  return;
 }
 HEAP32[$6 >> 2] = 0; //@line 27607
 $23 = $8 + 32 | 0; //@line 27608
 $24 = $8 + 44 | 0; //@line 27609
 $25 = HEAP32[$24 >> 2] | 0; //@line 27610
 if (!$25) {
  HEAP32[___async_retval >> 2] = 0; //@line 27614
  return;
 }
 $27 = $2 + 2516 | 0; //@line 27617
 if (($27 | 0) == ($23 | 0)) {
  $48 = HEAP32[$25 + 4 >> 2] | 0; //@line 27621
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 27622
  FUNCTION_TABLE_vii[$48 & 15]($10, $23); //@line 27623
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 338; //@line 27626
   $49 = $ReallocAsyncCtx7 + 4 | 0; //@line 27627
   HEAP32[$49 >> 2] = $24; //@line 27628
   $50 = $ReallocAsyncCtx7 + 8 | 0; //@line 27629
   HEAP32[$50 >> 2] = $2; //@line 27630
   $51 = $ReallocAsyncCtx7 + 12 | 0; //@line 27631
   HEAP32[$51 >> 2] = $10; //@line 27632
   sp = STACKTOP; //@line 27633
   return;
  }
  ___async_unwind = 0; //@line 27636
  HEAP32[$ReallocAsyncCtx7 >> 2] = 338; //@line 27637
  $49 = $ReallocAsyncCtx7 + 4 | 0; //@line 27638
  HEAP32[$49 >> 2] = $24; //@line 27639
  $50 = $ReallocAsyncCtx7 + 8 | 0; //@line 27640
  HEAP32[$50 >> 2] = $2; //@line 27641
  $51 = $ReallocAsyncCtx7 + 12 | 0; //@line 27642
  HEAP32[$51 >> 2] = $10; //@line 27643
  sp = STACKTOP; //@line 27644
  return;
 }
 $29 = $2 + 2528 | 0; //@line 27647
 $30 = HEAP32[$29 >> 2] | 0; //@line 27648
 if (!$30) {
  $41 = HEAP32[$25 + 4 >> 2] | 0; //@line 27652
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 27653
  FUNCTION_TABLE_vii[$41 & 15]($27, $23); //@line 27654
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 337; //@line 27657
   $42 = $ReallocAsyncCtx6 + 4 | 0; //@line 27658
   HEAP32[$42 >> 2] = $24; //@line 27659
   $43 = $ReallocAsyncCtx6 + 8 | 0; //@line 27660
   HEAP32[$43 >> 2] = $29; //@line 27661
   $44 = $ReallocAsyncCtx6 + 12 | 0; //@line 27662
   HEAP32[$44 >> 2] = $2; //@line 27663
   $45 = $ReallocAsyncCtx6 + 16 | 0; //@line 27664
   HEAP32[$45 >> 2] = $10; //@line 27665
   $46 = $ReallocAsyncCtx6 + 20 | 0; //@line 27666
   HEAP32[$46 >> 2] = $23; //@line 27667
   sp = STACKTOP; //@line 27668
   return;
  }
  ___async_unwind = 0; //@line 27671
  HEAP32[$ReallocAsyncCtx6 >> 2] = 337; //@line 27672
  $42 = $ReallocAsyncCtx6 + 4 | 0; //@line 27673
  HEAP32[$42 >> 2] = $24; //@line 27674
  $43 = $ReallocAsyncCtx6 + 8 | 0; //@line 27675
  HEAP32[$43 >> 2] = $29; //@line 27676
  $44 = $ReallocAsyncCtx6 + 12 | 0; //@line 27677
  HEAP32[$44 >> 2] = $2; //@line 27678
  $45 = $ReallocAsyncCtx6 + 16 | 0; //@line 27679
  HEAP32[$45 >> 2] = $10; //@line 27680
  $46 = $ReallocAsyncCtx6 + 20 | 0; //@line 27681
  HEAP32[$46 >> 2] = $23; //@line 27682
  sp = STACKTOP; //@line 27683
  return;
 } else {
  $33 = HEAP32[$30 + 8 >> 2] | 0; //@line 27687
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 27688
  FUNCTION_TABLE_vi[$33 & 1023]($27); //@line 27689
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 336; //@line 27692
   $34 = $ReallocAsyncCtx5 + 4 | 0; //@line 27693
   HEAP32[$34 >> 2] = $24; //@line 27694
   $35 = $ReallocAsyncCtx5 + 8 | 0; //@line 27695
   HEAP32[$35 >> 2] = $29; //@line 27696
   $36 = $ReallocAsyncCtx5 + 12 | 0; //@line 27697
   HEAP32[$36 >> 2] = $2; //@line 27698
   $37 = $ReallocAsyncCtx5 + 16 | 0; //@line 27699
   HEAP32[$37 >> 2] = $27; //@line 27700
   $38 = $ReallocAsyncCtx5 + 20 | 0; //@line 27701
   HEAP32[$38 >> 2] = $23; //@line 27702
   $39 = $ReallocAsyncCtx5 + 24 | 0; //@line 27703
   HEAP32[$39 >> 2] = $10; //@line 27704
   sp = STACKTOP; //@line 27705
   return;
  }
  ___async_unwind = 0; //@line 27708
  HEAP32[$ReallocAsyncCtx5 >> 2] = 336; //@line 27709
  $34 = $ReallocAsyncCtx5 + 4 | 0; //@line 27710
  HEAP32[$34 >> 2] = $24; //@line 27711
  $35 = $ReallocAsyncCtx5 + 8 | 0; //@line 27712
  HEAP32[$35 >> 2] = $29; //@line 27713
  $36 = $ReallocAsyncCtx5 + 12 | 0; //@line 27714
  HEAP32[$36 >> 2] = $2; //@line 27715
  $37 = $ReallocAsyncCtx5 + 16 | 0; //@line 27716
  HEAP32[$37 >> 2] = $27; //@line 27717
  $38 = $ReallocAsyncCtx5 + 20 | 0; //@line 27718
  HEAP32[$38 >> 2] = $23; //@line 27719
  $39 = $ReallocAsyncCtx5 + 24 | 0; //@line 27720
  HEAP32[$39 >> 2] = $10; //@line 27721
  sp = STACKTOP; //@line 27722
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_305($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $47 = 0, $48 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 10786
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10788
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10790
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10792
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10794
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10796
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10798
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 10800
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10802
 if ($AsyncRetVal | 0) {
  $17 = HEAP32[$6 >> 2] | 0; //@line 10805
  if (!$17) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 10809
   $30 = $AsyncRetVal + 16 | 0; //@line 10810
   HEAP32[$30 >> 2] = HEAP32[$12 >> 2]; //@line 10811
   HEAP32[$30 + 4 >> 2] = HEAP32[$12 + 4 >> 2]; //@line 10811
   HEAP8[$30 + 8 >> 0] = HEAP8[$12 + 8 >> 0] | 0; //@line 10811
   _equeue_event_dtor($AsyncRetVal, 285); //@line 10812
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 10813
   $31 = _equeue_post($14, 286, $AsyncRetVal) | 0; //@line 10814
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 287; //@line 10817
    $32 = $ReallocAsyncCtx6 + 4 | 0; //@line 10818
    HEAP32[$32 >> 2] = $6; //@line 10819
    $33 = $ReallocAsyncCtx6 + 8 | 0; //@line 10820
    HEAP32[$33 >> 2] = $2; //@line 10821
    $34 = $ReallocAsyncCtx6 + 12 | 0; //@line 10822
    HEAP32[$34 >> 2] = $8; //@line 10823
    $35 = $ReallocAsyncCtx6 + 16 | 0; //@line 10824
    HEAP32[$35 >> 2] = $4; //@line 10825
    sp = STACKTOP; //@line 10826
    return;
   }
   HEAP32[___async_retval >> 2] = $31; //@line 10830
   ___async_unwind = 0; //@line 10831
   HEAP32[$ReallocAsyncCtx6 >> 2] = 287; //@line 10832
   $32 = $ReallocAsyncCtx6 + 4 | 0; //@line 10833
   HEAP32[$32 >> 2] = $6; //@line 10834
   $33 = $ReallocAsyncCtx6 + 8 | 0; //@line 10835
   HEAP32[$33 >> 2] = $2; //@line 10836
   $34 = $ReallocAsyncCtx6 + 12 | 0; //@line 10837
   HEAP32[$34 >> 2] = $8; //@line 10838
   $35 = $ReallocAsyncCtx6 + 16 | 0; //@line 10839
   HEAP32[$35 >> 2] = $4; //@line 10840
   sp = STACKTOP; //@line 10841
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 10845
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 10846
   FUNCTION_TABLE_vii[$20 & 15]($AsyncRetVal, $8); //@line 10847
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 284; //@line 10850
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 10851
    HEAP32[$21 >> 2] = $10; //@line 10852
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 10853
    HEAP32[$22 >> 2] = $AsyncRetVal; //@line 10854
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 10855
    HEAP32[$23 >> 2] = $12; //@line 10856
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 10857
    HEAP32[$24 >> 2] = $14; //@line 10858
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 10859
    HEAP32[$25 >> 2] = $6; //@line 10860
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 10861
    HEAP32[$26 >> 2] = $2; //@line 10862
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 10863
    HEAP32[$27 >> 2] = $8; //@line 10864
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 10865
    HEAP32[$28 >> 2] = $4; //@line 10866
    sp = STACKTOP; //@line 10867
    return;
   }
   ___async_unwind = 0; //@line 10870
   HEAP32[$ReallocAsyncCtx3 >> 2] = 284; //@line 10871
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 10872
   HEAP32[$21 >> 2] = $10; //@line 10873
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 10874
   HEAP32[$22 >> 2] = $AsyncRetVal; //@line 10875
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 10876
   HEAP32[$23 >> 2] = $12; //@line 10877
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 10878
   HEAP32[$24 >> 2] = $14; //@line 10879
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 10880
   HEAP32[$25 >> 2] = $6; //@line 10881
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 10882
   HEAP32[$26 >> 2] = $2; //@line 10883
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 10884
   HEAP32[$27 >> 2] = $8; //@line 10885
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 10886
   HEAP32[$28 >> 2] = $4; //@line 10887
   sp = STACKTOP; //@line 10888
   return;
  }
 }
 $37 = HEAP32[$6 >> 2] | 0; //@line 10892
 if ($37 | 0) {
  $40 = HEAP32[$37 + 8 >> 2] | 0; //@line 10896
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 10897
  FUNCTION_TABLE_vi[$40 & 1023]($8); //@line 10898
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 288; //@line 10901
   $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 10902
   HEAP32[$41 >> 2] = $2; //@line 10903
   $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 10904
   HEAP32[$42 >> 2] = 0; //@line 10905
   $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 10906
   HEAP32[$43 >> 2] = $4; //@line 10907
   sp = STACKTOP; //@line 10908
   return;
  }
  ___async_unwind = 0; //@line 10911
  HEAP32[$ReallocAsyncCtx4 >> 2] = 288; //@line 10912
  $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 10913
  HEAP32[$41 >> 2] = $2; //@line 10914
  $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 10915
  HEAP32[$42 >> 2] = 0; //@line 10916
  $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 10917
  HEAP32[$43 >> 2] = $4; //@line 10918
  sp = STACKTOP; //@line 10919
  return;
 }
 $44 = HEAP32[$2 >> 2] | 0; //@line 10922
 if (!$44) {
  HEAP32[___async_retval >> 2] = 0; //@line 10926
  return;
 }
 $47 = HEAP32[$44 + 8 >> 2] | 0; //@line 10930
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 10931
 FUNCTION_TABLE_vi[$47 & 1023]($4); //@line 10932
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 289; //@line 10935
  $48 = $ReallocAsyncCtx5 + 4 | 0; //@line 10936
  HEAP32[$48 >> 2] = 0; //@line 10937
  sp = STACKTOP; //@line 10938
  return;
 }
 ___async_unwind = 0; //@line 10941
 HEAP32[$ReallocAsyncCtx5 >> 2] = 289; //@line 10942
 $48 = $ReallocAsyncCtx5 + 4 | 0; //@line 10943
 HEAP32[$48 >> 2] = 0; //@line 10944
 sp = STACKTOP; //@line 10945
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_157($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 29241
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29243
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29245
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29247
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29249
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29251
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29253
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29255
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29257
 if ($AsyncRetVal | 0) {
  $17 = HEAP32[$8 >> 2] | 0; //@line 29260
  if (!$17) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 29264
   HEAP32[$AsyncRetVal + 16 >> 2] = HEAP32[$4 >> 2]; //@line 29267
   _equeue_event_dtor($AsyncRetVal, 255); //@line 29268
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 29269
   $32 = _equeue_post($6, 256, $AsyncRetVal) | 0; //@line 29270
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 257; //@line 29273
    $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 29274
    HEAP32[$33 >> 2] = $8; //@line 29275
    $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 29276
    HEAP32[$34 >> 2] = $10; //@line 29277
    $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 29278
    HEAP32[$35 >> 2] = $12; //@line 29279
    $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 29280
    HEAP32[$36 >> 2] = $14; //@line 29281
    sp = STACKTOP; //@line 29282
    return;
   }
   HEAP32[___async_retval >> 2] = $32; //@line 29286
   ___async_unwind = 0; //@line 29287
   HEAP32[$ReallocAsyncCtx6 >> 2] = 257; //@line 29288
   $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 29289
   HEAP32[$33 >> 2] = $8; //@line 29290
   $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 29291
   HEAP32[$34 >> 2] = $10; //@line 29292
   $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 29293
   HEAP32[$35 >> 2] = $12; //@line 29294
   $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 29295
   HEAP32[$36 >> 2] = $14; //@line 29296
   sp = STACKTOP; //@line 29297
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 29301
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 29302
   FUNCTION_TABLE_vii[$20 & 15]($AsyncRetVal, $12); //@line 29303
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 254; //@line 29306
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 29307
    HEAP32[$21 >> 2] = $2; //@line 29308
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 29309
    HEAP32[$22 >> 2] = $AsyncRetVal; //@line 29310
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 29311
    HEAP32[$23 >> 2] = $4; //@line 29312
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 29313
    HEAP32[$24 >> 2] = $6; //@line 29314
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 29315
    HEAP32[$25 >> 2] = $8; //@line 29316
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 29317
    HEAP32[$26 >> 2] = $10; //@line 29318
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 29319
    HEAP32[$27 >> 2] = $12; //@line 29320
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 29321
    HEAP32[$28 >> 2] = $14; //@line 29322
    sp = STACKTOP; //@line 29323
    return;
   }
   ___async_unwind = 0; //@line 29326
   HEAP32[$ReallocAsyncCtx3 >> 2] = 254; //@line 29327
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 29328
   HEAP32[$21 >> 2] = $2; //@line 29329
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 29330
   HEAP32[$22 >> 2] = $AsyncRetVal; //@line 29331
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 29332
   HEAP32[$23 >> 2] = $4; //@line 29333
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 29334
   HEAP32[$24 >> 2] = $6; //@line 29335
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 29336
   HEAP32[$25 >> 2] = $8; //@line 29337
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 29338
   HEAP32[$26 >> 2] = $10; //@line 29339
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 29340
   HEAP32[$27 >> 2] = $12; //@line 29341
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 29342
   HEAP32[$28 >> 2] = $14; //@line 29343
   sp = STACKTOP; //@line 29344
   return;
  }
 }
 $38 = HEAP32[$8 >> 2] | 0; //@line 29348
 if ($38 | 0) {
  $41 = HEAP32[$38 + 8 >> 2] | 0; //@line 29352
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 29353
  FUNCTION_TABLE_vi[$41 & 1023]($12); //@line 29354
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 258; //@line 29357
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 29358
   HEAP32[$42 >> 2] = $10; //@line 29359
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 29360
   HEAP32[$43 >> 2] = 0; //@line 29361
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 29362
   HEAP32[$44 >> 2] = $14; //@line 29363
   sp = STACKTOP; //@line 29364
   return;
  }
  ___async_unwind = 0; //@line 29367
  HEAP32[$ReallocAsyncCtx4 >> 2] = 258; //@line 29368
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 29369
  HEAP32[$42 >> 2] = $10; //@line 29370
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 29371
  HEAP32[$43 >> 2] = 0; //@line 29372
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 29373
  HEAP32[$44 >> 2] = $14; //@line 29374
  sp = STACKTOP; //@line 29375
  return;
 }
 $45 = HEAP32[$10 >> 2] | 0; //@line 29378
 if (!$45) {
  HEAP32[___async_retval >> 2] = 0; //@line 29382
  return;
 }
 $48 = HEAP32[$45 + 8 >> 2] | 0; //@line 29386
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 29387
 FUNCTION_TABLE_vi[$48 & 1023]($14); //@line 29388
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 259; //@line 29391
  $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 29392
  HEAP32[$49 >> 2] = 0; //@line 29393
  sp = STACKTOP; //@line 29394
  return;
 }
 ___async_unwind = 0; //@line 29397
 HEAP32[$ReallocAsyncCtx5 >> 2] = 259; //@line 29398
 $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 29399
 HEAP32[$49 >> 2] = 0; //@line 29400
 sp = STACKTOP; //@line 29401
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $17 = 0, $2 = 0, $30 = 0, $35 = 0, $36 = 0, $44 = 0, $46 = 0, $61 = 0, $70 = 0, $79 = 0, $82 = 0, $88 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 11008
 $1 = __ZN18LoRaWANTimeHandler16get_current_timeEv($0) | 0; //@line 11009
 $2 = $0 + 2364 | 0; //@line 11010
 do {
  if ((HEAP32[$2 >> 2] | 0) == 2) {
   $AsyncCtx23 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11016
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 11017
   if (___async) {
    HEAP32[$AsyncCtx23 >> 2] = 357; //@line 11020
    HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 11022
    HEAP32[$AsyncCtx23 + 8 >> 2] = $0; //@line 11024
    HEAP32[$AsyncCtx23 + 12 >> 2] = $2; //@line 11026
    HEAP32[$AsyncCtx23 + 16 >> 2] = $1; //@line 11028
    sp = STACKTOP; //@line 11029
    return;
   }
   _emscripten_free_async_context($AsyncCtx23 | 0); //@line 11032
   $17 = $0 + 1964 | 0; //@line 11035
   HEAP8[$17 >> 0] = HEAP8[$0 + 1182 >> 0] | 0; //@line 11036
   HEAP32[$0 + 1968 >> 2] = HEAP32[$0 + 1912 >> 2]; //@line 11040
   HEAP8[$0 + 1980 >> 0] = HEAP8[$0 + 1921 >> 0] | 0; //@line 11044
   HEAP8[$0 + 1981 >> 0] = HEAP8[$0 + 1173 >> 0] | 0; //@line 11048
   HEAP32[$0 + 1984 >> 2] = 1; //@line 11050
   $30 = $0 + 1982 | 0; //@line 11053
   HEAP8[$30 >> 0] = (HEAP32[$2 >> 2] | 0) == 2 & 1; //@line 11055
   HEAP8[$0 + 2010 >> 0] = HEAP8[$0 + 1965 >> 0] | 0; //@line 11059
   $35 = $0 + 4 | 0; //@line 11060
   $AsyncCtx19 = _emscripten_alloc_async_context(28, sp) | 0; //@line 11061
   $36 = __ZN7LoRaPHY9rx_configEP18rx_config_params_t($35, $17) | 0; //@line 11062
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 358; //@line 11065
    HEAP32[$AsyncCtx19 + 4 >> 2] = $30; //@line 11067
    HEAP32[$AsyncCtx19 + 8 >> 2] = $0; //@line 11069
    HEAP32[$AsyncCtx19 + 12 >> 2] = $0; //@line 11071
    HEAP32[$AsyncCtx19 + 16 >> 2] = $2; //@line 11073
    HEAP32[$AsyncCtx19 + 20 >> 2] = $1; //@line 11075
    HEAP32[$AsyncCtx19 + 24 >> 2] = $35; //@line 11077
    sp = STACKTOP; //@line 11078
    return;
   }
   _emscripten_free_async_context($AsyncCtx19 | 0); //@line 11081
   if ($36) {
    $44 = (HEAP8[$30 >> 0] | 0) != 0; //@line 11084
    $46 = HEAP32[$0 + 1888 >> 2] | 0; //@line 11086
    $AsyncCtx11 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11087
    __ZN7LoRaPHY15setup_rx_windowEbj($35, $44, $46); //@line 11088
    if (___async) {
     HEAP32[$AsyncCtx11 >> 2] = 359; //@line 11091
     HEAP32[$AsyncCtx11 + 4 >> 2] = $30; //@line 11093
     HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 11095
     HEAP32[$AsyncCtx11 + 12 >> 2] = $0; //@line 11097
     HEAP32[$AsyncCtx11 + 16 >> 2] = $2; //@line 11099
     HEAP32[$AsyncCtx11 + 20 >> 2] = $1; //@line 11101
     sp = STACKTOP; //@line 11102
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx11 | 0); //@line 11105
     HEAP32[$0 + 1168 >> 2] = HEAP8[$30 >> 0] | 0 ? 2 : 1; //@line 11110
     break;
    }
   }
  } else {
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11116
   __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 11117
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 356; //@line 11120
    HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 11122
    HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 11124
    HEAP32[$AsyncCtx15 + 12 >> 2] = $2; //@line 11126
    HEAP32[$AsyncCtx15 + 16 >> 2] = $1; //@line 11128
    sp = STACKTOP; //@line 11129
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 11132
    break;
   }
  }
 } while (0);
 do {
  if (!(HEAP8[$0 + 1175 >> 0] | 0)) {
   HEAP32[$0 + 2040 >> 2] = 0; //@line 11143
   HEAP32[$0 + 2076 >> 2] = 4; //@line 11145
  } else {
   $61 = HEAP32[$0 + 1772 >> 2] | 0; //@line 11149
   $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11150
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $0 + 1816 | 0, $61); //@line 11151
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 360; //@line 11154
    HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 11156
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 11158
    HEAP32[$AsyncCtx7 + 12 >> 2] = $0; //@line 11160
    HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 11162
    sp = STACKTOP; //@line 11163
    return;
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 11166
   do {
    if ((HEAP32[$2 >> 2] | 0) != 2) {
     $70 = HEAP32[$0 + 1776 >> 2] | 0; //@line 11173
     $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 11174
     __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $0 + 1836 | 0, $70); //@line 11175
     if (___async) {
      HEAP32[$AsyncCtx3 >> 2] = 361; //@line 11178
      HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 11180
      HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 11182
      HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 11184
      sp = STACKTOP; //@line 11185
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11188
      break;
     }
    }
   } while (0);
   if (HEAP8[$0 + 1177 >> 0] | 0) {
    $79 = HEAP32[$0 + 1776 >> 2] | 0; //@line 11199
    $82 = (__ZN7LoRaPHY15get_ack_timeoutEv($0 + 4 | 0) | 0) + $79 | 0; //@line 11202
    $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 11203
    __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $0 + 1856 | 0, $82); //@line 11204
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 362; //@line 11207
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 11209
     HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 11211
     sp = STACKTOP; //@line 11212
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 11215
     break;
    }
   }
  }
 } while (0);
 $88 = HEAP8[$0 + 1182 >> 0] | 0; //@line 11222
 HEAP8[$0 + 1183 >> 0] = $88; //@line 11224
 __ZN7LoRaPHY16set_last_tx_doneEhbj($0 + 4 | 0, $88, (HEAP8[$0 + 2360 >> 0] | 0) != 0, $1); //@line 11229
 HEAP32[$0 + 1780 >> 2] = $1; //@line 11231
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_369($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 28918
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28922
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28924
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28926
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28928
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28930
 $13 = $4 + 12 | 0; //@line 28931
 HEAP32[$4 >> 2] = 176; //@line 28932
 HEAP32[$4 + 4 >> 2] = 0; //@line 28934
 HEAP32[$4 + 8 >> 2] = $6; //@line 28936
 HEAP32[$13 >> 2] = 808; //@line 28937
 $14 = $6 + 2384 | 0; //@line 28938
 if (($14 | 0) == ($4 | 0)) {
  $39 = HEAP32[204] | 0; //@line 28942
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(24) | 0; //@line 28943
  FUNCTION_TABLE_vi[$39 & 1023]($4); //@line 28944
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 179; //@line 28947
   $40 = $ReallocAsyncCtx12 + 4 | 0; //@line 28948
   HEAP32[$40 >> 2] = $8; //@line 28949
   $41 = $ReallocAsyncCtx12 + 8 | 0; //@line 28950
   HEAP32[$41 >> 2] = $10; //@line 28951
   $42 = $ReallocAsyncCtx12 + 12 | 0; //@line 28952
   HEAP32[$42 >> 2] = $6; //@line 28953
   $43 = $ReallocAsyncCtx12 + 16 | 0; //@line 28954
   HEAP32[$43 >> 2] = $4; //@line 28955
   $44 = $ReallocAsyncCtx12 + 20 | 0; //@line 28956
   HEAP32[$44 >> 2] = $12; //@line 28957
   sp = STACKTOP; //@line 28958
   return;
  }
  ___async_unwind = 0; //@line 28961
  HEAP32[$ReallocAsyncCtx12 >> 2] = 179; //@line 28962
  $40 = $ReallocAsyncCtx12 + 4 | 0; //@line 28963
  HEAP32[$40 >> 2] = $8; //@line 28964
  $41 = $ReallocAsyncCtx12 + 8 | 0; //@line 28965
  HEAP32[$41 >> 2] = $10; //@line 28966
  $42 = $ReallocAsyncCtx12 + 12 | 0; //@line 28967
  HEAP32[$42 >> 2] = $6; //@line 28968
  $43 = $ReallocAsyncCtx12 + 16 | 0; //@line 28969
  HEAP32[$43 >> 2] = $4; //@line 28970
  $44 = $ReallocAsyncCtx12 + 20 | 0; //@line 28971
  HEAP32[$44 >> 2] = $12; //@line 28972
  sp = STACKTOP; //@line 28973
  return;
 }
 $16 = $6 + 2396 | 0; //@line 28976
 $17 = HEAP32[$16 >> 2] | 0; //@line 28977
 if (!$17) {
  $30 = HEAP32[203] | 0; //@line 28981
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(32) | 0; //@line 28982
  FUNCTION_TABLE_vii[$30 & 15]($14, $4); //@line 28983
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 178; //@line 28986
   $31 = $ReallocAsyncCtx11 + 4 | 0; //@line 28987
   HEAP32[$31 >> 2] = $8; //@line 28988
   $32 = $ReallocAsyncCtx11 + 8 | 0; //@line 28989
   HEAP32[$32 >> 2] = $10; //@line 28990
   $33 = $ReallocAsyncCtx11 + 12 | 0; //@line 28991
   HEAP32[$33 >> 2] = $6; //@line 28992
   $34 = $ReallocAsyncCtx11 + 16 | 0; //@line 28993
   HEAP32[$34 >> 2] = $13; //@line 28994
   $35 = $ReallocAsyncCtx11 + 20 | 0; //@line 28995
   HEAP32[$35 >> 2] = $16; //@line 28996
   $36 = $ReallocAsyncCtx11 + 24 | 0; //@line 28997
   HEAP32[$36 >> 2] = $4; //@line 28998
   $37 = $ReallocAsyncCtx11 + 28 | 0; //@line 28999
   HEAP32[$37 >> 2] = $12; //@line 29000
   sp = STACKTOP; //@line 29001
   return;
  }
  ___async_unwind = 0; //@line 29004
  HEAP32[$ReallocAsyncCtx11 >> 2] = 178; //@line 29005
  $31 = $ReallocAsyncCtx11 + 4 | 0; //@line 29006
  HEAP32[$31 >> 2] = $8; //@line 29007
  $32 = $ReallocAsyncCtx11 + 8 | 0; //@line 29008
  HEAP32[$32 >> 2] = $10; //@line 29009
  $33 = $ReallocAsyncCtx11 + 12 | 0; //@line 29010
  HEAP32[$33 >> 2] = $6; //@line 29011
  $34 = $ReallocAsyncCtx11 + 16 | 0; //@line 29012
  HEAP32[$34 >> 2] = $13; //@line 29013
  $35 = $ReallocAsyncCtx11 + 20 | 0; //@line 29014
  HEAP32[$35 >> 2] = $16; //@line 29015
  $36 = $ReallocAsyncCtx11 + 24 | 0; //@line 29016
  HEAP32[$36 >> 2] = $4; //@line 29017
  $37 = $ReallocAsyncCtx11 + 28 | 0; //@line 29018
  HEAP32[$37 >> 2] = $12; //@line 29019
  sp = STACKTOP; //@line 29020
  return;
 } else {
  $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 29024
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(36) | 0; //@line 29025
  FUNCTION_TABLE_vi[$20 & 1023]($14); //@line 29026
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 177; //@line 29029
   $21 = $ReallocAsyncCtx10 + 4 | 0; //@line 29030
   HEAP32[$21 >> 2] = $8; //@line 29031
   $22 = $ReallocAsyncCtx10 + 8 | 0; //@line 29032
   HEAP32[$22 >> 2] = $10; //@line 29033
   $23 = $ReallocAsyncCtx10 + 12 | 0; //@line 29034
   HEAP32[$23 >> 2] = $13; //@line 29035
   $24 = $ReallocAsyncCtx10 + 16 | 0; //@line 29036
   HEAP32[$24 >> 2] = $6; //@line 29037
   $25 = $ReallocAsyncCtx10 + 20 | 0; //@line 29038
   HEAP32[$25 >> 2] = $16; //@line 29039
   $26 = $ReallocAsyncCtx10 + 24 | 0; //@line 29040
   HEAP32[$26 >> 2] = $4; //@line 29041
   $27 = $ReallocAsyncCtx10 + 28 | 0; //@line 29042
   HEAP32[$27 >> 2] = $12; //@line 29043
   $28 = $ReallocAsyncCtx10 + 32 | 0; //@line 29044
   HEAP32[$28 >> 2] = $14; //@line 29045
   sp = STACKTOP; //@line 29046
   return;
  }
  ___async_unwind = 0; //@line 29049
  HEAP32[$ReallocAsyncCtx10 >> 2] = 177; //@line 29050
  $21 = $ReallocAsyncCtx10 + 4 | 0; //@line 29051
  HEAP32[$21 >> 2] = $8; //@line 29052
  $22 = $ReallocAsyncCtx10 + 8 | 0; //@line 29053
  HEAP32[$22 >> 2] = $10; //@line 29054
  $23 = $ReallocAsyncCtx10 + 12 | 0; //@line 29055
  HEAP32[$23 >> 2] = $13; //@line 29056
  $24 = $ReallocAsyncCtx10 + 16 | 0; //@line 29057
  HEAP32[$24 >> 2] = $6; //@line 29058
  $25 = $ReallocAsyncCtx10 + 20 | 0; //@line 29059
  HEAP32[$25 >> 2] = $16; //@line 29060
  $26 = $ReallocAsyncCtx10 + 24 | 0; //@line 29061
  HEAP32[$26 >> 2] = $4; //@line 29062
  $27 = $ReallocAsyncCtx10 + 28 | 0; //@line 29063
  HEAP32[$27 >> 2] = $12; //@line 29064
  $28 = $ReallocAsyncCtx10 + 32 | 0; //@line 29065
  HEAP32[$28 >> 2] = $14; //@line 29066
  sp = STACKTOP; //@line 29067
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_184($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 1682
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1684
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1686
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1688
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1690
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1692
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1694
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1696
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1698
 if ($AsyncRetVal | 0) {
  $17 = HEAP32[$8 >> 2] | 0; //@line 1701
  if (!$17) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 1705
   HEAP16[$AsyncRetVal + 16 >> 1] = HEAP16[$2 >> 1] | 0; //@line 1708
   _equeue_event_dtor($AsyncRetVal, 307); //@line 1709
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 1710
   $32 = _equeue_post($4, 308, $AsyncRetVal) | 0; //@line 1711
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 309; //@line 1714
    $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 1715
    HEAP32[$33 >> 2] = $8; //@line 1716
    $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 1717
    HEAP32[$34 >> 2] = $12; //@line 1718
    $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 1719
    HEAP32[$35 >> 2] = $6; //@line 1720
    $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 1721
    HEAP32[$36 >> 2] = $10; //@line 1722
    sp = STACKTOP; //@line 1723
    return;
   }
   HEAP32[___async_retval >> 2] = $32; //@line 1727
   ___async_unwind = 0; //@line 1728
   HEAP32[$ReallocAsyncCtx6 >> 2] = 309; //@line 1729
   $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 1730
   HEAP32[$33 >> 2] = $8; //@line 1731
   $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 1732
   HEAP32[$34 >> 2] = $12; //@line 1733
   $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 1734
   HEAP32[$35 >> 2] = $6; //@line 1735
   $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 1736
   HEAP32[$36 >> 2] = $10; //@line 1737
   sp = STACKTOP; //@line 1738
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 1742
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 1743
   FUNCTION_TABLE_vii[$20 & 15]($AsyncRetVal, $6); //@line 1744
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 306; //@line 1747
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 1748
    HEAP32[$21 >> 2] = $14; //@line 1749
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 1750
    HEAP32[$22 >> 2] = $AsyncRetVal; //@line 1751
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 1752
    HEAP32[$23 >> 2] = $2; //@line 1753
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 1754
    HEAP32[$24 >> 2] = $4; //@line 1755
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 1756
    HEAP32[$25 >> 2] = $8; //@line 1757
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 1758
    HEAP32[$26 >> 2] = $12; //@line 1759
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 1760
    HEAP32[$27 >> 2] = $6; //@line 1761
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 1762
    HEAP32[$28 >> 2] = $10; //@line 1763
    sp = STACKTOP; //@line 1764
    return;
   }
   ___async_unwind = 0; //@line 1767
   HEAP32[$ReallocAsyncCtx3 >> 2] = 306; //@line 1768
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 1769
   HEAP32[$21 >> 2] = $14; //@line 1770
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 1771
   HEAP32[$22 >> 2] = $AsyncRetVal; //@line 1772
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 1773
   HEAP32[$23 >> 2] = $2; //@line 1774
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 1775
   HEAP32[$24 >> 2] = $4; //@line 1776
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 1777
   HEAP32[$25 >> 2] = $8; //@line 1778
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 1779
   HEAP32[$26 >> 2] = $12; //@line 1780
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 1781
   HEAP32[$27 >> 2] = $6; //@line 1782
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 1783
   HEAP32[$28 >> 2] = $10; //@line 1784
   sp = STACKTOP; //@line 1785
   return;
  }
 }
 $38 = HEAP32[$8 >> 2] | 0; //@line 1789
 if ($38 | 0) {
  $41 = HEAP32[$38 + 8 >> 2] | 0; //@line 1793
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 1794
  FUNCTION_TABLE_vi[$41 & 1023]($6); //@line 1795
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 310; //@line 1798
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 1799
   HEAP32[$42 >> 2] = $12; //@line 1800
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 1801
   HEAP32[$43 >> 2] = 0; //@line 1802
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 1803
   HEAP32[$44 >> 2] = $10; //@line 1804
   sp = STACKTOP; //@line 1805
   return;
  }
  ___async_unwind = 0; //@line 1808
  HEAP32[$ReallocAsyncCtx4 >> 2] = 310; //@line 1809
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 1810
  HEAP32[$42 >> 2] = $12; //@line 1811
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 1812
  HEAP32[$43 >> 2] = 0; //@line 1813
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 1814
  HEAP32[$44 >> 2] = $10; //@line 1815
  sp = STACKTOP; //@line 1816
  return;
 }
 $45 = HEAP32[$12 >> 2] | 0; //@line 1819
 if (!$45) {
  HEAP32[___async_retval >> 2] = 0; //@line 1823
  return;
 }
 $48 = HEAP32[$45 + 8 >> 2] | 0; //@line 1827
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 1828
 FUNCTION_TABLE_vi[$48 & 1023]($10); //@line 1829
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 311; //@line 1832
  $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 1833
  HEAP32[$49 >> 2] = 0; //@line 1834
  sp = STACKTOP; //@line 1835
  return;
 }
 ___async_unwind = 0; //@line 1838
 HEAP32[$ReallocAsyncCtx5 >> 2] = 311; //@line 1839
 $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 1840
 HEAP32[$49 >> 2] = 0; //@line 1841
 sp = STACKTOP; //@line 1842
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_232($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 5128
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5130
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5132
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5134
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5136
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5138
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5140
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 5142
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5144
 if ($AsyncRetVal | 0) {
  $17 = HEAP32[$6 >> 2] | 0; //@line 5147
  if (!$17) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 5151
   HEAP8[$AsyncRetVal + 16 >> 0] = HEAP8[$2 >> 0] | 0; //@line 5154
   _equeue_event_dtor($AsyncRetVal, 209); //@line 5155
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 5156
   $32 = _equeue_post($4, 210, $AsyncRetVal) | 0; //@line 5157
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 211; //@line 5160
    $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 5161
    HEAP32[$33 >> 2] = $6; //@line 5162
    $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 5163
    HEAP32[$34 >> 2] = $10; //@line 5164
    $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 5165
    HEAP32[$35 >> 2] = $8; //@line 5166
    $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 5167
    HEAP32[$36 >> 2] = $12; //@line 5168
    sp = STACKTOP; //@line 5169
    return;
   }
   HEAP32[___async_retval >> 2] = $32; //@line 5173
   ___async_unwind = 0; //@line 5174
   HEAP32[$ReallocAsyncCtx6 >> 2] = 211; //@line 5175
   $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 5176
   HEAP32[$33 >> 2] = $6; //@line 5177
   $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 5178
   HEAP32[$34 >> 2] = $10; //@line 5179
   $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 5180
   HEAP32[$35 >> 2] = $8; //@line 5181
   $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 5182
   HEAP32[$36 >> 2] = $12; //@line 5183
   sp = STACKTOP; //@line 5184
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 5188
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 5189
   FUNCTION_TABLE_vii[$20 & 15]($AsyncRetVal, $8); //@line 5190
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 208; //@line 5193
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 5194
    HEAP32[$21 >> 2] = $14; //@line 5195
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 5196
    HEAP32[$22 >> 2] = $AsyncRetVal; //@line 5197
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 5198
    HEAP32[$23 >> 2] = $2; //@line 5199
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 5200
    HEAP32[$24 >> 2] = $4; //@line 5201
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 5202
    HEAP32[$25 >> 2] = $6; //@line 5203
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 5204
    HEAP32[$26 >> 2] = $10; //@line 5205
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 5206
    HEAP32[$27 >> 2] = $8; //@line 5207
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 5208
    HEAP32[$28 >> 2] = $12; //@line 5209
    sp = STACKTOP; //@line 5210
    return;
   }
   ___async_unwind = 0; //@line 5213
   HEAP32[$ReallocAsyncCtx3 >> 2] = 208; //@line 5214
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 5215
   HEAP32[$21 >> 2] = $14; //@line 5216
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 5217
   HEAP32[$22 >> 2] = $AsyncRetVal; //@line 5218
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 5219
   HEAP32[$23 >> 2] = $2; //@line 5220
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 5221
   HEAP32[$24 >> 2] = $4; //@line 5222
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 5223
   HEAP32[$25 >> 2] = $6; //@line 5224
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 5225
   HEAP32[$26 >> 2] = $10; //@line 5226
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 5227
   HEAP32[$27 >> 2] = $8; //@line 5228
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 5229
   HEAP32[$28 >> 2] = $12; //@line 5230
   sp = STACKTOP; //@line 5231
   return;
  }
 }
 $38 = HEAP32[$6 >> 2] | 0; //@line 5235
 if ($38 | 0) {
  $41 = HEAP32[$38 + 8 >> 2] | 0; //@line 5239
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 5240
  FUNCTION_TABLE_vi[$41 & 1023]($8); //@line 5241
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 212; //@line 5244
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 5245
   HEAP32[$42 >> 2] = $10; //@line 5246
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 5247
   HEAP32[$43 >> 2] = 0; //@line 5248
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 5249
   HEAP32[$44 >> 2] = $12; //@line 5250
   sp = STACKTOP; //@line 5251
   return;
  }
  ___async_unwind = 0; //@line 5254
  HEAP32[$ReallocAsyncCtx4 >> 2] = 212; //@line 5255
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 5256
  HEAP32[$42 >> 2] = $10; //@line 5257
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 5258
  HEAP32[$43 >> 2] = 0; //@line 5259
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 5260
  HEAP32[$44 >> 2] = $12; //@line 5261
  sp = STACKTOP; //@line 5262
  return;
 }
 $45 = HEAP32[$10 >> 2] | 0; //@line 5265
 if (!$45) {
  HEAP32[___async_retval >> 2] = 0; //@line 5269
  return;
 }
 $48 = HEAP32[$45 + 8 >> 2] | 0; //@line 5273
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 5274
 FUNCTION_TABLE_vi[$48 & 1023]($12); //@line 5275
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 213; //@line 5278
  $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 5279
  HEAP32[$49 >> 2] = 0; //@line 5280
  sp = STACKTOP; //@line 5281
  return;
 }
 ___async_unwind = 0; //@line 5284
 HEAP32[$ReallocAsyncCtx5 >> 2] = 213; //@line 5285
 $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 5286
 HEAP32[$49 >> 2] = 0; //@line 5287
 sp = STACKTOP; //@line 5288
 return;
}
function __ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $$046$lcssa$off0 = 0, $$04660 = 0, $$047$lcssa = 0, $$04759 = 0, $$050$lcssa = 0, $$1 = 0, $10 = 0, $101 = 0, $107 = 0, $113 = 0, $119 = 0, $12 = 0, $125 = 0, $131 = 0, $137 = 0, $143 = 0, $149 = 0, $155 = 0, $156 = 0, $157 = 0, $166 = 0, $168 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $57 = 0, $59 = 0, $65 = 0, $71 = 0, $77 = 0, $83 = 0, $89 = 0, $9 = 0, $95 = 0, $indvars$iv = 0, $wide$trip$count = 0, label = 0;
 $9 = $0 + 64 | 0; //@line 18176
 _mbedtls_aes_init($9); //@line 18177
 $10 = _mbedtls_aes_setkey_enc($9, $3, $4) | 0; //@line 18178
 if ($10 | 0) {
  $$1 = $10; //@line 18181
  _mbedtls_aes_free($9); //@line 18182
  return $$1 | 0; //@line 18183
 }
 $12 = $0 + 32 | 0; //@line 18185
 HEAP8[$0 + 37 >> 0] = $6; //@line 18187
 HEAP8[$0 + 38 >> 0] = $5; //@line 18190
 HEAP8[$0 + 39 >> 0] = $5 >>> 8; //@line 18194
 HEAP8[$0 + 40 >> 0] = $5 >>> 16; //@line 18198
 HEAP8[$0 + 41 >> 0] = $5 >>> 24; //@line 18202
 HEAP8[$0 + 42 >> 0] = $7; //@line 18205
 HEAP8[$0 + 43 >> 0] = $7 >>> 8; //@line 18209
 HEAP8[$0 + 44 >> 0] = $7 >>> 16; //@line 18213
 HEAP8[$0 + 45 >> 0] = $7 >>> 24; //@line 18217
 do {
  if (($2 & 65535) > 15) {
   $38 = $0 + 47 | 0; //@line 18222
   $39 = $0 + 48 | 0; //@line 18223
   $40 = $0 + 49 | 0; //@line 18224
   $41 = $0 + 50 | 0; //@line 18225
   $42 = $0 + 51 | 0; //@line 18226
   $43 = $0 + 52 | 0; //@line 18227
   $44 = $0 + 53 | 0; //@line 18228
   $45 = $0 + 54 | 0; //@line 18229
   $46 = $0 + 55 | 0; //@line 18230
   $47 = $0 + 56 | 0; //@line 18231
   $48 = $0 + 57 | 0; //@line 18232
   $49 = $0 + 58 | 0; //@line 18233
   $50 = $0 + 59 | 0; //@line 18234
   $51 = $0 + 60 | 0; //@line 18235
   $52 = $0 + 61 | 0; //@line 18236
   $53 = $0 + 62 | 0; //@line 18237
   $54 = $0 + 63 | 0; //@line 18238
   $$04660 = 1; //@line 18239
   $$04759 = 0; //@line 18239
   $156 = $2 & 65535; //@line 18239
   while (1) {
    HEAP8[$38 >> 0] = $$04660; //@line 18242
    $$04660 = $$04660 + 1 << 16 >> 16; //@line 18243
    $57 = _mbedtls_aes_crypt_ecb($9, 1, $12, $39) | 0; //@line 18244
    if ($57 | 0) {
     $$1 = $57; //@line 18247
     label = 11; //@line 18248
     break;
    }
    $59 = $$04759 & 255; //@line 18251
    HEAP8[$8 + $59 >> 0] = HEAP8[$39 >> 0] ^ HEAP8[$1 + $59 >> 0]; //@line 18257
    $65 = $59 + 1 | 0; //@line 18258
    HEAP8[$8 + $65 >> 0] = HEAP8[$40 >> 0] ^ HEAP8[$1 + $65 >> 0]; //@line 18264
    $71 = $59 + 2 | 0; //@line 18265
    HEAP8[$8 + $71 >> 0] = HEAP8[$41 >> 0] ^ HEAP8[$1 + $71 >> 0]; //@line 18271
    $77 = $59 + 3 | 0; //@line 18272
    HEAP8[$8 + $77 >> 0] = HEAP8[$42 >> 0] ^ HEAP8[$1 + $77 >> 0]; //@line 18278
    $83 = $59 + 4 | 0; //@line 18279
    HEAP8[$8 + $83 >> 0] = HEAP8[$43 >> 0] ^ HEAP8[$1 + $83 >> 0]; //@line 18285
    $89 = $59 + 5 | 0; //@line 18286
    HEAP8[$8 + $89 >> 0] = HEAP8[$44 >> 0] ^ HEAP8[$1 + $89 >> 0]; //@line 18292
    $95 = $59 + 6 | 0; //@line 18293
    HEAP8[$8 + $95 >> 0] = HEAP8[$45 >> 0] ^ HEAP8[$1 + $95 >> 0]; //@line 18299
    $101 = $59 + 7 | 0; //@line 18300
    HEAP8[$8 + $101 >> 0] = HEAP8[$46 >> 0] ^ HEAP8[$1 + $101 >> 0]; //@line 18306
    $107 = $59 + 8 | 0; //@line 18307
    HEAP8[$8 + $107 >> 0] = HEAP8[$47 >> 0] ^ HEAP8[$1 + $107 >> 0]; //@line 18313
    $113 = $59 + 9 | 0; //@line 18314
    HEAP8[$8 + $113 >> 0] = HEAP8[$48 >> 0] ^ HEAP8[$1 + $113 >> 0]; //@line 18320
    $119 = $59 + 10 | 0; //@line 18321
    HEAP8[$8 + $119 >> 0] = HEAP8[$49 >> 0] ^ HEAP8[$1 + $119 >> 0]; //@line 18327
    $125 = $59 + 11 | 0; //@line 18328
    HEAP8[$8 + $125 >> 0] = HEAP8[$50 >> 0] ^ HEAP8[$1 + $125 >> 0]; //@line 18334
    $131 = $59 + 12 | 0; //@line 18335
    HEAP8[$8 + $131 >> 0] = HEAP8[$51 >> 0] ^ HEAP8[$1 + $131 >> 0]; //@line 18341
    $137 = $59 + 13 | 0; //@line 18342
    HEAP8[$8 + $137 >> 0] = HEAP8[$52 >> 0] ^ HEAP8[$1 + $137 >> 0]; //@line 18348
    $143 = $59 + 14 | 0; //@line 18349
    HEAP8[$8 + $143 >> 0] = HEAP8[$53 >> 0] ^ HEAP8[$1 + $143 >> 0]; //@line 18355
    $149 = $59 + 15 | 0; //@line 18356
    HEAP8[$8 + $149 >> 0] = HEAP8[$54 >> 0] ^ HEAP8[$1 + $149 >> 0]; //@line 18362
    $155 = $156 + 65520 | 0; //@line 18363
    $157 = $155 & 65535; //@line 18364
    if (($157 & 65535) <= 15) {
     label = 6; //@line 18372
     break;
    } else {
     $$04759 = $59 + 16 & 255; //@line 18370
     $156 = $155 & 65535; //@line 18370
    }
   }
   if ((label | 0) == 6) {
    $$046$lcssa$off0 = $$04660 & 255; //@line 18380
    $$047$lcssa = $$04759 + 16 & 255; //@line 18380
    $$050$lcssa = $157; //@line 18380
    break;
   } else if ((label | 0) == 11) {
    _mbedtls_aes_free($9); //@line 18384
    return $$1 | 0; //@line 18385
   }
  } else {
   $$046$lcssa$off0 = 1; //@line 18388
   $$047$lcssa = 0; //@line 18388
   $$050$lcssa = $2; //@line 18388
  }
 } while (0);
 if (!($$050$lcssa << 16 >> 16)) {
  $$1 = 0; //@line 18393
  _mbedtls_aes_free($9); //@line 18394
  return $$1 | 0; //@line 18395
 }
 HEAP8[$0 + 47 >> 0] = $$046$lcssa$off0; //@line 18398
 $166 = _mbedtls_aes_crypt_ecb($9, 1, $12, $0 + 48 | 0) | 0; //@line 18400
 if ($166 | 0) {
  $$1 = $166; //@line 18403
  _mbedtls_aes_free($9); //@line 18404
  return $$1 | 0; //@line 18405
 }
 $wide$trip$count = $$050$lcssa & 65535; //@line 18407
 $indvars$iv = 0; //@line 18408
 do {
  $168 = $indvars$iv + $$047$lcssa | 0; //@line 18410
  HEAP8[$8 + $168 >> 0] = HEAP8[$0 + 48 + $indvars$iv >> 0] ^ HEAP8[$1 + $168 >> 0]; //@line 18417
  $indvars$iv = $indvars$iv + 1 | 0; //@line 18418
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 $$1 = 0; //@line 18421
 _mbedtls_aes_free($9); //@line 18427
 return $$1 | 0; //@line 18428
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $26 = 0, $33 = 0, $38 = 0, $41 = 0, $46 = 0, $52 = 0, $53 = 0, $56 = 0, $59 = 0, $62 = 0, $65 = 0, $67 = 0, $70 = 0, $73 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 1656
 STACKTOP = STACKTOP + 32 | 0; //@line 1657
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 1657
 $1 = sp + 8 | 0; //@line 1659
 _mbed_tracef(16, 10996, 11494, sp); //@line 1660
 $2 = $0 + 688 | 0; //@line 1661
 switch (HEAP8[$2 >> 0] | 0) {
 case 1:
  {
   do {
    if (!(HEAP8[$0 + 689 >> 0] | 0)) {
     HEAP8[$0 + 732 >> 0] = 0; //@line 1671
     HEAP8[$0 + 733 >> 0] = 0; //@line 1673
     HEAP16[$0 + 744 >> 1] = 0; //@line 1675
     HEAP16[$0 + 742 >> 1] = 0; //@line 1677
     if (!(HEAP8[$0 + 722 >> 0] | 0)) {
      HEAP8[$2 >> 0] = 0; //@line 1682
      $14 = $0 + 1176 | 0; //@line 1683
      $15 = $1 + 12 | 0; //@line 1684
      HEAP32[$1 >> 2] = 52; //@line 1685
      HEAP32[$1 + 4 >> 2] = 0; //@line 1687
      HEAP32[$1 + 8 >> 2] = $0; //@line 1689
      HEAP32[$15 >> 2] = 584; //@line 1690
      $18 = ___muldi3(HEAP32[$0 + 728 >> 2] | 0, 0, 1e3, 0) | 0; //@line 1693
      $19 = tempRet0; //@line 1694
      $20 = $0 + 1216 | 0; //@line 1695
      if (($20 | 0) != ($1 | 0)) {
       $22 = $0 + 1228 | 0; //@line 1698
       $23 = HEAP32[$22 >> 2] | 0; //@line 1699
       do {
        if ($23 | 0) {
         $26 = HEAP32[$23 + 8 >> 2] | 0; //@line 1704
         $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 1705
         FUNCTION_TABLE_vi[$26 & 1023]($20); //@line 1706
         if (___async) {
          HEAP32[$AsyncCtx >> 2] = 83; //@line 1709
          HEAP32[$AsyncCtx + 4 >> 2] = $15; //@line 1711
          HEAP32[$AsyncCtx + 8 >> 2] = $22; //@line 1713
          HEAP32[$AsyncCtx + 12 >> 2] = $20; //@line 1715
          HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 1717
          HEAP32[$AsyncCtx + 20 >> 2] = $14; //@line 1719
          $33 = $AsyncCtx + 24 | 0; //@line 1721
          HEAP32[$33 >> 2] = $18; //@line 1723
          HEAP32[$33 + 4 >> 2] = $19; //@line 1726
          HEAP32[$AsyncCtx + 32 >> 2] = $0; //@line 1728
          sp = STACKTOP; //@line 1729
          STACKTOP = sp; //@line 1730
          return;
         } else {
          _emscripten_free_async_context($AsyncCtx | 0); //@line 1732
          break;
         }
        }
       } while (0);
       $38 = HEAP32[$15 >> 2] | 0; //@line 1737
       do {
        if (!$38) {
         $52 = 0; //@line 1741
        } else {
         $41 = HEAP32[$38 + 4 >> 2] | 0; //@line 1744
         $AsyncCtx2 = _emscripten_alloc_async_context(32, sp) | 0; //@line 1745
         FUNCTION_TABLE_vii[$41 & 15]($20, $1); //@line 1746
         if (___async) {
          HEAP32[$AsyncCtx2 >> 2] = 84; //@line 1749
          HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 1751
          HEAP32[$AsyncCtx2 + 8 >> 2] = $22; //@line 1753
          HEAP32[$AsyncCtx2 + 12 >> 2] = $14; //@line 1755
          $46 = $AsyncCtx2 + 16 | 0; //@line 1757
          HEAP32[$46 >> 2] = $18; //@line 1759
          HEAP32[$46 + 4 >> 2] = $19; //@line 1762
          HEAP32[$AsyncCtx2 + 24 >> 2] = $0; //@line 1764
          HEAP32[$AsyncCtx2 + 28 >> 2] = $1; //@line 1766
          sp = STACKTOP; //@line 1767
          STACKTOP = sp; //@line 1768
          return;
         } else {
          _emscripten_free_async_context($AsyncCtx2 | 0); //@line 1770
          $52 = HEAP32[$15 >> 2] | 0; //@line 1772
          break;
         }
        }
       } while (0);
       HEAP32[$22 >> 2] = $52; //@line 1777
      }
      __ZN4mbed6Ticker5setupEy($14, $18, $19); //@line 1779
      $53 = HEAP32[$15 >> 2] | 0; //@line 1780
      if ($53 | 0) {
       $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 1784
       $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1785
       FUNCTION_TABLE_vi[$56 & 1023]($1); //@line 1786
       if (___async) {
        HEAP32[$AsyncCtx6 >> 2] = 85; //@line 1789
        HEAP32[$AsyncCtx6 + 4 >> 2] = $0; //@line 1791
        sp = STACKTOP; //@line 1792
        STACKTOP = sp; //@line 1793
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx6 | 0); //@line 1795
        break;
       }
      }
     }
    }
   } while (0);
   $59 = HEAP32[$0 + 788 >> 2] | 0; //@line 1803
   if (!$59) {
    STACKTOP = sp; //@line 1806
    return;
   }
   $62 = HEAP32[$59 + 60 >> 2] | 0; //@line 1809
   if (!$62) {
    STACKTOP = sp; //@line 1812
    return;
   }
   $65 = HEAP32[$62 >> 2] | 0; //@line 1815
   $AsyncCtx9 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1816
   FUNCTION_TABLE_vi[$65 & 1023]($59 + 48 | 0); //@line 1817
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 86; //@line 1820
    sp = STACKTOP; //@line 1821
    STACKTOP = sp; //@line 1822
    return;
   }
   _emscripten_free_async_context($AsyncCtx9 | 0); //@line 1824
   STACKTOP = sp; //@line 1825
   return;
  }
 case 2:
  {
   HEAP8[$2 >> 0] = 0; //@line 1829
   $67 = HEAP32[$0 + 788 >> 2] | 0; //@line 1831
   if (!$67) {
    STACKTOP = sp; //@line 1834
    return;
   }
   $70 = HEAP32[$67 + 28 >> 2] | 0; //@line 1837
   if (!$70) {
    STACKTOP = sp; //@line 1840
    return;
   }
   $73 = HEAP32[$70 >> 2] | 0; //@line 1843
   $AsyncCtx12 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1844
   FUNCTION_TABLE_vi[$73 & 1023]($67 + 16 | 0); //@line 1845
   if (___async) {
    HEAP32[$AsyncCtx12 >> 2] = 87; //@line 1848
    sp = STACKTOP; //@line 1849
    STACKTOP = sp; //@line 1850
    return;
   }
   _emscripten_free_async_context($AsyncCtx12 | 0); //@line 1852
   STACKTOP = sp; //@line 1853
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 1857
   return;
  }
 }
}
function _mbedtls_gcm_update__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$061 = 0, $$163 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $67 = 0, $68 = 0, $75 = 0, $8 = 0, $84 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7647
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7649
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7651
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7653
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7655
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7657
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 7659
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 7661
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 7663
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 7665
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 7667
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 7669
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 7671
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 7673
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 7675
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 7677
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 7679
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 7681
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 7684
  $84 = ___async_retval; //@line 7685
  HEAP32[$84 >> 2] = $$0; //@line 7686
  return;
 }
 if ($2 | 0) {
  $$163 = 0; //@line 7691
  do {
   $67 = $8 + 376 + $$163 | 0; //@line 7695
   $68 = $14 + $$163 | 0; //@line 7696
   if (!(HEAP32[$18 >> 2] | 0)) {
    HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ HEAP8[$68 >> 0]; //@line 7701
   }
   $75 = HEAP8[$68 >> 0] ^ HEAP8[$20 + $$163 >> 0]; //@line 7706
   HEAP8[$16 + $$163 >> 0] = $75; //@line 7708
   if ((HEAP32[$18 >> 2] | 0) == 1) {
    HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ $75; //@line 7714
   }
   $$163 = $$163 + 1 | 0; //@line 7716
  } while ($$163 >>> 0 < $2 >>> 0);
 }
 _gcm_mult($8, $10, $10); //@line 7725
 $35 = $12 - $2 | 0; //@line 7726
 $51 = $14 + $2 | 0; //@line 7727
 $53 = $16 + $2 | 0; //@line 7728
 if (!$35) {
  $$0 = 0; //@line 7731
  $84 = ___async_retval; //@line 7732
  HEAP32[$84 >> 2] = $$0; //@line 7733
  return;
 }
 $36 = $35 >>> 0 < 16 ? $35 : 16; //@line 7737
 $$061 = 16; //@line 7738
 do {
  if ($$061 >>> 0 <= 12) {
   break;
  }
  $$061 = $$061 + -1 | 0; //@line 7744
  $39 = $8 + 360 + $$061 | 0; //@line 7745
  $41 = (HEAP8[$39 >> 0] | 0) + 1 << 24 >> 24; //@line 7747
  HEAP8[$39 >> 0] = $41; //@line 7748
 } while (!($41 << 24 >> 24));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(68) | 0; //@line 7756
 $43 = _mbedtls_cipher_update($28, $30, 16, $6, $32) | 0; //@line 7757
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 579; //@line 7760
  $44 = $ReallocAsyncCtx + 4 | 0; //@line 7761
  HEAP32[$44 >> 2] = $36; //@line 7762
  $45 = $ReallocAsyncCtx + 8 | 0; //@line 7763
  HEAP32[$45 >> 2] = $4; //@line 7764
  $46 = $ReallocAsyncCtx + 12 | 0; //@line 7765
  HEAP32[$46 >> 2] = $6; //@line 7766
  $47 = $ReallocAsyncCtx + 16 | 0; //@line 7767
  HEAP32[$47 >> 2] = $8; //@line 7768
  $48 = $ReallocAsyncCtx + 20 | 0; //@line 7769
  HEAP32[$48 >> 2] = $10; //@line 7770
  $49 = $ReallocAsyncCtx + 24 | 0; //@line 7771
  HEAP32[$49 >> 2] = $35; //@line 7772
  $50 = $ReallocAsyncCtx + 28 | 0; //@line 7773
  HEAP32[$50 >> 2] = $51; //@line 7774
  $52 = $ReallocAsyncCtx + 32 | 0; //@line 7775
  HEAP32[$52 >> 2] = $53; //@line 7776
  $54 = $ReallocAsyncCtx + 36 | 0; //@line 7777
  HEAP32[$54 >> 2] = $18; //@line 7778
  $55 = $ReallocAsyncCtx + 40 | 0; //@line 7779
  HEAP32[$55 >> 2] = $20; //@line 7780
  $56 = $ReallocAsyncCtx + 44 | 0; //@line 7781
  HEAP32[$56 >> 2] = $22; //@line 7782
  $57 = $ReallocAsyncCtx + 48 | 0; //@line 7783
  HEAP32[$57 >> 2] = $24; //@line 7784
  $58 = $ReallocAsyncCtx + 52 | 0; //@line 7785
  HEAP32[$58 >> 2] = $26; //@line 7786
  $59 = $ReallocAsyncCtx + 56 | 0; //@line 7787
  HEAP32[$59 >> 2] = $28; //@line 7788
  $60 = $ReallocAsyncCtx + 60 | 0; //@line 7789
  HEAP32[$60 >> 2] = $30; //@line 7790
  $61 = $ReallocAsyncCtx + 64 | 0; //@line 7791
  HEAP32[$61 >> 2] = $32; //@line 7792
  sp = STACKTOP; //@line 7793
  return;
 }
 HEAP32[___async_retval >> 2] = $43; //@line 7797
 ___async_unwind = 0; //@line 7798
 HEAP32[$ReallocAsyncCtx >> 2] = 579; //@line 7799
 $44 = $ReallocAsyncCtx + 4 | 0; //@line 7800
 HEAP32[$44 >> 2] = $36; //@line 7801
 $45 = $ReallocAsyncCtx + 8 | 0; //@line 7802
 HEAP32[$45 >> 2] = $4; //@line 7803
 $46 = $ReallocAsyncCtx + 12 | 0; //@line 7804
 HEAP32[$46 >> 2] = $6; //@line 7805
 $47 = $ReallocAsyncCtx + 16 | 0; //@line 7806
 HEAP32[$47 >> 2] = $8; //@line 7807
 $48 = $ReallocAsyncCtx + 20 | 0; //@line 7808
 HEAP32[$48 >> 2] = $10; //@line 7809
 $49 = $ReallocAsyncCtx + 24 | 0; //@line 7810
 HEAP32[$49 >> 2] = $35; //@line 7811
 $50 = $ReallocAsyncCtx + 28 | 0; //@line 7812
 HEAP32[$50 >> 2] = $51; //@line 7813
 $52 = $ReallocAsyncCtx + 32 | 0; //@line 7814
 HEAP32[$52 >> 2] = $53; //@line 7815
 $54 = $ReallocAsyncCtx + 36 | 0; //@line 7816
 HEAP32[$54 >> 2] = $18; //@line 7817
 $55 = $ReallocAsyncCtx + 40 | 0; //@line 7818
 HEAP32[$55 >> 2] = $20; //@line 7819
 $56 = $ReallocAsyncCtx + 44 | 0; //@line 7820
 HEAP32[$56 >> 2] = $22; //@line 7821
 $57 = $ReallocAsyncCtx + 48 | 0; //@line 7822
 HEAP32[$57 >> 2] = $24; //@line 7823
 $58 = $ReallocAsyncCtx + 52 | 0; //@line 7824
 HEAP32[$58 >> 2] = $26; //@line 7825
 $59 = $ReallocAsyncCtx + 56 | 0; //@line 7826
 HEAP32[$59 >> 2] = $28; //@line 7827
 $60 = $ReallocAsyncCtx + 60 | 0; //@line 7828
 HEAP32[$60 >> 2] = $30; //@line 7829
 $61 = $ReallocAsyncCtx + 64 | 0; //@line 7830
 HEAP32[$61 >> 2] = $32; //@line 7831
 sp = STACKTOP; //@line 7832
 return;
}
function _initialize__async_cb_159($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 29495
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29497
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29499
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29501
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29503
 $8 = HEAP32[$AsyncRetVal >> 2] | 0; //@line 29504
 if (!$8) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 29507
  _mbed_assert_internal(14465, 14467, 41); //@line 29508
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 584; //@line 29511
   $10 = $ReallocAsyncCtx7 + 4 | 0; //@line 29512
   HEAP32[$10 >> 2] = $2; //@line 29513
   $11 = $ReallocAsyncCtx7 + 8 | 0; //@line 29514
   HEAP32[$11 >> 2] = $4; //@line 29515
   $12 = $ReallocAsyncCtx7 + 12 | 0; //@line 29516
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 29517
   $13 = $ReallocAsyncCtx7 + 16 | 0; //@line 29518
   HEAP32[$13 >> 2] = $6; //@line 29519
   sp = STACKTOP; //@line 29520
   return;
  }
  ___async_unwind = 0; //@line 29523
  HEAP32[$ReallocAsyncCtx7 >> 2] = 584; //@line 29524
  $10 = $ReallocAsyncCtx7 + 4 | 0; //@line 29525
  HEAP32[$10 >> 2] = $2; //@line 29526
  $11 = $ReallocAsyncCtx7 + 8 | 0; //@line 29527
  HEAP32[$11 >> 2] = $4; //@line 29528
  $12 = $ReallocAsyncCtx7 + 12 | 0; //@line 29529
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 29530
  $13 = $ReallocAsyncCtx7 + 16 | 0; //@line 29531
  HEAP32[$13 >> 2] = $6; //@line 29532
  sp = STACKTOP; //@line 29533
  return;
 }
 $15 = HEAP32[$AsyncRetVal + 4 >> 2] | 0; //@line 29537
 if (($15 + -4 | 0) >>> 0 > 28) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 29541
  _mbed_assert_internal(14465, 14467, 47); //@line 29542
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 585; //@line 29545
   $17 = $ReallocAsyncCtx6 + 4 | 0; //@line 29546
   HEAP32[$17 >> 2] = $8; //@line 29547
   $18 = $ReallocAsyncCtx6 + 8 | 0; //@line 29548
   HEAP32[$18 >> 2] = $2; //@line 29549
   $19 = $ReallocAsyncCtx6 + 12 | 0; //@line 29550
   HEAP32[$19 >> 2] = $4; //@line 29551
   $20 = $ReallocAsyncCtx6 + 16 | 0; //@line 29552
   HEAP32[$20 >> 2] = $6; //@line 29553
   sp = STACKTOP; //@line 29554
   return;
  }
  ___async_unwind = 0; //@line 29557
  HEAP32[$ReallocAsyncCtx6 >> 2] = 585; //@line 29558
  $17 = $ReallocAsyncCtx6 + 4 | 0; //@line 29559
  HEAP32[$17 >> 2] = $8; //@line 29560
  $18 = $ReallocAsyncCtx6 + 8 | 0; //@line 29561
  HEAP32[$18 >> 2] = $2; //@line 29562
  $19 = $ReallocAsyncCtx6 + 12 | 0; //@line 29563
  HEAP32[$19 >> 2] = $4; //@line 29564
  $20 = $ReallocAsyncCtx6 + 16 | 0; //@line 29565
  HEAP32[$20 >> 2] = $6; //@line 29566
  sp = STACKTOP; //@line 29567
  return;
 } else {
  $22 = 7 << $15 + -4; //@line 29571
  $23 = ___muldi3($22 | 0, 0, 1e6, 0) | 0; //@line 29572
  $24 = tempRet0; //@line 29573
  $25 = _i64Add($8 | 0, 0, -1, -1) | 0; //@line 29574
  $27 = _i64Add($25 | 0, tempRet0 | 0, $23 | 0, $24 | 0) | 0; //@line 29576
  $29 = ___udivdi3($27 | 0, tempRet0 | 0, $8 | 0, 0) | 0; //@line 29578
  $30 = tempRet0; //@line 29579
  $31 = HEAP32[$2 >> 2] | 0; //@line 29580
  HEAP32[$31 >> 2] = 0; //@line 29581
  HEAP32[$31 + 4 >> 2] = 0; //@line 29583
  $35 = HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0; //@line 29586
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 29587
  $36 = FUNCTION_TABLE_i[$35 & 7]() | 0; //@line 29588
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 586; //@line 29591
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 29592
   HEAP32[$37 >> 2] = $2; //@line 29593
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 29594
   HEAP32[$38 >> 2] = $8; //@line 29595
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 29596
   HEAP32[$39 >> 2] = $15; //@line 29597
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 29598
   HEAP32[$40 >> 2] = $22; //@line 29599
   $41 = $ReallocAsyncCtx3 + 24 | 0; //@line 29600
   $42 = $41; //@line 29601
   $43 = $42; //@line 29602
   HEAP32[$43 >> 2] = $29; //@line 29603
   $44 = $42 + 4 | 0; //@line 29604
   $45 = $44; //@line 29605
   HEAP32[$45 >> 2] = $30; //@line 29606
   $46 = $ReallocAsyncCtx3 + 32 | 0; //@line 29607
   HEAP32[$46 >> 2] = $4; //@line 29608
   $47 = $ReallocAsyncCtx3 + 36 | 0; //@line 29609
   HEAP32[$47 >> 2] = $6; //@line 29610
   sp = STACKTOP; //@line 29611
   return;
  }
  HEAP32[___async_retval >> 2] = $36; //@line 29615
  ___async_unwind = 0; //@line 29616
  HEAP32[$ReallocAsyncCtx3 >> 2] = 586; //@line 29617
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 29618
  HEAP32[$37 >> 2] = $2; //@line 29619
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 29620
  HEAP32[$38 >> 2] = $8; //@line 29621
  $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 29622
  HEAP32[$39 >> 2] = $15; //@line 29623
  $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 29624
  HEAP32[$40 >> 2] = $22; //@line 29625
  $41 = $ReallocAsyncCtx3 + 24 | 0; //@line 29626
  $42 = $41; //@line 29627
  $43 = $42; //@line 29628
  HEAP32[$43 >> 2] = $29; //@line 29629
  $44 = $42 + 4 | 0; //@line 29630
  $45 = $44; //@line 29631
  HEAP32[$45 >> 2] = $30; //@line 29632
  $46 = $ReallocAsyncCtx3 + 32 | 0; //@line 29633
  HEAP32[$46 >> 2] = $4; //@line 29634
  $47 = $ReallocAsyncCtx3 + 36 | 0; //@line 29635
  HEAP32[$47 >> 2] = $6; //@line 29636
  sp = STACKTOP; //@line 29637
  return;
 }
}
function _mbedtls_cipher_free($0) {
 $0 = $0 | 0;
 var $101 = 0, $105 = 0, $109 = 0, $113 = 0, $2 = 0, $3 = 0, $42 = 0, $48 = 0, $53 = 0, $57 = 0, $61 = 0, $65 = 0, $69 = 0, $73 = 0, $77 = 0, $81 = 0, $85 = 0, $89 = 0, $93 = 0, $97 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2735
 if (!$0) {
  return;
 }
 $2 = $0 + 64 | 0; //@line 2740
 $3 = HEAP32[$2 >> 2] | 0; //@line 2741
 if ($3 | 0) {
  HEAP8[$3 >> 0] = 0; //@line 2745
  HEAP8[$3 + 1 >> 0] = 0; //@line 2747
  HEAP8[$3 + 2 >> 0] = 0; //@line 2749
  HEAP8[$3 + 3 >> 0] = 0; //@line 2751
  HEAP8[$3 + 4 >> 0] = 0; //@line 2753
  HEAP8[$3 + 5 >> 0] = 0; //@line 2755
  HEAP8[$3 + 6 >> 0] = 0; //@line 2757
  HEAP8[$3 + 7 >> 0] = 0; //@line 2759
  HEAP8[$3 + 8 >> 0] = 0; //@line 2761
  HEAP8[$3 + 9 >> 0] = 0; //@line 2763
  HEAP8[$3 + 10 >> 0] = 0; //@line 2765
  HEAP8[$3 + 11 >> 0] = 0; //@line 2767
  HEAP8[$3 + 12 >> 0] = 0; //@line 2769
  HEAP8[$3 + 13 >> 0] = 0; //@line 2771
  HEAP8[$3 + 14 >> 0] = 0; //@line 2773
  HEAP8[$3 + 15 >> 0] = 0; //@line 2775
  HEAP8[$3 + 16 >> 0] = 0; //@line 2777
  HEAP8[$3 + 17 >> 0] = 0; //@line 2779
  HEAP8[$3 + 18 >> 0] = 0; //@line 2781
  HEAP8[$3 + 19 >> 0] = 0; //@line 2783
  HEAP8[$3 + 20 >> 0] = 0; //@line 2785
  HEAP8[$3 + 21 >> 0] = 0; //@line 2787
  HEAP8[$3 + 22 >> 0] = 0; //@line 2789
  HEAP8[$3 + 23 >> 0] = 0; //@line 2791
  HEAP8[$3 + 24 >> 0] = 0; //@line 2793
  HEAP8[$3 + 25 >> 0] = 0; //@line 2795
  HEAP8[$3 + 26 >> 0] = 0; //@line 2797
  HEAP8[$3 + 27 >> 0] = 0; //@line 2799
  HEAP8[$3 + 28 >> 0] = 0; //@line 2801
  HEAP8[$3 + 29 >> 0] = 0; //@line 2803
  HEAP8[$3 + 30 >> 0] = 0; //@line 2805
  HEAP8[$3 + 31 >> 0] = 0; //@line 2807
  HEAP8[$3 + 32 >> 0] = 0; //@line 2809
  HEAP8[$3 + 33 >> 0] = 0; //@line 2811
  HEAP8[$3 + 34 >> 0] = 0; //@line 2813
  HEAP8[$3 + 35 >> 0] = 0; //@line 2814
  _free(HEAP32[$2 >> 2] | 0); //@line 2816
 }
 $42 = HEAP32[$0 + 60 >> 2] | 0; //@line 2819
 do {
  if ($42 | 0) {
   $48 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 28 >> 2] | 0; //@line 2827
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2828
   FUNCTION_TABLE_vi[$48 & 1023]($42); //@line 2829
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 556; //@line 2832
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2834
    sp = STACKTOP; //@line 2835
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2838
    break;
   }
  }
 } while (0);
 HEAP8[$0 >> 0] = 0; //@line 2844
 HEAP8[$0 + 1 >> 0] = 0; //@line 2846
 HEAP8[$0 + 2 >> 0] = 0; //@line 2848
 $53 = $0 + 4 | 0; //@line 2849
 HEAP8[$0 + 3 >> 0] = 0; //@line 2850
 HEAP8[$53 >> 0] = 0; //@line 2852
 HEAP8[$53 + 1 >> 0] = 0; //@line 2854
 HEAP8[$53 + 2 >> 0] = 0; //@line 2856
 $57 = $53 + 4 | 0; //@line 2857
 HEAP8[$53 + 3 >> 0] = 0; //@line 2858
 HEAP8[$57 >> 0] = 0; //@line 2860
 HEAP8[$57 + 1 >> 0] = 0; //@line 2862
 HEAP8[$57 + 2 >> 0] = 0; //@line 2864
 $61 = $53 + 8 | 0; //@line 2865
 HEAP8[$57 + 3 >> 0] = 0; //@line 2866
 HEAP8[$61 >> 0] = 0; //@line 2868
 HEAP8[$61 + 1 >> 0] = 0; //@line 2870
 HEAP8[$61 + 2 >> 0] = 0; //@line 2872
 $65 = $53 + 12 | 0; //@line 2873
 HEAP8[$61 + 3 >> 0] = 0; //@line 2874
 HEAP8[$65 >> 0] = 0; //@line 2876
 HEAP8[$65 + 1 >> 0] = 0; //@line 2878
 HEAP8[$65 + 2 >> 0] = 0; //@line 2880
 $69 = $53 + 16 | 0; //@line 2881
 HEAP8[$65 + 3 >> 0] = 0; //@line 2882
 HEAP8[$69 >> 0] = 0; //@line 2884
 HEAP8[$69 + 1 >> 0] = 0; //@line 2886
 HEAP8[$69 + 2 >> 0] = 0; //@line 2888
 $73 = $53 + 20 | 0; //@line 2889
 HEAP8[$69 + 3 >> 0] = 0; //@line 2890
 HEAP8[$73 >> 0] = 0; //@line 2892
 HEAP8[$73 + 1 >> 0] = 0; //@line 2894
 HEAP8[$73 + 2 >> 0] = 0; //@line 2896
 $77 = $53 + 24 | 0; //@line 2897
 HEAP8[$73 + 3 >> 0] = 0; //@line 2898
 HEAP8[$77 >> 0] = 0; //@line 2900
 HEAP8[$77 + 1 >> 0] = 0; //@line 2902
 HEAP8[$77 + 2 >> 0] = 0; //@line 2904
 $81 = $53 + 28 | 0; //@line 2905
 HEAP8[$77 + 3 >> 0] = 0; //@line 2906
 HEAP8[$81 >> 0] = 0; //@line 2908
 HEAP8[$81 + 1 >> 0] = 0; //@line 2910
 HEAP8[$81 + 2 >> 0] = 0; //@line 2912
 $85 = $53 + 32 | 0; //@line 2913
 HEAP8[$81 + 3 >> 0] = 0; //@line 2914
 HEAP8[$85 >> 0] = 0; //@line 2916
 HEAP8[$85 + 1 >> 0] = 0; //@line 2918
 HEAP8[$85 + 2 >> 0] = 0; //@line 2920
 $89 = $53 + 36 | 0; //@line 2921
 HEAP8[$85 + 3 >> 0] = 0; //@line 2922
 HEAP8[$89 >> 0] = 0; //@line 2924
 HEAP8[$89 + 1 >> 0] = 0; //@line 2926
 HEAP8[$89 + 2 >> 0] = 0; //@line 2928
 $93 = $53 + 40 | 0; //@line 2929
 HEAP8[$89 + 3 >> 0] = 0; //@line 2930
 HEAP8[$93 >> 0] = 0; //@line 2932
 HEAP8[$93 + 1 >> 0] = 0; //@line 2934
 HEAP8[$93 + 2 >> 0] = 0; //@line 2936
 $97 = $53 + 44 | 0; //@line 2937
 HEAP8[$93 + 3 >> 0] = 0; //@line 2938
 HEAP8[$97 >> 0] = 0; //@line 2940
 HEAP8[$97 + 1 >> 0] = 0; //@line 2942
 HEAP8[$97 + 2 >> 0] = 0; //@line 2944
 $101 = $53 + 48 | 0; //@line 2945
 HEAP8[$97 + 3 >> 0] = 0; //@line 2946
 HEAP8[$101 >> 0] = 0; //@line 2948
 HEAP8[$101 + 1 >> 0] = 0; //@line 2950
 HEAP8[$101 + 2 >> 0] = 0; //@line 2952
 $105 = $53 + 52 | 0; //@line 2953
 HEAP8[$101 + 3 >> 0] = 0; //@line 2954
 HEAP8[$105 >> 0] = 0; //@line 2956
 HEAP8[$105 + 1 >> 0] = 0; //@line 2958
 HEAP8[$105 + 2 >> 0] = 0; //@line 2960
 $109 = $53 + 56 | 0; //@line 2961
 HEAP8[$105 + 3 >> 0] = 0; //@line 2962
 HEAP8[$109 >> 0] = 0; //@line 2964
 HEAP8[$109 + 1 >> 0] = 0; //@line 2966
 HEAP8[$109 + 2 >> 0] = 0; //@line 2968
 $113 = $53 + 60 | 0; //@line 2969
 HEAP8[$109 + 3 >> 0] = 0; //@line 2970
 HEAP8[$113 >> 0] = 0; //@line 2972
 HEAP8[$113 + 1 >> 0] = 0; //@line 2974
 HEAP8[$113 + 2 >> 0] = 0; //@line 2976
 HEAP8[$113 + 3 >> 0] = 0; //@line 2977
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_5($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, $trunc = 0, sp = 0;
 sp = STACKTOP; //@line 17923
 STACKTOP = STACKTOP + 16 | 0; //@line 17924
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17924
 $$byval_copy = sp; //@line 17925
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17927
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17929
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 17931
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17933
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17935
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17937
 $14 = HEAP16[$0 + 28 >> 1] | 0; //@line 17939
 $16 = HEAP8[$0 + 30 >> 0] | 0; //@line 17941
 if (HEAP8[___async_retval >> 0] & 1) {
  $19 = (HEAP8[$10 >> 0] | 0) != 0; //@line 17947
  $21 = HEAP32[$2 + 1888 >> 2] | 0; //@line 17949
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 17950
  __ZN7LoRaPHY15setup_rx_windowEbj($12, $19, $21); //@line 17951
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 411; //@line 17954
   $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 17955
   HEAP32[$22 >> 2] = $2; //@line 17956
   $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 17957
   HEAP32[$23 >> 2] = $4; //@line 17958
   $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 17959
   HEAP16[$24 >> 1] = $6; //@line 17960
   $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 17961
   HEAP32[$25 >> 2] = $8; //@line 17962
   $26 = $ReallocAsyncCtx3 + 20 | 0; //@line 17963
   HEAP32[$26 >> 2] = $10; //@line 17964
   $27 = $ReallocAsyncCtx3 + 24 | 0; //@line 17965
   HEAP16[$27 >> 1] = $14; //@line 17966
   $28 = $ReallocAsyncCtx3 + 26 | 0; //@line 17967
   HEAP8[$28 >> 0] = $16; //@line 17968
   sp = STACKTOP; //@line 17969
   STACKTOP = sp; //@line 17970
   return;
  }
  ___async_unwind = 0; //@line 17972
  HEAP32[$ReallocAsyncCtx3 >> 2] = 411; //@line 17973
  $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 17974
  HEAP32[$22 >> 2] = $2; //@line 17975
  $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 17976
  HEAP32[$23 >> 2] = $4; //@line 17977
  $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 17978
  HEAP16[$24 >> 1] = $6; //@line 17979
  $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 17980
  HEAP32[$25 >> 2] = $8; //@line 17981
  $26 = $ReallocAsyncCtx3 + 20 | 0; //@line 17982
  HEAP32[$26 >> 2] = $10; //@line 17983
  $27 = $ReallocAsyncCtx3 + 24 | 0; //@line 17984
  HEAP16[$27 >> 1] = $14; //@line 17985
  $28 = $ReallocAsyncCtx3 + 26 | 0; //@line 17986
  HEAP8[$28 >> 0] = $16; //@line 17987
  sp = STACKTOP; //@line 17988
  STACKTOP = sp; //@line 17989
  return;
 }
 $trunc = (HEAPU8[$4 >> 0] | 0) >>> 5; //@line 17992
 switch ($trunc & 7) {
 case 1:
  {
   if (!(HEAP8[$2 + 2360 >> 0] | 0)) {
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 18000
    __ZN7LoRaMac24handle_join_accept_frameEPKht($2, $4, $6); //@line 18001
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 415; //@line 18004
     $43 = $ReallocAsyncCtx2 + 4 | 0; //@line 18005
     HEAP32[$43 >> 2] = $2; //@line 18006
     sp = STACKTOP; //@line 18007
     STACKTOP = sp; //@line 18008
     return;
    }
    ___async_unwind = 0; //@line 18010
    HEAP32[$ReallocAsyncCtx2 >> 2] = 415; //@line 18011
    $43 = $ReallocAsyncCtx2 + 4 | 0; //@line 18012
    HEAP32[$43 >> 2] = $2; //@line 18013
    sp = STACKTOP; //@line 18014
    STACKTOP = sp; //@line 18015
    return;
   }
   if (!(HEAP8[$2 + 1177 >> 0] | 0)) {
    HEAP8[$2 + 2068 >> 0] = 0; //@line 18022
    STACKTOP = sp; //@line 18023
    return;
   }
   $37 = HEAP32[$2 + 1992 >> 2] | 0; //@line 18026
   HEAP32[$8 >> 2] = 389; //@line 18027
   HEAP32[$8 + 4 >> 2] = 0; //@line 18029
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 18030
   HEAP32[$$byval_copy >> 2] = HEAP32[$8 >> 2]; //@line 18031
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$8 + 4 >> 2]; //@line 18031
   $38 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($37, $2, $$byval_copy) | 0; //@line 18032
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 413; //@line 18035
    $39 = $ReallocAsyncCtx6 + 4 | 0; //@line 18036
    HEAP32[$39 >> 2] = $8; //@line 18037
    $40 = $ReallocAsyncCtx6 + 8 | 0; //@line 18038
    HEAP32[$40 >> 2] = $2; //@line 18039
    sp = STACKTOP; //@line 18040
    STACKTOP = sp; //@line 18041
    return;
   }
   HEAP32[___async_retval >> 2] = $38; //@line 18044
   ___async_unwind = 0; //@line 18045
   HEAP32[$ReallocAsyncCtx6 >> 2] = 413; //@line 18046
   $39 = $ReallocAsyncCtx6 + 4 | 0; //@line 18047
   HEAP32[$39 >> 2] = $8; //@line 18048
   $40 = $ReallocAsyncCtx6 + 8 | 0; //@line 18049
   HEAP32[$40 >> 2] = $2; //@line 18050
   sp = STACKTOP; //@line 18051
   STACKTOP = sp; //@line 18052
   return;
  }
 case 7:
 case 5:
 case 3:
  {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 18056
   __ZN7LoRaMac17handle_data_frameEPKhthhsa($2, $4, $6, 1, $trunc, $14, $16); //@line 18057
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 416; //@line 18060
    sp = STACKTOP; //@line 18061
    STACKTOP = sp; //@line 18062
    return;
   }
   ___async_unwind = 0; //@line 18064
   HEAP32[$ReallocAsyncCtx >> 2] = 416; //@line 18065
   sp = STACKTOP; //@line 18066
   STACKTOP = sp; //@line 18067
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 18071
   return;
  }
 }
}
function _mbedtls_internal_aes_encrypt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$in = 0, $$0136 = 0, $$0137 = 0, $$0138 = 0, $$0139 = 0, $$0140 = 0, $110 = 0, $130 = 0, $150 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $230 = 0, $250 = 0, $261 = 0, $268 = 0, $274 = 0, $276 = 0, $281 = 0, $288 = 0, $295 = 0, $301 = 0, $303 = 0, $308 = 0, $315 = 0, $322 = 0, $328 = 0, $329 = 0, $334 = 0, $341 = 0, $348 = 0, $354 = 0, $4 = 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 1059
 $$0$in = HEAP32[$0 >> 2] >> 1; //@line 1145
 $$0136 = $4 + 16 | 0; //@line 1145
 $$0137 = ((HEAPU8[$1 + 1 >> 0] | 0) << 8 | (HEAPU8[$1 >> 0] | 0) | (HEAPU8[$1 + 2 >> 0] | 0) << 16 | (HEAPU8[$1 + 3 >> 0] | 0) << 24) ^ HEAP32[$4 >> 2]; //@line 1145
 $$0138 = ((HEAPU8[$1 + 5 >> 0] | 0) << 8 | (HEAPU8[$1 + 4 >> 0] | 0) | (HEAPU8[$1 + 6 >> 0] | 0) << 16 | (HEAPU8[$1 + 7 >> 0] | 0) << 24) ^ HEAP32[$4 + 4 >> 2]; //@line 1145
 $$0139 = ((HEAPU8[$1 + 13 >> 0] | 0) << 8 | (HEAPU8[$1 + 12 >> 0] | 0) | (HEAPU8[$1 + 14 >> 0] | 0) << 16 | (HEAPU8[$1 + 15 >> 0] | 0) << 24) ^ HEAP32[$4 + 12 >> 2]; //@line 1145
 $$0140 = ((HEAPU8[$1 + 9 >> 0] | 0) << 8 | (HEAPU8[$1 + 8 >> 0] | 0) | (HEAPU8[$1 + 10 >> 0] | 0) << 16 | (HEAPU8[$1 + 11 >> 0] | 0) << 24) ^ HEAP32[$4 + 8 >> 2]; //@line 1145
 while (1) {
  $110 = HEAP32[5380 + (($$0137 & 255) << 2) >> 2] ^ HEAP32[$$0136 >> 2] ^ HEAP32[6404 + (($$0138 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7428 + (($$0140 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8452 + ($$0139 >>> 24 << 2) >> 2]; //@line 1167
  $130 = HEAP32[5380 + (($$0138 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 4 >> 2] ^ HEAP32[6404 + (($$0140 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7428 + (($$0139 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8452 + ($$0137 >>> 24 << 2) >> 2]; //@line 1187
  $150 = HEAP32[5380 + (($$0140 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 8 >> 2] ^ HEAP32[6404 + (($$0139 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7428 + (($$0137 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8452 + ($$0138 >>> 24 << 2) >> 2]; //@line 1207
  $170 = HEAP32[5380 + (($$0139 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 12 >> 2] ^ HEAP32[6404 + (($$0137 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7428 + (($$0138 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8452 + ($$0140 >>> 24 << 2) >> 2]; //@line 1227
  $171 = $$0136 + 20 | 0; //@line 1228
  $172 = HEAP32[$$0136 + 16 >> 2] | 0; //@line 1229
  $173 = $110 & 255; //@line 1230
  if (($$0$in | 0) <= 1) {
   break;
  }
  $230 = HEAP32[5380 + (($150 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 24 >> 2] ^ HEAP32[6404 + (($170 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7428 + (($110 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8452 + ($130 >>> 24 << 2) >> 2]; //@line 1291
  $250 = HEAP32[5380 + (($170 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 28 >> 2] ^ HEAP32[6404 + (($110 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7428 + (($130 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8452 + ($150 >>> 24 << 2) >> 2]; //@line 1311
  $$0$in = $$0$in + -1 | 0; //@line 1312
  $$0136 = $$0136 + 32 | 0; //@line 1312
  $$0137 = HEAP32[5380 + ($173 << 2) >> 2] ^ $172 ^ HEAP32[6404 + (($130 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7428 + (($150 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8452 + ($170 >>> 24 << 2) >> 2]; //@line 1312
  $$0138 = HEAP32[5380 + (($130 & 255) << 2) >> 2] ^ HEAP32[$171 >> 2] ^ HEAP32[6404 + (($150 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7428 + (($170 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8452 + ($110 >>> 24 << 2) >> 2]; //@line 1312
  $$0139 = $250; //@line 1312
  $$0140 = $230; //@line 1312
 }
 $261 = (HEAPU8[13773 + ($130 >>> 8 & 255) >> 0] | 0) << 8 ^ $172; //@line 1324
 $268 = (HEAPU8[13773 + ($150 >>> 16 & 255) >> 0] | 0) << 16 ^ $172; //@line 1331
 $274 = (HEAPU8[13773 + ($170 >>> 24) >> 0] | 0) << 24 ^ $172; //@line 1337
 $276 = HEAP32[$171 >> 2] | 0; //@line 1339
 $281 = $276 ^ (HEAPU8[13773 + ($130 & 255) >> 0] | 0); //@line 1344
 $288 = (HEAPU8[13773 + ($150 >>> 8 & 255) >> 0] | 0) << 8 ^ $276; //@line 1351
 $295 = (HEAPU8[13773 + ($170 >>> 16 & 255) >> 0] | 0) << 16 ^ $276; //@line 1358
 $301 = (HEAPU8[13773 + ($110 >>> 24) >> 0] | 0) << 24 ^ $276; //@line 1364
 $303 = HEAP32[$$0136 + 24 >> 2] | 0; //@line 1366
 $308 = $303 ^ (HEAPU8[13773 + ($150 & 255) >> 0] | 0); //@line 1371
 $315 = (HEAPU8[13773 + ($170 >>> 8 & 255) >> 0] | 0) << 8 ^ $303; //@line 1378
 $322 = (HEAPU8[13773 + ($110 >>> 16 & 255) >> 0] | 0) << 16 ^ $303; //@line 1385
 $328 = (HEAPU8[13773 + ($130 >>> 24) >> 0] | 0) << 24 ^ $303; //@line 1391
 $329 = HEAP32[$$0136 + 28 >> 2] | 0; //@line 1392
 $334 = $329 ^ (HEAPU8[13773 + ($170 & 255) >> 0] | 0); //@line 1397
 $341 = (HEAPU8[13773 + ($110 >>> 8 & 255) >> 0] | 0) << 8 ^ $329; //@line 1404
 $348 = (HEAPU8[13773 + ($130 >>> 16 & 255) >> 0] | 0) << 16 ^ $329; //@line 1411
 $354 = (HEAPU8[13773 + ($150 >>> 24) >> 0] | 0) << 24 ^ $329; //@line 1417
 HEAP8[$2 >> 0] = $172 ^ (HEAPU8[13773 + $173 >> 0] | 0); //@line 1419
 HEAP8[$2 + 1 >> 0] = $261 >>> 8; //@line 1423
 HEAP8[$2 + 2 >> 0] = $268 >>> 16; //@line 1427
 HEAP8[$2 + 3 >> 0] = $274 >>> 24; //@line 1431
 HEAP8[$2 + 4 >> 0] = $281; //@line 1434
 HEAP8[$2 + 5 >> 0] = $288 >>> 8; //@line 1438
 HEAP8[$2 + 6 >> 0] = $295 >>> 16; //@line 1442
 HEAP8[$2 + 7 >> 0] = $301 >>> 24; //@line 1446
 HEAP8[$2 + 8 >> 0] = $308; //@line 1449
 HEAP8[$2 + 9 >> 0] = $315 >>> 8; //@line 1453
 HEAP8[$2 + 10 >> 0] = $322 >>> 16; //@line 1457
 HEAP8[$2 + 11 >> 0] = $328 >>> 24; //@line 1461
 HEAP8[$2 + 12 >> 0] = $334; //@line 1464
 HEAP8[$2 + 13 >> 0] = $341 >>> 8; //@line 1468
 HEAP8[$2 + 14 >> 0] = $348 >>> 16; //@line 1472
 HEAP8[$2 + 15 >> 0] = $354 >>> 24; //@line 1476
 return 0; //@line 1477
}
function _mbedtls_internal_aes_decrypt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$in = 0, $$0136 = 0, $$0137 = 0, $$0138 = 0, $$0139 = 0, $$0140 = 0, $110 = 0, $130 = 0, $150 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $230 = 0, $250 = 0, $261 = 0, $268 = 0, $274 = 0, $276 = 0, $281 = 0, $288 = 0, $295 = 0, $301 = 0, $303 = 0, $308 = 0, $315 = 0, $322 = 0, $328 = 0, $329 = 0, $334 = 0, $341 = 0, $348 = 0, $354 = 0, $4 = 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 1506
 $$0$in = HEAP32[$0 >> 2] >> 1; //@line 1592
 $$0136 = $4 + 16 | 0; //@line 1592
 $$0137 = ((HEAPU8[$1 + 1 >> 0] | 0) << 8 | (HEAPU8[$1 >> 0] | 0) | (HEAPU8[$1 + 2 >> 0] | 0) << 16 | (HEAPU8[$1 + 3 >> 0] | 0) << 24) ^ HEAP32[$4 >> 2]; //@line 1592
 $$0138 = ((HEAPU8[$1 + 5 >> 0] | 0) << 8 | (HEAPU8[$1 + 4 >> 0] | 0) | (HEAPU8[$1 + 6 >> 0] | 0) << 16 | (HEAPU8[$1 + 7 >> 0] | 0) << 24) ^ HEAP32[$4 + 4 >> 2]; //@line 1592
 $$0139 = ((HEAPU8[$1 + 13 >> 0] | 0) << 8 | (HEAPU8[$1 + 12 >> 0] | 0) | (HEAPU8[$1 + 14 >> 0] | 0) << 16 | (HEAPU8[$1 + 15 >> 0] | 0) << 24) ^ HEAP32[$4 + 12 >> 2]; //@line 1592
 $$0140 = ((HEAPU8[$1 + 9 >> 0] | 0) << 8 | (HEAPU8[$1 + 8 >> 0] | 0) | (HEAPU8[$1 + 10 >> 0] | 0) << 16 | (HEAPU8[$1 + 11 >> 0] | 0) << 24) ^ HEAP32[$4 + 8 >> 2]; //@line 1592
 while (1) {
  $110 = HEAP32[1284 + (($$0137 & 255) << 2) >> 2] ^ HEAP32[$$0136 >> 2] ^ HEAP32[2308 + (($$0139 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3332 + (($$0140 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4356 + ($$0138 >>> 24 << 2) >> 2]; //@line 1614
  $130 = HEAP32[1284 + (($$0138 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 4 >> 2] ^ HEAP32[2308 + (($$0137 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3332 + (($$0139 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4356 + ($$0140 >>> 24 << 2) >> 2]; //@line 1634
  $150 = HEAP32[1284 + (($$0140 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 8 >> 2] ^ HEAP32[2308 + (($$0138 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3332 + (($$0137 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4356 + ($$0139 >>> 24 << 2) >> 2]; //@line 1654
  $170 = HEAP32[1284 + (($$0139 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 12 >> 2] ^ HEAP32[2308 + (($$0140 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3332 + (($$0138 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4356 + ($$0137 >>> 24 << 2) >> 2]; //@line 1674
  $171 = $$0136 + 20 | 0; //@line 1675
  $172 = HEAP32[$$0136 + 16 >> 2] | 0; //@line 1676
  $173 = $110 & 255; //@line 1677
  if (($$0$in | 0) <= 1) {
   break;
  }
  $230 = HEAP32[1284 + (($150 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 24 >> 2] ^ HEAP32[2308 + (($130 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3332 + (($110 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4356 + ($170 >>> 24 << 2) >> 2]; //@line 1738
  $250 = HEAP32[1284 + (($170 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 28 >> 2] ^ HEAP32[2308 + (($150 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3332 + (($130 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4356 + ($110 >>> 24 << 2) >> 2]; //@line 1758
  $$0$in = $$0$in + -1 | 0; //@line 1759
  $$0136 = $$0136 + 32 | 0; //@line 1759
  $$0137 = HEAP32[1284 + ($173 << 2) >> 2] ^ $172 ^ HEAP32[2308 + (($170 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3332 + (($150 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4356 + ($130 >>> 24 << 2) >> 2]; //@line 1759
  $$0138 = HEAP32[1284 + (($130 & 255) << 2) >> 2] ^ HEAP32[$171 >> 2] ^ HEAP32[2308 + (($110 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3332 + (($170 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4356 + ($150 >>> 24 << 2) >> 2]; //@line 1759
  $$0139 = $250; //@line 1759
  $$0140 = $230; //@line 1759
 }
 $261 = (HEAPU8[14029 + ($170 >>> 8 & 255) >> 0] | 0) << 8 ^ $172; //@line 1771
 $268 = (HEAPU8[14029 + ($150 >>> 16 & 255) >> 0] | 0) << 16 ^ $172; //@line 1778
 $274 = (HEAPU8[14029 + ($130 >>> 24) >> 0] | 0) << 24 ^ $172; //@line 1784
 $276 = HEAP32[$171 >> 2] | 0; //@line 1786
 $281 = $276 ^ (HEAPU8[14029 + ($130 & 255) >> 0] | 0); //@line 1791
 $288 = (HEAPU8[14029 + ($110 >>> 8 & 255) >> 0] | 0) << 8 ^ $276; //@line 1798
 $295 = (HEAPU8[14029 + ($170 >>> 16 & 255) >> 0] | 0) << 16 ^ $276; //@line 1805
 $301 = (HEAPU8[14029 + ($150 >>> 24) >> 0] | 0) << 24 ^ $276; //@line 1811
 $303 = HEAP32[$$0136 + 24 >> 2] | 0; //@line 1813
 $308 = $303 ^ (HEAPU8[14029 + ($150 & 255) >> 0] | 0); //@line 1818
 $315 = (HEAPU8[14029 + ($130 >>> 8 & 255) >> 0] | 0) << 8 ^ $303; //@line 1825
 $322 = (HEAPU8[14029 + ($110 >>> 16 & 255) >> 0] | 0) << 16 ^ $303; //@line 1832
 $328 = (HEAPU8[14029 + ($170 >>> 24) >> 0] | 0) << 24 ^ $303; //@line 1838
 $329 = HEAP32[$$0136 + 28 >> 2] | 0; //@line 1839
 $334 = $329 ^ (HEAPU8[14029 + ($170 & 255) >> 0] | 0); //@line 1844
 $341 = (HEAPU8[14029 + ($150 >>> 8 & 255) >> 0] | 0) << 8 ^ $329; //@line 1851
 $348 = (HEAPU8[14029 + ($130 >>> 16 & 255) >> 0] | 0) << 16 ^ $329; //@line 1858
 $354 = (HEAPU8[14029 + ($110 >>> 24) >> 0] | 0) << 24 ^ $329; //@line 1864
 HEAP8[$2 >> 0] = $172 ^ (HEAPU8[14029 + $173 >> 0] | 0); //@line 1866
 HEAP8[$2 + 1 >> 0] = $261 >>> 8; //@line 1870
 HEAP8[$2 + 2 >> 0] = $268 >>> 16; //@line 1874
 HEAP8[$2 + 3 >> 0] = $274 >>> 24; //@line 1878
 HEAP8[$2 + 4 >> 0] = $281; //@line 1881
 HEAP8[$2 + 5 >> 0] = $288 >>> 8; //@line 1885
 HEAP8[$2 + 6 >> 0] = $295 >>> 16; //@line 1889
 HEAP8[$2 + 7 >> 0] = $301 >>> 24; //@line 1893
 HEAP8[$2 + 8 >> 0] = $308; //@line 1896
 HEAP8[$2 + 9 >> 0] = $315 >>> 8; //@line 1900
 HEAP8[$2 + 10 >> 0] = $322 >>> 16; //@line 1904
 HEAP8[$2 + 11 >> 0] = $328 >>> 24; //@line 1908
 HEAP8[$2 + 12 >> 0] = $334; //@line 1911
 HEAP8[$2 + 13 >> 0] = $341 >>> 8; //@line 1915
 HEAP8[$2 + 14 >> 0] = $348 >>> 16; //@line 1919
 HEAP8[$2 + 15 >> 0] = $354 >>> 24; //@line 1923
 return 0; //@line 1924
}
function __ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$01722$i = 0, $$01821$i = 0, $$023$i = 0, $$2$i = 0, $$220$i = 0, $$sink = 0, $10 = 0, $11 = 0, $15 = 0, $22 = 0, $23 = 0, $25 = 0, $37 = 0, $39 = 0, $40 = 0, $42 = 0, $44 = 0, $45 = 0, $47 = 0, $5 = 0, $55 = 0, $57 = 0, $7 = 0, $74 = 0, $77 = 0, $8 = 0, $9 = 0, $90 = 0, $91 = 0, $indvars$iv$i = 0, $indvars$iv$i27 = 0, $wide$trip$count$i = 0, $wide$trip$count$i25 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 20390
 STACKTOP = STACKTOP + 16 | 0; //@line 20391
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 20391
 $5 = sp; //@line 20392
 dest = $5; //@line 20393
 stop = dest + 16 | 0; //@line 20393
 do {
  HEAP8[dest >> 0] = 255; //@line 20393
  dest = dest + 1 | 0; //@line 20393
 } while ((dest | 0) < (stop | 0));
 $7 = HEAP32[$0 + 72 >> 2] | 0; //@line 20395
 $8 = $0 + 116 | 0; //@line 20396
 $9 = HEAP32[$8 >> 2] | 0; //@line 20397
 $10 = $0 + 113 | 0; //@line 20398
 $11 = HEAP8[$10 >> 0] | 0; //@line 20399
 if (!((__ZN7LoRaPHY19num_active_channelsEPthh(0, $9, 0, $11) | 0) << 24 >> 24)) {
  $15 = HEAP32[$0 + 120 >> 2] | 0; //@line 20404
  if ($11 << 24 >> 24 != 0 & (($9 | 0) != 0 & ($15 | 0) != 0)) {
   $wide$trip$count$i = $11 & 255; //@line 20411
   $indvars$iv$i = 0; //@line 20412
   do {
    HEAP16[$9 + ($indvars$iv$i << 1) >> 1] = HEAP16[$15 + ($indvars$iv$i << 1) >> 1] | 0; //@line 20417
    $indvars$iv$i = $indvars$iv$i + 1 | 0; //@line 20418
   } while (($indvars$iv$i | 0) != ($wide$trip$count$i | 0));
  }
 }
 $22 = HEAP32[$1 >> 2] | 0; //@line 20428
 $23 = $0 + 8 | 0; //@line 20429
 $25 = $1 + 4 | 0; //@line 20431
 if ($22 >>> 0 > (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$23 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0) >>> 0) {
  $77 = HEAP32[$1 >> 2] | 0; //@line 20436
  $$0 = -1020; //@line 20441
  $$sink = $77 - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$23 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0) | 0; //@line 20441
  HEAP32[$3 >> 2] = $$sink; //@line 20442
  STACKTOP = sp; //@line 20443
  return $$0 | 0; //@line 20443
 }
 HEAP32[$4 >> 2] = 0; //@line 20445
 $37 = __ZN7LoRaPHY19update_band_timeoffEbbP6band_th($0, (HEAP8[$1 + 9 >> 0] | 0) != 0, (HEAP8[$1 + 10 >> 0] | 0) != 0, $7, HEAP8[$0 + 76 >> 0] | 0) | 0; //@line 20454
 $39 = HEAP8[$1 + 8 >> 0] | 0; //@line 20456
 $40 = HEAP32[$8 >> 2] | 0; //@line 20457
 $42 = HEAP8[$0 + 20 >> 0] | 0; //@line 20459
 do {
  if ($42 << 24 >> 24) {
   $44 = $0 + 124 | 0; //@line 20463
   $45 = $0 + 72 | 0; //@line 20464
   $$01722$i = 0; //@line 20465
   $$01821$i = 0; //@line 20465
   $$023$i = 0; //@line 20465
   $47 = 0; //@line 20465
   while (1) {
    do {
     if (!(1 << ($47 & 15) & HEAPU16[$40 + ($47 >>> 4 << 1) >> 1])) {
      $$2$i = $$023$i; //@line 20477
      $$220$i = $$01821$i; //@line 20477
     } else {
      $55 = HEAP32[$44 >> 2] | 0; //@line 20479
      $57 = HEAP8[$55 + ($47 * 12 | 0) + 8 >> 0] | 0; //@line 20481
      if ($57 << 24 >> 24 >> 4 << 24 >> 24 >= $39 << 24 >> 24 ? ($57 << 4 & 255) << 24 >> 24 >> 4 << 24 >> 24 <= $39 << 24 >> 24 : 0) {
       if (!(HEAP32[(HEAP32[$45 >> 2] | 0) + ((HEAPU8[$55 + ($47 * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 12 >> 2] | 0)) {
        HEAP8[$5 + ($$023$i & 255) >> 0] = $$01722$i; //@line 20500
        $$2$i = $$023$i + 1 << 24 >> 24; //@line 20501
        $$220$i = $$01821$i; //@line 20501
        break;
       } else {
        $$2$i = $$023$i; //@line 20505
        $$220$i = $$01821$i + 1 << 24 >> 24; //@line 20505
        break;
       }
      } else {
       $$2$i = $$023$i; //@line 20509
       $$220$i = $$01821$i; //@line 20509
      }
     }
    } while (0);
    $74 = $$01722$i + 1 << 24 >> 24; //@line 20513
    if (($74 & 255) < ($42 & 255)) {
     $$01722$i = $74; //@line 20517
     $$01821$i = $$220$i; //@line 20517
     $$023$i = $$2$i; //@line 20517
     $47 = $74 & 255; //@line 20517
    } else {
     break;
    }
   }
   if (!($$2$i << 24 >> 24)) {
    if (!($$220$i << 24 >> 24)) {
     break;
    } else {
     $$0 = -1020; //@line 20528
     $$sink = $37; //@line 20528
    }
    HEAP32[$3 >> 2] = $$sink; //@line 20530
    STACKTOP = sp; //@line 20531
    return $$0 | 0; //@line 20531
   } else {
    HEAP8[$2 >> 0] = HEAP8[$5 + ((_rand() | 0) % ($$2$i & 255 | 0) | 0) >> 0] | 0; //@line 20538
    $$0 = 0; //@line 20539
    $$sink = 0; //@line 20539
    HEAP32[$3 >> 2] = $$sink; //@line 20540
    STACKTOP = sp; //@line 20541
    return $$0 | 0; //@line 20541
   }
  }
 } while (0);
 $90 = HEAP32[$0 + 120 >> 2] | 0; //@line 20546
 $91 = HEAP8[$10 >> 0] | 0; //@line 20547
 if (!(($40 | 0) != 0 & ($90 | 0) != 0 & $91 << 24 >> 24 != 0)) {
  $$0 = -1021; //@line 20554
  $$sink = 0; //@line 20554
  HEAP32[$3 >> 2] = $$sink; //@line 20555
  STACKTOP = sp; //@line 20556
  return $$0 | 0; //@line 20556
 }
 $wide$trip$count$i25 = $91 & 255; //@line 20558
 $indvars$iv$i27 = 0; //@line 20559
 do {
  HEAP16[$40 + ($indvars$iv$i27 << 1) >> 1] = HEAP16[$90 + ($indvars$iv$i27 << 1) >> 1] | 0; //@line 20564
  $indvars$iv$i27 = $indvars$iv$i27 + 1 | 0; //@line 20565
 } while (($indvars$iv$i27 | 0) != ($wide$trip$count$i25 | 0));
 $$0 = -1021; //@line 20568
 $$sink = 0; //@line 20568
 HEAP32[$3 >> 2] = $$sink; //@line 20574
 STACKTOP = sp; //@line 20575
 return $$0 | 0; //@line 20575
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_372($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 29463
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29465
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29467
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29469
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29473
 $11 = $10 + 12 | 0; //@line 29474
 HEAP32[$10 >> 2] = 180; //@line 29475
 HEAP32[$10 + 4 >> 2] = 0; //@line 29477
 HEAP32[$10 + 8 >> 2] = $6; //@line 29479
 HEAP32[$11 >> 2] = 808; //@line 29480
 $12 = $6 + 2416 | 0; //@line 29481
 if (($12 | 0) == ($10 | 0)) {
  $35 = HEAP32[204] | 0; //@line 29485
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(20) | 0; //@line 29486
  FUNCTION_TABLE_vi[$35 & 1023]($10); //@line 29487
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 183; //@line 29490
   $36 = $ReallocAsyncCtx15 + 4 | 0; //@line 29491
   HEAP32[$36 >> 2] = $10; //@line 29492
   $37 = $ReallocAsyncCtx15 + 8 | 0; //@line 29493
   HEAP32[$37 >> 2] = $6; //@line 29494
   $38 = $ReallocAsyncCtx15 + 12 | 0; //@line 29495
   HEAP32[$38 >> 2] = $2; //@line 29496
   $39 = $ReallocAsyncCtx15 + 16 | 0; //@line 29497
   HEAP32[$39 >> 2] = $4; //@line 29498
   sp = STACKTOP; //@line 29499
   return;
  }
  ___async_unwind = 0; //@line 29502
  HEAP32[$ReallocAsyncCtx15 >> 2] = 183; //@line 29503
  $36 = $ReallocAsyncCtx15 + 4 | 0; //@line 29504
  HEAP32[$36 >> 2] = $10; //@line 29505
  $37 = $ReallocAsyncCtx15 + 8 | 0; //@line 29506
  HEAP32[$37 >> 2] = $6; //@line 29507
  $38 = $ReallocAsyncCtx15 + 12 | 0; //@line 29508
  HEAP32[$38 >> 2] = $2; //@line 29509
  $39 = $ReallocAsyncCtx15 + 16 | 0; //@line 29510
  HEAP32[$39 >> 2] = $4; //@line 29511
  sp = STACKTOP; //@line 29512
  return;
 }
 $14 = $6 + 2428 | 0; //@line 29515
 $15 = HEAP32[$14 >> 2] | 0; //@line 29516
 if (!$15) {
  $27 = HEAP32[203] | 0; //@line 29520
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(28) | 0; //@line 29521
  FUNCTION_TABLE_vii[$27 & 15]($12, $10); //@line 29522
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 182; //@line 29525
   $28 = $ReallocAsyncCtx14 + 4 | 0; //@line 29526
   HEAP32[$28 >> 2] = $11; //@line 29527
   $29 = $ReallocAsyncCtx14 + 8 | 0; //@line 29528
   HEAP32[$29 >> 2] = $14; //@line 29529
   $30 = $ReallocAsyncCtx14 + 12 | 0; //@line 29530
   HEAP32[$30 >> 2] = $10; //@line 29531
   $31 = $ReallocAsyncCtx14 + 16 | 0; //@line 29532
   HEAP32[$31 >> 2] = $6; //@line 29533
   $32 = $ReallocAsyncCtx14 + 20 | 0; //@line 29534
   HEAP32[$32 >> 2] = $2; //@line 29535
   $33 = $ReallocAsyncCtx14 + 24 | 0; //@line 29536
   HEAP32[$33 >> 2] = $4; //@line 29537
   sp = STACKTOP; //@line 29538
   return;
  }
  ___async_unwind = 0; //@line 29541
  HEAP32[$ReallocAsyncCtx14 >> 2] = 182; //@line 29542
  $28 = $ReallocAsyncCtx14 + 4 | 0; //@line 29543
  HEAP32[$28 >> 2] = $11; //@line 29544
  $29 = $ReallocAsyncCtx14 + 8 | 0; //@line 29545
  HEAP32[$29 >> 2] = $14; //@line 29546
  $30 = $ReallocAsyncCtx14 + 12 | 0; //@line 29547
  HEAP32[$30 >> 2] = $10; //@line 29548
  $31 = $ReallocAsyncCtx14 + 16 | 0; //@line 29549
  HEAP32[$31 >> 2] = $6; //@line 29550
  $32 = $ReallocAsyncCtx14 + 20 | 0; //@line 29551
  HEAP32[$32 >> 2] = $2; //@line 29552
  $33 = $ReallocAsyncCtx14 + 24 | 0; //@line 29553
  HEAP32[$33 >> 2] = $4; //@line 29554
  sp = STACKTOP; //@line 29555
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 29559
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(32) | 0; //@line 29560
  FUNCTION_TABLE_vi[$18 & 1023]($12); //@line 29561
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 29564
   $19 = $ReallocAsyncCtx13 + 4 | 0; //@line 29565
   HEAP32[$19 >> 2] = $11; //@line 29566
   $20 = $ReallocAsyncCtx13 + 8 | 0; //@line 29567
   HEAP32[$20 >> 2] = $14; //@line 29568
   $21 = $ReallocAsyncCtx13 + 12 | 0; //@line 29569
   HEAP32[$21 >> 2] = $12; //@line 29570
   $22 = $ReallocAsyncCtx13 + 16 | 0; //@line 29571
   HEAP32[$22 >> 2] = $10; //@line 29572
   $23 = $ReallocAsyncCtx13 + 20 | 0; //@line 29573
   HEAP32[$23 >> 2] = $6; //@line 29574
   $24 = $ReallocAsyncCtx13 + 24 | 0; //@line 29575
   HEAP32[$24 >> 2] = $2; //@line 29576
   $25 = $ReallocAsyncCtx13 + 28 | 0; //@line 29577
   HEAP32[$25 >> 2] = $4; //@line 29578
   sp = STACKTOP; //@line 29579
   return;
  }
  ___async_unwind = 0; //@line 29582
  HEAP32[$ReallocAsyncCtx13 >> 2] = 181; //@line 29583
  $19 = $ReallocAsyncCtx13 + 4 | 0; //@line 29584
  HEAP32[$19 >> 2] = $11; //@line 29585
  $20 = $ReallocAsyncCtx13 + 8 | 0; //@line 29586
  HEAP32[$20 >> 2] = $14; //@line 29587
  $21 = $ReallocAsyncCtx13 + 12 | 0; //@line 29588
  HEAP32[$21 >> 2] = $12; //@line 29589
  $22 = $ReallocAsyncCtx13 + 16 | 0; //@line 29590
  HEAP32[$22 >> 2] = $10; //@line 29591
  $23 = $ReallocAsyncCtx13 + 20 | 0; //@line 29592
  HEAP32[$23 >> 2] = $6; //@line 29593
  $24 = $ReallocAsyncCtx13 + 24 | 0; //@line 29594
  HEAP32[$24 >> 2] = $2; //@line 29595
  $25 = $ReallocAsyncCtx13 + 28 | 0; //@line 29596
  HEAP32[$25 >> 2] = $4; //@line 29597
  sp = STACKTOP; //@line 29598
  return;
 }
}
function _mbedtls_aes_setkey_enc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0103117 = 0, $$0106 = 0, $$0112 = 0, $$1104111 = 0, $$1114 = 0, $$2105113 = 0, $$2116 = 0, $$3115 = 0, $$sink = 0, $107 = 0, $111 = 0, $115 = 0, $119 = 0, $127 = 0, $129 = 0, $158 = 0, $162 = 0, $166 = 0, $194 = 0, $198 = 0, $202 = 0, $3 = 0, $33 = 0, $35 = 0, $5 = 0, $6 = 0, $64 = 0, $68 = 0, $76 = 0, $78 = 0, $$0112$looptemp = 0, $$1114$looptemp = 0, $$2116$looptemp = 0;
 switch ($2 | 0) {
 case 128:
  {
   $$sink = 10; //@line 497
   break;
  }
 case 192:
  {
   $$sink = 12; //@line 501
   break;
  }
 case 256:
  {
   $$sink = 14; //@line 505
   break;
  }
 default:
  {
   $$0106 = -32; //@line 509
   return $$0106 | 0; //@line 510
  }
 }
 HEAP32[$0 >> 2] = $$sink; //@line 513
 $3 = $0 + 8 | 0; //@line 514
 HEAP32[$0 + 4 >> 2] = $3; //@line 516
 $5 = $2 >>> 5; //@line 517
 $$0103117 = 0; //@line 518
 do {
  $6 = $$0103117 << 2; //@line 520
  HEAP32[$0 + 8 + ($$0103117 << 2) >> 2] = (HEAPU8[$1 + ($6 | 1) >> 0] | 0) << 8 | (HEAPU8[$1 + $6 >> 0] | 0) | (HEAPU8[$1 + ($6 | 2) >> 0] | 0) << 16 | (HEAPU8[$1 + ($6 | 3) >> 0] | 0) << 24; //@line 543
  $$0103117 = $$0103117 + 1 | 0; //@line 544
 } while (($$0103117 | 0) != ($5 | 0));
 switch (HEAP32[$0 >> 2] | 0) {
 case 10:
  {
   $$0112 = $3; //@line 556
   $$1104111 = 0; //@line 556
   $33 = HEAP32[$3 >> 2] | 0; //@line 556
   do {
    $35 = HEAP32[$$0112 + 12 >> 2] | 0; //@line 562
    $33 = HEAP32[1244 + ($$1104111 << 2) >> 2] ^ $33 ^ (HEAPU8[13773 + ($35 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[13773 + ($35 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13773 + ($35 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[13773 + ($35 & 255) >> 0] | 0) << 24; //@line 587
    $$0112$looptemp = $$0112;
    $$0112 = $$0112 + 16 | 0; //@line 588
    HEAP32[$$0112 >> 2] = $33; //@line 589
    $64 = $33 ^ HEAP32[$$0112$looptemp + 4 >> 2]; //@line 592
    HEAP32[$$0112$looptemp + 20 >> 2] = $64; //@line 594
    $68 = HEAP32[$$0112$looptemp + 8 >> 2] ^ $64; //@line 597
    HEAP32[$$0112$looptemp + 24 >> 2] = $68; //@line 599
    HEAP32[$$0112$looptemp + 28 >> 2] = $35 ^ $68; //@line 602
    $$1104111 = $$1104111 + 1 | 0; //@line 603
   } while (($$1104111 | 0) != 10);
   $$0106 = 0; //@line 606
   return $$0106 | 0; //@line 612
  }
 case 12:
  {
   $$1114 = $3; //@line 617
   $$2105113 = 0; //@line 617
   $76 = HEAP32[$3 >> 2] | 0; //@line 617
   do {
    $78 = HEAP32[$$1114 + 20 >> 2] | 0; //@line 623
    $76 = HEAP32[1244 + ($$2105113 << 2) >> 2] ^ $76 ^ (HEAPU8[13773 + ($78 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[13773 + ($78 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13773 + ($78 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[13773 + ($78 & 255) >> 0] | 0) << 24; //@line 648
    $$1114$looptemp = $$1114;
    $$1114 = $$1114 + 24 | 0; //@line 649
    HEAP32[$$1114 >> 2] = $76; //@line 650
    $107 = $76 ^ HEAP32[$$1114$looptemp + 4 >> 2]; //@line 653
    HEAP32[$$1114$looptemp + 28 >> 2] = $107; //@line 655
    $111 = HEAP32[$$1114$looptemp + 8 >> 2] ^ $107; //@line 658
    HEAP32[$$1114$looptemp + 32 >> 2] = $111; //@line 660
    $115 = HEAP32[$$1114$looptemp + 12 >> 2] ^ $111; //@line 663
    HEAP32[$$1114$looptemp + 36 >> 2] = $115; //@line 665
    $119 = HEAP32[$$1114$looptemp + 16 >> 2] ^ $115; //@line 668
    HEAP32[$$1114$looptemp + 40 >> 2] = $119; //@line 670
    HEAP32[$$1114$looptemp + 44 >> 2] = $78 ^ $119; //@line 673
    $$2105113 = $$2105113 + 1 | 0; //@line 674
   } while (($$2105113 | 0) != 8);
   $$0106 = 0; //@line 677
   return $$0106 | 0; //@line 683
  }
 case 14:
  {
   $$2116 = $3; //@line 688
   $$3115 = 0; //@line 688
   $127 = HEAP32[$3 >> 2] | 0; //@line 688
   do {
    $129 = HEAP32[$$2116 + 28 >> 2] | 0; //@line 694
    $127 = HEAP32[1244 + ($$3115 << 2) >> 2] ^ $127 ^ (HEAPU8[13773 + ($129 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[13773 + ($129 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13773 + ($129 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[13773 + ($129 & 255) >> 0] | 0) << 24; //@line 719
    $$2116$looptemp = $$2116;
    $$2116 = $$2116 + 32 | 0; //@line 720
    HEAP32[$$2116 >> 2] = $127; //@line 721
    $158 = $127 ^ HEAP32[$$2116$looptemp + 4 >> 2]; //@line 724
    HEAP32[$$2116$looptemp + 36 >> 2] = $158; //@line 726
    $162 = HEAP32[$$2116$looptemp + 8 >> 2] ^ $158; //@line 729
    HEAP32[$$2116$looptemp + 40 >> 2] = $162; //@line 731
    $166 = HEAP32[$$2116$looptemp + 12 >> 2] ^ $162; //@line 734
    HEAP32[$$2116$looptemp + 44 >> 2] = $166; //@line 736
    $194 = HEAP32[$$2116$looptemp + 16 >> 2] ^ (HEAPU8[13773 + ($166 & 255) >> 0] | 0) ^ (HEAPU8[13773 + ($166 >>> 8 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13773 + ($166 >>> 16 & 255) >> 0] | 0) << 16 ^ (HEAPU8[13773 + ($166 >>> 24) >> 0] | 0) << 24; //@line 763
    HEAP32[$$2116$looptemp + 48 >> 2] = $194; //@line 765
    $198 = $194 ^ HEAP32[$$2116$looptemp + 20 >> 2]; //@line 768
    HEAP32[$$2116$looptemp + 52 >> 2] = $198; //@line 770
    $202 = HEAP32[$$2116$looptemp + 24 >> 2] ^ $198; //@line 773
    HEAP32[$$2116$looptemp + 56 >> 2] = $202; //@line 775
    HEAP32[$$2116$looptemp + 60 >> 2] = $129 ^ $202; //@line 778
    $$3115 = $$3115 + 1 | 0; //@line 779
   } while (($$3115 | 0) != 7);
   $$0106 = 0; //@line 782
   return $$0106 | 0; //@line 788
  }
 default:
  {
   $$0106 = 0; //@line 792
   return $$0106 | 0; //@line 793
  }
 }
 return 0; //@line 796
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_147($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $40 = 0, $41 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 28573
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28575
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28577
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28579
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28581
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28583
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28587
 $14 = HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0; //@line 28588
 if ($14 | 0) {
  $17 = HEAP32[$14 + 8 >> 2] | 0; //@line 28592
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(28) | 0; //@line 28593
  FUNCTION_TABLE_vi[$17 & 1023]($4); //@line 28594
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 245; //@line 28597
   $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 28598
   HEAP32[$18 >> 2] = $2; //@line 28599
   $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 28600
   HEAP32[$19 >> 2] = $4; //@line 28601
   $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 28602
   HEAP32[$20 >> 2] = $6; //@line 28603
   $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 28604
   HEAP32[$21 >> 2] = $8; //@line 28605
   $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 28606
   HEAP32[$22 >> 2] = $10; //@line 28607
   $23 = $ReallocAsyncCtx4 + 24 | 0; //@line 28608
   HEAP32[$23 >> 2] = $AsyncRetVal; //@line 28609
   sp = STACKTOP; //@line 28610
   return;
  }
  ___async_unwind = 0; //@line 28613
  HEAP32[$ReallocAsyncCtx4 >> 2] = 245; //@line 28614
  $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 28615
  HEAP32[$18 >> 2] = $2; //@line 28616
  $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 28617
  HEAP32[$19 >> 2] = $4; //@line 28618
  $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 28619
  HEAP32[$20 >> 2] = $6; //@line 28620
  $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 28621
  HEAP32[$21 >> 2] = $8; //@line 28622
  $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 28623
  HEAP32[$22 >> 2] = $10; //@line 28624
  $23 = $ReallocAsyncCtx4 + 24 | 0; //@line 28625
  HEAP32[$23 >> 2] = $AsyncRetVal; //@line 28626
  sp = STACKTOP; //@line 28627
  return;
 }
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(24) | 0; //@line 28632
  _mbed_assert_internal(13097, 12384, 646); //@line 28633
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 246; //@line 28636
   $25 = $ReallocAsyncCtx11 + 4 | 0; //@line 28637
   HEAP32[$25 >> 2] = $2; //@line 28638
   $26 = $ReallocAsyncCtx11 + 8 | 0; //@line 28639
   HEAP32[$26 >> 2] = $4; //@line 28640
   $27 = $ReallocAsyncCtx11 + 12 | 0; //@line 28641
   HEAP32[$27 >> 2] = $6; //@line 28642
   $28 = $ReallocAsyncCtx11 + 16 | 0; //@line 28643
   HEAP32[$28 >> 2] = $8; //@line 28644
   $29 = $ReallocAsyncCtx11 + 20 | 0; //@line 28645
   HEAP32[$29 >> 2] = $10; //@line 28646
   sp = STACKTOP; //@line 28647
   return;
  }
  ___async_unwind = 0; //@line 28650
  HEAP32[$ReallocAsyncCtx11 >> 2] = 246; //@line 28651
  $25 = $ReallocAsyncCtx11 + 4 | 0; //@line 28652
  HEAP32[$25 >> 2] = $2; //@line 28653
  $26 = $ReallocAsyncCtx11 + 8 | 0; //@line 28654
  HEAP32[$26 >> 2] = $4; //@line 28655
  $27 = $ReallocAsyncCtx11 + 12 | 0; //@line 28656
  HEAP32[$27 >> 2] = $6; //@line 28657
  $28 = $ReallocAsyncCtx11 + 16 | 0; //@line 28658
  HEAP32[$28 >> 2] = $8; //@line 28659
  $29 = $ReallocAsyncCtx11 + 20 | 0; //@line 28660
  HEAP32[$29 >> 2] = $10; //@line 28661
  sp = STACKTOP; //@line 28662
  return;
 }
 if ((__ZNK7LoRaMac16get_device_classEv($6) | 0) == 2) {
  label = 13; //@line 28668
 } else {
  if (!(HEAP8[$8 + 15 >> 0] | 0)) {
   label = 13; //@line 28674
  }
 }
 if ((label | 0) == 13) {
  if ((__ZNK7LoRaMac16get_device_classEv($6) | 0) != 2) {
   return;
  }
  if ((HEAP32[$8 + 4 >> 2] | 0) != 1) {
   return;
  }
 }
 $40 = $10 + 2496 | 0; //@line 28690
 $41 = HEAP32[$40 >> 2] | 0; //@line 28691
 if (!$41) {
  return;
 }
 $45 = HEAP32[$10 + 3136 >> 2] | 0; //@line 28698
 $47 = HEAP32[$41 + 4 >> 2] | 0; //@line 28700
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 28701
 FUNCTION_TABLE_vii[$47 & 15]($2, $10 + 2484 | 0); //@line 28702
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 247; //@line 28705
  $48 = $ReallocAsyncCtx5 + 4 | 0; //@line 28706
  HEAP32[$48 >> 2] = $40; //@line 28707
  $49 = $ReallocAsyncCtx5 + 8 | 0; //@line 28708
  HEAP32[$49 >> 2] = $2; //@line 28709
  $50 = $ReallocAsyncCtx5 + 12 | 0; //@line 28710
  HEAP32[$50 >> 2] = $45; //@line 28711
  $51 = $ReallocAsyncCtx5 + 16 | 0; //@line 28712
  HEAP32[$51 >> 2] = $2; //@line 28713
  sp = STACKTOP; //@line 28714
  return;
 }
 ___async_unwind = 0; //@line 28717
 HEAP32[$ReallocAsyncCtx5 >> 2] = 247; //@line 28718
 $48 = $ReallocAsyncCtx5 + 4 | 0; //@line 28719
 HEAP32[$48 >> 2] = $40; //@line 28720
 $49 = $ReallocAsyncCtx5 + 8 | 0; //@line 28721
 HEAP32[$49 >> 2] = $2; //@line 28722
 $50 = $ReallocAsyncCtx5 + 12 | 0; //@line 28723
 HEAP32[$50 >> 2] = $45; //@line 28724
 $51 = $ReallocAsyncCtx5 + 16 | 0; //@line 28725
 HEAP32[$51 >> 2] = $2; //@line 28726
 sp = STACKTOP; //@line 28727
 return;
}
function _ticker_read_us($0) {
 $0 = $0 | 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $35 = 0, $36 = 0, $37 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $88 = 0, $89 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6541
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6542
 _initialize($0); //@line 6543
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 597; //@line 6546
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 6548
  sp = STACKTOP; //@line 6549
  tempRet0 = 0; //@line 6550
  return 0; //@line 6551
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6553
 $2 = $0 + 4 | 0; //@line 6554
 $3 = HEAP32[$2 >> 2] | 0; //@line 6555
 $6 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 6558
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 6559
 $7 = FUNCTION_TABLE_i[$6 & 7]() | 0; //@line 6560
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 598; //@line 6563
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 6565
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 6567
  sp = STACKTOP; //@line 6568
  tempRet0 = 0; //@line 6569
  return 0; //@line 6570
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6572
 if (($7 | 0) == (HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0)) {
  $103 = HEAP32[$2 >> 2] | 0; //@line 6578
  $104 = $103 + 48 | 0; //@line 6579
  $105 = $104; //@line 6580
  $106 = $105; //@line 6581
  $107 = HEAP32[$106 >> 2] | 0; //@line 6582
  $108 = $105 + 4 | 0; //@line 6583
  $109 = $108; //@line 6584
  $110 = HEAP32[$109 >> 2] | 0; //@line 6585
  tempRet0 = $110; //@line 6586
  return $107 | 0; //@line 6587
 }
 $14 = $3 + 32 | 0; //@line 6589
 $19 = $7 - (HEAP32[$14 >> 2] | 0) & HEAP32[$3 + 12 >> 2]; //@line 6594
 HEAP32[$14 >> 2] = $7; //@line 6595
 $21 = HEAP32[$3 + 8 >> 2] | 0; //@line 6597
 L10 : do {
  if (($21 | 0) < 1e6) {
   switch ($21 | 0) {
   case 32768:
    {
     break;
    }
   default:
    {
     label = 9; //@line 6606
     break L10;
    }
   }
   $22 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 6610
   $24 = _bitshift64Lshr($22 | 0, tempRet0 | 0, 15) | 0; //@line 6612
   $25 = tempRet0; //@line 6613
   $28 = $3 + 40 | 0; //@line 6616
   $29 = $28; //@line 6617
   $35 = _i64Add(HEAP32[$29 >> 2] | 0, HEAP32[$29 + 4 >> 2] | 0, $19 * 1e6 & 32704 | 0, 0) | 0; //@line 6623
   $36 = tempRet0; //@line 6624
   $37 = $28; //@line 6625
   HEAP32[$37 >> 2] = $35; //@line 6627
   HEAP32[$37 + 4 >> 2] = $36; //@line 6630
   if ($36 >>> 0 < 0 | ($36 | 0) == 0 & $35 >>> 0 < 32768) {
    $95 = $24; //@line 6637
    $96 = $25; //@line 6637
   } else {
    $46 = _i64Add($24 | 0, $25 | 0, 1, 0) | 0; //@line 6639
    $47 = tempRet0; //@line 6640
    $48 = _i64Add($35 | 0, $36 | 0, -32768, -1) | 0; //@line 6641
    $50 = $28; //@line 6643
    HEAP32[$50 >> 2] = $48; //@line 6645
    HEAP32[$50 + 4 >> 2] = tempRet0; //@line 6648
    $95 = $46; //@line 6649
    $96 = $47; //@line 6649
   }
  } else {
   switch ($21 | 0) {
   case 1e6:
    {
     $95 = $19; //@line 6654
     $96 = 0; //@line 6654
     break;
    }
   default:
    {
     label = 9; //@line 6658
    }
   }
  }
 } while (0);
 if ((label | 0) == 9) {
  $54 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 6664
  $55 = tempRet0; //@line 6665
  $56 = ___udivdi3($54 | 0, $55 | 0, $21 | 0, 0) | 0; //@line 6666
  $57 = tempRet0; //@line 6667
  $58 = ___muldi3($56 | 0, $57 | 0, $21 | 0, 0) | 0; //@line 6668
  $60 = _i64Subtract($54 | 0, $55 | 0, $58 | 0, tempRet0 | 0) | 0; //@line 6670
  $62 = $3 + 40 | 0; //@line 6672
  $63 = $62; //@line 6673
  $69 = _i64Add($60 | 0, tempRet0 | 0, HEAP32[$63 >> 2] | 0, HEAP32[$63 + 4 >> 2] | 0) | 0; //@line 6679
  $70 = tempRet0; //@line 6680
  $71 = $62; //@line 6681
  HEAP32[$71 >> 2] = $69; //@line 6683
  HEAP32[$71 + 4 >> 2] = $70; //@line 6686
  if ($70 >>> 0 < 0 | ($70 | 0) == 0 & $69 >>> 0 < $21 >>> 0) {
   $95 = $56; //@line 6693
   $96 = $57; //@line 6693
  } else {
   $80 = _i64Add($56 | 0, $57 | 0, 1, 0) | 0; //@line 6695
   $81 = tempRet0; //@line 6696
   $82 = _i64Subtract($69 | 0, $70 | 0, $21 | 0, 0) | 0; //@line 6697
   $84 = $62; //@line 6699
   HEAP32[$84 >> 2] = $82; //@line 6701
   HEAP32[$84 + 4 >> 2] = tempRet0; //@line 6704
   $95 = $80; //@line 6705
   $96 = $81; //@line 6705
  }
 }
 $88 = $3 + 48 | 0; //@line 6708
 $89 = $88; //@line 6709
 $97 = _i64Add(HEAP32[$89 >> 2] | 0, HEAP32[$89 + 4 >> 2] | 0, $95 | 0, $96 | 0) | 0; //@line 6715
 $99 = $88; //@line 6717
 HEAP32[$99 >> 2] = $97; //@line 6719
 HEAP32[$99 + 4 >> 2] = tempRet0; //@line 6722
 $103 = HEAP32[$2 >> 2] | 0; //@line 6723
 $104 = $103 + 48 | 0; //@line 6724
 $105 = $104; //@line 6725
 $106 = $105; //@line 6726
 $107 = HEAP32[$106 >> 2] | 0; //@line 6727
 $108 = $105 + 4 | 0; //@line 6728
 $109 = $108; //@line 6729
 $110 = HEAP32[$109 >> 2] | 0; //@line 6730
 tempRet0 = $110; //@line 6731
 return $107 | 0; //@line 6732
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $$0 = 0, $33 = 0, $36 = 0, $37 = 0, $39 = 0, $48 = 0, $55 = 0, $62 = 0, $67 = 0, $68 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 17957
 HEAP8[$0 + 5 >> 0] = $6; //@line 17959
 HEAP8[$0 + 6 >> 0] = $5; //@line 17962
 HEAP8[$0 + 7 >> 0] = $5 >>> 8; //@line 17966
 HEAP8[$0 + 8 >> 0] = $5 >>> 16; //@line 17970
 HEAP8[$0 + 9 >> 0] = $5 >>> 24; //@line 17974
 HEAP8[$0 + 10 >> 0] = $7; //@line 17977
 HEAP8[$0 + 11 >> 0] = $7 >>> 8; //@line 17981
 HEAP8[$0 + 12 >> 0] = $7 >>> 16; //@line 17985
 HEAP8[$0 + 13 >> 0] = $7 >>> 24; //@line 17989
 $33 = $2 & 255; //@line 17991
 HEAP8[$0 + 15 >> 0] = $2; //@line 17994
 $36 = $0 + 344 | 0; //@line 17995
 _mbedtls_cipher_init($36); //@line 17996
 $37 = _mbedtls_cipher_info_from_type(2) | 0; //@line 17997
 if (!$37) {
  $$0 = -24960; //@line 18000
 } else {
  $AsyncCtx15 = _emscripten_alloc_async_context(32, sp) | 0; //@line 18002
  $39 = _mbedtls_cipher_setup($36, $37) | 0; //@line 18003
  if (___async) {
   HEAP32[$AsyncCtx15 >> 2] = 483; //@line 18006
   HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 18008
   HEAP32[$AsyncCtx15 + 8 >> 2] = $36; //@line 18010
   HEAP32[$AsyncCtx15 + 12 >> 2] = $8; //@line 18012
   HEAP32[$AsyncCtx15 + 16 >> 2] = $3; //@line 18014
   HEAP32[$AsyncCtx15 + 20 >> 2] = $4; //@line 18016
   HEAP32[$AsyncCtx15 + 24 >> 2] = $1; //@line 18018
   HEAP32[$AsyncCtx15 + 28 >> 2] = $33; //@line 18020
   sp = STACKTOP; //@line 18021
   return 0; //@line 18022
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 18024
  if (!$39) {
   $AsyncCtx11 = _emscripten_alloc_async_context(24, sp) | 0; //@line 18027
   $48 = _mbedtls_cipher_cmac_starts($36, $3, $4) | 0; //@line 18028
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 484; //@line 18031
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 18033
    HEAP32[$AsyncCtx11 + 8 >> 2] = $36; //@line 18035
    HEAP32[$AsyncCtx11 + 12 >> 2] = $1; //@line 18037
    HEAP32[$AsyncCtx11 + 16 >> 2] = $33; //@line 18039
    HEAP32[$AsyncCtx11 + 20 >> 2] = $8; //@line 18041
    sp = STACKTOP; //@line 18042
    return 0; //@line 18043
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 18045
   if (!$48) {
    $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 18048
    $55 = _mbedtls_cipher_cmac_update($36, $0, 16) | 0; //@line 18049
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 485; //@line 18052
     HEAP32[$AsyncCtx3 + 4 >> 2] = $36; //@line 18054
     HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 18056
     HEAP32[$AsyncCtx3 + 12 >> 2] = $33; //@line 18058
     HEAP32[$AsyncCtx3 + 16 >> 2] = $0; //@line 18060
     HEAP32[$AsyncCtx3 + 20 >> 2] = $8; //@line 18062
     sp = STACKTOP; //@line 18063
     return 0; //@line 18064
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 18066
    if (!$55) {
     $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 18069
     $62 = _mbedtls_cipher_cmac_update($36, $1, $33) | 0; //@line 18070
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 486; //@line 18073
      HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 18075
      HEAP32[$AsyncCtx + 8 >> 2] = $36; //@line 18077
      HEAP32[$AsyncCtx + 12 >> 2] = $8; //@line 18079
      sp = STACKTOP; //@line 18080
      return 0; //@line 18081
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 18083
     if (!$62) {
      $67 = $0 + 16 | 0; //@line 18086
      $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 18087
      $68 = _mbedtls_cipher_cmac_finish($36, $67) | 0; //@line 18088
      if (___async) {
       HEAP32[$AsyncCtx7 >> 2] = 487; //@line 18091
       HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 18093
       HEAP32[$AsyncCtx7 + 8 >> 2] = $67; //@line 18095
       HEAP32[$AsyncCtx7 + 12 >> 2] = $8; //@line 18097
       HEAP32[$AsyncCtx7 + 16 >> 2] = $36; //@line 18099
       sp = STACKTOP; //@line 18100
       return 0; //@line 18101
      }
      _emscripten_free_async_context($AsyncCtx7 | 0); //@line 18103
      if (!$68) {
       HEAP32[$8 >> 2] = (HEAPU8[$0 + 18 >> 0] | 0) << 16 | (HEAPU8[$0 + 19 >> 0] | 0) << 24 | (HEAPU8[$0 + 17 >> 0] | 0) << 8 | (HEAPU8[$67 >> 0] | 0); //@line 18123
       $$0 = 0; //@line 18124
      } else {
       $$0 = $68; //@line 18126
      }
     } else {
      $$0 = $62; //@line 18129
     }
    } else {
     $$0 = $55; //@line 18132
    }
   } else {
    $$0 = $48; //@line 18135
   }
  } else {
   $$0 = $39; //@line 18138
  }
 }
 $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 18141
 _mbedtls_cipher_free($36); //@line 18142
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 488; //@line 18145
  HEAP32[$AsyncCtx19 + 4 >> 2] = $$0; //@line 18147
  sp = STACKTOP; //@line 18148
  return 0; //@line 18149
 } else {
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 18151
  return $$0 | 0; //@line 18152
 }
 return 0; //@line 18154
}
function _mbed_vtracef__async_cb_317($0) {
 $0 = $0 | 0;
 var $$10 = 0, $$3147168 = 0, $$3169 = 0, $$5156 = 0, $$5156$ = 0, $$expand_i1_val = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $32 = 0, $34 = 0, $36 = 0, $40 = 0, $42 = 0, $46 = 0, $50 = 0, $53 = 0, $54 = 0, $56 = 0, $6 = 0, $67 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12221
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12223
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12227
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12229
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12233
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12235
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12237
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12239
 $20 = HEAP8[$0 + 40 >> 0] & 1; //@line 12242
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12244
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 12246
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 12248
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 12254
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 12256
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 12258
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 12262
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 12264
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 12268
 HEAP32[$22 >> 2] = HEAP32[___async_retval >> 2]; //@line 12273
 $50 = _snprintf($24, $26, 12268, $22) | 0; //@line 12274
 $$10 = ($50 | 0) >= ($26 | 0) ? 0 : $50; //@line 12276
 $53 = $24 + $$10 | 0; //@line 12278
 $54 = $26 - $$10 | 0; //@line 12279
 if (($$10 | 0) > 0) {
  if (($54 | 0) > 0) {
   $$3147168 = $54; //@line 12283
   $$3169 = $53; //@line 12283
   label = 4; //@line 12284
  }
 } else {
  $$3147168 = $26; //@line 12287
  $$3169 = $24; //@line 12287
  label = 4; //@line 12288
 }
 if ((label | 0) == 4) {
  $56 = $40 + -2 | 0; //@line 12291
  switch ($56 >>> 1 | $56 << 31 | 0) {
  case 0:
   {
    HEAP32[$36 >> 2] = $8; //@line 12297
    $$5156 = _snprintf($$3169, $$3147168, 12271, $36) | 0; //@line 12299
    break;
   }
  case 1:
   {
    HEAP32[$46 >> 2] = $8; //@line 12303
    $$5156 = _snprintf($$3169, $$3147168, 12286, $46) | 0; //@line 12305
    break;
   }
  case 3:
   {
    HEAP32[$42 >> 2] = $8; //@line 12309
    $$5156 = _snprintf($$3169, $$3147168, 12301, $42) | 0; //@line 12311
    break;
   }
  case 7:
   {
    HEAP32[$6 >> 2] = $8; //@line 12315
    $$5156 = _snprintf($$3169, $$3147168, 12316, $6) | 0; //@line 12317
    break;
   }
  default:
   {
    $$5156 = _snprintf($$3169, $$3147168, 12331, $2) | 0; //@line 12322
   }
  }
  $$5156$ = ($$5156 | 0) < ($$3147168 | 0) ? $$5156 : 0; //@line 12326
  $67 = $$3169 + $$5156$ | 0; //@line 12328
  $68 = $$3147168 - $$5156$ | 0; //@line 12329
  if (($$5156$ | 0) > 0 & ($68 | 0) > 0) {
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 12333
   $70 = _vsnprintf($67, $68, $12, $14) | 0; //@line 12334
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 133; //@line 12337
    $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 12338
    HEAP32[$71 >> 2] = $16; //@line 12339
    $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 12340
    HEAP32[$72 >> 2] = $18; //@line 12341
    $73 = $ReallocAsyncCtx10 + 12 | 0; //@line 12342
    $$expand_i1_val = $20 & 1; //@line 12343
    HEAP8[$73 >> 0] = $$expand_i1_val; //@line 12344
    $74 = $ReallocAsyncCtx10 + 16 | 0; //@line 12345
    HEAP32[$74 >> 2] = $32; //@line 12346
    $75 = $ReallocAsyncCtx10 + 20 | 0; //@line 12347
    HEAP32[$75 >> 2] = $34; //@line 12348
    $76 = $ReallocAsyncCtx10 + 24 | 0; //@line 12349
    HEAP32[$76 >> 2] = $68; //@line 12350
    $77 = $ReallocAsyncCtx10 + 28 | 0; //@line 12351
    HEAP32[$77 >> 2] = $67; //@line 12352
    sp = STACKTOP; //@line 12353
    return;
   }
   HEAP32[___async_retval >> 2] = $70; //@line 12357
   ___async_unwind = 0; //@line 12358
   HEAP32[$ReallocAsyncCtx10 >> 2] = 133; //@line 12359
   $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 12360
   HEAP32[$71 >> 2] = $16; //@line 12361
   $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 12362
   HEAP32[$72 >> 2] = $18; //@line 12363
   $73 = $ReallocAsyncCtx10 + 12 | 0; //@line 12364
   $$expand_i1_val = $20 & 1; //@line 12365
   HEAP8[$73 >> 0] = $$expand_i1_val; //@line 12366
   $74 = $ReallocAsyncCtx10 + 16 | 0; //@line 12367
   HEAP32[$74 >> 2] = $32; //@line 12368
   $75 = $ReallocAsyncCtx10 + 20 | 0; //@line 12369
   HEAP32[$75 >> 2] = $34; //@line 12370
   $76 = $ReallocAsyncCtx10 + 24 | 0; //@line 12371
   HEAP32[$76 >> 2] = $68; //@line 12372
   $77 = $ReallocAsyncCtx10 + 28 | 0; //@line 12373
   HEAP32[$77 >> 2] = $67; //@line 12374
   sp = STACKTOP; //@line 12375
   return;
  }
 }
 $79 = HEAP32[174] | 0; //@line 12379
 $80 = HEAP32[167] | 0; //@line 12380
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 12381
 FUNCTION_TABLE_vi[$79 & 1023]($80); //@line 12382
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 135; //@line 12385
  sp = STACKTOP; //@line 12386
  return;
 }
 ___async_unwind = 0; //@line 12389
 HEAP32[$ReallocAsyncCtx7 >> 2] = 135; //@line 12390
 sp = STACKTOP; //@line 12391
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv($0) {
 $0 = $0 | 0;
 var $12 = 0, $19 = 0, $32 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $54 = 0, $69 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 14028
 $AsyncCtx23 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14030
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1816 | 0); //@line 14031
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 417; //@line 14034
  HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 14036
  HEAP32[$AsyncCtx23 + 8 >> 2] = $0; //@line 14038
  sp = STACKTOP; //@line 14039
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 14042
 $4 = $0 + 1836 | 0; //@line 14043
 $AsyncCtx19 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14044
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $4); //@line 14045
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 418; //@line 14048
  HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 14050
  HEAP32[$AsyncCtx19 + 8 >> 2] = $0; //@line 14052
  HEAP32[$AsyncCtx19 + 12 >> 2] = $4; //@line 14054
  sp = STACKTOP; //@line 14055
  return;
 }
 _emscripten_free_async_context($AsyncCtx19 | 0); //@line 14058
 $AsyncCtx15 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14060
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1856 | 0); //@line 14061
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 419; //@line 14064
  HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 14066
  HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 14068
  HEAP32[$AsyncCtx15 + 12 >> 2] = $4; //@line 14070
  sp = STACKTOP; //@line 14071
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 14074
 $12 = $0 + 2364 | 0; //@line 14075
 do {
  if ((HEAP32[$12 >> 2] | 0) == 2) {
   $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14080
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $4); //@line 14081
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 420; //@line 14084
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 14086
    HEAP32[$AsyncCtx11 + 8 >> 2] = $12; //@line 14088
    sp = STACKTOP; //@line 14089
    return;
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 14092
   $19 = $0 + 1964 | 0; //@line 14095
   HEAP8[$19 >> 0] = HEAP8[$0 + 1182 >> 0] | 0; //@line 14096
   HEAP32[$0 + 1968 >> 2] = HEAP32[$0 + 1912 >> 2]; //@line 14100
   HEAP8[$0 + 1980 >> 0] = HEAP8[$0 + 1921 >> 0] | 0; //@line 14104
   HEAP8[$0 + 1981 >> 0] = HEAP8[$0 + 1173 >> 0] | 0; //@line 14108
   HEAP32[$0 + 1984 >> 2] = 1; //@line 14110
   $32 = $0 + 1982 | 0; //@line 14113
   HEAP8[$32 >> 0] = (HEAP32[$12 >> 2] | 0) == 2 & 1; //@line 14115
   HEAP8[$0 + 2010 >> 0] = HEAP8[$0 + 1965 >> 0] | 0; //@line 14119
   $37 = $0 + 4 | 0; //@line 14120
   $AsyncCtx7 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14121
   $38 = __ZN7LoRaPHY9rx_configEP18rx_config_params_t($37, $19) | 0; //@line 14122
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 421; //@line 14125
    HEAP32[$AsyncCtx7 + 4 >> 2] = $32; //@line 14127
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 14129
    HEAP32[$AsyncCtx7 + 12 >> 2] = $37; //@line 14131
    sp = STACKTOP; //@line 14132
    return;
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 14135
   if ($38) {
    $43 = (HEAP8[$32 >> 0] | 0) != 0; //@line 14138
    $45 = HEAP32[$0 + 1888 >> 2] | 0; //@line 14140
    $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 14141
    __ZN7LoRaPHY15setup_rx_windowEbj($37, $43, $45); //@line 14142
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 422; //@line 14145
     HEAP32[$AsyncCtx + 4 >> 2] = $32; //@line 14147
     HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 14149
     sp = STACKTOP; //@line 14150
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 14153
     HEAP32[$0 + 1168 >> 2] = HEAP8[$32 >> 0] | 0 ? 2 : 1; //@line 14158
     break;
    }
   }
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 14164
   __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 14165
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 423; //@line 14168
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 14170
    sp = STACKTOP; //@line 14171
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14174
    break;
   }
  }
 } while (0);
 $54 = $0 + 2040 | 0; //@line 14179
 HEAP32[$54 >> 2] = 2; //@line 14180
 HEAP32[$0 + 2076 >> 2] = 2; //@line 14182
 __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 476 | 0); //@line 14184
 HEAP8[$0 + 2047 >> 0] = HEAP8[$0 + 1699 >> 0] | 0; //@line 14188
 HEAP8[$0 + 2046 >> 0] = 0; //@line 14190
 HEAP32[$0 + 2048 >> 2] = 0; //@line 14192
 HEAP8[$0 + 1180 >> 0] = 0; //@line 14194
 HEAP32[$54 >> 2] = 0; //@line 14195
 if ((HEAP32[$0 + 2036 >> 2] | 0) == 1) {
  return;
 }
 if (HEAP8[$0 + 1174 >> 0] | 0) {
  return;
 }
 $69 = $0 + 1760 | 0; //@line 14208
 HEAP32[$69 >> 2] = (HEAP32[$69 >> 2] | 0) + 1; //@line 14211
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre$phi6Z2D = 0, $$pre$phiZ2D = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $31 = 0, $40 = 0, $53 = 0, $58 = 0, $59 = 0, $65 = 0, $67 = 0, $73 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14222
 $2 = $0 + 2364 | 0; //@line 14223
 do {
  if ((HEAP32[$2 >> 2] | 0) != 2) {
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14229
   __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 14230
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 424; //@line 14233
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 14235
    HEAP32[$AsyncCtx3 + 8 >> 2] = $2; //@line 14237
    HEAP8[$AsyncCtx3 + 12 >> 0] = $1 & 1; //@line 14240
    sp = STACKTOP; //@line 14241
    return 0; //@line 14242
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14244
    break;
   }
  }
 } while (0);
 $9 = $0 + 1168 | 0; //@line 14249
 $14 = (HEAP8[$0 + 1177 >> 0] | 0) != 0; //@line 14254
 do {
  if (!(HEAP32[$9 >> 2] | 0)) {
   if ($14) {
    $16 = $1 ? 3 : 5; //@line 14259
    HEAP32[$0 + 2040 >> 2] = $16; //@line 14260
    $$pre$phiZ2D = $16; //@line 14261
   } else {
    $$pre$phiZ2D = $1 ? 3 : 5; //@line 14264
   }
   HEAP32[$0 + 2076 >> 2] = $$pre$phiZ2D; //@line 14267
   if ((HEAP32[$2 >> 2] | 0) != 2) {
    $22 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj($0, HEAP32[$0 + 1780 >> 2] | 0) | 0; //@line 14273
    if ($22 >>> 0 < (HEAP32[$0 + 1776 >> 2] | 0) >>> 0) {
     label = 18; //@line 14278
    } else {
     $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14281
     __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 14282
     if (___async) {
      HEAP32[$AsyncCtx14 >> 2] = 425; //@line 14285
      HEAP32[$AsyncCtx14 + 4 >> 2] = $2; //@line 14287
      HEAP32[$AsyncCtx14 + 8 >> 2] = $0; //@line 14289
      HEAP32[$AsyncCtx14 + 12 >> 2] = $9; //@line 14291
      sp = STACKTOP; //@line 14292
      return 0; //@line 14293
     } else {
      _emscripten_free_async_context($AsyncCtx14 | 0); //@line 14295
      label = 18; //@line 14296
      break;
     }
    }
   }
  } else {
   if ($14) {
    $31 = $1 ? 4 : 6; //@line 14304
    HEAP32[$0 + 2040 >> 2] = $31; //@line 14305
    $$pre$phi6Z2D = $31; //@line 14306
   } else {
    $$pre$phi6Z2D = $1 ? 4 : 6; //@line 14309
   }
   HEAP32[$0 + 2076 >> 2] = $$pre$phi6Z2D; //@line 14312
   label = 18; //@line 14313
  }
 } while (0);
 if ((label | 0) == 18) {
  if ((HEAP32[$2 >> 2] | 0) != 2) {
   $73 = HEAP32[$9 >> 2] | 0; //@line 14320
   return $73 | 0; //@line 14321
  }
 }
 $AsyncCtx10 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14325
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 14326
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 426; //@line 14329
  HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 14331
  HEAP32[$AsyncCtx10 + 8 >> 2] = $2; //@line 14333
  HEAP32[$AsyncCtx10 + 12 >> 2] = $9; //@line 14335
  sp = STACKTOP; //@line 14336
  return 0; //@line 14337
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 14339
 $40 = $0 + 1964 | 0; //@line 14342
 HEAP8[$40 >> 0] = HEAP8[$0 + 1182 >> 0] | 0; //@line 14343
 HEAP32[$0 + 1968 >> 2] = HEAP32[$0 + 1912 >> 2]; //@line 14347
 HEAP8[$0 + 1980 >> 0] = HEAP8[$0 + 1921 >> 0] | 0; //@line 14351
 HEAP8[$0 + 1981 >> 0] = HEAP8[$0 + 1173 >> 0] | 0; //@line 14355
 HEAP32[$0 + 1984 >> 2] = 1; //@line 14357
 $53 = $0 + 1982 | 0; //@line 14360
 HEAP8[$53 >> 0] = (HEAP32[$2 >> 2] | 0) == 2 & 1; //@line 14362
 HEAP8[$0 + 2010 >> 0] = HEAP8[$0 + 1965 >> 0] | 0; //@line 14366
 $58 = $0 + 4 | 0; //@line 14367
 $AsyncCtx6 = _emscripten_alloc_async_context(20, sp) | 0; //@line 14368
 $59 = __ZN7LoRaPHY9rx_configEP18rx_config_params_t($58, $40) | 0; //@line 14369
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 427; //@line 14372
  HEAP32[$AsyncCtx6 + 4 >> 2] = $53; //@line 14374
  HEAP32[$AsyncCtx6 + 8 >> 2] = $0; //@line 14376
  HEAP32[$AsyncCtx6 + 12 >> 2] = $58; //@line 14378
  HEAP32[$AsyncCtx6 + 16 >> 2] = $9; //@line 14380
  sp = STACKTOP; //@line 14381
  return 0; //@line 14382
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 14384
 if (!$59) {
  $73 = HEAP32[$9 >> 2] | 0; //@line 14386
  return $73 | 0; //@line 14387
 }
 $65 = (HEAP8[$53 >> 0] | 0) != 0; //@line 14390
 $67 = HEAP32[$0 + 1888 >> 2] | 0; //@line 14392
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 14393
 __ZN7LoRaPHY15setup_rx_windowEbj($58, $65, $67); //@line 14394
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 428; //@line 14397
  HEAP32[$AsyncCtx + 4 >> 2] = $53; //@line 14399
  HEAP32[$AsyncCtx + 8 >> 2] = $9; //@line 14401
  sp = STACKTOP; //@line 14402
  return 0; //@line 14403
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14405
 HEAP32[$9 >> 2] = HEAP8[$53 >> 0] | 0 ? 2 : 1; //@line 14409
 $73 = HEAP32[$9 >> 2] | 0; //@line 14410
 return $73 | 0; //@line 14411
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 10401
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10403
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10405
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10407
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 10409
 $10 = HEAP16[$0 + 18 >> 1] | 0; //@line 10411
 $12 = HEAP8[$0 + 20 >> 0] | 0; //@line 10413
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 10415
 $$pre$i = HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0; //@line 10418
 $17 = $2 + 12 | 0; //@line 10419
 HEAP32[$17 >> 2] = $$pre$i; //@line 10420
 if (!$$pre$i) {
  $30 = $4 + 12 | 0; //@line 10423
  HEAP32[$30 >> 2] = 0; //@line 10424
  $31 = $4 + 16 | 0; //@line 10425
  HEAP32[$31 >> 2] = $6; //@line 10426
  HEAP16[$4 + 20 >> 1] = $8; //@line 10428
  HEAP16[$4 + 22 >> 1] = $10; //@line 10430
  HEAP8[$4 + 24 >> 0] = $12; //@line 10432
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 10433
  $35 = _equeue_alloc($14, 28) | 0; //@line 10434
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 283; //@line 10437
   $36 = $ReallocAsyncCtx7 + 4 | 0; //@line 10438
   HEAP32[$36 >> 2] = $17; //@line 10439
   $37 = $ReallocAsyncCtx7 + 8 | 0; //@line 10440
   HEAP32[$37 >> 2] = $2; //@line 10441
   $38 = $ReallocAsyncCtx7 + 12 | 0; //@line 10442
   HEAP32[$38 >> 2] = $30; //@line 10443
   $39 = $ReallocAsyncCtx7 + 16 | 0; //@line 10444
   HEAP32[$39 >> 2] = $4; //@line 10445
   $40 = $ReallocAsyncCtx7 + 20 | 0; //@line 10446
   HEAP32[$40 >> 2] = $30; //@line 10447
   $41 = $ReallocAsyncCtx7 + 24 | 0; //@line 10448
   HEAP32[$41 >> 2] = $31; //@line 10449
   $42 = $ReallocAsyncCtx7 + 28 | 0; //@line 10450
   HEAP32[$42 >> 2] = $14; //@line 10451
   sp = STACKTOP; //@line 10452
   return;
  }
  HEAP32[___async_retval >> 2] = $35; //@line 10456
  ___async_unwind = 0; //@line 10457
  HEAP32[$ReallocAsyncCtx7 >> 2] = 283; //@line 10458
  $36 = $ReallocAsyncCtx7 + 4 | 0; //@line 10459
  HEAP32[$36 >> 2] = $17; //@line 10460
  $37 = $ReallocAsyncCtx7 + 8 | 0; //@line 10461
  HEAP32[$37 >> 2] = $2; //@line 10462
  $38 = $ReallocAsyncCtx7 + 12 | 0; //@line 10463
  HEAP32[$38 >> 2] = $30; //@line 10464
  $39 = $ReallocAsyncCtx7 + 16 | 0; //@line 10465
  HEAP32[$39 >> 2] = $4; //@line 10466
  $40 = $ReallocAsyncCtx7 + 20 | 0; //@line 10467
  HEAP32[$40 >> 2] = $30; //@line 10468
  $41 = $ReallocAsyncCtx7 + 24 | 0; //@line 10469
  HEAP32[$41 >> 2] = $31; //@line 10470
  $42 = $ReallocAsyncCtx7 + 28 | 0; //@line 10471
  HEAP32[$42 >> 2] = $14; //@line 10472
  sp = STACKTOP; //@line 10473
  return;
 } else {
  $20 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 10478
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 10479
  FUNCTION_TABLE_vii[$20 & 15]($4, $2); //@line 10480
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 282; //@line 10483
   $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 10484
   HEAP32[$21 >> 2] = $2; //@line 10485
   $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 10486
   HEAP32[$22 >> 2] = $17; //@line 10487
   $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 10488
   HEAP32[$23 >> 2] = $4; //@line 10489
   $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 10490
   HEAP32[$24 >> 2] = $6; //@line 10491
   $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 10492
   HEAP16[$25 >> 1] = $8; //@line 10493
   $26 = $ReallocAsyncCtx2 + 22 | 0; //@line 10494
   HEAP16[$26 >> 1] = $10; //@line 10495
   $27 = $ReallocAsyncCtx2 + 24 | 0; //@line 10496
   HEAP8[$27 >> 0] = $12; //@line 10497
   $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 10498
   HEAP32[$28 >> 2] = $14; //@line 10499
   $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 10500
   HEAP32[$29 >> 2] = $17; //@line 10501
   sp = STACKTOP; //@line 10502
   return;
  }
  ___async_unwind = 0; //@line 10505
  HEAP32[$ReallocAsyncCtx2 >> 2] = 282; //@line 10506
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 10507
  HEAP32[$21 >> 2] = $2; //@line 10508
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 10509
  HEAP32[$22 >> 2] = $17; //@line 10510
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 10511
  HEAP32[$23 >> 2] = $4; //@line 10512
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 10513
  HEAP32[$24 >> 2] = $6; //@line 10514
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 10515
  HEAP16[$25 >> 1] = $8; //@line 10516
  $26 = $ReallocAsyncCtx2 + 22 | 0; //@line 10517
  HEAP16[$26 >> 1] = $10; //@line 10518
  $27 = $ReallocAsyncCtx2 + 24 | 0; //@line 10519
  HEAP8[$27 >> 0] = $12; //@line 10520
  $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 10521
  HEAP32[$28 >> 2] = $14; //@line 10522
  $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 10523
  HEAP32[$29 >> 2] = $17; //@line 10524
  sp = STACKTOP; //@line 10525
  return;
 }
}
function __ZN12LoRaPHYEU868C2ER18LoRaWANTimeHandler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $31 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 __ZN7LoRaPHYC2ER18LoRaWANTimeHandler($0, $1); //@line 8
 HEAP32[$0 >> 2] = 952; //@line 9
 $2 = $0 + 324 | 0; //@line 10
 HEAP32[$2 >> 2] = HEAP32[258]; //@line 11
 HEAP32[$2 + 4 >> 2] = HEAP32[259]; //@line 11
 HEAP32[$2 + 8 >> 2] = HEAP32[260]; //@line 11
 HEAP32[$2 + 12 >> 2] = HEAP32[261]; //@line 11
 HEAP32[$2 + 16 >> 2] = HEAP32[262]; //@line 11
 HEAP32[$2 + 20 >> 2] = HEAP32[263]; //@line 11
 $3 = $0 + 348 | 0; //@line 12
 HEAP32[$3 >> 2] = HEAP32[264]; //@line 13
 HEAP32[$3 + 4 >> 2] = HEAP32[265]; //@line 13
 HEAP32[$3 + 8 >> 2] = HEAP32[266]; //@line 13
 HEAP32[$3 + 12 >> 2] = HEAP32[267]; //@line 13
 HEAP32[$3 + 16 >> 2] = HEAP32[268]; //@line 13
 HEAP32[$3 + 20 >> 2] = HEAP32[269]; //@line 13
 $4 = $0 + 372 | 0; //@line 14
 HEAP32[$4 >> 2] = HEAP32[270]; //@line 15
 HEAP32[$4 + 4 >> 2] = HEAP32[271]; //@line 15
 HEAP32[$4 + 8 >> 2] = HEAP32[272]; //@line 15
 HEAP32[$4 + 12 >> 2] = HEAP32[273]; //@line 15
 HEAP32[$4 + 16 >> 2] = HEAP32[274]; //@line 15
 HEAP32[$4 + 20 >> 2] = HEAP32[275]; //@line 15
 $5 = $0 + 396 | 0; //@line 16
 HEAP32[$5 >> 2] = HEAP32[276]; //@line 17
 HEAP32[$5 + 4 >> 2] = HEAP32[277]; //@line 17
 HEAP32[$5 + 8 >> 2] = HEAP32[278]; //@line 17
 HEAP32[$5 + 12 >> 2] = HEAP32[279]; //@line 17
 HEAP32[$5 + 16 >> 2] = HEAP32[280]; //@line 17
 HEAP32[$5 + 20 >> 2] = HEAP32[281]; //@line 17
 $6 = $0 + 420 | 0; //@line 18
 HEAP32[$6 >> 2] = HEAP32[282]; //@line 19
 HEAP32[$6 + 4 >> 2] = HEAP32[283]; //@line 19
 HEAP32[$6 + 8 >> 2] = HEAP32[284]; //@line 19
 HEAP32[$6 + 12 >> 2] = HEAP32[285]; //@line 19
 HEAP32[$6 + 16 >> 2] = HEAP32[286]; //@line 19
 HEAP32[$6 + 20 >> 2] = HEAP32[287]; //@line 19
 $7 = $0 + 444 | 0; //@line 20
 HEAP32[$7 >> 2] = HEAP32[288]; //@line 21
 HEAP32[$7 + 4 >> 2] = HEAP32[289]; //@line 21
 HEAP32[$7 + 8 >> 2] = HEAP32[290]; //@line 21
 HEAP32[$7 + 12 >> 2] = HEAP32[291]; //@line 21
 HEAP32[$7 + 16 >> 2] = HEAP32[292]; //@line 21
 HEAP32[$7 + 20 >> 2] = HEAP32[293]; //@line 21
 $8 = $0 + 132 | 0; //@line 22
 HEAP32[$8 >> 2] = HEAP32[294]; //@line 23
 HEAP32[$8 + 4 >> 2] = HEAP32[295]; //@line 23
 HEAP32[$8 + 8 >> 2] = HEAP32[296]; //@line 23
 HEAP8[$0 + 141 >> 0] = 1; //@line 25
 $10 = $0 + 144 | 0; //@line 26
 HEAP32[$10 >> 2] = HEAP32[297]; //@line 27
 HEAP32[$10 + 4 >> 2] = HEAP32[298]; //@line 27
 HEAP32[$10 + 8 >> 2] = HEAP32[299]; //@line 27
 HEAP8[$0 + 153 >> 0] = 1; //@line 29
 $12 = $0 + 156 | 0; //@line 30
 HEAP32[$12 >> 2] = HEAP32[300]; //@line 31
 HEAP32[$12 + 4 >> 2] = HEAP32[301]; //@line 31
 HEAP32[$12 + 8 >> 2] = HEAP32[302]; //@line 31
 HEAP8[$0 + 165 >> 0] = 1; //@line 33
 $14 = $0 + 470 | 0; //@line 34
 HEAP16[$14 >> 1] = 7; //@line 35
 $15 = $0 + 468 | 0; //@line 36
 __ZN7LoRaPHY17copy_channel_maskEPtS0_h($0, $15, $14, 1); //@line 37
 HEAP32[$0 + 124 >> 2] = $8; //@line 39
 HEAP8[$0 + 112 >> 0] = 16; //@line 41
 HEAP32[$0 + 116 >> 2] = $15; //@line 43
 HEAP32[$0 + 120 >> 2] = $14; //@line 45
 HEAP8[$0 + 113 >> 0] = 1; //@line 47
 HEAP32[$0 + 72 >> 2] = $2; //@line 49
 HEAP8[$0 + 76 >> 0] = 6; //@line 51
 HEAP32[$0 + 80 >> 2] = 1212; //@line 53
 HEAP8[$0 + 84 >> 0] = 8; //@line 55
 HEAP32[$0 + 88 >> 2] = 13626; //@line 57
 HEAP8[$0 + 92 >> 0] = 8; //@line 59
 HEAP32[$0 + 96 >> 2] = 13634; //@line 61
 HEAP8[$0 + 100 >> 0] = 8; //@line 63
 HEAP32[$0 + 104 >> 2] = 13642; //@line 65
 HEAP8[$0 + 108 >> 0] = 8; //@line 67
 $31 = $0 + 128 | 0; //@line 68
 HEAP8[$31 >> 0] = HEAP8[$31 >> 0] & -4; //@line 71
 $34 = $0 + 12 | 0; //@line 72
 $35 = $0 + 18 | 0; //@line 73
 HEAP32[$34 >> 2] = 16843009; //@line 74
 HEAP16[$34 + 4 >> 1] = 257; //@line 74
 HEAP8[$35 >> 0] = 3; //@line 75
 HEAP8[$0 + 20 >> 0] = 16; //@line 77
 HEAP8[$0 + 19 >> 0] = 5; //@line 79
 HEAP8[$0 + 26 >> 0] = 0; //@line 81
 HEAP8[$0 + 27 >> 0] = 7; //@line 83
 HEAP8[$0 + 28 >> 0] = 0; //@line 85
 HEAP8[$0 + 29 >> 0] = 7; //@line 87
 HEAP8[$0 + 30 >> 0] = 0; //@line 89
 HEAP8[$0 + 31 >> 0] = 5; //@line 91
 HEAP8[$0 + 32 >> 0] = 0; //@line 93
 HEAP8[$0 + 33 >> 0] = 5; //@line 95
 HEAP8[$0 + 34 >> 0] = 0; //@line 97
 HEAP8[$0 + 21 >> 0] = 7; //@line 99
 HEAP8[$0 + 22 >> 0] = 0; //@line 101
 HEAP8[$0 + 23 >> 0] = 0; //@line 103
 HEAPF32[$0 + 56 >> 2] = 16.0; //@line 105
 HEAPF32[$0 + 60 >> 2] = 2.1500000953674316; //@line 107
 HEAP8[$0 + 24 >> 0] = 64; //@line 109
 HEAP8[$0 + 25 >> 0] = 32; //@line 111
 HEAP16[$0 + 36 >> 1] = 3e3; //@line 113
 HEAP16[$0 + 38 >> 1] = 1e3; //@line 115
 HEAP16[$0 + 40 >> 1] = 2e3; //@line 117
 HEAP16[$0 + 46 >> 1] = 7; //@line 119
 HEAP16[$0 + 42 >> 1] = 5e3; //@line 121
 HEAP16[$0 + 44 >> 1] = 6e3; //@line 123
 HEAP16[$0 + 48 >> 1] = 16384; //@line 125
 HEAP16[$0 + 50 >> 1] = 2e3; //@line 127
 HEAP16[$0 + 52 >> 1] = 1e3; //@line 129
 HEAP8[$0 + 64 >> 0] = 0; //@line 131
 HEAP32[$0 + 68 >> 2] = 869525e3; //@line 133
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_357($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $36 = 0, $37 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 26796
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26798
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26800
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26802
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26804
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26806
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26808
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26810
 if ($AsyncRetVal | 0) {
  $15 = HEAP32[$10 >> 2] | 0; //@line 26813
  if (!$15) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 26817
   _equeue_event_delay($AsyncRetVal, $4); //@line 26818
   _equeue_event_dtor($AsyncRetVal, 267); //@line 26819
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 26820
   $27 = _equeue_post($6, 268, $AsyncRetVal) | 0; //@line 26821
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 548; //@line 26824
    $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 26825
    HEAP32[$28 >> 2] = $8; //@line 26826
    $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 26827
    HEAP32[$29 >> 2] = $10; //@line 26828
    $30 = $ReallocAsyncCtx4 + 12 | 0; //@line 26829
    HEAP32[$30 >> 2] = $12; //@line 26830
    sp = STACKTOP; //@line 26831
    return;
   }
   HEAP32[___async_retval >> 2] = $27; //@line 26835
   ___async_unwind = 0; //@line 26836
   HEAP32[$ReallocAsyncCtx4 >> 2] = 548; //@line 26837
   $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 26838
   HEAP32[$28 >> 2] = $8; //@line 26839
   $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 26840
   HEAP32[$29 >> 2] = $10; //@line 26841
   $30 = $ReallocAsyncCtx4 + 12 | 0; //@line 26842
   HEAP32[$30 >> 2] = $12; //@line 26843
   sp = STACKTOP; //@line 26844
   return;
  } else {
   $18 = HEAP32[$15 + 4 >> 2] | 0; //@line 26848
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 26849
   FUNCTION_TABLE_vii[$18 & 15]($AsyncRetVal, $12); //@line 26850
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 547; //@line 26853
    $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 26854
    HEAP32[$19 >> 2] = $2; //@line 26855
    $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 26856
    HEAP32[$20 >> 2] = $AsyncRetVal; //@line 26857
    $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 26858
    HEAP32[$21 >> 2] = $4; //@line 26859
    $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 26860
    HEAP32[$22 >> 2] = $6; //@line 26861
    $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 26862
    HEAP32[$23 >> 2] = $8; //@line 26863
    $24 = $ReallocAsyncCtx2 + 24 | 0; //@line 26864
    HEAP32[$24 >> 2] = $10; //@line 26865
    $25 = $ReallocAsyncCtx2 + 28 | 0; //@line 26866
    HEAP32[$25 >> 2] = $12; //@line 26867
    sp = STACKTOP; //@line 26868
    return;
   }
   ___async_unwind = 0; //@line 26871
   HEAP32[$ReallocAsyncCtx2 >> 2] = 547; //@line 26872
   $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 26873
   HEAP32[$19 >> 2] = $2; //@line 26874
   $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 26875
   HEAP32[$20 >> 2] = $AsyncRetVal; //@line 26876
   $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 26877
   HEAP32[$21 >> 2] = $4; //@line 26878
   $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 26879
   HEAP32[$22 >> 2] = $6; //@line 26880
   $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 26881
   HEAP32[$23 >> 2] = $8; //@line 26882
   $24 = $ReallocAsyncCtx2 + 24 | 0; //@line 26883
   HEAP32[$24 >> 2] = $10; //@line 26884
   $25 = $ReallocAsyncCtx2 + 28 | 0; //@line 26885
   HEAP32[$25 >> 2] = $12; //@line 26886
   sp = STACKTOP; //@line 26887
   return;
  }
 }
 $32 = $8 + 16 | 0; //@line 26891
 HEAP32[$32 >> 2] = 0; //@line 26892
 $33 = HEAP32[$10 >> 2] | 0; //@line 26893
 if ($33 | 0) {
  $36 = HEAP32[$33 + 8 >> 2] | 0; //@line 26897
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 26898
  FUNCTION_TABLE_vi[$36 & 1023]($12); //@line 26899
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 549; //@line 26902
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 26903
   HEAP32[$37 >> 2] = $32; //@line 26904
   sp = STACKTOP; //@line 26905
   return;
  }
  ___async_unwind = 0; //@line 26908
  HEAP32[$ReallocAsyncCtx3 >> 2] = 549; //@line 26909
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 26910
  HEAP32[$37 >> 2] = $32; //@line 26911
  sp = STACKTOP; //@line 26912
  return;
 }
 if (0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 26919
 _mbed_assert_internal(13650, 13668, 57); //@line 26920
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 550; //@line 26923
  sp = STACKTOP; //@line 26924
  return;
 }
 ___async_unwind = 0; //@line 26927
 HEAP32[$ReallocAsyncCtx6 >> 2] = 550; //@line 26928
 sp = STACKTOP; //@line 26929
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $15 = 0, $16 = 0, $17 = 0, $25 = 0, $28 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $42 = 0, $43 = 0, $46 = 0, $49 = 0, $5 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 257
 STACKTOP = STACKTOP + 16 | 0; //@line 258
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 258
 $3 = sp; //@line 259
 $4 = HEAP32[$0 >> 2] | 0; //@line 260
 $5 = $1 + 12 | 0; //@line 261
 $6 = HEAP32[$5 >> 2] | 0; //@line 262
 do {
  if (!$6) {
   $16 = 0; //@line 266
  } else {
   $9 = HEAP32[$6 + 4 >> 2] | 0; //@line 269
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 270
   FUNCTION_TABLE_vii[$9 & 15]($3, $1); //@line 271
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 545; //@line 274
    HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 276
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 278
    HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 280
    HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 282
    HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 284
    sp = STACKTOP; //@line 285
    STACKTOP = sp; //@line 286
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 288
    $16 = HEAP32[$5 >> 2] | 0; //@line 290
    break;
   }
  }
 } while (0);
 $15 = $3 + 12 | 0; //@line 295
 HEAP32[$15 >> 2] = $16; //@line 296
 $AsyncCtx12 = _emscripten_alloc_async_context(28, sp) | 0; //@line 297
 $17 = _equeue_alloc($4, 16) | 0; //@line 298
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 546; //@line 301
  HEAP32[$AsyncCtx12 + 4 >> 2] = $15; //@line 303
  HEAP32[$AsyncCtx12 + 8 >> 2] = $2; //@line 305
  HEAP32[$AsyncCtx12 + 12 >> 2] = $4; //@line 307
  HEAP32[$AsyncCtx12 + 16 >> 2] = $1; //@line 309
  HEAP32[$AsyncCtx12 + 20 >> 2] = $15; //@line 311
  HEAP32[$AsyncCtx12 + 24 >> 2] = $3; //@line 313
  sp = STACKTOP; //@line 314
  STACKTOP = sp; //@line 315
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 317
 do {
  if (!$17) {
   $$0$i = 0; //@line 321
  } else {
   $25 = HEAP32[$15 >> 2] | 0; //@line 323
   do {
    if (!$25) {
     $37 = 0; //@line 327
    } else {
     $28 = HEAP32[$25 + 4 >> 2] | 0; //@line 330
     $AsyncCtx2 = _emscripten_alloc_async_context(32, sp) | 0; //@line 331
     FUNCTION_TABLE_vii[$28 & 15]($17, $3); //@line 332
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 547; //@line 335
      HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 337
      HEAP32[$AsyncCtx2 + 8 >> 2] = $17; //@line 339
      HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 341
      HEAP32[$AsyncCtx2 + 16 >> 2] = $4; //@line 343
      HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 345
      HEAP32[$AsyncCtx2 + 24 >> 2] = $15; //@line 347
      HEAP32[$AsyncCtx2 + 28 >> 2] = $3; //@line 349
      sp = STACKTOP; //@line 350
      STACKTOP = sp; //@line 351
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 353
      $37 = HEAP32[$15 >> 2] | 0; //@line 355
      break;
     }
    }
   } while (0);
   HEAP32[$17 + 12 >> 2] = $37; //@line 361
   _equeue_event_delay($17, $2); //@line 362
   _equeue_event_dtor($17, 267); //@line 363
   $AsyncCtx9 = _emscripten_alloc_async_context(16, sp) | 0; //@line 364
   $38 = _equeue_post($4, 268, $17) | 0; //@line 365
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 548; //@line 368
    HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 370
    HEAP32[$AsyncCtx9 + 8 >> 2] = $15; //@line 372
    HEAP32[$AsyncCtx9 + 12 >> 2] = $3; //@line 374
    sp = STACKTOP; //@line 375
    STACKTOP = sp; //@line 376
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 378
    $$0$i = $38; //@line 379
    break;
   }
  }
 } while (0);
 $42 = $1 + 16 | 0; //@line 384
 HEAP32[$42 >> 2] = $$0$i; //@line 385
 $43 = HEAP32[$15 >> 2] | 0; //@line 386
 do {
  if (!$43) {
   $49 = $$0$i; //@line 390
  } else {
   $46 = HEAP32[$43 + 8 >> 2] | 0; //@line 393
   $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 394
   FUNCTION_TABLE_vi[$46 & 1023]($3); //@line 395
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 549; //@line 398
    HEAP32[$AsyncCtx6 + 4 >> 2] = $42; //@line 400
    sp = STACKTOP; //@line 401
    STACKTOP = sp; //@line 402
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx6 | 0); //@line 404
    $49 = HEAP32[$42 >> 2] | 0; //@line 406
    break;
   }
  }
 } while (0);
 if ($49 | 0) {
  STACKTOP = sp; //@line 413
  return;
 }
 $AsyncCtx16 = _emscripten_alloc_async_context(4, sp) | 0; //@line 415
 _mbed_assert_internal(13650, 13668, 57); //@line 416
 if (___async) {
  HEAP32[$AsyncCtx16 >> 2] = 550; //@line 419
  sp = STACKTOP; //@line 420
  STACKTOP = sp; //@line 421
  return;
 }
 _emscripten_free_async_context($AsyncCtx16 | 0); //@line 423
 STACKTOP = sp; //@line 424
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_132($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 27731
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27733
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27739
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27741
 HEAP32[HEAP32[$0 + 12 >> 2] >> 2] = HEAP32[HEAP32[$0 + 8 >> 2] >> 2]; //@line 27743
 $11 = $8 + 32 | 0; //@line 27744
 $12 = $8 + 44 | 0; //@line 27745
 $13 = HEAP32[$12 >> 2] | 0; //@line 27746
 if (!$13) {
  HEAP32[___async_retval >> 2] = 0; //@line 27750
  return;
 }
 $15 = $2 + 2516 | 0; //@line 27753
 if (($15 | 0) == ($11 | 0)) {
  $36 = HEAP32[$13 + 4 >> 2] | 0; //@line 27757
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 27758
  FUNCTION_TABLE_vii[$36 & 15]($10, $11); //@line 27759
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 338; //@line 27762
   $37 = $ReallocAsyncCtx7 + 4 | 0; //@line 27763
   HEAP32[$37 >> 2] = $12; //@line 27764
   $38 = $ReallocAsyncCtx7 + 8 | 0; //@line 27765
   HEAP32[$38 >> 2] = $2; //@line 27766
   $39 = $ReallocAsyncCtx7 + 12 | 0; //@line 27767
   HEAP32[$39 >> 2] = $10; //@line 27768
   sp = STACKTOP; //@line 27769
   return;
  }
  ___async_unwind = 0; //@line 27772
  HEAP32[$ReallocAsyncCtx7 >> 2] = 338; //@line 27773
  $37 = $ReallocAsyncCtx7 + 4 | 0; //@line 27774
  HEAP32[$37 >> 2] = $12; //@line 27775
  $38 = $ReallocAsyncCtx7 + 8 | 0; //@line 27776
  HEAP32[$38 >> 2] = $2; //@line 27777
  $39 = $ReallocAsyncCtx7 + 12 | 0; //@line 27778
  HEAP32[$39 >> 2] = $10; //@line 27779
  sp = STACKTOP; //@line 27780
  return;
 }
 $17 = $2 + 2528 | 0; //@line 27783
 $18 = HEAP32[$17 >> 2] | 0; //@line 27784
 if (!$18) {
  $29 = HEAP32[$13 + 4 >> 2] | 0; //@line 27788
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 27789
  FUNCTION_TABLE_vii[$29 & 15]($15, $11); //@line 27790
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 337; //@line 27793
   $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 27794
   HEAP32[$30 >> 2] = $12; //@line 27795
   $31 = $ReallocAsyncCtx6 + 8 | 0; //@line 27796
   HEAP32[$31 >> 2] = $17; //@line 27797
   $32 = $ReallocAsyncCtx6 + 12 | 0; //@line 27798
   HEAP32[$32 >> 2] = $2; //@line 27799
   $33 = $ReallocAsyncCtx6 + 16 | 0; //@line 27800
   HEAP32[$33 >> 2] = $10; //@line 27801
   $34 = $ReallocAsyncCtx6 + 20 | 0; //@line 27802
   HEAP32[$34 >> 2] = $11; //@line 27803
   sp = STACKTOP; //@line 27804
   return;
  }
  ___async_unwind = 0; //@line 27807
  HEAP32[$ReallocAsyncCtx6 >> 2] = 337; //@line 27808
  $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 27809
  HEAP32[$30 >> 2] = $12; //@line 27810
  $31 = $ReallocAsyncCtx6 + 8 | 0; //@line 27811
  HEAP32[$31 >> 2] = $17; //@line 27812
  $32 = $ReallocAsyncCtx6 + 12 | 0; //@line 27813
  HEAP32[$32 >> 2] = $2; //@line 27814
  $33 = $ReallocAsyncCtx6 + 16 | 0; //@line 27815
  HEAP32[$33 >> 2] = $10; //@line 27816
  $34 = $ReallocAsyncCtx6 + 20 | 0; //@line 27817
  HEAP32[$34 >> 2] = $11; //@line 27818
  sp = STACKTOP; //@line 27819
  return;
 } else {
  $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 27823
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 27824
  FUNCTION_TABLE_vi[$21 & 1023]($15); //@line 27825
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 336; //@line 27828
   $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 27829
   HEAP32[$22 >> 2] = $12; //@line 27830
   $23 = $ReallocAsyncCtx5 + 8 | 0; //@line 27831
   HEAP32[$23 >> 2] = $17; //@line 27832
   $24 = $ReallocAsyncCtx5 + 12 | 0; //@line 27833
   HEAP32[$24 >> 2] = $2; //@line 27834
   $25 = $ReallocAsyncCtx5 + 16 | 0; //@line 27835
   HEAP32[$25 >> 2] = $15; //@line 27836
   $26 = $ReallocAsyncCtx5 + 20 | 0; //@line 27837
   HEAP32[$26 >> 2] = $11; //@line 27838
   $27 = $ReallocAsyncCtx5 + 24 | 0; //@line 27839
   HEAP32[$27 >> 2] = $10; //@line 27840
   sp = STACKTOP; //@line 27841
   return;
  }
  ___async_unwind = 0; //@line 27844
  HEAP32[$ReallocAsyncCtx5 >> 2] = 336; //@line 27845
  $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 27846
  HEAP32[$22 >> 2] = $12; //@line 27847
  $23 = $ReallocAsyncCtx5 + 8 | 0; //@line 27848
  HEAP32[$23 >> 2] = $17; //@line 27849
  $24 = $ReallocAsyncCtx5 + 12 | 0; //@line 27850
  HEAP32[$24 >> 2] = $2; //@line 27851
  $25 = $ReallocAsyncCtx5 + 16 | 0; //@line 27852
  HEAP32[$25 >> 2] = $15; //@line 27853
  $26 = $ReallocAsyncCtx5 + 20 | 0; //@line 27854
  HEAP32[$26 >> 2] = $11; //@line 27855
  $27 = $ReallocAsyncCtx5 + 24 | 0; //@line 27856
  HEAP32[$27 >> 2] = $10; //@line 27857
  sp = STACKTOP; //@line 27858
  return;
 }
}
function _ticker_read_us__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $58 = 0, $59 = 0, $65 = 0, $66 = 0, $67 = 0, $76 = 0, $77 = 0, $78 = 0, $80 = 0, $84 = 0, $85 = 0, $91 = 0, $92 = 0, $93 = 0, $95 = 0, $99 = 0, $AsyncRetVal = 0, label = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2826
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2828
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 2830
 if (($AsyncRetVal | 0) == (HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0)) {
  $99 = HEAP32[$2 >> 2] | 0; //@line 2836
  $100 = $99 + 48 | 0; //@line 2837
  $101 = $100; //@line 2838
  $102 = $101; //@line 2839
  $103 = HEAP32[$102 >> 2] | 0; //@line 2840
  $104 = $101 + 4 | 0; //@line 2841
  $105 = $104; //@line 2842
  $106 = HEAP32[$105 >> 2] | 0; //@line 2843
  $107 = ___async_retval; //@line 2844
  $108 = $107; //@line 2845
  $109 = $108; //@line 2846
  HEAP32[$109 >> 2] = $103; //@line 2847
  $110 = $108 + 4 | 0; //@line 2848
  $111 = $110; //@line 2849
  HEAP32[$111 >> 2] = $106; //@line 2850
  return;
 }
 $10 = $4 + 32 | 0; //@line 2853
 $15 = $AsyncRetVal - (HEAP32[$10 >> 2] | 0) & HEAP32[$4 + 12 >> 2]; //@line 2858
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 2859
 $17 = HEAP32[$4 + 8 >> 2] | 0; //@line 2861
 L5 : do {
  if (($17 | 0) < 1e6) {
   switch ($17 | 0) {
   case 32768:
    {
     break;
    }
   default:
    {
     label = 6; //@line 2870
     break L5;
    }
   }
   $18 = ___muldi3($15 | 0, 0, 1e6, 0) | 0; //@line 2874
   $20 = _bitshift64Lshr($18 | 0, tempRet0 | 0, 15) | 0; //@line 2876
   $21 = tempRet0; //@line 2877
   $24 = $4 + 40 | 0; //@line 2880
   $25 = $24; //@line 2881
   $31 = _i64Add(HEAP32[$25 >> 2] | 0, HEAP32[$25 + 4 >> 2] | 0, $15 * 1e6 & 32704 | 0, 0) | 0; //@line 2887
   $32 = tempRet0; //@line 2888
   $33 = $24; //@line 2889
   HEAP32[$33 >> 2] = $31; //@line 2891
   HEAP32[$33 + 4 >> 2] = $32; //@line 2894
   if ($32 >>> 0 < 0 | ($32 | 0) == 0 & $31 >>> 0 < 32768) {
    $91 = $20; //@line 2901
    $92 = $21; //@line 2901
   } else {
    $42 = _i64Add($20 | 0, $21 | 0, 1, 0) | 0; //@line 2903
    $43 = tempRet0; //@line 2904
    $44 = _i64Add($31 | 0, $32 | 0, -32768, -1) | 0; //@line 2905
    $46 = $24; //@line 2907
    HEAP32[$46 >> 2] = $44; //@line 2909
    HEAP32[$46 + 4 >> 2] = tempRet0; //@line 2912
    $91 = $42; //@line 2913
    $92 = $43; //@line 2913
   }
  } else {
   switch ($17 | 0) {
   case 1e6:
    {
     $91 = $15; //@line 2918
     $92 = 0; //@line 2918
     break;
    }
   default:
    {
     label = 6; //@line 2922
    }
   }
  }
 } while (0);
 if ((label | 0) == 6) {
  $50 = ___muldi3($15 | 0, 0, 1e6, 0) | 0; //@line 2928
  $51 = tempRet0; //@line 2929
  $52 = ___udivdi3($50 | 0, $51 | 0, $17 | 0, 0) | 0; //@line 2930
  $53 = tempRet0; //@line 2931
  $54 = ___muldi3($52 | 0, $53 | 0, $17 | 0, 0) | 0; //@line 2932
  $56 = _i64Subtract($50 | 0, $51 | 0, $54 | 0, tempRet0 | 0) | 0; //@line 2934
  $58 = $4 + 40 | 0; //@line 2936
  $59 = $58; //@line 2937
  $65 = _i64Add($56 | 0, tempRet0 | 0, HEAP32[$59 >> 2] | 0, HEAP32[$59 + 4 >> 2] | 0) | 0; //@line 2943
  $66 = tempRet0; //@line 2944
  $67 = $58; //@line 2945
  HEAP32[$67 >> 2] = $65; //@line 2947
  HEAP32[$67 + 4 >> 2] = $66; //@line 2950
  if ($66 >>> 0 < 0 | ($66 | 0) == 0 & $65 >>> 0 < $17 >>> 0) {
   $91 = $52; //@line 2957
   $92 = $53; //@line 2957
  } else {
   $76 = _i64Add($52 | 0, $53 | 0, 1, 0) | 0; //@line 2959
   $77 = tempRet0; //@line 2960
   $78 = _i64Subtract($65 | 0, $66 | 0, $17 | 0, 0) | 0; //@line 2961
   $80 = $58; //@line 2963
   HEAP32[$80 >> 2] = $78; //@line 2965
   HEAP32[$80 + 4 >> 2] = tempRet0; //@line 2968
   $91 = $76; //@line 2969
   $92 = $77; //@line 2969
  }
 }
 $84 = $4 + 48 | 0; //@line 2972
 $85 = $84; //@line 2973
 $93 = _i64Add(HEAP32[$85 >> 2] | 0, HEAP32[$85 + 4 >> 2] | 0, $91 | 0, $92 | 0) | 0; //@line 2979
 $95 = $84; //@line 2981
 HEAP32[$95 >> 2] = $93; //@line 2983
 HEAP32[$95 + 4 >> 2] = tempRet0; //@line 2986
 $99 = HEAP32[$2 >> 2] | 0; //@line 2987
 $100 = $99 + 48 | 0; //@line 2988
 $101 = $100; //@line 2989
 $102 = $101; //@line 2990
 $103 = HEAP32[$102 >> 2] | 0; //@line 2991
 $104 = $101 + 4 | 0; //@line 2992
 $105 = $104; //@line 2993
 $106 = HEAP32[$105 >> 2] | 0; //@line 2994
 $107 = ___async_retval; //@line 2995
 $108 = $107; //@line 2996
 $109 = $108; //@line 2997
 HEAP32[$109 >> 2] = $103; //@line 2998
 $110 = $108 + 4 | 0; //@line 2999
 $111 = $110; //@line 3000
 HEAP32[$111 >> 2] = $106; //@line 3001
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $AsyncRetVal = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9443
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9445
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9447
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9449
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9453
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 9455
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 9457
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 9459
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 9461
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 9463
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 9465
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 9467
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 9469
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 9471
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 9473
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 9475
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 9479
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 9481
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 9483
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 9485
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 9487
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 9489
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 9491
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 9493
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 9495
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 9497
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 9499
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 9501
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 9503
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 9507
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 9509
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 9511
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 9513
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 9515
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 9517
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 9519
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 9521
 if (!$AsyncRetVal) {
  _memcpy(HEAP32[$0 + 24 >> 2] | 0, $36 | 0, HEAP32[$0 + 76 >> 2] | 0) | 0; //@line 9524
 }
 HEAP8[$22 >> 0] = 0; //@line 9526
 HEAP8[$40 >> 0] = 0; //@line 9527
 HEAP8[$16 >> 0] = 0; //@line 9528
 HEAP8[$50 >> 0] = 0; //@line 9529
 HEAP8[$34 >> 0] = 0; //@line 9530
 HEAP8[$30 >> 0] = 0; //@line 9531
 HEAP8[$52 >> 0] = 0; //@line 9532
 HEAP8[$20 >> 0] = 0; //@line 9533
 HEAP8[$44 >> 0] = 0; //@line 9534
 HEAP8[$54 >> 0] = 0; //@line 9535
 HEAP8[$76 >> 0] = 0; //@line 9536
 HEAP8[$32 >> 0] = 0; //@line 9537
 HEAP8[$56 >> 0] = 0; //@line 9538
 HEAP8[$62 >> 0] = 0; //@line 9539
 HEAP8[$8 >> 0] = 0; //@line 9540
 HEAP8[$28 >> 0] = 0; //@line 9541
 HEAP8[$48 >> 0] = 0; //@line 9542
 HEAP8[$78 >> 0] = 0; //@line 9543
 HEAP8[$14 >> 0] = 0; //@line 9544
 HEAP8[$24 >> 0] = 0; //@line 9545
 HEAP8[$64 >> 0] = 0; //@line 9546
 HEAP8[$80 >> 0] = 0; //@line 9547
 HEAP8[$26 >> 0] = 0; //@line 9548
 HEAP8[$58 >> 0] = 0; //@line 9549
 HEAP8[$4 >> 0] = 0; //@line 9550
 HEAP8[$68 >> 0] = 0; //@line 9551
 HEAP8[$46 >> 0] = 0; //@line 9552
 HEAP8[$18 >> 0] = 0; //@line 9553
 HEAP8[$70 >> 0] = 0; //@line 9554
 HEAP8[$60 >> 0] = 0; //@line 9555
 HEAP8[$6 >> 0] = 0; //@line 9556
 HEAP8[$72 >> 0] = 0; //@line 9557
 HEAP32[$42 >> 2] = 0; //@line 9558
 HEAP8[$10 >> 0] = 0; //@line 9560
 HEAP8[$74 + 17 >> 0] = 0; //@line 9562
 HEAP8[$74 + 18 >> 0] = 0; //@line 9564
 HEAP8[$74 + 19 >> 0] = 0; //@line 9566
 HEAP8[$74 + 20 >> 0] = 0; //@line 9568
 HEAP8[$74 + 21 >> 0] = 0; //@line 9570
 HEAP8[$74 + 22 >> 0] = 0; //@line 9572
 HEAP8[$74 + 23 >> 0] = 0; //@line 9574
 HEAP8[$74 + 24 >> 0] = 0; //@line 9576
 HEAP8[$74 + 25 >> 0] = 0; //@line 9578
 HEAP8[$74 + 26 >> 0] = 0; //@line 9580
 HEAP8[$74 + 27 >> 0] = 0; //@line 9582
 HEAP8[$74 + 28 >> 0] = 0; //@line 9584
 HEAP8[$74 + 29 >> 0] = 0; //@line 9586
 HEAP8[$74 + 30 >> 0] = 0; //@line 9588
 HEAP8[$74 + 31 >> 0] = 0; //@line 9589
 HEAP8[$36 >> 0] = 0; //@line 9591
 HEAP8[$74 + 1 >> 0] = 0; //@line 9593
 HEAP8[$74 + 2 >> 0] = 0; //@line 9595
 HEAP8[$74 + 3 >> 0] = 0; //@line 9597
 HEAP8[$74 + 4 >> 0] = 0; //@line 9599
 HEAP8[$74 + 5 >> 0] = 0; //@line 9601
 HEAP8[$74 + 6 >> 0] = 0; //@line 9603
 HEAP8[$74 + 7 >> 0] = 0; //@line 9605
 HEAP8[$74 + 8 >> 0] = 0; //@line 9607
 HEAP8[$74 + 9 >> 0] = 0; //@line 9609
 HEAP8[$74 + 10 >> 0] = 0; //@line 9611
 HEAP8[$74 + 11 >> 0] = 0; //@line 9613
 HEAP8[$74 + 12 >> 0] = 0; //@line 9615
 HEAP8[$74 + 13 >> 0] = 0; //@line 9617
 HEAP8[$74 + 14 >> 0] = 0; //@line 9619
 HEAP8[$74 + 15 >> 0] = 0; //@line 9620
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 9622
 return;
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $12 = 0, $16 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $29 = 0, $3 = 0, $32 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 6541
 STACKTOP = STACKTOP + 32 | 0; //@line 6542
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 6542
 $2 = sp + 8 | 0; //@line 6544
 $3 = $0 + 2480 | 0; //@line 6545
 switch (HEAP32[$3 >> 2] | 0) {
 case 3:
  {
   HEAP32[$3 >> 2] = 1; //@line 6549
   _mbed_tracef(16, 12482, 12611, sp); //@line 6550
   $AsyncCtx10 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6551
   $5 = __ZN7LoRaMac4joinEb($0, 1) | 0; //@line 6552
   if (___async) {
    HEAP32[$AsyncCtx10 >> 2] = 218; //@line 6555
    HEAP32[$AsyncCtx10 + 4 >> 2] = $1; //@line 6557
    sp = STACKTOP; //@line 6558
    STACKTOP = sp; //@line 6559
    return;
   }
   _emscripten_free_async_context($AsyncCtx10 | 0); //@line 6561
   HEAP32[$1 >> 2] = $5; //@line 6562
   STACKTOP = sp; //@line 6563
   return;
  }
 case 4:
  {
   HEAP32[$3 >> 2] = 1; //@line 6567
   $AsyncCtx6 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6568
   $7 = __ZN7LoRaMac24continue_joining_processEv($0) | 0; //@line 6569
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 219; //@line 6572
    HEAP32[$AsyncCtx6 + 4 >> 2] = $2; //@line 6574
    HEAP32[$AsyncCtx6 + 8 >> 2] = $0; //@line 6576
    HEAP32[$AsyncCtx6 + 12 >> 2] = $3; //@line 6578
    sp = STACKTOP; //@line 6579
    STACKTOP = sp; //@line 6580
    return;
   }
   _emscripten_free_async_context($AsyncCtx6 | 0); //@line 6582
   if ($7) {
    STACKTOP = sp; //@line 6584
    return;
   }
   $11 = $0 + 2496 | 0; //@line 6586
   $12 = HEAP32[$11 >> 2] | 0; //@line 6587
   do {
    if ($12 | 0) {
     $16 = HEAP32[$0 + 3136 >> 2] | 0; //@line 6593
     $18 = HEAP32[$12 + 4 >> 2] | 0; //@line 6595
     $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 6596
     FUNCTION_TABLE_vii[$18 & 15]($2, $0 + 2484 | 0); //@line 6597
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 220; //@line 6600
      HEAP32[$AsyncCtx + 4 >> 2] = $11; //@line 6602
      HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 6604
      HEAP32[$AsyncCtx + 12 >> 2] = $16; //@line 6606
      HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 6608
      HEAP32[$AsyncCtx + 20 >> 2] = $3; //@line 6610
      sp = STACKTOP; //@line 6611
      STACKTOP = sp; //@line 6612
      return;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 6614
     $24 = $2 + 12 | 0; //@line 6616
     HEAP32[$24 >> 2] = HEAP32[$11 >> 2]; //@line 6617
     $AsyncCtx13 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6618
     $25 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($16, $2, 10) | 0; //@line 6619
     if (___async) {
      HEAP32[$AsyncCtx13 >> 2] = 221; //@line 6622
      HEAP32[$AsyncCtx13 + 4 >> 2] = $24; //@line 6624
      HEAP32[$AsyncCtx13 + 8 >> 2] = $2; //@line 6626
      HEAP32[$AsyncCtx13 + 12 >> 2] = $3; //@line 6628
      sp = STACKTOP; //@line 6629
      STACKTOP = sp; //@line 6630
      return;
     }
     _emscripten_free_async_context($AsyncCtx13 | 0); //@line 6632
     $29 = HEAP32[$24 >> 2] | 0; //@line 6633
     do {
      if ($29 | 0) {
       $32 = HEAP32[$29 + 8 >> 2] | 0; //@line 6638
       $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6639
       FUNCTION_TABLE_vi[$32 & 1023]($2); //@line 6640
       if (___async) {
        HEAP32[$AsyncCtx2 >> 2] = 222; //@line 6643
        HEAP32[$AsyncCtx2 + 4 >> 2] = $25; //@line 6645
        HEAP32[$AsyncCtx2 + 8 >> 2] = $2; //@line 6647
        HEAP32[$AsyncCtx2 + 12 >> 2] = $3; //@line 6649
        sp = STACKTOP; //@line 6650
        STACKTOP = sp; //@line 6651
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6653
        break;
       }
      }
     } while (0);
     if (!$25) {
      $AsyncCtx17 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6660
      _mbed_assert_internal(13097, 12384, 646); //@line 6661
      if (___async) {
       HEAP32[$AsyncCtx17 >> 2] = 223; //@line 6664
       HEAP32[$AsyncCtx17 + 4 >> 2] = $2; //@line 6666
       HEAP32[$AsyncCtx17 + 8 >> 2] = $3; //@line 6668
       sp = STACKTOP; //@line 6669
       STACKTOP = sp; //@line 6670
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx17 | 0); //@line 6672
       break;
      }
     }
    }
   } while (0);
   HEAP32[$3 >> 2] = 2; //@line 6678
   STACKTOP = sp; //@line 6679
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 6683
   return;
  }
 }
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $15 = 0, $17 = 0, $23 = 0, $26 = 0, $29 = 0, $30 = 0, $33 = 0, $36 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 8596
 STACKTOP = STACKTOP + 32 | 0; //@line 8597
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 8597
 $vararg_buffer = sp; //@line 8598
 $1 = sp + 8 | 0; //@line 8599
 $5 = (HEAP32[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) + 4 >> 2] | 0) == 1; //@line 8603
 $6 = __ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0; //@line 8604
 if (!$5) {
  if (HEAP32[$6 + 4 >> 2] | 0) {
   STACKTOP = sp; //@line 8610
   return;
  }
  if (!(HEAP32[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) + 8 >> 2] | 0)) {
   $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8617
   __ZN12LoRaWANStack23process_connected_stateEv($0); //@line 8618
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 297; //@line 8621
    sp = STACKTOP; //@line 8622
    STACKTOP = sp; //@line 8623
    return;
   }
   _emscripten_free_async_context($AsyncCtx6 | 0); //@line 8625
   STACKTOP = sp; //@line 8626
   return;
  } else {
   HEAP32[$vararg_buffer >> 2] = HEAP32[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) + 8 >> 2]; //@line 8631
   _mbed_tracef(2, 12482, 12748, $vararg_buffer); //@line 8632
   HEAP32[$0 + 2480 >> 2] = 4; //@line 8634
   HEAP32[$vararg_buffer >> 2] = 0; //@line 8635
   $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8636
   __ZN12LoRaWANStack21process_joining_stateER14lorawan_status($0, $vararg_buffer); //@line 8637
   if (___async) {
    HEAP32[$AsyncCtx13 >> 2] = 298; //@line 8640
    HEAP32[$AsyncCtx13 + 4 >> 2] = $vararg_buffer; //@line 8642
    sp = STACKTOP; //@line 8643
    STACKTOP = sp; //@line 8644
    return;
   }
   _emscripten_free_async_context($AsyncCtx13 | 0); //@line 8646
   STACKTOP = sp; //@line 8647
   return;
  }
 }
 if (HEAP32[$6 + 8 >> 2] | 0) {
  STACKTOP = sp; //@line 8654
  return;
 }
 $10 = $0 + 2512 | 0; //@line 8656
 $11 = HEAP32[$10 >> 2] | 0; //@line 8657
 if (!$11) {
  STACKTOP = sp; //@line 8660
  return;
 }
 $15 = HEAP32[$0 + 3136 >> 2] | 0; //@line 8664
 $17 = HEAP32[$11 + 4 >> 2] | 0; //@line 8666
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 8667
 FUNCTION_TABLE_vii[$17 & 15]($1, $0 + 2500 | 0); //@line 8668
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 293; //@line 8671
  HEAP32[$AsyncCtx + 4 >> 2] = $10; //@line 8673
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 8675
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 8677
  HEAP32[$AsyncCtx + 16 >> 2] = $15; //@line 8679
  HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 8681
  sp = STACKTOP; //@line 8682
  STACKTOP = sp; //@line 8683
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8685
 $23 = $1 + 12 | 0; //@line 8687
 HEAP32[$23 >> 2] = HEAP32[$10 >> 2]; //@line 8688
 $26 = HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) + 16 >> 0] | 0; //@line 8691
 $29 = HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) + 17 >> 0] | 0; //@line 8694
 $AsyncCtx9 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8695
 $30 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($15, $1, $26, $29) | 0; //@line 8696
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 294; //@line 8699
  HEAP32[$AsyncCtx9 + 4 >> 2] = $23; //@line 8701
  HEAP32[$AsyncCtx9 + 8 >> 2] = $1; //@line 8703
  sp = STACKTOP; //@line 8704
  STACKTOP = sp; //@line 8705
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 8707
 $33 = HEAP32[$23 >> 2] | 0; //@line 8708
 do {
  if ($33 | 0) {
   $36 = HEAP32[$33 + 8 >> 2] | 0; //@line 8713
   $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8714
   FUNCTION_TABLE_vi[$36 & 1023]($1); //@line 8715
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 295; //@line 8718
    HEAP32[$AsyncCtx2 + 4 >> 2] = $30; //@line 8720
    sp = STACKTOP; //@line 8721
    STACKTOP = sp; //@line 8722
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8724
    break;
   }
  }
 } while (0);
 if ($30 | 0) {
  STACKTOP = sp; //@line 8731
  return;
 }
 $AsyncCtx17 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8733
 _mbed_assert_internal(13097, 12384, 751); //@line 8734
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 296; //@line 8737
  sp = STACKTOP; //@line 8738
  STACKTOP = sp; //@line 8739
  return;
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 8741
 STACKTOP = sp; //@line 8742
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_243($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 5891
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5895
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5897
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5899
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5901
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5903
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 5905
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 5907
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 5909
 $19 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 5910
 if (!$19) {
  $31 = $6 + 12 | 0; //@line 5914
  HEAP32[$6 >> 2] = 453; //@line 5915
  HEAP32[$6 + 4 >> 2] = 0; //@line 5917
  HEAP32[$6 + 8 >> 2] = $4; //@line 5919
  HEAP32[$31 >> 2] = 844; //@line 5920
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 5921
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($8, $4 + 1816 | 0, $6); //@line 5922
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 454; //@line 5925
   $32 = $ReallocAsyncCtx7 + 4 | 0; //@line 5926
   HEAP32[$32 >> 2] = $4; //@line 5927
   $33 = $ReallocAsyncCtx7 + 8 | 0; //@line 5928
   HEAP32[$33 >> 2] = $12; //@line 5929
   $34 = $ReallocAsyncCtx7 + 12 | 0; //@line 5930
   HEAP32[$34 >> 2] = $8; //@line 5931
   $35 = $ReallocAsyncCtx7 + 16 | 0; //@line 5932
   HEAP32[$35 >> 2] = $14; //@line 5933
   $36 = $ReallocAsyncCtx7 + 20 | 0; //@line 5934
   HEAP32[$36 >> 2] = $16; //@line 5935
   $37 = $ReallocAsyncCtx7 + 24 | 0; //@line 5936
   HEAP32[$37 >> 2] = $31; //@line 5937
   $38 = $ReallocAsyncCtx7 + 28 | 0; //@line 5938
   HEAP32[$38 >> 2] = $18; //@line 5939
   $39 = $ReallocAsyncCtx7 + 32 | 0; //@line 5940
   HEAP32[$39 >> 2] = $6; //@line 5941
   sp = STACKTOP; //@line 5942
   return;
  }
  ___async_unwind = 0; //@line 5945
  HEAP32[$ReallocAsyncCtx7 >> 2] = 454; //@line 5946
  $32 = $ReallocAsyncCtx7 + 4 | 0; //@line 5947
  HEAP32[$32 >> 2] = $4; //@line 5948
  $33 = $ReallocAsyncCtx7 + 8 | 0; //@line 5949
  HEAP32[$33 >> 2] = $12; //@line 5950
  $34 = $ReallocAsyncCtx7 + 12 | 0; //@line 5951
  HEAP32[$34 >> 2] = $8; //@line 5952
  $35 = $ReallocAsyncCtx7 + 16 | 0; //@line 5953
  HEAP32[$35 >> 2] = $14; //@line 5954
  $36 = $ReallocAsyncCtx7 + 20 | 0; //@line 5955
  HEAP32[$36 >> 2] = $16; //@line 5956
  $37 = $ReallocAsyncCtx7 + 24 | 0; //@line 5957
  HEAP32[$37 >> 2] = $31; //@line 5958
  $38 = $ReallocAsyncCtx7 + 28 | 0; //@line 5959
  HEAP32[$38 >> 2] = $18; //@line 5960
  $39 = $ReallocAsyncCtx7 + 32 | 0; //@line 5961
  HEAP32[$39 >> 2] = $6; //@line 5962
  sp = STACKTOP; //@line 5963
  return;
 } else {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 5967
  $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 5968
  FUNCTION_TABLE_vi[$22 & 1023]($10); //@line 5969
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 452; //@line 5972
   $23 = $ReallocAsyncCtx + 4 | 0; //@line 5973
   HEAP32[$23 >> 2] = $4; //@line 5974
   $24 = $ReallocAsyncCtx + 8 | 0; //@line 5975
   HEAP32[$24 >> 2] = $6; //@line 5976
   $25 = $ReallocAsyncCtx + 12 | 0; //@line 5977
   HEAP32[$25 >> 2] = $8; //@line 5978
   $26 = $ReallocAsyncCtx + 16 | 0; //@line 5979
   HEAP32[$26 >> 2] = $14; //@line 5980
   $27 = $ReallocAsyncCtx + 20 | 0; //@line 5981
   HEAP32[$27 >> 2] = $16; //@line 5982
   $28 = $ReallocAsyncCtx + 24 | 0; //@line 5983
   HEAP32[$28 >> 2] = $12; //@line 5984
   $29 = $ReallocAsyncCtx + 28 | 0; //@line 5985
   HEAP32[$29 >> 2] = $18; //@line 5986
   sp = STACKTOP; //@line 5987
   return;
  }
  ___async_unwind = 0; //@line 5990
  HEAP32[$ReallocAsyncCtx >> 2] = 452; //@line 5991
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 5992
  HEAP32[$23 >> 2] = $4; //@line 5993
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 5994
  HEAP32[$24 >> 2] = $6; //@line 5995
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 5996
  HEAP32[$25 >> 2] = $8; //@line 5997
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 5998
  HEAP32[$26 >> 2] = $14; //@line 5999
  $27 = $ReallocAsyncCtx + 20 | 0; //@line 6000
  HEAP32[$27 >> 2] = $16; //@line 6001
  $28 = $ReallocAsyncCtx + 24 | 0; //@line 6002
  HEAP32[$28 >> 2] = $12; //@line 6003
  $29 = $ReallocAsyncCtx + 28 | 0; //@line 6004
  HEAP32[$29 >> 2] = $18; //@line 6005
  sp = STACKTOP; //@line 6006
  return;
 }
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre$phiZ2D = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $24 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $35 = 0, $38 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 9526
 STACKTOP = STACKTOP + 32 | 0; //@line 9527
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9527
 $2 = sp + 8 | 0; //@line 9529
 $3 = $0 + 2480 | 0; //@line 9530
 do {
  if (!(HEAP32[$3 >> 2] | 0)) {
   _mbed_tracef(2, 12482, 12832, sp); //@line 9535
   $$pre$phiZ2D = $0; //@line 9536
  } else {
   $AsyncCtx9 = _emscripten_alloc_async_context(24, sp) | 0; //@line 9538
   __ZN7LoRaMac19remove_channel_planEv($0) | 0; //@line 9539
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 326; //@line 9542
    HEAP32[$AsyncCtx9 + 4 >> 2] = $2; //@line 9544
    HEAP32[$AsyncCtx9 + 8 >> 2] = $0; //@line 9546
    HEAP32[$AsyncCtx9 + 12 >> 2] = $3; //@line 9548
    HEAP32[$AsyncCtx9 + 16 >> 2] = $1; //@line 9550
    HEAP32[$AsyncCtx9 + 20 >> 2] = $0; //@line 9552
    sp = STACKTOP; //@line 9553
    STACKTOP = sp; //@line 9554
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 9556
    $$pre$phiZ2D = $0; //@line 9557
    break;
   }
  }
 } while (0);
 $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9562
 __ZN7LoRaMac10disconnectEv($$pre$phiZ2D); //@line 9563
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 327; //@line 9566
  HEAP32[$AsyncCtx5 + 4 >> 2] = $0; //@line 9568
  HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 9570
  HEAP32[$AsyncCtx5 + 12 >> 2] = $1; //@line 9572
  HEAP32[$AsyncCtx5 + 16 >> 2] = $2; //@line 9574
  sp = STACKTOP; //@line 9575
  STACKTOP = sp; //@line 9576
  return;
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 9578
 HEAP8[$0 + 2532 >> 0] = 0; //@line 9580
 HEAP32[$3 >> 2] = 11; //@line 9581
 HEAP32[$1 >> 2] = -1011; //@line 9582
 $16 = $0 + 2872 | 0; //@line 9583
 HEAP32[$16 >> 2] = HEAP32[$16 >> 2] & -5; //@line 9586
 $19 = $0 + 2496 | 0; //@line 9587
 $20 = HEAP32[$19 >> 2] | 0; //@line 9588
 if (!$20) {
  STACKTOP = sp; //@line 9591
  return;
 }
 $24 = HEAP32[$0 + 3136 >> 2] | 0; //@line 9595
 $26 = HEAP32[$20 + 4 >> 2] | 0; //@line 9597
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 9598
 FUNCTION_TABLE_vii[$26 & 15]($2, $0 + 2484 | 0); //@line 9599
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 328; //@line 9602
  HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 9604
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 9606
  HEAP32[$AsyncCtx + 12 >> 2] = $24; //@line 9608
  HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 9610
  sp = STACKTOP; //@line 9611
  STACKTOP = sp; //@line 9612
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9614
 $31 = $2 + 12 | 0; //@line 9616
 HEAP32[$31 >> 2] = HEAP32[$19 >> 2]; //@line 9617
 $AsyncCtx12 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9618
 $32 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($24, $2, 1) | 0; //@line 9619
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 329; //@line 9622
  HEAP32[$AsyncCtx12 + 4 >> 2] = $31; //@line 9624
  HEAP32[$AsyncCtx12 + 8 >> 2] = $2; //@line 9626
  sp = STACKTOP; //@line 9627
  STACKTOP = sp; //@line 9628
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 9630
 $35 = HEAP32[$31 >> 2] | 0; //@line 9631
 do {
  if ($35 | 0) {
   $38 = HEAP32[$35 + 8 >> 2] | 0; //@line 9636
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9637
   FUNCTION_TABLE_vi[$38 & 1023]($2); //@line 9638
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 330; //@line 9641
    HEAP32[$AsyncCtx2 + 4 >> 2] = $32; //@line 9643
    HEAP32[$AsyncCtx2 + 8 >> 2] = $2; //@line 9645
    sp = STACKTOP; //@line 9646
    STACKTOP = sp; //@line 9647
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9649
    break;
   }
  }
 } while (0);
 if ($32 | 0) {
  STACKTOP = sp; //@line 9656
  return;
 }
 $AsyncCtx16 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9658
 _mbed_assert_internal(13097, 12384, 646); //@line 9659
 if (___async) {
  HEAP32[$AsyncCtx16 >> 2] = 331; //@line 9662
  HEAP32[$AsyncCtx16 + 4 >> 2] = $2; //@line 9664
  sp = STACKTOP; //@line 9665
  STACKTOP = sp; //@line 9666
  return;
 }
 _emscripten_free_async_context($AsyncCtx16 | 0); //@line 9668
 STACKTOP = sp; //@line 9669
 return;
}
function _equeue_cancel($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$sink$in$i$i = 0, $$sink$in$in$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $24 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $42 = 0, $44 = 0, $46 = 0, $49 = 0, $5 = 0, $56 = 0, $57 = 0, $59 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $72 = 0, $73 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3485
 if (!$1) {
  return;
 }
 $5 = $0 + 16 | 0; //@line 3492
 $10 = (HEAP32[$0 + 12 >> 2] | 0) + ((1 << HEAP32[$5 >> 2]) + -1 & $1) | 0; //@line 3497
 $11 = $0 + 128 | 0; //@line 3498
 _equeue_mutex_lock($11); //@line 3499
 $12 = $10 + 4 | 0; //@line 3500
 $13 = HEAP8[$12 >> 0] | 0; //@line 3501
 $14 = $13 & 255; //@line 3502
 $15 = HEAP32[$5 >> 2] | 0; //@line 3503
 if (($1 >> $15 | 0) != ($14 | 0)) {
  _equeue_mutex_unlock($11); //@line 3507
  return;
 }
 HEAP32[$10 + 32 >> 2] = 0; //@line 3511
 HEAP32[$10 + 24 >> 2] = -1; //@line 3513
 $24 = (HEAP32[$10 + 20 >> 2] | 0) - (HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 3518
 do {
  if (($24 | 0) >= 0) {
   if (!$24) {
    if ((HEAP8[$10 + 5 >> 0] | 0) != (HEAP8[$0 + 9 >> 0] | 0)) {
     break;
    }
   }
   $32 = $10 + 12 | 0; //@line 3533
   $33 = HEAP32[$32 >> 2] | 0; //@line 3534
   $35 = $10 + 8 | 0; //@line 3536
   $36 = HEAP32[$35 >> 2] | 0; //@line 3537
   $37 = $33; //@line 3538
   if (!$33) {
    $44 = $10 + 16 | 0; //@line 3540
    HEAP32[HEAP32[$44 >> 2] >> 2] = $36; //@line 3542
    $46 = HEAP32[$35 >> 2] | 0; //@line 3543
    if ($46 | 0) {
     $$sink$in$in$i = $44; //@line 3546
     $49 = $46; //@line 3546
     label = 13; //@line 3547
    }
   } else {
    $38 = $33 + 8 | 0; //@line 3550
    HEAP32[$38 >> 2] = $36; //@line 3551
    if ($36 | 0) {
     HEAP32[$36 + 16 >> 2] = $38; //@line 3556
    }
    $42 = $10 + 16 | 0; //@line 3558
    HEAP32[HEAP32[$42 >> 2] >> 2] = $37; //@line 3560
    $$sink$in$in$i = $42; //@line 3562
    $49 = HEAP32[$32 >> 2] | 0; //@line 3562
    label = 13; //@line 3563
   }
   if ((label | 0) == 13) {
    HEAP32[$49 + 16 >> 2] = HEAP32[$$sink$in$in$i >> 2]; //@line 3568
   }
   HEAP8[$12 >> 0] = (($13 + 1 & 255) << $15 | 0) == 0 ? 1 : $14 + 1 & 255; //@line 3577
   _equeue_mutex_unlock($11); //@line 3578
   $56 = $10 + 36 | 0; //@line 3579
   $57 = $56 + -36 | 0; //@line 3580
   $59 = HEAP32[$56 + -8 >> 2] | 0; //@line 3582
   do {
    if ($59 | 0) {
     $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 3586
     FUNCTION_TABLE_vi[$59 & 1023]($56); //@line 3587
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 123; //@line 3590
      HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3592
      HEAP32[$AsyncCtx + 8 >> 2] = $56; //@line 3594
      HEAP32[$AsyncCtx + 12 >> 2] = $57; //@line 3596
      sp = STACKTOP; //@line 3597
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 3600
      break;
     }
    }
   } while (0);
   $64 = $0 + 156 | 0; //@line 3605
   _equeue_mutex_lock($64); //@line 3606
   $65 = $0 + 24 | 0; //@line 3607
   $66 = HEAP32[$65 >> 2] | 0; //@line 3608
   L28 : do {
    if (!$66) {
     $$02329$i$i = $65; //@line 3612
     label = 24; //@line 3613
    } else {
     $68 = HEAP32[$57 >> 2] | 0; //@line 3615
     $$025$i$i = $65; //@line 3616
     $70 = $66; //@line 3616
     while (1) {
      $69 = HEAP32[$70 >> 2] | 0; //@line 3618
      if ($69 >>> 0 >= $68 >>> 0) {
       break;
      }
      $72 = $70 + 8 | 0; //@line 3623
      $73 = HEAP32[$72 >> 2] | 0; //@line 3624
      if (!$73) {
       $$02329$i$i = $72; //@line 3627
       label = 24; //@line 3628
       break L28;
      } else {
       $$025$i$i = $72; //@line 3631
       $70 = $73; //@line 3631
      }
     }
     if (($69 | 0) == ($68 | 0)) {
      HEAP32[$56 + -24 >> 2] = $70; //@line 3637
      $$02330$i$i = $$025$i$i; //@line 3640
      $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 3640
     } else {
      $$02329$i$i = $$025$i$i; //@line 3642
      label = 24; //@line 3643
     }
    }
   } while (0);
   if ((label | 0) == 24) {
    HEAP32[$56 + -24 >> 2] = 0; //@line 3649
    $$02330$i$i = $$02329$i$i; //@line 3650
    $$sink$in$i$i = $$02329$i$i; //@line 3650
   }
   HEAP32[$56 + -28 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 3654
   HEAP32[$$02330$i$i >> 2] = $57; //@line 3655
   _equeue_mutex_unlock($64); //@line 3656
   return;
  }
 } while (0);
 _equeue_mutex_unlock($11); //@line 3660
 return;
}
function _gcm_mult($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$07475 = 0, $100 = 0, $101 = 0, $103 = 0, $109 = 0, $110 = 0, $111 = 0, $113 = 0, $116 = 0, $120 = 0, $126 = 0, $130 = 0, $134 = 0, $140 = 0, $144 = 0, $148 = 0, $15 = 0, $154 = 0, $158 = 0, $162 = 0, $22 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $46 = 0, $51 = 0, $6 = 0, $60 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $88 = 0, $92 = 0, $94 = 0;
 $4 = HEAP8[$1 + 15 >> 0] | 0; //@line 5287
 $6 = $4 & 15; //@line 5289
 $8 = $0 + 200 + ($6 << 3) | 0; //@line 5291
 $15 = $0 + 72 + ($6 << 3) | 0; //@line 5298
 $$07475 = 15; //@line 5304
 $22 = $4; //@line 5304
 $27 = HEAP32[$15 >> 2] | 0; //@line 5304
 $28 = HEAP32[$8 >> 2] | 0; //@line 5304
 $29 = HEAP32[$8 + 4 >> 2] | 0; //@line 5304
 $32 = HEAP32[$15 + 4 >> 2] | 0; //@line 5304
 while (1) {
  if (($$07475 | 0) == 15) {
   $69 = $27; //@line 5309
   $70 = $28; //@line 5309
   $71 = $29; //@line 5309
   $74 = $32; //@line 5309
  } else {
   $25 = $22 & 15; //@line 5312
   $30 = _bitshift64Shl($28 | 0, $29 | 0, 60) | 0; //@line 5314
   $31 = tempRet0; //@line 5315
   $33 = _bitshift64Lshr($27 | 0, $32 | 0, 4) | 0; //@line 5316
   $36 = tempRet0 | $31; //@line 5319
   $37 = _bitshift64Lshr($28 | 0, $29 | 0, 4) | 0; //@line 5320
   $38 = tempRet0; //@line 5321
   $40 = 208 + (($27 & 15) << 3) | 0; //@line 5323
   $46 = _bitshift64Shl(HEAP32[$40 >> 2] | 0, HEAP32[$40 + 4 >> 2] | 0, 48) | 0; //@line 5329
   $51 = $0 + 200 + ($25 << 3) | 0; //@line 5334
   $60 = $0 + 72 + ($25 << 3) | 0; //@line 5343
   $69 = HEAP32[$60 >> 2] ^ ($33 | $30); //@line 5351
   $70 = $46 ^ $37 ^ HEAP32[$51 >> 2]; //@line 5351
   $71 = tempRet0 ^ $38 ^ HEAP32[$51 + 4 >> 2]; //@line 5351
   $74 = HEAP32[$60 + 4 >> 2] ^ $36; //@line 5351
  }
  $72 = _bitshift64Shl($70 | 0, $71 | 0, 60) | 0; //@line 5354
  $73 = tempRet0; //@line 5355
  $75 = _bitshift64Lshr($69 | 0, $74 | 0, 4) | 0; //@line 5356
  $78 = tempRet0 | $73; //@line 5359
  $79 = _bitshift64Lshr($70 | 0, $71 | 0, 4) | 0; //@line 5360
  $80 = tempRet0; //@line 5361
  $82 = 208 + (($69 & 15) << 3) | 0; //@line 5363
  $88 = _bitshift64Shl(HEAP32[$82 >> 2] | 0, HEAP32[$82 + 4 >> 2] | 0, 48) | 0; //@line 5369
  $92 = ($22 & 255) >>> 4 & 255; //@line 5373
  $94 = $0 + 200 + ($92 << 3) | 0; //@line 5375
  $100 = $88 ^ $79 ^ HEAP32[$94 >> 2]; //@line 5381
  $101 = tempRet0 ^ $80 ^ HEAP32[$94 + 4 >> 2]; //@line 5382
  $103 = $0 + 72 + ($92 << 3) | 0; //@line 5384
  $109 = HEAP32[$103 >> 2] ^ ($75 | $72); //@line 5390
  $110 = HEAP32[$103 + 4 >> 2] ^ $78; //@line 5391
  $111 = $$07475 + -1 | 0; //@line 5392
  if (($$07475 | 0) <= 0) {
   break;
  }
  $$07475 = $111; //@line 5399
  $22 = HEAP8[$1 + $111 >> 0] | 0; //@line 5399
  $27 = $109; //@line 5399
  $28 = $100; //@line 5399
  $29 = $101; //@line 5399
  $32 = $110; //@line 5399
 }
 $113 = _bitshift64Lshr($100 | 0, $101 | 0, 56) | 0; //@line 5401
 HEAP8[$2 >> 0] = $113; //@line 5404
 $116 = _bitshift64Lshr($100 | 0, $101 | 0, 48) | 0; //@line 5405
 HEAP8[$2 + 1 >> 0] = $116; //@line 5409
 $120 = _bitshift64Lshr($100 | 0, $101 | 0, 40) | 0; //@line 5410
 HEAP8[$2 + 2 >> 0] = $120; //@line 5414
 HEAP8[$2 + 3 >> 0] = $101; //@line 5417
 $126 = _bitshift64Lshr($100 | 0, $101 | 0, 24) | 0; //@line 5418
 HEAP8[$2 + 4 >> 0] = $126; //@line 5422
 $130 = _bitshift64Lshr($100 | 0, $101 | 0, 16) | 0; //@line 5423
 HEAP8[$2 + 5 >> 0] = $130; //@line 5427
 $134 = _bitshift64Lshr($100 | 0, $101 | 0, 8) | 0; //@line 5428
 HEAP8[$2 + 6 >> 0] = $134; //@line 5432
 HEAP8[$2 + 7 >> 0] = $100; //@line 5435
 $140 = _bitshift64Lshr($109 | 0, $110 | 0, 56) | 0; //@line 5436
 HEAP8[$2 + 8 >> 0] = $140; //@line 5440
 $144 = _bitshift64Lshr($109 | 0, $110 | 0, 48) | 0; //@line 5441
 HEAP8[$2 + 9 >> 0] = $144; //@line 5445
 $148 = _bitshift64Lshr($109 | 0, $110 | 0, 40) | 0; //@line 5446
 HEAP8[$2 + 10 >> 0] = $148; //@line 5450
 HEAP8[$2 + 11 >> 0] = $110; //@line 5453
 $154 = _bitshift64Lshr($109 | 0, $110 | 0, 24) | 0; //@line 5454
 HEAP8[$2 + 12 >> 0] = $154; //@line 5458
 $158 = _bitshift64Lshr($109 | 0, $110 | 0, 16) | 0; //@line 5459
 HEAP8[$2 + 13 >> 0] = $158; //@line 5463
 $162 = _bitshift64Lshr($109 | 0, $110 | 0, 8) | 0; //@line 5464
 HEAP8[$2 + 14 >> 0] = $162; //@line 5468
 HEAP8[$2 + 15 >> 0] = $109; //@line 5471
 return;
}
function __ZN12LoRaWANStack9handle_rxEPhtRhRib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i = 0, $$0$off0 = 0, $$031 = 0, $$1 = 0, $$pre$phi39Z2D = 0, $13 = 0, $26 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $40 = 0, $43 = 0, $44 = 0, $48 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10484
 STACKTOP = STACKTOP + 16 | 0; //@line 10485
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10485
 if (!(HEAP8[$0 + 2532 >> 0] | 0)) {
  $$1 = -1017; //@line 10491
  STACKTOP = sp; //@line 10492
  return $$1 | 0; //@line 10492
 }
 $9 = $0 + 2816 | 0; //@line 10494
 if (!(HEAP8[$9 >> 0] | 0)) {
  $$1 = -1001; //@line 10498
  STACKTOP = sp; //@line 10499
  return $$1 | 0; //@line 10499
 }
 if (!$1) {
  $$1 = -1003; //@line 10503
  STACKTOP = sp; //@line 10504
  return $$1 | 0; //@line 10504
 }
 $13 = $2 & 65535; //@line 10506
 if (!($2 << 16 >> 16)) {
  $$1 = -1003; //@line 10509
  STACKTOP = sp; //@line 10510
  return $$1 | 0; //@line 10510
 }
 L13 : do {
  switch (HEAP32[$0 + 2828 >> 2] | 0) {
  case 0:
   {
    $$0$i = 1; //@line 10517
    break;
   }
  case 1:
   {
    $$0$i = 2; //@line 10521
    break;
   }
  case 2:
   {
    $$0$i = 4; //@line 10525
    break;
   }
  case 3:
   {
    $$0$i = 8; //@line 10529
    break;
   }
  default:
   {
    _mbed_tracef(2, 12482, 13075, sp); //@line 10533
    $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 10534
    _mbed_assert_internal(14465, 12384, 681); //@line 10535
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 348; //@line 10538
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 10540
     HEAP8[$AsyncCtx + 8 >> 0] = $5 & 1; //@line 10543
     HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 10545
     HEAP32[$AsyncCtx + 16 >> 2] = $4; //@line 10547
     HEAP16[$AsyncCtx + 20 >> 1] = $2; //@line 10549
     HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 10551
     HEAP32[$AsyncCtx + 28 >> 2] = $9; //@line 10553
     HEAP32[$AsyncCtx + 32 >> 2] = $13; //@line 10555
     sp = STACKTOP; //@line 10556
     STACKTOP = sp; //@line 10557
     return 0; //@line 10557
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 10559
     $$0$i = 1; //@line 10560
     break L13;
    }
   }
  }
 } while (0);
 $26 = HEAP8[$0 + 2837 >> 0] | 0; //@line 10567
 if ($5) {
  if ($26 << 24 >> 24 != (HEAP8[$3 >> 0] | 0)) {
   $$1 = -1001; //@line 10572
   STACKTOP = sp; //@line 10573
   return $$1 | 0; //@line 10573
  }
  if (!(HEAP32[$4 >> 2] & $$0$i)) {
   $$1 = -1001; //@line 10579
   STACKTOP = sp; //@line 10580
   return $$1 | 0; //@line 10580
  }
 }
 HEAP8[$3 >> 0] = $26; //@line 10583
 HEAP32[$4 >> 2] = $$0$i; //@line 10584
 $32 = $0 + 2840 | 0; //@line 10585
 $33 = HEAP32[$32 >> 2] | 0; //@line 10586
 $34 = $0 + 2844 | 0; //@line 10587
 $35 = HEAP16[$34 >> 1] | 0; //@line 10588
 $36 = $35 & 65535; //@line 10589
 $38 = $0 + 2866 | 0; //@line 10591
 $40 = (HEAP16[$38 >> 1] | 0) == 0; //@line 10593
 if (($35 & 65535) > ($2 & 65535)) {
  if ($40) {
   $43 = $0 + 2864 | 0; //@line 10598
   HEAP16[$43 >> 1] = $36 - $13; //@line 10599
   HEAP16[$38 >> 1] = $2; //@line 10600
   _memcpy($1 | 0, $33 | 0, $13 | 0) | 0; //@line 10601
   $$0$off0 = 0; //@line 10602
   $$031 = $2; //@line 10602
   $$pre$phi39Z2D = $43; //@line 10602
  } else {
   label = 19; //@line 10604
  }
 } else {
  if ($40) {
   $44 = $0 + 2864 | 0; //@line 10608
   HEAP16[$44 >> 1] = 0; //@line 10609
   HEAP16[$38 >> 1] = 0; //@line 10610
   _memcpy($1 | 0, $33 | 0, $36 | 0) | 0; //@line 10611
   $$0$off0 = 1; //@line 10612
   $$031 = $35; //@line 10612
   $$pre$phi39Z2D = $44; //@line 10612
  } else {
   label = 19; //@line 10614
  }
 }
 if ((label | 0) == 19) {
  $$0$off0 = 0; //@line 10619
  $$031 = $35; //@line 10619
  $$pre$phi39Z2D = $0 + 2864 | 0; //@line 10619
 }
 if (HEAP16[$$pre$phi39Z2D >> 1] | 0) {
  $48 = HEAP16[$0 + 2866 >> 1] | 0; //@line 10625
  if ($48 << 16 >> 16) {
   _memcpy($1 | 0, $33 + ($48 & 65535) | 0, $$031 & 65535 | 0) | 0; //@line 10631
  }
 }
 if (!$$0$off0) {
  $$1 = $$031; //@line 10635
  STACKTOP = sp; //@line 10636
  return $$1 | 0; //@line 10636
 }
 HEAP32[$32 >> 2] = 0; //@line 10638
 HEAP16[$34 >> 1] = 0; //@line 10639
 HEAP8[$9 >> 0] = 0; //@line 10640
 $$1 = $$031; //@line 10641
 STACKTOP = sp; //@line 10642
 return $$1 | 0; //@line 10642
}
function __ZN12radio_eventsD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $32 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 24786
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24788
 $4 = HEAP32[$2 + 92 >> 2] | 0; //@line 24790
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 24795
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 24796
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 80 | 0); //@line 24797
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 158; //@line 24800
   $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 24801
   HEAP32[$9 >> 2] = $2; //@line 24802
   sp = STACKTOP; //@line 24803
   return;
  }
  ___async_unwind = 0; //@line 24806
  HEAP32[$ReallocAsyncCtx2 >> 2] = 158; //@line 24807
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 24808
  HEAP32[$9 >> 2] = $2; //@line 24809
  sp = STACKTOP; //@line 24810
  return;
 }
 $11 = HEAP32[$2 + 76 >> 2] | 0; //@line 24814
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 24819
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 24820
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 64 | 0); //@line 24821
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 159; //@line 24824
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 24825
   HEAP32[$16 >> 2] = $2; //@line 24826
   sp = STACKTOP; //@line 24827
   return;
  }
  ___async_unwind = 0; //@line 24830
  HEAP32[$ReallocAsyncCtx3 >> 2] = 159; //@line 24831
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 24832
  HEAP32[$16 >> 2] = $2; //@line 24833
  sp = STACKTOP; //@line 24834
  return;
 }
 $18 = HEAP32[$2 + 60 >> 2] | 0; //@line 24838
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 24843
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 24844
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 48 | 0); //@line 24845
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 160; //@line 24848
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 24849
   HEAP32[$23 >> 2] = $2; //@line 24850
   sp = STACKTOP; //@line 24851
   return;
  }
  ___async_unwind = 0; //@line 24854
  HEAP32[$ReallocAsyncCtx4 >> 2] = 160; //@line 24855
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 24856
  HEAP32[$23 >> 2] = $2; //@line 24857
  sp = STACKTOP; //@line 24858
  return;
 }
 $25 = HEAP32[$2 + 44 >> 2] | 0; //@line 24862
 if ($25 | 0) {
  $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 24867
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 24868
  FUNCTION_TABLE_vi[$29 & 1023]($2 + 32 | 0); //@line 24869
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 161; //@line 24872
   $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 24873
   HEAP32[$30 >> 2] = $2; //@line 24874
   sp = STACKTOP; //@line 24875
   return;
  }
  ___async_unwind = 0; //@line 24878
  HEAP32[$ReallocAsyncCtx5 >> 2] = 161; //@line 24879
  $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 24880
  HEAP32[$30 >> 2] = $2; //@line 24881
  sp = STACKTOP; //@line 24882
  return;
 }
 $32 = HEAP32[$2 + 28 >> 2] | 0; //@line 24886
 if ($32 | 0) {
  $36 = HEAP32[$32 + 8 >> 2] | 0; //@line 24891
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 24892
  FUNCTION_TABLE_vi[$36 & 1023]($2 + 16 | 0); //@line 24893
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 162; //@line 24896
   $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 24897
   HEAP32[$37 >> 2] = $2; //@line 24898
   sp = STACKTOP; //@line 24899
   return;
  }
  ___async_unwind = 0; //@line 24902
  HEAP32[$ReallocAsyncCtx6 >> 2] = 162; //@line 24903
  $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 24904
  HEAP32[$37 >> 2] = $2; //@line 24905
  sp = STACKTOP; //@line 24906
  return;
 }
 $39 = HEAP32[$2 + 12 >> 2] | 0; //@line 24910
 if (!$39) {
  return;
 }
 $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 24916
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 24917
 FUNCTION_TABLE_vi[$42 & 1023]($2); //@line 24918
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 163; //@line 24921
  sp = STACKTOP; //@line 24922
  return;
 }
 ___async_unwind = 0; //@line 24925
 HEAP32[$ReallocAsyncCtx7 >> 2] = 163; //@line 24926
 sp = STACKTOP; //@line 24927
 return;
}
function _initialize__async_cb_164($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30017
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30019
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30021
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30025
 $10 = HEAP32[(HEAP32[$0 + 12 >> 2] | 0) + 4 >> 2] | 0; //@line 30027
 if (($10 + -4 | 0) >>> 0 > 28) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 30031
  _mbed_assert_internal(14465, 14467, 47); //@line 30032
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 585; //@line 30035
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 30036
   HEAP32[$12 >> 2] = 1e6; //@line 30037
   $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 30038
   HEAP32[$13 >> 2] = $2; //@line 30039
   $14 = $ReallocAsyncCtx6 + 12 | 0; //@line 30040
   HEAP32[$14 >> 2] = $4; //@line 30041
   $15 = $ReallocAsyncCtx6 + 16 | 0; //@line 30042
   HEAP32[$15 >> 2] = $8; //@line 30043
   sp = STACKTOP; //@line 30044
   return;
  }
  ___async_unwind = 0; //@line 30047
  HEAP32[$ReallocAsyncCtx6 >> 2] = 585; //@line 30048
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 30049
  HEAP32[$12 >> 2] = 1e6; //@line 30050
  $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 30051
  HEAP32[$13 >> 2] = $2; //@line 30052
  $14 = $ReallocAsyncCtx6 + 12 | 0; //@line 30053
  HEAP32[$14 >> 2] = $4; //@line 30054
  $15 = $ReallocAsyncCtx6 + 16 | 0; //@line 30055
  HEAP32[$15 >> 2] = $8; //@line 30056
  sp = STACKTOP; //@line 30057
  return;
 } else {
  $17 = 7 << $10 + -4; //@line 30061
  $18 = ___muldi3($17 | 0, 0, 1e6, 0) | 0; //@line 30062
  $19 = tempRet0; //@line 30063
  $20 = _i64Add(1e6, 0, -1, -1) | 0; //@line 30064
  $22 = _i64Add($20 | 0, tempRet0 | 0, $18 | 0, $19 | 0) | 0; //@line 30066
  $24 = ___udivdi3($22 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 30068
  $25 = tempRet0; //@line 30069
  $26 = HEAP32[$2 >> 2] | 0; //@line 30070
  HEAP32[$26 >> 2] = 0; //@line 30071
  HEAP32[$26 + 4 >> 2] = 0; //@line 30073
  $30 = HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0; //@line 30076
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 30077
  $31 = FUNCTION_TABLE_i[$30 & 7]() | 0; //@line 30078
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 586; //@line 30081
   $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 30082
   HEAP32[$32 >> 2] = $2; //@line 30083
   $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 30084
   HEAP32[$33 >> 2] = 1e6; //@line 30085
   $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 30086
   HEAP32[$34 >> 2] = $10; //@line 30087
   $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 30088
   HEAP32[$35 >> 2] = $17; //@line 30089
   $36 = $ReallocAsyncCtx3 + 24 | 0; //@line 30090
   $37 = $36; //@line 30091
   $38 = $37; //@line 30092
   HEAP32[$38 >> 2] = $24; //@line 30093
   $39 = $37 + 4 | 0; //@line 30094
   $40 = $39; //@line 30095
   HEAP32[$40 >> 2] = $25; //@line 30096
   $41 = $ReallocAsyncCtx3 + 32 | 0; //@line 30097
   HEAP32[$41 >> 2] = $4; //@line 30098
   $42 = $ReallocAsyncCtx3 + 36 | 0; //@line 30099
   HEAP32[$42 >> 2] = $8; //@line 30100
   sp = STACKTOP; //@line 30101
   return;
  }
  HEAP32[___async_retval >> 2] = $31; //@line 30105
  ___async_unwind = 0; //@line 30106
  HEAP32[$ReallocAsyncCtx3 >> 2] = 586; //@line 30107
  $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 30108
  HEAP32[$32 >> 2] = $2; //@line 30109
  $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 30110
  HEAP32[$33 >> 2] = 1e6; //@line 30111
  $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 30112
  HEAP32[$34 >> 2] = $10; //@line 30113
  $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 30114
  HEAP32[$35 >> 2] = $17; //@line 30115
  $36 = $ReallocAsyncCtx3 + 24 | 0; //@line 30116
  $37 = $36; //@line 30117
  $38 = $37; //@line 30118
  HEAP32[$38 >> 2] = $24; //@line 30119
  $39 = $37 + 4 | 0; //@line 30120
  $40 = $39; //@line 30121
  HEAP32[$40 >> 2] = $25; //@line 30122
  $41 = $ReallocAsyncCtx3 + 32 | 0; //@line 30123
  HEAP32[$41 >> 2] = $4; //@line 30124
  $42 = $ReallocAsyncCtx3 + 36 | 0; //@line 30125
  HEAP32[$42 >> 2] = $8; //@line 30126
  sp = STACKTOP; //@line 30127
  return;
 }
}
function _mbedtls_aes_setkey_dec($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$02$i$i = 0, $$031$i$i = 0, $$043$lcssa = 0, $$04353 = 0, $$04555$in = 0, $$051 = 0, $$054 = 0, $$pn$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $128 = 0, $13 = 0, $16 = 0, $19 = 0, $22 = 0, $24 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $64 = 0, $8 = 0, $96 = 0, sp = 0, $$04353$looptemp = 0;
 sp = STACKTOP; //@line 812
 STACKTOP = STACKTOP + 288 | 0; //@line 813
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288); //@line 813
 $3 = sp; //@line 814
 _memset($3 | 0, 0, 280) | 0; //@line 815
 $4 = $0 + 8 | 0; //@line 816
 HEAP32[$0 + 4 >> 2] = $4; //@line 818
 $6 = _mbedtls_aes_setkey_enc($3, $1, $2) | 0; //@line 819
 if (!$6) {
  $8 = HEAP32[$3 >> 2] | 0; //@line 822
  HEAP32[$0 >> 2] = $8; //@line 823
  $10 = HEAP32[$3 + 4 >> 2] | 0; //@line 825
  $11 = $8 << 2; //@line 826
  $12 = $10 + ($11 << 2) | 0; //@line 827
  $13 = $12 + 4 | 0; //@line 828
  HEAP32[$4 >> 2] = HEAP32[$12 >> 2]; //@line 831
  $16 = $13 + 4 | 0; //@line 832
  HEAP32[$0 + 12 >> 2] = HEAP32[$13 >> 2]; //@line 835
  $19 = $16 + 4 | 0; //@line 836
  HEAP32[$0 + 16 >> 2] = HEAP32[$16 >> 2]; //@line 839
  $22 = $19 + 4 | 0; //@line 840
  $24 = $0 + 24 | 0; //@line 842
  HEAP32[$0 + 20 >> 2] = HEAP32[$19 >> 2]; //@line 843
  $$051 = $22 + -32 | 0; //@line 844
  if (($8 | 0) > 1) {
   $26 = ~$8; //@line 847
   $31 = $11 + -4 - ($8 + (($26 | 0) > -3 ? $26 : -3) << 2) | 0; //@line 853
   $$04353 = $24; //@line 854
   $$04555$in = $8; //@line 854
   $$054 = $$051; //@line 854
   while (1) {
    $$04353$looptemp = $$04353;
    $$04353 = $$04353 + 16 | 0; //@line 857
    $32 = HEAP32[$$054 >> 2] | 0; //@line 858
    HEAP32[$$04353$looptemp >> 2] = HEAP32[2308 + ((HEAPU8[13773 + ($32 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1284 + ((HEAPU8[13773 + ($32 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3332 + ((HEAPU8[13773 + ($32 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4356 + ((HEAPU8[13773 + ($32 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 889
    $64 = HEAP32[$$054 + 4 >> 2] | 0; //@line 891
    HEAP32[$$04353$looptemp + 4 >> 2] = HEAP32[2308 + ((HEAPU8[13773 + ($64 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1284 + ((HEAPU8[13773 + ($64 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3332 + ((HEAPU8[13773 + ($64 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4356 + ((HEAPU8[13773 + ($64 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 922
    $96 = HEAP32[$$054 + 8 >> 2] | 0; //@line 924
    HEAP32[$$04353$looptemp + 8 >> 2] = HEAP32[2308 + ((HEAPU8[13773 + ($96 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1284 + ((HEAPU8[13773 + ($96 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3332 + ((HEAPU8[13773 + ($96 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4356 + ((HEAPU8[13773 + ($96 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 955
    $128 = HEAP32[$$054 + 12 >> 2] | 0; //@line 957
    HEAP32[$$04353$looptemp + 12 >> 2] = HEAP32[2308 + ((HEAPU8[13773 + ($128 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1284 + ((HEAPU8[13773 + ($128 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3332 + ((HEAPU8[13773 + ($128 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4356 + ((HEAPU8[13773 + ($128 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 987
    $$054 = $$054 + -16 | 0; //@line 988
    if (($$04555$in | 0) <= 2) {
     break;
    } else {
     $$04555$in = $$04555$in + -1 | 0; //@line 991
    }
   }
   $$0$lcssa = $$054; //@line 997
   $$043$lcssa = $$04353; //@line 997
   $$pn$lcssa = $10 + ($31 << 2) | 0; //@line 997
  } else {
   $$0$lcssa = $$051; //@line 999
   $$043$lcssa = $24; //@line 999
   $$pn$lcssa = $22; //@line 999
  }
  HEAP32[$$043$lcssa >> 2] = HEAP32[$$0$lcssa >> 2]; //@line 1004
  HEAP32[$$043$lcssa + 4 >> 2] = HEAP32[$$pn$lcssa + -28 >> 2]; //@line 1008
  HEAP32[$$043$lcssa + 8 >> 2] = HEAP32[$$pn$lcssa + -24 >> 2]; //@line 1012
  HEAP32[$$043$lcssa + 12 >> 2] = HEAP32[$$pn$lcssa + -20 >> 2]; //@line 1014
  $$02$i$i = $3; //@line 1015
  $$031$i$i = 280; //@line 1015
 } else {
  $$02$i$i = $3; //@line 1017
  $$031$i$i = 280; //@line 1017
 }
 while (1) {
  $$031$i$i = $$031$i$i + -1 | 0; //@line 1020
  HEAP8[$$02$i$i >> 0] = 0; //@line 1022
  if (!$$031$i$i) {
   break;
  } else {
   $$02$i$i = $$02$i$i + 1 | 0; //@line 1027
  }
 }
 STACKTOP = sp; //@line 1030
 return $6 | 0; //@line 1030
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 1336
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1338
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1340
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 1342
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 1344
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 1346
 $$pre$i = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 1349
 $13 = $4 + 12 | 0; //@line 1350
 HEAP32[$13 >> 2] = $$pre$i; //@line 1351
 if (!$$pre$i) {
  $24 = $2 + 12 | 0; //@line 1354
  HEAP32[$24 >> 2] = 0; //@line 1355
  $25 = $2 + 16 | 0; //@line 1356
  HEAP8[$25 >> 0] = $6; //@line 1357
  HEAP8[$2 + 17 >> 0] = $8; //@line 1359
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 1360
  $27 = _equeue_alloc($10, 20) | 0; //@line 1361
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 305; //@line 1364
   $28 = $ReallocAsyncCtx7 + 4 | 0; //@line 1365
   HEAP32[$28 >> 2] = $25; //@line 1366
   $29 = $ReallocAsyncCtx7 + 8 | 0; //@line 1367
   HEAP32[$29 >> 2] = $10; //@line 1368
   $30 = $ReallocAsyncCtx7 + 12 | 0; //@line 1369
   HEAP32[$30 >> 2] = $2; //@line 1370
   $31 = $ReallocAsyncCtx7 + 16 | 0; //@line 1371
   HEAP32[$31 >> 2] = $24; //@line 1372
   $32 = $ReallocAsyncCtx7 + 20 | 0; //@line 1373
   HEAP32[$32 >> 2] = $4; //@line 1374
   $33 = $ReallocAsyncCtx7 + 24 | 0; //@line 1375
   HEAP32[$33 >> 2] = $13; //@line 1376
   $34 = $ReallocAsyncCtx7 + 28 | 0; //@line 1377
   HEAP32[$34 >> 2] = $24; //@line 1378
   sp = STACKTOP; //@line 1379
   return;
  }
  HEAP32[___async_retval >> 2] = $27; //@line 1383
  ___async_unwind = 0; //@line 1384
  HEAP32[$ReallocAsyncCtx7 >> 2] = 305; //@line 1385
  $28 = $ReallocAsyncCtx7 + 4 | 0; //@line 1386
  HEAP32[$28 >> 2] = $25; //@line 1387
  $29 = $ReallocAsyncCtx7 + 8 | 0; //@line 1388
  HEAP32[$29 >> 2] = $10; //@line 1389
  $30 = $ReallocAsyncCtx7 + 12 | 0; //@line 1390
  HEAP32[$30 >> 2] = $2; //@line 1391
  $31 = $ReallocAsyncCtx7 + 16 | 0; //@line 1392
  HEAP32[$31 >> 2] = $24; //@line 1393
  $32 = $ReallocAsyncCtx7 + 20 | 0; //@line 1394
  HEAP32[$32 >> 2] = $4; //@line 1395
  $33 = $ReallocAsyncCtx7 + 24 | 0; //@line 1396
  HEAP32[$33 >> 2] = $13; //@line 1397
  $34 = $ReallocAsyncCtx7 + 28 | 0; //@line 1398
  HEAP32[$34 >> 2] = $24; //@line 1399
  sp = STACKTOP; //@line 1400
  return;
 } else {
  $16 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 1405
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 1406
  FUNCTION_TABLE_vii[$16 & 15]($2, $4); //@line 1407
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 304; //@line 1410
   $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 1411
   HEAP32[$17 >> 2] = $2; //@line 1412
   $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 1413
   HEAP32[$18 >> 2] = $4; //@line 1414
   $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 1415
   HEAP32[$19 >> 2] = $13; //@line 1416
   $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 1417
   HEAP8[$20 >> 0] = $6; //@line 1418
   $21 = $ReallocAsyncCtx2 + 17 | 0; //@line 1419
   HEAP8[$21 >> 0] = $8; //@line 1420
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 1421
   HEAP32[$22 >> 2] = $10; //@line 1422
   $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 1423
   HEAP32[$23 >> 2] = $13; //@line 1424
   sp = STACKTOP; //@line 1425
   return;
  }
  ___async_unwind = 0; //@line 1428
  HEAP32[$ReallocAsyncCtx2 >> 2] = 304; //@line 1429
  $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 1430
  HEAP32[$17 >> 2] = $2; //@line 1431
  $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 1432
  HEAP32[$18 >> 2] = $4; //@line 1433
  $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 1434
  HEAP32[$19 >> 2] = $13; //@line 1435
  $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 1436
  HEAP8[$20 >> 0] = $6; //@line 1437
  $21 = $ReallocAsyncCtx2 + 17 | 0; //@line 1438
  HEAP8[$21 >> 0] = $8; //@line 1439
  $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 1440
  HEAP32[$22 >> 2] = $10; //@line 1441
  $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 1442
  HEAP32[$23 >> 2] = $13; //@line 1443
  sp = STACKTOP; //@line 1444
  return;
 }
}
function _mbedtls_cipher_cmac_update__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$09$i75 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $27 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $53 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11224
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11226
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11228
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11230
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11232
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11234
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11236
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11238
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11240
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11242
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 11244
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 11246
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11248
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 11251
  $53 = ___async_retval; //@line 11252
  HEAP32[$53 >> 2] = $$0; //@line 11253
  return;
 }
 $33 = $2 - $4 | 0; //@line 11256
 $25 = $6 + $4 | 0; //@line 11257
 $37 = $8 + 1 | 0; //@line 11258
 if ($37 >>> 0 >= $10 >>> 0) {
  if (!$33) {
   $$0 = 0; //@line 11263
   $53 = ___async_retval; //@line 11264
   HEAP32[$53 >> 2] = $$0; //@line 11265
   return;
  }
  _memcpy((HEAP32[$14 >> 2] | 0) + ($16 + 16) | 0, $25 | 0, $33 | 0) | 0; //@line 11270
  HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + $33; //@line 11273
  $$0 = 0; //@line 11274
  $53 = ___async_retval; //@line 11275
  HEAP32[$53 >> 2] = $$0; //@line 11276
  return;
 }
 $$09$i75 = 0; //@line 11279
 do {
  $27 = $16 + $$09$i75 | 0; //@line 11283
  HEAP8[$27 >> 0] = HEAP8[$27 >> 0] ^ HEAP8[$25 + $$09$i75 >> 0]; //@line 11286
  $$09$i75 = $$09$i75 + 1 | 0; //@line 11287
 } while (($$09$i75 | 0) != ($4 | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 11295
 $31 = _mbedtls_cipher_update($18, $20, $4, $20, $22) | 0; //@line 11296
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 572; //@line 11299
  $32 = $ReallocAsyncCtx + 4 | 0; //@line 11300
  HEAP32[$32 >> 2] = $33; //@line 11301
  $34 = $ReallocAsyncCtx + 8 | 0; //@line 11302
  HEAP32[$34 >> 2] = $4; //@line 11303
  $35 = $ReallocAsyncCtx + 12 | 0; //@line 11304
  HEAP32[$35 >> 2] = $25; //@line 11305
  $36 = $ReallocAsyncCtx + 16 | 0; //@line 11306
  HEAP32[$36 >> 2] = $37; //@line 11307
  $38 = $ReallocAsyncCtx + 20 | 0; //@line 11308
  HEAP32[$38 >> 2] = $10; //@line 11309
  $39 = $ReallocAsyncCtx + 24 | 0; //@line 11310
  HEAP32[$39 >> 2] = $12; //@line 11311
  $40 = $ReallocAsyncCtx + 28 | 0; //@line 11312
  HEAP32[$40 >> 2] = $14; //@line 11313
  $41 = $ReallocAsyncCtx + 32 | 0; //@line 11314
  HEAP32[$41 >> 2] = $16; //@line 11315
  $42 = $ReallocAsyncCtx + 36 | 0; //@line 11316
  HEAP32[$42 >> 2] = $18; //@line 11317
  $43 = $ReallocAsyncCtx + 40 | 0; //@line 11318
  HEAP32[$43 >> 2] = $20; //@line 11319
  $44 = $ReallocAsyncCtx + 44 | 0; //@line 11320
  HEAP32[$44 >> 2] = $22; //@line 11321
  sp = STACKTOP; //@line 11322
  return;
 }
 HEAP32[___async_retval >> 2] = $31; //@line 11326
 ___async_unwind = 0; //@line 11327
 HEAP32[$ReallocAsyncCtx >> 2] = 572; //@line 11328
 $32 = $ReallocAsyncCtx + 4 | 0; //@line 11329
 HEAP32[$32 >> 2] = $33; //@line 11330
 $34 = $ReallocAsyncCtx + 8 | 0; //@line 11331
 HEAP32[$34 >> 2] = $4; //@line 11332
 $35 = $ReallocAsyncCtx + 12 | 0; //@line 11333
 HEAP32[$35 >> 2] = $25; //@line 11334
 $36 = $ReallocAsyncCtx + 16 | 0; //@line 11335
 HEAP32[$36 >> 2] = $37; //@line 11336
 $38 = $ReallocAsyncCtx + 20 | 0; //@line 11337
 HEAP32[$38 >> 2] = $10; //@line 11338
 $39 = $ReallocAsyncCtx + 24 | 0; //@line 11339
 HEAP32[$39 >> 2] = $12; //@line 11340
 $40 = $ReallocAsyncCtx + 28 | 0; //@line 11341
 HEAP32[$40 >> 2] = $14; //@line 11342
 $41 = $ReallocAsyncCtx + 32 | 0; //@line 11343
 HEAP32[$41 >> 2] = $16; //@line 11344
 $42 = $ReallocAsyncCtx + 36 | 0; //@line 11345
 HEAP32[$42 >> 2] = $18; //@line 11346
 $43 = $ReallocAsyncCtx + 40 | 0; //@line 11347
 HEAP32[$43 >> 2] = $20; //@line 11348
 $44 = $ReallocAsyncCtx + 44 | 0; //@line 11349
 HEAP32[$44 >> 2] = $22; //@line 11350
 sp = STACKTOP; //@line 11351
 return;
}
function _mbedtls_gcm_update($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$05966 = 0, $$06065 = 0, $$061 = 0, $$06264 = 0, $$163 = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $30 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $46 = 0, $5 = 0, $67 = 0, $68 = 0, $75 = 0, $83 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5484
 STACKTOP = STACKTOP + 32 | 0; //@line 5485
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 5485
 $4 = sp + 8 | 0; //@line 5486
 $5 = sp; //@line 5487
 HEAP32[$5 >> 2] = 0; //@line 5488
 if ($3 >>> 0 > $2 >>> 0) {
  if (($3 - $2 | 0) >>> 0 < $1 >>> 0) {
   $$0 = -20; //@line 5496
   STACKTOP = sp; //@line 5497
   return $$0 | 0; //@line 5497
  }
 }
 $11 = $0 + 328 | 0; //@line 5500
 $12 = $11; //@line 5501
 $14 = HEAP32[$12 >> 2] | 0; //@line 5503
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 5506
 $18 = _i64Add($14 | 0, $17 | 0, $1 | 0, 0) | 0; //@line 5507
 $19 = tempRet0; //@line 5508
 if ($19 >>> 0 < $17 >>> 0 | ($19 | 0) == ($17 | 0) & $18 >>> 0 < $14 >>> 0 | ($19 >>> 0 > 15 | ($19 | 0) == 15 & $18 >>> 0 > 4294967264)) {
  $$0 = -20; //@line 5521
  STACKTOP = sp; //@line 5522
  return $$0 | 0; //@line 5522
 }
 $30 = $11; //@line 5524
 HEAP32[$30 >> 2] = $18; //@line 5526
 HEAP32[$30 + 4 >> 2] = $19; //@line 5529
 if (!$1) {
  $$0 = 0; //@line 5532
  STACKTOP = sp; //@line 5533
  return $$0 | 0; //@line 5533
 }
 $35 = $0 + 360 | 0; //@line 5535
 $36 = $0 + 376 | 0; //@line 5536
 $37 = $0 + 392 | 0; //@line 5537
 $$05966 = $3; //@line 5538
 $$06065 = $2; //@line 5538
 $$06264 = $1; //@line 5538
 while (1) {
  $39 = $$06264 >>> 0 < 16 ? $$06264 : 16; //@line 5541
  $$061 = 16; //@line 5542
  do {
   if ($$061 >>> 0 <= 12) {
    break;
   }
   $$061 = $$061 + -1 | 0; //@line 5548
   $42 = $0 + 360 + $$061 | 0; //@line 5549
   $44 = (HEAP8[$42 >> 0] | 0) + 1 << 24 >> 24; //@line 5551
   HEAP8[$42 >> 0] = $44; //@line 5552
  } while (!($44 << 24 >> 24));
  $AsyncCtx = _emscripten_alloc_async_context(68, sp) | 0; //@line 5560
  $46 = _mbedtls_cipher_update($0, $35, 16, $4, $5) | 0; //@line 5561
  if (___async) {
   label = 10; //@line 5564
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5567
  if ($46 | 0) {
   $$0 = $46; //@line 5570
   label = 19; //@line 5571
   break;
  }
  if ($39 | 0) {
   $$163 = 0; //@line 5576
   do {
    $67 = $0 + 376 + $$163 | 0; //@line 5580
    $68 = $$06065 + $$163 | 0; //@line 5581
    if (!(HEAP32[$37 >> 2] | 0)) {
     HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ HEAP8[$68 >> 0]; //@line 5586
    }
    $75 = HEAP8[$68 >> 0] ^ HEAP8[$4 + $$163 >> 0]; //@line 5591
    HEAP8[$$05966 + $$163 >> 0] = $75; //@line 5593
    if ((HEAP32[$37 >> 2] | 0) == 1) {
     HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ $75; //@line 5599
    }
    $$163 = $$163 + 1 | 0; //@line 5601
   } while ($$163 >>> 0 < $39 >>> 0);
  }
  _gcm_mult($0, $36, $36); //@line 5610
  $83 = $$06264 - $39 | 0; //@line 5611
  if (!$83) {
   $$0 = 0; //@line 5616
   label = 19; //@line 5617
   break;
  } else {
   $$05966 = $$05966 + $39 | 0; //@line 5620
   $$06065 = $$06065 + $39 | 0; //@line 5620
   $$06264 = $83; //@line 5620
  }
 }
 if ((label | 0) == 10) {
  HEAP32[$AsyncCtx >> 2] = 579; //@line 5624
  HEAP32[$AsyncCtx + 4 >> 2] = $39; //@line 5626
  HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 5628
  HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 5630
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 5632
  HEAP32[$AsyncCtx + 20 >> 2] = $36; //@line 5634
  HEAP32[$AsyncCtx + 24 >> 2] = $$06264; //@line 5636
  HEAP32[$AsyncCtx + 28 >> 2] = $$06065; //@line 5638
  HEAP32[$AsyncCtx + 32 >> 2] = $$05966; //@line 5640
  HEAP32[$AsyncCtx + 36 >> 2] = $37; //@line 5642
  HEAP32[$AsyncCtx + 40 >> 2] = $4; //@line 5644
  HEAP32[$AsyncCtx + 44 >> 2] = $3; //@line 5646
  HEAP32[$AsyncCtx + 48 >> 2] = $2; //@line 5648
  HEAP32[$AsyncCtx + 52 >> 2] = $1; //@line 5650
  HEAP32[$AsyncCtx + 56 >> 2] = $0; //@line 5652
  HEAP32[$AsyncCtx + 60 >> 2] = $35; //@line 5654
  HEAP32[$AsyncCtx + 64 >> 2] = $5; //@line 5656
  sp = STACKTOP; //@line 5657
  STACKTOP = sp; //@line 5658
  return 0; //@line 5658
 } else if ((label | 0) == 19) {
  STACKTOP = sp; //@line 5661
  return $$0 | 0; //@line 5661
 }
 return 0; //@line 5663
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_226($0) {
 $0 = $0 | 0;
 var $$085$off0$reg2mem$0 = 0, $$182$off0 = 0, $$186$off0 = 0, $$283$off0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $59 = 0, $6 = 0, $67 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4518
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4520
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4522
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4524
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4526
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4528
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4530
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4532
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 4534
 $18 = HEAP8[$0 + 36 >> 0] & 1; //@line 4537
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 4539
 $22 = HEAP8[$0 + 44 >> 0] & 1; //@line 4542
 $24 = HEAP8[$0 + 45 >> 0] & 1; //@line 4545
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 4547
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 4549
 L2 : do {
  if (!(HEAP8[$2 >> 0] | 0)) {
   do {
    if (!(HEAP8[$12 >> 0] | 0)) {
     $$182$off0 = $22; //@line 4558
     $$186$off0 = $24; //@line 4558
    } else {
     if (!(HEAP8[$10 >> 0] | 0)) {
      if (!(HEAP32[$20 >> 2] & 1)) {
       $$085$off0$reg2mem$0 = $24; //@line 4567
       $$283$off0 = 1; //@line 4567
       label = 13; //@line 4568
       break L2;
      } else {
       $$182$off0 = 1; //@line 4571
       $$186$off0 = $24; //@line 4571
       break;
      }
     }
     if ((HEAP32[$4 >> 2] | 0) == 1) {
      label = 18; //@line 4578
      break L2;
     }
     if (!(HEAP32[$20 >> 2] & 2)) {
      label = 18; //@line 4585
      break L2;
     } else {
      $$182$off0 = 1; //@line 4588
      $$186$off0 = 1; //@line 4588
     }
    }
   } while (0);
   $30 = $28 + 8 | 0; //@line 4592
   if ($30 >>> 0 < $8 >>> 0) {
    HEAP8[$10 >> 0] = 0; //@line 4595
    HEAP8[$12 >> 0] = 0; //@line 4596
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 4597
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($30, $14, $16, $16, 1, $18); //@line 4598
    if (!___async) {
     ___async_unwind = 0; //@line 4601
    }
    HEAP32[$ReallocAsyncCtx5 >> 2] = 664; //@line 4603
    HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 4605
    HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 4607
    HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 4609
    HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 4611
    HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 4613
    HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $12; //@line 4615
    HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $14; //@line 4617
    HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $16; //@line 4619
    HEAP8[$ReallocAsyncCtx5 + 36 >> 0] = $18 & 1; //@line 4622
    HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $20; //@line 4624
    HEAP8[$ReallocAsyncCtx5 + 44 >> 0] = $$182$off0 & 1; //@line 4627
    HEAP8[$ReallocAsyncCtx5 + 45 >> 0] = $$186$off0 & 1; //@line 4630
    HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $26; //@line 4632
    HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $30; //@line 4634
    sp = STACKTOP; //@line 4635
    return;
   } else {
    $$085$off0$reg2mem$0 = $$186$off0; //@line 4638
    $$283$off0 = $$182$off0; //@line 4638
    label = 13; //@line 4639
   }
  } else {
   $$085$off0$reg2mem$0 = $24; //@line 4642
   $$283$off0 = $22; //@line 4642
   label = 13; //@line 4643
  }
 } while (0);
 do {
  if ((label | 0) == 13) {
   if (!$$085$off0$reg2mem$0) {
    HEAP32[$26 >> 2] = $16; //@line 4649
    $59 = $14 + 40 | 0; //@line 4650
    HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + 1; //@line 4653
    if ((HEAP32[$14 + 36 >> 2] | 0) == 1) {
     if ((HEAP32[$4 >> 2] | 0) == 2) {
      HEAP8[$2 >> 0] = 1; //@line 4661
      if ($$283$off0) {
       label = 18; //@line 4663
       break;
      } else {
       $67 = 4; //@line 4666
       break;
      }
     }
    }
   }
   if ($$283$off0) {
    label = 18; //@line 4673
   } else {
    $67 = 4; //@line 4675
   }
  }
 } while (0);
 if ((label | 0) == 18) {
  $67 = 3; //@line 4680
 }
 HEAP32[$6 >> 2] = $67; //@line 4682
 return;
}
function _initialize__async_cb_161($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $70 = 0, $71 = 0, $72 = 0, $81 = 0, $82 = 0, $83 = 0, $85 = 0, $89 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 29759
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29763
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29765
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29769
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29771
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29773
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29775
 if (($AsyncRetVal | 0) != (HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 32 >> 2] | 0)) {
  $23 = $AsyncRetVal - (HEAP32[$6 >> 2] | 0) & HEAP32[HEAP32[$0 + 16 >> 2] >> 2]; //@line 29784
  HEAP32[$6 >> 2] = $AsyncRetVal; //@line 29785
  $24 = HEAP32[$10 >> 2] | 0; //@line 29786
  L4 : do {
   if (($24 | 0) < 1e6) {
    switch ($24 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 6; //@line 29795
      break L4;
     }
    }
    $25 = ___muldi3($23 | 0, 0, 1e6, 0) | 0; //@line 29799
    $27 = _bitshift64Lshr($25 | 0, tempRet0 | 0, 15) | 0; //@line 29801
    $28 = tempRet0; //@line 29802
    $31 = $12; //@line 29805
    $37 = _i64Add(HEAP32[$31 >> 2] | 0, HEAP32[$31 + 4 >> 2] | 0, $23 * 1e6 & 32704 | 0, 0) | 0; //@line 29811
    $38 = tempRet0; //@line 29812
    $39 = $12; //@line 29813
    HEAP32[$39 >> 2] = $37; //@line 29815
    HEAP32[$39 + 4 >> 2] = $38; //@line 29818
    if ($38 >>> 0 < 0 | ($38 | 0) == 0 & $37 >>> 0 < 32768) {
     $95 = $27; //@line 29825
     $96 = $28; //@line 29825
    } else {
     $48 = _i64Add($27 | 0, $28 | 0, 1, 0) | 0; //@line 29827
     $49 = tempRet0; //@line 29828
     $50 = _i64Add($37 | 0, $38 | 0, -32768, -1) | 0; //@line 29829
     $52 = $12; //@line 29831
     HEAP32[$52 >> 2] = $50; //@line 29833
     HEAP32[$52 + 4 >> 2] = tempRet0; //@line 29836
     $95 = $48; //@line 29837
     $96 = $49; //@line 29837
    }
   } else {
    switch ($24 | 0) {
    case 1e6:
     {
      $95 = $23; //@line 29842
      $96 = 0; //@line 29842
      break;
     }
    default:
     {
      label = 6; //@line 29846
     }
    }
   }
  } while (0);
  if ((label | 0) == 6) {
   $56 = ___muldi3($23 | 0, 0, 1e6, 0) | 0; //@line 29852
   $57 = tempRet0; //@line 29853
   $58 = ___udivdi3($56 | 0, $57 | 0, $24 | 0, 0) | 0; //@line 29854
   $59 = tempRet0; //@line 29855
   $60 = ___muldi3($58 | 0, $59 | 0, $24 | 0, 0) | 0; //@line 29856
   $62 = _i64Subtract($56 | 0, $57 | 0, $60 | 0, tempRet0 | 0) | 0; //@line 29858
   $64 = $12; //@line 29860
   $70 = _i64Add($62 | 0, tempRet0 | 0, HEAP32[$64 >> 2] | 0, HEAP32[$64 + 4 >> 2] | 0) | 0; //@line 29866
   $71 = tempRet0; //@line 29867
   $72 = $12; //@line 29868
   HEAP32[$72 >> 2] = $70; //@line 29870
   HEAP32[$72 + 4 >> 2] = $71; //@line 29873
   if ($71 >>> 0 < 0 | ($71 | 0) == 0 & $70 >>> 0 < $24 >>> 0) {
    $95 = $58; //@line 29880
    $96 = $59; //@line 29880
   } else {
    $81 = _i64Add($58 | 0, $59 | 0, 1, 0) | 0; //@line 29882
    $82 = tempRet0; //@line 29883
    $83 = _i64Subtract($70 | 0, $71 | 0, $24 | 0, 0) | 0; //@line 29884
    $85 = $12; //@line 29886
    HEAP32[$85 >> 2] = $83; //@line 29888
    HEAP32[$85 + 4 >> 2] = tempRet0; //@line 29891
    $95 = $81; //@line 29892
    $96 = $82; //@line 29892
   }
  }
  $89 = $14; //@line 29895
  $97 = _i64Add(HEAP32[$89 >> 2] | 0, HEAP32[$89 + 4 >> 2] | 0, $95 | 0, $96 | 0) | 0; //@line 29901
  $99 = $14; //@line 29903
  HEAP32[$99 >> 2] = $97; //@line 29905
  HEAP32[$99 + 4 >> 2] = tempRet0; //@line 29908
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 29910
 _schedule_interrupt($4); //@line 29911
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 588; //@line 29914
  sp = STACKTOP; //@line 29915
  return;
 }
 ___async_unwind = 0; //@line 29918
 HEAP32[$ReallocAsyncCtx5 >> 2] = 588; //@line 29919
 sp = STACKTOP; //@line 29920
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 28907
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28909
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28911
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28913
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28917
 $$pre$i = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 28918
 $11 = $10 + 12 | 0; //@line 28919
 HEAP32[$11 >> 2] = $$pre$i; //@line 28920
 if (!$$pre$i) {
  $21 = $2 + 12 | 0; //@line 28923
  HEAP32[$21 >> 2] = 0; //@line 28924
  $22 = $2 + 16 | 0; //@line 28925
  HEAP32[$22 >> 2] = $4; //@line 28926
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 28927
  $23 = _equeue_alloc($6, 20) | 0; //@line 28928
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 253; //@line 28931
   $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 28932
   HEAP32[$24 >> 2] = $21; //@line 28933
   $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 28934
   HEAP32[$25 >> 2] = $22; //@line 28935
   $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 28936
   HEAP32[$26 >> 2] = $6; //@line 28937
   $27 = $ReallocAsyncCtx7 + 16 | 0; //@line 28938
   HEAP32[$27 >> 2] = $21; //@line 28939
   $28 = $ReallocAsyncCtx7 + 20 | 0; //@line 28940
   HEAP32[$28 >> 2] = $11; //@line 28941
   $29 = $ReallocAsyncCtx7 + 24 | 0; //@line 28942
   HEAP32[$29 >> 2] = $2; //@line 28943
   $30 = $ReallocAsyncCtx7 + 28 | 0; //@line 28944
   HEAP32[$30 >> 2] = $10; //@line 28945
   sp = STACKTOP; //@line 28946
   return;
  }
  HEAP32[___async_retval >> 2] = $23; //@line 28950
  ___async_unwind = 0; //@line 28951
  HEAP32[$ReallocAsyncCtx7 >> 2] = 253; //@line 28952
  $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 28953
  HEAP32[$24 >> 2] = $21; //@line 28954
  $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 28955
  HEAP32[$25 >> 2] = $22; //@line 28956
  $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 28957
  HEAP32[$26 >> 2] = $6; //@line 28958
  $27 = $ReallocAsyncCtx7 + 16 | 0; //@line 28959
  HEAP32[$27 >> 2] = $21; //@line 28960
  $28 = $ReallocAsyncCtx7 + 20 | 0; //@line 28961
  HEAP32[$28 >> 2] = $11; //@line 28962
  $29 = $ReallocAsyncCtx7 + 24 | 0; //@line 28963
  HEAP32[$29 >> 2] = $2; //@line 28964
  $30 = $ReallocAsyncCtx7 + 28 | 0; //@line 28965
  HEAP32[$30 >> 2] = $10; //@line 28966
  sp = STACKTOP; //@line 28967
  return;
 } else {
  $14 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 28972
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 28973
  FUNCTION_TABLE_vii[$14 & 15]($2, $10); //@line 28974
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 252; //@line 28977
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 28978
   HEAP32[$15 >> 2] = $11; //@line 28979
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 28980
   HEAP32[$16 >> 2] = $2; //@line 28981
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 28982
   HEAP32[$17 >> 2] = $4; //@line 28983
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 28984
   HEAP32[$18 >> 2] = $6; //@line 28985
   $19 = $ReallocAsyncCtx2 + 20 | 0; //@line 28986
   HEAP32[$19 >> 2] = $11; //@line 28987
   $20 = $ReallocAsyncCtx2 + 24 | 0; //@line 28988
   HEAP32[$20 >> 2] = $10; //@line 28989
   sp = STACKTOP; //@line 28990
   return;
  }
  ___async_unwind = 0; //@line 28993
  HEAP32[$ReallocAsyncCtx2 >> 2] = 252; //@line 28994
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 28995
  HEAP32[$15 >> 2] = $11; //@line 28996
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 28997
  HEAP32[$16 >> 2] = $2; //@line 28998
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 28999
  HEAP32[$17 >> 2] = $4; //@line 29000
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 29001
  HEAP32[$18 >> 2] = $6; //@line 29002
  $19 = $ReallocAsyncCtx2 + 20 | 0; //@line 29003
  HEAP32[$19 >> 2] = $11; //@line 29004
  $20 = $ReallocAsyncCtx2 + 24 | 0; //@line 29005
  HEAP32[$20 >> 2] = $10; //@line 29006
  sp = STACKTOP; //@line 29007
  return;
 }
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_242($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 5777
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5779
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5781
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5783
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5785
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5787
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 5791
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 5793
 $17 = HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0; //@line 5794
 if (!$17) {
  $28 = $14 + 12 | 0; //@line 5798
  HEAP32[$14 >> 2] = 456; //@line 5799
  HEAP32[$14 + 4 >> 2] = 0; //@line 5801
  HEAP32[$14 + 8 >> 2] = $2; //@line 5803
  HEAP32[$28 >> 2] = 844; //@line 5804
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 5805
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($6, $2 + 1836 | 0, $14); //@line 5806
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 457; //@line 5809
   $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 5810
   HEAP32[$29 >> 2] = $28; //@line 5811
   $30 = $ReallocAsyncCtx6 + 8 | 0; //@line 5812
   HEAP32[$30 >> 2] = $2; //@line 5813
   $31 = $ReallocAsyncCtx6 + 12 | 0; //@line 5814
   HEAP32[$31 >> 2] = $4; //@line 5815
   $32 = $ReallocAsyncCtx6 + 16 | 0; //@line 5816
   HEAP32[$32 >> 2] = $6; //@line 5817
   $33 = $ReallocAsyncCtx6 + 20 | 0; //@line 5818
   HEAP32[$33 >> 2] = $14; //@line 5819
   $34 = $ReallocAsyncCtx6 + 24 | 0; //@line 5820
   HEAP32[$34 >> 2] = $8; //@line 5821
   $35 = $ReallocAsyncCtx6 + 28 | 0; //@line 5822
   HEAP32[$35 >> 2] = $10; //@line 5823
   sp = STACKTOP; //@line 5824
   return;
  }
  ___async_unwind = 0; //@line 5827
  HEAP32[$ReallocAsyncCtx6 >> 2] = 457; //@line 5828
  $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 5829
  HEAP32[$29 >> 2] = $28; //@line 5830
  $30 = $ReallocAsyncCtx6 + 8 | 0; //@line 5831
  HEAP32[$30 >> 2] = $2; //@line 5832
  $31 = $ReallocAsyncCtx6 + 12 | 0; //@line 5833
  HEAP32[$31 >> 2] = $4; //@line 5834
  $32 = $ReallocAsyncCtx6 + 16 | 0; //@line 5835
  HEAP32[$32 >> 2] = $6; //@line 5836
  $33 = $ReallocAsyncCtx6 + 20 | 0; //@line 5837
  HEAP32[$33 >> 2] = $14; //@line 5838
  $34 = $ReallocAsyncCtx6 + 24 | 0; //@line 5839
  HEAP32[$34 >> 2] = $8; //@line 5840
  $35 = $ReallocAsyncCtx6 + 28 | 0; //@line 5841
  HEAP32[$35 >> 2] = $10; //@line 5842
  sp = STACKTOP; //@line 5843
  return;
 } else {
  $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 5847
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 5848
  FUNCTION_TABLE_vi[$20 & 1023]($16); //@line 5849
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 455; //@line 5852
   $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 5853
   HEAP32[$21 >> 2] = $2; //@line 5854
   $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 5855
   HEAP32[$22 >> 2] = $14; //@line 5856
   $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 5857
   HEAP32[$23 >> 2] = $6; //@line 5858
   $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 5859
   HEAP32[$24 >> 2] = $4; //@line 5860
   $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 5861
   HEAP32[$25 >> 2] = $8; //@line 5862
   $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 5863
   HEAP32[$26 >> 2] = $10; //@line 5864
   sp = STACKTOP; //@line 5865
   return;
  }
  ___async_unwind = 0; //@line 5868
  HEAP32[$ReallocAsyncCtx2 >> 2] = 455; //@line 5869
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 5870
  HEAP32[$21 >> 2] = $2; //@line 5871
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 5872
  HEAP32[$22 >> 2] = $14; //@line 5873
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 5874
  HEAP32[$23 >> 2] = $6; //@line 5875
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 5876
  HEAP32[$24 >> 2] = $4; //@line 5877
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 5878
  HEAP32[$25 >> 2] = $8; //@line 5879
  $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 5880
  HEAP32[$26 >> 2] = $10; //@line 5881
  sp = STACKTOP; //@line 5882
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 4792
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4794
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4796
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4798
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 4803
 $$pre$i = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 4804
 $11 = $4 + 12 | 0; //@line 4805
 HEAP32[$11 >> 2] = $$pre$i; //@line 4806
 $12 = $10 & 1; //@line 4807
 if (!$$pre$i) {
  $22 = $2 + 12 | 0; //@line 4810
  HEAP32[$22 >> 2] = 0; //@line 4811
  $23 = $2 + 16 | 0; //@line 4812
  HEAP8[$23 >> 0] = $12; //@line 4813
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 4814
  $24 = _equeue_alloc($6, 20) | 0; //@line 4815
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 207; //@line 4818
   $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 4819
   HEAP32[$25 >> 2] = $23; //@line 4820
   $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 4821
   HEAP32[$26 >> 2] = $6; //@line 4822
   $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 4823
   HEAP32[$27 >> 2] = $22; //@line 4824
   $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 4825
   HEAP32[$28 >> 2] = $2; //@line 4826
   $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 4827
   HEAP32[$29 >> 2] = $11; //@line 4828
   $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 4829
   HEAP32[$30 >> 2] = $4; //@line 4830
   $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 4831
   HEAP32[$31 >> 2] = $22; //@line 4832
   sp = STACKTOP; //@line 4833
   return;
  }
  HEAP32[___async_retval >> 2] = $24; //@line 4837
  ___async_unwind = 0; //@line 4838
  HEAP32[$ReallocAsyncCtx7 >> 2] = 207; //@line 4839
  $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 4840
  HEAP32[$25 >> 2] = $23; //@line 4841
  $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 4842
  HEAP32[$26 >> 2] = $6; //@line 4843
  $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 4844
  HEAP32[$27 >> 2] = $22; //@line 4845
  $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 4846
  HEAP32[$28 >> 2] = $2; //@line 4847
  $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 4848
  HEAP32[$29 >> 2] = $11; //@line 4849
  $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 4850
  HEAP32[$30 >> 2] = $4; //@line 4851
  $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 4852
  HEAP32[$31 >> 2] = $22; //@line 4853
  sp = STACKTOP; //@line 4854
  return;
 } else {
  $15 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 4859
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 4860
  FUNCTION_TABLE_vii[$15 & 15]($2, $4); //@line 4861
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 206; //@line 4864
   $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 4865
   HEAP32[$16 >> 2] = $2; //@line 4866
   $17 = $ReallocAsyncCtx2 + 8 | 0; //@line 4867
   HEAP32[$17 >> 2] = $4; //@line 4868
   $18 = $ReallocAsyncCtx2 + 12 | 0; //@line 4869
   HEAP32[$18 >> 2] = $11; //@line 4870
   $19 = $ReallocAsyncCtx2 + 16 | 0; //@line 4871
   HEAP8[$19 >> 0] = $12; //@line 4872
   $20 = $ReallocAsyncCtx2 + 20 | 0; //@line 4873
   HEAP32[$20 >> 2] = $11; //@line 4874
   $21 = $ReallocAsyncCtx2 + 24 | 0; //@line 4875
   HEAP32[$21 >> 2] = $6; //@line 4876
   sp = STACKTOP; //@line 4877
   return;
  }
  ___async_unwind = 0; //@line 4880
  HEAP32[$ReallocAsyncCtx2 >> 2] = 206; //@line 4881
  $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 4882
  HEAP32[$16 >> 2] = $2; //@line 4883
  $17 = $ReallocAsyncCtx2 + 8 | 0; //@line 4884
  HEAP32[$17 >> 2] = $4; //@line 4885
  $18 = $ReallocAsyncCtx2 + 12 | 0; //@line 4886
  HEAP32[$18 >> 2] = $11; //@line 4887
  $19 = $ReallocAsyncCtx2 + 16 | 0; //@line 4888
  HEAP8[$19 >> 0] = $12; //@line 4889
  $20 = $ReallocAsyncCtx2 + 20 | 0; //@line 4890
  HEAP32[$20 >> 2] = $11; //@line 4891
  $21 = $ReallocAsyncCtx2 + 24 | 0; //@line 4892
  HEAP32[$21 >> 2] = $6; //@line 4893
  sp = STACKTOP; //@line 4894
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_133($0) {
 $0 = $0 | 0;
 var $$pr = 0, $$pre17 = 0, $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 27866
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27868
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27870
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27872
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27874
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27876
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27878
 $$pre17 = HEAP32[$2 >> 2] | 0; //@line 27879
 if ($$pre17 | 0) {
  $15 = HEAP32[$$pre17 + 4 >> 2] | 0; //@line 27883
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 27884
  FUNCTION_TABLE_vii[$15 & 15]($8, $10); //@line 27885
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 337; //@line 27888
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 27889
   HEAP32[$16 >> 2] = $2; //@line 27890
   $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 27891
   HEAP32[$17 >> 2] = $4; //@line 27892
   $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 27893
   HEAP32[$18 >> 2] = $6; //@line 27894
   $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 27895
   HEAP32[$19 >> 2] = $12; //@line 27896
   $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 27897
   HEAP32[$20 >> 2] = $10; //@line 27898
   sp = STACKTOP; //@line 27899
   return;
  }
  ___async_unwind = 0; //@line 27902
  HEAP32[$ReallocAsyncCtx6 >> 2] = 337; //@line 27903
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 27904
  HEAP32[$16 >> 2] = $2; //@line 27905
  $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 27906
  HEAP32[$17 >> 2] = $4; //@line 27907
  $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 27908
  HEAP32[$18 >> 2] = $6; //@line 27909
  $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 27910
  HEAP32[$19 >> 2] = $12; //@line 27911
  $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 27912
  HEAP32[$20 >> 2] = $10; //@line 27913
  sp = STACKTOP; //@line 27914
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 27917
 $$pr = HEAP32[$2 >> 2] | 0; //@line 27918
 if (!$$pr) {
  $27 = $12 + 12 | 0; //@line 27921
  HEAP32[$27 >> 2] = 0; //@line 27922
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 27923
  __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($6, $12); //@line 27924
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 339; //@line 27927
   $28 = $ReallocAsyncCtx9 + 4 | 0; //@line 27928
   HEAP32[$28 >> 2] = $27; //@line 27929
   $29 = $ReallocAsyncCtx9 + 8 | 0; //@line 27930
   HEAP32[$29 >> 2] = $12; //@line 27931
   sp = STACKTOP; //@line 27932
   return;
  }
  ___async_unwind = 0; //@line 27935
  HEAP32[$ReallocAsyncCtx9 >> 2] = 339; //@line 27936
  $28 = $ReallocAsyncCtx9 + 4 | 0; //@line 27937
  HEAP32[$28 >> 2] = $27; //@line 27938
  $29 = $ReallocAsyncCtx9 + 8 | 0; //@line 27939
  HEAP32[$29 >> 2] = $12; //@line 27940
  sp = STACKTOP; //@line 27941
  return;
 } else {
  $23 = HEAP32[$$pr + 4 >> 2] | 0; //@line 27945
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 27946
  FUNCTION_TABLE_vii[$23 & 15]($12, $10); //@line 27947
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 338; //@line 27950
   $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 27951
   HEAP32[$24 >> 2] = $2; //@line 27952
   $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 27953
   HEAP32[$25 >> 2] = $6; //@line 27954
   $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 27955
   HEAP32[$26 >> 2] = $12; //@line 27956
   sp = STACKTOP; //@line 27957
   return;
  }
  ___async_unwind = 0; //@line 27960
  HEAP32[$ReallocAsyncCtx7 >> 2] = 338; //@line 27961
  $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 27962
  HEAP32[$24 >> 2] = $2; //@line 27963
  $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 27964
  HEAP32[$25 >> 2] = $6; //@line 27965
  $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 27966
  HEAP32[$26 >> 2] = $12; //@line 27967
  sp = STACKTOP; //@line 27968
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $31 = 0, $32 = 0, $33 = 0, $62 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16834
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 16839
 } else {
  $9 = $1 + 52 | 0; //@line 16841
  $10 = HEAP8[$9 >> 0] | 0; //@line 16842
  $11 = $1 + 53 | 0; //@line 16843
  $12 = HEAP8[$11 >> 0] | 0; //@line 16844
  $15 = HEAP32[$0 + 12 >> 2] | 0; //@line 16847
  $16 = $0 + 16 + ($15 << 3) | 0; //@line 16848
  HEAP8[$9 >> 0] = 0; //@line 16849
  HEAP8[$11 >> 0] = 0; //@line 16850
  $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 16851
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0 + 16 | 0, $1, $2, $3, $4, $5); //@line 16852
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 662; //@line 16855
   HEAP32[$AsyncCtx3 + 4 >> 2] = $15; //@line 16857
   HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 16859
   HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 16861
   HEAP8[$AsyncCtx3 + 16 >> 0] = $10; //@line 16863
   HEAP32[$AsyncCtx3 + 20 >> 2] = $9; //@line 16865
   HEAP8[$AsyncCtx3 + 24 >> 0] = $12; //@line 16867
   HEAP32[$AsyncCtx3 + 28 >> 2] = $11; //@line 16869
   HEAP32[$AsyncCtx3 + 32 >> 2] = $2; //@line 16871
   HEAP32[$AsyncCtx3 + 36 >> 2] = $3; //@line 16873
   HEAP32[$AsyncCtx3 + 40 >> 2] = $4; //@line 16875
   HEAP8[$AsyncCtx3 + 44 >> 0] = $5 & 1; //@line 16878
   HEAP32[$AsyncCtx3 + 48 >> 2] = $16; //@line 16880
   sp = STACKTOP; //@line 16881
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16884
  L7 : do {
   if (($15 | 0) > 1) {
    $31 = $1 + 24 | 0; //@line 16889
    $32 = $0 + 8 | 0; //@line 16890
    $33 = $1 + 54 | 0; //@line 16891
    $$0 = $0 + 24 | 0; //@line 16892
    while (1) {
     if (HEAP8[$33 >> 0] | 0) {
      break L7;
     }
     if (!(HEAP8[$9 >> 0] | 0)) {
      if (HEAP8[$11 >> 0] | 0) {
       if (!(HEAP32[$32 >> 2] & 1)) {
        break L7;
       }
      }
     } else {
      if ((HEAP32[$31 >> 2] | 0) == 1) {
       break L7;
      }
      if (!(HEAP32[$32 >> 2] & 2)) {
       break L7;
      }
     }
     HEAP8[$9 >> 0] = 0; //@line 16925
     HEAP8[$11 >> 0] = 0; //@line 16926
     $AsyncCtx = _emscripten_alloc_async_context(60, sp) | 0; //@line 16927
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0, $1, $2, $3, $4, $5); //@line 16928
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 16933
     $62 = $$0 + 8 | 0; //@line 16934
     if ($62 >>> 0 < $16 >>> 0) {
      $$0 = $62; //@line 16937
     } else {
      break L7;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 663; //@line 16942
    HEAP32[$AsyncCtx + 4 >> 2] = $$0; //@line 16944
    HEAP32[$AsyncCtx + 8 >> 2] = $16; //@line 16946
    HEAP32[$AsyncCtx + 12 >> 2] = $33; //@line 16948
    HEAP8[$AsyncCtx + 16 >> 0] = $10; //@line 16950
    HEAP32[$AsyncCtx + 20 >> 2] = $9; //@line 16952
    HEAP8[$AsyncCtx + 24 >> 0] = $12; //@line 16954
    HEAP32[$AsyncCtx + 28 >> 2] = $11; //@line 16956
    HEAP32[$AsyncCtx + 32 >> 2] = $31; //@line 16958
    HEAP32[$AsyncCtx + 36 >> 2] = $32; //@line 16960
    HEAP32[$AsyncCtx + 40 >> 2] = $1; //@line 16962
    HEAP32[$AsyncCtx + 44 >> 2] = $2; //@line 16964
    HEAP32[$AsyncCtx + 48 >> 2] = $3; //@line 16966
    HEAP32[$AsyncCtx + 52 >> 2] = $4; //@line 16968
    HEAP8[$AsyncCtx + 56 >> 0] = $5 & 1; //@line 16971
    sp = STACKTOP; //@line 16972
    return;
   }
  } while (0);
  HEAP8[$9 >> 0] = $10; //@line 16976
  HEAP8[$11 >> 0] = $12; //@line 16977
 }
 return;
}
function _pop_arg_673($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $108 = 0, $109 = 0.0, $115 = 0, $116 = 0.0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $9 = 0, $97 = 0, $98 = 0, $99 = 0;
 L1 : do {
  if ($1 >>> 0 <= 20) {
   do {
    switch ($1 | 0) {
    case 9:
     {
      $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13257
      $10 = HEAP32[$9 >> 2] | 0; //@line 13258
      HEAP32[$2 >> 2] = $9 + 4; //@line 13260
      HEAP32[$0 >> 2] = $10; //@line 13261
      break L1;
      break;
     }
    case 10:
     {
      $16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13277
      $17 = HEAP32[$16 >> 2] | 0; //@line 13278
      HEAP32[$2 >> 2] = $16 + 4; //@line 13280
      $20 = $0; //@line 13283
      HEAP32[$20 >> 2] = $17; //@line 13285
      HEAP32[$20 + 4 >> 2] = (($17 | 0) < 0) << 31 >> 31; //@line 13288
      break L1;
      break;
     }
    case 11:
     {
      $29 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13304
      $30 = HEAP32[$29 >> 2] | 0; //@line 13305
      HEAP32[$2 >> 2] = $29 + 4; //@line 13307
      $31 = $0; //@line 13308
      HEAP32[$31 >> 2] = $30; //@line 13310
      HEAP32[$31 + 4 >> 2] = 0; //@line 13313
      break L1;
      break;
     }
    case 12:
     {
      $40 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 13329
      $41 = $40; //@line 13330
      $43 = HEAP32[$41 >> 2] | 0; //@line 13332
      $46 = HEAP32[$41 + 4 >> 2] | 0; //@line 13335
      HEAP32[$2 >> 2] = $40 + 8; //@line 13337
      $47 = $0; //@line 13338
      HEAP32[$47 >> 2] = $43; //@line 13340
      HEAP32[$47 + 4 >> 2] = $46; //@line 13343
      break L1;
      break;
     }
    case 13:
     {
      $56 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13359
      $57 = HEAP32[$56 >> 2] | 0; //@line 13360
      HEAP32[$2 >> 2] = $56 + 4; //@line 13362
      $59 = ($57 & 65535) << 16 >> 16; //@line 13364
      $62 = $0; //@line 13367
      HEAP32[$62 >> 2] = $59; //@line 13369
      HEAP32[$62 + 4 >> 2] = (($59 | 0) < 0) << 31 >> 31; //@line 13372
      break L1;
      break;
     }
    case 14:
     {
      $71 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13388
      $72 = HEAP32[$71 >> 2] | 0; //@line 13389
      HEAP32[$2 >> 2] = $71 + 4; //@line 13391
      $73 = $0; //@line 13393
      HEAP32[$73 >> 2] = $72 & 65535; //@line 13395
      HEAP32[$73 + 4 >> 2] = 0; //@line 13398
      break L1;
      break;
     }
    case 15:
     {
      $82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13414
      $83 = HEAP32[$82 >> 2] | 0; //@line 13415
      HEAP32[$2 >> 2] = $82 + 4; //@line 13417
      $85 = ($83 & 255) << 24 >> 24; //@line 13419
      $88 = $0; //@line 13422
      HEAP32[$88 >> 2] = $85; //@line 13424
      HEAP32[$88 + 4 >> 2] = (($85 | 0) < 0) << 31 >> 31; //@line 13427
      break L1;
      break;
     }
    case 16:
     {
      $97 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13443
      $98 = HEAP32[$97 >> 2] | 0; //@line 13444
      HEAP32[$2 >> 2] = $97 + 4; //@line 13446
      $99 = $0; //@line 13448
      HEAP32[$99 >> 2] = $98 & 255; //@line 13450
      HEAP32[$99 + 4 >> 2] = 0; //@line 13453
      break L1;
      break;
     }
    case 17:
     {
      $108 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 13469
      $109 = +HEAPF64[$108 >> 3]; //@line 13470
      HEAP32[$2 >> 2] = $108 + 8; //@line 13472
      HEAPF64[$0 >> 3] = $109; //@line 13473
      break L1;
      break;
     }
    case 18:
     {
      $115 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 13489
      $116 = +HEAPF64[$115 >> 3]; //@line 13490
      HEAP32[$2 >> 2] = $115 + 8; //@line 13492
      HEAPF64[$0 >> 3] = $116; //@line 13493
      break L1;
      break;
     }
    default:
     {
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_225($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 4362
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4364
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4366
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4368
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4370
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 4373
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4375
 $15 = $12 + 24 | 0; //@line 4378
 do {
  if ((HEAP32[$0 + 28 >> 2] | 0) > 1) {
   $18 = HEAP32[$12 + 8 >> 2] | 0; //@line 4383
   if (!($18 & 2)) {
    $21 = $4 + 36 | 0; //@line 4387
    if ((HEAP32[$21 >> 2] | 0) != 1) {
     if (!($18 & 1)) {
      $38 = $4 + 54 | 0; //@line 4394
      if (HEAP8[$38 >> 0] | 0) {
       break;
      }
      if ((HEAP32[$21 >> 2] | 0) == 1) {
       break;
      }
      $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 4405
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $4, $6, $8, $10); //@line 4406
      if (!___async) {
       ___async_unwind = 0; //@line 4409
      }
      HEAP32[$ReallocAsyncCtx >> 2] = 668; //@line 4411
      HEAP32[$ReallocAsyncCtx + 4 >> 2] = $15; //@line 4413
      HEAP32[$ReallocAsyncCtx + 8 >> 2] = $2; //@line 4415
      HEAP32[$ReallocAsyncCtx + 12 >> 2] = $38; //@line 4417
      HEAP32[$ReallocAsyncCtx + 16 >> 2] = $21; //@line 4419
      HEAP32[$ReallocAsyncCtx + 20 >> 2] = $4; //@line 4421
      HEAP32[$ReallocAsyncCtx + 24 >> 2] = $6; //@line 4423
      HEAP32[$ReallocAsyncCtx + 28 >> 2] = $8; //@line 4425
      HEAP8[$ReallocAsyncCtx + 32 >> 0] = $10 & 1; //@line 4428
      sp = STACKTOP; //@line 4429
      return;
     }
     $36 = $4 + 24 | 0; //@line 4432
     $37 = $4 + 54 | 0; //@line 4433
     if (HEAP8[$37 >> 0] | 0) {
      break;
     }
     if ((HEAP32[$21 >> 2] | 0) == 1) {
      if ((HEAP32[$36 >> 2] | 0) == 1) {
       break;
      }
     }
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 4448
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $4, $6, $8, $10); //@line 4449
     if (!___async) {
      ___async_unwind = 0; //@line 4452
     }
     HEAP32[$ReallocAsyncCtx2 >> 2] = 667; //@line 4454
     HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $15; //@line 4456
     HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $2; //@line 4458
     HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $37; //@line 4460
     HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $21; //@line 4462
     HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $36; //@line 4464
     HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $4; //@line 4466
     HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $6; //@line 4468
     HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $8; //@line 4470
     HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $10 & 1; //@line 4473
     sp = STACKTOP; //@line 4474
     return;
    }
   }
   $24 = $4 + 54 | 0; //@line 4478
   if (!(HEAP8[$24 >> 0] | 0)) {
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 4482
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $4, $6, $8, $10); //@line 4483
    if (!___async) {
     ___async_unwind = 0; //@line 4486
    }
    HEAP32[$ReallocAsyncCtx3 >> 2] = 666; //@line 4488
    HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $15; //@line 4490
    HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $2; //@line 4492
    HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $24; //@line 4494
    HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $4; //@line 4496
    HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $6; //@line 4498
    HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $8; //@line 4500
    HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $10 & 1; //@line 4503
    sp = STACKTOP; //@line 4504
    return;
   }
  }
 } while (0);
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $43 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 3452
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3454
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3456
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3458
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3460
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3462
 $12 = $0 + 24 | 0; //@line 3464
 $14 = HEAP32[$12 >> 2] | 0; //@line 3466
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 3469
 $19 = HEAP32[$0 + 32 >> 2] | 0; //@line 3471
 $20 = HEAP32[$2 >> 2] | 0; //@line 3472
 if ($20 | 0) {
  $23 = HEAP32[$20 + 4 >> 2] | 0; //@line 3476
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 3477
  FUNCTION_TABLE_vii[$23 & 15]($6, $8); //@line 3478
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 84; //@line 3481
   $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 3482
   HEAP32[$24 >> 2] = $2; //@line 3483
   $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 3484
   HEAP32[$25 >> 2] = $4; //@line 3485
   $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 3486
   HEAP32[$26 >> 2] = $10; //@line 3487
   $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 3488
   $28 = $27; //@line 3489
   $29 = $28; //@line 3490
   HEAP32[$29 >> 2] = $14; //@line 3491
   $30 = $28 + 4 | 0; //@line 3492
   $31 = $30; //@line 3493
   HEAP32[$31 >> 2] = $17; //@line 3494
   $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 3495
   HEAP32[$32 >> 2] = $19; //@line 3496
   $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 3497
   HEAP32[$33 >> 2] = $8; //@line 3498
   sp = STACKTOP; //@line 3499
   return;
  }
  ___async_unwind = 0; //@line 3502
  HEAP32[$ReallocAsyncCtx2 >> 2] = 84; //@line 3503
  $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 3504
  HEAP32[$24 >> 2] = $2; //@line 3505
  $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 3506
  HEAP32[$25 >> 2] = $4; //@line 3507
  $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 3508
  HEAP32[$26 >> 2] = $10; //@line 3509
  $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 3510
  $28 = $27; //@line 3511
  $29 = $28; //@line 3512
  HEAP32[$29 >> 2] = $14; //@line 3513
  $30 = $28 + 4 | 0; //@line 3514
  $31 = $30; //@line 3515
  HEAP32[$31 >> 2] = $17; //@line 3516
  $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 3517
  HEAP32[$32 >> 2] = $19; //@line 3518
  $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 3519
  HEAP32[$33 >> 2] = $8; //@line 3520
  sp = STACKTOP; //@line 3521
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 3524
 __ZN4mbed6Ticker5setupEy($10, $14, $17); //@line 3525
 $34 = HEAP32[$2 >> 2] | 0; //@line 3526
 if ($34 | 0) {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 3530
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 3531
  FUNCTION_TABLE_vi[$37 & 1023]($8); //@line 3532
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 85; //@line 3535
   $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 3536
   HEAP32[$38 >> 2] = $19; //@line 3537
   sp = STACKTOP; //@line 3538
   return;
  }
  ___async_unwind = 0; //@line 3541
  HEAP32[$ReallocAsyncCtx3 >> 2] = 85; //@line 3542
  $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 3543
  HEAP32[$38 >> 2] = $19; //@line 3544
  sp = STACKTOP; //@line 3545
  return;
 }
 $40 = HEAP32[$19 + 788 >> 2] | 0; //@line 3549
 if (!$40) {
  return;
 }
 $43 = HEAP32[$40 + 60 >> 2] | 0; //@line 3555
 if (!$43) {
  return;
 }
 $46 = HEAP32[$43 >> 2] | 0; //@line 3561
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 3562
 FUNCTION_TABLE_vi[$46 & 1023]($40 + 48 | 0); //@line 3563
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 86; //@line 3566
  sp = STACKTOP; //@line 3567
  return;
 }
 ___async_unwind = 0; //@line 3570
 HEAP32[$ReallocAsyncCtx4 >> 2] = 86; //@line 3571
 sp = STACKTOP; //@line 3572
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_95($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $24 = 0, $29 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $41 = 0, $44 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 23748
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23754
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23756
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 23758
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23760
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23762
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23764
 if ((HEAP8[$0 + 4 >> 0] | 0) == 7) {
  if (HEAP8[(HEAP32[$0 + 8 >> 2] | 0) + 14 >> 0] | 0) {
   $21 = HEAP32[$6 >> 2] | 0; //@line 23771
   $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 16 >> 2] | 0; //@line 23774
   $29 = HEAP32[$8 + 8 >> 2] & 65535; //@line 23779
   $32 = (HEAP8[$8 + 18 >> 0] | 0) != 0; //@line 23782
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 23783
   FUNCTION_TABLE_viiiiiiiiiiiiiii[$24 & 1]($21, 0, 5e4, ($10 & 255) * 1e3 | 0, 0, 83333, 5, $29, 0, 0, 1, 0, 0, 0, $32); //@line 23784
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 505; //@line 23787
    $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 23788
    HEAP32[$33 >> 2] = $8; //@line 23789
    $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 23790
    HEAP32[$34 >> 2] = $12; //@line 23791
    $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 23792
    HEAP32[$35 >> 2] = $14; //@line 23793
    $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 23794
    HEAP32[$36 >> 2] = $16; //@line 23795
    $37 = $ReallocAsyncCtx6 + 20 | 0; //@line 23796
    HEAP32[$37 >> 2] = $6; //@line 23797
    sp = STACKTOP; //@line 23798
    return;
   }
   ___async_unwind = 0; //@line 23801
   HEAP32[$ReallocAsyncCtx6 >> 2] = 505; //@line 23802
   $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 23803
   HEAP32[$33 >> 2] = $8; //@line 23804
   $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 23805
   HEAP32[$34 >> 2] = $12; //@line 23806
   $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 23807
   HEAP32[$35 >> 2] = $14; //@line 23808
   $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 23809
   HEAP32[$36 >> 2] = $16; //@line 23810
   $37 = $ReallocAsyncCtx6 + 20 | 0; //@line 23811
   HEAP32[$37 >> 2] = $6; //@line 23812
   sp = STACKTOP; //@line 23813
   return;
  }
 }
 $38 = HEAP32[$6 >> 2] | 0; //@line 23817
 $41 = HEAP32[(HEAP32[$38 >> 2] | 0) + 16 >> 2] | 0; //@line 23820
 $44 = HEAPU8[$8 + 2 >> 0] | 0; //@line 23823
 $48 = HEAP32[$8 + 8 >> 2] & 65535; //@line 23827
 $51 = (HEAP8[$8 + 18 >> 0] | 0) != 0; //@line 23830
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(24) | 0; //@line 23831
 FUNCTION_TABLE_viiiiiiiiiiiiiii[$41 & 1]($38, 1, $44, $10 & 255, 1, 0, 8, $48, 0, 0, 0, 0, 0, 1, $51); //@line 23832
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 506; //@line 23835
  $52 = $ReallocAsyncCtx7 + 4 | 0; //@line 23836
  HEAP32[$52 >> 2] = $8; //@line 23837
  $53 = $ReallocAsyncCtx7 + 8 | 0; //@line 23838
  HEAP32[$53 >> 2] = $12; //@line 23839
  $54 = $ReallocAsyncCtx7 + 12 | 0; //@line 23840
  HEAP32[$54 >> 2] = $14; //@line 23841
  $55 = $ReallocAsyncCtx7 + 16 | 0; //@line 23842
  HEAP32[$55 >> 2] = $16; //@line 23843
  $56 = $ReallocAsyncCtx7 + 20 | 0; //@line 23844
  HEAP32[$56 >> 2] = $6; //@line 23845
  sp = STACKTOP; //@line 23846
  return;
 }
 ___async_unwind = 0; //@line 23849
 HEAP32[$ReallocAsyncCtx7 >> 2] = 506; //@line 23850
 $52 = $ReallocAsyncCtx7 + 4 | 0; //@line 23851
 HEAP32[$52 >> 2] = $8; //@line 23852
 $53 = $ReallocAsyncCtx7 + 8 | 0; //@line 23853
 HEAP32[$53 >> 2] = $12; //@line 23854
 $54 = $ReallocAsyncCtx7 + 12 | 0; //@line 23855
 HEAP32[$54 >> 2] = $14; //@line 23856
 $55 = $ReallocAsyncCtx7 + 16 | 0; //@line 23857
 HEAP32[$55 >> 2] = $16; //@line 23858
 $56 = $ReallocAsyncCtx7 + 20 | 0; //@line 23859
 HEAP32[$56 >> 2] = $6; //@line 23860
 sp = STACKTOP; //@line 23861
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_8($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 18212
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18214
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18216
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 18218
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18220
 $10 = HEAP16[$0 + 20 >> 1] | 0; //@line 18222
 $12 = HEAP8[$0 + 22 >> 0] | 0; //@line 18224
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 18226
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 18228
 $17 = $2 + 2364 | 0; //@line 18229
 if ((HEAP32[$17 >> 2] | 0) == 2) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(28) | 0; //@line 18233
  __ZN18LoRaWANTimeHandler4stopER13timer_event_t($14, $16); //@line 18234
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 409; //@line 18237
   $20 = $ReallocAsyncCtx7 + 4 | 0; //@line 18238
   HEAP32[$20 >> 2] = $2; //@line 18239
   $21 = $ReallocAsyncCtx7 + 8 | 0; //@line 18240
   HEAP32[$21 >> 2] = $4; //@line 18241
   $22 = $ReallocAsyncCtx7 + 12 | 0; //@line 18242
   HEAP16[$22 >> 1] = $6; //@line 18243
   $23 = $ReallocAsyncCtx7 + 16 | 0; //@line 18244
   HEAP32[$23 >> 2] = $8; //@line 18245
   $24 = $ReallocAsyncCtx7 + 20 | 0; //@line 18246
   HEAP32[$24 >> 2] = $17; //@line 18247
   $25 = $ReallocAsyncCtx7 + 24 | 0; //@line 18248
   HEAP16[$25 >> 1] = $10; //@line 18249
   $26 = $ReallocAsyncCtx7 + 26 | 0; //@line 18250
   HEAP8[$26 >> 0] = $12; //@line 18251
   sp = STACKTOP; //@line 18252
   return;
  }
  ___async_unwind = 0; //@line 18255
  HEAP32[$ReallocAsyncCtx7 >> 2] = 409; //@line 18256
  $20 = $ReallocAsyncCtx7 + 4 | 0; //@line 18257
  HEAP32[$20 >> 2] = $2; //@line 18258
  $21 = $ReallocAsyncCtx7 + 8 | 0; //@line 18259
  HEAP32[$21 >> 2] = $4; //@line 18260
  $22 = $ReallocAsyncCtx7 + 12 | 0; //@line 18261
  HEAP16[$22 >> 1] = $6; //@line 18262
  $23 = $ReallocAsyncCtx7 + 16 | 0; //@line 18263
  HEAP32[$23 >> 2] = $8; //@line 18264
  $24 = $ReallocAsyncCtx7 + 20 | 0; //@line 18265
  HEAP32[$24 >> 2] = $17; //@line 18266
  $25 = $ReallocAsyncCtx7 + 24 | 0; //@line 18267
  HEAP16[$25 >> 1] = $10; //@line 18268
  $26 = $ReallocAsyncCtx7 + 26 | 0; //@line 18269
  HEAP8[$26 >> 0] = $12; //@line 18270
  sp = STACKTOP; //@line 18271
  return;
 } else {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 18275
  __ZN7LoRaPHY18put_radio_to_sleepEv($2 + 4 | 0); //@line 18276
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 412; //@line 18279
   $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 18280
   HEAP32[$28 >> 2] = $2; //@line 18281
   $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 18282
   HEAP32[$29 >> 2] = $4; //@line 18283
   $30 = $ReallocAsyncCtx4 + 12 | 0; //@line 18284
   HEAP16[$30 >> 1] = $6; //@line 18285
   $31 = $ReallocAsyncCtx4 + 16 | 0; //@line 18286
   HEAP32[$31 >> 2] = $8; //@line 18287
   $32 = $ReallocAsyncCtx4 + 20 | 0; //@line 18288
   HEAP16[$32 >> 1] = $10; //@line 18289
   $33 = $ReallocAsyncCtx4 + 22 | 0; //@line 18290
   HEAP8[$33 >> 0] = $12; //@line 18291
   sp = STACKTOP; //@line 18292
   return;
  }
  ___async_unwind = 0; //@line 18295
  HEAP32[$ReallocAsyncCtx4 >> 2] = 412; //@line 18296
  $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 18297
  HEAP32[$28 >> 2] = $2; //@line 18298
  $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 18299
  HEAP32[$29 >> 2] = $4; //@line 18300
  $30 = $ReallocAsyncCtx4 + 12 | 0; //@line 18301
  HEAP16[$30 >> 1] = $6; //@line 18302
  $31 = $ReallocAsyncCtx4 + 16 | 0; //@line 18303
  HEAP32[$31 >> 2] = $8; //@line 18304
  $32 = $ReallocAsyncCtx4 + 20 | 0; //@line 18305
  HEAP16[$32 >> 1] = $10; //@line 18306
  $33 = $ReallocAsyncCtx4 + 22 | 0; //@line 18307
  HEAP8[$33 >> 0] = $12; //@line 18308
  sp = STACKTOP; //@line 18309
  return;
 }
}
function __ZN7LoRaMac15send_ongoing_txEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $13 = 0, $14 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14879
 STACKTOP = STACKTOP + 16 | 0; //@line 14880
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14880
 $1 = sp + 1 | 0; //@line 14881
 $2 = sp; //@line 14882
 HEAP8[$0 + 1180 >> 0] = 0; //@line 14884
 $4 = $0 + 1877 | 0; //@line 14885
 $5 = HEAP8[$4 >> 0] | 0; //@line 14886
 $6 = $0 + 4 | 0; //@line 14887
 if ($5 << 24 >> 24 > (__ZN7LoRaPHY23get_minimum_tx_datarateEv($6) | 0) << 24 >> 24) {
  $21 = $5; //@line 14891
 } else {
  $21 = __ZN7LoRaPHY23get_minimum_tx_datarateEv($6) | 0; //@line 14894
 }
 HEAP8[$2 >> 0] = 0; //@line 14896
 $10 = $0 + 2036 | 0; //@line 14897
 HEAP32[$10 >> 2] = 0; //@line 14898
 HEAP32[$10 + 4 >> 2] = 0; //@line 14898
 HEAP32[$10 + 8 >> 2] = 0; //@line 14898
 HEAP32[$10 + 12 >> 2] = 0; //@line 14898
 HEAP32[$10 + 16 >> 2] = 0; //@line 14898
 HEAP32[$10 + 20 >> 2] = 0; //@line 14898
 HEAP32[$0 + 2040 >> 2] = 1; //@line 14900
 HEAP8[$0 + 1699 >> 0] = 1; //@line 14902
 $13 = $0 + 1698 | 0; //@line 14903
 HEAP8[$13 >> 0] = 1; //@line 14904
 $14 = $0 + 2092 | 0; //@line 14905
 switch (HEAP32[$14 >> 2] | 0) {
 case 0:
  {
   HEAP8[$2 >> 0] = 64; //@line 14909
   break;
  }
 case 1:
  {
   HEAP8[$2 >> 0] = -128; //@line 14913
   HEAP8[$13 >> 0] = HEAP8[$0 + 2098 >> 0] | 0; //@line 14916
   break;
  }
 case 3:
  {
   HEAP8[$2 >> 0] = -32; //@line 14920
   break;
  }
 default:
  {
   $$0 = -1002; //@line 14924
   STACKTOP = sp; //@line 14925
   return $$0 | 0; //@line 14925
  }
 }
 $18 = $0 + 1936 | 0; //@line 14928
 do {
  if (!(HEAP8[$18 >> 0] | 0)) {
   if (__ZN7LoRaPHY18verify_tx_datarateEhb($6, $21, 0) | 0) {
    HEAP8[$4 >> 0] = $21; //@line 14935
    $28 = HEAP8[$18 >> 0] << 7 & 255; //@line 14938
    break;
   } else {
    $$0 = -1003; //@line 14941
    STACKTOP = sp; //@line 14942
    return $$0 | 0; //@line 14942
   }
  } else {
   $28 = -128; //@line 14945
  }
 } while (0);
 $24 = HEAP8[$0 + 2096 >> 0] | 0; //@line 14949
 $27 = HEAP16[$0 + 2354 >> 1] | 0; //@line 14952
 HEAP8[$1 >> 0] = $28; //@line 14953
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 14954
 $29 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt($0, $2, $1, $24, $0 + 2099 | 0, $27) | 0; //@line 14955
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 438; //@line 14958
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 14960
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 14962
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 14964
  HEAP32[$AsyncCtx + 16 >> 2] = $14; //@line 14966
  sp = STACKTOP; //@line 14967
  STACKTOP = sp; //@line 14968
  return 0; //@line 14968
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14970
 if ($29 | 0) {
  $$0 = $29; //@line 14973
  STACKTOP = sp; //@line 14974
  return $$0 | 0; //@line 14974
 }
 HEAP8[$0 + 2047 >> 0] = 0; //@line 14977
 HEAP8[$0 + 2046 >> 0] = 0; //@line 14979
 HEAP32[$0 + 2052 >> 2] = HEAP32[$0 + 1760 >> 2]; //@line 14983
 $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 14984
 $40 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 14985
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 439; //@line 14988
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 14990
  HEAP32[$AsyncCtx2 + 8 >> 2] = $14; //@line 14992
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 14994
  HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 14996
  sp = STACKTOP; //@line 14997
  STACKTOP = sp; //@line 14998
  return 0; //@line 14998
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 15000
 if ($40 | 0) {
  $$0 = $40; //@line 15003
  STACKTOP = sp; //@line 15004
  return $$0 | 0; //@line 15004
 }
 HEAP32[$0 + 2036 >> 2] = HEAP32[$14 >> 2]; //@line 15008
 $$0 = 0; //@line 15009
 STACKTOP = sp; //@line 15010
 return $$0 | 0; //@line 15010
}
function __ZN7LoRaMac24handle_join_accept_frameEPKht($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $109 = 0, $113 = 0, $12 = 0, $14 = 0, $15 = 0, $20 = 0, $22 = 0, $23 = 0, $3 = 0, $7 = 0, $9 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 12519
 STACKTOP = STACKTOP + 16 | 0; //@line 12520
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12520
 $3 = sp; //@line 12521
 HEAP32[$3 >> 2] = 0; //@line 12522
 HEAP8[$0 + 2086 >> 0] = HEAP8[$0 + 1701 >> 0] | 0; //@line 12526
 $7 = $0 + 756 | 0; //@line 12527
 $9 = $2 & 65535; //@line 12529
 $12 = $0 + 1712 | 0; //@line 12532
 $14 = $0 + 1442 | 0; //@line 12534
 $15 = $0 + 1443 | 0; //@line 12535
 if (__ZN13LoRaMacCrypto18decrypt_join_frameEPKhtS1_jPh($7, $1 + 1 | 0, $9 + 65535 & 65535, HEAP32[$12 >> 2] | 0, 128, $15) | 0) {
  HEAP32[$0 + 2076 >> 2] = 13; //@line 12540
  STACKTOP = sp; //@line 12541
  return;
 }
 HEAP8[$14 >> 0] = HEAP8[$1 >> 0] | 0; //@line 12544
 $20 = $9 + -4 | 0; //@line 12545
 $22 = HEAP32[$12 >> 2] | 0; //@line 12547
 $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 12548
 $23 = __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj($7, $14, $20 & 65535, $22, 128, $3) | 0; //@line 12549
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 384; //@line 12552
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 12554
  HEAP32[$AsyncCtx + 8 >> 2] = $20; //@line 12556
  HEAP32[$AsyncCtx + 12 >> 2] = $9; //@line 12558
  HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 12560
  HEAP32[$AsyncCtx + 20 >> 2] = $3; //@line 12562
  HEAP32[$AsyncCtx + 24 >> 2] = $12; //@line 12564
  HEAP32[$AsyncCtx + 28 >> 2] = $7; //@line 12566
  HEAP32[$AsyncCtx + 32 >> 2] = $15; //@line 12568
  sp = STACKTOP; //@line 12569
  STACKTOP = sp; //@line 12570
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 12572
 if ($23 | 0) {
  HEAP32[$0 + 2076 >> 2] = 13; //@line 12576
  STACKTOP = sp; //@line 12577
  return;
 }
 if (((HEAPU8[$9 + -3 + ($0 + 1442) >> 0] | 0) << 8 | (HEAPU8[$0 + 1442 + $20 >> 0] | 0) | (HEAPU8[$9 + -2 + ($0 + 1442) >> 0] | 0) << 16 | (HEAPU8[$9 + -1 + ($0 + 1442) >> 0] | 0) << 24 | 0) != (HEAP32[$3 >> 2] | 0)) {
  HEAP32[$0 + 2076 >> 2] = 7; //@line 12604
  STACKTOP = sp; //@line 12605
  return;
 }
 if (__ZN13LoRaMacCrypto28compute_skeys_for_join_frameEPKhjS1_tPhS2_($7, HEAP32[$12 >> 2] | 0, 128, $15, HEAP16[$0 + 1748 >> 1] | 0, $0 + 1716 | 0, $0 + 1732 | 0) | 0) {
  HEAP32[$0 + 2076 >> 2] = 13; //@line 12616
  STACKTOP = sp; //@line 12617
  return;
 }
 HEAP32[$0 + 1752 >> 2] = (HEAPU8[$0 + 1448 >> 0] | 0) << 16 | ((HEAPU8[$0 + 1447 >> 0] | 0) << 8 | (HEAPU8[$0 + 1446 >> 0] | 0)); //@line 12633
 HEAP32[$0 + 1756 >> 2] = (HEAPU8[$0 + 1452 >> 0] | 0) << 24 | ((HEAPU8[$0 + 1451 >> 0] | 0) << 16 | ((HEAPU8[$0 + 1450 >> 0] | 0) << 8 | (HEAPU8[$0 + 1449 >> 0] | 0))); //@line 12653
 $99 = HEAP8[$0 + 1453 >> 0] | 0; //@line 12655
 HEAP8[$0 + 1909 >> 0] = ($99 & 255) >>> 4 & 7; //@line 12661
 HEAP8[$0 + 1916 >> 0] = $99 & 15; //@line 12664
 $109 = HEAP8[$0 + 1454 >> 0] & 15; //@line 12667
 $113 = $109 << 24 >> 24 == 0 ? 1e3 : ($109 & 255) * 1e3 | 0; //@line 12672
 HEAP32[$0 + 1892 >> 2] = $113; //@line 12673
 HEAP32[$0 + 1896 >> 2] = $113 + 1e3; //@line 12676
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12681
 __ZN7LoRaPHY13apply_cf_listEPKhh($0 + 4 | 0, $0 + 1455 | 0, $9 + 239 & 255); //@line 12682
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 385; //@line 12685
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 12687
  HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 12689
  sp = STACKTOP; //@line 12690
  STACKTOP = sp; //@line 12691
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12693
 HEAP32[$0 + 2076 >> 2] = 0; //@line 12695
 HEAP8[$0 + 2360 >> 0] = 1; //@line 12697
 HEAP32[$0 + 1760 >> 2] = 0; //@line 12699
 HEAP8[$0 + 1184 >> 0] = 0; //@line 12701
 STACKTOP = sp; //@line 12702
 return;
}
function __ZN7LoRaMac16set_device_classERK14device_class_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $25 = 0, $3 = 0, $38 = 0, $43 = 0, $44 = 0, $49 = 0, $51 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 15019
 $2 = HEAP32[$1 >> 2] | 0; //@line 15020
 $3 = $0 + 2364 | 0; //@line 15021
 HEAP32[$3 >> 2] = $2; //@line 15022
 L1 : do {
  switch ($2 | 0) {
  case 0:
   {
    $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15027
    __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 15028
    if (___async) {
     HEAP32[$AsyncCtx7 >> 2] = 440; //@line 15031
     HEAP32[$AsyncCtx7 + 4 >> 2] = $3; //@line 15033
     HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 15035
     sp = STACKTOP; //@line 15036
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 15039
     break L1;
    }
    break;
   }
  case 2:
   {
    HEAP8[$0 + 1177 >> 0] = 0; //@line 15046
    $8 = $0 + 4 | 0; //@line 15047
    $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 15048
    __ZN7LoRaPHY18put_radio_to_sleepEv($8); //@line 15049
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 441; //@line 15052
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 15054
     HEAP32[$AsyncCtx3 + 8 >> 2] = $8; //@line 15056
     HEAP32[$AsyncCtx3 + 12 >> 2] = $3; //@line 15058
     sp = STACKTOP; //@line 15059
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15062
     __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t($8, HEAP8[$0 + 1916 >> 0] | 0, HEAP8[$0 + 1884 >> 0] | 0, HEAP32[$0 + 1880 >> 2] | 0, $0 + 1964 | 0); //@line 15070
     break L1;
    }
    break;
   }
  default:
   {
    return;
   }
  }
 } while (0);
 if ((HEAP32[$3 >> 2] | 0) != 2) {
  return;
 }
 $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15086
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 15087
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 442; //@line 15090
  HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 15092
  HEAP32[$AsyncCtx15 + 8 >> 2] = $3; //@line 15094
  sp = STACKTOP; //@line 15095
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 15098
 $25 = $0 + 1964 | 0; //@line 15101
 HEAP8[$25 >> 0] = HEAP8[$0 + 1182 >> 0] | 0; //@line 15102
 HEAP32[$0 + 1968 >> 2] = HEAP32[$0 + 1912 >> 2]; //@line 15106
 HEAP8[$0 + 1980 >> 0] = HEAP8[$0 + 1921 >> 0] | 0; //@line 15110
 HEAP8[$0 + 1981 >> 0] = HEAP8[$0 + 1173 >> 0] | 0; //@line 15114
 HEAP32[$0 + 1984 >> 2] = 1; //@line 15116
 $38 = $0 + 1982 | 0; //@line 15119
 HEAP8[$38 >> 0] = (HEAP32[$3 >> 2] | 0) == 2 & 1; //@line 15121
 HEAP8[$0 + 2010 >> 0] = HEAP8[$0 + 1965 >> 0] | 0; //@line 15125
 $43 = $0 + 4 | 0; //@line 15126
 $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 15127
 $44 = __ZN7LoRaPHY9rx_configEP18rx_config_params_t($43, $25) | 0; //@line 15128
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 443; //@line 15131
  HEAP32[$AsyncCtx11 + 4 >> 2] = $38; //@line 15133
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 15135
  HEAP32[$AsyncCtx11 + 12 >> 2] = $43; //@line 15137
  sp = STACKTOP; //@line 15138
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 15141
 if (!$44) {
  return;
 }
 $49 = (HEAP8[$38 >> 0] | 0) != 0; //@line 15146
 $51 = HEAP32[$0 + 1888 >> 2] | 0; //@line 15148
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 15149
 __ZN7LoRaPHY15setup_rx_windowEbj($43, $49, $51); //@line 15150
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 444; //@line 15153
  HEAP32[$AsyncCtx + 4 >> 2] = $38; //@line 15155
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 15157
  sp = STACKTOP; //@line 15158
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15161
 HEAP32[$0 + 1168 >> 2] = HEAP8[$38 >> 0] | 0 ? 2 : 1; //@line 15166
 return;
}
function __ZN12radio_eventsD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0, $30 = 0, $34 = 0, $37 = 0, $41 = 0, $44 = 0, $47 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 4914
 $2 = HEAP32[$0 + 108 >> 2] | 0; //@line 4916
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 4922
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4923
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 96 | 0); //@line 4924
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 157; //@line 4927
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4929
    sp = STACKTOP; //@line 4930
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 4933
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 92 >> 2] | 0; //@line 4939
 do {
  if ($9 | 0) {
   $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 4945
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4946
   FUNCTION_TABLE_vi[$13 & 1023]($0 + 80 | 0); //@line 4947
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 158; //@line 4950
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 4952
    sp = STACKTOP; //@line 4953
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4956
    break;
   }
  }
 } while (0);
 $16 = HEAP32[$0 + 76 >> 2] | 0; //@line 4962
 do {
  if ($16 | 0) {
   $20 = HEAP32[$16 + 8 >> 2] | 0; //@line 4968
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4969
   FUNCTION_TABLE_vi[$20 & 1023]($0 + 64 | 0); //@line 4970
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 159; //@line 4973
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 4975
    sp = STACKTOP; //@line 4976
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 4979
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$0 + 60 >> 2] | 0; //@line 4985
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 4991
   $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4992
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 48 | 0); //@line 4993
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 160; //@line 4996
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 4998
    sp = STACKTOP; //@line 4999
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 5002
    break;
   }
  }
 } while (0);
 $30 = HEAP32[$0 + 44 >> 2] | 0; //@line 5008
 do {
  if ($30 | 0) {
   $34 = HEAP32[$30 + 8 >> 2] | 0; //@line 5014
   $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5015
   FUNCTION_TABLE_vi[$34 & 1023]($0 + 32 | 0); //@line 5016
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 161; //@line 5019
    HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 5021
    sp = STACKTOP; //@line 5022
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 5025
    break;
   }
  }
 } while (0);
 $37 = HEAP32[$0 + 28 >> 2] | 0; //@line 5031
 do {
  if ($37 | 0) {
   $41 = HEAP32[$37 + 8 >> 2] | 0; //@line 5037
   $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5038
   FUNCTION_TABLE_vi[$41 & 1023]($0 + 16 | 0); //@line 5039
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 162; //@line 5042
    HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 5044
    sp = STACKTOP; //@line 5045
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx19 | 0); //@line 5048
    break;
   }
  }
 } while (0);
 $44 = HEAP32[$0 + 12 >> 2] | 0; //@line 5054
 if (!$44) {
  return;
 }
 $47 = HEAP32[$44 + 8 >> 2] | 0; //@line 5060
 $AsyncCtx23 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5061
 FUNCTION_TABLE_vi[$47 & 1023]($0); //@line 5062
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 163; //@line 5065
  sp = STACKTOP; //@line 5066
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 5069
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_118($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $25 = 0, $27 = 0, $29 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 25948
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25950
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25954
 $8 = $0 + 16 | 0; //@line 25956
 $10 = HEAP32[$8 >> 2] | 0; //@line 25958
 $13 = HEAP32[$8 + 4 >> 2] | 0; //@line 25961
 $15 = HEAP32[$0 + 24 >> 2] | 0; //@line 25963
 $17 = HEAP32[$0 + 28 >> 2] | 0; //@line 25965
 $19 = HEAP32[$0 + 32 >> 2] | 0; //@line 25967
 $21 = HEAP32[$0 + 36 >> 2] | 0; //@line 25969
 $23 = HEAP32[$0 + 40 >> 2] | 0; //@line 25971
 $25 = HEAP32[$0 + 44 >> 2] | 0; //@line 25973
 $27 = HEAP32[$0 + 48 >> 2] | 0; //@line 25975
 $29 = HEAP32[$0 + 52 >> 2] | 0; //@line 25977
 $31 = HEAP32[$0 + 56 >> 2] | 0; //@line 25979
 $33 = HEAP32[$0 + 60 >> 2] | 0; //@line 25981
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 25983
 __ZN4mbed6Ticker5setupEy($6, $10, $13); //@line 25984
 $34 = HEAP32[$2 >> 2] | 0; //@line 25985
 if ($34 | 0) {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 25989
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(40) | 0; //@line 25990
  FUNCTION_TABLE_vi[$37 & 1023]($17); //@line 25991
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 55; //@line 25994
   $38 = $ReallocAsyncCtx6 + 4 | 0; //@line 25995
   HEAP32[$38 >> 2] = $15; //@line 25996
   $39 = $ReallocAsyncCtx6 + 8 | 0; //@line 25997
   HEAP32[$39 >> 2] = $19; //@line 25998
   $40 = $ReallocAsyncCtx6 + 12 | 0; //@line 25999
   HEAP32[$40 >> 2] = $21; //@line 26000
   $41 = $ReallocAsyncCtx6 + 16 | 0; //@line 26001
   HEAP32[$41 >> 2] = $23; //@line 26002
   $42 = $ReallocAsyncCtx6 + 20 | 0; //@line 26003
   HEAP32[$42 >> 2] = $25; //@line 26004
   $43 = $ReallocAsyncCtx6 + 24 | 0; //@line 26005
   HEAP32[$43 >> 2] = $27; //@line 26006
   $44 = $ReallocAsyncCtx6 + 28 | 0; //@line 26007
   HEAP32[$44 >> 2] = $29; //@line 26008
   $45 = $ReallocAsyncCtx6 + 32 | 0; //@line 26009
   HEAP32[$45 >> 2] = $31; //@line 26010
   $46 = $ReallocAsyncCtx6 + 36 | 0; //@line 26011
   HEAP32[$46 >> 2] = $33; //@line 26012
   sp = STACKTOP; //@line 26013
   return;
  }
  ___async_unwind = 0; //@line 26016
  HEAP32[$ReallocAsyncCtx6 >> 2] = 55; //@line 26017
  $38 = $ReallocAsyncCtx6 + 4 | 0; //@line 26018
  HEAP32[$38 >> 2] = $15; //@line 26019
  $39 = $ReallocAsyncCtx6 + 8 | 0; //@line 26020
  HEAP32[$39 >> 2] = $19; //@line 26021
  $40 = $ReallocAsyncCtx6 + 12 | 0; //@line 26022
  HEAP32[$40 >> 2] = $21; //@line 26023
  $41 = $ReallocAsyncCtx6 + 16 | 0; //@line 26024
  HEAP32[$41 >> 2] = $23; //@line 26025
  $42 = $ReallocAsyncCtx6 + 20 | 0; //@line 26026
  HEAP32[$42 >> 2] = $25; //@line 26027
  $43 = $ReallocAsyncCtx6 + 24 | 0; //@line 26028
  HEAP32[$43 >> 2] = $27; //@line 26029
  $44 = $ReallocAsyncCtx6 + 28 | 0; //@line 26030
  HEAP32[$44 >> 2] = $29; //@line 26031
  $45 = $ReallocAsyncCtx6 + 32 | 0; //@line 26032
  HEAP32[$45 >> 2] = $31; //@line 26033
  $46 = $ReallocAsyncCtx6 + 36 | 0; //@line 26034
  HEAP32[$46 >> 2] = $33; //@line 26035
  sp = STACKTOP; //@line 26036
  return;
 }
 if (!(HEAP8[$15 + 770 >> 0] | 0)) {
  HEAP32[$19 >> 2] = 6; //@line 26043
  _mbed_tracef(16, 10996, 11053, $19); //@line 26044
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($15); //@line 26045
  HEAP32[$23 >> 2] = 6; //@line 26046
  _mbed_tracef(16, 10996, 11082, $23); //@line 26047
  return;
 } else {
  HEAP32[$27 >> 2] = 5; //@line 26050
  _mbed_tracef(16, 10996, 11053, $27); //@line 26051
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($15); //@line 26052
  HEAP32[$31 >> 2] = 5; //@line 26053
  _mbed_tracef(16, 10996, 11082, $31); //@line 26054
  return;
 }
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $18 = 0, $27 = 0, $32 = 0, $33 = 0, $6 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 18456
 $6 = $0 + 344 | 0; //@line 18457
 _mbedtls_cipher_init($6); //@line 18458
 $7 = _mbedtls_cipher_info_from_type(2) | 0; //@line 18459
 if (!$7) {
  $$0 = -24960; //@line 18462
 } else {
  $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 18464
  $9 = _mbedtls_cipher_setup($6, $7) | 0; //@line 18465
  if (___async) {
   HEAP32[$AsyncCtx11 >> 2] = 489; //@line 18468
   HEAP32[$AsyncCtx11 + 4 >> 2] = $6; //@line 18470
   HEAP32[$AsyncCtx11 + 8 >> 2] = $3; //@line 18472
   HEAP32[$AsyncCtx11 + 12 >> 2] = $4; //@line 18474
   HEAP16[$AsyncCtx11 + 16 >> 1] = $2; //@line 18476
   HEAP32[$AsyncCtx11 + 20 >> 2] = $1; //@line 18478
   HEAP32[$AsyncCtx11 + 24 >> 2] = $0; //@line 18480
   HEAP32[$AsyncCtx11 + 28 >> 2] = $5; //@line 18482
   sp = STACKTOP; //@line 18483
   return 0; //@line 18484
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 18486
  if (!$9) {
   $AsyncCtx7 = _emscripten_alloc_async_context(24, sp) | 0; //@line 18489
   $18 = _mbedtls_cipher_cmac_starts($6, $3, $4) | 0; //@line 18490
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 490; //@line 18493
    HEAP16[$AsyncCtx7 + 4 >> 1] = $2; //@line 18495
    HEAP32[$AsyncCtx7 + 8 >> 2] = $6; //@line 18497
    HEAP32[$AsyncCtx7 + 12 >> 2] = $1; //@line 18499
    HEAP32[$AsyncCtx7 + 16 >> 2] = $0; //@line 18501
    HEAP32[$AsyncCtx7 + 20 >> 2] = $5; //@line 18503
    sp = STACKTOP; //@line 18504
    return 0; //@line 18505
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 18507
   if (!$18) {
    $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 18512
    $27 = _mbedtls_cipher_cmac_update($6, $1, $2 & 255) | 0; //@line 18513
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 491; //@line 18516
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 18518
     HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 18520
     HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 18522
     sp = STACKTOP; //@line 18523
     return 0; //@line 18524
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 18526
    if (!$27) {
     $32 = $0 + 16 | 0; //@line 18529
     $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 18530
     $33 = _mbedtls_cipher_cmac_finish($6, $32) | 0; //@line 18531
     if (___async) {
      HEAP32[$AsyncCtx3 >> 2] = 492; //@line 18534
      HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 18536
      HEAP32[$AsyncCtx3 + 8 >> 2] = $32; //@line 18538
      HEAP32[$AsyncCtx3 + 12 >> 2] = $5; //@line 18540
      HEAP32[$AsyncCtx3 + 16 >> 2] = $6; //@line 18542
      sp = STACKTOP; //@line 18543
      return 0; //@line 18544
     }
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 18546
     if (!$33) {
      HEAP32[$5 >> 2] = (HEAPU8[$0 + 18 >> 0] | 0) << 16 | (HEAPU8[$0 + 19 >> 0] | 0) << 24 | (HEAPU8[$0 + 17 >> 0] | 0) << 8 | (HEAPU8[$32 >> 0] | 0); //@line 18566
      $$0 = 0; //@line 18567
     } else {
      $$0 = $33; //@line 18569
     }
    } else {
     $$0 = $27; //@line 18572
    }
   } else {
    $$0 = $18; //@line 18575
   }
  } else {
   $$0 = $9; //@line 18578
  }
 }
 $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 18581
 _mbedtls_cipher_free($6); //@line 18582
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 493; //@line 18585
  HEAP32[$AsyncCtx15 + 4 >> 2] = $$0; //@line 18587
  sp = STACKTOP; //@line 18588
  return 0; //@line 18589
 } else {
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 18591
  return $$0 | 0; //@line 18592
 }
 return 0; //@line 18594
}
function __ZN12LoRaWANStack9handle_txEhPKhthbb($0, $1, $2, $3, $trunc, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $trunc = $trunc | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$1 = 0, $21 = 0, $22 = 0, $25 = 0, $29 = 0, $35 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10316
 STACKTOP = STACKTOP + 32 | 0; //@line 10317
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10317
 $vararg_buffer3 = sp + 16 | 0; //@line 10318
 $vararg_buffer1 = sp + 8 | 0; //@line 10319
 $vararg_buffer = sp; //@line 10320
 if (!(($2 | 0) != 0 | $4)) {
  $$1 = -1003; //@line 10324
  STACKTOP = sp; //@line 10325
  return $$1 | 0; //@line 10325
 }
 $7 = $0 + 2877 | 0; //@line 10327
 do {
  if (HEAP8[$7 >> 0] | 0) {
   HEAP8[$7 >> 0] = 1; //@line 10332
   if (!(HEAP32[$0 + 2512 >> 2] | 0)) {
    _mbed_tracef(2, 12482, 12962, $vararg_buffer); //@line 10337
    break;
   } else {
    __ZN7LoRaMac24setup_link_check_requestEv($0); //@line 10340
    break;
   }
  }
 } while (0);
 if (!(HEAP8[$0 + 2532 >> 0] | 0)) {
  $$1 = -1017; //@line 10349
  STACKTOP = sp; //@line 10350
  return $$1 | 0; //@line 10350
 }
 if (__ZN7LoRaMac10tx_ongoingEv($0) | 0) {
  $$1 = -1001; //@line 10354
  STACKTOP = sp; //@line 10355
  return $$1 | 0; //@line 10355
 }
 if (!(__ZN7LoRaMac10nwk_joinedEv($0) | 0)) {
  $$1 = -1009; //@line 10359
  STACKTOP = sp; //@line 10360
  return $$1 | 0; //@line 10360
 }
 if (!($1 << 24 >> 24 != 0 | $5)) {
  _mbed_tracef(2, 12482, 13019, $vararg_buffer1); //@line 10365
  $$1 = -1015; //@line 10366
  STACKTOP = sp; //@line 10367
  return $$1 | 0; //@line 10367
 }
 HEAP8[$0 + 2876 >> 0] = $1; //@line 10370
 switch ($trunc & 15) {
 case 8:
 case 2:
 case 1:
  {
   break;
  }
 default:
  {
   _mbed_tracef(2, 12482, 13056, $vararg_buffer3); //@line 10377
   $$1 = -1003; //@line 10378
   STACKTOP = sp; //@line 10379
   return $$1 | 0; //@line 10379
  }
 }
 $21 = HEAP8[$0 + 2868 >> 0] | 0; //@line 10383
 $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10384
 $22 = __ZN7LoRaMac18prepare_ongoing_txEhPKhthh($0, $1, $2, $3, $trunc, $21) | 0; //@line 10385
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 346; //@line 10388
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 10390
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 10392
  sp = STACKTOP; //@line 10393
  STACKTOP = sp; //@line 10394
  return 0; //@line 10394
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 10396
 $25 = $0 + 2480 | 0; //@line 10397
 switch (HEAP32[$25 >> 2] | 0) {
 case 5:
 case 2:
  {
   label = 17; //@line 10401
   break;
  }
 default:
  {
   if ((__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2) {
    label = 17; //@line 10408
   } else {
    $$0 = -1e3; //@line 10410
   }
  }
 }
 if ((label | 0) == 17) {
  $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 10415
  $29 = __ZN7LoRaMac15send_ongoing_txEv($0) | 0; //@line 10416
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 347; //@line 10419
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 10421
   HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 10423
   HEAP32[$AsyncCtx + 12 >> 2] = $25; //@line 10425
   HEAP16[$AsyncCtx + 16 >> 1] = $22; //@line 10427
   sp = STACKTOP; //@line 10428
   STACKTOP = sp; //@line 10429
   return 0; //@line 10429
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10431
  if (!$29) {
   $35 = $0 + 2872 | 0; //@line 10434
   HEAP32[$35 >> 2] = HEAP32[$35 >> 2] & -18 | 1; //@line 10438
   __ZN7LoRaMac14set_tx_ongoingEb($0, 1); //@line 10439
   HEAP32[$25 >> 2] = 8; //@line 10440
   $$0 = 0; //@line 10441
  } else {
   $$0 = $29; //@line 10443
  }
 }
 $$1 = ($$0 | 0) == 0 ? $22 : $$0 & 65535; //@line 10449
 STACKTOP = sp; //@line 10450
 return $$1 | 0; //@line 10450
}
function _mbedtls_ccm_free($0) {
 $0 = $0 | 0;
 var $13 = 0, $17 = 0, $21 = 0, $25 = 0, $29 = 0, $33 = 0, $37 = 0, $41 = 0, $45 = 0, $49 = 0, $5 = 0, $53 = 0, $57 = 0, $61 = 0, $65 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2485
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2486
 _mbedtls_cipher_free($0); //@line 2487
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 555; //@line 2490
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2492
  sp = STACKTOP; //@line 2493
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2496
  HEAP8[$0 >> 0] = 0; //@line 2498
  HEAP8[$0 + 1 >> 0] = 0; //@line 2500
  HEAP8[$0 + 2 >> 0] = 0; //@line 2502
  $5 = $0 + 4 | 0; //@line 2503
  HEAP8[$0 + 3 >> 0] = 0; //@line 2504
  HEAP8[$5 >> 0] = 0; //@line 2506
  HEAP8[$5 + 1 >> 0] = 0; //@line 2508
  HEAP8[$5 + 2 >> 0] = 0; //@line 2510
  $9 = $5 + 4 | 0; //@line 2511
  HEAP8[$5 + 3 >> 0] = 0; //@line 2512
  HEAP8[$9 >> 0] = 0; //@line 2514
  HEAP8[$9 + 1 >> 0] = 0; //@line 2516
  HEAP8[$9 + 2 >> 0] = 0; //@line 2518
  $13 = $5 + 8 | 0; //@line 2519
  HEAP8[$9 + 3 >> 0] = 0; //@line 2520
  HEAP8[$13 >> 0] = 0; //@line 2522
  HEAP8[$13 + 1 >> 0] = 0; //@line 2524
  HEAP8[$13 + 2 >> 0] = 0; //@line 2526
  $17 = $5 + 12 | 0; //@line 2527
  HEAP8[$13 + 3 >> 0] = 0; //@line 2528
  HEAP8[$17 >> 0] = 0; //@line 2530
  HEAP8[$17 + 1 >> 0] = 0; //@line 2532
  HEAP8[$17 + 2 >> 0] = 0; //@line 2534
  $21 = $5 + 16 | 0; //@line 2535
  HEAP8[$17 + 3 >> 0] = 0; //@line 2536
  HEAP8[$21 >> 0] = 0; //@line 2538
  HEAP8[$21 + 1 >> 0] = 0; //@line 2540
  HEAP8[$21 + 2 >> 0] = 0; //@line 2542
  $25 = $5 + 20 | 0; //@line 2543
  HEAP8[$21 + 3 >> 0] = 0; //@line 2544
  HEAP8[$25 >> 0] = 0; //@line 2546
  HEAP8[$25 + 1 >> 0] = 0; //@line 2548
  HEAP8[$25 + 2 >> 0] = 0; //@line 2550
  $29 = $5 + 24 | 0; //@line 2551
  HEAP8[$25 + 3 >> 0] = 0; //@line 2552
  HEAP8[$29 >> 0] = 0; //@line 2554
  HEAP8[$29 + 1 >> 0] = 0; //@line 2556
  HEAP8[$29 + 2 >> 0] = 0; //@line 2558
  $33 = $5 + 28 | 0; //@line 2559
  HEAP8[$29 + 3 >> 0] = 0; //@line 2560
  HEAP8[$33 >> 0] = 0; //@line 2562
  HEAP8[$33 + 1 >> 0] = 0; //@line 2564
  HEAP8[$33 + 2 >> 0] = 0; //@line 2566
  $37 = $5 + 32 | 0; //@line 2567
  HEAP8[$33 + 3 >> 0] = 0; //@line 2568
  HEAP8[$37 >> 0] = 0; //@line 2570
  HEAP8[$37 + 1 >> 0] = 0; //@line 2572
  HEAP8[$37 + 2 >> 0] = 0; //@line 2574
  $41 = $5 + 36 | 0; //@line 2575
  HEAP8[$37 + 3 >> 0] = 0; //@line 2576
  HEAP8[$41 >> 0] = 0; //@line 2578
  HEAP8[$41 + 1 >> 0] = 0; //@line 2580
  HEAP8[$41 + 2 >> 0] = 0; //@line 2582
  $45 = $5 + 40 | 0; //@line 2583
  HEAP8[$41 + 3 >> 0] = 0; //@line 2584
  HEAP8[$45 >> 0] = 0; //@line 2586
  HEAP8[$45 + 1 >> 0] = 0; //@line 2588
  HEAP8[$45 + 2 >> 0] = 0; //@line 2590
  $49 = $5 + 44 | 0; //@line 2591
  HEAP8[$45 + 3 >> 0] = 0; //@line 2592
  HEAP8[$49 >> 0] = 0; //@line 2594
  HEAP8[$49 + 1 >> 0] = 0; //@line 2596
  HEAP8[$49 + 2 >> 0] = 0; //@line 2598
  $53 = $5 + 48 | 0; //@line 2599
  HEAP8[$49 + 3 >> 0] = 0; //@line 2600
  HEAP8[$53 >> 0] = 0; //@line 2602
  HEAP8[$53 + 1 >> 0] = 0; //@line 2604
  HEAP8[$53 + 2 >> 0] = 0; //@line 2606
  $57 = $5 + 52 | 0; //@line 2607
  HEAP8[$53 + 3 >> 0] = 0; //@line 2608
  HEAP8[$57 >> 0] = 0; //@line 2610
  HEAP8[$57 + 1 >> 0] = 0; //@line 2612
  HEAP8[$57 + 2 >> 0] = 0; //@line 2614
  $61 = $5 + 56 | 0; //@line 2615
  HEAP8[$57 + 3 >> 0] = 0; //@line 2616
  HEAP8[$61 >> 0] = 0; //@line 2618
  HEAP8[$61 + 1 >> 0] = 0; //@line 2620
  HEAP8[$61 + 2 >> 0] = 0; //@line 2622
  $65 = $5 + 60 | 0; //@line 2623
  HEAP8[$61 + 3 >> 0] = 0; //@line 2624
  HEAP8[$65 >> 0] = 0; //@line 2626
  HEAP8[$65 + 1 >> 0] = 0; //@line 2628
  HEAP8[$65 + 2 >> 0] = 0; //@line 2630
  HEAP8[$65 + 3 >> 0] = 0; //@line 2631
  return;
 }
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_340($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 26037
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26039
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26041
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26043
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26045
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26047
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26049
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26051
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26053
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) >> 0] | 0) {
  __ZN7LoRaMac21post_process_mcps_indEv($2); //@line 26058
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 26061
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 26062
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 26063
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 279; //@line 26066
   $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 26067
   HEAP32[$22 >> 2] = $4; //@line 26068
   $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 26069
   HEAP32[$23 >> 2] = $2; //@line 26070
   $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 26071
   HEAP32[$24 >> 2] = $8; //@line 26072
   $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 26073
   HEAP32[$25 >> 2] = $6; //@line 26074
   $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 26075
   HEAP32[$26 >> 2] = $10; //@line 26076
   $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 26077
   HEAP32[$27 >> 2] = $12; //@line 26078
   $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 26079
   HEAP32[$28 >> 2] = $14; //@line 26080
   $29 = $ReallocAsyncCtx4 + 32 | 0; //@line 26081
   HEAP32[$29 >> 2] = $16; //@line 26082
   sp = STACKTOP; //@line 26083
   return;
  }
  ___async_unwind = 0; //@line 26086
  HEAP32[$ReallocAsyncCtx4 >> 2] = 279; //@line 26087
  $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 26088
  HEAP32[$22 >> 2] = $4; //@line 26089
  $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 26090
  HEAP32[$23 >> 2] = $2; //@line 26091
  $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 26092
  HEAP32[$24 >> 2] = $8; //@line 26093
  $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 26094
  HEAP32[$25 >> 2] = $6; //@line 26095
  $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 26096
  HEAP32[$26 >> 2] = $10; //@line 26097
  $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 26098
  HEAP32[$27 >> 2] = $12; //@line 26099
  $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 26100
  HEAP32[$28 >> 2] = $14; //@line 26101
  $29 = $ReallocAsyncCtx4 + 32 | 0; //@line 26102
  HEAP32[$29 >> 2] = $16; //@line 26103
  sp = STACKTOP; //@line 26104
  return;
 }
 if (!(HEAP32[$4 >> 2] & 1)) {
  $34 = (__ZNK7LoRaMac16get_device_classEv($2) | 0) == 2; //@line 26112
  HEAP32[$8 >> 2] = $34 ? 5 : 2; //@line 26114
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($2) | 0) + 4 >> 0] | 0)) {
  HEAP8[$6 + 2879 >> 0] = 1; //@line 26122
  return;
 }
 _mbed_tracef(16, 12482, 12667, $10); //@line 26125
 __ZN7LoRaMac21post_process_mlme_indEv($2); //@line 26126
 _mbed_tracef(16, 12482, 12691, $14); //@line 26127
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 26128
 __ZN12LoRaWANStack23mlme_indication_handlerEv($6); //@line 26129
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 280; //@line 26132
  $39 = $ReallocAsyncCtx2 + 4 | 0; //@line 26133
  HEAP32[$39 >> 2] = $6; //@line 26134
  sp = STACKTOP; //@line 26135
  return;
 }
 ___async_unwind = 0; //@line 26138
 HEAP32[$ReallocAsyncCtx2 >> 2] = 280; //@line 26139
 $39 = $ReallocAsyncCtx2 + 4 | 0; //@line 26140
 HEAP32[$39 >> 2] = $6; //@line 26141
 sp = STACKTOP; //@line 26142
 return;
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_339($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 25924
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25926
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25928
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25930
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25932
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25934
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25936
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25938
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 25940
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) >> 0] | 0) {
  __ZN7LoRaMac21post_process_mcps_indEv($2); //@line 25945
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 25948
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 25949
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 25950
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 279; //@line 25953
   $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 25954
   HEAP32[$22 >> 2] = $4; //@line 25955
   $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 25956
   HEAP32[$23 >> 2] = $2; //@line 25957
   $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 25958
   HEAP32[$24 >> 2] = $8; //@line 25959
   $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 25960
   HEAP32[$25 >> 2] = $6; //@line 25961
   $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 25962
   HEAP32[$26 >> 2] = $10; //@line 25963
   $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 25964
   HEAP32[$27 >> 2] = $12; //@line 25965
   $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 25966
   HEAP32[$28 >> 2] = $14; //@line 25967
   $29 = $ReallocAsyncCtx4 + 32 | 0; //@line 25968
   HEAP32[$29 >> 2] = $16; //@line 25969
   sp = STACKTOP; //@line 25970
   return;
  }
  ___async_unwind = 0; //@line 25973
  HEAP32[$ReallocAsyncCtx4 >> 2] = 279; //@line 25974
  $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 25975
  HEAP32[$22 >> 2] = $4; //@line 25976
  $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 25977
  HEAP32[$23 >> 2] = $2; //@line 25978
  $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 25979
  HEAP32[$24 >> 2] = $8; //@line 25980
  $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 25981
  HEAP32[$25 >> 2] = $6; //@line 25982
  $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 25983
  HEAP32[$26 >> 2] = $10; //@line 25984
  $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 25985
  HEAP32[$27 >> 2] = $12; //@line 25986
  $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 25987
  HEAP32[$28 >> 2] = $14; //@line 25988
  $29 = $ReallocAsyncCtx4 + 32 | 0; //@line 25989
  HEAP32[$29 >> 2] = $16; //@line 25990
  sp = STACKTOP; //@line 25991
  return;
 }
 if (!(HEAP32[$4 >> 2] & 1)) {
  $34 = (__ZNK7LoRaMac16get_device_classEv($2) | 0) == 2; //@line 25999
  HEAP32[$8 >> 2] = $34 ? 5 : 2; //@line 26001
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($2) | 0) + 4 >> 0] | 0)) {
  HEAP8[$6 + 2879 >> 0] = 1; //@line 26009
  return;
 }
 _mbed_tracef(16, 12482, 12667, $10); //@line 26012
 __ZN7LoRaMac21post_process_mlme_indEv($2); //@line 26013
 _mbed_tracef(16, 12482, 12691, $14); //@line 26014
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 26015
 __ZN12LoRaWANStack23mlme_indication_handlerEv($6); //@line 26016
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 280; //@line 26019
  $39 = $ReallocAsyncCtx2 + 4 | 0; //@line 26020
  HEAP32[$39 >> 2] = $6; //@line 26021
  sp = STACKTOP; //@line 26022
  return;
 }
 ___async_unwind = 0; //@line 26025
 HEAP32[$ReallocAsyncCtx2 >> 2] = 280; //@line 26026
 $39 = $ReallocAsyncCtx2 + 4 | 0; //@line 26027
 HEAP32[$39 >> 2] = $6; //@line 26028
 sp = STACKTOP; //@line 26029
 return;
}
function __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $13 = 0, $17 = 0, $18 = 0, $19 = 0, $22 = 0, $27 = 0, $31 = 0, $35 = 0, $46 = 0, $52 = 0, $69 = 0, $70 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 12829
 $13 = HEAP8[$1 + ($3 + 8 & 255) >> 0] | 0; //@line 12833
 $17 = $3 + 9 & 255; //@line 12837
 $18 = ($2 & 65535) + 252 - $17 | 0; //@line 12838
 $19 = $18 & 255; //@line 12839
 HEAP8[$0 + 2009 >> 0] = $13; //@line 12841
 $22 = $3 << 24 >> 24 == 0; //@line 12843
 if ($13 << 24 >> 24) {
  do {
   if (!$22) {
    $46 = $0 + 476 | 0; //@line 12847
    $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 12853
    $52 = __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($46, $1, 8, $17 + 255 & 255, $9, $0 + 2068 | 0, $0 + 1876 | 0, $0 + 4 | 0) | 0; //@line 12854
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 388; //@line 12857
     HEAP32[$AsyncCtx + 4 >> 2] = $46; //@line 12859
     HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 12861
     HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 12863
     HEAP32[$AsyncCtx + 16 >> 2] = $17; //@line 12865
     HEAP32[$AsyncCtx + 20 >> 2] = $18; //@line 12867
     HEAP32[$AsyncCtx + 24 >> 2] = $5; //@line 12869
     HEAP32[$AsyncCtx + 28 >> 2] = $6; //@line 12871
     HEAP32[$AsyncCtx + 32 >> 2] = $7; //@line 12873
     sp = STACKTOP; //@line 12874
     return;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 12877
    if (!$52) {
     if (!(__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($46) | 0)) {
      break;
     }
     HEAP32[$0 + 2060 >> 2] = 4; //@line 12885
     HEAP8[$0 + 2064 >> 0] = 1; //@line 12887
     __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($46); //@line 12888
     break;
    } else {
     HEAP32[$0 + 2004 >> 2] = 1; //@line 12892
     return;
    }
   }
  } while (0);
  $69 = $18 & 255; //@line 12900
  $70 = $0 + 1442 | 0; //@line 12901
  if (!(__ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh($0 + 756 | 0, $1 + $17 | 0, $69, $5, 128, $6, 1, $7, $70) | 0)) {
   HEAP32[$0 + 2012 >> 2] = $70; //@line 12906
   HEAP16[$0 + 2016 >> 1] = $69; //@line 12908
   HEAP8[$0 + 2018 >> 0] = 1; //@line 12910
   return;
  } else {
   HEAP32[$0 + 2004 >> 2] = 13; //@line 12914
   return;
  }
 }
 if (!$22) {
  HEAP8[$0 + 1996 >> 0] = 0; //@line 12920
  HEAP8[$0 + 2046 >> 0] = 0; //@line 12922
  HEAP8[$0 + 2028 >> 0] = 0; //@line 12924
  return;
 }
 $27 = $0 + 1442 | 0; //@line 12931
 if (__ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh($0 + 756 | 0, $1 + $17 | 0, $18 & 255, $4, 128, $6, 1, $7, $27) | 0) {
  HEAP32[$0 + 2004 >> 2] = 13; //@line 12936
 }
 $31 = $0 + 476 | 0; //@line 12938
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12942
 $35 = __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($31, $27, 0, $19, $9, $0 + 2068 | 0, $0 + 1876 | 0, $0 + 4 | 0) | 0; //@line 12943
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 387; //@line 12946
  HEAP32[$AsyncCtx3 + 4 >> 2] = $31; //@line 12948
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 12950
  sp = STACKTOP; //@line 12951
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12954
 if ($35 | 0) {
  HEAP32[$0 + 2004 >> 2] = 1; //@line 12958
  return;
 }
 if (!(__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($31) | 0)) {
  return;
 }
 HEAP32[$0 + 2060 >> 2] = 4; //@line 12966
 HEAP8[$0 + 2064 >> 0] = 1; //@line 12968
 __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($31); //@line 12969
 return;
}
function _vfprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $13 = 0, $14 = 0, $19 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $43 = 0, $5 = 0, $51 = 0, $6 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 12157
 STACKTOP = STACKTOP + 224 | 0; //@line 12158
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 12158
 $3 = sp + 120 | 0; //@line 12159
 $4 = sp + 80 | 0; //@line 12160
 $5 = sp; //@line 12161
 $6 = sp + 136 | 0; //@line 12162
 dest = $4; //@line 12163
 stop = dest + 40 | 0; //@line 12163
 do {
  HEAP32[dest >> 2] = 0; //@line 12163
  dest = dest + 4 | 0; //@line 12163
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 12165
 if ((_printf_core(0, $1, $3, $5, $4) | 0) < 0) {
  $$0 = -1; //@line 12169
 } else {
  if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
   $43 = ___lockfile($0) | 0; //@line 12176
  } else {
   $43 = 0; //@line 12178
  }
  $13 = HEAP32[$0 >> 2] | 0; //@line 12180
  $14 = $13 & 32; //@line 12181
  if ((HEAP8[$0 + 74 >> 0] | 0) < 1) {
   HEAP32[$0 >> 2] = $13 & -33; //@line 12187
  }
  $19 = $0 + 48 | 0; //@line 12189
  do {
   if (!(HEAP32[$19 >> 2] | 0)) {
    $23 = $0 + 44 | 0; //@line 12194
    $24 = HEAP32[$23 >> 2] | 0; //@line 12195
    HEAP32[$23 >> 2] = $6; //@line 12196
    $25 = $0 + 28 | 0; //@line 12197
    HEAP32[$25 >> 2] = $6; //@line 12198
    $26 = $0 + 20 | 0; //@line 12199
    HEAP32[$26 >> 2] = $6; //@line 12200
    HEAP32[$19 >> 2] = 80; //@line 12201
    $28 = $0 + 16 | 0; //@line 12203
    HEAP32[$28 >> 2] = $6 + 80; //@line 12204
    $29 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 12205
    if (!$24) {
     $$1 = $29; //@line 12208
    } else {
     $32 = HEAP32[$0 + 36 >> 2] | 0; //@line 12211
     $AsyncCtx = _emscripten_alloc_async_context(64, sp) | 0; //@line 12212
     FUNCTION_TABLE_iiii[$32 & 31]($0, 0, 0) | 0; //@line 12213
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 642; //@line 12216
      HEAP32[$AsyncCtx + 4 >> 2] = $26; //@line 12218
      HEAP32[$AsyncCtx + 8 >> 2] = $29; //@line 12220
      HEAP32[$AsyncCtx + 12 >> 2] = $24; //@line 12222
      HEAP32[$AsyncCtx + 16 >> 2] = $23; //@line 12224
      HEAP32[$AsyncCtx + 20 >> 2] = $19; //@line 12226
      HEAP32[$AsyncCtx + 24 >> 2] = $28; //@line 12228
      HEAP32[$AsyncCtx + 28 >> 2] = $25; //@line 12230
      HEAP32[$AsyncCtx + 32 >> 2] = $0; //@line 12232
      HEAP32[$AsyncCtx + 36 >> 2] = $14; //@line 12234
      HEAP32[$AsyncCtx + 40 >> 2] = $43; //@line 12236
      HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 12238
      HEAP32[$AsyncCtx + 48 >> 2] = $6; //@line 12240
      HEAP32[$AsyncCtx + 52 >> 2] = $5; //@line 12242
      HEAP32[$AsyncCtx + 56 >> 2] = $4; //@line 12244
      HEAP32[$AsyncCtx + 60 >> 2] = $3; //@line 12246
      sp = STACKTOP; //@line 12247
      STACKTOP = sp; //@line 12248
      return 0; //@line 12248
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 12250
      $$ = (HEAP32[$26 >> 2] | 0) == 0 ? -1 : $29; //@line 12253
      HEAP32[$23 >> 2] = $24; //@line 12254
      HEAP32[$19 >> 2] = 0; //@line 12255
      HEAP32[$28 >> 2] = 0; //@line 12256
      HEAP32[$25 >> 2] = 0; //@line 12257
      HEAP32[$26 >> 2] = 0; //@line 12258
      $$1 = $$; //@line 12259
      break;
     }
    }
   } else {
    $$1 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 12265
   }
  } while (0);
  $51 = HEAP32[$0 >> 2] | 0; //@line 12268
  HEAP32[$0 >> 2] = $51 | $14; //@line 12273
  if ($43 | 0) {
   ___unlockfile($0); //@line 12276
  }
  $$0 = ($51 & 32 | 0) == 0 ? $$1 : -1; //@line 12278
 }
 STACKTOP = sp; //@line 12280
 return $$0 | 0; //@line 12280
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_241($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 5673
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5677
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5679
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5681
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5683
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5685
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 5687
 $15 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 5688
 if (!$15) {
  $25 = $6 + 12 | 0; //@line 5692
  HEAP32[$6 >> 2] = 389; //@line 5693
  HEAP32[$6 + 4 >> 2] = 0; //@line 5695
  HEAP32[$6 + 8 >> 2] = $4; //@line 5697
  HEAP32[$25 >> 2] = 844; //@line 5698
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 5699
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($8, $4 + 1856 | 0, $6); //@line 5700
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 459; //@line 5703
   $26 = $ReallocAsyncCtx5 + 4 | 0; //@line 5704
   HEAP32[$26 >> 2] = $25; //@line 5705
   $27 = $ReallocAsyncCtx5 + 8 | 0; //@line 5706
   HEAP32[$27 >> 2] = $8; //@line 5707
   $28 = $ReallocAsyncCtx5 + 12 | 0; //@line 5708
   HEAP32[$28 >> 2] = $4; //@line 5709
   $29 = $ReallocAsyncCtx5 + 16 | 0; //@line 5710
   HEAP32[$29 >> 2] = $12; //@line 5711
   $30 = $ReallocAsyncCtx5 + 20 | 0; //@line 5712
   HEAP32[$30 >> 2] = $14; //@line 5713
   $31 = $ReallocAsyncCtx5 + 24 | 0; //@line 5714
   HEAP32[$31 >> 2] = $6; //@line 5715
   sp = STACKTOP; //@line 5716
   return;
  }
  ___async_unwind = 0; //@line 5719
  HEAP32[$ReallocAsyncCtx5 >> 2] = 459; //@line 5720
  $26 = $ReallocAsyncCtx5 + 4 | 0; //@line 5721
  HEAP32[$26 >> 2] = $25; //@line 5722
  $27 = $ReallocAsyncCtx5 + 8 | 0; //@line 5723
  HEAP32[$27 >> 2] = $8; //@line 5724
  $28 = $ReallocAsyncCtx5 + 12 | 0; //@line 5725
  HEAP32[$28 >> 2] = $4; //@line 5726
  $29 = $ReallocAsyncCtx5 + 16 | 0; //@line 5727
  HEAP32[$29 >> 2] = $12; //@line 5728
  $30 = $ReallocAsyncCtx5 + 20 | 0; //@line 5729
  HEAP32[$30 >> 2] = $14; //@line 5730
  $31 = $ReallocAsyncCtx5 + 24 | 0; //@line 5731
  HEAP32[$31 >> 2] = $6; //@line 5732
  sp = STACKTOP; //@line 5733
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 5737
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 5738
  FUNCTION_TABLE_vi[$18 & 1023]($10); //@line 5739
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 458; //@line 5742
   $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 5743
   HEAP32[$19 >> 2] = $4; //@line 5744
   $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 5745
   HEAP32[$20 >> 2] = $6; //@line 5746
   $21 = $ReallocAsyncCtx3 + 12 | 0; //@line 5747
   HEAP32[$21 >> 2] = $8; //@line 5748
   $22 = $ReallocAsyncCtx3 + 16 | 0; //@line 5749
   HEAP32[$22 >> 2] = $12; //@line 5750
   $23 = $ReallocAsyncCtx3 + 20 | 0; //@line 5751
   HEAP32[$23 >> 2] = $14; //@line 5752
   sp = STACKTOP; //@line 5753
   return;
  }
  ___async_unwind = 0; //@line 5756
  HEAP32[$ReallocAsyncCtx3 >> 2] = 458; //@line 5757
  $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 5758
  HEAP32[$19 >> 2] = $4; //@line 5759
  $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 5760
  HEAP32[$20 >> 2] = $6; //@line 5761
  $21 = $ReallocAsyncCtx3 + 12 | 0; //@line 5762
  HEAP32[$21 >> 2] = $8; //@line 5763
  $22 = $ReallocAsyncCtx3 + 16 | 0; //@line 5764
  HEAP32[$22 >> 2] = $12; //@line 5765
  $23 = $ReallocAsyncCtx3 + 20 | 0; //@line 5766
  HEAP32[$23 >> 2] = $14; //@line 5767
  sp = STACKTOP; //@line 5768
  return;
 }
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_49($0) {
 $0 = $0 | 0;
 var $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $29 = 0, $32 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 21204
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21210
 $14 = HEAP8[$0 + 19 >> 0] | 0; //@line 21220
 $16 = HEAP32[$0 + 20 >> 2] | 0; //@line 21222
 $18 = HEAP32[$0 + 24 >> 2] | 0; //@line 21224
 $20 = HEAP32[$0 + 28 >> 2] | 0; //@line 21226
 $22 = HEAP32[$0 + 32 >> 2] | 0; //@line 21228
 $29 = HEAP32[$6 >> 2] | 0; //@line 21235
 $32 = HEAP32[(HEAP32[$29 >> 2] | 0) + 20 >> 2] | 0; //@line 21238
 $34 = HEAP8[$0 + 17 >> 0] & 1 ? 2 : HEAP8[$0 + 16 >> 0] & 1; //@line 21240
 $35 = HEAP8[$0 + 18 >> 0] | 0; //@line 21241
 if ((HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) == (HEAPU8[(HEAP32[$0 + 8 >> 2] | 0) + 27 >> 0] | 0)) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 21244
  FUNCTION_TABLE_viiiiiiiiiiiiii[$32 & 1]($29, 0, $14, 25e3, $34, $35 * 1e3 | 0, 0, 5, 0, 1, 0, 0, 0, 3e3); //@line 21245
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 511; //@line 21248
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 21249
   HEAP32[$37 >> 2] = $6; //@line 21250
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 21251
   HEAP32[$38 >> 2] = $16; //@line 21252
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 21253
   HEAP32[$39 >> 2] = $18; //@line 21254
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 21255
   HEAP32[$40 >> 2] = $20; //@line 21256
   $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 21257
   HEAP32[$41 >> 2] = $22; //@line 21258
   sp = STACKTOP; //@line 21259
   return;
  }
  ___async_unwind = 0; //@line 21262
  HEAP32[$ReallocAsyncCtx3 >> 2] = 511; //@line 21263
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 21264
  HEAP32[$37 >> 2] = $6; //@line 21265
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 21266
  HEAP32[$38 >> 2] = $16; //@line 21267
  $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 21268
  HEAP32[$39 >> 2] = $18; //@line 21269
  $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 21270
  HEAP32[$40 >> 2] = $20; //@line 21271
  $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 21272
  HEAP32[$41 >> 2] = $22; //@line 21273
  sp = STACKTOP; //@line 21274
  return;
 } else {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 21277
  FUNCTION_TABLE_viiiiiiiiiiiiii[$32 & 1]($29, 1, $14, 0, $34, $35, 1, 8, 0, 1, 0, 0, 0, 3e3); //@line 21278
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 512; //@line 21281
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 21282
   HEAP32[$42 >> 2] = $6; //@line 21283
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 21284
   HEAP32[$43 >> 2] = $16; //@line 21285
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 21286
   HEAP32[$44 >> 2] = $18; //@line 21287
   $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 21288
   HEAP32[$45 >> 2] = $20; //@line 21289
   $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 21290
   HEAP32[$46 >> 2] = $22; //@line 21291
   sp = STACKTOP; //@line 21292
   return;
  }
  ___async_unwind = 0; //@line 21295
  HEAP32[$ReallocAsyncCtx4 >> 2] = 512; //@line 21296
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 21297
  HEAP32[$42 >> 2] = $6; //@line 21298
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 21299
  HEAP32[$43 >> 2] = $16; //@line 21300
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 21301
  HEAP32[$44 >> 2] = $18; //@line 21302
  $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 21303
  HEAP32[$45 >> 2] = $20; //@line 21304
  $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 21305
  HEAP32[$46 >> 2] = $22; //@line 21306
  sp = STACKTOP; //@line 21307
  return;
 }
}
function ___dynamic_cast($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $24 = 0, $30 = 0, $33 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 16369
 STACKTOP = STACKTOP + 64 | 0; //@line 16370
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 16370
 $4 = sp; //@line 16371
 $5 = HEAP32[$0 >> 2] | 0; //@line 16372
 $8 = $0 + (HEAP32[$5 + -8 >> 2] | 0) | 0; //@line 16375
 $10 = HEAP32[$5 + -4 >> 2] | 0; //@line 16377
 HEAP32[$4 >> 2] = $2; //@line 16378
 HEAP32[$4 + 4 >> 2] = $0; //@line 16380
 HEAP32[$4 + 8 >> 2] = $1; //@line 16382
 HEAP32[$4 + 12 >> 2] = $3; //@line 16384
 $14 = $4 + 16 | 0; //@line 16385
 $15 = $4 + 20 | 0; //@line 16386
 $16 = $4 + 24 | 0; //@line 16387
 $17 = $4 + 28 | 0; //@line 16388
 $18 = $4 + 32 | 0; //@line 16389
 $19 = $4 + 40 | 0; //@line 16390
 dest = $14; //@line 16391
 stop = dest + 36 | 0; //@line 16391
 do {
  HEAP32[dest >> 2] = 0; //@line 16391
  dest = dest + 4 | 0; //@line 16391
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 36 >> 1] = 0; //@line 16391
 HEAP8[$14 + 38 >> 0] = 0; //@line 16391
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10, $2, 0) | 0) {
   HEAP32[$4 + 48 >> 2] = 1; //@line 16396
   $24 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 16399
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 16400
   FUNCTION_TABLE_viiiiii[$24 & 3]($10, $4, $8, $8, 1, 0); //@line 16401
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 654; //@line 16404
    HEAP32[$AsyncCtx + 4 >> 2] = $16; //@line 16406
    HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 16408
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 16410
    sp = STACKTOP; //@line 16411
    STACKTOP = sp; //@line 16412
    return 0; //@line 16412
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16414
    $$0 = (HEAP32[$16 >> 2] | 0) == 1 ? $8 : 0; //@line 16418
    break;
   }
  } else {
   $30 = $4 + 36 | 0; //@line 16422
   $33 = HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] | 0; //@line 16425
   $AsyncCtx3 = _emscripten_alloc_async_context(36, sp) | 0; //@line 16426
   FUNCTION_TABLE_viiiii[$33 & 7]($10, $4, $8, 1, 0); //@line 16427
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 655; //@line 16430
    HEAP32[$AsyncCtx3 + 4 >> 2] = $30; //@line 16432
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 16434
    HEAP32[$AsyncCtx3 + 12 >> 2] = $19; //@line 16436
    HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 16438
    HEAP32[$AsyncCtx3 + 20 >> 2] = $18; //@line 16440
    HEAP32[$AsyncCtx3 + 24 >> 2] = $15; //@line 16442
    HEAP32[$AsyncCtx3 + 28 >> 2] = $16; //@line 16444
    HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 16446
    sp = STACKTOP; //@line 16447
    STACKTOP = sp; //@line 16448
    return 0; //@line 16448
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16450
   switch (HEAP32[$30 >> 2] | 0) {
   case 0:
    {
     $$0 = (HEAP32[$19 >> 2] | 0) == 1 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1 ? HEAP32[$15 >> 2] | 0 : 0; //@line 16464
     break L1;
     break;
    }
   case 1:
    {
     break;
    }
   default:
    {
     $$0 = 0; //@line 16472
     break L1;
    }
   }
   if ((HEAP32[$16 >> 2] | 0) != 1) {
    if (!((HEAP32[$19 >> 2] | 0) == 0 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1)) {
     $$0 = 0; //@line 16488
     break;
    }
   }
   $$0 = HEAP32[$14 >> 2] | 0; //@line 16493
  }
 } while (0);
 STACKTOP = sp; //@line 16496
 return $$0 | 0; //@line 16496
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_20($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $31 = 0, $33 = 0, $4 = 0, $41 = 0, $43 = 0, $48 = 0, $52 = 0, $55 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 19493
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19495
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19497
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19499
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19501
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19503
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19505
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19507
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19509
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19511
 $20 = HEAP8[$0 + 40 >> 0] | 0; //@line 19513
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 19515
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 19517
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($22) | 0) {
   HEAP32[$2 + 2060 >> 2] = 4; //@line 19525
   HEAP8[$2 + 2064 >> 0] = 1; //@line 19527
   __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($22); //@line 19528
  }
 } else {
  HEAP32[$14 >> 2] = 1; //@line 19531
 }
 if ($20 << 24 >> 24 == 7) {
  $31 = $2 + 1442 | 0; //@line 19535
  $33 = HEAPU8[$8 >> 0] | 0; //@line 19537
  _memcpy($31 | 0, $10 + $33 | 0, $12 | 0) | 0; //@line 19539
  HEAP32[$2 + 2e3 >> 2] = 3; //@line 19541
  HEAP32[$14 >> 2] = 0; //@line 19542
  HEAP32[$16 >> 2] = $31; //@line 19543
  HEAP16[$18 >> 1] = $12 - $33; //@line 19546
 }
 $41 = HEAP8[$2 + 1699 >> 0] | 0; //@line 19551
 $43 = HEAP8[$2 + 1698 >> 0] | 0; //@line 19553
 if (!(HEAP8[$6 >> 0] | 0)) {
  if ((HEAP32[$2 + 2364 >> 2] | 0) != 2) {
   return;
  }
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 19562
  __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1856 | 0); //@line 19563
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 401; //@line 19566
   $48 = $ReallocAsyncCtx10 + 4 | 0; //@line 19567
   HEAP32[$48 >> 2] = $24; //@line 19568
   sp = STACKTOP; //@line 19569
   return;
  }
  ___async_unwind = 0; //@line 19572
  HEAP32[$ReallocAsyncCtx10 >> 2] = 401; //@line 19573
  $48 = $ReallocAsyncCtx10 + 4 | 0; //@line 19574
  HEAP32[$48 >> 2] = $24; //@line 19575
  sp = STACKTOP; //@line 19576
  return;
 }
 if (HEAP8[$4 >> 0] | 0) {
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 19583
  __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1856 | 0); //@line 19584
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 402; //@line 19587
   $52 = $ReallocAsyncCtx9 + 4 | 0; //@line 19588
   HEAP32[$52 >> 2] = $24; //@line 19589
   sp = STACKTOP; //@line 19590
   return;
  }
  ___async_unwind = 0; //@line 19593
  HEAP32[$ReallocAsyncCtx9 >> 2] = 402; //@line 19594
  $52 = $ReallocAsyncCtx9 + 4 | 0; //@line 19595
  HEAP32[$52 >> 2] = $24; //@line 19596
  sp = STACKTOP; //@line 19597
  return;
 }
 if (($41 & 255) <= ($43 & 255)) {
  return;
 }
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 19605
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1856 | 0); //@line 19606
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 403; //@line 19609
  $55 = $ReallocAsyncCtx8 + 4 | 0; //@line 19610
  HEAP32[$55 >> 2] = $24; //@line 19611
  sp = STACKTOP; //@line 19612
  return;
 }
 ___async_unwind = 0; //@line 19615
 HEAP32[$ReallocAsyncCtx8 >> 2] = 403; //@line 19616
 $55 = $ReallocAsyncCtx8 + 4 | 0; //@line 19617
 HEAP32[$55 >> 2] = $24; //@line 19618
 sp = STACKTOP; //@line 19619
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_330($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $32 = 0, $35 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 24935
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24937
 $4 = HEAP32[$2 + 76 >> 2] | 0; //@line 24939
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 24944
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 24945
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 64 | 0); //@line 24946
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 159; //@line 24949
   $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 24950
   HEAP32[$9 >> 2] = $2; //@line 24951
   sp = STACKTOP; //@line 24952
   return;
  }
  ___async_unwind = 0; //@line 24955
  HEAP32[$ReallocAsyncCtx3 >> 2] = 159; //@line 24956
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 24957
  HEAP32[$9 >> 2] = $2; //@line 24958
  sp = STACKTOP; //@line 24959
  return;
 }
 $11 = HEAP32[$2 + 60 >> 2] | 0; //@line 24963
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 24968
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 24969
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 48 | 0); //@line 24970
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 160; //@line 24973
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 24974
   HEAP32[$16 >> 2] = $2; //@line 24975
   sp = STACKTOP; //@line 24976
   return;
  }
  ___async_unwind = 0; //@line 24979
  HEAP32[$ReallocAsyncCtx4 >> 2] = 160; //@line 24980
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 24981
  HEAP32[$16 >> 2] = $2; //@line 24982
  sp = STACKTOP; //@line 24983
  return;
 }
 $18 = HEAP32[$2 + 44 >> 2] | 0; //@line 24987
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 24992
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 24993
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 32 | 0); //@line 24994
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 161; //@line 24997
   $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 24998
   HEAP32[$23 >> 2] = $2; //@line 24999
   sp = STACKTOP; //@line 25000
   return;
  }
  ___async_unwind = 0; //@line 25003
  HEAP32[$ReallocAsyncCtx5 >> 2] = 161; //@line 25004
  $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 25005
  HEAP32[$23 >> 2] = $2; //@line 25006
  sp = STACKTOP; //@line 25007
  return;
 }
 $25 = HEAP32[$2 + 28 >> 2] | 0; //@line 25011
 if ($25 | 0) {
  $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 25016
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 25017
  FUNCTION_TABLE_vi[$29 & 1023]($2 + 16 | 0); //@line 25018
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 162; //@line 25021
   $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 25022
   HEAP32[$30 >> 2] = $2; //@line 25023
   sp = STACKTOP; //@line 25024
   return;
  }
  ___async_unwind = 0; //@line 25027
  HEAP32[$ReallocAsyncCtx6 >> 2] = 162; //@line 25028
  $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 25029
  HEAP32[$30 >> 2] = $2; //@line 25030
  sp = STACKTOP; //@line 25031
  return;
 }
 $32 = HEAP32[$2 + 12 >> 2] | 0; //@line 25035
 if (!$32) {
  return;
 }
 $35 = HEAP32[$32 + 8 >> 2] | 0; //@line 25041
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 25042
 FUNCTION_TABLE_vi[$35 & 1023]($2); //@line 25043
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 163; //@line 25046
  sp = STACKTOP; //@line 25047
  return;
 }
 ___async_unwind = 0; //@line 25050
 HEAP32[$ReallocAsyncCtx7 >> 2] = 163; //@line 25051
 sp = STACKTOP; //@line 25052
 return;
}
function __ZN7LoRaMac10disconnectEv($0) {
 $0 = $0 | 0;
 var $19 = 0, $20 = 0, $22 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 15800
 $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15802
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1796 | 0); //@line 15803
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 462; //@line 15806
  HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 15808
  HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 15810
  sp = STACKTOP; //@line 15811
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 15814
 $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15816
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1816 | 0); //@line 15817
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 463; //@line 15820
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 15822
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 15824
  sp = STACKTOP; //@line 15825
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 15828
 $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15830
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 15831
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 464; //@line 15834
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 15836
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 15838
  sp = STACKTOP; //@line 15839
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 15842
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 15844
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1856 | 0); //@line 15845
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 465; //@line 15848
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 15850
  sp = STACKTOP; //@line 15851
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15854
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 15856
 __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 15857
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 466; //@line 15860
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 15862
  sp = STACKTOP; //@line 15863
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15866
  HEAP8[$0 + 2360 >> 0] = 0; //@line 15868
  HEAP8[$0 + 1181 >> 0] = 0; //@line 15870
  HEAP8[$0 + 1175 >> 0] = 1; //@line 15872
  HEAP8[$0 + 1177 >> 0] = 0; //@line 15874
  HEAP8[$0 + 1178 >> 0] = 0; //@line 15876
  $19 = $0 + 476 | 0; //@line 15877
  __ZN14LoRaMacCommand20clear_command_bufferEv($19); //@line 15878
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($19); //@line 15879
  __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($19); //@line 15880
  $20 = $0 + 2036 | 0; //@line 15881
  HEAP32[$20 >> 2] = 0; //@line 15882
  HEAP32[$20 + 4 >> 2] = 0; //@line 15882
  HEAP32[$20 + 8 >> 2] = 0; //@line 15882
  HEAP32[$20 + 12 >> 2] = 0; //@line 15882
  HEAP32[$20 + 16 >> 2] = 0; //@line 15882
  HEAP32[$20 + 20 >> 2] = 0; //@line 15882
  HEAP32[$0 + 2040 >> 2] = 1; //@line 15884
  $22 = $0 + 2068 | 0; //@line 15885
  HEAP32[$22 >> 2] = 0; //@line 15886
  HEAP32[$22 + 4 >> 2] = 0; //@line 15886
  HEAP32[$22 + 8 >> 2] = 0; //@line 15886
  HEAP32[$22 + 12 >> 2] = 0; //@line 15886
  HEAP32[$22 + 16 >> 2] = 0; //@line 15886
  HEAP32[$0 + 2076 >> 2] = 1; //@line 15888
  dest = $0 + 1996 | 0; //@line 15890
  stop = dest + 40 | 0; //@line 15890
  do {
   HEAP32[dest >> 2] = 0; //@line 15890
   dest = dest + 4 | 0; //@line 15890
  } while ((dest | 0) < (stop | 0));
  HEAP32[$0 + 2004 >> 2] = 1; //@line 15892
  return;
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_3($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $12 = 0, $14 = 0, $2 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $33 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, $trunc = 0, sp = 0;
 sp = STACKTOP; //@line 17709
 STACKTOP = STACKTOP + 16 | 0; //@line 17710
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17710
 $$byval_copy = sp; //@line 17711
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17713
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17715
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 17717
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17719
 $12 = HEAP16[$0 + 24 >> 1] | 0; //@line 17723
 $14 = HEAP8[$0 + 26 >> 0] | 0; //@line 17725
 HEAP32[$2 + 1168 >> 2] = HEAP8[HEAP32[$0 + 20 >> 2] >> 0] | 0 ? 2 : 1; //@line 17730
 $trunc = (HEAPU8[$4 >> 0] | 0) >>> 5; //@line 17732
 switch ($trunc & 7) {
 case 1:
  {
   if (!(HEAP8[$2 + 2360 >> 0] | 0)) {
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 17740
    __ZN7LoRaMac24handle_join_accept_frameEPKht($2, $4, $6); //@line 17741
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 415; //@line 17744
     $33 = $ReallocAsyncCtx2 + 4 | 0; //@line 17745
     HEAP32[$33 >> 2] = $2; //@line 17746
     sp = STACKTOP; //@line 17747
     STACKTOP = sp; //@line 17748
     return;
    }
    ___async_unwind = 0; //@line 17750
    HEAP32[$ReallocAsyncCtx2 >> 2] = 415; //@line 17751
    $33 = $ReallocAsyncCtx2 + 4 | 0; //@line 17752
    HEAP32[$33 >> 2] = $2; //@line 17753
    sp = STACKTOP; //@line 17754
    STACKTOP = sp; //@line 17755
    return;
   }
   if (!(HEAP8[$2 + 1177 >> 0] | 0)) {
    HEAP8[$2 + 2068 >> 0] = 0; //@line 17762
    STACKTOP = sp; //@line 17763
    return;
   }
   $27 = HEAP32[$2 + 1992 >> 2] | 0; //@line 17766
   HEAP32[$8 >> 2] = 389; //@line 17767
   HEAP32[$8 + 4 >> 2] = 0; //@line 17769
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 17770
   HEAP32[$$byval_copy >> 2] = HEAP32[$8 >> 2]; //@line 17771
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$8 + 4 >> 2]; //@line 17771
   $28 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($27, $2, $$byval_copy) | 0; //@line 17772
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 413; //@line 17775
    $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 17776
    HEAP32[$29 >> 2] = $8; //@line 17777
    $30 = $ReallocAsyncCtx6 + 8 | 0; //@line 17778
    HEAP32[$30 >> 2] = $2; //@line 17779
    sp = STACKTOP; //@line 17780
    STACKTOP = sp; //@line 17781
    return;
   }
   HEAP32[___async_retval >> 2] = $28; //@line 17784
   ___async_unwind = 0; //@line 17785
   HEAP32[$ReallocAsyncCtx6 >> 2] = 413; //@line 17786
   $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 17787
   HEAP32[$29 >> 2] = $8; //@line 17788
   $30 = $ReallocAsyncCtx6 + 8 | 0; //@line 17789
   HEAP32[$30 >> 2] = $2; //@line 17790
   sp = STACKTOP; //@line 17791
   STACKTOP = sp; //@line 17792
   return;
  }
 case 7:
 case 5:
 case 3:
  {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 17796
   __ZN7LoRaMac17handle_data_frameEPKhthhsa($2, $4, $6, 1, $trunc, $12, $14); //@line 17797
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 416; //@line 17800
    sp = STACKTOP; //@line 17801
    STACKTOP = sp; //@line 17802
    return;
   }
   ___async_unwind = 0; //@line 17804
   HEAP32[$ReallocAsyncCtx >> 2] = 416; //@line 17805
   sp = STACKTOP; //@line 17806
   STACKTOP = sp; //@line 17807
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 17811
   return;
  }
 }
}
function __ZN12LoRaWANStack23process_connected_stateEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $12 = 0, $14 = 0, $2 = 0, $21 = 0, $22 = 0, $27 = 0, $30 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 9082
 STACKTOP = STACKTOP + 32 | 0; //@line 9083
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9083
 $1 = sp + 8 | 0; //@line 9085
 $2 = $0 + 2872 | 0; //@line 9086
 if (HEAP32[$2 >> 2] & 8 | 0) {
  _mbed_tracef(16, 12482, 12766, sp); //@line 9091
 }
 HEAP8[$0 + 2532 >> 0] = 1; //@line 9094
 $7 = $0 + 2496 | 0; //@line 9095
 $8 = HEAP32[$7 >> 2] | 0; //@line 9096
 do {
  if ($8 | 0) {
   $12 = HEAP32[$0 + 3136 >> 2] | 0; //@line 9102
   $14 = HEAP32[$8 + 4 >> 2] | 0; //@line 9104
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 9105
   FUNCTION_TABLE_vii[$14 & 15]($1, $0 + 2484 | 0); //@line 9106
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 312; //@line 9109
    HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 9111
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 9113
    HEAP32[$AsyncCtx + 12 >> 2] = $12; //@line 9115
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 9117
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 9119
    HEAP32[$AsyncCtx + 24 >> 2] = $0; //@line 9121
    sp = STACKTOP; //@line 9122
    STACKTOP = sp; //@line 9123
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 9125
   $21 = $1 + 12 | 0; //@line 9127
   HEAP32[$21 >> 2] = HEAP32[$7 >> 2]; //@line 9128
   $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9129
   $22 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($12, $1, 0) | 0; //@line 9130
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 313; //@line 9133
    HEAP32[$AsyncCtx5 + 4 >> 2] = $21; //@line 9135
    HEAP32[$AsyncCtx5 + 8 >> 2] = $1; //@line 9137
    HEAP32[$AsyncCtx5 + 12 >> 2] = $2; //@line 9139
    HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 9141
    sp = STACKTOP; //@line 9142
    STACKTOP = sp; //@line 9143
    return;
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 9145
   $27 = HEAP32[$21 >> 2] | 0; //@line 9146
   do {
    if ($27 | 0) {
     $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 9151
     $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9152
     FUNCTION_TABLE_vi[$30 & 1023]($1); //@line 9153
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 314; //@line 9156
      HEAP32[$AsyncCtx2 + 4 >> 2] = $22; //@line 9158
      HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 9160
      HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 9162
      HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 9164
      sp = STACKTOP; //@line 9165
      STACKTOP = sp; //@line 9166
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9168
      break;
     }
    }
   } while (0);
   if (!$22) {
    $AsyncCtx9 = _emscripten_alloc_async_context(16, sp) | 0; //@line 9175
    _mbed_assert_internal(13097, 12384, 646); //@line 9176
    if (___async) {
     HEAP32[$AsyncCtx9 >> 2] = 315; //@line 9179
     HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 9181
     HEAP32[$AsyncCtx9 + 8 >> 2] = $2; //@line 9183
     HEAP32[$AsyncCtx9 + 12 >> 2] = $0; //@line 9185
     sp = STACKTOP; //@line 9186
     STACKTOP = sp; //@line 9187
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx9 | 0); //@line 9189
     break;
    }
   }
  }
 } while (0);
 HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 4; //@line 9197
 HEAP32[$0 + 2480 >> 2] = 2; //@line 9199
 STACKTOP = sp; //@line 9200
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_143($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $29 = 0, $30 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 28331
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28333
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28335
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28337
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28339
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28341
 if (!(HEAP32[$0 + 24 >> 2] | 0)) {
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(24) | 0; //@line 28346
  _mbed_assert_internal(13097, 12384, 646); //@line 28347
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 246; //@line 28350
   $14 = $ReallocAsyncCtx11 + 4 | 0; //@line 28351
   HEAP32[$14 >> 2] = $2; //@line 28352
   $15 = $ReallocAsyncCtx11 + 8 | 0; //@line 28353
   HEAP32[$15 >> 2] = $4; //@line 28354
   $16 = $ReallocAsyncCtx11 + 12 | 0; //@line 28355
   HEAP32[$16 >> 2] = $6; //@line 28356
   $17 = $ReallocAsyncCtx11 + 16 | 0; //@line 28357
   HEAP32[$17 >> 2] = $8; //@line 28358
   $18 = $ReallocAsyncCtx11 + 20 | 0; //@line 28359
   HEAP32[$18 >> 2] = $10; //@line 28360
   sp = STACKTOP; //@line 28361
   return;
  }
  ___async_unwind = 0; //@line 28364
  HEAP32[$ReallocAsyncCtx11 >> 2] = 246; //@line 28365
  $14 = $ReallocAsyncCtx11 + 4 | 0; //@line 28366
  HEAP32[$14 >> 2] = $2; //@line 28367
  $15 = $ReallocAsyncCtx11 + 8 | 0; //@line 28368
  HEAP32[$15 >> 2] = $4; //@line 28369
  $16 = $ReallocAsyncCtx11 + 12 | 0; //@line 28370
  HEAP32[$16 >> 2] = $6; //@line 28371
  $17 = $ReallocAsyncCtx11 + 16 | 0; //@line 28372
  HEAP32[$17 >> 2] = $8; //@line 28373
  $18 = $ReallocAsyncCtx11 + 20 | 0; //@line 28374
  HEAP32[$18 >> 2] = $10; //@line 28375
  sp = STACKTOP; //@line 28376
  return;
 }
 if ((__ZNK7LoRaMac16get_device_classEv($6) | 0) == 2) {
  label = 10; //@line 28382
 } else {
  if (!(HEAP8[$8 + 15 >> 0] | 0)) {
   label = 10; //@line 28388
  }
 }
 if ((label | 0) == 10) {
  if ((__ZNK7LoRaMac16get_device_classEv($6) | 0) != 2) {
   return;
  }
  if ((HEAP32[$8 + 4 >> 2] | 0) != 1) {
   return;
  }
 }
 $29 = $10 + 2496 | 0; //@line 28404
 $30 = HEAP32[$29 >> 2] | 0; //@line 28405
 if (!$30) {
  return;
 }
 $34 = HEAP32[$10 + 3136 >> 2] | 0; //@line 28412
 $36 = HEAP32[$30 + 4 >> 2] | 0; //@line 28414
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 28415
 FUNCTION_TABLE_vii[$36 & 15]($2, $10 + 2484 | 0); //@line 28416
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 247; //@line 28419
  $37 = $ReallocAsyncCtx5 + 4 | 0; //@line 28420
  HEAP32[$37 >> 2] = $29; //@line 28421
  $38 = $ReallocAsyncCtx5 + 8 | 0; //@line 28422
  HEAP32[$38 >> 2] = $2; //@line 28423
  $39 = $ReallocAsyncCtx5 + 12 | 0; //@line 28424
  HEAP32[$39 >> 2] = $34; //@line 28425
  $40 = $ReallocAsyncCtx5 + 16 | 0; //@line 28426
  HEAP32[$40 >> 2] = $2; //@line 28427
  sp = STACKTOP; //@line 28428
  return;
 }
 ___async_unwind = 0; //@line 28431
 HEAP32[$ReallocAsyncCtx5 >> 2] = 247; //@line 28432
 $37 = $ReallocAsyncCtx5 + 4 | 0; //@line 28433
 HEAP32[$37 >> 2] = $29; //@line 28434
 $38 = $ReallocAsyncCtx5 + 8 | 0; //@line 28435
 HEAP32[$38 >> 2] = $2; //@line 28436
 $39 = $ReallocAsyncCtx5 + 12 | 0; //@line 28437
 HEAP32[$39 >> 2] = $34; //@line 28438
 $40 = $ReallocAsyncCtx5 + 16 | 0; //@line 28439
 HEAP32[$40 >> 2] = $2; //@line 28440
 sp = STACKTOP; //@line 28441
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_275($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $36 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 7419
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7421
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7423
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7425
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7427
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7429
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 7431
 if (HEAP8[___async_retval >> 0] & 1) {
  $15 = (HEAP8[$2 >> 0] | 0) != 0; //@line 7437
  $17 = HEAP32[$4 + 1888 >> 2] | 0; //@line 7439
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 7440
  __ZN7LoRaPHY15setup_rx_windowEbj($12, $15, $17); //@line 7441
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 359; //@line 7444
   $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 7445
   HEAP32[$18 >> 2] = $2; //@line 7446
   $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 7447
   HEAP32[$19 >> 2] = $4; //@line 7448
   $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 7449
   HEAP32[$20 >> 2] = $6; //@line 7450
   $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 7451
   HEAP32[$21 >> 2] = $8; //@line 7452
   $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 7453
   HEAP32[$22 >> 2] = $10; //@line 7454
   sp = STACKTOP; //@line 7455
   return;
  }
  ___async_unwind = 0; //@line 7458
  HEAP32[$ReallocAsyncCtx4 >> 2] = 359; //@line 7459
  $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 7460
  HEAP32[$18 >> 2] = $2; //@line 7461
  $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 7462
  HEAP32[$19 >> 2] = $4; //@line 7463
  $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 7464
  HEAP32[$20 >> 2] = $6; //@line 7465
  $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 7466
  HEAP32[$21 >> 2] = $8; //@line 7467
  $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 7468
  HEAP32[$22 >> 2] = $10; //@line 7469
  sp = STACKTOP; //@line 7470
  return;
 }
 if (!(HEAP8[$4 + 1175 >> 0] | 0)) {
  HEAP32[$4 + 2040 >> 2] = 0; //@line 7478
  HEAP32[$4 + 2076 >> 2] = 4; //@line 7480
  $36 = HEAP8[$4 + 1182 >> 0] | 0; //@line 7482
  HEAP8[$4 + 1183 >> 0] = $36; //@line 7484
  __ZN7LoRaPHY16set_last_tx_doneEhbj($4 + 4 | 0, $36, (HEAP8[$4 + 2360 >> 0] | 0) != 0, $10); //@line 7489
  HEAP32[$4 + 1780 >> 2] = $10; //@line 7491
  return;
 }
 $28 = HEAP32[$4 + 1772 >> 2] | 0; //@line 7496
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 7497
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($6, $4 + 1816 | 0, $28); //@line 7498
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 360; //@line 7501
  $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 7502
  HEAP32[$29 >> 2] = $8; //@line 7503
  $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 7504
  HEAP32[$30 >> 2] = $4; //@line 7505
  $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 7506
  HEAP32[$31 >> 2] = $6; //@line 7507
  $32 = $ReallocAsyncCtx3 + 16 | 0; //@line 7508
  HEAP32[$32 >> 2] = $10; //@line 7509
  sp = STACKTOP; //@line 7510
  return;
 }
 ___async_unwind = 0; //@line 7513
 HEAP32[$ReallocAsyncCtx3 >> 2] = 360; //@line 7514
 $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 7515
 HEAP32[$29 >> 2] = $8; //@line 7516
 $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 7517
 HEAP32[$30 >> 2] = $4; //@line 7518
 $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 7519
 HEAP32[$31 >> 2] = $6; //@line 7520
 $32 = $ReallocAsyncCtx3 + 16 | 0; //@line 7521
 HEAP32[$32 >> 2] = $10; //@line 7522
 sp = STACKTOP; //@line 7523
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $18 = 0, $2 = 0, $21 = 0, $26 = 0, $27 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, sp = 0;
 sp = STACKTOP; //@line 1915
 STACKTOP = STACKTOP + 48 | 0; //@line 1916
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 1916
 $vararg_buffer4 = sp + 16 | 0; //@line 1917
 $vararg_buffer1 = sp + 8 | 0; //@line 1918
 $vararg_buffer = sp; //@line 1919
 $2 = sp + 24 | 0; //@line 1920
 HEAP32[$vararg_buffer >> 2] = $1; //@line 1921
 _mbed_tracef(16, 10996, 11644, $vararg_buffer); //@line 1922
 HEAP8[$0 + 688 >> 0] = 2; //@line 1924
 HEAP32[$vararg_buffer1 >> 2] = 3; //@line 1925
 _mbed_tracef(16, 10996, 11053, $vararg_buffer1); //@line 1926
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 1927
 HEAP32[$vararg_buffer4 >> 2] = 3; //@line 1928
 _mbed_tracef(16, 10996, 11082, $vararg_buffer4); //@line 1929
 $4 = $0 + 1240 | 0; //@line 1930
 $5 = $2 + 12 | 0; //@line 1931
 HEAP32[$2 >> 2] = 89; //@line 1932
 HEAP32[$2 + 4 >> 2] = 0; //@line 1934
 HEAP32[$2 + 8 >> 2] = $0; //@line 1936
 HEAP32[$5 >> 2] = 584; //@line 1937
 $6 = $0 + 1280 | 0; //@line 1938
 if (($6 | 0) != ($2 | 0)) {
  $8 = $0 + 1292 | 0; //@line 1941
  $9 = HEAP32[$8 >> 2] | 0; //@line 1942
  do {
   if ($9 | 0) {
    $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 1947
    $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 1948
    FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 1949
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 90; //@line 1952
     HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 1954
     HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 1956
     HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 1958
     HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 1960
     HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 1962
     sp = STACKTOP; //@line 1963
     STACKTOP = sp; //@line 1964
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 1966
     break;
    }
   }
  } while (0);
  $18 = HEAP32[$5 >> 2] | 0; //@line 1971
  do {
   if (!$18) {
    $26 = 0; //@line 1975
   } else {
    $21 = HEAP32[$18 + 4 >> 2] | 0; //@line 1978
    $AsyncCtx8 = _emscripten_alloc_async_context(20, sp) | 0; //@line 1979
    FUNCTION_TABLE_vii[$21 & 15]($6, $2); //@line 1980
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 91; //@line 1983
     HEAP32[$AsyncCtx8 + 4 >> 2] = $5; //@line 1985
     HEAP32[$AsyncCtx8 + 8 >> 2] = $8; //@line 1987
     HEAP32[$AsyncCtx8 + 12 >> 2] = $4; //@line 1989
     HEAP32[$AsyncCtx8 + 16 >> 2] = $2; //@line 1991
     sp = STACKTOP; //@line 1992
     STACKTOP = sp; //@line 1993
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx8 | 0); //@line 1995
     $26 = HEAP32[$5 >> 2] | 0; //@line 1997
     break;
    }
   }
  } while (0);
  HEAP32[$8 >> 2] = $26; //@line 2002
 }
 __ZN4mbed6Ticker5setupEy($4, 1e5, 0); //@line 2004
 $27 = HEAP32[$5 >> 2] | 0; //@line 2005
 if (!$27) {
  STACKTOP = sp; //@line 2008
  return;
 }
 $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 2011
 $AsyncCtx12 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2012
 FUNCTION_TABLE_vi[$30 & 1023]($2); //@line 2013
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 92; //@line 2016
  sp = STACKTOP; //@line 2017
  STACKTOP = sp; //@line 2018
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 2020
 STACKTOP = sp; //@line 2021
 return;
}
function _memchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = $1 & 255; //@line 12029
 $7 = ($2 | 0) != 0; //@line 12033
 L1 : do {
  if ($7 & ($0 & 3 | 0) != 0) {
   $8 = $1 & 255; //@line 12037
   $$03555 = $0; //@line 12038
   $$03654 = $2; //@line 12038
   while (1) {
    if ((HEAP8[$$03555 >> 0] | 0) == $8 << 24 >> 24) {
     $$035$lcssa65 = $$03555; //@line 12043
     $$036$lcssa64 = $$03654; //@line 12043
     label = 6; //@line 12044
     break L1;
    }
    $11 = $$03555 + 1 | 0; //@line 12047
    $12 = $$03654 + -1 | 0; //@line 12048
    $16 = ($12 | 0) != 0; //@line 12052
    if ($16 & ($11 & 3 | 0) != 0) {
     $$03555 = $11; //@line 12055
     $$03654 = $12; //@line 12055
    } else {
     $$035$lcssa = $11; //@line 12057
     $$036$lcssa = $12; //@line 12057
     $$lcssa = $16; //@line 12057
     label = 5; //@line 12058
     break;
    }
   }
  } else {
   $$035$lcssa = $0; //@line 12063
   $$036$lcssa = $2; //@line 12063
   $$lcssa = $7; //@line 12063
   label = 5; //@line 12064
  }
 } while (0);
 if ((label | 0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa; //@line 12069
   $$036$lcssa64 = $$036$lcssa; //@line 12069
   label = 6; //@line 12070
  } else {
   $$2 = $$035$lcssa; //@line 12072
   $$3 = 0; //@line 12072
  }
 }
 L8 : do {
  if ((label | 0) == 6) {
   $18 = $1 & 255; //@line 12078
   if ((HEAP8[$$035$lcssa65 >> 0] | 0) == $18 << 24 >> 24) {
    $$2 = $$035$lcssa65; //@line 12081
    $$3 = $$036$lcssa64; //@line 12081
   } else {
    $20 = Math_imul($3, 16843009) | 0; //@line 12083
    L11 : do {
     if ($$036$lcssa64 >>> 0 > 3) {
      $$046 = $$035$lcssa65; //@line 12087
      $$13745 = $$036$lcssa64; //@line 12087
      while (1) {
       $23 = HEAP32[$$046 >> 2] ^ $20; //@line 12090
       if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) {
        break;
       }
       $29 = $$046 + 4 | 0; //@line 12099
       $30 = $$13745 + -4 | 0; //@line 12100
       if ($30 >>> 0 > 3) {
        $$046 = $29; //@line 12103
        $$13745 = $30; //@line 12103
       } else {
        $$0$lcssa = $29; //@line 12105
        $$137$lcssa = $30; //@line 12105
        label = 11; //@line 12106
        break L11;
       }
      }
      $$140 = $$046; //@line 12110
      $$23839 = $$13745; //@line 12110
     } else {
      $$0$lcssa = $$035$lcssa65; //@line 12112
      $$137$lcssa = $$036$lcssa64; //@line 12112
      label = 11; //@line 12113
     }
    } while (0);
    if ((label | 0) == 11) {
     if (!$$137$lcssa) {
      $$2 = $$0$lcssa; //@line 12119
      $$3 = 0; //@line 12119
      break;
     } else {
      $$140 = $$0$lcssa; //@line 12122
      $$23839 = $$137$lcssa; //@line 12122
     }
    }
    while (1) {
     if ((HEAP8[$$140 >> 0] | 0) == $18 << 24 >> 24) {
      $$2 = $$140; //@line 12129
      $$3 = $$23839; //@line 12129
      break L8;
     }
     $35 = $$140 + 1 | 0; //@line 12132
     $$23839 = $$23839 + -1 | 0; //@line 12133
     if (!$$23839) {
      $$2 = $35; //@line 12136
      $$3 = 0; //@line 12136
      break;
     } else {
      $$140 = $35; //@line 12139
     }
    }
   }
  }
 } while (0);
 return ($$3 | 0 ? $$2 : 0) | 0; //@line 12147
}
function _fflush($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $12 = 0, $13 = 0, $25 = 0, $28 = 0, $34 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $phitmp = 0, sp = 0;
 sp = STACKTOP; //@line 11800
 do {
  if (!$0) {
   do {
    if (!(HEAP32[2625] | 0)) {
     $34 = 0; //@line 11808
    } else {
     $12 = HEAP32[2625] | 0; //@line 11810
     $AsyncCtx10 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11811
     $13 = _fflush($12) | 0; //@line 11812
     if (___async) {
      HEAP32[$AsyncCtx10 >> 2] = 638; //@line 11815
      sp = STACKTOP; //@line 11816
      return 0; //@line 11817
     } else {
      _emscripten_free_async_context($AsyncCtx10 | 0); //@line 11819
      $34 = $13; //@line 11820
      break;
     }
    }
   } while (0);
   $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 11826
   L9 : do {
    if (!$$02325) {
     $$024$lcssa = $34; //@line 11830
    } else {
     $$02327 = $$02325; //@line 11832
     $$02426 = $34; //@line 11832
     while (1) {
      if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
       $28 = ___lockfile($$02327) | 0; //@line 11839
      } else {
       $28 = 0; //@line 11841
      }
      if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
       $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 11849
       $25 = ___fflush_unlocked($$02327) | 0; //@line 11850
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 11855
       $$1 = $25 | $$02426; //@line 11857
      } else {
       $$1 = $$02426; //@line 11859
      }
      if ($28 | 0) {
       ___unlockfile($$02327); //@line 11863
      }
      $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 11866
      if (!$$023) {
       $$024$lcssa = $$1; //@line 11869
       break L9;
      } else {
       $$02327 = $$023; //@line 11872
       $$02426 = $$1; //@line 11872
      }
     }
     HEAP32[$AsyncCtx >> 2] = 639; //@line 11875
     HEAP32[$AsyncCtx + 4 >> 2] = $$02426; //@line 11877
     HEAP32[$AsyncCtx + 8 >> 2] = $28; //@line 11879
     HEAP32[$AsyncCtx + 12 >> 2] = $$02327; //@line 11881
     sp = STACKTOP; //@line 11882
     return 0; //@line 11883
    }
   } while (0);
   ___ofl_unlock(); //@line 11886
   $$0 = $$024$lcssa; //@line 11887
  } else {
   if ((HEAP32[$0 + 76 >> 2] | 0) <= -1) {
    $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11893
    $5 = ___fflush_unlocked($0) | 0; //@line 11894
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 636; //@line 11897
     sp = STACKTOP; //@line 11898
     return 0; //@line 11899
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 11901
     $$0 = $5; //@line 11902
     break;
    }
   }
   $phitmp = (___lockfile($0) | 0) == 0; //@line 11907
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11908
   $7 = ___fflush_unlocked($0) | 0; //@line 11909
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 637; //@line 11912
    HEAP8[$AsyncCtx3 + 4 >> 0] = $phitmp & 1; //@line 11915
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 11917
    sp = STACKTOP; //@line 11918
    return 0; //@line 11919
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11921
   if ($phitmp) {
    $$0 = $7; //@line 11923
   } else {
    ___unlockfile($0); //@line 11925
    $$0 = $7; //@line 11926
   }
  }
 } while (0);
 return $$0 | 0; //@line 11930
}
function __ZN7LoRaPHY18dl_channel_requestEhj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18382
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18384
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18386
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18388
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18390
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18392
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 18394
 if (HEAP8[___async_retval >> 0] & 1) {
  $31 = $2; //@line 18399
 } else {
  $18 = $2 + 1 | 0; //@line 18401
  if (($18 | 0) < (HEAPU8[$10 >> 0] | 0 | 0)) {
   $16 = HEAP32[(HEAP32[$4 >> 2] | 0) + 76 >> 2] | 0; //@line 18408
   $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 18410
   $19 = FUNCTION_TABLE_iiii[$16 & 31]($6, $8, $18 & 255) | 0; //@line 18411
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 517; //@line 18414
    $20 = $ReallocAsyncCtx + 4 | 0; //@line 18415
    HEAP32[$20 >> 2] = $18; //@line 18416
    $21 = $ReallocAsyncCtx + 8 | 0; //@line 18417
    HEAP32[$21 >> 2] = $4; //@line 18418
    $22 = $ReallocAsyncCtx + 12 | 0; //@line 18419
    HEAP32[$22 >> 2] = $6; //@line 18420
    $23 = $ReallocAsyncCtx + 16 | 0; //@line 18421
    HEAP32[$23 >> 2] = $8; //@line 18422
    $24 = $ReallocAsyncCtx + 20 | 0; //@line 18423
    HEAP32[$24 >> 2] = $10; //@line 18424
    $25 = $ReallocAsyncCtx + 24 | 0; //@line 18425
    HEAP8[$25 >> 0] = $12; //@line 18426
    sp = STACKTOP; //@line 18427
    return;
   }
   HEAP8[___async_retval >> 0] = $19 & 1; //@line 18432
   ___async_unwind = 0; //@line 18433
   HEAP32[$ReallocAsyncCtx >> 2] = 517; //@line 18434
   $20 = $ReallocAsyncCtx + 4 | 0; //@line 18435
   HEAP32[$20 >> 2] = $18; //@line 18436
   $21 = $ReallocAsyncCtx + 8 | 0; //@line 18437
   HEAP32[$21 >> 2] = $4; //@line 18438
   $22 = $ReallocAsyncCtx + 12 | 0; //@line 18439
   HEAP32[$22 >> 2] = $6; //@line 18440
   $23 = $ReallocAsyncCtx + 16 | 0; //@line 18441
   HEAP32[$23 >> 2] = $8; //@line 18442
   $24 = $ReallocAsyncCtx + 20 | 0; //@line 18443
   HEAP32[$24 >> 2] = $10; //@line 18444
   $25 = $ReallocAsyncCtx + 24 | 0; //@line 18445
   HEAP8[$25 >> 0] = $12; //@line 18446
   sp = STACKTOP; //@line 18447
   return;
  } else {
   $31 = -1; //@line 18450
  }
 }
 $34 = HEAP32[(HEAP32[$4 >> 2] | 0) + 76 >> 2] | 0; //@line 18456
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 18457
 $35 = FUNCTION_TABLE_iiii[$34 & 31]($6, $8, $31 & 255) | 0; //@line 18458
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 518; //@line 18461
  $36 = $ReallocAsyncCtx2 + 4 | 0; //@line 18462
  HEAP32[$36 >> 2] = $6; //@line 18463
  $37 = $ReallocAsyncCtx2 + 8 | 0; //@line 18464
  HEAP8[$37 >> 0] = $12; //@line 18465
  $38 = $ReallocAsyncCtx2 + 12 | 0; //@line 18466
  HEAP32[$38 >> 2] = $8; //@line 18467
  sp = STACKTOP; //@line 18468
  return;
 }
 HEAP8[___async_retval >> 0] = $35 & 1; //@line 18473
 ___async_unwind = 0; //@line 18474
 HEAP32[$ReallocAsyncCtx2 >> 2] = 518; //@line 18475
 $36 = $ReallocAsyncCtx2 + 4 | 0; //@line 18476
 HEAP32[$36 >> 2] = $6; //@line 18477
 $37 = $ReallocAsyncCtx2 + 8 | 0; //@line 18478
 HEAP8[$37 >> 0] = $12; //@line 18479
 $38 = $ReallocAsyncCtx2 + 12 | 0; //@line 18480
 HEAP32[$38 >> 2] = $8; //@line 18481
 sp = STACKTOP; //@line 18482
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_4($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $12 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, $trunc = 0, sp = 0;
 sp = STACKTOP; //@line 17819
 STACKTOP = STACKTOP + 16 | 0; //@line 17820
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17820
 $$byval_copy = sp; //@line 17821
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17823
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17825
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 17827
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17829
 $10 = HEAP16[$0 + 20 >> 1] | 0; //@line 17831
 $12 = HEAP8[$0 + 22 >> 0] | 0; //@line 17833
 $trunc = (HEAPU8[$4 >> 0] | 0) >>> 5; //@line 17835
 switch ($trunc & 7) {
 case 1:
  {
   if (!(HEAP8[$2 + 2360 >> 0] | 0)) {
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 17843
    __ZN7LoRaMac24handle_join_accept_frameEPKht($2, $4, $6); //@line 17844
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 415; //@line 17847
     $27 = $ReallocAsyncCtx2 + 4 | 0; //@line 17848
     HEAP32[$27 >> 2] = $2; //@line 17849
     sp = STACKTOP; //@line 17850
     STACKTOP = sp; //@line 17851
     return;
    }
    ___async_unwind = 0; //@line 17853
    HEAP32[$ReallocAsyncCtx2 >> 2] = 415; //@line 17854
    $27 = $ReallocAsyncCtx2 + 4 | 0; //@line 17855
    HEAP32[$27 >> 2] = $2; //@line 17856
    sp = STACKTOP; //@line 17857
    STACKTOP = sp; //@line 17858
    return;
   }
   if (!(HEAP8[$2 + 1177 >> 0] | 0)) {
    HEAP8[$2 + 2068 >> 0] = 0; //@line 17865
    STACKTOP = sp; //@line 17866
    return;
   }
   $21 = HEAP32[$2 + 1992 >> 2] | 0; //@line 17869
   HEAP32[$8 >> 2] = 389; //@line 17870
   HEAP32[$8 + 4 >> 2] = 0; //@line 17872
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 17873
   HEAP32[$$byval_copy >> 2] = HEAP32[$8 >> 2]; //@line 17874
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$8 + 4 >> 2]; //@line 17874
   $22 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($21, $2, $$byval_copy) | 0; //@line 17875
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 413; //@line 17878
    $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 17879
    HEAP32[$23 >> 2] = $8; //@line 17880
    $24 = $ReallocAsyncCtx6 + 8 | 0; //@line 17881
    HEAP32[$24 >> 2] = $2; //@line 17882
    sp = STACKTOP; //@line 17883
    STACKTOP = sp; //@line 17884
    return;
   }
   HEAP32[___async_retval >> 2] = $22; //@line 17887
   ___async_unwind = 0; //@line 17888
   HEAP32[$ReallocAsyncCtx6 >> 2] = 413; //@line 17889
   $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 17890
   HEAP32[$23 >> 2] = $8; //@line 17891
   $24 = $ReallocAsyncCtx6 + 8 | 0; //@line 17892
   HEAP32[$24 >> 2] = $2; //@line 17893
   sp = STACKTOP; //@line 17894
   STACKTOP = sp; //@line 17895
   return;
  }
 case 7:
 case 5:
 case 3:
  {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 17899
   __ZN7LoRaMac17handle_data_frameEPKhthhsa($2, $4, $6, 1, $trunc, $10, $12); //@line 17900
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 416; //@line 17903
    sp = STACKTOP; //@line 17904
    STACKTOP = sp; //@line 17905
    return;
   }
   ___async_unwind = 0; //@line 17907
   HEAP32[$ReallocAsyncCtx >> 2] = 416; //@line 17908
   sp = STACKTOP; //@line 17909
   STACKTOP = sp; //@line 17910
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 17914
   return;
  }
 }
}
function __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_18($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 18779
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18781
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18783
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18785
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18787
 if (!$AsyncRetVal) {
  $22 = HEAP32[$2 >> 2] | 0; //@line 18790
  if (!$22) {
   HEAP32[___async_retval >> 2] = 0; //@line 18794
   return;
  }
  $25 = HEAP32[$22 + 8 >> 2] | 0; //@line 18798
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 18799
  FUNCTION_TABLE_vi[$25 & 1023]($6); //@line 18800
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 270; //@line 18803
   $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 18804
   HEAP32[$26 >> 2] = 0; //@line 18805
   sp = STACKTOP; //@line 18806
   return;
  }
  ___async_unwind = 0; //@line 18809
  HEAP32[$ReallocAsyncCtx2 >> 2] = 270; //@line 18810
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 18811
  HEAP32[$26 >> 2] = 0; //@line 18812
  sp = STACKTOP; //@line 18813
  return;
 }
 $9 = HEAP32[$2 >> 2] | 0; //@line 18816
 if (!$9) {
  HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 18820
  _equeue_event_dtor($AsyncRetVal, 267); //@line 18821
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 18822
  $18 = _equeue_post($4, 268, $AsyncRetVal) | 0; //@line 18823
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 269; //@line 18826
   $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 18827
   HEAP32[$19 >> 2] = $2; //@line 18828
   $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 18829
   HEAP32[$20 >> 2] = $6; //@line 18830
   sp = STACKTOP; //@line 18831
   return;
  }
  HEAP32[___async_retval >> 2] = $18; //@line 18835
  ___async_unwind = 0; //@line 18836
  HEAP32[$ReallocAsyncCtx3 >> 2] = 269; //@line 18837
  $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 18838
  HEAP32[$19 >> 2] = $2; //@line 18839
  $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 18840
  HEAP32[$20 >> 2] = $6; //@line 18841
  sp = STACKTOP; //@line 18842
  return;
 } else {
  $12 = HEAP32[$9 + 4 >> 2] | 0; //@line 18846
  $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 18847
  FUNCTION_TABLE_vii[$12 & 15]($AsyncRetVal, $6); //@line 18848
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 266; //@line 18851
   $13 = $ReallocAsyncCtx + 4 | 0; //@line 18852
   HEAP32[$13 >> 2] = $2; //@line 18853
   $14 = $ReallocAsyncCtx + 8 | 0; //@line 18854
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 18855
   $15 = $ReallocAsyncCtx + 12 | 0; //@line 18856
   HEAP32[$15 >> 2] = $4; //@line 18857
   $16 = $ReallocAsyncCtx + 16 | 0; //@line 18858
   HEAP32[$16 >> 2] = $6; //@line 18859
   sp = STACKTOP; //@line 18860
   return;
  }
  ___async_unwind = 0; //@line 18863
  HEAP32[$ReallocAsyncCtx >> 2] = 266; //@line 18864
  $13 = $ReallocAsyncCtx + 4 | 0; //@line 18865
  HEAP32[$13 >> 2] = $2; //@line 18866
  $14 = $ReallocAsyncCtx + 8 | 0; //@line 18867
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 18868
  $15 = $ReallocAsyncCtx + 12 | 0; //@line 18869
  HEAP32[$15 >> 2] = $4; //@line 18870
  $16 = $ReallocAsyncCtx + 16 | 0; //@line 18871
  HEAP32[$16 >> 2] = $6; //@line 18872
  sp = STACKTOP; //@line 18873
  return;
 }
}
function _mbedtls_cipher_free__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $18 = 0, $2 = 0, $22 = 0, $26 = 0, $30 = 0, $34 = 0, $38 = 0, $42 = 0, $46 = 0, $50 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $66 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25029
 HEAP8[$2 >> 0] = 0; //@line 25031
 HEAP8[$2 + 1 >> 0] = 0; //@line 25033
 HEAP8[$2 + 2 >> 0] = 0; //@line 25035
 $6 = $2 + 4 | 0; //@line 25036
 HEAP8[$2 + 3 >> 0] = 0; //@line 25037
 HEAP8[$6 >> 0] = 0; //@line 25039
 HEAP8[$6 + 1 >> 0] = 0; //@line 25041
 HEAP8[$6 + 2 >> 0] = 0; //@line 25043
 $10 = $6 + 4 | 0; //@line 25044
 HEAP8[$6 + 3 >> 0] = 0; //@line 25045
 HEAP8[$10 >> 0] = 0; //@line 25047
 HEAP8[$10 + 1 >> 0] = 0; //@line 25049
 HEAP8[$10 + 2 >> 0] = 0; //@line 25051
 $14 = $6 + 8 | 0; //@line 25052
 HEAP8[$10 + 3 >> 0] = 0; //@line 25053
 HEAP8[$14 >> 0] = 0; //@line 25055
 HEAP8[$14 + 1 >> 0] = 0; //@line 25057
 HEAP8[$14 + 2 >> 0] = 0; //@line 25059
 $18 = $6 + 12 | 0; //@line 25060
 HEAP8[$14 + 3 >> 0] = 0; //@line 25061
 HEAP8[$18 >> 0] = 0; //@line 25063
 HEAP8[$18 + 1 >> 0] = 0; //@line 25065
 HEAP8[$18 + 2 >> 0] = 0; //@line 25067
 $22 = $6 + 16 | 0; //@line 25068
 HEAP8[$18 + 3 >> 0] = 0; //@line 25069
 HEAP8[$22 >> 0] = 0; //@line 25071
 HEAP8[$22 + 1 >> 0] = 0; //@line 25073
 HEAP8[$22 + 2 >> 0] = 0; //@line 25075
 $26 = $6 + 20 | 0; //@line 25076
 HEAP8[$22 + 3 >> 0] = 0; //@line 25077
 HEAP8[$26 >> 0] = 0; //@line 25079
 HEAP8[$26 + 1 >> 0] = 0; //@line 25081
 HEAP8[$26 + 2 >> 0] = 0; //@line 25083
 $30 = $6 + 24 | 0; //@line 25084
 HEAP8[$26 + 3 >> 0] = 0; //@line 25085
 HEAP8[$30 >> 0] = 0; //@line 25087
 HEAP8[$30 + 1 >> 0] = 0; //@line 25089
 HEAP8[$30 + 2 >> 0] = 0; //@line 25091
 $34 = $6 + 28 | 0; //@line 25092
 HEAP8[$30 + 3 >> 0] = 0; //@line 25093
 HEAP8[$34 >> 0] = 0; //@line 25095
 HEAP8[$34 + 1 >> 0] = 0; //@line 25097
 HEAP8[$34 + 2 >> 0] = 0; //@line 25099
 $38 = $6 + 32 | 0; //@line 25100
 HEAP8[$34 + 3 >> 0] = 0; //@line 25101
 HEAP8[$38 >> 0] = 0; //@line 25103
 HEAP8[$38 + 1 >> 0] = 0; //@line 25105
 HEAP8[$38 + 2 >> 0] = 0; //@line 25107
 $42 = $6 + 36 | 0; //@line 25108
 HEAP8[$38 + 3 >> 0] = 0; //@line 25109
 HEAP8[$42 >> 0] = 0; //@line 25111
 HEAP8[$42 + 1 >> 0] = 0; //@line 25113
 HEAP8[$42 + 2 >> 0] = 0; //@line 25115
 $46 = $6 + 40 | 0; //@line 25116
 HEAP8[$42 + 3 >> 0] = 0; //@line 25117
 HEAP8[$46 >> 0] = 0; //@line 25119
 HEAP8[$46 + 1 >> 0] = 0; //@line 25121
 HEAP8[$46 + 2 >> 0] = 0; //@line 25123
 $50 = $6 + 44 | 0; //@line 25124
 HEAP8[$46 + 3 >> 0] = 0; //@line 25125
 HEAP8[$50 >> 0] = 0; //@line 25127
 HEAP8[$50 + 1 >> 0] = 0; //@line 25129
 HEAP8[$50 + 2 >> 0] = 0; //@line 25131
 $54 = $6 + 48 | 0; //@line 25132
 HEAP8[$50 + 3 >> 0] = 0; //@line 25133
 HEAP8[$54 >> 0] = 0; //@line 25135
 HEAP8[$54 + 1 >> 0] = 0; //@line 25137
 HEAP8[$54 + 2 >> 0] = 0; //@line 25139
 $58 = $6 + 52 | 0; //@line 25140
 HEAP8[$54 + 3 >> 0] = 0; //@line 25141
 HEAP8[$58 >> 0] = 0; //@line 25143
 HEAP8[$58 + 1 >> 0] = 0; //@line 25145
 HEAP8[$58 + 2 >> 0] = 0; //@line 25147
 $62 = $6 + 56 | 0; //@line 25148
 HEAP8[$58 + 3 >> 0] = 0; //@line 25149
 HEAP8[$62 >> 0] = 0; //@line 25151
 HEAP8[$62 + 1 >> 0] = 0; //@line 25153
 HEAP8[$62 + 2 >> 0] = 0; //@line 25155
 $66 = $6 + 60 | 0; //@line 25156
 HEAP8[$62 + 3 >> 0] = 0; //@line 25157
 HEAP8[$66 >> 0] = 0; //@line 25159
 HEAP8[$66 + 1 >> 0] = 0; //@line 25161
 HEAP8[$66 + 2 >> 0] = 0; //@line 25163
 HEAP8[$66 + 3 >> 0] = 0; //@line 25164
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_38($0) {
 $0 = $0 | 0;
 var $$pre$phi6Z2D = 0, $$pre$phiZ2D = 0, $12 = 0, $14 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20399
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20401
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20403
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 20406
 $7 = $2 + 1168 | 0; //@line 20407
 $12 = (HEAP8[$2 + 1177 >> 0] | 0) != 0; //@line 20412
 if (!(HEAP32[$7 >> 2] | 0)) {
  if ($12) {
   $14 = $6 ? 3 : 5; //@line 20416
   HEAP32[$2 + 2040 >> 2] = $14; //@line 20417
   $$pre$phiZ2D = $14; //@line 20418
  } else {
   $$pre$phiZ2D = $6 ? 3 : 5; //@line 20421
  }
  HEAP32[$2 + 2076 >> 2] = $$pre$phiZ2D; //@line 20424
  if ((HEAP32[$4 >> 2] | 0) != 2) {
   $20 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj($2, HEAP32[$2 + 1780 >> 2] | 0) | 0; //@line 20430
   if ($20 >>> 0 < (HEAP32[$2 + 1776 >> 2] | 0) >>> 0) {
    label = 16; //@line 20435
   } else {
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(16) | 0; //@line 20438
    __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1836 | 0); //@line 20439
    if (___async) {
     HEAP32[$ReallocAsyncCtx5 >> 2] = 425; //@line 20442
     $25 = $ReallocAsyncCtx5 + 4 | 0; //@line 20443
     HEAP32[$25 >> 2] = $4; //@line 20444
     $26 = $ReallocAsyncCtx5 + 8 | 0; //@line 20445
     HEAP32[$26 >> 2] = $2; //@line 20446
     $27 = $ReallocAsyncCtx5 + 12 | 0; //@line 20447
     HEAP32[$27 >> 2] = $7; //@line 20448
     sp = STACKTOP; //@line 20449
     return;
    }
    ___async_unwind = 0; //@line 20452
    HEAP32[$ReallocAsyncCtx5 >> 2] = 425; //@line 20453
    $25 = $ReallocAsyncCtx5 + 4 | 0; //@line 20454
    HEAP32[$25 >> 2] = $4; //@line 20455
    $26 = $ReallocAsyncCtx5 + 8 | 0; //@line 20456
    HEAP32[$26 >> 2] = $2; //@line 20457
    $27 = $ReallocAsyncCtx5 + 12 | 0; //@line 20458
    HEAP32[$27 >> 2] = $7; //@line 20459
    sp = STACKTOP; //@line 20460
    return;
   }
  }
 } else {
  if ($12) {
   $29 = $6 ? 4 : 6; //@line 20467
   HEAP32[$2 + 2040 >> 2] = $29; //@line 20468
   $$pre$phi6Z2D = $29; //@line 20469
  } else {
   $$pre$phi6Z2D = $6 ? 4 : 6; //@line 20472
  }
  HEAP32[$2 + 2076 >> 2] = $$pre$phi6Z2D; //@line 20475
  label = 16; //@line 20476
 }
 if ((label | 0) == 16) {
  if ((HEAP32[$4 >> 2] | 0) != 2) {
   HEAP32[___async_retval >> 2] = HEAP32[$7 >> 2]; //@line 20484
   return;
  }
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 20489
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1836 | 0); //@line 20490
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 426; //@line 20493
  $33 = $ReallocAsyncCtx4 + 4 | 0; //@line 20494
  HEAP32[$33 >> 2] = $2; //@line 20495
  $34 = $ReallocAsyncCtx4 + 8 | 0; //@line 20496
  HEAP32[$34 >> 2] = $4; //@line 20497
  $35 = $ReallocAsyncCtx4 + 12 | 0; //@line 20498
  HEAP32[$35 >> 2] = $7; //@line 20499
  sp = STACKTOP; //@line 20500
  return;
 }
 ___async_unwind = 0; //@line 20503
 HEAP32[$ReallocAsyncCtx4 >> 2] = 426; //@line 20504
 $33 = $ReallocAsyncCtx4 + 4 | 0; //@line 20505
 HEAP32[$33 >> 2] = $2; //@line 20506
 $34 = $ReallocAsyncCtx4 + 8 | 0; //@line 20507
 HEAP32[$34 >> 2] = $4; //@line 20508
 $35 = $ReallocAsyncCtx4 + 12 | 0; //@line 20509
 HEAP32[$35 >> 2] = $7; //@line 20510
 sp = STACKTOP; //@line 20511
 return;
}
function _mbed_vtracef__async_cb_322($0) {
 $0 = $0 | 0;
 var $$13 = 0, $$expand_i1_val = 0, $10 = 0, $12 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 12551
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12553
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12555
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 12558
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12560
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12562
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12564
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12568
 $$13 = ($AsyncRetVal | 0) >= ($12 | 0) ? 0 : $AsyncRetVal; //@line 12570
 $18 = (HEAP32[$0 + 28 >> 2] | 0) + $$13 | 0; //@line 12572
 $19 = $12 - $$13 | 0; //@line 12573
 do {
  if (($$13 | 0) > 0) {
   $21 = HEAP32[173] | 0; //@line 12577
   if (!(($19 | 0) > 0 & ($21 | 0) != 0)) {
    if (($$13 | 0) < 1 | ($19 | 0) < 1 | $6 ^ 1) {
     break;
    }
    _snprintf($18, $19, 12346, $2) | 0; //@line 12589
    break;
   }
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 12592
   $23 = FUNCTION_TABLE_i[$21 & 7]() | 0; //@line 12593
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 134; //@line 12596
    $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 12597
    HEAP32[$24 >> 2] = $8; //@line 12598
    $25 = $ReallocAsyncCtx6 + 8 | 0; //@line 12599
    HEAP32[$25 >> 2] = $18; //@line 12600
    $26 = $ReallocAsyncCtx6 + 12 | 0; //@line 12601
    HEAP32[$26 >> 2] = $19; //@line 12602
    $27 = $ReallocAsyncCtx6 + 16 | 0; //@line 12603
    HEAP32[$27 >> 2] = $10; //@line 12604
    $28 = $ReallocAsyncCtx6 + 20 | 0; //@line 12605
    $$expand_i1_val = $6 & 1; //@line 12606
    HEAP8[$28 >> 0] = $$expand_i1_val; //@line 12607
    $29 = $ReallocAsyncCtx6 + 24 | 0; //@line 12608
    HEAP32[$29 >> 2] = $2; //@line 12609
    $30 = $ReallocAsyncCtx6 + 28 | 0; //@line 12610
    HEAP32[$30 >> 2] = $4; //@line 12611
    sp = STACKTOP; //@line 12612
    return;
   }
   HEAP32[___async_retval >> 2] = $23; //@line 12616
   ___async_unwind = 0; //@line 12617
   HEAP32[$ReallocAsyncCtx6 >> 2] = 134; //@line 12618
   $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 12619
   HEAP32[$24 >> 2] = $8; //@line 12620
   $25 = $ReallocAsyncCtx6 + 8 | 0; //@line 12621
   HEAP32[$25 >> 2] = $18; //@line 12622
   $26 = $ReallocAsyncCtx6 + 12 | 0; //@line 12623
   HEAP32[$26 >> 2] = $19; //@line 12624
   $27 = $ReallocAsyncCtx6 + 16 | 0; //@line 12625
   HEAP32[$27 >> 2] = $10; //@line 12626
   $28 = $ReallocAsyncCtx6 + 20 | 0; //@line 12627
   $$expand_i1_val = $6 & 1; //@line 12628
   HEAP8[$28 >> 0] = $$expand_i1_val; //@line 12629
   $29 = $ReallocAsyncCtx6 + 24 | 0; //@line 12630
   HEAP32[$29 >> 2] = $2; //@line 12631
   $30 = $ReallocAsyncCtx6 + 28 | 0; //@line 12632
   HEAP32[$30 >> 2] = $4; //@line 12633
   sp = STACKTOP; //@line 12634
   return;
  }
 } while (0);
 $34 = HEAP32[174] | 0; //@line 12638
 $35 = HEAP32[167] | 0; //@line 12639
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 12640
 FUNCTION_TABLE_vi[$34 & 1023]($35); //@line 12641
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 135; //@line 12644
  sp = STACKTOP; //@line 12645
  return;
 }
 ___async_unwind = 0; //@line 12648
 HEAP32[$ReallocAsyncCtx7 >> 2] = 135; //@line 12649
 sp = STACKTOP; //@line 12650
 return;
}
function __ZN7LoRaPHY19update_band_timeoffEbbP6band_th($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$060 = 0, $$060$us = 0, $$2 = 0, $$2$us = 0, $$pr$us = 0, $$sink2 = 0, $10 = 0, $20 = 0, $26 = 0, $28 = 0, $34 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $6 = 0, $7 = 0, $8 = 0, $indvars$iv = 0, $indvars$iv62 = 0, $wide$trip$count = 0, label = 0;
 if (!($4 << 24 >> 24)) {
  $$0$lcssa = -1; //@line 21024
  return $$0$lcssa | 0; //@line 21025
 }
 $6 = $0 + 8 | 0; //@line 21027
 $wide$trip$count = $4 & 255; //@line 21028
 if ($1) {
  $$060$us = -1; //@line 21030
  $indvars$iv = 0; //@line 21030
  while (1) {
   $7 = $3 + ($indvars$iv * 24 | 0) + 12 | 0; //@line 21032
   do {
    if ($2) {
     $8 = HEAP32[$7 >> 2] | 0; //@line 21035
     $10 = $3 + ($indvars$iv * 24 | 0) + 8 | 0; //@line 21037
     if ($8 >>> 0 <= (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) >>> 0) {
      HEAP32[$7 >> 2] = 0; //@line 21042
      $$2$us = $$060$us; //@line 21043
      break;
     }
     $$pr$us = HEAP32[$7 >> 2] | 0; //@line 21046
     if (!$$pr$us) {
      $$2$us = $$060$us; //@line 21049
     } else {
      if (($$pr$us - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) | 0) >>> 0 < $$060$us >>> 0) {
       $20 = HEAP32[$7 >> 2] | 0; //@line 21057
       $$2$us = $20 - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) | 0; //@line 21062
      } else {
       $$2$us = $$060$us; //@line 21064
      }
     }
    } else {
     HEAP32[$7 >> 2] = 0; //@line 21068
     $$2$us = 0; //@line 21069
    }
   } while (0);
   $indvars$iv = $indvars$iv + 1 | 0; //@line 21072
   if (($indvars$iv | 0) == ($wide$trip$count | 0)) {
    $$0$lcssa = $$2$us; //@line 21075
    break;
   } else {
    $$060$us = $$2$us; //@line 21078
   }
  }
  return $$0$lcssa | 0; //@line 21081
 } else {
  $$060 = -1; //@line 21083
  $indvars$iv62 = 0; //@line 21083
 }
 while (1) {
  $26 = $3 + ($indvars$iv62 * 24 | 0) + 4 | 0; //@line 21087
  $28 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$26 >> 2] | 0) | 0; //@line 21089
  if ($2) {
   $34 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$3 + ($indvars$iv62 * 24 | 0) + 8 >> 2] | 0) | 0; //@line 21095
  } else {
   $34 = 0; //@line 21097
  }
  if ($28 >>> 0 > $34 >>> 0) {
   $$sink2 = $26; //@line 21101
   label = 17; //@line 21102
  } else {
   if ($2) {
    $$sink2 = $3 + ($indvars$iv62 * 24 | 0) + 8 | 0; //@line 21106
    label = 17; //@line 21107
   } else {
    $41 = 0; //@line 21109
   }
  }
  if ((label | 0) == 17) {
   label = 0; //@line 21113
   $41 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$$sink2 >> 2] | 0) | 0; //@line 21117
  }
  $38 = $3 + ($indvars$iv62 * 24 | 0) + 12 | 0; //@line 21119
  $39 = HEAP32[$38 >> 2] | 0; //@line 21120
  if ($39 >>> 0 > $41 >>> 0) {
   $42 = $39 - $41 | 0; //@line 21123
   $$2 = $42 >>> 0 < $$060 >>> 0 ? $42 : $$060; //@line 21126
  } else {
   HEAP32[$38 >> 2] = 0; //@line 21128
   $$2 = $$060; //@line 21129
  }
  $indvars$iv62 = $indvars$iv62 + 1 | 0; //@line 21131
  if (($indvars$iv62 | 0) == ($wide$trip$count | 0)) {
   $$0$lcssa = $$2; //@line 21134
   break;
  } else {
   $$060 = $$2; //@line 21137
  }
 }
 return $$0$lcssa | 0; //@line 21140
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $13 = 0, $19 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $39 = 0, $50 = 0, $53 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16551
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 16557
  } else {
   if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
    $50 = HEAP32[$0 + 8 >> 2] | 0; //@line 16563
    $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 24 >> 2] | 0; //@line 16566
    $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16567
    FUNCTION_TABLE_viiiii[$53 & 7]($50, $1, $2, $3, $4); //@line 16568
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 658; //@line 16571
     sp = STACKTOP; //@line 16572
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16575
     break;
    }
   }
   if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
    $13 = $1 + 20 | 0; //@line 16583
    if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
     HEAP32[$1 + 32 >> 2] = $3; //@line 16588
     $19 = $1 + 44 | 0; //@line 16589
     if ((HEAP32[$19 >> 2] | 0) == 4) {
      break;
     }
     $22 = $1 + 52 | 0; //@line 16595
     HEAP8[$22 >> 0] = 0; //@line 16596
     $23 = $1 + 53 | 0; //@line 16597
     HEAP8[$23 >> 0] = 0; //@line 16598
     $25 = HEAP32[$0 + 8 >> 2] | 0; //@line 16600
     $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 20 >> 2] | 0; //@line 16603
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 16604
     FUNCTION_TABLE_viiiiii[$28 & 3]($25, $1, $2, $2, 1, $4); //@line 16605
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 657; //@line 16608
      HEAP32[$AsyncCtx + 4 >> 2] = $23; //@line 16610
      HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 16612
      HEAP32[$AsyncCtx + 12 >> 2] = $13; //@line 16614
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 16616
      HEAP32[$AsyncCtx + 20 >> 2] = $22; //@line 16618
      HEAP32[$AsyncCtx + 24 >> 2] = $19; //@line 16620
      sp = STACKTOP; //@line 16621
      return;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 16624
     if (!(HEAP8[$23 >> 0] | 0)) {
      $$037$off038 = 4; //@line 16628
      label = 13; //@line 16629
     } else {
      if (!(HEAP8[$22 >> 0] | 0)) {
       $$037$off038 = 3; //@line 16634
       label = 13; //@line 16635
      } else {
       $$037$off039 = 3; //@line 16637
      }
     }
     if ((label | 0) == 13) {
      HEAP32[$13 >> 2] = $2; //@line 16641
      $39 = $1 + 40 | 0; //@line 16642
      HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1; //@line 16645
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 16655
        $$037$off039 = $$037$off038; //@line 16656
       } else {
        $$037$off039 = $$037$off038; //@line 16658
       }
      } else {
       $$037$off039 = $$037$off038; //@line 16661
      }
     }
     HEAP32[$19 >> 2] = $$037$off039; //@line 16664
     break;
    }
   }
   if (($3 | 0) == 1) {
    HEAP32[$1 + 32 >> 2] = 1; //@line 16671
   }
  }
 } while (0);
 return;
}
function _initialize__async_cb_160($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $31 = 0, $33 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 29647
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29649
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29651
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29653
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29655
 $10 = $0 + 24 | 0; //@line 29657
 $12 = HEAP32[$10 >> 2] | 0; //@line 29659
 $15 = HEAP32[$10 + 4 >> 2] | 0; //@line 29662
 $17 = HEAP32[$0 + 32 >> 2] | 0; //@line 29664
 $19 = HEAP32[$0 + 36 >> 2] | 0; //@line 29666
 $21 = HEAP32[$2 >> 2] | 0; //@line 29669
 $22 = $21 + 32 | 0; //@line 29670
 HEAP32[$22 >> 2] = HEAP32[___async_retval >> 2]; //@line 29671
 $23 = $21 + 40 | 0; //@line 29672
 $24 = $23; //@line 29673
 HEAP32[$24 >> 2] = 0; //@line 29675
 HEAP32[$24 + 4 >> 2] = 0; //@line 29678
 $28 = $21 + 8 | 0; //@line 29679
 HEAP32[$28 >> 2] = $4; //@line 29680
 $29 = _bitshift64Shl(1, 0, $6 | 0) | 0; //@line 29681
 $31 = _i64Add($29 | 0, tempRet0 | 0, -1, 0) | 0; //@line 29683
 $33 = $21 + 12 | 0; //@line 29685
 HEAP32[$33 >> 2] = $31; //@line 29686
 HEAP32[$21 + 16 >> 2] = $8; //@line 29688
 $36 = $21 + 24 | 0; //@line 29690
 HEAP32[$36 >> 2] = $12; //@line 29692
 HEAP32[$36 + 4 >> 2] = $15; //@line 29695
 $40 = $21 + 48 | 0; //@line 29696
 $41 = $40; //@line 29697
 HEAP32[$41 >> 2] = 0; //@line 29699
 HEAP32[$41 + 4 >> 2] = 0; //@line 29702
 HEAP8[$21 + 56 >> 0] = 1; //@line 29704
 $48 = HEAP32[(HEAP32[$17 >> 2] | 0) + 4 >> 2] | 0; //@line 29707
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 29708
 $49 = FUNCTION_TABLE_i[$48 & 7]() | 0; //@line 29709
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 587; //@line 29712
  $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 29713
  HEAP32[$50 >> 2] = $2; //@line 29714
  $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 29715
  HEAP32[$51 >> 2] = $19; //@line 29716
  $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 29717
  HEAP32[$52 >> 2] = $22; //@line 29718
  $53 = $ReallocAsyncCtx4 + 16 | 0; //@line 29719
  HEAP32[$53 >> 2] = $33; //@line 29720
  $54 = $ReallocAsyncCtx4 + 20 | 0; //@line 29721
  HEAP32[$54 >> 2] = $28; //@line 29722
  $55 = $ReallocAsyncCtx4 + 24 | 0; //@line 29723
  HEAP32[$55 >> 2] = $23; //@line 29724
  $56 = $ReallocAsyncCtx4 + 28 | 0; //@line 29725
  HEAP32[$56 >> 2] = $40; //@line 29726
  sp = STACKTOP; //@line 29727
  return;
 }
 HEAP32[___async_retval >> 2] = $49; //@line 29731
 ___async_unwind = 0; //@line 29732
 HEAP32[$ReallocAsyncCtx4 >> 2] = 587; //@line 29733
 $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 29734
 HEAP32[$50 >> 2] = $2; //@line 29735
 $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 29736
 HEAP32[$51 >> 2] = $19; //@line 29737
 $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 29738
 HEAP32[$52 >> 2] = $22; //@line 29739
 $53 = $ReallocAsyncCtx4 + 16 | 0; //@line 29740
 HEAP32[$53 >> 2] = $33; //@line 29741
 $54 = $ReallocAsyncCtx4 + 20 | 0; //@line 29742
 HEAP32[$54 >> 2] = $28; //@line 29743
 $55 = $ReallocAsyncCtx4 + 24 | 0; //@line 29744
 HEAP32[$55 >> 2] = $23; //@line 29745
 $56 = $ReallocAsyncCtx4 + 28 | 0; //@line 29746
 HEAP32[$56 >> 2] = $40; //@line 29747
 sp = STACKTOP; //@line 29748
 return;
}
function _mbed_vtracef__async_cb_323($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 12660
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12662
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12664
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12666
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12668
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12670
 $12 = HEAP8[$0 + 24 >> 0] & 1; //@line 12673
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12675
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12677
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12679
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12681
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12683
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 12685
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 12687
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 12689
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 12691
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 12693
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 12695
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 12697
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 12699
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 12701
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 12703
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 12705
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 12707
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 12709
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 12711
 $55 = ($2 | 0 ? 4 : 0) + $2 + (HEAP32[___async_retval >> 2] | 0) | 0; //@line 12717
 $56 = HEAP32[172] | 0; //@line 12718
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(100) | 0; //@line 12719
 $57 = FUNCTION_TABLE_ii[$56 & 15]($55) | 0; //@line 12720
 if (!___async) {
  HEAP32[___async_retval >> 2] = $57; //@line 12724
  ___async_unwind = 0; //@line 12725
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 132; //@line 12727
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $4; //@line 12729
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $6; //@line 12731
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $18; //@line 12733
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $20; //@line 12735
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $22; //@line 12737
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $24; //@line 12739
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $26; //@line 12741
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $8; //@line 12743
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $10; //@line 12745
 HEAP8[$ReallocAsyncCtx5 + 40 >> 0] = $12 & 1; //@line 12748
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $28; //@line 12750
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $30; //@line 12752
 HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $32; //@line 12754
 HEAP32[$ReallocAsyncCtx5 + 56 >> 2] = $34; //@line 12756
 HEAP32[$ReallocAsyncCtx5 + 60 >> 2] = $36; //@line 12758
 HEAP32[$ReallocAsyncCtx5 + 64 >> 2] = $14; //@line 12760
 HEAP32[$ReallocAsyncCtx5 + 68 >> 2] = $16; //@line 12762
 HEAP32[$ReallocAsyncCtx5 + 72 >> 2] = $38; //@line 12764
 HEAP32[$ReallocAsyncCtx5 + 76 >> 2] = $40; //@line 12766
 HEAP32[$ReallocAsyncCtx5 + 80 >> 2] = $42; //@line 12768
 HEAP32[$ReallocAsyncCtx5 + 84 >> 2] = $44; //@line 12770
 HEAP32[$ReallocAsyncCtx5 + 88 >> 2] = $46; //@line 12772
 HEAP32[$ReallocAsyncCtx5 + 92 >> 2] = $48; //@line 12774
 HEAP32[$ReallocAsyncCtx5 + 96 >> 2] = $50; //@line 12776
 sp = STACKTOP; //@line 12777
 return;
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$unpack10 = 0, $10 = 0, $13 = 0, $19 = 0, $20 = 0, $23 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 11398
 STACKTOP = STACKTOP + 16 | 0; //@line 11399
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11399
 $3 = sp; //@line 11400
 $$unpack10 = HEAP32[$2 + 4 >> 2] | 0; //@line 11403
 $4 = $3 + 12 | 0; //@line 11404
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 11405
 HEAP32[$3 + 4 >> 2] = $$unpack10; //@line 11407
 HEAP32[$3 + 8 >> 2] = $1; //@line 11409
 HEAP32[$4 >> 2] = 844; //@line 11410
 $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 11411
 $5 = _equeue_alloc($0, 16) | 0; //@line 11412
 if (___async) {
  HEAP32[$AsyncCtx8 >> 2] = 369; //@line 11415
  HEAP32[$AsyncCtx8 + 4 >> 2] = $4; //@line 11417
  HEAP32[$AsyncCtx8 + 8 >> 2] = $0; //@line 11419
  HEAP32[$AsyncCtx8 + 12 >> 2] = $3; //@line 11421
  sp = STACKTOP; //@line 11422
  STACKTOP = sp; //@line 11423
  return 0; //@line 11423
 }
 _emscripten_free_async_context($AsyncCtx8 | 0); //@line 11425
 do {
  if (!$5) {
   $$0$i = 0; //@line 11429
  } else {
   $10 = HEAP32[$4 >> 2] | 0; //@line 11431
   do {
    if (!$10) {
     $19 = 0; //@line 11435
    } else {
     $13 = HEAP32[$10 + 4 >> 2] | 0; //@line 11438
     $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 11439
     FUNCTION_TABLE_vii[$13 & 15]($5, $3); //@line 11440
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 370; //@line 11443
      HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 11445
      HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 11447
      HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 11449
      HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 11451
      sp = STACKTOP; //@line 11452
      STACKTOP = sp; //@line 11453
      return 0; //@line 11453
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 11455
      $19 = HEAP32[$4 >> 2] | 0; //@line 11457
      break;
     }
    }
   } while (0);
   HEAP32[$5 + 12 >> 2] = $19; //@line 11463
   _equeue_event_dtor($5, 267); //@line 11464
   $AsyncCtx5 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11465
   $20 = _equeue_post($0, 268, $5) | 0; //@line 11466
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 371; //@line 11469
    HEAP32[$AsyncCtx5 + 4 >> 2] = $4; //@line 11471
    HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 11473
    sp = STACKTOP; //@line 11474
    STACKTOP = sp; //@line 11475
    return 0; //@line 11475
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 11477
    $$0$i = $20; //@line 11478
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$4 >> 2] | 0; //@line 11483
 if (!$23) {
  STACKTOP = sp; //@line 11486
  return $$0$i | 0; //@line 11486
 }
 $26 = HEAP32[$23 + 8 >> 2] | 0; //@line 11489
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11490
 FUNCTION_TABLE_vi[$26 & 1023]($3); //@line 11491
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 372; //@line 11494
  HEAP32[$AsyncCtx2 + 4 >> 2] = $$0$i; //@line 11496
  sp = STACKTOP; //@line 11497
  STACKTOP = sp; //@line 11498
  return 0; //@line 11498
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 11500
 STACKTOP = sp; //@line 11501
 return $$0$i | 0; //@line 11501
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_266($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6750
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6752
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6754
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6756
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 6758
 if (!$AsyncRetVal) {
  $22 = HEAP32[$2 >> 2] | 0; //@line 6761
  if (!$22) {
   HEAP32[___async_retval >> 2] = 0; //@line 6765
   return;
  }
  $25 = HEAP32[$22 + 8 >> 2] | 0; //@line 6769
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 6770
  FUNCTION_TABLE_vi[$25 & 1023]($6); //@line 6771
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 372; //@line 6774
   $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 6775
   HEAP32[$26 >> 2] = 0; //@line 6776
   sp = STACKTOP; //@line 6777
   return;
  }
  ___async_unwind = 0; //@line 6780
  HEAP32[$ReallocAsyncCtx2 >> 2] = 372; //@line 6781
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 6782
  HEAP32[$26 >> 2] = 0; //@line 6783
  sp = STACKTOP; //@line 6784
  return;
 }
 $9 = HEAP32[$2 >> 2] | 0; //@line 6787
 if (!$9) {
  HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 6791
  _equeue_event_dtor($AsyncRetVal, 267); //@line 6792
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 6793
  $18 = _equeue_post($4, 268, $AsyncRetVal) | 0; //@line 6794
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 371; //@line 6797
   $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 6798
   HEAP32[$19 >> 2] = $2; //@line 6799
   $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 6800
   HEAP32[$20 >> 2] = $6; //@line 6801
   sp = STACKTOP; //@line 6802
   return;
  }
  HEAP32[___async_retval >> 2] = $18; //@line 6806
  ___async_unwind = 0; //@line 6807
  HEAP32[$ReallocAsyncCtx3 >> 2] = 371; //@line 6808
  $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 6809
  HEAP32[$19 >> 2] = $2; //@line 6810
  $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 6811
  HEAP32[$20 >> 2] = $6; //@line 6812
  sp = STACKTOP; //@line 6813
  return;
 } else {
  $12 = HEAP32[$9 + 4 >> 2] | 0; //@line 6817
  $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 6818
  FUNCTION_TABLE_vii[$12 & 15]($AsyncRetVal, $6); //@line 6819
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 370; //@line 6822
   $13 = $ReallocAsyncCtx + 4 | 0; //@line 6823
   HEAP32[$13 >> 2] = $2; //@line 6824
   $14 = $ReallocAsyncCtx + 8 | 0; //@line 6825
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 6826
   $15 = $ReallocAsyncCtx + 12 | 0; //@line 6827
   HEAP32[$15 >> 2] = $4; //@line 6828
   $16 = $ReallocAsyncCtx + 16 | 0; //@line 6829
   HEAP32[$16 >> 2] = $6; //@line 6830
   sp = STACKTOP; //@line 6831
   return;
  }
  ___async_unwind = 0; //@line 6834
  HEAP32[$ReallocAsyncCtx >> 2] = 370; //@line 6835
  $13 = $ReallocAsyncCtx + 4 | 0; //@line 6836
  HEAP32[$13 >> 2] = $2; //@line 6837
  $14 = $ReallocAsyncCtx + 8 | 0; //@line 6838
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 6839
  $15 = $ReallocAsyncCtx + 12 | 0; //@line 6840
  HEAP32[$15 >> 2] = $4; //@line 6841
  $16 = $ReallocAsyncCtx + 16 | 0; //@line 6842
  HEAP32[$16 >> 2] = $6; //@line 6843
  sp = STACKTOP; //@line 6844
  return;
 }
}
function __ZN7LoRaMacC2Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $19 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, stop = 0;
 __ZN18LoRaWANTimeHandlerC2Ev($0); //@line 10705
 __ZN12LoRaPHYEU868C2ER18LoRaWANTimeHandler($0 + 4 | 0, $0); //@line 10707
 __ZN14LoRaMacCommandC2Ev($0 + 476 | 0); //@line 10709
 __ZN18LoRaMacChannelPlanC2Ev($0 + 752 | 0); //@line 10711
 __ZN13LoRaMacCryptoC2Ev($0 + 756 | 0); //@line 10713
 $5 = $0 + 1796 | 0; //@line 10714
 HEAP32[$5 >> 2] = 0; //@line 10715
 HEAP32[$5 + 4 >> 2] = 0; //@line 10715
 HEAP32[$5 + 8 >> 2] = 0; //@line 10715
 HEAP32[$5 + 12 >> 2] = 0; //@line 10715
 $6 = $0 + 1816 | 0; //@line 10716
 HEAP32[$6 >> 2] = 0; //@line 10717
 HEAP32[$6 + 4 >> 2] = 0; //@line 10717
 HEAP32[$6 + 8 >> 2] = 0; //@line 10717
 HEAP32[$6 + 12 >> 2] = 0; //@line 10717
 $7 = $0 + 1836 | 0; //@line 10718
 HEAP32[$7 >> 2] = 0; //@line 10719
 HEAP32[$7 + 4 >> 2] = 0; //@line 10719
 HEAP32[$7 + 8 >> 2] = 0; //@line 10719
 HEAP32[$7 + 12 >> 2] = 0; //@line 10719
 $8 = $0 + 1856 | 0; //@line 10720
 HEAP32[$8 >> 2] = 0; //@line 10721
 HEAP32[$8 + 4 >> 2] = 0; //@line 10721
 HEAP32[$8 + 8 >> 2] = 0; //@line 10721
 HEAP32[$8 + 12 >> 2] = 0; //@line 10721
 $9 = $0 + 1992 | 0; //@line 10722
 $10 = $0 + 1996 | 0; //@line 10723
 $11 = $0 + 2036 | 0; //@line 10724
 $12 = $0 + 2068 | 0; //@line 10725
 HEAP32[$0 + 2364 >> 2] = 0; //@line 10727
 $14 = $0 + 1704 | 0; //@line 10728
 $15 = $0 + 1752 | 0; //@line 10729
 HEAP16[$0 + 1440 >> 1] = 0; //@line 10731
 HEAP8[$0 + 1697 >> 0] = 0; //@line 10733
 HEAP8[$0 + 1174 >> 0] = 0; //@line 10735
 $19 = $0 + 1175 | 0; //@line 10736
 dest = $14; //@line 10737
 stop = dest + 44 | 0; //@line 10737
 do {
  HEAP32[dest >> 2] = 0; //@line 10737
  dest = dest + 4 | 0; //@line 10737
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 44 >> 1] = 0; //@line 10737
 HEAP32[$15 >> 2] = 0; //@line 10738
 HEAP32[$15 + 4 >> 2] = 0; //@line 10738
 HEAP32[$15 + 8 >> 2] = 0; //@line 10738
 HEAP32[$15 + 12 >> 2] = 0; //@line 10738
 _memset($9 | 0, 0, 369) | 0; //@line 10739
 HEAP8[$19 >> 0] = 1; //@line 10740
 HEAP32[$0 + 1768 >> 2] = 0; //@line 10742
 HEAP8[$0 + 1177 >> 0] = 0; //@line 10744
 HEAP8[$0 + 1178 >> 0] = 0; //@line 10746
 HEAP8[$0 + 1184 >> 0] = 0; //@line 10748
 HEAP32[$0 + 1788 >> 2] = 0; //@line 10750
 HEAP8[$0 + 1698 >> 0] = 1; //@line 10752
 HEAP8[$0 + 1699 >> 0] = 1; //@line 10754
 HEAP8[$0 + 1181 >> 0] = 0; //@line 10756
 HEAP32[$0 + 1792 >> 2] = 0; //@line 10758
 HEAP32[$0 + 1988 >> 2] = 0; //@line 10760
 HEAP8[$0 + 1936 >> 0] = 0; //@line 10762
 HEAP8[$0 + 1932 >> 0] = 0; //@line 10764
 HEAP32[$11 >> 2] = 0; //@line 10765
 HEAP32[$11 + 4 >> 2] = 0; //@line 10765
 HEAP32[$11 + 8 >> 2] = 0; //@line 10765
 HEAP32[$11 + 12 >> 2] = 0; //@line 10765
 HEAP32[$11 + 16 >> 2] = 0; //@line 10765
 HEAP32[$11 + 20 >> 2] = 0; //@line 10765
 HEAP32[$0 + 2040 >> 2] = 1; //@line 10767
 HEAP32[$12 >> 2] = 0; //@line 10768
 HEAP32[$12 + 4 >> 2] = 0; //@line 10768
 HEAP32[$12 + 8 >> 2] = 0; //@line 10768
 HEAP32[$12 + 12 >> 2] = 0; //@line 10768
 HEAP32[$12 + 16 >> 2] = 0; //@line 10768
 HEAP32[$0 + 2076 >> 2] = 1; //@line 10770
 dest = $10; //@line 10771
 stop = dest + 40 | 0; //@line 10771
 do {
  HEAP32[dest >> 2] = 0; //@line 10771
  dest = dest + 4 | 0; //@line 10771
 } while ((dest | 0) < (stop | 0));
 HEAP32[$0 + 2004 >> 2] = 1; //@line 10773
 return;
}
function _equeue_enqueue($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$051$ph = 0, $$05157 = 0, $$0515859 = 0, $$053 = 0, $13 = 0, $14 = 0, $16 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $33 = 0, $34 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $49 = 0, $54 = 0, $65 = 0, $67 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3329
 $13 = $1 - (HEAP32[$0 + 12 >> 2] | 0) | HEAPU8[$1 + 4 >> 0] << HEAP32[$0 + 16 >> 2]; //@line 3340
 $14 = $1 + 20 | 0; //@line 3341
 $16 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 3343
 HEAP32[$14 >> 2] = ($16 & ~($16 >> 31)) + $2; //@line 3348
 HEAP8[$1 + 5 >> 0] = HEAP8[$0 + 9 >> 0] | 0; //@line 3352
 $24 = $0 + 128 | 0; //@line 3353
 _equeue_mutex_lock($24); //@line 3354
 $25 = HEAP32[$0 >> 2] | 0; //@line 3355
 L1 : do {
  if (!$25) {
   $$051$ph = $0; //@line 3359
   label = 5; //@line 3360
  } else {
   $27 = HEAP32[$14 >> 2] | 0; //@line 3362
   $$053 = $0; //@line 3363
   $29 = $25; //@line 3363
   while (1) {
    if (((HEAP32[$29 + 20 >> 2] | 0) - $27 | 0) >= 0) {
     break;
    }
    $33 = $29 + 8 | 0; //@line 3372
    $34 = HEAP32[$33 >> 2] | 0; //@line 3373
    if (!$34) {
     $$051$ph = $33; //@line 3376
     label = 5; //@line 3377
     break L1;
    } else {
     $$053 = $33; //@line 3380
     $29 = $34; //@line 3380
    }
   }
   if ((HEAP32[$29 + 20 >> 2] | 0) != (HEAP32[$14 >> 2] | 0)) {
    $49 = $1 + 8 | 0; //@line 3388
    HEAP32[$49 >> 2] = $29; //@line 3389
    HEAP32[$29 + 16 >> 2] = $49; //@line 3391
    $$0515859 = $$053; //@line 3392
    label = 11; //@line 3393
    break;
   }
   $42 = HEAP32[$29 + 8 >> 2] | 0; //@line 3397
   $43 = $1 + 8 | 0; //@line 3398
   HEAP32[$43 >> 2] = $42; //@line 3399
   if ($42 | 0) {
    HEAP32[$42 + 16 >> 2] = $43; //@line 3403
   }
   $46 = HEAP32[$$053 >> 2] | 0; //@line 3405
   $47 = $1 + 12 | 0; //@line 3406
   HEAP32[$47 >> 2] = $46; //@line 3407
   HEAP32[$46 + 16 >> 2] = $47; //@line 3409
   $$05157 = $$053; //@line 3410
  }
 } while (0);
 if ((label | 0) == 5) {
  HEAP32[$1 + 8 >> 2] = 0; //@line 3415
  $$0515859 = $$051$ph; //@line 3416
  label = 11; //@line 3417
 }
 if ((label | 0) == 11) {
  HEAP32[$1 + 12 >> 2] = 0; //@line 3421
  $$05157 = $$0515859; //@line 3422
 }
 HEAP32[$$05157 >> 2] = $1; //@line 3424
 HEAP32[$1 + 16 >> 2] = $$05157; //@line 3426
 $54 = HEAP32[$0 + 40 >> 2] | 0; //@line 3428
 if (!$54) {
  _equeue_mutex_unlock($24); //@line 3431
  return $13 | 0; //@line 3432
 }
 if (!(HEAP8[$0 + 36 >> 0] | 0)) {
  _equeue_mutex_unlock($24); //@line 3438
  return $13 | 0; //@line 3439
 }
 if ((HEAP32[$0 >> 2] | 0) != ($1 | 0)) {
  _equeue_mutex_unlock($24); //@line 3444
  return $13 | 0; //@line 3445
 }
 if (HEAP32[$1 + 12 >> 2] | 0) {
  _equeue_mutex_unlock($24); //@line 3451
  return $13 | 0; //@line 3452
 }
 $65 = HEAP32[$0 + 44 >> 2] | 0; //@line 3455
 $67 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 3457
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 3461
 FUNCTION_TABLE_vii[$54 & 15]($65, $67 & ~($67 >> 31)); //@line 3462
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 122; //@line 3465
  HEAP32[$AsyncCtx + 4 >> 2] = $24; //@line 3467
  HEAP32[$AsyncCtx + 8 >> 2] = $13; //@line 3469
  sp = STACKTOP; //@line 3470
  return 0; //@line 3471
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3473
 _equeue_mutex_unlock($24); //@line 3474
 return $13 | 0; //@line 3475
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_373($0) {
 $0 = $0 | 0;
 var $$pre126 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 29606
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29608
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29610
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29612
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29614
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29616
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29618
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29620
 $$pre126 = HEAP32[$2 >> 2] | 0; //@line 29621
 if ($$pre126 | 0) {
  $17 = HEAP32[$$pre126 + 4 >> 2] | 0; //@line 29625
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(28) | 0; //@line 29626
  FUNCTION_TABLE_vii[$17 & 15]($6, $8); //@line 29627
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 182; //@line 29630
   $18 = $ReallocAsyncCtx14 + 4 | 0; //@line 29631
   HEAP32[$18 >> 2] = $2; //@line 29632
   $19 = $ReallocAsyncCtx14 + 8 | 0; //@line 29633
   HEAP32[$19 >> 2] = $4; //@line 29634
   $20 = $ReallocAsyncCtx14 + 12 | 0; //@line 29635
   HEAP32[$20 >> 2] = $8; //@line 29636
   $21 = $ReallocAsyncCtx14 + 16 | 0; //@line 29637
   HEAP32[$21 >> 2] = $10; //@line 29638
   $22 = $ReallocAsyncCtx14 + 20 | 0; //@line 29639
   HEAP32[$22 >> 2] = $12; //@line 29640
   $23 = $ReallocAsyncCtx14 + 24 | 0; //@line 29641
   HEAP32[$23 >> 2] = $14; //@line 29642
   sp = STACKTOP; //@line 29643
   return;
  }
  ___async_unwind = 0; //@line 29646
  HEAP32[$ReallocAsyncCtx14 >> 2] = 182; //@line 29647
  $18 = $ReallocAsyncCtx14 + 4 | 0; //@line 29648
  HEAP32[$18 >> 2] = $2; //@line 29649
  $19 = $ReallocAsyncCtx14 + 8 | 0; //@line 29650
  HEAP32[$19 >> 2] = $4; //@line 29651
  $20 = $ReallocAsyncCtx14 + 12 | 0; //@line 29652
  HEAP32[$20 >> 2] = $8; //@line 29653
  $21 = $ReallocAsyncCtx14 + 16 | 0; //@line 29654
  HEAP32[$21 >> 2] = $10; //@line 29655
  $22 = $ReallocAsyncCtx14 + 20 | 0; //@line 29656
  HEAP32[$22 >> 2] = $12; //@line 29657
  $23 = $ReallocAsyncCtx14 + 24 | 0; //@line 29658
  HEAP32[$23 >> 2] = $14; //@line 29659
  sp = STACKTOP; //@line 29660
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 29663
 __ZN7LoRaMac17bind_radio_driverER9LoRaRadio($10, $12); //@line 29664
 $26 = HEAP32[(HEAP32[$12 >> 2] | 0) + 72 >> 2] | 0; //@line 29667
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(16) | 0; //@line 29668
 FUNCTION_TABLE_vi[$26 & 1023]($12); //@line 29669
 if (___async) {
  HEAP32[$ReallocAsyncCtx16 >> 2] = 184; //@line 29672
  $27 = $ReallocAsyncCtx16 + 4 | 0; //@line 29673
  HEAP32[$27 >> 2] = $12; //@line 29674
  $28 = $ReallocAsyncCtx16 + 8 | 0; //@line 29675
  HEAP32[$28 >> 2] = $14; //@line 29676
  $29 = $ReallocAsyncCtx16 + 12 | 0; //@line 29677
  HEAP32[$29 >> 2] = $12; //@line 29678
  sp = STACKTOP; //@line 29679
  return;
 }
 ___async_unwind = 0; //@line 29682
 HEAP32[$ReallocAsyncCtx16 >> 2] = 184; //@line 29683
 $27 = $ReallocAsyncCtx16 + 4 | 0; //@line 29684
 HEAP32[$27 >> 2] = $12; //@line 29685
 $28 = $ReallocAsyncCtx16 + 8 | 0; //@line 29686
 HEAP32[$28 >> 2] = $14; //@line 29687
 $29 = $ReallocAsyncCtx16 + 12 | 0; //@line 29688
 HEAP32[$29 >> 2] = $12; //@line 29689
 sp = STACKTOP; //@line 29690
 return;
}
function __ZN7LoRaPHY11add_channelEPK16channel_params_th($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$$125$off0 = 0, $$026 = 0, $$4$off0 = 0, $$5$off039 = 0, $$5$off040$ph = 0, $11 = 0, $13 = 0, $15 = 0, $17 = 0, $20 = 0, $22 = 0, $40 = 0, $46 = 0, $47 = 0, $48 = 0, $53 = 0, $55 = 0, $6 = 0, $65 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20586
 if (!(HEAP8[$0 + 16 >> 0] | 0)) {
  $$026 = -1003; //@line 20591
  return $$026 | 0; //@line 20592
 }
 $6 = $2 & 255; //@line 20594
 if ((HEAPU8[$0 + 20 >> 0] | 0) <= ($2 & 255)) {
  $$026 = -1003; //@line 20599
  return $$026 | 0; //@line 20600
 }
 $11 = HEAP8[$1 + 8 >> 0] | 0; //@line 20603
 $13 = ($11 << 4 & 255) << 24 >> 24 >> 4; //@line 20605
 $15 = HEAP8[$0 + 26 >> 0] | 0; //@line 20607
 $17 = HEAP8[$0 + 27 >> 0] | 0; //@line 20609
 $20 = $11 << 24 >> 24 >> 4; //@line 20613
 $22 = $20 << 24 >> 24 <= $17 << 24 >> 24; //@line 20615
 $$$125$off0 = $13 << 24 >> 24 > $20 << 24 >> 24 | (($13 << 24 >> 24 > $17 << 24 >> 24 ? 1 : $13 << 24 >> 24 < $15 << 24 >> 24) | $20 << 24 >> 24 >= $15 << 24 >> 24 & $22 ^ 1); //@line 20620
 if ((HEAPU8[$0 + 18 >> 0] | 0) > ($2 & 255)) {
  $$4$off0 = ($13 << 24 >> 24 | 0) > ($15 & 255 | 0) | $$$125$off0 | $22 & $20 << 24 >> 24 >= (HEAP8[$0 + 31 >> 0] | 0) ^ 1; //@line 20634
  if ((HEAP32[$1 >> 2] | 0) == (HEAP32[(HEAP32[$0 + 124 >> 2] | 0) + ($6 * 12 | 0) >> 2] | 0)) {
   $$5$off039 = $$4$off0; //@line 20642
   label = 5; //@line 20643
  } else {
   $$5$off040$ph = $$4$off0; //@line 20645
  }
 } else {
  $$5$off039 = $$$125$off0; //@line 20648
  label = 5; //@line 20649
 }
 if ((label | 0) == 5) {
  $40 = HEAP8[$1 + 9 >> 0] | 0; //@line 20653
  if (($40 & 255) < (HEAPU8[$0 + 76 >> 0] | 0)) {
   $46 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 20660
   $47 = HEAP32[$1 >> 2] | 0; //@line 20661
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 20662
   $48 = FUNCTION_TABLE_iiii[$46 & 31]($0, $47, $40) | 0; //@line 20663
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 519; //@line 20666
    HEAP8[$AsyncCtx + 4 >> 0] = $$5$off039 & 1; //@line 20669
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 20671
    HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 20673
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 20675
    sp = STACKTOP; //@line 20676
    return 0; //@line 20677
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 20679
   if ($48) {
    if ($$5$off039) {
     $$026 = $$5$off039 ? -1005 : -1004; //@line 20683
     return $$026 | 0; //@line 20684
    }
    $53 = $0 + 124 | 0; //@line 20686
    $55 = (HEAP32[$53 >> 2] | 0) + ($6 * 12 | 0) | 0; //@line 20688
    HEAP32[$55 >> 2] = HEAP32[$1 >> 2]; //@line 20689
    HEAP32[$55 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 20689
    HEAP32[$55 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 20689
    HEAP8[(HEAP32[$53 >> 2] | 0) + ($6 * 12 | 0) + 9 >> 0] = HEAP8[$1 + 9 >> 0] | 0; //@line 20694
    $65 = (HEAP32[$0 + 116 >> 2] | 0) + ($6 >>> 4 << 1) | 0; //@line 20700
    HEAP16[$65 >> 1] = 1 << ($6 & 15) | HEAPU16[$65 >> 1]; //@line 20705
    $$026 = 0; //@line 20706
    return $$026 | 0; //@line 20707
   } else {
    $$5$off040$ph = $$5$off039; //@line 20709
   }
  } else {
   $$5$off040$ph = $$5$off039; //@line 20712
  }
 }
 $$026 = $$5$off040$ph ? -1006 : -1004; //@line 20716
 return $$026 | 0; //@line 20717
}
function __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$unpack10 = 0, $10 = 0, $13 = 0, $19 = 0, $20 = 0, $23 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 7786
 STACKTOP = STACKTOP + 16 | 0; //@line 7787
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7787
 $3 = sp; //@line 7788
 $$unpack10 = HEAP32[$2 + 4 >> 2] | 0; //@line 7791
 $4 = $3 + 12 | 0; //@line 7792
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 7793
 HEAP32[$3 + 4 >> 2] = $$unpack10; //@line 7795
 HEAP32[$3 + 8 >> 2] = $1; //@line 7797
 HEAP32[$4 >> 2] = 808; //@line 7798
 $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7799
 $5 = _equeue_alloc($0, 16) | 0; //@line 7800
 if (___async) {
  HEAP32[$AsyncCtx8 >> 2] = 265; //@line 7803
  HEAP32[$AsyncCtx8 + 4 >> 2] = $4; //@line 7805
  HEAP32[$AsyncCtx8 + 8 >> 2] = $0; //@line 7807
  HEAP32[$AsyncCtx8 + 12 >> 2] = $3; //@line 7809
  sp = STACKTOP; //@line 7810
  STACKTOP = sp; //@line 7811
  return 0; //@line 7811
 }
 _emscripten_free_async_context($AsyncCtx8 | 0); //@line 7813
 do {
  if (!$5) {
   $$0$i = 0; //@line 7817
  } else {
   $10 = HEAP32[$4 >> 2] | 0; //@line 7819
   do {
    if (!$10) {
     $19 = 0; //@line 7823
    } else {
     $13 = HEAP32[$10 + 4 >> 2] | 0; //@line 7826
     $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 7827
     FUNCTION_TABLE_vii[$13 & 15]($5, $3); //@line 7828
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 266; //@line 7831
      HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 7833
      HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 7835
      HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 7837
      HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 7839
      sp = STACKTOP; //@line 7840
      STACKTOP = sp; //@line 7841
      return 0; //@line 7841
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 7843
      $19 = HEAP32[$4 >> 2] | 0; //@line 7845
      break;
     }
    }
   } while (0);
   HEAP32[$5 + 12 >> 2] = $19; //@line 7851
   _equeue_event_dtor($5, 267); //@line 7852
   $AsyncCtx5 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7853
   $20 = _equeue_post($0, 268, $5) | 0; //@line 7854
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 269; //@line 7857
    HEAP32[$AsyncCtx5 + 4 >> 2] = $4; //@line 7859
    HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 7861
    sp = STACKTOP; //@line 7862
    STACKTOP = sp; //@line 7863
    return 0; //@line 7863
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 7865
    $$0$i = $20; //@line 7866
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$4 >> 2] | 0; //@line 7871
 if (!$23) {
  STACKTOP = sp; //@line 7874
  return $$0$i | 0; //@line 7874
 }
 $26 = HEAP32[$23 + 8 >> 2] | 0; //@line 7877
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7878
 FUNCTION_TABLE_vi[$26 & 1023]($3); //@line 7879
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 270; //@line 7882
  HEAP32[$AsyncCtx2 + 4 >> 2] = $$0$i; //@line 7884
  sp = STACKTOP; //@line 7885
  STACKTOP = sp; //@line 7886
  return 0; //@line 7886
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7888
 STACKTOP = sp; //@line 7889
 return $$0$i | 0; //@line 7889
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $12 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $36 = 0, $39 = 0, $40 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx14 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 15863
 STACKTOP = STACKTOP + 48 | 0; //@line 15864
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 15864
 $vararg_buffer10 = sp + 32 | 0; //@line 15865
 $vararg_buffer7 = sp + 24 | 0; //@line 15866
 $vararg_buffer3 = sp + 16 | 0; //@line 15867
 $vararg_buffer = sp; //@line 15868
 $0 = sp + 36 | 0; //@line 15869
 $1 = ___cxa_get_globals_fast() | 0; //@line 15870
 if ($1 | 0) {
  $3 = HEAP32[$1 >> 2] | 0; //@line 15873
  if ($3 | 0) {
   $7 = $3 + 48 | 0; //@line 15878
   $9 = HEAP32[$7 >> 2] | 0; //@line 15880
   $12 = HEAP32[$7 + 4 >> 2] | 0; //@line 15883
   if (!(($9 & -256 | 0) == 1126902528 & ($12 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer7 >> 2] = 17755; //@line 15889
    _abort_message(17705, $vararg_buffer7); //@line 15890
   }
   if (($9 | 0) == 1126902529 & ($12 | 0) == 1129074247) {
    $22 = HEAP32[$3 + 44 >> 2] | 0; //@line 15899
   } else {
    $22 = $3 + 80 | 0; //@line 15901
   }
   HEAP32[$0 >> 2] = $22; //@line 15903
   $23 = HEAP32[$3 >> 2] | 0; //@line 15904
   $25 = HEAP32[$23 + 4 >> 2] | 0; //@line 15906
   $28 = HEAP32[(HEAP32[94] | 0) + 16 >> 2] | 0; //@line 15909
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 15910
   $29 = FUNCTION_TABLE_iiii[$28 & 31](376, $23, $0) | 0; //@line 15911
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 648; //@line 15914
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 15916
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer3; //@line 15918
    HEAP32[$AsyncCtx + 12 >> 2] = $25; //@line 15920
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 15922
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 15924
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 15926
    sp = STACKTOP; //@line 15927
    STACKTOP = sp; //@line 15928
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 15930
   if (!$29) {
    HEAP32[$vararg_buffer3 >> 2] = 17755; //@line 15932
    HEAP32[$vararg_buffer3 + 4 >> 2] = $25; //@line 15934
    _abort_message(17664, $vararg_buffer3); //@line 15935
   }
   $36 = HEAP32[$0 >> 2] | 0; //@line 15938
   $39 = HEAP32[(HEAP32[$36 >> 2] | 0) + 8 >> 2] | 0; //@line 15941
   $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 15942
   $40 = FUNCTION_TABLE_ii[$39 & 15]($36) | 0; //@line 15943
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 649; //@line 15946
    HEAP32[$AsyncCtx14 + 4 >> 2] = $vararg_buffer; //@line 15948
    HEAP32[$AsyncCtx14 + 8 >> 2] = $25; //@line 15950
    HEAP32[$AsyncCtx14 + 12 >> 2] = $vararg_buffer; //@line 15952
    sp = STACKTOP; //@line 15953
    STACKTOP = sp; //@line 15954
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 15956
    HEAP32[$vararg_buffer >> 2] = 17755; //@line 15957
    HEAP32[$vararg_buffer + 4 >> 2] = $25; //@line 15959
    HEAP32[$vararg_buffer + 8 >> 2] = $40; //@line 15961
    _abort_message(17619, $vararg_buffer); //@line 15962
   }
  }
 }
 _abort_message(17743, $vararg_buffer10); //@line 15967
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_45($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20893
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20895
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20897
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20899
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20901
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20903
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20905
 if ((HEAP32[___async_retval >> 2] | 0) >= ($2 | 0)) {
  $25 = HEAP32[(HEAP32[$8 >> 2] | 0) + 8 >> 2] | 0; //@line 20912
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 20913
  FUNCTION_TABLE_vi[$25 & 1023]($8); //@line 20914
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 63; //@line 20917
   $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 20918
   HEAP32[$26 >> 2] = $10; //@line 20919
   $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 20920
   HEAP32[$27 >> 2] = $12; //@line 20921
   $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 20922
   $$expand_i1_val = 1; //@line 20923
   HEAP8[$28 >> 0] = $$expand_i1_val; //@line 20924
   sp = STACKTOP; //@line 20925
   return;
  }
  ___async_unwind = 0; //@line 20928
  HEAP32[$ReallocAsyncCtx2 >> 2] = 63; //@line 20929
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 20930
  HEAP32[$26 >> 2] = $10; //@line 20931
  $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 20932
  HEAP32[$27 >> 2] = $12; //@line 20933
  $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 20934
  $$expand_i1_val = 1; //@line 20935
  HEAP8[$28 >> 0] = $$expand_i1_val; //@line 20936
  sp = STACKTOP; //@line 20937
  return;
 }
 _mbed_tracef(16, 10996, 11162, $4); //@line 20940
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 20941
 $14 = __ZN4mbed5Timer7read_msEv($10) | 0; //@line 20942
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 62; //@line 20945
  $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 20946
  HEAP32[$15 >> 2] = $2; //@line 20947
  $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 20948
  HEAP32[$16 >> 2] = $4; //@line 20949
  $17 = $ReallocAsyncCtx5 + 12 | 0; //@line 20950
  HEAP32[$17 >> 2] = $6; //@line 20951
  $18 = $ReallocAsyncCtx5 + 16 | 0; //@line 20952
  HEAP32[$18 >> 2] = $8; //@line 20953
  $19 = $ReallocAsyncCtx5 + 20 | 0; //@line 20954
  HEAP32[$19 >> 2] = $10; //@line 20955
  $20 = $ReallocAsyncCtx5 + 24 | 0; //@line 20956
  HEAP32[$20 >> 2] = $12; //@line 20957
  sp = STACKTOP; //@line 20958
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 20962
 ___async_unwind = 0; //@line 20963
 HEAP32[$ReallocAsyncCtx5 >> 2] = 62; //@line 20964
 $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 20965
 HEAP32[$15 >> 2] = $2; //@line 20966
 $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 20967
 HEAP32[$16 >> 2] = $4; //@line 20968
 $17 = $ReallocAsyncCtx5 + 12 | 0; //@line 20969
 HEAP32[$17 >> 2] = $6; //@line 20970
 $18 = $ReallocAsyncCtx5 + 16 | 0; //@line 20971
 HEAP32[$18 >> 2] = $8; //@line 20972
 $19 = $ReallocAsyncCtx5 + 20 | 0; //@line 20973
 HEAP32[$19 >> 2] = $10; //@line 20974
 $20 = $ReallocAsyncCtx5 + 24 | 0; //@line 20975
 HEAP32[$20 >> 2] = $12; //@line 20976
 sp = STACKTOP; //@line 20977
 return;
}
function __ZN18LoRaMacChannelPlan11remove_planEv($0) {
 $0 = $0 | 0;
 var $10 = 0, $21 = 0, $24 = 0, $26 = 0, $32 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $indvars$iv = 0, $indvars$iv$next = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16182
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $39 = -1002; //@line 16186
  return $39 | 0; //@line 16187
 }
 $4 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 16190
 $6 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 0) | 0; //@line 16192
 $8 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 1) | 0; //@line 16194
 if (!($4 << 24 >> 24)) {
  $39 = 0; //@line 16197
  return $39 | 0; //@line 16198
 }
 $10 = $4 & 255; //@line 16200
 $indvars$iv = 0; //@line 16201
 while (1) {
  if (!(__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $8, $indvars$iv) | 0)) {
   if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $6, $indvars$iv) | 0) {
    if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
     $39 = -1002; //@line 16212
     label = 15; //@line 16213
     break;
    }
    if ($indvars$iv >>> 0 >= ((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0) & 255) >>> 0) {
     $39 = -1003; //@line 16221
     label = 15; //@line 16222
     break;
    }
    $21 = HEAP32[$0 >> 2] | 0; //@line 16225
    $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 64 >> 2] | 0; //@line 16228
    $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 16230
    $26 = FUNCTION_TABLE_iii[$24 & 15]($21, $indvars$iv & 255) | 0; //@line 16231
    if (___async) {
     label = 9; //@line 16234
     break;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16237
    if (!$26) {
     $39 = -1003; //@line 16239
     label = 15; //@line 16240
     break;
    }
    $32 = HEAP32[$0 >> 2] | 0; //@line 16243
    $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 16244
    __ZN7LoRaPHY18put_radio_to_sleepEv($32); //@line 16245
    if (___async) {
     label = 12; //@line 16248
     break;
    }
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 16251
   }
  }
  $indvars$iv$next = $indvars$iv + 1 | 0; //@line 16254
  if ($indvars$iv$next >>> 0 < $10 >>> 0) {
   $indvars$iv = $indvars$iv$next; //@line 16257
  } else {
   $39 = 0; //@line 16259
   label = 15; //@line 16260
   break;
  }
 }
 if ((label | 0) == 9) {
  HEAP32[$AsyncCtx >> 2] = 471; //@line 16265
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16267
  HEAP32[$AsyncCtx + 8 >> 2] = $indvars$iv; //@line 16269
  HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 16271
  HEAP32[$AsyncCtx + 16 >> 2] = $8; //@line 16273
  HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 16275
  sp = STACKTOP; //@line 16276
  return 0; //@line 16277
 } else if ((label | 0) == 12) {
  HEAP32[$AsyncCtx2 >> 2] = 472; //@line 16280
  HEAP32[$AsyncCtx2 + 4 >> 2] = $indvars$iv; //@line 16282
  HEAP32[$AsyncCtx2 + 8 >> 2] = $10; //@line 16284
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 16286
  HEAP32[$AsyncCtx2 + 16 >> 2] = $8; //@line 16288
  HEAP32[$AsyncCtx2 + 20 >> 2] = $6; //@line 16290
  sp = STACKTOP; //@line 16291
  return 0; //@line 16292
 } else if ((label | 0) == 15) {
  return $39 | 0; //@line 16295
 }
 return 0; //@line 16297
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_93($0) {
 $0 = $0 | 0;
 var $$038 = 0, $10 = 0, $17 = 0, $19 = 0, $2 = 0, $23 = 0, $28 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 23589
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23591
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 23593
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23595
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23597
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23599
 if (!(HEAP8[$0 + 24 >> 0] & 1)) {
  HEAP8[___async_retval >> 0] = 0; //@line 23606
  return;
 }
 if (!(HEAP32[$10 + 20 >> 2] | 0)) {
  $17 = HEAP32[$8 + 124 >> 2] | 0; //@line 23614
  $19 = HEAPU8[$10 >> 0] | 0; //@line 23616
  $23 = HEAP32[$17 + ($19 * 12 | 0) + 4 >> 2] | 0; //@line 23620
  $$038 = ($23 | 0) == 0 ? HEAP32[$17 + ($19 * 12 | 0) >> 2] | 0 : $23; //@line 23623
 } else {
  $$038 = $6; //@line 23625
 }
 $28 = HEAP32[$8 + 96 >> 2] | 0; //@line 23630
 $30 = HEAP32[$8 + 104 >> 2] | 0; //@line 23632
 $31 = $4 & 255; //@line 23633
 $33 = HEAP8[(HEAP32[$8 + 88 >> 2] | 0) + $31 >> 0] | 0; //@line 23635
 $34 = HEAP32[$2 >> 2] | 0; //@line 23636
 $37 = HEAP32[(HEAP32[$34 >> 2] | 0) + 72 >> 2] | 0; //@line 23639
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 23640
 FUNCTION_TABLE_vi[$37 & 1023]($34); //@line 23641
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 503; //@line 23644
  $38 = $ReallocAsyncCtx4 + 4 | 0; //@line 23645
  HEAP32[$38 >> 2] = $2; //@line 23646
  $39 = $ReallocAsyncCtx4 + 8 | 0; //@line 23647
  HEAP32[$39 >> 2] = $$038; //@line 23648
  $40 = $ReallocAsyncCtx4 + 12 | 0; //@line 23649
  HEAP8[$40 >> 0] = $4; //@line 23650
  $41 = $ReallocAsyncCtx4 + 16 | 0; //@line 23651
  HEAP32[$41 >> 2] = $8; //@line 23652
  $42 = $ReallocAsyncCtx4 + 20 | 0; //@line 23653
  HEAP32[$42 >> 2] = $10; //@line 23654
  $43 = $ReallocAsyncCtx4 + 24 | 0; //@line 23655
  HEAP8[$43 >> 0] = $33; //@line 23656
  $44 = $ReallocAsyncCtx4 + 28 | 0; //@line 23657
  HEAP32[$44 >> 2] = $28; //@line 23658
  $45 = $ReallocAsyncCtx4 + 32 | 0; //@line 23659
  HEAP32[$45 >> 2] = $30; //@line 23660
  $46 = $ReallocAsyncCtx4 + 36 | 0; //@line 23661
  HEAP32[$46 >> 2] = $31; //@line 23662
  sp = STACKTOP; //@line 23663
  return;
 }
 ___async_unwind = 0; //@line 23666
 HEAP32[$ReallocAsyncCtx4 >> 2] = 503; //@line 23667
 $38 = $ReallocAsyncCtx4 + 4 | 0; //@line 23668
 HEAP32[$38 >> 2] = $2; //@line 23669
 $39 = $ReallocAsyncCtx4 + 8 | 0; //@line 23670
 HEAP32[$39 >> 2] = $$038; //@line 23671
 $40 = $ReallocAsyncCtx4 + 12 | 0; //@line 23672
 HEAP8[$40 >> 0] = $4; //@line 23673
 $41 = $ReallocAsyncCtx4 + 16 | 0; //@line 23674
 HEAP32[$41 >> 2] = $8; //@line 23675
 $42 = $ReallocAsyncCtx4 + 20 | 0; //@line 23676
 HEAP32[$42 >> 2] = $10; //@line 23677
 $43 = $ReallocAsyncCtx4 + 24 | 0; //@line 23678
 HEAP8[$43 >> 0] = $33; //@line 23679
 $44 = $ReallocAsyncCtx4 + 28 | 0; //@line 23680
 HEAP32[$44 >> 2] = $28; //@line 23681
 $45 = $ReallocAsyncCtx4 + 32 | 0; //@line 23682
 HEAP32[$45 >> 2] = $30; //@line 23683
 $46 = $ReallocAsyncCtx4 + 36 | 0; //@line 23684
 HEAP32[$46 >> 2] = $31; //@line 23685
 sp = STACKTOP; //@line 23686
 return;
}
function __ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_125($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $34 = 0, $38 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 26752
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26754
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26756
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26758
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 26760
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26762
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26764
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26766
 if (HEAP8[___async_retval >> 0] & 1) {
  $34 = $2; //@line 26771
 } else {
  $20 = $2 + 1 | 0; //@line 26773
  if (($20 | 0) < (HEAPU8[$10 >> 0] | 0 | 0)) {
   $18 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 26780
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 26782
   $21 = FUNCTION_TABLE_iiii[$18 & 31]($6, $14, $20 & 255) | 0; //@line 26783
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 495; //@line 26786
    $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 26787
    HEAP32[$22 >> 2] = $20; //@line 26788
    $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 26789
    HEAP32[$23 >> 2] = $4; //@line 26790
    $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 26791
    HEAP32[$24 >> 2] = $6; //@line 26792
    $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 26793
    HEAP8[$25 >> 0] = $8; //@line 26794
    $26 = $ReallocAsyncCtx3 + 20 | 0; //@line 26795
    HEAP32[$26 >> 2] = $10; //@line 26796
    $27 = $ReallocAsyncCtx3 + 24 | 0; //@line 26797
    HEAP32[$27 >> 2] = $12; //@line 26798
    $28 = $ReallocAsyncCtx3 + 28 | 0; //@line 26799
    HEAP32[$28 >> 2] = $14; //@line 26800
    sp = STACKTOP; //@line 26801
    return;
   }
   HEAP8[___async_retval >> 0] = $21 & 1; //@line 26806
   ___async_unwind = 0; //@line 26807
   HEAP32[$ReallocAsyncCtx3 >> 2] = 495; //@line 26808
   $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 26809
   HEAP32[$22 >> 2] = $20; //@line 26810
   $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 26811
   HEAP32[$23 >> 2] = $4; //@line 26812
   $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 26813
   HEAP32[$24 >> 2] = $6; //@line 26814
   $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 26815
   HEAP8[$25 >> 0] = $8; //@line 26816
   $26 = $ReallocAsyncCtx3 + 20 | 0; //@line 26817
   HEAP32[$26 >> 2] = $10; //@line 26818
   $27 = $ReallocAsyncCtx3 + 24 | 0; //@line 26819
   HEAP32[$27 >> 2] = $12; //@line 26820
   $28 = $ReallocAsyncCtx3 + 28 | 0; //@line 26821
   HEAP32[$28 >> 2] = $14; //@line 26822
   sp = STACKTOP; //@line 26823
   return;
  } else {
   $34 = -1; //@line 26826
  }
 }
 HEAP8[$4 + 9 >> 0] = $34; //@line 26831
 $38 = HEAP32[(HEAP32[$6 >> 2] | 0) + 60 >> 2] | 0; //@line 26834
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 26835
 $39 = FUNCTION_TABLE_iiii[$38 & 31]($6, $4, $8) | 0; //@line 26836
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 496; //@line 26839
  sp = STACKTOP; //@line 26840
  return;
 }
 HEAP32[___async_retval >> 2] = $39; //@line 26844
 ___async_unwind = 0; //@line 26845
 HEAP32[$ReallocAsyncCtx4 >> 2] = 496; //@line 26846
 sp = STACKTOP; //@line 26847
 return;
}
function _mbedtls_ccm_free__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $18 = 0, $2 = 0, $22 = 0, $26 = 0, $30 = 0, $34 = 0, $38 = 0, $42 = 0, $46 = 0, $50 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $66 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8
 HEAP8[$2 >> 0] = 0; //@line 10
 HEAP8[$2 + 1 >> 0] = 0; //@line 12
 HEAP8[$2 + 2 >> 0] = 0; //@line 14
 $6 = $2 + 4 | 0; //@line 15
 HEAP8[$2 + 3 >> 0] = 0; //@line 16
 HEAP8[$6 >> 0] = 0; //@line 18
 HEAP8[$6 + 1 >> 0] = 0; //@line 20
 HEAP8[$6 + 2 >> 0] = 0; //@line 22
 $10 = $6 + 4 | 0; //@line 23
 HEAP8[$6 + 3 >> 0] = 0; //@line 24
 HEAP8[$10 >> 0] = 0; //@line 26
 HEAP8[$10 + 1 >> 0] = 0; //@line 28
 HEAP8[$10 + 2 >> 0] = 0; //@line 30
 $14 = $6 + 8 | 0; //@line 31
 HEAP8[$10 + 3 >> 0] = 0; //@line 32
 HEAP8[$14 >> 0] = 0; //@line 34
 HEAP8[$14 + 1 >> 0] = 0; //@line 36
 HEAP8[$14 + 2 >> 0] = 0; //@line 38
 $18 = $6 + 12 | 0; //@line 39
 HEAP8[$14 + 3 >> 0] = 0; //@line 40
 HEAP8[$18 >> 0] = 0; //@line 42
 HEAP8[$18 + 1 >> 0] = 0; //@line 44
 HEAP8[$18 + 2 >> 0] = 0; //@line 46
 $22 = $6 + 16 | 0; //@line 47
 HEAP8[$18 + 3 >> 0] = 0; //@line 48
 HEAP8[$22 >> 0] = 0; //@line 50
 HEAP8[$22 + 1 >> 0] = 0; //@line 52
 HEAP8[$22 + 2 >> 0] = 0; //@line 54
 $26 = $6 + 20 | 0; //@line 55
 HEAP8[$22 + 3 >> 0] = 0; //@line 56
 HEAP8[$26 >> 0] = 0; //@line 58
 HEAP8[$26 + 1 >> 0] = 0; //@line 60
 HEAP8[$26 + 2 >> 0] = 0; //@line 62
 $30 = $6 + 24 | 0; //@line 63
 HEAP8[$26 + 3 >> 0] = 0; //@line 64
 HEAP8[$30 >> 0] = 0; //@line 66
 HEAP8[$30 + 1 >> 0] = 0; //@line 68
 HEAP8[$30 + 2 >> 0] = 0; //@line 70
 $34 = $6 + 28 | 0; //@line 71
 HEAP8[$30 + 3 >> 0] = 0; //@line 72
 HEAP8[$34 >> 0] = 0; //@line 74
 HEAP8[$34 + 1 >> 0] = 0; //@line 76
 HEAP8[$34 + 2 >> 0] = 0; //@line 78
 $38 = $6 + 32 | 0; //@line 79
 HEAP8[$34 + 3 >> 0] = 0; //@line 80
 HEAP8[$38 >> 0] = 0; //@line 82
 HEAP8[$38 + 1 >> 0] = 0; //@line 84
 HEAP8[$38 + 2 >> 0] = 0; //@line 86
 $42 = $6 + 36 | 0; //@line 87
 HEAP8[$38 + 3 >> 0] = 0; //@line 88
 HEAP8[$42 >> 0] = 0; //@line 90
 HEAP8[$42 + 1 >> 0] = 0; //@line 92
 HEAP8[$42 + 2 >> 0] = 0; //@line 94
 $46 = $6 + 40 | 0; //@line 95
 HEAP8[$42 + 3 >> 0] = 0; //@line 96
 HEAP8[$46 >> 0] = 0; //@line 98
 HEAP8[$46 + 1 >> 0] = 0; //@line 100
 HEAP8[$46 + 2 >> 0] = 0; //@line 102
 $50 = $6 + 44 | 0; //@line 103
 HEAP8[$46 + 3 >> 0] = 0; //@line 104
 HEAP8[$50 >> 0] = 0; //@line 106
 HEAP8[$50 + 1 >> 0] = 0; //@line 108
 HEAP8[$50 + 2 >> 0] = 0; //@line 110
 $54 = $6 + 48 | 0; //@line 111
 HEAP8[$50 + 3 >> 0] = 0; //@line 112
 HEAP8[$54 >> 0] = 0; //@line 114
 HEAP8[$54 + 1 >> 0] = 0; //@line 116
 HEAP8[$54 + 2 >> 0] = 0; //@line 118
 $58 = $6 + 52 | 0; //@line 119
 HEAP8[$54 + 3 >> 0] = 0; //@line 120
 HEAP8[$58 >> 0] = 0; //@line 122
 HEAP8[$58 + 1 >> 0] = 0; //@line 124
 HEAP8[$58 + 2 >> 0] = 0; //@line 126
 $62 = $6 + 56 | 0; //@line 127
 HEAP8[$58 + 3 >> 0] = 0; //@line 128
 HEAP8[$62 >> 0] = 0; //@line 130
 HEAP8[$62 + 1 >> 0] = 0; //@line 132
 HEAP8[$62 + 2 >> 0] = 0; //@line 134
 $66 = $6 + 60 | 0; //@line 135
 HEAP8[$62 + 3 >> 0] = 0; //@line 136
 HEAP8[$66 >> 0] = 0; //@line 138
 HEAP8[$66 + 1 >> 0] = 0; //@line 140
 HEAP8[$66 + 2 >> 0] = 0; //@line 142
 HEAP8[$66 + 3 >> 0] = 0; //@line 143
 return;
}
function __ZN18LoRaMacChannelPlan11remove_planEv__async_cb_62($0) {
 $0 = $0 | 0;
 var $10 = 0, $21 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $indvars$iv$reg2mem$0 = 0, label = 0, sp = 0, $indvars$iv$reg2mem$0$looptemp = 0;
 sp = STACKTOP; //@line 21921
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21925
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21927
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21929
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21931
 $indvars$iv$reg2mem$0 = HEAP32[$0 + 4 >> 2] | 0; //@line 21932
 while (1) {
  $indvars$iv$reg2mem$0$looptemp = $indvars$iv$reg2mem$0;
  $indvars$iv$reg2mem$0 = $indvars$iv$reg2mem$0 + 1 | 0; //@line 21934
  if ($indvars$iv$reg2mem$0 >>> 0 >= $4 >>> 0) {
   $35 = 0; //@line 21937
   label = 11; //@line 21938
   break;
  }
  if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$6 >> 2] | 0, $8, $indvars$iv$reg2mem$0) | 0) {
   $indvars$iv$reg2mem$0 = $indvars$iv$reg2mem$0; //@line 21944
   continue;
  }
  if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$6 >> 2] | 0, $10, $indvars$iv$reg2mem$0) | 0) {
   break;
  }
 }
 if ((label | 0) == 11) {
  $34 = ___async_retval; //@line 21956
  HEAP32[$34 >> 2] = $35; //@line 21957
  return;
 }
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$6 >> 2] | 0) | 0)) {
  $35 = -1002; //@line 21963
  $34 = ___async_retval; //@line 21964
  HEAP32[$34 >> 2] = $35; //@line 21965
  return;
 }
 if ($indvars$iv$reg2mem$0 >>> 0 >= ((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$6 >> 2] | 0) | 0) & 255) >>> 0) {
  $35 = -1003; //@line 21973
  $34 = ___async_retval; //@line 21974
  HEAP32[$34 >> 2] = $35; //@line 21975
  return;
 }
 $21 = HEAP32[$6 >> 2] | 0; //@line 21978
 $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 64 >> 2] | 0; //@line 21981
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 21983
 $26 = FUNCTION_TABLE_iii[$24 & 15]($21, $indvars$iv$reg2mem$0 & 255) | 0; //@line 21984
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 471; //@line 21987
  $27 = $ReallocAsyncCtx + 4 | 0; //@line 21988
  HEAP32[$27 >> 2] = $6; //@line 21989
  $28 = $ReallocAsyncCtx + 8 | 0; //@line 21990
  HEAP32[$28 >> 2] = $indvars$iv$reg2mem$0; //@line 21991
  $29 = $ReallocAsyncCtx + 12 | 0; //@line 21992
  HEAP32[$29 >> 2] = $4; //@line 21993
  $30 = $ReallocAsyncCtx + 16 | 0; //@line 21994
  HEAP32[$30 >> 2] = $8; //@line 21995
  $31 = $ReallocAsyncCtx + 20 | 0; //@line 21996
  HEAP32[$31 >> 2] = $10; //@line 21997
  sp = STACKTOP; //@line 21998
  return;
 }
 HEAP8[___async_retval >> 0] = $26 & 1; //@line 22003
 ___async_unwind = 0; //@line 22004
 HEAP32[$ReallocAsyncCtx >> 2] = 471; //@line 22005
 $27 = $ReallocAsyncCtx + 4 | 0; //@line 22006
 HEAP32[$27 >> 2] = $6; //@line 22007
 $28 = $ReallocAsyncCtx + 8 | 0; //@line 22008
 HEAP32[$28 >> 2] = $indvars$iv$reg2mem$0; //@line 22009
 $29 = $ReallocAsyncCtx + 12 | 0; //@line 22010
 HEAP32[$29 >> 2] = $4; //@line 22011
 $30 = $ReallocAsyncCtx + 16 | 0; //@line 22012
 HEAP32[$30 >> 2] = $8; //@line 22013
 $31 = $ReallocAsyncCtx + 20 | 0; //@line 22014
 HEAP32[$31 >> 2] = $10; //@line 22015
 sp = STACKTOP; //@line 22016
 return;
}
function _mbed_error_vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 8027
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8029
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8031
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 8033
 if (($AsyncRetVal | 0) <= 0) {
  return;
 }
 if (!(HEAP32[4897] | 0)) {
  _serial_init(19592, 2, 3); //@line 8041
 }
 $9 = HEAP8[$4 >> 0] | 0; //@line 8043
 if (0 == 13 | $9 << 24 >> 24 != 10) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 8049
  _serial_putc(19592, $9 << 24 >> 24); //@line 8050
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 619; //@line 8053
   $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 8054
   HEAP32[$18 >> 2] = 0; //@line 8055
   $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 8056
   HEAP32[$19 >> 2] = $AsyncRetVal; //@line 8057
   $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 8058
   HEAP32[$20 >> 2] = $2; //@line 8059
   $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 8060
   HEAP8[$21 >> 0] = $9; //@line 8061
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 8062
   HEAP32[$22 >> 2] = $4; //@line 8063
   sp = STACKTOP; //@line 8064
   return;
  }
  ___async_unwind = 0; //@line 8067
  HEAP32[$ReallocAsyncCtx2 >> 2] = 619; //@line 8068
  $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 8069
  HEAP32[$18 >> 2] = 0; //@line 8070
  $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 8071
  HEAP32[$19 >> 2] = $AsyncRetVal; //@line 8072
  $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 8073
  HEAP32[$20 >> 2] = $2; //@line 8074
  $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 8075
  HEAP8[$21 >> 0] = $9; //@line 8076
  $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 8077
  HEAP32[$22 >> 2] = $4; //@line 8078
  sp = STACKTOP; //@line 8079
  return;
 } else {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 8082
  _serial_putc(19592, 13); //@line 8083
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 618; //@line 8086
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 8087
   HEAP8[$12 >> 0] = $9; //@line 8088
   $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 8089
   HEAP32[$13 >> 2] = 0; //@line 8090
   $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 8091
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 8092
   $15 = $ReallocAsyncCtx3 + 16 | 0; //@line 8093
   HEAP32[$15 >> 2] = $2; //@line 8094
   $16 = $ReallocAsyncCtx3 + 20 | 0; //@line 8095
   HEAP32[$16 >> 2] = $4; //@line 8096
   sp = STACKTOP; //@line 8097
   return;
  }
  ___async_unwind = 0; //@line 8100
  HEAP32[$ReallocAsyncCtx3 >> 2] = 618; //@line 8101
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 8102
  HEAP8[$12 >> 0] = $9; //@line 8103
  $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 8104
  HEAP32[$13 >> 2] = 0; //@line 8105
  $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 8106
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 8107
  $15 = $ReallocAsyncCtx3 + 16 | 0; //@line 8108
  HEAP32[$15 >> 2] = $2; //@line 8109
  $16 = $ReallocAsyncCtx3 + 20 | 0; //@line 8110
  HEAP32[$16 >> 2] = $4; //@line 8111
  sp = STACKTOP; //@line 8112
  return;
 }
}
function _mbed_error_vfprintf__async_cb_280($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 8120
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8124
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8126
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8130
 $12 = (HEAP32[$0 + 4 >> 2] | 0) + 1 | 0; //@line 8131
 if (($12 | 0) == ($4 | 0)) {
  return;
 }
 $13 = HEAP8[$10 + $12 >> 0] | 0; //@line 8137
 if ((HEAP8[$0 + 16 >> 0] | 0) == 13 | $13 << 24 >> 24 != 10) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 8143
  _serial_putc(19592, $13 << 24 >> 24); //@line 8144
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 619; //@line 8147
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 8148
   HEAP32[$22 >> 2] = $12; //@line 8149
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 8150
   HEAP32[$23 >> 2] = $4; //@line 8151
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 8152
   HEAP32[$24 >> 2] = $6; //@line 8153
   $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 8154
   HEAP8[$25 >> 0] = $13; //@line 8155
   $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 8156
   HEAP32[$26 >> 2] = $10; //@line 8157
   sp = STACKTOP; //@line 8158
   return;
  }
  ___async_unwind = 0; //@line 8161
  HEAP32[$ReallocAsyncCtx2 >> 2] = 619; //@line 8162
  $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 8163
  HEAP32[$22 >> 2] = $12; //@line 8164
  $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 8165
  HEAP32[$23 >> 2] = $4; //@line 8166
  $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 8167
  HEAP32[$24 >> 2] = $6; //@line 8168
  $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 8169
  HEAP8[$25 >> 0] = $13; //@line 8170
  $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 8171
  HEAP32[$26 >> 2] = $10; //@line 8172
  sp = STACKTOP; //@line 8173
  return;
 } else {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 8176
  _serial_putc(19592, 13); //@line 8177
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 618; //@line 8180
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 8181
   HEAP8[$16 >> 0] = $13; //@line 8182
   $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 8183
   HEAP32[$17 >> 2] = $12; //@line 8184
   $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 8185
   HEAP32[$18 >> 2] = $4; //@line 8186
   $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 8187
   HEAP32[$19 >> 2] = $6; //@line 8188
   $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 8189
   HEAP32[$20 >> 2] = $10; //@line 8190
   sp = STACKTOP; //@line 8191
   return;
  }
  ___async_unwind = 0; //@line 8194
  HEAP32[$ReallocAsyncCtx3 >> 2] = 618; //@line 8195
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 8196
  HEAP8[$16 >> 0] = $13; //@line 8197
  $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 8198
  HEAP32[$17 >> 2] = $12; //@line 8199
  $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 8200
  HEAP32[$18 >> 2] = $4; //@line 8201
  $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 8202
  HEAP32[$19 >> 2] = $6; //@line 8203
  $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 8204
  HEAP32[$20 >> 2] = $10; //@line 8205
  sp = STACKTOP; //@line 8206
  return;
 }
}
function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $27 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10841
 STACKTOP = STACKTOP + 48 | 0; //@line 10842
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 10842
 $vararg_buffer3 = sp + 16 | 0; //@line 10843
 $vararg_buffer = sp; //@line 10844
 $3 = sp + 32 | 0; //@line 10845
 $4 = $0 + 28 | 0; //@line 10846
 $5 = HEAP32[$4 >> 2] | 0; //@line 10847
 HEAP32[$3 >> 2] = $5; //@line 10848
 $7 = $0 + 20 | 0; //@line 10850
 $9 = (HEAP32[$7 >> 2] | 0) - $5 | 0; //@line 10852
 HEAP32[$3 + 4 >> 2] = $9; //@line 10853
 HEAP32[$3 + 8 >> 2] = $1; //@line 10855
 HEAP32[$3 + 12 >> 2] = $2; //@line 10857
 $12 = $9 + $2 | 0; //@line 10858
 $13 = $0 + 60 | 0; //@line 10859
 HEAP32[$vararg_buffer >> 2] = HEAP32[$13 >> 2]; //@line 10862
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 10864
 HEAP32[$vararg_buffer + 8 >> 2] = 2; //@line 10866
 $17 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0; //@line 10868
 L1 : do {
  if (($12 | 0) == ($17 | 0)) {
   label = 3; //@line 10872
  } else {
   $$04756 = 2; //@line 10874
   $$04855 = $12; //@line 10874
   $$04954 = $3; //@line 10874
   $27 = $17; //@line 10874
   while (1) {
    if (($27 | 0) < 0) {
     break;
    }
    $$04855 = $$04855 - $27 | 0; //@line 10880
    $37 = HEAP32[$$04954 + 4 >> 2] | 0; //@line 10882
    $38 = $27 >>> 0 > $37 >>> 0; //@line 10883
    $$150 = $38 ? $$04954 + 8 | 0 : $$04954; //@line 10885
    $$1 = $$04756 + ($38 << 31 >> 31) | 0; //@line 10887
    $$0 = $27 - ($38 ? $37 : 0) | 0; //@line 10889
    HEAP32[$$150 >> 2] = (HEAP32[$$150 >> 2] | 0) + $$0; //@line 10892
    $44 = $$150 + 4 | 0; //@line 10893
    HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) - $$0; //@line 10896
    HEAP32[$vararg_buffer3 >> 2] = HEAP32[$13 >> 2]; //@line 10899
    HEAP32[$vararg_buffer3 + 4 >> 2] = $$150; //@line 10901
    HEAP32[$vararg_buffer3 + 8 >> 2] = $$1; //@line 10903
    $27 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0; //@line 10905
    if (($$04855 | 0) == ($27 | 0)) {
     label = 3; //@line 10908
     break L1;
    } else {
     $$04756 = $$1; //@line 10911
     $$04954 = $$150; //@line 10911
    }
   }
   HEAP32[$0 + 16 >> 2] = 0; //@line 10915
   HEAP32[$4 >> 2] = 0; //@line 10916
   HEAP32[$7 >> 2] = 0; //@line 10917
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32; //@line 10920
   if (($$04756 | 0) == 2) {
    $$051 = 0; //@line 10923
   } else {
    $$051 = $2 - (HEAP32[$$04954 + 4 >> 2] | 0) | 0; //@line 10928
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $20 = HEAP32[$0 + 44 >> 2] | 0; //@line 10934
  HEAP32[$0 + 16 >> 2] = $20 + (HEAP32[$0 + 48 >> 2] | 0); //@line 10939
  $25 = $20; //@line 10940
  HEAP32[$4 >> 2] = $25; //@line 10941
  HEAP32[$7 >> 2] = $25; //@line 10942
  $$051 = $2; //@line 10943
 }
 STACKTOP = sp; //@line 10945
 return $$051 | 0; //@line 10945
}
function __ZN7LoRaMacD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 29884
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29886
 $4 = HEAP32[$2 + 1848 >> 2] | 0; //@line 29888
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 29893
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 29894
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 1836 | 0); //@line 29895
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 352; //@line 29898
   $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 29899
   HEAP32[$9 >> 2] = $2; //@line 29900
   sp = STACKTOP; //@line 29901
   return;
  }
  ___async_unwind = 0; //@line 29904
  HEAP32[$ReallocAsyncCtx2 >> 2] = 352; //@line 29905
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 29906
  HEAP32[$9 >> 2] = $2; //@line 29907
  sp = STACKTOP; //@line 29908
  return;
 }
 $11 = HEAP32[$2 + 1828 >> 2] | 0; //@line 29912
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 29917
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 29918
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 1816 | 0); //@line 29919
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 353; //@line 29922
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 29923
   HEAP32[$16 >> 2] = $2; //@line 29924
   sp = STACKTOP; //@line 29925
   return;
  }
  ___async_unwind = 0; //@line 29928
  HEAP32[$ReallocAsyncCtx3 >> 2] = 353; //@line 29929
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 29930
  HEAP32[$16 >> 2] = $2; //@line 29931
  sp = STACKTOP; //@line 29932
  return;
 }
 $18 = HEAP32[$2 + 1808 >> 2] | 0; //@line 29936
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 29941
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 29942
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 1796 | 0); //@line 29943
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 354; //@line 29946
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 29947
   HEAP32[$23 >> 2] = $2; //@line 29948
   sp = STACKTOP; //@line 29949
   return;
  }
  ___async_unwind = 0; //@line 29952
  HEAP32[$ReallocAsyncCtx4 >> 2] = 354; //@line 29953
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 29954
  HEAP32[$23 >> 2] = $2; //@line 29955
  sp = STACKTOP; //@line 29956
  return;
 }
 $25 = HEAP32[$2 + 748 >> 2] | 0; //@line 29960
 if (!$25) {
  __ZN12LoRaPHYEU868D2Ev($2 + 4 | 0); //@line 29964
  return;
 }
 $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 29969
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 29970
 FUNCTION_TABLE_vi[$29 & 1023]($2 + 736 | 0); //@line 29971
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 355; //@line 29974
  $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 29975
  HEAP32[$30 >> 2] = $2; //@line 29976
  sp = STACKTOP; //@line 29977
  return;
 }
 ___async_unwind = 0; //@line 29980
 HEAP32[$ReallocAsyncCtx5 >> 2] = 355; //@line 29981
 $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 29982
 HEAP32[$30 >> 2] = $2; //@line 29983
 sp = STACKTOP; //@line 29984
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_21($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $24 = 0, $26 = 0, $34 = 0, $36 = 0, $4 = 0, $41 = 0, $45 = 0, $48 = 0, $6 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 19627
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19629
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19631
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19633
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19639
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19641
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19643
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19645
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 19649
 if ((HEAP8[$0 + 40 >> 0] | 0) == 7) {
  $24 = $2 + 1442 | 0; //@line 19652
  $26 = HEAPU8[HEAP32[$0 + 16 >> 2] >> 0] | 0; //@line 19654
  _memcpy($24 | 0, (HEAP32[$0 + 20 >> 2] | 0) + $26 | 0, $12 | 0) | 0; //@line 19656
  HEAP32[$2 + 2e3 >> 2] = 3; //@line 19658
  HEAP32[$14 >> 2] = 0; //@line 19659
  HEAP32[$16 >> 2] = $24; //@line 19660
  HEAP16[$18 >> 1] = $12 - $26; //@line 19663
 }
 $34 = HEAP8[$2 + 1699 >> 0] | 0; //@line 19668
 $36 = HEAP8[$2 + 1698 >> 0] | 0; //@line 19670
 if (!(HEAP8[$6 >> 0] | 0)) {
  if ((HEAP32[$2 + 2364 >> 2] | 0) != 2) {
   return;
  }
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 19679
  __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1856 | 0); //@line 19680
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 401; //@line 19683
   $41 = $ReallocAsyncCtx10 + 4 | 0; //@line 19684
   HEAP32[$41 >> 2] = $22; //@line 19685
   sp = STACKTOP; //@line 19686
   return;
  }
  ___async_unwind = 0; //@line 19689
  HEAP32[$ReallocAsyncCtx10 >> 2] = 401; //@line 19690
  $41 = $ReallocAsyncCtx10 + 4 | 0; //@line 19691
  HEAP32[$41 >> 2] = $22; //@line 19692
  sp = STACKTOP; //@line 19693
  return;
 }
 if (HEAP8[$4 >> 0] | 0) {
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 19700
  __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1856 | 0); //@line 19701
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 402; //@line 19704
   $45 = $ReallocAsyncCtx9 + 4 | 0; //@line 19705
   HEAP32[$45 >> 2] = $22; //@line 19706
   sp = STACKTOP; //@line 19707
   return;
  }
  ___async_unwind = 0; //@line 19710
  HEAP32[$ReallocAsyncCtx9 >> 2] = 402; //@line 19711
  $45 = $ReallocAsyncCtx9 + 4 | 0; //@line 19712
  HEAP32[$45 >> 2] = $22; //@line 19713
  sp = STACKTOP; //@line 19714
  return;
 }
 if (($34 & 255) <= ($36 & 255)) {
  return;
 }
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 19722
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1856 | 0); //@line 19723
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 403; //@line 19726
  $48 = $ReallocAsyncCtx8 + 4 | 0; //@line 19727
  HEAP32[$48 >> 2] = $22; //@line 19728
  sp = STACKTOP; //@line 19729
  return;
 }
 ___async_unwind = 0; //@line 19732
 HEAP32[$ReallocAsyncCtx8 >> 2] = 403; //@line 19733
 $48 = $ReallocAsyncCtx8 + 4 | 0; //@line 19734
 HEAP32[$48 >> 2] = $22; //@line 19735
 sp = STACKTOP; //@line 19736
 return;
}
function __ZN7LoRaMac18prepare_ongoing_txEhPKhthh($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $19 = 0, $20 = 0, $32 = 0, $48 = 0, $53 = 0, $55 = 0, $8 = 0, $AsyncCtx = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, sp = 0;
 sp = STACKTOP; //@line 14681
 STACKTOP = STACKTOP + 32 | 0; //@line 14682
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 14682
 $vararg_buffer2 = sp + 8 | 0; //@line 14683
 $vararg_buffer = sp; //@line 14684
 HEAP8[$0 + 2089 >> 0] = $1; //@line 14686
 $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 14688
 $8 = __ZN7LoRaMac24get_max_possible_tx_sizeEh($0, $3 & 255) | 0; //@line 14689
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 436; //@line 14692
  HEAP16[$AsyncCtx + 4 >> 1] = $3; //@line 14694
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 14696
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 14698
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 14700
  HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 14702
  HEAP8[$AsyncCtx + 24 >> 0] = $4; //@line 14704
  HEAP8[$AsyncCtx + 25 >> 0] = $1; //@line 14706
  HEAP8[$AsyncCtx + 26 >> 0] = $5; //@line 14708
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer2; //@line 14710
  HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer2; //@line 14712
  sp = STACKTOP; //@line 14713
  STACKTOP = sp; //@line 14714
  return 0; //@line 14714
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14716
 $19 = $8 & 255; //@line 14717
 $20 = $3 & 65535; //@line 14718
 if ($20 >>> 0 > $19 >>> 0) {
  HEAP32[$vararg_buffer >> 2] = $20; //@line 14721
  HEAP32[$vararg_buffer + 4 >> 2] = $19; //@line 14723
  _mbed_tracef(8, 13239, 13464, $vararg_buffer); //@line 14724
  HEAP16[$0 + 2356 >> 1] = $20 - $19; //@line 14728
  HEAP16[$0 + 2354 >> 1] = $8 & 255; //@line 14731
  _memcpy($0 + 2099 | 0, $2 | 0, $19 | 0) | 0; //@line 14733
 } else {
  HEAP16[$0 + 2354 >> 1] = $3; //@line 14736
  HEAP16[$0 + 2356 >> 1] = 0; //@line 14738
  if ($3 << 16 >> 16) {
   _memcpy($0 + 2099 | 0, $2 | 0, $20 | 0) | 0; //@line 14742
  }
 }
 $32 = $4 & 255; //@line 14745
 if ($32 & 1 | 0) {
  HEAP32[$0 + 2092 >> 2] = 0; //@line 14750
  HEAP8[$0 + 2096 >> 0] = $1; //@line 14752
  HEAP8[$0 + 2098 >> 0] = 1; //@line 14754
 }
 if ($32 & 2 | 0) {
  HEAP32[$0 + 2092 >> 2] = 1; //@line 14760
  HEAP8[$0 + 2096 >> 0] = $1; //@line 14762
  HEAP8[$0 + 2098 >> 0] = $5; //@line 14764
 }
 if (!($32 & 8)) {
  $55 = HEAP8[$0 + 2096 >> 0] | 0; //@line 14771
 } else {
  HEAP32[$0 + 2092 >> 2] = 3; //@line 14774
  HEAP8[$0 + 2096 >> 0] = $1; //@line 14776
  HEAP8[$0 + 2098 >> 0] = 1; //@line 14778
  $55 = $1; //@line 14779
 }
 $48 = $0 + 2354 | 0; //@line 14781
 $53 = HEAPU16[$0 + 2356 >> 1] | 0; //@line 14786
 HEAP32[$vararg_buffer2 >> 2] = HEAPU16[$48 >> 1]; //@line 14788
 HEAP32[$vararg_buffer2 + 4 >> 2] = $53; //@line 14790
 HEAP32[$vararg_buffer2 + 8 >> 2] = $55 & 255; //@line 14792
 _mbed_tracef(8, 13239, 13519, $vararg_buffer2); //@line 14793
 STACKTOP = sp; //@line 14795
 return HEAP16[$48 >> 1] | 0; //@line 14795
}
function __ZN7LoRaPHY19request_new_channelEaP16channel_params_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$013 = 0, $$079$i = 0, $10 = 0, $11 = 0, $12 = 0, $17 = 0, $19 = 0, $27 = 0, $32 = 0, $36 = 0, $37 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 18696
 if (!(HEAP8[$0 + 16 >> 0] | 0)) {
  $$013 = 0; //@line 18701
  return $$013 | 0; //@line 18702
 }
 $6 = HEAP32[$2 >> 2] | 0; //@line 18704
 if (!$6) {
  $10 = HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] | 0; //@line 18709
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 18710
  $11 = FUNCTION_TABLE_iii[$10 & 15]($0, $1) | 0; //@line 18711
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 494; //@line 18714
   sp = STACKTOP; //@line 18715
   return 0; //@line 18716
  } else {
   _emscripten_free_async_context($AsyncCtx | 0); //@line 18718
   return ($11 ? 3 : 0) | 0; //@line 18720
  }
 }
 $12 = $0 + 76 | 0; //@line 18723
 L10 : do {
  if (!(HEAP8[$12 >> 0] | 0)) {
   $32 = -1; //@line 18728
  } else {
   $$079$i = 0; //@line 18730
   while (1) {
    $17 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 18734
    $AsyncCtx3 = _emscripten_alloc_async_context(32, sp) | 0; //@line 18736
    $19 = FUNCTION_TABLE_iiii[$17 & 31]($0, $6, $$079$i & 255) | 0; //@line 18737
    if (___async) {
     break;
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 18742
    if ($19) {
     $32 = $$079$i; //@line 18744
     break L10;
    }
    $27 = $$079$i + 1 | 0; //@line 18747
    if (($27 | 0) < (HEAPU8[$12 >> 0] | 0)) {
     $$079$i = $27; //@line 18752
    } else {
     $32 = -1; //@line 18754
     break L10;
    }
   }
   HEAP32[$AsyncCtx3 >> 2] = 495; //@line 18758
   HEAP32[$AsyncCtx3 + 4 >> 2] = $$079$i; //@line 18760
   HEAP32[$AsyncCtx3 + 8 >> 2] = $2; //@line 18762
   HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 18764
   HEAP8[$AsyncCtx3 + 16 >> 0] = $1; //@line 18766
   HEAP32[$AsyncCtx3 + 20 >> 2] = $12; //@line 18768
   HEAP32[$AsyncCtx3 + 24 >> 2] = $0; //@line 18770
   HEAP32[$AsyncCtx3 + 28 >> 2] = $6; //@line 18772
   sp = STACKTOP; //@line 18773
   return 0; //@line 18774
  }
 } while (0);
 HEAP8[$2 + 9 >> 0] = $32; //@line 18779
 $36 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 18782
 $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 18783
 $37 = FUNCTION_TABLE_iiii[$36 & 31]($0, $2, $1) | 0; //@line 18784
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 496; //@line 18787
  sp = STACKTOP; //@line 18788
  return 0; //@line 18789
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 18791
 switch ($37 | 0) {
 case -1004:
  {
   $$013 = 2; //@line 18794
   return $$013 | 0; //@line 18795
  }
 case -1005:
  {
   $$013 = 1; //@line 18799
   return $$013 | 0; //@line 18800
  }
 case -1006:
  {
   $$013 = 0; //@line 18804
   return $$013 | 0; //@line 18805
  }
 case 0:
  {
   $$013 = 3; //@line 18809
   return $$013 | 0; //@line 18810
  }
 default:
  {
   $$013 = 0; //@line 18814
   return $$013 | 0; //@line 18815
  }
 }
 return 0; //@line 18818
}
function __ZN12LoRaWANStack23mlme_indication_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $12 = 0, $17 = 0, $18 = 0, $21 = 0, $24 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 8748
 STACKTOP = STACKTOP + 32 | 0; //@line 8749
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 8749
 $1 = sp + 8 | 0; //@line 8751
 if ((HEAP32[(__ZNK7LoRaMac19get_mlme_indicationEv($0) | 0) >> 2] | 0) != 4) {
  _mbed_tracef(2, 12482, 12718, sp); //@line 8756
  STACKTOP = sp; //@line 8757
  return;
 }
 $5 = $0 + 2496 | 0; //@line 8759
 $6 = HEAP32[$5 >> 2] | 0; //@line 8760
 do {
  if ($6 | 0) {
   $10 = HEAP32[$0 + 3136 >> 2] | 0; //@line 8766
   $12 = HEAP32[$6 + 4 >> 2] | 0; //@line 8768
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 8769
   FUNCTION_TABLE_vii[$12 & 15]($1, $0 + 2484 | 0); //@line 8770
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 299; //@line 8773
    HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 8775
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 8777
    HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 8779
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 8781
    sp = STACKTOP; //@line 8782
    STACKTOP = sp; //@line 8783
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 8785
   $17 = $1 + 12 | 0; //@line 8787
   HEAP32[$17 >> 2] = HEAP32[$5 >> 2]; //@line 8788
   $AsyncCtx5 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8789
   $18 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($10, $1, 11) | 0; //@line 8790
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 300; //@line 8793
    HEAP32[$AsyncCtx5 + 4 >> 2] = $17; //@line 8795
    HEAP32[$AsyncCtx5 + 8 >> 2] = $1; //@line 8797
    sp = STACKTOP; //@line 8798
    STACKTOP = sp; //@line 8799
    return;
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 8801
   $21 = HEAP32[$17 >> 2] | 0; //@line 8802
   do {
    if ($21 | 0) {
     $24 = HEAP32[$21 + 8 >> 2] | 0; //@line 8807
     $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8808
     FUNCTION_TABLE_vi[$24 & 1023]($1); //@line 8809
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 301; //@line 8812
      HEAP32[$AsyncCtx2 + 4 >> 2] = $18; //@line 8814
      HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 8816
      sp = STACKTOP; //@line 8817
      STACKTOP = sp; //@line 8818
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8820
      break;
     }
    }
   } while (0);
   if (!$18) {
    $AsyncCtx9 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8827
    _mbed_assert_internal(13097, 12384, 646); //@line 8828
    if (___async) {
     HEAP32[$AsyncCtx9 >> 2] = 302; //@line 8831
     HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 8833
     sp = STACKTOP; //@line 8834
     STACKTOP = sp; //@line 8835
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx9 | 0); //@line 8837
     break;
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 8843
 return;
}
function __ZN7LoRaMacD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0, $30 = 0, $34 = 0, $36 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 10781
 $2 = HEAP32[$0 + 1868 >> 2] | 0; //@line 10783
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 10789
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 10790
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 1856 | 0); //@line 10791
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 351; //@line 10794
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 10796
    sp = STACKTOP; //@line 10797
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 10800
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 1848 >> 2] | 0; //@line 10806
 do {
  if ($9 | 0) {
   $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 10812
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10813
   FUNCTION_TABLE_vi[$13 & 1023]($0 + 1836 | 0); //@line 10814
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 352; //@line 10817
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 10819
    sp = STACKTOP; //@line 10820
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10823
    break;
   }
  }
 } while (0);
 $16 = HEAP32[$0 + 1828 >> 2] | 0; //@line 10829
 do {
  if ($16 | 0) {
   $20 = HEAP32[$16 + 8 >> 2] | 0; //@line 10835
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10836
   FUNCTION_TABLE_vi[$20 & 1023]($0 + 1816 | 0); //@line 10837
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 353; //@line 10840
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 10842
    sp = STACKTOP; //@line 10843
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 10846
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$0 + 1808 >> 2] | 0; //@line 10852
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 10858
   $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10859
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 1796 | 0); //@line 10860
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 354; //@line 10863
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 10865
    sp = STACKTOP; //@line 10866
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 10869
    break;
   }
  }
 } while (0);
 $30 = HEAP32[$0 + 748 >> 2] | 0; //@line 10875
 if (!$30) {
  $36 = $0 + 4 | 0; //@line 10878
  __ZN12LoRaPHYEU868D2Ev($36); //@line 10879
  return;
 }
 $34 = HEAP32[$30 + 8 >> 2] | 0; //@line 10884
 $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10885
 FUNCTION_TABLE_vi[$34 & 1023]($0 + 736 | 0); //@line 10886
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 355; //@line 10889
  HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 10891
  sp = STACKTOP; //@line 10892
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 10895
 $36 = $0 + 4 | 0; //@line 10896
 __ZN12LoRaPHYEU868D2Ev($36); //@line 10897
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_7($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $30 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 18117
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18119
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18121
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 18123
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18125
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18127
 $12 = HEAP16[$0 + 24 >> 1] | 0; //@line 18129
 $14 = HEAP8[$0 + 26 >> 0] | 0; //@line 18131
 $17 = $2 + 1964 | 0; //@line 18134
 HEAP8[$17 >> 0] = HEAP8[$2 + 1182 >> 0] | 0; //@line 18135
 HEAP32[$2 + 1968 >> 2] = HEAP32[$2 + 1912 >> 2]; //@line 18139
 HEAP8[$2 + 1980 >> 0] = HEAP8[$2 + 1921 >> 0] | 0; //@line 18143
 HEAP8[$2 + 1981 >> 0] = HEAP8[$2 + 1173 >> 0] | 0; //@line 18147
 HEAP32[$2 + 1984 >> 2] = 1; //@line 18149
 $30 = $2 + 1982 | 0; //@line 18152
 HEAP8[$30 >> 0] = (HEAP32[$10 >> 2] | 0) == 2 & 1; //@line 18154
 HEAP8[$2 + 2010 >> 0] = HEAP8[$2 + 1965 >> 0] | 0; //@line 18158
 $35 = $2 + 4 | 0; //@line 18159
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(32) | 0; //@line 18160
 $36 = __ZN7LoRaPHY9rx_configEP18rx_config_params_t($35, $17) | 0; //@line 18161
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 410; //@line 18164
  $37 = $ReallocAsyncCtx5 + 4 | 0; //@line 18165
  HEAP32[$37 >> 2] = $2; //@line 18166
  $38 = $ReallocAsyncCtx5 + 8 | 0; //@line 18167
  HEAP32[$38 >> 2] = $4; //@line 18168
  $39 = $ReallocAsyncCtx5 + 12 | 0; //@line 18169
  HEAP16[$39 >> 1] = $6; //@line 18170
  $40 = $ReallocAsyncCtx5 + 16 | 0; //@line 18171
  HEAP32[$40 >> 2] = $8; //@line 18172
  $41 = $ReallocAsyncCtx5 + 20 | 0; //@line 18173
  HEAP32[$41 >> 2] = $30; //@line 18174
  $42 = $ReallocAsyncCtx5 + 24 | 0; //@line 18175
  HEAP32[$42 >> 2] = $35; //@line 18176
  $43 = $ReallocAsyncCtx5 + 28 | 0; //@line 18177
  HEAP16[$43 >> 1] = $12; //@line 18178
  $44 = $ReallocAsyncCtx5 + 30 | 0; //@line 18179
  HEAP8[$44 >> 0] = $14; //@line 18180
  sp = STACKTOP; //@line 18181
  return;
 }
 HEAP8[___async_retval >> 0] = $36 & 1; //@line 18186
 ___async_unwind = 0; //@line 18187
 HEAP32[$ReallocAsyncCtx5 >> 2] = 410; //@line 18188
 $37 = $ReallocAsyncCtx5 + 4 | 0; //@line 18189
 HEAP32[$37 >> 2] = $2; //@line 18190
 $38 = $ReallocAsyncCtx5 + 8 | 0; //@line 18191
 HEAP32[$38 >> 2] = $4; //@line 18192
 $39 = $ReallocAsyncCtx5 + 12 | 0; //@line 18193
 HEAP16[$39 >> 1] = $6; //@line 18194
 $40 = $ReallocAsyncCtx5 + 16 | 0; //@line 18195
 HEAP32[$40 >> 2] = $8; //@line 18196
 $41 = $ReallocAsyncCtx5 + 20 | 0; //@line 18197
 HEAP32[$41 >> 2] = $30; //@line 18198
 $42 = $ReallocAsyncCtx5 + 24 | 0; //@line 18199
 HEAP32[$42 >> 2] = $35; //@line 18200
 $43 = $ReallocAsyncCtx5 + 28 | 0; //@line 18201
 HEAP16[$43 >> 1] = $12; //@line 18202
 $44 = $ReallocAsyncCtx5 + 30 | 0; //@line 18203
 HEAP8[$44 >> 0] = $14; //@line 18204
 sp = STACKTOP; //@line 18205
 return;
}
function _initialize__async_cb_163($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 29933
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29935
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29937
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29939
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29941
 $10 = 7 << 32 + -4; //@line 29943
 $11 = ___muldi3($10 | 0, 0, 1e6, 0) | 0; //@line 29944
 $12 = tempRet0; //@line 29945
 $13 = _i64Add($2 | 0, 0, -1, -1) | 0; //@line 29946
 $15 = _i64Add($13 | 0, tempRet0 | 0, $11 | 0, $12 | 0) | 0; //@line 29948
 $17 = ___udivdi3($15 | 0, tempRet0 | 0, $2 | 0, 0) | 0; //@line 29950
 $18 = tempRet0; //@line 29951
 $19 = HEAP32[$4 >> 2] | 0; //@line 29952
 HEAP32[$19 >> 2] = 0; //@line 29953
 HEAP32[$19 + 4 >> 2] = 0; //@line 29955
 $23 = HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0; //@line 29958
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 29959
 $24 = FUNCTION_TABLE_i[$23 & 7]() | 0; //@line 29960
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 586; //@line 29963
  $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 29964
  HEAP32[$25 >> 2] = $4; //@line 29965
  $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 29966
  HEAP32[$26 >> 2] = $2; //@line 29967
  $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 29968
  HEAP32[$27 >> 2] = 32; //@line 29969
  $28 = $ReallocAsyncCtx3 + 16 | 0; //@line 29970
  HEAP32[$28 >> 2] = $10; //@line 29971
  $29 = $ReallocAsyncCtx3 + 24 | 0; //@line 29972
  $30 = $29; //@line 29973
  $31 = $30; //@line 29974
  HEAP32[$31 >> 2] = $17; //@line 29975
  $32 = $30 + 4 | 0; //@line 29976
  $33 = $32; //@line 29977
  HEAP32[$33 >> 2] = $18; //@line 29978
  $34 = $ReallocAsyncCtx3 + 32 | 0; //@line 29979
  HEAP32[$34 >> 2] = $6; //@line 29980
  $35 = $ReallocAsyncCtx3 + 36 | 0; //@line 29981
  HEAP32[$35 >> 2] = $8; //@line 29982
  sp = STACKTOP; //@line 29983
  return;
 }
 HEAP32[___async_retval >> 2] = $24; //@line 29987
 ___async_unwind = 0; //@line 29988
 HEAP32[$ReallocAsyncCtx3 >> 2] = 586; //@line 29989
 $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 29990
 HEAP32[$25 >> 2] = $4; //@line 29991
 $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 29992
 HEAP32[$26 >> 2] = $2; //@line 29993
 $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 29994
 HEAP32[$27 >> 2] = 32; //@line 29995
 $28 = $ReallocAsyncCtx3 + 16 | 0; //@line 29996
 HEAP32[$28 >> 2] = $10; //@line 29997
 $29 = $ReallocAsyncCtx3 + 24 | 0; //@line 29998
 $30 = $29; //@line 29999
 $31 = $30; //@line 30000
 HEAP32[$31 >> 2] = $17; //@line 30001
 $32 = $30 + 4 | 0; //@line 30002
 $33 = $32; //@line 30003
 HEAP32[$33 >> 2] = $18; //@line 30004
 $34 = $ReallocAsyncCtx3 + 32 | 0; //@line 30005
 HEAP32[$34 >> 2] = $6; //@line 30006
 $35 = $ReallocAsyncCtx3 + 36 | 0; //@line 30007
 HEAP32[$35 >> 2] = $8; //@line 30008
 sp = STACKTOP; //@line 30009
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_167($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $21 = 0, $27 = 0, $28 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 558
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 560
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 562
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 564
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 566
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 568
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 570
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 572
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 574
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 576
 $19 = $2 + 1748 | 0; //@line 578
 HEAP16[$19 >> 1] = $AsyncRetVal; //@line 579
 $21 = HEAP16[$4 >> 1] | 0; //@line 581
 HEAP16[$4 >> 1] = $21 + 1 << 16 >> 16; //@line 583
 HEAP8[($21 & 65535) + ($2 + 1185) >> 0] = $AsyncRetVal; //@line 586
 $27 = (HEAPU16[$19 >> 1] | 0) >>> 8 & 255; //@line 589
 $28 = HEAP16[$4 >> 1] | 0; //@line 590
 HEAP16[$4 >> 1] = $28 + 1 << 16 >> 16; //@line 592
 HEAP8[($28 & 65535) + ($2 + 1185) >> 0] = $27; //@line 595
 $34 = HEAP16[$4 >> 1] & 255; //@line 598
 $36 = HEAP32[$2 + 1712 >> 2] | 0; //@line 600
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 601
 $37 = __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj($2 + 756 | 0, $6, $34, $36, 128, $8) | 0; //@line 602
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 378; //@line 605
  $38 = $ReallocAsyncCtx2 + 4 | 0; //@line 606
  HEAP32[$38 >> 2] = $8; //@line 607
  $39 = $ReallocAsyncCtx2 + 8 | 0; //@line 608
  HEAP32[$39 >> 2] = $4; //@line 609
  $40 = $ReallocAsyncCtx2 + 12 | 0; //@line 610
  HEAP32[$40 >> 2] = $2; //@line 611
  $41 = $ReallocAsyncCtx2 + 16 | 0; //@line 612
  HEAP32[$41 >> 2] = $10; //@line 613
  $42 = $ReallocAsyncCtx2 + 20 | 0; //@line 614
  HEAP8[$42 >> 0] = $12; //@line 615
  $43 = $ReallocAsyncCtx2 + 24 | 0; //@line 616
  HEAP32[$43 >> 2] = $14; //@line 617
  $44 = $ReallocAsyncCtx2 + 28 | 0; //@line 618
  HEAP32[$44 >> 2] = $16; //@line 619
  sp = STACKTOP; //@line 620
  return;
 }
 HEAP32[___async_retval >> 2] = $37; //@line 624
 ___async_unwind = 0; //@line 625
 HEAP32[$ReallocAsyncCtx2 >> 2] = 378; //@line 626
 $38 = $ReallocAsyncCtx2 + 4 | 0; //@line 627
 HEAP32[$38 >> 2] = $8; //@line 628
 $39 = $ReallocAsyncCtx2 + 8 | 0; //@line 629
 HEAP32[$39 >> 2] = $4; //@line 630
 $40 = $ReallocAsyncCtx2 + 12 | 0; //@line 631
 HEAP32[$40 >> 2] = $2; //@line 632
 $41 = $ReallocAsyncCtx2 + 16 | 0; //@line 633
 HEAP32[$41 >> 2] = $10; //@line 634
 $42 = $ReallocAsyncCtx2 + 20 | 0; //@line 635
 HEAP8[$42 >> 0] = $12; //@line 636
 $43 = $ReallocAsyncCtx2 + 24 | 0; //@line 637
 HEAP32[$43 >> 2] = $14; //@line 638
 $44 = $ReallocAsyncCtx2 + 28 | 0; //@line 639
 HEAP32[$44 >> 2] = $16; //@line 640
 sp = STACKTOP; //@line 641
 return;
}
function __ZN7LoRaMac15open_rx1_windowEv__async_cb_299($0) {
 $0 = $0 | 0;
 var $16 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $29 = 0, $30 = 0, $31 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 10225
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10227
 HEAP32[$2 + 1168 >> 2] = 0; //@line 10229
 $6 = $2 + 1940 | 0; //@line 10232
 HEAP8[$6 >> 0] = HEAP8[$2 + 1182 >> 0] | 0; //@line 10233
 HEAP8[$2 + 1943 >> 0] = HEAP8[$2 + 1909 >> 0] | 0; //@line 10237
 HEAP8[$2 + 1956 >> 0] = HEAP8[$2 + 1921 >> 0] | 0; //@line 10241
 HEAP8[$2 + 1957 >> 0] = HEAP8[$2 + 1173 >> 0] | 0; //@line 10245
 $16 = $2 + 1958 | 0; //@line 10246
 HEAP8[$16 >> 0] = 0; //@line 10247
 HEAP32[$2 + 1960 >> 2] = 0; //@line 10249
 $21 = $2 + 4 | 0; //@line 10253
 if ((HEAP32[$2 + 2364 >> 2] | 0) == 2) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 10255
  __ZN7LoRaPHY20put_radio_to_standbyEv($21); //@line 10256
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 433; //@line 10259
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 10260
   HEAP32[$22 >> 2] = $2; //@line 10261
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 10262
   HEAP32[$23 >> 2] = $21; //@line 10263
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 10264
   HEAP32[$24 >> 2] = $6; //@line 10265
   $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 10266
   HEAP32[$25 >> 2] = $16; //@line 10267
   sp = STACKTOP; //@line 10268
   return;
  }
  ___async_unwind = 0; //@line 10271
  HEAP32[$ReallocAsyncCtx2 >> 2] = 433; //@line 10272
  $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 10273
  HEAP32[$22 >> 2] = $2; //@line 10274
  $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 10275
  HEAP32[$23 >> 2] = $21; //@line 10276
  $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 10277
  HEAP32[$24 >> 2] = $6; //@line 10278
  $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 10279
  HEAP32[$25 >> 2] = $16; //@line 10280
  sp = STACKTOP; //@line 10281
  return;
 } else {
  HEAP8[$2 + 2010 >> 0] = HEAP8[$2 + 1941 >> 0] | 0; //@line 10287
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 10288
  __ZN7LoRaPHY9rx_configEP18rx_config_params_t($21, $6) | 0; //@line 10289
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 434; //@line 10292
   $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 10293
   HEAP32[$29 >> 2] = $16; //@line 10294
   $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 10295
   HEAP32[$30 >> 2] = $2; //@line 10296
   $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 10297
   HEAP32[$31 >> 2] = $21; //@line 10298
   sp = STACKTOP; //@line 10299
   return;
  }
  ___async_unwind = 0; //@line 10302
  HEAP32[$ReallocAsyncCtx3 >> 2] = 434; //@line 10303
  $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 10304
  HEAP32[$29 >> 2] = $16; //@line 10305
  $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 10306
  HEAP32[$30 >> 2] = $2; //@line 10307
  $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 10308
  HEAP32[$31 >> 2] = $21; //@line 10309
  sp = STACKTOP; //@line 10310
  return;
 }
}
function __ZN4mbed7Timeout7handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $12 = 0, $13 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $25 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 2658
 STACKTOP = STACKTOP + 16 | 0; //@line 2659
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2659
 $1 = sp; //@line 2660
 $2 = $0 + 52 | 0; //@line 2661
 $3 = HEAP32[$2 >> 2] | 0; //@line 2662
 do {
  if (!$3) {
   $13 = 0; //@line 2666
  } else {
   $7 = HEAP32[$3 + 4 >> 2] | 0; //@line 2670
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 2671
   FUNCTION_TABLE_vii[$7 & 15]($1, $0 + 40 | 0); //@line 2672
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 108; //@line 2675
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 2677
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 2679
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 2681
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 2683
    sp = STACKTOP; //@line 2684
    STACKTOP = sp; //@line 2685
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2687
    $13 = HEAP32[$2 >> 2] | 0; //@line 2689
    break;
   }
  }
 } while (0);
 $12 = $1 + 12 | 0; //@line 2694
 HEAP32[$12 >> 2] = $13; //@line 2695
 __ZN4mbed6Ticker6detachEv($0); //@line 2696
 $14 = HEAP32[$12 >> 2] | 0; //@line 2697
 do {
  if (!$14) {
   $AsyncCtx9 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2701
   _mbed_assert_internal(14973, 14978, 528); //@line 2702
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 109; //@line 2705
    HEAP32[$AsyncCtx9 + 4 >> 2] = $12; //@line 2707
    HEAP32[$AsyncCtx9 + 8 >> 2] = $1; //@line 2709
    sp = STACKTOP; //@line 2710
    STACKTOP = sp; //@line 2711
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 2713
    $19 = HEAP32[$12 >> 2] | 0; //@line 2715
    break;
   }
  } else {
   $19 = $14; //@line 2719
  }
 } while (0);
 $18 = HEAP32[$19 >> 2] | 0; //@line 2722
 $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2723
 FUNCTION_TABLE_vi[$18 & 1023]($1); //@line 2724
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 110; //@line 2727
  HEAP32[$AsyncCtx2 + 4 >> 2] = $12; //@line 2729
  HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 2731
  sp = STACKTOP; //@line 2732
  STACKTOP = sp; //@line 2733
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2735
 $22 = HEAP32[$12 >> 2] | 0; //@line 2736
 if (!$22) {
  STACKTOP = sp; //@line 2739
  return;
 }
 $25 = HEAP32[$22 + 8 >> 2] | 0; //@line 2742
 $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2743
 FUNCTION_TABLE_vi[$25 & 1023]($1); //@line 2744
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 111; //@line 2747
  HEAP32[$AsyncCtx6 + 4 >> 2] = $1; //@line 2749
  sp = STACKTOP; //@line 2750
  STACKTOP = sp; //@line 2751
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 2753
 STACKTOP = sp; //@line 2754
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_374($0) {
 $0 = $0 | 0;
 var $$pre$i$i70 = 0, $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 29697
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29703
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29705
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29707
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29709
 $$pre$i$i70 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 29710
 $13 = $$pre$i$i70; //@line 29711
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i70; //@line 29712
 if (!$$pre$i$i70) {
  __ZN7LoRaMac17bind_radio_driverER9LoRaRadio($8, $10); //@line 29715
  $23 = HEAP32[(HEAP32[$10 >> 2] | 0) + 72 >> 2] | 0; //@line 29718
  $ReallocAsyncCtx16 = _emscripten_realloc_async_context(16) | 0; //@line 29719
  FUNCTION_TABLE_vi[$23 & 1023]($10); //@line 29720
  if (___async) {
   HEAP32[$ReallocAsyncCtx16 >> 2] = 184; //@line 29723
   $24 = $ReallocAsyncCtx16 + 4 | 0; //@line 29724
   HEAP32[$24 >> 2] = $10; //@line 29725
   $25 = $ReallocAsyncCtx16 + 8 | 0; //@line 29726
   HEAP32[$25 >> 2] = $12; //@line 29727
   $26 = $ReallocAsyncCtx16 + 12 | 0; //@line 29728
   HEAP32[$26 >> 2] = $10; //@line 29729
   sp = STACKTOP; //@line 29730
   return;
  }
  ___async_unwind = 0; //@line 29733
  HEAP32[$ReallocAsyncCtx16 >> 2] = 184; //@line 29734
  $24 = $ReallocAsyncCtx16 + 4 | 0; //@line 29735
  HEAP32[$24 >> 2] = $10; //@line 29736
  $25 = $ReallocAsyncCtx16 + 8 | 0; //@line 29737
  HEAP32[$25 >> 2] = $12; //@line 29738
  $26 = $ReallocAsyncCtx16 + 12 | 0; //@line 29739
  HEAP32[$26 >> 2] = $10; //@line 29740
  sp = STACKTOP; //@line 29741
  return;
 } else {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 29745
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(20) | 0; //@line 29746
  FUNCTION_TABLE_vi[$16 & 1023]($6); //@line 29747
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 183; //@line 29750
   $17 = $ReallocAsyncCtx15 + 4 | 0; //@line 29751
   HEAP32[$17 >> 2] = $6; //@line 29752
   $18 = $ReallocAsyncCtx15 + 8 | 0; //@line 29753
   HEAP32[$18 >> 2] = $8; //@line 29754
   $19 = $ReallocAsyncCtx15 + 12 | 0; //@line 29755
   HEAP32[$19 >> 2] = $10; //@line 29756
   $20 = $ReallocAsyncCtx15 + 16 | 0; //@line 29757
   HEAP32[$20 >> 2] = $12; //@line 29758
   sp = STACKTOP; //@line 29759
   return;
  }
  ___async_unwind = 0; //@line 29762
  HEAP32[$ReallocAsyncCtx15 >> 2] = 183; //@line 29763
  $17 = $ReallocAsyncCtx15 + 4 | 0; //@line 29764
  HEAP32[$17 >> 2] = $6; //@line 29765
  $18 = $ReallocAsyncCtx15 + 8 | 0; //@line 29766
  HEAP32[$18 >> 2] = $8; //@line 29767
  $19 = $ReallocAsyncCtx15 + 12 | 0; //@line 29768
  HEAP32[$19 >> 2] = $10; //@line 29769
  $20 = $ReallocAsyncCtx15 + 16 | 0; //@line 29770
  HEAP32[$20 >> 2] = $12; //@line 29771
  sp = STACKTOP; //@line 29772
  return;
 }
}
function _mbedtls_cipher_update__async_cb_69($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$1 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $37 = 0, $4 = 0, $46 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $55 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 22314
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22316
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22318
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22320
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22322
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22324
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22326
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22328
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22330
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22332
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22334
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22336
 if ($AsyncRetVal | 0) {
  $$1 = $AsyncRetVal; //@line 22339
  $55 = ___async_retval; //@line 22340
  HEAP32[$55 >> 2] = $$1; //@line 22341
  return;
 }
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $4; //@line 22346
 $25 = $6 + $4 | 0; //@line 22347
 HEAP32[$8 >> 2] = 0; //@line 22348
 $26 = $10 + $12 | 0; //@line 22349
 $27 = $14 - $12 | 0; //@line 22350
 if (!$27) {
  $$1 = 0; //@line 22353
  $55 = ___async_retval; //@line 22354
  HEAP32[$55 >> 2] = $$1; //@line 22355
  return;
 }
 $29 = ($27 >>> 0) % ($4 >>> 0) | 0; //@line 22358
 if (!$29) {
  if (!(HEAP32[$16 >> 2] | 0)) {
   $$0 = (HEAP32[$18 + 12 >> 2] | 0) == 0 ? 0 : $4; //@line 22368
  } else {
   $$0 = 0; //@line 22370
  }
 } else {
  $$0 = $29; //@line 22373
 }
 $37 = $27 - $$0 | 0; //@line 22376
 _memcpy($18 + 20 | 0, $26 + $37 | 0, $$0 | 0) | 0; //@line 22378
 HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + $$0; //@line 22381
 if (!$37) {
  $$1 = 0; //@line 22384
  $55 = ___async_retval; //@line 22385
  HEAP32[$55 >> 2] = $$1; //@line 22386
  return;
 }
 $46 = HEAP32[(HEAP32[(HEAP32[$20 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 22393
 $48 = HEAP32[$18 + 60 >> 2] | 0; //@line 22395
 $49 = HEAP32[$16 >> 2] | 0; //@line 22396
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 22398
 $51 = FUNCTION_TABLE_iiiiiii[$46 & 3]($48, $49, $37, $18 + 40 | 0, $26, $25) | 0; //@line 22399
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 563; //@line 22402
  $52 = $ReallocAsyncCtx3 + 4 | 0; //@line 22403
  HEAP32[$52 >> 2] = $2; //@line 22404
  $53 = $ReallocAsyncCtx3 + 8 | 0; //@line 22405
  HEAP32[$53 >> 2] = $37; //@line 22406
  sp = STACKTOP; //@line 22407
  return;
 }
 HEAP32[___async_retval >> 2] = $51; //@line 22411
 ___async_unwind = 0; //@line 22412
 HEAP32[$ReallocAsyncCtx3 >> 2] = 563; //@line 22413
 $52 = $ReallocAsyncCtx3 + 4 | 0; //@line 22414
 HEAP32[$52 >> 2] = $2; //@line 22415
 $53 = $ReallocAsyncCtx3 + 8 | 0; //@line 22416
 HEAP32[$53 >> 2] = $37; //@line 22417
 sp = STACKTOP; //@line 22418
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_331($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 25059
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25061
 $4 = HEAP32[$2 + 60 >> 2] | 0; //@line 25063
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 25068
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 25069
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 48 | 0); //@line 25070
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 160; //@line 25073
   $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 25074
   HEAP32[$9 >> 2] = $2; //@line 25075
   sp = STACKTOP; //@line 25076
   return;
  }
  ___async_unwind = 0; //@line 25079
  HEAP32[$ReallocAsyncCtx4 >> 2] = 160; //@line 25080
  $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 25081
  HEAP32[$9 >> 2] = $2; //@line 25082
  sp = STACKTOP; //@line 25083
  return;
 }
 $11 = HEAP32[$2 + 44 >> 2] | 0; //@line 25087
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 25092
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 25093
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 32 | 0); //@line 25094
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 161; //@line 25097
   $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 25098
   HEAP32[$16 >> 2] = $2; //@line 25099
   sp = STACKTOP; //@line 25100
   return;
  }
  ___async_unwind = 0; //@line 25103
  HEAP32[$ReallocAsyncCtx5 >> 2] = 161; //@line 25104
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 25105
  HEAP32[$16 >> 2] = $2; //@line 25106
  sp = STACKTOP; //@line 25107
  return;
 }
 $18 = HEAP32[$2 + 28 >> 2] | 0; //@line 25111
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 25116
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 25117
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 16 | 0); //@line 25118
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 162; //@line 25121
   $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 25122
   HEAP32[$23 >> 2] = $2; //@line 25123
   sp = STACKTOP; //@line 25124
   return;
  }
  ___async_unwind = 0; //@line 25127
  HEAP32[$ReallocAsyncCtx6 >> 2] = 162; //@line 25128
  $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 25129
  HEAP32[$23 >> 2] = $2; //@line 25130
  sp = STACKTOP; //@line 25131
  return;
 }
 $25 = HEAP32[$2 + 12 >> 2] | 0; //@line 25135
 if (!$25) {
  return;
 }
 $28 = HEAP32[$25 + 8 >> 2] | 0; //@line 25141
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 25142
 FUNCTION_TABLE_vi[$28 & 1023]($2); //@line 25143
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 163; //@line 25146
  sp = STACKTOP; //@line 25147
  return;
 }
 ___async_unwind = 0; //@line 25150
 HEAP32[$ReallocAsyncCtx7 >> 2] = 163; //@line 25151
 sp = STACKTOP; //@line 25152
 return;
}
function __ZN12LoRaWANStack9handle_rxEPhtRhRib__async_cb($0) {
 $0 = $0 | 0;
 var $$0$off0 = 0, $$031 = 0, $$1 = 0, $$pre$phi39Z2D = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $32 = 0, $35 = 0, $36 = 0, $40 = 0, $45 = 0, $6 = 0, $8 = 0, label = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26152
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26157
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26159
 $10 = HEAP16[$0 + 20 >> 1] | 0; //@line 26161
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26163
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26165
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26167
 $18 = HEAP8[$2 + 2837 >> 0] | 0; //@line 26169
 if (HEAP8[$0 + 8 >> 0] & 1) {
  if ($18 << 24 >> 24 != (HEAP8[$6 >> 0] | 0)) {
   $$1 = -1001; //@line 26174
   $45 = ___async_retval; //@line 26175
   HEAP16[$45 >> 1] = $$1; //@line 26176
   return;
  }
  if (!(HEAP32[$8 >> 2] & 1)) {
   $$1 = -1001; //@line 26183
   $45 = ___async_retval; //@line 26184
   HEAP16[$45 >> 1] = $$1; //@line 26185
   return;
  }
 }
 HEAP8[$6 >> 0] = $18; //@line 26189
 HEAP32[$8 >> 2] = 1; //@line 26190
 $24 = $2 + 2840 | 0; //@line 26191
 $25 = HEAP32[$24 >> 2] | 0; //@line 26192
 $26 = $2 + 2844 | 0; //@line 26193
 $27 = HEAP16[$26 >> 1] | 0; //@line 26194
 $28 = $27 & 65535; //@line 26195
 $30 = $2 + 2866 | 0; //@line 26197
 $32 = (HEAP16[$30 >> 1] | 0) == 0; //@line 26199
 if (($27 & 65535) > ($10 & 65535)) {
  if ($32) {
   $35 = $2 + 2864 | 0; //@line 26204
   HEAP16[$35 >> 1] = $28 - $16; //@line 26205
   HEAP16[$30 >> 1] = $10; //@line 26206
   _memcpy($12 | 0, $25 | 0, $16 | 0) | 0; //@line 26207
   $$0$off0 = 0; //@line 26208
   $$031 = $10; //@line 26208
   $$pre$phi39Z2D = $35; //@line 26208
  } else {
   label = 10; //@line 26210
  }
 } else {
  if ($32) {
   $36 = $2 + 2864 | 0; //@line 26214
   HEAP16[$36 >> 1] = 0; //@line 26215
   HEAP16[$30 >> 1] = 0; //@line 26216
   _memcpy($12 | 0, $25 | 0, $28 | 0) | 0; //@line 26217
   $$0$off0 = 1; //@line 26218
   $$031 = $27; //@line 26218
   $$pre$phi39Z2D = $36; //@line 26218
  } else {
   label = 10; //@line 26220
  }
 }
 if ((label | 0) == 10) {
  $$0$off0 = 0; //@line 26225
  $$031 = $27; //@line 26225
  $$pre$phi39Z2D = $2 + 2864 | 0; //@line 26225
 }
 if (HEAP16[$$pre$phi39Z2D >> 1] | 0) {
  $40 = HEAP16[$2 + 2866 >> 1] | 0; //@line 26231
  if ($40 << 16 >> 16) {
   _memcpy($12 | 0, $25 + ($40 & 65535) | 0, $$031 & 65535 | 0) | 0; //@line 26237
  }
 }
 if (!$$0$off0) {
  $$1 = $$031; //@line 26241
  $45 = ___async_retval; //@line 26242
  HEAP16[$45 >> 1] = $$1; //@line 26243
  return;
 }
 HEAP32[$24 >> 2] = 0; //@line 26246
 HEAP16[$26 >> 1] = 0; //@line 26247
 HEAP8[$14 >> 0] = 0; //@line 26248
 $$1 = $$031; //@line 26249
 $45 = ___async_retval; //@line 26250
 HEAP16[$45 >> 1] = $$1; //@line 26251
 return;
}
function __ZN13LoRaMacCrypto28compute_skeys_for_join_frameEPKhjS1_tPhS2_($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$$sroa_idx14 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 18637
 STACKTOP = STACKTOP + 16 | 0; //@line 18638
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 18638
 $7 = sp; //@line 18639
 $8 = $0 + 64 | 0; //@line 18640
 _mbedtls_aes_init($8); //@line 18641
 $9 = _mbedtls_aes_setkey_enc($8, $1, $2) | 0; //@line 18642
 if ($9 | 0) {
  $$0 = $9; //@line 18645
  _mbedtls_aes_free($8); //@line 18646
  STACKTOP = sp; //@line 18647
  return $$0 | 0; //@line 18647
 }
 $11 = $7 + 9 | 0; //@line 18649
 HEAP8[$11 >> 0] = 0; //@line 18650
 HEAP8[$11 + 1 >> 0] = 0; //@line 18650
 HEAP8[$11 + 2 >> 0] = 0; //@line 18650
 HEAP8[$11 + 3 >> 0] = 0; //@line 18650
 HEAP8[$11 + 4 >> 0] = 0; //@line 18650
 HEAP8[$11 + 5 >> 0] = 0; //@line 18650
 HEAP8[$11 + 6 >> 0] = 0; //@line 18650
 HEAP8[$7 >> 0] = 1; //@line 18651
 $12 = $7 + 1 | 0; //@line 18652
 HEAP8[$12 >> 0] = HEAP8[$3 >> 0] | 0; //@line 18653
 HEAP8[$12 + 1 >> 0] = HEAP8[$3 + 1 >> 0] | 0; //@line 18653
 HEAP8[$12 + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0; //@line 18653
 HEAP8[$12 + 3 >> 0] = HEAP8[$3 + 3 >> 0] | 0; //@line 18653
 HEAP8[$12 + 4 >> 0] = HEAP8[$3 + 4 >> 0] | 0; //@line 18653
 HEAP8[$12 + 5 >> 0] = HEAP8[$3 + 5 >> 0] | 0; //@line 18653
 $$0$$sroa_idx14 = $7 + 7 | 0; //@line 18654
 HEAP8[$$0$$sroa_idx14 >> 0] = $4; //@line 18655
 HEAP8[$$0$$sroa_idx14 + 1 >> 0] = $4 >> 8; //@line 18655
 $13 = _mbedtls_aes_crypt_ecb($8, 1, $7, $5) | 0; //@line 18656
 if ($13 | 0) {
  $$0 = $13; //@line 18659
  _mbedtls_aes_free($8); //@line 18660
  STACKTOP = sp; //@line 18661
  return $$0 | 0; //@line 18661
 }
 $15 = $7 + 9 | 0; //@line 18663
 HEAP8[$15 >> 0] = 0; //@line 18664
 HEAP8[$15 + 1 >> 0] = 0; //@line 18664
 HEAP8[$15 + 2 >> 0] = 0; //@line 18664
 HEAP8[$15 + 3 >> 0] = 0; //@line 18664
 HEAP8[$15 + 4 >> 0] = 0; //@line 18664
 HEAP8[$15 + 5 >> 0] = 0; //@line 18664
 HEAP8[$15 + 6 >> 0] = 0; //@line 18664
 HEAP8[$7 >> 0] = 2; //@line 18665
 HEAP8[$12 >> 0] = HEAP8[$3 >> 0] | 0; //@line 18666
 HEAP8[$12 + 1 >> 0] = HEAP8[$3 + 1 >> 0] | 0; //@line 18666
 HEAP8[$12 + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0; //@line 18666
 HEAP8[$12 + 3 >> 0] = HEAP8[$3 + 3 >> 0] | 0; //@line 18666
 HEAP8[$12 + 4 >> 0] = HEAP8[$3 + 4 >> 0] | 0; //@line 18666
 HEAP8[$12 + 5 >> 0] = HEAP8[$3 + 5 >> 0] | 0; //@line 18666
 HEAP8[$$0$$sroa_idx14 >> 0] = $4; //@line 18667
 HEAP8[$$0$$sroa_idx14 + 1 >> 0] = $4 >> 8; //@line 18667
 $$0 = _mbedtls_aes_crypt_ecb($8, 1, $7, $6) | 0; //@line 18669
 _mbedtls_aes_free($8); //@line 18670
 STACKTOP = sp; //@line 18671
 return $$0 | 0; //@line 18671
}
function __ZN7LoRaMac21handle_retransmissionEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0$i = 0, $1 = 0, $2 = 0, $21 = 0, $28 = 0, $31 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 11556
 STACKTOP = STACKTOP + 16 | 0; //@line 11557
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11557
 $vararg_buffer = sp; //@line 11558
 $1 = sp + 5 | 0; //@line 11559
 $2 = sp + 4 | 0; //@line 11560
 if (!(HEAP8[$0 + 2360 >> 0] | 0)) {
  if (!(HEAP32[$0 + 2072 >> 2] | 0)) {
   HEAP8[$0 + 1877 >> 0] = __ZN7LoRaPHY16get_alternate_DREh($0 + 4 | 0, (HEAPU8[$0 + 1701 >> 0] | 0) + 1 & 255) | 0; //@line 11577
   HEAP8[$1 >> 0] = 0; //@line 11578
   HEAP8[$2 >> 0] = HEAP8[$0 + 1936 >> 0] << 7; //@line 11582
   HEAP8[$0 + 1180 >> 0] = 1; //@line 11584
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 11585
   $21 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt($0, $1, $2, 0, 0, 0) | 0; //@line 11586
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 374; //@line 11589
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 11591
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 11593
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 11595
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 11597
    HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 11599
    sp = STACKTOP; //@line 11600
    STACKTOP = sp; //@line 11601
    return 0; //@line 11601
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 11603
   do {
    if (!$21) {
     $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11607
     $28 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 11608
     if (___async) {
      HEAP32[$AsyncCtx7 >> 2] = 375; //@line 11611
      HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 11613
      HEAP32[$AsyncCtx7 + 8 >> 2] = $1; //@line 11615
      sp = STACKTOP; //@line 11616
      STACKTOP = sp; //@line 11617
      return 0; //@line 11617
     } else {
      _emscripten_free_async_context($AsyncCtx7 | 0); //@line 11619
      $$0$i = $28; //@line 11620
      break;
     }
    } else {
     HEAP32[$vararg_buffer >> 2] = $21; //@line 11624
     _mbed_tracef(2, 13239, 13244, $vararg_buffer); //@line 11625
     $$0$i = $21; //@line 11626
    }
   } while (0);
   $$0 = $$0$i; //@line 11629
   STACKTOP = sp; //@line 11630
   return $$0 | 0; //@line 11630
  }
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11633
 $31 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 11634
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 376; //@line 11637
  sp = STACKTOP; //@line 11638
  STACKTOP = sp; //@line 11639
  return 0; //@line 11639
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11641
 $$0 = $31; //@line 11642
 STACKTOP = sp; //@line 11643
 return $$0 | 0; //@line 11643
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$026 = 0, $10 = 0, $15 = 0, $21 = 0.0, $24 = 0.0, $27 = 0, $34 = 0, $35 = 0, $38 = 0, $43 = 0, $46 = 0, $48 = 0, $50 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20776
 $6 = HEAP32[$0 + 124 >> 2] | 0; //@line 20780
 $7 = $1 + 2 | 0; //@line 20781
 $8 = HEAP8[$7 >> 0] | 0; //@line 20782
 $10 = HEAPU8[$1 >> 0] | 0; //@line 20784
 $15 = HEAP8[(HEAP32[$0 + 72 >> 2] | 0) + ((HEAPU8[$6 + ($10 * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 2 >> 0] | 0; //@line 20789
 if ($8 << 24 >> 24 > $15 << 24 >> 24) {
  HEAP8[$7 >> 0] = $15; //@line 20792
  $27 = $15; //@line 20793
 } else {
  $27 = $8; //@line 20795
 }
 if (!$2) {
  $$0 = HEAP32[$6 + ($10 * 12 | 0) >> 2] | 0; //@line 20801
 } else {
  $$0 = $2; //@line 20803
 }
 $21 = +HEAPF32[$1 + 4 >> 2]; //@line 20806
 if ($21 > 0.0) {
  $24 = +HEAPF32[$1 + 8 >> 2]; //@line 20810
  if ($24 > 0.0) {
   $$026 = ~~+Math_floor(+($21 - +($27 << 24 >> 24 << 1 >>> 0) - $24)); //@line 20820
  } else {
   $$026 = $27; //@line 20822
  }
 } else {
  $$026 = $27; //@line 20825
 }
 $34 = $0 + 4 | 0; //@line 20827
 $35 = HEAP32[$34 >> 2] | 0; //@line 20828
 $38 = HEAP32[(HEAP32[$35 >> 2] | 0) + 72 >> 2] | 0; //@line 20831
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 20832
 FUNCTION_TABLE_vi[$38 & 1023]($35); //@line 20833
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 520; //@line 20836
  HEAP32[$AsyncCtx + 4 >> 2] = $34; //@line 20838
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 20840
  HEAP32[$AsyncCtx + 12 >> 2] = $$0; //@line 20842
  HEAP8[$AsyncCtx + 16 >> 0] = $$026; //@line 20844
  sp = STACKTOP; //@line 20845
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 20848
 $43 = HEAP32[$34 >> 2] | 0; //@line 20849
 $46 = HEAP32[(HEAP32[$43 >> 2] | 0) + 68 >> 2] | 0; //@line 20852
 $48 = HEAP16[$1 + 12 >> 1] | 0; //@line 20854
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 20855
 FUNCTION_TABLE_viiii[$46 & 7]($43, $$0, $$026, $48); //@line 20856
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 521; //@line 20859
  HEAP32[$AsyncCtx2 + 4 >> 2] = $34; //@line 20861
  sp = STACKTOP; //@line 20862
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 20865
 $50 = HEAP32[$34 >> 2] | 0; //@line 20866
 $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 76 >> 2] | 0; //@line 20869
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 20870
 FUNCTION_TABLE_vi[$53 & 1023]($50); //@line 20871
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 522; //@line 20874
  sp = STACKTOP; //@line 20875
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 20878
  return;
 }
}
function __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$1$i$i = 0, $$1$lcssa$i$i = 0, $$18$i$i = 0, $$19$i$i = 0, $11 = 0, $14 = 0, $22 = 0, $28 = 0, $34 = 0, $35 = 0, $36 = 0, $44 = 0, $45 = 0, $47 = 0, $60 = 0, $63 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 21878
 $7 = HEAPU8[$0 + 24 >> 0] | 0; //@line 21881
 $8 = $0 + 25 | 0; //@line 21882
 $11 = (HEAPU8[$8 >> 0] | 0) + $7 | 0; //@line 21885
 $14 = $0 + 26 | 0; //@line 21888
 if ((HEAP8[$2 >> 0] | 0) == (HEAPU8[$14 >> 0] | 0)) {
  HEAP32[$4 >> 2] = 0; //@line 21893
  $$0 = 0; //@line 21894
  return $$0 | 0; //@line 21895
 }
 if ((HEAP32[$4 >> 2] | 0) >>> 0 < $7 >>> 0) {
  $$0 = 0; //@line 21900
  return $$0 | 0; //@line 21901
 }
 HEAP8[$3 >> 0] = HEAP8[$0 + 22 >> 0] | 0; //@line 21905
 $22 = HEAP32[$4 >> 2] | 0; //@line 21906
 if ($22 >>> 0 < $11 >>> 0) {
  $$0 = 1; //@line 21909
  return $$0 | 0; //@line 21910
 }
 if ((($22 >>> 0) % ((HEAPU8[$8 >> 0] | 0) >>> 0) | 0 | 0) != 1) {
  $$0 = 1; //@line 21917
  return $$0 | 0; //@line 21918
 }
 $28 = HEAP8[$2 >> 0] | 0; //@line 21920
 $34 = $0 + 88 | 0; //@line 21928
 $35 = $28 & 255; //@line 21929
 $36 = HEAP8[((HEAP8[$0 + 128 >> 0] & 1) == 0 ? $14 : $0 + 35 | 0) >> 0] | 0; //@line 21930
 $$18$i$i = ($35 | 0) == ($36 | 0) ? $28 : $35 + 255 & 255; //@line 21934
 L14 : do {
  if (($$18$i$i & 255 | 0) == ($36 | 0)) {
   $$1$lcssa$i$i = $$18$i$i; //@line 21939
  } else {
   $44 = HEAPU8[$0 + 92 >> 0] | 0; //@line 21943
   $$19$i$i = $$18$i$i; //@line 21944
   while (1) {
    $45 = $$19$i$i << 24 >> 24; //@line 21946
    if (($45 | 0) < ($44 | 0)) {
     if (HEAP8[(HEAP32[$34 >> 2] | 0) + $45 >> 0] | 0) {
      $$1$lcssa$i$i = $$19$i$i; //@line 21954
      break L14;
     }
    }
    $47 = $$19$i$i & 255; //@line 21958
    $$1$i$i = ($47 | 0) == ($36 | 0) ? $$19$i$i : $47 + 255 & 255; //@line 21962
    if (($$1$i$i & 255 | 0) == ($36 | 0)) {
     $$1$lcssa$i$i = $$1$i$i; //@line 21966
     break;
    } else {
     $$19$i$i = $$1$i$i; //@line 21969
    }
   }
  }
 } while (0);
 HEAP8[$2 >> 0] = $$1$lcssa$i$i; //@line 21974
 $60 = ($$1$lcssa$i$i << 24 >> 24 | 0) != (HEAPU8[$14 >> 0] | 0); //@line 21978
 if ($60 | $1 ^ 1) {
  $$0 = $60; //@line 21982
  return $$0 | 0; //@line 21983
 }
 $63 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 21987
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 21988
 FUNCTION_TABLE_vi[$63 & 1023]($0); //@line 21989
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 542; //@line 21992
  sp = STACKTOP; //@line 21993
  return 0; //@line 21994
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 21996
 $$0 = 0; //@line 21997
 return $$0 | 0; //@line 21998
}
function _mbed_error_vfprintf($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01213 = 0, $$014 = 0, $2 = 0, $24 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0, $$01213$looptemp = 0;
 sp = STACKTOP; //@line 7095
 STACKTOP = STACKTOP + 128 | 0; //@line 7096
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 7096
 $2 = sp; //@line 7097
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 7098
 $3 = _vsnprintf($2, 128, $0, $1) | 0; //@line 7099
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 617; //@line 7102
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 7104
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 7106
  sp = STACKTOP; //@line 7107
  STACKTOP = sp; //@line 7108
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7110
 if (($3 | 0) <= 0) {
  STACKTOP = sp; //@line 7113
  return;
 }
 if (!(HEAP32[4897] | 0)) {
  _serial_init(19592, 2, 3); //@line 7118
  $$01213 = 0; //@line 7119
  $$014 = 0; //@line 7119
 } else {
  $$01213 = 0; //@line 7121
  $$014 = 0; //@line 7121
 }
 while (1) {
  $$01213$looptemp = $$01213;
  $$01213 = HEAP8[$2 + $$014 >> 0] | 0; //@line 7125
  if (!($$01213$looptemp << 24 >> 24 == 13 | $$01213 << 24 >> 24 != 10)) {
   $AsyncCtx7 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7130
   _serial_putc(19592, 13); //@line 7131
   if (___async) {
    label = 8; //@line 7134
    break;
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 7137
  }
  $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7140
  _serial_putc(19592, $$01213 << 24 >> 24); //@line 7141
  if (___async) {
   label = 11; //@line 7144
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 7147
  $24 = $$014 + 1 | 0; //@line 7148
  if (($24 | 0) == ($3 | 0)) {
   label = 13; //@line 7151
   break;
  } else {
   $$014 = $24; //@line 7154
  }
 }
 if ((label | 0) == 8) {
  HEAP32[$AsyncCtx7 >> 2] = 618; //@line 7158
  HEAP8[$AsyncCtx7 + 4 >> 0] = $$01213; //@line 7160
  HEAP32[$AsyncCtx7 + 8 >> 2] = $$014; //@line 7162
  HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 7164
  HEAP32[$AsyncCtx7 + 16 >> 2] = $2; //@line 7166
  HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 7168
  sp = STACKTOP; //@line 7169
  STACKTOP = sp; //@line 7170
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$AsyncCtx3 >> 2] = 619; //@line 7173
  HEAP32[$AsyncCtx3 + 4 >> 2] = $$014; //@line 7175
  HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 7177
  HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 7179
  HEAP8[$AsyncCtx3 + 16 >> 0] = $$01213; //@line 7181
  HEAP32[$AsyncCtx3 + 20 >> 2] = $2; //@line 7183
  sp = STACKTOP; //@line 7184
  STACKTOP = sp; //@line 7185
  return;
 } else if ((label | 0) == 13) {
  STACKTOP = sp; //@line 7188
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_120($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 26320
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26324
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26326
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 26328
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26330
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 26332
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26334
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26336
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26338
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26340
 $22 = HEAP8[$0 + 44 >> 0] & 1; //@line 26343
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 26345
 do {
  if ((HEAP32[$0 + 4 >> 2] | 0) > 1) {
   $26 = $4 + 24 | 0; //@line 26349
   $27 = $6 + 24 | 0; //@line 26350
   $28 = $4 + 8 | 0; //@line 26351
   $29 = $6 + 54 | 0; //@line 26352
   if (!(HEAP8[$29 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$28 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$27 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$28 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 26382
    HEAP8[$14 >> 0] = 0; //@line 26383
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 26384
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($26, $6, $16, $18, $20, $22); //@line 26385
    if (!___async) {
     ___async_unwind = 0; //@line 26388
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 663; //@line 26390
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $26; //@line 26392
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $24; //@line 26394
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $29; //@line 26396
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 26398
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 26400
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 26402
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 26404
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $27; //@line 26406
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $28; //@line 26408
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $6; //@line 26410
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $16; //@line 26412
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $18; //@line 26414
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $20; //@line 26416
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $22 & 1; //@line 26419
    sp = STACKTOP; //@line 26420
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 26425
 HEAP8[$14 >> 0] = $12; //@line 26426
 return;
}
function __ZN12LoRaWANStack23process_connected_stateEv__async_cb_208($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 3351
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3355
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3357
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3359
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 3361
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 3362
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 3366
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 3367
  FUNCTION_TABLE_vi[$13 & 1023]($4); //@line 3368
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 314; //@line 3371
   $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 3372
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 3373
   $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 3374
   HEAP32[$15 >> 2] = $4; //@line 3375
   $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 3376
   HEAP32[$16 >> 2] = $6; //@line 3377
   $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 3378
   HEAP32[$17 >> 2] = $8; //@line 3379
   sp = STACKTOP; //@line 3380
   return;
  }
  ___async_unwind = 0; //@line 3383
  HEAP32[$ReallocAsyncCtx2 >> 2] = 314; //@line 3384
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 3385
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 3386
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 3387
  HEAP32[$15 >> 2] = $4; //@line 3388
  $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 3389
  HEAP32[$16 >> 2] = $6; //@line 3390
  $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 3391
  HEAP32[$17 >> 2] = $8; //@line 3392
  sp = STACKTOP; //@line 3393
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 4; //@line 3400
  HEAP32[$8 + 2480 >> 2] = 2; //@line 3402
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 3405
 _mbed_assert_internal(13097, 12384, 646); //@line 3406
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 315; //@line 3409
  $19 = $ReallocAsyncCtx4 + 4 | 0; //@line 3410
  HEAP32[$19 >> 2] = $4; //@line 3411
  $20 = $ReallocAsyncCtx4 + 8 | 0; //@line 3412
  HEAP32[$20 >> 2] = $6; //@line 3413
  $21 = $ReallocAsyncCtx4 + 12 | 0; //@line 3414
  HEAP32[$21 >> 2] = $8; //@line 3415
  sp = STACKTOP; //@line 3416
  return;
 }
 ___async_unwind = 0; //@line 3419
 HEAP32[$ReallocAsyncCtx4 >> 2] = 315; //@line 3420
 $19 = $ReallocAsyncCtx4 + 4 | 0; //@line 3421
 HEAP32[$19 >> 2] = $4; //@line 3422
 $20 = $ReallocAsyncCtx4 + 8 | 0; //@line 3423
 HEAP32[$20 >> 2] = $6; //@line 3424
 $21 = $ReallocAsyncCtx4 + 12 | 0; //@line 3425
 HEAP32[$21 >> 2] = $8; //@line 3426
 sp = STACKTOP; //@line 3427
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 26204
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26208
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26210
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 26212
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26214
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 26216
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26218
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26220
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26222
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26224
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 26226
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 26228
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 26230
 $28 = HEAP8[$0 + 56 >> 0] & 1; //@line 26233
 $43 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 26234
 do {
  if ($43 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$18 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$16 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$18 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 26267
    HEAP8[$14 >> 0] = 0; //@line 26268
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 26269
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($43, $20, $22, $24, $26, $28); //@line 26270
    if (!___async) {
     ___async_unwind = 0; //@line 26273
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 663; //@line 26275
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $43; //@line 26277
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 26279
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 26281
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 26283
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 26285
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 26287
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 26289
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 26291
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 26293
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 26295
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 26297
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 26299
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $26; //@line 26301
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $28 & 1; //@line 26304
    sp = STACKTOP; //@line 26305
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 26310
 HEAP8[$14 >> 0] = $12; //@line 26311
 return;
}
function __ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $106 = 0, $107 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $85 = 0, $95 = 0, $99 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26504
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26506
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26508
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26510
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26512
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26514
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26516
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26518
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26520
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$2 + 2076 >> 2] = 13; //@line 26526
  return;
 }
 if (((HEAPU8[$6 + -3 + ($2 + 1442) >> 0] | 0) << 8 | (HEAPU8[$2 + 1442 + $4 >> 0] | 0) | (HEAPU8[$6 + -2 + ($2 + 1442) >> 0] | 0) << 16 | (HEAPU8[$6 + -1 + ($2 + 1442) >> 0] | 0) << 24 | 0) != (HEAP32[$8 >> 2] | 0)) {
  HEAP32[$2 + 2076 >> 2] = 7; //@line 26554
  return;
 }
 if (__ZN13LoRaMacCrypto28compute_skeys_for_join_frameEPKhjS1_tPhS2_($14, HEAP32[$12 >> 2] | 0, 128, $16, HEAP16[$2 + 1748 >> 1] | 0, $2 + 1716 | 0, $2 + 1732 | 0) | 0) {
  HEAP32[$2 + 2076 >> 2] = 13; //@line 26566
  return;
 }
 HEAP32[$2 + 1752 >> 2] = (HEAPU8[$2 + 1448 >> 0] | 0) << 16 | ((HEAPU8[$2 + 1447 >> 0] | 0) << 8 | (HEAPU8[$2 + 1446 >> 0] | 0)); //@line 26583
 HEAP32[$2 + 1756 >> 2] = (HEAPU8[$2 + 1452 >> 0] | 0) << 24 | ((HEAPU8[$2 + 1451 >> 0] | 0) << 16 | ((HEAPU8[$2 + 1450 >> 0] | 0) << 8 | (HEAPU8[$2 + 1449 >> 0] | 0))); //@line 26603
 $85 = HEAP8[$2 + 1453 >> 0] | 0; //@line 26605
 HEAP8[$2 + 1909 >> 0] = ($85 & 255) >>> 4 & 7; //@line 26611
 HEAP8[$2 + 1916 >> 0] = $85 & 15; //@line 26614
 $95 = HEAP8[$2 + 1454 >> 0] & 15; //@line 26617
 $99 = $95 << 24 >> 24 == 0 ? 1e3 : ($95 & 255) * 1e3 | 0; //@line 26622
 HEAP32[$2 + 1892 >> 2] = $99; //@line 26623
 HEAP32[$2 + 1896 >> 2] = $99 + 1e3; //@line 26626
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 26631
 __ZN7LoRaPHY13apply_cf_listEPKhh($2 + 4 | 0, $2 + 1455 | 0, $6 + 239 & 255); //@line 26632
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 385; //@line 26635
  $106 = $ReallocAsyncCtx2 + 4 | 0; //@line 26636
  HEAP32[$106 >> 2] = $2; //@line 26637
  $107 = $ReallocAsyncCtx2 + 8 | 0; //@line 26638
  HEAP32[$107 >> 2] = $10; //@line 26639
  sp = STACKTOP; //@line 26640
  return;
 }
 ___async_unwind = 0; //@line 26643
 HEAP32[$ReallocAsyncCtx2 >> 2] = 385; //@line 26644
 $106 = $ReallocAsyncCtx2 + 4 | 0; //@line 26645
 HEAP32[$106 >> 2] = $2; //@line 26646
 $107 = $ReallocAsyncCtx2 + 8 | 0; //@line 26647
 HEAP32[$107 >> 2] = $10; //@line 26648
 sp = STACKTOP; //@line 26649
 return;
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $18 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, sp = 0;
 sp = STACKTOP; //@line 1180
 STACKTOP = STACKTOP + 32 | 0; //@line 1181
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 1181
 $vararg_buffer6 = sp + 24 | 0; //@line 1182
 $vararg_buffer3 = sp + 16 | 0; //@line 1183
 $vararg_buffer = sp; //@line 1184
 $5 = $3 & 65535; //@line 1186
 HEAP32[$vararg_buffer >> 2] = $1; //@line 1187
 HEAP32[$vararg_buffer + 4 >> 2] = $2 << 24 >> 24; //@line 1189
 HEAP32[$vararg_buffer + 8 >> 2] = $5; //@line 1191
 _mbed_tracef(16, 10996, 11001, $vararg_buffer); //@line 1192
 $8 = HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] | 0; //@line 1195
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 1196
 FUNCTION_TABLE_vii[$8 & 15]($0, $1); //@line 1197
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 64; //@line 1200
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1202
  HEAP8[$AsyncCtx + 8 >> 0] = $2; //@line 1204
  HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 1206
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 1208
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer3; //@line 1210
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer6; //@line 1212
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer6; //@line 1214
  sp = STACKTOP; //@line 1215
  STACKTOP = sp; //@line 1216
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1218
 $18 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 1221
 $AsyncCtx10 = _emscripten_alloc_async_context(24, sp) | 0; //@line 1222
 FUNCTION_TABLE_viiiiiiiiiiiiii[$18 & 1]($0, 0, $2, 0, 0, 4800, 0, 5, 0, 0, 0, 0, 0, $5); //@line 1223
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 65; //@line 1226
  HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 1228
  HEAP32[$AsyncCtx10 + 8 >> 2] = $vararg_buffer3; //@line 1230
  HEAP32[$AsyncCtx10 + 12 >> 2] = $vararg_buffer3; //@line 1232
  HEAP32[$AsyncCtx10 + 16 >> 2] = $vararg_buffer6; //@line 1234
  HEAP32[$AsyncCtx10 + 20 >> 2] = $vararg_buffer6; //@line 1236
  sp = STACKTOP; //@line 1237
  STACKTOP = sp; //@line 1238
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx10 | 0); //@line 1240
  HEAP8[$0 + 688 >> 0] = 2; //@line 1242
  HEAP32[$vararg_buffer3 >> 2] = 3; //@line 1243
  _mbed_tracef(16, 10996, 11053, $vararg_buffer3); //@line 1244
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 1245
  HEAP32[$vararg_buffer6 >> 2] = 3; //@line 1246
  _mbed_tracef(16, 10996, 11082, $vararg_buffer6); //@line 1247
  STACKTOP = sp; //@line 1248
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_300($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 10533
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10535
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10537
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10539
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10541
 $10 = HEAP16[$0 + 20 >> 1] | 0; //@line 10543
 $12 = HEAP16[$0 + 22 >> 1] | 0; //@line 10545
 $14 = HEAP8[$0 + 24 >> 0] | 0; //@line 10547
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 10549
 $19 = $6 + 12 | 0; //@line 10553
 HEAP32[$19 >> 2] = HEAP32[HEAP32[$0 + 32 >> 2] >> 2]; //@line 10554
 $20 = $6 + 16 | 0; //@line 10555
 HEAP32[$20 >> 2] = $8; //@line 10556
 HEAP16[$6 + 20 >> 1] = $10; //@line 10558
 HEAP16[$6 + 22 >> 1] = $12; //@line 10560
 HEAP8[$6 + 24 >> 0] = $14; //@line 10562
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 10563
 $24 = _equeue_alloc($16, 28) | 0; //@line 10564
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 283; //@line 10567
  $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 10568
  HEAP32[$25 >> 2] = $4; //@line 10569
  $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 10570
  HEAP32[$26 >> 2] = $2; //@line 10571
  $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 10572
  HEAP32[$27 >> 2] = $19; //@line 10573
  $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 10574
  HEAP32[$28 >> 2] = $6; //@line 10575
  $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 10576
  HEAP32[$29 >> 2] = $19; //@line 10577
  $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 10578
  HEAP32[$30 >> 2] = $20; //@line 10579
  $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 10580
  HEAP32[$31 >> 2] = $16; //@line 10581
  sp = STACKTOP; //@line 10582
  return;
 }
 HEAP32[___async_retval >> 2] = $24; //@line 10586
 ___async_unwind = 0; //@line 10587
 HEAP32[$ReallocAsyncCtx7 >> 2] = 283; //@line 10588
 $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 10589
 HEAP32[$25 >> 2] = $4; //@line 10590
 $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 10591
 HEAP32[$26 >> 2] = $2; //@line 10592
 $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 10593
 HEAP32[$27 >> 2] = $19; //@line 10594
 $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 10595
 HEAP32[$28 >> 2] = $6; //@line 10596
 $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 10597
 HEAP32[$29 >> 2] = $19; //@line 10598
 $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 10599
 HEAP32[$30 >> 2] = $20; //@line 10600
 $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 10601
 HEAP32[$31 >> 2] = $16; //@line 10602
 sp = STACKTOP; //@line 10603
 return;
}
function _equeue_alloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$038$sink$i = 0, $$03842$i = 0, $$1$i9 = 0, $10 = 0, $11 = 0, $14 = 0, $17 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3181
 do {
  if (HEAP8[$0 + 184 >> 0] | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 3187
   _wait_ms(10); //@line 3188
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 120; //@line 3191
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 3193
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 3195
    sp = STACKTOP; //@line 3196
    return 0; //@line 3197
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3199
    break;
   }
  }
 } while (0);
 $8 = $1 + 39 & -4; //@line 3205
 $9 = $0 + 156 | 0; //@line 3206
 _equeue_mutex_lock($9); //@line 3207
 $10 = $0 + 24 | 0; //@line 3208
 $11 = HEAP32[$10 >> 2] | 0; //@line 3209
 L7 : do {
  if (!$11) {
   label = 11; //@line 3213
  } else {
   $$03842$i = $10; //@line 3215
   $14 = $11; //@line 3215
   while (1) {
    if ((HEAP32[$14 >> 2] | 0) >>> 0 >= $8 >>> 0) {
     break;
    }
    $20 = $14 + 8 | 0; //@line 3222
    $21 = HEAP32[$20 >> 2] | 0; //@line 3223
    if (!$21) {
     label = 11; //@line 3226
     break L7;
    } else {
     $$03842$i = $20; //@line 3229
     $14 = $21; //@line 3229
    }
   }
   $17 = HEAP32[$14 + 12 >> 2] | 0; //@line 3233
   if (!$17) {
    $$038$sink$i = $$03842$i; //@line 3236
   } else {
    HEAP32[$$03842$i >> 2] = $17; //@line 3238
    $$038$sink$i = $17 + 8 | 0; //@line 3240
   }
   HEAP32[$$038$sink$i >> 2] = HEAP32[$14 + 8 >> 2]; //@line 3244
   _equeue_mutex_unlock($9); //@line 3245
   $$1$i9 = $14; //@line 3246
  }
 } while (0);
 do {
  if ((label | 0) == 11) {
   $23 = $0 + 28 | 0; //@line 3251
   $24 = HEAP32[$23 >> 2] | 0; //@line 3252
   if ($24 >>> 0 < $8 >>> 0) {
    _equeue_mutex_unlock($9); //@line 3255
    $$0 = 0; //@line 3256
    return $$0 | 0; //@line 3257
   } else {
    $26 = $0 + 32 | 0; //@line 3259
    $27 = HEAP32[$26 >> 2] | 0; //@line 3260
    HEAP32[$26 >> 2] = $27 + $8; //@line 3262
    HEAP32[$23 >> 2] = $24 - $8; //@line 3264
    HEAP32[$27 >> 2] = $8; //@line 3265
    HEAP8[$27 + 4 >> 0] = 1; //@line 3267
    _equeue_mutex_unlock($9); //@line 3268
    if (!$27) {
     $$0 = 0; //@line 3271
    } else {
     $$1$i9 = $27; //@line 3273
     break;
    }
    return $$0 | 0; //@line 3276
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 3281
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 3283
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 3285
 $$0 = $$1$i9 + 36 | 0; //@line 3287
 return $$0 | 0; //@line 3288
}
function __ZN7LoRaMac4joinEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$i = 0, $2 = 0, $20 = 0, $27 = 0, $3 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 15276
 STACKTOP = STACKTOP + 16 | 0; //@line 15277
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15277
 $vararg_buffer = sp; //@line 15278
 $2 = sp + 5 | 0; //@line 15279
 $3 = sp + 4 | 0; //@line 15280
 if (!$1) {
  HEAP8[$0 + 2360 >> 0] = 1; //@line 15283
  $$0 = 0; //@line 15284
  STACKTOP = sp; //@line 15285
  return $$0 | 0; //@line 15285
 }
 $5 = $0 + 2068 | 0; //@line 15287
 HEAP32[$5 >> 2] = 0; //@line 15288
 HEAP32[$5 + 4 >> 2] = 0; //@line 15288
 HEAP32[$5 + 8 >> 2] = 0; //@line 15288
 HEAP32[$5 + 12 >> 2] = 0; //@line 15288
 HEAP32[$5 + 16 >> 2] = 0; //@line 15288
 HEAP32[$0 + 2076 >> 2] = 1; //@line 15290
 HEAP32[$0 + 2072 >> 2] = 0; //@line 15292
 HEAP8[$0 + 1877 >> 0] = __ZN7LoRaPHY16get_alternate_DREh($0 + 4 | 0, (HEAPU8[$0 + 1701 >> 0] | 0) + 1 & 255) | 0; //@line 15301
 HEAP8[$2 >> 0] = 0; //@line 15302
 HEAP8[$3 >> 0] = HEAP8[$0 + 1936 >> 0] << 7; //@line 15306
 HEAP8[$0 + 1180 >> 0] = 1; //@line 15308
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 15309
 $20 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt($0, $2, $3, 0, 0, 0) | 0; //@line 15310
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 445; //@line 15313
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 15315
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 15317
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 15319
  HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 15321
  HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 15323
  sp = STACKTOP; //@line 15324
  STACKTOP = sp; //@line 15325
  return 0; //@line 15325
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15327
 do {
  if (!$20) {
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15331
   $27 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 15332
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 446; //@line 15335
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 15337
    HEAP32[$AsyncCtx3 + 8 >> 2] = $2; //@line 15339
    sp = STACKTOP; //@line 15340
    STACKTOP = sp; //@line 15341
    return 0; //@line 15341
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15343
    $$0$i = $27; //@line 15344
    break;
   }
  } else {
   HEAP32[$vararg_buffer >> 2] = $20; //@line 15348
   _mbed_tracef(2, 13239, 13244, $vararg_buffer); //@line 15349
   $$0$i = $20; //@line 15350
  }
 } while (0);
 $$0 = $$0$i; //@line 15353
 STACKTOP = sp; //@line 15354
 return $$0 | 0; //@line 15354
}
function __ZN7LoRaMac15open_rx1_windowEv($0) {
 $0 = $0 | 0;
 var $16 = 0, $21 = 0, $33 = 0, $35 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 14494
 $AsyncCtx10 = _emscripten_alloc_async_context(8, sp) | 0; //@line 14496
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1816 | 0); //@line 14497
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 432; //@line 14500
  HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 14502
  sp = STACKTOP; //@line 14503
  return;
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 14506
 HEAP32[$0 + 1168 >> 2] = 0; //@line 14508
 $6 = $0 + 1940 | 0; //@line 14511
 HEAP8[$6 >> 0] = HEAP8[$0 + 1182 >> 0] | 0; //@line 14512
 HEAP8[$0 + 1943 >> 0] = HEAP8[$0 + 1909 >> 0] | 0; //@line 14516
 HEAP8[$0 + 1956 >> 0] = HEAP8[$0 + 1921 >> 0] | 0; //@line 14520
 HEAP8[$0 + 1957 >> 0] = HEAP8[$0 + 1173 >> 0] | 0; //@line 14524
 $16 = $0 + 1958 | 0; //@line 14525
 HEAP8[$16 >> 0] = 0; //@line 14526
 HEAP32[$0 + 1960 >> 2] = 0; //@line 14528
 $21 = $0 + 4 | 0; //@line 14532
 do {
  if ((HEAP32[$0 + 2364 >> 2] | 0) == 2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 14535
   __ZN7LoRaPHY20put_radio_to_standbyEv($21); //@line 14536
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 433; //@line 14539
    HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 14541
    HEAP32[$AsyncCtx2 + 8 >> 2] = $21; //@line 14543
    HEAP32[$AsyncCtx2 + 12 >> 2] = $6; //@line 14545
    HEAP32[$AsyncCtx2 + 16 >> 2] = $16; //@line 14547
    sp = STACKTOP; //@line 14548
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 14551
    break;
   }
  }
 } while (0);
 HEAP8[$0 + 2010 >> 0] = HEAP8[$0 + 1941 >> 0] | 0; //@line 14559
 $AsyncCtx6 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14560
 __ZN7LoRaPHY9rx_configEP18rx_config_params_t($21, $6) | 0; //@line 14561
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 434; //@line 14564
  HEAP32[$AsyncCtx6 + 4 >> 2] = $16; //@line 14566
  HEAP32[$AsyncCtx6 + 8 >> 2] = $0; //@line 14568
  HEAP32[$AsyncCtx6 + 12 >> 2] = $21; //@line 14570
  sp = STACKTOP; //@line 14571
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 14574
 $33 = (HEAP8[$16 >> 0] | 0) != 0; //@line 14576
 $35 = HEAP32[$0 + 1888 >> 2] | 0; //@line 14578
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14579
 __ZN7LoRaPHY15setup_rx_windowEbj($21, $33, $35); //@line 14580
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 435; //@line 14583
  sp = STACKTOP; //@line 14584
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14587
  return;
 }
}
function __ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 var $$ = 0, $$sink = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $32 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 266
 STACKTOP = STACKTOP + 32 | 0; //@line 267
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 267
 $vararg_buffer3 = sp + 16 | 0; //@line 268
 $vararg_buffer = sp; //@line 270
 $14 = $8 & 1; //@line 271
 $15 = $9 & 1; //@line 272
 $16 = $10 & 1; //@line 273
 $17 = $12 & 1; //@line 274
 HEAP8[$0 + 689 >> 0] = $1; //@line 277
 HEAP32[$vararg_buffer >> 2] = $2 << 24 >> 24; //@line 279
 _mbed_tracef(16, 10996, 11666, $vararg_buffer); //@line 280
 switch ($1 | 0) {
 case 0:
  {
   HEAP8[$0 + 696 >> 0] = $2; //@line 284
   HEAP32[$0 + 700 >> 2] = $3; //@line 286
   HEAP32[$0 + 704 >> 2] = $4; //@line 288
   HEAP32[$0 + 712 >> 2] = $5; //@line 290
   HEAP16[$0 + 716 >> 1] = $7; //@line 292
   HEAP8[$0 + 718 >> 0] = $14; //@line 294
   HEAP8[$0 + 720 >> 0] = $15; //@line 296
   HEAP8[$0 + 721 >> 0] = $17; //@line 298
   HEAP32[$0 + 724 >> 2] = $13; //@line 300
   _mbed_tracef(16, 10996, 11693, sp + 8 | 0); //@line 301
   STACKTOP = sp; //@line 302
   return;
  }
 case 1:
  {
   HEAP8[$0 + 748 >> 0] = $2; //@line 307
   if ($4 >>> 0 > 2) {
    while (1) {}
   }
   $32 = $4 + 7 | 0; //@line 313
   HEAP32[$0 + 752 >> 2] = $32; //@line 315
   HEAP32[$0 + 756 >> 2] = $5; //@line 317
   HEAP8[$0 + 761 >> 0] = $6; //@line 319
   HEAP16[$0 + 762 >> 1] = $7; //@line 321
   HEAP8[$0 + 764 >> 0] = $14; //@line 323
   HEAP8[$0 + 767 >> 0] = $16; //@line 325
   HEAP8[$0 + 768 >> 0] = $11; //@line 327
   HEAP8[$0 + 766 >> 0] = $15; //@line 329
   HEAP8[$0 + 769 >> 0] = $17; //@line 331
   HEAP32[$0 + 772 >> 2] = $13; //@line 333
   $$ = $5 >>> 0 > 6 ? $5 : 6; //@line 335
   if (($4 | 0) == 0 & (($$ >>> 0 < 12 ? $$ : 12) + -11 | 0) >>> 0 < 2) {
    label = 7; //@line 343
   } else {
    if (($32 | 0) == 8 & $$ >>> 0 > 11) {
     label = 7; //@line 349
    } else {
     $$sink = 0; //@line 351
    }
   }
   if ((label | 0) == 7) {
    $$sink = 1; //@line 355
   }
   HEAP8[$0 + 760 >> 0] = $$sink; //@line 358
   _mbed_tracef(16, 10996, 11711, $vararg_buffer3); //@line 359
   STACKTOP = sp; //@line 360
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 364
   return;
  }
 }
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_272($0) {
 $0 = $0 | 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7191
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7195
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7197
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7199
 if ((HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) != 2) {
  $13 = HEAP32[$4 + 1776 >> 2] | 0; //@line 7205
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 7206
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($6, $4 + 1836 | 0, $13); //@line 7207
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 361; //@line 7210
   $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 7211
   HEAP32[$14 >> 2] = $4; //@line 7212
   $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 7213
   HEAP32[$15 >> 2] = $8; //@line 7214
   $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 7215
   HEAP32[$16 >> 2] = $6; //@line 7216
   sp = STACKTOP; //@line 7217
   return;
  }
  ___async_unwind = 0; //@line 7220
  HEAP32[$ReallocAsyncCtx2 >> 2] = 361; //@line 7221
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 7222
  HEAP32[$14 >> 2] = $4; //@line 7223
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 7224
  HEAP32[$15 >> 2] = $8; //@line 7225
  $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 7226
  HEAP32[$16 >> 2] = $6; //@line 7227
  sp = STACKTOP; //@line 7228
  return;
 }
 if (!(HEAP8[$4 + 1177 >> 0] | 0)) {
  $29 = HEAP8[$4 + 1182 >> 0] | 0; //@line 7236
  HEAP8[$4 + 1183 >> 0] = $29; //@line 7238
  __ZN7LoRaPHY16set_last_tx_doneEhbj($4 + 4 | 0, $29, (HEAP8[$4 + 2360 >> 0] | 0) != 0, $8); //@line 7243
  HEAP32[$4 + 1780 >> 2] = $8; //@line 7245
  return;
 }
 $22 = HEAP32[$4 + 1776 >> 2] | 0; //@line 7250
 $25 = (__ZN7LoRaPHY15get_ack_timeoutEv($4 + 4 | 0) | 0) + $22 | 0; //@line 7253
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 7254
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($6, $4 + 1856 | 0, $25); //@line 7255
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 362; //@line 7258
  $26 = $ReallocAsyncCtx + 4 | 0; //@line 7259
  HEAP32[$26 >> 2] = $4; //@line 7260
  $27 = $ReallocAsyncCtx + 8 | 0; //@line 7261
  HEAP32[$27 >> 2] = $8; //@line 7262
  sp = STACKTOP; //@line 7263
  return;
 }
 ___async_unwind = 0; //@line 7266
 HEAP32[$ReallocAsyncCtx >> 2] = 362; //@line 7267
 $26 = $ReallocAsyncCtx + 4 | 0; //@line 7268
 HEAP32[$26 >> 2] = $4; //@line 7269
 $27 = $ReallocAsyncCtx + 8 | 0; //@line 7270
 HEAP32[$27 >> 2] = $8; //@line 7271
 sp = STACKTOP; //@line 7272
 return;
}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) {
  return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0; //@line 10
 }
 ret = dest | 0; //@line 13
 dest_end = dest + num | 0; //@line 14
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0; //@line 18
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 19
   dest = dest + 1 | 0; //@line 20
   src = src + 1 | 0; //@line 21
   num = num - 1 | 0; //@line 22
  }
  aligned_dest_end = dest_end & -4 | 0; //@line 24
  block_aligned_dest_end = aligned_dest_end - 64 | 0; //@line 25
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 27
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2]; //@line 28
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2]; //@line 29
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2]; //@line 30
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2]; //@line 31
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2]; //@line 32
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2]; //@line 33
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2]; //@line 34
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2]; //@line 35
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2]; //@line 36
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2]; //@line 37
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2]; //@line 38
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2]; //@line 39
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2]; //@line 40
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2]; //@line 41
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2]; //@line 42
   dest = dest + 64 | 0; //@line 43
   src = src + 64 | 0; //@line 44
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 47
   dest = dest + 4 | 0; //@line 48
   src = src + 4 | 0; //@line 49
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0; //@line 53
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 55
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0; //@line 56
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0; //@line 57
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0; //@line 58
   dest = dest + 4 | 0; //@line 59
   src = src + 4 | 0; //@line 60
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 65
  dest = dest + 1 | 0; //@line 66
  src = src + 1 | 0; //@line 67
 }
 return ret | 0; //@line 69
}
function __ZN7LoRaMac23message_integrity_checkEPKhtPhjPjS1_($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$ = 0, $$0 = 0, $12 = 0, $20 = 0, $21 = 0, $22 = 0, $43 = 0, $44 = 0, $47 = 0, $48 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12716
 STACKTOP = STACKTOP + 16 | 0; //@line 12717
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12717
 $7 = sp; //@line 12718
 HEAP32[$7 >> 2] = 0; //@line 12719
 $8 = HEAP8[$3 >> 0] | 0; //@line 12720
 $9 = $8 + 1 << 24 >> 24; //@line 12721
 HEAP8[$3 >> 0] = $9; //@line 12722
 $12 = HEAP8[$1 + ($8 & 255) >> 0] | 0; //@line 12725
 HEAP8[$3 >> 0] = $8 + 2 << 24 >> 24; //@line 12727
 $20 = (HEAPU8[$1 + ($9 & 255) >> 0] | 0) << 8 | $12 & 255; //@line 12734
 $21 = $2 & 65535; //@line 12735
 $22 = $21 + -4 | 0; //@line 12736
 $43 = (HEAPU8[$1 + ($21 + -3) >> 0] | 0) << 8 | (HEAPU8[$1 + $22 >> 0] | 0) | (HEAPU8[$1 + ($21 + -2) >> 0] | 0) << 16 | (HEAPU8[$1 + ($21 + -1) >> 0] | 0) << 24; //@line 12757
 $44 = HEAP32[$5 >> 2] | 0; //@line 12758
 $47 = $20 - $44 & 65535; //@line 12761
 $48 = $47 + $44 | 0; //@line 12762
 $$ = $20 >>> 0 < ($44 & 65535) >>> 0 ? $48 + 65536 | 0 : $48; //@line 12765
 HEAP32[$5 >> 2] = $$; //@line 12766
 $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 12769
 __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj($0 + 756 | 0, $1, $22 & 65535, $6, 128, $4, 1, $$, $7) | 0; //@line 12770
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 386; //@line 12773
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 12775
  HEAP32[$AsyncCtx + 8 >> 2] = $43; //@line 12777
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 12779
  HEAP32[$AsyncCtx + 16 >> 2] = $47; //@line 12781
  HEAP32[$AsyncCtx + 20 >> 2] = $7; //@line 12783
  HEAP32[$AsyncCtx + 24 >> 2] = $5; //@line 12785
  sp = STACKTOP; //@line 12786
  STACKTOP = sp; //@line 12787
  return 0; //@line 12787
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 12789
 if (($43 | 0) != (HEAP32[$7 >> 2] | 0)) {
  HEAP32[$0 + 2004 >> 2] = 12; //@line 12794
  $$0 = 0; //@line 12795
  STACKTOP = sp; //@line 12796
  return $$0 | 0; //@line 12796
 }
 if ($47 >>> 0 < ((__ZN7LoRaPHY29get_maximum_frame_counter_gapEv($0 + 4 | 0) | 0) & 65535) >>> 0) {
  $$0 = 1; //@line 12803
  STACKTOP = sp; //@line 12804
  return $$0 | 0; //@line 12804
 }
 HEAP32[$0 + 2004 >> 2] = 10; //@line 12807
 HEAP32[$0 + 2032 >> 2] = HEAP32[$5 >> 2]; //@line 12810
 $$0 = 0; //@line 12811
 STACKTOP = sp; //@line 12812
 return $$0 | 0; //@line 12812
}
function __ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 var $$ = 0, $$sink = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $40 = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 140
 STACKTOP = STACKTOP + 16 | 0; //@line 141
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 141
 $vararg_buffer1 = sp + 8 | 0; //@line 142
 $15 = $8 & 1; //@line 144
 $16 = $10 & 1; //@line 145
 $17 = $11 & 1; //@line 146
 $18 = $13 & 1; //@line 147
 $19 = $14 & 1; //@line 148
 HEAP8[$0 + 689 >> 0] = $1; //@line 151
 switch ($1 | 0) {
 case 0:
  {
   HEAP32[$0 + 704 >> 2] = $2; //@line 155
   HEAP32[$0 + 712 >> 2] = $3; //@line 157
   HEAP32[$0 + 708 >> 2] = $5; //@line 159
   HEAP8[$0 + 718 >> 0] = $15; //@line 161
   HEAP8[$0 + 719 >> 0] = $9; //@line 163
   HEAP8[$0 + 720 >> 0] = $16; //@line 165
   HEAP8[$0 + 721 >> 0] = $18; //@line 167
   HEAP8[$0 + 722 >> 0] = $19; //@line 169
   HEAP16[$0 + 716 >> 1] = $6; //@line 171
   HEAP32[$0 + 728 >> 2] = ~~(1.0 / +($3 >>> 0) * 8.0 * +($7 & 65535) * 1.0e3) >>> 0; //@line 180
   _mbed_tracef(16, 10996, 11730, sp); //@line 181
   STACKTOP = sp; //@line 182
   return;
  }
 case 1:
  {
   if ($2 >>> 0 > 2) {
    while (1) {}
   }
   $40 = $2 + 7 | 0; //@line 191
   HEAP32[$0 + 752 >> 2] = $40; //@line 193
   HEAP32[$0 + 756 >> 2] = $3; //@line 195
   HEAP8[$0 + 761 >> 0] = $4; //@line 197
   HEAP16[$0 + 762 >> 1] = $6; //@line 199
   HEAP8[$0 + 764 >> 0] = $15; //@line 201
   HEAP8[$0 + 765 >> 0] = $9; //@line 203
   HEAP8[$0 + 766 >> 0] = $16; //@line 205
   HEAP8[$0 + 767 >> 0] = $17; //@line 207
   HEAP8[$0 + 768 >> 0] = $12; //@line 209
   HEAP8[$0 + 769 >> 0] = $18; //@line 211
   HEAP8[$0 + 770 >> 0] = $19; //@line 213
   $$ = $3 >>> 0 > 6 ? $3 : 6; //@line 215
   if (($2 | 0) == 0 & (($$ >>> 0 < 12 ? $$ : 12) + -11 | 0) >>> 0 < 2) {
    label = 7; //@line 223
   } else {
    if (($40 | 0) == 8 & $$ >>> 0 > 11) {
     label = 7; //@line 229
    } else {
     $$sink = 0; //@line 231
    }
   }
   if ((label | 0) == 7) {
    $$sink = 1; //@line 235
   }
   HEAP8[$0 + 760 >> 0] = $$sink; //@line 238
   _mbed_tracef(16, 10996, 11711, $vararg_buffer1); //@line 239
   STACKTOP = sp; //@line 240
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 244
   return;
  }
 }
}
function __ZN12LoRaWANStackD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $15 = 0, $19 = 0, $22 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 4810
 $1 = $0 + 2484 | 0; //@line 4811
 $3 = HEAP32[$0 + 2528 >> 2] | 0; //@line 4813
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 4819
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 4820
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 2516 | 0); //@line 4821
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 152; //@line 4824
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4826
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 4828
    sp = STACKTOP; //@line 4829
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 4832
    break;
   }
  }
 } while (0);
 $11 = HEAP32[$0 + 2512 >> 2] | 0; //@line 4838
 do {
  if ($11 | 0) {
   $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 4844
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 4845
   FUNCTION_TABLE_vi[$15 & 1023]($0 + 2500 | 0); //@line 4846
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 153; //@line 4849
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 4851
    HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 4853
    sp = STACKTOP; //@line 4854
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4857
    break;
   }
  }
 } while (0);
 $19 = HEAP32[$0 + 2496 >> 2] | 0; //@line 4863
 do {
  if ($19 | 0) {
   $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 4868
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4869
   FUNCTION_TABLE_vi[$22 & 1023]($1); //@line 4870
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 154; //@line 4873
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 4875
    sp = STACKTOP; //@line 4876
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 4879
    break;
   }
  }
 } while (0);
 $AsyncCtx14 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4885
 __ZN12radio_eventsD2Ev($0 + 2368 | 0); //@line 4886
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 155; //@line 4889
  HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 4891
  sp = STACKTOP; //@line 4892
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 4895
 $AsyncCtx10 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4896
 __ZN7LoRaMacD2Ev($0); //@line 4897
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 156; //@line 4900
  sp = STACKTOP; //@line 4901
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx10 | 0); //@line 4904
  return;
 }
}
function __ZN7LoRaPHY18dl_channel_requestEhj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$079$i = 0, $$1 = 0, $11 = 0, $13 = 0, $20 = 0, $25 = 0, $28 = 0, $29 = 0, $34 = 0, $35 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20243
 if (!(HEAP8[$0 + 17 >> 0] | 0)) {
  $$0 = 0; //@line 20248
  return $$0 | 0; //@line 20249
 }
 $6 = $0 + 76 | 0; //@line 20251
 L4 : do {
  if (!(HEAP8[$6 >> 0] | 0)) {
   $25 = -1; //@line 20256
  } else {
   $$079$i = 0; //@line 20258
   while (1) {
    $11 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 20262
    $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 20264
    $13 = FUNCTION_TABLE_iiii[$11 & 31]($0, $2, $$079$i & 255) | 0; //@line 20265
    if (___async) {
     break;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 20270
    if ($13) {
     $25 = $$079$i; //@line 20272
     break L4;
    }
    $20 = $$079$i + 1 | 0; //@line 20275
    if (($20 | 0) < (HEAPU8[$6 >> 0] | 0)) {
     $$079$i = $20; //@line 20280
    } else {
     $25 = -1; //@line 20282
     break L4;
    }
   }
   HEAP32[$AsyncCtx >> 2] = 517; //@line 20286
   HEAP32[$AsyncCtx + 4 >> 2] = $$079$i; //@line 20288
   HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 20290
   HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 20292
   HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 20294
   HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 20296
   HEAP8[$AsyncCtx + 24 >> 0] = $1; //@line 20298
   sp = STACKTOP; //@line 20299
   return 0; //@line 20300
  }
 } while (0);
 $28 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 20306
 $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 20307
 $29 = FUNCTION_TABLE_iiii[$28 & 31]($0, $2, $25 & 255) | 0; //@line 20308
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 518; //@line 20311
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 20313
  HEAP8[$AsyncCtx2 + 8 >> 0] = $1; //@line 20315
  HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 20317
  sp = STACKTOP; //@line 20318
  return 0; //@line 20319
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 20321
 $$ = $29 ? 3 : 2; //@line 20322
 $34 = HEAP32[$0 + 124 >> 2] | 0; //@line 20324
 $35 = $1 & 255; //@line 20325
 $$1 = (HEAP32[$34 + ($35 * 12 | 0) >> 2] | 0) == 0 ? $$ & 1 : $$; //@line 20330
 if ($$1 << 24 >> 24 != 3) {
  $$0 = $$1; //@line 20333
  return $$0 | 0; //@line 20334
 }
 HEAP32[$34 + ($35 * 12 | 0) + 4 >> 2] = $2; //@line 20337
 $$0 = 3; //@line 20338
 return $$0 | 0; //@line 20339
}
function __ZN7LoRaMac11schedule_txEv__async_cb_129($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $31 = 0, $36 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26969
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26971
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26973
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26975
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 26977
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26979
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26981
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26983
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26985
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26987
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26989
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 26991
 HEAP32[$2 + 2076 >> 2] = 1; //@line 26993
 HEAP32[$2 + 2040 >> 2] = 1; //@line 26995
 HEAP8[$2 + 2044 >> 0] = HEAP8[$4 >> 0] | 0; //@line 26998
 HEAP8[$2 + 2045 >> 0] = HEAP8[$6 >> 0] | 0; //@line 27001
 HEAP32[$2 + 2056 >> 2] = $8 & 255; //@line 27004
 $31 = HEAP32[$10 >> 2] | 0; //@line 27005
 HEAP32[$2 + 2048 >> 2] = $31; //@line 27007
 HEAP32[$2 + 2080 >> 2] = $31; //@line 27009
 if (!(HEAP8[$12 >> 0] | 0)) {
  $36 = $2 + 1701 | 0; //@line 27013
  HEAP8[$36 >> 0] = (HEAP8[$36 >> 0] | 0) + 1 << 24 >> 24; //@line 27016
 }
 $41 = HEAP16[$14 >> 1] & 255; //@line 27020
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 27021
 __ZN7LoRaPHY11handle_sendEPhh($16, $2 + 1185 | 0, $41); //@line 27022
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 383; //@line 27025
  $42 = $ReallocAsyncCtx2 + 4 | 0; //@line 27026
  HEAP32[$42 >> 2] = $6; //@line 27027
  $43 = $ReallocAsyncCtx2 + 8 | 0; //@line 27028
  HEAP32[$43 >> 2] = $18; //@line 27029
  $44 = $ReallocAsyncCtx2 + 12 | 0; //@line 27030
  HEAP32[$44 >> 2] = $20; //@line 27031
  $45 = $ReallocAsyncCtx2 + 16 | 0; //@line 27032
  HEAP32[$45 >> 2] = $22; //@line 27033
  sp = STACKTOP; //@line 27034
  return;
 }
 ___async_unwind = 0; //@line 27037
 HEAP32[$ReallocAsyncCtx2 >> 2] = 383; //@line 27038
 $42 = $ReallocAsyncCtx2 + 4 | 0; //@line 27039
 HEAP32[$42 >> 2] = $6; //@line 27040
 $43 = $ReallocAsyncCtx2 + 8 | 0; //@line 27041
 HEAP32[$43 >> 2] = $18; //@line 27042
 $44 = $ReallocAsyncCtx2 + 12 | 0; //@line 27043
 HEAP32[$44 >> 2] = $20; //@line 27044
 $45 = $ReallocAsyncCtx2 + 16 | 0; //@line 27045
 HEAP32[$45 >> 2] = $22; //@line 27046
 sp = STACKTOP; //@line 27047
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$2 = 0, $17 = 0, $18 = 0, $3 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 16052
 STACKTOP = STACKTOP + 64 | 0; //@line 16053
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 16053
 $3 = sp; //@line 16054
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0) {
  $$2 = 1; //@line 16057
 } else {
  if (!$1) {
   $$2 = 0; //@line 16061
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 16063
   $6 = ___dynamic_cast($1, 400, 384, 0) | 0; //@line 16064
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 652; //@line 16067
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 16069
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 16071
    HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 16073
    sp = STACKTOP; //@line 16074
    STACKTOP = sp; //@line 16075
    return 0; //@line 16075
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16077
   if (!$6) {
    $$2 = 0; //@line 16080
   } else {
    dest = $3 + 4 | 0; //@line 16083
    stop = dest + 52 | 0; //@line 16083
    do {
     HEAP32[dest >> 2] = 0; //@line 16083
     dest = dest + 4 | 0; //@line 16083
    } while ((dest | 0) < (stop | 0));
    HEAP32[$3 >> 2] = $6; //@line 16084
    HEAP32[$3 + 8 >> 2] = $0; //@line 16086
    HEAP32[$3 + 12 >> 2] = -1; //@line 16088
    HEAP32[$3 + 48 >> 2] = 1; //@line 16090
    $17 = HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] | 0; //@line 16093
    $18 = HEAP32[$2 >> 2] | 0; //@line 16094
    $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 16095
    FUNCTION_TABLE_viiii[$17 & 7]($6, $3, $18, 1); //@line 16096
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 653; //@line 16099
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 16101
     HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 16103
     HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 16105
     sp = STACKTOP; //@line 16106
     STACKTOP = sp; //@line 16107
     return 0; //@line 16107
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16109
    if ((HEAP32[$3 + 24 >> 2] | 0) == 1) {
     HEAP32[$2 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 16116
     $$0 = 1; //@line 16117
    } else {
     $$0 = 0; //@line 16119
    }
    $$2 = $$0; //@line 16121
   }
  }
 }
 STACKTOP = sp; //@line 16125
 return $$2 | 0; //@line 16125
}
function __ZN12LoRaWANStackD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 10952
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10954
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10956
 $6 = HEAP32[$2 + 2512 >> 2] | 0; //@line 10958
 if ($6 | 0) {
  $10 = HEAP32[$6 + 8 >> 2] | 0; //@line 10963
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 10964
  FUNCTION_TABLE_vi[$10 & 1023]($2 + 2500 | 0); //@line 10965
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 153; //@line 10968
   $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 10969
   HEAP32[$11 >> 2] = $2; //@line 10970
   $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 10971
   HEAP32[$12 >> 2] = $4; //@line 10972
   sp = STACKTOP; //@line 10973
   return;
  }
  ___async_unwind = 0; //@line 10976
  HEAP32[$ReallocAsyncCtx2 >> 2] = 153; //@line 10977
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 10978
  HEAP32[$11 >> 2] = $2; //@line 10979
  $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 10980
  HEAP32[$12 >> 2] = $4; //@line 10981
  sp = STACKTOP; //@line 10982
  return;
 }
 $14 = HEAP32[$2 + 2496 >> 2] | 0; //@line 10986
 if (!$14) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 10990
  __ZN12radio_eventsD2Ev($2 + 2368 | 0); //@line 10991
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 155; //@line 10994
   $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 10995
   HEAP32[$20 >> 2] = $2; //@line 10996
   sp = STACKTOP; //@line 10997
   return;
  }
  ___async_unwind = 0; //@line 11000
  HEAP32[$ReallocAsyncCtx5 >> 2] = 155; //@line 11001
  $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 11002
  HEAP32[$20 >> 2] = $2; //@line 11003
  sp = STACKTOP; //@line 11004
  return;
 } else {
  $17 = HEAP32[$14 + 8 >> 2] | 0; //@line 11008
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 11009
  FUNCTION_TABLE_vi[$17 & 1023]($4); //@line 11010
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 154; //@line 11013
   $18 = $ReallocAsyncCtx3 + 4 | 0; //@line 11014
   HEAP32[$18 >> 2] = $2; //@line 11015
   sp = STACKTOP; //@line 11016
   return;
  }
  ___async_unwind = 0; //@line 11019
  HEAP32[$ReallocAsyncCtx3 >> 2] = 154; //@line 11020
  $18 = $ReallocAsyncCtx3 + 4 | 0; //@line 11021
  HEAP32[$18 >> 2] = $2; //@line 11022
  sp = STACKTOP; //@line 11023
  return;
 }
}
function __ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $11 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $21 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 5867
 STACKTOP = STACKTOP + 16 | 0; //@line 5868
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5868
 $5 = sp; //@line 5869
 $6 = $0 + 2879 | 0; //@line 5870
 if (($2 & 65535) > 255 | (HEAP8[$6 >> 0] | 0) == 0) {
  STACKTOP = sp; //@line 5876
  return;
 }
 HEAP8[$6 >> 0] = 0; //@line 5879
 $11 = $0 + 2880 | 0; //@line 5880
 _memcpy($11 | 0, $1 | 0, $2 & 65535 | 0) | 0; //@line 5881
 $13 = HEAP32[$0 + 3136 >> 2] | 0; //@line 5883
 $14 = $5 + 12 | 0; //@line 5884
 HEAP32[$5 >> 2] = 7; //@line 5885
 HEAP32[$5 + 4 >> 2] = 0; //@line 5887
 HEAP32[$5 + 8 >> 2] = $0; //@line 5889
 HEAP32[$14 >> 2] = 820; //@line 5890
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5891
 $15 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3_($13, $5, $11, $2, $3, $4) | 0; //@line 5892
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 190; //@line 5895
  HEAP32[$AsyncCtx3 + 4 >> 2] = $14; //@line 5897
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 5899
  sp = STACKTOP; //@line 5900
  STACKTOP = sp; //@line 5901
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5903
 $18 = HEAP32[$14 >> 2] | 0; //@line 5904
 do {
  if ($18 | 0) {
   $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 5909
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 5910
   FUNCTION_TABLE_vi[$21 & 1023]($5); //@line 5911
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 191; //@line 5914
    HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 5916
    HEAP32[$AsyncCtx + 8 >> 2] = $15; //@line 5918
    sp = STACKTOP; //@line 5919
    STACKTOP = sp; //@line 5920
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5922
    break;
   }
  }
 } while (0);
 if ($15 | 0) {
  STACKTOP = sp; //@line 5929
  return;
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5931
 _mbed_assert_internal(13097, 12384, 445); //@line 5932
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 192; //@line 5935
  sp = STACKTOP; //@line 5936
  STACKTOP = sp; //@line 5937
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5939
 STACKTOP = sp; //@line 5940
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_134($0) {
 $0 = $0 | 0;
 var $$pr = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 27976
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27978
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27982
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27984
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27986
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 27988
 $$pr = HEAP32[$2 >> 2] | 0; //@line 27989
 if (!$$pr) {
  $17 = $8 + 12 | 0; //@line 27992
  HEAP32[$17 >> 2] = 0; //@line 27993
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 27994
  __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($6, $8); //@line 27995
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 339; //@line 27998
   $18 = $ReallocAsyncCtx9 + 4 | 0; //@line 27999
   HEAP32[$18 >> 2] = $17; //@line 28000
   $19 = $ReallocAsyncCtx9 + 8 | 0; //@line 28001
   HEAP32[$19 >> 2] = $8; //@line 28002
   sp = STACKTOP; //@line 28003
   return;
  }
  ___async_unwind = 0; //@line 28006
  HEAP32[$ReallocAsyncCtx9 >> 2] = 339; //@line 28007
  $18 = $ReallocAsyncCtx9 + 4 | 0; //@line 28008
  HEAP32[$18 >> 2] = $17; //@line 28009
  $19 = $ReallocAsyncCtx9 + 8 | 0; //@line 28010
  HEAP32[$19 >> 2] = $8; //@line 28011
  sp = STACKTOP; //@line 28012
  return;
 } else {
  $13 = HEAP32[$$pr + 4 >> 2] | 0; //@line 28016
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 28017
  FUNCTION_TABLE_vii[$13 & 15]($8, $10); //@line 28018
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 338; //@line 28021
   $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 28022
   HEAP32[$14 >> 2] = $2; //@line 28023
   $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 28024
   HEAP32[$15 >> 2] = $6; //@line 28025
   $16 = $ReallocAsyncCtx7 + 12 | 0; //@line 28026
   HEAP32[$16 >> 2] = $8; //@line 28027
   sp = STACKTOP; //@line 28028
   return;
  }
  ___async_unwind = 0; //@line 28031
  HEAP32[$ReallocAsyncCtx7 >> 2] = 338; //@line 28032
  $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 28033
  HEAP32[$14 >> 2] = $2; //@line 28034
  $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 28035
  HEAP32[$15 >> 2] = $6; //@line 28036
  $16 = $ReallocAsyncCtx7 + 12 | 0; //@line 28037
  HEAP32[$16 >> 2] = $8; //@line 28038
  sp = STACKTOP; //@line 28039
  return;
 }
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_276($0) {
 $0 = $0 | 0;
 var $11 = 0, $2 = 0, $24 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 7531
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7533
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7535
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7537
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7539
 $11 = $2 + 1964 | 0; //@line 7542
 HEAP8[$11 >> 0] = HEAP8[$2 + 1182 >> 0] | 0; //@line 7543
 HEAP32[$2 + 1968 >> 2] = HEAP32[$2 + 1912 >> 2]; //@line 7547
 HEAP8[$2 + 1980 >> 0] = HEAP8[$2 + 1921 >> 0] | 0; //@line 7551
 HEAP8[$2 + 1981 >> 0] = HEAP8[$2 + 1173 >> 0] | 0; //@line 7555
 HEAP32[$2 + 1984 >> 2] = 1; //@line 7557
 $24 = $2 + 1982 | 0; //@line 7560
 HEAP8[$24 >> 0] = (HEAP32[$6 >> 2] | 0) == 2 & 1; //@line 7562
 HEAP8[$2 + 2010 >> 0] = HEAP8[$2 + 1965 >> 0] | 0; //@line 7566
 $29 = $2 + 4 | 0; //@line 7567
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 7568
 $30 = __ZN7LoRaPHY9rx_configEP18rx_config_params_t($29, $11) | 0; //@line 7569
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 358; //@line 7572
  $31 = $ReallocAsyncCtx6 + 4 | 0; //@line 7573
  HEAP32[$31 >> 2] = $24; //@line 7574
  $32 = $ReallocAsyncCtx6 + 8 | 0; //@line 7575
  HEAP32[$32 >> 2] = $2; //@line 7576
  $33 = $ReallocAsyncCtx6 + 12 | 0; //@line 7577
  HEAP32[$33 >> 2] = $4; //@line 7578
  $34 = $ReallocAsyncCtx6 + 16 | 0; //@line 7579
  HEAP32[$34 >> 2] = $6; //@line 7580
  $35 = $ReallocAsyncCtx6 + 20 | 0; //@line 7581
  HEAP32[$35 >> 2] = $8; //@line 7582
  $36 = $ReallocAsyncCtx6 + 24 | 0; //@line 7583
  HEAP32[$36 >> 2] = $29; //@line 7584
  sp = STACKTOP; //@line 7585
  return;
 }
 HEAP8[___async_retval >> 0] = $30 & 1; //@line 7590
 ___async_unwind = 0; //@line 7591
 HEAP32[$ReallocAsyncCtx6 >> 2] = 358; //@line 7592
 $31 = $ReallocAsyncCtx6 + 4 | 0; //@line 7593
 HEAP32[$31 >> 2] = $24; //@line 7594
 $32 = $ReallocAsyncCtx6 + 8 | 0; //@line 7595
 HEAP32[$32 >> 2] = $2; //@line 7596
 $33 = $ReallocAsyncCtx6 + 12 | 0; //@line 7597
 HEAP32[$33 >> 2] = $4; //@line 7598
 $34 = $ReallocAsyncCtx6 + 16 | 0; //@line 7599
 HEAP32[$34 >> 2] = $6; //@line 7600
 $35 = $ReallocAsyncCtx6 + 20 | 0; //@line 7601
 HEAP32[$35 >> 2] = $8; //@line 7602
 $36 = $ReallocAsyncCtx6 + 24 | 0; //@line 7603
 HEAP32[$36 >> 2] = $29; //@line 7604
 sp = STACKTOP; //@line 7605
 return;
}
function _vsnprintf($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $26 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 15562
 STACKTOP = STACKTOP + 128 | 0; //@line 15563
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 15563
 $4 = sp + 124 | 0; //@line 15564
 $5 = sp; //@line 15565
 dest = $5; //@line 15566
 src = 10748; //@line 15566
 stop = dest + 124 | 0; //@line 15566
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 15566
  dest = dest + 4 | 0; //@line 15566
  src = src + 4 | 0; //@line 15566
 } while ((dest | 0) < (stop | 0));
 if (($1 + -1 | 0) >>> 0 > 2147483646) {
  if (!$1) {
   $$014 = $4; //@line 15572
   $$015 = 1; //@line 15572
   label = 4; //@line 15573
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 15576
   $$0 = -1; //@line 15577
  }
 } else {
  $$014 = $0; //@line 15580
  $$015 = $1; //@line 15580
  label = 4; //@line 15581
 }
 if ((label | 0) == 4) {
  $11 = -2 - $$014 | 0; //@line 15585
  $$$015 = $$015 >>> 0 > $11 >>> 0 ? $11 : $$015; //@line 15587
  HEAP32[$5 + 48 >> 2] = $$$015; //@line 15589
  $14 = $5 + 20 | 0; //@line 15590
  HEAP32[$14 >> 2] = $$014; //@line 15591
  HEAP32[$5 + 44 >> 2] = $$014; //@line 15593
  $16 = $$014 + $$$015 | 0; //@line 15594
  $17 = $5 + 16 | 0; //@line 15595
  HEAP32[$17 >> 2] = $16; //@line 15596
  HEAP32[$5 + 28 >> 2] = $16; //@line 15598
  $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 15599
  $19 = _vfprintf($5, $2, $3) | 0; //@line 15600
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 644; //@line 15603
   HEAP32[$AsyncCtx + 4 >> 2] = $$$015; //@line 15605
   HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 15607
   HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 15609
   HEAP32[$AsyncCtx + 16 >> 2] = $14; //@line 15611
   HEAP32[$AsyncCtx + 20 >> 2] = $17; //@line 15613
   sp = STACKTOP; //@line 15614
   STACKTOP = sp; //@line 15615
   return 0; //@line 15615
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15617
  if (!$$$015) {
   $$0 = $19; //@line 15620
  } else {
   $26 = HEAP32[$14 >> 2] | 0; //@line 15622
   HEAP8[$26 + ((($26 | 0) == (HEAP32[$17 >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 15627
   $$0 = $19; //@line 15628
  }
 }
 STACKTOP = sp; //@line 15631
 return $$0 | 0; //@line 15631
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $19 = 0, $28 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17384
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 17390
  } else {
   $9 = HEAP32[$0 + 12 >> 2] | 0; //@line 17394
   $10 = $0 + 16 + ($9 << 3) | 0; //@line 17395
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 17396
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0 + 16 | 0, $1, $2, $3); //@line 17397
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 669; //@line 17400
    HEAP32[$AsyncCtx3 + 4 >> 2] = $9; //@line 17402
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 17404
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 17406
    HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 17408
    HEAP32[$AsyncCtx3 + 20 >> 2] = $3; //@line 17410
    HEAP32[$AsyncCtx3 + 24 >> 2] = $10; //@line 17412
    sp = STACKTOP; //@line 17413
    return;
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17416
   if (($9 | 0) > 1) {
    $19 = $1 + 54 | 0; //@line 17420
    $$0 = $0 + 24 | 0; //@line 17421
    while (1) {
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 17423
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0, $1, $2, $3); //@line 17424
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 17429
     if (HEAP8[$19 >> 0] | 0) {
      break L1;
     }
     $28 = $$0 + 8 | 0; //@line 17435
     if ($28 >>> 0 < $10 >>> 0) {
      $$0 = $28; //@line 17438
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 670; //@line 17443
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 17445
    HEAP32[$AsyncCtx + 8 >> 2] = $$0; //@line 17447
    HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 17449
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 17451
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 17453
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 17455
    sp = STACKTOP; //@line 17456
    return;
   }
  }
 } while (0);
 return;
}
function __ZN7LoRaMac12prepare_joinEPK15lorawan_connectb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $13 = 0, $21 = 0, $22 = 0, $25 = 0, $4 = 0, $5 = 0, $7 = 0, dest = 0, src = 0, stop = 0;
 if (!$1) {
  HEAP32[$0 + 1752 >> 2] = 0; //@line 15195
  HEAP32[$0 + 1756 >> 2] = 0; //@line 15197
  dest = $0 + 1716 | 0; //@line 15199
  stop = dest + 32 | 0; //@line 15199
  do {
   HEAP8[dest >> 0] = 0; //@line 15199
   dest = dest + 1 | 0; //@line 15199
  } while ((dest | 0) < (stop | 0));
  $$0 = 0; //@line 15200
  return $$0 | 0; //@line 15201
 }
 $4 = $1 + 4 | 0; //@line 15203
 if (!$2) {
  HEAP32[$0 + 1752 >> 2] = HEAP32[$4 >> 2]; //@line 15207
  HEAP32[$0 + 1756 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 15211
  dest = $0 + 1716 | 0; //@line 15215
  src = HEAP32[$1 + 12 >> 2] | 0; //@line 15215
  stop = dest + 16 | 0; //@line 15215
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 15215
   dest = dest + 1 | 0; //@line 15215
   src = src + 1 | 0; //@line 15215
  } while ((dest | 0) < (stop | 0));
  dest = $0 + 1732 | 0; //@line 15219
  src = HEAP32[$1 + 16 >> 2] | 0; //@line 15219
  stop = dest + 16 | 0; //@line 15219
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 15219
   dest = dest + 1 | 0; //@line 15219
   src = src + 1 | 0; //@line 15219
  } while ((dest | 0) < (stop | 0));
  $$0 = 0; //@line 15220
  return $$0 | 0; //@line 15221
 }
 $5 = HEAP32[$4 >> 2] | 0; //@line 15223
 if (!$5) {
  $$0 = -1003; //@line 15226
  return $$0 | 0; //@line 15227
 }
 $7 = $1 + 8 | 0; //@line 15229
 if (!(HEAP32[$7 >> 2] | 0)) {
  $$0 = -1003; //@line 15233
  return $$0 | 0; //@line 15234
 }
 $10 = $1 + 12 | 0; //@line 15236
 if (!(HEAP32[$10 >> 2] | 0)) {
  $$0 = -1003; //@line 15240
  return $$0 | 0; //@line 15241
 }
 $13 = $1 + 16 | 0; //@line 15243
 if (!(HEAP8[$13 >> 0] | 0)) {
  $$0 = -1003; //@line 15247
  return $$0 | 0; //@line 15248
 }
 HEAP32[$0 + 1704 >> 2] = $5; //@line 15251
 HEAP32[$0 + 1708 >> 2] = HEAP32[$7 >> 2]; //@line 15254
 HEAP32[$0 + 1712 >> 2] = HEAP32[$10 >> 2]; //@line 15257
 $21 = HEAP8[$13 >> 0] | 0; //@line 15258
 $22 = $0 + 1700 | 0; //@line 15259
 HEAP8[$22 >> 0] = $21; //@line 15260
 $25 = __ZN7LoRaPHY21verify_nb_join_trialsEh($0 + 4 | 0, HEAP8[$13 >> 0] | 0) | 0; //@line 15263
 HEAP8[$22 >> 0] = $25 ? $21 : 12; //@line 15265
 HEAP8[$0 + 1701 >> 0] = 0; //@line 15267
 $$0 = 0; //@line 15268
 return $$0 | 0; //@line 15269
}
function __ZN7LoRaMacD2Ev__async_cb_379($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 29991
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29993
 $4 = HEAP32[$2 + 1828 >> 2] | 0; //@line 29995
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 30000
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 30001
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 1816 | 0); //@line 30002
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 353; //@line 30005
   $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 30006
   HEAP32[$9 >> 2] = $2; //@line 30007
   sp = STACKTOP; //@line 30008
   return;
  }
  ___async_unwind = 0; //@line 30011
  HEAP32[$ReallocAsyncCtx3 >> 2] = 353; //@line 30012
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 30013
  HEAP32[$9 >> 2] = $2; //@line 30014
  sp = STACKTOP; //@line 30015
  return;
 }
 $11 = HEAP32[$2 + 1808 >> 2] | 0; //@line 30019
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 30024
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 30025
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 1796 | 0); //@line 30026
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 354; //@line 30029
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 30030
   HEAP32[$16 >> 2] = $2; //@line 30031
   sp = STACKTOP; //@line 30032
   return;
  }
  ___async_unwind = 0; //@line 30035
  HEAP32[$ReallocAsyncCtx4 >> 2] = 354; //@line 30036
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 30037
  HEAP32[$16 >> 2] = $2; //@line 30038
  sp = STACKTOP; //@line 30039
  return;
 }
 $18 = HEAP32[$2 + 748 >> 2] | 0; //@line 30043
 if (!$18) {
  __ZN12LoRaPHYEU868D2Ev($2 + 4 | 0); //@line 30047
  return;
 }
 $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 30052
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 30053
 FUNCTION_TABLE_vi[$22 & 1023]($2 + 736 | 0); //@line 30054
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 355; //@line 30057
  $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 30058
  HEAP32[$23 >> 2] = $2; //@line 30059
  sp = STACKTOP; //@line 30060
  return;
 }
 ___async_unwind = 0; //@line 30063
 HEAP32[$ReallocAsyncCtx5 >> 2] = 355; //@line 30064
 $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 30065
 HEAP32[$23 >> 2] = $2; //@line 30066
 sp = STACKTOP; //@line 30067
 return;
}
function _equeue_alloc__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$038$sink$i = 0, $$03842$i = 0, $$1$i9 = 0, $12 = 0, $15 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $34 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4694
 $6 = (HEAP32[$0 + 4 >> 2] | 0) + 39 & -4; //@line 4696
 $7 = $4 + 156 | 0; //@line 4697
 _equeue_mutex_lock($7); //@line 4698
 $8 = $4 + 24 | 0; //@line 4699
 $9 = HEAP32[$8 >> 2] | 0; //@line 4700
 L3 : do {
  if (!$9) {
   label = 9; //@line 4704
  } else {
   $$03842$i = $8; //@line 4706
   $12 = $9; //@line 4706
   while (1) {
    if ((HEAP32[$12 >> 2] | 0) >>> 0 >= $6 >>> 0) {
     break;
    }
    $18 = $12 + 8 | 0; //@line 4713
    $19 = HEAP32[$18 >> 2] | 0; //@line 4714
    if (!$19) {
     label = 9; //@line 4717
     break L3;
    } else {
     $$03842$i = $18; //@line 4720
     $12 = $19; //@line 4720
    }
   }
   $15 = HEAP32[$12 + 12 >> 2] | 0; //@line 4724
   if (!$15) {
    $$038$sink$i = $$03842$i; //@line 4727
   } else {
    HEAP32[$$03842$i >> 2] = $15; //@line 4729
    $$038$sink$i = $15 + 8 | 0; //@line 4731
   }
   HEAP32[$$038$sink$i >> 2] = HEAP32[$12 + 8 >> 2]; //@line 4735
   _equeue_mutex_unlock($7); //@line 4736
   $$1$i9 = $12; //@line 4737
  }
 } while (0);
 do {
  if ((label | 0) == 9) {
   $21 = $4 + 28 | 0; //@line 4742
   $22 = HEAP32[$21 >> 2] | 0; //@line 4743
   if ($22 >>> 0 < $6 >>> 0) {
    _equeue_mutex_unlock($7); //@line 4746
    $$0 = 0; //@line 4747
    $34 = ___async_retval; //@line 4748
    HEAP32[$34 >> 2] = $$0; //@line 4749
    return;
   } else {
    $24 = $4 + 32 | 0; //@line 4752
    $25 = HEAP32[$24 >> 2] | 0; //@line 4753
    HEAP32[$24 >> 2] = $25 + $6; //@line 4755
    HEAP32[$21 >> 2] = $22 - $6; //@line 4757
    HEAP32[$25 >> 2] = $6; //@line 4758
    HEAP8[$25 + 4 >> 0] = 1; //@line 4760
    _equeue_mutex_unlock($7); //@line 4761
    if (!$25) {
     $$0 = 0; //@line 4764
    } else {
     $$1$i9 = $25; //@line 4766
     break;
    }
    $34 = ___async_retval; //@line 4769
    HEAP32[$34 >> 2] = $$0; //@line 4770
    return;
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 4776
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 4778
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 4780
 $$0 = $$1$i9 + 36 | 0; //@line 4782
 $34 = ___async_retval; //@line 4783
 HEAP32[$34 >> 2] = $$0; //@line 4784
 return;
}
function _mbedtls_cipher_cmac_update__async_cb_312($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $4 = 0, $42 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 11359
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11361
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11363
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11365
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11367
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11369
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11371
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11373
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11375
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11377
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 11379
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11381
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 11384
  $42 = ___async_retval; //@line 11385
  HEAP32[$42 >> 2] = $$0; //@line 11386
  return;
 }
 $24 = $2 + 1 | 0; //@line 11389
 if ($24 >>> 0 < $4 >>> 0) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 11392
  $22 = _mbedtls_cipher_update($8, $10, 0, $10, $12) | 0; //@line 11393
  if (!___async) {
   HEAP32[___async_retval >> 2] = $22; //@line 11397
   ___async_unwind = 0; //@line 11398
  }
  HEAP32[$ReallocAsyncCtx2 >> 2] = 571; //@line 11400
  HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $24; //@line 11402
  HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 11404
  HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 11406
  HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 11408
  HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 11410
  HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 11412
  HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 11414
  HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 11416
  HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 11418
  HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 11420
  sp = STACKTOP; //@line 11421
  return;
 }
 if (!$14) {
  $$0 = 0; //@line 11426
  $42 = ___async_retval; //@line 11427
  HEAP32[$42 >> 2] = $$0; //@line 11428
  return;
 }
 _memcpy((HEAP32[$18 >> 2] | 0) + ($20 + 16) | 0, $16 | 0, $14 | 0) | 0; //@line 11433
 HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + $14; //@line 11436
 $$0 = 0; //@line 11437
 $42 = ___async_retval; //@line 11438
 HEAP32[$42 >> 2] = $$0; //@line 11439
 return;
}
function __ZN12LoRaWANStack20process_transmissionEv($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $20 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 9328
 STACKTOP = STACKTOP + 16 | 0; //@line 9329
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9329
 $vararg_buffer = sp; //@line 9330
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 9331
 __ZN7LoRaMac16on_radio_tx_doneEv($0); //@line 9332
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 320; //@line 9335
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 9337
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 9339
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 9341
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 9343
  sp = STACKTOP; //@line 9344
  STACKTOP = sp; //@line 9345
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9347
 _mbed_tracef(16, 12482, 12786, $vararg_buffer); //@line 9348
 $5 = $0 + 2480 | 0; //@line 9349
 switch (HEAP32[$5 >> 2] | 0) {
 case 1:
  {
   HEAP32[$5 >> 2] = 4; //@line 9353
   STACKTOP = sp; //@line 9354
   return;
  }
 case 8:
  {
   $9 = (HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) >> 2] | 0) == 1; //@line 9360
   $10 = $0 + 2872 | 0; //@line 9361
   $12 = HEAP32[$10 >> 2] & -18; //@line 9363
   if ($9) {
    HEAP32[$10 >> 2] = $12 | 1; //@line 9366
    HEAP32[$5 >> 2] = 9; //@line 9367
    STACKTOP = sp; //@line 9368
    return;
   }
   HEAP32[$10 >> 2] = $12 | 16; //@line 9371
   if ((__ZNK7LoRaMac16get_device_classEv($0) | 0) != 2) {
    STACKTOP = sp; //@line 9375
    return;
   }
   __ZN7LoRaMac21post_process_mcps_reqEv($0); //@line 9377
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9378
   __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 9379
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 321; //@line 9382
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 9384
    HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 9386
    sp = STACKTOP; //@line 9387
    STACKTOP = sp; //@line 9388
    return;
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 9390
   $20 = (__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2; //@line 9392
   HEAP32[$5 >> 2] = $20 ? 5 : 2; //@line 9394
   STACKTOP = sp; //@line 9395
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 9399
   return;
  }
 }
}
function __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $2 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, $AsyncCtx8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 9451
 STACKTOP = STACKTOP + 16 | 0; //@line 9452
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9452
 $vararg_buffer1 = sp + 8 | 0; //@line 9453
 $vararg_buffer = sp; //@line 9454
 $2 = $0 + 2480 | 0; //@line 9455
 switch (HEAP32[$2 >> 2] | 0) {
 case 11:
 case 2:
  {
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = -1e3; //@line 9462
   STACKTOP = sp; //@line 9463
   return;
  }
 }
 $5 = HEAP32[$0 + 2872 >> 2] | 0; //@line 9467
 if ($5 & 4 | 0) {
  _mbed_tracef(16, 12482, 12855, $vararg_buffer); //@line 9471
  HEAP32[$1 >> 2] = 0; //@line 9472
  STACKTOP = sp; //@line 9473
  return;
 }
 HEAP32[$2 >> 2] = 3; //@line 9475
 if ($5 & 8 | 0) {
  $AsyncCtx8 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9479
  __ZN12LoRaWANStack21process_joining_stateER14lorawan_status($0, $1); //@line 9480
  if (___async) {
   HEAP32[$AsyncCtx8 >> 2] = 323; //@line 9483
   sp = STACKTOP; //@line 9484
   STACKTOP = sp; //@line 9485
   return;
  }
  _emscripten_free_async_context($AsyncCtx8 | 0); //@line 9487
  STACKTOP = sp; //@line 9488
  return;
 }
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 9490
 $10 = __ZN7LoRaMac4joinEb($0, 0) | 0; //@line 9491
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 324; //@line 9494
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 9496
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer1; //@line 9498
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 9500
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 9502
  sp = STACKTOP; //@line 9503
  STACKTOP = sp; //@line 9504
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9506
 HEAP32[$1 >> 2] = $10; //@line 9507
 _mbed_tracef(16, 12482, 12873, $vararg_buffer1); //@line 9508
 $AsyncCtx4 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9509
 __ZN12LoRaWANStack23process_connected_stateEv($0); //@line 9510
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 325; //@line 9513
  sp = STACKTOP; //@line 9514
  STACKTOP = sp; //@line 9515
  return;
 }
 _emscripten_free_async_context($AsyncCtx4 | 0); //@line 9517
 STACKTOP = sp; //@line 9518
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_304($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 10714
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10718
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10720
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10722
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10724
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 10725
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 10729
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 10730
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 10731
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 288; //@line 10734
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 10735
   HEAP32[$14 >> 2] = $4; //@line 10736
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 10737
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 10738
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 10739
   HEAP32[$16 >> 2] = $8; //@line 10740
   sp = STACKTOP; //@line 10741
   return;
  }
  ___async_unwind = 0; //@line 10744
  HEAP32[$ReallocAsyncCtx4 >> 2] = 288; //@line 10745
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 10746
  HEAP32[$14 >> 2] = $4; //@line 10747
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 10748
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 10749
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 10750
  HEAP32[$16 >> 2] = $8; //@line 10751
  sp = STACKTOP; //@line 10752
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 10755
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 10759
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 10763
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 10764
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 10765
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 289; //@line 10768
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 10769
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 10770
  sp = STACKTOP; //@line 10771
  return;
 }
 ___async_unwind = 0; //@line 10774
 HEAP32[$ReallocAsyncCtx5 >> 2] = 289; //@line 10775
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 10776
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 10777
 sp = STACKTOP; //@line 10778
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_156($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 29168
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29172
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29174
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29176
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29178
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 29179
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 29183
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 29184
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 29185
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 258; //@line 29188
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 29189
   HEAP32[$14 >> 2] = $4; //@line 29190
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 29191
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 29192
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 29193
   HEAP32[$16 >> 2] = $8; //@line 29194
   sp = STACKTOP; //@line 29195
   return;
  }
  ___async_unwind = 0; //@line 29198
  HEAP32[$ReallocAsyncCtx4 >> 2] = 258; //@line 29199
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 29200
  HEAP32[$14 >> 2] = $4; //@line 29201
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 29202
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 29203
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 29204
  HEAP32[$16 >> 2] = $8; //@line 29205
  sp = STACKTOP; //@line 29206
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 29209
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 29213
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 29217
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 29218
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 29219
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 259; //@line 29222
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 29223
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 29224
  sp = STACKTOP; //@line 29225
  return;
 }
 ___async_unwind = 0; //@line 29228
 HEAP32[$ReallocAsyncCtx5 >> 2] = 259; //@line 29229
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 29230
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 29231
 sp = STACKTOP; //@line 29232
 return;
}
function ___mo_lookup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$090 = 0, $$094 = 0, $$4 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $4 = 0, $44 = 0, $46 = 0, $49 = 0, $53 = 0, $63 = 0, $7 = 0;
 $4 = (HEAP32[$0 >> 2] | 0) + 1794895138 | 0; //@line 11551
 $7 = _swapc(HEAP32[$0 + 8 >> 2] | 0, $4) | 0; //@line 11554
 $10 = _swapc(HEAP32[$0 + 12 >> 2] | 0, $4) | 0; //@line 11557
 $13 = _swapc(HEAP32[$0 + 16 >> 2] | 0, $4) | 0; //@line 11560
 L1 : do {
  if ($7 >>> 0 < $1 >>> 2 >>> 0) {
   $17 = $1 - ($7 << 2) | 0; //@line 11566
   if ($10 >>> 0 < $17 >>> 0 & $13 >>> 0 < $17 >>> 0) {
    if (!(($13 | $10) & 3)) {
     $23 = $10 >>> 2; //@line 11575
     $24 = $13 >>> 2; //@line 11576
     $$090 = 0; //@line 11577
     $$094 = $7; //@line 11577
     while (1) {
      $25 = $$094 >>> 1; //@line 11579
      $26 = $$090 + $25 | 0; //@line 11580
      $27 = $26 << 1; //@line 11581
      $28 = $27 + $23 | 0; //@line 11582
      $31 = _swapc(HEAP32[$0 + ($28 << 2) >> 2] | 0, $4) | 0; //@line 11585
      $35 = _swapc(HEAP32[$0 + ($28 + 1 << 2) >> 2] | 0, $4) | 0; //@line 11589
      if (!($35 >>> 0 < $1 >>> 0 & $31 >>> 0 < ($1 - $35 | 0) >>> 0)) {
       $$4 = 0; //@line 11595
       break L1;
      }
      if (HEAP8[$0 + ($35 + $31) >> 0] | 0) {
       $$4 = 0; //@line 11603
       break L1;
      }
      $44 = _strcmp($2, $0 + $35 | 0) | 0; //@line 11607
      if (!$44) {
       break;
      }
      $63 = ($44 | 0) < 0; //@line 11613
      if (($$094 | 0) == 1) {
       $$4 = 0; //@line 11618
       break L1;
      } else {
       $$090 = $63 ? $$090 : $26; //@line 11621
       $$094 = $63 ? $25 : $$094 - $25 | 0; //@line 11621
      }
     }
     $46 = $27 + $24 | 0; //@line 11624
     $49 = _swapc(HEAP32[$0 + ($46 << 2) >> 2] | 0, $4) | 0; //@line 11627
     $53 = _swapc(HEAP32[$0 + ($46 + 1 << 2) >> 2] | 0, $4) | 0; //@line 11631
     if ($53 >>> 0 < $1 >>> 0 & $49 >>> 0 < ($1 - $53 | 0) >>> 0) {
      $$4 = (HEAP8[$0 + ($53 + $49) >> 0] | 0) == 0 ? $0 + $53 | 0 : 0; //@line 11643
     } else {
      $$4 = 0; //@line 11645
     }
    } else {
     $$4 = 0; //@line 11648
    }
   } else {
    $$4 = 0; //@line 11651
   }
  } else {
   $$4 = 0; //@line 11654
  }
 } while (0);
 return $$4 | 0; //@line 11657
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_90($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 23422
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23426
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23428
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23430
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23431
 if ($8 | 0) {
  $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 23435
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 23436
  FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 23437
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 222; //@line 23440
   $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 23441
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 23442
   $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 23443
   HEAP32[$13 >> 2] = $4; //@line 23444
   $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 23445
   HEAP32[$14 >> 2] = $6; //@line 23446
   sp = STACKTOP; //@line 23447
   return;
  }
  ___async_unwind = 0; //@line 23450
  HEAP32[$ReallocAsyncCtx2 >> 2] = 222; //@line 23451
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 23452
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 23453
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 23454
  HEAP32[$13 >> 2] = $4; //@line 23455
  $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 23456
  HEAP32[$14 >> 2] = $6; //@line 23457
  sp = STACKTOP; //@line 23458
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[$6 >> 2] = 2; //@line 23463
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 23466
 _mbed_assert_internal(13097, 12384, 646); //@line 23467
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 223; //@line 23470
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 23471
  HEAP32[$16 >> 2] = $4; //@line 23472
  $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 23473
  HEAP32[$17 >> 2] = $6; //@line 23474
  sp = STACKTOP; //@line 23475
  return;
 }
 ___async_unwind = 0; //@line 23478
 HEAP32[$ReallocAsyncCtx6 >> 2] = 223; //@line 23479
 $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 23480
 HEAP32[$16 >> 2] = $4; //@line 23481
 $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 23482
 HEAP32[$17 >> 2] = $6; //@line 23483
 sp = STACKTOP; //@line 23484
 return;
}
function __ZN12LoRaWANStack7connectERK15lorawan_connect($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $12 = 0, $18 = 0, $19 = 0, $2 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 10076
 STACKTOP = STACKTOP + 48 | 0; //@line 10077
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 10077
 $vararg_buffer5 = sp + 24 | 0; //@line 10078
 $2 = sp + 32 | 0; //@line 10082
 if (!(HEAP32[$0 + 2480 >> 2] | 0)) {
  _mbed_tracef(2, 12482, 12832, sp); //@line 10087
  $$1 = -1012; //@line 10088
  STACKTOP = sp; //@line 10089
  return $$1 | 0; //@line 10089
 }
 $6 = HEAP8[$1 >> 0] | 0; //@line 10091
 if (($6 & 255) >= 2) {
  $$1 = -1003; //@line 10094
  STACKTOP = sp; //@line 10095
  return $$1 | 0; //@line 10095
 }
 $7 = $6 << 24 >> 24 == 0; //@line 10097
 $8 = __ZN7LoRaMac12prepare_joinEPK15lorawan_connectb($0, $1, $7) | 0; //@line 10098
 if ($8 | 0) {
  $$1 = $8; //@line 10101
  STACKTOP = sp; //@line 10102
  return $$1 | 0; //@line 10102
 }
 if ($7) {
  _mbed_tracef(16, 12482, 12946, sp + 8 | 0); //@line 10105
  HEAP32[$0 + 2540 >> 2] = 0; //@line 10107
  HEAP32[$0 + 2536 >> 2] = 0; //@line 10109
  $12 = $0 + 2872 | 0; //@line 10110
  HEAP32[$12 >> 2] = HEAP32[$12 >> 2] | 8; //@line 10113
 } else {
  _mbed_tracef(16, 12482, 12892, sp + 16 | 0); //@line 10115
  $18 = HEAP32[$0 + 2540 >> 2] | 0; //@line 10119
  HEAP32[$vararg_buffer5 >> 2] = HEAP32[$0 + 2536 >> 2]; //@line 10120
  HEAP32[$vararg_buffer5 + 4 >> 2] = $18; //@line 10122
  _mbed_tracef(16, 12482, 12907, $vararg_buffer5); //@line 10123
  $19 = $0 + 2872 | 0; //@line 10124
  HEAP32[$19 >> 2] = HEAP32[$19 >> 2] & -9; //@line 10127
 }
 HEAP32[$2 >> 2] = 0; //@line 10129
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 10130
 __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status($0, $2); //@line 10131
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 342; //@line 10134
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 10136
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 10138
  sp = STACKTOP; //@line 10139
  STACKTOP = sp; //@line 10140
  return 0; //@line 10140
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10142
 $$1 = HEAP32[$2 >> 2] | 0; //@line 10144
 STACKTOP = sp; //@line 10145
 return $$1 | 0; //@line 10145
}
function __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 20112
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20116
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20118
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20120
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20122
 $12 = (HEAP8[$0 + 4 >> 0] | 0) + 1 << 24 >> 24; //@line 20124
 if ($AsyncRetVal | 0) {
  $30 = $AsyncRetVal; //@line 20126
  $29 = ___async_retval; //@line 20127
  HEAP32[$29 >> 2] = $30; //@line 20128
  return;
 }
 if (($12 & 255) >= (HEAPU8[$4 >> 0] | 0)) {
  $30 = 0; //@line 20134
  $29 = ___async_retval; //@line 20135
  HEAP32[$29 >> 2] = $30; //@line 20136
  return;
 }
 $13 = $12 & 255; //@line 20139
 $14 = HEAP32[$6 >> 2] | 0; //@line 20140
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 60 >> 2] | 0; //@line 20143
 $18 = HEAP32[$8 >> 2] | 0; //@line 20144
 $21 = HEAP8[$18 + ($13 << 4) >> 0] | 0; //@line 20147
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 20148
 $22 = FUNCTION_TABLE_iiii[$17 & 31]($14, $18 + ($13 << 4) + 4 | 0, $21) | 0; //@line 20149
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 470; //@line 20152
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 20153
  HEAP8[$23 >> 0] = $12; //@line 20154
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 20155
  HEAP32[$24 >> 2] = $4; //@line 20156
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 20157
  HEAP32[$25 >> 2] = $6; //@line 20158
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 20159
  HEAP32[$26 >> 2] = $8; //@line 20160
  sp = STACKTOP; //@line 20161
  return;
 }
 HEAP32[___async_retval >> 2] = $22; //@line 20165
 ___async_unwind = 0; //@line 20166
 HEAP32[$ReallocAsyncCtx >> 2] = 470; //@line 20167
 $23 = $ReallocAsyncCtx + 4 | 0; //@line 20168
 HEAP8[$23 >> 0] = $12; //@line 20169
 $24 = $ReallocAsyncCtx + 8 | 0; //@line 20170
 HEAP32[$24 >> 2] = $4; //@line 20171
 $25 = $ReallocAsyncCtx + 12 | 0; //@line 20172
 HEAP32[$25 >> 2] = $6; //@line 20173
 $26 = $ReallocAsyncCtx + 16 | 0; //@line 20174
 HEAP32[$26 >> 2] = $8; //@line 20175
 sp = STACKTOP; //@line 20176
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 25634
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25636
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25638
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25640
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25642
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25644
 $11 = HEAP32[$2 >> 2] | 0; //@line 25645
 if ($11 | 0) {
  $14 = HEAP32[$11 + 4 >> 2] | 0; //@line 25649
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 25650
  FUNCTION_TABLE_vii[$14 & 15]($6, $8); //@line 25651
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 50; //@line 25654
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 25655
   HEAP32[$15 >> 2] = $2; //@line 25656
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 25657
   HEAP32[$16 >> 2] = $4; //@line 25658
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 25659
   HEAP32[$17 >> 2] = $10; //@line 25660
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 25661
   HEAP32[$18 >> 2] = $8; //@line 25662
   sp = STACKTOP; //@line 25663
   return;
  }
  ___async_unwind = 0; //@line 25666
  HEAP32[$ReallocAsyncCtx2 >> 2] = 50; //@line 25667
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 25668
  HEAP32[$15 >> 2] = $2; //@line 25669
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 25670
  HEAP32[$16 >> 2] = $4; //@line 25671
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 25672
  HEAP32[$17 >> 2] = $10; //@line 25673
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 25674
  HEAP32[$18 >> 2] = $8; //@line 25675
  sp = STACKTOP; //@line 25676
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 25679
 __ZN4mbed6Ticker5setupEy($10, 2e5, 0); //@line 25680
 $19 = HEAP32[$2 >> 2] | 0; //@line 25681
 if (!$19) {
  return;
 }
 $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 25687
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 25688
 FUNCTION_TABLE_vi[$22 & 1023]($8); //@line 25689
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 51; //@line 25692
  sp = STACKTOP; //@line 25693
  return;
 }
 ___async_unwind = 0; //@line 25696
 HEAP32[$ReallocAsyncCtx3 >> 2] = 51; //@line 25697
 sp = STACKTOP; //@line 25698
 return;
}
function _fputc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15694
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 15699
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 15704
  } else {
   $20 = $0 & 255; //@line 15706
   $21 = $0 & 255; //@line 15707
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 15713
   } else {
    $26 = $1 + 20 | 0; //@line 15715
    $27 = HEAP32[$26 >> 2] | 0; //@line 15716
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 15722
     HEAP8[$27 >> 0] = $20; //@line 15723
     $34 = $21; //@line 15724
    } else {
     label = 12; //@line 15726
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 15731
     $32 = ___overflow($1, $0) | 0; //@line 15732
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 646; //@line 15735
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 15737
      sp = STACKTOP; //@line 15738
      return 0; //@line 15739
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 15741
      $34 = $32; //@line 15742
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 15747
   $$0 = $34; //@line 15748
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 15753
   $8 = $0 & 255; //@line 15754
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 15760
    $14 = HEAP32[$13 >> 2] | 0; //@line 15761
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 15767
     HEAP8[$14 >> 0] = $7; //@line 15768
     $$0 = $8; //@line 15769
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 15773
   $19 = ___overflow($1, $0) | 0; //@line 15774
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 645; //@line 15777
    sp = STACKTOP; //@line 15778
    return 0; //@line 15779
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15781
    $$0 = $19; //@line 15782
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 15787
}
function __ZN18LoRaMacChannelPlan8get_planER16lora_channelplanPK16channel_params_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$037$lcssa = 0, $$03739 = 0, $$038 = 0, $$1 = 0, $10 = 0, $13 = 0, $14 = 0, $20 = 0, $26 = 0, $33 = 0, $39 = 0, $6 = 0, $8 = 0, $indvars$iv = 0, $wide$trip$count = 0;
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $$038 = -1002; //@line 16102
  return $$038 | 0; //@line 16103
 }
 $6 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 16106
 $8 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 0) | 0; //@line 16108
 if (!($6 << 24 >> 24)) {
  $$037$lcssa = 0; //@line 16111
 } else {
  $10 = $1 + 4 | 0; //@line 16113
  $wide$trip$count = $6 & 255; //@line 16114
  $$03739 = 0; //@line 16115
  $indvars$iv = 0; //@line 16115
  while (1) {
   if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $8, $indvars$iv) | 0) {
    $13 = HEAP32[$10 >> 2] | 0; //@line 16120
    $14 = $$03739 & 255; //@line 16121
    HEAP8[$13 + ($14 << 4) >> 0] = $indvars$iv; //@line 16124
    HEAP32[$13 + ($14 << 4) + 4 >> 2] = HEAP32[$2 + ($indvars$iv * 12 | 0) >> 2]; //@line 16128
    $20 = $2 + ($indvars$iv * 12 | 0) + 8 | 0; //@line 16129
    HEAP8[$13 + ($14 << 4) + 12 >> 0] = HEAP8[$20 >> 0] | 0; //@line 16132
    $26 = (HEAP32[$10 >> 2] | 0) + ($14 << 4) + 12 | 0; //@line 16136
    HEAP8[$26 >> 0] = HEAP8[$26 >> 0] & -16 | HEAP8[$20 >> 0] & 15; //@line 16140
    $33 = (HEAP32[$10 >> 2] | 0) + ($14 << 4) + 12 | 0; //@line 16144
    HEAP8[$33 >> 0] = HEAP8[$33 >> 0] & 15 | HEAP8[$20 >> 0] & -16; //@line 16148
    $39 = HEAP32[$10 >> 2] | 0; //@line 16151
    HEAP8[$39 + ($14 << 4) + 13 >> 0] = HEAP8[$2 + ($indvars$iv * 12 | 0) + 9 >> 0] | 0; //@line 16153
    HEAP32[$39 + ($14 << 4) + 8 >> 2] = HEAP32[$2 + ($indvars$iv * 12 | 0) + 4 >> 2]; //@line 16157
    $$1 = $$03739 + 1 << 24 >> 24; //@line 16159
   } else {
    $$1 = $$03739; //@line 16161
   }
   $indvars$iv = $indvars$iv + 1 | 0; //@line 16163
   if (($indvars$iv | 0) == ($wide$trip$count | 0)) {
    $$037$lcssa = $$1; //@line 16166
    break;
   } else {
    $$03739 = $$1; //@line 16169
   }
  }
 }
 HEAP8[$1 >> 0] = $$037$lcssa; //@line 16173
 $$038 = 0; //@line 16174
 return $$038 | 0; //@line 16175
}
function _putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11216
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 11221
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 11226
  } else {
   $20 = $0 & 255; //@line 11228
   $21 = $0 & 255; //@line 11229
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 11235
   } else {
    $26 = $1 + 20 | 0; //@line 11237
    $27 = HEAP32[$26 >> 2] | 0; //@line 11238
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 11244
     HEAP8[$27 >> 0] = $20; //@line 11245
     $34 = $21; //@line 11246
    } else {
     label = 12; //@line 11248
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 11253
     $32 = ___overflow($1, $0) | 0; //@line 11254
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 634; //@line 11257
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 11259
      sp = STACKTOP; //@line 11260
      return 0; //@line 11261
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 11263
      $34 = $32; //@line 11264
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 11269
   $$0 = $34; //@line 11270
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 11275
   $8 = $0 & 255; //@line 11276
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 11282
    $14 = HEAP32[$13 >> 2] | 0; //@line 11283
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 11289
     HEAP8[$14 >> 0] = $7; //@line 11290
     $$0 = $8; //@line 11291
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11295
   $19 = ___overflow($1, $0) | 0; //@line 11296
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 633; //@line 11299
    sp = STACKTOP; //@line 11300
    return 0; //@line 11301
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11303
    $$0 = $19; //@line 11304
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 11309
}
function ___fflush_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $22 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11936
 $1 = $0 + 20 | 0; //@line 11937
 $3 = $0 + 28 | 0; //@line 11939
 do {
  if ((HEAP32[$1 >> 2] | 0) >>> 0 > (HEAP32[$3 >> 2] | 0) >>> 0) {
   $7 = HEAP32[$0 + 36 >> 2] | 0; //@line 11945
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 11946
   FUNCTION_TABLE_iiii[$7 & 31]($0, 0, 0) | 0; //@line 11947
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 640; //@line 11950
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 11952
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 11954
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 11956
    sp = STACKTOP; //@line 11957
    return 0; //@line 11958
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 11960
    if (!(HEAP32[$1 >> 2] | 0)) {
     $$0 = -1; //@line 11964
     break;
    } else {
     label = 5; //@line 11967
     break;
    }
   }
  } else {
   label = 5; //@line 11972
  }
 } while (0);
 if ((label | 0) == 5) {
  $13 = $0 + 4 | 0; //@line 11976
  $14 = HEAP32[$13 >> 2] | 0; //@line 11977
  $15 = $0 + 8 | 0; //@line 11978
  $16 = HEAP32[$15 >> 2] | 0; //@line 11979
  do {
   if ($14 >>> 0 < $16 >>> 0) {
    $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 11987
    $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11988
    FUNCTION_TABLE_iiii[$22 & 31]($0, $14 - $16 | 0, 1) | 0; //@line 11989
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 641; //@line 11992
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 11994
     HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 11996
     HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 11998
     HEAP32[$AsyncCtx3 + 16 >> 2] = $15; //@line 12000
     HEAP32[$AsyncCtx3 + 20 >> 2] = $13; //@line 12002
     sp = STACKTOP; //@line 12003
     return 0; //@line 12004
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12006
     break;
    }
   }
  } while (0);
  HEAP32[$0 + 16 >> 2] = 0; //@line 12012
  HEAP32[$3 >> 2] = 0; //@line 12013
  HEAP32[$1 >> 2] = 0; //@line 12014
  HEAP32[$15 >> 2] = 0; //@line 12015
  HEAP32[$13 >> 2] = 0; //@line 12016
  $$0 = 0; //@line 12017
 }
 return $$0 | 0; //@line 12019
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_183($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 1609
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1613
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1615
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1617
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1619
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 1620
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 1624
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 1625
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 1626
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 310; //@line 1629
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 1630
   HEAP32[$14 >> 2] = $4; //@line 1631
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 1632
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 1633
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 1634
   HEAP32[$16 >> 2] = $8; //@line 1635
   sp = STACKTOP; //@line 1636
   return;
  }
  ___async_unwind = 0; //@line 1639
  HEAP32[$ReallocAsyncCtx4 >> 2] = 310; //@line 1640
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 1641
  HEAP32[$14 >> 2] = $4; //@line 1642
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 1643
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 1644
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 1645
  HEAP32[$16 >> 2] = $8; //@line 1646
  sp = STACKTOP; //@line 1647
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 1650
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 1654
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 1658
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 1659
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 1660
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 311; //@line 1663
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 1664
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 1665
  sp = STACKTOP; //@line 1666
  return;
 }
 ___async_unwind = 0; //@line 1669
 HEAP32[$ReallocAsyncCtx5 >> 2] = 311; //@line 1670
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 1671
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 1672
 sp = STACKTOP; //@line 1673
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_240($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 5602
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5606
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5608
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5610
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5612
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5614
 $13 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 5615
 if (!$13) {
  HEAP32[$6 + 1788 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv($4) | 0; //@line 5620
  HEAP8[$6 + 1936 >> 0] = 1; //@line 5622
  HEAP8[$8 >> 0] = 1; //@line 5623
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(4) | 0; //@line 5624
  __ZN7LoRaPHY25setup_public_network_modeEb($10, 1); //@line 5625
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 461; //@line 5628
   sp = STACKTOP; //@line 5629
   return;
  }
  ___async_unwind = 0; //@line 5632
  HEAP32[$ReallocAsyncCtx10 >> 2] = 461; //@line 5633
  sp = STACKTOP; //@line 5634
  return;
 } else {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 5638
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 5639
  FUNCTION_TABLE_vi[$16 & 1023]($12); //@line 5640
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 460; //@line 5643
   $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 5644
   HEAP32[$17 >> 2] = $4; //@line 5645
   $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 5646
   HEAP32[$18 >> 2] = $6; //@line 5647
   $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 5648
   HEAP32[$19 >> 2] = $8; //@line 5649
   $20 = $ReallocAsyncCtx4 + 16 | 0; //@line 5650
   HEAP32[$20 >> 2] = $10; //@line 5651
   sp = STACKTOP; //@line 5652
   return;
  }
  ___async_unwind = 0; //@line 5655
  HEAP32[$ReallocAsyncCtx4 >> 2] = 460; //@line 5656
  $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 5657
  HEAP32[$17 >> 2] = $4; //@line 5658
  $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 5659
  HEAP32[$18 >> 2] = $6; //@line 5660
  $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 5661
  HEAP32[$19 >> 2] = $8; //@line 5662
  $20 = $ReallocAsyncCtx4 + 16 | 0; //@line 5663
  HEAP32[$20 >> 2] = $10; //@line 5664
  sp = STACKTOP; //@line 5665
  return;
 }
}
function __ZN12LoRaWANStack25process_reception_timeoutEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $17 = 0, $2 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 6118
 STACKTOP = STACKTOP + 16 | 0; //@line 6119
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6119
 $2 = sp; //@line 6120
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 6121
 $3 = __ZN7LoRaMac19on_radio_rx_timeoutEb($0, $1) | 0; //@line 6122
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 202; //@line 6125
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 6127
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 6129
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 6131
  sp = STACKTOP; //@line 6132
  STACKTOP = sp; //@line 6133
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6135
 if (($3 | 0) != 1) {
  STACKTOP = sp; //@line 6138
  return;
 }
 if (!(__ZN7LoRaMac10nwk_joinedEv($0) | 0)) {
  HEAP32[$2 >> 2] = 0; //@line 6142
  $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6143
  __ZN12LoRaWANStack21process_joining_stateER14lorawan_status($0, $2); //@line 6144
  if (___async) {
   HEAP32[$AsyncCtx7 >> 2] = 203; //@line 6147
   HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 6149
   sp = STACKTOP; //@line 6150
   STACKTOP = sp; //@line 6151
   return;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6153
  STACKTOP = sp; //@line 6154
  return;
 }
 __ZN7LoRaMac21post_process_mcps_reqEv($0); //@line 6156
 if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) >> 2] | 0) == 1) {
  if (__ZN7LoRaMac24continue_sending_processEv($0) | 0) {
   STACKTOP = sp; //@line 6163
   return;
  }
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6166
 __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 6167
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 204; //@line 6170
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 6172
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 6174
  sp = STACKTOP; //@line 6175
  STACKTOP = sp; //@line 6176
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6178
 $17 = (__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2; //@line 6180
 HEAP32[$0 + 2480 >> 2] = $17 ? 5 : 2; //@line 6183
 STACKTOP = sp; //@line 6184
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_231($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 5055
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5059
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5061
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5063
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5065
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 5066
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 5070
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 5071
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 5072
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 212; //@line 5075
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 5076
   HEAP32[$14 >> 2] = $4; //@line 5077
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 5078
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 5079
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 5080
   HEAP32[$16 >> 2] = $8; //@line 5081
   sp = STACKTOP; //@line 5082
   return;
  }
  ___async_unwind = 0; //@line 5085
  HEAP32[$ReallocAsyncCtx4 >> 2] = 212; //@line 5086
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 5087
  HEAP32[$14 >> 2] = $4; //@line 5088
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 5089
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 5090
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 5091
  HEAP32[$16 >> 2] = $8; //@line 5092
  sp = STACKTOP; //@line 5093
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 5096
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 5100
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 5104
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 5105
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 5106
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 213; //@line 5109
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 5110
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 5111
  sp = STACKTOP; //@line 5112
  return;
 }
 ___async_unwind = 0; //@line 5115
 HEAP32[$ReallocAsyncCtx5 >> 2] = 213; //@line 5116
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 5117
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 5118
 sp = STACKTOP; //@line 5119
 return;
}
function __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 13643
 STACKTOP = STACKTOP + 16 | 0; //@line 13644
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13644
 $2 = sp; //@line 13645
 $3 = $0 + 476 | 0; //@line 13646
 $4 = $1 + 12 | 0; //@line 13647
 $5 = HEAP32[$4 >> 2] | 0; //@line 13648
 do {
  if (!$5) {
   $13 = 0; //@line 13652
  } else {
   $8 = HEAP32[$5 + 4 >> 2] | 0; //@line 13655
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 13656
   FUNCTION_TABLE_vii[$8 & 15]($2, $1); //@line 13657
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 404; //@line 13660
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 13662
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 13664
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 13666
    sp = STACKTOP; //@line 13667
    STACKTOP = sp; //@line 13668
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 13670
    $13 = HEAP32[$4 >> 2] | 0; //@line 13672
    break;
   }
  }
 } while (0);
 $12 = $2 + 12 | 0; //@line 13677
 HEAP32[$12 >> 2] = $13; //@line 13678
 $AsyncCtx6 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13679
 __ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($3, $2); //@line 13680
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 405; //@line 13683
  HEAP32[$AsyncCtx6 + 4 >> 2] = $12; //@line 13685
  HEAP32[$AsyncCtx6 + 8 >> 2] = $2; //@line 13687
  sp = STACKTOP; //@line 13688
  STACKTOP = sp; //@line 13689
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 13691
 $16 = HEAP32[$12 >> 2] | 0; //@line 13692
 if (!$16) {
  STACKTOP = sp; //@line 13695
  return;
 }
 $19 = HEAP32[$16 + 8 >> 2] | 0; //@line 13698
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 13699
 FUNCTION_TABLE_vi[$19 & 1023]($2); //@line 13700
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 406; //@line 13703
  sp = STACKTOP; //@line 13704
  STACKTOP = sp; //@line 13705
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13707
 STACKTOP = sp; //@line 13708
 return;
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 2269
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2271
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2273
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2275
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 2277
 if (!$AsyncRetVal) {
  $9 = $2 + 16 | 0; //@line 2280
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 2281
  $10 = _mbedtls_cipher_cmac_finish($4, $9) | 0; //@line 2282
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 492; //@line 2285
   $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 2286
   HEAP32[$11 >> 2] = $2; //@line 2287
   $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 2288
   HEAP32[$12 >> 2] = $9; //@line 2289
   $13 = $ReallocAsyncCtx2 + 12 | 0; //@line 2290
   HEAP32[$13 >> 2] = $6; //@line 2291
   $14 = $ReallocAsyncCtx2 + 16 | 0; //@line 2292
   HEAP32[$14 >> 2] = $4; //@line 2293
   sp = STACKTOP; //@line 2294
   return;
  }
  HEAP32[___async_retval >> 2] = $10; //@line 2298
  ___async_unwind = 0; //@line 2299
  HEAP32[$ReallocAsyncCtx2 >> 2] = 492; //@line 2300
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 2301
  HEAP32[$11 >> 2] = $2; //@line 2302
  $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 2303
  HEAP32[$12 >> 2] = $9; //@line 2304
  $13 = $ReallocAsyncCtx2 + 12 | 0; //@line 2305
  HEAP32[$13 >> 2] = $6; //@line 2306
  $14 = $ReallocAsyncCtx2 + 16 | 0; //@line 2307
  HEAP32[$14 >> 2] = $4; //@line 2308
  sp = STACKTOP; //@line 2309
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 2312
  _mbedtls_cipher_free($4); //@line 2313
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 493; //@line 2316
   $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 2317
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 2318
   sp = STACKTOP; //@line 2319
   return;
  }
  ___async_unwind = 0; //@line 2322
  HEAP32[$ReallocAsyncCtx5 >> 2] = 493; //@line 2323
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 2324
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 2325
  sp = STACKTOP; //@line 2326
  return;
 }
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 7915
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7917
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7919
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7921
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7923
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7925
 $11 = HEAP32[$2 >> 2] | 0; //@line 7926
 if ($11 | 0) {
  $14 = HEAP32[$11 + 4 >> 2] | 0; //@line 7930
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 7931
  FUNCTION_TABLE_vii[$14 & 15]($6, $8); //@line 7932
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 91; //@line 7935
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 7936
   HEAP32[$15 >> 2] = $2; //@line 7937
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 7938
   HEAP32[$16 >> 2] = $4; //@line 7939
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 7940
   HEAP32[$17 >> 2] = $10; //@line 7941
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 7942
   HEAP32[$18 >> 2] = $8; //@line 7943
   sp = STACKTOP; //@line 7944
   return;
  }
  ___async_unwind = 0; //@line 7947
  HEAP32[$ReallocAsyncCtx2 >> 2] = 91; //@line 7948
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 7949
  HEAP32[$15 >> 2] = $2; //@line 7950
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 7951
  HEAP32[$16 >> 2] = $4; //@line 7952
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 7953
  HEAP32[$17 >> 2] = $10; //@line 7954
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 7955
  HEAP32[$18 >> 2] = $8; //@line 7956
  sp = STACKTOP; //@line 7957
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 7960
 __ZN4mbed6Ticker5setupEy($10, 1e5, 0); //@line 7961
 $19 = HEAP32[$2 >> 2] | 0; //@line 7962
 if (!$19) {
  return;
 }
 $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 7968
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 7969
 FUNCTION_TABLE_vi[$22 & 1023]($8); //@line 7970
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 92; //@line 7973
  sp = STACKTOP; //@line 7974
  return;
 }
 ___async_unwind = 0; //@line 7977
 HEAP32[$ReallocAsyncCtx3 >> 2] = 92; //@line 7978
 sp = STACKTOP; //@line 7979
 return;
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 8249
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8251
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8253
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8255
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 8257
 if (!$AsyncRetVal) {
  $9 = $2 + 16 | 0; //@line 8260
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 8261
  $10 = _mbedtls_cipher_cmac_finish($4, $9) | 0; //@line 8262
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 487; //@line 8265
   $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 8266
   HEAP32[$11 >> 2] = $2; //@line 8267
   $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 8268
   HEAP32[$12 >> 2] = $9; //@line 8269
   $13 = $ReallocAsyncCtx3 + 12 | 0; //@line 8270
   HEAP32[$13 >> 2] = $6; //@line 8271
   $14 = $ReallocAsyncCtx3 + 16 | 0; //@line 8272
   HEAP32[$14 >> 2] = $4; //@line 8273
   sp = STACKTOP; //@line 8274
   return;
  }
  HEAP32[___async_retval >> 2] = $10; //@line 8278
  ___async_unwind = 0; //@line 8279
  HEAP32[$ReallocAsyncCtx3 >> 2] = 487; //@line 8280
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 8281
  HEAP32[$11 >> 2] = $2; //@line 8282
  $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 8283
  HEAP32[$12 >> 2] = $9; //@line 8284
  $13 = $ReallocAsyncCtx3 + 12 | 0; //@line 8285
  HEAP32[$13 >> 2] = $6; //@line 8286
  $14 = $ReallocAsyncCtx3 + 16 | 0; //@line 8287
  HEAP32[$14 >> 2] = $4; //@line 8288
  sp = STACKTOP; //@line 8289
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 8292
  _mbedtls_cipher_free($4); //@line 8293
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 488; //@line 8296
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 8297
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 8298
   sp = STACKTOP; //@line 8299
   return;
  }
  ___async_unwind = 0; //@line 8302
  HEAP32[$ReallocAsyncCtx6 >> 2] = 488; //@line 8303
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 8304
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 8305
  sp = STACKTOP; //@line 8306
  return;
 }
}
function __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $13 = 0, $16 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 2078
 STACKTOP = STACKTOP + 48 | 0; //@line 2079
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 2079
 $vararg_buffer12 = sp + 32 | 0; //@line 2080
 $vararg_buffer8 = sp + 24 | 0; //@line 2081
 $vararg_buffer4 = sp + 16 | 0; //@line 2082
 $vararg_buffer = sp; //@line 2083
 $6 = $4 & 255; //@line 2084
 $7 = $5 & 255; //@line 2085
 HEAP32[$vararg_buffer >> 2] = $2; //@line 2086
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 2088
 HEAP32[$vararg_buffer + 8 >> 2] = $6; //@line 2090
 HEAP32[$vararg_buffer + 12 >> 2] = $7; //@line 2092
 _mbed_tracef(16, 10996, 11804, $vararg_buffer); //@line 2093
 _emscripten_asm_const_i(6) | 0; //@line 2094
 $10 = HEAP32[$0 + 752 >> 2] | 0; //@line 2096
 if (($10 | 0) != ($6 | 0)) {
  HEAP32[$vararg_buffer4 >> 2] = $10; //@line 2099
  HEAP32[$vararg_buffer4 + 4 >> 2] = $6; //@line 2101
  _mbed_tracef(16, 10996, 11886, $vararg_buffer4); //@line 2102
  STACKTOP = sp; //@line 2103
  return;
 }
 $13 = HEAP32[$0 + 756 >> 2] | 0; //@line 2106
 if (($13 | 0) != ($7 | 0)) {
  HEAP32[$vararg_buffer8 >> 2] = $13; //@line 2109
  HEAP32[$vararg_buffer8 + 4 >> 2] = $7; //@line 2111
  _mbed_tracef(16, 10996, 11933, $vararg_buffer8); //@line 2112
  STACKTOP = sp; //@line 2113
  return;
 }
 $16 = HEAP32[$0 + 692 >> 2] | 0; //@line 2116
 if (($16 | 0) == ($3 | 0)) {
  _memcpy($0 + 792 | 0, $1 | 0, $2 | 0) | 0; //@line 2120
  HEAP8[$0 + 782 >> 0] = $2; //@line 2123
  HEAP8[$0 + 781 >> 0] = -35; //@line 2125
  HEAP8[$0 + 780 >> 0] = -5; //@line 2127
  HEAP8[$0 + 783 >> 0] = 1; //@line 2129
  HEAP32[$0 + 784 >> 2] = _emscripten_asm_const_i(3) | 0; //@line 2132
  STACKTOP = sp; //@line 2133
  return;
 } else {
  HEAP32[$vararg_buffer12 >> 2] = $16; //@line 2135
  HEAP32[$vararg_buffer12 + 4 >> 2] = $3; //@line 2137
  _mbed_tracef(16, 10996, 11980, $vararg_buffer12); //@line 2138
  STACKTOP = sp; //@line 2139
  return;
 }
}
function __ZN7LoRaPHY15setup_rx_windowEbj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $14 = 0, $17 = 0, $20 = 0, $3 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 21347
 $3 = $0 + 4 | 0; //@line 21348
 $4 = HEAP32[$3 >> 2] | 0; //@line 21349
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 72 >> 2] | 0; //@line 21352
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 21353
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 21354
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 532; //@line 21357
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 21359
  HEAP8[$AsyncCtx + 8 >> 0] = $1 & 1; //@line 21362
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 21364
  sp = STACKTOP; //@line 21365
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 21368
 $11 = HEAP32[$3 >> 2] | 0; //@line 21369
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 28 >> 2] | 0; //@line 21372
 do {
  if ($1) {
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 21375
   FUNCTION_TABLE_vii[$14 & 15]($11, 0); //@line 21376
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 534; //@line 21379
    HEAP32[$AsyncCtx7 + 4 >> 2] = $3; //@line 21381
    sp = STACKTOP; //@line 21382
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 21385
    break;
   }
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 21389
   FUNCTION_TABLE_vii[$14 & 15]($11, $2); //@line 21390
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 533; //@line 21393
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 21395
    sp = STACKTOP; //@line 21396
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 21399
    break;
   }
  }
 } while (0);
 $17 = HEAP32[$3 >> 2] | 0; //@line 21404
 $20 = HEAP32[(HEAP32[$17 >> 2] | 0) + 76 >> 2] | 0; //@line 21407
 $AsyncCtx11 = _emscripten_alloc_async_context(4, sp) | 0; //@line 21408
 FUNCTION_TABLE_vi[$20 & 1023]($17); //@line 21409
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 535; //@line 21412
  sp = STACKTOP; //@line 21413
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 21416
  return;
 }
}
function __ZN7LoRaMac15open_rx2_windowEv($0) {
 $0 = $0 | 0;
 var $19 = 0, $24 = 0, $25 = 0, $30 = 0, $32 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 11239
 $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11241
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 11242
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 363; //@line 11245
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 11247
  sp = STACKTOP; //@line 11248
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 11251
 $5 = $0 + 1964 | 0; //@line 11254
 HEAP8[$5 >> 0] = HEAP8[$0 + 1182 >> 0] | 0; //@line 11255
 HEAP32[$0 + 1968 >> 2] = HEAP32[$0 + 1912 >> 2]; //@line 11259
 HEAP8[$0 + 1980 >> 0] = HEAP8[$0 + 1921 >> 0] | 0; //@line 11263
 HEAP8[$0 + 1981 >> 0] = HEAP8[$0 + 1173 >> 0] | 0; //@line 11267
 HEAP32[$0 + 1984 >> 2] = 1; //@line 11269
 $19 = $0 + 1982 | 0; //@line 11273
 HEAP8[$19 >> 0] = (HEAP32[$0 + 2364 >> 2] | 0) == 2 & 1; //@line 11275
 HEAP8[$0 + 2010 >> 0] = HEAP8[$0 + 1965 >> 0] | 0; //@line 11279
 $24 = $0 + 4 | 0; //@line 11280
 $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 11281
 $25 = __ZN7LoRaPHY9rx_configEP18rx_config_params_t($24, $5) | 0; //@line 11282
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 364; //@line 11285
  HEAP32[$AsyncCtx3 + 4 >> 2] = $19; //@line 11287
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 11289
  HEAP32[$AsyncCtx3 + 12 >> 2] = $24; //@line 11291
  sp = STACKTOP; //@line 11292
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11295
 if (!$25) {
  return;
 }
 $30 = (HEAP8[$19 >> 0] | 0) != 0; //@line 11300
 $32 = HEAP32[$0 + 1888 >> 2] | 0; //@line 11302
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 11303
 __ZN7LoRaPHY15setup_rx_windowEbj($24, $30, $32); //@line 11304
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 365; //@line 11307
  HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 11309
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 11311
  sp = STACKTOP; //@line 11312
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11315
 HEAP32[$0 + 1168 >> 2] = HEAP8[$19 >> 0] | 0 ? 2 : 1; //@line 11320
 return;
}
function __ZN12LoRaWANStack26process_status_check_stateEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $16 = 0, $3 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 6691
 switch (HEAP32[$0 + 2480 >> 2] | 0) {
 case 9:
 case 8:
  {
   $3 = $0 + 2872 | 0; //@line 6696
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] & -18; //@line 6699
   __ZN7LoRaMac14set_tx_ongoingEb($0, 0); //@line 6700
   __ZN7LoRaMac16reset_ongoing_txEb($0, 0); //@line 6701
   $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6702
   __ZN12LoRaWANStack20mcps_confirm_handlerEv($0); //@line 6703
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 224; //@line 6706
    sp = STACKTOP; //@line 6707
    return;
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6710
   return;
  }
 case 5:
  {
   $6 = $0 + 2872 | 0; //@line 6715
   $7 = HEAP32[$6 >> 2] | 0; //@line 6716
   do {
    if ($7 & 16 | 0) {
     HEAP32[$6 >> 2] = $7 & -18; //@line 6722
     __ZN7LoRaMac14set_tx_ongoingEb($0, 0); //@line 6723
     __ZN7LoRaMac16reset_ongoing_txEb($0, 0); //@line 6724
     $11 = $0 + 2878 | 0; //@line 6725
     if (HEAP8[$11 >> 0] | 0) {
      HEAP8[$11 >> 0] = 0; //@line 6729
      break;
     }
     $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6732
     __ZN12LoRaWANStack20mcps_confirm_handlerEv($0); //@line 6733
     if (___async) {
      HEAP32[$AsyncCtx3 >> 2] = 225; //@line 6736
      HEAP32[$AsyncCtx3 + 4 >> 2] = $6; //@line 6738
      HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 6740
      sp = STACKTOP; //@line 6741
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6744
      break;
     }
    }
   } while (0);
   $16 = HEAP32[$6 >> 2] | 0; //@line 6749
   if (!($16 & 2)) {
    return;
   }
   HEAP32[$6 >> 2] = $16 & -3; //@line 6756
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6757
   __ZN12LoRaWANStack23mcps_indication_handlerEv($0); //@line 6758
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 226; //@line 6761
    sp = STACKTOP; //@line 6762
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 6765
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN7LoRaMac18prepare_ongoing_txEhPKhthh__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $35 = 0, $4 = 0, $51 = 0, $56 = 0, $58 = 0, $8 = 0, $AsyncRetVal = 0;
 $2 = HEAP16[$0 + 4 >> 1] | 0; //@line 3932
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3934
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3938
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3940
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 3942
 $14 = HEAP8[$0 + 25 >> 0] | 0; //@line 3944
 $16 = HEAP8[$0 + 26 >> 0] | 0; //@line 3946
 $18 = HEAP32[$0 + 28 >> 2] | 0; //@line 3948
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 3952
 $22 = $AsyncRetVal & 255; //@line 3953
 $23 = $2 & 65535; //@line 3954
 if ($23 >>> 0 > $22 >>> 0) {
  HEAP32[$4 >> 2] = $23; //@line 3957
  HEAP32[$4 + 4 >> 2] = $22; //@line 3959
  _mbed_tracef(8, 13239, 13464, $4); //@line 3960
  HEAP16[$8 + 2356 >> 1] = $23 - $22; //@line 3964
  HEAP16[$8 + 2354 >> 1] = $AsyncRetVal & 255; //@line 3967
  _memcpy($8 + 2099 | 0, $10 | 0, $22 | 0) | 0; //@line 3969
 } else {
  HEAP16[$8 + 2354 >> 1] = $2; //@line 3972
  HEAP16[$8 + 2356 >> 1] = 0; //@line 3974
  if ($2 << 16 >> 16) {
   _memcpy($8 + 2099 | 0, $10 | 0, $23 | 0) | 0; //@line 3978
  }
 }
 $35 = $12 & 255; //@line 3981
 if ($35 & 1 | 0) {
  HEAP32[$8 + 2092 >> 2] = 0; //@line 3986
  HEAP8[$8 + 2096 >> 0] = $14; //@line 3988
  HEAP8[$8 + 2098 >> 0] = 1; //@line 3990
 }
 if ($35 & 2 | 0) {
  HEAP32[$8 + 2092 >> 2] = 1; //@line 3996
  HEAP8[$8 + 2096 >> 0] = $14; //@line 3998
  HEAP8[$8 + 2098 >> 0] = $16; //@line 4000
 }
 if (!($35 & 8)) {
  $58 = HEAP8[$8 + 2096 >> 0] | 0; //@line 4007
 } else {
  HEAP32[$8 + 2092 >> 2] = 3; //@line 4010
  HEAP8[$8 + 2096 >> 0] = $14; //@line 4012
  HEAP8[$8 + 2098 >> 0] = 1; //@line 4014
  $58 = $14; //@line 4015
 }
 $51 = $8 + 2354 | 0; //@line 4017
 $56 = HEAPU16[$8 + 2356 >> 1] | 0; //@line 4022
 HEAP32[$18 >> 2] = HEAPU16[$51 >> 1]; //@line 4024
 HEAP32[$18 + 4 >> 2] = $56; //@line 4026
 HEAP32[$18 + 8 >> 2] = $58 & 255; //@line 4028
 _mbed_tracef(8, 13239, 13519, $18); //@line 4029
 HEAP16[___async_retval >> 1] = HEAP16[$51 >> 1] | 0; //@line 4032
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_86($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23150
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23152
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23154
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23156
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23158
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23160
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23162
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23164
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23166
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23168
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23170
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 23172
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 23174
 $25 = $4 + 1088 | 0; //@line 23175
 HEAP32[$25 >> 2] = 0; //@line 23176
 HEAP32[$25 + 4 >> 2] = 0; //@line 23176
 HEAP32[$25 + 8 >> 2] = 0; //@line 23176
 HEAP32[$25 + 12 >> 2] = 0; //@line 23176
 HEAP8[$4 + 1104 >> 0] = 1; //@line 23178
 HEAP32[$2 >> 2] = 620; //@line 23179
 $27 = $4 + 1112 | 0; //@line 23180
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(52) | 0; //@line 23181
 __ZN4mbed10TimerEventC2Ev($27); //@line 23182
 if (!___async) {
  ___async_unwind = 0; //@line 23185
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 95; //@line 23187
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $27; //@line 23189
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 23191
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 23193
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 23195
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 23197
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 23199
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $14; //@line 23201
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $16; //@line 23203
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $18; //@line 23205
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $20; //@line 23207
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $22; //@line 23209
 HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $24; //@line 23211
 sp = STACKTOP; //@line 23212
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_85($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23080
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23082
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23084
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23086
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23088
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23090
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23092
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23094
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23096
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23098
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23100
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 23102
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 23104
 $25 = $4 + 1152 | 0; //@line 23105
 HEAP32[$25 >> 2] = 0; //@line 23106
 HEAP32[$25 + 4 >> 2] = 0; //@line 23106
 HEAP32[$25 + 8 >> 2] = 0; //@line 23106
 HEAP32[$25 + 12 >> 2] = 0; //@line 23106
 HEAP8[$4 + 1168 >> 0] = 1; //@line 23108
 HEAP32[$2 >> 2] = 620; //@line 23109
 $27 = $4 + 1176 | 0; //@line 23110
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(52) | 0; //@line 23111
 __ZN4mbed10TimerEventC2Ev($27); //@line 23112
 if (!___async) {
  ___async_unwind = 0; //@line 23115
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 96; //@line 23117
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $27; //@line 23119
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 23121
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 23123
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 23125
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 23127
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 23129
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 23131
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 23133
 HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 23135
 HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 23137
 HEAP32[$ReallocAsyncCtx2 + 44 >> 2] = $22; //@line 23139
 HEAP32[$ReallocAsyncCtx2 + 48 >> 2] = $24; //@line 23141
 sp = STACKTOP; //@line 23142
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_332($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 25159
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25161
 $4 = HEAP32[$2 + 44 >> 2] | 0; //@line 25163
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 25168
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 25169
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 32 | 0); //@line 25170
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 161; //@line 25173
   $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 25174
   HEAP32[$9 >> 2] = $2; //@line 25175
   sp = STACKTOP; //@line 25176
   return;
  }
  ___async_unwind = 0; //@line 25179
  HEAP32[$ReallocAsyncCtx5 >> 2] = 161; //@line 25180
  $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 25181
  HEAP32[$9 >> 2] = $2; //@line 25182
  sp = STACKTOP; //@line 25183
  return;
 }
 $11 = HEAP32[$2 + 28 >> 2] | 0; //@line 25187
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 25192
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 25193
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 16 | 0); //@line 25194
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 162; //@line 25197
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 25198
   HEAP32[$16 >> 2] = $2; //@line 25199
   sp = STACKTOP; //@line 25200
   return;
  }
  ___async_unwind = 0; //@line 25203
  HEAP32[$ReallocAsyncCtx6 >> 2] = 162; //@line 25204
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 25205
  HEAP32[$16 >> 2] = $2; //@line 25206
  sp = STACKTOP; //@line 25207
  return;
 }
 $18 = HEAP32[$2 + 12 >> 2] | 0; //@line 25211
 if (!$18) {
  return;
 }
 $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 25217
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 25218
 FUNCTION_TABLE_vi[$21 & 1023]($2); //@line 25219
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 163; //@line 25222
  sp = STACKTOP; //@line 25223
  return;
 }
 ___async_unwind = 0; //@line 25226
 HEAP32[$ReallocAsyncCtx7 >> 2] = 163; //@line 25227
 sp = STACKTOP; //@line 25228
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_84($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 23010
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23012
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23014
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23016
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23018
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23020
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23022
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23024
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23026
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23028
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23030
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 23032
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 23034
 $25 = $4 + 1216 | 0; //@line 23035
 HEAP32[$25 >> 2] = 0; //@line 23036
 HEAP32[$25 + 4 >> 2] = 0; //@line 23036
 HEAP32[$25 + 8 >> 2] = 0; //@line 23036
 HEAP32[$25 + 12 >> 2] = 0; //@line 23036
 HEAP8[$4 + 1232 >> 0] = 1; //@line 23038
 HEAP32[$2 >> 2] = 620; //@line 23039
 $27 = $4 + 1240 | 0; //@line 23040
 $ReallocAsyncCtx = _emscripten_realloc_async_context(52) | 0; //@line 23041
 __ZN4mbed10TimerEventC2Ev($27); //@line 23042
 if (!___async) {
  ___async_unwind = 0; //@line 23045
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 97; //@line 23047
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $27; //@line 23049
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 23051
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 23053
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 23055
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 23057
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 23059
 HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 23061
 HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 23063
 HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 23065
 HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 23067
 HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 23069
 HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 23071
 sp = STACKTOP; //@line 23072
 return;
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_194($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 2390
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2394
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2396
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2398
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2400
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 2402
 if (!$AsyncRetVal) {
  $14 = HEAP16[$0 + 4 >> 1] & 255; //@line 2406
  $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 2407
  $15 = _mbedtls_cipher_cmac_update($4, $6, $14) | 0; //@line 2408
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 491; //@line 2411
   $16 = $ReallocAsyncCtx + 4 | 0; //@line 2412
   HEAP32[$16 >> 2] = $8; //@line 2413
   $17 = $ReallocAsyncCtx + 8 | 0; //@line 2414
   HEAP32[$17 >> 2] = $4; //@line 2415
   $18 = $ReallocAsyncCtx + 12 | 0; //@line 2416
   HEAP32[$18 >> 2] = $10; //@line 2417
   sp = STACKTOP; //@line 2418
   return;
  }
  HEAP32[___async_retval >> 2] = $15; //@line 2422
  ___async_unwind = 0; //@line 2423
  HEAP32[$ReallocAsyncCtx >> 2] = 491; //@line 2424
  $16 = $ReallocAsyncCtx + 4 | 0; //@line 2425
  HEAP32[$16 >> 2] = $8; //@line 2426
  $17 = $ReallocAsyncCtx + 8 | 0; //@line 2427
  HEAP32[$17 >> 2] = $4; //@line 2428
  $18 = $ReallocAsyncCtx + 12 | 0; //@line 2429
  HEAP32[$18 >> 2] = $10; //@line 2430
  sp = STACKTOP; //@line 2431
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 2434
  _mbedtls_cipher_free($4); //@line 2435
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 493; //@line 2438
   $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 2439
   HEAP32[$20 >> 2] = $AsyncRetVal; //@line 2440
   sp = STACKTOP; //@line 2441
   return;
  }
  ___async_unwind = 0; //@line 2444
  HEAP32[$ReallocAsyncCtx5 >> 2] = 493; //@line 2445
  $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 2446
  HEAP32[$20 >> 2] = $AsyncRetVal; //@line 2447
  sp = STACKTOP; //@line 2448
  return;
 }
}
function __ZN7LoRaMac24get_max_possible_tx_sizeEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$09 = 0, $$pre = 0, $$pre11 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $34 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $or$cond$i = 0, sp = 0;
 sp = STACKTOP; //@line 14803
 $2 = $0 + 476 | 0; //@line 14804
 $4 = (__ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($2) | 0) & 255; //@line 14806
 $7 = ((__ZNK14LoRaMacCommand26get_repeat_commands_lengthEv($2) | 0) & 255) + $4 | 0; //@line 14809
 $$pre = $0 + 4 | 0; //@line 14813
 $$pre11 = $0 + 1877 | 0; //@line 14814
 do {
  if (HEAP8[$0 + 1936 >> 0] | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 14819
   __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($$pre, 0, $$pre11, $0 + 1876 | 0, $0 + 1768 | 0) | 0; //@line 14820
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 437; //@line 14823
    HEAP32[$AsyncCtx + 4 >> 2] = $$pre11; //@line 14825
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 14827
    HEAP32[$AsyncCtx + 12 >> 2] = $$pre; //@line 14829
    HEAP32[$AsyncCtx + 16 >> 2] = $7; //@line 14831
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 14833
    HEAP8[$AsyncCtx + 24 >> 0] = $1; //@line 14835
    sp = STACKTOP; //@line 14836
    return 0; //@line 14837
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14839
    break;
   }
  }
 } while (0);
 $20 = $0 + 1173 | 0; //@line 14845
 $23 = __ZN7LoRaPHY15get_max_payloadEhb($$pre, HEAP8[$$pre11 >> 0] | 0, (HEAP8[$20 >> 0] | 0) != 0) | 0; //@line 14848
 $24 = $23 & 255; //@line 14849
 $25 = $7 & 255; //@line 14850
 if ($25 >>> 0 > $24 >>> 0) {
  __ZN14LoRaMacCommand20clear_command_bufferEv($2); //@line 14853
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($2); //@line 14854
  $$0 = 0; //@line 14855
  $$09 = $23; //@line 14855
 } else {
  $$0 = $25; //@line 14859
  $$09 = $24 - $7 & 255; //@line 14859
 }
 $34 = $$0 + ($1 & 255) | 0; //@line 14866
 $or$cond$i = $34 >>> 0 < 256 & $34 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb($$pre, HEAP8[$$pre11 >> 0] | 0, (HEAP8[$20 >> 0] | 0) != 0) | 0) & 255) >>> 0; //@line 14870
 return ($or$cond$i ? $23 : $$09) | 0; //@line 14872
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_282($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 8314
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8316
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8318
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8320
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8322
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8324
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 8326
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 8329
  $13 = _mbedtls_cipher_cmac_update($2, $4, $6) | 0; //@line 8330
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 486; //@line 8333
   $14 = $ReallocAsyncCtx + 4 | 0; //@line 8334
   HEAP32[$14 >> 2] = $8; //@line 8335
   $15 = $ReallocAsyncCtx + 8 | 0; //@line 8336
   HEAP32[$15 >> 2] = $2; //@line 8337
   $16 = $ReallocAsyncCtx + 12 | 0; //@line 8338
   HEAP32[$16 >> 2] = $10; //@line 8339
   sp = STACKTOP; //@line 8340
   return;
  }
  HEAP32[___async_retval >> 2] = $13; //@line 8344
  ___async_unwind = 0; //@line 8345
  HEAP32[$ReallocAsyncCtx >> 2] = 486; //@line 8346
  $14 = $ReallocAsyncCtx + 4 | 0; //@line 8347
  HEAP32[$14 >> 2] = $8; //@line 8348
  $15 = $ReallocAsyncCtx + 8 | 0; //@line 8349
  HEAP32[$15 >> 2] = $2; //@line 8350
  $16 = $ReallocAsyncCtx + 12 | 0; //@line 8351
  HEAP32[$16 >> 2] = $10; //@line 8352
  sp = STACKTOP; //@line 8353
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 8356
  _mbedtls_cipher_free($2); //@line 8357
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 488; //@line 8360
   $18 = $ReallocAsyncCtx6 + 4 | 0; //@line 8361
   HEAP32[$18 >> 2] = $AsyncRetVal; //@line 8362
   sp = STACKTOP; //@line 8363
   return;
  }
  ___async_unwind = 0; //@line 8366
  HEAP32[$ReallocAsyncCtx6 >> 2] = 488; //@line 8367
  $18 = $ReallocAsyncCtx6 + 4 | 0; //@line 8368
  HEAP32[$18 >> 2] = $AsyncRetVal; //@line 8369
  sp = STACKTOP; //@line 8370
  return;
 }
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_44($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 20819
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20823
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20825
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20827
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20829
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20831
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20833
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20835
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20837
 if ((HEAP16[$0 + 4 >> 1] | 0) < -1) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 20840
  $20 = __ZN4mbed5Timer7read_msEv($4) | 0; //@line 20841
  if (!___async) {
   HEAP32[___async_retval >> 2] = $20; //@line 20845
   ___async_unwind = 0; //@line 20846
  }
  HEAP32[$ReallocAsyncCtx6 >> 2] = 61; //@line 20848
  HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $6; //@line 20850
  HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $16; //@line 20852
  HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $18; //@line 20854
  HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $12; //@line 20856
  HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $4; //@line 20858
  HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $14; //@line 20860
  sp = STACKTOP; //@line 20861
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 20864
  $28 = __ZN4mbed5Timer7read_msEv($4) | 0; //@line 20865
  if (!___async) {
   HEAP32[___async_retval >> 2] = $28; //@line 20869
   ___async_unwind = 0; //@line 20870
  }
  HEAP32[$ReallocAsyncCtx5 >> 2] = 62; //@line 20872
  HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $6; //@line 20874
  HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $8; //@line 20876
  HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $10; //@line 20878
  HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $12; //@line 20880
  HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $4; //@line 20882
  HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $14; //@line 20884
  sp = STACKTOP; //@line 20885
  return;
 }
}
function __ZN4mbed7Timeout7handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 22118
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22124
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22126
 $9 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 22128
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 22129
 __ZN4mbed6Ticker6detachEv($6); //@line 22130
 $10 = HEAP32[$9 >> 2] | 0; //@line 22131
 if (!$10) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 22134
  _mbed_assert_internal(14973, 14978, 528); //@line 22135
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 109; //@line 22138
   $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 22139
   HEAP32[$12 >> 2] = $9; //@line 22140
   $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 22141
   HEAP32[$13 >> 2] = $8; //@line 22142
   sp = STACKTOP; //@line 22143
   return;
  }
  ___async_unwind = 0; //@line 22146
  HEAP32[$ReallocAsyncCtx4 >> 2] = 109; //@line 22147
  $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 22148
  HEAP32[$12 >> 2] = $9; //@line 22149
  $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 22150
  HEAP32[$13 >> 2] = $8; //@line 22151
  sp = STACKTOP; //@line 22152
  return;
 } else {
  $14 = HEAP32[$10 >> 2] | 0; //@line 22155
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 22156
  FUNCTION_TABLE_vi[$14 & 1023]($8); //@line 22157
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 110; //@line 22160
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 22161
   HEAP32[$15 >> 2] = $9; //@line 22162
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 22163
   HEAP32[$16 >> 2] = $8; //@line 22164
   sp = STACKTOP; //@line 22165
   return;
  }
  ___async_unwind = 0; //@line 22168
  HEAP32[$ReallocAsyncCtx2 >> 2] = 110; //@line 22169
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 22170
  HEAP32[$15 >> 2] = $9; //@line 22171
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 22172
  HEAP32[$16 >> 2] = $8; //@line 22173
  sp = STACKTOP; //@line 22174
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_301($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 10610
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10614
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10616
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10618
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10620
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10622
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 10624
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 10626
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 10629
 $18 = $4 + 16 | 0; //@line 10630
 HEAP32[$18 >> 2] = HEAP32[$6 >> 2]; //@line 10631
 HEAP32[$18 + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 10631
 HEAP8[$18 + 8 >> 0] = HEAP8[$6 + 8 >> 0] | 0; //@line 10631
 _equeue_event_dtor($4, 285); //@line 10632
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 10633
 $19 = _equeue_post($8, 286, $4) | 0; //@line 10634
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 287; //@line 10637
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 10638
  HEAP32[$20 >> 2] = $10; //@line 10639
  $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 10640
  HEAP32[$21 >> 2] = $12; //@line 10641
  $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 10642
  HEAP32[$22 >> 2] = $14; //@line 10643
  $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 10644
  HEAP32[$23 >> 2] = $16; //@line 10645
  sp = STACKTOP; //@line 10646
  return;
 }
 HEAP32[___async_retval >> 2] = $19; //@line 10650
 ___async_unwind = 0; //@line 10651
 HEAP32[$ReallocAsyncCtx6 >> 2] = 287; //@line 10652
 $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 10653
 HEAP32[$20 >> 2] = $10; //@line 10654
 $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 10655
 HEAP32[$21 >> 2] = $12; //@line 10656
 $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 10657
 HEAP32[$22 >> 2] = $14; //@line 10658
 $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 10659
 HEAP32[$23 >> 2] = $16; //@line 10660
 sp = STACKTOP; //@line 10661
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_150($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $21 = 0, $22 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 28799
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28801
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28805
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28807
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28809
 if ((__ZNK7LoRaMac16get_device_classEv($6) | 0) == 2) {
  label = 6; //@line 28813
 } else {
  if (!(HEAP8[$8 + 15 >> 0] | 0)) {
   label = 6; //@line 28819
  }
 }
 if ((label | 0) == 6) {
  if ((__ZNK7LoRaMac16get_device_classEv($6) | 0) != 2) {
   return;
  }
  if ((HEAP32[$8 + 4 >> 2] | 0) != 1) {
   return;
  }
 }
 $21 = $10 + 2496 | 0; //@line 28835
 $22 = HEAP32[$21 >> 2] | 0; //@line 28836
 if (!$22) {
  return;
 }
 $26 = HEAP32[$10 + 3136 >> 2] | 0; //@line 28843
 $28 = HEAP32[$22 + 4 >> 2] | 0; //@line 28845
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 28846
 FUNCTION_TABLE_vii[$28 & 15]($2, $10 + 2484 | 0); //@line 28847
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 247; //@line 28850
  $29 = $ReallocAsyncCtx5 + 4 | 0; //@line 28851
  HEAP32[$29 >> 2] = $21; //@line 28852
  $30 = $ReallocAsyncCtx5 + 8 | 0; //@line 28853
  HEAP32[$30 >> 2] = $2; //@line 28854
  $31 = $ReallocAsyncCtx5 + 12 | 0; //@line 28855
  HEAP32[$31 >> 2] = $26; //@line 28856
  $32 = $ReallocAsyncCtx5 + 16 | 0; //@line 28857
  HEAP32[$32 >> 2] = $2; //@line 28858
  sp = STACKTOP; //@line 28859
  return;
 }
 ___async_unwind = 0; //@line 28862
 HEAP32[$ReallocAsyncCtx5 >> 2] = 247; //@line 28863
 $29 = $ReallocAsyncCtx5 + 4 | 0; //@line 28864
 HEAP32[$29 >> 2] = $21; //@line 28865
 $30 = $ReallocAsyncCtx5 + 8 | 0; //@line 28866
 HEAP32[$30 >> 2] = $2; //@line 28867
 $31 = $ReallocAsyncCtx5 + 12 | 0; //@line 28868
 HEAP32[$31 >> 2] = $26; //@line 28869
 $32 = $ReallocAsyncCtx5 + 16 | 0; //@line 28870
 HEAP32[$32 >> 2] = $2; //@line 28871
 sp = STACKTOP; //@line 28872
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_40($0) {
 $0 = $0 | 0;
 var $2 = 0, $22 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 20565
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20567
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20569
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20571
 $9 = $2 + 1964 | 0; //@line 20574
 HEAP8[$9 >> 0] = HEAP8[$2 + 1182 >> 0] | 0; //@line 20575
 HEAP32[$2 + 1968 >> 2] = HEAP32[$2 + 1912 >> 2]; //@line 20579
 HEAP8[$2 + 1980 >> 0] = HEAP8[$2 + 1921 >> 0] | 0; //@line 20583
 HEAP8[$2 + 1981 >> 0] = HEAP8[$2 + 1173 >> 0] | 0; //@line 20587
 HEAP32[$2 + 1984 >> 2] = 1; //@line 20589
 $22 = $2 + 1982 | 0; //@line 20592
 HEAP8[$22 >> 0] = (HEAP32[$4 >> 2] | 0) == 2 & 1; //@line 20594
 HEAP8[$2 + 2010 >> 0] = HEAP8[$2 + 1965 >> 0] | 0; //@line 20598
 $27 = $2 + 4 | 0; //@line 20599
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 20600
 $28 = __ZN7LoRaPHY9rx_configEP18rx_config_params_t($27, $9) | 0; //@line 20601
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 427; //@line 20604
  $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 20605
  HEAP32[$29 >> 2] = $22; //@line 20606
  $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 20607
  HEAP32[$30 >> 2] = $2; //@line 20608
  $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 20609
  HEAP32[$31 >> 2] = $27; //@line 20610
  $32 = $ReallocAsyncCtx3 + 16 | 0; //@line 20611
  HEAP32[$32 >> 2] = $6; //@line 20612
  sp = STACKTOP; //@line 20613
  return;
 }
 HEAP8[___async_retval >> 0] = $28 & 1; //@line 20618
 ___async_unwind = 0; //@line 20619
 HEAP32[$ReallocAsyncCtx3 >> 2] = 427; //@line 20620
 $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 20621
 HEAP32[$29 >> 2] = $22; //@line 20622
 $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 20623
 HEAP32[$30 >> 2] = $2; //@line 20624
 $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 20625
 HEAP32[$31 >> 2] = $27; //@line 20626
 $32 = $ReallocAsyncCtx3 + 16 | 0; //@line 20627
 HEAP32[$32 >> 2] = $6; //@line 20628
 sp = STACKTOP; //@line 20629
 return;
}
function __ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 6050
 STACKTOP = STACKTOP + 16 | 0; //@line 6051
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6051
 $1 = sp; //@line 6052
 $3 = HEAP32[$0 + 3136 >> 2] | 0; //@line 6054
 $4 = $1 + 12 | 0; //@line 6055
 HEAP32[$1 >> 2] = 12; //@line 6056
 HEAP32[$1 + 4 >> 2] = 0; //@line 6058
 HEAP32[$1 + 8 >> 2] = $0; //@line 6060
 HEAP32[$4 >> 2] = 832; //@line 6061
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6062
 $5 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0_($3, $1, 1) | 0; //@line 6063
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 199; //@line 6066
  HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 6068
  HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 6070
  sp = STACKTOP; //@line 6071
  STACKTOP = sp; //@line 6072
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6074
 $8 = HEAP32[$4 >> 2] | 0; //@line 6075
 do {
  if ($8 | 0) {
   $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 6080
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 6081
   FUNCTION_TABLE_vi[$11 & 1023]($1); //@line 6082
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 200; //@line 6085
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 6087
    HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 6089
    sp = STACKTOP; //@line 6090
    STACKTOP = sp; //@line 6091
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6093
    break;
   }
  }
 } while (0);
 if ($5 | 0) {
  STACKTOP = sp; //@line 6100
  return;
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6102
 _mbed_assert_internal(13097, 12384, 468); //@line 6103
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 201; //@line 6106
  sp = STACKTOP; //@line 6107
  STACKTOP = sp; //@line 6108
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6110
 STACKTOP = sp; //@line 6111
 return;
}
function __ZN12LoRaWANStack26rx_error_interrupt_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 5946
 STACKTOP = STACKTOP + 16 | 0; //@line 5947
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5947
 $1 = sp; //@line 5948
 $3 = HEAP32[$0 + 3136 >> 2] | 0; //@line 5950
 $4 = $1 + 12 | 0; //@line 5951
 HEAP32[$1 >> 2] = 12; //@line 5952
 HEAP32[$1 + 4 >> 2] = 0; //@line 5954
 HEAP32[$1 + 8 >> 2] = $0; //@line 5956
 HEAP32[$4 >> 2] = 832; //@line 5957
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5958
 $5 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0_($3, $1, 0) | 0; //@line 5959
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 193; //@line 5962
  HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 5964
  HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 5966
  sp = STACKTOP; //@line 5967
  STACKTOP = sp; //@line 5968
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5970
 $8 = HEAP32[$4 >> 2] | 0; //@line 5971
 do {
  if ($8 | 0) {
   $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 5976
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 5977
   FUNCTION_TABLE_vi[$11 & 1023]($1); //@line 5978
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 194; //@line 5981
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 5983
    HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 5985
    sp = STACKTOP; //@line 5986
    STACKTOP = sp; //@line 5987
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5989
    break;
   }
  }
 } while (0);
 if ($5 | 0) {
  STACKTOP = sp; //@line 5996
  return;
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5998
 _mbed_assert_internal(13097, 12384, 453); //@line 5999
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 195; //@line 6002
  sp = STACKTOP; //@line 6003
  STACKTOP = sp; //@line 6004
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6006
 STACKTOP = sp; //@line 6007
 return;
}
function __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$016 = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $28 = 0, $5 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16016
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $28 = -1002; //@line 16020
  return $28 | 0; //@line 16021
 }
 $5 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 16024
 $6 = HEAP8[$1 >> 0] | 0; //@line 16025
 if (($6 & 255) > ($5 & 255)) {
  $28 = -1003; //@line 16028
  return $28 | 0; //@line 16029
 }
 if (!($6 << 24 >> 24)) {
  $28 = 0; //@line 16033
  return $28 | 0; //@line 16034
 }
 $9 = $1 + 4 | 0; //@line 16036
 $$016 = 0; //@line 16037
 while (1) {
  $13 = $$016 & 255; //@line 16039
  $14 = HEAP32[$0 >> 2] | 0; //@line 16040
  $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 60 >> 2] | 0; //@line 16043
  $18 = HEAP32[$9 >> 2] | 0; //@line 16044
  $21 = HEAP8[$18 + ($13 << 4) >> 0] | 0; //@line 16047
  $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 16048
  $22 = FUNCTION_TABLE_iiii[$17 & 31]($14, $18 + ($13 << 4) + 4 | 0, $21) | 0; //@line 16049
  if (___async) {
   label = 7; //@line 16052
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16055
  $12 = $$016 + 1 << 24 >> 24; //@line 16057
  if ($22 | 0) {
   $28 = $22; //@line 16059
   label = 9; //@line 16060
   break;
  }
  if (($12 & 255) < (HEAPU8[$1 >> 0] | 0)) {
   $$016 = $12; //@line 16066
  } else {
   $28 = 0; //@line 16068
   label = 9; //@line 16069
   break;
  }
 }
 if ((label | 0) == 7) {
  HEAP32[$AsyncCtx >> 2] = 470; //@line 16074
  HEAP8[$AsyncCtx + 4 >> 0] = $$016; //@line 16076
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 16078
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 16080
  HEAP32[$AsyncCtx + 16 >> 2] = $9; //@line 16082
  sp = STACKTOP; //@line 16083
  return 0; //@line 16084
 } else if ((label | 0) == 9) {
  return $28 | 0; //@line 16087
 }
 return 0; //@line 16089
}
function ___strchrnul($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $13 = 0, $17 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $31 = 0, $38 = 0, $39 = 0, $7 = 0;
 $2 = $1 & 255; //@line 11700
 L1 : do {
  if (!$2) {
   $$0 = $0 + (_strlen($0) | 0) | 0; //@line 11706
  } else {
   if (!($0 & 3)) {
    $$030$lcssa = $0; //@line 11712
   } else {
    $7 = $1 & 255; //@line 11714
    $$03039 = $0; //@line 11715
    while (1) {
     $10 = HEAP8[$$03039 >> 0] | 0; //@line 11717
     if ($10 << 24 >> 24 == 0 ? 1 : $10 << 24 >> 24 == $7 << 24 >> 24) {
      $$0 = $$03039; //@line 11722
      break L1;
     }
     $13 = $$03039 + 1 | 0; //@line 11725
     if (!($13 & 3)) {
      $$030$lcssa = $13; //@line 11730
      break;
     } else {
      $$03039 = $13; //@line 11733
     }
    }
   }
   $17 = Math_imul($2, 16843009) | 0; //@line 11737
   $18 = HEAP32[$$030$lcssa >> 2] | 0; //@line 11738
   L10 : do {
    if (!(($18 & -2139062144 ^ -2139062144) & $18 + -16843009)) {
     $$02936 = $$030$lcssa; //@line 11746
     $25 = $18; //@line 11746
     while (1) {
      $24 = $25 ^ $17; //@line 11748
      if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
       $$029$lcssa = $$02936; //@line 11755
       break L10;
      }
      $31 = $$02936 + 4 | 0; //@line 11758
      $25 = HEAP32[$31 >> 2] | 0; //@line 11759
      if (($25 & -2139062144 ^ -2139062144) & $25 + -16843009 | 0) {
       $$029$lcssa = $31; //@line 11768
       break;
      } else {
       $$02936 = $31; //@line 11766
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa; //@line 11773
    }
   } while (0);
   $38 = $1 & 255; //@line 11776
   $$1 = $$029$lcssa; //@line 11777
   while (1) {
    $39 = HEAP8[$$1 >> 0] | 0; //@line 11779
    if ($39 << 24 >> 24 == 0 ? 1 : $39 << 24 >> 24 == $38 << 24 >> 24) {
     $$0 = $$1; //@line 11785
     break;
    } else {
     $$1 = $$1 + 1 | 0; //@line 11788
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 11793
}
function __ZN12LoRaWANStack25process_reception_timeoutEb__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 3174
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3176
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3178
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3180
 if ((HEAP32[___async_retval >> 2] | 0) != 1) {
  return;
 }
 if (!(__ZN7LoRaMac10nwk_joinedEv($2) | 0)) {
  HEAP32[$4 >> 2] = 0; //@line 3189
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 3190
  __ZN12LoRaWANStack21process_joining_stateER14lorawan_status($6, $4); //@line 3191
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 203; //@line 3194
   $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 3195
   HEAP32[$10 >> 2] = $4; //@line 3196
   sp = STACKTOP; //@line 3197
   return;
  }
  ___async_unwind = 0; //@line 3200
  HEAP32[$ReallocAsyncCtx3 >> 2] = 203; //@line 3201
  $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 3202
  HEAP32[$10 >> 2] = $4; //@line 3203
  sp = STACKTOP; //@line 3204
  return;
 }
 __ZN7LoRaMac21post_process_mcps_reqEv($2); //@line 3207
 if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($2) | 0) >> 2] | 0) == 1) {
  if (__ZN7LoRaMac24continue_sending_processEv($2) | 0) {
   return;
  }
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 3217
 __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 3218
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 204; //@line 3221
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 3222
  HEAP32[$15 >> 2] = $2; //@line 3223
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 3224
  HEAP32[$16 >> 2] = $6; //@line 3225
  sp = STACKTOP; //@line 3226
  return;
 }
 ___async_unwind = 0; //@line 3229
 HEAP32[$ReallocAsyncCtx2 >> 2] = 204; //@line 3230
 $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 3231
 HEAP32[$15 >> 2] = $2; //@line 3232
 $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 3233
 HEAP32[$16 >> 2] = $6; //@line 3234
 sp = STACKTOP; //@line 3235
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_273($0) {
 $0 = $0 | 0;
 var $10 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 7279
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7283
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7285
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7287
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7289
 HEAP32[$4 + 1168 >> 2] = HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0 ? 2 : 1; //@line 7294
 if (!(HEAP8[$4 + 1175 >> 0] | 0)) {
  HEAP32[$4 + 2040 >> 2] = 0; //@line 7300
  HEAP32[$4 + 2076 >> 2] = 4; //@line 7302
  $28 = HEAP8[$4 + 1182 >> 0] | 0; //@line 7304
  HEAP8[$4 + 1183 >> 0] = $28; //@line 7306
  __ZN7LoRaPHY16set_last_tx_doneEhbj($4 + 4 | 0, $28, (HEAP8[$4 + 2360 >> 0] | 0) != 0, $10); //@line 7311
  HEAP32[$4 + 1780 >> 2] = $10; //@line 7313
  return;
 }
 $20 = HEAP32[$4 + 1772 >> 2] | 0; //@line 7318
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 7319
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($6, $4 + 1816 | 0, $20); //@line 7320
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 360; //@line 7323
  $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 7324
  HEAP32[$21 >> 2] = $8; //@line 7325
  $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 7326
  HEAP32[$22 >> 2] = $4; //@line 7327
  $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 7328
  HEAP32[$23 >> 2] = $6; //@line 7329
  $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 7330
  HEAP32[$24 >> 2] = $10; //@line 7331
  sp = STACKTOP; //@line 7332
  return;
 }
 ___async_unwind = 0; //@line 7335
 HEAP32[$ReallocAsyncCtx3 >> 2] = 360; //@line 7336
 $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 7337
 HEAP32[$21 >> 2] = $8; //@line 7338
 $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 7339
 HEAP32[$22 >> 2] = $4; //@line 7340
 $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 7341
 HEAP32[$23 >> 2] = $6; //@line 7342
 $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 7343
 HEAP32[$24 >> 2] = $10; //@line 7344
 sp = STACKTOP; //@line 7345
 return;
}
function __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$01315 = 0, $$016 = 0, $$1 = 0, $$114 = 0, $$sink = 0, $2 = 0, $23 = 0, $26 = 0, $27 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = HEAP8[$0 + 2 >> 0] | 0; //@line 16385
 if (!($2 << 24 >> 24)) {
  $$0$lcssa = 0; //@line 16388
  $26 = $$0$lcssa << 24 >> 24 != 0; //@line 16389
  $$sink = $26 & 1; //@line 16390
  HEAP8[$0 >> 0] = $$sink; //@line 16391
  $27 = $0 + 3 | 0; //@line 16392
  HEAP8[$27 >> 0] = $$0$lcssa; //@line 16393
  return;
 } else {
  $$01315 = 0; //@line 16396
  $$016 = 0; //@line 16396
  $5 = 0; //@line 16396
 }
 while (1) {
  $6 = HEAP8[$0 + 4 + $5 >> 0] | 0; //@line 16400
  switch ($6 << 24 >> 24) {
  case 5:
  case 10:
   {
    $7 = $$01315 + 1 << 24 >> 24; //@line 16403
    HEAP8[($$016 & 255) + ($0 + 132) >> 0] = $6; //@line 16407
    HEAP8[($$016 + 1 & 255) + ($0 + 132) >> 0] = HEAP8[($7 & 255) + ($0 + 4) >> 0] | 0; //@line 16414
    $$1 = $$016 + 2 << 24 >> 24; //@line 16415
    $$114 = $7; //@line 16415
    break;
   }
  case 8:
   {
    HEAP8[($$016 & 255) + ($0 + 132) >> 0] = 8; //@line 16422
    $$1 = $$016 + 1 << 24 >> 24; //@line 16423
    $$114 = $$01315; //@line 16423
    break;
   }
  case 6:
   {
    $$1 = $$016; //@line 16429
    $$114 = $5 + 2 & 255; //@line 16429
    break;
   }
  case 7:
  case 3:
   {
    $$1 = $$016; //@line 16434
    $$114 = $$01315 + 1 << 24 >> 24; //@line 16434
    break;
   }
  default:
   {
    $$1 = $$016; //@line 16438
    $$114 = $$01315; //@line 16438
   }
  }
  $23 = $$114 + 1 << 24 >> 24; //@line 16441
  if (($23 & 255) < ($2 & 255)) {
   $$01315 = $23; //@line 16445
   $$016 = $$1; //@line 16445
   $5 = $23 & 255; //@line 16445
  } else {
   $$0$lcssa = $$1; //@line 16447
   break;
  }
 }
 $26 = $$0$lcssa << 24 >> 24 != 0; //@line 16451
 $$sink = $26 & 1; //@line 16452
 HEAP8[$0 >> 0] = $$sink; //@line 16453
 $27 = $0 + 3 | 0; //@line 16454
 HEAP8[$27 >> 0] = $$0$lcssa; //@line 16455
 return;
}
function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $10 = 0, $12 = 0, $14 = 0, $22 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $9 = 0, label = 0;
 $3 = $2 + 16 | 0; //@line 11442
 $4 = HEAP32[$3 >> 2] | 0; //@line 11443
 if (!$4) {
  if (!(___towrite($2) | 0)) {
   $12 = HEAP32[$3 >> 2] | 0; //@line 11450
   label = 5; //@line 11451
  } else {
   $$1 = 0; //@line 11453
  }
 } else {
  $12 = $4; //@line 11457
  label = 5; //@line 11458
 }
 L5 : do {
  if ((label | 0) == 5) {
   $9 = $2 + 20 | 0; //@line 11462
   $10 = HEAP32[$9 >> 2] | 0; //@line 11463
   $14 = $10; //@line 11466
   if (($12 - $10 | 0) >>> 0 < $1 >>> 0) {
    $$1 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 31]($2, $0, $1) | 0; //@line 11471
    break;
   }
   L10 : do {
    if ((HEAP8[$2 + 75 >> 0] | 0) > -1) {
     $$038 = $1; //@line 11479
     while (1) {
      if (!$$038) {
       $$139 = 0; //@line 11483
       $$141 = $0; //@line 11483
       $$143 = $1; //@line 11483
       $31 = $14; //@line 11483
       break L10;
      }
      $22 = $$038 + -1 | 0; //@line 11486
      if ((HEAP8[$0 + $22 >> 0] | 0) == 10) {
       break;
      } else {
       $$038 = $22; //@line 11493
      }
     }
     $28 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 31]($2, $0, $$038) | 0; //@line 11498
     if ($28 >>> 0 < $$038 >>> 0) {
      $$1 = $28; //@line 11501
      break L5;
     }
     $$139 = $$038; //@line 11507
     $$141 = $0 + $$038 | 0; //@line 11507
     $$143 = $1 - $$038 | 0; //@line 11507
     $31 = HEAP32[$9 >> 2] | 0; //@line 11507
    } else {
     $$139 = 0; //@line 11509
     $$141 = $0; //@line 11509
     $$143 = $1; //@line 11509
     $31 = $14; //@line 11509
    }
   } while (0);
   _memcpy($31 | 0, $$141 | 0, $$143 | 0) | 0; //@line 11512
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $$143; //@line 11515
   $$1 = $$139 + $$143 | 0; //@line 11517
  }
 } while (0);
 return $$1 | 0; //@line 11520
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_80($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 22786
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22788
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22790
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22792
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22794
 HEAP8[$2 + 2532 >> 0] = 0; //@line 22796
 HEAP32[$4 >> 2] = 11; //@line 22797
 HEAP32[$6 >> 2] = -1011; //@line 22798
 $10 = $2 + 2872 | 0; //@line 22799
 HEAP32[$10 >> 2] = HEAP32[$10 >> 2] & -5; //@line 22802
 $13 = $2 + 2496 | 0; //@line 22803
 $14 = HEAP32[$13 >> 2] | 0; //@line 22804
 if (!$14) {
  return;
 }
 $18 = HEAP32[$2 + 3136 >> 2] | 0; //@line 22811
 $20 = HEAP32[$14 + 4 >> 2] | 0; //@line 22813
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 22814
 FUNCTION_TABLE_vii[$20 & 15]($8, $2 + 2484 | 0); //@line 22815
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 328; //@line 22818
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 22819
  HEAP32[$21 >> 2] = $13; //@line 22820
  $22 = $ReallocAsyncCtx + 8 | 0; //@line 22821
  HEAP32[$22 >> 2] = $8; //@line 22822
  $23 = $ReallocAsyncCtx + 12 | 0; //@line 22823
  HEAP32[$23 >> 2] = $18; //@line 22824
  $24 = $ReallocAsyncCtx + 16 | 0; //@line 22825
  HEAP32[$24 >> 2] = $8; //@line 22826
  sp = STACKTOP; //@line 22827
  return;
 }
 ___async_unwind = 0; //@line 22830
 HEAP32[$ReallocAsyncCtx >> 2] = 328; //@line 22831
 $21 = $ReallocAsyncCtx + 4 | 0; //@line 22832
 HEAP32[$21 >> 2] = $13; //@line 22833
 $22 = $ReallocAsyncCtx + 8 | 0; //@line 22834
 HEAP32[$22 >> 2] = $8; //@line 22835
 $23 = $ReallocAsyncCtx + 12 | 0; //@line 22836
 HEAP32[$23 >> 2] = $18; //@line 22837
 $24 = $ReallocAsyncCtx + 16 | 0; //@line 22838
 HEAP32[$24 >> 2] = $8; //@line 22839
 sp = STACKTOP; //@line 22840
 return;
}
function _mbedtls_cipher_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $22 = 0, $24 = 0, $25 = 0, $30 = 0, $32 = 0, $33 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 3122
 if (!$0) {
  $$0 = -24832; //@line 3125
  return $$0 | 0; //@line 3126
 }
 $5 = HEAP32[$0 >> 2] | 0; //@line 3128
 if (!$5) {
  $$0 = -24832; //@line 3131
  return $$0 | 0; //@line 3132
 }
 if (!(HEAP32[$5 + 20 >> 2] & 2)) {
  if ((HEAP32[$5 + 8 >> 2] | 0) != ($2 | 0)) {
   $$0 = -24832; //@line 3143
   return $$0 | 0; //@line 3144
  }
 }
 HEAP32[$0 + 4 >> 2] = $2; //@line 3148
 HEAP32[$0 + 8 >> 2] = $3; //@line 3150
 L11 : do {
  if (($3 | 0) != 1) {
   switch (HEAP32[$5 + 4 >> 2] | 0) {
   case 5:
   case 3:
    {
     break L11;
     break;
    }
   default:
    {}
   }
   if ($3 | 0) {
    $$0 = -24832; //@line 3166
    return $$0 | 0; //@line 3167
   }
   $30 = HEAP32[(HEAP32[$5 + 28 >> 2] | 0) + 20 >> 2] | 0; //@line 3172
   $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 3174
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3175
   $33 = FUNCTION_TABLE_iiii[$30 & 31]($32, $1, $2) | 0; //@line 3176
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 559; //@line 3179
    sp = STACKTOP; //@line 3180
    return 0; //@line 3181
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3183
   $$0 = $33; //@line 3184
   return $$0 | 0; //@line 3185
  }
 } while (0);
 $22 = HEAP32[(HEAP32[$5 + 28 >> 2] | 0) + 16 >> 2] | 0; //@line 3191
 $24 = HEAP32[$0 + 60 >> 2] | 0; //@line 3193
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3194
 $25 = FUNCTION_TABLE_iiii[$22 & 31]($24, $1, $2) | 0; //@line 3195
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 558; //@line 3198
  sp = STACKTOP; //@line 3199
  return 0; //@line 3200
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3202
 $$0 = $25; //@line 3203
 return $$0 | 0; //@line 3204
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_88($0) {
 $0 = $0 | 0;
 var $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 23349
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23351
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23353
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23355
 if (HEAP8[___async_retval >> 0] & 1) {
  return;
 }
 $8 = $4 + 2496 | 0; //@line 23362
 $9 = HEAP32[$8 >> 2] | 0; //@line 23363
 if (!$9) {
  HEAP32[$6 >> 2] = 2; //@line 23366
  return;
 }
 $13 = HEAP32[$4 + 3136 >> 2] | 0; //@line 23371
 $15 = HEAP32[$9 + 4 >> 2] | 0; //@line 23373
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 23374
 FUNCTION_TABLE_vii[$15 & 15]($2, $4 + 2484 | 0); //@line 23375
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 220; //@line 23378
  $16 = $ReallocAsyncCtx + 4 | 0; //@line 23379
  HEAP32[$16 >> 2] = $8; //@line 23380
  $17 = $ReallocAsyncCtx + 8 | 0; //@line 23381
  HEAP32[$17 >> 2] = $2; //@line 23382
  $18 = $ReallocAsyncCtx + 12 | 0; //@line 23383
  HEAP32[$18 >> 2] = $13; //@line 23384
  $19 = $ReallocAsyncCtx + 16 | 0; //@line 23385
  HEAP32[$19 >> 2] = $2; //@line 23386
  $20 = $ReallocAsyncCtx + 20 | 0; //@line 23387
  HEAP32[$20 >> 2] = $6; //@line 23388
  sp = STACKTOP; //@line 23389
  return;
 }
 ___async_unwind = 0; //@line 23392
 HEAP32[$ReallocAsyncCtx >> 2] = 220; //@line 23393
 $16 = $ReallocAsyncCtx + 4 | 0; //@line 23394
 HEAP32[$16 >> 2] = $8; //@line 23395
 $17 = $ReallocAsyncCtx + 8 | 0; //@line 23396
 HEAP32[$17 >> 2] = $2; //@line 23397
 $18 = $ReallocAsyncCtx + 12 | 0; //@line 23398
 HEAP32[$18 >> 2] = $13; //@line 23399
 $19 = $ReallocAsyncCtx + 16 | 0; //@line 23400
 HEAP32[$19 >> 2] = $2; //@line 23401
 $20 = $ReallocAsyncCtx + 20 | 0; //@line 23402
 HEAP32[$20 >> 2] = $6; //@line 23403
 sp = STACKTOP; //@line 23404
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $30 = 0, $34 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 21128
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21130
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21136
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21138
 $12 = HEAP8[$0 + 24 >> 0] & 1; //@line 21141
 $14 = HEAP8[$0 + 25 >> 0] & 1; //@line 21144
 $16 = HEAP8[$0 + 26 >> 0] | 0; //@line 21146
 $18 = HEAP8[$0 + 27 >> 0] | 0; //@line 21148
 $20 = HEAP32[$0 + 28 >> 2] | 0; //@line 21150
 $22 = HEAP32[$0 + 32 >> 2] | 0; //@line 21152
 $24 = HEAP32[$0 + 36 >> 2] | 0; //@line 21154
 $26 = HEAP32[$0 + 40 >> 2] | 0; //@line 21156
 $27 = HEAP32[$2 >> 2] | 0; //@line 21157
 $30 = HEAP32[(HEAP32[$27 >> 2] | 0) + 32 >> 2] | 0; //@line 21160
 $34 = HEAP32[(HEAP32[$0 + 12 >> 2] | 0) + ((HEAPU8[HEAP32[$0 + 8 >> 2] >> 0] | 0) * 12 | 0) >> 2] | 0; //@line 21164
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 21165
 FUNCTION_TABLE_vii[$30 & 15]($27, $34); //@line 21166
 if (!___async) {
  ___async_unwind = 0; //@line 21169
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 510; //@line 21171
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 21173
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 21175
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 21177
 HEAP8[$ReallocAsyncCtx2 + 16 >> 0] = $12 & 1; //@line 21180
 HEAP8[$ReallocAsyncCtx2 + 17 >> 0] = $14 & 1; //@line 21183
 HEAP8[$ReallocAsyncCtx2 + 18 >> 0] = $16; //@line 21185
 HEAP8[$ReallocAsyncCtx2 + 19 >> 0] = $18; //@line 21187
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $20; //@line 21189
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $22; //@line 21191
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $24; //@line 21193
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $26; //@line 21195
 sp = STACKTOP; //@line 21196
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_210($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $27 = 0, $30 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 3579
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3581
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3585
 $8 = $0 + 16 | 0; //@line 3587
 $10 = HEAP32[$8 >> 2] | 0; //@line 3589
 $13 = HEAP32[$8 + 4 >> 2] | 0; //@line 3592
 $15 = HEAP32[$0 + 24 >> 2] | 0; //@line 3594
 $17 = HEAP32[$0 + 28 >> 2] | 0; //@line 3596
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 3598
 __ZN4mbed6Ticker5setupEy($6, $10, $13); //@line 3599
 $18 = HEAP32[$2 >> 2] | 0; //@line 3600
 if ($18 | 0) {
  $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 3604
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 3605
  FUNCTION_TABLE_vi[$21 & 1023]($17); //@line 3606
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 85; //@line 3609
   $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 3610
   HEAP32[$22 >> 2] = $15; //@line 3611
   sp = STACKTOP; //@line 3612
   return;
  }
  ___async_unwind = 0; //@line 3615
  HEAP32[$ReallocAsyncCtx3 >> 2] = 85; //@line 3616
  $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 3617
  HEAP32[$22 >> 2] = $15; //@line 3618
  sp = STACKTOP; //@line 3619
  return;
 }
 $24 = HEAP32[$15 + 788 >> 2] | 0; //@line 3623
 if (!$24) {
  return;
 }
 $27 = HEAP32[$24 + 60 >> 2] | 0; //@line 3629
 if (!$27) {
  return;
 }
 $30 = HEAP32[$27 >> 2] | 0; //@line 3635
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 3636
 FUNCTION_TABLE_vi[$30 & 1023]($24 + 48 | 0); //@line 3637
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 86; //@line 3640
  sp = STACKTOP; //@line 3641
  return;
 }
 ___async_unwind = 0; //@line 3644
 HEAP32[$ReallocAsyncCtx4 >> 2] = 86; //@line 3645
 sp = STACKTOP; //@line 3646
 return;
}
function __ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$031 = 0.0, $10 = 0.0, $45 = 0.0, $6 = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 828
 STACKTOP = STACKTOP + 16 | 0; //@line 829
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 829
 $vararg_buffer1 = sp + 8 | 0; //@line 830
 _mbed_tracef(16, 10996, 11171, sp); //@line 832
 switch ($1 | 0) {
 case 0:
  {
   $$0 = 1; //@line 835
   HEAP32[$vararg_buffer1 >> 2] = $$0; //@line 836
   _mbed_tracef(16, 10996, 11183, $vararg_buffer1); //@line 837
   STACKTOP = sp; //@line 838
   return $$0 | 0; //@line 838
  }
 case 1:
  {
   switch (HEAP32[$0 + 752 >> 2] | 0) {
   case 7:
    {
     $$031 = 125.0e3; //@line 846
     break;
    }
   case 8:
    {
     $$031 = 25.0e4; //@line 850
     break;
    }
   case 9:
    {
     $$031 = 5.0e5; //@line 854
     break;
    }
   default:
    {
     $$031 = 0.0; //@line 858
    }
   }
   $6 = HEAP32[$0 + 756 >> 2] | 0; //@line 862
   $10 = 1.0 / ($$031 / +(1 << $6 | 0)); //@line 866
   $45 = +Math_ceil(+(+(((($2 & 255) << 3) + 28 - ($6 << 2) + (HEAP8[$0 + 766 >> 0] << 4 & 255) + (HEAP8[$0 + 764 >> 0] | 0 ? -20 : 0) | 0) >>> 0) / +($6 - (HEAP8[$0 + 760 >> 0] | 0 ? 2 : 0) << 2 >>> 0))) * +((HEAPU8[$0 + 761 >> 0] | 0) + 4 | 0); //@line 902
   $$0 = ~~+Math_floor(+(((+(HEAPU16[$0 + 762 >> 1] | 0) + 4.25) * $10 + $10 * (($45 > 0.0 ? $45 : 0.0) + 8.0)) * 1.0e3 + .999)) >>> 0; //@line 912
   HEAP32[$vararg_buffer1 >> 2] = $$0; //@line 913
   _mbed_tracef(16, 10996, 11183, $vararg_buffer1); //@line 914
   STACKTOP = sp; //@line 915
   return $$0 | 0; //@line 915
  }
 default:
  {
   $$0 = 0; //@line 919
   HEAP32[$vararg_buffer1 >> 2] = $$0; //@line 920
   _mbed_tracef(16, 10996, 11183, $vararg_buffer1); //@line 921
   STACKTOP = sp; //@line 922
   return $$0 | 0; //@line 922
  }
 }
 return 0; //@line 925
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_274($0) {
 $0 = $0 | 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 7352
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7354
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7356
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7358
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7360
 if (!(HEAP8[$2 + 1175 >> 0] | 0)) {
  HEAP32[$2 + 2040 >> 2] = 0; //@line 7366
  HEAP32[$2 + 2076 >> 2] = 4; //@line 7368
  $22 = HEAP8[$2 + 1182 >> 0] | 0; //@line 7370
  HEAP8[$2 + 1183 >> 0] = $22; //@line 7372
  __ZN7LoRaPHY16set_last_tx_doneEhbj($2 + 4 | 0, $22, (HEAP8[$2 + 2360 >> 0] | 0) != 0, $8); //@line 7377
  HEAP32[$2 + 1780 >> 2] = $8; //@line 7379
  return;
 }
 $14 = HEAP32[$2 + 1772 >> 2] | 0; //@line 7384
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 7385
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($4, $2 + 1816 | 0, $14); //@line 7386
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 360; //@line 7389
  $15 = $ReallocAsyncCtx3 + 4 | 0; //@line 7390
  HEAP32[$15 >> 2] = $6; //@line 7391
  $16 = $ReallocAsyncCtx3 + 8 | 0; //@line 7392
  HEAP32[$16 >> 2] = $2; //@line 7393
  $17 = $ReallocAsyncCtx3 + 12 | 0; //@line 7394
  HEAP32[$17 >> 2] = $4; //@line 7395
  $18 = $ReallocAsyncCtx3 + 16 | 0; //@line 7396
  HEAP32[$18 >> 2] = $8; //@line 7397
  sp = STACKTOP; //@line 7398
  return;
 }
 ___async_unwind = 0; //@line 7401
 HEAP32[$ReallocAsyncCtx3 >> 2] = 360; //@line 7402
 $15 = $ReallocAsyncCtx3 + 4 | 0; //@line 7403
 HEAP32[$15 >> 2] = $6; //@line 7404
 $16 = $ReallocAsyncCtx3 + 8 | 0; //@line 7405
 HEAP32[$16 >> 2] = $2; //@line 7406
 $17 = $ReallocAsyncCtx3 + 12 | 0; //@line 7407
 HEAP32[$17 >> 2] = $4; //@line 7408
 $18 = $ReallocAsyncCtx3 + 16 | 0; //@line 7409
 HEAP32[$18 >> 2] = $8; //@line 7410
 sp = STACKTOP; //@line 7411
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_153($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 29063
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29067
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29069
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29071
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29073
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29075
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29077
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29079
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 29082
 HEAP32[$4 + 16 >> 2] = HEAP32[$6 >> 2]; //@line 29085
 _equeue_event_dtor($4, 255); //@line 29086
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 29087
 $20 = _equeue_post($8, 256, $4) | 0; //@line 29088
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 257; //@line 29091
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 29092
  HEAP32[$21 >> 2] = $10; //@line 29093
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 29094
  HEAP32[$22 >> 2] = $12; //@line 29095
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 29096
  HEAP32[$23 >> 2] = $14; //@line 29097
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 29098
  HEAP32[$24 >> 2] = $16; //@line 29099
  sp = STACKTOP; //@line 29100
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 29104
 ___async_unwind = 0; //@line 29105
 HEAP32[$ReallocAsyncCtx6 >> 2] = 257; //@line 29106
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 29107
 HEAP32[$21 >> 2] = $10; //@line 29108
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 29109
 HEAP32[$22 >> 2] = $12; //@line 29110
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 29111
 HEAP32[$23 >> 2] = $14; //@line 29112
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 29113
 HEAP32[$24 >> 2] = $16; //@line 29114
 sp = STACKTOP; //@line 29115
 return;
}
function _mbedtls_gcm_setkey__async_cb_293($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 9247
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9249
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9251
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9253
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9255
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 9257
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 9261
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 9264
 dest = $2; //@line 9265
 stop = dest + 16 | 0; //@line 9265
 do {
  HEAP8[dest >> 0] = 0; //@line 9265
  dest = dest + 1 | 0; //@line 9265
 } while ((dest | 0) < (stop | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 9266
 $11 = _mbedtls_cipher_update($6, $2, 16, $2, $4) | 0; //@line 9267
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 578; //@line 9270
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 9271
  HEAP32[$12 >> 2] = $2; //@line 9272
  $13 = $ReallocAsyncCtx + 8 | 0; //@line 9273
  HEAP32[$13 >> 2] = $2; //@line 9274
  $14 = $ReallocAsyncCtx + 12 | 0; //@line 9275
  HEAP32[$14 >> 2] = $8; //@line 9276
  $15 = $ReallocAsyncCtx + 16 | 0; //@line 9277
  HEAP32[$15 >> 2] = $4; //@line 9278
  sp = STACKTOP; //@line 9279
  return;
 }
 HEAP32[___async_retval >> 2] = $11; //@line 9283
 ___async_unwind = 0; //@line 9284
 HEAP32[$ReallocAsyncCtx >> 2] = 578; //@line 9285
 $12 = $ReallocAsyncCtx + 4 | 0; //@line 9286
 HEAP32[$12 >> 2] = $2; //@line 9287
 $13 = $ReallocAsyncCtx + 8 | 0; //@line 9288
 HEAP32[$13 >> 2] = $2; //@line 9289
 $14 = $ReallocAsyncCtx + 12 | 0; //@line 9290
 HEAP32[$14 >> 2] = $8; //@line 9291
 $15 = $ReallocAsyncCtx + 16 | 0; //@line 9292
 HEAP32[$15 >> 2] = $4; //@line 9293
 sp = STACKTOP; //@line 9294
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_180($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 1504
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1508
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1510
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1512
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1514
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1516
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1518
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 1520
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 1523
 HEAP16[$4 + 16 >> 1] = HEAP16[$6 >> 1] | 0; //@line 1526
 _equeue_event_dtor($4, 307); //@line 1527
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 1528
 $20 = _equeue_post($8, 308, $4) | 0; //@line 1529
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 309; //@line 1532
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 1533
  HEAP32[$21 >> 2] = $10; //@line 1534
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 1535
  HEAP32[$22 >> 2] = $12; //@line 1536
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 1537
  HEAP32[$23 >> 2] = $14; //@line 1538
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 1539
  HEAP32[$24 >> 2] = $16; //@line 1540
  sp = STACKTOP; //@line 1541
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 1545
 ___async_unwind = 0; //@line 1546
 HEAP32[$ReallocAsyncCtx6 >> 2] = 309; //@line 1547
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 1548
 HEAP32[$21 >> 2] = $10; //@line 1549
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 1550
 HEAP32[$22 >> 2] = $12; //@line 1551
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 1552
 HEAP32[$23 >> 2] = $14; //@line 1553
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 1554
 HEAP32[$24 >> 2] = $16; //@line 1555
 sp = STACKTOP; //@line 1556
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_57($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $29 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 21630
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21632
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21634
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21636
 if (HEAP8[___async_retval >> 0] & 1) {
  $9 = (HEAP8[$2 >> 0] | 0) != 0; //@line 21642
  $11 = HEAP32[$4 + 1888 >> 2] | 0; //@line 21644
  $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 21645
  __ZN7LoRaPHY15setup_rx_windowEbj($6, $9, $11); //@line 21646
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 422; //@line 21649
   $12 = $ReallocAsyncCtx + 4 | 0; //@line 21650
   HEAP32[$12 >> 2] = $2; //@line 21651
   $13 = $ReallocAsyncCtx + 8 | 0; //@line 21652
   HEAP32[$13 >> 2] = $4; //@line 21653
   sp = STACKTOP; //@line 21654
   return;
  }
  ___async_unwind = 0; //@line 21657
  HEAP32[$ReallocAsyncCtx >> 2] = 422; //@line 21658
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 21659
  HEAP32[$12 >> 2] = $2; //@line 21660
  $13 = $ReallocAsyncCtx + 8 | 0; //@line 21661
  HEAP32[$13 >> 2] = $4; //@line 21662
  sp = STACKTOP; //@line 21663
  return;
 }
 $14 = $4 + 2040 | 0; //@line 21666
 HEAP32[$14 >> 2] = 2; //@line 21667
 HEAP32[$4 + 2076 >> 2] = 2; //@line 21669
 __ZN14LoRaMacCommand20clear_command_bufferEv($4 + 476 | 0); //@line 21671
 HEAP8[$4 + 2047 >> 0] = HEAP8[$4 + 1699 >> 0] | 0; //@line 21675
 HEAP8[$4 + 2046 >> 0] = 0; //@line 21677
 HEAP32[$4 + 2048 >> 2] = 0; //@line 21679
 HEAP8[$4 + 1180 >> 0] = 0; //@line 21681
 HEAP32[$14 >> 2] = 0; //@line 21682
 if ((HEAP32[$4 + 2036 >> 2] | 0) == 1) {
  return;
 }
 if (HEAP8[$4 + 1174 >> 0] | 0) {
  return;
 }
 $29 = $4 + 1760 | 0; //@line 21695
 HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + 1; //@line 21698
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_228($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 4950
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4954
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4956
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4958
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4960
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4962
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4964
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 4966
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 4969
 HEAP8[$4 + 16 >> 0] = HEAP8[$6 >> 0] | 0; //@line 4972
 _equeue_event_dtor($4, 209); //@line 4973
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 4974
 $20 = _equeue_post($8, 210, $4) | 0; //@line 4975
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 211; //@line 4978
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 4979
  HEAP32[$21 >> 2] = $10; //@line 4980
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 4981
  HEAP32[$22 >> 2] = $12; //@line 4982
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 4983
  HEAP32[$23 >> 2] = $14; //@line 4984
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 4985
  HEAP32[$24 >> 2] = $16; //@line 4986
  sp = STACKTOP; //@line 4987
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 4991
 ___async_unwind = 0; //@line 4992
 HEAP32[$ReallocAsyncCtx6 >> 2] = 211; //@line 4993
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 4994
 HEAP32[$21 >> 2] = $10; //@line 4995
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 4996
 HEAP32[$22 >> 2] = $12; //@line 4997
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 4998
 HEAP32[$23 >> 2] = $14; //@line 4999
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 5000
 HEAP32[$24 >> 2] = $16; //@line 5001
 sp = STACKTOP; //@line 5002
 return;
}
function _mbedtls_cipher_cmac_starts($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $13 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3725
 if (!$0) {
  $$0 = -24832; //@line 3728
  return $$0 | 0; //@line 3729
 }
 if (($1 | 0) == 0 | (HEAP32[$0 >> 2] | 0) == 0) {
  $$0 = -24832; //@line 3736
  return $$0 | 0; //@line 3737
 }
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 3739
 $7 = _mbedtls_cipher_setkey($0, $1, $2, 1) | 0; //@line 3740
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 569; //@line 3743
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3745
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 3747
  sp = STACKTOP; //@line 3748
  return 0; //@line 3749
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3751
 if ($7 | 0) {
  $$0 = $7; //@line 3754
  return $$0 | 0; //@line 3755
 }
 switch (HEAP32[HEAP32[$0 >> 2] >> 2] | 0) {
 case 36:
 case 4:
 case 3:
 case 2:
  {
   break;
  }
 default:
  {
   $$0 = -24832; //@line 3764
   return $$0 | 0; //@line 3765
  }
 }
 $13 = _calloc(1, 36) | 0; //@line 3768
 if (!$13) {
  $$0 = -24960; //@line 3771
  return $$0 | 0; //@line 3772
 }
 HEAP32[$0 + 64 >> 2] = $13; //@line 3775
 HEAP8[$13 >> 0] = 0; //@line 3777
 HEAP8[$13 + 1 >> 0] = 0; //@line 3779
 HEAP8[$13 + 2 >> 0] = 0; //@line 3781
 HEAP8[$13 + 3 >> 0] = 0; //@line 3783
 HEAP8[$13 + 4 >> 0] = 0; //@line 3785
 HEAP8[$13 + 5 >> 0] = 0; //@line 3787
 HEAP8[$13 + 6 >> 0] = 0; //@line 3789
 HEAP8[$13 + 7 >> 0] = 0; //@line 3791
 HEAP8[$13 + 8 >> 0] = 0; //@line 3793
 HEAP8[$13 + 9 >> 0] = 0; //@line 3795
 HEAP8[$13 + 10 >> 0] = 0; //@line 3797
 HEAP8[$13 + 11 >> 0] = 0; //@line 3799
 HEAP8[$13 + 12 >> 0] = 0; //@line 3801
 HEAP8[$13 + 13 >> 0] = 0; //@line 3803
 HEAP8[$13 + 14 >> 0] = 0; //@line 3805
 HEAP8[$13 + 15 >> 0] = 0; //@line 3806
 $$0 = 0; //@line 3807
 return $$0 | 0; //@line 3808
}
function _mbedtls_ccm_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $13 = 0, $18 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 2416
 $4 = _mbedtls_cipher_info_from_values($1, $3, 1) | 0; //@line 2417
 if (!$4) {
  $$0 = -13; //@line 2420
  return $$0 | 0; //@line 2421
 }
 if ((HEAP32[$4 + 24 >> 2] | 0) != 16) {
  $$0 = -13; //@line 2427
  return $$0 | 0; //@line 2428
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 2430
 _mbedtls_cipher_free($0); //@line 2431
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 552; //@line 2434
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 2436
  HEAP32[$AsyncCtx7 + 8 >> 2] = $4; //@line 2438
  HEAP32[$AsyncCtx7 + 12 >> 2] = $2; //@line 2440
  HEAP32[$AsyncCtx7 + 16 >> 2] = $3; //@line 2442
  sp = STACKTOP; //@line 2443
  return 0; //@line 2444
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 2446
 $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 2447
 $13 = _mbedtls_cipher_setup($0, $4) | 0; //@line 2448
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 553; //@line 2451
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 2453
  HEAP32[$AsyncCtx3 + 8 >> 2] = $2; //@line 2455
  HEAP32[$AsyncCtx3 + 12 >> 2] = $3; //@line 2457
  sp = STACKTOP; //@line 2458
  return 0; //@line 2459
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2461
 if ($13 | 0) {
  $$0 = $13; //@line 2464
  return $$0 | 0; //@line 2465
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2467
 $18 = _mbedtls_cipher_setkey($0, $2, $3, 1) | 0; //@line 2468
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 554; //@line 2471
  sp = STACKTOP; //@line 2472
  return 0; //@line 2473
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2475
 $$0 = $18; //@line 2476
 return $$0 | 0; //@line 2477
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_195($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 2456
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2458
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2460
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2462
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 2464
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2466
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2468
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2470
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 2472
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 2475
  $17 = _mbedtls_cipher_cmac_starts($2, $4, $6) | 0; //@line 2476
  if (!___async) {
   HEAP32[___async_retval >> 2] = $17; //@line 2480
   ___async_unwind = 0; //@line 2481
  }
  HEAP32[$ReallocAsyncCtx3 >> 2] = 490; //@line 2483
  HEAP16[$ReallocAsyncCtx3 + 4 >> 1] = $8; //@line 2485
  HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $2; //@line 2487
  HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $10; //@line 2489
  HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $12; //@line 2491
  HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $14; //@line 2493
  sp = STACKTOP; //@line 2494
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 2497
 _mbedtls_cipher_free($2); //@line 2498
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 493; //@line 2501
  $24 = $ReallocAsyncCtx5 + 4 | 0; //@line 2502
  HEAP32[$24 >> 2] = $AsyncRetVal; //@line 2503
  sp = STACKTOP; //@line 2504
  return;
 }
 ___async_unwind = 0; //@line 2507
 HEAP32[$ReallocAsyncCtx5 >> 2] = 493; //@line 2508
 $24 = $ReallocAsyncCtx5 + 4 | 0; //@line 2509
 HEAP32[$24 >> 2] = $AsyncRetVal; //@line 2510
 sp = STACKTOP; //@line 2511
 return;
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_285($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 8492
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8494
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8496
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8498
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8500
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8502
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8504
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8506
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 8508
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 8511
  $17 = _mbedtls_cipher_cmac_starts($4, $8, $10) | 0; //@line 8512
  if (!___async) {
   HEAP32[___async_retval >> 2] = $17; //@line 8516
   ___async_unwind = 0; //@line 8517
  }
  HEAP32[$ReallocAsyncCtx4 >> 2] = 484; //@line 8519
  HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 8521
  HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $4; //@line 8523
  HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $12; //@line 8525
  HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $14; //@line 8527
  HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $6; //@line 8529
  sp = STACKTOP; //@line 8530
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 8533
 _mbedtls_cipher_free($4); //@line 8534
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 488; //@line 8537
  $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 8538
  HEAP32[$24 >> 2] = $AsyncRetVal; //@line 8539
  sp = STACKTOP; //@line 8540
  return;
 }
 ___async_unwind = 0; //@line 8543
 HEAP32[$ReallocAsyncCtx6 >> 2] = 488; //@line 8544
 $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 8545
 HEAP32[$24 >> 2] = $AsyncRetVal; //@line 8546
 sp = STACKTOP; //@line 8547
 return;
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_82($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22878
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22882
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22884
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 22885
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 22889
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 22890
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 22891
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 330; //@line 22894
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 22895
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 22896
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 22897
   HEAP32[$11 >> 2] = $4; //@line 22898
   sp = STACKTOP; //@line 22899
   return;
  }
  ___async_unwind = 0; //@line 22902
  HEAP32[$ReallocAsyncCtx2 >> 2] = 330; //@line 22903
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 22904
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 22905
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 22906
  HEAP32[$11 >> 2] = $4; //@line 22907
  sp = STACKTOP; //@line 22908
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 22915
 _mbed_assert_internal(13097, 12384, 646); //@line 22916
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 331; //@line 22919
  $13 = $ReallocAsyncCtx6 + 4 | 0; //@line 22920
  HEAP32[$13 >> 2] = $4; //@line 22921
  sp = STACKTOP; //@line 22922
  return;
 }
 ___async_unwind = 0; //@line 22925
 HEAP32[$ReallocAsyncCtx6 >> 2] = 331; //@line 22926
 $13 = $ReallocAsyncCtx6 + 4 | 0; //@line 22927
 HEAP32[$13 >> 2] = $4; //@line 22928
 sp = STACKTOP; //@line 22929
 return;
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 181
 if (($1 | 0) == ($2 | 0)) {
  $21 = $1 + 16 | 0; //@line 184
  HEAP32[$21 >> 2] = 0; //@line 185
  return;
 }
 $4 = $1 + 12 | 0; //@line 188
 $5 = HEAP32[$4 >> 2] | 0; //@line 189
 do {
  if ($5 | 0) {
   $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 194
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 195
   FUNCTION_TABLE_vi[$8 & 1023]($1); //@line 196
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 543; //@line 199
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 201
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 203
    HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 205
    sp = STACKTOP; //@line 206
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 209
    break;
   }
  }
 } while (0);
 $12 = $2 + 12 | 0; //@line 214
 $13 = HEAP32[$12 >> 2] | 0; //@line 215
 do {
  if (!$13) {
   $20 = 0; //@line 219
  } else {
   $16 = HEAP32[$13 + 4 >> 2] | 0; //@line 222
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 223
   FUNCTION_TABLE_vii[$16 & 15]($1, $2); //@line 224
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 544; //@line 227
    HEAP32[$AsyncCtx3 + 4 >> 2] = $12; //@line 229
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 231
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 233
    sp = STACKTOP; //@line 234
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 237
    $20 = HEAP32[$12 >> 2] | 0; //@line 239
    break;
   }
  }
 } while (0);
 HEAP32[$4 >> 2] = $20; //@line 244
 $21 = $1 + 16 | 0; //@line 245
 HEAP32[$21 >> 2] = 0; //@line 246
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_148($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28733
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28737
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28739
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 28740
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 28744
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 28745
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 28746
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 241; //@line 28749
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 28750
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 28751
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 28752
   HEAP32[$11 >> 2] = $4; //@line 28753
   sp = STACKTOP; //@line 28754
   return;
  }
  ___async_unwind = 0; //@line 28757
  HEAP32[$ReallocAsyncCtx2 >> 2] = 241; //@line 28758
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 28759
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 28760
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 28761
  HEAP32[$11 >> 2] = $4; //@line 28762
  sp = STACKTOP; //@line 28763
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 28770
 _mbed_assert_internal(13097, 12384, 646); //@line 28771
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 242; //@line 28774
  $13 = $ReallocAsyncCtx12 + 4 | 0; //@line 28775
  HEAP32[$13 >> 2] = $4; //@line 28776
  sp = STACKTOP; //@line 28777
  return;
 }
 ___async_unwind = 0; //@line 28780
 HEAP32[$ReallocAsyncCtx12 >> 2] = 242; //@line 28781
 $13 = $ReallocAsyncCtx12 + 4 | 0; //@line 28782
 HEAP32[$13 >> 2] = $4; //@line 28783
 sp = STACKTOP; //@line 28784
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_146($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 28514
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28518
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28520
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 28521
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 28525
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 28526
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 28527
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 249; //@line 28530
   $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 28531
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 28532
   $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 28533
   HEAP32[$11 >> 2] = $4; //@line 28534
   sp = STACKTOP; //@line 28535
   return;
  }
  ___async_unwind = 0; //@line 28538
  HEAP32[$ReallocAsyncCtx6 >> 2] = 249; //@line 28539
  $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 28540
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 28541
  $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 28542
  HEAP32[$11 >> 2] = $4; //@line 28543
  sp = STACKTOP; //@line 28544
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 28551
 _mbed_assert_internal(13097, 12384, 646); //@line 28552
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 250; //@line 28555
  $13 = $ReallocAsyncCtx10 + 4 | 0; //@line 28556
  HEAP32[$13 >> 2] = $4; //@line 28557
  sp = STACKTOP; //@line 28558
  return;
 }
 ___async_unwind = 0; //@line 28561
 HEAP32[$ReallocAsyncCtx10 >> 2] = 250; //@line 28562
 $13 = $ReallocAsyncCtx10 + 4 | 0; //@line 28563
 HEAP32[$13 >> 2] = $4; //@line 28564
 sp = STACKTOP; //@line 28565
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_58($0) {
 $0 = $0 | 0;
 var $2 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 21705
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21707
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21709
 $7 = $2 + 1964 | 0; //@line 21712
 HEAP8[$7 >> 0] = HEAP8[$2 + 1182 >> 0] | 0; //@line 21713
 HEAP32[$2 + 1968 >> 2] = HEAP32[$2 + 1912 >> 2]; //@line 21717
 HEAP8[$2 + 1980 >> 0] = HEAP8[$2 + 1921 >> 0] | 0; //@line 21721
 HEAP8[$2 + 1981 >> 0] = HEAP8[$2 + 1173 >> 0] | 0; //@line 21725
 HEAP32[$2 + 1984 >> 2] = 1; //@line 21727
 $20 = $2 + 1982 | 0; //@line 21730
 HEAP8[$20 >> 0] = (HEAP32[$4 >> 2] | 0) == 2 & 1; //@line 21732
 HEAP8[$2 + 2010 >> 0] = HEAP8[$2 + 1965 >> 0] | 0; //@line 21736
 $25 = $2 + 4 | 0; //@line 21737
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 21738
 $26 = __ZN7LoRaPHY9rx_configEP18rx_config_params_t($25, $7) | 0; //@line 21739
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 421; //@line 21742
  $27 = $ReallocAsyncCtx3 + 4 | 0; //@line 21743
  HEAP32[$27 >> 2] = $20; //@line 21744
  $28 = $ReallocAsyncCtx3 + 8 | 0; //@line 21745
  HEAP32[$28 >> 2] = $2; //@line 21746
  $29 = $ReallocAsyncCtx3 + 12 | 0; //@line 21747
  HEAP32[$29 >> 2] = $25; //@line 21748
  sp = STACKTOP; //@line 21749
  return;
 }
 HEAP8[___async_retval >> 0] = $26 & 1; //@line 21754
 ___async_unwind = 0; //@line 21755
 HEAP32[$ReallocAsyncCtx3 >> 2] = 421; //@line 21756
 $27 = $ReallocAsyncCtx3 + 4 | 0; //@line 21757
 HEAP32[$27 >> 2] = $20; //@line 21758
 $28 = $ReallocAsyncCtx3 + 8 | 0; //@line 21759
 HEAP32[$28 >> 2] = $2; //@line 21760
 $29 = $ReallocAsyncCtx3 + 12 | 0; //@line 21761
 HEAP32[$29 >> 2] = $25; //@line 21762
 sp = STACKTOP; //@line 21763
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_111($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 25552
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25556
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 25558
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 25559
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 25563
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 25564
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 25565
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 229; //@line 25568
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 25569
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 25570
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 25571
   HEAP32[$11 >> 2] = $4; //@line 25572
   sp = STACKTOP; //@line 25573
   return;
  }
  ___async_unwind = 0; //@line 25576
  HEAP32[$ReallocAsyncCtx2 >> 2] = 229; //@line 25577
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 25578
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 25579
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 25580
  HEAP32[$11 >> 2] = $4; //@line 25581
  sp = STACKTOP; //@line 25582
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 25589
 _mbed_assert_internal(13097, 12384, 646); //@line 25590
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 230; //@line 25593
  $13 = $ReallocAsyncCtx12 + 4 | 0; //@line 25594
  HEAP32[$13 >> 2] = $4; //@line 25595
  sp = STACKTOP; //@line 25596
  return;
 }
 ___async_unwind = 0; //@line 25599
 HEAP32[$ReallocAsyncCtx12 >> 2] = 230; //@line 25600
 $13 = $ReallocAsyncCtx12 + 4 | 0; //@line 25601
 HEAP32[$13 >> 2] = $4; //@line 25602
 sp = STACKTOP; //@line 25603
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_110($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 25495
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25499
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 25501
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 25502
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 25506
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 25507
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 25508
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 233; //@line 25511
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 25512
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 25513
   $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 25514
   HEAP32[$11 >> 2] = $4; //@line 25515
   sp = STACKTOP; //@line 25516
   return;
  }
  ___async_unwind = 0; //@line 25519
  HEAP32[$ReallocAsyncCtx4 >> 2] = 233; //@line 25520
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 25521
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 25522
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 25523
  HEAP32[$11 >> 2] = $4; //@line 25524
  sp = STACKTOP; //@line 25525
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 25532
 _mbed_assert_internal(13097, 12384, 646); //@line 25533
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 234; //@line 25536
  $13 = $ReallocAsyncCtx11 + 4 | 0; //@line 25537
  HEAP32[$13 >> 2] = $4; //@line 25538
  sp = STACKTOP; //@line 25539
  return;
 }
 ___async_unwind = 0; //@line 25542
 HEAP32[$ReallocAsyncCtx11 >> 2] = 234; //@line 25543
 $13 = $ReallocAsyncCtx11 + 4 | 0; //@line 25544
 HEAP32[$13 >> 2] = $4; //@line 25545
 sp = STACKTOP; //@line 25546
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_109($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 25438
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25442
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 25444
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 25445
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 25449
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 25450
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 25451
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 237; //@line 25454
   $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 25455
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 25456
   $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 25457
   HEAP32[$11 >> 2] = $4; //@line 25458
   sp = STACKTOP; //@line 25459
   return;
  }
  ___async_unwind = 0; //@line 25462
  HEAP32[$ReallocAsyncCtx6 >> 2] = 237; //@line 25463
  $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 25464
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 25465
  $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 25466
  HEAP32[$11 >> 2] = $4; //@line 25467
  sp = STACKTOP; //@line 25468
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 25475
 _mbed_assert_internal(13097, 12384, 646); //@line 25476
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 238; //@line 25479
  $13 = $ReallocAsyncCtx10 + 4 | 0; //@line 25480
  HEAP32[$13 >> 2] = $4; //@line 25481
  sp = STACKTOP; //@line 25482
  return;
 }
 ___async_unwind = 0; //@line 25485
 HEAP32[$ReallocAsyncCtx10 >> 2] = 238; //@line 25486
 $13 = $ReallocAsyncCtx10 + 4 | 0; //@line 25487
 HEAP32[$13 >> 2] = $4; //@line 25488
 sp = STACKTOP; //@line 25489
 return;
}
function __ZN7LoRaMac15send_ongoing_txEv__async_cb($0) {
 $0 = $0 | 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2152
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2154
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2156
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2158
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2160
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 2162
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 2166
  return;
 }
 HEAP8[$2 + 2047 >> 0] = 0; //@line 2170
 HEAP8[$2 + 2046 >> 0] = 0; //@line 2172
 HEAP32[$2 + 2052 >> 2] = HEAP32[$2 + 1760 >> 2]; //@line 2176
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 2177
 $16 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 2178
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 439; //@line 2181
  $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 2182
  HEAP32[$17 >> 2] = $4; //@line 2183
  $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 2184
  HEAP32[$18 >> 2] = $8; //@line 2185
  $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 2186
  HEAP32[$19 >> 2] = $2; //@line 2187
  $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 2188
  HEAP32[$20 >> 2] = $6; //@line 2189
  sp = STACKTOP; //@line 2190
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 2194
 ___async_unwind = 0; //@line 2195
 HEAP32[$ReallocAsyncCtx2 >> 2] = 439; //@line 2196
 $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 2197
 HEAP32[$17 >> 2] = $4; //@line 2198
 $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 2199
 HEAP32[$18 >> 2] = $8; //@line 2200
 $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 2201
 HEAP32[$19 >> 2] = $2; //@line 2202
 $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 2203
 HEAP32[$20 >> 2] = $6; //@line 2204
 sp = STACKTOP; //@line 2205
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb_36($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 20269
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20271
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20273
 $AsyncRetVal = HEAP16[___async_retval >> 1] | 0; //@line 20275
 $6 = $2 + 2480 | 0; //@line 20276
 switch (HEAP32[$6 >> 2] | 0) {
 case 5:
 case 2:
  {
   break;
  }
 default:
  {
   if ((__ZNK7LoRaMac16get_device_classEv($4) | 0) != 2) {
    HEAP16[___async_retval >> 1] = -1e3 == 0 ? $AsyncRetVal : -1e3 & 65535; //@line 20290
    return;
   }
  }
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 20295
 $10 = __ZN7LoRaMac15send_ongoing_txEv($4) | 0; //@line 20296
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 347; //@line 20299
  $11 = $ReallocAsyncCtx + 4 | 0; //@line 20300
  HEAP32[$11 >> 2] = $2; //@line 20301
  $12 = $ReallocAsyncCtx + 8 | 0; //@line 20302
  HEAP32[$12 >> 2] = $4; //@line 20303
  $13 = $ReallocAsyncCtx + 12 | 0; //@line 20304
  HEAP32[$13 >> 2] = $6; //@line 20305
  $14 = $ReallocAsyncCtx + 16 | 0; //@line 20306
  HEAP16[$14 >> 1] = $AsyncRetVal; //@line 20307
  sp = STACKTOP; //@line 20308
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 20312
 ___async_unwind = 0; //@line 20313
 HEAP32[$ReallocAsyncCtx >> 2] = 347; //@line 20314
 $11 = $ReallocAsyncCtx + 4 | 0; //@line 20315
 HEAP32[$11 >> 2] = $2; //@line 20316
 $12 = $ReallocAsyncCtx + 8 | 0; //@line 20317
 HEAP32[$12 >> 2] = $4; //@line 20318
 $13 = $ReallocAsyncCtx + 12 | 0; //@line 20319
 HEAP32[$13 >> 2] = $6; //@line 20320
 $14 = $ReallocAsyncCtx + 16 | 0; //@line 20321
 HEAP16[$14 >> 1] = $AsyncRetVal; //@line 20322
 sp = STACKTOP; //@line 20323
 return;
}
function __ZN12LoRaWANStack20process_transmissionEv__async_cb($0) {
 $0 = $0 | 0;
 var $13 = 0, $14 = 0, $16 = 0, $21 = 0, $22 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 24024
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24030
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24032
 _mbed_tracef(16, 12482, 12786, HEAP32[$0 + 4 >> 2] | 0); //@line 24033
 $9 = $6 + 2480 | 0; //@line 24034
 switch (HEAP32[$9 >> 2] | 0) {
 case 1:
  {
   HEAP32[$9 >> 2] = 4; //@line 24038
   return;
  }
 case 8:
  {
   $13 = (HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($8) | 0) >> 2] | 0) == 1; //@line 24045
   $14 = $6 + 2872 | 0; //@line 24046
   $16 = HEAP32[$14 >> 2] & -18; //@line 24048
   if ($13) {
    HEAP32[$14 >> 2] = $16 | 1; //@line 24051
    HEAP32[$9 >> 2] = 9; //@line 24052
    return;
   }
   HEAP32[$14 >> 2] = $16 | 16; //@line 24056
   if ((__ZNK7LoRaMac16get_device_classEv($8) | 0) != 2) {
    return;
   }
   __ZN7LoRaMac21post_process_mcps_reqEv($8); //@line 24062
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 24063
   __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 24064
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 321; //@line 24067
    $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 24068
    HEAP32[$21 >> 2] = $8; //@line 24069
    $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 24070
    HEAP32[$22 >> 2] = $9; //@line 24071
    sp = STACKTOP; //@line 24072
    return;
   }
   ___async_unwind = 0; //@line 24075
   HEAP32[$ReallocAsyncCtx2 >> 2] = 321; //@line 24076
   $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 24077
   HEAP32[$21 >> 2] = $8; //@line 24078
   $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 24079
   HEAP32[$22 >> 2] = $9; //@line 24080
   sp = STACKTOP; //@line 24081
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_52($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21403
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21405
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21409
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21411
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21413
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21415
 $13 = HEAP32[$2 >> 2] | 0; //@line 21416
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 52 >> 2] | 0; //@line 21419
 $18 = HEAP16[HEAP32[$0 + 8 >> 2] >> 1] & 255; //@line 21421
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 21422
 $19 = FUNCTION_TABLE_iiii[$16 & 31]($13, $6, $18) | 0; //@line 21423
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 514; //@line 21426
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 21427
  HEAP32[$20 >> 2] = $8; //@line 21428
  $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 21429
  HEAP32[$21 >> 2] = $2; //@line 21430
  $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 21431
  HEAP32[$22 >> 2] = $10; //@line 21432
  $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 21433
  HEAP32[$23 >> 2] = $12; //@line 21434
  sp = STACKTOP; //@line 21435
  return;
 }
 HEAP32[___async_retval >> 2] = $19; //@line 21439
 ___async_unwind = 0; //@line 21440
 HEAP32[$ReallocAsyncCtx6 >> 2] = 514; //@line 21441
 $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 21442
 HEAP32[$20 >> 2] = $8; //@line 21443
 $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 21444
 HEAP32[$21 >> 2] = $2; //@line 21445
 $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 21446
 HEAP32[$22 >> 2] = $10; //@line 21447
 $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 21448
 HEAP32[$23 >> 2] = $12; //@line 21449
 sp = STACKTOP; //@line 21450
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_223($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 4233
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4237
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4239
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4241
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4243
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4245
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4247
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 4249
 $18 = HEAP8[$0 + 36 >> 0] & 1; //@line 4252
 $25 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 4253
 do {
  if ($25 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if ((HEAP32[$8 >> 2] | 0) == 1) {
     if ((HEAP32[$10 >> 2] | 0) == 1) {
      break;
     }
    }
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 4269
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($25, $12, $14, $16, $18); //@line 4270
    if (!___async) {
     ___async_unwind = 0; //@line 4273
    }
    HEAP32[$ReallocAsyncCtx2 >> 2] = 667; //@line 4275
    HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $25; //@line 4277
    HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 4279
    HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 4281
    HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 4283
    HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 4285
    HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 4287
    HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 4289
    HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 4291
    HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $18 & 1; //@line 4294
    sp = STACKTOP; //@line 4295
    return;
   }
  }
 } while (0);
 return;
}
function __ZN7LoRaMac16set_device_classERK14device_class_t__async_cb_200($0) {
 $0 = $0 | 0;
 var $2 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 2665
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2667
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2669
 $7 = $2 + 1964 | 0; //@line 2672
 HEAP8[$7 >> 0] = HEAP8[$2 + 1182 >> 0] | 0; //@line 2673
 HEAP32[$2 + 1968 >> 2] = HEAP32[$2 + 1912 >> 2]; //@line 2677
 HEAP8[$2 + 1980 >> 0] = HEAP8[$2 + 1921 >> 0] | 0; //@line 2681
 HEAP8[$2 + 1981 >> 0] = HEAP8[$2 + 1173 >> 0] | 0; //@line 2685
 HEAP32[$2 + 1984 >> 2] = 1; //@line 2687
 $20 = $2 + 1982 | 0; //@line 2690
 HEAP8[$20 >> 0] = (HEAP32[$4 >> 2] | 0) == 2 & 1; //@line 2692
 HEAP8[$2 + 2010 >> 0] = HEAP8[$2 + 1965 >> 0] | 0; //@line 2696
 $25 = $2 + 4 | 0; //@line 2697
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 2698
 $26 = __ZN7LoRaPHY9rx_configEP18rx_config_params_t($25, $7) | 0; //@line 2699
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 443; //@line 2702
  $27 = $ReallocAsyncCtx4 + 4 | 0; //@line 2703
  HEAP32[$27 >> 2] = $20; //@line 2704
  $28 = $ReallocAsyncCtx4 + 8 | 0; //@line 2705
  HEAP32[$28 >> 2] = $2; //@line 2706
  $29 = $ReallocAsyncCtx4 + 12 | 0; //@line 2707
  HEAP32[$29 >> 2] = $25; //@line 2708
  sp = STACKTOP; //@line 2709
  return;
 }
 HEAP8[___async_retval >> 0] = $26 & 1; //@line 2714
 ___async_unwind = 0; //@line 2715
 HEAP32[$ReallocAsyncCtx4 >> 2] = 443; //@line 2716
 $27 = $ReallocAsyncCtx4 + 4 | 0; //@line 2717
 HEAP32[$27 >> 2] = $20; //@line 2718
 $28 = $ReallocAsyncCtx4 + 8 | 0; //@line 2719
 HEAP32[$28 >> 2] = $2; //@line 2720
 $29 = $ReallocAsyncCtx4 + 12 | 0; //@line 2721
 HEAP32[$29 >> 2] = $25; //@line 2722
 sp = STACKTOP; //@line 2723
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_347($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 26466
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26468
 $3 = $2 + 1176 | 0; //@line 26469
 HEAP32[$3 >> 2] = 10224; //@line 26470
 __ZN4mbed6Ticker6detachEv($3); //@line 26471
 $5 = HEAP32[$2 + 1228 >> 2] | 0; //@line 26473
 if (!$5) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 26476
  __ZN4mbed10TimerEventD2Ev($3); //@line 26477
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 69; //@line 26480
   $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 26481
   HEAP32[$12 >> 2] = $2; //@line 26482
   sp = STACKTOP; //@line 26483
   return;
  }
  ___async_unwind = 0; //@line 26486
  HEAP32[$ReallocAsyncCtx7 >> 2] = 69; //@line 26487
  $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 26488
  HEAP32[$12 >> 2] = $2; //@line 26489
  sp = STACKTOP; //@line 26490
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 26495
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 26496
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1216 | 0); //@line 26497
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 68; //@line 26500
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 26501
   HEAP32[$10 >> 2] = $2; //@line 26502
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 26503
   HEAP32[$11 >> 2] = $3; //@line 26504
   sp = STACKTOP; //@line 26505
   return;
  }
  ___async_unwind = 0; //@line 26508
  HEAP32[$ReallocAsyncCtx2 >> 2] = 68; //@line 26509
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 26510
  HEAP32[$10 >> 2] = $2; //@line 26511
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 26512
  HEAP32[$11 >> 2] = $3; //@line 26513
  sp = STACKTOP; //@line 26514
  return;
 }
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_346($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 26411
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26413
 $3 = $2 + 1112 | 0; //@line 26414
 HEAP32[$3 >> 2] = 10224; //@line 26415
 __ZN4mbed6Ticker6detachEv($3); //@line 26416
 $5 = HEAP32[$2 + 1164 >> 2] | 0; //@line 26418
 if (!$5) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 26421
  __ZN4mbed10TimerEventD2Ev($3); //@line 26422
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 71; //@line 26425
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 26426
   HEAP32[$12 >> 2] = $2; //@line 26427
   sp = STACKTOP; //@line 26428
   return;
  }
  ___async_unwind = 0; //@line 26431
  HEAP32[$ReallocAsyncCtx6 >> 2] = 71; //@line 26432
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 26433
  HEAP32[$12 >> 2] = $2; //@line 26434
  sp = STACKTOP; //@line 26435
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 26440
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 26441
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1152 | 0); //@line 26442
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 70; //@line 26445
   $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 26446
   HEAP32[$10 >> 2] = $2; //@line 26447
   $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 26448
   HEAP32[$11 >> 2] = $3; //@line 26449
   sp = STACKTOP; //@line 26450
   return;
  }
  ___async_unwind = 0; //@line 26453
  HEAP32[$ReallocAsyncCtx3 >> 2] = 70; //@line 26454
  $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 26455
  HEAP32[$10 >> 2] = $2; //@line 26456
  $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 26457
  HEAP32[$11 >> 2] = $3; //@line 26458
  sp = STACKTOP; //@line 26459
  return;
 }
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_345($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26356
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26358
 $3 = $2 + 1048 | 0; //@line 26359
 HEAP32[$3 >> 2] = 10224; //@line 26360
 __ZN4mbed6Ticker6detachEv($3); //@line 26361
 $5 = HEAP32[$2 + 1100 >> 2] | 0; //@line 26363
 if (!$5) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 26366
  __ZN4mbed10TimerEventD2Ev($3); //@line 26367
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 73; //@line 26370
   $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 26371
   HEAP32[$12 >> 2] = $2; //@line 26372
   sp = STACKTOP; //@line 26373
   return;
  }
  ___async_unwind = 0; //@line 26376
  HEAP32[$ReallocAsyncCtx5 >> 2] = 73; //@line 26377
  $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 26378
  HEAP32[$12 >> 2] = $2; //@line 26379
  sp = STACKTOP; //@line 26380
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 26385
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 26386
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1088 | 0); //@line 26387
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 72; //@line 26390
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 26391
   HEAP32[$10 >> 2] = $3; //@line 26392
   $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 26393
   HEAP32[$11 >> 2] = $2; //@line 26394
   sp = STACKTOP; //@line 26395
   return;
  }
  ___async_unwind = 0; //@line 26398
  HEAP32[$ReallocAsyncCtx4 >> 2] = 72; //@line 26399
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 26400
  HEAP32[$10 >> 2] = $3; //@line 26401
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 26402
  HEAP32[$11 >> 2] = $2; //@line 26403
  sp = STACKTOP; //@line 26404
  return;
 }
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $19 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 11327
 $1 = $0 + 1699 | 0; //@line 11328
 $3 = (HEAP8[$1 >> 0] | 0) + 1 << 24 >> 24; //@line 11330
 HEAP8[$1 >> 0] = $3; //@line 11331
 if ($3 & 1) {
  $7 = $0 + 1877 | 0; //@line 11336
  HEAP8[$7 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa($0 + 4 | 0, HEAP8[$7 >> 0] | 0) | 0; //@line 11339
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11341
 $10 = __ZN7LoRaMac21handle_retransmissionEv($0) | 0; //@line 11342
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 366; //@line 11345
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 11347
  HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 11349
  sp = STACKTOP; //@line 11350
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11353
 if (!$10) {
  return;
 }
 __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 476 | 0); //@line 11359
 HEAP8[$0 + 1177 >> 0] = 0; //@line 11361
 HEAP8[$0 + 2046 >> 0] = 0; //@line 11363
 HEAP8[$0 + 2047 >> 0] = HEAP8[$1 >> 0] | 0; //@line 11366
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11367
 $19 = __ZN7LoRaMac21handle_retransmissionEv($0) | 0; //@line 11368
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 367; //@line 11371
  sp = STACKTOP; //@line 11372
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11375
 if (!$19) {
  return;
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11380
 _mbed_assert_internal(13213, 13106, 950); //@line 11381
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 368; //@line 11384
  sp = STACKTOP; //@line 11385
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 11388
 return;
}
function __ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_187($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 1977
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1981
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1983
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 1984
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 1988
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 1989
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 1990
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 301; //@line 1993
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 1994
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 1995
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 1996
   HEAP32[$11 >> 2] = $4; //@line 1997
   sp = STACKTOP; //@line 1998
   return;
  }
  ___async_unwind = 0; //@line 2001
  HEAP32[$ReallocAsyncCtx2 >> 2] = 301; //@line 2002
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 2003
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 2004
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 2005
  HEAP32[$11 >> 2] = $4; //@line 2006
  sp = STACKTOP; //@line 2007
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 2014
 _mbed_assert_internal(13097, 12384, 646); //@line 2015
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 302; //@line 2018
  $13 = $ReallocAsyncCtx4 + 4 | 0; //@line 2019
  HEAP32[$13 >> 2] = $4; //@line 2020
  sp = STACKTOP; //@line 2021
  return;
 }
 ___async_unwind = 0; //@line 2024
 HEAP32[$ReallocAsyncCtx4 >> 2] = 302; //@line 2025
 $13 = $ReallocAsyncCtx4 + 4 | 0; //@line 2026
 HEAP32[$13 >> 2] = $4; //@line 2027
 sp = STACKTOP; //@line 2028
 return;
}
function __ZN12LoRaWANStack7connectEv($0) {
 $0 = $0 | 0;
 var $$1 = 0, $10 = 0, $4 = 0, $9 = 0, $AsyncCtx = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP; //@line 10021
 STACKTOP = STACKTOP + 32 | 0; //@line 10022
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10022
 $vararg_buffer3 = sp + 16 | 0; //@line 10023
 if (!(HEAP32[$0 + 2480 >> 2] | 0)) {
  _mbed_tracef(2, 12482, 12832, sp); //@line 10030
  $$1 = -1012; //@line 10031
  STACKTOP = sp; //@line 10032
  return $$1 | 0; //@line 10032
 }
 $4 = __ZN7LoRaMac12prepare_joinEPK15lorawan_connectb($0, 0, 0) | 0; //@line 10034
 if ($4 | 0) {
  $$1 = $4; //@line 10037
  STACKTOP = sp; //@line 10038
  return $$1 | 0; //@line 10038
 }
 _mbed_tracef(16, 12482, 12892, sp + 8 | 0); //@line 10040
 $9 = HEAP32[$0 + 2540 >> 2] | 0; //@line 10044
 HEAP32[$vararg_buffer3 >> 2] = HEAP32[$0 + 2536 >> 2]; //@line 10045
 HEAP32[$vararg_buffer3 + 4 >> 2] = $9; //@line 10047
 _mbed_tracef(16, 12482, 12907, $vararg_buffer3); //@line 10048
 $10 = $0 + 2872 | 0; //@line 10049
 HEAP32[$10 >> 2] = HEAP32[$10 >> 2] & -9; //@line 10052
 HEAP32[$vararg_buffer3 >> 2] = 0; //@line 10053
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 10054
 __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status($0, $vararg_buffer3); //@line 10055
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 341; //@line 10058
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer3; //@line 10060
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer3; //@line 10062
  sp = STACKTOP; //@line 10063
  STACKTOP = sp; //@line 10064
  return 0; //@line 10064
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10066
 $$1 = HEAP32[$vararg_buffer3 >> 2] | 0; //@line 10068
 STACKTOP = sp; //@line 10069
 return $$1 | 0; //@line 10069
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_59($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 21769
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21771
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21773
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21775
 $7 = $2 + 2364 | 0; //@line 21776
 if ((HEAP32[$7 >> 2] | 0) == 2) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 21780
  __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $6); //@line 21781
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 420; //@line 21784
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 21785
   HEAP32[$10 >> 2] = $2; //@line 21786
   $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 21787
   HEAP32[$11 >> 2] = $7; //@line 21788
   sp = STACKTOP; //@line 21789
   return;
  }
  ___async_unwind = 0; //@line 21792
  HEAP32[$ReallocAsyncCtx4 >> 2] = 420; //@line 21793
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 21794
  HEAP32[$10 >> 2] = $2; //@line 21795
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 21796
  HEAP32[$11 >> 2] = $7; //@line 21797
  sp = STACKTOP; //@line 21798
  return;
 } else {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 21802
  __ZN7LoRaPHY18put_radio_to_sleepEv($2 + 4 | 0); //@line 21803
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 423; //@line 21806
   $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 21807
   HEAP32[$13 >> 2] = $2; //@line 21808
   sp = STACKTOP; //@line 21809
   return;
  }
  ___async_unwind = 0; //@line 21812
  HEAP32[$ReallocAsyncCtx2 >> 2] = 423; //@line 21813
  $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 21814
  HEAP32[$13 >> 2] = $2; //@line 21815
  sp = STACKTOP; //@line 21816
  return;
 }
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22947
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22949
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22951
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22953
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22955
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22957
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22959
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22961
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22963
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22965
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 22967
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 22969
 $25 = $4 + 1280 | 0; //@line 22970
 HEAP32[$25 >> 2] = 0; //@line 22971
 HEAP32[$25 + 4 >> 2] = 0; //@line 22971
 HEAP32[$25 + 8 >> 2] = 0; //@line 22971
 HEAP32[$25 + 12 >> 2] = 0; //@line 22971
 HEAP8[$4 + 1296 >> 0] = 1; //@line 22973
 HEAP32[$2 >> 2] = 620; //@line 22974
 HEAP32[$4 + 668 >> 2] = $6; //@line 22976
 HEAP32[$4 + 672 >> 2] = $8; //@line 22978
 HEAP32[$4 + 652 >> 2] = $10; //@line 22980
 HEAP32[$4 + 656 >> 2] = $12; //@line 22982
 HEAP32[$4 + 664 >> 2] = $14; //@line 22984
 HEAP32[$4 + 660 >> 2] = $16; //@line 22986
 HEAP32[$4 + 676 >> 2] = $18; //@line 22988
 HEAP32[$4 + 680 >> 2] = $20; //@line 22990
 HEAP32[$4 + 684 >> 2] = $22; //@line 22992
 HEAP32[$4 + 788 >> 2] = 0; //@line 22994
 if (($18 | 0) == -1) {
  $39 = _emscripten_asm_const_ii(7, $4 | 0) | 0; //@line 22997
  return;
 }
 _emscripten_asm_const_iii(5, HEAP32[$24 >> 2] | 0, 1) | 0; //@line 23001
 $39 = _emscripten_asm_const_ii(7, $4 | 0) | 0; //@line 23002
 return;
}
function ___overflow($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11328
 STACKTOP = STACKTOP + 16 | 0; //@line 11329
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11329
 $2 = sp; //@line 11330
 $3 = $1 & 255; //@line 11331
 HEAP8[$2 >> 0] = $3; //@line 11332
 $4 = $0 + 16 | 0; //@line 11333
 $5 = HEAP32[$4 >> 2] | 0; //@line 11334
 if (!$5) {
  if (!(___towrite($0) | 0)) {
   $12 = HEAP32[$4 >> 2] | 0; //@line 11341
   label = 4; //@line 11342
  } else {
   $$0 = -1; //@line 11344
  }
 } else {
  $12 = $5; //@line 11347
  label = 4; //@line 11348
 }
 do {
  if ((label | 0) == 4) {
   $9 = $0 + 20 | 0; //@line 11352
   $10 = HEAP32[$9 >> 2] | 0; //@line 11353
   if ($10 >>> 0 < $12 >>> 0) {
    $13 = $1 & 255; //@line 11356
    if (($13 | 0) != (HEAP8[$0 + 75 >> 0] | 0)) {
     HEAP32[$9 >> 2] = $10 + 1; //@line 11363
     HEAP8[$10 >> 0] = $3; //@line 11364
     $$0 = $13; //@line 11365
     break;
    }
   }
   $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 11370
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 11371
   $21 = FUNCTION_TABLE_iiii[$20 & 31]($0, $2, 1) | 0; //@line 11372
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 635; //@line 11375
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 11377
    sp = STACKTOP; //@line 11378
    STACKTOP = sp; //@line 11379
    return 0; //@line 11379
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 11381
   if (($21 | 0) == 1) {
    $$0 = HEAPU8[$2 >> 0] | 0; //@line 11386
   } else {
    $$0 = -1; //@line 11388
   }
  }
 } while (0);
 STACKTOP = sp; //@line 11392
 return $$0 | 0; //@line 11392
}
function __ZN7LoRaMac15open_rx2_windowEv__async_cb_290($0) {
 $0 = $0 | 0;
 var $19 = 0, $2 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $5 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8690
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8692
 $5 = $2 + 1964 | 0; //@line 8695
 HEAP8[$5 >> 0] = HEAP8[$2 + 1182 >> 0] | 0; //@line 8696
 HEAP32[$2 + 1968 >> 2] = HEAP32[$2 + 1912 >> 2]; //@line 8700
 HEAP8[$2 + 1980 >> 0] = HEAP8[$2 + 1921 >> 0] | 0; //@line 8704
 HEAP8[$2 + 1981 >> 0] = HEAP8[$2 + 1173 >> 0] | 0; //@line 8708
 HEAP32[$2 + 1984 >> 2] = 1; //@line 8710
 $19 = $2 + 1982 | 0; //@line 8714
 HEAP8[$19 >> 0] = (HEAP32[$2 + 2364 >> 2] | 0) == 2 & 1; //@line 8716
 HEAP8[$2 + 2010 >> 0] = HEAP8[$2 + 1965 >> 0] | 0; //@line 8720
 $24 = $2 + 4 | 0; //@line 8721
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 8722
 $25 = __ZN7LoRaPHY9rx_configEP18rx_config_params_t($24, $5) | 0; //@line 8723
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 364; //@line 8726
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 8727
  HEAP32[$26 >> 2] = $19; //@line 8728
  $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 8729
  HEAP32[$27 >> 2] = $2; //@line 8730
  $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 8731
  HEAP32[$28 >> 2] = $24; //@line 8732
  sp = STACKTOP; //@line 8733
  return;
 }
 HEAP8[___async_retval >> 0] = $25 & 1; //@line 8738
 ___async_unwind = 0; //@line 8739
 HEAP32[$ReallocAsyncCtx2 >> 2] = 364; //@line 8740
 $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 8741
 HEAP32[$26 >> 2] = $19; //@line 8742
 $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 8743
 HEAP32[$27 >> 2] = $2; //@line 8744
 $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 8745
 HEAP32[$28 >> 2] = $24; //@line 8746
 sp = STACKTOP; //@line 8747
 return;
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_284($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 8434
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8436
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8438
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8440
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8442
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8444
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 8446
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 8449
  $13 = _mbedtls_cipher_cmac_update($4, $2, 16) | 0; //@line 8450
  if (!___async) {
   HEAP32[___async_retval >> 2] = $13; //@line 8454
   ___async_unwind = 0; //@line 8455
  }
  HEAP32[$ReallocAsyncCtx2 >> 2] = 485; //@line 8457
  HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 8459
  HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 8461
  HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $8; //@line 8463
  HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $2; //@line 8465
  HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 8467
  sp = STACKTOP; //@line 8468
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 8471
 _mbedtls_cipher_free($4); //@line 8472
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 488; //@line 8475
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 8476
  HEAP32[$20 >> 2] = $AsyncRetVal; //@line 8477
  sp = STACKTOP; //@line 8478
  return;
 }
 ___async_unwind = 0; //@line 8481
 HEAP32[$ReallocAsyncCtx6 >> 2] = 488; //@line 8482
 $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 8483
 HEAP32[$20 >> 2] = $AsyncRetVal; //@line 8484
 sp = STACKTOP; //@line 8485
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_46($0) {
 $0 = $0 | 0;
 var $$0$off0 = 0, $$0$off0$expand_i1_val = 0, $10 = 0, $12 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20984
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20992
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20994
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20996
 if ((HEAP32[___async_retval >> 2] | 0) < (HEAP32[$0 + 4 >> 2] | 0)) {
  _mbed_tracef(16, 10996, 11162, HEAP32[$0 + 8 >> 2] | 0); //@line 21001
  $$0$off0 = 0; //@line 21002
 } else {
  $$0$off0 = 1; //@line 21004
 }
 $17 = HEAP32[(HEAP32[$8 >> 2] | 0) + 8 >> 2] | 0; //@line 21008
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 21009
 FUNCTION_TABLE_vi[$17 & 1023]($8); //@line 21010
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 63; //@line 21013
  $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 21014
  HEAP32[$18 >> 2] = $10; //@line 21015
  $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 21016
  HEAP32[$19 >> 2] = $12; //@line 21017
  $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 21018
  $$0$off0$expand_i1_val = $$0$off0 & 1; //@line 21019
  HEAP8[$20 >> 0] = $$0$off0$expand_i1_val; //@line 21020
  sp = STACKTOP; //@line 21021
  return;
 }
 ___async_unwind = 0; //@line 21024
 HEAP32[$ReallocAsyncCtx2 >> 2] = 63; //@line 21025
 $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 21026
 HEAP32[$18 >> 2] = $10; //@line 21027
 $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 21028
 HEAP32[$19 >> 2] = $12; //@line 21029
 $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 21030
 $$0$off0$expand_i1_val = $$0$off0 & 1; //@line 21031
 HEAP8[$20 >> 0] = $$0$off0$expand_i1_val; //@line 21032
 sp = STACKTOP; //@line 21033
 return;
}
function _equeue_cancel__async_cb($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$sink$in$i$i = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23221
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23223
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23225
 $7 = $2 + 156 | 0; //@line 23226
 _equeue_mutex_lock($7); //@line 23227
 $8 = $2 + 24 | 0; //@line 23228
 $9 = HEAP32[$8 >> 2] | 0; //@line 23229
 L3 : do {
  if (!$9) {
   $$02329$i$i = $8; //@line 23233
   label = 9; //@line 23234
  } else {
   $11 = HEAP32[$6 >> 2] | 0; //@line 23236
   $$025$i$i = $8; //@line 23237
   $13 = $9; //@line 23237
   while (1) {
    $12 = HEAP32[$13 >> 2] | 0; //@line 23239
    if ($12 >>> 0 >= $11 >>> 0) {
     break;
    }
    $15 = $13 + 8 | 0; //@line 23244
    $16 = HEAP32[$15 >> 2] | 0; //@line 23245
    if (!$16) {
     $$02329$i$i = $15; //@line 23248
     label = 9; //@line 23249
     break L3;
    } else {
     $$025$i$i = $15; //@line 23252
     $13 = $16; //@line 23252
    }
   }
   if (($12 | 0) == ($11 | 0)) {
    HEAP32[$4 + -24 >> 2] = $13; //@line 23258
    $$02330$i$i = $$025$i$i; //@line 23261
    $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 23261
   } else {
    $$02329$i$i = $$025$i$i; //@line 23263
    label = 9; //@line 23264
   }
  }
 } while (0);
 if ((label | 0) == 9) {
  HEAP32[$4 + -24 >> 2] = 0; //@line 23270
  $$02330$i$i = $$02329$i$i; //@line 23271
  $$sink$in$i$i = $$02329$i$i; //@line 23271
 }
 HEAP32[$4 + -28 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 23275
 HEAP32[$$02330$i$i >> 2] = $6; //@line 23276
 _equeue_mutex_unlock($7); //@line 23277
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $13 = 0, $16 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21424
 $1 = $0 + 4 | 0; //@line 21425
 $2 = HEAP32[$1 >> 2] | 0; //@line 21426
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 21429
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 21430
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 21431
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 536; //@line 21434
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 21436
  sp = STACKTOP; //@line 21437
  return 0; //@line 21438
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 21440
 $7 = HEAP32[$1 >> 2] | 0; //@line 21441
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] | 0; //@line 21444
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 21445
 $11 = FUNCTION_TABLE_ii[$10 & 15]($7) | 0; //@line 21446
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 537; //@line 21449
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 21451
  sp = STACKTOP; //@line 21452
  return 0; //@line 21453
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 21455
 $13 = HEAP32[$1 >> 2] | 0; //@line 21456
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 76 >> 2] | 0; //@line 21459
 $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 21460
 FUNCTION_TABLE_vi[$16 & 1023]($13); //@line 21461
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 538; //@line 21464
  HEAP32[$AsyncCtx5 + 4 >> 2] = $11; //@line 21466
  sp = STACKTOP; //@line 21467
  return 0; //@line 21468
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 21470
  return $11 | 0; //@line 21471
 }
 return 0; //@line 21473
}
function __ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $19 = 0, $2 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17845
 $2 = $0 + 260 | 0; //@line 17846
 if (($2 | 0) == ($1 | 0)) {
  return;
 }
 $4 = $0 + 272 | 0; //@line 17851
 $5 = HEAP32[$4 >> 2] | 0; //@line 17852
 do {
  if ($5 | 0) {
   $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 17857
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 17858
   FUNCTION_TABLE_vi[$8 & 1023]($2); //@line 17859
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 481; //@line 17862
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 17864
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 17866
    HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 17868
    sp = STACKTOP; //@line 17869
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 17872
    break;
   }
  }
 } while (0);
 $12 = $1 + 12 | 0; //@line 17877
 $13 = HEAP32[$12 >> 2] | 0; //@line 17878
 do {
  if (!$13) {
   $19 = 0; //@line 17882
  } else {
   $16 = HEAP32[$13 + 4 >> 2] | 0; //@line 17885
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 17886
   FUNCTION_TABLE_vii[$16 & 15]($2, $1); //@line 17887
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 482; //@line 17890
    HEAP32[$AsyncCtx3 + 4 >> 2] = $12; //@line 17892
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 17894
    sp = STACKTOP; //@line 17895
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17898
    $19 = HEAP32[$12 >> 2] | 0; //@line 17900
    break;
   }
  }
 } while (0);
 HEAP32[$4 >> 2] = $19; //@line 17905
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $14 = 0, $16 = 0, $19 = 0, $3 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21481
 $3 = $0 + 4 | 0; //@line 21482
 $4 = HEAP32[$3 >> 2] | 0; //@line 21483
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 72 >> 2] | 0; //@line 21486
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 21487
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 21488
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 539; //@line 21491
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 21493
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 21495
  HEAP8[$AsyncCtx + 12 >> 0] = $2; //@line 21497
  sp = STACKTOP; //@line 21498
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 21501
 $11 = HEAP32[$3 >> 2] | 0; //@line 21502
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 24 >> 2] | 0; //@line 21505
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 21506
 FUNCTION_TABLE_viii[$14 & 7]($11, $1, $2); //@line 21507
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 540; //@line 21510
  HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 21512
  sp = STACKTOP; //@line 21513
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 21516
 $16 = HEAP32[$3 >> 2] | 0; //@line 21517
 $19 = HEAP32[(HEAP32[$16 >> 2] | 0) + 76 >> 2] | 0; //@line 21520
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 21521
 FUNCTION_TABLE_vi[$19 & 1023]($16); //@line 21522
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 541; //@line 21525
  sp = STACKTOP; //@line 21526
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 21529
  return;
 }
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 20690
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20692
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20694
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 20696
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20698
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20702
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20704
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20708
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20710
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20712
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20714
 HEAP32[$8 >> 2] = 5; //@line 20715
 _mbed_tracef(16, 10996, 11053, $8); //@line 20716
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($12); //@line 20717
 HEAP32[$14 >> 2] = 5; //@line 20718
 _mbed_tracef(16, 10996, 11082, $14); //@line 20719
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 20720
 _wait_ms(1); //@line 20721
 if (!___async) {
  ___async_unwind = 0; //@line 20724
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 58; //@line 20726
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 20728
 HEAP16[$ReallocAsyncCtx7 + 8 >> 1] = $6; //@line 20730
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $4; //@line 20732
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $22; //@line 20734
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $24; //@line 20736
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $12; //@line 20738
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $18; //@line 20740
 HEAP32[$ReallocAsyncCtx7 + 32 >> 2] = $20; //@line 20742
 sp = STACKTOP; //@line 20743
 return;
}
function _fflush__async_cb_218($0) {
 $0 = $0 | 0;
 var $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $13 = 0, $16 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3857
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 3859
 $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 3861
 L3 : do {
  if (!$$02325) {
   $$024$lcssa = $AsyncRetVal; //@line 3865
  } else {
   $$02327 = $$02325; //@line 3867
   $$02426 = $AsyncRetVal; //@line 3867
   while (1) {
    if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
     $16 = ___lockfile($$02327) | 0; //@line 3874
    } else {
     $16 = 0; //@line 3876
    }
    if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
     break;
    }
    if ($16 | 0) {
     ___unlockfile($$02327); //@line 3888
    }
    $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 3891
    if (!$$023) {
     $$024$lcssa = $$02426; //@line 3894
     break L3;
    } else {
     $$02327 = $$023; //@line 3897
    }
   }
   $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 3900
   $13 = ___fflush_unlocked($$02327) | 0; //@line 3901
   if (!___async) {
    HEAP32[___async_retval >> 2] = $13; //@line 3905
    ___async_unwind = 0; //@line 3906
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 639; //@line 3908
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$02426; //@line 3910
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $16; //@line 3912
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327; //@line 3914
   sp = STACKTOP; //@line 3915
   return;
  }
 } while (0);
 ___ofl_unlock(); //@line 3919
 HEAP32[___async_retval >> 2] = $$024$lcssa; //@line 3921
 return;
}
function __ZN7LoRaMacD2Ev__async_cb_380($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 30074
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30076
 $4 = HEAP32[$2 + 1808 >> 2] | 0; //@line 30078
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 30083
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 30084
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 1796 | 0); //@line 30085
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 354; //@line 30088
   $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 30089
   HEAP32[$9 >> 2] = $2; //@line 30090
   sp = STACKTOP; //@line 30091
   return;
  }
  ___async_unwind = 0; //@line 30094
  HEAP32[$ReallocAsyncCtx4 >> 2] = 354; //@line 30095
  $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 30096
  HEAP32[$9 >> 2] = $2; //@line 30097
  sp = STACKTOP; //@line 30098
  return;
 }
 $11 = HEAP32[$2 + 748 >> 2] | 0; //@line 30102
 if (!$11) {
  __ZN12LoRaPHYEU868D2Ev($2 + 4 | 0); //@line 30106
  return;
 }
 $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 30111
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 30112
 FUNCTION_TABLE_vi[$15 & 1023]($2 + 736 | 0); //@line 30113
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 355; //@line 30116
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 30117
  HEAP32[$16 >> 2] = $2; //@line 30118
  sp = STACKTOP; //@line 30119
  return;
 }
 ___async_unwind = 0; //@line 30122
 HEAP32[$ReallocAsyncCtx5 >> 2] = 355; //@line 30123
 $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 30124
 HEAP32[$16 >> 2] = $2; //@line 30125
 sp = STACKTOP; //@line 30126
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv($0) {
 $0 = $0 | 0;
 var $10 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8534
 $2 = HEAP32[$0 + 16 >> 2] | 0; //@line 8536
 $4 = HEAP16[$0 + 20 >> 1] | 0; //@line 8538
 $6 = HEAP16[$0 + 22 >> 1] | 0; //@line 8540
 $8 = HEAP8[$0 + 24 >> 0] | 0; //@line 8542
 $9 = $0 + 12 | 0; //@line 8543
 $10 = HEAP32[$9 >> 2] | 0; //@line 8544
 do {
  if (!$10) {
   $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 8548
   _mbed_assert_internal(14973, 14978, 2830); //@line 8549
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 291; //@line 8552
    HEAP32[$AsyncCtx2 + 4 >> 2] = $9; //@line 8554
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 8556
    HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 8558
    HEAP16[$AsyncCtx2 + 16 >> 1] = $4; //@line 8560
    HEAP16[$AsyncCtx2 + 18 >> 1] = $6; //@line 8562
    HEAP8[$AsyncCtx2 + 20 >> 0] = $8; //@line 8564
    sp = STACKTOP; //@line 8565
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8568
    $19 = HEAP32[$9 >> 2] | 0; //@line 8570
    break;
   }
  } else {
   $19 = $10; //@line 8574
  }
 } while (0);
 $18 = HEAP32[$19 >> 2] | 0; //@line 8577
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8578
 FUNCTION_TABLE_viiiii[$18 & 7]($0, $2, $4, $6, $8); //@line 8579
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 292; //@line 8582
  sp = STACKTOP; //@line 8583
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8586
  return;
 }
}
function __ZN7LoRaPHY25setup_public_network_modeEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $14 = 0, $17 = 0, $2 = 0, $3 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21290
 $2 = $0 + 4 | 0; //@line 21291
 $3 = HEAP32[$2 >> 2] | 0; //@line 21292
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 72 >> 2] | 0; //@line 21295
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 21296
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 21297
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 529; //@line 21300
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 21302
  HEAP8[$AsyncCtx + 8 >> 0] = $1 & 1; //@line 21305
  sp = STACKTOP; //@line 21306
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 21309
 $9 = HEAP32[$2 >> 2] | 0; //@line 21310
 $12 = HEAP32[(HEAP32[$9 >> 2] | 0) + 48 >> 2] | 0; //@line 21313
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 21314
 FUNCTION_TABLE_vii[$12 & 15]($9, $1); //@line 21315
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 530; //@line 21318
  HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 21320
  sp = STACKTOP; //@line 21321
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 21324
 $14 = HEAP32[$2 >> 2] | 0; //@line 21325
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 76 >> 2] | 0; //@line 21328
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 21329
 FUNCTION_TABLE_vi[$17 & 1023]($14); //@line 21330
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 531; //@line 21333
  sp = STACKTOP; //@line 21334
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 21337
  return;
 }
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_354($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 26666
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26670
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26672
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26674
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26676
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26678
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26680
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 26683
 _equeue_event_delay($4, $6); //@line 26684
 _equeue_event_dtor($4, 267); //@line 26685
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 26686
 $16 = _equeue_post($8, 268, $4) | 0; //@line 26687
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 548; //@line 26690
  $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 26691
  HEAP32[$17 >> 2] = $10; //@line 26692
  $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 26693
  HEAP32[$18 >> 2] = $12; //@line 26694
  $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 26695
  HEAP32[$19 >> 2] = $14; //@line 26696
  sp = STACKTOP; //@line 26697
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 26701
 ___async_unwind = 0; //@line 26702
 HEAP32[$ReallocAsyncCtx4 >> 2] = 548; //@line 26703
 $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 26704
 HEAP32[$17 >> 2] = $10; //@line 26705
 $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 26706
 HEAP32[$18 >> 2] = $12; //@line 26707
 $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 26708
 HEAP32[$19 >> 2] = $14; //@line 26709
 sp = STACKTOP; //@line 26710
 return;
}
function _mbedtls_cipher_cmac_starts__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $27 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26944
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26946
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26948
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 26951
  $27 = ___async_retval; //@line 26952
  HEAP32[$27 >> 2] = $$0; //@line 26953
  return;
 }
 switch (HEAP32[HEAP32[$2 >> 2] >> 2] | 0) {
 case 36:
 case 4:
 case 3:
 case 2:
  {
   break;
  }
 default:
  {
   $$0 = -24832; //@line 26963
   $27 = ___async_retval; //@line 26964
   HEAP32[$27 >> 2] = $$0; //@line 26965
   return;
  }
 }
 $9 = _calloc(1, 36) | 0; //@line 26969
 if (!$9) {
  $$0 = -24960; //@line 26972
  $27 = ___async_retval; //@line 26973
  HEAP32[$27 >> 2] = $$0; //@line 26974
  return;
 }
 HEAP32[$4 + 64 >> 2] = $9; //@line 26978
 HEAP8[$9 >> 0] = 0; //@line 26980
 HEAP8[$9 + 1 >> 0] = 0; //@line 26982
 HEAP8[$9 + 2 >> 0] = 0; //@line 26984
 HEAP8[$9 + 3 >> 0] = 0; //@line 26986
 HEAP8[$9 + 4 >> 0] = 0; //@line 26988
 HEAP8[$9 + 5 >> 0] = 0; //@line 26990
 HEAP8[$9 + 6 >> 0] = 0; //@line 26992
 HEAP8[$9 + 7 >> 0] = 0; //@line 26994
 HEAP8[$9 + 8 >> 0] = 0; //@line 26996
 HEAP8[$9 + 9 >> 0] = 0; //@line 26998
 HEAP8[$9 + 10 >> 0] = 0; //@line 27000
 HEAP8[$9 + 11 >> 0] = 0; //@line 27002
 HEAP8[$9 + 12 >> 0] = 0; //@line 27004
 HEAP8[$9 + 13 >> 0] = 0; //@line 27006
 HEAP8[$9 + 14 >> 0] = 0; //@line 27008
 HEAP8[$9 + 15 >> 0] = 0; //@line 27009
 $$0 = 0; //@line 27010
 $27 = ___async_retval; //@line 27011
 HEAP32[$27 >> 2] = $$0; //@line 27012
 return;
}
function __ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_390($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 30394
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30398
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30400
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 30401
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 30405
  $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 30406
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 30407
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 191; //@line 30410
   $10 = $ReallocAsyncCtx + 4 | 0; //@line 30411
   HEAP32[$10 >> 2] = $4; //@line 30412
   $11 = $ReallocAsyncCtx + 8 | 0; //@line 30413
   HEAP32[$11 >> 2] = $AsyncRetVal; //@line 30414
   sp = STACKTOP; //@line 30415
   return;
  }
  ___async_unwind = 0; //@line 30418
  HEAP32[$ReallocAsyncCtx >> 2] = 191; //@line 30419
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 30420
  HEAP32[$10 >> 2] = $4; //@line 30421
  $11 = $ReallocAsyncCtx + 8 | 0; //@line 30422
  HEAP32[$11 >> 2] = $AsyncRetVal; //@line 30423
  sp = STACKTOP; //@line 30424
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 30431
 _mbed_assert_internal(13097, 12384, 445); //@line 30432
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 192; //@line 30435
  sp = STACKTOP; //@line 30436
  return;
 }
 ___async_unwind = 0; //@line 30439
 HEAP32[$ReallocAsyncCtx3 >> 2] = 192; //@line 30440
 sp = STACKTOP; //@line 30441
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_247($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 6119
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6121
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6123
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6125
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6127
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6129
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6131
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6133
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6135
 $18 = $8 + 12 | 0; //@line 6137
 HEAP32[$8 >> 2] = 450; //@line 6138
 HEAP32[$8 + 4 >> 2] = 0; //@line 6140
 HEAP32[$8 + 8 >> 2] = $2; //@line 6142
 HEAP32[$18 >> 2] = 844; //@line 6143
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(40) | 0; //@line 6144
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($6, $2 + 1796 | 0, $8); //@line 6145
 if (!___async) {
  ___async_unwind = 0; //@line 6148
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 451; //@line 6150
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $18; //@line 6152
 HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $2; //@line 6154
 HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $4; //@line 6156
 HEAP32[$ReallocAsyncCtx8 + 16 >> 2] = $6; //@line 6158
 HEAP32[$ReallocAsyncCtx8 + 20 >> 2] = $8; //@line 6160
 HEAP32[$ReallocAsyncCtx8 + 24 >> 2] = $10; //@line 6162
 HEAP32[$ReallocAsyncCtx8 + 28 >> 2] = $12; //@line 6164
 HEAP32[$ReallocAsyncCtx8 + 32 >> 2] = $14; //@line 6166
 HEAP32[$ReallocAsyncCtx8 + 36 >> 2] = $16; //@line 6168
 sp = STACKTOP; //@line 6169
 return;
}
function __ZN4mbed5Timer7read_msEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $21 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2860
 $2 = $0 + 16 | 0; //@line 2862
 $4 = HEAP32[$2 >> 2] | 0; //@line 2864
 $7 = HEAP32[$2 + 4 >> 2] | 0; //@line 2867
 if (!(HEAP32[$0 >> 2] | 0)) {
  $29 = 0; //@line 2871
  $30 = 0; //@line 2871
  $31 = _i64Add($29 | 0, $30 | 0, $4 | 0, $7 | 0) | 0; //@line 2872
  $32 = tempRet0; //@line 2873
  $33 = ___udivdi3($31 | 0, $32 | 0, 1e3, 0) | 0; //@line 2874
  $34 = tempRet0; //@line 2875
  return $33 | 0; //@line 2876
 }
 $11 = HEAP32[$0 + 24 >> 2] | 0; //@line 2879
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 2880
 $12 = _ticker_read_us($11) | 0; //@line 2881
 $13 = tempRet0; //@line 2882
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 114; //@line 2885
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2887
  $16 = $AsyncCtx + 8 | 0; //@line 2889
  HEAP32[$16 >> 2] = $4; //@line 2891
  HEAP32[$16 + 4 >> 2] = $7; //@line 2894
  sp = STACKTOP; //@line 2895
  return 0; //@line 2896
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2898
 $21 = $0 + 8 | 0; //@line 2900
 $27 = _i64Subtract($12 | 0, $13 | 0, HEAP32[$21 >> 2] | 0, HEAP32[$21 + 4 >> 2] | 0) | 0; //@line 2906
 $29 = $27; //@line 2908
 $30 = tempRet0; //@line 2908
 $31 = _i64Add($29 | 0, $30 | 0, $4 | 0, $7 | 0) | 0; //@line 2909
 $32 = tempRet0; //@line 2910
 $33 = ___udivdi3($31 | 0, $32 | 0, 1e3, 0) | 0; //@line 2911
 $34 = tempRet0; //@line 2912
 return $33 | 0; //@line 2913
}
function __ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_201($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2754
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2758
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 2760
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 2761
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 2765
  $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 2766
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 2767
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 200; //@line 2770
   $10 = $ReallocAsyncCtx + 4 | 0; //@line 2771
   HEAP32[$10 >> 2] = $4; //@line 2772
   $11 = $ReallocAsyncCtx + 8 | 0; //@line 2773
   HEAP32[$11 >> 2] = $AsyncRetVal; //@line 2774
   sp = STACKTOP; //@line 2775
   return;
  }
  ___async_unwind = 0; //@line 2778
  HEAP32[$ReallocAsyncCtx >> 2] = 200; //@line 2779
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 2780
  HEAP32[$10 >> 2] = $4; //@line 2781
  $11 = $ReallocAsyncCtx + 8 | 0; //@line 2782
  HEAP32[$11 >> 2] = $AsyncRetVal; //@line 2783
  sp = STACKTOP; //@line 2784
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 2791
 _mbed_assert_internal(13097, 12384, 468); //@line 2792
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 201; //@line 2795
  sp = STACKTOP; //@line 2796
  return;
 }
 ___async_unwind = 0; //@line 2799
 HEAP32[$ReallocAsyncCtx3 >> 2] = 201; //@line 2800
 sp = STACKTOP; //@line 2801
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4170
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4174
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4176
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4178
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4180
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4182
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4184
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 4187
 $21 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 4188
 if ($21 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   if ((HEAP32[$8 >> 2] | 0) != 1) {
    $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 4197
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($21, $10, $12, $14, $16); //@line 4198
    if (!___async) {
     ___async_unwind = 0; //@line 4201
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 668; //@line 4203
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $21; //@line 4205
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 4207
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 4209
    HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 4211
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 4213
    HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 4215
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 4217
    HEAP8[$ReallocAsyncCtx + 32 >> 0] = $16 & 1; //@line 4220
    sp = STACKTOP; //@line 4221
    return;
   }
  }
 }
 return;
}
function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0; //@line 74
 value = value & 255; //@line 76
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value; //@line 79
   ptr = ptr + 1 | 0; //@line 80
  }
  aligned_end = end & -4 | 0; //@line 83
  block_aligned_end = aligned_end - 64 | 0; //@line 84
  value4 = value | value << 8 | value << 16 | value << 24; //@line 85
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 88
   HEAP32[ptr + 4 >> 2] = value4; //@line 89
   HEAP32[ptr + 8 >> 2] = value4; //@line 90
   HEAP32[ptr + 12 >> 2] = value4; //@line 91
   HEAP32[ptr + 16 >> 2] = value4; //@line 92
   HEAP32[ptr + 20 >> 2] = value4; //@line 93
   HEAP32[ptr + 24 >> 2] = value4; //@line 94
   HEAP32[ptr + 28 >> 2] = value4; //@line 95
   HEAP32[ptr + 32 >> 2] = value4; //@line 96
   HEAP32[ptr + 36 >> 2] = value4; //@line 97
   HEAP32[ptr + 40 >> 2] = value4; //@line 98
   HEAP32[ptr + 44 >> 2] = value4; //@line 99
   HEAP32[ptr + 48 >> 2] = value4; //@line 100
   HEAP32[ptr + 52 >> 2] = value4; //@line 101
   HEAP32[ptr + 56 >> 2] = value4; //@line 102
   HEAP32[ptr + 60 >> 2] = value4; //@line 103
   ptr = ptr + 64 | 0; //@line 104
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 108
   ptr = ptr + 4 | 0; //@line 109
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value; //@line 114
  ptr = ptr + 1 | 0; //@line 115
 }
 return end - num | 0; //@line 117
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_356($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 26741
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26745
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26747
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26749
 $8 = (HEAP32[$0 + 4 >> 2] | 0) + 16 | 0; //@line 26750
 HEAP32[$8 >> 2] = $AsyncRetVal; //@line 26751
 $9 = HEAP32[$4 >> 2] | 0; //@line 26752
 if ($9 | 0) {
  $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 26756
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 26757
  FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 26758
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 549; //@line 26761
   $13 = $ReallocAsyncCtx3 + 4 | 0; //@line 26762
   HEAP32[$13 >> 2] = $8; //@line 26763
   sp = STACKTOP; //@line 26764
   return;
  }
  ___async_unwind = 0; //@line 26767
  HEAP32[$ReallocAsyncCtx3 >> 2] = 549; //@line 26768
  $13 = $ReallocAsyncCtx3 + 4 | 0; //@line 26769
  HEAP32[$13 >> 2] = $8; //@line 26770
  sp = STACKTOP; //@line 26771
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 26778
 _mbed_assert_internal(13650, 13668, 57); //@line 26779
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 550; //@line 26782
  sp = STACKTOP; //@line 26783
  return;
 }
 ___async_unwind = 0; //@line 26786
 HEAP32[$ReallocAsyncCtx6 >> 2] = 550; //@line 26787
 sp = STACKTOP; //@line 26788
 return;
}
function __ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_168($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 672
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 676
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 678
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 679
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 683
  $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 684
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 685
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 194; //@line 688
   $10 = $ReallocAsyncCtx + 4 | 0; //@line 689
   HEAP32[$10 >> 2] = $4; //@line 690
   $11 = $ReallocAsyncCtx + 8 | 0; //@line 691
   HEAP32[$11 >> 2] = $AsyncRetVal; //@line 692
   sp = STACKTOP; //@line 693
   return;
  }
  ___async_unwind = 0; //@line 696
  HEAP32[$ReallocAsyncCtx >> 2] = 194; //@line 697
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 698
  HEAP32[$10 >> 2] = $4; //@line 699
  $11 = $ReallocAsyncCtx + 8 | 0; //@line 700
  HEAP32[$11 >> 2] = $AsyncRetVal; //@line 701
  sp = STACKTOP; //@line 702
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 709
 _mbed_assert_internal(13097, 12384, 453); //@line 710
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 195; //@line 713
  sp = STACKTOP; //@line 714
  return;
 }
 ___async_unwind = 0; //@line 717
 HEAP32[$ReallocAsyncCtx3 >> 2] = 195; //@line 718
 sp = STACKTOP; //@line 719
 return;
}
function _equeue_create($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$033$i = 0, $$034$i = 0, $2 = 0, $21 = 0, $23 = 0, $27 = 0, $30 = 0, $5 = 0, $6 = 0;
 $2 = _malloc($1) | 0; //@line 3032
 if (!$2) {
  $$0 = -1; //@line 3035
  return $$0 | 0; //@line 3036
 }
 HEAP32[$0 + 12 >> 2] = $2; //@line 3039
 $5 = $0 + 20 | 0; //@line 3040
 HEAP32[$5 >> 2] = 0; //@line 3041
 $6 = $0 + 16 | 0; //@line 3042
 HEAP32[$6 >> 2] = 0; //@line 3043
 if ($1 | 0) {
  $$034$i = $1; //@line 3046
  $23 = 0; //@line 3046
  do {
   $23 = $23 + 1 | 0; //@line 3048
   $$034$i = $$034$i >>> 1; //@line 3049
  } while (($$034$i | 0) != 0);
  HEAP32[$6 >> 2] = $23; //@line 3057
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 3060
 HEAP32[$0 + 28 >> 2] = $1; //@line 3062
 HEAP32[$0 + 32 >> 2] = $2; //@line 3064
 HEAP32[$0 >> 2] = 0; //@line 3065
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 3068
 HEAP8[$0 + 9 >> 0] = 0; //@line 3070
 HEAP8[$0 + 8 >> 0] = 0; //@line 3072
 HEAP8[$0 + 36 >> 0] = 0; //@line 3074
 HEAP32[$0 + 40 >> 2] = 0; //@line 3076
 HEAP32[$0 + 44 >> 2] = 0; //@line 3078
 HEAP8[$0 + 184 >> 0] = 0; //@line 3080
 $21 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 3082
 if (($21 | 0) < 0) {
  $$033$i = $21; //@line 3085
 } else {
  $27 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 3088
  if (($27 | 0) < 0) {
   $$033$i = $27; //@line 3091
  } else {
   $30 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 3094
   $$033$i = ($30 | 0) < 0 ? $30 : 0; //@line 3097
  }
 }
 HEAP32[$5 >> 2] = $2; //@line 3100
 $$0 = $$033$i; //@line 3101
 return $$0 | 0; //@line 3102
}
function _fflush__async_cb($0) {
 $0 = $0 | 0;
 var $$02327$reg2mem$0 = 0, $$1 = 0, $$reg2mem$0 = 0, $17 = 0, $20 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3758
 $$02327$reg2mem$0 = HEAP32[$0 + 12 >> 2] | 0; //@line 3768
 $$1 = HEAP32[___async_retval >> 2] | HEAP32[$0 + 4 >> 2]; //@line 3768
 $$reg2mem$0 = HEAP32[$0 + 8 >> 2] | 0; //@line 3768
 while (1) {
  if ($$reg2mem$0 | 0) {
   ___unlockfile($$02327$reg2mem$0); //@line 3772
  }
  $$02327$reg2mem$0 = HEAP32[$$02327$reg2mem$0 + 56 >> 2] | 0; //@line 3775
  if (!$$02327$reg2mem$0) {
   label = 12; //@line 3778
   break;
  }
  if ((HEAP32[$$02327$reg2mem$0 + 76 >> 2] | 0) > -1) {
   $20 = ___lockfile($$02327$reg2mem$0) | 0; //@line 3786
  } else {
   $20 = 0; //@line 3788
  }
  if ((HEAP32[$$02327$reg2mem$0 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327$reg2mem$0 + 28 >> 2] | 0) >>> 0) {
   break;
  } else {
   $$reg2mem$0 = $20; //@line 3798
  }
 }
 if ((label | 0) == 12) {
  ___ofl_unlock(); //@line 3802
  HEAP32[___async_retval >> 2] = $$1; //@line 3804
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 3807
 $17 = ___fflush_unlocked($$02327$reg2mem$0) | 0; //@line 3808
 if (!___async) {
  HEAP32[___async_retval >> 2] = $17; //@line 3812
  ___async_unwind = 0; //@line 3813
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 639; //@line 3815
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$1; //@line 3817
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $20; //@line 3819
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327$reg2mem$0; //@line 3821
 sp = STACKTOP; //@line 3822
 return;
}
function __ZN7LoRaPHY20put_radio_to_standbyEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $12 = 0, $15 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21237
 $1 = $0 + 4 | 0; //@line 21238
 $2 = HEAP32[$1 >> 2] | 0; //@line 21239
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 21242
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 21243
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 21244
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 526; //@line 21247
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 21249
  sp = STACKTOP; //@line 21250
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 21253
 $7 = HEAP32[$1 >> 2] | 0; //@line 21254
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0; //@line 21257
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 21258
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 21259
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 527; //@line 21262
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 21264
  sp = STACKTOP; //@line 21265
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 21268
 $12 = HEAP32[$1 >> 2] | 0; //@line 21269
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 21272
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 21273
 FUNCTION_TABLE_vi[$15 & 1023]($12); //@line 21274
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 528; //@line 21277
  sp = STACKTOP; //@line 21278
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 21281
  return;
 }
}
function __ZN7LoRaPHY18put_radio_to_sleepEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $12 = 0, $15 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21185
 $1 = $0 + 4 | 0; //@line 21186
 $2 = HEAP32[$1 >> 2] | 0; //@line 21187
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 21190
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 21191
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 21192
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 523; //@line 21195
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 21197
  sp = STACKTOP; //@line 21198
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 21201
 $7 = HEAP32[$1 >> 2] | 0; //@line 21202
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0; //@line 21205
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 21206
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 21207
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 524; //@line 21210
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 21212
  sp = STACKTOP; //@line 21213
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 21216
 $12 = HEAP32[$1 >> 2] | 0; //@line 21217
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 21220
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 21221
 FUNCTION_TABLE_vi[$15 & 1023]($12); //@line 21222
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 525; //@line 21225
  sp = STACKTOP; //@line 21226
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 21229
  return;
 }
}
function ___fflush_unlocked__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 1249
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1251
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1253
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1255
 do {
  if (!(HEAP32[$2 >> 2] | 0)) {
   $$0 = -1; //@line 1260
  } else {
   $9 = $4 + 4 | 0; //@line 1262
   $10 = HEAP32[$9 >> 2] | 0; //@line 1263
   $11 = $4 + 8 | 0; //@line 1264
   $12 = HEAP32[$11 >> 2] | 0; //@line 1265
   if ($10 >>> 0 >= $12 >>> 0) {
    HEAP32[$4 + 16 >> 2] = 0; //@line 1269
    HEAP32[$6 >> 2] = 0; //@line 1270
    HEAP32[$2 >> 2] = 0; //@line 1271
    HEAP32[$11 >> 2] = 0; //@line 1272
    HEAP32[$9 >> 2] = 0; //@line 1273
    $$0 = 0; //@line 1274
    break;
   }
   $18 = HEAP32[$4 + 40 >> 2] | 0; //@line 1281
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 1282
   FUNCTION_TABLE_iiii[$18 & 31]($4, $10 - $12 | 0, 1) | 0; //@line 1283
   if (!___async) {
    ___async_unwind = 0; //@line 1286
   }
   HEAP32[$ReallocAsyncCtx2 >> 2] = 641; //@line 1288
   HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 1290
   HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 1292
   HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 1294
   HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $11; //@line 1296
   HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $9; //@line 1298
   sp = STACKTOP; //@line 1299
   return;
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 1304
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2042
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2044
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2049
 $7 = HEAP32[$2 >> 2] | 0; //@line 2050
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 28 >> 2] | 0; //@line 2053
 if (HEAP8[$0 + 8 >> 0] & 1) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 2055
  FUNCTION_TABLE_vii[$10 & 15]($7, 0); //@line 2056
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 534; //@line 2059
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 2060
   HEAP32[$12 >> 2] = $2; //@line 2061
   sp = STACKTOP; //@line 2062
   return;
  }
  ___async_unwind = 0; //@line 2065
  HEAP32[$ReallocAsyncCtx3 >> 2] = 534; //@line 2066
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 2067
  HEAP32[$12 >> 2] = $2; //@line 2068
  sp = STACKTOP; //@line 2069
  return;
 } else {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 2072
  FUNCTION_TABLE_vii[$10 & 15]($7, $6); //@line 2073
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 533; //@line 2076
   $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 2077
   HEAP32[$11 >> 2] = $2; //@line 2078
   sp = STACKTOP; //@line 2079
   return;
  }
  ___async_unwind = 0; //@line 2082
  HEAP32[$ReallocAsyncCtx2 >> 2] = 533; //@line 2083
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 2084
  HEAP32[$11 >> 2] = $2; //@line 2085
  sp = STACKTOP; //@line 2086
  return;
 }
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 30231
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30235
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30237
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30239
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30241
 $11 = $4 + 12 | 0; //@line 30243
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 30244
 $14 = HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($6) | 0) + 16 >> 0] | 0; //@line 30247
 $17 = HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($6) | 0) + 17 >> 0] | 0; //@line 30250
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 30251
 $18 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($8, $4, $14, $17) | 0; //@line 30252
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 294; //@line 30255
  $19 = $ReallocAsyncCtx4 + 4 | 0; //@line 30256
  HEAP32[$19 >> 2] = $11; //@line 30257
  $20 = $ReallocAsyncCtx4 + 8 | 0; //@line 30258
  HEAP32[$20 >> 2] = $10; //@line 30259
  sp = STACKTOP; //@line 30260
  return;
 }
 HEAP32[___async_retval >> 2] = $18; //@line 30264
 ___async_unwind = 0; //@line 30265
 HEAP32[$ReallocAsyncCtx4 >> 2] = 294; //@line 30266
 $19 = $ReallocAsyncCtx4 + 4 | 0; //@line 30267
 HEAP32[$19 >> 2] = $11; //@line 30268
 $20 = $ReallocAsyncCtx4 + 8 | 0; //@line 30269
 HEAP32[$20 >> 2] = $10; //@line 30270
 sp = STACKTOP; //@line 30271
 return;
}
function __ZN12LoRaWANStackD2Ev__async_cb_306($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 11030
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11032
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11034
 $6 = HEAP32[$2 + 2496 >> 2] | 0; //@line 11036
 if (!$6) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 11040
  __ZN12radio_eventsD2Ev($2 + 2368 | 0); //@line 11041
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 155; //@line 11044
   $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 11045
   HEAP32[$12 >> 2] = $2; //@line 11046
   sp = STACKTOP; //@line 11047
   return;
  }
  ___async_unwind = 0; //@line 11050
  HEAP32[$ReallocAsyncCtx5 >> 2] = 155; //@line 11051
  $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 11052
  HEAP32[$12 >> 2] = $2; //@line 11053
  sp = STACKTOP; //@line 11054
  return;
 } else {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 11058
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 11059
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 11060
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 154; //@line 11063
   $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 11064
   HEAP32[$10 >> 2] = $2; //@line 11065
   sp = STACKTOP; //@line 11066
   return;
  }
  ___async_unwind = 0; //@line 11069
  HEAP32[$ReallocAsyncCtx3 >> 2] = 154; //@line 11070
  $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 11071
  HEAP32[$10 >> 2] = $2; //@line 11072
  sp = STACKTOP; //@line 11073
  return;
 }
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_94($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 23693
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23695
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23697
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 23699
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23701
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23703
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 23705
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23707
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23709
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23711
 $19 = HEAP32[$2 >> 2] | 0; //@line 23712
 $22 = HEAP32[(HEAP32[$19 >> 2] | 0) + 32 >> 2] | 0; //@line 23715
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 23716
 FUNCTION_TABLE_vii[$22 & 15]($19, $4); //@line 23717
 if (!___async) {
  ___async_unwind = 0; //@line 23720
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 504; //@line 23722
 HEAP8[$ReallocAsyncCtx5 + 4 >> 0] = $6; //@line 23724
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $8; //@line 23726
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $2; //@line 23728
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $10; //@line 23730
 HEAP8[$ReallocAsyncCtx5 + 20 >> 0] = $12; //@line 23732
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $14; //@line 23734
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $16; //@line 23736
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $18; //@line 23738
 sp = STACKTOP; //@line 23739
 return;
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 11130
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11132
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11134
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11136
 $7 = $2 + 12 | 0; //@line 11137
 $8 = HEAP32[$7 >> 2] | 0; //@line 11138
 if (!$8) {
  HEAP32[$4 >> 2] = 0; //@line 11141
  HEAP32[$6 + 16 >> 2] = 0; //@line 11143
  return;
 }
 $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 11147
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 11148
 FUNCTION_TABLE_vii[$11 & 15]($6, $2); //@line 11149
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 544; //@line 11152
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 11153
  HEAP32[$12 >> 2] = $7; //@line 11154
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 11155
  HEAP32[$13 >> 2] = $4; //@line 11156
  $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 11157
  HEAP32[$14 >> 2] = $6; //@line 11158
  sp = STACKTOP; //@line 11159
  return;
 }
 ___async_unwind = 0; //@line 11162
 HEAP32[$ReallocAsyncCtx2 >> 2] = 544; //@line 11163
 $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 11164
 HEAP32[$12 >> 2] = $7; //@line 11165
 $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 11166
 HEAP32[$13 >> 2] = $4; //@line 11167
 $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 11168
 HEAP32[$14 >> 2] = $6; //@line 11169
 sp = STACKTOP; //@line 11170
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 5424
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5426
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5428
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5430
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5432
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5434
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5436
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 5438
 $16 = $4 + 12 | 0; //@line 5440
 HEAP32[$4 >> 2] = 453; //@line 5441
 HEAP32[$4 + 4 >> 2] = 0; //@line 5443
 HEAP32[$4 + 8 >> 2] = $2; //@line 5445
 HEAP32[$16 >> 2] = 844; //@line 5446
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 5447
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($6, $2 + 1816 | 0, $4); //@line 5448
 if (!___async) {
  ___async_unwind = 0; //@line 5451
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 454; //@line 5453
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 5455
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $12; //@line 5457
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $6; //@line 5459
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $8; //@line 5461
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $10; //@line 5463
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $16; //@line 5465
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $14; //@line 5467
 HEAP32[$ReallocAsyncCtx7 + 32 >> 2] = $4; //@line 5469
 sp = STACKTOP; //@line 5470
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_271($0) {
 $0 = $0 | 0;
 var $12 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7135
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7137
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7139
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7141
 if (!(HEAP8[$2 + 1177 >> 0] | 0)) {
  $19 = HEAP8[$2 + 1182 >> 0] | 0; //@line 7147
  HEAP8[$2 + 1183 >> 0] = $19; //@line 7149
  __ZN7LoRaPHY16set_last_tx_doneEhbj($2 + 4 | 0, $19, (HEAP8[$2 + 2360 >> 0] | 0) != 0, $4); //@line 7154
  HEAP32[$2 + 1780 >> 2] = $4; //@line 7156
  return;
 }
 $12 = HEAP32[$2 + 1776 >> 2] | 0; //@line 7161
 $15 = (__ZN7LoRaPHY15get_ack_timeoutEv($2 + 4 | 0) | 0) + $12 | 0; //@line 7164
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 7165
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($6, $2 + 1856 | 0, $15); //@line 7166
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 362; //@line 7169
  $16 = $ReallocAsyncCtx + 4 | 0; //@line 7170
  HEAP32[$16 >> 2] = $2; //@line 7171
  $17 = $ReallocAsyncCtx + 8 | 0; //@line 7172
  HEAP32[$17 >> 2] = $4; //@line 7173
  sp = STACKTOP; //@line 7174
  return;
 }
 ___async_unwind = 0; //@line 7177
 HEAP32[$ReallocAsyncCtx >> 2] = 362; //@line 7178
 $16 = $ReallocAsyncCtx + 4 | 0; //@line 7179
 HEAP32[$16 >> 2] = $2; //@line 7180
 $17 = $ReallocAsyncCtx + 8 | 0; //@line 7181
 HEAP32[$17 >> 2] = $4; //@line 7182
 sp = STACKTOP; //@line 7183
 return;
}
function _wcrtomb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 do {
  if (!$0) {
   $$0 = 1; //@line 14708
  } else {
   if ($1 >>> 0 < 128) {
    HEAP8[$0 >> 0] = $1; //@line 14713
    $$0 = 1; //@line 14714
    break;
   }
   if (!(HEAP32[HEAP32[(___pthread_self_910() | 0) + 188 >> 2] >> 2] | 0)) {
    if (($1 & -128 | 0) == 57216) {
     HEAP8[$0 >> 0] = $1; //@line 14727
     $$0 = 1; //@line 14728
     break;
    } else {
     HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 14732
     $$0 = -1; //@line 14733
     break;
    }
   }
   if ($1 >>> 0 < 2048) {
    HEAP8[$0 >> 0] = $1 >>> 6 | 192; //@line 14743
    HEAP8[$0 + 1 >> 0] = $1 & 63 | 128; //@line 14747
    $$0 = 2; //@line 14748
    break;
   }
   if ($1 >>> 0 < 55296 | ($1 & -8192 | 0) == 57344) {
    HEAP8[$0 >> 0] = $1 >>> 12 | 224; //@line 14760
    HEAP8[$0 + 1 >> 0] = $1 >>> 6 & 63 | 128; //@line 14766
    HEAP8[$0 + 2 >> 0] = $1 & 63 | 128; //@line 14770
    $$0 = 3; //@line 14771
    break;
   }
   if (($1 + -65536 | 0) >>> 0 < 1048576) {
    HEAP8[$0 >> 0] = $1 >>> 18 | 240; //@line 14781
    HEAP8[$0 + 1 >> 0] = $1 >>> 12 & 63 | 128; //@line 14787
    HEAP8[$0 + 2 >> 0] = $1 >>> 6 & 63 | 128; //@line 14793
    HEAP8[$0 + 3 >> 0] = $1 & 63 | 128; //@line 14797
    $$0 = 4; //@line 14798
    break;
   } else {
    HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 14802
    $$0 = -1; //@line 14803
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 14808
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $13 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16303
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $$0 = -1002; //@line 16307
  return $$0 | 0; //@line 16308
 }
 if (((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0) & 255) <= ($1 & 255)) {
  $$0 = -1003; //@line 16314
  return $$0 | 0; //@line 16315
 }
 $7 = HEAP32[$0 >> 2] | 0; //@line 16317
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 64 >> 2] | 0; //@line 16320
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 16321
 $11 = FUNCTION_TABLE_iii[$10 & 15]($7, $1) | 0; //@line 16322
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 473; //@line 16325
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16327
  sp = STACKTOP; //@line 16328
  return 0; //@line 16329
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16331
 if (!$11) {
  $$0 = -1003; //@line 16333
  return $$0 | 0; //@line 16334
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 16336
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16337
 __ZN7LoRaPHY18put_radio_to_sleepEv($13); //@line 16338
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 474; //@line 16341
  sp = STACKTOP; //@line 16342
  return 0; //@line 16343
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16345
 $$0 = 0; //@line 16346
 return $$0 | 0; //@line 16347
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_165($0) {
 $0 = $0 | 0;
 var $$059 = 0, $10 = 0, $12 = 0, $17 = 0, $19 = 0, $2 = 0, $25 = 0, $31 = 0, $37 = 0, $4 = 0, $42 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 218
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 220
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 222
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 226
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 228
 if (HEAP32[___async_retval >> 2] | 0) {
  $$059 = -1014; //@line 235
  $42 = ___async_retval; //@line 236
  HEAP32[$42 >> 2] = $$059; //@line 237
  return;
 }
 $17 = HEAP32[$2 >> 2] | 0; //@line 240
 $19 = HEAP16[$4 >> 1] | 0; //@line 242
 HEAP16[$4 >> 1] = $19 + 1 << 16 >> 16; //@line 244
 HEAP8[($19 & 65535) + ($6 + 1185) >> 0] = $17; //@line 247
 $25 = HEAP16[$4 >> 1] | 0; //@line 250
 HEAP16[$4 >> 1] = $25 + 1 << 16 >> 16; //@line 252
 HEAP8[($25 & 65535) + ($6 + 1185) >> 0] = $17 >>> 8; //@line 255
 $31 = HEAP16[$4 >> 1] | 0; //@line 258
 HEAP16[$4 >> 1] = $31 + 1 << 16 >> 16; //@line 260
 HEAP8[($31 & 65535) + ($6 + 1185) >> 0] = $17 >>> 16; //@line 263
 $37 = HEAP16[$4 >> 1] | 0; //@line 266
 HEAP16[$4 >> 1] = $37 + 1 << 16 >> 16; //@line 268
 HEAP8[($37 & 65535) + ($6 + 1185) >> 0] = $17 >>> 24; //@line 271
 HEAP32[$12 >> 2] = $10 & 255; //@line 273
 _mbed_tracef(16, 13239, 13324, $12); //@line 274
 $$059 = 0; //@line 275
 $42 = ___async_retval; //@line 276
 HEAP32[$42 >> 2] = $$059; //@line 277
 return;
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_338($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $21 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 25864
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25868
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25870
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25872
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25874
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25878
 if (!(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] & 1)) {
  $21 = (__ZNK7LoRaMac16get_device_classEv($4) | 0) == 2; //@line 25886
  HEAP32[$6 >> 2] = $21 ? 5 : 2; //@line 25888
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($4) | 0) + 4 >> 0] | 0)) {
  HEAP8[$8 + 2879 >> 0] = 1; //@line 25896
  return;
 }
 _mbed_tracef(16, 12482, 12667, $10); //@line 25899
 __ZN7LoRaMac21post_process_mlme_indEv($4); //@line 25900
 _mbed_tracef(16, 12482, 12691, $14); //@line 25901
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 25902
 __ZN12LoRaWANStack23mlme_indication_handlerEv($8); //@line 25903
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 280; //@line 25906
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 25907
  HEAP32[$26 >> 2] = $8; //@line 25908
  sp = STACKTOP; //@line 25909
  return;
 }
 ___async_unwind = 0; //@line 25912
 HEAP32[$ReallocAsyncCtx2 >> 2] = 280; //@line 25913
 $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 25914
 HEAP32[$26 >> 2] = $8; //@line 25915
 sp = STACKTOP; //@line 25916
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_268($0) {
 $0 = $0 | 0;
 var $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 6945
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6947
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6949
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6951
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 6953
 if (!$AsyncRetVal) {
  HEAP8[___async_retval >> 0] = 0; //@line 6958
  return;
 }
 dest = $2 + 4 | 0; //@line 6962
 stop = dest + 52 | 0; //@line 6962
 do {
  HEAP32[dest >> 2] = 0; //@line 6962
  dest = dest + 4 | 0; //@line 6962
 } while ((dest | 0) < (stop | 0));
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 6963
 HEAP32[$2 + 8 >> 2] = $4; //@line 6965
 HEAP32[$2 + 12 >> 2] = -1; //@line 6967
 HEAP32[$2 + 48 >> 2] = 1; //@line 6969
 $15 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 28 >> 2] | 0; //@line 6972
 $16 = HEAP32[$6 >> 2] | 0; //@line 6973
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 6974
 FUNCTION_TABLE_viiii[$15 & 7]($AsyncRetVal, $2, $16, 1); //@line 6975
 if (!___async) {
  ___async_unwind = 0; //@line 6978
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 653; //@line 6980
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 6982
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 6984
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $2; //@line 6986
 sp = STACKTOP; //@line 6987
 return;
}
function __ZN12LoRaWANStack28process_transmission_timeoutEv($0) {
 $0 = $0 | 0;
 var $10 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7736
 STACKTOP = STACKTOP + 16 | 0; //@line 7737
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7737
 _mbed_tracef(16, 12482, 12636, sp); //@line 7739
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 7740
 __ZN7LoRaMac19on_radio_tx_timeoutEv($0); //@line 7741
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 263; //@line 7744
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7746
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 7748
  sp = STACKTOP; //@line 7749
  STACKTOP = sp; //@line 7750
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7752
 $3 = $0 + 2872 | 0; //@line 7753
 HEAP32[$3 >> 2] = HEAP32[$3 >> 2] & -18 | 16; //@line 7757
 $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7758
 __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 7759
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 264; //@line 7762
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 7764
  HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 7766
  sp = STACKTOP; //@line 7767
  STACKTOP = sp; //@line 7768
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7770
  $10 = (__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2; //@line 7772
  HEAP32[$0 + 2480 >> 2] = $10 ? 5 : 2; //@line 7775
  STACKTOP = sp; //@line 7776
  return;
 }
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_43($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 20767
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20769
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 20771
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20773
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20775
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20777
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20779
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20781
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20783
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20785
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 20786
 __ZN4mbed5Timer5startEv($2); //@line 20787
 if (!___async) {
  ___async_unwind = 0; //@line 20790
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 60; //@line 20792
 HEAP16[$ReallocAsyncCtx4 + 4 >> 1] = $4; //@line 20794
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $2; //@line 20796
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $6; //@line 20798
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $8; //@line 20800
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $10; //@line 20802
 HEAP32[$ReallocAsyncCtx4 + 24 >> 2] = $12; //@line 20804
 HEAP32[$ReallocAsyncCtx4 + 28 >> 2] = $14; //@line 20806
 HEAP32[$ReallocAsyncCtx4 + 32 >> 2] = $16; //@line 20808
 HEAP32[$ReallocAsyncCtx4 + 36 >> 2] = $18; //@line 20810
 sp = STACKTOP; //@line 20811
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_387($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30306
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30310
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30312
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 30313
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 30317
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 30318
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 30319
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 295; //@line 30322
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 30323
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 30324
   sp = STACKTOP; //@line 30325
   return;
  }
  ___async_unwind = 0; //@line 30328
  HEAP32[$ReallocAsyncCtx2 >> 2] = 295; //@line 30329
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 30330
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 30331
  sp = STACKTOP; //@line 30332
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 30339
 _mbed_assert_internal(13097, 12384, 751); //@line 30340
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 296; //@line 30343
  sp = STACKTOP; //@line 30344
  return;
 }
 ___async_unwind = 0; //@line 30347
 HEAP32[$ReallocAsyncCtx6 >> 2] = 296; //@line 30348
 sp = STACKTOP; //@line 30349
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_179($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 1452
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1454
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1456
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1458
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 1460
 $10 = HEAP8[$0 + 17 >> 0] | 0; //@line 1462
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 1464
 $15 = $2 + 12 | 0; //@line 1468
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 24 >> 2] >> 2]; //@line 1469
 $16 = $2 + 16 | 0; //@line 1470
 HEAP8[$16 >> 0] = $8; //@line 1471
 HEAP8[$2 + 17 >> 0] = $10; //@line 1473
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 1474
 $18 = _equeue_alloc($12, 20) | 0; //@line 1475
 if (!___async) {
  HEAP32[___async_retval >> 2] = $18; //@line 1479
  ___async_unwind = 0; //@line 1480
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 305; //@line 1482
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $16; //@line 1484
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $12; //@line 1486
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $2; //@line 1488
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $15; //@line 1490
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $4; //@line 1492
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $6; //@line 1494
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $15; //@line 1496
 sp = STACKTOP; //@line 1497
 return;
}
function __ZN7LoRaMac21handle_retransmissionEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 22635
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22637
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22639
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22643
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22645
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22647
 if ($AsyncRetVal | 0) {
  HEAP32[$4 >> 2] = $AsyncRetVal; //@line 22650
  _mbed_tracef(2, 13239, 13244, $4); //@line 22651
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 22653
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 22656
 $13 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 22657
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 375; //@line 22660
  $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 22661
  HEAP32[$14 >> 2] = $8; //@line 22662
  $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 22663
  HEAP32[$15 >> 2] = $10; //@line 22664
  sp = STACKTOP; //@line 22665
  return;
 }
 HEAP32[___async_retval >> 2] = $13; //@line 22669
 ___async_unwind = 0; //@line 22670
 HEAP32[$ReallocAsyncCtx3 >> 2] = 375; //@line 22671
 $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 22672
 HEAP32[$14 >> 2] = $8; //@line 22673
 $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 22674
 HEAP32[$15 >> 2] = $10; //@line 22675
 sp = STACKTOP; //@line 22676
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_224($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 4306
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4310
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4312
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4314
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4316
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4318
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 4321
 $17 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 4322
 if ($17 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 4328
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($17, $8, $10, $12, $14); //@line 4329
   if (!___async) {
    ___async_unwind = 0; //@line 4332
   }
   HEAP32[$ReallocAsyncCtx3 >> 2] = 666; //@line 4334
   HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 4336
   HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 4338
   HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 4340
   HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 4342
   HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 4344
   HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 4346
   HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $14 & 1; //@line 4349
   sp = STACKTOP; //@line 4350
   return;
  }
 }
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $2 = 0, $8 = 0, $9 = 0, dest = 0, stop = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4040
 HEAP8[$2 + 2360 >> 0] = 0; //@line 4042
 HEAP8[$2 + 1181 >> 0] = 0; //@line 4044
 HEAP8[$2 + 1175 >> 0] = 1; //@line 4046
 HEAP8[$2 + 1177 >> 0] = 0; //@line 4048
 HEAP8[$2 + 1178 >> 0] = 0; //@line 4050
 $8 = $2 + 476 | 0; //@line 4051
 __ZN14LoRaMacCommand20clear_command_bufferEv($8); //@line 4052
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($8); //@line 4053
 __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($8); //@line 4054
 $9 = $2 + 2036 | 0; //@line 4055
 HEAP32[$9 >> 2] = 0; //@line 4056
 HEAP32[$9 + 4 >> 2] = 0; //@line 4056
 HEAP32[$9 + 8 >> 2] = 0; //@line 4056
 HEAP32[$9 + 12 >> 2] = 0; //@line 4056
 HEAP32[$9 + 16 >> 2] = 0; //@line 4056
 HEAP32[$9 + 20 >> 2] = 0; //@line 4056
 HEAP32[$2 + 2040 >> 2] = 1; //@line 4058
 $11 = $2 + 2068 | 0; //@line 4059
 HEAP32[$11 >> 2] = 0; //@line 4060
 HEAP32[$11 + 4 >> 2] = 0; //@line 4060
 HEAP32[$11 + 8 >> 2] = 0; //@line 4060
 HEAP32[$11 + 12 >> 2] = 0; //@line 4060
 HEAP32[$11 + 16 >> 2] = 0; //@line 4060
 HEAP32[$2 + 2076 >> 2] = 1; //@line 4062
 dest = $2 + 1996 | 0; //@line 4064
 stop = dest + 40 | 0; //@line 4064
 do {
  HEAP32[dest >> 2] = 0; //@line 4064
  dest = dest + 4 | 0; //@line 4064
 } while ((dest | 0) < (stop | 0));
 HEAP32[$2 + 2004 >> 2] = 1; //@line 4066
 return;
}
function __ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6012
 STACKTOP = STACKTOP + 16 | 0; //@line 6013
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6013
 $$byval_copy = sp + 8 | 0; //@line 6014
 $1 = sp; //@line 6015
 $3 = HEAP32[$0 + 3136 >> 2] | 0; //@line 6017
 HEAP32[$1 >> 2] = 196; //@line 6018
 HEAP32[$1 + 4 >> 2] = 0; //@line 6020
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6021
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 6022
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 6022
 $4 = __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 6023
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 197; //@line 6026
  sp = STACKTOP; //@line 6027
  STACKTOP = sp; //@line 6028
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6030
 if ($4 | 0) {
  STACKTOP = sp; //@line 6033
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6035
 _mbed_assert_internal(13097, 12384, 460); //@line 6036
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 198; //@line 6039
  sp = STACKTOP; //@line 6040
  STACKTOP = sp; //@line 6041
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6043
 STACKTOP = sp; //@line 6044
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_244($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 6014
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6016
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6018
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6020
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6022
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6024
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6026
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6028
 _srand(HEAP32[___async_retval >> 2] | 0); //@line 6031
 $16 = $2 + 1172 | 0; //@line 6032
 HEAP8[$16 >> 0] = 1; //@line 6033
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(36) | 0; //@line 6034
 __ZN7LoRaPHY25setup_public_network_modeEb($12, 1); //@line 6035
 if (!___async) {
  ___async_unwind = 0; //@line 6038
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 448; //@line 6040
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 6042
 HEAP32[$ReallocAsyncCtx11 + 8 >> 2] = $4; //@line 6044
 HEAP32[$ReallocAsyncCtx11 + 12 >> 2] = $6; //@line 6046
 HEAP32[$ReallocAsyncCtx11 + 16 >> 2] = $8; //@line 6048
 HEAP32[$ReallocAsyncCtx11 + 20 >> 2] = $10; //@line 6050
 HEAP32[$ReallocAsyncCtx11 + 24 >> 2] = $16; //@line 6052
 HEAP32[$ReallocAsyncCtx11 + 28 >> 2] = $12; //@line 6054
 HEAP32[$ReallocAsyncCtx11 + 32 >> 2] = $14; //@line 6056
 sp = STACKTOP; //@line 6057
 return;
}
function __ZN12LoRaWANStack20tx_interrupt_handlerEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 5825
 STACKTOP = STACKTOP + 16 | 0; //@line 5826
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5826
 $$byval_copy = sp + 8 | 0; //@line 5827
 $1 = sp; //@line 5828
 $3 = HEAP32[$0 + 3136 >> 2] | 0; //@line 5830
 HEAP32[$1 >> 2] = 187; //@line 5831
 HEAP32[$1 + 4 >> 2] = 0; //@line 5833
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5834
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 5835
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 5835
 $4 = __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 5836
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 188; //@line 5839
  sp = STACKTOP; //@line 5840
  STACKTOP = sp; //@line 5841
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5843
 if ($4 | 0) {
  STACKTOP = sp; //@line 5846
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5848
 _mbed_assert_internal(13097, 12384, 428); //@line 5849
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 189; //@line 5852
  sp = STACKTOP; //@line 5853
  STACKTOP = sp; //@line 5854
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5856
 STACKTOP = sp; //@line 5857
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 9228
 $2 = HEAP8[$0 + 16 >> 0] | 0; //@line 9230
 $4 = HEAP8[$0 + 17 >> 0] | 0; //@line 9232
 $5 = $0 + 12 | 0; //@line 9233
 $6 = HEAP32[$5 >> 2] | 0; //@line 9234
 do {
  if (!$6) {
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 9238
   _mbed_assert_internal(14973, 14978, 1677); //@line 9239
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 317; //@line 9242
    HEAP32[$AsyncCtx2 + 4 >> 2] = $5; //@line 9244
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 9246
    HEAP8[$AsyncCtx2 + 12 >> 0] = $2; //@line 9248
    HEAP8[$AsyncCtx2 + 13 >> 0] = $4; //@line 9250
    sp = STACKTOP; //@line 9251
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9254
    $13 = HEAP32[$5 >> 2] | 0; //@line 9256
    break;
   }
  } else {
   $13 = $6; //@line 9260
  }
 } while (0);
 $12 = HEAP32[$13 >> 2] | 0; //@line 9263
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9264
 FUNCTION_TABLE_viii[$12 & 7]($0, $2, $4); //@line 9265
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 318; //@line 9268
  sp = STACKTOP; //@line 9269
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9272
  return;
 }
}
function __ZN12radio_eventsD2Ev__async_cb_333($0) {
 $0 = $0 | 0;
 var $11 = 0, $14 = 0, $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 25234
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25236
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 25238
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 25243
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 25244
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 16 | 0); //@line 25245
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 162; //@line 25248
   $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 25249
   HEAP32[$9 >> 2] = $2; //@line 25250
   sp = STACKTOP; //@line 25251
   return;
  }
  ___async_unwind = 0; //@line 25254
  HEAP32[$ReallocAsyncCtx6 >> 2] = 162; //@line 25255
  $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 25256
  HEAP32[$9 >> 2] = $2; //@line 25257
  sp = STACKTOP; //@line 25258
  return;
 }
 $11 = HEAP32[$2 + 12 >> 2] | 0; //@line 25262
 if (!$11) {
  return;
 }
 $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 25268
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 25269
 FUNCTION_TABLE_vi[$14 & 1023]($2); //@line 25270
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 163; //@line 25273
  sp = STACKTOP; //@line 25274
  return;
 }
 ___async_unwind = 0; //@line 25277
 HEAP32[$ReallocAsyncCtx7 >> 2] = 163; //@line 25278
 sp = STACKTOP; //@line 25279
 return;
}
function __ZN7LoRaMac4joinEb__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7046
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7048
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7050
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7054
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7056
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 7058
 if ($AsyncRetVal | 0) {
  HEAP32[$4 >> 2] = $AsyncRetVal; //@line 7061
  _mbed_tracef(2, 13239, 13244, $4); //@line 7062
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 7064
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 7067
 $13 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 7068
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 446; //@line 7071
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 7072
  HEAP32[$14 >> 2] = $8; //@line 7073
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 7074
  HEAP32[$15 >> 2] = $10; //@line 7075
  sp = STACKTOP; //@line 7076
  return;
 }
 HEAP32[___async_retval >> 2] = $13; //@line 7080
 ___async_unwind = 0; //@line 7081
 HEAP32[$ReallocAsyncCtx2 >> 2] = 446; //@line 7082
 $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 7083
 HEAP32[$14 >> 2] = $8; //@line 7084
 $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 7085
 HEAP32[$15 >> 2] = $10; //@line 7086
 sp = STACKTOP; //@line 7087
 return;
}
function _mbedtls_aes_crypt_ctr($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0$lcssa = 0, $$021 = 0, $$02326 = 0, $$02425 = 0, $$027 = 0, $$in = 0, $13 = 0, $15 = 0, $24 = 0, $7 = 0;
 $7 = HEAP32[$2 >> 2] | 0; //@line 2347
 if (!$1) {
  $$0$lcssa = $7; //@line 2350
  HEAP32[$2 >> 2] = $$0$lcssa; //@line 2351
  return 0; //@line 2352
 } else {
  $$02326 = $6; //@line 2354
  $$02425 = $5; //@line 2354
  $$027 = $7; //@line 2354
  $$in = $1; //@line 2354
 }
 while (1) {
  $$in = $$in + -1 | 0; //@line 2357
  L5 : do {
   if (!$$027) {
    _mbedtls_internal_aes_encrypt($0, $3, $4) | 0; //@line 2361
    $$021 = 16; //@line 2362
    do {
     if (($$021 | 0) <= 0) {
      break L5;
     }
     $$021 = $$021 + -1 | 0; //@line 2368
     $13 = $3 + $$021 | 0; //@line 2369
     $15 = (HEAP8[$13 >> 0] | 0) + 1 << 24 >> 24; //@line 2371
     HEAP8[$13 >> 0] = $15; //@line 2372
    } while (!($15 << 24 >> 24));
   }
  } while (0);
  HEAP8[$$02326 >> 0] = HEAP8[$4 + $$027 >> 0] ^ HEAP8[$$02425 >> 0]; //@line 2388
  $24 = $$027 + 1 & 15; //@line 2390
  if (!$$in) {
   $$0$lcssa = $24; //@line 2393
   break;
  } else {
   $$02326 = $$02326 + 1 | 0; //@line 2396
   $$02425 = $$02425 + 1 | 0; //@line 2396
   $$027 = $24; //@line 2396
  }
 }
 HEAP32[$2 >> 2] = $$0$lcssa; //@line 2399
 return 0; //@line 2400
}
function _equeue_create_inplace($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$033 = 0, $$034 = 0, $20 = 0, $22 = 0, $26 = 0, $29 = 0, $5 = 0;
 HEAP32[$0 + 12 >> 2] = $2; //@line 3112
 HEAP32[$0 + 20 >> 2] = 0; //@line 3114
 $5 = $0 + 16 | 0; //@line 3115
 HEAP32[$5 >> 2] = 0; //@line 3116
 if ($1 | 0) {
  $$034 = $1; //@line 3119
  $22 = 0; //@line 3119
  do {
   $22 = $22 + 1 | 0; //@line 3121
   $$034 = $$034 >>> 1; //@line 3122
  } while (($$034 | 0) != 0);
  HEAP32[$5 >> 2] = $22; //@line 3130
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 3133
 HEAP32[$0 + 28 >> 2] = $1; //@line 3135
 HEAP32[$0 + 32 >> 2] = $2; //@line 3137
 HEAP32[$0 >> 2] = 0; //@line 3138
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 3141
 HEAP8[$0 + 9 >> 0] = 0; //@line 3143
 HEAP8[$0 + 8 >> 0] = 0; //@line 3145
 HEAP8[$0 + 36 >> 0] = 0; //@line 3147
 HEAP32[$0 + 40 >> 2] = 0; //@line 3149
 HEAP32[$0 + 44 >> 2] = 0; //@line 3151
 HEAP8[$0 + 184 >> 0] = 0; //@line 3153
 $20 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 3155
 if (($20 | 0) < 0) {
  $$033 = $20; //@line 3158
  return $$033 | 0; //@line 3159
 }
 $26 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 3162
 if (($26 | 0) < 0) {
  $$033 = $26; //@line 3165
  return $$033 | 0; //@line 3166
 }
 $29 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 3169
 $$033 = ($29 | 0) < 0 ? $29 : 0; //@line 3172
 return $$033 | 0; //@line 3173
}
function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $26 = 0, $8 = 0, $9 = 0, $8$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$0914 = $2; //@line 13592
  $8 = $0; //@line 13592
  $9 = $1; //@line 13592
  while (1) {
   $10 = ___uremdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 13594
   $$0914 = $$0914 + -1 | 0; //@line 13598
   HEAP8[$$0914 >> 0] = $10 & 255 | 48; //@line 13599
   $8$looptemp = $8;
   $8 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 13600
   if (!($9 >>> 0 > 9 | ($9 | 0) == 9 & $8$looptemp >>> 0 > 4294967295)) {
    break;
   } else {
    $9 = tempRet0; //@line 13608
   }
  }
  $$010$lcssa$off0 = $8; //@line 13613
  $$09$lcssa = $$0914; //@line 13613
 } else {
  $$010$lcssa$off0 = $0; //@line 13615
  $$09$lcssa = $2; //@line 13615
 }
 if (!$$010$lcssa$off0) {
  $$1$lcssa = $$09$lcssa; //@line 13619
 } else {
  $$012 = $$010$lcssa$off0; //@line 13621
  $$111 = $$09$lcssa; //@line 13621
  while (1) {
   $26 = $$111 + -1 | 0; //@line 13626
   HEAP8[$26 >> 0] = ($$012 >>> 0) % 10 | 0 | 48; //@line 13627
   if ($$012 >>> 0 < 10) {
    $$1$lcssa = $26; //@line 13631
    break;
   } else {
    $$012 = ($$012 >>> 0) / 10 | 0; //@line 13634
    $$111 = $26; //@line 13634
   }
  }
 }
 return $$1$lcssa | 0; //@line 13638
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_142($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 28282
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28286
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28288
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28290
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28292
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28294
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28296
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28298
 $17 = $4 + 12 | 0; //@line 28300
 HEAP32[$17 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 28301
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(28) | 0; //@line 28302
 $18 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 7) | 0; //@line 28303
 if (!___async) {
  HEAP32[___async_retval >> 2] = $18; //@line 28307
  ___async_unwind = 0; //@line 28308
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 244; //@line 28310
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $8; //@line 28312
 HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $10; //@line 28314
 HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $12; //@line 28316
 HEAP32[$ReallocAsyncCtx8 + 16 >> 2] = $14; //@line 28318
 HEAP32[$ReallocAsyncCtx8 + 20 >> 2] = $16; //@line 28320
 HEAP32[$ReallocAsyncCtx8 + 24 >> 2] = $17; //@line 28322
 sp = STACKTOP; //@line 28323
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_237($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 5477
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5479
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5481
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5483
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5485
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5487
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5489
 $14 = $4 + 12 | 0; //@line 5491
 HEAP32[$4 >> 2] = 456; //@line 5492
 HEAP32[$4 + 4 >> 2] = 0; //@line 5494
 HEAP32[$4 + 8 >> 2] = $2; //@line 5496
 HEAP32[$14 >> 2] = 844; //@line 5497
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 5498
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($6, $2 + 1836 | 0, $4); //@line 5499
 if (!___async) {
  ___async_unwind = 0; //@line 5502
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 457; //@line 5504
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $14; //@line 5506
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $2; //@line 5508
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $8; //@line 5510
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $6; //@line 5512
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $4; //@line 5514
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $10; //@line 5516
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $12; //@line 5518
 sp = STACKTOP; //@line 5519
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_47($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 21040
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21042
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 21044
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21046
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21048
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21050
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21052
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21054
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21056
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 21057
 __ZN4mbed5TimerC2Ev($2); //@line 21058
 if (!___async) {
  ___async_unwind = 0; //@line 21061
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 59; //@line 21063
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 21065
 HEAP16[$ReallocAsyncCtx3 + 8 >> 1] = $4; //@line 21067
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 21069
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 21071
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 21073
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 21075
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $2; //@line 21077
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $14; //@line 21079
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $16; //@line 21081
 sp = STACKTOP; //@line 21082
 return;
}
function __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$ = 0, $$$i = 0, $$0 = 0.0, $10 = 0, $13 = 0, $16 = 0, $23 = 0, $28 = 0, $41 = 0, $5 = 0, $51 = 0, $7 = 0, $8 = 0;
 $5 = $1 << 24 >> 24; //@line 19483
 $7 = HEAP8[$0 + 29 >> 0] | 0; //@line 19485
 $8 = $7 & 255; //@line 19486
 $$ = ($5 | 0) < ($8 | 0) ? $5 : $8; //@line 19488
 $10 = $$ & 255; //@line 19489
 HEAP8[$4 + 1 >> 0] = $10; //@line 19491
 $13 = HEAP32[$0 + 80 >> 2] | 0; //@line 19493
 $16 = HEAP32[$13 + (($$ & 255) << 2) >> 2] | 0; //@line 19496
 HEAP8[$4 + 2 >> 0] = ($16 | 0) == 5e5 ? 2 : ($16 | 0) == 25e4 & 1; //@line 19502
 $23 = HEAP32[$0 + 88 >> 2] | 0; //@line 19509
 if (HEAP8[$0 + 14 >> 0] | 0 ? $7 << 24 >> 24 == $10 << 24 >> 24 : 0) {
  $$0 = 8.0 / +(HEAPU8[$23 + $8 >> 0] | 0); //@line 19515
 } else {
  $28 = $$ & 255; //@line 19517
  $$0 = +(1 << HEAPU8[$23 + $28 >> 0] | 0) / +((HEAP32[$13 + ($28 << 2) >> 2] | 0) >>> 0) * 1.0e3; //@line 19528
 }
 $41 = $2 & 255; //@line 19532
 $51 = ~~+Math_ceil(+(($$0 * +(($41 << 1) + -8 | 0) + +($3 << 1 >>> 0)) / $$0)) >>> 0; //@line 19542
 $$$i = $51 >>> 0 > $41 >>> 0 ? $51 : $41; //@line 19544
 HEAP32[$4 + 8 >> 2] = $$$i; //@line 19545
 HEAP32[$4 + 12 >> 2] = ~~+Math_ceil(+($$0 * 4.0 - $$0 * +($$$i >>> 0) * .5 + -1.0)); //@line 19554
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_152($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 29015
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29017
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29019
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29021
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29023
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29027
 $13 = $4 + 12 | 0; //@line 29029
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 20 >> 2] >> 2]; //@line 29030
 $14 = $4 + 16 | 0; //@line 29031
 HEAP32[$14 >> 2] = $6; //@line 29032
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 29033
 $15 = _equeue_alloc($8, 20) | 0; //@line 29034
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 29038
  ___async_unwind = 0; //@line 29039
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 253; //@line 29041
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $13; //@line 29043
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $14; //@line 29045
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $8; //@line 29047
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $13; //@line 29049
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $2; //@line 29051
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $4; //@line 29053
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $12; //@line 29055
 sp = STACKTOP; //@line 29056
 return;
}
function __ZN7LoRaMac15open_rx1_windowEv__async_cb_297($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 10156
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10158
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10160
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10162
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10164
 HEAP8[$2 + 2010 >> 0] = HEAP8[$2 + 1941 >> 0] | 0; //@line 10168
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 10169
 __ZN7LoRaPHY9rx_configEP18rx_config_params_t($4, $6) | 0; //@line 10170
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 434; //@line 10173
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 10174
  HEAP32[$12 >> 2] = $8; //@line 10175
  $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 10176
  HEAP32[$13 >> 2] = $2; //@line 10177
  $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 10178
  HEAP32[$14 >> 2] = $4; //@line 10179
  sp = STACKTOP; //@line 10180
  return;
 }
 ___async_unwind = 0; //@line 10183
 HEAP32[$ReallocAsyncCtx3 >> 2] = 434; //@line 10184
 $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 10185
 HEAP32[$12 >> 2] = $8; //@line 10186
 $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 10187
 HEAP32[$13 >> 2] = $2; //@line 10188
 $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 10189
 HEAP32[$14 >> 2] = $4; //@line 10190
 sp = STACKTOP; //@line 10191
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_41($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 20635
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20637
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20639
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20641
 if ((HEAP32[$2 >> 2] | 0) != 2) {
  HEAP32[___async_retval >> 2] = HEAP32[$6 >> 2]; //@line 20647
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 20651
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $4 + 1836 | 0); //@line 20652
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 426; //@line 20655
  $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 20656
  HEAP32[$9 >> 2] = $4; //@line 20657
  $10 = $ReallocAsyncCtx4 + 8 | 0; //@line 20658
  HEAP32[$10 >> 2] = $2; //@line 20659
  $11 = $ReallocAsyncCtx4 + 12 | 0; //@line 20660
  HEAP32[$11 >> 2] = $6; //@line 20661
  sp = STACKTOP; //@line 20662
  return;
 }
 ___async_unwind = 0; //@line 20665
 HEAP32[$ReallocAsyncCtx4 >> 2] = 426; //@line 20666
 $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 20667
 HEAP32[$9 >> 2] = $4; //@line 20668
 $10 = $ReallocAsyncCtx4 + 8 | 0; //@line 20669
 HEAP32[$10 >> 2] = $2; //@line 20670
 $11 = $ReallocAsyncCtx4 + 12 | 0; //@line 20671
 HEAP32[$11 >> 2] = $6; //@line 20672
 sp = STACKTOP; //@line 20673
 return;
}
function __ZN12LoRaWANStack23process_connected_stateEv__async_cb_207($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 3304
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3308
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3310
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3312
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 4; //@line 3317
  HEAP32[$8 + 2480 >> 2] = 2; //@line 3319
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 3322
 _mbed_assert_internal(13097, 12384, 646); //@line 3323
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 315; //@line 3326
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 3327
  HEAP32[$10 >> 2] = $4; //@line 3328
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 3329
  HEAP32[$11 >> 2] = $6; //@line 3330
  $12 = $ReallocAsyncCtx4 + 12 | 0; //@line 3331
  HEAP32[$12 >> 2] = $8; //@line 3332
  sp = STACKTOP; //@line 3333
  return;
 }
 ___async_unwind = 0; //@line 3336
 HEAP32[$ReallocAsyncCtx4 >> 2] = 315; //@line 3337
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 3338
 HEAP32[$10 >> 2] = $4; //@line 3339
 $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 3340
 HEAP32[$11 >> 2] = $6; //@line 3341
 $12 = $ReallocAsyncCtx4 + 12 | 0; //@line 3342
 HEAP32[$12 >> 2] = $8; //@line 3343
 sp = STACKTOP; //@line 3344
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_375($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 29779
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29785
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29787
 __ZN7LoRaMac17bind_radio_driverER9LoRaRadio(HEAP32[$0 + 8 >> 2] | 0, $6); //@line 29788
 $11 = HEAP32[(HEAP32[$6 >> 2] | 0) + 72 >> 2] | 0; //@line 29791
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(16) | 0; //@line 29792
 FUNCTION_TABLE_vi[$11 & 1023]($6); //@line 29793
 if (___async) {
  HEAP32[$ReallocAsyncCtx16 >> 2] = 184; //@line 29796
  $12 = $ReallocAsyncCtx16 + 4 | 0; //@line 29797
  HEAP32[$12 >> 2] = $6; //@line 29798
  $13 = $ReallocAsyncCtx16 + 8 | 0; //@line 29799
  HEAP32[$13 >> 2] = $8; //@line 29800
  $14 = $ReallocAsyncCtx16 + 12 | 0; //@line 29801
  HEAP32[$14 >> 2] = $6; //@line 29802
  sp = STACKTOP; //@line 29803
  return;
 }
 ___async_unwind = 0; //@line 29806
 HEAP32[$ReallocAsyncCtx16 >> 2] = 184; //@line 29807
 $12 = $ReallocAsyncCtx16 + 4 | 0; //@line 29808
 HEAP32[$12 >> 2] = $6; //@line 29809
 $13 = $ReallocAsyncCtx16 + 8 | 0; //@line 29810
 HEAP32[$13 >> 2] = $8; //@line 29811
 $14 = $ReallocAsyncCtx16 + 12 | 0; //@line 29812
 HEAP32[$14 >> 2] = $6; //@line 29813
 sp = STACKTOP; //@line 29814
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_227($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 4902
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4904
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4906
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 4910
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4912
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4914
 $13 = $2 + 12 | 0; //@line 4916
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] >> 2]; //@line 4917
 $14 = $2 + 16 | 0; //@line 4918
 HEAP8[$14 >> 0] = $8; //@line 4919
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 4920
 $15 = _equeue_alloc($12, 20) | 0; //@line 4921
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 4925
  ___async_unwind = 0; //@line 4926
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 207; //@line 4928
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $14; //@line 4930
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $12; //@line 4932
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $13; //@line 4934
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $2; //@line 4936
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $10; //@line 4938
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $4; //@line 4940
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $13; //@line 4942
 sp = STACKTOP; //@line 4943
 return;
}
function _strlen($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$sink = 0, $1 = 0, $10 = 0, $19 = 0, $23 = 0, $6 = 0, label = 0;
 $1 = $0; //@line 11094
 L1 : do {
  if (!($1 & 3)) {
   $$015$lcssa = $0; //@line 11099
   label = 4; //@line 11100
  } else {
   $$01519 = $0; //@line 11102
   $23 = $1; //@line 11102
   while (1) {
    if (!(HEAP8[$$01519 >> 0] | 0)) {
     $$sink = $23; //@line 11107
     break L1;
    }
    $6 = $$01519 + 1 | 0; //@line 11110
    $23 = $6; //@line 11111
    if (!($23 & 3)) {
     $$015$lcssa = $6; //@line 11115
     label = 4; //@line 11116
     break;
    } else {
     $$01519 = $6; //@line 11119
    }
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  $$0 = $$015$lcssa; //@line 11125
  while (1) {
   $10 = HEAP32[$$0 >> 2] | 0; //@line 11127
   if (!(($10 & -2139062144 ^ -2139062144) & $10 + -16843009)) {
    $$0 = $$0 + 4 | 0; //@line 11135
   } else {
    break;
   }
  }
  if (!(($10 & 255) << 24 >> 24)) {
   $$1$lcssa = $$0; //@line 11143
  } else {
   $$pn = $$0; //@line 11145
   while (1) {
    $19 = $$pn + 1 | 0; //@line 11147
    if (!(HEAP8[$19 >> 0] | 0)) {
     $$1$lcssa = $19; //@line 11151
     break;
    } else {
     $$pn = $19; //@line 11154
    }
   }
  }
  $$sink = $$1$lcssa; //@line 11159
 }
 return $$sink - $1 | 0; //@line 11162
}
function __ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_39($0) {
 $0 = $0 | 0;
 var $11 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 20518
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20520
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20522
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20524
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20526
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[___async_retval >> 2] = HEAP32[$8 >> 2]; //@line 20533
  return;
 }
 $11 = (HEAP8[$2 >> 0] | 0) != 0; //@line 20537
 $13 = HEAP32[$4 + 1888 >> 2] | 0; //@line 20539
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 20540
 __ZN7LoRaPHY15setup_rx_windowEbj($6, $11, $13); //@line 20541
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 428; //@line 20544
  $14 = $ReallocAsyncCtx + 4 | 0; //@line 20545
  HEAP32[$14 >> 2] = $2; //@line 20546
  $15 = $ReallocAsyncCtx + 8 | 0; //@line 20547
  HEAP32[$15 >> 2] = $8; //@line 20548
  sp = STACKTOP; //@line 20549
  return;
 }
 ___async_unwind = 0; //@line 20552
 HEAP32[$ReallocAsyncCtx >> 2] = 428; //@line 20553
 $14 = $ReallocAsyncCtx + 4 | 0; //@line 20554
 HEAP32[$14 >> 2] = $2; //@line 20555
 $15 = $ReallocAsyncCtx + 8 | 0; //@line 20556
 HEAP32[$15 >> 2] = $8; //@line 20557
 sp = STACKTOP; //@line 20558
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_9($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 18317
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18319
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18321
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 18323
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18325
 $10 = HEAP16[$0 + 20 >> 1] | 0; //@line 18327
 $12 = HEAP8[$0 + 22 >> 0] | 0; //@line 18329
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 18331
 $15 = $2 + 1836 | 0; //@line 18332
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 18333
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($14, $15); //@line 18334
 if (!___async) {
  ___async_unwind = 0; //@line 18337
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 408; //@line 18339
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $2; //@line 18341
 HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $4; //@line 18343
 HEAP16[$ReallocAsyncCtx8 + 12 >> 1] = $6; //@line 18345
 HEAP32[$ReallocAsyncCtx8 + 16 >> 2] = $8; //@line 18347
 HEAP16[$ReallocAsyncCtx8 + 20 >> 1] = $10; //@line 18349
 HEAP8[$ReallocAsyncCtx8 + 22 >> 0] = $12; //@line 18351
 HEAP32[$ReallocAsyncCtx8 + 24 >> 2] = $14; //@line 18353
 HEAP32[$ReallocAsyncCtx8 + 28 >> 2] = $15; //@line 18355
 sp = STACKTOP; //@line 18356
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6566
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6568
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6572
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6574
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6576
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6578
 if (!(HEAP8[$2 >> 0] | 0)) {
  $13 = (HEAP32[$0 + 8 >> 2] | 0) + 8 | 0; //@line 6582
  if ($13 >>> 0 < $6 >>> 0) {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 6585
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($13, $8, $10, $12); //@line 6586
   if (!___async) {
    ___async_unwind = 0; //@line 6589
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 670; //@line 6591
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 6593
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $13; //@line 6595
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 6597
   HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 6599
   HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 6601
   HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 6603
   sp = STACKTOP; //@line 6604
   return;
  }
 }
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_246($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 6072
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6074
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6076
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6078
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6080
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6082
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6084
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6086
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6088
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(36) | 0; //@line 6089
 __ZN7LoRaPHY18put_radio_to_sleepEv($14); //@line 6090
 if (!___async) {
  ___async_unwind = 0; //@line 6093
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 449; //@line 6095
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 6097
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $4; //@line 6099
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $6; //@line 6101
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $8; //@line 6103
 HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $10; //@line 6105
 HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $12; //@line 6107
 HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $14; //@line 6109
 HEAP32[$ReallocAsyncCtx12 + 32 >> 2] = $16; //@line 6111
 sp = STACKTOP; //@line 6112
 return;
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $2 = 0, $4 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2517
 $2 = $0; //@line 2518
 L1 : do {
  switch ($1 | 0) {
  case 1:
   {
    $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 2523
    if ($4 | 0) {
     $7 = HEAP32[$4 >> 2] | 0; //@line 2527
     $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2528
     FUNCTION_TABLE_vi[$7 & 1023]($2 + 40 | 0); //@line 2529
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 102; //@line 2532
      sp = STACKTOP; //@line 2533
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 2536
      break L1;
     }
    }
    break;
   }
  case 2:
   {
    $9 = HEAP32[$2 + 68 >> 2] | 0; //@line 2544
    if ($9 | 0) {
     $12 = HEAP32[$9 >> 2] | 0; //@line 2548
     $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2549
     FUNCTION_TABLE_vi[$12 & 1023]($2 + 56 | 0); //@line 2550
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 103; //@line 2553
      sp = STACKTOP; //@line 2554
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2557
      break L1;
     }
    }
    break;
   }
  default:
   {}
  }
 } while (0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $21 = 0, $22 = 0, $28 = 0, $30 = 0;
 HEAP8[$1 + 53 >> 0] = 1; //@line 16299
 do {
  if ((HEAP32[$1 + 4 >> 2] | 0) == ($3 | 0)) {
   HEAP8[$1 + 52 >> 0] = 1; //@line 16306
   $10 = $1 + 16 | 0; //@line 16307
   $11 = HEAP32[$10 >> 2] | 0; //@line 16308
   if (!$11) {
    HEAP32[$10 >> 2] = $2; //@line 16311
    HEAP32[$1 + 24 >> 2] = $4; //@line 16313
    HEAP32[$1 + 36 >> 2] = 1; //@line 16315
    if (!(($4 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0)) {
     break;
    }
    HEAP8[$1 + 54 >> 0] = 1; //@line 16325
    break;
   }
   if (($11 | 0) != ($2 | 0)) {
    $30 = $1 + 36 | 0; //@line 16330
    HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1; //@line 16333
    HEAP8[$1 + 54 >> 0] = 1; //@line 16335
    break;
   }
   $21 = $1 + 24 | 0; //@line 16338
   $22 = HEAP32[$21 >> 2] | 0; //@line 16339
   if (($22 | 0) == 2) {
    HEAP32[$21 >> 2] = $4; //@line 16342
    $28 = $4; //@line 16343
   } else {
    $28 = $22; //@line 16345
   }
   if (($28 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0) {
    HEAP8[$1 + 54 >> 0] = 1; //@line 16354
   }
  }
 } while (0);
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7689
 $2 = HEAP32[$0 + 16 >> 2] | 0; //@line 7691
 $3 = $0 + 12 | 0; //@line 7692
 $4 = HEAP32[$3 >> 2] | 0; //@line 7693
 do {
  if (!$4) {
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7697
   _mbed_assert_internal(14973, 14978, 1102); //@line 7698
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 261; //@line 7701
    HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 7703
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 7705
    HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 7707
    sp = STACKTOP; //@line 7708
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7711
    $10 = HEAP32[$3 >> 2] | 0; //@line 7713
    break;
   }
  } else {
   $10 = $4; //@line 7717
  }
 } while (0);
 $9 = HEAP32[$10 >> 2] | 0; //@line 7720
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7721
 FUNCTION_TABLE_vii[$9 & 15]($0, $2); //@line 7722
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 262; //@line 7725
  sp = STACKTOP; //@line 7726
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7729
  return;
 }
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6440
 $3 = (HEAP8[$0 + 16 >> 0] | 0) != 0; //@line 6443
 $4 = $0 + 12 | 0; //@line 6444
 $5 = HEAP32[$4 >> 2] | 0; //@line 6445
 do {
  if (!$5) {
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6449
   _mbed_assert_internal(14973, 14978, 1102); //@line 6450
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 215; //@line 6453
    HEAP32[$AsyncCtx2 + 4 >> 2] = $4; //@line 6455
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 6457
    HEAP8[$AsyncCtx2 + 12 >> 0] = $3 & 1; //@line 6460
    sp = STACKTOP; //@line 6461
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6464
    $11 = HEAP32[$4 >> 2] | 0; //@line 6466
    break;
   }
  } else {
   $11 = $5; //@line 6470
  }
 } while (0);
 $10 = HEAP32[$11 >> 2] | 0; //@line 6473
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6474
 FUNCTION_TABLE_vii[$10 & 15]($0, $3); //@line 6475
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 216; //@line 6478
  sp = STACKTOP; //@line 6479
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6482
  return;
 }
}
function __ZN7LoRaPHY11add_channelEPK16channel_params_th__async_cb($0) {
 $0 = $0 | 0;
 var $$026 = 0, $10 = 0, $12 = 0, $2 = 0, $22 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 18902
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18904
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18906
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18908
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  $$026 = $2 ? -1006 : -1004; //@line 18914
  $27 = ___async_retval; //@line 18915
  HEAP32[$27 >> 2] = $$026; //@line 18916
  return;
 }
 if ($2) {
  $$026 = $2 ? -1005 : -1004; //@line 18921
  $27 = ___async_retval; //@line 18922
  HEAP32[$27 >> 2] = $$026; //@line 18923
  return;
 }
 $10 = $4 + 124 | 0; //@line 18926
 $12 = (HEAP32[$10 >> 2] | 0) + ($6 * 12 | 0) | 0; //@line 18928
 HEAP32[$12 >> 2] = HEAP32[$8 >> 2]; //@line 18929
 HEAP32[$12 + 4 >> 2] = HEAP32[$8 + 4 >> 2]; //@line 18929
 HEAP32[$12 + 8 >> 2] = HEAP32[$8 + 8 >> 2]; //@line 18929
 HEAP8[(HEAP32[$10 >> 2] | 0) + ($6 * 12 | 0) + 9 >> 0] = HEAP8[$8 + 9 >> 0] | 0; //@line 18934
 $22 = (HEAP32[$4 + 116 >> 2] | 0) + ($6 >>> 4 << 1) | 0; //@line 18940
 HEAP16[$22 >> 1] = 1 << ($6 & 15) | (HEAPU16[$22 >> 1] | 0); //@line 18945
 $$026 = 0; //@line 18946
 $27 = ___async_retval; //@line 18947
 HEAP32[$27 >> 2] = $$026; //@line 18948
 return;
}
function _mbedtls_cipher_setup($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 2985
 if (($0 | 0) == 0 | ($1 | 0) == 0) {
  $$0 = -24832; //@line 2990
  return $$0 | 0; //@line 2991
 }
 dest = $0; //@line 2993
 stop = dest + 68 | 0; //@line 2993
 do {
  HEAP32[dest >> 2] = 0; //@line 2993
  dest = dest + 4 | 0; //@line 2993
 } while ((dest | 0) < (stop | 0));
 $7 = HEAP32[(HEAP32[$1 + 28 >> 2] | 0) + 24 >> 2] | 0; //@line 2997
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2998
 $8 = FUNCTION_TABLE_i[$7 & 7]() | 0; //@line 2999
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 557; //@line 3002
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3004
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 3006
  sp = STACKTOP; //@line 3007
  return 0; //@line 3008
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3010
 HEAP32[$0 + 60 >> 2] = $8; //@line 3012
 if (!$8) {
  $$0 = -24960; //@line 3015
  return $$0 | 0; //@line 3016
 }
 HEAP32[$0 >> 2] = $1; //@line 3018
 if ((HEAP32[$1 + 4 >> 2] | 0) != 2) {
  $$0 = 0; //@line 3023
  return $$0 | 0; //@line 3024
 }
 HEAP32[$0 + 12 >> 2] = 5; //@line 3027
 HEAP32[$0 + 16 >> 2] = 17; //@line 3029
 $$0 = 0; //@line 3030
 return $$0 | 0; //@line 3031
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22718
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22722
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22724
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22726
 $9 = $4 + 12 | 0; //@line 22728
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 22729
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 22730
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 1) | 0; //@line 22731
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 329; //@line 22734
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 22735
  HEAP32[$11 >> 2] = $9; //@line 22736
  $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 22737
  HEAP32[$12 >> 2] = $8; //@line 22738
  sp = STACKTOP; //@line 22739
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 22743
 ___async_unwind = 0; //@line 22744
 HEAP32[$ReallocAsyncCtx5 >> 2] = 329; //@line 22745
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 22746
 HEAP32[$11 >> 2] = $9; //@line 22747
 $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 22748
 HEAP32[$12 >> 2] = $8; //@line 22749
 sp = STACKTOP; //@line 22750
 return;
}
function _puts($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $12 = 0, $17 = 0, $19 = 0, $22 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15793
 $1 = HEAP32[2593] | 0; //@line 15794
 if ((HEAP32[$1 + 76 >> 2] | 0) > -1) {
  $19 = ___lockfile($1) | 0; //@line 15800
 } else {
  $19 = 0; //@line 15802
 }
 do {
  if ((_fputs($0, $1) | 0) < 0) {
   $22 = -1; //@line 15808
  } else {
   if ((HEAP8[$1 + 75 >> 0] | 0) != 10) {
    $11 = $1 + 20 | 0; //@line 15814
    $12 = HEAP32[$11 >> 2] | 0; //@line 15815
    if ($12 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$11 >> 2] = $12 + 1; //@line 15821
     HEAP8[$12 >> 0] = 10; //@line 15822
     $22 = 0; //@line 15823
     break;
    }
   }
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 15827
   $17 = ___overflow($1, 10) | 0; //@line 15828
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 647; //@line 15831
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 15833
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 15835
    sp = STACKTOP; //@line 15836
    return 0; //@line 15837
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 15839
    $22 = $17 >> 31; //@line 15841
    break;
   }
  }
 } while (0);
 if ($19 | 0) {
  ___unlockfile($1); //@line 15848
 }
 return $22 | 0; //@line 15850
}
function __ZN4mbed11InterruptInD0Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2448
 HEAP32[$0 >> 2] = 604; //@line 2449
 _gpio_irq_free($0 + 28 | 0); //@line 2451
 $3 = HEAP32[$0 + 68 >> 2] | 0; //@line 2453
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 2459
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2460
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 56 | 0); //@line 2461
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 100; //@line 2464
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2466
    sp = STACKTOP; //@line 2467
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2470
    break;
   }
  }
 } while (0);
 $10 = HEAP32[$0 + 52 >> 2] | 0; //@line 2476
 if (!$10) {
  __ZdlPv($0); //@line 2479
  return;
 }
 $14 = HEAP32[$10 + 8 >> 2] | 0; //@line 2484
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2485
 FUNCTION_TABLE_vi[$14 & 1023]($0 + 40 | 0); //@line 2486
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 101; //@line 2489
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 2491
  sp = STACKTOP; //@line 2492
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2495
 __ZdlPv($0); //@line 2496
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_238($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 5526
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5528
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5530
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5532
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5534
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5536
 $12 = $4 + 12 | 0; //@line 5538
 HEAP32[$4 >> 2] = 389; //@line 5539
 HEAP32[$4 + 4 >> 2] = 0; //@line 5541
 HEAP32[$4 + 8 >> 2] = $2; //@line 5543
 HEAP32[$12 >> 2] = 844; //@line 5544
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 5545
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($6, $2 + 1856 | 0, $4); //@line 5546
 if (!___async) {
  ___async_unwind = 0; //@line 5549
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 459; //@line 5551
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $12; //@line 5553
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $6; //@line 5555
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $2; //@line 5557
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 5559
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 5561
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $4; //@line 5563
 sp = STACKTOP; //@line 5564
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_144($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 28447
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28451
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28453
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28455
 $9 = $4 + 12 | 0; //@line 28457
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 28458
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 28459
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 11) | 0; //@line 28460
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 248; //@line 28463
  $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 28464
  HEAP32[$11 >> 2] = $9; //@line 28465
  $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 28466
  HEAP32[$12 >> 2] = $8; //@line 28467
  sp = STACKTOP; //@line 28468
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 28472
 ___async_unwind = 0; //@line 28473
 HEAP32[$ReallocAsyncCtx7 >> 2] = 248; //@line 28474
 $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 28475
 HEAP32[$11 >> 2] = $9; //@line 28476
 $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 28477
 HEAP32[$12 >> 2] = $8; //@line 28478
 sp = STACKTOP; //@line 28479
 return;
}
function __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $26 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20000
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20002
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20004
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20006
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20008
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20010
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20012
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20014
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$4 + 2004 >> 2] = 1; //@line 20020
  return;
 }
 if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($2) | 0) {
  HEAP32[$4 + 2060 >> 2] = 4; //@line 20026
  HEAP8[$4 + 2064 >> 0] = 1; //@line 20028
  __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($2); //@line 20029
 }
 $26 = $10 & 255; //@line 20034
 $27 = $4 + 1442 | 0; //@line 20035
 if (!(__ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh($4 + 756 | 0, $6 + $8 | 0, $26, $12, 128, $14, 1, $16, $27) | 0)) {
  HEAP32[$4 + 2012 >> 2] = $27; //@line 20040
  HEAP16[$4 + 2016 >> 1] = $26; //@line 20042
  HEAP8[$4 + 2018 >> 0] = 1; //@line 20044
  return;
 } else {
  HEAP32[$4 + 2004 >> 2] = 13; //@line 20048
  return;
 }
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_107($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 25371
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25375
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25377
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25379
 $9 = $4 + 12 | 0; //@line 25381
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 25382
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 25383
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 4) | 0; //@line 25384
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 236; //@line 25387
  $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 25388
  HEAP32[$11 >> 2] = $9; //@line 25389
  $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 25390
  HEAP32[$12 >> 2] = $8; //@line 25391
  sp = STACKTOP; //@line 25392
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 25396
 ___async_unwind = 0; //@line 25397
 HEAP32[$ReallocAsyncCtx7 >> 2] = 236; //@line 25398
 $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 25399
 HEAP32[$11 >> 2] = $9; //@line 25400
 $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 25401
 HEAP32[$12 >> 2] = $8; //@line 25402
 sp = STACKTOP; //@line 25403
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_105($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 25304
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25308
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25310
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25312
 $9 = $4 + 12 | 0; //@line 25314
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 25315
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 25316
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 3) | 0; //@line 25317
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 232; //@line 25320
  $11 = $ReallocAsyncCtx8 + 4 | 0; //@line 25321
  HEAP32[$11 >> 2] = $9; //@line 25322
  $12 = $ReallocAsyncCtx8 + 8 | 0; //@line 25323
  HEAP32[$12 >> 2] = $8; //@line 25324
  sp = STACKTOP; //@line 25325
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 25329
 ___async_unwind = 0; //@line 25330
 HEAP32[$ReallocAsyncCtx8 >> 2] = 232; //@line 25331
 $11 = $ReallocAsyncCtx8 + 4 | 0; //@line 25332
 HEAP32[$11 >> 2] = $9; //@line 25333
 $12 = $ReallocAsyncCtx8 + 8 | 0; //@line 25334
 HEAP32[$12 >> 2] = $8; //@line 25335
 sp = STACKTOP; //@line 25336
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 28214
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28218
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28220
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28222
 $9 = $4 + 12 | 0; //@line 28224
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 28225
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 28226
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 9) | 0; //@line 28227
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 240; //@line 28230
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 28231
  HEAP32[$11 >> 2] = $9; //@line 28232
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 28233
  HEAP32[$12 >> 2] = $8; //@line 28234
  sp = STACKTOP; //@line 28235
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 28239
 ___async_unwind = 0; //@line 28240
 HEAP32[$ReallocAsyncCtx9 >> 2] = 240; //@line 28241
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 28242
 HEAP32[$11 >> 2] = $9; //@line 28243
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 28244
 HEAP32[$12 >> 2] = $8; //@line 28245
 sp = STACKTOP; //@line 28246
 return;
}
function _mbed_vtracef__async_cb_318($0) {
 $0 = $0 | 0;
 var $$18 = 0, $10 = 0, $12 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 12398
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12400
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12402
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12404
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 12409
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12411
 HEAP32[$2 >> 2] = HEAP32[___async_retval >> 2]; //@line 12416
 $16 = _snprintf($4, $6, 12268, $2) | 0; //@line 12417
 $$18 = ($16 | 0) >= ($6 | 0) ? 0 : $16; //@line 12419
 $19 = $4 + $$18 | 0; //@line 12421
 $20 = $6 - $$18 | 0; //@line 12422
 if (($$18 | 0) > 0) {
  if (!(($$18 | 0) < 1 | ($20 | 0) < 1 | $10 ^ 1)) {
   _snprintf($19, $20, 12346, $12) | 0; //@line 12430
  }
 }
 $23 = HEAP32[174] | 0; //@line 12433
 $24 = HEAP32[167] | 0; //@line 12434
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 12435
 FUNCTION_TABLE_vi[$23 & 1023]($24); //@line 12436
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 135; //@line 12439
  sp = STACKTOP; //@line 12440
  return;
 }
 ___async_unwind = 0; //@line 12443
 HEAP32[$ReallocAsyncCtx7 >> 2] = 135; //@line 12444
 sp = STACKTOP; //@line 12445
 return;
}
function __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 18693
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18695
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18697
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18699
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18701
 HEAP32[$4 + 12 >> 2] = HEAP32[$2 >> 2]; //@line 18704
 _equeue_event_dtor($4, 267); //@line 18705
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 18706
 $10 = _equeue_post($6, 268, $4) | 0; //@line 18707
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 269; //@line 18710
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 18711
  HEAP32[$11 >> 2] = $2; //@line 18712
  $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 18713
  HEAP32[$12 >> 2] = $8; //@line 18714
  sp = STACKTOP; //@line 18715
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 18719
 ___async_unwind = 0; //@line 18720
 HEAP32[$ReallocAsyncCtx3 >> 2] = 269; //@line 18721
 $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 18722
 HEAP32[$11 >> 2] = $2; //@line 18723
 $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 18724
 HEAP32[$12 >> 2] = $8; //@line 18725
 sp = STACKTOP; //@line 18726
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 25237
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25241
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25243
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25245
 $9 = $4 + 12 | 0; //@line 25247
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 25248
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 25249
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 2) | 0; //@line 25250
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 228; //@line 25253
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 25254
  HEAP32[$11 >> 2] = $9; //@line 25255
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 25256
  HEAP32[$12 >> 2] = $8; //@line 25257
  sp = STACKTOP; //@line 25258
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 25262
 ___async_unwind = 0; //@line 25263
 HEAP32[$ReallocAsyncCtx9 >> 2] = 228; //@line 25264
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 25265
 HEAP32[$11 >> 2] = $9; //@line 25266
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 25267
 HEAP32[$12 >> 2] = $8; //@line 25268
 sp = STACKTOP; //@line 25269
 return;
}
function __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$pre$phiZ2D = 0, $26 = 0;
 if ($2) {
  HEAP8[$1 + 11 >> 0] = HEAP8[$0 + 12 >> 0] | 0; //@line 21577
  HEAP32[$1 + 720 >> 2] = HEAPU16[$0 + 36 >> 1]; //@line 21582
  HEAP32[$1 + 724 >> 2] = HEAPU16[$0 + 38 >> 1]; //@line 21587
  HEAP32[$1 + 728 >> 2] = HEAPU16[$0 + 40 >> 1]; //@line 21592
  HEAP32[$1 + 732 >> 2] = HEAPU16[$0 + 42 >> 1]; //@line 21597
  HEAP32[$1 + 736 >> 2] = HEAPU16[$0 + 44 >> 1]; //@line 21602
  $26 = $0 + 128 | 0; //@line 21603
  HEAP8[$1 + 753 >> 0] = (HEAPU8[$26 >> 0] | 0) >>> 1 & 1; //@line 21608
  $$pre$phiZ2D = $26; //@line 21609
 } else {
  $$pre$phiZ2D = $0 + 128 | 0; //@line 21612
 }
 HEAP8[$1 + 708 >> 0] = HEAP8[$0 + 23 >> 0] | 0; //@line 21617
 HEAP8[$1 + 709 >> 0] = HEAP8[$0 + 30 >> 0] | 0; //@line 21621
 HEAP8[$1 + 741 >> 0] = HEAP8[$0 + 34 >> 0] | 0; //@line 21625
 HEAP32[$1 + 744 >> 2] = HEAP32[$0 + 68 >> 2]; //@line 21629
 HEAP8[$1 + 748 >> 0] = HEAP8[$0 + 64 >> 0] | 0; //@line 21633
 HEAP8[$1 + 752 >> 0] = HEAP8[$$pre$phiZ2D >> 0] & 1; //@line 21637
 HEAP32[$1 + 756 >> 2] = HEAP32[$0 + 56 >> 2]; //@line 21641
 HEAP32[$1 + 760 >> 2] = HEAP32[$0 + 60 >> 2]; //@line 21645
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_53($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 21456
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21460
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21462
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21464
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[___async_retval >> 2]; //@line 21467
 $10 = HEAP32[$4 >> 2] | 0; //@line 21468
 $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 76 >> 2] | 0; //@line 21471
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 21472
 FUNCTION_TABLE_vi[$13 & 1023]($10); //@line 21473
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 515; //@line 21476
  $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 21477
  HEAP32[$14 >> 2] = $6; //@line 21478
  $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 21479
  HEAP32[$15 >> 2] = $8; //@line 21480
  sp = STACKTOP; //@line 21481
  return;
 }
 ___async_unwind = 0; //@line 21484
 HEAP32[$ReallocAsyncCtx7 >> 2] = 515; //@line 21485
 $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 21486
 HEAP32[$14 >> 2] = $6; //@line 21487
 $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 21488
 HEAP32[$15 >> 2] = $8; //@line 21489
 sp = STACKTOP; //@line 21490
 return;
}
function __ZN7LoRaMac16set_device_classERK14device_class_t__async_cb_197($0) {
 $0 = $0 | 0;
 var $16 = 0, $17 = 0, $2 = 0, $6 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 2543
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2545
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2549
 __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t(HEAP32[$0 + 8 >> 2] | 0, HEAP8[$2 + 1916 >> 0] | 0, HEAP8[$2 + 1884 >> 0] | 0, HEAP32[$2 + 1880 >> 2] | 0, $2 + 1964 | 0); //@line 2557
 if ((HEAP32[$6 >> 2] | 0) != 2) {
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 2564
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1836 | 0); //@line 2565
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 442; //@line 2568
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 2569
  HEAP32[$16 >> 2] = $2; //@line 2570
  $17 = $ReallocAsyncCtx5 + 8 | 0; //@line 2571
  HEAP32[$17 >> 2] = $6; //@line 2572
  sp = STACKTOP; //@line 2573
  return;
 }
 ___async_unwind = 0; //@line 2576
 HEAP32[$ReallocAsyncCtx5 >> 2] = 442; //@line 2577
 $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 2578
 HEAP32[$16 >> 2] = $2; //@line 2579
 $17 = $ReallocAsyncCtx5 + 8 | 0; //@line 2580
 HEAP32[$17 >> 2] = $6; //@line 2581
 sp = STACKTOP; //@line 2582
 return;
}
function __ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6993
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6995
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6997
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6999
 $7 = $2 + 12 | 0; //@line 7000
 $8 = HEAP32[$7 >> 2] | 0; //@line 7001
 if (!$8) {
  HEAP32[$4 >> 2] = 0; //@line 7004
  return;
 }
 $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 7008
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 7009
 FUNCTION_TABLE_vii[$11 & 15]($6, $2); //@line 7010
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 482; //@line 7013
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 7014
  HEAP32[$12 >> 2] = $7; //@line 7015
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 7016
  HEAP32[$13 >> 2] = $4; //@line 7017
  sp = STACKTOP; //@line 7018
  return;
 }
 ___async_unwind = 0; //@line 7021
 HEAP32[$ReallocAsyncCtx2 >> 2] = 482; //@line 7022
 $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 7023
 HEAP32[$12 >> 2] = $7; //@line 7024
 $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 7025
 HEAP32[$13 >> 2] = $4; //@line 7026
 sp = STACKTOP; //@line 7027
 return;
}
function __ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 1910
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1914
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1916
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1918
 $9 = $4 + 12 | 0; //@line 1920
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 1921
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 1922
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 11) | 0; //@line 1923
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 300; //@line 1926
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 1927
  HEAP32[$11 >> 2] = $9; //@line 1928
  $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 1929
  HEAP32[$12 >> 2] = $8; //@line 1930
  sp = STACKTOP; //@line 1931
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 1935
 ___async_unwind = 0; //@line 1936
 HEAP32[$ReallocAsyncCtx3 >> 2] = 300; //@line 1937
 $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 1938
 HEAP32[$11 >> 2] = $9; //@line 1939
 $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 1940
 HEAP32[$12 >> 2] = $8; //@line 1941
 sp = STACKTOP; //@line 1942
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $4 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9407
 STACKTOP = STACKTOP + 16 | 0; //@line 9408
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9408
 if (!$1) {
  $$0 = -1003; //@line 9412
 } else {
  _mbed_tracef(16, 12482, 12809, sp); //@line 9414
  HEAP32[$0 + 3136 >> 2] = $1; //@line 9416
  $4 = $0 + 2480 | 0; //@line 9417
  $6 = (HEAP32[$4 >> 2] | 0) == 0; //@line 9419
  HEAP32[$4 >> 2] = 2; //@line 9420
  if ($6) {
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 9422
   $7 = __ZN7LoRaMac10initializeEPN6events10EventQueueE($0, $1) | 0; //@line 9423
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 322; //@line 9426
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 9428
    sp = STACKTOP; //@line 9429
    STACKTOP = sp; //@line 9430
    return 0; //@line 9430
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 9432
   if (!$7) {
    HEAP32[$4 >> 2] = 2; //@line 9435
    $$0 = 0; //@line 9436
   } else {
    $$0 = $7; //@line 9438
   }
  } else {
   $$0 = 0; //@line 9441
  }
 }
 STACKTOP = sp; //@line 9444
 return $$0 | 0; //@line 9444
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6664
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6666
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6668
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6670
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6672
 HEAP32[$4 + 12 >> 2] = HEAP32[$2 >> 2]; //@line 6675
 _equeue_event_dtor($4, 267); //@line 6676
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 6677
 $10 = _equeue_post($6, 268, $4) | 0; //@line 6678
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 371; //@line 6681
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 6682
  HEAP32[$11 >> 2] = $2; //@line 6683
  $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 6684
  HEAP32[$12 >> 2] = $8; //@line 6685
  sp = STACKTOP; //@line 6686
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 6690
 ___async_unwind = 0; //@line 6691
 HEAP32[$ReallocAsyncCtx3 >> 2] = 371; //@line 6692
 $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 6693
 HEAP32[$11 >> 2] = $2; //@line 6694
 $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 6695
 HEAP32[$12 >> 2] = $8; //@line 6696
 sp = STACKTOP; //@line 6697
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_51($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21359
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21361
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21365
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21367
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21369
 $11 = HEAP32[$2 >> 2] | 0; //@line 21370
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 44 >> 2] | 0; //@line 21373
 $15 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 21374
 $17 = HEAP16[$15 >> 1] & 255; //@line 21376
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 21377
 FUNCTION_TABLE_viii[$14 & 7]($11, 1, $17); //@line 21378
 if (!___async) {
  ___async_unwind = 0; //@line 21381
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 513; //@line 21383
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 21385
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $15; //@line 21387
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = 1; //@line 21389
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $6; //@line 21391
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $8; //@line 21393
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $10; //@line 21395
 sp = STACKTOP; //@line 21396
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_50($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21315
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21317
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21321
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21323
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21325
 $11 = HEAP32[$2 >> 2] | 0; //@line 21326
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 44 >> 2] | 0; //@line 21329
 $15 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 21330
 $17 = HEAP16[$15 >> 1] & 255; //@line 21332
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 21333
 FUNCTION_TABLE_viii[$14 & 7]($11, 0, $17); //@line 21334
 if (!___async) {
  ___async_unwind = 0; //@line 21337
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 513; //@line 21339
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 21341
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $15; //@line 21343
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = 0; //@line 21345
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $6; //@line 21347
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $8; //@line 21349
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $10; //@line 21351
 sp = STACKTOP; //@line 21352
 return;
}
function __ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$1 = 0, $12 = 0, $21 = 0, $3 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 20164
 $3 = HEAP32[$0 + 4 >> 2] | 0; //@line 20166
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 64 >> 2] | 0; //@line 20169
 $8 = HEAP32[$1 + 4 >> 2] | 0; //@line 20171
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 20172
 $9 = FUNCTION_TABLE_iii[$6 & 15]($3, $8) | 0; //@line 20173
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 516; //@line 20176
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 20178
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 20180
  sp = STACKTOP; //@line 20181
  return 0; //@line 20182
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 20184
  $$ = $9 ? 7 : 6; //@line 20185
  $12 = HEAP8[$1 >> 0] | 0; //@line 20186
  $$1 = ($12 << 24 >> 24 >= (HEAP8[$0 + 28 >> 0] | 0) ? $12 << 24 >> 24 <= (HEAP8[$0 + 29 >> 0] | 0) : 0) ? $$ : $$ & 5; //@line 20195
  $21 = HEAP8[$1 + 1 >> 0] | 0; //@line 20197
  return (($21 << 24 >> 24 >= (HEAP8[$0 + 32 >> 0] | 0) ? $21 << 24 >> 24 <= (HEAP8[$0 + 33 >> 0] | 0) : 0) ? $$1 : $$1 & 3) | 0; //@line 20207
 }
 return 0; //@line 20209
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_92($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23543
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23545
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 23547
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23549
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23551
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23553
 $12 = (HEAP8[___async_retval >> 0] | 0) == 0; //@line 23556
 $13 = HEAP32[$2 >> 2] | 0; //@line 23557
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 76 >> 2] | 0; //@line 23560
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 23561
 FUNCTION_TABLE_vi[$16 & 1023]($13); //@line 23562
 if (!___async) {
  ___async_unwind = 0; //@line 23565
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 502; //@line 23567
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 23569
 HEAP8[$ReallocAsyncCtx3 + 8 >> 0] = $4; //@line 23571
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 23573
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 23575
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 23577
 HEAP8[$ReallocAsyncCtx3 + 24 >> 0] = $12 & 1; //@line 23580
 sp = STACKTOP; //@line 23581
 return;
}
function __ZN7LoRaPHY26get_next_lower_tx_datarateEa($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1$i = 0, $$1$lcssa$i = 0, $$18$i = 0, $$19$i = 0, $10 = 0, $18 = 0, $19 = 0, $21 = 0, $8 = 0, $9 = 0, label = 0;
 $8 = $0 + 88 | 0; //@line 21662
 $9 = $1 & 255; //@line 21663
 $10 = HEAP8[((HEAP8[$0 + 128 >> 0] & 1) == 0 ? $0 + 26 | 0 : $0 + 35 | 0) >> 0] | 0; //@line 21664
 $$18$i = ($9 | 0) == ($10 | 0) ? $1 : $9 + 255 & 255; //@line 21668
 if (($$18$i & 255 | 0) == ($10 | 0)) {
  $$1$lcssa$i = $$18$i; //@line 21672
  return $$1$lcssa$i | 0; //@line 21673
 }
 $18 = HEAPU8[$0 + 92 >> 0] | 0; //@line 21677
 $$19$i = $$18$i; //@line 21678
 while (1) {
  $19 = $$19$i << 24 >> 24; //@line 21680
  if (($19 | 0) < ($18 | 0)) {
   if (HEAP8[(HEAP32[$8 >> 2] | 0) + $19 >> 0] | 0) {
    $$1$lcssa$i = $$19$i; //@line 21688
    label = 6; //@line 21689
    break;
   }
  }
  $21 = $$19$i & 255; //@line 21693
  $$1$i = ($21 | 0) == ($10 | 0) ? $$19$i : $21 + 255 & 255; //@line 21697
  if (($$1$i & 255 | 0) == ($10 | 0)) {
   $$1$lcssa$i = $$1$i; //@line 21701
   label = 6; //@line 21702
   break;
  } else {
   $$19$i = $$1$i; //@line 21705
  }
 }
 if ((label | 0) == 6) {
  return $$1$lcssa$i | 0; //@line 21709
 }
 return 0; //@line 21711
}
function __ZN7LoRaMac24get_max_possible_tx_sizeEh__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$09 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $28 = 0, $6 = 0, $8 = 0, $or$cond$i = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3044
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3048
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3050
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3052
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 3054
 $14 = (HEAP32[$0 + 8 >> 2] | 0) + 1173 | 0; //@line 3056
 $17 = __ZN7LoRaPHY15get_max_payloadEhb($6, HEAP8[$2 >> 0] | 0, (HEAP8[$14 >> 0] | 0) != 0) | 0; //@line 3059
 $18 = $17 & 255; //@line 3060
 $19 = $8 & 255; //@line 3061
 if ($19 >>> 0 > $18 >>> 0) {
  __ZN14LoRaMacCommand20clear_command_bufferEv($10); //@line 3064
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($10); //@line 3065
  $$0 = 0; //@line 3066
  $$09 = $17; //@line 3066
 } else {
  $$0 = $19; //@line 3070
  $$09 = $18 - $8 & 255; //@line 3070
 }
 $28 = $$0 + ($12 & 255) | 0; //@line 3077
 $or$cond$i = $28 >>> 0 < 256 & $28 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb($6, HEAP8[$2 >> 0] | 0, (HEAP8[$14 >> 0] | 0) != 0) | 0) & 255) >>> 0; //@line 3081
 HEAP8[___async_retval >> 0] = $or$cond$i ? $17 : $$09; //@line 3084
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_263($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6614
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6620
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6622
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6624
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6626
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 1) {
  return;
 }
 $14 = (HEAP32[$0 + 8 >> 2] | 0) + 24 | 0; //@line 6631
 $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 6633
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($14, $6, $8, $10); //@line 6634
 if (!___async) {
  ___async_unwind = 0; //@line 6637
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 670; //@line 6639
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $6 + 54; //@line 6641
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $14; //@line 6643
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $12; //@line 6645
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $6; //@line 6647
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $8; //@line 6649
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $10; //@line 6651
 sp = STACKTOP; //@line 6652
 return;
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26674
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26676
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 26678
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26680
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26682
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26684
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26686
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26688
 $17 = HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] | 0; //@line 26691
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 26692
 FUNCTION_TABLE_viiiiiiiiiiiiii[$17 & 1]($2, 0, $4, 0, 0, 4800, 0, 5, 0, 0, 0, 0, 0, $6); //@line 26693
 if (!___async) {
  ___async_unwind = 0; //@line 26696
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 65; //@line 26698
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 26700
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $8; //@line 26702
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 26704
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $12; //@line 26706
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $14; //@line 26708
 sp = STACKTOP; //@line 26709
 return;
}
function __ZN4mbed5TimerC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2760
 HEAP32[$0 >> 2] = 0; //@line 2761
 $1 = $0 + 8 | 0; //@line 2762
 $2 = $0 + 16 | 0; //@line 2763
 HEAP32[$1 >> 2] = 0; //@line 2764
 HEAP32[$1 + 4 >> 2] = 0; //@line 2764
 HEAP32[$1 + 8 >> 2] = 0; //@line 2764
 HEAP32[$1 + 12 >> 2] = 0; //@line 2764
 $4 = $0 + 24 | 0; //@line 2766
 HEAP32[$4 >> 2] = _get_us_ticker_data() | 0; //@line 2767
 HEAP8[$0 + 28 >> 0] = 1; //@line 2769
 $6 = HEAP32[$4 >> 2] | 0; //@line 2770
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2771
 $7 = _ticker_read_us($6) | 0; //@line 2772
 $8 = tempRet0; //@line 2773
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 112; //@line 2776
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 2778
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 2780
  sp = STACKTOP; //@line 2781
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2784
  $11 = $1; //@line 2785
  HEAP32[$11 >> 2] = $7; //@line 2787
  HEAP32[$11 + 4 >> 2] = $8; //@line 2790
  $15 = $2; //@line 2791
  HEAP32[$15 >> 2] = 0; //@line 2793
  HEAP32[$15 + 4 >> 2] = 0; //@line 2796
  return;
 }
}
function __ZN16SX1276_LoRaRadio11rx_done_irqEv($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $18 = 0, $19 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1591
 STACKTOP = STACKTOP + 16 | 0; //@line 1592
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1592
 _mbed_tracef(16, 10996, 11513, sp); //@line 1594
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 1596
 HEAP8[$0 + 688 >> 0] = 0; //@line 1598
 $4 = HEAP32[$0 + 788 >> 2] | 0; //@line 1600
 if (!$4) {
  STACKTOP = sp; //@line 1603
  return;
 }
 $7 = HEAP32[$4 + 44 >> 2] | 0; //@line 1606
 if (!$7) {
  STACKTOP = sp; //@line 1609
  return;
 }
 $13 = HEAPU8[$0 + 782 >> 0] | 0; //@line 1615
 $16 = HEAP8[$0 + 781 >> 0] | 0; //@line 1618
 $18 = HEAP8[$0 + 780 >> 0] | 0; //@line 1620
 $19 = HEAP32[$7 >> 2] | 0; //@line 1621
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1622
 FUNCTION_TABLE_viiiii[$19 & 7]($4 + 32 | 0, $0 + 792 | 0, $13, $16, $18); //@line 1623
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 81; //@line 1626
  sp = STACKTOP; //@line 1627
  STACKTOP = sp; //@line 1628
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1630
 STACKTOP = sp; //@line 1631
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $12 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18530
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18532
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18534
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18538
 if (!(HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0)) {
  $$037$off038 = 4; //@line 18542
  label = 4; //@line 18543
 } else {
  if (!(HEAP8[HEAP32[$0 + 20 >> 2] >> 0] | 0)) {
   $$037$off038 = 3; //@line 18548
   label = 4; //@line 18549
  } else {
   $$037$off039 = 3; //@line 18551
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$6 >> 2] = $4; //@line 18555
  $17 = $8 + 40 | 0; //@line 18556
  HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1; //@line 18559
  if ((HEAP32[$8 + 36 >> 2] | 0) == 1) {
   if ((HEAP32[$8 + 24 >> 2] | 0) == 2) {
    HEAP8[$8 + 54 >> 0] = 1; //@line 18569
    $$037$off039 = $$037$off038; //@line 18570
   } else {
    $$037$off039 = $$037$off038; //@line 18572
   }
  } else {
   $$037$off039 = $$037$off038; //@line 18575
  }
 }
 HEAP32[$12 >> 2] = $$037$off039; //@line 18578
 return;
}
function __ZN7LoRaMac16set_device_classERK14device_class_t__async_cb_199($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2623
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2625
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2627
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2629
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  return;
 }
 $9 = (HEAP8[$2 >> 0] | 0) != 0; //@line 2637
 $11 = HEAP32[$4 + 1888 >> 2] | 0; //@line 2639
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 2640
 __ZN7LoRaPHY15setup_rx_windowEbj($6, $9, $11); //@line 2641
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 444; //@line 2644
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 2645
  HEAP32[$12 >> 2] = $2; //@line 2646
  $13 = $ReallocAsyncCtx + 8 | 0; //@line 2647
  HEAP32[$13 >> 2] = $4; //@line 2648
  sp = STACKTOP; //@line 2649
  return;
 }
 ___async_unwind = 0; //@line 2652
 HEAP32[$ReallocAsyncCtx >> 2] = 444; //@line 2653
 $12 = $ReallocAsyncCtx + 4 | 0; //@line 2654
 HEAP32[$12 >> 2] = $2; //@line 2655
 $13 = $ReallocAsyncCtx + 8 | 0; //@line 2656
 HEAP32[$13 >> 2] = $4; //@line 2657
 sp = STACKTOP; //@line 2658
 return;
}
function ___strerror_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $7 = 0, label = 0, $$113$looptemp = 0;
 $$016 = 0; //@line 14828
 while (1) {
  if ((HEAPU8[15727 + $$016 >> 0] | 0) == ($0 | 0)) {
   label = 2; //@line 14835
   break;
  }
  $7 = $$016 + 1 | 0; //@line 14838
  if (($7 | 0) == 87) {
   $$01214 = 15815; //@line 14841
   $$115 = 87; //@line 14841
   label = 5; //@line 14842
   break;
  } else {
   $$016 = $7; //@line 14845
  }
 }
 if ((label | 0) == 2) {
  if (!$$016) {
   $$012$lcssa = 15815; //@line 14851
  } else {
   $$01214 = 15815; //@line 14853
   $$115 = $$016; //@line 14853
   label = 5; //@line 14854
  }
 }
 if ((label | 0) == 5) {
  while (1) {
   label = 0; //@line 14859
   $$113 = $$01214; //@line 14860
   do {
    $$113$looptemp = $$113;
    $$113 = $$113 + 1 | 0; //@line 14864
   } while ((HEAP8[$$113$looptemp >> 0] | 0) != 0);
   $$115 = $$115 + -1 | 0; //@line 14871
   if (!$$115) {
    $$012$lcssa = $$113; //@line 14874
    break;
   } else {
    $$01214 = $$113; //@line 14877
    label = 5; //@line 14878
   }
  }
 }
 return ___lctrans($$012$lcssa, HEAP32[$1 + 20 >> 2] | 0) | 0; //@line 14885
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $19 = 0;
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 16158
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 16167
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 16172
      HEAP32[$13 >> 2] = $2; //@line 16173
      $19 = $1 + 40 | 0; //@line 16174
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1; //@line 16177
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 16187
       }
      }
      HEAP32[$1 + 44 >> 2] = 4; //@line 16191
      break;
     }
    }
    if (($3 | 0) == 1) {
     HEAP32[$1 + 32 >> 2] = 1; //@line 16198
    }
   }
  }
 } while (0);
 return;
}
function __ZL25default_terminate_handlerv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 3109
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3111
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3113
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3115
 $8 = HEAP32[$0 + 20 >> 2] | 0; //@line 3117
 $10 = HEAP32[$0 + 24 >> 2] | 0; //@line 3119
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[$4 >> 2] = 17755; //@line 3124
  HEAP32[$4 + 4 >> 2] = $6; //@line 3126
  _abort_message(17664, $4); //@line 3127
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 3130
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0; //@line 3133
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 3134
 $16 = FUNCTION_TABLE_ii[$15 & 15]($12) | 0; //@line 3135
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 3139
  ___async_unwind = 0; //@line 3140
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 649; //@line 3142
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 3144
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 3146
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 3148
 sp = STACKTOP; //@line 3149
 return;
}
function _mbedtls_gcm_setkey__async_cb_294($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 9301
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9303
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9305
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9307
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9309
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9311
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9313
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 9315
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 9319
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 9322
 $15 = _mbedtls_cipher_setkey($2, $4, $6, 1) | 0; //@line 9323
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 9327
  ___async_unwind = 0; //@line 9328
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 577; //@line 9330
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 9332
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 9334
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 9336
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $12; //@line 9338
 sp = STACKTOP; //@line 9339
 return;
}
function __ZN7LoRaMac15open_rx2_windowEv__async_cb_289($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8648
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8650
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8652
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8654
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  return;
 }
 $9 = (HEAP8[$2 >> 0] | 0) != 0; //@line 8662
 $11 = HEAP32[$4 + 1888 >> 2] | 0; //@line 8664
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 8665
 __ZN7LoRaPHY15setup_rx_windowEbj($6, $9, $11); //@line 8666
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 365; //@line 8669
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 8670
  HEAP32[$12 >> 2] = $2; //@line 8671
  $13 = $ReallocAsyncCtx + 8 | 0; //@line 8672
  HEAP32[$13 >> 2] = $4; //@line 8673
  sp = STACKTOP; //@line 8674
  return;
 }
 ___async_unwind = 0; //@line 8677
 HEAP32[$ReallocAsyncCtx >> 2] = 365; //@line 8678
 $12 = $ReallocAsyncCtx + 4 | 0; //@line 8679
 HEAP32[$12 >> 2] = $2; //@line 8680
 $13 = $ReallocAsyncCtx + 8 | 0; //@line 8681
 HEAP32[$13 >> 2] = $4; //@line 8682
 sp = STACKTOP; //@line 8683
 return;
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_193($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $28 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 2334
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2336
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2342
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 2344
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 12 >> 2] >> 2] = (HEAPU8[$2 + 18 >> 0] | 0) << 16 | (HEAPU8[$2 + 19 >> 0] | 0) << 24 | (HEAPU8[$2 + 17 >> 0] | 0) << 8 | (HEAPU8[HEAP32[$0 + 8 >> 2] >> 0] | 0); //@line 2364
  $$0 = 0; //@line 2365
 } else {
  $$0 = $AsyncRetVal; //@line 2367
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 2369
 _mbedtls_cipher_free($8); //@line 2370
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 493; //@line 2373
  $28 = $ReallocAsyncCtx5 + 4 | 0; //@line 2374
  HEAP32[$28 >> 2] = $$0; //@line 2375
  sp = STACKTOP; //@line 2376
  return;
 }
 ___async_unwind = 0; //@line 2379
 HEAP32[$ReallocAsyncCtx5 >> 2] = 493; //@line 2380
 $28 = $ReallocAsyncCtx5 + 4 | 0; //@line 2381
 HEAP32[$28 >> 2] = $$0; //@line 2382
 sp = STACKTOP; //@line 2383
 return;
}
function _mbedtls_gcm_setkey__async_cb_295($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 9346
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9348
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9350
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9352
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9354
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9356
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9358
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9360
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 9361
 $15 = _mbedtls_cipher_setup($2, $4) | 0; //@line 9362
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 9366
  ___async_unwind = 0; //@line 9367
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 576; //@line 9369
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 9371
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $6; //@line 9373
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $8; //@line 9375
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $10; //@line 9377
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $12; //@line 9379
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $14; //@line 9381
 sp = STACKTOP; //@line 9382
 return;
}
function __ZN4mbed11InterruptInD2Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2397
 HEAP32[$0 >> 2] = 604; //@line 2398
 _gpio_irq_free($0 + 28 | 0); //@line 2400
 $3 = HEAP32[$0 + 68 >> 2] | 0; //@line 2402
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 2408
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2409
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 56 | 0); //@line 2410
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 98; //@line 2413
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2415
    sp = STACKTOP; //@line 2416
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2419
    break;
   }
  }
 } while (0);
 $10 = HEAP32[$0 + 52 >> 2] | 0; //@line 2425
 if (!$10) {
  return;
 }
 $14 = HEAP32[$10 + 8 >> 2] | 0; //@line 2432
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2433
 FUNCTION_TABLE_vi[$14 & 1023]($0 + 40 | 0); //@line 2434
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 99; //@line 2437
  sp = STACKTOP; //@line 2438
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2441
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23502
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23504
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 23506
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23508
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23510
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23512
 $11 = HEAP32[$2 >> 2] | 0; //@line 23513
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 40 >> 2] | 0; //@line 23516
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 23517
 $15 = FUNCTION_TABLE_ii[$14 & 15]($11) | 0; //@line 23518
 if (!___async) {
  HEAP8[___async_retval >> 0] = $15; //@line 23522
  ___async_unwind = 0; //@line 23523
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 501; //@line 23525
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 23527
 HEAP8[$ReallocAsyncCtx2 + 8 >> 0] = $4; //@line 23529
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 23531
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 23533
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 23535
 sp = STACKTOP; //@line 23536
 return;
}
function _strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $5 = 0;
 $2 = HEAP8[$1 >> 0] | 0; //@line 14901
 do {
  if (!($2 << 24 >> 24)) {
   $$0 = $0; //@line 14905
  } else {
   $5 = _strchr($0, $2 << 24 >> 24) | 0; //@line 14908
   if (!$5) {
    $$0 = 0; //@line 14911
   } else {
    if (!(HEAP8[$1 + 1 >> 0] | 0)) {
     $$0 = $5; //@line 14917
    } else {
     if (!(HEAP8[$5 + 1 >> 0] | 0)) {
      $$0 = 0; //@line 14923
     } else {
      if (!(HEAP8[$1 + 2 >> 0] | 0)) {
       $$0 = _twobyte_strstr($5, $1) | 0; //@line 14930
       break;
      }
      if (!(HEAP8[$5 + 2 >> 0] | 0)) {
       $$0 = 0; //@line 14937
      } else {
       if (!(HEAP8[$1 + 3 >> 0] | 0)) {
        $$0 = _threebyte_strstr($5, $1) | 0; //@line 14944
        break;
       }
       if (!(HEAP8[$5 + 3 >> 0] | 0)) {
        $$0 = 0; //@line 14951
       } else {
        if (!(HEAP8[$1 + 4 >> 0] | 0)) {
         $$0 = _fourbyte_strstr($5, $1) | 0; //@line 14958
         break;
        } else {
         $$0 = _twoway_strstr($5, $1) | 0; //@line 14962
         break;
        }
       }
      }
     }
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 14972
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_283($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $28 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 8378
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8380
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8386
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 8388
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 12 >> 2] >> 2] = (HEAPU8[$2 + 18 >> 0] | 0) << 16 | (HEAPU8[$2 + 19 >> 0] | 0) << 24 | (HEAPU8[$2 + 17 >> 0] | 0) << 8 | (HEAPU8[HEAP32[$0 + 8 >> 2] >> 0] | 0); //@line 8408
  $$0 = 0; //@line 8409
 } else {
  $$0 = $AsyncRetVal; //@line 8411
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 8413
 _mbedtls_cipher_free($8); //@line 8414
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 488; //@line 8417
  $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 8418
  HEAP32[$28 >> 2] = $$0; //@line 8419
  sp = STACKTOP; //@line 8420
  return;
 }
 ___async_unwind = 0; //@line 8423
 HEAP32[$ReallocAsyncCtx6 >> 2] = 488; //@line 8424
 $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 8425
 HEAP32[$28 >> 2] = $$0; //@line 8426
 sp = STACKTOP; //@line 8427
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7917
 $1 = $0 + 12 | 0; //@line 7918
 $2 = HEAP32[$1 >> 2] | 0; //@line 7919
 do {
  if (!$2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7923
   _mbed_assert_internal(14973, 14978, 528); //@line 7924
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 272; //@line 7927
    HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 7929
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 7931
    sp = STACKTOP; //@line 7932
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7935
    $7 = HEAP32[$1 >> 2] | 0; //@line 7937
    break;
   }
  } else {
   $7 = $2; //@line 7941
  }
 } while (0);
 $6 = HEAP32[$7 >> 2] | 0; //@line 7944
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7945
 FUNCTION_TABLE_vi[$6 & 1023]($0); //@line 7946
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 273; //@line 7949
  sp = STACKTOP; //@line 7950
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7953
  return;
 }
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26624
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26626
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26628
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26630
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26634
 $11 = $2 + 12 | 0; //@line 26636
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 16 >> 2] >> 2]; //@line 26637
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 26638
 $12 = _equeue_alloc($10, 16) | 0; //@line 26639
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 26643
  ___async_unwind = 0; //@line 26644
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 546; //@line 26646
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $11; //@line 26648
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $6; //@line 26650
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $10; //@line 26652
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $4; //@line 26654
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $11; //@line 26656
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $2; //@line 26658
 sp = STACKTOP; //@line 26659
 return;
}
function __ZN4mbed6TickerD0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7432
 HEAP32[$0 >> 2] = 10224; //@line 7433
 $1 = $0 + 40 | 0; //@line 7434
 _emscripten_asm_const_ii(14, $1 | 0) | 0; //@line 7435
 $4 = HEAP32[$0 + 52 >> 2] | 0; //@line 7437
 do {
  if ($4 | 0) {
   $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 7442
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7443
   FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 7444
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 625; //@line 7447
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7449
    sp = STACKTOP; //@line 7450
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7453
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7458
 __ZN4mbed10TimerEventD2Ev($0); //@line 7459
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 626; //@line 7462
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 7464
  sp = STACKTOP; //@line 7465
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7468
  __ZdlPv($0); //@line 7469
  return;
 }
}
function __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 18615
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18619
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18621
 $7 = $4 + 12 | 0; //@line 18623
 HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 18624
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 18625
 __ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($6, $4); //@line 18626
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 405; //@line 18629
  $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 18630
  HEAP32[$8 >> 2] = $7; //@line 18631
  $9 = $ReallocAsyncCtx3 + 8 | 0; //@line 18632
  HEAP32[$9 >> 2] = $4; //@line 18633
  sp = STACKTOP; //@line 18634
  return;
 }
 ___async_unwind = 0; //@line 18637
 HEAP32[$ReallocAsyncCtx3 >> 2] = 405; //@line 18638
 $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 18639
 HEAP32[$8 >> 2] = $7; //@line 18640
 $9 = $ReallocAsyncCtx3 + 8 | 0; //@line 18641
 HEAP32[$9 >> 2] = $4; //@line 18642
 sp = STACKTOP; //@line 18643
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_135($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 28046
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28050
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28052
 $7 = $6 + 12 | 0; //@line 28054
 HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 28055
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 28056
 __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($4, $6); //@line 28057
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 339; //@line 28060
  $8 = $ReallocAsyncCtx9 + 4 | 0; //@line 28061
  HEAP32[$8 >> 2] = $7; //@line 28062
  $9 = $ReallocAsyncCtx9 + 8 | 0; //@line 28063
  HEAP32[$9 >> 2] = $6; //@line 28064
  sp = STACKTOP; //@line 28065
  return;
 }
 ___async_unwind = 0; //@line 28068
 HEAP32[$ReallocAsyncCtx9 >> 2] = 339; //@line 28069
 $8 = $ReallocAsyncCtx9 + 4 | 0; //@line 28070
 HEAP32[$8 >> 2] = $7; //@line 28071
 $9 = $ReallocAsyncCtx9 + 8 | 0; //@line 28072
 HEAP32[$9 >> 2] = $6; //@line 28073
 sp = STACKTOP; //@line 28074
 return;
}
function _mbed_vtracef__async_cb_324($0) {
 $0 = $0 | 0;
 var $3 = 0, $5 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 12783
 $3 = HEAP32[175] | 0; //@line 12787
 if (HEAP8[$0 + 4 >> 0] & 1 & ($3 | 0) != 0) {
  $5 = HEAP32[167] | 0; //@line 12791
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 12792
  FUNCTION_TABLE_vi[$3 & 1023]($5); //@line 12793
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 128; //@line 12796
   sp = STACKTOP; //@line 12797
   return;
  }
  ___async_unwind = 0; //@line 12800
  HEAP32[$ReallocAsyncCtx2 >> 2] = 128; //@line 12801
  sp = STACKTOP; //@line 12802
  return;
 } else {
  $6 = HEAP32[174] | 0; //@line 12805
  $7 = HEAP32[167] | 0; //@line 12806
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 12807
  FUNCTION_TABLE_vi[$6 & 1023]($7); //@line 12808
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 130; //@line 12811
   sp = STACKTOP; //@line 12812
   return;
  }
  ___async_unwind = 0; //@line 12815
  HEAP32[$ReallocAsyncCtx4 >> 2] = 130; //@line 12816
  sp = STACKTOP; //@line 12817
  return;
 }
}
function _fourbyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$lcssa = 0, $$sink21$lcssa = 0, $$sink2123 = 0, $18 = 0, $32 = 0, $33 = 0, $35 = 0, $39 = 0, $40 = 0, $41 = 0;
 $18 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8 | (HEAPU8[$1 + 3 >> 0] | 0); //@line 15097
 $32 = $0 + 3 | 0; //@line 15111
 $33 = HEAP8[$32 >> 0] | 0; //@line 15112
 $35 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | (HEAPU8[$0 + 2 >> 0] | 0) << 8 | $33 & 255; //@line 15114
 if ($33 << 24 >> 24 == 0 | ($35 | 0) == ($18 | 0)) {
  $$lcssa = $33; //@line 15119
  $$sink21$lcssa = $32; //@line 15119
 } else {
  $$sink2123 = $32; //@line 15121
  $39 = $35; //@line 15121
  while (1) {
   $40 = $$sink2123 + 1 | 0; //@line 15124
   $41 = HEAP8[$40 >> 0] | 0; //@line 15125
   $39 = $39 << 8 | $41 & 255; //@line 15127
   if ($41 << 24 >> 24 == 0 | ($39 | 0) == ($18 | 0)) {
    $$lcssa = $41; //@line 15132
    $$sink21$lcssa = $40; //@line 15132
    break;
   } else {
    $$sink2123 = $40; //@line 15135
   }
  }
 }
 return ($$lcssa << 24 >> 24 ? $$sink21$lcssa + -3 | 0 : 0) | 0; //@line 15142
}
function __ZN12LoRaWANStack23process_connected_stateEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 3265
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3269
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3271
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3273
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3275
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3277
 $13 = $4 + 12 | 0; //@line 3279
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 3280
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 3281
 $14 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 0) | 0; //@line 3282
 if (!___async) {
  HEAP32[___async_retval >> 2] = $14; //@line 3286
  ___async_unwind = 0; //@line 3287
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 313; //@line 3289
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $13; //@line 3291
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $8; //@line 3293
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $10; //@line 3295
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $12; //@line 3297
 sp = STACKTOP; //@line 3298
 return;
}
function __ZN18LoRaMacChannelPlan11remove_planEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 21876
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21878
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21880
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21882
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21884
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21886
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[___async_retval >> 2] = -1003; //@line 21892
  return;
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 21895
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 21896
 __ZN7LoRaPHY18put_radio_to_sleepEv($12); //@line 21897
 if (!___async) {
  ___async_unwind = 0; //@line 21900
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 472; //@line 21902
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 21904
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 21906
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 21908
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 21910
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 21912
 sp = STACKTOP; //@line 21913
 return;
}
function __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0) {
 $0 = $0 | 0;
 var $13 = 0, sp = 0;
 sp = STACKTOP; //@line 1533
 STACKTOP = STACKTOP + 16 | 0; //@line 1534
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1534
 _mbed_tracef(16, 10996, 11111, sp); //@line 1536
 if ((HEAP32[$0 + 652 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 + 484 >> 2] | 0, 0) | 0; //@line 1543
 }
 if ((HEAP32[$0 + 656 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 + 508 >> 2] | 0, 0) | 0; //@line 1551
 }
 if ((HEAP32[$0 + 672 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 + 604 >> 2] | 0, 0) | 0; //@line 1559
 }
 $13 = $0 + 660 | 0; //@line 1561
 if ((HEAP32[$13 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(5, HEAP32[$0 + 532 >> 2] | 0, 0) | 0; //@line 1567
  if ((HEAP32[$13 >> 2] | 0) != -1) {
   _emscripten_asm_const_iii(5, HEAP32[$0 + 556 >> 2] | 0, 0) | 0; //@line 1573
  }
 }
 if ((HEAP32[$0 + 668 >> 2] | 0) == -1) {
  STACKTOP = sp; //@line 1580
  return;
 }
 _emscripten_asm_const_iii(5, HEAP32[$0 + 580 >> 2] | 0, 0) | 0; //@line 1584
 STACKTOP = sp; //@line 1585
 return;
}
function __ZN7LoRaMac23message_integrity_checkEPKhtPhjPjS1___async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0$expand_i1_val = 0, $12 = 0, $23 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26129
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26131
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26135
 if ((HEAP32[$0 + 8 >> 2] | 0) != (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0)) {
  HEAP32[$6 + 2004 >> 2] = 12; //@line 26140
  $$0 = 0; //@line 26141
  $23 = ___async_retval; //@line 26142
  $$0$expand_i1_val = $$0 & 1; //@line 26143
  HEAP8[$23 >> 0] = $$0$expand_i1_val; //@line 26144
  return;
 }
 if ($8 >>> 0 < ((__ZN7LoRaPHY29get_maximum_frame_counter_gapEv($6 + 4 | 0) | 0) & 65535) >>> 0) {
  $$0 = 1; //@line 26152
  $23 = ___async_retval; //@line 26153
  $$0$expand_i1_val = $$0 & 1; //@line 26154
  HEAP8[$23 >> 0] = $$0$expand_i1_val; //@line 26155
  return;
 }
 HEAP32[$6 + 2004 >> 2] = 10; //@line 26159
 HEAP32[$6 + 2032 >> 2] = HEAP32[$12 >> 2]; //@line 26162
 $$0 = 0; //@line 26163
 $23 = ___async_retval; //@line 26164
 $$0$expand_i1_val = $$0 & 1; //@line 26165
 HEAP8[$23 >> 0] = $$0$expand_i1_val; //@line 26166
 return;
}
function _invoke_ticker($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7499
 $2 = $0 + 12 | 0; //@line 7501
 $3 = HEAP32[$2 >> 2] | 0; //@line 7502
 do {
  if (!$3) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7506
   _mbed_assert_internal(14973, 14978, 528); //@line 7507
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 628; //@line 7510
    HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 7512
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 7514
    sp = STACKTOP; //@line 7515
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7518
    $8 = HEAP32[$2 >> 2] | 0; //@line 7520
    break;
   }
  } else {
   $8 = $3; //@line 7524
  }
 } while (0);
 $7 = HEAP32[$8 >> 2] | 0; //@line 7527
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7529
 FUNCTION_TABLE_vi[$7 & 1023]($0); //@line 7530
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 629; //@line 7533
  sp = STACKTOP; //@line 7534
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7537
  return;
 }
}
function __ZN4mbed7TimeoutD0Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2613
 HEAP32[$0 >> 2] = 10224; //@line 2614
 __ZN4mbed6Ticker6detachEv($0); //@line 2615
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 2617
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 2623
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2624
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 40 | 0); //@line 2625
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 106; //@line 2628
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2630
    sp = STACKTOP; //@line 2631
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2634
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2639
 __ZN4mbed10TimerEventD2Ev($0); //@line 2640
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 107; //@line 2643
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 2645
  sp = STACKTOP; //@line 2646
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2649
  __ZdlPv($0); //@line 2650
  return;
 }
}
function __ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19928
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19930
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19932
 $5 = $2 + 2872 | 0; //@line 19933
 HEAP32[$5 >> 2] = HEAP32[$5 >> 2] & -18 | 16; //@line 19937
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 19938
 __ZN12LoRaWANStack26process_status_check_stateEv($2); //@line 19939
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 264; //@line 19942
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 19943
  HEAP32[$9 >> 2] = $4; //@line 19944
  $10 = $ReallocAsyncCtx2 + 8 | 0; //@line 19945
  HEAP32[$10 >> 2] = $2; //@line 19946
  sp = STACKTOP; //@line 19947
  return;
 }
 ___async_unwind = 0; //@line 19950
 HEAP32[$ReallocAsyncCtx2 >> 2] = 264; //@line 19951
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 19952
 HEAP32[$9 >> 2] = $4; //@line 19953
 $10 = $ReallocAsyncCtx2 + 8 | 0; //@line 19954
 HEAP32[$10 >> 2] = $2; //@line 19955
 sp = STACKTOP; //@line 19956
 return;
}
function _abort_message($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15991
 STACKTOP = STACKTOP + 16 | 0; //@line 15992
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15992
 $1 = sp; //@line 15993
 HEAP32[$1 >> 2] = $varargs; //@line 15994
 $2 = HEAP32[2561] | 0; //@line 15995
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 15996
 _vfprintf($2, $0, $1) | 0; //@line 15997
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 650; //@line 16000
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 16002
  sp = STACKTOP; //@line 16003
  STACKTOP = sp; //@line 16004
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16006
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16007
 _fputc(10, $2) | 0; //@line 16008
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 651; //@line 16011
  sp = STACKTOP; //@line 16012
  STACKTOP = sp; //@line 16013
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 16015
  _abort(); //@line 16016
 }
}
function _ticker_read_us__async_cb_203($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3007
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3009
 $3 = $2 + 4 | 0; //@line 3010
 $4 = HEAP32[$3 >> 2] | 0; //@line 3011
 $7 = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0; //@line 3014
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 3015
 $8 = FUNCTION_TABLE_i[$7 & 7]() | 0; //@line 3016
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 598; //@line 3019
  $9 = $ReallocAsyncCtx + 4 | 0; //@line 3020
  HEAP32[$9 >> 2] = $3; //@line 3021
  $10 = $ReallocAsyncCtx + 8 | 0; //@line 3022
  HEAP32[$10 >> 2] = $4; //@line 3023
  sp = STACKTOP; //@line 3024
  return;
 }
 HEAP32[___async_retval >> 2] = $8; //@line 3028
 ___async_unwind = 0; //@line 3029
 HEAP32[$ReallocAsyncCtx >> 2] = 598; //@line 3030
 $9 = $ReallocAsyncCtx + 4 | 0; //@line 3031
 HEAP32[$9 >> 2] = $3; //@line 3032
 $10 = $ReallocAsyncCtx + 8 | 0; //@line 3033
 HEAP32[$10 >> 2] = $4; //@line 3034
 sp = STACKTOP; //@line 3035
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_97($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $17 = 0, $20 = 0, $21 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 23913
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23923
 $14 = HEAP32[$10 >> 2] | 0; //@line 23930
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 44 >> 2] | 0; //@line 23933
 $20 = (HEAPU8[((HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 17 >> 0] | 0) == 0 ? HEAP32[$0 + 8 >> 2] | 0 : HEAP32[$0 + 12 >> 2] | 0) + (HEAP32[$0 + 16 >> 2] | 0) >> 0] | 0) + 13 & 255; //@line 23936
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 23937
 FUNCTION_TABLE_viii[$17 & 7]($14, 1, $20); //@line 23938
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 507; //@line 23941
  $21 = $ReallocAsyncCtx8 + 4 | 0; //@line 23942
  HEAP32[$21 >> 2] = $10; //@line 23943
  sp = STACKTOP; //@line 23944
  return;
 }
 ___async_unwind = 0; //@line 23947
 HEAP32[$ReallocAsyncCtx8 >> 2] = 507; //@line 23948
 $21 = $ReallocAsyncCtx8 + 4 | 0; //@line 23949
 HEAP32[$21 >> 2] = $10; //@line 23950
 sp = STACKTOP; //@line 23951
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_96($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $17 = 0, $20 = 0, $21 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 23868
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23878
 $14 = HEAP32[$10 >> 2] | 0; //@line 23885
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 44 >> 2] | 0; //@line 23888
 $20 = (HEAPU8[((HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 17 >> 0] | 0) == 0 ? HEAP32[$0 + 8 >> 2] | 0 : HEAP32[$0 + 12 >> 2] | 0) + (HEAP32[$0 + 16 >> 2] | 0) >> 0] | 0) + 13 & 255; //@line 23891
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 23892
 FUNCTION_TABLE_viii[$17 & 7]($14, 0, $20); //@line 23893
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 507; //@line 23896
  $21 = $ReallocAsyncCtx8 + 4 | 0; //@line 23897
  HEAP32[$21 >> 2] = $10; //@line 23898
  sp = STACKTOP; //@line 23899
  return;
 }
 ___async_unwind = 0; //@line 23902
 HEAP32[$ReallocAsyncCtx8 >> 2] = 507; //@line 23903
 $21 = $ReallocAsyncCtx8 + 4 | 0; //@line 23904
 HEAP32[$21 >> 2] = $10; //@line 23905
 sp = STACKTOP; //@line 23906
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $15 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 27018
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27020
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27024
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 27026
 $9 = HEAP32[$2 >> 2] | 0; //@line 27027
 $12 = HEAP32[(HEAP32[$9 >> 2] | 0) + 68 >> 2] | 0; //@line 27030
 $14 = HEAP16[(HEAP32[$0 + 8 >> 2] | 0) + 12 >> 1] | 0; //@line 27032
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 27033
 FUNCTION_TABLE_viiii[$12 & 7]($9, $6, $8, $14); //@line 27034
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 521; //@line 27037
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 27038
  HEAP32[$15 >> 2] = $2; //@line 27039
  sp = STACKTOP; //@line 27040
  return;
 }
 ___async_unwind = 0; //@line 27043
 HEAP32[$ReallocAsyncCtx2 >> 2] = 521; //@line 27044
 $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 27045
 HEAP32[$15 >> 2] = $2; //@line 27046
 sp = STACKTOP; //@line 27047
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_6($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 18078
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18080
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18082
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP8[$4 + 2068 >> 0] = 0; //@line 18088
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 18091
 _mbed_assert_internal(13097, 13106, 231); //@line 18092
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 414; //@line 18095
  $7 = $ReallocAsyncCtx10 + 4 | 0; //@line 18096
  HEAP32[$7 >> 2] = $2; //@line 18097
  $8 = $ReallocAsyncCtx10 + 8 | 0; //@line 18098
  HEAP32[$8 >> 2] = $4; //@line 18099
  sp = STACKTOP; //@line 18100
  return;
 }
 ___async_unwind = 0; //@line 18103
 HEAP32[$ReallocAsyncCtx10 >> 2] = 414; //@line 18104
 $7 = $ReallocAsyncCtx10 + 4 | 0; //@line 18105
 HEAP32[$7 >> 2] = $2; //@line 18106
 $8 = $ReallocAsyncCtx10 + 8 | 0; //@line 18107
 HEAP32[$8 >> 2] = $4; //@line 18108
 sp = STACKTOP; //@line 18109
 return;
}
function _threebyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$016$lcssa = 0, $$01618 = 0, $$019 = 0, $$lcssa = 0, $14 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0;
 $14 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8; //@line 15031
 $23 = $0 + 2 | 0; //@line 15040
 $24 = HEAP8[$23 >> 0] | 0; //@line 15041
 $27 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | ($24 & 255) << 8; //@line 15044
 if (($27 | 0) == ($14 | 0) | $24 << 24 >> 24 == 0) {
  $$016$lcssa = $23; //@line 15049
  $$lcssa = $24; //@line 15049
 } else {
  $$01618 = $23; //@line 15051
  $$019 = $27; //@line 15051
  while (1) {
   $30 = $$01618 + 1 | 0; //@line 15053
   $31 = HEAP8[$30 >> 0] | 0; //@line 15054
   $$019 = ($$019 | $31 & 255) << 8; //@line 15057
   if (($$019 | 0) == ($14 | 0) | $31 << 24 >> 24 == 0) {
    $$016$lcssa = $30; //@line 15062
    $$lcssa = $31; //@line 15062
    break;
   } else {
    $$01618 = $30; //@line 15065
   }
  }
 }
 return ($$lcssa << 24 >> 24 ? $$016$lcssa + -2 | 0 : 0) | 0; //@line 15072
}
function __ZN4mbed6TickerD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7391
 HEAP32[$0 >> 2] = 10224; //@line 7392
 $1 = $0 + 40 | 0; //@line 7393
 _emscripten_asm_const_ii(14, $1 | 0) | 0; //@line 7394
 $4 = HEAP32[$0 + 52 >> 2] | 0; //@line 7396
 do {
  if ($4 | 0) {
   $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 7401
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7402
   FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 7403
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 623; //@line 7406
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7408
    sp = STACKTOP; //@line 7409
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7412
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7417
 __ZN4mbed10TimerEventD2Ev($0); //@line 7418
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 624; //@line 7421
  sp = STACKTOP; //@line 7422
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7425
  return;
 }
}
function __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_17($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18742
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18746
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18748
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 18749
 if (!$6) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 18753
  return;
 }
 $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 18757
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 18758
 FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 18759
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 270; //@line 18762
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 18763
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 18764
  sp = STACKTOP; //@line 18765
  return;
 }
 ___async_unwind = 0; //@line 18768
 HEAP32[$ReallocAsyncCtx2 >> 2] = 270; //@line 18769
 $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 18770
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 18771
 sp = STACKTOP; //@line 18772
 return;
}
function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $2 = 0, $3 = 0, $4 = 0, $9 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 14659
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 14659
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 14660
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 14661
 switch ($4 & 2047) {
 case 0:
  {
   if ($0 != 0.0) {
    $9 = +_frexp($0 * 18446744073709552000.0, $1); //@line 14670
    $$016 = $9; //@line 14673
    $storemerge = (HEAP32[$1 >> 2] | 0) + -64 | 0; //@line 14673
   } else {
    $$016 = $0; //@line 14675
    $storemerge = 0; //@line 14675
   }
   HEAP32[$1 >> 2] = $storemerge; //@line 14677
   $$0 = $$016; //@line 14678
   break;
  }
 case 2047:
  {
   $$0 = $0; //@line 14682
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = ($4 & 2047) + -1022; //@line 14688
   HEAP32[tempDoublePtr >> 2] = $2; //@line 14691
   HEAP32[tempDoublePtr + 4 >> 2] = $3 & -2146435073 | 1071644672; //@line 14691
   $$0 = +HEAPF64[tempDoublePtr >> 3]; //@line 14692
  }
 }
 return +$$0;
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 23284
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23288
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23290
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23292
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23294
 $11 = $4 + 12 | 0; //@line 23296
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 23297
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(16) | 0; //@line 23298
 $12 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 10) | 0; //@line 23299
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 23303
  ___async_unwind = 0; //@line 23304
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 221; //@line 23306
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $11; //@line 23308
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $8; //@line 23310
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $10; //@line 23312
 sp = STACKTOP; //@line 23313
 return;
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_265($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6713
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6717
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 6719
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 6720
 if (!$6) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 6724
  return;
 }
 $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 6728
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 6729
 FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 6730
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 372; //@line 6733
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 6734
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 6735
  sp = STACKTOP; //@line 6736
  return;
 }
 ___async_unwind = 0; //@line 6739
 HEAP32[$ReallocAsyncCtx2 >> 2] = 372; //@line 6740
 $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 6741
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 6742
 sp = STACKTOP; //@line 6743
 return;
}
function ___cxa_can_catch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17594
 STACKTOP = STACKTOP + 16 | 0; //@line 17595
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17595
 $3 = sp; //@line 17596
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 17598
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 17601
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 17602
 $8 = FUNCTION_TABLE_iiii[$7 & 31]($0, $1, $3) | 0; //@line 17603
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 674; //@line 17606
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 17608
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 17610
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 17612
  sp = STACKTOP; //@line 17613
  STACKTOP = sp; //@line 17614
  return 0; //@line 17614
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17616
 if ($8) {
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2]; //@line 17620
 }
 STACKTOP = sp; //@line 17622
 return $8 & 1 | 0; //@line 17622
}
function __ZN7LoRaMac16set_device_classERK14device_class_t__async_cb_198($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 2588
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2590
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2592
 if ((HEAP32[$2 >> 2] | 0) != 2) {
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 2599
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $4 + 1836 | 0); //@line 2600
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 442; //@line 2603
  $7 = $ReallocAsyncCtx5 + 4 | 0; //@line 2604
  HEAP32[$7 >> 2] = $4; //@line 2605
  $8 = $ReallocAsyncCtx5 + 8 | 0; //@line 2606
  HEAP32[$8 >> 2] = $2; //@line 2607
  sp = STACKTOP; //@line 2608
  return;
 }
 ___async_unwind = 0; //@line 2611
 HEAP32[$ReallocAsyncCtx5 >> 2] = 442; //@line 2612
 $7 = $ReallocAsyncCtx5 + 4 | 0; //@line 2613
 HEAP32[$7 >> 2] = $4; //@line 2614
 $8 = $ReallocAsyncCtx5 + 8 | 0; //@line 2615
 HEAP32[$8 >> 2] = $2; //@line 2616
 sp = STACKTOP; //@line 2617
 return;
}
function __ZN7LoRaPHY19num_active_channelsEPthh($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$01012 = 0, $$011 = 0, $8 = 0, $9 = 0, $indvars$iv = 0, $wide$trip$count = 0;
 if (!(($1 | 0) != 0 & ($2 & 255) < ($3 & 255))) {
  $$011 = 0; //@line 20941
  return $$011 | 0; //@line 20942
 }
 $wide$trip$count = $3 & 255; //@line 20945
 $$01012 = 0; //@line 20946
 $indvars$iv = $2 & 255; //@line 20946
 do {
  $8 = HEAP16[$1 + ($indvars$iv << 1) >> 1] | 0; //@line 20949
  $9 = $8 & 65535; //@line 20950
  $$01012 = ($$01012 & 255) + (($9 & 1) + ($9 >>> 1 & 1) + ($9 >>> 2 & 1) + ($9 >>> 3 & 1) + ($9 >>> 4 & 1) + ($9 >>> 5 & 1) + ($9 >>> 6 & 1) + ($9 >>> 7 & 1) + ($9 >>> 8 & 1) + ($9 >>> 9 & 1) + ($9 >>> 10 & 1) + ($9 >>> 11 & 1) + ($9 >>> 12 & 1) + ($9 >>> 13 & 1) + ($9 >>> 14 & 1) + (($8 & 65535) >>> 15 & 65535) & 255) | 0; //@line 20999
  $indvars$iv = $indvars$iv + 1 | 0; //@line 21000
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 $$011 = $$01012 & 255; //@line 21009
 return $$011 | 0; //@line 21010
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_302($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 10667
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10671
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10673
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 10674
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 10678
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 10682
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 10683
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 10684
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 289; //@line 10687
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 10688
  HEAP32[$11 >> 2] = $4; //@line 10689
  sp = STACKTOP; //@line 10690
  return;
 }
 ___async_unwind = 0; //@line 10693
 HEAP32[$ReallocAsyncCtx5 >> 2] = 289; //@line 10694
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 10695
 HEAP32[$11 >> 2] = $4; //@line 10696
 sp = STACKTOP; //@line 10697
 return;
}
function _mbed_vtracef__async_cb_321($0) {
 $0 = $0 | 0;
 var $$pre = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 12514
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12518
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 2) {
  return;
 }
 $5 = $4 + -1 | 0; //@line 12523
 $$pre = HEAP32[177] | 0; //@line 12524
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 12525
 FUNCTION_TABLE_v[$$pre & 7](); //@line 12526
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 137; //@line 12529
  $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 12530
  HEAP32[$6 >> 2] = $4; //@line 12531
  $7 = $ReallocAsyncCtx9 + 8 | 0; //@line 12532
  HEAP32[$7 >> 2] = $5; //@line 12533
  sp = STACKTOP; //@line 12534
  return;
 }
 ___async_unwind = 0; //@line 12537
 HEAP32[$ReallocAsyncCtx9 >> 2] = 137; //@line 12538
 $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 12539
 HEAP32[$6 >> 2] = $4; //@line 12540
 $7 = $ReallocAsyncCtx9 + 8 | 0; //@line 12541
 HEAP32[$7 >> 2] = $5; //@line 12542
 sp = STACKTOP; //@line 12543
 return;
}
function __ZN4mbed7TimeoutD2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2572
 HEAP32[$0 >> 2] = 10224; //@line 2573
 __ZN4mbed6Ticker6detachEv($0); //@line 2574
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 2576
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 2582
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2583
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 40 | 0); //@line 2584
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 104; //@line 2587
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2589
    sp = STACKTOP; //@line 2590
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2593
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2598
 __ZN4mbed10TimerEventD2Ev($0); //@line 2599
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 105; //@line 2602
  sp = STACKTOP; //@line 2603
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2606
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_154($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 29121
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29125
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29127
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 29128
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 29132
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 29136
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 29137
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 29138
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 259; //@line 29141
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 29142
  HEAP32[$11 >> 2] = $4; //@line 29143
  sp = STACKTOP; //@line 29144
  return;
 }
 ___async_unwind = 0; //@line 29147
 HEAP32[$ReallocAsyncCtx5 >> 2] = 259; //@line 29148
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 29149
 HEAP32[$11 >> 2] = $4; //@line 29150
 sp = STACKTOP; //@line 29151
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $13 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16514
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 16520
  } else {
   $10 = HEAP32[$0 + 8 >> 2] | 0; //@line 16523
   $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 16526
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16527
   FUNCTION_TABLE_viiiiii[$13 & 3]($10, $1, $2, $3, $4, $5); //@line 16528
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 656; //@line 16531
    sp = STACKTOP; //@line 16532
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16535
    break;
   }
  }
 } while (0);
 return;
}
function _schedule_interrupt__async_cb_175($0) {
 $0 = $0 | 0;
 var $16 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 1191
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1195
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1197
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1199
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 1200
 if ($4 >>> 0 > $8 >>> 0) {
  if (!($AsyncRetVal >>> 0 >= $4 >>> 0 | $AsyncRetVal >>> 0 < $8 >>> 0)) {
   return;
  }
 } else {
  if (!($AsyncRetVal >>> 0 >= $4 >>> 0 & $AsyncRetVal >>> 0 < $8 >>> 0)) {
   return;
  }
 }
 $16 = HEAP32[(HEAP32[$6 >> 2] | 0) + 20 >> 2] | 0; //@line 1219
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 1220
 FUNCTION_TABLE_v[$16 & 7](); //@line 1221
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 594; //@line 1224
  sp = STACKTOP; //@line 1225
  return;
 }
 ___async_unwind = 0; //@line 1228
 HEAP32[$ReallocAsyncCtx6 >> 2] = 594; //@line 1229
 sp = STACKTOP; //@line 1230
 return;
}
function _vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $33 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7842
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7850
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 7852
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 7854
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 7856
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 7858
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 7860
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 7862
 $$ = (HEAP32[$2 >> 2] | 0) == 0 ? -1 : HEAP32[$0 + 8 >> 2] | 0; //@line 7873
 HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = HEAP32[$0 + 12 >> 2]; //@line 7874
 HEAP32[$10 >> 2] = 0; //@line 7875
 HEAP32[$12 >> 2] = 0; //@line 7876
 HEAP32[$14 >> 2] = 0; //@line 7877
 HEAP32[$2 >> 2] = 0; //@line 7878
 $33 = HEAP32[$16 >> 2] | 0; //@line 7879
 HEAP32[$16 >> 2] = $33 | $18; //@line 7884
 if ($20 | 0) {
  ___unlockfile($22); //@line 7887
 }
 HEAP32[___async_retval >> 2] = ($33 & 32 | 0) == 0 ? $$ : -1; //@line 7890
 return;
}
function _mbed_vtracef__async_cb_320($0) {
 $0 = $0 | 0;
 var $$pre = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 12481
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12483
 if (($2 | 0) <= 1) {
  return;
 }
 $4 = $2 + -1 | 0; //@line 12488
 $$pre = HEAP32[177] | 0; //@line 12489
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 12490
 FUNCTION_TABLE_v[$$pre & 7](); //@line 12491
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 137; //@line 12494
  $5 = $ReallocAsyncCtx9 + 4 | 0; //@line 12495
  HEAP32[$5 >> 2] = $2; //@line 12496
  $6 = $ReallocAsyncCtx9 + 8 | 0; //@line 12497
  HEAP32[$6 >> 2] = $4; //@line 12498
  sp = STACKTOP; //@line 12499
  return;
 }
 ___async_unwind = 0; //@line 12502
 HEAP32[$ReallocAsyncCtx9 >> 2] = 137; //@line 12503
 $5 = $ReallocAsyncCtx9 + 4 | 0; //@line 12504
 HEAP32[$5 >> 2] = $2; //@line 12505
 $6 = $ReallocAsyncCtx9 + 8 | 0; //@line 12506
 HEAP32[$6 >> 2] = $4; //@line 12507
 sp = STACKTOP; //@line 12508
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb($0) {
 $0 = $0 | 0;
 var $$1$ = 0, $10 = 0, $12 = 0, $19 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 157
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 159
 $10 = HEAP8[$0 + 21 >> 0] | 0; //@line 161
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 163
 $$1$ = (HEAP32[___async_retval >> 2] | 0) == 0 ? HEAP32[$0 + 4 >> 2] | 0 : -1014; //@line 171
 $19 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 172
 HEAP8[(HEAPU16[$6 >> 1] | 0) + ($8 + 1185) >> 0] = $19; //@line 177
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 1 + ($8 + 1185) >> 0] = $19 >>> 8; //@line 184
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 2 + ($8 + 1185) >> 0] = $19 >>> 16; //@line 191
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 3 + ($8 + 1185) >> 0] = $19 >>> 24; //@line 198
 HEAP16[$6 >> 1] = (HEAPU16[$6 >> 1] | 0) + 4; //@line 203
 HEAP32[$12 >> 2] = $10 & 255; //@line 205
 _mbed_tracef(16, 13239, 13324, $12); //@line 206
 HEAP32[___async_retval >> 2] = $$1$; //@line 208
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_181($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 1562
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1566
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1568
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 1569
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 1573
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 1577
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 1578
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 1579
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 311; //@line 1582
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 1583
  HEAP32[$11 >> 2] = $4; //@line 1584
  sp = STACKTOP; //@line 1585
  return;
 }
 ___async_unwind = 0; //@line 1588
 HEAP32[$ReallocAsyncCtx5 >> 2] = 311; //@line 1589
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 1590
 HEAP32[$11 >> 2] = $4; //@line 1591
 sp = STACKTOP; //@line 1592
 return;
}
function _get_pkcs_padding($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$028 = 0, $$02930 = 0, $$031 = 0, $13 = 0, $23 = 0, $7 = 0, $8 = 0, $9 = 0;
 if (($0 | 0) == 0 | ($2 | 0) == 0) {
  $$028 = -24832; //@line 3072
  return $$028 | 0; //@line 3073
 }
 $7 = HEAP8[$0 + ($1 + -1) >> 0] | 0; //@line 3077
 $8 = $7 & 255; //@line 3078
 $9 = $1 - $8 | 0; //@line 3079
 HEAP32[$2 >> 2] = $9; //@line 3080
 $13 = ($7 << 24 >> 24 == 0 | $8 >>> 0 > $1 >>> 0) & 1; //@line 3084
 if (!$1) {
  $$0$lcssa = $13; //@line 3087
 } else {
  $$02930 = 0; //@line 3089
  $$031 = $13; //@line 3089
  while (1) {
   $23 = (($$02930 >>> 0 >= $9 >>> 0 ? (HEAP8[$0 + $$02930 >> 0] ^ $7) & 255 : 0) | $$031 & 255) & 255; //@line 3099
   $$02930 = $$02930 + 1 | 0; //@line 3100
   if (($$02930 | 0) == ($1 | 0)) {
    $$0$lcssa = $23; //@line 3103
    break;
   } else {
    $$031 = $23; //@line 3106
   }
  }
 }
 $$028 = $$0$lcssa << 24 >> 24 ? -25088 : 0; //@line 3112
 return $$028 | 0; //@line 3113
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_229($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 5008
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5012
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5014
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 5015
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 5019
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 5023
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 5024
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 5025
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 213; //@line 5028
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 5029
  HEAP32[$11 >> 2] = $4; //@line 5030
  sp = STACKTOP; //@line 5031
  return;
 }
 ___async_unwind = 0; //@line 5034
 HEAP32[$ReallocAsyncCtx5 >> 2] = 213; //@line 5035
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 5036
 HEAP32[$11 >> 2] = $4; //@line 5037
 sp = STACKTOP; //@line 5038
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $14 = 0, $17 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17513
 $7 = HEAP32[$0 + 4 >> 2] | 0; //@line 17515
 $8 = $7 >> 8; //@line 17516
 if (!($7 & 1)) {
  $$0 = $8; //@line 17520
 } else {
  $$0 = HEAP32[(HEAP32[$3 >> 2] | 0) + $8 >> 2] | 0; //@line 17525
 }
 $14 = HEAP32[$0 >> 2] | 0; //@line 17527
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] | 0; //@line 17530
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17535
 FUNCTION_TABLE_viiiiii[$17 & 3]($14, $1, $2, $3 + $$0 | 0, $7 & 2 | 0 ? $4 : 2, $5); //@line 17536
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 672; //@line 17539
  sp = STACKTOP; //@line 17540
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 17543
  return;
 }
}
function __GLOBAL__sub_I_main_cpp() {
 var $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 7603
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7604
 __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_(18264, 9, 8, 7, 6, 23, 4, 5, 66, 67, 0, 1, -1, -1, -1, -1, 62, -1, -1); //@line 7605
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 631; //@line 7608
  sp = STACKTOP; //@line 7609
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7612
  __ZN5Sht31C2E7PinNameS0_(23652, 10, 11); //@line 7613
  __ZN4mbed11InterruptInC2E7PinName(19600, 1337); //@line 7614
  __ZN6events10EventQueueC2EjPh(19672, 1664, 0); //@line 7615
  __ZN16LoRaWANInterfaceC2ER9LoRaRadio(19876, 18264); //@line 7616
  dest = 23020; //@line 7617
  stop = dest + 48 | 0; //@line 7617
  do {
   HEAP32[dest >> 2] = 0; //@line 7617
   dest = dest + 4 | 0; //@line 7617
  } while ((dest | 0) < (stop | 0));
  return;
 }
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16683
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 16689
  } else {
   $8 = HEAP32[$0 + 8 >> 2] | 0; //@line 16692
   $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0; //@line 16695
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16696
   FUNCTION_TABLE_viiii[$11 & 7]($8, $1, $2, $3); //@line 16697
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 659; //@line 16700
    sp = STACKTOP; //@line 16701
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16704
    break;
   }
  }
 } while (0);
 return;
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_235($0) {
 $0 = $0 | 0;
 var $12 = 0, $2 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5379
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5381
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5383
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  return;
 }
 __ZN14LoRaMacCommand20clear_command_bufferEv($2 + 476 | 0); //@line 5391
 HEAP8[$2 + 1177 >> 0] = 0; //@line 5393
 HEAP8[$2 + 2046 >> 0] = 0; //@line 5395
 HEAP8[$2 + 2047 >> 0] = HEAP8[$4 >> 0] | 0; //@line 5398
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 5399
 $12 = __ZN7LoRaMac21handle_retransmissionEv($2) | 0; //@line 5400
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 367; //@line 5403
  sp = STACKTOP; //@line 5404
  return;
 }
 HEAP32[___async_retval >> 2] = $12; //@line 5408
 ___async_unwind = 0; //@line 5409
 HEAP32[$ReallocAsyncCtx >> 2] = 367; //@line 5410
 sp = STACKTOP; //@line 5411
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 3697
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3699
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3701
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 3703
 $7 = HEAP32[$2 >> 2] | 0; //@line 3704
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 24 >> 2] | 0; //@line 3707
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 3708
 FUNCTION_TABLE_viii[$10 & 7]($7, $4, $6); //@line 3709
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 540; //@line 3712
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 3713
  HEAP32[$11 >> 2] = $2; //@line 3714
  sp = STACKTOP; //@line 3715
  return;
 }
 ___async_unwind = 0; //@line 3718
 HEAP32[$ReallocAsyncCtx2 >> 2] = 540; //@line 3719
 $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 3720
 HEAP32[$11 >> 2] = $2; //@line 3721
 sp = STACKTOP; //@line 3722
 return;
}
function ___dynamic_cast__async_cb_361($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $16 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27107
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27109
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27111
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27117
 L2 : do {
  switch (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  case 0:
   {
    $$0 = (HEAP32[$6 >> 2] | 0) == 1 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1 ? HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0 : 0; //@line 27132
    break;
   }
  case 1:
   {
    if ((HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0) != 1) {
     if (!((HEAP32[$6 >> 2] | 0) == 0 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1)) {
      $$0 = 0; //@line 27148
      break L2;
     }
    }
    $$0 = HEAP32[$16 >> 2] | 0; //@line 27153
    break;
   }
  default:
   {
    $$0 = 0; //@line 27157
   }
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 27162
 return;
}
function __ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$unpack$i = 0, $$unpack5$i = 0, $15 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7964
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 7967
 $$unpack5$i = HEAP32[$0 + 4 >> 2] | 0; //@line 7969
 $8 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack5$i >> 1) | 0; //@line 7971
 if (!($$unpack5$i & 1)) {
  $15 = $$unpack$i; //@line 7976
 } else {
  $15 = HEAP32[(HEAP32[$8 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 7981
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7983
 FUNCTION_TABLE_viiiii[$15 & 7]($8, $1, $2, $3, $4); //@line 7984
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 274; //@line 7987
  sp = STACKTOP; //@line 7988
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7991
  return;
 }
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $13 = 0, $16 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17555
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 17557
 $7 = $6 >> 8; //@line 17558
 if (!($6 & 1)) {
  $$0 = $7; //@line 17562
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $7 >> 2] | 0; //@line 17567
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 17569
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] | 0; //@line 17572
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17577
 FUNCTION_TABLE_viiiii[$16 & 7]($13, $1, $2 + $$0 | 0, $6 & 2 | 0 ? $3 : 2, $4); //@line 17578
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 673; //@line 17581
  sp = STACKTOP; //@line 17582
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 17585
  return;
 }
}
function _ticker_remove_event($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6487
 $4 = (HEAP32[$0 + 4 >> 2] | 0) + 4 | 0; //@line 6490
 $5 = HEAP32[$4 >> 2] | 0; //@line 6491
 if (($5 | 0) == ($1 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 6496
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6497
  _schedule_interrupt($0); //@line 6498
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 596; //@line 6501
   sp = STACKTOP; //@line 6502
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6505
  return;
 } else {
  $$0 = $5; //@line 6508
 }
 do {
  if (!$$0) {
   label = 8; //@line 6513
   break;
  }
  $10 = $$0 + 12 | 0; //@line 6516
  $$0 = HEAP32[$10 >> 2] | 0; //@line 6517
 } while (($$0 | 0) != ($1 | 0));
 if ((label | 0) == 8) {
  return;
 }
 HEAP32[$10 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 6530
 return;
}
function _mbed_error_vfprintf__async_cb_281($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8213
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 8215
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8217
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8219
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8221
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8223
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 8225
 _serial_putc(19592, $2 << 24 >> 24); //@line 8226
 if (!___async) {
  ___async_unwind = 0; //@line 8229
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 619; //@line 8231
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 8233
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 8235
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $8; //@line 8237
 HEAP8[$ReallocAsyncCtx2 + 16 >> 0] = $2; //@line 8239
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 8241
 sp = STACKTOP; //@line 8242
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $15 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17470
 $5 = HEAP32[$0 + 4 >> 2] | 0; //@line 17472
 $6 = $5 >> 8; //@line 17473
 if (!($5 & 1)) {
  $$0 = $6; //@line 17477
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $6 >> 2] | 0; //@line 17482
 }
 $12 = HEAP32[$0 >> 2] | 0; //@line 17484
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] | 0; //@line 17487
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17492
 FUNCTION_TABLE_viiii[$15 & 7]($12, $1, $2 + $$0 | 0, $5 & 2 | 0 ? $3 : 2); //@line 17493
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 671; //@line 17496
  sp = STACKTOP; //@line 17497
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 17500
  return;
 }
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb_392($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 30471
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30475
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30477
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 30479
 $10 = HEAP16[$0 + 18 >> 1] | 0; //@line 30481
 $12 = HEAP8[$0 + 20 >> 0] | 0; //@line 30483
 $13 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 30485
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 30486
 FUNCTION_TABLE_viiiii[$13 & 7]($4, $6, $8, $10, $12); //@line 30487
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 292; //@line 30490
  sp = STACKTOP; //@line 30491
  return;
 }
 ___async_unwind = 0; //@line 30494
 HEAP32[$ReallocAsyncCtx >> 2] = 292; //@line 30495
 sp = STACKTOP; //@line 30496
 return;
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_81($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 22846
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22848
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22850
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22852
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22854
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22856
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 22857
 __ZN7LoRaMac10disconnectEv($10); //@line 22858
 if (!___async) {
  ___async_unwind = 0; //@line 22861
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 327; //@line 22863
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $4; //@line 22865
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $6; //@line 22867
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $8; //@line 22869
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $2; //@line 22871
 sp = STACKTOP; //@line 22872
 return;
}
function __ZN12LoRaWANStack12add_channelsERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10151
 STACKTOP = STACKTOP + 16 | 0; //@line 10152
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10152
 if (!(HEAP32[$0 + 2480 >> 2] | 0)) {
  _mbed_tracef(2, 12482, 12832, sp); //@line 10158
  $$0 = -1012; //@line 10159
  STACKTOP = sp; //@line 10160
  return $$0 | 0; //@line 10160
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10162
 $5 = __ZN7LoRaMac16add_channel_planERK16lora_channelplan($0, $1) | 0; //@line 10163
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 343; //@line 10166
  sp = STACKTOP; //@line 10167
  STACKTOP = sp; //@line 10168
  return 0; //@line 10168
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10170
 $$0 = $5; //@line 10171
 STACKTOP = sp; //@line 10172
 return $$0 | 0; //@line 10172
}
function __ZN7LoRaPHY18verify_tx_datarateEhb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$sink$in = 0, $$sink6 = 0, $3 = 0;
 $3 = $1 << 24 >> 24; //@line 21811
 if (($3 | 0) >= (HEAPU8[$0 + 92 >> 0] | 0)) {
  $$0 = 0; //@line 21817
  return $$0 | 0; //@line 21818
 }
 if (!(HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + $3 >> 0] | 0)) {
  $$0 = 0; //@line 21826
  return $$0 | 0; //@line 21827
 }
 do {
  if ($2) {
   $$sink$in = $0 + 30 | 0; //@line 21833
   $$sink6 = $0 + 31 | 0; //@line 21833
  } else {
   if (!(HEAP8[$0 + 128 >> 0] & 1)) {
    $$sink$in = $0 + 26 | 0; //@line 21842
    $$sink6 = $0 + 27 | 0; //@line 21842
    break;
   } else {
    $$sink$in = $0 + 35 | 0; //@line 21847
    $$sink6 = $0 + 27 | 0; //@line 21847
    break;
   }
  }
 } while (0);
 $$0 = (HEAP8[$$sink$in >> 0] | 0) <= $1 << 24 >> 24 ? (HEAP8[$$sink6 >> 0] | 0) >= $1 << 24 >> 24 : 0; //@line 21857
 return $$0 | 0; //@line 21858
}
function __ZN16LoRaWANInterface7receiveEhPhti($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4684
 STACKTOP = STACKTOP + 16 | 0; //@line 4685
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4685
 $5 = sp + 4 | 0; //@line 4686
 $6 = sp; //@line 4687
 HEAP8[$5 >> 0] = $1; //@line 4688
 HEAP32[$6 >> 2] = $4; //@line 4689
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4691
 $8 = __ZN12LoRaWANStack9handle_rxEPhtRhRib($0 + 4 | 0, $2, $3, $5, $6, 1) | 0; //@line 4692
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 146; //@line 4695
  sp = STACKTOP; //@line 4696
  STACKTOP = sp; //@line 4697
  return 0; //@line 4697
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4699
  STACKTOP = sp; //@line 4700
  return $8 | 0; //@line 4700
 }
 return 0; //@line 4702
}
function __ZN16SX1276_LoRaRadio4sendEPhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 374
 switch (HEAP8[$0 + 689 >> 0] | 0) {
 case 0:
  {
   _emscripten_asm_const_iiiiiii(0, HEAP32[$0 + 692 >> 2] | 0, HEAP8[$0 + 696 >> 0] | 0, HEAP32[$0 + 704 >> 2] | 0, HEAP32[$0 + 712 >> 2] | 0, $1 | 0, $2 & 255 | 0) | 0; //@line 389
   break;
  }
 case 1:
  {
   _emscripten_asm_const_iiiiiii(1, HEAP32[$0 + 692 >> 2] | 0, HEAP8[$0 + 748 >> 0] | 0, HEAP32[$0 + 752 >> 2] | 0, HEAP32[$0 + 756 >> 2] | 0, $1 | 0, $2 & 255 | 0) | 0; //@line 403
   break;
  }
 default:
  {}
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 409
 __ZN16SX1276_LoRaRadio8transmitEj($0, 0); //@line 410
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 47; //@line 413
  sp = STACKTOP; //@line 414
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 417
  return;
 }
}
function __ZN7LoRaPHY14remove_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $15 = 0, $25 = 0, $4 = 0, $5 = 0;
 $4 = $1 & 255; //@line 20727
 $5 = $4 >>> 4; //@line 20728
 $10 = 1 << ($4 & 15); //@line 20733
 if ($10 & (HEAPU16[(HEAP32[$0 + 120 >> 2] | 0) + ($5 << 1) >> 1] | 0) | 0) {
  $$0 = 0; //@line 20737
  return $$0 | 0; //@line 20738
 }
 $15 = (HEAP32[$0 + 124 >> 2] | 0) + ($4 * 12 | 0) | 0; //@line 20742
 HEAP32[$15 >> 2] = 0; //@line 20743
 HEAP32[$15 + 4 >> 2] = 0; //@line 20743
 HEAP32[$15 + 8 >> 2] = 0; //@line 20743
 if (!((HEAPU8[$0 + 20 >> 0] | 0) > ($1 & 255) ? (($1 & 255) >>> 4 & 255) <= (HEAPU8[$0 + 113 >> 0] | 0) : 0)) {
  $$0 = 0; //@line 20753
  return $$0 | 0; //@line 20754
 }
 $25 = (HEAP32[$0 + 116 >> 2] | 0) + ($5 << 1) | 0; //@line 20759
 HEAP16[$25 >> 1] = ($10 ^ 65535) & (HEAPU16[$25 >> 1] | 0); //@line 20764
 $$0 = 1; //@line 20765
 return $$0 | 0; //@line 20766
}
function __ZN7LoRaMacD2Ev__async_cb_381($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 30132
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30134
 $4 = HEAP32[$2 + 748 >> 2] | 0; //@line 30136
 if (!$4) {
  __ZN12LoRaPHYEU868D2Ev($2 + 4 | 0); //@line 30140
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 30145
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 30146
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 736 | 0); //@line 30147
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 355; //@line 30150
  $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 30151
  HEAP32[$9 >> 2] = $2; //@line 30152
  sp = STACKTOP; //@line 30153
  return;
 }
 ___async_unwind = 0; //@line 30156
 HEAP32[$ReallocAsyncCtx5 >> 2] = 355; //@line 30157
 $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 30158
 HEAP32[$9 >> 2] = $2; //@line 30159
 sp = STACKTOP; //@line 30160
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_115($0) {
 $0 = $0 | 0;
 var $12 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 25704
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25706
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25710
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25712
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 25714
 __ZN4mbed6Ticker5setupEy($6, 2e5, 0); //@line 25715
 $9 = HEAP32[$2 >> 2] | 0; //@line 25716
 if (!$9) {
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 25722
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 25723
 FUNCTION_TABLE_vi[$12 & 1023]($8); //@line 25724
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 51; //@line 25727
  sp = STACKTOP; //@line 25728
  return;
 }
 ___async_unwind = 0; //@line 25731
 HEAP32[$ReallocAsyncCtx3 >> 2] = 51; //@line 25732
 sp = STACKTOP; //@line 25733
 return;
}
function _pad_676($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $14 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 13657
 STACKTOP = STACKTOP + 256 | 0; //@line 13658
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256); //@line 13658
 $5 = sp; //@line 13659
 if (($2 | 0) > ($3 | 0) & ($4 & 73728 | 0) == 0) {
  $9 = $2 - $3 | 0; //@line 13665
  _memset($5 | 0, $1 << 24 >> 24 | 0, ($9 >>> 0 < 256 ? $9 : 256) | 0) | 0; //@line 13669
  if ($9 >>> 0 > 255) {
   $14 = $2 - $3 | 0; //@line 13672
   $$011 = $9; //@line 13673
   do {
    _out_670($0, $5, 256); //@line 13675
    $$011 = $$011 + -256 | 0; //@line 13676
   } while ($$011 >>> 0 > 255);
   $$0$lcssa = $14 & 255; //@line 13685
  } else {
   $$0$lcssa = $9; //@line 13687
  }
  _out_670($0, $5, $$0$lcssa); //@line 13689
 }
 STACKTOP = sp; //@line 13691
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_119($0) {
 $0 = $0 | 0;
 var $12 = 0, $16 = 0, $2 = 0, $4 = 0, $8 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26064
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26066
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26070
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26074
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26078
 if (!(HEAP8[$2 + 770 >> 0] | 0)) {
  HEAP32[$4 >> 2] = 6; //@line 26085
  _mbed_tracef(16, 10996, 11053, $4); //@line 26086
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 26087
  HEAP32[$8 >> 2] = 6; //@line 26088
  _mbed_tracef(16, 10996, 11082, $8); //@line 26089
  return;
 } else {
  HEAP32[$12 >> 2] = 5; //@line 26092
  _mbed_tracef(16, 10996, 11053, $12); //@line 26093
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 26094
  HEAP32[$16 >> 2] = 5; //@line 26095
  _mbed_tracef(16, 10996, 11082, $16); //@line 26096
  return;
 }
}
function __ZN12LoRaWANStack16remove_a_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10178
 STACKTOP = STACKTOP + 16 | 0; //@line 10179
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10179
 if (!(HEAP32[$0 + 2480 >> 2] | 0)) {
  _mbed_tracef(2, 12482, 12832, sp); //@line 10185
  $$0 = -1012; //@line 10186
  STACKTOP = sp; //@line 10187
  return $$0 | 0; //@line 10187
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10189
 $5 = __ZN7LoRaMac21remove_single_channelEh($0, $1) | 0; //@line 10190
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 344; //@line 10193
  sp = STACKTOP; //@line 10194
  STACKTOP = sp; //@line 10195
  return 0; //@line 10195
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10197
 $$0 = $5; //@line 10198
 STACKTOP = sp; //@line 10199
 return $$0 | 0; //@line 10199
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8753
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8755
 $4 = HEAP8[$0 + 8 >> 0] & 1; //@line 8758
 $5 = HEAP32[$2 >> 2] | 0; //@line 8759
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 48 >> 2] | 0; //@line 8762
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 8763
 FUNCTION_TABLE_vii[$8 & 15]($5, $4); //@line 8764
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 530; //@line 8767
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 8768
  HEAP32[$9 >> 2] = $2; //@line 8769
  sp = STACKTOP; //@line 8770
  return;
 }
 ___async_unwind = 0; //@line 8773
 HEAP32[$ReallocAsyncCtx2 >> 2] = 530; //@line 8774
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 8775
 HEAP32[$9 >> 2] = $2; //@line 8776
 sp = STACKTOP; //@line 8777
 return;
}
function _mbedtls_ccm_setkey__async_cb_138($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 28128
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28130
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28132
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28134
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28136
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 28140
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 28143
 $9 = _mbedtls_cipher_setkey($2, $4, $6, 1) | 0; //@line 28144
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 554; //@line 28147
  sp = STACKTOP; //@line 28148
  return;
 }
 HEAP32[___async_retval >> 2] = $9; //@line 28152
 ___async_unwind = 0; //@line 28153
 HEAP32[$ReallocAsyncCtx >> 2] = 554; //@line 28154
 sp = STACKTOP; //@line 28155
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_278($0) {
 $0 = $0 | 0;
 var $12 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 7985
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7987
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7991
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7993
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 7995
 __ZN4mbed6Ticker5setupEy($6, 1e5, 0); //@line 7996
 $9 = HEAP32[$2 >> 2] | 0; //@line 7997
 if (!$9) {
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 8003
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 8004
 FUNCTION_TABLE_vi[$12 & 1023]($8); //@line 8005
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 92; //@line 8008
  sp = STACKTOP; //@line 8009
  return;
 }
 ___async_unwind = 0; //@line 8012
 HEAP32[$ReallocAsyncCtx3 >> 2] = 92; //@line 8013
 sp = STACKTOP; //@line 8014
 return;
}
function __ZN4mbed11InterruptInD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 29407
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29409
 $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 29411
 if (!$4) {
  __ZdlPv($2); //@line 29414
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 29419
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 29420
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 40 | 0); //@line 29421
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 101; //@line 29424
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 29425
  HEAP32[$9 >> 2] = $2; //@line 29426
  sp = STACKTOP; //@line 29427
  return;
 }
 ___async_unwind = 0; //@line 29430
 HEAP32[$ReallocAsyncCtx2 >> 2] = 101; //@line 29431
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 29432
 HEAP32[$9 >> 2] = $2; //@line 29433
 sp = STACKTOP; //@line 29434
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb_170($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 766
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 770
 $4 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 771
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 76 >> 2] | 0; //@line 774
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 775
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 776
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 538; //@line 779
  $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 780
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 781
  sp = STACKTOP; //@line 782
  return;
 }
 ___async_unwind = 0; //@line 785
 HEAP32[$ReallocAsyncCtx3 >> 2] = 538; //@line 786
 $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 787
 HEAP32[$8 >> 2] = $AsyncRetVal; //@line 788
 sp = STACKTOP; //@line 789
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 737
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 739
 $3 = HEAP32[$2 >> 2] | 0; //@line 740
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0; //@line 743
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 744
 $7 = FUNCTION_TABLE_ii[$6 & 15]($3) | 0; //@line 745
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 537; //@line 748
  $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 749
  HEAP32[$8 >> 2] = $2; //@line 750
  sp = STACKTOP; //@line 751
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 755
 ___async_unwind = 0; //@line 756
 HEAP32[$ReallocAsyncCtx2 >> 2] = 537; //@line 757
 $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 758
 HEAP32[$8 >> 2] = $2; //@line 759
 sp = STACKTOP; //@line 760
 return;
}
function __ZN12LoRaWANStack8shutdownEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10655
 STACKTOP = STACKTOP + 16 | 0; //@line 10656
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10656
 $1 = sp; //@line 10657
 HEAP32[$1 >> 2] = 0; //@line 10658
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 10659
 __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status($0, $1); //@line 10660
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 349; //@line 10663
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 10665
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 10667
  sp = STACKTOP; //@line 10668
  STACKTOP = sp; //@line 10669
  return 0; //@line 10669
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10671
  STACKTOP = sp; //@line 10673
  return HEAP32[$1 >> 2] | 0; //@line 10673
 }
 return 0; //@line 10675
}
function ___stdio_seek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 10952
 STACKTOP = STACKTOP + 32 | 0; //@line 10953
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10953
 $vararg_buffer = sp; //@line 10954
 $3 = sp + 20 | 0; //@line 10955
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 10959
 HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 10961
 HEAP32[$vararg_buffer + 8 >> 2] = $1; //@line 10963
 HEAP32[$vararg_buffer + 12 >> 2] = $3; //@line 10965
 HEAP32[$vararg_buffer + 16 >> 2] = $2; //@line 10967
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$3 >> 2] = -1; //@line 10972
  $10 = -1; //@line 10973
 } else {
  $10 = HEAP32[$3 >> 2] | 0; //@line 10976
 }
 STACKTOP = sp; //@line 10978
 return $10 | 0; //@line 10978
}
function __ZN12LoRaWANStack17drop_channel_listEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10204
 STACKTOP = STACKTOP + 16 | 0; //@line 10205
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10205
 if (!(HEAP32[$0 + 2480 >> 2] | 0)) {
  _mbed_tracef(2, 12482, 12832, sp); //@line 10211
  $$0 = -1012; //@line 10212
  STACKTOP = sp; //@line 10213
  return $$0 | 0; //@line 10213
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10215
 $4 = __ZN7LoRaMac19remove_channel_planEv($0) | 0; //@line 10216
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 345; //@line 10219
  sp = STACKTOP; //@line 10220
  STACKTOP = sp; //@line 10221
  return 0; //@line 10221
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10223
 $$0 = $4; //@line 10224
 STACKTOP = sp; //@line 10225
 return $$0 | 0; //@line 10225
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_239($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 5570
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5574
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5576
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5578
 HEAP32[$4 + 1788 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 5581
 HEAP8[$4 + 1936 >> 0] = 1; //@line 5583
 HEAP8[$6 >> 0] = 1; //@line 5584
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(4) | 0; //@line 5585
 __ZN7LoRaPHY25setup_public_network_modeEb($8, 1); //@line 5586
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 461; //@line 5589
  sp = STACKTOP; //@line 5590
  return;
 }
 ___async_unwind = 0; //@line 5593
 HEAP32[$ReallocAsyncCtx10 >> 2] = 461; //@line 5594
 sp = STACKTOP; //@line 5595
 return;
}
function __ZN4mbed7Timeout7handlerEv__async_cb_65($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 22181
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22185
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 22186
 if (!$5) {
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 22192
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 22193
 FUNCTION_TABLE_vi[$8 & 1023]($4); //@line 22194
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 111; //@line 22197
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 22198
  HEAP32[$9 >> 2] = $4; //@line 22199
  sp = STACKTOP; //@line 22200
  return;
 }
 ___async_unwind = 0; //@line 22203
 HEAP32[$ReallocAsyncCtx3 >> 2] = 111; //@line 22204
 $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 22205
 HEAP32[$9 >> 2] = $4; //@line 22206
 sp = STACKTOP; //@line 22207
 return;
}
function __ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $12 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6490
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 6493
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 6495
 $5 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 6497
 if (!($$unpack2$i & 1)) {
  $12 = $$unpack$i; //@line 6502
 } else {
  $12 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 6507
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6509
 FUNCTION_TABLE_vii[$12 & 15]($5, $1); //@line 6510
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 217; //@line 6513
  sp = STACKTOP; //@line 6514
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6517
  return;
 }
}
function _mbed_assert_internal($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 6744
 STACKTOP = STACKTOP + 16 | 0; //@line 6745
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6745
 $vararg_buffer = sp; //@line 6746
 HEAP32[$vararg_buffer >> 2] = $0; //@line 6747
 HEAP32[$vararg_buffer + 4 >> 2] = $1; //@line 6749
 HEAP32[$vararg_buffer + 8 >> 2] = $2; //@line 6751
 _mbed_error_printf(14553, $vararg_buffer); //@line 6752
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6753
 _mbed_die(); //@line 6754
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 599; //@line 6757
  sp = STACKTOP; //@line 6758
  STACKTOP = sp; //@line 6759
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6761
  STACKTOP = sp; //@line 6762
  return;
 }
}
function __ZN16SX1276_LoRaRadio7standbyEv($0) {
 $0 = $0 | 0;
 var $vararg_buffer1 = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP; //@line 102
 STACKTOP = STACKTOP + 32 | 0; //@line 103
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 103
 $vararg_buffer3 = sp + 16 | 0; //@line 104
 $vararg_buffer1 = sp + 8 | 0; //@line 105
 _mbed_tracef(16, 10996, 11748, sp); //@line 107
 __ZN4mbed6Ticker6detachEv($0 + 1048 | 0); //@line 109
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 111
 HEAP32[$vararg_buffer1 >> 2] = 1; //@line 112
 _mbed_tracef(16, 10996, 11053, $vararg_buffer1); //@line 113
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 114
 HEAP32[$vararg_buffer3 >> 2] = 1; //@line 115
 _mbed_tracef(16, 10996, 11082, $vararg_buffer3); //@line 116
 HEAP8[$0 + 688 >> 0] = 0; //@line 118
 STACKTOP = sp; //@line 119
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $24 = 0, $4 = 0, $9 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21543
 HEAP32[$4 + 1168 >> 2] = HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0 ? 2 : 1; //@line 21548
 $9 = $4 + 2040 | 0; //@line 21549
 HEAP32[$9 >> 2] = 2; //@line 21550
 HEAP32[$4 + 2076 >> 2] = 2; //@line 21552
 __ZN14LoRaMacCommand20clear_command_bufferEv($4 + 476 | 0); //@line 21554
 HEAP8[$4 + 2047 >> 0] = HEAP8[$4 + 1699 >> 0] | 0; //@line 21558
 HEAP8[$4 + 2046 >> 0] = 0; //@line 21560
 HEAP32[$4 + 2048 >> 2] = 0; //@line 21562
 HEAP8[$4 + 1180 >> 0] = 0; //@line 21564
 HEAP32[$9 >> 2] = 0; //@line 21565
 if ((HEAP32[$4 + 2036 >> 2] | 0) == 1) {
  return;
 }
 if (HEAP8[$4 + 1174 >> 0] | 0) {
  return;
 }
 $24 = $4 + 1760 | 0; //@line 21578
 HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + 1; //@line 21581
 return;
}
function _snprintf($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15536
 STACKTOP = STACKTOP + 16 | 0; //@line 15537
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15537
 $3 = sp; //@line 15538
 HEAP32[$3 >> 2] = $varargs; //@line 15539
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 15540
 $4 = _vsnprintf($0, $1, $2, $3) | 0; //@line 15541
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 643; //@line 15544
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 15546
  sp = STACKTOP; //@line 15547
  STACKTOP = sp; //@line 15548
  return 0; //@line 15548
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15550
  STACKTOP = sp; //@line 15551
  return $4 | 0; //@line 15551
 }
 return 0; //@line 15553
}
function _initialize__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 29462
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29464
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29466
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29468
 $9 = HEAP32[(HEAP32[$4 >> 2] | 0) + 24 >> 2] | 0; //@line 29471
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 29472
 $10 = FUNCTION_TABLE_i[$9 & 7]() | 0; //@line 29473
 if (!___async) {
  HEAP32[___async_retval >> 2] = $10; //@line 29477
  ___async_unwind = 0; //@line 29478
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 583; //@line 29480
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 29482
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 29484
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 29486
 sp = STACKTOP; //@line 29487
 return;
}
function _schedule_interrupt__async_cb_174($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 1159
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1161
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1163
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1165
 $9 = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0; //@line 1168
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(16) | 0; //@line 1169
 $10 = FUNCTION_TABLE_i[$9 & 7]() | 0; //@line 1170
 if (!___async) {
  HEAP32[___async_retval >> 2] = $10; //@line 1174
  ___async_unwind = 0; //@line 1175
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 593; //@line 1177
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $4; //@line 1179
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $6; //@line 1181
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $2; //@line 1183
 sp = STACKTOP; //@line 1184
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11506
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 11509
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 11511
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 11513
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 11518
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 11523
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11525
 FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 11526
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 373; //@line 11529
  sp = STACKTOP; //@line 11530
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 11533
  return;
 }
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1864
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 1867
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 1869
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 1871
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 1876
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 1881
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1883
 FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 1884
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 88; //@line 1887
  sp = STACKTOP; //@line 1888
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1891
  return;
 }
}
function _mbedtls_ccm_setkey__async_cb_139($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28161
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28163
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28165
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28167
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28169
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 28170
 $9 = _mbedtls_cipher_setup($2, $4) | 0; //@line 28171
 if (!___async) {
  HEAP32[___async_retval >> 2] = $9; //@line 28175
  ___async_unwind = 0; //@line 28176
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 553; //@line 28178
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 28180
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 28182
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $8; //@line 28184
 sp = STACKTOP; //@line 28185
 return;
}
function _mbed_vtracef__async_cb_319($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 12451
 HEAP32[171] = HEAP32[169]; //@line 12453
 $2 = HEAP32[177] | 0; //@line 12454
 if (!$2) {
  return;
 }
 $4 = HEAP32[178] | 0; //@line 12459
 HEAP32[178] = 0; //@line 12460
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 12461
 FUNCTION_TABLE_v[$2 & 7](); //@line 12462
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 136; //@line 12465
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 12466
  HEAP32[$5 >> 2] = $4; //@line 12467
  sp = STACKTOP; //@line 12468
  return;
 }
 ___async_unwind = 0; //@line 12471
 HEAP32[$ReallocAsyncCtx8 >> 2] = 136; //@line 12472
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 12473
 HEAP32[$5 >> 2] = $4; //@line 12474
 sp = STACKTOP; //@line 12475
 return;
}
function _mbed_vtracef__async_cb_316($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 12187
 HEAP32[171] = HEAP32[169]; //@line 12189
 $2 = HEAP32[177] | 0; //@line 12190
 if (!$2) {
  return;
 }
 $4 = HEAP32[178] | 0; //@line 12195
 HEAP32[178] = 0; //@line 12196
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 12197
 FUNCTION_TABLE_v[$2 & 7](); //@line 12198
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 136; //@line 12201
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 12202
  HEAP32[$5 >> 2] = $4; //@line 12203
  sp = STACKTOP; //@line 12204
  return;
 }
 ___async_unwind = 0; //@line 12207
 HEAP32[$ReallocAsyncCtx8 >> 2] = 136; //@line 12208
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 12209
 HEAP32[$5 >> 2] = $4; //@line 12210
 sp = STACKTOP; //@line 12211
 return;
}
function _mbed_vtracef__async_cb_315($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 12157
 HEAP32[171] = HEAP32[169]; //@line 12159
 $2 = HEAP32[177] | 0; //@line 12160
 if (!$2) {
  return;
 }
 $4 = HEAP32[178] | 0; //@line 12165
 HEAP32[178] = 0; //@line 12166
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 12167
 FUNCTION_TABLE_v[$2 & 7](); //@line 12168
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 136; //@line 12171
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 12172
  HEAP32[$5 >> 2] = $4; //@line 12173
  sp = STACKTOP; //@line 12174
  return;
 }
 ___async_unwind = 0; //@line 12177
 HEAP32[$ReallocAsyncCtx8 >> 2] = 136; //@line 12178
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 12179
 HEAP32[$5 >> 2] = $4; //@line 12180
 sp = STACKTOP; //@line 12181
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9279
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 9282
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 9284
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 9286
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 9291
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 9296
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9298
 FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 9299
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 319; //@line 9302
  sp = STACKTOP; //@line 9303
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9306
  return;
 }
}
function _mbedtls_cipher_info_from_values($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010 = 0, $$011 = 0, $3 = 0, $6 = 0, label = 0;
 $3 = HEAP32[2370] | 0; //@line 2675
 if (!$3) {
  $$010 = 0; //@line 2678
  return $$010 | 0; //@line 2679
 } else {
  $$011 = 9476; //@line 2681
  $6 = $3; //@line 2681
 }
 while (1) {
  if ((HEAP32[HEAP32[$6 + 28 >> 2] >> 2] | 0) == ($0 | 0)) {
   if ((HEAP32[$6 + 8 >> 2] | 0) == ($1 | 0)) {
    if ((HEAP32[$6 + 4 >> 2] | 0) == ($2 | 0)) {
     $$010 = $6; //@line 2697
     label = 6; //@line 2698
     break;
    }
   }
  }
  $6 = HEAP32[$$011 + 12 >> 2] | 0; //@line 2705
  if (!$6) {
   $$010 = 0; //@line 2708
   label = 6; //@line 2709
   break;
  } else {
   $$011 = $$011 + 8 | 0; //@line 2712
  }
 }
 if ((label | 0) == 6) {
  return $$010 | 0; //@line 2716
 }
 return 0; //@line 2718
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8569
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8571
 $3 = HEAP32[$2 >> 2] | 0; //@line 8572
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0; //@line 8575
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 8576
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 8577
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 527; //@line 8580
  $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 8581
  HEAP32[$7 >> 2] = $2; //@line 8582
  sp = STACKTOP; //@line 8583
  return;
 }
 ___async_unwind = 0; //@line 8586
 HEAP32[$ReallocAsyncCtx2 >> 2] = 527; //@line 8587
 $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 8588
 HEAP32[$7 >> 2] = $2; //@line 8589
 sp = STACKTOP; //@line 8590
 return;
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 5294
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5296
 $3 = HEAP32[$2 >> 2] | 0; //@line 5297
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0; //@line 5300
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 5301
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 5302
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 524; //@line 5305
  $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 5306
  HEAP32[$7 >> 2] = $2; //@line 5307
  sp = STACKTOP; //@line 5308
  return;
 }
 ___async_unwind = 0; //@line 5311
 HEAP32[$ReallocAsyncCtx2 >> 2] = 524; //@line 5312
 $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 5313
 HEAP32[$7 >> 2] = $2; //@line 5314
 sp = STACKTOP; //@line 5315
 return;
}
function __ZN16LoRaWANInterface16set_device_classE14device_class_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4749
 STACKTOP = STACKTOP + 16 | 0; //@line 4750
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4750
 $2 = sp; //@line 4751
 HEAP32[$2 >> 2] = $1; //@line 4752
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4754
 $4 = __ZN12LoRaWANStack16set_device_classERK14device_class_t($0 + 4 | 0, $2) | 0; //@line 4755
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 149; //@line 4758
  sp = STACKTOP; //@line 4759
  STACKTOP = sp; //@line 4760
  return 0; //@line 4760
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4762
  STACKTOP = sp; //@line 4763
  return $4 | 0; //@line 4763
 }
 return 0; //@line 4765
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $13 = 0, $4 = 0, $5 = 0;
 $4 = $1 + 16 | 0; //@line 16236
 $5 = HEAP32[$4 >> 2] | 0; //@line 16237
 do {
  if (!$5) {
   HEAP32[$4 >> 2] = $2; //@line 16241
   HEAP32[$1 + 24 >> 2] = $3; //@line 16243
   HEAP32[$1 + 36 >> 2] = 1; //@line 16245
  } else {
   if (($5 | 0) != ($2 | 0)) {
    $13 = $1 + 36 | 0; //@line 16249
    HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1; //@line 16252
    HEAP32[$1 + 24 >> 2] = 2; //@line 16254
    HEAP8[$1 + 54 >> 0] = 1; //@line 16256
    break;
   }
   $10 = $1 + 24 | 0; //@line 16259
   if ((HEAP32[$10 >> 2] | 0) == 2) {
    HEAP32[$10 >> 2] = $3; //@line 16263
   }
  }
 } while (0);
 return;
}
function __ZN4mbed5Timer5startEv($0) {
 $0 = $0 | 0;
 var $13 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2819
 if (HEAP32[$0 >> 2] | 0) {
  return;
 }
 if (HEAP8[$0 + 28 >> 0] | 0) {}
 $7 = HEAP32[$0 + 24 >> 2] | 0; //@line 2831
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2832
 $8 = _ticker_read_us($7) | 0; //@line 2833
 $9 = tempRet0; //@line 2834
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 113; //@line 2837
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2839
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 2841
  sp = STACKTOP; //@line 2842
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2845
 $13 = $0 + 8 | 0; //@line 2847
 HEAP32[$13 >> 2] = $8; //@line 2849
 HEAP32[$13 + 4 >> 2] = $9; //@line 2852
 HEAP32[$0 >> 2] = 1; //@line 2853
 return;
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_79($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22756
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22760
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 22765
 _mbed_assert_internal(13097, 12384, 646); //@line 22766
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 331; //@line 22769
  $6 = $ReallocAsyncCtx6 + 4 | 0; //@line 22770
  HEAP32[$6 >> 2] = $4; //@line 22771
  sp = STACKTOP; //@line 22772
  return;
 }
 ___async_unwind = 0; //@line 22775
 HEAP32[$ReallocAsyncCtx6 >> 2] = 331; //@line 22776
 $6 = $ReallocAsyncCtx6 + 4 | 0; //@line 22777
 HEAP32[$6 >> 2] = $4; //@line 22778
 sp = STACKTOP; //@line 22779
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_145($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 28485
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28489
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 28494
 _mbed_assert_internal(13097, 12384, 646); //@line 28495
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 250; //@line 28498
  $6 = $ReallocAsyncCtx10 + 4 | 0; //@line 28499
  HEAP32[$6 >> 2] = $4; //@line 28500
  sp = STACKTOP; //@line 28501
  return;
 }
 ___async_unwind = 0; //@line 28504
 HEAP32[$ReallocAsyncCtx10 >> 2] = 250; //@line 28505
 $6 = $ReallocAsyncCtx10 + 4 | 0; //@line 28506
 HEAP32[$6 >> 2] = $4; //@line 28507
 sp = STACKTOP; //@line 28508
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_141($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 28252
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28256
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 28261
 _mbed_assert_internal(13097, 12384, 646); //@line 28262
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 242; //@line 28265
  $6 = $ReallocAsyncCtx12 + 4 | 0; //@line 28266
  HEAP32[$6 >> 2] = $4; //@line 28267
  sp = STACKTOP; //@line 28268
  return;
 }
 ___async_unwind = 0; //@line 28271
 HEAP32[$ReallocAsyncCtx12 >> 2] = 242; //@line 28272
 $6 = $ReallocAsyncCtx12 + 4 | 0; //@line 28273
 HEAP32[$6 >> 2] = $4; //@line 28274
 sp = STACKTOP; //@line 28275
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_108($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 25409
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25413
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 25418
 _mbed_assert_internal(13097, 12384, 646); //@line 25419
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 238; //@line 25422
  $6 = $ReallocAsyncCtx10 + 4 | 0; //@line 25423
  HEAP32[$6 >> 2] = $4; //@line 25424
  sp = STACKTOP; //@line 25425
  return;
 }
 ___async_unwind = 0; //@line 25428
 HEAP32[$ReallocAsyncCtx10 >> 2] = 238; //@line 25429
 $6 = $ReallocAsyncCtx10 + 4 | 0; //@line 25430
 HEAP32[$6 >> 2] = $4; //@line 25431
 sp = STACKTOP; //@line 25432
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_106($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 25342
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25346
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 25351
 _mbed_assert_internal(13097, 12384, 646); //@line 25352
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 234; //@line 25355
  $6 = $ReallocAsyncCtx11 + 4 | 0; //@line 25356
  HEAP32[$6 >> 2] = $4; //@line 25357
  sp = STACKTOP; //@line 25358
  return;
 }
 ___async_unwind = 0; //@line 25361
 HEAP32[$ReallocAsyncCtx11 >> 2] = 234; //@line 25362
 $6 = $ReallocAsyncCtx11 + 4 | 0; //@line 25363
 HEAP32[$6 >> 2] = $4; //@line 25364
 sp = STACKTOP; //@line 25365
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_104($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 25275
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25279
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 25284
 _mbed_assert_internal(13097, 12384, 646); //@line 25285
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 230; //@line 25288
  $6 = $ReallocAsyncCtx12 + 4 | 0; //@line 25289
  HEAP32[$6 >> 2] = $4; //@line 25290
  sp = STACKTOP; //@line 25291
  return;
 }
 ___async_unwind = 0; //@line 25294
 HEAP32[$ReallocAsyncCtx12 >> 2] = 230; //@line 25295
 $6 = $ReallocAsyncCtx12 + 4 | 0; //@line 25296
 HEAP32[$6 >> 2] = $4; //@line 25297
 sp = STACKTOP; //@line 25298
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_220($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 4091
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4093
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4095
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 4097
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1856 | 0); //@line 4098
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 465; //@line 4101
  $6 = $ReallocAsyncCtx2 + 4 | 0; //@line 4102
  HEAP32[$6 >> 2] = $2; //@line 4103
  sp = STACKTOP; //@line 4104
  return;
 }
 ___async_unwind = 0; //@line 4107
 HEAP32[$ReallocAsyncCtx2 >> 2] = 465; //@line 4108
 $6 = $ReallocAsyncCtx2 + 4 | 0; //@line 4109
 HEAP32[$6 >> 2] = $2; //@line 4110
 sp = STACKTOP; //@line 4111
 return;
}
function _equeue_post($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3295
 $4 = _equeue_tick() | 0; //@line 3297
 HEAP32[$2 + -4 >> 2] = $1; //@line 3299
 $6 = $2 + -16 | 0; //@line 3300
 HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + $4; //@line 3303
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3304
 $9 = _equeue_enqueue($0, $2 + -36 | 0, $4) | 0; //@line 3305
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 121; //@line 3308
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3310
  sp = STACKTOP; //@line 3311
  return 0; //@line 3312
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3314
  _equeue_sema_signal($0 + 48 | 0); //@line 3316
  return $9 | 0; //@line 3317
 }
 return 0; //@line 3319
}
function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = HEAP8[$0 >> 0] | 0; //@line 11059
 $3 = HEAP8[$1 >> 0] | 0; //@line 11060
 if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24) {
  $$lcssa = $3; //@line 11065
  $$lcssa8 = $2; //@line 11065
 } else {
  $$011 = $1; //@line 11067
  $$0710 = $0; //@line 11067
  do {
   $$0710 = $$0710 + 1 | 0; //@line 11069
   $$011 = $$011 + 1 | 0; //@line 11070
   $8 = HEAP8[$$0710 >> 0] | 0; //@line 11071
   $9 = HEAP8[$$011 >> 0] | 0; //@line 11072
  } while (!($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 != $9 << 24 >> 24));
  $$lcssa = $9; //@line 11077
  $$lcssa8 = $8; //@line 11077
 }
 return ($$lcssa8 & 255) - ($$lcssa & 255) | 0; //@line 11087
}
function __ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_186($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 1948
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1952
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 1957
 _mbed_assert_internal(13097, 12384, 646); //@line 1958
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 302; //@line 1961
  $6 = $ReallocAsyncCtx4 + 4 | 0; //@line 1962
  HEAP32[$6 >> 2] = $4; //@line 1963
  sp = STACKTOP; //@line 1964
  return;
 }
 ___async_unwind = 0; //@line 1967
 HEAP32[$ReallocAsyncCtx4 >> 2] = 302; //@line 1968
 $6 = $ReallocAsyncCtx4 + 4 | 0; //@line 1969
 HEAP32[$6 >> 2] = $4; //@line 1970
 sp = STACKTOP; //@line 1971
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_267($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6891
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6895
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 6897
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 6899
 $9 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 6901
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 6902
 FUNCTION_TABLE_viii[$9 & 7]($4, $6, $8); //@line 6903
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 318; //@line 6906
  sp = STACKTOP; //@line 6907
  return;
 }
 ___async_unwind = 0; //@line 6910
 HEAP32[$ReallocAsyncCtx >> 2] = 318; //@line 6911
 sp = STACKTOP; //@line 6912
 return;
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 16786
 STACKTOP = STACKTOP + 16 | 0; //@line 16787
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16787
 $vararg_buffer = sp; //@line 16788
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 16789
 FUNCTION_TABLE_v[$0 & 7](); //@line 16790
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 661; //@line 16793
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 16795
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 16797
  sp = STACKTOP; //@line 16798
  STACKTOP = sp; //@line 16799
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16801
  _abort_message(18046, $vararg_buffer); //@line 16802
 }
}
function __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22583
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22587
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22591
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[___async_retval >> 2]; //@line 22594
 _mbed_tracef(16, 12482, 12873, $4); //@line 22595
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 22596
 __ZN12LoRaWANStack23process_connected_stateEv($8); //@line 22597
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 325; //@line 22600
  sp = STACKTOP; //@line 22601
  return;
 }
 ___async_unwind = 0; //@line 22604
 HEAP32[$ReallocAsyncCtx2 >> 2] = 325; //@line 22605
 sp = STACKTOP; //@line 22606
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_137($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 28088
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28092
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 28093
 if (!$5) {
  HEAP32[___async_retval >> 2] = 0; //@line 28097
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 28101
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(4) | 0; //@line 28102
 FUNCTION_TABLE_vi[$8 & 1023]($4); //@line 28103
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 340; //@line 28106
  sp = STACKTOP; //@line 28107
  return;
 }
 ___async_unwind = 0; //@line 28110
 HEAP32[$ReallocAsyncCtx8 >> 2] = 340; //@line 28111
 sp = STACKTOP; //@line 28112
 return;
}
function _serial_putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 7332
 $2 = HEAP32[2593] | 0; //@line 7333
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7334
 _putc($1, $2) | 0; //@line 7335
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 621; //@line 7338
  HEAP32[$AsyncCtx3 + 4 >> 2] = $2; //@line 7340
  sp = STACKTOP; //@line 7341
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 7344
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7345
 _fflush($2) | 0; //@line 7346
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 622; //@line 7349
  sp = STACKTOP; //@line 7350
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7353
  return;
 }
}
function _memcmp($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $14 = 0, $4 = 0, $5 = 0;
 L1 : do {
  if (!$2) {
   $14 = 0; //@line 15501
  } else {
   $$01318 = $0; //@line 15503
   $$01417 = $2; //@line 15503
   $$019 = $1; //@line 15503
   while (1) {
    $4 = HEAP8[$$01318 >> 0] | 0; //@line 15505
    $5 = HEAP8[$$019 >> 0] | 0; //@line 15506
    if ($4 << 24 >> 24 != $5 << 24 >> 24) {
     break;
    }
    $$01417 = $$01417 + -1 | 0; //@line 15511
    if (!$$01417) {
     $14 = 0; //@line 15516
     break L1;
    } else {
     $$01318 = $$01318 + 1 | 0; //@line 15519
     $$019 = $$019 + 1 | 0; //@line 15519
    }
   }
   $14 = ($4 & 255) - ($5 & 255) | 0; //@line 15525
  }
 } while (0);
 return $14 | 0; //@line 15528
}
function ___stdout_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 11011
 STACKTOP = STACKTOP + 32 | 0; //@line 11012
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11012
 $vararg_buffer = sp; //@line 11013
 HEAP32[$0 + 36 >> 2] = 12; //@line 11016
 if (!(HEAP32[$0 >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 11024
  HEAP32[$vararg_buffer + 4 >> 2] = 21523; //@line 11026
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 16; //@line 11028
  if (___syscall54(54, $vararg_buffer | 0) | 0) {
   HEAP8[$0 + 75 >> 0] = -1; //@line 11033
  }
 }
 $14 = ___stdio_write($0, $1, $2) | 0; //@line 11036
 STACKTOP = sp; //@line 11037
 return $14 | 0; //@line 11037
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_60($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21823
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21825
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21827
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21829
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(16) | 0; //@line 21831
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1856 | 0); //@line 21832
 if (!___async) {
  ___async_unwind = 0; //@line 21835
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 419; //@line 21837
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 21839
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 21841
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 21843
 sp = STACKTOP; //@line 21844
 return;
}
function __ZN7LoRaMac23on_backoff_timer_expiryEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14464
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14465
 $1 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 14466
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 430; //@line 14469
  sp = STACKTOP; //@line 14470
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14473
 if (!$1) {
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14478
 _mbed_assert_internal(13213, 13106, 844); //@line 14479
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 431; //@line 14482
  sp = STACKTOP; //@line 14483
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14486
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_56($0) {
 $0 = $0 | 0;
 var $18 = 0, $2 = 0, $3 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21590
 $3 = $2 + 2040 | 0; //@line 21591
 HEAP32[$3 >> 2] = 2; //@line 21592
 HEAP32[$2 + 2076 >> 2] = 2; //@line 21594
 __ZN14LoRaMacCommand20clear_command_bufferEv($2 + 476 | 0); //@line 21596
 HEAP8[$2 + 2047 >> 0] = HEAP8[$2 + 1699 >> 0] | 0; //@line 21600
 HEAP8[$2 + 2046 >> 0] = 0; //@line 21602
 HEAP32[$2 + 2048 >> 2] = 0; //@line 21604
 HEAP8[$2 + 1180 >> 0] = 0; //@line 21606
 HEAP32[$3 >> 2] = 0; //@line 21607
 if ((HEAP32[$2 + 2036 >> 2] | 0) == 1) {
  return;
 }
 if (HEAP8[$2 + 1174 >> 0] | 0) {
  return;
 }
 $18 = $2 + 1760 | 0; //@line 21620
 HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + 1; //@line 21623
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_376($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 29820
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29822
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29824
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29826
 $8 = HEAP32[HEAP32[$2 >> 2] >> 2] | 0; //@line 29828
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 29829
 FUNCTION_TABLE_vii[$8 & 15]($2, $4); //@line 29830
 if (!___async) {
  ___async_unwind = 0; //@line 29833
 }
 HEAP32[$ReallocAsyncCtx17 >> 2] = 185; //@line 29835
 HEAP32[$ReallocAsyncCtx17 + 4 >> 2] = $6; //@line 29837
 HEAP32[$ReallocAsyncCtx17 + 8 >> 2] = $2; //@line 29839
 sp = STACKTOP; //@line 29840
 return;
}
function _mbed_tracef($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3772
 STACKTOP = STACKTOP + 16 | 0; //@line 3773
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 3773
 $3 = sp; //@line 3774
 HEAP32[$3 >> 2] = $varargs; //@line 3775
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3776
 _mbed_vtracef($0, $1, $2, $3); //@line 3777
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 125; //@line 3780
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 3782
  sp = STACKTOP; //@line 3783
  STACKTOP = sp; //@line 3784
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3786
  STACKTOP = sp; //@line 3787
  return;
 }
}
function __ZN12LoRaWANStack26process_status_check_stateEv__async_cb_121($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 26438
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26440
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26442
 $5 = HEAP32[$2 >> 2] | 0; //@line 26443
 if (!($5 & 2)) {
  return;
 }
 HEAP32[$2 >> 2] = $5 & -3; //@line 26450
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 26451
 __ZN12LoRaWANStack23mcps_indication_handlerEv($4); //@line 26452
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 226; //@line 26455
  sp = STACKTOP; //@line 26456
  return;
 }
 ___async_unwind = 0; //@line 26459
 HEAP32[$ReallocAsyncCtx >> 2] = 226; //@line 26460
 sp = STACKTOP; //@line 26461
 return;
}
function _mbed_die__async_cb_261($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 6520
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6522
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 6524
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 6525
 _wait_ms(150); //@line 6526
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 602; //@line 6529
  $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 6530
  HEAP32[$4 >> 2] = $2; //@line 6531
  sp = STACKTOP; //@line 6532
  return;
 }
 ___async_unwind = 0; //@line 6535
 HEAP32[$ReallocAsyncCtx14 >> 2] = 602; //@line 6536
 $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 6537
 HEAP32[$4 >> 2] = $2; //@line 6538
 sp = STACKTOP; //@line 6539
 return;
}
function _mbed_die__async_cb_260($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 6495
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6497
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 6499
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 6500
 _wait_ms(150); //@line 6501
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 603; //@line 6504
  $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 6505
  HEAP32[$4 >> 2] = $2; //@line 6506
  sp = STACKTOP; //@line 6507
  return;
 }
 ___async_unwind = 0; //@line 6510
 HEAP32[$ReallocAsyncCtx13 >> 2] = 603; //@line 6511
 $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 6512
 HEAP32[$4 >> 2] = $2; //@line 6513
 sp = STACKTOP; //@line 6514
 return;
}
function _mbed_die__async_cb_259($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 6470
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6472
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 6474
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 6475
 _wait_ms(150); //@line 6476
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 604; //@line 6479
  $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 6480
  HEAP32[$4 >> 2] = $2; //@line 6481
  sp = STACKTOP; //@line 6482
  return;
 }
 ___async_unwind = 0; //@line 6485
 HEAP32[$ReallocAsyncCtx12 >> 2] = 604; //@line 6486
 $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 6487
 HEAP32[$4 >> 2] = $2; //@line 6488
 sp = STACKTOP; //@line 6489
 return;
}
function _mbed_die__async_cb_258($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 6445
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6447
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 6449
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 6450
 _wait_ms(150); //@line 6451
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 605; //@line 6454
  $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 6455
  HEAP32[$4 >> 2] = $2; //@line 6456
  sp = STACKTOP; //@line 6457
  return;
 }
 ___async_unwind = 0; //@line 6460
 HEAP32[$ReallocAsyncCtx11 >> 2] = 605; //@line 6461
 $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 6462
 HEAP32[$4 >> 2] = $2; //@line 6463
 sp = STACKTOP; //@line 6464
 return;
}
function _mbed_die__async_cb_257($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 6420
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6422
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 6424
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 6425
 _wait_ms(150); //@line 6426
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 606; //@line 6429
  $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 6430
  HEAP32[$4 >> 2] = $2; //@line 6431
  sp = STACKTOP; //@line 6432
  return;
 }
 ___async_unwind = 0; //@line 6435
 HEAP32[$ReallocAsyncCtx10 >> 2] = 606; //@line 6436
 $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 6437
 HEAP32[$4 >> 2] = $2; //@line 6438
 sp = STACKTOP; //@line 6439
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_61($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21850
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21852
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21854
 $5 = $2 + 1836 | 0; //@line 21855
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 21856
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $5); //@line 21857
 if (!___async) {
  ___async_unwind = 0; //@line 21860
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 418; //@line 21862
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 21864
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 21866
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $5; //@line 21868
 sp = STACKTOP; //@line 21869
 return;
}
function __ZN7LoRaPHY18dl_channel_requestEhj__async_cb_11($0) {
 $0 = $0 | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $10 = 0, $17 = 0, $6 = 0, $9 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18495
 $$ = HEAP8[___async_retval >> 0] & 1 ? 3 : 2; //@line 18499
 $9 = HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 124 >> 2] | 0; //@line 18501
 $10 = HEAPU8[$0 + 8 >> 0] | 0; //@line 18502
 $$1 = (HEAP32[$9 + ($10 * 12 | 0) >> 2] | 0) == 0 ? $$ & 1 : $$; //@line 18507
 if ($$1 << 24 >> 24 != 3) {
  $$0 = $$1; //@line 18510
  $17 = ___async_retval; //@line 18511
  HEAP8[$17 >> 0] = $$0; //@line 18512
  return;
 }
 HEAP32[$9 + ($10 * 12 | 0) + 4 >> 2] = $6; //@line 18516
 $$0 = 3; //@line 18517
 $17 = ___async_retval; //@line 18518
 HEAP8[$17 >> 0] = $$0; //@line 18519
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_1($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17660
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17664
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17666
 $7 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 17668
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 17669
 FUNCTION_TABLE_vii[$7 & 15]($4, $6); //@line 17670
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 262; //@line 17673
  sp = STACKTOP; //@line 17674
  return;
 }
 ___async_unwind = 0; //@line 17677
 HEAP32[$ReallocAsyncCtx >> 2] = 262; //@line 17678
 sp = STACKTOP; //@line 17679
 return;
}
function _mbed_die__async_cb_256($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 6395
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6397
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 6399
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 6400
 _wait_ms(150); //@line 6401
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 607; //@line 6404
  $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 6405
  HEAP32[$4 >> 2] = $2; //@line 6406
  sp = STACKTOP; //@line 6407
  return;
 }
 ___async_unwind = 0; //@line 6410
 HEAP32[$ReallocAsyncCtx9 >> 2] = 607; //@line 6411
 $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 6412
 HEAP32[$4 >> 2] = $2; //@line 6413
 sp = STACKTOP; //@line 6414
 return;
}
function _mbed_die__async_cb_255($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 6370
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6372
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 6374
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 6375
 _wait_ms(400); //@line 6376
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 608; //@line 6379
  $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 6380
  HEAP32[$4 >> 2] = $2; //@line 6381
  sp = STACKTOP; //@line 6382
  return;
 }
 ___async_unwind = 0; //@line 6385
 HEAP32[$ReallocAsyncCtx8 >> 2] = 608; //@line 6386
 $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 6387
 HEAP32[$4 >> 2] = $2; //@line 6388
 sp = STACKTOP; //@line 6389
 return;
}
function _mbed_die__async_cb_254($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 6345
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6347
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 6349
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 6350
 _wait_ms(400); //@line 6351
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 609; //@line 6354
  $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 6355
  HEAP32[$4 >> 2] = $2; //@line 6356
  sp = STACKTOP; //@line 6357
  return;
 }
 ___async_unwind = 0; //@line 6360
 HEAP32[$ReallocAsyncCtx7 >> 2] = 609; //@line 6361
 $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 6362
 HEAP32[$4 >> 2] = $2; //@line 6363
 sp = STACKTOP; //@line 6364
 return;
}
function _mbed_die__async_cb_253($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 6320
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6322
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 6324
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 6325
 _wait_ms(400); //@line 6326
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 610; //@line 6329
  $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 6330
  HEAP32[$4 >> 2] = $2; //@line 6331
  sp = STACKTOP; //@line 6332
  return;
 }
 ___async_unwind = 0; //@line 6335
 HEAP32[$ReallocAsyncCtx6 >> 2] = 610; //@line 6336
 $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 6337
 HEAP32[$4 >> 2] = $2; //@line 6338
 sp = STACKTOP; //@line 6339
 return;
}
function _mbed_die__async_cb_252($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 6295
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6297
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 6299
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 6300
 _wait_ms(400); //@line 6301
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 611; //@line 6304
  $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 6305
  HEAP32[$4 >> 2] = $2; //@line 6306
  sp = STACKTOP; //@line 6307
  return;
 }
 ___async_unwind = 0; //@line 6310
 HEAP32[$ReallocAsyncCtx5 >> 2] = 611; //@line 6311
 $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 6312
 HEAP32[$4 >> 2] = $2; //@line 6313
 sp = STACKTOP; //@line 6314
 return;
}
function _mbed_die__async_cb_251($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 6270
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6272
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 6274
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 6275
 _wait_ms(400); //@line 6276
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 612; //@line 6279
  $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 6280
  HEAP32[$4 >> 2] = $2; //@line 6281
  sp = STACKTOP; //@line 6282
  return;
 }
 ___async_unwind = 0; //@line 6285
 HEAP32[$ReallocAsyncCtx4 >> 2] = 612; //@line 6286
 $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 6287
 HEAP32[$4 >> 2] = $2; //@line 6288
 sp = STACKTOP; //@line 6289
 return;
}
function _mbed_die__async_cb_250($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6245
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6247
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 6249
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 6250
 _wait_ms(400); //@line 6251
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 613; //@line 6254
  $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 6255
  HEAP32[$4 >> 2] = $2; //@line 6256
  sp = STACKTOP; //@line 6257
  return;
 }
 ___async_unwind = 0; //@line 6260
 HEAP32[$ReallocAsyncCtx3 >> 2] = 613; //@line 6261
 $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 6262
 HEAP32[$4 >> 2] = $2; //@line 6263
 sp = STACKTOP; //@line 6264
 return;
}
function _mbed_die__async_cb_249($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6220
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6222
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 6224
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 6225
 _wait_ms(400); //@line 6226
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 614; //@line 6229
  $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 6230
  HEAP32[$4 >> 2] = $2; //@line 6231
  sp = STACKTOP; //@line 6232
  return;
 }
 ___async_unwind = 0; //@line 6235
 HEAP32[$ReallocAsyncCtx2 >> 2] = 614; //@line 6236
 $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 6237
 HEAP32[$4 >> 2] = $2; //@line 6238
 sp = STACKTOP; //@line 6239
 return;
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_87($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 23319
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23323
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23325
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[$6 >> 2] = 2; //@line 23328
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 23331
 _mbed_assert_internal(13097, 12384, 646); //@line 23332
 if (!___async) {
  ___async_unwind = 0; //@line 23335
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 223; //@line 23337
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $4; //@line 23339
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $6; //@line 23341
 sp = STACKTOP; //@line 23342
 return;
}
function _mbed_die__async_cb_248($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6195
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6197
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 6199
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 6200
 _wait_ms(400); //@line 6201
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 615; //@line 6204
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 6205
  HEAP32[$4 >> 2] = $2; //@line 6206
  sp = STACKTOP; //@line 6207
  return;
 }
 ___async_unwind = 0; //@line 6210
 HEAP32[$ReallocAsyncCtx >> 2] = 615; //@line 6211
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 6212
 HEAP32[$4 >> 2] = $2; //@line 6213
 sp = STACKTOP; //@line 6214
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_211($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 3652
 $4 = HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 788 >> 2] | 0; //@line 3656
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 60 >> 2] | 0; //@line 3662
 if (!$7) {
  return;
 }
 $10 = HEAP32[$7 >> 2] | 0; //@line 3668
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 3669
 FUNCTION_TABLE_vi[$10 & 1023]($4 + 48 | 0); //@line 3670
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 86; //@line 3673
  sp = STACKTOP; //@line 3674
  return;
 }
 ___async_unwind = 0; //@line 3677
 HEAP32[$ReallocAsyncCtx4 >> 2] = 86; //@line 3678
 sp = STACKTOP; //@line 3679
 return;
}
function _mbed_error_printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7072
 STACKTOP = STACKTOP + 16 | 0; //@line 7073
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7073
 $1 = sp; //@line 7074
 HEAP32[$1 >> 2] = $varargs; //@line 7075
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7076
 _mbed_error_vfprintf($0, $1); //@line 7077
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 616; //@line 7080
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 7082
  sp = STACKTOP; //@line 7083
  STACKTOP = sp; //@line 7084
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7086
  STACKTOP = sp; //@line 7087
  return;
 }
}
function __ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $11 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20238
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20240
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 20242
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20244
 if (!$AsyncRetVal) {
  $11 = (HEAP32[$0 + 4 >> 2] | 0) + 2872 | 0; //@line 20247
  HEAP32[$11 >> 2] = HEAP32[$11 >> 2] & -18 | 1; //@line 20251
  __ZN7LoRaMac14set_tx_ongoingEb($4, 1); //@line 20252
  HEAP32[$6 >> 2] = 8; //@line 20253
  $$0 = 0; //@line 20254
 } else {
  $$0 = $AsyncRetVal; //@line 20256
 }
 HEAP16[___async_retval >> 1] = ($$0 | 0) == 0 ? $8 : $$0 & 65535; //@line 20262
 return;
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22265
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22267
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[___async_retval >> 2] = -1003; //@line 22273
  return;
 }
 $4 = HEAP32[$2 >> 2] | 0; //@line 22276
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 22277
 __ZN7LoRaPHY18put_radio_to_sleepEv($4); //@line 22278
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 474; //@line 22281
  sp = STACKTOP; //@line 22282
  return;
 }
 ___async_unwind = 0; //@line 22285
 HEAP32[$ReallocAsyncCtx2 >> 2] = 474; //@line 22286
 sp = STACKTOP; //@line 22287
 return;
}
function __ZN7LoRaMac21post_process_mcps_reqEv($0) {
 $0 = $0 | 0;
 var $14 = 0, $20 = 0, $6 = 0;
 HEAP8[$0 + 1180 >> 0] = 0; //@line 10942
 HEAP32[$0 + 2040 >> 2] = 0; //@line 10944
 if ((HEAP32[$0 + 2036 >> 2] | 0) != 1) {
  if (HEAP8[$0 + 1174 >> 0] | 0) {
   return;
  }
  $20 = $0 + 1760 | 0; //@line 10955
  HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) + 1; //@line 10958
  return;
 }
 $6 = $0 + 2046 | 0; //@line 10961
 if (!(HEAP8[$6 >> 0] | 0)) {
  return;
 }
 HEAP8[$0 + 1177 >> 0] = 0; //@line 10968
 HEAP8[$6 >> 0] = 0; //@line 10969
 HEAP8[$0 + 2028 >> 0] = 0; //@line 10971
 if (HEAP8[$0 + 1174 >> 0] | 0) {
  return;
 }
 $14 = $0 + 1760 | 0; //@line 10978
 HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 1; //@line 10981
 return;
}
function __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_15($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18655
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18659
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 18660
 if (!$5) {
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 18666
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 18667
 FUNCTION_TABLE_vi[$8 & 1023]($4); //@line 18668
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 406; //@line 18671
  sp = STACKTOP; //@line 18672
  return;
 }
 ___async_unwind = 0; //@line 18675
 HEAP32[$ReallocAsyncCtx2 >> 2] = 406; //@line 18676
 sp = STACKTOP; //@line 18677
 return;
}
function __ZN4mbed10TimerEventC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2945
 HEAP32[$0 >> 2] = 640; //@line 2946
 $1 = $0 + 8 | 0; //@line 2947
 HEAP32[$1 >> 2] = 0; //@line 2948
 HEAP32[$1 + 4 >> 2] = 0; //@line 2948
 HEAP32[$1 + 8 >> 2] = 0; //@line 2948
 HEAP32[$1 + 12 >> 2] = 0; //@line 2948
 $2 = _get_us_ticker_data() | 0; //@line 2949
 HEAP32[$0 + 24 >> 2] = $2; //@line 2951
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2952
 _ticker_set_handler($2, 116); //@line 2953
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 117; //@line 2956
  sp = STACKTOP; //@line 2957
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2960
  return;
 }
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb_277($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7617
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7621
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 7624
 $7 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 7626
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 7627
 FUNCTION_TABLE_vii[$7 & 15]($4, $6); //@line 7628
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 216; //@line 7631
  sp = STACKTOP; //@line 7632
  return;
 }
 ___async_unwind = 0; //@line 7635
 HEAP32[$ReallocAsyncCtx >> 2] = 216; //@line 7636
 sp = STACKTOP; //@line 7637
 return;
}
function __ZN7LoRaMac15open_rx1_windowEv__async_cb_298($0) {
 $0 = $0 | 0;
 var $10 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10197
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10203
 $8 = (HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) != 0; //@line 10205
 $10 = HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + 1888 >> 2] | 0; //@line 10207
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 10208
 __ZN7LoRaPHY15setup_rx_windowEbj($6, $8, $10); //@line 10209
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 435; //@line 10212
  sp = STACKTOP; //@line 10213
  return;
 }
 ___async_unwind = 0; //@line 10216
 HEAP32[$ReallocAsyncCtx >> 2] = 435; //@line 10217
 sp = STACKTOP; //@line 10218
 return;
}
function _fwrite($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $11 = 0, $13 = 0, $15 = 0, $4 = 0, $phitmp = 0;
 $4 = Math_imul($2, $1) | 0; //@line 11182
 $$ = ($1 | 0) == 0 ? 0 : $2; //@line 11184
 if ((HEAP32[$3 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($3) | 0) == 0; //@line 11190
  $11 = ___fwritex($0, $4, $3) | 0; //@line 11191
  if ($phitmp) {
   $13 = $11; //@line 11193
  } else {
   ___unlockfile($3); //@line 11195
   $13 = $11; //@line 11196
  }
 } else {
  $13 = ___fwritex($0, $4, $3) | 0; //@line 11200
 }
 if (($13 | 0) == ($4 | 0)) {
  $15 = $$; //@line 11204
 } else {
  $15 = ($13 >>> 0) / ($1 >>> 0) | 0; //@line 11207
 }
 return $15 | 0; //@line 11209
}
function __ZN16SX1276_LoRaRadio11tx_done_irqEv($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2026
 __ZN4mbed6Ticker6detachEv($0 + 1240 | 0); //@line 2028
 HEAP8[$0 + 688 >> 0] = 0; //@line 2030
 $4 = HEAP32[$0 + 788 >> 2] | 0; //@line 2032
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 12 >> 2] | 0; //@line 2038
 if (!$7) {
  return;
 }
 $9 = HEAP32[$7 >> 2] | 0; //@line 2043
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2044
 FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 2045
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 93; //@line 2048
  sp = STACKTOP; //@line 2049
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2052
 return;
}
function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $14 = 0, $15 = 0, $8 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$05$lcssa = $2; //@line 13518
 } else {
  $$056 = $2; //@line 13520
  $15 = $1; //@line 13520
  $8 = $0; //@line 13520
  while (1) {
   $14 = $$056 + -1 | 0; //@line 13528
   HEAP8[$14 >> 0] = HEAPU8[15709 + ($8 & 15) >> 0] | 0 | $3; //@line 13529
   $8 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0; //@line 13530
   $15 = tempRet0; //@line 13531
   if (($8 | 0) == 0 & ($15 | 0) == 0) {
    $$05$lcssa = $14; //@line 13536
    break;
   } else {
    $$056 = $14; //@line 13539
   }
  }
 }
 return $$05$lcssa | 0; //@line 13543
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_25($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 19826
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19828
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19830
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(12) | 0; //@line 19837
 _mbed_assert_internal(13097, 13106, 231); //@line 19838
 if (!___async) {
  ___async_unwind = 0; //@line 19841
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 391; //@line 19843
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $2; //@line 19845
 HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $4; //@line 19847
 sp = STACKTOP; //@line 19848
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_24($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 19798
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19800
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19802
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 19809
 _mbed_assert_internal(13097, 13106, 231); //@line 19810
 if (!___async) {
  ___async_unwind = 0; //@line 19813
 }
 HEAP32[$ReallocAsyncCtx13 >> 2] = 394; //@line 19815
 HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $2; //@line 19817
 HEAP32[$ReallocAsyncCtx13 + 8 >> 2] = $4; //@line 19819
 sp = STACKTOP; //@line 19820
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_23($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 19770
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19772
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19774
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(12) | 0; //@line 19781
 _mbed_assert_internal(13097, 13106, 231); //@line 19782
 if (!___async) {
  ___async_unwind = 0; //@line 19785
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 396; //@line 19787
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 19789
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $4; //@line 19791
 sp = STACKTOP; //@line 19792
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_22($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 19742
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19744
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19746
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(12) | 0; //@line 19753
 _mbed_assert_internal(13097, 13106, 231); //@line 19754
 if (!___async) {
  ___async_unwind = 0; //@line 19757
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 398; //@line 19759
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 19761
 HEAP32[$ReallocAsyncCtx11 + 8 >> 2] = $4; //@line 19763
 sp = STACKTOP; //@line 19764
 return;
}
function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0; //@line 133
 newDynamicTop = oldDynamicTop + increment | 0; //@line 134
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory() | 0; //@line 138
  ___setErrNo(12); //@line 139
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop; //@line 143
 if ((newDynamicTop | 0) > (getTotalMemory() | 0)) {
  if (!(enlargeMemory() | 0)) {
   HEAP32[DYNAMICTOP_PTR >> 2] = oldDynamicTop; //@line 147
   ___setErrNo(12); //@line 148
   return -1;
  }
 }
 return oldDynamicTop | 0; //@line 152
}
function __ZN7LoRaMac21set_channel_data_rateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 14613
 STACKTOP = STACKTOP + 16 | 0; //@line 14614
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14614
 $vararg_buffer = sp; //@line 14615
 if (!(HEAP8[$0 + 1936 >> 0] | 0)) {
  if (__ZN7LoRaPHY18verify_tx_datarateEhb($0 + 4 | 0, $1, 0) | 0) {
   HEAP8[$0 + 1877 >> 0] = $1; //@line 14624
   $$0 = 0; //@line 14625
  } else {
   $$0 = -1003; //@line 14627
  }
 } else {
  _mbed_tracef(2, 13239, 13415, $vararg_buffer); //@line 14630
  $$0 = -1003; //@line 14631
 }
 STACKTOP = sp; //@line 14633
 return $$0 | 0; //@line 14633
}
function _mbedtls_gcm_free($0) {
 $0 = $0 | 0;
 var $$034$i = 0, $$05$i = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5668
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5669
 _mbedtls_cipher_free($0); //@line 5670
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 580; //@line 5673
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5675
  sp = STACKTOP; //@line 5676
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5679
 $$034$i = 400; //@line 5680
 $$05$i = $0; //@line 5680
 while (1) {
  $$034$i = $$034$i + -1 | 0; //@line 5682
  HEAP8[$$05$i >> 0] = 0; //@line 5684
  if (!$$034$i) {
   break;
  } else {
   $$05$i = $$05$i + 1 | 0; //@line 5689
  }
 }
 return;
}
function __ZSt9terminatev() {
 var $0 = 0, $16 = 0, $17 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 16751
 $0 = ___cxa_get_globals_fast() | 0; //@line 16752
 if ($0 | 0) {
  $2 = HEAP32[$0 >> 2] | 0; //@line 16755
  if ($2 | 0) {
   $5 = $2 + 48 | 0; //@line 16759
   if ((HEAP32[$5 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$5 + 4 >> 2] | 0) == 1129074247 : 0) {
    $16 = HEAP32[$2 + 12 >> 2] | 0; //@line 16771
    _emscripten_alloc_async_context(4, sp) | 0; //@line 16772
    __ZSt11__terminatePFvvE($16); //@line 16773
   }
  }
 }
 $17 = __ZSt13get_terminatev() | 0; //@line 16778
 _emscripten_alloc_async_context(4, sp) | 0; //@line 16779
 __ZSt11__terminatePFvvE($17); //@line 16780
}
function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $3 = 0, $7 = 0;
 $1 = $0 + 74 | 0; //@line 11399
 $3 = HEAP8[$1 >> 0] | 0; //@line 11401
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 11405
 $7 = HEAP32[$0 >> 2] | 0; //@line 11406
 if (!($7 & 8)) {
  HEAP32[$0 + 8 >> 2] = 0; //@line 11411
  HEAP32[$0 + 4 >> 2] = 0; //@line 11413
  $14 = HEAP32[$0 + 44 >> 2] | 0; //@line 11415
  HEAP32[$0 + 28 >> 2] = $14; //@line 11417
  HEAP32[$0 + 20 >> 2] = $14; //@line 11419
  HEAP32[$0 + 16 >> 2] = $14 + (HEAP32[$0 + 48 >> 2] | 0); //@line 11425
  $$0 = 0; //@line 11426
 } else {
  HEAP32[$0 >> 2] = $7 | 32; //@line 11429
  $$0 = -1; //@line 11430
 }
 return $$0 | 0; //@line 11432
}
function __ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$1 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22483
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22485
 $$ = HEAP8[___async_retval >> 0] & 1 ? 7 : 6; //@line 22489
 $6 = HEAP8[$2 >> 0] | 0; //@line 22490
 $$1 = ($6 << 24 >> 24 >= (HEAP8[$4 + 28 >> 0] | 0) ? $6 << 24 >> 24 <= (HEAP8[$4 + 29 >> 0] | 0) : 0) ? $$ : $$ & 5; //@line 22499
 $15 = HEAP8[$2 + 1 >> 0] | 0; //@line 22501
 HEAP8[___async_retval >> 0] = ($15 << 24 >> 24 >= (HEAP8[$4 + 32 >> 0] | 0) ? $15 << 24 >> 24 <= (HEAP8[$4 + 33 >> 0] | 0) : 0) ? $$1 : $$1 & 3; //@line 22512
 return;
}
function __ZN4mbed7Timeout7handlerEv__async_cb_67($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22221
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22223
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22225
 $5 = HEAP32[HEAP32[$2 >> 2] >> 2] | 0; //@line 22227
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 22228
 FUNCTION_TABLE_vi[$5 & 1023]($4); //@line 22229
 if (!___async) {
  ___async_unwind = 0; //@line 22232
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 110; //@line 22234
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 22236
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 22238
 sp = STACKTOP; //@line 22239
 return;
}
function __ZN4mbed11InterruptInD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26905
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26907
 $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 26909
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 26916
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 26917
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 40 | 0); //@line 26918
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 99; //@line 26921
  sp = STACKTOP; //@line 26922
  return;
 }
 ___async_unwind = 0; //@line 26925
 HEAP32[$ReallocAsyncCtx2 >> 2] = 99; //@line 26926
 sp = STACKTOP; //@line 26927
 return;
}
function __ZN13LoRaMacCrypto18decrypt_join_frameEPKhtS1_jPh($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $6 = 0, $7 = 0, $9 = 0;
 $6 = $0 + 64 | 0; //@line 18605
 _mbedtls_aes_init($6); //@line 18606
 $7 = _mbedtls_aes_setkey_enc($6, $3, $4) | 0; //@line 18607
 if (!$7) {
  $9 = _mbedtls_aes_crypt_ecb($6, 1, $1, $5) | 0; //@line 18610
  if (($2 & 65535) > 15 & ($9 | 0) == 0) {
   $$0 = _mbedtls_aes_crypt_ecb($6, 1, $1 + 16 | 0, $5 + 16 | 0) | 0; //@line 18618
  } else {
   $$0 = $9; //@line 18620
  }
 } else {
  $$0 = $7; //@line 18623
 }
 _mbedtls_aes_free($6); //@line 18625
 return $$0 | 0; //@line 18626
}
function __ZN7LoRaPHY17calculate_backoffEbbbhjj($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $14 = 0, $16 = 0, $24 = 0, $8 = 0;
 $8 = HEAP32[$0 + 72 >> 2] | 0; //@line 22012
 $14 = HEAPU8[(HEAP32[$0 + 124 >> 2] | 0) + (($4 & 255) * 12 | 0) + 9 >> 0] | 0; //@line 22018
 $16 = HEAP16[$8 + ($14 * 24 | 0) >> 1] | 0; //@line 22020
 $$0 = $5 >>> 0 < 36e5 ? 100 : $5 >>> 0 < 396e5 ? 1e3 : 1e4; //@line 22025
 $24 = (Math_imul((($16 & 65535) > ($$0 & 65535) | $1 ? $16 : $$0) & 65535, $6) | 0) - $6 | 0; //@line 22032
 HEAP32[$8 + ($14 * 24 | 0) + 12 >> 2] = $2 | $3 ? $24 : 0; //@line 22034
 return;
}
function __ZN4mbed5Timer7read_msEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $18 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $6 = 0, $9 = 0;
 $4 = $0 + 8 | 0; //@line 10341
 $6 = HEAP32[$4 >> 2] | 0; //@line 10343
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 10346
 $11 = ___async_retval; //@line 10348
 $18 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 10355
 $24 = _i64Subtract(HEAP32[$11 >> 2] | 0, HEAP32[$11 + 4 >> 2] | 0, HEAP32[$18 >> 2] | 0, HEAP32[$18 + 4 >> 2] | 0) | 0; //@line 10361
 $26 = _i64Add($24 | 0, tempRet0 | 0, $6 | 0, $9 | 0) | 0; //@line 10363
 $28 = ___udivdi3($26 | 0, tempRet0 | 0, 1e3, 0) | 0; //@line 10365
 HEAP32[___async_retval >> 2] = $28; //@line 10368
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_334($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 25285
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25287
 $4 = HEAP32[$2 + 12 >> 2] | 0; //@line 25289
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 25295
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 25296
 FUNCTION_TABLE_vi[$7 & 1023]($2); //@line 25297
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 163; //@line 25300
  sp = STACKTOP; //@line 25301
  return;
 }
 ___async_unwind = 0; //@line 25304
 HEAP32[$ReallocAsyncCtx7 >> 2] = 163; //@line 25305
 sp = STACKTOP; //@line 25306
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_359($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 27053
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 27056
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 27059
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 27060
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 27061
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 522; //@line 27064
  sp = STACKTOP; //@line 27065
  return;
 }
 ___async_unwind = 0; //@line 27068
 HEAP32[$ReallocAsyncCtx3 >> 2] = 522; //@line 27069
 sp = STACKTOP; //@line 27070
 return;
}
function __ZN7LoRaMac16add_channel_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15900
 if (HEAP8[$0 + 2088 >> 0] | 0) {
  $$0 = -1e3; //@line 15905
  return $$0 | 0; //@line 15906
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15909
 $6 = __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan($0 + 752 | 0, $1) | 0; //@line 15910
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 467; //@line 15913
  sp = STACKTOP; //@line 15914
  return 0; //@line 15915
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15917
 $$0 = $6; //@line 15918
 return $$0 | 0; //@line 15919
}
function __ZN16SX1276_LoRaRadio10init_radioEP12radio_events($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 49
 HEAP32[$0 + 788 >> 2] = $1; //@line 51
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 54
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 55
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 56
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 46; //@line 59
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 61
  sp = STACKTOP; //@line 62
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 65
  HEAP8[$0 + 689 >> 0] = 0; //@line 67
  HEAP8[$0 + 688 >> 0] = 0; //@line 69
  return;
 }
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_377($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $ReallocAsyncCtx18 = 0, sp = 0;
 sp = STACKTOP; //@line 29846
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29850
 $7 = HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 76 >> 2] | 0; //@line 29853
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(4) | 0; //@line 29854
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 29855
 if (___async) {
  HEAP32[$ReallocAsyncCtx18 >> 2] = 186; //@line 29858
  sp = STACKTOP; //@line 29859
  return;
 }
 ___async_unwind = 0; //@line 29862
 HEAP32[$ReallocAsyncCtx18 >> 2] = 186; //@line 29863
 sp = STACKTOP; //@line 29864
 return;
}
function __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 430
 $2 = HEAP32[$0 >> 2] | 0; //@line 431
 $3 = $1 + 16 | 0; //@line 432
 $4 = HEAP32[$3 >> 2] | 0; //@line 433
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 434
 __ZN6events10EventQueue6cancelEi($2, $4); //@line 435
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 551; //@line 438
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 440
  sp = STACKTOP; //@line 441
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 444
  HEAP32[$3 >> 2] = 0; //@line 445
  return;
 }
}
function _mbedtls_cipher_setup__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23991
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23993
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23995
 HEAP32[$2 + 60 >> 2] = $AsyncRetVal; //@line 23997
 if (!$AsyncRetVal) {
  $$0 = -24960; //@line 24000
 } else {
  HEAP32[$2 >> 2] = $4; //@line 24002
  if ((HEAP32[$4 + 4 >> 2] | 0) == 2) {
   HEAP32[$2 + 12 >> 2] = 5; //@line 24008
   HEAP32[$2 + 16 >> 2] = 17; //@line 24010
   $$0 = 0; //@line 24011
  } else {
   $$0 = 0; //@line 24013
  }
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 24017
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_35($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 20088
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20092
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 20094
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 20095
 FUNCTION_TABLE_vi[$5 & 1023]($4); //@line 20096
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 273; //@line 20099
  sp = STACKTOP; //@line 20100
  return;
 }
 ___async_unwind = 0; //@line 20103
 HEAP32[$ReallocAsyncCtx >> 2] = 273; //@line 20104
 sp = STACKTOP; //@line 20105
 return;
}
function __ZN7LoRaMac24continue_joining_processEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14416
 if ((HEAPU8[$0 + 1701 >> 0] | 0) >= (HEAPU8[$0 + 1700 >> 0] | 0)) {
  $$0 = 0; //@line 14423
  return $$0 | 0; //@line 14424
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14426
 $6 = __ZN7LoRaMac21handle_retransmissionEv($0) | 0; //@line 14427
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 429; //@line 14430
  sp = STACKTOP; //@line 14431
  return 0; //@line 14432
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14434
 $$0 = ($6 | 0) == 0; //@line 14436
 return $$0 | 0; //@line 14437
}
function _twobyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink$in = 0, $$sink17$sink = 0, $11 = 0, $12 = 0, $8 = 0;
 $8 = (HEAPU8[$1 >> 0] | 0) << 8 | (HEAPU8[$1 + 1 >> 0] | 0); //@line 14986
 $$sink$in = HEAPU8[$0 >> 0] | 0; //@line 14989
 $$sink17$sink = $0; //@line 14989
 while (1) {
  $11 = $$sink17$sink + 1 | 0; //@line 14991
  $12 = HEAP8[$11 >> 0] | 0; //@line 14992
  if (!($12 << 24 >> 24)) {
   break;
  }
  $$sink$in = $$sink$in << 8 & 65280 | $12 & 255; //@line 15000
  if (($$sink$in | 0) == ($8 | 0)) {
   break;
  } else {
   $$sink17$sink = $11; //@line 15005
  }
 }
 return ($12 << 24 >> 24 ? $$sink17$sink : 0) | 0; //@line 15010
}
function __ZN7LoRaMac21remove_single_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15960
 if (HEAP8[$0 + 2088 >> 0] | 0) {
  $$0 = -1e3; //@line 15965
  return $$0 | 0; //@line 15966
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15969
 $6 = __ZN18LoRaMacChannelPlan21remove_single_channelEh($0 + 752 | 0, $1) | 0; //@line 15970
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 469; //@line 15973
  sp = STACKTOP; //@line 15974
  return 0; //@line 15975
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15977
 $$0 = $6; //@line 15978
 return $$0 | 0; //@line 15979
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_98($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 23957
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23960
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 23963
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 23964
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 23965
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 508; //@line 23968
  sp = STACKTOP; //@line 23969
  return;
 }
 ___async_unwind = 0; //@line 23972
 HEAP32[$ReallocAsyncCtx9 >> 2] = 508; //@line 23973
 sp = STACKTOP; //@line 23974
 return;
}
function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $7 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$0$lcssa = $2; //@line 13555
 } else {
  $$06 = $2; //@line 13557
  $11 = $1; //@line 13557
  $7 = $0; //@line 13557
  while (1) {
   $10 = $$06 + -1 | 0; //@line 13562
   HEAP8[$10 >> 0] = $7 & 7 | 48; //@line 13563
   $7 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0; //@line 13564
   $11 = tempRet0; //@line 13565
   if (($7 | 0) == 0 & ($11 | 0) == 0) {
    $$0$lcssa = $10; //@line 13570
    break;
   } else {
    $$06 = $10; //@line 13573
   }
  }
 }
 return $$0$lcssa | 0; //@line 13577
}
function __ZN12LoRaWANStack22set_link_check_requestEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, sp = 0;
 sp = STACKTOP; //@line 10455
 STACKTOP = STACKTOP + 16 | 0; //@line 10456
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10456
 HEAP8[$0 + 2877 >> 0] = 1; //@line 10459
 if (!(HEAP32[$0 + 2512 >> 2] | 0)) {
  _mbed_tracef(2, 12482, 12962, sp); //@line 10464
  $$0 = -1003; //@line 10465
  STACKTOP = sp; //@line 10466
  return $$0 | 0; //@line 10466
 } else {
  __ZN7LoRaMac24setup_link_check_requestEv($0); //@line 10468
  $$0 = 0; //@line 10469
  STACKTOP = sp; //@line 10470
  return $$0 | 0; //@line 10470
 }
 return 0; //@line 10472
}
function __ZN7LoRaMac10disconnectEv__async_cb_222($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 4140
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4142
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4144
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 4146
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1816 | 0); //@line 4147
 if (!___async) {
  ___async_unwind = 0; //@line 4150
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 463; //@line 4152
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 4154
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $4; //@line 4156
 sp = STACKTOP; //@line 4157
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_221($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 4117
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4119
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4121
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 4123
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1836 | 0); //@line 4124
 if (!___async) {
  ___async_unwind = 0; //@line 4127
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 464; //@line 4129
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 4131
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 4133
 sp = STACKTOP; //@line 4134
 return;
}
function __ZN12LoRaWANStack16set_device_classERK14device_class_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10681
 if ((HEAP32[$1 >> 2] | 0) == 1) {
  $$0 = -1013; //@line 10685
  return $$0 | 0; //@line 10686
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10688
 __ZN7LoRaMac16set_device_classERK14device_class_t($0, $1); //@line 10689
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 350; //@line 10692
  sp = STACKTOP; //@line 10693
  return 0; //@line 10694
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10696
 $$0 = 0; //@line 10697
 return $$0 | 0; //@line 10698
}
function __ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, sp = 0;
 sp = STACKTOP; //@line 10231
 STACKTOP = STACKTOP + 16 | 0; //@line 10232
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10232
 if (!(HEAP32[$0 + 2480 >> 2] | 0)) {
  _mbed_tracef(2, 12482, 12832, sp); //@line 10238
  $$0 = -1012; //@line 10239
  STACKTOP = sp; //@line 10240
  return $$0 | 0; //@line 10240
 } else {
  $$0 = __ZN7LoRaMac16get_channel_planER16lora_channelplan($0, $1) | 0; //@line 10243
  STACKTOP = sp; //@line 10244
  return $$0 | 0; //@line 10244
 }
 return 0; //@line 10246
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb_291($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 8783
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 8786
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 8789
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 8790
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 8791
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 531; //@line 8794
  sp = STACKTOP; //@line 8795
  return;
 }
 ___async_unwind = 0; //@line 8798
 HEAP32[$ReallocAsyncCtx3 >> 2] = 531; //@line 8799
 sp = STACKTOP; //@line 8800
 return;
}
function __ZN16SX1276_LoRaRadio6randomEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 763
 $1 = _emscripten_asm_const_i(4) | 0; //@line 764
 $4 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 767
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 768
 FUNCTION_TABLE_vi[$4 & 1023]($0); //@line 769
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 56; //@line 772
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 774
  sp = STACKTOP; //@line 775
  return 0; //@line 776
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 778
  return $1 | 0; //@line 779
 }
 return 0; //@line 781
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_287($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 8596
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 8599
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 8602
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 8603
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 8604
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 528; //@line 8607
  sp = STACKTOP; //@line 8608
  return;
 }
 ___async_unwind = 0; //@line 8611
 HEAP32[$ReallocAsyncCtx3 >> 2] = 528; //@line 8612
 sp = STACKTOP; //@line 8613
 return;
}
function __ZN7LoRaPHY16get_alternate_DREh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $12 = 0, $3 = 0, $6 = 0, $8 = 0;
 $3 = HEAP8[$0 + 31 >> 0] | 0; //@line 20347
 $6 = HEAP8[$0 + 26 >> 0] | 0; //@line 20350
 $8 = ($3 & 255) + 1 | 0; //@line 20352
 $12 = (($1 & 255) >>> 0) % (($8 - ($6 & 255) & 255) >>> 0) | 0; //@line 20356
 switch (($12 & 255) << 24 >> 24) {
 case 1:
  {
   $$0 = $3; //@line 20360
   return $$0 | 0; //@line 20361
  }
 case 0:
  {
   $$0 = $6; //@line 20365
   return $$0 | 0; //@line 20366
  }
 default:
  {
   $$0 = $8 - $12 & 255; //@line 20372
   return $$0 | 0; //@line 20373
  }
 }
 return 0; //@line 20376
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_233($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 5321
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 5324
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 5327
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 5328
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 5329
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 525; //@line 5332
  sp = STACKTOP; //@line 5333
  return;
 }
 ___async_unwind = 0; //@line 5336
 HEAP32[$ReallocAsyncCtx3 >> 2] = 525; //@line 5337
 sp = STACKTOP; //@line 5338
 return;
}
function __ZN12LoRaWANStack24enable_adaptive_datarateEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, sp = 0;
 sp = STACKTOP; //@line 10288
 STACKTOP = STACKTOP + 16 | 0; //@line 10289
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10289
 if (!(HEAP32[$0 + 2480 >> 2] | 0)) {
  _mbed_tracef(2, 12482, 12832, sp); //@line 10295
  $$0 = -1012; //@line 10296
  STACKTOP = sp; //@line 10297
  return $$0 | 0; //@line 10297
 } else {
  __ZN7LoRaMac24enable_adaptive_datarateEb($0, $1); //@line 10299
  $$0 = 0; //@line 10300
  STACKTOP = sp; //@line 10301
  return $$0 | 0; //@line 10301
 }
 return 0; //@line 10303
}
function __ZN16SX1276_LoRaRadio5sleepEv($0) {
 $0 = $0 | 0;
 var $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 85
 STACKTOP = STACKTOP + 16 | 0; //@line 86
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 86
 $vararg_buffer1 = sp + 8 | 0; //@line 87
 _mbed_tracef(16, 10996, 11756, sp); //@line 89
 __ZN4mbed6Ticker6detachEv($0 + 1048 | 0); //@line 91
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 93
 HEAP32[$vararg_buffer1 >> 2] = 0; //@line 94
 _mbed_tracef(16, 10996, 11053, $vararg_buffer1); //@line 95
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 96
 STACKTOP = sp; //@line 97
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_190($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 2116
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 2119
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 2122
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 2123
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 2124
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 535; //@line 2127
  sp = STACKTOP; //@line 2128
  return;
 }
 ___async_unwind = 0; //@line 2131
 HEAP32[$ReallocAsyncCtx4 >> 2] = 535; //@line 2132
 sp = STACKTOP; //@line 2133
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_189($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 2093
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 2096
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 2099
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 2100
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 2101
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 535; //@line 2104
  sp = STACKTOP; //@line 2105
  return;
 }
 ___async_unwind = 0; //@line 2108
 HEAP32[$ReallocAsyncCtx4 >> 2] = 535; //@line 2109
 sp = STACKTOP; //@line 2110
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb_214($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 3728
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 3731
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 3734
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 3735
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 3736
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 541; //@line 3739
  sp = STACKTOP; //@line 3740
  return;
 }
 ___async_unwind = 0; //@line 3743
 HEAP32[$ReallocAsyncCtx3 >> 2] = 541; //@line 3744
 sp = STACKTOP; //@line 3745
 return;
}
function __ZN7LoRaMac19remove_channel_planEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15924
 if (HEAP8[$0 + 2088 >> 0] | 0) {
  $$0 = -1e3; //@line 15929
  return $$0 | 0; //@line 15930
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15933
 $5 = __ZN18LoRaMacChannelPlan11remove_planEv($0 + 752 | 0) | 0; //@line 15934
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 468; //@line 15937
  sp = STACKTOP; //@line 15938
  return 0; //@line 15939
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15941
 $$0 = $5; //@line 15942
 return $$0 | 0; //@line 15943
}
function ___cxa_is_pointer_type($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17627
 do {
  if (!$0) {
   $3 = 0; //@line 17631
  } else {
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17633
   $2 = ___dynamic_cast($0, 400, 456, 0) | 0; //@line 17634
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 675; //@line 17637
    sp = STACKTOP; //@line 17638
    return 0; //@line 17639
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 17641
    $3 = ($2 | 0) != 0 & 1; //@line 17644
    break;
   }
  }
 } while (0);
 return $3 | 0; //@line 17649
}
function __ZN7LoRaPHY24restore_default_channelsEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $2 = 0, $5 = 0, $7 = 0, $8 = 0, $indvars$iv = 0;
 $2 = HEAP8[$0 + 113 >> 0] | 0; //@line 18849
 if (!($2 << 24 >> 24)) {
  return;
 }
 $5 = HEAP32[$0 + 120 >> 2] | 0; //@line 18855
 $7 = HEAP32[$0 + 116 >> 2] | 0; //@line 18857
 $8 = $2 & 255; //@line 18858
 $indvars$iv = 0; //@line 18859
 do {
  $11 = $7 + ($indvars$iv << 1) | 0; //@line 18863
  HEAP16[$11 >> 1] = HEAP16[$11 >> 1] | HEAP16[$5 + ($indvars$iv << 1) >> 1]; //@line 18866
  $indvars$iv = $indvars$iv + 1 | 0; //@line 18867
 } while ($indvars$iv >>> 0 < $8 >>> 0);
 return;
}
function __ZN12LoRaWANStack21set_channel_data_rateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, sp = 0;
 sp = STACKTOP; //@line 10267
 STACKTOP = STACKTOP + 16 | 0; //@line 10268
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10268
 if (!(HEAP32[$0 + 2480 >> 2] | 0)) {
  _mbed_tracef(2, 12482, 12832, sp); //@line 10274
  $$0 = -1012; //@line 10275
  STACKTOP = sp; //@line 10276
  return $$0 | 0; //@line 10276
 } else {
  $$0 = __ZN7LoRaMac21set_channel_data_rateEh($0, $1) | 0; //@line 10279
  STACKTOP = sp; //@line 10280
  return $$0 | 0; //@line 10280
 }
 return 0; //@line 10282
}
function _invoke_ticker__async_cb_63($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 22038
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 22044
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 22045
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 22046
 FUNCTION_TABLE_vi[$5 & 1023]($6); //@line 22047
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 629; //@line 22050
  sp = STACKTOP; //@line 22051
  return;
 }
 ___async_unwind = 0; //@line 22054
 HEAP32[$ReallocAsyncCtx >> 2] = 629; //@line 22055
 sp = STACKTOP; //@line 22056
 return;
}
function __ZN16LoRaWANInterface4sendEhPKhti($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4661
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4664
 $7 = __ZN12LoRaWANStack9handle_txEhPKhthbb($0 + 4 | 0, $1, $2, $3, $4 & 255, 0, 0) | 0; //@line 4665
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 145; //@line 4668
  sp = STACKTOP; //@line 4669
  return 0; //@line 4670
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4672
  return $7 | 0; //@line 4673
 }
 return 0; //@line 4675
}
function __ZN16LoRaWANInterface7receiveEPhtRhRi($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4711
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4713
 $6 = __ZN12LoRaWANStack9handle_rxEPhtRhRib($0 + 4 | 0, $1, $2, $3, $4, 0) | 0; //@line 4714
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 147; //@line 4717
  sp = STACKTOP; //@line 4718
  return 0; //@line 4719
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4721
  return $6 | 0; //@line 4722
 }
 return 0; //@line 4724
}
function _getint_671($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$04 = 0, $11 = 0, $12 = 0, $7 = 0;
 if (!(_isdigit(HEAP8[HEAP32[$0 >> 2] >> 0] | 0) | 0)) {
  $$0$lcssa = 0; //@line 13199
 } else {
  $$04 = 0; //@line 13201
  while (1) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 13204
   $11 = ($$04 * 10 | 0) + -48 + (HEAP8[$7 >> 0] | 0) | 0; //@line 13208
   $12 = $7 + 1 | 0; //@line 13209
   HEAP32[$0 >> 2] = $12; //@line 13210
   if (!(_isdigit(HEAP8[$12 >> 0] | 0) | 0)) {
    $$0$lcssa = $11; //@line 13216
    break;
   } else {
    $$04 = $11; //@line 13219
   }
  }
 }
 return $$0$lcssa | 0; //@line 13223
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7666
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 7668
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 7674
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7675
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 7676
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 260; //@line 7679
  sp = STACKTOP; //@line 7680
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7683
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8510
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 8512
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 8518
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8519
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 8520
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 290; //@line 8523
  sp = STACKTOP; //@line 8524
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8527
 return;
}
function __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4730
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4732
 $3 = __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t($0 + 4 | 0, $1) | 0; //@line 4733
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 148; //@line 4736
  sp = STACKTOP; //@line 4737
  return 0; //@line 4738
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4740
  return $3 | 0; //@line 4741
 }
 return 0; //@line 4743
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0; //@line 30526
 $y_sroa_0_0_extract_trunc = $b$0; //@line 30527
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0; //@line 30528
 $1$1 = tempRet0; //@line 30529
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0; //@line 30531
}
function __ZN7LoRaMac15send_ongoing_txEv__async_cb_192($0) {
 $0 = $0 | 0;
 var $$0 = 0, $13 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2215
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2217
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 2221
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 2224
  $13 = ___async_retval; //@line 2225
  HEAP32[$13 >> 2] = $$0; //@line 2226
  return;
 }
 HEAP32[$6 + 2036 >> 2] = HEAP32[$4 >> 2]; //@line 2231
 $$0 = 0; //@line 2232
 $13 = ___async_retval; //@line 2233
 HEAP32[$13 >> 2] = $$0; //@line 2234
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9205
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 9207
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 9213
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9214
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 9215
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 316; //@line 9218
  sp = STACKTOP; //@line 9219
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9222
 return;
}
function _mbedtls_cipher_update__async_cb_70($0) {
 $0 = $0 | 0;
 var $$1 = 0, $2 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22426
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22428
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22430
 if ($AsyncRetVal | 0) {
  $$1 = $AsyncRetVal; //@line 22433
  $9 = ___async_retval; //@line 22434
  HEAP32[$9 >> 2] = $$1; //@line 22435
  return;
 }
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $4; //@line 22440
 $$1 = 0; //@line 22441
 $9 = ___async_retval; //@line 22442
 HEAP32[$9 >> 2] = $$1; //@line 22443
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6417
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 6419
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 6425
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6426
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 6427
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 214; //@line 6430
  sp = STACKTOP; //@line 6431
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6434
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_355($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 26716
 if (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 26724
 _mbed_assert_internal(13650, 13668, 57); //@line 26725
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 550; //@line 26728
  sp = STACKTOP; //@line 26729
  return;
 }
 ___async_unwind = 0; //@line 26732
 HEAP32[$ReallocAsyncCtx6 >> 2] = 550; //@line 26733
 sp = STACKTOP; //@line 26734
 return;
}
function __ZN16LoRaWANInterface10initializeEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4469
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4471
 $3 = __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE($0 + 4 | 0, $1) | 0; //@line 4472
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 138; //@line 4475
  sp = STACKTOP; //@line 4476
  return 0; //@line 4477
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4479
  return $3 | 0; //@line 4480
 }
 return 0; //@line 4482
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5076
 HEAP32[$0 >> 2] = 724; //@line 5077
 $2 = $0 + 4 | 0; //@line 5078
 __ZN12LoRaWANStackC2Ev($2); //@line 5079
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5080
 __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio($2, $1); //@line 5081
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 164; //@line 5084
  sp = STACKTOP; //@line 5085
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5088
  return;
 }
}
function __ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4593
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4595
 $3 = __ZN12LoRaWANStack12add_channelsERK16lora_channelplan($0 + 4 | 0, $1) | 0; //@line 4596
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 142; //@line 4599
  sp = STACKTOP; //@line 4600
  return 0; //@line 4601
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4603
  return $3 | 0; //@line 4604
 }
 return 0; //@line 4606
}
function _mbedtls_cipher_info_from_type($0) {
 $0 = $0 | 0;
 var $$05 = 0, $$06 = 0, $1 = 0, $9 = 0;
 $1 = HEAP32[2370] | 0; //@line 2639
 L1 : do {
  if (!$1) {
   $$05 = 0; //@line 2643
  } else {
   $$06 = 9476; //@line 2645
   $9 = $1; //@line 2645
   while (1) {
    if ((HEAP32[$$06 >> 2] | 0) == ($0 | 0)) {
     $$05 = $9; //@line 2650
     break L1;
    }
    $9 = HEAP32[$$06 + 12 >> 2] | 0; //@line 2655
    if (!$9) {
     $$05 = 0; //@line 2658
     break;
    } else {
     $$06 = $$06 + 8 | 0; //@line 2661
    }
   }
  }
 } while (0);
 return $$05 | 0; //@line 2666
}
function __ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 796
 STACKTOP = STACKTOP + 16 | 0; //@line 797
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 797
 $vararg_buffer = sp; //@line 798
 HEAP8[$0 + 689 >> 0] = $1; //@line 801
 HEAP32[$vararg_buffer >> 2] = $1; //@line 803
 HEAP32[$vararg_buffer + 4 >> 2] = $2 & 255; //@line 805
 _mbed_tracef(16, 10996, 11206, $vararg_buffer); //@line 806
 STACKTOP = sp; //@line 807
 return;
}
function __ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 11192
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 11199
 _mbed_assert_internal(13213, 13106, 844); //@line 11200
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 431; //@line 11203
  sp = STACKTOP; //@line 11204
  return;
 }
 ___async_unwind = 0; //@line 11207
 HEAP32[$ReallocAsyncCtx2 >> 2] = 431; //@line 11208
 sp = STACKTOP; //@line 11209
 return;
}
function __ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 1873
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 1880
 _mbed_assert_internal(13097, 12384, 460); //@line 1881
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 198; //@line 1884
  sp = STACKTOP; //@line 1885
  return;
 }
 ___async_unwind = 0; //@line 1888
 HEAP32[$ReallocAsyncCtx2 >> 2] = 198; //@line 1889
 sp = STACKTOP; //@line 1890
 return;
}
function __ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30201
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 30208
 _mbed_assert_internal(13097, 12384, 428); //@line 30209
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 189; //@line 30212
  sp = STACKTOP; //@line 30213
  return;
 }
 ___async_unwind = 0; //@line 30216
 HEAP32[$ReallocAsyncCtx2 >> 2] = 189; //@line 30217
 sp = STACKTOP; //@line 30218
 return;
}
function runPostSets() {}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535; //@line 30511
 $2 = $b & 65535; //@line 30512
 $3 = Math_imul($2, $1) | 0; //@line 30513
 $6 = $a >>> 16; //@line 30514
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0; //@line 30515
 $11 = $b >>> 16; //@line 30516
 $12 = Math_imul($11, $1) | 0; //@line 30517
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0; //@line 30518
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7894
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 7896
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 7902
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7903
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 7904
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 271; //@line 7907
  sp = STACKTOP; //@line 7908
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7911
 return;
}
function __ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 30369
 if (HEAP32[$0 + 8 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 30378
 _mbed_assert_internal(13097, 12384, 445); //@line 30379
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 192; //@line 30382
  sp = STACKTOP; //@line 30383
  return;
 }
 ___async_unwind = 0; //@line 30386
 HEAP32[$ReallocAsyncCtx3 >> 2] = 192; //@line 30387
 sp = STACKTOP; //@line 30388
 return;
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 5356
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 5363
 _mbed_assert_internal(13213, 13106, 950); //@line 5364
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 368; //@line 5367
  sp = STACKTOP; //@line 5368
  return;
 }
 ___async_unwind = 0; //@line 5371
 HEAP32[$ReallocAsyncCtx3 >> 2] = 368; //@line 5372
 sp = STACKTOP; //@line 5373
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_385($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30277
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 30284
 _mbed_assert_internal(13097, 12384, 751); //@line 30285
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 296; //@line 30288
  sp = STACKTOP; //@line 30289
  return;
 }
 ___async_unwind = 0; //@line 30292
 HEAP32[$ReallocAsyncCtx6 >> 2] = 296; //@line 30293
 sp = STACKTOP; //@line 30294
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_343($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26317
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26319
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26321
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 26322
 __ZN4mbed10TimerEventD2Ev($2); //@line 26323
 if (!___async) {
  ___async_unwind = 0; //@line 26326
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 73; //@line 26328
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $4; //@line 26330
 sp = STACKTOP; //@line 26331
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_342($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 26297
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26299
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26301
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 26302
 __ZN4mbed10TimerEventD2Ev($4); //@line 26303
 if (!___async) {
  ___async_unwind = 0; //@line 26306
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 71; //@line 26308
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 26310
 sp = STACKTOP; //@line 26311
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_341($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 26277
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26279
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26281
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 26282
 __ZN4mbed10TimerEventD2Ev($4); //@line 26283
 if (!___async) {
  ___async_unwind = 0; //@line 26286
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 69; //@line 26288
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 26290
 sp = STACKTOP; //@line 26291
 return;
}
function __ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2729
 if (HEAP32[$0 + 8 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 2738
 _mbed_assert_internal(13097, 12384, 468); //@line 2739
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 201; //@line 2742
  sp = STACKTOP; //@line 2743
  return;
 }
 ___async_unwind = 0; //@line 2746
 HEAP32[$ReallocAsyncCtx3 >> 2] = 201; //@line 2747
 sp = STACKTOP; //@line 2748
 return;
}
function _calloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $3 = 0, $8 = 0;
 if (!$0) {
  $$0 = 0; //@line 10790
 } else {
  $3 = Math_imul($1, $0) | 0; //@line 10792
  if (($1 | $0) >>> 0 > 65535) {
   $$0 = (($3 >>> 0) / ($0 >>> 0) | 0 | 0) == ($1 | 0) ? $3 : -1; //@line 10799
  } else {
   $$0 = $3; //@line 10801
  }
 }
 $8 = _malloc($$0) | 0; //@line 10804
 if (!$8) {
  return $8 | 0; //@line 10807
 }
 if (!(HEAP32[$8 + -4 >> 2] & 3)) {
  return $8 | 0; //@line 10814
 }
 _memset($8 | 0, 0, $$0 | 0) | 0; //@line 10816
 return $8 | 0; //@line 10817
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 26257
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26259
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26261
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 26262
 __ZN4mbed10TimerEventD2Ev($4); //@line 26263
 if (!___async) {
  ___async_unwind = 0; //@line 26266
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 67; //@line 26268
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $2; //@line 26270
 sp = STACKTOP; //@line 26271
 return;
}
function __ZN16LoRaWANInterface7connectERK15lorawan_connect($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4506
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4508
 $3 = __ZN12LoRaWANStack7connectERK15lorawan_connect($0 + 4 | 0, $1) | 0; //@line 4509
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 140; //@line 4512
  sp = STACKTOP; //@line 4513
  return 0; //@line 4514
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4516
  return $3 | 0; //@line 4517
 }
 return 0; //@line 4519
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_349($0) {
 $0 = $0 | 0;
 var $3 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 26527
 $3 = (HEAP32[$0 + 4 >> 2] | 0) + 52 | 0; //@line 26530
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 26531
 __ZN4mbed11InterruptInD2Ev($3); //@line 26532
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 79; //@line 26535
  sp = STACKTOP; //@line 26536
  return;
 }
 ___async_unwind = 0; //@line 26539
 HEAP32[$ReallocAsyncCtx9 >> 2] = 79; //@line 26540
 sp = STACKTOP; //@line 26541
 return;
}
function _ticker_set_handler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5708
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 5709
 _initialize($0); //@line 5710
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 581; //@line 5713
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5715
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 5717
  sp = STACKTOP; //@line 5718
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5721
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = $1; //@line 5724
  return;
 }
}
function __ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 647
 if (HEAP32[$0 + 8 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 656
 _mbed_assert_internal(13097, 12384, 453); //@line 657
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 195; //@line 660
  sp = STACKTOP; //@line 661
  return;
 }
 ___async_unwind = 0; //@line 664
 HEAP32[$ReallocAsyncCtx3 >> 2] = 195; //@line 665
 sp = STACKTOP; //@line 666
 return;
}
function _mbed_die__async_cb_262($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 6545
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6547
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 6549
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(8) | 0; //@line 6550
 _wait_ms(150); //@line 6551
 if (!___async) {
  ___async_unwind = 0; //@line 6554
 }
 HEAP32[$ReallocAsyncCtx15 >> 2] = 601; //@line 6556
 HEAP32[$ReallocAsyncCtx15 + 4 >> 2] = $2; //@line 6558
 sp = STACKTOP; //@line 6559
 return;
}
function _mbed_die__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 6175
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6177
 _emscripten_asm_const_iii(5, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 6179
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(8) | 0; //@line 6180
 _wait_ms(150); //@line 6181
 if (!___async) {
  ___async_unwind = 0; //@line 6184
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 600; //@line 6186
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $2; //@line 6188
 sp = STACKTOP; //@line 6189
 return;
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_124($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26717
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26719
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26723
 HEAP8[$2 + 688 >> 0] = 2; //@line 26727
 HEAP32[$4 >> 2] = 3; //@line 26728
 _mbed_tracef(16, 10996, 11053, $4); //@line 26729
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 26730
 HEAP32[$8 >> 2] = 3; //@line 26731
 _mbed_tracef(16, 10996, 11082, $8); //@line 26732
 return;
}
function __ZN16LoRaWANInterface14remove_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4639
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4641
 $3 = __ZN12LoRaWANStack16remove_a_channelEh($0 + 4 | 0, $1) | 0; //@line 4642
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 144; //@line 4645
  sp = STACKTOP; //@line 4646
  return 0; //@line 4647
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4649
  return $3 | 0; //@line 4650
 }
 return 0; //@line 4652
}
function __ZN4mbed7TimeoutD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18590
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18592
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 18593
 __ZN4mbed10TimerEventD2Ev($2); //@line 18594
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 105; //@line 18597
  sp = STACKTOP; //@line 18598
  return;
 }
 ___async_unwind = 0; //@line 18601
 HEAP32[$ReallocAsyncCtx2 >> 2] = 105; //@line 18602
 sp = STACKTOP; //@line 18603
 return;
}
function __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_34($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20057
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20059
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$4 + 2004 >> 2] = 1; //@line 20065
  return;
 }
 if (!(__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($2) | 0)) {
  return;
 }
 HEAP32[$4 + 2060 >> 2] = 4; //@line 20073
 HEAP8[$4 + 2064 >> 0] = 1; //@line 20075
 __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($2); //@line 20076
 return;
}
function __ZN4mbed6TickerD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20329
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20331
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 20332
 __ZN4mbed10TimerEventD2Ev($2); //@line 20333
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 624; //@line 20336
  sp = STACKTOP; //@line 20337
  return;
 }
 ___async_unwind = 0; //@line 20340
 HEAP32[$ReallocAsyncCtx2 >> 2] = 624; //@line 20341
 sp = STACKTOP; //@line 20342
 return;
}
function __ZN12LoRaWANStackD2Ev__async_cb_309($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 11105
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11107
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 11108
 __ZN7LoRaMacD2Ev($2); //@line 11109
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 156; //@line 11112
  sp = STACKTOP; //@line 11113
  return;
 }
 ___async_unwind = 0; //@line 11116
 HEAP32[$ReallocAsyncCtx4 >> 2] = 156; //@line 11117
 sp = STACKTOP; //@line 11118
 return;
}
function ___fflush_unlocked__async_cb_178($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1314
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1316
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1318
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1320
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 16 >> 2] = 0; //@line 1322
 HEAP32[$4 >> 2] = 0; //@line 1323
 HEAP32[$6 >> 2] = 0; //@line 1324
 HEAP32[$8 >> 2] = 0; //@line 1325
 HEAP32[$10 >> 2] = 0; //@line 1326
 HEAP32[___async_retval >> 2] = 0; //@line 1328
 return;
}
function __ZN4mbed6Ticker7handlerEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7476
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 7478
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 >> 2] | 0; //@line 7484
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7485
 FUNCTION_TABLE_vi[$5 & 1023]($0 + 40 | 0); //@line 7486
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 627; //@line 7489
  sp = STACKTOP; //@line 7490
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7493
 return;
}
function _mbed_vtracef__async_cb_314($0) {
 $0 = $0 | 0;
 var $1 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 12139
 $1 = HEAP32[175] | 0; //@line 12140
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 12141
 FUNCTION_TABLE_vi[$1 & 1023](12236); //@line 12142
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 129; //@line 12145
  sp = STACKTOP; //@line 12146
  return;
 }
 ___async_unwind = 0; //@line 12149
 HEAP32[$ReallocAsyncCtx3 >> 2] = 129; //@line 12150
 sp = STACKTOP; //@line 12151
 return;
}
function __ZN7LoRaPHY17copy_channel_maskEPtS0_h($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $indvars$iv = 0, $wide$trip$count = 0;
 if (!(($1 | 0) != 0 & ($2 | 0) != 0 & $3 << 24 >> 24 != 0)) {
  return;
 }
 $wide$trip$count = $3 & 255; //@line 21548
 $indvars$iv = 0; //@line 21549
 do {
  HEAP16[$1 + ($indvars$iv << 1) >> 1] = HEAP16[$2 + ($indvars$iv << 1) >> 1] | 0; //@line 21554
  $indvars$iv = $indvars$iv + 1 | 0; //@line 21555
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 return;
}
function dynCall_viiiiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 a11 = a11 | 0;
 a12 = a12 | 0;
 a13 = a13 | 0;
 a14 = a14 | 0;
 a15 = a15 | 0;
 FUNCTION_TABLE_viiiiiiiiiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0, a11 | 0, a12 | 0, a13 | 0, a14 | 0, a15 | 0); //@line 271
}
function __ZN16LoRaWANInterfaceD0Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4788
 HEAP32[$0 >> 2] = 724; //@line 4789
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4791
 __ZN12LoRaWANStackD2Ev($0 + 4 | 0); //@line 4792
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 151; //@line 4795
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4797
  sp = STACKTOP; //@line 4798
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4801
  __ZdlPv($0); //@line 4802
  return;
 }
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_353($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 26604
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26606
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 26608
 __ZN4mbed11InterruptInD2Ev($2 + 340 | 0); //@line 26609
 if (!___async) {
  ___async_unwind = 0; //@line 26612
 }
 HEAP32[$ReallocAsyncCtx13 >> 2] = 75; //@line 26614
 HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $2; //@line 26616
 sp = STACKTOP; //@line 26617
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_352($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 26585
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26587
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 26589
 __ZN4mbed11InterruptInD2Ev($2 + 268 | 0); //@line 26590
 if (!___async) {
  ___async_unwind = 0; //@line 26593
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 76; //@line 26595
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 26597
 sp = STACKTOP; //@line 26598
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_351($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 26566
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26568
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 26570
 __ZN4mbed11InterruptInD2Ev($2 + 196 | 0); //@line 26571
 if (!___async) {
  ___async_unwind = 0; //@line 26574
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 77; //@line 26576
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 26578
 sp = STACKTOP; //@line 26579
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_350($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 26547
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26549
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 26551
 __ZN4mbed11InterruptInD2Ev($2 + 124 | 0); //@line 26552
 if (!___async) {
  ___async_unwind = 0; //@line 26555
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 78; //@line 26557
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $2; //@line 26559
 sp = STACKTOP; //@line 26560
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_344($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 26337
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26339
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 26341
 __ZN4mbed11InterruptInD2Ev($2 + 412 | 0); //@line 26342
 if (!___async) {
  ___async_unwind = 0; //@line 26345
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 74; //@line 26347
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $2; //@line 26349
 sp = STACKTOP; //@line 26350
 return;
}
function __ZN16LoRaWANInterface19remove_channel_planEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4620
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4622
 $2 = __ZN12LoRaWANStack17drop_channel_listEv($0 + 4 | 0) | 0; //@line 4623
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 143; //@line 4626
  sp = STACKTOP; //@line 4627
  return 0; //@line 4628
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4630
  return $2 | 0; //@line 4631
 }
 return 0; //@line 4633
}
function __GLOBAL__sub_I_main_cpp__async_cb($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 __ZN5Sht31C2E7PinNameS0_(23652, 10, 11); //@line 26885
 __ZN4mbed11InterruptInC2E7PinName(19600, 1337); //@line 26886
 __ZN6events10EventQueueC2EjPh(19672, 1664, 0); //@line 26887
 __ZN16LoRaWANInterfaceC2ER9LoRaRadio(19876, 18264); //@line 26888
 dest = 23020; //@line 26889
 stop = dest + 48 | 0; //@line 26889
 do {
  HEAP32[dest >> 2] = 0; //@line 26889
  dest = dest + 4 | 0; //@line 26889
 } while ((dest | 0) < (stop | 0));
 return;
}
function _gcm_aes_setkey_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3602
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3603
 $3 = _mbedtls_gcm_setkey($0, 2, $1, $2) | 0; //@line 3604
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 567; //@line 3607
  sp = STACKTOP; //@line 3608
  return 0; //@line 3609
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3611
  return $3 | 0; //@line 3612
 }
 return 0; //@line 3614
}
function _ccm_aes_setkey_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3554
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3555
 $3 = _mbedtls_ccm_setkey($0, 2, $1, $2) | 0; //@line 3556
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 565; //@line 3559
  sp = STACKTOP; //@line 3560
  return 0; //@line 3561
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3563
  return $3 | 0; //@line 3564
 }
 return 0; //@line 3566
}
function __ZN4mbed11InterruptInC2E7PinName($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, dest = 0, stop = 0;
 HEAP32[$0 >> 2] = 604; //@line 2504
 $2 = $0 + 4 | 0; //@line 2505
 $3 = $0 + 28 | 0; //@line 2506
 $4 = $0; //@line 2507
 dest = $2; //@line 2508
 stop = dest + 68 | 0; //@line 2508
 do {
  HEAP32[dest >> 2] = 0; //@line 2508
  dest = dest + 4 | 0; //@line 2508
 } while ((dest | 0) < (stop | 0));
 _gpio_irq_init($3, $1, 11, $4) | 0; //@line 2509
 _gpio_init_in($2, $1); //@line 2510
 return;
}
function _serial_putc__async_cb_383($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 30182
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30184
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 30185
 _fflush($2) | 0; //@line 30186
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 622; //@line 30189
  sp = STACKTOP; //@line 30190
  return;
 }
 ___async_unwind = 0; //@line 30193
 HEAP32[$ReallocAsyncCtx >> 2] = 622; //@line 30194
 sp = STACKTOP; //@line 30195
 return;
}
function __ZN7LoRaMac24setup_link_check_requestEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 2068 | 0; //@line 15173
 HEAP32[$1 >> 2] = 0; //@line 15174
 HEAP32[$1 + 4 >> 2] = 0; //@line 15174
 HEAP32[$1 + 8 >> 2] = 0; //@line 15174
 HEAP32[$1 + 12 >> 2] = 0; //@line 15174
 HEAP32[$1 + 16 >> 2] = 0; //@line 15174
 HEAP32[$0 + 2076 >> 2] = 1; //@line 15176
 HEAP32[$0 + 2072 >> 2] = 1; //@line 15178
 HEAP8[$1 >> 0] = 1; //@line 15179
 __ZN14LoRaMacCommand18add_link_check_reqEv($0 + 476 | 0) | 0; //@line 15181
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_219($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4072
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4074
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 4076
 __ZN7LoRaPHY18put_radio_to_sleepEv($2 + 4 | 0); //@line 4077
 if (!___async) {
  ___async_unwind = 0; //@line 4080
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 466; //@line 4082
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 4084
 sp = STACKTOP; //@line 4085
 return;
}
function __ZN12LoRaWANStackD2Ev__async_cb_307($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 11080
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11082
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 11084
 __ZN12radio_eventsD2Ev($2 + 2368 | 0); //@line 11085
 if (!___async) {
  ___async_unwind = 0; //@line 11088
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 155; //@line 11090
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 11092
 sp = STACKTOP; //@line 11093
 return;
}
function __ZN14LoRaMacCommand18add_link_check_reqEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = $0 + 2 | 0; //@line 17916
 $6 = HEAP8[$5 >> 0] | 0; //@line 17917
 $7 = $6 & 255; //@line 17918
 if ((128 - (HEAPU8[$0 + 3 >> 0] | 0) | 0) <= ($7 | 0)) {
  $$0 = -1010; //@line 17921
  return $$0 | 0; //@line 17922
 }
 HEAP8[$5 >> 0] = $6 + 1 << 24 >> 24; //@line 17926
 HEAP8[$0 + 4 + $7 >> 0] = 2; //@line 17927
 HEAP8[$0 >> 0] = 1; //@line 17928
 $$0 = 0; //@line 17929
 return $$0 | 0; //@line 17930
}
function __ZN16LoRaWANInterface10disconnectEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4524
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4526
 $2 = __ZN12LoRaWANStack8shutdownEv($0 + 4 | 0) | 0; //@line 4527
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 141; //@line 4530
  sp = STACKTOP; //@line 4531
  return 0; //@line 4532
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4534
  return $2 | 0; //@line 4535
 }
 return 0; //@line 4537
}
function __ZN4mbed10TimerEventD2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2918
 HEAP32[$0 >> 2] = 640; //@line 2919
 $2 = HEAP32[$0 + 24 >> 2] | 0; //@line 2921
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2923
 _ticker_remove_event($2, $0 + 8 | 0); //@line 2924
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 115; //@line 2927
  sp = STACKTOP; //@line 2928
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2931
  return;
 }
}
function __ZN4mbed7TimeoutD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22070
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22072
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 22073
 __ZN4mbed10TimerEventD2Ev($2); //@line 22074
 if (!___async) {
  ___async_unwind = 0; //@line 22077
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 107; //@line 22079
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 22081
 sp = STACKTOP; //@line 22082
 return;
}
function __ZN4mbed6TickerD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 21511
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21513
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 21514
 __ZN4mbed10TimerEventD2Ev($2); //@line 21515
 if (!___async) {
  ___async_unwind = 0; //@line 21518
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 626; //@line 21520
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 21522
 sp = STACKTOP; //@line 21523
 return;
}
function __ZN16LoRaWANInterface7connectEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4487
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4489
 $2 = __ZN12LoRaWANStack7connectEv($0 + 4 | 0) | 0; //@line 4490
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 139; //@line 4493
  sp = STACKTOP; //@line 4494
  return 0; //@line 4495
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4497
  return $2 | 0; //@line 4498
 }
 return 0; //@line 4500
}
function dynCall_viiiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 a11 = a11 | 0;
 a12 = a12 | 0;
 a13 = a13 | 0;
 a14 = a14 | 0;
 FUNCTION_TABLE_viiiiiiiiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0, a11 | 0, a12 | 0, a13 | 0, a14 | 0); //@line 264
}
function _emscripten_async_resume() {
 ___async = 0; //@line 30844
 ___async_unwind = 1; //@line 30845
 while (1) {
  if (!___async_cur_frame) return;
  dynCall_vi(HEAP32[___async_cur_frame + 8 >> 2] | 0, ___async_cur_frame + 8 | 0); //@line 30851
  if (___async) return;
  if (!___async_unwind) {
   ___async_unwind = 1; //@line 30855
   continue;
  }
  stackRestore(HEAP32[___async_cur_frame + 4 >> 2] | 0); //@line 30859
  ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 30861
 }
}
function __ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_126($0) {
 $0 = $0 | 0;
 var $$013 = 0;
 switch (HEAP32[___async_retval >> 2] | 0) {
 case 0:
  {
   $$013 = 3; //@line 26858
   break;
  }
 case -1004:
  {
   $$013 = 2; //@line 26862
   break;
  }
 case -1005:
  {
   $$013 = 1; //@line 26866
   break;
  }
 case -1006:
  {
   $$013 = 0; //@line 26870
   break;
  }
 default:
  {
   $$013 = 0; //@line 26874
  }
 }
 HEAP8[___async_retval >> 0] = $$013; //@line 26878
 return;
}
function _rand() {
 var $0 = 0, $10 = 0, $14 = 0, $6 = 0, $8 = 0, $9 = 0;
 $0 = 19576; //@line 15669
 $6 = ___muldi3(HEAP32[$0 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0, 1284865837, 1481765933) | 0; //@line 15675
 $8 = _i64Add($6 | 0, tempRet0 | 0, 1, 0) | 0; //@line 15677
 $9 = tempRet0; //@line 15678
 $10 = 19576; //@line 15679
 HEAP32[$10 >> 2] = $8; //@line 15681
 HEAP32[$10 + 4 >> 2] = $9; //@line 15684
 $14 = _bitshift64Lshr($8 | 0, $9 | 0, 33) | 0; //@line 15685
 return $14 | 0; //@line 15687
}
function ___stdio_close($0) {
 $0 = $0 | 0;
 var $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 10822
 STACKTOP = STACKTOP + 16 | 0; //@line 10823
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10823
 $vararg_buffer = sp; //@line 10824
 HEAP32[$vararg_buffer >> 2] = _dummy(HEAP32[$0 + 60 >> 2] | 0) | 0; //@line 10828
 $5 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0; //@line 10830
 STACKTOP = sp; //@line 10831
 return $5 | 0; //@line 10831
}
function __ZN16SX1276_LoRaRadioD0Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1504
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1505
 __ZN16SX1276_LoRaRadioD2Ev($0); //@line 1506
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 80; //@line 1509
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1511
  sp = STACKTOP; //@line 1512
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1515
  __ZdlPv($0); //@line 1516
  return;
 }
}
function __ZN4mbed10TimerEvent3irqEj($0) {
 $0 = $0 | 0;
 var $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2967
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 2972
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2973
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 2974
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 118; //@line 2977
  sp = STACKTOP; //@line 2978
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2981
  return;
 }
}
function __ZN4mbed5TimerC2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $16 = 0, $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20187
 $6 = ___async_retval; //@line 20189
 $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 20194
 $12 = HEAP32[$0 + 4 >> 2] | 0; //@line 20195
 HEAP32[$12 >> 2] = HEAP32[$6 >> 2]; //@line 20197
 HEAP32[$12 + 4 >> 2] = $11; //@line 20200
 $16 = $4; //@line 20201
 HEAP32[$16 >> 2] = 0; //@line 20203
 HEAP32[$16 + 4 >> 2] = 0; //@line 20206
 return;
}
function __ZN16SX1276_LoRaRadio11set_channelEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 751
 STACKTOP = STACKTOP + 16 | 0; //@line 752
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 752
 $vararg_buffer = sp; //@line 753
 HEAP32[$vararg_buffer >> 2] = $1; //@line 754
 _mbed_tracef(16, 10996, 11290, $vararg_buffer); //@line 755
 HEAP32[$0 + 692 >> 2] = $1; //@line 757
 STACKTOP = sp; //@line 758
 return;
}
function _handle_interrupt_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7259
 $2 = HEAP32[4896] | 0; //@line 7260
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7261
 FUNCTION_TABLE_vii[$2 & 15]($0, $1); //@line 7262
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 620; //@line 7265
  sp = STACKTOP; //@line 7266
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7269
  return;
 }
}
function __ZNK7LoRaPHY25verify_frequency_for_bandEjh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $4 = 0, $5 = 0;
 $4 = HEAP32[$0 + 72 >> 2] | 0; //@line 20910
 $5 = $2 & 255; //@line 20911
 if ((HEAP32[$4 + ($5 * 24 | 0) + 20 >> 2] | 0) >>> 0 >= $1 >>> 0) {
  if ((HEAP32[$4 + ($5 * 24 | 0) + 16 >> 2] | 0) >>> 0 <= $1 >>> 0) {
   $$0 = 1; //@line 20920
   return $$0 | 0; //@line 20921
  }
 }
 $$0 = 0; //@line 20924
 return $$0 | 0; //@line 20925
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP; //@line 30786
 STACKTOP = STACKTOP + 16 | 0; //@line 30787
 $rem = __stackBase__ | 0; //@line 30788
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0; //@line 30789
 STACKTOP = __stackBase__; //@line 30790
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0; //@line 30791
}
function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0; //@line 30556
 if ((ret | 0) < 8) return ret | 0; //@line 30557
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0; //@line 30558
 if ((ret | 0) < 8) return ret + 8 | 0; //@line 30559
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0; //@line 30560
 if ((ret | 0) < 8) return ret + 16 | 0; //@line 30561
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0; //@line 30562
}
function __ZN7LoRaPHY25accept_tx_param_setup_reqEhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $4 = 0, $6 = 0;
 $4 = HEAP8[$0 + 13 >> 0] | 0; //@line 20218
 if (!($4 << 24 >> 24)) {
  $14 = $4 << 24 >> 24 != 0; //@line 20221
  return $14 | 0; //@line 20222
 }
 $6 = $0 + 128 | 0; //@line 20224
 HEAP8[$6 >> 0] = $2 << 1 & 2 | $1 & 1 | HEAP8[$6 >> 0] & -4; //@line 20232
 $14 = $4 << 24 >> 24 != 0; //@line 20233
 return $14 | 0; //@line 20234
}
function _gcm_ctx_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3629
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3630
 _mbedtls_gcm_free($0); //@line 3631
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 568; //@line 3634
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3636
  sp = STACKTOP; //@line 3637
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3640
  _free($0); //@line 3641
  return;
 }
}
function _ccm_ctx_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3581
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3582
 _mbedtls_ccm_free($0); //@line 3583
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 566; //@line 3586
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3588
  sp = STACKTOP; //@line 3589
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3592
  _free($0); //@line 3593
  return;
 }
}
function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP; //@line 15972
 STACKTOP = STACKTOP + 16 | 0; //@line 15973
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15973
 if (!(_pthread_once(23644, 7) | 0)) {
  $3 = _pthread_getspecific(HEAP32[5912] | 0) | 0; //@line 15979
  STACKTOP = sp; //@line 15980
  return $3 | 0; //@line 15980
 } else {
  _abort_message(17894, sp); //@line 15982
 }
 return 0; //@line 15985
}
function __ZN16LoRaWANInterfaceD2Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4770
 HEAP32[$0 >> 2] = 724; //@line 4771
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4773
 __ZN12LoRaWANStackD2Ev($0 + 4 | 0); //@line 4774
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 150; //@line 4777
  sp = STACKTOP; //@line 4778
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4781
  return;
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 16140
 }
 return;
}
function __ZN16SX1276_LoRaRadio15timeout_irq_isrEv($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1636
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1637
 __ZN16SX1276_LoRaRadio18handle_timeout_irqEv($0); //@line 1638
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 82; //@line 1641
  sp = STACKTOP; //@line 1642
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1645
  return;
 }
}
function __ZN7LoRaMac24continue_sending_processEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $7 = 0;
 if ((HEAPU8[$0 + 1699 >> 0] | 0) < (HEAPU8[$0 + 1698 >> 0] | 0)) {
  $$0 = 1; //@line 14449
  return $$0 | 0; //@line 14450
 }
 __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 476 | 0); //@line 14453
 $7 = $0 + 1768 | 0; //@line 14454
 HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1; //@line 14457
 $$0 = 0; //@line 14458
 return $$0 | 0; //@line 14459
}
function _sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = $0 + 20 | 0; //@line 15641
 $6 = HEAP32[$5 >> 2] | 0; //@line 15642
 $7 = (HEAP32[$0 + 16 >> 2] | 0) - $6 | 0; //@line 15643
 $$ = $7 >>> 0 > $2 >>> 0 ? $2 : $7; //@line 15645
 _memcpy($6 | 0, $1 | 0, $$ | 0) | 0; //@line 15647
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $$; //@line 15650
 return $2 | 0; //@line 15651
}
function __ZN6events10EventQueueC2EjPh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = $0 + 188 | 0; //@line 2991
 HEAP32[$3 >> 2] = 0; //@line 2992
 HEAP32[$3 + 4 >> 2] = 0; //@line 2992
 HEAP32[$3 + 8 >> 2] = 0; //@line 2992
 HEAP32[$3 + 12 >> 2] = 0; //@line 2992
 if (!$2) {
  _equeue_create($0, $1) | 0; //@line 2995
  return;
 } else {
  _equeue_create_inplace($0, $1, $2) | 0; //@line 2998
  return;
 }
}
function __ZN12LoRaWANStackC2Ev($0) {
 $0 = $0 | 0;
 __ZN7LoRaMacC2Ev($0); //@line 5096
 _memset($0 + 2368 | 0, 0, 500) | 0; //@line 5099
 HEAP8[$0 + 2868 >> 0] = 1; //@line 5100
 HEAP32[$0 + 2872 >> 2] = 0; //@line 5102
 HEAP8[$0 + 2877 >> 0] = 0; //@line 5105
 HEAP8[$0 + 2878 >> 0] = 0; //@line 5107
 HEAP8[$0 + 2879 >> 0] = 1; //@line 5109
 HEAP32[$0 + 3136 >> 2] = 0; //@line 5111
 HEAP8[$0 + 2876 >> 0] = 15; //@line 5112
 return;
}
function __ZL25default_terminate_handlerv__async_cb_204($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3157
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3159
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 3161
 HEAP32[$2 >> 2] = 17755; //@line 3162
 HEAP32[$2 + 4 >> 2] = $4; //@line 3164
 HEAP32[$2 + 8 >> 2] = $AsyncRetVal; //@line 3166
 _abort_message(17619, $2); //@line 3167
}
function _abort_message__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 25189
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25191
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 25192
 _fputc(10, $2) | 0; //@line 25193
 if (!___async) {
  ___async_unwind = 0; //@line 25196
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 651; //@line 25198
 sp = STACKTOP; //@line 25199
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7115
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7117
 $6 = HEAP8[$2 + 1182 >> 0] | 0; //@line 7119
 HEAP8[$2 + 1183 >> 0] = $6; //@line 7121
 __ZN7LoRaPHY16set_last_tx_doneEhbj($2 + 4 | 0, $6, (HEAP8[$2 + 2360 >> 0] | 0) != 0, $4); //@line 7126
 HEAP32[$2 + 1780 >> 2] = $4; //@line 7128
 return;
}
function __ZN6events10EventQueue6cancelEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3013
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3014
 _equeue_cancel($0, $1); //@line 3015
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 119; //@line 3018
  sp = STACKTOP; //@line 3019
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3022
  return;
 }
}
function __ZN7LoRaPHY16set_last_tx_doneEhbj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $5 = 0;
 $5 = HEAP32[$0 + 72 >> 2] | 0; //@line 18828
 $11 = HEAPU8[(HEAP32[$0 + 124 >> 2] | 0) + (($1 & 255) * 12 | 0) + 9 >> 0] | 0; //@line 18834
 HEAP32[$5 + ($11 * 24 | 0) + 8 >> 2] = $3; //@line 18836
 if ($2) {
  return;
 }
 HEAP32[$5 + ($11 * 24 | 0) + 4 >> 2] = $3; //@line 18841
 return;
}
function __ZN7LoRaPHYC2ER18LoRaWANTimeHandler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var dest = 0, stop = 0;
 HEAP32[$0 >> 2] = 864; //@line 21147
 HEAP32[$0 + 4 >> 2] = 0; //@line 21149
 HEAP32[$0 + 8 >> 2] = $1; //@line 21151
 dest = $0 + 12 | 0; //@line 21153
 stop = dest + 120 | 0; //@line 21153
 do {
  HEAP32[dest >> 2] = 0; //@line 21153
  dest = dest + 4 | 0; //@line 21153
 } while ((dest | 0) < (stop | 0));
 return;
}
function _add_pkcs_padding($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$09 = 0, $3 = 0, $5 = 0, $7 = 0;
 $3 = $1 - $2 | 0; //@line 3039
 if (!$3) {
  return;
 }
 $5 = $3 & 255; //@line 3044
 $$09 = 0; //@line 3045
 $7 = 0; //@line 3045
 do {
  HEAP8[$0 + ($7 + $2) >> 0] = $5; //@line 3049
  $$09 = $$09 + 1 << 24 >> 24; //@line 3050
  $7 = $$09 & 255; //@line 3051
 } while ($3 >>> 0 > $7 >>> 0);
 return;
}
function __ZN4mbed5Timer5startEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $13 = 0, $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10378
 $6 = ___async_retval; //@line 10380
 $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 10385
 $13 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 10387
 HEAP32[$13 >> 2] = HEAP32[$6 >> 2]; //@line 10389
 HEAP32[$13 + 4 >> 2] = $11; //@line 10392
 HEAP32[$4 >> 2] = 1; //@line 10393
 return;
}
function _gpio_irq_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0;
 if (($1 | 0) == -1) {
  $$0 = -1; //@line 7282
  return $$0 | 0; //@line 7283
 }
 HEAP32[4896] = $2; //@line 7285
 HEAP32[$0 >> 2] = $1; //@line 7286
 HEAP32[$0 + 4 >> 2] = $1; //@line 7288
 _emscripten_asm_const_iii(12, $3 | 0, $1 | 0) | 0; //@line 7289
 $$0 = 0; //@line 7290
 return $$0 | 0; //@line 7291
}
function _vsnprintf__async_cb($0) {
 $0 = $0 | 0;
 var $13 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22546
 if (HEAP32[$0 + 4 >> 2] | 0) {
  $13 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 22549
  HEAP8[$13 + ((($13 | 0) == (HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 22554
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 22557
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 16734
 STACKTOP = STACKTOP + 16 | 0; //@line 16735
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16735
 _free($0); //@line 16737
 if (!(_pthread_setspecific(HEAP32[5912] | 0, 0) | 0)) {
  STACKTOP = sp; //@line 16742
  return;
 } else {
  _abort_message(17993, sp); //@line 16744
 }
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6920
 if ((HEAP32[$2 + 24 >> 2] | 0) == 1) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 + 16 >> 2]; //@line 6931
  $$0 = 1; //@line 6932
 } else {
  $$0 = 0; //@line 6934
 }
 HEAP8[___async_retval >> 0] = $$0 & 1; //@line 6938
 return;
}
function _serial_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $4 = 0, $9 = 0;
 HEAP32[$0 + 4 >> 2] = $2; //@line 7311
 HEAP32[$0 >> 2] = $1; //@line 7312
 HEAP32[4897] = 1; //@line 7313
 $4 = $0; //@line 7314
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 7319
 $10 = 19592; //@line 7320
 HEAP32[$10 >> 2] = HEAP32[$4 >> 2]; //@line 7322
 HEAP32[$10 + 4 >> 2] = $9; //@line 7325
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 25216
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 2; //@line 25219
  $$0 = 0; //@line 25220
 } else {
  $$0 = $AsyncRetVal; //@line 25222
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 25225
 return;
}
function _main() {
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7623
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7624
 _puts(15157) | 0; //@line 7625
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 632; //@line 7628
  sp = STACKTOP; //@line 7629
  return 0; //@line 7630
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7632
  return -1;
 }
 return 0; //@line 7635
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 16216
 }
 return;
}
function _mbed_trace_default_print($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3753
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3754
 _puts($0) | 0; //@line 3755
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 124; //@line 3758
  sp = STACKTOP; //@line 3759
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3762
  return;
 }
}
function _equeue_sema_create($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $4 = 0;
 $1 = _pthread_mutex_init($0 | 0, 0) | 0; //@line 3720
 if (!$1) {
  $4 = _pthread_cond_init($0 + 28 | 0, 0) | 0; //@line 3724
  if (!$4) {
   HEAP8[$0 + 76 >> 0] = 0; //@line 3728
   $$0 = 0; //@line 3729
  } else {
   $$0 = $4; //@line 3731
  }
 } else {
  $$0 = $1; //@line 3734
 }
 return $$0 | 0; //@line 3736
}
function _wait_ms($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7579
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7580
 _emscripten_sleep($0 | 0); //@line 7581
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 630; //@line 7584
  sp = STACKTOP; //@line 7585
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7588
  return;
 }
}
function _equeue_tick() {
 var $0 = 0, sp = 0;
 sp = STACKTOP; //@line 3683
 STACKTOP = STACKTOP + 16 | 0; //@line 3684
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 3684
 $0 = sp; //@line 3685
 _gettimeofday($0 | 0, 0) | 0; //@line 3686
 STACKTOP = sp; //@line 3693
 return ((HEAP32[$0 + 4 >> 2] | 0) / 1e3 | 0) + ((HEAP32[$0 >> 2] | 0) * 1e3 | 0) | 0; //@line 3693
}
function _mbedtls_cipher_update__async_cb_71($0) {
 $0 = $0 | 0;
 var $$1 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22455
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$0 + 4 >> 2]; //@line 22458
  $$1 = 0; //@line 22459
 } else {
  $$1 = $AsyncRetVal; //@line 22461
 }
 HEAP32[___async_retval >> 2] = $$1; //@line 22464
 return;
}
function __ZN13LoRaMacCryptoC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, dest = 0, stop = 0;
 $1 = $0 + 32 | 0; //@line 17936
 dest = $0; //@line 17937
 stop = dest + 64 | 0; //@line 17937
 do {
  HEAP32[dest >> 2] = 0; //@line 17937
  dest = dest + 4 | 0; //@line 17937
 } while ((dest | 0) < (stop | 0));
 HEAP8[$0 >> 0] = 73; //@line 17938
 HEAP8[$1 >> 0] = 1; //@line 17939
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP; //@line 16719
 STACKTOP = STACKTOP + 16 | 0; //@line 16720
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16720
 if (!(_pthread_key_create(23648, 660) | 0)) {
  STACKTOP = sp; //@line 16725
  return;
 } else {
  _abort_message(17943, sp); //@line 16727
 }
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 if ((HEAP32[$1 + 4 >> 2] | 0) == ($2 | 0)) {
  $7 = $1 + 28 | 0; //@line 16280
  if ((HEAP32[$7 >> 2] | 0) != 1) {
   HEAP32[$7 >> 2] = $3; //@line 16284
  }
 }
 return;
}
function _emscripten_alloc_async_context(len, sp) {
 len = len | 0;
 sp = sp | 0;
 var new_frame = 0;
 new_frame = stackAlloc(len + 8 | 0) | 0; //@line 30820
 HEAP32[new_frame + 4 >> 2] = sp; //@line 30822
 HEAP32[new_frame >> 2] = ___async_cur_frame; //@line 30824
 ___async_cur_frame = new_frame; //@line 30825
 return ___async_cur_frame + 8 | 0; //@line 30826
}
function _mbedtls_gcm_free__async_cb($0) {
 $0 = $0 | 0;
 var $$034$i = 0, $$05$i = 0;
 $$034$i = 400; //@line 6854
 $$05$i = HEAP32[$0 + 4 >> 2] | 0; //@line 6854
 while (1) {
  $$034$i = $$034$i + -1 | 0; //@line 6856
  HEAP8[$$05$i >> 0] = 0; //@line 6858
  if (!$$034$i) {
   break;
  } else {
   $$05$i = $$05$i + 1 | 0; //@line 6863
  }
 }
 return;
}
function __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $8 = 0;
 $1 = $0 + 2 | 0; //@line 16470
 $3 = HEAPU8[$1 >> 0] | 0; //@line 16472
 $8 = HEAPU8[$0 + 3 >> 0] | 0; //@line 16477
 _memcpy($0 + 4 + $3 | 0, $0 + 132 | 0, $8 | 0) | 0; //@line 16478
 HEAP8[$1 >> 0] = $3 + $8; //@line 16481
 return;
}
function b415(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 p11 = p11 | 0;
 p12 = p12 | 0;
 p13 = p13 | 0;
 p14 = p14 | 0;
 nullFunc_viiiiiiiiiiiiiii(0); //@line 1472
}
function _mbedtls_aes_free($0) {
 $0 = $0 | 0;
 var $$02$i = 0, $$031$i = 0;
 if (!$0) {
  return;
 }
 $$02$i = $0; //@line 464
 $$031$i = 280; //@line 464
 while (1) {
  $$031$i = $$031$i + -1 | 0; //@line 466
  HEAP8[$$02$i >> 0] = 0; //@line 468
  if (!$$031$i) {
   break;
  } else {
   $$02$i = $$02$i + 1 | 0; //@line 473
  }
 }
 return;
}
function __ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 return __ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh($0, $1, $2, $3, $4, $5, $6, $7, $8) | 0; //@line 18443
}
function __ZN7LoRaPHY15apply_DR_offsetEaa($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $5 = 0;
 $5 = ($1 & 255) - ($2 & 255) | 0; //@line 20890
 if (!($5 & 128)) {
  $$0 = $5 & 255; //@line 20895
  return $$0 | 0; //@line 20896
 }
 $$0 = HEAP8[$0 + 26 >> 0] | 0; //@line 20900
 return $$0 | 0; //@line 20901
}
function _gpio_init_inout($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 HEAP32[$0 >> 2] = $1; //@line 7245
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 7251
 _emscripten_asm_const_iiiiii(11, $0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0) | 0; //@line 7252
 return;
}
function __ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_123($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26657
 HEAP32[$2 + 2076 >> 2] = 0; //@line 26661
 HEAP8[$2 + 2360 >> 0] = 1; //@line 26663
 HEAP32[$2 + 1760 >> 2] = 0; //@line 26665
 HEAP8[$2 + 1184 >> 0] = 0; //@line 26667
 return;
}
function b413(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 p11 = p11 | 0;
 p12 = p12 | 0;
 p13 = p13 | 0;
 nullFunc_viiiiiiiiiiiiii(0); //@line 1469
}
function __ZN4mbed8CallbackIFvPKhtsaEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 8000
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 8000
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 8000
 return;
}
function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits; //@line 30809
  return low << bits; //@line 30810
 }
 tempRet0 = low << bits - 32; //@line 30812
 return 0; //@line 30813
}
function ___cxa_can_catch__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP8[___async_retval >> 0] & 1; //@line 2249
 if ($AsyncRetVal) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 2253
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal & 1; //@line 2256
 return;
}
function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits; //@line 30798
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits; //@line 30799
 }
 tempRet0 = 0; //@line 30801
 return high >>> bits - 32 | 0; //@line 30802
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 1900
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 1900
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 1900
 return;
}
function __ZN16SX1276_LoRaRadio9start_cadEv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 1160
 STACKTOP = STACKTOP + 16 | 0; //@line 1161
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1161
 _mbed_tracef(16, 10996, 11130, sp); //@line 1163
 STACKTOP = sp; //@line 1164
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 9315
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 9315
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 9315
 return;
}
function __ZN4mbed8CallbackIFvbEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 6526
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 6526
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 6526
 return;
}
function __ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb_33($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19966
 $6 = (__ZNK7LoRaMac16get_device_classEv(HEAP32[$0 + 4 >> 2] | 0) | 0) == 2; //@line 19968
 HEAP32[$4 + 2480 >> 2] = $6 ? 5 : 2; //@line 19971
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 11542
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 11542
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 11542
 return;
}
function __ZN16SX1276_LoRaRadio11radio_resetEv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 76
 STACKTOP = STACKTOP + 16 | 0; //@line 77
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 77
 _mbed_tracef(16, 10996, 11762, sp); //@line 79
 STACKTOP = sp; //@line 80
 return;
}
function __ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_205($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3245
 $6 = (__ZNK7LoRaMac16get_device_classEv(HEAP32[$0 + 4 >> 2] | 0) | 0) == 2; //@line 3247
 HEAP32[$4 + 2480 >> 2] = $6 ? 5 : 2; //@line 3250
 return;
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_310($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11182
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 11184
 HEAP32[$6 + 16 >> 2] = 0; //@line 11186
 return;
}
function __ZN12LoRaWANStack23process_connected_stateEv__async_cb_209($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3437
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3439
 HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4; //@line 3442
 HEAP32[$6 + 2480 >> 2] = 2; //@line 3444
 return;
}
function dynCall_iiiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return FUNCTION_TABLE_iiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0; //@line 208
}
function _fflush__async_cb_216($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 3835
 if (!(HEAP8[$0 + 4 >> 0] & 1)) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 3837
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 3840
 return;
}
function __ZN12LoRaWANStack20process_transmissionEv__async_cb_100($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24097
 $6 = (__ZNK7LoRaMac16get_device_classEv(HEAP32[$0 + 4 >> 2] | 0) | 0) == 2; //@line 24099
 HEAP32[$4 >> 2] = $6 ? 5 : 2; //@line 24101
 return;
}
function _mbedtls_aes_crypt_ecb($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (($1 | 0) == 1) {
  _mbedtls_internal_aes_encrypt($0, $2, $3) | 0; //@line 1935
 } else {
  _mbedtls_internal_aes_decrypt($0, $2, $3) | 0; //@line 1937
 }
 return 0; //@line 1939
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_42($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 20756
 __ZN4mbed5TimerD2Ev(HEAP32[$0 + 4 >> 2] | 0); //@line 20757
 HEAP8[___async_retval >> 0] = $6 & 1; //@line 20760
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20384
 HEAP32[$4 >> 2] = HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0 ? 2 : 1; //@line 20388
 HEAP32[___async_retval >> 2] = HEAP32[$4 >> 2]; //@line 20391
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP; //@line 4
 STACKTOP = STACKTOP + size | 0; //@line 5
 STACKTOP = STACKTOP + 15 & -16; //@line 6
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0); //@line 7
 return ret | 0; //@line 9
}
function _puts__async_cb($0) {
 $0 = $0 | 0;
 var $$lobit = 0;
 $$lobit = HEAP32[___async_retval >> 2] >> 31; //@line 26110
 if (HEAP32[$0 + 4 >> 2] | 0) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 26113
 }
 HEAP32[___async_retval >> 2] = $$lobit; //@line 26116
 return;
}
function _gpio_init_out_ex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 HEAP32[$0 >> 2] = $1; //@line 7227
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 7233
 _emscripten_asm_const_iiii(10, $0 | 0, $1 | 0, $2 | 0) | 0; //@line 7234
 return;
}
function __ZN12LoRaWANStack23set_confirmed_msg_retryEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if ($1 << 24 >> 24 == -1) {
  $$0 = -1003; //@line 10255
 } else {
  HEAP8[$0 + 2868 >> 0] = $1; //@line 10258
  $$0 = 0; //@line 10259
 }
 return $$0 | 0; //@line 10261
}
function _equeue_post__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 6875
 _equeue_sema_signal((HEAP32[$0 + 4 >> 2] | 0) + 48 | 0); //@line 6877
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 6879
 return;
}
function ___overflow__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP32[___async_retval >> 2] | 0) == 1) {
  $$0 = HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 22106
 } else {
  $$0 = -1; //@line 22108
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 22111
 return;
}
function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0; //@line 201
}
function __ZN7LoRaMac16get_channel_planER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN18LoRaMacChannelPlan8get_planER16lora_channelplanPK16channel_params_t($0 + 752 | 0, $1, __ZN7LoRaPHY16get_phy_channelsEv($0 + 4 | 0) | 0) | 0; //@line 15954
}
function ___lctrans_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = 0; //@line 11529
 } else {
  $$0 = ___mo_lookup(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, $0) | 0; //@line 11535
 }
 return ($$0 | 0 ? $$0 : $0) | 0; //@line 11539
}
function _mbedtls_cipher_init($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = $0; //@line 2724
 stop = dest + 68 | 0; //@line 2724
 do {
  HEAP32[dest >> 2] = 0; //@line 2724
  dest = dest + 4 | 0; //@line 2724
 } while ((dest | 0) < (stop | 0));
 return;
}
function _emscripten_free_async_context(ctx) {
 ctx = ctx | 0;
 assert((___async_cur_frame + 8 | 0) == (ctx | 0) | 0); //@line 30832
 stackRestore(___async_cur_frame | 0); //@line 30833
 ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 30834
}
function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0); //@line 257
}
function _mbedtls_ccm_init($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = $0; //@line 2406
 stop = dest + 68 | 0; //@line 2406
 do {
  HEAP32[dest >> 2] = 0; //@line 2406
  dest = dest + 4 | 0; //@line 2406
 } while ((dest | 0) < (stop | 0));
 return;
}
function _fputc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28195
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 28196
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 28198
 return;
}
function _putc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21107
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 21108
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 21110
 return;
}
function __ZN7LoRaPHY15get_ack_timeoutEv($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0;
 $5 = HEAPU16[$0 + 50 >> 1] | 0; //@line 21758
 $6 = HEAPU16[$0 + 52 >> 1] | 0; //@line 21759
 return $5 - $6 + ((_rand() | 0) % ($6 << 1 | 1 | 0) | 0) | 0; //@line 21766
}
function ___DOUBLE_BITS_677($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 14640
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 14640
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 14642
 return $1 | 0; //@line 14643
}
function __ZN7LoRaMac16reset_ongoing_txEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 + 2088 >> 0] = 0; //@line 14660
 _memset($0 + 2099 | 0, 0, 257) | 0; //@line 14662
 if (!$1) {
  return;
 }
 HEAP16[$0 + 2356 >> 1] = 0; //@line 14667
 return;
}
function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ($0 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $0; //@line 10988
  $$0 = -1; //@line 10989
 } else {
  $$0 = $0; //@line 10991
 }
 return $$0 | 0; //@line 10993
}
function _gpio_init_out($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 7211
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 7217
 _emscripten_asm_const_iii(9, $0 | 0, $1 | 0) | 0; //@line 7218
 return;
}
function _gpio_init_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 7196
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 7202
 _emscripten_asm_const_iii(8, $0 | 0, $1 | 0) | 0; //@line 7203
 return;
}
function _equeue_sema_signal($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 3742
 HEAP8[$0 + 76 >> 0] = 1; //@line 3744
 _pthread_cond_signal($0 + 28 | 0) | 0; //@line 3746
 _pthread_mutex_unlock($0 | 0) | 0; //@line 3747
 return;
}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0; //@line 30549
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0; //@line 30550
 return (tempRet0 = h, a - c >>> 0 | 0) | 0; //@line 30551
}
function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0; //@line 194
}
function __ZN4mbed6Ticker5setupEy($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0;
 $4 = ___udivdi3($1 | 0, $2 | 0, 1e3, 0) | 0; //@line 7548
 _emscripten_asm_const_iii(15, $0 + 40 | 0, $4 | 0) | 0; //@line 7550
 return;
}
function __ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7898
 HEAP8[$2 + 689 >> 0] = 0; //@line 7900
 HEAP8[$2 + 688 >> 0] = 0; //@line 7902
 return;
}
function _equeue_enqueue__async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25174
 _equeue_mutex_unlock(HEAP32[$0 + 4 >> 2] | 0); //@line 25175
 HEAP32[___async_retval >> 2] = $4; //@line 25177
 return;
}
function _aes_crypt_ctr_wrap($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 return _mbedtls_aes_crypt_ctr($0, $1, $2, $3, $4, $5, $6) | 0; //@line 3678
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_54($0) {
 $0 = $0 | 0;
 HEAP8[HEAP32[$0 + 8 >> 2] >> 0] = HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 21502
 HEAP8[___async_retval >> 0] = 1; //@line 21505
 return;
}
function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 1523
 ___cxa_begin_catch($0 | 0) | 0; //@line 1524
 _emscripten_alloc_async_context(4, sp) | 0; //@line 1525
 __ZSt9terminatev(); //@line 1526
}
function _aes_ctx_alloc() {
 var $$0 = 0, $0 = 0;
 $0 = _calloc(1, 280) | 0; //@line 3701
 if (!$0) {
  $$0 = 0; //@line 3704
 } else {
  _mbedtls_aes_init($0); //@line 3706
  $$0 = $0; //@line 3707
 }
 return $$0 | 0; //@line 3709
}
function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0); //@line 250
}
function _handle_lora_downlink($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh($0, $1, $2, $3, $4, $5); //@line 2066
 return;
}
function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0; //@line 187
}
function _aes_crypt_cbc_wrap($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return _mbedtls_aes_crypt_cbc($0, $1, $2, $3, $4, $5) | 0; //@line 3665
}
function __ZN16LoRaWANInterface16get_channel_planER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan($0 + 4 | 0, $1) | 0; //@line 4615
}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0; //@line 30541
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0; //@line 30543
}
function __ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_269($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 7039
 return;
}
function __ZN7LoRaMac16set_device_classERK14device_class_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + 1168 >> 2] = HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0 ? 2 : 1; //@line 2536
 return;
}
function __ZN7LoRaPHY15get_max_payloadEhb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return HEAP8[(HEAP32[($2 ? $0 + 104 | 0 : $0 + 96 | 0) >> 2] | 0) + ($1 & 255) >> 0] | 0; //@line 21740
}
function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0); //@line 243
}
function b42(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 nullFunc_iiiiiiii(0); //@line 377
 return 0; //@line 377
}
function _strchr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = ___strchrnul($0, $1) | 0; //@line 11674
 return ((HEAP8[$2 >> 0] | 0) == ($1 & 255) << 24 >> 24 ? $2 : 0) | 0; //@line 11679
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_303($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 10707
 return;
}
function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) {
  $$0 = 0; //@line 13700
 } else {
  $$0 = _wcrtomb($0, $1, 0) | 0; //@line 13703
 }
 return $$0 | 0; //@line 13705
}
function __ZN7LoRaPHY13mask_bit_testEPKtj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return (1 << ($2 & 15) & (HEAPU16[$1 + ($2 >>> 4 << 1) >> 1] | 0) | 0) != 0 | 0; //@line 21170
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_155($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 29161
 return;
}
function __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 22026
 return;
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_89($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[___async_retval >> 2]; //@line 23415
 return;
}
function __ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = HEAP8[___async_retval >> 0] & 1 ? 3 : 0; //@line 26744
 return;
}
function __ZN7LoRaMac15open_rx2_windowEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + 1168 >> 2] = HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0 ? 2 : 1; //@line 8642
 return;
}
function __ZN16LoRaWANInterface25set_confirmed_msg_retriesEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack23set_confirmed_msg_retryEh($0 + 4 | 0, $1) | 0; //@line 4587
}
function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 31](a1 | 0, a2 | 0, a3 | 0) | 0; //@line 180
}
function _fputs($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = _strlen($0) | 0; //@line 11169
 return ((_fwrite($0, 1, $2, $1) | 0) != ($2 | 0)) << 31 >> 31 | 0; //@line 11173
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0; //@line 30778
}
function __ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 28890
 return;
}
function ___dynamic_cast__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) == 1 ? HEAP32[$0 + 8 >> 2] | 0 : 0; //@line 27093
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_182($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 1602
 return;
}
function __ZN16SX1276_LoRaRadio18set_public_networkEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 + 689 >> 0] = 1; //@line 816
 HEAP8[$0 + 776 >> 0] = $1 & 1; //@line 818
 return;
}
function __ZN16LoRaWANInterface16set_device_classE14device_class_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 22249
 return;
}
function __ZN16LoRaWANInterface10initializeEPN6events10EventQueueE__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 10330
 return;
}
function b40(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(3); //@line 374
 return 0; //@line 374
}
function b39(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(0); //@line 371
 return 0; //@line 371
}
function _emscripten_realloc_async_context(len) {
 len = len | 0;
 stackRestore(___async_cur_frame | 0); //@line 30839
 return (stackAlloc(len + 8 | 0) | 0) + 8 | 0; //@line 30840
}
function __ZN18LoRaWANTimeHandler16get_elapsed_timeEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (__ZN6events10EventQueue4tickEv(HEAP32[$0 >> 2] | 0) | 0) - $1 | 0; //@line 173
}
function __ZN7LoRaMac24continue_joining_processEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = (HEAP32[___async_retval >> 2] | 0) == 0 & 1; //@line 20227
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_230($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 5048
 return;
}
function __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_16($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 18736
 return;
}
function __ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 26477
 return;
}
function __ZN7LoRaMac17bind_radio_driverER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZN7LoRaPHY18set_radio_instanceER9LoRaRadio($0 + 4 | 0, $1); //@line 15987
 return;
}
function __ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 26195
 return;
}
function __ZN12LoRaWANStack7connectERK15lorawan_connect__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 26185
 return;
}
function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase; //@line 21
 STACK_MAX = stackMax; //@line 22
}
function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 7](a1 | 0, a2 | 0, a3 | 0); //@line 236
}
function __ZN16LoRaWANInterface7connectERK15lorawan_connect__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 8822
 return;
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_264($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 6707
 return;
}
function __ZN5Sht31C2E7PinNameS0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 _emscripten_asm_const_iiii(16, $0 | 0, $1 | 0, $2 | 0) | 0; //@line 7598
 return;
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_196($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 2521
 return;
}
function __ZN16LoRaWANInterface12set_datarateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack21set_channel_data_rateEh($0 + 4 | 0, $1) | 0; //@line 4562
}
function __ZN7LoRaPHY23get_minimum_tx_datarateEv($0) {
 $0 = $0 | 0;
 return HEAP8[((HEAP8[$0 + 128 >> 0] & 1) == 0 ? $0 + 26 | 0 : $0 + 35 | 0) >> 0] | 0; //@line 21725
}
function __ZN16LoRaWANInterface19remove_channel_planEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 18687
 return;
}
function _swapc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = _llvm_bswap_i32($0 | 0) | 0; //@line 11665
 return (($1 | 0) == 0 ? $0 : $3) | 0; //@line 11667
}
function __ZN16LoRaWANInterface25disable_adaptive_datarateEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack24enable_adaptive_datarateEb($0 + 4 | 0, 0) | 0; //@line 4578
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 16819
 __ZdlPv($0); //@line 16820
 return;
}
function _aes_crypt_ecb_wrap($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return _mbedtls_aes_crypt_ecb($0, $1, $2, $3) | 0; //@line 3653
}
function __ZN16LoRaWANInterface24enable_adaptive_datarateEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack24enable_adaptive_datarateEb($0 + 4 | 0, 1) | 0; //@line 4570
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_136($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 28082
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 16502
 __ZdlPv($0); //@line 16503
 return;
}
function _srand($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = 19576; //@line 15658
 HEAP32[$2 >> 2] = $0 + -1; //@line 15660
 HEAP32[$2 + 4 >> 2] = 0; //@line 15663
 return;
}
function __ZN16LoRaWANInterface7receiveEPhtRhRi__async_cb($0) {
 $0 = $0 | 0;
 HEAP16[___async_retval >> 1] = HEAP16[___async_retval >> 1] | 0; //@line 20683
 return;
}
function _gcm_ctx_alloc() {
 var $0 = 0;
 $0 = _calloc(1, 400) | 0; //@line 3619
 if ($0 | 0) {
  _mbedtls_gcm_init($0); //@line 3622
 }
 return $0 | 0; //@line 3624
}
function _ccm_ctx_alloc() {
 var $0 = 0;
 $0 = _calloc(1, 68) | 0; //@line 3571
 if ($0 | 0) {
  _mbedtls_ccm_init($0); //@line 3574
 }
 return $0 | 0; //@line 3576
}
function __ZN7LoRaMac21handle_retransmissionEv__async_cb_77($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 22700
 return;
}
function __ZN7LoRaMac21handle_retransmissionEv__async_cb_76($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 22686
 return;
}
function __ZN18LoRaWANTimeHandler24activate_timer_subsystemEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 154
 return;
}
function __ZN16LoRaWANInterface7receiveEhPhti__async_cb($0) {
 $0 = $0 | 0;
 HEAP16[___async_retval >> 1] = HEAP16[___async_retval >> 1] | 0; //@line 20368
 return;
}
function __ZN16LoRaWANInterface25remove_link_check_requestEv($0) {
 $0 = $0 | 0;
 __ZN12LoRaWANStack25remove_link_check_requestEv($0 + 4 | 0); //@line 4552
 return;
}
function __ZN16LoRaWANInterface14remove_channelEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 19922
 return;
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_286($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 8557
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 16030
 __ZdlPv($0); //@line 16031
 return;
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_91($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = 2; //@line 23495
 return;
}
function __ZN12LoRaWANStack17drop_channel_listEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 19991
 return;
}
function __ZN16LoRaWANInterface4sendEhPKhti__async_cb($0) {
 $0 = $0 | 0;
 HEAP16[___async_retval >> 1] = HEAP16[___async_retval >> 1] | 0; //@line 19981
 return;
}
function __ZN12LoRaWANStack16remove_a_channelEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 18967
 return;
}
function _out_670($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (!(HEAP32[$0 >> 2] & 32)) {
  ___fwritex($1, $2, $0) | 0; //@line 13185
 }
 return;
}
function __ZN7LoRaMac21remove_single_channelEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 28900
 return;
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_336($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 2879 >> 0] = 1; //@line 25619
 return;
}
function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw; //@line 32
  threwValue = value; //@line 33
 }
}
function b37(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(7); //@line 368
 return 0; //@line 368
}
function b36(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(6); //@line 365
 return 0; //@line 365
}
function b35(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(0); //@line 362
 return 0; //@line 362
}
function _ticker_set_handler__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 4 >> 2] >> 2] = HEAP32[$0 + 8 >> 2]; //@line 1861
 return;
}
function ___cxa_is_pointer_type__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[___async_retval >> 2] | 0) != 0 & 1; //@line 3102
 return;
}
function __ZN16LoRaWANInterface22add_link_check_requestEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack22set_link_check_requestEv($0 + 4 | 0) | 0; //@line 4545
}
function __ZN16LoRaWANInterface10disconnectEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 22628
 return;
}
function __ZN7LoRaMac19remove_channel_planEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 26493
 return;
}
function __ZN18LoRaMacChannelPlan30activate_channelplan_subsystemEP7LoRaPHY($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 16008
 return;
}
function b411(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(0); //@line 1466
}
function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 15](a1 | 0, a2 | 0) | 0; //@line 173
}
function __ZN4mbed5TimerD2Ev($0) {
 $0 = $0 | 0;
 if (HEAP32[$0 >> 2] | 0) {
  if (HEAP8[$0 + 28 >> 0] | 0) {}
 }
 HEAP32[$0 >> 2] = 0; //@line 2813
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($0 | 0) == ($1 | 0) | 0; //@line 16227
}
function __ZN12LoRaWANStack8shutdownEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 9403
 return;
}
function __ZN12LoRaWANStack7connectEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 29456
 return;
}
function __ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterface7connectEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 9422
 return;
}
function __ZN7LoRaPHY16get_channel_maskEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return HEAP32[($1 ? $0 + 120 | 0 : $0 + 116 | 0) >> 2] | 0; //@line 21777
}
function __ZSt13get_terminatev() {
 var $0 = 0;
 $0 = HEAP32[2718] | 0; //@line 16809
 HEAP32[2718] = $0 + 0; //@line 16811
 return $0 | 0; //@line 16813
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_10($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 8 >> 2] | 0) + 2068 >> 0] = 0; //@line 18368
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_2($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 2068 >> 0] = 1; //@line 17701
 return;
}
function _gpio_irq_free($0) {
 $0 = $0 | 0;
 _emscripten_asm_const_iii(13, HEAP32[$0 + 4 >> 2] | 0, HEAP32[$0 + 8 >> 2] | 0) | 0; //@line 7301
 return;
}
function __ZN12LoRaWANStack16set_device_classERK14device_class_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 9390
 return;
}
function __ZN18LoRaWANTimeHandler16get_current_timeEv($0) {
 $0 = $0 | 0;
 return __ZN6events10EventQueue4tickEv(HEAP32[$0 >> 2] | 0) | 0; //@line 163
}
function _mbedtls_cipher_update__async_cb_72($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 22474
 return;
}
function _mbedtls_cipher_setkey__async_cb_73($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 22577
 return;
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_68($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 22295
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _aes_setkey_enc_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return _mbedtls_aes_setkey_enc($0, $1, $2) | 0; //@line 3687
}
function _aes_setkey_dec_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return _mbedtls_aes_setkey_dec($0, $1, $2) | 0; //@line 3696
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_245($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 6065
 return;
}
function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 15](a1 | 0, a2 | 0); //@line 229
}
function _mbedtls_cipher_update__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 22305
 return;
}
function _mbedtls_cipher_setkey__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 22567
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb_171($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 799
 return;
}
function __ZN7LoRaMac4joinEb__async_cb_270($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 7101
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 0; //@line 9412
 return;
}
function __ZN16SX1276_LoRaRadio6randomEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 26899
 return;
}
function _gcm_aes_setkey_wrap__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 20358
 return;
}
function _ccm_aes_setkey_wrap__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 22259
 return;
}
function _mbedtls_ccm_setkey__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 28122
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_99($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = 1; //@line 23983
 return;
}
function __ZN7LoRaMac24enable_adaptive_datarateEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 + 1936 >> 0] = $1 & 1; //@line 14606
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMacD2Ev__async_cb_382($0) {
 $0 = $0 | 0;
 __ZN12LoRaPHYEU868D2Ev((HEAP32[$0 + 4 >> 2] | 0) + 4 | 0); //@line 30170
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b33(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(3); //@line 359
 return 0; //@line 359
}
function b32(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(0); //@line 356
 return 0; //@line 356
}
function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0; //@line 30866
}
function __ZN7LoRaPHY18set_radio_instanceER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 4 >> 2] = $1; //@line 21178
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_12($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b409(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(0); //@line 1463
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvPKhtsaEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY32is_custom_channel_plan_supportedEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 16 >> 0] | 0) != 0 | 0; //@line 21802
}
function _strerror($0) {
 $0 = $0 | 0;
 return ___strerror_l($0, HEAP32[(___pthread_self_85() | 0) + 188 >> 2] | 0) | 0; //@line 13648
}
function _fputc__async_cb_140($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 28208
 return;
}
function _fflush__async_cb_217($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 3850
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _snprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 30459
 return;
}
function __ZN7LoRaMac14set_tx_ongoingEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 + 2088 >> 0] = $1 & 1; //@line 14651
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _putc__async_cb_48($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 21120
 return;
}
function __ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 >> 0] | 0) != 0 | 0; //@line 16505
}
function __ZN7LoRaPHYD2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 864; //@line 18677
 HEAP32[$0 + 4 >> 2] = 0; //@line 18679
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = 0; //@line 21097
 return;
}
function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 15](a1 | 0) | 0; //@line 166
}
function __ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 1 >> 0] | 0) != 0 | 0; //@line 16522
}
function __ZN7LoRaMac11schedule_txEv__async_cb_128($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 26961
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvbEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY21verify_nb_join_trialsEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ($1 & 255) > 11 | 0; //@line 21866
}
function __ZN4mbed11InterruptInD0Ev__async_cb_158($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 29443
 return;
}
function __ZN12LoRaWANStack25remove_link_check_requestEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2877 >> 0] = 0; //@line 10649
 return;
}
function __ZNK14LoRaMacCommand26get_repeat_commands_lengthEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 3 >> 0] | 0; //@line 16490
}
function __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 >> 0] = 0; //@line 16496
 return;
}
function __ZSt11__terminatePFvvE__async_cb($0) {
 $0 = $0 | 0;
 _abort_message(18046, HEAP32[$0 + 4 >> 2] | 0); //@line 22527
}
function __ZN12LoRaPHYEU868D0Ev($0) {
 $0 = $0 | 0;
 __ZN7LoRaPHYD2Ev($0); //@line 22048
 __ZdlPv($0); //@line 22049
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 26945
 return;
}
function __ZN4mbed6Ticker6detachEv($0) {
 $0 = $0 | 0;
 _emscripten_asm_const_ii(14, $0 + 40 | 0) | 0; //@line 7558
 return;
}
function b30(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(31); //@line 353
 return 0; //@line 353
}
function b29(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(30); //@line 350
 return 0; //@line 350
}
function b28(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(29); //@line 347
 return 0; //@line 347
}
function b27(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(28); //@line 344
 return 0; //@line 344
}
function b26(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(27); //@line 341
 return 0; //@line 341
}
function b25(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(26); //@line 338
 return 0; //@line 338
}
function b24(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(25); //@line 335
 return 0; //@line 335
}
function b23(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(24); //@line 332
 return 0; //@line 332
}
function b22(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(23); //@line 329
 return 0; //@line 329
}
function b21(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(22); //@line 326
 return 0; //@line 326
}
function b20(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(21); //@line 323
 return 0; //@line 323
}
function b19(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(20); //@line 320
 return 0; //@line 320
}
function b18(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(19); //@line 317
 return 0; //@line 317
}
function b17(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(18); //@line 314
 return 0; //@line 314
}
function __ZN16SX1276_LoRaRadioD0Ev__async_cb($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 11642
 return;
}
function __ZN16LoRaWANInterfaceD0Ev__async_cb($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 10320
 return;
}
function b16(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(0); //@line 311
 return 0; //@line 311
}
function __ZN7LoRaPHY29get_maximum_frame_counter_gapEv($0) {
 $0 = $0 | 0;
 return HEAP16[$0 + 48 >> 1] | 0; //@line 21748
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac25post_process_mlme_requestEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2068 >> 0] = 0; //@line 10933
 return;
}
function __ZN4mbed7TimeoutD0Ev__async_cb_64($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 22091
 return;
}
function __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 1 >> 0] = 0; //@line 16512
 return;
}
function __ZN14LoRaMacCommand20clear_command_bufferEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2 >> 0] = 0; //@line 16361
 return;
}
function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 1023](a1 | 0); //@line 222
}
function b407(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(7); //@line 1460
}
function b406(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(6); //@line 1457
}
function b405(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(0); //@line 1454
}
function __ZN4mbed6TickerD0Ev__async_cb_55($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 21532
 return;
}
function __ZN14LoRaMacCommand19clear_repeat_bufferEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 3 >> 0] = 0; //@line 16463
 return;
}
function __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 2 >> 0] | 0; //@line 16370
}
function _equeue_event_delay($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -16 >> 2] = $1; //@line 3669
 return;
}
function __ZN7LoRaMac21post_process_mlme_indEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2064 >> 0] = 0; //@line 10997
 return;
}
function __ZN7LoRaMac21post_process_mcps_indEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 1996 >> 0] = 0; //@line 10989
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_360($0) {
 $0 = $0 | 0;
 return;
}
function _equeue_event_dtor($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -8 >> 2] = $1; //@line 3678
 return;
}
function __ZN7LoRaMac10tx_ongoingEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 2088 >> 0] | 0) != 0 | 0; //@line 14642
}
function __ZN7LoRaMac10nwk_joinedEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 2360 >> 0] | 0) != 0 | 0; //@line 14019
}
function __ZN16SX1276_LoRaRadio18check_rf_frequencyEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return 1; //@line 1171
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _aes_ctx_free($0) {
 $0 = $0 | 0;
 _mbedtls_aes_free($0); //@line 3715
 _free($0); //@line 3716
 return;
}
function __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_14($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_75($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_74($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK7LoRaMac16get_device_classEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 2364 >> 2] | 0; //@line 14597
}
function __ZN7LoRaPHY19get_max_nb_channelsEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 20 >> 0] | 0; //@line 21785
}
function __ZN16SX1276_LoRaRadio10get_statusEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 688 >> 0] | 0; //@line 789
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_83($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY16get_phy_channelsEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 124 >> 2] | 0; //@line 21793
}
function __ZN14LoRaMacCommand23get_mac_commands_bufferEv($0) {
 $0 = $0 | 0;
 return $0 + 4 | 0; //@line 16377
}
function _gcm_ctx_free__async_cb($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 18957
 return;
}
function _ccm_ctx_free__async_cb($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 20215
 return;
}
function ___lctrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ___lctrans_impl($0, $1) | 0; //@line 14893
}
function _equeue_mutex_unlock($0) {
 $0 = $0 | 0;
 _pthread_mutex_unlock($0 | 0) | 0; //@line 3713
 return;
}
function _equeue_mutex_create($0) {
 $0 = $0 | 0;
 return _pthread_mutex_init($0 | 0, 0) | 0; //@line 3700
}
function __ZN14LoRaMacCommandC2Ev($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 276) | 0; //@line 16353
 return;
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_19($0) {
 $0 = $0 | 0;
 return;
}
function b14(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(15); //@line 308
 return 0; //@line 308
}
function __ZNK7LoRaMac21get_mlme_confirmationEv($0) {
 $0 = $0 | 0;
 return $0 + 2068 | 0; //@line 10919
}
function __ZNK7LoRaMac21get_mcps_confirmationEv($0) {
 $0 = $0 | 0;
 return $0 + 2036 | 0; //@line 10905
}
function b13(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(0); //@line 305
 return 0; //@line 305
}
function _equeue_mutex_lock($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 3706
 return;
}
function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 7]() | 0; //@line 159
}
function _main__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1; //@line 1904
 return;
}
function __ZNK7LoRaMac19get_mlme_indicationEv($0) {
 $0 = $0 | 0;
 return $0 + 2060 | 0; //@line 10926
}
function __ZNK7LoRaMac19get_mcps_indicationEv($0) {
 $0 = $0 | 0;
 return $0 + 1996 | 0; //@line 10912
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaMacChannelPlanC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 15994
 return;
}
function __ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb_185($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_202($0) {
 $0 = $0 | 0;
 return;
}
function b403(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(7); //@line 1451
}
function b402(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(6); //@line 1448
}
function b401(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(0); //@line 1445
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_378($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue4tickEv($0) {
 $0 = $0 | 0;
 return _equeue_tick() | 0; //@line 3007
}
function __ZN18LoRaWANTimeHandlerC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 140
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_358($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_169($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack26process_status_check_stateEv__async_cb_122($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_206($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_391($0) {
 $0 = $0 | 0;
 return;
}
function _mbedtls_gcm_init($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 400) | 0; //@line 4751
 return;
}
function _mbedtls_aes_init($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 280) | 0; //@line 453
 return;
}
function __ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_188($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_151($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_149($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaPHYEU868D2Ev($0) {
 $0 = $0 | 0;
 __ZN7LoRaPHYD2Ev($0); //@line 22041
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_213($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_212($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack26process_status_check_stateEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_236($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb_384($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_389($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_388($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_386($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_114($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_113($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_112($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb_292($0) {
 $0 = $0 | 0;
 return;
}
function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 7](); //@line 215
}
function __ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb_311($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_32($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_31($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_30($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_29($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_28($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_27($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_26($0) {
 $0 = $0 | 0;
 return;
}
function _isdigit($0) {
 $0 = $0 | 0;
 return ($0 + -48 | 0) >>> 0 < 10 | 0; //@line 11046
}
function __ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_288($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_234($0) {
 $0 = $0 | 0;
 return;
}
function b11(p0) {
 p0 = p0 | 0;
 nullFunc_ii(15); //@line 302
 return 0; //@line 302
}
function b10(p0) {
 p0 = p0 | 0;
 nullFunc_ii(14); //@line 299
 return 0; //@line 299
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_279($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b9(p0) {
 p0 = p0 | 0;
 nullFunc_ii(13); //@line 296
 return 0; //@line 296
}
function b8(p0) {
 p0 = p0 | 0;
 nullFunc_ii(12); //@line 293
 return 0; //@line 293
}
function b7(p0) {
 p0 = p0 | 0;
 nullFunc_ii(11); //@line 290
 return 0; //@line 290
}
function b6(p0) {
 p0 = p0 | 0;
 nullFunc_ii(10); //@line 287
 return 0; //@line 287
}
function ___ofl_lock() {
 ___lock(23632); //@line 11684
 return 23640; //@line 11685
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_191($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_116($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b5(p0) {
 p0 = p0 | 0;
 nullFunc_ii(0); //@line 284
 return 0; //@line 284
}
function b399(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(15); //@line 1442
}
function b398(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(14); //@line 1439
}
function b397(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(13); //@line 1436
}
function b396(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(0); //@line 1433
}
function _abort_message__async_cb_103($0) {
 $0 = $0 | 0;
 _abort(); //@line 25206
}
function __ZN7LoRaPHYD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 18686
 return;
}
function __ZN4mbed10TimerEventD0Ev($0) {
 $0 = $0 | 0;
 _llvm_trap(); //@line 2939
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb_215($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue6cancelEi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value; //@line 39
}
function _frexpl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_frexp($0, $1));
}
function __ZN7LoRaMac15open_rx1_windowEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio4sendEPhh__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed7Timeout7handlerEv__async_cb_66($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed11InterruptInD2Ev__async_cb_127($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_348($0) {
 $0 = $0 | 0;
 return;
}
function ___cxa_pure_virtual__wrapper() {
 ___cxa_pure_virtual(); //@line 383
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_910() {
 return _pthread_self() | 0; //@line 14814
}
function __ZN4mbed10TimerEvent3irqEj__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_85() {
 return _pthread_self() | 0; //@line 14820
}
function __ZN4mbed6Ticker7handlerEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterfaceD2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_335($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStackD2Ev__async_cb_308($0) {
 $0 = $0 | 0;
 return;
}
function _mbed_trace_default_print__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventD2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventC2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function stackRestore(top) {
 top = top | 0;
 STACKTOP = top; //@line 16
}
function __ZN4mbed7TimeoutD2Ev__async_cb_13($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_177($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_176($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_173($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_172($0) {
 $0 = $0 | 0;
 return;
}
function __ZdlPv($0) {
 $0 = $0 | 0;
 _free($0); //@line 15856
 return;
}
function __ZN4mbed6TickerD2Ev__async_cb_37($0) {
 $0 = $0 | 0;
 return;
}
function _pthread_mutex_unlock(x) {
 x = x | 0;
 return 0; //@line 125
}
function _mbed_assert_internal__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio6unlockEv($0) {
 $0 = $0 | 0;
 return;
}
function _ticker_remove_event__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _pthread_mutex_lock(x) {
 x = x | 0;
 return 0; //@line 121
}
function _handle_interrupt_in__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___ofl_unlock() {
 ___unlock(23632); //@line 11690
 return;
}
function __ZN16SX1276_LoRaRadio4lockEv($0) {
 $0 = $0 | 0;
 return;
}
function b394(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1023); //@line 1430
}
function b393(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1022); //@line 1427
}
function b392(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1021); //@line 1424
}
function b391(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1020); //@line 1421
}
function b390(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1019); //@line 1418
}
function b389(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1018); //@line 1415
}
function b388(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1017); //@line 1412
}
function b387(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1016); //@line 1409
}
function b386(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1015); //@line 1406
}
function b385(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1014); //@line 1403
}
function b384(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1013); //@line 1400
}
function b383(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1012); //@line 1397
}
function b382(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1011); //@line 1394
}
function b381(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1010); //@line 1391
}
function b380(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1009); //@line 1388
}
function b379(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1008); //@line 1385
}
function b378(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1007); //@line 1382
}
function b377(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1006); //@line 1379
}
function b376(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1005); //@line 1376
}
function b375(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1004); //@line 1373
}
function b374(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1003); //@line 1370
}
function b373(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1002); //@line 1367
}
function b372(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1001); //@line 1364
}
function b3() {
 nullFunc_i(7); //@line 281
 return 0; //@line 281
}
function b2() {
 nullFunc_i(6); //@line 278
 return 0; //@line 278
}
function b1() {
 nullFunc_i(0); //@line 275
 return 0; //@line 275
}
function _mbed_error_printf__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaWANTimeHandlerD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaMacChannelPlanD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function b371(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1e3); //@line 1361
}
function b370(p0) {
 p0 = p0 | 0;
 nullFunc_vi(999); //@line 1358
}
function b369(p0) {
 p0 = p0 | 0;
 nullFunc_vi(998); //@line 1355
}
function b368(p0) {
 p0 = p0 | 0;
 nullFunc_vi(997); //@line 1352
}
function b367(p0) {
 p0 = p0 | 0;
 nullFunc_vi(996); //@line 1349
}
function b366(p0) {
 p0 = p0 | 0;
 nullFunc_vi(995); //@line 1346
}
function b365(p0) {
 p0 = p0 | 0;
 nullFunc_vi(994); //@line 1343
}
function b364(p0) {
 p0 = p0 | 0;
 nullFunc_vi(993); //@line 1340
}
function b363(p0) {
 p0 = p0 | 0;
 nullFunc_vi(992); //@line 1337
}
function b362(p0) {
 p0 = p0 | 0;
 nullFunc_vi(991); //@line 1334
}
function b361(p0) {
 p0 = p0 | 0;
 nullFunc_vi(990); //@line 1331
}
function b360(p0) {
 p0 = p0 | 0;
 nullFunc_vi(989); //@line 1328
}
function b359(p0) {
 p0 = p0 | 0;
 nullFunc_vi(988); //@line 1325
}
function b358(p0) {
 p0 = p0 | 0;
 nullFunc_vi(987); //@line 1322
}
function b357(p0) {
 p0 = p0 | 0;
 nullFunc_vi(986); //@line 1319
}
function b356(p0) {
 p0 = p0 | 0;
 nullFunc_vi(985); //@line 1316
}
function b355(p0) {
 p0 = p0 | 0;
 nullFunc_vi(984); //@line 1313
}
function b354(p0) {
 p0 = p0 | 0;
 nullFunc_vi(983); //@line 1310
}
function b353(p0) {
 p0 = p0 | 0;
 nullFunc_vi(982); //@line 1307
}
function b352(p0) {
 p0 = p0 | 0;
 nullFunc_vi(981); //@line 1304
}
function b351(p0) {
 p0 = p0 | 0;
 nullFunc_vi(980); //@line 1301
}
function b350(p0) {
 p0 = p0 | 0;
 nullFunc_vi(979); //@line 1298
}
function b349(p0) {
 p0 = p0 | 0;
 nullFunc_vi(978); //@line 1295
}
function b348(p0) {
 p0 = p0 | 0;
 nullFunc_vi(977); //@line 1292
}
function b347(p0) {
 p0 = p0 | 0;
 nullFunc_vi(976); //@line 1289
}
function b346(p0) {
 p0 = p0 | 0;
 nullFunc_vi(975); //@line 1286
}
function b345(p0) {
 p0 = p0 | 0;
 nullFunc_vi(974); //@line 1283
}
function b344(p0) {
 p0 = p0 | 0;
 nullFunc_vi(973); //@line 1280
}
function b343(p0) {
 p0 = p0 | 0;
 nullFunc_vi(972); //@line 1277
}
function b342(p0) {
 p0 = p0 | 0;
 nullFunc_vi(971); //@line 1274
}
function b341(p0) {
 p0 = p0 | 0;
 nullFunc_vi(970); //@line 1271
}
function b340(p0) {
 p0 = p0 | 0;
 nullFunc_vi(969); //@line 1268
}
function b339(p0) {
 p0 = p0 | 0;
 nullFunc_vi(968); //@line 1265
}
function b338(p0) {
 p0 = p0 | 0;
 nullFunc_vi(967); //@line 1262
}
function b337(p0) {
 p0 = p0 | 0;
 nullFunc_vi(966); //@line 1259
}
function b336(p0) {
 p0 = p0 | 0;
 nullFunc_vi(965); //@line 1256
}
function b335(p0) {
 p0 = p0 | 0;
 nullFunc_vi(964); //@line 1253
}
function b334(p0) {
 p0 = p0 | 0;
 nullFunc_vi(963); //@line 1250
}
function b333(p0) {
 p0 = p0 | 0;
 nullFunc_vi(962); //@line 1247
}
function b332(p0) {
 p0 = p0 | 0;
 nullFunc_vi(961); //@line 1244
}
function b331(p0) {
 p0 = p0 | 0;
 nullFunc_vi(960); //@line 1241
}
function b330(p0) {
 p0 = p0 | 0;
 nullFunc_vi(959); //@line 1238
}
function b329(p0) {
 p0 = p0 | 0;
 nullFunc_vi(958); //@line 1235
}
function b328(p0) {
 p0 = p0 | 0;
 nullFunc_vi(957); //@line 1232
}
function b327(p0) {
 p0 = p0 | 0;
 nullFunc_vi(956); //@line 1229
}
function b326(p0) {
 p0 = p0 | 0;
 nullFunc_vi(955); //@line 1226
}
function b325(p0) {
 p0 = p0 | 0;
 nullFunc_vi(954); //@line 1223
}
function b324(p0) {
 p0 = p0 | 0;
 nullFunc_vi(953); //@line 1220
}
function b323(p0) {
 p0 = p0 | 0;
 nullFunc_vi(952); //@line 1217
}
function b322(p0) {
 p0 = p0 | 0;
 nullFunc_vi(951); //@line 1214
}
function b321(p0) {
 p0 = p0 | 0;
 nullFunc_vi(950); //@line 1211
}
function b320(p0) {
 p0 = p0 | 0;
 nullFunc_vi(949); //@line 1208
}
function b319(p0) {
 p0 = p0 | 0;
 nullFunc_vi(948); //@line 1205
}
function b318(p0) {
 p0 = p0 | 0;
 nullFunc_vi(947); //@line 1202
}
function b317(p0) {
 p0 = p0 | 0;
 nullFunc_vi(946); //@line 1199
}
function b316(p0) {
 p0 = p0 | 0;
 nullFunc_vi(945); //@line 1196
}
function b315(p0) {
 p0 = p0 | 0;
 nullFunc_vi(944); //@line 1193
}
function b314(p0) {
 p0 = p0 | 0;
 nullFunc_vi(943); //@line 1190
}
function b313(p0) {
 p0 = p0 | 0;
 nullFunc_vi(942); //@line 1187
}
function b312(p0) {
 p0 = p0 | 0;
 nullFunc_vi(941); //@line 1184
}
function b311(p0) {
 p0 = p0 | 0;
 nullFunc_vi(940); //@line 1181
}
function b310(p0) {
 p0 = p0 | 0;
 nullFunc_vi(939); //@line 1178
}
function b309(p0) {
 p0 = p0 | 0;
 nullFunc_vi(938); //@line 1175
}
function b308(p0) {
 p0 = p0 | 0;
 nullFunc_vi(937); //@line 1172
}
function b307(p0) {
 p0 = p0 | 0;
 nullFunc_vi(936); //@line 1169
}
function b306(p0) {
 p0 = p0 | 0;
 nullFunc_vi(935); //@line 1166
}
function b305(p0) {
 p0 = p0 | 0;
 nullFunc_vi(934); //@line 1163
}
function b304(p0) {
 p0 = p0 | 0;
 nullFunc_vi(933); //@line 1160
}
function b303(p0) {
 p0 = p0 | 0;
 nullFunc_vi(932); //@line 1157
}
function b302(p0) {
 p0 = p0 | 0;
 nullFunc_vi(931); //@line 1154
}
function b301(p0) {
 p0 = p0 | 0;
 nullFunc_vi(930); //@line 1151
}
function b300(p0) {
 p0 = p0 | 0;
 nullFunc_vi(929); //@line 1148
}
function b299(p0) {
 p0 = p0 | 0;
 nullFunc_vi(928); //@line 1145
}
function b298(p0) {
 p0 = p0 | 0;
 nullFunc_vi(927); //@line 1142
}
function b297(p0) {
 p0 = p0 | 0;
 nullFunc_vi(926); //@line 1139
}
function b296(p0) {
 p0 = p0 | 0;
 nullFunc_vi(925); //@line 1136
}
function b295(p0) {
 p0 = p0 | 0;
 nullFunc_vi(924); //@line 1133
}
function b294(p0) {
 p0 = p0 | 0;
 nullFunc_vi(923); //@line 1130
}
function b293(p0) {
 p0 = p0 | 0;
 nullFunc_vi(922); //@line 1127
}
function b292(p0) {
 p0 = p0 | 0;
 nullFunc_vi(921); //@line 1124
}
function b291(p0) {
 p0 = p0 | 0;
 nullFunc_vi(920); //@line 1121
}
function b290(p0) {
 p0 = p0 | 0;
 nullFunc_vi(919); //@line 1118
}
function b289(p0) {
 p0 = p0 | 0;
 nullFunc_vi(918); //@line 1115
}
function b288(p0) {
 p0 = p0 | 0;
 nullFunc_vi(917); //@line 1112
}
function b287(p0) {
 p0 = p0 | 0;
 nullFunc_vi(916); //@line 1109
}
function b286(p0) {
 p0 = p0 | 0;
 nullFunc_vi(915); //@line 1106
}
function b285(p0) {
 p0 = p0 | 0;
 nullFunc_vi(914); //@line 1103
}
function b284(p0) {
 p0 = p0 | 0;
 nullFunc_vi(913); //@line 1100
}
function b283(p0) {
 p0 = p0 | 0;
 nullFunc_vi(912); //@line 1097
}
function b282(p0) {
 p0 = p0 | 0;
 nullFunc_vi(911); //@line 1094
}
function b281(p0) {
 p0 = p0 | 0;
 nullFunc_vi(910); //@line 1091
}
function b280(p0) {
 p0 = p0 | 0;
 nullFunc_vi(909); //@line 1088
}
function b279(p0) {
 p0 = p0 | 0;
 nullFunc_vi(908); //@line 1085
}
function b278(p0) {
 p0 = p0 | 0;
 nullFunc_vi(907); //@line 1082
}
function b277(p0) {
 p0 = p0 | 0;
 nullFunc_vi(906); //@line 1079
}
function b276(p0) {
 p0 = p0 | 0;
 nullFunc_vi(905); //@line 1076
}
function b275(p0) {
 p0 = p0 | 0;
 nullFunc_vi(904); //@line 1073
}
function b274(p0) {
 p0 = p0 | 0;
 nullFunc_vi(903); //@line 1070
}
function b273(p0) {
 p0 = p0 | 0;
 nullFunc_vi(902); //@line 1067
}
function b272(p0) {
 p0 = p0 | 0;
 nullFunc_vi(901); //@line 1064
}
function b271(p0) {
 p0 = p0 | 0;
 nullFunc_vi(900); //@line 1061
}
function b270(p0) {
 p0 = p0 | 0;
 nullFunc_vi(899); //@line 1058
}
function b269(p0) {
 p0 = p0 | 0;
 nullFunc_vi(898); //@line 1055
}
function b268(p0) {
 p0 = p0 | 0;
 nullFunc_vi(897); //@line 1052
}
function b267(p0) {
 p0 = p0 | 0;
 nullFunc_vi(896); //@line 1049
}
function b266(p0) {
 p0 = p0 | 0;
 nullFunc_vi(895); //@line 1046
}
function b265(p0) {
 p0 = p0 | 0;
 nullFunc_vi(894); //@line 1043
}
function b264(p0) {
 p0 = p0 | 0;
 nullFunc_vi(893); //@line 1040
}
function b263(p0) {
 p0 = p0 | 0;
 nullFunc_vi(892); //@line 1037
}
function b262(p0) {
 p0 = p0 | 0;
 nullFunc_vi(891); //@line 1034
}
function b261(p0) {
 p0 = p0 | 0;
 nullFunc_vi(890); //@line 1031
}
function b260(p0) {
 p0 = p0 | 0;
 nullFunc_vi(889); //@line 1028
}
function b259(p0) {
 p0 = p0 | 0;
 nullFunc_vi(888); //@line 1025
}
function b258(p0) {
 p0 = p0 | 0;
 nullFunc_vi(887); //@line 1022
}
function b257(p0) {
 p0 = p0 | 0;
 nullFunc_vi(886); //@line 1019
}
function b256(p0) {
 p0 = p0 | 0;
 nullFunc_vi(885); //@line 1016
}
function b255(p0) {
 p0 = p0 | 0;
 nullFunc_vi(884); //@line 1013
}
function b254(p0) {
 p0 = p0 | 0;
 nullFunc_vi(883); //@line 1010
}
function b253(p0) {
 p0 = p0 | 0;
 nullFunc_vi(882); //@line 1007
}
function b252(p0) {
 p0 = p0 | 0;
 nullFunc_vi(881); //@line 1004
}
function b251(p0) {
 p0 = p0 | 0;
 nullFunc_vi(880); //@line 1001
}
function _dummy($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 11004
}
function ___lockfile($0) {
 $0 = $0 | 0;
 return 0; //@line 11321
}
function b250(p0) {
 p0 = p0 | 0;
 nullFunc_vi(879); //@line 998
}
function b249(p0) {
 p0 = p0 | 0;
 nullFunc_vi(878); //@line 995
}
function b248(p0) {
 p0 = p0 | 0;
 nullFunc_vi(877); //@line 992
}
function b247(p0) {
 p0 = p0 | 0;
 nullFunc_vi(876); //@line 989
}
function b246(p0) {
 p0 = p0 | 0;
 nullFunc_vi(875); //@line 986
}
function b245(p0) {
 p0 = p0 | 0;
 nullFunc_vi(874); //@line 983
}
function b244(p0) {
 p0 = p0 | 0;
 nullFunc_vi(873); //@line 980
}
function b243(p0) {
 p0 = p0 | 0;
 nullFunc_vi(872); //@line 977
}
function b242(p0) {
 p0 = p0 | 0;
 nullFunc_vi(871); //@line 974
}
function b241(p0) {
 p0 = p0 | 0;
 nullFunc_vi(870); //@line 971
}
function b240(p0) {
 p0 = p0 | 0;
 nullFunc_vi(869); //@line 968
}
function b239(p0) {
 p0 = p0 | 0;
 nullFunc_vi(868); //@line 965
}
function b238(p0) {
 p0 = p0 | 0;
 nullFunc_vi(867); //@line 962
}
function b237(p0) {
 p0 = p0 | 0;
 nullFunc_vi(866); //@line 959
}
function b236(p0) {
 p0 = p0 | 0;
 nullFunc_vi(865); //@line 956
}
function b235(p0) {
 p0 = p0 | 0;
 nullFunc_vi(864); //@line 953
}
function b234(p0) {
 p0 = p0 | 0;
 nullFunc_vi(863); //@line 950
}
function b233(p0) {
 p0 = p0 | 0;
 nullFunc_vi(862); //@line 947
}
function b232(p0) {
 p0 = p0 | 0;
 nullFunc_vi(861); //@line 944
}
function b231(p0) {
 p0 = p0 | 0;
 nullFunc_vi(860); //@line 941
}
function b230(p0) {
 p0 = p0 | 0;
 nullFunc_vi(859); //@line 938
}
function b229(p0) {
 p0 = p0 | 0;
 nullFunc_vi(858); //@line 935
}
function b228(p0) {
 p0 = p0 | 0;
 nullFunc_vi(857); //@line 932
}
function b227(p0) {
 p0 = p0 | 0;
 nullFunc_vi(856); //@line 929
}
function b226(p0) {
 p0 = p0 | 0;
 nullFunc_vi(855); //@line 926
}
function b225(p0) {
 p0 = p0 | 0;
 nullFunc_vi(854); //@line 923
}
function b224(p0) {
 p0 = p0 | 0;
 nullFunc_vi(853); //@line 920
}
function b223(p0) {
 p0 = p0 | 0;
 nullFunc_vi(852); //@line 917
}
function b222(p0) {
 p0 = p0 | 0;
 nullFunc_vi(851); //@line 914
}
function b221(p0) {
 p0 = p0 | 0;
 nullFunc_vi(850); //@line 911
}
function b220(p0) {
 p0 = p0 | 0;
 nullFunc_vi(849); //@line 908
}
function b219(p0) {
 p0 = p0 | 0;
 nullFunc_vi(848); //@line 905
}
function b218(p0) {
 p0 = p0 | 0;
 nullFunc_vi(847); //@line 902
}
function b217(p0) {
 p0 = p0 | 0;
 nullFunc_vi(846); //@line 899
}
function b216(p0) {
 p0 = p0 | 0;
 nullFunc_vi(845); //@line 896
}
function b215(p0) {
 p0 = p0 | 0;
 nullFunc_vi(844); //@line 893
}
function b214(p0) {
 p0 = p0 | 0;
 nullFunc_vi(843); //@line 890
}
function b213(p0) {
 p0 = p0 | 0;
 nullFunc_vi(842); //@line 887
}
function b212(p0) {
 p0 = p0 | 0;
 nullFunc_vi(841); //@line 884
}
function b211(p0) {
 p0 = p0 | 0;
 nullFunc_vi(840); //@line 881
}
function b210(p0) {
 p0 = p0 | 0;
 nullFunc_vi(839); //@line 878
}
function b209(p0) {
 p0 = p0 | 0;
 nullFunc_vi(838); //@line 875
}
function b208(p0) {
 p0 = p0 | 0;
 nullFunc_vi(837); //@line 872
}
function b207(p0) {
 p0 = p0 | 0;
 nullFunc_vi(836); //@line 869
}
function b206(p0) {
 p0 = p0 | 0;
 nullFunc_vi(835); //@line 866
}
function b205(p0) {
 p0 = p0 | 0;
 nullFunc_vi(834); //@line 863
}
function b204(p0) {
 p0 = p0 | 0;
 nullFunc_vi(833); //@line 860
}
function b203(p0) {
 p0 = p0 | 0;
 nullFunc_vi(832); //@line 857
}
function b202(p0) {
 p0 = p0 | 0;
 nullFunc_vi(831); //@line 854
}
function b201(p0) {
 p0 = p0 | 0;
 nullFunc_vi(830); //@line 851
}
function b200(p0) {
 p0 = p0 | 0;
 nullFunc_vi(829); //@line 848
}
function b199(p0) {
 p0 = p0 | 0;
 nullFunc_vi(828); //@line 845
}
function b198(p0) {
 p0 = p0 | 0;
 nullFunc_vi(827); //@line 842
}
function b197(p0) {
 p0 = p0 | 0;
 nullFunc_vi(826); //@line 839
}
function b196(p0) {
 p0 = p0 | 0;
 nullFunc_vi(825); //@line 836
}
function b195(p0) {
 p0 = p0 | 0;
 nullFunc_vi(824); //@line 833
}
function b194(p0) {
 p0 = p0 | 0;
 nullFunc_vi(823); //@line 830
}
function b193(p0) {
 p0 = p0 | 0;
 nullFunc_vi(822); //@line 827
}
function b192(p0) {
 p0 = p0 | 0;
 nullFunc_vi(821); //@line 824
}
function b191(p0) {
 p0 = p0 | 0;
 nullFunc_vi(820); //@line 821
}
function b190(p0) {
 p0 = p0 | 0;
 nullFunc_vi(819); //@line 818
}
function b189(p0) {
 p0 = p0 | 0;
 nullFunc_vi(818); //@line 815
}
function b188(p0) {
 p0 = p0 | 0;
 nullFunc_vi(817); //@line 812
}
function b187(p0) {
 p0 = p0 | 0;
 nullFunc_vi(816); //@line 809
}
function b186(p0) {
 p0 = p0 | 0;
 nullFunc_vi(815); //@line 806
}
function b185(p0) {
 p0 = p0 | 0;
 nullFunc_vi(814); //@line 803
}
function b184(p0) {
 p0 = p0 | 0;
 nullFunc_vi(813); //@line 800
}
function b183(p0) {
 p0 = p0 | 0;
 nullFunc_vi(812); //@line 797
}
function b182(p0) {
 p0 = p0 | 0;
 nullFunc_vi(811); //@line 794
}
function b181(p0) {
 p0 = p0 | 0;
 nullFunc_vi(810); //@line 791
}
function b180(p0) {
 p0 = p0 | 0;
 nullFunc_vi(809); //@line 788
}
function b179(p0) {
 p0 = p0 | 0;
 nullFunc_vi(808); //@line 785
}
function b178(p0) {
 p0 = p0 | 0;
 nullFunc_vi(807); //@line 782
}
function b177(p0) {
 p0 = p0 | 0;
 nullFunc_vi(806); //@line 779
}
function b176(p0) {
 p0 = p0 | 0;
 nullFunc_vi(805); //@line 776
}
function b175(p0) {
 p0 = p0 | 0;
 nullFunc_vi(804); //@line 773
}
function b174(p0) {
 p0 = p0 | 0;
 nullFunc_vi(803); //@line 770
}
function b173(p0) {
 p0 = p0 | 0;
 nullFunc_vi(802); //@line 767
}
function b172(p0) {
 p0 = p0 | 0;
 nullFunc_vi(801); //@line 764
}
function b171(p0) {
 p0 = p0 | 0;
 nullFunc_vi(800); //@line 761
}
function b170(p0) {
 p0 = p0 | 0;
 nullFunc_vi(799); //@line 758
}
function b169(p0) {
 p0 = p0 | 0;
 nullFunc_vi(798); //@line 755
}
function b168(p0) {
 p0 = p0 | 0;
 nullFunc_vi(797); //@line 752
}
function b167(p0) {
 p0 = p0 | 0;
 nullFunc_vi(796); //@line 749
}
function b166(p0) {
 p0 = p0 | 0;
 nullFunc_vi(795); //@line 746
}
function b165(p0) {
 p0 = p0 | 0;
 nullFunc_vi(794); //@line 743
}
function b164(p0) {
 p0 = p0 | 0;
 nullFunc_vi(793); //@line 740
}
function b163(p0) {
 p0 = p0 | 0;
 nullFunc_vi(792); //@line 737
}
function b162(p0) {
 p0 = p0 | 0;
 nullFunc_vi(791); //@line 734
}
function b161(p0) {
 p0 = p0 | 0;
 nullFunc_vi(790); //@line 731
}
function b160(p0) {
 p0 = p0 | 0;
 nullFunc_vi(789); //@line 728
}
function b159(p0) {
 p0 = p0 | 0;
 nullFunc_vi(788); //@line 725
}
function b158(p0) {
 p0 = p0 | 0;
 nullFunc_vi(787); //@line 722
}
function b157(p0) {
 p0 = p0 | 0;
 nullFunc_vi(786); //@line 719
}
function b156(p0) {
 p0 = p0 | 0;
 nullFunc_vi(785); //@line 716
}
function b155(p0) {
 p0 = p0 | 0;
 nullFunc_vi(784); //@line 713
}
function b154(p0) {
 p0 = p0 | 0;
 nullFunc_vi(783); //@line 710
}
function b153(p0) {
 p0 = p0 | 0;
 nullFunc_vi(782); //@line 707
}
function b152(p0) {
 p0 = p0 | 0;
 nullFunc_vi(781); //@line 704
}
function b151(p0) {
 p0 = p0 | 0;
 nullFunc_vi(780); //@line 701
}
function b150(p0) {
 p0 = p0 | 0;
 nullFunc_vi(779); //@line 698
}
function b149(p0) {
 p0 = p0 | 0;
 nullFunc_vi(778); //@line 695
}
function b148(p0) {
 p0 = p0 | 0;
 nullFunc_vi(777); //@line 692
}
function b147(p0) {
 p0 = p0 | 0;
 nullFunc_vi(776); //@line 689
}
function b146(p0) {
 p0 = p0 | 0;
 nullFunc_vi(775); //@line 686
}
function b145(p0) {
 p0 = p0 | 0;
 nullFunc_vi(774); //@line 683
}
function b144(p0) {
 p0 = p0 | 0;
 nullFunc_vi(773); //@line 680
}
function b143(p0) {
 p0 = p0 | 0;
 nullFunc_vi(772); //@line 677
}
function b142(p0) {
 p0 = p0 | 0;
 nullFunc_vi(771); //@line 674
}
function b141(p0) {
 p0 = p0 | 0;
 nullFunc_vi(770); //@line 671
}
function b140(p0) {
 p0 = p0 | 0;
 nullFunc_vi(769); //@line 668
}
function b139(p0) {
 p0 = p0 | 0;
 nullFunc_vi(768); //@line 665
}
function b138(p0) {
 p0 = p0 | 0;
 nullFunc_vi(767); //@line 662
}
function b137(p0) {
 p0 = p0 | 0;
 nullFunc_vi(766); //@line 659
}
function b136(p0) {
 p0 = p0 | 0;
 nullFunc_vi(765); //@line 656
}
function b135(p0) {
 p0 = p0 | 0;
 nullFunc_vi(764); //@line 653
}
function b134(p0) {
 p0 = p0 | 0;
 nullFunc_vi(763); //@line 650
}
function b133(p0) {
 p0 = p0 | 0;
 nullFunc_vi(762); //@line 647
}
function b132(p0) {
 p0 = p0 | 0;
 nullFunc_vi(761); //@line 644
}
function b131(p0) {
 p0 = p0 | 0;
 nullFunc_vi(760); //@line 641
}
function b130(p0) {
 p0 = p0 | 0;
 nullFunc_vi(759); //@line 638
}
function b129(p0) {
 p0 = p0 | 0;
 nullFunc_vi(758); //@line 635
}
function b128(p0) {
 p0 = p0 | 0;
 nullFunc_vi(757); //@line 632
}
function b127(p0) {
 p0 = p0 | 0;
 nullFunc_vi(756); //@line 629
}
function b126(p0) {
 p0 = p0 | 0;
 nullFunc_vi(755); //@line 626
}
function b125(p0) {
 p0 = p0 | 0;
 nullFunc_vi(754); //@line 623
}
function b124(p0) {
 p0 = p0 | 0;
 nullFunc_vi(753); //@line 620
}
function b123(p0) {
 p0 = p0 | 0;
 nullFunc_vi(752); //@line 617
}
function b122(p0) {
 p0 = p0 | 0;
 nullFunc_vi(751); //@line 614
}
function b121(p0) {
 p0 = p0 | 0;
 nullFunc_vi(750); //@line 611
}
function b120(p0) {
 p0 = p0 | 0;
 nullFunc_vi(749); //@line 608
}
function b119(p0) {
 p0 = p0 | 0;
 nullFunc_vi(748); //@line 605
}
function b118(p0) {
 p0 = p0 | 0;
 nullFunc_vi(747); //@line 602
}
function b117(p0) {
 p0 = p0 | 0;
 nullFunc_vi(746); //@line 599
}
function b116(p0) {
 p0 = p0 | 0;
 nullFunc_vi(745); //@line 596
}
function b115(p0) {
 p0 = p0 | 0;
 nullFunc_vi(744); //@line 593
}
function b114(p0) {
 p0 = p0 | 0;
 nullFunc_vi(743); //@line 590
}
function b113(p0) {
 p0 = p0 | 0;
 nullFunc_vi(742); //@line 587
}
function b112(p0) {
 p0 = p0 | 0;
 nullFunc_vi(741); //@line 584
}
function b111(p0) {
 p0 = p0 | 0;
 nullFunc_vi(740); //@line 581
}
function b110(p0) {
 p0 = p0 | 0;
 nullFunc_vi(739); //@line 578
}
function b109(p0) {
 p0 = p0 | 0;
 nullFunc_vi(738); //@line 575
}
function b108(p0) {
 p0 = p0 | 0;
 nullFunc_vi(737); //@line 572
}
function b107(p0) {
 p0 = p0 | 0;
 nullFunc_vi(736); //@line 569
}
function b106(p0) {
 p0 = p0 | 0;
 nullFunc_vi(735); //@line 566
}
function b105(p0) {
 p0 = p0 | 0;
 nullFunc_vi(734); //@line 563
}
function b104(p0) {
 p0 = p0 | 0;
 nullFunc_vi(733); //@line 560
}
function b103(p0) {
 p0 = p0 | 0;
 nullFunc_vi(732); //@line 557
}
function b102(p0) {
 p0 = p0 | 0;
 nullFunc_vi(731); //@line 554
}
function b101(p0) {
 p0 = p0 | 0;
 nullFunc_vi(730); //@line 551
}
function b100(p0) {
 p0 = p0 | 0;
 nullFunc_vi(729); //@line 548
}
function b99(p0) {
 p0 = p0 | 0;
 nullFunc_vi(728); //@line 545
}
function b98(p0) {
 p0 = p0 | 0;
 nullFunc_vi(727); //@line 542
}
function b97(p0) {
 p0 = p0 | 0;
 nullFunc_vi(726); //@line 539
}
function b96(p0) {
 p0 = p0 | 0;
 nullFunc_vi(725); //@line 536
}
function b95(p0) {
 p0 = p0 | 0;
 nullFunc_vi(724); //@line 533
}
function b94(p0) {
 p0 = p0 | 0;
 nullFunc_vi(723); //@line 530
}
function b93(p0) {
 p0 = p0 | 0;
 nullFunc_vi(722); //@line 527
}
function b92(p0) {
 p0 = p0 | 0;
 nullFunc_vi(721); //@line 524
}
function b91(p0) {
 p0 = p0 | 0;
 nullFunc_vi(720); //@line 521
}
function b90(p0) {
 p0 = p0 | 0;
 nullFunc_vi(719); //@line 518
}
function b89(p0) {
 p0 = p0 | 0;
 nullFunc_vi(718); //@line 515
}
function b88(p0) {
 p0 = p0 | 0;
 nullFunc_vi(717); //@line 512
}
function b87(p0) {
 p0 = p0 | 0;
 nullFunc_vi(716); //@line 509
}
function b86(p0) {
 p0 = p0 | 0;
 nullFunc_vi(715); //@line 506
}
function b85(p0) {
 p0 = p0 | 0;
 nullFunc_vi(714); //@line 503
}
function b84(p0) {
 p0 = p0 | 0;
 nullFunc_vi(713); //@line 500
}
function b83(p0) {
 p0 = p0 | 0;
 nullFunc_vi(712); //@line 497
}
function b82(p0) {
 p0 = p0 | 0;
 nullFunc_vi(711); //@line 494
}
function b81(p0) {
 p0 = p0 | 0;
 nullFunc_vi(710); //@line 491
}
function b80(p0) {
 p0 = p0 | 0;
 nullFunc_vi(709); //@line 488
}
function b79(p0) {
 p0 = p0 | 0;
 nullFunc_vi(708); //@line 485
}
function b78(p0) {
 p0 = p0 | 0;
 nullFunc_vi(707); //@line 482
}
function b77(p0) {
 p0 = p0 | 0;
 nullFunc_vi(706); //@line 479
}
function b76(p0) {
 p0 = p0 | 0;
 nullFunc_vi(705); //@line 476
}
function b75(p0) {
 p0 = p0 | 0;
 nullFunc_vi(704); //@line 473
}
function b74(p0) {
 p0 = p0 | 0;
 nullFunc_vi(703); //@line 470
}
function b73(p0) {
 p0 = p0 | 0;
 nullFunc_vi(702); //@line 467
}
function b72(p0) {
 p0 = p0 | 0;
 nullFunc_vi(701); //@line 464
}
function b71(p0) {
 p0 = p0 | 0;
 nullFunc_vi(700); //@line 461
}
function b70(p0) {
 p0 = p0 | 0;
 nullFunc_vi(699); //@line 458
}
function b69(p0) {
 p0 = p0 | 0;
 nullFunc_vi(698); //@line 455
}
function b68(p0) {
 p0 = p0 | 0;
 nullFunc_vi(697); //@line 452
}
function b67(p0) {
 p0 = p0 | 0;
 nullFunc_vi(696); //@line 449
}
function b66(p0) {
 p0 = p0 | 0;
 nullFunc_vi(695); //@line 446
}
function b65(p0) {
 p0 = p0 | 0;
 nullFunc_vi(694); //@line 443
}
function b64(p0) {
 p0 = p0 | 0;
 nullFunc_vi(693); //@line 440
}
function b63(p0) {
 p0 = p0 | 0;
 nullFunc_vi(692); //@line 437
}
function b62(p0) {
 p0 = p0 | 0;
 nullFunc_vi(691); //@line 434
}
function b61(p0) {
 p0 = p0 | 0;
 nullFunc_vi(690); //@line 431
}
function b60(p0) {
 p0 = p0 | 0;
 nullFunc_vi(689); //@line 428
}
function b59(p0) {
 p0 = p0 | 0;
 nullFunc_vi(688); //@line 425
}
function b58(p0) {
 p0 = p0 | 0;
 nullFunc_vi(687); //@line 422
}
function b57(p0) {
 p0 = p0 | 0;
 nullFunc_vi(686); //@line 419
}
function b56(p0) {
 p0 = p0 | 0;
 nullFunc_vi(685); //@line 416
}
function b55(p0) {
 p0 = p0 | 0;
 nullFunc_vi(684); //@line 413
}
function b54(p0) {
 p0 = p0 | 0;
 nullFunc_vi(683); //@line 410
}
function b53(p0) {
 p0 = p0 | 0;
 nullFunc_vi(682); //@line 407
}
function b52(p0) {
 p0 = p0 | 0;
 nullFunc_vi(681); //@line 404
}
function b51(p0) {
 p0 = p0 | 0;
 nullFunc_vi(680); //@line 401
}
function b50(p0) {
 p0 = p0 | 0;
 nullFunc_vi(679); //@line 398
}
function b49(p0) {
 p0 = p0 | 0;
 nullFunc_vi(678); //@line 395
}
function b48(p0) {
 p0 = p0 | 0;
 nullFunc_vi(677); //@line 392
}
function b47(p0) {
 p0 = p0 | 0;
 nullFunc_vi(676); //@line 389
}
function _sleep_manager_unlock_deep_sleep_internal() {
 return;
}
function _initialize__async_cb_162($0) {
 $0 = $0 | 0;
 return;
}
function _us_ticker_set_interrupt($0) {
 $0 = $0 | 0;
 return;
}
function _invoke_ticker__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___clang_call_terminate__async_cb($0) {
 $0 = $0 | 0;
}
function b46(p0) {
 p0 = p0 | 0;
 nullFunc_vi(0); //@line 386
}
function _sleep_manager_lock_deep_sleep_internal() {
 return;
}
function _us_ticker_get_info() {
 return 10236; //@line 7574
}
function _serial_putc__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbed_tracef__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _get_us_ticker_data() {
 return 10180; //@line 6737
}
function ___errno_location() {
 return 23628; //@line 10998
}
function __ZSt9terminatev__async_cb_78($0) {
 $0 = $0 | 0;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function getTempRet0() {
 return tempRet0 | 0; //@line 42
}
function _wait_ms__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function stackSave() {
 return STACKTOP | 0; //@line 12
}
function _pthread_self() {
 return 10504; //@line 11051
}
function _core_util_critical_section_enter() {
 return;
}
function __ZSt9terminatev__async_cb($0) {
 $0 = $0 | 0;
}
function _core_util_critical_section_exit() {
 return;
}
function _us_ticker_read() {
 return 0; //@line 7365
}
function ___unlockfile($0) {
 $0 = $0 | 0;
 return;
}
function _us_ticker_disable_interrupt() {
 return;
}
function _us_ticker_clear_interrupt() {
 return;
}
function setAsync() {
 ___async = 1; //@line 26
}
function _us_ticker_fire_interrupt() {
 return;
}
function b44() {
 nullFunc_v(0); //@line 380
}
function _us_ticker_init() {
 return;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b1,_ccm_ctx_alloc,_gcm_ctx_alloc,_aes_ctx_alloc,_us_ticker_read,_us_ticker_get_info,b2,b3];
var FUNCTION_TABLE_ii = [b5,__ZN16SX1276_LoRaRadio6randomEv,__ZN16SX1276_LoRaRadio10get_statusEv,__ZN16LoRaWANInterface7connectEv,__ZN16LoRaWANInterface10disconnectEv,__ZN16LoRaWANInterface22add_link_check_requestEv,__ZN16LoRaWANInterface24enable_adaptive_datarateEv,__ZN16LoRaWANInterface25disable_adaptive_datarateEv,__ZN16LoRaWANInterface19remove_channel_planEv,___stdio_close,b6,b7,b8,b9,b10,b11];
var FUNCTION_TABLE_iii = [b13,__ZN16SX1276_LoRaRadio18check_rf_frequencyEj,__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE,__ZN16LoRaWANInterface7connectERK15lorawan_connect,__ZN16LoRaWANInterface12set_datarateEh,__ZN16LoRaWANInterface25set_confirmed_msg_retriesEh,__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan,__ZN16LoRaWANInterface16get_channel_planER16lora_channelplan,__ZN16LoRaWANInterface14remove_channelEh,__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t,__ZN16LoRaWANInterface16set_device_classE14device_class_t,__ZN7LoRaPHY9rx_configEP18rx_config_params_t,__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s,__ZN7LoRaPHY16get_alternate_DREh,__ZN7LoRaPHY14remove_channelEh,b14];
var FUNCTION_TABLE_iiii = [b16,__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh,__ZN7LoRaPHY19request_new_channelEaP16channel_params_t,__ZN7LoRaPHY25accept_tx_param_setup_reqEhh,__ZN7LoRaPHY18dl_channel_requestEhj,__ZN7LoRaPHY11add_channelEPK16channel_params_th,__ZN7LoRaPHY15apply_DR_offsetEaa,__ZNK7LoRaPHY25verify_frequency_for_bandEjh,_ccm_aes_setkey_wrap,_gcm_aes_setkey_wrap,_aes_setkey_enc_wrap,_aes_setkey_dec_wrap,___stdio_write,___stdio_seek,___stdout_write,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_get_pkcs_padding,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27
,b28,b29,b30];
var FUNCTION_TABLE_iiiii = [b32,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj,_aes_crypt_ecb_wrap,b33];
var FUNCTION_TABLE_iiiiii = [b35,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj,__ZN16LoRaWANInterface4sendEhPKhti,__ZN16LoRaWANInterface7receiveEhPhti,__ZN16LoRaWANInterface7receiveEPhtRhRi,__ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_,b36,b37];
var FUNCTION_TABLE_iiiiiii = [b39,__ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_,_aes_crypt_cbc_wrap,b40];
var FUNCTION_TABLE_iiiiiiii = [b42,_aes_crypt_ctr_wrap];
var FUNCTION_TABLE_v = [b44,___cxa_pure_virtual__wrapper,_us_ticker_init,_us_ticker_disable_interrupt,_us_ticker_clear_interrupt,_us_ticker_fire_interrupt,__ZL25default_terminate_handlerv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev];
var FUNCTION_TABLE_vi = [b46,__ZN16SX1276_LoRaRadio11radio_resetEv,__ZN16SX1276_LoRaRadio5sleepEv,__ZN16SX1276_LoRaRadio7standbyEv,__ZN16SX1276_LoRaRadio9start_cadEv,__ZN16SX1276_LoRaRadio4lockEv,__ZN16SX1276_LoRaRadio6unlockEv,__ZN16SX1276_LoRaRadioD2Ev,__ZN16SX1276_LoRaRadioD0Ev,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv,__ZN4mbed11InterruptInD2Ev,__ZN4mbed11InterruptInD0Ev,__ZN4mbed7TimeoutD2Ev,__ZN4mbed7TimeoutD0Ev,__ZN4mbed7Timeout7handlerEv,__ZN4mbed10TimerEventD2Ev,__ZN4mbed10TimerEventD0Ev,_mbed_trace_default_print,__ZN16LoRaWANInterface25remove_link_check_requestEv,__ZN16LoRaWANInterfaceD2Ev,__ZN16LoRaWANInterfaceD0Ev,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPv,__ZN4mbed8CallbackIFvPKhtsaEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPv,__ZN4mbed8CallbackIFvbEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPv,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv,__ZN7LoRaPHYD2Ev
,__ZN7LoRaPHYD0Ev,__ZN7LoRaPHY24restore_default_channelsEv,__ZN12LoRaPHYEU868D2Ev,__ZN12LoRaPHYEU868D0Ev,_ccm_ctx_free,_gcm_ctx_free,_aes_ctx_free,_us_ticker_set_interrupt,__ZN4mbed6TickerD2Ev,__ZN4mbed6TickerD0Ev,__ZN4mbed6Ticker7handlerEv,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb,__ZN16SX1276_LoRaRadio4sendEPhh__async_cb,__ZN16SX1276_LoRaRadio11rx_done_irqEv,__ZN16SX1276_LoRaRadio7receiveEj__async_cb,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_115,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_116,__ZN16SX1276_LoRaRadio15timeout_irq_isrEv,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_117,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_118,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_119,__ZN16SX1276_LoRaRadio6randomEv__async_cb,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_47
,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_43,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_44,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_46,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_45,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_42,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_124,__ZN16SX1276_LoRaRadioD2Ev__async_cb,__ZN16SX1276_LoRaRadioD2Ev__async_cb_347,__ZN16SX1276_LoRaRadioD2Ev__async_cb_341,__ZN16SX1276_LoRaRadioD2Ev__async_cb_346,__ZN16SX1276_LoRaRadioD2Ev__async_cb_342,__ZN16SX1276_LoRaRadioD2Ev__async_cb_345,__ZN16SX1276_LoRaRadioD2Ev__async_cb_343,__ZN16SX1276_LoRaRadioD2Ev__async_cb_344,__ZN16SX1276_LoRaRadioD2Ev__async_cb_353,__ZN16SX1276_LoRaRadioD2Ev__async_cb_352,__ZN16SX1276_LoRaRadioD2Ev__async_cb_351,__ZN16SX1276_LoRaRadioD2Ev__async_cb_350,__ZN16SX1276_LoRaRadioD2Ev__async_cb_349,__ZN16SX1276_LoRaRadioD2Ev__async_cb_348,__ZN16SX1276_LoRaRadioD0Ev__async_cb,__ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb,__ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_210,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_211,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_212,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_213,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb
,__ZN16SX1276_LoRaRadio11tx_done_irqEv,__ZN16SX1276_LoRaRadio8transmitEj__async_cb,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_278,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_279,__ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_86,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_85,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_84,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb,__ZN4mbed11InterruptInD2Ev__async_cb,__ZN4mbed11InterruptInD2Ev__async_cb_127,__ZN4mbed11InterruptInD0Ev__async_cb,__ZN4mbed11InterruptInD0Ev__async_cb_158,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_19,__ZN4mbed7TimeoutD2Ev__async_cb,__ZN4mbed7TimeoutD2Ev__async_cb_13,__ZN4mbed7TimeoutD0Ev__async_cb,__ZN4mbed7TimeoutD0Ev__async_cb_64,__ZN4mbed7Timeout7handlerEv__async_cb,__ZN4mbed7Timeout7handlerEv__async_cb_67,__ZN4mbed7Timeout7handlerEv__async_cb_65,__ZN4mbed7Timeout7handlerEv__async_cb_66,__ZN4mbed5TimerC2Ev__async_cb,__ZN4mbed5Timer5startEv__async_cb,__ZN4mbed5Timer7read_msEv__async_cb,__ZN4mbed10TimerEventD2Ev__async_cb,__ZN4mbed10TimerEvent3irqEj,__ZN4mbed10TimerEventC2Ev__async_cb,__ZN4mbed10TimerEvent3irqEj__async_cb
,__ZN6events10EventQueue6cancelEi__async_cb,_equeue_alloc__async_cb,_equeue_post__async_cb,_equeue_enqueue__async_cb,_equeue_cancel__async_cb,_mbed_trace_default_print__async_cb,_mbed_tracef__async_cb,_mbed_vtracef__async_cb,_mbed_vtracef__async_cb_324,_mbed_vtracef__async_cb_314,_mbed_vtracef__async_cb_315,_mbed_vtracef__async_cb_316,_mbed_vtracef__async_cb_323,_mbed_vtracef__async_cb_317,_mbed_vtracef__async_cb_322,_mbed_vtracef__async_cb_318,_mbed_vtracef__async_cb_319,_mbed_vtracef__async_cb_320,_mbed_vtracef__async_cb_321,__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE__async_cb,__ZN16LoRaWANInterface7connectEv__async_cb,__ZN16LoRaWANInterface7connectERK15lorawan_connect__async_cb,__ZN16LoRaWANInterface10disconnectEv__async_cb,__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan__async_cb,__ZN16LoRaWANInterface19remove_channel_planEv__async_cb,__ZN16LoRaWANInterface14remove_channelEh__async_cb,__ZN16LoRaWANInterface4sendEhPKhti__async_cb,__ZN16LoRaWANInterface7receiveEhPhti__async_cb,__ZN16LoRaWANInterface7receiveEPhtRhRi__async_cb,__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t__async_cb
,__ZN16LoRaWANInterface16set_device_classE14device_class_t__async_cb,__ZN16LoRaWANInterfaceD2Ev__async_cb,__ZN16LoRaWANInterfaceD0Ev__async_cb,__ZN12LoRaWANStackD2Ev__async_cb,__ZN12LoRaWANStackD2Ev__async_cb_306,__ZN12LoRaWANStackD2Ev__async_cb_307,__ZN12LoRaWANStackD2Ev__async_cb_309,__ZN12LoRaWANStackD2Ev__async_cb_308,__ZN12radio_eventsD2Ev__async_cb,__ZN12radio_eventsD2Ev__async_cb_330,__ZN12radio_eventsD2Ev__async_cb_331,__ZN12radio_eventsD2Ev__async_cb_332,__ZN12radio_eventsD2Ev__async_cb_333,__ZN12radio_eventsD2Ev__async_cb_334,__ZN12radio_eventsD2Ev__async_cb_335,__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb,__ZN12LoRaWANStack20tx_interrupt_handlerEv,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_362,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_363,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_364,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_365,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_366,__ZN12LoRaWANStack26rx_error_interrupt_handlerEv,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_367,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_368,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_369,__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_370,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_371
,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_372,__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_373,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_374,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_375,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_376,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_377,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_378,__ZN12LoRaWANStack20process_transmissionEv,__ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb,__ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb_384,__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_390,__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb,__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_391,__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_168,__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb,__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_169,__ZN12LoRaWANStack28process_transmission_timeoutEv,__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb,__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb_185,__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_201,__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb,__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_202,__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb,__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_206,__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_205,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_227,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_232,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_228
,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_231,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_229,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_230,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb_277,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb,__ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb__async_cb,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_89,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_88,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_90,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_87,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_91,__ZN12LoRaWANStack26process_status_check_stateEv__async_cb_122,__ZN12LoRaWANStack26process_status_check_stateEv__async_cb_121,__ZN12LoRaWANStack26process_status_check_stateEv__async_cb,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_111,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_104,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_114,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_105,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_110,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_106,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_113,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_107,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_109,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_108,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_112
,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_148,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_141,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_151,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_142,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_147,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_143,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_150,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_144,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_146,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_145,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_149,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_152,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_157,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_153,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_156,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_154,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_155,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_1,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb,__ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb,__ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb_33,__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_18,__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv
,__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_17,__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_16,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_35,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa__async_cb,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_337,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_340,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_339,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_338,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_336,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_300,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_305,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_301,__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_304,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_302,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_303,__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb_392,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_387,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_385,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_389,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_386,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_388
,__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb,__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_187,__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_186,__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_188,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_179,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_184,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_180,__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_183,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_181,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_182,__ZN12LoRaWANStack23process_connected_stateEv__async_cb,__ZN12LoRaWANStack23process_connected_stateEv__async_cb_208,__ZN12LoRaWANStack23process_connected_stateEv__async_cb_207,__ZN12LoRaWANStack23process_connected_stateEv__async_cb_209,__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_267,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv__async_cb,__ZN12LoRaWANStack20process_transmissionEv__async_cb,__ZN12LoRaWANStack20process_transmissionEv__async_cb_100,__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb,__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_75,__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb,__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_74,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_81,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_80,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb
,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_82,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_79,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_83,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_130,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_131,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_132,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_133,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_134,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_135,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_137,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_136,__ZN12LoRaWANStack7connectEv__async_cb,__ZN12LoRaWANStack7connectERK15lorawan_connect__async_cb,__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb,__ZN12LoRaWANStack16remove_a_channelEh__async_cb,__ZN12LoRaWANStack17drop_channel_listEv__async_cb,__ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb_36,__ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb,__ZN12LoRaWANStack9handle_rxEPhtRhRib__async_cb,__ZN12LoRaWANStack8shutdownEv__async_cb,__ZN12LoRaWANStack16set_device_classERK14device_class_t__async_cb,__ZN7LoRaMacD2Ev__async_cb,__ZN7LoRaMacD2Ev__async_cb_379,__ZN7LoRaMacD2Ev__async_cb_380,__ZN7LoRaMacD2Ev__async_cb_381,__ZN7LoRaMacD2Ev__async_cb_382,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_274,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_276,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_275
,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_273,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_272,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_271,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb,__ZN7LoRaMac15open_rx2_windowEv__async_cb_290,__ZN7LoRaMac15open_rx2_windowEv__async_cb_289,__ZN7LoRaMac15open_rx2_windowEv__async_cb,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_235,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_236,__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_266,__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb,__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_265,__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_264,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb,__ZN7LoRaMac21handle_retransmissionEv__async_cb,__ZN7LoRaMac21handle_retransmissionEv__async_cb_77,__ZN7LoRaMac21handle_retransmissionEv__async_cb_76,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_167,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_165,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_166,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb,__ZN7LoRaMac11schedule_txEv__async_cb,__ZN7LoRaMac11schedule_txEv__async_cb_129,__ZN7LoRaMac11schedule_txEv__async_cb_128,__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb,__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_123,__ZN7LoRaMac23message_integrity_checkEPKhtPhjPjS1___async_cb,__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_34,__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb
,__ZN7LoRaMac26on_ack_timeout_timer_eventEv,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_25,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_32,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_24,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_31,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_23,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_30,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_22,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_29,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_21,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_20,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_28,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_27,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_26,__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb,__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_15,__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_14,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_9,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_8,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_7,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_5,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_3,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_4,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_6,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_10,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_2,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_61,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_60
,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_59,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_58,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_57,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_56,__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_38,__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_41,__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_40,__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_39,__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb,__ZN7LoRaMac24continue_joining_processEv__async_cb,__ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb,__ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb_311,__ZN7LoRaMac15open_rx1_windowEv__async_cb_299,__ZN7LoRaMac15open_rx1_windowEv__async_cb_297,__ZN7LoRaMac15open_rx1_windowEv__async_cb_298,__ZN7LoRaMac15open_rx1_windowEv__async_cb,__ZN7LoRaMac18prepare_ongoing_txEhPKhthh__async_cb,__ZN7LoRaMac24get_max_possible_tx_sizeEh__async_cb,__ZN7LoRaMac15send_ongoing_txEv__async_cb,__ZN7LoRaMac15send_ongoing_txEv__async_cb_192,__ZN7LoRaMac16set_device_classERK14device_class_t__async_cb_198,__ZN7LoRaMac16set_device_classERK14device_class_t__async_cb_197,__ZN7LoRaMac16set_device_classERK14device_class_t__async_cb_200,__ZN7LoRaMac16set_device_classERK14device_class_t__async_cb_199,__ZN7LoRaMac16set_device_classERK14device_class_t__async_cb,__ZN7LoRaMac4joinEb__async_cb,__ZN7LoRaMac4joinEb__async_cb_270,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_244,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_246
,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_247,__ZN7LoRaMac23on_backoff_timer_expiryEv,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_243,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb,__ZN7LoRaMac15open_rx1_windowEv,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_242,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_237,__ZN7LoRaMac15open_rx2_windowEv,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_241,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_238,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_240,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_239,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_245,__ZN7LoRaMac10disconnectEv__async_cb_222,__ZN7LoRaMac10disconnectEv__async_cb_221,__ZN7LoRaMac10disconnectEv__async_cb_220,__ZN7LoRaMac10disconnectEv__async_cb_219,__ZN7LoRaMac10disconnectEv__async_cb,__ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb,__ZN7LoRaMac19remove_channel_planEv__async_cb,__ZN7LoRaMac21remove_single_channelEh__async_cb,__ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb,__ZN18LoRaMacChannelPlan11remove_planEv__async_cb,__ZN18LoRaMacChannelPlan11remove_planEv__async_cb_62,__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb,__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_68,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_325,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_326,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_327
,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_328,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_329,__ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb,__ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_269,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_285,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_284,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_282,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_283,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_286,__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_195,__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_194,__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb,__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_193,__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_196,__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb,__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_125,__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_126,__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb,__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_101,__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_102,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_92,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_93,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_94,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_95,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_96,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_97,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_98,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_99
,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_49,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_50,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_51,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_52,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_53,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_54,__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb,__ZN7LoRaPHY18dl_channel_requestEhj__async_cb,__ZN7LoRaPHY18dl_channel_requestEhj__async_cb_11,__ZN7LoRaPHY11add_channelEPK16channel_params_th__async_cb,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_359,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_360,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_233,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_234,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_287,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_288,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_291,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_292,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_189,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_190,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_191,__ZN7LoRaPHY13get_radio_rngEv__async_cb,__ZN7LoRaPHY13get_radio_rngEv__async_cb_170,__ZN7LoRaPHY13get_radio_rngEv__async_cb_171
,__ZN7LoRaPHY11handle_sendEPhh__async_cb,__ZN7LoRaPHY11handle_sendEPhh__async_cb_214,__ZN7LoRaPHY11handle_sendEPhh__async_cb_215,__ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb,__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb,__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_310,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_357,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_354,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_356,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_355,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_358,__ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb,_mbedtls_ccm_setkey__async_cb_139,_mbedtls_ccm_setkey__async_cb_138,_mbedtls_ccm_setkey__async_cb,_mbedtls_ccm_free__async_cb,_mbedtls_cipher_free__async_cb,_mbedtls_cipher_setup__async_cb,_mbedtls_cipher_setkey__async_cb,_mbedtls_cipher_setkey__async_cb_73,_mbedtls_cipher_update__async_cb,_mbedtls_cipher_update__async_cb_72,_mbedtls_cipher_update__async_cb_69,_mbedtls_cipher_update__async_cb_70,_mbedtls_cipher_update__async_cb_71,_ccm_aes_setkey_wrap__async_cb,_ccm_ctx_free__async_cb,_gcm_aes_setkey_wrap__async_cb,_gcm_ctx_free__async_cb
,_mbedtls_cipher_cmac_starts__async_cb,_mbedtls_cipher_cmac_update__async_cb_313,_mbedtls_cipher_cmac_update__async_cb_312,_mbedtls_cipher_cmac_update__async_cb,_mbedtls_cipher_cmac_finish__async_cb_296,_mbedtls_cipher_cmac_finish__async_cb,_mbedtls_gcm_setkey__async_cb_295,_mbedtls_gcm_setkey__async_cb_294,_mbedtls_gcm_setkey__async_cb_293,_mbedtls_gcm_setkey__async_cb,_mbedtls_gcm_update__async_cb,_mbedtls_gcm_free__async_cb,_ticker_set_handler__async_cb,_initialize__async_cb,_initialize__async_cb_159,_initialize__async_cb_164,_initialize__async_cb_163,_initialize__async_cb_160,_initialize__async_cb_161,_initialize__async_cb_162,_schedule_interrupt__async_cb,_schedule_interrupt__async_cb_172,_schedule_interrupt__async_cb_173,_schedule_interrupt__async_cb_174,_schedule_interrupt__async_cb_175,_schedule_interrupt__async_cb_176,_schedule_interrupt__async_cb_177,_ticker_remove_event__async_cb,_ticker_read_us__async_cb_203,_ticker_read_us__async_cb
,_mbed_assert_internal__async_cb,_mbed_die__async_cb_262,_mbed_die__async_cb_261,_mbed_die__async_cb_260,_mbed_die__async_cb_259,_mbed_die__async_cb_258,_mbed_die__async_cb_257,_mbed_die__async_cb_256,_mbed_die__async_cb_255,_mbed_die__async_cb_254,_mbed_die__async_cb_253,_mbed_die__async_cb_252,_mbed_die__async_cb_251,_mbed_die__async_cb_250,_mbed_die__async_cb_249,_mbed_die__async_cb_248,_mbed_die__async_cb,_mbed_error_printf__async_cb,_mbed_error_vfprintf__async_cb,_mbed_error_vfprintf__async_cb_281,_mbed_error_vfprintf__async_cb_280,_handle_interrupt_in__async_cb,_serial_putc__async_cb_383,_serial_putc__async_cb,__ZN4mbed6TickerD2Ev__async_cb,__ZN4mbed6TickerD2Ev__async_cb_37,__ZN4mbed6TickerD0Ev__async_cb,__ZN4mbed6TickerD0Ev__async_cb_55,__ZN4mbed6Ticker7handlerEv__async_cb,_invoke_ticker__async_cb_63
,_invoke_ticker__async_cb,_wait_ms__async_cb,__GLOBAL__sub_I_main_cpp__async_cb,_main__async_cb,_putc__async_cb_48,_putc__async_cb,___overflow__async_cb,_fflush__async_cb_217,_fflush__async_cb_216,_fflush__async_cb_218,_fflush__async_cb,___fflush_unlocked__async_cb,___fflush_unlocked__async_cb_178,_vfprintf__async_cb,_snprintf__async_cb,_vsnprintf__async_cb,_fputc__async_cb_140,_fputc__async_cb,_puts__async_cb,__ZL25default_terminate_handlerv__async_cb,__ZL25default_terminate_handlerv__async_cb_204,_abort_message__async_cb,_abort_message__async_cb_103,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_268,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb,___dynamic_cast__async_cb,___dynamic_cast__async_cb_361,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_12
,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,__ZSt11__terminatePFvvE__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_120,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_226,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_225,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_224,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_223,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_263,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,___cxa_can_catch__async_cb,___cxa_is_pointer_type__async_cb,b47,b48,b49,b50,b51,b52,b53,b54,b55,b56,b57,b58,b59
,b60,b61,b62,b63,b64,b65,b66,b67,b68,b69,b70,b71,b72,b73,b74,b75,b76,b77,b78,b79,b80,b81,b82,b83,b84,b85,b86,b87,b88,b89
,b90,b91,b92,b93,b94,b95,b96,b97,b98,b99,b100,b101,b102,b103,b104,b105,b106,b107,b108,b109,b110,b111,b112,b113,b114,b115,b116,b117,b118,b119
,b120,b121,b122,b123,b124,b125,b126,b127,b128,b129,b130,b131,b132,b133,b134,b135,b136,b137,b138,b139,b140,b141,b142,b143,b144,b145,b146,b147,b148,b149
,b150,b151,b152,b153,b154,b155,b156,b157,b158,b159,b160,b161,b162,b163,b164,b165,b166,b167,b168,b169,b170,b171,b172,b173,b174,b175,b176,b177,b178,b179
,b180,b181,b182,b183,b184,b185,b186,b187,b188,b189,b190,b191,b192,b193,b194,b195,b196,b197,b198,b199,b200,b201,b202,b203,b204,b205,b206,b207,b208,b209
,b210,b211,b212,b213,b214,b215,b216,b217,b218,b219,b220,b221,b222,b223,b224,b225,b226,b227,b228,b229,b230,b231,b232,b233,b234,b235,b236,b237,b238,b239
,b240,b241,b242,b243,b244,b245,b246,b247,b248,b249,b250,b251,b252,b253,b254,b255,b256,b257,b258,b259,b260,b261,b262,b263,b264,b265,b266,b267,b268,b269
,b270,b271,b272,b273,b274,b275,b276,b277,b278,b279,b280,b281,b282,b283,b284,b285,b286,b287,b288,b289,b290,b291,b292,b293,b294,b295,b296,b297,b298,b299
,b300,b301,b302,b303,b304,b305,b306,b307,b308,b309,b310,b311,b312,b313,b314,b315,b316,b317,b318,b319,b320,b321,b322,b323,b324,b325,b326,b327,b328,b329
,b330,b331,b332,b333,b334,b335,b336,b337,b338,b339,b340,b341,b342,b343,b344,b345,b346,b347,b348,b349,b350,b351,b352,b353,b354,b355,b356,b357,b358,b359
,b360,b361,b362,b363,b364,b365,b366,b367,b368,b369,b370,b371,b372,b373,b374,b375,b376,b377,b378,b379,b380,b381,b382,b383,b384,b385,b386,b387,b388,b389
,b390,b391,b392,b393,b394];
var FUNCTION_TABLE_vii = [b396,__ZN16SX1276_LoRaRadio10init_radioEP12radio_events,__ZN16SX1276_LoRaRadio7receiveEj,__ZN16SX1276_LoRaRadio11set_channelEj,__ZN16SX1276_LoRaRadio18set_public_networkEb,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvPKhtsaEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPvPKv,__ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb,__ZN4mbed8CallbackIFvbEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event,__ZN12LoRaWANStack25process_reception_timeoutEb,b397,b398,b399];
var FUNCTION_TABLE_viii = [b401,__ZN16SX1276_LoRaRadio4sendEPhh,__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh,__ZN7LoRaPHY13apply_cf_listEPKhh,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj,_add_pkcs_padding,b402,b403];
var FUNCTION_TABLE_viiii = [b405,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat,__ZN7LoRaPHY16set_last_tx_doneEhbj,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b406,b407];
var FUNCTION_TABLE_viiiii = [b409,__ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa,__ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa,__ZN12LoRaWANStack17process_receptionEPKhtsa];
var FUNCTION_TABLE_viiiiii = [b411,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];
var FUNCTION_TABLE_viiiiiiiiiiiiii = [b413,__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj];
var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b415,__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb];

  return { __GLOBAL__sub_I_main_cpp: __GLOBAL__sub_I_main_cpp, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_alloc_async_context: _emscripten_alloc_async_context, _emscripten_async_resume: _emscripten_async_resume, _emscripten_free_async_context: _emscripten_free_async_context, _emscripten_realloc_async_context: _emscripten_realloc_async_context, _fflush: _fflush, _free: _free, _handle_interrupt_in: _handle_interrupt_in, _handle_lora_downlink: _handle_lora_downlink, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _invoke_ticker: _invoke_ticker, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memset: _memset, _pthread_mutex_lock: _pthread_mutex_lock, _pthread_mutex_unlock: _pthread_mutex_unlock, _sbrk: _sbrk, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setAsync: setAsync, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real___GLOBAL__sub_I_main_cpp = asm["__GLOBAL__sub_I_main_cpp"]; asm["__GLOBAL__sub_I_main_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_main_cpp.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__emscripten_alloc_async_context = asm["_emscripten_alloc_async_context"]; asm["_emscripten_alloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_alloc_async_context.apply(null, arguments);
};

var real__emscripten_async_resume = asm["_emscripten_async_resume"]; asm["_emscripten_async_resume"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_async_resume.apply(null, arguments);
};

var real__emscripten_free_async_context = asm["_emscripten_free_async_context"]; asm["_emscripten_free_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_free_async_context.apply(null, arguments);
};

var real__emscripten_realloc_async_context = asm["_emscripten_realloc_async_context"]; asm["_emscripten_realloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_realloc_async_context.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__handle_interrupt_in = asm["_handle_interrupt_in"]; asm["_handle_interrupt_in"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_interrupt_in.apply(null, arguments);
};

var real__handle_lora_downlink = asm["_handle_lora_downlink"]; asm["_handle_lora_downlink"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_lora_downlink.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__invoke_ticker = asm["_invoke_ticker"]; asm["_invoke_ticker"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__invoke_ticker.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_lock.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setAsync = asm["setAsync"]; asm["setAsync"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setAsync.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var __GLOBAL__sub_I_main_cpp = Module["__GLOBAL__sub_I_main_cpp"] = asm["__GLOBAL__sub_I_main_cpp"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_alloc_async_context = Module["_emscripten_alloc_async_context"] = asm["_emscripten_alloc_async_context"];
var _emscripten_async_resume = Module["_emscripten_async_resume"] = asm["_emscripten_async_resume"];
var _emscripten_free_async_context = Module["_emscripten_free_async_context"] = asm["_emscripten_free_async_context"];
var _emscripten_realloc_async_context = Module["_emscripten_realloc_async_context"] = asm["_emscripten_realloc_async_context"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _handle_interrupt_in = Module["_handle_interrupt_in"] = asm["_handle_interrupt_in"];
var _handle_lora_downlink = Module["_handle_lora_downlink"] = asm["_handle_lora_downlink"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _invoke_ticker = Module["_invoke_ticker"] = asm["_invoke_ticker"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memset = Module["_memset"] = asm["_memset"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setAsync = Module["setAsync"] = asm["setAsync"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = flush_NO_FILESYSTEM;
    if (flush) flush(0);
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}






//# sourceMappingURL=lorawan-abp.js.map