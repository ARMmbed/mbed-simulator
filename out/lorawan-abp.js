// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [function($0, $1, $2, $3, $4, $5) { window.MbedJSHal.lora.sendFsk($0, $1, $2, $3, $4, $5); },
 function($0, $1, $2, $3, $4, $5) { window.MbedJSHal.lora.sendLoRa($0, $1, $2, $3, $4, $5); },
 function() { return Math.random() * 0x8000000 | 0; },
 function($0, $1) { MbedJSHal.gpio.write($0, $1); },
 function($0) { window.MbedJSHal.lora.init($0); },
 function($0, $1) { MbedJSHal.gpio.init_in($0, $1, 3); },
 function($0, $1) { MbedJSHal.gpio.init_out($0, $1, 0); },
 function($0, $1, $2) { MbedJSHal.gpio.init_out($0, $1, $2); },
 function($0, $1, $2, $3, $4) { MbedJSHal.gpio.init_inout($0, $1, $2, $3, $4); },
 function($0, $1) { MbedJSHal.gpio.irq_init($0, $1); },
 function($0, $1) { MbedJSHal.gpio.irq_free($0); },
 function($0) { window.MbedJSHal.timers.ticker_detach($0); },
 function($0, $1) { window.MbedJSHal.timers.ticker_setup($0, $1); },
 function($0, $1, $2) { window.MbedJSHal.sht31.init($0, $1, $2); }];

function _emscripten_asm_const_iii(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}

function _emscripten_asm_const_iiiiii(code, a0, a1, a2, a3, a4) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4);
}

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
  return ASM_CONSTS[code](a0, a1, a2);
}

function _emscripten_asm_const_i(code) {
  return ASM_CONSTS[code]();
}

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iiiiiii(code, a0, a1, a2, a3, a4, a5) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5);
}




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 24240;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_main_cpp() } });


memoryInitializer = "lorawan-abp.js.mem";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      var fflush = Module["_fflush"];
      if (fflush) fflush(0);
      var printChar = ___syscall146.printChar;
      if (!printChar) return;
      var buffers = ___syscall146.buffers;
      if (buffers[1].length) printChar(1, 10);
      if (buffers[2].length) printChar(2, 10);
    }function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffers) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___unlock() {}

   

  function _abort() {
      Module['abort']();
    }

   

   

  
  var ___async_cur_frame=0; 

  var _emscripten_asm_const_int=true;

   

   

  
  
  var ___async=0;
  
  var ___async_unwind=1;
  
  var ___async_retval=STATICTOP; STATICTOP += 16;; 
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_sleep(ms) {
      Module['setAsync'](); // tell the scheduler that we have a callback on hold
      Browser.safeSetTimeout(_emscripten_async_resume, ms);
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }



   

  var _llvm_ceil_f64=Math_ceil;

  var _llvm_floor_f64=Math_floor;

  function _llvm_trap() {
      abort('trap!');
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

  function _pthread_cond_init() { return 0; }

  function _pthread_cond_signal() { return 0; }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_mutex_init() {}

   

   

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    } 
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



var debug_table_i = ["0", "_ccm_ctx_alloc", "_gcm_ctx_alloc", "_aes_ctx_alloc", "_us_ticker_read", "_us_ticker_get_info", "0", "0"];
var debug_table_ii = ["0", "__ZN16SX1276_LoRaRadio6randomEv", "__ZN16SX1276_LoRaRadio10get_statusEv", "__ZN16LoRaWANInterface7connectEv", "__ZN16LoRaWANInterface10disconnectEv", "__ZN16LoRaWANInterface22add_link_check_requestEv", "__ZN16LoRaWANInterface24enable_adaptive_datarateEv", "__ZN16LoRaWANInterface25disable_adaptive_datarateEv", "__ZN16LoRaWANInterface19remove_channel_planEv", "___stdio_close", "0", "0", "0", "0", "0", "0"];
var debug_table_iii = ["0", "__ZN16SX1276_LoRaRadio18check_rf_frequencyEj", "__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE", "__ZN16LoRaWANInterface7connectERK15lorawan_connect", "__ZN16LoRaWANInterface12set_datarateEh", "__ZN16LoRaWANInterface25set_confirmed_msg_retriesEh", "__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan", "__ZN16LoRaWANInterface16get_channel_planER16lora_channelplan", "__ZN16LoRaWANInterface14remove_channelEh", "__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t", "__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s", "__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s", "__ZN7LoRaPHY25accept_tx_param_setup_reqEP20tx_param_setup_req_s", "__ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s", "__ZN7LoRaPHY16get_alternate_DREh", "__ZN7LoRaPHY14remove_channelEh", "__ZN7LoRaPHY16verify_frequencyEj", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiii = ["0", "__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa", "__ZN7LoRaPHY11add_channelEP16channel_params_th", "__ZN7LoRaPHY15apply_DR_offsetEaa", "_ccm_aes_setkey_wrap", "_gcm_aes_setkey_wrap", "_aes_setkey_enc_wrap", "_aes_setkey_dec_wrap", "___stdio_write", "___stdio_seek", "___stdout_write", "_sn_write", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv", "_get_pkcs_padding", "0"];
var debug_table_iiiii = ["0", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj", "_aes_crypt_ecb_wrap", "0"];
var debug_table_iiiiii = ["0", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj", "__ZN16LoRaWANInterface4sendEhPKhti", "__ZN16LoRaWANInterface7receiveEhPhti", "__ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_", "0", "0", "0"];
var debug_table_iiiiiii = ["0", "__ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_", "_aes_crypt_cbc_wrap", "0"];
var debug_table_v = ["0", "___cxa_pure_virtual", "_us_ticker_init", "_us_ticker_disable_interrupt", "_us_ticker_clear_interrupt", "_us_ticker_fire_interrupt", "__ZL25default_terminate_handlerv", "__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev"];
var debug_table_vi = ["0", "__ZN16SX1276_LoRaRadio11radio_resetEv", "__ZN16SX1276_LoRaRadio5sleepEv", "__ZN16SX1276_LoRaRadio7standbyEv", "__ZN16SX1276_LoRaRadio9start_cadEv", "__ZN16SX1276_LoRaRadio4lockEv", "__ZN16SX1276_LoRaRadio6unlockEv", "__ZN16SX1276_LoRaRadioD2Ev", "__ZN16SX1276_LoRaRadioD0Ev", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv", "__ZN4mbed11InterruptInD2Ev", "__ZN4mbed11InterruptInD0Ev", "__ZN4mbed7TimeoutD2Ev", "__ZN4mbed7TimeoutD0Ev", "__ZN4mbed7Timeout7handlerEv", "__ZN4mbed10TimerEventD2Ev", "__ZN4mbed10TimerEventD0Ev", "__ZN16LoRaWANInterface25remove_link_check_requestEv", "__ZN16LoRaWANInterfaceD2Ev", "__ZN16LoRaWANInterfaceD0Ev", "__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv", "__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv", "__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv", "__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv", "__ZN4mbed8CallbackIFvPhtsaEE13function_dtorINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPv", "__ZN7LoRaPHYD2Ev", "__ZN7LoRaPHYD0Ev", "__ZN7LoRaPHY24restore_default_channelsEv", "__ZN12LoRaPHYEU868D2Ev", "__ZN12LoRaPHYEU868D0Ev", "_ccm_ctx_free", "_gcm_ctx_free", "_aes_ctx_free", "_us_ticker_set_interrupt", "__ZN4mbed10TimerEvent3irqEj", "__ZN4mbed6TickerD2Ev", "__ZN4mbed6TickerD0Ev", "__ZN4mbed6Ticker7handlerEv", "__ZN10__cxxabiv116__shim_type_infoD2Ev", "__ZN10__cxxabiv117__class_type_infoD0Ev", "__ZNK10__cxxabiv116__shim_type_info5noop1Ev", "__ZNK10__cxxabiv116__shim_type_info5noop2Ev", "__ZN10__cxxabiv120__si_class_type_infoD0Ev", "__ZN10__cxxabiv121__vmi_class_type_infoD0Ev", "__ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb", "__ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb_43", "__ZN16SX1276_LoRaRadio11radio_resetEv__async_cb", "__ZN16SX1276_LoRaRadio5sleepEv__async_cb_62", "__ZN16SX1276_LoRaRadio5sleepEv__async_cb", "__ZN16SX1276_LoRaRadio5sleepEv__async_cb_63", "__ZN16SX1276_LoRaRadio7standbyEv__async_cb_71", "__ZN16SX1276_LoRaRadio7standbyEv__async_cb_70", "__ZN16SX1276_LoRaRadio7standbyEv__async_cb_72", "__ZN16SX1276_LoRaRadio7standbyEv__async_cb", "__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb_362", "__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb_361", "__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb", "__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_366", "__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_365", "__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_364", "__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb", "__ZN16SX1276_LoRaRadio4sendEPhh__async_cb", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_404", "__ZN16SX1276_LoRaRadio11rx_done_irqEv", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_395", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_396", "__ZN16SX1276_LoRaRadio15timeout_irq_isrEv", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_397", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_398", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_399", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_403", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_406", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_402", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_401", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_405", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_400", "__ZN16SX1276_LoRaRadio11set_channelEj__async_cb", "__ZN16SX1276_LoRaRadio6randomEv__async_cb", "__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh__async_cb_492", "__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh__async_cb", "__ZN16SX1276_LoRaRadio18set_public_networkEb__async_cb_244", "__ZN16SX1276_LoRaRadio18set_public_networkEb__async_cb", "__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh__async_cb_268", "__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh__async_cb", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_278", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_277", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_276", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_279", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_275", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_284", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_280", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_281", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_283", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_274", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_282", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_273", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_272", "__ZN16SX1276_LoRaRadio9start_cadEv__async_cb", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_462", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_459", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_461", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_463", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_460", "__ZN16SX1276_LoRaRadioD2Ev__async_cb", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_89", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_83", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_88", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_84", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_87", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_85", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_86", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_95", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_94", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_93", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_92", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_91", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_90", "__ZN16SX1276_LoRaRadioD0Ev__async_cb", "__ZN16SX1276_LoRaRadio18set_low_power_modeEv__async_cb", "__ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb_200", "__ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb", "__ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_356", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_352", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_353", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_354", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_355", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_27", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_26", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_28", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_25", "__ZN16SX1276_LoRaRadio11tx_done_irqEv", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_23", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_24", "__ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb", "_handle_lora_downlink__async_cb", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_76", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_75", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_74", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb", "__ZN4mbed11InterruptInD2Ev__async_cb", "__ZN4mbed11InterruptInD2Ev__async_cb_96", "__ZN4mbed11InterruptInD0Ev__async_cb", "__ZN4mbed11InterruptInD0Ev__async_cb_97", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_289", "__ZN4mbed7TimeoutD2Ev__async_cb", "__ZN4mbed7TimeoutD2Ev__async_cb_313", "__ZN4mbed7TimeoutD0Ev__async_cb", "__ZN4mbed7TimeoutD0Ev__async_cb_337", "__ZN4mbed7Timeout7handlerEv__async_cb_205", "__ZN4mbed7Timeout7handlerEv__async_cb", "__ZN4mbed5TimerC2Ev__async_cb", "__ZN4mbed5Timer5startEv__async_cb", "__ZN4mbed5Timer7read_msEv__async_cb", "__ZN4mbed10TimerEventD2Ev__async_cb", "__ZN4mbed10TimerEventC2Ev__async_cb", "__ZN4mbed10TimerEvent3irqEj__async_cb", "__ZN6events10EventQueue6cancelEi__async_cb", "_equeue_post__async_cb", "_equeue_enqueue__async_cb", "_equeue_cancel__async_cb", "__ZN16LoRaWANInterface7connectEv__async_cb", "__ZN16LoRaWANInterface4sendEhPKhti__async_cb", "__ZN16LoRaWANInterface4sendEhPKhti__async_cb_20", "__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb", "__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_198", "__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_199", "__ZN12LoRaWANStackC2Ev__async_cb", "__ZN12LoRaWANStackC2Ev__async_cb_201", "__ZN12LoRaWANStackC2Ev__async_cb_202", "__ZN12LoRaWANStackC2Ev__async_cb_203", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_166", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_173", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_165", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_164", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_169", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_159", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_172", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_160", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_168", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_161", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_171", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_162", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_167", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_163", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_170", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_186", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_185", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_189", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_182", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_191", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_183", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_188", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_184", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_190", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_187", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_113", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_120", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_117", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_112", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_116", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_111", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_115", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_108", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_119", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_109", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_114", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_110", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_118", "__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb", "__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_217", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_226", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_225", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_224", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_232", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_206", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_237", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_227", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_207", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_231", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_208", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_236", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_223", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_222", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_221", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_220", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_219", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_209", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_230", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_210", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_235", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_218", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_216", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_211", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_229", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_212", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_234", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_215", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_213", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_228", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_214", "__ZN12LoRaWANStack18lora_state_machineEv__async_cb_233", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_245", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_246", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_249", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_247", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_248", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_479", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_480", "__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_483", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_481", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_482", "__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_420", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_419", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb", "__ZN12LoRaWANStack17send_frame_to_macEv__async_cb_360", "__ZN12LoRaWANStack17send_frame_to_macEv__async_cb_359", "__ZN12LoRaWANStack17send_frame_to_macEv__async_cb_358", "__ZN12LoRaWANStack17send_frame_to_macEv__async_cb", "__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_56", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_58", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_55", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_54", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_53", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_57", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_52", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_51", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_59", "__ZN12LoRaWANStack9handle_txEhPKhth__async_cb", "__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb", "__ZN12LoRaWANStack17get_lorawan_stackEv__async_cb", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb", "__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_180", "__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_179", "__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb", "__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_181", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_123", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_124", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_125", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_126", "__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_127", "__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb", "__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb_102", "__ZN12LoRaWANStack17drop_channel_listEv__async_cb", "__ZN12LoRaWANStack17drop_channel_listEv__async_cb_77", "__ZN12LoRaWANStack16remove_a_channelEh__async_cb", "__ZN12LoRaWANStack16remove_a_channelEh__async_cb_73", "__ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan__async_cb", "__ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb", "__ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb_334", "__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_310", "__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_311", "__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb", "__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_312", "__ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb", "__ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb_295", "__ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb", "__ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb_288", "__ZN12LoRaWANStack22set_link_check_requestEv__async_cb", "__ZN12LoRaWANStack22set_link_check_requestEv__async_cb_266", "__ZN12LoRaWANStack8shutdownEv__async_cb", "__ZN7LoRaMacD2Ev__async_cb_487", "__ZN7LoRaMacD2Ev__async_cb", "__ZN12radio_eventsD2Ev__async_cb", "__ZN12radio_eventsD2Ev__async_cb_464", "__ZN12radio_eventsD2Ev__async_cb_465", "__ZN12radio_eventsD2Ev__async_cb_466", "__ZN12radio_eventsD2Ev__async_cb_467", "__ZN12radio_eventsD2Ev__async_cb_468", "__ZN12radio_eventsD2Ev__async_cb_469", "__ZN14lorawan_timersD2Ev__async_cb", "__ZN14lorawan_timersD2Ev__async_cb_455", "__ZN14lorawan_timersD2Ev__async_cb_456", "__ZN14lorawan_timersD2Ev__async_cb_457", "__ZN14lorawan_timersD2Ev__async_cb_458", "__ZN7LoRaMac16on_radio_tx_doneEv", "__ZN7LoRaMac14handle_tx_doneEv__async_cb", "__ZN7LoRaMac14handle_tx_doneEv__async_cb_421", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_411", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_416", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_410", "__ZN7LoRaMac25on_rx_window2_timer_eventEv", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_417", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_418", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_415", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_414", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_413", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb", "__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_412", "__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv", "__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_391", "__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_390", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_44", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb", "__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_99", "__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_101", "__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb", "__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_98", "__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_100", "__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_121", "__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb", "__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_122", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_132", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_145", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_151", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_140", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_143", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_139", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_138", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_142", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_141", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_137", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_136", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_135", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_148", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_131", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_147", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_130", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_146", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_129", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_150", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_149", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_134", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_133", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_144", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_174", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_175", "__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_178", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_176", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_177", "__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb_204", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb", "__ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa__async_cb", "__ZN7LoRaMac21prepare_rx_done_abortEv__async_cb", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv", "__ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_33", "__ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_34", "__ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_32", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_45", "__ZN7LoRaMac17on_radio_rx_errorEv", "__ZN7LoRaMac15handle_rx_errorEv__async_cb", "__ZN7LoRaMac15handle_rx_errorEv__async_cb_60", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_64", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_66", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_68", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_65", "__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_67", "__ZN7LoRaMac19on_radio_rx_timeoutEv", "__ZN7LoRaMac17handle_rx_timeoutEv__async_cb", "__ZN7LoRaMac17handle_rx_timeoutEv__async_cb_357", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_370", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_373", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_375", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_372", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_374", "__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_371", "__ZN7LoRaMac19on_radio_tx_timeoutEv", "__ZN7LoRaMac17handle_tx_timeoutEv__async_cb", "__ZN7LoRaMac17handle_tx_timeoutEv__async_cb_369", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_386", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_387", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_388", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_389", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv", "__ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb", "__ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb_407", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_433", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_432", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_440", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_431", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_439", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_429", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_438", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_422", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_437", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_423", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_427", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_428", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_426", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_430", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_436", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_435", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_424", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_434", "__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_425", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_451", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_454", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_452", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_453", "__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_450", "__ZN7LoRaMac11schedule_txEv__async_cb", "__ZN7LoRaMac11schedule_txEv__async_cb_470", "__ZN7LoRaMac11schedule_txEv__async_cb_476", "__ZN7LoRaMac11schedule_txEv__async_cb_471", "__ZN7LoRaMac11schedule_txEv__async_cb_472", "__ZN7LoRaMac11schedule_txEv__async_cb_473", "__ZN7LoRaMac11schedule_txEv__async_cb_475", "__ZN7LoRaMac11schedule_txEv__async_cb_478", "__ZN7LoRaMac11schedule_txEv__async_cb_474", "__ZN7LoRaMac11schedule_txEv__async_cb_477", "__ZN7LoRaMac21send_frame_on_channelEh__async_cb_485", "__ZN7LoRaMac21send_frame_on_channelEh__async_cb", "__ZN7LoRaMac21send_frame_on_channelEh__async_cb_486", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_240", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_238", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_239", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb", "__ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb", "__ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb_250", "__ZN7LoRaMac18handle_ack_timeoutEv__async_cb", "__ZN7LoRaMac18handle_ack_timeoutEv__async_cb_271", "__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb", "__ZN7LoRaMac25on_rx_window1_timer_eventEv", "__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb_286", "__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb_287", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_291", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_294", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_293", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_290", "__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_292", "__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb", "__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb_308", "__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb_309", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_323", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_324", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_325", "__ZN7LoRaMac34handle_mac_state_check_timer_eventEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_322", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb", "__ZN7LoRaMac29handle_delayed_tx_timer_eventEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_321", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_314", "__ZN7LoRaMac22handle_rx1_timer_eventEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_320", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_315", "__ZN7LoRaMac22handle_rx2_timer_eventEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_319", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_316", "__ZN7LoRaMac18handle_ack_timeoutEv", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_318", "__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_317", "__ZN7LoRaMac10disconnectEv__async_cb_342", "__ZN7LoRaMac10disconnectEv__async_cb_341", "__ZN7LoRaMac10disconnectEv__async_cb_340", "__ZN7LoRaMac10disconnectEv__async_cb_339", "__ZN7LoRaMac10disconnectEv__async_cb_338", "__ZN7LoRaMac10disconnectEv__async_cb", "__ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t__async_cb_82", "__ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t__async_cb", "__ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb", "__ZN7LoRaMac19remove_channel_planEv__async_cb", "__ZN7LoRaMac21remove_single_channelEh__async_cb", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_152", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_153", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_158", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_157", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_155", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_156", "__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_154", "__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb", "__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb_196", "__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb_197", "__ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t__async_cb", "__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_15", "__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_16", "__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb", "__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_17", "__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_18", "__ZN7LoRaMac14handle_tx_doneEv", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_1", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_2", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_3", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_4", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_5", "__ZN7LoRaMac15handle_rx_errorEv", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_6", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_7", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_8", "__ZN7LoRaMac17handle_tx_timeoutEv", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_9", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_10", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_11", "__ZN7LoRaMac17handle_rx_timeoutEv", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_12", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_13", "__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_14", "__ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb", "__ZN18LoRaMacChannelPlan11remove_planEv__async_cb", "__ZN18LoRaMacChannelPlan11remove_planEv__async_cb_69", "__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb", "__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_61", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_343", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_344", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_345", "__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_346", "__Z11compute_micPKhtS0_jhjPj__async_cb_106", "__Z11compute_micPKhtS0_jhjPj__async_cb_105", "__Z11compute_micPKhtS0_jhjPj__async_cb_103", "__Z11compute_micPKhtS0_jhjPj__async_cb", "__Z11compute_micPKhtS0_jhjPj__async_cb_104", "__Z11compute_micPKhtS0_jhjPj__async_cb_107", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb_80", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb_79", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb_78", "__Z22compute_join_frame_micPKhtS0_Pj__async_cb_81", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_39", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_38", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_36", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_37", "__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_35", "__ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft__async_cb", "__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb", "__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb_285", "__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb", "__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb_269", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_326", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_327", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_328", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_329", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_330", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_331", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_332", "__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_333", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_296", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_297", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_298", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_299", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_300", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_301", "__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb", "__ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s__async_cb", "__ZN7LoRaPHY11add_channelEP16channel_params_th__async_cb", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_192", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_193", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_48", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_49", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_40", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_41", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_408", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_409", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_383", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_384", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_385", "__ZN7LoRaPHY13get_radio_rngEv__async_cb", "__ZN7LoRaPHY13get_radio_rngEv__async_cb_367", "__ZN7LoRaPHY13get_radio_rngEv__async_cb_368", "__ZN7LoRaPHY11handle_sendEPhh__async_cb_350", "__ZN7LoRaPHY11handle_sendEPhh__async_cb", "__ZN7LoRaPHY11handle_sendEPhh__async_cb_348", "__ZN7LoRaPHY11handle_sendEPhh__async_cb_349", "__ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb", "__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb", "__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_22", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_442", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_444", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_443", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_445", "__ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb", "_mbedtls_ccm_setkey__async_cb_336", "_mbedtls_ccm_setkey__async_cb_335", "_mbedtls_ccm_setkey__async_cb", "_mbedtls_ccm_free__async_cb", "_mbedtls_cipher_free__async_cb", "_mbedtls_cipher_setup__async_cb", "_mbedtls_cipher_setkey__async_cb", "_mbedtls_cipher_setkey__async_cb_195", "_mbedtls_cipher_update__async_cb", "_mbedtls_cipher_update__async_cb_243", "_mbedtls_cipher_update__async_cb_241", "_mbedtls_cipher_update__async_cb_242", "_ccm_aes_setkey_wrap__async_cb", "_ccm_ctx_free__async_cb", "_gcm_aes_setkey_wrap__async_cb", "_gcm_ctx_free__async_cb", "_mbedtls_cipher_cmac_starts__async_cb", "_mbedtls_cipher_cmac_update__async_cb_30", "_mbedtls_cipher_cmac_update__async_cb_29", "_mbedtls_cipher_cmac_update__async_cb", "_mbedtls_cipher_cmac_finish__async_cb_21", "_mbedtls_cipher_cmac_finish__async_cb", "_mbedtls_gcm_setkey__async_cb_448", "_mbedtls_gcm_setkey__async_cb_447", "_mbedtls_gcm_setkey__async_cb_446", "_mbedtls_gcm_setkey__async_cb", "_mbedtls_gcm_update__async_cb", "_mbedtls_gcm_free__async_cb", "_ticker_set_handler__async_cb", "_initialize__async_cb", "_initialize__async_cb_377", "_initialize__async_cb_382", "_initialize__async_cb_381", "_initialize__async_cb_378", "_initialize__async_cb_379", "_initialize__async_cb_380", "_schedule_interrupt__async_cb", "_schedule_interrupt__async_cb_302", "_schedule_interrupt__async_cb_303", "_schedule_interrupt__async_cb_304", "_schedule_interrupt__async_cb_305", "_schedule_interrupt__async_cb_306", "_schedule_interrupt__async_cb_307", "_ticker_remove_event__async_cb", "_ticker_read_us__async_cb_347", "_ticker_read_us__async_cb", "_mbed_assert_internal__async_cb", "_mbed_die__async_cb_265", "_mbed_die__async_cb_264", "_mbed_die__async_cb_263", "_mbed_die__async_cb_262", "_mbed_die__async_cb_261", "_mbed_die__async_cb_260", "_mbed_die__async_cb_259", "_mbed_die__async_cb_258", "_mbed_die__async_cb_257", "_mbed_die__async_cb_256", "_mbed_die__async_cb_255", "_mbed_die__async_cb_254", "_mbed_die__async_cb_253", "_mbed_die__async_cb_252", "_mbed_die__async_cb_251", "_mbed_die__async_cb", "_mbed_error_printf__async_cb", "_mbed_error_printf__async_cb_267", "_handle_interrupt_in__async_cb", "_serial_putc__async_cb_128", "_serial_putc__async_cb", "__ZN4mbed6TickerD2Ev__async_cb", "__ZN4mbed6TickerD2Ev__async_cb_42", "__ZN4mbed6TickerD0Ev__async_cb", "__ZN4mbed6TickerD0Ev__async_cb_47", "__ZN4mbed6Ticker7handlerEv__async_cb", "_invoke_ticker__async_cb_31", "_invoke_ticker__async_cb", "_wait_ms__async_cb", "__GLOBAL__sub_I_main_cpp__async_cb", "__GLOBAL__sub_I_main_cpp__async_cb_363", "_putc__async_cb_46", "_putc__async_cb", "___overflow__async_cb", "_fflush__async_cb_393", "_fflush__async_cb_392", "_fflush__async_cb_394", "_fflush__async_cb", "___fflush_unlocked__async_cb", "___fflush_unlocked__async_cb_376", "_vfprintf__async_cb", "_vsnprintf__async_cb", "_printf__async_cb", "_putchar__async_cb", "_fputc__async_cb_449", "_fputc__async_cb", "__ZL25default_terminate_handlerv__async_cb", "__ZL25default_terminate_handlerv__async_cb_484", "_abort_message__async_cb", "_abort_message__async_cb_493", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_50", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb", "___dynamic_cast__async_cb", "___dynamic_cast__async_cb_194", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_270", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv", "__ZSt11__terminatePFvvE__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_441", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_491", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_490", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_489", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_488", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_19", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "___cxa_can_catch__async_cb", "___cxa_is_pointer_type__async_cb
var debug_table_vii = ["0", "__ZN16SX1276_LoRaRadio10init_radioEP12radio_events", "__ZN16SX1276_LoRaRadio7receiveEj", "__ZN16SX1276_LoRaRadio11set_channelEj", "__ZN16SX1276_LoRaRadio18set_public_networkEb", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_", "__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_", "__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_", "__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_", "__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvPhtsaEE13function_moveINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPvPKv", "__ZN7LoRaPHY16set_last_tx_doneEP24set_band_txdone_params_t", "__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event", "__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t", "__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t", "__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t", "__ZN12LoRaWANStack23mlme_indication_handlerEP25loramac_mlme_indication_t", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_viii = ["0", "__ZN16SX1276_LoRaRadio4sendEPhh", "__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj", "_add_pkcs_padding", "0", "0", "0"];
var debug_table_viiii = ["0", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat", "__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "0", "0", "0"];
var debug_table_viiiii = ["0", "__ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa", "__ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t", "__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZN7LoRaMac16on_radio_rx_doneEPhtsa", "__ZN7LoRaMac14handle_rx_doneEPhtsa"];
var debug_table_viiiiii = ["0", "__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];
var debug_table_viiiiiiiiiiiiii = ["0", "__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj"];
var debug_table_viiiiiiiiiiiiiii = ["0", "__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb"];
function nullFunc_i(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: i: " + debug_table_i[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  i: " + debug_table_i[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  v: " + debug_table_v[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  i: " + debug_table_i[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  v: " + debug_table_v[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  v: " + debug_table_v[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  v: " + debug_table_v[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14) {
  try {
    Module["dynCall_viiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiiiiiiiiiiiii": invoke_viiiiiiiiiiiiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_pure_virtual": ___cxa_pure_virtual, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "_abort": _abort, "_emscripten_asm_const_i": _emscripten_asm_const_i, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "_emscripten_asm_const_iiiiii": _emscripten_asm_const_iiiiii, "_emscripten_asm_const_iiiiiii": _emscripten_asm_const_iiiiiii, "_emscripten_get_now": _emscripten_get_now, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_sleep": _emscripten_sleep, "_gettimeofday": _gettimeofday, "_llvm_ceil_f64": _llvm_ceil_f64, "_llvm_floor_f64": _llvm_floor_f64, "_llvm_trap": _llvm_trap, "_pthread_cond_init": _pthread_cond_init, "_pthread_cond_signal": _pthread_cond_signal, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_mutex_init": _pthread_mutex_init, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "flush_NO_FILESYSTEM": flush_NO_FILESYSTEM, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8, "___async": ___async, "___async_unwind": ___async_unwind, "___async_retval": ___async_retval, "___async_cur_frame": ___async_cur_frame };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;
  var ___async=env.___async|0;
  var ___async_unwind=env.___async_unwind|0;
  var ___async_retval=env.___async_retval|0;
  var ___async_cur_frame=env.___async_cur_frame|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var invoke_i=env.invoke_i;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall146=env.___syscall146;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var _abort=env._abort;
  var _emscripten_asm_const_i=env._emscripten_asm_const_i;
  var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
  var _emscripten_asm_const_iii=env._emscripten_asm_const_iii;
  var _emscripten_asm_const_iiii=env._emscripten_asm_const_iiii;
  var _emscripten_asm_const_iiiiii=env._emscripten_asm_const_iiiiii;
  var _emscripten_asm_const_iiiiiii=env._emscripten_asm_const_iiiiiii;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _emscripten_sleep=env._emscripten_sleep;
  var _gettimeofday=env._gettimeofday;
  var _llvm_ceil_f64=env._llvm_ceil_f64;
  var _llvm_floor_f64=env._llvm_floor_f64;
  var _llvm_trap=env._llvm_trap;
  var _pthread_cond_init=env._pthread_cond_init;
  var _pthread_cond_signal=env._pthread_cond_signal;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_mutex_init=env._pthread_mutex_init;
  var _pthread_once=env._pthread_once;
  var _pthread_setspecific=env._pthread_setspecific;
  var flush_NO_FILESYSTEM=env.flush_NO_FILESYSTEM;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_345($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$096$be = 0, $$2 = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $136 = 0, $139 = 0, $14 = 0, $150 = 0, $151 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $233 = 0, $236 = 0, $24 = 0, $241 = 0, $249 = 0, $26 = 0, $268 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $349 = 0, $350 = 0, $36 = 0, $38 = 0, $387 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $463 = 0, $467 = 0, $471 = 0, $474 = 0, $48 = 0, $480 = 0, $483 = 0, $484 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $572 = 0, $58 = 0, $594 = 0, $6 = 0, $60 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12599
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12601
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12603
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12605
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12607
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12609
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12611
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12613
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12615
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12617
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12619
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12621
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 12623
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 12625
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 12627
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 12629
 $32 = HEAP8[$0 + 64 >> 0] | 0; //@line 12631
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 12633
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 12635
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 12637
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 12639
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 12641
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 12643
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 12645
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 12647
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 12649
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 12651
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 12653
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 12655
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 12657
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 12659
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 12661
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 12663
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 12665
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 12667
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 12669
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 12671
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 12673
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 12675
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 12677
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 12679
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 12681
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 12683
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 12685
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 12687
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 12689
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 12691
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 12693
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 12695
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 12697
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 12699
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 12701
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 12703
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 12705
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 12707
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 12709
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 12711
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 12713
 $116 = HEAP8[$0 + 232 >> 0] | 0; //@line 12715
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 12717
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 12719
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 12721
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 12723
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 12725
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 12727
 $130 = HEAP8[$0 + 260 >> 0] | 0; //@line 12729
 $132 = HEAP8[$0 + 261 >> 0] | 0; //@line 12731
 $134 = HEAP32[$0 + 264 >> 2] | 0; //@line 12733
 $136 = HEAP32[$0 + 268 >> 2] | 0; //@line 12735
 if (HEAP8[___async_retval >> 0] & 1) {
  HEAP8[$84 >> 0] = HEAP8[$58 >> 0] | 0; //@line 12741
  HEAP8[$94 >> 0] = HEAP8[$74 >> 0] | 0; //@line 12743
  HEAPF32[$106 >> 2] = +(HEAPU8[13548 + (HEAPU8[$82 >> 0] | 0) >> 0] | 0); //@line 12749
  $572 = HEAP8[$6 >> 0] | 0; //@line 12751
  if (($572 & 255) < (-128 - (HEAP8[$14 >> 0] | 0) & 255)) {
   HEAP8[$6 >> 0] = $572 + 1 << 24 >> 24; //@line 12758
   HEAP8[($572 & 255) + ($104 + 4) >> 0] = 9; //@line 12759
   HEAP8[$120 >> 0] = 1; //@line 12760
   $$2 = 0; //@line 12761
  } else {
   $$2 = -1e3; //@line 12763
  }
 } else {
  $$2 = $12; //@line 12766
 }
 $$0$be = $32; //@line 12768
 $$096$be = $$2; //@line 12768
 L6 : while (1) {
  if (($$0$be & 255) >= ($132 & 255)) {
   label = 32; //@line 12772
   break;
  }
  $139 = $$0$be + 1 << 24 >> 24; //@line 12776
  switch (HEAP8[$128 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 12781
    break L6;
    break;
   }
  case 5:
   {
    label = 9; //@line 12786
    break L6;
    break;
   }
  case 7:
   {
    label = 14; //@line 12791
    break L6;
    break;
   }
  case 9:
   {
    label = 19; //@line 12796
    break L6;
    break;
   }
  case 10:
   {
    label = 28; //@line 12801
    break L6;
    break;
   }
  case 2:
   {
    HEAP32[$20 >> 2] = 0; //@line 12806
    HEAP8[$30 >> 0] = HEAP8[$128 + ($139 & 255) >> 0] | 0; //@line 12811
    HEAP8[$2 >> 0] = HEAP8[$128 + ($$0$be + 2 & 255) >> 0] | 0; //@line 12816
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 12817
    continue L6;
    break;
   }
  case 4:
   {
    $233 = $$0$be + 2 << 24 >> 24; //@line 12822
    $236 = HEAP8[$128 + ($139 & 255) >> 0] | 0; //@line 12825
    HEAP8[$110 >> 0] = $236; //@line 12826
    HEAP16[$102 >> 1] = 1 << ($236 & 255); //@line 12830
    $241 = HEAP8[$6 >> 0] | 0; //@line 12832
    if (($241 & 255) >= (-128 - (HEAP8[$14 >> 0] | 0) & 255)) {
     $$0$be = $233; //@line 12836
     $$096$be = -1e3; //@line 12836
     continue L6;
    }
    HEAP8[$6 >> 0] = $241 + 1 << 24 >> 24; //@line 12842
    HEAP8[($241 & 255) + ($104 + 4) >> 0] = 4; //@line 12843
    HEAP8[$120 >> 0] = 1; //@line 12844
    $$0$be = $233; //@line 12845
    $$096$be = 0; //@line 12845
    continue L6;
    break;
   }
  case 6:
   {
    $349 = HEAP8[$6 >> 0] | 0; //@line 12851
    $350 = $349 & 255; //@line 12852
    if (((-128 - (HEAP8[$14 >> 0] | 0) & 255) + -2 | 0) <= ($350 | 0)) {
     $$0$be = $139; //@line 12858
     $$096$be = -1e3; //@line 12858
     continue L6;
    }
    HEAP8[$104 + 4 + $350 >> 0] = 6; //@line 12863
    HEAP8[($349 + 1 & 255) + ($104 + 4) >> 0] = -1; //@line 12867
    HEAP8[$6 >> 0] = $349 + 3 << 24 >> 24; //@line 12869
    HEAP8[($349 + 2 & 255) + ($104 + 4) >> 0] = $116; //@line 12872
    HEAP8[$120 >> 0] = 1; //@line 12873
    $$0$be = $139; //@line 12874
    $$096$be = 0; //@line 12874
    continue L6;
    break;
   }
  case 8:
   {
    $463 = $$0$be + 2 << 24 >> 24; //@line 12879
    $467 = HEAP8[$128 + ($139 & 255) >> 0] & 15; //@line 12883
    $471 = ($467 + ($467 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 12888
    HEAP32[$44 >> 2] = $471; //@line 12889
    HEAP32[$52 >> 2] = $471 + 1e3; //@line 12891
    $474 = HEAP8[$6 >> 0] | 0; //@line 12893
    if (($474 & 255) >= (-128 - (HEAP8[$14 >> 0] | 0) & 255)) {
     $$0$be = $463; //@line 12897
     $$096$be = -1e3; //@line 12897
     continue L6;
    }
    HEAP8[$6 >> 0] = $474 + 1 << 24 >> 24; //@line 12903
    HEAP8[($474 & 255) + ($104 + 4) >> 0] = 8; //@line 12904
    HEAP8[$36 >> 0] = 1; //@line 12905
    HEAP8[$120 >> 0] = 1; //@line 12906
    $$0$be = $463; //@line 12907
    $$096$be = 0; //@line 12907
    continue L6;
    break;
   }
  default:
   {
    $$0$be = $139; //@line 12912
    $$096$be = -1013; //@line 12912
    continue L6;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$108 >> 0] = 0; //@line 12918
  HEAP8[$66 >> 0] = 0; //@line 12919
  HEAP8[$54 >> 0] = 0; //@line 12920
  HEAP8[$90 >> 0] = 0; //@line 12921
  $150 = $139 & 255; //@line 12922
  $151 = $150 + -1 | 0; //@line 12923
  HEAP32[$134 >> 2] = $128 + $151; //@line 12925
  HEAP8[$126 >> 0] = $64 - $151; //@line 12928
  HEAP8[$96 >> 0] = HEAP8[$114 >> 0] | 0; //@line 12930
  HEAP8[$80 >> 0] = HEAP8[$84 >> 0] | 0; //@line 12932
  HEAP8[$68 >> 0] = HEAP8[$72 >> 0] | 0; //@line 12934
  HEAP8[$46 >> 0] = HEAP8[$56 >> 0] | 0; //@line 12936
  HEAP8[$22 >> 0] = HEAP8[$40 >> 0] | 0; //@line 12938
  $162 = HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] | 0; //@line 12941
  $ReallocAsyncCtx = _emscripten_realloc_async_context(272) | 0; //@line 12942
  $163 = FUNCTION_TABLE_iiiiiii[$162 & 3]($124, $118, $108, $66, $54, $90) | 0; //@line 12943
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 576; //@line 12946
   $164 = $ReallocAsyncCtx + 4 | 0; //@line 12947
   HEAP32[$164 >> 2] = $2; //@line 12948
   $165 = $ReallocAsyncCtx + 8 | 0; //@line 12949
   HEAP32[$165 >> 2] = $4; //@line 12950
   $166 = $ReallocAsyncCtx + 12 | 0; //@line 12951
   HEAP32[$166 >> 2] = $6; //@line 12952
   $167 = $ReallocAsyncCtx + 16 | 0; //@line 12953
   HEAP32[$167 >> 2] = $8; //@line 12954
   $168 = $ReallocAsyncCtx + 20 | 0; //@line 12955
   HEAP32[$168 >> 2] = $10; //@line 12956
   $169 = $ReallocAsyncCtx + 24 | 0; //@line 12957
   HEAP32[$169 >> 2] = $$096$be; //@line 12958
   $170 = $ReallocAsyncCtx + 28 | 0; //@line 12959
   HEAP32[$170 >> 2] = $14; //@line 12960
   $171 = $ReallocAsyncCtx + 32 | 0; //@line 12961
   HEAP32[$171 >> 2] = $16; //@line 12962
   $172 = $ReallocAsyncCtx + 36 | 0; //@line 12963
   HEAP32[$172 >> 2] = $18; //@line 12964
   $173 = $ReallocAsyncCtx + 40 | 0; //@line 12965
   HEAP32[$173 >> 2] = $20; //@line 12966
   $174 = $ReallocAsyncCtx + 44 | 0; //@line 12967
   HEAP32[$174 >> 2] = $22; //@line 12968
   $175 = $ReallocAsyncCtx + 48 | 0; //@line 12969
   HEAP32[$175 >> 2] = $24; //@line 12970
   $176 = $ReallocAsyncCtx + 52 | 0; //@line 12971
   HEAP32[$176 >> 2] = $26; //@line 12972
   $177 = $ReallocAsyncCtx + 56 | 0; //@line 12973
   HEAP32[$177 >> 2] = $28; //@line 12974
   $178 = $ReallocAsyncCtx + 60 | 0; //@line 12975
   HEAP32[$178 >> 2] = $30; //@line 12976
   $179 = $ReallocAsyncCtx + 64 | 0; //@line 12977
   HEAP32[$179 >> 2] = $34; //@line 12978
   $180 = $ReallocAsyncCtx + 68 | 0; //@line 12979
   HEAP32[$180 >> 2] = $36; //@line 12980
   $181 = $ReallocAsyncCtx + 72 | 0; //@line 12981
   HEAP32[$181 >> 2] = $38; //@line 12982
   $182 = $ReallocAsyncCtx + 76 | 0; //@line 12983
   HEAP32[$182 >> 2] = $40; //@line 12984
   $183 = $ReallocAsyncCtx + 80 | 0; //@line 12985
   HEAP32[$183 >> 2] = $42; //@line 12986
   $184 = $ReallocAsyncCtx + 84 | 0; //@line 12987
   HEAP32[$184 >> 2] = $44; //@line 12988
   $185 = $ReallocAsyncCtx + 88 | 0; //@line 12989
   HEAP32[$185 >> 2] = $46; //@line 12990
   $186 = $ReallocAsyncCtx + 92 | 0; //@line 12991
   HEAP32[$186 >> 2] = $48; //@line 12992
   $187 = $ReallocAsyncCtx + 96 | 0; //@line 12993
   HEAP32[$187 >> 2] = $50; //@line 12994
   $188 = $ReallocAsyncCtx + 100 | 0; //@line 12995
   HEAP32[$188 >> 2] = $52; //@line 12996
   $189 = $ReallocAsyncCtx + 104 | 0; //@line 12997
   HEAP32[$189 >> 2] = $54; //@line 12998
   $190 = $ReallocAsyncCtx + 108 | 0; //@line 12999
   HEAP32[$190 >> 2] = $56; //@line 13000
   $191 = $ReallocAsyncCtx + 112 | 0; //@line 13001
   HEAP32[$191 >> 2] = $58; //@line 13002
   $192 = $ReallocAsyncCtx + 116 | 0; //@line 13003
   HEAP32[$192 >> 2] = $60; //@line 13004
   $193 = $ReallocAsyncCtx + 120 | 0; //@line 13005
   HEAP32[$193 >> 2] = $62; //@line 13006
   $194 = $ReallocAsyncCtx + 124 | 0; //@line 13007
   HEAP32[$194 >> 2] = $64; //@line 13008
   $195 = $ReallocAsyncCtx + 128 | 0; //@line 13009
   HEAP32[$195 >> 2] = $66; //@line 13010
   $196 = $ReallocAsyncCtx + 132 | 0; //@line 13011
   HEAP32[$196 >> 2] = $68; //@line 13012
   $197 = $ReallocAsyncCtx + 136 | 0; //@line 13013
   HEAP32[$197 >> 2] = $70; //@line 13014
   $198 = $ReallocAsyncCtx + 140 | 0; //@line 13015
   HEAP32[$198 >> 2] = $72; //@line 13016
   $199 = $ReallocAsyncCtx + 144 | 0; //@line 13017
   HEAP32[$199 >> 2] = $74; //@line 13018
   $200 = $ReallocAsyncCtx + 148 | 0; //@line 13019
   HEAP32[$200 >> 2] = $76; //@line 13020
   $201 = $ReallocAsyncCtx + 152 | 0; //@line 13021
   HEAP32[$201 >> 2] = $78; //@line 13022
   $202 = $ReallocAsyncCtx + 156 | 0; //@line 13023
   HEAP32[$202 >> 2] = $80; //@line 13024
   $203 = $ReallocAsyncCtx + 160 | 0; //@line 13025
   HEAP32[$203 >> 2] = $82; //@line 13026
   $204 = $ReallocAsyncCtx + 164 | 0; //@line 13027
   HEAP32[$204 >> 2] = $84; //@line 13028
   $205 = $ReallocAsyncCtx + 168 | 0; //@line 13029
   HEAP32[$205 >> 2] = $86; //@line 13030
   $206 = $ReallocAsyncCtx + 172 | 0; //@line 13031
   HEAP32[$206 >> 2] = $88; //@line 13032
   $207 = $ReallocAsyncCtx + 176 | 0; //@line 13033
   HEAP32[$207 >> 2] = $90; //@line 13034
   $208 = $ReallocAsyncCtx + 180 | 0; //@line 13035
   HEAP32[$208 >> 2] = $150; //@line 13036
   $209 = $ReallocAsyncCtx + 184 | 0; //@line 13037
   HEAP32[$209 >> 2] = $92; //@line 13038
   $210 = $ReallocAsyncCtx + 188 | 0; //@line 13039
   HEAP32[$210 >> 2] = $94; //@line 13040
   $211 = $ReallocAsyncCtx + 192 | 0; //@line 13041
   HEAP32[$211 >> 2] = $96; //@line 13042
   $212 = $ReallocAsyncCtx + 196 | 0; //@line 13043
   HEAP32[$212 >> 2] = $98; //@line 13044
   $213 = $ReallocAsyncCtx + 200 | 0; //@line 13045
   HEAP32[$213 >> 2] = $100; //@line 13046
   $214 = $ReallocAsyncCtx + 204 | 0; //@line 13047
   HEAP32[$214 >> 2] = $102; //@line 13048
   $215 = $ReallocAsyncCtx + 208 | 0; //@line 13049
   HEAP32[$215 >> 2] = $104; //@line 13050
   $216 = $ReallocAsyncCtx + 212 | 0; //@line 13051
   HEAP32[$216 >> 2] = $106; //@line 13052
   $217 = $ReallocAsyncCtx + 216 | 0; //@line 13053
   HEAP32[$217 >> 2] = $108; //@line 13054
   $218 = $ReallocAsyncCtx + 220 | 0; //@line 13055
   HEAP32[$218 >> 2] = $110; //@line 13056
   $219 = $ReallocAsyncCtx + 224 | 0; //@line 13057
   HEAP32[$219 >> 2] = $112; //@line 13058
   $220 = $ReallocAsyncCtx + 228 | 0; //@line 13059
   HEAP32[$220 >> 2] = $114; //@line 13060
   $221 = $ReallocAsyncCtx + 232 | 0; //@line 13061
   HEAP8[$221 >> 0] = $116; //@line 13062
   $222 = $ReallocAsyncCtx + 236 | 0; //@line 13063
   HEAP32[$222 >> 2] = $118; //@line 13064
   $223 = $ReallocAsyncCtx + 240 | 0; //@line 13065
   HEAP32[$223 >> 2] = $120; //@line 13066
   $224 = $ReallocAsyncCtx + 244 | 0; //@line 13067
   HEAP32[$224 >> 2] = $122; //@line 13068
   $225 = $ReallocAsyncCtx + 248 | 0; //@line 13069
   HEAP32[$225 >> 2] = $124; //@line 13070
   $226 = $ReallocAsyncCtx + 252 | 0; //@line 13071
   HEAP32[$226 >> 2] = $126; //@line 13072
   $227 = $ReallocAsyncCtx + 256 | 0; //@line 13073
   HEAP32[$227 >> 2] = $128; //@line 13074
   $228 = $ReallocAsyncCtx + 260 | 0; //@line 13075
   HEAP8[$228 >> 0] = $130; //@line 13076
   $229 = $ReallocAsyncCtx + 261 | 0; //@line 13077
   HEAP8[$229 >> 0] = $132; //@line 13078
   $230 = $ReallocAsyncCtx + 264 | 0; //@line 13079
   HEAP32[$230 >> 2] = $134; //@line 13080
   $231 = $ReallocAsyncCtx + 268 | 0; //@line 13081
   HEAP32[$231 >> 2] = $136; //@line 13082
   sp = STACKTOP; //@line 13083
   return;
  }
  HEAP8[___async_retval >> 0] = $163; //@line 13087
  ___async_unwind = 0; //@line 13088
  HEAP32[$ReallocAsyncCtx >> 2] = 576; //@line 13089
  $164 = $ReallocAsyncCtx + 4 | 0; //@line 13090
  HEAP32[$164 >> 2] = $2; //@line 13091
  $165 = $ReallocAsyncCtx + 8 | 0; //@line 13092
  HEAP32[$165 >> 2] = $4; //@line 13093
  $166 = $ReallocAsyncCtx + 12 | 0; //@line 13094
  HEAP32[$166 >> 2] = $6; //@line 13095
  $167 = $ReallocAsyncCtx + 16 | 0; //@line 13096
  HEAP32[$167 >> 2] = $8; //@line 13097
  $168 = $ReallocAsyncCtx + 20 | 0; //@line 13098
  HEAP32[$168 >> 2] = $10; //@line 13099
  $169 = $ReallocAsyncCtx + 24 | 0; //@line 13100
  HEAP32[$169 >> 2] = $$096$be; //@line 13101
  $170 = $ReallocAsyncCtx + 28 | 0; //@line 13102
  HEAP32[$170 >> 2] = $14; //@line 13103
  $171 = $ReallocAsyncCtx + 32 | 0; //@line 13104
  HEAP32[$171 >> 2] = $16; //@line 13105
  $172 = $ReallocAsyncCtx + 36 | 0; //@line 13106
  HEAP32[$172 >> 2] = $18; //@line 13107
  $173 = $ReallocAsyncCtx + 40 | 0; //@line 13108
  HEAP32[$173 >> 2] = $20; //@line 13109
  $174 = $ReallocAsyncCtx + 44 | 0; //@line 13110
  HEAP32[$174 >> 2] = $22; //@line 13111
  $175 = $ReallocAsyncCtx + 48 | 0; //@line 13112
  HEAP32[$175 >> 2] = $24; //@line 13113
  $176 = $ReallocAsyncCtx + 52 | 0; //@line 13114
  HEAP32[$176 >> 2] = $26; //@line 13115
  $177 = $ReallocAsyncCtx + 56 | 0; //@line 13116
  HEAP32[$177 >> 2] = $28; //@line 13117
  $178 = $ReallocAsyncCtx + 60 | 0; //@line 13118
  HEAP32[$178 >> 2] = $30; //@line 13119
  $179 = $ReallocAsyncCtx + 64 | 0; //@line 13120
  HEAP32[$179 >> 2] = $34; //@line 13121
  $180 = $ReallocAsyncCtx + 68 | 0; //@line 13122
  HEAP32[$180 >> 2] = $36; //@line 13123
  $181 = $ReallocAsyncCtx + 72 | 0; //@line 13124
  HEAP32[$181 >> 2] = $38; //@line 13125
  $182 = $ReallocAsyncCtx + 76 | 0; //@line 13126
  HEAP32[$182 >> 2] = $40; //@line 13127
  $183 = $ReallocAsyncCtx + 80 | 0; //@line 13128
  HEAP32[$183 >> 2] = $42; //@line 13129
  $184 = $ReallocAsyncCtx + 84 | 0; //@line 13130
  HEAP32[$184 >> 2] = $44; //@line 13131
  $185 = $ReallocAsyncCtx + 88 | 0; //@line 13132
  HEAP32[$185 >> 2] = $46; //@line 13133
  $186 = $ReallocAsyncCtx + 92 | 0; //@line 13134
  HEAP32[$186 >> 2] = $48; //@line 13135
  $187 = $ReallocAsyncCtx + 96 | 0; //@line 13136
  HEAP32[$187 >> 2] = $50; //@line 13137
  $188 = $ReallocAsyncCtx + 100 | 0; //@line 13138
  HEAP32[$188 >> 2] = $52; //@line 13139
  $189 = $ReallocAsyncCtx + 104 | 0; //@line 13140
  HEAP32[$189 >> 2] = $54; //@line 13141
  $190 = $ReallocAsyncCtx + 108 | 0; //@line 13142
  HEAP32[$190 >> 2] = $56; //@line 13143
  $191 = $ReallocAsyncCtx + 112 | 0; //@line 13144
  HEAP32[$191 >> 2] = $58; //@line 13145
  $192 = $ReallocAsyncCtx + 116 | 0; //@line 13146
  HEAP32[$192 >> 2] = $60; //@line 13147
  $193 = $ReallocAsyncCtx + 120 | 0; //@line 13148
  HEAP32[$193 >> 2] = $62; //@line 13149
  $194 = $ReallocAsyncCtx + 124 | 0; //@line 13150
  HEAP32[$194 >> 2] = $64; //@line 13151
  $195 = $ReallocAsyncCtx + 128 | 0; //@line 13152
  HEAP32[$195 >> 2] = $66; //@line 13153
  $196 = $ReallocAsyncCtx + 132 | 0; //@line 13154
  HEAP32[$196 >> 2] = $68; //@line 13155
  $197 = $ReallocAsyncCtx + 136 | 0; //@line 13156
  HEAP32[$197 >> 2] = $70; //@line 13157
  $198 = $ReallocAsyncCtx + 140 | 0; //@line 13158
  HEAP32[$198 >> 2] = $72; //@line 13159
  $199 = $ReallocAsyncCtx + 144 | 0; //@line 13160
  HEAP32[$199 >> 2] = $74; //@line 13161
  $200 = $ReallocAsyncCtx + 148 | 0; //@line 13162
  HEAP32[$200 >> 2] = $76; //@line 13163
  $201 = $ReallocAsyncCtx + 152 | 0; //@line 13164
  HEAP32[$201 >> 2] = $78; //@line 13165
  $202 = $ReallocAsyncCtx + 156 | 0; //@line 13166
  HEAP32[$202 >> 2] = $80; //@line 13167
  $203 = $ReallocAsyncCtx + 160 | 0; //@line 13168
  HEAP32[$203 >> 2] = $82; //@line 13169
  $204 = $ReallocAsyncCtx + 164 | 0; //@line 13170
  HEAP32[$204 >> 2] = $84; //@line 13171
  $205 = $ReallocAsyncCtx + 168 | 0; //@line 13172
  HEAP32[$205 >> 2] = $86; //@line 13173
  $206 = $ReallocAsyncCtx + 172 | 0; //@line 13174
  HEAP32[$206 >> 2] = $88; //@line 13175
  $207 = $ReallocAsyncCtx + 176 | 0; //@line 13176
  HEAP32[$207 >> 2] = $90; //@line 13177
  $208 = $ReallocAsyncCtx + 180 | 0; //@line 13178
  HEAP32[$208 >> 2] = $150; //@line 13179
  $209 = $ReallocAsyncCtx + 184 | 0; //@line 13180
  HEAP32[$209 >> 2] = $92; //@line 13181
  $210 = $ReallocAsyncCtx + 188 | 0; //@line 13182
  HEAP32[$210 >> 2] = $94; //@line 13183
  $211 = $ReallocAsyncCtx + 192 | 0; //@line 13184
  HEAP32[$211 >> 2] = $96; //@line 13185
  $212 = $ReallocAsyncCtx + 196 | 0; //@line 13186
  HEAP32[$212 >> 2] = $98; //@line 13187
  $213 = $ReallocAsyncCtx + 200 | 0; //@line 13188
  HEAP32[$213 >> 2] = $100; //@line 13189
  $214 = $ReallocAsyncCtx + 204 | 0; //@line 13190
  HEAP32[$214 >> 2] = $102; //@line 13191
  $215 = $ReallocAsyncCtx + 208 | 0; //@line 13192
  HEAP32[$215 >> 2] = $104; //@line 13193
  $216 = $ReallocAsyncCtx + 212 | 0; //@line 13194
  HEAP32[$216 >> 2] = $106; //@line 13195
  $217 = $ReallocAsyncCtx + 216 | 0; //@line 13196
  HEAP32[$217 >> 2] = $108; //@line 13197
  $218 = $ReallocAsyncCtx + 220 | 0; //@line 13198
  HEAP32[$218 >> 2] = $110; //@line 13199
  $219 = $ReallocAsyncCtx + 224 | 0; //@line 13200
  HEAP32[$219 >> 2] = $112; //@line 13201
  $220 = $ReallocAsyncCtx + 228 | 0; //@line 13202
  HEAP32[$220 >> 2] = $114; //@line 13203
  $221 = $ReallocAsyncCtx + 232 | 0; //@line 13204
  HEAP8[$221 >> 0] = $116; //@line 13205
  $222 = $ReallocAsyncCtx + 236 | 0; //@line 13206
  HEAP32[$222 >> 2] = $118; //@line 13207
  $223 = $ReallocAsyncCtx + 240 | 0; //@line 13208
  HEAP32[$223 >> 2] = $120; //@line 13209
  $224 = $ReallocAsyncCtx + 244 | 0; //@line 13210
  HEAP32[$224 >> 2] = $122; //@line 13211
  $225 = $ReallocAsyncCtx + 248 | 0; //@line 13212
  HEAP32[$225 >> 2] = $124; //@line 13213
  $226 = $ReallocAsyncCtx + 252 | 0; //@line 13214
  HEAP32[$226 >> 2] = $126; //@line 13215
  $227 = $ReallocAsyncCtx + 256 | 0; //@line 13216
  HEAP32[$227 >> 2] = $128; //@line 13217
  $228 = $ReallocAsyncCtx + 260 | 0; //@line 13218
  HEAP8[$228 >> 0] = $130; //@line 13219
  $229 = $ReallocAsyncCtx + 261 | 0; //@line 13220
  HEAP8[$229 >> 0] = $132; //@line 13221
  $230 = $ReallocAsyncCtx + 264 | 0; //@line 13222
  HEAP32[$230 >> 2] = $134; //@line 13223
  $231 = $ReallocAsyncCtx + 268 | 0; //@line 13224
  HEAP32[$231 >> 2] = $136; //@line 13225
  sp = STACKTOP; //@line 13226
  return;
 } else if ((label | 0) == 9) {
  $249 = HEAP8[$128 + ($139 & 255) >> 0] | 0; //@line 13232
  HEAP8[$88 >> 0] = ($249 & 255) >>> 4 & 7; //@line 13237
  HEAP8[$100 >> 0] = $249 & 15; //@line 13239
  $268 = $$0$be + 5 << 24 >> 24; //@line 13253
  HEAP32[$78 >> 2] = (HEAPU8[$128 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$128 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$128 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 13261
  $278 = HEAP32[(HEAP32[$76 >> 2] | 0) + 40 >> 2] | 0; //@line 13264
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(268) | 0; //@line 13265
  $279 = FUNCTION_TABLE_iii[$278 & 31]($124, $92) | 0; //@line 13266
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 577; //@line 13269
   $280 = $ReallocAsyncCtx2 + 4 | 0; //@line 13270
   HEAP32[$280 >> 2] = $2; //@line 13271
   $281 = $ReallocAsyncCtx2 + 8 | 0; //@line 13272
   HEAP32[$281 >> 2] = $4; //@line 13273
   $282 = $ReallocAsyncCtx2 + 12 | 0; //@line 13274
   HEAP32[$282 >> 2] = $6; //@line 13275
   $283 = $ReallocAsyncCtx2 + 16 | 0; //@line 13276
   HEAP32[$283 >> 2] = $8; //@line 13277
   $284 = $ReallocAsyncCtx2 + 20 | 0; //@line 13278
   HEAP32[$284 >> 2] = $10; //@line 13279
   $285 = $ReallocAsyncCtx2 + 24 | 0; //@line 13280
   HEAP32[$285 >> 2] = $16; //@line 13281
   $286 = $ReallocAsyncCtx2 + 28 | 0; //@line 13282
   HEAP32[$286 >> 2] = $14; //@line 13283
   $287 = $ReallocAsyncCtx2 + 32 | 0; //@line 13284
   HEAP32[$287 >> 2] = $18; //@line 13285
   $288 = $ReallocAsyncCtx2 + 36 | 0; //@line 13286
   HEAP32[$288 >> 2] = $20; //@line 13287
   $289 = $ReallocAsyncCtx2 + 40 | 0; //@line 13288
   HEAP32[$289 >> 2] = $22; //@line 13289
   $290 = $ReallocAsyncCtx2 + 44 | 0; //@line 13290
   HEAP32[$290 >> 2] = $24; //@line 13291
   $291 = $ReallocAsyncCtx2 + 48 | 0; //@line 13292
   HEAP32[$291 >> 2] = $26; //@line 13293
   $292 = $ReallocAsyncCtx2 + 52 | 0; //@line 13294
   HEAP32[$292 >> 2] = $28; //@line 13295
   $293 = $ReallocAsyncCtx2 + 56 | 0; //@line 13296
   HEAP32[$293 >> 2] = $30; //@line 13297
   $294 = $ReallocAsyncCtx2 + 60 | 0; //@line 13298
   HEAP32[$294 >> 2] = $34; //@line 13299
   $295 = $ReallocAsyncCtx2 + 64 | 0; //@line 13300
   HEAP32[$295 >> 2] = $36; //@line 13301
   $296 = $ReallocAsyncCtx2 + 68 | 0; //@line 13302
   HEAP32[$296 >> 2] = $38; //@line 13303
   $297 = $ReallocAsyncCtx2 + 72 | 0; //@line 13304
   HEAP32[$297 >> 2] = $40; //@line 13305
   $298 = $ReallocAsyncCtx2 + 76 | 0; //@line 13306
   HEAP32[$298 >> 2] = $42; //@line 13307
   $299 = $ReallocAsyncCtx2 + 80 | 0; //@line 13308
   HEAP32[$299 >> 2] = $44; //@line 13309
   $300 = $ReallocAsyncCtx2 + 84 | 0; //@line 13310
   HEAP32[$300 >> 2] = $46; //@line 13311
   $301 = $ReallocAsyncCtx2 + 88 | 0; //@line 13312
   HEAP32[$301 >> 2] = $48; //@line 13313
   $302 = $ReallocAsyncCtx2 + 92 | 0; //@line 13314
   HEAP32[$302 >> 2] = $50; //@line 13315
   $303 = $ReallocAsyncCtx2 + 96 | 0; //@line 13316
   HEAP32[$303 >> 2] = $52; //@line 13317
   $304 = $ReallocAsyncCtx2 + 100 | 0; //@line 13318
   HEAP32[$304 >> 2] = $54; //@line 13319
   $305 = $ReallocAsyncCtx2 + 104 | 0; //@line 13320
   HEAP32[$305 >> 2] = $56; //@line 13321
   $306 = $ReallocAsyncCtx2 + 108 | 0; //@line 13322
   HEAP32[$306 >> 2] = $58; //@line 13323
   $307 = $ReallocAsyncCtx2 + 112 | 0; //@line 13324
   HEAP32[$307 >> 2] = $60; //@line 13325
   $308 = $ReallocAsyncCtx2 + 116 | 0; //@line 13326
   HEAP32[$308 >> 2] = $62; //@line 13327
   $309 = $ReallocAsyncCtx2 + 120 | 0; //@line 13328
   HEAP32[$309 >> 2] = $64; //@line 13329
   $310 = $ReallocAsyncCtx2 + 124 | 0; //@line 13330
   HEAP32[$310 >> 2] = $66; //@line 13331
   $311 = $ReallocAsyncCtx2 + 128 | 0; //@line 13332
   HEAP32[$311 >> 2] = $68; //@line 13333
   $312 = $ReallocAsyncCtx2 + 132 | 0; //@line 13334
   HEAP32[$312 >> 2] = $70; //@line 13335
   $313 = $ReallocAsyncCtx2 + 136 | 0; //@line 13336
   HEAP32[$313 >> 2] = $72; //@line 13337
   $314 = $ReallocAsyncCtx2 + 140 | 0; //@line 13338
   HEAP32[$314 >> 2] = $74; //@line 13339
   $315 = $ReallocAsyncCtx2 + 144 | 0; //@line 13340
   HEAP32[$315 >> 2] = $76; //@line 13341
   $316 = $ReallocAsyncCtx2 + 148 | 0; //@line 13342
   HEAP8[$316 >> 0] = $268; //@line 13343
   $317 = $ReallocAsyncCtx2 + 152 | 0; //@line 13344
   HEAP32[$317 >> 2] = $78; //@line 13345
   $318 = $ReallocAsyncCtx2 + 156 | 0; //@line 13346
   HEAP32[$318 >> 2] = $80; //@line 13347
   $319 = $ReallocAsyncCtx2 + 160 | 0; //@line 13348
   HEAP32[$319 >> 2] = $82; //@line 13349
   $320 = $ReallocAsyncCtx2 + 164 | 0; //@line 13350
   HEAP32[$320 >> 2] = $84; //@line 13351
   $321 = $ReallocAsyncCtx2 + 168 | 0; //@line 13352
   HEAP32[$321 >> 2] = $86; //@line 13353
   $322 = $ReallocAsyncCtx2 + 172 | 0; //@line 13354
   HEAP32[$322 >> 2] = $88; //@line 13355
   $323 = $ReallocAsyncCtx2 + 176 | 0; //@line 13356
   HEAP32[$323 >> 2] = $90; //@line 13357
   $324 = $ReallocAsyncCtx2 + 180 | 0; //@line 13358
   HEAP32[$324 >> 2] = $92; //@line 13359
   $325 = $ReallocAsyncCtx2 + 184 | 0; //@line 13360
   HEAP32[$325 >> 2] = $94; //@line 13361
   $326 = $ReallocAsyncCtx2 + 188 | 0; //@line 13362
   HEAP32[$326 >> 2] = $96; //@line 13363
   $327 = $ReallocAsyncCtx2 + 192 | 0; //@line 13364
   HEAP32[$327 >> 2] = $98; //@line 13365
   $328 = $ReallocAsyncCtx2 + 196 | 0; //@line 13366
   HEAP32[$328 >> 2] = $100; //@line 13367
   $329 = $ReallocAsyncCtx2 + 200 | 0; //@line 13368
   HEAP32[$329 >> 2] = $102; //@line 13369
   $330 = $ReallocAsyncCtx2 + 204 | 0; //@line 13370
   HEAP32[$330 >> 2] = $104; //@line 13371
   $331 = $ReallocAsyncCtx2 + 208 | 0; //@line 13372
   HEAP32[$331 >> 2] = $106; //@line 13373
   $332 = $ReallocAsyncCtx2 + 212 | 0; //@line 13374
   HEAP32[$332 >> 2] = $108; //@line 13375
   $333 = $ReallocAsyncCtx2 + 216 | 0; //@line 13376
   HEAP32[$333 >> 2] = $110; //@line 13377
   $334 = $ReallocAsyncCtx2 + 220 | 0; //@line 13378
   HEAP32[$334 >> 2] = $112; //@line 13379
   $335 = $ReallocAsyncCtx2 + 224 | 0; //@line 13380
   HEAP32[$335 >> 2] = $114; //@line 13381
   $336 = $ReallocAsyncCtx2 + 228 | 0; //@line 13382
   HEAP8[$336 >> 0] = $116; //@line 13383
   $337 = $ReallocAsyncCtx2 + 232 | 0; //@line 13384
   HEAP32[$337 >> 2] = $118; //@line 13385
   $338 = $ReallocAsyncCtx2 + 236 | 0; //@line 13386
   HEAP32[$338 >> 2] = $120; //@line 13387
   $339 = $ReallocAsyncCtx2 + 240 | 0; //@line 13388
   HEAP32[$339 >> 2] = $122; //@line 13389
   $340 = $ReallocAsyncCtx2 + 244 | 0; //@line 13390
   HEAP32[$340 >> 2] = $124; //@line 13391
   $341 = $ReallocAsyncCtx2 + 248 | 0; //@line 13392
   HEAP32[$341 >> 2] = $126; //@line 13393
   $342 = $ReallocAsyncCtx2 + 252 | 0; //@line 13394
   HEAP32[$342 >> 2] = $128; //@line 13395
   $343 = $ReallocAsyncCtx2 + 256 | 0; //@line 13396
   HEAP8[$343 >> 0] = $130; //@line 13397
   $344 = $ReallocAsyncCtx2 + 257 | 0; //@line 13398
   HEAP8[$344 >> 0] = $132; //@line 13399
   $345 = $ReallocAsyncCtx2 + 260 | 0; //@line 13400
   HEAP32[$345 >> 2] = $134; //@line 13401
   $346 = $ReallocAsyncCtx2 + 264 | 0; //@line 13402
   HEAP32[$346 >> 2] = $136; //@line 13403
   sp = STACKTOP; //@line 13404
   return;
  }
  HEAP8[___async_retval >> 0] = $279; //@line 13408
  ___async_unwind = 0; //@line 13409
  HEAP32[$ReallocAsyncCtx2 >> 2] = 577; //@line 13410
  $280 = $ReallocAsyncCtx2 + 4 | 0; //@line 13411
  HEAP32[$280 >> 2] = $2; //@line 13412
  $281 = $ReallocAsyncCtx2 + 8 | 0; //@line 13413
  HEAP32[$281 >> 2] = $4; //@line 13414
  $282 = $ReallocAsyncCtx2 + 12 | 0; //@line 13415
  HEAP32[$282 >> 2] = $6; //@line 13416
  $283 = $ReallocAsyncCtx2 + 16 | 0; //@line 13417
  HEAP32[$283 >> 2] = $8; //@line 13418
  $284 = $ReallocAsyncCtx2 + 20 | 0; //@line 13419
  HEAP32[$284 >> 2] = $10; //@line 13420
  $285 = $ReallocAsyncCtx2 + 24 | 0; //@line 13421
  HEAP32[$285 >> 2] = $16; //@line 13422
  $286 = $ReallocAsyncCtx2 + 28 | 0; //@line 13423
  HEAP32[$286 >> 2] = $14; //@line 13424
  $287 = $ReallocAsyncCtx2 + 32 | 0; //@line 13425
  HEAP32[$287 >> 2] = $18; //@line 13426
  $288 = $ReallocAsyncCtx2 + 36 | 0; //@line 13427
  HEAP32[$288 >> 2] = $20; //@line 13428
  $289 = $ReallocAsyncCtx2 + 40 | 0; //@line 13429
  HEAP32[$289 >> 2] = $22; //@line 13430
  $290 = $ReallocAsyncCtx2 + 44 | 0; //@line 13431
  HEAP32[$290 >> 2] = $24; //@line 13432
  $291 = $ReallocAsyncCtx2 + 48 | 0; //@line 13433
  HEAP32[$291 >> 2] = $26; //@line 13434
  $292 = $ReallocAsyncCtx2 + 52 | 0; //@line 13435
  HEAP32[$292 >> 2] = $28; //@line 13436
  $293 = $ReallocAsyncCtx2 + 56 | 0; //@line 13437
  HEAP32[$293 >> 2] = $30; //@line 13438
  $294 = $ReallocAsyncCtx2 + 60 | 0; //@line 13439
  HEAP32[$294 >> 2] = $34; //@line 13440
  $295 = $ReallocAsyncCtx2 + 64 | 0; //@line 13441
  HEAP32[$295 >> 2] = $36; //@line 13442
  $296 = $ReallocAsyncCtx2 + 68 | 0; //@line 13443
  HEAP32[$296 >> 2] = $38; //@line 13444
  $297 = $ReallocAsyncCtx2 + 72 | 0; //@line 13445
  HEAP32[$297 >> 2] = $40; //@line 13446
  $298 = $ReallocAsyncCtx2 + 76 | 0; //@line 13447
  HEAP32[$298 >> 2] = $42; //@line 13448
  $299 = $ReallocAsyncCtx2 + 80 | 0; //@line 13449
  HEAP32[$299 >> 2] = $44; //@line 13450
  $300 = $ReallocAsyncCtx2 + 84 | 0; //@line 13451
  HEAP32[$300 >> 2] = $46; //@line 13452
  $301 = $ReallocAsyncCtx2 + 88 | 0; //@line 13453
  HEAP32[$301 >> 2] = $48; //@line 13454
  $302 = $ReallocAsyncCtx2 + 92 | 0; //@line 13455
  HEAP32[$302 >> 2] = $50; //@line 13456
  $303 = $ReallocAsyncCtx2 + 96 | 0; //@line 13457
  HEAP32[$303 >> 2] = $52; //@line 13458
  $304 = $ReallocAsyncCtx2 + 100 | 0; //@line 13459
  HEAP32[$304 >> 2] = $54; //@line 13460
  $305 = $ReallocAsyncCtx2 + 104 | 0; //@line 13461
  HEAP32[$305 >> 2] = $56; //@line 13462
  $306 = $ReallocAsyncCtx2 + 108 | 0; //@line 13463
  HEAP32[$306 >> 2] = $58; //@line 13464
  $307 = $ReallocAsyncCtx2 + 112 | 0; //@line 13465
  HEAP32[$307 >> 2] = $60; //@line 13466
  $308 = $ReallocAsyncCtx2 + 116 | 0; //@line 13467
  HEAP32[$308 >> 2] = $62; //@line 13468
  $309 = $ReallocAsyncCtx2 + 120 | 0; //@line 13469
  HEAP32[$309 >> 2] = $64; //@line 13470
  $310 = $ReallocAsyncCtx2 + 124 | 0; //@line 13471
  HEAP32[$310 >> 2] = $66; //@line 13472
  $311 = $ReallocAsyncCtx2 + 128 | 0; //@line 13473
  HEAP32[$311 >> 2] = $68; //@line 13474
  $312 = $ReallocAsyncCtx2 + 132 | 0; //@line 13475
  HEAP32[$312 >> 2] = $70; //@line 13476
  $313 = $ReallocAsyncCtx2 + 136 | 0; //@line 13477
  HEAP32[$313 >> 2] = $72; //@line 13478
  $314 = $ReallocAsyncCtx2 + 140 | 0; //@line 13479
  HEAP32[$314 >> 2] = $74; //@line 13480
  $315 = $ReallocAsyncCtx2 + 144 | 0; //@line 13481
  HEAP32[$315 >> 2] = $76; //@line 13482
  $316 = $ReallocAsyncCtx2 + 148 | 0; //@line 13483
  HEAP8[$316 >> 0] = $268; //@line 13484
  $317 = $ReallocAsyncCtx2 + 152 | 0; //@line 13485
  HEAP32[$317 >> 2] = $78; //@line 13486
  $318 = $ReallocAsyncCtx2 + 156 | 0; //@line 13487
  HEAP32[$318 >> 2] = $80; //@line 13488
  $319 = $ReallocAsyncCtx2 + 160 | 0; //@line 13489
  HEAP32[$319 >> 2] = $82; //@line 13490
  $320 = $ReallocAsyncCtx2 + 164 | 0; //@line 13491
  HEAP32[$320 >> 2] = $84; //@line 13492
  $321 = $ReallocAsyncCtx2 + 168 | 0; //@line 13493
  HEAP32[$321 >> 2] = $86; //@line 13494
  $322 = $ReallocAsyncCtx2 + 172 | 0; //@line 13495
  HEAP32[$322 >> 2] = $88; //@line 13496
  $323 = $ReallocAsyncCtx2 + 176 | 0; //@line 13497
  HEAP32[$323 >> 2] = $90; //@line 13498
  $324 = $ReallocAsyncCtx2 + 180 | 0; //@line 13499
  HEAP32[$324 >> 2] = $92; //@line 13500
  $325 = $ReallocAsyncCtx2 + 184 | 0; //@line 13501
  HEAP32[$325 >> 2] = $94; //@line 13502
  $326 = $ReallocAsyncCtx2 + 188 | 0; //@line 13503
  HEAP32[$326 >> 2] = $96; //@line 13504
  $327 = $ReallocAsyncCtx2 + 192 | 0; //@line 13505
  HEAP32[$327 >> 2] = $98; //@line 13506
  $328 = $ReallocAsyncCtx2 + 196 | 0; //@line 13507
  HEAP32[$328 >> 2] = $100; //@line 13508
  $329 = $ReallocAsyncCtx2 + 200 | 0; //@line 13509
  HEAP32[$329 >> 2] = $102; //@line 13510
  $330 = $ReallocAsyncCtx2 + 204 | 0; //@line 13511
  HEAP32[$330 >> 2] = $104; //@line 13512
  $331 = $ReallocAsyncCtx2 + 208 | 0; //@line 13513
  HEAP32[$331 >> 2] = $106; //@line 13514
  $332 = $ReallocAsyncCtx2 + 212 | 0; //@line 13515
  HEAP32[$332 >> 2] = $108; //@line 13516
  $333 = $ReallocAsyncCtx2 + 216 | 0; //@line 13517
  HEAP32[$333 >> 2] = $110; //@line 13518
  $334 = $ReallocAsyncCtx2 + 220 | 0; //@line 13519
  HEAP32[$334 >> 2] = $112; //@line 13520
  $335 = $ReallocAsyncCtx2 + 224 | 0; //@line 13521
  HEAP32[$335 >> 2] = $114; //@line 13522
  $336 = $ReallocAsyncCtx2 + 228 | 0; //@line 13523
  HEAP8[$336 >> 0] = $116; //@line 13524
  $337 = $ReallocAsyncCtx2 + 232 | 0; //@line 13525
  HEAP32[$337 >> 2] = $118; //@line 13526
  $338 = $ReallocAsyncCtx2 + 236 | 0; //@line 13527
  HEAP32[$338 >> 2] = $120; //@line 13528
  $339 = $ReallocAsyncCtx2 + 240 | 0; //@line 13529
  HEAP32[$339 >> 2] = $122; //@line 13530
  $340 = $ReallocAsyncCtx2 + 244 | 0; //@line 13531
  HEAP32[$340 >> 2] = $124; //@line 13532
  $341 = $ReallocAsyncCtx2 + 248 | 0; //@line 13533
  HEAP32[$341 >> 2] = $126; //@line 13534
  $342 = $ReallocAsyncCtx2 + 252 | 0; //@line 13535
  HEAP32[$342 >> 2] = $128; //@line 13536
  $343 = $ReallocAsyncCtx2 + 256 | 0; //@line 13537
  HEAP8[$343 >> 0] = $130; //@line 13538
  $344 = $ReallocAsyncCtx2 + 257 | 0; //@line 13539
  HEAP8[$344 >> 0] = $132; //@line 13540
  $345 = $ReallocAsyncCtx2 + 260 | 0; //@line 13541
  HEAP32[$345 >> 2] = $134; //@line 13542
  $346 = $ReallocAsyncCtx2 + 264 | 0; //@line 13543
  HEAP32[$346 >> 2] = $136; //@line 13544
  sp = STACKTOP; //@line 13545
  return;
 } else if ((label | 0) == 14) {
  HEAP8[$16 >> 0] = HEAP8[$128 + ($139 & 255) >> 0] | 0; //@line 13553
  HEAP32[$4 >> 2] = $50; //@line 13554
  HEAP32[$8 >> 2] = (HEAPU8[$128 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$128 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$128 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 13575
  HEAP32[$18 >> 2] = 0; //@line 13576
  $387 = $$0$be + 6 << 24 >> 24; //@line 13577
  HEAP8[$34 >> 0] = HEAP8[$128 + ($$0$be + 5 & 255) >> 0] | 0; //@line 13581
  $393 = HEAP32[(HEAP32[$38 >> 2] | 0) + 8 >> 2] | 0; //@line 13584
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(268) | 0; //@line 13585
  $394 = FUNCTION_TABLE_iii[$393 & 31]($124, $98) | 0; //@line 13586
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 578; //@line 13589
   $395 = $ReallocAsyncCtx3 + 4 | 0; //@line 13590
   HEAP32[$395 >> 2] = $2; //@line 13591
   $396 = $ReallocAsyncCtx3 + 8 | 0; //@line 13592
   HEAP32[$396 >> 2] = $4; //@line 13593
   $397 = $ReallocAsyncCtx3 + 12 | 0; //@line 13594
   HEAP32[$397 >> 2] = $6; //@line 13595
   $398 = $ReallocAsyncCtx3 + 16 | 0; //@line 13596
   HEAP32[$398 >> 2] = $8; //@line 13597
   $399 = $ReallocAsyncCtx3 + 20 | 0; //@line 13598
   HEAP32[$399 >> 2] = $10; //@line 13599
   $400 = $ReallocAsyncCtx3 + 24 | 0; //@line 13600
   HEAP32[$400 >> 2] = $16; //@line 13601
   $401 = $ReallocAsyncCtx3 + 28 | 0; //@line 13602
   HEAP32[$401 >> 2] = $14; //@line 13603
   $402 = $ReallocAsyncCtx3 + 32 | 0; //@line 13604
   HEAP32[$402 >> 2] = $18; //@line 13605
   $403 = $ReallocAsyncCtx3 + 36 | 0; //@line 13606
   HEAP32[$403 >> 2] = $20; //@line 13607
   $404 = $ReallocAsyncCtx3 + 40 | 0; //@line 13608
   HEAP32[$404 >> 2] = $22; //@line 13609
   $405 = $ReallocAsyncCtx3 + 44 | 0; //@line 13610
   HEAP32[$405 >> 2] = $24; //@line 13611
   $406 = $ReallocAsyncCtx3 + 48 | 0; //@line 13612
   HEAP32[$406 >> 2] = $26; //@line 13613
   $407 = $ReallocAsyncCtx3 + 52 | 0; //@line 13614
   HEAP32[$407 >> 2] = $28; //@line 13615
   $408 = $ReallocAsyncCtx3 + 56 | 0; //@line 13616
   HEAP32[$408 >> 2] = $30; //@line 13617
   $409 = $ReallocAsyncCtx3 + 60 | 0; //@line 13618
   HEAP32[$409 >> 2] = $34; //@line 13619
   $410 = $ReallocAsyncCtx3 + 64 | 0; //@line 13620
   HEAP32[$410 >> 2] = $36; //@line 13621
   $411 = $ReallocAsyncCtx3 + 68 | 0; //@line 13622
   HEAP32[$411 >> 2] = $38; //@line 13623
   $412 = $ReallocAsyncCtx3 + 72 | 0; //@line 13624
   HEAP32[$412 >> 2] = $40; //@line 13625
   $413 = $ReallocAsyncCtx3 + 76 | 0; //@line 13626
   HEAP32[$413 >> 2] = $42; //@line 13627
   $414 = $ReallocAsyncCtx3 + 80 | 0; //@line 13628
   HEAP32[$414 >> 2] = $44; //@line 13629
   $415 = $ReallocAsyncCtx3 + 84 | 0; //@line 13630
   HEAP32[$415 >> 2] = $46; //@line 13631
   $416 = $ReallocAsyncCtx3 + 88 | 0; //@line 13632
   HEAP32[$416 >> 2] = $48; //@line 13633
   $417 = $ReallocAsyncCtx3 + 92 | 0; //@line 13634
   HEAP32[$417 >> 2] = $50; //@line 13635
   $418 = $ReallocAsyncCtx3 + 96 | 0; //@line 13636
   HEAP32[$418 >> 2] = $52; //@line 13637
   $419 = $ReallocAsyncCtx3 + 100 | 0; //@line 13638
   HEAP32[$419 >> 2] = $54; //@line 13639
   $420 = $ReallocAsyncCtx3 + 104 | 0; //@line 13640
   HEAP32[$420 >> 2] = $56; //@line 13641
   $421 = $ReallocAsyncCtx3 + 108 | 0; //@line 13642
   HEAP32[$421 >> 2] = $58; //@line 13643
   $422 = $ReallocAsyncCtx3 + 112 | 0; //@line 13644
   HEAP32[$422 >> 2] = $60; //@line 13645
   $423 = $ReallocAsyncCtx3 + 116 | 0; //@line 13646
   HEAP32[$423 >> 2] = $62; //@line 13647
   $424 = $ReallocAsyncCtx3 + 120 | 0; //@line 13648
   HEAP8[$424 >> 0] = $387; //@line 13649
   $425 = $ReallocAsyncCtx3 + 124 | 0; //@line 13650
   HEAP32[$425 >> 2] = $66; //@line 13651
   $426 = $ReallocAsyncCtx3 + 128 | 0; //@line 13652
   HEAP32[$426 >> 2] = $64; //@line 13653
   $427 = $ReallocAsyncCtx3 + 132 | 0; //@line 13654
   HEAP32[$427 >> 2] = $68; //@line 13655
   $428 = $ReallocAsyncCtx3 + 136 | 0; //@line 13656
   HEAP32[$428 >> 2] = $72; //@line 13657
   $429 = $ReallocAsyncCtx3 + 140 | 0; //@line 13658
   HEAP32[$429 >> 2] = $70; //@line 13659
   $430 = $ReallocAsyncCtx3 + 144 | 0; //@line 13660
   HEAP32[$430 >> 2] = $74; //@line 13661
   $431 = $ReallocAsyncCtx3 + 148 | 0; //@line 13662
   HEAP32[$431 >> 2] = $76; //@line 13663
   $432 = $ReallocAsyncCtx3 + 152 | 0; //@line 13664
   HEAP32[$432 >> 2] = $78; //@line 13665
   $433 = $ReallocAsyncCtx3 + 156 | 0; //@line 13666
   HEAP32[$433 >> 2] = $80; //@line 13667
   $434 = $ReallocAsyncCtx3 + 160 | 0; //@line 13668
   HEAP32[$434 >> 2] = $82; //@line 13669
   $435 = $ReallocAsyncCtx3 + 164 | 0; //@line 13670
   HEAP32[$435 >> 2] = $84; //@line 13671
   $436 = $ReallocAsyncCtx3 + 168 | 0; //@line 13672
   HEAP32[$436 >> 2] = $86; //@line 13673
   $437 = $ReallocAsyncCtx3 + 172 | 0; //@line 13674
   HEAP32[$437 >> 2] = $88; //@line 13675
   $438 = $ReallocAsyncCtx3 + 176 | 0; //@line 13676
   HEAP32[$438 >> 2] = $90; //@line 13677
   $439 = $ReallocAsyncCtx3 + 180 | 0; //@line 13678
   HEAP32[$439 >> 2] = $92; //@line 13679
   $440 = $ReallocAsyncCtx3 + 184 | 0; //@line 13680
   HEAP32[$440 >> 2] = $94; //@line 13681
   $441 = $ReallocAsyncCtx3 + 188 | 0; //@line 13682
   HEAP32[$441 >> 2] = $96; //@line 13683
   $442 = $ReallocAsyncCtx3 + 192 | 0; //@line 13684
   HEAP32[$442 >> 2] = $98; //@line 13685
   $443 = $ReallocAsyncCtx3 + 196 | 0; //@line 13686
   HEAP32[$443 >> 2] = $100; //@line 13687
   $444 = $ReallocAsyncCtx3 + 200 | 0; //@line 13688
   HEAP32[$444 >> 2] = $102; //@line 13689
   $445 = $ReallocAsyncCtx3 + 204 | 0; //@line 13690
   HEAP32[$445 >> 2] = $104; //@line 13691
   $446 = $ReallocAsyncCtx3 + 208 | 0; //@line 13692
   HEAP32[$446 >> 2] = $106; //@line 13693
   $447 = $ReallocAsyncCtx3 + 212 | 0; //@line 13694
   HEAP32[$447 >> 2] = $108; //@line 13695
   $448 = $ReallocAsyncCtx3 + 216 | 0; //@line 13696
   HEAP32[$448 >> 2] = $110; //@line 13697
   $449 = $ReallocAsyncCtx3 + 220 | 0; //@line 13698
   HEAP32[$449 >> 2] = $112; //@line 13699
   $450 = $ReallocAsyncCtx3 + 224 | 0; //@line 13700
   HEAP32[$450 >> 2] = $114; //@line 13701
   $451 = $ReallocAsyncCtx3 + 228 | 0; //@line 13702
   HEAP8[$451 >> 0] = $116; //@line 13703
   $452 = $ReallocAsyncCtx3 + 232 | 0; //@line 13704
   HEAP32[$452 >> 2] = $118; //@line 13705
   $453 = $ReallocAsyncCtx3 + 236 | 0; //@line 13706
   HEAP32[$453 >> 2] = $120; //@line 13707
   $454 = $ReallocAsyncCtx3 + 240 | 0; //@line 13708
   HEAP32[$454 >> 2] = $122; //@line 13709
   $455 = $ReallocAsyncCtx3 + 244 | 0; //@line 13710
   HEAP32[$455 >> 2] = $124; //@line 13711
   $456 = $ReallocAsyncCtx3 + 248 | 0; //@line 13712
   HEAP32[$456 >> 2] = $126; //@line 13713
   $457 = $ReallocAsyncCtx3 + 252 | 0; //@line 13714
   HEAP32[$457 >> 2] = $128; //@line 13715
   $458 = $ReallocAsyncCtx3 + 256 | 0; //@line 13716
   HEAP8[$458 >> 0] = $130; //@line 13717
   $459 = $ReallocAsyncCtx3 + 257 | 0; //@line 13718
   HEAP8[$459 >> 0] = $132; //@line 13719
   $460 = $ReallocAsyncCtx3 + 260 | 0; //@line 13720
   HEAP32[$460 >> 2] = $134; //@line 13721
   $461 = $ReallocAsyncCtx3 + 264 | 0; //@line 13722
   HEAP32[$461 >> 2] = $136; //@line 13723
   sp = STACKTOP; //@line 13724
   return;
  }
  HEAP8[___async_retval >> 0] = $394; //@line 13728
  ___async_unwind = 0; //@line 13729
  HEAP32[$ReallocAsyncCtx3 >> 2] = 578; //@line 13730
  $395 = $ReallocAsyncCtx3 + 4 | 0; //@line 13731
  HEAP32[$395 >> 2] = $2; //@line 13732
  $396 = $ReallocAsyncCtx3 + 8 | 0; //@line 13733
  HEAP32[$396 >> 2] = $4; //@line 13734
  $397 = $ReallocAsyncCtx3 + 12 | 0; //@line 13735
  HEAP32[$397 >> 2] = $6; //@line 13736
  $398 = $ReallocAsyncCtx3 + 16 | 0; //@line 13737
  HEAP32[$398 >> 2] = $8; //@line 13738
  $399 = $ReallocAsyncCtx3 + 20 | 0; //@line 13739
  HEAP32[$399 >> 2] = $10; //@line 13740
  $400 = $ReallocAsyncCtx3 + 24 | 0; //@line 13741
  HEAP32[$400 >> 2] = $16; //@line 13742
  $401 = $ReallocAsyncCtx3 + 28 | 0; //@line 13743
  HEAP32[$401 >> 2] = $14; //@line 13744
  $402 = $ReallocAsyncCtx3 + 32 | 0; //@line 13745
  HEAP32[$402 >> 2] = $18; //@line 13746
  $403 = $ReallocAsyncCtx3 + 36 | 0; //@line 13747
  HEAP32[$403 >> 2] = $20; //@line 13748
  $404 = $ReallocAsyncCtx3 + 40 | 0; //@line 13749
  HEAP32[$404 >> 2] = $22; //@line 13750
  $405 = $ReallocAsyncCtx3 + 44 | 0; //@line 13751
  HEAP32[$405 >> 2] = $24; //@line 13752
  $406 = $ReallocAsyncCtx3 + 48 | 0; //@line 13753
  HEAP32[$406 >> 2] = $26; //@line 13754
  $407 = $ReallocAsyncCtx3 + 52 | 0; //@line 13755
  HEAP32[$407 >> 2] = $28; //@line 13756
  $408 = $ReallocAsyncCtx3 + 56 | 0; //@line 13757
  HEAP32[$408 >> 2] = $30; //@line 13758
  $409 = $ReallocAsyncCtx3 + 60 | 0; //@line 13759
  HEAP32[$409 >> 2] = $34; //@line 13760
  $410 = $ReallocAsyncCtx3 + 64 | 0; //@line 13761
  HEAP32[$410 >> 2] = $36; //@line 13762
  $411 = $ReallocAsyncCtx3 + 68 | 0; //@line 13763
  HEAP32[$411 >> 2] = $38; //@line 13764
  $412 = $ReallocAsyncCtx3 + 72 | 0; //@line 13765
  HEAP32[$412 >> 2] = $40; //@line 13766
  $413 = $ReallocAsyncCtx3 + 76 | 0; //@line 13767
  HEAP32[$413 >> 2] = $42; //@line 13768
  $414 = $ReallocAsyncCtx3 + 80 | 0; //@line 13769
  HEAP32[$414 >> 2] = $44; //@line 13770
  $415 = $ReallocAsyncCtx3 + 84 | 0; //@line 13771
  HEAP32[$415 >> 2] = $46; //@line 13772
  $416 = $ReallocAsyncCtx3 + 88 | 0; //@line 13773
  HEAP32[$416 >> 2] = $48; //@line 13774
  $417 = $ReallocAsyncCtx3 + 92 | 0; //@line 13775
  HEAP32[$417 >> 2] = $50; //@line 13776
  $418 = $ReallocAsyncCtx3 + 96 | 0; //@line 13777
  HEAP32[$418 >> 2] = $52; //@line 13778
  $419 = $ReallocAsyncCtx3 + 100 | 0; //@line 13779
  HEAP32[$419 >> 2] = $54; //@line 13780
  $420 = $ReallocAsyncCtx3 + 104 | 0; //@line 13781
  HEAP32[$420 >> 2] = $56; //@line 13782
  $421 = $ReallocAsyncCtx3 + 108 | 0; //@line 13783
  HEAP32[$421 >> 2] = $58; //@line 13784
  $422 = $ReallocAsyncCtx3 + 112 | 0; //@line 13785
  HEAP32[$422 >> 2] = $60; //@line 13786
  $423 = $ReallocAsyncCtx3 + 116 | 0; //@line 13787
  HEAP32[$423 >> 2] = $62; //@line 13788
  $424 = $ReallocAsyncCtx3 + 120 | 0; //@line 13789
  HEAP8[$424 >> 0] = $387; //@line 13790
  $425 = $ReallocAsyncCtx3 + 124 | 0; //@line 13791
  HEAP32[$425 >> 2] = $66; //@line 13792
  $426 = $ReallocAsyncCtx3 + 128 | 0; //@line 13793
  HEAP32[$426 >> 2] = $64; //@line 13794
  $427 = $ReallocAsyncCtx3 + 132 | 0; //@line 13795
  HEAP32[$427 >> 2] = $68; //@line 13796
  $428 = $ReallocAsyncCtx3 + 136 | 0; //@line 13797
  HEAP32[$428 >> 2] = $72; //@line 13798
  $429 = $ReallocAsyncCtx3 + 140 | 0; //@line 13799
  HEAP32[$429 >> 2] = $70; //@line 13800
  $430 = $ReallocAsyncCtx3 + 144 | 0; //@line 13801
  HEAP32[$430 >> 2] = $74; //@line 13802
  $431 = $ReallocAsyncCtx3 + 148 | 0; //@line 13803
  HEAP32[$431 >> 2] = $76; //@line 13804
  $432 = $ReallocAsyncCtx3 + 152 | 0; //@line 13805
  HEAP32[$432 >> 2] = $78; //@line 13806
  $433 = $ReallocAsyncCtx3 + 156 | 0; //@line 13807
  HEAP32[$433 >> 2] = $80; //@line 13808
  $434 = $ReallocAsyncCtx3 + 160 | 0; //@line 13809
  HEAP32[$434 >> 2] = $82; //@line 13810
  $435 = $ReallocAsyncCtx3 + 164 | 0; //@line 13811
  HEAP32[$435 >> 2] = $84; //@line 13812
  $436 = $ReallocAsyncCtx3 + 168 | 0; //@line 13813
  HEAP32[$436 >> 2] = $86; //@line 13814
  $437 = $ReallocAsyncCtx3 + 172 | 0; //@line 13815
  HEAP32[$437 >> 2] = $88; //@line 13816
  $438 = $ReallocAsyncCtx3 + 176 | 0; //@line 13817
  HEAP32[$438 >> 2] = $90; //@line 13818
  $439 = $ReallocAsyncCtx3 + 180 | 0; //@line 13819
  HEAP32[$439 >> 2] = $92; //@line 13820
  $440 = $ReallocAsyncCtx3 + 184 | 0; //@line 13821
  HEAP32[$440 >> 2] = $94; //@line 13822
  $441 = $ReallocAsyncCtx3 + 188 | 0; //@line 13823
  HEAP32[$441 >> 2] = $96; //@line 13824
  $442 = $ReallocAsyncCtx3 + 192 | 0; //@line 13825
  HEAP32[$442 >> 2] = $98; //@line 13826
  $443 = $ReallocAsyncCtx3 + 196 | 0; //@line 13827
  HEAP32[$443 >> 2] = $100; //@line 13828
  $444 = $ReallocAsyncCtx3 + 200 | 0; //@line 13829
  HEAP32[$444 >> 2] = $102; //@line 13830
  $445 = $ReallocAsyncCtx3 + 204 | 0; //@line 13831
  HEAP32[$445 >> 2] = $104; //@line 13832
  $446 = $ReallocAsyncCtx3 + 208 | 0; //@line 13833
  HEAP32[$446 >> 2] = $106; //@line 13834
  $447 = $ReallocAsyncCtx3 + 212 | 0; //@line 13835
  HEAP32[$447 >> 2] = $108; //@line 13836
  $448 = $ReallocAsyncCtx3 + 216 | 0; //@line 13837
  HEAP32[$448 >> 2] = $110; //@line 13838
  $449 = $ReallocAsyncCtx3 + 220 | 0; //@line 13839
  HEAP32[$449 >> 2] = $112; //@line 13840
  $450 = $ReallocAsyncCtx3 + 224 | 0; //@line 13841
  HEAP32[$450 >> 2] = $114; //@line 13842
  $451 = $ReallocAsyncCtx3 + 228 | 0; //@line 13843
  HEAP8[$451 >> 0] = $116; //@line 13844
  $452 = $ReallocAsyncCtx3 + 232 | 0; //@line 13845
  HEAP32[$452 >> 2] = $118; //@line 13846
  $453 = $ReallocAsyncCtx3 + 236 | 0; //@line 13847
  HEAP32[$453 >> 2] = $120; //@line 13848
  $454 = $ReallocAsyncCtx3 + 240 | 0; //@line 13849
  HEAP32[$454 >> 2] = $122; //@line 13850
  $455 = $ReallocAsyncCtx3 + 244 | 0; //@line 13851
  HEAP32[$455 >> 2] = $124; //@line 13852
  $456 = $ReallocAsyncCtx3 + 248 | 0; //@line 13853
  HEAP32[$456 >> 2] = $126; //@line 13854
  $457 = $ReallocAsyncCtx3 + 252 | 0; //@line 13855
  HEAP32[$457 >> 2] = $128; //@line 13856
  $458 = $ReallocAsyncCtx3 + 256 | 0; //@line 13857
  HEAP8[$458 >> 0] = $130; //@line 13858
  $459 = $ReallocAsyncCtx3 + 257 | 0; //@line 13859
  HEAP8[$459 >> 0] = $132; //@line 13860
  $460 = $ReallocAsyncCtx3 + 260 | 0; //@line 13861
  HEAP32[$460 >> 2] = $134; //@line 13862
  $461 = $ReallocAsyncCtx3 + 264 | 0; //@line 13863
  HEAP32[$461 >> 2] = $136; //@line 13864
  sp = STACKTOP; //@line 13865
  return;
 } else if ((label | 0) == 19) {
  $480 = $$0$be + 2 << 24 >> 24; //@line 13869
  $483 = HEAP8[$128 + ($139 & 255) >> 0] | 0; //@line 13872
  HEAP8[$58 >> 0] = 0; //@line 13873
  $484 = $483 & 255; //@line 13874
  HEAP8[$74 >> 0] = $484 >>> 5 & 1; //@line 13878
  if ($484 & 16 | 0) {
   HEAP8[$58 >> 0] = 1; //@line 13882
  }
  HEAP8[$82 >> 0] = $484 & 15; //@line 13886
  $493 = HEAP32[(HEAP32[$86 >> 2] | 0) + 44 >> 2] | 0; //@line 13889
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(272) | 0; //@line 13890
  $494 = FUNCTION_TABLE_iii[$493 & 31]($124, $60) | 0; //@line 13891
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 579; //@line 13894
   $495 = $ReallocAsyncCtx4 + 4 | 0; //@line 13895
   HEAP32[$495 >> 2] = $2; //@line 13896
   $496 = $ReallocAsyncCtx4 + 8 | 0; //@line 13897
   HEAP32[$496 >> 2] = $4; //@line 13898
   $497 = $ReallocAsyncCtx4 + 12 | 0; //@line 13899
   HEAP32[$497 >> 2] = $6; //@line 13900
   $498 = $ReallocAsyncCtx4 + 16 | 0; //@line 13901
   HEAP32[$498 >> 2] = $8; //@line 13902
   $499 = $ReallocAsyncCtx4 + 20 | 0; //@line 13903
   HEAP32[$499 >> 2] = $10; //@line 13904
   $500 = $ReallocAsyncCtx4 + 24 | 0; //@line 13905
   HEAP32[$500 >> 2] = $$096$be; //@line 13906
   $501 = $ReallocAsyncCtx4 + 28 | 0; //@line 13907
   HEAP32[$501 >> 2] = $14; //@line 13908
   $502 = $ReallocAsyncCtx4 + 32 | 0; //@line 13909
   HEAP32[$502 >> 2] = $16; //@line 13910
   $503 = $ReallocAsyncCtx4 + 36 | 0; //@line 13911
   HEAP32[$503 >> 2] = $18; //@line 13912
   $504 = $ReallocAsyncCtx4 + 40 | 0; //@line 13913
   HEAP32[$504 >> 2] = $20; //@line 13914
   $505 = $ReallocAsyncCtx4 + 44 | 0; //@line 13915
   HEAP32[$505 >> 2] = $22; //@line 13916
   $506 = $ReallocAsyncCtx4 + 48 | 0; //@line 13917
   HEAP32[$506 >> 2] = $24; //@line 13918
   $507 = $ReallocAsyncCtx4 + 52 | 0; //@line 13919
   HEAP32[$507 >> 2] = $26; //@line 13920
   $508 = $ReallocAsyncCtx4 + 56 | 0; //@line 13921
   HEAP32[$508 >> 2] = $28; //@line 13922
   $509 = $ReallocAsyncCtx4 + 60 | 0; //@line 13923
   HEAP32[$509 >> 2] = $30; //@line 13924
   $510 = $ReallocAsyncCtx4 + 64 | 0; //@line 13925
   HEAP8[$510 >> 0] = $480; //@line 13926
   $511 = $ReallocAsyncCtx4 + 68 | 0; //@line 13927
   HEAP32[$511 >> 2] = $34; //@line 13928
   $512 = $ReallocAsyncCtx4 + 72 | 0; //@line 13929
   HEAP32[$512 >> 2] = $36; //@line 13930
   $513 = $ReallocAsyncCtx4 + 76 | 0; //@line 13931
   HEAP32[$513 >> 2] = $38; //@line 13932
   $514 = $ReallocAsyncCtx4 + 80 | 0; //@line 13933
   HEAP32[$514 >> 2] = $40; //@line 13934
   $515 = $ReallocAsyncCtx4 + 84 | 0; //@line 13935
   HEAP32[$515 >> 2] = $42; //@line 13936
   $516 = $ReallocAsyncCtx4 + 88 | 0; //@line 13937
   HEAP32[$516 >> 2] = $44; //@line 13938
   $517 = $ReallocAsyncCtx4 + 92 | 0; //@line 13939
   HEAP32[$517 >> 2] = $46; //@line 13940
   $518 = $ReallocAsyncCtx4 + 96 | 0; //@line 13941
   HEAP32[$518 >> 2] = $48; //@line 13942
   $519 = $ReallocAsyncCtx4 + 100 | 0; //@line 13943
   HEAP32[$519 >> 2] = $50; //@line 13944
   $520 = $ReallocAsyncCtx4 + 104 | 0; //@line 13945
   HEAP32[$520 >> 2] = $52; //@line 13946
   $521 = $ReallocAsyncCtx4 + 108 | 0; //@line 13947
   HEAP32[$521 >> 2] = $54; //@line 13948
   $522 = $ReallocAsyncCtx4 + 112 | 0; //@line 13949
   HEAP32[$522 >> 2] = $56; //@line 13950
   $523 = $ReallocAsyncCtx4 + 116 | 0; //@line 13951
   HEAP32[$523 >> 2] = $58; //@line 13952
   $524 = $ReallocAsyncCtx4 + 120 | 0; //@line 13953
   HEAP32[$524 >> 2] = $60; //@line 13954
   $525 = $ReallocAsyncCtx4 + 124 | 0; //@line 13955
   HEAP32[$525 >> 2] = $62; //@line 13956
   $526 = $ReallocAsyncCtx4 + 128 | 0; //@line 13957
   HEAP32[$526 >> 2] = $64; //@line 13958
   $527 = $ReallocAsyncCtx4 + 132 | 0; //@line 13959
   HEAP32[$527 >> 2] = $66; //@line 13960
   $528 = $ReallocAsyncCtx4 + 136 | 0; //@line 13961
   HEAP32[$528 >> 2] = $68; //@line 13962
   $529 = $ReallocAsyncCtx4 + 140 | 0; //@line 13963
   HEAP32[$529 >> 2] = $70; //@line 13964
   $530 = $ReallocAsyncCtx4 + 144 | 0; //@line 13965
   HEAP32[$530 >> 2] = $72; //@line 13966
   $531 = $ReallocAsyncCtx4 + 148 | 0; //@line 13967
   HEAP32[$531 >> 2] = $74; //@line 13968
   $532 = $ReallocAsyncCtx4 + 152 | 0; //@line 13969
   HEAP32[$532 >> 2] = $76; //@line 13970
   $533 = $ReallocAsyncCtx4 + 156 | 0; //@line 13971
   HEAP32[$533 >> 2] = $78; //@line 13972
   $534 = $ReallocAsyncCtx4 + 160 | 0; //@line 13973
   HEAP32[$534 >> 2] = $80; //@line 13974
   $535 = $ReallocAsyncCtx4 + 164 | 0; //@line 13975
   HEAP32[$535 >> 2] = $82; //@line 13976
   $536 = $ReallocAsyncCtx4 + 168 | 0; //@line 13977
   HEAP32[$536 >> 2] = $84; //@line 13978
   $537 = $ReallocAsyncCtx4 + 172 | 0; //@line 13979
   HEAP32[$537 >> 2] = $86; //@line 13980
   $538 = $ReallocAsyncCtx4 + 176 | 0; //@line 13981
   HEAP32[$538 >> 2] = $88; //@line 13982
   $539 = $ReallocAsyncCtx4 + 180 | 0; //@line 13983
   HEAP32[$539 >> 2] = $90; //@line 13984
   $540 = $ReallocAsyncCtx4 + 184 | 0; //@line 13985
   HEAP32[$540 >> 2] = $92; //@line 13986
   $541 = $ReallocAsyncCtx4 + 188 | 0; //@line 13987
   HEAP32[$541 >> 2] = $94; //@line 13988
   $542 = $ReallocAsyncCtx4 + 192 | 0; //@line 13989
   HEAP32[$542 >> 2] = $96; //@line 13990
   $543 = $ReallocAsyncCtx4 + 196 | 0; //@line 13991
   HEAP32[$543 >> 2] = $98; //@line 13992
   $544 = $ReallocAsyncCtx4 + 200 | 0; //@line 13993
   HEAP32[$544 >> 2] = $100; //@line 13994
   $545 = $ReallocAsyncCtx4 + 204 | 0; //@line 13995
   HEAP32[$545 >> 2] = $102; //@line 13996
   $546 = $ReallocAsyncCtx4 + 208 | 0; //@line 13997
   HEAP32[$546 >> 2] = $104; //@line 13998
   $547 = $ReallocAsyncCtx4 + 212 | 0; //@line 13999
   HEAP32[$547 >> 2] = $106; //@line 14000
   $548 = $ReallocAsyncCtx4 + 216 | 0; //@line 14001
   HEAP32[$548 >> 2] = $108; //@line 14002
   $549 = $ReallocAsyncCtx4 + 220 | 0; //@line 14003
   HEAP32[$549 >> 2] = $110; //@line 14004
   $550 = $ReallocAsyncCtx4 + 224 | 0; //@line 14005
   HEAP32[$550 >> 2] = $112; //@line 14006
   $551 = $ReallocAsyncCtx4 + 228 | 0; //@line 14007
   HEAP32[$551 >> 2] = $114; //@line 14008
   $552 = $ReallocAsyncCtx4 + 232 | 0; //@line 14009
   HEAP8[$552 >> 0] = $116; //@line 14010
   $553 = $ReallocAsyncCtx4 + 236 | 0; //@line 14011
   HEAP32[$553 >> 2] = $118; //@line 14012
   $554 = $ReallocAsyncCtx4 + 240 | 0; //@line 14013
   HEAP32[$554 >> 2] = $120; //@line 14014
   $555 = $ReallocAsyncCtx4 + 244 | 0; //@line 14015
   HEAP32[$555 >> 2] = $122; //@line 14016
   $556 = $ReallocAsyncCtx4 + 248 | 0; //@line 14017
   HEAP32[$556 >> 2] = $124; //@line 14018
   $557 = $ReallocAsyncCtx4 + 252 | 0; //@line 14019
   HEAP32[$557 >> 2] = $126; //@line 14020
   $558 = $ReallocAsyncCtx4 + 256 | 0; //@line 14021
   HEAP32[$558 >> 2] = $128; //@line 14022
   $559 = $ReallocAsyncCtx4 + 260 | 0; //@line 14023
   HEAP8[$559 >> 0] = $130; //@line 14024
   $560 = $ReallocAsyncCtx4 + 261 | 0; //@line 14025
   HEAP8[$560 >> 0] = $132; //@line 14026
   $561 = $ReallocAsyncCtx4 + 264 | 0; //@line 14027
   HEAP32[$561 >> 2] = $134; //@line 14028
   $562 = $ReallocAsyncCtx4 + 268 | 0; //@line 14029
   HEAP32[$562 >> 2] = $136; //@line 14030
   sp = STACKTOP; //@line 14031
   return;
  }
  HEAP8[___async_retval >> 0] = $494 & 1; //@line 14036
  ___async_unwind = 0; //@line 14037
  HEAP32[$ReallocAsyncCtx4 >> 2] = 579; //@line 14038
  $495 = $ReallocAsyncCtx4 + 4 | 0; //@line 14039
  HEAP32[$495 >> 2] = $2; //@line 14040
  $496 = $ReallocAsyncCtx4 + 8 | 0; //@line 14041
  HEAP32[$496 >> 2] = $4; //@line 14042
  $497 = $ReallocAsyncCtx4 + 12 | 0; //@line 14043
  HEAP32[$497 >> 2] = $6; //@line 14044
  $498 = $ReallocAsyncCtx4 + 16 | 0; //@line 14045
  HEAP32[$498 >> 2] = $8; //@line 14046
  $499 = $ReallocAsyncCtx4 + 20 | 0; //@line 14047
  HEAP32[$499 >> 2] = $10; //@line 14048
  $500 = $ReallocAsyncCtx4 + 24 | 0; //@line 14049
  HEAP32[$500 >> 2] = $$096$be; //@line 14050
  $501 = $ReallocAsyncCtx4 + 28 | 0; //@line 14051
  HEAP32[$501 >> 2] = $14; //@line 14052
  $502 = $ReallocAsyncCtx4 + 32 | 0; //@line 14053
  HEAP32[$502 >> 2] = $16; //@line 14054
  $503 = $ReallocAsyncCtx4 + 36 | 0; //@line 14055
  HEAP32[$503 >> 2] = $18; //@line 14056
  $504 = $ReallocAsyncCtx4 + 40 | 0; //@line 14057
  HEAP32[$504 >> 2] = $20; //@line 14058
  $505 = $ReallocAsyncCtx4 + 44 | 0; //@line 14059
  HEAP32[$505 >> 2] = $22; //@line 14060
  $506 = $ReallocAsyncCtx4 + 48 | 0; //@line 14061
  HEAP32[$506 >> 2] = $24; //@line 14062
  $507 = $ReallocAsyncCtx4 + 52 | 0; //@line 14063
  HEAP32[$507 >> 2] = $26; //@line 14064
  $508 = $ReallocAsyncCtx4 + 56 | 0; //@line 14065
  HEAP32[$508 >> 2] = $28; //@line 14066
  $509 = $ReallocAsyncCtx4 + 60 | 0; //@line 14067
  HEAP32[$509 >> 2] = $30; //@line 14068
  $510 = $ReallocAsyncCtx4 + 64 | 0; //@line 14069
  HEAP8[$510 >> 0] = $480; //@line 14070
  $511 = $ReallocAsyncCtx4 + 68 | 0; //@line 14071
  HEAP32[$511 >> 2] = $34; //@line 14072
  $512 = $ReallocAsyncCtx4 + 72 | 0; //@line 14073
  HEAP32[$512 >> 2] = $36; //@line 14074
  $513 = $ReallocAsyncCtx4 + 76 | 0; //@line 14075
  HEAP32[$513 >> 2] = $38; //@line 14076
  $514 = $ReallocAsyncCtx4 + 80 | 0; //@line 14077
  HEAP32[$514 >> 2] = $40; //@line 14078
  $515 = $ReallocAsyncCtx4 + 84 | 0; //@line 14079
  HEAP32[$515 >> 2] = $42; //@line 14080
  $516 = $ReallocAsyncCtx4 + 88 | 0; //@line 14081
  HEAP32[$516 >> 2] = $44; //@line 14082
  $517 = $ReallocAsyncCtx4 + 92 | 0; //@line 14083
  HEAP32[$517 >> 2] = $46; //@line 14084
  $518 = $ReallocAsyncCtx4 + 96 | 0; //@line 14085
  HEAP32[$518 >> 2] = $48; //@line 14086
  $519 = $ReallocAsyncCtx4 + 100 | 0; //@line 14087
  HEAP32[$519 >> 2] = $50; //@line 14088
  $520 = $ReallocAsyncCtx4 + 104 | 0; //@line 14089
  HEAP32[$520 >> 2] = $52; //@line 14090
  $521 = $ReallocAsyncCtx4 + 108 | 0; //@line 14091
  HEAP32[$521 >> 2] = $54; //@line 14092
  $522 = $ReallocAsyncCtx4 + 112 | 0; //@line 14093
  HEAP32[$522 >> 2] = $56; //@line 14094
  $523 = $ReallocAsyncCtx4 + 116 | 0; //@line 14095
  HEAP32[$523 >> 2] = $58; //@line 14096
  $524 = $ReallocAsyncCtx4 + 120 | 0; //@line 14097
  HEAP32[$524 >> 2] = $60; //@line 14098
  $525 = $ReallocAsyncCtx4 + 124 | 0; //@line 14099
  HEAP32[$525 >> 2] = $62; //@line 14100
  $526 = $ReallocAsyncCtx4 + 128 | 0; //@line 14101
  HEAP32[$526 >> 2] = $64; //@line 14102
  $527 = $ReallocAsyncCtx4 + 132 | 0; //@line 14103
  HEAP32[$527 >> 2] = $66; //@line 14104
  $528 = $ReallocAsyncCtx4 + 136 | 0; //@line 14105
  HEAP32[$528 >> 2] = $68; //@line 14106
  $529 = $ReallocAsyncCtx4 + 140 | 0; //@line 14107
  HEAP32[$529 >> 2] = $70; //@line 14108
  $530 = $ReallocAsyncCtx4 + 144 | 0; //@line 14109
  HEAP32[$530 >> 2] = $72; //@line 14110
  $531 = $ReallocAsyncCtx4 + 148 | 0; //@line 14111
  HEAP32[$531 >> 2] = $74; //@line 14112
  $532 = $ReallocAsyncCtx4 + 152 | 0; //@line 14113
  HEAP32[$532 >> 2] = $76; //@line 14114
  $533 = $ReallocAsyncCtx4 + 156 | 0; //@line 14115
  HEAP32[$533 >> 2] = $78; //@line 14116
  $534 = $ReallocAsyncCtx4 + 160 | 0; //@line 14117
  HEAP32[$534 >> 2] = $80; //@line 14118
  $535 = $ReallocAsyncCtx4 + 164 | 0; //@line 14119
  HEAP32[$535 >> 2] = $82; //@line 14120
  $536 = $ReallocAsyncCtx4 + 168 | 0; //@line 14121
  HEAP32[$536 >> 2] = $84; //@line 14122
  $537 = $ReallocAsyncCtx4 + 172 | 0; //@line 14123
  HEAP32[$537 >> 2] = $86; //@line 14124
  $538 = $ReallocAsyncCtx4 + 176 | 0; //@line 14125
  HEAP32[$538 >> 2] = $88; //@line 14126
  $539 = $ReallocAsyncCtx4 + 180 | 0; //@line 14127
  HEAP32[$539 >> 2] = $90; //@line 14128
  $540 = $ReallocAsyncCtx4 + 184 | 0; //@line 14129
  HEAP32[$540 >> 2] = $92; //@line 14130
  $541 = $ReallocAsyncCtx4 + 188 | 0; //@line 14131
  HEAP32[$541 >> 2] = $94; //@line 14132
  $542 = $ReallocAsyncCtx4 + 192 | 0; //@line 14133
  HEAP32[$542 >> 2] = $96; //@line 14134
  $543 = $ReallocAsyncCtx4 + 196 | 0; //@line 14135
  HEAP32[$543 >> 2] = $98; //@line 14136
  $544 = $ReallocAsyncCtx4 + 200 | 0; //@line 14137
  HEAP32[$544 >> 2] = $100; //@line 14138
  $545 = $ReallocAsyncCtx4 + 204 | 0; //@line 14139
  HEAP32[$545 >> 2] = $102; //@line 14140
  $546 = $ReallocAsyncCtx4 + 208 | 0; //@line 14141
  HEAP32[$546 >> 2] = $104; //@line 14142
  $547 = $ReallocAsyncCtx4 + 212 | 0; //@line 14143
  HEAP32[$547 >> 2] = $106; //@line 14144
  $548 = $ReallocAsyncCtx4 + 216 | 0; //@line 14145
  HEAP32[$548 >> 2] = $108; //@line 14146
  $549 = $ReallocAsyncCtx4 + 220 | 0; //@line 14147
  HEAP32[$549 >> 2] = $110; //@line 14148
  $550 = $ReallocAsyncCtx4 + 224 | 0; //@line 14149
  HEAP32[$550 >> 2] = $112; //@line 14150
  $551 = $ReallocAsyncCtx4 + 228 | 0; //@line 14151
  HEAP32[$551 >> 2] = $114; //@line 14152
  $552 = $ReallocAsyncCtx4 + 232 | 0; //@line 14153
  HEAP8[$552 >> 0] = $116; //@line 14154
  $553 = $ReallocAsyncCtx4 + 236 | 0; //@line 14155
  HEAP32[$553 >> 2] = $118; //@line 14156
  $554 = $ReallocAsyncCtx4 + 240 | 0; //@line 14157
  HEAP32[$554 >> 2] = $120; //@line 14158
  $555 = $ReallocAsyncCtx4 + 244 | 0; //@line 14159
  HEAP32[$555 >> 2] = $122; //@line 14160
  $556 = $ReallocAsyncCtx4 + 248 | 0; //@line 14161
  HEAP32[$556 >> 2] = $124; //@line 14162
  $557 = $ReallocAsyncCtx4 + 252 | 0; //@line 14163
  HEAP32[$557 >> 2] = $126; //@line 14164
  $558 = $ReallocAsyncCtx4 + 256 | 0; //@line 14165
  HEAP32[$558 >> 2] = $128; //@line 14166
  $559 = $ReallocAsyncCtx4 + 260 | 0; //@line 14167
  HEAP8[$559 >> 0] = $130; //@line 14168
  $560 = $ReallocAsyncCtx4 + 261 | 0; //@line 14169
  HEAP8[$560 >> 0] = $132; //@line 14170
  $561 = $ReallocAsyncCtx4 + 264 | 0; //@line 14171
  HEAP32[$561 >> 2] = $134; //@line 14172
  $562 = $ReallocAsyncCtx4 + 268 | 0; //@line 14173
  HEAP32[$562 >> 2] = $136; //@line 14174
  sp = STACKTOP; //@line 14175
  return;
 } else if ((label | 0) == 28) {
  HEAP8[$112 >> 0] = HEAP8[$128 + ($139 & 255) >> 0] | 0; //@line 14183
  $594 = $$0$be + 5 << 24 >> 24; //@line 14196
  HEAP32[$122 >> 2] = (HEAPU8[$128 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$128 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$128 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 14204
  $604 = HEAP32[(HEAP32[$136 >> 2] | 0) + 48 >> 2] | 0; //@line 14207
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(268) | 0; //@line 14208
  $605 = FUNCTION_TABLE_iii[$604 & 31]($124, $62) | 0; //@line 14209
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 580; //@line 14212
   $606 = $ReallocAsyncCtx5 + 4 | 0; //@line 14213
   HEAP32[$606 >> 2] = $2; //@line 14214
   $607 = $ReallocAsyncCtx5 + 8 | 0; //@line 14215
   HEAP32[$607 >> 2] = $4; //@line 14216
   $608 = $ReallocAsyncCtx5 + 12 | 0; //@line 14217
   HEAP32[$608 >> 2] = $6; //@line 14218
   $609 = $ReallocAsyncCtx5 + 16 | 0; //@line 14219
   HEAP32[$609 >> 2] = $8; //@line 14220
   $610 = $ReallocAsyncCtx5 + 20 | 0; //@line 14221
   HEAP32[$610 >> 2] = $10; //@line 14222
   $611 = $ReallocAsyncCtx5 + 24 | 0; //@line 14223
   HEAP32[$611 >> 2] = $16; //@line 14224
   $612 = $ReallocAsyncCtx5 + 28 | 0; //@line 14225
   HEAP32[$612 >> 2] = $14; //@line 14226
   $613 = $ReallocAsyncCtx5 + 32 | 0; //@line 14227
   HEAP32[$613 >> 2] = $18; //@line 14228
   $614 = $ReallocAsyncCtx5 + 36 | 0; //@line 14229
   HEAP32[$614 >> 2] = $20; //@line 14230
   $615 = $ReallocAsyncCtx5 + 40 | 0; //@line 14231
   HEAP32[$615 >> 2] = $22; //@line 14232
   $616 = $ReallocAsyncCtx5 + 44 | 0; //@line 14233
   HEAP32[$616 >> 2] = $24; //@line 14234
   $617 = $ReallocAsyncCtx5 + 48 | 0; //@line 14235
   HEAP32[$617 >> 2] = $26; //@line 14236
   $618 = $ReallocAsyncCtx5 + 52 | 0; //@line 14237
   HEAP32[$618 >> 2] = $28; //@line 14238
   $619 = $ReallocAsyncCtx5 + 56 | 0; //@line 14239
   HEAP32[$619 >> 2] = $30; //@line 14240
   $620 = $ReallocAsyncCtx5 + 60 | 0; //@line 14241
   HEAP32[$620 >> 2] = $34; //@line 14242
   $621 = $ReallocAsyncCtx5 + 64 | 0; //@line 14243
   HEAP32[$621 >> 2] = $36; //@line 14244
   $622 = $ReallocAsyncCtx5 + 68 | 0; //@line 14245
   HEAP32[$622 >> 2] = $38; //@line 14246
   $623 = $ReallocAsyncCtx5 + 72 | 0; //@line 14247
   HEAP32[$623 >> 2] = $40; //@line 14248
   $624 = $ReallocAsyncCtx5 + 76 | 0; //@line 14249
   HEAP32[$624 >> 2] = $42; //@line 14250
   $625 = $ReallocAsyncCtx5 + 80 | 0; //@line 14251
   HEAP32[$625 >> 2] = $44; //@line 14252
   $626 = $ReallocAsyncCtx5 + 84 | 0; //@line 14253
   HEAP32[$626 >> 2] = $46; //@line 14254
   $627 = $ReallocAsyncCtx5 + 88 | 0; //@line 14255
   HEAP32[$627 >> 2] = $48; //@line 14256
   $628 = $ReallocAsyncCtx5 + 92 | 0; //@line 14257
   HEAP32[$628 >> 2] = $50; //@line 14258
   $629 = $ReallocAsyncCtx5 + 96 | 0; //@line 14259
   HEAP32[$629 >> 2] = $52; //@line 14260
   $630 = $ReallocAsyncCtx5 + 100 | 0; //@line 14261
   HEAP32[$630 >> 2] = $54; //@line 14262
   $631 = $ReallocAsyncCtx5 + 104 | 0; //@line 14263
   HEAP32[$631 >> 2] = $56; //@line 14264
   $632 = $ReallocAsyncCtx5 + 108 | 0; //@line 14265
   HEAP32[$632 >> 2] = $58; //@line 14266
   $633 = $ReallocAsyncCtx5 + 112 | 0; //@line 14267
   HEAP32[$633 >> 2] = $60; //@line 14268
   $634 = $ReallocAsyncCtx5 + 116 | 0; //@line 14269
   HEAP32[$634 >> 2] = $62; //@line 14270
   $635 = $ReallocAsyncCtx5 + 120 | 0; //@line 14271
   HEAP32[$635 >> 2] = $64; //@line 14272
   $636 = $ReallocAsyncCtx5 + 124 | 0; //@line 14273
   HEAP32[$636 >> 2] = $66; //@line 14274
   $637 = $ReallocAsyncCtx5 + 128 | 0; //@line 14275
   HEAP32[$637 >> 2] = $68; //@line 14276
   $638 = $ReallocAsyncCtx5 + 132 | 0; //@line 14277
   HEAP8[$638 >> 0] = $594; //@line 14278
   $639 = $ReallocAsyncCtx5 + 136 | 0; //@line 14279
   HEAP32[$639 >> 2] = $70; //@line 14280
   $640 = $ReallocAsyncCtx5 + 140 | 0; //@line 14281
   HEAP32[$640 >> 2] = $72; //@line 14282
   $641 = $ReallocAsyncCtx5 + 144 | 0; //@line 14283
   HEAP32[$641 >> 2] = $74; //@line 14284
   $642 = $ReallocAsyncCtx5 + 148 | 0; //@line 14285
   HEAP32[$642 >> 2] = $76; //@line 14286
   $643 = $ReallocAsyncCtx5 + 152 | 0; //@line 14287
   HEAP32[$643 >> 2] = $78; //@line 14288
   $644 = $ReallocAsyncCtx5 + 156 | 0; //@line 14289
   HEAP32[$644 >> 2] = $80; //@line 14290
   $645 = $ReallocAsyncCtx5 + 160 | 0; //@line 14291
   HEAP32[$645 >> 2] = $82; //@line 14292
   $646 = $ReallocAsyncCtx5 + 164 | 0; //@line 14293
   HEAP32[$646 >> 2] = $84; //@line 14294
   $647 = $ReallocAsyncCtx5 + 168 | 0; //@line 14295
   HEAP32[$647 >> 2] = $86; //@line 14296
   $648 = $ReallocAsyncCtx5 + 172 | 0; //@line 14297
   HEAP32[$648 >> 2] = $88; //@line 14298
   $649 = $ReallocAsyncCtx5 + 176 | 0; //@line 14299
   HEAP32[$649 >> 2] = $90; //@line 14300
   $650 = $ReallocAsyncCtx5 + 180 | 0; //@line 14301
   HEAP32[$650 >> 2] = $92; //@line 14302
   $651 = $ReallocAsyncCtx5 + 184 | 0; //@line 14303
   HEAP32[$651 >> 2] = $94; //@line 14304
   $652 = $ReallocAsyncCtx5 + 188 | 0; //@line 14305
   HEAP32[$652 >> 2] = $96; //@line 14306
   $653 = $ReallocAsyncCtx5 + 192 | 0; //@line 14307
   HEAP32[$653 >> 2] = $98; //@line 14308
   $654 = $ReallocAsyncCtx5 + 196 | 0; //@line 14309
   HEAP32[$654 >> 2] = $100; //@line 14310
   $655 = $ReallocAsyncCtx5 + 200 | 0; //@line 14311
   HEAP32[$655 >> 2] = $102; //@line 14312
   $656 = $ReallocAsyncCtx5 + 204 | 0; //@line 14313
   HEAP32[$656 >> 2] = $104; //@line 14314
   $657 = $ReallocAsyncCtx5 + 208 | 0; //@line 14315
   HEAP32[$657 >> 2] = $106; //@line 14316
   $658 = $ReallocAsyncCtx5 + 212 | 0; //@line 14317
   HEAP32[$658 >> 2] = $108; //@line 14318
   $659 = $ReallocAsyncCtx5 + 216 | 0; //@line 14319
   HEAP32[$659 >> 2] = $110; //@line 14320
   $660 = $ReallocAsyncCtx5 + 220 | 0; //@line 14321
   HEAP32[$660 >> 2] = $112; //@line 14322
   $661 = $ReallocAsyncCtx5 + 224 | 0; //@line 14323
   HEAP32[$661 >> 2] = $114; //@line 14324
   $662 = $ReallocAsyncCtx5 + 228 | 0; //@line 14325
   HEAP8[$662 >> 0] = $116; //@line 14326
   $663 = $ReallocAsyncCtx5 + 232 | 0; //@line 14327
   HEAP32[$663 >> 2] = $118; //@line 14328
   $664 = $ReallocAsyncCtx5 + 236 | 0; //@line 14329
   HEAP32[$664 >> 2] = $120; //@line 14330
   $665 = $ReallocAsyncCtx5 + 240 | 0; //@line 14331
   HEAP32[$665 >> 2] = $122; //@line 14332
   $666 = $ReallocAsyncCtx5 + 244 | 0; //@line 14333
   HEAP32[$666 >> 2] = $124; //@line 14334
   $667 = $ReallocAsyncCtx5 + 248 | 0; //@line 14335
   HEAP32[$667 >> 2] = $126; //@line 14336
   $668 = $ReallocAsyncCtx5 + 252 | 0; //@line 14337
   HEAP32[$668 >> 2] = $128; //@line 14338
   $669 = $ReallocAsyncCtx5 + 256 | 0; //@line 14339
   HEAP8[$669 >> 0] = $130; //@line 14340
   $670 = $ReallocAsyncCtx5 + 257 | 0; //@line 14341
   HEAP8[$670 >> 0] = $132; //@line 14342
   $671 = $ReallocAsyncCtx5 + 260 | 0; //@line 14343
   HEAP32[$671 >> 2] = $134; //@line 14344
   $672 = $ReallocAsyncCtx5 + 264 | 0; //@line 14345
   HEAP32[$672 >> 2] = $136; //@line 14346
   sp = STACKTOP; //@line 14347
   return;
  }
  HEAP8[___async_retval >> 0] = $605; //@line 14351
  ___async_unwind = 0; //@line 14352
  HEAP32[$ReallocAsyncCtx5 >> 2] = 580; //@line 14353
  $606 = $ReallocAsyncCtx5 + 4 | 0; //@line 14354
  HEAP32[$606 >> 2] = $2; //@line 14355
  $607 = $ReallocAsyncCtx5 + 8 | 0; //@line 14356
  HEAP32[$607 >> 2] = $4; //@line 14357
  $608 = $ReallocAsyncCtx5 + 12 | 0; //@line 14358
  HEAP32[$608 >> 2] = $6; //@line 14359
  $609 = $ReallocAsyncCtx5 + 16 | 0; //@line 14360
  HEAP32[$609 >> 2] = $8; //@line 14361
  $610 = $ReallocAsyncCtx5 + 20 | 0; //@line 14362
  HEAP32[$610 >> 2] = $10; //@line 14363
  $611 = $ReallocAsyncCtx5 + 24 | 0; //@line 14364
  HEAP32[$611 >> 2] = $16; //@line 14365
  $612 = $ReallocAsyncCtx5 + 28 | 0; //@line 14366
  HEAP32[$612 >> 2] = $14; //@line 14367
  $613 = $ReallocAsyncCtx5 + 32 | 0; //@line 14368
  HEAP32[$613 >> 2] = $18; //@line 14369
  $614 = $ReallocAsyncCtx5 + 36 | 0; //@line 14370
  HEAP32[$614 >> 2] = $20; //@line 14371
  $615 = $ReallocAsyncCtx5 + 40 | 0; //@line 14372
  HEAP32[$615 >> 2] = $22; //@line 14373
  $616 = $ReallocAsyncCtx5 + 44 | 0; //@line 14374
  HEAP32[$616 >> 2] = $24; //@line 14375
  $617 = $ReallocAsyncCtx5 + 48 | 0; //@line 14376
  HEAP32[$617 >> 2] = $26; //@line 14377
  $618 = $ReallocAsyncCtx5 + 52 | 0; //@line 14378
  HEAP32[$618 >> 2] = $28; //@line 14379
  $619 = $ReallocAsyncCtx5 + 56 | 0; //@line 14380
  HEAP32[$619 >> 2] = $30; //@line 14381
  $620 = $ReallocAsyncCtx5 + 60 | 0; //@line 14382
  HEAP32[$620 >> 2] = $34; //@line 14383
  $621 = $ReallocAsyncCtx5 + 64 | 0; //@line 14384
  HEAP32[$621 >> 2] = $36; //@line 14385
  $622 = $ReallocAsyncCtx5 + 68 | 0; //@line 14386
  HEAP32[$622 >> 2] = $38; //@line 14387
  $623 = $ReallocAsyncCtx5 + 72 | 0; //@line 14388
  HEAP32[$623 >> 2] = $40; //@line 14389
  $624 = $ReallocAsyncCtx5 + 76 | 0; //@line 14390
  HEAP32[$624 >> 2] = $42; //@line 14391
  $625 = $ReallocAsyncCtx5 + 80 | 0; //@line 14392
  HEAP32[$625 >> 2] = $44; //@line 14393
  $626 = $ReallocAsyncCtx5 + 84 | 0; //@line 14394
  HEAP32[$626 >> 2] = $46; //@line 14395
  $627 = $ReallocAsyncCtx5 + 88 | 0; //@line 14396
  HEAP32[$627 >> 2] = $48; //@line 14397
  $628 = $ReallocAsyncCtx5 + 92 | 0; //@line 14398
  HEAP32[$628 >> 2] = $50; //@line 14399
  $629 = $ReallocAsyncCtx5 + 96 | 0; //@line 14400
  HEAP32[$629 >> 2] = $52; //@line 14401
  $630 = $ReallocAsyncCtx5 + 100 | 0; //@line 14402
  HEAP32[$630 >> 2] = $54; //@line 14403
  $631 = $ReallocAsyncCtx5 + 104 | 0; //@line 14404
  HEAP32[$631 >> 2] = $56; //@line 14405
  $632 = $ReallocAsyncCtx5 + 108 | 0; //@line 14406
  HEAP32[$632 >> 2] = $58; //@line 14407
  $633 = $ReallocAsyncCtx5 + 112 | 0; //@line 14408
  HEAP32[$633 >> 2] = $60; //@line 14409
  $634 = $ReallocAsyncCtx5 + 116 | 0; //@line 14410
  HEAP32[$634 >> 2] = $62; //@line 14411
  $635 = $ReallocAsyncCtx5 + 120 | 0; //@line 14412
  HEAP32[$635 >> 2] = $64; //@line 14413
  $636 = $ReallocAsyncCtx5 + 124 | 0; //@line 14414
  HEAP32[$636 >> 2] = $66; //@line 14415
  $637 = $ReallocAsyncCtx5 + 128 | 0; //@line 14416
  HEAP32[$637 >> 2] = $68; //@line 14417
  $638 = $ReallocAsyncCtx5 + 132 | 0; //@line 14418
  HEAP8[$638 >> 0] = $594; //@line 14419
  $639 = $ReallocAsyncCtx5 + 136 | 0; //@line 14420
  HEAP32[$639 >> 2] = $70; //@line 14421
  $640 = $ReallocAsyncCtx5 + 140 | 0; //@line 14422
  HEAP32[$640 >> 2] = $72; //@line 14423
  $641 = $ReallocAsyncCtx5 + 144 | 0; //@line 14424
  HEAP32[$641 >> 2] = $74; //@line 14425
  $642 = $ReallocAsyncCtx5 + 148 | 0; //@line 14426
  HEAP32[$642 >> 2] = $76; //@line 14427
  $643 = $ReallocAsyncCtx5 + 152 | 0; //@line 14428
  HEAP32[$643 >> 2] = $78; //@line 14429
  $644 = $ReallocAsyncCtx5 + 156 | 0; //@line 14430
  HEAP32[$644 >> 2] = $80; //@line 14431
  $645 = $ReallocAsyncCtx5 + 160 | 0; //@line 14432
  HEAP32[$645 >> 2] = $82; //@line 14433
  $646 = $ReallocAsyncCtx5 + 164 | 0; //@line 14434
  HEAP32[$646 >> 2] = $84; //@line 14435
  $647 = $ReallocAsyncCtx5 + 168 | 0; //@line 14436
  HEAP32[$647 >> 2] = $86; //@line 14437
  $648 = $ReallocAsyncCtx5 + 172 | 0; //@line 14438
  HEAP32[$648 >> 2] = $88; //@line 14439
  $649 = $ReallocAsyncCtx5 + 176 | 0; //@line 14440
  HEAP32[$649 >> 2] = $90; //@line 14441
  $650 = $ReallocAsyncCtx5 + 180 | 0; //@line 14442
  HEAP32[$650 >> 2] = $92; //@line 14443
  $651 = $ReallocAsyncCtx5 + 184 | 0; //@line 14444
  HEAP32[$651 >> 2] = $94; //@line 14445
  $652 = $ReallocAsyncCtx5 + 188 | 0; //@line 14446
  HEAP32[$652 >> 2] = $96; //@line 14447
  $653 = $ReallocAsyncCtx5 + 192 | 0; //@line 14448
  HEAP32[$653 >> 2] = $98; //@line 14449
  $654 = $ReallocAsyncCtx5 + 196 | 0; //@line 14450
  HEAP32[$654 >> 2] = $100; //@line 14451
  $655 = $ReallocAsyncCtx5 + 200 | 0; //@line 14452
  HEAP32[$655 >> 2] = $102; //@line 14453
  $656 = $ReallocAsyncCtx5 + 204 | 0; //@line 14454
  HEAP32[$656 >> 2] = $104; //@line 14455
  $657 = $ReallocAsyncCtx5 + 208 | 0; //@line 14456
  HEAP32[$657 >> 2] = $106; //@line 14457
  $658 = $ReallocAsyncCtx5 + 212 | 0; //@line 14458
  HEAP32[$658 >> 2] = $108; //@line 14459
  $659 = $ReallocAsyncCtx5 + 216 | 0; //@line 14460
  HEAP32[$659 >> 2] = $110; //@line 14461
  $660 = $ReallocAsyncCtx5 + 220 | 0; //@line 14462
  HEAP32[$660 >> 2] = $112; //@line 14463
  $661 = $ReallocAsyncCtx5 + 224 | 0; //@line 14464
  HEAP32[$661 >> 2] = $114; //@line 14465
  $662 = $ReallocAsyncCtx5 + 228 | 0; //@line 14466
  HEAP8[$662 >> 0] = $116; //@line 14467
  $663 = $ReallocAsyncCtx5 + 232 | 0; //@line 14468
  HEAP32[$663 >> 2] = $118; //@line 14469
  $664 = $ReallocAsyncCtx5 + 236 | 0; //@line 14470
  HEAP32[$664 >> 2] = $120; //@line 14471
  $665 = $ReallocAsyncCtx5 + 240 | 0; //@line 14472
  HEAP32[$665 >> 2] = $122; //@line 14473
  $666 = $ReallocAsyncCtx5 + 244 | 0; //@line 14474
  HEAP32[$666 >> 2] = $124; //@line 14475
  $667 = $ReallocAsyncCtx5 + 248 | 0; //@line 14476
  HEAP32[$667 >> 2] = $126; //@line 14477
  $668 = $ReallocAsyncCtx5 + 252 | 0; //@line 14478
  HEAP32[$668 >> 2] = $128; //@line 14479
  $669 = $ReallocAsyncCtx5 + 256 | 0; //@line 14480
  HEAP8[$669 >> 0] = $130; //@line 14481
  $670 = $ReallocAsyncCtx5 + 257 | 0; //@line 14482
  HEAP8[$670 >> 0] = $132; //@line 14483
  $671 = $ReallocAsyncCtx5 + 260 | 0; //@line 14484
  HEAP32[$671 >> 2] = $134; //@line 14485
  $672 = $ReallocAsyncCtx5 + 264 | 0; //@line 14486
  HEAP32[$672 >> 2] = $136; //@line 14487
  sp = STACKTOP; //@line 14488
  return;
 } else if ((label | 0) == 32) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 14493
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_344($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i108 = 0, $$096$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $137 = 0, $14 = 0, $148 = 0, $149 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $231 = 0, $234 = 0, $239 = 0, $24 = 0, $247 = 0, $26 = 0, $266 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $347 = 0, $348 = 0, $36 = 0, $38 = 0, $385 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $462 = 0, $463 = 0, $473 = 0, $477 = 0, $48 = 0, $481 = 0, $484 = 0, $490 = 0, $493 = 0, $494 = 0, $50 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $58 = 0, $590 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10675
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10677
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10679
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10681
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10683
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10685
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10687
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 10689
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 10691
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 10693
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 10695
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 10697
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 10699
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 10701
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 10703
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 10705
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 10707
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 10709
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 10711
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 10713
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 10715
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 10717
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 10719
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 10721
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 10723
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 10725
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 10727
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 10729
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 10731
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 10733
 $60 = HEAP8[$0 + 120 >> 0] | 0; //@line 10735
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 10737
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 10739
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 10741
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 10743
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 10745
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 10747
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 10749
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 10751
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 10753
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 10755
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 10757
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 10759
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 10761
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 10763
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 10765
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 10767
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 10769
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 10771
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 10773
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 10775
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 10777
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 10779
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 10781
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 10783
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 10785
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 10787
 $114 = HEAP8[$0 + 228 >> 0] | 0; //@line 10789
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 10791
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 10793
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 10795
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 10797
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 10799
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 10801
 $128 = HEAP8[$0 + 256 >> 0] | 0; //@line 10803
 $130 = HEAP8[$0 + 257 >> 0] | 0; //@line 10805
 $132 = HEAP32[$0 + 260 >> 2] | 0; //@line 10807
 $134 = HEAP32[$0 + 264 >> 2] | 0; //@line 10809
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 10811
 $462 = HEAP8[$6 >> 0] | 0; //@line 10813
 $463 = $462 & 255; //@line 10814
 if (((-128 - (HEAP8[$14 >> 0] | 0) & 255) + -1 | 0) > ($463 | 0)) {
  HEAP8[$102 + 4 + $463 >> 0] = 7; //@line 10825
  HEAP8[$6 >> 0] = $462 + 2 << 24 >> 24; //@line 10826
  HEAP8[($462 + 1 & 255) + ($102 + 4) >> 0] = $AsyncRetVal; //@line 10827
  HEAP8[$118 >> 0] = 1; //@line 10828
  $$0$i108 = 0; //@line 10829
 } else {
  $$0$i108 = -1e3; //@line 10831
 }
 $$0$be = $60; //@line 10833
 $$096$be = $$0$i108; //@line 10833
 L5 : while (1) {
  if (($$0$be & 255) >= ($130 & 255)) {
   label = 31; //@line 10837
   break;
  }
  $137 = $$0$be + 1 << 24 >> 24; //@line 10841
  switch (HEAP8[$126 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 10846
    break L5;
    break;
   }
  case 5:
   {
    label = 9; //@line 10851
    break L5;
    break;
   }
  case 7:
   {
    label = 14; //@line 10856
    break L5;
    break;
   }
  case 9:
   {
    label = 22; //@line 10861
    break L5;
    break;
   }
  case 10:
   {
    label = 27; //@line 10866
    break L5;
    break;
   }
  case 2:
   {
    HEAP32[$18 >> 2] = 0; //@line 10871
    HEAP8[$28 >> 0] = HEAP8[$126 + ($137 & 255) >> 0] | 0; //@line 10876
    HEAP8[$2 >> 0] = HEAP8[$126 + ($$0$be + 2 & 255) >> 0] | 0; //@line 10881
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 10882
    continue L5;
    break;
   }
  case 4:
   {
    $231 = $$0$be + 2 << 24 >> 24; //@line 10887
    $234 = HEAP8[$126 + ($137 & 255) >> 0] | 0; //@line 10890
    HEAP8[$108 >> 0] = $234; //@line 10891
    HEAP16[$100 >> 1] = 1 << ($234 & 255); //@line 10895
    $239 = HEAP8[$6 >> 0] | 0; //@line 10897
    if (($239 & 255) >= (-128 - (HEAP8[$14 >> 0] | 0) & 255)) {
     $$0$be = $231; //@line 10901
     $$096$be = -1e3; //@line 10901
     continue L5;
    }
    HEAP8[$6 >> 0] = $239 + 1 << 24 >> 24; //@line 10907
    HEAP8[($239 & 255) + ($102 + 4) >> 0] = 4; //@line 10908
    HEAP8[$118 >> 0] = 1; //@line 10909
    $$0$be = $231; //@line 10910
    $$096$be = 0; //@line 10910
    continue L5;
    break;
   }
  case 6:
   {
    $347 = HEAP8[$6 >> 0] | 0; //@line 10916
    $348 = $347 & 255; //@line 10917
    if (((-128 - (HEAP8[$14 >> 0] | 0) & 255) + -2 | 0) <= ($348 | 0)) {
     $$0$be = $137; //@line 10923
     $$096$be = -1e3; //@line 10923
     continue L5;
    }
    HEAP8[$102 + 4 + $348 >> 0] = 6; //@line 10928
    HEAP8[($347 + 1 & 255) + ($102 + 4) >> 0] = -1; //@line 10932
    HEAP8[$6 >> 0] = $347 + 3 << 24 >> 24; //@line 10934
    HEAP8[($347 + 2 & 255) + ($102 + 4) >> 0] = $114; //@line 10937
    HEAP8[$118 >> 0] = 1; //@line 10938
    $$0$be = $137; //@line 10939
    $$096$be = 0; //@line 10939
    continue L5;
    break;
   }
  case 8:
   {
    $473 = $$0$be + 2 << 24 >> 24; //@line 10944
    $477 = HEAP8[$126 + ($137 & 255) >> 0] & 15; //@line 10948
    $481 = ($477 + ($477 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 10953
    HEAP32[$40 >> 2] = $481; //@line 10954
    HEAP32[$48 >> 2] = $481 + 1e3; //@line 10956
    $484 = HEAP8[$6 >> 0] | 0; //@line 10958
    if (($484 & 255) >= (-128 - (HEAP8[$14 >> 0] | 0) & 255)) {
     $$0$be = $473; //@line 10962
     $$096$be = -1e3; //@line 10962
     continue L5;
    }
    HEAP8[$6 >> 0] = $484 + 1 << 24 >> 24; //@line 10968
    HEAP8[($484 & 255) + ($102 + 4) >> 0] = 8; //@line 10969
    HEAP8[$32 >> 0] = 1; //@line 10970
    HEAP8[$118 >> 0] = 1; //@line 10971
    $$0$be = $473; //@line 10972
    $$096$be = 0; //@line 10972
    continue L5;
    break;
   }
  default:
   {
    $$0$be = $137; //@line 10977
    $$096$be = -1013; //@line 10977
    continue L5;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$106 >> 0] = 0; //@line 10983
  HEAP8[$62 >> 0] = 0; //@line 10984
  HEAP8[$50 >> 0] = 0; //@line 10985
  HEAP8[$88 >> 0] = 0; //@line 10986
  $148 = $137 & 255; //@line 10987
  $149 = $148 + -1 | 0; //@line 10988
  HEAP32[$132 >> 2] = $126 + $149; //@line 10990
  HEAP8[$124 >> 0] = $64 - $149; //@line 10993
  HEAP8[$94 >> 0] = HEAP8[$112 >> 0] | 0; //@line 10995
  HEAP8[$78 >> 0] = HEAP8[$82 >> 0] | 0; //@line 10997
  HEAP8[$66 >> 0] = HEAP8[$68 >> 0] | 0; //@line 10999
  HEAP8[$42 >> 0] = HEAP8[$52 >> 0] | 0; //@line 11001
  HEAP8[$20 >> 0] = HEAP8[$36 >> 0] | 0; //@line 11003
  $160 = HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] | 0; //@line 11006
  $ReallocAsyncCtx = _emscripten_realloc_async_context(272) | 0; //@line 11007
  $161 = FUNCTION_TABLE_iiiiiii[$160 & 3]($122, $116, $106, $62, $50, $88) | 0; //@line 11008
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 576; //@line 11011
   $162 = $ReallocAsyncCtx + 4 | 0; //@line 11012
   HEAP32[$162 >> 2] = $2; //@line 11013
   $163 = $ReallocAsyncCtx + 8 | 0; //@line 11014
   HEAP32[$163 >> 2] = $4; //@line 11015
   $164 = $ReallocAsyncCtx + 12 | 0; //@line 11016
   HEAP32[$164 >> 2] = $6; //@line 11017
   $165 = $ReallocAsyncCtx + 16 | 0; //@line 11018
   HEAP32[$165 >> 2] = $8; //@line 11019
   $166 = $ReallocAsyncCtx + 20 | 0; //@line 11020
   HEAP32[$166 >> 2] = $10; //@line 11021
   $167 = $ReallocAsyncCtx + 24 | 0; //@line 11022
   HEAP32[$167 >> 2] = $$096$be; //@line 11023
   $168 = $ReallocAsyncCtx + 28 | 0; //@line 11024
   HEAP32[$168 >> 2] = $14; //@line 11025
   $169 = $ReallocAsyncCtx + 32 | 0; //@line 11026
   HEAP32[$169 >> 2] = $12; //@line 11027
   $170 = $ReallocAsyncCtx + 36 | 0; //@line 11028
   HEAP32[$170 >> 2] = $16; //@line 11029
   $171 = $ReallocAsyncCtx + 40 | 0; //@line 11030
   HEAP32[$171 >> 2] = $18; //@line 11031
   $172 = $ReallocAsyncCtx + 44 | 0; //@line 11032
   HEAP32[$172 >> 2] = $20; //@line 11033
   $173 = $ReallocAsyncCtx + 48 | 0; //@line 11034
   HEAP32[$173 >> 2] = $22; //@line 11035
   $174 = $ReallocAsyncCtx + 52 | 0; //@line 11036
   HEAP32[$174 >> 2] = $24; //@line 11037
   $175 = $ReallocAsyncCtx + 56 | 0; //@line 11038
   HEAP32[$175 >> 2] = $26; //@line 11039
   $176 = $ReallocAsyncCtx + 60 | 0; //@line 11040
   HEAP32[$176 >> 2] = $28; //@line 11041
   $177 = $ReallocAsyncCtx + 64 | 0; //@line 11042
   HEAP32[$177 >> 2] = $30; //@line 11043
   $178 = $ReallocAsyncCtx + 68 | 0; //@line 11044
   HEAP32[$178 >> 2] = $32; //@line 11045
   $179 = $ReallocAsyncCtx + 72 | 0; //@line 11046
   HEAP32[$179 >> 2] = $34; //@line 11047
   $180 = $ReallocAsyncCtx + 76 | 0; //@line 11048
   HEAP32[$180 >> 2] = $36; //@line 11049
   $181 = $ReallocAsyncCtx + 80 | 0; //@line 11050
   HEAP32[$181 >> 2] = $38; //@line 11051
   $182 = $ReallocAsyncCtx + 84 | 0; //@line 11052
   HEAP32[$182 >> 2] = $40; //@line 11053
   $183 = $ReallocAsyncCtx + 88 | 0; //@line 11054
   HEAP32[$183 >> 2] = $42; //@line 11055
   $184 = $ReallocAsyncCtx + 92 | 0; //@line 11056
   HEAP32[$184 >> 2] = $44; //@line 11057
   $185 = $ReallocAsyncCtx + 96 | 0; //@line 11058
   HEAP32[$185 >> 2] = $46; //@line 11059
   $186 = $ReallocAsyncCtx + 100 | 0; //@line 11060
   HEAP32[$186 >> 2] = $48; //@line 11061
   $187 = $ReallocAsyncCtx + 104 | 0; //@line 11062
   HEAP32[$187 >> 2] = $50; //@line 11063
   $188 = $ReallocAsyncCtx + 108 | 0; //@line 11064
   HEAP32[$188 >> 2] = $52; //@line 11065
   $189 = $ReallocAsyncCtx + 112 | 0; //@line 11066
   HEAP32[$189 >> 2] = $54; //@line 11067
   $190 = $ReallocAsyncCtx + 116 | 0; //@line 11068
   HEAP32[$190 >> 2] = $56; //@line 11069
   $191 = $ReallocAsyncCtx + 120 | 0; //@line 11070
   HEAP32[$191 >> 2] = $58; //@line 11071
   $192 = $ReallocAsyncCtx + 124 | 0; //@line 11072
   HEAP32[$192 >> 2] = $64; //@line 11073
   $193 = $ReallocAsyncCtx + 128 | 0; //@line 11074
   HEAP32[$193 >> 2] = $62; //@line 11075
   $194 = $ReallocAsyncCtx + 132 | 0; //@line 11076
   HEAP32[$194 >> 2] = $66; //@line 11077
   $195 = $ReallocAsyncCtx + 136 | 0; //@line 11078
   HEAP32[$195 >> 2] = $70; //@line 11079
   $196 = $ReallocAsyncCtx + 140 | 0; //@line 11080
   HEAP32[$196 >> 2] = $68; //@line 11081
   $197 = $ReallocAsyncCtx + 144 | 0; //@line 11082
   HEAP32[$197 >> 2] = $72; //@line 11083
   $198 = $ReallocAsyncCtx + 148 | 0; //@line 11084
   HEAP32[$198 >> 2] = $74; //@line 11085
   $199 = $ReallocAsyncCtx + 152 | 0; //@line 11086
   HEAP32[$199 >> 2] = $76; //@line 11087
   $200 = $ReallocAsyncCtx + 156 | 0; //@line 11088
   HEAP32[$200 >> 2] = $78; //@line 11089
   $201 = $ReallocAsyncCtx + 160 | 0; //@line 11090
   HEAP32[$201 >> 2] = $80; //@line 11091
   $202 = $ReallocAsyncCtx + 164 | 0; //@line 11092
   HEAP32[$202 >> 2] = $82; //@line 11093
   $203 = $ReallocAsyncCtx + 168 | 0; //@line 11094
   HEAP32[$203 >> 2] = $84; //@line 11095
   $204 = $ReallocAsyncCtx + 172 | 0; //@line 11096
   HEAP32[$204 >> 2] = $86; //@line 11097
   $205 = $ReallocAsyncCtx + 176 | 0; //@line 11098
   HEAP32[$205 >> 2] = $88; //@line 11099
   $206 = $ReallocAsyncCtx + 180 | 0; //@line 11100
   HEAP32[$206 >> 2] = $148; //@line 11101
   $207 = $ReallocAsyncCtx + 184 | 0; //@line 11102
   HEAP32[$207 >> 2] = $90; //@line 11103
   $208 = $ReallocAsyncCtx + 188 | 0; //@line 11104
   HEAP32[$208 >> 2] = $92; //@line 11105
   $209 = $ReallocAsyncCtx + 192 | 0; //@line 11106
   HEAP32[$209 >> 2] = $94; //@line 11107
   $210 = $ReallocAsyncCtx + 196 | 0; //@line 11108
   HEAP32[$210 >> 2] = $96; //@line 11109
   $211 = $ReallocAsyncCtx + 200 | 0; //@line 11110
   HEAP32[$211 >> 2] = $98; //@line 11111
   $212 = $ReallocAsyncCtx + 204 | 0; //@line 11112
   HEAP32[$212 >> 2] = $100; //@line 11113
   $213 = $ReallocAsyncCtx + 208 | 0; //@line 11114
   HEAP32[$213 >> 2] = $102; //@line 11115
   $214 = $ReallocAsyncCtx + 212 | 0; //@line 11116
   HEAP32[$214 >> 2] = $104; //@line 11117
   $215 = $ReallocAsyncCtx + 216 | 0; //@line 11118
   HEAP32[$215 >> 2] = $106; //@line 11119
   $216 = $ReallocAsyncCtx + 220 | 0; //@line 11120
   HEAP32[$216 >> 2] = $108; //@line 11121
   $217 = $ReallocAsyncCtx + 224 | 0; //@line 11122
   HEAP32[$217 >> 2] = $110; //@line 11123
   $218 = $ReallocAsyncCtx + 228 | 0; //@line 11124
   HEAP32[$218 >> 2] = $112; //@line 11125
   $219 = $ReallocAsyncCtx + 232 | 0; //@line 11126
   HEAP8[$219 >> 0] = $114; //@line 11127
   $220 = $ReallocAsyncCtx + 236 | 0; //@line 11128
   HEAP32[$220 >> 2] = $116; //@line 11129
   $221 = $ReallocAsyncCtx + 240 | 0; //@line 11130
   HEAP32[$221 >> 2] = $118; //@line 11131
   $222 = $ReallocAsyncCtx + 244 | 0; //@line 11132
   HEAP32[$222 >> 2] = $120; //@line 11133
   $223 = $ReallocAsyncCtx + 248 | 0; //@line 11134
   HEAP32[$223 >> 2] = $122; //@line 11135
   $224 = $ReallocAsyncCtx + 252 | 0; //@line 11136
   HEAP32[$224 >> 2] = $124; //@line 11137
   $225 = $ReallocAsyncCtx + 256 | 0; //@line 11138
   HEAP32[$225 >> 2] = $126; //@line 11139
   $226 = $ReallocAsyncCtx + 260 | 0; //@line 11140
   HEAP8[$226 >> 0] = $128; //@line 11141
   $227 = $ReallocAsyncCtx + 261 | 0; //@line 11142
   HEAP8[$227 >> 0] = $130; //@line 11143
   $228 = $ReallocAsyncCtx + 264 | 0; //@line 11144
   HEAP32[$228 >> 2] = $132; //@line 11145
   $229 = $ReallocAsyncCtx + 268 | 0; //@line 11146
   HEAP32[$229 >> 2] = $134; //@line 11147
   sp = STACKTOP; //@line 11148
   return;
  }
  HEAP8[___async_retval >> 0] = $161; //@line 11152
  ___async_unwind = 0; //@line 11153
  HEAP32[$ReallocAsyncCtx >> 2] = 576; //@line 11154
  $162 = $ReallocAsyncCtx + 4 | 0; //@line 11155
  HEAP32[$162 >> 2] = $2; //@line 11156
  $163 = $ReallocAsyncCtx + 8 | 0; //@line 11157
  HEAP32[$163 >> 2] = $4; //@line 11158
  $164 = $ReallocAsyncCtx + 12 | 0; //@line 11159
  HEAP32[$164 >> 2] = $6; //@line 11160
  $165 = $ReallocAsyncCtx + 16 | 0; //@line 11161
  HEAP32[$165 >> 2] = $8; //@line 11162
  $166 = $ReallocAsyncCtx + 20 | 0; //@line 11163
  HEAP32[$166 >> 2] = $10; //@line 11164
  $167 = $ReallocAsyncCtx + 24 | 0; //@line 11165
  HEAP32[$167 >> 2] = $$096$be; //@line 11166
  $168 = $ReallocAsyncCtx + 28 | 0; //@line 11167
  HEAP32[$168 >> 2] = $14; //@line 11168
  $169 = $ReallocAsyncCtx + 32 | 0; //@line 11169
  HEAP32[$169 >> 2] = $12; //@line 11170
  $170 = $ReallocAsyncCtx + 36 | 0; //@line 11171
  HEAP32[$170 >> 2] = $16; //@line 11172
  $171 = $ReallocAsyncCtx + 40 | 0; //@line 11173
  HEAP32[$171 >> 2] = $18; //@line 11174
  $172 = $ReallocAsyncCtx + 44 | 0; //@line 11175
  HEAP32[$172 >> 2] = $20; //@line 11176
  $173 = $ReallocAsyncCtx + 48 | 0; //@line 11177
  HEAP32[$173 >> 2] = $22; //@line 11178
  $174 = $ReallocAsyncCtx + 52 | 0; //@line 11179
  HEAP32[$174 >> 2] = $24; //@line 11180
  $175 = $ReallocAsyncCtx + 56 | 0; //@line 11181
  HEAP32[$175 >> 2] = $26; //@line 11182
  $176 = $ReallocAsyncCtx + 60 | 0; //@line 11183
  HEAP32[$176 >> 2] = $28; //@line 11184
  $177 = $ReallocAsyncCtx + 64 | 0; //@line 11185
  HEAP32[$177 >> 2] = $30; //@line 11186
  $178 = $ReallocAsyncCtx + 68 | 0; //@line 11187
  HEAP32[$178 >> 2] = $32; //@line 11188
  $179 = $ReallocAsyncCtx + 72 | 0; //@line 11189
  HEAP32[$179 >> 2] = $34; //@line 11190
  $180 = $ReallocAsyncCtx + 76 | 0; //@line 11191
  HEAP32[$180 >> 2] = $36; //@line 11192
  $181 = $ReallocAsyncCtx + 80 | 0; //@line 11193
  HEAP32[$181 >> 2] = $38; //@line 11194
  $182 = $ReallocAsyncCtx + 84 | 0; //@line 11195
  HEAP32[$182 >> 2] = $40; //@line 11196
  $183 = $ReallocAsyncCtx + 88 | 0; //@line 11197
  HEAP32[$183 >> 2] = $42; //@line 11198
  $184 = $ReallocAsyncCtx + 92 | 0; //@line 11199
  HEAP32[$184 >> 2] = $44; //@line 11200
  $185 = $ReallocAsyncCtx + 96 | 0; //@line 11201
  HEAP32[$185 >> 2] = $46; //@line 11202
  $186 = $ReallocAsyncCtx + 100 | 0; //@line 11203
  HEAP32[$186 >> 2] = $48; //@line 11204
  $187 = $ReallocAsyncCtx + 104 | 0; //@line 11205
  HEAP32[$187 >> 2] = $50; //@line 11206
  $188 = $ReallocAsyncCtx + 108 | 0; //@line 11207
  HEAP32[$188 >> 2] = $52; //@line 11208
  $189 = $ReallocAsyncCtx + 112 | 0; //@line 11209
  HEAP32[$189 >> 2] = $54; //@line 11210
  $190 = $ReallocAsyncCtx + 116 | 0; //@line 11211
  HEAP32[$190 >> 2] = $56; //@line 11212
  $191 = $ReallocAsyncCtx + 120 | 0; //@line 11213
  HEAP32[$191 >> 2] = $58; //@line 11214
  $192 = $ReallocAsyncCtx + 124 | 0; //@line 11215
  HEAP32[$192 >> 2] = $64; //@line 11216
  $193 = $ReallocAsyncCtx + 128 | 0; //@line 11217
  HEAP32[$193 >> 2] = $62; //@line 11218
  $194 = $ReallocAsyncCtx + 132 | 0; //@line 11219
  HEAP32[$194 >> 2] = $66; //@line 11220
  $195 = $ReallocAsyncCtx + 136 | 0; //@line 11221
  HEAP32[$195 >> 2] = $70; //@line 11222
  $196 = $ReallocAsyncCtx + 140 | 0; //@line 11223
  HEAP32[$196 >> 2] = $68; //@line 11224
  $197 = $ReallocAsyncCtx + 144 | 0; //@line 11225
  HEAP32[$197 >> 2] = $72; //@line 11226
  $198 = $ReallocAsyncCtx + 148 | 0; //@line 11227
  HEAP32[$198 >> 2] = $74; //@line 11228
  $199 = $ReallocAsyncCtx + 152 | 0; //@line 11229
  HEAP32[$199 >> 2] = $76; //@line 11230
  $200 = $ReallocAsyncCtx + 156 | 0; //@line 11231
  HEAP32[$200 >> 2] = $78; //@line 11232
  $201 = $ReallocAsyncCtx + 160 | 0; //@line 11233
  HEAP32[$201 >> 2] = $80; //@line 11234
  $202 = $ReallocAsyncCtx + 164 | 0; //@line 11235
  HEAP32[$202 >> 2] = $82; //@line 11236
  $203 = $ReallocAsyncCtx + 168 | 0; //@line 11237
  HEAP32[$203 >> 2] = $84; //@line 11238
  $204 = $ReallocAsyncCtx + 172 | 0; //@line 11239
  HEAP32[$204 >> 2] = $86; //@line 11240
  $205 = $ReallocAsyncCtx + 176 | 0; //@line 11241
  HEAP32[$205 >> 2] = $88; //@line 11242
  $206 = $ReallocAsyncCtx + 180 | 0; //@line 11243
  HEAP32[$206 >> 2] = $148; //@line 11244
  $207 = $ReallocAsyncCtx + 184 | 0; //@line 11245
  HEAP32[$207 >> 2] = $90; //@line 11246
  $208 = $ReallocAsyncCtx + 188 | 0; //@line 11247
  HEAP32[$208 >> 2] = $92; //@line 11248
  $209 = $ReallocAsyncCtx + 192 | 0; //@line 11249
  HEAP32[$209 >> 2] = $94; //@line 11250
  $210 = $ReallocAsyncCtx + 196 | 0; //@line 11251
  HEAP32[$210 >> 2] = $96; //@line 11252
  $211 = $ReallocAsyncCtx + 200 | 0; //@line 11253
  HEAP32[$211 >> 2] = $98; //@line 11254
  $212 = $ReallocAsyncCtx + 204 | 0; //@line 11255
  HEAP32[$212 >> 2] = $100; //@line 11256
  $213 = $ReallocAsyncCtx + 208 | 0; //@line 11257
  HEAP32[$213 >> 2] = $102; //@line 11258
  $214 = $ReallocAsyncCtx + 212 | 0; //@line 11259
  HEAP32[$214 >> 2] = $104; //@line 11260
  $215 = $ReallocAsyncCtx + 216 | 0; //@line 11261
  HEAP32[$215 >> 2] = $106; //@line 11262
  $216 = $ReallocAsyncCtx + 220 | 0; //@line 11263
  HEAP32[$216 >> 2] = $108; //@line 11264
  $217 = $ReallocAsyncCtx + 224 | 0; //@line 11265
  HEAP32[$217 >> 2] = $110; //@line 11266
  $218 = $ReallocAsyncCtx + 228 | 0; //@line 11267
  HEAP32[$218 >> 2] = $112; //@line 11268
  $219 = $ReallocAsyncCtx + 232 | 0; //@line 11269
  HEAP8[$219 >> 0] = $114; //@line 11270
  $220 = $ReallocAsyncCtx + 236 | 0; //@line 11271
  HEAP32[$220 >> 2] = $116; //@line 11272
  $221 = $ReallocAsyncCtx + 240 | 0; //@line 11273
  HEAP32[$221 >> 2] = $118; //@line 11274
  $222 = $ReallocAsyncCtx + 244 | 0; //@line 11275
  HEAP32[$222 >> 2] = $120; //@line 11276
  $223 = $ReallocAsyncCtx + 248 | 0; //@line 11277
  HEAP32[$223 >> 2] = $122; //@line 11278
  $224 = $ReallocAsyncCtx + 252 | 0; //@line 11279
  HEAP32[$224 >> 2] = $124; //@line 11280
  $225 = $ReallocAsyncCtx + 256 | 0; //@line 11281
  HEAP32[$225 >> 2] = $126; //@line 11282
  $226 = $ReallocAsyncCtx + 260 | 0; //@line 11283
  HEAP8[$226 >> 0] = $128; //@line 11284
  $227 = $ReallocAsyncCtx + 261 | 0; //@line 11285
  HEAP8[$227 >> 0] = $130; //@line 11286
  $228 = $ReallocAsyncCtx + 264 | 0; //@line 11287
  HEAP32[$228 >> 2] = $132; //@line 11288
  $229 = $ReallocAsyncCtx + 268 | 0; //@line 11289
  HEAP32[$229 >> 2] = $134; //@line 11290
  sp = STACKTOP; //@line 11291
  return;
 } else if ((label | 0) == 9) {
  $247 = HEAP8[$126 + ($137 & 255) >> 0] | 0; //@line 11297
  HEAP8[$86 >> 0] = ($247 & 255) >>> 4 & 7; //@line 11302
  HEAP8[$98 >> 0] = $247 & 15; //@line 11304
  $266 = $$0$be + 5 << 24 >> 24; //@line 11318
  HEAP32[$76 >> 2] = (HEAPU8[$126 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$126 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$126 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 11326
  $276 = HEAP32[(HEAP32[$74 >> 2] | 0) + 40 >> 2] | 0; //@line 11329
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(268) | 0; //@line 11330
  $277 = FUNCTION_TABLE_iii[$276 & 31]($122, $90) | 0; //@line 11331
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 577; //@line 11334
   $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 11335
   HEAP32[$278 >> 2] = $2; //@line 11336
   $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 11337
   HEAP32[$279 >> 2] = $4; //@line 11338
   $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 11339
   HEAP32[$280 >> 2] = $6; //@line 11340
   $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 11341
   HEAP32[$281 >> 2] = $8; //@line 11342
   $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 11343
   HEAP32[$282 >> 2] = $10; //@line 11344
   $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 11345
   HEAP32[$283 >> 2] = $12; //@line 11346
   $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 11347
   HEAP32[$284 >> 2] = $14; //@line 11348
   $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 11349
   HEAP32[$285 >> 2] = $16; //@line 11350
   $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 11351
   HEAP32[$286 >> 2] = $18; //@line 11352
   $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 11353
   HEAP32[$287 >> 2] = $20; //@line 11354
   $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 11355
   HEAP32[$288 >> 2] = $22; //@line 11356
   $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 11357
   HEAP32[$289 >> 2] = $24; //@line 11358
   $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 11359
   HEAP32[$290 >> 2] = $26; //@line 11360
   $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 11361
   HEAP32[$291 >> 2] = $28; //@line 11362
   $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 11363
   HEAP32[$292 >> 2] = $30; //@line 11364
   $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 11365
   HEAP32[$293 >> 2] = $32; //@line 11366
   $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 11367
   HEAP32[$294 >> 2] = $34; //@line 11368
   $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 11369
   HEAP32[$295 >> 2] = $36; //@line 11370
   $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 11371
   HEAP32[$296 >> 2] = $38; //@line 11372
   $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 11373
   HEAP32[$297 >> 2] = $40; //@line 11374
   $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 11375
   HEAP32[$298 >> 2] = $42; //@line 11376
   $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 11377
   HEAP32[$299 >> 2] = $44; //@line 11378
   $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 11379
   HEAP32[$300 >> 2] = $46; //@line 11380
   $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 11381
   HEAP32[$301 >> 2] = $48; //@line 11382
   $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 11383
   HEAP32[$302 >> 2] = $50; //@line 11384
   $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 11385
   HEAP32[$303 >> 2] = $52; //@line 11386
   $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 11387
   HEAP32[$304 >> 2] = $54; //@line 11388
   $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 11389
   HEAP32[$305 >> 2] = $56; //@line 11390
   $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 11391
   HEAP32[$306 >> 2] = $58; //@line 11392
   $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 11393
   HEAP32[$307 >> 2] = $64; //@line 11394
   $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 11395
   HEAP32[$308 >> 2] = $62; //@line 11396
   $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 11397
   HEAP32[$309 >> 2] = $66; //@line 11398
   $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 11399
   HEAP32[$310 >> 2] = $70; //@line 11400
   $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 11401
   HEAP32[$311 >> 2] = $68; //@line 11402
   $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 11403
   HEAP32[$312 >> 2] = $72; //@line 11404
   $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 11405
   HEAP32[$313 >> 2] = $74; //@line 11406
   $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 11407
   HEAP8[$314 >> 0] = $266; //@line 11408
   $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 11409
   HEAP32[$315 >> 2] = $76; //@line 11410
   $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 11411
   HEAP32[$316 >> 2] = $78; //@line 11412
   $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 11413
   HEAP32[$317 >> 2] = $80; //@line 11414
   $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 11415
   HEAP32[$318 >> 2] = $82; //@line 11416
   $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 11417
   HEAP32[$319 >> 2] = $84; //@line 11418
   $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 11419
   HEAP32[$320 >> 2] = $86; //@line 11420
   $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 11421
   HEAP32[$321 >> 2] = $88; //@line 11422
   $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 11423
   HEAP32[$322 >> 2] = $90; //@line 11424
   $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 11425
   HEAP32[$323 >> 2] = $92; //@line 11426
   $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 11427
   HEAP32[$324 >> 2] = $94; //@line 11428
   $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 11429
   HEAP32[$325 >> 2] = $96; //@line 11430
   $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 11431
   HEAP32[$326 >> 2] = $98; //@line 11432
   $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 11433
   HEAP32[$327 >> 2] = $100; //@line 11434
   $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 11435
   HEAP32[$328 >> 2] = $102; //@line 11436
   $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 11437
   HEAP32[$329 >> 2] = $104; //@line 11438
   $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 11439
   HEAP32[$330 >> 2] = $106; //@line 11440
   $331 = $ReallocAsyncCtx2 + 216 | 0; //@line 11441
   HEAP32[$331 >> 2] = $108; //@line 11442
   $332 = $ReallocAsyncCtx2 + 220 | 0; //@line 11443
   HEAP32[$332 >> 2] = $110; //@line 11444
   $333 = $ReallocAsyncCtx2 + 224 | 0; //@line 11445
   HEAP32[$333 >> 2] = $112; //@line 11446
   $334 = $ReallocAsyncCtx2 + 228 | 0; //@line 11447
   HEAP8[$334 >> 0] = $114; //@line 11448
   $335 = $ReallocAsyncCtx2 + 232 | 0; //@line 11449
   HEAP32[$335 >> 2] = $116; //@line 11450
   $336 = $ReallocAsyncCtx2 + 236 | 0; //@line 11451
   HEAP32[$336 >> 2] = $118; //@line 11452
   $337 = $ReallocAsyncCtx2 + 240 | 0; //@line 11453
   HEAP32[$337 >> 2] = $120; //@line 11454
   $338 = $ReallocAsyncCtx2 + 244 | 0; //@line 11455
   HEAP32[$338 >> 2] = $122; //@line 11456
   $339 = $ReallocAsyncCtx2 + 248 | 0; //@line 11457
   HEAP32[$339 >> 2] = $124; //@line 11458
   $340 = $ReallocAsyncCtx2 + 252 | 0; //@line 11459
   HEAP32[$340 >> 2] = $126; //@line 11460
   $341 = $ReallocAsyncCtx2 + 256 | 0; //@line 11461
   HEAP8[$341 >> 0] = $128; //@line 11462
   $342 = $ReallocAsyncCtx2 + 257 | 0; //@line 11463
   HEAP8[$342 >> 0] = $130; //@line 11464
   $343 = $ReallocAsyncCtx2 + 260 | 0; //@line 11465
   HEAP32[$343 >> 2] = $132; //@line 11466
   $344 = $ReallocAsyncCtx2 + 264 | 0; //@line 11467
   HEAP32[$344 >> 2] = $134; //@line 11468
   sp = STACKTOP; //@line 11469
   return;
  }
  HEAP8[___async_retval >> 0] = $277; //@line 11473
  ___async_unwind = 0; //@line 11474
  HEAP32[$ReallocAsyncCtx2 >> 2] = 577; //@line 11475
  $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 11476
  HEAP32[$278 >> 2] = $2; //@line 11477
  $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 11478
  HEAP32[$279 >> 2] = $4; //@line 11479
  $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 11480
  HEAP32[$280 >> 2] = $6; //@line 11481
  $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 11482
  HEAP32[$281 >> 2] = $8; //@line 11483
  $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 11484
  HEAP32[$282 >> 2] = $10; //@line 11485
  $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 11486
  HEAP32[$283 >> 2] = $12; //@line 11487
  $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 11488
  HEAP32[$284 >> 2] = $14; //@line 11489
  $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 11490
  HEAP32[$285 >> 2] = $16; //@line 11491
  $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 11492
  HEAP32[$286 >> 2] = $18; //@line 11493
  $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 11494
  HEAP32[$287 >> 2] = $20; //@line 11495
  $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 11496
  HEAP32[$288 >> 2] = $22; //@line 11497
  $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 11498
  HEAP32[$289 >> 2] = $24; //@line 11499
  $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 11500
  HEAP32[$290 >> 2] = $26; //@line 11501
  $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 11502
  HEAP32[$291 >> 2] = $28; //@line 11503
  $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 11504
  HEAP32[$292 >> 2] = $30; //@line 11505
  $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 11506
  HEAP32[$293 >> 2] = $32; //@line 11507
  $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 11508
  HEAP32[$294 >> 2] = $34; //@line 11509
  $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 11510
  HEAP32[$295 >> 2] = $36; //@line 11511
  $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 11512
  HEAP32[$296 >> 2] = $38; //@line 11513
  $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 11514
  HEAP32[$297 >> 2] = $40; //@line 11515
  $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 11516
  HEAP32[$298 >> 2] = $42; //@line 11517
  $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 11518
  HEAP32[$299 >> 2] = $44; //@line 11519
  $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 11520
  HEAP32[$300 >> 2] = $46; //@line 11521
  $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 11522
  HEAP32[$301 >> 2] = $48; //@line 11523
  $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 11524
  HEAP32[$302 >> 2] = $50; //@line 11525
  $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 11526
  HEAP32[$303 >> 2] = $52; //@line 11527
  $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 11528
  HEAP32[$304 >> 2] = $54; //@line 11529
  $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 11530
  HEAP32[$305 >> 2] = $56; //@line 11531
  $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 11532
  HEAP32[$306 >> 2] = $58; //@line 11533
  $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 11534
  HEAP32[$307 >> 2] = $64; //@line 11535
  $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 11536
  HEAP32[$308 >> 2] = $62; //@line 11537
  $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 11538
  HEAP32[$309 >> 2] = $66; //@line 11539
  $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 11540
  HEAP32[$310 >> 2] = $70; //@line 11541
  $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 11542
  HEAP32[$311 >> 2] = $68; //@line 11543
  $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 11544
  HEAP32[$312 >> 2] = $72; //@line 11545
  $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 11546
  HEAP32[$313 >> 2] = $74; //@line 11547
  $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 11548
  HEAP8[$314 >> 0] = $266; //@line 11549
  $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 11550
  HEAP32[$315 >> 2] = $76; //@line 11551
  $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 11552
  HEAP32[$316 >> 2] = $78; //@line 11553
  $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 11554
  HEAP32[$317 >> 2] = $80; //@line 11555
  $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 11556
  HEAP32[$318 >> 2] = $82; //@line 11557
  $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 11558
  HEAP32[$319 >> 2] = $84; //@line 11559
  $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 11560
  HEAP32[$320 >> 2] = $86; //@line 11561
  $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 11562
  HEAP32[$321 >> 2] = $88; //@line 11563
  $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 11564
  HEAP32[$322 >> 2] = $90; //@line 11565
  $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 11566
  HEAP32[$323 >> 2] = $92; //@line 11567
  $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 11568
  HEAP32[$324 >> 2] = $94; //@line 11569
  $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 11570
  HEAP32[$325 >> 2] = $96; //@line 11571
  $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 11572
  HEAP32[$326 >> 2] = $98; //@line 11573
  $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 11574
  HEAP32[$327 >> 2] = $100; //@line 11575
  $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 11576
  HEAP32[$328 >> 2] = $102; //@line 11577
  $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 11578
  HEAP32[$329 >> 2] = $104; //@line 11579
  $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 11580
  HEAP32[$330 >> 2] = $106; //@line 11581
  $331 = $ReallocAsyncCtx2 + 216 | 0; //@line 11582
  HEAP32[$331 >> 2] = $108; //@line 11583
  $332 = $ReallocAsyncCtx2 + 220 | 0; //@line 11584
  HEAP32[$332 >> 2] = $110; //@line 11585
  $333 = $ReallocAsyncCtx2 + 224 | 0; //@line 11586
  HEAP32[$333 >> 2] = $112; //@line 11587
  $334 = $ReallocAsyncCtx2 + 228 | 0; //@line 11588
  HEAP8[$334 >> 0] = $114; //@line 11589
  $335 = $ReallocAsyncCtx2 + 232 | 0; //@line 11590
  HEAP32[$335 >> 2] = $116; //@line 11591
  $336 = $ReallocAsyncCtx2 + 236 | 0; //@line 11592
  HEAP32[$336 >> 2] = $118; //@line 11593
  $337 = $ReallocAsyncCtx2 + 240 | 0; //@line 11594
  HEAP32[$337 >> 2] = $120; //@line 11595
  $338 = $ReallocAsyncCtx2 + 244 | 0; //@line 11596
  HEAP32[$338 >> 2] = $122; //@line 11597
  $339 = $ReallocAsyncCtx2 + 248 | 0; //@line 11598
  HEAP32[$339 >> 2] = $124; //@line 11599
  $340 = $ReallocAsyncCtx2 + 252 | 0; //@line 11600
  HEAP32[$340 >> 2] = $126; //@line 11601
  $341 = $ReallocAsyncCtx2 + 256 | 0; //@line 11602
  HEAP8[$341 >> 0] = $128; //@line 11603
  $342 = $ReallocAsyncCtx2 + 257 | 0; //@line 11604
  HEAP8[$342 >> 0] = $130; //@line 11605
  $343 = $ReallocAsyncCtx2 + 260 | 0; //@line 11606
  HEAP32[$343 >> 2] = $132; //@line 11607
  $344 = $ReallocAsyncCtx2 + 264 | 0; //@line 11608
  HEAP32[$344 >> 2] = $134; //@line 11609
  sp = STACKTOP; //@line 11610
  return;
 } else if ((label | 0) == 14) {
  HEAP8[$12 >> 0] = HEAP8[$126 + ($137 & 255) >> 0] | 0; //@line 11618
  HEAP32[$4 >> 2] = $46; //@line 11619
  HEAP32[$8 >> 2] = (HEAPU8[$126 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$126 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$126 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 11640
  HEAP32[$16 >> 2] = 0; //@line 11641
  $385 = $$0$be + 6 << 24 >> 24; //@line 11642
  HEAP8[$30 >> 0] = HEAP8[$126 + ($$0$be + 5 & 255) >> 0] | 0; //@line 11646
  $391 = HEAP32[(HEAP32[$34 >> 2] | 0) + 8 >> 2] | 0; //@line 11649
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(268) | 0; //@line 11650
  $392 = FUNCTION_TABLE_iii[$391 & 31]($122, $96) | 0; //@line 11651
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 578; //@line 11654
   $393 = $ReallocAsyncCtx3 + 4 | 0; //@line 11655
   HEAP32[$393 >> 2] = $2; //@line 11656
   $394 = $ReallocAsyncCtx3 + 8 | 0; //@line 11657
   HEAP32[$394 >> 2] = $4; //@line 11658
   $395 = $ReallocAsyncCtx3 + 12 | 0; //@line 11659
   HEAP32[$395 >> 2] = $6; //@line 11660
   $396 = $ReallocAsyncCtx3 + 16 | 0; //@line 11661
   HEAP32[$396 >> 2] = $8; //@line 11662
   $397 = $ReallocAsyncCtx3 + 20 | 0; //@line 11663
   HEAP32[$397 >> 2] = $10; //@line 11664
   $398 = $ReallocAsyncCtx3 + 24 | 0; //@line 11665
   HEAP32[$398 >> 2] = $12; //@line 11666
   $399 = $ReallocAsyncCtx3 + 28 | 0; //@line 11667
   HEAP32[$399 >> 2] = $14; //@line 11668
   $400 = $ReallocAsyncCtx3 + 32 | 0; //@line 11669
   HEAP32[$400 >> 2] = $16; //@line 11670
   $401 = $ReallocAsyncCtx3 + 36 | 0; //@line 11671
   HEAP32[$401 >> 2] = $18; //@line 11672
   $402 = $ReallocAsyncCtx3 + 40 | 0; //@line 11673
   HEAP32[$402 >> 2] = $20; //@line 11674
   $403 = $ReallocAsyncCtx3 + 44 | 0; //@line 11675
   HEAP32[$403 >> 2] = $22; //@line 11676
   $404 = $ReallocAsyncCtx3 + 48 | 0; //@line 11677
   HEAP32[$404 >> 2] = $24; //@line 11678
   $405 = $ReallocAsyncCtx3 + 52 | 0; //@line 11679
   HEAP32[$405 >> 2] = $26; //@line 11680
   $406 = $ReallocAsyncCtx3 + 56 | 0; //@line 11681
   HEAP32[$406 >> 2] = $28; //@line 11682
   $407 = $ReallocAsyncCtx3 + 60 | 0; //@line 11683
   HEAP32[$407 >> 2] = $30; //@line 11684
   $408 = $ReallocAsyncCtx3 + 64 | 0; //@line 11685
   HEAP32[$408 >> 2] = $32; //@line 11686
   $409 = $ReallocAsyncCtx3 + 68 | 0; //@line 11687
   HEAP32[$409 >> 2] = $34; //@line 11688
   $410 = $ReallocAsyncCtx3 + 72 | 0; //@line 11689
   HEAP32[$410 >> 2] = $36; //@line 11690
   $411 = $ReallocAsyncCtx3 + 76 | 0; //@line 11691
   HEAP32[$411 >> 2] = $38; //@line 11692
   $412 = $ReallocAsyncCtx3 + 80 | 0; //@line 11693
   HEAP32[$412 >> 2] = $40; //@line 11694
   $413 = $ReallocAsyncCtx3 + 84 | 0; //@line 11695
   HEAP32[$413 >> 2] = $42; //@line 11696
   $414 = $ReallocAsyncCtx3 + 88 | 0; //@line 11697
   HEAP32[$414 >> 2] = $44; //@line 11698
   $415 = $ReallocAsyncCtx3 + 92 | 0; //@line 11699
   HEAP32[$415 >> 2] = $46; //@line 11700
   $416 = $ReallocAsyncCtx3 + 96 | 0; //@line 11701
   HEAP32[$416 >> 2] = $48; //@line 11702
   $417 = $ReallocAsyncCtx3 + 100 | 0; //@line 11703
   HEAP32[$417 >> 2] = $50; //@line 11704
   $418 = $ReallocAsyncCtx3 + 104 | 0; //@line 11705
   HEAP32[$418 >> 2] = $52; //@line 11706
   $419 = $ReallocAsyncCtx3 + 108 | 0; //@line 11707
   HEAP32[$419 >> 2] = $54; //@line 11708
   $420 = $ReallocAsyncCtx3 + 112 | 0; //@line 11709
   HEAP32[$420 >> 2] = $56; //@line 11710
   $421 = $ReallocAsyncCtx3 + 116 | 0; //@line 11711
   HEAP32[$421 >> 2] = $58; //@line 11712
   $422 = $ReallocAsyncCtx3 + 120 | 0; //@line 11713
   HEAP8[$422 >> 0] = $385; //@line 11714
   $423 = $ReallocAsyncCtx3 + 124 | 0; //@line 11715
   HEAP32[$423 >> 2] = $62; //@line 11716
   $424 = $ReallocAsyncCtx3 + 128 | 0; //@line 11717
   HEAP32[$424 >> 2] = $64; //@line 11718
   $425 = $ReallocAsyncCtx3 + 132 | 0; //@line 11719
   HEAP32[$425 >> 2] = $66; //@line 11720
   $426 = $ReallocAsyncCtx3 + 136 | 0; //@line 11721
   HEAP32[$426 >> 2] = $68; //@line 11722
   $427 = $ReallocAsyncCtx3 + 140 | 0; //@line 11723
   HEAP32[$427 >> 2] = $70; //@line 11724
   $428 = $ReallocAsyncCtx3 + 144 | 0; //@line 11725
   HEAP32[$428 >> 2] = $72; //@line 11726
   $429 = $ReallocAsyncCtx3 + 148 | 0; //@line 11727
   HEAP32[$429 >> 2] = $74; //@line 11728
   $430 = $ReallocAsyncCtx3 + 152 | 0; //@line 11729
   HEAP32[$430 >> 2] = $76; //@line 11730
   $431 = $ReallocAsyncCtx3 + 156 | 0; //@line 11731
   HEAP32[$431 >> 2] = $78; //@line 11732
   $432 = $ReallocAsyncCtx3 + 160 | 0; //@line 11733
   HEAP32[$432 >> 2] = $80; //@line 11734
   $433 = $ReallocAsyncCtx3 + 164 | 0; //@line 11735
   HEAP32[$433 >> 2] = $82; //@line 11736
   $434 = $ReallocAsyncCtx3 + 168 | 0; //@line 11737
   HEAP32[$434 >> 2] = $84; //@line 11738
   $435 = $ReallocAsyncCtx3 + 172 | 0; //@line 11739
   HEAP32[$435 >> 2] = $86; //@line 11740
   $436 = $ReallocAsyncCtx3 + 176 | 0; //@line 11741
   HEAP32[$436 >> 2] = $88; //@line 11742
   $437 = $ReallocAsyncCtx3 + 180 | 0; //@line 11743
   HEAP32[$437 >> 2] = $90; //@line 11744
   $438 = $ReallocAsyncCtx3 + 184 | 0; //@line 11745
   HEAP32[$438 >> 2] = $92; //@line 11746
   $439 = $ReallocAsyncCtx3 + 188 | 0; //@line 11747
   HEAP32[$439 >> 2] = $94; //@line 11748
   $440 = $ReallocAsyncCtx3 + 192 | 0; //@line 11749
   HEAP32[$440 >> 2] = $96; //@line 11750
   $441 = $ReallocAsyncCtx3 + 196 | 0; //@line 11751
   HEAP32[$441 >> 2] = $98; //@line 11752
   $442 = $ReallocAsyncCtx3 + 200 | 0; //@line 11753
   HEAP32[$442 >> 2] = $100; //@line 11754
   $443 = $ReallocAsyncCtx3 + 204 | 0; //@line 11755
   HEAP32[$443 >> 2] = $102; //@line 11756
   $444 = $ReallocAsyncCtx3 + 208 | 0; //@line 11757
   HEAP32[$444 >> 2] = $104; //@line 11758
   $445 = $ReallocAsyncCtx3 + 212 | 0; //@line 11759
   HEAP32[$445 >> 2] = $106; //@line 11760
   $446 = $ReallocAsyncCtx3 + 216 | 0; //@line 11761
   HEAP32[$446 >> 2] = $108; //@line 11762
   $447 = $ReallocAsyncCtx3 + 220 | 0; //@line 11763
   HEAP32[$447 >> 2] = $110; //@line 11764
   $448 = $ReallocAsyncCtx3 + 224 | 0; //@line 11765
   HEAP32[$448 >> 2] = $112; //@line 11766
   $449 = $ReallocAsyncCtx3 + 228 | 0; //@line 11767
   HEAP8[$449 >> 0] = $114; //@line 11768
   $450 = $ReallocAsyncCtx3 + 232 | 0; //@line 11769
   HEAP32[$450 >> 2] = $116; //@line 11770
   $451 = $ReallocAsyncCtx3 + 236 | 0; //@line 11771
   HEAP32[$451 >> 2] = $118; //@line 11772
   $452 = $ReallocAsyncCtx3 + 240 | 0; //@line 11773
   HEAP32[$452 >> 2] = $120; //@line 11774
   $453 = $ReallocAsyncCtx3 + 244 | 0; //@line 11775
   HEAP32[$453 >> 2] = $122; //@line 11776
   $454 = $ReallocAsyncCtx3 + 248 | 0; //@line 11777
   HEAP32[$454 >> 2] = $124; //@line 11778
   $455 = $ReallocAsyncCtx3 + 252 | 0; //@line 11779
   HEAP32[$455 >> 2] = $126; //@line 11780
   $456 = $ReallocAsyncCtx3 + 256 | 0; //@line 11781
   HEAP8[$456 >> 0] = $128; //@line 11782
   $457 = $ReallocAsyncCtx3 + 257 | 0; //@line 11783
   HEAP8[$457 >> 0] = $130; //@line 11784
   $458 = $ReallocAsyncCtx3 + 260 | 0; //@line 11785
   HEAP32[$458 >> 2] = $132; //@line 11786
   $459 = $ReallocAsyncCtx3 + 264 | 0; //@line 11787
   HEAP32[$459 >> 2] = $134; //@line 11788
   sp = STACKTOP; //@line 11789
   return;
  }
  HEAP8[___async_retval >> 0] = $392; //@line 11793
  ___async_unwind = 0; //@line 11794
  HEAP32[$ReallocAsyncCtx3 >> 2] = 578; //@line 11795
  $393 = $ReallocAsyncCtx3 + 4 | 0; //@line 11796
  HEAP32[$393 >> 2] = $2; //@line 11797
  $394 = $ReallocAsyncCtx3 + 8 | 0; //@line 11798
  HEAP32[$394 >> 2] = $4; //@line 11799
  $395 = $ReallocAsyncCtx3 + 12 | 0; //@line 11800
  HEAP32[$395 >> 2] = $6; //@line 11801
  $396 = $ReallocAsyncCtx3 + 16 | 0; //@line 11802
  HEAP32[$396 >> 2] = $8; //@line 11803
  $397 = $ReallocAsyncCtx3 + 20 | 0; //@line 11804
  HEAP32[$397 >> 2] = $10; //@line 11805
  $398 = $ReallocAsyncCtx3 + 24 | 0; //@line 11806
  HEAP32[$398 >> 2] = $12; //@line 11807
  $399 = $ReallocAsyncCtx3 + 28 | 0; //@line 11808
  HEAP32[$399 >> 2] = $14; //@line 11809
  $400 = $ReallocAsyncCtx3 + 32 | 0; //@line 11810
  HEAP32[$400 >> 2] = $16; //@line 11811
  $401 = $ReallocAsyncCtx3 + 36 | 0; //@line 11812
  HEAP32[$401 >> 2] = $18; //@line 11813
  $402 = $ReallocAsyncCtx3 + 40 | 0; //@line 11814
  HEAP32[$402 >> 2] = $20; //@line 11815
  $403 = $ReallocAsyncCtx3 + 44 | 0; //@line 11816
  HEAP32[$403 >> 2] = $22; //@line 11817
  $404 = $ReallocAsyncCtx3 + 48 | 0; //@line 11818
  HEAP32[$404 >> 2] = $24; //@line 11819
  $405 = $ReallocAsyncCtx3 + 52 | 0; //@line 11820
  HEAP32[$405 >> 2] = $26; //@line 11821
  $406 = $ReallocAsyncCtx3 + 56 | 0; //@line 11822
  HEAP32[$406 >> 2] = $28; //@line 11823
  $407 = $ReallocAsyncCtx3 + 60 | 0; //@line 11824
  HEAP32[$407 >> 2] = $30; //@line 11825
  $408 = $ReallocAsyncCtx3 + 64 | 0; //@line 11826
  HEAP32[$408 >> 2] = $32; //@line 11827
  $409 = $ReallocAsyncCtx3 + 68 | 0; //@line 11828
  HEAP32[$409 >> 2] = $34; //@line 11829
  $410 = $ReallocAsyncCtx3 + 72 | 0; //@line 11830
  HEAP32[$410 >> 2] = $36; //@line 11831
  $411 = $ReallocAsyncCtx3 + 76 | 0; //@line 11832
  HEAP32[$411 >> 2] = $38; //@line 11833
  $412 = $ReallocAsyncCtx3 + 80 | 0; //@line 11834
  HEAP32[$412 >> 2] = $40; //@line 11835
  $413 = $ReallocAsyncCtx3 + 84 | 0; //@line 11836
  HEAP32[$413 >> 2] = $42; //@line 11837
  $414 = $ReallocAsyncCtx3 + 88 | 0; //@line 11838
  HEAP32[$414 >> 2] = $44; //@line 11839
  $415 = $ReallocAsyncCtx3 + 92 | 0; //@line 11840
  HEAP32[$415 >> 2] = $46; //@line 11841
  $416 = $ReallocAsyncCtx3 + 96 | 0; //@line 11842
  HEAP32[$416 >> 2] = $48; //@line 11843
  $417 = $ReallocAsyncCtx3 + 100 | 0; //@line 11844
  HEAP32[$417 >> 2] = $50; //@line 11845
  $418 = $ReallocAsyncCtx3 + 104 | 0; //@line 11846
  HEAP32[$418 >> 2] = $52; //@line 11847
  $419 = $ReallocAsyncCtx3 + 108 | 0; //@line 11848
  HEAP32[$419 >> 2] = $54; //@line 11849
  $420 = $ReallocAsyncCtx3 + 112 | 0; //@line 11850
  HEAP32[$420 >> 2] = $56; //@line 11851
  $421 = $ReallocAsyncCtx3 + 116 | 0; //@line 11852
  HEAP32[$421 >> 2] = $58; //@line 11853
  $422 = $ReallocAsyncCtx3 + 120 | 0; //@line 11854
  HEAP8[$422 >> 0] = $385; //@line 11855
  $423 = $ReallocAsyncCtx3 + 124 | 0; //@line 11856
  HEAP32[$423 >> 2] = $62; //@line 11857
  $424 = $ReallocAsyncCtx3 + 128 | 0; //@line 11858
  HEAP32[$424 >> 2] = $64; //@line 11859
  $425 = $ReallocAsyncCtx3 + 132 | 0; //@line 11860
  HEAP32[$425 >> 2] = $66; //@line 11861
  $426 = $ReallocAsyncCtx3 + 136 | 0; //@line 11862
  HEAP32[$426 >> 2] = $68; //@line 11863
  $427 = $ReallocAsyncCtx3 + 140 | 0; //@line 11864
  HEAP32[$427 >> 2] = $70; //@line 11865
  $428 = $ReallocAsyncCtx3 + 144 | 0; //@line 11866
  HEAP32[$428 >> 2] = $72; //@line 11867
  $429 = $ReallocAsyncCtx3 + 148 | 0; //@line 11868
  HEAP32[$429 >> 2] = $74; //@line 11869
  $430 = $ReallocAsyncCtx3 + 152 | 0; //@line 11870
  HEAP32[$430 >> 2] = $76; //@line 11871
  $431 = $ReallocAsyncCtx3 + 156 | 0; //@line 11872
  HEAP32[$431 >> 2] = $78; //@line 11873
  $432 = $ReallocAsyncCtx3 + 160 | 0; //@line 11874
  HEAP32[$432 >> 2] = $80; //@line 11875
  $433 = $ReallocAsyncCtx3 + 164 | 0; //@line 11876
  HEAP32[$433 >> 2] = $82; //@line 11877
  $434 = $ReallocAsyncCtx3 + 168 | 0; //@line 11878
  HEAP32[$434 >> 2] = $84; //@line 11879
  $435 = $ReallocAsyncCtx3 + 172 | 0; //@line 11880
  HEAP32[$435 >> 2] = $86; //@line 11881
  $436 = $ReallocAsyncCtx3 + 176 | 0; //@line 11882
  HEAP32[$436 >> 2] = $88; //@line 11883
  $437 = $ReallocAsyncCtx3 + 180 | 0; //@line 11884
  HEAP32[$437 >> 2] = $90; //@line 11885
  $438 = $ReallocAsyncCtx3 + 184 | 0; //@line 11886
  HEAP32[$438 >> 2] = $92; //@line 11887
  $439 = $ReallocAsyncCtx3 + 188 | 0; //@line 11888
  HEAP32[$439 >> 2] = $94; //@line 11889
  $440 = $ReallocAsyncCtx3 + 192 | 0; //@line 11890
  HEAP32[$440 >> 2] = $96; //@line 11891
  $441 = $ReallocAsyncCtx3 + 196 | 0; //@line 11892
  HEAP32[$441 >> 2] = $98; //@line 11893
  $442 = $ReallocAsyncCtx3 + 200 | 0; //@line 11894
  HEAP32[$442 >> 2] = $100; //@line 11895
  $443 = $ReallocAsyncCtx3 + 204 | 0; //@line 11896
  HEAP32[$443 >> 2] = $102; //@line 11897
  $444 = $ReallocAsyncCtx3 + 208 | 0; //@line 11898
  HEAP32[$444 >> 2] = $104; //@line 11899
  $445 = $ReallocAsyncCtx3 + 212 | 0; //@line 11900
  HEAP32[$445 >> 2] = $106; //@line 11901
  $446 = $ReallocAsyncCtx3 + 216 | 0; //@line 11902
  HEAP32[$446 >> 2] = $108; //@line 11903
  $447 = $ReallocAsyncCtx3 + 220 | 0; //@line 11904
  HEAP32[$447 >> 2] = $110; //@line 11905
  $448 = $ReallocAsyncCtx3 + 224 | 0; //@line 11906
  HEAP32[$448 >> 2] = $112; //@line 11907
  $449 = $ReallocAsyncCtx3 + 228 | 0; //@line 11908
  HEAP8[$449 >> 0] = $114; //@line 11909
  $450 = $ReallocAsyncCtx3 + 232 | 0; //@line 11910
  HEAP32[$450 >> 2] = $116; //@line 11911
  $451 = $ReallocAsyncCtx3 + 236 | 0; //@line 11912
  HEAP32[$451 >> 2] = $118; //@line 11913
  $452 = $ReallocAsyncCtx3 + 240 | 0; //@line 11914
  HEAP32[$452 >> 2] = $120; //@line 11915
  $453 = $ReallocAsyncCtx3 + 244 | 0; //@line 11916
  HEAP32[$453 >> 2] = $122; //@line 11917
  $454 = $ReallocAsyncCtx3 + 248 | 0; //@line 11918
  HEAP32[$454 >> 2] = $124; //@line 11919
  $455 = $ReallocAsyncCtx3 + 252 | 0; //@line 11920
  HEAP32[$455 >> 2] = $126; //@line 11921
  $456 = $ReallocAsyncCtx3 + 256 | 0; //@line 11922
  HEAP8[$456 >> 0] = $128; //@line 11923
  $457 = $ReallocAsyncCtx3 + 257 | 0; //@line 11924
  HEAP8[$457 >> 0] = $130; //@line 11925
  $458 = $ReallocAsyncCtx3 + 260 | 0; //@line 11926
  HEAP32[$458 >> 2] = $132; //@line 11927
  $459 = $ReallocAsyncCtx3 + 264 | 0; //@line 11928
  HEAP32[$459 >> 2] = $134; //@line 11929
  sp = STACKTOP; //@line 11930
  return;
 } else if ((label | 0) == 22) {
  $490 = $$0$be + 2 << 24 >> 24; //@line 11934
  $493 = HEAP8[$126 + ($137 & 255) >> 0] | 0; //@line 11937
  HEAP8[$54 >> 0] = 0; //@line 11938
  $494 = $493 & 255; //@line 11939
  HEAP8[$72 >> 0] = $494 >>> 5 & 1; //@line 11943
  if ($494 & 16 | 0) {
   HEAP8[$54 >> 0] = 1; //@line 11947
  }
  HEAP8[$80 >> 0] = $494 & 15; //@line 11951
  $503 = HEAP32[(HEAP32[$84 >> 2] | 0) + 44 >> 2] | 0; //@line 11954
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(272) | 0; //@line 11955
  $504 = FUNCTION_TABLE_iii[$503 & 31]($122, $56) | 0; //@line 11956
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 579; //@line 11959
   $505 = $ReallocAsyncCtx4 + 4 | 0; //@line 11960
   HEAP32[$505 >> 2] = $2; //@line 11961
   $506 = $ReallocAsyncCtx4 + 8 | 0; //@line 11962
   HEAP32[$506 >> 2] = $4; //@line 11963
   $507 = $ReallocAsyncCtx4 + 12 | 0; //@line 11964
   HEAP32[$507 >> 2] = $6; //@line 11965
   $508 = $ReallocAsyncCtx4 + 16 | 0; //@line 11966
   HEAP32[$508 >> 2] = $8; //@line 11967
   $509 = $ReallocAsyncCtx4 + 20 | 0; //@line 11968
   HEAP32[$509 >> 2] = $10; //@line 11969
   $510 = $ReallocAsyncCtx4 + 24 | 0; //@line 11970
   HEAP32[$510 >> 2] = $$096$be; //@line 11971
   $511 = $ReallocAsyncCtx4 + 28 | 0; //@line 11972
   HEAP32[$511 >> 2] = $14; //@line 11973
   $512 = $ReallocAsyncCtx4 + 32 | 0; //@line 11974
   HEAP32[$512 >> 2] = $12; //@line 11975
   $513 = $ReallocAsyncCtx4 + 36 | 0; //@line 11976
   HEAP32[$513 >> 2] = $16; //@line 11977
   $514 = $ReallocAsyncCtx4 + 40 | 0; //@line 11978
   HEAP32[$514 >> 2] = $18; //@line 11979
   $515 = $ReallocAsyncCtx4 + 44 | 0; //@line 11980
   HEAP32[$515 >> 2] = $20; //@line 11981
   $516 = $ReallocAsyncCtx4 + 48 | 0; //@line 11982
   HEAP32[$516 >> 2] = $22; //@line 11983
   $517 = $ReallocAsyncCtx4 + 52 | 0; //@line 11984
   HEAP32[$517 >> 2] = $24; //@line 11985
   $518 = $ReallocAsyncCtx4 + 56 | 0; //@line 11986
   HEAP32[$518 >> 2] = $26; //@line 11987
   $519 = $ReallocAsyncCtx4 + 60 | 0; //@line 11988
   HEAP32[$519 >> 2] = $28; //@line 11989
   $520 = $ReallocAsyncCtx4 + 64 | 0; //@line 11990
   HEAP8[$520 >> 0] = $490; //@line 11991
   $521 = $ReallocAsyncCtx4 + 68 | 0; //@line 11992
   HEAP32[$521 >> 2] = $30; //@line 11993
   $522 = $ReallocAsyncCtx4 + 72 | 0; //@line 11994
   HEAP32[$522 >> 2] = $32; //@line 11995
   $523 = $ReallocAsyncCtx4 + 76 | 0; //@line 11996
   HEAP32[$523 >> 2] = $34; //@line 11997
   $524 = $ReallocAsyncCtx4 + 80 | 0; //@line 11998
   HEAP32[$524 >> 2] = $36; //@line 11999
   $525 = $ReallocAsyncCtx4 + 84 | 0; //@line 12000
   HEAP32[$525 >> 2] = $38; //@line 12001
   $526 = $ReallocAsyncCtx4 + 88 | 0; //@line 12002
   HEAP32[$526 >> 2] = $40; //@line 12003
   $527 = $ReallocAsyncCtx4 + 92 | 0; //@line 12004
   HEAP32[$527 >> 2] = $42; //@line 12005
   $528 = $ReallocAsyncCtx4 + 96 | 0; //@line 12006
   HEAP32[$528 >> 2] = $44; //@line 12007
   $529 = $ReallocAsyncCtx4 + 100 | 0; //@line 12008
   HEAP32[$529 >> 2] = $46; //@line 12009
   $530 = $ReallocAsyncCtx4 + 104 | 0; //@line 12010
   HEAP32[$530 >> 2] = $48; //@line 12011
   $531 = $ReallocAsyncCtx4 + 108 | 0; //@line 12012
   HEAP32[$531 >> 2] = $50; //@line 12013
   $532 = $ReallocAsyncCtx4 + 112 | 0; //@line 12014
   HEAP32[$532 >> 2] = $52; //@line 12015
   $533 = $ReallocAsyncCtx4 + 116 | 0; //@line 12016
   HEAP32[$533 >> 2] = $54; //@line 12017
   $534 = $ReallocAsyncCtx4 + 120 | 0; //@line 12018
   HEAP32[$534 >> 2] = $56; //@line 12019
   $535 = $ReallocAsyncCtx4 + 124 | 0; //@line 12020
   HEAP32[$535 >> 2] = $58; //@line 12021
   $536 = $ReallocAsyncCtx4 + 128 | 0; //@line 12022
   HEAP32[$536 >> 2] = $64; //@line 12023
   $537 = $ReallocAsyncCtx4 + 132 | 0; //@line 12024
   HEAP32[$537 >> 2] = $62; //@line 12025
   $538 = $ReallocAsyncCtx4 + 136 | 0; //@line 12026
   HEAP32[$538 >> 2] = $66; //@line 12027
   $539 = $ReallocAsyncCtx4 + 140 | 0; //@line 12028
   HEAP32[$539 >> 2] = $70; //@line 12029
   $540 = $ReallocAsyncCtx4 + 144 | 0; //@line 12030
   HEAP32[$540 >> 2] = $68; //@line 12031
   $541 = $ReallocAsyncCtx4 + 148 | 0; //@line 12032
   HEAP32[$541 >> 2] = $72; //@line 12033
   $542 = $ReallocAsyncCtx4 + 152 | 0; //@line 12034
   HEAP32[$542 >> 2] = $74; //@line 12035
   $543 = $ReallocAsyncCtx4 + 156 | 0; //@line 12036
   HEAP32[$543 >> 2] = $76; //@line 12037
   $544 = $ReallocAsyncCtx4 + 160 | 0; //@line 12038
   HEAP32[$544 >> 2] = $78; //@line 12039
   $545 = $ReallocAsyncCtx4 + 164 | 0; //@line 12040
   HEAP32[$545 >> 2] = $80; //@line 12041
   $546 = $ReallocAsyncCtx4 + 168 | 0; //@line 12042
   HEAP32[$546 >> 2] = $82; //@line 12043
   $547 = $ReallocAsyncCtx4 + 172 | 0; //@line 12044
   HEAP32[$547 >> 2] = $84; //@line 12045
   $548 = $ReallocAsyncCtx4 + 176 | 0; //@line 12046
   HEAP32[$548 >> 2] = $86; //@line 12047
   $549 = $ReallocAsyncCtx4 + 180 | 0; //@line 12048
   HEAP32[$549 >> 2] = $88; //@line 12049
   $550 = $ReallocAsyncCtx4 + 184 | 0; //@line 12050
   HEAP32[$550 >> 2] = $90; //@line 12051
   $551 = $ReallocAsyncCtx4 + 188 | 0; //@line 12052
   HEAP32[$551 >> 2] = $92; //@line 12053
   $552 = $ReallocAsyncCtx4 + 192 | 0; //@line 12054
   HEAP32[$552 >> 2] = $94; //@line 12055
   $553 = $ReallocAsyncCtx4 + 196 | 0; //@line 12056
   HEAP32[$553 >> 2] = $96; //@line 12057
   $554 = $ReallocAsyncCtx4 + 200 | 0; //@line 12058
   HEAP32[$554 >> 2] = $98; //@line 12059
   $555 = $ReallocAsyncCtx4 + 204 | 0; //@line 12060
   HEAP32[$555 >> 2] = $100; //@line 12061
   $556 = $ReallocAsyncCtx4 + 208 | 0; //@line 12062
   HEAP32[$556 >> 2] = $102; //@line 12063
   $557 = $ReallocAsyncCtx4 + 212 | 0; //@line 12064
   HEAP32[$557 >> 2] = $104; //@line 12065
   $558 = $ReallocAsyncCtx4 + 216 | 0; //@line 12066
   HEAP32[$558 >> 2] = $106; //@line 12067
   $559 = $ReallocAsyncCtx4 + 220 | 0; //@line 12068
   HEAP32[$559 >> 2] = $108; //@line 12069
   $560 = $ReallocAsyncCtx4 + 224 | 0; //@line 12070
   HEAP32[$560 >> 2] = $110; //@line 12071
   $561 = $ReallocAsyncCtx4 + 228 | 0; //@line 12072
   HEAP32[$561 >> 2] = $112; //@line 12073
   $562 = $ReallocAsyncCtx4 + 232 | 0; //@line 12074
   HEAP8[$562 >> 0] = $114; //@line 12075
   $563 = $ReallocAsyncCtx4 + 236 | 0; //@line 12076
   HEAP32[$563 >> 2] = $116; //@line 12077
   $564 = $ReallocAsyncCtx4 + 240 | 0; //@line 12078
   HEAP32[$564 >> 2] = $118; //@line 12079
   $565 = $ReallocAsyncCtx4 + 244 | 0; //@line 12080
   HEAP32[$565 >> 2] = $120; //@line 12081
   $566 = $ReallocAsyncCtx4 + 248 | 0; //@line 12082
   HEAP32[$566 >> 2] = $122; //@line 12083
   $567 = $ReallocAsyncCtx4 + 252 | 0; //@line 12084
   HEAP32[$567 >> 2] = $124; //@line 12085
   $568 = $ReallocAsyncCtx4 + 256 | 0; //@line 12086
   HEAP32[$568 >> 2] = $126; //@line 12087
   $569 = $ReallocAsyncCtx4 + 260 | 0; //@line 12088
   HEAP8[$569 >> 0] = $128; //@line 12089
   $570 = $ReallocAsyncCtx4 + 261 | 0; //@line 12090
   HEAP8[$570 >> 0] = $130; //@line 12091
   $571 = $ReallocAsyncCtx4 + 264 | 0; //@line 12092
   HEAP32[$571 >> 2] = $132; //@line 12093
   $572 = $ReallocAsyncCtx4 + 268 | 0; //@line 12094
   HEAP32[$572 >> 2] = $134; //@line 12095
   sp = STACKTOP; //@line 12096
   return;
  }
  HEAP8[___async_retval >> 0] = $504 & 1; //@line 12101
  ___async_unwind = 0; //@line 12102
  HEAP32[$ReallocAsyncCtx4 >> 2] = 579; //@line 12103
  $505 = $ReallocAsyncCtx4 + 4 | 0; //@line 12104
  HEAP32[$505 >> 2] = $2; //@line 12105
  $506 = $ReallocAsyncCtx4 + 8 | 0; //@line 12106
  HEAP32[$506 >> 2] = $4; //@line 12107
  $507 = $ReallocAsyncCtx4 + 12 | 0; //@line 12108
  HEAP32[$507 >> 2] = $6; //@line 12109
  $508 = $ReallocAsyncCtx4 + 16 | 0; //@line 12110
  HEAP32[$508 >> 2] = $8; //@line 12111
  $509 = $ReallocAsyncCtx4 + 20 | 0; //@line 12112
  HEAP32[$509 >> 2] = $10; //@line 12113
  $510 = $ReallocAsyncCtx4 + 24 | 0; //@line 12114
  HEAP32[$510 >> 2] = $$096$be; //@line 12115
  $511 = $ReallocAsyncCtx4 + 28 | 0; //@line 12116
  HEAP32[$511 >> 2] = $14; //@line 12117
  $512 = $ReallocAsyncCtx4 + 32 | 0; //@line 12118
  HEAP32[$512 >> 2] = $12; //@line 12119
  $513 = $ReallocAsyncCtx4 + 36 | 0; //@line 12120
  HEAP32[$513 >> 2] = $16; //@line 12121
  $514 = $ReallocAsyncCtx4 + 40 | 0; //@line 12122
  HEAP32[$514 >> 2] = $18; //@line 12123
  $515 = $ReallocAsyncCtx4 + 44 | 0; //@line 12124
  HEAP32[$515 >> 2] = $20; //@line 12125
  $516 = $ReallocAsyncCtx4 + 48 | 0; //@line 12126
  HEAP32[$516 >> 2] = $22; //@line 12127
  $517 = $ReallocAsyncCtx4 + 52 | 0; //@line 12128
  HEAP32[$517 >> 2] = $24; //@line 12129
  $518 = $ReallocAsyncCtx4 + 56 | 0; //@line 12130
  HEAP32[$518 >> 2] = $26; //@line 12131
  $519 = $ReallocAsyncCtx4 + 60 | 0; //@line 12132
  HEAP32[$519 >> 2] = $28; //@line 12133
  $520 = $ReallocAsyncCtx4 + 64 | 0; //@line 12134
  HEAP8[$520 >> 0] = $490; //@line 12135
  $521 = $ReallocAsyncCtx4 + 68 | 0; //@line 12136
  HEAP32[$521 >> 2] = $30; //@line 12137
  $522 = $ReallocAsyncCtx4 + 72 | 0; //@line 12138
  HEAP32[$522 >> 2] = $32; //@line 12139
  $523 = $ReallocAsyncCtx4 + 76 | 0; //@line 12140
  HEAP32[$523 >> 2] = $34; //@line 12141
  $524 = $ReallocAsyncCtx4 + 80 | 0; //@line 12142
  HEAP32[$524 >> 2] = $36; //@line 12143
  $525 = $ReallocAsyncCtx4 + 84 | 0; //@line 12144
  HEAP32[$525 >> 2] = $38; //@line 12145
  $526 = $ReallocAsyncCtx4 + 88 | 0; //@line 12146
  HEAP32[$526 >> 2] = $40; //@line 12147
  $527 = $ReallocAsyncCtx4 + 92 | 0; //@line 12148
  HEAP32[$527 >> 2] = $42; //@line 12149
  $528 = $ReallocAsyncCtx4 + 96 | 0; //@line 12150
  HEAP32[$528 >> 2] = $44; //@line 12151
  $529 = $ReallocAsyncCtx4 + 100 | 0; //@line 12152
  HEAP32[$529 >> 2] = $46; //@line 12153
  $530 = $ReallocAsyncCtx4 + 104 | 0; //@line 12154
  HEAP32[$530 >> 2] = $48; //@line 12155
  $531 = $ReallocAsyncCtx4 + 108 | 0; //@line 12156
  HEAP32[$531 >> 2] = $50; //@line 12157
  $532 = $ReallocAsyncCtx4 + 112 | 0; //@line 12158
  HEAP32[$532 >> 2] = $52; //@line 12159
  $533 = $ReallocAsyncCtx4 + 116 | 0; //@line 12160
  HEAP32[$533 >> 2] = $54; //@line 12161
  $534 = $ReallocAsyncCtx4 + 120 | 0; //@line 12162
  HEAP32[$534 >> 2] = $56; //@line 12163
  $535 = $ReallocAsyncCtx4 + 124 | 0; //@line 12164
  HEAP32[$535 >> 2] = $58; //@line 12165
  $536 = $ReallocAsyncCtx4 + 128 | 0; //@line 12166
  HEAP32[$536 >> 2] = $64; //@line 12167
  $537 = $ReallocAsyncCtx4 + 132 | 0; //@line 12168
  HEAP32[$537 >> 2] = $62; //@line 12169
  $538 = $ReallocAsyncCtx4 + 136 | 0; //@line 12170
  HEAP32[$538 >> 2] = $66; //@line 12171
  $539 = $ReallocAsyncCtx4 + 140 | 0; //@line 12172
  HEAP32[$539 >> 2] = $70; //@line 12173
  $540 = $ReallocAsyncCtx4 + 144 | 0; //@line 12174
  HEAP32[$540 >> 2] = $68; //@line 12175
  $541 = $ReallocAsyncCtx4 + 148 | 0; //@line 12176
  HEAP32[$541 >> 2] = $72; //@line 12177
  $542 = $ReallocAsyncCtx4 + 152 | 0; //@line 12178
  HEAP32[$542 >> 2] = $74; //@line 12179
  $543 = $ReallocAsyncCtx4 + 156 | 0; //@line 12180
  HEAP32[$543 >> 2] = $76; //@line 12181
  $544 = $ReallocAsyncCtx4 + 160 | 0; //@line 12182
  HEAP32[$544 >> 2] = $78; //@line 12183
  $545 = $ReallocAsyncCtx4 + 164 | 0; //@line 12184
  HEAP32[$545 >> 2] = $80; //@line 12185
  $546 = $ReallocAsyncCtx4 + 168 | 0; //@line 12186
  HEAP32[$546 >> 2] = $82; //@line 12187
  $547 = $ReallocAsyncCtx4 + 172 | 0; //@line 12188
  HEAP32[$547 >> 2] = $84; //@line 12189
  $548 = $ReallocAsyncCtx4 + 176 | 0; //@line 12190
  HEAP32[$548 >> 2] = $86; //@line 12191
  $549 = $ReallocAsyncCtx4 + 180 | 0; //@line 12192
  HEAP32[$549 >> 2] = $88; //@line 12193
  $550 = $ReallocAsyncCtx4 + 184 | 0; //@line 12194
  HEAP32[$550 >> 2] = $90; //@line 12195
  $551 = $ReallocAsyncCtx4 + 188 | 0; //@line 12196
  HEAP32[$551 >> 2] = $92; //@line 12197
  $552 = $ReallocAsyncCtx4 + 192 | 0; //@line 12198
  HEAP32[$552 >> 2] = $94; //@line 12199
  $553 = $ReallocAsyncCtx4 + 196 | 0; //@line 12200
  HEAP32[$553 >> 2] = $96; //@line 12201
  $554 = $ReallocAsyncCtx4 + 200 | 0; //@line 12202
  HEAP32[$554 >> 2] = $98; //@line 12203
  $555 = $ReallocAsyncCtx4 + 204 | 0; //@line 12204
  HEAP32[$555 >> 2] = $100; //@line 12205
  $556 = $ReallocAsyncCtx4 + 208 | 0; //@line 12206
  HEAP32[$556 >> 2] = $102; //@line 12207
  $557 = $ReallocAsyncCtx4 + 212 | 0; //@line 12208
  HEAP32[$557 >> 2] = $104; //@line 12209
  $558 = $ReallocAsyncCtx4 + 216 | 0; //@line 12210
  HEAP32[$558 >> 2] = $106; //@line 12211
  $559 = $ReallocAsyncCtx4 + 220 | 0; //@line 12212
  HEAP32[$559 >> 2] = $108; //@line 12213
  $560 = $ReallocAsyncCtx4 + 224 | 0; //@line 12214
  HEAP32[$560 >> 2] = $110; //@line 12215
  $561 = $ReallocAsyncCtx4 + 228 | 0; //@line 12216
  HEAP32[$561 >> 2] = $112; //@line 12217
  $562 = $ReallocAsyncCtx4 + 232 | 0; //@line 12218
  HEAP8[$562 >> 0] = $114; //@line 12219
  $563 = $ReallocAsyncCtx4 + 236 | 0; //@line 12220
  HEAP32[$563 >> 2] = $116; //@line 12221
  $564 = $ReallocAsyncCtx4 + 240 | 0; //@line 12222
  HEAP32[$564 >> 2] = $118; //@line 12223
  $565 = $ReallocAsyncCtx4 + 244 | 0; //@line 12224
  HEAP32[$565 >> 2] = $120; //@line 12225
  $566 = $ReallocAsyncCtx4 + 248 | 0; //@line 12226
  HEAP32[$566 >> 2] = $122; //@line 12227
  $567 = $ReallocAsyncCtx4 + 252 | 0; //@line 12228
  HEAP32[$567 >> 2] = $124; //@line 12229
  $568 = $ReallocAsyncCtx4 + 256 | 0; //@line 12230
  HEAP32[$568 >> 2] = $126; //@line 12231
  $569 = $ReallocAsyncCtx4 + 260 | 0; //@line 12232
  HEAP8[$569 >> 0] = $128; //@line 12233
  $570 = $ReallocAsyncCtx4 + 261 | 0; //@line 12234
  HEAP8[$570 >> 0] = $130; //@line 12235
  $571 = $ReallocAsyncCtx4 + 264 | 0; //@line 12236
  HEAP32[$571 >> 2] = $132; //@line 12237
  $572 = $ReallocAsyncCtx4 + 268 | 0; //@line 12238
  HEAP32[$572 >> 2] = $134; //@line 12239
  sp = STACKTOP; //@line 12240
  return;
 } else if ((label | 0) == 27) {
  HEAP8[$110 >> 0] = HEAP8[$126 + ($137 & 255) >> 0] | 0; //@line 12248
  $590 = $$0$be + 5 << 24 >> 24; //@line 12261
  HEAP32[$120 >> 2] = (HEAPU8[$126 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$126 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$126 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 12269
  $600 = HEAP32[(HEAP32[$134 >> 2] | 0) + 48 >> 2] | 0; //@line 12272
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(268) | 0; //@line 12273
  $601 = FUNCTION_TABLE_iii[$600 & 31]($122, $58) | 0; //@line 12274
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 580; //@line 12277
   $602 = $ReallocAsyncCtx5 + 4 | 0; //@line 12278
   HEAP32[$602 >> 2] = $2; //@line 12279
   $603 = $ReallocAsyncCtx5 + 8 | 0; //@line 12280
   HEAP32[$603 >> 2] = $4; //@line 12281
   $604 = $ReallocAsyncCtx5 + 12 | 0; //@line 12282
   HEAP32[$604 >> 2] = $6; //@line 12283
   $605 = $ReallocAsyncCtx5 + 16 | 0; //@line 12284
   HEAP32[$605 >> 2] = $8; //@line 12285
   $606 = $ReallocAsyncCtx5 + 20 | 0; //@line 12286
   HEAP32[$606 >> 2] = $10; //@line 12287
   $607 = $ReallocAsyncCtx5 + 24 | 0; //@line 12288
   HEAP32[$607 >> 2] = $12; //@line 12289
   $608 = $ReallocAsyncCtx5 + 28 | 0; //@line 12290
   HEAP32[$608 >> 2] = $14; //@line 12291
   $609 = $ReallocAsyncCtx5 + 32 | 0; //@line 12292
   HEAP32[$609 >> 2] = $16; //@line 12293
   $610 = $ReallocAsyncCtx5 + 36 | 0; //@line 12294
   HEAP32[$610 >> 2] = $18; //@line 12295
   $611 = $ReallocAsyncCtx5 + 40 | 0; //@line 12296
   HEAP32[$611 >> 2] = $20; //@line 12297
   $612 = $ReallocAsyncCtx5 + 44 | 0; //@line 12298
   HEAP32[$612 >> 2] = $22; //@line 12299
   $613 = $ReallocAsyncCtx5 + 48 | 0; //@line 12300
   HEAP32[$613 >> 2] = $24; //@line 12301
   $614 = $ReallocAsyncCtx5 + 52 | 0; //@line 12302
   HEAP32[$614 >> 2] = $26; //@line 12303
   $615 = $ReallocAsyncCtx5 + 56 | 0; //@line 12304
   HEAP32[$615 >> 2] = $28; //@line 12305
   $616 = $ReallocAsyncCtx5 + 60 | 0; //@line 12306
   HEAP32[$616 >> 2] = $30; //@line 12307
   $617 = $ReallocAsyncCtx5 + 64 | 0; //@line 12308
   HEAP32[$617 >> 2] = $32; //@line 12309
   $618 = $ReallocAsyncCtx5 + 68 | 0; //@line 12310
   HEAP32[$618 >> 2] = $34; //@line 12311
   $619 = $ReallocAsyncCtx5 + 72 | 0; //@line 12312
   HEAP32[$619 >> 2] = $36; //@line 12313
   $620 = $ReallocAsyncCtx5 + 76 | 0; //@line 12314
   HEAP32[$620 >> 2] = $38; //@line 12315
   $621 = $ReallocAsyncCtx5 + 80 | 0; //@line 12316
   HEAP32[$621 >> 2] = $40; //@line 12317
   $622 = $ReallocAsyncCtx5 + 84 | 0; //@line 12318
   HEAP32[$622 >> 2] = $42; //@line 12319
   $623 = $ReallocAsyncCtx5 + 88 | 0; //@line 12320
   HEAP32[$623 >> 2] = $44; //@line 12321
   $624 = $ReallocAsyncCtx5 + 92 | 0; //@line 12322
   HEAP32[$624 >> 2] = $46; //@line 12323
   $625 = $ReallocAsyncCtx5 + 96 | 0; //@line 12324
   HEAP32[$625 >> 2] = $48; //@line 12325
   $626 = $ReallocAsyncCtx5 + 100 | 0; //@line 12326
   HEAP32[$626 >> 2] = $50; //@line 12327
   $627 = $ReallocAsyncCtx5 + 104 | 0; //@line 12328
   HEAP32[$627 >> 2] = $52; //@line 12329
   $628 = $ReallocAsyncCtx5 + 108 | 0; //@line 12330
   HEAP32[$628 >> 2] = $54; //@line 12331
   $629 = $ReallocAsyncCtx5 + 112 | 0; //@line 12332
   HEAP32[$629 >> 2] = $56; //@line 12333
   $630 = $ReallocAsyncCtx5 + 116 | 0; //@line 12334
   HEAP32[$630 >> 2] = $58; //@line 12335
   $631 = $ReallocAsyncCtx5 + 120 | 0; //@line 12336
   HEAP32[$631 >> 2] = $64; //@line 12337
   $632 = $ReallocAsyncCtx5 + 124 | 0; //@line 12338
   HEAP32[$632 >> 2] = $62; //@line 12339
   $633 = $ReallocAsyncCtx5 + 128 | 0; //@line 12340
   HEAP32[$633 >> 2] = $66; //@line 12341
   $634 = $ReallocAsyncCtx5 + 132 | 0; //@line 12342
   HEAP8[$634 >> 0] = $590; //@line 12343
   $635 = $ReallocAsyncCtx5 + 136 | 0; //@line 12344
   HEAP32[$635 >> 2] = $70; //@line 12345
   $636 = $ReallocAsyncCtx5 + 140 | 0; //@line 12346
   HEAP32[$636 >> 2] = $68; //@line 12347
   $637 = $ReallocAsyncCtx5 + 144 | 0; //@line 12348
   HEAP32[$637 >> 2] = $72; //@line 12349
   $638 = $ReallocAsyncCtx5 + 148 | 0; //@line 12350
   HEAP32[$638 >> 2] = $74; //@line 12351
   $639 = $ReallocAsyncCtx5 + 152 | 0; //@line 12352
   HEAP32[$639 >> 2] = $76; //@line 12353
   $640 = $ReallocAsyncCtx5 + 156 | 0; //@line 12354
   HEAP32[$640 >> 2] = $78; //@line 12355
   $641 = $ReallocAsyncCtx5 + 160 | 0; //@line 12356
   HEAP32[$641 >> 2] = $80; //@line 12357
   $642 = $ReallocAsyncCtx5 + 164 | 0; //@line 12358
   HEAP32[$642 >> 2] = $82; //@line 12359
   $643 = $ReallocAsyncCtx5 + 168 | 0; //@line 12360
   HEAP32[$643 >> 2] = $84; //@line 12361
   $644 = $ReallocAsyncCtx5 + 172 | 0; //@line 12362
   HEAP32[$644 >> 2] = $86; //@line 12363
   $645 = $ReallocAsyncCtx5 + 176 | 0; //@line 12364
   HEAP32[$645 >> 2] = $88; //@line 12365
   $646 = $ReallocAsyncCtx5 + 180 | 0; //@line 12366
   HEAP32[$646 >> 2] = $90; //@line 12367
   $647 = $ReallocAsyncCtx5 + 184 | 0; //@line 12368
   HEAP32[$647 >> 2] = $92; //@line 12369
   $648 = $ReallocAsyncCtx5 + 188 | 0; //@line 12370
   HEAP32[$648 >> 2] = $94; //@line 12371
   $649 = $ReallocAsyncCtx5 + 192 | 0; //@line 12372
   HEAP32[$649 >> 2] = $96; //@line 12373
   $650 = $ReallocAsyncCtx5 + 196 | 0; //@line 12374
   HEAP32[$650 >> 2] = $98; //@line 12375
   $651 = $ReallocAsyncCtx5 + 200 | 0; //@line 12376
   HEAP32[$651 >> 2] = $100; //@line 12377
   $652 = $ReallocAsyncCtx5 + 204 | 0; //@line 12378
   HEAP32[$652 >> 2] = $102; //@line 12379
   $653 = $ReallocAsyncCtx5 + 208 | 0; //@line 12380
   HEAP32[$653 >> 2] = $104; //@line 12381
   $654 = $ReallocAsyncCtx5 + 212 | 0; //@line 12382
   HEAP32[$654 >> 2] = $106; //@line 12383
   $655 = $ReallocAsyncCtx5 + 216 | 0; //@line 12384
   HEAP32[$655 >> 2] = $108; //@line 12385
   $656 = $ReallocAsyncCtx5 + 220 | 0; //@line 12386
   HEAP32[$656 >> 2] = $110; //@line 12387
   $657 = $ReallocAsyncCtx5 + 224 | 0; //@line 12388
   HEAP32[$657 >> 2] = $112; //@line 12389
   $658 = $ReallocAsyncCtx5 + 228 | 0; //@line 12390
   HEAP8[$658 >> 0] = $114; //@line 12391
   $659 = $ReallocAsyncCtx5 + 232 | 0; //@line 12392
   HEAP32[$659 >> 2] = $116; //@line 12393
   $660 = $ReallocAsyncCtx5 + 236 | 0; //@line 12394
   HEAP32[$660 >> 2] = $118; //@line 12395
   $661 = $ReallocAsyncCtx5 + 240 | 0; //@line 12396
   HEAP32[$661 >> 2] = $120; //@line 12397
   $662 = $ReallocAsyncCtx5 + 244 | 0; //@line 12398
   HEAP32[$662 >> 2] = $122; //@line 12399
   $663 = $ReallocAsyncCtx5 + 248 | 0; //@line 12400
   HEAP32[$663 >> 2] = $124; //@line 12401
   $664 = $ReallocAsyncCtx5 + 252 | 0; //@line 12402
   HEAP32[$664 >> 2] = $126; //@line 12403
   $665 = $ReallocAsyncCtx5 + 256 | 0; //@line 12404
   HEAP8[$665 >> 0] = $128; //@line 12405
   $666 = $ReallocAsyncCtx5 + 257 | 0; //@line 12406
   HEAP8[$666 >> 0] = $130; //@line 12407
   $667 = $ReallocAsyncCtx5 + 260 | 0; //@line 12408
   HEAP32[$667 >> 2] = $132; //@line 12409
   $668 = $ReallocAsyncCtx5 + 264 | 0; //@line 12410
   HEAP32[$668 >> 2] = $134; //@line 12411
   sp = STACKTOP; //@line 12412
   return;
  }
  HEAP8[___async_retval >> 0] = $601; //@line 12416
  ___async_unwind = 0; //@line 12417
  HEAP32[$ReallocAsyncCtx5 >> 2] = 580; //@line 12418
  $602 = $ReallocAsyncCtx5 + 4 | 0; //@line 12419
  HEAP32[$602 >> 2] = $2; //@line 12420
  $603 = $ReallocAsyncCtx5 + 8 | 0; //@line 12421
  HEAP32[$603 >> 2] = $4; //@line 12422
  $604 = $ReallocAsyncCtx5 + 12 | 0; //@line 12423
  HEAP32[$604 >> 2] = $6; //@line 12424
  $605 = $ReallocAsyncCtx5 + 16 | 0; //@line 12425
  HEAP32[$605 >> 2] = $8; //@line 12426
  $606 = $ReallocAsyncCtx5 + 20 | 0; //@line 12427
  HEAP32[$606 >> 2] = $10; //@line 12428
  $607 = $ReallocAsyncCtx5 + 24 | 0; //@line 12429
  HEAP32[$607 >> 2] = $12; //@line 12430
  $608 = $ReallocAsyncCtx5 + 28 | 0; //@line 12431
  HEAP32[$608 >> 2] = $14; //@line 12432
  $609 = $ReallocAsyncCtx5 + 32 | 0; //@line 12433
  HEAP32[$609 >> 2] = $16; //@line 12434
  $610 = $ReallocAsyncCtx5 + 36 | 0; //@line 12435
  HEAP32[$610 >> 2] = $18; //@line 12436
  $611 = $ReallocAsyncCtx5 + 40 | 0; //@line 12437
  HEAP32[$611 >> 2] = $20; //@line 12438
  $612 = $ReallocAsyncCtx5 + 44 | 0; //@line 12439
  HEAP32[$612 >> 2] = $22; //@line 12440
  $613 = $ReallocAsyncCtx5 + 48 | 0; //@line 12441
  HEAP32[$613 >> 2] = $24; //@line 12442
  $614 = $ReallocAsyncCtx5 + 52 | 0; //@line 12443
  HEAP32[$614 >> 2] = $26; //@line 12444
  $615 = $ReallocAsyncCtx5 + 56 | 0; //@line 12445
  HEAP32[$615 >> 2] = $28; //@line 12446
  $616 = $ReallocAsyncCtx5 + 60 | 0; //@line 12447
  HEAP32[$616 >> 2] = $30; //@line 12448
  $617 = $ReallocAsyncCtx5 + 64 | 0; //@line 12449
  HEAP32[$617 >> 2] = $32; //@line 12450
  $618 = $ReallocAsyncCtx5 + 68 | 0; //@line 12451
  HEAP32[$618 >> 2] = $34; //@line 12452
  $619 = $ReallocAsyncCtx5 + 72 | 0; //@line 12453
  HEAP32[$619 >> 2] = $36; //@line 12454
  $620 = $ReallocAsyncCtx5 + 76 | 0; //@line 12455
  HEAP32[$620 >> 2] = $38; //@line 12456
  $621 = $ReallocAsyncCtx5 + 80 | 0; //@line 12457
  HEAP32[$621 >> 2] = $40; //@line 12458
  $622 = $ReallocAsyncCtx5 + 84 | 0; //@line 12459
  HEAP32[$622 >> 2] = $42; //@line 12460
  $623 = $ReallocAsyncCtx5 + 88 | 0; //@line 12461
  HEAP32[$623 >> 2] = $44; //@line 12462
  $624 = $ReallocAsyncCtx5 + 92 | 0; //@line 12463
  HEAP32[$624 >> 2] = $46; //@line 12464
  $625 = $ReallocAsyncCtx5 + 96 | 0; //@line 12465
  HEAP32[$625 >> 2] = $48; //@line 12466
  $626 = $ReallocAsyncCtx5 + 100 | 0; //@line 12467
  HEAP32[$626 >> 2] = $50; //@line 12468
  $627 = $ReallocAsyncCtx5 + 104 | 0; //@line 12469
  HEAP32[$627 >> 2] = $52; //@line 12470
  $628 = $ReallocAsyncCtx5 + 108 | 0; //@line 12471
  HEAP32[$628 >> 2] = $54; //@line 12472
  $629 = $ReallocAsyncCtx5 + 112 | 0; //@line 12473
  HEAP32[$629 >> 2] = $56; //@line 12474
  $630 = $ReallocAsyncCtx5 + 116 | 0; //@line 12475
  HEAP32[$630 >> 2] = $58; //@line 12476
  $631 = $ReallocAsyncCtx5 + 120 | 0; //@line 12477
  HEAP32[$631 >> 2] = $64; //@line 12478
  $632 = $ReallocAsyncCtx5 + 124 | 0; //@line 12479
  HEAP32[$632 >> 2] = $62; //@line 12480
  $633 = $ReallocAsyncCtx5 + 128 | 0; //@line 12481
  HEAP32[$633 >> 2] = $66; //@line 12482
  $634 = $ReallocAsyncCtx5 + 132 | 0; //@line 12483
  HEAP8[$634 >> 0] = $590; //@line 12484
  $635 = $ReallocAsyncCtx5 + 136 | 0; //@line 12485
  HEAP32[$635 >> 2] = $70; //@line 12486
  $636 = $ReallocAsyncCtx5 + 140 | 0; //@line 12487
  HEAP32[$636 >> 2] = $68; //@line 12488
  $637 = $ReallocAsyncCtx5 + 144 | 0; //@line 12489
  HEAP32[$637 >> 2] = $72; //@line 12490
  $638 = $ReallocAsyncCtx5 + 148 | 0; //@line 12491
  HEAP32[$638 >> 2] = $74; //@line 12492
  $639 = $ReallocAsyncCtx5 + 152 | 0; //@line 12493
  HEAP32[$639 >> 2] = $76; //@line 12494
  $640 = $ReallocAsyncCtx5 + 156 | 0; //@line 12495
  HEAP32[$640 >> 2] = $78; //@line 12496
  $641 = $ReallocAsyncCtx5 + 160 | 0; //@line 12497
  HEAP32[$641 >> 2] = $80; //@line 12498
  $642 = $ReallocAsyncCtx5 + 164 | 0; //@line 12499
  HEAP32[$642 >> 2] = $82; //@line 12500
  $643 = $ReallocAsyncCtx5 + 168 | 0; //@line 12501
  HEAP32[$643 >> 2] = $84; //@line 12502
  $644 = $ReallocAsyncCtx5 + 172 | 0; //@line 12503
  HEAP32[$644 >> 2] = $86; //@line 12504
  $645 = $ReallocAsyncCtx5 + 176 | 0; //@line 12505
  HEAP32[$645 >> 2] = $88; //@line 12506
  $646 = $ReallocAsyncCtx5 + 180 | 0; //@line 12507
  HEAP32[$646 >> 2] = $90; //@line 12508
  $647 = $ReallocAsyncCtx5 + 184 | 0; //@line 12509
  HEAP32[$647 >> 2] = $92; //@line 12510
  $648 = $ReallocAsyncCtx5 + 188 | 0; //@line 12511
  HEAP32[$648 >> 2] = $94; //@line 12512
  $649 = $ReallocAsyncCtx5 + 192 | 0; //@line 12513
  HEAP32[$649 >> 2] = $96; //@line 12514
  $650 = $ReallocAsyncCtx5 + 196 | 0; //@line 12515
  HEAP32[$650 >> 2] = $98; //@line 12516
  $651 = $ReallocAsyncCtx5 + 200 | 0; //@line 12517
  HEAP32[$651 >> 2] = $100; //@line 12518
  $652 = $ReallocAsyncCtx5 + 204 | 0; //@line 12519
  HEAP32[$652 >> 2] = $102; //@line 12520
  $653 = $ReallocAsyncCtx5 + 208 | 0; //@line 12521
  HEAP32[$653 >> 2] = $104; //@line 12522
  $654 = $ReallocAsyncCtx5 + 212 | 0; //@line 12523
  HEAP32[$654 >> 2] = $106; //@line 12524
  $655 = $ReallocAsyncCtx5 + 216 | 0; //@line 12525
  HEAP32[$655 >> 2] = $108; //@line 12526
  $656 = $ReallocAsyncCtx5 + 220 | 0; //@line 12527
  HEAP32[$656 >> 2] = $110; //@line 12528
  $657 = $ReallocAsyncCtx5 + 224 | 0; //@line 12529
  HEAP32[$657 >> 2] = $112; //@line 12530
  $658 = $ReallocAsyncCtx5 + 228 | 0; //@line 12531
  HEAP8[$658 >> 0] = $114; //@line 12532
  $659 = $ReallocAsyncCtx5 + 232 | 0; //@line 12533
  HEAP32[$659 >> 2] = $116; //@line 12534
  $660 = $ReallocAsyncCtx5 + 236 | 0; //@line 12535
  HEAP32[$660 >> 2] = $118; //@line 12536
  $661 = $ReallocAsyncCtx5 + 240 | 0; //@line 12537
  HEAP32[$661 >> 2] = $120; //@line 12538
  $662 = $ReallocAsyncCtx5 + 244 | 0; //@line 12539
  HEAP32[$662 >> 2] = $122; //@line 12540
  $663 = $ReallocAsyncCtx5 + 248 | 0; //@line 12541
  HEAP32[$663 >> 2] = $124; //@line 12542
  $664 = $ReallocAsyncCtx5 + 252 | 0; //@line 12543
  HEAP32[$664 >> 2] = $126; //@line 12544
  $665 = $ReallocAsyncCtx5 + 256 | 0; //@line 12545
  HEAP8[$665 >> 0] = $128; //@line 12546
  $666 = $ReallocAsyncCtx5 + 257 | 0; //@line 12547
  HEAP8[$666 >> 0] = $130; //@line 12548
  $667 = $ReallocAsyncCtx5 + 260 | 0; //@line 12549
  HEAP32[$667 >> 2] = $132; //@line 12550
  $668 = $ReallocAsyncCtx5 + 264 | 0; //@line 12551
  HEAP32[$668 >> 2] = $134; //@line 12552
  sp = STACKTOP; //@line 12553
  return;
 } else if ((label | 0) == 31) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 12558
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_346($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i98 = 0, $$096$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $137 = 0, $14 = 0, $148 = 0, $149 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $231 = 0, $234 = 0, $239 = 0, $24 = 0, $247 = 0, $26 = 0, $266 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $347 = 0, $348 = 0, $36 = 0, $38 = 0, $385 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $461 = 0, $465 = 0, $469 = 0, $472 = 0, $478 = 0, $48 = 0, $481 = 0, $482 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $578 = 0, $58 = 0, $588 = 0, $589 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $659 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14534
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14536
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14538
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14540
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14542
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14544
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14546
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14548
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 14550
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 14552
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 14554
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 14556
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 14558
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 14560
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 14562
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 14564
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 14566
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 14568
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 14570
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 14572
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 14574
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 14576
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 14578
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 14580
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 14582
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 14584
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 14586
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 14588
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 14590
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 14592
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 14594
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 14596
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 14598
 $66 = HEAP8[$0 + 132 >> 0] | 0; //@line 14600
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 14602
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 14604
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 14606
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 14608
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 14610
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 14612
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 14614
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 14616
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 14618
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 14620
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 14622
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 14624
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 14626
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 14628
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 14630
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 14632
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 14634
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 14636
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 14638
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 14640
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 14642
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 14644
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 14646
 $114 = HEAP8[$0 + 228 >> 0] | 0; //@line 14648
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 14650
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 14652
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 14654
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 14656
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 14658
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 14660
 $128 = HEAP8[$0 + 256 >> 0] | 0; //@line 14662
 $130 = HEAP8[$0 + 257 >> 0] | 0; //@line 14664
 $132 = HEAP32[$0 + 260 >> 2] | 0; //@line 14666
 $134 = HEAP32[$0 + 264 >> 2] | 0; //@line 14668
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 14670
 $659 = HEAP8[$6 >> 0] | 0; //@line 14672
 if (($659 & 255) < (-128 - (HEAP8[$14 >> 0] | 0) & 255)) {
  HEAP8[($659 & 255) + ($102 + 4) >> 0] = 10; //@line 14679
  HEAP8[$6 >> 0] = $659 + 2 << 24 >> 24; //@line 14681
  HEAP8[($659 + 1 & 255) + ($102 + 4) >> 0] = $AsyncRetVal; //@line 14684
  HEAP8[$32 >> 0] = 1; //@line 14685
  HEAP8[$118 >> 0] = 1; //@line 14686
  $$0$i98 = 0; //@line 14687
 } else {
  $$0$i98 = -1e3; //@line 14689
 }
 $$0$be = $66; //@line 14691
 $$096$be = $$0$i98; //@line 14691
 L5 : while (1) {
  if (($$0$be & 255) >= ($130 & 255)) {
   label = 31; //@line 14695
   break;
  }
  $137 = $$0$be + 1 << 24 >> 24; //@line 14699
  switch (HEAP8[$126 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 14704
    break L5;
    break;
   }
  case 5:
   {
    label = 9; //@line 14709
    break L5;
    break;
   }
  case 7:
   {
    label = 14; //@line 14714
    break L5;
    break;
   }
  case 9:
   {
    label = 19; //@line 14719
    break L5;
    break;
   }
  case 10:
   {
    label = 24; //@line 14724
    break L5;
    break;
   }
  case 2:
   {
    HEAP32[$18 >> 2] = 0; //@line 14729
    HEAP8[$28 >> 0] = HEAP8[$126 + ($137 & 255) >> 0] | 0; //@line 14734
    HEAP8[$2 >> 0] = HEAP8[$126 + ($$0$be + 2 & 255) >> 0] | 0; //@line 14739
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 14740
    continue L5;
    break;
   }
  case 4:
   {
    $231 = $$0$be + 2 << 24 >> 24; //@line 14745
    $234 = HEAP8[$126 + ($137 & 255) >> 0] | 0; //@line 14748
    HEAP8[$108 >> 0] = $234; //@line 14749
    HEAP16[$100 >> 1] = 1 << ($234 & 255); //@line 14753
    $239 = HEAP8[$6 >> 0] | 0; //@line 14755
    if (($239 & 255) >= (-128 - (HEAP8[$14 >> 0] | 0) & 255)) {
     $$0$be = $231; //@line 14759
     $$096$be = -1e3; //@line 14759
     continue L5;
    }
    HEAP8[$6 >> 0] = $239 + 1 << 24 >> 24; //@line 14765
    HEAP8[($239 & 255) + ($102 + 4) >> 0] = 4; //@line 14766
    HEAP8[$118 >> 0] = 1; //@line 14767
    $$0$be = $231; //@line 14768
    $$096$be = 0; //@line 14768
    continue L5;
    break;
   }
  case 6:
   {
    $347 = HEAP8[$6 >> 0] | 0; //@line 14774
    $348 = $347 & 255; //@line 14775
    if (((-128 - (HEAP8[$14 >> 0] | 0) & 255) + -2 | 0) <= ($348 | 0)) {
     $$0$be = $137; //@line 14781
     $$096$be = -1e3; //@line 14781
     continue L5;
    }
    HEAP8[$102 + 4 + $348 >> 0] = 6; //@line 14786
    HEAP8[($347 + 1 & 255) + ($102 + 4) >> 0] = -1; //@line 14790
    HEAP8[$6 >> 0] = $347 + 3 << 24 >> 24; //@line 14792
    HEAP8[($347 + 2 & 255) + ($102 + 4) >> 0] = $114; //@line 14795
    HEAP8[$118 >> 0] = 1; //@line 14796
    $$0$be = $137; //@line 14797
    $$096$be = 0; //@line 14797
    continue L5;
    break;
   }
  case 8:
   {
    $461 = $$0$be + 2 << 24 >> 24; //@line 14802
    $465 = HEAP8[$126 + ($137 & 255) >> 0] & 15; //@line 14806
    $469 = ($465 + ($465 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 14811
    HEAP32[$40 >> 2] = $469; //@line 14812
    HEAP32[$48 >> 2] = $469 + 1e3; //@line 14814
    $472 = HEAP8[$6 >> 0] | 0; //@line 14816
    if (($472 & 255) >= (-128 - (HEAP8[$14 >> 0] | 0) & 255)) {
     $$0$be = $461; //@line 14820
     $$096$be = -1e3; //@line 14820
     continue L5;
    }
    HEAP8[$6 >> 0] = $472 + 1 << 24 >> 24; //@line 14826
    HEAP8[($472 & 255) + ($102 + 4) >> 0] = 8; //@line 14827
    HEAP8[$32 >> 0] = 1; //@line 14828
    HEAP8[$118 >> 0] = 1; //@line 14829
    $$0$be = $461; //@line 14830
    $$096$be = 0; //@line 14830
    continue L5;
    break;
   }
  default:
   {
    $$0$be = $137; //@line 14835
    $$096$be = -1013; //@line 14835
    continue L5;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$106 >> 0] = 0; //@line 14841
  HEAP8[$62 >> 0] = 0; //@line 14842
  HEAP8[$50 >> 0] = 0; //@line 14843
  HEAP8[$88 >> 0] = 0; //@line 14844
  $148 = $137 & 255; //@line 14845
  $149 = $148 + -1 | 0; //@line 14846
  HEAP32[$132 >> 2] = $126 + $149; //@line 14848
  HEAP8[$124 >> 0] = $60 - $149; //@line 14851
  HEAP8[$94 >> 0] = HEAP8[$112 >> 0] | 0; //@line 14853
  HEAP8[$78 >> 0] = HEAP8[$82 >> 0] | 0; //@line 14855
  HEAP8[$64 >> 0] = HEAP8[$70 >> 0] | 0; //@line 14857
  HEAP8[$42 >> 0] = HEAP8[$52 >> 0] | 0; //@line 14859
  HEAP8[$20 >> 0] = HEAP8[$36 >> 0] | 0; //@line 14861
  $160 = HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] | 0; //@line 14864
  $ReallocAsyncCtx = _emscripten_realloc_async_context(272) | 0; //@line 14865
  $161 = FUNCTION_TABLE_iiiiiii[$160 & 3]($122, $116, $106, $62, $50, $88) | 0; //@line 14866
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 576; //@line 14869
   $162 = $ReallocAsyncCtx + 4 | 0; //@line 14870
   HEAP32[$162 >> 2] = $2; //@line 14871
   $163 = $ReallocAsyncCtx + 8 | 0; //@line 14872
   HEAP32[$163 >> 2] = $4; //@line 14873
   $164 = $ReallocAsyncCtx + 12 | 0; //@line 14874
   HEAP32[$164 >> 2] = $6; //@line 14875
   $165 = $ReallocAsyncCtx + 16 | 0; //@line 14876
   HEAP32[$165 >> 2] = $8; //@line 14877
   $166 = $ReallocAsyncCtx + 20 | 0; //@line 14878
   HEAP32[$166 >> 2] = $10; //@line 14879
   $167 = $ReallocAsyncCtx + 24 | 0; //@line 14880
   HEAP32[$167 >> 2] = $$096$be; //@line 14881
   $168 = $ReallocAsyncCtx + 28 | 0; //@line 14882
   HEAP32[$168 >> 2] = $14; //@line 14883
   $169 = $ReallocAsyncCtx + 32 | 0; //@line 14884
   HEAP32[$169 >> 2] = $12; //@line 14885
   $170 = $ReallocAsyncCtx + 36 | 0; //@line 14886
   HEAP32[$170 >> 2] = $16; //@line 14887
   $171 = $ReallocAsyncCtx + 40 | 0; //@line 14888
   HEAP32[$171 >> 2] = $18; //@line 14889
   $172 = $ReallocAsyncCtx + 44 | 0; //@line 14890
   HEAP32[$172 >> 2] = $20; //@line 14891
   $173 = $ReallocAsyncCtx + 48 | 0; //@line 14892
   HEAP32[$173 >> 2] = $22; //@line 14893
   $174 = $ReallocAsyncCtx + 52 | 0; //@line 14894
   HEAP32[$174 >> 2] = $24; //@line 14895
   $175 = $ReallocAsyncCtx + 56 | 0; //@line 14896
   HEAP32[$175 >> 2] = $26; //@line 14897
   $176 = $ReallocAsyncCtx + 60 | 0; //@line 14898
   HEAP32[$176 >> 2] = $28; //@line 14899
   $177 = $ReallocAsyncCtx + 64 | 0; //@line 14900
   HEAP32[$177 >> 2] = $30; //@line 14901
   $178 = $ReallocAsyncCtx + 68 | 0; //@line 14902
   HEAP32[$178 >> 2] = $32; //@line 14903
   $179 = $ReallocAsyncCtx + 72 | 0; //@line 14904
   HEAP32[$179 >> 2] = $34; //@line 14905
   $180 = $ReallocAsyncCtx + 76 | 0; //@line 14906
   HEAP32[$180 >> 2] = $36; //@line 14907
   $181 = $ReallocAsyncCtx + 80 | 0; //@line 14908
   HEAP32[$181 >> 2] = $38; //@line 14909
   $182 = $ReallocAsyncCtx + 84 | 0; //@line 14910
   HEAP32[$182 >> 2] = $40; //@line 14911
   $183 = $ReallocAsyncCtx + 88 | 0; //@line 14912
   HEAP32[$183 >> 2] = $42; //@line 14913
   $184 = $ReallocAsyncCtx + 92 | 0; //@line 14914
   HEAP32[$184 >> 2] = $44; //@line 14915
   $185 = $ReallocAsyncCtx + 96 | 0; //@line 14916
   HEAP32[$185 >> 2] = $46; //@line 14917
   $186 = $ReallocAsyncCtx + 100 | 0; //@line 14918
   HEAP32[$186 >> 2] = $48; //@line 14919
   $187 = $ReallocAsyncCtx + 104 | 0; //@line 14920
   HEAP32[$187 >> 2] = $50; //@line 14921
   $188 = $ReallocAsyncCtx + 108 | 0; //@line 14922
   HEAP32[$188 >> 2] = $52; //@line 14923
   $189 = $ReallocAsyncCtx + 112 | 0; //@line 14924
   HEAP32[$189 >> 2] = $54; //@line 14925
   $190 = $ReallocAsyncCtx + 116 | 0; //@line 14926
   HEAP32[$190 >> 2] = $56; //@line 14927
   $191 = $ReallocAsyncCtx + 120 | 0; //@line 14928
   HEAP32[$191 >> 2] = $58; //@line 14929
   $192 = $ReallocAsyncCtx + 124 | 0; //@line 14930
   HEAP32[$192 >> 2] = $60; //@line 14931
   $193 = $ReallocAsyncCtx + 128 | 0; //@line 14932
   HEAP32[$193 >> 2] = $62; //@line 14933
   $194 = $ReallocAsyncCtx + 132 | 0; //@line 14934
   HEAP32[$194 >> 2] = $64; //@line 14935
   $195 = $ReallocAsyncCtx + 136 | 0; //@line 14936
   HEAP32[$195 >> 2] = $68; //@line 14937
   $196 = $ReallocAsyncCtx + 140 | 0; //@line 14938
   HEAP32[$196 >> 2] = $70; //@line 14939
   $197 = $ReallocAsyncCtx + 144 | 0; //@line 14940
   HEAP32[$197 >> 2] = $72; //@line 14941
   $198 = $ReallocAsyncCtx + 148 | 0; //@line 14942
   HEAP32[$198 >> 2] = $74; //@line 14943
   $199 = $ReallocAsyncCtx + 152 | 0; //@line 14944
   HEAP32[$199 >> 2] = $76; //@line 14945
   $200 = $ReallocAsyncCtx + 156 | 0; //@line 14946
   HEAP32[$200 >> 2] = $78; //@line 14947
   $201 = $ReallocAsyncCtx + 160 | 0; //@line 14948
   HEAP32[$201 >> 2] = $80; //@line 14949
   $202 = $ReallocAsyncCtx + 164 | 0; //@line 14950
   HEAP32[$202 >> 2] = $82; //@line 14951
   $203 = $ReallocAsyncCtx + 168 | 0; //@line 14952
   HEAP32[$203 >> 2] = $84; //@line 14953
   $204 = $ReallocAsyncCtx + 172 | 0; //@line 14954
   HEAP32[$204 >> 2] = $86; //@line 14955
   $205 = $ReallocAsyncCtx + 176 | 0; //@line 14956
   HEAP32[$205 >> 2] = $88; //@line 14957
   $206 = $ReallocAsyncCtx + 180 | 0; //@line 14958
   HEAP32[$206 >> 2] = $148; //@line 14959
   $207 = $ReallocAsyncCtx + 184 | 0; //@line 14960
   HEAP32[$207 >> 2] = $90; //@line 14961
   $208 = $ReallocAsyncCtx + 188 | 0; //@line 14962
   HEAP32[$208 >> 2] = $92; //@line 14963
   $209 = $ReallocAsyncCtx + 192 | 0; //@line 14964
   HEAP32[$209 >> 2] = $94; //@line 14965
   $210 = $ReallocAsyncCtx + 196 | 0; //@line 14966
   HEAP32[$210 >> 2] = $96; //@line 14967
   $211 = $ReallocAsyncCtx + 200 | 0; //@line 14968
   HEAP32[$211 >> 2] = $98; //@line 14969
   $212 = $ReallocAsyncCtx + 204 | 0; //@line 14970
   HEAP32[$212 >> 2] = $100; //@line 14971
   $213 = $ReallocAsyncCtx + 208 | 0; //@line 14972
   HEAP32[$213 >> 2] = $102; //@line 14973
   $214 = $ReallocAsyncCtx + 212 | 0; //@line 14974
   HEAP32[$214 >> 2] = $104; //@line 14975
   $215 = $ReallocAsyncCtx + 216 | 0; //@line 14976
   HEAP32[$215 >> 2] = $106; //@line 14977
   $216 = $ReallocAsyncCtx + 220 | 0; //@line 14978
   HEAP32[$216 >> 2] = $108; //@line 14979
   $217 = $ReallocAsyncCtx + 224 | 0; //@line 14980
   HEAP32[$217 >> 2] = $110; //@line 14981
   $218 = $ReallocAsyncCtx + 228 | 0; //@line 14982
   HEAP32[$218 >> 2] = $112; //@line 14983
   $219 = $ReallocAsyncCtx + 232 | 0; //@line 14984
   HEAP8[$219 >> 0] = $114; //@line 14985
   $220 = $ReallocAsyncCtx + 236 | 0; //@line 14986
   HEAP32[$220 >> 2] = $116; //@line 14987
   $221 = $ReallocAsyncCtx + 240 | 0; //@line 14988
   HEAP32[$221 >> 2] = $118; //@line 14989
   $222 = $ReallocAsyncCtx + 244 | 0; //@line 14990
   HEAP32[$222 >> 2] = $120; //@line 14991
   $223 = $ReallocAsyncCtx + 248 | 0; //@line 14992
   HEAP32[$223 >> 2] = $122; //@line 14993
   $224 = $ReallocAsyncCtx + 252 | 0; //@line 14994
   HEAP32[$224 >> 2] = $124; //@line 14995
   $225 = $ReallocAsyncCtx + 256 | 0; //@line 14996
   HEAP32[$225 >> 2] = $126; //@line 14997
   $226 = $ReallocAsyncCtx + 260 | 0; //@line 14998
   HEAP8[$226 >> 0] = $128; //@line 14999
   $227 = $ReallocAsyncCtx + 261 | 0; //@line 15000
   HEAP8[$227 >> 0] = $130; //@line 15001
   $228 = $ReallocAsyncCtx + 264 | 0; //@line 15002
   HEAP32[$228 >> 2] = $132; //@line 15003
   $229 = $ReallocAsyncCtx + 268 | 0; //@line 15004
   HEAP32[$229 >> 2] = $134; //@line 15005
   sp = STACKTOP; //@line 15006
   return;
  }
  HEAP8[___async_retval >> 0] = $161; //@line 15010
  ___async_unwind = 0; //@line 15011
  HEAP32[$ReallocAsyncCtx >> 2] = 576; //@line 15012
  $162 = $ReallocAsyncCtx + 4 | 0; //@line 15013
  HEAP32[$162 >> 2] = $2; //@line 15014
  $163 = $ReallocAsyncCtx + 8 | 0; //@line 15015
  HEAP32[$163 >> 2] = $4; //@line 15016
  $164 = $ReallocAsyncCtx + 12 | 0; //@line 15017
  HEAP32[$164 >> 2] = $6; //@line 15018
  $165 = $ReallocAsyncCtx + 16 | 0; //@line 15019
  HEAP32[$165 >> 2] = $8; //@line 15020
  $166 = $ReallocAsyncCtx + 20 | 0; //@line 15021
  HEAP32[$166 >> 2] = $10; //@line 15022
  $167 = $ReallocAsyncCtx + 24 | 0; //@line 15023
  HEAP32[$167 >> 2] = $$096$be; //@line 15024
  $168 = $ReallocAsyncCtx + 28 | 0; //@line 15025
  HEAP32[$168 >> 2] = $14; //@line 15026
  $169 = $ReallocAsyncCtx + 32 | 0; //@line 15027
  HEAP32[$169 >> 2] = $12; //@line 15028
  $170 = $ReallocAsyncCtx + 36 | 0; //@line 15029
  HEAP32[$170 >> 2] = $16; //@line 15030
  $171 = $ReallocAsyncCtx + 40 | 0; //@line 15031
  HEAP32[$171 >> 2] = $18; //@line 15032
  $172 = $ReallocAsyncCtx + 44 | 0; //@line 15033
  HEAP32[$172 >> 2] = $20; //@line 15034
  $173 = $ReallocAsyncCtx + 48 | 0; //@line 15035
  HEAP32[$173 >> 2] = $22; //@line 15036
  $174 = $ReallocAsyncCtx + 52 | 0; //@line 15037
  HEAP32[$174 >> 2] = $24; //@line 15038
  $175 = $ReallocAsyncCtx + 56 | 0; //@line 15039
  HEAP32[$175 >> 2] = $26; //@line 15040
  $176 = $ReallocAsyncCtx + 60 | 0; //@line 15041
  HEAP32[$176 >> 2] = $28; //@line 15042
  $177 = $ReallocAsyncCtx + 64 | 0; //@line 15043
  HEAP32[$177 >> 2] = $30; //@line 15044
  $178 = $ReallocAsyncCtx + 68 | 0; //@line 15045
  HEAP32[$178 >> 2] = $32; //@line 15046
  $179 = $ReallocAsyncCtx + 72 | 0; //@line 15047
  HEAP32[$179 >> 2] = $34; //@line 15048
  $180 = $ReallocAsyncCtx + 76 | 0; //@line 15049
  HEAP32[$180 >> 2] = $36; //@line 15050
  $181 = $ReallocAsyncCtx + 80 | 0; //@line 15051
  HEAP32[$181 >> 2] = $38; //@line 15052
  $182 = $ReallocAsyncCtx + 84 | 0; //@line 15053
  HEAP32[$182 >> 2] = $40; //@line 15054
  $183 = $ReallocAsyncCtx + 88 | 0; //@line 15055
  HEAP32[$183 >> 2] = $42; //@line 15056
  $184 = $ReallocAsyncCtx + 92 | 0; //@line 15057
  HEAP32[$184 >> 2] = $44; //@line 15058
  $185 = $ReallocAsyncCtx + 96 | 0; //@line 15059
  HEAP32[$185 >> 2] = $46; //@line 15060
  $186 = $ReallocAsyncCtx + 100 | 0; //@line 15061
  HEAP32[$186 >> 2] = $48; //@line 15062
  $187 = $ReallocAsyncCtx + 104 | 0; //@line 15063
  HEAP32[$187 >> 2] = $50; //@line 15064
  $188 = $ReallocAsyncCtx + 108 | 0; //@line 15065
  HEAP32[$188 >> 2] = $52; //@line 15066
  $189 = $ReallocAsyncCtx + 112 | 0; //@line 15067
  HEAP32[$189 >> 2] = $54; //@line 15068
  $190 = $ReallocAsyncCtx + 116 | 0; //@line 15069
  HEAP32[$190 >> 2] = $56; //@line 15070
  $191 = $ReallocAsyncCtx + 120 | 0; //@line 15071
  HEAP32[$191 >> 2] = $58; //@line 15072
  $192 = $ReallocAsyncCtx + 124 | 0; //@line 15073
  HEAP32[$192 >> 2] = $60; //@line 15074
  $193 = $ReallocAsyncCtx + 128 | 0; //@line 15075
  HEAP32[$193 >> 2] = $62; //@line 15076
  $194 = $ReallocAsyncCtx + 132 | 0; //@line 15077
  HEAP32[$194 >> 2] = $64; //@line 15078
  $195 = $ReallocAsyncCtx + 136 | 0; //@line 15079
  HEAP32[$195 >> 2] = $68; //@line 15080
  $196 = $ReallocAsyncCtx + 140 | 0; //@line 15081
  HEAP32[$196 >> 2] = $70; //@line 15082
  $197 = $ReallocAsyncCtx + 144 | 0; //@line 15083
  HEAP32[$197 >> 2] = $72; //@line 15084
  $198 = $ReallocAsyncCtx + 148 | 0; //@line 15085
  HEAP32[$198 >> 2] = $74; //@line 15086
  $199 = $ReallocAsyncCtx + 152 | 0; //@line 15087
  HEAP32[$199 >> 2] = $76; //@line 15088
  $200 = $ReallocAsyncCtx + 156 | 0; //@line 15089
  HEAP32[$200 >> 2] = $78; //@line 15090
  $201 = $ReallocAsyncCtx + 160 | 0; //@line 15091
  HEAP32[$201 >> 2] = $80; //@line 15092
  $202 = $ReallocAsyncCtx + 164 | 0; //@line 15093
  HEAP32[$202 >> 2] = $82; //@line 15094
  $203 = $ReallocAsyncCtx + 168 | 0; //@line 15095
  HEAP32[$203 >> 2] = $84; //@line 15096
  $204 = $ReallocAsyncCtx + 172 | 0; //@line 15097
  HEAP32[$204 >> 2] = $86; //@line 15098
  $205 = $ReallocAsyncCtx + 176 | 0; //@line 15099
  HEAP32[$205 >> 2] = $88; //@line 15100
  $206 = $ReallocAsyncCtx + 180 | 0; //@line 15101
  HEAP32[$206 >> 2] = $148; //@line 15102
  $207 = $ReallocAsyncCtx + 184 | 0; //@line 15103
  HEAP32[$207 >> 2] = $90; //@line 15104
  $208 = $ReallocAsyncCtx + 188 | 0; //@line 15105
  HEAP32[$208 >> 2] = $92; //@line 15106
  $209 = $ReallocAsyncCtx + 192 | 0; //@line 15107
  HEAP32[$209 >> 2] = $94; //@line 15108
  $210 = $ReallocAsyncCtx + 196 | 0; //@line 15109
  HEAP32[$210 >> 2] = $96; //@line 15110
  $211 = $ReallocAsyncCtx + 200 | 0; //@line 15111
  HEAP32[$211 >> 2] = $98; //@line 15112
  $212 = $ReallocAsyncCtx + 204 | 0; //@line 15113
  HEAP32[$212 >> 2] = $100; //@line 15114
  $213 = $ReallocAsyncCtx + 208 | 0; //@line 15115
  HEAP32[$213 >> 2] = $102; //@line 15116
  $214 = $ReallocAsyncCtx + 212 | 0; //@line 15117
  HEAP32[$214 >> 2] = $104; //@line 15118
  $215 = $ReallocAsyncCtx + 216 | 0; //@line 15119
  HEAP32[$215 >> 2] = $106; //@line 15120
  $216 = $ReallocAsyncCtx + 220 | 0; //@line 15121
  HEAP32[$216 >> 2] = $108; //@line 15122
  $217 = $ReallocAsyncCtx + 224 | 0; //@line 15123
  HEAP32[$217 >> 2] = $110; //@line 15124
  $218 = $ReallocAsyncCtx + 228 | 0; //@line 15125
  HEAP32[$218 >> 2] = $112; //@line 15126
  $219 = $ReallocAsyncCtx + 232 | 0; //@line 15127
  HEAP8[$219 >> 0] = $114; //@line 15128
  $220 = $ReallocAsyncCtx + 236 | 0; //@line 15129
  HEAP32[$220 >> 2] = $116; //@line 15130
  $221 = $ReallocAsyncCtx + 240 | 0; //@line 15131
  HEAP32[$221 >> 2] = $118; //@line 15132
  $222 = $ReallocAsyncCtx + 244 | 0; //@line 15133
  HEAP32[$222 >> 2] = $120; //@line 15134
  $223 = $ReallocAsyncCtx + 248 | 0; //@line 15135
  HEAP32[$223 >> 2] = $122; //@line 15136
  $224 = $ReallocAsyncCtx + 252 | 0; //@line 15137
  HEAP32[$224 >> 2] = $124; //@line 15138
  $225 = $ReallocAsyncCtx + 256 | 0; //@line 15139
  HEAP32[$225 >> 2] = $126; //@line 15140
  $226 = $ReallocAsyncCtx + 260 | 0; //@line 15141
  HEAP8[$226 >> 0] = $128; //@line 15142
  $227 = $ReallocAsyncCtx + 261 | 0; //@line 15143
  HEAP8[$227 >> 0] = $130; //@line 15144
  $228 = $ReallocAsyncCtx + 264 | 0; //@line 15145
  HEAP32[$228 >> 2] = $132; //@line 15146
  $229 = $ReallocAsyncCtx + 268 | 0; //@line 15147
  HEAP32[$229 >> 2] = $134; //@line 15148
  sp = STACKTOP; //@line 15149
  return;
 } else if ((label | 0) == 9) {
  $247 = HEAP8[$126 + ($137 & 255) >> 0] | 0; //@line 15155
  HEAP8[$86 >> 0] = ($247 & 255) >>> 4 & 7; //@line 15160
  HEAP8[$98 >> 0] = $247 & 15; //@line 15162
  $266 = $$0$be + 5 << 24 >> 24; //@line 15176
  HEAP32[$76 >> 2] = (HEAPU8[$126 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$126 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$126 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 15184
  $276 = HEAP32[(HEAP32[$74 >> 2] | 0) + 40 >> 2] | 0; //@line 15187
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(268) | 0; //@line 15188
  $277 = FUNCTION_TABLE_iii[$276 & 31]($122, $90) | 0; //@line 15189
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 577; //@line 15192
   $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 15193
   HEAP32[$278 >> 2] = $2; //@line 15194
   $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 15195
   HEAP32[$279 >> 2] = $4; //@line 15196
   $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 15197
   HEAP32[$280 >> 2] = $6; //@line 15198
   $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 15199
   HEAP32[$281 >> 2] = $8; //@line 15200
   $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 15201
   HEAP32[$282 >> 2] = $10; //@line 15202
   $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 15203
   HEAP32[$283 >> 2] = $12; //@line 15204
   $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 15205
   HEAP32[$284 >> 2] = $14; //@line 15206
   $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 15207
   HEAP32[$285 >> 2] = $16; //@line 15208
   $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 15209
   HEAP32[$286 >> 2] = $18; //@line 15210
   $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 15211
   HEAP32[$287 >> 2] = $20; //@line 15212
   $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 15213
   HEAP32[$288 >> 2] = $22; //@line 15214
   $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 15215
   HEAP32[$289 >> 2] = $24; //@line 15216
   $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 15217
   HEAP32[$290 >> 2] = $26; //@line 15218
   $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 15219
   HEAP32[$291 >> 2] = $28; //@line 15220
   $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 15221
   HEAP32[$292 >> 2] = $30; //@line 15222
   $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 15223
   HEAP32[$293 >> 2] = $32; //@line 15224
   $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 15225
   HEAP32[$294 >> 2] = $34; //@line 15226
   $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 15227
   HEAP32[$295 >> 2] = $36; //@line 15228
   $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 15229
   HEAP32[$296 >> 2] = $38; //@line 15230
   $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 15231
   HEAP32[$297 >> 2] = $40; //@line 15232
   $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 15233
   HEAP32[$298 >> 2] = $42; //@line 15234
   $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 15235
   HEAP32[$299 >> 2] = $44; //@line 15236
   $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 15237
   HEAP32[$300 >> 2] = $46; //@line 15238
   $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 15239
   HEAP32[$301 >> 2] = $48; //@line 15240
   $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 15241
   HEAP32[$302 >> 2] = $50; //@line 15242
   $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 15243
   HEAP32[$303 >> 2] = $52; //@line 15244
   $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 15245
   HEAP32[$304 >> 2] = $54; //@line 15246
   $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 15247
   HEAP32[$305 >> 2] = $56; //@line 15248
   $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 15249
   HEAP32[$306 >> 2] = $58; //@line 15250
   $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 15251
   HEAP32[$307 >> 2] = $60; //@line 15252
   $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 15253
   HEAP32[$308 >> 2] = $62; //@line 15254
   $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 15255
   HEAP32[$309 >> 2] = $64; //@line 15256
   $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 15257
   HEAP32[$310 >> 2] = $68; //@line 15258
   $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 15259
   HEAP32[$311 >> 2] = $70; //@line 15260
   $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 15261
   HEAP32[$312 >> 2] = $72; //@line 15262
   $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 15263
   HEAP32[$313 >> 2] = $74; //@line 15264
   $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 15265
   HEAP8[$314 >> 0] = $266; //@line 15266
   $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 15267
   HEAP32[$315 >> 2] = $76; //@line 15268
   $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 15269
   HEAP32[$316 >> 2] = $78; //@line 15270
   $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 15271
   HEAP32[$317 >> 2] = $80; //@line 15272
   $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 15273
   HEAP32[$318 >> 2] = $82; //@line 15274
   $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 15275
   HEAP32[$319 >> 2] = $84; //@line 15276
   $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 15277
   HEAP32[$320 >> 2] = $86; //@line 15278
   $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 15279
   HEAP32[$321 >> 2] = $88; //@line 15280
   $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 15281
   HEAP32[$322 >> 2] = $90; //@line 15282
   $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 15283
   HEAP32[$323 >> 2] = $92; //@line 15284
   $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 15285
   HEAP32[$324 >> 2] = $94; //@line 15286
   $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 15287
   HEAP32[$325 >> 2] = $96; //@line 15288
   $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 15289
   HEAP32[$326 >> 2] = $98; //@line 15290
   $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 15291
   HEAP32[$327 >> 2] = $100; //@line 15292
   $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 15293
   HEAP32[$328 >> 2] = $102; //@line 15294
   $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 15295
   HEAP32[$329 >> 2] = $104; //@line 15296
   $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 15297
   HEAP32[$330 >> 2] = $106; //@line 15298
   $331 = $ReallocAsyncCtx2 + 216 | 0; //@line 15299
   HEAP32[$331 >> 2] = $108; //@line 15300
   $332 = $ReallocAsyncCtx2 + 220 | 0; //@line 15301
   HEAP32[$332 >> 2] = $110; //@line 15302
   $333 = $ReallocAsyncCtx2 + 224 | 0; //@line 15303
   HEAP32[$333 >> 2] = $112; //@line 15304
   $334 = $ReallocAsyncCtx2 + 228 | 0; //@line 15305
   HEAP8[$334 >> 0] = $114; //@line 15306
   $335 = $ReallocAsyncCtx2 + 232 | 0; //@line 15307
   HEAP32[$335 >> 2] = $116; //@line 15308
   $336 = $ReallocAsyncCtx2 + 236 | 0; //@line 15309
   HEAP32[$336 >> 2] = $118; //@line 15310
   $337 = $ReallocAsyncCtx2 + 240 | 0; //@line 15311
   HEAP32[$337 >> 2] = $120; //@line 15312
   $338 = $ReallocAsyncCtx2 + 244 | 0; //@line 15313
   HEAP32[$338 >> 2] = $122; //@line 15314
   $339 = $ReallocAsyncCtx2 + 248 | 0; //@line 15315
   HEAP32[$339 >> 2] = $124; //@line 15316
   $340 = $ReallocAsyncCtx2 + 252 | 0; //@line 15317
   HEAP32[$340 >> 2] = $126; //@line 15318
   $341 = $ReallocAsyncCtx2 + 256 | 0; //@line 15319
   HEAP8[$341 >> 0] = $128; //@line 15320
   $342 = $ReallocAsyncCtx2 + 257 | 0; //@line 15321
   HEAP8[$342 >> 0] = $130; //@line 15322
   $343 = $ReallocAsyncCtx2 + 260 | 0; //@line 15323
   HEAP32[$343 >> 2] = $132; //@line 15324
   $344 = $ReallocAsyncCtx2 + 264 | 0; //@line 15325
   HEAP32[$344 >> 2] = $134; //@line 15326
   sp = STACKTOP; //@line 15327
   return;
  }
  HEAP8[___async_retval >> 0] = $277; //@line 15331
  ___async_unwind = 0; //@line 15332
  HEAP32[$ReallocAsyncCtx2 >> 2] = 577; //@line 15333
  $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 15334
  HEAP32[$278 >> 2] = $2; //@line 15335
  $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 15336
  HEAP32[$279 >> 2] = $4; //@line 15337
  $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 15338
  HEAP32[$280 >> 2] = $6; //@line 15339
  $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 15340
  HEAP32[$281 >> 2] = $8; //@line 15341
  $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 15342
  HEAP32[$282 >> 2] = $10; //@line 15343
  $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 15344
  HEAP32[$283 >> 2] = $12; //@line 15345
  $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 15346
  HEAP32[$284 >> 2] = $14; //@line 15347
  $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 15348
  HEAP32[$285 >> 2] = $16; //@line 15349
  $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 15350
  HEAP32[$286 >> 2] = $18; //@line 15351
  $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 15352
  HEAP32[$287 >> 2] = $20; //@line 15353
  $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 15354
  HEAP32[$288 >> 2] = $22; //@line 15355
  $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 15356
  HEAP32[$289 >> 2] = $24; //@line 15357
  $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 15358
  HEAP32[$290 >> 2] = $26; //@line 15359
  $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 15360
  HEAP32[$291 >> 2] = $28; //@line 15361
  $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 15362
  HEAP32[$292 >> 2] = $30; //@line 15363
  $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 15364
  HEAP32[$293 >> 2] = $32; //@line 15365
  $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 15366
  HEAP32[$294 >> 2] = $34; //@line 15367
  $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 15368
  HEAP32[$295 >> 2] = $36; //@line 15369
  $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 15370
  HEAP32[$296 >> 2] = $38; //@line 15371
  $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 15372
  HEAP32[$297 >> 2] = $40; //@line 15373
  $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 15374
  HEAP32[$298 >> 2] = $42; //@line 15375
  $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 15376
  HEAP32[$299 >> 2] = $44; //@line 15377
  $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 15378
  HEAP32[$300 >> 2] = $46; //@line 15379
  $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 15380
  HEAP32[$301 >> 2] = $48; //@line 15381
  $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 15382
  HEAP32[$302 >> 2] = $50; //@line 15383
  $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 15384
  HEAP32[$303 >> 2] = $52; //@line 15385
  $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 15386
  HEAP32[$304 >> 2] = $54; //@line 15387
  $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 15388
  HEAP32[$305 >> 2] = $56; //@line 15389
  $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 15390
  HEAP32[$306 >> 2] = $58; //@line 15391
  $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 15392
  HEAP32[$307 >> 2] = $60; //@line 15393
  $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 15394
  HEAP32[$308 >> 2] = $62; //@line 15395
  $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 15396
  HEAP32[$309 >> 2] = $64; //@line 15397
  $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 15398
  HEAP32[$310 >> 2] = $68; //@line 15399
  $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 15400
  HEAP32[$311 >> 2] = $70; //@line 15401
  $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 15402
  HEAP32[$312 >> 2] = $72; //@line 15403
  $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 15404
  HEAP32[$313 >> 2] = $74; //@line 15405
  $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 15406
  HEAP8[$314 >> 0] = $266; //@line 15407
  $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 15408
  HEAP32[$315 >> 2] = $76; //@line 15409
  $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 15410
  HEAP32[$316 >> 2] = $78; //@line 15411
  $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 15412
  HEAP32[$317 >> 2] = $80; //@line 15413
  $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 15414
  HEAP32[$318 >> 2] = $82; //@line 15415
  $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 15416
  HEAP32[$319 >> 2] = $84; //@line 15417
  $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 15418
  HEAP32[$320 >> 2] = $86; //@line 15419
  $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 15420
  HEAP32[$321 >> 2] = $88; //@line 15421
  $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 15422
  HEAP32[$322 >> 2] = $90; //@line 15423
  $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 15424
  HEAP32[$323 >> 2] = $92; //@line 15425
  $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 15426
  HEAP32[$324 >> 2] = $94; //@line 15427
  $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 15428
  HEAP32[$325 >> 2] = $96; //@line 15429
  $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 15430
  HEAP32[$326 >> 2] = $98; //@line 15431
  $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 15432
  HEAP32[$327 >> 2] = $100; //@line 15433
  $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 15434
  HEAP32[$328 >> 2] = $102; //@line 15435
  $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 15436
  HEAP32[$329 >> 2] = $104; //@line 15437
  $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 15438
  HEAP32[$330 >> 2] = $106; //@line 15439
  $331 = $ReallocAsyncCtx2 + 216 | 0; //@line 15440
  HEAP32[$331 >> 2] = $108; //@line 15441
  $332 = $ReallocAsyncCtx2 + 220 | 0; //@line 15442
  HEAP32[$332 >> 2] = $110; //@line 15443
  $333 = $ReallocAsyncCtx2 + 224 | 0; //@line 15444
  HEAP32[$333 >> 2] = $112; //@line 15445
  $334 = $ReallocAsyncCtx2 + 228 | 0; //@line 15446
  HEAP8[$334 >> 0] = $114; //@line 15447
  $335 = $ReallocAsyncCtx2 + 232 | 0; //@line 15448
  HEAP32[$335 >> 2] = $116; //@line 15449
  $336 = $ReallocAsyncCtx2 + 236 | 0; //@line 15450
  HEAP32[$336 >> 2] = $118; //@line 15451
  $337 = $ReallocAsyncCtx2 + 240 | 0; //@line 15452
  HEAP32[$337 >> 2] = $120; //@line 15453
  $338 = $ReallocAsyncCtx2 + 244 | 0; //@line 15454
  HEAP32[$338 >> 2] = $122; //@line 15455
  $339 = $ReallocAsyncCtx2 + 248 | 0; //@line 15456
  HEAP32[$339 >> 2] = $124; //@line 15457
  $340 = $ReallocAsyncCtx2 + 252 | 0; //@line 15458
  HEAP32[$340 >> 2] = $126; //@line 15459
  $341 = $ReallocAsyncCtx2 + 256 | 0; //@line 15460
  HEAP8[$341 >> 0] = $128; //@line 15461
  $342 = $ReallocAsyncCtx2 + 257 | 0; //@line 15462
  HEAP8[$342 >> 0] = $130; //@line 15463
  $343 = $ReallocAsyncCtx2 + 260 | 0; //@line 15464
  HEAP32[$343 >> 2] = $132; //@line 15465
  $344 = $ReallocAsyncCtx2 + 264 | 0; //@line 15466
  HEAP32[$344 >> 2] = $134; //@line 15467
  sp = STACKTOP; //@line 15468
  return;
 } else if ((label | 0) == 14) {
  HEAP8[$12 >> 0] = HEAP8[$126 + ($137 & 255) >> 0] | 0; //@line 15476
  HEAP32[$4 >> 2] = $46; //@line 15477
  HEAP32[$8 >> 2] = (HEAPU8[$126 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$126 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$126 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 15498
  HEAP32[$16 >> 2] = 0; //@line 15499
  $385 = $$0$be + 6 << 24 >> 24; //@line 15500
  HEAP8[$30 >> 0] = HEAP8[$126 + ($$0$be + 5 & 255) >> 0] | 0; //@line 15504
  $391 = HEAP32[(HEAP32[$34 >> 2] | 0) + 8 >> 2] | 0; //@line 15507
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(268) | 0; //@line 15508
  $392 = FUNCTION_TABLE_iii[$391 & 31]($122, $96) | 0; //@line 15509
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 578; //@line 15512
   $393 = $ReallocAsyncCtx3 + 4 | 0; //@line 15513
   HEAP32[$393 >> 2] = $2; //@line 15514
   $394 = $ReallocAsyncCtx3 + 8 | 0; //@line 15515
   HEAP32[$394 >> 2] = $4; //@line 15516
   $395 = $ReallocAsyncCtx3 + 12 | 0; //@line 15517
   HEAP32[$395 >> 2] = $6; //@line 15518
   $396 = $ReallocAsyncCtx3 + 16 | 0; //@line 15519
   HEAP32[$396 >> 2] = $8; //@line 15520
   $397 = $ReallocAsyncCtx3 + 20 | 0; //@line 15521
   HEAP32[$397 >> 2] = $10; //@line 15522
   $398 = $ReallocAsyncCtx3 + 24 | 0; //@line 15523
   HEAP32[$398 >> 2] = $12; //@line 15524
   $399 = $ReallocAsyncCtx3 + 28 | 0; //@line 15525
   HEAP32[$399 >> 2] = $14; //@line 15526
   $400 = $ReallocAsyncCtx3 + 32 | 0; //@line 15527
   HEAP32[$400 >> 2] = $16; //@line 15528
   $401 = $ReallocAsyncCtx3 + 36 | 0; //@line 15529
   HEAP32[$401 >> 2] = $18; //@line 15530
   $402 = $ReallocAsyncCtx3 + 40 | 0; //@line 15531
   HEAP32[$402 >> 2] = $20; //@line 15532
   $403 = $ReallocAsyncCtx3 + 44 | 0; //@line 15533
   HEAP32[$403 >> 2] = $22; //@line 15534
   $404 = $ReallocAsyncCtx3 + 48 | 0; //@line 15535
   HEAP32[$404 >> 2] = $24; //@line 15536
   $405 = $ReallocAsyncCtx3 + 52 | 0; //@line 15537
   HEAP32[$405 >> 2] = $26; //@line 15538
   $406 = $ReallocAsyncCtx3 + 56 | 0; //@line 15539
   HEAP32[$406 >> 2] = $28; //@line 15540
   $407 = $ReallocAsyncCtx3 + 60 | 0; //@line 15541
   HEAP32[$407 >> 2] = $30; //@line 15542
   $408 = $ReallocAsyncCtx3 + 64 | 0; //@line 15543
   HEAP32[$408 >> 2] = $32; //@line 15544
   $409 = $ReallocAsyncCtx3 + 68 | 0; //@line 15545
   HEAP32[$409 >> 2] = $34; //@line 15546
   $410 = $ReallocAsyncCtx3 + 72 | 0; //@line 15547
   HEAP32[$410 >> 2] = $36; //@line 15548
   $411 = $ReallocAsyncCtx3 + 76 | 0; //@line 15549
   HEAP32[$411 >> 2] = $38; //@line 15550
   $412 = $ReallocAsyncCtx3 + 80 | 0; //@line 15551
   HEAP32[$412 >> 2] = $40; //@line 15552
   $413 = $ReallocAsyncCtx3 + 84 | 0; //@line 15553
   HEAP32[$413 >> 2] = $42; //@line 15554
   $414 = $ReallocAsyncCtx3 + 88 | 0; //@line 15555
   HEAP32[$414 >> 2] = $44; //@line 15556
   $415 = $ReallocAsyncCtx3 + 92 | 0; //@line 15557
   HEAP32[$415 >> 2] = $46; //@line 15558
   $416 = $ReallocAsyncCtx3 + 96 | 0; //@line 15559
   HEAP32[$416 >> 2] = $48; //@line 15560
   $417 = $ReallocAsyncCtx3 + 100 | 0; //@line 15561
   HEAP32[$417 >> 2] = $50; //@line 15562
   $418 = $ReallocAsyncCtx3 + 104 | 0; //@line 15563
   HEAP32[$418 >> 2] = $52; //@line 15564
   $419 = $ReallocAsyncCtx3 + 108 | 0; //@line 15565
   HEAP32[$419 >> 2] = $54; //@line 15566
   $420 = $ReallocAsyncCtx3 + 112 | 0; //@line 15567
   HEAP32[$420 >> 2] = $56; //@line 15568
   $421 = $ReallocAsyncCtx3 + 116 | 0; //@line 15569
   HEAP32[$421 >> 2] = $58; //@line 15570
   $422 = $ReallocAsyncCtx3 + 120 | 0; //@line 15571
   HEAP8[$422 >> 0] = $385; //@line 15572
   $423 = $ReallocAsyncCtx3 + 124 | 0; //@line 15573
   HEAP32[$423 >> 2] = $62; //@line 15574
   $424 = $ReallocAsyncCtx3 + 128 | 0; //@line 15575
   HEAP32[$424 >> 2] = $60; //@line 15576
   $425 = $ReallocAsyncCtx3 + 132 | 0; //@line 15577
   HEAP32[$425 >> 2] = $64; //@line 15578
   $426 = $ReallocAsyncCtx3 + 136 | 0; //@line 15579
   HEAP32[$426 >> 2] = $70; //@line 15580
   $427 = $ReallocAsyncCtx3 + 140 | 0; //@line 15581
   HEAP32[$427 >> 2] = $68; //@line 15582
   $428 = $ReallocAsyncCtx3 + 144 | 0; //@line 15583
   HEAP32[$428 >> 2] = $72; //@line 15584
   $429 = $ReallocAsyncCtx3 + 148 | 0; //@line 15585
   HEAP32[$429 >> 2] = $74; //@line 15586
   $430 = $ReallocAsyncCtx3 + 152 | 0; //@line 15587
   HEAP32[$430 >> 2] = $76; //@line 15588
   $431 = $ReallocAsyncCtx3 + 156 | 0; //@line 15589
   HEAP32[$431 >> 2] = $78; //@line 15590
   $432 = $ReallocAsyncCtx3 + 160 | 0; //@line 15591
   HEAP32[$432 >> 2] = $80; //@line 15592
   $433 = $ReallocAsyncCtx3 + 164 | 0; //@line 15593
   HEAP32[$433 >> 2] = $82; //@line 15594
   $434 = $ReallocAsyncCtx3 + 168 | 0; //@line 15595
   HEAP32[$434 >> 2] = $84; //@line 15596
   $435 = $ReallocAsyncCtx3 + 172 | 0; //@line 15597
   HEAP32[$435 >> 2] = $86; //@line 15598
   $436 = $ReallocAsyncCtx3 + 176 | 0; //@line 15599
   HEAP32[$436 >> 2] = $88; //@line 15600
   $437 = $ReallocAsyncCtx3 + 180 | 0; //@line 15601
   HEAP32[$437 >> 2] = $90; //@line 15602
   $438 = $ReallocAsyncCtx3 + 184 | 0; //@line 15603
   HEAP32[$438 >> 2] = $92; //@line 15604
   $439 = $ReallocAsyncCtx3 + 188 | 0; //@line 15605
   HEAP32[$439 >> 2] = $94; //@line 15606
   $440 = $ReallocAsyncCtx3 + 192 | 0; //@line 15607
   HEAP32[$440 >> 2] = $96; //@line 15608
   $441 = $ReallocAsyncCtx3 + 196 | 0; //@line 15609
   HEAP32[$441 >> 2] = $98; //@line 15610
   $442 = $ReallocAsyncCtx3 + 200 | 0; //@line 15611
   HEAP32[$442 >> 2] = $100; //@line 15612
   $443 = $ReallocAsyncCtx3 + 204 | 0; //@line 15613
   HEAP32[$443 >> 2] = $102; //@line 15614
   $444 = $ReallocAsyncCtx3 + 208 | 0; //@line 15615
   HEAP32[$444 >> 2] = $104; //@line 15616
   $445 = $ReallocAsyncCtx3 + 212 | 0; //@line 15617
   HEAP32[$445 >> 2] = $106; //@line 15618
   $446 = $ReallocAsyncCtx3 + 216 | 0; //@line 15619
   HEAP32[$446 >> 2] = $108; //@line 15620
   $447 = $ReallocAsyncCtx3 + 220 | 0; //@line 15621
   HEAP32[$447 >> 2] = $110; //@line 15622
   $448 = $ReallocAsyncCtx3 + 224 | 0; //@line 15623
   HEAP32[$448 >> 2] = $112; //@line 15624
   $449 = $ReallocAsyncCtx3 + 228 | 0; //@line 15625
   HEAP8[$449 >> 0] = $114; //@line 15626
   $450 = $ReallocAsyncCtx3 + 232 | 0; //@line 15627
   HEAP32[$450 >> 2] = $116; //@line 15628
   $451 = $ReallocAsyncCtx3 + 236 | 0; //@line 15629
   HEAP32[$451 >> 2] = $118; //@line 15630
   $452 = $ReallocAsyncCtx3 + 240 | 0; //@line 15631
   HEAP32[$452 >> 2] = $120; //@line 15632
   $453 = $ReallocAsyncCtx3 + 244 | 0; //@line 15633
   HEAP32[$453 >> 2] = $122; //@line 15634
   $454 = $ReallocAsyncCtx3 + 248 | 0; //@line 15635
   HEAP32[$454 >> 2] = $124; //@line 15636
   $455 = $ReallocAsyncCtx3 + 252 | 0; //@line 15637
   HEAP32[$455 >> 2] = $126; //@line 15638
   $456 = $ReallocAsyncCtx3 + 256 | 0; //@line 15639
   HEAP8[$456 >> 0] = $128; //@line 15640
   $457 = $ReallocAsyncCtx3 + 257 | 0; //@line 15641
   HEAP8[$457 >> 0] = $130; //@line 15642
   $458 = $ReallocAsyncCtx3 + 260 | 0; //@line 15643
   HEAP32[$458 >> 2] = $132; //@line 15644
   $459 = $ReallocAsyncCtx3 + 264 | 0; //@line 15645
   HEAP32[$459 >> 2] = $134; //@line 15646
   sp = STACKTOP; //@line 15647
   return;
  }
  HEAP8[___async_retval >> 0] = $392; //@line 15651
  ___async_unwind = 0; //@line 15652
  HEAP32[$ReallocAsyncCtx3 >> 2] = 578; //@line 15653
  $393 = $ReallocAsyncCtx3 + 4 | 0; //@line 15654
  HEAP32[$393 >> 2] = $2; //@line 15655
  $394 = $ReallocAsyncCtx3 + 8 | 0; //@line 15656
  HEAP32[$394 >> 2] = $4; //@line 15657
  $395 = $ReallocAsyncCtx3 + 12 | 0; //@line 15658
  HEAP32[$395 >> 2] = $6; //@line 15659
  $396 = $ReallocAsyncCtx3 + 16 | 0; //@line 15660
  HEAP32[$396 >> 2] = $8; //@line 15661
  $397 = $ReallocAsyncCtx3 + 20 | 0; //@line 15662
  HEAP32[$397 >> 2] = $10; //@line 15663
  $398 = $ReallocAsyncCtx3 + 24 | 0; //@line 15664
  HEAP32[$398 >> 2] = $12; //@line 15665
  $399 = $ReallocAsyncCtx3 + 28 | 0; //@line 15666
  HEAP32[$399 >> 2] = $14; //@line 15667
  $400 = $ReallocAsyncCtx3 + 32 | 0; //@line 15668
  HEAP32[$400 >> 2] = $16; //@line 15669
  $401 = $ReallocAsyncCtx3 + 36 | 0; //@line 15670
  HEAP32[$401 >> 2] = $18; //@line 15671
  $402 = $ReallocAsyncCtx3 + 40 | 0; //@line 15672
  HEAP32[$402 >> 2] = $20; //@line 15673
  $403 = $ReallocAsyncCtx3 + 44 | 0; //@line 15674
  HEAP32[$403 >> 2] = $22; //@line 15675
  $404 = $ReallocAsyncCtx3 + 48 | 0; //@line 15676
  HEAP32[$404 >> 2] = $24; //@line 15677
  $405 = $ReallocAsyncCtx3 + 52 | 0; //@line 15678
  HEAP32[$405 >> 2] = $26; //@line 15679
  $406 = $ReallocAsyncCtx3 + 56 | 0; //@line 15680
  HEAP32[$406 >> 2] = $28; //@line 15681
  $407 = $ReallocAsyncCtx3 + 60 | 0; //@line 15682
  HEAP32[$407 >> 2] = $30; //@line 15683
  $408 = $ReallocAsyncCtx3 + 64 | 0; //@line 15684
  HEAP32[$408 >> 2] = $32; //@line 15685
  $409 = $ReallocAsyncCtx3 + 68 | 0; //@line 15686
  HEAP32[$409 >> 2] = $34; //@line 15687
  $410 = $ReallocAsyncCtx3 + 72 | 0; //@line 15688
  HEAP32[$410 >> 2] = $36; //@line 15689
  $411 = $ReallocAsyncCtx3 + 76 | 0; //@line 15690
  HEAP32[$411 >> 2] = $38; //@line 15691
  $412 = $ReallocAsyncCtx3 + 80 | 0; //@line 15692
  HEAP32[$412 >> 2] = $40; //@line 15693
  $413 = $ReallocAsyncCtx3 + 84 | 0; //@line 15694
  HEAP32[$413 >> 2] = $42; //@line 15695
  $414 = $ReallocAsyncCtx3 + 88 | 0; //@line 15696
  HEAP32[$414 >> 2] = $44; //@line 15697
  $415 = $ReallocAsyncCtx3 + 92 | 0; //@line 15698
  HEAP32[$415 >> 2] = $46; //@line 15699
  $416 = $ReallocAsyncCtx3 + 96 | 0; //@line 15700
  HEAP32[$416 >> 2] = $48; //@line 15701
  $417 = $ReallocAsyncCtx3 + 100 | 0; //@line 15702
  HEAP32[$417 >> 2] = $50; //@line 15703
  $418 = $ReallocAsyncCtx3 + 104 | 0; //@line 15704
  HEAP32[$418 >> 2] = $52; //@line 15705
  $419 = $ReallocAsyncCtx3 + 108 | 0; //@line 15706
  HEAP32[$419 >> 2] = $54; //@line 15707
  $420 = $ReallocAsyncCtx3 + 112 | 0; //@line 15708
  HEAP32[$420 >> 2] = $56; //@line 15709
  $421 = $ReallocAsyncCtx3 + 116 | 0; //@line 15710
  HEAP32[$421 >> 2] = $58; //@line 15711
  $422 = $ReallocAsyncCtx3 + 120 | 0; //@line 15712
  HEAP8[$422 >> 0] = $385; //@line 15713
  $423 = $ReallocAsyncCtx3 + 124 | 0; //@line 15714
  HEAP32[$423 >> 2] = $62; //@line 15715
  $424 = $ReallocAsyncCtx3 + 128 | 0; //@line 15716
  HEAP32[$424 >> 2] = $60; //@line 15717
  $425 = $ReallocAsyncCtx3 + 132 | 0; //@line 15718
  HEAP32[$425 >> 2] = $64; //@line 15719
  $426 = $ReallocAsyncCtx3 + 136 | 0; //@line 15720
  HEAP32[$426 >> 2] = $70; //@line 15721
  $427 = $ReallocAsyncCtx3 + 140 | 0; //@line 15722
  HEAP32[$427 >> 2] = $68; //@line 15723
  $428 = $ReallocAsyncCtx3 + 144 | 0; //@line 15724
  HEAP32[$428 >> 2] = $72; //@line 15725
  $429 = $ReallocAsyncCtx3 + 148 | 0; //@line 15726
  HEAP32[$429 >> 2] = $74; //@line 15727
  $430 = $ReallocAsyncCtx3 + 152 | 0; //@line 15728
  HEAP32[$430 >> 2] = $76; //@line 15729
  $431 = $ReallocAsyncCtx3 + 156 | 0; //@line 15730
  HEAP32[$431 >> 2] = $78; //@line 15731
  $432 = $ReallocAsyncCtx3 + 160 | 0; //@line 15732
  HEAP32[$432 >> 2] = $80; //@line 15733
  $433 = $ReallocAsyncCtx3 + 164 | 0; //@line 15734
  HEAP32[$433 >> 2] = $82; //@line 15735
  $434 = $ReallocAsyncCtx3 + 168 | 0; //@line 15736
  HEAP32[$434 >> 2] = $84; //@line 15737
  $435 = $ReallocAsyncCtx3 + 172 | 0; //@line 15738
  HEAP32[$435 >> 2] = $86; //@line 15739
  $436 = $ReallocAsyncCtx3 + 176 | 0; //@line 15740
  HEAP32[$436 >> 2] = $88; //@line 15741
  $437 = $ReallocAsyncCtx3 + 180 | 0; //@line 15742
  HEAP32[$437 >> 2] = $90; //@line 15743
  $438 = $ReallocAsyncCtx3 + 184 | 0; //@line 15744
  HEAP32[$438 >> 2] = $92; //@line 15745
  $439 = $ReallocAsyncCtx3 + 188 | 0; //@line 15746
  HEAP32[$439 >> 2] = $94; //@line 15747
  $440 = $ReallocAsyncCtx3 + 192 | 0; //@line 15748
  HEAP32[$440 >> 2] = $96; //@line 15749
  $441 = $ReallocAsyncCtx3 + 196 | 0; //@line 15750
  HEAP32[$441 >> 2] = $98; //@line 15751
  $442 = $ReallocAsyncCtx3 + 200 | 0; //@line 15752
  HEAP32[$442 >> 2] = $100; //@line 15753
  $443 = $ReallocAsyncCtx3 + 204 | 0; //@line 15754
  HEAP32[$443 >> 2] = $102; //@line 15755
  $444 = $ReallocAsyncCtx3 + 208 | 0; //@line 15756
  HEAP32[$444 >> 2] = $104; //@line 15757
  $445 = $ReallocAsyncCtx3 + 212 | 0; //@line 15758
  HEAP32[$445 >> 2] = $106; //@line 15759
  $446 = $ReallocAsyncCtx3 + 216 | 0; //@line 15760
  HEAP32[$446 >> 2] = $108; //@line 15761
  $447 = $ReallocAsyncCtx3 + 220 | 0; //@line 15762
  HEAP32[$447 >> 2] = $110; //@line 15763
  $448 = $ReallocAsyncCtx3 + 224 | 0; //@line 15764
  HEAP32[$448 >> 2] = $112; //@line 15765
  $449 = $ReallocAsyncCtx3 + 228 | 0; //@line 15766
  HEAP8[$449 >> 0] = $114; //@line 15767
  $450 = $ReallocAsyncCtx3 + 232 | 0; //@line 15768
  HEAP32[$450 >> 2] = $116; //@line 15769
  $451 = $ReallocAsyncCtx3 + 236 | 0; //@line 15770
  HEAP32[$451 >> 2] = $118; //@line 15771
  $452 = $ReallocAsyncCtx3 + 240 | 0; //@line 15772
  HEAP32[$452 >> 2] = $120; //@line 15773
  $453 = $ReallocAsyncCtx3 + 244 | 0; //@line 15774
  HEAP32[$453 >> 2] = $122; //@line 15775
  $454 = $ReallocAsyncCtx3 + 248 | 0; //@line 15776
  HEAP32[$454 >> 2] = $124; //@line 15777
  $455 = $ReallocAsyncCtx3 + 252 | 0; //@line 15778
  HEAP32[$455 >> 2] = $126; //@line 15779
  $456 = $ReallocAsyncCtx3 + 256 | 0; //@line 15780
  HEAP8[$456 >> 0] = $128; //@line 15781
  $457 = $ReallocAsyncCtx3 + 257 | 0; //@line 15782
  HEAP8[$457 >> 0] = $130; //@line 15783
  $458 = $ReallocAsyncCtx3 + 260 | 0; //@line 15784
  HEAP32[$458 >> 2] = $132; //@line 15785
  $459 = $ReallocAsyncCtx3 + 264 | 0; //@line 15786
  HEAP32[$459 >> 2] = $134; //@line 15787
  sp = STACKTOP; //@line 15788
  return;
 } else if ((label | 0) == 19) {
  $478 = $$0$be + 2 << 24 >> 24; //@line 15792
  $481 = HEAP8[$126 + ($137 & 255) >> 0] | 0; //@line 15795
  HEAP8[$54 >> 0] = 0; //@line 15796
  $482 = $481 & 255; //@line 15797
  HEAP8[$72 >> 0] = $482 >>> 5 & 1; //@line 15801
  if ($482 & 16 | 0) {
   HEAP8[$54 >> 0] = 1; //@line 15805
  }
  HEAP8[$80 >> 0] = $482 & 15; //@line 15809
  $491 = HEAP32[(HEAP32[$84 >> 2] | 0) + 44 >> 2] | 0; //@line 15812
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(272) | 0; //@line 15813
  $492 = FUNCTION_TABLE_iii[$491 & 31]($122, $56) | 0; //@line 15814
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 579; //@line 15817
   $493 = $ReallocAsyncCtx4 + 4 | 0; //@line 15818
   HEAP32[$493 >> 2] = $2; //@line 15819
   $494 = $ReallocAsyncCtx4 + 8 | 0; //@line 15820
   HEAP32[$494 >> 2] = $4; //@line 15821
   $495 = $ReallocAsyncCtx4 + 12 | 0; //@line 15822
   HEAP32[$495 >> 2] = $6; //@line 15823
   $496 = $ReallocAsyncCtx4 + 16 | 0; //@line 15824
   HEAP32[$496 >> 2] = $8; //@line 15825
   $497 = $ReallocAsyncCtx4 + 20 | 0; //@line 15826
   HEAP32[$497 >> 2] = $10; //@line 15827
   $498 = $ReallocAsyncCtx4 + 24 | 0; //@line 15828
   HEAP32[$498 >> 2] = $$096$be; //@line 15829
   $499 = $ReallocAsyncCtx4 + 28 | 0; //@line 15830
   HEAP32[$499 >> 2] = $14; //@line 15831
   $500 = $ReallocAsyncCtx4 + 32 | 0; //@line 15832
   HEAP32[$500 >> 2] = $12; //@line 15833
   $501 = $ReallocAsyncCtx4 + 36 | 0; //@line 15834
   HEAP32[$501 >> 2] = $16; //@line 15835
   $502 = $ReallocAsyncCtx4 + 40 | 0; //@line 15836
   HEAP32[$502 >> 2] = $18; //@line 15837
   $503 = $ReallocAsyncCtx4 + 44 | 0; //@line 15838
   HEAP32[$503 >> 2] = $20; //@line 15839
   $504 = $ReallocAsyncCtx4 + 48 | 0; //@line 15840
   HEAP32[$504 >> 2] = $22; //@line 15841
   $505 = $ReallocAsyncCtx4 + 52 | 0; //@line 15842
   HEAP32[$505 >> 2] = $24; //@line 15843
   $506 = $ReallocAsyncCtx4 + 56 | 0; //@line 15844
   HEAP32[$506 >> 2] = $26; //@line 15845
   $507 = $ReallocAsyncCtx4 + 60 | 0; //@line 15846
   HEAP32[$507 >> 2] = $28; //@line 15847
   $508 = $ReallocAsyncCtx4 + 64 | 0; //@line 15848
   HEAP8[$508 >> 0] = $478; //@line 15849
   $509 = $ReallocAsyncCtx4 + 68 | 0; //@line 15850
   HEAP32[$509 >> 2] = $30; //@line 15851
   $510 = $ReallocAsyncCtx4 + 72 | 0; //@line 15852
   HEAP32[$510 >> 2] = $32; //@line 15853
   $511 = $ReallocAsyncCtx4 + 76 | 0; //@line 15854
   HEAP32[$511 >> 2] = $34; //@line 15855
   $512 = $ReallocAsyncCtx4 + 80 | 0; //@line 15856
   HEAP32[$512 >> 2] = $36; //@line 15857
   $513 = $ReallocAsyncCtx4 + 84 | 0; //@line 15858
   HEAP32[$513 >> 2] = $38; //@line 15859
   $514 = $ReallocAsyncCtx4 + 88 | 0; //@line 15860
   HEAP32[$514 >> 2] = $40; //@line 15861
   $515 = $ReallocAsyncCtx4 + 92 | 0; //@line 15862
   HEAP32[$515 >> 2] = $42; //@line 15863
   $516 = $ReallocAsyncCtx4 + 96 | 0; //@line 15864
   HEAP32[$516 >> 2] = $44; //@line 15865
   $517 = $ReallocAsyncCtx4 + 100 | 0; //@line 15866
   HEAP32[$517 >> 2] = $46; //@line 15867
   $518 = $ReallocAsyncCtx4 + 104 | 0; //@line 15868
   HEAP32[$518 >> 2] = $48; //@line 15869
   $519 = $ReallocAsyncCtx4 + 108 | 0; //@line 15870
   HEAP32[$519 >> 2] = $50; //@line 15871
   $520 = $ReallocAsyncCtx4 + 112 | 0; //@line 15872
   HEAP32[$520 >> 2] = $52; //@line 15873
   $521 = $ReallocAsyncCtx4 + 116 | 0; //@line 15874
   HEAP32[$521 >> 2] = $54; //@line 15875
   $522 = $ReallocAsyncCtx4 + 120 | 0; //@line 15876
   HEAP32[$522 >> 2] = $56; //@line 15877
   $523 = $ReallocAsyncCtx4 + 124 | 0; //@line 15878
   HEAP32[$523 >> 2] = $58; //@line 15879
   $524 = $ReallocAsyncCtx4 + 128 | 0; //@line 15880
   HEAP32[$524 >> 2] = $60; //@line 15881
   $525 = $ReallocAsyncCtx4 + 132 | 0; //@line 15882
   HEAP32[$525 >> 2] = $62; //@line 15883
   $526 = $ReallocAsyncCtx4 + 136 | 0; //@line 15884
   HEAP32[$526 >> 2] = $64; //@line 15885
   $527 = $ReallocAsyncCtx4 + 140 | 0; //@line 15886
   HEAP32[$527 >> 2] = $68; //@line 15887
   $528 = $ReallocAsyncCtx4 + 144 | 0; //@line 15888
   HEAP32[$528 >> 2] = $70; //@line 15889
   $529 = $ReallocAsyncCtx4 + 148 | 0; //@line 15890
   HEAP32[$529 >> 2] = $72; //@line 15891
   $530 = $ReallocAsyncCtx4 + 152 | 0; //@line 15892
   HEAP32[$530 >> 2] = $74; //@line 15893
   $531 = $ReallocAsyncCtx4 + 156 | 0; //@line 15894
   HEAP32[$531 >> 2] = $76; //@line 15895
   $532 = $ReallocAsyncCtx4 + 160 | 0; //@line 15896
   HEAP32[$532 >> 2] = $78; //@line 15897
   $533 = $ReallocAsyncCtx4 + 164 | 0; //@line 15898
   HEAP32[$533 >> 2] = $80; //@line 15899
   $534 = $ReallocAsyncCtx4 + 168 | 0; //@line 15900
   HEAP32[$534 >> 2] = $82; //@line 15901
   $535 = $ReallocAsyncCtx4 + 172 | 0; //@line 15902
   HEAP32[$535 >> 2] = $84; //@line 15903
   $536 = $ReallocAsyncCtx4 + 176 | 0; //@line 15904
   HEAP32[$536 >> 2] = $86; //@line 15905
   $537 = $ReallocAsyncCtx4 + 180 | 0; //@line 15906
   HEAP32[$537 >> 2] = $88; //@line 15907
   $538 = $ReallocAsyncCtx4 + 184 | 0; //@line 15908
   HEAP32[$538 >> 2] = $90; //@line 15909
   $539 = $ReallocAsyncCtx4 + 188 | 0; //@line 15910
   HEAP32[$539 >> 2] = $92; //@line 15911
   $540 = $ReallocAsyncCtx4 + 192 | 0; //@line 15912
   HEAP32[$540 >> 2] = $94; //@line 15913
   $541 = $ReallocAsyncCtx4 + 196 | 0; //@line 15914
   HEAP32[$541 >> 2] = $96; //@line 15915
   $542 = $ReallocAsyncCtx4 + 200 | 0; //@line 15916
   HEAP32[$542 >> 2] = $98; //@line 15917
   $543 = $ReallocAsyncCtx4 + 204 | 0; //@line 15918
   HEAP32[$543 >> 2] = $100; //@line 15919
   $544 = $ReallocAsyncCtx4 + 208 | 0; //@line 15920
   HEAP32[$544 >> 2] = $102; //@line 15921
   $545 = $ReallocAsyncCtx4 + 212 | 0; //@line 15922
   HEAP32[$545 >> 2] = $104; //@line 15923
   $546 = $ReallocAsyncCtx4 + 216 | 0; //@line 15924
   HEAP32[$546 >> 2] = $106; //@line 15925
   $547 = $ReallocAsyncCtx4 + 220 | 0; //@line 15926
   HEAP32[$547 >> 2] = $108; //@line 15927
   $548 = $ReallocAsyncCtx4 + 224 | 0; //@line 15928
   HEAP32[$548 >> 2] = $110; //@line 15929
   $549 = $ReallocAsyncCtx4 + 228 | 0; //@line 15930
   HEAP32[$549 >> 2] = $112; //@line 15931
   $550 = $ReallocAsyncCtx4 + 232 | 0; //@line 15932
   HEAP8[$550 >> 0] = $114; //@line 15933
   $551 = $ReallocAsyncCtx4 + 236 | 0; //@line 15934
   HEAP32[$551 >> 2] = $116; //@line 15935
   $552 = $ReallocAsyncCtx4 + 240 | 0; //@line 15936
   HEAP32[$552 >> 2] = $118; //@line 15937
   $553 = $ReallocAsyncCtx4 + 244 | 0; //@line 15938
   HEAP32[$553 >> 2] = $120; //@line 15939
   $554 = $ReallocAsyncCtx4 + 248 | 0; //@line 15940
   HEAP32[$554 >> 2] = $122; //@line 15941
   $555 = $ReallocAsyncCtx4 + 252 | 0; //@line 15942
   HEAP32[$555 >> 2] = $124; //@line 15943
   $556 = $ReallocAsyncCtx4 + 256 | 0; //@line 15944
   HEAP32[$556 >> 2] = $126; //@line 15945
   $557 = $ReallocAsyncCtx4 + 260 | 0; //@line 15946
   HEAP8[$557 >> 0] = $128; //@line 15947
   $558 = $ReallocAsyncCtx4 + 261 | 0; //@line 15948
   HEAP8[$558 >> 0] = $130; //@line 15949
   $559 = $ReallocAsyncCtx4 + 264 | 0; //@line 15950
   HEAP32[$559 >> 2] = $132; //@line 15951
   $560 = $ReallocAsyncCtx4 + 268 | 0; //@line 15952
   HEAP32[$560 >> 2] = $134; //@line 15953
   sp = STACKTOP; //@line 15954
   return;
  }
  HEAP8[___async_retval >> 0] = $492 & 1; //@line 15959
  ___async_unwind = 0; //@line 15960
  HEAP32[$ReallocAsyncCtx4 >> 2] = 579; //@line 15961
  $493 = $ReallocAsyncCtx4 + 4 | 0; //@line 15962
  HEAP32[$493 >> 2] = $2; //@line 15963
  $494 = $ReallocAsyncCtx4 + 8 | 0; //@line 15964
  HEAP32[$494 >> 2] = $4; //@line 15965
  $495 = $ReallocAsyncCtx4 + 12 | 0; //@line 15966
  HEAP32[$495 >> 2] = $6; //@line 15967
  $496 = $ReallocAsyncCtx4 + 16 | 0; //@line 15968
  HEAP32[$496 >> 2] = $8; //@line 15969
  $497 = $ReallocAsyncCtx4 + 20 | 0; //@line 15970
  HEAP32[$497 >> 2] = $10; //@line 15971
  $498 = $ReallocAsyncCtx4 + 24 | 0; //@line 15972
  HEAP32[$498 >> 2] = $$096$be; //@line 15973
  $499 = $ReallocAsyncCtx4 + 28 | 0; //@line 15974
  HEAP32[$499 >> 2] = $14; //@line 15975
  $500 = $ReallocAsyncCtx4 + 32 | 0; //@line 15976
  HEAP32[$500 >> 2] = $12; //@line 15977
  $501 = $ReallocAsyncCtx4 + 36 | 0; //@line 15978
  HEAP32[$501 >> 2] = $16; //@line 15979
  $502 = $ReallocAsyncCtx4 + 40 | 0; //@line 15980
  HEAP32[$502 >> 2] = $18; //@line 15981
  $503 = $ReallocAsyncCtx4 + 44 | 0; //@line 15982
  HEAP32[$503 >> 2] = $20; //@line 15983
  $504 = $ReallocAsyncCtx4 + 48 | 0; //@line 15984
  HEAP32[$504 >> 2] = $22; //@line 15985
  $505 = $ReallocAsyncCtx4 + 52 | 0; //@line 15986
  HEAP32[$505 >> 2] = $24; //@line 15987
  $506 = $ReallocAsyncCtx4 + 56 | 0; //@line 15988
  HEAP32[$506 >> 2] = $26; //@line 15989
  $507 = $ReallocAsyncCtx4 + 60 | 0; //@line 15990
  HEAP32[$507 >> 2] = $28; //@line 15991
  $508 = $ReallocAsyncCtx4 + 64 | 0; //@line 15992
  HEAP8[$508 >> 0] = $478; //@line 15993
  $509 = $ReallocAsyncCtx4 + 68 | 0; //@line 15994
  HEAP32[$509 >> 2] = $30; //@line 15995
  $510 = $ReallocAsyncCtx4 + 72 | 0; //@line 15996
  HEAP32[$510 >> 2] = $32; //@line 15997
  $511 = $ReallocAsyncCtx4 + 76 | 0; //@line 15998
  HEAP32[$511 >> 2] = $34; //@line 15999
  $512 = $ReallocAsyncCtx4 + 80 | 0; //@line 16000
  HEAP32[$512 >> 2] = $36; //@line 16001
  $513 = $ReallocAsyncCtx4 + 84 | 0; //@line 16002
  HEAP32[$513 >> 2] = $38; //@line 16003
  $514 = $ReallocAsyncCtx4 + 88 | 0; //@line 16004
  HEAP32[$514 >> 2] = $40; //@line 16005
  $515 = $ReallocAsyncCtx4 + 92 | 0; //@line 16006
  HEAP32[$515 >> 2] = $42; //@line 16007
  $516 = $ReallocAsyncCtx4 + 96 | 0; //@line 16008
  HEAP32[$516 >> 2] = $44; //@line 16009
  $517 = $ReallocAsyncCtx4 + 100 | 0; //@line 16010
  HEAP32[$517 >> 2] = $46; //@line 16011
  $518 = $ReallocAsyncCtx4 + 104 | 0; //@line 16012
  HEAP32[$518 >> 2] = $48; //@line 16013
  $519 = $ReallocAsyncCtx4 + 108 | 0; //@line 16014
  HEAP32[$519 >> 2] = $50; //@line 16015
  $520 = $ReallocAsyncCtx4 + 112 | 0; //@line 16016
  HEAP32[$520 >> 2] = $52; //@line 16017
  $521 = $ReallocAsyncCtx4 + 116 | 0; //@line 16018
  HEAP32[$521 >> 2] = $54; //@line 16019
  $522 = $ReallocAsyncCtx4 + 120 | 0; //@line 16020
  HEAP32[$522 >> 2] = $56; //@line 16021
  $523 = $ReallocAsyncCtx4 + 124 | 0; //@line 16022
  HEAP32[$523 >> 2] = $58; //@line 16023
  $524 = $ReallocAsyncCtx4 + 128 | 0; //@line 16024
  HEAP32[$524 >> 2] = $60; //@line 16025
  $525 = $ReallocAsyncCtx4 + 132 | 0; //@line 16026
  HEAP32[$525 >> 2] = $62; //@line 16027
  $526 = $ReallocAsyncCtx4 + 136 | 0; //@line 16028
  HEAP32[$526 >> 2] = $64; //@line 16029
  $527 = $ReallocAsyncCtx4 + 140 | 0; //@line 16030
  HEAP32[$527 >> 2] = $68; //@line 16031
  $528 = $ReallocAsyncCtx4 + 144 | 0; //@line 16032
  HEAP32[$528 >> 2] = $70; //@line 16033
  $529 = $ReallocAsyncCtx4 + 148 | 0; //@line 16034
  HEAP32[$529 >> 2] = $72; //@line 16035
  $530 = $ReallocAsyncCtx4 + 152 | 0; //@line 16036
  HEAP32[$530 >> 2] = $74; //@line 16037
  $531 = $ReallocAsyncCtx4 + 156 | 0; //@line 16038
  HEAP32[$531 >> 2] = $76; //@line 16039
  $532 = $ReallocAsyncCtx4 + 160 | 0; //@line 16040
  HEAP32[$532 >> 2] = $78; //@line 16041
  $533 = $ReallocAsyncCtx4 + 164 | 0; //@line 16042
  HEAP32[$533 >> 2] = $80; //@line 16043
  $534 = $ReallocAsyncCtx4 + 168 | 0; //@line 16044
  HEAP32[$534 >> 2] = $82; //@line 16045
  $535 = $ReallocAsyncCtx4 + 172 | 0; //@line 16046
  HEAP32[$535 >> 2] = $84; //@line 16047
  $536 = $ReallocAsyncCtx4 + 176 | 0; //@line 16048
  HEAP32[$536 >> 2] = $86; //@line 16049
  $537 = $ReallocAsyncCtx4 + 180 | 0; //@line 16050
  HEAP32[$537 >> 2] = $88; //@line 16051
  $538 = $ReallocAsyncCtx4 + 184 | 0; //@line 16052
  HEAP32[$538 >> 2] = $90; //@line 16053
  $539 = $ReallocAsyncCtx4 + 188 | 0; //@line 16054
  HEAP32[$539 >> 2] = $92; //@line 16055
  $540 = $ReallocAsyncCtx4 + 192 | 0; //@line 16056
  HEAP32[$540 >> 2] = $94; //@line 16057
  $541 = $ReallocAsyncCtx4 + 196 | 0; //@line 16058
  HEAP32[$541 >> 2] = $96; //@line 16059
  $542 = $ReallocAsyncCtx4 + 200 | 0; //@line 16060
  HEAP32[$542 >> 2] = $98; //@line 16061
  $543 = $ReallocAsyncCtx4 + 204 | 0; //@line 16062
  HEAP32[$543 >> 2] = $100; //@line 16063
  $544 = $ReallocAsyncCtx4 + 208 | 0; //@line 16064
  HEAP32[$544 >> 2] = $102; //@line 16065
  $545 = $ReallocAsyncCtx4 + 212 | 0; //@line 16066
  HEAP32[$545 >> 2] = $104; //@line 16067
  $546 = $ReallocAsyncCtx4 + 216 | 0; //@line 16068
  HEAP32[$546 >> 2] = $106; //@line 16069
  $547 = $ReallocAsyncCtx4 + 220 | 0; //@line 16070
  HEAP32[$547 >> 2] = $108; //@line 16071
  $548 = $ReallocAsyncCtx4 + 224 | 0; //@line 16072
  HEAP32[$548 >> 2] = $110; //@line 16073
  $549 = $ReallocAsyncCtx4 + 228 | 0; //@line 16074
  HEAP32[$549 >> 2] = $112; //@line 16075
  $550 = $ReallocAsyncCtx4 + 232 | 0; //@line 16076
  HEAP8[$550 >> 0] = $114; //@line 16077
  $551 = $ReallocAsyncCtx4 + 236 | 0; //@line 16078
  HEAP32[$551 >> 2] = $116; //@line 16079
  $552 = $ReallocAsyncCtx4 + 240 | 0; //@line 16080
  HEAP32[$552 >> 2] = $118; //@line 16081
  $553 = $ReallocAsyncCtx4 + 244 | 0; //@line 16082
  HEAP32[$553 >> 2] = $120; //@line 16083
  $554 = $ReallocAsyncCtx4 + 248 | 0; //@line 16084
  HEAP32[$554 >> 2] = $122; //@line 16085
  $555 = $ReallocAsyncCtx4 + 252 | 0; //@line 16086
  HEAP32[$555 >> 2] = $124; //@line 16087
  $556 = $ReallocAsyncCtx4 + 256 | 0; //@line 16088
  HEAP32[$556 >> 2] = $126; //@line 16089
  $557 = $ReallocAsyncCtx4 + 260 | 0; //@line 16090
  HEAP8[$557 >> 0] = $128; //@line 16091
  $558 = $ReallocAsyncCtx4 + 261 | 0; //@line 16092
  HEAP8[$558 >> 0] = $130; //@line 16093
  $559 = $ReallocAsyncCtx4 + 264 | 0; //@line 16094
  HEAP32[$559 >> 2] = $132; //@line 16095
  $560 = $ReallocAsyncCtx4 + 268 | 0; //@line 16096
  HEAP32[$560 >> 2] = $134; //@line 16097
  sp = STACKTOP; //@line 16098
  return;
 } else if ((label | 0) == 24) {
  HEAP8[$110 >> 0] = HEAP8[$126 + ($137 & 255) >> 0] | 0; //@line 16106
  $578 = $$0$be + 5 << 24 >> 24; //@line 16119
  HEAP32[$120 >> 2] = (HEAPU8[$126 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$126 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$126 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 16127
  $588 = HEAP32[(HEAP32[$134 >> 2] | 0) + 48 >> 2] | 0; //@line 16130
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(268) | 0; //@line 16131
  $589 = FUNCTION_TABLE_iii[$588 & 31]($122, $58) | 0; //@line 16132
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 580; //@line 16135
   $590 = $ReallocAsyncCtx5 + 4 | 0; //@line 16136
   HEAP32[$590 >> 2] = $2; //@line 16137
   $591 = $ReallocAsyncCtx5 + 8 | 0; //@line 16138
   HEAP32[$591 >> 2] = $4; //@line 16139
   $592 = $ReallocAsyncCtx5 + 12 | 0; //@line 16140
   HEAP32[$592 >> 2] = $6; //@line 16141
   $593 = $ReallocAsyncCtx5 + 16 | 0; //@line 16142
   HEAP32[$593 >> 2] = $8; //@line 16143
   $594 = $ReallocAsyncCtx5 + 20 | 0; //@line 16144
   HEAP32[$594 >> 2] = $10; //@line 16145
   $595 = $ReallocAsyncCtx5 + 24 | 0; //@line 16146
   HEAP32[$595 >> 2] = $12; //@line 16147
   $596 = $ReallocAsyncCtx5 + 28 | 0; //@line 16148
   HEAP32[$596 >> 2] = $14; //@line 16149
   $597 = $ReallocAsyncCtx5 + 32 | 0; //@line 16150
   HEAP32[$597 >> 2] = $16; //@line 16151
   $598 = $ReallocAsyncCtx5 + 36 | 0; //@line 16152
   HEAP32[$598 >> 2] = $18; //@line 16153
   $599 = $ReallocAsyncCtx5 + 40 | 0; //@line 16154
   HEAP32[$599 >> 2] = $20; //@line 16155
   $600 = $ReallocAsyncCtx5 + 44 | 0; //@line 16156
   HEAP32[$600 >> 2] = $22; //@line 16157
   $601 = $ReallocAsyncCtx5 + 48 | 0; //@line 16158
   HEAP32[$601 >> 2] = $24; //@line 16159
   $602 = $ReallocAsyncCtx5 + 52 | 0; //@line 16160
   HEAP32[$602 >> 2] = $26; //@line 16161
   $603 = $ReallocAsyncCtx5 + 56 | 0; //@line 16162
   HEAP32[$603 >> 2] = $28; //@line 16163
   $604 = $ReallocAsyncCtx5 + 60 | 0; //@line 16164
   HEAP32[$604 >> 2] = $30; //@line 16165
   $605 = $ReallocAsyncCtx5 + 64 | 0; //@line 16166
   HEAP32[$605 >> 2] = $32; //@line 16167
   $606 = $ReallocAsyncCtx5 + 68 | 0; //@line 16168
   HEAP32[$606 >> 2] = $34; //@line 16169
   $607 = $ReallocAsyncCtx5 + 72 | 0; //@line 16170
   HEAP32[$607 >> 2] = $36; //@line 16171
   $608 = $ReallocAsyncCtx5 + 76 | 0; //@line 16172
   HEAP32[$608 >> 2] = $38; //@line 16173
   $609 = $ReallocAsyncCtx5 + 80 | 0; //@line 16174
   HEAP32[$609 >> 2] = $40; //@line 16175
   $610 = $ReallocAsyncCtx5 + 84 | 0; //@line 16176
   HEAP32[$610 >> 2] = $42; //@line 16177
   $611 = $ReallocAsyncCtx5 + 88 | 0; //@line 16178
   HEAP32[$611 >> 2] = $44; //@line 16179
   $612 = $ReallocAsyncCtx5 + 92 | 0; //@line 16180
   HEAP32[$612 >> 2] = $46; //@line 16181
   $613 = $ReallocAsyncCtx5 + 96 | 0; //@line 16182
   HEAP32[$613 >> 2] = $48; //@line 16183
   $614 = $ReallocAsyncCtx5 + 100 | 0; //@line 16184
   HEAP32[$614 >> 2] = $50; //@line 16185
   $615 = $ReallocAsyncCtx5 + 104 | 0; //@line 16186
   HEAP32[$615 >> 2] = $52; //@line 16187
   $616 = $ReallocAsyncCtx5 + 108 | 0; //@line 16188
   HEAP32[$616 >> 2] = $54; //@line 16189
   $617 = $ReallocAsyncCtx5 + 112 | 0; //@line 16190
   HEAP32[$617 >> 2] = $56; //@line 16191
   $618 = $ReallocAsyncCtx5 + 116 | 0; //@line 16192
   HEAP32[$618 >> 2] = $58; //@line 16193
   $619 = $ReallocAsyncCtx5 + 120 | 0; //@line 16194
   HEAP32[$619 >> 2] = $60; //@line 16195
   $620 = $ReallocAsyncCtx5 + 124 | 0; //@line 16196
   HEAP32[$620 >> 2] = $62; //@line 16197
   $621 = $ReallocAsyncCtx5 + 128 | 0; //@line 16198
   HEAP32[$621 >> 2] = $64; //@line 16199
   $622 = $ReallocAsyncCtx5 + 132 | 0; //@line 16200
   HEAP8[$622 >> 0] = $578; //@line 16201
   $623 = $ReallocAsyncCtx5 + 136 | 0; //@line 16202
   HEAP32[$623 >> 2] = $68; //@line 16203
   $624 = $ReallocAsyncCtx5 + 140 | 0; //@line 16204
   HEAP32[$624 >> 2] = $70; //@line 16205
   $625 = $ReallocAsyncCtx5 + 144 | 0; //@line 16206
   HEAP32[$625 >> 2] = $72; //@line 16207
   $626 = $ReallocAsyncCtx5 + 148 | 0; //@line 16208
   HEAP32[$626 >> 2] = $74; //@line 16209
   $627 = $ReallocAsyncCtx5 + 152 | 0; //@line 16210
   HEAP32[$627 >> 2] = $76; //@line 16211
   $628 = $ReallocAsyncCtx5 + 156 | 0; //@line 16212
   HEAP32[$628 >> 2] = $78; //@line 16213
   $629 = $ReallocAsyncCtx5 + 160 | 0; //@line 16214
   HEAP32[$629 >> 2] = $80; //@line 16215
   $630 = $ReallocAsyncCtx5 + 164 | 0; //@line 16216
   HEAP32[$630 >> 2] = $82; //@line 16217
   $631 = $ReallocAsyncCtx5 + 168 | 0; //@line 16218
   HEAP32[$631 >> 2] = $84; //@line 16219
   $632 = $ReallocAsyncCtx5 + 172 | 0; //@line 16220
   HEAP32[$632 >> 2] = $86; //@line 16221
   $633 = $ReallocAsyncCtx5 + 176 | 0; //@line 16222
   HEAP32[$633 >> 2] = $88; //@line 16223
   $634 = $ReallocAsyncCtx5 + 180 | 0; //@line 16224
   HEAP32[$634 >> 2] = $90; //@line 16225
   $635 = $ReallocAsyncCtx5 + 184 | 0; //@line 16226
   HEAP32[$635 >> 2] = $92; //@line 16227
   $636 = $ReallocAsyncCtx5 + 188 | 0; //@line 16228
   HEAP32[$636 >> 2] = $94; //@line 16229
   $637 = $ReallocAsyncCtx5 + 192 | 0; //@line 16230
   HEAP32[$637 >> 2] = $96; //@line 16231
   $638 = $ReallocAsyncCtx5 + 196 | 0; //@line 16232
   HEAP32[$638 >> 2] = $98; //@line 16233
   $639 = $ReallocAsyncCtx5 + 200 | 0; //@line 16234
   HEAP32[$639 >> 2] = $100; //@line 16235
   $640 = $ReallocAsyncCtx5 + 204 | 0; //@line 16236
   HEAP32[$640 >> 2] = $102; //@line 16237
   $641 = $ReallocAsyncCtx5 + 208 | 0; //@line 16238
   HEAP32[$641 >> 2] = $104; //@line 16239
   $642 = $ReallocAsyncCtx5 + 212 | 0; //@line 16240
   HEAP32[$642 >> 2] = $106; //@line 16241
   $643 = $ReallocAsyncCtx5 + 216 | 0; //@line 16242
   HEAP32[$643 >> 2] = $108; //@line 16243
   $644 = $ReallocAsyncCtx5 + 220 | 0; //@line 16244
   HEAP32[$644 >> 2] = $110; //@line 16245
   $645 = $ReallocAsyncCtx5 + 224 | 0; //@line 16246
   HEAP32[$645 >> 2] = $112; //@line 16247
   $646 = $ReallocAsyncCtx5 + 228 | 0; //@line 16248
   HEAP8[$646 >> 0] = $114; //@line 16249
   $647 = $ReallocAsyncCtx5 + 232 | 0; //@line 16250
   HEAP32[$647 >> 2] = $116; //@line 16251
   $648 = $ReallocAsyncCtx5 + 236 | 0; //@line 16252
   HEAP32[$648 >> 2] = $118; //@line 16253
   $649 = $ReallocAsyncCtx5 + 240 | 0; //@line 16254
   HEAP32[$649 >> 2] = $120; //@line 16255
   $650 = $ReallocAsyncCtx5 + 244 | 0; //@line 16256
   HEAP32[$650 >> 2] = $122; //@line 16257
   $651 = $ReallocAsyncCtx5 + 248 | 0; //@line 16258
   HEAP32[$651 >> 2] = $124; //@line 16259
   $652 = $ReallocAsyncCtx5 + 252 | 0; //@line 16260
   HEAP32[$652 >> 2] = $126; //@line 16261
   $653 = $ReallocAsyncCtx5 + 256 | 0; //@line 16262
   HEAP8[$653 >> 0] = $128; //@line 16263
   $654 = $ReallocAsyncCtx5 + 257 | 0; //@line 16264
   HEAP8[$654 >> 0] = $130; //@line 16265
   $655 = $ReallocAsyncCtx5 + 260 | 0; //@line 16266
   HEAP32[$655 >> 2] = $132; //@line 16267
   $656 = $ReallocAsyncCtx5 + 264 | 0; //@line 16268
   HEAP32[$656 >> 2] = $134; //@line 16269
   sp = STACKTOP; //@line 16270
   return;
  }
  HEAP8[___async_retval >> 0] = $589; //@line 16274
  ___async_unwind = 0; //@line 16275
  HEAP32[$ReallocAsyncCtx5 >> 2] = 580; //@line 16276
  $590 = $ReallocAsyncCtx5 + 4 | 0; //@line 16277
  HEAP32[$590 >> 2] = $2; //@line 16278
  $591 = $ReallocAsyncCtx5 + 8 | 0; //@line 16279
  HEAP32[$591 >> 2] = $4; //@line 16280
  $592 = $ReallocAsyncCtx5 + 12 | 0; //@line 16281
  HEAP32[$592 >> 2] = $6; //@line 16282
  $593 = $ReallocAsyncCtx5 + 16 | 0; //@line 16283
  HEAP32[$593 >> 2] = $8; //@line 16284
  $594 = $ReallocAsyncCtx5 + 20 | 0; //@line 16285
  HEAP32[$594 >> 2] = $10; //@line 16286
  $595 = $ReallocAsyncCtx5 + 24 | 0; //@line 16287
  HEAP32[$595 >> 2] = $12; //@line 16288
  $596 = $ReallocAsyncCtx5 + 28 | 0; //@line 16289
  HEAP32[$596 >> 2] = $14; //@line 16290
  $597 = $ReallocAsyncCtx5 + 32 | 0; //@line 16291
  HEAP32[$597 >> 2] = $16; //@line 16292
  $598 = $ReallocAsyncCtx5 + 36 | 0; //@line 16293
  HEAP32[$598 >> 2] = $18; //@line 16294
  $599 = $ReallocAsyncCtx5 + 40 | 0; //@line 16295
  HEAP32[$599 >> 2] = $20; //@line 16296
  $600 = $ReallocAsyncCtx5 + 44 | 0; //@line 16297
  HEAP32[$600 >> 2] = $22; //@line 16298
  $601 = $ReallocAsyncCtx5 + 48 | 0; //@line 16299
  HEAP32[$601 >> 2] = $24; //@line 16300
  $602 = $ReallocAsyncCtx5 + 52 | 0; //@line 16301
  HEAP32[$602 >> 2] = $26; //@line 16302
  $603 = $ReallocAsyncCtx5 + 56 | 0; //@line 16303
  HEAP32[$603 >> 2] = $28; //@line 16304
  $604 = $ReallocAsyncCtx5 + 60 | 0; //@line 16305
  HEAP32[$604 >> 2] = $30; //@line 16306
  $605 = $ReallocAsyncCtx5 + 64 | 0; //@line 16307
  HEAP32[$605 >> 2] = $32; //@line 16308
  $606 = $ReallocAsyncCtx5 + 68 | 0; //@line 16309
  HEAP32[$606 >> 2] = $34; //@line 16310
  $607 = $ReallocAsyncCtx5 + 72 | 0; //@line 16311
  HEAP32[$607 >> 2] = $36; //@line 16312
  $608 = $ReallocAsyncCtx5 + 76 | 0; //@line 16313
  HEAP32[$608 >> 2] = $38; //@line 16314
  $609 = $ReallocAsyncCtx5 + 80 | 0; //@line 16315
  HEAP32[$609 >> 2] = $40; //@line 16316
  $610 = $ReallocAsyncCtx5 + 84 | 0; //@line 16317
  HEAP32[$610 >> 2] = $42; //@line 16318
  $611 = $ReallocAsyncCtx5 + 88 | 0; //@line 16319
  HEAP32[$611 >> 2] = $44; //@line 16320
  $612 = $ReallocAsyncCtx5 + 92 | 0; //@line 16321
  HEAP32[$612 >> 2] = $46; //@line 16322
  $613 = $ReallocAsyncCtx5 + 96 | 0; //@line 16323
  HEAP32[$613 >> 2] = $48; //@line 16324
  $614 = $ReallocAsyncCtx5 + 100 | 0; //@line 16325
  HEAP32[$614 >> 2] = $50; //@line 16326
  $615 = $ReallocAsyncCtx5 + 104 | 0; //@line 16327
  HEAP32[$615 >> 2] = $52; //@line 16328
  $616 = $ReallocAsyncCtx5 + 108 | 0; //@line 16329
  HEAP32[$616 >> 2] = $54; //@line 16330
  $617 = $ReallocAsyncCtx5 + 112 | 0; //@line 16331
  HEAP32[$617 >> 2] = $56; //@line 16332
  $618 = $ReallocAsyncCtx5 + 116 | 0; //@line 16333
  HEAP32[$618 >> 2] = $58; //@line 16334
  $619 = $ReallocAsyncCtx5 + 120 | 0; //@line 16335
  HEAP32[$619 >> 2] = $60; //@line 16336
  $620 = $ReallocAsyncCtx5 + 124 | 0; //@line 16337
  HEAP32[$620 >> 2] = $62; //@line 16338
  $621 = $ReallocAsyncCtx5 + 128 | 0; //@line 16339
  HEAP32[$621 >> 2] = $64; //@line 16340
  $622 = $ReallocAsyncCtx5 + 132 | 0; //@line 16341
  HEAP8[$622 >> 0] = $578; //@line 16342
  $623 = $ReallocAsyncCtx5 + 136 | 0; //@line 16343
  HEAP32[$623 >> 2] = $68; //@line 16344
  $624 = $ReallocAsyncCtx5 + 140 | 0; //@line 16345
  HEAP32[$624 >> 2] = $70; //@line 16346
  $625 = $ReallocAsyncCtx5 + 144 | 0; //@line 16347
  HEAP32[$625 >> 2] = $72; //@line 16348
  $626 = $ReallocAsyncCtx5 + 148 | 0; //@line 16349
  HEAP32[$626 >> 2] = $74; //@line 16350
  $627 = $ReallocAsyncCtx5 + 152 | 0; //@line 16351
  HEAP32[$627 >> 2] = $76; //@line 16352
  $628 = $ReallocAsyncCtx5 + 156 | 0; //@line 16353
  HEAP32[$628 >> 2] = $78; //@line 16354
  $629 = $ReallocAsyncCtx5 + 160 | 0; //@line 16355
  HEAP32[$629 >> 2] = $80; //@line 16356
  $630 = $ReallocAsyncCtx5 + 164 | 0; //@line 16357
  HEAP32[$630 >> 2] = $82; //@line 16358
  $631 = $ReallocAsyncCtx5 + 168 | 0; //@line 16359
  HEAP32[$631 >> 2] = $84; //@line 16360
  $632 = $ReallocAsyncCtx5 + 172 | 0; //@line 16361
  HEAP32[$632 >> 2] = $86; //@line 16362
  $633 = $ReallocAsyncCtx5 + 176 | 0; //@line 16363
  HEAP32[$633 >> 2] = $88; //@line 16364
  $634 = $ReallocAsyncCtx5 + 180 | 0; //@line 16365
  HEAP32[$634 >> 2] = $90; //@line 16366
  $635 = $ReallocAsyncCtx5 + 184 | 0; //@line 16367
  HEAP32[$635 >> 2] = $92; //@line 16368
  $636 = $ReallocAsyncCtx5 + 188 | 0; //@line 16369
  HEAP32[$636 >> 2] = $94; //@line 16370
  $637 = $ReallocAsyncCtx5 + 192 | 0; //@line 16371
  HEAP32[$637 >> 2] = $96; //@line 16372
  $638 = $ReallocAsyncCtx5 + 196 | 0; //@line 16373
  HEAP32[$638 >> 2] = $98; //@line 16374
  $639 = $ReallocAsyncCtx5 + 200 | 0; //@line 16375
  HEAP32[$639 >> 2] = $100; //@line 16376
  $640 = $ReallocAsyncCtx5 + 204 | 0; //@line 16377
  HEAP32[$640 >> 2] = $102; //@line 16378
  $641 = $ReallocAsyncCtx5 + 208 | 0; //@line 16379
  HEAP32[$641 >> 2] = $104; //@line 16380
  $642 = $ReallocAsyncCtx5 + 212 | 0; //@line 16381
  HEAP32[$642 >> 2] = $106; //@line 16382
  $643 = $ReallocAsyncCtx5 + 216 | 0; //@line 16383
  HEAP32[$643 >> 2] = $108; //@line 16384
  $644 = $ReallocAsyncCtx5 + 220 | 0; //@line 16385
  HEAP32[$644 >> 2] = $110; //@line 16386
  $645 = $ReallocAsyncCtx5 + 224 | 0; //@line 16387
  HEAP32[$645 >> 2] = $112; //@line 16388
  $646 = $ReallocAsyncCtx5 + 228 | 0; //@line 16389
  HEAP8[$646 >> 0] = $114; //@line 16390
  $647 = $ReallocAsyncCtx5 + 232 | 0; //@line 16391
  HEAP32[$647 >> 2] = $116; //@line 16392
  $648 = $ReallocAsyncCtx5 + 236 | 0; //@line 16393
  HEAP32[$648 >> 2] = $118; //@line 16394
  $649 = $ReallocAsyncCtx5 + 240 | 0; //@line 16395
  HEAP32[$649 >> 2] = $120; //@line 16396
  $650 = $ReallocAsyncCtx5 + 244 | 0; //@line 16397
  HEAP32[$650 >> 2] = $122; //@line 16398
  $651 = $ReallocAsyncCtx5 + 248 | 0; //@line 16399
  HEAP32[$651 >> 2] = $124; //@line 16400
  $652 = $ReallocAsyncCtx5 + 252 | 0; //@line 16401
  HEAP32[$652 >> 2] = $126; //@line 16402
  $653 = $ReallocAsyncCtx5 + 256 | 0; //@line 16403
  HEAP8[$653 >> 0] = $128; //@line 16404
  $654 = $ReallocAsyncCtx5 + 257 | 0; //@line 16405
  HEAP8[$654 >> 0] = $130; //@line 16406
  $655 = $ReallocAsyncCtx5 + 260 | 0; //@line 16407
  HEAP32[$655 >> 2] = $132; //@line 16408
  $656 = $ReallocAsyncCtx5 + 264 | 0; //@line 16409
  HEAP32[$656 >> 2] = $134; //@line 16410
  sp = STACKTOP; //@line 16411
  return;
 } else if ((label | 0) == 31) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 16416
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i = 0, $$095113 = 0, $$096$be = 0, $$1$lcssa = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $136 = 0, $139 = 0, $14 = 0, $150 = 0, $151 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $238 = 0, $24 = 0, $242 = 0, $247 = 0, $248 = 0, $251 = 0, $257 = 0, $26 = 0, $260 = 0, $265 = 0, $273 = 0, $28 = 0, $292 = 0, $30 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $373 = 0, $374 = 0, $38 = 0, $4 = 0, $40 = 0, $411 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $487 = 0, $491 = 0, $495 = 0, $498 = 0, $50 = 0, $504 = 0, $507 = 0, $508 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $6 = 0, $60 = 0, $604 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $686 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $div = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6782
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6784
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6786
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6788
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6790
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6792
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6794
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6796
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6798
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 6800
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 6802
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 6804
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 6806
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 6808
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 6810
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 6812
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 6814
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 6816
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 6818
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 6820
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 6822
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 6824
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 6826
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 6828
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 6830
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 6832
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 6834
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 6836
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 6838
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 6840
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 6842
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 6844
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 6846
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 6848
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 6850
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 6852
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 6854
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 6856
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 6858
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 6860
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 6862
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 6864
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 6866
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 6868
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 6870
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 6872
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 6874
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 6876
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 6878
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 6880
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 6882
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 6884
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 6886
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 6888
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 6890
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 6892
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 6894
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 6896
 $116 = HEAP8[$0 + 232 >> 0] | 0; //@line 6898
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 6900
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 6902
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 6904
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 6906
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 6908
 $128 = HEAP32[$0 + 256 >> 2] | 0; //@line 6910
 $130 = HEAP8[$0 + 260 >> 0] | 0; //@line 6912
 $132 = HEAP8[$0 + 261 >> 0] | 0; //@line 6914
 $134 = HEAP32[$0 + 264 >> 2] | 0; //@line 6916
 $136 = HEAP32[$0 + 268 >> 2] | 0; //@line 6918
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 6920
 if (($AsyncRetVal & 7) == 7) {
  HEAP8[$70 >> 0] = HEAP8[$108 >> 0] | 0; //@line 6925
  HEAP8[$54 >> 0] = HEAP8[$64 >> 0] | 0; //@line 6927
  HEAP8[$38 >> 0] = HEAP8[$52 >> 0] | 0; //@line 6929
 }
 $238 = HEAP8[$88 >> 0] | 0; //@line 6931
 if (($238 & 255) > 4) {
  $div = ($238 & 255) / 5 | 0; //@line 6934
  $242 = (-128 - (HEAP8[$14 >> 0] | 0) & 255) + -1 | 0; //@line 6939
  $$095113 = 0; //@line 6940
  $248 = HEAP8[$6 >> 0] | 0; //@line 6940
  while (1) {
   $247 = $248 & 255; //@line 6942
   if (($242 | 0) > ($247 | 0)) {
    $251 = $248 + 2 << 24 >> 24; //@line 6946
    HEAP8[$104 + 4 + $247 >> 0] = 3; //@line 6950
    HEAP8[$6 >> 0] = $251; //@line 6951
    HEAP8[($248 + 1 & 255) + ($104 + 4) >> 0] = $AsyncRetVal; //@line 6952
    HEAP8[$120 >> 0] = 1; //@line 6953
    $$0$i = 0; //@line 6954
    $686 = $251; //@line 6954
   } else {
    $$0$i = -1e3; //@line 6956
    $686 = $248; //@line 6956
   }
   $$095113 = $$095113 + 1 << 24 >> 24; //@line 6958
   if (($$095113 & 255) >= ($div & 255)) {
    $$1$lcssa = $$0$i; //@line 6963
    break;
   } else {
    $248 = $686; //@line 6961
   }
  }
 } else {
  $$1$lcssa = $12; //@line 6968
 }
 $$0$be = $90 + 255 + ($238 & 255) & 255; //@line 6974
 $$096$be = $$1$lcssa; //@line 6974
 L13 : while (1) {
  if (($$0$be & 255) >= ($132 & 255)) {
   label = 36; //@line 6978
   break;
  }
  $139 = $$0$be + 1 << 24 >> 24; //@line 6982
  switch (HEAP8[$128 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 6987
    break L13;
    break;
   }
  case 5:
   {
    label = 17; //@line 6992
    break L13;
    break;
   }
  case 7:
   {
    label = 22; //@line 6997
    break L13;
    break;
   }
  case 9:
   {
    label = 27; //@line 7002
    break L13;
    break;
   }
  case 10:
   {
    label = 32; //@line 7007
    break L13;
    break;
   }
  case 2:
   {
    HEAP32[$20 >> 2] = 0; //@line 7012
    HEAP8[$30 >> 0] = HEAP8[$128 + ($139 & 255) >> 0] | 0; //@line 7017
    HEAP8[$2 >> 0] = HEAP8[$128 + ($$0$be + 2 & 255) >> 0] | 0; //@line 7022
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 7023
    continue L13;
    break;
   }
  case 4:
   {
    $257 = $$0$be + 2 << 24 >> 24; //@line 7028
    $260 = HEAP8[$128 + ($139 & 255) >> 0] | 0; //@line 7031
    HEAP8[$110 >> 0] = $260; //@line 7032
    HEAP16[$102 >> 1] = 1 << ($260 & 255); //@line 7036
    $265 = HEAP8[$6 >> 0] | 0; //@line 7038
    if (($265 & 255) >= (-128 - (HEAP8[$14 >> 0] | 0) & 255)) {
     $$0$be = $257; //@line 7042
     $$096$be = -1e3; //@line 7042
     continue L13;
    }
    HEAP8[$6 >> 0] = $265 + 1 << 24 >> 24; //@line 7048
    HEAP8[($265 & 255) + ($104 + 4) >> 0] = 4; //@line 7049
    HEAP8[$120 >> 0] = 1; //@line 7050
    $$0$be = $257; //@line 7051
    $$096$be = 0; //@line 7051
    continue L13;
    break;
   }
  case 6:
   {
    $373 = HEAP8[$6 >> 0] | 0; //@line 7057
    $374 = $373 & 255; //@line 7058
    if (((-128 - (HEAP8[$14 >> 0] | 0) & 255) + -2 | 0) <= ($374 | 0)) {
     $$0$be = $139; //@line 7064
     $$096$be = -1e3; //@line 7064
     continue L13;
    }
    HEAP8[$104 + 4 + $374 >> 0] = 6; //@line 7069
    HEAP8[($373 + 1 & 255) + ($104 + 4) >> 0] = -1; //@line 7073
    HEAP8[$6 >> 0] = $373 + 3 << 24 >> 24; //@line 7075
    HEAP8[($373 + 2 & 255) + ($104 + 4) >> 0] = $116; //@line 7078
    HEAP8[$120 >> 0] = 1; //@line 7079
    $$0$be = $139; //@line 7080
    $$096$be = 0; //@line 7080
    continue L13;
    break;
   }
  case 8:
   {
    $487 = $$0$be + 2 << 24 >> 24; //@line 7085
    $491 = HEAP8[$128 + ($139 & 255) >> 0] & 15; //@line 7089
    $495 = ($491 + ($491 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 7094
    HEAP32[$42 >> 2] = $495; //@line 7095
    HEAP32[$50 >> 2] = $495 + 1e3; //@line 7097
    $498 = HEAP8[$6 >> 0] | 0; //@line 7099
    if (($498 & 255) >= (-128 - (HEAP8[$14 >> 0] | 0) & 255)) {
     $$0$be = $487; //@line 7103
     $$096$be = -1e3; //@line 7103
     continue L13;
    }
    HEAP8[$6 >> 0] = $498 + 1 << 24 >> 24; //@line 7109
    HEAP8[($498 & 255) + ($104 + 4) >> 0] = 8; //@line 7110
    HEAP8[$34 >> 0] = 1; //@line 7111
    HEAP8[$120 >> 0] = 1; //@line 7112
    $$0$be = $487; //@line 7113
    $$096$be = 0; //@line 7113
    continue L13;
    break;
   }
  default:
   {
    $$0$be = $139; //@line 7118
    $$096$be = -1013; //@line 7118
    continue L13;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$108 >> 0] = 0; //@line 7124
  HEAP8[$64 >> 0] = 0; //@line 7125
  HEAP8[$52 >> 0] = 0; //@line 7126
  HEAP8[$88 >> 0] = 0; //@line 7127
  $150 = $139 & 255; //@line 7128
  $151 = $150 + -1 | 0; //@line 7129
  HEAP32[$134 >> 2] = $128 + $151; //@line 7131
  HEAP8[$126 >> 0] = $62 - $151; //@line 7134
  HEAP8[$96 >> 0] = HEAP8[$114 >> 0] | 0; //@line 7136
  HEAP8[$78 >> 0] = HEAP8[$82 >> 0] | 0; //@line 7138
  HEAP8[$66 >> 0] = HEAP8[$70 >> 0] | 0; //@line 7140
  HEAP8[$44 >> 0] = HEAP8[$54 >> 0] | 0; //@line 7142
  HEAP8[$22 >> 0] = HEAP8[$38 >> 0] | 0; //@line 7144
  $162 = HEAP32[(HEAP32[$24 >> 2] | 0) + 36 >> 2] | 0; //@line 7147
  $ReallocAsyncCtx = _emscripten_realloc_async_context(272) | 0; //@line 7148
  $163 = FUNCTION_TABLE_iiiiiii[$162 & 3]($124, $118, $108, $64, $52, $88) | 0; //@line 7149
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 576; //@line 7152
   $164 = $ReallocAsyncCtx + 4 | 0; //@line 7153
   HEAP32[$164 >> 2] = $2; //@line 7154
   $165 = $ReallocAsyncCtx + 8 | 0; //@line 7155
   HEAP32[$165 >> 2] = $4; //@line 7156
   $166 = $ReallocAsyncCtx + 12 | 0; //@line 7157
   HEAP32[$166 >> 2] = $6; //@line 7158
   $167 = $ReallocAsyncCtx + 16 | 0; //@line 7159
   HEAP32[$167 >> 2] = $8; //@line 7160
   $168 = $ReallocAsyncCtx + 20 | 0; //@line 7161
   HEAP32[$168 >> 2] = $10; //@line 7162
   $169 = $ReallocAsyncCtx + 24 | 0; //@line 7163
   HEAP32[$169 >> 2] = $$096$be; //@line 7164
   $170 = $ReallocAsyncCtx + 28 | 0; //@line 7165
   HEAP32[$170 >> 2] = $14; //@line 7166
   $171 = $ReallocAsyncCtx + 32 | 0; //@line 7167
   HEAP32[$171 >> 2] = $16; //@line 7168
   $172 = $ReallocAsyncCtx + 36 | 0; //@line 7169
   HEAP32[$172 >> 2] = $18; //@line 7170
   $173 = $ReallocAsyncCtx + 40 | 0; //@line 7171
   HEAP32[$173 >> 2] = $20; //@line 7172
   $174 = $ReallocAsyncCtx + 44 | 0; //@line 7173
   HEAP32[$174 >> 2] = $22; //@line 7174
   $175 = $ReallocAsyncCtx + 48 | 0; //@line 7175
   HEAP32[$175 >> 2] = $24; //@line 7176
   $176 = $ReallocAsyncCtx + 52 | 0; //@line 7177
   HEAP32[$176 >> 2] = $26; //@line 7178
   $177 = $ReallocAsyncCtx + 56 | 0; //@line 7179
   HEAP32[$177 >> 2] = $28; //@line 7180
   $178 = $ReallocAsyncCtx + 60 | 0; //@line 7181
   HEAP32[$178 >> 2] = $30; //@line 7182
   $179 = $ReallocAsyncCtx + 64 | 0; //@line 7183
   HEAP32[$179 >> 2] = $32; //@line 7184
   $180 = $ReallocAsyncCtx + 68 | 0; //@line 7185
   HEAP32[$180 >> 2] = $34; //@line 7186
   $181 = $ReallocAsyncCtx + 72 | 0; //@line 7187
   HEAP32[$181 >> 2] = $36; //@line 7188
   $182 = $ReallocAsyncCtx + 76 | 0; //@line 7189
   HEAP32[$182 >> 2] = $38; //@line 7190
   $183 = $ReallocAsyncCtx + 80 | 0; //@line 7191
   HEAP32[$183 >> 2] = $40; //@line 7192
   $184 = $ReallocAsyncCtx + 84 | 0; //@line 7193
   HEAP32[$184 >> 2] = $42; //@line 7194
   $185 = $ReallocAsyncCtx + 88 | 0; //@line 7195
   HEAP32[$185 >> 2] = $44; //@line 7196
   $186 = $ReallocAsyncCtx + 92 | 0; //@line 7197
   HEAP32[$186 >> 2] = $46; //@line 7198
   $187 = $ReallocAsyncCtx + 96 | 0; //@line 7199
   HEAP32[$187 >> 2] = $48; //@line 7200
   $188 = $ReallocAsyncCtx + 100 | 0; //@line 7201
   HEAP32[$188 >> 2] = $50; //@line 7202
   $189 = $ReallocAsyncCtx + 104 | 0; //@line 7203
   HEAP32[$189 >> 2] = $52; //@line 7204
   $190 = $ReallocAsyncCtx + 108 | 0; //@line 7205
   HEAP32[$190 >> 2] = $54; //@line 7206
   $191 = $ReallocAsyncCtx + 112 | 0; //@line 7207
   HEAP32[$191 >> 2] = $56; //@line 7208
   $192 = $ReallocAsyncCtx + 116 | 0; //@line 7209
   HEAP32[$192 >> 2] = $58; //@line 7210
   $193 = $ReallocAsyncCtx + 120 | 0; //@line 7211
   HEAP32[$193 >> 2] = $60; //@line 7212
   $194 = $ReallocAsyncCtx + 124 | 0; //@line 7213
   HEAP32[$194 >> 2] = $62; //@line 7214
   $195 = $ReallocAsyncCtx + 128 | 0; //@line 7215
   HEAP32[$195 >> 2] = $64; //@line 7216
   $196 = $ReallocAsyncCtx + 132 | 0; //@line 7217
   HEAP32[$196 >> 2] = $66; //@line 7218
   $197 = $ReallocAsyncCtx + 136 | 0; //@line 7219
   HEAP32[$197 >> 2] = $68; //@line 7220
   $198 = $ReallocAsyncCtx + 140 | 0; //@line 7221
   HEAP32[$198 >> 2] = $70; //@line 7222
   $199 = $ReallocAsyncCtx + 144 | 0; //@line 7223
   HEAP32[$199 >> 2] = $72; //@line 7224
   $200 = $ReallocAsyncCtx + 148 | 0; //@line 7225
   HEAP32[$200 >> 2] = $74; //@line 7226
   $201 = $ReallocAsyncCtx + 152 | 0; //@line 7227
   HEAP32[$201 >> 2] = $76; //@line 7228
   $202 = $ReallocAsyncCtx + 156 | 0; //@line 7229
   HEAP32[$202 >> 2] = $78; //@line 7230
   $203 = $ReallocAsyncCtx + 160 | 0; //@line 7231
   HEAP32[$203 >> 2] = $80; //@line 7232
   $204 = $ReallocAsyncCtx + 164 | 0; //@line 7233
   HEAP32[$204 >> 2] = $82; //@line 7234
   $205 = $ReallocAsyncCtx + 168 | 0; //@line 7235
   HEAP32[$205 >> 2] = $84; //@line 7236
   $206 = $ReallocAsyncCtx + 172 | 0; //@line 7237
   HEAP32[$206 >> 2] = $86; //@line 7238
   $207 = $ReallocAsyncCtx + 176 | 0; //@line 7239
   HEAP32[$207 >> 2] = $88; //@line 7240
   $208 = $ReallocAsyncCtx + 180 | 0; //@line 7241
   HEAP32[$208 >> 2] = $150; //@line 7242
   $209 = $ReallocAsyncCtx + 184 | 0; //@line 7243
   HEAP32[$209 >> 2] = $92; //@line 7244
   $210 = $ReallocAsyncCtx + 188 | 0; //@line 7245
   HEAP32[$210 >> 2] = $94; //@line 7246
   $211 = $ReallocAsyncCtx + 192 | 0; //@line 7247
   HEAP32[$211 >> 2] = $96; //@line 7248
   $212 = $ReallocAsyncCtx + 196 | 0; //@line 7249
   HEAP32[$212 >> 2] = $98; //@line 7250
   $213 = $ReallocAsyncCtx + 200 | 0; //@line 7251
   HEAP32[$213 >> 2] = $100; //@line 7252
   $214 = $ReallocAsyncCtx + 204 | 0; //@line 7253
   HEAP32[$214 >> 2] = $102; //@line 7254
   $215 = $ReallocAsyncCtx + 208 | 0; //@line 7255
   HEAP32[$215 >> 2] = $104; //@line 7256
   $216 = $ReallocAsyncCtx + 212 | 0; //@line 7257
   HEAP32[$216 >> 2] = $106; //@line 7258
   $217 = $ReallocAsyncCtx + 216 | 0; //@line 7259
   HEAP32[$217 >> 2] = $108; //@line 7260
   $218 = $ReallocAsyncCtx + 220 | 0; //@line 7261
   HEAP32[$218 >> 2] = $110; //@line 7262
   $219 = $ReallocAsyncCtx + 224 | 0; //@line 7263
   HEAP32[$219 >> 2] = $112; //@line 7264
   $220 = $ReallocAsyncCtx + 228 | 0; //@line 7265
   HEAP32[$220 >> 2] = $114; //@line 7266
   $221 = $ReallocAsyncCtx + 232 | 0; //@line 7267
   HEAP8[$221 >> 0] = $116; //@line 7268
   $222 = $ReallocAsyncCtx + 236 | 0; //@line 7269
   HEAP32[$222 >> 2] = $118; //@line 7270
   $223 = $ReallocAsyncCtx + 240 | 0; //@line 7271
   HEAP32[$223 >> 2] = $120; //@line 7272
   $224 = $ReallocAsyncCtx + 244 | 0; //@line 7273
   HEAP32[$224 >> 2] = $122; //@line 7274
   $225 = $ReallocAsyncCtx + 248 | 0; //@line 7275
   HEAP32[$225 >> 2] = $124; //@line 7276
   $226 = $ReallocAsyncCtx + 252 | 0; //@line 7277
   HEAP32[$226 >> 2] = $126; //@line 7278
   $227 = $ReallocAsyncCtx + 256 | 0; //@line 7279
   HEAP32[$227 >> 2] = $128; //@line 7280
   $228 = $ReallocAsyncCtx + 260 | 0; //@line 7281
   HEAP8[$228 >> 0] = $130; //@line 7282
   $229 = $ReallocAsyncCtx + 261 | 0; //@line 7283
   HEAP8[$229 >> 0] = $132; //@line 7284
   $230 = $ReallocAsyncCtx + 264 | 0; //@line 7285
   HEAP32[$230 >> 2] = $134; //@line 7286
   $231 = $ReallocAsyncCtx + 268 | 0; //@line 7287
   HEAP32[$231 >> 2] = $136; //@line 7288
   sp = STACKTOP; //@line 7289
   return;
  }
  HEAP8[___async_retval >> 0] = $163; //@line 7293
  ___async_unwind = 0; //@line 7294
  HEAP32[$ReallocAsyncCtx >> 2] = 576; //@line 7295
  $164 = $ReallocAsyncCtx + 4 | 0; //@line 7296
  HEAP32[$164 >> 2] = $2; //@line 7297
  $165 = $ReallocAsyncCtx + 8 | 0; //@line 7298
  HEAP32[$165 >> 2] = $4; //@line 7299
  $166 = $ReallocAsyncCtx + 12 | 0; //@line 7300
  HEAP32[$166 >> 2] = $6; //@line 7301
  $167 = $ReallocAsyncCtx + 16 | 0; //@line 7302
  HEAP32[$167 >> 2] = $8; //@line 7303
  $168 = $ReallocAsyncCtx + 20 | 0; //@line 7304
  HEAP32[$168 >> 2] = $10; //@line 7305
  $169 = $ReallocAsyncCtx + 24 | 0; //@line 7306
  HEAP32[$169 >> 2] = $$096$be; //@line 7307
  $170 = $ReallocAsyncCtx + 28 | 0; //@line 7308
  HEAP32[$170 >> 2] = $14; //@line 7309
  $171 = $ReallocAsyncCtx + 32 | 0; //@line 7310
  HEAP32[$171 >> 2] = $16; //@line 7311
  $172 = $ReallocAsyncCtx + 36 | 0; //@line 7312
  HEAP32[$172 >> 2] = $18; //@line 7313
  $173 = $ReallocAsyncCtx + 40 | 0; //@line 7314
  HEAP32[$173 >> 2] = $20; //@line 7315
  $174 = $ReallocAsyncCtx + 44 | 0; //@line 7316
  HEAP32[$174 >> 2] = $22; //@line 7317
  $175 = $ReallocAsyncCtx + 48 | 0; //@line 7318
  HEAP32[$175 >> 2] = $24; //@line 7319
  $176 = $ReallocAsyncCtx + 52 | 0; //@line 7320
  HEAP32[$176 >> 2] = $26; //@line 7321
  $177 = $ReallocAsyncCtx + 56 | 0; //@line 7322
  HEAP32[$177 >> 2] = $28; //@line 7323
  $178 = $ReallocAsyncCtx + 60 | 0; //@line 7324
  HEAP32[$178 >> 2] = $30; //@line 7325
  $179 = $ReallocAsyncCtx + 64 | 0; //@line 7326
  HEAP32[$179 >> 2] = $32; //@line 7327
  $180 = $ReallocAsyncCtx + 68 | 0; //@line 7328
  HEAP32[$180 >> 2] = $34; //@line 7329
  $181 = $ReallocAsyncCtx + 72 | 0; //@line 7330
  HEAP32[$181 >> 2] = $36; //@line 7331
  $182 = $ReallocAsyncCtx + 76 | 0; //@line 7332
  HEAP32[$182 >> 2] = $38; //@line 7333
  $183 = $ReallocAsyncCtx + 80 | 0; //@line 7334
  HEAP32[$183 >> 2] = $40; //@line 7335
  $184 = $ReallocAsyncCtx + 84 | 0; //@line 7336
  HEAP32[$184 >> 2] = $42; //@line 7337
  $185 = $ReallocAsyncCtx + 88 | 0; //@line 7338
  HEAP32[$185 >> 2] = $44; //@line 7339
  $186 = $ReallocAsyncCtx + 92 | 0; //@line 7340
  HEAP32[$186 >> 2] = $46; //@line 7341
  $187 = $ReallocAsyncCtx + 96 | 0; //@line 7342
  HEAP32[$187 >> 2] = $48; //@line 7343
  $188 = $ReallocAsyncCtx + 100 | 0; //@line 7344
  HEAP32[$188 >> 2] = $50; //@line 7345
  $189 = $ReallocAsyncCtx + 104 | 0; //@line 7346
  HEAP32[$189 >> 2] = $52; //@line 7347
  $190 = $ReallocAsyncCtx + 108 | 0; //@line 7348
  HEAP32[$190 >> 2] = $54; //@line 7349
  $191 = $ReallocAsyncCtx + 112 | 0; //@line 7350
  HEAP32[$191 >> 2] = $56; //@line 7351
  $192 = $ReallocAsyncCtx + 116 | 0; //@line 7352
  HEAP32[$192 >> 2] = $58; //@line 7353
  $193 = $ReallocAsyncCtx + 120 | 0; //@line 7354
  HEAP32[$193 >> 2] = $60; //@line 7355
  $194 = $ReallocAsyncCtx + 124 | 0; //@line 7356
  HEAP32[$194 >> 2] = $62; //@line 7357
  $195 = $ReallocAsyncCtx + 128 | 0; //@line 7358
  HEAP32[$195 >> 2] = $64; //@line 7359
  $196 = $ReallocAsyncCtx + 132 | 0; //@line 7360
  HEAP32[$196 >> 2] = $66; //@line 7361
  $197 = $ReallocAsyncCtx + 136 | 0; //@line 7362
  HEAP32[$197 >> 2] = $68; //@line 7363
  $198 = $ReallocAsyncCtx + 140 | 0; //@line 7364
  HEAP32[$198 >> 2] = $70; //@line 7365
  $199 = $ReallocAsyncCtx + 144 | 0; //@line 7366
  HEAP32[$199 >> 2] = $72; //@line 7367
  $200 = $ReallocAsyncCtx + 148 | 0; //@line 7368
  HEAP32[$200 >> 2] = $74; //@line 7369
  $201 = $ReallocAsyncCtx + 152 | 0; //@line 7370
  HEAP32[$201 >> 2] = $76; //@line 7371
  $202 = $ReallocAsyncCtx + 156 | 0; //@line 7372
  HEAP32[$202 >> 2] = $78; //@line 7373
  $203 = $ReallocAsyncCtx + 160 | 0; //@line 7374
  HEAP32[$203 >> 2] = $80; //@line 7375
  $204 = $ReallocAsyncCtx + 164 | 0; //@line 7376
  HEAP32[$204 >> 2] = $82; //@line 7377
  $205 = $ReallocAsyncCtx + 168 | 0; //@line 7378
  HEAP32[$205 >> 2] = $84; //@line 7379
  $206 = $ReallocAsyncCtx + 172 | 0; //@line 7380
  HEAP32[$206 >> 2] = $86; //@line 7381
  $207 = $ReallocAsyncCtx + 176 | 0; //@line 7382
  HEAP32[$207 >> 2] = $88; //@line 7383
  $208 = $ReallocAsyncCtx + 180 | 0; //@line 7384
  HEAP32[$208 >> 2] = $150; //@line 7385
  $209 = $ReallocAsyncCtx + 184 | 0; //@line 7386
  HEAP32[$209 >> 2] = $92; //@line 7387
  $210 = $ReallocAsyncCtx + 188 | 0; //@line 7388
  HEAP32[$210 >> 2] = $94; //@line 7389
  $211 = $ReallocAsyncCtx + 192 | 0; //@line 7390
  HEAP32[$211 >> 2] = $96; //@line 7391
  $212 = $ReallocAsyncCtx + 196 | 0; //@line 7392
  HEAP32[$212 >> 2] = $98; //@line 7393
  $213 = $ReallocAsyncCtx + 200 | 0; //@line 7394
  HEAP32[$213 >> 2] = $100; //@line 7395
  $214 = $ReallocAsyncCtx + 204 | 0; //@line 7396
  HEAP32[$214 >> 2] = $102; //@line 7397
  $215 = $ReallocAsyncCtx + 208 | 0; //@line 7398
  HEAP32[$215 >> 2] = $104; //@line 7399
  $216 = $ReallocAsyncCtx + 212 | 0; //@line 7400
  HEAP32[$216 >> 2] = $106; //@line 7401
  $217 = $ReallocAsyncCtx + 216 | 0; //@line 7402
  HEAP32[$217 >> 2] = $108; //@line 7403
  $218 = $ReallocAsyncCtx + 220 | 0; //@line 7404
  HEAP32[$218 >> 2] = $110; //@line 7405
  $219 = $ReallocAsyncCtx + 224 | 0; //@line 7406
  HEAP32[$219 >> 2] = $112; //@line 7407
  $220 = $ReallocAsyncCtx + 228 | 0; //@line 7408
  HEAP32[$220 >> 2] = $114; //@line 7409
  $221 = $ReallocAsyncCtx + 232 | 0; //@line 7410
  HEAP8[$221 >> 0] = $116; //@line 7411
  $222 = $ReallocAsyncCtx + 236 | 0; //@line 7412
  HEAP32[$222 >> 2] = $118; //@line 7413
  $223 = $ReallocAsyncCtx + 240 | 0; //@line 7414
  HEAP32[$223 >> 2] = $120; //@line 7415
  $224 = $ReallocAsyncCtx + 244 | 0; //@line 7416
  HEAP32[$224 >> 2] = $122; //@line 7417
  $225 = $ReallocAsyncCtx + 248 | 0; //@line 7418
  HEAP32[$225 >> 2] = $124; //@line 7419
  $226 = $ReallocAsyncCtx + 252 | 0; //@line 7420
  HEAP32[$226 >> 2] = $126; //@line 7421
  $227 = $ReallocAsyncCtx + 256 | 0; //@line 7422
  HEAP32[$227 >> 2] = $128; //@line 7423
  $228 = $ReallocAsyncCtx + 260 | 0; //@line 7424
  HEAP8[$228 >> 0] = $130; //@line 7425
  $229 = $ReallocAsyncCtx + 261 | 0; //@line 7426
  HEAP8[$229 >> 0] = $132; //@line 7427
  $230 = $ReallocAsyncCtx + 264 | 0; //@line 7428
  HEAP32[$230 >> 2] = $134; //@line 7429
  $231 = $ReallocAsyncCtx + 268 | 0; //@line 7430
  HEAP32[$231 >> 2] = $136; //@line 7431
  sp = STACKTOP; //@line 7432
  return;
 } else if ((label | 0) == 17) {
  $273 = HEAP8[$128 + ($139 & 255) >> 0] | 0; //@line 7438
  HEAP8[$86 >> 0] = ($273 & 255) >>> 4 & 7; //@line 7443
  HEAP8[$100 >> 0] = $273 & 15; //@line 7445
  $292 = $$0$be + 5 << 24 >> 24; //@line 7459
  HEAP32[$76 >> 2] = (HEAPU8[$128 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$128 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$128 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 7467
  $302 = HEAP32[(HEAP32[$74 >> 2] | 0) + 40 >> 2] | 0; //@line 7470
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(268) | 0; //@line 7471
  $303 = FUNCTION_TABLE_iii[$302 & 31]($124, $92) | 0; //@line 7472
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 577; //@line 7475
   $304 = $ReallocAsyncCtx2 + 4 | 0; //@line 7476
   HEAP32[$304 >> 2] = $2; //@line 7477
   $305 = $ReallocAsyncCtx2 + 8 | 0; //@line 7478
   HEAP32[$305 >> 2] = $4; //@line 7479
   $306 = $ReallocAsyncCtx2 + 12 | 0; //@line 7480
   HEAP32[$306 >> 2] = $6; //@line 7481
   $307 = $ReallocAsyncCtx2 + 16 | 0; //@line 7482
   HEAP32[$307 >> 2] = $8; //@line 7483
   $308 = $ReallocAsyncCtx2 + 20 | 0; //@line 7484
   HEAP32[$308 >> 2] = $10; //@line 7485
   $309 = $ReallocAsyncCtx2 + 24 | 0; //@line 7486
   HEAP32[$309 >> 2] = $16; //@line 7487
   $310 = $ReallocAsyncCtx2 + 28 | 0; //@line 7488
   HEAP32[$310 >> 2] = $14; //@line 7489
   $311 = $ReallocAsyncCtx2 + 32 | 0; //@line 7490
   HEAP32[$311 >> 2] = $18; //@line 7491
   $312 = $ReallocAsyncCtx2 + 36 | 0; //@line 7492
   HEAP32[$312 >> 2] = $20; //@line 7493
   $313 = $ReallocAsyncCtx2 + 40 | 0; //@line 7494
   HEAP32[$313 >> 2] = $22; //@line 7495
   $314 = $ReallocAsyncCtx2 + 44 | 0; //@line 7496
   HEAP32[$314 >> 2] = $24; //@line 7497
   $315 = $ReallocAsyncCtx2 + 48 | 0; //@line 7498
   HEAP32[$315 >> 2] = $26; //@line 7499
   $316 = $ReallocAsyncCtx2 + 52 | 0; //@line 7500
   HEAP32[$316 >> 2] = $28; //@line 7501
   $317 = $ReallocAsyncCtx2 + 56 | 0; //@line 7502
   HEAP32[$317 >> 2] = $30; //@line 7503
   $318 = $ReallocAsyncCtx2 + 60 | 0; //@line 7504
   HEAP32[$318 >> 2] = $32; //@line 7505
   $319 = $ReallocAsyncCtx2 + 64 | 0; //@line 7506
   HEAP32[$319 >> 2] = $34; //@line 7507
   $320 = $ReallocAsyncCtx2 + 68 | 0; //@line 7508
   HEAP32[$320 >> 2] = $36; //@line 7509
   $321 = $ReallocAsyncCtx2 + 72 | 0; //@line 7510
   HEAP32[$321 >> 2] = $38; //@line 7511
   $322 = $ReallocAsyncCtx2 + 76 | 0; //@line 7512
   HEAP32[$322 >> 2] = $40; //@line 7513
   $323 = $ReallocAsyncCtx2 + 80 | 0; //@line 7514
   HEAP32[$323 >> 2] = $42; //@line 7515
   $324 = $ReallocAsyncCtx2 + 84 | 0; //@line 7516
   HEAP32[$324 >> 2] = $44; //@line 7517
   $325 = $ReallocAsyncCtx2 + 88 | 0; //@line 7518
   HEAP32[$325 >> 2] = $46; //@line 7519
   $326 = $ReallocAsyncCtx2 + 92 | 0; //@line 7520
   HEAP32[$326 >> 2] = $48; //@line 7521
   $327 = $ReallocAsyncCtx2 + 96 | 0; //@line 7522
   HEAP32[$327 >> 2] = $50; //@line 7523
   $328 = $ReallocAsyncCtx2 + 100 | 0; //@line 7524
   HEAP32[$328 >> 2] = $52; //@line 7525
   $329 = $ReallocAsyncCtx2 + 104 | 0; //@line 7526
   HEAP32[$329 >> 2] = $54; //@line 7527
   $330 = $ReallocAsyncCtx2 + 108 | 0; //@line 7528
   HEAP32[$330 >> 2] = $56; //@line 7529
   $331 = $ReallocAsyncCtx2 + 112 | 0; //@line 7530
   HEAP32[$331 >> 2] = $58; //@line 7531
   $332 = $ReallocAsyncCtx2 + 116 | 0; //@line 7532
   HEAP32[$332 >> 2] = $60; //@line 7533
   $333 = $ReallocAsyncCtx2 + 120 | 0; //@line 7534
   HEAP32[$333 >> 2] = $62; //@line 7535
   $334 = $ReallocAsyncCtx2 + 124 | 0; //@line 7536
   HEAP32[$334 >> 2] = $64; //@line 7537
   $335 = $ReallocAsyncCtx2 + 128 | 0; //@line 7538
   HEAP32[$335 >> 2] = $66; //@line 7539
   $336 = $ReallocAsyncCtx2 + 132 | 0; //@line 7540
   HEAP32[$336 >> 2] = $68; //@line 7541
   $337 = $ReallocAsyncCtx2 + 136 | 0; //@line 7542
   HEAP32[$337 >> 2] = $70; //@line 7543
   $338 = $ReallocAsyncCtx2 + 140 | 0; //@line 7544
   HEAP32[$338 >> 2] = $72; //@line 7545
   $339 = $ReallocAsyncCtx2 + 144 | 0; //@line 7546
   HEAP32[$339 >> 2] = $74; //@line 7547
   $340 = $ReallocAsyncCtx2 + 148 | 0; //@line 7548
   HEAP8[$340 >> 0] = $292; //@line 7549
   $341 = $ReallocAsyncCtx2 + 152 | 0; //@line 7550
   HEAP32[$341 >> 2] = $76; //@line 7551
   $342 = $ReallocAsyncCtx2 + 156 | 0; //@line 7552
   HEAP32[$342 >> 2] = $78; //@line 7553
   $343 = $ReallocAsyncCtx2 + 160 | 0; //@line 7554
   HEAP32[$343 >> 2] = $80; //@line 7555
   $344 = $ReallocAsyncCtx2 + 164 | 0; //@line 7556
   HEAP32[$344 >> 2] = $82; //@line 7557
   $345 = $ReallocAsyncCtx2 + 168 | 0; //@line 7558
   HEAP32[$345 >> 2] = $84; //@line 7559
   $346 = $ReallocAsyncCtx2 + 172 | 0; //@line 7560
   HEAP32[$346 >> 2] = $86; //@line 7561
   $347 = $ReallocAsyncCtx2 + 176 | 0; //@line 7562
   HEAP32[$347 >> 2] = $88; //@line 7563
   $348 = $ReallocAsyncCtx2 + 180 | 0; //@line 7564
   HEAP32[$348 >> 2] = $92; //@line 7565
   $349 = $ReallocAsyncCtx2 + 184 | 0; //@line 7566
   HEAP32[$349 >> 2] = $94; //@line 7567
   $350 = $ReallocAsyncCtx2 + 188 | 0; //@line 7568
   HEAP32[$350 >> 2] = $96; //@line 7569
   $351 = $ReallocAsyncCtx2 + 192 | 0; //@line 7570
   HEAP32[$351 >> 2] = $98; //@line 7571
   $352 = $ReallocAsyncCtx2 + 196 | 0; //@line 7572
   HEAP32[$352 >> 2] = $100; //@line 7573
   $353 = $ReallocAsyncCtx2 + 200 | 0; //@line 7574
   HEAP32[$353 >> 2] = $102; //@line 7575
   $354 = $ReallocAsyncCtx2 + 204 | 0; //@line 7576
   HEAP32[$354 >> 2] = $104; //@line 7577
   $355 = $ReallocAsyncCtx2 + 208 | 0; //@line 7578
   HEAP32[$355 >> 2] = $106; //@line 7579
   $356 = $ReallocAsyncCtx2 + 212 | 0; //@line 7580
   HEAP32[$356 >> 2] = $108; //@line 7581
   $357 = $ReallocAsyncCtx2 + 216 | 0; //@line 7582
   HEAP32[$357 >> 2] = $110; //@line 7583
   $358 = $ReallocAsyncCtx2 + 220 | 0; //@line 7584
   HEAP32[$358 >> 2] = $112; //@line 7585
   $359 = $ReallocAsyncCtx2 + 224 | 0; //@line 7586
   HEAP32[$359 >> 2] = $114; //@line 7587
   $360 = $ReallocAsyncCtx2 + 228 | 0; //@line 7588
   HEAP8[$360 >> 0] = $116; //@line 7589
   $361 = $ReallocAsyncCtx2 + 232 | 0; //@line 7590
   HEAP32[$361 >> 2] = $118; //@line 7591
   $362 = $ReallocAsyncCtx2 + 236 | 0; //@line 7592
   HEAP32[$362 >> 2] = $120; //@line 7593
   $363 = $ReallocAsyncCtx2 + 240 | 0; //@line 7594
   HEAP32[$363 >> 2] = $122; //@line 7595
   $364 = $ReallocAsyncCtx2 + 244 | 0; //@line 7596
   HEAP32[$364 >> 2] = $124; //@line 7597
   $365 = $ReallocAsyncCtx2 + 248 | 0; //@line 7598
   HEAP32[$365 >> 2] = $126; //@line 7599
   $366 = $ReallocAsyncCtx2 + 252 | 0; //@line 7600
   HEAP32[$366 >> 2] = $128; //@line 7601
   $367 = $ReallocAsyncCtx2 + 256 | 0; //@line 7602
   HEAP8[$367 >> 0] = $130; //@line 7603
   $368 = $ReallocAsyncCtx2 + 257 | 0; //@line 7604
   HEAP8[$368 >> 0] = $132; //@line 7605
   $369 = $ReallocAsyncCtx2 + 260 | 0; //@line 7606
   HEAP32[$369 >> 2] = $134; //@line 7607
   $370 = $ReallocAsyncCtx2 + 264 | 0; //@line 7608
   HEAP32[$370 >> 2] = $136; //@line 7609
   sp = STACKTOP; //@line 7610
   return;
  }
  HEAP8[___async_retval >> 0] = $303; //@line 7614
  ___async_unwind = 0; //@line 7615
  HEAP32[$ReallocAsyncCtx2 >> 2] = 577; //@line 7616
  $304 = $ReallocAsyncCtx2 + 4 | 0; //@line 7617
  HEAP32[$304 >> 2] = $2; //@line 7618
  $305 = $ReallocAsyncCtx2 + 8 | 0; //@line 7619
  HEAP32[$305 >> 2] = $4; //@line 7620
  $306 = $ReallocAsyncCtx2 + 12 | 0; //@line 7621
  HEAP32[$306 >> 2] = $6; //@line 7622
  $307 = $ReallocAsyncCtx2 + 16 | 0; //@line 7623
  HEAP32[$307 >> 2] = $8; //@line 7624
  $308 = $ReallocAsyncCtx2 + 20 | 0; //@line 7625
  HEAP32[$308 >> 2] = $10; //@line 7626
  $309 = $ReallocAsyncCtx2 + 24 | 0; //@line 7627
  HEAP32[$309 >> 2] = $16; //@line 7628
  $310 = $ReallocAsyncCtx2 + 28 | 0; //@line 7629
  HEAP32[$310 >> 2] = $14; //@line 7630
  $311 = $ReallocAsyncCtx2 + 32 | 0; //@line 7631
  HEAP32[$311 >> 2] = $18; //@line 7632
  $312 = $ReallocAsyncCtx2 + 36 | 0; //@line 7633
  HEAP32[$312 >> 2] = $20; //@line 7634
  $313 = $ReallocAsyncCtx2 + 40 | 0; //@line 7635
  HEAP32[$313 >> 2] = $22; //@line 7636
  $314 = $ReallocAsyncCtx2 + 44 | 0; //@line 7637
  HEAP32[$314 >> 2] = $24; //@line 7638
  $315 = $ReallocAsyncCtx2 + 48 | 0; //@line 7639
  HEAP32[$315 >> 2] = $26; //@line 7640
  $316 = $ReallocAsyncCtx2 + 52 | 0; //@line 7641
  HEAP32[$316 >> 2] = $28; //@line 7642
  $317 = $ReallocAsyncCtx2 + 56 | 0; //@line 7643
  HEAP32[$317 >> 2] = $30; //@line 7644
  $318 = $ReallocAsyncCtx2 + 60 | 0; //@line 7645
  HEAP32[$318 >> 2] = $32; //@line 7646
  $319 = $ReallocAsyncCtx2 + 64 | 0; //@line 7647
  HEAP32[$319 >> 2] = $34; //@line 7648
  $320 = $ReallocAsyncCtx2 + 68 | 0; //@line 7649
  HEAP32[$320 >> 2] = $36; //@line 7650
  $321 = $ReallocAsyncCtx2 + 72 | 0; //@line 7651
  HEAP32[$321 >> 2] = $38; //@line 7652
  $322 = $ReallocAsyncCtx2 + 76 | 0; //@line 7653
  HEAP32[$322 >> 2] = $40; //@line 7654
  $323 = $ReallocAsyncCtx2 + 80 | 0; //@line 7655
  HEAP32[$323 >> 2] = $42; //@line 7656
  $324 = $ReallocAsyncCtx2 + 84 | 0; //@line 7657
  HEAP32[$324 >> 2] = $44; //@line 7658
  $325 = $ReallocAsyncCtx2 + 88 | 0; //@line 7659
  HEAP32[$325 >> 2] = $46; //@line 7660
  $326 = $ReallocAsyncCtx2 + 92 | 0; //@line 7661
  HEAP32[$326 >> 2] = $48; //@line 7662
  $327 = $ReallocAsyncCtx2 + 96 | 0; //@line 7663
  HEAP32[$327 >> 2] = $50; //@line 7664
  $328 = $ReallocAsyncCtx2 + 100 | 0; //@line 7665
  HEAP32[$328 >> 2] = $52; //@line 7666
  $329 = $ReallocAsyncCtx2 + 104 | 0; //@line 7667
  HEAP32[$329 >> 2] = $54; //@line 7668
  $330 = $ReallocAsyncCtx2 + 108 | 0; //@line 7669
  HEAP32[$330 >> 2] = $56; //@line 7670
  $331 = $ReallocAsyncCtx2 + 112 | 0; //@line 7671
  HEAP32[$331 >> 2] = $58; //@line 7672
  $332 = $ReallocAsyncCtx2 + 116 | 0; //@line 7673
  HEAP32[$332 >> 2] = $60; //@line 7674
  $333 = $ReallocAsyncCtx2 + 120 | 0; //@line 7675
  HEAP32[$333 >> 2] = $62; //@line 7676
  $334 = $ReallocAsyncCtx2 + 124 | 0; //@line 7677
  HEAP32[$334 >> 2] = $64; //@line 7678
  $335 = $ReallocAsyncCtx2 + 128 | 0; //@line 7679
  HEAP32[$335 >> 2] = $66; //@line 7680
  $336 = $ReallocAsyncCtx2 + 132 | 0; //@line 7681
  HEAP32[$336 >> 2] = $68; //@line 7682
  $337 = $ReallocAsyncCtx2 + 136 | 0; //@line 7683
  HEAP32[$337 >> 2] = $70; //@line 7684
  $338 = $ReallocAsyncCtx2 + 140 | 0; //@line 7685
  HEAP32[$338 >> 2] = $72; //@line 7686
  $339 = $ReallocAsyncCtx2 + 144 | 0; //@line 7687
  HEAP32[$339 >> 2] = $74; //@line 7688
  $340 = $ReallocAsyncCtx2 + 148 | 0; //@line 7689
  HEAP8[$340 >> 0] = $292; //@line 7690
  $341 = $ReallocAsyncCtx2 + 152 | 0; //@line 7691
  HEAP32[$341 >> 2] = $76; //@line 7692
  $342 = $ReallocAsyncCtx2 + 156 | 0; //@line 7693
  HEAP32[$342 >> 2] = $78; //@line 7694
  $343 = $ReallocAsyncCtx2 + 160 | 0; //@line 7695
  HEAP32[$343 >> 2] = $80; //@line 7696
  $344 = $ReallocAsyncCtx2 + 164 | 0; //@line 7697
  HEAP32[$344 >> 2] = $82; //@line 7698
  $345 = $ReallocAsyncCtx2 + 168 | 0; //@line 7699
  HEAP32[$345 >> 2] = $84; //@line 7700
  $346 = $ReallocAsyncCtx2 + 172 | 0; //@line 7701
  HEAP32[$346 >> 2] = $86; //@line 7702
  $347 = $ReallocAsyncCtx2 + 176 | 0; //@line 7703
  HEAP32[$347 >> 2] = $88; //@line 7704
  $348 = $ReallocAsyncCtx2 + 180 | 0; //@line 7705
  HEAP32[$348 >> 2] = $92; //@line 7706
  $349 = $ReallocAsyncCtx2 + 184 | 0; //@line 7707
  HEAP32[$349 >> 2] = $94; //@line 7708
  $350 = $ReallocAsyncCtx2 + 188 | 0; //@line 7709
  HEAP32[$350 >> 2] = $96; //@line 7710
  $351 = $ReallocAsyncCtx2 + 192 | 0; //@line 7711
  HEAP32[$351 >> 2] = $98; //@line 7712
  $352 = $ReallocAsyncCtx2 + 196 | 0; //@line 7713
  HEAP32[$352 >> 2] = $100; //@line 7714
  $353 = $ReallocAsyncCtx2 + 200 | 0; //@line 7715
  HEAP32[$353 >> 2] = $102; //@line 7716
  $354 = $ReallocAsyncCtx2 + 204 | 0; //@line 7717
  HEAP32[$354 >> 2] = $104; //@line 7718
  $355 = $ReallocAsyncCtx2 + 208 | 0; //@line 7719
  HEAP32[$355 >> 2] = $106; //@line 7720
  $356 = $ReallocAsyncCtx2 + 212 | 0; //@line 7721
  HEAP32[$356 >> 2] = $108; //@line 7722
  $357 = $ReallocAsyncCtx2 + 216 | 0; //@line 7723
  HEAP32[$357 >> 2] = $110; //@line 7724
  $358 = $ReallocAsyncCtx2 + 220 | 0; //@line 7725
  HEAP32[$358 >> 2] = $112; //@line 7726
  $359 = $ReallocAsyncCtx2 + 224 | 0; //@line 7727
  HEAP32[$359 >> 2] = $114; //@line 7728
  $360 = $ReallocAsyncCtx2 + 228 | 0; //@line 7729
  HEAP8[$360 >> 0] = $116; //@line 7730
  $361 = $ReallocAsyncCtx2 + 232 | 0; //@line 7731
  HEAP32[$361 >> 2] = $118; //@line 7732
  $362 = $ReallocAsyncCtx2 + 236 | 0; //@line 7733
  HEAP32[$362 >> 2] = $120; //@line 7734
  $363 = $ReallocAsyncCtx2 + 240 | 0; //@line 7735
  HEAP32[$363 >> 2] = $122; //@line 7736
  $364 = $ReallocAsyncCtx2 + 244 | 0; //@line 7737
  HEAP32[$364 >> 2] = $124; //@line 7738
  $365 = $ReallocAsyncCtx2 + 248 | 0; //@line 7739
  HEAP32[$365 >> 2] = $126; //@line 7740
  $366 = $ReallocAsyncCtx2 + 252 | 0; //@line 7741
  HEAP32[$366 >> 2] = $128; //@line 7742
  $367 = $ReallocAsyncCtx2 + 256 | 0; //@line 7743
  HEAP8[$367 >> 0] = $130; //@line 7744
  $368 = $ReallocAsyncCtx2 + 257 | 0; //@line 7745
  HEAP8[$368 >> 0] = $132; //@line 7746
  $369 = $ReallocAsyncCtx2 + 260 | 0; //@line 7747
  HEAP32[$369 >> 2] = $134; //@line 7748
  $370 = $ReallocAsyncCtx2 + 264 | 0; //@line 7749
  HEAP32[$370 >> 2] = $136; //@line 7750
  sp = STACKTOP; //@line 7751
  return;
 } else if ((label | 0) == 22) {
  HEAP8[$16 >> 0] = HEAP8[$128 + ($139 & 255) >> 0] | 0; //@line 7759
  HEAP32[$4 >> 2] = $48; //@line 7760
  HEAP32[$8 >> 2] = (HEAPU8[$128 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$128 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$128 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 7781
  HEAP32[$18 >> 2] = 0; //@line 7782
  $411 = $$0$be + 6 << 24 >> 24; //@line 7783
  HEAP8[$32 >> 0] = HEAP8[$128 + ($$0$be + 5 & 255) >> 0] | 0; //@line 7787
  $417 = HEAP32[(HEAP32[$36 >> 2] | 0) + 8 >> 2] | 0; //@line 7790
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(268) | 0; //@line 7791
  $418 = FUNCTION_TABLE_iii[$417 & 31]($124, $98) | 0; //@line 7792
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 578; //@line 7795
   $419 = $ReallocAsyncCtx3 + 4 | 0; //@line 7796
   HEAP32[$419 >> 2] = $2; //@line 7797
   $420 = $ReallocAsyncCtx3 + 8 | 0; //@line 7798
   HEAP32[$420 >> 2] = $4; //@line 7799
   $421 = $ReallocAsyncCtx3 + 12 | 0; //@line 7800
   HEAP32[$421 >> 2] = $6; //@line 7801
   $422 = $ReallocAsyncCtx3 + 16 | 0; //@line 7802
   HEAP32[$422 >> 2] = $8; //@line 7803
   $423 = $ReallocAsyncCtx3 + 20 | 0; //@line 7804
   HEAP32[$423 >> 2] = $10; //@line 7805
   $424 = $ReallocAsyncCtx3 + 24 | 0; //@line 7806
   HEAP32[$424 >> 2] = $16; //@line 7807
   $425 = $ReallocAsyncCtx3 + 28 | 0; //@line 7808
   HEAP32[$425 >> 2] = $14; //@line 7809
   $426 = $ReallocAsyncCtx3 + 32 | 0; //@line 7810
   HEAP32[$426 >> 2] = $18; //@line 7811
   $427 = $ReallocAsyncCtx3 + 36 | 0; //@line 7812
   HEAP32[$427 >> 2] = $20; //@line 7813
   $428 = $ReallocAsyncCtx3 + 40 | 0; //@line 7814
   HEAP32[$428 >> 2] = $22; //@line 7815
   $429 = $ReallocAsyncCtx3 + 44 | 0; //@line 7816
   HEAP32[$429 >> 2] = $24; //@line 7817
   $430 = $ReallocAsyncCtx3 + 48 | 0; //@line 7818
   HEAP32[$430 >> 2] = $26; //@line 7819
   $431 = $ReallocAsyncCtx3 + 52 | 0; //@line 7820
   HEAP32[$431 >> 2] = $28; //@line 7821
   $432 = $ReallocAsyncCtx3 + 56 | 0; //@line 7822
   HEAP32[$432 >> 2] = $30; //@line 7823
   $433 = $ReallocAsyncCtx3 + 60 | 0; //@line 7824
   HEAP32[$433 >> 2] = $32; //@line 7825
   $434 = $ReallocAsyncCtx3 + 64 | 0; //@line 7826
   HEAP32[$434 >> 2] = $34; //@line 7827
   $435 = $ReallocAsyncCtx3 + 68 | 0; //@line 7828
   HEAP32[$435 >> 2] = $36; //@line 7829
   $436 = $ReallocAsyncCtx3 + 72 | 0; //@line 7830
   HEAP32[$436 >> 2] = $38; //@line 7831
   $437 = $ReallocAsyncCtx3 + 76 | 0; //@line 7832
   HEAP32[$437 >> 2] = $40; //@line 7833
   $438 = $ReallocAsyncCtx3 + 80 | 0; //@line 7834
   HEAP32[$438 >> 2] = $42; //@line 7835
   $439 = $ReallocAsyncCtx3 + 84 | 0; //@line 7836
   HEAP32[$439 >> 2] = $44; //@line 7837
   $440 = $ReallocAsyncCtx3 + 88 | 0; //@line 7838
   HEAP32[$440 >> 2] = $46; //@line 7839
   $441 = $ReallocAsyncCtx3 + 92 | 0; //@line 7840
   HEAP32[$441 >> 2] = $48; //@line 7841
   $442 = $ReallocAsyncCtx3 + 96 | 0; //@line 7842
   HEAP32[$442 >> 2] = $50; //@line 7843
   $443 = $ReallocAsyncCtx3 + 100 | 0; //@line 7844
   HEAP32[$443 >> 2] = $52; //@line 7845
   $444 = $ReallocAsyncCtx3 + 104 | 0; //@line 7846
   HEAP32[$444 >> 2] = $54; //@line 7847
   $445 = $ReallocAsyncCtx3 + 108 | 0; //@line 7848
   HEAP32[$445 >> 2] = $56; //@line 7849
   $446 = $ReallocAsyncCtx3 + 112 | 0; //@line 7850
   HEAP32[$446 >> 2] = $58; //@line 7851
   $447 = $ReallocAsyncCtx3 + 116 | 0; //@line 7852
   HEAP32[$447 >> 2] = $60; //@line 7853
   $448 = $ReallocAsyncCtx3 + 120 | 0; //@line 7854
   HEAP8[$448 >> 0] = $411; //@line 7855
   $449 = $ReallocAsyncCtx3 + 124 | 0; //@line 7856
   HEAP32[$449 >> 2] = $64; //@line 7857
   $450 = $ReallocAsyncCtx3 + 128 | 0; //@line 7858
   HEAP32[$450 >> 2] = $62; //@line 7859
   $451 = $ReallocAsyncCtx3 + 132 | 0; //@line 7860
   HEAP32[$451 >> 2] = $66; //@line 7861
   $452 = $ReallocAsyncCtx3 + 136 | 0; //@line 7862
   HEAP32[$452 >> 2] = $70; //@line 7863
   $453 = $ReallocAsyncCtx3 + 140 | 0; //@line 7864
   HEAP32[$453 >> 2] = $68; //@line 7865
   $454 = $ReallocAsyncCtx3 + 144 | 0; //@line 7866
   HEAP32[$454 >> 2] = $72; //@line 7867
   $455 = $ReallocAsyncCtx3 + 148 | 0; //@line 7868
   HEAP32[$455 >> 2] = $74; //@line 7869
   $456 = $ReallocAsyncCtx3 + 152 | 0; //@line 7870
   HEAP32[$456 >> 2] = $76; //@line 7871
   $457 = $ReallocAsyncCtx3 + 156 | 0; //@line 7872
   HEAP32[$457 >> 2] = $78; //@line 7873
   $458 = $ReallocAsyncCtx3 + 160 | 0; //@line 7874
   HEAP32[$458 >> 2] = $80; //@line 7875
   $459 = $ReallocAsyncCtx3 + 164 | 0; //@line 7876
   HEAP32[$459 >> 2] = $82; //@line 7877
   $460 = $ReallocAsyncCtx3 + 168 | 0; //@line 7878
   HEAP32[$460 >> 2] = $84; //@line 7879
   $461 = $ReallocAsyncCtx3 + 172 | 0; //@line 7880
   HEAP32[$461 >> 2] = $86; //@line 7881
   $462 = $ReallocAsyncCtx3 + 176 | 0; //@line 7882
   HEAP32[$462 >> 2] = $88; //@line 7883
   $463 = $ReallocAsyncCtx3 + 180 | 0; //@line 7884
   HEAP32[$463 >> 2] = $92; //@line 7885
   $464 = $ReallocAsyncCtx3 + 184 | 0; //@line 7886
   HEAP32[$464 >> 2] = $94; //@line 7887
   $465 = $ReallocAsyncCtx3 + 188 | 0; //@line 7888
   HEAP32[$465 >> 2] = $96; //@line 7889
   $466 = $ReallocAsyncCtx3 + 192 | 0; //@line 7890
   HEAP32[$466 >> 2] = $98; //@line 7891
   $467 = $ReallocAsyncCtx3 + 196 | 0; //@line 7892
   HEAP32[$467 >> 2] = $100; //@line 7893
   $468 = $ReallocAsyncCtx3 + 200 | 0; //@line 7894
   HEAP32[$468 >> 2] = $102; //@line 7895
   $469 = $ReallocAsyncCtx3 + 204 | 0; //@line 7896
   HEAP32[$469 >> 2] = $104; //@line 7897
   $470 = $ReallocAsyncCtx3 + 208 | 0; //@line 7898
   HEAP32[$470 >> 2] = $106; //@line 7899
   $471 = $ReallocAsyncCtx3 + 212 | 0; //@line 7900
   HEAP32[$471 >> 2] = $108; //@line 7901
   $472 = $ReallocAsyncCtx3 + 216 | 0; //@line 7902
   HEAP32[$472 >> 2] = $110; //@line 7903
   $473 = $ReallocAsyncCtx3 + 220 | 0; //@line 7904
   HEAP32[$473 >> 2] = $112; //@line 7905
   $474 = $ReallocAsyncCtx3 + 224 | 0; //@line 7906
   HEAP32[$474 >> 2] = $114; //@line 7907
   $475 = $ReallocAsyncCtx3 + 228 | 0; //@line 7908
   HEAP8[$475 >> 0] = $116; //@line 7909
   $476 = $ReallocAsyncCtx3 + 232 | 0; //@line 7910
   HEAP32[$476 >> 2] = $118; //@line 7911
   $477 = $ReallocAsyncCtx3 + 236 | 0; //@line 7912
   HEAP32[$477 >> 2] = $120; //@line 7913
   $478 = $ReallocAsyncCtx3 + 240 | 0; //@line 7914
   HEAP32[$478 >> 2] = $122; //@line 7915
   $479 = $ReallocAsyncCtx3 + 244 | 0; //@line 7916
   HEAP32[$479 >> 2] = $124; //@line 7917
   $480 = $ReallocAsyncCtx3 + 248 | 0; //@line 7918
   HEAP32[$480 >> 2] = $126; //@line 7919
   $481 = $ReallocAsyncCtx3 + 252 | 0; //@line 7920
   HEAP32[$481 >> 2] = $128; //@line 7921
   $482 = $ReallocAsyncCtx3 + 256 | 0; //@line 7922
   HEAP8[$482 >> 0] = $130; //@line 7923
   $483 = $ReallocAsyncCtx3 + 257 | 0; //@line 7924
   HEAP8[$483 >> 0] = $132; //@line 7925
   $484 = $ReallocAsyncCtx3 + 260 | 0; //@line 7926
   HEAP32[$484 >> 2] = $134; //@line 7927
   $485 = $ReallocAsyncCtx3 + 264 | 0; //@line 7928
   HEAP32[$485 >> 2] = $136; //@line 7929
   sp = STACKTOP; //@line 7930
   return;
  }
  HEAP8[___async_retval >> 0] = $418; //@line 7934
  ___async_unwind = 0; //@line 7935
  HEAP32[$ReallocAsyncCtx3 >> 2] = 578; //@line 7936
  $419 = $ReallocAsyncCtx3 + 4 | 0; //@line 7937
  HEAP32[$419 >> 2] = $2; //@line 7938
  $420 = $ReallocAsyncCtx3 + 8 | 0; //@line 7939
  HEAP32[$420 >> 2] = $4; //@line 7940
  $421 = $ReallocAsyncCtx3 + 12 | 0; //@line 7941
  HEAP32[$421 >> 2] = $6; //@line 7942
  $422 = $ReallocAsyncCtx3 + 16 | 0; //@line 7943
  HEAP32[$422 >> 2] = $8; //@line 7944
  $423 = $ReallocAsyncCtx3 + 20 | 0; //@line 7945
  HEAP32[$423 >> 2] = $10; //@line 7946
  $424 = $ReallocAsyncCtx3 + 24 | 0; //@line 7947
  HEAP32[$424 >> 2] = $16; //@line 7948
  $425 = $ReallocAsyncCtx3 + 28 | 0; //@line 7949
  HEAP32[$425 >> 2] = $14; //@line 7950
  $426 = $ReallocAsyncCtx3 + 32 | 0; //@line 7951
  HEAP32[$426 >> 2] = $18; //@line 7952
  $427 = $ReallocAsyncCtx3 + 36 | 0; //@line 7953
  HEAP32[$427 >> 2] = $20; //@line 7954
  $428 = $ReallocAsyncCtx3 + 40 | 0; //@line 7955
  HEAP32[$428 >> 2] = $22; //@line 7956
  $429 = $ReallocAsyncCtx3 + 44 | 0; //@line 7957
  HEAP32[$429 >> 2] = $24; //@line 7958
  $430 = $ReallocAsyncCtx3 + 48 | 0; //@line 7959
  HEAP32[$430 >> 2] = $26; //@line 7960
  $431 = $ReallocAsyncCtx3 + 52 | 0; //@line 7961
  HEAP32[$431 >> 2] = $28; //@line 7962
  $432 = $ReallocAsyncCtx3 + 56 | 0; //@line 7963
  HEAP32[$432 >> 2] = $30; //@line 7964
  $433 = $ReallocAsyncCtx3 + 60 | 0; //@line 7965
  HEAP32[$433 >> 2] = $32; //@line 7966
  $434 = $ReallocAsyncCtx3 + 64 | 0; //@line 7967
  HEAP32[$434 >> 2] = $34; //@line 7968
  $435 = $ReallocAsyncCtx3 + 68 | 0; //@line 7969
  HEAP32[$435 >> 2] = $36; //@line 7970
  $436 = $ReallocAsyncCtx3 + 72 | 0; //@line 7971
  HEAP32[$436 >> 2] = $38; //@line 7972
  $437 = $ReallocAsyncCtx3 + 76 | 0; //@line 7973
  HEAP32[$437 >> 2] = $40; //@line 7974
  $438 = $ReallocAsyncCtx3 + 80 | 0; //@line 7975
  HEAP32[$438 >> 2] = $42; //@line 7976
  $439 = $ReallocAsyncCtx3 + 84 | 0; //@line 7977
  HEAP32[$439 >> 2] = $44; //@line 7978
  $440 = $ReallocAsyncCtx3 + 88 | 0; //@line 7979
  HEAP32[$440 >> 2] = $46; //@line 7980
  $441 = $ReallocAsyncCtx3 + 92 | 0; //@line 7981
  HEAP32[$441 >> 2] = $48; //@line 7982
  $442 = $ReallocAsyncCtx3 + 96 | 0; //@line 7983
  HEAP32[$442 >> 2] = $50; //@line 7984
  $443 = $ReallocAsyncCtx3 + 100 | 0; //@line 7985
  HEAP32[$443 >> 2] = $52; //@line 7986
  $444 = $ReallocAsyncCtx3 + 104 | 0; //@line 7987
  HEAP32[$444 >> 2] = $54; //@line 7988
  $445 = $ReallocAsyncCtx3 + 108 | 0; //@line 7989
  HEAP32[$445 >> 2] = $56; //@line 7990
  $446 = $ReallocAsyncCtx3 + 112 | 0; //@line 7991
  HEAP32[$446 >> 2] = $58; //@line 7992
  $447 = $ReallocAsyncCtx3 + 116 | 0; //@line 7993
  HEAP32[$447 >> 2] = $60; //@line 7994
  $448 = $ReallocAsyncCtx3 + 120 | 0; //@line 7995
  HEAP8[$448 >> 0] = $411; //@line 7996
  $449 = $ReallocAsyncCtx3 + 124 | 0; //@line 7997
  HEAP32[$449 >> 2] = $64; //@line 7998
  $450 = $ReallocAsyncCtx3 + 128 | 0; //@line 7999
  HEAP32[$450 >> 2] = $62; //@line 8000
  $451 = $ReallocAsyncCtx3 + 132 | 0; //@line 8001
  HEAP32[$451 >> 2] = $66; //@line 8002
  $452 = $ReallocAsyncCtx3 + 136 | 0; //@line 8003
  HEAP32[$452 >> 2] = $70; //@line 8004
  $453 = $ReallocAsyncCtx3 + 140 | 0; //@line 8005
  HEAP32[$453 >> 2] = $68; //@line 8006
  $454 = $ReallocAsyncCtx3 + 144 | 0; //@line 8007
  HEAP32[$454 >> 2] = $72; //@line 8008
  $455 = $ReallocAsyncCtx3 + 148 | 0; //@line 8009
  HEAP32[$455 >> 2] = $74; //@line 8010
  $456 = $ReallocAsyncCtx3 + 152 | 0; //@line 8011
  HEAP32[$456 >> 2] = $76; //@line 8012
  $457 = $ReallocAsyncCtx3 + 156 | 0; //@line 8013
  HEAP32[$457 >> 2] = $78; //@line 8014
  $458 = $ReallocAsyncCtx3 + 160 | 0; //@line 8015
  HEAP32[$458 >> 2] = $80; //@line 8016
  $459 = $ReallocAsyncCtx3 + 164 | 0; //@line 8017
  HEAP32[$459 >> 2] = $82; //@line 8018
  $460 = $ReallocAsyncCtx3 + 168 | 0; //@line 8019
  HEAP32[$460 >> 2] = $84; //@line 8020
  $461 = $ReallocAsyncCtx3 + 172 | 0; //@line 8021
  HEAP32[$461 >> 2] = $86; //@line 8022
  $462 = $ReallocAsyncCtx3 + 176 | 0; //@line 8023
  HEAP32[$462 >> 2] = $88; //@line 8024
  $463 = $ReallocAsyncCtx3 + 180 | 0; //@line 8025
  HEAP32[$463 >> 2] = $92; //@line 8026
  $464 = $ReallocAsyncCtx3 + 184 | 0; //@line 8027
  HEAP32[$464 >> 2] = $94; //@line 8028
  $465 = $ReallocAsyncCtx3 + 188 | 0; //@line 8029
  HEAP32[$465 >> 2] = $96; //@line 8030
  $466 = $ReallocAsyncCtx3 + 192 | 0; //@line 8031
  HEAP32[$466 >> 2] = $98; //@line 8032
  $467 = $ReallocAsyncCtx3 + 196 | 0; //@line 8033
  HEAP32[$467 >> 2] = $100; //@line 8034
  $468 = $ReallocAsyncCtx3 + 200 | 0; //@line 8035
  HEAP32[$468 >> 2] = $102; //@line 8036
  $469 = $ReallocAsyncCtx3 + 204 | 0; //@line 8037
  HEAP32[$469 >> 2] = $104; //@line 8038
  $470 = $ReallocAsyncCtx3 + 208 | 0; //@line 8039
  HEAP32[$470 >> 2] = $106; //@line 8040
  $471 = $ReallocAsyncCtx3 + 212 | 0; //@line 8041
  HEAP32[$471 >> 2] = $108; //@line 8042
  $472 = $ReallocAsyncCtx3 + 216 | 0; //@line 8043
  HEAP32[$472 >> 2] = $110; //@line 8044
  $473 = $ReallocAsyncCtx3 + 220 | 0; //@line 8045
  HEAP32[$473 >> 2] = $112; //@line 8046
  $474 = $ReallocAsyncCtx3 + 224 | 0; //@line 8047
  HEAP32[$474 >> 2] = $114; //@line 8048
  $475 = $ReallocAsyncCtx3 + 228 | 0; //@line 8049
  HEAP8[$475 >> 0] = $116; //@line 8050
  $476 = $ReallocAsyncCtx3 + 232 | 0; //@line 8051
  HEAP32[$476 >> 2] = $118; //@line 8052
  $477 = $ReallocAsyncCtx3 + 236 | 0; //@line 8053
  HEAP32[$477 >> 2] = $120; //@line 8054
  $478 = $ReallocAsyncCtx3 + 240 | 0; //@line 8055
  HEAP32[$478 >> 2] = $122; //@line 8056
  $479 = $ReallocAsyncCtx3 + 244 | 0; //@line 8057
  HEAP32[$479 >> 2] = $124; //@line 8058
  $480 = $ReallocAsyncCtx3 + 248 | 0; //@line 8059
  HEAP32[$480 >> 2] = $126; //@line 8060
  $481 = $ReallocAsyncCtx3 + 252 | 0; //@line 8061
  HEAP32[$481 >> 2] = $128; //@line 8062
  $482 = $ReallocAsyncCtx3 + 256 | 0; //@line 8063
  HEAP8[$482 >> 0] = $130; //@line 8064
  $483 = $ReallocAsyncCtx3 + 257 | 0; //@line 8065
  HEAP8[$483 >> 0] = $132; //@line 8066
  $484 = $ReallocAsyncCtx3 + 260 | 0; //@line 8067
  HEAP32[$484 >> 2] = $134; //@line 8068
  $485 = $ReallocAsyncCtx3 + 264 | 0; //@line 8069
  HEAP32[$485 >> 2] = $136; //@line 8070
  sp = STACKTOP; //@line 8071
  return;
 } else if ((label | 0) == 27) {
  $504 = $$0$be + 2 << 24 >> 24; //@line 8075
  $507 = HEAP8[$128 + ($139 & 255) >> 0] | 0; //@line 8078
  HEAP8[$56 >> 0] = 0; //@line 8079
  $508 = $507 & 255; //@line 8080
  HEAP8[$72 >> 0] = $508 >>> 5 & 1; //@line 8084
  if ($508 & 16 | 0) {
   HEAP8[$56 >> 0] = 1; //@line 8088
  }
  HEAP8[$80 >> 0] = $508 & 15; //@line 8092
  $517 = HEAP32[(HEAP32[$84 >> 2] | 0) + 44 >> 2] | 0; //@line 8095
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(272) | 0; //@line 8096
  $518 = FUNCTION_TABLE_iii[$517 & 31]($124, $58) | 0; //@line 8097
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 579; //@line 8100
   $519 = $ReallocAsyncCtx4 + 4 | 0; //@line 8101
   HEAP32[$519 >> 2] = $2; //@line 8102
   $520 = $ReallocAsyncCtx4 + 8 | 0; //@line 8103
   HEAP32[$520 >> 2] = $4; //@line 8104
   $521 = $ReallocAsyncCtx4 + 12 | 0; //@line 8105
   HEAP32[$521 >> 2] = $6; //@line 8106
   $522 = $ReallocAsyncCtx4 + 16 | 0; //@line 8107
   HEAP32[$522 >> 2] = $8; //@line 8108
   $523 = $ReallocAsyncCtx4 + 20 | 0; //@line 8109
   HEAP32[$523 >> 2] = $10; //@line 8110
   $524 = $ReallocAsyncCtx4 + 24 | 0; //@line 8111
   HEAP32[$524 >> 2] = $$096$be; //@line 8112
   $525 = $ReallocAsyncCtx4 + 28 | 0; //@line 8113
   HEAP32[$525 >> 2] = $14; //@line 8114
   $526 = $ReallocAsyncCtx4 + 32 | 0; //@line 8115
   HEAP32[$526 >> 2] = $16; //@line 8116
   $527 = $ReallocAsyncCtx4 + 36 | 0; //@line 8117
   HEAP32[$527 >> 2] = $18; //@line 8118
   $528 = $ReallocAsyncCtx4 + 40 | 0; //@line 8119
   HEAP32[$528 >> 2] = $20; //@line 8120
   $529 = $ReallocAsyncCtx4 + 44 | 0; //@line 8121
   HEAP32[$529 >> 2] = $22; //@line 8122
   $530 = $ReallocAsyncCtx4 + 48 | 0; //@line 8123
   HEAP32[$530 >> 2] = $24; //@line 8124
   $531 = $ReallocAsyncCtx4 + 52 | 0; //@line 8125
   HEAP32[$531 >> 2] = $26; //@line 8126
   $532 = $ReallocAsyncCtx4 + 56 | 0; //@line 8127
   HEAP32[$532 >> 2] = $28; //@line 8128
   $533 = $ReallocAsyncCtx4 + 60 | 0; //@line 8129
   HEAP32[$533 >> 2] = $30; //@line 8130
   $534 = $ReallocAsyncCtx4 + 64 | 0; //@line 8131
   HEAP8[$534 >> 0] = $504; //@line 8132
   $535 = $ReallocAsyncCtx4 + 68 | 0; //@line 8133
   HEAP32[$535 >> 2] = $32; //@line 8134
   $536 = $ReallocAsyncCtx4 + 72 | 0; //@line 8135
   HEAP32[$536 >> 2] = $34; //@line 8136
   $537 = $ReallocAsyncCtx4 + 76 | 0; //@line 8137
   HEAP32[$537 >> 2] = $36; //@line 8138
   $538 = $ReallocAsyncCtx4 + 80 | 0; //@line 8139
   HEAP32[$538 >> 2] = $38; //@line 8140
   $539 = $ReallocAsyncCtx4 + 84 | 0; //@line 8141
   HEAP32[$539 >> 2] = $40; //@line 8142
   $540 = $ReallocAsyncCtx4 + 88 | 0; //@line 8143
   HEAP32[$540 >> 2] = $42; //@line 8144
   $541 = $ReallocAsyncCtx4 + 92 | 0; //@line 8145
   HEAP32[$541 >> 2] = $44; //@line 8146
   $542 = $ReallocAsyncCtx4 + 96 | 0; //@line 8147
   HEAP32[$542 >> 2] = $46; //@line 8148
   $543 = $ReallocAsyncCtx4 + 100 | 0; //@line 8149
   HEAP32[$543 >> 2] = $48; //@line 8150
   $544 = $ReallocAsyncCtx4 + 104 | 0; //@line 8151
   HEAP32[$544 >> 2] = $50; //@line 8152
   $545 = $ReallocAsyncCtx4 + 108 | 0; //@line 8153
   HEAP32[$545 >> 2] = $52; //@line 8154
   $546 = $ReallocAsyncCtx4 + 112 | 0; //@line 8155
   HEAP32[$546 >> 2] = $54; //@line 8156
   $547 = $ReallocAsyncCtx4 + 116 | 0; //@line 8157
   HEAP32[$547 >> 2] = $56; //@line 8158
   $548 = $ReallocAsyncCtx4 + 120 | 0; //@line 8159
   HEAP32[$548 >> 2] = $58; //@line 8160
   $549 = $ReallocAsyncCtx4 + 124 | 0; //@line 8161
   HEAP32[$549 >> 2] = $60; //@line 8162
   $550 = $ReallocAsyncCtx4 + 128 | 0; //@line 8163
   HEAP32[$550 >> 2] = $62; //@line 8164
   $551 = $ReallocAsyncCtx4 + 132 | 0; //@line 8165
   HEAP32[$551 >> 2] = $64; //@line 8166
   $552 = $ReallocAsyncCtx4 + 136 | 0; //@line 8167
   HEAP32[$552 >> 2] = $66; //@line 8168
   $553 = $ReallocAsyncCtx4 + 140 | 0; //@line 8169
   HEAP32[$553 >> 2] = $68; //@line 8170
   $554 = $ReallocAsyncCtx4 + 144 | 0; //@line 8171
   HEAP32[$554 >> 2] = $70; //@line 8172
   $555 = $ReallocAsyncCtx4 + 148 | 0; //@line 8173
   HEAP32[$555 >> 2] = $72; //@line 8174
   $556 = $ReallocAsyncCtx4 + 152 | 0; //@line 8175
   HEAP32[$556 >> 2] = $74; //@line 8176
   $557 = $ReallocAsyncCtx4 + 156 | 0; //@line 8177
   HEAP32[$557 >> 2] = $76; //@line 8178
   $558 = $ReallocAsyncCtx4 + 160 | 0; //@line 8179
   HEAP32[$558 >> 2] = $78; //@line 8180
   $559 = $ReallocAsyncCtx4 + 164 | 0; //@line 8181
   HEAP32[$559 >> 2] = $80; //@line 8182
   $560 = $ReallocAsyncCtx4 + 168 | 0; //@line 8183
   HEAP32[$560 >> 2] = $82; //@line 8184
   $561 = $ReallocAsyncCtx4 + 172 | 0; //@line 8185
   HEAP32[$561 >> 2] = $84; //@line 8186
   $562 = $ReallocAsyncCtx4 + 176 | 0; //@line 8187
   HEAP32[$562 >> 2] = $86; //@line 8188
   $563 = $ReallocAsyncCtx4 + 180 | 0; //@line 8189
   HEAP32[$563 >> 2] = $88; //@line 8190
   $564 = $ReallocAsyncCtx4 + 184 | 0; //@line 8191
   HEAP32[$564 >> 2] = $92; //@line 8192
   $565 = $ReallocAsyncCtx4 + 188 | 0; //@line 8193
   HEAP32[$565 >> 2] = $94; //@line 8194
   $566 = $ReallocAsyncCtx4 + 192 | 0; //@line 8195
   HEAP32[$566 >> 2] = $96; //@line 8196
   $567 = $ReallocAsyncCtx4 + 196 | 0; //@line 8197
   HEAP32[$567 >> 2] = $98; //@line 8198
   $568 = $ReallocAsyncCtx4 + 200 | 0; //@line 8199
   HEAP32[$568 >> 2] = $100; //@line 8200
   $569 = $ReallocAsyncCtx4 + 204 | 0; //@line 8201
   HEAP32[$569 >> 2] = $102; //@line 8202
   $570 = $ReallocAsyncCtx4 + 208 | 0; //@line 8203
   HEAP32[$570 >> 2] = $104; //@line 8204
   $571 = $ReallocAsyncCtx4 + 212 | 0; //@line 8205
   HEAP32[$571 >> 2] = $106; //@line 8206
   $572 = $ReallocAsyncCtx4 + 216 | 0; //@line 8207
   HEAP32[$572 >> 2] = $108; //@line 8208
   $573 = $ReallocAsyncCtx4 + 220 | 0; //@line 8209
   HEAP32[$573 >> 2] = $110; //@line 8210
   $574 = $ReallocAsyncCtx4 + 224 | 0; //@line 8211
   HEAP32[$574 >> 2] = $112; //@line 8212
   $575 = $ReallocAsyncCtx4 + 228 | 0; //@line 8213
   HEAP32[$575 >> 2] = $114; //@line 8214
   $576 = $ReallocAsyncCtx4 + 232 | 0; //@line 8215
   HEAP8[$576 >> 0] = $116; //@line 8216
   $577 = $ReallocAsyncCtx4 + 236 | 0; //@line 8217
   HEAP32[$577 >> 2] = $118; //@line 8218
   $578 = $ReallocAsyncCtx4 + 240 | 0; //@line 8219
   HEAP32[$578 >> 2] = $120; //@line 8220
   $579 = $ReallocAsyncCtx4 + 244 | 0; //@line 8221
   HEAP32[$579 >> 2] = $122; //@line 8222
   $580 = $ReallocAsyncCtx4 + 248 | 0; //@line 8223
   HEAP32[$580 >> 2] = $124; //@line 8224
   $581 = $ReallocAsyncCtx4 + 252 | 0; //@line 8225
   HEAP32[$581 >> 2] = $126; //@line 8226
   $582 = $ReallocAsyncCtx4 + 256 | 0; //@line 8227
   HEAP32[$582 >> 2] = $128; //@line 8228
   $583 = $ReallocAsyncCtx4 + 260 | 0; //@line 8229
   HEAP8[$583 >> 0] = $130; //@line 8230
   $584 = $ReallocAsyncCtx4 + 261 | 0; //@line 8231
   HEAP8[$584 >> 0] = $132; //@line 8232
   $585 = $ReallocAsyncCtx4 + 264 | 0; //@line 8233
   HEAP32[$585 >> 2] = $134; //@line 8234
   $586 = $ReallocAsyncCtx4 + 268 | 0; //@line 8235
   HEAP32[$586 >> 2] = $136; //@line 8236
   sp = STACKTOP; //@line 8237
   return;
  }
  HEAP8[___async_retval >> 0] = $518 & 1; //@line 8242
  ___async_unwind = 0; //@line 8243
  HEAP32[$ReallocAsyncCtx4 >> 2] = 579; //@line 8244
  $519 = $ReallocAsyncCtx4 + 4 | 0; //@line 8245
  HEAP32[$519 >> 2] = $2; //@line 8246
  $520 = $ReallocAsyncCtx4 + 8 | 0; //@line 8247
  HEAP32[$520 >> 2] = $4; //@line 8248
  $521 = $ReallocAsyncCtx4 + 12 | 0; //@line 8249
  HEAP32[$521 >> 2] = $6; //@line 8250
  $522 = $ReallocAsyncCtx4 + 16 | 0; //@line 8251
  HEAP32[$522 >> 2] = $8; //@line 8252
  $523 = $ReallocAsyncCtx4 + 20 | 0; //@line 8253
  HEAP32[$523 >> 2] = $10; //@line 8254
  $524 = $ReallocAsyncCtx4 + 24 | 0; //@line 8255
  HEAP32[$524 >> 2] = $$096$be; //@line 8256
  $525 = $ReallocAsyncCtx4 + 28 | 0; //@line 8257
  HEAP32[$525 >> 2] = $14; //@line 8258
  $526 = $ReallocAsyncCtx4 + 32 | 0; //@line 8259
  HEAP32[$526 >> 2] = $16; //@line 8260
  $527 = $ReallocAsyncCtx4 + 36 | 0; //@line 8261
  HEAP32[$527 >> 2] = $18; //@line 8262
  $528 = $ReallocAsyncCtx4 + 40 | 0; //@line 8263
  HEAP32[$528 >> 2] = $20; //@line 8264
  $529 = $ReallocAsyncCtx4 + 44 | 0; //@line 8265
  HEAP32[$529 >> 2] = $22; //@line 8266
  $530 = $ReallocAsyncCtx4 + 48 | 0; //@line 8267
  HEAP32[$530 >> 2] = $24; //@line 8268
  $531 = $ReallocAsyncCtx4 + 52 | 0; //@line 8269
  HEAP32[$531 >> 2] = $26; //@line 8270
  $532 = $ReallocAsyncCtx4 + 56 | 0; //@line 8271
  HEAP32[$532 >> 2] = $28; //@line 8272
  $533 = $ReallocAsyncCtx4 + 60 | 0; //@line 8273
  HEAP32[$533 >> 2] = $30; //@line 8274
  $534 = $ReallocAsyncCtx4 + 64 | 0; //@line 8275
  HEAP8[$534 >> 0] = $504; //@line 8276
  $535 = $ReallocAsyncCtx4 + 68 | 0; //@line 8277
  HEAP32[$535 >> 2] = $32; //@line 8278
  $536 = $ReallocAsyncCtx4 + 72 | 0; //@line 8279
  HEAP32[$536 >> 2] = $34; //@line 8280
  $537 = $ReallocAsyncCtx4 + 76 | 0; //@line 8281
  HEAP32[$537 >> 2] = $36; //@line 8282
  $538 = $ReallocAsyncCtx4 + 80 | 0; //@line 8283
  HEAP32[$538 >> 2] = $38; //@line 8284
  $539 = $ReallocAsyncCtx4 + 84 | 0; //@line 8285
  HEAP32[$539 >> 2] = $40; //@line 8286
  $540 = $ReallocAsyncCtx4 + 88 | 0; //@line 8287
  HEAP32[$540 >> 2] = $42; //@line 8288
  $541 = $ReallocAsyncCtx4 + 92 | 0; //@line 8289
  HEAP32[$541 >> 2] = $44; //@line 8290
  $542 = $ReallocAsyncCtx4 + 96 | 0; //@line 8291
  HEAP32[$542 >> 2] = $46; //@line 8292
  $543 = $ReallocAsyncCtx4 + 100 | 0; //@line 8293
  HEAP32[$543 >> 2] = $48; //@line 8294
  $544 = $ReallocAsyncCtx4 + 104 | 0; //@line 8295
  HEAP32[$544 >> 2] = $50; //@line 8296
  $545 = $ReallocAsyncCtx4 + 108 | 0; //@line 8297
  HEAP32[$545 >> 2] = $52; //@line 8298
  $546 = $ReallocAsyncCtx4 + 112 | 0; //@line 8299
  HEAP32[$546 >> 2] = $54; //@line 8300
  $547 = $ReallocAsyncCtx4 + 116 | 0; //@line 8301
  HEAP32[$547 >> 2] = $56; //@line 8302
  $548 = $ReallocAsyncCtx4 + 120 | 0; //@line 8303
  HEAP32[$548 >> 2] = $58; //@line 8304
  $549 = $ReallocAsyncCtx4 + 124 | 0; //@line 8305
  HEAP32[$549 >> 2] = $60; //@line 8306
  $550 = $ReallocAsyncCtx4 + 128 | 0; //@line 8307
  HEAP32[$550 >> 2] = $62; //@line 8308
  $551 = $ReallocAsyncCtx4 + 132 | 0; //@line 8309
  HEAP32[$551 >> 2] = $64; //@line 8310
  $552 = $ReallocAsyncCtx4 + 136 | 0; //@line 8311
  HEAP32[$552 >> 2] = $66; //@line 8312
  $553 = $ReallocAsyncCtx4 + 140 | 0; //@line 8313
  HEAP32[$553 >> 2] = $68; //@line 8314
  $554 = $ReallocAsyncCtx4 + 144 | 0; //@line 8315
  HEAP32[$554 >> 2] = $70; //@line 8316
  $555 = $ReallocAsyncCtx4 + 148 | 0; //@line 8317
  HEAP32[$555 >> 2] = $72; //@line 8318
  $556 = $ReallocAsyncCtx4 + 152 | 0; //@line 8319
  HEAP32[$556 >> 2] = $74; //@line 8320
  $557 = $ReallocAsyncCtx4 + 156 | 0; //@line 8321
  HEAP32[$557 >> 2] = $76; //@line 8322
  $558 = $ReallocAsyncCtx4 + 160 | 0; //@line 8323
  HEAP32[$558 >> 2] = $78; //@line 8324
  $559 = $ReallocAsyncCtx4 + 164 | 0; //@line 8325
  HEAP32[$559 >> 2] = $80; //@line 8326
  $560 = $ReallocAsyncCtx4 + 168 | 0; //@line 8327
  HEAP32[$560 >> 2] = $82; //@line 8328
  $561 = $ReallocAsyncCtx4 + 172 | 0; //@line 8329
  HEAP32[$561 >> 2] = $84; //@line 8330
  $562 = $ReallocAsyncCtx4 + 176 | 0; //@line 8331
  HEAP32[$562 >> 2] = $86; //@line 8332
  $563 = $ReallocAsyncCtx4 + 180 | 0; //@line 8333
  HEAP32[$563 >> 2] = $88; //@line 8334
  $564 = $ReallocAsyncCtx4 + 184 | 0; //@line 8335
  HEAP32[$564 >> 2] = $92; //@line 8336
  $565 = $ReallocAsyncCtx4 + 188 | 0; //@line 8337
  HEAP32[$565 >> 2] = $94; //@line 8338
  $566 = $ReallocAsyncCtx4 + 192 | 0; //@line 8339
  HEAP32[$566 >> 2] = $96; //@line 8340
  $567 = $ReallocAsyncCtx4 + 196 | 0; //@line 8341
  HEAP32[$567 >> 2] = $98; //@line 8342
  $568 = $ReallocAsyncCtx4 + 200 | 0; //@line 8343
  HEAP32[$568 >> 2] = $100; //@line 8344
  $569 = $ReallocAsyncCtx4 + 204 | 0; //@line 8345
  HEAP32[$569 >> 2] = $102; //@line 8346
  $570 = $ReallocAsyncCtx4 + 208 | 0; //@line 8347
  HEAP32[$570 >> 2] = $104; //@line 8348
  $571 = $ReallocAsyncCtx4 + 212 | 0; //@line 8349
  HEAP32[$571 >> 2] = $106; //@line 8350
  $572 = $ReallocAsyncCtx4 + 216 | 0; //@line 8351
  HEAP32[$572 >> 2] = $108; //@line 8352
  $573 = $ReallocAsyncCtx4 + 220 | 0; //@line 8353
  HEAP32[$573 >> 2] = $110; //@line 8354
  $574 = $ReallocAsyncCtx4 + 224 | 0; //@line 8355
  HEAP32[$574 >> 2] = $112; //@line 8356
  $575 = $ReallocAsyncCtx4 + 228 | 0; //@line 8357
  HEAP32[$575 >> 2] = $114; //@line 8358
  $576 = $ReallocAsyncCtx4 + 232 | 0; //@line 8359
  HEAP8[$576 >> 0] = $116; //@line 8360
  $577 = $ReallocAsyncCtx4 + 236 | 0; //@line 8361
  HEAP32[$577 >> 2] = $118; //@line 8362
  $578 = $ReallocAsyncCtx4 + 240 | 0; //@line 8363
  HEAP32[$578 >> 2] = $120; //@line 8364
  $579 = $ReallocAsyncCtx4 + 244 | 0; //@line 8365
  HEAP32[$579 >> 2] = $122; //@line 8366
  $580 = $ReallocAsyncCtx4 + 248 | 0; //@line 8367
  HEAP32[$580 >> 2] = $124; //@line 8368
  $581 = $ReallocAsyncCtx4 + 252 | 0; //@line 8369
  HEAP32[$581 >> 2] = $126; //@line 8370
  $582 = $ReallocAsyncCtx4 + 256 | 0; //@line 8371
  HEAP32[$582 >> 2] = $128; //@line 8372
  $583 = $ReallocAsyncCtx4 + 260 | 0; //@line 8373
  HEAP8[$583 >> 0] = $130; //@line 8374
  $584 = $ReallocAsyncCtx4 + 261 | 0; //@line 8375
  HEAP8[$584 >> 0] = $132; //@line 8376
  $585 = $ReallocAsyncCtx4 + 264 | 0; //@line 8377
  HEAP32[$585 >> 2] = $134; //@line 8378
  $586 = $ReallocAsyncCtx4 + 268 | 0; //@line 8379
  HEAP32[$586 >> 2] = $136; //@line 8380
  sp = STACKTOP; //@line 8381
  return;
 } else if ((label | 0) == 32) {
  HEAP8[$112 >> 0] = HEAP8[$128 + ($139 & 255) >> 0] | 0; //@line 8389
  $604 = $$0$be + 5 << 24 >> 24; //@line 8402
  HEAP32[$122 >> 2] = (HEAPU8[$128 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$128 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$128 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 8410
  $614 = HEAP32[(HEAP32[$136 >> 2] | 0) + 48 >> 2] | 0; //@line 8413
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(268) | 0; //@line 8414
  $615 = FUNCTION_TABLE_iii[$614 & 31]($124, $60) | 0; //@line 8415
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 580; //@line 8418
   $616 = $ReallocAsyncCtx5 + 4 | 0; //@line 8419
   HEAP32[$616 >> 2] = $2; //@line 8420
   $617 = $ReallocAsyncCtx5 + 8 | 0; //@line 8421
   HEAP32[$617 >> 2] = $4; //@line 8422
   $618 = $ReallocAsyncCtx5 + 12 | 0; //@line 8423
   HEAP32[$618 >> 2] = $6; //@line 8424
   $619 = $ReallocAsyncCtx5 + 16 | 0; //@line 8425
   HEAP32[$619 >> 2] = $8; //@line 8426
   $620 = $ReallocAsyncCtx5 + 20 | 0; //@line 8427
   HEAP32[$620 >> 2] = $10; //@line 8428
   $621 = $ReallocAsyncCtx5 + 24 | 0; //@line 8429
   HEAP32[$621 >> 2] = $16; //@line 8430
   $622 = $ReallocAsyncCtx5 + 28 | 0; //@line 8431
   HEAP32[$622 >> 2] = $14; //@line 8432
   $623 = $ReallocAsyncCtx5 + 32 | 0; //@line 8433
   HEAP32[$623 >> 2] = $18; //@line 8434
   $624 = $ReallocAsyncCtx5 + 36 | 0; //@line 8435
   HEAP32[$624 >> 2] = $20; //@line 8436
   $625 = $ReallocAsyncCtx5 + 40 | 0; //@line 8437
   HEAP32[$625 >> 2] = $22; //@line 8438
   $626 = $ReallocAsyncCtx5 + 44 | 0; //@line 8439
   HEAP32[$626 >> 2] = $24; //@line 8440
   $627 = $ReallocAsyncCtx5 + 48 | 0; //@line 8441
   HEAP32[$627 >> 2] = $26; //@line 8442
   $628 = $ReallocAsyncCtx5 + 52 | 0; //@line 8443
   HEAP32[$628 >> 2] = $28; //@line 8444
   $629 = $ReallocAsyncCtx5 + 56 | 0; //@line 8445
   HEAP32[$629 >> 2] = $30; //@line 8446
   $630 = $ReallocAsyncCtx5 + 60 | 0; //@line 8447
   HEAP32[$630 >> 2] = $32; //@line 8448
   $631 = $ReallocAsyncCtx5 + 64 | 0; //@line 8449
   HEAP32[$631 >> 2] = $34; //@line 8450
   $632 = $ReallocAsyncCtx5 + 68 | 0; //@line 8451
   HEAP32[$632 >> 2] = $36; //@line 8452
   $633 = $ReallocAsyncCtx5 + 72 | 0; //@line 8453
   HEAP32[$633 >> 2] = $38; //@line 8454
   $634 = $ReallocAsyncCtx5 + 76 | 0; //@line 8455
   HEAP32[$634 >> 2] = $40; //@line 8456
   $635 = $ReallocAsyncCtx5 + 80 | 0; //@line 8457
   HEAP32[$635 >> 2] = $42; //@line 8458
   $636 = $ReallocAsyncCtx5 + 84 | 0; //@line 8459
   HEAP32[$636 >> 2] = $44; //@line 8460
   $637 = $ReallocAsyncCtx5 + 88 | 0; //@line 8461
   HEAP32[$637 >> 2] = $46; //@line 8462
   $638 = $ReallocAsyncCtx5 + 92 | 0; //@line 8463
   HEAP32[$638 >> 2] = $48; //@line 8464
   $639 = $ReallocAsyncCtx5 + 96 | 0; //@line 8465
   HEAP32[$639 >> 2] = $50; //@line 8466
   $640 = $ReallocAsyncCtx5 + 100 | 0; //@line 8467
   HEAP32[$640 >> 2] = $52; //@line 8468
   $641 = $ReallocAsyncCtx5 + 104 | 0; //@line 8469
   HEAP32[$641 >> 2] = $54; //@line 8470
   $642 = $ReallocAsyncCtx5 + 108 | 0; //@line 8471
   HEAP32[$642 >> 2] = $56; //@line 8472
   $643 = $ReallocAsyncCtx5 + 112 | 0; //@line 8473
   HEAP32[$643 >> 2] = $58; //@line 8474
   $644 = $ReallocAsyncCtx5 + 116 | 0; //@line 8475
   HEAP32[$644 >> 2] = $60; //@line 8476
   $645 = $ReallocAsyncCtx5 + 120 | 0; //@line 8477
   HEAP32[$645 >> 2] = $62; //@line 8478
   $646 = $ReallocAsyncCtx5 + 124 | 0; //@line 8479
   HEAP32[$646 >> 2] = $64; //@line 8480
   $647 = $ReallocAsyncCtx5 + 128 | 0; //@line 8481
   HEAP32[$647 >> 2] = $66; //@line 8482
   $648 = $ReallocAsyncCtx5 + 132 | 0; //@line 8483
   HEAP8[$648 >> 0] = $604; //@line 8484
   $649 = $ReallocAsyncCtx5 + 136 | 0; //@line 8485
   HEAP32[$649 >> 2] = $68; //@line 8486
   $650 = $ReallocAsyncCtx5 + 140 | 0; //@line 8487
   HEAP32[$650 >> 2] = $70; //@line 8488
   $651 = $ReallocAsyncCtx5 + 144 | 0; //@line 8489
   HEAP32[$651 >> 2] = $72; //@line 8490
   $652 = $ReallocAsyncCtx5 + 148 | 0; //@line 8491
   HEAP32[$652 >> 2] = $74; //@line 8492
   $653 = $ReallocAsyncCtx5 + 152 | 0; //@line 8493
   HEAP32[$653 >> 2] = $76; //@line 8494
   $654 = $ReallocAsyncCtx5 + 156 | 0; //@line 8495
   HEAP32[$654 >> 2] = $78; //@line 8496
   $655 = $ReallocAsyncCtx5 + 160 | 0; //@line 8497
   HEAP32[$655 >> 2] = $80; //@line 8498
   $656 = $ReallocAsyncCtx5 + 164 | 0; //@line 8499
   HEAP32[$656 >> 2] = $82; //@line 8500
   $657 = $ReallocAsyncCtx5 + 168 | 0; //@line 8501
   HEAP32[$657 >> 2] = $84; //@line 8502
   $658 = $ReallocAsyncCtx5 + 172 | 0; //@line 8503
   HEAP32[$658 >> 2] = $86; //@line 8504
   $659 = $ReallocAsyncCtx5 + 176 | 0; //@line 8505
   HEAP32[$659 >> 2] = $88; //@line 8506
   $660 = $ReallocAsyncCtx5 + 180 | 0; //@line 8507
   HEAP32[$660 >> 2] = $92; //@line 8508
   $661 = $ReallocAsyncCtx5 + 184 | 0; //@line 8509
   HEAP32[$661 >> 2] = $94; //@line 8510
   $662 = $ReallocAsyncCtx5 + 188 | 0; //@line 8511
   HEAP32[$662 >> 2] = $96; //@line 8512
   $663 = $ReallocAsyncCtx5 + 192 | 0; //@line 8513
   HEAP32[$663 >> 2] = $98; //@line 8514
   $664 = $ReallocAsyncCtx5 + 196 | 0; //@line 8515
   HEAP32[$664 >> 2] = $100; //@line 8516
   $665 = $ReallocAsyncCtx5 + 200 | 0; //@line 8517
   HEAP32[$665 >> 2] = $102; //@line 8518
   $666 = $ReallocAsyncCtx5 + 204 | 0; //@line 8519
   HEAP32[$666 >> 2] = $104; //@line 8520
   $667 = $ReallocAsyncCtx5 + 208 | 0; //@line 8521
   HEAP32[$667 >> 2] = $106; //@line 8522
   $668 = $ReallocAsyncCtx5 + 212 | 0; //@line 8523
   HEAP32[$668 >> 2] = $108; //@line 8524
   $669 = $ReallocAsyncCtx5 + 216 | 0; //@line 8525
   HEAP32[$669 >> 2] = $110; //@line 8526
   $670 = $ReallocAsyncCtx5 + 220 | 0; //@line 8527
   HEAP32[$670 >> 2] = $112; //@line 8528
   $671 = $ReallocAsyncCtx5 + 224 | 0; //@line 8529
   HEAP32[$671 >> 2] = $114; //@line 8530
   $672 = $ReallocAsyncCtx5 + 228 | 0; //@line 8531
   HEAP8[$672 >> 0] = $116; //@line 8532
   $673 = $ReallocAsyncCtx5 + 232 | 0; //@line 8533
   HEAP32[$673 >> 2] = $118; //@line 8534
   $674 = $ReallocAsyncCtx5 + 236 | 0; //@line 8535
   HEAP32[$674 >> 2] = $120; //@line 8536
   $675 = $ReallocAsyncCtx5 + 240 | 0; //@line 8537
   HEAP32[$675 >> 2] = $122; //@line 8538
   $676 = $ReallocAsyncCtx5 + 244 | 0; //@line 8539
   HEAP32[$676 >> 2] = $124; //@line 8540
   $677 = $ReallocAsyncCtx5 + 248 | 0; //@line 8541
   HEAP32[$677 >> 2] = $126; //@line 8542
   $678 = $ReallocAsyncCtx5 + 252 | 0; //@line 8543
   HEAP32[$678 >> 2] = $128; //@line 8544
   $679 = $ReallocAsyncCtx5 + 256 | 0; //@line 8545
   HEAP8[$679 >> 0] = $130; //@line 8546
   $680 = $ReallocAsyncCtx5 + 257 | 0; //@line 8547
   HEAP8[$680 >> 0] = $132; //@line 8548
   $681 = $ReallocAsyncCtx5 + 260 | 0; //@line 8549
   HEAP32[$681 >> 2] = $134; //@line 8550
   $682 = $ReallocAsyncCtx5 + 264 | 0; //@line 8551
   HEAP32[$682 >> 2] = $136; //@line 8552
   sp = STACKTOP; //@line 8553
   return;
  }
  HEAP8[___async_retval >> 0] = $615; //@line 8557
  ___async_unwind = 0; //@line 8558
  HEAP32[$ReallocAsyncCtx5 >> 2] = 580; //@line 8559
  $616 = $ReallocAsyncCtx5 + 4 | 0; //@line 8560
  HEAP32[$616 >> 2] = $2; //@line 8561
  $617 = $ReallocAsyncCtx5 + 8 | 0; //@line 8562
  HEAP32[$617 >> 2] = $4; //@line 8563
  $618 = $ReallocAsyncCtx5 + 12 | 0; //@line 8564
  HEAP32[$618 >> 2] = $6; //@line 8565
  $619 = $ReallocAsyncCtx5 + 16 | 0; //@line 8566
  HEAP32[$619 >> 2] = $8; //@line 8567
  $620 = $ReallocAsyncCtx5 + 20 | 0; //@line 8568
  HEAP32[$620 >> 2] = $10; //@line 8569
  $621 = $ReallocAsyncCtx5 + 24 | 0; //@line 8570
  HEAP32[$621 >> 2] = $16; //@line 8571
  $622 = $ReallocAsyncCtx5 + 28 | 0; //@line 8572
  HEAP32[$622 >> 2] = $14; //@line 8573
  $623 = $ReallocAsyncCtx5 + 32 | 0; //@line 8574
  HEAP32[$623 >> 2] = $18; //@line 8575
  $624 = $ReallocAsyncCtx5 + 36 | 0; //@line 8576
  HEAP32[$624 >> 2] = $20; //@line 8577
  $625 = $ReallocAsyncCtx5 + 40 | 0; //@line 8578
  HEAP32[$625 >> 2] = $22; //@line 8579
  $626 = $ReallocAsyncCtx5 + 44 | 0; //@line 8580
  HEAP32[$626 >> 2] = $24; //@line 8581
  $627 = $ReallocAsyncCtx5 + 48 | 0; //@line 8582
  HEAP32[$627 >> 2] = $26; //@line 8583
  $628 = $ReallocAsyncCtx5 + 52 | 0; //@line 8584
  HEAP32[$628 >> 2] = $28; //@line 8585
  $629 = $ReallocAsyncCtx5 + 56 | 0; //@line 8586
  HEAP32[$629 >> 2] = $30; //@line 8587
  $630 = $ReallocAsyncCtx5 + 60 | 0; //@line 8588
  HEAP32[$630 >> 2] = $32; //@line 8589
  $631 = $ReallocAsyncCtx5 + 64 | 0; //@line 8590
  HEAP32[$631 >> 2] = $34; //@line 8591
  $632 = $ReallocAsyncCtx5 + 68 | 0; //@line 8592
  HEAP32[$632 >> 2] = $36; //@line 8593
  $633 = $ReallocAsyncCtx5 + 72 | 0; //@line 8594
  HEAP32[$633 >> 2] = $38; //@line 8595
  $634 = $ReallocAsyncCtx5 + 76 | 0; //@line 8596
  HEAP32[$634 >> 2] = $40; //@line 8597
  $635 = $ReallocAsyncCtx5 + 80 | 0; //@line 8598
  HEAP32[$635 >> 2] = $42; //@line 8599
  $636 = $ReallocAsyncCtx5 + 84 | 0; //@line 8600
  HEAP32[$636 >> 2] = $44; //@line 8601
  $637 = $ReallocAsyncCtx5 + 88 | 0; //@line 8602
  HEAP32[$637 >> 2] = $46; //@line 8603
  $638 = $ReallocAsyncCtx5 + 92 | 0; //@line 8604
  HEAP32[$638 >> 2] = $48; //@line 8605
  $639 = $ReallocAsyncCtx5 + 96 | 0; //@line 8606
  HEAP32[$639 >> 2] = $50; //@line 8607
  $640 = $ReallocAsyncCtx5 + 100 | 0; //@line 8608
  HEAP32[$640 >> 2] = $52; //@line 8609
  $641 = $ReallocAsyncCtx5 + 104 | 0; //@line 8610
  HEAP32[$641 >> 2] = $54; //@line 8611
  $642 = $ReallocAsyncCtx5 + 108 | 0; //@line 8612
  HEAP32[$642 >> 2] = $56; //@line 8613
  $643 = $ReallocAsyncCtx5 + 112 | 0; //@line 8614
  HEAP32[$643 >> 2] = $58; //@line 8615
  $644 = $ReallocAsyncCtx5 + 116 | 0; //@line 8616
  HEAP32[$644 >> 2] = $60; //@line 8617
  $645 = $ReallocAsyncCtx5 + 120 | 0; //@line 8618
  HEAP32[$645 >> 2] = $62; //@line 8619
  $646 = $ReallocAsyncCtx5 + 124 | 0; //@line 8620
  HEAP32[$646 >> 2] = $64; //@line 8621
  $647 = $ReallocAsyncCtx5 + 128 | 0; //@line 8622
  HEAP32[$647 >> 2] = $66; //@line 8623
  $648 = $ReallocAsyncCtx5 + 132 | 0; //@line 8624
  HEAP8[$648 >> 0] = $604; //@line 8625
  $649 = $ReallocAsyncCtx5 + 136 | 0; //@line 8626
  HEAP32[$649 >> 2] = $68; //@line 8627
  $650 = $ReallocAsyncCtx5 + 140 | 0; //@line 8628
  HEAP32[$650 >> 2] = $70; //@line 8629
  $651 = $ReallocAsyncCtx5 + 144 | 0; //@line 8630
  HEAP32[$651 >> 2] = $72; //@line 8631
  $652 = $ReallocAsyncCtx5 + 148 | 0; //@line 8632
  HEAP32[$652 >> 2] = $74; //@line 8633
  $653 = $ReallocAsyncCtx5 + 152 | 0; //@line 8634
  HEAP32[$653 >> 2] = $76; //@line 8635
  $654 = $ReallocAsyncCtx5 + 156 | 0; //@line 8636
  HEAP32[$654 >> 2] = $78; //@line 8637
  $655 = $ReallocAsyncCtx5 + 160 | 0; //@line 8638
  HEAP32[$655 >> 2] = $80; //@line 8639
  $656 = $ReallocAsyncCtx5 + 164 | 0; //@line 8640
  HEAP32[$656 >> 2] = $82; //@line 8641
  $657 = $ReallocAsyncCtx5 + 168 | 0; //@line 8642
  HEAP32[$657 >> 2] = $84; //@line 8643
  $658 = $ReallocAsyncCtx5 + 172 | 0; //@line 8644
  HEAP32[$658 >> 2] = $86; //@line 8645
  $659 = $ReallocAsyncCtx5 + 176 | 0; //@line 8646
  HEAP32[$659 >> 2] = $88; //@line 8647
  $660 = $ReallocAsyncCtx5 + 180 | 0; //@line 8648
  HEAP32[$660 >> 2] = $92; //@line 8649
  $661 = $ReallocAsyncCtx5 + 184 | 0; //@line 8650
  HEAP32[$661 >> 2] = $94; //@line 8651
  $662 = $ReallocAsyncCtx5 + 188 | 0; //@line 8652
  HEAP32[$662 >> 2] = $96; //@line 8653
  $663 = $ReallocAsyncCtx5 + 192 | 0; //@line 8654
  HEAP32[$663 >> 2] = $98; //@line 8655
  $664 = $ReallocAsyncCtx5 + 196 | 0; //@line 8656
  HEAP32[$664 >> 2] = $100; //@line 8657
  $665 = $ReallocAsyncCtx5 + 200 | 0; //@line 8658
  HEAP32[$665 >> 2] = $102; //@line 8659
  $666 = $ReallocAsyncCtx5 + 204 | 0; //@line 8660
  HEAP32[$666 >> 2] = $104; //@line 8661
  $667 = $ReallocAsyncCtx5 + 208 | 0; //@line 8662
  HEAP32[$667 >> 2] = $106; //@line 8663
  $668 = $ReallocAsyncCtx5 + 212 | 0; //@line 8664
  HEAP32[$668 >> 2] = $108; //@line 8665
  $669 = $ReallocAsyncCtx5 + 216 | 0; //@line 8666
  HEAP32[$669 >> 2] = $110; //@line 8667
  $670 = $ReallocAsyncCtx5 + 220 | 0; //@line 8668
  HEAP32[$670 >> 2] = $112; //@line 8669
  $671 = $ReallocAsyncCtx5 + 224 | 0; //@line 8670
  HEAP32[$671 >> 2] = $114; //@line 8671
  $672 = $ReallocAsyncCtx5 + 228 | 0; //@line 8672
  HEAP8[$672 >> 0] = $116; //@line 8673
  $673 = $ReallocAsyncCtx5 + 232 | 0; //@line 8674
  HEAP32[$673 >> 2] = $118; //@line 8675
  $674 = $ReallocAsyncCtx5 + 236 | 0; //@line 8676
  HEAP32[$674 >> 2] = $120; //@line 8677
  $675 = $ReallocAsyncCtx5 + 240 | 0; //@line 8678
  HEAP32[$675 >> 2] = $122; //@line 8679
  $676 = $ReallocAsyncCtx5 + 244 | 0; //@line 8680
  HEAP32[$676 >> 2] = $124; //@line 8681
  $677 = $ReallocAsyncCtx5 + 248 | 0; //@line 8682
  HEAP32[$677 >> 2] = $126; //@line 8683
  $678 = $ReallocAsyncCtx5 + 252 | 0; //@line 8684
  HEAP32[$678 >> 2] = $128; //@line 8685
  $679 = $ReallocAsyncCtx5 + 256 | 0; //@line 8686
  HEAP8[$679 >> 0] = $130; //@line 8687
  $680 = $ReallocAsyncCtx5 + 257 | 0; //@line 8688
  HEAP8[$680 >> 0] = $132; //@line 8689
  $681 = $ReallocAsyncCtx5 + 260 | 0; //@line 8690
  HEAP32[$681 >> 2] = $134; //@line 8691
  $682 = $ReallocAsyncCtx5 + 264 | 0; //@line 8692
  HEAP32[$682 >> 2] = $136; //@line 8693
  sp = STACKTOP; //@line 8694
  return;
 } else if ((label | 0) == 36) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 8699
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_343($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i104 = 0, $$096$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $134 = 0, $137 = 0, $14 = 0, $148 = 0, $149 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $231 = 0, $234 = 0, $239 = 0, $24 = 0, $247 = 0, $26 = 0, $266 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $352 = 0, $353 = 0, $36 = 0, $364 = 0, $365 = 0, $38 = 0, $4 = 0, $40 = 0, $402 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $478 = 0, $48 = 0, $482 = 0, $486 = 0, $489 = 0, $495 = 0, $498 = 0, $499 = 0, $50 = 0, $508 = 0, $509 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $58 = 0, $595 = 0, $6 = 0, $60 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8740
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8742
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8744
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8746
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8748
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8750
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8752
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8754
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 8756
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 8758
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 8760
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 8762
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 8764
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 8766
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 8768
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 8770
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 8772
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 8774
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 8776
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 8778
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 8780
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 8782
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 8784
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 8786
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 8788
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 8790
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 8792
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 8794
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 8796
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 8798
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 8800
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 8802
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 8804
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 8806
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 8808
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 8810
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 8812
 $74 = HEAP8[$0 + 148 >> 0] | 0; //@line 8814
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 8816
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 8818
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 8820
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 8822
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 8824
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 8826
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 8828
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 8830
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 8832
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 8834
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 8836
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 8838
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 8840
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 8842
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 8844
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 8846
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 8848
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 8850
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 8852
 $114 = HEAP8[$0 + 228 >> 0] | 0; //@line 8854
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 8856
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 8858
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 8860
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 8862
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 8864
 $126 = HEAP32[$0 + 252 >> 2] | 0; //@line 8866
 $128 = HEAP8[$0 + 256 >> 0] | 0; //@line 8868
 $130 = HEAP8[$0 + 257 >> 0] | 0; //@line 8870
 $132 = HEAP32[$0 + 260 >> 2] | 0; //@line 8872
 $134 = HEAP32[$0 + 264 >> 2] | 0; //@line 8874
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 8876
 if (($AsyncRetVal & 7) == 7) {
  HEAP8[$66 >> 0] = HEAP8[$98 >> 0] | 0; //@line 8881
  HEAP32[$44 >> 2] = HEAP32[$76 >> 2]; //@line 8883
  HEAP8[$38 >> 0] = HEAP8[$86 >> 0] | 0; //@line 8885
 }
 $352 = HEAP8[$6 >> 0] | 0; //@line 8888
 $353 = $352 & 255; //@line 8889
 if (((-128 - (HEAP8[$14 >> 0] | 0) & 255) + -1 | 0) > ($353 | 0)) {
  HEAP8[$102 + 4 + $353 >> 0] = 5; //@line 8897
  HEAP8[$6 >> 0] = $352 + 2 << 24 >> 24; //@line 8899
  HEAP8[($352 + 1 & 255) + ($102 + 4) >> 0] = $AsyncRetVal; //@line 8902
  HEAP8[$32 >> 0] = 1; //@line 8903
  HEAP8[$118 >> 0] = 1; //@line 8904
  $$0$i104 = 0; //@line 8905
 } else {
  $$0$i104 = -1e3; //@line 8907
 }
 $$0$be = $74; //@line 8909
 $$096$be = $$0$i104; //@line 8909
 L8 : while (1) {
  if (($$0$be & 255) >= ($130 & 255)) {
   label = 33; //@line 8913
   break;
  }
  $137 = $$0$be + 1 << 24 >> 24; //@line 8917
  switch (HEAP8[$126 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 8922
    break L8;
    break;
   }
  case 5:
   {
    label = 9; //@line 8927
    break L8;
    break;
   }
  case 7:
   {
    label = 19; //@line 8932
    break L8;
    break;
   }
  case 9:
   {
    label = 24; //@line 8937
    break L8;
    break;
   }
  case 10:
   {
    label = 29; //@line 8942
    break L8;
    break;
   }
  case 2:
   {
    HEAP32[$18 >> 2] = 0; //@line 8947
    HEAP8[$28 >> 0] = HEAP8[$126 + ($137 & 255) >> 0] | 0; //@line 8952
    HEAP8[$2 >> 0] = HEAP8[$126 + ($$0$be + 2 & 255) >> 0] | 0; //@line 8957
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 8958
    continue L8;
    break;
   }
  case 4:
   {
    $231 = $$0$be + 2 << 24 >> 24; //@line 8963
    $234 = HEAP8[$126 + ($137 & 255) >> 0] | 0; //@line 8966
    HEAP8[$108 >> 0] = $234; //@line 8967
    HEAP16[$100 >> 1] = 1 << ($234 & 255); //@line 8971
    $239 = HEAP8[$6 >> 0] | 0; //@line 8973
    if (($239 & 255) >= (-128 - (HEAP8[$14 >> 0] | 0) & 255)) {
     $$0$be = $231; //@line 8977
     $$096$be = -1e3; //@line 8977
     continue L8;
    }
    HEAP8[$6 >> 0] = $239 + 1 << 24 >> 24; //@line 8983
    HEAP8[($239 & 255) + ($102 + 4) >> 0] = 4; //@line 8984
    HEAP8[$118 >> 0] = 1; //@line 8985
    $$0$be = $231; //@line 8986
    $$096$be = 0; //@line 8986
    continue L8;
    break;
   }
  case 6:
   {
    $364 = HEAP8[$6 >> 0] | 0; //@line 8992
    $365 = $364 & 255; //@line 8993
    if (((-128 - (HEAP8[$14 >> 0] | 0) & 255) + -2 | 0) <= ($365 | 0)) {
     $$0$be = $137; //@line 8999
     $$096$be = -1e3; //@line 8999
     continue L8;
    }
    HEAP8[$102 + 4 + $365 >> 0] = 6; //@line 9004
    HEAP8[($364 + 1 & 255) + ($102 + 4) >> 0] = -1; //@line 9008
    HEAP8[$6 >> 0] = $364 + 3 << 24 >> 24; //@line 9010
    HEAP8[($364 + 2 & 255) + ($102 + 4) >> 0] = $114; //@line 9013
    HEAP8[$118 >> 0] = 1; //@line 9014
    $$0$be = $137; //@line 9015
    $$096$be = 0; //@line 9015
    continue L8;
    break;
   }
  case 8:
   {
    $478 = $$0$be + 2 << 24 >> 24; //@line 9020
    $482 = HEAP8[$126 + ($137 & 255) >> 0] & 15; //@line 9024
    $486 = ($482 + ($482 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 9029
    HEAP32[$40 >> 2] = $486; //@line 9030
    HEAP32[$48 >> 2] = $486 + 1e3; //@line 9032
    $489 = HEAP8[$6 >> 0] | 0; //@line 9034
    if (($489 & 255) >= (-128 - (HEAP8[$14 >> 0] | 0) & 255)) {
     $$0$be = $478; //@line 9038
     $$096$be = -1e3; //@line 9038
     continue L8;
    }
    HEAP8[$6 >> 0] = $489 + 1 << 24 >> 24; //@line 9044
    HEAP8[($489 & 255) + ($102 + 4) >> 0] = 8; //@line 9045
    HEAP8[$32 >> 0] = 1; //@line 9046
    HEAP8[$118 >> 0] = 1; //@line 9047
    $$0$be = $478; //@line 9048
    $$096$be = 0; //@line 9048
    continue L8;
    break;
   }
  default:
   {
    $$0$be = $137; //@line 9053
    $$096$be = -1013; //@line 9053
    continue L8;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$106 >> 0] = 0; //@line 9059
  HEAP8[$62 >> 0] = 0; //@line 9060
  HEAP8[$50 >> 0] = 0; //@line 9061
  HEAP8[$88 >> 0] = 0; //@line 9062
  $148 = $137 & 255; //@line 9063
  $149 = $148 + -1 | 0; //@line 9064
  HEAP32[$132 >> 2] = $126 + $149; //@line 9066
  HEAP8[$124 >> 0] = $60 - $149; //@line 9069
  HEAP8[$94 >> 0] = HEAP8[$112 >> 0] | 0; //@line 9071
  HEAP8[$78 >> 0] = HEAP8[$82 >> 0] | 0; //@line 9073
  HEAP8[$64 >> 0] = HEAP8[$68 >> 0] | 0; //@line 9075
  HEAP8[$42 >> 0] = HEAP8[$52 >> 0] | 0; //@line 9077
  HEAP8[$20 >> 0] = HEAP8[$36 >> 0] | 0; //@line 9079
  $160 = HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] | 0; //@line 9082
  $ReallocAsyncCtx = _emscripten_realloc_async_context(272) | 0; //@line 9083
  $161 = FUNCTION_TABLE_iiiiiii[$160 & 3]($122, $116, $106, $62, $50, $88) | 0; //@line 9084
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 576; //@line 9087
   $162 = $ReallocAsyncCtx + 4 | 0; //@line 9088
   HEAP32[$162 >> 2] = $2; //@line 9089
   $163 = $ReallocAsyncCtx + 8 | 0; //@line 9090
   HEAP32[$163 >> 2] = $4; //@line 9091
   $164 = $ReallocAsyncCtx + 12 | 0; //@line 9092
   HEAP32[$164 >> 2] = $6; //@line 9093
   $165 = $ReallocAsyncCtx + 16 | 0; //@line 9094
   HEAP32[$165 >> 2] = $8; //@line 9095
   $166 = $ReallocAsyncCtx + 20 | 0; //@line 9096
   HEAP32[$166 >> 2] = $10; //@line 9097
   $167 = $ReallocAsyncCtx + 24 | 0; //@line 9098
   HEAP32[$167 >> 2] = $$096$be; //@line 9099
   $168 = $ReallocAsyncCtx + 28 | 0; //@line 9100
   HEAP32[$168 >> 2] = $14; //@line 9101
   $169 = $ReallocAsyncCtx + 32 | 0; //@line 9102
   HEAP32[$169 >> 2] = $12; //@line 9103
   $170 = $ReallocAsyncCtx + 36 | 0; //@line 9104
   HEAP32[$170 >> 2] = $16; //@line 9105
   $171 = $ReallocAsyncCtx + 40 | 0; //@line 9106
   HEAP32[$171 >> 2] = $18; //@line 9107
   $172 = $ReallocAsyncCtx + 44 | 0; //@line 9108
   HEAP32[$172 >> 2] = $20; //@line 9109
   $173 = $ReallocAsyncCtx + 48 | 0; //@line 9110
   HEAP32[$173 >> 2] = $22; //@line 9111
   $174 = $ReallocAsyncCtx + 52 | 0; //@line 9112
   HEAP32[$174 >> 2] = $24; //@line 9113
   $175 = $ReallocAsyncCtx + 56 | 0; //@line 9114
   HEAP32[$175 >> 2] = $26; //@line 9115
   $176 = $ReallocAsyncCtx + 60 | 0; //@line 9116
   HEAP32[$176 >> 2] = $28; //@line 9117
   $177 = $ReallocAsyncCtx + 64 | 0; //@line 9118
   HEAP32[$177 >> 2] = $30; //@line 9119
   $178 = $ReallocAsyncCtx + 68 | 0; //@line 9120
   HEAP32[$178 >> 2] = $32; //@line 9121
   $179 = $ReallocAsyncCtx + 72 | 0; //@line 9122
   HEAP32[$179 >> 2] = $34; //@line 9123
   $180 = $ReallocAsyncCtx + 76 | 0; //@line 9124
   HEAP32[$180 >> 2] = $36; //@line 9125
   $181 = $ReallocAsyncCtx + 80 | 0; //@line 9126
   HEAP32[$181 >> 2] = $38; //@line 9127
   $182 = $ReallocAsyncCtx + 84 | 0; //@line 9128
   HEAP32[$182 >> 2] = $40; //@line 9129
   $183 = $ReallocAsyncCtx + 88 | 0; //@line 9130
   HEAP32[$183 >> 2] = $42; //@line 9131
   $184 = $ReallocAsyncCtx + 92 | 0; //@line 9132
   HEAP32[$184 >> 2] = $44; //@line 9133
   $185 = $ReallocAsyncCtx + 96 | 0; //@line 9134
   HEAP32[$185 >> 2] = $46; //@line 9135
   $186 = $ReallocAsyncCtx + 100 | 0; //@line 9136
   HEAP32[$186 >> 2] = $48; //@line 9137
   $187 = $ReallocAsyncCtx + 104 | 0; //@line 9138
   HEAP32[$187 >> 2] = $50; //@line 9139
   $188 = $ReallocAsyncCtx + 108 | 0; //@line 9140
   HEAP32[$188 >> 2] = $52; //@line 9141
   $189 = $ReallocAsyncCtx + 112 | 0; //@line 9142
   HEAP32[$189 >> 2] = $54; //@line 9143
   $190 = $ReallocAsyncCtx + 116 | 0; //@line 9144
   HEAP32[$190 >> 2] = $56; //@line 9145
   $191 = $ReallocAsyncCtx + 120 | 0; //@line 9146
   HEAP32[$191 >> 2] = $58; //@line 9147
   $192 = $ReallocAsyncCtx + 124 | 0; //@line 9148
   HEAP32[$192 >> 2] = $60; //@line 9149
   $193 = $ReallocAsyncCtx + 128 | 0; //@line 9150
   HEAP32[$193 >> 2] = $62; //@line 9151
   $194 = $ReallocAsyncCtx + 132 | 0; //@line 9152
   HEAP32[$194 >> 2] = $64; //@line 9153
   $195 = $ReallocAsyncCtx + 136 | 0; //@line 9154
   HEAP32[$195 >> 2] = $66; //@line 9155
   $196 = $ReallocAsyncCtx + 140 | 0; //@line 9156
   HEAP32[$196 >> 2] = $68; //@line 9157
   $197 = $ReallocAsyncCtx + 144 | 0; //@line 9158
   HEAP32[$197 >> 2] = $70; //@line 9159
   $198 = $ReallocAsyncCtx + 148 | 0; //@line 9160
   HEAP32[$198 >> 2] = $72; //@line 9161
   $199 = $ReallocAsyncCtx + 152 | 0; //@line 9162
   HEAP32[$199 >> 2] = $76; //@line 9163
   $200 = $ReallocAsyncCtx + 156 | 0; //@line 9164
   HEAP32[$200 >> 2] = $78; //@line 9165
   $201 = $ReallocAsyncCtx + 160 | 0; //@line 9166
   HEAP32[$201 >> 2] = $80; //@line 9167
   $202 = $ReallocAsyncCtx + 164 | 0; //@line 9168
   HEAP32[$202 >> 2] = $82; //@line 9169
   $203 = $ReallocAsyncCtx + 168 | 0; //@line 9170
   HEAP32[$203 >> 2] = $84; //@line 9171
   $204 = $ReallocAsyncCtx + 172 | 0; //@line 9172
   HEAP32[$204 >> 2] = $86; //@line 9173
   $205 = $ReallocAsyncCtx + 176 | 0; //@line 9174
   HEAP32[$205 >> 2] = $88; //@line 9175
   $206 = $ReallocAsyncCtx + 180 | 0; //@line 9176
   HEAP32[$206 >> 2] = $148; //@line 9177
   $207 = $ReallocAsyncCtx + 184 | 0; //@line 9178
   HEAP32[$207 >> 2] = $90; //@line 9179
   $208 = $ReallocAsyncCtx + 188 | 0; //@line 9180
   HEAP32[$208 >> 2] = $92; //@line 9181
   $209 = $ReallocAsyncCtx + 192 | 0; //@line 9182
   HEAP32[$209 >> 2] = $94; //@line 9183
   $210 = $ReallocAsyncCtx + 196 | 0; //@line 9184
   HEAP32[$210 >> 2] = $96; //@line 9185
   $211 = $ReallocAsyncCtx + 200 | 0; //@line 9186
   HEAP32[$211 >> 2] = $98; //@line 9187
   $212 = $ReallocAsyncCtx + 204 | 0; //@line 9188
   HEAP32[$212 >> 2] = $100; //@line 9189
   $213 = $ReallocAsyncCtx + 208 | 0; //@line 9190
   HEAP32[$213 >> 2] = $102; //@line 9191
   $214 = $ReallocAsyncCtx + 212 | 0; //@line 9192
   HEAP32[$214 >> 2] = $104; //@line 9193
   $215 = $ReallocAsyncCtx + 216 | 0; //@line 9194
   HEAP32[$215 >> 2] = $106; //@line 9195
   $216 = $ReallocAsyncCtx + 220 | 0; //@line 9196
   HEAP32[$216 >> 2] = $108; //@line 9197
   $217 = $ReallocAsyncCtx + 224 | 0; //@line 9198
   HEAP32[$217 >> 2] = $110; //@line 9199
   $218 = $ReallocAsyncCtx + 228 | 0; //@line 9200
   HEAP32[$218 >> 2] = $112; //@line 9201
   $219 = $ReallocAsyncCtx + 232 | 0; //@line 9202
   HEAP8[$219 >> 0] = $114; //@line 9203
   $220 = $ReallocAsyncCtx + 236 | 0; //@line 9204
   HEAP32[$220 >> 2] = $116; //@line 9205
   $221 = $ReallocAsyncCtx + 240 | 0; //@line 9206
   HEAP32[$221 >> 2] = $118; //@line 9207
   $222 = $ReallocAsyncCtx + 244 | 0; //@line 9208
   HEAP32[$222 >> 2] = $120; //@line 9209
   $223 = $ReallocAsyncCtx + 248 | 0; //@line 9210
   HEAP32[$223 >> 2] = $122; //@line 9211
   $224 = $ReallocAsyncCtx + 252 | 0; //@line 9212
   HEAP32[$224 >> 2] = $124; //@line 9213
   $225 = $ReallocAsyncCtx + 256 | 0; //@line 9214
   HEAP32[$225 >> 2] = $126; //@line 9215
   $226 = $ReallocAsyncCtx + 260 | 0; //@line 9216
   HEAP8[$226 >> 0] = $128; //@line 9217
   $227 = $ReallocAsyncCtx + 261 | 0; //@line 9218
   HEAP8[$227 >> 0] = $130; //@line 9219
   $228 = $ReallocAsyncCtx + 264 | 0; //@line 9220
   HEAP32[$228 >> 2] = $132; //@line 9221
   $229 = $ReallocAsyncCtx + 268 | 0; //@line 9222
   HEAP32[$229 >> 2] = $134; //@line 9223
   sp = STACKTOP; //@line 9224
   return;
  }
  HEAP8[___async_retval >> 0] = $161; //@line 9228
  ___async_unwind = 0; //@line 9229
  HEAP32[$ReallocAsyncCtx >> 2] = 576; //@line 9230
  $162 = $ReallocAsyncCtx + 4 | 0; //@line 9231
  HEAP32[$162 >> 2] = $2; //@line 9232
  $163 = $ReallocAsyncCtx + 8 | 0; //@line 9233
  HEAP32[$163 >> 2] = $4; //@line 9234
  $164 = $ReallocAsyncCtx + 12 | 0; //@line 9235
  HEAP32[$164 >> 2] = $6; //@line 9236
  $165 = $ReallocAsyncCtx + 16 | 0; //@line 9237
  HEAP32[$165 >> 2] = $8; //@line 9238
  $166 = $ReallocAsyncCtx + 20 | 0; //@line 9239
  HEAP32[$166 >> 2] = $10; //@line 9240
  $167 = $ReallocAsyncCtx + 24 | 0; //@line 9241
  HEAP32[$167 >> 2] = $$096$be; //@line 9242
  $168 = $ReallocAsyncCtx + 28 | 0; //@line 9243
  HEAP32[$168 >> 2] = $14; //@line 9244
  $169 = $ReallocAsyncCtx + 32 | 0; //@line 9245
  HEAP32[$169 >> 2] = $12; //@line 9246
  $170 = $ReallocAsyncCtx + 36 | 0; //@line 9247
  HEAP32[$170 >> 2] = $16; //@line 9248
  $171 = $ReallocAsyncCtx + 40 | 0; //@line 9249
  HEAP32[$171 >> 2] = $18; //@line 9250
  $172 = $ReallocAsyncCtx + 44 | 0; //@line 9251
  HEAP32[$172 >> 2] = $20; //@line 9252
  $173 = $ReallocAsyncCtx + 48 | 0; //@line 9253
  HEAP32[$173 >> 2] = $22; //@line 9254
  $174 = $ReallocAsyncCtx + 52 | 0; //@line 9255
  HEAP32[$174 >> 2] = $24; //@line 9256
  $175 = $ReallocAsyncCtx + 56 | 0; //@line 9257
  HEAP32[$175 >> 2] = $26; //@line 9258
  $176 = $ReallocAsyncCtx + 60 | 0; //@line 9259
  HEAP32[$176 >> 2] = $28; //@line 9260
  $177 = $ReallocAsyncCtx + 64 | 0; //@line 9261
  HEAP32[$177 >> 2] = $30; //@line 9262
  $178 = $ReallocAsyncCtx + 68 | 0; //@line 9263
  HEAP32[$178 >> 2] = $32; //@line 9264
  $179 = $ReallocAsyncCtx + 72 | 0; //@line 9265
  HEAP32[$179 >> 2] = $34; //@line 9266
  $180 = $ReallocAsyncCtx + 76 | 0; //@line 9267
  HEAP32[$180 >> 2] = $36; //@line 9268
  $181 = $ReallocAsyncCtx + 80 | 0; //@line 9269
  HEAP32[$181 >> 2] = $38; //@line 9270
  $182 = $ReallocAsyncCtx + 84 | 0; //@line 9271
  HEAP32[$182 >> 2] = $40; //@line 9272
  $183 = $ReallocAsyncCtx + 88 | 0; //@line 9273
  HEAP32[$183 >> 2] = $42; //@line 9274
  $184 = $ReallocAsyncCtx + 92 | 0; //@line 9275
  HEAP32[$184 >> 2] = $44; //@line 9276
  $185 = $ReallocAsyncCtx + 96 | 0; //@line 9277
  HEAP32[$185 >> 2] = $46; //@line 9278
  $186 = $ReallocAsyncCtx + 100 | 0; //@line 9279
  HEAP32[$186 >> 2] = $48; //@line 9280
  $187 = $ReallocAsyncCtx + 104 | 0; //@line 9281
  HEAP32[$187 >> 2] = $50; //@line 9282
  $188 = $ReallocAsyncCtx + 108 | 0; //@line 9283
  HEAP32[$188 >> 2] = $52; //@line 9284
  $189 = $ReallocAsyncCtx + 112 | 0; //@line 9285
  HEAP32[$189 >> 2] = $54; //@line 9286
  $190 = $ReallocAsyncCtx + 116 | 0; //@line 9287
  HEAP32[$190 >> 2] = $56; //@line 9288
  $191 = $ReallocAsyncCtx + 120 | 0; //@line 9289
  HEAP32[$191 >> 2] = $58; //@line 9290
  $192 = $ReallocAsyncCtx + 124 | 0; //@line 9291
  HEAP32[$192 >> 2] = $60; //@line 9292
  $193 = $ReallocAsyncCtx + 128 | 0; //@line 9293
  HEAP32[$193 >> 2] = $62; //@line 9294
  $194 = $ReallocAsyncCtx + 132 | 0; //@line 9295
  HEAP32[$194 >> 2] = $64; //@line 9296
  $195 = $ReallocAsyncCtx + 136 | 0; //@line 9297
  HEAP32[$195 >> 2] = $66; //@line 9298
  $196 = $ReallocAsyncCtx + 140 | 0; //@line 9299
  HEAP32[$196 >> 2] = $68; //@line 9300
  $197 = $ReallocAsyncCtx + 144 | 0; //@line 9301
  HEAP32[$197 >> 2] = $70; //@line 9302
  $198 = $ReallocAsyncCtx + 148 | 0; //@line 9303
  HEAP32[$198 >> 2] = $72; //@line 9304
  $199 = $ReallocAsyncCtx + 152 | 0; //@line 9305
  HEAP32[$199 >> 2] = $76; //@line 9306
  $200 = $ReallocAsyncCtx + 156 | 0; //@line 9307
  HEAP32[$200 >> 2] = $78; //@line 9308
  $201 = $ReallocAsyncCtx + 160 | 0; //@line 9309
  HEAP32[$201 >> 2] = $80; //@line 9310
  $202 = $ReallocAsyncCtx + 164 | 0; //@line 9311
  HEAP32[$202 >> 2] = $82; //@line 9312
  $203 = $ReallocAsyncCtx + 168 | 0; //@line 9313
  HEAP32[$203 >> 2] = $84; //@line 9314
  $204 = $ReallocAsyncCtx + 172 | 0; //@line 9315
  HEAP32[$204 >> 2] = $86; //@line 9316
  $205 = $ReallocAsyncCtx + 176 | 0; //@line 9317
  HEAP32[$205 >> 2] = $88; //@line 9318
  $206 = $ReallocAsyncCtx + 180 | 0; //@line 9319
  HEAP32[$206 >> 2] = $148; //@line 9320
  $207 = $ReallocAsyncCtx + 184 | 0; //@line 9321
  HEAP32[$207 >> 2] = $90; //@line 9322
  $208 = $ReallocAsyncCtx + 188 | 0; //@line 9323
  HEAP32[$208 >> 2] = $92; //@line 9324
  $209 = $ReallocAsyncCtx + 192 | 0; //@line 9325
  HEAP32[$209 >> 2] = $94; //@line 9326
  $210 = $ReallocAsyncCtx + 196 | 0; //@line 9327
  HEAP32[$210 >> 2] = $96; //@line 9328
  $211 = $ReallocAsyncCtx + 200 | 0; //@line 9329
  HEAP32[$211 >> 2] = $98; //@line 9330
  $212 = $ReallocAsyncCtx + 204 | 0; //@line 9331
  HEAP32[$212 >> 2] = $100; //@line 9332
  $213 = $ReallocAsyncCtx + 208 | 0; //@line 9333
  HEAP32[$213 >> 2] = $102; //@line 9334
  $214 = $ReallocAsyncCtx + 212 | 0; //@line 9335
  HEAP32[$214 >> 2] = $104; //@line 9336
  $215 = $ReallocAsyncCtx + 216 | 0; //@line 9337
  HEAP32[$215 >> 2] = $106; //@line 9338
  $216 = $ReallocAsyncCtx + 220 | 0; //@line 9339
  HEAP32[$216 >> 2] = $108; //@line 9340
  $217 = $ReallocAsyncCtx + 224 | 0; //@line 9341
  HEAP32[$217 >> 2] = $110; //@line 9342
  $218 = $ReallocAsyncCtx + 228 | 0; //@line 9343
  HEAP32[$218 >> 2] = $112; //@line 9344
  $219 = $ReallocAsyncCtx + 232 | 0; //@line 9345
  HEAP8[$219 >> 0] = $114; //@line 9346
  $220 = $ReallocAsyncCtx + 236 | 0; //@line 9347
  HEAP32[$220 >> 2] = $116; //@line 9348
  $221 = $ReallocAsyncCtx + 240 | 0; //@line 9349
  HEAP32[$221 >> 2] = $118; //@line 9350
  $222 = $ReallocAsyncCtx + 244 | 0; //@line 9351
  HEAP32[$222 >> 2] = $120; //@line 9352
  $223 = $ReallocAsyncCtx + 248 | 0; //@line 9353
  HEAP32[$223 >> 2] = $122; //@line 9354
  $224 = $ReallocAsyncCtx + 252 | 0; //@line 9355
  HEAP32[$224 >> 2] = $124; //@line 9356
  $225 = $ReallocAsyncCtx + 256 | 0; //@line 9357
  HEAP32[$225 >> 2] = $126; //@line 9358
  $226 = $ReallocAsyncCtx + 260 | 0; //@line 9359
  HEAP8[$226 >> 0] = $128; //@line 9360
  $227 = $ReallocAsyncCtx + 261 | 0; //@line 9361
  HEAP8[$227 >> 0] = $130; //@line 9362
  $228 = $ReallocAsyncCtx + 264 | 0; //@line 9363
  HEAP32[$228 >> 2] = $132; //@line 9364
  $229 = $ReallocAsyncCtx + 268 | 0; //@line 9365
  HEAP32[$229 >> 2] = $134; //@line 9366
  sp = STACKTOP; //@line 9367
  return;
 } else if ((label | 0) == 9) {
  $247 = HEAP8[$126 + ($137 & 255) >> 0] | 0; //@line 9373
  HEAP8[$86 >> 0] = ($247 & 255) >>> 4 & 7; //@line 9378
  HEAP8[$98 >> 0] = $247 & 15; //@line 9380
  $266 = $$0$be + 5 << 24 >> 24; //@line 9394
  HEAP32[$76 >> 2] = (HEAPU8[$126 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$126 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$126 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 9402
  $276 = HEAP32[(HEAP32[$72 >> 2] | 0) + 40 >> 2] | 0; //@line 9405
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(268) | 0; //@line 9406
  $277 = FUNCTION_TABLE_iii[$276 & 31]($122, $90) | 0; //@line 9407
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 577; //@line 9410
   $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 9411
   HEAP32[$278 >> 2] = $2; //@line 9412
   $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 9413
   HEAP32[$279 >> 2] = $4; //@line 9414
   $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 9415
   HEAP32[$280 >> 2] = $6; //@line 9416
   $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 9417
   HEAP32[$281 >> 2] = $8; //@line 9418
   $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 9419
   HEAP32[$282 >> 2] = $10; //@line 9420
   $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 9421
   HEAP32[$283 >> 2] = $12; //@line 9422
   $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 9423
   HEAP32[$284 >> 2] = $14; //@line 9424
   $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 9425
   HEAP32[$285 >> 2] = $16; //@line 9426
   $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 9427
   HEAP32[$286 >> 2] = $18; //@line 9428
   $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 9429
   HEAP32[$287 >> 2] = $20; //@line 9430
   $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 9431
   HEAP32[$288 >> 2] = $22; //@line 9432
   $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 9433
   HEAP32[$289 >> 2] = $24; //@line 9434
   $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 9435
   HEAP32[$290 >> 2] = $26; //@line 9436
   $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 9437
   HEAP32[$291 >> 2] = $28; //@line 9438
   $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 9439
   HEAP32[$292 >> 2] = $30; //@line 9440
   $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 9441
   HEAP32[$293 >> 2] = $32; //@line 9442
   $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 9443
   HEAP32[$294 >> 2] = $34; //@line 9444
   $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 9445
   HEAP32[$295 >> 2] = $36; //@line 9446
   $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 9447
   HEAP32[$296 >> 2] = $38; //@line 9448
   $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 9449
   HEAP32[$297 >> 2] = $40; //@line 9450
   $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 9451
   HEAP32[$298 >> 2] = $42; //@line 9452
   $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 9453
   HEAP32[$299 >> 2] = $44; //@line 9454
   $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 9455
   HEAP32[$300 >> 2] = $46; //@line 9456
   $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 9457
   HEAP32[$301 >> 2] = $48; //@line 9458
   $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 9459
   HEAP32[$302 >> 2] = $50; //@line 9460
   $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 9461
   HEAP32[$303 >> 2] = $52; //@line 9462
   $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 9463
   HEAP32[$304 >> 2] = $54; //@line 9464
   $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 9465
   HEAP32[$305 >> 2] = $56; //@line 9466
   $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 9467
   HEAP32[$306 >> 2] = $58; //@line 9468
   $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 9469
   HEAP32[$307 >> 2] = $60; //@line 9470
   $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 9471
   HEAP32[$308 >> 2] = $62; //@line 9472
   $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 9473
   HEAP32[$309 >> 2] = $64; //@line 9474
   $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 9475
   HEAP32[$310 >> 2] = $66; //@line 9476
   $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 9477
   HEAP32[$311 >> 2] = $68; //@line 9478
   $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 9479
   HEAP32[$312 >> 2] = $70; //@line 9480
   $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 9481
   HEAP32[$313 >> 2] = $72; //@line 9482
   $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 9483
   HEAP8[$314 >> 0] = $266; //@line 9484
   $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 9485
   HEAP32[$315 >> 2] = $76; //@line 9486
   $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 9487
   HEAP32[$316 >> 2] = $78; //@line 9488
   $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 9489
   HEAP32[$317 >> 2] = $80; //@line 9490
   $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 9491
   HEAP32[$318 >> 2] = $82; //@line 9492
   $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 9493
   HEAP32[$319 >> 2] = $84; //@line 9494
   $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 9495
   HEAP32[$320 >> 2] = $86; //@line 9496
   $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 9497
   HEAP32[$321 >> 2] = $88; //@line 9498
   $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 9499
   HEAP32[$322 >> 2] = $90; //@line 9500
   $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 9501
   HEAP32[$323 >> 2] = $92; //@line 9502
   $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 9503
   HEAP32[$324 >> 2] = $94; //@line 9504
   $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 9505
   HEAP32[$325 >> 2] = $96; //@line 9506
   $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 9507
   HEAP32[$326 >> 2] = $98; //@line 9508
   $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 9509
   HEAP32[$327 >> 2] = $100; //@line 9510
   $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 9511
   HEAP32[$328 >> 2] = $102; //@line 9512
   $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 9513
   HEAP32[$329 >> 2] = $104; //@line 9514
   $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 9515
   HEAP32[$330 >> 2] = $106; //@line 9516
   $331 = $ReallocAsyncCtx2 + 216 | 0; //@line 9517
   HEAP32[$331 >> 2] = $108; //@line 9518
   $332 = $ReallocAsyncCtx2 + 220 | 0; //@line 9519
   HEAP32[$332 >> 2] = $110; //@line 9520
   $333 = $ReallocAsyncCtx2 + 224 | 0; //@line 9521
   HEAP32[$333 >> 2] = $112; //@line 9522
   $334 = $ReallocAsyncCtx2 + 228 | 0; //@line 9523
   HEAP8[$334 >> 0] = $114; //@line 9524
   $335 = $ReallocAsyncCtx2 + 232 | 0; //@line 9525
   HEAP32[$335 >> 2] = $116; //@line 9526
   $336 = $ReallocAsyncCtx2 + 236 | 0; //@line 9527
   HEAP32[$336 >> 2] = $118; //@line 9528
   $337 = $ReallocAsyncCtx2 + 240 | 0; //@line 9529
   HEAP32[$337 >> 2] = $120; //@line 9530
   $338 = $ReallocAsyncCtx2 + 244 | 0; //@line 9531
   HEAP32[$338 >> 2] = $122; //@line 9532
   $339 = $ReallocAsyncCtx2 + 248 | 0; //@line 9533
   HEAP32[$339 >> 2] = $124; //@line 9534
   $340 = $ReallocAsyncCtx2 + 252 | 0; //@line 9535
   HEAP32[$340 >> 2] = $126; //@line 9536
   $341 = $ReallocAsyncCtx2 + 256 | 0; //@line 9537
   HEAP8[$341 >> 0] = $128; //@line 9538
   $342 = $ReallocAsyncCtx2 + 257 | 0; //@line 9539
   HEAP8[$342 >> 0] = $130; //@line 9540
   $343 = $ReallocAsyncCtx2 + 260 | 0; //@line 9541
   HEAP32[$343 >> 2] = $132; //@line 9542
   $344 = $ReallocAsyncCtx2 + 264 | 0; //@line 9543
   HEAP32[$344 >> 2] = $134; //@line 9544
   sp = STACKTOP; //@line 9545
   return;
  }
  HEAP8[___async_retval >> 0] = $277; //@line 9549
  ___async_unwind = 0; //@line 9550
  HEAP32[$ReallocAsyncCtx2 >> 2] = 577; //@line 9551
  $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 9552
  HEAP32[$278 >> 2] = $2; //@line 9553
  $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 9554
  HEAP32[$279 >> 2] = $4; //@line 9555
  $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 9556
  HEAP32[$280 >> 2] = $6; //@line 9557
  $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 9558
  HEAP32[$281 >> 2] = $8; //@line 9559
  $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 9560
  HEAP32[$282 >> 2] = $10; //@line 9561
  $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 9562
  HEAP32[$283 >> 2] = $12; //@line 9563
  $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 9564
  HEAP32[$284 >> 2] = $14; //@line 9565
  $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 9566
  HEAP32[$285 >> 2] = $16; //@line 9567
  $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 9568
  HEAP32[$286 >> 2] = $18; //@line 9569
  $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 9570
  HEAP32[$287 >> 2] = $20; //@line 9571
  $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 9572
  HEAP32[$288 >> 2] = $22; //@line 9573
  $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 9574
  HEAP32[$289 >> 2] = $24; //@line 9575
  $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 9576
  HEAP32[$290 >> 2] = $26; //@line 9577
  $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 9578
  HEAP32[$291 >> 2] = $28; //@line 9579
  $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 9580
  HEAP32[$292 >> 2] = $30; //@line 9581
  $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 9582
  HEAP32[$293 >> 2] = $32; //@line 9583
  $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 9584
  HEAP32[$294 >> 2] = $34; //@line 9585
  $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 9586
  HEAP32[$295 >> 2] = $36; //@line 9587
  $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 9588
  HEAP32[$296 >> 2] = $38; //@line 9589
  $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 9590
  HEAP32[$297 >> 2] = $40; //@line 9591
  $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 9592
  HEAP32[$298 >> 2] = $42; //@line 9593
  $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 9594
  HEAP32[$299 >> 2] = $44; //@line 9595
  $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 9596
  HEAP32[$300 >> 2] = $46; //@line 9597
  $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 9598
  HEAP32[$301 >> 2] = $48; //@line 9599
  $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 9600
  HEAP32[$302 >> 2] = $50; //@line 9601
  $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 9602
  HEAP32[$303 >> 2] = $52; //@line 9603
  $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 9604
  HEAP32[$304 >> 2] = $54; //@line 9605
  $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 9606
  HEAP32[$305 >> 2] = $56; //@line 9607
  $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 9608
  HEAP32[$306 >> 2] = $58; //@line 9609
  $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 9610
  HEAP32[$307 >> 2] = $60; //@line 9611
  $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 9612
  HEAP32[$308 >> 2] = $62; //@line 9613
  $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 9614
  HEAP32[$309 >> 2] = $64; //@line 9615
  $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 9616
  HEAP32[$310 >> 2] = $66; //@line 9617
  $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 9618
  HEAP32[$311 >> 2] = $68; //@line 9619
  $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 9620
  HEAP32[$312 >> 2] = $70; //@line 9621
  $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 9622
  HEAP32[$313 >> 2] = $72; //@line 9623
  $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 9624
  HEAP8[$314 >> 0] = $266; //@line 9625
  $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 9626
  HEAP32[$315 >> 2] = $76; //@line 9627
  $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 9628
  HEAP32[$316 >> 2] = $78; //@line 9629
  $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 9630
  HEAP32[$317 >> 2] = $80; //@line 9631
  $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 9632
  HEAP32[$318 >> 2] = $82; //@line 9633
  $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 9634
  HEAP32[$319 >> 2] = $84; //@line 9635
  $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 9636
  HEAP32[$320 >> 2] = $86; //@line 9637
  $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 9638
  HEAP32[$321 >> 2] = $88; //@line 9639
  $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 9640
  HEAP32[$322 >> 2] = $90; //@line 9641
  $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 9642
  HEAP32[$323 >> 2] = $92; //@line 9643
  $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 9644
  HEAP32[$324 >> 2] = $94; //@line 9645
  $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 9646
  HEAP32[$325 >> 2] = $96; //@line 9647
  $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 9648
  HEAP32[$326 >> 2] = $98; //@line 9649
  $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 9650
  HEAP32[$327 >> 2] = $100; //@line 9651
  $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 9652
  HEAP32[$328 >> 2] = $102; //@line 9653
  $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 9654
  HEAP32[$329 >> 2] = $104; //@line 9655
  $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 9656
  HEAP32[$330 >> 2] = $106; //@line 9657
  $331 = $ReallocAsyncCtx2 + 216 | 0; //@line 9658
  HEAP32[$331 >> 2] = $108; //@line 9659
  $332 = $ReallocAsyncCtx2 + 220 | 0; //@line 9660
  HEAP32[$332 >> 2] = $110; //@line 9661
  $333 = $ReallocAsyncCtx2 + 224 | 0; //@line 9662
  HEAP32[$333 >> 2] = $112; //@line 9663
  $334 = $ReallocAsyncCtx2 + 228 | 0; //@line 9664
  HEAP8[$334 >> 0] = $114; //@line 9665
  $335 = $ReallocAsyncCtx2 + 232 | 0; //@line 9666
  HEAP32[$335 >> 2] = $116; //@line 9667
  $336 = $ReallocAsyncCtx2 + 236 | 0; //@line 9668
  HEAP32[$336 >> 2] = $118; //@line 9669
  $337 = $ReallocAsyncCtx2 + 240 | 0; //@line 9670
  HEAP32[$337 >> 2] = $120; //@line 9671
  $338 = $ReallocAsyncCtx2 + 244 | 0; //@line 9672
  HEAP32[$338 >> 2] = $122; //@line 9673
  $339 = $ReallocAsyncCtx2 + 248 | 0; //@line 9674
  HEAP32[$339 >> 2] = $124; //@line 9675
  $340 = $ReallocAsyncCtx2 + 252 | 0; //@line 9676
  HEAP32[$340 >> 2] = $126; //@line 9677
  $341 = $ReallocAsyncCtx2 + 256 | 0; //@line 9678
  HEAP8[$341 >> 0] = $128; //@line 9679
  $342 = $ReallocAsyncCtx2 + 257 | 0; //@line 9680
  HEAP8[$342 >> 0] = $130; //@line 9681
  $343 = $ReallocAsyncCtx2 + 260 | 0; //@line 9682
  HEAP32[$343 >> 2] = $132; //@line 9683
  $344 = $ReallocAsyncCtx2 + 264 | 0; //@line 9684
  HEAP32[$344 >> 2] = $134; //@line 9685
  sp = STACKTOP; //@line 9686
  return;
 } else if ((label | 0) == 19) {
  HEAP8[$12 >> 0] = HEAP8[$126 + ($137 & 255) >> 0] | 0; //@line 9694
  HEAP32[$4 >> 2] = $46; //@line 9695
  HEAP32[$8 >> 2] = (HEAPU8[$126 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$126 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$126 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 9716
  HEAP32[$16 >> 2] = 0; //@line 9717
  $402 = $$0$be + 6 << 24 >> 24; //@line 9718
  HEAP8[$30 >> 0] = HEAP8[$126 + ($$0$be + 5 & 255) >> 0] | 0; //@line 9722
  $408 = HEAP32[(HEAP32[$34 >> 2] | 0) + 8 >> 2] | 0; //@line 9725
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(268) | 0; //@line 9726
  $409 = FUNCTION_TABLE_iii[$408 & 31]($122, $96) | 0; //@line 9727
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 578; //@line 9730
   $410 = $ReallocAsyncCtx3 + 4 | 0; //@line 9731
   HEAP32[$410 >> 2] = $2; //@line 9732
   $411 = $ReallocAsyncCtx3 + 8 | 0; //@line 9733
   HEAP32[$411 >> 2] = $4; //@line 9734
   $412 = $ReallocAsyncCtx3 + 12 | 0; //@line 9735
   HEAP32[$412 >> 2] = $6; //@line 9736
   $413 = $ReallocAsyncCtx3 + 16 | 0; //@line 9737
   HEAP32[$413 >> 2] = $8; //@line 9738
   $414 = $ReallocAsyncCtx3 + 20 | 0; //@line 9739
   HEAP32[$414 >> 2] = $10; //@line 9740
   $415 = $ReallocAsyncCtx3 + 24 | 0; //@line 9741
   HEAP32[$415 >> 2] = $12; //@line 9742
   $416 = $ReallocAsyncCtx3 + 28 | 0; //@line 9743
   HEAP32[$416 >> 2] = $14; //@line 9744
   $417 = $ReallocAsyncCtx3 + 32 | 0; //@line 9745
   HEAP32[$417 >> 2] = $16; //@line 9746
   $418 = $ReallocAsyncCtx3 + 36 | 0; //@line 9747
   HEAP32[$418 >> 2] = $18; //@line 9748
   $419 = $ReallocAsyncCtx3 + 40 | 0; //@line 9749
   HEAP32[$419 >> 2] = $20; //@line 9750
   $420 = $ReallocAsyncCtx3 + 44 | 0; //@line 9751
   HEAP32[$420 >> 2] = $22; //@line 9752
   $421 = $ReallocAsyncCtx3 + 48 | 0; //@line 9753
   HEAP32[$421 >> 2] = $24; //@line 9754
   $422 = $ReallocAsyncCtx3 + 52 | 0; //@line 9755
   HEAP32[$422 >> 2] = $26; //@line 9756
   $423 = $ReallocAsyncCtx3 + 56 | 0; //@line 9757
   HEAP32[$423 >> 2] = $28; //@line 9758
   $424 = $ReallocAsyncCtx3 + 60 | 0; //@line 9759
   HEAP32[$424 >> 2] = $30; //@line 9760
   $425 = $ReallocAsyncCtx3 + 64 | 0; //@line 9761
   HEAP32[$425 >> 2] = $32; //@line 9762
   $426 = $ReallocAsyncCtx3 + 68 | 0; //@line 9763
   HEAP32[$426 >> 2] = $34; //@line 9764
   $427 = $ReallocAsyncCtx3 + 72 | 0; //@line 9765
   HEAP32[$427 >> 2] = $36; //@line 9766
   $428 = $ReallocAsyncCtx3 + 76 | 0; //@line 9767
   HEAP32[$428 >> 2] = $38; //@line 9768
   $429 = $ReallocAsyncCtx3 + 80 | 0; //@line 9769
   HEAP32[$429 >> 2] = $40; //@line 9770
   $430 = $ReallocAsyncCtx3 + 84 | 0; //@line 9771
   HEAP32[$430 >> 2] = $42; //@line 9772
   $431 = $ReallocAsyncCtx3 + 88 | 0; //@line 9773
   HEAP32[$431 >> 2] = $44; //@line 9774
   $432 = $ReallocAsyncCtx3 + 92 | 0; //@line 9775
   HEAP32[$432 >> 2] = $46; //@line 9776
   $433 = $ReallocAsyncCtx3 + 96 | 0; //@line 9777
   HEAP32[$433 >> 2] = $48; //@line 9778
   $434 = $ReallocAsyncCtx3 + 100 | 0; //@line 9779
   HEAP32[$434 >> 2] = $50; //@line 9780
   $435 = $ReallocAsyncCtx3 + 104 | 0; //@line 9781
   HEAP32[$435 >> 2] = $52; //@line 9782
   $436 = $ReallocAsyncCtx3 + 108 | 0; //@line 9783
   HEAP32[$436 >> 2] = $54; //@line 9784
   $437 = $ReallocAsyncCtx3 + 112 | 0; //@line 9785
   HEAP32[$437 >> 2] = $56; //@line 9786
   $438 = $ReallocAsyncCtx3 + 116 | 0; //@line 9787
   HEAP32[$438 >> 2] = $58; //@line 9788
   $439 = $ReallocAsyncCtx3 + 120 | 0; //@line 9789
   HEAP8[$439 >> 0] = $402; //@line 9790
   $440 = $ReallocAsyncCtx3 + 124 | 0; //@line 9791
   HEAP32[$440 >> 2] = $62; //@line 9792
   $441 = $ReallocAsyncCtx3 + 128 | 0; //@line 9793
   HEAP32[$441 >> 2] = $60; //@line 9794
   $442 = $ReallocAsyncCtx3 + 132 | 0; //@line 9795
   HEAP32[$442 >> 2] = $64; //@line 9796
   $443 = $ReallocAsyncCtx3 + 136 | 0; //@line 9797
   HEAP32[$443 >> 2] = $68; //@line 9798
   $444 = $ReallocAsyncCtx3 + 140 | 0; //@line 9799
   HEAP32[$444 >> 2] = $66; //@line 9800
   $445 = $ReallocAsyncCtx3 + 144 | 0; //@line 9801
   HEAP32[$445 >> 2] = $70; //@line 9802
   $446 = $ReallocAsyncCtx3 + 148 | 0; //@line 9803
   HEAP32[$446 >> 2] = $72; //@line 9804
   $447 = $ReallocAsyncCtx3 + 152 | 0; //@line 9805
   HEAP32[$447 >> 2] = $76; //@line 9806
   $448 = $ReallocAsyncCtx3 + 156 | 0; //@line 9807
   HEAP32[$448 >> 2] = $78; //@line 9808
   $449 = $ReallocAsyncCtx3 + 160 | 0; //@line 9809
   HEAP32[$449 >> 2] = $80; //@line 9810
   $450 = $ReallocAsyncCtx3 + 164 | 0; //@line 9811
   HEAP32[$450 >> 2] = $82; //@line 9812
   $451 = $ReallocAsyncCtx3 + 168 | 0; //@line 9813
   HEAP32[$451 >> 2] = $84; //@line 9814
   $452 = $ReallocAsyncCtx3 + 172 | 0; //@line 9815
   HEAP32[$452 >> 2] = $86; //@line 9816
   $453 = $ReallocAsyncCtx3 + 176 | 0; //@line 9817
   HEAP32[$453 >> 2] = $88; //@line 9818
   $454 = $ReallocAsyncCtx3 + 180 | 0; //@line 9819
   HEAP32[$454 >> 2] = $90; //@line 9820
   $455 = $ReallocAsyncCtx3 + 184 | 0; //@line 9821
   HEAP32[$455 >> 2] = $92; //@line 9822
   $456 = $ReallocAsyncCtx3 + 188 | 0; //@line 9823
   HEAP32[$456 >> 2] = $94; //@line 9824
   $457 = $ReallocAsyncCtx3 + 192 | 0; //@line 9825
   HEAP32[$457 >> 2] = $96; //@line 9826
   $458 = $ReallocAsyncCtx3 + 196 | 0; //@line 9827
   HEAP32[$458 >> 2] = $98; //@line 9828
   $459 = $ReallocAsyncCtx3 + 200 | 0; //@line 9829
   HEAP32[$459 >> 2] = $100; //@line 9830
   $460 = $ReallocAsyncCtx3 + 204 | 0; //@line 9831
   HEAP32[$460 >> 2] = $102; //@line 9832
   $461 = $ReallocAsyncCtx3 + 208 | 0; //@line 9833
   HEAP32[$461 >> 2] = $104; //@line 9834
   $462 = $ReallocAsyncCtx3 + 212 | 0; //@line 9835
   HEAP32[$462 >> 2] = $106; //@line 9836
   $463 = $ReallocAsyncCtx3 + 216 | 0; //@line 9837
   HEAP32[$463 >> 2] = $108; //@line 9838
   $464 = $ReallocAsyncCtx3 + 220 | 0; //@line 9839
   HEAP32[$464 >> 2] = $110; //@line 9840
   $465 = $ReallocAsyncCtx3 + 224 | 0; //@line 9841
   HEAP32[$465 >> 2] = $112; //@line 9842
   $466 = $ReallocAsyncCtx3 + 228 | 0; //@line 9843
   HEAP8[$466 >> 0] = $114; //@line 9844
   $467 = $ReallocAsyncCtx3 + 232 | 0; //@line 9845
   HEAP32[$467 >> 2] = $116; //@line 9846
   $468 = $ReallocAsyncCtx3 + 236 | 0; //@line 9847
   HEAP32[$468 >> 2] = $118; //@line 9848
   $469 = $ReallocAsyncCtx3 + 240 | 0; //@line 9849
   HEAP32[$469 >> 2] = $120; //@line 9850
   $470 = $ReallocAsyncCtx3 + 244 | 0; //@line 9851
   HEAP32[$470 >> 2] = $122; //@line 9852
   $471 = $ReallocAsyncCtx3 + 248 | 0; //@line 9853
   HEAP32[$471 >> 2] = $124; //@line 9854
   $472 = $ReallocAsyncCtx3 + 252 | 0; //@line 9855
   HEAP32[$472 >> 2] = $126; //@line 9856
   $473 = $ReallocAsyncCtx3 + 256 | 0; //@line 9857
   HEAP8[$473 >> 0] = $128; //@line 9858
   $474 = $ReallocAsyncCtx3 + 257 | 0; //@line 9859
   HEAP8[$474 >> 0] = $130; //@line 9860
   $475 = $ReallocAsyncCtx3 + 260 | 0; //@line 9861
   HEAP32[$475 >> 2] = $132; //@line 9862
   $476 = $ReallocAsyncCtx3 + 264 | 0; //@line 9863
   HEAP32[$476 >> 2] = $134; //@line 9864
   sp = STACKTOP; //@line 9865
   return;
  }
  HEAP8[___async_retval >> 0] = $409; //@line 9869
  ___async_unwind = 0; //@line 9870
  HEAP32[$ReallocAsyncCtx3 >> 2] = 578; //@line 9871
  $410 = $ReallocAsyncCtx3 + 4 | 0; //@line 9872
  HEAP32[$410 >> 2] = $2; //@line 9873
  $411 = $ReallocAsyncCtx3 + 8 | 0; //@line 9874
  HEAP32[$411 >> 2] = $4; //@line 9875
  $412 = $ReallocAsyncCtx3 + 12 | 0; //@line 9876
  HEAP32[$412 >> 2] = $6; //@line 9877
  $413 = $ReallocAsyncCtx3 + 16 | 0; //@line 9878
  HEAP32[$413 >> 2] = $8; //@line 9879
  $414 = $ReallocAsyncCtx3 + 20 | 0; //@line 9880
  HEAP32[$414 >> 2] = $10; //@line 9881
  $415 = $ReallocAsyncCtx3 + 24 | 0; //@line 9882
  HEAP32[$415 >> 2] = $12; //@line 9883
  $416 = $ReallocAsyncCtx3 + 28 | 0; //@line 9884
  HEAP32[$416 >> 2] = $14; //@line 9885
  $417 = $ReallocAsyncCtx3 + 32 | 0; //@line 9886
  HEAP32[$417 >> 2] = $16; //@line 9887
  $418 = $ReallocAsyncCtx3 + 36 | 0; //@line 9888
  HEAP32[$418 >> 2] = $18; //@line 9889
  $419 = $ReallocAsyncCtx3 + 40 | 0; //@line 9890
  HEAP32[$419 >> 2] = $20; //@line 9891
  $420 = $ReallocAsyncCtx3 + 44 | 0; //@line 9892
  HEAP32[$420 >> 2] = $22; //@line 9893
  $421 = $ReallocAsyncCtx3 + 48 | 0; //@line 9894
  HEAP32[$421 >> 2] = $24; //@line 9895
  $422 = $ReallocAsyncCtx3 + 52 | 0; //@line 9896
  HEAP32[$422 >> 2] = $26; //@line 9897
  $423 = $ReallocAsyncCtx3 + 56 | 0; //@line 9898
  HEAP32[$423 >> 2] = $28; //@line 9899
  $424 = $ReallocAsyncCtx3 + 60 | 0; //@line 9900
  HEAP32[$424 >> 2] = $30; //@line 9901
  $425 = $ReallocAsyncCtx3 + 64 | 0; //@line 9902
  HEAP32[$425 >> 2] = $32; //@line 9903
  $426 = $ReallocAsyncCtx3 + 68 | 0; //@line 9904
  HEAP32[$426 >> 2] = $34; //@line 9905
  $427 = $ReallocAsyncCtx3 + 72 | 0; //@line 9906
  HEAP32[$427 >> 2] = $36; //@line 9907
  $428 = $ReallocAsyncCtx3 + 76 | 0; //@line 9908
  HEAP32[$428 >> 2] = $38; //@line 9909
  $429 = $ReallocAsyncCtx3 + 80 | 0; //@line 9910
  HEAP32[$429 >> 2] = $40; //@line 9911
  $430 = $ReallocAsyncCtx3 + 84 | 0; //@line 9912
  HEAP32[$430 >> 2] = $42; //@line 9913
  $431 = $ReallocAsyncCtx3 + 88 | 0; //@line 9914
  HEAP32[$431 >> 2] = $44; //@line 9915
  $432 = $ReallocAsyncCtx3 + 92 | 0; //@line 9916
  HEAP32[$432 >> 2] = $46; //@line 9917
  $433 = $ReallocAsyncCtx3 + 96 | 0; //@line 9918
  HEAP32[$433 >> 2] = $48; //@line 9919
  $434 = $ReallocAsyncCtx3 + 100 | 0; //@line 9920
  HEAP32[$434 >> 2] = $50; //@line 9921
  $435 = $ReallocAsyncCtx3 + 104 | 0; //@line 9922
  HEAP32[$435 >> 2] = $52; //@line 9923
  $436 = $ReallocAsyncCtx3 + 108 | 0; //@line 9924
  HEAP32[$436 >> 2] = $54; //@line 9925
  $437 = $ReallocAsyncCtx3 + 112 | 0; //@line 9926
  HEAP32[$437 >> 2] = $56; //@line 9927
  $438 = $ReallocAsyncCtx3 + 116 | 0; //@line 9928
  HEAP32[$438 >> 2] = $58; //@line 9929
  $439 = $ReallocAsyncCtx3 + 120 | 0; //@line 9930
  HEAP8[$439 >> 0] = $402; //@line 9931
  $440 = $ReallocAsyncCtx3 + 124 | 0; //@line 9932
  HEAP32[$440 >> 2] = $62; //@line 9933
  $441 = $ReallocAsyncCtx3 + 128 | 0; //@line 9934
  HEAP32[$441 >> 2] = $60; //@line 9935
  $442 = $ReallocAsyncCtx3 + 132 | 0; //@line 9936
  HEAP32[$442 >> 2] = $64; //@line 9937
  $443 = $ReallocAsyncCtx3 + 136 | 0; //@line 9938
  HEAP32[$443 >> 2] = $68; //@line 9939
  $444 = $ReallocAsyncCtx3 + 140 | 0; //@line 9940
  HEAP32[$444 >> 2] = $66; //@line 9941
  $445 = $ReallocAsyncCtx3 + 144 | 0; //@line 9942
  HEAP32[$445 >> 2] = $70; //@line 9943
  $446 = $ReallocAsyncCtx3 + 148 | 0; //@line 9944
  HEAP32[$446 >> 2] = $72; //@line 9945
  $447 = $ReallocAsyncCtx3 + 152 | 0; //@line 9946
  HEAP32[$447 >> 2] = $76; //@line 9947
  $448 = $ReallocAsyncCtx3 + 156 | 0; //@line 9948
  HEAP32[$448 >> 2] = $78; //@line 9949
  $449 = $ReallocAsyncCtx3 + 160 | 0; //@line 9950
  HEAP32[$449 >> 2] = $80; //@line 9951
  $450 = $ReallocAsyncCtx3 + 164 | 0; //@line 9952
  HEAP32[$450 >> 2] = $82; //@line 9953
  $451 = $ReallocAsyncCtx3 + 168 | 0; //@line 9954
  HEAP32[$451 >> 2] = $84; //@line 9955
  $452 = $ReallocAsyncCtx3 + 172 | 0; //@line 9956
  HEAP32[$452 >> 2] = $86; //@line 9957
  $453 = $ReallocAsyncCtx3 + 176 | 0; //@line 9958
  HEAP32[$453 >> 2] = $88; //@line 9959
  $454 = $ReallocAsyncCtx3 + 180 | 0; //@line 9960
  HEAP32[$454 >> 2] = $90; //@line 9961
  $455 = $ReallocAsyncCtx3 + 184 | 0; //@line 9962
  HEAP32[$455 >> 2] = $92; //@line 9963
  $456 = $ReallocAsyncCtx3 + 188 | 0; //@line 9964
  HEAP32[$456 >> 2] = $94; //@line 9965
  $457 = $ReallocAsyncCtx3 + 192 | 0; //@line 9966
  HEAP32[$457 >> 2] = $96; //@line 9967
  $458 = $ReallocAsyncCtx3 + 196 | 0; //@line 9968
  HEAP32[$458 >> 2] = $98; //@line 9969
  $459 = $ReallocAsyncCtx3 + 200 | 0; //@line 9970
  HEAP32[$459 >> 2] = $100; //@line 9971
  $460 = $ReallocAsyncCtx3 + 204 | 0; //@line 9972
  HEAP32[$460 >> 2] = $102; //@line 9973
  $461 = $ReallocAsyncCtx3 + 208 | 0; //@line 9974
  HEAP32[$461 >> 2] = $104; //@line 9975
  $462 = $ReallocAsyncCtx3 + 212 | 0; //@line 9976
  HEAP32[$462 >> 2] = $106; //@line 9977
  $463 = $ReallocAsyncCtx3 + 216 | 0; //@line 9978
  HEAP32[$463 >> 2] = $108; //@line 9979
  $464 = $ReallocAsyncCtx3 + 220 | 0; //@line 9980
  HEAP32[$464 >> 2] = $110; //@line 9981
  $465 = $ReallocAsyncCtx3 + 224 | 0; //@line 9982
  HEAP32[$465 >> 2] = $112; //@line 9983
  $466 = $ReallocAsyncCtx3 + 228 | 0; //@line 9984
  HEAP8[$466 >> 0] = $114; //@line 9985
  $467 = $ReallocAsyncCtx3 + 232 | 0; //@line 9986
  HEAP32[$467 >> 2] = $116; //@line 9987
  $468 = $ReallocAsyncCtx3 + 236 | 0; //@line 9988
  HEAP32[$468 >> 2] = $118; //@line 9989
  $469 = $ReallocAsyncCtx3 + 240 | 0; //@line 9990
  HEAP32[$469 >> 2] = $120; //@line 9991
  $470 = $ReallocAsyncCtx3 + 244 | 0; //@line 9992
  HEAP32[$470 >> 2] = $122; //@line 9993
  $471 = $ReallocAsyncCtx3 + 248 | 0; //@line 9994
  HEAP32[$471 >> 2] = $124; //@line 9995
  $472 = $ReallocAsyncCtx3 + 252 | 0; //@line 9996
  HEAP32[$472 >> 2] = $126; //@line 9997
  $473 = $ReallocAsyncCtx3 + 256 | 0; //@line 9998
  HEAP8[$473 >> 0] = $128; //@line 9999
  $474 = $ReallocAsyncCtx3 + 257 | 0; //@line 10000
  HEAP8[$474 >> 0] = $130; //@line 10001
  $475 = $ReallocAsyncCtx3 + 260 | 0; //@line 10002
  HEAP32[$475 >> 2] = $132; //@line 10003
  $476 = $ReallocAsyncCtx3 + 264 | 0; //@line 10004
  HEAP32[$476 >> 2] = $134; //@line 10005
  sp = STACKTOP; //@line 10006
  return;
 } else if ((label | 0) == 24) {
  $495 = $$0$be + 2 << 24 >> 24; //@line 10010
  $498 = HEAP8[$126 + ($137 & 255) >> 0] | 0; //@line 10013
  HEAP8[$54 >> 0] = 0; //@line 10014
  $499 = $498 & 255; //@line 10015
  HEAP8[$70 >> 0] = $499 >>> 5 & 1; //@line 10019
  if ($499 & 16 | 0) {
   HEAP8[$54 >> 0] = 1; //@line 10023
  }
  HEAP8[$80 >> 0] = $499 & 15; //@line 10027
  $508 = HEAP32[(HEAP32[$84 >> 2] | 0) + 44 >> 2] | 0; //@line 10030
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(272) | 0; //@line 10031
  $509 = FUNCTION_TABLE_iii[$508 & 31]($122, $56) | 0; //@line 10032
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 579; //@line 10035
   $510 = $ReallocAsyncCtx4 + 4 | 0; //@line 10036
   HEAP32[$510 >> 2] = $2; //@line 10037
   $511 = $ReallocAsyncCtx4 + 8 | 0; //@line 10038
   HEAP32[$511 >> 2] = $4; //@line 10039
   $512 = $ReallocAsyncCtx4 + 12 | 0; //@line 10040
   HEAP32[$512 >> 2] = $6; //@line 10041
   $513 = $ReallocAsyncCtx4 + 16 | 0; //@line 10042
   HEAP32[$513 >> 2] = $8; //@line 10043
   $514 = $ReallocAsyncCtx4 + 20 | 0; //@line 10044
   HEAP32[$514 >> 2] = $10; //@line 10045
   $515 = $ReallocAsyncCtx4 + 24 | 0; //@line 10046
   HEAP32[$515 >> 2] = $$096$be; //@line 10047
   $516 = $ReallocAsyncCtx4 + 28 | 0; //@line 10048
   HEAP32[$516 >> 2] = $14; //@line 10049
   $517 = $ReallocAsyncCtx4 + 32 | 0; //@line 10050
   HEAP32[$517 >> 2] = $12; //@line 10051
   $518 = $ReallocAsyncCtx4 + 36 | 0; //@line 10052
   HEAP32[$518 >> 2] = $16; //@line 10053
   $519 = $ReallocAsyncCtx4 + 40 | 0; //@line 10054
   HEAP32[$519 >> 2] = $18; //@line 10055
   $520 = $ReallocAsyncCtx4 + 44 | 0; //@line 10056
   HEAP32[$520 >> 2] = $20; //@line 10057
   $521 = $ReallocAsyncCtx4 + 48 | 0; //@line 10058
   HEAP32[$521 >> 2] = $22; //@line 10059
   $522 = $ReallocAsyncCtx4 + 52 | 0; //@line 10060
   HEAP32[$522 >> 2] = $24; //@line 10061
   $523 = $ReallocAsyncCtx4 + 56 | 0; //@line 10062
   HEAP32[$523 >> 2] = $26; //@line 10063
   $524 = $ReallocAsyncCtx4 + 60 | 0; //@line 10064
   HEAP32[$524 >> 2] = $28; //@line 10065
   $525 = $ReallocAsyncCtx4 + 64 | 0; //@line 10066
   HEAP8[$525 >> 0] = $495; //@line 10067
   $526 = $ReallocAsyncCtx4 + 68 | 0; //@line 10068
   HEAP32[$526 >> 2] = $30; //@line 10069
   $527 = $ReallocAsyncCtx4 + 72 | 0; //@line 10070
   HEAP32[$527 >> 2] = $32; //@line 10071
   $528 = $ReallocAsyncCtx4 + 76 | 0; //@line 10072
   HEAP32[$528 >> 2] = $34; //@line 10073
   $529 = $ReallocAsyncCtx4 + 80 | 0; //@line 10074
   HEAP32[$529 >> 2] = $36; //@line 10075
   $530 = $ReallocAsyncCtx4 + 84 | 0; //@line 10076
   HEAP32[$530 >> 2] = $38; //@line 10077
   $531 = $ReallocAsyncCtx4 + 88 | 0; //@line 10078
   HEAP32[$531 >> 2] = $40; //@line 10079
   $532 = $ReallocAsyncCtx4 + 92 | 0; //@line 10080
   HEAP32[$532 >> 2] = $42; //@line 10081
   $533 = $ReallocAsyncCtx4 + 96 | 0; //@line 10082
   HEAP32[$533 >> 2] = $44; //@line 10083
   $534 = $ReallocAsyncCtx4 + 100 | 0; //@line 10084
   HEAP32[$534 >> 2] = $46; //@line 10085
   $535 = $ReallocAsyncCtx4 + 104 | 0; //@line 10086
   HEAP32[$535 >> 2] = $48; //@line 10087
   $536 = $ReallocAsyncCtx4 + 108 | 0; //@line 10088
   HEAP32[$536 >> 2] = $50; //@line 10089
   $537 = $ReallocAsyncCtx4 + 112 | 0; //@line 10090
   HEAP32[$537 >> 2] = $52; //@line 10091
   $538 = $ReallocAsyncCtx4 + 116 | 0; //@line 10092
   HEAP32[$538 >> 2] = $54; //@line 10093
   $539 = $ReallocAsyncCtx4 + 120 | 0; //@line 10094
   HEAP32[$539 >> 2] = $56; //@line 10095
   $540 = $ReallocAsyncCtx4 + 124 | 0; //@line 10096
   HEAP32[$540 >> 2] = $58; //@line 10097
   $541 = $ReallocAsyncCtx4 + 128 | 0; //@line 10098
   HEAP32[$541 >> 2] = $60; //@line 10099
   $542 = $ReallocAsyncCtx4 + 132 | 0; //@line 10100
   HEAP32[$542 >> 2] = $62; //@line 10101
   $543 = $ReallocAsyncCtx4 + 136 | 0; //@line 10102
   HEAP32[$543 >> 2] = $64; //@line 10103
   $544 = $ReallocAsyncCtx4 + 140 | 0; //@line 10104
   HEAP32[$544 >> 2] = $66; //@line 10105
   $545 = $ReallocAsyncCtx4 + 144 | 0; //@line 10106
   HEAP32[$545 >> 2] = $68; //@line 10107
   $546 = $ReallocAsyncCtx4 + 148 | 0; //@line 10108
   HEAP32[$546 >> 2] = $70; //@line 10109
   $547 = $ReallocAsyncCtx4 + 152 | 0; //@line 10110
   HEAP32[$547 >> 2] = $72; //@line 10111
   $548 = $ReallocAsyncCtx4 + 156 | 0; //@line 10112
   HEAP32[$548 >> 2] = $76; //@line 10113
   $549 = $ReallocAsyncCtx4 + 160 | 0; //@line 10114
   HEAP32[$549 >> 2] = $78; //@line 10115
   $550 = $ReallocAsyncCtx4 + 164 | 0; //@line 10116
   HEAP32[$550 >> 2] = $80; //@line 10117
   $551 = $ReallocAsyncCtx4 + 168 | 0; //@line 10118
   HEAP32[$551 >> 2] = $82; //@line 10119
   $552 = $ReallocAsyncCtx4 + 172 | 0; //@line 10120
   HEAP32[$552 >> 2] = $84; //@line 10121
   $553 = $ReallocAsyncCtx4 + 176 | 0; //@line 10122
   HEAP32[$553 >> 2] = $86; //@line 10123
   $554 = $ReallocAsyncCtx4 + 180 | 0; //@line 10124
   HEAP32[$554 >> 2] = $88; //@line 10125
   $555 = $ReallocAsyncCtx4 + 184 | 0; //@line 10126
   HEAP32[$555 >> 2] = $90; //@line 10127
   $556 = $ReallocAsyncCtx4 + 188 | 0; //@line 10128
   HEAP32[$556 >> 2] = $92; //@line 10129
   $557 = $ReallocAsyncCtx4 + 192 | 0; //@line 10130
   HEAP32[$557 >> 2] = $94; //@line 10131
   $558 = $ReallocAsyncCtx4 + 196 | 0; //@line 10132
   HEAP32[$558 >> 2] = $96; //@line 10133
   $559 = $ReallocAsyncCtx4 + 200 | 0; //@line 10134
   HEAP32[$559 >> 2] = $98; //@line 10135
   $560 = $ReallocAsyncCtx4 + 204 | 0; //@line 10136
   HEAP32[$560 >> 2] = $100; //@line 10137
   $561 = $ReallocAsyncCtx4 + 208 | 0; //@line 10138
   HEAP32[$561 >> 2] = $102; //@line 10139
   $562 = $ReallocAsyncCtx4 + 212 | 0; //@line 10140
   HEAP32[$562 >> 2] = $104; //@line 10141
   $563 = $ReallocAsyncCtx4 + 216 | 0; //@line 10142
   HEAP32[$563 >> 2] = $106; //@line 10143
   $564 = $ReallocAsyncCtx4 + 220 | 0; //@line 10144
   HEAP32[$564 >> 2] = $108; //@line 10145
   $565 = $ReallocAsyncCtx4 + 224 | 0; //@line 10146
   HEAP32[$565 >> 2] = $110; //@line 10147
   $566 = $ReallocAsyncCtx4 + 228 | 0; //@line 10148
   HEAP32[$566 >> 2] = $112; //@line 10149
   $567 = $ReallocAsyncCtx4 + 232 | 0; //@line 10150
   HEAP8[$567 >> 0] = $114; //@line 10151
   $568 = $ReallocAsyncCtx4 + 236 | 0; //@line 10152
   HEAP32[$568 >> 2] = $116; //@line 10153
   $569 = $ReallocAsyncCtx4 + 240 | 0; //@line 10154
   HEAP32[$569 >> 2] = $118; //@line 10155
   $570 = $ReallocAsyncCtx4 + 244 | 0; //@line 10156
   HEAP32[$570 >> 2] = $120; //@line 10157
   $571 = $ReallocAsyncCtx4 + 248 | 0; //@line 10158
   HEAP32[$571 >> 2] = $122; //@line 10159
   $572 = $ReallocAsyncCtx4 + 252 | 0; //@line 10160
   HEAP32[$572 >> 2] = $124; //@line 10161
   $573 = $ReallocAsyncCtx4 + 256 | 0; //@line 10162
   HEAP32[$573 >> 2] = $126; //@line 10163
   $574 = $ReallocAsyncCtx4 + 260 | 0; //@line 10164
   HEAP8[$574 >> 0] = $128; //@line 10165
   $575 = $ReallocAsyncCtx4 + 261 | 0; //@line 10166
   HEAP8[$575 >> 0] = $130; //@line 10167
   $576 = $ReallocAsyncCtx4 + 264 | 0; //@line 10168
   HEAP32[$576 >> 2] = $132; //@line 10169
   $577 = $ReallocAsyncCtx4 + 268 | 0; //@line 10170
   HEAP32[$577 >> 2] = $134; //@line 10171
   sp = STACKTOP; //@line 10172
   return;
  }
  HEAP8[___async_retval >> 0] = $509 & 1; //@line 10177
  ___async_unwind = 0; //@line 10178
  HEAP32[$ReallocAsyncCtx4 >> 2] = 579; //@line 10179
  $510 = $ReallocAsyncCtx4 + 4 | 0; //@line 10180
  HEAP32[$510 >> 2] = $2; //@line 10181
  $511 = $ReallocAsyncCtx4 + 8 | 0; //@line 10182
  HEAP32[$511 >> 2] = $4; //@line 10183
  $512 = $ReallocAsyncCtx4 + 12 | 0; //@line 10184
  HEAP32[$512 >> 2] = $6; //@line 10185
  $513 = $ReallocAsyncCtx4 + 16 | 0; //@line 10186
  HEAP32[$513 >> 2] = $8; //@line 10187
  $514 = $ReallocAsyncCtx4 + 20 | 0; //@line 10188
  HEAP32[$514 >> 2] = $10; //@line 10189
  $515 = $ReallocAsyncCtx4 + 24 | 0; //@line 10190
  HEAP32[$515 >> 2] = $$096$be; //@line 10191
  $516 = $ReallocAsyncCtx4 + 28 | 0; //@line 10192
  HEAP32[$516 >> 2] = $14; //@line 10193
  $517 = $ReallocAsyncCtx4 + 32 | 0; //@line 10194
  HEAP32[$517 >> 2] = $12; //@line 10195
  $518 = $ReallocAsyncCtx4 + 36 | 0; //@line 10196
  HEAP32[$518 >> 2] = $16; //@line 10197
  $519 = $ReallocAsyncCtx4 + 40 | 0; //@line 10198
  HEAP32[$519 >> 2] = $18; //@line 10199
  $520 = $ReallocAsyncCtx4 + 44 | 0; //@line 10200
  HEAP32[$520 >> 2] = $20; //@line 10201
  $521 = $ReallocAsyncCtx4 + 48 | 0; //@line 10202
  HEAP32[$521 >> 2] = $22; //@line 10203
  $522 = $ReallocAsyncCtx4 + 52 | 0; //@line 10204
  HEAP32[$522 >> 2] = $24; //@line 10205
  $523 = $ReallocAsyncCtx4 + 56 | 0; //@line 10206
  HEAP32[$523 >> 2] = $26; //@line 10207
  $524 = $ReallocAsyncCtx4 + 60 | 0; //@line 10208
  HEAP32[$524 >> 2] = $28; //@line 10209
  $525 = $ReallocAsyncCtx4 + 64 | 0; //@line 10210
  HEAP8[$525 >> 0] = $495; //@line 10211
  $526 = $ReallocAsyncCtx4 + 68 | 0; //@line 10212
  HEAP32[$526 >> 2] = $30; //@line 10213
  $527 = $ReallocAsyncCtx4 + 72 | 0; //@line 10214
  HEAP32[$527 >> 2] = $32; //@line 10215
  $528 = $ReallocAsyncCtx4 + 76 | 0; //@line 10216
  HEAP32[$528 >> 2] = $34; //@line 10217
  $529 = $ReallocAsyncCtx4 + 80 | 0; //@line 10218
  HEAP32[$529 >> 2] = $36; //@line 10219
  $530 = $ReallocAsyncCtx4 + 84 | 0; //@line 10220
  HEAP32[$530 >> 2] = $38; //@line 10221
  $531 = $ReallocAsyncCtx4 + 88 | 0; //@line 10222
  HEAP32[$531 >> 2] = $40; //@line 10223
  $532 = $ReallocAsyncCtx4 + 92 | 0; //@line 10224
  HEAP32[$532 >> 2] = $42; //@line 10225
  $533 = $ReallocAsyncCtx4 + 96 | 0; //@line 10226
  HEAP32[$533 >> 2] = $44; //@line 10227
  $534 = $ReallocAsyncCtx4 + 100 | 0; //@line 10228
  HEAP32[$534 >> 2] = $46; //@line 10229
  $535 = $ReallocAsyncCtx4 + 104 | 0; //@line 10230
  HEAP32[$535 >> 2] = $48; //@line 10231
  $536 = $ReallocAsyncCtx4 + 108 | 0; //@line 10232
  HEAP32[$536 >> 2] = $50; //@line 10233
  $537 = $ReallocAsyncCtx4 + 112 | 0; //@line 10234
  HEAP32[$537 >> 2] = $52; //@line 10235
  $538 = $ReallocAsyncCtx4 + 116 | 0; //@line 10236
  HEAP32[$538 >> 2] = $54; //@line 10237
  $539 = $ReallocAsyncCtx4 + 120 | 0; //@line 10238
  HEAP32[$539 >> 2] = $56; //@line 10239
  $540 = $ReallocAsyncCtx4 + 124 | 0; //@line 10240
  HEAP32[$540 >> 2] = $58; //@line 10241
  $541 = $ReallocAsyncCtx4 + 128 | 0; //@line 10242
  HEAP32[$541 >> 2] = $60; //@line 10243
  $542 = $ReallocAsyncCtx4 + 132 | 0; //@line 10244
  HEAP32[$542 >> 2] = $62; //@line 10245
  $543 = $ReallocAsyncCtx4 + 136 | 0; //@line 10246
  HEAP32[$543 >> 2] = $64; //@line 10247
  $544 = $ReallocAsyncCtx4 + 140 | 0; //@line 10248
  HEAP32[$544 >> 2] = $66; //@line 10249
  $545 = $ReallocAsyncCtx4 + 144 | 0; //@line 10250
  HEAP32[$545 >> 2] = $68; //@line 10251
  $546 = $ReallocAsyncCtx4 + 148 | 0; //@line 10252
  HEAP32[$546 >> 2] = $70; //@line 10253
  $547 = $ReallocAsyncCtx4 + 152 | 0; //@line 10254
  HEAP32[$547 >> 2] = $72; //@line 10255
  $548 = $ReallocAsyncCtx4 + 156 | 0; //@line 10256
  HEAP32[$548 >> 2] = $76; //@line 10257
  $549 = $ReallocAsyncCtx4 + 160 | 0; //@line 10258
  HEAP32[$549 >> 2] = $78; //@line 10259
  $550 = $ReallocAsyncCtx4 + 164 | 0; //@line 10260
  HEAP32[$550 >> 2] = $80; //@line 10261
  $551 = $ReallocAsyncCtx4 + 168 | 0; //@line 10262
  HEAP32[$551 >> 2] = $82; //@line 10263
  $552 = $ReallocAsyncCtx4 + 172 | 0; //@line 10264
  HEAP32[$552 >> 2] = $84; //@line 10265
  $553 = $ReallocAsyncCtx4 + 176 | 0; //@line 10266
  HEAP32[$553 >> 2] = $86; //@line 10267
  $554 = $ReallocAsyncCtx4 + 180 | 0; //@line 10268
  HEAP32[$554 >> 2] = $88; //@line 10269
  $555 = $ReallocAsyncCtx4 + 184 | 0; //@line 10270
  HEAP32[$555 >> 2] = $90; //@line 10271
  $556 = $ReallocAsyncCtx4 + 188 | 0; //@line 10272
  HEAP32[$556 >> 2] = $92; //@line 10273
  $557 = $ReallocAsyncCtx4 + 192 | 0; //@line 10274
  HEAP32[$557 >> 2] = $94; //@line 10275
  $558 = $ReallocAsyncCtx4 + 196 | 0; //@line 10276
  HEAP32[$558 >> 2] = $96; //@line 10277
  $559 = $ReallocAsyncCtx4 + 200 | 0; //@line 10278
  HEAP32[$559 >> 2] = $98; //@line 10279
  $560 = $ReallocAsyncCtx4 + 204 | 0; //@line 10280
  HEAP32[$560 >> 2] = $100; //@line 10281
  $561 = $ReallocAsyncCtx4 + 208 | 0; //@line 10282
  HEAP32[$561 >> 2] = $102; //@line 10283
  $562 = $ReallocAsyncCtx4 + 212 | 0; //@line 10284
  HEAP32[$562 >> 2] = $104; //@line 10285
  $563 = $ReallocAsyncCtx4 + 216 | 0; //@line 10286
  HEAP32[$563 >> 2] = $106; //@line 10287
  $564 = $ReallocAsyncCtx4 + 220 | 0; //@line 10288
  HEAP32[$564 >> 2] = $108; //@line 10289
  $565 = $ReallocAsyncCtx4 + 224 | 0; //@line 10290
  HEAP32[$565 >> 2] = $110; //@line 10291
  $566 = $ReallocAsyncCtx4 + 228 | 0; //@line 10292
  HEAP32[$566 >> 2] = $112; //@line 10293
  $567 = $ReallocAsyncCtx4 + 232 | 0; //@line 10294
  HEAP8[$567 >> 0] = $114; //@line 10295
  $568 = $ReallocAsyncCtx4 + 236 | 0; //@line 10296
  HEAP32[$568 >> 2] = $116; //@line 10297
  $569 = $ReallocAsyncCtx4 + 240 | 0; //@line 10298
  HEAP32[$569 >> 2] = $118; //@line 10299
  $570 = $ReallocAsyncCtx4 + 244 | 0; //@line 10300
  HEAP32[$570 >> 2] = $120; //@line 10301
  $571 = $ReallocAsyncCtx4 + 248 | 0; //@line 10302
  HEAP32[$571 >> 2] = $122; //@line 10303
  $572 = $ReallocAsyncCtx4 + 252 | 0; //@line 10304
  HEAP32[$572 >> 2] = $124; //@line 10305
  $573 = $ReallocAsyncCtx4 + 256 | 0; //@line 10306
  HEAP32[$573 >> 2] = $126; //@line 10307
  $574 = $ReallocAsyncCtx4 + 260 | 0; //@line 10308
  HEAP8[$574 >> 0] = $128; //@line 10309
  $575 = $ReallocAsyncCtx4 + 261 | 0; //@line 10310
  HEAP8[$575 >> 0] = $130; //@line 10311
  $576 = $ReallocAsyncCtx4 + 264 | 0; //@line 10312
  HEAP32[$576 >> 2] = $132; //@line 10313
  $577 = $ReallocAsyncCtx4 + 268 | 0; //@line 10314
  HEAP32[$577 >> 2] = $134; //@line 10315
  sp = STACKTOP; //@line 10316
  return;
 } else if ((label | 0) == 29) {
  HEAP8[$110 >> 0] = HEAP8[$126 + ($137 & 255) >> 0] | 0; //@line 10324
  $595 = $$0$be + 5 << 24 >> 24; //@line 10337
  HEAP32[$120 >> 2] = (HEAPU8[$126 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$126 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$126 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 10345
  $605 = HEAP32[(HEAP32[$134 >> 2] | 0) + 48 >> 2] | 0; //@line 10348
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(268) | 0; //@line 10349
  $606 = FUNCTION_TABLE_iii[$605 & 31]($122, $58) | 0; //@line 10350
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 580; //@line 10353
   $607 = $ReallocAsyncCtx5 + 4 | 0; //@line 10354
   HEAP32[$607 >> 2] = $2; //@line 10355
   $608 = $ReallocAsyncCtx5 + 8 | 0; //@line 10356
   HEAP32[$608 >> 2] = $4; //@line 10357
   $609 = $ReallocAsyncCtx5 + 12 | 0; //@line 10358
   HEAP32[$609 >> 2] = $6; //@line 10359
   $610 = $ReallocAsyncCtx5 + 16 | 0; //@line 10360
   HEAP32[$610 >> 2] = $8; //@line 10361
   $611 = $ReallocAsyncCtx5 + 20 | 0; //@line 10362
   HEAP32[$611 >> 2] = $10; //@line 10363
   $612 = $ReallocAsyncCtx5 + 24 | 0; //@line 10364
   HEAP32[$612 >> 2] = $12; //@line 10365
   $613 = $ReallocAsyncCtx5 + 28 | 0; //@line 10366
   HEAP32[$613 >> 2] = $14; //@line 10367
   $614 = $ReallocAsyncCtx5 + 32 | 0; //@line 10368
   HEAP32[$614 >> 2] = $16; //@line 10369
   $615 = $ReallocAsyncCtx5 + 36 | 0; //@line 10370
   HEAP32[$615 >> 2] = $18; //@line 10371
   $616 = $ReallocAsyncCtx5 + 40 | 0; //@line 10372
   HEAP32[$616 >> 2] = $20; //@line 10373
   $617 = $ReallocAsyncCtx5 + 44 | 0; //@line 10374
   HEAP32[$617 >> 2] = $22; //@line 10375
   $618 = $ReallocAsyncCtx5 + 48 | 0; //@line 10376
   HEAP32[$618 >> 2] = $24; //@line 10377
   $619 = $ReallocAsyncCtx5 + 52 | 0; //@line 10378
   HEAP32[$619 >> 2] = $26; //@line 10379
   $620 = $ReallocAsyncCtx5 + 56 | 0; //@line 10380
   HEAP32[$620 >> 2] = $28; //@line 10381
   $621 = $ReallocAsyncCtx5 + 60 | 0; //@line 10382
   HEAP32[$621 >> 2] = $30; //@line 10383
   $622 = $ReallocAsyncCtx5 + 64 | 0; //@line 10384
   HEAP32[$622 >> 2] = $32; //@line 10385
   $623 = $ReallocAsyncCtx5 + 68 | 0; //@line 10386
   HEAP32[$623 >> 2] = $34; //@line 10387
   $624 = $ReallocAsyncCtx5 + 72 | 0; //@line 10388
   HEAP32[$624 >> 2] = $36; //@line 10389
   $625 = $ReallocAsyncCtx5 + 76 | 0; //@line 10390
   HEAP32[$625 >> 2] = $38; //@line 10391
   $626 = $ReallocAsyncCtx5 + 80 | 0; //@line 10392
   HEAP32[$626 >> 2] = $40; //@line 10393
   $627 = $ReallocAsyncCtx5 + 84 | 0; //@line 10394
   HEAP32[$627 >> 2] = $42; //@line 10395
   $628 = $ReallocAsyncCtx5 + 88 | 0; //@line 10396
   HEAP32[$628 >> 2] = $44; //@line 10397
   $629 = $ReallocAsyncCtx5 + 92 | 0; //@line 10398
   HEAP32[$629 >> 2] = $46; //@line 10399
   $630 = $ReallocAsyncCtx5 + 96 | 0; //@line 10400
   HEAP32[$630 >> 2] = $48; //@line 10401
   $631 = $ReallocAsyncCtx5 + 100 | 0; //@line 10402
   HEAP32[$631 >> 2] = $50; //@line 10403
   $632 = $ReallocAsyncCtx5 + 104 | 0; //@line 10404
   HEAP32[$632 >> 2] = $52; //@line 10405
   $633 = $ReallocAsyncCtx5 + 108 | 0; //@line 10406
   HEAP32[$633 >> 2] = $54; //@line 10407
   $634 = $ReallocAsyncCtx5 + 112 | 0; //@line 10408
   HEAP32[$634 >> 2] = $56; //@line 10409
   $635 = $ReallocAsyncCtx5 + 116 | 0; //@line 10410
   HEAP32[$635 >> 2] = $58; //@line 10411
   $636 = $ReallocAsyncCtx5 + 120 | 0; //@line 10412
   HEAP32[$636 >> 2] = $60; //@line 10413
   $637 = $ReallocAsyncCtx5 + 124 | 0; //@line 10414
   HEAP32[$637 >> 2] = $62; //@line 10415
   $638 = $ReallocAsyncCtx5 + 128 | 0; //@line 10416
   HEAP32[$638 >> 2] = $64; //@line 10417
   $639 = $ReallocAsyncCtx5 + 132 | 0; //@line 10418
   HEAP8[$639 >> 0] = $595; //@line 10419
   $640 = $ReallocAsyncCtx5 + 136 | 0; //@line 10420
   HEAP32[$640 >> 2] = $66; //@line 10421
   $641 = $ReallocAsyncCtx5 + 140 | 0; //@line 10422
   HEAP32[$641 >> 2] = $68; //@line 10423
   $642 = $ReallocAsyncCtx5 + 144 | 0; //@line 10424
   HEAP32[$642 >> 2] = $70; //@line 10425
   $643 = $ReallocAsyncCtx5 + 148 | 0; //@line 10426
   HEAP32[$643 >> 2] = $72; //@line 10427
   $644 = $ReallocAsyncCtx5 + 152 | 0; //@line 10428
   HEAP32[$644 >> 2] = $76; //@line 10429
   $645 = $ReallocAsyncCtx5 + 156 | 0; //@line 10430
   HEAP32[$645 >> 2] = $78; //@line 10431
   $646 = $ReallocAsyncCtx5 + 160 | 0; //@line 10432
   HEAP32[$646 >> 2] = $80; //@line 10433
   $647 = $ReallocAsyncCtx5 + 164 | 0; //@line 10434
   HEAP32[$647 >> 2] = $82; //@line 10435
   $648 = $ReallocAsyncCtx5 + 168 | 0; //@line 10436
   HEAP32[$648 >> 2] = $84; //@line 10437
   $649 = $ReallocAsyncCtx5 + 172 | 0; //@line 10438
   HEAP32[$649 >> 2] = $86; //@line 10439
   $650 = $ReallocAsyncCtx5 + 176 | 0; //@line 10440
   HEAP32[$650 >> 2] = $88; //@line 10441
   $651 = $ReallocAsyncCtx5 + 180 | 0; //@line 10442
   HEAP32[$651 >> 2] = $90; //@line 10443
   $652 = $ReallocAsyncCtx5 + 184 | 0; //@line 10444
   HEAP32[$652 >> 2] = $92; //@line 10445
   $653 = $ReallocAsyncCtx5 + 188 | 0; //@line 10446
   HEAP32[$653 >> 2] = $94; //@line 10447
   $654 = $ReallocAsyncCtx5 + 192 | 0; //@line 10448
   HEAP32[$654 >> 2] = $96; //@line 10449
   $655 = $ReallocAsyncCtx5 + 196 | 0; //@line 10450
   HEAP32[$655 >> 2] = $98; //@line 10451
   $656 = $ReallocAsyncCtx5 + 200 | 0; //@line 10452
   HEAP32[$656 >> 2] = $100; //@line 10453
   $657 = $ReallocAsyncCtx5 + 204 | 0; //@line 10454
   HEAP32[$657 >> 2] = $102; //@line 10455
   $658 = $ReallocAsyncCtx5 + 208 | 0; //@line 10456
   HEAP32[$658 >> 2] = $104; //@line 10457
   $659 = $ReallocAsyncCtx5 + 212 | 0; //@line 10458
   HEAP32[$659 >> 2] = $106; //@line 10459
   $660 = $ReallocAsyncCtx5 + 216 | 0; //@line 10460
   HEAP32[$660 >> 2] = $108; //@line 10461
   $661 = $ReallocAsyncCtx5 + 220 | 0; //@line 10462
   HEAP32[$661 >> 2] = $110; //@line 10463
   $662 = $ReallocAsyncCtx5 + 224 | 0; //@line 10464
   HEAP32[$662 >> 2] = $112; //@line 10465
   $663 = $ReallocAsyncCtx5 + 228 | 0; //@line 10466
   HEAP8[$663 >> 0] = $114; //@line 10467
   $664 = $ReallocAsyncCtx5 + 232 | 0; //@line 10468
   HEAP32[$664 >> 2] = $116; //@line 10469
   $665 = $ReallocAsyncCtx5 + 236 | 0; //@line 10470
   HEAP32[$665 >> 2] = $118; //@line 10471
   $666 = $ReallocAsyncCtx5 + 240 | 0; //@line 10472
   HEAP32[$666 >> 2] = $120; //@line 10473
   $667 = $ReallocAsyncCtx5 + 244 | 0; //@line 10474
   HEAP32[$667 >> 2] = $122; //@line 10475
   $668 = $ReallocAsyncCtx5 + 248 | 0; //@line 10476
   HEAP32[$668 >> 2] = $124; //@line 10477
   $669 = $ReallocAsyncCtx5 + 252 | 0; //@line 10478
   HEAP32[$669 >> 2] = $126; //@line 10479
   $670 = $ReallocAsyncCtx5 + 256 | 0; //@line 10480
   HEAP8[$670 >> 0] = $128; //@line 10481
   $671 = $ReallocAsyncCtx5 + 257 | 0; //@line 10482
   HEAP8[$671 >> 0] = $130; //@line 10483
   $672 = $ReallocAsyncCtx5 + 260 | 0; //@line 10484
   HEAP32[$672 >> 2] = $132; //@line 10485
   $673 = $ReallocAsyncCtx5 + 264 | 0; //@line 10486
   HEAP32[$673 >> 2] = $134; //@line 10487
   sp = STACKTOP; //@line 10488
   return;
  }
  HEAP8[___async_retval >> 0] = $606; //@line 10492
  ___async_unwind = 0; //@line 10493
  HEAP32[$ReallocAsyncCtx5 >> 2] = 580; //@line 10494
  $607 = $ReallocAsyncCtx5 + 4 | 0; //@line 10495
  HEAP32[$607 >> 2] = $2; //@line 10496
  $608 = $ReallocAsyncCtx5 + 8 | 0; //@line 10497
  HEAP32[$608 >> 2] = $4; //@line 10498
  $609 = $ReallocAsyncCtx5 + 12 | 0; //@line 10499
  HEAP32[$609 >> 2] = $6; //@line 10500
  $610 = $ReallocAsyncCtx5 + 16 | 0; //@line 10501
  HEAP32[$610 >> 2] = $8; //@line 10502
  $611 = $ReallocAsyncCtx5 + 20 | 0; //@line 10503
  HEAP32[$611 >> 2] = $10; //@line 10504
  $612 = $ReallocAsyncCtx5 + 24 | 0; //@line 10505
  HEAP32[$612 >> 2] = $12; //@line 10506
  $613 = $ReallocAsyncCtx5 + 28 | 0; //@line 10507
  HEAP32[$613 >> 2] = $14; //@line 10508
  $614 = $ReallocAsyncCtx5 + 32 | 0; //@line 10509
  HEAP32[$614 >> 2] = $16; //@line 10510
  $615 = $ReallocAsyncCtx5 + 36 | 0; //@line 10511
  HEAP32[$615 >> 2] = $18; //@line 10512
  $616 = $ReallocAsyncCtx5 + 40 | 0; //@line 10513
  HEAP32[$616 >> 2] = $20; //@line 10514
  $617 = $ReallocAsyncCtx5 + 44 | 0; //@line 10515
  HEAP32[$617 >> 2] = $22; //@line 10516
  $618 = $ReallocAsyncCtx5 + 48 | 0; //@line 10517
  HEAP32[$618 >> 2] = $24; //@line 10518
  $619 = $ReallocAsyncCtx5 + 52 | 0; //@line 10519
  HEAP32[$619 >> 2] = $26; //@line 10520
  $620 = $ReallocAsyncCtx5 + 56 | 0; //@line 10521
  HEAP32[$620 >> 2] = $28; //@line 10522
  $621 = $ReallocAsyncCtx5 + 60 | 0; //@line 10523
  HEAP32[$621 >> 2] = $30; //@line 10524
  $622 = $ReallocAsyncCtx5 + 64 | 0; //@line 10525
  HEAP32[$622 >> 2] = $32; //@line 10526
  $623 = $ReallocAsyncCtx5 + 68 | 0; //@line 10527
  HEAP32[$623 >> 2] = $34; //@line 10528
  $624 = $ReallocAsyncCtx5 + 72 | 0; //@line 10529
  HEAP32[$624 >> 2] = $36; //@line 10530
  $625 = $ReallocAsyncCtx5 + 76 | 0; //@line 10531
  HEAP32[$625 >> 2] = $38; //@line 10532
  $626 = $ReallocAsyncCtx5 + 80 | 0; //@line 10533
  HEAP32[$626 >> 2] = $40; //@line 10534
  $627 = $ReallocAsyncCtx5 + 84 | 0; //@line 10535
  HEAP32[$627 >> 2] = $42; //@line 10536
  $628 = $ReallocAsyncCtx5 + 88 | 0; //@line 10537
  HEAP32[$628 >> 2] = $44; //@line 10538
  $629 = $ReallocAsyncCtx5 + 92 | 0; //@line 10539
  HEAP32[$629 >> 2] = $46; //@line 10540
  $630 = $ReallocAsyncCtx5 + 96 | 0; //@line 10541
  HEAP32[$630 >> 2] = $48; //@line 10542
  $631 = $ReallocAsyncCtx5 + 100 | 0; //@line 10543
  HEAP32[$631 >> 2] = $50; //@line 10544
  $632 = $ReallocAsyncCtx5 + 104 | 0; //@line 10545
  HEAP32[$632 >> 2] = $52; //@line 10546
  $633 = $ReallocAsyncCtx5 + 108 | 0; //@line 10547
  HEAP32[$633 >> 2] = $54; //@line 10548
  $634 = $ReallocAsyncCtx5 + 112 | 0; //@line 10549
  HEAP32[$634 >> 2] = $56; //@line 10550
  $635 = $ReallocAsyncCtx5 + 116 | 0; //@line 10551
  HEAP32[$635 >> 2] = $58; //@line 10552
  $636 = $ReallocAsyncCtx5 + 120 | 0; //@line 10553
  HEAP32[$636 >> 2] = $60; //@line 10554
  $637 = $ReallocAsyncCtx5 + 124 | 0; //@line 10555
  HEAP32[$637 >> 2] = $62; //@line 10556
  $638 = $ReallocAsyncCtx5 + 128 | 0; //@line 10557
  HEAP32[$638 >> 2] = $64; //@line 10558
  $639 = $ReallocAsyncCtx5 + 132 | 0; //@line 10559
  HEAP8[$639 >> 0] = $595; //@line 10560
  $640 = $ReallocAsyncCtx5 + 136 | 0; //@line 10561
  HEAP32[$640 >> 2] = $66; //@line 10562
  $641 = $ReallocAsyncCtx5 + 140 | 0; //@line 10563
  HEAP32[$641 >> 2] = $68; //@line 10564
  $642 = $ReallocAsyncCtx5 + 144 | 0; //@line 10565
  HEAP32[$642 >> 2] = $70; //@line 10566
  $643 = $ReallocAsyncCtx5 + 148 | 0; //@line 10567
  HEAP32[$643 >> 2] = $72; //@line 10568
  $644 = $ReallocAsyncCtx5 + 152 | 0; //@line 10569
  HEAP32[$644 >> 2] = $76; //@line 10570
  $645 = $ReallocAsyncCtx5 + 156 | 0; //@line 10571
  HEAP32[$645 >> 2] = $78; //@line 10572
  $646 = $ReallocAsyncCtx5 + 160 | 0; //@line 10573
  HEAP32[$646 >> 2] = $80; //@line 10574
  $647 = $ReallocAsyncCtx5 + 164 | 0; //@line 10575
  HEAP32[$647 >> 2] = $82; //@line 10576
  $648 = $ReallocAsyncCtx5 + 168 | 0; //@line 10577
  HEAP32[$648 >> 2] = $84; //@line 10578
  $649 = $ReallocAsyncCtx5 + 172 | 0; //@line 10579
  HEAP32[$649 >> 2] = $86; //@line 10580
  $650 = $ReallocAsyncCtx5 + 176 | 0; //@line 10581
  HEAP32[$650 >> 2] = $88; //@line 10582
  $651 = $ReallocAsyncCtx5 + 180 | 0; //@line 10583
  HEAP32[$651 >> 2] = $90; //@line 10584
  $652 = $ReallocAsyncCtx5 + 184 | 0; //@line 10585
  HEAP32[$652 >> 2] = $92; //@line 10586
  $653 = $ReallocAsyncCtx5 + 188 | 0; //@line 10587
  HEAP32[$653 >> 2] = $94; //@line 10588
  $654 = $ReallocAsyncCtx5 + 192 | 0; //@line 10589
  HEAP32[$654 >> 2] = $96; //@line 10590
  $655 = $ReallocAsyncCtx5 + 196 | 0; //@line 10591
  HEAP32[$655 >> 2] = $98; //@line 10592
  $656 = $ReallocAsyncCtx5 + 200 | 0; //@line 10593
  HEAP32[$656 >> 2] = $100; //@line 10594
  $657 = $ReallocAsyncCtx5 + 204 | 0; //@line 10595
  HEAP32[$657 >> 2] = $102; //@line 10596
  $658 = $ReallocAsyncCtx5 + 208 | 0; //@line 10597
  HEAP32[$658 >> 2] = $104; //@line 10598
  $659 = $ReallocAsyncCtx5 + 212 | 0; //@line 10599
  HEAP32[$659 >> 2] = $106; //@line 10600
  $660 = $ReallocAsyncCtx5 + 216 | 0; //@line 10601
  HEAP32[$660 >> 2] = $108; //@line 10602
  $661 = $ReallocAsyncCtx5 + 220 | 0; //@line 10603
  HEAP32[$661 >> 2] = $110; //@line 10604
  $662 = $ReallocAsyncCtx5 + 224 | 0; //@line 10605
  HEAP32[$662 >> 2] = $112; //@line 10606
  $663 = $ReallocAsyncCtx5 + 228 | 0; //@line 10607
  HEAP8[$663 >> 0] = $114; //@line 10608
  $664 = $ReallocAsyncCtx5 + 232 | 0; //@line 10609
  HEAP32[$664 >> 2] = $116; //@line 10610
  $665 = $ReallocAsyncCtx5 + 236 | 0; //@line 10611
  HEAP32[$665 >> 2] = $118; //@line 10612
  $666 = $ReallocAsyncCtx5 + 240 | 0; //@line 10613
  HEAP32[$666 >> 2] = $120; //@line 10614
  $667 = $ReallocAsyncCtx5 + 244 | 0; //@line 10615
  HEAP32[$667 >> 2] = $122; //@line 10616
  $668 = $ReallocAsyncCtx5 + 248 | 0; //@line 10617
  HEAP32[$668 >> 2] = $124; //@line 10618
  $669 = $ReallocAsyncCtx5 + 252 | 0; //@line 10619
  HEAP32[$669 >> 2] = $126; //@line 10620
  $670 = $ReallocAsyncCtx5 + 256 | 0; //@line 10621
  HEAP8[$670 >> 0] = $128; //@line 10622
  $671 = $ReallocAsyncCtx5 + 257 | 0; //@line 10623
  HEAP8[$671 >> 0] = $130; //@line 10624
  $672 = $ReallocAsyncCtx5 + 260 | 0; //@line 10625
  HEAP32[$672 >> 2] = $132; //@line 10626
  $673 = $ReallocAsyncCtx5 + 264 | 0; //@line 10627
  HEAP32[$673 >> 2] = $134; //@line 10628
  sp = STACKTOP; //@line 10629
  return;
 } else if ((label | 0) == 33) {
  HEAP32[___async_retval >> 2] = $$096$be; //@line 10634
  return;
 }
}
function _malloc($0) {
 $0 = $0 | 0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01926$i = 0, $$0193$lcssa$i = 0, $$01935$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024367$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0, $$124466$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i203 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$414$i = 0, $$4236$i = 0, $$4351$lcssa$i = 0, $$435113$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435712$i = 0, $$723947$i = 0, $$748$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i19$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0, $1 = 0, $1004 = 0, $101 = 0, $1010 = 0, $1013 = 0, $1014 = 0, $102 = 0, $1032 = 0, $1034 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1052 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $108 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $134 = 0, $138 = 0, $14 = 0, $143 = 0, $146 = 0, $149 = 0, $150 = 0, $157 = 0, $159 = 0, $16 = 0, $162 = 0, $164 = 0, $167 = 0, $169 = 0, $17 = 0, $172 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $19 = 0, $190 = 0, $191 = 0, $20 = 0, $204 = 0, $208 = 0, $214 = 0, $221 = 0, $225 = 0, $234 = 0, $235 = 0, $237 = 0, $238 = 0, $242 = 0, $243 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $261 = 0, $262 = 0, $265 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $282 = 0, $292 = 0, $296 = 0, $30 = 0, $302 = 0, $306 = 0, $309 = 0, $313 = 0, $315 = 0, $316 = 0, $318 = 0, $320 = 0, $322 = 0, $324 = 0, $326 = 0, $328 = 0, $330 = 0, $34 = 0, $340 = 0, $341 = 0, $352 = 0, $354 = 0, $357 = 0, $359 = 0, $362 = 0, $364 = 0, $367 = 0, $37 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $376 = 0, $377 = 0, $379 = 0, $380 = 0, $385 = 0, $386 = 0, $391 = 0, $399 = 0, $403 = 0, $409 = 0, $41 = 0, $416 = 0, $420 = 0, $428 = 0, $431 = 0, $432 = 0, $433 = 0, $437 = 0, $438 = 0, $44 = 0, $444 = 0, $449 = 0, $450 = 0, $453 = 0, $455 = 0, $458 = 0, $463 = 0, $469 = 0, $47 = 0, $471 = 0, $473 = 0, $475 = 0, $49 = 0, $492 = 0, $494 = 0, $50 = 0, $501 = 0, $502 = 0, $503 = 0, $512 = 0, $514 = 0, $515 = 0, $517 = 0, $52 = 0, $526 = 0, $530 = 0, $532 = 0, $533 = 0, $534 = 0, $54 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $552 = 0, $554 = 0, $555 = 0, $56 = 0, $561 = 0, $563 = 0, $565 = 0, $570 = 0, $572 = 0, $574 = 0, $575 = 0, $576 = 0, $58 = 0, $584 = 0, $585 = 0, $588 = 0, $592 = 0, $595 = 0, $597 = 0, $6 = 0, $60 = 0, $603 = 0, $607 = 0, $611 = 0, $62 = 0, $620 = 0, $621 = 0, $627 = 0, $629 = 0, $633 = 0, $636 = 0, $638 = 0, $64 = 0, $642 = 0, $644 = 0, $649 = 0, $650 = 0, $651 = 0, $657 = 0, $658 = 0, $659 = 0, $663 = 0, $67 = 0, $673 = 0, $675 = 0, $680 = 0, $681 = 0, $682 = 0, $688 = 0, $69 = 0, $690 = 0, $694 = 0, $7 = 0, $70 = 0, $700 = 0, $704 = 0, $71 = 0, $710 = 0, $712 = 0, $718 = 0, $72 = 0, $722 = 0, $723 = 0, $728 = 0, $73 = 0, $734 = 0, $739 = 0, $742 = 0, $743 = 0, $746 = 0, $748 = 0, $750 = 0, $753 = 0, $764 = 0, $769 = 0, $77 = 0, $771 = 0, $774 = 0, $776 = 0, $779 = 0, $782 = 0, $783 = 0, $784 = 0, $786 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $797 = 0, $798 = 0, $8 = 0, $80 = 0, $812 = 0, $815 = 0, $816 = 0, $822 = 0, $83 = 0, $830 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $845 = 0, $846 = 0, $852 = 0, $857 = 0, $858 = 0, $861 = 0, $863 = 0, $866 = 0, $87 = 0, $871 = 0, $877 = 0, $879 = 0, $881 = 0, $882 = 0, $9 = 0, $900 = 0, $902 = 0, $909 = 0, $910 = 0, $911 = 0, $919 = 0, $92 = 0, $923 = 0, $927 = 0, $929 = 0, $93 = 0, $935 = 0, $936 = 0, $938 = 0, $939 = 0, $940 = 0, $941 = 0, $943 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $956 = 0, $958 = 0, $96 = 0, $964 = 0, $969 = 0, $972 = 0, $973 = 0, $974 = 0, $978 = 0, $979 = 0, $98 = 0, $985 = 0, $990 = 0, $991 = 0, $994 = 0, $996 = 0, $999 = 0, label = 0, sp = 0, $958$looptemp = 0;
 sp = STACKTOP; //@line 7031
 STACKTOP = STACKTOP + 16 | 0; //@line 7032
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 7032
 $1 = sp; //@line 7033
 do {
  if ($0 >>> 0 < 245) {
   $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8; //@line 7040
   $7 = $6 >>> 3; //@line 7041
   $8 = HEAP32[5634] | 0; //@line 7042
   $9 = $8 >>> $7; //@line 7043
   if ($9 & 3 | 0) {
    $14 = ($9 & 1 ^ 1) + $7 | 0; //@line 7049
    $16 = 22576 + ($14 << 1 << 2) | 0; //@line 7051
    $17 = $16 + 8 | 0; //@line 7052
    $18 = HEAP32[$17 >> 2] | 0; //@line 7053
    $19 = $18 + 8 | 0; //@line 7054
    $20 = HEAP32[$19 >> 2] | 0; //@line 7055
    do {
     if (($20 | 0) == ($16 | 0)) {
      HEAP32[5634] = $8 & ~(1 << $14); //@line 7062
     } else {
      if ((HEAP32[5638] | 0) >>> 0 > $20 >>> 0) {
       _abort(); //@line 7067
      }
      $27 = $20 + 12 | 0; //@line 7070
      if ((HEAP32[$27 >> 2] | 0) == ($18 | 0)) {
       HEAP32[$27 >> 2] = $16; //@line 7074
       HEAP32[$17 >> 2] = $20; //@line 7075
       break;
      } else {
       _abort(); //@line 7078
      }
     }
    } while (0);
    $30 = $14 << 3; //@line 7083
    HEAP32[$18 + 4 >> 2] = $30 | 3; //@line 7086
    $34 = $18 + $30 + 4 | 0; //@line 7088
    HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1; //@line 7091
    $$0 = $19; //@line 7092
    STACKTOP = sp; //@line 7093
    return $$0 | 0; //@line 7093
   }
   $37 = HEAP32[5636] | 0; //@line 7095
   if ($6 >>> 0 > $37 >>> 0) {
    if ($9 | 0) {
     $41 = 2 << $7; //@line 7101
     $44 = $9 << $7 & ($41 | 0 - $41); //@line 7104
     $47 = ($44 & 0 - $44) + -1 | 0; //@line 7107
     $49 = $47 >>> 12 & 16; //@line 7109
     $50 = $47 >>> $49; //@line 7110
     $52 = $50 >>> 5 & 8; //@line 7112
     $54 = $50 >>> $52; //@line 7114
     $56 = $54 >>> 2 & 4; //@line 7116
     $58 = $54 >>> $56; //@line 7118
     $60 = $58 >>> 1 & 2; //@line 7120
     $62 = $58 >>> $60; //@line 7122
     $64 = $62 >>> 1 & 1; //@line 7124
     $67 = ($52 | $49 | $56 | $60 | $64) + ($62 >>> $64) | 0; //@line 7127
     $69 = 22576 + ($67 << 1 << 2) | 0; //@line 7129
     $70 = $69 + 8 | 0; //@line 7130
     $71 = HEAP32[$70 >> 2] | 0; //@line 7131
     $72 = $71 + 8 | 0; //@line 7132
     $73 = HEAP32[$72 >> 2] | 0; //@line 7133
     do {
      if (($73 | 0) == ($69 | 0)) {
       $77 = $8 & ~(1 << $67); //@line 7139
       HEAP32[5634] = $77; //@line 7140
       $98 = $77; //@line 7141
      } else {
       if ((HEAP32[5638] | 0) >>> 0 > $73 >>> 0) {
        _abort(); //@line 7146
       }
       $80 = $73 + 12 | 0; //@line 7149
       if ((HEAP32[$80 >> 2] | 0) == ($71 | 0)) {
        HEAP32[$80 >> 2] = $69; //@line 7153
        HEAP32[$70 >> 2] = $73; //@line 7154
        $98 = $8; //@line 7155
        break;
       } else {
        _abort(); //@line 7158
       }
      }
     } while (0);
     $83 = $67 << 3; //@line 7163
     $84 = $83 - $6 | 0; //@line 7164
     HEAP32[$71 + 4 >> 2] = $6 | 3; //@line 7167
     $87 = $71 + $6 | 0; //@line 7168
     HEAP32[$87 + 4 >> 2] = $84 | 1; //@line 7171
     HEAP32[$71 + $83 >> 2] = $84; //@line 7173
     if ($37 | 0) {
      $92 = HEAP32[5639] | 0; //@line 7176
      $93 = $37 >>> 3; //@line 7177
      $95 = 22576 + ($93 << 1 << 2) | 0; //@line 7179
      $96 = 1 << $93; //@line 7180
      if (!($98 & $96)) {
       HEAP32[5634] = $98 | $96; //@line 7185
       $$0199 = $95; //@line 7187
       $$pre$phiZ2D = $95 + 8 | 0; //@line 7187
      } else {
       $101 = $95 + 8 | 0; //@line 7189
       $102 = HEAP32[$101 >> 2] | 0; //@line 7190
       if ((HEAP32[5638] | 0) >>> 0 > $102 >>> 0) {
        _abort(); //@line 7194
       } else {
        $$0199 = $102; //@line 7197
        $$pre$phiZ2D = $101; //@line 7197
       }
      }
      HEAP32[$$pre$phiZ2D >> 2] = $92; //@line 7200
      HEAP32[$$0199 + 12 >> 2] = $92; //@line 7202
      HEAP32[$92 + 8 >> 2] = $$0199; //@line 7204
      HEAP32[$92 + 12 >> 2] = $95; //@line 7206
     }
     HEAP32[5636] = $84; //@line 7208
     HEAP32[5639] = $87; //@line 7209
     $$0 = $72; //@line 7210
     STACKTOP = sp; //@line 7211
     return $$0 | 0; //@line 7211
    }
    $108 = HEAP32[5635] | 0; //@line 7213
    if (!$108) {
     $$0197 = $6; //@line 7216
    } else {
     $112 = ($108 & 0 - $108) + -1 | 0; //@line 7220
     $114 = $112 >>> 12 & 16; //@line 7222
     $115 = $112 >>> $114; //@line 7223
     $117 = $115 >>> 5 & 8; //@line 7225
     $119 = $115 >>> $117; //@line 7227
     $121 = $119 >>> 2 & 4; //@line 7229
     $123 = $119 >>> $121; //@line 7231
     $125 = $123 >>> 1 & 2; //@line 7233
     $127 = $123 >>> $125; //@line 7235
     $129 = $127 >>> 1 & 1; //@line 7237
     $134 = HEAP32[22840 + (($117 | $114 | $121 | $125 | $129) + ($127 >>> $129) << 2) >> 2] | 0; //@line 7242
     $138 = (HEAP32[$134 + 4 >> 2] & -8) - $6 | 0; //@line 7246
     $143 = HEAP32[$134 + 16 + (((HEAP32[$134 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 7252
     if (!$143) {
      $$0192$lcssa$i = $134; //@line 7255
      $$0193$lcssa$i = $138; //@line 7255
     } else {
      $$01926$i = $134; //@line 7257
      $$01935$i = $138; //@line 7257
      $146 = $143; //@line 7257
      while (1) {
       $149 = (HEAP32[$146 + 4 >> 2] & -8) - $6 | 0; //@line 7262
       $150 = $149 >>> 0 < $$01935$i >>> 0; //@line 7263
       $$$0193$i = $150 ? $149 : $$01935$i; //@line 7264
       $$$0192$i = $150 ? $146 : $$01926$i; //@line 7265
       $146 = HEAP32[$146 + 16 + (((HEAP32[$146 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 7271
       if (!$146) {
        $$0192$lcssa$i = $$$0192$i; //@line 7274
        $$0193$lcssa$i = $$$0193$i; //@line 7274
        break;
       } else {
        $$01926$i = $$$0192$i; //@line 7277
        $$01935$i = $$$0193$i; //@line 7277
       }
      }
     }
     $157 = HEAP32[5638] | 0; //@line 7281
     if ($157 >>> 0 > $$0192$lcssa$i >>> 0) {
      _abort(); //@line 7284
     }
     $159 = $$0192$lcssa$i + $6 | 0; //@line 7287
     if ($159 >>> 0 <= $$0192$lcssa$i >>> 0) {
      _abort(); //@line 7290
     }
     $162 = HEAP32[$$0192$lcssa$i + 24 >> 2] | 0; //@line 7294
     $164 = HEAP32[$$0192$lcssa$i + 12 >> 2] | 0; //@line 7296
     do {
      if (($164 | 0) == ($$0192$lcssa$i | 0)) {
       $175 = $$0192$lcssa$i + 20 | 0; //@line 7300
       $176 = HEAP32[$175 >> 2] | 0; //@line 7301
       if (!$176) {
        $178 = $$0192$lcssa$i + 16 | 0; //@line 7304
        $179 = HEAP32[$178 >> 2] | 0; //@line 7305
        if (!$179) {
         $$3$i = 0; //@line 7308
         break;
        } else {
         $$1196$i = $179; //@line 7311
         $$1198$i = $178; //@line 7311
        }
       } else {
        $$1196$i = $176; //@line 7314
        $$1198$i = $175; //@line 7314
       }
       while (1) {
        $181 = $$1196$i + 20 | 0; //@line 7317
        $182 = HEAP32[$181 >> 2] | 0; //@line 7318
        if ($182 | 0) {
         $$1196$i = $182; //@line 7321
         $$1198$i = $181; //@line 7321
         continue;
        }
        $184 = $$1196$i + 16 | 0; //@line 7324
        $185 = HEAP32[$184 >> 2] | 0; //@line 7325
        if (!$185) {
         break;
        } else {
         $$1196$i = $185; //@line 7330
         $$1198$i = $184; //@line 7330
        }
       }
       if ($157 >>> 0 > $$1198$i >>> 0) {
        _abort(); //@line 7335
       } else {
        HEAP32[$$1198$i >> 2] = 0; //@line 7338
        $$3$i = $$1196$i; //@line 7339
        break;
       }
      } else {
       $167 = HEAP32[$$0192$lcssa$i + 8 >> 2] | 0; //@line 7344
       if ($157 >>> 0 > $167 >>> 0) {
        _abort(); //@line 7347
       }
       $169 = $167 + 12 | 0; //@line 7350
       if ((HEAP32[$169 >> 2] | 0) != ($$0192$lcssa$i | 0)) {
        _abort(); //@line 7354
       }
       $172 = $164 + 8 | 0; //@line 7357
       if ((HEAP32[$172 >> 2] | 0) == ($$0192$lcssa$i | 0)) {
        HEAP32[$169 >> 2] = $164; //@line 7361
        HEAP32[$172 >> 2] = $167; //@line 7362
        $$3$i = $164; //@line 7363
        break;
       } else {
        _abort(); //@line 7366
       }
      }
     } while (0);
     L73 : do {
      if ($162 | 0) {
       $190 = HEAP32[$$0192$lcssa$i + 28 >> 2] | 0; //@line 7375
       $191 = 22840 + ($190 << 2) | 0; //@line 7376
       do {
        if (($$0192$lcssa$i | 0) == (HEAP32[$191 >> 2] | 0)) {
         HEAP32[$191 >> 2] = $$3$i; //@line 7381
         if (!$$3$i) {
          HEAP32[5635] = $108 & ~(1 << $190); //@line 7387
          break L73;
         }
        } else {
         if ((HEAP32[5638] | 0) >>> 0 > $162 >>> 0) {
          _abort(); //@line 7394
         } else {
          HEAP32[$162 + 16 + (((HEAP32[$162 + 16 >> 2] | 0) != ($$0192$lcssa$i | 0) & 1) << 2) >> 2] = $$3$i; //@line 7402
          if (!$$3$i) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while (0);
       $204 = HEAP32[5638] | 0; //@line 7412
       if ($204 >>> 0 > $$3$i >>> 0) {
        _abort(); //@line 7415
       }
       HEAP32[$$3$i + 24 >> 2] = $162; //@line 7419
       $208 = HEAP32[$$0192$lcssa$i + 16 >> 2] | 0; //@line 7421
       do {
        if ($208 | 0) {
         if ($204 >>> 0 > $208 >>> 0) {
          _abort(); //@line 7427
         } else {
          HEAP32[$$3$i + 16 >> 2] = $208; //@line 7431
          HEAP32[$208 + 24 >> 2] = $$3$i; //@line 7433
          break;
         }
        }
       } while (0);
       $214 = HEAP32[$$0192$lcssa$i + 20 >> 2] | 0; //@line 7439
       if ($214 | 0) {
        if ((HEAP32[5638] | 0) >>> 0 > $214 >>> 0) {
         _abort(); //@line 7445
        } else {
         HEAP32[$$3$i + 20 >> 2] = $214; //@line 7449
         HEAP32[$214 + 24 >> 2] = $$3$i; //@line 7451
         break;
        }
       }
      }
     } while (0);
     if ($$0193$lcssa$i >>> 0 < 16) {
      $221 = $$0193$lcssa$i + $6 | 0; //@line 7459
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $221 | 3; //@line 7462
      $225 = $$0192$lcssa$i + $221 + 4 | 0; //@line 7464
      HEAP32[$225 >> 2] = HEAP32[$225 >> 2] | 1; //@line 7467
     } else {
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $6 | 3; //@line 7471
      HEAP32[$159 + 4 >> 2] = $$0193$lcssa$i | 1; //@line 7474
      HEAP32[$159 + $$0193$lcssa$i >> 2] = $$0193$lcssa$i; //@line 7476
      if ($37 | 0) {
       $234 = HEAP32[5639] | 0; //@line 7479
       $235 = $37 >>> 3; //@line 7480
       $237 = 22576 + ($235 << 1 << 2) | 0; //@line 7482
       $238 = 1 << $235; //@line 7483
       if (!($8 & $238)) {
        HEAP32[5634] = $8 | $238; //@line 7488
        $$0189$i = $237; //@line 7490
        $$pre$phi$iZ2D = $237 + 8 | 0; //@line 7490
       } else {
        $242 = $237 + 8 | 0; //@line 7492
        $243 = HEAP32[$242 >> 2] | 0; //@line 7493
        if ((HEAP32[5638] | 0) >>> 0 > $243 >>> 0) {
         _abort(); //@line 7497
        } else {
         $$0189$i = $243; //@line 7500
         $$pre$phi$iZ2D = $242; //@line 7500
        }
       }
       HEAP32[$$pre$phi$iZ2D >> 2] = $234; //@line 7503
       HEAP32[$$0189$i + 12 >> 2] = $234; //@line 7505
       HEAP32[$234 + 8 >> 2] = $$0189$i; //@line 7507
       HEAP32[$234 + 12 >> 2] = $237; //@line 7509
      }
      HEAP32[5636] = $$0193$lcssa$i; //@line 7511
      HEAP32[5639] = $159; //@line 7512
     }
     $$0 = $$0192$lcssa$i + 8 | 0; //@line 7515
     STACKTOP = sp; //@line 7516
     return $$0 | 0; //@line 7516
    }
   } else {
    $$0197 = $6; //@line 7519
   }
  } else {
   if ($0 >>> 0 > 4294967231) {
    $$0197 = -1; //@line 7524
   } else {
    $251 = $0 + 11 | 0; //@line 7526
    $252 = $251 & -8; //@line 7527
    $253 = HEAP32[5635] | 0; //@line 7528
    if (!$253) {
     $$0197 = $252; //@line 7531
    } else {
     $255 = 0 - $252 | 0; //@line 7533
     $256 = $251 >>> 8; //@line 7534
     if (!$256) {
      $$0358$i = 0; //@line 7537
     } else {
      if ($252 >>> 0 > 16777215) {
       $$0358$i = 31; //@line 7541
      } else {
       $261 = ($256 + 1048320 | 0) >>> 16 & 8; //@line 7545
       $262 = $256 << $261; //@line 7546
       $265 = ($262 + 520192 | 0) >>> 16 & 4; //@line 7549
       $267 = $262 << $265; //@line 7551
       $270 = ($267 + 245760 | 0) >>> 16 & 2; //@line 7554
       $275 = 14 - ($265 | $261 | $270) + ($267 << $270 >>> 15) | 0; //@line 7559
       $$0358$i = $252 >>> ($275 + 7 | 0) & 1 | $275 << 1; //@line 7565
      }
     }
     $282 = HEAP32[22840 + ($$0358$i << 2) >> 2] | 0; //@line 7569
     L117 : do {
      if (!$282) {
       $$2355$i = 0; //@line 7573
       $$3$i203 = 0; //@line 7573
       $$3350$i = $255; //@line 7573
       label = 81; //@line 7574
      } else {
       $$0342$i = 0; //@line 7581
       $$0347$i = $255; //@line 7581
       $$0353$i = $282; //@line 7581
       $$0359$i = $252 << (($$0358$i | 0) == 31 ? 0 : 25 - ($$0358$i >>> 1) | 0); //@line 7581
       $$0362$i = 0; //@line 7581
       while (1) {
        $292 = (HEAP32[$$0353$i + 4 >> 2] & -8) - $252 | 0; //@line 7586
        if ($292 >>> 0 < $$0347$i >>> 0) {
         if (!$292) {
          $$414$i = $$0353$i; //@line 7591
          $$435113$i = 0; //@line 7591
          $$435712$i = $$0353$i; //@line 7591
          label = 85; //@line 7592
          break L117;
         } else {
          $$1343$i = $$0353$i; //@line 7595
          $$1348$i = $292; //@line 7595
         }
        } else {
         $$1343$i = $$0342$i; //@line 7598
         $$1348$i = $$0347$i; //@line 7598
        }
        $296 = HEAP32[$$0353$i + 20 >> 2] | 0; //@line 7601
        $$0353$i = HEAP32[$$0353$i + 16 + ($$0359$i >>> 31 << 2) >> 2] | 0; //@line 7604
        $$1363$i = ($296 | 0) == 0 | ($296 | 0) == ($$0353$i | 0) ? $$0362$i : $296; //@line 7608
        $302 = ($$0353$i | 0) == 0; //@line 7609
        if ($302) {
         $$2355$i = $$1363$i; //@line 7614
         $$3$i203 = $$1343$i; //@line 7614
         $$3350$i = $$1348$i; //@line 7614
         label = 81; //@line 7615
         break;
        } else {
         $$0342$i = $$1343$i; //@line 7618
         $$0347$i = $$1348$i; //@line 7618
         $$0359$i = $$0359$i << (($302 ^ 1) & 1); //@line 7618
         $$0362$i = $$1363$i; //@line 7618
        }
       }
      }
     } while (0);
     if ((label | 0) == 81) {
      if (($$2355$i | 0) == 0 & ($$3$i203 | 0) == 0) {
       $306 = 2 << $$0358$i; //@line 7628
       $309 = $253 & ($306 | 0 - $306); //@line 7631
       if (!$309) {
        $$0197 = $252; //@line 7634
        break;
       }
       $313 = ($309 & 0 - $309) + -1 | 0; //@line 7639
       $315 = $313 >>> 12 & 16; //@line 7641
       $316 = $313 >>> $315; //@line 7642
       $318 = $316 >>> 5 & 8; //@line 7644
       $320 = $316 >>> $318; //@line 7646
       $322 = $320 >>> 2 & 4; //@line 7648
       $324 = $320 >>> $322; //@line 7650
       $326 = $324 >>> 1 & 2; //@line 7652
       $328 = $324 >>> $326; //@line 7654
       $330 = $328 >>> 1 & 1; //@line 7656
       $$4$ph$i = 0; //@line 7662
       $$4357$ph$i = HEAP32[22840 + (($318 | $315 | $322 | $326 | $330) + ($328 >>> $330) << 2) >> 2] | 0; //@line 7662
      } else {
       $$4$ph$i = $$3$i203; //@line 7664
       $$4357$ph$i = $$2355$i; //@line 7664
      }
      if (!$$4357$ph$i) {
       $$4$lcssa$i = $$4$ph$i; //@line 7668
       $$4351$lcssa$i = $$3350$i; //@line 7668
      } else {
       $$414$i = $$4$ph$i; //@line 7670
       $$435113$i = $$3350$i; //@line 7670
       $$435712$i = $$4357$ph$i; //@line 7670
       label = 85; //@line 7671
      }
     }
     if ((label | 0) == 85) {
      while (1) {
       label = 0; //@line 7676
       $340 = (HEAP32[$$435712$i + 4 >> 2] & -8) - $252 | 0; //@line 7680
       $341 = $340 >>> 0 < $$435113$i >>> 0; //@line 7681
       $$$4351$i = $341 ? $340 : $$435113$i; //@line 7682
       $$4357$$4$i = $341 ? $$435712$i : $$414$i; //@line 7683
       $$435712$i = HEAP32[$$435712$i + 16 + (((HEAP32[$$435712$i + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 7689
       if (!$$435712$i) {
        $$4$lcssa$i = $$4357$$4$i; //@line 7692
        $$4351$lcssa$i = $$$4351$i; //@line 7692
        break;
       } else {
        $$414$i = $$4357$$4$i; //@line 7695
        $$435113$i = $$$4351$i; //@line 7695
        label = 85; //@line 7696
       }
      }
     }
     if (!$$4$lcssa$i) {
      $$0197 = $252; //@line 7702
     } else {
      if ($$4351$lcssa$i >>> 0 < ((HEAP32[5636] | 0) - $252 | 0) >>> 0) {
       $352 = HEAP32[5638] | 0; //@line 7708
       if ($352 >>> 0 > $$4$lcssa$i >>> 0) {
        _abort(); //@line 7711
       }
       $354 = $$4$lcssa$i + $252 | 0; //@line 7714
       if ($354 >>> 0 <= $$4$lcssa$i >>> 0) {
        _abort(); //@line 7717
       }
       $357 = HEAP32[$$4$lcssa$i + 24 >> 2] | 0; //@line 7721
       $359 = HEAP32[$$4$lcssa$i + 12 >> 2] | 0; //@line 7723
       do {
        if (($359 | 0) == ($$4$lcssa$i | 0)) {
         $370 = $$4$lcssa$i + 20 | 0; //@line 7727
         $371 = HEAP32[$370 >> 2] | 0; //@line 7728
         if (!$371) {
          $373 = $$4$lcssa$i + 16 | 0; //@line 7731
          $374 = HEAP32[$373 >> 2] | 0; //@line 7732
          if (!$374) {
           $$3372$i = 0; //@line 7735
           break;
          } else {
           $$1370$i = $374; //@line 7738
           $$1374$i = $373; //@line 7738
          }
         } else {
          $$1370$i = $371; //@line 7741
          $$1374$i = $370; //@line 7741
         }
         while (1) {
          $376 = $$1370$i + 20 | 0; //@line 7744
          $377 = HEAP32[$376 >> 2] | 0; //@line 7745
          if ($377 | 0) {
           $$1370$i = $377; //@line 7748
           $$1374$i = $376; //@line 7748
           continue;
          }
          $379 = $$1370$i + 16 | 0; //@line 7751
          $380 = HEAP32[$379 >> 2] | 0; //@line 7752
          if (!$380) {
           break;
          } else {
           $$1370$i = $380; //@line 7757
           $$1374$i = $379; //@line 7757
          }
         }
         if ($352 >>> 0 > $$1374$i >>> 0) {
          _abort(); //@line 7762
         } else {
          HEAP32[$$1374$i >> 2] = 0; //@line 7765
          $$3372$i = $$1370$i; //@line 7766
          break;
         }
        } else {
         $362 = HEAP32[$$4$lcssa$i + 8 >> 2] | 0; //@line 7771
         if ($352 >>> 0 > $362 >>> 0) {
          _abort(); //@line 7774
         }
         $364 = $362 + 12 | 0; //@line 7777
         if ((HEAP32[$364 >> 2] | 0) != ($$4$lcssa$i | 0)) {
          _abort(); //@line 7781
         }
         $367 = $359 + 8 | 0; //@line 7784
         if ((HEAP32[$367 >> 2] | 0) == ($$4$lcssa$i | 0)) {
          HEAP32[$364 >> 2] = $359; //@line 7788
          HEAP32[$367 >> 2] = $362; //@line 7789
          $$3372$i = $359; //@line 7790
          break;
         } else {
          _abort(); //@line 7793
         }
        }
       } while (0);
       L164 : do {
        if (!$357) {
         $475 = $253; //@line 7801
        } else {
         $385 = HEAP32[$$4$lcssa$i + 28 >> 2] | 0; //@line 7804
         $386 = 22840 + ($385 << 2) | 0; //@line 7805
         do {
          if (($$4$lcssa$i | 0) == (HEAP32[$386 >> 2] | 0)) {
           HEAP32[$386 >> 2] = $$3372$i; //@line 7810
           if (!$$3372$i) {
            $391 = $253 & ~(1 << $385); //@line 7815
            HEAP32[5635] = $391; //@line 7816
            $475 = $391; //@line 7817
            break L164;
           }
          } else {
           if ((HEAP32[5638] | 0) >>> 0 > $357 >>> 0) {
            _abort(); //@line 7824
           } else {
            HEAP32[$357 + 16 + (((HEAP32[$357 + 16 >> 2] | 0) != ($$4$lcssa$i | 0) & 1) << 2) >> 2] = $$3372$i; //@line 7832
            if (!$$3372$i) {
             $475 = $253; //@line 7835
             break L164;
            } else {
             break;
            }
           }
          }
         } while (0);
         $399 = HEAP32[5638] | 0; //@line 7843
         if ($399 >>> 0 > $$3372$i >>> 0) {
          _abort(); //@line 7846
         }
         HEAP32[$$3372$i + 24 >> 2] = $357; //@line 7850
         $403 = HEAP32[$$4$lcssa$i + 16 >> 2] | 0; //@line 7852
         do {
          if ($403 | 0) {
           if ($399 >>> 0 > $403 >>> 0) {
            _abort(); //@line 7858
           } else {
            HEAP32[$$3372$i + 16 >> 2] = $403; //@line 7862
            HEAP32[$403 + 24 >> 2] = $$3372$i; //@line 7864
            break;
           }
          }
         } while (0);
         $409 = HEAP32[$$4$lcssa$i + 20 >> 2] | 0; //@line 7870
         if (!$409) {
          $475 = $253; //@line 7873
         } else {
          if ((HEAP32[5638] | 0) >>> 0 > $409 >>> 0) {
           _abort(); //@line 7878
          } else {
           HEAP32[$$3372$i + 20 >> 2] = $409; //@line 7882
           HEAP32[$409 + 24 >> 2] = $$3372$i; //@line 7884
           $475 = $253; //@line 7885
           break;
          }
         }
        }
       } while (0);
       do {
        if ($$4351$lcssa$i >>> 0 < 16) {
         $416 = $$4351$lcssa$i + $252 | 0; //@line 7894
         HEAP32[$$4$lcssa$i + 4 >> 2] = $416 | 3; //@line 7897
         $420 = $$4$lcssa$i + $416 + 4 | 0; //@line 7899
         HEAP32[$420 >> 2] = HEAP32[$420 >> 2] | 1; //@line 7902
        } else {
         HEAP32[$$4$lcssa$i + 4 >> 2] = $252 | 3; //@line 7906
         HEAP32[$354 + 4 >> 2] = $$4351$lcssa$i | 1; //@line 7909
         HEAP32[$354 + $$4351$lcssa$i >> 2] = $$4351$lcssa$i; //@line 7911
         $428 = $$4351$lcssa$i >>> 3; //@line 7912
         if ($$4351$lcssa$i >>> 0 < 256) {
          $431 = 22576 + ($428 << 1 << 2) | 0; //@line 7916
          $432 = HEAP32[5634] | 0; //@line 7917
          $433 = 1 << $428; //@line 7918
          if (!($432 & $433)) {
           HEAP32[5634] = $432 | $433; //@line 7923
           $$0368$i = $431; //@line 7925
           $$pre$phi$i211Z2D = $431 + 8 | 0; //@line 7925
          } else {
           $437 = $431 + 8 | 0; //@line 7927
           $438 = HEAP32[$437 >> 2] | 0; //@line 7928
           if ((HEAP32[5638] | 0) >>> 0 > $438 >>> 0) {
            _abort(); //@line 7932
           } else {
            $$0368$i = $438; //@line 7935
            $$pre$phi$i211Z2D = $437; //@line 7935
           }
          }
          HEAP32[$$pre$phi$i211Z2D >> 2] = $354; //@line 7938
          HEAP32[$$0368$i + 12 >> 2] = $354; //@line 7940
          HEAP32[$354 + 8 >> 2] = $$0368$i; //@line 7942
          HEAP32[$354 + 12 >> 2] = $431; //@line 7944
          break;
         }
         $444 = $$4351$lcssa$i >>> 8; //@line 7947
         if (!$444) {
          $$0361$i = 0; //@line 7950
         } else {
          if ($$4351$lcssa$i >>> 0 > 16777215) {
           $$0361$i = 31; //@line 7954
          } else {
           $449 = ($444 + 1048320 | 0) >>> 16 & 8; //@line 7958
           $450 = $444 << $449; //@line 7959
           $453 = ($450 + 520192 | 0) >>> 16 & 4; //@line 7962
           $455 = $450 << $453; //@line 7964
           $458 = ($455 + 245760 | 0) >>> 16 & 2; //@line 7967
           $463 = 14 - ($453 | $449 | $458) + ($455 << $458 >>> 15) | 0; //@line 7972
           $$0361$i = $$4351$lcssa$i >>> ($463 + 7 | 0) & 1 | $463 << 1; //@line 7978
          }
         }
         $469 = 22840 + ($$0361$i << 2) | 0; //@line 7981
         HEAP32[$354 + 28 >> 2] = $$0361$i; //@line 7983
         $471 = $354 + 16 | 0; //@line 7984
         HEAP32[$471 + 4 >> 2] = 0; //@line 7986
         HEAP32[$471 >> 2] = 0; //@line 7987
         $473 = 1 << $$0361$i; //@line 7988
         if (!($475 & $473)) {
          HEAP32[5635] = $475 | $473; //@line 7993
          HEAP32[$469 >> 2] = $354; //@line 7994
          HEAP32[$354 + 24 >> 2] = $469; //@line 7996
          HEAP32[$354 + 12 >> 2] = $354; //@line 7998
          HEAP32[$354 + 8 >> 2] = $354; //@line 8000
          break;
         }
         $$0344$i = $$4351$lcssa$i << (($$0361$i | 0) == 31 ? 0 : 25 - ($$0361$i >>> 1) | 0); //@line 8009
         $$0345$i = HEAP32[$469 >> 2] | 0; //@line 8009
         while (1) {
          if ((HEAP32[$$0345$i + 4 >> 2] & -8 | 0) == ($$4351$lcssa$i | 0)) {
           label = 139; //@line 8016
           break;
          }
          $492 = $$0345$i + 16 + ($$0344$i >>> 31 << 2) | 0; //@line 8020
          $494 = HEAP32[$492 >> 2] | 0; //@line 8022
          if (!$494) {
           label = 136; //@line 8025
           break;
          } else {
           $$0344$i = $$0344$i << 1; //@line 8028
           $$0345$i = $494; //@line 8028
          }
         }
         if ((label | 0) == 136) {
          if ((HEAP32[5638] | 0) >>> 0 > $492 >>> 0) {
           _abort(); //@line 8035
          } else {
           HEAP32[$492 >> 2] = $354; //@line 8038
           HEAP32[$354 + 24 >> 2] = $$0345$i; //@line 8040
           HEAP32[$354 + 12 >> 2] = $354; //@line 8042
           HEAP32[$354 + 8 >> 2] = $354; //@line 8044
           break;
          }
         } else if ((label | 0) == 139) {
          $501 = $$0345$i + 8 | 0; //@line 8049
          $502 = HEAP32[$501 >> 2] | 0; //@line 8050
          $503 = HEAP32[5638] | 0; //@line 8051
          if ($503 >>> 0 <= $502 >>> 0 & $503 >>> 0 <= $$0345$i >>> 0) {
           HEAP32[$502 + 12 >> 2] = $354; //@line 8057
           HEAP32[$501 >> 2] = $354; //@line 8058
           HEAP32[$354 + 8 >> 2] = $502; //@line 8060
           HEAP32[$354 + 12 >> 2] = $$0345$i; //@line 8062
           HEAP32[$354 + 24 >> 2] = 0; //@line 8064
           break;
          } else {
           _abort(); //@line 8067
          }
         }
        }
       } while (0);
       $$0 = $$4$lcssa$i + 8 | 0; //@line 8074
       STACKTOP = sp; //@line 8075
       return $$0 | 0; //@line 8075
      } else {
       $$0197 = $252; //@line 8077
      }
     }
    }
   }
  }
 } while (0);
 $512 = HEAP32[5636] | 0; //@line 8084
 if ($512 >>> 0 >= $$0197 >>> 0) {
  $514 = $512 - $$0197 | 0; //@line 8087
  $515 = HEAP32[5639] | 0; //@line 8088
  if ($514 >>> 0 > 15) {
   $517 = $515 + $$0197 | 0; //@line 8091
   HEAP32[5639] = $517; //@line 8092
   HEAP32[5636] = $514; //@line 8093
   HEAP32[$517 + 4 >> 2] = $514 | 1; //@line 8096
   HEAP32[$515 + $512 >> 2] = $514; //@line 8098
   HEAP32[$515 + 4 >> 2] = $$0197 | 3; //@line 8101
  } else {
   HEAP32[5636] = 0; //@line 8103
   HEAP32[5639] = 0; //@line 8104
   HEAP32[$515 + 4 >> 2] = $512 | 3; //@line 8107
   $526 = $515 + $512 + 4 | 0; //@line 8109
   HEAP32[$526 >> 2] = HEAP32[$526 >> 2] | 1; //@line 8112
  }
  $$0 = $515 + 8 | 0; //@line 8115
  STACKTOP = sp; //@line 8116
  return $$0 | 0; //@line 8116
 }
 $530 = HEAP32[5637] | 0; //@line 8118
 if ($530 >>> 0 > $$0197 >>> 0) {
  $532 = $530 - $$0197 | 0; //@line 8121
  HEAP32[5637] = $532; //@line 8122
  $533 = HEAP32[5640] | 0; //@line 8123
  $534 = $533 + $$0197 | 0; //@line 8124
  HEAP32[5640] = $534; //@line 8125
  HEAP32[$534 + 4 >> 2] = $532 | 1; //@line 8128
  HEAP32[$533 + 4 >> 2] = $$0197 | 3; //@line 8131
  $$0 = $533 + 8 | 0; //@line 8133
  STACKTOP = sp; //@line 8134
  return $$0 | 0; //@line 8134
 }
 if (!(HEAP32[5752] | 0)) {
  HEAP32[5754] = 4096; //@line 8139
  HEAP32[5753] = 4096; //@line 8140
  HEAP32[5755] = -1; //@line 8141
  HEAP32[5756] = -1; //@line 8142
  HEAP32[5757] = 0; //@line 8143
  HEAP32[5745] = 0; //@line 8144
  HEAP32[5752] = $1 & -16 ^ 1431655768; //@line 8148
  $548 = 4096; //@line 8149
 } else {
  $548 = HEAP32[5754] | 0; //@line 8152
 }
 $545 = $$0197 + 48 | 0; //@line 8154
 $546 = $$0197 + 47 | 0; //@line 8155
 $547 = $548 + $546 | 0; //@line 8156
 $549 = 0 - $548 | 0; //@line 8157
 $550 = $547 & $549; //@line 8158
 if ($550 >>> 0 <= $$0197 >>> 0) {
  $$0 = 0; //@line 8161
  STACKTOP = sp; //@line 8162
  return $$0 | 0; //@line 8162
 }
 $552 = HEAP32[5744] | 0; //@line 8164
 if ($552 | 0) {
  $554 = HEAP32[5742] | 0; //@line 8167
  $555 = $554 + $550 | 0; //@line 8168
  if ($555 >>> 0 <= $554 >>> 0 | $555 >>> 0 > $552 >>> 0) {
   $$0 = 0; //@line 8173
   STACKTOP = sp; //@line 8174
   return $$0 | 0; //@line 8174
  }
 }
 L244 : do {
  if (!(HEAP32[5745] & 4)) {
   $561 = HEAP32[5640] | 0; //@line 8182
   L246 : do {
    if (!$561) {
     label = 163; //@line 8186
    } else {
     $$0$i$i = 22984; //@line 8188
     while (1) {
      $563 = HEAP32[$$0$i$i >> 2] | 0; //@line 8190
      if ($563 >>> 0 <= $561 >>> 0) {
       $565 = $$0$i$i + 4 | 0; //@line 8193
       if (($563 + (HEAP32[$565 >> 2] | 0) | 0) >>> 0 > $561 >>> 0) {
        break;
       }
      }
      $570 = HEAP32[$$0$i$i + 8 >> 2] | 0; //@line 8202
      if (!$570) {
       label = 163; //@line 8205
       break L246;
      } else {
       $$0$i$i = $570; //@line 8208
      }
     }
     $595 = $547 - $530 & $549; //@line 8212
     if ($595 >>> 0 < 2147483647) {
      $597 = _sbrk($595 | 0) | 0; //@line 8215
      if (($597 | 0) == ((HEAP32[$$0$i$i >> 2] | 0) + (HEAP32[$565 >> 2] | 0) | 0)) {
       if (($597 | 0) == (-1 | 0)) {
        $$2234243136$i = $595; //@line 8223
       } else {
        $$723947$i = $595; //@line 8225
        $$748$i = $597; //@line 8225
        label = 180; //@line 8226
        break L244;
       }
      } else {
       $$2247$ph$i = $597; //@line 8230
       $$2253$ph$i = $595; //@line 8230
       label = 171; //@line 8231
      }
     } else {
      $$2234243136$i = 0; //@line 8234
     }
    }
   } while (0);
   do {
    if ((label | 0) == 163) {
     $572 = _sbrk(0) | 0; //@line 8240
     if (($572 | 0) == (-1 | 0)) {
      $$2234243136$i = 0; //@line 8243
     } else {
      $574 = $572; //@line 8245
      $575 = HEAP32[5753] | 0; //@line 8246
      $576 = $575 + -1 | 0; //@line 8247
      $$$i = (($576 & $574 | 0) == 0 ? 0 : ($576 + $574 & 0 - $575) - $574 | 0) + $550 | 0; //@line 8255
      $584 = HEAP32[5742] | 0; //@line 8256
      $585 = $$$i + $584 | 0; //@line 8257
      if ($$$i >>> 0 > $$0197 >>> 0 & $$$i >>> 0 < 2147483647) {
       $588 = HEAP32[5744] | 0; //@line 8262
       if ($588 | 0) {
        if ($585 >>> 0 <= $584 >>> 0 | $585 >>> 0 > $588 >>> 0) {
         $$2234243136$i = 0; //@line 8269
         break;
        }
       }
       $592 = _sbrk($$$i | 0) | 0; //@line 8273
       if (($592 | 0) == ($572 | 0)) {
        $$723947$i = $$$i; //@line 8276
        $$748$i = $572; //@line 8276
        label = 180; //@line 8277
        break L244;
       } else {
        $$2247$ph$i = $592; //@line 8280
        $$2253$ph$i = $$$i; //@line 8280
        label = 171; //@line 8281
       }
      } else {
       $$2234243136$i = 0; //@line 8284
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 171) {
     $603 = 0 - $$2253$ph$i | 0; //@line 8291
     if (!($545 >>> 0 > $$2253$ph$i >>> 0 & ($$2253$ph$i >>> 0 < 2147483647 & ($$2247$ph$i | 0) != (-1 | 0)))) {
      if (($$2247$ph$i | 0) == (-1 | 0)) {
       $$2234243136$i = 0; //@line 8300
       break;
      } else {
       $$723947$i = $$2253$ph$i; //@line 8303
       $$748$i = $$2247$ph$i; //@line 8303
       label = 180; //@line 8304
       break L244;
      }
     }
     $607 = HEAP32[5754] | 0; //@line 8308
     $611 = $546 - $$2253$ph$i + $607 & 0 - $607; //@line 8312
     if ($611 >>> 0 >= 2147483647) {
      $$723947$i = $$2253$ph$i; //@line 8315
      $$748$i = $$2247$ph$i; //@line 8315
      label = 180; //@line 8316
      break L244;
     }
     if ((_sbrk($611 | 0) | 0) == (-1 | 0)) {
      _sbrk($603 | 0) | 0; //@line 8322
      $$2234243136$i = 0; //@line 8323
      break;
     } else {
      $$723947$i = $611 + $$2253$ph$i | 0; //@line 8327
      $$748$i = $$2247$ph$i; //@line 8327
      label = 180; //@line 8328
      break L244;
     }
    }
   } while (0);
   HEAP32[5745] = HEAP32[5745] | 4; //@line 8335
   $$4236$i = $$2234243136$i; //@line 8336
   label = 178; //@line 8337
  } else {
   $$4236$i = 0; //@line 8339
   label = 178; //@line 8340
  }
 } while (0);
 if ((label | 0) == 178) {
  if ($550 >>> 0 < 2147483647) {
   $620 = _sbrk($550 | 0) | 0; //@line 8346
   $621 = _sbrk(0) | 0; //@line 8347
   $627 = $621 - $620 | 0; //@line 8355
   $629 = $627 >>> 0 > ($$0197 + 40 | 0) >>> 0; //@line 8357
   if (!(($620 | 0) == (-1 | 0) | $629 ^ 1 | $620 >>> 0 < $621 >>> 0 & (($620 | 0) != (-1 | 0) & ($621 | 0) != (-1 | 0)) ^ 1)) {
    $$723947$i = $629 ? $627 : $$4236$i; //@line 8365
    $$748$i = $620; //@line 8365
    label = 180; //@line 8366
   }
  }
 }
 if ((label | 0) == 180) {
  $633 = (HEAP32[5742] | 0) + $$723947$i | 0; //@line 8372
  HEAP32[5742] = $633; //@line 8373
  if ($633 >>> 0 > (HEAP32[5743] | 0) >>> 0) {
   HEAP32[5743] = $633; //@line 8377
  }
  $636 = HEAP32[5640] | 0; //@line 8379
  do {
   if (!$636) {
    $638 = HEAP32[5638] | 0; //@line 8383
    if (($638 | 0) == 0 | $$748$i >>> 0 < $638 >>> 0) {
     HEAP32[5638] = $$748$i; //@line 8388
    }
    HEAP32[5746] = $$748$i; //@line 8390
    HEAP32[5747] = $$723947$i; //@line 8391
    HEAP32[5749] = 0; //@line 8392
    HEAP32[5643] = HEAP32[5752]; //@line 8394
    HEAP32[5642] = -1; //@line 8395
    HEAP32[5647] = 22576; //@line 8396
    HEAP32[5646] = 22576; //@line 8397
    HEAP32[5649] = 22584; //@line 8398
    HEAP32[5648] = 22584; //@line 8399
    HEAP32[5651] = 22592; //@line 8400
    HEAP32[5650] = 22592; //@line 8401
    HEAP32[5653] = 22600; //@line 8402
    HEAP32[5652] = 22600; //@line 8403
    HEAP32[5655] = 22608; //@line 8404
    HEAP32[5654] = 22608; //@line 8405
    HEAP32[5657] = 22616; //@line 8406
    HEAP32[5656] = 22616; //@line 8407
    HEAP32[5659] = 22624; //@line 8408
    HEAP32[5658] = 22624; //@line 8409
    HEAP32[5661] = 22632; //@line 8410
    HEAP32[5660] = 22632; //@line 8411
    HEAP32[5663] = 22640; //@line 8412
    HEAP32[5662] = 22640; //@line 8413
    HEAP32[5665] = 22648; //@line 8414
    HEAP32[5664] = 22648; //@line 8415
    HEAP32[5667] = 22656; //@line 8416
    HEAP32[5666] = 22656; //@line 8417
    HEAP32[5669] = 22664; //@line 8418
    HEAP32[5668] = 22664; //@line 8419
    HEAP32[5671] = 22672; //@line 8420
    HEAP32[5670] = 22672; //@line 8421
    HEAP32[5673] = 22680; //@line 8422
    HEAP32[5672] = 22680; //@line 8423
    HEAP32[5675] = 22688; //@line 8424
    HEAP32[5674] = 22688; //@line 8425
    HEAP32[5677] = 22696; //@line 8426
    HEAP32[5676] = 22696; //@line 8427
    HEAP32[5679] = 22704; //@line 8428
    HEAP32[5678] = 22704; //@line 8429
    HEAP32[5681] = 22712; //@line 8430
    HEAP32[5680] = 22712; //@line 8431
    HEAP32[5683] = 22720; //@line 8432
    HEAP32[5682] = 22720; //@line 8433
    HEAP32[5685] = 22728; //@line 8434
    HEAP32[5684] = 22728; //@line 8435
    HEAP32[5687] = 22736; //@line 8436
    HEAP32[5686] = 22736; //@line 8437
    HEAP32[5689] = 22744; //@line 8438
    HEAP32[5688] = 22744; //@line 8439
    HEAP32[5691] = 22752; //@line 8440
    HEAP32[5690] = 22752; //@line 8441
    HEAP32[5693] = 22760; //@line 8442
    HEAP32[5692] = 22760; //@line 8443
    HEAP32[5695] = 22768; //@line 8444
    HEAP32[5694] = 22768; //@line 8445
    HEAP32[5697] = 22776; //@line 8446
    HEAP32[5696] = 22776; //@line 8447
    HEAP32[5699] = 22784; //@line 8448
    HEAP32[5698] = 22784; //@line 8449
    HEAP32[5701] = 22792; //@line 8450
    HEAP32[5700] = 22792; //@line 8451
    HEAP32[5703] = 22800; //@line 8452
    HEAP32[5702] = 22800; //@line 8453
    HEAP32[5705] = 22808; //@line 8454
    HEAP32[5704] = 22808; //@line 8455
    HEAP32[5707] = 22816; //@line 8456
    HEAP32[5706] = 22816; //@line 8457
    HEAP32[5709] = 22824; //@line 8458
    HEAP32[5708] = 22824; //@line 8459
    $642 = $$723947$i + -40 | 0; //@line 8460
    $644 = $$748$i + 8 | 0; //@line 8462
    $649 = ($644 & 7 | 0) == 0 ? 0 : 0 - $644 & 7; //@line 8467
    $650 = $$748$i + $649 | 0; //@line 8468
    $651 = $642 - $649 | 0; //@line 8469
    HEAP32[5640] = $650; //@line 8470
    HEAP32[5637] = $651; //@line 8471
    HEAP32[$650 + 4 >> 2] = $651 | 1; //@line 8474
    HEAP32[$$748$i + $642 + 4 >> 2] = 40; //@line 8477
    HEAP32[5641] = HEAP32[5756]; //@line 8479
   } else {
    $$024367$i = 22984; //@line 8481
    while (1) {
     $657 = HEAP32[$$024367$i >> 2] | 0; //@line 8483
     $658 = $$024367$i + 4 | 0; //@line 8484
     $659 = HEAP32[$658 >> 2] | 0; //@line 8485
     if (($$748$i | 0) == ($657 + $659 | 0)) {
      label = 188; //@line 8489
      break;
     }
     $663 = HEAP32[$$024367$i + 8 >> 2] | 0; //@line 8493
     if (!$663) {
      break;
     } else {
      $$024367$i = $663; //@line 8498
     }
    }
    if ((label | 0) == 188) {
     if (!(HEAP32[$$024367$i + 12 >> 2] & 8)) {
      if ($$748$i >>> 0 > $636 >>> 0 & $657 >>> 0 <= $636 >>> 0) {
       HEAP32[$658 >> 2] = $659 + $$723947$i; //@line 8512
       $673 = (HEAP32[5637] | 0) + $$723947$i | 0; //@line 8514
       $675 = $636 + 8 | 0; //@line 8516
       $680 = ($675 & 7 | 0) == 0 ? 0 : 0 - $675 & 7; //@line 8521
       $681 = $636 + $680 | 0; //@line 8522
       $682 = $673 - $680 | 0; //@line 8523
       HEAP32[5640] = $681; //@line 8524
       HEAP32[5637] = $682; //@line 8525
       HEAP32[$681 + 4 >> 2] = $682 | 1; //@line 8528
       HEAP32[$636 + $673 + 4 >> 2] = 40; //@line 8531
       HEAP32[5641] = HEAP32[5756]; //@line 8533
       break;
      }
     }
    }
    $688 = HEAP32[5638] | 0; //@line 8538
    if ($$748$i >>> 0 < $688 >>> 0) {
     HEAP32[5638] = $$748$i; //@line 8541
     $753 = $$748$i; //@line 8542
    } else {
     $753 = $688; //@line 8544
    }
    $690 = $$748$i + $$723947$i | 0; //@line 8546
    $$124466$i = 22984; //@line 8547
    while (1) {
     if ((HEAP32[$$124466$i >> 2] | 0) == ($690 | 0)) {
      label = 196; //@line 8552
      break;
     }
     $694 = HEAP32[$$124466$i + 8 >> 2] | 0; //@line 8556
     if (!$694) {
      $$0$i$i$i = 22984; //@line 8559
      break;
     } else {
      $$124466$i = $694; //@line 8562
     }
    }
    if ((label | 0) == 196) {
     if (!(HEAP32[$$124466$i + 12 >> 2] & 8)) {
      HEAP32[$$124466$i >> 2] = $$748$i; //@line 8571
      $700 = $$124466$i + 4 | 0; //@line 8572
      HEAP32[$700 >> 2] = (HEAP32[$700 >> 2] | 0) + $$723947$i; //@line 8575
      $704 = $$748$i + 8 | 0; //@line 8577
      $710 = $$748$i + (($704 & 7 | 0) == 0 ? 0 : 0 - $704 & 7) | 0; //@line 8583
      $712 = $690 + 8 | 0; //@line 8585
      $718 = $690 + (($712 & 7 | 0) == 0 ? 0 : 0 - $712 & 7) | 0; //@line 8591
      $722 = $710 + $$0197 | 0; //@line 8595
      $723 = $718 - $710 - $$0197 | 0; //@line 8596
      HEAP32[$710 + 4 >> 2] = $$0197 | 3; //@line 8599
      do {
       if (($636 | 0) == ($718 | 0)) {
        $728 = (HEAP32[5637] | 0) + $723 | 0; //@line 8604
        HEAP32[5637] = $728; //@line 8605
        HEAP32[5640] = $722; //@line 8606
        HEAP32[$722 + 4 >> 2] = $728 | 1; //@line 8609
       } else {
        if ((HEAP32[5639] | 0) == ($718 | 0)) {
         $734 = (HEAP32[5636] | 0) + $723 | 0; //@line 8615
         HEAP32[5636] = $734; //@line 8616
         HEAP32[5639] = $722; //@line 8617
         HEAP32[$722 + 4 >> 2] = $734 | 1; //@line 8620
         HEAP32[$722 + $734 >> 2] = $734; //@line 8622
         break;
        }
        $739 = HEAP32[$718 + 4 >> 2] | 0; //@line 8626
        if (($739 & 3 | 0) == 1) {
         $742 = $739 & -8; //@line 8630
         $743 = $739 >>> 3; //@line 8631
         L311 : do {
          if ($739 >>> 0 < 256) {
           $746 = HEAP32[$718 + 8 >> 2] | 0; //@line 8636
           $748 = HEAP32[$718 + 12 >> 2] | 0; //@line 8638
           $750 = 22576 + ($743 << 1 << 2) | 0; //@line 8640
           do {
            if (($746 | 0) != ($750 | 0)) {
             if ($753 >>> 0 > $746 >>> 0) {
              _abort(); //@line 8646
             }
             if ((HEAP32[$746 + 12 >> 2] | 0) == ($718 | 0)) {
              break;
             }
             _abort(); //@line 8655
            }
           } while (0);
           if (($748 | 0) == ($746 | 0)) {
            HEAP32[5634] = HEAP32[5634] & ~(1 << $743); //@line 8665
            break;
           }
           do {
            if (($748 | 0) == ($750 | 0)) {
             $$pre$phi11$i$iZ2D = $748 + 8 | 0; //@line 8672
            } else {
             if ($753 >>> 0 > $748 >>> 0) {
              _abort(); //@line 8676
             }
             $764 = $748 + 8 | 0; //@line 8679
             if ((HEAP32[$764 >> 2] | 0) == ($718 | 0)) {
              $$pre$phi11$i$iZ2D = $764; //@line 8683
              break;
             }
             _abort(); //@line 8686
            }
           } while (0);
           HEAP32[$746 + 12 >> 2] = $748; //@line 8691
           HEAP32[$$pre$phi11$i$iZ2D >> 2] = $746; //@line 8692
          } else {
           $769 = HEAP32[$718 + 24 >> 2] | 0; //@line 8695
           $771 = HEAP32[$718 + 12 >> 2] | 0; //@line 8697
           do {
            if (($771 | 0) == ($718 | 0)) {
             $782 = $718 + 16 | 0; //@line 8701
             $783 = $782 + 4 | 0; //@line 8702
             $784 = HEAP32[$783 >> 2] | 0; //@line 8703
             if (!$784) {
              $786 = HEAP32[$782 >> 2] | 0; //@line 8706
              if (!$786) {
               $$3$i$i = 0; //@line 8709
               break;
              } else {
               $$1291$i$i = $786; //@line 8712
               $$1293$i$i = $782; //@line 8712
              }
             } else {
              $$1291$i$i = $784; //@line 8715
              $$1293$i$i = $783; //@line 8715
             }
             while (1) {
              $788 = $$1291$i$i + 20 | 0; //@line 8718
              $789 = HEAP32[$788 >> 2] | 0; //@line 8719
              if ($789 | 0) {
               $$1291$i$i = $789; //@line 8722
               $$1293$i$i = $788; //@line 8722
               continue;
              }
              $791 = $$1291$i$i + 16 | 0; //@line 8725
              $792 = HEAP32[$791 >> 2] | 0; //@line 8726
              if (!$792) {
               break;
              } else {
               $$1291$i$i = $792; //@line 8731
               $$1293$i$i = $791; //@line 8731
              }
             }
             if ($753 >>> 0 > $$1293$i$i >>> 0) {
              _abort(); //@line 8736
             } else {
              HEAP32[$$1293$i$i >> 2] = 0; //@line 8739
              $$3$i$i = $$1291$i$i; //@line 8740
              break;
             }
            } else {
             $774 = HEAP32[$718 + 8 >> 2] | 0; //@line 8745
             if ($753 >>> 0 > $774 >>> 0) {
              _abort(); //@line 8748
             }
             $776 = $774 + 12 | 0; //@line 8751
             if ((HEAP32[$776 >> 2] | 0) != ($718 | 0)) {
              _abort(); //@line 8755
             }
             $779 = $771 + 8 | 0; //@line 8758
             if ((HEAP32[$779 >> 2] | 0) == ($718 | 0)) {
              HEAP32[$776 >> 2] = $771; //@line 8762
              HEAP32[$779 >> 2] = $774; //@line 8763
              $$3$i$i = $771; //@line 8764
              break;
             } else {
              _abort(); //@line 8767
             }
            }
           } while (0);
           if (!$769) {
            break;
           }
           $797 = HEAP32[$718 + 28 >> 2] | 0; //@line 8777
           $798 = 22840 + ($797 << 2) | 0; //@line 8778
           do {
            if ((HEAP32[$798 >> 2] | 0) == ($718 | 0)) {
             HEAP32[$798 >> 2] = $$3$i$i; //@line 8783
             if ($$3$i$i | 0) {
              break;
             }
             HEAP32[5635] = HEAP32[5635] & ~(1 << $797); //@line 8792
             break L311;
            } else {
             if ((HEAP32[5638] | 0) >>> 0 > $769 >>> 0) {
              _abort(); //@line 8798
             } else {
              HEAP32[$769 + 16 + (((HEAP32[$769 + 16 >> 2] | 0) != ($718 | 0) & 1) << 2) >> 2] = $$3$i$i; //@line 8806
              if (!$$3$i$i) {
               break L311;
              } else {
               break;
              }
             }
            }
           } while (0);
           $812 = HEAP32[5638] | 0; //@line 8816
           if ($812 >>> 0 > $$3$i$i >>> 0) {
            _abort(); //@line 8819
           }
           HEAP32[$$3$i$i + 24 >> 2] = $769; //@line 8823
           $815 = $718 + 16 | 0; //@line 8824
           $816 = HEAP32[$815 >> 2] | 0; //@line 8825
           do {
            if ($816 | 0) {
             if ($812 >>> 0 > $816 >>> 0) {
              _abort(); //@line 8831
             } else {
              HEAP32[$$3$i$i + 16 >> 2] = $816; //@line 8835
              HEAP32[$816 + 24 >> 2] = $$3$i$i; //@line 8837
              break;
             }
            }
           } while (0);
           $822 = HEAP32[$815 + 4 >> 2] | 0; //@line 8843
           if (!$822) {
            break;
           }
           if ((HEAP32[5638] | 0) >>> 0 > $822 >>> 0) {
            _abort(); //@line 8851
           } else {
            HEAP32[$$3$i$i + 20 >> 2] = $822; //@line 8855
            HEAP32[$822 + 24 >> 2] = $$3$i$i; //@line 8857
            break;
           }
          }
         } while (0);
         $$0$i17$i = $718 + $742 | 0; //@line 8864
         $$0287$i$i = $742 + $723 | 0; //@line 8864
        } else {
         $$0$i17$i = $718; //@line 8866
         $$0287$i$i = $723; //@line 8866
        }
        $830 = $$0$i17$i + 4 | 0; //@line 8868
        HEAP32[$830 >> 2] = HEAP32[$830 >> 2] & -2; //@line 8871
        HEAP32[$722 + 4 >> 2] = $$0287$i$i | 1; //@line 8874
        HEAP32[$722 + $$0287$i$i >> 2] = $$0287$i$i; //@line 8876
        $836 = $$0287$i$i >>> 3; //@line 8877
        if ($$0287$i$i >>> 0 < 256) {
         $839 = 22576 + ($836 << 1 << 2) | 0; //@line 8881
         $840 = HEAP32[5634] | 0; //@line 8882
         $841 = 1 << $836; //@line 8883
         do {
          if (!($840 & $841)) {
           HEAP32[5634] = $840 | $841; //@line 8889
           $$0295$i$i = $839; //@line 8891
           $$pre$phi$i19$iZ2D = $839 + 8 | 0; //@line 8891
          } else {
           $845 = $839 + 8 | 0; //@line 8893
           $846 = HEAP32[$845 >> 2] | 0; //@line 8894
           if ((HEAP32[5638] | 0) >>> 0 <= $846 >>> 0) {
            $$0295$i$i = $846; //@line 8898
            $$pre$phi$i19$iZ2D = $845; //@line 8898
            break;
           }
           _abort(); //@line 8901
          }
         } while (0);
         HEAP32[$$pre$phi$i19$iZ2D >> 2] = $722; //@line 8905
         HEAP32[$$0295$i$i + 12 >> 2] = $722; //@line 8907
         HEAP32[$722 + 8 >> 2] = $$0295$i$i; //@line 8909
         HEAP32[$722 + 12 >> 2] = $839; //@line 8911
         break;
        }
        $852 = $$0287$i$i >>> 8; //@line 8914
        do {
         if (!$852) {
          $$0296$i$i = 0; //@line 8918
         } else {
          if ($$0287$i$i >>> 0 > 16777215) {
           $$0296$i$i = 31; //@line 8922
           break;
          }
          $857 = ($852 + 1048320 | 0) >>> 16 & 8; //@line 8927
          $858 = $852 << $857; //@line 8928
          $861 = ($858 + 520192 | 0) >>> 16 & 4; //@line 8931
          $863 = $858 << $861; //@line 8933
          $866 = ($863 + 245760 | 0) >>> 16 & 2; //@line 8936
          $871 = 14 - ($861 | $857 | $866) + ($863 << $866 >>> 15) | 0; //@line 8941
          $$0296$i$i = $$0287$i$i >>> ($871 + 7 | 0) & 1 | $871 << 1; //@line 8947
         }
        } while (0);
        $877 = 22840 + ($$0296$i$i << 2) | 0; //@line 8950
        HEAP32[$722 + 28 >> 2] = $$0296$i$i; //@line 8952
        $879 = $722 + 16 | 0; //@line 8953
        HEAP32[$879 + 4 >> 2] = 0; //@line 8955
        HEAP32[$879 >> 2] = 0; //@line 8956
        $881 = HEAP32[5635] | 0; //@line 8957
        $882 = 1 << $$0296$i$i; //@line 8958
        if (!($881 & $882)) {
         HEAP32[5635] = $881 | $882; //@line 8963
         HEAP32[$877 >> 2] = $722; //@line 8964
         HEAP32[$722 + 24 >> 2] = $877; //@line 8966
         HEAP32[$722 + 12 >> 2] = $722; //@line 8968
         HEAP32[$722 + 8 >> 2] = $722; //@line 8970
         break;
        }
        $$0288$i$i = $$0287$i$i << (($$0296$i$i | 0) == 31 ? 0 : 25 - ($$0296$i$i >>> 1) | 0); //@line 8979
        $$0289$i$i = HEAP32[$877 >> 2] | 0; //@line 8979
        while (1) {
         if ((HEAP32[$$0289$i$i + 4 >> 2] & -8 | 0) == ($$0287$i$i | 0)) {
          label = 263; //@line 8986
          break;
         }
         $900 = $$0289$i$i + 16 + ($$0288$i$i >>> 31 << 2) | 0; //@line 8990
         $902 = HEAP32[$900 >> 2] | 0; //@line 8992
         if (!$902) {
          label = 260; //@line 8995
          break;
         } else {
          $$0288$i$i = $$0288$i$i << 1; //@line 8998
          $$0289$i$i = $902; //@line 8998
         }
        }
        if ((label | 0) == 260) {
         if ((HEAP32[5638] | 0) >>> 0 > $900 >>> 0) {
          _abort(); //@line 9005
         } else {
          HEAP32[$900 >> 2] = $722; //@line 9008
          HEAP32[$722 + 24 >> 2] = $$0289$i$i; //@line 9010
          HEAP32[$722 + 12 >> 2] = $722; //@line 9012
          HEAP32[$722 + 8 >> 2] = $722; //@line 9014
          break;
         }
        } else if ((label | 0) == 263) {
         $909 = $$0289$i$i + 8 | 0; //@line 9019
         $910 = HEAP32[$909 >> 2] | 0; //@line 9020
         $911 = HEAP32[5638] | 0; //@line 9021
         if ($911 >>> 0 <= $910 >>> 0 & $911 >>> 0 <= $$0289$i$i >>> 0) {
          HEAP32[$910 + 12 >> 2] = $722; //@line 9027
          HEAP32[$909 >> 2] = $722; //@line 9028
          HEAP32[$722 + 8 >> 2] = $910; //@line 9030
          HEAP32[$722 + 12 >> 2] = $$0289$i$i; //@line 9032
          HEAP32[$722 + 24 >> 2] = 0; //@line 9034
          break;
         } else {
          _abort(); //@line 9037
         }
        }
       }
      } while (0);
      $$0 = $710 + 8 | 0; //@line 9044
      STACKTOP = sp; //@line 9045
      return $$0 | 0; //@line 9045
     } else {
      $$0$i$i$i = 22984; //@line 9047
     }
    }
    while (1) {
     $919 = HEAP32[$$0$i$i$i >> 2] | 0; //@line 9051
     if ($919 >>> 0 <= $636 >>> 0) {
      $923 = $919 + (HEAP32[$$0$i$i$i + 4 >> 2] | 0) | 0; //@line 9056
      if ($923 >>> 0 > $636 >>> 0) {
       break;
      }
     }
     $$0$i$i$i = HEAP32[$$0$i$i$i + 8 >> 2] | 0; //@line 9064
    }
    $927 = $923 + -47 | 0; //@line 9066
    $929 = $927 + 8 | 0; //@line 9068
    $935 = $927 + (($929 & 7 | 0) == 0 ? 0 : 0 - $929 & 7) | 0; //@line 9074
    $936 = $636 + 16 | 0; //@line 9075
    $938 = $935 >>> 0 < $936 >>> 0 ? $636 : $935; //@line 9077
    $939 = $938 + 8 | 0; //@line 9078
    $940 = $938 + 24 | 0; //@line 9079
    $941 = $$723947$i + -40 | 0; //@line 9080
    $943 = $$748$i + 8 | 0; //@line 9082
    $948 = ($943 & 7 | 0) == 0 ? 0 : 0 - $943 & 7; //@line 9087
    $949 = $$748$i + $948 | 0; //@line 9088
    $950 = $941 - $948 | 0; //@line 9089
    HEAP32[5640] = $949; //@line 9090
    HEAP32[5637] = $950; //@line 9091
    HEAP32[$949 + 4 >> 2] = $950 | 1; //@line 9094
    HEAP32[$$748$i + $941 + 4 >> 2] = 40; //@line 9097
    HEAP32[5641] = HEAP32[5756]; //@line 9099
    $956 = $938 + 4 | 0; //@line 9100
    HEAP32[$956 >> 2] = 27; //@line 9101
    HEAP32[$939 >> 2] = HEAP32[5746]; //@line 9102
    HEAP32[$939 + 4 >> 2] = HEAP32[5747]; //@line 9102
    HEAP32[$939 + 8 >> 2] = HEAP32[5748]; //@line 9102
    HEAP32[$939 + 12 >> 2] = HEAP32[5749]; //@line 9102
    HEAP32[5746] = $$748$i; //@line 9103
    HEAP32[5747] = $$723947$i; //@line 9104
    HEAP32[5749] = 0; //@line 9105
    HEAP32[5748] = $939; //@line 9106
    $958 = $940; //@line 9107
    do {
     $958$looptemp = $958;
     $958 = $958 + 4 | 0; //@line 9109
     HEAP32[$958 >> 2] = 7; //@line 9110
    } while (($958$looptemp + 8 | 0) >>> 0 < $923 >>> 0);
    if (($938 | 0) != ($636 | 0)) {
     $964 = $938 - $636 | 0; //@line 9123
     HEAP32[$956 >> 2] = HEAP32[$956 >> 2] & -2; //@line 9126
     HEAP32[$636 + 4 >> 2] = $964 | 1; //@line 9129
     HEAP32[$938 >> 2] = $964; //@line 9130
     $969 = $964 >>> 3; //@line 9131
     if ($964 >>> 0 < 256) {
      $972 = 22576 + ($969 << 1 << 2) | 0; //@line 9135
      $973 = HEAP32[5634] | 0; //@line 9136
      $974 = 1 << $969; //@line 9137
      if (!($973 & $974)) {
       HEAP32[5634] = $973 | $974; //@line 9142
       $$0211$i$i = $972; //@line 9144
       $$pre$phi$i$iZ2D = $972 + 8 | 0; //@line 9144
      } else {
       $978 = $972 + 8 | 0; //@line 9146
       $979 = HEAP32[$978 >> 2] | 0; //@line 9147
       if ((HEAP32[5638] | 0) >>> 0 > $979 >>> 0) {
        _abort(); //@line 9151
       } else {
        $$0211$i$i = $979; //@line 9154
        $$pre$phi$i$iZ2D = $978; //@line 9154
       }
      }
      HEAP32[$$pre$phi$i$iZ2D >> 2] = $636; //@line 9157
      HEAP32[$$0211$i$i + 12 >> 2] = $636; //@line 9159
      HEAP32[$636 + 8 >> 2] = $$0211$i$i; //@line 9161
      HEAP32[$636 + 12 >> 2] = $972; //@line 9163
      break;
     }
     $985 = $964 >>> 8; //@line 9166
     if (!$985) {
      $$0212$i$i = 0; //@line 9169
     } else {
      if ($964 >>> 0 > 16777215) {
       $$0212$i$i = 31; //@line 9173
      } else {
       $990 = ($985 + 1048320 | 0) >>> 16 & 8; //@line 9177
       $991 = $985 << $990; //@line 9178
       $994 = ($991 + 520192 | 0) >>> 16 & 4; //@line 9181
       $996 = $991 << $994; //@line 9183
       $999 = ($996 + 245760 | 0) >>> 16 & 2; //@line 9186
       $1004 = 14 - ($994 | $990 | $999) + ($996 << $999 >>> 15) | 0; //@line 9191
       $$0212$i$i = $964 >>> ($1004 + 7 | 0) & 1 | $1004 << 1; //@line 9197
      }
     }
     $1010 = 22840 + ($$0212$i$i << 2) | 0; //@line 9200
     HEAP32[$636 + 28 >> 2] = $$0212$i$i; //@line 9202
     HEAP32[$636 + 20 >> 2] = 0; //@line 9204
     HEAP32[$936 >> 2] = 0; //@line 9205
     $1013 = HEAP32[5635] | 0; //@line 9206
     $1014 = 1 << $$0212$i$i; //@line 9207
     if (!($1013 & $1014)) {
      HEAP32[5635] = $1013 | $1014; //@line 9212
      HEAP32[$1010 >> 2] = $636; //@line 9213
      HEAP32[$636 + 24 >> 2] = $1010; //@line 9215
      HEAP32[$636 + 12 >> 2] = $636; //@line 9217
      HEAP32[$636 + 8 >> 2] = $636; //@line 9219
      break;
     }
     $$0206$i$i = $964 << (($$0212$i$i | 0) == 31 ? 0 : 25 - ($$0212$i$i >>> 1) | 0); //@line 9228
     $$0207$i$i = HEAP32[$1010 >> 2] | 0; //@line 9228
     while (1) {
      if ((HEAP32[$$0207$i$i + 4 >> 2] & -8 | 0) == ($964 | 0)) {
       label = 289; //@line 9235
       break;
      }
      $1032 = $$0207$i$i + 16 + ($$0206$i$i >>> 31 << 2) | 0; //@line 9239
      $1034 = HEAP32[$1032 >> 2] | 0; //@line 9241
      if (!$1034) {
       label = 286; //@line 9244
       break;
      } else {
       $$0206$i$i = $$0206$i$i << 1; //@line 9247
       $$0207$i$i = $1034; //@line 9247
      }
     }
     if ((label | 0) == 286) {
      if ((HEAP32[5638] | 0) >>> 0 > $1032 >>> 0) {
       _abort(); //@line 9254
      } else {
       HEAP32[$1032 >> 2] = $636; //@line 9257
       HEAP32[$636 + 24 >> 2] = $$0207$i$i; //@line 9259
       HEAP32[$636 + 12 >> 2] = $636; //@line 9261
       HEAP32[$636 + 8 >> 2] = $636; //@line 9263
       break;
      }
     } else if ((label | 0) == 289) {
      $1041 = $$0207$i$i + 8 | 0; //@line 9268
      $1042 = HEAP32[$1041 >> 2] | 0; //@line 9269
      $1043 = HEAP32[5638] | 0; //@line 9270
      if ($1043 >>> 0 <= $1042 >>> 0 & $1043 >>> 0 <= $$0207$i$i >>> 0) {
       HEAP32[$1042 + 12 >> 2] = $636; //@line 9276
       HEAP32[$1041 >> 2] = $636; //@line 9277
       HEAP32[$636 + 8 >> 2] = $1042; //@line 9279
       HEAP32[$636 + 12 >> 2] = $$0207$i$i; //@line 9281
       HEAP32[$636 + 24 >> 2] = 0; //@line 9283
       break;
      } else {
       _abort(); //@line 9286
      }
     }
    }
   }
  } while (0);
  $1052 = HEAP32[5637] | 0; //@line 9293
  if ($1052 >>> 0 > $$0197 >>> 0) {
   $1054 = $1052 - $$0197 | 0; //@line 9296
   HEAP32[5637] = $1054; //@line 9297
   $1055 = HEAP32[5640] | 0; //@line 9298
   $1056 = $1055 + $$0197 | 0; //@line 9299
   HEAP32[5640] = $1056; //@line 9300
   HEAP32[$1056 + 4 >> 2] = $1054 | 1; //@line 9303
   HEAP32[$1055 + 4 >> 2] = $$0197 | 3; //@line 9306
   $$0 = $1055 + 8 | 0; //@line 9308
   STACKTOP = sp; //@line 9309
   return $$0 | 0; //@line 9309
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 9313
 $$0 = 0; //@line 9314
 STACKTOP = sp; //@line 9315
 return $$0 | 0; //@line 9315
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_433($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$byval_copy24 = 0, $$pre20 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $113 = 0, $118 = 0, $12 = 0, $124 = 0, $130 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $159 = 0, $16 = 0, $170 = 0, $174 = 0, $178 = 0, $18 = 0, $183 = 0, $189 = 0, $190 = 0, $195 = 0, $199 = 0, $2 = 0, $20 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $22 = 0, $220 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $243 = 0, $245 = 0, $246 = 0, $251 = 0, $253 = 0, $254 = 0, $255 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $287 = 0, $288 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $340 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $351 = 0, $352 = 0, $354 = 0, $355 = 0, $356 = 0, $358 = 0, $359 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $368 = 0, $372 = 0, $373 = 0, $375 = 0, $376 = 0, $377 = 0, $379 = 0, $380 = 0, $381 = 0, $382 = 0, $39 = 0, $4 = 0, $53 = 0, $6 = 0, $61 = 0, $64 = 0, $69 = 0, $73 = 0, $74 = 0, $8 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 27223
 STACKTOP = STACKTOP + 16 | 0; //@line 27224
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 27224
 $$byval_copy24 = sp + 8 | 0; //@line 27225
 $$byval_copy = sp; //@line 27226
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27228
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27230
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27232
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27234
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27236
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27238
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27240
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27242
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 27244
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 27246
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 27248
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 27250
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 27252
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 27254
 $29 = $2 + 944 | 0; //@line 27255
 $30 = HEAP8[$29 >> 0] | 0; //@line 27256
 $$pre20 = $2 + 968 | 0; //@line 27259
 if ($30 & 32) {
  $33 = HEAP32[$$pre20 >> 2] | 0; //@line 27261
  if ($33 & 64 | 0) {
   HEAP32[$$pre20 >> 2] = $33 & -66; //@line 27266
  }
  do {
   if (!($30 & 9)) {
    label = 9; //@line 27272
   } else {
    $39 = $2 + 288 | 0; //@line 27274
    if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($39) | 0) + 4 >> 2] | 0) != 2) {
     if ((HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] | 0) != 2) {
      label = 9; //@line 27286
      break;
     }
    }
    HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 27292
    __ZN14LoRaMacCommand20clear_command_bufferEv($2 + 4 | 0); //@line 27294
    $53 = HEAP8[$2 + 895 >> 0] | 0; //@line 27296
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($39) | 0) + 11 >> 0] = $53; //@line 27299
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($39) | 0) + 10 >> 0] = 0; //@line 27302
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($39) | 0) + 12 >> 2] = 0; //@line 27305
    $170 = $2 + 373 | 0; //@line 27307
   }
  } while (0);
  do {
   if ((label | 0) == 9) {
    $61 = $2 + 373 | 0; //@line 27312
    if (!(HEAP8[$61 >> 0] | 0)) {
     $64 = HEAP8[$29 >> 0] | 0; //@line 27316
     if (!($64 & 9)) {
      $170 = $61; //@line 27320
     } else {
      if ($64 & 8) {
       $69 = $2 + 264 | 0; //@line 27325
       if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($69) | 0) >> 2] | 0)) {
        $73 = $2 + 897 | 0; //@line 27330
        $74 = HEAP8[$73 >> 0] | 0; //@line 27331
        HEAP8[(__ZN11LoRaMacMlme16get_confirmationEv($69) | 0) + 14 >> 0] = $74; //@line 27334
        if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($69) | 0) + 4 >> 2] | 0)) {
         HEAP32[$2 + 956 >> 2] = 0; //@line 27341
         HEAP8[$2 + 380 >> 0] = 0; //@line 27343
         HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 27346
         $170 = $61; //@line 27347
         break;
        }
        if ((HEAPU8[$73 >> 0] | 0) >= (HEAPU8[$2 + 896 >> 0] | 0)) {
         HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 27357
         $170 = $61; //@line 27358
         break;
        }
        HEAP8[$29 >> 0] = HEAP8[$29 >> 0] & -33; //@line 27363
        $94 = HEAP32[$2 + 1328 >> 2] | 0; //@line 27365
        HEAP32[$26 >> 2] = 446; //@line 27366
        HEAP32[$26 + 4 >> 2] = 0; //@line 27368
        $ReallocAsyncCtx12 = _emscripten_realloc_async_context(68) | 0; //@line 27369
        HEAP32[$$byval_copy >> 2] = HEAP32[$26 >> 2]; //@line 27370
        HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$26 + 4 >> 2]; //@line 27370
        $95 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($94, $2, $$byval_copy) | 0; //@line 27371
        if (___async) {
         HEAP32[$ReallocAsyncCtx12 >> 2] = 447; //@line 27374
         $96 = $ReallocAsyncCtx12 + 4 | 0; //@line 27375
         HEAP32[$96 >> 2] = $2; //@line 27376
         $97 = $ReallocAsyncCtx12 + 8 | 0; //@line 27377
         HEAP32[$97 >> 2] = $29; //@line 27378
         $98 = $ReallocAsyncCtx12 + 12 | 0; //@line 27379
         HEAP32[$98 >> 2] = $4; //@line 27380
         $99 = $ReallocAsyncCtx12 + 16 | 0; //@line 27381
         HEAP32[$99 >> 2] = $6; //@line 27382
         $100 = $ReallocAsyncCtx12 + 20 | 0; //@line 27383
         HEAP32[$100 >> 2] = $8; //@line 27384
         $101 = $ReallocAsyncCtx12 + 24 | 0; //@line 27385
         HEAP32[$101 >> 2] = $10; //@line 27386
         $102 = $ReallocAsyncCtx12 + 28 | 0; //@line 27387
         HEAP32[$102 >> 2] = $12; //@line 27388
         $103 = $ReallocAsyncCtx12 + 32 | 0; //@line 27389
         HEAP32[$103 >> 2] = $$pre20; //@line 27390
         $104 = $ReallocAsyncCtx12 + 36 | 0; //@line 27391
         HEAP32[$104 >> 2] = $14; //@line 27392
         $105 = $ReallocAsyncCtx12 + 40 | 0; //@line 27393
         HEAP32[$105 >> 2] = $16; //@line 27394
         $106 = $ReallocAsyncCtx12 + 44 | 0; //@line 27395
         HEAP32[$106 >> 2] = $18; //@line 27396
         $107 = $ReallocAsyncCtx12 + 48 | 0; //@line 27397
         HEAP32[$107 >> 2] = $20; //@line 27398
         $108 = $ReallocAsyncCtx12 + 52 | 0; //@line 27399
         HEAP32[$108 >> 2] = $26; //@line 27400
         $109 = $ReallocAsyncCtx12 + 56 | 0; //@line 27401
         HEAP32[$109 >> 2] = $22; //@line 27402
         $110 = $ReallocAsyncCtx12 + 60 | 0; //@line 27403
         HEAP32[$110 >> 2] = $24; //@line 27404
         $111 = $ReallocAsyncCtx12 + 64 | 0; //@line 27405
         HEAP32[$111 >> 2] = $61; //@line 27406
         sp = STACKTOP; //@line 27407
         STACKTOP = sp; //@line 27408
         return;
        }
        HEAP32[___async_retval >> 2] = $95; //@line 27411
        ___async_unwind = 0; //@line 27412
        HEAP32[$ReallocAsyncCtx12 >> 2] = 447; //@line 27413
        $96 = $ReallocAsyncCtx12 + 4 | 0; //@line 27414
        HEAP32[$96 >> 2] = $2; //@line 27415
        $97 = $ReallocAsyncCtx12 + 8 | 0; //@line 27416
        HEAP32[$97 >> 2] = $29; //@line 27417
        $98 = $ReallocAsyncCtx12 + 12 | 0; //@line 27418
        HEAP32[$98 >> 2] = $4; //@line 27419
        $99 = $ReallocAsyncCtx12 + 16 | 0; //@line 27420
        HEAP32[$99 >> 2] = $6; //@line 27421
        $100 = $ReallocAsyncCtx12 + 20 | 0; //@line 27422
        HEAP32[$100 >> 2] = $8; //@line 27423
        $101 = $ReallocAsyncCtx12 + 24 | 0; //@line 27424
        HEAP32[$101 >> 2] = $10; //@line 27425
        $102 = $ReallocAsyncCtx12 + 28 | 0; //@line 27426
        HEAP32[$102 >> 2] = $12; //@line 27427
        $103 = $ReallocAsyncCtx12 + 32 | 0; //@line 27428
        HEAP32[$103 >> 2] = $$pre20; //@line 27429
        $104 = $ReallocAsyncCtx12 + 36 | 0; //@line 27430
        HEAP32[$104 >> 2] = $14; //@line 27431
        $105 = $ReallocAsyncCtx12 + 40 | 0; //@line 27432
        HEAP32[$105 >> 2] = $16; //@line 27433
        $106 = $ReallocAsyncCtx12 + 44 | 0; //@line 27434
        HEAP32[$106 >> 2] = $18; //@line 27435
        $107 = $ReallocAsyncCtx12 + 48 | 0; //@line 27436
        HEAP32[$107 >> 2] = $20; //@line 27437
        $108 = $ReallocAsyncCtx12 + 52 | 0; //@line 27438
        HEAP32[$108 >> 2] = $26; //@line 27439
        $109 = $ReallocAsyncCtx12 + 56 | 0; //@line 27440
        HEAP32[$109 >> 2] = $22; //@line 27441
        $110 = $ReallocAsyncCtx12 + 60 | 0; //@line 27442
        HEAP32[$110 >> 2] = $24; //@line 27443
        $111 = $ReallocAsyncCtx12 + 64 | 0; //@line 27444
        HEAP32[$111 >> 2] = $61; //@line 27445
        sp = STACKTOP; //@line 27446
        STACKTOP = sp; //@line 27447
        return;
       }
      }
      $113 = $2 + 380 | 0; //@line 27450
      $118 = HEAP8[$29 >> 0] | 0; //@line 27455
      if (($118 & 2) == 0 ? (HEAPU8[$113 >> 0] | 0) < (HEAPU8[$2 + 1128 >> 0] | 0) : 0) {
       HEAP8[$29 >> 0] = $118 & -33; //@line 27461
       $137 = HEAP32[$2 + 1328 >> 2] | 0; //@line 27463
       HEAP32[$28 >> 2] = 446; //@line 27464
       HEAP32[$28 + 4 >> 2] = 0; //@line 27466
       $ReallocAsyncCtx11 = _emscripten_realloc_async_context(68) | 0; //@line 27467
       HEAP32[$$byval_copy24 >> 2] = HEAP32[$28 >> 2]; //@line 27468
       HEAP32[$$byval_copy24 + 4 >> 2] = HEAP32[$28 + 4 >> 2]; //@line 27468
       $138 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($137, $2, $$byval_copy24) | 0; //@line 27469
       if (___async) {
        HEAP32[$ReallocAsyncCtx11 >> 2] = 449; //@line 27472
        $139 = $ReallocAsyncCtx11 + 4 | 0; //@line 27473
        HEAP32[$139 >> 2] = $2; //@line 27474
        $140 = $ReallocAsyncCtx11 + 8 | 0; //@line 27475
        HEAP32[$140 >> 2] = $29; //@line 27476
        $141 = $ReallocAsyncCtx11 + 12 | 0; //@line 27477
        HEAP32[$141 >> 2] = $4; //@line 27478
        $142 = $ReallocAsyncCtx11 + 16 | 0; //@line 27479
        HEAP32[$142 >> 2] = $6; //@line 27480
        $143 = $ReallocAsyncCtx11 + 20 | 0; //@line 27481
        HEAP32[$143 >> 2] = $8; //@line 27482
        $144 = $ReallocAsyncCtx11 + 24 | 0; //@line 27483
        HEAP32[$144 >> 2] = $10; //@line 27484
        $145 = $ReallocAsyncCtx11 + 28 | 0; //@line 27485
        HEAP32[$145 >> 2] = $12; //@line 27486
        $146 = $ReallocAsyncCtx11 + 32 | 0; //@line 27487
        HEAP32[$146 >> 2] = $$pre20; //@line 27488
        $147 = $ReallocAsyncCtx11 + 36 | 0; //@line 27489
        HEAP32[$147 >> 2] = $14; //@line 27490
        $148 = $ReallocAsyncCtx11 + 40 | 0; //@line 27491
        HEAP32[$148 >> 2] = $16; //@line 27492
        $149 = $ReallocAsyncCtx11 + 44 | 0; //@line 27493
        HEAP32[$149 >> 2] = $18; //@line 27494
        $150 = $ReallocAsyncCtx11 + 48 | 0; //@line 27495
        HEAP32[$150 >> 2] = $20; //@line 27496
        $151 = $ReallocAsyncCtx11 + 52 | 0; //@line 27497
        HEAP32[$151 >> 2] = $22; //@line 27498
        $152 = $ReallocAsyncCtx11 + 56 | 0; //@line 27499
        HEAP32[$152 >> 2] = $24; //@line 27500
        $153 = $ReallocAsyncCtx11 + 60 | 0; //@line 27501
        HEAP32[$153 >> 2] = $61; //@line 27502
        $154 = $ReallocAsyncCtx11 + 64 | 0; //@line 27503
        HEAP32[$154 >> 2] = $28; //@line 27504
        sp = STACKTOP; //@line 27505
        STACKTOP = sp; //@line 27506
        return;
       }
       HEAP32[___async_retval >> 2] = $138; //@line 27509
       ___async_unwind = 0; //@line 27510
       HEAP32[$ReallocAsyncCtx11 >> 2] = 449; //@line 27511
       $139 = $ReallocAsyncCtx11 + 4 | 0; //@line 27512
       HEAP32[$139 >> 2] = $2; //@line 27513
       $140 = $ReallocAsyncCtx11 + 8 | 0; //@line 27514
       HEAP32[$140 >> 2] = $29; //@line 27515
       $141 = $ReallocAsyncCtx11 + 12 | 0; //@line 27516
       HEAP32[$141 >> 2] = $4; //@line 27517
       $142 = $ReallocAsyncCtx11 + 16 | 0; //@line 27518
       HEAP32[$142 >> 2] = $6; //@line 27519
       $143 = $ReallocAsyncCtx11 + 20 | 0; //@line 27520
       HEAP32[$143 >> 2] = $8; //@line 27521
       $144 = $ReallocAsyncCtx11 + 24 | 0; //@line 27522
       HEAP32[$144 >> 2] = $10; //@line 27523
       $145 = $ReallocAsyncCtx11 + 28 | 0; //@line 27524
       HEAP32[$145 >> 2] = $12; //@line 27525
       $146 = $ReallocAsyncCtx11 + 32 | 0; //@line 27526
       HEAP32[$146 >> 2] = $$pre20; //@line 27527
       $147 = $ReallocAsyncCtx11 + 36 | 0; //@line 27528
       HEAP32[$147 >> 2] = $14; //@line 27529
       $148 = $ReallocAsyncCtx11 + 40 | 0; //@line 27530
       HEAP32[$148 >> 2] = $16; //@line 27531
       $149 = $ReallocAsyncCtx11 + 44 | 0; //@line 27532
       HEAP32[$149 >> 2] = $18; //@line 27533
       $150 = $ReallocAsyncCtx11 + 48 | 0; //@line 27534
       HEAP32[$150 >> 2] = $20; //@line 27535
       $151 = $ReallocAsyncCtx11 + 52 | 0; //@line 27536
       HEAP32[$151 >> 2] = $22; //@line 27537
       $152 = $ReallocAsyncCtx11 + 56 | 0; //@line 27538
       HEAP32[$152 >> 2] = $24; //@line 27539
       $153 = $ReallocAsyncCtx11 + 60 | 0; //@line 27540
       HEAP32[$153 >> 2] = $61; //@line 27541
       $154 = $ReallocAsyncCtx11 + 64 | 0; //@line 27542
       HEAP32[$154 >> 2] = $28; //@line 27543
       sp = STACKTOP; //@line 27544
       STACKTOP = sp; //@line 27545
       return;
      }
      if (!($118 & 2)) {
       __ZN14LoRaMacCommand20clear_command_bufferEv($2 + 4 | 0); //@line 27551
       $124 = $2 + 964 | 0; //@line 27552
       HEAP32[$124 >> 2] = (HEAP32[$124 >> 2] | 0) + 1; //@line 27555
      }
      HEAP8[$113 >> 0] = 0; //@line 27557
      if (!(HEAP8[$2 + 370 >> 0] | 0)) {
       $130 = $2 + 956 | 0; //@line 27562
       HEAP32[$130 >> 2] = (HEAP32[$130 >> 2] | 0) + 1; //@line 27565
      }
      HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 27569
      $170 = $61; //@line 27570
     }
    } else {
     $170 = $61; //@line 27573
    }
   }
  } while (0);
  do {
   if (HEAP8[$29 >> 0] & 2) {
    $159 = $2 + 288 | 0; //@line 27582
    if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($159) | 0) + 10 >> 0] | 0)) {
     if ((HEAPU8[$2 + 895 >> 0] | 0) <= (HEAPU8[$2 + 894 >> 0] | 0)) {
      break;
     }
    }
    HEAP8[$2 + 377 >> 0] = 0; //@line 27598
    HEAP8[$170 >> 0] = 0; //@line 27599
    if (!(HEAP8[$2 + 370 >> 0] | 0)) {
     $174 = $2 + 956 | 0; //@line 27604
     HEAP32[$174 >> 2] = (HEAP32[$174 >> 2] | 0) + 1; //@line 27607
    }
    $178 = HEAP8[$2 + 895 >> 0] | 0; //@line 27610
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($159) | 0) + 11 >> 0] = $178; //@line 27613
    HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 27616
   }
  } while (0);
  $183 = $2 + 377 | 0; //@line 27619
  if (HEAP8[$183 >> 0] | 0) {
   if (!(HEAP32[$$pre20 >> 2] & 16)) {
    HEAP8[$183 >> 0] = 0; //@line 27627
    $189 = $2 + 895 | 0; //@line 27628
    $190 = HEAP8[$189 >> 0] | 0; //@line 27629
    if (!(($190 & 255) < 9 ? ($190 & 255) < (HEAPU8[$2 + 894 >> 0] | 0) : 0)) {
     $220 = HEAP32[$2 >> 2] | 0; //@line 27636
     $223 = HEAP32[(HEAP32[$220 >> 2] | 0) + 16 >> 2] | 0; //@line 27639
     $ReallocAsyncCtx = _emscripten_realloc_async_context(68) | 0; //@line 27640
     FUNCTION_TABLE_vi[$223 & 1023]($220); //@line 27641
     if (___async) {
      HEAP32[$ReallocAsyncCtx >> 2] = 452; //@line 27644
      $224 = $ReallocAsyncCtx + 4 | 0; //@line 27645
      HEAP32[$224 >> 2] = $4; //@line 27646
      $225 = $ReallocAsyncCtx + 8 | 0; //@line 27647
      HEAP32[$225 >> 2] = $6; //@line 27648
      $226 = $ReallocAsyncCtx + 12 | 0; //@line 27649
      HEAP32[$226 >> 2] = $8; //@line 27650
      $227 = $ReallocAsyncCtx + 16 | 0; //@line 27651
      HEAP32[$227 >> 2] = $10; //@line 27652
      $228 = $ReallocAsyncCtx + 20 | 0; //@line 27653
      HEAP32[$228 >> 2] = $12; //@line 27654
      $229 = $ReallocAsyncCtx + 24 | 0; //@line 27655
      HEAP32[$229 >> 2] = $29; //@line 27656
      $230 = $ReallocAsyncCtx + 28 | 0; //@line 27657
      HEAP32[$230 >> 2] = $2; //@line 27658
      $231 = $ReallocAsyncCtx + 32 | 0; //@line 27659
      HEAP32[$231 >> 2] = $$pre20; //@line 27660
      $232 = $ReallocAsyncCtx + 36 | 0; //@line 27661
      HEAP32[$232 >> 2] = $170; //@line 27662
      $233 = $ReallocAsyncCtx + 40 | 0; //@line 27663
      HEAP32[$233 >> 2] = $189; //@line 27664
      $234 = $ReallocAsyncCtx + 44 | 0; //@line 27665
      HEAP32[$234 >> 2] = $22; //@line 27666
      $235 = $ReallocAsyncCtx + 48 | 0; //@line 27667
      HEAP32[$235 >> 2] = $24; //@line 27668
      $236 = $ReallocAsyncCtx + 52 | 0; //@line 27669
      HEAP32[$236 >> 2] = $14; //@line 27670
      $237 = $ReallocAsyncCtx + 56 | 0; //@line 27671
      HEAP32[$237 >> 2] = $16; //@line 27672
      $238 = $ReallocAsyncCtx + 60 | 0; //@line 27673
      HEAP32[$238 >> 2] = $18; //@line 27674
      $239 = $ReallocAsyncCtx + 64 | 0; //@line 27675
      HEAP32[$239 >> 2] = $20; //@line 27676
      sp = STACKTOP; //@line 27677
      STACKTOP = sp; //@line 27678
      return;
     }
     ___async_unwind = 0; //@line 27680
     HEAP32[$ReallocAsyncCtx >> 2] = 452; //@line 27681
     $224 = $ReallocAsyncCtx + 4 | 0; //@line 27682
     HEAP32[$224 >> 2] = $4; //@line 27683
     $225 = $ReallocAsyncCtx + 8 | 0; //@line 27684
     HEAP32[$225 >> 2] = $6; //@line 27685
     $226 = $ReallocAsyncCtx + 12 | 0; //@line 27686
     HEAP32[$226 >> 2] = $8; //@line 27687
     $227 = $ReallocAsyncCtx + 16 | 0; //@line 27688
     HEAP32[$227 >> 2] = $10; //@line 27689
     $228 = $ReallocAsyncCtx + 20 | 0; //@line 27690
     HEAP32[$228 >> 2] = $12; //@line 27691
     $229 = $ReallocAsyncCtx + 24 | 0; //@line 27692
     HEAP32[$229 >> 2] = $29; //@line 27693
     $230 = $ReallocAsyncCtx + 28 | 0; //@line 27694
     HEAP32[$230 >> 2] = $2; //@line 27695
     $231 = $ReallocAsyncCtx + 32 | 0; //@line 27696
     HEAP32[$231 >> 2] = $$pre20; //@line 27697
     $232 = $ReallocAsyncCtx + 36 | 0; //@line 27698
     HEAP32[$232 >> 2] = $170; //@line 27699
     $233 = $ReallocAsyncCtx + 40 | 0; //@line 27700
     HEAP32[$233 >> 2] = $189; //@line 27701
     $234 = $ReallocAsyncCtx + 44 | 0; //@line 27702
     HEAP32[$234 >> 2] = $22; //@line 27703
     $235 = $ReallocAsyncCtx + 48 | 0; //@line 27704
     HEAP32[$235 >> 2] = $24; //@line 27705
     $236 = $ReallocAsyncCtx + 52 | 0; //@line 27706
     HEAP32[$236 >> 2] = $14; //@line 27707
     $237 = $ReallocAsyncCtx + 56 | 0; //@line 27708
     HEAP32[$237 >> 2] = $16; //@line 27709
     $238 = $ReallocAsyncCtx + 60 | 0; //@line 27710
     HEAP32[$238 >> 2] = $18; //@line 27711
     $239 = $ReallocAsyncCtx + 64 | 0; //@line 27712
     HEAP32[$239 >> 2] = $20; //@line 27713
     sp = STACKTOP; //@line 27714
     STACKTOP = sp; //@line 27715
     return;
    }
    $195 = $190 + 1 << 24 >> 24; //@line 27717
    HEAP8[$189 >> 0] = $195; //@line 27718
    if ($195 & 1) {
     $199 = $2 + 1097 | 0; //@line 27723
     HEAP8[$199 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$2 >> 2] | 0, HEAP8[$199 >> 0] | 0) | 0; //@line 27726
    }
    $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 27728
    $202 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 27729
    if (___async) {
     HEAP32[$ReallocAsyncCtx9 >> 2] = 451; //@line 27732
     $203 = $ReallocAsyncCtx9 + 4 | 0; //@line 27733
     HEAP32[$203 >> 2] = $29; //@line 27734
     $204 = $ReallocAsyncCtx9 + 8 | 0; //@line 27735
     HEAP32[$204 >> 2] = $2; //@line 27736
     $205 = $ReallocAsyncCtx9 + 12 | 0; //@line 27737
     HEAP32[$205 >> 2] = $4; //@line 27738
     $206 = $ReallocAsyncCtx9 + 16 | 0; //@line 27739
     HEAP32[$206 >> 2] = $6; //@line 27740
     $207 = $ReallocAsyncCtx9 + 20 | 0; //@line 27741
     HEAP32[$207 >> 2] = $8; //@line 27742
     $208 = $ReallocAsyncCtx9 + 24 | 0; //@line 27743
     HEAP32[$208 >> 2] = $10; //@line 27744
     $209 = $ReallocAsyncCtx9 + 28 | 0; //@line 27745
     HEAP32[$209 >> 2] = $12; //@line 27746
     $210 = $ReallocAsyncCtx9 + 32 | 0; //@line 27747
     HEAP32[$210 >> 2] = $14; //@line 27748
     $211 = $ReallocAsyncCtx9 + 36 | 0; //@line 27749
     HEAP32[$211 >> 2] = $16; //@line 27750
     $212 = $ReallocAsyncCtx9 + 40 | 0; //@line 27751
     HEAP32[$212 >> 2] = $18; //@line 27752
     $213 = $ReallocAsyncCtx9 + 44 | 0; //@line 27753
     HEAP32[$213 >> 2] = $20; //@line 27754
     $214 = $ReallocAsyncCtx9 + 48 | 0; //@line 27755
     HEAP32[$214 >> 2] = $$pre20; //@line 27756
     $215 = $ReallocAsyncCtx9 + 52 | 0; //@line 27757
     HEAP32[$215 >> 2] = $170; //@line 27758
     $216 = $ReallocAsyncCtx9 + 56 | 0; //@line 27759
     HEAP32[$216 >> 2] = $189; //@line 27760
     $217 = $ReallocAsyncCtx9 + 60 | 0; //@line 27761
     HEAP32[$217 >> 2] = $22; //@line 27762
     $218 = $ReallocAsyncCtx9 + 64 | 0; //@line 27763
     HEAP32[$218 >> 2] = $24; //@line 27764
     sp = STACKTOP; //@line 27765
     STACKTOP = sp; //@line 27766
     return;
    }
    HEAP32[___async_retval >> 2] = $202; //@line 27769
    ___async_unwind = 0; //@line 27770
    HEAP32[$ReallocAsyncCtx9 >> 2] = 451; //@line 27771
    $203 = $ReallocAsyncCtx9 + 4 | 0; //@line 27772
    HEAP32[$203 >> 2] = $29; //@line 27773
    $204 = $ReallocAsyncCtx9 + 8 | 0; //@line 27774
    HEAP32[$204 >> 2] = $2; //@line 27775
    $205 = $ReallocAsyncCtx9 + 12 | 0; //@line 27776
    HEAP32[$205 >> 2] = $4; //@line 27777
    $206 = $ReallocAsyncCtx9 + 16 | 0; //@line 27778
    HEAP32[$206 >> 2] = $6; //@line 27779
    $207 = $ReallocAsyncCtx9 + 20 | 0; //@line 27780
    HEAP32[$207 >> 2] = $8; //@line 27781
    $208 = $ReallocAsyncCtx9 + 24 | 0; //@line 27782
    HEAP32[$208 >> 2] = $10; //@line 27783
    $209 = $ReallocAsyncCtx9 + 28 | 0; //@line 27784
    HEAP32[$209 >> 2] = $12; //@line 27785
    $210 = $ReallocAsyncCtx9 + 32 | 0; //@line 27786
    HEAP32[$210 >> 2] = $14; //@line 27787
    $211 = $ReallocAsyncCtx9 + 36 | 0; //@line 27788
    HEAP32[$211 >> 2] = $16; //@line 27789
    $212 = $ReallocAsyncCtx9 + 40 | 0; //@line 27790
    HEAP32[$212 >> 2] = $18; //@line 27791
    $213 = $ReallocAsyncCtx9 + 44 | 0; //@line 27792
    HEAP32[$213 >> 2] = $20; //@line 27793
    $214 = $ReallocAsyncCtx9 + 48 | 0; //@line 27794
    HEAP32[$214 >> 2] = $$pre20; //@line 27795
    $215 = $ReallocAsyncCtx9 + 52 | 0; //@line 27796
    HEAP32[$215 >> 2] = $170; //@line 27797
    $216 = $ReallocAsyncCtx9 + 56 | 0; //@line 27798
    HEAP32[$216 >> 2] = $189; //@line 27799
    $217 = $ReallocAsyncCtx9 + 60 | 0; //@line 27800
    HEAP32[$217 >> 2] = $22; //@line 27801
    $218 = $ReallocAsyncCtx9 + 64 | 0; //@line 27802
    HEAP32[$218 >> 2] = $24; //@line 27803
    sp = STACKTOP; //@line 27804
    STACKTOP = sp; //@line 27805
    return;
   }
  }
 }
 $240 = HEAP32[$$pre20 >> 2] | 0; //@line 27809
 $243 = $240 & -3; //@line 27812
 if (!($240 & 2)) {
  $245 = $240; //@line 27814
 } else {
  HEAP32[$$pre20 >> 2] = $243; //@line 27816
  $245 = $243; //@line 27817
 }
 if ($245 | 0) {
  $330 = HEAP32[$22 >> 2] | 0; //@line 27821
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 27822
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($330, $24, 1e3); //@line 27823
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 458; //@line 27826
   $331 = $ReallocAsyncCtx8 + 4 | 0; //@line 27827
   HEAP32[$331 >> 2] = $29; //@line 27828
   $332 = $ReallocAsyncCtx8 + 8 | 0; //@line 27829
   HEAP32[$332 >> 2] = $2; //@line 27830
   $333 = $ReallocAsyncCtx8 + 12 | 0; //@line 27831
   HEAP32[$333 >> 2] = $4; //@line 27832
   $334 = $ReallocAsyncCtx8 + 16 | 0; //@line 27833
   HEAP32[$334 >> 2] = $6; //@line 27834
   $335 = $ReallocAsyncCtx8 + 20 | 0; //@line 27835
   HEAP32[$335 >> 2] = $8; //@line 27836
   $336 = $ReallocAsyncCtx8 + 24 | 0; //@line 27837
   HEAP32[$336 >> 2] = $10; //@line 27838
   $337 = $ReallocAsyncCtx8 + 28 | 0; //@line 27839
   HEAP32[$337 >> 2] = $12; //@line 27840
   sp = STACKTOP; //@line 27841
   STACKTOP = sp; //@line 27842
   return;
  }
  ___async_unwind = 0; //@line 27844
  HEAP32[$ReallocAsyncCtx8 >> 2] = 458; //@line 27845
  $331 = $ReallocAsyncCtx8 + 4 | 0; //@line 27846
  HEAP32[$331 >> 2] = $29; //@line 27847
  $332 = $ReallocAsyncCtx8 + 8 | 0; //@line 27848
  HEAP32[$332 >> 2] = $2; //@line 27849
  $333 = $ReallocAsyncCtx8 + 12 | 0; //@line 27850
  HEAP32[$333 >> 2] = $4; //@line 27851
  $334 = $ReallocAsyncCtx8 + 16 | 0; //@line 27852
  HEAP32[$334 >> 2] = $6; //@line 27853
  $335 = $ReallocAsyncCtx8 + 20 | 0; //@line 27854
  HEAP32[$335 >> 2] = $8; //@line 27855
  $336 = $ReallocAsyncCtx8 + 24 | 0; //@line 27856
  HEAP32[$336 >> 2] = $10; //@line 27857
  $337 = $ReallocAsyncCtx8 + 28 | 0; //@line 27858
  HEAP32[$337 >> 2] = $12; //@line 27859
  sp = STACKTOP; //@line 27860
  STACKTOP = sp; //@line 27861
  return;
 }
 $246 = HEAP8[$29 >> 0] | 0; //@line 27863
 if ($246 & 1) {
  HEAP8[$29 >> 0] = $246 & -2; //@line 27868
  $251 = HEAP32[$2 + 1324 >> 2] | 0; //@line 27870
  $253 = __ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0; //@line 27872
  $254 = $251 + 12 | 0; //@line 27873
  $255 = HEAP32[$254 >> 2] | 0; //@line 27874
  if (!$255) {
   $ReallocAsyncCtx18 = _emscripten_realloc_async_context(60) | 0; //@line 27877
   _mbed_assert_internal(14997, 15002, 1102); //@line 27878
   if (___async) {
    HEAP32[$ReallocAsyncCtx18 >> 2] = 453; //@line 27881
    $257 = $ReallocAsyncCtx18 + 4 | 0; //@line 27882
    HEAP32[$257 >> 2] = $254; //@line 27883
    $258 = $ReallocAsyncCtx18 + 8 | 0; //@line 27884
    HEAP32[$258 >> 2] = $29; //@line 27885
    $259 = $ReallocAsyncCtx18 + 12 | 0; //@line 27886
    HEAP32[$259 >> 2] = $2; //@line 27887
    $260 = $ReallocAsyncCtx18 + 16 | 0; //@line 27888
    HEAP32[$260 >> 2] = $4; //@line 27889
    $261 = $ReallocAsyncCtx18 + 20 | 0; //@line 27890
    HEAP32[$261 >> 2] = $6; //@line 27891
    $262 = $ReallocAsyncCtx18 + 24 | 0; //@line 27892
    HEAP32[$262 >> 2] = $8; //@line 27893
    $263 = $ReallocAsyncCtx18 + 28 | 0; //@line 27894
    HEAP32[$263 >> 2] = $10; //@line 27895
    $264 = $ReallocAsyncCtx18 + 32 | 0; //@line 27896
    HEAP32[$264 >> 2] = $12; //@line 27897
    $265 = $ReallocAsyncCtx18 + 36 | 0; //@line 27898
    HEAP32[$265 >> 2] = $14; //@line 27899
    $266 = $ReallocAsyncCtx18 + 40 | 0; //@line 27900
    HEAP32[$266 >> 2] = $16; //@line 27901
    $267 = $ReallocAsyncCtx18 + 44 | 0; //@line 27902
    HEAP32[$267 >> 2] = $18; //@line 27903
    $268 = $ReallocAsyncCtx18 + 48 | 0; //@line 27904
    HEAP32[$268 >> 2] = $20; //@line 27905
    $269 = $ReallocAsyncCtx18 + 52 | 0; //@line 27906
    HEAP32[$269 >> 2] = $251; //@line 27907
    $270 = $ReallocAsyncCtx18 + 56 | 0; //@line 27908
    HEAP32[$270 >> 2] = $253; //@line 27909
    sp = STACKTOP; //@line 27910
    STACKTOP = sp; //@line 27911
    return;
   }
   ___async_unwind = 0; //@line 27913
   HEAP32[$ReallocAsyncCtx18 >> 2] = 453; //@line 27914
   $257 = $ReallocAsyncCtx18 + 4 | 0; //@line 27915
   HEAP32[$257 >> 2] = $254; //@line 27916
   $258 = $ReallocAsyncCtx18 + 8 | 0; //@line 27917
   HEAP32[$258 >> 2] = $29; //@line 27918
   $259 = $ReallocAsyncCtx18 + 12 | 0; //@line 27919
   HEAP32[$259 >> 2] = $2; //@line 27920
   $260 = $ReallocAsyncCtx18 + 16 | 0; //@line 27921
   HEAP32[$260 >> 2] = $4; //@line 27922
   $261 = $ReallocAsyncCtx18 + 20 | 0; //@line 27923
   HEAP32[$261 >> 2] = $6; //@line 27924
   $262 = $ReallocAsyncCtx18 + 24 | 0; //@line 27925
   HEAP32[$262 >> 2] = $8; //@line 27926
   $263 = $ReallocAsyncCtx18 + 28 | 0; //@line 27927
   HEAP32[$263 >> 2] = $10; //@line 27928
   $264 = $ReallocAsyncCtx18 + 32 | 0; //@line 27929
   HEAP32[$264 >> 2] = $12; //@line 27930
   $265 = $ReallocAsyncCtx18 + 36 | 0; //@line 27931
   HEAP32[$265 >> 2] = $14; //@line 27932
   $266 = $ReallocAsyncCtx18 + 40 | 0; //@line 27933
   HEAP32[$266 >> 2] = $16; //@line 27934
   $267 = $ReallocAsyncCtx18 + 44 | 0; //@line 27935
   HEAP32[$267 >> 2] = $18; //@line 27936
   $268 = $ReallocAsyncCtx18 + 48 | 0; //@line 27937
   HEAP32[$268 >> 2] = $20; //@line 27938
   $269 = $ReallocAsyncCtx18 + 52 | 0; //@line 27939
   HEAP32[$269 >> 2] = $251; //@line 27940
   $270 = $ReallocAsyncCtx18 + 56 | 0; //@line 27941
   HEAP32[$270 >> 2] = $253; //@line 27942
   sp = STACKTOP; //@line 27943
   STACKTOP = sp; //@line 27944
   return;
  } else {
   $271 = HEAP32[$255 >> 2] | 0; //@line 27946
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(48) | 0; //@line 27947
   FUNCTION_TABLE_vii[$271 & 31]($251, $253); //@line 27948
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 454; //@line 27951
    $272 = $ReallocAsyncCtx2 + 4 | 0; //@line 27952
    HEAP32[$272 >> 2] = $4; //@line 27953
    $273 = $ReallocAsyncCtx2 + 8 | 0; //@line 27954
    HEAP32[$273 >> 2] = $6; //@line 27955
    $274 = $ReallocAsyncCtx2 + 12 | 0; //@line 27956
    HEAP32[$274 >> 2] = $8; //@line 27957
    $275 = $ReallocAsyncCtx2 + 16 | 0; //@line 27958
    HEAP32[$275 >> 2] = $10; //@line 27959
    $276 = $ReallocAsyncCtx2 + 20 | 0; //@line 27960
    HEAP32[$276 >> 2] = $12; //@line 27961
    $277 = $ReallocAsyncCtx2 + 24 | 0; //@line 27962
    HEAP32[$277 >> 2] = $29; //@line 27963
    $278 = $ReallocAsyncCtx2 + 28 | 0; //@line 27964
    HEAP32[$278 >> 2] = $2; //@line 27965
    $279 = $ReallocAsyncCtx2 + 32 | 0; //@line 27966
    HEAP32[$279 >> 2] = $14; //@line 27967
    $280 = $ReallocAsyncCtx2 + 36 | 0; //@line 27968
    HEAP32[$280 >> 2] = $16; //@line 27969
    $281 = $ReallocAsyncCtx2 + 40 | 0; //@line 27970
    HEAP32[$281 >> 2] = $18; //@line 27971
    $282 = $ReallocAsyncCtx2 + 44 | 0; //@line 27972
    HEAP32[$282 >> 2] = $20; //@line 27973
    sp = STACKTOP; //@line 27974
    STACKTOP = sp; //@line 27975
    return;
   }
   ___async_unwind = 0; //@line 27977
   HEAP32[$ReallocAsyncCtx2 >> 2] = 454; //@line 27978
   $272 = $ReallocAsyncCtx2 + 4 | 0; //@line 27979
   HEAP32[$272 >> 2] = $4; //@line 27980
   $273 = $ReallocAsyncCtx2 + 8 | 0; //@line 27981
   HEAP32[$273 >> 2] = $6; //@line 27982
   $274 = $ReallocAsyncCtx2 + 12 | 0; //@line 27983
   HEAP32[$274 >> 2] = $8; //@line 27984
   $275 = $ReallocAsyncCtx2 + 16 | 0; //@line 27985
   HEAP32[$275 >> 2] = $10; //@line 27986
   $276 = $ReallocAsyncCtx2 + 20 | 0; //@line 27987
   HEAP32[$276 >> 2] = $12; //@line 27988
   $277 = $ReallocAsyncCtx2 + 24 | 0; //@line 27989
   HEAP32[$277 >> 2] = $29; //@line 27990
   $278 = $ReallocAsyncCtx2 + 28 | 0; //@line 27991
   HEAP32[$278 >> 2] = $2; //@line 27992
   $279 = $ReallocAsyncCtx2 + 32 | 0; //@line 27993
   HEAP32[$279 >> 2] = $14; //@line 27994
   $280 = $ReallocAsyncCtx2 + 36 | 0; //@line 27995
   HEAP32[$280 >> 2] = $16; //@line 27996
   $281 = $ReallocAsyncCtx2 + 40 | 0; //@line 27997
   HEAP32[$281 >> 2] = $18; //@line 27998
   $282 = $ReallocAsyncCtx2 + 44 | 0; //@line 27999
   HEAP32[$282 >> 2] = $20; //@line 28000
   sp = STACKTOP; //@line 28001
   STACKTOP = sp; //@line 28002
   return;
  }
 }
 if ($246 & 8) {
  HEAP8[$29 >> 0] = $246 & -9; //@line 28009
  $287 = HEAP32[$2 + 1324 >> 2] | 0; //@line 28011
  $288 = $287 + 32 | 0; //@line 28012
  $290 = __ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0; //@line 28014
  $291 = $287 + 44 | 0; //@line 28015
  $292 = HEAP32[$291 >> 2] | 0; //@line 28016
  if (!$292) {
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(60) | 0; //@line 28019
   _mbed_assert_internal(14997, 15002, 1102); //@line 28020
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 455; //@line 28023
    $294 = $ReallocAsyncCtx17 + 4 | 0; //@line 28024
    HEAP32[$294 >> 2] = $29; //@line 28025
    $295 = $ReallocAsyncCtx17 + 8 | 0; //@line 28026
    HEAP32[$295 >> 2] = $2; //@line 28027
    $296 = $ReallocAsyncCtx17 + 12 | 0; //@line 28028
    HEAP32[$296 >> 2] = $4; //@line 28029
    $297 = $ReallocAsyncCtx17 + 16 | 0; //@line 28030
    HEAP32[$297 >> 2] = $6; //@line 28031
    $298 = $ReallocAsyncCtx17 + 20 | 0; //@line 28032
    HEAP32[$298 >> 2] = $8; //@line 28033
    $299 = $ReallocAsyncCtx17 + 24 | 0; //@line 28034
    HEAP32[$299 >> 2] = $10; //@line 28035
    $300 = $ReallocAsyncCtx17 + 28 | 0; //@line 28036
    HEAP32[$300 >> 2] = $12; //@line 28037
    $301 = $ReallocAsyncCtx17 + 32 | 0; //@line 28038
    HEAP32[$301 >> 2] = $14; //@line 28039
    $302 = $ReallocAsyncCtx17 + 36 | 0; //@line 28040
    HEAP32[$302 >> 2] = $16; //@line 28041
    $303 = $ReallocAsyncCtx17 + 40 | 0; //@line 28042
    HEAP32[$303 >> 2] = $18; //@line 28043
    $304 = $ReallocAsyncCtx17 + 44 | 0; //@line 28044
    HEAP32[$304 >> 2] = $20; //@line 28045
    $305 = $ReallocAsyncCtx17 + 48 | 0; //@line 28046
    HEAP32[$305 >> 2] = $291; //@line 28047
    $306 = $ReallocAsyncCtx17 + 52 | 0; //@line 28048
    HEAP32[$306 >> 2] = $288; //@line 28049
    $307 = $ReallocAsyncCtx17 + 56 | 0; //@line 28050
    HEAP32[$307 >> 2] = $290; //@line 28051
    sp = STACKTOP; //@line 28052
    STACKTOP = sp; //@line 28053
    return;
   }
   ___async_unwind = 0; //@line 28055
   HEAP32[$ReallocAsyncCtx17 >> 2] = 455; //@line 28056
   $294 = $ReallocAsyncCtx17 + 4 | 0; //@line 28057
   HEAP32[$294 >> 2] = $29; //@line 28058
   $295 = $ReallocAsyncCtx17 + 8 | 0; //@line 28059
   HEAP32[$295 >> 2] = $2; //@line 28060
   $296 = $ReallocAsyncCtx17 + 12 | 0; //@line 28061
   HEAP32[$296 >> 2] = $4; //@line 28062
   $297 = $ReallocAsyncCtx17 + 16 | 0; //@line 28063
   HEAP32[$297 >> 2] = $6; //@line 28064
   $298 = $ReallocAsyncCtx17 + 20 | 0; //@line 28065
   HEAP32[$298 >> 2] = $8; //@line 28066
   $299 = $ReallocAsyncCtx17 + 24 | 0; //@line 28067
   HEAP32[$299 >> 2] = $10; //@line 28068
   $300 = $ReallocAsyncCtx17 + 28 | 0; //@line 28069
   HEAP32[$300 >> 2] = $12; //@line 28070
   $301 = $ReallocAsyncCtx17 + 32 | 0; //@line 28071
   HEAP32[$301 >> 2] = $14; //@line 28072
   $302 = $ReallocAsyncCtx17 + 36 | 0; //@line 28073
   HEAP32[$302 >> 2] = $16; //@line 28074
   $303 = $ReallocAsyncCtx17 + 40 | 0; //@line 28075
   HEAP32[$303 >> 2] = $18; //@line 28076
   $304 = $ReallocAsyncCtx17 + 44 | 0; //@line 28077
   HEAP32[$304 >> 2] = $20; //@line 28078
   $305 = $ReallocAsyncCtx17 + 48 | 0; //@line 28079
   HEAP32[$305 >> 2] = $291; //@line 28080
   $306 = $ReallocAsyncCtx17 + 52 | 0; //@line 28081
   HEAP32[$306 >> 2] = $288; //@line 28082
   $307 = $ReallocAsyncCtx17 + 56 | 0; //@line 28083
   HEAP32[$307 >> 2] = $290; //@line 28084
   sp = STACKTOP; //@line 28085
   STACKTOP = sp; //@line 28086
   return;
  } else {
   $308 = HEAP32[$292 >> 2] | 0; //@line 28088
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 28089
   FUNCTION_TABLE_vii[$308 & 31]($288, $290); //@line 28090
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 456; //@line 28093
    $309 = $ReallocAsyncCtx3 + 4 | 0; //@line 28094
    HEAP32[$309 >> 2] = $4; //@line 28095
    $310 = $ReallocAsyncCtx3 + 8 | 0; //@line 28096
    HEAP32[$310 >> 2] = $6; //@line 28097
    $311 = $ReallocAsyncCtx3 + 12 | 0; //@line 28098
    HEAP32[$311 >> 2] = $8; //@line 28099
    $312 = $ReallocAsyncCtx3 + 16 | 0; //@line 28100
    HEAP32[$312 >> 2] = $10; //@line 28101
    $313 = $ReallocAsyncCtx3 + 20 | 0; //@line 28102
    HEAP32[$313 >> 2] = $12; //@line 28103
    $314 = $ReallocAsyncCtx3 + 24 | 0; //@line 28104
    HEAP32[$314 >> 2] = $29; //@line 28105
    $315 = $ReallocAsyncCtx3 + 28 | 0; //@line 28106
    HEAP32[$315 >> 2] = $2; //@line 28107
    $316 = $ReallocAsyncCtx3 + 32 | 0; //@line 28108
    HEAP32[$316 >> 2] = $14; //@line 28109
    $317 = $ReallocAsyncCtx3 + 36 | 0; //@line 28110
    HEAP32[$317 >> 2] = $16; //@line 28111
    $318 = $ReallocAsyncCtx3 + 40 | 0; //@line 28112
    HEAP32[$318 >> 2] = $18; //@line 28113
    $319 = $ReallocAsyncCtx3 + 44 | 0; //@line 28114
    HEAP32[$319 >> 2] = $20; //@line 28115
    sp = STACKTOP; //@line 28116
    STACKTOP = sp; //@line 28117
    return;
   }
   ___async_unwind = 0; //@line 28119
   HEAP32[$ReallocAsyncCtx3 >> 2] = 456; //@line 28120
   $309 = $ReallocAsyncCtx3 + 4 | 0; //@line 28121
   HEAP32[$309 >> 2] = $4; //@line 28122
   $310 = $ReallocAsyncCtx3 + 8 | 0; //@line 28123
   HEAP32[$310 >> 2] = $6; //@line 28124
   $311 = $ReallocAsyncCtx3 + 12 | 0; //@line 28125
   HEAP32[$311 >> 2] = $8; //@line 28126
   $312 = $ReallocAsyncCtx3 + 16 | 0; //@line 28127
   HEAP32[$312 >> 2] = $10; //@line 28128
   $313 = $ReallocAsyncCtx3 + 20 | 0; //@line 28129
   HEAP32[$313 >> 2] = $12; //@line 28130
   $314 = $ReallocAsyncCtx3 + 24 | 0; //@line 28131
   HEAP32[$314 >> 2] = $29; //@line 28132
   $315 = $ReallocAsyncCtx3 + 28 | 0; //@line 28133
   HEAP32[$315 >> 2] = $2; //@line 28134
   $316 = $ReallocAsyncCtx3 + 32 | 0; //@line 28135
   HEAP32[$316 >> 2] = $14; //@line 28136
   $317 = $ReallocAsyncCtx3 + 36 | 0; //@line 28137
   HEAP32[$317 >> 2] = $16; //@line 28138
   $318 = $ReallocAsyncCtx3 + 40 | 0; //@line 28139
   HEAP32[$318 >> 2] = $18; //@line 28140
   $319 = $ReallocAsyncCtx3 + 44 | 0; //@line 28141
   HEAP32[$319 >> 2] = $20; //@line 28142
   sp = STACKTOP; //@line 28143
   STACKTOP = sp; //@line 28144
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($2 + 4 | 0) | 0) {
  _printf(12943, $14) | 0; //@line 28150
  _printf(13090, $18) | 0; //@line 28151
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 28152
  _putchar(10) | 0; //@line 28153
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 457; //@line 28156
   $322 = $ReallocAsyncCtx7 + 4 | 0; //@line 28157
   HEAP32[$322 >> 2] = $29; //@line 28158
   $323 = $ReallocAsyncCtx7 + 8 | 0; //@line 28159
   HEAP32[$323 >> 2] = $2; //@line 28160
   $324 = $ReallocAsyncCtx7 + 12 | 0; //@line 28161
   HEAP32[$324 >> 2] = $4; //@line 28162
   $325 = $ReallocAsyncCtx7 + 16 | 0; //@line 28163
   HEAP32[$325 >> 2] = $6; //@line 28164
   $326 = $ReallocAsyncCtx7 + 20 | 0; //@line 28165
   HEAP32[$326 >> 2] = $8; //@line 28166
   $327 = $ReallocAsyncCtx7 + 24 | 0; //@line 28167
   HEAP32[$327 >> 2] = $10; //@line 28168
   $328 = $ReallocAsyncCtx7 + 28 | 0; //@line 28169
   HEAP32[$328 >> 2] = $12; //@line 28170
   sp = STACKTOP; //@line 28171
   STACKTOP = sp; //@line 28172
   return;
  }
  ___async_unwind = 0; //@line 28174
  HEAP32[$ReallocAsyncCtx7 >> 2] = 457; //@line 28175
  $322 = $ReallocAsyncCtx7 + 4 | 0; //@line 28176
  HEAP32[$322 >> 2] = $29; //@line 28177
  $323 = $ReallocAsyncCtx7 + 8 | 0; //@line 28178
  HEAP32[$323 >> 2] = $2; //@line 28179
  $324 = $ReallocAsyncCtx7 + 12 | 0; //@line 28180
  HEAP32[$324 >> 2] = $4; //@line 28181
  $325 = $ReallocAsyncCtx7 + 16 | 0; //@line 28182
  HEAP32[$325 >> 2] = $6; //@line 28183
  $326 = $ReallocAsyncCtx7 + 20 | 0; //@line 28184
  HEAP32[$326 >> 2] = $8; //@line 28185
  $327 = $ReallocAsyncCtx7 + 24 | 0; //@line 28186
  HEAP32[$327 >> 2] = $10; //@line 28187
  $328 = $ReallocAsyncCtx7 + 28 | 0; //@line 28188
  HEAP32[$328 >> 2] = $12; //@line 28189
  sp = STACKTOP; //@line 28190
  STACKTOP = sp; //@line 28191
  return;
 }
 $329 = HEAP8[$29 >> 0] & -33; //@line 28194
 HEAP8[$29 >> 0] = $329; //@line 28195
 do {
  if (!($329 & 2)) {
   $368 = $329; //@line 28200
  } else {
   $340 = $329 & -3; //@line 28202
   HEAP8[$29 >> 0] = $340; //@line 28203
   if ((HEAP32[$2 + 360 >> 2] | 0) == 2) {
    _printf(12943, $6) | 0; //@line 28208
    _printf(12970, $10) | 0; //@line 28209
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 28210
    _putchar(10) | 0; //@line 28211
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 459; //@line 28214
     $344 = $ReallocAsyncCtx6 + 4 | 0; //@line 28215
     HEAP32[$344 >> 2] = $29; //@line 28216
     $345 = $ReallocAsyncCtx6 + 8 | 0; //@line 28217
     HEAP32[$345 >> 2] = $2; //@line 28218
     $346 = $ReallocAsyncCtx6 + 12 | 0; //@line 28219
     HEAP32[$346 >> 2] = $4; //@line 28220
     $347 = $ReallocAsyncCtx6 + 16 | 0; //@line 28221
     HEAP32[$347 >> 2] = $4; //@line 28222
     sp = STACKTOP; //@line 28223
     STACKTOP = sp; //@line 28224
     return;
    }
    ___async_unwind = 0; //@line 28226
    HEAP32[$ReallocAsyncCtx6 >> 2] = 459; //@line 28227
    $344 = $ReallocAsyncCtx6 + 4 | 0; //@line 28228
    HEAP32[$344 >> 2] = $29; //@line 28229
    $345 = $ReallocAsyncCtx6 + 8 | 0; //@line 28230
    HEAP32[$345 >> 2] = $2; //@line 28231
    $346 = $ReallocAsyncCtx6 + 12 | 0; //@line 28232
    HEAP32[$346 >> 2] = $4; //@line 28233
    $347 = $ReallocAsyncCtx6 + 16 | 0; //@line 28234
    HEAP32[$347 >> 2] = $4; //@line 28235
    sp = STACKTOP; //@line 28236
    STACKTOP = sp; //@line 28237
    return;
   }
   if ($340 & 4) {
    $366 = $340 & -5; //@line 28242
    HEAP8[$29 >> 0] = $366; //@line 28243
    $368 = $366; //@line 28244
    break;
   }
   $351 = HEAP32[$2 + 1324 >> 2] | 0; //@line 28248
   $352 = $351 + 16 | 0; //@line 28249
   $354 = __ZN11LoRaMacMcps14get_indicationEv($2 + 288 | 0) | 0; //@line 28251
   $355 = $351 + 28 | 0; //@line 28252
   $356 = HEAP32[$355 >> 2] | 0; //@line 28253
   if (!$356) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 28256
    _mbed_assert_internal(14997, 15002, 1102); //@line 28257
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 462; //@line 28260
     $358 = $ReallocAsyncCtx15 + 4 | 0; //@line 28261
     HEAP32[$358 >> 2] = $355; //@line 28262
     $359 = $ReallocAsyncCtx15 + 8 | 0; //@line 28263
     HEAP32[$359 >> 2] = $352; //@line 28264
     $360 = $ReallocAsyncCtx15 + 12 | 0; //@line 28265
     HEAP32[$360 >> 2] = $354; //@line 28266
     $361 = $ReallocAsyncCtx15 + 16 | 0; //@line 28267
     HEAP32[$361 >> 2] = $29; //@line 28268
     $362 = $ReallocAsyncCtx15 + 20 | 0; //@line 28269
     HEAP32[$362 >> 2] = $2; //@line 28270
     sp = STACKTOP; //@line 28271
     STACKTOP = sp; //@line 28272
     return;
    }
    ___async_unwind = 0; //@line 28274
    HEAP32[$ReallocAsyncCtx15 >> 2] = 462; //@line 28275
    $358 = $ReallocAsyncCtx15 + 4 | 0; //@line 28276
    HEAP32[$358 >> 2] = $355; //@line 28277
    $359 = $ReallocAsyncCtx15 + 8 | 0; //@line 28278
    HEAP32[$359 >> 2] = $352; //@line 28279
    $360 = $ReallocAsyncCtx15 + 12 | 0; //@line 28280
    HEAP32[$360 >> 2] = $354; //@line 28281
    $361 = $ReallocAsyncCtx15 + 16 | 0; //@line 28282
    HEAP32[$361 >> 2] = $29; //@line 28283
    $362 = $ReallocAsyncCtx15 + 20 | 0; //@line 28284
    HEAP32[$362 >> 2] = $2; //@line 28285
    sp = STACKTOP; //@line 28286
    STACKTOP = sp; //@line 28287
    return;
   } else {
    $363 = HEAP32[$356 >> 2] | 0; //@line 28289
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 28290
    FUNCTION_TABLE_vii[$363 & 31]($352, $354); //@line 28291
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 463; //@line 28294
     $364 = $ReallocAsyncCtx4 + 4 | 0; //@line 28295
     HEAP32[$364 >> 2] = $29; //@line 28296
     $365 = $ReallocAsyncCtx4 + 8 | 0; //@line 28297
     HEAP32[$365 >> 2] = $2; //@line 28298
     sp = STACKTOP; //@line 28299
     STACKTOP = sp; //@line 28300
     return;
    }
    ___async_unwind = 0; //@line 28302
    HEAP32[$ReallocAsyncCtx4 >> 2] = 463; //@line 28303
    $364 = $ReallocAsyncCtx4 + 4 | 0; //@line 28304
    HEAP32[$364 >> 2] = $29; //@line 28305
    $365 = $ReallocAsyncCtx4 + 8 | 0; //@line 28306
    HEAP32[$365 >> 2] = $2; //@line 28307
    sp = STACKTOP; //@line 28308
    STACKTOP = sp; //@line 28309
    return;
   }
  }
 } while (0);
 if (!($368 & 16)) {
  STACKTOP = sp; //@line 28316
  return;
 }
 HEAP8[$29 >> 0] = $368 & -17; //@line 28319
 $372 = HEAP32[$2 + 1324 >> 2] | 0; //@line 28321
 $373 = $372 + 48 | 0; //@line 28322
 $375 = __ZN11LoRaMacMlme14get_indicationEv($2 + 264 | 0) | 0; //@line 28324
 $376 = $372 + 60 | 0; //@line 28325
 $377 = HEAP32[$376 >> 2] | 0; //@line 28326
 if (!$377) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 28329
  _mbed_assert_internal(14997, 15002, 1102); //@line 28330
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 464; //@line 28333
   $379 = $ReallocAsyncCtx14 + 4 | 0; //@line 28334
   HEAP32[$379 >> 2] = $376; //@line 28335
   $380 = $ReallocAsyncCtx14 + 8 | 0; //@line 28336
   HEAP32[$380 >> 2] = $373; //@line 28337
   $381 = $ReallocAsyncCtx14 + 12 | 0; //@line 28338
   HEAP32[$381 >> 2] = $375; //@line 28339
   sp = STACKTOP; //@line 28340
   STACKTOP = sp; //@line 28341
   return;
  }
  ___async_unwind = 0; //@line 28343
  HEAP32[$ReallocAsyncCtx14 >> 2] = 464; //@line 28344
  $379 = $ReallocAsyncCtx14 + 4 | 0; //@line 28345
  HEAP32[$379 >> 2] = $376; //@line 28346
  $380 = $ReallocAsyncCtx14 + 8 | 0; //@line 28347
  HEAP32[$380 >> 2] = $373; //@line 28348
  $381 = $ReallocAsyncCtx14 + 12 | 0; //@line 28349
  HEAP32[$381 >> 2] = $375; //@line 28350
  sp = STACKTOP; //@line 28351
  STACKTOP = sp; //@line 28352
  return;
 } else {
  $382 = HEAP32[$377 >> 2] | 0; //@line 28354
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 28355
  FUNCTION_TABLE_vii[$382 & 31]($373, $375); //@line 28356
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 465; //@line 28359
   sp = STACKTOP; //@line 28360
   STACKTOP = sp; //@line 28361
   return;
  }
  ___async_unwind = 0; //@line 28363
  HEAP32[$ReallocAsyncCtx5 >> 2] = 465; //@line 28364
  sp = STACKTOP; //@line 28365
  STACKTOP = sp; //@line 28366
  return;
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0174 = 0, $$0174209 = 0, $$0174210 = 0, $$1$off0 = 0, $$1169 = 0, $$1171 = 0, $$1173 = 0, $$1175 = 0, $$3$off0204 = 0, $$3179 = 0, $$sink = 0, $$sink200 = 0, $$sink207 = 0, $110 = 0, $111 = 0, $121 = 0, $123 = 0, $124 = 0, $129 = 0, $131 = 0, $132 = 0, $215 = 0, $225 = 0, $229 = 0, $236 = 0, $239 = 0, $258 = 0, $27 = 0, $28 = 0, $285 = 0, $29 = 0, $303 = 0, $305 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $339 = 0, $340 = 0, $341 = 0, $343 = 0, $37 = 0, $385 = 0, $425 = 0, $429 = 0, $431 = 0, $451 = 0, $454 = 0, $455 = 0, $465 = 0, $467 = 0, $468 = 0, $472 = 0, $473 = 0, $488 = 0, $490 = 0, $491 = 0, $492 = 0, $496 = 0, $5 = 0, $500 = 0, $505 = 0, $506 = 0, $508 = 0, $509 = 0, $537 = 0, $540 = 0, $541 = 0, $543 = 0, $544 = 0, $57 = 0, $584 = 0, $589 = 0, $590 = 0, $602 = 0, $603 = 0, $605 = 0, $606 = 0, $634 = 0, $640 = 0, $643 = 0, $654 = 0, $660 = 0, $666 = 0, $677 = 0, $686 = 0, $689 = 0, $82 = 0, $83 = 0, $AsyncCtx = 0, $AsyncCtx102 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx28 = 0, $AsyncCtx32 = 0, $AsyncCtx36 = 0, $AsyncCtx40 = 0, $AsyncCtx44 = 0, $AsyncCtx47 = 0, $AsyncCtx50 = 0, $AsyncCtx53 = 0, $AsyncCtx56 = 0, $AsyncCtx60 = 0, $AsyncCtx64 = 0, $AsyncCtx68 = 0, $AsyncCtx72 = 0, $AsyncCtx76 = 0, $AsyncCtx79 = 0, $AsyncCtx83 = 0, $AsyncCtx87 = 0, $AsyncCtx91 = 0, $AsyncCtx95 = 0, $AsyncCtx99 = 0, $sext = 0, $trunc = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11232
 STACKTOP = STACKTOP + 80 | 0; //@line 11233
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 11233
 $vararg_buffer16 = sp + 64 | 0; //@line 11234
 $vararg_buffer14 = sp + 56 | 0; //@line 11235
 $vararg_buffer12 = sp + 48 | 0; //@line 11236
 $vararg_buffer10 = sp + 40 | 0; //@line 11237
 $vararg_buffer8 = sp + 32 | 0; //@line 11238
 $vararg_buffer6 = sp + 24 | 0; //@line 11239
 $vararg_buffer1 = sp + 8 | 0; //@line 11240
 $vararg_buffer = sp; //@line 11241
 _printf(12943, $vararg_buffer) | 0; //@line 11242
 $5 = $2 & 65535; //@line 11243
 HEAP32[$vararg_buffer1 >> 2] = $1; //@line 11246
 HEAP32[$vararg_buffer1 + 4 >> 2] = $5; //@line 11248
 HEAP32[$vararg_buffer1 + 8 >> 2] = $3 << 16 >> 16; //@line 11250
 HEAP32[$vararg_buffer1 + 12 >> 2] = $4 << 24 >> 24; //@line 11252
 _printf(13035, $vararg_buffer1) | 0; //@line 11253
 $AsyncCtx32 = _emscripten_alloc_async_context(80, sp) | 0; //@line 11254
 _putchar(10) | 0; //@line 11255
 if (___async) {
  HEAP32[$AsyncCtx32 >> 2] = 372; //@line 11258
  HEAP32[$AsyncCtx32 + 4 >> 2] = $1; //@line 11260
  HEAP32[$AsyncCtx32 + 8 >> 2] = $vararg_buffer; //@line 11262
  HEAP32[$AsyncCtx32 + 12 >> 2] = $0; //@line 11264
  HEAP32[$AsyncCtx32 + 16 >> 2] = $5; //@line 11266
  HEAP32[$AsyncCtx32 + 20 >> 2] = $vararg_buffer1; //@line 11268
  HEAP32[$AsyncCtx32 + 24 >> 2] = $vararg_buffer14; //@line 11270
  HEAP32[$AsyncCtx32 + 28 >> 2] = $vararg_buffer14; //@line 11272
  HEAP32[$AsyncCtx32 + 32 >> 2] = $vararg_buffer16; //@line 11274
  HEAP32[$AsyncCtx32 + 36 >> 2] = $vararg_buffer16; //@line 11276
  HEAP8[$AsyncCtx32 + 40 >> 0] = $4; //@line 11278
  HEAP32[$AsyncCtx32 + 44 >> 2] = $vararg_buffer10; //@line 11280
  HEAP32[$AsyncCtx32 + 48 >> 2] = $vararg_buffer10; //@line 11282
  HEAP32[$AsyncCtx32 + 52 >> 2] = $vararg_buffer12; //@line 11284
  HEAP32[$AsyncCtx32 + 56 >> 2] = $vararg_buffer12; //@line 11286
  HEAP16[$AsyncCtx32 + 60 >> 1] = $3; //@line 11288
  HEAP32[$AsyncCtx32 + 64 >> 2] = $vararg_buffer6; //@line 11290
  HEAP32[$AsyncCtx32 + 68 >> 2] = $vararg_buffer6; //@line 11292
  HEAP32[$AsyncCtx32 + 72 >> 2] = $vararg_buffer8; //@line 11294
  HEAP32[$AsyncCtx32 + 76 >> 2] = $vararg_buffer8; //@line 11296
  sp = STACKTOP; //@line 11297
  STACKTOP = sp; //@line 11298
  return;
 }
 _emscripten_free_async_context($AsyncCtx32 | 0); //@line 11300
 HEAP32[$vararg_buffer >> 2] = 0; //@line 11301
 $27 = $0 + 912 | 0; //@line 11302
 $28 = $0 + 928 | 0; //@line 11303
 $29 = $0 + 288 | 0; //@line 11304
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 10 >> 0] = 0; //@line 11307
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 20 >> 1] = $3; //@line 11310
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 22 >> 0] = $4; //@line 11313
 $37 = HEAP32[$0 + 364 >> 2] | 0; //@line 11315
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 24 >> 2] = $37; //@line 11318
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 9 >> 0] = 0; //@line 11321
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 8 >> 0] = 0; //@line 11324
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 11 >> 0] = 0; //@line 11327
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 12 >> 2] = 0; //@line 11330
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 16 >> 1] = 0; //@line 11333
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 18 >> 0] = 0; //@line 11336
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 28 >> 0] = 0; //@line 11339
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 32 >> 2] = 0; //@line 11342
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) >> 2] = 0; //@line 11344
 $57 = HEAP32[$0 >> 2] | 0; //@line 11345
 $AsyncCtx79 = _emscripten_alloc_async_context(100, sp) | 0; //@line 11346
 __ZN7LoRaPHY18put_radio_to_sleepEv($57); //@line 11347
 if (___async) {
  HEAP32[$AsyncCtx79 >> 2] = 373; //@line 11350
  HEAP32[$AsyncCtx79 + 4 >> 2] = $1; //@line 11352
  HEAP32[$AsyncCtx79 + 8 >> 2] = $vararg_buffer; //@line 11354
  HEAP32[$AsyncCtx79 + 12 >> 2] = $vararg_buffer; //@line 11356
  HEAP32[$AsyncCtx79 + 16 >> 2] = $vararg_buffer1; //@line 11358
  HEAP32[$AsyncCtx79 + 20 >> 2] = $29; //@line 11360
  HEAP32[$AsyncCtx79 + 24 >> 2] = $0; //@line 11362
  HEAP32[$AsyncCtx79 + 28 >> 2] = $0; //@line 11364
  HEAP32[$AsyncCtx79 + 32 >> 2] = $27; //@line 11366
  HEAP32[$AsyncCtx79 + 36 >> 2] = $28; //@line 11368
  HEAP32[$AsyncCtx79 + 40 >> 2] = $5; //@line 11370
  HEAP32[$AsyncCtx79 + 44 >> 2] = $vararg_buffer1; //@line 11372
  HEAP8[$AsyncCtx79 + 48 >> 0] = $4; //@line 11374
  HEAP32[$AsyncCtx79 + 52 >> 2] = $vararg_buffer10; //@line 11376
  HEAP32[$AsyncCtx79 + 56 >> 2] = $vararg_buffer6; //@line 11378
  HEAP32[$AsyncCtx79 + 60 >> 2] = $vararg_buffer10; //@line 11380
  HEAP32[$AsyncCtx79 + 64 >> 2] = $vararg_buffer12; //@line 11382
  HEAP32[$AsyncCtx79 + 68 >> 2] = $vararg_buffer16; //@line 11384
  HEAP32[$AsyncCtx79 + 72 >> 2] = $vararg_buffer6; //@line 11386
  HEAP32[$AsyncCtx79 + 76 >> 2] = $vararg_buffer16; //@line 11388
  HEAP32[$AsyncCtx79 + 80 >> 2] = $vararg_buffer14; //@line 11390
  HEAP32[$AsyncCtx79 + 84 >> 2] = $vararg_buffer14; //@line 11392
  HEAP32[$AsyncCtx79 + 88 >> 2] = $vararg_buffer12; //@line 11394
  HEAP32[$AsyncCtx79 + 92 >> 2] = $vararg_buffer8; //@line 11396
  HEAP32[$AsyncCtx79 + 96 >> 2] = $vararg_buffer8; //@line 11398
  sp = STACKTOP; //@line 11399
  STACKTOP = sp; //@line 11400
  return;
 }
 _emscripten_free_async_context($AsyncCtx79 | 0); //@line 11402
 $82 = $0 + 356 | 0; //@line 11403
 $83 = HEAP32[$82 >> 2] | 0; //@line 11404
 $AsyncCtx102 = _emscripten_alloc_async_context(104, sp) | 0; //@line 11406
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($83, $0 + 1056 | 0); //@line 11407
 if (___async) {
  HEAP32[$AsyncCtx102 >> 2] = 374; //@line 11410
  HEAP32[$AsyncCtx102 + 4 >> 2] = $1; //@line 11412
  HEAP32[$AsyncCtx102 + 8 >> 2] = $vararg_buffer; //@line 11414
  HEAP32[$AsyncCtx102 + 12 >> 2] = $vararg_buffer; //@line 11416
  HEAP32[$AsyncCtx102 + 16 >> 2] = $vararg_buffer1; //@line 11418
  HEAP32[$AsyncCtx102 + 20 >> 2] = $29; //@line 11420
  HEAP32[$AsyncCtx102 + 24 >> 2] = $0; //@line 11422
  HEAP32[$AsyncCtx102 + 28 >> 2] = $vararg_buffer6; //@line 11424
  HEAP32[$AsyncCtx102 + 32 >> 2] = $vararg_buffer6; //@line 11426
  HEAP32[$AsyncCtx102 + 36 >> 2] = $vararg_buffer8; //@line 11428
  HEAP32[$AsyncCtx102 + 40 >> 2] = $vararg_buffer8; //@line 11430
  HEAP32[$AsyncCtx102 + 44 >> 2] = $82; //@line 11432
  HEAP32[$AsyncCtx102 + 48 >> 2] = $0; //@line 11434
  HEAP32[$AsyncCtx102 + 52 >> 2] = $27; //@line 11436
  HEAP32[$AsyncCtx102 + 56 >> 2] = $28; //@line 11438
  HEAP32[$AsyncCtx102 + 60 >> 2] = $5; //@line 11440
  HEAP32[$AsyncCtx102 + 64 >> 2] = $vararg_buffer1; //@line 11442
  HEAP32[$AsyncCtx102 + 68 >> 2] = $vararg_buffer10; //@line 11444
  HEAP32[$AsyncCtx102 + 72 >> 2] = $vararg_buffer10; //@line 11446
  HEAP32[$AsyncCtx102 + 76 >> 2] = $vararg_buffer12; //@line 11448
  HEAP32[$AsyncCtx102 + 80 >> 2] = $vararg_buffer12; //@line 11450
  HEAP8[$AsyncCtx102 + 84 >> 0] = $4; //@line 11452
  HEAP32[$AsyncCtx102 + 88 >> 2] = $vararg_buffer16; //@line 11454
  HEAP32[$AsyncCtx102 + 92 >> 2] = $vararg_buffer16; //@line 11456
  HEAP32[$AsyncCtx102 + 96 >> 2] = $vararg_buffer14; //@line 11458
  HEAP32[$AsyncCtx102 + 100 >> 2] = $vararg_buffer14; //@line 11460
  sp = STACKTOP; //@line 11461
  STACKTOP = sp; //@line 11462
  return;
 }
 _emscripten_free_async_context($AsyncCtx102 | 0); //@line 11464
 $110 = HEAP8[$1 >> 0] | 0; //@line 11465
 $trunc = ($110 & 255) >>> 5; //@line 11466
 L10 : do {
  switch ($trunc & 7) {
  case 1:
   {
    $111 = $0 + 372 | 0; //@line 11471
    if (HEAP8[$111 >> 0] | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 1; //@line 11477
     $AsyncCtx60 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11478
     __ZN7LoRaMac21prepare_rx_done_abortEv($0); //@line 11479
     if (___async) {
      HEAP32[$AsyncCtx60 >> 2] = 375; //@line 11482
      HEAP32[$AsyncCtx60 + 4 >> 2] = $vararg_buffer; //@line 11484
      HEAP32[$AsyncCtx60 + 8 >> 2] = $vararg_buffer1; //@line 11486
      sp = STACKTOP; //@line 11487
      STACKTOP = sp; //@line 11488
      return;
     }
     _emscripten_free_async_context($AsyncCtx60 | 0); //@line 11490
     STACKTOP = sp; //@line 11491
     return;
    }
    $121 = $0 + 908 | 0; //@line 11496
    $123 = $0 + 638 | 0; //@line 11498
    $124 = $0 + 639 | 0; //@line 11499
    if (__Z18decrypt_join_framePKhtS0_Ph($1 + 1 | 0, $5 + 65535 & 65535, HEAP32[$121 >> 2] | 0, $124) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 13; //@line 11505
     STACKTOP = sp; //@line 11506
     return;
    }
    HEAP8[$123 >> 0] = $110; //@line 11508
    $129 = $5 + -4 | 0; //@line 11509
    $131 = HEAP32[$121 >> 2] | 0; //@line 11511
    $AsyncCtx72 = _emscripten_alloc_async_context(64, sp) | 0; //@line 11512
    $132 = __Z22compute_join_frame_micPKhtS0_Pj($123, $129 & 65535, $131, $vararg_buffer) | 0; //@line 11513
    if (___async) {
     HEAP32[$AsyncCtx72 >> 2] = 376; //@line 11516
     HEAP32[$AsyncCtx72 + 4 >> 2] = $0; //@line 11518
     HEAP32[$AsyncCtx72 + 8 >> 2] = $129; //@line 11520
     HEAP32[$AsyncCtx72 + 12 >> 2] = $5; //@line 11522
     HEAP32[$AsyncCtx72 + 16 >> 2] = $vararg_buffer; //@line 11524
     HEAP32[$AsyncCtx72 + 20 >> 2] = $29; //@line 11526
     HEAP32[$AsyncCtx72 + 24 >> 2] = $vararg_buffer; //@line 11528
     HEAP32[$AsyncCtx72 + 28 >> 2] = $vararg_buffer1; //@line 11530
     HEAP32[$AsyncCtx72 + 32 >> 2] = $121; //@line 11532
     HEAP32[$AsyncCtx72 + 36 >> 2] = $124; //@line 11534
     HEAP32[$AsyncCtx72 + 40 >> 2] = $27; //@line 11536
     HEAP32[$AsyncCtx72 + 44 >> 2] = $28; //@line 11538
     HEAP32[$AsyncCtx72 + 48 >> 2] = $82; //@line 11540
     HEAP32[$AsyncCtx72 + 52 >> 2] = $vararg_buffer1; //@line 11542
     HEAP32[$AsyncCtx72 + 56 >> 2] = $0; //@line 11544
     HEAP32[$AsyncCtx72 + 60 >> 2] = $111; //@line 11546
     sp = STACKTOP; //@line 11547
     STACKTOP = sp; //@line 11548
     return;
    }
    _emscripten_free_async_context($AsyncCtx72 | 0); //@line 11550
    if ($132 | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 13; //@line 11555
     STACKTOP = sp; //@line 11556
     return;
    }
    if ((HEAPU8[$5 + -3 + ($0 + 638) >> 0] << 8 | HEAPU8[$0 + 638 + $129 >> 0] | HEAPU8[$5 + -2 + ($0 + 638) >> 0] << 16 | HEAPU8[$5 + -1 + ($0 + 638) >> 0] << 24 | 0) != (HEAP32[$vararg_buffer >> 2] | 0)) {
     HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 7; //@line 11585
     break L10;
    }
    if (__Z28compute_skeys_for_join_framePKhS0_tPhS1_(HEAP32[$121 >> 2] | 0, $124, HEAP16[$0 + 946 >> 1] | 0, $27, $28) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 13; //@line 11596
     STACKTOP = sp; //@line 11597
     return;
    }
    HEAP32[$0 + 948 >> 2] = HEAPU8[$0 + 644 >> 0] << 16 | (HEAPU8[$0 + 643 >> 0] << 8 | HEAPU8[$0 + 642 >> 0]); //@line 11613
    HEAP32[$0 + 952 >> 2] = HEAPU8[$0 + 648 >> 0] << 24 | (HEAPU8[$0 + 647 >> 0] << 16 | (HEAPU8[$0 + 646 >> 0] << 8 | HEAPU8[$0 + 645 >> 0])); //@line 11633
    $215 = HEAP8[$0 + 649 >> 0] | 0; //@line 11635
    HEAP8[$0 + 1129 >> 0] = ($215 & 255) >>> 4 & 7; //@line 11641
    HEAP8[$0 + 1136 >> 0] = $215 & 15; //@line 11644
    $225 = HEAP8[$0 + 650 >> 0] & 15; //@line 11647
    $229 = $225 << 24 >> 24 == 0 ? 1e3 : ($225 & 255) * 1e3 | 0; //@line 11652
    HEAP32[$0 + 1112 >> 2] = $229; //@line 11653
    HEAP32[$0 + 1116 >> 2] = $229 + 1e3; //@line 11656
    HEAP32[$vararg_buffer1 >> 2] = $0 + 651; //@line 11658
    HEAP8[$vararg_buffer1 + 4 >> 0] = $5 + 239; //@line 11662
    $236 = HEAP32[$0 >> 2] | 0; //@line 11663
    $239 = HEAP32[(HEAP32[$236 >> 2] | 0) + 20 >> 2] | 0; //@line 11666
    $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 11667
    FUNCTION_TABLE_vii[$239 & 31]($236, $vararg_buffer1); //@line 11668
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 377; //@line 11671
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 11673
     HEAP32[$AsyncCtx + 8 >> 2] = $111; //@line 11675
     HEAP32[$AsyncCtx + 12 >> 2] = $82; //@line 11677
     HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer; //@line 11679
     HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer1; //@line 11681
     sp = STACKTOP; //@line 11682
     STACKTOP = sp; //@line 11683
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 11685
     HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 0; //@line 11689
     HEAP8[$111 >> 0] = 1; //@line 11690
     break L10;
    }
    break;
   }
  case 3:
  case 5:
   {
    $258 = __ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$0 >> 2] | 0, HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 10 >> 0] | 0, (HEAP8[$0 + 369 >> 0] | 0) != 0) | 0; //@line 11703
    $sext = ($5 << 16) + -851968 | 0; //@line 11705
    if (((($sext | 0) < 0 ? 0 : $sext >> 16) | 0) > ($258 & 255 | 0)) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 1; //@line 11714
     $AsyncCtx56 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11715
     __ZN7LoRaMac21prepare_rx_done_abortEv($0); //@line 11716
     if (___async) {
      HEAP32[$AsyncCtx56 >> 2] = 378; //@line 11719
      HEAP32[$AsyncCtx56 + 4 >> 2] = $vararg_buffer; //@line 11721
      HEAP32[$AsyncCtx56 + 8 >> 2] = $vararg_buffer1; //@line 11723
      sp = STACKTOP; //@line 11724
      STACKTOP = sp; //@line 11725
      return;
     }
     _emscripten_free_async_context($AsyncCtx56 | 0); //@line 11727
     STACKTOP = sp; //@line 11728
     return;
    }
    $285 = HEAPU8[$1 + 2 >> 0] << 8 | HEAPU8[$1 + 1 >> 0] | HEAPU8[$1 + 3 >> 0] << 16 | HEAPU8[$1 + 4 >> 0] << 24; //@line 11747
    L52 : do {
     if (($285 | 0) == (HEAP32[$0 + 952 >> 2] | 0)) {
      $$1169 = 0; //@line 11754
      $$1171 = $28; //@line 11754
      $$1173 = $27; //@line 11754
      $$1175 = 0; //@line 11754
      $$sink207 = $0 + 960 | 0; //@line 11754
     } else {
      $$0174209 = HEAP32[$0 + 1208 >> 2] | 0; //@line 11757
      L55 : do {
       if ($$0174209 | 0) {
        $$0174210 = $$0174209; //@line 11761
        while (1) {
         if (($285 | 0) == (HEAP32[$$0174210 >> 2] | 0)) {
          break;
         }
         $$0174 = HEAP32[$$0174210 + 40 >> 2] | 0; //@line 11769
         if (!$$0174) {
          break L55;
         } else {
          $$0174210 = $$0174; //@line 11774
         }
        }
        $$1169 = 1; //@line 11780
        $$1171 = $$0174210 + 20 | 0; //@line 11780
        $$1173 = $$0174210 + 4 | 0; //@line 11780
        $$1175 = $$0174210; //@line 11780
        $$sink207 = $$0174210 + 36 | 0; //@line 11780
        break L52;
       }
      } while (0);
      HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 11; //@line 11786
      $AsyncCtx53 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11787
      __ZN7LoRaMac21prepare_rx_done_abortEv($0); //@line 11788
      if (___async) {
       HEAP32[$AsyncCtx53 >> 2] = 379; //@line 11791
       HEAP32[$AsyncCtx53 + 4 >> 2] = $vararg_buffer; //@line 11793
       HEAP32[$AsyncCtx53 + 8 >> 2] = $vararg_buffer1; //@line 11795
       sp = STACKTOP; //@line 11796
       STACKTOP = sp; //@line 11797
       return;
      }
      _emscripten_free_async_context($AsyncCtx53 | 0); //@line 11799
      STACKTOP = sp; //@line 11800
      return;
     }
    } while (0);
    $303 = HEAP32[$$sink207 >> 2] | 0; //@line 11803
    $305 = HEAP8[$1 + 5 >> 0] | 0; //@line 11805
    $314 = $305 & 15; //@line 11814
    $315 = $314 & 255; //@line 11815
    $316 = $315 + 8 | 0; //@line 11816
    $317 = $316 & 255; //@line 11817
    $318 = $5 + -4 | 0; //@line 11818
    $339 = HEAPU8[$1 + ($5 + -3) >> 0] << 8 | HEAPU8[$1 + $318 >> 0] | HEAPU8[$1 + ($5 + -2) >> 0] << 16 | HEAPU8[$1 + ($5 + -1) >> 0] << 24; //@line 11839
    $340 = (HEAPU8[$1 + 7 >> 0] << 8 | HEAPU8[$1 + 6 >> 0]) - $303 | 0; //@line 11840
    $341 = $340 & 65535; //@line 11841
    do {
     if ($341 >>> 0 < 32768) {
      $343 = $341 + $303 | 0; //@line 11845
      $AsyncCtx68 = _emscripten_alloc_async_context(144, sp) | 0; //@line 11847
      __Z11compute_micPKhtS0_jhjPj($1, $318 & 65535, $$1173, $285, 1, $343, $vararg_buffer) | 0; //@line 11848
      if (___async) {
       HEAP32[$AsyncCtx68 >> 2] = 380; //@line 11851
       HEAP8[$AsyncCtx68 + 4 >> 0] = $4; //@line 11853
       HEAP32[$AsyncCtx68 + 8 >> 2] = $vararg_buffer10; //@line 11855
       HEAP32[$AsyncCtx68 + 12 >> 2] = $vararg_buffer6; //@line 11857
       HEAP32[$AsyncCtx68 + 16 >> 2] = $vararg_buffer10; //@line 11859
       HEAP32[$AsyncCtx68 + 20 >> 2] = $0; //@line 11861
       HEAP32[$AsyncCtx68 + 24 >> 2] = $82; //@line 11863
       HEAP32[$AsyncCtx68 + 28 >> 2] = $1; //@line 11865
       HEAP32[$AsyncCtx68 + 32 >> 2] = $vararg_buffer12; //@line 11867
       HEAP32[$AsyncCtx68 + 36 >> 2] = $341; //@line 11869
       HEAP32[$AsyncCtx68 + 40 >> 2] = $315; //@line 11871
       HEAP32[$AsyncCtx68 + 44 >> 2] = $285; //@line 11873
       HEAP32[$AsyncCtx68 + 48 >> 2] = $316; //@line 11875
       HEAP32[$AsyncCtx68 + 52 >> 2] = $vararg_buffer16; //@line 11877
       HEAP32[$AsyncCtx68 + 56 >> 2] = $vararg_buffer6; //@line 11879
       HEAP32[$AsyncCtx68 + 60 >> 2] = $0; //@line 11881
       HEAP32[$AsyncCtx68 + 64 >> 2] = $vararg_buffer1; //@line 11883
       HEAP32[$AsyncCtx68 + 68 >> 2] = $vararg_buffer16; //@line 11885
       HEAP32[$AsyncCtx68 + 72 >> 2] = $339; //@line 11887
       HEAP8[$AsyncCtx68 + 76 >> 0] = $314; //@line 11889
       HEAP32[$AsyncCtx68 + 80 >> 2] = $343; //@line 11891
       HEAP32[$AsyncCtx68 + 84 >> 2] = $vararg_buffer14; //@line 11893
       HEAP32[$AsyncCtx68 + 88 >> 2] = $29; //@line 11895
       HEAP32[$AsyncCtx68 + 92 >> 2] = $318; //@line 11897
       HEAP32[$AsyncCtx68 + 96 >> 2] = $vararg_buffer14; //@line 11899
       HEAP8[$AsyncCtx68 + 100 >> 0] = $trunc; //@line 11901
       HEAP8[$AsyncCtx68 + 101 >> 0] = $317; //@line 11903
       HEAP32[$AsyncCtx68 + 104 >> 2] = $$1173; //@line 11905
       HEAP32[$AsyncCtx68 + 108 >> 2] = $vararg_buffer; //@line 11907
       HEAP8[$AsyncCtx68 + 112 >> 0] = $305; //@line 11909
       HEAP32[$AsyncCtx68 + 116 >> 2] = $$1175; //@line 11911
       HEAP32[$AsyncCtx68 + 120 >> 2] = $$1171; //@line 11913
       HEAP32[$AsyncCtx68 + 124 >> 2] = $vararg_buffer12; //@line 11915
       HEAP32[$AsyncCtx68 + 128 >> 2] = $vararg_buffer8; //@line 11917
       HEAP32[$AsyncCtx68 + 132 >> 2] = $vararg_buffer; //@line 11919
       HEAP8[$AsyncCtx68 + 136 >> 0] = $$1169; //@line 11921
       HEAP32[$AsyncCtx68 + 140 >> 2] = $vararg_buffer8; //@line 11923
       sp = STACKTOP; //@line 11924
       STACKTOP = sp; //@line 11925
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx68 | 0); //@line 11927
       $$3179 = $343; //@line 11930
       $$sink200 = ($339 | 0) == (HEAP32[$vararg_buffer >> 2] | 0); //@line 11930
       break;
      }
     } else {
      $385 = $303 + 65536 + ($340 << 16 >> 16) | 0; //@line 11937
      $AsyncCtx64 = _emscripten_alloc_async_context(148, sp) | 0; //@line 11939
      __Z11compute_micPKhtS0_jhjPj($1, $318 & 65535, $$1173, $285, 1, $385, $vararg_buffer) | 0; //@line 11940
      if (___async) {
       HEAP32[$AsyncCtx64 >> 2] = 381; //@line 11943
       HEAP8[$AsyncCtx64 + 4 >> 0] = $4; //@line 11945
       HEAP32[$AsyncCtx64 + 8 >> 2] = $vararg_buffer10; //@line 11947
       HEAP32[$AsyncCtx64 + 12 >> 2] = $vararg_buffer6; //@line 11949
       HEAP32[$AsyncCtx64 + 16 >> 2] = $vararg_buffer10; //@line 11951
       HEAP32[$AsyncCtx64 + 20 >> 2] = $0; //@line 11953
       HEAP32[$AsyncCtx64 + 24 >> 2] = $82; //@line 11955
       HEAP32[$AsyncCtx64 + 28 >> 2] = $1; //@line 11957
       HEAP32[$AsyncCtx64 + 32 >> 2] = $vararg_buffer12; //@line 11959
       HEAP32[$AsyncCtx64 + 36 >> 2] = $341; //@line 11961
       HEAP32[$AsyncCtx64 + 40 >> 2] = $315; //@line 11963
       HEAP32[$AsyncCtx64 + 44 >> 2] = $285; //@line 11965
       HEAP32[$AsyncCtx64 + 48 >> 2] = $316; //@line 11967
       HEAP32[$AsyncCtx64 + 52 >> 2] = $vararg_buffer16; //@line 11969
       HEAP32[$AsyncCtx64 + 56 >> 2] = $vararg_buffer6; //@line 11971
       HEAP32[$AsyncCtx64 + 60 >> 2] = $0; //@line 11973
       HEAP32[$AsyncCtx64 + 64 >> 2] = $vararg_buffer1; //@line 11975
       HEAP32[$AsyncCtx64 + 68 >> 2] = $339; //@line 11977
       HEAP32[$AsyncCtx64 + 72 >> 2] = $vararg_buffer16; //@line 11979
       HEAP8[$AsyncCtx64 + 76 >> 0] = $314; //@line 11981
       HEAP32[$AsyncCtx64 + 80 >> 2] = $385; //@line 11983
       HEAP32[$AsyncCtx64 + 84 >> 2] = $vararg_buffer14; //@line 11985
       HEAP32[$AsyncCtx64 + 88 >> 2] = $29; //@line 11987
       HEAP32[$AsyncCtx64 + 92 >> 2] = $318; //@line 11989
       HEAP32[$AsyncCtx64 + 96 >> 2] = $vararg_buffer14; //@line 11991
       HEAP8[$AsyncCtx64 + 100 >> 0] = $trunc; //@line 11993
       HEAP8[$AsyncCtx64 + 101 >> 0] = $317; //@line 11995
       HEAP32[$AsyncCtx64 + 104 >> 2] = $$1173; //@line 11997
       HEAP32[$AsyncCtx64 + 108 >> 2] = $vararg_buffer; //@line 11999
       HEAP8[$AsyncCtx64 + 112 >> 0] = $305; //@line 12001
       HEAP32[$AsyncCtx64 + 116 >> 2] = $$1175; //@line 12003
       HEAP32[$AsyncCtx64 + 120 >> 2] = $$1171; //@line 12005
       HEAP32[$AsyncCtx64 + 124 >> 2] = $vararg_buffer12; //@line 12007
       HEAP32[$AsyncCtx64 + 128 >> 2] = $vararg_buffer8; //@line 12009
       HEAP32[$AsyncCtx64 + 132 >> 2] = $303; //@line 12011
       HEAP32[$AsyncCtx64 + 136 >> 2] = $vararg_buffer; //@line 12013
       HEAP8[$AsyncCtx64 + 140 >> 0] = $$1169; //@line 12015
       HEAP32[$AsyncCtx64 + 144 >> 2] = $vararg_buffer8; //@line 12017
       sp = STACKTOP; //@line 12018
       STACKTOP = sp; //@line 12019
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx64 | 0); //@line 12021
       $425 = ($339 | 0) == (HEAP32[$vararg_buffer >> 2] | 0); //@line 12023
       $$3179 = $425 ? $385 : $303; //@line 12025
       $$sink200 = $425; //@line 12025
       break;
      }
     }
    } while (0);
    $429 = $341 >>> 0 < ((__ZN7LoRaPHY29get_maximum_frame_counter_gapEv(HEAP32[$0 >> 2] | 0) | 0) & 65535) >>> 0; //@line 12033
    $431 = (__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 | 0; //@line 12035
    if (!$429) {
     HEAP32[$431 >> 2] = 10; //@line 12037
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 32 >> 2] = $$3179; //@line 12040
     $AsyncCtx50 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12041
     __ZN7LoRaMac21prepare_rx_done_abortEv($0); //@line 12042
     if (___async) {
      HEAP32[$AsyncCtx50 >> 2] = 382; //@line 12045
      HEAP32[$AsyncCtx50 + 4 >> 2] = $vararg_buffer; //@line 12047
      HEAP32[$AsyncCtx50 + 8 >> 2] = $vararg_buffer1; //@line 12049
      sp = STACKTOP; //@line 12050
      STACKTOP = sp; //@line 12051
      return;
     }
     _emscripten_free_async_context($AsyncCtx50 | 0); //@line 12053
     STACKTOP = sp; //@line 12054
     return;
    }
    if (!$$sink200) {
     HEAP32[$431 >> 2] = 12; //@line 12057
     $AsyncCtx40 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12058
     __ZN7LoRaMac21prepare_rx_done_abortEv($0); //@line 12059
     if (___async) {
      HEAP32[$AsyncCtx40 >> 2] = 393; //@line 12062
      HEAP32[$AsyncCtx40 + 4 >> 2] = $vararg_buffer; //@line 12064
      HEAP32[$AsyncCtx40 + 8 >> 2] = $vararg_buffer1; //@line 12066
      sp = STACKTOP; //@line 12067
      STACKTOP = sp; //@line 12068
      return;
     }
     _emscripten_free_async_context($AsyncCtx40 | 0); //@line 12070
     STACKTOP = sp; //@line 12071
     return;
    }
    HEAP32[$431 >> 2] = 0; //@line 12073
    HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 8 >> 0] = $$1169; //@line 12076
    HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 11 >> 0] = ($305 & 255) >>> 4 & 1; //@line 12081
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 12 >> 2] = 0; //@line 12084
    HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 16 >> 1] = 0; //@line 12087
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 32 >> 2] = $$3179; //@line 12090
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 4 >> 2] = 0; //@line 12093
    HEAP32[$0 + 964 >> 2] = 0; //@line 12095
    $451 = $0 + 4 | 0; //@line 12096
    __ZN14LoRaMacCommand19clear_repeat_bufferEv($451); //@line 12097
    do {
     if ($$1169 << 24 >> 24 == 1) {
      HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) >> 2] = 2; //@line 12102
      $454 = $$1175 + 36 | 0; //@line 12103
      $455 = HEAP32[$454 >> 2] | 0; //@line 12104
      if (($455 | 0) != ($$3179 | 0) | ($455 | 0) == 0) {
       $$1$off0 = 0; //@line 12109
       $$sink = $454; //@line 12109
      } else {
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 8; //@line 12113
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 32 >> 2] = $$3179; //@line 12116
       $AsyncCtx47 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12117
       __ZN7LoRaMac21prepare_rx_done_abortEv($0); //@line 12118
       if (___async) {
        HEAP32[$AsyncCtx47 >> 2] = 383; //@line 12121
        HEAP32[$AsyncCtx47 + 4 >> 2] = $vararg_buffer; //@line 12123
        HEAP32[$AsyncCtx47 + 8 >> 2] = $vararg_buffer1; //@line 12125
        sp = STACKTOP; //@line 12126
        STACKTOP = sp; //@line 12127
        return;
       }
       _emscripten_free_async_context($AsyncCtx47 | 0); //@line 12129
       STACKTOP = sp; //@line 12130
       return;
      }
     } else {
      $465 = $0 + 374 | 0; //@line 12134
      if ($trunc << 24 >> 24 == 5) {
       HEAP8[$465 >> 0] = 1; //@line 12136
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) >> 2] = 1; //@line 12138
       $467 = $0 + 960 | 0; //@line 12139
       $468 = HEAP32[$467 >> 2] | 0; //@line 12140
       $$1$off0 = ($468 | 0) != 0 & ($468 | 0) == ($$3179 | 0); //@line 12144
       $$sink = $467; //@line 12144
       break;
      }
      HEAP8[$465 >> 0] = 0; //@line 12147
      HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) >> 2] = 0; //@line 12149
      $472 = $0 + 960 | 0; //@line 12150
      $473 = HEAP32[$472 >> 2] | 0; //@line 12151
      if (($473 | 0) != ($$3179 | 0) | ($473 | 0) == 0) {
       $$1$off0 = 0; //@line 12156
       $$sink = $472; //@line 12156
      } else {
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 8; //@line 12160
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 32 >> 2] = $$3179; //@line 12163
       $AsyncCtx44 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12164
       __ZN7LoRaMac21prepare_rx_done_abortEv($0); //@line 12165
       if (___async) {
        HEAP32[$AsyncCtx44 >> 2] = 384; //@line 12168
        HEAP32[$AsyncCtx44 + 4 >> 2] = $vararg_buffer; //@line 12170
        HEAP32[$AsyncCtx44 + 8 >> 2] = $vararg_buffer1; //@line 12172
        sp = STACKTOP; //@line 12173
        STACKTOP = sp; //@line 12174
        return;
       }
       _emscripten_free_async_context($AsyncCtx44 | 0); //@line 12176
       STACKTOP = sp; //@line 12177
       return;
      }
     }
    } while (0);
    HEAP32[$$sink >> 2] = $$3179; //@line 12181
    if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) >> 2] | 0) == 1) {
     if ($305 & 32) {
      __ZN14LoRaMacCommand20clear_command_bufferEv($451); //@line 12189
     }
    } else {
     __ZN14LoRaMacCommand20clear_command_bufferEv($451); //@line 12192
    }
    do {
     if (($318 | 0) > ($316 | 0)) {
      $488 = $315 + 9 | 0; //@line 12197
      $490 = HEAP8[$1 + $316 >> 0] | 0; //@line 12199
      $491 = $318 - $488 | 0; //@line 12200
      $492 = $491 & 255; //@line 12201
      HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 9 >> 0] = $490; //@line 12204
      $496 = $314 << 24 >> 24 == 0; //@line 12206
      if (!($490 << 24 >> 24)) {
       if (!$496) {
        $$3$off0204 = 6; //@line 12209
        break;
       }
       $500 = $0 + 638 | 0; //@line 12215
       if (__Z15decrypt_payloadPKhtS0_jhjPh($1 + $488 | 0, $491 & 255, $$1173, $285, 1, $$3179, $500) | 0) {
        HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 13; //@line 12221
       }
       $505 = $0 + 264 | 0; //@line 12223
       $506 = __ZN11LoRaMacMlme16get_confirmationEv($505) | 0; //@line 12224
       $508 = HEAP32[$0 >> 2] | 0; //@line 12226
       $AsyncCtx91 = _emscripten_alloc_async_context(56, sp) | 0; //@line 12227
       $509 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($451, $500, 0, $492, $4, $506, $0 + 1096 | 0, $508) | 0; //@line 12228
       if (___async) {
        HEAP32[$AsyncCtx91 >> 2] = 385; //@line 12231
        HEAP32[$AsyncCtx91 + 4 >> 2] = $vararg_buffer6; //@line 12233
        HEAP32[$AsyncCtx91 + 8 >> 2] = $vararg_buffer6; //@line 12235
        HEAP32[$AsyncCtx91 + 12 >> 2] = $vararg_buffer8; //@line 12237
        HEAP32[$AsyncCtx91 + 16 >> 2] = $vararg_buffer8; //@line 12239
        HEAP32[$AsyncCtx91 + 20 >> 2] = $29; //@line 12241
        HEAP8[$AsyncCtx91 + 24 >> 0] = $$1$off0 & 1; //@line 12244
        HEAP32[$AsyncCtx91 + 28 >> 2] = $451; //@line 12246
        HEAP32[$AsyncCtx91 + 32 >> 2] = $vararg_buffer; //@line 12248
        HEAP32[$AsyncCtx91 + 36 >> 2] = $vararg_buffer1; //@line 12250
        HEAP32[$AsyncCtx91 + 40 >> 2] = $0; //@line 12252
        HEAP32[$AsyncCtx91 + 44 >> 2] = $82; //@line 12254
        HEAP32[$AsyncCtx91 + 48 >> 2] = $505; //@line 12256
        HEAP8[$AsyncCtx91 + 52 >> 0] = $305; //@line 12258
        sp = STACKTOP; //@line 12259
        STACKTOP = sp; //@line 12260
        return;
       }
       _emscripten_free_async_context($AsyncCtx91 | 0); //@line 12262
       if ($509 | 0) {
        HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 1; //@line 12267
        if ($$1$off0) {
         $$3$off0204 = 6; //@line 12269
         break;
        } else {
         label = 101; //@line 12272
         break;
        }
       }
       if (!(__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($451) | 0)) {
        label = 100; //@line 12278
        break;
       }
       _printf(12943, $vararg_buffer6) | 0; //@line 12281
       _printf(13090, $vararg_buffer8) | 0; //@line 12282
       $AsyncCtx28 = _emscripten_alloc_async_context(36, sp) | 0; //@line 12283
       _putchar(10) | 0; //@line 12284
       if (___async) {
        HEAP32[$AsyncCtx28 >> 2] = 386; //@line 12287
        HEAP32[$AsyncCtx28 + 4 >> 2] = $505; //@line 12289
        HEAP32[$AsyncCtx28 + 8 >> 2] = $0; //@line 12291
        HEAP32[$AsyncCtx28 + 12 >> 2] = $451; //@line 12293
        HEAP8[$AsyncCtx28 + 16 >> 0] = $$1$off0 & 1; //@line 12296
        HEAP8[$AsyncCtx28 + 17 >> 0] = $305; //@line 12298
        HEAP32[$AsyncCtx28 + 20 >> 2] = $29; //@line 12300
        HEAP32[$AsyncCtx28 + 24 >> 2] = $82; //@line 12302
        HEAP32[$AsyncCtx28 + 28 >> 2] = $vararg_buffer; //@line 12304
        HEAP32[$AsyncCtx28 + 32 >> 2] = $vararg_buffer1; //@line 12306
        sp = STACKTOP; //@line 12307
        STACKTOP = sp; //@line 12308
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx28 | 0); //@line 12310
        HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($505) | 0) >> 2] = 4; //@line 12312
        $537 = $0 + 944 | 0; //@line 12313
        HEAP8[$537 >> 0] = HEAP8[$537 >> 0] | 16; //@line 12316
        __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($451); //@line 12317
        if ($$1$off0) {
         $$3$off0204 = 6; //@line 12319
         break;
        } else {
         label = 101; //@line 12322
         break;
        }
       }
      }
      do {
       if (!$496) {
        $540 = $0 + 264 | 0; //@line 12329
        $541 = __ZN11LoRaMacMlme16get_confirmationEv($540) | 0; //@line 12330
        $543 = HEAP32[$0 >> 2] | 0; //@line 12332
        $AsyncCtx87 = _emscripten_alloc_async_context(80, sp) | 0; //@line 12333
        $544 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($451, $1, 8, $317, $4, $541, $0 + 1096 | 0, $543) | 0; //@line 12334
        if (___async) {
         HEAP32[$AsyncCtx87 >> 2] = 387; //@line 12337
         HEAP8[$AsyncCtx87 + 4 >> 0] = $$1$off0 & 1; //@line 12340
         HEAP32[$AsyncCtx87 + 8 >> 2] = $29; //@line 12342
         HEAP32[$AsyncCtx87 + 12 >> 2] = $1; //@line 12344
         HEAP32[$AsyncCtx87 + 16 >> 2] = $488; //@line 12346
         HEAP32[$AsyncCtx87 + 20 >> 2] = $491; //@line 12348
         HEAP32[$AsyncCtx87 + 24 >> 2] = $0; //@line 12350
         HEAP32[$AsyncCtx87 + 28 >> 2] = $$1171; //@line 12352
         HEAP32[$AsyncCtx87 + 32 >> 2] = $285; //@line 12354
         HEAP32[$AsyncCtx87 + 36 >> 2] = $$3179; //@line 12356
         HEAP32[$AsyncCtx87 + 40 >> 2] = $451; //@line 12358
         HEAP32[$AsyncCtx87 + 44 >> 2] = $vararg_buffer10; //@line 12360
         HEAP32[$AsyncCtx87 + 48 >> 2] = $vararg_buffer10; //@line 12362
         HEAP32[$AsyncCtx87 + 52 >> 2] = $vararg_buffer12; //@line 12364
         HEAP32[$AsyncCtx87 + 56 >> 2] = $vararg_buffer12; //@line 12366
         HEAP32[$AsyncCtx87 + 60 >> 2] = $vararg_buffer; //@line 12368
         HEAP32[$AsyncCtx87 + 64 >> 2] = $vararg_buffer1; //@line 12370
         HEAP32[$AsyncCtx87 + 68 >> 2] = $82; //@line 12372
         HEAP32[$AsyncCtx87 + 72 >> 2] = $540; //@line 12374
         HEAP8[$AsyncCtx87 + 76 >> 0] = $305; //@line 12376
         sp = STACKTOP; //@line 12377
         STACKTOP = sp; //@line 12378
         return;
        }
        _emscripten_free_async_context($AsyncCtx87 | 0); //@line 12380
        if ($544 | 0) {
         HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 1; //@line 12385
         break;
        }
        if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($451) | 0) {
         _printf(12943, $vararg_buffer10) | 0; //@line 12390
         _printf(13090, $vararg_buffer12) | 0; //@line 12391
         $AsyncCtx24 = _emscripten_alloc_async_context(64, sp) | 0; //@line 12392
         _putchar(10) | 0; //@line 12393
         if (___async) {
          HEAP32[$AsyncCtx24 >> 2] = 388; //@line 12396
          HEAP8[$AsyncCtx24 + 4 >> 0] = $$1$off0 & 1; //@line 12399
          HEAP32[$AsyncCtx24 + 8 >> 2] = $29; //@line 12401
          HEAP32[$AsyncCtx24 + 12 >> 2] = $1; //@line 12403
          HEAP32[$AsyncCtx24 + 16 >> 2] = $488; //@line 12405
          HEAP32[$AsyncCtx24 + 20 >> 2] = $491; //@line 12407
          HEAP32[$AsyncCtx24 + 24 >> 2] = $0; //@line 12409
          HEAP32[$AsyncCtx24 + 28 >> 2] = $$1171; //@line 12411
          HEAP32[$AsyncCtx24 + 32 >> 2] = $285; //@line 12413
          HEAP32[$AsyncCtx24 + 36 >> 2] = $$3179; //@line 12415
          HEAP32[$AsyncCtx24 + 40 >> 2] = $vararg_buffer; //@line 12417
          HEAP32[$AsyncCtx24 + 44 >> 2] = $vararg_buffer1; //@line 12419
          HEAP32[$AsyncCtx24 + 48 >> 2] = $82; //@line 12421
          HEAP32[$AsyncCtx24 + 52 >> 2] = $540; //@line 12423
          HEAP32[$AsyncCtx24 + 56 >> 2] = $451; //@line 12425
          HEAP8[$AsyncCtx24 + 60 >> 0] = $305; //@line 12427
          sp = STACKTOP; //@line 12428
          STACKTOP = sp; //@line 12429
          return;
         } else {
          _emscripten_free_async_context($AsyncCtx24 | 0); //@line 12431
          HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($540) | 0) >> 2] = 4; //@line 12433
          $584 = $0 + 944 | 0; //@line 12434
          HEAP8[$584 >> 0] = HEAP8[$584 >> 0] | 16; //@line 12437
          __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($451); //@line 12438
          break;
         }
        }
       }
      } while (0);
      $589 = $491 & 255; //@line 12446
      $590 = $0 + 638 | 0; //@line 12447
      if (__Z15decrypt_payloadPKhtS0_jhjPh($1 + $488 | 0, $589, $$1171, $285, 1, $$3179, $590) | 0) {
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 13; //@line 12453
      }
      if ($$1$off0) {
       $$3$off0204 = 6; //@line 12456
      } else {
       HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 12 >> 2] = $590; //@line 12460
       HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 16 >> 1] = $589; //@line 12463
       HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 18 >> 0] = 1; //@line 12466
       label = 101; //@line 12467
      }
     } else {
      if (!($314 << 24 >> 24)) {
       label = 100; //@line 12472
      } else {
       $602 = $0 + 264 | 0; //@line 12474
       $603 = __ZN11LoRaMacMlme16get_confirmationEv($602) | 0; //@line 12475
       $605 = HEAP32[$0 >> 2] | 0; //@line 12477
       $AsyncCtx83 = _emscripten_alloc_async_context(56, sp) | 0; //@line 12478
       $606 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($451, $1, 8, $317, $4, $603, $0 + 1096 | 0, $605) | 0; //@line 12479
       if (___async) {
        HEAP32[$AsyncCtx83 >> 2] = 389; //@line 12482
        HEAP32[$AsyncCtx83 + 4 >> 2] = $602; //@line 12484
        HEAP32[$AsyncCtx83 + 8 >> 2] = $0; //@line 12486
        HEAP32[$AsyncCtx83 + 12 >> 2] = $451; //@line 12488
        HEAP8[$AsyncCtx83 + 16 >> 0] = $$1$off0 & 1; //@line 12491
        HEAP32[$AsyncCtx83 + 20 >> 2] = $vararg_buffer; //@line 12493
        HEAP32[$AsyncCtx83 + 24 >> 2] = $vararg_buffer1; //@line 12495
        HEAP8[$AsyncCtx83 + 28 >> 0] = $305; //@line 12497
        HEAP32[$AsyncCtx83 + 32 >> 2] = $29; //@line 12499
        HEAP32[$AsyncCtx83 + 36 >> 2] = $82; //@line 12501
        HEAP32[$AsyncCtx83 + 40 >> 2] = $vararg_buffer14; //@line 12503
        HEAP32[$AsyncCtx83 + 44 >> 2] = $vararg_buffer14; //@line 12505
        HEAP32[$AsyncCtx83 + 48 >> 2] = $vararg_buffer16; //@line 12507
        HEAP32[$AsyncCtx83 + 52 >> 2] = $vararg_buffer16; //@line 12509
        sp = STACKTOP; //@line 12510
        STACKTOP = sp; //@line 12511
        return;
       }
       _emscripten_free_async_context($AsyncCtx83 | 0); //@line 12513
       if ($606 | 0) {
        HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 1; //@line 12518
        if ($$1$off0) {
         $$3$off0204 = 6; //@line 12520
         break;
        } else {
         label = 101; //@line 12523
         break;
        }
       }
       if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($451) | 0) {
        _printf(12943, $vararg_buffer14) | 0; //@line 12529
        _printf(13090, $vararg_buffer16) | 0; //@line 12530
        $AsyncCtx20 = _emscripten_alloc_async_context(36, sp) | 0; //@line 12531
        _putchar(10) | 0; //@line 12532
        if (___async) {
         HEAP32[$AsyncCtx20 >> 2] = 390; //@line 12535
         HEAP32[$AsyncCtx20 + 4 >> 2] = $602; //@line 12537
         HEAP32[$AsyncCtx20 + 8 >> 2] = $0; //@line 12539
         HEAP32[$AsyncCtx20 + 12 >> 2] = $451; //@line 12541
         HEAP8[$AsyncCtx20 + 16 >> 0] = $$1$off0 & 1; //@line 12544
         HEAP8[$AsyncCtx20 + 17 >> 0] = $305; //@line 12546
         HEAP32[$AsyncCtx20 + 20 >> 2] = $29; //@line 12548
         HEAP32[$AsyncCtx20 + 24 >> 2] = $82; //@line 12550
         HEAP32[$AsyncCtx20 + 28 >> 2] = $vararg_buffer; //@line 12552
         HEAP32[$AsyncCtx20 + 32 >> 2] = $vararg_buffer1; //@line 12554
         sp = STACKTOP; //@line 12555
         STACKTOP = sp; //@line 12556
         return;
        } else {
         _emscripten_free_async_context($AsyncCtx20 | 0); //@line 12558
         HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($602) | 0) >> 2] = 4; //@line 12560
         $634 = $0 + 944 | 0; //@line 12561
         HEAP8[$634 >> 0] = HEAP8[$634 >> 0] | 16; //@line 12564
         __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($451); //@line 12565
         if ($$1$off0) {
          $$3$off0204 = 6; //@line 12567
          break;
         } else {
          label = 101; //@line 12570
          break;
         }
        }
       } else {
        label = 100; //@line 12575
       }
      }
     }
    } while (0);
    if ((label | 0) == 100) {
     if ($$1$off0) {
      $$3$off0204 = 6; //@line 12582
     } else {
      label = 101; //@line 12584
     }
    }
    do {
     if ((label | 0) == 101) {
      $640 = (__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 10 | 0; //@line 12592
      if ($305 & 32) {
       HEAP8[$640 >> 0] = 1; //@line 12594
       HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 28 >> 0] = 1; //@line 12597
       $643 = HEAP32[$82 >> 2] | 0; //@line 12598
       $AsyncCtx99 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12600
       __ZN18LoRaWANTimeHandler4stopER13timer_event_t($643, $0 + 1076 | 0); //@line 12601
       if (___async) {
        HEAP32[$AsyncCtx99 >> 2] = 391; //@line 12604
        HEAP32[$AsyncCtx99 + 4 >> 2] = $0; //@line 12606
        HEAP32[$AsyncCtx99 + 8 >> 2] = $82; //@line 12608
        HEAP32[$AsyncCtx99 + 12 >> 2] = $vararg_buffer; //@line 12610
        HEAP32[$AsyncCtx99 + 16 >> 2] = $vararg_buffer1; //@line 12612
        sp = STACKTOP; //@line 12613
        STACKTOP = sp; //@line 12614
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx99 | 0); //@line 12616
        $$3$off0204 = 2; //@line 12617
        break;
       }
      }
      HEAP8[$640 >> 0] = 0; //@line 12621
      if ((HEAPU8[$0 + 895 >> 0] | 0) > (HEAPU8[$0 + 894 >> 0] | 0)) {
       $654 = HEAP32[$82 >> 2] | 0; //@line 12628
       $AsyncCtx95 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12630
       __ZN18LoRaWANTimeHandler4stopER13timer_event_t($654, $0 + 1076 | 0); //@line 12631
       if (___async) {
        HEAP32[$AsyncCtx95 >> 2] = 392; //@line 12634
        HEAP32[$AsyncCtx95 + 4 >> 2] = $0; //@line 12636
        HEAP32[$AsyncCtx95 + 8 >> 2] = $82; //@line 12638
        HEAP32[$AsyncCtx95 + 12 >> 2] = $vararg_buffer; //@line 12640
        HEAP32[$AsyncCtx95 + 16 >> 2] = $vararg_buffer1; //@line 12642
        sp = STACKTOP; //@line 12643
        STACKTOP = sp; //@line 12644
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx95 | 0); //@line 12646
        $$3$off0204 = 2; //@line 12647
        break;
       }
      } else {
       $$3$off0204 = 2; //@line 12651
      }
     }
    } while (0);
    $660 = $0 + 944 | 0; //@line 12655
    HEAP8[$660 >> 0] = $$3$off0204 | HEAP8[$660 >> 0] & -7; //@line 12659
    break;
   }
  case 7:
   {
    $666 = $0 + 638 | 0; //@line 12663
    _memcpy($666 | 0, $1 + 1 | 0, $5 | 0) | 0; //@line 12665
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) >> 2] = 3; //@line 12667
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 0; //@line 12670
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 12 >> 2] = $666; //@line 12673
    HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 16 >> 1] = $5 + 65535; //@line 12678
    $677 = $0 + 944 | 0; //@line 12679
    HEAP8[$677 >> 0] = HEAP8[$677 >> 0] | 2; //@line 12682
    break;
   }
  default:
   {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($29) | 0) + 4 >> 2] = 1; //@line 12688
    $AsyncCtx36 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12689
    __ZN7LoRaMac21prepare_rx_done_abortEv($0); //@line 12690
    if (___async) {
     HEAP32[$AsyncCtx36 >> 2] = 394; //@line 12693
     HEAP32[$AsyncCtx36 + 4 >> 2] = $0; //@line 12695
     HEAP32[$AsyncCtx36 + 8 >> 2] = $82; //@line 12697
     HEAP32[$AsyncCtx36 + 12 >> 2] = $vararg_buffer; //@line 12699
     HEAP32[$AsyncCtx36 + 16 >> 2] = $vararg_buffer1; //@line 12701
     sp = STACKTOP; //@line 12702
     STACKTOP = sp; //@line 12703
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx36 | 0); //@line 12705
     break L10;
    }
   }
  }
 } while (0);
 $686 = $0 + 944 | 0; //@line 12711
 HEAP8[$686 >> 0] = HEAP8[$686 >> 0] | 32; //@line 12714
 $689 = HEAP32[$82 >> 2] | 0; //@line 12715
 $AsyncCtx76 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12717
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($689, $0 + 996 | 0, 1); //@line 12718
 if (___async) {
  HEAP32[$AsyncCtx76 >> 2] = 395; //@line 12721
  HEAP32[$AsyncCtx76 + 4 >> 2] = $vararg_buffer; //@line 12723
  HEAP32[$AsyncCtx76 + 8 >> 2] = $vararg_buffer1; //@line 12725
  sp = STACKTOP; //@line 12726
  STACKTOP = sp; //@line 12727
  return;
 }
 _emscripten_free_async_context($AsyncCtx76 | 0); //@line 12729
 STACKTOP = sp; //@line 12730
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_432($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $137 = 0, $139 = 0, $14 = 0, $140 = 0, $145 = 0, $147 = 0, $148 = 0, $149 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $234 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $245 = 0, $246 = 0, $248 = 0, $249 = 0, $250 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $262 = 0, $266 = 0, $267 = 0, $269 = 0, $270 = 0, $271 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $28 = 0, $30 = 0, $32 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $54 = 0, $6 = 0, $68 = 0, $72 = 0, $77 = 0, $8 = 0, $83 = 0, $84 = 0, $89 = 0, $93 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 26294
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26296
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26298
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26300
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26302
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26304
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26306
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26308
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26310
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26312
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26314
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 26316
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 26318
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 26320
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 26322
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 26324
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 26326
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx20 = _emscripten_realloc_async_context(68) | 0; //@line 26331
  _mbed_assert_internal(12827, 12836, 194); //@line 26332
  if (___async) {
   HEAP32[$ReallocAsyncCtx20 >> 2] = 448; //@line 26335
   $35 = $ReallocAsyncCtx20 + 4 | 0; //@line 26336
   HEAP32[$35 >> 2] = $2; //@line 26337
   $36 = $ReallocAsyncCtx20 + 8 | 0; //@line 26338
   HEAP32[$36 >> 2] = $4; //@line 26339
   $37 = $ReallocAsyncCtx20 + 12 | 0; //@line 26340
   HEAP32[$37 >> 2] = $6; //@line 26341
   $38 = $ReallocAsyncCtx20 + 16 | 0; //@line 26342
   HEAP32[$38 >> 2] = $8; //@line 26343
   $39 = $ReallocAsyncCtx20 + 20 | 0; //@line 26344
   HEAP32[$39 >> 2] = $10; //@line 26345
   $40 = $ReallocAsyncCtx20 + 24 | 0; //@line 26346
   HEAP32[$40 >> 2] = $12; //@line 26347
   $41 = $ReallocAsyncCtx20 + 28 | 0; //@line 26348
   HEAP32[$41 >> 2] = $14; //@line 26349
   $42 = $ReallocAsyncCtx20 + 32 | 0; //@line 26350
   HEAP32[$42 >> 2] = $16; //@line 26351
   $43 = $ReallocAsyncCtx20 + 36 | 0; //@line 26352
   HEAP32[$43 >> 2] = $18; //@line 26353
   $44 = $ReallocAsyncCtx20 + 40 | 0; //@line 26354
   HEAP32[$44 >> 2] = $20; //@line 26355
   $45 = $ReallocAsyncCtx20 + 44 | 0; //@line 26356
   HEAP32[$45 >> 2] = $22; //@line 26357
   $46 = $ReallocAsyncCtx20 + 48 | 0; //@line 26358
   HEAP32[$46 >> 2] = $24; //@line 26359
   $47 = $ReallocAsyncCtx20 + 52 | 0; //@line 26360
   HEAP32[$47 >> 2] = $26; //@line 26361
   $48 = $ReallocAsyncCtx20 + 56 | 0; //@line 26362
   HEAP32[$48 >> 2] = $28; //@line 26363
   $49 = $ReallocAsyncCtx20 + 60 | 0; //@line 26364
   HEAP32[$49 >> 2] = $30; //@line 26365
   $50 = $ReallocAsyncCtx20 + 64 | 0; //@line 26366
   HEAP32[$50 >> 2] = $32; //@line 26367
   sp = STACKTOP; //@line 26368
   return;
  }
  ___async_unwind = 0; //@line 26371
  HEAP32[$ReallocAsyncCtx20 >> 2] = 448; //@line 26372
  $35 = $ReallocAsyncCtx20 + 4 | 0; //@line 26373
  HEAP32[$35 >> 2] = $2; //@line 26374
  $36 = $ReallocAsyncCtx20 + 8 | 0; //@line 26375
  HEAP32[$36 >> 2] = $4; //@line 26376
  $37 = $ReallocAsyncCtx20 + 12 | 0; //@line 26377
  HEAP32[$37 >> 2] = $6; //@line 26378
  $38 = $ReallocAsyncCtx20 + 16 | 0; //@line 26379
  HEAP32[$38 >> 2] = $8; //@line 26380
  $39 = $ReallocAsyncCtx20 + 20 | 0; //@line 26381
  HEAP32[$39 >> 2] = $10; //@line 26382
  $40 = $ReallocAsyncCtx20 + 24 | 0; //@line 26383
  HEAP32[$40 >> 2] = $12; //@line 26384
  $41 = $ReallocAsyncCtx20 + 28 | 0; //@line 26385
  HEAP32[$41 >> 2] = $14; //@line 26386
  $42 = $ReallocAsyncCtx20 + 32 | 0; //@line 26387
  HEAP32[$42 >> 2] = $16; //@line 26388
  $43 = $ReallocAsyncCtx20 + 36 | 0; //@line 26389
  HEAP32[$43 >> 2] = $18; //@line 26390
  $44 = $ReallocAsyncCtx20 + 40 | 0; //@line 26391
  HEAP32[$44 >> 2] = $20; //@line 26392
  $45 = $ReallocAsyncCtx20 + 44 | 0; //@line 26393
  HEAP32[$45 >> 2] = $22; //@line 26394
  $46 = $ReallocAsyncCtx20 + 48 | 0; //@line 26395
  HEAP32[$46 >> 2] = $24; //@line 26396
  $47 = $ReallocAsyncCtx20 + 52 | 0; //@line 26397
  HEAP32[$47 >> 2] = $26; //@line 26398
  $48 = $ReallocAsyncCtx20 + 56 | 0; //@line 26399
  HEAP32[$48 >> 2] = $28; //@line 26400
  $49 = $ReallocAsyncCtx20 + 60 | 0; //@line 26401
  HEAP32[$49 >> 2] = $30; //@line 26402
  $50 = $ReallocAsyncCtx20 + 64 | 0; //@line 26403
  HEAP32[$50 >> 2] = $32; //@line 26404
  sp = STACKTOP; //@line 26405
  return;
 }
 do {
  if (HEAP8[$4 >> 0] & 2) {
   $54 = $2 + 288 | 0; //@line 26413
   if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($54) | 0) + 10 >> 0] | 0)) {
    if ((HEAPU8[$2 + 895 >> 0] | 0) <= (HEAPU8[$2 + 894 >> 0] | 0)) {
     break;
    }
   }
   HEAP8[$2 + 377 >> 0] = 0; //@line 26429
   HEAP8[$32 >> 0] = 0; //@line 26430
   if (!(HEAP8[$2 + 370 >> 0] | 0)) {
    $68 = $2 + 956 | 0; //@line 26435
    HEAP32[$68 >> 2] = (HEAP32[$68 >> 2] | 0) + 1; //@line 26438
   }
   $72 = HEAP8[$2 + 895 >> 0] | 0; //@line 26441
   HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($54) | 0) + 11 >> 0] = $72; //@line 26444
   HEAP32[$16 >> 2] = HEAP32[$16 >> 2] & -2; //@line 26447
  }
 } while (0);
 $77 = $2 + 377 | 0; //@line 26450
 if (HEAP8[$77 >> 0] | 0) {
  if (!(HEAP32[$16 >> 2] & 16)) {
   HEAP8[$77 >> 0] = 0; //@line 26458
   $83 = $2 + 895 | 0; //@line 26459
   $84 = HEAP8[$83 >> 0] | 0; //@line 26460
   if (!(($84 & 255) < 9 ? ($84 & 255) < (HEAPU8[$2 + 894 >> 0] | 0) : 0)) {
    $114 = HEAP32[$2 >> 2] | 0; //@line 26467
    $117 = HEAP32[(HEAP32[$114 >> 2] | 0) + 16 >> 2] | 0; //@line 26470
    $ReallocAsyncCtx = _emscripten_realloc_async_context(68) | 0; //@line 26471
    FUNCTION_TABLE_vi[$117 & 1023]($114); //@line 26472
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 452; //@line 26475
     $118 = $ReallocAsyncCtx + 4 | 0; //@line 26476
     HEAP32[$118 >> 2] = $6; //@line 26477
     $119 = $ReallocAsyncCtx + 8 | 0; //@line 26478
     HEAP32[$119 >> 2] = $8; //@line 26479
     $120 = $ReallocAsyncCtx + 12 | 0; //@line 26480
     HEAP32[$120 >> 2] = $10; //@line 26481
     $121 = $ReallocAsyncCtx + 16 | 0; //@line 26482
     HEAP32[$121 >> 2] = $12; //@line 26483
     $122 = $ReallocAsyncCtx + 20 | 0; //@line 26484
     HEAP32[$122 >> 2] = $14; //@line 26485
     $123 = $ReallocAsyncCtx + 24 | 0; //@line 26486
     HEAP32[$123 >> 2] = $4; //@line 26487
     $124 = $ReallocAsyncCtx + 28 | 0; //@line 26488
     HEAP32[$124 >> 2] = $2; //@line 26489
     $125 = $ReallocAsyncCtx + 32 | 0; //@line 26490
     HEAP32[$125 >> 2] = $16; //@line 26491
     $126 = $ReallocAsyncCtx + 36 | 0; //@line 26492
     HEAP32[$126 >> 2] = $32; //@line 26493
     $127 = $ReallocAsyncCtx + 40 | 0; //@line 26494
     HEAP32[$127 >> 2] = $83; //@line 26495
     $128 = $ReallocAsyncCtx + 44 | 0; //@line 26496
     HEAP32[$128 >> 2] = $28; //@line 26497
     $129 = $ReallocAsyncCtx + 48 | 0; //@line 26498
     HEAP32[$129 >> 2] = $30; //@line 26499
     $130 = $ReallocAsyncCtx + 52 | 0; //@line 26500
     HEAP32[$130 >> 2] = $18; //@line 26501
     $131 = $ReallocAsyncCtx + 56 | 0; //@line 26502
     HEAP32[$131 >> 2] = $20; //@line 26503
     $132 = $ReallocAsyncCtx + 60 | 0; //@line 26504
     HEAP32[$132 >> 2] = $22; //@line 26505
     $133 = $ReallocAsyncCtx + 64 | 0; //@line 26506
     HEAP32[$133 >> 2] = $24; //@line 26507
     sp = STACKTOP; //@line 26508
     return;
    }
    ___async_unwind = 0; //@line 26511
    HEAP32[$ReallocAsyncCtx >> 2] = 452; //@line 26512
    $118 = $ReallocAsyncCtx + 4 | 0; //@line 26513
    HEAP32[$118 >> 2] = $6; //@line 26514
    $119 = $ReallocAsyncCtx + 8 | 0; //@line 26515
    HEAP32[$119 >> 2] = $8; //@line 26516
    $120 = $ReallocAsyncCtx + 12 | 0; //@line 26517
    HEAP32[$120 >> 2] = $10; //@line 26518
    $121 = $ReallocAsyncCtx + 16 | 0; //@line 26519
    HEAP32[$121 >> 2] = $12; //@line 26520
    $122 = $ReallocAsyncCtx + 20 | 0; //@line 26521
    HEAP32[$122 >> 2] = $14; //@line 26522
    $123 = $ReallocAsyncCtx + 24 | 0; //@line 26523
    HEAP32[$123 >> 2] = $4; //@line 26524
    $124 = $ReallocAsyncCtx + 28 | 0; //@line 26525
    HEAP32[$124 >> 2] = $2; //@line 26526
    $125 = $ReallocAsyncCtx + 32 | 0; //@line 26527
    HEAP32[$125 >> 2] = $16; //@line 26528
    $126 = $ReallocAsyncCtx + 36 | 0; //@line 26529
    HEAP32[$126 >> 2] = $32; //@line 26530
    $127 = $ReallocAsyncCtx + 40 | 0; //@line 26531
    HEAP32[$127 >> 2] = $83; //@line 26532
    $128 = $ReallocAsyncCtx + 44 | 0; //@line 26533
    HEAP32[$128 >> 2] = $28; //@line 26534
    $129 = $ReallocAsyncCtx + 48 | 0; //@line 26535
    HEAP32[$129 >> 2] = $30; //@line 26536
    $130 = $ReallocAsyncCtx + 52 | 0; //@line 26537
    HEAP32[$130 >> 2] = $18; //@line 26538
    $131 = $ReallocAsyncCtx + 56 | 0; //@line 26539
    HEAP32[$131 >> 2] = $20; //@line 26540
    $132 = $ReallocAsyncCtx + 60 | 0; //@line 26541
    HEAP32[$132 >> 2] = $22; //@line 26542
    $133 = $ReallocAsyncCtx + 64 | 0; //@line 26543
    HEAP32[$133 >> 2] = $24; //@line 26544
    sp = STACKTOP; //@line 26545
    return;
   }
   $89 = $84 + 1 << 24 >> 24; //@line 26548
   HEAP8[$83 >> 0] = $89; //@line 26549
   if ($89 & 1) {
    $93 = $2 + 1097 | 0; //@line 26554
    HEAP8[$93 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$2 >> 2] | 0, HEAP8[$93 >> 0] | 0) | 0; //@line 26557
   }
   $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 26559
   $96 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 26560
   if (___async) {
    HEAP32[$ReallocAsyncCtx9 >> 2] = 451; //@line 26563
    $97 = $ReallocAsyncCtx9 + 4 | 0; //@line 26564
    HEAP32[$97 >> 2] = $4; //@line 26565
    $98 = $ReallocAsyncCtx9 + 8 | 0; //@line 26566
    HEAP32[$98 >> 2] = $2; //@line 26567
    $99 = $ReallocAsyncCtx9 + 12 | 0; //@line 26568
    HEAP32[$99 >> 2] = $6; //@line 26569
    $100 = $ReallocAsyncCtx9 + 16 | 0; //@line 26570
    HEAP32[$100 >> 2] = $8; //@line 26571
    $101 = $ReallocAsyncCtx9 + 20 | 0; //@line 26572
    HEAP32[$101 >> 2] = $10; //@line 26573
    $102 = $ReallocAsyncCtx9 + 24 | 0; //@line 26574
    HEAP32[$102 >> 2] = $12; //@line 26575
    $103 = $ReallocAsyncCtx9 + 28 | 0; //@line 26576
    HEAP32[$103 >> 2] = $14; //@line 26577
    $104 = $ReallocAsyncCtx9 + 32 | 0; //@line 26578
    HEAP32[$104 >> 2] = $18; //@line 26579
    $105 = $ReallocAsyncCtx9 + 36 | 0; //@line 26580
    HEAP32[$105 >> 2] = $20; //@line 26581
    $106 = $ReallocAsyncCtx9 + 40 | 0; //@line 26582
    HEAP32[$106 >> 2] = $22; //@line 26583
    $107 = $ReallocAsyncCtx9 + 44 | 0; //@line 26584
    HEAP32[$107 >> 2] = $24; //@line 26585
    $108 = $ReallocAsyncCtx9 + 48 | 0; //@line 26586
    HEAP32[$108 >> 2] = $16; //@line 26587
    $109 = $ReallocAsyncCtx9 + 52 | 0; //@line 26588
    HEAP32[$109 >> 2] = $32; //@line 26589
    $110 = $ReallocAsyncCtx9 + 56 | 0; //@line 26590
    HEAP32[$110 >> 2] = $83; //@line 26591
    $111 = $ReallocAsyncCtx9 + 60 | 0; //@line 26592
    HEAP32[$111 >> 2] = $28; //@line 26593
    $112 = $ReallocAsyncCtx9 + 64 | 0; //@line 26594
    HEAP32[$112 >> 2] = $30; //@line 26595
    sp = STACKTOP; //@line 26596
    return;
   }
   HEAP32[___async_retval >> 2] = $96; //@line 26600
   ___async_unwind = 0; //@line 26601
   HEAP32[$ReallocAsyncCtx9 >> 2] = 451; //@line 26602
   $97 = $ReallocAsyncCtx9 + 4 | 0; //@line 26603
   HEAP32[$97 >> 2] = $4; //@line 26604
   $98 = $ReallocAsyncCtx9 + 8 | 0; //@line 26605
   HEAP32[$98 >> 2] = $2; //@line 26606
   $99 = $ReallocAsyncCtx9 + 12 | 0; //@line 26607
   HEAP32[$99 >> 2] = $6; //@line 26608
   $100 = $ReallocAsyncCtx9 + 16 | 0; //@line 26609
   HEAP32[$100 >> 2] = $8; //@line 26610
   $101 = $ReallocAsyncCtx9 + 20 | 0; //@line 26611
   HEAP32[$101 >> 2] = $10; //@line 26612
   $102 = $ReallocAsyncCtx9 + 24 | 0; //@line 26613
   HEAP32[$102 >> 2] = $12; //@line 26614
   $103 = $ReallocAsyncCtx9 + 28 | 0; //@line 26615
   HEAP32[$103 >> 2] = $14; //@line 26616
   $104 = $ReallocAsyncCtx9 + 32 | 0; //@line 26617
   HEAP32[$104 >> 2] = $18; //@line 26618
   $105 = $ReallocAsyncCtx9 + 36 | 0; //@line 26619
   HEAP32[$105 >> 2] = $20; //@line 26620
   $106 = $ReallocAsyncCtx9 + 40 | 0; //@line 26621
   HEAP32[$106 >> 2] = $22; //@line 26622
   $107 = $ReallocAsyncCtx9 + 44 | 0; //@line 26623
   HEAP32[$107 >> 2] = $24; //@line 26624
   $108 = $ReallocAsyncCtx9 + 48 | 0; //@line 26625
   HEAP32[$108 >> 2] = $16; //@line 26626
   $109 = $ReallocAsyncCtx9 + 52 | 0; //@line 26627
   HEAP32[$109 >> 2] = $32; //@line 26628
   $110 = $ReallocAsyncCtx9 + 56 | 0; //@line 26629
   HEAP32[$110 >> 2] = $83; //@line 26630
   $111 = $ReallocAsyncCtx9 + 60 | 0; //@line 26631
   HEAP32[$111 >> 2] = $28; //@line 26632
   $112 = $ReallocAsyncCtx9 + 64 | 0; //@line 26633
   HEAP32[$112 >> 2] = $30; //@line 26634
   sp = STACKTOP; //@line 26635
   return;
  }
 }
 $134 = HEAP32[$16 >> 2] | 0; //@line 26639
 $137 = $134 & -3; //@line 26642
 if (!($134 & 2)) {
  $139 = $134; //@line 26644
 } else {
  HEAP32[$16 >> 2] = $137; //@line 26646
  $139 = $137; //@line 26647
 }
 if ($139 | 0) {
  $224 = HEAP32[$28 >> 2] | 0; //@line 26651
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 26652
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($224, $30, 1e3); //@line 26653
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 458; //@line 26656
   $225 = $ReallocAsyncCtx8 + 4 | 0; //@line 26657
   HEAP32[$225 >> 2] = $4; //@line 26658
   $226 = $ReallocAsyncCtx8 + 8 | 0; //@line 26659
   HEAP32[$226 >> 2] = $2; //@line 26660
   $227 = $ReallocAsyncCtx8 + 12 | 0; //@line 26661
   HEAP32[$227 >> 2] = $6; //@line 26662
   $228 = $ReallocAsyncCtx8 + 16 | 0; //@line 26663
   HEAP32[$228 >> 2] = $8; //@line 26664
   $229 = $ReallocAsyncCtx8 + 20 | 0; //@line 26665
   HEAP32[$229 >> 2] = $10; //@line 26666
   $230 = $ReallocAsyncCtx8 + 24 | 0; //@line 26667
   HEAP32[$230 >> 2] = $12; //@line 26668
   $231 = $ReallocAsyncCtx8 + 28 | 0; //@line 26669
   HEAP32[$231 >> 2] = $14; //@line 26670
   sp = STACKTOP; //@line 26671
   return;
  }
  ___async_unwind = 0; //@line 26674
  HEAP32[$ReallocAsyncCtx8 >> 2] = 458; //@line 26675
  $225 = $ReallocAsyncCtx8 + 4 | 0; //@line 26676
  HEAP32[$225 >> 2] = $4; //@line 26677
  $226 = $ReallocAsyncCtx8 + 8 | 0; //@line 26678
  HEAP32[$226 >> 2] = $2; //@line 26679
  $227 = $ReallocAsyncCtx8 + 12 | 0; //@line 26680
  HEAP32[$227 >> 2] = $6; //@line 26681
  $228 = $ReallocAsyncCtx8 + 16 | 0; //@line 26682
  HEAP32[$228 >> 2] = $8; //@line 26683
  $229 = $ReallocAsyncCtx8 + 20 | 0; //@line 26684
  HEAP32[$229 >> 2] = $10; //@line 26685
  $230 = $ReallocAsyncCtx8 + 24 | 0; //@line 26686
  HEAP32[$230 >> 2] = $12; //@line 26687
  $231 = $ReallocAsyncCtx8 + 28 | 0; //@line 26688
  HEAP32[$231 >> 2] = $14; //@line 26689
  sp = STACKTOP; //@line 26690
  return;
 }
 $140 = HEAP8[$4 >> 0] | 0; //@line 26693
 if ($140 & 1) {
  HEAP8[$4 >> 0] = $140 & -2; //@line 26698
  $145 = HEAP32[$2 + 1324 >> 2] | 0; //@line 26700
  $147 = __ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0; //@line 26702
  $148 = $145 + 12 | 0; //@line 26703
  $149 = HEAP32[$148 >> 2] | 0; //@line 26704
  if (!$149) {
   $ReallocAsyncCtx18 = _emscripten_realloc_async_context(60) | 0; //@line 26707
   _mbed_assert_internal(14997, 15002, 1102); //@line 26708
   if (___async) {
    HEAP32[$ReallocAsyncCtx18 >> 2] = 453; //@line 26711
    $151 = $ReallocAsyncCtx18 + 4 | 0; //@line 26712
    HEAP32[$151 >> 2] = $148; //@line 26713
    $152 = $ReallocAsyncCtx18 + 8 | 0; //@line 26714
    HEAP32[$152 >> 2] = $4; //@line 26715
    $153 = $ReallocAsyncCtx18 + 12 | 0; //@line 26716
    HEAP32[$153 >> 2] = $2; //@line 26717
    $154 = $ReallocAsyncCtx18 + 16 | 0; //@line 26718
    HEAP32[$154 >> 2] = $6; //@line 26719
    $155 = $ReallocAsyncCtx18 + 20 | 0; //@line 26720
    HEAP32[$155 >> 2] = $8; //@line 26721
    $156 = $ReallocAsyncCtx18 + 24 | 0; //@line 26722
    HEAP32[$156 >> 2] = $10; //@line 26723
    $157 = $ReallocAsyncCtx18 + 28 | 0; //@line 26724
    HEAP32[$157 >> 2] = $12; //@line 26725
    $158 = $ReallocAsyncCtx18 + 32 | 0; //@line 26726
    HEAP32[$158 >> 2] = $14; //@line 26727
    $159 = $ReallocAsyncCtx18 + 36 | 0; //@line 26728
    HEAP32[$159 >> 2] = $18; //@line 26729
    $160 = $ReallocAsyncCtx18 + 40 | 0; //@line 26730
    HEAP32[$160 >> 2] = $20; //@line 26731
    $161 = $ReallocAsyncCtx18 + 44 | 0; //@line 26732
    HEAP32[$161 >> 2] = $22; //@line 26733
    $162 = $ReallocAsyncCtx18 + 48 | 0; //@line 26734
    HEAP32[$162 >> 2] = $24; //@line 26735
    $163 = $ReallocAsyncCtx18 + 52 | 0; //@line 26736
    HEAP32[$163 >> 2] = $145; //@line 26737
    $164 = $ReallocAsyncCtx18 + 56 | 0; //@line 26738
    HEAP32[$164 >> 2] = $147; //@line 26739
    sp = STACKTOP; //@line 26740
    return;
   }
   ___async_unwind = 0; //@line 26743
   HEAP32[$ReallocAsyncCtx18 >> 2] = 453; //@line 26744
   $151 = $ReallocAsyncCtx18 + 4 | 0; //@line 26745
   HEAP32[$151 >> 2] = $148; //@line 26746
   $152 = $ReallocAsyncCtx18 + 8 | 0; //@line 26747
   HEAP32[$152 >> 2] = $4; //@line 26748
   $153 = $ReallocAsyncCtx18 + 12 | 0; //@line 26749
   HEAP32[$153 >> 2] = $2; //@line 26750
   $154 = $ReallocAsyncCtx18 + 16 | 0; //@line 26751
   HEAP32[$154 >> 2] = $6; //@line 26752
   $155 = $ReallocAsyncCtx18 + 20 | 0; //@line 26753
   HEAP32[$155 >> 2] = $8; //@line 26754
   $156 = $ReallocAsyncCtx18 + 24 | 0; //@line 26755
   HEAP32[$156 >> 2] = $10; //@line 26756
   $157 = $ReallocAsyncCtx18 + 28 | 0; //@line 26757
   HEAP32[$157 >> 2] = $12; //@line 26758
   $158 = $ReallocAsyncCtx18 + 32 | 0; //@line 26759
   HEAP32[$158 >> 2] = $14; //@line 26760
   $159 = $ReallocAsyncCtx18 + 36 | 0; //@line 26761
   HEAP32[$159 >> 2] = $18; //@line 26762
   $160 = $ReallocAsyncCtx18 + 40 | 0; //@line 26763
   HEAP32[$160 >> 2] = $20; //@line 26764
   $161 = $ReallocAsyncCtx18 + 44 | 0; //@line 26765
   HEAP32[$161 >> 2] = $22; //@line 26766
   $162 = $ReallocAsyncCtx18 + 48 | 0; //@line 26767
   HEAP32[$162 >> 2] = $24; //@line 26768
   $163 = $ReallocAsyncCtx18 + 52 | 0; //@line 26769
   HEAP32[$163 >> 2] = $145; //@line 26770
   $164 = $ReallocAsyncCtx18 + 56 | 0; //@line 26771
   HEAP32[$164 >> 2] = $147; //@line 26772
   sp = STACKTOP; //@line 26773
   return;
  } else {
   $165 = HEAP32[$149 >> 2] | 0; //@line 26776
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(48) | 0; //@line 26777
   FUNCTION_TABLE_vii[$165 & 31]($145, $147); //@line 26778
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 454; //@line 26781
    $166 = $ReallocAsyncCtx2 + 4 | 0; //@line 26782
    HEAP32[$166 >> 2] = $6; //@line 26783
    $167 = $ReallocAsyncCtx2 + 8 | 0; //@line 26784
    HEAP32[$167 >> 2] = $8; //@line 26785
    $168 = $ReallocAsyncCtx2 + 12 | 0; //@line 26786
    HEAP32[$168 >> 2] = $10; //@line 26787
    $169 = $ReallocAsyncCtx2 + 16 | 0; //@line 26788
    HEAP32[$169 >> 2] = $12; //@line 26789
    $170 = $ReallocAsyncCtx2 + 20 | 0; //@line 26790
    HEAP32[$170 >> 2] = $14; //@line 26791
    $171 = $ReallocAsyncCtx2 + 24 | 0; //@line 26792
    HEAP32[$171 >> 2] = $4; //@line 26793
    $172 = $ReallocAsyncCtx2 + 28 | 0; //@line 26794
    HEAP32[$172 >> 2] = $2; //@line 26795
    $173 = $ReallocAsyncCtx2 + 32 | 0; //@line 26796
    HEAP32[$173 >> 2] = $18; //@line 26797
    $174 = $ReallocAsyncCtx2 + 36 | 0; //@line 26798
    HEAP32[$174 >> 2] = $20; //@line 26799
    $175 = $ReallocAsyncCtx2 + 40 | 0; //@line 26800
    HEAP32[$175 >> 2] = $22; //@line 26801
    $176 = $ReallocAsyncCtx2 + 44 | 0; //@line 26802
    HEAP32[$176 >> 2] = $24; //@line 26803
    sp = STACKTOP; //@line 26804
    return;
   }
   ___async_unwind = 0; //@line 26807
   HEAP32[$ReallocAsyncCtx2 >> 2] = 454; //@line 26808
   $166 = $ReallocAsyncCtx2 + 4 | 0; //@line 26809
   HEAP32[$166 >> 2] = $6; //@line 26810
   $167 = $ReallocAsyncCtx2 + 8 | 0; //@line 26811
   HEAP32[$167 >> 2] = $8; //@line 26812
   $168 = $ReallocAsyncCtx2 + 12 | 0; //@line 26813
   HEAP32[$168 >> 2] = $10; //@line 26814
   $169 = $ReallocAsyncCtx2 + 16 | 0; //@line 26815
   HEAP32[$169 >> 2] = $12; //@line 26816
   $170 = $ReallocAsyncCtx2 + 20 | 0; //@line 26817
   HEAP32[$170 >> 2] = $14; //@line 26818
   $171 = $ReallocAsyncCtx2 + 24 | 0; //@line 26819
   HEAP32[$171 >> 2] = $4; //@line 26820
   $172 = $ReallocAsyncCtx2 + 28 | 0; //@line 26821
   HEAP32[$172 >> 2] = $2; //@line 26822
   $173 = $ReallocAsyncCtx2 + 32 | 0; //@line 26823
   HEAP32[$173 >> 2] = $18; //@line 26824
   $174 = $ReallocAsyncCtx2 + 36 | 0; //@line 26825
   HEAP32[$174 >> 2] = $20; //@line 26826
   $175 = $ReallocAsyncCtx2 + 40 | 0; //@line 26827
   HEAP32[$175 >> 2] = $22; //@line 26828
   $176 = $ReallocAsyncCtx2 + 44 | 0; //@line 26829
   HEAP32[$176 >> 2] = $24; //@line 26830
   sp = STACKTOP; //@line 26831
   return;
  }
 }
 if ($140 & 8) {
  HEAP8[$4 >> 0] = $140 & -9; //@line 26839
  $181 = HEAP32[$2 + 1324 >> 2] | 0; //@line 26841
  $182 = $181 + 32 | 0; //@line 26842
  $184 = __ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0; //@line 26844
  $185 = $181 + 44 | 0; //@line 26845
  $186 = HEAP32[$185 >> 2] | 0; //@line 26846
  if (!$186) {
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(60) | 0; //@line 26849
   _mbed_assert_internal(14997, 15002, 1102); //@line 26850
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 455; //@line 26853
    $188 = $ReallocAsyncCtx17 + 4 | 0; //@line 26854
    HEAP32[$188 >> 2] = $4; //@line 26855
    $189 = $ReallocAsyncCtx17 + 8 | 0; //@line 26856
    HEAP32[$189 >> 2] = $2; //@line 26857
    $190 = $ReallocAsyncCtx17 + 12 | 0; //@line 26858
    HEAP32[$190 >> 2] = $6; //@line 26859
    $191 = $ReallocAsyncCtx17 + 16 | 0; //@line 26860
    HEAP32[$191 >> 2] = $8; //@line 26861
    $192 = $ReallocAsyncCtx17 + 20 | 0; //@line 26862
    HEAP32[$192 >> 2] = $10; //@line 26863
    $193 = $ReallocAsyncCtx17 + 24 | 0; //@line 26864
    HEAP32[$193 >> 2] = $12; //@line 26865
    $194 = $ReallocAsyncCtx17 + 28 | 0; //@line 26866
    HEAP32[$194 >> 2] = $14; //@line 26867
    $195 = $ReallocAsyncCtx17 + 32 | 0; //@line 26868
    HEAP32[$195 >> 2] = $18; //@line 26869
    $196 = $ReallocAsyncCtx17 + 36 | 0; //@line 26870
    HEAP32[$196 >> 2] = $20; //@line 26871
    $197 = $ReallocAsyncCtx17 + 40 | 0; //@line 26872
    HEAP32[$197 >> 2] = $22; //@line 26873
    $198 = $ReallocAsyncCtx17 + 44 | 0; //@line 26874
    HEAP32[$198 >> 2] = $24; //@line 26875
    $199 = $ReallocAsyncCtx17 + 48 | 0; //@line 26876
    HEAP32[$199 >> 2] = $185; //@line 26877
    $200 = $ReallocAsyncCtx17 + 52 | 0; //@line 26878
    HEAP32[$200 >> 2] = $182; //@line 26879
    $201 = $ReallocAsyncCtx17 + 56 | 0; //@line 26880
    HEAP32[$201 >> 2] = $184; //@line 26881
    sp = STACKTOP; //@line 26882
    return;
   }
   ___async_unwind = 0; //@line 26885
   HEAP32[$ReallocAsyncCtx17 >> 2] = 455; //@line 26886
   $188 = $ReallocAsyncCtx17 + 4 | 0; //@line 26887
   HEAP32[$188 >> 2] = $4; //@line 26888
   $189 = $ReallocAsyncCtx17 + 8 | 0; //@line 26889
   HEAP32[$189 >> 2] = $2; //@line 26890
   $190 = $ReallocAsyncCtx17 + 12 | 0; //@line 26891
   HEAP32[$190 >> 2] = $6; //@line 26892
   $191 = $ReallocAsyncCtx17 + 16 | 0; //@line 26893
   HEAP32[$191 >> 2] = $8; //@line 26894
   $192 = $ReallocAsyncCtx17 + 20 | 0; //@line 26895
   HEAP32[$192 >> 2] = $10; //@line 26896
   $193 = $ReallocAsyncCtx17 + 24 | 0; //@line 26897
   HEAP32[$193 >> 2] = $12; //@line 26898
   $194 = $ReallocAsyncCtx17 + 28 | 0; //@line 26899
   HEAP32[$194 >> 2] = $14; //@line 26900
   $195 = $ReallocAsyncCtx17 + 32 | 0; //@line 26901
   HEAP32[$195 >> 2] = $18; //@line 26902
   $196 = $ReallocAsyncCtx17 + 36 | 0; //@line 26903
   HEAP32[$196 >> 2] = $20; //@line 26904
   $197 = $ReallocAsyncCtx17 + 40 | 0; //@line 26905
   HEAP32[$197 >> 2] = $22; //@line 26906
   $198 = $ReallocAsyncCtx17 + 44 | 0; //@line 26907
   HEAP32[$198 >> 2] = $24; //@line 26908
   $199 = $ReallocAsyncCtx17 + 48 | 0; //@line 26909
   HEAP32[$199 >> 2] = $185; //@line 26910
   $200 = $ReallocAsyncCtx17 + 52 | 0; //@line 26911
   HEAP32[$200 >> 2] = $182; //@line 26912
   $201 = $ReallocAsyncCtx17 + 56 | 0; //@line 26913
   HEAP32[$201 >> 2] = $184; //@line 26914
   sp = STACKTOP; //@line 26915
   return;
  } else {
   $202 = HEAP32[$186 >> 2] | 0; //@line 26918
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 26919
   FUNCTION_TABLE_vii[$202 & 31]($182, $184); //@line 26920
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 456; //@line 26923
    $203 = $ReallocAsyncCtx3 + 4 | 0; //@line 26924
    HEAP32[$203 >> 2] = $6; //@line 26925
    $204 = $ReallocAsyncCtx3 + 8 | 0; //@line 26926
    HEAP32[$204 >> 2] = $8; //@line 26927
    $205 = $ReallocAsyncCtx3 + 12 | 0; //@line 26928
    HEAP32[$205 >> 2] = $10; //@line 26929
    $206 = $ReallocAsyncCtx3 + 16 | 0; //@line 26930
    HEAP32[$206 >> 2] = $12; //@line 26931
    $207 = $ReallocAsyncCtx3 + 20 | 0; //@line 26932
    HEAP32[$207 >> 2] = $14; //@line 26933
    $208 = $ReallocAsyncCtx3 + 24 | 0; //@line 26934
    HEAP32[$208 >> 2] = $4; //@line 26935
    $209 = $ReallocAsyncCtx3 + 28 | 0; //@line 26936
    HEAP32[$209 >> 2] = $2; //@line 26937
    $210 = $ReallocAsyncCtx3 + 32 | 0; //@line 26938
    HEAP32[$210 >> 2] = $18; //@line 26939
    $211 = $ReallocAsyncCtx3 + 36 | 0; //@line 26940
    HEAP32[$211 >> 2] = $20; //@line 26941
    $212 = $ReallocAsyncCtx3 + 40 | 0; //@line 26942
    HEAP32[$212 >> 2] = $22; //@line 26943
    $213 = $ReallocAsyncCtx3 + 44 | 0; //@line 26944
    HEAP32[$213 >> 2] = $24; //@line 26945
    sp = STACKTOP; //@line 26946
    return;
   }
   ___async_unwind = 0; //@line 26949
   HEAP32[$ReallocAsyncCtx3 >> 2] = 456; //@line 26950
   $203 = $ReallocAsyncCtx3 + 4 | 0; //@line 26951
   HEAP32[$203 >> 2] = $6; //@line 26952
   $204 = $ReallocAsyncCtx3 + 8 | 0; //@line 26953
   HEAP32[$204 >> 2] = $8; //@line 26954
   $205 = $ReallocAsyncCtx3 + 12 | 0; //@line 26955
   HEAP32[$205 >> 2] = $10; //@line 26956
   $206 = $ReallocAsyncCtx3 + 16 | 0; //@line 26957
   HEAP32[$206 >> 2] = $12; //@line 26958
   $207 = $ReallocAsyncCtx3 + 20 | 0; //@line 26959
   HEAP32[$207 >> 2] = $14; //@line 26960
   $208 = $ReallocAsyncCtx3 + 24 | 0; //@line 26961
   HEAP32[$208 >> 2] = $4; //@line 26962
   $209 = $ReallocAsyncCtx3 + 28 | 0; //@line 26963
   HEAP32[$209 >> 2] = $2; //@line 26964
   $210 = $ReallocAsyncCtx3 + 32 | 0; //@line 26965
   HEAP32[$210 >> 2] = $18; //@line 26966
   $211 = $ReallocAsyncCtx3 + 36 | 0; //@line 26967
   HEAP32[$211 >> 2] = $20; //@line 26968
   $212 = $ReallocAsyncCtx3 + 40 | 0; //@line 26969
   HEAP32[$212 >> 2] = $22; //@line 26970
   $213 = $ReallocAsyncCtx3 + 44 | 0; //@line 26971
   HEAP32[$213 >> 2] = $24; //@line 26972
   sp = STACKTOP; //@line 26973
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($2 + 4 | 0) | 0) {
  _printf(12943, $18) | 0; //@line 26980
  _printf(13090, $22) | 0; //@line 26981
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 26982
  _putchar(10) | 0; //@line 26983
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 457; //@line 26986
   $216 = $ReallocAsyncCtx7 + 4 | 0; //@line 26987
   HEAP32[$216 >> 2] = $4; //@line 26988
   $217 = $ReallocAsyncCtx7 + 8 | 0; //@line 26989
   HEAP32[$217 >> 2] = $2; //@line 26990
   $218 = $ReallocAsyncCtx7 + 12 | 0; //@line 26991
   HEAP32[$218 >> 2] = $6; //@line 26992
   $219 = $ReallocAsyncCtx7 + 16 | 0; //@line 26993
   HEAP32[$219 >> 2] = $8; //@line 26994
   $220 = $ReallocAsyncCtx7 + 20 | 0; //@line 26995
   HEAP32[$220 >> 2] = $10; //@line 26996
   $221 = $ReallocAsyncCtx7 + 24 | 0; //@line 26997
   HEAP32[$221 >> 2] = $12; //@line 26998
   $222 = $ReallocAsyncCtx7 + 28 | 0; //@line 26999
   HEAP32[$222 >> 2] = $14; //@line 27000
   sp = STACKTOP; //@line 27001
   return;
  }
  ___async_unwind = 0; //@line 27004
  HEAP32[$ReallocAsyncCtx7 >> 2] = 457; //@line 27005
  $216 = $ReallocAsyncCtx7 + 4 | 0; //@line 27006
  HEAP32[$216 >> 2] = $4; //@line 27007
  $217 = $ReallocAsyncCtx7 + 8 | 0; //@line 27008
  HEAP32[$217 >> 2] = $2; //@line 27009
  $218 = $ReallocAsyncCtx7 + 12 | 0; //@line 27010
  HEAP32[$218 >> 2] = $6; //@line 27011
  $219 = $ReallocAsyncCtx7 + 16 | 0; //@line 27012
  HEAP32[$219 >> 2] = $8; //@line 27013
  $220 = $ReallocAsyncCtx7 + 20 | 0; //@line 27014
  HEAP32[$220 >> 2] = $10; //@line 27015
  $221 = $ReallocAsyncCtx7 + 24 | 0; //@line 27016
  HEAP32[$221 >> 2] = $12; //@line 27017
  $222 = $ReallocAsyncCtx7 + 28 | 0; //@line 27018
  HEAP32[$222 >> 2] = $14; //@line 27019
  sp = STACKTOP; //@line 27020
  return;
 }
 $223 = HEAP8[$4 >> 0] & -33; //@line 27024
 HEAP8[$4 >> 0] = $223; //@line 27025
 do {
  if (!($223 & 2)) {
   $262 = $223; //@line 27030
  } else {
   $234 = $223 & -3; //@line 27032
   HEAP8[$4 >> 0] = $234; //@line 27033
   if ((HEAP32[$2 + 360 >> 2] | 0) == 2) {
    _printf(12943, $8) | 0; //@line 27038
    _printf(12970, $12) | 0; //@line 27039
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 27040
    _putchar(10) | 0; //@line 27041
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 459; //@line 27044
     $238 = $ReallocAsyncCtx6 + 4 | 0; //@line 27045
     HEAP32[$238 >> 2] = $4; //@line 27046
     $239 = $ReallocAsyncCtx6 + 8 | 0; //@line 27047
     HEAP32[$239 >> 2] = $2; //@line 27048
     $240 = $ReallocAsyncCtx6 + 12 | 0; //@line 27049
     HEAP32[$240 >> 2] = $6; //@line 27050
     $241 = $ReallocAsyncCtx6 + 16 | 0; //@line 27051
     HEAP32[$241 >> 2] = $6; //@line 27052
     sp = STACKTOP; //@line 27053
     return;
    }
    ___async_unwind = 0; //@line 27056
    HEAP32[$ReallocAsyncCtx6 >> 2] = 459; //@line 27057
    $238 = $ReallocAsyncCtx6 + 4 | 0; //@line 27058
    HEAP32[$238 >> 2] = $4; //@line 27059
    $239 = $ReallocAsyncCtx6 + 8 | 0; //@line 27060
    HEAP32[$239 >> 2] = $2; //@line 27061
    $240 = $ReallocAsyncCtx6 + 12 | 0; //@line 27062
    HEAP32[$240 >> 2] = $6; //@line 27063
    $241 = $ReallocAsyncCtx6 + 16 | 0; //@line 27064
    HEAP32[$241 >> 2] = $6; //@line 27065
    sp = STACKTOP; //@line 27066
    return;
   }
   if ($234 & 4) {
    $260 = $234 & -5; //@line 27072
    HEAP8[$4 >> 0] = $260; //@line 27073
    $262 = $260; //@line 27074
    break;
   }
   $245 = HEAP32[$2 + 1324 >> 2] | 0; //@line 27078
   $246 = $245 + 16 | 0; //@line 27079
   $248 = __ZN11LoRaMacMcps14get_indicationEv($2 + 288 | 0) | 0; //@line 27081
   $249 = $245 + 28 | 0; //@line 27082
   $250 = HEAP32[$249 >> 2] | 0; //@line 27083
   if (!$250) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 27086
    _mbed_assert_internal(14997, 15002, 1102); //@line 27087
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 462; //@line 27090
     $252 = $ReallocAsyncCtx15 + 4 | 0; //@line 27091
     HEAP32[$252 >> 2] = $249; //@line 27092
     $253 = $ReallocAsyncCtx15 + 8 | 0; //@line 27093
     HEAP32[$253 >> 2] = $246; //@line 27094
     $254 = $ReallocAsyncCtx15 + 12 | 0; //@line 27095
     HEAP32[$254 >> 2] = $248; //@line 27096
     $255 = $ReallocAsyncCtx15 + 16 | 0; //@line 27097
     HEAP32[$255 >> 2] = $4; //@line 27098
     $256 = $ReallocAsyncCtx15 + 20 | 0; //@line 27099
     HEAP32[$256 >> 2] = $2; //@line 27100
     sp = STACKTOP; //@line 27101
     return;
    }
    ___async_unwind = 0; //@line 27104
    HEAP32[$ReallocAsyncCtx15 >> 2] = 462; //@line 27105
    $252 = $ReallocAsyncCtx15 + 4 | 0; //@line 27106
    HEAP32[$252 >> 2] = $249; //@line 27107
    $253 = $ReallocAsyncCtx15 + 8 | 0; //@line 27108
    HEAP32[$253 >> 2] = $246; //@line 27109
    $254 = $ReallocAsyncCtx15 + 12 | 0; //@line 27110
    HEAP32[$254 >> 2] = $248; //@line 27111
    $255 = $ReallocAsyncCtx15 + 16 | 0; //@line 27112
    HEAP32[$255 >> 2] = $4; //@line 27113
    $256 = $ReallocAsyncCtx15 + 20 | 0; //@line 27114
    HEAP32[$256 >> 2] = $2; //@line 27115
    sp = STACKTOP; //@line 27116
    return;
   } else {
    $257 = HEAP32[$250 >> 2] | 0; //@line 27119
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 27120
    FUNCTION_TABLE_vii[$257 & 31]($246, $248); //@line 27121
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 463; //@line 27124
     $258 = $ReallocAsyncCtx4 + 4 | 0; //@line 27125
     HEAP32[$258 >> 2] = $4; //@line 27126
     $259 = $ReallocAsyncCtx4 + 8 | 0; //@line 27127
     HEAP32[$259 >> 2] = $2; //@line 27128
     sp = STACKTOP; //@line 27129
     return;
    }
    ___async_unwind = 0; //@line 27132
    HEAP32[$ReallocAsyncCtx4 >> 2] = 463; //@line 27133
    $258 = $ReallocAsyncCtx4 + 4 | 0; //@line 27134
    HEAP32[$258 >> 2] = $4; //@line 27135
    $259 = $ReallocAsyncCtx4 + 8 | 0; //@line 27136
    HEAP32[$259 >> 2] = $2; //@line 27137
    sp = STACKTOP; //@line 27138
    return;
   }
  }
 } while (0);
 if (!($262 & 16)) {
  return;
 }
 HEAP8[$4 >> 0] = $262 & -17; //@line 27149
 $266 = HEAP32[$2 + 1324 >> 2] | 0; //@line 27151
 $267 = $266 + 48 | 0; //@line 27152
 $269 = __ZN11LoRaMacMlme14get_indicationEv($2 + 264 | 0) | 0; //@line 27154
 $270 = $266 + 60 | 0; //@line 27155
 $271 = HEAP32[$270 >> 2] | 0; //@line 27156
 if (!$271) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 27159
  _mbed_assert_internal(14997, 15002, 1102); //@line 27160
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 464; //@line 27163
   $273 = $ReallocAsyncCtx14 + 4 | 0; //@line 27164
   HEAP32[$273 >> 2] = $270; //@line 27165
   $274 = $ReallocAsyncCtx14 + 8 | 0; //@line 27166
   HEAP32[$274 >> 2] = $267; //@line 27167
   $275 = $ReallocAsyncCtx14 + 12 | 0; //@line 27168
   HEAP32[$275 >> 2] = $269; //@line 27169
   sp = STACKTOP; //@line 27170
   return;
  }
  ___async_unwind = 0; //@line 27173
  HEAP32[$ReallocAsyncCtx14 >> 2] = 464; //@line 27174
  $273 = $ReallocAsyncCtx14 + 4 | 0; //@line 27175
  HEAP32[$273 >> 2] = $270; //@line 27176
  $274 = $ReallocAsyncCtx14 + 8 | 0; //@line 27177
  HEAP32[$274 >> 2] = $267; //@line 27178
  $275 = $ReallocAsyncCtx14 + 12 | 0; //@line 27179
  HEAP32[$275 >> 2] = $269; //@line 27180
  sp = STACKTOP; //@line 27181
  return;
 } else {
  $276 = HEAP32[$271 >> 2] | 0; //@line 27184
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 27185
  FUNCTION_TABLE_vii[$276 & 31]($267, $269); //@line 27186
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 465; //@line 27189
   sp = STACKTOP; //@line 27190
   return;
  }
  ___async_unwind = 0; //@line 27193
  HEAP32[$ReallocAsyncCtx5 >> 2] = 465; //@line 27194
  sp = STACKTOP; //@line 27195
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_431($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $137 = 0, $139 = 0, $14 = 0, $140 = 0, $145 = 0, $147 = 0, $148 = 0, $149 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $234 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $245 = 0, $246 = 0, $248 = 0, $249 = 0, $250 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $262 = 0, $266 = 0, $267 = 0, $269 = 0, $270 = 0, $271 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $28 = 0, $30 = 0, $32 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $54 = 0, $6 = 0, $68 = 0, $72 = 0, $77 = 0, $8 = 0, $83 = 0, $84 = 0, $89 = 0, $93 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx19 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 25371
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25373
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25375
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25377
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25379
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25381
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25383
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25385
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 25387
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 25389
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 25391
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 25393
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 25395
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 25397
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 25399
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 25401
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 25403
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx19 = _emscripten_realloc_async_context(68) | 0; //@line 25408
  _mbed_assert_internal(12827, 12836, 194); //@line 25409
  if (___async) {
   HEAP32[$ReallocAsyncCtx19 >> 2] = 450; //@line 25412
   $35 = $ReallocAsyncCtx19 + 4 | 0; //@line 25413
   HEAP32[$35 >> 2] = $2; //@line 25414
   $36 = $ReallocAsyncCtx19 + 8 | 0; //@line 25415
   HEAP32[$36 >> 2] = $4; //@line 25416
   $37 = $ReallocAsyncCtx19 + 12 | 0; //@line 25417
   HEAP32[$37 >> 2] = $6; //@line 25418
   $38 = $ReallocAsyncCtx19 + 16 | 0; //@line 25419
   HEAP32[$38 >> 2] = $8; //@line 25420
   $39 = $ReallocAsyncCtx19 + 20 | 0; //@line 25421
   HEAP32[$39 >> 2] = $10; //@line 25422
   $40 = $ReallocAsyncCtx19 + 24 | 0; //@line 25423
   HEAP32[$40 >> 2] = $12; //@line 25424
   $41 = $ReallocAsyncCtx19 + 28 | 0; //@line 25425
   HEAP32[$41 >> 2] = $14; //@line 25426
   $42 = $ReallocAsyncCtx19 + 32 | 0; //@line 25427
   HEAP32[$42 >> 2] = $16; //@line 25428
   $43 = $ReallocAsyncCtx19 + 36 | 0; //@line 25429
   HEAP32[$43 >> 2] = $18; //@line 25430
   $44 = $ReallocAsyncCtx19 + 40 | 0; //@line 25431
   HEAP32[$44 >> 2] = $20; //@line 25432
   $45 = $ReallocAsyncCtx19 + 44 | 0; //@line 25433
   HEAP32[$45 >> 2] = $22; //@line 25434
   $46 = $ReallocAsyncCtx19 + 48 | 0; //@line 25435
   HEAP32[$46 >> 2] = $24; //@line 25436
   $47 = $ReallocAsyncCtx19 + 52 | 0; //@line 25437
   HEAP32[$47 >> 2] = $26; //@line 25438
   $48 = $ReallocAsyncCtx19 + 56 | 0; //@line 25439
   HEAP32[$48 >> 2] = $28; //@line 25440
   $49 = $ReallocAsyncCtx19 + 60 | 0; //@line 25441
   HEAP32[$49 >> 2] = $30; //@line 25442
   $50 = $ReallocAsyncCtx19 + 64 | 0; //@line 25443
   HEAP32[$50 >> 2] = $32; //@line 25444
   sp = STACKTOP; //@line 25445
   return;
  }
  ___async_unwind = 0; //@line 25448
  HEAP32[$ReallocAsyncCtx19 >> 2] = 450; //@line 25449
  $35 = $ReallocAsyncCtx19 + 4 | 0; //@line 25450
  HEAP32[$35 >> 2] = $2; //@line 25451
  $36 = $ReallocAsyncCtx19 + 8 | 0; //@line 25452
  HEAP32[$36 >> 2] = $4; //@line 25453
  $37 = $ReallocAsyncCtx19 + 12 | 0; //@line 25454
  HEAP32[$37 >> 2] = $6; //@line 25455
  $38 = $ReallocAsyncCtx19 + 16 | 0; //@line 25456
  HEAP32[$38 >> 2] = $8; //@line 25457
  $39 = $ReallocAsyncCtx19 + 20 | 0; //@line 25458
  HEAP32[$39 >> 2] = $10; //@line 25459
  $40 = $ReallocAsyncCtx19 + 24 | 0; //@line 25460
  HEAP32[$40 >> 2] = $12; //@line 25461
  $41 = $ReallocAsyncCtx19 + 28 | 0; //@line 25462
  HEAP32[$41 >> 2] = $14; //@line 25463
  $42 = $ReallocAsyncCtx19 + 32 | 0; //@line 25464
  HEAP32[$42 >> 2] = $16; //@line 25465
  $43 = $ReallocAsyncCtx19 + 36 | 0; //@line 25466
  HEAP32[$43 >> 2] = $18; //@line 25467
  $44 = $ReallocAsyncCtx19 + 40 | 0; //@line 25468
  HEAP32[$44 >> 2] = $20; //@line 25469
  $45 = $ReallocAsyncCtx19 + 44 | 0; //@line 25470
  HEAP32[$45 >> 2] = $22; //@line 25471
  $46 = $ReallocAsyncCtx19 + 48 | 0; //@line 25472
  HEAP32[$46 >> 2] = $24; //@line 25473
  $47 = $ReallocAsyncCtx19 + 52 | 0; //@line 25474
  HEAP32[$47 >> 2] = $26; //@line 25475
  $48 = $ReallocAsyncCtx19 + 56 | 0; //@line 25476
  HEAP32[$48 >> 2] = $28; //@line 25477
  $49 = $ReallocAsyncCtx19 + 60 | 0; //@line 25478
  HEAP32[$49 >> 2] = $30; //@line 25479
  $50 = $ReallocAsyncCtx19 + 64 | 0; //@line 25480
  HEAP32[$50 >> 2] = $32; //@line 25481
  sp = STACKTOP; //@line 25482
  return;
 }
 do {
  if (HEAP8[$4 >> 0] & 2) {
   $54 = $2 + 288 | 0; //@line 25490
   if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($54) | 0) + 10 >> 0] | 0)) {
    if ((HEAPU8[$2 + 895 >> 0] | 0) <= (HEAPU8[$2 + 894 >> 0] | 0)) {
     break;
    }
   }
   HEAP8[$2 + 377 >> 0] = 0; //@line 25506
   HEAP8[$30 >> 0] = 0; //@line 25507
   if (!(HEAP8[$2 + 370 >> 0] | 0)) {
    $68 = $2 + 956 | 0; //@line 25512
    HEAP32[$68 >> 2] = (HEAP32[$68 >> 2] | 0) + 1; //@line 25515
   }
   $72 = HEAP8[$2 + 895 >> 0] | 0; //@line 25518
   HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($54) | 0) + 11 >> 0] = $72; //@line 25521
   HEAP32[$16 >> 2] = HEAP32[$16 >> 2] & -2; //@line 25524
  }
 } while (0);
 $77 = $2 + 377 | 0; //@line 25527
 if (HEAP8[$77 >> 0] | 0) {
  if (!(HEAP32[$16 >> 2] & 16)) {
   HEAP8[$77 >> 0] = 0; //@line 25535
   $83 = $2 + 895 | 0; //@line 25536
   $84 = HEAP8[$83 >> 0] | 0; //@line 25537
   if (!(($84 & 255) < 9 ? ($84 & 255) < (HEAPU8[$2 + 894 >> 0] | 0) : 0)) {
    $114 = HEAP32[$2 >> 2] | 0; //@line 25544
    $117 = HEAP32[(HEAP32[$114 >> 2] | 0) + 16 >> 2] | 0; //@line 25547
    $ReallocAsyncCtx = _emscripten_realloc_async_context(68) | 0; //@line 25548
    FUNCTION_TABLE_vi[$117 & 1023]($114); //@line 25549
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 452; //@line 25552
     $118 = $ReallocAsyncCtx + 4 | 0; //@line 25553
     HEAP32[$118 >> 2] = $6; //@line 25554
     $119 = $ReallocAsyncCtx + 8 | 0; //@line 25555
     HEAP32[$119 >> 2] = $8; //@line 25556
     $120 = $ReallocAsyncCtx + 12 | 0; //@line 25557
     HEAP32[$120 >> 2] = $10; //@line 25558
     $121 = $ReallocAsyncCtx + 16 | 0; //@line 25559
     HEAP32[$121 >> 2] = $12; //@line 25560
     $122 = $ReallocAsyncCtx + 20 | 0; //@line 25561
     HEAP32[$122 >> 2] = $14; //@line 25562
     $123 = $ReallocAsyncCtx + 24 | 0; //@line 25563
     HEAP32[$123 >> 2] = $4; //@line 25564
     $124 = $ReallocAsyncCtx + 28 | 0; //@line 25565
     HEAP32[$124 >> 2] = $2; //@line 25566
     $125 = $ReallocAsyncCtx + 32 | 0; //@line 25567
     HEAP32[$125 >> 2] = $16; //@line 25568
     $126 = $ReallocAsyncCtx + 36 | 0; //@line 25569
     HEAP32[$126 >> 2] = $30; //@line 25570
     $127 = $ReallocAsyncCtx + 40 | 0; //@line 25571
     HEAP32[$127 >> 2] = $83; //@line 25572
     $128 = $ReallocAsyncCtx + 44 | 0; //@line 25573
     HEAP32[$128 >> 2] = $26; //@line 25574
     $129 = $ReallocAsyncCtx + 48 | 0; //@line 25575
     HEAP32[$129 >> 2] = $28; //@line 25576
     $130 = $ReallocAsyncCtx + 52 | 0; //@line 25577
     HEAP32[$130 >> 2] = $18; //@line 25578
     $131 = $ReallocAsyncCtx + 56 | 0; //@line 25579
     HEAP32[$131 >> 2] = $20; //@line 25580
     $132 = $ReallocAsyncCtx + 60 | 0; //@line 25581
     HEAP32[$132 >> 2] = $22; //@line 25582
     $133 = $ReallocAsyncCtx + 64 | 0; //@line 25583
     HEAP32[$133 >> 2] = $24; //@line 25584
     sp = STACKTOP; //@line 25585
     return;
    }
    ___async_unwind = 0; //@line 25588
    HEAP32[$ReallocAsyncCtx >> 2] = 452; //@line 25589
    $118 = $ReallocAsyncCtx + 4 | 0; //@line 25590
    HEAP32[$118 >> 2] = $6; //@line 25591
    $119 = $ReallocAsyncCtx + 8 | 0; //@line 25592
    HEAP32[$119 >> 2] = $8; //@line 25593
    $120 = $ReallocAsyncCtx + 12 | 0; //@line 25594
    HEAP32[$120 >> 2] = $10; //@line 25595
    $121 = $ReallocAsyncCtx + 16 | 0; //@line 25596
    HEAP32[$121 >> 2] = $12; //@line 25597
    $122 = $ReallocAsyncCtx + 20 | 0; //@line 25598
    HEAP32[$122 >> 2] = $14; //@line 25599
    $123 = $ReallocAsyncCtx + 24 | 0; //@line 25600
    HEAP32[$123 >> 2] = $4; //@line 25601
    $124 = $ReallocAsyncCtx + 28 | 0; //@line 25602
    HEAP32[$124 >> 2] = $2; //@line 25603
    $125 = $ReallocAsyncCtx + 32 | 0; //@line 25604
    HEAP32[$125 >> 2] = $16; //@line 25605
    $126 = $ReallocAsyncCtx + 36 | 0; //@line 25606
    HEAP32[$126 >> 2] = $30; //@line 25607
    $127 = $ReallocAsyncCtx + 40 | 0; //@line 25608
    HEAP32[$127 >> 2] = $83; //@line 25609
    $128 = $ReallocAsyncCtx + 44 | 0; //@line 25610
    HEAP32[$128 >> 2] = $26; //@line 25611
    $129 = $ReallocAsyncCtx + 48 | 0; //@line 25612
    HEAP32[$129 >> 2] = $28; //@line 25613
    $130 = $ReallocAsyncCtx + 52 | 0; //@line 25614
    HEAP32[$130 >> 2] = $18; //@line 25615
    $131 = $ReallocAsyncCtx + 56 | 0; //@line 25616
    HEAP32[$131 >> 2] = $20; //@line 25617
    $132 = $ReallocAsyncCtx + 60 | 0; //@line 25618
    HEAP32[$132 >> 2] = $22; //@line 25619
    $133 = $ReallocAsyncCtx + 64 | 0; //@line 25620
    HEAP32[$133 >> 2] = $24; //@line 25621
    sp = STACKTOP; //@line 25622
    return;
   }
   $89 = $84 + 1 << 24 >> 24; //@line 25625
   HEAP8[$83 >> 0] = $89; //@line 25626
   if ($89 & 1) {
    $93 = $2 + 1097 | 0; //@line 25631
    HEAP8[$93 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$2 >> 2] | 0, HEAP8[$93 >> 0] | 0) | 0; //@line 25634
   }
   $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 25636
   $96 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 25637
   if (___async) {
    HEAP32[$ReallocAsyncCtx9 >> 2] = 451; //@line 25640
    $97 = $ReallocAsyncCtx9 + 4 | 0; //@line 25641
    HEAP32[$97 >> 2] = $4; //@line 25642
    $98 = $ReallocAsyncCtx9 + 8 | 0; //@line 25643
    HEAP32[$98 >> 2] = $2; //@line 25644
    $99 = $ReallocAsyncCtx9 + 12 | 0; //@line 25645
    HEAP32[$99 >> 2] = $6; //@line 25646
    $100 = $ReallocAsyncCtx9 + 16 | 0; //@line 25647
    HEAP32[$100 >> 2] = $8; //@line 25648
    $101 = $ReallocAsyncCtx9 + 20 | 0; //@line 25649
    HEAP32[$101 >> 2] = $10; //@line 25650
    $102 = $ReallocAsyncCtx9 + 24 | 0; //@line 25651
    HEAP32[$102 >> 2] = $12; //@line 25652
    $103 = $ReallocAsyncCtx9 + 28 | 0; //@line 25653
    HEAP32[$103 >> 2] = $14; //@line 25654
    $104 = $ReallocAsyncCtx9 + 32 | 0; //@line 25655
    HEAP32[$104 >> 2] = $18; //@line 25656
    $105 = $ReallocAsyncCtx9 + 36 | 0; //@line 25657
    HEAP32[$105 >> 2] = $20; //@line 25658
    $106 = $ReallocAsyncCtx9 + 40 | 0; //@line 25659
    HEAP32[$106 >> 2] = $22; //@line 25660
    $107 = $ReallocAsyncCtx9 + 44 | 0; //@line 25661
    HEAP32[$107 >> 2] = $24; //@line 25662
    $108 = $ReallocAsyncCtx9 + 48 | 0; //@line 25663
    HEAP32[$108 >> 2] = $16; //@line 25664
    $109 = $ReallocAsyncCtx9 + 52 | 0; //@line 25665
    HEAP32[$109 >> 2] = $30; //@line 25666
    $110 = $ReallocAsyncCtx9 + 56 | 0; //@line 25667
    HEAP32[$110 >> 2] = $83; //@line 25668
    $111 = $ReallocAsyncCtx9 + 60 | 0; //@line 25669
    HEAP32[$111 >> 2] = $26; //@line 25670
    $112 = $ReallocAsyncCtx9 + 64 | 0; //@line 25671
    HEAP32[$112 >> 2] = $28; //@line 25672
    sp = STACKTOP; //@line 25673
    return;
   }
   HEAP32[___async_retval >> 2] = $96; //@line 25677
   ___async_unwind = 0; //@line 25678
   HEAP32[$ReallocAsyncCtx9 >> 2] = 451; //@line 25679
   $97 = $ReallocAsyncCtx9 + 4 | 0; //@line 25680
   HEAP32[$97 >> 2] = $4; //@line 25681
   $98 = $ReallocAsyncCtx9 + 8 | 0; //@line 25682
   HEAP32[$98 >> 2] = $2; //@line 25683
   $99 = $ReallocAsyncCtx9 + 12 | 0; //@line 25684
   HEAP32[$99 >> 2] = $6; //@line 25685
   $100 = $ReallocAsyncCtx9 + 16 | 0; //@line 25686
   HEAP32[$100 >> 2] = $8; //@line 25687
   $101 = $ReallocAsyncCtx9 + 20 | 0; //@line 25688
   HEAP32[$101 >> 2] = $10; //@line 25689
   $102 = $ReallocAsyncCtx9 + 24 | 0; //@line 25690
   HEAP32[$102 >> 2] = $12; //@line 25691
   $103 = $ReallocAsyncCtx9 + 28 | 0; //@line 25692
   HEAP32[$103 >> 2] = $14; //@line 25693
   $104 = $ReallocAsyncCtx9 + 32 | 0; //@line 25694
   HEAP32[$104 >> 2] = $18; //@line 25695
   $105 = $ReallocAsyncCtx9 + 36 | 0; //@line 25696
   HEAP32[$105 >> 2] = $20; //@line 25697
   $106 = $ReallocAsyncCtx9 + 40 | 0; //@line 25698
   HEAP32[$106 >> 2] = $22; //@line 25699
   $107 = $ReallocAsyncCtx9 + 44 | 0; //@line 25700
   HEAP32[$107 >> 2] = $24; //@line 25701
   $108 = $ReallocAsyncCtx9 + 48 | 0; //@line 25702
   HEAP32[$108 >> 2] = $16; //@line 25703
   $109 = $ReallocAsyncCtx9 + 52 | 0; //@line 25704
   HEAP32[$109 >> 2] = $30; //@line 25705
   $110 = $ReallocAsyncCtx9 + 56 | 0; //@line 25706
   HEAP32[$110 >> 2] = $83; //@line 25707
   $111 = $ReallocAsyncCtx9 + 60 | 0; //@line 25708
   HEAP32[$111 >> 2] = $26; //@line 25709
   $112 = $ReallocAsyncCtx9 + 64 | 0; //@line 25710
   HEAP32[$112 >> 2] = $28; //@line 25711
   sp = STACKTOP; //@line 25712
   return;
  }
 }
 $134 = HEAP32[$16 >> 2] | 0; //@line 25716
 $137 = $134 & -3; //@line 25719
 if (!($134 & 2)) {
  $139 = $134; //@line 25721
 } else {
  HEAP32[$16 >> 2] = $137; //@line 25723
  $139 = $137; //@line 25724
 }
 if ($139 | 0) {
  $224 = HEAP32[$26 >> 2] | 0; //@line 25728
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 25729
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($224, $28, 1e3); //@line 25730
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 458; //@line 25733
   $225 = $ReallocAsyncCtx8 + 4 | 0; //@line 25734
   HEAP32[$225 >> 2] = $4; //@line 25735
   $226 = $ReallocAsyncCtx8 + 8 | 0; //@line 25736
   HEAP32[$226 >> 2] = $2; //@line 25737
   $227 = $ReallocAsyncCtx8 + 12 | 0; //@line 25738
   HEAP32[$227 >> 2] = $6; //@line 25739
   $228 = $ReallocAsyncCtx8 + 16 | 0; //@line 25740
   HEAP32[$228 >> 2] = $8; //@line 25741
   $229 = $ReallocAsyncCtx8 + 20 | 0; //@line 25742
   HEAP32[$229 >> 2] = $10; //@line 25743
   $230 = $ReallocAsyncCtx8 + 24 | 0; //@line 25744
   HEAP32[$230 >> 2] = $12; //@line 25745
   $231 = $ReallocAsyncCtx8 + 28 | 0; //@line 25746
   HEAP32[$231 >> 2] = $14; //@line 25747
   sp = STACKTOP; //@line 25748
   return;
  }
  ___async_unwind = 0; //@line 25751
  HEAP32[$ReallocAsyncCtx8 >> 2] = 458; //@line 25752
  $225 = $ReallocAsyncCtx8 + 4 | 0; //@line 25753
  HEAP32[$225 >> 2] = $4; //@line 25754
  $226 = $ReallocAsyncCtx8 + 8 | 0; //@line 25755
  HEAP32[$226 >> 2] = $2; //@line 25756
  $227 = $ReallocAsyncCtx8 + 12 | 0; //@line 25757
  HEAP32[$227 >> 2] = $6; //@line 25758
  $228 = $ReallocAsyncCtx8 + 16 | 0; //@line 25759
  HEAP32[$228 >> 2] = $8; //@line 25760
  $229 = $ReallocAsyncCtx8 + 20 | 0; //@line 25761
  HEAP32[$229 >> 2] = $10; //@line 25762
  $230 = $ReallocAsyncCtx8 + 24 | 0; //@line 25763
  HEAP32[$230 >> 2] = $12; //@line 25764
  $231 = $ReallocAsyncCtx8 + 28 | 0; //@line 25765
  HEAP32[$231 >> 2] = $14; //@line 25766
  sp = STACKTOP; //@line 25767
  return;
 }
 $140 = HEAP8[$4 >> 0] | 0; //@line 25770
 if ($140 & 1) {
  HEAP8[$4 >> 0] = $140 & -2; //@line 25775
  $145 = HEAP32[$2 + 1324 >> 2] | 0; //@line 25777
  $147 = __ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0; //@line 25779
  $148 = $145 + 12 | 0; //@line 25780
  $149 = HEAP32[$148 >> 2] | 0; //@line 25781
  if (!$149) {
   $ReallocAsyncCtx18 = _emscripten_realloc_async_context(60) | 0; //@line 25784
   _mbed_assert_internal(14997, 15002, 1102); //@line 25785
   if (___async) {
    HEAP32[$ReallocAsyncCtx18 >> 2] = 453; //@line 25788
    $151 = $ReallocAsyncCtx18 + 4 | 0; //@line 25789
    HEAP32[$151 >> 2] = $148; //@line 25790
    $152 = $ReallocAsyncCtx18 + 8 | 0; //@line 25791
    HEAP32[$152 >> 2] = $4; //@line 25792
    $153 = $ReallocAsyncCtx18 + 12 | 0; //@line 25793
    HEAP32[$153 >> 2] = $2; //@line 25794
    $154 = $ReallocAsyncCtx18 + 16 | 0; //@line 25795
    HEAP32[$154 >> 2] = $6; //@line 25796
    $155 = $ReallocAsyncCtx18 + 20 | 0; //@line 25797
    HEAP32[$155 >> 2] = $8; //@line 25798
    $156 = $ReallocAsyncCtx18 + 24 | 0; //@line 25799
    HEAP32[$156 >> 2] = $10; //@line 25800
    $157 = $ReallocAsyncCtx18 + 28 | 0; //@line 25801
    HEAP32[$157 >> 2] = $12; //@line 25802
    $158 = $ReallocAsyncCtx18 + 32 | 0; //@line 25803
    HEAP32[$158 >> 2] = $14; //@line 25804
    $159 = $ReallocAsyncCtx18 + 36 | 0; //@line 25805
    HEAP32[$159 >> 2] = $18; //@line 25806
    $160 = $ReallocAsyncCtx18 + 40 | 0; //@line 25807
    HEAP32[$160 >> 2] = $20; //@line 25808
    $161 = $ReallocAsyncCtx18 + 44 | 0; //@line 25809
    HEAP32[$161 >> 2] = $22; //@line 25810
    $162 = $ReallocAsyncCtx18 + 48 | 0; //@line 25811
    HEAP32[$162 >> 2] = $24; //@line 25812
    $163 = $ReallocAsyncCtx18 + 52 | 0; //@line 25813
    HEAP32[$163 >> 2] = $145; //@line 25814
    $164 = $ReallocAsyncCtx18 + 56 | 0; //@line 25815
    HEAP32[$164 >> 2] = $147; //@line 25816
    sp = STACKTOP; //@line 25817
    return;
   }
   ___async_unwind = 0; //@line 25820
   HEAP32[$ReallocAsyncCtx18 >> 2] = 453; //@line 25821
   $151 = $ReallocAsyncCtx18 + 4 | 0; //@line 25822
   HEAP32[$151 >> 2] = $148; //@line 25823
   $152 = $ReallocAsyncCtx18 + 8 | 0; //@line 25824
   HEAP32[$152 >> 2] = $4; //@line 25825
   $153 = $ReallocAsyncCtx18 + 12 | 0; //@line 25826
   HEAP32[$153 >> 2] = $2; //@line 25827
   $154 = $ReallocAsyncCtx18 + 16 | 0; //@line 25828
   HEAP32[$154 >> 2] = $6; //@line 25829
   $155 = $ReallocAsyncCtx18 + 20 | 0; //@line 25830
   HEAP32[$155 >> 2] = $8; //@line 25831
   $156 = $ReallocAsyncCtx18 + 24 | 0; //@line 25832
   HEAP32[$156 >> 2] = $10; //@line 25833
   $157 = $ReallocAsyncCtx18 + 28 | 0; //@line 25834
   HEAP32[$157 >> 2] = $12; //@line 25835
   $158 = $ReallocAsyncCtx18 + 32 | 0; //@line 25836
   HEAP32[$158 >> 2] = $14; //@line 25837
   $159 = $ReallocAsyncCtx18 + 36 | 0; //@line 25838
   HEAP32[$159 >> 2] = $18; //@line 25839
   $160 = $ReallocAsyncCtx18 + 40 | 0; //@line 25840
   HEAP32[$160 >> 2] = $20; //@line 25841
   $161 = $ReallocAsyncCtx18 + 44 | 0; //@line 25842
   HEAP32[$161 >> 2] = $22; //@line 25843
   $162 = $ReallocAsyncCtx18 + 48 | 0; //@line 25844
   HEAP32[$162 >> 2] = $24; //@line 25845
   $163 = $ReallocAsyncCtx18 + 52 | 0; //@line 25846
   HEAP32[$163 >> 2] = $145; //@line 25847
   $164 = $ReallocAsyncCtx18 + 56 | 0; //@line 25848
   HEAP32[$164 >> 2] = $147; //@line 25849
   sp = STACKTOP; //@line 25850
   return;
  } else {
   $165 = HEAP32[$149 >> 2] | 0; //@line 25853
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(48) | 0; //@line 25854
   FUNCTION_TABLE_vii[$165 & 31]($145, $147); //@line 25855
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 454; //@line 25858
    $166 = $ReallocAsyncCtx2 + 4 | 0; //@line 25859
    HEAP32[$166 >> 2] = $6; //@line 25860
    $167 = $ReallocAsyncCtx2 + 8 | 0; //@line 25861
    HEAP32[$167 >> 2] = $8; //@line 25862
    $168 = $ReallocAsyncCtx2 + 12 | 0; //@line 25863
    HEAP32[$168 >> 2] = $10; //@line 25864
    $169 = $ReallocAsyncCtx2 + 16 | 0; //@line 25865
    HEAP32[$169 >> 2] = $12; //@line 25866
    $170 = $ReallocAsyncCtx2 + 20 | 0; //@line 25867
    HEAP32[$170 >> 2] = $14; //@line 25868
    $171 = $ReallocAsyncCtx2 + 24 | 0; //@line 25869
    HEAP32[$171 >> 2] = $4; //@line 25870
    $172 = $ReallocAsyncCtx2 + 28 | 0; //@line 25871
    HEAP32[$172 >> 2] = $2; //@line 25872
    $173 = $ReallocAsyncCtx2 + 32 | 0; //@line 25873
    HEAP32[$173 >> 2] = $18; //@line 25874
    $174 = $ReallocAsyncCtx2 + 36 | 0; //@line 25875
    HEAP32[$174 >> 2] = $20; //@line 25876
    $175 = $ReallocAsyncCtx2 + 40 | 0; //@line 25877
    HEAP32[$175 >> 2] = $22; //@line 25878
    $176 = $ReallocAsyncCtx2 + 44 | 0; //@line 25879
    HEAP32[$176 >> 2] = $24; //@line 25880
    sp = STACKTOP; //@line 25881
    return;
   }
   ___async_unwind = 0; //@line 25884
   HEAP32[$ReallocAsyncCtx2 >> 2] = 454; //@line 25885
   $166 = $ReallocAsyncCtx2 + 4 | 0; //@line 25886
   HEAP32[$166 >> 2] = $6; //@line 25887
   $167 = $ReallocAsyncCtx2 + 8 | 0; //@line 25888
   HEAP32[$167 >> 2] = $8; //@line 25889
   $168 = $ReallocAsyncCtx2 + 12 | 0; //@line 25890
   HEAP32[$168 >> 2] = $10; //@line 25891
   $169 = $ReallocAsyncCtx2 + 16 | 0; //@line 25892
   HEAP32[$169 >> 2] = $12; //@line 25893
   $170 = $ReallocAsyncCtx2 + 20 | 0; //@line 25894
   HEAP32[$170 >> 2] = $14; //@line 25895
   $171 = $ReallocAsyncCtx2 + 24 | 0; //@line 25896
   HEAP32[$171 >> 2] = $4; //@line 25897
   $172 = $ReallocAsyncCtx2 + 28 | 0; //@line 25898
   HEAP32[$172 >> 2] = $2; //@line 25899
   $173 = $ReallocAsyncCtx2 + 32 | 0; //@line 25900
   HEAP32[$173 >> 2] = $18; //@line 25901
   $174 = $ReallocAsyncCtx2 + 36 | 0; //@line 25902
   HEAP32[$174 >> 2] = $20; //@line 25903
   $175 = $ReallocAsyncCtx2 + 40 | 0; //@line 25904
   HEAP32[$175 >> 2] = $22; //@line 25905
   $176 = $ReallocAsyncCtx2 + 44 | 0; //@line 25906
   HEAP32[$176 >> 2] = $24; //@line 25907
   sp = STACKTOP; //@line 25908
   return;
  }
 }
 if ($140 & 8) {
  HEAP8[$4 >> 0] = $140 & -9; //@line 25916
  $181 = HEAP32[$2 + 1324 >> 2] | 0; //@line 25918
  $182 = $181 + 32 | 0; //@line 25919
  $184 = __ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0; //@line 25921
  $185 = $181 + 44 | 0; //@line 25922
  $186 = HEAP32[$185 >> 2] | 0; //@line 25923
  if (!$186) {
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(60) | 0; //@line 25926
   _mbed_assert_internal(14997, 15002, 1102); //@line 25927
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 455; //@line 25930
    $188 = $ReallocAsyncCtx17 + 4 | 0; //@line 25931
    HEAP32[$188 >> 2] = $4; //@line 25932
    $189 = $ReallocAsyncCtx17 + 8 | 0; //@line 25933
    HEAP32[$189 >> 2] = $2; //@line 25934
    $190 = $ReallocAsyncCtx17 + 12 | 0; //@line 25935
    HEAP32[$190 >> 2] = $6; //@line 25936
    $191 = $ReallocAsyncCtx17 + 16 | 0; //@line 25937
    HEAP32[$191 >> 2] = $8; //@line 25938
    $192 = $ReallocAsyncCtx17 + 20 | 0; //@line 25939
    HEAP32[$192 >> 2] = $10; //@line 25940
    $193 = $ReallocAsyncCtx17 + 24 | 0; //@line 25941
    HEAP32[$193 >> 2] = $12; //@line 25942
    $194 = $ReallocAsyncCtx17 + 28 | 0; //@line 25943
    HEAP32[$194 >> 2] = $14; //@line 25944
    $195 = $ReallocAsyncCtx17 + 32 | 0; //@line 25945
    HEAP32[$195 >> 2] = $18; //@line 25946
    $196 = $ReallocAsyncCtx17 + 36 | 0; //@line 25947
    HEAP32[$196 >> 2] = $20; //@line 25948
    $197 = $ReallocAsyncCtx17 + 40 | 0; //@line 25949
    HEAP32[$197 >> 2] = $22; //@line 25950
    $198 = $ReallocAsyncCtx17 + 44 | 0; //@line 25951
    HEAP32[$198 >> 2] = $24; //@line 25952
    $199 = $ReallocAsyncCtx17 + 48 | 0; //@line 25953
    HEAP32[$199 >> 2] = $185; //@line 25954
    $200 = $ReallocAsyncCtx17 + 52 | 0; //@line 25955
    HEAP32[$200 >> 2] = $182; //@line 25956
    $201 = $ReallocAsyncCtx17 + 56 | 0; //@line 25957
    HEAP32[$201 >> 2] = $184; //@line 25958
    sp = STACKTOP; //@line 25959
    return;
   }
   ___async_unwind = 0; //@line 25962
   HEAP32[$ReallocAsyncCtx17 >> 2] = 455; //@line 25963
   $188 = $ReallocAsyncCtx17 + 4 | 0; //@line 25964
   HEAP32[$188 >> 2] = $4; //@line 25965
   $189 = $ReallocAsyncCtx17 + 8 | 0; //@line 25966
   HEAP32[$189 >> 2] = $2; //@line 25967
   $190 = $ReallocAsyncCtx17 + 12 | 0; //@line 25968
   HEAP32[$190 >> 2] = $6; //@line 25969
   $191 = $ReallocAsyncCtx17 + 16 | 0; //@line 25970
   HEAP32[$191 >> 2] = $8; //@line 25971
   $192 = $ReallocAsyncCtx17 + 20 | 0; //@line 25972
   HEAP32[$192 >> 2] = $10; //@line 25973
   $193 = $ReallocAsyncCtx17 + 24 | 0; //@line 25974
   HEAP32[$193 >> 2] = $12; //@line 25975
   $194 = $ReallocAsyncCtx17 + 28 | 0; //@line 25976
   HEAP32[$194 >> 2] = $14; //@line 25977
   $195 = $ReallocAsyncCtx17 + 32 | 0; //@line 25978
   HEAP32[$195 >> 2] = $18; //@line 25979
   $196 = $ReallocAsyncCtx17 + 36 | 0; //@line 25980
   HEAP32[$196 >> 2] = $20; //@line 25981
   $197 = $ReallocAsyncCtx17 + 40 | 0; //@line 25982
   HEAP32[$197 >> 2] = $22; //@line 25983
   $198 = $ReallocAsyncCtx17 + 44 | 0; //@line 25984
   HEAP32[$198 >> 2] = $24; //@line 25985
   $199 = $ReallocAsyncCtx17 + 48 | 0; //@line 25986
   HEAP32[$199 >> 2] = $185; //@line 25987
   $200 = $ReallocAsyncCtx17 + 52 | 0; //@line 25988
   HEAP32[$200 >> 2] = $182; //@line 25989
   $201 = $ReallocAsyncCtx17 + 56 | 0; //@line 25990
   HEAP32[$201 >> 2] = $184; //@line 25991
   sp = STACKTOP; //@line 25992
   return;
  } else {
   $202 = HEAP32[$186 >> 2] | 0; //@line 25995
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 25996
   FUNCTION_TABLE_vii[$202 & 31]($182, $184); //@line 25997
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 456; //@line 26000
    $203 = $ReallocAsyncCtx3 + 4 | 0; //@line 26001
    HEAP32[$203 >> 2] = $6; //@line 26002
    $204 = $ReallocAsyncCtx3 + 8 | 0; //@line 26003
    HEAP32[$204 >> 2] = $8; //@line 26004
    $205 = $ReallocAsyncCtx3 + 12 | 0; //@line 26005
    HEAP32[$205 >> 2] = $10; //@line 26006
    $206 = $ReallocAsyncCtx3 + 16 | 0; //@line 26007
    HEAP32[$206 >> 2] = $12; //@line 26008
    $207 = $ReallocAsyncCtx3 + 20 | 0; //@line 26009
    HEAP32[$207 >> 2] = $14; //@line 26010
    $208 = $ReallocAsyncCtx3 + 24 | 0; //@line 26011
    HEAP32[$208 >> 2] = $4; //@line 26012
    $209 = $ReallocAsyncCtx3 + 28 | 0; //@line 26013
    HEAP32[$209 >> 2] = $2; //@line 26014
    $210 = $ReallocAsyncCtx3 + 32 | 0; //@line 26015
    HEAP32[$210 >> 2] = $18; //@line 26016
    $211 = $ReallocAsyncCtx3 + 36 | 0; //@line 26017
    HEAP32[$211 >> 2] = $20; //@line 26018
    $212 = $ReallocAsyncCtx3 + 40 | 0; //@line 26019
    HEAP32[$212 >> 2] = $22; //@line 26020
    $213 = $ReallocAsyncCtx3 + 44 | 0; //@line 26021
    HEAP32[$213 >> 2] = $24; //@line 26022
    sp = STACKTOP; //@line 26023
    return;
   }
   ___async_unwind = 0; //@line 26026
   HEAP32[$ReallocAsyncCtx3 >> 2] = 456; //@line 26027
   $203 = $ReallocAsyncCtx3 + 4 | 0; //@line 26028
   HEAP32[$203 >> 2] = $6; //@line 26029
   $204 = $ReallocAsyncCtx3 + 8 | 0; //@line 26030
   HEAP32[$204 >> 2] = $8; //@line 26031
   $205 = $ReallocAsyncCtx3 + 12 | 0; //@line 26032
   HEAP32[$205 >> 2] = $10; //@line 26033
   $206 = $ReallocAsyncCtx3 + 16 | 0; //@line 26034
   HEAP32[$206 >> 2] = $12; //@line 26035
   $207 = $ReallocAsyncCtx3 + 20 | 0; //@line 26036
   HEAP32[$207 >> 2] = $14; //@line 26037
   $208 = $ReallocAsyncCtx3 + 24 | 0; //@line 26038
   HEAP32[$208 >> 2] = $4; //@line 26039
   $209 = $ReallocAsyncCtx3 + 28 | 0; //@line 26040
   HEAP32[$209 >> 2] = $2; //@line 26041
   $210 = $ReallocAsyncCtx3 + 32 | 0; //@line 26042
   HEAP32[$210 >> 2] = $18; //@line 26043
   $211 = $ReallocAsyncCtx3 + 36 | 0; //@line 26044
   HEAP32[$211 >> 2] = $20; //@line 26045
   $212 = $ReallocAsyncCtx3 + 40 | 0; //@line 26046
   HEAP32[$212 >> 2] = $22; //@line 26047
   $213 = $ReallocAsyncCtx3 + 44 | 0; //@line 26048
   HEAP32[$213 >> 2] = $24; //@line 26049
   sp = STACKTOP; //@line 26050
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($2 + 4 | 0) | 0) {
  _printf(12943, $18) | 0; //@line 26057
  _printf(13090, $22) | 0; //@line 26058
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 26059
  _putchar(10) | 0; //@line 26060
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 457; //@line 26063
   $216 = $ReallocAsyncCtx7 + 4 | 0; //@line 26064
   HEAP32[$216 >> 2] = $4; //@line 26065
   $217 = $ReallocAsyncCtx7 + 8 | 0; //@line 26066
   HEAP32[$217 >> 2] = $2; //@line 26067
   $218 = $ReallocAsyncCtx7 + 12 | 0; //@line 26068
   HEAP32[$218 >> 2] = $6; //@line 26069
   $219 = $ReallocAsyncCtx7 + 16 | 0; //@line 26070
   HEAP32[$219 >> 2] = $8; //@line 26071
   $220 = $ReallocAsyncCtx7 + 20 | 0; //@line 26072
   HEAP32[$220 >> 2] = $10; //@line 26073
   $221 = $ReallocAsyncCtx7 + 24 | 0; //@line 26074
   HEAP32[$221 >> 2] = $12; //@line 26075
   $222 = $ReallocAsyncCtx7 + 28 | 0; //@line 26076
   HEAP32[$222 >> 2] = $14; //@line 26077
   sp = STACKTOP; //@line 26078
   return;
  }
  ___async_unwind = 0; //@line 26081
  HEAP32[$ReallocAsyncCtx7 >> 2] = 457; //@line 26082
  $216 = $ReallocAsyncCtx7 + 4 | 0; //@line 26083
  HEAP32[$216 >> 2] = $4; //@line 26084
  $217 = $ReallocAsyncCtx7 + 8 | 0; //@line 26085
  HEAP32[$217 >> 2] = $2; //@line 26086
  $218 = $ReallocAsyncCtx7 + 12 | 0; //@line 26087
  HEAP32[$218 >> 2] = $6; //@line 26088
  $219 = $ReallocAsyncCtx7 + 16 | 0; //@line 26089
  HEAP32[$219 >> 2] = $8; //@line 26090
  $220 = $ReallocAsyncCtx7 + 20 | 0; //@line 26091
  HEAP32[$220 >> 2] = $10; //@line 26092
  $221 = $ReallocAsyncCtx7 + 24 | 0; //@line 26093
  HEAP32[$221 >> 2] = $12; //@line 26094
  $222 = $ReallocAsyncCtx7 + 28 | 0; //@line 26095
  HEAP32[$222 >> 2] = $14; //@line 26096
  sp = STACKTOP; //@line 26097
  return;
 }
 $223 = HEAP8[$4 >> 0] & -33; //@line 26101
 HEAP8[$4 >> 0] = $223; //@line 26102
 do {
  if (!($223 & 2)) {
   $262 = $223; //@line 26107
  } else {
   $234 = $223 & -3; //@line 26109
   HEAP8[$4 >> 0] = $234; //@line 26110
   if ((HEAP32[$2 + 360 >> 2] | 0) == 2) {
    _printf(12943, $8) | 0; //@line 26115
    _printf(12970, $12) | 0; //@line 26116
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 26117
    _putchar(10) | 0; //@line 26118
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 459; //@line 26121
     $238 = $ReallocAsyncCtx6 + 4 | 0; //@line 26122
     HEAP32[$238 >> 2] = $4; //@line 26123
     $239 = $ReallocAsyncCtx6 + 8 | 0; //@line 26124
     HEAP32[$239 >> 2] = $2; //@line 26125
     $240 = $ReallocAsyncCtx6 + 12 | 0; //@line 26126
     HEAP32[$240 >> 2] = $6; //@line 26127
     $241 = $ReallocAsyncCtx6 + 16 | 0; //@line 26128
     HEAP32[$241 >> 2] = $6; //@line 26129
     sp = STACKTOP; //@line 26130
     return;
    }
    ___async_unwind = 0; //@line 26133
    HEAP32[$ReallocAsyncCtx6 >> 2] = 459; //@line 26134
    $238 = $ReallocAsyncCtx6 + 4 | 0; //@line 26135
    HEAP32[$238 >> 2] = $4; //@line 26136
    $239 = $ReallocAsyncCtx6 + 8 | 0; //@line 26137
    HEAP32[$239 >> 2] = $2; //@line 26138
    $240 = $ReallocAsyncCtx6 + 12 | 0; //@line 26139
    HEAP32[$240 >> 2] = $6; //@line 26140
    $241 = $ReallocAsyncCtx6 + 16 | 0; //@line 26141
    HEAP32[$241 >> 2] = $6; //@line 26142
    sp = STACKTOP; //@line 26143
    return;
   }
   if ($234 & 4) {
    $260 = $234 & -5; //@line 26149
    HEAP8[$4 >> 0] = $260; //@line 26150
    $262 = $260; //@line 26151
    break;
   }
   $245 = HEAP32[$2 + 1324 >> 2] | 0; //@line 26155
   $246 = $245 + 16 | 0; //@line 26156
   $248 = __ZN11LoRaMacMcps14get_indicationEv($2 + 288 | 0) | 0; //@line 26158
   $249 = $245 + 28 | 0; //@line 26159
   $250 = HEAP32[$249 >> 2] | 0; //@line 26160
   if (!$250) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 26163
    _mbed_assert_internal(14997, 15002, 1102); //@line 26164
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 462; //@line 26167
     $252 = $ReallocAsyncCtx15 + 4 | 0; //@line 26168
     HEAP32[$252 >> 2] = $249; //@line 26169
     $253 = $ReallocAsyncCtx15 + 8 | 0; //@line 26170
     HEAP32[$253 >> 2] = $246; //@line 26171
     $254 = $ReallocAsyncCtx15 + 12 | 0; //@line 26172
     HEAP32[$254 >> 2] = $248; //@line 26173
     $255 = $ReallocAsyncCtx15 + 16 | 0; //@line 26174
     HEAP32[$255 >> 2] = $4; //@line 26175
     $256 = $ReallocAsyncCtx15 + 20 | 0; //@line 26176
     HEAP32[$256 >> 2] = $2; //@line 26177
     sp = STACKTOP; //@line 26178
     return;
    }
    ___async_unwind = 0; //@line 26181
    HEAP32[$ReallocAsyncCtx15 >> 2] = 462; //@line 26182
    $252 = $ReallocAsyncCtx15 + 4 | 0; //@line 26183
    HEAP32[$252 >> 2] = $249; //@line 26184
    $253 = $ReallocAsyncCtx15 + 8 | 0; //@line 26185
    HEAP32[$253 >> 2] = $246; //@line 26186
    $254 = $ReallocAsyncCtx15 + 12 | 0; //@line 26187
    HEAP32[$254 >> 2] = $248; //@line 26188
    $255 = $ReallocAsyncCtx15 + 16 | 0; //@line 26189
    HEAP32[$255 >> 2] = $4; //@line 26190
    $256 = $ReallocAsyncCtx15 + 20 | 0; //@line 26191
    HEAP32[$256 >> 2] = $2; //@line 26192
    sp = STACKTOP; //@line 26193
    return;
   } else {
    $257 = HEAP32[$250 >> 2] | 0; //@line 26196
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 26197
    FUNCTION_TABLE_vii[$257 & 31]($246, $248); //@line 26198
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 463; //@line 26201
     $258 = $ReallocAsyncCtx4 + 4 | 0; //@line 26202
     HEAP32[$258 >> 2] = $4; //@line 26203
     $259 = $ReallocAsyncCtx4 + 8 | 0; //@line 26204
     HEAP32[$259 >> 2] = $2; //@line 26205
     sp = STACKTOP; //@line 26206
     return;
    }
    ___async_unwind = 0; //@line 26209
    HEAP32[$ReallocAsyncCtx4 >> 2] = 463; //@line 26210
    $258 = $ReallocAsyncCtx4 + 4 | 0; //@line 26211
    HEAP32[$258 >> 2] = $4; //@line 26212
    $259 = $ReallocAsyncCtx4 + 8 | 0; //@line 26213
    HEAP32[$259 >> 2] = $2; //@line 26214
    sp = STACKTOP; //@line 26215
    return;
   }
  }
 } while (0);
 if (!($262 & 16)) {
  return;
 }
 HEAP8[$4 >> 0] = $262 & -17; //@line 26226
 $266 = HEAP32[$2 + 1324 >> 2] | 0; //@line 26228
 $267 = $266 + 48 | 0; //@line 26229
 $269 = __ZN11LoRaMacMlme14get_indicationEv($2 + 264 | 0) | 0; //@line 26231
 $270 = $266 + 60 | 0; //@line 26232
 $271 = HEAP32[$270 >> 2] | 0; //@line 26233
 if (!$271) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 26236
  _mbed_assert_internal(14997, 15002, 1102); //@line 26237
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 464; //@line 26240
   $273 = $ReallocAsyncCtx14 + 4 | 0; //@line 26241
   HEAP32[$273 >> 2] = $270; //@line 26242
   $274 = $ReallocAsyncCtx14 + 8 | 0; //@line 26243
   HEAP32[$274 >> 2] = $267; //@line 26244
   $275 = $ReallocAsyncCtx14 + 12 | 0; //@line 26245
   HEAP32[$275 >> 2] = $269; //@line 26246
   sp = STACKTOP; //@line 26247
   return;
  }
  ___async_unwind = 0; //@line 26250
  HEAP32[$ReallocAsyncCtx14 >> 2] = 464; //@line 26251
  $273 = $ReallocAsyncCtx14 + 4 | 0; //@line 26252
  HEAP32[$273 >> 2] = $270; //@line 26253
  $274 = $ReallocAsyncCtx14 + 8 | 0; //@line 26254
  HEAP32[$274 >> 2] = $267; //@line 26255
  $275 = $ReallocAsyncCtx14 + 12 | 0; //@line 26256
  HEAP32[$275 >> 2] = $269; //@line 26257
  sp = STACKTOP; //@line 26258
  return;
 } else {
  $276 = HEAP32[$271 >> 2] | 0; //@line 26261
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 26262
  FUNCTION_TABLE_vii[$276 & 31]($267, $269); //@line 26263
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 465; //@line 26266
   sp = STACKTOP; //@line 26267
   return;
  }
  ___async_unwind = 0; //@line 26270
  HEAP32[$ReallocAsyncCtx5 >> 2] = 465; //@line 26271
  sp = STACKTOP; //@line 26272
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy98 = 0, $$pre20 = 0, $1 = 0, $119 = 0, $124 = 0, $130 = 0, $136 = 0, $143 = 0, $144 = 0, $181 = 0, $19 = 0, $192 = 0, $196 = 0, $2 = 0, $20 = 0, $200 = 0, $205 = 0, $211 = 0, $212 = 0, $217 = 0, $221 = 0, $224 = 0, $23 = 0, $244 = 0, $252 = 0, $256 = 0, $262 = 0, $265 = 0, $268 = 0, $288 = 0, $29 = 0, $291 = 0, $297 = 0, $3 = 0, $300 = 0, $303 = 0, $305 = 0, $306 = 0, $311 = 0, $313 = 0, $314 = 0, $315 = 0, $331 = 0, $332 = 0, $345 = 0, $349 = 0, $350 = 0, $352 = 0, $353 = 0, $354 = 0, $370 = 0, $371 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $4 = 0, $407 = 0, $409 = 0, $418 = 0, $419 = 0, $429 = 0, $43 = 0, $432 = 0, $433 = 0, $435 = 0, $436 = 0, $437 = 0, $444 = 0, $445 = 0, $448 = 0, $449 = 0, $451 = 0, $455 = 0, $456 = 0, $458 = 0, $459 = 0, $460 = 0, $465 = 0, $466 = 0, $51 = 0, $54 = 0, $59 = 0, $63 = 0, $64 = 0, $84 = 0, $85 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx21 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx33 = 0, $AsyncCtx36 = 0, $AsyncCtx40 = 0, $AsyncCtx44 = 0, $AsyncCtx48 = 0, $AsyncCtx52 = 0, $AsyncCtx56 = 0, $AsyncCtx60 = 0, $AsyncCtx64 = 0, $AsyncCtx68 = 0, $AsyncCtx72 = 0, $AsyncCtx76 = 0, $AsyncCtx8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13954
 STACKTOP = STACKTOP + 48 | 0; //@line 13955
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 13955
 $$byval_copy98 = sp + 40 | 0; //@line 13956
 $vararg_buffer5 = sp + 24 | 0; //@line 13957
 $vararg_buffer3 = sp + 16 | 0; //@line 13958
 $vararg_buffer1 = sp + 8 | 0; //@line 13959
 $vararg_buffer = sp; //@line 13960
 $1 = sp + 32 | 0; //@line 13961
 $2 = $0 + 356 | 0; //@line 13962
 $3 = HEAP32[$2 >> 2] | 0; //@line 13963
 $4 = $0 + 996 | 0; //@line 13964
 $AsyncCtx48 = _emscripten_alloc_async_context(60, sp) | 0; //@line 13965
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($3, $4); //@line 13966
 if (___async) {
  HEAP32[$AsyncCtx48 >> 2] = 445; //@line 13969
  HEAP32[$AsyncCtx48 + 4 >> 2] = $0; //@line 13971
  HEAP32[$AsyncCtx48 + 8 >> 2] = $1; //@line 13973
  HEAP32[$AsyncCtx48 + 12 >> 2] = $vararg_buffer3; //@line 13975
  HEAP32[$AsyncCtx48 + 16 >> 2] = $vararg_buffer3; //@line 13977
  HEAP32[$AsyncCtx48 + 20 >> 2] = $vararg_buffer5; //@line 13979
  HEAP32[$AsyncCtx48 + 24 >> 2] = $vararg_buffer5; //@line 13981
  HEAP32[$AsyncCtx48 + 28 >> 2] = $vararg_buffer; //@line 13983
  HEAP32[$AsyncCtx48 + 32 >> 2] = $vararg_buffer; //@line 13985
  HEAP32[$AsyncCtx48 + 36 >> 2] = $vararg_buffer1; //@line 13987
  HEAP32[$AsyncCtx48 + 40 >> 2] = $vararg_buffer1; //@line 13989
  HEAP32[$AsyncCtx48 + 44 >> 2] = $2; //@line 13991
  HEAP32[$AsyncCtx48 + 48 >> 2] = $4; //@line 13993
  HEAP32[$AsyncCtx48 + 52 >> 2] = $1; //@line 13995
  HEAP32[$AsyncCtx48 + 56 >> 2] = $1; //@line 13997
  sp = STACKTOP; //@line 13998
  STACKTOP = sp; //@line 13999
  return;
 }
 _emscripten_free_async_context($AsyncCtx48 | 0); //@line 14001
 $19 = $0 + 944 | 0; //@line 14002
 $20 = HEAP8[$19 >> 0] | 0; //@line 14003
 $$pre20 = $0 + 968 | 0; //@line 14006
 do {
  if ($20 & 32) {
   $23 = HEAP32[$$pre20 >> 2] | 0; //@line 14009
   if ($23 & 64 | 0) {
    HEAP32[$$pre20 >> 2] = $23 & -66; //@line 14014
   }
   do {
    if (!($20 & 9)) {
     label = 10; //@line 14020
    } else {
     $29 = $0 + 288 | 0; //@line 14022
     if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 4 >> 2] | 0) != 2) {
      if ((HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] | 0) != 2) {
       label = 10; //@line 14034
       break;
      }
     }
     HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 14040
     __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 4 | 0); //@line 14042
     $43 = HEAP8[$0 + 895 >> 0] | 0; //@line 14044
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 11 >> 0] = $43; //@line 14047
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 10 >> 0] = 0; //@line 14050
     HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($29) | 0) + 12 >> 2] = 0; //@line 14053
     $192 = $0 + 373 | 0; //@line 14055
    }
   } while (0);
   do {
    if ((label | 0) == 10) {
     $51 = $0 + 373 | 0; //@line 14060
     if (!(HEAP8[$51 >> 0] | 0)) {
      $54 = HEAP8[$19 >> 0] | 0; //@line 14064
      if (!($54 & 9)) {
       $192 = $51; //@line 14068
      } else {
       if ($54 & 8) {
        $59 = $0 + 264 | 0; //@line 14073
        if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($59) | 0) >> 2] | 0)) {
         $63 = $0 + 897 | 0; //@line 14078
         $64 = HEAP8[$63 >> 0] | 0; //@line 14079
         HEAP8[(__ZN11LoRaMacMlme16get_confirmationEv($59) | 0) + 14 >> 0] = $64; //@line 14082
         if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($59) | 0) + 4 >> 2] | 0)) {
          HEAP32[$0 + 956 >> 2] = 0; //@line 14089
          HEAP8[$0 + 380 >> 0] = 0; //@line 14091
          HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 14094
          $192 = $51; //@line 14095
          break;
         }
         if ((HEAPU8[$63 >> 0] | 0) >= (HEAPU8[$0 + 896 >> 0] | 0)) {
          HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 14105
          $192 = $51; //@line 14106
          break;
         }
         HEAP8[$19 >> 0] = HEAP8[$19 >> 0] & -33; //@line 14111
         $84 = HEAP32[$0 + 1328 >> 2] | 0; //@line 14113
         HEAP32[$1 >> 2] = 446; //@line 14114
         HEAP32[$1 + 4 >> 2] = 0; //@line 14116
         $AsyncCtx44 = _emscripten_alloc_async_context(68, sp) | 0; //@line 14117
         HEAP32[$$byval_copy98 >> 2] = HEAP32[$1 >> 2]; //@line 14118
         HEAP32[$$byval_copy98 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 14118
         $85 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($84, $0, $$byval_copy98) | 0; //@line 14119
         if (___async) {
          HEAP32[$AsyncCtx44 >> 2] = 447; //@line 14122
          HEAP32[$AsyncCtx44 + 4 >> 2] = $0; //@line 14124
          HEAP32[$AsyncCtx44 + 8 >> 2] = $19; //@line 14126
          HEAP32[$AsyncCtx44 + 12 >> 2] = $1; //@line 14128
          HEAP32[$AsyncCtx44 + 16 >> 2] = $vararg_buffer3; //@line 14130
          HEAP32[$AsyncCtx44 + 20 >> 2] = $vararg_buffer3; //@line 14132
          HEAP32[$AsyncCtx44 + 24 >> 2] = $vararg_buffer5; //@line 14134
          HEAP32[$AsyncCtx44 + 28 >> 2] = $vararg_buffer5; //@line 14136
          HEAP32[$AsyncCtx44 + 32 >> 2] = $$pre20; //@line 14138
          HEAP32[$AsyncCtx44 + 36 >> 2] = $vararg_buffer; //@line 14140
          HEAP32[$AsyncCtx44 + 40 >> 2] = $vararg_buffer; //@line 14142
          HEAP32[$AsyncCtx44 + 44 >> 2] = $vararg_buffer1; //@line 14144
          HEAP32[$AsyncCtx44 + 48 >> 2] = $vararg_buffer1; //@line 14146
          HEAP32[$AsyncCtx44 + 52 >> 2] = $1; //@line 14148
          HEAP32[$AsyncCtx44 + 56 >> 2] = $2; //@line 14150
          HEAP32[$AsyncCtx44 + 60 >> 2] = $4; //@line 14152
          HEAP32[$AsyncCtx44 + 64 >> 2] = $51; //@line 14154
          sp = STACKTOP; //@line 14155
          STACKTOP = sp; //@line 14156
          return;
         }
         _emscripten_free_async_context($AsyncCtx44 | 0); //@line 14158
         do {
          if (!$85) {
           $AsyncCtx76 = _emscripten_alloc_async_context(68, sp) | 0; //@line 14162
           _mbed_assert_internal(12827, 12836, 194); //@line 14163
           if (___async) {
            HEAP32[$AsyncCtx76 >> 2] = 448; //@line 14166
            HEAP32[$AsyncCtx76 + 4 >> 2] = $0; //@line 14168
            HEAP32[$AsyncCtx76 + 8 >> 2] = $19; //@line 14170
            HEAP32[$AsyncCtx76 + 12 >> 2] = $1; //@line 14172
            HEAP32[$AsyncCtx76 + 16 >> 2] = $vararg_buffer3; //@line 14174
            HEAP32[$AsyncCtx76 + 20 >> 2] = $vararg_buffer3; //@line 14176
            HEAP32[$AsyncCtx76 + 24 >> 2] = $vararg_buffer5; //@line 14178
            HEAP32[$AsyncCtx76 + 28 >> 2] = $vararg_buffer5; //@line 14180
            HEAP32[$AsyncCtx76 + 32 >> 2] = $$pre20; //@line 14182
            HEAP32[$AsyncCtx76 + 36 >> 2] = $vararg_buffer; //@line 14184
            HEAP32[$AsyncCtx76 + 40 >> 2] = $vararg_buffer; //@line 14186
            HEAP32[$AsyncCtx76 + 44 >> 2] = $vararg_buffer1; //@line 14188
            HEAP32[$AsyncCtx76 + 48 >> 2] = $vararg_buffer1; //@line 14190
            HEAP32[$AsyncCtx76 + 52 >> 2] = $1; //@line 14192
            HEAP32[$AsyncCtx76 + 56 >> 2] = $2; //@line 14194
            HEAP32[$AsyncCtx76 + 60 >> 2] = $4; //@line 14196
            HEAP32[$AsyncCtx76 + 64 >> 2] = $51; //@line 14198
            sp = STACKTOP; //@line 14199
            STACKTOP = sp; //@line 14200
            return;
           } else {
            _emscripten_free_async_context($AsyncCtx76 | 0); //@line 14202
            break;
           }
          }
         } while (0);
         $192 = $51; //@line 14207
         break;
        }
       }
       $119 = $0 + 380 | 0; //@line 14211
       $124 = HEAP8[$19 >> 0] | 0; //@line 14216
       if (!(($124 & 2) == 0 ? (HEAPU8[$119 >> 0] | 0) < (HEAPU8[$0 + 1128 >> 0] | 0) : 0)) {
        if (!($124 & 2)) {
         __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 4 | 0); //@line 14225
         $130 = $0 + 964 | 0; //@line 14226
         HEAP32[$130 >> 2] = (HEAP32[$130 >> 2] | 0) + 1; //@line 14229
        }
        HEAP8[$119 >> 0] = 0; //@line 14231
        if (!(HEAP8[$0 + 370 >> 0] | 0)) {
         $136 = $0 + 956 | 0; //@line 14236
         HEAP32[$136 >> 2] = (HEAP32[$136 >> 2] | 0) + 1; //@line 14239
        }
        HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 14243
        $192 = $51; //@line 14244
        break;
       }
       HEAP8[$19 >> 0] = $124 & -33; //@line 14248
       $143 = HEAP32[$0 + 1328 >> 2] | 0; //@line 14250
       HEAP32[$1 >> 2] = 446; //@line 14251
       HEAP32[$1 + 4 >> 2] = 0; //@line 14253
       $AsyncCtx40 = _emscripten_alloc_async_context(68, sp) | 0; //@line 14254
       HEAP32[$$byval_copy98 >> 2] = HEAP32[$1 >> 2]; //@line 14255
       HEAP32[$$byval_copy98 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 14255
       $144 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($143, $0, $$byval_copy98) | 0; //@line 14256
       if (___async) {
        HEAP32[$AsyncCtx40 >> 2] = 449; //@line 14259
        HEAP32[$AsyncCtx40 + 4 >> 2] = $0; //@line 14261
        HEAP32[$AsyncCtx40 + 8 >> 2] = $19; //@line 14263
        HEAP32[$AsyncCtx40 + 12 >> 2] = $1; //@line 14265
        HEAP32[$AsyncCtx40 + 16 >> 2] = $vararg_buffer3; //@line 14267
        HEAP32[$AsyncCtx40 + 20 >> 2] = $vararg_buffer3; //@line 14269
        HEAP32[$AsyncCtx40 + 24 >> 2] = $vararg_buffer5; //@line 14271
        HEAP32[$AsyncCtx40 + 28 >> 2] = $vararg_buffer5; //@line 14273
        HEAP32[$AsyncCtx40 + 32 >> 2] = $$pre20; //@line 14275
        HEAP32[$AsyncCtx40 + 36 >> 2] = $vararg_buffer; //@line 14277
        HEAP32[$AsyncCtx40 + 40 >> 2] = $vararg_buffer; //@line 14279
        HEAP32[$AsyncCtx40 + 44 >> 2] = $vararg_buffer1; //@line 14281
        HEAP32[$AsyncCtx40 + 48 >> 2] = $vararg_buffer1; //@line 14283
        HEAP32[$AsyncCtx40 + 52 >> 2] = $2; //@line 14285
        HEAP32[$AsyncCtx40 + 56 >> 2] = $4; //@line 14287
        HEAP32[$AsyncCtx40 + 60 >> 2] = $51; //@line 14289
        HEAP32[$AsyncCtx40 + 64 >> 2] = $1; //@line 14291
        sp = STACKTOP; //@line 14292
        STACKTOP = sp; //@line 14293
        return;
       }
       _emscripten_free_async_context($AsyncCtx40 | 0); //@line 14295
       do {
        if (!$144) {
         $AsyncCtx72 = _emscripten_alloc_async_context(68, sp) | 0; //@line 14299
         _mbed_assert_internal(12827, 12836, 194); //@line 14300
         if (___async) {
          HEAP32[$AsyncCtx72 >> 2] = 450; //@line 14303
          HEAP32[$AsyncCtx72 + 4 >> 2] = $0; //@line 14305
          HEAP32[$AsyncCtx72 + 8 >> 2] = $19; //@line 14307
          HEAP32[$AsyncCtx72 + 12 >> 2] = $1; //@line 14309
          HEAP32[$AsyncCtx72 + 16 >> 2] = $vararg_buffer3; //@line 14311
          HEAP32[$AsyncCtx72 + 20 >> 2] = $vararg_buffer3; //@line 14313
          HEAP32[$AsyncCtx72 + 24 >> 2] = $vararg_buffer5; //@line 14315
          HEAP32[$AsyncCtx72 + 28 >> 2] = $vararg_buffer5; //@line 14317
          HEAP32[$AsyncCtx72 + 32 >> 2] = $$pre20; //@line 14319
          HEAP32[$AsyncCtx72 + 36 >> 2] = $vararg_buffer; //@line 14321
          HEAP32[$AsyncCtx72 + 40 >> 2] = $vararg_buffer; //@line 14323
          HEAP32[$AsyncCtx72 + 44 >> 2] = $vararg_buffer1; //@line 14325
          HEAP32[$AsyncCtx72 + 48 >> 2] = $vararg_buffer1; //@line 14327
          HEAP32[$AsyncCtx72 + 52 >> 2] = $2; //@line 14329
          HEAP32[$AsyncCtx72 + 56 >> 2] = $4; //@line 14331
          HEAP32[$AsyncCtx72 + 60 >> 2] = $51; //@line 14333
          HEAP32[$AsyncCtx72 + 64 >> 2] = $1; //@line 14335
          sp = STACKTOP; //@line 14336
          STACKTOP = sp; //@line 14337
          return;
         } else {
          _emscripten_free_async_context($AsyncCtx72 | 0); //@line 14339
          break;
         }
        }
       } while (0);
       $192 = $51; //@line 14344
      }
     } else {
      $192 = $51; //@line 14347
     }
    }
   } while (0);
   do {
    if (HEAP8[$19 >> 0] & 2) {
     $181 = $0 + 288 | 0; //@line 14356
     if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($181) | 0) + 10 >> 0] | 0)) {
      if ((HEAPU8[$0 + 895 >> 0] | 0) <= (HEAPU8[$0 + 894 >> 0] | 0)) {
       break;
      }
     }
     HEAP8[$0 + 377 >> 0] = 0; //@line 14372
     HEAP8[$192 >> 0] = 0; //@line 14373
     if (!(HEAP8[$0 + 370 >> 0] | 0)) {
      $196 = $0 + 956 | 0; //@line 14378
      HEAP32[$196 >> 2] = (HEAP32[$196 >> 2] | 0) + 1; //@line 14381
     }
     $200 = HEAP8[$0 + 895 >> 0] | 0; //@line 14384
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($181) | 0) + 11 >> 0] = $200; //@line 14387
     HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 14390
    }
   } while (0);
   $205 = $0 + 377 | 0; //@line 14393
   if (HEAP8[$205 >> 0] | 0) {
    if (!(HEAP32[$$pre20 >> 2] & 16)) {
     HEAP8[$205 >> 0] = 0; //@line 14401
     $211 = $0 + 895 | 0; //@line 14402
     $212 = HEAP8[$211 >> 0] | 0; //@line 14403
     if (!(($212 & 255) < 9 ? ($212 & 255) < (HEAPU8[$0 + 894 >> 0] | 0) : 0)) {
      $265 = HEAP32[$0 >> 2] | 0; //@line 14410
      $268 = HEAP32[(HEAP32[$265 >> 2] | 0) + 16 >> 2] | 0; //@line 14413
      $AsyncCtx = _emscripten_alloc_async_context(68, sp) | 0; //@line 14414
      FUNCTION_TABLE_vi[$268 & 1023]($265); //@line 14415
      if (___async) {
       HEAP32[$AsyncCtx >> 2] = 452; //@line 14418
       HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 14420
       HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer3; //@line 14422
       HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer3; //@line 14424
       HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer5; //@line 14426
       HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer5; //@line 14428
       HEAP32[$AsyncCtx + 24 >> 2] = $19; //@line 14430
       HEAP32[$AsyncCtx + 28 >> 2] = $0; //@line 14432
       HEAP32[$AsyncCtx + 32 >> 2] = $$pre20; //@line 14434
       HEAP32[$AsyncCtx + 36 >> 2] = $192; //@line 14436
       HEAP32[$AsyncCtx + 40 >> 2] = $211; //@line 14438
       HEAP32[$AsyncCtx + 44 >> 2] = $2; //@line 14440
       HEAP32[$AsyncCtx + 48 >> 2] = $4; //@line 14442
       HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer; //@line 14444
       HEAP32[$AsyncCtx + 56 >> 2] = $vararg_buffer; //@line 14446
       HEAP32[$AsyncCtx + 60 >> 2] = $vararg_buffer1; //@line 14448
       HEAP32[$AsyncCtx + 64 >> 2] = $vararg_buffer1; //@line 14450
       sp = STACKTOP; //@line 14451
       STACKTOP = sp; //@line 14452
       return;
      }
      _emscripten_free_async_context($AsyncCtx | 0); //@line 14454
      HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 14457
      __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 4 | 0); //@line 14459
      HEAP8[$192 >> 0] = 0; //@line 14460
      $288 = $0 + 288 | 0; //@line 14461
      HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($288) | 0) + 10 >> 0] = 0; //@line 14464
      $291 = HEAP8[$211 >> 0] | 0; //@line 14465
      HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($288) | 0) + 11 >> 0] = $291; //@line 14468
      if (HEAP8[$0 + 370 >> 0] | 0) {
       break;
      }
      $297 = $0 + 956 | 0; //@line 14475
      HEAP32[$297 >> 2] = (HEAP32[$297 >> 2] | 0) + 1; //@line 14478
      break;
     }
     $217 = $212 + 1 << 24 >> 24; //@line 14481
     HEAP8[$211 >> 0] = $217; //@line 14482
     if ($217 & 1) {
      $221 = $0 + 1097 | 0; //@line 14487
      HEAP8[$221 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$0 >> 2] | 0, HEAP8[$221 >> 0] | 0) | 0; //@line 14490
     }
     $AsyncCtx33 = _emscripten_alloc_async_context(68, sp) | 0; //@line 14492
     $224 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 14493
     if (___async) {
      HEAP32[$AsyncCtx33 >> 2] = 451; //@line 14496
      HEAP32[$AsyncCtx33 + 4 >> 2] = $19; //@line 14498
      HEAP32[$AsyncCtx33 + 8 >> 2] = $0; //@line 14500
      HEAP32[$AsyncCtx33 + 12 >> 2] = $1; //@line 14502
      HEAP32[$AsyncCtx33 + 16 >> 2] = $vararg_buffer3; //@line 14504
      HEAP32[$AsyncCtx33 + 20 >> 2] = $vararg_buffer3; //@line 14506
      HEAP32[$AsyncCtx33 + 24 >> 2] = $vararg_buffer5; //@line 14508
      HEAP32[$AsyncCtx33 + 28 >> 2] = $vararg_buffer5; //@line 14510
      HEAP32[$AsyncCtx33 + 32 >> 2] = $vararg_buffer; //@line 14512
      HEAP32[$AsyncCtx33 + 36 >> 2] = $vararg_buffer; //@line 14514
      HEAP32[$AsyncCtx33 + 40 >> 2] = $vararg_buffer1; //@line 14516
      HEAP32[$AsyncCtx33 + 44 >> 2] = $vararg_buffer1; //@line 14518
      HEAP32[$AsyncCtx33 + 48 >> 2] = $$pre20; //@line 14520
      HEAP32[$AsyncCtx33 + 52 >> 2] = $192; //@line 14522
      HEAP32[$AsyncCtx33 + 56 >> 2] = $211; //@line 14524
      HEAP32[$AsyncCtx33 + 60 >> 2] = $2; //@line 14526
      HEAP32[$AsyncCtx33 + 64 >> 2] = $4; //@line 14528
      sp = STACKTOP; //@line 14529
      STACKTOP = sp; //@line 14530
      return;
     }
     _emscripten_free_async_context($AsyncCtx33 | 0); //@line 14532
     if (!$224) {
      HEAP8[$19 >> 0] = HEAP8[$19 >> 0] & -33; //@line 14537
      break;
     }
     $244 = $0 + 288 | 0; //@line 14540
     HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($244) | 0) + 4 >> 2] = 9; //@line 14543
     __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 4 | 0); //@line 14545
     HEAP32[$$pre20 >> 2] = HEAP32[$$pre20 >> 2] & -2; //@line 14548
     HEAP8[$192 >> 0] = 0; //@line 14549
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($244) | 0) + 10 >> 0] = 0; //@line 14552
     $252 = HEAP8[$211 >> 0] | 0; //@line 14553
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($244) | 0) + 11 >> 0] = $252; //@line 14556
     $256 = HEAP8[$0 + 1097 >> 0] | 0; //@line 14558
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($244) | 0) + 8 >> 0] = $256; //@line 14561
     if (!(HEAP8[$0 + 370 >> 0] | 0)) {
      $262 = $0 + 956 | 0; //@line 14566
      HEAP32[$262 >> 2] = (HEAP32[$262 >> 2] | 0) + 1; //@line 14569
     }
    }
   }
  }
 } while (0);
 $300 = HEAP32[$$pre20 >> 2] | 0; //@line 14575
 $303 = $300 & -3; //@line 14578
 if (!($300 & 2)) {
  $305 = $300; //@line 14580
 } else {
  HEAP32[$$pre20 >> 2] = $303; //@line 14582
  $305 = $303; //@line 14583
 }
 do {
  if (!$305) {
   $306 = HEAP8[$19 >> 0] | 0; //@line 14588
   do {
    if (!($306 & 1)) {
     $345 = $306; //@line 14593
    } else {
     HEAP8[$19 >> 0] = $306 & -2; //@line 14596
     $311 = HEAP32[$0 + 1324 >> 2] | 0; //@line 14598
     $313 = __ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0; //@line 14600
     $314 = $311 + 12 | 0; //@line 14601
     $315 = HEAP32[$314 >> 2] | 0; //@line 14602
     do {
      if (!$315) {
       $AsyncCtx68 = _emscripten_alloc_async_context(60, sp) | 0; //@line 14606
       _mbed_assert_internal(14997, 15002, 1102); //@line 14607
       if (___async) {
        HEAP32[$AsyncCtx68 >> 2] = 453; //@line 14610
        HEAP32[$AsyncCtx68 + 4 >> 2] = $314; //@line 14612
        HEAP32[$AsyncCtx68 + 8 >> 2] = $19; //@line 14614
        HEAP32[$AsyncCtx68 + 12 >> 2] = $0; //@line 14616
        HEAP32[$AsyncCtx68 + 16 >> 2] = $1; //@line 14618
        HEAP32[$AsyncCtx68 + 20 >> 2] = $vararg_buffer3; //@line 14620
        HEAP32[$AsyncCtx68 + 24 >> 2] = $vararg_buffer3; //@line 14622
        HEAP32[$AsyncCtx68 + 28 >> 2] = $vararg_buffer5; //@line 14624
        HEAP32[$AsyncCtx68 + 32 >> 2] = $vararg_buffer5; //@line 14626
        HEAP32[$AsyncCtx68 + 36 >> 2] = $vararg_buffer; //@line 14628
        HEAP32[$AsyncCtx68 + 40 >> 2] = $vararg_buffer; //@line 14630
        HEAP32[$AsyncCtx68 + 44 >> 2] = $vararg_buffer1; //@line 14632
        HEAP32[$AsyncCtx68 + 48 >> 2] = $vararg_buffer1; //@line 14634
        HEAP32[$AsyncCtx68 + 52 >> 2] = $311; //@line 14636
        HEAP32[$AsyncCtx68 + 56 >> 2] = $313; //@line 14638
        sp = STACKTOP; //@line 14639
        STACKTOP = sp; //@line 14640
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx68 | 0); //@line 14642
        $332 = HEAP32[$314 >> 2] | 0; //@line 14644
        break;
       }
      } else {
       $332 = $315; //@line 14648
      }
     } while (0);
     $331 = HEAP32[$332 >> 2] | 0; //@line 14651
     $AsyncCtx8 = _emscripten_alloc_async_context(48, sp) | 0; //@line 14652
     FUNCTION_TABLE_vii[$331 & 31]($311, $313); //@line 14653
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 454; //@line 14656
      HEAP32[$AsyncCtx8 + 4 >> 2] = $1; //@line 14658
      HEAP32[$AsyncCtx8 + 8 >> 2] = $vararg_buffer3; //@line 14660
      HEAP32[$AsyncCtx8 + 12 >> 2] = $vararg_buffer3; //@line 14662
      HEAP32[$AsyncCtx8 + 16 >> 2] = $vararg_buffer5; //@line 14664
      HEAP32[$AsyncCtx8 + 20 >> 2] = $vararg_buffer5; //@line 14666
      HEAP32[$AsyncCtx8 + 24 >> 2] = $19; //@line 14668
      HEAP32[$AsyncCtx8 + 28 >> 2] = $0; //@line 14670
      HEAP32[$AsyncCtx8 + 32 >> 2] = $vararg_buffer; //@line 14672
      HEAP32[$AsyncCtx8 + 36 >> 2] = $vararg_buffer; //@line 14674
      HEAP32[$AsyncCtx8 + 40 >> 2] = $vararg_buffer1; //@line 14676
      HEAP32[$AsyncCtx8 + 44 >> 2] = $vararg_buffer1; //@line 14678
      sp = STACKTOP; //@line 14679
      STACKTOP = sp; //@line 14680
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx8 | 0); //@line 14682
      $345 = HEAP8[$19 >> 0] | 0; //@line 14684
      break;
     }
    }
   } while (0);
   do {
    if ($345 & 8) {
     HEAP8[$19 >> 0] = $345 & -9; //@line 14694
     $349 = HEAP32[$0 + 1324 >> 2] | 0; //@line 14696
     $350 = $349 + 32 | 0; //@line 14697
     $352 = __ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0; //@line 14699
     $353 = $349 + 44 | 0; //@line 14700
     $354 = HEAP32[$353 >> 2] | 0; //@line 14701
     do {
      if (!$354) {
       $AsyncCtx64 = _emscripten_alloc_async_context(60, sp) | 0; //@line 14705
       _mbed_assert_internal(14997, 15002, 1102); //@line 14706
       if (___async) {
        HEAP32[$AsyncCtx64 >> 2] = 455; //@line 14709
        HEAP32[$AsyncCtx64 + 4 >> 2] = $19; //@line 14711
        HEAP32[$AsyncCtx64 + 8 >> 2] = $0; //@line 14713
        HEAP32[$AsyncCtx64 + 12 >> 2] = $1; //@line 14715
        HEAP32[$AsyncCtx64 + 16 >> 2] = $vararg_buffer3; //@line 14717
        HEAP32[$AsyncCtx64 + 20 >> 2] = $vararg_buffer3; //@line 14719
        HEAP32[$AsyncCtx64 + 24 >> 2] = $vararg_buffer5; //@line 14721
        HEAP32[$AsyncCtx64 + 28 >> 2] = $vararg_buffer5; //@line 14723
        HEAP32[$AsyncCtx64 + 32 >> 2] = $vararg_buffer; //@line 14725
        HEAP32[$AsyncCtx64 + 36 >> 2] = $vararg_buffer; //@line 14727
        HEAP32[$AsyncCtx64 + 40 >> 2] = $vararg_buffer1; //@line 14729
        HEAP32[$AsyncCtx64 + 44 >> 2] = $vararg_buffer1; //@line 14731
        HEAP32[$AsyncCtx64 + 48 >> 2] = $353; //@line 14733
        HEAP32[$AsyncCtx64 + 52 >> 2] = $350; //@line 14735
        HEAP32[$AsyncCtx64 + 56 >> 2] = $352; //@line 14737
        sp = STACKTOP; //@line 14738
        STACKTOP = sp; //@line 14739
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx64 | 0); //@line 14741
        $371 = HEAP32[$353 >> 2] | 0; //@line 14743
        break;
       }
      } else {
       $371 = $354; //@line 14747
      }
     } while (0);
     $370 = HEAP32[$371 >> 2] | 0; //@line 14750
     $AsyncCtx11 = _emscripten_alloc_async_context(48, sp) | 0; //@line 14751
     FUNCTION_TABLE_vii[$370 & 31]($350, $352); //@line 14752
     if (___async) {
      HEAP32[$AsyncCtx11 >> 2] = 456; //@line 14755
      HEAP32[$AsyncCtx11 + 4 >> 2] = $1; //@line 14757
      HEAP32[$AsyncCtx11 + 8 >> 2] = $vararg_buffer3; //@line 14759
      HEAP32[$AsyncCtx11 + 12 >> 2] = $vararg_buffer3; //@line 14761
      HEAP32[$AsyncCtx11 + 16 >> 2] = $vararg_buffer5; //@line 14763
      HEAP32[$AsyncCtx11 + 20 >> 2] = $vararg_buffer5; //@line 14765
      HEAP32[$AsyncCtx11 + 24 >> 2] = $19; //@line 14767
      HEAP32[$AsyncCtx11 + 28 >> 2] = $0; //@line 14769
      HEAP32[$AsyncCtx11 + 32 >> 2] = $vararg_buffer; //@line 14771
      HEAP32[$AsyncCtx11 + 36 >> 2] = $vararg_buffer; //@line 14773
      HEAP32[$AsyncCtx11 + 40 >> 2] = $vararg_buffer1; //@line 14775
      HEAP32[$AsyncCtx11 + 44 >> 2] = $vararg_buffer1; //@line 14777
      sp = STACKTOP; //@line 14778
      STACKTOP = sp; //@line 14779
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 14781
      break;
     }
    }
   } while (0);
   do {
    if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($0 + 4 | 0) | 0) {
     _printf(12943, $vararg_buffer) | 0; //@line 14790
     _printf(13090, $vararg_buffer1) | 0; //@line 14791
     $AsyncCtx25 = _emscripten_alloc_async_context(32, sp) | 0; //@line 14792
     _putchar(10) | 0; //@line 14793
     if (___async) {
      HEAP32[$AsyncCtx25 >> 2] = 457; //@line 14796
      HEAP32[$AsyncCtx25 + 4 >> 2] = $19; //@line 14798
      HEAP32[$AsyncCtx25 + 8 >> 2] = $0; //@line 14800
      HEAP32[$AsyncCtx25 + 12 >> 2] = $1; //@line 14802
      HEAP32[$AsyncCtx25 + 16 >> 2] = $vararg_buffer3; //@line 14804
      HEAP32[$AsyncCtx25 + 20 >> 2] = $vararg_buffer3; //@line 14806
      HEAP32[$AsyncCtx25 + 24 >> 2] = $vararg_buffer5; //@line 14808
      HEAP32[$AsyncCtx25 + 28 >> 2] = $vararg_buffer5; //@line 14810
      sp = STACKTOP; //@line 14811
      STACKTOP = sp; //@line 14812
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx25 | 0); //@line 14814
      HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($0 + 264 | 0) | 0) >> 2] = 4; //@line 14817
      $395 = HEAP8[$19 >> 0] | 16; //@line 14819
      HEAP8[$19 >> 0] = $395; //@line 14820
      $397 = $395; //@line 14821
      break;
     }
    } else {
     $397 = HEAP8[$19 >> 0] | 0; //@line 14826
    }
   } while (0);
   $396 = $397 & -33; //@line 14829
   HEAP8[$19 >> 0] = $396; //@line 14830
   $407 = $396; //@line 14831
  } else {
   $398 = HEAP32[$2 >> 2] | 0; //@line 14833
   $AsyncCtx29 = _emscripten_alloc_async_context(32, sp) | 0; //@line 14834
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($398, $4, 1e3); //@line 14835
   if (___async) {
    HEAP32[$AsyncCtx29 >> 2] = 458; //@line 14838
    HEAP32[$AsyncCtx29 + 4 >> 2] = $19; //@line 14840
    HEAP32[$AsyncCtx29 + 8 >> 2] = $0; //@line 14842
    HEAP32[$AsyncCtx29 + 12 >> 2] = $1; //@line 14844
    HEAP32[$AsyncCtx29 + 16 >> 2] = $vararg_buffer3; //@line 14846
    HEAP32[$AsyncCtx29 + 20 >> 2] = $vararg_buffer3; //@line 14848
    HEAP32[$AsyncCtx29 + 24 >> 2] = $vararg_buffer5; //@line 14850
    HEAP32[$AsyncCtx29 + 28 >> 2] = $vararg_buffer5; //@line 14852
    sp = STACKTOP; //@line 14853
    STACKTOP = sp; //@line 14854
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx29 | 0); //@line 14856
    $407 = HEAP8[$19 >> 0] | 0; //@line 14858
    break;
   }
  }
 } while (0);
 if (!($407 & 2)) {
  $451 = $407; //@line 14866
 } else {
  $409 = $407 & -3; //@line 14868
  HEAP8[$19 >> 0] = $409; //@line 14869
  if ((HEAP32[$0 + 360 >> 2] | 0) == 2) {
   _printf(12943, $vararg_buffer3) | 0; //@line 14874
   _printf(12970, $vararg_buffer5) | 0; //@line 14875
   $AsyncCtx21 = _emscripten_alloc_async_context(20, sp) | 0; //@line 14876
   _putchar(10) | 0; //@line 14877
   if (___async) {
    HEAP32[$AsyncCtx21 >> 2] = 459; //@line 14880
    HEAP32[$AsyncCtx21 + 4 >> 2] = $19; //@line 14882
    HEAP32[$AsyncCtx21 + 8 >> 2] = $0; //@line 14884
    HEAP32[$AsyncCtx21 + 12 >> 2] = $1; //@line 14886
    HEAP32[$AsyncCtx21 + 16 >> 2] = $1; //@line 14888
    sp = STACKTOP; //@line 14889
    STACKTOP = sp; //@line 14890
    return;
   }
   _emscripten_free_async_context($AsyncCtx21 | 0); //@line 14892
   $418 = HEAP32[$0 + 1328 >> 2] | 0; //@line 14894
   HEAP32[$1 >> 2] = 347; //@line 14895
   HEAP32[$1 + 4 >> 2] = 0; //@line 14897
   $AsyncCtx36 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14898
   HEAP32[$$byval_copy98 >> 2] = HEAP32[$1 >> 2]; //@line 14899
   HEAP32[$$byval_copy98 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 14899
   $419 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($418, $0, $$byval_copy98) | 0; //@line 14900
   if (___async) {
    HEAP32[$AsyncCtx36 >> 2] = 460; //@line 14903
    HEAP32[$AsyncCtx36 + 4 >> 2] = $19; //@line 14905
    HEAP32[$AsyncCtx36 + 8 >> 2] = $0; //@line 14907
    HEAP32[$AsyncCtx36 + 12 >> 2] = $1; //@line 14909
    sp = STACKTOP; //@line 14910
    STACKTOP = sp; //@line 14911
    return;
   }
   _emscripten_free_async_context($AsyncCtx36 | 0); //@line 14913
   do {
    if (!$419) {
     $AsyncCtx60 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14917
     _mbed_assert_internal(12827, 12836, 217); //@line 14918
     if (___async) {
      HEAP32[$AsyncCtx60 >> 2] = 461; //@line 14921
      HEAP32[$AsyncCtx60 + 4 >> 2] = $19; //@line 14923
      HEAP32[$AsyncCtx60 + 8 >> 2] = $0; //@line 14925
      HEAP32[$AsyncCtx60 + 12 >> 2] = $1; //@line 14927
      sp = STACKTOP; //@line 14928
      STACKTOP = sp; //@line 14929
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx60 | 0); //@line 14931
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 14937
   $429 = HEAP8[$19 >> 0] | 0; //@line 14939
  } else {
   $429 = $409; //@line 14941
  }
  do {
   if (!($429 & 4)) {
    $432 = HEAP32[$0 + 1324 >> 2] | 0; //@line 14948
    $433 = $432 + 16 | 0; //@line 14949
    $435 = __ZN11LoRaMacMcps14get_indicationEv($0 + 288 | 0) | 0; //@line 14951
    $436 = $432 + 28 | 0; //@line 14952
    $437 = HEAP32[$436 >> 2] | 0; //@line 14953
    do {
     if (!$437) {
      $AsyncCtx56 = _emscripten_alloc_async_context(24, sp) | 0; //@line 14957
      _mbed_assert_internal(14997, 15002, 1102); //@line 14958
      if (___async) {
       HEAP32[$AsyncCtx56 >> 2] = 462; //@line 14961
       HEAP32[$AsyncCtx56 + 4 >> 2] = $436; //@line 14963
       HEAP32[$AsyncCtx56 + 8 >> 2] = $433; //@line 14965
       HEAP32[$AsyncCtx56 + 12 >> 2] = $435; //@line 14967
       HEAP32[$AsyncCtx56 + 16 >> 2] = $19; //@line 14969
       HEAP32[$AsyncCtx56 + 20 >> 2] = $0; //@line 14971
       sp = STACKTOP; //@line 14972
       STACKTOP = sp; //@line 14973
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx56 | 0); //@line 14975
       $445 = HEAP32[$436 >> 2] | 0; //@line 14977
       break;
      }
     } else {
      $445 = $437; //@line 14981
     }
    } while (0);
    $444 = HEAP32[$445 >> 2] | 0; //@line 14984
    $AsyncCtx14 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14985
    FUNCTION_TABLE_vii[$444 & 31]($433, $435); //@line 14986
    if (___async) {
     HEAP32[$AsyncCtx14 >> 2] = 463; //@line 14989
     HEAP32[$AsyncCtx14 + 4 >> 2] = $19; //@line 14991
     HEAP32[$AsyncCtx14 + 8 >> 2] = $0; //@line 14993
     sp = STACKTOP; //@line 14994
     STACKTOP = sp; //@line 14995
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx14 | 0); //@line 14997
     $449 = HEAP8[$19 >> 0] | 0; //@line 14999
     break;
    }
   } else {
    $449 = $429; //@line 15003
   }
  } while (0);
  $448 = $449 & -5; //@line 15006
  HEAP8[$19 >> 0] = $448; //@line 15007
  $451 = $448; //@line 15008
 }
 if (!($451 & 16)) {
  STACKTOP = sp; //@line 15013
  return;
 }
 HEAP8[$19 >> 0] = $451 & -17; //@line 15016
 $455 = HEAP32[$0 + 1324 >> 2] | 0; //@line 15018
 $456 = $455 + 48 | 0; //@line 15019
 $458 = __ZN11LoRaMacMlme14get_indicationEv($0 + 264 | 0) | 0; //@line 15021
 $459 = $455 + 60 | 0; //@line 15022
 $460 = HEAP32[$459 >> 2] | 0; //@line 15023
 do {
  if (!$460) {
   $AsyncCtx52 = _emscripten_alloc_async_context(16, sp) | 0; //@line 15027
   _mbed_assert_internal(14997, 15002, 1102); //@line 15028
   if (___async) {
    HEAP32[$AsyncCtx52 >> 2] = 464; //@line 15031
    HEAP32[$AsyncCtx52 + 4 >> 2] = $459; //@line 15033
    HEAP32[$AsyncCtx52 + 8 >> 2] = $456; //@line 15035
    HEAP32[$AsyncCtx52 + 12 >> 2] = $458; //@line 15037
    sp = STACKTOP; //@line 15038
    STACKTOP = sp; //@line 15039
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx52 | 0); //@line 15041
    $466 = HEAP32[$459 >> 2] | 0; //@line 15043
    break;
   }
  } else {
   $466 = $460; //@line 15047
  }
 } while (0);
 $465 = HEAP32[$466 >> 2] | 0; //@line 15050
 $AsyncCtx17 = _emscripten_alloc_async_context(4, sp) | 0; //@line 15051
 FUNCTION_TABLE_vii[$465 & 31]($456, $458); //@line 15052
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 465; //@line 15055
  sp = STACKTOP; //@line 15056
  STACKTOP = sp; //@line 15057
  return;
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 15059
 STACKTOP = sp; //@line 15060
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_440($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $119 = 0, $12 = 0, $121 = 0, $122 = 0, $127 = 0, $129 = 0, $130 = 0, $131 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $163 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $216 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $227 = 0, $228 = 0, $230 = 0, $231 = 0, $232 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $244 = 0, $248 = 0, $249 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $28 = 0, $30 = 0, $32 = 0, $36 = 0, $4 = 0, $50 = 0, $54 = 0, $59 = 0, $6 = 0, $65 = 0, $66 = 0, $71 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $96 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 29559
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29561
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29563
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29565
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29567
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29569
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29571
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29573
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29575
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29577
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 29579
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 29581
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 29583
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 29587
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 29589
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 29591
 do {
  if (HEAP8[$4 >> 0] & 2) {
   $36 = $2 + 288 | 0; //@line 29597
   if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 10 >> 0] | 0)) {
    if ((HEAPU8[$2 + 895 >> 0] | 0) <= (HEAPU8[$2 + 894 >> 0] | 0)) {
     break;
    }
   }
   HEAP8[$2 + 377 >> 0] = 0; //@line 29613
   HEAP8[$32 >> 0] = 0; //@line 29614
   if (!(HEAP8[$2 + 370 >> 0] | 0)) {
    $50 = $2 + 956 | 0; //@line 29619
    HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + 1; //@line 29622
   }
   $54 = HEAP8[$2 + 895 >> 0] | 0; //@line 29625
   HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 11 >> 0] = $54; //@line 29628
   HEAP32[$16 >> 2] = HEAP32[$16 >> 2] & -2; //@line 29631
  }
 } while (0);
 $59 = $2 + 377 | 0; //@line 29634
 if (HEAP8[$59 >> 0] | 0) {
  if (!(HEAP32[$16 >> 2] & 16)) {
   HEAP8[$59 >> 0] = 0; //@line 29642
   $65 = $2 + 895 | 0; //@line 29643
   $66 = HEAP8[$65 >> 0] | 0; //@line 29644
   if (!(($66 & 255) < 9 ? ($66 & 255) < (HEAPU8[$2 + 894 >> 0] | 0) : 0)) {
    $96 = HEAP32[$2 >> 2] | 0; //@line 29651
    $99 = HEAP32[(HEAP32[$96 >> 2] | 0) + 16 >> 2] | 0; //@line 29654
    $ReallocAsyncCtx = _emscripten_realloc_async_context(68) | 0; //@line 29655
    FUNCTION_TABLE_vi[$99 & 1023]($96); //@line 29656
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 452; //@line 29659
     $100 = $ReallocAsyncCtx + 4 | 0; //@line 29660
     HEAP32[$100 >> 2] = $6; //@line 29661
     $101 = $ReallocAsyncCtx + 8 | 0; //@line 29662
     HEAP32[$101 >> 2] = $8; //@line 29663
     $102 = $ReallocAsyncCtx + 12 | 0; //@line 29664
     HEAP32[$102 >> 2] = $10; //@line 29665
     $103 = $ReallocAsyncCtx + 16 | 0; //@line 29666
     HEAP32[$103 >> 2] = $12; //@line 29667
     $104 = $ReallocAsyncCtx + 20 | 0; //@line 29668
     HEAP32[$104 >> 2] = $14; //@line 29669
     $105 = $ReallocAsyncCtx + 24 | 0; //@line 29670
     HEAP32[$105 >> 2] = $4; //@line 29671
     $106 = $ReallocAsyncCtx + 28 | 0; //@line 29672
     HEAP32[$106 >> 2] = $2; //@line 29673
     $107 = $ReallocAsyncCtx + 32 | 0; //@line 29674
     HEAP32[$107 >> 2] = $16; //@line 29675
     $108 = $ReallocAsyncCtx + 36 | 0; //@line 29676
     HEAP32[$108 >> 2] = $32; //@line 29677
     $109 = $ReallocAsyncCtx + 40 | 0; //@line 29678
     HEAP32[$109 >> 2] = $65; //@line 29679
     $110 = $ReallocAsyncCtx + 44 | 0; //@line 29680
     HEAP32[$110 >> 2] = $28; //@line 29681
     $111 = $ReallocAsyncCtx + 48 | 0; //@line 29682
     HEAP32[$111 >> 2] = $30; //@line 29683
     $112 = $ReallocAsyncCtx + 52 | 0; //@line 29684
     HEAP32[$112 >> 2] = $18; //@line 29685
     $113 = $ReallocAsyncCtx + 56 | 0; //@line 29686
     HEAP32[$113 >> 2] = $20; //@line 29687
     $114 = $ReallocAsyncCtx + 60 | 0; //@line 29688
     HEAP32[$114 >> 2] = $22; //@line 29689
     $115 = $ReallocAsyncCtx + 64 | 0; //@line 29690
     HEAP32[$115 >> 2] = $24; //@line 29691
     sp = STACKTOP; //@line 29692
     return;
    }
    ___async_unwind = 0; //@line 29695
    HEAP32[$ReallocAsyncCtx >> 2] = 452; //@line 29696
    $100 = $ReallocAsyncCtx + 4 | 0; //@line 29697
    HEAP32[$100 >> 2] = $6; //@line 29698
    $101 = $ReallocAsyncCtx + 8 | 0; //@line 29699
    HEAP32[$101 >> 2] = $8; //@line 29700
    $102 = $ReallocAsyncCtx + 12 | 0; //@line 29701
    HEAP32[$102 >> 2] = $10; //@line 29702
    $103 = $ReallocAsyncCtx + 16 | 0; //@line 29703
    HEAP32[$103 >> 2] = $12; //@line 29704
    $104 = $ReallocAsyncCtx + 20 | 0; //@line 29705
    HEAP32[$104 >> 2] = $14; //@line 29706
    $105 = $ReallocAsyncCtx + 24 | 0; //@line 29707
    HEAP32[$105 >> 2] = $4; //@line 29708
    $106 = $ReallocAsyncCtx + 28 | 0; //@line 29709
    HEAP32[$106 >> 2] = $2; //@line 29710
    $107 = $ReallocAsyncCtx + 32 | 0; //@line 29711
    HEAP32[$107 >> 2] = $16; //@line 29712
    $108 = $ReallocAsyncCtx + 36 | 0; //@line 29713
    HEAP32[$108 >> 2] = $32; //@line 29714
    $109 = $ReallocAsyncCtx + 40 | 0; //@line 29715
    HEAP32[$109 >> 2] = $65; //@line 29716
    $110 = $ReallocAsyncCtx + 44 | 0; //@line 29717
    HEAP32[$110 >> 2] = $28; //@line 29718
    $111 = $ReallocAsyncCtx + 48 | 0; //@line 29719
    HEAP32[$111 >> 2] = $30; //@line 29720
    $112 = $ReallocAsyncCtx + 52 | 0; //@line 29721
    HEAP32[$112 >> 2] = $18; //@line 29722
    $113 = $ReallocAsyncCtx + 56 | 0; //@line 29723
    HEAP32[$113 >> 2] = $20; //@line 29724
    $114 = $ReallocAsyncCtx + 60 | 0; //@line 29725
    HEAP32[$114 >> 2] = $22; //@line 29726
    $115 = $ReallocAsyncCtx + 64 | 0; //@line 29727
    HEAP32[$115 >> 2] = $24; //@line 29728
    sp = STACKTOP; //@line 29729
    return;
   }
   $71 = $66 + 1 << 24 >> 24; //@line 29732
   HEAP8[$65 >> 0] = $71; //@line 29733
   if ($71 & 1) {
    $75 = $2 + 1097 | 0; //@line 29738
    HEAP8[$75 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$2 >> 2] | 0, HEAP8[$75 >> 0] | 0) | 0; //@line 29741
   }
   $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 29743
   $78 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 29744
   if (___async) {
    HEAP32[$ReallocAsyncCtx9 >> 2] = 451; //@line 29747
    $79 = $ReallocAsyncCtx9 + 4 | 0; //@line 29748
    HEAP32[$79 >> 2] = $4; //@line 29749
    $80 = $ReallocAsyncCtx9 + 8 | 0; //@line 29750
    HEAP32[$80 >> 2] = $2; //@line 29751
    $81 = $ReallocAsyncCtx9 + 12 | 0; //@line 29752
    HEAP32[$81 >> 2] = $6; //@line 29753
    $82 = $ReallocAsyncCtx9 + 16 | 0; //@line 29754
    HEAP32[$82 >> 2] = $8; //@line 29755
    $83 = $ReallocAsyncCtx9 + 20 | 0; //@line 29756
    HEAP32[$83 >> 2] = $10; //@line 29757
    $84 = $ReallocAsyncCtx9 + 24 | 0; //@line 29758
    HEAP32[$84 >> 2] = $12; //@line 29759
    $85 = $ReallocAsyncCtx9 + 28 | 0; //@line 29760
    HEAP32[$85 >> 2] = $14; //@line 29761
    $86 = $ReallocAsyncCtx9 + 32 | 0; //@line 29762
    HEAP32[$86 >> 2] = $18; //@line 29763
    $87 = $ReallocAsyncCtx9 + 36 | 0; //@line 29764
    HEAP32[$87 >> 2] = $20; //@line 29765
    $88 = $ReallocAsyncCtx9 + 40 | 0; //@line 29766
    HEAP32[$88 >> 2] = $22; //@line 29767
    $89 = $ReallocAsyncCtx9 + 44 | 0; //@line 29768
    HEAP32[$89 >> 2] = $24; //@line 29769
    $90 = $ReallocAsyncCtx9 + 48 | 0; //@line 29770
    HEAP32[$90 >> 2] = $16; //@line 29771
    $91 = $ReallocAsyncCtx9 + 52 | 0; //@line 29772
    HEAP32[$91 >> 2] = $32; //@line 29773
    $92 = $ReallocAsyncCtx9 + 56 | 0; //@line 29774
    HEAP32[$92 >> 2] = $65; //@line 29775
    $93 = $ReallocAsyncCtx9 + 60 | 0; //@line 29776
    HEAP32[$93 >> 2] = $28; //@line 29777
    $94 = $ReallocAsyncCtx9 + 64 | 0; //@line 29778
    HEAP32[$94 >> 2] = $30; //@line 29779
    sp = STACKTOP; //@line 29780
    return;
   }
   HEAP32[___async_retval >> 2] = $78; //@line 29784
   ___async_unwind = 0; //@line 29785
   HEAP32[$ReallocAsyncCtx9 >> 2] = 451; //@line 29786
   $79 = $ReallocAsyncCtx9 + 4 | 0; //@line 29787
   HEAP32[$79 >> 2] = $4; //@line 29788
   $80 = $ReallocAsyncCtx9 + 8 | 0; //@line 29789
   HEAP32[$80 >> 2] = $2; //@line 29790
   $81 = $ReallocAsyncCtx9 + 12 | 0; //@line 29791
   HEAP32[$81 >> 2] = $6; //@line 29792
   $82 = $ReallocAsyncCtx9 + 16 | 0; //@line 29793
   HEAP32[$82 >> 2] = $8; //@line 29794
   $83 = $ReallocAsyncCtx9 + 20 | 0; //@line 29795
   HEAP32[$83 >> 2] = $10; //@line 29796
   $84 = $ReallocAsyncCtx9 + 24 | 0; //@line 29797
   HEAP32[$84 >> 2] = $12; //@line 29798
   $85 = $ReallocAsyncCtx9 + 28 | 0; //@line 29799
   HEAP32[$85 >> 2] = $14; //@line 29800
   $86 = $ReallocAsyncCtx9 + 32 | 0; //@line 29801
   HEAP32[$86 >> 2] = $18; //@line 29802
   $87 = $ReallocAsyncCtx9 + 36 | 0; //@line 29803
   HEAP32[$87 >> 2] = $20; //@line 29804
   $88 = $ReallocAsyncCtx9 + 40 | 0; //@line 29805
   HEAP32[$88 >> 2] = $22; //@line 29806
   $89 = $ReallocAsyncCtx9 + 44 | 0; //@line 29807
   HEAP32[$89 >> 2] = $24; //@line 29808
   $90 = $ReallocAsyncCtx9 + 48 | 0; //@line 29809
   HEAP32[$90 >> 2] = $16; //@line 29810
   $91 = $ReallocAsyncCtx9 + 52 | 0; //@line 29811
   HEAP32[$91 >> 2] = $32; //@line 29812
   $92 = $ReallocAsyncCtx9 + 56 | 0; //@line 29813
   HEAP32[$92 >> 2] = $65; //@line 29814
   $93 = $ReallocAsyncCtx9 + 60 | 0; //@line 29815
   HEAP32[$93 >> 2] = $28; //@line 29816
   $94 = $ReallocAsyncCtx9 + 64 | 0; //@line 29817
   HEAP32[$94 >> 2] = $30; //@line 29818
   sp = STACKTOP; //@line 29819
   return;
  }
 }
 $116 = HEAP32[$16 >> 2] | 0; //@line 29823
 $119 = $116 & -3; //@line 29826
 if (!($116 & 2)) {
  $121 = $116; //@line 29828
 } else {
  HEAP32[$16 >> 2] = $119; //@line 29830
  $121 = $119; //@line 29831
 }
 if ($121 | 0) {
  $206 = HEAP32[$28 >> 2] | 0; //@line 29835
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 29836
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($206, $30, 1e3); //@line 29837
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 458; //@line 29840
   $207 = $ReallocAsyncCtx8 + 4 | 0; //@line 29841
   HEAP32[$207 >> 2] = $4; //@line 29842
   $208 = $ReallocAsyncCtx8 + 8 | 0; //@line 29843
   HEAP32[$208 >> 2] = $2; //@line 29844
   $209 = $ReallocAsyncCtx8 + 12 | 0; //@line 29845
   HEAP32[$209 >> 2] = $6; //@line 29846
   $210 = $ReallocAsyncCtx8 + 16 | 0; //@line 29847
   HEAP32[$210 >> 2] = $8; //@line 29848
   $211 = $ReallocAsyncCtx8 + 20 | 0; //@line 29849
   HEAP32[$211 >> 2] = $10; //@line 29850
   $212 = $ReallocAsyncCtx8 + 24 | 0; //@line 29851
   HEAP32[$212 >> 2] = $12; //@line 29852
   $213 = $ReallocAsyncCtx8 + 28 | 0; //@line 29853
   HEAP32[$213 >> 2] = $14; //@line 29854
   sp = STACKTOP; //@line 29855
   return;
  }
  ___async_unwind = 0; //@line 29858
  HEAP32[$ReallocAsyncCtx8 >> 2] = 458; //@line 29859
  $207 = $ReallocAsyncCtx8 + 4 | 0; //@line 29860
  HEAP32[$207 >> 2] = $4; //@line 29861
  $208 = $ReallocAsyncCtx8 + 8 | 0; //@line 29862
  HEAP32[$208 >> 2] = $2; //@line 29863
  $209 = $ReallocAsyncCtx8 + 12 | 0; //@line 29864
  HEAP32[$209 >> 2] = $6; //@line 29865
  $210 = $ReallocAsyncCtx8 + 16 | 0; //@line 29866
  HEAP32[$210 >> 2] = $8; //@line 29867
  $211 = $ReallocAsyncCtx8 + 20 | 0; //@line 29868
  HEAP32[$211 >> 2] = $10; //@line 29869
  $212 = $ReallocAsyncCtx8 + 24 | 0; //@line 29870
  HEAP32[$212 >> 2] = $12; //@line 29871
  $213 = $ReallocAsyncCtx8 + 28 | 0; //@line 29872
  HEAP32[$213 >> 2] = $14; //@line 29873
  sp = STACKTOP; //@line 29874
  return;
 }
 $122 = HEAP8[$4 >> 0] | 0; //@line 29877
 if ($122 & 1) {
  HEAP8[$4 >> 0] = $122 & -2; //@line 29882
  $127 = HEAP32[$2 + 1324 >> 2] | 0; //@line 29884
  $129 = __ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0; //@line 29886
  $130 = $127 + 12 | 0; //@line 29887
  $131 = HEAP32[$130 >> 2] | 0; //@line 29888
  if (!$131) {
   $ReallocAsyncCtx18 = _emscripten_realloc_async_context(60) | 0; //@line 29891
   _mbed_assert_internal(14997, 15002, 1102); //@line 29892
   if (___async) {
    HEAP32[$ReallocAsyncCtx18 >> 2] = 453; //@line 29895
    $133 = $ReallocAsyncCtx18 + 4 | 0; //@line 29896
    HEAP32[$133 >> 2] = $130; //@line 29897
    $134 = $ReallocAsyncCtx18 + 8 | 0; //@line 29898
    HEAP32[$134 >> 2] = $4; //@line 29899
    $135 = $ReallocAsyncCtx18 + 12 | 0; //@line 29900
    HEAP32[$135 >> 2] = $2; //@line 29901
    $136 = $ReallocAsyncCtx18 + 16 | 0; //@line 29902
    HEAP32[$136 >> 2] = $6; //@line 29903
    $137 = $ReallocAsyncCtx18 + 20 | 0; //@line 29904
    HEAP32[$137 >> 2] = $8; //@line 29905
    $138 = $ReallocAsyncCtx18 + 24 | 0; //@line 29906
    HEAP32[$138 >> 2] = $10; //@line 29907
    $139 = $ReallocAsyncCtx18 + 28 | 0; //@line 29908
    HEAP32[$139 >> 2] = $12; //@line 29909
    $140 = $ReallocAsyncCtx18 + 32 | 0; //@line 29910
    HEAP32[$140 >> 2] = $14; //@line 29911
    $141 = $ReallocAsyncCtx18 + 36 | 0; //@line 29912
    HEAP32[$141 >> 2] = $18; //@line 29913
    $142 = $ReallocAsyncCtx18 + 40 | 0; //@line 29914
    HEAP32[$142 >> 2] = $20; //@line 29915
    $143 = $ReallocAsyncCtx18 + 44 | 0; //@line 29916
    HEAP32[$143 >> 2] = $22; //@line 29917
    $144 = $ReallocAsyncCtx18 + 48 | 0; //@line 29918
    HEAP32[$144 >> 2] = $24; //@line 29919
    $145 = $ReallocAsyncCtx18 + 52 | 0; //@line 29920
    HEAP32[$145 >> 2] = $127; //@line 29921
    $146 = $ReallocAsyncCtx18 + 56 | 0; //@line 29922
    HEAP32[$146 >> 2] = $129; //@line 29923
    sp = STACKTOP; //@line 29924
    return;
   }
   ___async_unwind = 0; //@line 29927
   HEAP32[$ReallocAsyncCtx18 >> 2] = 453; //@line 29928
   $133 = $ReallocAsyncCtx18 + 4 | 0; //@line 29929
   HEAP32[$133 >> 2] = $130; //@line 29930
   $134 = $ReallocAsyncCtx18 + 8 | 0; //@line 29931
   HEAP32[$134 >> 2] = $4; //@line 29932
   $135 = $ReallocAsyncCtx18 + 12 | 0; //@line 29933
   HEAP32[$135 >> 2] = $2; //@line 29934
   $136 = $ReallocAsyncCtx18 + 16 | 0; //@line 29935
   HEAP32[$136 >> 2] = $6; //@line 29936
   $137 = $ReallocAsyncCtx18 + 20 | 0; //@line 29937
   HEAP32[$137 >> 2] = $8; //@line 29938
   $138 = $ReallocAsyncCtx18 + 24 | 0; //@line 29939
   HEAP32[$138 >> 2] = $10; //@line 29940
   $139 = $ReallocAsyncCtx18 + 28 | 0; //@line 29941
   HEAP32[$139 >> 2] = $12; //@line 29942
   $140 = $ReallocAsyncCtx18 + 32 | 0; //@line 29943
   HEAP32[$140 >> 2] = $14; //@line 29944
   $141 = $ReallocAsyncCtx18 + 36 | 0; //@line 29945
   HEAP32[$141 >> 2] = $18; //@line 29946
   $142 = $ReallocAsyncCtx18 + 40 | 0; //@line 29947
   HEAP32[$142 >> 2] = $20; //@line 29948
   $143 = $ReallocAsyncCtx18 + 44 | 0; //@line 29949
   HEAP32[$143 >> 2] = $22; //@line 29950
   $144 = $ReallocAsyncCtx18 + 48 | 0; //@line 29951
   HEAP32[$144 >> 2] = $24; //@line 29952
   $145 = $ReallocAsyncCtx18 + 52 | 0; //@line 29953
   HEAP32[$145 >> 2] = $127; //@line 29954
   $146 = $ReallocAsyncCtx18 + 56 | 0; //@line 29955
   HEAP32[$146 >> 2] = $129; //@line 29956
   sp = STACKTOP; //@line 29957
   return;
  } else {
   $147 = HEAP32[$131 >> 2] | 0; //@line 29960
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(48) | 0; //@line 29961
   FUNCTION_TABLE_vii[$147 & 31]($127, $129); //@line 29962
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 454; //@line 29965
    $148 = $ReallocAsyncCtx2 + 4 | 0; //@line 29966
    HEAP32[$148 >> 2] = $6; //@line 29967
    $149 = $ReallocAsyncCtx2 + 8 | 0; //@line 29968
    HEAP32[$149 >> 2] = $8; //@line 29969
    $150 = $ReallocAsyncCtx2 + 12 | 0; //@line 29970
    HEAP32[$150 >> 2] = $10; //@line 29971
    $151 = $ReallocAsyncCtx2 + 16 | 0; //@line 29972
    HEAP32[$151 >> 2] = $12; //@line 29973
    $152 = $ReallocAsyncCtx2 + 20 | 0; //@line 29974
    HEAP32[$152 >> 2] = $14; //@line 29975
    $153 = $ReallocAsyncCtx2 + 24 | 0; //@line 29976
    HEAP32[$153 >> 2] = $4; //@line 29977
    $154 = $ReallocAsyncCtx2 + 28 | 0; //@line 29978
    HEAP32[$154 >> 2] = $2; //@line 29979
    $155 = $ReallocAsyncCtx2 + 32 | 0; //@line 29980
    HEAP32[$155 >> 2] = $18; //@line 29981
    $156 = $ReallocAsyncCtx2 + 36 | 0; //@line 29982
    HEAP32[$156 >> 2] = $20; //@line 29983
    $157 = $ReallocAsyncCtx2 + 40 | 0; //@line 29984
    HEAP32[$157 >> 2] = $22; //@line 29985
    $158 = $ReallocAsyncCtx2 + 44 | 0; //@line 29986
    HEAP32[$158 >> 2] = $24; //@line 29987
    sp = STACKTOP; //@line 29988
    return;
   }
   ___async_unwind = 0; //@line 29991
   HEAP32[$ReallocAsyncCtx2 >> 2] = 454; //@line 29992
   $148 = $ReallocAsyncCtx2 + 4 | 0; //@line 29993
   HEAP32[$148 >> 2] = $6; //@line 29994
   $149 = $ReallocAsyncCtx2 + 8 | 0; //@line 29995
   HEAP32[$149 >> 2] = $8; //@line 29996
   $150 = $ReallocAsyncCtx2 + 12 | 0; //@line 29997
   HEAP32[$150 >> 2] = $10; //@line 29998
   $151 = $ReallocAsyncCtx2 + 16 | 0; //@line 29999
   HEAP32[$151 >> 2] = $12; //@line 30000
   $152 = $ReallocAsyncCtx2 + 20 | 0; //@line 30001
   HEAP32[$152 >> 2] = $14; //@line 30002
   $153 = $ReallocAsyncCtx2 + 24 | 0; //@line 30003
   HEAP32[$153 >> 2] = $4; //@line 30004
   $154 = $ReallocAsyncCtx2 + 28 | 0; //@line 30005
   HEAP32[$154 >> 2] = $2; //@line 30006
   $155 = $ReallocAsyncCtx2 + 32 | 0; //@line 30007
   HEAP32[$155 >> 2] = $18; //@line 30008
   $156 = $ReallocAsyncCtx2 + 36 | 0; //@line 30009
   HEAP32[$156 >> 2] = $20; //@line 30010
   $157 = $ReallocAsyncCtx2 + 40 | 0; //@line 30011
   HEAP32[$157 >> 2] = $22; //@line 30012
   $158 = $ReallocAsyncCtx2 + 44 | 0; //@line 30013
   HEAP32[$158 >> 2] = $24; //@line 30014
   sp = STACKTOP; //@line 30015
   return;
  }
 }
 if ($122 & 8) {
  HEAP8[$4 >> 0] = $122 & -9; //@line 30023
  $163 = HEAP32[$2 + 1324 >> 2] | 0; //@line 30025
  $164 = $163 + 32 | 0; //@line 30026
  $166 = __ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0; //@line 30028
  $167 = $163 + 44 | 0; //@line 30029
  $168 = HEAP32[$167 >> 2] | 0; //@line 30030
  if (!$168) {
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(60) | 0; //@line 30033
   _mbed_assert_internal(14997, 15002, 1102); //@line 30034
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 455; //@line 30037
    $170 = $ReallocAsyncCtx17 + 4 | 0; //@line 30038
    HEAP32[$170 >> 2] = $4; //@line 30039
    $171 = $ReallocAsyncCtx17 + 8 | 0; //@line 30040
    HEAP32[$171 >> 2] = $2; //@line 30041
    $172 = $ReallocAsyncCtx17 + 12 | 0; //@line 30042
    HEAP32[$172 >> 2] = $6; //@line 30043
    $173 = $ReallocAsyncCtx17 + 16 | 0; //@line 30044
    HEAP32[$173 >> 2] = $8; //@line 30045
    $174 = $ReallocAsyncCtx17 + 20 | 0; //@line 30046
    HEAP32[$174 >> 2] = $10; //@line 30047
    $175 = $ReallocAsyncCtx17 + 24 | 0; //@line 30048
    HEAP32[$175 >> 2] = $12; //@line 30049
    $176 = $ReallocAsyncCtx17 + 28 | 0; //@line 30050
    HEAP32[$176 >> 2] = $14; //@line 30051
    $177 = $ReallocAsyncCtx17 + 32 | 0; //@line 30052
    HEAP32[$177 >> 2] = $18; //@line 30053
    $178 = $ReallocAsyncCtx17 + 36 | 0; //@line 30054
    HEAP32[$178 >> 2] = $20; //@line 30055
    $179 = $ReallocAsyncCtx17 + 40 | 0; //@line 30056
    HEAP32[$179 >> 2] = $22; //@line 30057
    $180 = $ReallocAsyncCtx17 + 44 | 0; //@line 30058
    HEAP32[$180 >> 2] = $24; //@line 30059
    $181 = $ReallocAsyncCtx17 + 48 | 0; //@line 30060
    HEAP32[$181 >> 2] = $167; //@line 30061
    $182 = $ReallocAsyncCtx17 + 52 | 0; //@line 30062
    HEAP32[$182 >> 2] = $164; //@line 30063
    $183 = $ReallocAsyncCtx17 + 56 | 0; //@line 30064
    HEAP32[$183 >> 2] = $166; //@line 30065
    sp = STACKTOP; //@line 30066
    return;
   }
   ___async_unwind = 0; //@line 30069
   HEAP32[$ReallocAsyncCtx17 >> 2] = 455; //@line 30070
   $170 = $ReallocAsyncCtx17 + 4 | 0; //@line 30071
   HEAP32[$170 >> 2] = $4; //@line 30072
   $171 = $ReallocAsyncCtx17 + 8 | 0; //@line 30073
   HEAP32[$171 >> 2] = $2; //@line 30074
   $172 = $ReallocAsyncCtx17 + 12 | 0; //@line 30075
   HEAP32[$172 >> 2] = $6; //@line 30076
   $173 = $ReallocAsyncCtx17 + 16 | 0; //@line 30077
   HEAP32[$173 >> 2] = $8; //@line 30078
   $174 = $ReallocAsyncCtx17 + 20 | 0; //@line 30079
   HEAP32[$174 >> 2] = $10; //@line 30080
   $175 = $ReallocAsyncCtx17 + 24 | 0; //@line 30081
   HEAP32[$175 >> 2] = $12; //@line 30082
   $176 = $ReallocAsyncCtx17 + 28 | 0; //@line 30083
   HEAP32[$176 >> 2] = $14; //@line 30084
   $177 = $ReallocAsyncCtx17 + 32 | 0; //@line 30085
   HEAP32[$177 >> 2] = $18; //@line 30086
   $178 = $ReallocAsyncCtx17 + 36 | 0; //@line 30087
   HEAP32[$178 >> 2] = $20; //@line 30088
   $179 = $ReallocAsyncCtx17 + 40 | 0; //@line 30089
   HEAP32[$179 >> 2] = $22; //@line 30090
   $180 = $ReallocAsyncCtx17 + 44 | 0; //@line 30091
   HEAP32[$180 >> 2] = $24; //@line 30092
   $181 = $ReallocAsyncCtx17 + 48 | 0; //@line 30093
   HEAP32[$181 >> 2] = $167; //@line 30094
   $182 = $ReallocAsyncCtx17 + 52 | 0; //@line 30095
   HEAP32[$182 >> 2] = $164; //@line 30096
   $183 = $ReallocAsyncCtx17 + 56 | 0; //@line 30097
   HEAP32[$183 >> 2] = $166; //@line 30098
   sp = STACKTOP; //@line 30099
   return;
  } else {
   $184 = HEAP32[$168 >> 2] | 0; //@line 30102
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 30103
   FUNCTION_TABLE_vii[$184 & 31]($164, $166); //@line 30104
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 456; //@line 30107
    $185 = $ReallocAsyncCtx3 + 4 | 0; //@line 30108
    HEAP32[$185 >> 2] = $6; //@line 30109
    $186 = $ReallocAsyncCtx3 + 8 | 0; //@line 30110
    HEAP32[$186 >> 2] = $8; //@line 30111
    $187 = $ReallocAsyncCtx3 + 12 | 0; //@line 30112
    HEAP32[$187 >> 2] = $10; //@line 30113
    $188 = $ReallocAsyncCtx3 + 16 | 0; //@line 30114
    HEAP32[$188 >> 2] = $12; //@line 30115
    $189 = $ReallocAsyncCtx3 + 20 | 0; //@line 30116
    HEAP32[$189 >> 2] = $14; //@line 30117
    $190 = $ReallocAsyncCtx3 + 24 | 0; //@line 30118
    HEAP32[$190 >> 2] = $4; //@line 30119
    $191 = $ReallocAsyncCtx3 + 28 | 0; //@line 30120
    HEAP32[$191 >> 2] = $2; //@line 30121
    $192 = $ReallocAsyncCtx3 + 32 | 0; //@line 30122
    HEAP32[$192 >> 2] = $18; //@line 30123
    $193 = $ReallocAsyncCtx3 + 36 | 0; //@line 30124
    HEAP32[$193 >> 2] = $20; //@line 30125
    $194 = $ReallocAsyncCtx3 + 40 | 0; //@line 30126
    HEAP32[$194 >> 2] = $22; //@line 30127
    $195 = $ReallocAsyncCtx3 + 44 | 0; //@line 30128
    HEAP32[$195 >> 2] = $24; //@line 30129
    sp = STACKTOP; //@line 30130
    return;
   }
   ___async_unwind = 0; //@line 30133
   HEAP32[$ReallocAsyncCtx3 >> 2] = 456; //@line 30134
   $185 = $ReallocAsyncCtx3 + 4 | 0; //@line 30135
   HEAP32[$185 >> 2] = $6; //@line 30136
   $186 = $ReallocAsyncCtx3 + 8 | 0; //@line 30137
   HEAP32[$186 >> 2] = $8; //@line 30138
   $187 = $ReallocAsyncCtx3 + 12 | 0; //@line 30139
   HEAP32[$187 >> 2] = $10; //@line 30140
   $188 = $ReallocAsyncCtx3 + 16 | 0; //@line 30141
   HEAP32[$188 >> 2] = $12; //@line 30142
   $189 = $ReallocAsyncCtx3 + 20 | 0; //@line 30143
   HEAP32[$189 >> 2] = $14; //@line 30144
   $190 = $ReallocAsyncCtx3 + 24 | 0; //@line 30145
   HEAP32[$190 >> 2] = $4; //@line 30146
   $191 = $ReallocAsyncCtx3 + 28 | 0; //@line 30147
   HEAP32[$191 >> 2] = $2; //@line 30148
   $192 = $ReallocAsyncCtx3 + 32 | 0; //@line 30149
   HEAP32[$192 >> 2] = $18; //@line 30150
   $193 = $ReallocAsyncCtx3 + 36 | 0; //@line 30151
   HEAP32[$193 >> 2] = $20; //@line 30152
   $194 = $ReallocAsyncCtx3 + 40 | 0; //@line 30153
   HEAP32[$194 >> 2] = $22; //@line 30154
   $195 = $ReallocAsyncCtx3 + 44 | 0; //@line 30155
   HEAP32[$195 >> 2] = $24; //@line 30156
   sp = STACKTOP; //@line 30157
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($2 + 4 | 0) | 0) {
  _printf(12943, $18) | 0; //@line 30164
  _printf(13090, $22) | 0; //@line 30165
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 30166
  _putchar(10) | 0; //@line 30167
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 457; //@line 30170
   $198 = $ReallocAsyncCtx7 + 4 | 0; //@line 30171
   HEAP32[$198 >> 2] = $4; //@line 30172
   $199 = $ReallocAsyncCtx7 + 8 | 0; //@line 30173
   HEAP32[$199 >> 2] = $2; //@line 30174
   $200 = $ReallocAsyncCtx7 + 12 | 0; //@line 30175
   HEAP32[$200 >> 2] = $6; //@line 30176
   $201 = $ReallocAsyncCtx7 + 16 | 0; //@line 30177
   HEAP32[$201 >> 2] = $8; //@line 30178
   $202 = $ReallocAsyncCtx7 + 20 | 0; //@line 30179
   HEAP32[$202 >> 2] = $10; //@line 30180
   $203 = $ReallocAsyncCtx7 + 24 | 0; //@line 30181
   HEAP32[$203 >> 2] = $12; //@line 30182
   $204 = $ReallocAsyncCtx7 + 28 | 0; //@line 30183
   HEAP32[$204 >> 2] = $14; //@line 30184
   sp = STACKTOP; //@line 30185
   return;
  }
  ___async_unwind = 0; //@line 30188
  HEAP32[$ReallocAsyncCtx7 >> 2] = 457; //@line 30189
  $198 = $ReallocAsyncCtx7 + 4 | 0; //@line 30190
  HEAP32[$198 >> 2] = $4; //@line 30191
  $199 = $ReallocAsyncCtx7 + 8 | 0; //@line 30192
  HEAP32[$199 >> 2] = $2; //@line 30193
  $200 = $ReallocAsyncCtx7 + 12 | 0; //@line 30194
  HEAP32[$200 >> 2] = $6; //@line 30195
  $201 = $ReallocAsyncCtx7 + 16 | 0; //@line 30196
  HEAP32[$201 >> 2] = $8; //@line 30197
  $202 = $ReallocAsyncCtx7 + 20 | 0; //@line 30198
  HEAP32[$202 >> 2] = $10; //@line 30199
  $203 = $ReallocAsyncCtx7 + 24 | 0; //@line 30200
  HEAP32[$203 >> 2] = $12; //@line 30201
  $204 = $ReallocAsyncCtx7 + 28 | 0; //@line 30202
  HEAP32[$204 >> 2] = $14; //@line 30203
  sp = STACKTOP; //@line 30204
  return;
 }
 $205 = HEAP8[$4 >> 0] & -33; //@line 30208
 HEAP8[$4 >> 0] = $205; //@line 30209
 do {
  if (!($205 & 2)) {
   $244 = $205; //@line 30214
  } else {
   $216 = $205 & -3; //@line 30216
   HEAP8[$4 >> 0] = $216; //@line 30217
   if ((HEAP32[$2 + 360 >> 2] | 0) == 2) {
    _printf(12943, $8) | 0; //@line 30222
    _printf(12970, $12) | 0; //@line 30223
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 30224
    _putchar(10) | 0; //@line 30225
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 459; //@line 30228
     $220 = $ReallocAsyncCtx6 + 4 | 0; //@line 30229
     HEAP32[$220 >> 2] = $4; //@line 30230
     $221 = $ReallocAsyncCtx6 + 8 | 0; //@line 30231
     HEAP32[$221 >> 2] = $2; //@line 30232
     $222 = $ReallocAsyncCtx6 + 12 | 0; //@line 30233
     HEAP32[$222 >> 2] = $6; //@line 30234
     $223 = $ReallocAsyncCtx6 + 16 | 0; //@line 30235
     HEAP32[$223 >> 2] = $6; //@line 30236
     sp = STACKTOP; //@line 30237
     return;
    }
    ___async_unwind = 0; //@line 30240
    HEAP32[$ReallocAsyncCtx6 >> 2] = 459; //@line 30241
    $220 = $ReallocAsyncCtx6 + 4 | 0; //@line 30242
    HEAP32[$220 >> 2] = $4; //@line 30243
    $221 = $ReallocAsyncCtx6 + 8 | 0; //@line 30244
    HEAP32[$221 >> 2] = $2; //@line 30245
    $222 = $ReallocAsyncCtx6 + 12 | 0; //@line 30246
    HEAP32[$222 >> 2] = $6; //@line 30247
    $223 = $ReallocAsyncCtx6 + 16 | 0; //@line 30248
    HEAP32[$223 >> 2] = $6; //@line 30249
    sp = STACKTOP; //@line 30250
    return;
   }
   if ($216 & 4) {
    $242 = $216 & -5; //@line 30256
    HEAP8[$4 >> 0] = $242; //@line 30257
    $244 = $242; //@line 30258
    break;
   }
   $227 = HEAP32[$2 + 1324 >> 2] | 0; //@line 30262
   $228 = $227 + 16 | 0; //@line 30263
   $230 = __ZN11LoRaMacMcps14get_indicationEv($2 + 288 | 0) | 0; //@line 30265
   $231 = $227 + 28 | 0; //@line 30266
   $232 = HEAP32[$231 >> 2] | 0; //@line 30267
   if (!$232) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 30270
    _mbed_assert_internal(14997, 15002, 1102); //@line 30271
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 462; //@line 30274
     $234 = $ReallocAsyncCtx15 + 4 | 0; //@line 30275
     HEAP32[$234 >> 2] = $231; //@line 30276
     $235 = $ReallocAsyncCtx15 + 8 | 0; //@line 30277
     HEAP32[$235 >> 2] = $228; //@line 30278
     $236 = $ReallocAsyncCtx15 + 12 | 0; //@line 30279
     HEAP32[$236 >> 2] = $230; //@line 30280
     $237 = $ReallocAsyncCtx15 + 16 | 0; //@line 30281
     HEAP32[$237 >> 2] = $4; //@line 30282
     $238 = $ReallocAsyncCtx15 + 20 | 0; //@line 30283
     HEAP32[$238 >> 2] = $2; //@line 30284
     sp = STACKTOP; //@line 30285
     return;
    }
    ___async_unwind = 0; //@line 30288
    HEAP32[$ReallocAsyncCtx15 >> 2] = 462; //@line 30289
    $234 = $ReallocAsyncCtx15 + 4 | 0; //@line 30290
    HEAP32[$234 >> 2] = $231; //@line 30291
    $235 = $ReallocAsyncCtx15 + 8 | 0; //@line 30292
    HEAP32[$235 >> 2] = $228; //@line 30293
    $236 = $ReallocAsyncCtx15 + 12 | 0; //@line 30294
    HEAP32[$236 >> 2] = $230; //@line 30295
    $237 = $ReallocAsyncCtx15 + 16 | 0; //@line 30296
    HEAP32[$237 >> 2] = $4; //@line 30297
    $238 = $ReallocAsyncCtx15 + 20 | 0; //@line 30298
    HEAP32[$238 >> 2] = $2; //@line 30299
    sp = STACKTOP; //@line 30300
    return;
   } else {
    $239 = HEAP32[$232 >> 2] | 0; //@line 30303
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 30304
    FUNCTION_TABLE_vii[$239 & 31]($228, $230); //@line 30305
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 463; //@line 30308
     $240 = $ReallocAsyncCtx4 + 4 | 0; //@line 30309
     HEAP32[$240 >> 2] = $4; //@line 30310
     $241 = $ReallocAsyncCtx4 + 8 | 0; //@line 30311
     HEAP32[$241 >> 2] = $2; //@line 30312
     sp = STACKTOP; //@line 30313
     return;
    }
    ___async_unwind = 0; //@line 30316
    HEAP32[$ReallocAsyncCtx4 >> 2] = 463; //@line 30317
    $240 = $ReallocAsyncCtx4 + 4 | 0; //@line 30318
    HEAP32[$240 >> 2] = $4; //@line 30319
    $241 = $ReallocAsyncCtx4 + 8 | 0; //@line 30320
    HEAP32[$241 >> 2] = $2; //@line 30321
    sp = STACKTOP; //@line 30322
    return;
   }
  }
 } while (0);
 if (!($244 & 16)) {
  return;
 }
 HEAP8[$4 >> 0] = $244 & -17; //@line 30333
 $248 = HEAP32[$2 + 1324 >> 2] | 0; //@line 30335
 $249 = $248 + 48 | 0; //@line 30336
 $251 = __ZN11LoRaMacMlme14get_indicationEv($2 + 264 | 0) | 0; //@line 30338
 $252 = $248 + 60 | 0; //@line 30339
 $253 = HEAP32[$252 >> 2] | 0; //@line 30340
 if (!$253) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 30343
  _mbed_assert_internal(14997, 15002, 1102); //@line 30344
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 464; //@line 30347
   $255 = $ReallocAsyncCtx14 + 4 | 0; //@line 30348
   HEAP32[$255 >> 2] = $252; //@line 30349
   $256 = $ReallocAsyncCtx14 + 8 | 0; //@line 30350
   HEAP32[$256 >> 2] = $249; //@line 30351
   $257 = $ReallocAsyncCtx14 + 12 | 0; //@line 30352
   HEAP32[$257 >> 2] = $251; //@line 30353
   sp = STACKTOP; //@line 30354
   return;
  }
  ___async_unwind = 0; //@line 30357
  HEAP32[$ReallocAsyncCtx14 >> 2] = 464; //@line 30358
  $255 = $ReallocAsyncCtx14 + 4 | 0; //@line 30359
  HEAP32[$255 >> 2] = $252; //@line 30360
  $256 = $ReallocAsyncCtx14 + 8 | 0; //@line 30361
  HEAP32[$256 >> 2] = $249; //@line 30362
  $257 = $ReallocAsyncCtx14 + 12 | 0; //@line 30363
  HEAP32[$257 >> 2] = $251; //@line 30364
  sp = STACKTOP; //@line 30365
  return;
 } else {
  $258 = HEAP32[$253 >> 2] | 0; //@line 30368
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 30369
  FUNCTION_TABLE_vii[$258 & 31]($249, $251); //@line 30370
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 465; //@line 30373
   sp = STACKTOP; //@line 30374
   return;
  }
  ___async_unwind = 0; //@line 30377
  HEAP32[$ReallocAsyncCtx5 >> 2] = 465; //@line 30378
  sp = STACKTOP; //@line 30379
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_439($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $119 = 0, $12 = 0, $121 = 0, $122 = 0, $127 = 0, $129 = 0, $130 = 0, $131 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $163 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $216 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $227 = 0, $228 = 0, $230 = 0, $231 = 0, $232 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $244 = 0, $248 = 0, $249 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $26 = 0, $28 = 0, $30 = 0, $36 = 0, $4 = 0, $50 = 0, $54 = 0, $59 = 0, $6 = 0, $65 = 0, $66 = 0, $71 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $96 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 28718
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28720
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28722
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28724
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28726
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28728
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28730
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28732
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28734
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28736
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28738
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 28740
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 28742
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 28744
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 28746
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 28748
 do {
  if (HEAP8[$4 >> 0] & 2) {
   $36 = $2 + 288 | 0; //@line 28756
   if (!(HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 10 >> 0] | 0)) {
    if ((HEAPU8[$2 + 895 >> 0] | 0) <= (HEAPU8[$2 + 894 >> 0] | 0)) {
     break;
    }
   }
   HEAP8[$2 + 377 >> 0] = 0; //@line 28772
   HEAP8[$30 >> 0] = 0; //@line 28773
   if (!(HEAP8[$2 + 370 >> 0] | 0)) {
    $50 = $2 + 956 | 0; //@line 28778
    HEAP32[$50 >> 2] = (HEAP32[$50 >> 2] | 0) + 1; //@line 28781
   }
   $54 = HEAP8[$2 + 895 >> 0] | 0; //@line 28784
   HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 11 >> 0] = $54; //@line 28787
   HEAP32[$16 >> 2] = HEAP32[$16 >> 2] & -2; //@line 28790
  }
 } while (0);
 $59 = $2 + 377 | 0; //@line 28793
 if (HEAP8[$59 >> 0] | 0) {
  if (!(HEAP32[$16 >> 2] & 16)) {
   HEAP8[$59 >> 0] = 0; //@line 28801
   $65 = $2 + 895 | 0; //@line 28802
   $66 = HEAP8[$65 >> 0] | 0; //@line 28803
   if (!(($66 & 255) < 9 ? ($66 & 255) < (HEAPU8[$2 + 894 >> 0] | 0) : 0)) {
    $96 = HEAP32[$2 >> 2] | 0; //@line 28810
    $99 = HEAP32[(HEAP32[$96 >> 2] | 0) + 16 >> 2] | 0; //@line 28813
    $ReallocAsyncCtx = _emscripten_realloc_async_context(68) | 0; //@line 28814
    FUNCTION_TABLE_vi[$99 & 1023]($96); //@line 28815
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 452; //@line 28818
     $100 = $ReallocAsyncCtx + 4 | 0; //@line 28819
     HEAP32[$100 >> 2] = $6; //@line 28820
     $101 = $ReallocAsyncCtx + 8 | 0; //@line 28821
     HEAP32[$101 >> 2] = $8; //@line 28822
     $102 = $ReallocAsyncCtx + 12 | 0; //@line 28823
     HEAP32[$102 >> 2] = $10; //@line 28824
     $103 = $ReallocAsyncCtx + 16 | 0; //@line 28825
     HEAP32[$103 >> 2] = $12; //@line 28826
     $104 = $ReallocAsyncCtx + 20 | 0; //@line 28827
     HEAP32[$104 >> 2] = $14; //@line 28828
     $105 = $ReallocAsyncCtx + 24 | 0; //@line 28829
     HEAP32[$105 >> 2] = $4; //@line 28830
     $106 = $ReallocAsyncCtx + 28 | 0; //@line 28831
     HEAP32[$106 >> 2] = $2; //@line 28832
     $107 = $ReallocAsyncCtx + 32 | 0; //@line 28833
     HEAP32[$107 >> 2] = $16; //@line 28834
     $108 = $ReallocAsyncCtx + 36 | 0; //@line 28835
     HEAP32[$108 >> 2] = $30; //@line 28836
     $109 = $ReallocAsyncCtx + 40 | 0; //@line 28837
     HEAP32[$109 >> 2] = $65; //@line 28838
     $110 = $ReallocAsyncCtx + 44 | 0; //@line 28839
     HEAP32[$110 >> 2] = $26; //@line 28840
     $111 = $ReallocAsyncCtx + 48 | 0; //@line 28841
     HEAP32[$111 >> 2] = $28; //@line 28842
     $112 = $ReallocAsyncCtx + 52 | 0; //@line 28843
     HEAP32[$112 >> 2] = $18; //@line 28844
     $113 = $ReallocAsyncCtx + 56 | 0; //@line 28845
     HEAP32[$113 >> 2] = $20; //@line 28846
     $114 = $ReallocAsyncCtx + 60 | 0; //@line 28847
     HEAP32[$114 >> 2] = $22; //@line 28848
     $115 = $ReallocAsyncCtx + 64 | 0; //@line 28849
     HEAP32[$115 >> 2] = $24; //@line 28850
     sp = STACKTOP; //@line 28851
     return;
    }
    ___async_unwind = 0; //@line 28854
    HEAP32[$ReallocAsyncCtx >> 2] = 452; //@line 28855
    $100 = $ReallocAsyncCtx + 4 | 0; //@line 28856
    HEAP32[$100 >> 2] = $6; //@line 28857
    $101 = $ReallocAsyncCtx + 8 | 0; //@line 28858
    HEAP32[$101 >> 2] = $8; //@line 28859
    $102 = $ReallocAsyncCtx + 12 | 0; //@line 28860
    HEAP32[$102 >> 2] = $10; //@line 28861
    $103 = $ReallocAsyncCtx + 16 | 0; //@line 28862
    HEAP32[$103 >> 2] = $12; //@line 28863
    $104 = $ReallocAsyncCtx + 20 | 0; //@line 28864
    HEAP32[$104 >> 2] = $14; //@line 28865
    $105 = $ReallocAsyncCtx + 24 | 0; //@line 28866
    HEAP32[$105 >> 2] = $4; //@line 28867
    $106 = $ReallocAsyncCtx + 28 | 0; //@line 28868
    HEAP32[$106 >> 2] = $2; //@line 28869
    $107 = $ReallocAsyncCtx + 32 | 0; //@line 28870
    HEAP32[$107 >> 2] = $16; //@line 28871
    $108 = $ReallocAsyncCtx + 36 | 0; //@line 28872
    HEAP32[$108 >> 2] = $30; //@line 28873
    $109 = $ReallocAsyncCtx + 40 | 0; //@line 28874
    HEAP32[$109 >> 2] = $65; //@line 28875
    $110 = $ReallocAsyncCtx + 44 | 0; //@line 28876
    HEAP32[$110 >> 2] = $26; //@line 28877
    $111 = $ReallocAsyncCtx + 48 | 0; //@line 28878
    HEAP32[$111 >> 2] = $28; //@line 28879
    $112 = $ReallocAsyncCtx + 52 | 0; //@line 28880
    HEAP32[$112 >> 2] = $18; //@line 28881
    $113 = $ReallocAsyncCtx + 56 | 0; //@line 28882
    HEAP32[$113 >> 2] = $20; //@line 28883
    $114 = $ReallocAsyncCtx + 60 | 0; //@line 28884
    HEAP32[$114 >> 2] = $22; //@line 28885
    $115 = $ReallocAsyncCtx + 64 | 0; //@line 28886
    HEAP32[$115 >> 2] = $24; //@line 28887
    sp = STACKTOP; //@line 28888
    return;
   }
   $71 = $66 + 1 << 24 >> 24; //@line 28891
   HEAP8[$65 >> 0] = $71; //@line 28892
   if ($71 & 1) {
    $75 = $2 + 1097 | 0; //@line 28897
    HEAP8[$75 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa(HEAP32[$2 >> 2] | 0, HEAP8[$75 >> 0] | 0) | 0; //@line 28900
   }
   $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 28902
   $78 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 28903
   if (___async) {
    HEAP32[$ReallocAsyncCtx9 >> 2] = 451; //@line 28906
    $79 = $ReallocAsyncCtx9 + 4 | 0; //@line 28907
    HEAP32[$79 >> 2] = $4; //@line 28908
    $80 = $ReallocAsyncCtx9 + 8 | 0; //@line 28909
    HEAP32[$80 >> 2] = $2; //@line 28910
    $81 = $ReallocAsyncCtx9 + 12 | 0; //@line 28911
    HEAP32[$81 >> 2] = $6; //@line 28912
    $82 = $ReallocAsyncCtx9 + 16 | 0; //@line 28913
    HEAP32[$82 >> 2] = $8; //@line 28914
    $83 = $ReallocAsyncCtx9 + 20 | 0; //@line 28915
    HEAP32[$83 >> 2] = $10; //@line 28916
    $84 = $ReallocAsyncCtx9 + 24 | 0; //@line 28917
    HEAP32[$84 >> 2] = $12; //@line 28918
    $85 = $ReallocAsyncCtx9 + 28 | 0; //@line 28919
    HEAP32[$85 >> 2] = $14; //@line 28920
    $86 = $ReallocAsyncCtx9 + 32 | 0; //@line 28921
    HEAP32[$86 >> 2] = $18; //@line 28922
    $87 = $ReallocAsyncCtx9 + 36 | 0; //@line 28923
    HEAP32[$87 >> 2] = $20; //@line 28924
    $88 = $ReallocAsyncCtx9 + 40 | 0; //@line 28925
    HEAP32[$88 >> 2] = $22; //@line 28926
    $89 = $ReallocAsyncCtx9 + 44 | 0; //@line 28927
    HEAP32[$89 >> 2] = $24; //@line 28928
    $90 = $ReallocAsyncCtx9 + 48 | 0; //@line 28929
    HEAP32[$90 >> 2] = $16; //@line 28930
    $91 = $ReallocAsyncCtx9 + 52 | 0; //@line 28931
    HEAP32[$91 >> 2] = $30; //@line 28932
    $92 = $ReallocAsyncCtx9 + 56 | 0; //@line 28933
    HEAP32[$92 >> 2] = $65; //@line 28934
    $93 = $ReallocAsyncCtx9 + 60 | 0; //@line 28935
    HEAP32[$93 >> 2] = $26; //@line 28936
    $94 = $ReallocAsyncCtx9 + 64 | 0; //@line 28937
    HEAP32[$94 >> 2] = $28; //@line 28938
    sp = STACKTOP; //@line 28939
    return;
   }
   HEAP32[___async_retval >> 2] = $78; //@line 28943
   ___async_unwind = 0; //@line 28944
   HEAP32[$ReallocAsyncCtx9 >> 2] = 451; //@line 28945
   $79 = $ReallocAsyncCtx9 + 4 | 0; //@line 28946
   HEAP32[$79 >> 2] = $4; //@line 28947
   $80 = $ReallocAsyncCtx9 + 8 | 0; //@line 28948
   HEAP32[$80 >> 2] = $2; //@line 28949
   $81 = $ReallocAsyncCtx9 + 12 | 0; //@line 28950
   HEAP32[$81 >> 2] = $6; //@line 28951
   $82 = $ReallocAsyncCtx9 + 16 | 0; //@line 28952
   HEAP32[$82 >> 2] = $8; //@line 28953
   $83 = $ReallocAsyncCtx9 + 20 | 0; //@line 28954
   HEAP32[$83 >> 2] = $10; //@line 28955
   $84 = $ReallocAsyncCtx9 + 24 | 0; //@line 28956
   HEAP32[$84 >> 2] = $12; //@line 28957
   $85 = $ReallocAsyncCtx9 + 28 | 0; //@line 28958
   HEAP32[$85 >> 2] = $14; //@line 28959
   $86 = $ReallocAsyncCtx9 + 32 | 0; //@line 28960
   HEAP32[$86 >> 2] = $18; //@line 28961
   $87 = $ReallocAsyncCtx9 + 36 | 0; //@line 28962
   HEAP32[$87 >> 2] = $20; //@line 28963
   $88 = $ReallocAsyncCtx9 + 40 | 0; //@line 28964
   HEAP32[$88 >> 2] = $22; //@line 28965
   $89 = $ReallocAsyncCtx9 + 44 | 0; //@line 28966
   HEAP32[$89 >> 2] = $24; //@line 28967
   $90 = $ReallocAsyncCtx9 + 48 | 0; //@line 28968
   HEAP32[$90 >> 2] = $16; //@line 28969
   $91 = $ReallocAsyncCtx9 + 52 | 0; //@line 28970
   HEAP32[$91 >> 2] = $30; //@line 28971
   $92 = $ReallocAsyncCtx9 + 56 | 0; //@line 28972
   HEAP32[$92 >> 2] = $65; //@line 28973
   $93 = $ReallocAsyncCtx9 + 60 | 0; //@line 28974
   HEAP32[$93 >> 2] = $26; //@line 28975
   $94 = $ReallocAsyncCtx9 + 64 | 0; //@line 28976
   HEAP32[$94 >> 2] = $28; //@line 28977
   sp = STACKTOP; //@line 28978
   return;
  }
 }
 $116 = HEAP32[$16 >> 2] | 0; //@line 28982
 $119 = $116 & -3; //@line 28985
 if (!($116 & 2)) {
  $121 = $116; //@line 28987
 } else {
  HEAP32[$16 >> 2] = $119; //@line 28989
  $121 = $119; //@line 28990
 }
 if ($121 | 0) {
  $206 = HEAP32[$26 >> 2] | 0; //@line 28994
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 28995
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($206, $28, 1e3); //@line 28996
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 458; //@line 28999
   $207 = $ReallocAsyncCtx8 + 4 | 0; //@line 29000
   HEAP32[$207 >> 2] = $4; //@line 29001
   $208 = $ReallocAsyncCtx8 + 8 | 0; //@line 29002
   HEAP32[$208 >> 2] = $2; //@line 29003
   $209 = $ReallocAsyncCtx8 + 12 | 0; //@line 29004
   HEAP32[$209 >> 2] = $6; //@line 29005
   $210 = $ReallocAsyncCtx8 + 16 | 0; //@line 29006
   HEAP32[$210 >> 2] = $8; //@line 29007
   $211 = $ReallocAsyncCtx8 + 20 | 0; //@line 29008
   HEAP32[$211 >> 2] = $10; //@line 29009
   $212 = $ReallocAsyncCtx8 + 24 | 0; //@line 29010
   HEAP32[$212 >> 2] = $12; //@line 29011
   $213 = $ReallocAsyncCtx8 + 28 | 0; //@line 29012
   HEAP32[$213 >> 2] = $14; //@line 29013
   sp = STACKTOP; //@line 29014
   return;
  }
  ___async_unwind = 0; //@line 29017
  HEAP32[$ReallocAsyncCtx8 >> 2] = 458; //@line 29018
  $207 = $ReallocAsyncCtx8 + 4 | 0; //@line 29019
  HEAP32[$207 >> 2] = $4; //@line 29020
  $208 = $ReallocAsyncCtx8 + 8 | 0; //@line 29021
  HEAP32[$208 >> 2] = $2; //@line 29022
  $209 = $ReallocAsyncCtx8 + 12 | 0; //@line 29023
  HEAP32[$209 >> 2] = $6; //@line 29024
  $210 = $ReallocAsyncCtx8 + 16 | 0; //@line 29025
  HEAP32[$210 >> 2] = $8; //@line 29026
  $211 = $ReallocAsyncCtx8 + 20 | 0; //@line 29027
  HEAP32[$211 >> 2] = $10; //@line 29028
  $212 = $ReallocAsyncCtx8 + 24 | 0; //@line 29029
  HEAP32[$212 >> 2] = $12; //@line 29030
  $213 = $ReallocAsyncCtx8 + 28 | 0; //@line 29031
  HEAP32[$213 >> 2] = $14; //@line 29032
  sp = STACKTOP; //@line 29033
  return;
 }
 $122 = HEAP8[$4 >> 0] | 0; //@line 29036
 if ($122 & 1) {
  HEAP8[$4 >> 0] = $122 & -2; //@line 29041
  $127 = HEAP32[$2 + 1324 >> 2] | 0; //@line 29043
  $129 = __ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0; //@line 29045
  $130 = $127 + 12 | 0; //@line 29046
  $131 = HEAP32[$130 >> 2] | 0; //@line 29047
  if (!$131) {
   $ReallocAsyncCtx18 = _emscripten_realloc_async_context(60) | 0; //@line 29050
   _mbed_assert_internal(14997, 15002, 1102); //@line 29051
   if (___async) {
    HEAP32[$ReallocAsyncCtx18 >> 2] = 453; //@line 29054
    $133 = $ReallocAsyncCtx18 + 4 | 0; //@line 29055
    HEAP32[$133 >> 2] = $130; //@line 29056
    $134 = $ReallocAsyncCtx18 + 8 | 0; //@line 29057
    HEAP32[$134 >> 2] = $4; //@line 29058
    $135 = $ReallocAsyncCtx18 + 12 | 0; //@line 29059
    HEAP32[$135 >> 2] = $2; //@line 29060
    $136 = $ReallocAsyncCtx18 + 16 | 0; //@line 29061
    HEAP32[$136 >> 2] = $6; //@line 29062
    $137 = $ReallocAsyncCtx18 + 20 | 0; //@line 29063
    HEAP32[$137 >> 2] = $8; //@line 29064
    $138 = $ReallocAsyncCtx18 + 24 | 0; //@line 29065
    HEAP32[$138 >> 2] = $10; //@line 29066
    $139 = $ReallocAsyncCtx18 + 28 | 0; //@line 29067
    HEAP32[$139 >> 2] = $12; //@line 29068
    $140 = $ReallocAsyncCtx18 + 32 | 0; //@line 29069
    HEAP32[$140 >> 2] = $14; //@line 29070
    $141 = $ReallocAsyncCtx18 + 36 | 0; //@line 29071
    HEAP32[$141 >> 2] = $18; //@line 29072
    $142 = $ReallocAsyncCtx18 + 40 | 0; //@line 29073
    HEAP32[$142 >> 2] = $20; //@line 29074
    $143 = $ReallocAsyncCtx18 + 44 | 0; //@line 29075
    HEAP32[$143 >> 2] = $22; //@line 29076
    $144 = $ReallocAsyncCtx18 + 48 | 0; //@line 29077
    HEAP32[$144 >> 2] = $24; //@line 29078
    $145 = $ReallocAsyncCtx18 + 52 | 0; //@line 29079
    HEAP32[$145 >> 2] = $127; //@line 29080
    $146 = $ReallocAsyncCtx18 + 56 | 0; //@line 29081
    HEAP32[$146 >> 2] = $129; //@line 29082
    sp = STACKTOP; //@line 29083
    return;
   }
   ___async_unwind = 0; //@line 29086
   HEAP32[$ReallocAsyncCtx18 >> 2] = 453; //@line 29087
   $133 = $ReallocAsyncCtx18 + 4 | 0; //@line 29088
   HEAP32[$133 >> 2] = $130; //@line 29089
   $134 = $ReallocAsyncCtx18 + 8 | 0; //@line 29090
   HEAP32[$134 >> 2] = $4; //@line 29091
   $135 = $ReallocAsyncCtx18 + 12 | 0; //@line 29092
   HEAP32[$135 >> 2] = $2; //@line 29093
   $136 = $ReallocAsyncCtx18 + 16 | 0; //@line 29094
   HEAP32[$136 >> 2] = $6; //@line 29095
   $137 = $ReallocAsyncCtx18 + 20 | 0; //@line 29096
   HEAP32[$137 >> 2] = $8; //@line 29097
   $138 = $ReallocAsyncCtx18 + 24 | 0; //@line 29098
   HEAP32[$138 >> 2] = $10; //@line 29099
   $139 = $ReallocAsyncCtx18 + 28 | 0; //@line 29100
   HEAP32[$139 >> 2] = $12; //@line 29101
   $140 = $ReallocAsyncCtx18 + 32 | 0; //@line 29102
   HEAP32[$140 >> 2] = $14; //@line 29103
   $141 = $ReallocAsyncCtx18 + 36 | 0; //@line 29104
   HEAP32[$141 >> 2] = $18; //@line 29105
   $142 = $ReallocAsyncCtx18 + 40 | 0; //@line 29106
   HEAP32[$142 >> 2] = $20; //@line 29107
   $143 = $ReallocAsyncCtx18 + 44 | 0; //@line 29108
   HEAP32[$143 >> 2] = $22; //@line 29109
   $144 = $ReallocAsyncCtx18 + 48 | 0; //@line 29110
   HEAP32[$144 >> 2] = $24; //@line 29111
   $145 = $ReallocAsyncCtx18 + 52 | 0; //@line 29112
   HEAP32[$145 >> 2] = $127; //@line 29113
   $146 = $ReallocAsyncCtx18 + 56 | 0; //@line 29114
   HEAP32[$146 >> 2] = $129; //@line 29115
   sp = STACKTOP; //@line 29116
   return;
  } else {
   $147 = HEAP32[$131 >> 2] | 0; //@line 29119
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(48) | 0; //@line 29120
   FUNCTION_TABLE_vii[$147 & 31]($127, $129); //@line 29121
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 454; //@line 29124
    $148 = $ReallocAsyncCtx2 + 4 | 0; //@line 29125
    HEAP32[$148 >> 2] = $6; //@line 29126
    $149 = $ReallocAsyncCtx2 + 8 | 0; //@line 29127
    HEAP32[$149 >> 2] = $8; //@line 29128
    $150 = $ReallocAsyncCtx2 + 12 | 0; //@line 29129
    HEAP32[$150 >> 2] = $10; //@line 29130
    $151 = $ReallocAsyncCtx2 + 16 | 0; //@line 29131
    HEAP32[$151 >> 2] = $12; //@line 29132
    $152 = $ReallocAsyncCtx2 + 20 | 0; //@line 29133
    HEAP32[$152 >> 2] = $14; //@line 29134
    $153 = $ReallocAsyncCtx2 + 24 | 0; //@line 29135
    HEAP32[$153 >> 2] = $4; //@line 29136
    $154 = $ReallocAsyncCtx2 + 28 | 0; //@line 29137
    HEAP32[$154 >> 2] = $2; //@line 29138
    $155 = $ReallocAsyncCtx2 + 32 | 0; //@line 29139
    HEAP32[$155 >> 2] = $18; //@line 29140
    $156 = $ReallocAsyncCtx2 + 36 | 0; //@line 29141
    HEAP32[$156 >> 2] = $20; //@line 29142
    $157 = $ReallocAsyncCtx2 + 40 | 0; //@line 29143
    HEAP32[$157 >> 2] = $22; //@line 29144
    $158 = $ReallocAsyncCtx2 + 44 | 0; //@line 29145
    HEAP32[$158 >> 2] = $24; //@line 29146
    sp = STACKTOP; //@line 29147
    return;
   }
   ___async_unwind = 0; //@line 29150
   HEAP32[$ReallocAsyncCtx2 >> 2] = 454; //@line 29151
   $148 = $ReallocAsyncCtx2 + 4 | 0; //@line 29152
   HEAP32[$148 >> 2] = $6; //@line 29153
   $149 = $ReallocAsyncCtx2 + 8 | 0; //@line 29154
   HEAP32[$149 >> 2] = $8; //@line 29155
   $150 = $ReallocAsyncCtx2 + 12 | 0; //@line 29156
   HEAP32[$150 >> 2] = $10; //@line 29157
   $151 = $ReallocAsyncCtx2 + 16 | 0; //@line 29158
   HEAP32[$151 >> 2] = $12; //@line 29159
   $152 = $ReallocAsyncCtx2 + 20 | 0; //@line 29160
   HEAP32[$152 >> 2] = $14; //@line 29161
   $153 = $ReallocAsyncCtx2 + 24 | 0; //@line 29162
   HEAP32[$153 >> 2] = $4; //@line 29163
   $154 = $ReallocAsyncCtx2 + 28 | 0; //@line 29164
   HEAP32[$154 >> 2] = $2; //@line 29165
   $155 = $ReallocAsyncCtx2 + 32 | 0; //@line 29166
   HEAP32[$155 >> 2] = $18; //@line 29167
   $156 = $ReallocAsyncCtx2 + 36 | 0; //@line 29168
   HEAP32[$156 >> 2] = $20; //@line 29169
   $157 = $ReallocAsyncCtx2 + 40 | 0; //@line 29170
   HEAP32[$157 >> 2] = $22; //@line 29171
   $158 = $ReallocAsyncCtx2 + 44 | 0; //@line 29172
   HEAP32[$158 >> 2] = $24; //@line 29173
   sp = STACKTOP; //@line 29174
   return;
  }
 }
 if ($122 & 8) {
  HEAP8[$4 >> 0] = $122 & -9; //@line 29182
  $163 = HEAP32[$2 + 1324 >> 2] | 0; //@line 29184
  $164 = $163 + 32 | 0; //@line 29185
  $166 = __ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0; //@line 29187
  $167 = $163 + 44 | 0; //@line 29188
  $168 = HEAP32[$167 >> 2] | 0; //@line 29189
  if (!$168) {
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(60) | 0; //@line 29192
   _mbed_assert_internal(14997, 15002, 1102); //@line 29193
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 455; //@line 29196
    $170 = $ReallocAsyncCtx17 + 4 | 0; //@line 29197
    HEAP32[$170 >> 2] = $4; //@line 29198
    $171 = $ReallocAsyncCtx17 + 8 | 0; //@line 29199
    HEAP32[$171 >> 2] = $2; //@line 29200
    $172 = $ReallocAsyncCtx17 + 12 | 0; //@line 29201
    HEAP32[$172 >> 2] = $6; //@line 29202
    $173 = $ReallocAsyncCtx17 + 16 | 0; //@line 29203
    HEAP32[$173 >> 2] = $8; //@line 29204
    $174 = $ReallocAsyncCtx17 + 20 | 0; //@line 29205
    HEAP32[$174 >> 2] = $10; //@line 29206
    $175 = $ReallocAsyncCtx17 + 24 | 0; //@line 29207
    HEAP32[$175 >> 2] = $12; //@line 29208
    $176 = $ReallocAsyncCtx17 + 28 | 0; //@line 29209
    HEAP32[$176 >> 2] = $14; //@line 29210
    $177 = $ReallocAsyncCtx17 + 32 | 0; //@line 29211
    HEAP32[$177 >> 2] = $18; //@line 29212
    $178 = $ReallocAsyncCtx17 + 36 | 0; //@line 29213
    HEAP32[$178 >> 2] = $20; //@line 29214
    $179 = $ReallocAsyncCtx17 + 40 | 0; //@line 29215
    HEAP32[$179 >> 2] = $22; //@line 29216
    $180 = $ReallocAsyncCtx17 + 44 | 0; //@line 29217
    HEAP32[$180 >> 2] = $24; //@line 29218
    $181 = $ReallocAsyncCtx17 + 48 | 0; //@line 29219
    HEAP32[$181 >> 2] = $167; //@line 29220
    $182 = $ReallocAsyncCtx17 + 52 | 0; //@line 29221
    HEAP32[$182 >> 2] = $164; //@line 29222
    $183 = $ReallocAsyncCtx17 + 56 | 0; //@line 29223
    HEAP32[$183 >> 2] = $166; //@line 29224
    sp = STACKTOP; //@line 29225
    return;
   }
   ___async_unwind = 0; //@line 29228
   HEAP32[$ReallocAsyncCtx17 >> 2] = 455; //@line 29229
   $170 = $ReallocAsyncCtx17 + 4 | 0; //@line 29230
   HEAP32[$170 >> 2] = $4; //@line 29231
   $171 = $ReallocAsyncCtx17 + 8 | 0; //@line 29232
   HEAP32[$171 >> 2] = $2; //@line 29233
   $172 = $ReallocAsyncCtx17 + 12 | 0; //@line 29234
   HEAP32[$172 >> 2] = $6; //@line 29235
   $173 = $ReallocAsyncCtx17 + 16 | 0; //@line 29236
   HEAP32[$173 >> 2] = $8; //@line 29237
   $174 = $ReallocAsyncCtx17 + 20 | 0; //@line 29238
   HEAP32[$174 >> 2] = $10; //@line 29239
   $175 = $ReallocAsyncCtx17 + 24 | 0; //@line 29240
   HEAP32[$175 >> 2] = $12; //@line 29241
   $176 = $ReallocAsyncCtx17 + 28 | 0; //@line 29242
   HEAP32[$176 >> 2] = $14; //@line 29243
   $177 = $ReallocAsyncCtx17 + 32 | 0; //@line 29244
   HEAP32[$177 >> 2] = $18; //@line 29245
   $178 = $ReallocAsyncCtx17 + 36 | 0; //@line 29246
   HEAP32[$178 >> 2] = $20; //@line 29247
   $179 = $ReallocAsyncCtx17 + 40 | 0; //@line 29248
   HEAP32[$179 >> 2] = $22; //@line 29249
   $180 = $ReallocAsyncCtx17 + 44 | 0; //@line 29250
   HEAP32[$180 >> 2] = $24; //@line 29251
   $181 = $ReallocAsyncCtx17 + 48 | 0; //@line 29252
   HEAP32[$181 >> 2] = $167; //@line 29253
   $182 = $ReallocAsyncCtx17 + 52 | 0; //@line 29254
   HEAP32[$182 >> 2] = $164; //@line 29255
   $183 = $ReallocAsyncCtx17 + 56 | 0; //@line 29256
   HEAP32[$183 >> 2] = $166; //@line 29257
   sp = STACKTOP; //@line 29258
   return;
  } else {
   $184 = HEAP32[$168 >> 2] | 0; //@line 29261
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 29262
   FUNCTION_TABLE_vii[$184 & 31]($164, $166); //@line 29263
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 456; //@line 29266
    $185 = $ReallocAsyncCtx3 + 4 | 0; //@line 29267
    HEAP32[$185 >> 2] = $6; //@line 29268
    $186 = $ReallocAsyncCtx3 + 8 | 0; //@line 29269
    HEAP32[$186 >> 2] = $8; //@line 29270
    $187 = $ReallocAsyncCtx3 + 12 | 0; //@line 29271
    HEAP32[$187 >> 2] = $10; //@line 29272
    $188 = $ReallocAsyncCtx3 + 16 | 0; //@line 29273
    HEAP32[$188 >> 2] = $12; //@line 29274
    $189 = $ReallocAsyncCtx3 + 20 | 0; //@line 29275
    HEAP32[$189 >> 2] = $14; //@line 29276
    $190 = $ReallocAsyncCtx3 + 24 | 0; //@line 29277
    HEAP32[$190 >> 2] = $4; //@line 29278
    $191 = $ReallocAsyncCtx3 + 28 | 0; //@line 29279
    HEAP32[$191 >> 2] = $2; //@line 29280
    $192 = $ReallocAsyncCtx3 + 32 | 0; //@line 29281
    HEAP32[$192 >> 2] = $18; //@line 29282
    $193 = $ReallocAsyncCtx3 + 36 | 0; //@line 29283
    HEAP32[$193 >> 2] = $20; //@line 29284
    $194 = $ReallocAsyncCtx3 + 40 | 0; //@line 29285
    HEAP32[$194 >> 2] = $22; //@line 29286
    $195 = $ReallocAsyncCtx3 + 44 | 0; //@line 29287
    HEAP32[$195 >> 2] = $24; //@line 29288
    sp = STACKTOP; //@line 29289
    return;
   }
   ___async_unwind = 0; //@line 29292
   HEAP32[$ReallocAsyncCtx3 >> 2] = 456; //@line 29293
   $185 = $ReallocAsyncCtx3 + 4 | 0; //@line 29294
   HEAP32[$185 >> 2] = $6; //@line 29295
   $186 = $ReallocAsyncCtx3 + 8 | 0; //@line 29296
   HEAP32[$186 >> 2] = $8; //@line 29297
   $187 = $ReallocAsyncCtx3 + 12 | 0; //@line 29298
   HEAP32[$187 >> 2] = $10; //@line 29299
   $188 = $ReallocAsyncCtx3 + 16 | 0; //@line 29300
   HEAP32[$188 >> 2] = $12; //@line 29301
   $189 = $ReallocAsyncCtx3 + 20 | 0; //@line 29302
   HEAP32[$189 >> 2] = $14; //@line 29303
   $190 = $ReallocAsyncCtx3 + 24 | 0; //@line 29304
   HEAP32[$190 >> 2] = $4; //@line 29305
   $191 = $ReallocAsyncCtx3 + 28 | 0; //@line 29306
   HEAP32[$191 >> 2] = $2; //@line 29307
   $192 = $ReallocAsyncCtx3 + 32 | 0; //@line 29308
   HEAP32[$192 >> 2] = $18; //@line 29309
   $193 = $ReallocAsyncCtx3 + 36 | 0; //@line 29310
   HEAP32[$193 >> 2] = $20; //@line 29311
   $194 = $ReallocAsyncCtx3 + 40 | 0; //@line 29312
   HEAP32[$194 >> 2] = $22; //@line 29313
   $195 = $ReallocAsyncCtx3 + 44 | 0; //@line 29314
   HEAP32[$195 >> 2] = $24; //@line 29315
   sp = STACKTOP; //@line 29316
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($2 + 4 | 0) | 0) {
  _printf(12943, $18) | 0; //@line 29323
  _printf(13090, $22) | 0; //@line 29324
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 29325
  _putchar(10) | 0; //@line 29326
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 457; //@line 29329
   $198 = $ReallocAsyncCtx7 + 4 | 0; //@line 29330
   HEAP32[$198 >> 2] = $4; //@line 29331
   $199 = $ReallocAsyncCtx7 + 8 | 0; //@line 29332
   HEAP32[$199 >> 2] = $2; //@line 29333
   $200 = $ReallocAsyncCtx7 + 12 | 0; //@line 29334
   HEAP32[$200 >> 2] = $6; //@line 29335
   $201 = $ReallocAsyncCtx7 + 16 | 0; //@line 29336
   HEAP32[$201 >> 2] = $8; //@line 29337
   $202 = $ReallocAsyncCtx7 + 20 | 0; //@line 29338
   HEAP32[$202 >> 2] = $10; //@line 29339
   $203 = $ReallocAsyncCtx7 + 24 | 0; //@line 29340
   HEAP32[$203 >> 2] = $12; //@line 29341
   $204 = $ReallocAsyncCtx7 + 28 | 0; //@line 29342
   HEAP32[$204 >> 2] = $14; //@line 29343
   sp = STACKTOP; //@line 29344
   return;
  }
  ___async_unwind = 0; //@line 29347
  HEAP32[$ReallocAsyncCtx7 >> 2] = 457; //@line 29348
  $198 = $ReallocAsyncCtx7 + 4 | 0; //@line 29349
  HEAP32[$198 >> 2] = $4; //@line 29350
  $199 = $ReallocAsyncCtx7 + 8 | 0; //@line 29351
  HEAP32[$199 >> 2] = $2; //@line 29352
  $200 = $ReallocAsyncCtx7 + 12 | 0; //@line 29353
  HEAP32[$200 >> 2] = $6; //@line 29354
  $201 = $ReallocAsyncCtx7 + 16 | 0; //@line 29355
  HEAP32[$201 >> 2] = $8; //@line 29356
  $202 = $ReallocAsyncCtx7 + 20 | 0; //@line 29357
  HEAP32[$202 >> 2] = $10; //@line 29358
  $203 = $ReallocAsyncCtx7 + 24 | 0; //@line 29359
  HEAP32[$203 >> 2] = $12; //@line 29360
  $204 = $ReallocAsyncCtx7 + 28 | 0; //@line 29361
  HEAP32[$204 >> 2] = $14; //@line 29362
  sp = STACKTOP; //@line 29363
  return;
 }
 $205 = HEAP8[$4 >> 0] & -33; //@line 29367
 HEAP8[$4 >> 0] = $205; //@line 29368
 do {
  if (!($205 & 2)) {
   $244 = $205; //@line 29373
  } else {
   $216 = $205 & -3; //@line 29375
   HEAP8[$4 >> 0] = $216; //@line 29376
   if ((HEAP32[$2 + 360 >> 2] | 0) == 2) {
    _printf(12943, $8) | 0; //@line 29381
    _printf(12970, $12) | 0; //@line 29382
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 29383
    _putchar(10) | 0; //@line 29384
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 459; //@line 29387
     $220 = $ReallocAsyncCtx6 + 4 | 0; //@line 29388
     HEAP32[$220 >> 2] = $4; //@line 29389
     $221 = $ReallocAsyncCtx6 + 8 | 0; //@line 29390
     HEAP32[$221 >> 2] = $2; //@line 29391
     $222 = $ReallocAsyncCtx6 + 12 | 0; //@line 29392
     HEAP32[$222 >> 2] = $6; //@line 29393
     $223 = $ReallocAsyncCtx6 + 16 | 0; //@line 29394
     HEAP32[$223 >> 2] = $6; //@line 29395
     sp = STACKTOP; //@line 29396
     return;
    }
    ___async_unwind = 0; //@line 29399
    HEAP32[$ReallocAsyncCtx6 >> 2] = 459; //@line 29400
    $220 = $ReallocAsyncCtx6 + 4 | 0; //@line 29401
    HEAP32[$220 >> 2] = $4; //@line 29402
    $221 = $ReallocAsyncCtx6 + 8 | 0; //@line 29403
    HEAP32[$221 >> 2] = $2; //@line 29404
    $222 = $ReallocAsyncCtx6 + 12 | 0; //@line 29405
    HEAP32[$222 >> 2] = $6; //@line 29406
    $223 = $ReallocAsyncCtx6 + 16 | 0; //@line 29407
    HEAP32[$223 >> 2] = $6; //@line 29408
    sp = STACKTOP; //@line 29409
    return;
   }
   if ($216 & 4) {
    $242 = $216 & -5; //@line 29415
    HEAP8[$4 >> 0] = $242; //@line 29416
    $244 = $242; //@line 29417
    break;
   }
   $227 = HEAP32[$2 + 1324 >> 2] | 0; //@line 29421
   $228 = $227 + 16 | 0; //@line 29422
   $230 = __ZN11LoRaMacMcps14get_indicationEv($2 + 288 | 0) | 0; //@line 29424
   $231 = $227 + 28 | 0; //@line 29425
   $232 = HEAP32[$231 >> 2] | 0; //@line 29426
   if (!$232) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 29429
    _mbed_assert_internal(14997, 15002, 1102); //@line 29430
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 462; //@line 29433
     $234 = $ReallocAsyncCtx15 + 4 | 0; //@line 29434
     HEAP32[$234 >> 2] = $231; //@line 29435
     $235 = $ReallocAsyncCtx15 + 8 | 0; //@line 29436
     HEAP32[$235 >> 2] = $228; //@line 29437
     $236 = $ReallocAsyncCtx15 + 12 | 0; //@line 29438
     HEAP32[$236 >> 2] = $230; //@line 29439
     $237 = $ReallocAsyncCtx15 + 16 | 0; //@line 29440
     HEAP32[$237 >> 2] = $4; //@line 29441
     $238 = $ReallocAsyncCtx15 + 20 | 0; //@line 29442
     HEAP32[$238 >> 2] = $2; //@line 29443
     sp = STACKTOP; //@line 29444
     return;
    }
    ___async_unwind = 0; //@line 29447
    HEAP32[$ReallocAsyncCtx15 >> 2] = 462; //@line 29448
    $234 = $ReallocAsyncCtx15 + 4 | 0; //@line 29449
    HEAP32[$234 >> 2] = $231; //@line 29450
    $235 = $ReallocAsyncCtx15 + 8 | 0; //@line 29451
    HEAP32[$235 >> 2] = $228; //@line 29452
    $236 = $ReallocAsyncCtx15 + 12 | 0; //@line 29453
    HEAP32[$236 >> 2] = $230; //@line 29454
    $237 = $ReallocAsyncCtx15 + 16 | 0; //@line 29455
    HEAP32[$237 >> 2] = $4; //@line 29456
    $238 = $ReallocAsyncCtx15 + 20 | 0; //@line 29457
    HEAP32[$238 >> 2] = $2; //@line 29458
    sp = STACKTOP; //@line 29459
    return;
   } else {
    $239 = HEAP32[$232 >> 2] | 0; //@line 29462
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 29463
    FUNCTION_TABLE_vii[$239 & 31]($228, $230); //@line 29464
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 463; //@line 29467
     $240 = $ReallocAsyncCtx4 + 4 | 0; //@line 29468
     HEAP32[$240 >> 2] = $4; //@line 29469
     $241 = $ReallocAsyncCtx4 + 8 | 0; //@line 29470
     HEAP32[$241 >> 2] = $2; //@line 29471
     sp = STACKTOP; //@line 29472
     return;
    }
    ___async_unwind = 0; //@line 29475
    HEAP32[$ReallocAsyncCtx4 >> 2] = 463; //@line 29476
    $240 = $ReallocAsyncCtx4 + 4 | 0; //@line 29477
    HEAP32[$240 >> 2] = $4; //@line 29478
    $241 = $ReallocAsyncCtx4 + 8 | 0; //@line 29479
    HEAP32[$241 >> 2] = $2; //@line 29480
    sp = STACKTOP; //@line 29481
    return;
   }
  }
 } while (0);
 if (!($244 & 16)) {
  return;
 }
 HEAP8[$4 >> 0] = $244 & -17; //@line 29492
 $248 = HEAP32[$2 + 1324 >> 2] | 0; //@line 29494
 $249 = $248 + 48 | 0; //@line 29495
 $251 = __ZN11LoRaMacMlme14get_indicationEv($2 + 264 | 0) | 0; //@line 29497
 $252 = $248 + 60 | 0; //@line 29498
 $253 = HEAP32[$252 >> 2] | 0; //@line 29499
 if (!$253) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 29502
  _mbed_assert_internal(14997, 15002, 1102); //@line 29503
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 464; //@line 29506
   $255 = $ReallocAsyncCtx14 + 4 | 0; //@line 29507
   HEAP32[$255 >> 2] = $252; //@line 29508
   $256 = $ReallocAsyncCtx14 + 8 | 0; //@line 29509
   HEAP32[$256 >> 2] = $249; //@line 29510
   $257 = $ReallocAsyncCtx14 + 12 | 0; //@line 29511
   HEAP32[$257 >> 2] = $251; //@line 29512
   sp = STACKTOP; //@line 29513
   return;
  }
  ___async_unwind = 0; //@line 29516
  HEAP32[$ReallocAsyncCtx14 >> 2] = 464; //@line 29517
  $255 = $ReallocAsyncCtx14 + 4 | 0; //@line 29518
  HEAP32[$255 >> 2] = $252; //@line 29519
  $256 = $ReallocAsyncCtx14 + 8 | 0; //@line 29520
  HEAP32[$256 >> 2] = $249; //@line 29521
  $257 = $ReallocAsyncCtx14 + 12 | 0; //@line 29522
  HEAP32[$257 >> 2] = $251; //@line 29523
  sp = STACKTOP; //@line 29524
  return;
 } else {
  $258 = HEAP32[$253 >> 2] | 0; //@line 29527
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 29528
  FUNCTION_TABLE_vii[$258 & 31]($249, $251); //@line 29529
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 465; //@line 29532
   sp = STACKTOP; //@line 29533
   return;
  }
  ___async_unwind = 0; //@line 29536
  HEAP32[$ReallocAsyncCtx5 >> 2] = 465; //@line 29537
  sp = STACKTOP; //@line 29538
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$0$be = 0, $$0$i = 0, $$0$i104 = 0, $$0$i108 = 0, $$0$i98 = 0, $$0116 = 0, $$095113 = 0, $$096$be = 0, $$096$lcssa = 0, $$096115 = 0, $$1$lcssa = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $147 = 0, $15 = 0, $151 = 0, $156 = 0, $157 = 0, $16 = 0, $160 = 0, $166 = 0, $169 = 0, $17 = 0, $174 = 0, $18 = 0, $182 = 0, $19 = 0, $20 = 0, $201 = 0, $21 = 0, $211 = 0, $212 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $286 = 0, $287 = 0, $29 = 0, $298 = 0, $299 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $336 = 0, $34 = 0, $342 = 0, $343 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $412 = 0, $413 = 0, $42 = 0, $423 = 0, $427 = 0, $43 = 0, $431 = 0, $434 = 0, $44 = 0, $440 = 0, $443 = 0, $444 = 0, $45 = 0, $453 = 0, $454 = 0, $46 = 0, $47 = 0, $49 = 0, $531 = 0, $553 = 0, $563 = 0, $564 = 0, $60 = 0, $61 = 0, $633 = 0, $643 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, $div = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19989
 STACKTOP = STACKTOP + 32 | 0; //@line 19990
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 19990
 $8 = sp + 12 | 0; //@line 19991
 $9 = sp; //@line 19992
 $10 = sp + 26 | 0; //@line 19993
 $11 = sp + 25 | 0; //@line 19994
 $12 = sp + 24 | 0; //@line 19995
 $13 = $3 & 255; //@line 19996
 if (($2 & 255) >= ($3 & 255)) {
  $$096$lcssa = 0; //@line 19999
  STACKTOP = sp; //@line 20000
  return $$096$lcssa | 0; //@line 20000
 }
 $15 = $5 + 4 | 0; //@line 20002
 $16 = $5 + 12 | 0; //@line 20003
 $17 = $5 + 13 | 0; //@line 20004
 $18 = $8 + 4 | 0; //@line 20005
 $19 = $6 + 60 | 0; //@line 20006
 $20 = $8 + 6 | 0; //@line 20007
 $21 = $6 + 44 | 0; //@line 20008
 $22 = $8 + 5 | 0; //@line 20009
 $23 = $6 + 1 | 0; //@line 20010
 $24 = $8 + 7 | 0; //@line 20011
 $25 = $8 + 8 | 0; //@line 20012
 $26 = $6 + 32 | 0; //@line 20013
 $27 = $8 + 9 | 0; //@line 20014
 $28 = $0 + 3 | 0; //@line 20015
 $29 = $0 + 2 | 0; //@line 20016
 $30 = $6 + 56 | 0; //@line 20017
 $31 = $6 + 58 | 0; //@line 20018
 $32 = $8 + 1 | 0; //@line 20019
 $33 = $8 + 4 | 0; //@line 20020
 $34 = $6 + 40 | 0; //@line 20021
 $35 = $6 + 36 | 0; //@line 20022
 $36 = $6 + 33 | 0; //@line 20023
 $37 = $0 + 1 | 0; //@line 20024
 $38 = $8 + 4 | 0; //@line 20025
 $39 = $9 + 4 | 0; //@line 20026
 $40 = $9 + 8 | 0; //@line 20027
 $41 = $6 + 16 | 0; //@line 20028
 $42 = $6 + 20 | 0; //@line 20029
 $43 = $8 + 1 | 0; //@line 20030
 $44 = $8 + 2 | 0; //@line 20031
 $45 = $6 + 45 | 0; //@line 20032
 $46 = $6 + 48 | 0; //@line 20033
 $47 = $8 + 4 | 0; //@line 20034
 $$0116 = $2; //@line 20035
 $$096115 = 0; //@line 20035
 L4 : while (1) {
  $49 = $$0116 + 1 << 24 >> 24; //@line 20038
  switch (HEAP8[$1 + ($$0116 & 255) >> 0] | 0) {
  case 2:
   {
    HEAP32[$15 >> 2] = 0; //@line 20043
    HEAP8[$16 >> 0] = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 20048
    HEAP8[$17 >> 0] = HEAP8[$1 + ($$0116 + 2 & 255) >> 0] | 0; //@line 20053
    $$0$be = $$0116 + 3 << 24 >> 24; //@line 20054
    $$096$be = $$096115; //@line 20054
    break;
   }
  case 3:
   {
    HEAP8[$9 >> 0] = 0; //@line 20058
    HEAP8[$10 >> 0] = 0; //@line 20059
    HEAP8[$11 >> 0] = 0; //@line 20060
    HEAP8[$12 >> 0] = 0; //@line 20061
    $60 = $49 & 255; //@line 20062
    $61 = $60 + -1 | 0; //@line 20063
    HEAP32[$8 >> 2] = $1 + $61; //@line 20065
    HEAP8[$18 >> 0] = $13 - $61; //@line 20068
    HEAP8[$20 >> 0] = HEAP8[$19 >> 0] | 0; //@line 20070
    HEAP8[$22 >> 0] = HEAP8[$21 >> 0] | 0; //@line 20072
    HEAP8[$24 >> 0] = HEAP8[$23 >> 0] | 0; //@line 20074
    HEAP8[$25 >> 0] = HEAP8[$6 >> 0] | 0; //@line 20076
    HEAP8[$27 >> 0] = HEAP8[$26 >> 0] | 0; //@line 20078
    $72 = HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] | 0; //@line 20081
    $AsyncCtx = _emscripten_alloc_async_context(272, sp) | 0; //@line 20082
    $73 = FUNCTION_TABLE_iiiiiii[$72 & 3]($7, $8, $9, $10, $11, $12) | 0; //@line 20083
    if (___async) {
     label = 6; //@line 20086
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 20089
    if (($73 & 7) == 7) {
     HEAP8[$23 >> 0] = HEAP8[$9 >> 0] | 0; //@line 20094
     HEAP8[$6 >> 0] = HEAP8[$10 >> 0] | 0; //@line 20096
     HEAP8[$26 >> 0] = HEAP8[$11 >> 0] | 0; //@line 20098
    }
    $147 = HEAP8[$12 >> 0] | 0; //@line 20100
    if (($147 & 255) > 4) {
     $div = ($147 & 255) / 5 | 0; //@line 20103
     $151 = (-128 - (HEAP8[$28 >> 0] | 0) & 255) + -1 | 0; //@line 20108
     $$095113 = 0; //@line 20109
     $157 = HEAP8[$29 >> 0] | 0; //@line 20109
     while (1) {
      $156 = $157 & 255; //@line 20111
      if (($151 | 0) > ($156 | 0)) {
       $160 = $157 + 2 << 24 >> 24; //@line 20115
       HEAP8[$0 + 4 + $156 >> 0] = 3; //@line 20119
       HEAP8[$29 >> 0] = $160; //@line 20120
       HEAP8[($157 + 1 & 255) + ($0 + 4) >> 0] = $73; //@line 20121
       HEAP8[$0 >> 0] = 1; //@line 20122
       $$0$i = 0; //@line 20123
       $643 = $160; //@line 20123
      } else {
       $$0$i = -1e3; //@line 20125
       $643 = $157; //@line 20125
      }
      $$095113 = $$095113 + 1 << 24 >> 24; //@line 20127
      if (($$095113 & 255) >= ($div & 255)) {
       $$1$lcssa = $$0$i; //@line 20132
       break;
      } else {
       $157 = $643; //@line 20130
      }
     }
    } else {
     $$1$lcssa = $$096115; //@line 20137
    }
    $$0$be = $60 + 255 + ($147 & 255) & 255; //@line 20143
    $$096$be = $$1$lcssa; //@line 20143
    break;
   }
  case 4:
   {
    $166 = $$0116 + 2 << 24 >> 24; //@line 20147
    $169 = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 20150
    HEAP8[$30 >> 0] = $169; //@line 20151
    HEAP16[$31 >> 1] = 1 << ($169 & 255); //@line 20155
    $174 = HEAP8[$29 >> 0] | 0; //@line 20157
    if (($174 & 255) < (-128 - (HEAP8[$28 >> 0] | 0) & 255)) {
     HEAP8[$29 >> 0] = $174 + 1 << 24 >> 24; //@line 20164
     HEAP8[($174 & 255) + ($0 + 4) >> 0] = 4; //@line 20165
     HEAP8[$0 >> 0] = 1; //@line 20166
     $$0$be = $166; //@line 20167
     $$096$be = 0; //@line 20167
    } else {
     $$0$be = $166; //@line 20169
     $$096$be = -1e3; //@line 20169
    }
    break;
   }
  case 5:
   {
    $182 = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 20176
    HEAP8[$32 >> 0] = ($182 & 255) >>> 4 & 7; //@line 20181
    HEAP8[$8 >> 0] = $182 & 15; //@line 20183
    $201 = $$0116 + 5 << 24 >> 24; //@line 20197
    HEAP32[$33 >> 2] = (HEAPU8[$1 + ($$0116 + 4 & 255) >> 0] << 16 | (HEAPU8[$1 + ($$0116 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0116 + 2 & 255) >> 0])) * 100; //@line 20205
    $211 = HEAP32[(HEAP32[$7 >> 2] | 0) + 40 >> 2] | 0; //@line 20208
    $AsyncCtx3 = _emscripten_alloc_async_context(268, sp) | 0; //@line 20209
    $212 = FUNCTION_TABLE_iii[$211 & 31]($7, $8) | 0; //@line 20210
    if (___async) {
     label = 18; //@line 20213
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 20216
    if (($212 & 7) == 7) {
     HEAP8[$34 >> 0] = HEAP8[$8 >> 0] | 0; //@line 20221
     HEAP32[$35 >> 2] = HEAP32[$33 >> 2]; //@line 20223
     HEAP8[$36 >> 0] = HEAP8[$32 >> 0] | 0; //@line 20225
    }
    $286 = HEAP8[$29 >> 0] | 0; //@line 20228
    $287 = $286 & 255; //@line 20229
    if (((-128 - (HEAP8[$28 >> 0] | 0) & 255) + -1 | 0) > ($287 | 0)) {
     HEAP8[$0 + 4 + $287 >> 0] = 5; //@line 20237
     HEAP8[$29 >> 0] = $286 + 2 << 24 >> 24; //@line 20239
     HEAP8[($286 + 1 & 255) + ($0 + 4) >> 0] = $212; //@line 20242
     HEAP8[$37 >> 0] = 1; //@line 20243
     HEAP8[$0 >> 0] = 1; //@line 20244
     $$0$i104 = 0; //@line 20245
    } else {
     $$0$i104 = -1e3; //@line 20247
    }
    $$0$be = $201; //@line 20249
    $$096$be = $$0$i104; //@line 20249
    break;
   }
  case 6:
   {
    $298 = HEAP8[$29 >> 0] | 0; //@line 20254
    $299 = $298 & 255; //@line 20255
    if (((-128 - (HEAP8[$28 >> 0] | 0) & 255) + -2 | 0) > ($299 | 0)) {
     HEAP8[$0 + 4 + $299 >> 0] = 6; //@line 20263
     HEAP8[($298 + 1 & 255) + ($0 + 4) >> 0] = -1; //@line 20267
     HEAP8[$29 >> 0] = $298 + 3 << 24 >> 24; //@line 20269
     HEAP8[($298 + 2 & 255) + ($0 + 4) >> 0] = $4; //@line 20272
     HEAP8[$0 >> 0] = 1; //@line 20273
     $$0$be = $49; //@line 20274
     $$096$be = 0; //@line 20274
    } else {
     $$0$be = $49; //@line 20276
     $$096$be = -1e3; //@line 20276
    }
    break;
   }
  case 7:
   {
    HEAP8[$38 >> 0] = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 20285
    HEAP32[$8 >> 2] = $9; //@line 20286
    HEAP32[$9 >> 2] = (HEAPU8[$1 + ($$0116 + 4 & 255) >> 0] << 16 | (HEAPU8[$1 + ($$0116 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0116 + 2 & 255) >> 0])) * 100; //@line 20307
    HEAP32[$39 >> 2] = 0; //@line 20308
    $336 = $$0116 + 6 << 24 >> 24; //@line 20309
    HEAP8[$40 >> 0] = HEAP8[$1 + ($$0116 + 5 & 255) >> 0] | 0; //@line 20313
    $342 = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0; //@line 20316
    $AsyncCtx7 = _emscripten_alloc_async_context(268, sp) | 0; //@line 20317
    $343 = FUNCTION_TABLE_iii[$342 & 31]($7, $8) | 0; //@line 20318
    if (___async) {
     label = 27; //@line 20321
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 20324
    $412 = HEAP8[$29 >> 0] | 0; //@line 20326
    $413 = $412 & 255; //@line 20327
    if (((-128 - (HEAP8[$28 >> 0] | 0) & 255) + -1 | 0) > ($413 | 0)) {
     HEAP8[$0 + 4 + $413 >> 0] = 7; //@line 20338
     HEAP8[$29 >> 0] = $412 + 2 << 24 >> 24; //@line 20339
     HEAP8[($412 + 1 & 255) + ($0 + 4) >> 0] = $343; //@line 20340
     HEAP8[$0 >> 0] = 1; //@line 20341
     $$0$i108 = 0; //@line 20342
    } else {
     $$0$i108 = -1e3; //@line 20344
    }
    $$0$be = $336; //@line 20346
    $$096$be = $$0$i108; //@line 20346
    break;
   }
  case 8:
   {
    $423 = $$0116 + 2 << 24 >> 24; //@line 20350
    $427 = HEAP8[$1 + ($49 & 255) >> 0] & 15; //@line 20354
    $431 = ($427 + ($427 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 20359
    HEAP32[$41 >> 2] = $431; //@line 20360
    HEAP32[$42 >> 2] = $431 + 1e3; //@line 20362
    $434 = HEAP8[$29 >> 0] | 0; //@line 20364
    if (($434 & 255) < (-128 - (HEAP8[$28 >> 0] | 0) & 255)) {
     HEAP8[$29 >> 0] = $434 + 1 << 24 >> 24; //@line 20371
     HEAP8[($434 & 255) + ($0 + 4) >> 0] = 8; //@line 20372
     HEAP8[$37 >> 0] = 1; //@line 20373
     HEAP8[$0 >> 0] = 1; //@line 20374
     $$0$be = $423; //@line 20375
     $$096$be = 0; //@line 20375
    } else {
     $$0$be = $423; //@line 20377
     $$096$be = -1e3; //@line 20377
    }
    break;
   }
  case 9:
   {
    $440 = $$0116 + 2 << 24 >> 24; //@line 20382
    $443 = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 20385
    HEAP8[$8 >> 0] = 0; //@line 20386
    $444 = $443 & 255; //@line 20387
    HEAP8[$43 >> 0] = $444 >>> 5 & 1; //@line 20391
    if ($444 & 16 | 0) {
     HEAP8[$8 >> 0] = 1; //@line 20395
    }
    HEAP8[$44 >> 0] = $444 & 15; //@line 20399
    $453 = HEAP32[(HEAP32[$7 >> 2] | 0) + 44 >> 2] | 0; //@line 20402
    $AsyncCtx11 = _emscripten_alloc_async_context(272, sp) | 0; //@line 20403
    $454 = FUNCTION_TABLE_iii[$453 & 31]($7, $8) | 0; //@line 20404
    if (___async) {
     label = 36; //@line 20407
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 20410
    if ($454) {
     HEAP8[$21 >> 0] = HEAP8[$8 >> 0] | 0; //@line 20413
     HEAP8[$45 >> 0] = HEAP8[$43 >> 0] | 0; //@line 20415
     HEAPF32[$46 >> 2] = +(HEAPU8[13548 + (HEAPU8[$44 >> 0] | 0) >> 0] | 0); //@line 20421
     $531 = HEAP8[$29 >> 0] | 0; //@line 20423
     if (($531 & 255) < (-128 - (HEAP8[$28 >> 0] | 0) & 255)) {
      HEAP8[$29 >> 0] = $531 + 1 << 24 >> 24; //@line 20430
      HEAP8[($531 & 255) + ($0 + 4) >> 0] = 9; //@line 20431
      HEAP8[$0 >> 0] = 1; //@line 20432
      $$2 = 0; //@line 20433
     } else {
      $$2 = -1e3; //@line 20435
     }
    } else {
     $$2 = $$096115; //@line 20438
    }
    $$0$be = $440; //@line 20440
    $$096$be = $$2; //@line 20440
    break;
   }
  case 10:
   {
    HEAP8[$8 >> 0] = HEAP8[$1 + ($49 & 255) >> 0] | 0; //@line 20448
    $553 = $$0116 + 5 << 24 >> 24; //@line 20461
    HEAP32[$47 >> 2] = (HEAPU8[$1 + ($$0116 + 4 & 255) >> 0] << 16 | (HEAPU8[$1 + ($$0116 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0116 + 2 & 255) >> 0])) * 100; //@line 20469
    $563 = HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] | 0; //@line 20472
    $AsyncCtx15 = _emscripten_alloc_async_context(268, sp) | 0; //@line 20473
    $564 = FUNCTION_TABLE_iii[$563 & 31]($7, $8) | 0; //@line 20474
    if (___async) {
     label = 42; //@line 20477
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 20480
    $633 = HEAP8[$29 >> 0] | 0; //@line 20482
    if (($633 & 255) < (-128 - (HEAP8[$28 >> 0] | 0) & 255)) {
     HEAP8[($633 & 255) + ($0 + 4) >> 0] = 10; //@line 20489
     HEAP8[$29 >> 0] = $633 + 2 << 24 >> 24; //@line 20491
     HEAP8[($633 + 1 & 255) + ($0 + 4) >> 0] = $564; //@line 20494
     HEAP8[$37 >> 0] = 1; //@line 20495
     HEAP8[$0 >> 0] = 1; //@line 20496
     $$0$i98 = 0; //@line 20497
    } else {
     $$0$i98 = -1e3; //@line 20499
    }
    $$0$be = $553; //@line 20501
    $$096$be = $$0$i98; //@line 20501
    break;
   }
  default:
   {
    $$0$be = $49; //@line 20505
    $$096$be = -1013; //@line 20505
   }
  }
  if (($$0$be & 255) < ($3 & 255)) {
   $$0116 = $$0$be; //@line 20510
   $$096115 = $$096$be; //@line 20510
  } else {
   $$096$lcssa = $$096$be; //@line 20512
   label = 47; //@line 20513
   break;
  }
 }
 if ((label | 0) == 6) {
  HEAP32[$AsyncCtx >> 2] = 576; //@line 20518
  HEAP32[$AsyncCtx + 4 >> 2] = $17; //@line 20520
  HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 20522
  HEAP32[$AsyncCtx + 12 >> 2] = $29; //@line 20524
  HEAP32[$AsyncCtx + 16 >> 2] = $9; //@line 20526
  HEAP32[$AsyncCtx + 20 >> 2] = $8; //@line 20528
  HEAP32[$AsyncCtx + 24 >> 2] = $$096115; //@line 20530
  HEAP32[$AsyncCtx + 28 >> 2] = $28; //@line 20532
  HEAP32[$AsyncCtx + 32 >> 2] = $38; //@line 20534
  HEAP32[$AsyncCtx + 36 >> 2] = $39; //@line 20536
  HEAP32[$AsyncCtx + 40 >> 2] = $15; //@line 20538
  HEAP32[$AsyncCtx + 44 >> 2] = $27; //@line 20540
  HEAP32[$AsyncCtx + 48 >> 2] = $7; //@line 20542
  HEAP32[$AsyncCtx + 52 >> 2] = $8; //@line 20544
  HEAP32[$AsyncCtx + 56 >> 2] = $9; //@line 20546
  HEAP32[$AsyncCtx + 60 >> 2] = $16; //@line 20548
  HEAP32[$AsyncCtx + 64 >> 2] = $40; //@line 20550
  HEAP32[$AsyncCtx + 68 >> 2] = $37; //@line 20552
  HEAP32[$AsyncCtx + 72 >> 2] = $7; //@line 20554
  HEAP32[$AsyncCtx + 76 >> 2] = $26; //@line 20556
  HEAP32[$AsyncCtx + 80 >> 2] = $36; //@line 20558
  HEAP32[$AsyncCtx + 84 >> 2] = $41; //@line 20560
  HEAP32[$AsyncCtx + 88 >> 2] = $25; //@line 20562
  HEAP32[$AsyncCtx + 92 >> 2] = $35; //@line 20564
  HEAP32[$AsyncCtx + 96 >> 2] = $9; //@line 20566
  HEAP32[$AsyncCtx + 100 >> 2] = $42; //@line 20568
  HEAP32[$AsyncCtx + 104 >> 2] = $11; //@line 20570
  HEAP32[$AsyncCtx + 108 >> 2] = $6; //@line 20572
  HEAP32[$AsyncCtx + 112 >> 2] = $8; //@line 20574
  HEAP32[$AsyncCtx + 116 >> 2] = $8; //@line 20576
  HEAP32[$AsyncCtx + 120 >> 2] = $8; //@line 20578
  HEAP32[$AsyncCtx + 124 >> 2] = $13; //@line 20580
  HEAP32[$AsyncCtx + 128 >> 2] = $10; //@line 20582
  HEAP32[$AsyncCtx + 132 >> 2] = $24; //@line 20584
  HEAP32[$AsyncCtx + 136 >> 2] = $34; //@line 20586
  HEAP32[$AsyncCtx + 140 >> 2] = $23; //@line 20588
  HEAP32[$AsyncCtx + 144 >> 2] = $43; //@line 20590
  HEAP32[$AsyncCtx + 148 >> 2] = $7; //@line 20592
  HEAP32[$AsyncCtx + 152 >> 2] = $33; //@line 20594
  HEAP32[$AsyncCtx + 156 >> 2] = $22; //@line 20596
  HEAP32[$AsyncCtx + 160 >> 2] = $44; //@line 20598
  HEAP32[$AsyncCtx + 164 >> 2] = $21; //@line 20600
  HEAP32[$AsyncCtx + 168 >> 2] = $7; //@line 20602
  HEAP32[$AsyncCtx + 172 >> 2] = $32; //@line 20604
  HEAP32[$AsyncCtx + 176 >> 2] = $12; //@line 20606
  HEAP32[$AsyncCtx + 180 >> 2] = $60; //@line 20608
  HEAP32[$AsyncCtx + 184 >> 2] = $8; //@line 20610
  HEAP32[$AsyncCtx + 188 >> 2] = $45; //@line 20612
  HEAP32[$AsyncCtx + 192 >> 2] = $20; //@line 20614
  HEAP32[$AsyncCtx + 196 >> 2] = $8; //@line 20616
  HEAP32[$AsyncCtx + 200 >> 2] = $8; //@line 20618
  HEAP32[$AsyncCtx + 204 >> 2] = $31; //@line 20620
  HEAP32[$AsyncCtx + 208 >> 2] = $0; //@line 20622
  HEAP32[$AsyncCtx + 212 >> 2] = $46; //@line 20624
  HEAP32[$AsyncCtx + 216 >> 2] = $9; //@line 20626
  HEAP32[$AsyncCtx + 220 >> 2] = $30; //@line 20628
  HEAP32[$AsyncCtx + 224 >> 2] = $8; //@line 20630
  HEAP32[$AsyncCtx + 228 >> 2] = $19; //@line 20632
  HEAP8[$AsyncCtx + 232 >> 0] = $4; //@line 20634
  HEAP32[$AsyncCtx + 236 >> 2] = $8; //@line 20636
  HEAP32[$AsyncCtx + 240 >> 2] = $0; //@line 20638
  HEAP32[$AsyncCtx + 244 >> 2] = $47; //@line 20640
  HEAP32[$AsyncCtx + 248 >> 2] = $7; //@line 20642
  HEAP32[$AsyncCtx + 252 >> 2] = $18; //@line 20644
  HEAP32[$AsyncCtx + 256 >> 2] = $1; //@line 20646
  HEAP8[$AsyncCtx + 260 >> 0] = $2; //@line 20648
  HEAP8[$AsyncCtx + 261 >> 0] = $3; //@line 20650
  HEAP32[$AsyncCtx + 264 >> 2] = $8; //@line 20652
  HEAP32[$AsyncCtx + 268 >> 2] = $7; //@line 20654
  sp = STACKTOP; //@line 20655
  STACKTOP = sp; //@line 20656
  return 0; //@line 20656
 } else if ((label | 0) == 18) {
  HEAP32[$AsyncCtx3 >> 2] = 577; //@line 20659
  HEAP32[$AsyncCtx3 + 4 >> 2] = $17; //@line 20661
  HEAP32[$AsyncCtx3 + 8 >> 2] = $8; //@line 20663
  HEAP32[$AsyncCtx3 + 12 >> 2] = $29; //@line 20665
  HEAP32[$AsyncCtx3 + 16 >> 2] = $9; //@line 20667
  HEAP32[$AsyncCtx3 + 20 >> 2] = $8; //@line 20669
  HEAP32[$AsyncCtx3 + 24 >> 2] = $38; //@line 20671
  HEAP32[$AsyncCtx3 + 28 >> 2] = $28; //@line 20673
  HEAP32[$AsyncCtx3 + 32 >> 2] = $39; //@line 20675
  HEAP32[$AsyncCtx3 + 36 >> 2] = $15; //@line 20677
  HEAP32[$AsyncCtx3 + 40 >> 2] = $27; //@line 20679
  HEAP32[$AsyncCtx3 + 44 >> 2] = $7; //@line 20681
  HEAP32[$AsyncCtx3 + 48 >> 2] = $8; //@line 20683
  HEAP32[$AsyncCtx3 + 52 >> 2] = $9; //@line 20685
  HEAP32[$AsyncCtx3 + 56 >> 2] = $16; //@line 20687
  HEAP32[$AsyncCtx3 + 60 >> 2] = $40; //@line 20689
  HEAP32[$AsyncCtx3 + 64 >> 2] = $37; //@line 20691
  HEAP32[$AsyncCtx3 + 68 >> 2] = $7; //@line 20693
  HEAP32[$AsyncCtx3 + 72 >> 2] = $26; //@line 20695
  HEAP32[$AsyncCtx3 + 76 >> 2] = $36; //@line 20697
  HEAP32[$AsyncCtx3 + 80 >> 2] = $41; //@line 20699
  HEAP32[$AsyncCtx3 + 84 >> 2] = $25; //@line 20701
  HEAP32[$AsyncCtx3 + 88 >> 2] = $35; //@line 20703
  HEAP32[$AsyncCtx3 + 92 >> 2] = $9; //@line 20705
  HEAP32[$AsyncCtx3 + 96 >> 2] = $42; //@line 20707
  HEAP32[$AsyncCtx3 + 100 >> 2] = $11; //@line 20709
  HEAP32[$AsyncCtx3 + 104 >> 2] = $6; //@line 20711
  HEAP32[$AsyncCtx3 + 108 >> 2] = $8; //@line 20713
  HEAP32[$AsyncCtx3 + 112 >> 2] = $8; //@line 20715
  HEAP32[$AsyncCtx3 + 116 >> 2] = $8; //@line 20717
  HEAP32[$AsyncCtx3 + 120 >> 2] = $13; //@line 20719
  HEAP32[$AsyncCtx3 + 124 >> 2] = $10; //@line 20721
  HEAP32[$AsyncCtx3 + 128 >> 2] = $24; //@line 20723
  HEAP32[$AsyncCtx3 + 132 >> 2] = $34; //@line 20725
  HEAP32[$AsyncCtx3 + 136 >> 2] = $23; //@line 20727
  HEAP32[$AsyncCtx3 + 140 >> 2] = $43; //@line 20729
  HEAP32[$AsyncCtx3 + 144 >> 2] = $7; //@line 20731
  HEAP8[$AsyncCtx3 + 148 >> 0] = $201; //@line 20733
  HEAP32[$AsyncCtx3 + 152 >> 2] = $33; //@line 20735
  HEAP32[$AsyncCtx3 + 156 >> 2] = $22; //@line 20737
  HEAP32[$AsyncCtx3 + 160 >> 2] = $44; //@line 20739
  HEAP32[$AsyncCtx3 + 164 >> 2] = $21; //@line 20741
  HEAP32[$AsyncCtx3 + 168 >> 2] = $7; //@line 20743
  HEAP32[$AsyncCtx3 + 172 >> 2] = $32; //@line 20745
  HEAP32[$AsyncCtx3 + 176 >> 2] = $12; //@line 20747
  HEAP32[$AsyncCtx3 + 180 >> 2] = $8; //@line 20749
  HEAP32[$AsyncCtx3 + 184 >> 2] = $45; //@line 20751
  HEAP32[$AsyncCtx3 + 188 >> 2] = $20; //@line 20753
  HEAP32[$AsyncCtx3 + 192 >> 2] = $8; //@line 20755
  HEAP32[$AsyncCtx3 + 196 >> 2] = $8; //@line 20757
  HEAP32[$AsyncCtx3 + 200 >> 2] = $31; //@line 20759
  HEAP32[$AsyncCtx3 + 204 >> 2] = $0; //@line 20761
  HEAP32[$AsyncCtx3 + 208 >> 2] = $46; //@line 20763
  HEAP32[$AsyncCtx3 + 212 >> 2] = $9; //@line 20765
  HEAP32[$AsyncCtx3 + 216 >> 2] = $30; //@line 20767
  HEAP32[$AsyncCtx3 + 220 >> 2] = $8; //@line 20769
  HEAP32[$AsyncCtx3 + 224 >> 2] = $19; //@line 20771
  HEAP8[$AsyncCtx3 + 228 >> 0] = $4; //@line 20773
  HEAP32[$AsyncCtx3 + 232 >> 2] = $8; //@line 20775
  HEAP32[$AsyncCtx3 + 236 >> 2] = $0; //@line 20777
  HEAP32[$AsyncCtx3 + 240 >> 2] = $47; //@line 20779
  HEAP32[$AsyncCtx3 + 244 >> 2] = $7; //@line 20781
  HEAP32[$AsyncCtx3 + 248 >> 2] = $18; //@line 20783
  HEAP32[$AsyncCtx3 + 252 >> 2] = $1; //@line 20785
  HEAP8[$AsyncCtx3 + 256 >> 0] = $2; //@line 20787
  HEAP8[$AsyncCtx3 + 257 >> 0] = $3; //@line 20789
  HEAP32[$AsyncCtx3 + 260 >> 2] = $8; //@line 20791
  HEAP32[$AsyncCtx3 + 264 >> 2] = $7; //@line 20793
  sp = STACKTOP; //@line 20794
  STACKTOP = sp; //@line 20795
  return 0; //@line 20795
 } else if ((label | 0) == 27) {
  HEAP32[$AsyncCtx7 >> 2] = 578; //@line 20798
  HEAP32[$AsyncCtx7 + 4 >> 2] = $17; //@line 20800
  HEAP32[$AsyncCtx7 + 8 >> 2] = $8; //@line 20802
  HEAP32[$AsyncCtx7 + 12 >> 2] = $29; //@line 20804
  HEAP32[$AsyncCtx7 + 16 >> 2] = $9; //@line 20806
  HEAP32[$AsyncCtx7 + 20 >> 2] = $8; //@line 20808
  HEAP32[$AsyncCtx7 + 24 >> 2] = $38; //@line 20810
  HEAP32[$AsyncCtx7 + 28 >> 2] = $28; //@line 20812
  HEAP32[$AsyncCtx7 + 32 >> 2] = $39; //@line 20814
  HEAP32[$AsyncCtx7 + 36 >> 2] = $15; //@line 20816
  HEAP32[$AsyncCtx7 + 40 >> 2] = $27; //@line 20818
  HEAP32[$AsyncCtx7 + 44 >> 2] = $7; //@line 20820
  HEAP32[$AsyncCtx7 + 48 >> 2] = $8; //@line 20822
  HEAP32[$AsyncCtx7 + 52 >> 2] = $9; //@line 20824
  HEAP32[$AsyncCtx7 + 56 >> 2] = $16; //@line 20826
  HEAP32[$AsyncCtx7 + 60 >> 2] = $40; //@line 20828
  HEAP32[$AsyncCtx7 + 64 >> 2] = $37; //@line 20830
  HEAP32[$AsyncCtx7 + 68 >> 2] = $7; //@line 20832
  HEAP32[$AsyncCtx7 + 72 >> 2] = $26; //@line 20834
  HEAP32[$AsyncCtx7 + 76 >> 2] = $36; //@line 20836
  HEAP32[$AsyncCtx7 + 80 >> 2] = $41; //@line 20838
  HEAP32[$AsyncCtx7 + 84 >> 2] = $25; //@line 20840
  HEAP32[$AsyncCtx7 + 88 >> 2] = $35; //@line 20842
  HEAP32[$AsyncCtx7 + 92 >> 2] = $9; //@line 20844
  HEAP32[$AsyncCtx7 + 96 >> 2] = $42; //@line 20846
  HEAP32[$AsyncCtx7 + 100 >> 2] = $11; //@line 20848
  HEAP32[$AsyncCtx7 + 104 >> 2] = $6; //@line 20850
  HEAP32[$AsyncCtx7 + 108 >> 2] = $8; //@line 20852
  HEAP32[$AsyncCtx7 + 112 >> 2] = $8; //@line 20854
  HEAP32[$AsyncCtx7 + 116 >> 2] = $8; //@line 20856
  HEAP8[$AsyncCtx7 + 120 >> 0] = $336; //@line 20858
  HEAP32[$AsyncCtx7 + 124 >> 2] = $10; //@line 20860
  HEAP32[$AsyncCtx7 + 128 >> 2] = $13; //@line 20862
  HEAP32[$AsyncCtx7 + 132 >> 2] = $24; //@line 20864
  HEAP32[$AsyncCtx7 + 136 >> 2] = $23; //@line 20866
  HEAP32[$AsyncCtx7 + 140 >> 2] = $34; //@line 20868
  HEAP32[$AsyncCtx7 + 144 >> 2] = $43; //@line 20870
  HEAP32[$AsyncCtx7 + 148 >> 2] = $7; //@line 20872
  HEAP32[$AsyncCtx7 + 152 >> 2] = $33; //@line 20874
  HEAP32[$AsyncCtx7 + 156 >> 2] = $22; //@line 20876
  HEAP32[$AsyncCtx7 + 160 >> 2] = $44; //@line 20878
  HEAP32[$AsyncCtx7 + 164 >> 2] = $21; //@line 20880
  HEAP32[$AsyncCtx7 + 168 >> 2] = $7; //@line 20882
  HEAP32[$AsyncCtx7 + 172 >> 2] = $32; //@line 20884
  HEAP32[$AsyncCtx7 + 176 >> 2] = $12; //@line 20886
  HEAP32[$AsyncCtx7 + 180 >> 2] = $8; //@line 20888
  HEAP32[$AsyncCtx7 + 184 >> 2] = $45; //@line 20890
  HEAP32[$AsyncCtx7 + 188 >> 2] = $20; //@line 20892
  HEAP32[$AsyncCtx7 + 192 >> 2] = $8; //@line 20894
  HEAP32[$AsyncCtx7 + 196 >> 2] = $8; //@line 20896
  HEAP32[$AsyncCtx7 + 200 >> 2] = $31; //@line 20898
  HEAP32[$AsyncCtx7 + 204 >> 2] = $0; //@line 20900
  HEAP32[$AsyncCtx7 + 208 >> 2] = $46; //@line 20902
  HEAP32[$AsyncCtx7 + 212 >> 2] = $9; //@line 20904
  HEAP32[$AsyncCtx7 + 216 >> 2] = $30; //@line 20906
  HEAP32[$AsyncCtx7 + 220 >> 2] = $8; //@line 20908
  HEAP32[$AsyncCtx7 + 224 >> 2] = $19; //@line 20910
  HEAP8[$AsyncCtx7 + 228 >> 0] = $4; //@line 20912
  HEAP32[$AsyncCtx7 + 232 >> 2] = $8; //@line 20914
  HEAP32[$AsyncCtx7 + 236 >> 2] = $0; //@line 20916
  HEAP32[$AsyncCtx7 + 240 >> 2] = $47; //@line 20918
  HEAP32[$AsyncCtx7 + 244 >> 2] = $7; //@line 20920
  HEAP32[$AsyncCtx7 + 248 >> 2] = $18; //@line 20922
  HEAP32[$AsyncCtx7 + 252 >> 2] = $1; //@line 20924
  HEAP8[$AsyncCtx7 + 256 >> 0] = $2; //@line 20926
  HEAP8[$AsyncCtx7 + 257 >> 0] = $3; //@line 20928
  HEAP32[$AsyncCtx7 + 260 >> 2] = $8; //@line 20930
  HEAP32[$AsyncCtx7 + 264 >> 2] = $7; //@line 20932
  sp = STACKTOP; //@line 20933
  STACKTOP = sp; //@line 20934
  return 0; //@line 20934
 } else if ((label | 0) == 36) {
  HEAP32[$AsyncCtx11 >> 2] = 579; //@line 20937
  HEAP32[$AsyncCtx11 + 4 >> 2] = $17; //@line 20939
  HEAP32[$AsyncCtx11 + 8 >> 2] = $8; //@line 20941
  HEAP32[$AsyncCtx11 + 12 >> 2] = $29; //@line 20943
  HEAP32[$AsyncCtx11 + 16 >> 2] = $9; //@line 20945
  HEAP32[$AsyncCtx11 + 20 >> 2] = $8; //@line 20947
  HEAP32[$AsyncCtx11 + 24 >> 2] = $$096115; //@line 20949
  HEAP32[$AsyncCtx11 + 28 >> 2] = $28; //@line 20951
  HEAP32[$AsyncCtx11 + 32 >> 2] = $38; //@line 20953
  HEAP32[$AsyncCtx11 + 36 >> 2] = $39; //@line 20955
  HEAP32[$AsyncCtx11 + 40 >> 2] = $15; //@line 20957
  HEAP32[$AsyncCtx11 + 44 >> 2] = $27; //@line 20959
  HEAP32[$AsyncCtx11 + 48 >> 2] = $7; //@line 20961
  HEAP32[$AsyncCtx11 + 52 >> 2] = $8; //@line 20963
  HEAP32[$AsyncCtx11 + 56 >> 2] = $9; //@line 20965
  HEAP32[$AsyncCtx11 + 60 >> 2] = $16; //@line 20967
  HEAP8[$AsyncCtx11 + 64 >> 0] = $440; //@line 20969
  HEAP32[$AsyncCtx11 + 68 >> 2] = $40; //@line 20971
  HEAP32[$AsyncCtx11 + 72 >> 2] = $37; //@line 20973
  HEAP32[$AsyncCtx11 + 76 >> 2] = $7; //@line 20975
  HEAP32[$AsyncCtx11 + 80 >> 2] = $26; //@line 20977
  HEAP32[$AsyncCtx11 + 84 >> 2] = $36; //@line 20979
  HEAP32[$AsyncCtx11 + 88 >> 2] = $41; //@line 20981
  HEAP32[$AsyncCtx11 + 92 >> 2] = $25; //@line 20983
  HEAP32[$AsyncCtx11 + 96 >> 2] = $35; //@line 20985
  HEAP32[$AsyncCtx11 + 100 >> 2] = $9; //@line 20987
  HEAP32[$AsyncCtx11 + 104 >> 2] = $42; //@line 20989
  HEAP32[$AsyncCtx11 + 108 >> 2] = $11; //@line 20991
  HEAP32[$AsyncCtx11 + 112 >> 2] = $6; //@line 20993
  HEAP32[$AsyncCtx11 + 116 >> 2] = $8; //@line 20995
  HEAP32[$AsyncCtx11 + 120 >> 2] = $8; //@line 20997
  HEAP32[$AsyncCtx11 + 124 >> 2] = $8; //@line 20999
  HEAP32[$AsyncCtx11 + 128 >> 2] = $13; //@line 21001
  HEAP32[$AsyncCtx11 + 132 >> 2] = $10; //@line 21003
  HEAP32[$AsyncCtx11 + 136 >> 2] = $24; //@line 21005
  HEAP32[$AsyncCtx11 + 140 >> 2] = $34; //@line 21007
  HEAP32[$AsyncCtx11 + 144 >> 2] = $23; //@line 21009
  HEAP32[$AsyncCtx11 + 148 >> 2] = $43; //@line 21011
  HEAP32[$AsyncCtx11 + 152 >> 2] = $7; //@line 21013
  HEAP32[$AsyncCtx11 + 156 >> 2] = $33; //@line 21015
  HEAP32[$AsyncCtx11 + 160 >> 2] = $22; //@line 21017
  HEAP32[$AsyncCtx11 + 164 >> 2] = $44; //@line 21019
  HEAP32[$AsyncCtx11 + 168 >> 2] = $21; //@line 21021
  HEAP32[$AsyncCtx11 + 172 >> 2] = $7; //@line 21023
  HEAP32[$AsyncCtx11 + 176 >> 2] = $32; //@line 21025
  HEAP32[$AsyncCtx11 + 180 >> 2] = $12; //@line 21027
  HEAP32[$AsyncCtx11 + 184 >> 2] = $8; //@line 21029
  HEAP32[$AsyncCtx11 + 188 >> 2] = $45; //@line 21031
  HEAP32[$AsyncCtx11 + 192 >> 2] = $20; //@line 21033
  HEAP32[$AsyncCtx11 + 196 >> 2] = $8; //@line 21035
  HEAP32[$AsyncCtx11 + 200 >> 2] = $8; //@line 21037
  HEAP32[$AsyncCtx11 + 204 >> 2] = $31; //@line 21039
  HEAP32[$AsyncCtx11 + 208 >> 2] = $0; //@line 21041
  HEAP32[$AsyncCtx11 + 212 >> 2] = $46; //@line 21043
  HEAP32[$AsyncCtx11 + 216 >> 2] = $9; //@line 21045
  HEAP32[$AsyncCtx11 + 220 >> 2] = $30; //@line 21047
  HEAP32[$AsyncCtx11 + 224 >> 2] = $8; //@line 21049
  HEAP32[$AsyncCtx11 + 228 >> 2] = $19; //@line 21051
  HEAP8[$AsyncCtx11 + 232 >> 0] = $4; //@line 21053
  HEAP32[$AsyncCtx11 + 236 >> 2] = $8; //@line 21055
  HEAP32[$AsyncCtx11 + 240 >> 2] = $0; //@line 21057
  HEAP32[$AsyncCtx11 + 244 >> 2] = $47; //@line 21059
  HEAP32[$AsyncCtx11 + 248 >> 2] = $7; //@line 21061
  HEAP32[$AsyncCtx11 + 252 >> 2] = $18; //@line 21063
  HEAP32[$AsyncCtx11 + 256 >> 2] = $1; //@line 21065
  HEAP8[$AsyncCtx11 + 260 >> 0] = $2; //@line 21067
  HEAP8[$AsyncCtx11 + 261 >> 0] = $3; //@line 21069
  HEAP32[$AsyncCtx11 + 264 >> 2] = $8; //@line 21071
  HEAP32[$AsyncCtx11 + 268 >> 2] = $7; //@line 21073
  sp = STACKTOP; //@line 21074
  STACKTOP = sp; //@line 21075
  return 0; //@line 21075
 } else if ((label | 0) == 42) {
  HEAP32[$AsyncCtx15 >> 2] = 580; //@line 21078
  HEAP32[$AsyncCtx15 + 4 >> 2] = $17; //@line 21080
  HEAP32[$AsyncCtx15 + 8 >> 2] = $8; //@line 21082
  HEAP32[$AsyncCtx15 + 12 >> 2] = $29; //@line 21084
  HEAP32[$AsyncCtx15 + 16 >> 2] = $9; //@line 21086
  HEAP32[$AsyncCtx15 + 20 >> 2] = $8; //@line 21088
  HEAP32[$AsyncCtx15 + 24 >> 2] = $38; //@line 21090
  HEAP32[$AsyncCtx15 + 28 >> 2] = $28; //@line 21092
  HEAP32[$AsyncCtx15 + 32 >> 2] = $39; //@line 21094
  HEAP32[$AsyncCtx15 + 36 >> 2] = $15; //@line 21096
  HEAP32[$AsyncCtx15 + 40 >> 2] = $27; //@line 21098
  HEAP32[$AsyncCtx15 + 44 >> 2] = $7; //@line 21100
  HEAP32[$AsyncCtx15 + 48 >> 2] = $8; //@line 21102
  HEAP32[$AsyncCtx15 + 52 >> 2] = $9; //@line 21104
  HEAP32[$AsyncCtx15 + 56 >> 2] = $16; //@line 21106
  HEAP32[$AsyncCtx15 + 60 >> 2] = $40; //@line 21108
  HEAP32[$AsyncCtx15 + 64 >> 2] = $37; //@line 21110
  HEAP32[$AsyncCtx15 + 68 >> 2] = $7; //@line 21112
  HEAP32[$AsyncCtx15 + 72 >> 2] = $26; //@line 21114
  HEAP32[$AsyncCtx15 + 76 >> 2] = $36; //@line 21116
  HEAP32[$AsyncCtx15 + 80 >> 2] = $41; //@line 21118
  HEAP32[$AsyncCtx15 + 84 >> 2] = $25; //@line 21120
  HEAP32[$AsyncCtx15 + 88 >> 2] = $35; //@line 21122
  HEAP32[$AsyncCtx15 + 92 >> 2] = $9; //@line 21124
  HEAP32[$AsyncCtx15 + 96 >> 2] = $42; //@line 21126
  HEAP32[$AsyncCtx15 + 100 >> 2] = $11; //@line 21128
  HEAP32[$AsyncCtx15 + 104 >> 2] = $6; //@line 21130
  HEAP32[$AsyncCtx15 + 108 >> 2] = $8; //@line 21132
  HEAP32[$AsyncCtx15 + 112 >> 2] = $8; //@line 21134
  HEAP32[$AsyncCtx15 + 116 >> 2] = $8; //@line 21136
  HEAP32[$AsyncCtx15 + 120 >> 2] = $13; //@line 21138
  HEAP32[$AsyncCtx15 + 124 >> 2] = $10; //@line 21140
  HEAP32[$AsyncCtx15 + 128 >> 2] = $24; //@line 21142
  HEAP8[$AsyncCtx15 + 132 >> 0] = $553; //@line 21144
  HEAP32[$AsyncCtx15 + 136 >> 2] = $34; //@line 21146
  HEAP32[$AsyncCtx15 + 140 >> 2] = $23; //@line 21148
  HEAP32[$AsyncCtx15 + 144 >> 2] = $43; //@line 21150
  HEAP32[$AsyncCtx15 + 148 >> 2] = $7; //@line 21152
  HEAP32[$AsyncCtx15 + 152 >> 2] = $33; //@line 21154
  HEAP32[$AsyncCtx15 + 156 >> 2] = $22; //@line 21156
  HEAP32[$AsyncCtx15 + 160 >> 2] = $44; //@line 21158
  HEAP32[$AsyncCtx15 + 164 >> 2] = $21; //@line 21160
  HEAP32[$AsyncCtx15 + 168 >> 2] = $7; //@line 21162
  HEAP32[$AsyncCtx15 + 172 >> 2] = $32; //@line 21164
  HEAP32[$AsyncCtx15 + 176 >> 2] = $12; //@line 21166
  HEAP32[$AsyncCtx15 + 180 >> 2] = $8; //@line 21168
  HEAP32[$AsyncCtx15 + 184 >> 2] = $45; //@line 21170
  HEAP32[$AsyncCtx15 + 188 >> 2] = $20; //@line 21172
  HEAP32[$AsyncCtx15 + 192 >> 2] = $8; //@line 21174
  HEAP32[$AsyncCtx15 + 196 >> 2] = $8; //@line 21176
  HEAP32[$AsyncCtx15 + 200 >> 2] = $31; //@line 21178
  HEAP32[$AsyncCtx15 + 204 >> 2] = $0; //@line 21180
  HEAP32[$AsyncCtx15 + 208 >> 2] = $46; //@line 21182
  HEAP32[$AsyncCtx15 + 212 >> 2] = $9; //@line 21184
  HEAP32[$AsyncCtx15 + 216 >> 2] = $30; //@line 21186
  HEAP32[$AsyncCtx15 + 220 >> 2] = $8; //@line 21188
  HEAP32[$AsyncCtx15 + 224 >> 2] = $19; //@line 21190
  HEAP8[$AsyncCtx15 + 228 >> 0] = $4; //@line 21192
  HEAP32[$AsyncCtx15 + 232 >> 2] = $8; //@line 21194
  HEAP32[$AsyncCtx15 + 236 >> 2] = $0; //@line 21196
  HEAP32[$AsyncCtx15 + 240 >> 2] = $47; //@line 21198
  HEAP32[$AsyncCtx15 + 244 >> 2] = $7; //@line 21200
  HEAP32[$AsyncCtx15 + 248 >> 2] = $18; //@line 21202
  HEAP32[$AsyncCtx15 + 252 >> 2] = $1; //@line 21204
  HEAP8[$AsyncCtx15 + 256 >> 0] = $2; //@line 21206
  HEAP8[$AsyncCtx15 + 257 >> 0] = $3; //@line 21208
  HEAP32[$AsyncCtx15 + 260 >> 2] = $8; //@line 21210
  HEAP32[$AsyncCtx15 + 264 >> 2] = $7; //@line 21212
  sp = STACKTOP; //@line 21213
  STACKTOP = sp; //@line 21214
  return 0; //@line 21214
 } else if ((label | 0) == 47) {
  STACKTOP = sp; //@line 21217
  return $$096$lcssa | 0; //@line 21217
 }
 return 0; //@line 21219
}
function __ZN12LoRaWANStack18lora_state_machineEv($0) {
 $0 = $0 | 0;
 var $$029 = 0, $$1 = 0, $1 = 0, $102 = 0, $104 = 0, $110 = 0, $111 = 0, $115 = 0, $118 = 0, $125 = 0, $126 = 0, $168 = 0, $169 = 0, $173 = 0, $175 = 0, $181 = 0, $182 = 0, $186 = 0, $189 = 0, $194 = 0, $197 = 0, $2 = 0, $215 = 0, $216 = 0, $220 = 0, $222 = 0, $229 = 0, $230 = 0, $235 = 0, $238 = 0, $250 = 0, $251 = 0, $255 = 0, $257 = 0, $265 = 0, $266 = 0, $272 = 0, $275 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $50 = 0, $51 = 0, $55 = 0, $57 = 0, $6 = 0, $63 = 0, $64 = 0, $68 = 0, $7 = 0, $71 = 0, $92 = 0, $97 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx100 = 0, $AsyncCtx103 = 0, $AsyncCtx106 = 0, $AsyncCtx110 = 0, $AsyncCtx114 = 0, $AsyncCtx118 = 0, $AsyncCtx12 = 0, $AsyncCtx122 = 0, $AsyncCtx126 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx22 = 0, $AsyncCtx26 = 0, $AsyncCtx29 = 0, $AsyncCtx33 = 0, $AsyncCtx36 = 0, $AsyncCtx40 = 0, $AsyncCtx44 = 0, $AsyncCtx48 = 0, $AsyncCtx52 = 0, $AsyncCtx56 = 0, $AsyncCtx60 = 0, $AsyncCtx64 = 0, $AsyncCtx68 = 0, $AsyncCtx72 = 0, $AsyncCtx76 = 0, $AsyncCtx79 = 0, $AsyncCtx83 = 0, $AsyncCtx87 = 0, $AsyncCtx91 = 0, $AsyncCtx94 = 0, $AsyncCtx97 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP; //@line 6556
 STACKTOP = STACKTOP + 160 | 0; //@line 6557
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160); //@line 6557
 $vararg_buffer9 = sp + 56 | 0; //@line 6558
 $vararg_buffer7 = sp + 48 | 0; //@line 6559
 $vararg_buffer5 = sp + 40 | 0; //@line 6560
 $vararg_buffer3 = sp + 32 | 0; //@line 6561
 $vararg_buffer1 = sp + 8 | 0; //@line 6562
 $1 = sp + 144 | 0; //@line 6564
 $2 = sp + 128 | 0; //@line 6565
 $3 = sp + 112 | 0; //@line 6566
 $4 = sp + 96 | 0; //@line 6567
 $5 = sp + 80 | 0; //@line 6568
 $6 = sp + 64 | 0; //@line 6569
 _printf(12115, sp) | 0; //@line 6570
 $7 = $0 + 1876 | 0; //@line 6571
 HEAP32[$vararg_buffer1 >> 2] = HEAP32[$7 >> 2]; //@line 6573
 _printf(12128, $vararg_buffer1) | 0; //@line 6574
 $AsyncCtx52 = _emscripten_alloc_async_context(76, sp) | 0; //@line 6575
 _putchar(10) | 0; //@line 6576
 if (___async) {
  HEAP32[$AsyncCtx52 >> 2] = 224; //@line 6579
  HEAP32[$AsyncCtx52 + 4 >> 2] = $0; //@line 6581
  HEAP32[$AsyncCtx52 + 8 >> 2] = $3; //@line 6583
  HEAP32[$AsyncCtx52 + 12 >> 2] = $1; //@line 6585
  HEAP32[$AsyncCtx52 + 16 >> 2] = $7; //@line 6587
  HEAP32[$AsyncCtx52 + 20 >> 2] = $5; //@line 6589
  HEAP32[$AsyncCtx52 + 24 >> 2] = $1; //@line 6591
  HEAP32[$AsyncCtx52 + 28 >> 2] = $vararg_buffer7; //@line 6593
  HEAP32[$AsyncCtx52 + 32 >> 2] = $vararg_buffer7; //@line 6595
  HEAP32[$AsyncCtx52 + 36 >> 2] = $vararg_buffer9; //@line 6597
  HEAP32[$AsyncCtx52 + 40 >> 2] = $vararg_buffer9; //@line 6599
  HEAP32[$AsyncCtx52 + 44 >> 2] = $6; //@line 6601
  HEAP32[$AsyncCtx52 + 48 >> 2] = $2; //@line 6603
  HEAP32[$AsyncCtx52 + 52 >> 2] = $4; //@line 6605
  HEAP32[$AsyncCtx52 + 56 >> 2] = $vararg_buffer1; //@line 6607
  HEAP32[$AsyncCtx52 + 60 >> 2] = $vararg_buffer3; //@line 6609
  HEAP32[$AsyncCtx52 + 64 >> 2] = $vararg_buffer3; //@line 6611
  HEAP32[$AsyncCtx52 + 68 >> 2] = $vararg_buffer5; //@line 6613
  HEAP32[$AsyncCtx52 + 72 >> 2] = $vararg_buffer5; //@line 6615
  sp = STACKTOP; //@line 6616
  STACKTOP = sp; //@line 6617
  return 0; //@line 6617
 }
 _emscripten_free_async_context($AsyncCtx52 | 0); //@line 6619
 switch (HEAP32[$7 >> 2] | 0) {
 case 7:
  {
   $28 = $0 + 4 | 0; //@line 6623
   $AsyncCtx87 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6624
   __ZN7LoRaMac19remove_channel_planEv($28) | 0; //@line 6625
   if (___async) {
    HEAP32[$AsyncCtx87 >> 2] = 225; //@line 6628
    HEAP32[$AsyncCtx87 + 4 >> 2] = $1; //@line 6630
    HEAP32[$AsyncCtx87 + 8 >> 2] = $28; //@line 6632
    HEAP32[$AsyncCtx87 + 12 >> 2] = $0; //@line 6634
    HEAP32[$AsyncCtx87 + 16 >> 2] = $1; //@line 6636
    HEAP32[$AsyncCtx87 + 20 >> 2] = $2; //@line 6638
    sp = STACKTOP; //@line 6639
    STACKTOP = sp; //@line 6640
    return 0; //@line 6640
   }
   _emscripten_free_async_context($AsyncCtx87 | 0); //@line 6642
   $AsyncCtx83 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6643
   __ZN7LoRaMac10disconnectEv($28); //@line 6644
   if (___async) {
    HEAP32[$AsyncCtx83 >> 2] = 226; //@line 6647
    HEAP32[$AsyncCtx83 + 4 >> 2] = $1; //@line 6649
    HEAP32[$AsyncCtx83 + 8 >> 2] = $28; //@line 6651
    HEAP32[$AsyncCtx83 + 12 >> 2] = $0; //@line 6653
    HEAP32[$AsyncCtx83 + 16 >> 2] = $1; //@line 6655
    HEAP32[$AsyncCtx83 + 20 >> 2] = $2; //@line 6657
    sp = STACKTOP; //@line 6658
    STACKTOP = sp; //@line 6659
    return 0; //@line 6659
   }
   _emscripten_free_async_context($AsyncCtx83 | 0); //@line 6661
   HEAP32[$1 >> 2] = 1; //@line 6662
   HEAP8[$1 + 4 >> 0] = 0; //@line 6664
   $AsyncCtx79 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6665
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($28, $1) | 0; //@line 6666
   if (___async) {
    HEAP32[$AsyncCtx79 >> 2] = 227; //@line 6669
    HEAP32[$AsyncCtx79 + 4 >> 2] = $0; //@line 6671
    HEAP32[$AsyncCtx79 + 8 >> 2] = $1; //@line 6673
    HEAP32[$AsyncCtx79 + 12 >> 2] = $2; //@line 6675
    sp = STACKTOP; //@line 6676
    STACKTOP = sp; //@line 6677
    return 0; //@line 6677
   }
   _emscripten_free_async_context($AsyncCtx79 | 0); //@line 6679
   HEAP8[$0 + 1964 >> 0] = 0; //@line 6682
   HEAP32[$0 + 2256 >> 2] = 0; //@line 6684
   HEAP8[$0 + 2236 >> 0] = 0; //@line 6686
   HEAP16[$0 + 2282 >> 1] = 0; //@line 6688
   HEAP16[$0 + 2260 >> 1] = 0; //@line 6690
   HEAP8[$0 + 1932 >> 0] = 0; //@line 6692
   $50 = $0 + 1892 | 0; //@line 6693
   _memset($0 + 1975 | 0, 0, 259) | 0; //@line 6694
   $51 = HEAP32[$50 >> 2] | 0; //@line 6695
   if (!$51) {
    $$1 = -1011; //@line 6698
    STACKTOP = sp; //@line 6699
    return $$1 | 0; //@line 6699
   }
   $55 = HEAP32[$0 + 2288 >> 2] | 0; //@line 6703
   $57 = HEAP32[$51 + 4 >> 2] | 0; //@line 6705
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 6706
   FUNCTION_TABLE_vii[$57 & 31]($2, $0 + 1880 | 0); //@line 6707
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 228; //@line 6710
    HEAP32[$AsyncCtx + 4 >> 2] = $50; //@line 6712
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 6714
    HEAP32[$AsyncCtx + 12 >> 2] = $55; //@line 6716
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 6718
    HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 6720
    sp = STACKTOP; //@line 6721
    STACKTOP = sp; //@line 6722
    return 0; //@line 6722
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 6724
   $63 = $2 + 12 | 0; //@line 6726
   HEAP32[$63 >> 2] = HEAP32[$50 >> 2]; //@line 6727
   $AsyncCtx106 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6728
   $64 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($55, $2, 1) | 0; //@line 6729
   if (___async) {
    HEAP32[$AsyncCtx106 >> 2] = 229; //@line 6732
    HEAP32[$AsyncCtx106 + 4 >> 2] = $63; //@line 6734
    HEAP32[$AsyncCtx106 + 8 >> 2] = $2; //@line 6736
    HEAP32[$AsyncCtx106 + 12 >> 2] = $1; //@line 6738
    sp = STACKTOP; //@line 6739
    STACKTOP = sp; //@line 6740
    return 0; //@line 6740
   }
   _emscripten_free_async_context($AsyncCtx106 | 0); //@line 6742
   $68 = HEAP32[$63 >> 2] | 0; //@line 6743
   do {
    if ($68 | 0) {
     $71 = HEAP32[$68 + 8 >> 2] | 0; //@line 6748
     $AsyncCtx12 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6749
     FUNCTION_TABLE_vi[$71 & 1023]($2); //@line 6750
     if (___async) {
      HEAP32[$AsyncCtx12 >> 2] = 230; //@line 6753
      HEAP32[$AsyncCtx12 + 4 >> 2] = $64; //@line 6755
      HEAP32[$AsyncCtx12 + 8 >> 2] = $1; //@line 6757
      sp = STACKTOP; //@line 6758
      STACKTOP = sp; //@line 6759
      return 0; //@line 6759
     } else {
      _emscripten_free_async_context($AsyncCtx12 | 0); //@line 6761
      break;
     }
    }
   } while (0);
   if ($64 | 0) {
    $$1 = -1011; //@line 6768
    STACKTOP = sp; //@line 6769
    return $$1 | 0; //@line 6769
   }
   $AsyncCtx126 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6771
   _mbed_assert_internal(12827, 11911, 1141); //@line 6772
   if (___async) {
    HEAP32[$AsyncCtx126 >> 2] = 231; //@line 6775
    HEAP32[$AsyncCtx126 + 4 >> 2] = $1; //@line 6777
    sp = STACKTOP; //@line 6778
    STACKTOP = sp; //@line 6779
    return 0; //@line 6779
   }
   _emscripten_free_async_context($AsyncCtx126 | 0); //@line 6781
   $$1 = -1011; //@line 6782
   STACKTOP = sp; //@line 6783
   return $$1 | 0; //@line 6783
  }
 case 1:
  {
   $$1 = 0; //@line 6787
   STACKTOP = sp; //@line 6788
   return $$1 | 0; //@line 6788
  }
 case 2:
  {
   if (HEAP8[$0 + 1936 >> 0] | 0) {
    $$1 = -1003; //@line 6796
    STACKTOP = sp; //@line 6797
    return $$1 | 0; //@line 6797
   }
   HEAP32[$vararg_buffer1 >> 2] = 0; //@line 6799
   HEAP32[$vararg_buffer1 + 4 >> 2] = HEAP32[$0 + 1940 >> 2]; //@line 6803
   HEAP32[$vararg_buffer1 + 8 >> 2] = HEAP32[$0 + 1944 >> 2]; //@line 6807
   HEAP32[$vararg_buffer1 + 12 >> 2] = HEAP32[$0 + 1948 >> 2]; //@line 6811
   HEAP8[$vararg_buffer1 + 16 >> 0] = HEAP8[$0 + 1952 >> 0] | 0; //@line 6815
   $AsyncCtx91 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6817
   $92 = __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t($0 + 4 | 0, $vararg_buffer1) | 0; //@line 6818
   if (___async) {
    HEAP32[$AsyncCtx91 >> 2] = 232; //@line 6821
    HEAP32[$AsyncCtx91 + 4 >> 2] = $vararg_buffer1; //@line 6823
    HEAP32[$AsyncCtx91 + 8 >> 2] = $1; //@line 6825
    sp = STACKTOP; //@line 6826
    STACKTOP = sp; //@line 6827
    return 0; //@line 6827
   }
   _emscripten_free_async_context($AsyncCtx91 | 0); //@line 6829
   $$1 = ($92 | 0) == 0 ? -1016 : $92; //@line 6832
   STACKTOP = sp; //@line 6833
   return $$1 | 0; //@line 6833
  }
 case 4:
  {
   HEAP8[$0 + 1932 >> 0] = 1; //@line 6838
   $97 = $0 + 1892 | 0; //@line 6839
   $98 = HEAP32[$97 >> 2] | 0; //@line 6840
   if (!$98) {
    $$1 = 0; //@line 6843
    STACKTOP = sp; //@line 6844
    return $$1 | 0; //@line 6844
   }
   $102 = HEAP32[$0 + 2288 >> 2] | 0; //@line 6848
   $104 = HEAP32[$98 + 4 >> 2] | 0; //@line 6850
   $AsyncCtx15 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6851
   FUNCTION_TABLE_vii[$104 & 31]($3, $0 + 1880 | 0); //@line 6852
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 233; //@line 6855
    HEAP32[$AsyncCtx15 + 4 >> 2] = $97; //@line 6857
    HEAP32[$AsyncCtx15 + 8 >> 2] = $3; //@line 6859
    HEAP32[$AsyncCtx15 + 12 >> 2] = $102; //@line 6861
    HEAP32[$AsyncCtx15 + 16 >> 2] = $3; //@line 6863
    HEAP32[$AsyncCtx15 + 20 >> 2] = $1; //@line 6865
    sp = STACKTOP; //@line 6866
    STACKTOP = sp; //@line 6867
    return 0; //@line 6867
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 6869
   $110 = $3 + 12 | 0; //@line 6871
   HEAP32[$110 >> 2] = HEAP32[$97 >> 2]; //@line 6872
   $AsyncCtx103 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6873
   $111 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($102, $3, 0) | 0; //@line 6874
   if (___async) {
    HEAP32[$AsyncCtx103 >> 2] = 234; //@line 6877
    HEAP32[$AsyncCtx103 + 4 >> 2] = $110; //@line 6879
    HEAP32[$AsyncCtx103 + 8 >> 2] = $3; //@line 6881
    HEAP32[$AsyncCtx103 + 12 >> 2] = $1; //@line 6883
    sp = STACKTOP; //@line 6884
    STACKTOP = sp; //@line 6885
    return 0; //@line 6885
   }
   _emscripten_free_async_context($AsyncCtx103 | 0); //@line 6887
   $115 = HEAP32[$110 >> 2] | 0; //@line 6888
   do {
    if ($115 | 0) {
     $118 = HEAP32[$115 + 8 >> 2] | 0; //@line 6893
     $AsyncCtx19 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6894
     FUNCTION_TABLE_vi[$118 & 1023]($3); //@line 6895
     if (___async) {
      HEAP32[$AsyncCtx19 >> 2] = 235; //@line 6898
      HEAP32[$AsyncCtx19 + 4 >> 2] = $111; //@line 6900
      HEAP32[$AsyncCtx19 + 8 >> 2] = $1; //@line 6902
      sp = STACKTOP; //@line 6903
      STACKTOP = sp; //@line 6904
      return 0; //@line 6904
     } else {
      _emscripten_free_async_context($AsyncCtx19 | 0); //@line 6906
      break;
     }
    }
   } while (0);
   if ($111 | 0) {
    $$1 = 0; //@line 6913
    STACKTOP = sp; //@line 6914
    return $$1 | 0; //@line 6914
   }
   $AsyncCtx122 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6916
   _mbed_assert_internal(12827, 11911, 1186); //@line 6917
   if (___async) {
    HEAP32[$AsyncCtx122 >> 2] = 236; //@line 6920
    HEAP32[$AsyncCtx122 + 4 >> 2] = $1; //@line 6922
    sp = STACKTOP; //@line 6923
    STACKTOP = sp; //@line 6924
    return 0; //@line 6924
   }
   _emscripten_free_async_context($AsyncCtx122 | 0); //@line 6926
   $$1 = 0; //@line 6927
   STACKTOP = sp; //@line 6928
   return $$1 | 0; //@line 6928
  }
 case 3:
  {
   HEAP32[$1 >> 2] = 3; //@line 6932
   $125 = $1 + 4 | 0; //@line 6935
   HEAP32[$125 >> 2] = HEAP32[$0 + 1940 >> 2]; //@line 6936
   $126 = $0 + 4 | 0; //@line 6937
   $AsyncCtx76 = _emscripten_alloc_async_context(36, sp) | 0; //@line 6938
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($126, $1) | 0; //@line 6939
   if (___async) {
    HEAP32[$AsyncCtx76 >> 2] = 237; //@line 6942
    HEAP32[$AsyncCtx76 + 4 >> 2] = $0; //@line 6944
    HEAP32[$AsyncCtx76 + 8 >> 2] = $4; //@line 6946
    HEAP32[$AsyncCtx76 + 12 >> 2] = $1; //@line 6948
    HEAP32[$AsyncCtx76 + 16 >> 2] = $1; //@line 6950
    HEAP32[$AsyncCtx76 + 20 >> 2] = $125; //@line 6952
    HEAP32[$AsyncCtx76 + 24 >> 2] = $126; //@line 6954
    HEAP32[$AsyncCtx76 + 28 >> 2] = $1; //@line 6956
    HEAP32[$AsyncCtx76 + 32 >> 2] = $125; //@line 6958
    sp = STACKTOP; //@line 6959
    STACKTOP = sp; //@line 6960
    return 0; //@line 6960
   }
   _emscripten_free_async_context($AsyncCtx76 | 0); //@line 6962
   HEAP32[$1 >> 2] = 4; //@line 6963
   HEAP32[$125 >> 2] = HEAP32[$0 + 1944 >> 2]; //@line 6966
   $AsyncCtx72 = _emscripten_alloc_async_context(36, sp) | 0; //@line 6967
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($126, $1) | 0; //@line 6968
   if (___async) {
    HEAP32[$AsyncCtx72 >> 2] = 238; //@line 6971
    HEAP32[$AsyncCtx72 + 4 >> 2] = $0; //@line 6973
    HEAP32[$AsyncCtx72 + 8 >> 2] = $4; //@line 6975
    HEAP32[$AsyncCtx72 + 12 >> 2] = $1; //@line 6977
    HEAP32[$AsyncCtx72 + 16 >> 2] = $1; //@line 6979
    HEAP32[$AsyncCtx72 + 20 >> 2] = $125; //@line 6981
    HEAP32[$AsyncCtx72 + 24 >> 2] = $126; //@line 6983
    HEAP32[$AsyncCtx72 + 28 >> 2] = $1; //@line 6985
    HEAP32[$AsyncCtx72 + 32 >> 2] = $125; //@line 6987
    sp = STACKTOP; //@line 6988
    STACKTOP = sp; //@line 6989
    return 0; //@line 6989
   }
   _emscripten_free_async_context($AsyncCtx72 | 0); //@line 6991
   HEAP32[$1 >> 2] = 5; //@line 6992
   HEAP32[$125 >> 2] = HEAP32[$0 + 1948 >> 2]; //@line 6995
   $AsyncCtx68 = _emscripten_alloc_async_context(36, sp) | 0; //@line 6996
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($126, $1) | 0; //@line 6997
   if (___async) {
    HEAP32[$AsyncCtx68 >> 2] = 239; //@line 7000
    HEAP32[$AsyncCtx68 + 4 >> 2] = $0; //@line 7002
    HEAP32[$AsyncCtx68 + 8 >> 2] = $4; //@line 7004
    HEAP32[$AsyncCtx68 + 12 >> 2] = $1; //@line 7006
    HEAP32[$AsyncCtx68 + 16 >> 2] = $1; //@line 7008
    HEAP32[$AsyncCtx68 + 20 >> 2] = $125; //@line 7010
    HEAP32[$AsyncCtx68 + 24 >> 2] = $126; //@line 7012
    HEAP32[$AsyncCtx68 + 28 >> 2] = $1; //@line 7014
    HEAP32[$AsyncCtx68 + 32 >> 2] = $125; //@line 7016
    sp = STACKTOP; //@line 7017
    STACKTOP = sp; //@line 7018
    return 0; //@line 7018
   }
   _emscripten_free_async_context($AsyncCtx68 | 0); //@line 7020
   HEAP32[$1 >> 2] = 6; //@line 7021
   HEAP32[$125 >> 2] = HEAP32[$0 + 1952 >> 2]; //@line 7024
   $AsyncCtx64 = _emscripten_alloc_async_context(32, sp) | 0; //@line 7025
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($126, $1) | 0; //@line 7026
   if (___async) {
    HEAP32[$AsyncCtx64 >> 2] = 240; //@line 7029
    HEAP32[$AsyncCtx64 + 4 >> 2] = $1; //@line 7031
    HEAP32[$AsyncCtx64 + 8 >> 2] = $125; //@line 7033
    HEAP32[$AsyncCtx64 + 12 >> 2] = $126; //@line 7035
    HEAP32[$AsyncCtx64 + 16 >> 2] = $1; //@line 7037
    HEAP32[$AsyncCtx64 + 20 >> 2] = $0; //@line 7039
    HEAP32[$AsyncCtx64 + 24 >> 2] = $1; //@line 7041
    HEAP32[$AsyncCtx64 + 28 >> 2] = $4; //@line 7043
    sp = STACKTOP; //@line 7044
    STACKTOP = sp; //@line 7045
    return 0; //@line 7045
   }
   _emscripten_free_async_context($AsyncCtx64 | 0); //@line 7047
   HEAP32[$1 >> 2] = 1; //@line 7048
   HEAP8[$125 >> 0] = 1; //@line 7049
   $AsyncCtx60 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7050
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($126, $1) | 0; //@line 7051
   if (___async) {
    HEAP32[$AsyncCtx60 >> 2] = 241; //@line 7054
    HEAP32[$AsyncCtx60 + 4 >> 2] = $0; //@line 7056
    HEAP32[$AsyncCtx60 + 8 >> 2] = $1; //@line 7058
    HEAP32[$AsyncCtx60 + 12 >> 2] = $4; //@line 7060
    sp = STACKTOP; //@line 7061
    STACKTOP = sp; //@line 7062
    return 0; //@line 7062
   }
   _emscripten_free_async_context($AsyncCtx60 | 0); //@line 7064
   HEAP8[$0 + 1932 >> 0] = 1; //@line 7066
   $168 = $0 + 1892 | 0; //@line 7067
   $169 = HEAP32[$168 >> 2] | 0; //@line 7068
   if (!$169) {
    $$1 = 0; //@line 7071
    STACKTOP = sp; //@line 7072
    return $$1 | 0; //@line 7072
   }
   $173 = HEAP32[$0 + 2288 >> 2] | 0; //@line 7076
   $175 = HEAP32[$169 + 4 >> 2] | 0; //@line 7078
   $AsyncCtx22 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7079
   FUNCTION_TABLE_vii[$175 & 31]($4, $0 + 1880 | 0); //@line 7080
   if (___async) {
    HEAP32[$AsyncCtx22 >> 2] = 242; //@line 7083
    HEAP32[$AsyncCtx22 + 4 >> 2] = $168; //@line 7085
    HEAP32[$AsyncCtx22 + 8 >> 2] = $4; //@line 7087
    HEAP32[$AsyncCtx22 + 12 >> 2] = $173; //@line 7089
    HEAP32[$AsyncCtx22 + 16 >> 2] = $4; //@line 7091
    HEAP32[$AsyncCtx22 + 20 >> 2] = $1; //@line 7093
    sp = STACKTOP; //@line 7094
    STACKTOP = sp; //@line 7095
    return 0; //@line 7095
   }
   _emscripten_free_async_context($AsyncCtx22 | 0); //@line 7097
   $181 = $4 + 12 | 0; //@line 7099
   HEAP32[$181 >> 2] = HEAP32[$168 >> 2]; //@line 7100
   $AsyncCtx100 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7101
   $182 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($173, $4, 0) | 0; //@line 7102
   if (___async) {
    HEAP32[$AsyncCtx100 >> 2] = 243; //@line 7105
    HEAP32[$AsyncCtx100 + 4 >> 2] = $181; //@line 7107
    HEAP32[$AsyncCtx100 + 8 >> 2] = $4; //@line 7109
    HEAP32[$AsyncCtx100 + 12 >> 2] = $1; //@line 7111
    sp = STACKTOP; //@line 7112
    STACKTOP = sp; //@line 7113
    return 0; //@line 7113
   }
   _emscripten_free_async_context($AsyncCtx100 | 0); //@line 7115
   $186 = HEAP32[$181 >> 2] | 0; //@line 7116
   do {
    if ($186 | 0) {
     $189 = HEAP32[$186 + 8 >> 2] | 0; //@line 7121
     $AsyncCtx26 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7122
     FUNCTION_TABLE_vi[$189 & 1023]($4); //@line 7123
     if (___async) {
      HEAP32[$AsyncCtx26 >> 2] = 244; //@line 7126
      HEAP32[$AsyncCtx26 + 4 >> 2] = $182; //@line 7128
      HEAP32[$AsyncCtx26 + 8 >> 2] = $1; //@line 7130
      sp = STACKTOP; //@line 7131
      STACKTOP = sp; //@line 7132
      return 0; //@line 7132
     } else {
      _emscripten_free_async_context($AsyncCtx26 | 0); //@line 7134
      break;
     }
    }
   } while (0);
   if ($182 | 0) {
    $$1 = 0; //@line 7141
    STACKTOP = sp; //@line 7142
    return $$1 | 0; //@line 7142
   }
   $AsyncCtx118 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7144
   _mbed_assert_internal(12827, 11911, 1223); //@line 7145
   if (___async) {
    HEAP32[$AsyncCtx118 >> 2] = 245; //@line 7148
    HEAP32[$AsyncCtx118 + 4 >> 2] = $1; //@line 7150
    sp = STACKTOP; //@line 7151
    STACKTOP = sp; //@line 7152
    return 0; //@line 7152
   }
   _emscripten_free_async_context($AsyncCtx118 | 0); //@line 7154
   $$1 = 0; //@line 7155
   STACKTOP = sp; //@line 7156
   return $$1 | 0; //@line 7156
  }
 case 5:
  {
   $194 = $0 + 1964 | 0; //@line 7160
   L111 : do {
    if (!(HEAP8[$194 >> 0] | 0)) {
     HEAP8[$194 >> 0] = 1; //@line 7165
     $AsyncCtx56 = _emscripten_alloc_async_context(56, sp) | 0; //@line 7166
     $197 = __ZN12LoRaWANStack17send_frame_to_macEv($0) | 0; //@line 7167
     if (___async) {
      HEAP32[$AsyncCtx56 >> 2] = 246; //@line 7170
      HEAP32[$AsyncCtx56 + 4 >> 2] = $7; //@line 7172
      HEAP32[$AsyncCtx56 + 8 >> 2] = $1; //@line 7174
      HEAP32[$AsyncCtx56 + 12 >> 2] = $0; //@line 7176
      HEAP32[$AsyncCtx56 + 16 >> 2] = $5; //@line 7178
      HEAP32[$AsyncCtx56 + 20 >> 2] = $vararg_buffer7; //@line 7180
      HEAP32[$AsyncCtx56 + 24 >> 2] = $vararg_buffer7; //@line 7182
      HEAP32[$AsyncCtx56 + 28 >> 2] = $vararg_buffer9; //@line 7184
      HEAP32[$AsyncCtx56 + 32 >> 2] = $vararg_buffer9; //@line 7186
      HEAP32[$AsyncCtx56 + 36 >> 2] = $6; //@line 7188
      HEAP32[$AsyncCtx56 + 40 >> 2] = $vararg_buffer3; //@line 7190
      HEAP32[$AsyncCtx56 + 44 >> 2] = $vararg_buffer3; //@line 7192
      HEAP32[$AsyncCtx56 + 48 >> 2] = $vararg_buffer5; //@line 7194
      HEAP32[$AsyncCtx56 + 52 >> 2] = $vararg_buffer5; //@line 7196
      sp = STACKTOP; //@line 7197
      STACKTOP = sp; //@line 7198
      return 0; //@line 7198
     }
     _emscripten_free_async_context($AsyncCtx56 | 0); //@line 7200
     switch ($197 | 0) {
     case 0:
      {
       $$029 = 0; //@line 7203
       break L111;
       break;
      }
     case -1014:
      {
       _printf(11863, $vararg_buffer3) | 0; //@line 7208
       _printf(12150, $vararg_buffer5) | 0; //@line 7209
       $AsyncCtx48 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7210
       _putchar(10) | 0; //@line 7211
       if (___async) {
        HEAP32[$AsyncCtx48 >> 2] = 247; //@line 7214
        HEAP32[$AsyncCtx48 + 4 >> 2] = $0; //@line 7216
        HEAP32[$AsyncCtx48 + 8 >> 2] = $7; //@line 7218
        HEAP32[$AsyncCtx48 + 12 >> 2] = $5; //@line 7220
        HEAP32[$AsyncCtx48 + 16 >> 2] = $1; //@line 7222
        sp = STACKTOP; //@line 7223
        STACKTOP = sp; //@line 7224
        return 0; //@line 7224
       }
       _emscripten_free_async_context($AsyncCtx48 | 0); //@line 7226
       $215 = $0 + 1892 | 0; //@line 7227
       $216 = HEAP32[$215 >> 2] | 0; //@line 7228
       if (!$216) {
        $$029 = -1014; //@line 7231
        break L111;
       }
       $220 = HEAP32[$0 + 2288 >> 2] | 0; //@line 7236
       $222 = HEAP32[$216 + 4 >> 2] | 0; //@line 7238
       $AsyncCtx29 = _emscripten_alloc_async_context(28, sp) | 0; //@line 7239
       FUNCTION_TABLE_vii[$222 & 31]($5, $0 + 1880 | 0); //@line 7240
       if (___async) {
        HEAP32[$AsyncCtx29 >> 2] = 248; //@line 7243
        HEAP32[$AsyncCtx29 + 4 >> 2] = $215; //@line 7245
        HEAP32[$AsyncCtx29 + 8 >> 2] = $5; //@line 7247
        HEAP32[$AsyncCtx29 + 12 >> 2] = $220; //@line 7249
        HEAP32[$AsyncCtx29 + 16 >> 2] = $5; //@line 7251
        HEAP32[$AsyncCtx29 + 20 >> 2] = $7; //@line 7253
        HEAP32[$AsyncCtx29 + 24 >> 2] = $1; //@line 7255
        sp = STACKTOP; //@line 7256
        STACKTOP = sp; //@line 7257
        return 0; //@line 7257
       }
       _emscripten_free_async_context($AsyncCtx29 | 0); //@line 7259
       $229 = $5 + 12 | 0; //@line 7261
       HEAP32[$229 >> 2] = HEAP32[$215 >> 2]; //@line 7262
       $AsyncCtx97 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7263
       $230 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($220, $5, 5) | 0; //@line 7264
       if (___async) {
        HEAP32[$AsyncCtx97 >> 2] = 249; //@line 7267
        HEAP32[$AsyncCtx97 + 4 >> 2] = $229; //@line 7269
        HEAP32[$AsyncCtx97 + 8 >> 2] = $5; //@line 7271
        HEAP32[$AsyncCtx97 + 12 >> 2] = $7; //@line 7273
        HEAP32[$AsyncCtx97 + 16 >> 2] = $1; //@line 7275
        sp = STACKTOP; //@line 7276
        STACKTOP = sp; //@line 7277
        return 0; //@line 7277
       }
       _emscripten_free_async_context($AsyncCtx97 | 0); //@line 7279
       $235 = HEAP32[$229 >> 2] | 0; //@line 7280
       do {
        if ($235 | 0) {
         $238 = HEAP32[$235 + 8 >> 2] | 0; //@line 7285
         $AsyncCtx33 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7286
         FUNCTION_TABLE_vi[$238 & 1023]($5); //@line 7287
         if (___async) {
          HEAP32[$AsyncCtx33 >> 2] = 250; //@line 7290
          HEAP32[$AsyncCtx33 + 4 >> 2] = $230; //@line 7292
          HEAP32[$AsyncCtx33 + 8 >> 2] = $7; //@line 7294
          HEAP32[$AsyncCtx33 + 12 >> 2] = $1; //@line 7296
          sp = STACKTOP; //@line 7297
          STACKTOP = sp; //@line 7298
          return 0; //@line 7298
         } else {
          _emscripten_free_async_context($AsyncCtx33 | 0); //@line 7300
          break;
         }
        }
       } while (0);
       if ($230 | 0) {
        $$029 = -1014; //@line 7307
        break L111;
       }
       $AsyncCtx114 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7310
       _mbed_assert_internal(12827, 11911, 1243); //@line 7311
       if (___async) {
        HEAP32[$AsyncCtx114 >> 2] = 251; //@line 7314
        HEAP32[$AsyncCtx114 + 4 >> 2] = $7; //@line 7316
        HEAP32[$AsyncCtx114 + 8 >> 2] = $1; //@line 7318
        sp = STACKTOP; //@line 7319
        STACKTOP = sp; //@line 7320
        return 0; //@line 7320
       } else {
        _emscripten_free_async_context($AsyncCtx114 | 0); //@line 7322
        $$029 = -1014; //@line 7323
        break L111;
       }
       break;
      }
     default:
      {
       _printf(11863, $vararg_buffer7) | 0; //@line 7329
       _printf(12185, $vararg_buffer9) | 0; //@line 7330
       $AsyncCtx44 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7331
       _putchar(10) | 0; //@line 7332
       if (___async) {
        HEAP32[$AsyncCtx44 >> 2] = 252; //@line 7335
        HEAP32[$AsyncCtx44 + 4 >> 2] = $0; //@line 7337
        HEAP32[$AsyncCtx44 + 8 >> 2] = $197; //@line 7339
        HEAP32[$AsyncCtx44 + 12 >> 2] = $7; //@line 7341
        HEAP32[$AsyncCtx44 + 16 >> 2] = $6; //@line 7343
        HEAP32[$AsyncCtx44 + 20 >> 2] = $1; //@line 7345
        sp = STACKTOP; //@line 7346
        STACKTOP = sp; //@line 7347
        return 0; //@line 7347
       }
       _emscripten_free_async_context($AsyncCtx44 | 0); //@line 7349
       $250 = $0 + 1892 | 0; //@line 7350
       $251 = HEAP32[$250 >> 2] | 0; //@line 7351
       if (!$251) {
        $$029 = $197; //@line 7354
        break L111;
       }
       $255 = HEAP32[$0 + 2288 >> 2] | 0; //@line 7359
       $257 = HEAP32[$251 + 4 >> 2] | 0; //@line 7361
       $AsyncCtx36 = _emscripten_alloc_async_context(32, sp) | 0; //@line 7362
       FUNCTION_TABLE_vii[$257 & 31]($6, $0 + 1880 | 0); //@line 7363
       if (___async) {
        HEAP32[$AsyncCtx36 >> 2] = 253; //@line 7366
        HEAP32[$AsyncCtx36 + 4 >> 2] = $250; //@line 7368
        HEAP32[$AsyncCtx36 + 8 >> 2] = $6; //@line 7370
        HEAP32[$AsyncCtx36 + 12 >> 2] = $255; //@line 7372
        HEAP32[$AsyncCtx36 + 16 >> 2] = $6; //@line 7374
        HEAP32[$AsyncCtx36 + 20 >> 2] = $197; //@line 7376
        HEAP32[$AsyncCtx36 + 24 >> 2] = $7; //@line 7378
        HEAP32[$AsyncCtx36 + 28 >> 2] = $1; //@line 7380
        sp = STACKTOP; //@line 7381
        STACKTOP = sp; //@line 7382
        return 0; //@line 7382
       }
       _emscripten_free_async_context($AsyncCtx36 | 0); //@line 7384
       $265 = $6 + 12 | 0; //@line 7386
       HEAP32[$265 >> 2] = HEAP32[$250 >> 2]; //@line 7387
       $AsyncCtx94 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7388
       $266 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($255, $6, 6) | 0; //@line 7389
       if (___async) {
        HEAP32[$AsyncCtx94 >> 2] = 254; //@line 7392
        HEAP32[$AsyncCtx94 + 4 >> 2] = $265; //@line 7394
        HEAP32[$AsyncCtx94 + 8 >> 2] = $6; //@line 7396
        HEAP32[$AsyncCtx94 + 12 >> 2] = $197; //@line 7398
        HEAP32[$AsyncCtx94 + 16 >> 2] = $7; //@line 7400
        HEAP32[$AsyncCtx94 + 20 >> 2] = $1; //@line 7402
        sp = STACKTOP; //@line 7403
        STACKTOP = sp; //@line 7404
        return 0; //@line 7404
       }
       _emscripten_free_async_context($AsyncCtx94 | 0); //@line 7406
       $272 = HEAP32[$265 >> 2] | 0; //@line 7407
       do {
        if ($272 | 0) {
         $275 = HEAP32[$272 + 8 >> 2] | 0; //@line 7412
         $AsyncCtx40 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7413
         FUNCTION_TABLE_vi[$275 & 1023]($6); //@line 7414
         if (___async) {
          HEAP32[$AsyncCtx40 >> 2] = 255; //@line 7417
          HEAP32[$AsyncCtx40 + 4 >> 2] = $266; //@line 7419
          HEAP32[$AsyncCtx40 + 8 >> 2] = $197; //@line 7421
          HEAP32[$AsyncCtx40 + 12 >> 2] = $7; //@line 7423
          HEAP32[$AsyncCtx40 + 16 >> 2] = $1; //@line 7425
          sp = STACKTOP; //@line 7426
          STACKTOP = sp; //@line 7427
          return 0; //@line 7427
         } else {
          _emscripten_free_async_context($AsyncCtx40 | 0); //@line 7429
          break;
         }
        }
       } while (0);
       if ($266 | 0) {
        $$029 = $197; //@line 7436
        break L111;
       }
       $AsyncCtx110 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7439
       _mbed_assert_internal(12827, 11911, 1251); //@line 7440
       if (___async) {
        HEAP32[$AsyncCtx110 >> 2] = 256; //@line 7443
        HEAP32[$AsyncCtx110 + 4 >> 2] = $197; //@line 7445
        HEAP32[$AsyncCtx110 + 8 >> 2] = $7; //@line 7447
        HEAP32[$AsyncCtx110 + 12 >> 2] = $1; //@line 7449
        sp = STACKTOP; //@line 7450
        STACKTOP = sp; //@line 7451
        return 0; //@line 7451
       } else {
        _emscripten_free_async_context($AsyncCtx110 | 0); //@line 7453
        $$029 = $197; //@line 7454
        break L111;
       }
      }
     }
    } else {
     $$029 = 0; //@line 7460
    }
   } while (0);
   HEAP32[$7 >> 2] = 6; //@line 7463
   $$1 = $$029; //@line 7464
   STACKTOP = sp; //@line 7465
   return $$1 | 0; //@line 7465
  }
 case 6:
  {
   $$1 = -1018; //@line 7469
   STACKTOP = sp; //@line 7470
   return $$1 | 0; //@line 7470
  }
 case 0:
  {
   $$1 = -1011; //@line 7474
   STACKTOP = sp; //@line 7475
   return $$1 | 0; //@line 7475
  }
 default:
  {
   $$1 = -1002; //@line 7479
   STACKTOP = sp; //@line 7480
   return $$1 | 0; //@line 7480
  }
 }
 return 0; //@line 7483
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_151($0) {
 $0 = $0 | 0;
 var $$0174 = 0, $$0174209 = 0, $$0174210 = 0, $$1169 = 0, $$1171 = 0, $$1173 = 0, $$1175 = 0, $$sink207 = 0, $10 = 0, $105 = 0, $106 = 0, $12 = 0, $124 = 0, $139 = 0, $14 = 0, $140 = 0, $142 = 0, $144 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $182 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $222 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $272 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $284 = 0, $286 = 0, $287 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $51 = 0, $52 = 0, $57 = 0, $58 = 0, $6 = 0, $62 = 0, $64 = 0, $65 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $90 = 0, $97 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx6 = 0, $sext = 0, $trunc = 0, sp = 0;
 sp = STACKTOP; //@line 29530
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29532
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29534
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29536
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29538
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29540
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29542
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29544
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29546
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29548
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 29550
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 29552
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 29554
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 29556
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 29558
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 29560
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 29562
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 29564
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 29566
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 29568
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 29570
 $42 = HEAP8[$0 + 84 >> 0] | 0; //@line 29572
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 29574
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 29576
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 29578
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 29580
 $51 = HEAP8[$2 >> 0] | 0; //@line 29581
 $trunc = ($51 & 255) >>> 5; //@line 29582
 switch ($trunc & 7) {
 case 1:
  {
   $52 = $12 + 372 | 0; //@line 29586
   if (HEAP8[$52 >> 0] | 0) {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 1; //@line 29592
    $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 29593
    __ZN7LoRaMac21prepare_rx_done_abortEv($12); //@line 29594
    if (___async) {
     HEAP32[$ReallocAsyncCtx13 >> 2] = 375; //@line 29597
     $57 = $ReallocAsyncCtx13 + 4 | 0; //@line 29598
     HEAP32[$57 >> 2] = $6; //@line 29599
     $58 = $ReallocAsyncCtx13 + 8 | 0; //@line 29600
     HEAP32[$58 >> 2] = $8; //@line 29601
     sp = STACKTOP; //@line 29602
     return;
    }
    ___async_unwind = 0; //@line 29605
    HEAP32[$ReallocAsyncCtx13 >> 2] = 375; //@line 29606
    $57 = $ReallocAsyncCtx13 + 4 | 0; //@line 29607
    HEAP32[$57 >> 2] = $6; //@line 29608
    $58 = $ReallocAsyncCtx13 + 8 | 0; //@line 29609
    HEAP32[$58 >> 2] = $8; //@line 29610
    sp = STACKTOP; //@line 29611
    return;
   }
   $62 = $12 + 908 | 0; //@line 29617
   $64 = $12 + 638 | 0; //@line 29619
   $65 = $12 + 639 | 0; //@line 29620
   if (__Z18decrypt_join_framePKhtS0_Ph($2 + 1 | 0, $30 + 65535 & 65535, HEAP32[$62 >> 2] | 0, $65) | 0) {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 13; //@line 29626
    return;
   }
   HEAP8[$64 >> 0] = $51; //@line 29629
   $70 = $30 + -4 | 0; //@line 29630
   $72 = HEAP32[$62 >> 2] | 0; //@line 29632
   $ReallocAsyncCtx16 = _emscripten_realloc_async_context(64) | 0; //@line 29633
   $73 = __Z22compute_join_frame_micPKhtS0_Pj($64, $70 & 65535, $72, $4) | 0; //@line 29634
   if (___async) {
    HEAP32[$ReallocAsyncCtx16 >> 2] = 376; //@line 29637
    $74 = $ReallocAsyncCtx16 + 4 | 0; //@line 29638
    HEAP32[$74 >> 2] = $12; //@line 29639
    $75 = $ReallocAsyncCtx16 + 8 | 0; //@line 29640
    HEAP32[$75 >> 2] = $70; //@line 29641
    $76 = $ReallocAsyncCtx16 + 12 | 0; //@line 29642
    HEAP32[$76 >> 2] = $30; //@line 29643
    $77 = $ReallocAsyncCtx16 + 16 | 0; //@line 29644
    HEAP32[$77 >> 2] = $4; //@line 29645
    $78 = $ReallocAsyncCtx16 + 20 | 0; //@line 29646
    HEAP32[$78 >> 2] = $10; //@line 29647
    $79 = $ReallocAsyncCtx16 + 24 | 0; //@line 29648
    HEAP32[$79 >> 2] = $6; //@line 29649
    $80 = $ReallocAsyncCtx16 + 28 | 0; //@line 29650
    HEAP32[$80 >> 2] = $8; //@line 29651
    $81 = $ReallocAsyncCtx16 + 32 | 0; //@line 29652
    HEAP32[$81 >> 2] = $62; //@line 29653
    $82 = $ReallocAsyncCtx16 + 36 | 0; //@line 29654
    HEAP32[$82 >> 2] = $65; //@line 29655
    $83 = $ReallocAsyncCtx16 + 40 | 0; //@line 29656
    HEAP32[$83 >> 2] = $26; //@line 29657
    $84 = $ReallocAsyncCtx16 + 44 | 0; //@line 29658
    HEAP32[$84 >> 2] = $28; //@line 29659
    $85 = $ReallocAsyncCtx16 + 48 | 0; //@line 29660
    HEAP32[$85 >> 2] = $22; //@line 29661
    $86 = $ReallocAsyncCtx16 + 52 | 0; //@line 29662
    HEAP32[$86 >> 2] = $32; //@line 29663
    $87 = $ReallocAsyncCtx16 + 56 | 0; //@line 29664
    HEAP32[$87 >> 2] = $24; //@line 29665
    $88 = $ReallocAsyncCtx16 + 60 | 0; //@line 29666
    HEAP32[$88 >> 2] = $52; //@line 29667
    sp = STACKTOP; //@line 29668
    return;
   }
   HEAP32[___async_retval >> 2] = $73; //@line 29672
   ___async_unwind = 0; //@line 29673
   HEAP32[$ReallocAsyncCtx16 >> 2] = 376; //@line 29674
   $74 = $ReallocAsyncCtx16 + 4 | 0; //@line 29675
   HEAP32[$74 >> 2] = $12; //@line 29676
   $75 = $ReallocAsyncCtx16 + 8 | 0; //@line 29677
   HEAP32[$75 >> 2] = $70; //@line 29678
   $76 = $ReallocAsyncCtx16 + 12 | 0; //@line 29679
   HEAP32[$76 >> 2] = $30; //@line 29680
   $77 = $ReallocAsyncCtx16 + 16 | 0; //@line 29681
   HEAP32[$77 >> 2] = $4; //@line 29682
   $78 = $ReallocAsyncCtx16 + 20 | 0; //@line 29683
   HEAP32[$78 >> 2] = $10; //@line 29684
   $79 = $ReallocAsyncCtx16 + 24 | 0; //@line 29685
   HEAP32[$79 >> 2] = $6; //@line 29686
   $80 = $ReallocAsyncCtx16 + 28 | 0; //@line 29687
   HEAP32[$80 >> 2] = $8; //@line 29688
   $81 = $ReallocAsyncCtx16 + 32 | 0; //@line 29689
   HEAP32[$81 >> 2] = $62; //@line 29690
   $82 = $ReallocAsyncCtx16 + 36 | 0; //@line 29691
   HEAP32[$82 >> 2] = $65; //@line 29692
   $83 = $ReallocAsyncCtx16 + 40 | 0; //@line 29693
   HEAP32[$83 >> 2] = $26; //@line 29694
   $84 = $ReallocAsyncCtx16 + 44 | 0; //@line 29695
   HEAP32[$84 >> 2] = $28; //@line 29696
   $85 = $ReallocAsyncCtx16 + 48 | 0; //@line 29697
   HEAP32[$85 >> 2] = $22; //@line 29698
   $86 = $ReallocAsyncCtx16 + 52 | 0; //@line 29699
   HEAP32[$86 >> 2] = $32; //@line 29700
   $87 = $ReallocAsyncCtx16 + 56 | 0; //@line 29701
   HEAP32[$87 >> 2] = $24; //@line 29702
   $88 = $ReallocAsyncCtx16 + 60 | 0; //@line 29703
   HEAP32[$88 >> 2] = $52; //@line 29704
   sp = STACKTOP; //@line 29705
   return;
  }
 case 3:
 case 5:
  {
   $90 = HEAP32[$24 >> 2] | 0; //@line 29710
   $97 = __ZN7LoRaPHY15get_max_payloadEhb($90, HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 10 >> 0] | 0, (HEAP8[$12 + 369 >> 0] | 0) != 0) | 0; //@line 29717
   $sext = ($30 << 16) + -851968 | 0; //@line 29719
   if (((($sext | 0) < 0 ? 0 : $sext >> 16) | 0) > ($97 & 255 | 0)) {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 1; //@line 29728
    $ReallocAsyncCtx12 = _emscripten_realloc_async_context(12) | 0; //@line 29729
    __ZN7LoRaMac21prepare_rx_done_abortEv($12); //@line 29730
    if (___async) {
     HEAP32[$ReallocAsyncCtx12 >> 2] = 378; //@line 29733
     $105 = $ReallocAsyncCtx12 + 4 | 0; //@line 29734
     HEAP32[$105 >> 2] = $6; //@line 29735
     $106 = $ReallocAsyncCtx12 + 8 | 0; //@line 29736
     HEAP32[$106 >> 2] = $8; //@line 29737
     sp = STACKTOP; //@line 29738
     return;
    }
    ___async_unwind = 0; //@line 29741
    HEAP32[$ReallocAsyncCtx12 >> 2] = 378; //@line 29742
    $105 = $ReallocAsyncCtx12 + 4 | 0; //@line 29743
    HEAP32[$105 >> 2] = $6; //@line 29744
    $106 = $ReallocAsyncCtx12 + 8 | 0; //@line 29745
    HEAP32[$106 >> 2] = $8; //@line 29746
    sp = STACKTOP; //@line 29747
    return;
   }
   $124 = HEAPU8[$2 + 2 >> 0] << 8 | HEAPU8[$2 + 1 >> 0] | HEAPU8[$2 + 3 >> 0] << 16 | HEAPU8[$2 + 4 >> 0] << 24; //@line 29767
   L32 : do {
    if (($124 | 0) == (HEAP32[$12 + 952 >> 2] | 0)) {
     $$1169 = 0; //@line 29774
     $$1171 = $28; //@line 29774
     $$1173 = $26; //@line 29774
     $$1175 = 0; //@line 29774
     $$sink207 = $12 + 960 | 0; //@line 29774
    } else {
     $$0174209 = HEAP32[$12 + 1208 >> 2] | 0; //@line 29777
     L35 : do {
      if ($$0174209 | 0) {
       $$0174210 = $$0174209; //@line 29781
       while (1) {
        if (($124 | 0) == (HEAP32[$$0174210 >> 2] | 0)) {
         break;
        }
        $$0174 = HEAP32[$$0174210 + 40 >> 2] | 0; //@line 29789
        if (!$$0174) {
         break L35;
        } else {
         $$0174210 = $$0174; //@line 29794
        }
       }
       $$1169 = 1; //@line 29800
       $$1171 = $$0174210 + 20 | 0; //@line 29800
       $$1173 = $$0174210 + 4 | 0; //@line 29800
       $$1175 = $$0174210; //@line 29800
       $$sink207 = $$0174210 + 36 | 0; //@line 29800
       break L32;
      }
     } while (0);
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 11; //@line 29806
     $ReallocAsyncCtx11 = _emscripten_realloc_async_context(12) | 0; //@line 29807
     __ZN7LoRaMac21prepare_rx_done_abortEv($12); //@line 29808
     if (___async) {
      HEAP32[$ReallocAsyncCtx11 >> 2] = 379; //@line 29811
      $139 = $ReallocAsyncCtx11 + 4 | 0; //@line 29812
      HEAP32[$139 >> 2] = $6; //@line 29813
      $140 = $ReallocAsyncCtx11 + 8 | 0; //@line 29814
      HEAP32[$140 >> 2] = $8; //@line 29815
      sp = STACKTOP; //@line 29816
      return;
     }
     ___async_unwind = 0; //@line 29819
     HEAP32[$ReallocAsyncCtx11 >> 2] = 379; //@line 29820
     $139 = $ReallocAsyncCtx11 + 4 | 0; //@line 29821
     HEAP32[$139 >> 2] = $6; //@line 29822
     $140 = $ReallocAsyncCtx11 + 8 | 0; //@line 29823
     HEAP32[$140 >> 2] = $8; //@line 29824
     sp = STACKTOP; //@line 29825
     return;
    }
   } while (0);
   $142 = HEAP32[$$sink207 >> 2] | 0; //@line 29829
   $144 = HEAP8[$2 + 5 >> 0] | 0; //@line 29831
   $153 = $144 & 15; //@line 29840
   $154 = $153 & 255; //@line 29841
   $155 = $154 + 8 | 0; //@line 29842
   $156 = $155 & 255; //@line 29843
   $157 = $30 + -4 | 0; //@line 29844
   $178 = HEAPU8[$2 + ($30 + -3) >> 0] << 8 | HEAPU8[$2 + $157 >> 0] | HEAPU8[$2 + ($30 + -2) >> 0] << 16 | HEAPU8[$2 + ($30 + -1) >> 0] << 24; //@line 29865
   $179 = (HEAPU8[$2 + 7 >> 0] << 8 | HEAPU8[$2 + 6 >> 0]) - $142 | 0; //@line 29866
   $180 = $179 & 65535; //@line 29867
   if ($180 >>> 0 < 32768) {
    $182 = $180 + $142 | 0; //@line 29870
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(144) | 0; //@line 29872
    __Z11compute_micPKhtS0_jhjPj($2, $157 & 65535, $$1173, $124, 1, $182, $4) | 0; //@line 29873
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 380; //@line 29876
     $184 = $ReallocAsyncCtx15 + 4 | 0; //@line 29877
     HEAP8[$184 >> 0] = $42; //@line 29878
     $185 = $ReallocAsyncCtx15 + 8 | 0; //@line 29879
     HEAP32[$185 >> 2] = $36; //@line 29880
     $186 = $ReallocAsyncCtx15 + 12 | 0; //@line 29881
     HEAP32[$186 >> 2] = $16; //@line 29882
     $187 = $ReallocAsyncCtx15 + 16 | 0; //@line 29883
     HEAP32[$187 >> 2] = $34; //@line 29884
     $188 = $ReallocAsyncCtx15 + 20 | 0; //@line 29885
     HEAP32[$188 >> 2] = $12; //@line 29886
     $189 = $ReallocAsyncCtx15 + 24 | 0; //@line 29887
     HEAP32[$189 >> 2] = $22; //@line 29888
     $190 = $ReallocAsyncCtx15 + 28 | 0; //@line 29889
     HEAP32[$190 >> 2] = $2; //@line 29890
     $191 = $ReallocAsyncCtx15 + 32 | 0; //@line 29891
     HEAP32[$191 >> 2] = $38; //@line 29892
     $192 = $ReallocAsyncCtx15 + 36 | 0; //@line 29893
     HEAP32[$192 >> 2] = $180; //@line 29894
     $193 = $ReallocAsyncCtx15 + 40 | 0; //@line 29895
     HEAP32[$193 >> 2] = $154; //@line 29896
     $194 = $ReallocAsyncCtx15 + 44 | 0; //@line 29897
     HEAP32[$194 >> 2] = $124; //@line 29898
     $195 = $ReallocAsyncCtx15 + 48 | 0; //@line 29899
     HEAP32[$195 >> 2] = $155; //@line 29900
     $196 = $ReallocAsyncCtx15 + 52 | 0; //@line 29901
     HEAP32[$196 >> 2] = $44; //@line 29902
     $197 = $ReallocAsyncCtx15 + 56 | 0; //@line 29903
     HEAP32[$197 >> 2] = $14; //@line 29904
     $198 = $ReallocAsyncCtx15 + 60 | 0; //@line 29905
     HEAP32[$198 >> 2] = $24; //@line 29906
     $199 = $ReallocAsyncCtx15 + 64 | 0; //@line 29907
     HEAP32[$199 >> 2] = $8; //@line 29908
     $200 = $ReallocAsyncCtx15 + 68 | 0; //@line 29909
     HEAP32[$200 >> 2] = $46; //@line 29910
     $201 = $ReallocAsyncCtx15 + 72 | 0; //@line 29911
     HEAP32[$201 >> 2] = $178; //@line 29912
     $202 = $ReallocAsyncCtx15 + 76 | 0; //@line 29913
     HEAP8[$202 >> 0] = $153; //@line 29914
     $203 = $ReallocAsyncCtx15 + 80 | 0; //@line 29915
     HEAP32[$203 >> 2] = $182; //@line 29916
     $204 = $ReallocAsyncCtx15 + 84 | 0; //@line 29917
     HEAP32[$204 >> 2] = $48; //@line 29918
     $205 = $ReallocAsyncCtx15 + 88 | 0; //@line 29919
     HEAP32[$205 >> 2] = $10; //@line 29920
     $206 = $ReallocAsyncCtx15 + 92 | 0; //@line 29921
     HEAP32[$206 >> 2] = $157; //@line 29922
     $207 = $ReallocAsyncCtx15 + 96 | 0; //@line 29923
     HEAP32[$207 >> 2] = $50; //@line 29924
     $208 = $ReallocAsyncCtx15 + 100 | 0; //@line 29925
     HEAP8[$208 >> 0] = $trunc; //@line 29926
     $209 = $ReallocAsyncCtx15 + 101 | 0; //@line 29927
     HEAP8[$209 >> 0] = $156; //@line 29928
     $210 = $ReallocAsyncCtx15 + 104 | 0; //@line 29929
     HEAP32[$210 >> 2] = $$1173; //@line 29930
     $211 = $ReallocAsyncCtx15 + 108 | 0; //@line 29931
     HEAP32[$211 >> 2] = $6; //@line 29932
     $212 = $ReallocAsyncCtx15 + 112 | 0; //@line 29933
     HEAP8[$212 >> 0] = $144; //@line 29934
     $213 = $ReallocAsyncCtx15 + 116 | 0; //@line 29935
     HEAP32[$213 >> 2] = $$1175; //@line 29936
     $214 = $ReallocAsyncCtx15 + 120 | 0; //@line 29937
     HEAP32[$214 >> 2] = $$1171; //@line 29938
     $215 = $ReallocAsyncCtx15 + 124 | 0; //@line 29939
     HEAP32[$215 >> 2] = $40; //@line 29940
     $216 = $ReallocAsyncCtx15 + 128 | 0; //@line 29941
     HEAP32[$216 >> 2] = $20; //@line 29942
     $217 = $ReallocAsyncCtx15 + 132 | 0; //@line 29943
     HEAP32[$217 >> 2] = $4; //@line 29944
     $218 = $ReallocAsyncCtx15 + 136 | 0; //@line 29945
     HEAP8[$218 >> 0] = $$1169; //@line 29946
     $219 = $ReallocAsyncCtx15 + 140 | 0; //@line 29947
     HEAP32[$219 >> 2] = $18; //@line 29948
     sp = STACKTOP; //@line 29949
     return;
    }
    ___async_unwind = 0; //@line 29952
    HEAP32[$ReallocAsyncCtx15 >> 2] = 380; //@line 29953
    $184 = $ReallocAsyncCtx15 + 4 | 0; //@line 29954
    HEAP8[$184 >> 0] = $42; //@line 29955
    $185 = $ReallocAsyncCtx15 + 8 | 0; //@line 29956
    HEAP32[$185 >> 2] = $36; //@line 29957
    $186 = $ReallocAsyncCtx15 + 12 | 0; //@line 29958
    HEAP32[$186 >> 2] = $16; //@line 29959
    $187 = $ReallocAsyncCtx15 + 16 | 0; //@line 29960
    HEAP32[$187 >> 2] = $34; //@line 29961
    $188 = $ReallocAsyncCtx15 + 20 | 0; //@line 29962
    HEAP32[$188 >> 2] = $12; //@line 29963
    $189 = $ReallocAsyncCtx15 + 24 | 0; //@line 29964
    HEAP32[$189 >> 2] = $22; //@line 29965
    $190 = $ReallocAsyncCtx15 + 28 | 0; //@line 29966
    HEAP32[$190 >> 2] = $2; //@line 29967
    $191 = $ReallocAsyncCtx15 + 32 | 0; //@line 29968
    HEAP32[$191 >> 2] = $38; //@line 29969
    $192 = $ReallocAsyncCtx15 + 36 | 0; //@line 29970
    HEAP32[$192 >> 2] = $180; //@line 29971
    $193 = $ReallocAsyncCtx15 + 40 | 0; //@line 29972
    HEAP32[$193 >> 2] = $154; //@line 29973
    $194 = $ReallocAsyncCtx15 + 44 | 0; //@line 29974
    HEAP32[$194 >> 2] = $124; //@line 29975
    $195 = $ReallocAsyncCtx15 + 48 | 0; //@line 29976
    HEAP32[$195 >> 2] = $155; //@line 29977
    $196 = $ReallocAsyncCtx15 + 52 | 0; //@line 29978
    HEAP32[$196 >> 2] = $44; //@line 29979
    $197 = $ReallocAsyncCtx15 + 56 | 0; //@line 29980
    HEAP32[$197 >> 2] = $14; //@line 29981
    $198 = $ReallocAsyncCtx15 + 60 | 0; //@line 29982
    HEAP32[$198 >> 2] = $24; //@line 29983
    $199 = $ReallocAsyncCtx15 + 64 | 0; //@line 29984
    HEAP32[$199 >> 2] = $8; //@line 29985
    $200 = $ReallocAsyncCtx15 + 68 | 0; //@line 29986
    HEAP32[$200 >> 2] = $46; //@line 29987
    $201 = $ReallocAsyncCtx15 + 72 | 0; //@line 29988
    HEAP32[$201 >> 2] = $178; //@line 29989
    $202 = $ReallocAsyncCtx15 + 76 | 0; //@line 29990
    HEAP8[$202 >> 0] = $153; //@line 29991
    $203 = $ReallocAsyncCtx15 + 80 | 0; //@line 29992
    HEAP32[$203 >> 2] = $182; //@line 29993
    $204 = $ReallocAsyncCtx15 + 84 | 0; //@line 29994
    HEAP32[$204 >> 2] = $48; //@line 29995
    $205 = $ReallocAsyncCtx15 + 88 | 0; //@line 29996
    HEAP32[$205 >> 2] = $10; //@line 29997
    $206 = $ReallocAsyncCtx15 + 92 | 0; //@line 29998
    HEAP32[$206 >> 2] = $157; //@line 29999
    $207 = $ReallocAsyncCtx15 + 96 | 0; //@line 30000
    HEAP32[$207 >> 2] = $50; //@line 30001
    $208 = $ReallocAsyncCtx15 + 100 | 0; //@line 30002
    HEAP8[$208 >> 0] = $trunc; //@line 30003
    $209 = $ReallocAsyncCtx15 + 101 | 0; //@line 30004
    HEAP8[$209 >> 0] = $156; //@line 30005
    $210 = $ReallocAsyncCtx15 + 104 | 0; //@line 30006
    HEAP32[$210 >> 2] = $$1173; //@line 30007
    $211 = $ReallocAsyncCtx15 + 108 | 0; //@line 30008
    HEAP32[$211 >> 2] = $6; //@line 30009
    $212 = $ReallocAsyncCtx15 + 112 | 0; //@line 30010
    HEAP8[$212 >> 0] = $144; //@line 30011
    $213 = $ReallocAsyncCtx15 + 116 | 0; //@line 30012
    HEAP32[$213 >> 2] = $$1175; //@line 30013
    $214 = $ReallocAsyncCtx15 + 120 | 0; //@line 30014
    HEAP32[$214 >> 2] = $$1171; //@line 30015
    $215 = $ReallocAsyncCtx15 + 124 | 0; //@line 30016
    HEAP32[$215 >> 2] = $40; //@line 30017
    $216 = $ReallocAsyncCtx15 + 128 | 0; //@line 30018
    HEAP32[$216 >> 2] = $20; //@line 30019
    $217 = $ReallocAsyncCtx15 + 132 | 0; //@line 30020
    HEAP32[$217 >> 2] = $4; //@line 30021
    $218 = $ReallocAsyncCtx15 + 136 | 0; //@line 30022
    HEAP8[$218 >> 0] = $$1169; //@line 30023
    $219 = $ReallocAsyncCtx15 + 140 | 0; //@line 30024
    HEAP32[$219 >> 2] = $18; //@line 30025
    sp = STACKTOP; //@line 30026
    return;
   } else {
    $222 = $142 + 65536 + ($179 << 16 >> 16) | 0; //@line 30032
    $ReallocAsyncCtx14 = _emscripten_realloc_async_context(148) | 0; //@line 30034
    __Z11compute_micPKhtS0_jhjPj($2, $157 & 65535, $$1173, $124, 1, $222, $4) | 0; //@line 30035
    if (___async) {
     HEAP32[$ReallocAsyncCtx14 >> 2] = 381; //@line 30038
     $224 = $ReallocAsyncCtx14 + 4 | 0; //@line 30039
     HEAP8[$224 >> 0] = $42; //@line 30040
     $225 = $ReallocAsyncCtx14 + 8 | 0; //@line 30041
     HEAP32[$225 >> 2] = $36; //@line 30042
     $226 = $ReallocAsyncCtx14 + 12 | 0; //@line 30043
     HEAP32[$226 >> 2] = $16; //@line 30044
     $227 = $ReallocAsyncCtx14 + 16 | 0; //@line 30045
     HEAP32[$227 >> 2] = $34; //@line 30046
     $228 = $ReallocAsyncCtx14 + 20 | 0; //@line 30047
     HEAP32[$228 >> 2] = $12; //@line 30048
     $229 = $ReallocAsyncCtx14 + 24 | 0; //@line 30049
     HEAP32[$229 >> 2] = $22; //@line 30050
     $230 = $ReallocAsyncCtx14 + 28 | 0; //@line 30051
     HEAP32[$230 >> 2] = $2; //@line 30052
     $231 = $ReallocAsyncCtx14 + 32 | 0; //@line 30053
     HEAP32[$231 >> 2] = $38; //@line 30054
     $232 = $ReallocAsyncCtx14 + 36 | 0; //@line 30055
     HEAP32[$232 >> 2] = $180; //@line 30056
     $233 = $ReallocAsyncCtx14 + 40 | 0; //@line 30057
     HEAP32[$233 >> 2] = $154; //@line 30058
     $234 = $ReallocAsyncCtx14 + 44 | 0; //@line 30059
     HEAP32[$234 >> 2] = $124; //@line 30060
     $235 = $ReallocAsyncCtx14 + 48 | 0; //@line 30061
     HEAP32[$235 >> 2] = $155; //@line 30062
     $236 = $ReallocAsyncCtx14 + 52 | 0; //@line 30063
     HEAP32[$236 >> 2] = $44; //@line 30064
     $237 = $ReallocAsyncCtx14 + 56 | 0; //@line 30065
     HEAP32[$237 >> 2] = $14; //@line 30066
     $238 = $ReallocAsyncCtx14 + 60 | 0; //@line 30067
     HEAP32[$238 >> 2] = $24; //@line 30068
     $239 = $ReallocAsyncCtx14 + 64 | 0; //@line 30069
     HEAP32[$239 >> 2] = $8; //@line 30070
     $240 = $ReallocAsyncCtx14 + 68 | 0; //@line 30071
     HEAP32[$240 >> 2] = $178; //@line 30072
     $241 = $ReallocAsyncCtx14 + 72 | 0; //@line 30073
     HEAP32[$241 >> 2] = $46; //@line 30074
     $242 = $ReallocAsyncCtx14 + 76 | 0; //@line 30075
     HEAP8[$242 >> 0] = $153; //@line 30076
     $243 = $ReallocAsyncCtx14 + 80 | 0; //@line 30077
     HEAP32[$243 >> 2] = $222; //@line 30078
     $244 = $ReallocAsyncCtx14 + 84 | 0; //@line 30079
     HEAP32[$244 >> 2] = $48; //@line 30080
     $245 = $ReallocAsyncCtx14 + 88 | 0; //@line 30081
     HEAP32[$245 >> 2] = $10; //@line 30082
     $246 = $ReallocAsyncCtx14 + 92 | 0; //@line 30083
     HEAP32[$246 >> 2] = $157; //@line 30084
     $247 = $ReallocAsyncCtx14 + 96 | 0; //@line 30085
     HEAP32[$247 >> 2] = $50; //@line 30086
     $248 = $ReallocAsyncCtx14 + 100 | 0; //@line 30087
     HEAP8[$248 >> 0] = $trunc; //@line 30088
     $249 = $ReallocAsyncCtx14 + 101 | 0; //@line 30089
     HEAP8[$249 >> 0] = $156; //@line 30090
     $250 = $ReallocAsyncCtx14 + 104 | 0; //@line 30091
     HEAP32[$250 >> 2] = $$1173; //@line 30092
     $251 = $ReallocAsyncCtx14 + 108 | 0; //@line 30093
     HEAP32[$251 >> 2] = $6; //@line 30094
     $252 = $ReallocAsyncCtx14 + 112 | 0; //@line 30095
     HEAP8[$252 >> 0] = $144; //@line 30096
     $253 = $ReallocAsyncCtx14 + 116 | 0; //@line 30097
     HEAP32[$253 >> 2] = $$1175; //@line 30098
     $254 = $ReallocAsyncCtx14 + 120 | 0; //@line 30099
     HEAP32[$254 >> 2] = $$1171; //@line 30100
     $255 = $ReallocAsyncCtx14 + 124 | 0; //@line 30101
     HEAP32[$255 >> 2] = $40; //@line 30102
     $256 = $ReallocAsyncCtx14 + 128 | 0; //@line 30103
     HEAP32[$256 >> 2] = $20; //@line 30104
     $257 = $ReallocAsyncCtx14 + 132 | 0; //@line 30105
     HEAP32[$257 >> 2] = $142; //@line 30106
     $258 = $ReallocAsyncCtx14 + 136 | 0; //@line 30107
     HEAP32[$258 >> 2] = $4; //@line 30108
     $259 = $ReallocAsyncCtx14 + 140 | 0; //@line 30109
     HEAP8[$259 >> 0] = $$1169; //@line 30110
     $260 = $ReallocAsyncCtx14 + 144 | 0; //@line 30111
     HEAP32[$260 >> 2] = $18; //@line 30112
     sp = STACKTOP; //@line 30113
     return;
    }
    ___async_unwind = 0; //@line 30116
    HEAP32[$ReallocAsyncCtx14 >> 2] = 381; //@line 30117
    $224 = $ReallocAsyncCtx14 + 4 | 0; //@line 30118
    HEAP8[$224 >> 0] = $42; //@line 30119
    $225 = $ReallocAsyncCtx14 + 8 | 0; //@line 30120
    HEAP32[$225 >> 2] = $36; //@line 30121
    $226 = $ReallocAsyncCtx14 + 12 | 0; //@line 30122
    HEAP32[$226 >> 2] = $16; //@line 30123
    $227 = $ReallocAsyncCtx14 + 16 | 0; //@line 30124
    HEAP32[$227 >> 2] = $34; //@line 30125
    $228 = $ReallocAsyncCtx14 + 20 | 0; //@line 30126
    HEAP32[$228 >> 2] = $12; //@line 30127
    $229 = $ReallocAsyncCtx14 + 24 | 0; //@line 30128
    HEAP32[$229 >> 2] = $22; //@line 30129
    $230 = $ReallocAsyncCtx14 + 28 | 0; //@line 30130
    HEAP32[$230 >> 2] = $2; //@line 30131
    $231 = $ReallocAsyncCtx14 + 32 | 0; //@line 30132
    HEAP32[$231 >> 2] = $38; //@line 30133
    $232 = $ReallocAsyncCtx14 + 36 | 0; //@line 30134
    HEAP32[$232 >> 2] = $180; //@line 30135
    $233 = $ReallocAsyncCtx14 + 40 | 0; //@line 30136
    HEAP32[$233 >> 2] = $154; //@line 30137
    $234 = $ReallocAsyncCtx14 + 44 | 0; //@line 30138
    HEAP32[$234 >> 2] = $124; //@line 30139
    $235 = $ReallocAsyncCtx14 + 48 | 0; //@line 30140
    HEAP32[$235 >> 2] = $155; //@line 30141
    $236 = $ReallocAsyncCtx14 + 52 | 0; //@line 30142
    HEAP32[$236 >> 2] = $44; //@line 30143
    $237 = $ReallocAsyncCtx14 + 56 | 0; //@line 30144
    HEAP32[$237 >> 2] = $14; //@line 30145
    $238 = $ReallocAsyncCtx14 + 60 | 0; //@line 30146
    HEAP32[$238 >> 2] = $24; //@line 30147
    $239 = $ReallocAsyncCtx14 + 64 | 0; //@line 30148
    HEAP32[$239 >> 2] = $8; //@line 30149
    $240 = $ReallocAsyncCtx14 + 68 | 0; //@line 30150
    HEAP32[$240 >> 2] = $178; //@line 30151
    $241 = $ReallocAsyncCtx14 + 72 | 0; //@line 30152
    HEAP32[$241 >> 2] = $46; //@line 30153
    $242 = $ReallocAsyncCtx14 + 76 | 0; //@line 30154
    HEAP8[$242 >> 0] = $153; //@line 30155
    $243 = $ReallocAsyncCtx14 + 80 | 0; //@line 30156
    HEAP32[$243 >> 2] = $222; //@line 30157
    $244 = $ReallocAsyncCtx14 + 84 | 0; //@line 30158
    HEAP32[$244 >> 2] = $48; //@line 30159
    $245 = $ReallocAsyncCtx14 + 88 | 0; //@line 30160
    HEAP32[$245 >> 2] = $10; //@line 30161
    $246 = $ReallocAsyncCtx14 + 92 | 0; //@line 30162
    HEAP32[$246 >> 2] = $157; //@line 30163
    $247 = $ReallocAsyncCtx14 + 96 | 0; //@line 30164
    HEAP32[$247 >> 2] = $50; //@line 30165
    $248 = $ReallocAsyncCtx14 + 100 | 0; //@line 30166
    HEAP8[$248 >> 0] = $trunc; //@line 30167
    $249 = $ReallocAsyncCtx14 + 101 | 0; //@line 30168
    HEAP8[$249 >> 0] = $156; //@line 30169
    $250 = $ReallocAsyncCtx14 + 104 | 0; //@line 30170
    HEAP32[$250 >> 2] = $$1173; //@line 30171
    $251 = $ReallocAsyncCtx14 + 108 | 0; //@line 30172
    HEAP32[$251 >> 2] = $6; //@line 30173
    $252 = $ReallocAsyncCtx14 + 112 | 0; //@line 30174
    HEAP8[$252 >> 0] = $144; //@line 30175
    $253 = $ReallocAsyncCtx14 + 116 | 0; //@line 30176
    HEAP32[$253 >> 2] = $$1175; //@line 30177
    $254 = $ReallocAsyncCtx14 + 120 | 0; //@line 30178
    HEAP32[$254 >> 2] = $$1171; //@line 30179
    $255 = $ReallocAsyncCtx14 + 124 | 0; //@line 30180
    HEAP32[$255 >> 2] = $40; //@line 30181
    $256 = $ReallocAsyncCtx14 + 128 | 0; //@line 30182
    HEAP32[$256 >> 2] = $20; //@line 30183
    $257 = $ReallocAsyncCtx14 + 132 | 0; //@line 30184
    HEAP32[$257 >> 2] = $142; //@line 30185
    $258 = $ReallocAsyncCtx14 + 136 | 0; //@line 30186
    HEAP32[$258 >> 2] = $4; //@line 30187
    $259 = $ReallocAsyncCtx14 + 140 | 0; //@line 30188
    HEAP8[$259 >> 0] = $$1169; //@line 30189
    $260 = $ReallocAsyncCtx14 + 144 | 0; //@line 30190
    HEAP32[$260 >> 2] = $18; //@line 30191
    sp = STACKTOP; //@line 30192
    return;
   }
   break;
  }
 case 7:
  {
   $261 = $12 + 638 | 0; //@line 30198
   _memcpy($261 | 0, $2 + 1 | 0, $30 | 0) | 0; //@line 30200
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) >> 2] = 3; //@line 30202
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 0; //@line 30205
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 12 >> 2] = $261; //@line 30208
   HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 16 >> 1] = $30 + 65535; //@line 30213
   $272 = $12 + 944 | 0; //@line 30214
   HEAP8[$272 >> 0] = HEAP8[$272 >> 0] | 2; //@line 30217
   $281 = $12 + 944 | 0; //@line 30218
   HEAP8[$281 >> 0] = HEAP8[$281 >> 0] | 32; //@line 30221
   $284 = HEAP32[$22 >> 2] | 0; //@line 30222
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 30224
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($284, $12 + 996 | 0, 1); //@line 30225
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 395; //@line 30228
    $286 = $ReallocAsyncCtx17 + 4 | 0; //@line 30229
    HEAP32[$286 >> 2] = $6; //@line 30230
    $287 = $ReallocAsyncCtx17 + 8 | 0; //@line 30231
    HEAP32[$287 >> 2] = $8; //@line 30232
    sp = STACKTOP; //@line 30233
    return;
   }
   ___async_unwind = 0; //@line 30236
   HEAP32[$ReallocAsyncCtx17 >> 2] = 395; //@line 30237
   $286 = $ReallocAsyncCtx17 + 4 | 0; //@line 30238
   HEAP32[$286 >> 2] = $6; //@line 30239
   $287 = $ReallocAsyncCtx17 + 8 | 0; //@line 30240
   HEAP32[$287 >> 2] = $8; //@line 30241
   sp = STACKTOP; //@line 30242
   return;
  }
 default:
  {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 1; //@line 30249
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 30250
   __ZN7LoRaMac21prepare_rx_done_abortEv($12); //@line 30251
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 394; //@line 30254
    $277 = $ReallocAsyncCtx6 + 4 | 0; //@line 30255
    HEAP32[$277 >> 2] = $12; //@line 30256
    $278 = $ReallocAsyncCtx6 + 8 | 0; //@line 30257
    HEAP32[$278 >> 2] = $22; //@line 30258
    $279 = $ReallocAsyncCtx6 + 12 | 0; //@line 30259
    HEAP32[$279 >> 2] = $6; //@line 30260
    $280 = $ReallocAsyncCtx6 + 16 | 0; //@line 30261
    HEAP32[$280 >> 2] = $8; //@line 30262
    sp = STACKTOP; //@line 30263
    return;
   }
   ___async_unwind = 0; //@line 30266
   HEAP32[$ReallocAsyncCtx6 >> 2] = 394; //@line 30267
   $277 = $ReallocAsyncCtx6 + 4 | 0; //@line 30268
   HEAP32[$277 >> 2] = $12; //@line 30269
   $278 = $ReallocAsyncCtx6 + 8 | 0; //@line 30270
   HEAP32[$278 >> 2] = $22; //@line 30271
   $279 = $ReallocAsyncCtx6 + 12 | 0; //@line 30272
   HEAP32[$279 >> 2] = $6; //@line 30273
   $280 = $ReallocAsyncCtx6 + 16 | 0; //@line 30274
   HEAP32[$280 >> 2] = $8; //@line 30275
   sp = STACKTOP; //@line 30276
   return;
  }
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_141($0) {
 $0 = $0 | 0;
 var $$$1177 = 0, $$1$off0 = 0, $$1$off0$expand_i1_val = 0, $$1$off0$expand_i1_val29 = 0, $$1$off0$expand_i1_val31 = 0, $$3$off0204 = 0, $$sink = 0, $10 = 0, $102 = 0, $105 = 0, $106 = 0, $113 = 0, $114 = 0, $116 = 0, $118 = 0, $119 = 0, $12 = 0, $123 = 0, $124 = 0, $131 = 0, $132 = 0, $139 = 0, $14 = 0, $141 = 0, $142 = 0, $143 = 0, $147 = 0, $151 = 0, $156 = 0, $157 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $202 = 0, $203 = 0, $215 = 0, $216 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $237 = 0, $24 = 0, $240 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $251 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $26 = 0, $261 = 0, $262 = 0, $263 = 0, $266 = 0, $268 = 0, $269 = 0, $28 = 0, $30 = 0, $32 = 0, $36 = 0, $38 = 0, $4 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $66 = 0, $72 = 0, $74 = 0, $76 = 0, $8 = 0, $80 = 0, $82 = 0, $85 = 0, $86 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx19 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 26953
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 26955
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26957
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26959
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26961
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26963
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26965
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26967
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26969
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26971
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26973
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 26975
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 26977
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 26979
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 26981
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 26983
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 26985
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 26989
 $38 = HEAP8[$0 + 76 >> 0] | 0; //@line 26991
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 26995
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 26997
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 26999
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 27001
 $50 = HEAP8[$0 + 100 >> 0] | 0; //@line 27003
 $52 = HEAP8[$0 + 101 >> 0] | 0; //@line 27005
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 27007
 $56 = HEAP32[$0 + 108 >> 2] | 0; //@line 27009
 $58 = HEAP8[$0 + 112 >> 0] | 0; //@line 27011
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 27013
 $62 = HEAP32[$0 + 120 >> 2] | 0; //@line 27015
 $64 = HEAP32[$0 + 124 >> 2] | 0; //@line 27017
 $66 = HEAP32[$0 + 128 >> 2] | 0; //@line 27019
 $72 = HEAP8[$0 + 140 >> 0] | 0; //@line 27025
 $74 = HEAP32[$0 + 144 >> 2] | 0; //@line 27027
 $76 = (HEAP32[$0 + 68 >> 2] | 0) == (HEAP32[HEAP32[$0 + 136 >> 2] >> 2] | 0); //@line 27029
 $$$1177 = $76 ? HEAP32[$0 + 80 >> 2] | 0 : HEAP32[$0 + 132 >> 2] | 0; //@line 27030
 $80 = $18 >>> 0 < ((__ZN7LoRaPHY29get_maximum_frame_counter_gapEv(HEAP32[$30 >> 2] | 0) | 0) & 65535) >>> 0; //@line 27034
 $82 = (__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 4 | 0; //@line 27036
 if (!$80) {
  HEAP32[$82 >> 2] = 10; //@line 27038
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 32 >> 2] = $$$1177; //@line 27041
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 27042
  __ZN7LoRaMac21prepare_rx_done_abortEv($10); //@line 27043
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 382; //@line 27046
   $85 = $ReallocAsyncCtx10 + 4 | 0; //@line 27047
   HEAP32[$85 >> 2] = $56; //@line 27048
   $86 = $ReallocAsyncCtx10 + 8 | 0; //@line 27049
   HEAP32[$86 >> 2] = $32; //@line 27050
   sp = STACKTOP; //@line 27051
   return;
  }
  ___async_unwind = 0; //@line 27054
  HEAP32[$ReallocAsyncCtx10 >> 2] = 382; //@line 27055
  $85 = $ReallocAsyncCtx10 + 4 | 0; //@line 27056
  HEAP32[$85 >> 2] = $56; //@line 27057
  $86 = $ReallocAsyncCtx10 + 8 | 0; //@line 27058
  HEAP32[$86 >> 2] = $32; //@line 27059
  sp = STACKTOP; //@line 27060
  return;
 }
 if (!$76) {
  HEAP32[$82 >> 2] = 12; //@line 27064
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 27065
  __ZN7LoRaMac21prepare_rx_done_abortEv($10); //@line 27066
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 393; //@line 27069
   $261 = $ReallocAsyncCtx7 + 4 | 0; //@line 27070
   HEAP32[$261 >> 2] = $56; //@line 27071
   $262 = $ReallocAsyncCtx7 + 8 | 0; //@line 27072
   HEAP32[$262 >> 2] = $32; //@line 27073
   sp = STACKTOP; //@line 27074
   return;
  }
  ___async_unwind = 0; //@line 27077
  HEAP32[$ReallocAsyncCtx7 >> 2] = 393; //@line 27078
  $261 = $ReallocAsyncCtx7 + 4 | 0; //@line 27079
  HEAP32[$261 >> 2] = $56; //@line 27080
  $262 = $ReallocAsyncCtx7 + 8 | 0; //@line 27081
  HEAP32[$262 >> 2] = $32; //@line 27082
  sp = STACKTOP; //@line 27083
  return;
 }
 HEAP32[$82 >> 2] = 0; //@line 27086
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 8 >> 0] = $72; //@line 27089
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 11 >> 0] = ($58 & 255) >>> 4 & 1; //@line 27094
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 12 >> 2] = 0; //@line 27097
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 16 >> 1] = 0; //@line 27100
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 32 >> 2] = $$$1177; //@line 27103
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($44) | 0) + 4 >> 2] = 0; //@line 27106
 HEAP32[$10 + 964 >> 2] = 0; //@line 27108
 $102 = $10 + 4 | 0; //@line 27109
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($102); //@line 27110
 do {
  if ($72 << 24 >> 24 == 1) {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) >> 2] = 2; //@line 27115
   $105 = $60 + 36 | 0; //@line 27116
   $106 = HEAP32[$105 >> 2] | 0; //@line 27117
   if (($106 | 0) != ($$$1177 | 0) | ($106 | 0) == 0) {
    $$1$off0 = 0; //@line 27122
    $$sink = $105; //@line 27122
   } else {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 4 >> 2] = 8; //@line 27126
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 32 >> 2] = $$$1177; //@line 27129
    $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 27130
    __ZN7LoRaMac21prepare_rx_done_abortEv($10); //@line 27131
    if (___async) {
     HEAP32[$ReallocAsyncCtx9 >> 2] = 383; //@line 27134
     $113 = $ReallocAsyncCtx9 + 4 | 0; //@line 27135
     HEAP32[$113 >> 2] = $56; //@line 27136
     $114 = $ReallocAsyncCtx9 + 8 | 0; //@line 27137
     HEAP32[$114 >> 2] = $32; //@line 27138
     sp = STACKTOP; //@line 27139
     return;
    }
    ___async_unwind = 0; //@line 27142
    HEAP32[$ReallocAsyncCtx9 >> 2] = 383; //@line 27143
    $113 = $ReallocAsyncCtx9 + 4 | 0; //@line 27144
    HEAP32[$113 >> 2] = $56; //@line 27145
    $114 = $ReallocAsyncCtx9 + 8 | 0; //@line 27146
    HEAP32[$114 >> 2] = $32; //@line 27147
    sp = STACKTOP; //@line 27148
    return;
   }
  } else {
   $116 = $10 + 374 | 0; //@line 27153
   if ($50 << 24 >> 24 == 5) {
    HEAP8[$116 >> 0] = 1; //@line 27155
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) >> 2] = 1; //@line 27157
    $118 = $10 + 960 | 0; //@line 27158
    $119 = HEAP32[$118 >> 2] | 0; //@line 27159
    $$1$off0 = ($119 | 0) != 0 & ($119 | 0) == ($$$1177 | 0); //@line 27163
    $$sink = $118; //@line 27163
    break;
   }
   HEAP8[$116 >> 0] = 0; //@line 27166
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) >> 2] = 0; //@line 27168
   $123 = $10 + 960 | 0; //@line 27169
   $124 = HEAP32[$123 >> 2] | 0; //@line 27170
   if (($124 | 0) != ($$$1177 | 0) | ($124 | 0) == 0) {
    $$1$off0 = 0; //@line 27175
    $$sink = $123; //@line 27175
   } else {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 4 >> 2] = 8; //@line 27179
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 32 >> 2] = $$$1177; //@line 27182
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 27183
    __ZN7LoRaMac21prepare_rx_done_abortEv($10); //@line 27184
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 384; //@line 27187
     $131 = $ReallocAsyncCtx8 + 4 | 0; //@line 27188
     HEAP32[$131 >> 2] = $56; //@line 27189
     $132 = $ReallocAsyncCtx8 + 8 | 0; //@line 27190
     HEAP32[$132 >> 2] = $32; //@line 27191
     sp = STACKTOP; //@line 27192
     return;
    }
    ___async_unwind = 0; //@line 27195
    HEAP32[$ReallocAsyncCtx8 >> 2] = 384; //@line 27196
    $131 = $ReallocAsyncCtx8 + 4 | 0; //@line 27197
    HEAP32[$131 >> 2] = $56; //@line 27198
    $132 = $ReallocAsyncCtx8 + 8 | 0; //@line 27199
    HEAP32[$132 >> 2] = $32; //@line 27200
    sp = STACKTOP; //@line 27201
    return;
   }
  }
 } while (0);
 HEAP32[$$sink >> 2] = $$$1177; //@line 27206
 if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($44) | 0) >> 2] | 0) == 1) {
  if ($58 & 32) {
   __ZN14LoRaMacCommand20clear_command_bufferEv($102); //@line 27214
  }
 } else {
  __ZN14LoRaMacCommand20clear_command_bufferEv($102); //@line 27217
 }
 do {
  if (($46 | 0) > ($24 | 0)) {
   $139 = $20 + 9 | 0; //@line 27222
   $141 = HEAP8[$14 + $24 >> 0] | 0; //@line 27224
   $142 = $46 - $139 | 0; //@line 27225
   $143 = $142 & 255; //@line 27226
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 9 >> 0] = $141; //@line 27229
   $147 = $38 << 24 >> 24 == 0; //@line 27231
   if (!($141 << 24 >> 24)) {
    if (!$147) {
     $$3$off0204 = 6; //@line 27234
     break;
    }
    $151 = $10 + 638 | 0; //@line 27240
    if (__Z15decrypt_payloadPKhtS0_jhjPh($14 + $139 | 0, $142 & 255, $54, $22, 1, $$$1177, $151) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 4 >> 2] = 13; //@line 27246
    }
    $156 = $10 + 264 | 0; //@line 27248
    $157 = __ZN11LoRaMacMlme16get_confirmationEv($156) | 0; //@line 27249
    $159 = HEAP32[$30 >> 2] | 0; //@line 27251
    $ReallocAsyncCtx21 = _emscripten_realloc_async_context(56) | 0; //@line 27252
    $160 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($102, $151, 0, $143, $2, $157, $10 + 1096 | 0, $159) | 0; //@line 27253
    if (___async) {
     HEAP32[$ReallocAsyncCtx21 >> 2] = 385; //@line 27256
     $161 = $ReallocAsyncCtx21 + 4 | 0; //@line 27257
     HEAP32[$161 >> 2] = $28; //@line 27258
     $162 = $ReallocAsyncCtx21 + 8 | 0; //@line 27259
     HEAP32[$162 >> 2] = $6; //@line 27260
     $163 = $ReallocAsyncCtx21 + 12 | 0; //@line 27261
     HEAP32[$163 >> 2] = $74; //@line 27262
     $164 = $ReallocAsyncCtx21 + 16 | 0; //@line 27263
     HEAP32[$164 >> 2] = $66; //@line 27264
     $165 = $ReallocAsyncCtx21 + 20 | 0; //@line 27265
     HEAP32[$165 >> 2] = $44; //@line 27266
     $166 = $ReallocAsyncCtx21 + 24 | 0; //@line 27267
     $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 27268
     HEAP8[$166 >> 0] = $$1$off0$expand_i1_val; //@line 27269
     $167 = $ReallocAsyncCtx21 + 28 | 0; //@line 27270
     HEAP32[$167 >> 2] = $102; //@line 27271
     $168 = $ReallocAsyncCtx21 + 32 | 0; //@line 27272
     HEAP32[$168 >> 2] = $56; //@line 27273
     $169 = $ReallocAsyncCtx21 + 36 | 0; //@line 27274
     HEAP32[$169 >> 2] = $32; //@line 27275
     $170 = $ReallocAsyncCtx21 + 40 | 0; //@line 27276
     HEAP32[$170 >> 2] = $10; //@line 27277
     $171 = $ReallocAsyncCtx21 + 44 | 0; //@line 27278
     HEAP32[$171 >> 2] = $12; //@line 27279
     $172 = $ReallocAsyncCtx21 + 48 | 0; //@line 27280
     HEAP32[$172 >> 2] = $156; //@line 27281
     $173 = $ReallocAsyncCtx21 + 52 | 0; //@line 27282
     HEAP8[$173 >> 0] = $58; //@line 27283
     sp = STACKTOP; //@line 27284
     return;
    }
    HEAP32[___async_retval >> 2] = $160; //@line 27288
    ___async_unwind = 0; //@line 27289
    HEAP32[$ReallocAsyncCtx21 >> 2] = 385; //@line 27290
    $161 = $ReallocAsyncCtx21 + 4 | 0; //@line 27291
    HEAP32[$161 >> 2] = $28; //@line 27292
    $162 = $ReallocAsyncCtx21 + 8 | 0; //@line 27293
    HEAP32[$162 >> 2] = $6; //@line 27294
    $163 = $ReallocAsyncCtx21 + 12 | 0; //@line 27295
    HEAP32[$163 >> 2] = $74; //@line 27296
    $164 = $ReallocAsyncCtx21 + 16 | 0; //@line 27297
    HEAP32[$164 >> 2] = $66; //@line 27298
    $165 = $ReallocAsyncCtx21 + 20 | 0; //@line 27299
    HEAP32[$165 >> 2] = $44; //@line 27300
    $166 = $ReallocAsyncCtx21 + 24 | 0; //@line 27301
    $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 27302
    HEAP8[$166 >> 0] = $$1$off0$expand_i1_val; //@line 27303
    $167 = $ReallocAsyncCtx21 + 28 | 0; //@line 27304
    HEAP32[$167 >> 2] = $102; //@line 27305
    $168 = $ReallocAsyncCtx21 + 32 | 0; //@line 27306
    HEAP32[$168 >> 2] = $56; //@line 27307
    $169 = $ReallocAsyncCtx21 + 36 | 0; //@line 27308
    HEAP32[$169 >> 2] = $32; //@line 27309
    $170 = $ReallocAsyncCtx21 + 40 | 0; //@line 27310
    HEAP32[$170 >> 2] = $10; //@line 27311
    $171 = $ReallocAsyncCtx21 + 44 | 0; //@line 27312
    HEAP32[$171 >> 2] = $12; //@line 27313
    $172 = $ReallocAsyncCtx21 + 48 | 0; //@line 27314
    HEAP32[$172 >> 2] = $156; //@line 27315
    $173 = $ReallocAsyncCtx21 + 52 | 0; //@line 27316
    HEAP8[$173 >> 0] = $58; //@line 27317
    sp = STACKTOP; //@line 27318
    return;
   }
   if ($147) {
    $202 = $142 & 255; //@line 27324
    $203 = $10 + 638 | 0; //@line 27325
    if (__Z15decrypt_payloadPKhtS0_jhjPh($14 + $139 | 0, $202, $62, $22, 1, $$$1177, $203) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 4 >> 2] = 13; //@line 27331
    }
    if ($$1$off0) {
     $$3$off0204 = 6; //@line 27334
     break;
    }
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 12 >> 2] = $203; //@line 27339
    HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 16 >> 1] = $202; //@line 27342
    HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 18 >> 0] = 1; //@line 27345
    label = 44; //@line 27346
    break;
   } else {
    $175 = $10 + 264 | 0; //@line 27349
    $176 = __ZN11LoRaMacMlme16get_confirmationEv($175) | 0; //@line 27350
    $178 = HEAP32[$30 >> 2] | 0; //@line 27352
    $ReallocAsyncCtx20 = _emscripten_realloc_async_context(80) | 0; //@line 27353
    $179 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($102, $14, 8, $52, $2, $176, $10 + 1096 | 0, $178) | 0; //@line 27354
    if (___async) {
     HEAP32[$ReallocAsyncCtx20 >> 2] = 387; //@line 27357
     $180 = $ReallocAsyncCtx20 + 4 | 0; //@line 27358
     $$1$off0$expand_i1_val29 = $$1$off0 & 1; //@line 27359
     HEAP8[$180 >> 0] = $$1$off0$expand_i1_val29; //@line 27360
     $181 = $ReallocAsyncCtx20 + 8 | 0; //@line 27361
     HEAP32[$181 >> 2] = $44; //@line 27362
     $182 = $ReallocAsyncCtx20 + 12 | 0; //@line 27363
     HEAP32[$182 >> 2] = $14; //@line 27364
     $183 = $ReallocAsyncCtx20 + 16 | 0; //@line 27365
     HEAP32[$183 >> 2] = $139; //@line 27366
     $184 = $ReallocAsyncCtx20 + 20 | 0; //@line 27367
     HEAP32[$184 >> 2] = $142; //@line 27368
     $185 = $ReallocAsyncCtx20 + 24 | 0; //@line 27369
     HEAP32[$185 >> 2] = $10; //@line 27370
     $186 = $ReallocAsyncCtx20 + 28 | 0; //@line 27371
     HEAP32[$186 >> 2] = $62; //@line 27372
     $187 = $ReallocAsyncCtx20 + 32 | 0; //@line 27373
     HEAP32[$187 >> 2] = $22; //@line 27374
     $188 = $ReallocAsyncCtx20 + 36 | 0; //@line 27375
     HEAP32[$188 >> 2] = $$$1177; //@line 27376
     $189 = $ReallocAsyncCtx20 + 40 | 0; //@line 27377
     HEAP32[$189 >> 2] = $102; //@line 27378
     $190 = $ReallocAsyncCtx20 + 44 | 0; //@line 27379
     HEAP32[$190 >> 2] = $8; //@line 27380
     $191 = $ReallocAsyncCtx20 + 48 | 0; //@line 27381
     HEAP32[$191 >> 2] = $4; //@line 27382
     $192 = $ReallocAsyncCtx20 + 52 | 0; //@line 27383
     HEAP32[$192 >> 2] = $16; //@line 27384
     $193 = $ReallocAsyncCtx20 + 56 | 0; //@line 27385
     HEAP32[$193 >> 2] = $64; //@line 27386
     $194 = $ReallocAsyncCtx20 + 60 | 0; //@line 27387
     HEAP32[$194 >> 2] = $56; //@line 27388
     $195 = $ReallocAsyncCtx20 + 64 | 0; //@line 27389
     HEAP32[$195 >> 2] = $32; //@line 27390
     $196 = $ReallocAsyncCtx20 + 68 | 0; //@line 27391
     HEAP32[$196 >> 2] = $12; //@line 27392
     $197 = $ReallocAsyncCtx20 + 72 | 0; //@line 27393
     HEAP32[$197 >> 2] = $175; //@line 27394
     $198 = $ReallocAsyncCtx20 + 76 | 0; //@line 27395
     HEAP8[$198 >> 0] = $58; //@line 27396
     sp = STACKTOP; //@line 27397
     return;
    }
    HEAP32[___async_retval >> 2] = $179; //@line 27401
    ___async_unwind = 0; //@line 27402
    HEAP32[$ReallocAsyncCtx20 >> 2] = 387; //@line 27403
    $180 = $ReallocAsyncCtx20 + 4 | 0; //@line 27404
    $$1$off0$expand_i1_val29 = $$1$off0 & 1; //@line 27405
    HEAP8[$180 >> 0] = $$1$off0$expand_i1_val29; //@line 27406
    $181 = $ReallocAsyncCtx20 + 8 | 0; //@line 27407
    HEAP32[$181 >> 2] = $44; //@line 27408
    $182 = $ReallocAsyncCtx20 + 12 | 0; //@line 27409
    HEAP32[$182 >> 2] = $14; //@line 27410
    $183 = $ReallocAsyncCtx20 + 16 | 0; //@line 27411
    HEAP32[$183 >> 2] = $139; //@line 27412
    $184 = $ReallocAsyncCtx20 + 20 | 0; //@line 27413
    HEAP32[$184 >> 2] = $142; //@line 27414
    $185 = $ReallocAsyncCtx20 + 24 | 0; //@line 27415
    HEAP32[$185 >> 2] = $10; //@line 27416
    $186 = $ReallocAsyncCtx20 + 28 | 0; //@line 27417
    HEAP32[$186 >> 2] = $62; //@line 27418
    $187 = $ReallocAsyncCtx20 + 32 | 0; //@line 27419
    HEAP32[$187 >> 2] = $22; //@line 27420
    $188 = $ReallocAsyncCtx20 + 36 | 0; //@line 27421
    HEAP32[$188 >> 2] = $$$1177; //@line 27422
    $189 = $ReallocAsyncCtx20 + 40 | 0; //@line 27423
    HEAP32[$189 >> 2] = $102; //@line 27424
    $190 = $ReallocAsyncCtx20 + 44 | 0; //@line 27425
    HEAP32[$190 >> 2] = $8; //@line 27426
    $191 = $ReallocAsyncCtx20 + 48 | 0; //@line 27427
    HEAP32[$191 >> 2] = $4; //@line 27428
    $192 = $ReallocAsyncCtx20 + 52 | 0; //@line 27429
    HEAP32[$192 >> 2] = $16; //@line 27430
    $193 = $ReallocAsyncCtx20 + 56 | 0; //@line 27431
    HEAP32[$193 >> 2] = $64; //@line 27432
    $194 = $ReallocAsyncCtx20 + 60 | 0; //@line 27433
    HEAP32[$194 >> 2] = $56; //@line 27434
    $195 = $ReallocAsyncCtx20 + 64 | 0; //@line 27435
    HEAP32[$195 >> 2] = $32; //@line 27436
    $196 = $ReallocAsyncCtx20 + 68 | 0; //@line 27437
    HEAP32[$196 >> 2] = $12; //@line 27438
    $197 = $ReallocAsyncCtx20 + 72 | 0; //@line 27439
    HEAP32[$197 >> 2] = $175; //@line 27440
    $198 = $ReallocAsyncCtx20 + 76 | 0; //@line 27441
    HEAP8[$198 >> 0] = $58; //@line 27442
    sp = STACKTOP; //@line 27443
    return;
   }
  } else {
   if (!($38 << 24 >> 24)) {
    if ($$1$off0) {
     $$3$off0204 = 6; //@line 27450
     break;
    } else {
     label = 44; //@line 27453
     break;
    }
   }
   $215 = $10 + 264 | 0; //@line 27457
   $216 = __ZN11LoRaMacMlme16get_confirmationEv($215) | 0; //@line 27458
   $218 = HEAP32[$30 >> 2] | 0; //@line 27460
   $ReallocAsyncCtx19 = _emscripten_realloc_async_context(56) | 0; //@line 27461
   $219 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($102, $14, 8, $52, $2, $216, $10 + 1096 | 0, $218) | 0; //@line 27462
   if (___async) {
    HEAP32[$ReallocAsyncCtx19 >> 2] = 389; //@line 27465
    $220 = $ReallocAsyncCtx19 + 4 | 0; //@line 27466
    HEAP32[$220 >> 2] = $215; //@line 27467
    $221 = $ReallocAsyncCtx19 + 8 | 0; //@line 27468
    HEAP32[$221 >> 2] = $10; //@line 27469
    $222 = $ReallocAsyncCtx19 + 12 | 0; //@line 27470
    HEAP32[$222 >> 2] = $102; //@line 27471
    $223 = $ReallocAsyncCtx19 + 16 | 0; //@line 27472
    $$1$off0$expand_i1_val31 = $$1$off0 & 1; //@line 27473
    HEAP8[$223 >> 0] = $$1$off0$expand_i1_val31; //@line 27474
    $224 = $ReallocAsyncCtx19 + 20 | 0; //@line 27475
    HEAP32[$224 >> 2] = $56; //@line 27476
    $225 = $ReallocAsyncCtx19 + 24 | 0; //@line 27477
    HEAP32[$225 >> 2] = $32; //@line 27478
    $226 = $ReallocAsyncCtx19 + 28 | 0; //@line 27479
    HEAP8[$226 >> 0] = $58; //@line 27480
    $227 = $ReallocAsyncCtx19 + 32 | 0; //@line 27481
    HEAP32[$227 >> 2] = $44; //@line 27482
    $228 = $ReallocAsyncCtx19 + 36 | 0; //@line 27483
    HEAP32[$228 >> 2] = $12; //@line 27484
    $229 = $ReallocAsyncCtx19 + 40 | 0; //@line 27485
    HEAP32[$229 >> 2] = $42; //@line 27486
    $230 = $ReallocAsyncCtx19 + 44 | 0; //@line 27487
    HEAP32[$230 >> 2] = $48; //@line 27488
    $231 = $ReallocAsyncCtx19 + 48 | 0; //@line 27489
    HEAP32[$231 >> 2] = $26; //@line 27490
    $232 = $ReallocAsyncCtx19 + 52 | 0; //@line 27491
    HEAP32[$232 >> 2] = $36; //@line 27492
    sp = STACKTOP; //@line 27493
    return;
   }
   HEAP32[___async_retval >> 2] = $219; //@line 27497
   ___async_unwind = 0; //@line 27498
   HEAP32[$ReallocAsyncCtx19 >> 2] = 389; //@line 27499
   $220 = $ReallocAsyncCtx19 + 4 | 0; //@line 27500
   HEAP32[$220 >> 2] = $215; //@line 27501
   $221 = $ReallocAsyncCtx19 + 8 | 0; //@line 27502
   HEAP32[$221 >> 2] = $10; //@line 27503
   $222 = $ReallocAsyncCtx19 + 12 | 0; //@line 27504
   HEAP32[$222 >> 2] = $102; //@line 27505
   $223 = $ReallocAsyncCtx19 + 16 | 0; //@line 27506
   $$1$off0$expand_i1_val31 = $$1$off0 & 1; //@line 27507
   HEAP8[$223 >> 0] = $$1$off0$expand_i1_val31; //@line 27508
   $224 = $ReallocAsyncCtx19 + 20 | 0; //@line 27509
   HEAP32[$224 >> 2] = $56; //@line 27510
   $225 = $ReallocAsyncCtx19 + 24 | 0; //@line 27511
   HEAP32[$225 >> 2] = $32; //@line 27512
   $226 = $ReallocAsyncCtx19 + 28 | 0; //@line 27513
   HEAP8[$226 >> 0] = $58; //@line 27514
   $227 = $ReallocAsyncCtx19 + 32 | 0; //@line 27515
   HEAP32[$227 >> 2] = $44; //@line 27516
   $228 = $ReallocAsyncCtx19 + 36 | 0; //@line 27517
   HEAP32[$228 >> 2] = $12; //@line 27518
   $229 = $ReallocAsyncCtx19 + 40 | 0; //@line 27519
   HEAP32[$229 >> 2] = $42; //@line 27520
   $230 = $ReallocAsyncCtx19 + 44 | 0; //@line 27521
   HEAP32[$230 >> 2] = $48; //@line 27522
   $231 = $ReallocAsyncCtx19 + 48 | 0; //@line 27523
   HEAP32[$231 >> 2] = $26; //@line 27524
   $232 = $ReallocAsyncCtx19 + 52 | 0; //@line 27525
   HEAP32[$232 >> 2] = $36; //@line 27526
   sp = STACKTOP; //@line 27527
   return;
  }
 } while (0);
 if ((label | 0) == 44) {
  $237 = (__ZN11LoRaMacMcps16get_confirmationEv($44) | 0) + 10 | 0; //@line 27535
  if ($58 & 32) {
   HEAP8[$237 >> 0] = 1; //@line 27537
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 28 >> 0] = 1; //@line 27540
   $240 = HEAP32[$12 >> 2] | 0; //@line 27541
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(20) | 0; //@line 27543
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($240, $10 + 1076 | 0); //@line 27544
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 391; //@line 27547
    $242 = $ReallocAsyncCtx23 + 4 | 0; //@line 27548
    HEAP32[$242 >> 2] = $10; //@line 27549
    $243 = $ReallocAsyncCtx23 + 8 | 0; //@line 27550
    HEAP32[$243 >> 2] = $12; //@line 27551
    $244 = $ReallocAsyncCtx23 + 12 | 0; //@line 27552
    HEAP32[$244 >> 2] = $56; //@line 27553
    $245 = $ReallocAsyncCtx23 + 16 | 0; //@line 27554
    HEAP32[$245 >> 2] = $32; //@line 27555
    sp = STACKTOP; //@line 27556
    return;
   }
   ___async_unwind = 0; //@line 27559
   HEAP32[$ReallocAsyncCtx23 >> 2] = 391; //@line 27560
   $242 = $ReallocAsyncCtx23 + 4 | 0; //@line 27561
   HEAP32[$242 >> 2] = $10; //@line 27562
   $243 = $ReallocAsyncCtx23 + 8 | 0; //@line 27563
   HEAP32[$243 >> 2] = $12; //@line 27564
   $244 = $ReallocAsyncCtx23 + 12 | 0; //@line 27565
   HEAP32[$244 >> 2] = $56; //@line 27566
   $245 = $ReallocAsyncCtx23 + 16 | 0; //@line 27567
   HEAP32[$245 >> 2] = $32; //@line 27568
   sp = STACKTOP; //@line 27569
   return;
  }
  HEAP8[$237 >> 0] = 0; //@line 27572
  if ((HEAPU8[$10 + 895 >> 0] | 0) > (HEAPU8[$10 + 894 >> 0] | 0)) {
   $251 = HEAP32[$12 >> 2] | 0; //@line 27579
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(20) | 0; //@line 27581
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($251, $10 + 1076 | 0); //@line 27582
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 392; //@line 27585
    $253 = $ReallocAsyncCtx22 + 4 | 0; //@line 27586
    HEAP32[$253 >> 2] = $10; //@line 27587
    $254 = $ReallocAsyncCtx22 + 8 | 0; //@line 27588
    HEAP32[$254 >> 2] = $12; //@line 27589
    $255 = $ReallocAsyncCtx22 + 12 | 0; //@line 27590
    HEAP32[$255 >> 2] = $56; //@line 27591
    $256 = $ReallocAsyncCtx22 + 16 | 0; //@line 27592
    HEAP32[$256 >> 2] = $32; //@line 27593
    sp = STACKTOP; //@line 27594
    return;
   }
   ___async_unwind = 0; //@line 27597
   HEAP32[$ReallocAsyncCtx22 >> 2] = 392; //@line 27598
   $253 = $ReallocAsyncCtx22 + 4 | 0; //@line 27599
   HEAP32[$253 >> 2] = $10; //@line 27600
   $254 = $ReallocAsyncCtx22 + 8 | 0; //@line 27601
   HEAP32[$254 >> 2] = $12; //@line 27602
   $255 = $ReallocAsyncCtx22 + 12 | 0; //@line 27603
   HEAP32[$255 >> 2] = $56; //@line 27604
   $256 = $ReallocAsyncCtx22 + 16 | 0; //@line 27605
   HEAP32[$256 >> 2] = $32; //@line 27606
   sp = STACKTOP; //@line 27607
   return;
  } else {
   $$3$off0204 = 2; //@line 27610
  }
 }
 $257 = $10 + 944 | 0; //@line 27613
 HEAP8[$257 >> 0] = $$3$off0204 | HEAP8[$257 >> 0] & -7; //@line 27617
 $263 = $10 + 944 | 0; //@line 27618
 HEAP8[$263 >> 0] = HEAP8[$263 >> 0] | 32; //@line 27621
 $266 = HEAP32[$12 >> 2] | 0; //@line 27622
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 27624
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($266, $10 + 996 | 0, 1); //@line 27625
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 395; //@line 27628
  $268 = $ReallocAsyncCtx17 + 4 | 0; //@line 27629
  HEAP32[$268 >> 2] = $56; //@line 27630
  $269 = $ReallocAsyncCtx17 + 8 | 0; //@line 27631
  HEAP32[$269 >> 2] = $32; //@line 27632
  sp = STACKTOP; //@line 27633
  return;
 }
 ___async_unwind = 0; //@line 27636
 HEAP32[$ReallocAsyncCtx17 >> 2] = 395; //@line 27637
 $268 = $ReallocAsyncCtx17 + 4 | 0; //@line 27638
 HEAP32[$268 >> 2] = $56; //@line 27639
 $269 = $ReallocAsyncCtx17 + 8 | 0; //@line 27640
 HEAP32[$269 >> 2] = $32; //@line 27641
 sp = STACKTOP; //@line 27642
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_142($0) {
 $0 = $0 | 0;
 var $$1$off0 = 0, $$1$off0$expand_i1_val = 0, $$1$off0$expand_i1_val29 = 0, $$1$off0$expand_i1_val31 = 0, $$3$off0204 = 0, $$sink = 0, $10 = 0, $100 = 0, $103 = 0, $104 = 0, $111 = 0, $112 = 0, $114 = 0, $116 = 0, $117 = 0, $12 = 0, $121 = 0, $122 = 0, $129 = 0, $130 = 0, $137 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $145 = 0, $149 = 0, $154 = 0, $155 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $173 = 0, $174 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $213 = 0, $214 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $235 = 0, $238 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $249 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $264 = 0, $266 = 0, $267 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $66 = 0, $70 = 0, $72 = 0, $74 = 0, $78 = 0, $8 = 0, $80 = 0, $83 = 0, $84 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx19 = 0, $ReallocAsyncCtx20 = 0, $ReallocAsyncCtx21 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 27662
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 27664
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27666
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27668
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27670
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27672
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27674
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27676
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27678
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 27680
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 27682
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 27684
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 27686
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 27688
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 27690
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 27692
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 27694
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 27696
 $38 = HEAP8[$0 + 76 >> 0] | 0; //@line 27700
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 27702
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 27704
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 27706
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 27708
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 27710
 $50 = HEAP8[$0 + 100 >> 0] | 0; //@line 27712
 $52 = HEAP8[$0 + 101 >> 0] | 0; //@line 27714
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 27716
 $56 = HEAP32[$0 + 108 >> 2] | 0; //@line 27718
 $58 = HEAP8[$0 + 112 >> 0] | 0; //@line 27720
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 27722
 $62 = HEAP32[$0 + 120 >> 2] | 0; //@line 27724
 $64 = HEAP32[$0 + 124 >> 2] | 0; //@line 27726
 $66 = HEAP32[$0 + 128 >> 2] | 0; //@line 27728
 $70 = HEAP8[$0 + 136 >> 0] | 0; //@line 27732
 $72 = HEAP32[$0 + 140 >> 2] | 0; //@line 27734
 $74 = (HEAP32[$0 + 72 >> 2] | 0) == (HEAP32[HEAP32[$0 + 132 >> 2] >> 2] | 0); //@line 27736
 $78 = $18 >>> 0 < ((__ZN7LoRaPHY29get_maximum_frame_counter_gapEv(HEAP32[$30 >> 2] | 0) | 0) & 65535) >>> 0; //@line 27740
 $80 = (__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 4 | 0; //@line 27742
 if (!$78) {
  HEAP32[$80 >> 2] = 10; //@line 27744
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 32 >> 2] = $40; //@line 27747
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 27748
  __ZN7LoRaMac21prepare_rx_done_abortEv($10); //@line 27749
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 382; //@line 27752
   $83 = $ReallocAsyncCtx10 + 4 | 0; //@line 27753
   HEAP32[$83 >> 2] = $56; //@line 27754
   $84 = $ReallocAsyncCtx10 + 8 | 0; //@line 27755
   HEAP32[$84 >> 2] = $32; //@line 27756
   sp = STACKTOP; //@line 27757
   return;
  }
  ___async_unwind = 0; //@line 27760
  HEAP32[$ReallocAsyncCtx10 >> 2] = 382; //@line 27761
  $83 = $ReallocAsyncCtx10 + 4 | 0; //@line 27762
  HEAP32[$83 >> 2] = $56; //@line 27763
  $84 = $ReallocAsyncCtx10 + 8 | 0; //@line 27764
  HEAP32[$84 >> 2] = $32; //@line 27765
  sp = STACKTOP; //@line 27766
  return;
 }
 if (!$74) {
  HEAP32[$80 >> 2] = 12; //@line 27770
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 27771
  __ZN7LoRaMac21prepare_rx_done_abortEv($10); //@line 27772
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 393; //@line 27775
   $259 = $ReallocAsyncCtx7 + 4 | 0; //@line 27776
   HEAP32[$259 >> 2] = $56; //@line 27777
   $260 = $ReallocAsyncCtx7 + 8 | 0; //@line 27778
   HEAP32[$260 >> 2] = $32; //@line 27779
   sp = STACKTOP; //@line 27780
   return;
  }
  ___async_unwind = 0; //@line 27783
  HEAP32[$ReallocAsyncCtx7 >> 2] = 393; //@line 27784
  $259 = $ReallocAsyncCtx7 + 4 | 0; //@line 27785
  HEAP32[$259 >> 2] = $56; //@line 27786
  $260 = $ReallocAsyncCtx7 + 8 | 0; //@line 27787
  HEAP32[$260 >> 2] = $32; //@line 27788
  sp = STACKTOP; //@line 27789
  return;
 }
 HEAP32[$80 >> 2] = 0; //@line 27792
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 8 >> 0] = $70; //@line 27795
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 11 >> 0] = ($58 & 255) >>> 4 & 1; //@line 27800
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 12 >> 2] = 0; //@line 27803
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 16 >> 1] = 0; //@line 27806
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 32 >> 2] = $40; //@line 27809
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($44) | 0) + 4 >> 2] = 0; //@line 27812
 HEAP32[$10 + 964 >> 2] = 0; //@line 27814
 $100 = $10 + 4 | 0; //@line 27815
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($100); //@line 27816
 do {
  if ($70 << 24 >> 24 == 1) {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) >> 2] = 2; //@line 27821
   $103 = $60 + 36 | 0; //@line 27822
   $104 = HEAP32[$103 >> 2] | 0; //@line 27823
   if (($104 | 0) != ($40 | 0) | ($104 | 0) == 0) {
    $$1$off0 = 0; //@line 27828
    $$sink = $103; //@line 27828
   } else {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 4 >> 2] = 8; //@line 27832
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 32 >> 2] = $40; //@line 27835
    $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 27836
    __ZN7LoRaMac21prepare_rx_done_abortEv($10); //@line 27837
    if (___async) {
     HEAP32[$ReallocAsyncCtx9 >> 2] = 383; //@line 27840
     $111 = $ReallocAsyncCtx9 + 4 | 0; //@line 27841
     HEAP32[$111 >> 2] = $56; //@line 27842
     $112 = $ReallocAsyncCtx9 + 8 | 0; //@line 27843
     HEAP32[$112 >> 2] = $32; //@line 27844
     sp = STACKTOP; //@line 27845
     return;
    }
    ___async_unwind = 0; //@line 27848
    HEAP32[$ReallocAsyncCtx9 >> 2] = 383; //@line 27849
    $111 = $ReallocAsyncCtx9 + 4 | 0; //@line 27850
    HEAP32[$111 >> 2] = $56; //@line 27851
    $112 = $ReallocAsyncCtx9 + 8 | 0; //@line 27852
    HEAP32[$112 >> 2] = $32; //@line 27853
    sp = STACKTOP; //@line 27854
    return;
   }
  } else {
   $114 = $10 + 374 | 0; //@line 27859
   if ($50 << 24 >> 24 == 5) {
    HEAP8[$114 >> 0] = 1; //@line 27861
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) >> 2] = 1; //@line 27863
    $116 = $10 + 960 | 0; //@line 27864
    $117 = HEAP32[$116 >> 2] | 0; //@line 27865
    $$1$off0 = ($117 | 0) != 0 & ($117 | 0) == ($40 | 0); //@line 27869
    $$sink = $116; //@line 27869
    break;
   }
   HEAP8[$114 >> 0] = 0; //@line 27872
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) >> 2] = 0; //@line 27874
   $121 = $10 + 960 | 0; //@line 27875
   $122 = HEAP32[$121 >> 2] | 0; //@line 27876
   if (($122 | 0) != ($40 | 0) | ($122 | 0) == 0) {
    $$1$off0 = 0; //@line 27881
    $$sink = $121; //@line 27881
   } else {
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 4 >> 2] = 8; //@line 27885
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 32 >> 2] = $40; //@line 27888
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 27889
    __ZN7LoRaMac21prepare_rx_done_abortEv($10); //@line 27890
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 384; //@line 27893
     $129 = $ReallocAsyncCtx8 + 4 | 0; //@line 27894
     HEAP32[$129 >> 2] = $56; //@line 27895
     $130 = $ReallocAsyncCtx8 + 8 | 0; //@line 27896
     HEAP32[$130 >> 2] = $32; //@line 27897
     sp = STACKTOP; //@line 27898
     return;
    }
    ___async_unwind = 0; //@line 27901
    HEAP32[$ReallocAsyncCtx8 >> 2] = 384; //@line 27902
    $129 = $ReallocAsyncCtx8 + 4 | 0; //@line 27903
    HEAP32[$129 >> 2] = $56; //@line 27904
    $130 = $ReallocAsyncCtx8 + 8 | 0; //@line 27905
    HEAP32[$130 >> 2] = $32; //@line 27906
    sp = STACKTOP; //@line 27907
    return;
   }
  }
 } while (0);
 HEAP32[$$sink >> 2] = $40; //@line 27912
 if ((HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($44) | 0) >> 2] | 0) == 1) {
  if ($58 & 32) {
   __ZN14LoRaMacCommand20clear_command_bufferEv($100); //@line 27920
  }
 } else {
  __ZN14LoRaMacCommand20clear_command_bufferEv($100); //@line 27923
 }
 do {
  if (($46 | 0) > ($24 | 0)) {
   $137 = $20 + 9 | 0; //@line 27928
   $139 = HEAP8[$14 + $24 >> 0] | 0; //@line 27930
   $140 = $46 - $137 | 0; //@line 27931
   $141 = $140 & 255; //@line 27932
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 9 >> 0] = $139; //@line 27935
   $145 = $38 << 24 >> 24 == 0; //@line 27937
   if (!($139 << 24 >> 24)) {
    if (!$145) {
     $$3$off0204 = 6; //@line 27940
     break;
    }
    $149 = $10 + 638 | 0; //@line 27946
    if (__Z15decrypt_payloadPKhtS0_jhjPh($14 + $137 | 0, $140 & 255, $54, $22, 1, $40, $149) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 4 >> 2] = 13; //@line 27952
    }
    $154 = $10 + 264 | 0; //@line 27954
    $155 = __ZN11LoRaMacMlme16get_confirmationEv($154) | 0; //@line 27955
    $157 = HEAP32[$30 >> 2] | 0; //@line 27957
    $ReallocAsyncCtx21 = _emscripten_realloc_async_context(56) | 0; //@line 27958
    $158 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($100, $149, 0, $141, $2, $155, $10 + 1096 | 0, $157) | 0; //@line 27959
    if (___async) {
     HEAP32[$ReallocAsyncCtx21 >> 2] = 385; //@line 27962
     $159 = $ReallocAsyncCtx21 + 4 | 0; //@line 27963
     HEAP32[$159 >> 2] = $28; //@line 27964
     $160 = $ReallocAsyncCtx21 + 8 | 0; //@line 27965
     HEAP32[$160 >> 2] = $6; //@line 27966
     $161 = $ReallocAsyncCtx21 + 12 | 0; //@line 27967
     HEAP32[$161 >> 2] = $72; //@line 27968
     $162 = $ReallocAsyncCtx21 + 16 | 0; //@line 27969
     HEAP32[$162 >> 2] = $66; //@line 27970
     $163 = $ReallocAsyncCtx21 + 20 | 0; //@line 27971
     HEAP32[$163 >> 2] = $44; //@line 27972
     $164 = $ReallocAsyncCtx21 + 24 | 0; //@line 27973
     $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 27974
     HEAP8[$164 >> 0] = $$1$off0$expand_i1_val; //@line 27975
     $165 = $ReallocAsyncCtx21 + 28 | 0; //@line 27976
     HEAP32[$165 >> 2] = $100; //@line 27977
     $166 = $ReallocAsyncCtx21 + 32 | 0; //@line 27978
     HEAP32[$166 >> 2] = $56; //@line 27979
     $167 = $ReallocAsyncCtx21 + 36 | 0; //@line 27980
     HEAP32[$167 >> 2] = $32; //@line 27981
     $168 = $ReallocAsyncCtx21 + 40 | 0; //@line 27982
     HEAP32[$168 >> 2] = $10; //@line 27983
     $169 = $ReallocAsyncCtx21 + 44 | 0; //@line 27984
     HEAP32[$169 >> 2] = $12; //@line 27985
     $170 = $ReallocAsyncCtx21 + 48 | 0; //@line 27986
     HEAP32[$170 >> 2] = $154; //@line 27987
     $171 = $ReallocAsyncCtx21 + 52 | 0; //@line 27988
     HEAP8[$171 >> 0] = $58; //@line 27989
     sp = STACKTOP; //@line 27990
     return;
    }
    HEAP32[___async_retval >> 2] = $158; //@line 27994
    ___async_unwind = 0; //@line 27995
    HEAP32[$ReallocAsyncCtx21 >> 2] = 385; //@line 27996
    $159 = $ReallocAsyncCtx21 + 4 | 0; //@line 27997
    HEAP32[$159 >> 2] = $28; //@line 27998
    $160 = $ReallocAsyncCtx21 + 8 | 0; //@line 27999
    HEAP32[$160 >> 2] = $6; //@line 28000
    $161 = $ReallocAsyncCtx21 + 12 | 0; //@line 28001
    HEAP32[$161 >> 2] = $72; //@line 28002
    $162 = $ReallocAsyncCtx21 + 16 | 0; //@line 28003
    HEAP32[$162 >> 2] = $66; //@line 28004
    $163 = $ReallocAsyncCtx21 + 20 | 0; //@line 28005
    HEAP32[$163 >> 2] = $44; //@line 28006
    $164 = $ReallocAsyncCtx21 + 24 | 0; //@line 28007
    $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 28008
    HEAP8[$164 >> 0] = $$1$off0$expand_i1_val; //@line 28009
    $165 = $ReallocAsyncCtx21 + 28 | 0; //@line 28010
    HEAP32[$165 >> 2] = $100; //@line 28011
    $166 = $ReallocAsyncCtx21 + 32 | 0; //@line 28012
    HEAP32[$166 >> 2] = $56; //@line 28013
    $167 = $ReallocAsyncCtx21 + 36 | 0; //@line 28014
    HEAP32[$167 >> 2] = $32; //@line 28015
    $168 = $ReallocAsyncCtx21 + 40 | 0; //@line 28016
    HEAP32[$168 >> 2] = $10; //@line 28017
    $169 = $ReallocAsyncCtx21 + 44 | 0; //@line 28018
    HEAP32[$169 >> 2] = $12; //@line 28019
    $170 = $ReallocAsyncCtx21 + 48 | 0; //@line 28020
    HEAP32[$170 >> 2] = $154; //@line 28021
    $171 = $ReallocAsyncCtx21 + 52 | 0; //@line 28022
    HEAP8[$171 >> 0] = $58; //@line 28023
    sp = STACKTOP; //@line 28024
    return;
   }
   if ($145) {
    $200 = $140 & 255; //@line 28030
    $201 = $10 + 638 | 0; //@line 28031
    if (__Z15decrypt_payloadPKhtS0_jhjPh($14 + $137 | 0, $200, $62, $22, 1, $40, $201) | 0) {
     HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 4 >> 2] = 13; //@line 28037
    }
    if ($$1$off0) {
     $$3$off0204 = 6; //@line 28040
     break;
    }
    HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 12 >> 2] = $201; //@line 28045
    HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 16 >> 1] = $200; //@line 28048
    HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 18 >> 0] = 1; //@line 28051
    label = 44; //@line 28052
    break;
   } else {
    $173 = $10 + 264 | 0; //@line 28055
    $174 = __ZN11LoRaMacMlme16get_confirmationEv($173) | 0; //@line 28056
    $176 = HEAP32[$30 >> 2] | 0; //@line 28058
    $ReallocAsyncCtx20 = _emscripten_realloc_async_context(80) | 0; //@line 28059
    $177 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($100, $14, 8, $52, $2, $174, $10 + 1096 | 0, $176) | 0; //@line 28060
    if (___async) {
     HEAP32[$ReallocAsyncCtx20 >> 2] = 387; //@line 28063
     $178 = $ReallocAsyncCtx20 + 4 | 0; //@line 28064
     $$1$off0$expand_i1_val29 = $$1$off0 & 1; //@line 28065
     HEAP8[$178 >> 0] = $$1$off0$expand_i1_val29; //@line 28066
     $179 = $ReallocAsyncCtx20 + 8 | 0; //@line 28067
     HEAP32[$179 >> 2] = $44; //@line 28068
     $180 = $ReallocAsyncCtx20 + 12 | 0; //@line 28069
     HEAP32[$180 >> 2] = $14; //@line 28070
     $181 = $ReallocAsyncCtx20 + 16 | 0; //@line 28071
     HEAP32[$181 >> 2] = $137; //@line 28072
     $182 = $ReallocAsyncCtx20 + 20 | 0; //@line 28073
     HEAP32[$182 >> 2] = $140; //@line 28074
     $183 = $ReallocAsyncCtx20 + 24 | 0; //@line 28075
     HEAP32[$183 >> 2] = $10; //@line 28076
     $184 = $ReallocAsyncCtx20 + 28 | 0; //@line 28077
     HEAP32[$184 >> 2] = $62; //@line 28078
     $185 = $ReallocAsyncCtx20 + 32 | 0; //@line 28079
     HEAP32[$185 >> 2] = $22; //@line 28080
     $186 = $ReallocAsyncCtx20 + 36 | 0; //@line 28081
     HEAP32[$186 >> 2] = $40; //@line 28082
     $187 = $ReallocAsyncCtx20 + 40 | 0; //@line 28083
     HEAP32[$187 >> 2] = $100; //@line 28084
     $188 = $ReallocAsyncCtx20 + 44 | 0; //@line 28085
     HEAP32[$188 >> 2] = $8; //@line 28086
     $189 = $ReallocAsyncCtx20 + 48 | 0; //@line 28087
     HEAP32[$189 >> 2] = $4; //@line 28088
     $190 = $ReallocAsyncCtx20 + 52 | 0; //@line 28089
     HEAP32[$190 >> 2] = $16; //@line 28090
     $191 = $ReallocAsyncCtx20 + 56 | 0; //@line 28091
     HEAP32[$191 >> 2] = $64; //@line 28092
     $192 = $ReallocAsyncCtx20 + 60 | 0; //@line 28093
     HEAP32[$192 >> 2] = $56; //@line 28094
     $193 = $ReallocAsyncCtx20 + 64 | 0; //@line 28095
     HEAP32[$193 >> 2] = $32; //@line 28096
     $194 = $ReallocAsyncCtx20 + 68 | 0; //@line 28097
     HEAP32[$194 >> 2] = $12; //@line 28098
     $195 = $ReallocAsyncCtx20 + 72 | 0; //@line 28099
     HEAP32[$195 >> 2] = $173; //@line 28100
     $196 = $ReallocAsyncCtx20 + 76 | 0; //@line 28101
     HEAP8[$196 >> 0] = $58; //@line 28102
     sp = STACKTOP; //@line 28103
     return;
    }
    HEAP32[___async_retval >> 2] = $177; //@line 28107
    ___async_unwind = 0; //@line 28108
    HEAP32[$ReallocAsyncCtx20 >> 2] = 387; //@line 28109
    $178 = $ReallocAsyncCtx20 + 4 | 0; //@line 28110
    $$1$off0$expand_i1_val29 = $$1$off0 & 1; //@line 28111
    HEAP8[$178 >> 0] = $$1$off0$expand_i1_val29; //@line 28112
    $179 = $ReallocAsyncCtx20 + 8 | 0; //@line 28113
    HEAP32[$179 >> 2] = $44; //@line 28114
    $180 = $ReallocAsyncCtx20 + 12 | 0; //@line 28115
    HEAP32[$180 >> 2] = $14; //@line 28116
    $181 = $ReallocAsyncCtx20 + 16 | 0; //@line 28117
    HEAP32[$181 >> 2] = $137; //@line 28118
    $182 = $ReallocAsyncCtx20 + 20 | 0; //@line 28119
    HEAP32[$182 >> 2] = $140; //@line 28120
    $183 = $ReallocAsyncCtx20 + 24 | 0; //@line 28121
    HEAP32[$183 >> 2] = $10; //@line 28122
    $184 = $ReallocAsyncCtx20 + 28 | 0; //@line 28123
    HEAP32[$184 >> 2] = $62; //@line 28124
    $185 = $ReallocAsyncCtx20 + 32 | 0; //@line 28125
    HEAP32[$185 >> 2] = $22; //@line 28126
    $186 = $ReallocAsyncCtx20 + 36 | 0; //@line 28127
    HEAP32[$186 >> 2] = $40; //@line 28128
    $187 = $ReallocAsyncCtx20 + 40 | 0; //@line 28129
    HEAP32[$187 >> 2] = $100; //@line 28130
    $188 = $ReallocAsyncCtx20 + 44 | 0; //@line 28131
    HEAP32[$188 >> 2] = $8; //@line 28132
    $189 = $ReallocAsyncCtx20 + 48 | 0; //@line 28133
    HEAP32[$189 >> 2] = $4; //@line 28134
    $190 = $ReallocAsyncCtx20 + 52 | 0; //@line 28135
    HEAP32[$190 >> 2] = $16; //@line 28136
    $191 = $ReallocAsyncCtx20 + 56 | 0; //@line 28137
    HEAP32[$191 >> 2] = $64; //@line 28138
    $192 = $ReallocAsyncCtx20 + 60 | 0; //@line 28139
    HEAP32[$192 >> 2] = $56; //@line 28140
    $193 = $ReallocAsyncCtx20 + 64 | 0; //@line 28141
    HEAP32[$193 >> 2] = $32; //@line 28142
    $194 = $ReallocAsyncCtx20 + 68 | 0; //@line 28143
    HEAP32[$194 >> 2] = $12; //@line 28144
    $195 = $ReallocAsyncCtx20 + 72 | 0; //@line 28145
    HEAP32[$195 >> 2] = $173; //@line 28146
    $196 = $ReallocAsyncCtx20 + 76 | 0; //@line 28147
    HEAP8[$196 >> 0] = $58; //@line 28148
    sp = STACKTOP; //@line 28149
    return;
   }
  } else {
   if (!($38 << 24 >> 24)) {
    if ($$1$off0) {
     $$3$off0204 = 6; //@line 28156
     break;
    } else {
     label = 44; //@line 28159
     break;
    }
   }
   $213 = $10 + 264 | 0; //@line 28163
   $214 = __ZN11LoRaMacMlme16get_confirmationEv($213) | 0; //@line 28164
   $216 = HEAP32[$30 >> 2] | 0; //@line 28166
   $ReallocAsyncCtx19 = _emscripten_realloc_async_context(56) | 0; //@line 28167
   $217 = __ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($100, $14, 8, $52, $2, $214, $10 + 1096 | 0, $216) | 0; //@line 28168
   if (___async) {
    HEAP32[$ReallocAsyncCtx19 >> 2] = 389; //@line 28171
    $218 = $ReallocAsyncCtx19 + 4 | 0; //@line 28172
    HEAP32[$218 >> 2] = $213; //@line 28173
    $219 = $ReallocAsyncCtx19 + 8 | 0; //@line 28174
    HEAP32[$219 >> 2] = $10; //@line 28175
    $220 = $ReallocAsyncCtx19 + 12 | 0; //@line 28176
    HEAP32[$220 >> 2] = $100; //@line 28177
    $221 = $ReallocAsyncCtx19 + 16 | 0; //@line 28178
    $$1$off0$expand_i1_val31 = $$1$off0 & 1; //@line 28179
    HEAP8[$221 >> 0] = $$1$off0$expand_i1_val31; //@line 28180
    $222 = $ReallocAsyncCtx19 + 20 | 0; //@line 28181
    HEAP32[$222 >> 2] = $56; //@line 28182
    $223 = $ReallocAsyncCtx19 + 24 | 0; //@line 28183
    HEAP32[$223 >> 2] = $32; //@line 28184
    $224 = $ReallocAsyncCtx19 + 28 | 0; //@line 28185
    HEAP8[$224 >> 0] = $58; //@line 28186
    $225 = $ReallocAsyncCtx19 + 32 | 0; //@line 28187
    HEAP32[$225 >> 2] = $44; //@line 28188
    $226 = $ReallocAsyncCtx19 + 36 | 0; //@line 28189
    HEAP32[$226 >> 2] = $12; //@line 28190
    $227 = $ReallocAsyncCtx19 + 40 | 0; //@line 28191
    HEAP32[$227 >> 2] = $42; //@line 28192
    $228 = $ReallocAsyncCtx19 + 44 | 0; //@line 28193
    HEAP32[$228 >> 2] = $48; //@line 28194
    $229 = $ReallocAsyncCtx19 + 48 | 0; //@line 28195
    HEAP32[$229 >> 2] = $26; //@line 28196
    $230 = $ReallocAsyncCtx19 + 52 | 0; //@line 28197
    HEAP32[$230 >> 2] = $34; //@line 28198
    sp = STACKTOP; //@line 28199
    return;
   }
   HEAP32[___async_retval >> 2] = $217; //@line 28203
   ___async_unwind = 0; //@line 28204
   HEAP32[$ReallocAsyncCtx19 >> 2] = 389; //@line 28205
   $218 = $ReallocAsyncCtx19 + 4 | 0; //@line 28206
   HEAP32[$218 >> 2] = $213; //@line 28207
   $219 = $ReallocAsyncCtx19 + 8 | 0; //@line 28208
   HEAP32[$219 >> 2] = $10; //@line 28209
   $220 = $ReallocAsyncCtx19 + 12 | 0; //@line 28210
   HEAP32[$220 >> 2] = $100; //@line 28211
   $221 = $ReallocAsyncCtx19 + 16 | 0; //@line 28212
   $$1$off0$expand_i1_val31 = $$1$off0 & 1; //@line 28213
   HEAP8[$221 >> 0] = $$1$off0$expand_i1_val31; //@line 28214
   $222 = $ReallocAsyncCtx19 + 20 | 0; //@line 28215
   HEAP32[$222 >> 2] = $56; //@line 28216
   $223 = $ReallocAsyncCtx19 + 24 | 0; //@line 28217
   HEAP32[$223 >> 2] = $32; //@line 28218
   $224 = $ReallocAsyncCtx19 + 28 | 0; //@line 28219
   HEAP8[$224 >> 0] = $58; //@line 28220
   $225 = $ReallocAsyncCtx19 + 32 | 0; //@line 28221
   HEAP32[$225 >> 2] = $44; //@line 28222
   $226 = $ReallocAsyncCtx19 + 36 | 0; //@line 28223
   HEAP32[$226 >> 2] = $12; //@line 28224
   $227 = $ReallocAsyncCtx19 + 40 | 0; //@line 28225
   HEAP32[$227 >> 2] = $42; //@line 28226
   $228 = $ReallocAsyncCtx19 + 44 | 0; //@line 28227
   HEAP32[$228 >> 2] = $48; //@line 28228
   $229 = $ReallocAsyncCtx19 + 48 | 0; //@line 28229
   HEAP32[$229 >> 2] = $26; //@line 28230
   $230 = $ReallocAsyncCtx19 + 52 | 0; //@line 28231
   HEAP32[$230 >> 2] = $34; //@line 28232
   sp = STACKTOP; //@line 28233
   return;
  }
 } while (0);
 if ((label | 0) == 44) {
  $235 = (__ZN11LoRaMacMcps16get_confirmationEv($44) | 0) + 10 | 0; //@line 28241
  if ($58 & 32) {
   HEAP8[$235 >> 0] = 1; //@line 28243
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($44) | 0) + 28 >> 0] = 1; //@line 28246
   $238 = HEAP32[$12 >> 2] | 0; //@line 28247
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(20) | 0; //@line 28249
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($238, $10 + 1076 | 0); //@line 28250
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 391; //@line 28253
    $240 = $ReallocAsyncCtx23 + 4 | 0; //@line 28254
    HEAP32[$240 >> 2] = $10; //@line 28255
    $241 = $ReallocAsyncCtx23 + 8 | 0; //@line 28256
    HEAP32[$241 >> 2] = $12; //@line 28257
    $242 = $ReallocAsyncCtx23 + 12 | 0; //@line 28258
    HEAP32[$242 >> 2] = $56; //@line 28259
    $243 = $ReallocAsyncCtx23 + 16 | 0; //@line 28260
    HEAP32[$243 >> 2] = $32; //@line 28261
    sp = STACKTOP; //@line 28262
    return;
   }
   ___async_unwind = 0; //@line 28265
   HEAP32[$ReallocAsyncCtx23 >> 2] = 391; //@line 28266
   $240 = $ReallocAsyncCtx23 + 4 | 0; //@line 28267
   HEAP32[$240 >> 2] = $10; //@line 28268
   $241 = $ReallocAsyncCtx23 + 8 | 0; //@line 28269
   HEAP32[$241 >> 2] = $12; //@line 28270
   $242 = $ReallocAsyncCtx23 + 12 | 0; //@line 28271
   HEAP32[$242 >> 2] = $56; //@line 28272
   $243 = $ReallocAsyncCtx23 + 16 | 0; //@line 28273
   HEAP32[$243 >> 2] = $32; //@line 28274
   sp = STACKTOP; //@line 28275
   return;
  }
  HEAP8[$235 >> 0] = 0; //@line 28278
  if ((HEAPU8[$10 + 895 >> 0] | 0) > (HEAPU8[$10 + 894 >> 0] | 0)) {
   $249 = HEAP32[$12 >> 2] | 0; //@line 28285
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(20) | 0; //@line 28287
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($249, $10 + 1076 | 0); //@line 28288
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 392; //@line 28291
    $251 = $ReallocAsyncCtx22 + 4 | 0; //@line 28292
    HEAP32[$251 >> 2] = $10; //@line 28293
    $252 = $ReallocAsyncCtx22 + 8 | 0; //@line 28294
    HEAP32[$252 >> 2] = $12; //@line 28295
    $253 = $ReallocAsyncCtx22 + 12 | 0; //@line 28296
    HEAP32[$253 >> 2] = $56; //@line 28297
    $254 = $ReallocAsyncCtx22 + 16 | 0; //@line 28298
    HEAP32[$254 >> 2] = $32; //@line 28299
    sp = STACKTOP; //@line 28300
    return;
   }
   ___async_unwind = 0; //@line 28303
   HEAP32[$ReallocAsyncCtx22 >> 2] = 392; //@line 28304
   $251 = $ReallocAsyncCtx22 + 4 | 0; //@line 28305
   HEAP32[$251 >> 2] = $10; //@line 28306
   $252 = $ReallocAsyncCtx22 + 8 | 0; //@line 28307
   HEAP32[$252 >> 2] = $12; //@line 28308
   $253 = $ReallocAsyncCtx22 + 12 | 0; //@line 28309
   HEAP32[$253 >> 2] = $56; //@line 28310
   $254 = $ReallocAsyncCtx22 + 16 | 0; //@line 28311
   HEAP32[$254 >> 2] = $32; //@line 28312
   sp = STACKTOP; //@line 28313
   return;
  } else {
   $$3$off0204 = 2; //@line 28316
  }
 }
 $255 = $10 + 944 | 0; //@line 28319
 HEAP8[$255 >> 0] = $$3$off0204 | HEAP8[$255 >> 0] & -7; //@line 28323
 $261 = $10 + 944 | 0; //@line 28324
 HEAP8[$261 >> 0] = HEAP8[$261 >> 0] | 32; //@line 28327
 $264 = HEAP32[$12 >> 2] | 0; //@line 28328
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 28330
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($264, $10 + 996 | 0, 1); //@line 28331
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 395; //@line 28334
  $266 = $ReallocAsyncCtx17 + 4 | 0; //@line 28335
  HEAP32[$266 >> 2] = $56; //@line 28336
  $267 = $ReallocAsyncCtx17 + 8 | 0; //@line 28337
  HEAP32[$267 >> 2] = $32; //@line 28338
  sp = STACKTOP; //@line 28339
  return;
 }
 ___async_unwind = 0; //@line 28342
 HEAP32[$ReallocAsyncCtx17 >> 2] = 395; //@line 28343
 $266 = $ReallocAsyncCtx17 + 4 | 0; //@line 28344
 HEAP32[$266 >> 2] = $56; //@line 28345
 $267 = $ReallocAsyncCtx17 + 8 | 0; //@line 28346
 HEAP32[$267 >> 2] = $32; //@line 28347
 sp = STACKTOP; //@line 28348
 return;
}
function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$3484 = 0, $$$3484700 = 0, $$$4502 = 0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488655 = 0, $$0488657 = 0, $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$5605 = 0, $$561 = 0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa675 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre693 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $101 = 0, $104 = 0, $106 = 0, $11 = 0, $113 = 0, $116 = 0, $124 = 0, $125 = 0, $128 = 0, $130 = 0, $131 = 0, $132 = 0, $138 = 0, $140 = 0, $144 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $160 = 0, $161 = 0, $162 = 0, $174 = 0, $185 = 0, $189 = 0, $190 = 0, $193 = 0, $198 = 0, $199 = 0, $201 = 0, $209 = 0, $212 = 0, $213 = 0, $215 = 0, $217 = 0, $218 = 0, $221 = 0, $225 = 0, $230 = 0, $233 = 0, $236 = 0, $238 = 0, $240 = 0, $242 = 0, $247 = 0, $248 = 0, $251 = 0, $253 = 0, $256 = 0, $259 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $284 = 0, $285 = 0, $289 = 0, $292 = 0, $294 = 0, $296 = 0, $300 = 0, $303 = 0, $304 = 0, $308 = 0, $31 = 0, $318 = 0, $323 = 0, $326 = 0, $327 = 0, $328 = 0, $330 = 0, $335 = 0, $347 = 0, $35 = 0.0, $351 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $369 = 0, $373 = 0, $375 = 0, $378 = 0, $381 = 0, $39 = 0, $41 = 0, $44 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $66 = 0, $68 = 0, $7 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12837
 STACKTOP = STACKTOP + 560 | 0; //@line 12838
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560); //@line 12838
 $6 = sp + 8 | 0; //@line 12839
 $7 = sp; //@line 12840
 $8 = sp + 524 | 0; //@line 12841
 $9 = $8; //@line 12842
 $10 = sp + 512 | 0; //@line 12843
 HEAP32[$7 >> 2] = 0; //@line 12844
 $11 = $10 + 12 | 0; //@line 12845
 ___DOUBLE_BITS_677($1) | 0; //@line 12846
 if ((tempRet0 | 0) < 0) {
  $$0471 = -$1; //@line 12851
  $$0520 = 1; //@line 12851
  $$0521 = 15698; //@line 12851
 } else {
  $$0471 = $1; //@line 12862
  $$0520 = ($4 & 2049 | 0) != 0 & 1; //@line 12862
  $$0521 = ($4 & 2048 | 0) == 0 ? ($4 & 1 | 0) == 0 ? 15699 : 15704 : 15701; //@line 12862
 }
 ___DOUBLE_BITS_677($$0471) | 0; //@line 12864
 do {
  if (0 == 0 & (tempRet0 & 2146435072 | 0) == 2146435072) {
   $27 = ($5 & 32 | 0) != 0; //@line 12873
   $31 = $$0520 + 3 | 0; //@line 12878
   _pad_676($0, 32, $2, $31, $4 & -65537); //@line 12880
   _out_670($0, $$0521, $$0520); //@line 12881
   _out_670($0, $$0471 != $$0471 | 0.0 != 0.0 ? $27 ? 15725 : 15729 : $27 ? 15717 : 15721, 3); //@line 12882
   _pad_676($0, 32, $2, $31, $4 ^ 8192); //@line 12884
   $$sink560 = $31; //@line 12885
  } else {
   $35 = +_frexpl($$0471, $7) * 2.0; //@line 12888
   $36 = $35 != 0.0; //@line 12889
   if ($36) {
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1; //@line 12893
   }
   $39 = $5 | 32; //@line 12895
   if (($39 | 0) == 97) {
    $41 = $5 & 32; //@line 12898
    $$0521$ = ($41 | 0) == 0 ? $$0521 : $$0521 + 9 | 0; //@line 12901
    $44 = $$0520 | 2; //@line 12902
    $46 = 12 - $3 | 0; //@line 12904
    do {
     if ($3 >>> 0 > 11 | ($46 | 0) == 0) {
      $$1472 = $35; //@line 12909
     } else {
      $$0509585 = 8.0; //@line 12911
      $$1508586 = $46; //@line 12911
      do {
       $$1508586 = $$1508586 + -1 | 0; //@line 12913
       $$0509585 = $$0509585 * 16.0; //@line 12914
      } while (($$1508586 | 0) != 0);
      if ((HEAP8[$$0521$ >> 0] | 0) == 45) {
       $$1472 = -($$0509585 + (-$35 - $$0509585)); //@line 12929
       break;
      } else {
       $$1472 = $35 + $$0509585 - $$0509585; //@line 12934
       break;
      }
     }
    } while (0);
    $60 = HEAP32[$7 >> 2] | 0; //@line 12939
    $63 = ($60 | 0) < 0 ? 0 - $60 | 0 : $60; //@line 12942
    $66 = _fmt_u($63, (($63 | 0) < 0) << 31 >> 31, $11) | 0; //@line 12945
    if (($66 | 0) == ($11 | 0)) {
     $68 = $10 + 11 | 0; //@line 12948
     HEAP8[$68 >> 0] = 48; //@line 12949
     $$0511 = $68; //@line 12950
    } else {
     $$0511 = $66; //@line 12952
    }
    HEAP8[$$0511 + -1 >> 0] = ($60 >> 31 & 2) + 43; //@line 12959
    $76 = $$0511 + -2 | 0; //@line 12962
    HEAP8[$76 >> 0] = $5 + 15; //@line 12963
    $77 = ($3 | 0) < 1; //@line 12964
    $79 = ($4 & 8 | 0) == 0; //@line 12966
    $$0523 = $8; //@line 12967
    $$2473 = $$1472; //@line 12967
    while (1) {
     $80 = ~~$$2473; //@line 12969
     $86 = $$0523 + 1 | 0; //@line 12975
     HEAP8[$$0523 >> 0] = $41 | HEAPU8[15733 + $80 >> 0]; //@line 12976
     $$2473 = ($$2473 - +($80 | 0)) * 16.0; //@line 12979
     if (($86 - $9 | 0) == 1) {
      if ($79 & ($77 & $$2473 == 0.0)) {
       $$1524 = $86; //@line 12988
      } else {
       HEAP8[$86 >> 0] = 46; //@line 12991
       $$1524 = $$0523 + 2 | 0; //@line 12992
      }
     } else {
      $$1524 = $86; //@line 12995
     }
     if (!($$2473 != 0.0)) {
      break;
     } else {
      $$0523 = $$1524; //@line 12999
     }
    }
    $$pre693 = $$1524; //@line 13005
    if (!$3) {
     label = 24; //@line 13007
    } else {
     if ((-2 - $9 + $$pre693 | 0) < ($3 | 0)) {
      $$pre$phi691Z2D = $$pre693 - $9 | 0; //@line 13015
      $$sink = $3 + 2 | 0; //@line 13015
     } else {
      label = 24; //@line 13017
     }
    }
    if ((label | 0) == 24) {
     $101 = $$pre693 - $9 | 0; //@line 13021
     $$pre$phi691Z2D = $101; //@line 13022
     $$sink = $101; //@line 13022
    }
    $104 = $11 - $76 | 0; //@line 13026
    $106 = $104 + $44 + $$sink | 0; //@line 13028
    _pad_676($0, 32, $2, $106, $4); //@line 13029
    _out_670($0, $$0521$, $44); //@line 13030
    _pad_676($0, 48, $2, $106, $4 ^ 65536); //@line 13032
    _out_670($0, $8, $$pre$phi691Z2D); //@line 13033
    _pad_676($0, 48, $$sink - $$pre$phi691Z2D | 0, 0, 0); //@line 13035
    _out_670($0, $76, $104); //@line 13036
    _pad_676($0, 32, $2, $106, $4 ^ 8192); //@line 13038
    $$sink560 = $106; //@line 13039
    break;
   }
   $$540 = ($3 | 0) < 0 ? 6 : $3; //@line 13043
   if ($36) {
    $113 = (HEAP32[$7 >> 2] | 0) + -28 | 0; //@line 13047
    HEAP32[$7 >> 2] = $113; //@line 13048
    $$3 = $35 * 268435456.0; //@line 13049
    $$pr = $113; //@line 13049
   } else {
    $$3 = $35; //@line 13052
    $$pr = HEAP32[$7 >> 2] | 0; //@line 13052
   }
   $$561 = ($$pr | 0) < 0 ? $6 : $6 + 288 | 0; //@line 13056
   $$0498 = $$561; //@line 13057
   $$4 = $$3; //@line 13057
   do {
    $116 = ~~$$4 >>> 0; //@line 13059
    HEAP32[$$0498 >> 2] = $116; //@line 13060
    $$0498 = $$0498 + 4 | 0; //@line 13061
    $$4 = ($$4 - +($116 >>> 0)) * 1.0e9; //@line 13064
   } while ($$4 != 0.0);
   if (($$pr | 0) > 0) {
    $$1482663 = $$561; //@line 13074
    $$1499662 = $$0498; //@line 13074
    $124 = $$pr; //@line 13074
    while (1) {
     $125 = ($124 | 0) < 29 ? $124 : 29; //@line 13077
     $$0488655 = $$1499662 + -4 | 0; //@line 13078
     if ($$0488655 >>> 0 < $$1482663 >>> 0) {
      $$2483$ph = $$1482663; //@line 13081
     } else {
      $$0488657 = $$0488655; //@line 13083
      $$0497656 = 0; //@line 13083
      do {
       $128 = _bitshift64Shl(HEAP32[$$0488657 >> 2] | 0, 0, $125 | 0) | 0; //@line 13086
       $130 = _i64Add($128 | 0, tempRet0 | 0, $$0497656 | 0, 0) | 0; //@line 13088
       $131 = tempRet0; //@line 13089
       $132 = ___uremdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 13090
       HEAP32[$$0488657 >> 2] = $132; //@line 13092
       $$0497656 = ___udivdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 13093
       $$0488657 = $$0488657 + -4 | 0; //@line 13095
      } while ($$0488657 >>> 0 >= $$1482663 >>> 0);
      if (!$$0497656) {
       $$2483$ph = $$1482663; //@line 13105
      } else {
       $138 = $$1482663 + -4 | 0; //@line 13107
       HEAP32[$138 >> 2] = $$0497656; //@line 13108
       $$2483$ph = $138; //@line 13109
      }
     }
     $$2500 = $$1499662; //@line 13112
     while (1) {
      if ($$2500 >>> 0 <= $$2483$ph >>> 0) {
       break;
      }
      $140 = $$2500 + -4 | 0; //@line 13118
      if (!(HEAP32[$140 >> 2] | 0)) {
       $$2500 = $140; //@line 13122
      } else {
       break;
      }
     }
     $144 = (HEAP32[$7 >> 2] | 0) - $125 | 0; //@line 13128
     HEAP32[$7 >> 2] = $144; //@line 13129
     if (($144 | 0) > 0) {
      $$1482663 = $$2483$ph; //@line 13132
      $$1499662 = $$2500; //@line 13132
      $124 = $144; //@line 13132
     } else {
      $$1482$lcssa = $$2483$ph; //@line 13134
      $$1499$lcssa = $$2500; //@line 13134
      $$pr566 = $144; //@line 13134
      break;
     }
    }
   } else {
    $$1482$lcssa = $$561; //@line 13139
    $$1499$lcssa = $$0498; //@line 13139
    $$pr566 = $$pr; //@line 13139
   }
   if (($$pr566 | 0) < 0) {
    $149 = (($$540 + 25 | 0) / 9 | 0) + 1 | 0; //@line 13145
    $150 = ($39 | 0) == 102; //@line 13146
    $$3484650 = $$1482$lcssa; //@line 13147
    $$3501649 = $$1499$lcssa; //@line 13147
    $152 = $$pr566; //@line 13147
    while (1) {
     $151 = 0 - $152 | 0; //@line 13149
     $154 = ($151 | 0) < 9 ? $151 : 9; //@line 13151
     if ($$3484650 >>> 0 < $$3501649 >>> 0) {
      $160 = (1 << $154) + -1 | 0; //@line 13155
      $161 = 1e9 >>> $154; //@line 13156
      $$0487644 = 0; //@line 13157
      $$1489643 = $$3484650; //@line 13157
      do {
       $162 = HEAP32[$$1489643 >> 2] | 0; //@line 13159
       HEAP32[$$1489643 >> 2] = ($162 >>> $154) + $$0487644; //@line 13163
       $$0487644 = Math_imul($162 & $160, $161) | 0; //@line 13164
       $$1489643 = $$1489643 + 4 | 0; //@line 13165
      } while ($$1489643 >>> 0 < $$3501649 >>> 0);
      $$$3484 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 13176
      if (!$$0487644) {
       $$$3484700 = $$$3484; //@line 13179
       $$4502 = $$3501649; //@line 13179
      } else {
       HEAP32[$$3501649 >> 2] = $$0487644; //@line 13182
       $$$3484700 = $$$3484; //@line 13183
       $$4502 = $$3501649 + 4 | 0; //@line 13183
      }
     } else {
      $$$3484700 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 13190
      $$4502 = $$3501649; //@line 13190
     }
     $174 = $150 ? $$561 : $$$3484700; //@line 13192
     $$$4502 = ($$4502 - $174 >> 2 | 0) > ($149 | 0) ? $174 + ($149 << 2) | 0 : $$4502; //@line 13199
     $152 = (HEAP32[$7 >> 2] | 0) + $154 | 0; //@line 13201
     HEAP32[$7 >> 2] = $152; //@line 13202
     if (($152 | 0) >= 0) {
      $$3484$lcssa = $$$3484700; //@line 13207
      $$3501$lcssa = $$$4502; //@line 13207
      break;
     } else {
      $$3484650 = $$$3484700; //@line 13205
      $$3501649 = $$$4502; //@line 13205
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa; //@line 13212
    $$3501$lcssa = $$1499$lcssa; //@line 13212
   }
   $185 = $$561; //@line 13215
   if ($$3484$lcssa >>> 0 < $$3501$lcssa >>> 0) {
    $189 = ($185 - $$3484$lcssa >> 2) * 9 | 0; //@line 13220
    $190 = HEAP32[$$3484$lcssa >> 2] | 0; //@line 13221
    if ($190 >>> 0 < 10) {
     $$1515 = $189; //@line 13224
    } else {
     $$0514639 = $189; //@line 13226
     $$0530638 = 10; //@line 13226
     while (1) {
      $$0530638 = $$0530638 * 10 | 0; //@line 13228
      $193 = $$0514639 + 1 | 0; //@line 13229
      if ($190 >>> 0 < $$0530638 >>> 0) {
       $$1515 = $193; //@line 13232
       break;
      } else {
       $$0514639 = $193; //@line 13235
      }
     }
    }
   } else {
    $$1515 = 0; //@line 13240
   }
   $198 = ($39 | 0) == 103; //@line 13245
   $199 = ($$540 | 0) != 0; //@line 13246
   $201 = $$540 - (($39 | 0) != 102 ? $$1515 : 0) + (($199 & $198) << 31 >> 31) | 0; //@line 13249
   if (($201 | 0) < ((($$3501$lcssa - $185 >> 2) * 9 | 0) + -9 | 0)) {
    $209 = $201 + 9216 | 0; //@line 13258
    $212 = $$561 + 4 + ((($209 | 0) / 9 | 0) + -1024 << 2) | 0; //@line 13261
    $213 = ($209 | 0) % 9 | 0; //@line 13262
    if (($213 | 0) < 8) {
     $$0527$in633 = $213; //@line 13265
     $$1531632 = 10; //@line 13265
     while (1) {
      $215 = $$1531632 * 10 | 0; //@line 13268
      if (($$0527$in633 | 0) < 7) {
       $$0527$in633 = $$0527$in633 + 1 | 0; //@line 13271
       $$1531632 = $215; //@line 13271
      } else {
       $$1531$lcssa = $215; //@line 13273
       break;
      }
     }
    } else {
     $$1531$lcssa = 10; //@line 13278
    }
    $217 = HEAP32[$212 >> 2] | 0; //@line 13280
    $218 = ($217 >>> 0) % ($$1531$lcssa >>> 0) | 0; //@line 13281
    $221 = ($212 + 4 | 0) == ($$3501$lcssa | 0); //@line 13284
    if ($221 & ($218 | 0) == 0) {
     $$4492 = $212; //@line 13287
     $$4518 = $$1515; //@line 13287
     $$8 = $$3484$lcssa; //@line 13287
    } else {
     $$543 = ((($217 >>> 0) / ($$1531$lcssa >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0; //@line 13292
     $225 = ($$1531$lcssa | 0) / 2 | 0; //@line 13293
     $$$564 = $218 >>> 0 < $225 >>> 0 ? .5 : $221 & ($218 | 0) == ($225 | 0) ? 1.0 : 1.5; //@line 13298
     if (!$$0520) {
      $$1467 = $$$564; //@line 13301
      $$1469 = $$543; //@line 13301
     } else {
      $230 = (HEAP8[$$0521 >> 0] | 0) == 45; //@line 13304
      $$1467 = $230 ? -$$$564 : $$$564; //@line 13309
      $$1469 = $230 ? -$$543 : $$543; //@line 13309
     }
     $233 = $217 - $218 | 0; //@line 13311
     HEAP32[$212 >> 2] = $233; //@line 13312
     if ($$1469 + $$1467 != $$1469) {
      $236 = $233 + $$1531$lcssa | 0; //@line 13316
      HEAP32[$212 >> 2] = $236; //@line 13317
      if ($236 >>> 0 > 999999999) {
       $$5486626 = $$3484$lcssa; //@line 13320
       $$sink547625 = $212; //@line 13320
       while (1) {
        $238 = $$sink547625 + -4 | 0; //@line 13322
        HEAP32[$$sink547625 >> 2] = 0; //@line 13323
        if ($238 >>> 0 < $$5486626 >>> 0) {
         $240 = $$5486626 + -4 | 0; //@line 13326
         HEAP32[$240 >> 2] = 0; //@line 13327
         $$6 = $240; //@line 13328
        } else {
         $$6 = $$5486626; //@line 13330
        }
        $242 = (HEAP32[$238 >> 2] | 0) + 1 | 0; //@line 13333
        HEAP32[$238 >> 2] = $242; //@line 13334
        if ($242 >>> 0 > 999999999) {
         $$5486626 = $$6; //@line 13337
         $$sink547625 = $238; //@line 13337
        } else {
         $$5486$lcssa = $$6; //@line 13339
         $$sink547$lcssa = $238; //@line 13339
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa; //@line 13344
       $$sink547$lcssa = $212; //@line 13344
      }
      $247 = ($185 - $$5486$lcssa >> 2) * 9 | 0; //@line 13349
      $248 = HEAP32[$$5486$lcssa >> 2] | 0; //@line 13350
      if ($248 >>> 0 < 10) {
       $$4492 = $$sink547$lcssa; //@line 13353
       $$4518 = $247; //@line 13353
       $$8 = $$5486$lcssa; //@line 13353
      } else {
       $$2516621 = $247; //@line 13355
       $$2532620 = 10; //@line 13355
       while (1) {
        $$2532620 = $$2532620 * 10 | 0; //@line 13357
        $251 = $$2516621 + 1 | 0; //@line 13358
        if ($248 >>> 0 < $$2532620 >>> 0) {
         $$4492 = $$sink547$lcssa; //@line 13361
         $$4518 = $251; //@line 13361
         $$8 = $$5486$lcssa; //@line 13361
         break;
        } else {
         $$2516621 = $251; //@line 13364
        }
       }
      }
     } else {
      $$4492 = $212; //@line 13369
      $$4518 = $$1515; //@line 13369
      $$8 = $$3484$lcssa; //@line 13369
     }
    }
    $253 = $$4492 + 4 | 0; //@line 13372
    $$5519$ph = $$4518; //@line 13375
    $$7505$ph = $$3501$lcssa >>> 0 > $253 >>> 0 ? $253 : $$3501$lcssa; //@line 13375
    $$9$ph = $$8; //@line 13375
   } else {
    $$5519$ph = $$1515; //@line 13377
    $$7505$ph = $$3501$lcssa; //@line 13377
    $$9$ph = $$3484$lcssa; //@line 13377
   }
   $$7505 = $$7505$ph; //@line 13379
   while (1) {
    if ($$7505 >>> 0 <= $$9$ph >>> 0) {
     $$lcssa675 = 0; //@line 13383
     break;
    }
    $256 = $$7505 + -4 | 0; //@line 13386
    if (!(HEAP32[$256 >> 2] | 0)) {
     $$7505 = $256; //@line 13390
    } else {
     $$lcssa675 = 1; //@line 13392
     break;
    }
   }
   $259 = 0 - $$5519$ph | 0; //@line 13396
   do {
    if ($198) {
     $$540$ = $$540 + (($199 ^ 1) & 1) | 0; //@line 13401
     if (($$540$ | 0) > ($$5519$ph | 0) & ($$5519$ph | 0) > -5) {
      $$0479 = $5 + -1 | 0; //@line 13409
      $$2476 = $$540$ + -1 - $$5519$ph | 0; //@line 13409
     } else {
      $$0479 = $5 + -2 | 0; //@line 13413
      $$2476 = $$540$ + -1 | 0; //@line 13413
     }
     $267 = $4 & 8; //@line 13415
     if (!$267) {
      if ($$lcssa675) {
       $270 = HEAP32[$$7505 + -4 >> 2] | 0; //@line 13420
       if (!$270) {
        $$2529 = 9; //@line 13423
       } else {
        if (!(($270 >>> 0) % 10 | 0)) {
         $$1528617 = 0; //@line 13428
         $$3533616 = 10; //@line 13428
         while (1) {
          $$3533616 = $$3533616 * 10 | 0; //@line 13430
          $275 = $$1528617 + 1 | 0; //@line 13431
          if (($270 >>> 0) % ($$3533616 >>> 0) | 0 | 0) {
           $$2529 = $275; //@line 13437
           break;
          } else {
           $$1528617 = $275; //@line 13435
          }
         }
        } else {
         $$2529 = 0; //@line 13442
        }
       }
      } else {
       $$2529 = 9; //@line 13446
      }
      $284 = (($$7505 - $185 >> 2) * 9 | 0) + -9 | 0; //@line 13454
      if (($$0479 | 32 | 0) == 102) {
       $285 = $284 - $$2529 | 0; //@line 13456
       $$548 = ($285 | 0) > 0 ? $285 : 0; //@line 13458
       $$1480 = $$0479; //@line 13461
       $$3477 = ($$2476 | 0) < ($$548 | 0) ? $$2476 : $$548; //@line 13461
       $$pre$phi698Z2D = 0; //@line 13461
       break;
      } else {
       $289 = $284 + $$5519$ph - $$2529 | 0; //@line 13465
       $$550 = ($289 | 0) > 0 ? $289 : 0; //@line 13467
       $$1480 = $$0479; //@line 13470
       $$3477 = ($$2476 | 0) < ($$550 | 0) ? $$2476 : $$550; //@line 13470
       $$pre$phi698Z2D = 0; //@line 13470
       break;
      }
     } else {
      $$1480 = $$0479; //@line 13474
      $$3477 = $$2476; //@line 13474
      $$pre$phi698Z2D = $267; //@line 13474
     }
    } else {
     $$1480 = $5; //@line 13478
     $$3477 = $$540; //@line 13478
     $$pre$phi698Z2D = $4 & 8; //@line 13478
    }
   } while (0);
   $292 = $$3477 | $$pre$phi698Z2D; //@line 13481
   $294 = ($292 | 0) != 0 & 1; //@line 13483
   $296 = ($$1480 | 32 | 0) == 102; //@line 13485
   if ($296) {
    $$2513 = 0; //@line 13489
    $$pn = ($$5519$ph | 0) > 0 ? $$5519$ph : 0; //@line 13489
   } else {
    $300 = ($$5519$ph | 0) < 0 ? $259 : $$5519$ph; //@line 13492
    $303 = _fmt_u($300, (($300 | 0) < 0) << 31 >> 31, $11) | 0; //@line 13495
    $304 = $11; //@line 13496
    if (($304 - $303 | 0) < 2) {
     $$1512610 = $303; //@line 13501
     while (1) {
      $308 = $$1512610 + -1 | 0; //@line 13503
      HEAP8[$308 >> 0] = 48; //@line 13504
      if (($304 - $308 | 0) < 2) {
       $$1512610 = $308; //@line 13509
      } else {
       $$1512$lcssa = $308; //@line 13511
       break;
      }
     }
    } else {
     $$1512$lcssa = $303; //@line 13516
    }
    HEAP8[$$1512$lcssa + -1 >> 0] = ($$5519$ph >> 31 & 2) + 43; //@line 13523
    $318 = $$1512$lcssa + -2 | 0; //@line 13525
    HEAP8[$318 >> 0] = $$1480; //@line 13526
    $$2513 = $318; //@line 13529
    $$pn = $304 - $318 | 0; //@line 13529
   }
   $323 = $$0520 + 1 + $$3477 + $294 + $$pn | 0; //@line 13534
   _pad_676($0, 32, $2, $323, $4); //@line 13535
   _out_670($0, $$0521, $$0520); //@line 13536
   _pad_676($0, 48, $2, $323, $4 ^ 65536); //@line 13538
   if ($296) {
    $$0496$$9 = $$9$ph >>> 0 > $$561 >>> 0 ? $$561 : $$9$ph; //@line 13541
    $326 = $8 + 9 | 0; //@line 13542
    $327 = $326; //@line 13543
    $328 = $8 + 8 | 0; //@line 13544
    $$5493600 = $$0496$$9; //@line 13545
    do {
     $330 = _fmt_u(HEAP32[$$5493600 >> 2] | 0, 0, $326) | 0; //@line 13548
     if (($$5493600 | 0) == ($$0496$$9 | 0)) {
      if (($330 | 0) == ($326 | 0)) {
       HEAP8[$328 >> 0] = 48; //@line 13553
       $$1465 = $328; //@line 13554
      } else {
       $$1465 = $330; //@line 13556
      }
     } else {
      if ($330 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $330 - $9 | 0) | 0; //@line 13563
       $$0464597 = $330; //@line 13564
       while (1) {
        $335 = $$0464597 + -1 | 0; //@line 13566
        if ($335 >>> 0 > $8 >>> 0) {
         $$0464597 = $335; //@line 13569
        } else {
         $$1465 = $335; //@line 13571
         break;
        }
       }
      } else {
       $$1465 = $330; //@line 13576
      }
     }
     _out_670($0, $$1465, $327 - $$1465 | 0); //@line 13581
     $$5493600 = $$5493600 + 4 | 0; //@line 13582
    } while ($$5493600 >>> 0 <= $$561 >>> 0);
    if ($292 | 0) {
     _out_670($0, 15749, 1); //@line 13592
    }
    if ($$5493600 >>> 0 < $$7505 >>> 0 & ($$3477 | 0) > 0) {
     $$4478593 = $$3477; //@line 13598
     $$6494592 = $$5493600; //@line 13598
     while (1) {
      $347 = _fmt_u(HEAP32[$$6494592 >> 2] | 0, 0, $326) | 0; //@line 13601
      if ($347 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $347 - $9 | 0) | 0; //@line 13606
       $$0463587 = $347; //@line 13607
       while (1) {
        $351 = $$0463587 + -1 | 0; //@line 13609
        if ($351 >>> 0 > $8 >>> 0) {
         $$0463587 = $351; //@line 13612
        } else {
         $$0463$lcssa = $351; //@line 13614
         break;
        }
       }
      } else {
       $$0463$lcssa = $347; //@line 13619
      }
      _out_670($0, $$0463$lcssa, ($$4478593 | 0) < 9 ? $$4478593 : 9); //@line 13623
      $$6494592 = $$6494592 + 4 | 0; //@line 13624
      $356 = $$4478593 + -9 | 0; //@line 13625
      if (!($$6494592 >>> 0 < $$7505 >>> 0 & ($$4478593 | 0) > 9)) {
       $$4478$lcssa = $356; //@line 13632
       break;
      } else {
       $$4478593 = $356; //@line 13630
      }
     }
    } else {
     $$4478$lcssa = $$3477; //@line 13637
    }
    _pad_676($0, 48, $$4478$lcssa + 9 | 0, 9, 0); //@line 13640
   } else {
    $$7505$ = $$lcssa675 ? $$7505 : $$9$ph + 4 | 0; //@line 13643
    if (($$3477 | 0) > -1) {
     $363 = $8 + 9 | 0; //@line 13646
     $364 = ($$pre$phi698Z2D | 0) == 0; //@line 13647
     $365 = $363; //@line 13648
     $366 = 0 - $9 | 0; //@line 13649
     $367 = $8 + 8 | 0; //@line 13650
     $$5605 = $$3477; //@line 13651
     $$7495604 = $$9$ph; //@line 13651
     while (1) {
      $369 = _fmt_u(HEAP32[$$7495604 >> 2] | 0, 0, $363) | 0; //@line 13654
      if (($369 | 0) == ($363 | 0)) {
       HEAP8[$367 >> 0] = 48; //@line 13657
       $$0 = $367; //@line 13658
      } else {
       $$0 = $369; //@line 13660
      }
      do {
       if (($$7495604 | 0) == ($$9$ph | 0)) {
        $375 = $$0 + 1 | 0; //@line 13665
        _out_670($0, $$0, 1); //@line 13666
        if ($364 & ($$5605 | 0) < 1) {
         $$2 = $375; //@line 13670
         break;
        }
        _out_670($0, 15749, 1); //@line 13673
        $$2 = $375; //@line 13674
       } else {
        if ($$0 >>> 0 <= $8 >>> 0) {
         $$2 = $$0; //@line 13678
         break;
        }
        _memset($8 | 0, 48, $$0 + $366 | 0) | 0; //@line 13683
        $$1601 = $$0; //@line 13684
        while (1) {
         $373 = $$1601 + -1 | 0; //@line 13686
         if ($373 >>> 0 > $8 >>> 0) {
          $$1601 = $373; //@line 13689
         } else {
          $$2 = $373; //@line 13691
          break;
         }
        }
       }
      } while (0);
      $378 = $365 - $$2 | 0; //@line 13698
      _out_670($0, $$2, ($$5605 | 0) > ($378 | 0) ? $378 : $$5605); //@line 13701
      $381 = $$5605 - $378 | 0; //@line 13702
      $$7495604 = $$7495604 + 4 | 0; //@line 13703
      if (!($$7495604 >>> 0 < $$7505$ >>> 0 & ($381 | 0) > -1)) {
       $$5$lcssa = $381; //@line 13710
       break;
      } else {
       $$5605 = $381; //@line 13708
      }
     }
    } else {
     $$5$lcssa = $$3477; //@line 13715
    }
    _pad_676($0, 48, $$5$lcssa + 18 | 0, 18, 0); //@line 13718
    _out_670($0, $$2513, $11 - $$2513 | 0); //@line 13722
   }
   _pad_676($0, 32, $2, $323, $4 ^ 8192); //@line 13725
   $$sink560 = $323; //@line 13726
  }
 } while (0);
 STACKTOP = sp; //@line 13731
 return (($$sink560 | 0) < ($2 | 0) ? $2 : $$sink560) | 0; //@line 13731
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_429($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $105 = 0, $106 = 0, $108 = 0, $109 = 0, $110 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $158 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $169 = 0, $170 = 0, $172 = 0, $173 = 0, $174 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $186 = 0, $190 = 0, $191 = 0, $193 = 0, $194 = 0, $195 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $37 = 0, $4 = 0, $45 = 0, $49 = 0, $55 = 0, $58 = 0, $6 = 0, $61 = 0, $63 = 0, $64 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 24550
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24552
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24554
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24556
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24558
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24560
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24562
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24564
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24566
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 24568
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 24570
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 24572
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 24574
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 24576
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 24578
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 24580
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 24582
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  HEAP8[$2 >> 0] = HEAP8[$2 >> 0] & -33; //@line 24589
 } else {
  $37 = $4 + 288 | 0; //@line 24591
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($37) | 0) + 4 >> 2] = 9; //@line 24594
  __ZN14LoRaMacCommand20clear_command_bufferEv($4 + 4 | 0); //@line 24596
  HEAP32[$24 >> 2] = HEAP32[$24 >> 2] & -2; //@line 24599
  HEAP8[$26 >> 0] = 0; //@line 24600
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($37) | 0) + 10 >> 0] = 0; //@line 24603
  $45 = HEAP8[$28 >> 0] | 0; //@line 24604
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($37) | 0) + 11 >> 0] = $45; //@line 24607
  $49 = HEAP8[$4 + 1097 >> 0] | 0; //@line 24609
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($37) | 0) + 8 >> 0] = $49; //@line 24612
  if (!(HEAP8[$4 + 370 >> 0] | 0)) {
   $55 = $4 + 956 | 0; //@line 24617
   HEAP32[$55 >> 2] = (HEAP32[$55 >> 2] | 0) + 1; //@line 24620
  }
 }
 $58 = HEAP32[$24 >> 2] | 0; //@line 24623
 $61 = $58 & -3; //@line 24626
 if (!($58 & 2)) {
  $63 = $58; //@line 24628
 } else {
  HEAP32[$24 >> 2] = $61; //@line 24630
  $63 = $61; //@line 24631
 }
 if ($63 | 0) {
  $148 = HEAP32[$30 >> 2] | 0; //@line 24635
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 24636
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($148, $32, 1e3); //@line 24637
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 458; //@line 24640
   $149 = $ReallocAsyncCtx8 + 4 | 0; //@line 24641
   HEAP32[$149 >> 2] = $2; //@line 24642
   $150 = $ReallocAsyncCtx8 + 8 | 0; //@line 24643
   HEAP32[$150 >> 2] = $4; //@line 24644
   $151 = $ReallocAsyncCtx8 + 12 | 0; //@line 24645
   HEAP32[$151 >> 2] = $6; //@line 24646
   $152 = $ReallocAsyncCtx8 + 16 | 0; //@line 24647
   HEAP32[$152 >> 2] = $8; //@line 24648
   $153 = $ReallocAsyncCtx8 + 20 | 0; //@line 24649
   HEAP32[$153 >> 2] = $10; //@line 24650
   $154 = $ReallocAsyncCtx8 + 24 | 0; //@line 24651
   HEAP32[$154 >> 2] = $12; //@line 24652
   $155 = $ReallocAsyncCtx8 + 28 | 0; //@line 24653
   HEAP32[$155 >> 2] = $14; //@line 24654
   sp = STACKTOP; //@line 24655
   return;
  }
  ___async_unwind = 0; //@line 24658
  HEAP32[$ReallocAsyncCtx8 >> 2] = 458; //@line 24659
  $149 = $ReallocAsyncCtx8 + 4 | 0; //@line 24660
  HEAP32[$149 >> 2] = $2; //@line 24661
  $150 = $ReallocAsyncCtx8 + 8 | 0; //@line 24662
  HEAP32[$150 >> 2] = $4; //@line 24663
  $151 = $ReallocAsyncCtx8 + 12 | 0; //@line 24664
  HEAP32[$151 >> 2] = $6; //@line 24665
  $152 = $ReallocAsyncCtx8 + 16 | 0; //@line 24666
  HEAP32[$152 >> 2] = $8; //@line 24667
  $153 = $ReallocAsyncCtx8 + 20 | 0; //@line 24668
  HEAP32[$153 >> 2] = $10; //@line 24669
  $154 = $ReallocAsyncCtx8 + 24 | 0; //@line 24670
  HEAP32[$154 >> 2] = $12; //@line 24671
  $155 = $ReallocAsyncCtx8 + 28 | 0; //@line 24672
  HEAP32[$155 >> 2] = $14; //@line 24673
  sp = STACKTOP; //@line 24674
  return;
 }
 $64 = HEAP8[$2 >> 0] | 0; //@line 24677
 if ($64 & 1) {
  HEAP8[$2 >> 0] = $64 & -2; //@line 24682
  $69 = HEAP32[$4 + 1324 >> 2] | 0; //@line 24684
  $71 = __ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0; //@line 24686
  $72 = $69 + 12 | 0; //@line 24687
  $73 = HEAP32[$72 >> 2] | 0; //@line 24688
  if (!$73) {
   $ReallocAsyncCtx18 = _emscripten_realloc_async_context(60) | 0; //@line 24691
   _mbed_assert_internal(14997, 15002, 1102); //@line 24692
   if (___async) {
    HEAP32[$ReallocAsyncCtx18 >> 2] = 453; //@line 24695
    $75 = $ReallocAsyncCtx18 + 4 | 0; //@line 24696
    HEAP32[$75 >> 2] = $72; //@line 24697
    $76 = $ReallocAsyncCtx18 + 8 | 0; //@line 24698
    HEAP32[$76 >> 2] = $2; //@line 24699
    $77 = $ReallocAsyncCtx18 + 12 | 0; //@line 24700
    HEAP32[$77 >> 2] = $4; //@line 24701
    $78 = $ReallocAsyncCtx18 + 16 | 0; //@line 24702
    HEAP32[$78 >> 2] = $6; //@line 24703
    $79 = $ReallocAsyncCtx18 + 20 | 0; //@line 24704
    HEAP32[$79 >> 2] = $8; //@line 24705
    $80 = $ReallocAsyncCtx18 + 24 | 0; //@line 24706
    HEAP32[$80 >> 2] = $10; //@line 24707
    $81 = $ReallocAsyncCtx18 + 28 | 0; //@line 24708
    HEAP32[$81 >> 2] = $12; //@line 24709
    $82 = $ReallocAsyncCtx18 + 32 | 0; //@line 24710
    HEAP32[$82 >> 2] = $14; //@line 24711
    $83 = $ReallocAsyncCtx18 + 36 | 0; //@line 24712
    HEAP32[$83 >> 2] = $16; //@line 24713
    $84 = $ReallocAsyncCtx18 + 40 | 0; //@line 24714
    HEAP32[$84 >> 2] = $18; //@line 24715
    $85 = $ReallocAsyncCtx18 + 44 | 0; //@line 24716
    HEAP32[$85 >> 2] = $20; //@line 24717
    $86 = $ReallocAsyncCtx18 + 48 | 0; //@line 24718
    HEAP32[$86 >> 2] = $22; //@line 24719
    $87 = $ReallocAsyncCtx18 + 52 | 0; //@line 24720
    HEAP32[$87 >> 2] = $69; //@line 24721
    $88 = $ReallocAsyncCtx18 + 56 | 0; //@line 24722
    HEAP32[$88 >> 2] = $71; //@line 24723
    sp = STACKTOP; //@line 24724
    return;
   }
   ___async_unwind = 0; //@line 24727
   HEAP32[$ReallocAsyncCtx18 >> 2] = 453; //@line 24728
   $75 = $ReallocAsyncCtx18 + 4 | 0; //@line 24729
   HEAP32[$75 >> 2] = $72; //@line 24730
   $76 = $ReallocAsyncCtx18 + 8 | 0; //@line 24731
   HEAP32[$76 >> 2] = $2; //@line 24732
   $77 = $ReallocAsyncCtx18 + 12 | 0; //@line 24733
   HEAP32[$77 >> 2] = $4; //@line 24734
   $78 = $ReallocAsyncCtx18 + 16 | 0; //@line 24735
   HEAP32[$78 >> 2] = $6; //@line 24736
   $79 = $ReallocAsyncCtx18 + 20 | 0; //@line 24737
   HEAP32[$79 >> 2] = $8; //@line 24738
   $80 = $ReallocAsyncCtx18 + 24 | 0; //@line 24739
   HEAP32[$80 >> 2] = $10; //@line 24740
   $81 = $ReallocAsyncCtx18 + 28 | 0; //@line 24741
   HEAP32[$81 >> 2] = $12; //@line 24742
   $82 = $ReallocAsyncCtx18 + 32 | 0; //@line 24743
   HEAP32[$82 >> 2] = $14; //@line 24744
   $83 = $ReallocAsyncCtx18 + 36 | 0; //@line 24745
   HEAP32[$83 >> 2] = $16; //@line 24746
   $84 = $ReallocAsyncCtx18 + 40 | 0; //@line 24747
   HEAP32[$84 >> 2] = $18; //@line 24748
   $85 = $ReallocAsyncCtx18 + 44 | 0; //@line 24749
   HEAP32[$85 >> 2] = $20; //@line 24750
   $86 = $ReallocAsyncCtx18 + 48 | 0; //@line 24751
   HEAP32[$86 >> 2] = $22; //@line 24752
   $87 = $ReallocAsyncCtx18 + 52 | 0; //@line 24753
   HEAP32[$87 >> 2] = $69; //@line 24754
   $88 = $ReallocAsyncCtx18 + 56 | 0; //@line 24755
   HEAP32[$88 >> 2] = $71; //@line 24756
   sp = STACKTOP; //@line 24757
   return;
  } else {
   $89 = HEAP32[$73 >> 2] | 0; //@line 24760
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(48) | 0; //@line 24761
   FUNCTION_TABLE_vii[$89 & 31]($69, $71); //@line 24762
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 454; //@line 24765
    $90 = $ReallocAsyncCtx2 + 4 | 0; //@line 24766
    HEAP32[$90 >> 2] = $6; //@line 24767
    $91 = $ReallocAsyncCtx2 + 8 | 0; //@line 24768
    HEAP32[$91 >> 2] = $8; //@line 24769
    $92 = $ReallocAsyncCtx2 + 12 | 0; //@line 24770
    HEAP32[$92 >> 2] = $10; //@line 24771
    $93 = $ReallocAsyncCtx2 + 16 | 0; //@line 24772
    HEAP32[$93 >> 2] = $12; //@line 24773
    $94 = $ReallocAsyncCtx2 + 20 | 0; //@line 24774
    HEAP32[$94 >> 2] = $14; //@line 24775
    $95 = $ReallocAsyncCtx2 + 24 | 0; //@line 24776
    HEAP32[$95 >> 2] = $2; //@line 24777
    $96 = $ReallocAsyncCtx2 + 28 | 0; //@line 24778
    HEAP32[$96 >> 2] = $4; //@line 24779
    $97 = $ReallocAsyncCtx2 + 32 | 0; //@line 24780
    HEAP32[$97 >> 2] = $16; //@line 24781
    $98 = $ReallocAsyncCtx2 + 36 | 0; //@line 24782
    HEAP32[$98 >> 2] = $18; //@line 24783
    $99 = $ReallocAsyncCtx2 + 40 | 0; //@line 24784
    HEAP32[$99 >> 2] = $20; //@line 24785
    $100 = $ReallocAsyncCtx2 + 44 | 0; //@line 24786
    HEAP32[$100 >> 2] = $22; //@line 24787
    sp = STACKTOP; //@line 24788
    return;
   }
   ___async_unwind = 0; //@line 24791
   HEAP32[$ReallocAsyncCtx2 >> 2] = 454; //@line 24792
   $90 = $ReallocAsyncCtx2 + 4 | 0; //@line 24793
   HEAP32[$90 >> 2] = $6; //@line 24794
   $91 = $ReallocAsyncCtx2 + 8 | 0; //@line 24795
   HEAP32[$91 >> 2] = $8; //@line 24796
   $92 = $ReallocAsyncCtx2 + 12 | 0; //@line 24797
   HEAP32[$92 >> 2] = $10; //@line 24798
   $93 = $ReallocAsyncCtx2 + 16 | 0; //@line 24799
   HEAP32[$93 >> 2] = $12; //@line 24800
   $94 = $ReallocAsyncCtx2 + 20 | 0; //@line 24801
   HEAP32[$94 >> 2] = $14; //@line 24802
   $95 = $ReallocAsyncCtx2 + 24 | 0; //@line 24803
   HEAP32[$95 >> 2] = $2; //@line 24804
   $96 = $ReallocAsyncCtx2 + 28 | 0; //@line 24805
   HEAP32[$96 >> 2] = $4; //@line 24806
   $97 = $ReallocAsyncCtx2 + 32 | 0; //@line 24807
   HEAP32[$97 >> 2] = $16; //@line 24808
   $98 = $ReallocAsyncCtx2 + 36 | 0; //@line 24809
   HEAP32[$98 >> 2] = $18; //@line 24810
   $99 = $ReallocAsyncCtx2 + 40 | 0; //@line 24811
   HEAP32[$99 >> 2] = $20; //@line 24812
   $100 = $ReallocAsyncCtx2 + 44 | 0; //@line 24813
   HEAP32[$100 >> 2] = $22; //@line 24814
   sp = STACKTOP; //@line 24815
   return;
  }
 }
 if ($64 & 8) {
  HEAP8[$2 >> 0] = $64 & -9; //@line 24823
  $105 = HEAP32[$4 + 1324 >> 2] | 0; //@line 24825
  $106 = $105 + 32 | 0; //@line 24826
  $108 = __ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0; //@line 24828
  $109 = $105 + 44 | 0; //@line 24829
  $110 = HEAP32[$109 >> 2] | 0; //@line 24830
  if (!$110) {
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(60) | 0; //@line 24833
   _mbed_assert_internal(14997, 15002, 1102); //@line 24834
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 455; //@line 24837
    $112 = $ReallocAsyncCtx17 + 4 | 0; //@line 24838
    HEAP32[$112 >> 2] = $2; //@line 24839
    $113 = $ReallocAsyncCtx17 + 8 | 0; //@line 24840
    HEAP32[$113 >> 2] = $4; //@line 24841
    $114 = $ReallocAsyncCtx17 + 12 | 0; //@line 24842
    HEAP32[$114 >> 2] = $6; //@line 24843
    $115 = $ReallocAsyncCtx17 + 16 | 0; //@line 24844
    HEAP32[$115 >> 2] = $8; //@line 24845
    $116 = $ReallocAsyncCtx17 + 20 | 0; //@line 24846
    HEAP32[$116 >> 2] = $10; //@line 24847
    $117 = $ReallocAsyncCtx17 + 24 | 0; //@line 24848
    HEAP32[$117 >> 2] = $12; //@line 24849
    $118 = $ReallocAsyncCtx17 + 28 | 0; //@line 24850
    HEAP32[$118 >> 2] = $14; //@line 24851
    $119 = $ReallocAsyncCtx17 + 32 | 0; //@line 24852
    HEAP32[$119 >> 2] = $16; //@line 24853
    $120 = $ReallocAsyncCtx17 + 36 | 0; //@line 24854
    HEAP32[$120 >> 2] = $18; //@line 24855
    $121 = $ReallocAsyncCtx17 + 40 | 0; //@line 24856
    HEAP32[$121 >> 2] = $20; //@line 24857
    $122 = $ReallocAsyncCtx17 + 44 | 0; //@line 24858
    HEAP32[$122 >> 2] = $22; //@line 24859
    $123 = $ReallocAsyncCtx17 + 48 | 0; //@line 24860
    HEAP32[$123 >> 2] = $109; //@line 24861
    $124 = $ReallocAsyncCtx17 + 52 | 0; //@line 24862
    HEAP32[$124 >> 2] = $106; //@line 24863
    $125 = $ReallocAsyncCtx17 + 56 | 0; //@line 24864
    HEAP32[$125 >> 2] = $108; //@line 24865
    sp = STACKTOP; //@line 24866
    return;
   }
   ___async_unwind = 0; //@line 24869
   HEAP32[$ReallocAsyncCtx17 >> 2] = 455; //@line 24870
   $112 = $ReallocAsyncCtx17 + 4 | 0; //@line 24871
   HEAP32[$112 >> 2] = $2; //@line 24872
   $113 = $ReallocAsyncCtx17 + 8 | 0; //@line 24873
   HEAP32[$113 >> 2] = $4; //@line 24874
   $114 = $ReallocAsyncCtx17 + 12 | 0; //@line 24875
   HEAP32[$114 >> 2] = $6; //@line 24876
   $115 = $ReallocAsyncCtx17 + 16 | 0; //@line 24877
   HEAP32[$115 >> 2] = $8; //@line 24878
   $116 = $ReallocAsyncCtx17 + 20 | 0; //@line 24879
   HEAP32[$116 >> 2] = $10; //@line 24880
   $117 = $ReallocAsyncCtx17 + 24 | 0; //@line 24881
   HEAP32[$117 >> 2] = $12; //@line 24882
   $118 = $ReallocAsyncCtx17 + 28 | 0; //@line 24883
   HEAP32[$118 >> 2] = $14; //@line 24884
   $119 = $ReallocAsyncCtx17 + 32 | 0; //@line 24885
   HEAP32[$119 >> 2] = $16; //@line 24886
   $120 = $ReallocAsyncCtx17 + 36 | 0; //@line 24887
   HEAP32[$120 >> 2] = $18; //@line 24888
   $121 = $ReallocAsyncCtx17 + 40 | 0; //@line 24889
   HEAP32[$121 >> 2] = $20; //@line 24890
   $122 = $ReallocAsyncCtx17 + 44 | 0; //@line 24891
   HEAP32[$122 >> 2] = $22; //@line 24892
   $123 = $ReallocAsyncCtx17 + 48 | 0; //@line 24893
   HEAP32[$123 >> 2] = $109; //@line 24894
   $124 = $ReallocAsyncCtx17 + 52 | 0; //@line 24895
   HEAP32[$124 >> 2] = $106; //@line 24896
   $125 = $ReallocAsyncCtx17 + 56 | 0; //@line 24897
   HEAP32[$125 >> 2] = $108; //@line 24898
   sp = STACKTOP; //@line 24899
   return;
  } else {
   $126 = HEAP32[$110 >> 2] | 0; //@line 24902
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 24903
   FUNCTION_TABLE_vii[$126 & 31]($106, $108); //@line 24904
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 456; //@line 24907
    $127 = $ReallocAsyncCtx3 + 4 | 0; //@line 24908
    HEAP32[$127 >> 2] = $6; //@line 24909
    $128 = $ReallocAsyncCtx3 + 8 | 0; //@line 24910
    HEAP32[$128 >> 2] = $8; //@line 24911
    $129 = $ReallocAsyncCtx3 + 12 | 0; //@line 24912
    HEAP32[$129 >> 2] = $10; //@line 24913
    $130 = $ReallocAsyncCtx3 + 16 | 0; //@line 24914
    HEAP32[$130 >> 2] = $12; //@line 24915
    $131 = $ReallocAsyncCtx3 + 20 | 0; //@line 24916
    HEAP32[$131 >> 2] = $14; //@line 24917
    $132 = $ReallocAsyncCtx3 + 24 | 0; //@line 24918
    HEAP32[$132 >> 2] = $2; //@line 24919
    $133 = $ReallocAsyncCtx3 + 28 | 0; //@line 24920
    HEAP32[$133 >> 2] = $4; //@line 24921
    $134 = $ReallocAsyncCtx3 + 32 | 0; //@line 24922
    HEAP32[$134 >> 2] = $16; //@line 24923
    $135 = $ReallocAsyncCtx3 + 36 | 0; //@line 24924
    HEAP32[$135 >> 2] = $18; //@line 24925
    $136 = $ReallocAsyncCtx3 + 40 | 0; //@line 24926
    HEAP32[$136 >> 2] = $20; //@line 24927
    $137 = $ReallocAsyncCtx3 + 44 | 0; //@line 24928
    HEAP32[$137 >> 2] = $22; //@line 24929
    sp = STACKTOP; //@line 24930
    return;
   }
   ___async_unwind = 0; //@line 24933
   HEAP32[$ReallocAsyncCtx3 >> 2] = 456; //@line 24934
   $127 = $ReallocAsyncCtx3 + 4 | 0; //@line 24935
   HEAP32[$127 >> 2] = $6; //@line 24936
   $128 = $ReallocAsyncCtx3 + 8 | 0; //@line 24937
   HEAP32[$128 >> 2] = $8; //@line 24938
   $129 = $ReallocAsyncCtx3 + 12 | 0; //@line 24939
   HEAP32[$129 >> 2] = $10; //@line 24940
   $130 = $ReallocAsyncCtx3 + 16 | 0; //@line 24941
   HEAP32[$130 >> 2] = $12; //@line 24942
   $131 = $ReallocAsyncCtx3 + 20 | 0; //@line 24943
   HEAP32[$131 >> 2] = $14; //@line 24944
   $132 = $ReallocAsyncCtx3 + 24 | 0; //@line 24945
   HEAP32[$132 >> 2] = $2; //@line 24946
   $133 = $ReallocAsyncCtx3 + 28 | 0; //@line 24947
   HEAP32[$133 >> 2] = $4; //@line 24948
   $134 = $ReallocAsyncCtx3 + 32 | 0; //@line 24949
   HEAP32[$134 >> 2] = $16; //@line 24950
   $135 = $ReallocAsyncCtx3 + 36 | 0; //@line 24951
   HEAP32[$135 >> 2] = $18; //@line 24952
   $136 = $ReallocAsyncCtx3 + 40 | 0; //@line 24953
   HEAP32[$136 >> 2] = $20; //@line 24954
   $137 = $ReallocAsyncCtx3 + 44 | 0; //@line 24955
   HEAP32[$137 >> 2] = $22; //@line 24956
   sp = STACKTOP; //@line 24957
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($4 + 4 | 0) | 0) {
  _printf(12943, $16) | 0; //@line 24964
  _printf(13090, $20) | 0; //@line 24965
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 24966
  _putchar(10) | 0; //@line 24967
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 457; //@line 24970
   $140 = $ReallocAsyncCtx7 + 4 | 0; //@line 24971
   HEAP32[$140 >> 2] = $2; //@line 24972
   $141 = $ReallocAsyncCtx7 + 8 | 0; //@line 24973
   HEAP32[$141 >> 2] = $4; //@line 24974
   $142 = $ReallocAsyncCtx7 + 12 | 0; //@line 24975
   HEAP32[$142 >> 2] = $6; //@line 24976
   $143 = $ReallocAsyncCtx7 + 16 | 0; //@line 24977
   HEAP32[$143 >> 2] = $8; //@line 24978
   $144 = $ReallocAsyncCtx7 + 20 | 0; //@line 24979
   HEAP32[$144 >> 2] = $10; //@line 24980
   $145 = $ReallocAsyncCtx7 + 24 | 0; //@line 24981
   HEAP32[$145 >> 2] = $12; //@line 24982
   $146 = $ReallocAsyncCtx7 + 28 | 0; //@line 24983
   HEAP32[$146 >> 2] = $14; //@line 24984
   sp = STACKTOP; //@line 24985
   return;
  }
  ___async_unwind = 0; //@line 24988
  HEAP32[$ReallocAsyncCtx7 >> 2] = 457; //@line 24989
  $140 = $ReallocAsyncCtx7 + 4 | 0; //@line 24990
  HEAP32[$140 >> 2] = $2; //@line 24991
  $141 = $ReallocAsyncCtx7 + 8 | 0; //@line 24992
  HEAP32[$141 >> 2] = $4; //@line 24993
  $142 = $ReallocAsyncCtx7 + 12 | 0; //@line 24994
  HEAP32[$142 >> 2] = $6; //@line 24995
  $143 = $ReallocAsyncCtx7 + 16 | 0; //@line 24996
  HEAP32[$143 >> 2] = $8; //@line 24997
  $144 = $ReallocAsyncCtx7 + 20 | 0; //@line 24998
  HEAP32[$144 >> 2] = $10; //@line 24999
  $145 = $ReallocAsyncCtx7 + 24 | 0; //@line 25000
  HEAP32[$145 >> 2] = $12; //@line 25001
  $146 = $ReallocAsyncCtx7 + 28 | 0; //@line 25002
  HEAP32[$146 >> 2] = $14; //@line 25003
  sp = STACKTOP; //@line 25004
  return;
 }
 $147 = HEAP8[$2 >> 0] & -33; //@line 25008
 HEAP8[$2 >> 0] = $147; //@line 25009
 do {
  if (!($147 & 2)) {
   $186 = $147; //@line 25014
  } else {
   $158 = $147 & -3; //@line 25016
   HEAP8[$2 >> 0] = $158; //@line 25017
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _printf(12943, $8) | 0; //@line 25022
    _printf(12970, $12) | 0; //@line 25023
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 25024
    _putchar(10) | 0; //@line 25025
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 459; //@line 25028
     $162 = $ReallocAsyncCtx6 + 4 | 0; //@line 25029
     HEAP32[$162 >> 2] = $2; //@line 25030
     $163 = $ReallocAsyncCtx6 + 8 | 0; //@line 25031
     HEAP32[$163 >> 2] = $4; //@line 25032
     $164 = $ReallocAsyncCtx6 + 12 | 0; //@line 25033
     HEAP32[$164 >> 2] = $6; //@line 25034
     $165 = $ReallocAsyncCtx6 + 16 | 0; //@line 25035
     HEAP32[$165 >> 2] = $6; //@line 25036
     sp = STACKTOP; //@line 25037
     return;
    }
    ___async_unwind = 0; //@line 25040
    HEAP32[$ReallocAsyncCtx6 >> 2] = 459; //@line 25041
    $162 = $ReallocAsyncCtx6 + 4 | 0; //@line 25042
    HEAP32[$162 >> 2] = $2; //@line 25043
    $163 = $ReallocAsyncCtx6 + 8 | 0; //@line 25044
    HEAP32[$163 >> 2] = $4; //@line 25045
    $164 = $ReallocAsyncCtx6 + 12 | 0; //@line 25046
    HEAP32[$164 >> 2] = $6; //@line 25047
    $165 = $ReallocAsyncCtx6 + 16 | 0; //@line 25048
    HEAP32[$165 >> 2] = $6; //@line 25049
    sp = STACKTOP; //@line 25050
    return;
   }
   if ($158 & 4) {
    $184 = $158 & -5; //@line 25056
    HEAP8[$2 >> 0] = $184; //@line 25057
    $186 = $184; //@line 25058
    break;
   }
   $169 = HEAP32[$4 + 1324 >> 2] | 0; //@line 25062
   $170 = $169 + 16 | 0; //@line 25063
   $172 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 25065
   $173 = $169 + 28 | 0; //@line 25066
   $174 = HEAP32[$173 >> 2] | 0; //@line 25067
   if (!$174) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 25070
    _mbed_assert_internal(14997, 15002, 1102); //@line 25071
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 462; //@line 25074
     $176 = $ReallocAsyncCtx15 + 4 | 0; //@line 25075
     HEAP32[$176 >> 2] = $173; //@line 25076
     $177 = $ReallocAsyncCtx15 + 8 | 0; //@line 25077
     HEAP32[$177 >> 2] = $170; //@line 25078
     $178 = $ReallocAsyncCtx15 + 12 | 0; //@line 25079
     HEAP32[$178 >> 2] = $172; //@line 25080
     $179 = $ReallocAsyncCtx15 + 16 | 0; //@line 25081
     HEAP32[$179 >> 2] = $2; //@line 25082
     $180 = $ReallocAsyncCtx15 + 20 | 0; //@line 25083
     HEAP32[$180 >> 2] = $4; //@line 25084
     sp = STACKTOP; //@line 25085
     return;
    }
    ___async_unwind = 0; //@line 25088
    HEAP32[$ReallocAsyncCtx15 >> 2] = 462; //@line 25089
    $176 = $ReallocAsyncCtx15 + 4 | 0; //@line 25090
    HEAP32[$176 >> 2] = $173; //@line 25091
    $177 = $ReallocAsyncCtx15 + 8 | 0; //@line 25092
    HEAP32[$177 >> 2] = $170; //@line 25093
    $178 = $ReallocAsyncCtx15 + 12 | 0; //@line 25094
    HEAP32[$178 >> 2] = $172; //@line 25095
    $179 = $ReallocAsyncCtx15 + 16 | 0; //@line 25096
    HEAP32[$179 >> 2] = $2; //@line 25097
    $180 = $ReallocAsyncCtx15 + 20 | 0; //@line 25098
    HEAP32[$180 >> 2] = $4; //@line 25099
    sp = STACKTOP; //@line 25100
    return;
   } else {
    $181 = HEAP32[$174 >> 2] | 0; //@line 25103
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 25104
    FUNCTION_TABLE_vii[$181 & 31]($170, $172); //@line 25105
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 463; //@line 25108
     $182 = $ReallocAsyncCtx4 + 4 | 0; //@line 25109
     HEAP32[$182 >> 2] = $2; //@line 25110
     $183 = $ReallocAsyncCtx4 + 8 | 0; //@line 25111
     HEAP32[$183 >> 2] = $4; //@line 25112
     sp = STACKTOP; //@line 25113
     return;
    }
    ___async_unwind = 0; //@line 25116
    HEAP32[$ReallocAsyncCtx4 >> 2] = 463; //@line 25117
    $182 = $ReallocAsyncCtx4 + 4 | 0; //@line 25118
    HEAP32[$182 >> 2] = $2; //@line 25119
    $183 = $ReallocAsyncCtx4 + 8 | 0; //@line 25120
    HEAP32[$183 >> 2] = $4; //@line 25121
    sp = STACKTOP; //@line 25122
    return;
   }
  }
 } while (0);
 if (!($186 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $186 & -17; //@line 25133
 $190 = HEAP32[$4 + 1324 >> 2] | 0; //@line 25135
 $191 = $190 + 48 | 0; //@line 25136
 $193 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 25138
 $194 = $190 + 60 | 0; //@line 25139
 $195 = HEAP32[$194 >> 2] | 0; //@line 25140
 if (!$195) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 25143
  _mbed_assert_internal(14997, 15002, 1102); //@line 25144
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 464; //@line 25147
   $197 = $ReallocAsyncCtx14 + 4 | 0; //@line 25148
   HEAP32[$197 >> 2] = $194; //@line 25149
   $198 = $ReallocAsyncCtx14 + 8 | 0; //@line 25150
   HEAP32[$198 >> 2] = $191; //@line 25151
   $199 = $ReallocAsyncCtx14 + 12 | 0; //@line 25152
   HEAP32[$199 >> 2] = $193; //@line 25153
   sp = STACKTOP; //@line 25154
   return;
  }
  ___async_unwind = 0; //@line 25157
  HEAP32[$ReallocAsyncCtx14 >> 2] = 464; //@line 25158
  $197 = $ReallocAsyncCtx14 + 4 | 0; //@line 25159
  HEAP32[$197 >> 2] = $194; //@line 25160
  $198 = $ReallocAsyncCtx14 + 8 | 0; //@line 25161
  HEAP32[$198 >> 2] = $191; //@line 25162
  $199 = $ReallocAsyncCtx14 + 12 | 0; //@line 25163
  HEAP32[$199 >> 2] = $193; //@line 25164
  sp = STACKTOP; //@line 25165
  return;
 } else {
  $200 = HEAP32[$195 >> 2] | 0; //@line 25168
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 25169
  FUNCTION_TABLE_vii[$200 & 31]($191, $193); //@line 25170
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 465; //@line 25173
   sp = STACKTOP; //@line 25174
   return;
  }
  ___async_unwind = 0; //@line 25177
  HEAP32[$ReallocAsyncCtx5 >> 2] = 465; //@line 25178
  sp = STACKTOP; //@line 25179
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $148 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $159 = 0, $16 = 0, $160 = 0, $162 = 0, $163 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $176 = 0, $18 = 0, $180 = 0, $181 = 0, $183 = 0, $184 = 0, $185 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $36 = 0, $39 = 0, $4 = 0, $45 = 0, $48 = 0, $51 = 0, $53 = 0, $54 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $95 = 0, $96 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 22752
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22754
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22756
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22758
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22760
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22762
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22764
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22766
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22768
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22770
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22772
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 22774
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 22776
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 22778
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 22780
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 22782
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 22784
 HEAP32[$16 >> 2] = HEAP32[$16 >> 2] & -2; //@line 22787
 __ZN14LoRaMacCommand20clear_command_bufferEv($14 + 4 | 0); //@line 22789
 HEAP8[$18 >> 0] = 0; //@line 22790
 $36 = $14 + 288 | 0; //@line 22791
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 10 >> 0] = 0; //@line 22794
 $39 = HEAP8[$20 >> 0] | 0; //@line 22795
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 11 >> 0] = $39; //@line 22798
 if (!(HEAP8[$14 + 370 >> 0] | 0)) {
  $45 = $14 + 956 | 0; //@line 22803
  HEAP32[$45 >> 2] = (HEAP32[$45 >> 2] | 0) + 1; //@line 22806
 }
 $48 = HEAP32[$16 >> 2] | 0; //@line 22808
 $51 = $48 & -3; //@line 22811
 if (!($48 & 2)) {
  $53 = $48; //@line 22813
 } else {
  HEAP32[$16 >> 2] = $51; //@line 22815
  $53 = $51; //@line 22816
 }
 if ($53 | 0) {
  $138 = HEAP32[$22 >> 2] | 0; //@line 22820
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 22821
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($138, $24, 1e3); //@line 22822
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 458; //@line 22825
   $139 = $ReallocAsyncCtx8 + 4 | 0; //@line 22826
   HEAP32[$139 >> 2] = $12; //@line 22827
   $140 = $ReallocAsyncCtx8 + 8 | 0; //@line 22828
   HEAP32[$140 >> 2] = $14; //@line 22829
   $141 = $ReallocAsyncCtx8 + 12 | 0; //@line 22830
   HEAP32[$141 >> 2] = $2; //@line 22831
   $142 = $ReallocAsyncCtx8 + 16 | 0; //@line 22832
   HEAP32[$142 >> 2] = $4; //@line 22833
   $143 = $ReallocAsyncCtx8 + 20 | 0; //@line 22834
   HEAP32[$143 >> 2] = $6; //@line 22835
   $144 = $ReallocAsyncCtx8 + 24 | 0; //@line 22836
   HEAP32[$144 >> 2] = $8; //@line 22837
   $145 = $ReallocAsyncCtx8 + 28 | 0; //@line 22838
   HEAP32[$145 >> 2] = $10; //@line 22839
   sp = STACKTOP; //@line 22840
   return;
  }
  ___async_unwind = 0; //@line 22843
  HEAP32[$ReallocAsyncCtx8 >> 2] = 458; //@line 22844
  $139 = $ReallocAsyncCtx8 + 4 | 0; //@line 22845
  HEAP32[$139 >> 2] = $12; //@line 22846
  $140 = $ReallocAsyncCtx8 + 8 | 0; //@line 22847
  HEAP32[$140 >> 2] = $14; //@line 22848
  $141 = $ReallocAsyncCtx8 + 12 | 0; //@line 22849
  HEAP32[$141 >> 2] = $2; //@line 22850
  $142 = $ReallocAsyncCtx8 + 16 | 0; //@line 22851
  HEAP32[$142 >> 2] = $4; //@line 22852
  $143 = $ReallocAsyncCtx8 + 20 | 0; //@line 22853
  HEAP32[$143 >> 2] = $6; //@line 22854
  $144 = $ReallocAsyncCtx8 + 24 | 0; //@line 22855
  HEAP32[$144 >> 2] = $8; //@line 22856
  $145 = $ReallocAsyncCtx8 + 28 | 0; //@line 22857
  HEAP32[$145 >> 2] = $10; //@line 22858
  sp = STACKTOP; //@line 22859
  return;
 }
 $54 = HEAP8[$12 >> 0] | 0; //@line 22862
 if ($54 & 1) {
  HEAP8[$12 >> 0] = $54 & -2; //@line 22867
  $59 = HEAP32[$14 + 1324 >> 2] | 0; //@line 22869
  $61 = __ZN11LoRaMacMcps16get_confirmationEv($14 + 288 | 0) | 0; //@line 22871
  $62 = $59 + 12 | 0; //@line 22872
  $63 = HEAP32[$62 >> 2] | 0; //@line 22873
  if (!$63) {
   $ReallocAsyncCtx18 = _emscripten_realloc_async_context(60) | 0; //@line 22876
   _mbed_assert_internal(14997, 15002, 1102); //@line 22877
   if (___async) {
    HEAP32[$ReallocAsyncCtx18 >> 2] = 453; //@line 22880
    $65 = $ReallocAsyncCtx18 + 4 | 0; //@line 22881
    HEAP32[$65 >> 2] = $62; //@line 22882
    $66 = $ReallocAsyncCtx18 + 8 | 0; //@line 22883
    HEAP32[$66 >> 2] = $12; //@line 22884
    $67 = $ReallocAsyncCtx18 + 12 | 0; //@line 22885
    HEAP32[$67 >> 2] = $14; //@line 22886
    $68 = $ReallocAsyncCtx18 + 16 | 0; //@line 22887
    HEAP32[$68 >> 2] = $2; //@line 22888
    $69 = $ReallocAsyncCtx18 + 20 | 0; //@line 22889
    HEAP32[$69 >> 2] = $4; //@line 22890
    $70 = $ReallocAsyncCtx18 + 24 | 0; //@line 22891
    HEAP32[$70 >> 2] = $6; //@line 22892
    $71 = $ReallocAsyncCtx18 + 28 | 0; //@line 22893
    HEAP32[$71 >> 2] = $8; //@line 22894
    $72 = $ReallocAsyncCtx18 + 32 | 0; //@line 22895
    HEAP32[$72 >> 2] = $10; //@line 22896
    $73 = $ReallocAsyncCtx18 + 36 | 0; //@line 22897
    HEAP32[$73 >> 2] = $26; //@line 22898
    $74 = $ReallocAsyncCtx18 + 40 | 0; //@line 22899
    HEAP32[$74 >> 2] = $28; //@line 22900
    $75 = $ReallocAsyncCtx18 + 44 | 0; //@line 22901
    HEAP32[$75 >> 2] = $30; //@line 22902
    $76 = $ReallocAsyncCtx18 + 48 | 0; //@line 22903
    HEAP32[$76 >> 2] = $32; //@line 22904
    $77 = $ReallocAsyncCtx18 + 52 | 0; //@line 22905
    HEAP32[$77 >> 2] = $59; //@line 22906
    $78 = $ReallocAsyncCtx18 + 56 | 0; //@line 22907
    HEAP32[$78 >> 2] = $61; //@line 22908
    sp = STACKTOP; //@line 22909
    return;
   }
   ___async_unwind = 0; //@line 22912
   HEAP32[$ReallocAsyncCtx18 >> 2] = 453; //@line 22913
   $65 = $ReallocAsyncCtx18 + 4 | 0; //@line 22914
   HEAP32[$65 >> 2] = $62; //@line 22915
   $66 = $ReallocAsyncCtx18 + 8 | 0; //@line 22916
   HEAP32[$66 >> 2] = $12; //@line 22917
   $67 = $ReallocAsyncCtx18 + 12 | 0; //@line 22918
   HEAP32[$67 >> 2] = $14; //@line 22919
   $68 = $ReallocAsyncCtx18 + 16 | 0; //@line 22920
   HEAP32[$68 >> 2] = $2; //@line 22921
   $69 = $ReallocAsyncCtx18 + 20 | 0; //@line 22922
   HEAP32[$69 >> 2] = $4; //@line 22923
   $70 = $ReallocAsyncCtx18 + 24 | 0; //@line 22924
   HEAP32[$70 >> 2] = $6; //@line 22925
   $71 = $ReallocAsyncCtx18 + 28 | 0; //@line 22926
   HEAP32[$71 >> 2] = $8; //@line 22927
   $72 = $ReallocAsyncCtx18 + 32 | 0; //@line 22928
   HEAP32[$72 >> 2] = $10; //@line 22929
   $73 = $ReallocAsyncCtx18 + 36 | 0; //@line 22930
   HEAP32[$73 >> 2] = $26; //@line 22931
   $74 = $ReallocAsyncCtx18 + 40 | 0; //@line 22932
   HEAP32[$74 >> 2] = $28; //@line 22933
   $75 = $ReallocAsyncCtx18 + 44 | 0; //@line 22934
   HEAP32[$75 >> 2] = $30; //@line 22935
   $76 = $ReallocAsyncCtx18 + 48 | 0; //@line 22936
   HEAP32[$76 >> 2] = $32; //@line 22937
   $77 = $ReallocAsyncCtx18 + 52 | 0; //@line 22938
   HEAP32[$77 >> 2] = $59; //@line 22939
   $78 = $ReallocAsyncCtx18 + 56 | 0; //@line 22940
   HEAP32[$78 >> 2] = $61; //@line 22941
   sp = STACKTOP; //@line 22942
   return;
  } else {
   $79 = HEAP32[$63 >> 2] | 0; //@line 22945
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(48) | 0; //@line 22946
   FUNCTION_TABLE_vii[$79 & 31]($59, $61); //@line 22947
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 454; //@line 22950
    $80 = $ReallocAsyncCtx2 + 4 | 0; //@line 22951
    HEAP32[$80 >> 2] = $2; //@line 22952
    $81 = $ReallocAsyncCtx2 + 8 | 0; //@line 22953
    HEAP32[$81 >> 2] = $4; //@line 22954
    $82 = $ReallocAsyncCtx2 + 12 | 0; //@line 22955
    HEAP32[$82 >> 2] = $6; //@line 22956
    $83 = $ReallocAsyncCtx2 + 16 | 0; //@line 22957
    HEAP32[$83 >> 2] = $8; //@line 22958
    $84 = $ReallocAsyncCtx2 + 20 | 0; //@line 22959
    HEAP32[$84 >> 2] = $10; //@line 22960
    $85 = $ReallocAsyncCtx2 + 24 | 0; //@line 22961
    HEAP32[$85 >> 2] = $12; //@line 22962
    $86 = $ReallocAsyncCtx2 + 28 | 0; //@line 22963
    HEAP32[$86 >> 2] = $14; //@line 22964
    $87 = $ReallocAsyncCtx2 + 32 | 0; //@line 22965
    HEAP32[$87 >> 2] = $26; //@line 22966
    $88 = $ReallocAsyncCtx2 + 36 | 0; //@line 22967
    HEAP32[$88 >> 2] = $28; //@line 22968
    $89 = $ReallocAsyncCtx2 + 40 | 0; //@line 22969
    HEAP32[$89 >> 2] = $30; //@line 22970
    $90 = $ReallocAsyncCtx2 + 44 | 0; //@line 22971
    HEAP32[$90 >> 2] = $32; //@line 22972
    sp = STACKTOP; //@line 22973
    return;
   }
   ___async_unwind = 0; //@line 22976
   HEAP32[$ReallocAsyncCtx2 >> 2] = 454; //@line 22977
   $80 = $ReallocAsyncCtx2 + 4 | 0; //@line 22978
   HEAP32[$80 >> 2] = $2; //@line 22979
   $81 = $ReallocAsyncCtx2 + 8 | 0; //@line 22980
   HEAP32[$81 >> 2] = $4; //@line 22981
   $82 = $ReallocAsyncCtx2 + 12 | 0; //@line 22982
   HEAP32[$82 >> 2] = $6; //@line 22983
   $83 = $ReallocAsyncCtx2 + 16 | 0; //@line 22984
   HEAP32[$83 >> 2] = $8; //@line 22985
   $84 = $ReallocAsyncCtx2 + 20 | 0; //@line 22986
   HEAP32[$84 >> 2] = $10; //@line 22987
   $85 = $ReallocAsyncCtx2 + 24 | 0; //@line 22988
   HEAP32[$85 >> 2] = $12; //@line 22989
   $86 = $ReallocAsyncCtx2 + 28 | 0; //@line 22990
   HEAP32[$86 >> 2] = $14; //@line 22991
   $87 = $ReallocAsyncCtx2 + 32 | 0; //@line 22992
   HEAP32[$87 >> 2] = $26; //@line 22993
   $88 = $ReallocAsyncCtx2 + 36 | 0; //@line 22994
   HEAP32[$88 >> 2] = $28; //@line 22995
   $89 = $ReallocAsyncCtx2 + 40 | 0; //@line 22996
   HEAP32[$89 >> 2] = $30; //@line 22997
   $90 = $ReallocAsyncCtx2 + 44 | 0; //@line 22998
   HEAP32[$90 >> 2] = $32; //@line 22999
   sp = STACKTOP; //@line 23000
   return;
  }
 }
 if ($54 & 8) {
  HEAP8[$12 >> 0] = $54 & -9; //@line 23008
  $95 = HEAP32[$14 + 1324 >> 2] | 0; //@line 23010
  $96 = $95 + 32 | 0; //@line 23011
  $98 = __ZN11LoRaMacMlme16get_confirmationEv($14 + 264 | 0) | 0; //@line 23013
  $99 = $95 + 44 | 0; //@line 23014
  $100 = HEAP32[$99 >> 2] | 0; //@line 23015
  if (!$100) {
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(60) | 0; //@line 23018
   _mbed_assert_internal(14997, 15002, 1102); //@line 23019
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 455; //@line 23022
    $102 = $ReallocAsyncCtx17 + 4 | 0; //@line 23023
    HEAP32[$102 >> 2] = $12; //@line 23024
    $103 = $ReallocAsyncCtx17 + 8 | 0; //@line 23025
    HEAP32[$103 >> 2] = $14; //@line 23026
    $104 = $ReallocAsyncCtx17 + 12 | 0; //@line 23027
    HEAP32[$104 >> 2] = $2; //@line 23028
    $105 = $ReallocAsyncCtx17 + 16 | 0; //@line 23029
    HEAP32[$105 >> 2] = $4; //@line 23030
    $106 = $ReallocAsyncCtx17 + 20 | 0; //@line 23031
    HEAP32[$106 >> 2] = $6; //@line 23032
    $107 = $ReallocAsyncCtx17 + 24 | 0; //@line 23033
    HEAP32[$107 >> 2] = $8; //@line 23034
    $108 = $ReallocAsyncCtx17 + 28 | 0; //@line 23035
    HEAP32[$108 >> 2] = $10; //@line 23036
    $109 = $ReallocAsyncCtx17 + 32 | 0; //@line 23037
    HEAP32[$109 >> 2] = $26; //@line 23038
    $110 = $ReallocAsyncCtx17 + 36 | 0; //@line 23039
    HEAP32[$110 >> 2] = $28; //@line 23040
    $111 = $ReallocAsyncCtx17 + 40 | 0; //@line 23041
    HEAP32[$111 >> 2] = $30; //@line 23042
    $112 = $ReallocAsyncCtx17 + 44 | 0; //@line 23043
    HEAP32[$112 >> 2] = $32; //@line 23044
    $113 = $ReallocAsyncCtx17 + 48 | 0; //@line 23045
    HEAP32[$113 >> 2] = $99; //@line 23046
    $114 = $ReallocAsyncCtx17 + 52 | 0; //@line 23047
    HEAP32[$114 >> 2] = $96; //@line 23048
    $115 = $ReallocAsyncCtx17 + 56 | 0; //@line 23049
    HEAP32[$115 >> 2] = $98; //@line 23050
    sp = STACKTOP; //@line 23051
    return;
   }
   ___async_unwind = 0; //@line 23054
   HEAP32[$ReallocAsyncCtx17 >> 2] = 455; //@line 23055
   $102 = $ReallocAsyncCtx17 + 4 | 0; //@line 23056
   HEAP32[$102 >> 2] = $12; //@line 23057
   $103 = $ReallocAsyncCtx17 + 8 | 0; //@line 23058
   HEAP32[$103 >> 2] = $14; //@line 23059
   $104 = $ReallocAsyncCtx17 + 12 | 0; //@line 23060
   HEAP32[$104 >> 2] = $2; //@line 23061
   $105 = $ReallocAsyncCtx17 + 16 | 0; //@line 23062
   HEAP32[$105 >> 2] = $4; //@line 23063
   $106 = $ReallocAsyncCtx17 + 20 | 0; //@line 23064
   HEAP32[$106 >> 2] = $6; //@line 23065
   $107 = $ReallocAsyncCtx17 + 24 | 0; //@line 23066
   HEAP32[$107 >> 2] = $8; //@line 23067
   $108 = $ReallocAsyncCtx17 + 28 | 0; //@line 23068
   HEAP32[$108 >> 2] = $10; //@line 23069
   $109 = $ReallocAsyncCtx17 + 32 | 0; //@line 23070
   HEAP32[$109 >> 2] = $26; //@line 23071
   $110 = $ReallocAsyncCtx17 + 36 | 0; //@line 23072
   HEAP32[$110 >> 2] = $28; //@line 23073
   $111 = $ReallocAsyncCtx17 + 40 | 0; //@line 23074
   HEAP32[$111 >> 2] = $30; //@line 23075
   $112 = $ReallocAsyncCtx17 + 44 | 0; //@line 23076
   HEAP32[$112 >> 2] = $32; //@line 23077
   $113 = $ReallocAsyncCtx17 + 48 | 0; //@line 23078
   HEAP32[$113 >> 2] = $99; //@line 23079
   $114 = $ReallocAsyncCtx17 + 52 | 0; //@line 23080
   HEAP32[$114 >> 2] = $96; //@line 23081
   $115 = $ReallocAsyncCtx17 + 56 | 0; //@line 23082
   HEAP32[$115 >> 2] = $98; //@line 23083
   sp = STACKTOP; //@line 23084
   return;
  } else {
   $116 = HEAP32[$100 >> 2] | 0; //@line 23087
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 23088
   FUNCTION_TABLE_vii[$116 & 31]($96, $98); //@line 23089
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 456; //@line 23092
    $117 = $ReallocAsyncCtx3 + 4 | 0; //@line 23093
    HEAP32[$117 >> 2] = $2; //@line 23094
    $118 = $ReallocAsyncCtx3 + 8 | 0; //@line 23095
    HEAP32[$118 >> 2] = $4; //@line 23096
    $119 = $ReallocAsyncCtx3 + 12 | 0; //@line 23097
    HEAP32[$119 >> 2] = $6; //@line 23098
    $120 = $ReallocAsyncCtx3 + 16 | 0; //@line 23099
    HEAP32[$120 >> 2] = $8; //@line 23100
    $121 = $ReallocAsyncCtx3 + 20 | 0; //@line 23101
    HEAP32[$121 >> 2] = $10; //@line 23102
    $122 = $ReallocAsyncCtx3 + 24 | 0; //@line 23103
    HEAP32[$122 >> 2] = $12; //@line 23104
    $123 = $ReallocAsyncCtx3 + 28 | 0; //@line 23105
    HEAP32[$123 >> 2] = $14; //@line 23106
    $124 = $ReallocAsyncCtx3 + 32 | 0; //@line 23107
    HEAP32[$124 >> 2] = $26; //@line 23108
    $125 = $ReallocAsyncCtx3 + 36 | 0; //@line 23109
    HEAP32[$125 >> 2] = $28; //@line 23110
    $126 = $ReallocAsyncCtx3 + 40 | 0; //@line 23111
    HEAP32[$126 >> 2] = $30; //@line 23112
    $127 = $ReallocAsyncCtx3 + 44 | 0; //@line 23113
    HEAP32[$127 >> 2] = $32; //@line 23114
    sp = STACKTOP; //@line 23115
    return;
   }
   ___async_unwind = 0; //@line 23118
   HEAP32[$ReallocAsyncCtx3 >> 2] = 456; //@line 23119
   $117 = $ReallocAsyncCtx3 + 4 | 0; //@line 23120
   HEAP32[$117 >> 2] = $2; //@line 23121
   $118 = $ReallocAsyncCtx3 + 8 | 0; //@line 23122
   HEAP32[$118 >> 2] = $4; //@line 23123
   $119 = $ReallocAsyncCtx3 + 12 | 0; //@line 23124
   HEAP32[$119 >> 2] = $6; //@line 23125
   $120 = $ReallocAsyncCtx3 + 16 | 0; //@line 23126
   HEAP32[$120 >> 2] = $8; //@line 23127
   $121 = $ReallocAsyncCtx3 + 20 | 0; //@line 23128
   HEAP32[$121 >> 2] = $10; //@line 23129
   $122 = $ReallocAsyncCtx3 + 24 | 0; //@line 23130
   HEAP32[$122 >> 2] = $12; //@line 23131
   $123 = $ReallocAsyncCtx3 + 28 | 0; //@line 23132
   HEAP32[$123 >> 2] = $14; //@line 23133
   $124 = $ReallocAsyncCtx3 + 32 | 0; //@line 23134
   HEAP32[$124 >> 2] = $26; //@line 23135
   $125 = $ReallocAsyncCtx3 + 36 | 0; //@line 23136
   HEAP32[$125 >> 2] = $28; //@line 23137
   $126 = $ReallocAsyncCtx3 + 40 | 0; //@line 23138
   HEAP32[$126 >> 2] = $30; //@line 23139
   $127 = $ReallocAsyncCtx3 + 44 | 0; //@line 23140
   HEAP32[$127 >> 2] = $32; //@line 23141
   sp = STACKTOP; //@line 23142
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($14 + 4 | 0) | 0) {
  _printf(12943, $26) | 0; //@line 23149
  _printf(13090, $30) | 0; //@line 23150
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 23151
  _putchar(10) | 0; //@line 23152
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 457; //@line 23155
   $130 = $ReallocAsyncCtx7 + 4 | 0; //@line 23156
   HEAP32[$130 >> 2] = $12; //@line 23157
   $131 = $ReallocAsyncCtx7 + 8 | 0; //@line 23158
   HEAP32[$131 >> 2] = $14; //@line 23159
   $132 = $ReallocAsyncCtx7 + 12 | 0; //@line 23160
   HEAP32[$132 >> 2] = $2; //@line 23161
   $133 = $ReallocAsyncCtx7 + 16 | 0; //@line 23162
   HEAP32[$133 >> 2] = $4; //@line 23163
   $134 = $ReallocAsyncCtx7 + 20 | 0; //@line 23164
   HEAP32[$134 >> 2] = $6; //@line 23165
   $135 = $ReallocAsyncCtx7 + 24 | 0; //@line 23166
   HEAP32[$135 >> 2] = $8; //@line 23167
   $136 = $ReallocAsyncCtx7 + 28 | 0; //@line 23168
   HEAP32[$136 >> 2] = $10; //@line 23169
   sp = STACKTOP; //@line 23170
   return;
  }
  ___async_unwind = 0; //@line 23173
  HEAP32[$ReallocAsyncCtx7 >> 2] = 457; //@line 23174
  $130 = $ReallocAsyncCtx7 + 4 | 0; //@line 23175
  HEAP32[$130 >> 2] = $12; //@line 23176
  $131 = $ReallocAsyncCtx7 + 8 | 0; //@line 23177
  HEAP32[$131 >> 2] = $14; //@line 23178
  $132 = $ReallocAsyncCtx7 + 12 | 0; //@line 23179
  HEAP32[$132 >> 2] = $2; //@line 23180
  $133 = $ReallocAsyncCtx7 + 16 | 0; //@line 23181
  HEAP32[$133 >> 2] = $4; //@line 23182
  $134 = $ReallocAsyncCtx7 + 20 | 0; //@line 23183
  HEAP32[$134 >> 2] = $6; //@line 23184
  $135 = $ReallocAsyncCtx7 + 24 | 0; //@line 23185
  HEAP32[$135 >> 2] = $8; //@line 23186
  $136 = $ReallocAsyncCtx7 + 28 | 0; //@line 23187
  HEAP32[$136 >> 2] = $10; //@line 23188
  sp = STACKTOP; //@line 23189
  return;
 }
 $137 = HEAP8[$12 >> 0] & -33; //@line 23193
 HEAP8[$12 >> 0] = $137; //@line 23194
 do {
  if (!($137 & 2)) {
   $176 = $137; //@line 23199
  } else {
   $148 = $137 & -3; //@line 23201
   HEAP8[$12 >> 0] = $148; //@line 23202
   if ((HEAP32[$14 + 360 >> 2] | 0) == 2) {
    _printf(12943, $4) | 0; //@line 23207
    _printf(12970, $8) | 0; //@line 23208
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 23209
    _putchar(10) | 0; //@line 23210
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 459; //@line 23213
     $152 = $ReallocAsyncCtx6 + 4 | 0; //@line 23214
     HEAP32[$152 >> 2] = $12; //@line 23215
     $153 = $ReallocAsyncCtx6 + 8 | 0; //@line 23216
     HEAP32[$153 >> 2] = $14; //@line 23217
     $154 = $ReallocAsyncCtx6 + 12 | 0; //@line 23218
     HEAP32[$154 >> 2] = $2; //@line 23219
     $155 = $ReallocAsyncCtx6 + 16 | 0; //@line 23220
     HEAP32[$155 >> 2] = $2; //@line 23221
     sp = STACKTOP; //@line 23222
     return;
    }
    ___async_unwind = 0; //@line 23225
    HEAP32[$ReallocAsyncCtx6 >> 2] = 459; //@line 23226
    $152 = $ReallocAsyncCtx6 + 4 | 0; //@line 23227
    HEAP32[$152 >> 2] = $12; //@line 23228
    $153 = $ReallocAsyncCtx6 + 8 | 0; //@line 23229
    HEAP32[$153 >> 2] = $14; //@line 23230
    $154 = $ReallocAsyncCtx6 + 12 | 0; //@line 23231
    HEAP32[$154 >> 2] = $2; //@line 23232
    $155 = $ReallocAsyncCtx6 + 16 | 0; //@line 23233
    HEAP32[$155 >> 2] = $2; //@line 23234
    sp = STACKTOP; //@line 23235
    return;
   }
   if ($148 & 4) {
    $174 = $148 & -5; //@line 23241
    HEAP8[$12 >> 0] = $174; //@line 23242
    $176 = $174; //@line 23243
    break;
   }
   $159 = HEAP32[$14 + 1324 >> 2] | 0; //@line 23247
   $160 = $159 + 16 | 0; //@line 23248
   $162 = __ZN11LoRaMacMcps14get_indicationEv($14 + 288 | 0) | 0; //@line 23250
   $163 = $159 + 28 | 0; //@line 23251
   $164 = HEAP32[$163 >> 2] | 0; //@line 23252
   if (!$164) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 23255
    _mbed_assert_internal(14997, 15002, 1102); //@line 23256
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 462; //@line 23259
     $166 = $ReallocAsyncCtx15 + 4 | 0; //@line 23260
     HEAP32[$166 >> 2] = $163; //@line 23261
     $167 = $ReallocAsyncCtx15 + 8 | 0; //@line 23262
     HEAP32[$167 >> 2] = $160; //@line 23263
     $168 = $ReallocAsyncCtx15 + 12 | 0; //@line 23264
     HEAP32[$168 >> 2] = $162; //@line 23265
     $169 = $ReallocAsyncCtx15 + 16 | 0; //@line 23266
     HEAP32[$169 >> 2] = $12; //@line 23267
     $170 = $ReallocAsyncCtx15 + 20 | 0; //@line 23268
     HEAP32[$170 >> 2] = $14; //@line 23269
     sp = STACKTOP; //@line 23270
     return;
    }
    ___async_unwind = 0; //@line 23273
    HEAP32[$ReallocAsyncCtx15 >> 2] = 462; //@line 23274
    $166 = $ReallocAsyncCtx15 + 4 | 0; //@line 23275
    HEAP32[$166 >> 2] = $163; //@line 23276
    $167 = $ReallocAsyncCtx15 + 8 | 0; //@line 23277
    HEAP32[$167 >> 2] = $160; //@line 23278
    $168 = $ReallocAsyncCtx15 + 12 | 0; //@line 23279
    HEAP32[$168 >> 2] = $162; //@line 23280
    $169 = $ReallocAsyncCtx15 + 16 | 0; //@line 23281
    HEAP32[$169 >> 2] = $12; //@line 23282
    $170 = $ReallocAsyncCtx15 + 20 | 0; //@line 23283
    HEAP32[$170 >> 2] = $14; //@line 23284
    sp = STACKTOP; //@line 23285
    return;
   } else {
    $171 = HEAP32[$164 >> 2] | 0; //@line 23288
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 23289
    FUNCTION_TABLE_vii[$171 & 31]($160, $162); //@line 23290
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 463; //@line 23293
     $172 = $ReallocAsyncCtx4 + 4 | 0; //@line 23294
     HEAP32[$172 >> 2] = $12; //@line 23295
     $173 = $ReallocAsyncCtx4 + 8 | 0; //@line 23296
     HEAP32[$173 >> 2] = $14; //@line 23297
     sp = STACKTOP; //@line 23298
     return;
    }
    ___async_unwind = 0; //@line 23301
    HEAP32[$ReallocAsyncCtx4 >> 2] = 463; //@line 23302
    $172 = $ReallocAsyncCtx4 + 4 | 0; //@line 23303
    HEAP32[$172 >> 2] = $12; //@line 23304
    $173 = $ReallocAsyncCtx4 + 8 | 0; //@line 23305
    HEAP32[$173 >> 2] = $14; //@line 23306
    sp = STACKTOP; //@line 23307
    return;
   }
  }
 } while (0);
 if (!($176 & 16)) {
  return;
 }
 HEAP8[$12 >> 0] = $176 & -17; //@line 23318
 $180 = HEAP32[$14 + 1324 >> 2] | 0; //@line 23320
 $181 = $180 + 48 | 0; //@line 23321
 $183 = __ZN11LoRaMacMlme14get_indicationEv($14 + 264 | 0) | 0; //@line 23323
 $184 = $180 + 60 | 0; //@line 23324
 $185 = HEAP32[$184 >> 2] | 0; //@line 23325
 if (!$185) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 23328
  _mbed_assert_internal(14997, 15002, 1102); //@line 23329
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 464; //@line 23332
   $187 = $ReallocAsyncCtx14 + 4 | 0; //@line 23333
   HEAP32[$187 >> 2] = $184; //@line 23334
   $188 = $ReallocAsyncCtx14 + 8 | 0; //@line 23335
   HEAP32[$188 >> 2] = $181; //@line 23336
   $189 = $ReallocAsyncCtx14 + 12 | 0; //@line 23337
   HEAP32[$189 >> 2] = $183; //@line 23338
   sp = STACKTOP; //@line 23339
   return;
  }
  ___async_unwind = 0; //@line 23342
  HEAP32[$ReallocAsyncCtx14 >> 2] = 464; //@line 23343
  $187 = $ReallocAsyncCtx14 + 4 | 0; //@line 23344
  HEAP32[$187 >> 2] = $184; //@line 23345
  $188 = $ReallocAsyncCtx14 + 8 | 0; //@line 23346
  HEAP32[$188 >> 2] = $181; //@line 23347
  $189 = $ReallocAsyncCtx14 + 12 | 0; //@line 23348
  HEAP32[$189 >> 2] = $183; //@line 23349
  sp = STACKTOP; //@line 23350
  return;
 } else {
  $190 = HEAP32[$185 >> 2] | 0; //@line 23353
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 23354
  FUNCTION_TABLE_vii[$190 & 31]($181, $183); //@line 23355
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 465; //@line 23358
   sp = STACKTOP; //@line 23359
   return;
  }
  ___async_unwind = 0; //@line 23362
  HEAP32[$ReallocAsyncCtx5 >> 2] = 465; //@line 23363
  sp = STACKTOP; //@line 23364
  return;
 }
}
function _printf_core($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$$5 = 0, $$0 = 0, $$0228 = 0, $$0229316 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa356 = 0, $$0240315 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249303 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262309 = 0, $$0269 = 0, $$1 = 0, $$1230327 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241326 = 0, $$1244314 = 0, $$1248 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242302 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2261 = 0, $$2271 = 0, $$3265 = 0, $$3272 = 0, $$3300 = 0, $$4258354 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$pre342 = 0, $$pre345 = 0, $$pre348 = 0, $$sink = 0, $10 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $112 = 0, $115 = 0, $12 = 0, $125 = 0, $129 = 0, $13 = 0, $14 = 0, $140 = 0, $144 = 0, $151 = 0, $152 = 0, $154 = 0, $156 = 0, $158 = 0, $167 = 0, $168 = 0, $173 = 0, $176 = 0, $181 = 0, $182 = 0, $187 = 0, $189 = 0, $196 = 0, $197 = 0, $20 = 0, $208 = 0, $21 = 0, $220 = 0, $227 = 0, $229 = 0, $23 = 0, $232 = 0, $234 = 0, $24 = 0, $242 = 0, $244 = 0, $247 = 0, $248 = 0, $25 = 0, $252 = 0, $256 = 0, $258 = 0, $261 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $275 = 0, $276 = 0, $281 = 0, $283 = 0, $284 = 0, $290 = 0, $30 = 0, $302 = 0, $305 = 0, $306 = 0, $318 = 0, $320 = 0, $325 = 0, $329 = 0, $331 = 0, $343 = 0, $345 = 0, $352 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $43 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $6 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $79 = 0, $8 = 0, $83 = 0, $9 = 0, $or$cond = 0, $or$cond278 = 0, $storemerge274 = 0, label = 0, sp = 0, $158$looptemp = 0;
 sp = STACKTOP; //@line 11409
 STACKTOP = STACKTOP + 64 | 0; //@line 11410
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 11410
 $5 = sp + 16 | 0; //@line 11411
 $6 = sp; //@line 11412
 $7 = sp + 24 | 0; //@line 11413
 $8 = sp + 8 | 0; //@line 11414
 $9 = sp + 20 | 0; //@line 11415
 HEAP32[$5 >> 2] = $1; //@line 11416
 $10 = ($0 | 0) != 0; //@line 11417
 $11 = $7 + 40 | 0; //@line 11418
 $12 = $11; //@line 11419
 $13 = $7 + 39 | 0; //@line 11420
 $14 = $8 + 4 | 0; //@line 11421
 $$0243 = 0; //@line 11422
 $$0247 = 0; //@line 11422
 $$0269 = 0; //@line 11422
 L1 : while (1) {
  do {
   if (($$0247 | 0) > -1) {
    if (($$0243 | 0) > (2147483647 - $$0247 | 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 11431
     $$1248 = -1; //@line 11432
     break;
    } else {
     $$1248 = $$0243 + $$0247 | 0; //@line 11436
     break;
    }
   } else {
    $$1248 = $$0247; //@line 11440
   }
  } while (0);
  $20 = HEAP32[$5 >> 2] | 0; //@line 11443
  $21 = HEAP8[$20 >> 0] | 0; //@line 11444
  if (!($21 << 24 >> 24)) {
   label = 88; //@line 11447
   break;
  } else {
   $23 = $21; //@line 11450
   $25 = $20; //@line 11450
  }
  L9 : while (1) {
   switch ($23 << 24 >> 24) {
   case 37:
    {
     $$0249303 = $25; //@line 11455
     $27 = $25; //@line 11455
     label = 9; //@line 11456
     break L9;
     break;
    }
   case 0:
    {
     $$0249$lcssa = $25; //@line 11461
     break L9;
     break;
    }
   default:
    {}
   }
   $24 = $25 + 1 | 0; //@line 11468
   HEAP32[$5 >> 2] = $24; //@line 11469
   $23 = HEAP8[$24 >> 0] | 0; //@line 11471
   $25 = $24; //@line 11471
  }
  L12 : do {
   if ((label | 0) == 9) {
    while (1) {
     label = 0; //@line 11476
     if ((HEAP8[$27 + 1 >> 0] | 0) != 37) {
      $$0249$lcssa = $$0249303; //@line 11481
      break L12;
     }
     $30 = $$0249303 + 1 | 0; //@line 11484
     $27 = $27 + 2 | 0; //@line 11485
     HEAP32[$5 >> 2] = $27; //@line 11486
     if ((HEAP8[$27 >> 0] | 0) != 37) {
      $$0249$lcssa = $30; //@line 11493
      break;
     } else {
      $$0249303 = $30; //@line 11490
      label = 9; //@line 11491
     }
    }
   }
  } while (0);
  $36 = $$0249$lcssa - $20 | 0; //@line 11501
  if ($10) {
   _out_670($0, $20, $36); //@line 11503
  }
  if ($36 | 0) {
   $$0243 = $36; //@line 11507
   $$0247 = $$1248; //@line 11507
   continue;
  }
  $43 = (_isdigit(HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] | 0) | 0) == 0; //@line 11515
  $$pre342 = HEAP32[$5 >> 2] | 0; //@line 11516
  if ($43) {
   $$0253 = -1; //@line 11518
   $$1270 = $$0269; //@line 11518
   $$sink = 1; //@line 11518
  } else {
   if ((HEAP8[$$pre342 + 2 >> 0] | 0) == 36) {
    $$0253 = (HEAP8[$$pre342 + 1 >> 0] | 0) + -48 | 0; //@line 11528
    $$1270 = 1; //@line 11528
    $$sink = 3; //@line 11528
   } else {
    $$0253 = -1; //@line 11530
    $$1270 = $$0269; //@line 11530
    $$sink = 1; //@line 11530
   }
  }
  $51 = $$pre342 + $$sink | 0; //@line 11533
  HEAP32[$5 >> 2] = $51; //@line 11534
  $52 = HEAP8[$51 >> 0] | 0; //@line 11535
  $54 = ($52 << 24 >> 24) + -32 | 0; //@line 11537
  if ($54 >>> 0 > 31 | (1 << $54 & 75913 | 0) == 0) {
   $$0262$lcssa = 0; //@line 11544
   $$lcssa291 = $52; //@line 11544
   $$lcssa292 = $51; //@line 11544
  } else {
   $$0262309 = 0; //@line 11546
   $60 = $52; //@line 11546
   $65 = $51; //@line 11546
   while (1) {
    $63 = 1 << ($60 << 24 >> 24) + -32 | $$0262309; //@line 11551
    $64 = $65 + 1 | 0; //@line 11552
    HEAP32[$5 >> 2] = $64; //@line 11553
    $66 = HEAP8[$64 >> 0] | 0; //@line 11554
    $68 = ($66 << 24 >> 24) + -32 | 0; //@line 11556
    if ($68 >>> 0 > 31 | (1 << $68 & 75913 | 0) == 0) {
     $$0262$lcssa = $63; //@line 11563
     $$lcssa291 = $66; //@line 11563
     $$lcssa292 = $64; //@line 11563
     break;
    } else {
     $$0262309 = $63; //@line 11566
     $60 = $66; //@line 11566
     $65 = $64; //@line 11566
    }
   }
  }
  if ($$lcssa291 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[$$lcssa292 + 1 >> 0] | 0) | 0)) {
    label = 23; //@line 11578
   } else {
    $79 = HEAP32[$5 >> 2] | 0; //@line 11580
    if ((HEAP8[$79 + 2 >> 0] | 0) == 36) {
     $83 = $79 + 1 | 0; //@line 11585
     HEAP32[$4 + ((HEAP8[$83 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 11590
     $$0259 = HEAP32[$3 + ((HEAP8[$83 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 11602
     $$2271 = 1; //@line 11602
     $storemerge274 = $79 + 3 | 0; //@line 11602
    } else {
     label = 23; //@line 11604
    }
   }
   if ((label | 0) == 23) {
    label = 0; //@line 11608
    if ($$1270 | 0) {
     $$0 = -1; //@line 11611
     break;
    }
    if ($10) {
     $105 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11626
     $106 = HEAP32[$105 >> 2] | 0; //@line 11627
     HEAP32[$2 >> 2] = $105 + 4; //@line 11629
     $363 = $106; //@line 11630
    } else {
     $363 = 0; //@line 11632
    }
    $$0259 = $363; //@line 11636
    $$2271 = 0; //@line 11636
    $storemerge274 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 11636
   }
   HEAP32[$5 >> 2] = $storemerge274; //@line 11638
   $109 = ($$0259 | 0) < 0; //@line 11639
   $$1260 = $109 ? 0 - $$0259 | 0 : $$0259; //@line 11644
   $$1263 = $109 ? $$0262$lcssa | 8192 : $$0262$lcssa; //@line 11644
   $$3272 = $$2271; //@line 11644
   $115 = $storemerge274; //@line 11644
  } else {
   $112 = _getint_671($5) | 0; //@line 11646
   if (($112 | 0) < 0) {
    $$0 = -1; //@line 11649
    break;
   }
   $$1260 = $112; //@line 11653
   $$1263 = $$0262$lcssa; //@line 11653
   $$3272 = $$1270; //@line 11653
   $115 = HEAP32[$5 >> 2] | 0; //@line 11653
  }
  do {
   if ((HEAP8[$115 >> 0] | 0) == 46) {
    if ((HEAP8[$115 + 1 >> 0] | 0) != 42) {
     HEAP32[$5 >> 2] = $115 + 1; //@line 11664
     $156 = _getint_671($5) | 0; //@line 11665
     $$0254 = $156; //@line 11667
     $$pre345 = HEAP32[$5 >> 2] | 0; //@line 11667
     break;
    }
    if (_isdigit(HEAP8[$115 + 2 >> 0] | 0) | 0) {
     $125 = HEAP32[$5 >> 2] | 0; //@line 11676
     if ((HEAP8[$125 + 3 >> 0] | 0) == 36) {
      $129 = $125 + 2 | 0; //@line 11681
      HEAP32[$4 + ((HEAP8[$129 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 11686
      $140 = HEAP32[$3 + ((HEAP8[$129 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 11693
      $144 = $125 + 4 | 0; //@line 11697
      HEAP32[$5 >> 2] = $144; //@line 11698
      $$0254 = $140; //@line 11699
      $$pre345 = $144; //@line 11699
      break;
     }
    }
    if ($$3272 | 0) {
     $$0 = -1; //@line 11705
     break L1;
    }
    if ($10) {
     $151 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11720
     $152 = HEAP32[$151 >> 2] | 0; //@line 11721
     HEAP32[$2 >> 2] = $151 + 4; //@line 11723
     $364 = $152; //@line 11724
    } else {
     $364 = 0; //@line 11726
    }
    $154 = (HEAP32[$5 >> 2] | 0) + 2 | 0; //@line 11729
    HEAP32[$5 >> 2] = $154; //@line 11730
    $$0254 = $364; //@line 11731
    $$pre345 = $154; //@line 11731
   } else {
    $$0254 = -1; //@line 11733
    $$pre345 = $115; //@line 11733
   }
  } while (0);
  $$0252 = 0; //@line 11736
  $158 = $$pre345; //@line 11736
  while (1) {
   if (((HEAP8[$158 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $$0 = -1; //@line 11743
    break L1;
   }
   $158$looptemp = $158;
   $158 = $158 + 1 | 0; //@line 11746
   HEAP32[$5 >> 2] = $158; //@line 11747
   $167 = HEAP8[(HEAP8[$158$looptemp >> 0] | 0) + -65 + (15217 + ($$0252 * 58 | 0)) >> 0] | 0; //@line 11752
   $168 = $167 & 255; //@line 11753
   if (($168 + -1 | 0) >>> 0 >= 8) {
    break;
   } else {
    $$0252 = $168; //@line 11757
   }
  }
  if (!($167 << 24 >> 24)) {
   $$0 = -1; //@line 11764
   break;
  }
  $173 = ($$0253 | 0) > -1; //@line 11768
  do {
   if ($167 << 24 >> 24 == 19) {
    if ($173) {
     $$0 = -1; //@line 11772
     break L1;
    } else {
     label = 50; //@line 11775
    }
   } else {
    if ($173) {
     HEAP32[$4 + ($$0253 << 2) >> 2] = $168; //@line 11780
     $176 = $3 + ($$0253 << 3) | 0; //@line 11782
     $181 = HEAP32[$176 + 4 >> 2] | 0; //@line 11787
     $182 = $6; //@line 11788
     HEAP32[$182 >> 2] = HEAP32[$176 >> 2]; //@line 11790
     HEAP32[$182 + 4 >> 2] = $181; //@line 11793
     label = 50; //@line 11794
     break;
    }
    if (!$10) {
     $$0 = 0; //@line 11798
     break L1;
    }
    _pop_arg_673($6, $168, $2); //@line 11801
    $187 = HEAP32[$5 >> 2] | 0; //@line 11803
   }
  } while (0);
  if ((label | 0) == 50) {
   label = 0; //@line 11807
   if ($10) {
    $187 = $158; //@line 11809
   } else {
    $$0243 = 0; //@line 11811
    $$0247 = $$1248; //@line 11811
    $$0269 = $$3272; //@line 11811
    continue;
   }
  }
  $189 = HEAP8[$187 + -1 >> 0] | 0; //@line 11817
  $$0235 = ($$0252 | 0) != 0 & ($189 & 15 | 0) == 3 ? $189 & -33 : $189; //@line 11823
  $196 = $$1263 & -65537; //@line 11826
  $$1263$ = ($$1263 & 8192 | 0) == 0 ? $$1263 : $196; //@line 11827
  L73 : do {
   switch ($$0235 | 0) {
   case 110:
    {
     switch (($$0252 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 11835
       $$0243 = 0; //@line 11836
       $$0247 = $$1248; //@line 11836
       $$0269 = $$3272; //@line 11836
       continue L1;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 11842
       $$0243 = 0; //@line 11843
       $$0247 = $$1248; //@line 11843
       $$0269 = $$3272; //@line 11843
       continue L1;
       break;
      }
     case 2:
      {
       $208 = HEAP32[$6 >> 2] | 0; //@line 11851
       HEAP32[$208 >> 2] = $$1248; //@line 11853
       HEAP32[$208 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 11856
       $$0243 = 0; //@line 11857
       $$0247 = $$1248; //@line 11857
       $$0269 = $$3272; //@line 11857
       continue L1;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$6 >> 2] >> 1] = $$1248; //@line 11864
       $$0243 = 0; //@line 11865
       $$0247 = $$1248; //@line 11865
       $$0269 = $$3272; //@line 11865
       continue L1;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$6 >> 2] >> 0] = $$1248; //@line 11872
       $$0243 = 0; //@line 11873
       $$0247 = $$1248; //@line 11873
       $$0269 = $$3272; //@line 11873
       continue L1;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 11879
       $$0243 = 0; //@line 11880
       $$0247 = $$1248; //@line 11880
       $$0269 = $$3272; //@line 11880
       continue L1;
       break;
      }
     case 7:
      {
       $220 = HEAP32[$6 >> 2] | 0; //@line 11888
       HEAP32[$220 >> 2] = $$1248; //@line 11890
       HEAP32[$220 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 11893
       $$0243 = 0; //@line 11894
       $$0247 = $$1248; //@line 11894
       $$0269 = $$3272; //@line 11894
       continue L1;
       break;
      }
     default:
      {
       $$0243 = 0; //@line 11899
       $$0247 = $$1248; //@line 11899
       $$0269 = $$3272; //@line 11899
       continue L1;
      }
     }
     break;
    }
   case 112:
    {
     $$1236 = 120; //@line 11909
     $$1255 = $$0254 >>> 0 > 8 ? $$0254 : 8; //@line 11909
     $$3265 = $$1263$ | 8; //@line 11909
     label = 62; //@line 11910
     break;
    }
   case 88:
   case 120:
    {
     $$1236 = $$0235; //@line 11914
     $$1255 = $$0254; //@line 11914
     $$3265 = $$1263$; //@line 11914
     label = 62; //@line 11915
     break;
    }
   case 111:
    {
     $242 = $6; //@line 11919
     $244 = HEAP32[$242 >> 2] | 0; //@line 11921
     $247 = HEAP32[$242 + 4 >> 2] | 0; //@line 11924
     $248 = _fmt_o($244, $247, $11) | 0; //@line 11925
     $252 = $12 - $248 | 0; //@line 11929
     $$0228 = $248; //@line 11934
     $$1233 = 0; //@line 11934
     $$1238 = 15681; //@line 11934
     $$2256 = ($$1263$ & 8 | 0) == 0 | ($$0254 | 0) > ($252 | 0) ? $$0254 : $252 + 1 | 0; //@line 11934
     $$4266 = $$1263$; //@line 11934
     $281 = $244; //@line 11934
     $283 = $247; //@line 11934
     label = 68; //@line 11935
     break;
    }
   case 105:
   case 100:
    {
     $256 = $6; //@line 11939
     $258 = HEAP32[$256 >> 2] | 0; //@line 11941
     $261 = HEAP32[$256 + 4 >> 2] | 0; //@line 11944
     if (($261 | 0) < 0) {
      $263 = _i64Subtract(0, 0, $258 | 0, $261 | 0) | 0; //@line 11947
      $264 = tempRet0; //@line 11948
      $265 = $6; //@line 11949
      HEAP32[$265 >> 2] = $263; //@line 11951
      HEAP32[$265 + 4 >> 2] = $264; //@line 11954
      $$0232 = 1; //@line 11955
      $$0237 = 15681; //@line 11955
      $275 = $263; //@line 11955
      $276 = $264; //@line 11955
      label = 67; //@line 11956
      break L73;
     } else {
      $$0232 = ($$1263$ & 2049 | 0) != 0 & 1; //@line 11968
      $$0237 = ($$1263$ & 2048 | 0) == 0 ? ($$1263$ & 1 | 0) == 0 ? 15681 : 15683 : 15682; //@line 11968
      $275 = $258; //@line 11968
      $276 = $261; //@line 11968
      label = 67; //@line 11969
      break L73;
     }
     break;
    }
   case 117:
    {
     $197 = $6; //@line 11975
     $$0232 = 0; //@line 11981
     $$0237 = 15681; //@line 11981
     $275 = HEAP32[$197 >> 2] | 0; //@line 11981
     $276 = HEAP32[$197 + 4 >> 2] | 0; //@line 11981
     label = 67; //@line 11982
     break;
    }
   case 99:
    {
     HEAP8[$13 >> 0] = HEAP32[$6 >> 2]; //@line 11993
     $$2 = $13; //@line 11994
     $$2234 = 0; //@line 11994
     $$2239 = 15681; //@line 11994
     $$2251 = $11; //@line 11994
     $$5 = 1; //@line 11994
     $$6268 = $196; //@line 11994
     break;
    }
   case 109:
    {
     $$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0; //@line 12001
     label = 72; //@line 12002
     break;
    }
   case 115:
    {
     $302 = HEAP32[$6 >> 2] | 0; //@line 12006
     $$1 = $302 | 0 ? $302 : 15691; //@line 12009
     label = 72; //@line 12010
     break;
    }
   case 67:
    {
     HEAP32[$8 >> 2] = HEAP32[$6 >> 2]; //@line 12020
     HEAP32[$14 >> 2] = 0; //@line 12021
     HEAP32[$6 >> 2] = $8; //@line 12022
     $$4258354 = -1; //@line 12023
     $365 = $8; //@line 12023
     label = 76; //@line 12024
     break;
    }
   case 83:
    {
     $$pre348 = HEAP32[$6 >> 2] | 0; //@line 12028
     if (!$$0254) {
      _pad_676($0, 32, $$1260, 0, $$1263$); //@line 12031
      $$0240$lcssa356 = 0; //@line 12032
      label = 85; //@line 12033
     } else {
      $$4258354 = $$0254; //@line 12035
      $365 = $$pre348; //@line 12035
      label = 76; //@line 12036
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $$0243 = _fmt_fp($0, +HEAPF64[$6 >> 3], $$1260, $$0254, $$1263$, $$0235) | 0; //@line 12043
     $$0247 = $$1248; //@line 12043
     $$0269 = $$3272; //@line 12043
     continue L1;
     break;
    }
   default:
    {
     $$2 = $20; //@line 12048
     $$2234 = 0; //@line 12048
     $$2239 = 15681; //@line 12048
     $$2251 = $11; //@line 12048
     $$5 = $$0254; //@line 12048
     $$6268 = $$1263$; //@line 12048
    }
   }
  } while (0);
  L97 : do {
   if ((label | 0) == 62) {
    label = 0; //@line 12054
    $227 = $6; //@line 12055
    $229 = HEAP32[$227 >> 2] | 0; //@line 12057
    $232 = HEAP32[$227 + 4 >> 2] | 0; //@line 12060
    $234 = _fmt_x($229, $232, $11, $$1236 & 32) | 0; //@line 12062
    $or$cond278 = ($$3265 & 8 | 0) == 0 | ($229 | 0) == 0 & ($232 | 0) == 0; //@line 12068
    $$0228 = $234; //@line 12073
    $$1233 = $or$cond278 ? 0 : 2; //@line 12073
    $$1238 = $or$cond278 ? 15681 : 15681 + ($$1236 >> 4) | 0; //@line 12073
    $$2256 = $$1255; //@line 12073
    $$4266 = $$3265; //@line 12073
    $281 = $229; //@line 12073
    $283 = $232; //@line 12073
    label = 68; //@line 12074
   } else if ((label | 0) == 67) {
    label = 0; //@line 12077
    $$0228 = _fmt_u($275, $276, $11) | 0; //@line 12079
    $$1233 = $$0232; //@line 12079
    $$1238 = $$0237; //@line 12079
    $$2256 = $$0254; //@line 12079
    $$4266 = $$1263$; //@line 12079
    $281 = $275; //@line 12079
    $283 = $276; //@line 12079
    label = 68; //@line 12080
   } else if ((label | 0) == 72) {
    label = 0; //@line 12083
    $305 = _memchr($$1, 0, $$0254) | 0; //@line 12084
    $306 = ($305 | 0) == 0; //@line 12085
    $$2 = $$1; //@line 12092
    $$2234 = 0; //@line 12092
    $$2239 = 15681; //@line 12092
    $$2251 = $306 ? $$1 + $$0254 | 0 : $305; //@line 12092
    $$5 = $306 ? $$0254 : $305 - $$1 | 0; //@line 12092
    $$6268 = $196; //@line 12092
   } else if ((label | 0) == 76) {
    label = 0; //@line 12095
    $$0229316 = $365; //@line 12096
    $$0240315 = 0; //@line 12096
    $$1244314 = 0; //@line 12096
    while (1) {
     $318 = HEAP32[$$0229316 >> 2] | 0; //@line 12098
     if (!$318) {
      $$0240$lcssa = $$0240315; //@line 12101
      $$2245 = $$1244314; //@line 12101
      break;
     }
     $320 = _wctomb($9, $318) | 0; //@line 12104
     if (($320 | 0) < 0 | $320 >>> 0 > ($$4258354 - $$0240315 | 0) >>> 0) {
      $$0240$lcssa = $$0240315; //@line 12110
      $$2245 = $320; //@line 12110
      break;
     }
     $325 = $320 + $$0240315 | 0; //@line 12114
     if ($$4258354 >>> 0 > $325 >>> 0) {
      $$0229316 = $$0229316 + 4 | 0; //@line 12117
      $$0240315 = $325; //@line 12117
      $$1244314 = $320; //@line 12117
     } else {
      $$0240$lcssa = $325; //@line 12119
      $$2245 = $320; //@line 12119
      break;
     }
    }
    if (($$2245 | 0) < 0) {
     $$0 = -1; //@line 12125
     break L1;
    }
    _pad_676($0, 32, $$1260, $$0240$lcssa, $$1263$); //@line 12128
    if (!$$0240$lcssa) {
     $$0240$lcssa356 = 0; //@line 12131
     label = 85; //@line 12132
    } else {
     $$1230327 = $365; //@line 12134
     $$1241326 = 0; //@line 12134
     while (1) {
      $329 = HEAP32[$$1230327 >> 2] | 0; //@line 12136
      if (!$329) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 12139
       label = 85; //@line 12140
       break L97;
      }
      $331 = _wctomb($9, $329) | 0; //@line 12143
      $$1241326 = $331 + $$1241326 | 0; //@line 12144
      if (($$1241326 | 0) > ($$0240$lcssa | 0)) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 12147
       label = 85; //@line 12148
       break L97;
      }
      _out_670($0, $9, $331); //@line 12152
      if ($$1241326 >>> 0 >= $$0240$lcssa >>> 0) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 12157
       label = 85; //@line 12158
       break;
      } else {
       $$1230327 = $$1230327 + 4 | 0; //@line 12155
      }
     }
    }
   }
  } while (0);
  if ((label | 0) == 68) {
   label = 0; //@line 12166
   $284 = ($281 | 0) != 0 | ($283 | 0) != 0; //@line 12172
   $or$cond = ($$2256 | 0) != 0 | $284; //@line 12174
   $290 = $12 - $$0228 + (($284 ^ 1) & 1) | 0; //@line 12179
   $$2 = $or$cond ? $$0228 : $11; //@line 12184
   $$2234 = $$1233; //@line 12184
   $$2239 = $$1238; //@line 12184
   $$2251 = $11; //@line 12184
   $$5 = $or$cond ? ($$2256 | 0) > ($290 | 0) ? $$2256 : $290 : $$2256; //@line 12184
   $$6268 = ($$2256 | 0) > -1 ? $$4266 & -65537 : $$4266; //@line 12184
  } else if ((label | 0) == 85) {
   label = 0; //@line 12187
   _pad_676($0, 32, $$1260, $$0240$lcssa356, $$1263$ ^ 8192); //@line 12189
   $$0243 = ($$1260 | 0) > ($$0240$lcssa356 | 0) ? $$1260 : $$0240$lcssa356; //@line 12192
   $$0247 = $$1248; //@line 12192
   $$0269 = $$3272; //@line 12192
   continue;
  }
  $343 = $$2251 - $$2 | 0; //@line 12197
  $$$5 = ($$5 | 0) < ($343 | 0) ? $343 : $$5; //@line 12199
  $345 = $$$5 + $$2234 | 0; //@line 12200
  $$2261 = ($$1260 | 0) < ($345 | 0) ? $345 : $$1260; //@line 12202
  _pad_676($0, 32, $$2261, $345, $$6268); //@line 12203
  _out_670($0, $$2239, $$2234); //@line 12204
  _pad_676($0, 48, $$2261, $345, $$6268 ^ 65536); //@line 12206
  _pad_676($0, 48, $$$5, $343, 0); //@line 12207
  _out_670($0, $$2, $343); //@line 12208
  _pad_676($0, 32, $$2261, $345, $$6268 ^ 8192); //@line 12210
  $$0243 = $$2261; //@line 12211
  $$0247 = $$1248; //@line 12211
  $$0269 = $$3272; //@line 12211
 }
 L116 : do {
  if ((label | 0) == 88) {
   if (!$0) {
    if (!$$0269) {
     $$0 = 0; //@line 12219
    } else {
     $$2242302 = 1; //@line 12221
     while (1) {
      $352 = HEAP32[$4 + ($$2242302 << 2) >> 2] | 0; //@line 12224
      if (!$352) {
       $$2242$lcssa = $$2242302; //@line 12227
       break;
      }
      _pop_arg_673($3 + ($$2242302 << 3) | 0, $352, $2); //@line 12231
      $356 = $$2242302 + 1 | 0; //@line 12232
      if (($$2242302 | 0) < 9) {
       $$2242302 = $356; //@line 12235
      } else {
       $$2242$lcssa = $356; //@line 12237
       break;
      }
     }
     if (($$2242$lcssa | 0) < 10) {
      $$3300 = $$2242$lcssa; //@line 12243
      while (1) {
       if (HEAP32[$4 + ($$3300 << 2) >> 2] | 0) {
        $$0 = -1; //@line 12249
        break L116;
       }
       if (($$3300 | 0) < 9) {
        $$3300 = $$3300 + 1 | 0; //@line 12255
       } else {
        $$0 = 1; //@line 12257
        break;
       }
      }
     } else {
      $$0 = 1; //@line 12262
     }
    }
   } else {
    $$0 = $$1248; //@line 12266
   }
  }
 } while (0);
 STACKTOP = sp; //@line 12270
 return $$0 | 0; //@line 12270
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_404($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $67 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 20908
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20910
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20912
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20914
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20916
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20918
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20920
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20922
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20924
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20926
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20928
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20930
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20932
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20934
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 20936
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 20938
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 20940
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 20942
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 20944
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 20946
 HEAP8[$2 + 688 >> 0] = 1; //@line 20948
 if (HEAP8[$4 >> 0] | 0) {
  HEAP8[$4 >> 0] = 0; //@line 20952
  $42 = $2 + 1112 | 0; //@line 20953
  $43 = $14 + 12 | 0; //@line 20954
  HEAP32[$14 >> 2] = 66; //@line 20955
  HEAP32[$14 + 4 >> 2] = 0; //@line 20957
  HEAP32[$14 + 8 >> 2] = $2; //@line 20959
  HEAP32[$43 >> 2] = 648; //@line 20960
  $44 = $2 + 1152 | 0; //@line 20961
  do {
   if (($44 | 0) != ($14 | 0)) {
    $46 = $2 + 1164 | 0; //@line 20965
    $47 = HEAP32[$46 >> 2] | 0; //@line 20966
    if ($47 | 0) {
     $50 = HEAP32[$47 + 8 >> 2] | 0; //@line 20970
     $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 20971
     FUNCTION_TABLE_vi[$50 & 1023]($44); //@line 20972
     if (___async) {
      HEAP32[$ReallocAsyncCtx >> 2] = 67; //@line 20975
      $51 = $ReallocAsyncCtx + 4 | 0; //@line 20976
      HEAP32[$51 >> 2] = $43; //@line 20977
      $52 = $ReallocAsyncCtx + 8 | 0; //@line 20978
      HEAP32[$52 >> 2] = $46; //@line 20979
      $53 = $ReallocAsyncCtx + 12 | 0; //@line 20980
      HEAP32[$53 >> 2] = $44; //@line 20981
      $54 = $ReallocAsyncCtx + 16 | 0; //@line 20982
      HEAP32[$54 >> 2] = $14; //@line 20983
      $55 = $ReallocAsyncCtx + 20 | 0; //@line 20984
      HEAP32[$55 >> 2] = $42; //@line 20985
      sp = STACKTOP; //@line 20986
      return;
     }
     ___async_unwind = 0; //@line 20989
     HEAP32[$ReallocAsyncCtx >> 2] = 67; //@line 20990
     $51 = $ReallocAsyncCtx + 4 | 0; //@line 20991
     HEAP32[$51 >> 2] = $43; //@line 20992
     $52 = $ReallocAsyncCtx + 8 | 0; //@line 20993
     HEAP32[$52 >> 2] = $46; //@line 20994
     $53 = $ReallocAsyncCtx + 12 | 0; //@line 20995
     HEAP32[$53 >> 2] = $44; //@line 20996
     $54 = $ReallocAsyncCtx + 16 | 0; //@line 20997
     HEAP32[$54 >> 2] = $14; //@line 20998
     $55 = $ReallocAsyncCtx + 20 | 0; //@line 20999
     HEAP32[$55 >> 2] = $42; //@line 21000
     sp = STACKTOP; //@line 21001
     return;
    }
    $56 = HEAP32[$43 >> 2] | 0; //@line 21004
    if (!$56) {
     HEAP32[$46 >> 2] = 0; //@line 21007
     break;
    }
    $59 = HEAP32[$56 + 4 >> 2] | 0; //@line 21011
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 21012
    FUNCTION_TABLE_vii[$59 & 31]($44, $14); //@line 21013
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 68; //@line 21016
     $60 = $ReallocAsyncCtx2 + 4 | 0; //@line 21017
     HEAP32[$60 >> 2] = $43; //@line 21018
     $61 = $ReallocAsyncCtx2 + 8 | 0; //@line 21019
     HEAP32[$61 >> 2] = $46; //@line 21020
     $62 = $ReallocAsyncCtx2 + 12 | 0; //@line 21021
     HEAP32[$62 >> 2] = $42; //@line 21022
     $63 = $ReallocAsyncCtx2 + 16 | 0; //@line 21023
     HEAP32[$63 >> 2] = $14; //@line 21024
     sp = STACKTOP; //@line 21025
     return;
    }
    ___async_unwind = 0; //@line 21028
    HEAP32[$ReallocAsyncCtx2 >> 2] = 68; //@line 21029
    $60 = $ReallocAsyncCtx2 + 4 | 0; //@line 21030
    HEAP32[$60 >> 2] = $43; //@line 21031
    $61 = $ReallocAsyncCtx2 + 8 | 0; //@line 21032
    HEAP32[$61 >> 2] = $46; //@line 21033
    $62 = $ReallocAsyncCtx2 + 12 | 0; //@line 21034
    HEAP32[$62 >> 2] = $42; //@line 21035
    $63 = $ReallocAsyncCtx2 + 16 | 0; //@line 21036
    HEAP32[$63 >> 2] = $14; //@line 21037
    sp = STACKTOP; //@line 21038
    return;
   }
  } while (0);
  __ZN4mbed6Ticker5setupEy($42, 2e5, 0); //@line 21042
  $64 = HEAP32[$43 >> 2] | 0; //@line 21043
  if (!$64) {
   return;
  }
  $67 = HEAP32[$64 + 8 >> 2] | 0; //@line 21049
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 21050
  FUNCTION_TABLE_vi[$67 & 1023]($14); //@line 21051
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 69; //@line 21054
   sp = STACKTOP; //@line 21055
   return;
  }
  ___async_unwind = 0; //@line 21058
  HEAP32[$ReallocAsyncCtx3 >> 2] = 69; //@line 21059
  sp = STACKTOP; //@line 21060
  return;
 }
 if ($16 | 0) {
  $69 = $2 + 1112 | 0; //@line 21065
  $70 = $18 + 12 | 0; //@line 21066
  HEAP32[$18 >> 2] = 70; //@line 21067
  HEAP32[$18 + 4 >> 2] = 0; //@line 21069
  HEAP32[$18 + 8 >> 2] = $2; //@line 21071
  HEAP32[$70 >> 2] = 648; //@line 21072
  $71 = ___muldi3($16 | 0, 0, 1e3, 0) | 0; //@line 21073
  $72 = tempRet0; //@line 21074
  $73 = $2 + 1152 | 0; //@line 21075
  do {
   if (($73 | 0) != ($18 | 0)) {
    $75 = $2 + 1164 | 0; //@line 21079
    $76 = HEAP32[$75 >> 2] | 0; //@line 21080
    if ($76 | 0) {
     $79 = HEAP32[$76 + 8 >> 2] | 0; //@line 21084
     $ReallocAsyncCtx4 = _emscripten_realloc_async_context(96) | 0; //@line 21085
     FUNCTION_TABLE_vi[$79 & 1023]($73); //@line 21086
     if (___async) {
      HEAP32[$ReallocAsyncCtx4 >> 2] = 71; //@line 21089
      $80 = $ReallocAsyncCtx4 + 4 | 0; //@line 21090
      HEAP32[$80 >> 2] = $6; //@line 21091
      $81 = $ReallocAsyncCtx4 + 8 | 0; //@line 21092
      HEAP32[$81 >> 2] = $8; //@line 21093
      $82 = $ReallocAsyncCtx4 + 12 | 0; //@line 21094
      HEAP32[$82 >> 2] = $10; //@line 21095
      $83 = $ReallocAsyncCtx4 + 16 | 0; //@line 21096
      HEAP32[$83 >> 2] = $12; //@line 21097
      $84 = $ReallocAsyncCtx4 + 20 | 0; //@line 21098
      HEAP32[$84 >> 2] = $70; //@line 21099
      $85 = $ReallocAsyncCtx4 + 24 | 0; //@line 21100
      HEAP32[$85 >> 2] = $2; //@line 21101
      $86 = $ReallocAsyncCtx4 + 28 | 0; //@line 21102
      HEAP32[$86 >> 2] = $18; //@line 21103
      $87 = $ReallocAsyncCtx4 + 32 | 0; //@line 21104
      HEAP32[$87 >> 2] = $75; //@line 21105
      $88 = $ReallocAsyncCtx4 + 36 | 0; //@line 21106
      HEAP32[$88 >> 2] = $69; //@line 21107
      $89 = $ReallocAsyncCtx4 + 40 | 0; //@line 21108
      $90 = $89; //@line 21109
      $91 = $90; //@line 21110
      HEAP32[$91 >> 2] = $71; //@line 21111
      $92 = $90 + 4 | 0; //@line 21112
      $93 = $92; //@line 21113
      HEAP32[$93 >> 2] = $72; //@line 21114
      $94 = $ReallocAsyncCtx4 + 48 | 0; //@line 21115
      HEAP32[$94 >> 2] = $20; //@line 21116
      $95 = $ReallocAsyncCtx4 + 52 | 0; //@line 21117
      HEAP32[$95 >> 2] = $22; //@line 21118
      $96 = $ReallocAsyncCtx4 + 56 | 0; //@line 21119
      HEAP32[$96 >> 2] = $24; //@line 21120
      $97 = $ReallocAsyncCtx4 + 60 | 0; //@line 21121
      HEAP32[$97 >> 2] = $26; //@line 21122
      $98 = $ReallocAsyncCtx4 + 64 | 0; //@line 21123
      HEAP32[$98 >> 2] = $73; //@line 21124
      $99 = $ReallocAsyncCtx4 + 68 | 0; //@line 21125
      HEAP32[$99 >> 2] = $28; //@line 21126
      $100 = $ReallocAsyncCtx4 + 72 | 0; //@line 21127
      HEAP32[$100 >> 2] = $30; //@line 21128
      $101 = $ReallocAsyncCtx4 + 76 | 0; //@line 21129
      HEAP32[$101 >> 2] = $32; //@line 21130
      $102 = $ReallocAsyncCtx4 + 80 | 0; //@line 21131
      HEAP32[$102 >> 2] = $34; //@line 21132
      $103 = $ReallocAsyncCtx4 + 84 | 0; //@line 21133
      HEAP32[$103 >> 2] = $36; //@line 21134
      $104 = $ReallocAsyncCtx4 + 88 | 0; //@line 21135
      HEAP32[$104 >> 2] = $38; //@line 21136
      sp = STACKTOP; //@line 21137
      return;
     }
     ___async_unwind = 0; //@line 21140
     HEAP32[$ReallocAsyncCtx4 >> 2] = 71; //@line 21141
     $80 = $ReallocAsyncCtx4 + 4 | 0; //@line 21142
     HEAP32[$80 >> 2] = $6; //@line 21143
     $81 = $ReallocAsyncCtx4 + 8 | 0; //@line 21144
     HEAP32[$81 >> 2] = $8; //@line 21145
     $82 = $ReallocAsyncCtx4 + 12 | 0; //@line 21146
     HEAP32[$82 >> 2] = $10; //@line 21147
     $83 = $ReallocAsyncCtx4 + 16 | 0; //@line 21148
     HEAP32[$83 >> 2] = $12; //@line 21149
     $84 = $ReallocAsyncCtx4 + 20 | 0; //@line 21150
     HEAP32[$84 >> 2] = $70; //@line 21151
     $85 = $ReallocAsyncCtx4 + 24 | 0; //@line 21152
     HEAP32[$85 >> 2] = $2; //@line 21153
     $86 = $ReallocAsyncCtx4 + 28 | 0; //@line 21154
     HEAP32[$86 >> 2] = $18; //@line 21155
     $87 = $ReallocAsyncCtx4 + 32 | 0; //@line 21156
     HEAP32[$87 >> 2] = $75; //@line 21157
     $88 = $ReallocAsyncCtx4 + 36 | 0; //@line 21158
     HEAP32[$88 >> 2] = $69; //@line 21159
     $89 = $ReallocAsyncCtx4 + 40 | 0; //@line 21160
     $90 = $89; //@line 21161
     $91 = $90; //@line 21162
     HEAP32[$91 >> 2] = $71; //@line 21163
     $92 = $90 + 4 | 0; //@line 21164
     $93 = $92; //@line 21165
     HEAP32[$93 >> 2] = $72; //@line 21166
     $94 = $ReallocAsyncCtx4 + 48 | 0; //@line 21167
     HEAP32[$94 >> 2] = $20; //@line 21168
     $95 = $ReallocAsyncCtx4 + 52 | 0; //@line 21169
     HEAP32[$95 >> 2] = $22; //@line 21170
     $96 = $ReallocAsyncCtx4 + 56 | 0; //@line 21171
     HEAP32[$96 >> 2] = $24; //@line 21172
     $97 = $ReallocAsyncCtx4 + 60 | 0; //@line 21173
     HEAP32[$97 >> 2] = $26; //@line 21174
     $98 = $ReallocAsyncCtx4 + 64 | 0; //@line 21175
     HEAP32[$98 >> 2] = $73; //@line 21176
     $99 = $ReallocAsyncCtx4 + 68 | 0; //@line 21177
     HEAP32[$99 >> 2] = $28; //@line 21178
     $100 = $ReallocAsyncCtx4 + 72 | 0; //@line 21179
     HEAP32[$100 >> 2] = $30; //@line 21180
     $101 = $ReallocAsyncCtx4 + 76 | 0; //@line 21181
     HEAP32[$101 >> 2] = $32; //@line 21182
     $102 = $ReallocAsyncCtx4 + 80 | 0; //@line 21183
     HEAP32[$102 >> 2] = $34; //@line 21184
     $103 = $ReallocAsyncCtx4 + 84 | 0; //@line 21185
     HEAP32[$103 >> 2] = $36; //@line 21186
     $104 = $ReallocAsyncCtx4 + 88 | 0; //@line 21187
     HEAP32[$104 >> 2] = $38; //@line 21188
     sp = STACKTOP; //@line 21189
     return;
    }
    $105 = HEAP32[$70 >> 2] | 0; //@line 21192
    if (!$105) {
     HEAP32[$75 >> 2] = 0; //@line 21195
     break;
    }
    $108 = HEAP32[$105 + 4 >> 2] | 0; //@line 21199
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(88) | 0; //@line 21200
    FUNCTION_TABLE_vii[$108 & 31]($73, $18); //@line 21201
    if (___async) {
     HEAP32[$ReallocAsyncCtx5 >> 2] = 72; //@line 21204
     $109 = $ReallocAsyncCtx5 + 4 | 0; //@line 21205
     HEAP32[$109 >> 2] = $6; //@line 21206
     $110 = $ReallocAsyncCtx5 + 8 | 0; //@line 21207
     HEAP32[$110 >> 2] = $8; //@line 21208
     $111 = $ReallocAsyncCtx5 + 12 | 0; //@line 21209
     HEAP32[$111 >> 2] = $10; //@line 21210
     $112 = $ReallocAsyncCtx5 + 16 | 0; //@line 21211
     HEAP32[$112 >> 2] = $12; //@line 21212
     $113 = $ReallocAsyncCtx5 + 20 | 0; //@line 21213
     HEAP32[$113 >> 2] = $2; //@line 21214
     $114 = $ReallocAsyncCtx5 + 24 | 0; //@line 21215
     HEAP32[$114 >> 2] = $70; //@line 21216
     $115 = $ReallocAsyncCtx5 + 28 | 0; //@line 21217
     HEAP32[$115 >> 2] = $18; //@line 21218
     $116 = $ReallocAsyncCtx5 + 32 | 0; //@line 21219
     HEAP32[$116 >> 2] = $75; //@line 21220
     $117 = $ReallocAsyncCtx5 + 36 | 0; //@line 21221
     HEAP32[$117 >> 2] = $69; //@line 21222
     $118 = $ReallocAsyncCtx5 + 40 | 0; //@line 21223
     $119 = $118; //@line 21224
     $120 = $119; //@line 21225
     HEAP32[$120 >> 2] = $71; //@line 21226
     $121 = $119 + 4 | 0; //@line 21227
     $122 = $121; //@line 21228
     HEAP32[$122 >> 2] = $72; //@line 21229
     $123 = $ReallocAsyncCtx5 + 48 | 0; //@line 21230
     HEAP32[$123 >> 2] = $20; //@line 21231
     $124 = $ReallocAsyncCtx5 + 52 | 0; //@line 21232
     HEAP32[$124 >> 2] = $22; //@line 21233
     $125 = $ReallocAsyncCtx5 + 56 | 0; //@line 21234
     HEAP32[$125 >> 2] = $24; //@line 21235
     $126 = $ReallocAsyncCtx5 + 60 | 0; //@line 21236
     HEAP32[$126 >> 2] = $26; //@line 21237
     $127 = $ReallocAsyncCtx5 + 64 | 0; //@line 21238
     HEAP32[$127 >> 2] = $28; //@line 21239
     $128 = $ReallocAsyncCtx5 + 68 | 0; //@line 21240
     HEAP32[$128 >> 2] = $30; //@line 21241
     $129 = $ReallocAsyncCtx5 + 72 | 0; //@line 21242
     HEAP32[$129 >> 2] = $32; //@line 21243
     $130 = $ReallocAsyncCtx5 + 76 | 0; //@line 21244
     HEAP32[$130 >> 2] = $34; //@line 21245
     $131 = $ReallocAsyncCtx5 + 80 | 0; //@line 21246
     HEAP32[$131 >> 2] = $36; //@line 21247
     $132 = $ReallocAsyncCtx5 + 84 | 0; //@line 21248
     HEAP32[$132 >> 2] = $38; //@line 21249
     sp = STACKTOP; //@line 21250
     return;
    }
    ___async_unwind = 0; //@line 21253
    HEAP32[$ReallocAsyncCtx5 >> 2] = 72; //@line 21254
    $109 = $ReallocAsyncCtx5 + 4 | 0; //@line 21255
    HEAP32[$109 >> 2] = $6; //@line 21256
    $110 = $ReallocAsyncCtx5 + 8 | 0; //@line 21257
    HEAP32[$110 >> 2] = $8; //@line 21258
    $111 = $ReallocAsyncCtx5 + 12 | 0; //@line 21259
    HEAP32[$111 >> 2] = $10; //@line 21260
    $112 = $ReallocAsyncCtx5 + 16 | 0; //@line 21261
    HEAP32[$112 >> 2] = $12; //@line 21262
    $113 = $ReallocAsyncCtx5 + 20 | 0; //@line 21263
    HEAP32[$113 >> 2] = $2; //@line 21264
    $114 = $ReallocAsyncCtx5 + 24 | 0; //@line 21265
    HEAP32[$114 >> 2] = $70; //@line 21266
    $115 = $ReallocAsyncCtx5 + 28 | 0; //@line 21267
    HEAP32[$115 >> 2] = $18; //@line 21268
    $116 = $ReallocAsyncCtx5 + 32 | 0; //@line 21269
    HEAP32[$116 >> 2] = $75; //@line 21270
    $117 = $ReallocAsyncCtx5 + 36 | 0; //@line 21271
    HEAP32[$117 >> 2] = $69; //@line 21272
    $118 = $ReallocAsyncCtx5 + 40 | 0; //@line 21273
    $119 = $118; //@line 21274
    $120 = $119; //@line 21275
    HEAP32[$120 >> 2] = $71; //@line 21276
    $121 = $119 + 4 | 0; //@line 21277
    $122 = $121; //@line 21278
    HEAP32[$122 >> 2] = $72; //@line 21279
    $123 = $ReallocAsyncCtx5 + 48 | 0; //@line 21280
    HEAP32[$123 >> 2] = $20; //@line 21281
    $124 = $ReallocAsyncCtx5 + 52 | 0; //@line 21282
    HEAP32[$124 >> 2] = $22; //@line 21283
    $125 = $ReallocAsyncCtx5 + 56 | 0; //@line 21284
    HEAP32[$125 >> 2] = $24; //@line 21285
    $126 = $ReallocAsyncCtx5 + 60 | 0; //@line 21286
    HEAP32[$126 >> 2] = $26; //@line 21287
    $127 = $ReallocAsyncCtx5 + 64 | 0; //@line 21288
    HEAP32[$127 >> 2] = $28; //@line 21289
    $128 = $ReallocAsyncCtx5 + 68 | 0; //@line 21290
    HEAP32[$128 >> 2] = $30; //@line 21291
    $129 = $ReallocAsyncCtx5 + 72 | 0; //@line 21292
    HEAP32[$129 >> 2] = $32; //@line 21293
    $130 = $ReallocAsyncCtx5 + 76 | 0; //@line 21294
    HEAP32[$130 >> 2] = $34; //@line 21295
    $131 = $ReallocAsyncCtx5 + 80 | 0; //@line 21296
    HEAP32[$131 >> 2] = $36; //@line 21297
    $132 = $ReallocAsyncCtx5 + 84 | 0; //@line 21298
    HEAP32[$132 >> 2] = $38; //@line 21299
    sp = STACKTOP; //@line 21300
    return;
   }
  } while (0);
  __ZN4mbed6Ticker5setupEy($69, $71, $72); //@line 21304
  $133 = HEAP32[$70 >> 2] | 0; //@line 21305
  if ($133 | 0) {
   $136 = HEAP32[$133 + 8 >> 2] | 0; //@line 21309
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(64) | 0; //@line 21310
   FUNCTION_TABLE_vi[$136 & 1023]($18); //@line 21311
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 73; //@line 21314
    $137 = $ReallocAsyncCtx6 + 4 | 0; //@line 21315
    HEAP32[$137 >> 2] = $6; //@line 21316
    $138 = $ReallocAsyncCtx6 + 8 | 0; //@line 21317
    HEAP32[$138 >> 2] = $8; //@line 21318
    $139 = $ReallocAsyncCtx6 + 12 | 0; //@line 21319
    HEAP32[$139 >> 2] = $10; //@line 21320
    $140 = $ReallocAsyncCtx6 + 16 | 0; //@line 21321
    HEAP32[$140 >> 2] = $12; //@line 21322
    $141 = $ReallocAsyncCtx6 + 20 | 0; //@line 21323
    HEAP32[$141 >> 2] = $2; //@line 21324
    $142 = $ReallocAsyncCtx6 + 24 | 0; //@line 21325
    HEAP32[$142 >> 2] = $20; //@line 21326
    $143 = $ReallocAsyncCtx6 + 28 | 0; //@line 21327
    HEAP32[$143 >> 2] = $22; //@line 21328
    $144 = $ReallocAsyncCtx6 + 32 | 0; //@line 21329
    HEAP32[$144 >> 2] = $24; //@line 21330
    $145 = $ReallocAsyncCtx6 + 36 | 0; //@line 21331
    HEAP32[$145 >> 2] = $26; //@line 21332
    $146 = $ReallocAsyncCtx6 + 40 | 0; //@line 21333
    HEAP32[$146 >> 2] = $28; //@line 21334
    $147 = $ReallocAsyncCtx6 + 44 | 0; //@line 21335
    HEAP32[$147 >> 2] = $30; //@line 21336
    $148 = $ReallocAsyncCtx6 + 48 | 0; //@line 21337
    HEAP32[$148 >> 2] = $32; //@line 21338
    $149 = $ReallocAsyncCtx6 + 52 | 0; //@line 21339
    HEAP32[$149 >> 2] = $34; //@line 21340
    $150 = $ReallocAsyncCtx6 + 56 | 0; //@line 21341
    HEAP32[$150 >> 2] = $36; //@line 21342
    $151 = $ReallocAsyncCtx6 + 60 | 0; //@line 21343
    HEAP32[$151 >> 2] = $38; //@line 21344
    sp = STACKTOP; //@line 21345
    return;
   }
   ___async_unwind = 0; //@line 21348
   HEAP32[$ReallocAsyncCtx6 >> 2] = 73; //@line 21349
   $137 = $ReallocAsyncCtx6 + 4 | 0; //@line 21350
   HEAP32[$137 >> 2] = $6; //@line 21351
   $138 = $ReallocAsyncCtx6 + 8 | 0; //@line 21352
   HEAP32[$138 >> 2] = $8; //@line 21353
   $139 = $ReallocAsyncCtx6 + 12 | 0; //@line 21354
   HEAP32[$139 >> 2] = $10; //@line 21355
   $140 = $ReallocAsyncCtx6 + 16 | 0; //@line 21356
   HEAP32[$140 >> 2] = $12; //@line 21357
   $141 = $ReallocAsyncCtx6 + 20 | 0; //@line 21358
   HEAP32[$141 >> 2] = $2; //@line 21359
   $142 = $ReallocAsyncCtx6 + 24 | 0; //@line 21360
   HEAP32[$142 >> 2] = $20; //@line 21361
   $143 = $ReallocAsyncCtx6 + 28 | 0; //@line 21362
   HEAP32[$143 >> 2] = $22; //@line 21363
   $144 = $ReallocAsyncCtx6 + 32 | 0; //@line 21364
   HEAP32[$144 >> 2] = $24; //@line 21365
   $145 = $ReallocAsyncCtx6 + 36 | 0; //@line 21366
   HEAP32[$145 >> 2] = $26; //@line 21367
   $146 = $ReallocAsyncCtx6 + 40 | 0; //@line 21368
   HEAP32[$146 >> 2] = $28; //@line 21369
   $147 = $ReallocAsyncCtx6 + 44 | 0; //@line 21370
   HEAP32[$147 >> 2] = $30; //@line 21371
   $148 = $ReallocAsyncCtx6 + 48 | 0; //@line 21372
   HEAP32[$148 >> 2] = $32; //@line 21373
   $149 = $ReallocAsyncCtx6 + 52 | 0; //@line 21374
   HEAP32[$149 >> 2] = $34; //@line 21375
   $150 = $ReallocAsyncCtx6 + 56 | 0; //@line 21376
   HEAP32[$150 >> 2] = $36; //@line 21377
   $151 = $ReallocAsyncCtx6 + 60 | 0; //@line 21378
   HEAP32[$151 >> 2] = $38; //@line 21379
   sp = STACKTOP; //@line 21380
   return;
  }
 }
 $154 = (HEAP8[$2 + 770 >> 0] | 0) == 0; //@line 21386
 _printf(10880, $36) | 0; //@line 21387
 if ($154) {
  HEAP32[$32 >> 2] = 6; //@line 21389
  _printf(10946, $32) | 0; //@line 21390
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(24) | 0; //@line 21391
  _putchar(10) | 0; //@line 21392
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 77; //@line 21395
   $160 = $ReallocAsyncCtx8 + 4 | 0; //@line 21396
   HEAP32[$160 >> 2] = $2; //@line 21397
   $161 = $ReallocAsyncCtx8 + 8 | 0; //@line 21398
   HEAP32[$161 >> 2] = $20; //@line 21399
   $162 = $ReallocAsyncCtx8 + 12 | 0; //@line 21400
   HEAP32[$162 >> 2] = $22; //@line 21401
   $163 = $ReallocAsyncCtx8 + 16 | 0; //@line 21402
   HEAP32[$163 >> 2] = $24; //@line 21403
   $164 = $ReallocAsyncCtx8 + 20 | 0; //@line 21404
   HEAP32[$164 >> 2] = $26; //@line 21405
   sp = STACKTOP; //@line 21406
   return;
  }
  ___async_unwind = 0; //@line 21409
  HEAP32[$ReallocAsyncCtx8 >> 2] = 77; //@line 21410
  $160 = $ReallocAsyncCtx8 + 4 | 0; //@line 21411
  HEAP32[$160 >> 2] = $2; //@line 21412
  $161 = $ReallocAsyncCtx8 + 8 | 0; //@line 21413
  HEAP32[$161 >> 2] = $20; //@line 21414
  $162 = $ReallocAsyncCtx8 + 12 | 0; //@line 21415
  HEAP32[$162 >> 2] = $22; //@line 21416
  $163 = $ReallocAsyncCtx8 + 16 | 0; //@line 21417
  HEAP32[$163 >> 2] = $24; //@line 21418
  $164 = $ReallocAsyncCtx8 + 20 | 0; //@line 21419
  HEAP32[$164 >> 2] = $26; //@line 21420
  sp = STACKTOP; //@line 21421
  return;
 } else {
  HEAP32[$28 >> 2] = 5; //@line 21424
  _printf(10946, $28) | 0; //@line 21425
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(24) | 0; //@line 21426
  _putchar(10) | 0; //@line 21427
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 74; //@line 21430
   $155 = $ReallocAsyncCtx10 + 4 | 0; //@line 21431
   HEAP32[$155 >> 2] = $2; //@line 21432
   $156 = $ReallocAsyncCtx10 + 8 | 0; //@line 21433
   HEAP32[$156 >> 2] = $6; //@line 21434
   $157 = $ReallocAsyncCtx10 + 12 | 0; //@line 21435
   HEAP32[$157 >> 2] = $8; //@line 21436
   $158 = $ReallocAsyncCtx10 + 16 | 0; //@line 21437
   HEAP32[$158 >> 2] = $10; //@line 21438
   $159 = $ReallocAsyncCtx10 + 20 | 0; //@line 21439
   HEAP32[$159 >> 2] = $12; //@line 21440
   sp = STACKTOP; //@line 21441
   return;
  }
  ___async_unwind = 0; //@line 21444
  HEAP32[$ReallocAsyncCtx10 >> 2] = 74; //@line 21445
  $155 = $ReallocAsyncCtx10 + 4 | 0; //@line 21446
  HEAP32[$155 >> 2] = $2; //@line 21447
  $156 = $ReallocAsyncCtx10 + 8 | 0; //@line 21448
  HEAP32[$156 >> 2] = $6; //@line 21449
  $157 = $ReallocAsyncCtx10 + 12 | 0; //@line 21450
  HEAP32[$157 >> 2] = $8; //@line 21451
  $158 = $ReallocAsyncCtx10 + 16 | 0; //@line 21452
  HEAP32[$158 >> 2] = $10; //@line 21453
  $159 = $ReallocAsyncCtx10 + 20 | 0; //@line 21454
  HEAP32[$159 >> 2] = $12; //@line 21455
  sp = STACKTOP; //@line 21456
  return;
 }
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$off0 = 0, $162 = 0, $175 = 0, $195 = 0, $32 = 0, $58 = 0, $AsyncCtx = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx37 = 0, $AsyncCtx41 = 0, $AsyncCtx45 = 0, $AsyncCtx49 = 0, $AsyncCtx52 = 0, $AsyncCtx55 = 0, $AsyncCtx58 = 0, $AsyncCtx61 = 0, $AsyncCtx64 = 0, $AsyncCtx68 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1653
 STACKTOP = STACKTOP + 128 | 0; //@line 1654
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 1654
 $vararg_buffer23 = sp + 112 | 0; //@line 1655
 $vararg_buffer21 = sp + 104 | 0; //@line 1656
 $vararg_buffer19 = sp + 96 | 0; //@line 1657
 $vararg_buffer17 = sp + 88 | 0; //@line 1658
 $vararg_buffer14 = sp + 56 | 0; //@line 1659
 $vararg_buffer12 = sp + 48 | 0; //@line 1660
 $vararg_buffer9 = sp + 40 | 0; //@line 1661
 $vararg_buffer7 = sp + 32 | 0; //@line 1662
 $vararg_buffer5 = sp + 24 | 0; //@line 1663
 $vararg_buffer3 = sp + 16 | 0; //@line 1664
 _printf(10880, sp) | 0; //@line 1667
 _printf(11033, sp + 8 | 0) | 0; //@line 1668
 $AsyncCtx49 = _emscripten_alloc_async_context(108, sp) | 0; //@line 1669
 _putchar(10) | 0; //@line 1670
 if (___async) {
  HEAP32[$AsyncCtx49 >> 2] = 88; //@line 1673
  HEAP32[$AsyncCtx49 + 4 >> 2] = $0; //@line 1675
  HEAP32[$AsyncCtx49 + 8 >> 2] = $2; //@line 1677
  HEAP32[$AsyncCtx49 + 12 >> 2] = $vararg_buffer12; //@line 1679
  HEAP32[$AsyncCtx49 + 16 >> 2] = $vararg_buffer12; //@line 1681
  HEAP32[$AsyncCtx49 + 20 >> 2] = $vararg_buffer14; //@line 1683
  HEAP32[$AsyncCtx49 + 24 >> 2] = $vararg_buffer14; //@line 1685
  HEAP32[$AsyncCtx49 + 28 >> 2] = $vararg_buffer14; //@line 1687
  HEAP16[$AsyncCtx49 + 32 >> 1] = $3; //@line 1689
  HEAP32[$AsyncCtx49 + 36 >> 2] = $vararg_buffer21; //@line 1691
  HEAP32[$AsyncCtx49 + 40 >> 2] = $vararg_buffer21; //@line 1693
  HEAP32[$AsyncCtx49 + 44 >> 2] = $vararg_buffer23; //@line 1695
  HEAP32[$AsyncCtx49 + 48 >> 2] = $vararg_buffer23; //@line 1697
  HEAP32[$AsyncCtx49 + 52 >> 2] = $4; //@line 1699
  HEAP32[$AsyncCtx49 + 56 >> 2] = $vararg_buffer17; //@line 1701
  HEAP32[$AsyncCtx49 + 60 >> 2] = $vararg_buffer17; //@line 1703
  HEAP32[$AsyncCtx49 + 64 >> 2] = $vararg_buffer19; //@line 1705
  HEAP32[$AsyncCtx49 + 68 >> 2] = $vararg_buffer19; //@line 1707
  HEAP32[$AsyncCtx49 + 72 >> 2] = $vararg_buffer7; //@line 1709
  HEAP32[$AsyncCtx49 + 76 >> 2] = $vararg_buffer7; //@line 1711
  HEAP32[$AsyncCtx49 + 80 >> 2] = $vararg_buffer9; //@line 1713
  HEAP32[$AsyncCtx49 + 84 >> 2] = $vararg_buffer9; //@line 1715
  HEAP32[$AsyncCtx49 + 88 >> 2] = $1; //@line 1717
  HEAP32[$AsyncCtx49 + 92 >> 2] = $vararg_buffer3; //@line 1719
  HEAP32[$AsyncCtx49 + 96 >> 2] = $vararg_buffer3; //@line 1721
  HEAP32[$AsyncCtx49 + 100 >> 2] = $vararg_buffer5; //@line 1723
  HEAP32[$AsyncCtx49 + 104 >> 2] = $vararg_buffer5; //@line 1725
  sp = STACKTOP; //@line 1726
  STACKTOP = sp; //@line 1727
  return 0; //@line 1727
 }
 _emscripten_free_async_context($AsyncCtx49 | 0); //@line 1729
 $32 = $0 + 689 | 0; //@line 1731
 HEAP8[$32 >> 0] = $1; //@line 1732
 _printf(10880, $vararg_buffer3) | 0; //@line 1733
 HEAP32[$vararg_buffer5 >> 2] = HEAPU8[$32 >> 0]; //@line 1736
 _printf(11055, $vararg_buffer5) | 0; //@line 1737
 $AsyncCtx45 = _emscripten_alloc_async_context(88, sp) | 0; //@line 1738
 _putchar(10) | 0; //@line 1739
 if (___async) {
  HEAP32[$AsyncCtx45 >> 2] = 89; //@line 1742
  HEAP32[$AsyncCtx45 + 4 >> 2] = $0; //@line 1744
  HEAP32[$AsyncCtx45 + 8 >> 2] = $2; //@line 1746
  HEAP32[$AsyncCtx45 + 12 >> 2] = $vararg_buffer12; //@line 1748
  HEAP32[$AsyncCtx45 + 16 >> 2] = $vararg_buffer12; //@line 1750
  HEAP32[$AsyncCtx45 + 20 >> 2] = $vararg_buffer14; //@line 1752
  HEAP32[$AsyncCtx45 + 24 >> 2] = $vararg_buffer14; //@line 1754
  HEAP32[$AsyncCtx45 + 28 >> 2] = $vararg_buffer14; //@line 1756
  HEAP16[$AsyncCtx45 + 32 >> 1] = $3; //@line 1758
  HEAP32[$AsyncCtx45 + 36 >> 2] = $vararg_buffer21; //@line 1760
  HEAP32[$AsyncCtx45 + 40 >> 2] = $vararg_buffer21; //@line 1762
  HEAP32[$AsyncCtx45 + 44 >> 2] = $vararg_buffer23; //@line 1764
  HEAP32[$AsyncCtx45 + 48 >> 2] = $vararg_buffer23; //@line 1766
  HEAP32[$AsyncCtx45 + 52 >> 2] = $4; //@line 1768
  HEAP32[$AsyncCtx45 + 56 >> 2] = $vararg_buffer17; //@line 1770
  HEAP32[$AsyncCtx45 + 60 >> 2] = $vararg_buffer17; //@line 1772
  HEAP32[$AsyncCtx45 + 64 >> 2] = $vararg_buffer19; //@line 1774
  HEAP32[$AsyncCtx45 + 68 >> 2] = $vararg_buffer19; //@line 1776
  HEAP32[$AsyncCtx45 + 72 >> 2] = $vararg_buffer7; //@line 1778
  HEAP32[$AsyncCtx45 + 76 >> 2] = $vararg_buffer7; //@line 1780
  HEAP32[$AsyncCtx45 + 80 >> 2] = $vararg_buffer9; //@line 1782
  HEAP32[$AsyncCtx45 + 84 >> 2] = $vararg_buffer9; //@line 1784
  sp = STACKTOP; //@line 1785
  STACKTOP = sp; //@line 1786
  return 0; //@line 1786
 }
 _emscripten_free_async_context($AsyncCtx45 | 0); //@line 1788
 $58 = HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] | 0; //@line 1791
 $AsyncCtx = _emscripten_alloc_async_context(84, sp) | 0; //@line 1792
 FUNCTION_TABLE_vii[$58 & 31]($0, $2); //@line 1793
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 90; //@line 1796
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1798
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer12; //@line 1800
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer12; //@line 1802
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer14; //@line 1804
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer14; //@line 1806
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer7; //@line 1808
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer7; //@line 1810
  HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer9; //@line 1812
  HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer9; //@line 1814
  HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer14; //@line 1816
  HEAP16[$AsyncCtx + 44 >> 1] = $3; //@line 1818
  HEAP32[$AsyncCtx + 48 >> 2] = $vararg_buffer21; //@line 1820
  HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer21; //@line 1822
  HEAP32[$AsyncCtx + 56 >> 2] = $vararg_buffer23; //@line 1824
  HEAP32[$AsyncCtx + 60 >> 2] = $vararg_buffer23; //@line 1826
  HEAP32[$AsyncCtx + 64 >> 2] = $4; //@line 1828
  HEAP32[$AsyncCtx + 68 >> 2] = $vararg_buffer17; //@line 1830
  HEAP32[$AsyncCtx + 72 >> 2] = $vararg_buffer17; //@line 1832
  HEAP32[$AsyncCtx + 76 >> 2] = $vararg_buffer19; //@line 1834
  HEAP32[$AsyncCtx + 80 >> 2] = $vararg_buffer19; //@line 1836
  sp = STACKTOP; //@line 1837
  STACKTOP = sp; //@line 1838
  return 0; //@line 1838
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1840
 _printf(10880, $vararg_buffer7) | 0; //@line 1841
 HEAP32[$vararg_buffer9 >> 2] = 5; //@line 1842
 _printf(10946, $vararg_buffer9) | 0; //@line 1843
 $AsyncCtx41 = _emscripten_alloc_async_context(68, sp) | 0; //@line 1844
 _putchar(10) | 0; //@line 1845
 if (___async) {
  HEAP32[$AsyncCtx41 >> 2] = 91; //@line 1848
  HEAP32[$AsyncCtx41 + 4 >> 2] = $0; //@line 1850
  HEAP32[$AsyncCtx41 + 8 >> 2] = $vararg_buffer12; //@line 1852
  HEAP32[$AsyncCtx41 + 12 >> 2] = $vararg_buffer12; //@line 1854
  HEAP32[$AsyncCtx41 + 16 >> 2] = $vararg_buffer14; //@line 1856
  HEAP32[$AsyncCtx41 + 20 >> 2] = $vararg_buffer14; //@line 1858
  HEAP32[$AsyncCtx41 + 24 >> 2] = $vararg_buffer14; //@line 1860
  HEAP16[$AsyncCtx41 + 28 >> 1] = $3; //@line 1862
  HEAP32[$AsyncCtx41 + 32 >> 2] = $vararg_buffer21; //@line 1864
  HEAP32[$AsyncCtx41 + 36 >> 2] = $vararg_buffer21; //@line 1866
  HEAP32[$AsyncCtx41 + 40 >> 2] = $vararg_buffer23; //@line 1868
  HEAP32[$AsyncCtx41 + 44 >> 2] = $vararg_buffer23; //@line 1870
  HEAP32[$AsyncCtx41 + 48 >> 2] = $4; //@line 1872
  HEAP32[$AsyncCtx41 + 52 >> 2] = $vararg_buffer17; //@line 1874
  HEAP32[$AsyncCtx41 + 56 >> 2] = $vararg_buffer17; //@line 1876
  HEAP32[$AsyncCtx41 + 60 >> 2] = $vararg_buffer19; //@line 1878
  HEAP32[$AsyncCtx41 + 64 >> 2] = $vararg_buffer19; //@line 1880
  sp = STACKTOP; //@line 1881
  STACKTOP = sp; //@line 1882
  return 0; //@line 1882
 }
 _emscripten_free_async_context($AsyncCtx41 | 0); //@line 1884
 $AsyncCtx52 = _emscripten_alloc_async_context(68, sp) | 0; //@line 1885
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 1886
 if (___async) {
  HEAP32[$AsyncCtx52 >> 2] = 92; //@line 1889
  HEAP32[$AsyncCtx52 + 4 >> 2] = $vararg_buffer12; //@line 1891
  HEAP32[$AsyncCtx52 + 8 >> 2] = $vararg_buffer12; //@line 1893
  HEAP32[$AsyncCtx52 + 12 >> 2] = $vararg_buffer14; //@line 1895
  HEAP32[$AsyncCtx52 + 16 >> 2] = $vararg_buffer14; //@line 1897
  HEAP32[$AsyncCtx52 + 20 >> 2] = $0; //@line 1899
  HEAP32[$AsyncCtx52 + 24 >> 2] = $vararg_buffer14; //@line 1901
  HEAP16[$AsyncCtx52 + 28 >> 1] = $3; //@line 1903
  HEAP32[$AsyncCtx52 + 32 >> 2] = $vararg_buffer21; //@line 1905
  HEAP32[$AsyncCtx52 + 36 >> 2] = $vararg_buffer21; //@line 1907
  HEAP32[$AsyncCtx52 + 40 >> 2] = $vararg_buffer23; //@line 1909
  HEAP32[$AsyncCtx52 + 44 >> 2] = $vararg_buffer23; //@line 1911
  HEAP32[$AsyncCtx52 + 48 >> 2] = $4; //@line 1913
  HEAP32[$AsyncCtx52 + 52 >> 2] = $vararg_buffer17; //@line 1915
  HEAP32[$AsyncCtx52 + 56 >> 2] = $vararg_buffer17; //@line 1917
  HEAP32[$AsyncCtx52 + 60 >> 2] = $vararg_buffer19; //@line 1919
  HEAP32[$AsyncCtx52 + 64 >> 2] = $vararg_buffer19; //@line 1921
  sp = STACKTOP; //@line 1922
  STACKTOP = sp; //@line 1923
  return 0; //@line 1923
 }
 _emscripten_free_async_context($AsyncCtx52 | 0); //@line 1925
 _printf(10880, $vararg_buffer12) | 0; //@line 1926
 HEAP32[$vararg_buffer14 >> 2] = 5; //@line 1927
 _printf(10975, $vararg_buffer14) | 0; //@line 1928
 $AsyncCtx37 = _emscripten_alloc_async_context(52, sp) | 0; //@line 1929
 _putchar(10) | 0; //@line 1930
 if (___async) {
  HEAP32[$AsyncCtx37 >> 2] = 93; //@line 1933
  HEAP32[$AsyncCtx37 + 4 >> 2] = $0; //@line 1935
  HEAP32[$AsyncCtx37 + 8 >> 2] = $vararg_buffer14; //@line 1937
  HEAP16[$AsyncCtx37 + 12 >> 1] = $3; //@line 1939
  HEAP32[$AsyncCtx37 + 16 >> 2] = $vararg_buffer21; //@line 1941
  HEAP32[$AsyncCtx37 + 20 >> 2] = $vararg_buffer21; //@line 1943
  HEAP32[$AsyncCtx37 + 24 >> 2] = $vararg_buffer23; //@line 1945
  HEAP32[$AsyncCtx37 + 28 >> 2] = $vararg_buffer23; //@line 1947
  HEAP32[$AsyncCtx37 + 32 >> 2] = $4; //@line 1949
  HEAP32[$AsyncCtx37 + 36 >> 2] = $vararg_buffer17; //@line 1951
  HEAP32[$AsyncCtx37 + 40 >> 2] = $vararg_buffer17; //@line 1953
  HEAP32[$AsyncCtx37 + 44 >> 2] = $vararg_buffer19; //@line 1955
  HEAP32[$AsyncCtx37 + 48 >> 2] = $vararg_buffer19; //@line 1957
  sp = STACKTOP; //@line 1958
  STACKTOP = sp; //@line 1959
  return 0; //@line 1959
 }
 _emscripten_free_async_context($AsyncCtx37 | 0); //@line 1961
 $AsyncCtx68 = _emscripten_alloc_async_context(52, sp) | 0; //@line 1962
 _wait_ms(1); //@line 1963
 if (___async) {
  HEAP32[$AsyncCtx68 >> 2] = 94; //@line 1966
  HEAP32[$AsyncCtx68 + 4 >> 2] = $0; //@line 1968
  HEAP32[$AsyncCtx68 + 8 >> 2] = $vararg_buffer14; //@line 1970
  HEAP16[$AsyncCtx68 + 12 >> 1] = $3; //@line 1972
  HEAP32[$AsyncCtx68 + 16 >> 2] = $vararg_buffer21; //@line 1974
  HEAP32[$AsyncCtx68 + 20 >> 2] = $vararg_buffer21; //@line 1976
  HEAP32[$AsyncCtx68 + 24 >> 2] = $vararg_buffer23; //@line 1978
  HEAP32[$AsyncCtx68 + 28 >> 2] = $vararg_buffer23; //@line 1980
  HEAP32[$AsyncCtx68 + 32 >> 2] = $4; //@line 1982
  HEAP32[$AsyncCtx68 + 36 >> 2] = $vararg_buffer17; //@line 1984
  HEAP32[$AsyncCtx68 + 40 >> 2] = $vararg_buffer17; //@line 1986
  HEAP32[$AsyncCtx68 + 44 >> 2] = $vararg_buffer19; //@line 1988
  HEAP32[$AsyncCtx68 + 48 >> 2] = $vararg_buffer19; //@line 1990
  sp = STACKTOP; //@line 1991
  STACKTOP = sp; //@line 1992
  return 0; //@line 1992
 }
 _emscripten_free_async_context($AsyncCtx68 | 0); //@line 1994
 $AsyncCtx55 = _emscripten_alloc_async_context(56, sp) | 0; //@line 1995
 __ZN4mbed5TimerC2Ev($vararg_buffer14); //@line 1996
 if (___async) {
  HEAP32[$AsyncCtx55 >> 2] = 95; //@line 1999
  HEAP32[$AsyncCtx55 + 4 >> 2] = $0; //@line 2001
  HEAP32[$AsyncCtx55 + 8 >> 2] = $vararg_buffer14; //@line 2003
  HEAP16[$AsyncCtx55 + 12 >> 1] = $3; //@line 2005
  HEAP32[$AsyncCtx55 + 16 >> 2] = $vararg_buffer21; //@line 2007
  HEAP32[$AsyncCtx55 + 20 >> 2] = $vararg_buffer21; //@line 2009
  HEAP32[$AsyncCtx55 + 24 >> 2] = $vararg_buffer23; //@line 2011
  HEAP32[$AsyncCtx55 + 28 >> 2] = $vararg_buffer23; //@line 2013
  HEAP32[$AsyncCtx55 + 32 >> 2] = $4; //@line 2015
  HEAP32[$AsyncCtx55 + 36 >> 2] = $vararg_buffer14; //@line 2017
  HEAP32[$AsyncCtx55 + 40 >> 2] = $vararg_buffer17; //@line 2019
  HEAP32[$AsyncCtx55 + 44 >> 2] = $vararg_buffer17; //@line 2021
  HEAP32[$AsyncCtx55 + 48 >> 2] = $vararg_buffer19; //@line 2023
  HEAP32[$AsyncCtx55 + 52 >> 2] = $vararg_buffer19; //@line 2025
  sp = STACKTOP; //@line 2026
  STACKTOP = sp; //@line 2027
  return 0; //@line 2027
 }
 _emscripten_free_async_context($AsyncCtx55 | 0); //@line 2029
 $AsyncCtx58 = _emscripten_alloc_async_context(56, sp) | 0; //@line 2030
 __ZN4mbed5Timer5startEv($vararg_buffer14); //@line 2031
 if (___async) {
  HEAP32[$AsyncCtx58 >> 2] = 96; //@line 2034
  HEAP16[$AsyncCtx58 + 4 >> 1] = $3; //@line 2036
  HEAP32[$AsyncCtx58 + 8 >> 2] = $vararg_buffer14; //@line 2038
  HEAP32[$AsyncCtx58 + 12 >> 2] = $4; //@line 2040
  HEAP32[$AsyncCtx58 + 16 >> 2] = $vararg_buffer21; //@line 2042
  HEAP32[$AsyncCtx58 + 20 >> 2] = $vararg_buffer21; //@line 2044
  HEAP32[$AsyncCtx58 + 24 >> 2] = $vararg_buffer23; //@line 2046
  HEAP32[$AsyncCtx58 + 28 >> 2] = $vararg_buffer23; //@line 2048
  HEAP32[$AsyncCtx58 + 32 >> 2] = $0; //@line 2050
  HEAP32[$AsyncCtx58 + 36 >> 2] = $vararg_buffer14; //@line 2052
  HEAP32[$AsyncCtx58 + 40 >> 2] = $vararg_buffer17; //@line 2054
  HEAP32[$AsyncCtx58 + 44 >> 2] = $vararg_buffer17; //@line 2056
  HEAP32[$AsyncCtx58 + 48 >> 2] = $vararg_buffer19; //@line 2058
  HEAP32[$AsyncCtx58 + 52 >> 2] = $vararg_buffer19; //@line 2060
  sp = STACKTOP; //@line 2061
  STACKTOP = sp; //@line 2062
  return 0; //@line 2062
 }
 _emscripten_free_async_context($AsyncCtx58 | 0); //@line 2064
 L28 : do {
  if ($3 << 16 >> 16 < -1) {
   $AsyncCtx64 = _emscripten_alloc_async_context(36, sp) | 0; //@line 2068
   $162 = __ZN4mbed5Timer7read_msEv($vararg_buffer14) | 0; //@line 2069
   if (___async) {
    HEAP32[$AsyncCtx64 >> 2] = 97; //@line 2072
    HEAP32[$AsyncCtx64 + 4 >> 2] = $4; //@line 2074
    HEAP32[$AsyncCtx64 + 8 >> 2] = $vararg_buffer17; //@line 2076
    HEAP32[$AsyncCtx64 + 12 >> 2] = $vararg_buffer17; //@line 2078
    HEAP32[$AsyncCtx64 + 16 >> 2] = $vararg_buffer19; //@line 2080
    HEAP32[$AsyncCtx64 + 20 >> 2] = $vararg_buffer19; //@line 2082
    HEAP32[$AsyncCtx64 + 24 >> 2] = $0; //@line 2084
    HEAP32[$AsyncCtx64 + 28 >> 2] = $vararg_buffer14; //@line 2086
    HEAP32[$AsyncCtx64 + 32 >> 2] = $vararg_buffer14; //@line 2088
    sp = STACKTOP; //@line 2089
    STACKTOP = sp; //@line 2090
    return 0; //@line 2090
   }
   _emscripten_free_async_context($AsyncCtx64 | 0); //@line 2092
   if (($162 | 0) < ($4 | 0)) {
    _printf(10880, $vararg_buffer17) | 0; //@line 2095
    _printf(11068, $vararg_buffer19) | 0; //@line 2096
    $AsyncCtx34 = _emscripten_alloc_async_context(16, sp) | 0; //@line 2097
    _putchar(10) | 0; //@line 2098
    if (___async) {
     HEAP32[$AsyncCtx34 >> 2] = 98; //@line 2101
     HEAP32[$AsyncCtx34 + 4 >> 2] = $0; //@line 2103
     HEAP32[$AsyncCtx34 + 8 >> 2] = $vararg_buffer14; //@line 2105
     HEAP32[$AsyncCtx34 + 12 >> 2] = $vararg_buffer14; //@line 2107
     sp = STACKTOP; //@line 2108
     STACKTOP = sp; //@line 2109
     return 0; //@line 2109
    } else {
     _emscripten_free_async_context($AsyncCtx34 | 0); //@line 2111
     $$0$off0 = 0; //@line 2112
     break;
    }
   } else {
    $$0$off0 = 1; //@line 2116
   }
  } else {
   while (1) {
    $AsyncCtx61 = _emscripten_alloc_async_context(36, sp) | 0; //@line 2120
    $175 = __ZN4mbed5Timer7read_msEv($vararg_buffer14) | 0; //@line 2121
    if (___async) {
     label = 27; //@line 2124
     break;
    }
    _emscripten_free_async_context($AsyncCtx61 | 0); //@line 2127
    if (($175 | 0) >= ($4 | 0)) {
     $$0$off0 = 1; //@line 2130
     break L28;
    }
    _printf(10880, $vararg_buffer21) | 0; //@line 2133
    _printf(11068, $vararg_buffer23) | 0; //@line 2134
    $AsyncCtx30 = _emscripten_alloc_async_context(36, sp) | 0; //@line 2135
    _putchar(10) | 0; //@line 2136
    if (___async) {
     label = 30; //@line 2139
     break;
    }
    _emscripten_free_async_context($AsyncCtx30 | 0); //@line 2142
   }
   if ((label | 0) == 27) {
    HEAP32[$AsyncCtx61 >> 2] = 99; //@line 2145
    HEAP32[$AsyncCtx61 + 4 >> 2] = $4; //@line 2147
    HEAP32[$AsyncCtx61 + 8 >> 2] = $vararg_buffer21; //@line 2149
    HEAP32[$AsyncCtx61 + 12 >> 2] = $vararg_buffer21; //@line 2151
    HEAP32[$AsyncCtx61 + 16 >> 2] = $vararg_buffer23; //@line 2153
    HEAP32[$AsyncCtx61 + 20 >> 2] = $vararg_buffer23; //@line 2155
    HEAP32[$AsyncCtx61 + 24 >> 2] = $0; //@line 2157
    HEAP32[$AsyncCtx61 + 28 >> 2] = $vararg_buffer14; //@line 2159
    HEAP32[$AsyncCtx61 + 32 >> 2] = $vararg_buffer14; //@line 2161
    sp = STACKTOP; //@line 2162
    STACKTOP = sp; //@line 2163
    return 0; //@line 2163
   } else if ((label | 0) == 30) {
    HEAP32[$AsyncCtx30 >> 2] = 100; //@line 2166
    HEAP32[$AsyncCtx30 + 4 >> 2] = $vararg_buffer14; //@line 2168
    HEAP32[$AsyncCtx30 + 8 >> 2] = $4; //@line 2170
    HEAP32[$AsyncCtx30 + 12 >> 2] = $vararg_buffer21; //@line 2172
    HEAP32[$AsyncCtx30 + 16 >> 2] = $vararg_buffer21; //@line 2174
    HEAP32[$AsyncCtx30 + 20 >> 2] = $vararg_buffer23; //@line 2176
    HEAP32[$AsyncCtx30 + 24 >> 2] = $vararg_buffer23; //@line 2178
    HEAP32[$AsyncCtx30 + 28 >> 2] = $0; //@line 2180
    HEAP32[$AsyncCtx30 + 32 >> 2] = $vararg_buffer14; //@line 2182
    sp = STACKTOP; //@line 2183
    STACKTOP = sp; //@line 2184
    return 0; //@line 2184
   }
  }
 } while (0);
 $195 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 2190
 $AsyncCtx27 = _emscripten_alloc_async_context(16, sp) | 0; //@line 2191
 FUNCTION_TABLE_vi[$195 & 1023]($0); //@line 2192
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 101; //@line 2195
  HEAP32[$AsyncCtx27 + 4 >> 2] = $vararg_buffer14; //@line 2197
  HEAP32[$AsyncCtx27 + 8 >> 2] = $vararg_buffer14; //@line 2199
  HEAP8[$AsyncCtx27 + 12 >> 0] = $$0$off0 & 1; //@line 2202
  sp = STACKTOP; //@line 2203
  STACKTOP = sp; //@line 2204
  return 0; //@line 2204
 } else {
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 2206
  __ZN4mbed5TimerD2Ev($vararg_buffer14); //@line 2207
  STACKTOP = sp; //@line 2208
  return $$0$off0 | 0; //@line 2208
 }
 return 0; //@line 2210
}
function __ZN12LoRaWANStack9handle_txEhPKhth($0, $1, $2, $3, $trunc) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $trunc = $trunc | 0;
 var $$0 = 0, $$0$i43 = 0, $$1 = 0, $123 = 0, $130 = 0, $154 = 0, $155 = 0, $156 = 0, $191 = 0, $196 = 0, $205 = 0, $220 = 0, $4 = 0, $48 = 0, $49 = 0, $50 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx36 = 0, $AsyncCtx40 = 0, $AsyncCtx44 = 0, $AsyncCtx47 = 0, $AsyncCtx51 = 0, $AsyncCtx55 = 0, $AsyncCtx59 = 0, $AsyncCtx63 = 0, $AsyncCtx66 = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer29 = 0, $vararg_buffer31 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8304
 STACKTOP = STACKTOP + 128 | 0; //@line 8305
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 8305
 $vararg_buffer31 = sp + 112 | 0; //@line 8306
 $vararg_buffer29 = sp + 104 | 0; //@line 8307
 $vararg_buffer25 = sp + 96 | 0; //@line 8308
 $vararg_buffer23 = sp + 88 | 0; //@line 8309
 $vararg_buffer19 = sp + 80 | 0; //@line 8310
 $vararg_buffer17 = sp + 72 | 0; //@line 8311
 $vararg_buffer15 = sp + 64 | 0; //@line 8312
 $vararg_buffer13 = sp + 56 | 0; //@line 8313
 $vararg_buffer11 = sp + 48 | 0; //@line 8314
 $vararg_buffer9 = sp + 40 | 0; //@line 8315
 $vararg_buffer6 = sp + 32 | 0; //@line 8316
 $vararg_buffer4 = sp + 24 | 0; //@line 8317
 $vararg_buffer1 = sp + 8 | 0; //@line 8318
 _printf(12115, sp) | 0; //@line 8320
 $4 = $0 + 1932 | 0; //@line 8321
 $7 = $0 + 1964 | 0; //@line 8324
 $9 = HEAPU8[$7 >> 0] | 0; //@line 8326
 HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$4 >> 0]; //@line 8327
 HEAP32[$vararg_buffer1 + 4 >> 2] = $9; //@line 8329
 _printf(12282, $vararg_buffer1) | 0; //@line 8330
 $AsyncCtx55 = _emscripten_alloc_async_context(136, sp) | 0; //@line 8331
 _putchar(10) | 0; //@line 8332
 if (___async) {
  HEAP32[$AsyncCtx55 >> 2] = 284; //@line 8335
  HEAP32[$AsyncCtx55 + 4 >> 2] = $vararg_buffer17; //@line 8337
  HEAP32[$AsyncCtx55 + 8 >> 2] = $vararg_buffer11; //@line 8339
  HEAP32[$AsyncCtx55 + 12 >> 2] = $4; //@line 8341
  HEAP32[$AsyncCtx55 + 16 >> 2] = $vararg_buffer6; //@line 8343
  HEAP32[$AsyncCtx55 + 20 >> 2] = $vararg_buffer23; //@line 8345
  HEAP32[$AsyncCtx55 + 24 >> 2] = $vararg_buffer6; //@line 8347
  HEAP16[$AsyncCtx55 + 28 >> 1] = $3; //@line 8349
  HEAP32[$AsyncCtx55 + 32 >> 2] = $2; //@line 8351
  HEAP8[$AsyncCtx55 + 36 >> 0] = $trunc; //@line 8353
  HEAP32[$AsyncCtx55 + 40 >> 2] = $vararg_buffer29; //@line 8355
  HEAP32[$AsyncCtx55 + 44 >> 2] = $vararg_buffer23; //@line 8357
  HEAP32[$AsyncCtx55 + 48 >> 2] = $vararg_buffer31; //@line 8359
  HEAP8[$AsyncCtx55 + 52 >> 0] = $1; //@line 8361
  HEAP32[$AsyncCtx55 + 56 >> 2] = $0; //@line 8363
  HEAP32[$AsyncCtx55 + 60 >> 2] = $vararg_buffer17; //@line 8365
  HEAP32[$AsyncCtx55 + 64 >> 2] = $vararg_buffer31; //@line 8367
  HEAP32[$AsyncCtx55 + 68 >> 2] = $vararg_buffer11; //@line 8369
  HEAP32[$AsyncCtx55 + 72 >> 2] = $7; //@line 8371
  HEAP32[$AsyncCtx55 + 76 >> 2] = $vararg_buffer4; //@line 8373
  HEAP32[$AsyncCtx55 + 80 >> 2] = $vararg_buffer29; //@line 8375
  HEAP32[$AsyncCtx55 + 84 >> 2] = $vararg_buffer15; //@line 8377
  HEAP32[$AsyncCtx55 + 88 >> 2] = $vararg_buffer9; //@line 8379
  HEAP32[$AsyncCtx55 + 92 >> 2] = $vararg_buffer15; //@line 8381
  HEAP32[$AsyncCtx55 + 96 >> 2] = $vararg_buffer9; //@line 8383
  HEAP32[$AsyncCtx55 + 100 >> 2] = $vararg_buffer13; //@line 8385
  HEAP32[$AsyncCtx55 + 104 >> 2] = $vararg_buffer19; //@line 8387
  HEAP32[$AsyncCtx55 + 108 >> 2] = $vararg_buffer25; //@line 8389
  HEAP32[$AsyncCtx55 + 112 >> 2] = $vararg_buffer6; //@line 8391
  HEAP32[$AsyncCtx55 + 116 >> 2] = $vararg_buffer25; //@line 8393
  HEAP32[$AsyncCtx55 + 120 >> 2] = $vararg_buffer1; //@line 8395
  HEAP32[$AsyncCtx55 + 124 >> 2] = $vararg_buffer4; //@line 8397
  HEAP32[$AsyncCtx55 + 128 >> 2] = $vararg_buffer13; //@line 8399
  HEAP32[$AsyncCtx55 + 132 >> 2] = $vararg_buffer19; //@line 8401
  sp = STACKTOP; //@line 8402
  STACKTOP = sp; //@line 8403
  return 0; //@line 8403
 }
 _emscripten_free_async_context($AsyncCtx55 | 0); //@line 8405
 if (!(HEAP8[$4 >> 0] | 0)) {
  $$1 = -1017; //@line 8409
  STACKTOP = sp; //@line 8410
  return $$1 | 0; //@line 8410
 }
 if (HEAP8[$7 >> 0] | 0) {
  $$1 = -1001; //@line 8415
  STACKTOP = sp; //@line 8416
  return $$1 | 0; //@line 8416
 }
 $48 = $3 << 16 >> 16 == 0; //@line 8419
 if (!(($2 | 0) != 0 | $48)) {
  $$1 = -1003; //@line 8422
  STACKTOP = sp; //@line 8423
  return $$1 | 0; //@line 8423
 }
 HEAP32[$vararg_buffer1 >> 2] = 1; //@line 8425
 $49 = $0 + 4 | 0; //@line 8426
 $AsyncCtx63 = _emscripten_alloc_async_context(136, sp) | 0; //@line 8427
 $50 = __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($49, $vararg_buffer1) | 0; //@line 8428
 if (___async) {
  HEAP32[$AsyncCtx63 >> 2] = 285; //@line 8431
  HEAP32[$AsyncCtx63 + 4 >> 2] = $vararg_buffer17; //@line 8433
  HEAP32[$AsyncCtx63 + 8 >> 2] = $vararg_buffer11; //@line 8435
  HEAP32[$AsyncCtx63 + 12 >> 2] = $vararg_buffer6; //@line 8437
  HEAP32[$AsyncCtx63 + 16 >> 2] = $vararg_buffer23; //@line 8439
  HEAP32[$AsyncCtx63 + 20 >> 2] = $vararg_buffer6; //@line 8441
  HEAP16[$AsyncCtx63 + 24 >> 1] = $3; //@line 8443
  HEAP32[$AsyncCtx63 + 28 >> 2] = $2; //@line 8445
  HEAP8[$AsyncCtx63 + 32 >> 0] = $48 & 1; //@line 8448
  HEAP8[$AsyncCtx63 + 33 >> 0] = $trunc; //@line 8450
  HEAP32[$AsyncCtx63 + 36 >> 2] = $vararg_buffer29; //@line 8452
  HEAP32[$AsyncCtx63 + 40 >> 2] = $vararg_buffer23; //@line 8454
  HEAP32[$AsyncCtx63 + 44 >> 2] = $vararg_buffer31; //@line 8456
  HEAP8[$AsyncCtx63 + 48 >> 0] = $1; //@line 8458
  HEAP32[$AsyncCtx63 + 52 >> 2] = $0; //@line 8460
  HEAP32[$AsyncCtx63 + 56 >> 2] = $vararg_buffer17; //@line 8462
  HEAP32[$AsyncCtx63 + 60 >> 2] = $vararg_buffer31; //@line 8464
  HEAP32[$AsyncCtx63 + 64 >> 2] = $vararg_buffer11; //@line 8466
  HEAP32[$AsyncCtx63 + 68 >> 2] = $vararg_buffer1; //@line 8468
  HEAP32[$AsyncCtx63 + 72 >> 2] = $vararg_buffer4; //@line 8470
  HEAP32[$AsyncCtx63 + 76 >> 2] = $vararg_buffer29; //@line 8472
  HEAP32[$AsyncCtx63 + 80 >> 2] = $vararg_buffer15; //@line 8474
  HEAP32[$AsyncCtx63 + 84 >> 2] = $vararg_buffer9; //@line 8476
  HEAP32[$AsyncCtx63 + 88 >> 2] = $49; //@line 8478
  HEAP32[$AsyncCtx63 + 92 >> 2] = $vararg_buffer15; //@line 8480
  HEAP32[$AsyncCtx63 + 96 >> 2] = $vararg_buffer9; //@line 8482
  HEAP32[$AsyncCtx63 + 100 >> 2] = $vararg_buffer13; //@line 8484
  HEAP32[$AsyncCtx63 + 104 >> 2] = $vararg_buffer19; //@line 8486
  HEAP32[$AsyncCtx63 + 108 >> 2] = $vararg_buffer25; //@line 8488
  HEAP32[$AsyncCtx63 + 112 >> 2] = $vararg_buffer6; //@line 8490
  HEAP32[$AsyncCtx63 + 116 >> 2] = $vararg_buffer25; //@line 8492
  HEAP32[$AsyncCtx63 + 120 >> 2] = $vararg_buffer1; //@line 8494
  HEAP32[$AsyncCtx63 + 124 >> 2] = $vararg_buffer4; //@line 8496
  HEAP32[$AsyncCtx63 + 128 >> 2] = $vararg_buffer13; //@line 8498
  HEAP32[$AsyncCtx63 + 132 >> 2] = $vararg_buffer19; //@line 8500
  sp = STACKTOP; //@line 8501
  STACKTOP = sp; //@line 8502
  return 0; //@line 8502
 }
 _emscripten_free_async_context($AsyncCtx63 | 0); //@line 8504
 _printf(12115, $vararg_buffer4) | 0; //@line 8505
 HEAP32[$vararg_buffer6 >> 2] = $50; //@line 8506
 _printf(12335, $vararg_buffer6) | 0; //@line 8507
 $AsyncCtx51 = _emscripten_alloc_async_context(124, sp) | 0; //@line 8508
 _putchar(10) | 0; //@line 8509
 if (___async) {
  HEAP32[$AsyncCtx51 >> 2] = 286; //@line 8512
  HEAP32[$AsyncCtx51 + 4 >> 2] = $vararg_buffer1; //@line 8514
  HEAP32[$AsyncCtx51 + 8 >> 2] = $0; //@line 8516
  HEAP32[$AsyncCtx51 + 12 >> 2] = $vararg_buffer29; //@line 8518
  HEAP32[$AsyncCtx51 + 16 >> 2] = $vararg_buffer29; //@line 8520
  HEAP32[$AsyncCtx51 + 20 >> 2] = $vararg_buffer31; //@line 8522
  HEAP32[$AsyncCtx51 + 24 >> 2] = $vararg_buffer31; //@line 8524
  HEAP32[$AsyncCtx51 + 28 >> 2] = $2; //@line 8526
  HEAP8[$AsyncCtx51 + 32 >> 0] = $trunc; //@line 8528
  HEAP32[$AsyncCtx51 + 36 >> 2] = $vararg_buffer23; //@line 8530
  HEAP32[$AsyncCtx51 + 40 >> 2] = $vararg_buffer23; //@line 8532
  HEAP32[$AsyncCtx51 + 44 >> 2] = $vararg_buffer25; //@line 8534
  HEAP32[$AsyncCtx51 + 48 >> 2] = $vararg_buffer25; //@line 8536
  HEAP32[$AsyncCtx51 + 52 >> 2] = $50; //@line 8538
  HEAP32[$AsyncCtx51 + 56 >> 2] = $vararg_buffer6; //@line 8540
  HEAP16[$AsyncCtx51 + 60 >> 1] = $3; //@line 8542
  HEAP8[$AsyncCtx51 + 62 >> 0] = $1; //@line 8544
  HEAP32[$AsyncCtx51 + 64 >> 2] = $vararg_buffer9; //@line 8546
  HEAP32[$AsyncCtx51 + 68 >> 2] = $vararg_buffer9; //@line 8548
  HEAP32[$AsyncCtx51 + 72 >> 2] = $vararg_buffer11; //@line 8550
  HEAP32[$AsyncCtx51 + 76 >> 2] = $vararg_buffer11; //@line 8552
  HEAP32[$AsyncCtx51 + 80 >> 2] = $vararg_buffer1; //@line 8554
  HEAP8[$AsyncCtx51 + 84 >> 0] = $48 & 1; //@line 8557
  HEAP32[$AsyncCtx51 + 88 >> 2] = $vararg_buffer17; //@line 8559
  HEAP32[$AsyncCtx51 + 92 >> 2] = $vararg_buffer17; //@line 8561
  HEAP32[$AsyncCtx51 + 96 >> 2] = $vararg_buffer19; //@line 8563
  HEAP32[$AsyncCtx51 + 100 >> 2] = $vararg_buffer19; //@line 8565
  HEAP32[$AsyncCtx51 + 104 >> 2] = $49; //@line 8567
  HEAP32[$AsyncCtx51 + 108 >> 2] = $vararg_buffer13; //@line 8569
  HEAP32[$AsyncCtx51 + 112 >> 2] = $vararg_buffer13; //@line 8571
  HEAP32[$AsyncCtx51 + 116 >> 2] = $vararg_buffer15; //@line 8573
  HEAP32[$AsyncCtx51 + 120 >> 2] = $vararg_buffer15; //@line 8575
  sp = STACKTOP; //@line 8576
  STACKTOP = sp; //@line 8577
  return 0; //@line 8577
 }
 _emscripten_free_async_context($AsyncCtx51 | 0); //@line 8579
 if (!$50) {
  if (!(HEAP8[$vararg_buffer1 + 4 >> 0] | 0)) {
   $$0 = -1009; //@line 8586
  } else {
   label = 12; //@line 8588
  }
 } else {
  label = 12; //@line 8591
 }
 do {
  if ((label | 0) == 12) {
   if (($1 + -1 & 255) >= 223) {
    _printf(11863, $vararg_buffer9) | 0; //@line 8598
    _printf(12352, $vararg_buffer11) | 0; //@line 8599
    $AsyncCtx47 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8600
    _putchar(10) | 0; //@line 8601
    if (___async) {
     HEAP32[$AsyncCtx47 >> 2] = 287; //@line 8604
     HEAP32[$AsyncCtx47 + 4 >> 2] = $vararg_buffer1; //@line 8606
     sp = STACKTOP; //@line 8607
     STACKTOP = sp; //@line 8608
     return 0; //@line 8608
    } else {
     _emscripten_free_async_context($AsyncCtx47 | 0); //@line 8610
     $$0 = -1015; //@line 8611
     break;
    }
   }
   $123 = $0 + 2285 | 0; //@line 8615
   HEAP8[$123 >> 0] = $1; //@line 8616
   if ($trunc << 24 >> 24 == 0 | ($trunc & 15) == 3) {
    _printf(11863, $vararg_buffer13) | 0; //@line 8622
    _printf(12389, $vararg_buffer15) | 0; //@line 8623
    $AsyncCtx44 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8624
    _putchar(10) | 0; //@line 8625
    if (___async) {
     HEAP32[$AsyncCtx44 >> 2] = 288; //@line 8628
     HEAP32[$AsyncCtx44 + 4 >> 2] = $vararg_buffer1; //@line 8630
     sp = STACKTOP; //@line 8631
     STACKTOP = sp; //@line 8632
     return 0; //@line 8632
    } else {
     _emscripten_free_async_context($AsyncCtx44 | 0); //@line 8634
     $$0 = -1003; //@line 8635
     break;
    }
   }
   HEAP8[$0 + 1965 >> 0] = $1; //@line 8640
   $AsyncCtx59 = _emscripten_alloc_async_context(84, sp) | 0; //@line 8642
   $130 = __ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t($49, $3 & 255, $vararg_buffer6) | 0; //@line 8643
   if (___async) {
    HEAP32[$AsyncCtx59 >> 2] = 289; //@line 8646
    HEAP32[$AsyncCtx59 + 4 >> 2] = $vararg_buffer1; //@line 8648
    HEAP32[$AsyncCtx59 + 8 >> 2] = $0; //@line 8650
    HEAP32[$AsyncCtx59 + 12 >> 2] = $vararg_buffer29; //@line 8652
    HEAP32[$AsyncCtx59 + 16 >> 2] = $vararg_buffer29; //@line 8654
    HEAP32[$AsyncCtx59 + 20 >> 2] = $vararg_buffer31; //@line 8656
    HEAP32[$AsyncCtx59 + 24 >> 2] = $vararg_buffer31; //@line 8658
    HEAP32[$AsyncCtx59 + 28 >> 2] = $2; //@line 8660
    HEAP8[$AsyncCtx59 + 32 >> 0] = $trunc; //@line 8662
    HEAP32[$AsyncCtx59 + 36 >> 2] = $vararg_buffer23; //@line 8664
    HEAP32[$AsyncCtx59 + 40 >> 2] = $vararg_buffer23; //@line 8666
    HEAP32[$AsyncCtx59 + 44 >> 2] = $vararg_buffer25; //@line 8668
    HEAP32[$AsyncCtx59 + 48 >> 2] = $vararg_buffer25; //@line 8670
    HEAP32[$AsyncCtx59 + 52 >> 2] = $123; //@line 8672
    HEAP32[$AsyncCtx59 + 56 >> 2] = $vararg_buffer6; //@line 8674
    HEAP32[$AsyncCtx59 + 60 >> 2] = $vararg_buffer6; //@line 8676
    HEAP16[$AsyncCtx59 + 64 >> 1] = $3; //@line 8678
    HEAP8[$AsyncCtx59 + 66 >> 0] = $48 & 1; //@line 8681
    HEAP32[$AsyncCtx59 + 68 >> 2] = $vararg_buffer17; //@line 8683
    HEAP32[$AsyncCtx59 + 72 >> 2] = $vararg_buffer17; //@line 8685
    HEAP32[$AsyncCtx59 + 76 >> 2] = $vararg_buffer19; //@line 8687
    HEAP32[$AsyncCtx59 + 80 >> 2] = $vararg_buffer19; //@line 8689
    sp = STACKTOP; //@line 8690
    STACKTOP = sp; //@line 8691
    return 0; //@line 8691
   }
   _emscripten_free_async_context($AsyncCtx59 | 0); //@line 8693
   $154 = ($130 | 0) == -1010 ? HEAP8[$vararg_buffer6 >> 0] | 0 : HEAP8[$vararg_buffer6 + 1 >> 0] | 0; //@line 8698
   $$0$i43 = $154 & 255; //@line 8699
   $155 = $154 & 255; //@line 8700
   $156 = $3 & 65535; //@line 8701
   do {
    if (($$0$i43 & 65535) < ($3 & 65535)) {
     _printf(12115, $vararg_buffer17) | 0; //@line 8705
     HEAP32[$vararg_buffer19 >> 2] = $156; //@line 8706
     HEAP32[$vararg_buffer19 + 4 >> 2] = $155; //@line 8708
     _printf(12449, $vararg_buffer19) | 0; //@line 8709
     $AsyncCtx40 = _emscripten_alloc_async_context(68, sp) | 0; //@line 8710
     _putchar(10) | 0; //@line 8711
     if (___async) {
      HEAP32[$AsyncCtx40 >> 2] = 290; //@line 8714
      HEAP32[$AsyncCtx40 + 4 >> 2] = $156; //@line 8716
      HEAP32[$AsyncCtx40 + 8 >> 2] = $155; //@line 8718
      HEAP32[$AsyncCtx40 + 12 >> 2] = $0; //@line 8720
      HEAP16[$AsyncCtx40 + 16 >> 1] = $$0$i43; //@line 8722
      HEAP32[$AsyncCtx40 + 20 >> 2] = $2; //@line 8724
      HEAP8[$AsyncCtx40 + 24 >> 0] = $trunc; //@line 8726
      HEAP32[$AsyncCtx40 + 28 >> 2] = $vararg_buffer23; //@line 8728
      HEAP32[$AsyncCtx40 + 32 >> 2] = $vararg_buffer23; //@line 8730
      HEAP32[$AsyncCtx40 + 36 >> 2] = $vararg_buffer25; //@line 8732
      HEAP32[$AsyncCtx40 + 40 >> 2] = $vararg_buffer25; //@line 8734
      HEAP32[$AsyncCtx40 + 44 >> 2] = $123; //@line 8736
      HEAP32[$AsyncCtx40 + 48 >> 2] = $vararg_buffer29; //@line 8738
      HEAP32[$AsyncCtx40 + 52 >> 2] = $vararg_buffer29; //@line 8740
      HEAP32[$AsyncCtx40 + 56 >> 2] = $vararg_buffer31; //@line 8742
      HEAP32[$AsyncCtx40 + 60 >> 2] = $vararg_buffer31; //@line 8744
      HEAP32[$AsyncCtx40 + 64 >> 2] = $vararg_buffer1; //@line 8746
      sp = STACKTOP; //@line 8747
      STACKTOP = sp; //@line 8748
      return 0; //@line 8748
     } else {
      _emscripten_free_async_context($AsyncCtx40 | 0); //@line 8750
      HEAP16[$0 + 2232 >> 1] = $156 - $155; //@line 8754
      HEAP16[$0 + 2230 >> 1] = $$0$i43; //@line 8756
      _memcpy($0 + 1975 | 0, $2 | 0, $155 | 0) | 0; //@line 8758
      break;
     }
    } else {
     HEAP16[$0 + 2230 >> 1] = $3; //@line 8763
     HEAP16[$0 + 2232 >> 1] = 0; //@line 8765
     if (!$48) {
      _memcpy($0 + 1975 | 0, $2 | 0, $156 | 0) | 0; //@line 8768
     }
    }
   } while (0);
   switch ($trunc & 15) {
   case 9:
   case 5:
   case 1:
    {
     HEAP32[$0 + 1968 >> 2] = 0; //@line 8776
     HEAP8[$0 + 1972 >> 0] = HEAP8[$123 >> 0] | 0; //@line 8779
     switch ($trunc & 15) {
     case 6:
     case 2:
      {
       label = 30; //@line 8783
       break;
      }
     default:
      {}
     }
     break;
    }
   case 10:
   case 6:
   case 2:
    {
     label = 30; //@line 8792
     break;
    }
   default:
    {}
   }
   if ((label | 0) == 30) {
    HEAP32[$0 + 1968 >> 2] = 1; //@line 8800
    HEAP8[$0 + 1972 >> 0] = HEAP8[$123 >> 0] | 0; //@line 8803
    HEAP8[$0 + 1974 >> 0] = HEAP8[$0 + 2284 >> 0] | 0; //@line 8807
   }
   _printf(12115, $vararg_buffer23) | 0; //@line 8809
   $191 = $0 + 2230 | 0; //@line 8810
   $196 = HEAPU16[$0 + 2232 >> 1] | 0; //@line 8815
   HEAP32[$vararg_buffer25 >> 2] = HEAPU16[$191 >> 1]; //@line 8816
   HEAP32[$vararg_buffer25 + 4 >> 2] = $196; //@line 8818
   _printf(12504, $vararg_buffer25) | 0; //@line 8819
   $AsyncCtx36 = _emscripten_alloc_async_context(32, sp) | 0; //@line 8820
   _putchar(10) | 0; //@line 8821
   if (___async) {
    HEAP32[$AsyncCtx36 >> 2] = 291; //@line 8824
    HEAP32[$AsyncCtx36 + 4 >> 2] = $0; //@line 8826
    HEAP32[$AsyncCtx36 + 8 >> 2] = $vararg_buffer29; //@line 8828
    HEAP32[$AsyncCtx36 + 12 >> 2] = $vararg_buffer29; //@line 8830
    HEAP32[$AsyncCtx36 + 16 >> 2] = $vararg_buffer31; //@line 8832
    HEAP32[$AsyncCtx36 + 20 >> 2] = $vararg_buffer31; //@line 8834
    HEAP32[$AsyncCtx36 + 24 >> 2] = $191; //@line 8836
    HEAP32[$AsyncCtx36 + 28 >> 2] = $vararg_buffer1; //@line 8838
    sp = STACKTOP; //@line 8839
    STACKTOP = sp; //@line 8840
    return 0; //@line 8840
   }
   _emscripten_free_async_context($AsyncCtx36 | 0); //@line 8842
   HEAP32[$0 + 1876 >> 2] = 5; //@line 8844
   $AsyncCtx66 = _emscripten_alloc_async_context(28, sp) | 0; //@line 8845
   $205 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 8846
   if (___async) {
    HEAP32[$AsyncCtx66 >> 2] = 292; //@line 8849
    HEAP32[$AsyncCtx66 + 4 >> 2] = $vararg_buffer29; //@line 8851
    HEAP32[$AsyncCtx66 + 8 >> 2] = $vararg_buffer29; //@line 8853
    HEAP32[$AsyncCtx66 + 12 >> 2] = $vararg_buffer31; //@line 8855
    HEAP32[$AsyncCtx66 + 16 >> 2] = $vararg_buffer31; //@line 8857
    HEAP32[$AsyncCtx66 + 20 >> 2] = $191; //@line 8859
    HEAP32[$AsyncCtx66 + 24 >> 2] = $vararg_buffer1; //@line 8861
    sp = STACKTOP; //@line 8862
    STACKTOP = sp; //@line 8863
    return 0; //@line 8863
   }
   _emscripten_free_async_context($AsyncCtx66 | 0); //@line 8865
   _printf(12115, $vararg_buffer29) | 0; //@line 8866
   HEAP32[$vararg_buffer31 >> 2] = $205; //@line 8867
   _printf(12530, $vararg_buffer31) | 0; //@line 8868
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 8869
   _putchar(10) | 0; //@line 8870
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 293; //@line 8873
    HEAP32[$AsyncCtx + 4 >> 2] = $205; //@line 8875
    HEAP32[$AsyncCtx + 8 >> 2] = $191; //@line 8877
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 8879
    sp = STACKTOP; //@line 8880
    STACKTOP = sp; //@line 8881
    return 0; //@line 8881
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 8883
   if (!$205) {
    $220 = HEAPU16[$191 >> 1] | 0; //@line 8888
   } else {
    $220 = $205 << 16 >> 16; //@line 8892
   }
   $$0 = $220 & 65535; //@line 8895
  }
 } while (0);
 $$1 = $$0; //@line 8898
 STACKTOP = sp; //@line 8899
 return $$1 | 0; //@line 8899
}
function __ZN7LoRaMac11schedule_txEv($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$pre$phiZ2D = 0, $$sink = 0, $1 = 0, $108 = 0, $11 = 0, $126 = 0, $129 = 0, $130 = 0, $132 = 0, $133 = 0, $14 = 0, $151 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $179 = 0, $182 = 0, $184 = 0, $185 = 0, $186 = 0, $2 = 0, $20 = 0, $215 = 0, $216 = 0, $218 = 0, $240 = 0, $258 = 0, $261 = 0, $270 = 0, $272 = 0, $28 = 0, $3 = 0, $34 = 0, $35 = 0, $37 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $6 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 15321
 STACKTOP = STACKTOP + 80 | 0; //@line 15322
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 15322
 $vararg_buffer10 = sp + 40 | 0; //@line 15323
 $vararg_buffer8 = sp + 32 | 0; //@line 15324
 $vararg_buffer6 = sp + 24 | 0; //@line 15325
 $vararg_buffer4 = sp + 16 | 0; //@line 15326
 $vararg_buffer1 = sp + 8 | 0; //@line 15327
 $vararg_buffer = sp; //@line 15328
 $1 = sp + 60 | 0; //@line 15329
 $2 = sp + 56 | 0; //@line 15330
 $3 = sp + 44 | 0; //@line 15331
 HEAP32[$2 >> 2] = 0; //@line 15332
 switch (HEAP8[$0 + 1152 >> 0] | 0) {
 case 0:
  {
   $6 = $0 + 984 | 0; //@line 15337
   HEAP32[$6 >> 2] = 0; //@line 15338
   $$pre$phiZ2D = $6; //@line 15339
   break;
  }
 case -1:
  {
   $$1 = -1011; //@line 15343
   STACKTOP = sp; //@line 15344
   return $$1 | 0; //@line 15344
  }
 default:
  {
   $$pre$phiZ2D = $0 + 984 | 0; //@line 15349
  }
 }
 $8 = HEAP8[$0 + 379 >> 0] | 0; //@line 15353
 $9 = $0 + 372 | 0; //@line 15354
 HEAP8[$1 >> 0] = HEAP8[$9 >> 0] | 0; //@line 15356
 $11 = $0 + 375 | 0; //@line 15357
 HEAP8[$11 >> 0] = 1; //@line 15358
 HEAP8[$1 + 2 >> 0] = 1; //@line 15360
 HEAP8[$1 + 3 >> 0] = $8; //@line 15362
 $14 = $0 + 356 | 0; //@line 15363
 HEAP32[$1 + 4 >> 2] = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$14 >> 2] | 0, HEAP32[$0 + 988 >> 2] | 0) | 0; //@line 15369
 $20 = $0 + 992 | 0; //@line 15370
 HEAP32[$1 + 8 >> 2] = HEAP32[$20 >> 2]; //@line 15373
 HEAP8[$1 + 1 >> 0] = HEAP8[$0 + 376 >> 0] | 0; //@line 15377
 __ZN7LoRaPHY17calculate_backoffEP16backoff_params_s(HEAP32[$0 >> 2] | 0, $1); //@line 15379
 $28 = HEAP32[$20 >> 2] | 0; //@line 15381
 $34 = (Math_imul($28, HEAPU16[$0 + 1154 >> 1] | 0) | 0) + ((HEAP32[$$pre$phiZ2D >> 2] | 0) - $28) | 0; //@line 15387
 HEAP32[$$pre$phiZ2D >> 2] = $34; //@line 15388
 HEAP32[$3 >> 2] = $34; //@line 15389
 $35 = $0 + 1097 | 0; //@line 15390
 $37 = $3 + 8 | 0; //@line 15392
 HEAP8[$37 >> 0] = HEAP8[$35 >> 0] | 0; //@line 15393
 HEAP8[$11 >> 0] = 1; //@line 15394
 HEAP8[$3 + 10 >> 0] = 1; //@line 15396
 HEAP8[$3 + 9 >> 0] = HEAP8[$9 >> 0] | 0; //@line 15399
 HEAP32[$3 + 4 >> 2] = HEAP32[$0 + 980 >> 2]; //@line 15403
 $44 = HEAP32[$0 >> 2] | 0; //@line 15404
 $47 = HEAP32[(HEAP32[$44 >> 2] | 0) + 56 >> 2] | 0; //@line 15407
 $48 = $0 + 378 | 0; //@line 15408
 $AsyncCtx = _emscripten_alloc_async_context(100, sp) | 0; //@line 15409
 $49 = FUNCTION_TABLE_iiiiii[$47 & 7]($44, $3, $48, $2, $$pre$phiZ2D) | 0; //@line 15410
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 472; //@line 15413
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 15415
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 15417
  HEAP32[$AsyncCtx + 12 >> 2] = $48; //@line 15419
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer8; //@line 15421
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer8; //@line 15423
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer10; //@line 15425
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer10; //@line 15427
  HEAP32[$AsyncCtx + 32 >> 2] = $3; //@line 15429
  HEAP32[$AsyncCtx + 36 >> 2] = $2; //@line 15431
  HEAP32[$AsyncCtx + 40 >> 2] = $0; //@line 15433
  HEAP32[$AsyncCtx + 44 >> 2] = $35; //@line 15435
  HEAP32[$AsyncCtx + 48 >> 2] = $37; //@line 15437
  HEAP32[$AsyncCtx + 52 >> 2] = $3; //@line 15439
  HEAP32[$AsyncCtx + 56 >> 2] = $$pre$phiZ2D; //@line 15441
  HEAP32[$AsyncCtx + 60 >> 2] = $9; //@line 15443
  HEAP32[$AsyncCtx + 64 >> 2] = $vararg_buffer; //@line 15445
  HEAP32[$AsyncCtx + 68 >> 2] = $vararg_buffer; //@line 15447
  HEAP32[$AsyncCtx + 72 >> 2] = $vararg_buffer1; //@line 15449
  HEAP32[$AsyncCtx + 76 >> 2] = $vararg_buffer1; //@line 15451
  HEAP32[$AsyncCtx + 80 >> 2] = $vararg_buffer4; //@line 15453
  HEAP32[$AsyncCtx + 84 >> 2] = $vararg_buffer4; //@line 15455
  HEAP32[$AsyncCtx + 88 >> 2] = $vararg_buffer6; //@line 15457
  HEAP32[$AsyncCtx + 92 >> 2] = $vararg_buffer6; //@line 15459
  HEAP32[$AsyncCtx + 96 >> 2] = $14; //@line 15461
  sp = STACKTOP; //@line 15462
  STACKTOP = sp; //@line 15463
  return 0; //@line 15463
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15465
 L9 : do {
  if (!$49) {
   while (1) {
    $75 = __ZN7LoRaPHY23get_default_tx_datarateEv(HEAP32[$0 >> 2] | 0) | 0; //@line 15470
    HEAP8[$35 >> 0] = $75; //@line 15471
    HEAP8[$37 >> 0] = $75; //@line 15472
    $76 = HEAP32[$0 >> 2] | 0; //@line 15473
    $79 = HEAP32[(HEAP32[$76 >> 2] | 0) + 56 >> 2] | 0; //@line 15476
    $AsyncCtx14 = _emscripten_alloc_async_context(100, sp) | 0; //@line 15477
    $80 = FUNCTION_TABLE_iiiiii[$79 & 7]($76, $3, $48, $2, $$pre$phiZ2D) | 0; //@line 15478
    if (___async) {
     break;
    }
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 15483
    if ($80) {
     break L9;
    }
   }
   HEAP32[$AsyncCtx14 >> 2] = 473; //@line 15488
   HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 15490
   HEAP32[$AsyncCtx14 + 8 >> 2] = $2; //@line 15492
   HEAP32[$AsyncCtx14 + 12 >> 2] = $48; //@line 15494
   HEAP32[$AsyncCtx14 + 16 >> 2] = $vararg_buffer8; //@line 15496
   HEAP32[$AsyncCtx14 + 20 >> 2] = $vararg_buffer8; //@line 15498
   HEAP32[$AsyncCtx14 + 24 >> 2] = $vararg_buffer10; //@line 15500
   HEAP32[$AsyncCtx14 + 28 >> 2] = $vararg_buffer10; //@line 15502
   HEAP32[$AsyncCtx14 + 32 >> 2] = $3; //@line 15504
   HEAP32[$AsyncCtx14 + 36 >> 2] = $2; //@line 15506
   HEAP32[$AsyncCtx14 + 40 >> 2] = $0; //@line 15508
   HEAP32[$AsyncCtx14 + 44 >> 2] = $35; //@line 15510
   HEAP32[$AsyncCtx14 + 48 >> 2] = $37; //@line 15512
   HEAP32[$AsyncCtx14 + 52 >> 2] = $3; //@line 15514
   HEAP32[$AsyncCtx14 + 56 >> 2] = $$pre$phiZ2D; //@line 15516
   HEAP32[$AsyncCtx14 + 60 >> 2] = $9; //@line 15518
   HEAP32[$AsyncCtx14 + 64 >> 2] = $vararg_buffer; //@line 15520
   HEAP32[$AsyncCtx14 + 68 >> 2] = $vararg_buffer; //@line 15522
   HEAP32[$AsyncCtx14 + 72 >> 2] = $vararg_buffer1; //@line 15524
   HEAP32[$AsyncCtx14 + 76 >> 2] = $vararg_buffer1; //@line 15526
   HEAP32[$AsyncCtx14 + 80 >> 2] = $vararg_buffer4; //@line 15528
   HEAP32[$AsyncCtx14 + 84 >> 2] = $vararg_buffer4; //@line 15530
   HEAP32[$AsyncCtx14 + 88 >> 2] = $vararg_buffer6; //@line 15532
   HEAP32[$AsyncCtx14 + 92 >> 2] = $vararg_buffer6; //@line 15534
   HEAP32[$AsyncCtx14 + 96 >> 2] = $14; //@line 15536
   sp = STACKTOP; //@line 15537
   STACKTOP = sp; //@line 15538
   return 0; //@line 15538
  }
 } while (0);
 _printf(13229, $vararg_buffer) | 0; //@line 15541
 $108 = HEAP8[$37 >> 0] | 0; //@line 15545
 HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$48 >> 0]; //@line 15546
 HEAP32[$vararg_buffer1 + 4 >> 2] = $108; //@line 15548
 _printf(13242, $vararg_buffer1) | 0; //@line 15549
 $AsyncCtx35 = _emscripten_alloc_async_context(72, sp) | 0; //@line 15550
 _putchar(10) | 0; //@line 15551
 if (___async) {
  HEAP32[$AsyncCtx35 >> 2] = 474; //@line 15554
  HEAP32[$AsyncCtx35 + 4 >> 2] = $0; //@line 15556
  HEAP32[$AsyncCtx35 + 8 >> 2] = $2; //@line 15558
  HEAP32[$AsyncCtx35 + 12 >> 2] = $48; //@line 15560
  HEAP32[$AsyncCtx35 + 16 >> 2] = $vararg_buffer8; //@line 15562
  HEAP32[$AsyncCtx35 + 20 >> 2] = $vararg_buffer8; //@line 15564
  HEAP32[$AsyncCtx35 + 24 >> 2] = $vararg_buffer10; //@line 15566
  HEAP32[$AsyncCtx35 + 28 >> 2] = $vararg_buffer10; //@line 15568
  HEAP32[$AsyncCtx35 + 32 >> 2] = $3; //@line 15570
  HEAP32[$AsyncCtx35 + 36 >> 2] = $2; //@line 15572
  HEAP32[$AsyncCtx35 + 40 >> 2] = $0; //@line 15574
  HEAP32[$AsyncCtx35 + 44 >> 2] = $14; //@line 15576
  HEAP32[$AsyncCtx35 + 48 >> 2] = $9; //@line 15578
  HEAP32[$AsyncCtx35 + 52 >> 2] = $35; //@line 15580
  HEAP32[$AsyncCtx35 + 56 >> 2] = $vararg_buffer4; //@line 15582
  HEAP32[$AsyncCtx35 + 60 >> 2] = $vararg_buffer4; //@line 15584
  HEAP32[$AsyncCtx35 + 64 >> 2] = $vararg_buffer6; //@line 15586
  HEAP32[$AsyncCtx35 + 68 >> 2] = $vararg_buffer6; //@line 15588
  sp = STACKTOP; //@line 15589
  STACKTOP = sp; //@line 15590
  return 0; //@line 15590
 }
 _emscripten_free_async_context($AsyncCtx35 | 0); //@line 15592
 $126 = HEAP32[$0 >> 2] | 0; //@line 15593
 $129 = HEAP32[(HEAP32[$126 >> 2] | 0) + 72 >> 2] | 0; //@line 15596
 $130 = HEAP8[$35 >> 0] | 0; //@line 15597
 $132 = HEAP8[$0 + 1129 >> 0] | 0; //@line 15599
 $AsyncCtx17 = _emscripten_alloc_async_context(72, sp) | 0; //@line 15600
 $133 = FUNCTION_TABLE_iiii[$129 & 15]($126, $130, $132) | 0; //@line 15601
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 475; //@line 15604
  HEAP32[$AsyncCtx17 + 4 >> 2] = $0; //@line 15606
  HEAP32[$AsyncCtx17 + 8 >> 2] = $2; //@line 15608
  HEAP32[$AsyncCtx17 + 12 >> 2] = $48; //@line 15610
  HEAP32[$AsyncCtx17 + 16 >> 2] = $vararg_buffer8; //@line 15612
  HEAP32[$AsyncCtx17 + 20 >> 2] = $vararg_buffer8; //@line 15614
  HEAP32[$AsyncCtx17 + 24 >> 2] = $vararg_buffer10; //@line 15616
  HEAP32[$AsyncCtx17 + 28 >> 2] = $vararg_buffer10; //@line 15618
  HEAP32[$AsyncCtx17 + 32 >> 2] = $3; //@line 15620
  HEAP32[$AsyncCtx17 + 36 >> 2] = $2; //@line 15622
  HEAP32[$AsyncCtx17 + 40 >> 2] = $0; //@line 15624
  HEAP32[$AsyncCtx17 + 44 >> 2] = $9; //@line 15626
  HEAP32[$AsyncCtx17 + 48 >> 2] = $35; //@line 15628
  HEAP32[$AsyncCtx17 + 52 >> 2] = $vararg_buffer4; //@line 15630
  HEAP32[$AsyncCtx17 + 56 >> 2] = $vararg_buffer4; //@line 15632
  HEAP32[$AsyncCtx17 + 60 >> 2] = $vararg_buffer6; //@line 15634
  HEAP32[$AsyncCtx17 + 64 >> 2] = $vararg_buffer6; //@line 15636
  HEAP32[$AsyncCtx17 + 68 >> 2] = $14; //@line 15638
  sp = STACKTOP; //@line 15639
  STACKTOP = sp; //@line 15640
  return 0; //@line 15640
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 15642
 $151 = HEAP32[$0 >> 2] | 0; //@line 15643
 $154 = HEAP32[(HEAP32[$151 >> 2] | 0) + 28 >> 2] | 0; //@line 15646
 $155 = $0 + 1104 | 0; //@line 15647
 $156 = HEAP8[$155 >> 0] | 0; //@line 15648
 $157 = $0 + 1100 | 0; //@line 15649
 $158 = HEAP32[$157 >> 2] | 0; //@line 15650
 $AsyncCtx20 = _emscripten_alloc_async_context(80, sp) | 0; //@line 15652
 FUNCTION_TABLE_viiiii[$154 & 7]($151, $133, $156, $158, $0 + 1160 | 0); //@line 15653
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 476; //@line 15656
  HEAP32[$AsyncCtx20 + 4 >> 2] = $0; //@line 15658
  HEAP32[$AsyncCtx20 + 8 >> 2] = $2; //@line 15660
  HEAP32[$AsyncCtx20 + 12 >> 2] = $48; //@line 15662
  HEAP32[$AsyncCtx20 + 16 >> 2] = $vararg_buffer8; //@line 15664
  HEAP32[$AsyncCtx20 + 20 >> 2] = $vararg_buffer8; //@line 15666
  HEAP32[$AsyncCtx20 + 24 >> 2] = $vararg_buffer10; //@line 15668
  HEAP32[$AsyncCtx20 + 28 >> 2] = $vararg_buffer10; //@line 15670
  HEAP32[$AsyncCtx20 + 32 >> 2] = $3; //@line 15672
  HEAP32[$AsyncCtx20 + 36 >> 2] = $2; //@line 15674
  HEAP32[$AsyncCtx20 + 40 >> 2] = $0; //@line 15676
  HEAP32[$AsyncCtx20 + 44 >> 2] = $9; //@line 15678
  HEAP32[$AsyncCtx20 + 48 >> 2] = $35; //@line 15680
  HEAP32[$AsyncCtx20 + 52 >> 2] = $vararg_buffer4; //@line 15682
  HEAP32[$AsyncCtx20 + 56 >> 2] = $vararg_buffer4; //@line 15684
  HEAP32[$AsyncCtx20 + 60 >> 2] = $vararg_buffer6; //@line 15686
  HEAP32[$AsyncCtx20 + 64 >> 2] = $vararg_buffer6; //@line 15688
  HEAP32[$AsyncCtx20 + 68 >> 2] = $155; //@line 15690
  HEAP32[$AsyncCtx20 + 72 >> 2] = $157; //@line 15692
  HEAP32[$AsyncCtx20 + 76 >> 2] = $14; //@line 15694
  sp = STACKTOP; //@line 15695
  STACKTOP = sp; //@line 15696
  return 0; //@line 15696
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 15698
 $179 = HEAP32[$0 >> 2] | 0; //@line 15699
 $182 = HEAP32[(HEAP32[$179 >> 2] | 0) + 28 >> 2] | 0; //@line 15702
 $184 = HEAP8[$0 + 1136 >> 0] | 0; //@line 15704
 $185 = HEAP8[$155 >> 0] | 0; //@line 15705
 $186 = HEAP32[$157 >> 2] | 0; //@line 15706
 $AsyncCtx23 = _emscripten_alloc_async_context(72, sp) | 0; //@line 15708
 FUNCTION_TABLE_viiiii[$182 & 7]($179, $184, $185, $186, $0 + 1184 | 0); //@line 15709
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 477; //@line 15712
  HEAP32[$AsyncCtx23 + 4 >> 2] = $9; //@line 15714
  HEAP32[$AsyncCtx23 + 8 >> 2] = $0; //@line 15716
  HEAP32[$AsyncCtx23 + 12 >> 2] = $35; //@line 15718
  HEAP32[$AsyncCtx23 + 16 >> 2] = $vararg_buffer4; //@line 15720
  HEAP32[$AsyncCtx23 + 20 >> 2] = $vararg_buffer4; //@line 15722
  HEAP32[$AsyncCtx23 + 24 >> 2] = $vararg_buffer6; //@line 15724
  HEAP32[$AsyncCtx23 + 28 >> 2] = $vararg_buffer6; //@line 15726
  HEAP32[$AsyncCtx23 + 32 >> 2] = $0; //@line 15728
  HEAP32[$AsyncCtx23 + 36 >> 2] = $3; //@line 15730
  HEAP32[$AsyncCtx23 + 40 >> 2] = $2; //@line 15732
  HEAP32[$AsyncCtx23 + 44 >> 2] = $2; //@line 15734
  HEAP32[$AsyncCtx23 + 48 >> 2] = $48; //@line 15736
  HEAP32[$AsyncCtx23 + 52 >> 2] = $vararg_buffer8; //@line 15738
  HEAP32[$AsyncCtx23 + 56 >> 2] = $vararg_buffer8; //@line 15740
  HEAP32[$AsyncCtx23 + 60 >> 2] = $vararg_buffer10; //@line 15742
  HEAP32[$AsyncCtx23 + 64 >> 2] = $vararg_buffer10; //@line 15744
  HEAP32[$AsyncCtx23 + 68 >> 2] = $14; //@line 15746
  sp = STACKTOP; //@line 15747
  STACKTOP = sp; //@line 15748
  return 0; //@line 15748
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 15750
 do {
  if (!(HEAP8[$9 >> 0] | 0)) {
   HEAP32[$0 + 972 >> 2] = (HEAP32[$0 + 1172 >> 2] | 0) + (HEAP32[$0 + 1120 >> 2] | 0); //@line 15761
   $$sink = $0 + 1124 | 0; //@line 15763
  } else {
   $215 = HEAP8[$0 + 893 >> 0] | 0; //@line 15766
   $216 = HEAP8[$35 >> 0] | 0; //@line 15767
   $218 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($0 + 4 | 0) | 0; //@line 15769
   _printf(12943, $vararg_buffer4) | 0; //@line 15770
   _printf(13269, $vararg_buffer6) | 0; //@line 15771
   $AsyncCtx31 = _emscripten_alloc_async_context(52, sp) | 0; //@line 15772
   _putchar(10) | 0; //@line 15773
   if (___async) {
    HEAP32[$AsyncCtx31 >> 2] = 478; //@line 15776
    HEAP32[$AsyncCtx31 + 4 >> 2] = $0; //@line 15778
    HEAP32[$AsyncCtx31 + 8 >> 2] = $0; //@line 15780
    HEAP8[$AsyncCtx31 + 12 >> 0] = $216; //@line 15782
    HEAP8[$AsyncCtx31 + 13 >> 0] = $215; //@line 15784
    HEAP8[$AsyncCtx31 + 14 >> 0] = $218; //@line 15786
    HEAP32[$AsyncCtx31 + 16 >> 2] = $3; //@line 15788
    HEAP32[$AsyncCtx31 + 20 >> 2] = $2; //@line 15790
    HEAP32[$AsyncCtx31 + 24 >> 2] = $2; //@line 15792
    HEAP32[$AsyncCtx31 + 28 >> 2] = $48; //@line 15794
    HEAP32[$AsyncCtx31 + 32 >> 2] = $vararg_buffer8; //@line 15796
    HEAP32[$AsyncCtx31 + 36 >> 2] = $vararg_buffer8; //@line 15798
    HEAP32[$AsyncCtx31 + 40 >> 2] = $vararg_buffer10; //@line 15800
    HEAP32[$AsyncCtx31 + 44 >> 2] = $vararg_buffer10; //@line 15802
    HEAP32[$AsyncCtx31 + 48 >> 2] = $14; //@line 15804
    sp = STACKTOP; //@line 15805
    STACKTOP = sp; //@line 15806
    return 0; //@line 15806
   }
   _emscripten_free_async_context($AsyncCtx31 | 0); //@line 15808
   $240 = ($218 & 255) + ($215 & 255) | 0; //@line 15816
   if ($240 >>> 0 < 256 & $240 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$0 >> 2] | 0, $216, (HEAP8[$0 + 369 >> 0] | 0) != 0) | 0) & 255) >>> 0) {
    HEAP32[$0 + 972 >> 2] = (HEAP32[$0 + 1172 >> 2] | 0) + (HEAP32[$0 + 1112 >> 2] | 0); //@line 15828
    $$sink = $0 + 1116 | 0; //@line 15830
    break;
   } else {
    $$1 = -1010; //@line 15833
    STACKTOP = sp; //@line 15834
    return $$1 | 0; //@line 15834
   }
  }
 } while (0);
 HEAP32[$0 + 976 >> 2] = (HEAP32[$0 + 1196 >> 2] | 0) + (HEAP32[$$sink >> 2] | 0); //@line 15843
 if (!(HEAP32[$2 >> 2] | 0)) {
  $258 = HEAP8[$48 >> 0] | 0; //@line 15847
  $AsyncCtx42 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15848
  __ZN7LoRaMac21send_frame_on_channelEh($0, $258) | 0; //@line 15849
  if (___async) {
   HEAP32[$AsyncCtx42 >> 2] = 479; //@line 15852
   HEAP32[$AsyncCtx42 + 4 >> 2] = $3; //@line 15854
   HEAP32[$AsyncCtx42 + 8 >> 2] = $2; //@line 15856
   sp = STACKTOP; //@line 15857
   STACKTOP = sp; //@line 15858
   return 0; //@line 15858
  }
  _emscripten_free_async_context($AsyncCtx42 | 0); //@line 15860
  $$1 = 0; //@line 15861
  STACKTOP = sp; //@line 15862
  return $$1 | 0; //@line 15862
 }
 $261 = $0 + 968 | 0; //@line 15864
 HEAP32[$261 >> 2] = HEAP32[$261 >> 2] | 16; //@line 15867
 _printf(13229, $vararg_buffer8) | 0; //@line 15868
 HEAP32[$vararg_buffer10 >> 2] = HEAP32[$2 >> 2]; //@line 15870
 _printf(13293, $vararg_buffer10) | 0; //@line 15871
 $AsyncCtx27 = _emscripten_alloc_async_context(24, sp) | 0; //@line 15872
 _putchar(10) | 0; //@line 15873
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 480; //@line 15876
  HEAP32[$AsyncCtx27 + 4 >> 2] = $14; //@line 15878
  HEAP32[$AsyncCtx27 + 8 >> 2] = $0; //@line 15880
  HEAP32[$AsyncCtx27 + 12 >> 2] = $2; //@line 15882
  HEAP32[$AsyncCtx27 + 16 >> 2] = $3; //@line 15884
  HEAP32[$AsyncCtx27 + 20 >> 2] = $2; //@line 15886
  sp = STACKTOP; //@line 15887
  STACKTOP = sp; //@line 15888
  return 0; //@line 15888
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 15890
 $270 = HEAP32[$14 >> 2] | 0; //@line 15891
 $272 = HEAP32[$2 >> 2] | 0; //@line 15893
 $AsyncCtx38 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15894
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($270, $0 + 1016 | 0, $272); //@line 15895
 if (___async) {
  HEAP32[$AsyncCtx38 >> 2] = 481; //@line 15898
  HEAP32[$AsyncCtx38 + 4 >> 2] = $3; //@line 15900
  HEAP32[$AsyncCtx38 + 8 >> 2] = $2; //@line 15902
  sp = STACKTOP; //@line 15903
  STACKTOP = sp; //@line 15904
  return 0; //@line 15904
 }
 _emscripten_free_async_context($AsyncCtx38 | 0); //@line 15906
 $$1 = 0; //@line 15907
 STACKTOP = sp; //@line 15908
 return $$1 | 0; //@line 15908
}
function __ZN7LoRaMac22get_phy_event_handlersEv($0) {
 $0 = $0 | 0;
 var $$pre = 0, $$pre$i$i = 0, $$pre$i$i21 = 0, $$pre$i$i34 = 0, $$pre$i$i50 = 0, $$pre$i$i66 = 0, $$pre119 = 0, $$pre120 = 0, $$pre121 = 0, $$pre122 = 0, $1 = 0, $102 = 0, $103 = 0, $114 = 0, $115 = 0, $121 = 0, $122 = 0, $124 = 0, $125 = 0, $128 = 0, $138 = 0, $139 = 0, $149 = 0, $150 = 0, $155 = 0, $156 = 0, $158 = 0, $159 = 0, $162 = 0, $170 = 0, $171 = 0, $179 = 0, $180 = 0, $2 = 0, $21 = 0, $22 = 0, $3 = 0, $35 = 0, $36 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $6 = 0, $63 = 0, $64 = 0, $76 = 0, $77 = 0, $84 = 0, $85 = 0, $87 = 0, $88 = 0, $9 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx29 = 0, $AsyncCtx32 = 0, $AsyncCtx35 = 0, $AsyncCtx38 = 0, $AsyncCtx41 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18542
 STACKTOP = STACKTOP + 16 | 0; //@line 18543
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 18543
 $1 = sp; //@line 18544
 $2 = $1 + 12 | 0; //@line 18545
 HEAP32[$1 >> 2] = 552; //@line 18546
 HEAP32[$1 + 4 >> 2] = 0; //@line 18548
 HEAP32[$1 + 8 >> 2] = $0; //@line 18550
 HEAP32[$2 >> 2] = 848; //@line 18551
 $3 = $0 + 1212 | 0; //@line 18552
 do {
  if (($3 | 0) == ($1 | 0)) {
   $35 = 848; //@line 18556
   label = 10; //@line 18557
  } else {
   $5 = $0 + 1224 | 0; //@line 18559
   $6 = HEAP32[$5 >> 2] | 0; //@line 18560
   if (!$6) {
    $21 = 848; //@line 18563
   } else {
    $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 18566
    $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 18567
    FUNCTION_TABLE_vi[$9 & 1023]($3); //@line 18568
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 553; //@line 18571
     HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 18573
     HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 18575
     HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 18577
     HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 18579
     HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 18581
     HEAP32[$AsyncCtx + 24 >> 2] = $5; //@line 18583
     HEAP32[$AsyncCtx + 28 >> 2] = $1; //@line 18585
     HEAP32[$AsyncCtx + 32 >> 2] = $1; //@line 18587
     HEAP32[$AsyncCtx + 36 >> 2] = $1; //@line 18589
     sp = STACKTOP; //@line 18590
     STACKTOP = sp; //@line 18591
     return 0; //@line 18591
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 18593
    $$pre = HEAP32[$2 >> 2] | 0; //@line 18594
    if (!$$pre) {
     HEAP32[$5 >> 2] = 0; //@line 18597
     break;
    } else {
     $21 = $$pre; //@line 18600
    }
   }
   $22 = HEAP32[$21 + 4 >> 2] | 0; //@line 18604
   $AsyncCtx2 = _emscripten_alloc_async_context(40, sp) | 0; //@line 18605
   FUNCTION_TABLE_vii[$22 & 31]($3, $1); //@line 18606
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 554; //@line 18609
    HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 18611
    HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 18613
    HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 18615
    HEAP32[$AsyncCtx2 + 16 >> 2] = $3; //@line 18617
    HEAP32[$AsyncCtx2 + 20 >> 2] = $2; //@line 18619
    HEAP32[$AsyncCtx2 + 24 >> 2] = $5; //@line 18621
    HEAP32[$AsyncCtx2 + 28 >> 2] = $1; //@line 18623
    HEAP32[$AsyncCtx2 + 32 >> 2] = $1; //@line 18625
    HEAP32[$AsyncCtx2 + 36 >> 2] = $1; //@line 18627
    sp = STACKTOP; //@line 18628
    STACKTOP = sp; //@line 18629
    return 0; //@line 18629
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 18631
    $$pre$i$i = HEAP32[$2 >> 2] | 0; //@line 18632
    HEAP32[$5 >> 2] = $$pre$i$i; //@line 18634
    if (!$$pre$i$i) {
     break;
    } else {
     $35 = $$pre$i$i; //@line 18639
     label = 10; //@line 18640
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 10) {
   $36 = HEAP32[$35 + 8 >> 2] | 0; //@line 18649
   $AsyncCtx5 = _emscripten_alloc_async_context(32, sp) | 0; //@line 18650
   FUNCTION_TABLE_vi[$36 & 1023]($1); //@line 18651
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 555; //@line 18654
    HEAP32[$AsyncCtx5 + 4 >> 2] = $1; //@line 18656
    HEAP32[$AsyncCtx5 + 8 >> 2] = $1; //@line 18658
    HEAP32[$AsyncCtx5 + 12 >> 2] = $0; //@line 18660
    HEAP32[$AsyncCtx5 + 16 >> 2] = $3; //@line 18662
    HEAP32[$AsyncCtx5 + 20 >> 2] = $1; //@line 18664
    HEAP32[$AsyncCtx5 + 24 >> 2] = $1; //@line 18666
    HEAP32[$AsyncCtx5 + 28 >> 2] = $1; //@line 18668
    sp = STACKTOP; //@line 18669
    STACKTOP = sp; //@line 18670
    return 0; //@line 18670
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 18672
    break;
   }
  }
 } while (0);
 $44 = $1 + 12 | 0; //@line 18677
 HEAP32[$1 >> 2] = 7; //@line 18678
 HEAP32[$1 + 4 >> 2] = 0; //@line 18680
 HEAP32[$1 + 8 >> 2] = $0; //@line 18682
 HEAP32[$44 >> 2] = 860; //@line 18683
 $45 = $0 + 1244 | 0; //@line 18684
 do {
  if (($45 | 0) == ($1 | 0)) {
   $76 = 860; //@line 18688
   label = 22; //@line 18689
  } else {
   $47 = $0 + 1256 | 0; //@line 18691
   $48 = HEAP32[$47 >> 2] | 0; //@line 18692
   if (!$48) {
    $63 = 860; //@line 18695
   } else {
    $51 = HEAP32[$48 + 8 >> 2] | 0; //@line 18698
    $AsyncCtx8 = _emscripten_alloc_async_context(40, sp) | 0; //@line 18699
    FUNCTION_TABLE_vi[$51 & 1023]($45); //@line 18700
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 556; //@line 18703
     HEAP32[$AsyncCtx8 + 4 >> 2] = $1; //@line 18705
     HEAP32[$AsyncCtx8 + 8 >> 2] = $47; //@line 18707
     HEAP32[$AsyncCtx8 + 12 >> 2] = $45; //@line 18709
     HEAP32[$AsyncCtx8 + 16 >> 2] = $3; //@line 18711
     HEAP32[$AsyncCtx8 + 20 >> 2] = $44; //@line 18713
     HEAP32[$AsyncCtx8 + 24 >> 2] = $0; //@line 18715
     HEAP32[$AsyncCtx8 + 28 >> 2] = $1; //@line 18717
     HEAP32[$AsyncCtx8 + 32 >> 2] = $1; //@line 18719
     HEAP32[$AsyncCtx8 + 36 >> 2] = $1; //@line 18721
     sp = STACKTOP; //@line 18722
     STACKTOP = sp; //@line 18723
     return 0; //@line 18723
    }
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 18725
    $$pre119 = HEAP32[$44 >> 2] | 0; //@line 18726
    if (!$$pre119) {
     HEAP32[$47 >> 2] = 0; //@line 18729
     break;
    } else {
     $63 = $$pre119; //@line 18732
    }
   }
   $64 = HEAP32[$63 + 4 >> 2] | 0; //@line 18736
   $AsyncCtx11 = _emscripten_alloc_async_context(36, sp) | 0; //@line 18737
   FUNCTION_TABLE_vii[$64 & 31]($45, $1); //@line 18738
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 557; //@line 18741
    HEAP32[$AsyncCtx11 + 4 >> 2] = $1; //@line 18743
    HEAP32[$AsyncCtx11 + 8 >> 2] = $3; //@line 18745
    HEAP32[$AsyncCtx11 + 12 >> 2] = $0; //@line 18747
    HEAP32[$AsyncCtx11 + 16 >> 2] = $1; //@line 18749
    HEAP32[$AsyncCtx11 + 20 >> 2] = $1; //@line 18751
    HEAP32[$AsyncCtx11 + 24 >> 2] = $44; //@line 18753
    HEAP32[$AsyncCtx11 + 28 >> 2] = $47; //@line 18755
    HEAP32[$AsyncCtx11 + 32 >> 2] = $1; //@line 18757
    sp = STACKTOP; //@line 18758
    STACKTOP = sp; //@line 18759
    return 0; //@line 18759
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 18761
    $$pre$i$i21 = HEAP32[$44 >> 2] | 0; //@line 18762
    HEAP32[$47 >> 2] = $$pre$i$i21; //@line 18764
    if (!$$pre$i$i21) {
     break;
    } else {
     $76 = $$pre$i$i21; //@line 18769
     label = 22; //@line 18770
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 22) {
   $77 = HEAP32[$76 + 8 >> 2] | 0; //@line 18779
   $AsyncCtx14 = _emscripten_alloc_async_context(28, sp) | 0; //@line 18780
   FUNCTION_TABLE_vi[$77 & 1023]($1); //@line 18781
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 558; //@line 18784
    HEAP32[$AsyncCtx14 + 4 >> 2] = $3; //@line 18786
    HEAP32[$AsyncCtx14 + 8 >> 2] = $0; //@line 18788
    HEAP32[$AsyncCtx14 + 12 >> 2] = $1; //@line 18790
    HEAP32[$AsyncCtx14 + 16 >> 2] = $1; //@line 18792
    HEAP32[$AsyncCtx14 + 20 >> 2] = $1; //@line 18794
    HEAP32[$AsyncCtx14 + 24 >> 2] = $1; //@line 18796
    sp = STACKTOP; //@line 18797
    STACKTOP = sp; //@line 18798
    return 0; //@line 18798
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 18800
    break;
   }
  }
 } while (0);
 $84 = $1 + 12 | 0; //@line 18805
 HEAP32[$1 >> 2] = 559; //@line 18806
 HEAP32[$1 + 4 >> 2] = 0; //@line 18808
 HEAP32[$1 + 8 >> 2] = $0; //@line 18810
 HEAP32[$84 >> 2] = 848; //@line 18811
 $85 = $0 + 1276 | 0; //@line 18812
 do {
  if (($85 | 0) == ($1 | 0)) {
   $114 = 848; //@line 18816
   label = 34; //@line 18817
  } else {
   $87 = $0 + 1288 | 0; //@line 18819
   $88 = HEAP32[$87 >> 2] | 0; //@line 18820
   if (!$88) {
    $102 = 848; //@line 18823
   } else {
    $91 = HEAP32[$88 + 8 >> 2] | 0; //@line 18826
    $AsyncCtx17 = _emscripten_alloc_async_context(36, sp) | 0; //@line 18827
    FUNCTION_TABLE_vi[$91 & 1023]($85); //@line 18828
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 560; //@line 18831
     HEAP32[$AsyncCtx17 + 4 >> 2] = $3; //@line 18833
     HEAP32[$AsyncCtx17 + 8 >> 2] = $0; //@line 18835
     HEAP32[$AsyncCtx17 + 12 >> 2] = $1; //@line 18837
     HEAP32[$AsyncCtx17 + 16 >> 2] = $84; //@line 18839
     HEAP32[$AsyncCtx17 + 20 >> 2] = $87; //@line 18841
     HEAP32[$AsyncCtx17 + 24 >> 2] = $1; //@line 18843
     HEAP32[$AsyncCtx17 + 28 >> 2] = $1; //@line 18845
     HEAP32[$AsyncCtx17 + 32 >> 2] = $85; //@line 18847
     sp = STACKTOP; //@line 18848
     STACKTOP = sp; //@line 18849
     return 0; //@line 18849
    }
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 18851
    $$pre120 = HEAP32[$84 >> 2] | 0; //@line 18852
    if (!$$pre120) {
     HEAP32[$87 >> 2] = 0; //@line 18855
     break;
    } else {
     $102 = $$pre120; //@line 18858
    }
   }
   $103 = HEAP32[$102 + 4 >> 2] | 0; //@line 18862
   $AsyncCtx20 = _emscripten_alloc_async_context(32, sp) | 0; //@line 18863
   FUNCTION_TABLE_vii[$103 & 31]($85, $1); //@line 18864
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 561; //@line 18867
    HEAP32[$AsyncCtx20 + 4 >> 2] = $3; //@line 18869
    HEAP32[$AsyncCtx20 + 8 >> 2] = $0; //@line 18871
    HEAP32[$AsyncCtx20 + 12 >> 2] = $1; //@line 18873
    HEAP32[$AsyncCtx20 + 16 >> 2] = $84; //@line 18875
    HEAP32[$AsyncCtx20 + 20 >> 2] = $87; //@line 18877
    HEAP32[$AsyncCtx20 + 24 >> 2] = $1; //@line 18879
    HEAP32[$AsyncCtx20 + 28 >> 2] = $1; //@line 18881
    sp = STACKTOP; //@line 18882
    STACKTOP = sp; //@line 18883
    return 0; //@line 18883
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 18885
    $$pre$i$i34 = HEAP32[$84 >> 2] | 0; //@line 18886
    HEAP32[$87 >> 2] = $$pre$i$i34; //@line 18888
    if (!$$pre$i$i34) {
     break;
    } else {
     $114 = $$pre$i$i34; //@line 18893
     label = 34; //@line 18894
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 34) {
   $115 = HEAP32[$114 + 8 >> 2] | 0; //@line 18903
   $AsyncCtx23 = _emscripten_alloc_async_context(24, sp) | 0; //@line 18904
   FUNCTION_TABLE_vi[$115 & 1023]($1); //@line 18905
   if (___async) {
    HEAP32[$AsyncCtx23 >> 2] = 562; //@line 18908
    HEAP32[$AsyncCtx23 + 4 >> 2] = $3; //@line 18910
    HEAP32[$AsyncCtx23 + 8 >> 2] = $0; //@line 18912
    HEAP32[$AsyncCtx23 + 12 >> 2] = $1; //@line 18914
    HEAP32[$AsyncCtx23 + 16 >> 2] = $1; //@line 18916
    HEAP32[$AsyncCtx23 + 20 >> 2] = $1; //@line 18918
    sp = STACKTOP; //@line 18919
    STACKTOP = sp; //@line 18920
    return 0; //@line 18920
   } else {
    _emscripten_free_async_context($AsyncCtx23 | 0); //@line 18922
    break;
   }
  }
 } while (0);
 $121 = $1 + 12 | 0; //@line 18927
 HEAP32[$1 >> 2] = 563; //@line 18928
 HEAP32[$1 + 4 >> 2] = 0; //@line 18930
 HEAP32[$1 + 8 >> 2] = $0; //@line 18932
 HEAP32[$121 >> 2] = 848; //@line 18933
 $122 = $0 + 1228 | 0; //@line 18934
 do {
  if (($122 | 0) == ($1 | 0)) {
   $149 = 848; //@line 18938
   label = 46; //@line 18939
  } else {
   $124 = $0 + 1240 | 0; //@line 18941
   $125 = HEAP32[$124 >> 2] | 0; //@line 18942
   if (!$125) {
    $138 = 848; //@line 18945
   } else {
    $128 = HEAP32[$125 + 8 >> 2] | 0; //@line 18948
    $AsyncCtx26 = _emscripten_alloc_async_context(32, sp) | 0; //@line 18949
    FUNCTION_TABLE_vi[$128 & 1023]($122); //@line 18950
    if (___async) {
     HEAP32[$AsyncCtx26 >> 2] = 564; //@line 18953
     HEAP32[$AsyncCtx26 + 4 >> 2] = $3; //@line 18955
     HEAP32[$AsyncCtx26 + 8 >> 2] = $0; //@line 18957
     HEAP32[$AsyncCtx26 + 12 >> 2] = $1; //@line 18959
     HEAP32[$AsyncCtx26 + 16 >> 2] = $1; //@line 18961
     HEAP32[$AsyncCtx26 + 20 >> 2] = $121; //@line 18963
     HEAP32[$AsyncCtx26 + 24 >> 2] = $122; //@line 18965
     HEAP32[$AsyncCtx26 + 28 >> 2] = $124; //@line 18967
     sp = STACKTOP; //@line 18968
     STACKTOP = sp; //@line 18969
     return 0; //@line 18969
    }
    _emscripten_free_async_context($AsyncCtx26 | 0); //@line 18971
    $$pre121 = HEAP32[$121 >> 2] | 0; //@line 18972
    if (!$$pre121) {
     HEAP32[$124 >> 2] = 0; //@line 18975
     break;
    } else {
     $138 = $$pre121; //@line 18978
    }
   }
   $139 = HEAP32[$138 + 4 >> 2] | 0; //@line 18982
   $AsyncCtx29 = _emscripten_alloc_async_context(28, sp) | 0; //@line 18983
   FUNCTION_TABLE_vii[$139 & 31]($122, $1); //@line 18984
   if (___async) {
    HEAP32[$AsyncCtx29 >> 2] = 565; //@line 18987
    HEAP32[$AsyncCtx29 + 4 >> 2] = $3; //@line 18989
    HEAP32[$AsyncCtx29 + 8 >> 2] = $0; //@line 18991
    HEAP32[$AsyncCtx29 + 12 >> 2] = $1; //@line 18993
    HEAP32[$AsyncCtx29 + 16 >> 2] = $1; //@line 18995
    HEAP32[$AsyncCtx29 + 20 >> 2] = $121; //@line 18997
    HEAP32[$AsyncCtx29 + 24 >> 2] = $124; //@line 18999
    sp = STACKTOP; //@line 19000
    STACKTOP = sp; //@line 19001
    return 0; //@line 19001
   } else {
    _emscripten_free_async_context($AsyncCtx29 | 0); //@line 19003
    $$pre$i$i50 = HEAP32[$121 >> 2] | 0; //@line 19004
    HEAP32[$124 >> 2] = $$pre$i$i50; //@line 19006
    if (!$$pre$i$i50) {
     break;
    } else {
     $149 = $$pre$i$i50; //@line 19011
     label = 46; //@line 19012
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 46) {
   $150 = HEAP32[$149 + 8 >> 2] | 0; //@line 19021
   $AsyncCtx32 = _emscripten_alloc_async_context(20, sp) | 0; //@line 19022
   FUNCTION_TABLE_vi[$150 & 1023]($1); //@line 19023
   if (___async) {
    HEAP32[$AsyncCtx32 >> 2] = 566; //@line 19026
    HEAP32[$AsyncCtx32 + 4 >> 2] = $1; //@line 19028
    HEAP32[$AsyncCtx32 + 8 >> 2] = $1; //@line 19030
    HEAP32[$AsyncCtx32 + 12 >> 2] = $0; //@line 19032
    HEAP32[$AsyncCtx32 + 16 >> 2] = $3; //@line 19034
    sp = STACKTOP; //@line 19035
    STACKTOP = sp; //@line 19036
    return 0; //@line 19036
   } else {
    _emscripten_free_async_context($AsyncCtx32 | 0); //@line 19038
    break;
   }
  }
 } while (0);
 $155 = $1 + 12 | 0; //@line 19043
 HEAP32[$1 >> 2] = 567; //@line 19044
 HEAP32[$1 + 4 >> 2] = 0; //@line 19046
 HEAP32[$1 + 8 >> 2] = $0; //@line 19048
 HEAP32[$155 >> 2] = 848; //@line 19049
 $156 = $0 + 1260 | 0; //@line 19050
 if (($156 | 0) == ($1 | 0)) {
  $179 = 848; //@line 19053
 } else {
  $158 = $0 + 1272 | 0; //@line 19055
  $159 = HEAP32[$158 >> 2] | 0; //@line 19056
  if (!$159) {
   $170 = 848; //@line 19059
  } else {
   $162 = HEAP32[$159 + 8 >> 2] | 0; //@line 19062
   $AsyncCtx35 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19063
   FUNCTION_TABLE_vi[$162 & 1023]($156); //@line 19064
   if (___async) {
    HEAP32[$AsyncCtx35 >> 2] = 568; //@line 19067
    HEAP32[$AsyncCtx35 + 4 >> 2] = $155; //@line 19069
    HEAP32[$AsyncCtx35 + 8 >> 2] = $158; //@line 19071
    HEAP32[$AsyncCtx35 + 12 >> 2] = $156; //@line 19073
    HEAP32[$AsyncCtx35 + 16 >> 2] = $1; //@line 19075
    HEAP32[$AsyncCtx35 + 20 >> 2] = $3; //@line 19077
    sp = STACKTOP; //@line 19078
    STACKTOP = sp; //@line 19079
    return 0; //@line 19079
   }
   _emscripten_free_async_context($AsyncCtx35 | 0); //@line 19081
   $$pre122 = HEAP32[$155 >> 2] | 0; //@line 19082
   if (!$$pre122) {
    HEAP32[$158 >> 2] = 0; //@line 19085
    STACKTOP = sp; //@line 19086
    return $3 | 0; //@line 19086
   } else {
    $170 = $$pre122; //@line 19088
   }
  }
  $171 = HEAP32[$170 + 4 >> 2] | 0; //@line 19092
  $AsyncCtx38 = _emscripten_alloc_async_context(20, sp) | 0; //@line 19093
  FUNCTION_TABLE_vii[$171 & 31]($156, $1); //@line 19094
  if (___async) {
   HEAP32[$AsyncCtx38 >> 2] = 569; //@line 19097
   HEAP32[$AsyncCtx38 + 4 >> 2] = $155; //@line 19099
   HEAP32[$AsyncCtx38 + 8 >> 2] = $158; //@line 19101
   HEAP32[$AsyncCtx38 + 12 >> 2] = $1; //@line 19103
   HEAP32[$AsyncCtx38 + 16 >> 2] = $3; //@line 19105
   sp = STACKTOP; //@line 19106
   STACKTOP = sp; //@line 19107
   return 0; //@line 19107
  }
  _emscripten_free_async_context($AsyncCtx38 | 0); //@line 19109
  $$pre$i$i66 = HEAP32[$155 >> 2] | 0; //@line 19110
  HEAP32[$158 >> 2] = $$pre$i$i66; //@line 19112
  if (!$$pre$i$i66) {
   STACKTOP = sp; //@line 19115
   return $3 | 0; //@line 19115
  } else {
   $179 = $$pre$i$i66; //@line 19117
  }
 }
 $180 = HEAP32[$179 + 8 >> 2] | 0; //@line 19121
 $AsyncCtx41 = _emscripten_alloc_async_context(12, sp) | 0; //@line 19122
 FUNCTION_TABLE_vi[$180 & 1023]($1); //@line 19123
 if (___async) {
  HEAP32[$AsyncCtx41 >> 2] = 570; //@line 19126
  HEAP32[$AsyncCtx41 + 4 >> 2] = $1; //@line 19128
  HEAP32[$AsyncCtx41 + 8 >> 2] = $3; //@line 19130
  sp = STACKTOP; //@line 19131
  STACKTOP = sp; //@line 19132
  return 0; //@line 19132
 }
 _emscripten_free_async_context($AsyncCtx41 | 0); //@line 19134
 STACKTOP = sp; //@line 19135
 return $3 | 0; //@line 19135
}
function _mbedtls_cipher_cmac_finish($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$013$i = 0, $$01720$i55 = 0, $$019$i = 0, $$019$i52 = 0, $$021$i54 = 0, $$09$i = 0, $$09$i41 = 0, $$09$i45 = 0, $$sink$sink$i = 0, $12 = 0, $129 = 0, $132 = 0, $145 = 0, $148 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $170 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $185 = 0, $19 = 0, $2 = 0, $20 = 0, $202 = 0, $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $64 = 0, $65 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, label = 0, sp = 0, $156$looptemp = 0;
 sp = STACKTOP; //@line 3472
 STACKTOP = STACKTOP + 80 | 0; //@line 3473
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 3473
 $2 = sp + 56 | 0; //@line 3474
 $3 = sp + 4 | 0; //@line 3475
 $4 = sp + 40 | 0; //@line 3476
 $5 = sp + 24 | 0; //@line 3477
 $6 = sp + 8 | 0; //@line 3478
 $7 = sp; //@line 3479
 if (!$0) {
  $$0 = -24832; //@line 3482
  STACKTOP = sp; //@line 3483
  return $$0 | 0; //@line 3483
 }
 $9 = HEAP32[$0 >> 2] | 0; //@line 3485
 if (!$9) {
  $$0 = -24832; //@line 3488
  STACKTOP = sp; //@line 3489
  return $$0 | 0; //@line 3489
 }
 $12 = HEAP32[$0 + 64 >> 2] | 0; //@line 3492
 if (($1 | 0) == 0 | ($12 | 0) == 0) {
  $$0 = -24832; //@line 3497
  STACKTOP = sp; //@line 3498
  return $$0 | 0; //@line 3498
 }
 $16 = HEAP32[$9 + 24 >> 2] | 0; //@line 3501
 $17 = $4 + 1 | 0; //@line 3502
 HEAP8[$4 >> 0] = 0; //@line 3503
 $18 = $4 + 2 | 0; //@line 3504
 HEAP8[$17 >> 0] = 0; //@line 3505
 $19 = $4 + 3 | 0; //@line 3506
 HEAP8[$18 >> 0] = 0; //@line 3507
 $20 = $4 + 4 | 0; //@line 3508
 HEAP8[$19 >> 0] = 0; //@line 3509
 $21 = $4 + 5 | 0; //@line 3510
 HEAP8[$20 >> 0] = 0; //@line 3511
 $22 = $4 + 6 | 0; //@line 3512
 HEAP8[$21 >> 0] = 0; //@line 3513
 $23 = $4 + 7 | 0; //@line 3514
 HEAP8[$22 >> 0] = 0; //@line 3515
 $24 = $4 + 8 | 0; //@line 3516
 HEAP8[$23 >> 0] = 0; //@line 3517
 $25 = $4 + 9 | 0; //@line 3518
 HEAP8[$24 >> 0] = 0; //@line 3519
 $26 = $4 + 10 | 0; //@line 3520
 HEAP8[$25 >> 0] = 0; //@line 3521
 $27 = $4 + 11 | 0; //@line 3522
 HEAP8[$26 >> 0] = 0; //@line 3523
 $28 = $4 + 12 | 0; //@line 3524
 HEAP8[$27 >> 0] = 0; //@line 3525
 $29 = $4 + 13 | 0; //@line 3526
 HEAP8[$28 >> 0] = 0; //@line 3527
 $30 = $4 + 14 | 0; //@line 3528
 HEAP8[$29 >> 0] = 0; //@line 3529
 $31 = $4 + 15 | 0; //@line 3530
 HEAP8[$30 >> 0] = 0; //@line 3531
 HEAP8[$31 >> 0] = 0; //@line 3532
 $32 = $5 + 1 | 0; //@line 3533
 HEAP8[$5 >> 0] = 0; //@line 3534
 $33 = $5 + 2 | 0; //@line 3535
 HEAP8[$32 >> 0] = 0; //@line 3536
 $34 = $5 + 3 | 0; //@line 3537
 HEAP8[$33 >> 0] = 0; //@line 3538
 $35 = $5 + 4 | 0; //@line 3539
 HEAP8[$34 >> 0] = 0; //@line 3540
 $36 = $5 + 5 | 0; //@line 3541
 HEAP8[$35 >> 0] = 0; //@line 3542
 $37 = $5 + 6 | 0; //@line 3543
 HEAP8[$36 >> 0] = 0; //@line 3544
 $38 = $5 + 7 | 0; //@line 3545
 HEAP8[$37 >> 0] = 0; //@line 3546
 $39 = $5 + 8 | 0; //@line 3547
 HEAP8[$38 >> 0] = 0; //@line 3548
 $40 = $5 + 9 | 0; //@line 3549
 HEAP8[$39 >> 0] = 0; //@line 3550
 $41 = $5 + 10 | 0; //@line 3551
 HEAP8[$40 >> 0] = 0; //@line 3552
 $42 = $5 + 11 | 0; //@line 3553
 HEAP8[$41 >> 0] = 0; //@line 3554
 $43 = $5 + 12 | 0; //@line 3555
 HEAP8[$42 >> 0] = 0; //@line 3556
 $44 = $5 + 13 | 0; //@line 3557
 HEAP8[$43 >> 0] = 0; //@line 3558
 $45 = $5 + 14 | 0; //@line 3559
 HEAP8[$44 >> 0] = 0; //@line 3560
 $46 = $5 + 15 | 0; //@line 3561
 HEAP8[$45 >> 0] = 0; //@line 3562
 HEAP8[$46 >> 0] = 0; //@line 3563
 $47 = $2 + 1 | 0; //@line 3564
 HEAP8[$2 >> 0] = 0; //@line 3565
 $48 = $2 + 2 | 0; //@line 3566
 HEAP8[$47 >> 0] = 0; //@line 3567
 $49 = $2 + 3 | 0; //@line 3568
 HEAP8[$48 >> 0] = 0; //@line 3569
 $50 = $2 + 4 | 0; //@line 3570
 HEAP8[$49 >> 0] = 0; //@line 3571
 $51 = $2 + 5 | 0; //@line 3572
 HEAP8[$50 >> 0] = 0; //@line 3573
 $52 = $2 + 6 | 0; //@line 3574
 HEAP8[$51 >> 0] = 0; //@line 3575
 $53 = $2 + 7 | 0; //@line 3576
 HEAP8[$52 >> 0] = 0; //@line 3577
 $54 = $2 + 8 | 0; //@line 3578
 HEAP8[$53 >> 0] = 0; //@line 3579
 $55 = $2 + 9 | 0; //@line 3580
 HEAP8[$54 >> 0] = 0; //@line 3581
 $56 = $2 + 10 | 0; //@line 3582
 HEAP8[$55 >> 0] = 0; //@line 3583
 $57 = $2 + 11 | 0; //@line 3584
 HEAP8[$56 >> 0] = 0; //@line 3585
 $58 = $2 + 12 | 0; //@line 3586
 HEAP8[$57 >> 0] = 0; //@line 3587
 $59 = $2 + 13 | 0; //@line 3588
 HEAP8[$58 >> 0] = 0; //@line 3589
 $60 = $2 + 14 | 0; //@line 3590
 HEAP8[$59 >> 0] = 0; //@line 3591
 $61 = $2 + 15 | 0; //@line 3592
 HEAP8[$60 >> 0] = 0; //@line 3593
 HEAP8[$61 >> 0] = 0; //@line 3594
 $64 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 3597
 $AsyncCtx2 = _emscripten_alloc_async_context(252, sp) | 0; //@line 3598
 $65 = _mbedtls_cipher_update($0, $2, $64, $2, $3) | 0; //@line 3599
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 674; //@line 3602
  HEAP32[$AsyncCtx2 + 4 >> 2] = $23; //@line 3604
  HEAP32[$AsyncCtx2 + 8 >> 2] = $35; //@line 3606
  HEAP32[$AsyncCtx2 + 12 >> 2] = $38; //@line 3608
  HEAP32[$AsyncCtx2 + 16 >> 2] = $44; //@line 3610
  HEAP32[$AsyncCtx2 + 20 >> 2] = $41; //@line 3612
  HEAP32[$AsyncCtx2 + 24 >> 2] = $2; //@line 3614
  HEAP32[$AsyncCtx2 + 28 >> 2] = $4; //@line 3616
  HEAP32[$AsyncCtx2 + 32 >> 2] = $26; //@line 3618
  HEAP32[$AsyncCtx2 + 36 >> 2] = $16; //@line 3620
  HEAP32[$AsyncCtx2 + 40 >> 2] = $49; //@line 3622
  HEAP32[$AsyncCtx2 + 44 >> 2] = $55; //@line 3624
  HEAP32[$AsyncCtx2 + 48 >> 2] = $61; //@line 3626
  HEAP32[$AsyncCtx2 + 52 >> 2] = $20; //@line 3628
  HEAP32[$AsyncCtx2 + 56 >> 2] = $12; //@line 3630
  HEAP32[$AsyncCtx2 + 60 >> 2] = $3; //@line 3632
  HEAP32[$AsyncCtx2 + 64 >> 2] = $17; //@line 3634
  HEAP32[$AsyncCtx2 + 68 >> 2] = $29; //@line 3636
  HEAP32[$AsyncCtx2 + 72 >> 2] = $58; //@line 3638
  HEAP32[$AsyncCtx2 + 76 >> 2] = $22; //@line 3640
  HEAP32[$AsyncCtx2 + 80 >> 2] = $25; //@line 3642
  HEAP32[$AsyncCtx2 + 84 >> 2] = $28; //@line 3644
  HEAP32[$AsyncCtx2 + 88 >> 2] = $56; //@line 3646
  HEAP32[$AsyncCtx2 + 92 >> 2] = $31; //@line 3648
  HEAP32[$AsyncCtx2 + 96 >> 2] = $36; //@line 3650
  HEAP32[$AsyncCtx2 + 100 >> 2] = $42; //@line 3652
  HEAP32[$AsyncCtx2 + 104 >> 2] = $18; //@line 3654
  HEAP32[$AsyncCtx2 + 108 >> 2] = $21; //@line 3656
  HEAP32[$AsyncCtx2 + 112 >> 2] = $2; //@line 3658
  HEAP32[$AsyncCtx2 + 116 >> 2] = $46; //@line 3660
  HEAP32[$AsyncCtx2 + 120 >> 2] = $59; //@line 3662
  HEAP32[$AsyncCtx2 + 124 >> 2] = $32; //@line 3664
  HEAP32[$AsyncCtx2 + 128 >> 2] = $39; //@line 3666
  HEAP32[$AsyncCtx2 + 132 >> 2] = $52; //@line 3668
  HEAP32[$AsyncCtx2 + 136 >> 2] = $7; //@line 3670
  HEAP32[$AsyncCtx2 + 140 >> 2] = $12; //@line 3672
  HEAP32[$AsyncCtx2 + 144 >> 2] = $24; //@line 3674
  HEAP32[$AsyncCtx2 + 148 >> 2] = $27; //@line 3676
  HEAP32[$AsyncCtx2 + 152 >> 2] = $48; //@line 3678
  HEAP32[$AsyncCtx2 + 156 >> 2] = $40; //@line 3680
  HEAP32[$AsyncCtx2 + 160 >> 2] = $43; //@line 3682
  HEAP32[$AsyncCtx2 + 164 >> 2] = $6; //@line 3684
  HEAP32[$AsyncCtx2 + 168 >> 2] = $60; //@line 3686
  HEAP32[$AsyncCtx2 + 172 >> 2] = $33; //@line 3688
  HEAP32[$AsyncCtx2 + 176 >> 2] = $45; //@line 3690
  HEAP32[$AsyncCtx2 + 180 >> 2] = $53; //@line 3692
  HEAP32[$AsyncCtx2 + 184 >> 2] = $4; //@line 3694
  HEAP32[$AsyncCtx2 + 188 >> 2] = $51; //@line 3696
  HEAP32[$AsyncCtx2 + 192 >> 2] = $0; //@line 3698
  HEAP32[$AsyncCtx2 + 196 >> 2] = $19; //@line 3700
  HEAP32[$AsyncCtx2 + 200 >> 2] = $5; //@line 3702
  HEAP32[$AsyncCtx2 + 204 >> 2] = $64; //@line 3704
  HEAP32[$AsyncCtx2 + 208 >> 2] = $50; //@line 3706
  HEAP32[$AsyncCtx2 + 212 >> 2] = $1; //@line 3708
  HEAP32[$AsyncCtx2 + 216 >> 2] = $30; //@line 3710
  HEAP32[$AsyncCtx2 + 220 >> 2] = $7; //@line 3712
  HEAP32[$AsyncCtx2 + 224 >> 2] = $6; //@line 3714
  HEAP32[$AsyncCtx2 + 228 >> 2] = $34; //@line 3716
  HEAP32[$AsyncCtx2 + 232 >> 2] = $37; //@line 3718
  HEAP32[$AsyncCtx2 + 236 >> 2] = $54; //@line 3720
  HEAP32[$AsyncCtx2 + 240 >> 2] = $47; //@line 3722
  HEAP32[$AsyncCtx2 + 244 >> 2] = $57; //@line 3724
  HEAP32[$AsyncCtx2 + 248 >> 2] = $5; //@line 3726
  sp = STACKTOP; //@line 3727
  STACKTOP = sp; //@line 3728
  return 0; //@line 3728
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3730
 L13 : do {
  if (!$65) {
   switch ($64 | 0) {
   case 16:
    {
     $$019$i52 = 135; //@line 3736
     break;
    }
   case 8:
    {
     $$019$i52 = 27; //@line 3740
     break;
    }
   default:
    {
     break L13;
    }
   }
   $129 = $64 + -1 | 0; //@line 3747
   $$01720$i55 = 0; //@line 3748
   $$021$i54 = $129; //@line 3748
   while (1) {
    $132 = HEAPU8[$2 + $$021$i54 >> 0] | 0; //@line 3752
    HEAP8[$4 + $$021$i54 >> 0] = $132 << 1 | $$01720$i55; //@line 3757
    if (($$021$i54 | 0) > 0) {
     $$01720$i55 = $132 >>> 7; //@line 3762
     $$021$i54 = $$021$i54 + -1 | 0; //@line 3762
    } else {
     break;
    }
   }
   $145 = $4 + $129 | 0; //@line 3772
   $148 = $$019$i52 & 0 - ((HEAPU8[$2 >> 0] | 0) >>> 7) ^ (HEAPU8[$145 >> 0] | 0); //@line 3775
   HEAP8[$145 >> 0] = $148; //@line 3777
   switch ($64 | 0) {
   case 16:
    {
     $$019$i = 135; //@line 3780
     break;
    }
   case 8:
    {
     $$019$i = 27; //@line 3784
     break;
    }
   default:
    {
     break L13;
    }
   }
   HEAP8[$5 + $129 >> 0] = $148 << 1; //@line 3794
   if (($129 | 0) > 0) {
    $156 = $148; //@line 3798
    $157 = $64 + -2 | 0; //@line 3798
    while (1) {
     $156$looptemp = $156;
     $156 = HEAPU8[$4 + $157 >> 0] | 0; //@line 3803
     HEAP8[$5 + $157 >> 0] = $156 << 1 | $156$looptemp >>> 7; //@line 3808
     if (($157 | 0) <= 0) {
      break;
     } else {
      $157 = $157 + -1 | 0; //@line 3812
     }
    }
   }
   $170 = $5 + $129 | 0; //@line 3823
   HEAP8[$170 >> 0] = $$019$i & 0 - ((HEAPU8[$4 >> 0] | 0) >>> 7) ^ (HEAPU8[$170 >> 0] | 0); //@line 3828
  }
 } while (0);
 HEAP8[$2 >> 0] = 0; //@line 3831
 HEAP8[$47 >> 0] = 0; //@line 3832
 HEAP8[$48 >> 0] = 0; //@line 3833
 HEAP8[$49 >> 0] = 0; //@line 3834
 HEAP8[$50 >> 0] = 0; //@line 3835
 HEAP8[$51 >> 0] = 0; //@line 3836
 HEAP8[$52 >> 0] = 0; //@line 3837
 HEAP8[$53 >> 0] = 0; //@line 3838
 HEAP8[$54 >> 0] = 0; //@line 3839
 HEAP8[$55 >> 0] = 0; //@line 3840
 HEAP8[$56 >> 0] = 0; //@line 3841
 HEAP8[$57 >> 0] = 0; //@line 3842
 HEAP8[$58 >> 0] = 0; //@line 3843
 HEAP8[$59 >> 0] = 0; //@line 3844
 HEAP8[$60 >> 0] = 0; //@line 3845
 HEAP8[$61 >> 0] = 0; //@line 3846
 $175 = $12 + 16 | 0; //@line 3847
 $176 = $12 + 32 | 0; //@line 3848
 $177 = HEAP32[$176 >> 2] | 0; //@line 3849
 if ($177 >>> 0 < $16 >>> 0) {
  $$013$i = 0; //@line 3852
  do {
   if ($$013$i >>> 0 < $177 >>> 0) {
    $$sink$sink$i = HEAP8[$12 + 16 + $$013$i >> 0] | 0; //@line 3858
   } else {
    $$sink$sink$i = ($$013$i | 0) == ($177 | 0) ? -128 : 0; //@line 3862
   }
   HEAP8[$6 + $$013$i >> 0] = $$sink$sink$i; //@line 3865
   $$013$i = $$013$i + 1 | 0; //@line 3866
  } while (($$013$i | 0) != ($16 | 0));
  $$09$i45 = 0; //@line 3869
  do {
   $185 = $6 + $$09$i45 | 0; //@line 3876
   HEAP8[$185 >> 0] = HEAP8[$5 + $$09$i45 >> 0] ^ HEAP8[$185 >> 0]; //@line 3881
   $$09$i45 = $$09$i45 + 1 | 0; //@line 3882
  } while (($$09$i45 | 0) != ($16 | 0));
  label = 25; //@line 3885
 } else {
  if ($16 | 0) {
   $$09$i41 = 0; //@line 3894
   do {
    HEAP8[$6 + $$09$i41 >> 0] = HEAP8[$4 + $$09$i41 >> 0] ^ HEAP8[$12 + 16 + $$09$i41 >> 0]; //@line 3902
    $$09$i41 = $$09$i41 + 1 | 0; //@line 3903
   } while (($$09$i41 | 0) != ($16 | 0));
   label = 25; //@line 3906
  }
 }
 if ((label | 0) == 25) {
  if ($16 | 0) {
   $$09$i = 0; //@line 3917
   do {
    $202 = $12 + $$09$i | 0; //@line 3921
    HEAP8[$202 >> 0] = HEAP8[$202 >> 0] ^ HEAP8[$6 + $$09$i >> 0]; //@line 3924
    $$09$i = $$09$i + 1 | 0; //@line 3925
   } while (($$09$i | 0) != ($16 | 0));
  }
 }
 $AsyncCtx = _emscripten_alloc_async_context(164, sp) | 0; //@line 3935
 $206 = _mbedtls_cipher_update($0, $12, $16, $12, $7) | 0; //@line 3936
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 675; //@line 3939
  HEAP32[$AsyncCtx + 4 >> 2] = $35; //@line 3941
  HEAP32[$AsyncCtx + 8 >> 2] = $38; //@line 3943
  HEAP32[$AsyncCtx + 12 >> 2] = $44; //@line 3945
  HEAP32[$AsyncCtx + 16 >> 2] = $41; //@line 3947
  HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 3949
  HEAP32[$AsyncCtx + 24 >> 2] = $26; //@line 3951
  HEAP32[$AsyncCtx + 28 >> 2] = $16; //@line 3953
  HEAP32[$AsyncCtx + 32 >> 2] = $20; //@line 3955
  HEAP32[$AsyncCtx + 36 >> 2] = $12; //@line 3957
  HEAP32[$AsyncCtx + 40 >> 2] = $17; //@line 3959
  HEAP32[$AsyncCtx + 44 >> 2] = $29; //@line 3961
  HEAP32[$AsyncCtx + 48 >> 2] = $22; //@line 3963
  HEAP32[$AsyncCtx + 52 >> 2] = $25; //@line 3965
  HEAP32[$AsyncCtx + 56 >> 2] = $28; //@line 3967
  HEAP32[$AsyncCtx + 60 >> 2] = $31; //@line 3969
  HEAP32[$AsyncCtx + 64 >> 2] = $36; //@line 3971
  HEAP32[$AsyncCtx + 68 >> 2] = $42; //@line 3973
  HEAP32[$AsyncCtx + 72 >> 2] = $18; //@line 3975
  HEAP32[$AsyncCtx + 76 >> 2] = $21; //@line 3977
  HEAP32[$AsyncCtx + 80 >> 2] = $46; //@line 3979
  HEAP32[$AsyncCtx + 84 >> 2] = $175; //@line 3981
  HEAP32[$AsyncCtx + 88 >> 2] = $32; //@line 3983
  HEAP32[$AsyncCtx + 92 >> 2] = $39; //@line 3985
  HEAP32[$AsyncCtx + 96 >> 2] = $7; //@line 3987
  HEAP32[$AsyncCtx + 100 >> 2] = $12; //@line 3989
  HEAP32[$AsyncCtx + 104 >> 2] = $24; //@line 3991
  HEAP32[$AsyncCtx + 108 >> 2] = $27; //@line 3993
  HEAP32[$AsyncCtx + 112 >> 2] = $176; //@line 3995
  HEAP32[$AsyncCtx + 116 >> 2] = $40; //@line 3997
  HEAP32[$AsyncCtx + 120 >> 2] = $43; //@line 3999
  HEAP32[$AsyncCtx + 124 >> 2] = $6; //@line 4001
  HEAP32[$AsyncCtx + 128 >> 2] = $33; //@line 4003
  HEAP32[$AsyncCtx + 132 >> 2] = $45; //@line 4005
  HEAP32[$AsyncCtx + 136 >> 2] = $19; //@line 4007
  HEAP32[$AsyncCtx + 140 >> 2] = $5; //@line 4009
  HEAP32[$AsyncCtx + 144 >> 2] = $1; //@line 4011
  HEAP32[$AsyncCtx + 148 >> 2] = $30; //@line 4013
  HEAP32[$AsyncCtx + 152 >> 2] = $34; //@line 4015
  HEAP32[$AsyncCtx + 156 >> 2] = $37; //@line 4017
  HEAP32[$AsyncCtx + 160 >> 2] = $23; //@line 4019
  sp = STACKTOP; //@line 4020
  STACKTOP = sp; //@line 4021
  return 0; //@line 4021
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4023
 if (!$206) {
  _memcpy($1 | 0, $12 | 0, $16 | 0) | 0; //@line 4026
 }
 HEAP8[$4 >> 0] = 0; //@line 4028
 HEAP8[$17 >> 0] = 0; //@line 4029
 HEAP8[$18 >> 0] = 0; //@line 4030
 HEAP8[$19 >> 0] = 0; //@line 4031
 HEAP8[$20 >> 0] = 0; //@line 4032
 HEAP8[$21 >> 0] = 0; //@line 4033
 HEAP8[$22 >> 0] = 0; //@line 4034
 HEAP8[$23 >> 0] = 0; //@line 4035
 HEAP8[$24 >> 0] = 0; //@line 4036
 HEAP8[$25 >> 0] = 0; //@line 4037
 HEAP8[$26 >> 0] = 0; //@line 4038
 HEAP8[$27 >> 0] = 0; //@line 4039
 HEAP8[$28 >> 0] = 0; //@line 4040
 HEAP8[$29 >> 0] = 0; //@line 4041
 HEAP8[$30 >> 0] = 0; //@line 4042
 HEAP8[$31 >> 0] = 0; //@line 4043
 HEAP8[$5 >> 0] = 0; //@line 4044
 HEAP8[$32 >> 0] = 0; //@line 4045
 HEAP8[$33 >> 0] = 0; //@line 4046
 HEAP8[$34 >> 0] = 0; //@line 4047
 HEAP8[$35 >> 0] = 0; //@line 4048
 HEAP8[$36 >> 0] = 0; //@line 4049
 HEAP8[$37 >> 0] = 0; //@line 4050
 HEAP8[$38 >> 0] = 0; //@line 4051
 HEAP8[$39 >> 0] = 0; //@line 4052
 HEAP8[$40 >> 0] = 0; //@line 4053
 HEAP8[$41 >> 0] = 0; //@line 4054
 HEAP8[$42 >> 0] = 0; //@line 4055
 HEAP8[$43 >> 0] = 0; //@line 4056
 HEAP8[$44 >> 0] = 0; //@line 4057
 HEAP8[$45 >> 0] = 0; //@line 4058
 HEAP8[$46 >> 0] = 0; //@line 4059
 HEAP32[$176 >> 2] = 0; //@line 4060
 HEAP8[$175 >> 0] = 0; //@line 4062
 HEAP8[$12 + 17 >> 0] = 0; //@line 4064
 HEAP8[$12 + 18 >> 0] = 0; //@line 4066
 HEAP8[$12 + 19 >> 0] = 0; //@line 4068
 HEAP8[$12 + 20 >> 0] = 0; //@line 4070
 HEAP8[$12 + 21 >> 0] = 0; //@line 4072
 HEAP8[$12 + 22 >> 0] = 0; //@line 4074
 HEAP8[$12 + 23 >> 0] = 0; //@line 4076
 HEAP8[$12 + 24 >> 0] = 0; //@line 4078
 HEAP8[$12 + 25 >> 0] = 0; //@line 4080
 HEAP8[$12 + 26 >> 0] = 0; //@line 4082
 HEAP8[$12 + 27 >> 0] = 0; //@line 4084
 HEAP8[$12 + 28 >> 0] = 0; //@line 4086
 HEAP8[$12 + 29 >> 0] = 0; //@line 4088
 HEAP8[$12 + 30 >> 0] = 0; //@line 4090
 HEAP8[$12 + 31 >> 0] = 0; //@line 4091
 HEAP8[$12 >> 0] = 0; //@line 4093
 HEAP8[$12 + 1 >> 0] = 0; //@line 4095
 HEAP8[$12 + 2 >> 0] = 0; //@line 4097
 HEAP8[$12 + 3 >> 0] = 0; //@line 4099
 HEAP8[$12 + 4 >> 0] = 0; //@line 4101
 HEAP8[$12 + 5 >> 0] = 0; //@line 4103
 HEAP8[$12 + 6 >> 0] = 0; //@line 4105
 HEAP8[$12 + 7 >> 0] = 0; //@line 4107
 HEAP8[$12 + 8 >> 0] = 0; //@line 4109
 HEAP8[$12 + 9 >> 0] = 0; //@line 4111
 HEAP8[$12 + 10 >> 0] = 0; //@line 4113
 HEAP8[$12 + 11 >> 0] = 0; //@line 4115
 HEAP8[$12 + 12 >> 0] = 0; //@line 4117
 HEAP8[$12 + 13 >> 0] = 0; //@line 4119
 HEAP8[$12 + 14 >> 0] = 0; //@line 4121
 HEAP8[$12 + 15 >> 0] = 0; //@line 4122
 $$0 = $206; //@line 4123
 STACKTOP = sp; //@line 4124
 return $$0 | 0; //@line 4124
}
function _free($0) {
 $0 = $0 | 0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre$phi442Z2D = 0, $$pre$phi444Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $105 = 0, $106 = 0, $114 = 0, $115 = 0, $116 = 0, $124 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $141 = 0, $143 = 0, $145 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $17 = 0, $170 = 0, $173 = 0, $176 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $195 = 0, $196 = 0, $2 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $220 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $245 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $270 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $299 = 0, $3 = 0, $301 = 0, $308 = 0, $309 = 0, $310 = 0, $319 = 0, $41 = 0, $46 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0, label = 0;
 if (!$0) {
  return;
 }
 $2 = $0 + -8 | 0; //@line 9342
 $3 = HEAP32[5638] | 0; //@line 9343
 if ($2 >>> 0 < $3 >>> 0) {
  _abort(); //@line 9346
 }
 $6 = HEAP32[$0 + -4 >> 2] | 0; //@line 9350
 $7 = $6 & 3; //@line 9351
 if (($7 | 0) == 1) {
  _abort(); //@line 9354
 }
 $9 = $6 & -8; //@line 9357
 $10 = $2 + $9 | 0; //@line 9358
 L10 : do {
  if (!($6 & 1)) {
   $13 = HEAP32[$2 >> 2] | 0; //@line 9363
   if (!$7) {
    return;
   }
   $16 = $2 + (0 - $13) | 0; //@line 9369
   $17 = $13 + $9 | 0; //@line 9370
   if ($16 >>> 0 < $3 >>> 0) {
    _abort(); //@line 9373
   }
   if ((HEAP32[5639] | 0) == ($16 | 0)) {
    $105 = $10 + 4 | 0; //@line 9379
    $106 = HEAP32[$105 >> 2] | 0; //@line 9380
    if (($106 & 3 | 0) != 3) {
     $$1 = $16; //@line 9384
     $$1382 = $17; //@line 9384
     $114 = $16; //@line 9384
     break;
    }
    HEAP32[5636] = $17; //@line 9387
    HEAP32[$105 >> 2] = $106 & -2; //@line 9389
    HEAP32[$16 + 4 >> 2] = $17 | 1; //@line 9392
    HEAP32[$16 + $17 >> 2] = $17; //@line 9394
    return;
   }
   $21 = $13 >>> 3; //@line 9397
   if ($13 >>> 0 < 256) {
    $24 = HEAP32[$16 + 8 >> 2] | 0; //@line 9401
    $26 = HEAP32[$16 + 12 >> 2] | 0; //@line 9403
    $28 = 22576 + ($21 << 1 << 2) | 0; //@line 9405
    if (($24 | 0) != ($28 | 0)) {
     if ($3 >>> 0 > $24 >>> 0) {
      _abort(); //@line 9410
     }
     if ((HEAP32[$24 + 12 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 9417
     }
    }
    if (($26 | 0) == ($24 | 0)) {
     HEAP32[5634] = HEAP32[5634] & ~(1 << $21); //@line 9427
     $$1 = $16; //@line 9428
     $$1382 = $17; //@line 9428
     $114 = $16; //@line 9428
     break;
    }
    if (($26 | 0) == ($28 | 0)) {
     $$pre$phi444Z2D = $26 + 8 | 0; //@line 9434
    } else {
     if ($3 >>> 0 > $26 >>> 0) {
      _abort(); //@line 9438
     }
     $41 = $26 + 8 | 0; //@line 9441
     if ((HEAP32[$41 >> 2] | 0) == ($16 | 0)) {
      $$pre$phi444Z2D = $41; //@line 9445
     } else {
      _abort(); //@line 9447
     }
    }
    HEAP32[$24 + 12 >> 2] = $26; //@line 9452
    HEAP32[$$pre$phi444Z2D >> 2] = $24; //@line 9453
    $$1 = $16; //@line 9454
    $$1382 = $17; //@line 9454
    $114 = $16; //@line 9454
    break;
   }
   $46 = HEAP32[$16 + 24 >> 2] | 0; //@line 9458
   $48 = HEAP32[$16 + 12 >> 2] | 0; //@line 9460
   do {
    if (($48 | 0) == ($16 | 0)) {
     $59 = $16 + 16 | 0; //@line 9464
     $60 = $59 + 4 | 0; //@line 9465
     $61 = HEAP32[$60 >> 2] | 0; //@line 9466
     if (!$61) {
      $63 = HEAP32[$59 >> 2] | 0; //@line 9469
      if (!$63) {
       $$3 = 0; //@line 9472
       break;
      } else {
       $$1387 = $63; //@line 9475
       $$1390 = $59; //@line 9475
      }
     } else {
      $$1387 = $61; //@line 9478
      $$1390 = $60; //@line 9478
     }
     while (1) {
      $65 = $$1387 + 20 | 0; //@line 9481
      $66 = HEAP32[$65 >> 2] | 0; //@line 9482
      if ($66 | 0) {
       $$1387 = $66; //@line 9485
       $$1390 = $65; //@line 9485
       continue;
      }
      $68 = $$1387 + 16 | 0; //@line 9488
      $69 = HEAP32[$68 >> 2] | 0; //@line 9489
      if (!$69) {
       break;
      } else {
       $$1387 = $69; //@line 9494
       $$1390 = $68; //@line 9494
      }
     }
     if ($3 >>> 0 > $$1390 >>> 0) {
      _abort(); //@line 9499
     } else {
      HEAP32[$$1390 >> 2] = 0; //@line 9502
      $$3 = $$1387; //@line 9503
      break;
     }
    } else {
     $51 = HEAP32[$16 + 8 >> 2] | 0; //@line 9508
     if ($3 >>> 0 > $51 >>> 0) {
      _abort(); //@line 9511
     }
     $53 = $51 + 12 | 0; //@line 9514
     if ((HEAP32[$53 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 9518
     }
     $56 = $48 + 8 | 0; //@line 9521
     if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$53 >> 2] = $48; //@line 9525
      HEAP32[$56 >> 2] = $51; //@line 9526
      $$3 = $48; //@line 9527
      break;
     } else {
      _abort(); //@line 9530
     }
    }
   } while (0);
   if (!$46) {
    $$1 = $16; //@line 9537
    $$1382 = $17; //@line 9537
    $114 = $16; //@line 9537
   } else {
    $74 = HEAP32[$16 + 28 >> 2] | 0; //@line 9540
    $75 = 22840 + ($74 << 2) | 0; //@line 9541
    do {
     if ((HEAP32[$75 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$75 >> 2] = $$3; //@line 9546
      if (!$$3) {
       HEAP32[5635] = HEAP32[5635] & ~(1 << $74); //@line 9553
       $$1 = $16; //@line 9554
       $$1382 = $17; //@line 9554
       $114 = $16; //@line 9554
       break L10;
      }
     } else {
      if ((HEAP32[5638] | 0) >>> 0 > $46 >>> 0) {
       _abort(); //@line 9561
      } else {
       HEAP32[$46 + 16 + (((HEAP32[$46 + 16 >> 2] | 0) != ($16 | 0) & 1) << 2) >> 2] = $$3; //@line 9569
       if (!$$3) {
        $$1 = $16; //@line 9572
        $$1382 = $17; //@line 9572
        $114 = $16; //@line 9572
        break L10;
       } else {
        break;
       }
      }
     }
    } while (0);
    $89 = HEAP32[5638] | 0; //@line 9580
    if ($89 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 9583
    }
    HEAP32[$$3 + 24 >> 2] = $46; //@line 9587
    $92 = $16 + 16 | 0; //@line 9588
    $93 = HEAP32[$92 >> 2] | 0; //@line 9589
    do {
     if ($93 | 0) {
      if ($89 >>> 0 > $93 >>> 0) {
       _abort(); //@line 9595
      } else {
       HEAP32[$$3 + 16 >> 2] = $93; //@line 9599
       HEAP32[$93 + 24 >> 2] = $$3; //@line 9601
       break;
      }
     }
    } while (0);
    $99 = HEAP32[$92 + 4 >> 2] | 0; //@line 9607
    if (!$99) {
     $$1 = $16; //@line 9610
     $$1382 = $17; //@line 9610
     $114 = $16; //@line 9610
    } else {
     if ((HEAP32[5638] | 0) >>> 0 > $99 >>> 0) {
      _abort(); //@line 9615
     } else {
      HEAP32[$$3 + 20 >> 2] = $99; //@line 9619
      HEAP32[$99 + 24 >> 2] = $$3; //@line 9621
      $$1 = $16; //@line 9622
      $$1382 = $17; //@line 9622
      $114 = $16; //@line 9622
      break;
     }
    }
   }
  } else {
   $$1 = $2; //@line 9628
   $$1382 = $9; //@line 9628
   $114 = $2; //@line 9628
  }
 } while (0);
 if ($114 >>> 0 >= $10 >>> 0) {
  _abort(); //@line 9633
 }
 $115 = $10 + 4 | 0; //@line 9636
 $116 = HEAP32[$115 >> 2] | 0; //@line 9637
 if (!($116 & 1)) {
  _abort(); //@line 9641
 }
 if (!($116 & 2)) {
  if ((HEAP32[5640] | 0) == ($10 | 0)) {
   $124 = (HEAP32[5637] | 0) + $$1382 | 0; //@line 9651
   HEAP32[5637] = $124; //@line 9652
   HEAP32[5640] = $$1; //@line 9653
   HEAP32[$$1 + 4 >> 2] = $124 | 1; //@line 9656
   if (($$1 | 0) != (HEAP32[5639] | 0)) {
    return;
   }
   HEAP32[5639] = 0; //@line 9662
   HEAP32[5636] = 0; //@line 9663
   return;
  }
  if ((HEAP32[5639] | 0) == ($10 | 0)) {
   $132 = (HEAP32[5636] | 0) + $$1382 | 0; //@line 9670
   HEAP32[5636] = $132; //@line 9671
   HEAP32[5639] = $114; //@line 9672
   HEAP32[$$1 + 4 >> 2] = $132 | 1; //@line 9675
   HEAP32[$114 + $132 >> 2] = $132; //@line 9677
   return;
  }
  $137 = ($116 & -8) + $$1382 | 0; //@line 9681
  $138 = $116 >>> 3; //@line 9682
  L108 : do {
   if ($116 >>> 0 < 256) {
    $141 = HEAP32[$10 + 8 >> 2] | 0; //@line 9687
    $143 = HEAP32[$10 + 12 >> 2] | 0; //@line 9689
    $145 = 22576 + ($138 << 1 << 2) | 0; //@line 9691
    if (($141 | 0) != ($145 | 0)) {
     if ((HEAP32[5638] | 0) >>> 0 > $141 >>> 0) {
      _abort(); //@line 9697
     }
     if ((HEAP32[$141 + 12 >> 2] | 0) != ($10 | 0)) {
      _abort(); //@line 9704
     }
    }
    if (($143 | 0) == ($141 | 0)) {
     HEAP32[5634] = HEAP32[5634] & ~(1 << $138); //@line 9714
     break;
    }
    if (($143 | 0) == ($145 | 0)) {
     $$pre$phi442Z2D = $143 + 8 | 0; //@line 9720
    } else {
     if ((HEAP32[5638] | 0) >>> 0 > $143 >>> 0) {
      _abort(); //@line 9725
     }
     $160 = $143 + 8 | 0; //@line 9728
     if ((HEAP32[$160 >> 2] | 0) == ($10 | 0)) {
      $$pre$phi442Z2D = $160; //@line 9732
     } else {
      _abort(); //@line 9734
     }
    }
    HEAP32[$141 + 12 >> 2] = $143; //@line 9739
    HEAP32[$$pre$phi442Z2D >> 2] = $141; //@line 9740
   } else {
    $165 = HEAP32[$10 + 24 >> 2] | 0; //@line 9743
    $167 = HEAP32[$10 + 12 >> 2] | 0; //@line 9745
    do {
     if (($167 | 0) == ($10 | 0)) {
      $179 = $10 + 16 | 0; //@line 9749
      $180 = $179 + 4 | 0; //@line 9750
      $181 = HEAP32[$180 >> 2] | 0; //@line 9751
      if (!$181) {
       $183 = HEAP32[$179 >> 2] | 0; //@line 9754
       if (!$183) {
        $$3400 = 0; //@line 9757
        break;
       } else {
        $$1398 = $183; //@line 9760
        $$1402 = $179; //@line 9760
       }
      } else {
       $$1398 = $181; //@line 9763
       $$1402 = $180; //@line 9763
      }
      while (1) {
       $185 = $$1398 + 20 | 0; //@line 9766
       $186 = HEAP32[$185 >> 2] | 0; //@line 9767
       if ($186 | 0) {
        $$1398 = $186; //@line 9770
        $$1402 = $185; //@line 9770
        continue;
       }
       $188 = $$1398 + 16 | 0; //@line 9773
       $189 = HEAP32[$188 >> 2] | 0; //@line 9774
       if (!$189) {
        break;
       } else {
        $$1398 = $189; //@line 9779
        $$1402 = $188; //@line 9779
       }
      }
      if ((HEAP32[5638] | 0) >>> 0 > $$1402 >>> 0) {
       _abort(); //@line 9785
      } else {
       HEAP32[$$1402 >> 2] = 0; //@line 9788
       $$3400 = $$1398; //@line 9789
       break;
      }
     } else {
      $170 = HEAP32[$10 + 8 >> 2] | 0; //@line 9794
      if ((HEAP32[5638] | 0) >>> 0 > $170 >>> 0) {
       _abort(); //@line 9798
      }
      $173 = $170 + 12 | 0; //@line 9801
      if ((HEAP32[$173 >> 2] | 0) != ($10 | 0)) {
       _abort(); //@line 9805
      }
      $176 = $167 + 8 | 0; //@line 9808
      if ((HEAP32[$176 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$173 >> 2] = $167; //@line 9812
       HEAP32[$176 >> 2] = $170; //@line 9813
       $$3400 = $167; //@line 9814
       break;
      } else {
       _abort(); //@line 9817
      }
     }
    } while (0);
    if ($165 | 0) {
     $195 = HEAP32[$10 + 28 >> 2] | 0; //@line 9825
     $196 = 22840 + ($195 << 2) | 0; //@line 9826
     do {
      if ((HEAP32[$196 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$196 >> 2] = $$3400; //@line 9831
       if (!$$3400) {
        HEAP32[5635] = HEAP32[5635] & ~(1 << $195); //@line 9838
        break L108;
       }
      } else {
       if ((HEAP32[5638] | 0) >>> 0 > $165 >>> 0) {
        _abort(); //@line 9845
       } else {
        HEAP32[$165 + 16 + (((HEAP32[$165 + 16 >> 2] | 0) != ($10 | 0) & 1) << 2) >> 2] = $$3400; //@line 9853
        if (!$$3400) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while (0);
     $210 = HEAP32[5638] | 0; //@line 9863
     if ($210 >>> 0 > $$3400 >>> 0) {
      _abort(); //@line 9866
     }
     HEAP32[$$3400 + 24 >> 2] = $165; //@line 9870
     $213 = $10 + 16 | 0; //@line 9871
     $214 = HEAP32[$213 >> 2] | 0; //@line 9872
     do {
      if ($214 | 0) {
       if ($210 >>> 0 > $214 >>> 0) {
        _abort(); //@line 9878
       } else {
        HEAP32[$$3400 + 16 >> 2] = $214; //@line 9882
        HEAP32[$214 + 24 >> 2] = $$3400; //@line 9884
        break;
       }
      }
     } while (0);
     $220 = HEAP32[$213 + 4 >> 2] | 0; //@line 9890
     if ($220 | 0) {
      if ((HEAP32[5638] | 0) >>> 0 > $220 >>> 0) {
       _abort(); //@line 9896
      } else {
       HEAP32[$$3400 + 20 >> 2] = $220; //@line 9900
       HEAP32[$220 + 24 >> 2] = $$3400; //@line 9902
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $137 | 1; //@line 9911
  HEAP32[$114 + $137 >> 2] = $137; //@line 9913
  if (($$1 | 0) == (HEAP32[5639] | 0)) {
   HEAP32[5636] = $137; //@line 9917
   return;
  } else {
   $$2 = $137; //@line 9920
  }
 } else {
  HEAP32[$115 >> 2] = $116 & -2; //@line 9924
  HEAP32[$$1 + 4 >> 2] = $$1382 | 1; //@line 9927
  HEAP32[$114 + $$1382 >> 2] = $$1382; //@line 9929
  $$2 = $$1382; //@line 9930
 }
 $235 = $$2 >>> 3; //@line 9932
 if ($$2 >>> 0 < 256) {
  $238 = 22576 + ($235 << 1 << 2) | 0; //@line 9936
  $239 = HEAP32[5634] | 0; //@line 9937
  $240 = 1 << $235; //@line 9938
  if (!($239 & $240)) {
   HEAP32[5634] = $239 | $240; //@line 9943
   $$0403 = $238; //@line 9945
   $$pre$phiZ2D = $238 + 8 | 0; //@line 9945
  } else {
   $244 = $238 + 8 | 0; //@line 9947
   $245 = HEAP32[$244 >> 2] | 0; //@line 9948
   if ((HEAP32[5638] | 0) >>> 0 > $245 >>> 0) {
    _abort(); //@line 9952
   } else {
    $$0403 = $245; //@line 9955
    $$pre$phiZ2D = $244; //@line 9955
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 9958
  HEAP32[$$0403 + 12 >> 2] = $$1; //@line 9960
  HEAP32[$$1 + 8 >> 2] = $$0403; //@line 9962
  HEAP32[$$1 + 12 >> 2] = $238; //@line 9964
  return;
 }
 $251 = $$2 >>> 8; //@line 9967
 if (!$251) {
  $$0396 = 0; //@line 9970
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0396 = 31; //@line 9974
  } else {
   $256 = ($251 + 1048320 | 0) >>> 16 & 8; //@line 9978
   $257 = $251 << $256; //@line 9979
   $260 = ($257 + 520192 | 0) >>> 16 & 4; //@line 9982
   $262 = $257 << $260; //@line 9984
   $265 = ($262 + 245760 | 0) >>> 16 & 2; //@line 9987
   $270 = 14 - ($260 | $256 | $265) + ($262 << $265 >>> 15) | 0; //@line 9992
   $$0396 = $$2 >>> ($270 + 7 | 0) & 1 | $270 << 1; //@line 9998
  }
 }
 $276 = 22840 + ($$0396 << 2) | 0; //@line 10001
 HEAP32[$$1 + 28 >> 2] = $$0396; //@line 10003
 HEAP32[$$1 + 20 >> 2] = 0; //@line 10006
 HEAP32[$$1 + 16 >> 2] = 0; //@line 10007
 $280 = HEAP32[5635] | 0; //@line 10008
 $281 = 1 << $$0396; //@line 10009
 do {
  if (!($280 & $281)) {
   HEAP32[5635] = $280 | $281; //@line 10015
   HEAP32[$276 >> 2] = $$1; //@line 10016
   HEAP32[$$1 + 24 >> 2] = $276; //@line 10018
   HEAP32[$$1 + 12 >> 2] = $$1; //@line 10020
   HEAP32[$$1 + 8 >> 2] = $$1; //@line 10022
  } else {
   $$0383 = $$2 << (($$0396 | 0) == 31 ? 0 : 25 - ($$0396 >>> 1) | 0); //@line 10030
   $$0384 = HEAP32[$276 >> 2] | 0; //@line 10030
   while (1) {
    if ((HEAP32[$$0384 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
     label = 124; //@line 10037
     break;
    }
    $299 = $$0384 + 16 + ($$0383 >>> 31 << 2) | 0; //@line 10041
    $301 = HEAP32[$299 >> 2] | 0; //@line 10043
    if (!$301) {
     label = 121; //@line 10046
     break;
    } else {
     $$0383 = $$0383 << 1; //@line 10049
     $$0384 = $301; //@line 10049
    }
   }
   if ((label | 0) == 121) {
    if ((HEAP32[5638] | 0) >>> 0 > $299 >>> 0) {
     _abort(); //@line 10056
    } else {
     HEAP32[$299 >> 2] = $$1; //@line 10059
     HEAP32[$$1 + 24 >> 2] = $$0384; //@line 10061
     HEAP32[$$1 + 12 >> 2] = $$1; //@line 10063
     HEAP32[$$1 + 8 >> 2] = $$1; //@line 10065
     break;
    }
   } else if ((label | 0) == 124) {
    $308 = $$0384 + 8 | 0; //@line 10070
    $309 = HEAP32[$308 >> 2] | 0; //@line 10071
    $310 = HEAP32[5638] | 0; //@line 10072
    if ($310 >>> 0 <= $309 >>> 0 & $310 >>> 0 <= $$0384 >>> 0) {
     HEAP32[$309 + 12 >> 2] = $$1; //@line 10078
     HEAP32[$308 >> 2] = $$1; //@line 10079
     HEAP32[$$1 + 8 >> 2] = $309; //@line 10081
     HEAP32[$$1 + 12 >> 2] = $$0384; //@line 10083
     HEAP32[$$1 + 24 >> 2] = 0; //@line 10085
     break;
    } else {
     _abort(); //@line 10088
    }
   }
  }
 } while (0);
 $319 = (HEAP32[5642] | 0) + -1 | 0; //@line 10095
 HEAP32[5642] = $319; //@line 10096
 if (!$319) {
  $$0212$in$i = 22992; //@line 10099
 } else {
  return;
 }
 while (1) {
  $$0212$i = HEAP32[$$0212$in$i >> 2] | 0; //@line 10104
  if (!$$0212$i) {
   break;
  } else {
   $$0212$in$i = $$0212$i + 8 | 0; //@line 10110
  }
 }
 HEAP32[5642] = -1; //@line 10113
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb_21($0) {
 $0 = $0 | 0;
 var $$013$i = 0, $$01720$i55 = 0, $$019$i = 0, $$019$i52 = 0, $$021$i54 = 0, $$09$i = 0, $$09$i41 = 0, $$09$i45 = 0, $$sink$sink$i = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $127 = 0, $130 = 0, $14 = 0, $143 = 0, $146 = 0, $154 = 0, $155 = 0, $16 = 0, $168 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $183 = 0, $2 = 0, $20 = 0, $200 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $26 = 0, $28 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0, $154$looptemp = 0;
 sp = STACKTOP; //@line 19168
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19170
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19172
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19174
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19176
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19178
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19180
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19182
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19184
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19186
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19188
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 19190
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 19192
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 19194
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 19196
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 19200
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 19202
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 19204
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 19206
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 19208
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 19210
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 19212
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 19214
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 19216
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 19218
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 19220
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 19222
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 19224
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 19226
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 19228
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 19230
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 19232
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 19234
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 19236
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 19238
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 19240
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 19242
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 19244
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 19246
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 19248
 $82 = HEAP32[$0 + 164 >> 2] | 0; //@line 19250
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 19252
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 19254
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 19256
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 19258
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 19260
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 19262
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 19264
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 19266
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 19268
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 19270
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 19272
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 19274
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 19276
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 19278
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 19280
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 19282
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 19284
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 19286
 $120 = HEAP32[$0 + 240 >> 2] | 0; //@line 19288
 $122 = HEAP32[$0 + 244 >> 2] | 0; //@line 19290
 $124 = HEAP32[$0 + 248 >> 2] | 0; //@line 19292
 L2 : do {
  if (!(HEAP32[___async_retval >> 2] | 0)) {
   switch ($102 | 0) {
   case 16:
    {
     $$019$i52 = 135; //@line 19300
     break;
    }
   case 8:
    {
     $$019$i52 = 27; //@line 19304
     break;
    }
   default:
    {
     break L2;
    }
   }
   $127 = $102 + -1 | 0; //@line 19311
   $$01720$i55 = 0; //@line 19312
   $$021$i54 = $127; //@line 19312
   while (1) {
    $130 = HEAPU8[$56 + $$021$i54 >> 0] | 0; //@line 19316
    HEAP8[$92 + $$021$i54 >> 0] = $130 << 1 | $$01720$i55; //@line 19321
    if (($$021$i54 | 0) > 0) {
     $$01720$i55 = $130 >>> 7; //@line 19326
     $$021$i54 = $$021$i54 + -1 | 0; //@line 19326
    } else {
     break;
    }
   }
   $143 = $92 + $127 | 0; //@line 19336
   $146 = $$019$i52 & 0 - ((HEAPU8[$12 >> 0] | 0) >>> 7) ^ (HEAPU8[$143 >> 0] | 0); //@line 19339
   HEAP8[$143 >> 0] = $146; //@line 19341
   switch ($102 | 0) {
   case 16:
    {
     $$019$i = 135; //@line 19344
     break;
    }
   case 8:
    {
     $$019$i = 27; //@line 19348
     break;
    }
   default:
    {
     break L2;
    }
   }
   HEAP8[$124 + $127 >> 0] = $146 << 1; //@line 19358
   if (($127 | 0) > 0) {
    $154 = $146; //@line 19362
    $155 = $102 + -2 | 0; //@line 19362
    while (1) {
     $154$looptemp = $154;
     $154 = HEAPU8[$92 + $155 >> 0] | 0; //@line 19367
     HEAP8[$124 + $155 >> 0] = $154 << 1 | $154$looptemp >>> 7; //@line 19372
     if (($155 | 0) <= 0) {
      break;
     } else {
      $155 = $155 + -1 | 0; //@line 19376
     }
    }
   }
   $168 = $124 + $127 | 0; //@line 19387
   HEAP8[$168 >> 0] = $$019$i & 0 - ((HEAPU8[$14 >> 0] | 0) >>> 7) ^ (HEAPU8[$168 >> 0] | 0); //@line 19392
  }
 } while (0);
 HEAP8[$12 >> 0] = 0; //@line 19395
 HEAP8[$120 >> 0] = 0; //@line 19396
 HEAP8[$76 >> 0] = 0; //@line 19397
 HEAP8[$20 >> 0] = 0; //@line 19398
 HEAP8[$104 >> 0] = 0; //@line 19399
 HEAP8[$94 >> 0] = 0; //@line 19400
 HEAP8[$66 >> 0] = 0; //@line 19401
 HEAP8[$90 >> 0] = 0; //@line 19402
 HEAP8[$118 >> 0] = 0; //@line 19403
 HEAP8[$22 >> 0] = 0; //@line 19404
 HEAP8[$44 >> 0] = 0; //@line 19405
 HEAP8[$122 >> 0] = 0; //@line 19406
 HEAP8[$36 >> 0] = 0; //@line 19407
 HEAP8[$60 >> 0] = 0; //@line 19408
 HEAP8[$84 >> 0] = 0; //@line 19409
 HEAP8[$24 >> 0] = 0; //@line 19410
 $173 = $70 + 16 | 0; //@line 19411
 $174 = $70 + 32 | 0; //@line 19412
 $175 = HEAP32[$174 >> 2] | 0; //@line 19413
 if ($175 >>> 0 < $18 >>> 0) {
  $$013$i = 0; //@line 19416
  do {
   if ($$013$i >>> 0 < $175 >>> 0) {
    $$sink$sink$i = HEAP8[$70 + 16 + $$013$i >> 0] | 0; //@line 19422
   } else {
    $$sink$sink$i = ($$013$i | 0) == ($175 | 0) ? -128 : 0; //@line 19426
   }
   HEAP8[$112 + $$013$i >> 0] = $$sink$sink$i; //@line 19429
   $$013$i = $$013$i + 1 | 0; //@line 19430
  } while (($$013$i | 0) != ($18 | 0));
  $$09$i45 = 0; //@line 19433
  do {
   $183 = $112 + $$09$i45 | 0; //@line 19440
   HEAP8[$183 >> 0] = HEAP8[$124 + $$09$i45 >> 0] ^ HEAP8[$183 >> 0]; //@line 19445
   $$09$i45 = $$09$i45 + 1 | 0; //@line 19446
  } while (($$09$i45 | 0) != ($18 | 0));
  label = 21; //@line 19449
 } else {
  if ($18 | 0) {
   $$09$i41 = 0; //@line 19458
   do {
    HEAP8[$112 + $$09$i41 >> 0] = HEAP8[$92 + $$09$i41 >> 0] ^ HEAP8[$70 + 16 + $$09$i41 >> 0]; //@line 19466
    $$09$i41 = $$09$i41 + 1 | 0; //@line 19467
   } while (($$09$i41 | 0) != ($18 | 0));
   label = 21; //@line 19470
  }
 }
 if ((label | 0) == 21) {
  if ($18 | 0) {
   $$09$i = 0; //@line 19481
   do {
    $200 = $70 + $$09$i | 0; //@line 19485
    HEAP8[$200 >> 0] = HEAP8[$200 >> 0] ^ HEAP8[$112 + $$09$i >> 0]; //@line 19488
    $$09$i = $$09$i + 1 | 0; //@line 19489
   } while (($$09$i | 0) != ($18 | 0));
  }
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(164) | 0; //@line 19499
 $204 = _mbedtls_cipher_update($96, $28, $18, $28, $110) | 0; //@line 19500
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 675; //@line 19503
  $205 = $ReallocAsyncCtx + 4 | 0; //@line 19504
  HEAP32[$205 >> 2] = $4; //@line 19505
  $206 = $ReallocAsyncCtx + 8 | 0; //@line 19506
  HEAP32[$206 >> 2] = $6; //@line 19507
  $207 = $ReallocAsyncCtx + 12 | 0; //@line 19508
  HEAP32[$207 >> 2] = $8; //@line 19509
  $208 = $ReallocAsyncCtx + 16 | 0; //@line 19510
  HEAP32[$208 >> 2] = $10; //@line 19511
  $209 = $ReallocAsyncCtx + 20 | 0; //@line 19512
  HEAP32[$209 >> 2] = $14; //@line 19513
  $210 = $ReallocAsyncCtx + 24 | 0; //@line 19514
  HEAP32[$210 >> 2] = $16; //@line 19515
  $211 = $ReallocAsyncCtx + 28 | 0; //@line 19516
  HEAP32[$211 >> 2] = $18; //@line 19517
  $212 = $ReallocAsyncCtx + 32 | 0; //@line 19518
  HEAP32[$212 >> 2] = $26; //@line 19519
  $213 = $ReallocAsyncCtx + 36 | 0; //@line 19520
  HEAP32[$213 >> 2] = $28; //@line 19521
  $214 = $ReallocAsyncCtx + 40 | 0; //@line 19522
  HEAP32[$214 >> 2] = $32; //@line 19523
  $215 = $ReallocAsyncCtx + 44 | 0; //@line 19524
  HEAP32[$215 >> 2] = $34; //@line 19525
  $216 = $ReallocAsyncCtx + 48 | 0; //@line 19526
  HEAP32[$216 >> 2] = $38; //@line 19527
  $217 = $ReallocAsyncCtx + 52 | 0; //@line 19528
  HEAP32[$217 >> 2] = $40; //@line 19529
  $218 = $ReallocAsyncCtx + 56 | 0; //@line 19530
  HEAP32[$218 >> 2] = $42; //@line 19531
  $219 = $ReallocAsyncCtx + 60 | 0; //@line 19532
  HEAP32[$219 >> 2] = $46; //@line 19533
  $220 = $ReallocAsyncCtx + 64 | 0; //@line 19534
  HEAP32[$220 >> 2] = $48; //@line 19535
  $221 = $ReallocAsyncCtx + 68 | 0; //@line 19536
  HEAP32[$221 >> 2] = $50; //@line 19537
  $222 = $ReallocAsyncCtx + 72 | 0; //@line 19538
  HEAP32[$222 >> 2] = $52; //@line 19539
  $223 = $ReallocAsyncCtx + 76 | 0; //@line 19540
  HEAP32[$223 >> 2] = $54; //@line 19541
  $224 = $ReallocAsyncCtx + 80 | 0; //@line 19542
  HEAP32[$224 >> 2] = $58; //@line 19543
  $225 = $ReallocAsyncCtx + 84 | 0; //@line 19544
  HEAP32[$225 >> 2] = $173; //@line 19545
  $226 = $ReallocAsyncCtx + 88 | 0; //@line 19546
  HEAP32[$226 >> 2] = $62; //@line 19547
  $227 = $ReallocAsyncCtx + 92 | 0; //@line 19548
  HEAP32[$227 >> 2] = $64; //@line 19549
  $228 = $ReallocAsyncCtx + 96 | 0; //@line 19550
  HEAP32[$228 >> 2] = $68; //@line 19551
  $229 = $ReallocAsyncCtx + 100 | 0; //@line 19552
  HEAP32[$229 >> 2] = $70; //@line 19553
  $230 = $ReallocAsyncCtx + 104 | 0; //@line 19554
  HEAP32[$230 >> 2] = $72; //@line 19555
  $231 = $ReallocAsyncCtx + 108 | 0; //@line 19556
  HEAP32[$231 >> 2] = $74; //@line 19557
  $232 = $ReallocAsyncCtx + 112 | 0; //@line 19558
  HEAP32[$232 >> 2] = $174; //@line 19559
  $233 = $ReallocAsyncCtx + 116 | 0; //@line 19560
  HEAP32[$233 >> 2] = $78; //@line 19561
  $234 = $ReallocAsyncCtx + 120 | 0; //@line 19562
  HEAP32[$234 >> 2] = $80; //@line 19563
  $235 = $ReallocAsyncCtx + 124 | 0; //@line 19564
  HEAP32[$235 >> 2] = $82; //@line 19565
  $236 = $ReallocAsyncCtx + 128 | 0; //@line 19566
  HEAP32[$236 >> 2] = $86; //@line 19567
  $237 = $ReallocAsyncCtx + 132 | 0; //@line 19568
  HEAP32[$237 >> 2] = $88; //@line 19569
  $238 = $ReallocAsyncCtx + 136 | 0; //@line 19570
  HEAP32[$238 >> 2] = $98; //@line 19571
  $239 = $ReallocAsyncCtx + 140 | 0; //@line 19572
  HEAP32[$239 >> 2] = $100; //@line 19573
  $240 = $ReallocAsyncCtx + 144 | 0; //@line 19574
  HEAP32[$240 >> 2] = $106; //@line 19575
  $241 = $ReallocAsyncCtx + 148 | 0; //@line 19576
  HEAP32[$241 >> 2] = $108; //@line 19577
  $242 = $ReallocAsyncCtx + 152 | 0; //@line 19578
  HEAP32[$242 >> 2] = $114; //@line 19579
  $243 = $ReallocAsyncCtx + 156 | 0; //@line 19580
  HEAP32[$243 >> 2] = $116; //@line 19581
  $244 = $ReallocAsyncCtx + 160 | 0; //@line 19582
  HEAP32[$244 >> 2] = $2; //@line 19583
  sp = STACKTOP; //@line 19584
  return;
 }
 HEAP32[___async_retval >> 2] = $204; //@line 19588
 ___async_unwind = 0; //@line 19589
 HEAP32[$ReallocAsyncCtx >> 2] = 675; //@line 19590
 $205 = $ReallocAsyncCtx + 4 | 0; //@line 19591
 HEAP32[$205 >> 2] = $4; //@line 19592
 $206 = $ReallocAsyncCtx + 8 | 0; //@line 19593
 HEAP32[$206 >> 2] = $6; //@line 19594
 $207 = $ReallocAsyncCtx + 12 | 0; //@line 19595
 HEAP32[$207 >> 2] = $8; //@line 19596
 $208 = $ReallocAsyncCtx + 16 | 0; //@line 19597
 HEAP32[$208 >> 2] = $10; //@line 19598
 $209 = $ReallocAsyncCtx + 20 | 0; //@line 19599
 HEAP32[$209 >> 2] = $14; //@line 19600
 $210 = $ReallocAsyncCtx + 24 | 0; //@line 19601
 HEAP32[$210 >> 2] = $16; //@line 19602
 $211 = $ReallocAsyncCtx + 28 | 0; //@line 19603
 HEAP32[$211 >> 2] = $18; //@line 19604
 $212 = $ReallocAsyncCtx + 32 | 0; //@line 19605
 HEAP32[$212 >> 2] = $26; //@line 19606
 $213 = $ReallocAsyncCtx + 36 | 0; //@line 19607
 HEAP32[$213 >> 2] = $28; //@line 19608
 $214 = $ReallocAsyncCtx + 40 | 0; //@line 19609
 HEAP32[$214 >> 2] = $32; //@line 19610
 $215 = $ReallocAsyncCtx + 44 | 0; //@line 19611
 HEAP32[$215 >> 2] = $34; //@line 19612
 $216 = $ReallocAsyncCtx + 48 | 0; //@line 19613
 HEAP32[$216 >> 2] = $38; //@line 19614
 $217 = $ReallocAsyncCtx + 52 | 0; //@line 19615
 HEAP32[$217 >> 2] = $40; //@line 19616
 $218 = $ReallocAsyncCtx + 56 | 0; //@line 19617
 HEAP32[$218 >> 2] = $42; //@line 19618
 $219 = $ReallocAsyncCtx + 60 | 0; //@line 19619
 HEAP32[$219 >> 2] = $46; //@line 19620
 $220 = $ReallocAsyncCtx + 64 | 0; //@line 19621
 HEAP32[$220 >> 2] = $48; //@line 19622
 $221 = $ReallocAsyncCtx + 68 | 0; //@line 19623
 HEAP32[$221 >> 2] = $50; //@line 19624
 $222 = $ReallocAsyncCtx + 72 | 0; //@line 19625
 HEAP32[$222 >> 2] = $52; //@line 19626
 $223 = $ReallocAsyncCtx + 76 | 0; //@line 19627
 HEAP32[$223 >> 2] = $54; //@line 19628
 $224 = $ReallocAsyncCtx + 80 | 0; //@line 19629
 HEAP32[$224 >> 2] = $58; //@line 19630
 $225 = $ReallocAsyncCtx + 84 | 0; //@line 19631
 HEAP32[$225 >> 2] = $173; //@line 19632
 $226 = $ReallocAsyncCtx + 88 | 0; //@line 19633
 HEAP32[$226 >> 2] = $62; //@line 19634
 $227 = $ReallocAsyncCtx + 92 | 0; //@line 19635
 HEAP32[$227 >> 2] = $64; //@line 19636
 $228 = $ReallocAsyncCtx + 96 | 0; //@line 19637
 HEAP32[$228 >> 2] = $68; //@line 19638
 $229 = $ReallocAsyncCtx + 100 | 0; //@line 19639
 HEAP32[$229 >> 2] = $70; //@line 19640
 $230 = $ReallocAsyncCtx + 104 | 0; //@line 19641
 HEAP32[$230 >> 2] = $72; //@line 19642
 $231 = $ReallocAsyncCtx + 108 | 0; //@line 19643
 HEAP32[$231 >> 2] = $74; //@line 19644
 $232 = $ReallocAsyncCtx + 112 | 0; //@line 19645
 HEAP32[$232 >> 2] = $174; //@line 19646
 $233 = $ReallocAsyncCtx + 116 | 0; //@line 19647
 HEAP32[$233 >> 2] = $78; //@line 19648
 $234 = $ReallocAsyncCtx + 120 | 0; //@line 19649
 HEAP32[$234 >> 2] = $80; //@line 19650
 $235 = $ReallocAsyncCtx + 124 | 0; //@line 19651
 HEAP32[$235 >> 2] = $82; //@line 19652
 $236 = $ReallocAsyncCtx + 128 | 0; //@line 19653
 HEAP32[$236 >> 2] = $86; //@line 19654
 $237 = $ReallocAsyncCtx + 132 | 0; //@line 19655
 HEAP32[$237 >> 2] = $88; //@line 19656
 $238 = $ReallocAsyncCtx + 136 | 0; //@line 19657
 HEAP32[$238 >> 2] = $98; //@line 19658
 $239 = $ReallocAsyncCtx + 140 | 0; //@line 19659
 HEAP32[$239 >> 2] = $100; //@line 19660
 $240 = $ReallocAsyncCtx + 144 | 0; //@line 19661
 HEAP32[$240 >> 2] = $106; //@line 19662
 $241 = $ReallocAsyncCtx + 148 | 0; //@line 19663
 HEAP32[$241 >> 2] = $108; //@line 19664
 $242 = $ReallocAsyncCtx + 152 | 0; //@line 19665
 HEAP32[$242 >> 2] = $114; //@line 19666
 $243 = $ReallocAsyncCtx + 156 | 0; //@line 19667
 HEAP32[$243 >> 2] = $116; //@line 19668
 $244 = $ReallocAsyncCtx + 160 | 0; //@line 19669
 HEAP32[$244 >> 2] = $2; //@line 19670
 sp = STACKTOP; //@line 19671
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $107 = 0, $121 = 0, $122 = 0, $125 = 0, $143 = 0, $2 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $4 = 0, $43 = 0, $46 = 0, $51 = 0, $52 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $67 = 0, $78 = 0, $93 = 0, $96 = 0, $AsyncCtx = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx46 = 0, $AsyncCtx50 = 0, $AsyncCtx54 = 0, $AsyncCtx58 = 0, $AsyncCtx61 = 0, $AsyncCtx64 = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP; //@line 835
 STACKTOP = STACKTOP + 112 | 0; //@line 836
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 836
 $vararg_buffer19 = sp + 64 | 0; //@line 837
 $vararg_buffer17 = sp + 56 | 0; //@line 838
 $vararg_buffer14 = sp + 48 | 0; //@line 839
 $vararg_buffer11 = sp + 40 | 0; //@line 840
 $vararg_buffer9 = sp + 32 | 0; //@line 841
 $vararg_buffer6 = sp + 24 | 0; //@line 842
 $vararg_buffer4 = sp + 16 | 0; //@line 843
 $vararg_buffer1 = sp + 8 | 0; //@line 844
 $2 = sp + 88 | 0; //@line 846
 $3 = sp + 72 | 0; //@line 847
 _printf(10880, sp) | 0; //@line 848
 $4 = $0 + 783 | 0; //@line 849
 $6 = HEAPU8[$4 >> 0] | 0; //@line 851
 HEAP32[$vararg_buffer1 >> 2] = $1; //@line 852
 HEAP32[$vararg_buffer1 + 4 >> 2] = $6; //@line 854
 _printf(11240, $vararg_buffer1) | 0; //@line 855
 $AsyncCtx58 = _emscripten_alloc_async_context(80, sp) | 0; //@line 856
 _putchar(10) | 0; //@line 857
 if (___async) {
  HEAP32[$AsyncCtx58 >> 2] = 65; //@line 860
  HEAP32[$AsyncCtx58 + 4 >> 2] = $0; //@line 862
  HEAP32[$AsyncCtx58 + 8 >> 2] = $4; //@line 864
  HEAP32[$AsyncCtx58 + 12 >> 2] = $vararg_buffer9; //@line 866
  HEAP32[$AsyncCtx58 + 16 >> 2] = $vararg_buffer9; //@line 868
  HEAP32[$AsyncCtx58 + 20 >> 2] = $vararg_buffer11; //@line 870
  HEAP32[$AsyncCtx58 + 24 >> 2] = $vararg_buffer11; //@line 872
  HEAP32[$AsyncCtx58 + 28 >> 2] = $2; //@line 874
  HEAP32[$AsyncCtx58 + 32 >> 2] = $1; //@line 876
  HEAP32[$AsyncCtx58 + 36 >> 2] = $3; //@line 878
  HEAP32[$AsyncCtx58 + 40 >> 2] = $vararg_buffer17; //@line 880
  HEAP32[$AsyncCtx58 + 44 >> 2] = $vararg_buffer17; //@line 882
  HEAP32[$AsyncCtx58 + 48 >> 2] = $vararg_buffer19; //@line 884
  HEAP32[$AsyncCtx58 + 52 >> 2] = $vararg_buffer19; //@line 886
  HEAP32[$AsyncCtx58 + 56 >> 2] = $vararg_buffer6; //@line 888
  HEAP32[$AsyncCtx58 + 60 >> 2] = $vararg_buffer6; //@line 890
  HEAP32[$AsyncCtx58 + 64 >> 2] = $vararg_buffer14; //@line 892
  HEAP32[$AsyncCtx58 + 68 >> 2] = $vararg_buffer14; //@line 894
  HEAP32[$AsyncCtx58 + 72 >> 2] = $vararg_buffer4; //@line 896
  HEAP32[$AsyncCtx58 + 76 >> 2] = $vararg_buffer4; //@line 898
  sp = STACKTOP; //@line 899
  STACKTOP = sp; //@line 900
  return;
 }
 _emscripten_free_async_context($AsyncCtx58 | 0); //@line 902
 HEAP8[$0 + 688 >> 0] = 1; //@line 904
 if (HEAP8[$4 >> 0] | 0) {
  HEAP8[$4 >> 0] = 0; //@line 908
  $29 = $0 + 1112 | 0; //@line 909
  $30 = $2 + 12 | 0; //@line 910
  HEAP32[$2 >> 2] = 66; //@line 911
  HEAP32[$2 + 4 >> 2] = 0; //@line 913
  HEAP32[$2 + 8 >> 2] = $0; //@line 915
  HEAP32[$30 >> 2] = 648; //@line 916
  $31 = $0 + 1152 | 0; //@line 917
  if (($31 | 0) != ($2 | 0)) {
   $33 = $0 + 1164 | 0; //@line 920
   $34 = HEAP32[$33 >> 2] | 0; //@line 921
   do {
    if ($34 | 0) {
     $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 926
     $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 927
     FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 928
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 67; //@line 931
      HEAP32[$AsyncCtx + 4 >> 2] = $30; //@line 933
      HEAP32[$AsyncCtx + 8 >> 2] = $33; //@line 935
      HEAP32[$AsyncCtx + 12 >> 2] = $31; //@line 937
      HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 939
      HEAP32[$AsyncCtx + 20 >> 2] = $29; //@line 941
      sp = STACKTOP; //@line 942
      STACKTOP = sp; //@line 943
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 945
      break;
     }
    }
   } while (0);
   $43 = HEAP32[$30 >> 2] | 0; //@line 950
   do {
    if (!$43) {
     $51 = 0; //@line 954
    } else {
     $46 = HEAP32[$43 + 4 >> 2] | 0; //@line 957
     $AsyncCtx23 = _emscripten_alloc_async_context(20, sp) | 0; //@line 958
     FUNCTION_TABLE_vii[$46 & 31]($31, $2); //@line 959
     if (___async) {
      HEAP32[$AsyncCtx23 >> 2] = 68; //@line 962
      HEAP32[$AsyncCtx23 + 4 >> 2] = $30; //@line 964
      HEAP32[$AsyncCtx23 + 8 >> 2] = $33; //@line 966
      HEAP32[$AsyncCtx23 + 12 >> 2] = $29; //@line 968
      HEAP32[$AsyncCtx23 + 16 >> 2] = $2; //@line 970
      sp = STACKTOP; //@line 971
      STACKTOP = sp; //@line 972
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx23 | 0); //@line 974
      $51 = HEAP32[$30 >> 2] | 0; //@line 976
      break;
     }
    }
   } while (0);
   HEAP32[$33 >> 2] = $51; //@line 981
  }
  __ZN4mbed6Ticker5setupEy($29, 2e5, 0); //@line 983
  $52 = HEAP32[$30 >> 2] | 0; //@line 984
  if (!$52) {
   STACKTOP = sp; //@line 987
   return;
  }
  $55 = HEAP32[$52 + 8 >> 2] | 0; //@line 990
  $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 991
  FUNCTION_TABLE_vi[$55 & 1023]($2); //@line 992
  if (___async) {
   HEAP32[$AsyncCtx27 >> 2] = 69; //@line 995
   sp = STACKTOP; //@line 996
   STACKTOP = sp; //@line 997
   return;
  }
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 999
  STACKTOP = sp; //@line 1000
  return;
 }
 do {
  if ($1 | 0) {
   $57 = $0 + 1112 | 0; //@line 1005
   $58 = $3 + 12 | 0; //@line 1006
   HEAP32[$3 >> 2] = 70; //@line 1007
   HEAP32[$3 + 4 >> 2] = 0; //@line 1009
   HEAP32[$3 + 8 >> 2] = $0; //@line 1011
   HEAP32[$58 >> 2] = 648; //@line 1012
   $59 = ___muldi3($1 | 0, 0, 1e3, 0) | 0; //@line 1013
   $60 = tempRet0; //@line 1014
   $61 = $0 + 1152 | 0; //@line 1015
   if (($61 | 0) != ($3 | 0)) {
    $63 = $0 + 1164 | 0; //@line 1018
    $64 = HEAP32[$63 >> 2] | 0; //@line 1019
    do {
     if ($64 | 0) {
      $67 = HEAP32[$64 + 8 >> 2] | 0; //@line 1024
      $AsyncCtx31 = _emscripten_alloc_async_context(96, sp) | 0; //@line 1025
      FUNCTION_TABLE_vi[$67 & 1023]($61); //@line 1026
      if (___async) {
       HEAP32[$AsyncCtx31 >> 2] = 71; //@line 1029
       HEAP32[$AsyncCtx31 + 4 >> 2] = $vararg_buffer9; //@line 1031
       HEAP32[$AsyncCtx31 + 8 >> 2] = $vararg_buffer9; //@line 1033
       HEAP32[$AsyncCtx31 + 12 >> 2] = $vararg_buffer11; //@line 1035
       HEAP32[$AsyncCtx31 + 16 >> 2] = $vararg_buffer11; //@line 1037
       HEAP32[$AsyncCtx31 + 20 >> 2] = $58; //@line 1039
       HEAP32[$AsyncCtx31 + 24 >> 2] = $0; //@line 1041
       HEAP32[$AsyncCtx31 + 28 >> 2] = $3; //@line 1043
       HEAP32[$AsyncCtx31 + 32 >> 2] = $63; //@line 1045
       HEAP32[$AsyncCtx31 + 36 >> 2] = $57; //@line 1047
       $78 = $AsyncCtx31 + 40 | 0; //@line 1049
       HEAP32[$78 >> 2] = $59; //@line 1051
       HEAP32[$78 + 4 >> 2] = $60; //@line 1054
       HEAP32[$AsyncCtx31 + 48 >> 2] = $vararg_buffer17; //@line 1056
       HEAP32[$AsyncCtx31 + 52 >> 2] = $vararg_buffer17; //@line 1058
       HEAP32[$AsyncCtx31 + 56 >> 2] = $vararg_buffer19; //@line 1060
       HEAP32[$AsyncCtx31 + 60 >> 2] = $vararg_buffer19; //@line 1062
       HEAP32[$AsyncCtx31 + 64 >> 2] = $61; //@line 1064
       HEAP32[$AsyncCtx31 + 68 >> 2] = $vararg_buffer6; //@line 1066
       HEAP32[$AsyncCtx31 + 72 >> 2] = $vararg_buffer6; //@line 1068
       HEAP32[$AsyncCtx31 + 76 >> 2] = $vararg_buffer14; //@line 1070
       HEAP32[$AsyncCtx31 + 80 >> 2] = $vararg_buffer14; //@line 1072
       HEAP32[$AsyncCtx31 + 84 >> 2] = $vararg_buffer4; //@line 1074
       HEAP32[$AsyncCtx31 + 88 >> 2] = $vararg_buffer4; //@line 1076
       sp = STACKTOP; //@line 1077
       STACKTOP = sp; //@line 1078
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx31 | 0); //@line 1080
       break;
      }
     }
    } while (0);
    $93 = HEAP32[$58 >> 2] | 0; //@line 1085
    do {
     if (!$93) {
      $121 = 0; //@line 1089
     } else {
      $96 = HEAP32[$93 + 4 >> 2] | 0; //@line 1092
      $AsyncCtx34 = _emscripten_alloc_async_context(88, sp) | 0; //@line 1093
      FUNCTION_TABLE_vii[$96 & 31]($61, $3); //@line 1094
      if (___async) {
       HEAP32[$AsyncCtx34 >> 2] = 72; //@line 1097
       HEAP32[$AsyncCtx34 + 4 >> 2] = $vararg_buffer9; //@line 1099
       HEAP32[$AsyncCtx34 + 8 >> 2] = $vararg_buffer9; //@line 1101
       HEAP32[$AsyncCtx34 + 12 >> 2] = $vararg_buffer11; //@line 1103
       HEAP32[$AsyncCtx34 + 16 >> 2] = $vararg_buffer11; //@line 1105
       HEAP32[$AsyncCtx34 + 20 >> 2] = $0; //@line 1107
       HEAP32[$AsyncCtx34 + 24 >> 2] = $58; //@line 1109
       HEAP32[$AsyncCtx34 + 28 >> 2] = $3; //@line 1111
       HEAP32[$AsyncCtx34 + 32 >> 2] = $63; //@line 1113
       HEAP32[$AsyncCtx34 + 36 >> 2] = $57; //@line 1115
       $107 = $AsyncCtx34 + 40 | 0; //@line 1117
       HEAP32[$107 >> 2] = $59; //@line 1119
       HEAP32[$107 + 4 >> 2] = $60; //@line 1122
       HEAP32[$AsyncCtx34 + 48 >> 2] = $vararg_buffer17; //@line 1124
       HEAP32[$AsyncCtx34 + 52 >> 2] = $vararg_buffer17; //@line 1126
       HEAP32[$AsyncCtx34 + 56 >> 2] = $vararg_buffer19; //@line 1128
       HEAP32[$AsyncCtx34 + 60 >> 2] = $vararg_buffer19; //@line 1130
       HEAP32[$AsyncCtx34 + 64 >> 2] = $vararg_buffer6; //@line 1132
       HEAP32[$AsyncCtx34 + 68 >> 2] = $vararg_buffer6; //@line 1134
       HEAP32[$AsyncCtx34 + 72 >> 2] = $vararg_buffer14; //@line 1136
       HEAP32[$AsyncCtx34 + 76 >> 2] = $vararg_buffer14; //@line 1138
       HEAP32[$AsyncCtx34 + 80 >> 2] = $vararg_buffer4; //@line 1140
       HEAP32[$AsyncCtx34 + 84 >> 2] = $vararg_buffer4; //@line 1142
       sp = STACKTOP; //@line 1143
       STACKTOP = sp; //@line 1144
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx34 | 0); //@line 1146
       $121 = HEAP32[$58 >> 2] | 0; //@line 1148
       break;
      }
     }
    } while (0);
    HEAP32[$63 >> 2] = $121; //@line 1153
   }
   __ZN4mbed6Ticker5setupEy($57, $59, $60); //@line 1155
   $122 = HEAP32[$58 >> 2] | 0; //@line 1156
   if ($122 | 0) {
    $125 = HEAP32[$122 + 8 >> 2] | 0; //@line 1160
    $AsyncCtx38 = _emscripten_alloc_async_context(64, sp) | 0; //@line 1161
    FUNCTION_TABLE_vi[$125 & 1023]($3); //@line 1162
    if (___async) {
     HEAP32[$AsyncCtx38 >> 2] = 73; //@line 1165
     HEAP32[$AsyncCtx38 + 4 >> 2] = $vararg_buffer9; //@line 1167
     HEAP32[$AsyncCtx38 + 8 >> 2] = $vararg_buffer9; //@line 1169
     HEAP32[$AsyncCtx38 + 12 >> 2] = $vararg_buffer11; //@line 1171
     HEAP32[$AsyncCtx38 + 16 >> 2] = $vararg_buffer11; //@line 1173
     HEAP32[$AsyncCtx38 + 20 >> 2] = $0; //@line 1175
     HEAP32[$AsyncCtx38 + 24 >> 2] = $vararg_buffer17; //@line 1177
     HEAP32[$AsyncCtx38 + 28 >> 2] = $vararg_buffer17; //@line 1179
     HEAP32[$AsyncCtx38 + 32 >> 2] = $vararg_buffer19; //@line 1181
     HEAP32[$AsyncCtx38 + 36 >> 2] = $vararg_buffer19; //@line 1183
     HEAP32[$AsyncCtx38 + 40 >> 2] = $vararg_buffer6; //@line 1185
     HEAP32[$AsyncCtx38 + 44 >> 2] = $vararg_buffer6; //@line 1187
     HEAP32[$AsyncCtx38 + 48 >> 2] = $vararg_buffer14; //@line 1189
     HEAP32[$AsyncCtx38 + 52 >> 2] = $vararg_buffer14; //@line 1191
     HEAP32[$AsyncCtx38 + 56 >> 2] = $vararg_buffer4; //@line 1193
     HEAP32[$AsyncCtx38 + 60 >> 2] = $vararg_buffer4; //@line 1195
     sp = STACKTOP; //@line 1196
     STACKTOP = sp; //@line 1197
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx38 | 0); //@line 1199
     break;
    }
   }
  }
 } while (0);
 $143 = (HEAP8[$0 + 770 >> 0] | 0) == 0; //@line 1207
 _printf(10880, $vararg_buffer4) | 0; //@line 1208
 if ($143) {
  HEAP32[$vararg_buffer14 >> 2] = 6; //@line 1210
  _printf(10946, $vararg_buffer14) | 0; //@line 1211
  $AsyncCtx46 = _emscripten_alloc_async_context(24, sp) | 0; //@line 1212
  _putchar(10) | 0; //@line 1213
  if (___async) {
   HEAP32[$AsyncCtx46 >> 2] = 77; //@line 1216
   HEAP32[$AsyncCtx46 + 4 >> 2] = $0; //@line 1218
   HEAP32[$AsyncCtx46 + 8 >> 2] = $vararg_buffer17; //@line 1220
   HEAP32[$AsyncCtx46 + 12 >> 2] = $vararg_buffer17; //@line 1222
   HEAP32[$AsyncCtx46 + 16 >> 2] = $vararg_buffer19; //@line 1224
   HEAP32[$AsyncCtx46 + 20 >> 2] = $vararg_buffer19; //@line 1226
   sp = STACKTOP; //@line 1227
   STACKTOP = sp; //@line 1228
   return;
  }
  _emscripten_free_async_context($AsyncCtx46 | 0); //@line 1230
  $AsyncCtx61 = _emscripten_alloc_async_context(20, sp) | 0; //@line 1231
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 1232
  if (___async) {
   HEAP32[$AsyncCtx61 >> 2] = 78; //@line 1235
   HEAP32[$AsyncCtx61 + 4 >> 2] = $vararg_buffer17; //@line 1237
   HEAP32[$AsyncCtx61 + 8 >> 2] = $vararg_buffer17; //@line 1239
   HEAP32[$AsyncCtx61 + 12 >> 2] = $vararg_buffer19; //@line 1241
   HEAP32[$AsyncCtx61 + 16 >> 2] = $vararg_buffer19; //@line 1243
   sp = STACKTOP; //@line 1244
   STACKTOP = sp; //@line 1245
   return;
  }
  _emscripten_free_async_context($AsyncCtx61 | 0); //@line 1247
  _printf(10880, $vararg_buffer17) | 0; //@line 1248
  HEAP32[$vararg_buffer19 >> 2] = 6; //@line 1249
  _printf(10975, $vararg_buffer19) | 0; //@line 1250
  $AsyncCtx42 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1251
  _putchar(10) | 0; //@line 1252
  if (___async) {
   HEAP32[$AsyncCtx42 >> 2] = 79; //@line 1255
   sp = STACKTOP; //@line 1256
   STACKTOP = sp; //@line 1257
   return;
  }
  _emscripten_free_async_context($AsyncCtx42 | 0); //@line 1259
  STACKTOP = sp; //@line 1260
  return;
 } else {
  HEAP32[$vararg_buffer6 >> 2] = 5; //@line 1262
  _printf(10946, $vararg_buffer6) | 0; //@line 1263
  $AsyncCtx54 = _emscripten_alloc_async_context(24, sp) | 0; //@line 1264
  _putchar(10) | 0; //@line 1265
  if (___async) {
   HEAP32[$AsyncCtx54 >> 2] = 74; //@line 1268
   HEAP32[$AsyncCtx54 + 4 >> 2] = $0; //@line 1270
   HEAP32[$AsyncCtx54 + 8 >> 2] = $vararg_buffer9; //@line 1272
   HEAP32[$AsyncCtx54 + 12 >> 2] = $vararg_buffer9; //@line 1274
   HEAP32[$AsyncCtx54 + 16 >> 2] = $vararg_buffer11; //@line 1276
   HEAP32[$AsyncCtx54 + 20 >> 2] = $vararg_buffer11; //@line 1278
   sp = STACKTOP; //@line 1279
   STACKTOP = sp; //@line 1280
   return;
  }
  _emscripten_free_async_context($AsyncCtx54 | 0); //@line 1282
  $AsyncCtx64 = _emscripten_alloc_async_context(20, sp) | 0; //@line 1283
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 1284
  if (___async) {
   HEAP32[$AsyncCtx64 >> 2] = 75; //@line 1287
   HEAP32[$AsyncCtx64 + 4 >> 2] = $vararg_buffer9; //@line 1289
   HEAP32[$AsyncCtx64 + 8 >> 2] = $vararg_buffer9; //@line 1291
   HEAP32[$AsyncCtx64 + 12 >> 2] = $vararg_buffer11; //@line 1293
   HEAP32[$AsyncCtx64 + 16 >> 2] = $vararg_buffer11; //@line 1295
   sp = STACKTOP; //@line 1296
   STACKTOP = sp; //@line 1297
   return;
  }
  _emscripten_free_async_context($AsyncCtx64 | 0); //@line 1299
  _printf(10880, $vararg_buffer9) | 0; //@line 1300
  HEAP32[$vararg_buffer11 >> 2] = 5; //@line 1301
  _printf(10975, $vararg_buffer11) | 0; //@line 1302
  $AsyncCtx50 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1303
  _putchar(10) | 0; //@line 1304
  if (___async) {
   HEAP32[$AsyncCtx50 >> 2] = 76; //@line 1307
   sp = STACKTOP; //@line 1308
   STACKTOP = sp; //@line 1309
   return;
  }
  _emscripten_free_async_context($AsyncCtx50 | 0); //@line 1311
  STACKTOP = sp; //@line 1312
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_422($0) {
 $0 = $0 | 0;
 var $$pre13 = 0, $10 = 0, $100 = 0, $104 = 0, $105 = 0, $107 = 0, $108 = 0, $109 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $72 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $83 = 0, $84 = 0, $86 = 0, $87 = 0, $88 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 23377
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23379
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23381
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23383
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23385
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23387
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23389
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23391
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23393
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23395
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23397
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 23399
 $$pre13 = HEAP8[$12 >> 0] | 0; //@line 23400
 if ($$pre13 & 8) {
  HEAP8[$12 >> 0] = $$pre13 & -9; //@line 23405
  $27 = HEAP32[$14 + 1324 >> 2] | 0; //@line 23407
  $28 = $27 + 32 | 0; //@line 23408
  $30 = __ZN11LoRaMacMlme16get_confirmationEv($14 + 264 | 0) | 0; //@line 23410
  $31 = $27 + 44 | 0; //@line 23411
  $32 = HEAP32[$31 >> 2] | 0; //@line 23412
  if (!$32) {
   $ReallocAsyncCtx17 = _emscripten_realloc_async_context(60) | 0; //@line 23415
   _mbed_assert_internal(14997, 15002, 1102); //@line 23416
   if (___async) {
    HEAP32[$ReallocAsyncCtx17 >> 2] = 455; //@line 23419
    $34 = $ReallocAsyncCtx17 + 4 | 0; //@line 23420
    HEAP32[$34 >> 2] = $12; //@line 23421
    $35 = $ReallocAsyncCtx17 + 8 | 0; //@line 23422
    HEAP32[$35 >> 2] = $14; //@line 23423
    $36 = $ReallocAsyncCtx17 + 12 | 0; //@line 23424
    HEAP32[$36 >> 2] = $2; //@line 23425
    $37 = $ReallocAsyncCtx17 + 16 | 0; //@line 23426
    HEAP32[$37 >> 2] = $4; //@line 23427
    $38 = $ReallocAsyncCtx17 + 20 | 0; //@line 23428
    HEAP32[$38 >> 2] = $6; //@line 23429
    $39 = $ReallocAsyncCtx17 + 24 | 0; //@line 23430
    HEAP32[$39 >> 2] = $8; //@line 23431
    $40 = $ReallocAsyncCtx17 + 28 | 0; //@line 23432
    HEAP32[$40 >> 2] = $10; //@line 23433
    $41 = $ReallocAsyncCtx17 + 32 | 0; //@line 23434
    HEAP32[$41 >> 2] = $16; //@line 23435
    $42 = $ReallocAsyncCtx17 + 36 | 0; //@line 23436
    HEAP32[$42 >> 2] = $18; //@line 23437
    $43 = $ReallocAsyncCtx17 + 40 | 0; //@line 23438
    HEAP32[$43 >> 2] = $20; //@line 23439
    $44 = $ReallocAsyncCtx17 + 44 | 0; //@line 23440
    HEAP32[$44 >> 2] = $22; //@line 23441
    $45 = $ReallocAsyncCtx17 + 48 | 0; //@line 23442
    HEAP32[$45 >> 2] = $31; //@line 23443
    $46 = $ReallocAsyncCtx17 + 52 | 0; //@line 23444
    HEAP32[$46 >> 2] = $28; //@line 23445
    $47 = $ReallocAsyncCtx17 + 56 | 0; //@line 23446
    HEAP32[$47 >> 2] = $30; //@line 23447
    sp = STACKTOP; //@line 23448
    return;
   }
   ___async_unwind = 0; //@line 23451
   HEAP32[$ReallocAsyncCtx17 >> 2] = 455; //@line 23452
   $34 = $ReallocAsyncCtx17 + 4 | 0; //@line 23453
   HEAP32[$34 >> 2] = $12; //@line 23454
   $35 = $ReallocAsyncCtx17 + 8 | 0; //@line 23455
   HEAP32[$35 >> 2] = $14; //@line 23456
   $36 = $ReallocAsyncCtx17 + 12 | 0; //@line 23457
   HEAP32[$36 >> 2] = $2; //@line 23458
   $37 = $ReallocAsyncCtx17 + 16 | 0; //@line 23459
   HEAP32[$37 >> 2] = $4; //@line 23460
   $38 = $ReallocAsyncCtx17 + 20 | 0; //@line 23461
   HEAP32[$38 >> 2] = $6; //@line 23462
   $39 = $ReallocAsyncCtx17 + 24 | 0; //@line 23463
   HEAP32[$39 >> 2] = $8; //@line 23464
   $40 = $ReallocAsyncCtx17 + 28 | 0; //@line 23465
   HEAP32[$40 >> 2] = $10; //@line 23466
   $41 = $ReallocAsyncCtx17 + 32 | 0; //@line 23467
   HEAP32[$41 >> 2] = $16; //@line 23468
   $42 = $ReallocAsyncCtx17 + 36 | 0; //@line 23469
   HEAP32[$42 >> 2] = $18; //@line 23470
   $43 = $ReallocAsyncCtx17 + 40 | 0; //@line 23471
   HEAP32[$43 >> 2] = $20; //@line 23472
   $44 = $ReallocAsyncCtx17 + 44 | 0; //@line 23473
   HEAP32[$44 >> 2] = $22; //@line 23474
   $45 = $ReallocAsyncCtx17 + 48 | 0; //@line 23475
   HEAP32[$45 >> 2] = $31; //@line 23476
   $46 = $ReallocAsyncCtx17 + 52 | 0; //@line 23477
   HEAP32[$46 >> 2] = $28; //@line 23478
   $47 = $ReallocAsyncCtx17 + 56 | 0; //@line 23479
   HEAP32[$47 >> 2] = $30; //@line 23480
   sp = STACKTOP; //@line 23481
   return;
  } else {
   $48 = HEAP32[$32 >> 2] | 0; //@line 23484
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 23485
   FUNCTION_TABLE_vii[$48 & 31]($28, $30); //@line 23486
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 456; //@line 23489
    $49 = $ReallocAsyncCtx3 + 4 | 0; //@line 23490
    HEAP32[$49 >> 2] = $2; //@line 23491
    $50 = $ReallocAsyncCtx3 + 8 | 0; //@line 23492
    HEAP32[$50 >> 2] = $4; //@line 23493
    $51 = $ReallocAsyncCtx3 + 12 | 0; //@line 23494
    HEAP32[$51 >> 2] = $6; //@line 23495
    $52 = $ReallocAsyncCtx3 + 16 | 0; //@line 23496
    HEAP32[$52 >> 2] = $8; //@line 23497
    $53 = $ReallocAsyncCtx3 + 20 | 0; //@line 23498
    HEAP32[$53 >> 2] = $10; //@line 23499
    $54 = $ReallocAsyncCtx3 + 24 | 0; //@line 23500
    HEAP32[$54 >> 2] = $12; //@line 23501
    $55 = $ReallocAsyncCtx3 + 28 | 0; //@line 23502
    HEAP32[$55 >> 2] = $14; //@line 23503
    $56 = $ReallocAsyncCtx3 + 32 | 0; //@line 23504
    HEAP32[$56 >> 2] = $16; //@line 23505
    $57 = $ReallocAsyncCtx3 + 36 | 0; //@line 23506
    HEAP32[$57 >> 2] = $18; //@line 23507
    $58 = $ReallocAsyncCtx3 + 40 | 0; //@line 23508
    HEAP32[$58 >> 2] = $20; //@line 23509
    $59 = $ReallocAsyncCtx3 + 44 | 0; //@line 23510
    HEAP32[$59 >> 2] = $22; //@line 23511
    sp = STACKTOP; //@line 23512
    return;
   }
   ___async_unwind = 0; //@line 23515
   HEAP32[$ReallocAsyncCtx3 >> 2] = 456; //@line 23516
   $49 = $ReallocAsyncCtx3 + 4 | 0; //@line 23517
   HEAP32[$49 >> 2] = $2; //@line 23518
   $50 = $ReallocAsyncCtx3 + 8 | 0; //@line 23519
   HEAP32[$50 >> 2] = $4; //@line 23520
   $51 = $ReallocAsyncCtx3 + 12 | 0; //@line 23521
   HEAP32[$51 >> 2] = $6; //@line 23522
   $52 = $ReallocAsyncCtx3 + 16 | 0; //@line 23523
   HEAP32[$52 >> 2] = $8; //@line 23524
   $53 = $ReallocAsyncCtx3 + 20 | 0; //@line 23525
   HEAP32[$53 >> 2] = $10; //@line 23526
   $54 = $ReallocAsyncCtx3 + 24 | 0; //@line 23527
   HEAP32[$54 >> 2] = $12; //@line 23528
   $55 = $ReallocAsyncCtx3 + 28 | 0; //@line 23529
   HEAP32[$55 >> 2] = $14; //@line 23530
   $56 = $ReallocAsyncCtx3 + 32 | 0; //@line 23531
   HEAP32[$56 >> 2] = $16; //@line 23532
   $57 = $ReallocAsyncCtx3 + 36 | 0; //@line 23533
   HEAP32[$57 >> 2] = $18; //@line 23534
   $58 = $ReallocAsyncCtx3 + 40 | 0; //@line 23535
   HEAP32[$58 >> 2] = $20; //@line 23536
   $59 = $ReallocAsyncCtx3 + 44 | 0; //@line 23537
   HEAP32[$59 >> 2] = $22; //@line 23538
   sp = STACKTOP; //@line 23539
   return;
  }
 }
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($14 + 4 | 0) | 0) {
  _printf(12943, $16) | 0; //@line 23546
  _printf(13090, $20) | 0; //@line 23547
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 23548
  _putchar(10) | 0; //@line 23549
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 457; //@line 23552
   $62 = $ReallocAsyncCtx7 + 4 | 0; //@line 23553
   HEAP32[$62 >> 2] = $12; //@line 23554
   $63 = $ReallocAsyncCtx7 + 8 | 0; //@line 23555
   HEAP32[$63 >> 2] = $14; //@line 23556
   $64 = $ReallocAsyncCtx7 + 12 | 0; //@line 23557
   HEAP32[$64 >> 2] = $2; //@line 23558
   $65 = $ReallocAsyncCtx7 + 16 | 0; //@line 23559
   HEAP32[$65 >> 2] = $4; //@line 23560
   $66 = $ReallocAsyncCtx7 + 20 | 0; //@line 23561
   HEAP32[$66 >> 2] = $6; //@line 23562
   $67 = $ReallocAsyncCtx7 + 24 | 0; //@line 23563
   HEAP32[$67 >> 2] = $8; //@line 23564
   $68 = $ReallocAsyncCtx7 + 28 | 0; //@line 23565
   HEAP32[$68 >> 2] = $10; //@line 23566
   sp = STACKTOP; //@line 23567
   return;
  }
  ___async_unwind = 0; //@line 23570
  HEAP32[$ReallocAsyncCtx7 >> 2] = 457; //@line 23571
  $62 = $ReallocAsyncCtx7 + 4 | 0; //@line 23572
  HEAP32[$62 >> 2] = $12; //@line 23573
  $63 = $ReallocAsyncCtx7 + 8 | 0; //@line 23574
  HEAP32[$63 >> 2] = $14; //@line 23575
  $64 = $ReallocAsyncCtx7 + 12 | 0; //@line 23576
  HEAP32[$64 >> 2] = $2; //@line 23577
  $65 = $ReallocAsyncCtx7 + 16 | 0; //@line 23578
  HEAP32[$65 >> 2] = $4; //@line 23579
  $66 = $ReallocAsyncCtx7 + 20 | 0; //@line 23580
  HEAP32[$66 >> 2] = $6; //@line 23581
  $67 = $ReallocAsyncCtx7 + 24 | 0; //@line 23582
  HEAP32[$67 >> 2] = $8; //@line 23583
  $68 = $ReallocAsyncCtx7 + 28 | 0; //@line 23584
  HEAP32[$68 >> 2] = $10; //@line 23585
  sp = STACKTOP; //@line 23586
  return;
 }
 $69 = HEAP8[$12 >> 0] & -33; //@line 23590
 HEAP8[$12 >> 0] = $69; //@line 23591
 do {
  if (!($69 & 2)) {
   $100 = $69; //@line 23596
  } else {
   $72 = $69 & -3; //@line 23598
   HEAP8[$12 >> 0] = $72; //@line 23599
   if ((HEAP32[$14 + 360 >> 2] | 0) == 2) {
    _printf(12943, $4) | 0; //@line 23604
    _printf(12970, $8) | 0; //@line 23605
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 23606
    _putchar(10) | 0; //@line 23607
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 459; //@line 23610
     $76 = $ReallocAsyncCtx6 + 4 | 0; //@line 23611
     HEAP32[$76 >> 2] = $12; //@line 23612
     $77 = $ReallocAsyncCtx6 + 8 | 0; //@line 23613
     HEAP32[$77 >> 2] = $14; //@line 23614
     $78 = $ReallocAsyncCtx6 + 12 | 0; //@line 23615
     HEAP32[$78 >> 2] = $2; //@line 23616
     $79 = $ReallocAsyncCtx6 + 16 | 0; //@line 23617
     HEAP32[$79 >> 2] = $2; //@line 23618
     sp = STACKTOP; //@line 23619
     return;
    }
    ___async_unwind = 0; //@line 23622
    HEAP32[$ReallocAsyncCtx6 >> 2] = 459; //@line 23623
    $76 = $ReallocAsyncCtx6 + 4 | 0; //@line 23624
    HEAP32[$76 >> 2] = $12; //@line 23625
    $77 = $ReallocAsyncCtx6 + 8 | 0; //@line 23626
    HEAP32[$77 >> 2] = $14; //@line 23627
    $78 = $ReallocAsyncCtx6 + 12 | 0; //@line 23628
    HEAP32[$78 >> 2] = $2; //@line 23629
    $79 = $ReallocAsyncCtx6 + 16 | 0; //@line 23630
    HEAP32[$79 >> 2] = $2; //@line 23631
    sp = STACKTOP; //@line 23632
    return;
   }
   if ($72 & 4) {
    $98 = $72 & -5; //@line 23638
    HEAP8[$12 >> 0] = $98; //@line 23639
    $100 = $98; //@line 23640
    break;
   }
   $83 = HEAP32[$14 + 1324 >> 2] | 0; //@line 23644
   $84 = $83 + 16 | 0; //@line 23645
   $86 = __ZN11LoRaMacMcps14get_indicationEv($14 + 288 | 0) | 0; //@line 23647
   $87 = $83 + 28 | 0; //@line 23648
   $88 = HEAP32[$87 >> 2] | 0; //@line 23649
   if (!$88) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 23652
    _mbed_assert_internal(14997, 15002, 1102); //@line 23653
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 462; //@line 23656
     $90 = $ReallocAsyncCtx15 + 4 | 0; //@line 23657
     HEAP32[$90 >> 2] = $87; //@line 23658
     $91 = $ReallocAsyncCtx15 + 8 | 0; //@line 23659
     HEAP32[$91 >> 2] = $84; //@line 23660
     $92 = $ReallocAsyncCtx15 + 12 | 0; //@line 23661
     HEAP32[$92 >> 2] = $86; //@line 23662
     $93 = $ReallocAsyncCtx15 + 16 | 0; //@line 23663
     HEAP32[$93 >> 2] = $12; //@line 23664
     $94 = $ReallocAsyncCtx15 + 20 | 0; //@line 23665
     HEAP32[$94 >> 2] = $14; //@line 23666
     sp = STACKTOP; //@line 23667
     return;
    }
    ___async_unwind = 0; //@line 23670
    HEAP32[$ReallocAsyncCtx15 >> 2] = 462; //@line 23671
    $90 = $ReallocAsyncCtx15 + 4 | 0; //@line 23672
    HEAP32[$90 >> 2] = $87; //@line 23673
    $91 = $ReallocAsyncCtx15 + 8 | 0; //@line 23674
    HEAP32[$91 >> 2] = $84; //@line 23675
    $92 = $ReallocAsyncCtx15 + 12 | 0; //@line 23676
    HEAP32[$92 >> 2] = $86; //@line 23677
    $93 = $ReallocAsyncCtx15 + 16 | 0; //@line 23678
    HEAP32[$93 >> 2] = $12; //@line 23679
    $94 = $ReallocAsyncCtx15 + 20 | 0; //@line 23680
    HEAP32[$94 >> 2] = $14; //@line 23681
    sp = STACKTOP; //@line 23682
    return;
   } else {
    $95 = HEAP32[$88 >> 2] | 0; //@line 23685
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 23686
    FUNCTION_TABLE_vii[$95 & 31]($84, $86); //@line 23687
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 463; //@line 23690
     $96 = $ReallocAsyncCtx4 + 4 | 0; //@line 23691
     HEAP32[$96 >> 2] = $12; //@line 23692
     $97 = $ReallocAsyncCtx4 + 8 | 0; //@line 23693
     HEAP32[$97 >> 2] = $14; //@line 23694
     sp = STACKTOP; //@line 23695
     return;
    }
    ___async_unwind = 0; //@line 23698
    HEAP32[$ReallocAsyncCtx4 >> 2] = 463; //@line 23699
    $96 = $ReallocAsyncCtx4 + 4 | 0; //@line 23700
    HEAP32[$96 >> 2] = $12; //@line 23701
    $97 = $ReallocAsyncCtx4 + 8 | 0; //@line 23702
    HEAP32[$97 >> 2] = $14; //@line 23703
    sp = STACKTOP; //@line 23704
    return;
   }
  }
 } while (0);
 if (!($100 & 16)) {
  return;
 }
 HEAP8[$12 >> 0] = $100 & -17; //@line 23715
 $104 = HEAP32[$14 + 1324 >> 2] | 0; //@line 23717
 $105 = $104 + 48 | 0; //@line 23718
 $107 = __ZN11LoRaMacMlme14get_indicationEv($14 + 264 | 0) | 0; //@line 23720
 $108 = $104 + 60 | 0; //@line 23721
 $109 = HEAP32[$108 >> 2] | 0; //@line 23722
 if (!$109) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 23725
  _mbed_assert_internal(14997, 15002, 1102); //@line 23726
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 464; //@line 23729
   $111 = $ReallocAsyncCtx14 + 4 | 0; //@line 23730
   HEAP32[$111 >> 2] = $108; //@line 23731
   $112 = $ReallocAsyncCtx14 + 8 | 0; //@line 23732
   HEAP32[$112 >> 2] = $105; //@line 23733
   $113 = $ReallocAsyncCtx14 + 12 | 0; //@line 23734
   HEAP32[$113 >> 2] = $107; //@line 23735
   sp = STACKTOP; //@line 23736
   return;
  }
  ___async_unwind = 0; //@line 23739
  HEAP32[$ReallocAsyncCtx14 >> 2] = 464; //@line 23740
  $111 = $ReallocAsyncCtx14 + 4 | 0; //@line 23741
  HEAP32[$111 >> 2] = $108; //@line 23742
  $112 = $ReallocAsyncCtx14 + 8 | 0; //@line 23743
  HEAP32[$112 >> 2] = $105; //@line 23744
  $113 = $ReallocAsyncCtx14 + 12 | 0; //@line 23745
  HEAP32[$113 >> 2] = $107; //@line 23746
  sp = STACKTOP; //@line 23747
  return;
 } else {
  $114 = HEAP32[$109 >> 2] | 0; //@line 23750
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 23751
  FUNCTION_TABLE_vii[$114 & 31]($105, $107); //@line 23752
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 465; //@line 23755
   sp = STACKTOP; //@line 23756
   return;
  }
  ___async_unwind = 0; //@line 23759
  HEAP32[$ReallocAsyncCtx5 >> 2] = 465; //@line 23760
  sp = STACKTOP; //@line 23761
  return;
 }
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$016 = 0, $$05$i = 0, $$06$i = 0, $100 = 0, $108 = 0, $111 = 0, $117 = 0, $119 = 0, $126 = 0, $129 = 0, $134 = 0, $136 = 0, $142 = 0, $145 = 0, $149 = 0, $151 = 0, $156 = 0, $159 = 0, $17 = 0, $39 = 0, $4 = 0, $5 = 0, $51 = 0, $52 = 0, $6 = 0, $61 = 0, $69 = 0, $7 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $88 = 0, $91 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx21 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx37 = 0, $AsyncCtx40 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 16964
 STACKTOP = STACKTOP + 80 | 0; //@line 16965
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 16965
 $4 = sp + 64 | 0; //@line 16966
 $5 = sp + 48 | 0; //@line 16967
 $6 = sp + 32 | 0; //@line 16968
 $7 = sp + 16 | 0; //@line 16969
 $8 = sp; //@line 16970
 HEAP32[$0 + 1328 >> 2] = $3; //@line 16972
 if (!$1) {
  $$016 = -1003; //@line 16975
  STACKTOP = sp; //@line 16976
  return $$016 | 0; //@line 16976
 }
 HEAP32[$0 >> 2] = $2; //@line 16978
 __ZN11LoRaMacMlme23activate_mlme_subsystemEP7LoRaPHY($0 + 264 | 0, $2); //@line 16980
 __ZN10LoRaMacMib22activate_mib_subsystemEP7LoRaPHY($0 + 348 | 0, HEAP32[$0 >> 2] | 0); //@line 16983
 __ZN18LoRaMacChannelPlan30activate_channelplan_subsystemEP7LoRaPHY($0 + 352 | 0, HEAP32[$0 >> 2] | 0); //@line 16986
 HEAP32[$0 + 1324 >> 2] = $1; //@line 16988
 $17 = $0 + 360 | 0; //@line 16989
 HEAP8[$0 + 944 >> 0] = 0; //@line 16991
 HEAP32[$17 >> 2] = 0; //@line 16992
 HEAP32[$0 + 968 >> 2] = 0; //@line 16994
 HEAP8[$0 + 897 >> 0] = 0; //@line 16996
 HEAP8[$0 + 896 >> 0] = 1; //@line 16998
 HEAP8[$0 + 369 >> 0] = 0; //@line 17000
 HEAP32[$0 + 980 >> 2] = 0; //@line 17002
 HEAP32[$0 + 984 >> 2] = 0; //@line 17004
 __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$0 >> 2] | 0, $17, 1); //@line 17006
 HEAP32[$0 + 1100 >> 2] = 10; //@line 17008
 HEAP8[$0 + 1104 >> 0] = 6; //@line 17010
 HEAP8[$0 + 1128 >> 0] = 1; //@line 17012
 HEAP8[$0 + 372 >> 0] = 0; //@line 17014
 HEAP32[$0 + 956 >> 2] = 0; //@line 17016
 HEAP32[$0 + 960 >> 2] = 0; //@line 17018
 HEAP32[$0 + 964 >> 2] = 0; //@line 17020
 HEAP8[$0 + 380 >> 0] = 0; //@line 17022
 HEAP8[$0 + 894 >> 0] = 1; //@line 17024
 HEAP8[$0 + 895 >> 0] = 1; //@line 17026
 HEAP8[$0 + 377 >> 0] = 0; //@line 17028
 HEAP8[$0 + 1152 >> 0] = 0; //@line 17030
 HEAP16[$0 + 1154 >> 1] = 1; //@line 17032
 $39 = $0 + 4 | 0; //@line 17033
 __ZN14LoRaMacCommand20clear_command_bufferEv($39); //@line 17034
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($39); //@line 17035
 __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($39); //@line 17036
 HEAP8[$0 + 371 >> 0] = 1; //@line 17038
 __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$0 >> 2] | 0, $17, 0); //@line 17040
 HEAP8[$0 + 373 >> 0] = 0; //@line 17042
 HEAP8[$0 + 374 >> 0] = 0; //@line 17044
 $$05$i = HEAP32[$0 + 1208 >> 2] | 0; //@line 17046
 if ($$05$i | 0) {
  $$06$i = $$05$i; //@line 17049
  do {
   HEAP32[$$06$i + 36 >> 2] = 0; //@line 17052
   $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 17054
  } while (($$06$i | 0) != 0);
 }
 HEAP8[$0 + 378 >> 0] = 0; //@line 17064
 HEAP8[$0 + 379 >> 0] = 0; //@line 17066
 $51 = HEAP32[$0 >> 2] | 0; //@line 17067
 $AsyncCtx34 = _emscripten_alloc_async_context(32, sp) | 0; //@line 17068
 $52 = __ZN7LoRaPHY13get_radio_rngEv($51) | 0; //@line 17069
 if (___async) {
  HEAP32[$AsyncCtx34 >> 2] = 506; //@line 17072
  HEAP32[$AsyncCtx34 + 4 >> 2] = $0; //@line 17074
  HEAP32[$AsyncCtx34 + 8 >> 2] = $8; //@line 17076
  HEAP32[$AsyncCtx34 + 12 >> 2] = $0; //@line 17078
  HEAP32[$AsyncCtx34 + 16 >> 2] = $7; //@line 17080
  HEAP32[$AsyncCtx34 + 20 >> 2] = $6; //@line 17082
  HEAP32[$AsyncCtx34 + 24 >> 2] = $5; //@line 17084
  HEAP32[$AsyncCtx34 + 28 >> 2] = $4; //@line 17086
  sp = STACKTOP; //@line 17087
  STACKTOP = sp; //@line 17088
  return 0; //@line 17088
 }
 _emscripten_free_async_context($AsyncCtx34 | 0); //@line 17090
 _srand($52); //@line 17091
 HEAP8[$0 + 368 >> 0] = 1; //@line 17093
 $61 = HEAP32[$0 >> 2] | 0; //@line 17094
 $AsyncCtx37 = _emscripten_alloc_async_context(32, sp) | 0; //@line 17095
 __ZN7LoRaPHY25setup_public_network_modeEb($61, 1); //@line 17096
 if (___async) {
  HEAP32[$AsyncCtx37 >> 2] = 507; //@line 17099
  HEAP32[$AsyncCtx37 + 4 >> 2] = $0; //@line 17101
  HEAP32[$AsyncCtx37 + 8 >> 2] = $8; //@line 17103
  HEAP32[$AsyncCtx37 + 12 >> 2] = $0; //@line 17105
  HEAP32[$AsyncCtx37 + 16 >> 2] = $7; //@line 17107
  HEAP32[$AsyncCtx37 + 20 >> 2] = $6; //@line 17109
  HEAP32[$AsyncCtx37 + 24 >> 2] = $5; //@line 17111
  HEAP32[$AsyncCtx37 + 28 >> 2] = $4; //@line 17113
  sp = STACKTOP; //@line 17114
  STACKTOP = sp; //@line 17115
  return 0; //@line 17115
 }
 _emscripten_free_async_context($AsyncCtx37 | 0); //@line 17117
 $69 = HEAP32[$0 >> 2] | 0; //@line 17118
 $AsyncCtx40 = _emscripten_alloc_async_context(28, sp) | 0; //@line 17119
 __ZN7LoRaPHY18put_radio_to_sleepEv($69); //@line 17120
 if (___async) {
  HEAP32[$AsyncCtx40 >> 2] = 508; //@line 17123
  HEAP32[$AsyncCtx40 + 4 >> 2] = $0; //@line 17125
  HEAP32[$AsyncCtx40 + 8 >> 2] = $8; //@line 17127
  HEAP32[$AsyncCtx40 + 12 >> 2] = $7; //@line 17129
  HEAP32[$AsyncCtx40 + 16 >> 2] = $6; //@line 17131
  HEAP32[$AsyncCtx40 + 20 >> 2] = $5; //@line 17133
  HEAP32[$AsyncCtx40 + 24 >> 2] = $4; //@line 17135
  sp = STACKTOP; //@line 17136
  STACKTOP = sp; //@line 17137
  return 0; //@line 17137
 }
 _emscripten_free_async_context($AsyncCtx40 | 0); //@line 17139
 $76 = $0 + 356 | 0; //@line 17140
 $77 = HEAP32[$76 >> 2] | 0; //@line 17141
 $79 = $4 + 12 | 0; //@line 17143
 HEAP32[$4 >> 2] = 509; //@line 17144
 HEAP32[$4 + 4 >> 2] = 0; //@line 17146
 HEAP32[$4 + 8 >> 2] = $0; //@line 17148
 HEAP32[$79 >> 2] = 848; //@line 17149
 $AsyncCtx30 = _emscripten_alloc_async_context(36, sp) | 0; //@line 17150
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($77, $0 + 996 | 0, $4); //@line 17151
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 510; //@line 17154
  HEAP32[$AsyncCtx30 + 4 >> 2] = $76; //@line 17156
  HEAP32[$AsyncCtx30 + 8 >> 2] = $0; //@line 17158
  HEAP32[$AsyncCtx30 + 12 >> 2] = $8; //@line 17160
  HEAP32[$AsyncCtx30 + 16 >> 2] = $79; //@line 17162
  HEAP32[$AsyncCtx30 + 20 >> 2] = $7; //@line 17164
  HEAP32[$AsyncCtx30 + 24 >> 2] = $6; //@line 17166
  HEAP32[$AsyncCtx30 + 28 >> 2] = $5; //@line 17168
  HEAP32[$AsyncCtx30 + 32 >> 2] = $4; //@line 17170
  sp = STACKTOP; //@line 17171
  STACKTOP = sp; //@line 17172
  return 0; //@line 17172
 }
 _emscripten_free_async_context($AsyncCtx30 | 0); //@line 17174
 $88 = HEAP32[$79 >> 2] | 0; //@line 17175
 do {
  if ($88 | 0) {
   $91 = HEAP32[$88 + 8 >> 2] | 0; //@line 17180
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 17181
   FUNCTION_TABLE_vi[$91 & 1023]($4); //@line 17182
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 511; //@line 17185
    HEAP32[$AsyncCtx + 4 >> 2] = $76; //@line 17187
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 17189
    HEAP32[$AsyncCtx + 12 >> 2] = $8; //@line 17191
    HEAP32[$AsyncCtx + 16 >> 2] = $7; //@line 17193
    HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 17195
    HEAP32[$AsyncCtx + 24 >> 2] = $5; //@line 17197
    sp = STACKTOP; //@line 17198
    STACKTOP = sp; //@line 17199
    return 0; //@line 17199
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 17201
    break;
   }
  }
 } while (0);
 $98 = HEAP32[$76 >> 2] | 0; //@line 17206
 $100 = $5 + 12 | 0; //@line 17208
 HEAP32[$5 >> 2] = 512; //@line 17209
 HEAP32[$5 + 4 >> 2] = 0; //@line 17211
 HEAP32[$5 + 8 >> 2] = $0; //@line 17213
 HEAP32[$100 >> 2] = 848; //@line 17214
 $AsyncCtx27 = _emscripten_alloc_async_context(32, sp) | 0; //@line 17215
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($98, $0 + 1016 | 0, $5); //@line 17216
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 513; //@line 17219
  HEAP32[$AsyncCtx27 + 4 >> 2] = $76; //@line 17221
  HEAP32[$AsyncCtx27 + 8 >> 2] = $0; //@line 17223
  HEAP32[$AsyncCtx27 + 12 >> 2] = $8; //@line 17225
  HEAP32[$AsyncCtx27 + 16 >> 2] = $7; //@line 17227
  HEAP32[$AsyncCtx27 + 20 >> 2] = $6; //@line 17229
  HEAP32[$AsyncCtx27 + 24 >> 2] = $5; //@line 17231
  HEAP32[$AsyncCtx27 + 28 >> 2] = $100; //@line 17233
  sp = STACKTOP; //@line 17234
  STACKTOP = sp; //@line 17235
  return 0; //@line 17235
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 17237
 $108 = HEAP32[$100 >> 2] | 0; //@line 17238
 do {
  if ($108 | 0) {
   $111 = HEAP32[$108 + 8 >> 2] | 0; //@line 17243
   $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 17244
   FUNCTION_TABLE_vi[$111 & 1023]($5); //@line 17245
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 514; //@line 17248
    HEAP32[$AsyncCtx3 + 4 >> 2] = $76; //@line 17250
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 17252
    HEAP32[$AsyncCtx3 + 12 >> 2] = $8; //@line 17254
    HEAP32[$AsyncCtx3 + 16 >> 2] = $7; //@line 17256
    HEAP32[$AsyncCtx3 + 20 >> 2] = $6; //@line 17258
    sp = STACKTOP; //@line 17259
    STACKTOP = sp; //@line 17260
    return 0; //@line 17260
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17262
    break;
   }
  }
 } while (0);
 $117 = HEAP32[$76 >> 2] | 0; //@line 17267
 $119 = $6 + 12 | 0; //@line 17269
 HEAP32[$6 >> 2] = 515; //@line 17270
 HEAP32[$6 + 4 >> 2] = 0; //@line 17272
 HEAP32[$6 + 8 >> 2] = $0; //@line 17274
 HEAP32[$119 >> 2] = 848; //@line 17275
 $AsyncCtx24 = _emscripten_alloc_async_context(28, sp) | 0; //@line 17276
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($117, $0 + 1036 | 0, $6); //@line 17277
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 516; //@line 17280
  HEAP32[$AsyncCtx24 + 4 >> 2] = $76; //@line 17282
  HEAP32[$AsyncCtx24 + 8 >> 2] = $0; //@line 17284
  HEAP32[$AsyncCtx24 + 12 >> 2] = $8; //@line 17286
  HEAP32[$AsyncCtx24 + 16 >> 2] = $7; //@line 17288
  HEAP32[$AsyncCtx24 + 20 >> 2] = $6; //@line 17290
  HEAP32[$AsyncCtx24 + 24 >> 2] = $119; //@line 17292
  sp = STACKTOP; //@line 17293
  STACKTOP = sp; //@line 17294
  return 0; //@line 17294
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 17296
 $126 = HEAP32[$119 >> 2] | 0; //@line 17297
 do {
  if ($126 | 0) {
   $129 = HEAP32[$126 + 8 >> 2] | 0; //@line 17302
   $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 17303
   FUNCTION_TABLE_vi[$129 & 1023]($6); //@line 17304
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 517; //@line 17307
    HEAP32[$AsyncCtx7 + 4 >> 2] = $76; //@line 17309
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 17311
    HEAP32[$AsyncCtx7 + 12 >> 2] = $7; //@line 17313
    HEAP32[$AsyncCtx7 + 16 >> 2] = $8; //@line 17315
    sp = STACKTOP; //@line 17316
    STACKTOP = sp; //@line 17317
    return 0; //@line 17317
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 17319
    break;
   }
  }
 } while (0);
 $134 = HEAP32[$76 >> 2] | 0; //@line 17324
 $136 = $7 + 12 | 0; //@line 17326
 HEAP32[$7 >> 2] = 518; //@line 17327
 HEAP32[$7 + 4 >> 2] = 0; //@line 17329
 HEAP32[$7 + 8 >> 2] = $0; //@line 17331
 HEAP32[$136 >> 2] = 848; //@line 17332
 $AsyncCtx21 = _emscripten_alloc_async_context(24, sp) | 0; //@line 17333
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($134, $0 + 1056 | 0, $7); //@line 17334
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 519; //@line 17337
  HEAP32[$AsyncCtx21 + 4 >> 2] = $136; //@line 17339
  HEAP32[$AsyncCtx21 + 8 >> 2] = $76; //@line 17341
  HEAP32[$AsyncCtx21 + 12 >> 2] = $0; //@line 17343
  HEAP32[$AsyncCtx21 + 16 >> 2] = $8; //@line 17345
  HEAP32[$AsyncCtx21 + 20 >> 2] = $7; //@line 17347
  sp = STACKTOP; //@line 17348
  STACKTOP = sp; //@line 17349
  return 0; //@line 17349
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 17351
 $142 = HEAP32[$136 >> 2] | 0; //@line 17352
 do {
  if ($142 | 0) {
   $145 = HEAP32[$142 + 8 >> 2] | 0; //@line 17357
   $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 17358
   FUNCTION_TABLE_vi[$145 & 1023]($7); //@line 17359
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 520; //@line 17362
    HEAP32[$AsyncCtx11 + 4 >> 2] = $76; //@line 17364
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 17366
    HEAP32[$AsyncCtx11 + 12 >> 2] = $8; //@line 17368
    sp = STACKTOP; //@line 17369
    STACKTOP = sp; //@line 17370
    return 0; //@line 17370
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 17372
    break;
   }
  }
 } while (0);
 $149 = HEAP32[$76 >> 2] | 0; //@line 17377
 $151 = $8 + 12 | 0; //@line 17379
 HEAP32[$8 >> 2] = 521; //@line 17380
 HEAP32[$8 + 4 >> 2] = 0; //@line 17382
 HEAP32[$8 + 8 >> 2] = $0; //@line 17384
 HEAP32[$151 >> 2] = 848; //@line 17385
 $AsyncCtx18 = _emscripten_alloc_async_context(20, sp) | 0; //@line 17386
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($149, $0 + 1076 | 0, $8); //@line 17387
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 522; //@line 17390
  HEAP32[$AsyncCtx18 + 4 >> 2] = $151; //@line 17392
  HEAP32[$AsyncCtx18 + 8 >> 2] = $76; //@line 17394
  HEAP32[$AsyncCtx18 + 12 >> 2] = $0; //@line 17396
  HEAP32[$AsyncCtx18 + 16 >> 2] = $8; //@line 17398
  sp = STACKTOP; //@line 17399
  STACKTOP = sp; //@line 17400
  return 0; //@line 17400
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 17402
 $156 = HEAP32[$151 >> 2] | 0; //@line 17403
 do {
  if ($156 | 0) {
   $159 = HEAP32[$156 + 8 >> 2] | 0; //@line 17408
   $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 17409
   FUNCTION_TABLE_vi[$159 & 1023]($8); //@line 17410
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 523; //@line 17413
    HEAP32[$AsyncCtx15 + 4 >> 2] = $76; //@line 17415
    HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 17417
    sp = STACKTOP; //@line 17418
    STACKTOP = sp; //@line 17419
    return 0; //@line 17419
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 17421
    break;
   }
  }
 } while (0);
 HEAP32[$0 + 988 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[$76 >> 2] | 0) | 0; //@line 17429
 $$016 = 0; //@line 17430
 STACKTOP = sp; //@line 17431
 return $$016 | 0; //@line 17431
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$054 = 0, $$055 = 0, $$05564 = 0, $$056 = 0, $$05663 = 0, $$05766 = 0, $$06065 = 0, $$158 = 0, $$15862 = 0, $$259 = 0, $$extract$t = 0, $$pre$phiZ2D = 0, $10 = 0, $103 = 0, $109 = 0, $115 = 0, $12 = 0, $125 = 0, $129 = 0, $142 = 0, $147 = 0, $148 = 0, $16 = 0, $161 = 0, $162 = 0, $163 = 0, $169 = 0, $170 = 0, $174 = 0, $176 = 0, $182 = 0, $183 = 0, $186 = 0, $188 = 0, $201 = 0, $213 = 0, $222 = 0, $227 = 0, $229 = 0, $230 = 0, $231 = 0, $238 = 0, $41 = 0, $6 = 0, $64 = 0, $65 = 0, $7 = 0, $72 = 0, $74 = 0, $8 = 0, $80 = 0, $81 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $95 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16072
 STACKTOP = STACKTOP + 16 | 0; //@line 16073
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16073
 $6 = sp; //@line 16074
 HEAP32[$6 >> 2] = 0; //@line 16075
 $7 = $0 + 636 | 0; //@line 16076
 HEAP16[$7 >> 1] = 0; //@line 16077
 $8 = $0 + 373 | 0; //@line 16078
 HEAP8[$8 >> 0] = 0; //@line 16079
 $9 = ($4 | 0) == 0; //@line 16080
 $$extract$t = $9 ? 0 : $5 & 255; //@line 16082
 $10 = $0 + 893 | 0; //@line 16083
 HEAP8[$10 >> 0] = $$extract$t; //@line 16084
 $12 = $0 + 381 | 0; //@line 16086
 HEAP8[$12 >> 0] = HEAP8[$1 >> 0] | 0; //@line 16087
 switch ((HEAPU8[$1 >> 0] | 0) >>> 5 & 7) {
 case 0:
  {
   HEAP16[$7 >> 1] = 1; //@line 16093
   $16 = HEAP32[$0 + 904 >> 2] | 0; //@line 16096
   HEAP8[$0 + 389 >> 0] = HEAP8[$16 >> 0] | 0; //@line 16101
   HEAP8[$0 + 388 >> 0] = HEAP8[$16 + 1 >> 0] | 0; //@line 16105
   HEAP8[$0 + 387 >> 0] = HEAP8[$16 + 2 >> 0] | 0; //@line 16109
   HEAP8[$0 + 386 >> 0] = HEAP8[$16 + 3 >> 0] | 0; //@line 16113
   HEAP8[$0 + 385 >> 0] = HEAP8[$16 + 4 >> 0] | 0; //@line 16117
   HEAP8[$0 + 384 >> 0] = HEAP8[$16 + 5 >> 0] | 0; //@line 16121
   HEAP8[$0 + 383 >> 0] = HEAP8[$16 + 6 >> 0] | 0; //@line 16124
   HEAP8[$0 + 382 >> 0] = HEAP8[$16 + 7 >> 0] | 0; //@line 16126
   HEAP16[$7 >> 1] = 9; //@line 16127
   $41 = HEAP32[$0 + 900 >> 2] | 0; //@line 16130
   HEAP8[$0 + 397 >> 0] = HEAP8[$41 >> 0] | 0; //@line 16135
   HEAP8[$0 + 396 >> 0] = HEAP8[$41 + 1 >> 0] | 0; //@line 16139
   HEAP8[$0 + 395 >> 0] = HEAP8[$41 + 2 >> 0] | 0; //@line 16143
   HEAP8[$0 + 394 >> 0] = HEAP8[$41 + 3 >> 0] | 0; //@line 16147
   HEAP8[$0 + 393 >> 0] = HEAP8[$41 + 4 >> 0] | 0; //@line 16151
   HEAP8[$0 + 392 >> 0] = HEAP8[$41 + 5 >> 0] | 0; //@line 16155
   HEAP8[$0 + 391 >> 0] = HEAP8[$41 + 6 >> 0] | 0; //@line 16158
   HEAP8[$0 + 390 >> 0] = HEAP8[$41 + 7 >> 0] | 0; //@line 16160
   HEAP16[$7 >> 1] = 17; //@line 16161
   $64 = HEAP32[$0 >> 2] | 0; //@line 16162
   $AsyncCtx11 = _emscripten_alloc_async_context(24, sp) | 0; //@line 16163
   $65 = __ZN7LoRaPHY13get_radio_rngEv($64) | 0; //@line 16164
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 485; //@line 16167
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 16169
    HEAP32[$AsyncCtx11 + 8 >> 2] = $7; //@line 16171
    HEAP32[$AsyncCtx11 + 12 >> 2] = $12; //@line 16173
    HEAP32[$AsyncCtx11 + 16 >> 2] = $6; //@line 16175
    HEAP32[$AsyncCtx11 + 20 >> 2] = $6; //@line 16177
    sp = STACKTOP; //@line 16178
    STACKTOP = sp; //@line 16179
    return 0; //@line 16179
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 16181
   $72 = $0 + 946 | 0; //@line 16183
   HEAP16[$72 >> 1] = $65; //@line 16184
   $74 = HEAP16[$7 >> 1] | 0; //@line 16186
   HEAP16[$7 >> 1] = $74 + 1 << 16 >> 16; //@line 16188
   HEAP8[($74 & 65535) + ($0 + 381) >> 0] = $65; //@line 16191
   $80 = (HEAPU16[$72 >> 1] | 0) >>> 8 & 255; //@line 16194
   $81 = HEAP16[$7 >> 1] | 0; //@line 16195
   HEAP16[$7 >> 1] = $81 + 1 << 16 >> 16; //@line 16197
   HEAP8[($81 & 65535) + ($0 + 381) >> 0] = $80; //@line 16200
   $86 = HEAP16[$7 >> 1] & 255; //@line 16202
   $88 = HEAP32[$0 + 908 >> 2] | 0; //@line 16204
   $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 16205
   $89 = __Z22compute_join_frame_micPKhtS0_Pj($12, $86, $88, $6) | 0; //@line 16206
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 486; //@line 16209
    HEAP32[$AsyncCtx3 + 4 >> 2] = $6; //@line 16211
    HEAP32[$AsyncCtx3 + 8 >> 2] = $7; //@line 16213
    HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 16215
    HEAP32[$AsyncCtx3 + 16 >> 2] = $6; //@line 16217
    sp = STACKTOP; //@line 16218
    STACKTOP = sp; //@line 16219
    return 0; //@line 16219
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16221
   if ($89 | 0) {
    $$0 = -1014; //@line 16224
    STACKTOP = sp; //@line 16225
    return $$0 | 0; //@line 16225
   }
   $95 = HEAP32[$6 >> 2] | 0; //@line 16227
   $97 = HEAP16[$7 >> 1] | 0; //@line 16229
   HEAP16[$7 >> 1] = $97 + 1 << 16 >> 16; //@line 16231
   HEAP8[($97 & 65535) + ($0 + 381) >> 0] = $95; //@line 16234
   $103 = HEAP16[$7 >> 1] | 0; //@line 16237
   HEAP16[$7 >> 1] = $103 + 1 << 16 >> 16; //@line 16239
   HEAP8[($103 & 65535) + ($0 + 381) >> 0] = $95 >>> 8; //@line 16242
   $109 = HEAP16[$7 >> 1] | 0; //@line 16245
   HEAP16[$7 >> 1] = $109 + 1 << 16 >> 16; //@line 16247
   HEAP8[($109 & 65535) + ($0 + 381) >> 0] = $95 >>> 16; //@line 16250
   $115 = HEAP16[$7 >> 1] | 0; //@line 16253
   HEAP16[$7 >> 1] = $115 + 1 << 16 >> 16; //@line 16255
   HEAP8[($115 & 65535) + ($0 + 381) >> 0] = $95 >>> 24; //@line 16258
   $$0 = 0; //@line 16259
   STACKTOP = sp; //@line 16260
   return $$0 | 0; //@line 16260
  }
 case 4:
  {
   HEAP8[$8 >> 0] = 1; //@line 16264
   break;
  }
 case 2:
  {
   break;
  }
 case 7:
  {
   if ($9 | $$extract$t << 24 >> 24 == 0) {
    $$0 = 0; //@line 16274
    STACKTOP = sp; //@line 16275
    return $$0 | 0; //@line 16275
   }
   _memcpy($0 + 382 | 0, $4 | 0, $$extract$t & 255 | 0) | 0; //@line 16279
   HEAP16[$7 >> 1] = (HEAPU8[$10 >> 0] | 0) + 1; //@line 16284
   $$0 = 0; //@line 16285
   STACKTOP = sp; //@line 16286
   return $$0 | 0; //@line 16286
  }
 default:
  {
   $$0 = -1002; //@line 16290
   STACKTOP = sp; //@line 16291
   return $$0 | 0; //@line 16291
  }
 }
 if (!(HEAP8[$0 + 372 >> 0] | 0)) {
  $$0 = -1009; //@line 16298
  STACKTOP = sp; //@line 16299
  return $$0 | 0; //@line 16299
 }
 if (HEAP8[$0 + 1156 >> 0] | 0) {
  $125 = HEAP32[$0 >> 2] | 0; //@line 16305
  $AsyncCtx7 = _emscripten_alloc_async_context(44, sp) | 0; //@line 16309
  $129 = __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($125, 1, $0 + 1097 | 0, $0 + 1096 | 0, $0 + 964 | 0) | 0; //@line 16310
  if (___async) {
   HEAP32[$AsyncCtx7 >> 2] = 487; //@line 16313
   HEAP32[$AsyncCtx7 + 4 >> 2] = $6; //@line 16315
   HEAP32[$AsyncCtx7 + 8 >> 2] = $2; //@line 16317
   HEAP32[$AsyncCtx7 + 12 >> 2] = $0; //@line 16319
   HEAP8[$AsyncCtx7 + 16 >> 0] = $9 & 1; //@line 16322
   HEAP32[$AsyncCtx7 + 20 >> 2] = $10; //@line 16324
   HEAP32[$AsyncCtx7 + 24 >> 2] = $6; //@line 16326
   HEAP32[$AsyncCtx7 + 28 >> 2] = $7; //@line 16328
   HEAP32[$AsyncCtx7 + 32 >> 2] = $12; //@line 16330
   HEAP8[$AsyncCtx7 + 36 >> 0] = $3; //@line 16332
   HEAP32[$AsyncCtx7 + 40 >> 2] = $4; //@line 16334
   sp = STACKTOP; //@line 16335
   STACKTOP = sp; //@line 16336
   return 0; //@line 16336
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 16338
  if ($129) {
   HEAP8[$2 >> 0] = HEAP8[$2 >> 0] | 64; //@line 16342
  }
 }
 $142 = $0 + 374 | 0; //@line 16345
 if (!(HEAP8[$142 >> 0] | 0)) {
  $$pre$phiZ2D = $2; //@line 16349
 } else {
  HEAP8[$142 >> 0] = 0; //@line 16351
  HEAP8[$2 >> 0] = HEAP8[$2 >> 0] | 32; //@line 16354
  $$pre$phiZ2D = $2; //@line 16355
 }
 $147 = $0 + 952 | 0; //@line 16357
 $148 = HEAP32[$147 >> 2] | 0; //@line 16358
 HEAP8[$0 + 382 >> 0] = $148; //@line 16361
 HEAP8[$0 + 383 >> 0] = $148 >>> 8; //@line 16365
 HEAP8[$0 + 384 >> 0] = $148 >>> 16; //@line 16369
 HEAP8[$0 + 385 >> 0] = $148 >>> 24; //@line 16373
 $161 = $0 + 386 | 0; //@line 16375
 HEAP8[$161 >> 0] = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 16376
 $162 = $0 + 956 | 0; //@line 16377
 $163 = HEAP32[$162 >> 2] | 0; //@line 16378
 HEAP8[$0 + 387 >> 0] = $163; //@line 16381
 HEAP8[$0 + 388 >> 0] = $163 >>> 8; //@line 16385
 $169 = $0 + 4 | 0; //@line 16386
 __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($169); //@line 16387
 $170 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($169) | 0; //@line 16388
 do {
  if ($9) {
   label = 27; //@line 16391
  } else {
   if (!(HEAP8[$10 >> 0] | 0)) {
    label = 27; //@line 16396
   } else {
    if (!(__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($169) | 0)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($169); //@line 16400
     $$05564 = $3; //@line 16401
     $$05663 = $4; //@line 16401
     $$15862 = 8; //@line 16401
     label = 31; //@line 16402
     break;
    }
    $174 = $170 & 255; //@line 16405
    if (($170 & 255) >= 16) {
     HEAP8[$10 >> 0] = $170; //@line 16408
     $$055 = 0; //@line 16410
     $$056 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($169) | 0; //@line 16410
     $$158 = 8; //@line 16410
     label = 30; //@line 16411
     break;
    }
    $176 = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 16414
    $182 = ($176 & 255) + $174 & 15 | $176 & -16; //@line 16420
    HEAP8[$$pre$phiZ2D >> 0] = $182; //@line 16421
    HEAP8[$161 >> 0] = $182; //@line 16422
    $183 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($169) | 0; //@line 16423
    if (!($170 << 24 >> 24)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($169); //@line 16426
     $$05564 = $3; //@line 16427
     $$05663 = $4; //@line 16427
     $$15862 = 8; //@line 16427
     label = 31; //@line 16428
     break;
    } else {
     $$05766 = 8; //@line 16431
     $$06065 = 0; //@line 16431
     $186 = 0; //@line 16431
     while (1) {
      $188 = $$05766 + 1 << 24 >> 24; //@line 16435
      HEAP8[($$05766 & 255) + ($0 + 381) >> 0] = HEAP8[$183 + $186 >> 0] | 0; //@line 16438
      $$06065 = $$06065 + 1 << 16 >> 16; //@line 16439
      $186 = $$06065 & 65535; //@line 16440
      if ($186 >>> 0 >= $174 >>> 0) {
       $$055 = $3; //@line 16445
       $$056 = $4; //@line 16445
       $$158 = $188; //@line 16445
       label = 30; //@line 16446
       break;
      } else {
       $$05766 = $188; //@line 16443
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 27) {
  if (!($170 << 24 >> 24)) {
   $$055 = $3; //@line 16457
   $$056 = $4; //@line 16457
   $$158 = 8; //@line 16457
   label = 30; //@line 16458
  } else {
   if (__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($169) | 0) {
    HEAP8[$10 >> 0] = $170; //@line 16462
    $$055 = 0; //@line 16464
    $$056 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($169) | 0; //@line 16464
    $$158 = 8; //@line 16464
    label = 30; //@line 16465
   } else {
    $$055 = $3; //@line 16467
    $$056 = $4; //@line 16467
    $$158 = 8; //@line 16467
    label = 30; //@line 16468
   }
  }
 }
 if ((label | 0) == 30) {
  __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($169); //@line 16473
  if (!$$056) {
   $$054 = 0; //@line 16476
   $$259 = $$158; //@line 16476
  } else {
   $$05564 = $$055; //@line 16478
   $$05663 = $$056; //@line 16478
   $$15862 = $$158; //@line 16478
   label = 31; //@line 16479
  }
 }
 do {
  if ((label | 0) == 31) {
   if (!(HEAP8[$10 >> 0] | 0)) {
    $$054 = 0; //@line 16487
    $$259 = $$15862; //@line 16487
   } else {
    $201 = $$15862 + 1 << 24 >> 24; //@line 16489
    HEAP8[($$15862 & 255) + ($0 + 381) >> 0] = $$05564; //@line 16492
    if (!($$05564 << 24 >> 24)) {
     __ZN14LoRaMacCommand20clear_command_bufferEv($169); //@line 16495
     $213 = (__Z15encrypt_payloadPKhtS0_jhjPh($$05663, HEAPU8[$10 >> 0] | 0, $0 + 912 | 0, HEAP32[$147 >> 2] | 0, 0, HEAP32[$162 >> 2] | 0, ($201 & 255) + ($0 + 381) | 0) | 0) == 0; //@line 16504
     $$054 = $213 ? 0 : -1014; //@line 16506
     $$259 = $201; //@line 16506
     break;
    } else {
     $222 = (__Z15encrypt_payloadPKhtS0_jhjPh($$05663, HEAPU8[$10 >> 0] | 0, $0 + 928 | 0, HEAP32[$147 >> 2] | 0, 0, HEAP32[$162 >> 2] | 0, ($201 & 255) + ($0 + 381) | 0) | 0) == 0; //@line 16517
     $$054 = $222 ? 0 : -1014; //@line 16519
     $$259 = $201; //@line 16519
     break;
    }
   }
  }
 } while (0);
 $227 = (HEAPU8[$10 >> 0] | 0) + ($$259 & 255) & 65535; //@line 16529
 HEAP16[$7 >> 1] = $227; //@line 16530
 $229 = HEAP32[$147 >> 2] | 0; //@line 16532
 $230 = HEAP32[$162 >> 2] | 0; //@line 16533
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 16534
 $231 = __Z11compute_micPKhtS0_jhjPj($12, $227, $0 + 912 | 0, $229, 0, $230, $6) | 0; //@line 16535
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 488; //@line 16538
  HEAP32[$AsyncCtx + 4 >> 2] = $$054; //@line 16540
  HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 16542
  HEAP32[$AsyncCtx + 12 >> 2] = $7; //@line 16544
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 16546
  HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 16548
  sp = STACKTOP; //@line 16549
  STACKTOP = sp; //@line 16550
  return 0; //@line 16550
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16552
 $238 = HEAP32[$6 >> 2] | 0; //@line 16555
 HEAP8[(HEAPU16[$7 >> 1] | 0) + ($0 + 381) >> 0] = $238; //@line 16560
 HEAP8[(HEAPU16[$7 >> 1] | 0) + 1 + ($0 + 381) >> 0] = $238 >>> 8; //@line 16567
 HEAP8[(HEAPU16[$7 >> 1] | 0) + 2 + ($0 + 381) >> 0] = $238 >>> 16; //@line 16574
 HEAP8[(HEAPU16[$7 >> 1] | 0) + 3 + ($0 + 381) >> 0] = $238 >>> 24; //@line 16581
 HEAP16[$7 >> 1] = (HEAPU16[$7 >> 1] | 0) + 4; //@line 16586
 $$0 = ($231 | 0) == 0 ? $$054 : -1014; //@line 16587
 STACKTOP = sp; //@line 16588
 return $$0 | 0; //@line 16588
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_397($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $27 = 0, $29 = 0, $31 = 0, $33 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $45 = 0, $47 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 20186
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20188
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20190
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20192
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20194
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20196
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20198
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20200
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20202
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20204
 $20 = $0 + 40 | 0; //@line 20206
 $22 = HEAP32[$20 >> 2] | 0; //@line 20208
 $25 = HEAP32[$20 + 4 >> 2] | 0; //@line 20211
 $27 = HEAP32[$0 + 48 >> 2] | 0; //@line 20213
 $29 = HEAP32[$0 + 52 >> 2] | 0; //@line 20215
 $31 = HEAP32[$0 + 56 >> 2] | 0; //@line 20217
 $33 = HEAP32[$0 + 60 >> 2] | 0; //@line 20219
 $35 = HEAP32[$0 + 64 >> 2] | 0; //@line 20221
 $37 = HEAP32[$0 + 68 >> 2] | 0; //@line 20223
 $39 = HEAP32[$0 + 72 >> 2] | 0; //@line 20225
 $41 = HEAP32[$0 + 76 >> 2] | 0; //@line 20227
 $43 = HEAP32[$0 + 80 >> 2] | 0; //@line 20229
 $45 = HEAP32[$0 + 84 >> 2] | 0; //@line 20231
 $47 = HEAP32[$0 + 88 >> 2] | 0; //@line 20233
 $48 = HEAP32[$10 >> 2] | 0; //@line 20234
 if ($48 | 0) {
  $51 = HEAP32[$48 + 4 >> 2] | 0; //@line 20238
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(88) | 0; //@line 20239
  FUNCTION_TABLE_vii[$51 & 31]($35, $14); //@line 20240
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 72; //@line 20243
   $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 20244
   HEAP32[$52 >> 2] = $2; //@line 20245
   $53 = $ReallocAsyncCtx5 + 8 | 0; //@line 20246
   HEAP32[$53 >> 2] = $4; //@line 20247
   $54 = $ReallocAsyncCtx5 + 12 | 0; //@line 20248
   HEAP32[$54 >> 2] = $6; //@line 20249
   $55 = $ReallocAsyncCtx5 + 16 | 0; //@line 20250
   HEAP32[$55 >> 2] = $8; //@line 20251
   $56 = $ReallocAsyncCtx5 + 20 | 0; //@line 20252
   HEAP32[$56 >> 2] = $12; //@line 20253
   $57 = $ReallocAsyncCtx5 + 24 | 0; //@line 20254
   HEAP32[$57 >> 2] = $10; //@line 20255
   $58 = $ReallocAsyncCtx5 + 28 | 0; //@line 20256
   HEAP32[$58 >> 2] = $14; //@line 20257
   $59 = $ReallocAsyncCtx5 + 32 | 0; //@line 20258
   HEAP32[$59 >> 2] = $16; //@line 20259
   $60 = $ReallocAsyncCtx5 + 36 | 0; //@line 20260
   HEAP32[$60 >> 2] = $18; //@line 20261
   $61 = $ReallocAsyncCtx5 + 40 | 0; //@line 20262
   $62 = $61; //@line 20263
   $63 = $62; //@line 20264
   HEAP32[$63 >> 2] = $22; //@line 20265
   $64 = $62 + 4 | 0; //@line 20266
   $65 = $64; //@line 20267
   HEAP32[$65 >> 2] = $25; //@line 20268
   $66 = $ReallocAsyncCtx5 + 48 | 0; //@line 20269
   HEAP32[$66 >> 2] = $27; //@line 20270
   $67 = $ReallocAsyncCtx5 + 52 | 0; //@line 20271
   HEAP32[$67 >> 2] = $29; //@line 20272
   $68 = $ReallocAsyncCtx5 + 56 | 0; //@line 20273
   HEAP32[$68 >> 2] = $31; //@line 20274
   $69 = $ReallocAsyncCtx5 + 60 | 0; //@line 20275
   HEAP32[$69 >> 2] = $33; //@line 20276
   $70 = $ReallocAsyncCtx5 + 64 | 0; //@line 20277
   HEAP32[$70 >> 2] = $37; //@line 20278
   $71 = $ReallocAsyncCtx5 + 68 | 0; //@line 20279
   HEAP32[$71 >> 2] = $39; //@line 20280
   $72 = $ReallocAsyncCtx5 + 72 | 0; //@line 20281
   HEAP32[$72 >> 2] = $41; //@line 20282
   $73 = $ReallocAsyncCtx5 + 76 | 0; //@line 20283
   HEAP32[$73 >> 2] = $43; //@line 20284
   $74 = $ReallocAsyncCtx5 + 80 | 0; //@line 20285
   HEAP32[$74 >> 2] = $45; //@line 20286
   $75 = $ReallocAsyncCtx5 + 84 | 0; //@line 20287
   HEAP32[$75 >> 2] = $47; //@line 20288
   sp = STACKTOP; //@line 20289
   return;
  }
  ___async_unwind = 0; //@line 20292
  HEAP32[$ReallocAsyncCtx5 >> 2] = 72; //@line 20293
  $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 20294
  HEAP32[$52 >> 2] = $2; //@line 20295
  $53 = $ReallocAsyncCtx5 + 8 | 0; //@line 20296
  HEAP32[$53 >> 2] = $4; //@line 20297
  $54 = $ReallocAsyncCtx5 + 12 | 0; //@line 20298
  HEAP32[$54 >> 2] = $6; //@line 20299
  $55 = $ReallocAsyncCtx5 + 16 | 0; //@line 20300
  HEAP32[$55 >> 2] = $8; //@line 20301
  $56 = $ReallocAsyncCtx5 + 20 | 0; //@line 20302
  HEAP32[$56 >> 2] = $12; //@line 20303
  $57 = $ReallocAsyncCtx5 + 24 | 0; //@line 20304
  HEAP32[$57 >> 2] = $10; //@line 20305
  $58 = $ReallocAsyncCtx5 + 28 | 0; //@line 20306
  HEAP32[$58 >> 2] = $14; //@line 20307
  $59 = $ReallocAsyncCtx5 + 32 | 0; //@line 20308
  HEAP32[$59 >> 2] = $16; //@line 20309
  $60 = $ReallocAsyncCtx5 + 36 | 0; //@line 20310
  HEAP32[$60 >> 2] = $18; //@line 20311
  $61 = $ReallocAsyncCtx5 + 40 | 0; //@line 20312
  $62 = $61; //@line 20313
  $63 = $62; //@line 20314
  HEAP32[$63 >> 2] = $22; //@line 20315
  $64 = $62 + 4 | 0; //@line 20316
  $65 = $64; //@line 20317
  HEAP32[$65 >> 2] = $25; //@line 20318
  $66 = $ReallocAsyncCtx5 + 48 | 0; //@line 20319
  HEAP32[$66 >> 2] = $27; //@line 20320
  $67 = $ReallocAsyncCtx5 + 52 | 0; //@line 20321
  HEAP32[$67 >> 2] = $29; //@line 20322
  $68 = $ReallocAsyncCtx5 + 56 | 0; //@line 20323
  HEAP32[$68 >> 2] = $31; //@line 20324
  $69 = $ReallocAsyncCtx5 + 60 | 0; //@line 20325
  HEAP32[$69 >> 2] = $33; //@line 20326
  $70 = $ReallocAsyncCtx5 + 64 | 0; //@line 20327
  HEAP32[$70 >> 2] = $37; //@line 20328
  $71 = $ReallocAsyncCtx5 + 68 | 0; //@line 20329
  HEAP32[$71 >> 2] = $39; //@line 20330
  $72 = $ReallocAsyncCtx5 + 72 | 0; //@line 20331
  HEAP32[$72 >> 2] = $41; //@line 20332
  $73 = $ReallocAsyncCtx5 + 76 | 0; //@line 20333
  HEAP32[$73 >> 2] = $43; //@line 20334
  $74 = $ReallocAsyncCtx5 + 80 | 0; //@line 20335
  HEAP32[$74 >> 2] = $45; //@line 20336
  $75 = $ReallocAsyncCtx5 + 84 | 0; //@line 20337
  HEAP32[$75 >> 2] = $47; //@line 20338
  sp = STACKTOP; //@line 20339
  return;
 }
 HEAP32[$16 >> 2] = 0; //@line 20342
 __ZN4mbed6Ticker5setupEy($18, $22, $25); //@line 20343
 $76 = HEAP32[$10 >> 2] | 0; //@line 20344
 if ($76 | 0) {
  $79 = HEAP32[$76 + 8 >> 2] | 0; //@line 20348
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(64) | 0; //@line 20349
  FUNCTION_TABLE_vi[$79 & 1023]($14); //@line 20350
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 73; //@line 20353
   $80 = $ReallocAsyncCtx6 + 4 | 0; //@line 20354
   HEAP32[$80 >> 2] = $2; //@line 20355
   $81 = $ReallocAsyncCtx6 + 8 | 0; //@line 20356
   HEAP32[$81 >> 2] = $4; //@line 20357
   $82 = $ReallocAsyncCtx6 + 12 | 0; //@line 20358
   HEAP32[$82 >> 2] = $6; //@line 20359
   $83 = $ReallocAsyncCtx6 + 16 | 0; //@line 20360
   HEAP32[$83 >> 2] = $8; //@line 20361
   $84 = $ReallocAsyncCtx6 + 20 | 0; //@line 20362
   HEAP32[$84 >> 2] = $12; //@line 20363
   $85 = $ReallocAsyncCtx6 + 24 | 0; //@line 20364
   HEAP32[$85 >> 2] = $27; //@line 20365
   $86 = $ReallocAsyncCtx6 + 28 | 0; //@line 20366
   HEAP32[$86 >> 2] = $29; //@line 20367
   $87 = $ReallocAsyncCtx6 + 32 | 0; //@line 20368
   HEAP32[$87 >> 2] = $31; //@line 20369
   $88 = $ReallocAsyncCtx6 + 36 | 0; //@line 20370
   HEAP32[$88 >> 2] = $33; //@line 20371
   $89 = $ReallocAsyncCtx6 + 40 | 0; //@line 20372
   HEAP32[$89 >> 2] = $37; //@line 20373
   $90 = $ReallocAsyncCtx6 + 44 | 0; //@line 20374
   HEAP32[$90 >> 2] = $39; //@line 20375
   $91 = $ReallocAsyncCtx6 + 48 | 0; //@line 20376
   HEAP32[$91 >> 2] = $41; //@line 20377
   $92 = $ReallocAsyncCtx6 + 52 | 0; //@line 20378
   HEAP32[$92 >> 2] = $43; //@line 20379
   $93 = $ReallocAsyncCtx6 + 56 | 0; //@line 20380
   HEAP32[$93 >> 2] = $45; //@line 20381
   $94 = $ReallocAsyncCtx6 + 60 | 0; //@line 20382
   HEAP32[$94 >> 2] = $47; //@line 20383
   sp = STACKTOP; //@line 20384
   return;
  }
  ___async_unwind = 0; //@line 20387
  HEAP32[$ReallocAsyncCtx6 >> 2] = 73; //@line 20388
  $80 = $ReallocAsyncCtx6 + 4 | 0; //@line 20389
  HEAP32[$80 >> 2] = $2; //@line 20390
  $81 = $ReallocAsyncCtx6 + 8 | 0; //@line 20391
  HEAP32[$81 >> 2] = $4; //@line 20392
  $82 = $ReallocAsyncCtx6 + 12 | 0; //@line 20393
  HEAP32[$82 >> 2] = $6; //@line 20394
  $83 = $ReallocAsyncCtx6 + 16 | 0; //@line 20395
  HEAP32[$83 >> 2] = $8; //@line 20396
  $84 = $ReallocAsyncCtx6 + 20 | 0; //@line 20397
  HEAP32[$84 >> 2] = $12; //@line 20398
  $85 = $ReallocAsyncCtx6 + 24 | 0; //@line 20399
  HEAP32[$85 >> 2] = $27; //@line 20400
  $86 = $ReallocAsyncCtx6 + 28 | 0; //@line 20401
  HEAP32[$86 >> 2] = $29; //@line 20402
  $87 = $ReallocAsyncCtx6 + 32 | 0; //@line 20403
  HEAP32[$87 >> 2] = $31; //@line 20404
  $88 = $ReallocAsyncCtx6 + 36 | 0; //@line 20405
  HEAP32[$88 >> 2] = $33; //@line 20406
  $89 = $ReallocAsyncCtx6 + 40 | 0; //@line 20407
  HEAP32[$89 >> 2] = $37; //@line 20408
  $90 = $ReallocAsyncCtx6 + 44 | 0; //@line 20409
  HEAP32[$90 >> 2] = $39; //@line 20410
  $91 = $ReallocAsyncCtx6 + 48 | 0; //@line 20411
  HEAP32[$91 >> 2] = $41; //@line 20412
  $92 = $ReallocAsyncCtx6 + 52 | 0; //@line 20413
  HEAP32[$92 >> 2] = $43; //@line 20414
  $93 = $ReallocAsyncCtx6 + 56 | 0; //@line 20415
  HEAP32[$93 >> 2] = $45; //@line 20416
  $94 = $ReallocAsyncCtx6 + 60 | 0; //@line 20417
  HEAP32[$94 >> 2] = $47; //@line 20418
  sp = STACKTOP; //@line 20419
  return;
 }
 $97 = (HEAP8[$12 + 770 >> 0] | 0) == 0; //@line 20424
 _printf(10880, $45) | 0; //@line 20425
 if ($97) {
  HEAP32[$41 >> 2] = 6; //@line 20427
  _printf(10946, $41) | 0; //@line 20428
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(24) | 0; //@line 20429
  _putchar(10) | 0; //@line 20430
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 77; //@line 20433
   $103 = $ReallocAsyncCtx8 + 4 | 0; //@line 20434
   HEAP32[$103 >> 2] = $12; //@line 20435
   $104 = $ReallocAsyncCtx8 + 8 | 0; //@line 20436
   HEAP32[$104 >> 2] = $27; //@line 20437
   $105 = $ReallocAsyncCtx8 + 12 | 0; //@line 20438
   HEAP32[$105 >> 2] = $29; //@line 20439
   $106 = $ReallocAsyncCtx8 + 16 | 0; //@line 20440
   HEAP32[$106 >> 2] = $31; //@line 20441
   $107 = $ReallocAsyncCtx8 + 20 | 0; //@line 20442
   HEAP32[$107 >> 2] = $33; //@line 20443
   sp = STACKTOP; //@line 20444
   return;
  }
  ___async_unwind = 0; //@line 20447
  HEAP32[$ReallocAsyncCtx8 >> 2] = 77; //@line 20448
  $103 = $ReallocAsyncCtx8 + 4 | 0; //@line 20449
  HEAP32[$103 >> 2] = $12; //@line 20450
  $104 = $ReallocAsyncCtx8 + 8 | 0; //@line 20451
  HEAP32[$104 >> 2] = $27; //@line 20452
  $105 = $ReallocAsyncCtx8 + 12 | 0; //@line 20453
  HEAP32[$105 >> 2] = $29; //@line 20454
  $106 = $ReallocAsyncCtx8 + 16 | 0; //@line 20455
  HEAP32[$106 >> 2] = $31; //@line 20456
  $107 = $ReallocAsyncCtx8 + 20 | 0; //@line 20457
  HEAP32[$107 >> 2] = $33; //@line 20458
  sp = STACKTOP; //@line 20459
  return;
 } else {
  HEAP32[$37 >> 2] = 5; //@line 20462
  _printf(10946, $37) | 0; //@line 20463
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(24) | 0; //@line 20464
  _putchar(10) | 0; //@line 20465
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 74; //@line 20468
   $98 = $ReallocAsyncCtx10 + 4 | 0; //@line 20469
   HEAP32[$98 >> 2] = $12; //@line 20470
   $99 = $ReallocAsyncCtx10 + 8 | 0; //@line 20471
   HEAP32[$99 >> 2] = $2; //@line 20472
   $100 = $ReallocAsyncCtx10 + 12 | 0; //@line 20473
   HEAP32[$100 >> 2] = $4; //@line 20474
   $101 = $ReallocAsyncCtx10 + 16 | 0; //@line 20475
   HEAP32[$101 >> 2] = $6; //@line 20476
   $102 = $ReallocAsyncCtx10 + 20 | 0; //@line 20477
   HEAP32[$102 >> 2] = $8; //@line 20478
   sp = STACKTOP; //@line 20479
   return;
  }
  ___async_unwind = 0; //@line 20482
  HEAP32[$ReallocAsyncCtx10 >> 2] = 74; //@line 20483
  $98 = $ReallocAsyncCtx10 + 4 | 0; //@line 20484
  HEAP32[$98 >> 2] = $12; //@line 20485
  $99 = $ReallocAsyncCtx10 + 8 | 0; //@line 20486
  HEAP32[$99 >> 2] = $2; //@line 20487
  $100 = $ReallocAsyncCtx10 + 12 | 0; //@line 20488
  HEAP32[$100 >> 2] = $4; //@line 20489
  $101 = $ReallocAsyncCtx10 + 16 | 0; //@line 20490
  HEAP32[$101 >> 2] = $6; //@line 20491
  $102 = $ReallocAsyncCtx10 + 20 | 0; //@line 20492
  HEAP32[$102 >> 2] = $8; //@line 20493
  sp = STACKTOP; //@line 20494
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_217($0) {
 $0 = $0 | 0;
 var $$1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $108 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $65 = 0, $66 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx19 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 34114
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34116
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34118
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34120
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34122
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34124
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 34126
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 34128
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 34130
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 34132
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 34134
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 34136
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 34138
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 34140
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 34142
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 34144
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 34146
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 34148
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 34150
 switch (HEAP32[$8 >> 2] | 0) {
 case 7:
  {
   $38 = $2 + 4 | 0; //@line 34154
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(24) | 0; //@line 34155
   __ZN7LoRaMac19remove_channel_planEv($38) | 0; //@line 34156
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 225; //@line 34159
    $39 = $ReallocAsyncCtx22 + 4 | 0; //@line 34160
    HEAP32[$39 >> 2] = $12; //@line 34161
    $40 = $ReallocAsyncCtx22 + 8 | 0; //@line 34162
    HEAP32[$40 >> 2] = $38; //@line 34163
    $41 = $ReallocAsyncCtx22 + 12 | 0; //@line 34164
    HEAP32[$41 >> 2] = $2; //@line 34165
    $42 = $ReallocAsyncCtx22 + 16 | 0; //@line 34166
    HEAP32[$42 >> 2] = $6; //@line 34167
    $43 = $ReallocAsyncCtx22 + 20 | 0; //@line 34168
    HEAP32[$43 >> 2] = $24; //@line 34169
    sp = STACKTOP; //@line 34170
    return;
   }
   ___async_unwind = 0; //@line 34173
   HEAP32[$ReallocAsyncCtx22 >> 2] = 225; //@line 34174
   $39 = $ReallocAsyncCtx22 + 4 | 0; //@line 34175
   HEAP32[$39 >> 2] = $12; //@line 34176
   $40 = $ReallocAsyncCtx22 + 8 | 0; //@line 34177
   HEAP32[$40 >> 2] = $38; //@line 34178
   $41 = $ReallocAsyncCtx22 + 12 | 0; //@line 34179
   HEAP32[$41 >> 2] = $2; //@line 34180
   $42 = $ReallocAsyncCtx22 + 16 | 0; //@line 34181
   HEAP32[$42 >> 2] = $6; //@line 34182
   $43 = $ReallocAsyncCtx22 + 20 | 0; //@line 34183
   HEAP32[$43 >> 2] = $24; //@line 34184
   sp = STACKTOP; //@line 34185
   return;
  }
 case 1:
  {
   $$1 = 0; //@line 34190
   $108 = ___async_retval; //@line 34191
   HEAP32[$108 >> 2] = $$1; //@line 34192
   return;
  }
 case 2:
  {
   if (HEAP8[$2 + 1936 >> 0] | 0) {
    $$1 = -1003; //@line 34201
    $108 = ___async_retval; //@line 34202
    HEAP32[$108 >> 2] = $$1; //@line 34203
    return;
   }
   HEAP32[$28 >> 2] = 0; //@line 34206
   HEAP32[$28 + 4 >> 2] = HEAP32[$2 + 1940 >> 2]; //@line 34210
   HEAP32[$28 + 8 >> 2] = HEAP32[$2 + 1944 >> 2]; //@line 34214
   HEAP32[$28 + 12 >> 2] = HEAP32[$2 + 1948 >> 2]; //@line 34218
   HEAP8[$28 + 16 >> 0] = HEAP8[$2 + 1952 >> 0] | 0; //@line 34222
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(12) | 0; //@line 34224
   $60 = __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t($2 + 4 | 0, $28) | 0; //@line 34225
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 232; //@line 34228
    $61 = $ReallocAsyncCtx23 + 4 | 0; //@line 34229
    HEAP32[$61 >> 2] = $28; //@line 34230
    $62 = $ReallocAsyncCtx23 + 8 | 0; //@line 34231
    HEAP32[$62 >> 2] = $6; //@line 34232
    sp = STACKTOP; //@line 34233
    return;
   }
   HEAP32[___async_retval >> 2] = $60; //@line 34237
   ___async_unwind = 0; //@line 34238
   HEAP32[$ReallocAsyncCtx23 >> 2] = 232; //@line 34239
   $61 = $ReallocAsyncCtx23 + 4 | 0; //@line 34240
   HEAP32[$61 >> 2] = $28; //@line 34241
   $62 = $ReallocAsyncCtx23 + 8 | 0; //@line 34242
   HEAP32[$62 >> 2] = $6; //@line 34243
   sp = STACKTOP; //@line 34244
   return;
  }
 case 4:
  {
   HEAP8[$2 + 1932 >> 0] = 1; //@line 34250
   $65 = $2 + 1892 | 0; //@line 34251
   $66 = HEAP32[$65 >> 2] | 0; //@line 34252
   if (!$66) {
    $$1 = 0; //@line 34255
    $108 = ___async_retval; //@line 34256
    HEAP32[$108 >> 2] = $$1; //@line 34257
    return;
   }
   $70 = HEAP32[$2 + 2288 >> 2] | 0; //@line 34262
   $72 = HEAP32[$66 + 4 >> 2] | 0; //@line 34264
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 34265
   FUNCTION_TABLE_vii[$72 & 31]($4, $2 + 1880 | 0); //@line 34266
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 233; //@line 34269
    $73 = $ReallocAsyncCtx3 + 4 | 0; //@line 34270
    HEAP32[$73 >> 2] = $65; //@line 34271
    $74 = $ReallocAsyncCtx3 + 8 | 0; //@line 34272
    HEAP32[$74 >> 2] = $4; //@line 34273
    $75 = $ReallocAsyncCtx3 + 12 | 0; //@line 34274
    HEAP32[$75 >> 2] = $70; //@line 34275
    $76 = $ReallocAsyncCtx3 + 16 | 0; //@line 34276
    HEAP32[$76 >> 2] = $4; //@line 34277
    $77 = $ReallocAsyncCtx3 + 20 | 0; //@line 34278
    HEAP32[$77 >> 2] = $6; //@line 34279
    sp = STACKTOP; //@line 34280
    return;
   }
   ___async_unwind = 0; //@line 34283
   HEAP32[$ReallocAsyncCtx3 >> 2] = 233; //@line 34284
   $73 = $ReallocAsyncCtx3 + 4 | 0; //@line 34285
   HEAP32[$73 >> 2] = $65; //@line 34286
   $74 = $ReallocAsyncCtx3 + 8 | 0; //@line 34287
   HEAP32[$74 >> 2] = $4; //@line 34288
   $75 = $ReallocAsyncCtx3 + 12 | 0; //@line 34289
   HEAP32[$75 >> 2] = $70; //@line 34290
   $76 = $ReallocAsyncCtx3 + 16 | 0; //@line 34291
   HEAP32[$76 >> 2] = $4; //@line 34292
   $77 = $ReallocAsyncCtx3 + 20 | 0; //@line 34293
   HEAP32[$77 >> 2] = $6; //@line 34294
   sp = STACKTOP; //@line 34295
   return;
  }
 case 3:
  {
   HEAP32[$12 >> 2] = 3; //@line 34300
   $80 = $12 + 4 | 0; //@line 34303
   HEAP32[$80 >> 2] = HEAP32[$2 + 1940 >> 2]; //@line 34304
   $81 = $2 + 4 | 0; //@line 34305
   $ReallocAsyncCtx19 = _emscripten_realloc_async_context(36) | 0; //@line 34306
   __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($81, $12) | 0; //@line 34307
   if (___async) {
    HEAP32[$ReallocAsyncCtx19 >> 2] = 237; //@line 34310
    $82 = $ReallocAsyncCtx19 + 4 | 0; //@line 34311
    HEAP32[$82 >> 2] = $2; //@line 34312
    $83 = $ReallocAsyncCtx19 + 8 | 0; //@line 34313
    HEAP32[$83 >> 2] = $26; //@line 34314
    $84 = $ReallocAsyncCtx19 + 12 | 0; //@line 34315
    HEAP32[$84 >> 2] = $6; //@line 34316
    $85 = $ReallocAsyncCtx19 + 16 | 0; //@line 34317
    HEAP32[$85 >> 2] = $12; //@line 34318
    $86 = $ReallocAsyncCtx19 + 20 | 0; //@line 34319
    HEAP32[$86 >> 2] = $80; //@line 34320
    $87 = $ReallocAsyncCtx19 + 24 | 0; //@line 34321
    HEAP32[$87 >> 2] = $81; //@line 34322
    $88 = $ReallocAsyncCtx19 + 28 | 0; //@line 34323
    HEAP32[$88 >> 2] = $12; //@line 34324
    $89 = $ReallocAsyncCtx19 + 32 | 0; //@line 34325
    HEAP32[$89 >> 2] = $80; //@line 34326
    sp = STACKTOP; //@line 34327
    return;
   }
   ___async_unwind = 0; //@line 34330
   HEAP32[$ReallocAsyncCtx19 >> 2] = 237; //@line 34331
   $82 = $ReallocAsyncCtx19 + 4 | 0; //@line 34332
   HEAP32[$82 >> 2] = $2; //@line 34333
   $83 = $ReallocAsyncCtx19 + 8 | 0; //@line 34334
   HEAP32[$83 >> 2] = $26; //@line 34335
   $84 = $ReallocAsyncCtx19 + 12 | 0; //@line 34336
   HEAP32[$84 >> 2] = $6; //@line 34337
   $85 = $ReallocAsyncCtx19 + 16 | 0; //@line 34338
   HEAP32[$85 >> 2] = $12; //@line 34339
   $86 = $ReallocAsyncCtx19 + 20 | 0; //@line 34340
   HEAP32[$86 >> 2] = $80; //@line 34341
   $87 = $ReallocAsyncCtx19 + 24 | 0; //@line 34342
   HEAP32[$87 >> 2] = $81; //@line 34343
   $88 = $ReallocAsyncCtx19 + 28 | 0; //@line 34344
   HEAP32[$88 >> 2] = $12; //@line 34345
   $89 = $ReallocAsyncCtx19 + 32 | 0; //@line 34346
   HEAP32[$89 >> 2] = $80; //@line 34347
   sp = STACKTOP; //@line 34348
   return;
  }
 case 5:
  {
   $90 = $2 + 1964 | 0; //@line 34353
   if (HEAP8[$90 >> 0] | 0) {
    HEAP32[$8 >> 2] = 6; //@line 34357
    $$1 = 0; //@line 34358
    $108 = ___async_retval; //@line 34359
    HEAP32[$108 >> 2] = $$1; //@line 34360
    return;
   }
   HEAP8[$90 >> 0] = 1; //@line 34363
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(56) | 0; //@line 34364
   $93 = __ZN12LoRaWANStack17send_frame_to_macEv($2) | 0; //@line 34365
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 246; //@line 34368
    $94 = $ReallocAsyncCtx14 + 4 | 0; //@line 34369
    HEAP32[$94 >> 2] = $8; //@line 34370
    $95 = $ReallocAsyncCtx14 + 8 | 0; //@line 34371
    HEAP32[$95 >> 2] = $6; //@line 34372
    $96 = $ReallocAsyncCtx14 + 12 | 0; //@line 34373
    HEAP32[$96 >> 2] = $2; //@line 34374
    $97 = $ReallocAsyncCtx14 + 16 | 0; //@line 34375
    HEAP32[$97 >> 2] = $10; //@line 34376
    $98 = $ReallocAsyncCtx14 + 20 | 0; //@line 34377
    HEAP32[$98 >> 2] = $14; //@line 34378
    $99 = $ReallocAsyncCtx14 + 24 | 0; //@line 34379
    HEAP32[$99 >> 2] = $16; //@line 34380
    $100 = $ReallocAsyncCtx14 + 28 | 0; //@line 34381
    HEAP32[$100 >> 2] = $18; //@line 34382
    $101 = $ReallocAsyncCtx14 + 32 | 0; //@line 34383
    HEAP32[$101 >> 2] = $20; //@line 34384
    $102 = $ReallocAsyncCtx14 + 36 | 0; //@line 34385
    HEAP32[$102 >> 2] = $22; //@line 34386
    $103 = $ReallocAsyncCtx14 + 40 | 0; //@line 34387
    HEAP32[$103 >> 2] = $30; //@line 34388
    $104 = $ReallocAsyncCtx14 + 44 | 0; //@line 34389
    HEAP32[$104 >> 2] = $32; //@line 34390
    $105 = $ReallocAsyncCtx14 + 48 | 0; //@line 34391
    HEAP32[$105 >> 2] = $34; //@line 34392
    $106 = $ReallocAsyncCtx14 + 52 | 0; //@line 34393
    HEAP32[$106 >> 2] = $36; //@line 34394
    sp = STACKTOP; //@line 34395
    return;
   }
   HEAP32[___async_retval >> 2] = $93; //@line 34399
   ___async_unwind = 0; //@line 34400
   HEAP32[$ReallocAsyncCtx14 >> 2] = 246; //@line 34401
   $94 = $ReallocAsyncCtx14 + 4 | 0; //@line 34402
   HEAP32[$94 >> 2] = $8; //@line 34403
   $95 = $ReallocAsyncCtx14 + 8 | 0; //@line 34404
   HEAP32[$95 >> 2] = $6; //@line 34405
   $96 = $ReallocAsyncCtx14 + 12 | 0; //@line 34406
   HEAP32[$96 >> 2] = $2; //@line 34407
   $97 = $ReallocAsyncCtx14 + 16 | 0; //@line 34408
   HEAP32[$97 >> 2] = $10; //@line 34409
   $98 = $ReallocAsyncCtx14 + 20 | 0; //@line 34410
   HEAP32[$98 >> 2] = $14; //@line 34411
   $99 = $ReallocAsyncCtx14 + 24 | 0; //@line 34412
   HEAP32[$99 >> 2] = $16; //@line 34413
   $100 = $ReallocAsyncCtx14 + 28 | 0; //@line 34414
   HEAP32[$100 >> 2] = $18; //@line 34415
   $101 = $ReallocAsyncCtx14 + 32 | 0; //@line 34416
   HEAP32[$101 >> 2] = $20; //@line 34417
   $102 = $ReallocAsyncCtx14 + 36 | 0; //@line 34418
   HEAP32[$102 >> 2] = $22; //@line 34419
   $103 = $ReallocAsyncCtx14 + 40 | 0; //@line 34420
   HEAP32[$103 >> 2] = $30; //@line 34421
   $104 = $ReallocAsyncCtx14 + 44 | 0; //@line 34422
   HEAP32[$104 >> 2] = $32; //@line 34423
   $105 = $ReallocAsyncCtx14 + 48 | 0; //@line 34424
   HEAP32[$105 >> 2] = $34; //@line 34425
   $106 = $ReallocAsyncCtx14 + 52 | 0; //@line 34426
   HEAP32[$106 >> 2] = $36; //@line 34427
   sp = STACKTOP; //@line 34428
   return;
  }
 case 6:
  {
   $$1 = -1018; //@line 34433
   $108 = ___async_retval; //@line 34434
   HEAP32[$108 >> 2] = $$1; //@line 34435
   return;
  }
 case 0:
  {
   $$1 = -1011; //@line 34440
   $108 = ___async_retval; //@line 34441
   HEAP32[$108 >> 2] = $$1; //@line 34442
   return;
  }
 default:
  {
   $$1 = -1002; //@line 34447
   $108 = ___async_retval; //@line 34448
   HEAP32[$108 >> 2] = $$1; //@line 34449
   return;
  }
 }
}
function __ZN7LoRaMac16on_radio_tx_doneEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$pre$phiZ2D = 0, $$sroa$0$0$copyload = 0, $10 = 0, $101 = 0, $102 = 0, $105 = 0, $113 = 0, $119 = 0, $122 = 0, $13 = 0, $134 = 0, $137 = 0, $16 = 0, $34 = 0, $35 = 0, $57 = 0, $60 = 0, $70 = 0, $72 = 0, $73 = 0, $8 = 0, $86 = 0, $88 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx28 = 0, $AsyncCtx32 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP; //@line 10387
 STACKTOP = STACKTOP + 32 | 0; //@line 10388
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10388
 $$byval_copy = sp + 24 | 0; //@line 10389
 $vararg_buffer3 = sp + 16 | 0; //@line 10390
 $vararg_buffer1 = sp + 8 | 0; //@line 10391
 $vararg_buffer = sp; //@line 10392
 _printf(12943, $vararg_buffer) | 0; //@line 10393
 _printf(12956, $vararg_buffer1) | 0; //@line 10394
 $AsyncCtx13 = _emscripten_alloc_async_context(32, sp) | 0; //@line 10395
 _putchar(10) | 0; //@line 10396
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 344; //@line 10399
  HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 10401
  HEAP32[$AsyncCtx13 + 8 >> 2] = $vararg_buffer; //@line 10403
  HEAP32[$AsyncCtx13 + 12 >> 2] = $vararg_buffer1; //@line 10405
  HEAP32[$AsyncCtx13 + 16 >> 2] = $vararg_buffer3; //@line 10407
  HEAP32[$AsyncCtx13 + 20 >> 2] = $vararg_buffer3; //@line 10409
  HEAP32[$AsyncCtx13 + 24 >> 2] = $$byval_copy; //@line 10411
  HEAP32[$AsyncCtx13 + 28 >> 2] = $$byval_copy; //@line 10413
  sp = STACKTOP; //@line 10414
  STACKTOP = sp; //@line 10415
  return;
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 10417
 $8 = $0 + 356 | 0; //@line 10418
 $10 = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[$8 >> 2] | 0) | 0; //@line 10420
 $$sroa$0$0$copyload = HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) >> 2] | 0; //@line 10423
 $13 = $0 + 360 | 0; //@line 10424
 do {
  if ((HEAP32[$13 >> 2] | 0) == 2) {
   _printf(12943, $vararg_buffer3) | 0; //@line 10429
   _printf(12970, $$byval_copy) | 0; //@line 10430
   $AsyncCtx9 = _emscripten_alloc_async_context(40, sp) | 0; //@line 10431
   _putchar(10) | 0; //@line 10432
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 346; //@line 10435
    HEAP32[$AsyncCtx9 + 4 >> 2] = $vararg_buffer; //@line 10437
    HEAP32[$AsyncCtx9 + 8 >> 2] = $0; //@line 10439
    HEAP32[$AsyncCtx9 + 12 >> 2] = $10; //@line 10441
    HEAP32[$AsyncCtx9 + 16 >> 2] = $8; //@line 10443
    HEAP32[$AsyncCtx9 + 20 >> 2] = $13; //@line 10445
    HEAP32[$AsyncCtx9 + 24 >> 2] = $$sroa$0$0$copyload; //@line 10447
    HEAP32[$AsyncCtx9 + 28 >> 2] = $vararg_buffer; //@line 10449
    HEAP32[$AsyncCtx9 + 32 >> 2] = $vararg_buffer1; //@line 10451
    HEAP32[$AsyncCtx9 + 36 >> 2] = $vararg_buffer1; //@line 10453
    sp = STACKTOP; //@line 10454
    STACKTOP = sp; //@line 10455
    return;
   }
   _emscripten_free_async_context($AsyncCtx9 | 0); //@line 10457
   $34 = HEAP32[$0 + 1328 >> 2] | 0; //@line 10459
   HEAP32[$vararg_buffer1 >> 2] = 347; //@line 10460
   HEAP32[$vararg_buffer1 + 4 >> 2] = 0; //@line 10462
   $AsyncCtx35 = _emscripten_alloc_async_context(36, sp) | 0; //@line 10463
   HEAP32[$$byval_copy >> 2] = HEAP32[$vararg_buffer1 >> 2]; //@line 10464
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$vararg_buffer1 + 4 >> 2]; //@line 10464
   $35 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($34, $0, $$byval_copy) | 0; //@line 10465
   if (___async) {
    HEAP32[$AsyncCtx35 >> 2] = 348; //@line 10468
    HEAP32[$AsyncCtx35 + 4 >> 2] = $vararg_buffer; //@line 10470
    HEAP32[$AsyncCtx35 + 8 >> 2] = $0; //@line 10472
    HEAP32[$AsyncCtx35 + 12 >> 2] = $10; //@line 10474
    HEAP32[$AsyncCtx35 + 16 >> 2] = $13; //@line 10476
    HEAP32[$AsyncCtx35 + 20 >> 2] = $8; //@line 10478
    HEAP32[$AsyncCtx35 + 24 >> 2] = $$sroa$0$0$copyload; //@line 10480
    HEAP32[$AsyncCtx35 + 28 >> 2] = $vararg_buffer; //@line 10482
    HEAP32[$AsyncCtx35 + 32 >> 2] = $vararg_buffer1; //@line 10484
    sp = STACKTOP; //@line 10485
    STACKTOP = sp; //@line 10486
    return;
   }
   _emscripten_free_async_context($AsyncCtx35 | 0); //@line 10488
   do {
    if (!$35) {
     $AsyncCtx39 = _emscripten_alloc_async_context(36, sp) | 0; //@line 10492
     _mbed_assert_internal(12827, 12836, 217); //@line 10493
     if (___async) {
      HEAP32[$AsyncCtx39 >> 2] = 349; //@line 10496
      HEAP32[$AsyncCtx39 + 4 >> 2] = $vararg_buffer; //@line 10498
      HEAP32[$AsyncCtx39 + 8 >> 2] = $0; //@line 10500
      HEAP32[$AsyncCtx39 + 12 >> 2] = $10; //@line 10502
      HEAP32[$AsyncCtx39 + 16 >> 2] = $13; //@line 10504
      HEAP32[$AsyncCtx39 + 20 >> 2] = $8; //@line 10506
      HEAP32[$AsyncCtx39 + 24 >> 2] = $$sroa$0$0$copyload; //@line 10508
      HEAP32[$AsyncCtx39 + 28 >> 2] = $vararg_buffer; //@line 10510
      HEAP32[$AsyncCtx39 + 32 >> 2] = $vararg_buffer1; //@line 10512
      sp = STACKTOP; //@line 10513
      STACKTOP = sp; //@line 10514
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx39 | 0); //@line 10516
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 10522
  } else {
   $16 = HEAP32[$0 >> 2] | 0; //@line 10524
   $AsyncCtx32 = _emscripten_alloc_async_context(32, sp) | 0; //@line 10525
   __ZN7LoRaPHY18put_radio_to_sleepEv($16); //@line 10526
   if (___async) {
    HEAP32[$AsyncCtx32 >> 2] = 345; //@line 10529
    HEAP32[$AsyncCtx32 + 4 >> 2] = $vararg_buffer; //@line 10531
    HEAP32[$AsyncCtx32 + 8 >> 2] = $0; //@line 10533
    HEAP32[$AsyncCtx32 + 12 >> 2] = $10; //@line 10535
    HEAP32[$AsyncCtx32 + 16 >> 2] = $13; //@line 10537
    HEAP32[$AsyncCtx32 + 20 >> 2] = $8; //@line 10539
    HEAP32[$AsyncCtx32 + 24 >> 2] = $$sroa$0$0$copyload; //@line 10541
    HEAP32[$AsyncCtx32 + 28 >> 2] = $vararg_buffer; //@line 10543
    sp = STACKTOP; //@line 10544
    STACKTOP = sp; //@line 10545
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx32 | 0); //@line 10547
    break;
   }
  }
 } while (0);
 do {
  if (!(HEAP8[$0 + 371 >> 0] | 0)) {
   HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 10560
   $101 = $0 + 944 | 0; //@line 10561
   $102 = HEAP8[$101 >> 0] | 0; //@line 10562
   if (!($102 << 24 >> 24)) {
    HEAP8[$101 >> 0] = 1; //@line 10565
    $105 = 1; //@line 10566
   } else {
    $105 = $102; //@line 10568
   }
   HEAP8[$101 >> 0] = $105 | 32; //@line 10571
  } else {
   $57 = HEAP32[$8 >> 2] | 0; //@line 10573
   $60 = HEAP32[$0 + 972 >> 2] | 0; //@line 10576
   $AsyncCtx28 = _emscripten_alloc_async_context(32, sp) | 0; //@line 10577
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($57, $0 + 1036 | 0, $60); //@line 10578
   if (___async) {
    HEAP32[$AsyncCtx28 >> 2] = 350; //@line 10581
    HEAP32[$AsyncCtx28 + 4 >> 2] = $13; //@line 10583
    HEAP32[$AsyncCtx28 + 8 >> 2] = $0; //@line 10585
    HEAP32[$AsyncCtx28 + 12 >> 2] = $8; //@line 10587
    HEAP32[$AsyncCtx28 + 16 >> 2] = $$sroa$0$0$copyload; //@line 10589
    HEAP32[$AsyncCtx28 + 20 >> 2] = $vararg_buffer; //@line 10591
    HEAP32[$AsyncCtx28 + 24 >> 2] = $vararg_buffer; //@line 10593
    HEAP32[$AsyncCtx28 + 28 >> 2] = $10; //@line 10595
    sp = STACKTOP; //@line 10596
    STACKTOP = sp; //@line 10597
    return;
   }
   _emscripten_free_async_context($AsyncCtx28 | 0); //@line 10599
   if ((HEAP32[$13 >> 2] | 0) == 2) {
    $$pre$phiZ2D = $0 + 976 | 0; //@line 10604
   } else {
    $70 = HEAP32[$8 >> 2] | 0; //@line 10606
    $72 = $0 + 976 | 0; //@line 10608
    $73 = HEAP32[$72 >> 2] | 0; //@line 10609
    $AsyncCtx24 = _emscripten_alloc_async_context(36, sp) | 0; //@line 10610
    __ZN18LoRaWANTimeHandler5startER13timer_event_tj($70, $0 + 1056 | 0, $73); //@line 10611
    if (___async) {
     HEAP32[$AsyncCtx24 >> 2] = 351; //@line 10614
     HEAP32[$AsyncCtx24 + 4 >> 2] = $13; //@line 10616
     HEAP32[$AsyncCtx24 + 8 >> 2] = $72; //@line 10618
     HEAP32[$AsyncCtx24 + 12 >> 2] = $8; //@line 10620
     HEAP32[$AsyncCtx24 + 16 >> 2] = $0; //@line 10622
     HEAP32[$AsyncCtx24 + 20 >> 2] = $$sroa$0$0$copyload; //@line 10624
     HEAP32[$AsyncCtx24 + 24 >> 2] = $vararg_buffer; //@line 10626
     HEAP32[$AsyncCtx24 + 28 >> 2] = $vararg_buffer; //@line 10628
     HEAP32[$AsyncCtx24 + 32 >> 2] = $10; //@line 10630
     sp = STACKTOP; //@line 10631
     STACKTOP = sp; //@line 10632
     return;
    }
    _emscripten_free_async_context($AsyncCtx24 | 0); //@line 10634
    if ((HEAP32[$13 >> 2] | 0) == 2) {
     $$pre$phiZ2D = $72; //@line 10638
    } else {
     if (!(HEAP8[$0 + 373 >> 0] | 0)) {
      break;
     } else {
      $$pre$phiZ2D = $72; //@line 10646
     }
    }
   }
   $86 = HEAP32[$8 >> 2] | 0; //@line 10650
   $88 = HEAP32[$$pre$phiZ2D >> 2] | 0; //@line 10652
   $91 = (__ZN7LoRaPHY15get_ack_timeoutEv(HEAP32[$0 >> 2] | 0) | 0) + $88 | 0; //@line 10655
   $AsyncCtx20 = _emscripten_alloc_async_context(28, sp) | 0; //@line 10656
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($86, $0 + 1076 | 0, $91); //@line 10657
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 352; //@line 10660
    HEAP32[$AsyncCtx20 + 4 >> 2] = $0; //@line 10662
    HEAP32[$AsyncCtx20 + 8 >> 2] = $$sroa$0$0$copyload; //@line 10664
    HEAP32[$AsyncCtx20 + 12 >> 2] = $vararg_buffer; //@line 10666
    HEAP32[$AsyncCtx20 + 16 >> 2] = $vararg_buffer; //@line 10668
    HEAP32[$AsyncCtx20 + 20 >> 2] = $10; //@line 10670
    HEAP32[$AsyncCtx20 + 24 >> 2] = $8; //@line 10672
    sp = STACKTOP; //@line 10673
    STACKTOP = sp; //@line 10674
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 10676
    break;
   }
  }
 } while (0);
 HEAP8[$0 + 376 >> 0] = ($$sroa$0$0$copyload | 0) == 0 & (HEAP8[$0 + 944 >> 0] & 8) != 0 & 1; //@line 10689
 $113 = HEAP8[$0 + 378 >> 0] | 0; //@line 10691
 HEAP8[$0 + 379 >> 0] = $113; //@line 10693
 HEAP8[$vararg_buffer >> 0] = $113; //@line 10694
 HEAP8[$vararg_buffer + 1 >> 0] = HEAP8[$0 + 372 >> 0] | 0; //@line 10698
 HEAP32[$vararg_buffer + 4 >> 2] = $10; //@line 10700
 $119 = HEAP32[$0 >> 2] | 0; //@line 10701
 $122 = HEAP32[(HEAP32[$119 >> 2] | 0) + 12 >> 2] | 0; //@line 10704
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 10705
 FUNCTION_TABLE_vii[$122 & 31]($119, $vararg_buffer); //@line 10706
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 353; //@line 10709
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 10711
  HEAP32[$AsyncCtx + 8 >> 2] = $10; //@line 10713
  HEAP32[$AsyncCtx + 12 >> 2] = $8; //@line 10715
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer; //@line 10717
  sp = STACKTOP; //@line 10718
  STACKTOP = sp; //@line 10719
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10721
 HEAP32[$0 + 980 >> 2] = $10; //@line 10723
 if (!(HEAP8[$0 + 373 >> 0] | 0)) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 10731
  $134 = $0 + 380 | 0; //@line 10732
  HEAP8[$134 >> 0] = (HEAP8[$134 >> 0] | 0) + 1 << 24 >> 24; //@line 10735
 }
 $137 = HEAP32[$8 >> 2] | 0; //@line 10737
 $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10739
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($137, $0 + 996 | 0, 1); //@line 10740
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 354; //@line 10743
  HEAP32[$AsyncCtx17 + 4 >> 2] = $vararg_buffer; //@line 10745
  sp = STACKTOP; //@line 10746
  STACKTOP = sp; //@line 10747
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx17 | 0); //@line 10749
  STACKTOP = sp; //@line 10750
  return;
 }
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$i22 = 0, $$024 = 0, $$05$i = 0, $$06$i = 0, $$1 = 0, $10 = 0, $100 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0.0, $114 = 0.0, $116 = 0, $12 = 0, $120 = 0, $127 = 0, $128 = 0, $132 = 0, $14 = 0, $140 = 0, $22 = 0, $24 = 0, $27 = 0, $30 = 0, $38 = 0, $39 = 0, $42 = 0, $43 = 0, $46 = 0, $55 = 0, $6 = 0, $67 = 0, $70 = 0, $74 = 0, $75 = 0, $85 = 0, $9 = 0, $92 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx4 = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17793
 STACKTOP = STACKTOP + 16 | 0; //@line 17794
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17794
 $vararg_buffer1 = sp + 8 | 0; //@line 17795
 $vararg_buffer = sp; //@line 17796
 _printf(12943, $vararg_buffer) | 0; //@line 17797
 _printf(13474, $vararg_buffer1) | 0; //@line 17798
 $AsyncCtx4 = _emscripten_alloc_async_context(20, sp) | 0; //@line 17799
 _putchar(10) | 0; //@line 17800
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 535; //@line 17803
  HEAP32[$AsyncCtx4 + 4 >> 2] = $0; //@line 17805
  HEAP32[$AsyncCtx4 + 8 >> 2] = $vararg_buffer; //@line 17807
  HEAP32[$AsyncCtx4 + 12 >> 2] = $vararg_buffer1; //@line 17809
  HEAP32[$AsyncCtx4 + 16 >> 2] = $1; //@line 17811
  sp = STACKTOP; //@line 17812
  STACKTOP = sp; //@line 17813
  return 0; //@line 17813
 }
 _emscripten_free_async_context($AsyncCtx4 | 0); //@line 17815
 $6 = $0 + 968 | 0; //@line 17816
 if (HEAP32[$6 >> 2] | 0) {
  $$1 = -1e3; //@line 17820
  STACKTOP = sp; //@line 17821
  return $$1 | 0; //@line 17821
 }
 $9 = $0 + 264 | 0; //@line 17823
 __ZN11LoRaMacMlme18reset_confirmationEv($9); //@line 17824
 $10 = HEAP32[$1 >> 2] | 0; //@line 17825
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($9) | 0) >> 2] = $10; //@line 17827
 $12 = $0 + 944 | 0; //@line 17828
 $14 = HEAP8[$12 >> 0] | 8; //@line 17830
 HEAP8[$12 >> 0] = $14; //@line 17831
 switch (HEAP32[$1 >> 2] | 0) {
 case 1:
  {
   $$0 = __ZN14LoRaMacCommand15add_mac_commandEhhh($0 + 4 | 0, 2, 0, 0) | 0; //@line 17837
   label = 32; //@line 17838
   break;
  }
 case 0:
  {
   if (HEAP32[$6 >> 2] & 16 | 0) {
    $$1 = -1e3; //@line 17846
    STACKTOP = sp; //@line 17847
    return $$1 | 0; //@line 17847
   }
   $22 = HEAP32[$1 + 4 >> 2] | 0; //@line 17850
   if (!$22) {
    $$1 = -1003; //@line 17853
    STACKTOP = sp; //@line 17854
    return $$1 | 0; //@line 17854
   }
   $24 = $1 + 8 | 0; //@line 17856
   if (!(HEAP32[$24 >> 2] | 0)) {
    $$1 = -1003; //@line 17860
    STACKTOP = sp; //@line 17861
    return $$1 | 0; //@line 17861
   }
   $27 = $1 + 12 | 0; //@line 17863
   if (!(HEAP32[$27 >> 2] | 0)) {
    $$1 = -1003; //@line 17867
    STACKTOP = sp; //@line 17868
    return $$1 | 0; //@line 17868
   }
   $30 = $1 + 16 | 0; //@line 17870
   if (!(HEAP8[$30 >> 0] | 0)) {
    $$1 = -1003; //@line 17874
    STACKTOP = sp; //@line 17875
    return $$1 | 0; //@line 17875
   }
   HEAP32[$0 + 900 >> 2] = $22; //@line 17878
   HEAP32[$0 + 904 >> 2] = HEAP32[$24 >> 2]; //@line 17881
   HEAP32[$0 + 908 >> 2] = HEAP32[$27 >> 2]; //@line 17884
   $38 = HEAP8[$30 >> 0] | 0; //@line 17885
   $39 = $0 + 896 | 0; //@line 17886
   HEAP8[$39 >> 0] = $38; //@line 17887
   $42 = __ZN7LoRaPHY21verify_nb_join_trialsEh(HEAP32[$0 >> 2] | 0, HEAP8[$30 >> 0] | 0) | 0; //@line 17890
   HEAP8[$39 >> 0] = $42 ? $38 : 12; //@line 17892
   $43 = $0 + 897 | 0; //@line 17893
   HEAP8[$43 >> 0] = 0; //@line 17894
   HEAP8[$0 + 372 >> 0] = 0; //@line 17897
   $46 = $0 + 956 | 0; //@line 17898
   HEAP32[$46 >> 2] = 0; //@line 17899
   HEAP32[$0 + 960 >> 2] = 0; //@line 17901
   HEAP32[$0 + 964 >> 2] = 0; //@line 17903
   HEAP8[$0 + 380 >> 0] = 0; //@line 17905
   HEAP8[$0 + 894 >> 0] = 1; //@line 17907
   HEAP8[$0 + 895 >> 0] = 1; //@line 17909
   HEAP8[$0 + 377 >> 0] = 0; //@line 17911
   HEAP8[$0 + 1152 >> 0] = 0; //@line 17913
   HEAP16[$0 + 1154 >> 1] = 1; //@line 17915
   $55 = $0 + 4 | 0; //@line 17916
   __ZN14LoRaMacCommand20clear_command_bufferEv($55); //@line 17917
   __ZN14LoRaMacCommand19clear_repeat_bufferEv($55); //@line 17918
   __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($55); //@line 17919
   HEAP8[$0 + 371 >> 0] = 1; //@line 17921
   __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$0 >> 2] | 0, $0 + 360 | 0, 0); //@line 17923
   HEAP8[$0 + 373 >> 0] = 0; //@line 17925
   HEAP8[$0 + 374 >> 0] = 0; //@line 17927
   $$05$i = HEAP32[$0 + 1208 >> 2] | 0; //@line 17929
   if ($$05$i | 0) {
    $$06$i = $$05$i; //@line 17932
    do {
     HEAP32[$$06$i + 36 >> 2] = 0; //@line 17935
     $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 17937
    } while (($$06$i | 0) != 0);
   }
   HEAP8[$0 + 378 >> 0] = 0; //@line 17947
   HEAP8[$0 + 379 >> 0] = 0; //@line 17949
   $67 = HEAP32[$0 >> 2] | 0; //@line 17950
   $70 = HEAP32[(HEAP32[$67 >> 2] | 0) + 52 >> 2] | 0; //@line 17953
   $74 = (HEAPU8[$43 >> 0] | 0) + 1 & 255; //@line 17957
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 17958
   $75 = FUNCTION_TABLE_iii[$70 & 31]($67, $74) | 0; //@line 17959
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 536; //@line 17962
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 17964
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 17966
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 17968
    HEAP32[$AsyncCtx + 16 >> 2] = $46; //@line 17970
    HEAP32[$AsyncCtx + 20 >> 2] = $12; //@line 17972
    sp = STACKTOP; //@line 17973
    STACKTOP = sp; //@line 17974
    return 0; //@line 17974
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 17976
   HEAP8[$0 + 1097 >> 0] = $75; //@line 17978
   HEAP8[$vararg_buffer >> 0] = 0; //@line 17979
   HEAP8[$vararg_buffer1 >> 0] = HEAP8[$0 + 1156 >> 0] << 7; //@line 17983
   $AsyncCtx7 = _emscripten_alloc_async_context(24, sp) | 0; //@line 17984
   $85 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($0, $vararg_buffer, $vararg_buffer1, 0, 0, 0) | 0; //@line 17985
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 537; //@line 17988
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 17990
    HEAP32[$AsyncCtx7 + 8 >> 2] = $46; //@line 17992
    HEAP32[$AsyncCtx7 + 12 >> 2] = $vararg_buffer1; //@line 17994
    HEAP32[$AsyncCtx7 + 16 >> 2] = $vararg_buffer; //@line 17996
    HEAP32[$AsyncCtx7 + 20 >> 2] = $12; //@line 17998
    sp = STACKTOP; //@line 17999
    STACKTOP = sp; //@line 18000
    return 0; //@line 18000
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 18002
   do {
    if (!$85) {
     $92 = $0 + 288 | 0; //@line 18006
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($92) | 0) + 11 >> 0] = 0; //@line 18009
     HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($92) | 0) + 10 >> 0] = 0; //@line 18012
     $97 = HEAP32[$46 >> 2] | 0; //@line 18013
     HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($92) | 0) + 16 >> 2] = $97; //@line 18016
     $AsyncCtx27 = _emscripten_alloc_async_context(20, sp) | 0; //@line 18017
     $100 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 18018
     if (___async) {
      HEAP32[$AsyncCtx27 >> 2] = 538; //@line 18021
      HEAP32[$AsyncCtx27 + 4 >> 2] = $vararg_buffer1; //@line 18023
      HEAP32[$AsyncCtx27 + 8 >> 2] = $vararg_buffer; //@line 18025
      HEAP32[$AsyncCtx27 + 12 >> 2] = $12; //@line 18027
      HEAP32[$AsyncCtx27 + 16 >> 2] = $0; //@line 18029
      sp = STACKTOP; //@line 18030
      STACKTOP = sp; //@line 18031
      return 0; //@line 18031
     } else {
      _emscripten_free_async_context($AsyncCtx27 | 0); //@line 18033
      $$0$i22 = $100; //@line 18034
      break;
     }
    } else {
     $$0$i22 = $85; //@line 18038
    }
   } while (0);
   $$0 = $$0$i22; //@line 18041
   label = 32; //@line 18042
   break;
  }
 case 2:
  {
   $106 = HEAP8[$0 + 378 >> 0] | 0; //@line 18047
   $108 = HEAP8[$0 + 1097 >> 0] | 0; //@line 18049
   $110 = HEAP8[$0 + 1096 >> 0] | 0; //@line 18051
   $112 = +HEAPF32[$0 + 1144 >> 2]; //@line 18053
   $114 = +HEAPF32[$0 + 1148 >> 2]; //@line 18055
   $116 = HEAP16[$1 + 4 >> 1] | 0; //@line 18057
   $AsyncCtx23 = _emscripten_alloc_async_context(12, sp) | 0; //@line 18058
   __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft($9, $106, $108, $110, $112, $114, $116); //@line 18059
   if (___async) {
    HEAP32[$AsyncCtx23 >> 2] = 539; //@line 18062
    HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 18064
    HEAP32[$AsyncCtx23 + 8 >> 2] = $6; //@line 18066
    sp = STACKTOP; //@line 18067
    STACKTOP = sp; //@line 18068
    return 0; //@line 18068
   }
   _emscripten_free_async_context($AsyncCtx23 | 0); //@line 18070
   $120 = HEAP32[$0 + 356 >> 2] | 0; //@line 18072
   $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 18074
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($120, $0 + 996 | 0, 1e3); //@line 18075
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 540; //@line 18078
    HEAP32[$AsyncCtx15 + 4 >> 2] = $6; //@line 18080
    sp = STACKTOP; //@line 18081
    STACKTOP = sp; //@line 18082
    return 0; //@line 18082
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 18084
   HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 1; //@line 18087
   $$1 = 0; //@line 18088
   STACKTOP = sp; //@line 18089
   return $$1 | 0; //@line 18089
  }
 case 3:
  {
   $127 = HEAP8[$1 + 12 >> 0] | 0; //@line 18095
   $128 = HEAP16[$1 + 4 >> 1] | 0; //@line 18096
   $AsyncCtx19 = _emscripten_alloc_async_context(12, sp) | 0; //@line 18097
   __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft($9, 0, 0, $127, 0.0, 0.0, $128); //@line 18098
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 541; //@line 18101
    HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 18103
    HEAP32[$AsyncCtx19 + 8 >> 2] = $6; //@line 18105
    sp = STACKTOP; //@line 18106
    STACKTOP = sp; //@line 18107
    return 0; //@line 18107
   }
   _emscripten_free_async_context($AsyncCtx19 | 0); //@line 18109
   $132 = HEAP32[$0 + 356 >> 2] | 0; //@line 18111
   $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 18113
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($132, $0 + 996 | 0, 1e3); //@line 18114
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 542; //@line 18117
    HEAP32[$AsyncCtx11 + 4 >> 2] = $6; //@line 18119
    sp = STACKTOP; //@line 18120
    STACKTOP = sp; //@line 18121
    return 0; //@line 18121
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 18123
   HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 1; //@line 18126
   $$1 = 0; //@line 18127
   STACKTOP = sp; //@line 18128
   return $$1 | 0; //@line 18128
  }
 default:
  {
   $$024 = -1002; //@line 18132
   $140 = $14; //@line 18132
  }
 }
 do {
  if ((label | 0) == 32) {
   if (!$$0) {
    $$1 = 0; //@line 18139
    STACKTOP = sp; //@line 18140
    return $$1 | 0; //@line 18140
   } else {
    $$024 = $$0; //@line 18143
    $140 = HEAP8[$12 >> 0] | 0; //@line 18143
    break;
   }
  }
 } while (0);
 HEAP8[$0 + 373 >> 0] = 0; //@line 18149
 HEAP8[$12 >> 0] = $140 & -9; //@line 18151
 $$1 = $$024; //@line 18152
 STACKTOP = sp; //@line 18153
 return $$1 | 0; //@line 18153
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$080 = 0, $100 = 0, $118 = 0, $12 = 0, $123 = 0, $128 = 0, $133 = 0, $15 = 0, $17 = 0, $19 = 0, $21 = 0, $36 = 0, $4 = 0, $40 = 0, $44 = 0, $55 = 0, $60 = 0, $61 = 0, $70 = 0, $73 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $89 = 0, $94 = 0, $95 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 21925
 L1 : do {
  if (!$1) {
   $$080 = -1003; //@line 21929
  } else {
   $4 = HEAP32[$0 >> 2] | 0; //@line 21931
   if (!$4) {
    $$080 = -1003; //@line 21934
   } else {
    do {
     switch (HEAP32[$1 >> 2] | 0) {
     case 0:
      {
       $8 = HEAP32[$1 + 4 >> 2] | 0; //@line 21941
       HEAP32[$2 >> 2] = $8; //@line 21942
       switch ($8 | 0) {
       case 0:
        {
         $AsyncCtx19 = _emscripten_alloc_async_context(4, sp) | 0; //@line 21945
         __ZN7LoRaPHY18put_radio_to_sleepEv($4); //@line 21946
         if (___async) {
          HEAP32[$AsyncCtx19 >> 2] = 592; //@line 21949
          sp = STACKTOP; //@line 21950
          return 0; //@line 21951
         } else {
          _emscripten_free_async_context($AsyncCtx19 | 0); //@line 21953
          $$080 = 0; //@line 21954
          break L1;
         }
         break;
        }
       case 2:
        {
         break;
        }
       default:
        {
         $$080 = 0; //@line 21963
         break L1;
        }
       }
       HEAP8[$2 + 13 >> 0] = 0; //@line 21968
       $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 21969
       __ZN7LoRaPHY18put_radio_to_sleepEv($4); //@line 21970
       if (___async) {
        HEAP32[$AsyncCtx15 >> 2] = 593; //@line 21973
        HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 21975
        HEAP32[$AsyncCtx15 + 8 >> 2] = $2; //@line 21977
        sp = STACKTOP; //@line 21978
        return 0; //@line 21979
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 21981
       $12 = HEAP32[$0 >> 2] | 0; //@line 21982
       $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] | 0; //@line 21985
       $17 = HEAP8[$2 + 776 >> 0] | 0; //@line 21987
       $19 = HEAP8[$2 + 744 >> 0] | 0; //@line 21989
       $21 = HEAP32[$2 + 740 >> 2] | 0; //@line 21991
       $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 21993
       FUNCTION_TABLE_viiiii[$15 & 7]($12, $17, $19, $21, $2 + 824 | 0); //@line 21994
       if (___async) {
        HEAP32[$AsyncCtx >> 2] = 594; //@line 21997
        sp = STACKTOP; //@line 21998
        return 0; //@line 21999
       } else {
        _emscripten_free_async_context($AsyncCtx | 0); //@line 22001
        $$080 = 0; //@line 22002
        break L1;
       }
       break;
      }
     case 1:
      {
       HEAP8[$2 + 12 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 22011
       $$080 = 0; //@line 22012
       break L1;
       break;
      }
     case 2:
      {
       HEAP8[$2 + 796 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 22020
       $$080 = 0; //@line 22021
       break L1;
       break;
      }
     case 3:
      {
       HEAP32[$2 + 588 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 22029
       $$080 = 0; //@line 22030
       break L1;
       break;
      }
     case 4:
      {
       HEAP32[$2 + 592 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 22038
       $$080 = 0; //@line 22039
       break L1;
       break;
      }
     case 5:
      {
       $36 = HEAP32[$1 + 4 >> 2] | 0; //@line 22045
       if (!$36) {
        $$080 = -1003; //@line 22048
        break L1;
       }
       dest = $2 + 552 | 0; //@line 22052
       src = $36; //@line 22052
       stop = dest + 16 | 0; //@line 22052
       do {
        HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 22052
        dest = dest + 1 | 0; //@line 22052
        src = src + 1 | 0; //@line 22052
       } while ((dest | 0) < (stop | 0));
       $$080 = 0; //@line 22053
       break L1;
       break;
      }
     case 6:
      {
       $40 = HEAP32[$1 + 4 >> 2] | 0; //@line 22059
       if (!$40) {
        $$080 = -1003; //@line 22062
        break L1;
       }
       dest = $2 + 568 | 0; //@line 22066
       src = $40; //@line 22066
       stop = dest + 16 | 0; //@line 22066
       do {
        HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 22066
        dest = dest + 1 | 0; //@line 22066
        src = src + 1 | 0; //@line 22066
       } while ((dest | 0) < (stop | 0));
       $$080 = 0; //@line 22067
       break L1;
       break;
      }
     case 7:
      {
       $44 = HEAP8[$1 + 4 >> 0] | 0; //@line 22073
       HEAP8[$2 + 8 >> 0] = $44; //@line 22076
       $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 22077
       __ZN7LoRaPHY25setup_public_network_modeEb($4, $44 << 24 >> 24 != 0); //@line 22078
       if (___async) {
        HEAP32[$AsyncCtx7 >> 2] = 595; //@line 22081
        sp = STACKTOP; //@line 22082
        return 0; //@line 22083
       } else {
        _emscripten_free_async_context($AsyncCtx7 | 0); //@line 22085
        $$080 = 0; //@line 22086
        break L1;
       }
       break;
      }
     case 8:
      {
       HEAP8[$2 + 9 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 22095
       $$080 = 0; //@line 22096
       break L1;
       break;
      }
     case 10:
      {
       if (!(__ZN7LoRaPHY18verify_rx_datarateEh($4, HEAP8[$1 + 8 >> 0] | 0) | 0)) {
        $$080 = -1003; //@line 22105
        break L1;
       }
       $55 = $1 + 4 | 0; //@line 22110
       $60 = HEAP32[$55 + 4 >> 2] | 0; //@line 22115
       $61 = $2 + 772 | 0; //@line 22116
       HEAP32[$61 >> 2] = HEAP32[$55 >> 2]; //@line 22118
       HEAP32[$61 + 4 >> 2] = $60; //@line 22121
       if ((HEAP32[$2 >> 2] | 0) != 2) {
        $$080 = 0; //@line 22125
        break L1;
       }
       if (!(HEAP8[$2 + 12 >> 0] | 0)) {
        $$080 = 0; //@line 22132
        break L1;
       }
       $70 = HEAP32[$0 >> 2] | 0; //@line 22135
       $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 22136
       __ZN7LoRaPHY18put_radio_to_sleepEv($70); //@line 22137
       if (___async) {
        HEAP32[$AsyncCtx11 >> 2] = 596; //@line 22140
        HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 22142
        HEAP32[$AsyncCtx11 + 8 >> 2] = $2; //@line 22144
        sp = STACKTOP; //@line 22145
        return 0; //@line 22146
       }
       _emscripten_free_async_context($AsyncCtx11 | 0); //@line 22148
       $73 = HEAP32[$0 >> 2] | 0; //@line 22149
       $76 = HEAP32[(HEAP32[$73 >> 2] | 0) + 28 >> 2] | 0; //@line 22152
       $78 = HEAP8[$2 + 776 >> 0] | 0; //@line 22154
       $80 = HEAP8[$2 + 744 >> 0] | 0; //@line 22156
       $82 = HEAP32[$2 + 740 >> 2] | 0; //@line 22158
       $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 22160
       FUNCTION_TABLE_viiiii[$76 & 7]($73, $78, $80, $82, $2 + 824 | 0); //@line 22161
       if (___async) {
        HEAP32[$AsyncCtx3 >> 2] = 597; //@line 22164
        sp = STACKTOP; //@line 22165
        return 0; //@line 22166
       } else {
        _emscripten_free_async_context($AsyncCtx3 | 0); //@line 22168
        $$080 = 0; //@line 22169
        break L1;
       }
       break;
      }
     case 11:
      {
       if (!(__ZN7LoRaPHY18verify_rx_datarateEh($4, HEAP8[$1 + 8 >> 0] | 0) | 0)) {
        $$080 = -1003; //@line 22179
        break L1;
       }
       $89 = $1 + 4 | 0; //@line 22184
       $94 = HEAP32[$89 + 4 >> 2] | 0; //@line 22189
       $95 = $2 + 772 | 0; //@line 22190
       HEAP32[$95 >> 2] = HEAP32[$89 >> 2]; //@line 22192
       HEAP32[$95 + 4 >> 2] = $94; //@line 22195
       $$080 = 0; //@line 22196
       break L1;
       break;
      }
     case 29:
      {
       HEAP32[$2 + 788 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 22204
       $$080 = 0; //@line 22205
       break L1;
       break;
      }
     case 28:
      {
       HEAP8[$2 + 744 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 22213
       $$080 = 0; //@line 22214
       break L1;
       break;
      }
     case 14:
      {
       $100 = HEAP8[$1 + 4 >> 0] | 0; //@line 22220
       if (($100 + -1 & 255) >= 15) {
        $$080 = -1003; //@line 22224
        break L1;
       }
       HEAP8[$2 + 768 >> 0] = $100; //@line 22228
       $$080 = 0; //@line 22229
       break L1;
       break;
      }
     case 15:
      {
       HEAP32[$2 + 748 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 22237
       $$080 = 0; //@line 22238
       break L1;
       break;
      }
     case 16:
      {
       HEAP32[$2 + 752 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 22246
       $$080 = 0; //@line 22247
       break L1;
       break;
      }
     case 17:
      {
       HEAP32[$2 + 756 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 22255
       $$080 = 0; //@line 22256
       break L1;
       break;
      }
     case 18:
      {
       HEAP32[$2 + 760 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 22264
       $$080 = 0; //@line 22265
       break L1;
       break;
      }
     case 19:
      {
       HEAP32[$2 + 764 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 22273
       $$080 = 0; //@line 22274
       break L1;
       break;
      }
     case 20:
      {
       $118 = $1 + 4 | 0; //@line 22279
       if (!(__ZN7LoRaPHY18verify_tx_datarateEhb($4, HEAP8[$118 >> 0] | 0, 1) | 0)) {
        $$080 = -1003; //@line 22283
        break L1;
       }
       HEAP8[$2 + 737 >> 0] = HEAP8[$118 >> 0] | 0; //@line 22288
       $$080 = 0; //@line 22289
       break L1;
       break;
      }
     case 21:
      {
       $123 = $1 + 4 | 0; //@line 22294
       if (!(__ZN7LoRaPHY18verify_tx_datarateEhb($4, HEAP8[$123 >> 0] | 0, 0) | 0)) {
        $$080 = -1003; //@line 22298
        break L1;
       }
       HEAP8[$2 + 737 >> 0] = HEAP8[$123 >> 0] | 0; //@line 22303
       $$080 = 0; //@line 22304
       break L1;
       break;
      }
     case 23:
      {
       $128 = $1 + 4 | 0; //@line 22309
       if (!(__ZN7LoRaPHY15verify_tx_powerEh($4, HEAP8[$128 >> 0] | 0) | 0)) {
        $$080 = -1003; //@line 22313
        break L1;
       }
       HEAP8[$2 + 736 >> 0] = HEAP8[$128 >> 0] | 0; //@line 22318
       $$080 = 0; //@line 22319
       break L1;
       break;
      }
     case 22:
      {
       $133 = $1 + 4 | 0; //@line 22324
       if (!(__ZN7LoRaPHY15verify_tx_powerEh($4, HEAP8[$133 >> 0] | 0) | 0)) {
        $$080 = -1003; //@line 22328
        break L1;
       }
       HEAP8[$2 + 736 >> 0] = HEAP8[$133 >> 0] | 0; //@line 22333
       $$080 = 0; //@line 22334
       break L1;
       break;
      }
     case 24:
      {
       HEAP32[$2 + 596 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 22342
       $$080 = 0; //@line 22343
       break L1;
       break;
      }
     case 25:
      {
       HEAP32[$2 + 600 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 22351
       $$080 = 0; //@line 22352
       break L1;
       break;
      }
     case 27:
      {
       HEAP32[$2 + 740 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 22360
       $$080 = 0; //@line 22361
       break L1;
       break;
      }
     default:
      {
       $$080 = -1002; //@line 22366
       break L1;
      }
     }
    } while (0);
   }
  }
 } while (0);
 return $$080 | 0; //@line 22374
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $37 = 0, $4 = 0, $42 = 0, $43 = 0, $46 = 0, $49 = 0, $53 = 0, $55 = 0, $6 = 0, $60 = 0, $61 = 0, $64 = 0, $67 = 0, $74 = 0, $75 = 0, $79 = 0, $81 = 0, $86 = 0, $87 = 0, $90 = 0, $93 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx42 = 0, $AsyncCtx45 = 0, $AsyncCtx48 = 0, $AsyncCtx52 = 0, $AsyncCtx56 = 0, $AsyncCtx60 = 0, $AsyncCtx63 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP; //@line 5473
 STACKTOP = STACKTOP + 96 | 0; //@line 5474
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 5474
 $vararg_buffer9 = sp + 40 | 0; //@line 5475
 $vararg_buffer7 = sp + 32 | 0; //@line 5476
 $vararg_buffer5 = sp + 24 | 0; //@line 5477
 $vararg_buffer3 = sp + 16 | 0; //@line 5478
 $2 = sp + 80 | 0; //@line 5481
 $3 = sp + 64 | 0; //@line 5482
 $4 = sp + 48 | 0; //@line 5483
 if (!$1) {
  _printf(11863, sp) | 0; //@line 5486
  _printf(12555, sp + 8 | 0) | 0; //@line 5487
  $AsyncCtx39 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5488
  _putchar(10) | 0; //@line 5489
  if (___async) {
   HEAP32[$AsyncCtx39 >> 2] = 181; //@line 5492
   sp = STACKTOP; //@line 5493
   STACKTOP = sp; //@line 5494
   return;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 5496
  $AsyncCtx63 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5497
  _mbed_assert_internal(14489, 11911, 766); //@line 5498
  if (___async) {
   HEAP32[$AsyncCtx63 >> 2] = 182; //@line 5501
   sp = STACKTOP; //@line 5502
   STACKTOP = sp; //@line 5503
   return;
  }
  _emscripten_free_async_context($AsyncCtx63 | 0); //@line 5505
  STACKTOP = sp; //@line 5506
  return;
 }
 _printf(12115, $vararg_buffer3) | 0; //@line 5508
 $6 = $1 + 4 | 0; //@line 5509
 HEAP32[$vararg_buffer5 >> 2] = HEAP32[$6 >> 2]; //@line 5511
 _printf(12590, $vararg_buffer5) | 0; //@line 5512
 $AsyncCtx35 = _emscripten_alloc_async_context(44, sp) | 0; //@line 5513
 _putchar(10) | 0; //@line 5514
 if (___async) {
  HEAP32[$AsyncCtx35 >> 2] = 183; //@line 5517
  HEAP32[$AsyncCtx35 + 4 >> 2] = $2; //@line 5519
  HEAP32[$AsyncCtx35 + 8 >> 2] = $6; //@line 5521
  HEAP32[$AsyncCtx35 + 12 >> 2] = $3; //@line 5523
  HEAP32[$AsyncCtx35 + 16 >> 2] = $0; //@line 5525
  HEAP32[$AsyncCtx35 + 20 >> 2] = $4; //@line 5527
  HEAP32[$AsyncCtx35 + 24 >> 2] = $vararg_buffer7; //@line 5529
  HEAP32[$AsyncCtx35 + 28 >> 2] = $vararg_buffer7; //@line 5531
  HEAP32[$AsyncCtx35 + 32 >> 2] = $vararg_buffer9; //@line 5533
  HEAP32[$AsyncCtx35 + 36 >> 2] = $vararg_buffer9; //@line 5535
  HEAP32[$AsyncCtx35 + 40 >> 2] = $1; //@line 5537
  sp = STACKTOP; //@line 5538
  STACKTOP = sp; //@line 5539
  return;
 }
 _emscripten_free_async_context($AsyncCtx35 | 0); //@line 5541
 if (!(HEAP32[$6 >> 2] | 0)) {
  HEAP32[$0 + 1956 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 5548
  HEAP8[$0 + 1964 >> 0] = 0; //@line 5550
  $74 = $0 + 1892 | 0; //@line 5551
  $75 = HEAP32[$74 >> 2] | 0; //@line 5552
  if (!$75) {
   STACKTOP = sp; //@line 5555
   return;
  }
  $79 = HEAP32[$0 + 2288 >> 2] | 0; //@line 5559
  $81 = HEAP32[$75 + 4 >> 2] | 0; //@line 5561
  $AsyncCtx23 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5562
  FUNCTION_TABLE_vii[$81 & 31]($4, $0 + 1880 | 0); //@line 5563
  if (___async) {
   HEAP32[$AsyncCtx23 >> 2] = 193; //@line 5566
   HEAP32[$AsyncCtx23 + 4 >> 2] = $74; //@line 5568
   HEAP32[$AsyncCtx23 + 8 >> 2] = $4; //@line 5570
   HEAP32[$AsyncCtx23 + 12 >> 2] = $79; //@line 5572
   HEAP32[$AsyncCtx23 + 16 >> 2] = $4; //@line 5574
   sp = STACKTOP; //@line 5575
   STACKTOP = sp; //@line 5576
   return;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 5578
  $86 = $4 + 12 | 0; //@line 5580
  HEAP32[$86 >> 2] = HEAP32[$74 >> 2]; //@line 5581
  $AsyncCtx42 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5582
  $87 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($79, $4, 2) | 0; //@line 5583
  if (___async) {
   HEAP32[$AsyncCtx42 >> 2] = 194; //@line 5586
   HEAP32[$AsyncCtx42 + 4 >> 2] = $86; //@line 5588
   HEAP32[$AsyncCtx42 + 8 >> 2] = $4; //@line 5590
   sp = STACKTOP; //@line 5591
   STACKTOP = sp; //@line 5592
   return;
  }
  _emscripten_free_async_context($AsyncCtx42 | 0); //@line 5594
  $90 = HEAP32[$86 >> 2] | 0; //@line 5595
  do {
   if ($90 | 0) {
    $93 = HEAP32[$90 + 8 >> 2] | 0; //@line 5600
    $AsyncCtx27 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5601
    FUNCTION_TABLE_vi[$93 & 1023]($4); //@line 5602
    if (___async) {
     HEAP32[$AsyncCtx27 >> 2] = 195; //@line 5605
     HEAP32[$AsyncCtx27 + 4 >> 2] = $87; //@line 5607
     sp = STACKTOP; //@line 5608
     STACKTOP = sp; //@line 5609
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx27 | 0); //@line 5611
     break;
    }
   }
  } while (0);
  if ($87 | 0) {
   STACKTOP = sp; //@line 5618
   return;
  }
  $AsyncCtx52 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5620
  _mbed_assert_internal(12827, 11911, 821); //@line 5621
  if (___async) {
   HEAP32[$AsyncCtx52 >> 2] = 196; //@line 5624
   sp = STACKTOP; //@line 5625
   STACKTOP = sp; //@line 5626
   return;
  }
  _emscripten_free_async_context($AsyncCtx52 | 0); //@line 5628
  STACKTOP = sp; //@line 5629
  return;
 }
 HEAP8[$0 + 1964 >> 0] = 0; //@line 5632
 _memset($0 + 1975 | 0, 0, 255) | 0; //@line 5634
 HEAP16[$0 + 2230 >> 1] = 255; //@line 5636
 _printf(11863, $vararg_buffer7) | 0; //@line 5637
 HEAP32[$vararg_buffer9 >> 2] = HEAP32[$6 >> 2]; //@line 5639
 _printf(12622, $vararg_buffer9) | 0; //@line 5640
 $AsyncCtx31 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5641
 _putchar(10) | 0; //@line 5642
 if (___async) {
  HEAP32[$AsyncCtx31 >> 2] = 184; //@line 5645
  HEAP32[$AsyncCtx31 + 4 >> 2] = $2; //@line 5647
  HEAP32[$AsyncCtx31 + 8 >> 2] = $3; //@line 5649
  HEAP32[$AsyncCtx31 + 12 >> 2] = $0; //@line 5651
  HEAP32[$AsyncCtx31 + 16 >> 2] = $6; //@line 5653
  sp = STACKTOP; //@line 5654
  STACKTOP = sp; //@line 5655
  return;
 }
 _emscripten_free_async_context($AsyncCtx31 | 0); //@line 5657
 $30 = $0 + 1880 | 0; //@line 5660
 $31 = $0 + 1892 | 0; //@line 5661
 $32 = HEAP32[$31 >> 2] | 0; //@line 5662
 $33 = ($32 | 0) != 0; //@line 5663
 if ((HEAP32[$6 >> 2] | 0) == 2) {
  if (!$33) {
   STACKTOP = sp; //@line 5666
   return;
  }
  $35 = HEAP32[$0 + 2288 >> 2] | 0; //@line 5669
  $37 = HEAP32[$32 + 4 >> 2] | 0; //@line 5671
  $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 5672
  FUNCTION_TABLE_vii[$37 & 31]($2, $30); //@line 5673
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 185; //@line 5676
   HEAP32[$AsyncCtx + 4 >> 2] = $31; //@line 5678
   HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 5680
   HEAP32[$AsyncCtx + 12 >> 2] = $35; //@line 5682
   HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 5684
   sp = STACKTOP; //@line 5685
   STACKTOP = sp; //@line 5686
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5688
  $42 = $2 + 12 | 0; //@line 5690
  HEAP32[$42 >> 2] = HEAP32[$31 >> 2]; //@line 5691
  $AsyncCtx48 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5692
  $43 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($35, $2, 3) | 0; //@line 5693
  if (___async) {
   HEAP32[$AsyncCtx48 >> 2] = 186; //@line 5696
   HEAP32[$AsyncCtx48 + 4 >> 2] = $42; //@line 5698
   HEAP32[$AsyncCtx48 + 8 >> 2] = $2; //@line 5700
   sp = STACKTOP; //@line 5701
   STACKTOP = sp; //@line 5702
   return;
  }
  _emscripten_free_async_context($AsyncCtx48 | 0); //@line 5704
  $46 = HEAP32[$42 >> 2] | 0; //@line 5705
  do {
   if ($46 | 0) {
    $49 = HEAP32[$46 + 8 >> 2] | 0; //@line 5710
    $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5711
    FUNCTION_TABLE_vi[$49 & 1023]($2); //@line 5712
    if (___async) {
     HEAP32[$AsyncCtx13 >> 2] = 187; //@line 5715
     HEAP32[$AsyncCtx13 + 4 >> 2] = $43; //@line 5717
     sp = STACKTOP; //@line 5718
     STACKTOP = sp; //@line 5719
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx13 | 0); //@line 5721
     break;
    }
   }
  } while (0);
  if ($43 | 0) {
   STACKTOP = sp; //@line 5728
   return;
  }
  $AsyncCtx60 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5730
  _mbed_assert_internal(12827, 11911, 786); //@line 5731
  if (___async) {
   HEAP32[$AsyncCtx60 >> 2] = 188; //@line 5734
   sp = STACKTOP; //@line 5735
   STACKTOP = sp; //@line 5736
   return;
  }
  _emscripten_free_async_context($AsyncCtx60 | 0); //@line 5738
  STACKTOP = sp; //@line 5739
  return;
 } else {
  if (!$33) {
   STACKTOP = sp; //@line 5742
   return;
  }
  $53 = HEAP32[$0 + 2288 >> 2] | 0; //@line 5745
  $55 = HEAP32[$32 + 4 >> 2] | 0; //@line 5747
  $AsyncCtx16 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5748
  FUNCTION_TABLE_vii[$55 & 31]($3, $30); //@line 5749
  if (___async) {
   HEAP32[$AsyncCtx16 >> 2] = 189; //@line 5752
   HEAP32[$AsyncCtx16 + 4 >> 2] = $31; //@line 5754
   HEAP32[$AsyncCtx16 + 8 >> 2] = $3; //@line 5756
   HEAP32[$AsyncCtx16 + 12 >> 2] = $53; //@line 5758
   HEAP32[$AsyncCtx16 + 16 >> 2] = $3; //@line 5760
   sp = STACKTOP; //@line 5761
   STACKTOP = sp; //@line 5762
   return;
  }
  _emscripten_free_async_context($AsyncCtx16 | 0); //@line 5764
  $60 = $3 + 12 | 0; //@line 5766
  HEAP32[$60 >> 2] = HEAP32[$31 >> 2]; //@line 5767
  $AsyncCtx45 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5768
  $61 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($53, $3, 4) | 0; //@line 5769
  if (___async) {
   HEAP32[$AsyncCtx45 >> 2] = 190; //@line 5772
   HEAP32[$AsyncCtx45 + 4 >> 2] = $60; //@line 5774
   HEAP32[$AsyncCtx45 + 8 >> 2] = $3; //@line 5776
   sp = STACKTOP; //@line 5777
   STACKTOP = sp; //@line 5778
   return;
  }
  _emscripten_free_async_context($AsyncCtx45 | 0); //@line 5780
  $64 = HEAP32[$60 >> 2] | 0; //@line 5781
  do {
   if ($64 | 0) {
    $67 = HEAP32[$64 + 8 >> 2] | 0; //@line 5786
    $AsyncCtx20 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5787
    FUNCTION_TABLE_vi[$67 & 1023]($3); //@line 5788
    if (___async) {
     HEAP32[$AsyncCtx20 >> 2] = 191; //@line 5791
     HEAP32[$AsyncCtx20 + 4 >> 2] = $61; //@line 5793
     sp = STACKTOP; //@line 5794
     STACKTOP = sp; //@line 5795
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx20 | 0); //@line 5797
     break;
    }
   }
  } while (0);
  if ($61 | 0) {
   STACKTOP = sp; //@line 5804
   return;
  }
  $AsyncCtx56 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5806
  _mbed_assert_internal(12827, 11911, 797); //@line 5807
  if (___async) {
   HEAP32[$AsyncCtx56 >> 2] = 192; //@line 5810
   sp = STACKTOP; //@line 5811
   STACKTOP = sp; //@line 5812
   return;
  }
  _emscripten_free_async_context($AsyncCtx56 | 0); //@line 5814
  STACKTOP = sp; //@line 5815
  return;
 }
}
function _mbedtls_gcm_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0$i = 0, $108 = 0, $110 = 0, $115 = 0, $120 = 0, $125 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $141 = 0, $143 = 0, $148 = 0, $153 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $164 = 0, $166 = 0, $171 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $182 = 0, $183 = 0, $184 = 0, $187 = 0, $189 = 0, $194 = 0, $198 = 0, $199 = 0, $201 = 0, $205 = 0, $206 = 0, $208 = 0, $212 = 0, $213 = 0, $215 = 0, $219 = 0, $220 = 0, $222 = 0, $226 = 0, $227 = 0, $229 = 0, $233 = 0, $234 = 0, $236 = 0, $240 = 0, $241 = 0, $243 = 0, $247 = 0, $248 = 0, $250 = 0, $257 = 0, $26 = 0, $264 = 0, $271 = 0, $278 = 0, $285 = 0, $292 = 0, $299 = 0, $306 = 0, $313 = 0, $32 = 0, $320 = 0, $327 = 0, $334 = 0, $341 = 0, $348 = 0, $4 = 0, $5 = 0, $54 = 0, $6 = 0, $72 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 4157
 STACKTOP = STACKTOP + 32 | 0; //@line 4158
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4158
 $4 = sp + 8 | 0; //@line 4159
 $5 = sp; //@line 4160
 $6 = _mbedtls_cipher_info_from_values($1, $3, 1) | 0; //@line 4161
 if (!$6) {
  $$0 = -20; //@line 4164
  STACKTOP = sp; //@line 4165
  return $$0 | 0; //@line 4165
 }
 if ((HEAP32[$6 + 24 >> 2] | 0) != 16) {
  $$0 = -20; //@line 4171
  STACKTOP = sp; //@line 4172
  return $$0 | 0; //@line 4172
 }
 $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 4174
 _mbedtls_cipher_free($0); //@line 4175
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 676; //@line 4178
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 4180
  HEAP32[$AsyncCtx11 + 8 >> 2] = $6; //@line 4182
  HEAP32[$AsyncCtx11 + 12 >> 2] = $2; //@line 4184
  HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 4186
  HEAP32[$AsyncCtx11 + 20 >> 2] = $4; //@line 4188
  HEAP32[$AsyncCtx11 + 24 >> 2] = $5; //@line 4190
  HEAP32[$AsyncCtx11 + 28 >> 2] = $0; //@line 4192
  sp = STACKTOP; //@line 4193
  STACKTOP = sp; //@line 4194
  return 0; //@line 4194
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 4196
 $AsyncCtx7 = _emscripten_alloc_async_context(28, sp) | 0; //@line 4197
 $18 = _mbedtls_cipher_setup($0, $6) | 0; //@line 4198
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 677; //@line 4201
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 4203
  HEAP32[$AsyncCtx7 + 8 >> 2] = $2; //@line 4205
  HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 4207
  HEAP32[$AsyncCtx7 + 16 >> 2] = $4; //@line 4209
  HEAP32[$AsyncCtx7 + 20 >> 2] = $5; //@line 4211
  HEAP32[$AsyncCtx7 + 24 >> 2] = $0; //@line 4213
  sp = STACKTOP; //@line 4214
  STACKTOP = sp; //@line 4215
  return 0; //@line 4215
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 4217
 if ($18 | 0) {
  $$0 = $18; //@line 4220
  STACKTOP = sp; //@line 4221
  return $$0 | 0; //@line 4221
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 4223
 $26 = _mbedtls_cipher_setkey($0, $2, $3, 1) | 0; //@line 4224
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 678; //@line 4227
  HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 4229
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 4231
  HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 4233
  HEAP32[$AsyncCtx3 + 16 >> 2] = $0; //@line 4235
  sp = STACKTOP; //@line 4236
  STACKTOP = sp; //@line 4237
  return 0; //@line 4237
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4239
 if ($26 | 0) {
  $$0 = $26; //@line 4242
  STACKTOP = sp; //@line 4243
  return $$0 | 0; //@line 4243
 }
 HEAP32[$5 >> 2] = 0; //@line 4245
 dest = $4; //@line 4246
 stop = dest + 16 | 0; //@line 4246
 do {
  HEAP8[dest >> 0] = 0; //@line 4246
  dest = dest + 1 | 0; //@line 4246
 } while ((dest | 0) < (stop | 0));
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 4247
 $32 = _mbedtls_cipher_update($0, $4, 16, $4, $5) | 0; //@line 4248
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 679; //@line 4251
  HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 4253
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 4255
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 4257
  HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 4259
  sp = STACKTOP; //@line 4260
  STACKTOP = sp; //@line 4261
  return 0; //@line 4261
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4263
 if (!$32) {
  $54 = (HEAPU8[$4 + 1 >> 0] | 0) << 16 | (HEAPU8[$4 >> 0] | 0) << 24 | (HEAPU8[$4 + 2 >> 0] | 0) << 8 | (HEAPU8[$4 + 3 >> 0] | 0); //@line 4282
  $72 = (HEAPU8[$4 + 5 >> 0] | 0) << 16 | (HEAPU8[$4 + 4 >> 0] | 0) << 24 | (HEAPU8[$4 + 6 >> 0] | 0) << 8 | (HEAPU8[$4 + 7 >> 0] | 0); //@line 4300
  $90 = (HEAPU8[$4 + 9 >> 0] | 0) << 16 | (HEAPU8[$4 + 8 >> 0] | 0) << 24 | (HEAPU8[$4 + 10 >> 0] | 0) << 8 | (HEAPU8[$4 + 11 >> 0] | 0); //@line 4318
  $108 = (HEAPU8[$4 + 13 >> 0] | 0) << 16 | (HEAPU8[$4 + 12 >> 0] | 0) << 24 | (HEAPU8[$4 + 14 >> 0] | 0) << 8 | (HEAPU8[$4 + 15 >> 0] | 0); //@line 4336
  $110 = $0 + 136 | 0; //@line 4338
  HEAP32[$110 >> 2] = $108; //@line 4340
  HEAP32[$110 + 4 >> 2] = $90; //@line 4343
  $115 = $0 + 264 | 0; //@line 4345
  HEAP32[$115 >> 2] = $72; //@line 4347
  HEAP32[$115 + 4 >> 2] = $54; //@line 4350
  $120 = $0 + 200 | 0; //@line 4352
  HEAP32[$120 >> 2] = 0; //@line 4354
  HEAP32[$120 + 4 >> 2] = 0; //@line 4357
  $125 = $0 + 72 | 0; //@line 4359
  HEAP32[$125 >> 2] = 0; //@line 4361
  HEAP32[$125 + 4 >> 2] = 0; //@line 4364
  $130 = _i64Subtract(0, 0, $108 & 1 | 0, 0) | 0; //@line 4366
  $132 = _bitshift64Shl($72 | 0, 0, 63) | 0; //@line 4368
  $133 = tempRet0; //@line 4369
  $134 = _bitshift64Lshr($108 | 0, $90 | 0, 1) | 0; //@line 4370
  $136 = $134 | $132; //@line 4372
  $137 = tempRet0 | $133; //@line 4373
  $138 = _bitshift64Lshr($72 | 0, $54 | 0, 1) | 0; //@line 4374
  $139 = tempRet0; //@line 4375
  $141 = $130 & -520093696 ^ $139; //@line 4377
  $143 = $0 + 104 | 0; //@line 4379
  HEAP32[$143 >> 2] = $136; //@line 4381
  HEAP32[$143 + 4 >> 2] = $137; //@line 4384
  $148 = $0 + 232 | 0; //@line 4386
  HEAP32[$148 >> 2] = $138; //@line 4388
  HEAP32[$148 + 4 >> 2] = $141; //@line 4391
  $153 = _i64Subtract(0, 0, $134 & 1 | 0, 0) | 0; //@line 4393
  $155 = _bitshift64Shl($138 | 0, $139 | 0, 63) | 0; //@line 4395
  $156 = tempRet0; //@line 4396
  $157 = _bitshift64Lshr($136 | 0, $137 | 0, 1) | 0; //@line 4397
  $159 = $157 | $155; //@line 4399
  $160 = tempRet0 | $156; //@line 4400
  $161 = _bitshift64Lshr($138 | 0, $141 | 0, 1) | 0; //@line 4401
  $162 = tempRet0; //@line 4402
  $164 = $153 & -520093696 ^ $162; //@line 4404
  $166 = $0 + 88 | 0; //@line 4406
  HEAP32[$166 >> 2] = $159; //@line 4408
  HEAP32[$166 + 4 >> 2] = $160; //@line 4411
  $171 = $0 + 216 | 0; //@line 4413
  HEAP32[$171 >> 2] = $161; //@line 4415
  HEAP32[$171 + 4 >> 2] = $164; //@line 4418
  $176 = _i64Subtract(0, 0, $157 & 1 | 0, 0) | 0; //@line 4420
  $178 = _bitshift64Shl($161 | 0, $162 | 0, 63) | 0; //@line 4422
  $179 = tempRet0; //@line 4423
  $180 = _bitshift64Lshr($159 | 0, $160 | 0, 1) | 0; //@line 4424
  $182 = $178 | $180; //@line 4426
  $183 = $179 | tempRet0; //@line 4427
  $184 = _bitshift64Lshr($161 | 0, $164 | 0, 1) | 0; //@line 4428
  $187 = $176 & -520093696 ^ tempRet0; //@line 4431
  $189 = $0 + 80 | 0; //@line 4433
  HEAP32[$189 >> 2] = $182; //@line 4435
  HEAP32[$189 + 4 >> 2] = $183; //@line 4438
  $194 = $0 + 208 | 0; //@line 4440
  HEAP32[$194 >> 2] = $184; //@line 4442
  HEAP32[$194 + 4 >> 2] = $187; //@line 4445
  $198 = $184 ^ $161; //@line 4446
  $199 = $187 ^ $164; //@line 4447
  $201 = $0 + 224 | 0; //@line 4449
  HEAP32[$201 >> 2] = $198; //@line 4451
  HEAP32[$201 + 4 >> 2] = $199; //@line 4454
  $205 = $182 ^ $159; //@line 4455
  $206 = $183 ^ $160; //@line 4456
  $208 = $0 + 96 | 0; //@line 4458
  HEAP32[$208 >> 2] = $205; //@line 4460
  HEAP32[$208 + 4 >> 2] = $206; //@line 4463
  $212 = $184 ^ $138; //@line 4464
  $213 = $187 ^ $141; //@line 4465
  $215 = $0 + 240 | 0; //@line 4467
  HEAP32[$215 >> 2] = $212; //@line 4469
  HEAP32[$215 + 4 >> 2] = $213; //@line 4472
  $219 = $182 ^ $136; //@line 4473
  $220 = $183 ^ $137; //@line 4474
  $222 = $0 + 112 | 0; //@line 4476
  HEAP32[$222 >> 2] = $219; //@line 4478
  HEAP32[$222 + 4 >> 2] = $220; //@line 4481
  $226 = $161 ^ $138; //@line 4482
  $227 = $164 ^ $141; //@line 4483
  $229 = $0 + 248 | 0; //@line 4485
  HEAP32[$229 >> 2] = $226; //@line 4487
  HEAP32[$229 + 4 >> 2] = $227; //@line 4490
  $233 = $159 ^ $136; //@line 4491
  $234 = $160 ^ $137; //@line 4492
  $236 = $0 + 120 | 0; //@line 4494
  HEAP32[$236 >> 2] = $233; //@line 4496
  HEAP32[$236 + 4 >> 2] = $234; //@line 4499
  $240 = $198 ^ $138; //@line 4500
  $241 = $199 ^ $141; //@line 4501
  $243 = $0 + 256 | 0; //@line 4503
  HEAP32[$243 >> 2] = $240; //@line 4505
  HEAP32[$243 + 4 >> 2] = $241; //@line 4508
  $247 = $205 ^ $136; //@line 4509
  $248 = $206 ^ $137; //@line 4510
  $250 = $0 + 128 | 0; //@line 4512
  HEAP32[$250 >> 2] = $247; //@line 4514
  HEAP32[$250 + 4 >> 2] = $248; //@line 4517
  $257 = $0 + 272 | 0; //@line 4521
  HEAP32[$257 >> 2] = $184 ^ $72; //@line 4523
  HEAP32[$257 + 4 >> 2] = $187 ^ $54; //@line 4526
  $264 = $0 + 144 | 0; //@line 4530
  HEAP32[$264 >> 2] = $182 ^ $108; //@line 4532
  HEAP32[$264 + 4 >> 2] = $183 ^ $90; //@line 4535
  $271 = $0 + 280 | 0; //@line 4539
  HEAP32[$271 >> 2] = $161 ^ $72; //@line 4541
  HEAP32[$271 + 4 >> 2] = $164 ^ $54; //@line 4544
  $278 = $0 + 152 | 0; //@line 4548
  HEAP32[$278 >> 2] = $159 ^ $108; //@line 4550
  HEAP32[$278 + 4 >> 2] = $160 ^ $90; //@line 4553
  $285 = $0 + 288 | 0; //@line 4557
  HEAP32[$285 >> 2] = $198 ^ $72; //@line 4559
  HEAP32[$285 + 4 >> 2] = $199 ^ $54; //@line 4562
  $292 = $0 + 160 | 0; //@line 4566
  HEAP32[$292 >> 2] = $205 ^ $108; //@line 4568
  HEAP32[$292 + 4 >> 2] = $206 ^ $90; //@line 4571
  $299 = $0 + 296 | 0; //@line 4575
  HEAP32[$299 >> 2] = $138 ^ $72; //@line 4577
  HEAP32[$299 + 4 >> 2] = $141 ^ $54; //@line 4580
  $306 = $0 + 168 | 0; //@line 4584
  HEAP32[$306 >> 2] = $136 ^ $108; //@line 4586
  HEAP32[$306 + 4 >> 2] = $137 ^ $90; //@line 4589
  $313 = $0 + 304 | 0; //@line 4593
  HEAP32[$313 >> 2] = $212 ^ $72; //@line 4595
  HEAP32[$313 + 4 >> 2] = $213 ^ $54; //@line 4598
  $320 = $0 + 176 | 0; //@line 4602
  HEAP32[$320 >> 2] = $219 ^ $108; //@line 4604
  HEAP32[$320 + 4 >> 2] = $220 ^ $90; //@line 4607
  $327 = $0 + 312 | 0; //@line 4611
  HEAP32[$327 >> 2] = $226 ^ $72; //@line 4613
  HEAP32[$327 + 4 >> 2] = $227 ^ $54; //@line 4616
  $334 = $0 + 184 | 0; //@line 4620
  HEAP32[$334 >> 2] = $233 ^ $108; //@line 4622
  HEAP32[$334 + 4 >> 2] = $234 ^ $90; //@line 4625
  $341 = $0 + 320 | 0; //@line 4629
  HEAP32[$341 >> 2] = $240 ^ $72; //@line 4631
  HEAP32[$341 + 4 >> 2] = $241 ^ $54; //@line 4634
  $348 = $0 + 192 | 0; //@line 4638
  HEAP32[$348 >> 2] = $247 ^ $108; //@line 4640
  HEAP32[$348 + 4 >> 2] = $248 ^ $90; //@line 4643
  $$0$i = 0; //@line 4644
 } else {
  $$0$i = $32; //@line 4646
 }
 $$0 = $$0$i; //@line 4648
 STACKTOP = sp; //@line 4649
 return $$0 | 0; //@line 4649
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $122 = 0, $13 = 0, $136 = 0, $19 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $61 = 0, $69 = 0, $72 = 0, $73 = 0, $81 = 0, $84 = 0, $87 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15412
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 15418
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 15427
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 15432
      $19 = $1 + 44 | 0; //@line 15433
      if ((HEAP32[$19 >> 2] | 0) == 4) {
       break;
      }
      $25 = $0 + 16 + (HEAP32[$0 + 12 >> 2] << 3) | 0; //@line 15442
      $26 = $1 + 52 | 0; //@line 15443
      $27 = $1 + 53 | 0; //@line 15444
      $28 = $1 + 54 | 0; //@line 15445
      $29 = $0 + 8 | 0; //@line 15446
      $30 = $1 + 24 | 0; //@line 15447
      $$081$off0 = 0; //@line 15448
      $$084 = $0 + 16 | 0; //@line 15448
      $$085$off0 = 0; //@line 15448
      L10 : while (1) {
       if ($$084 >>> 0 >= $25 >>> 0) {
        $$283$off0 = $$081$off0; //@line 15452
        label = 20; //@line 15453
        break;
       }
       HEAP8[$26 >> 0] = 0; //@line 15456
       HEAP8[$27 >> 0] = 0; //@line 15457
       $AsyncCtx15 = _emscripten_alloc_async_context(56, sp) | 0; //@line 15458
       __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084, $1, $2, $2, 1, $4); //@line 15459
       if (___async) {
        label = 12; //@line 15462
        break;
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 15465
       if (HEAP8[$28 >> 0] | 0) {
        $$283$off0 = $$081$off0; //@line 15469
        label = 20; //@line 15470
        break;
       }
       do {
        if (!(HEAP8[$27 >> 0] | 0)) {
         $$182$off0 = $$081$off0; //@line 15477
         $$186$off0 = $$085$off0; //@line 15477
        } else {
         if (!(HEAP8[$26 >> 0] | 0)) {
          if (!(HEAP32[$29 >> 2] & 1)) {
           $$283$off0 = 1; //@line 15486
           label = 20; //@line 15487
           break L10;
          } else {
           $$182$off0 = 1; //@line 15490
           $$186$off0 = $$085$off0; //@line 15490
           break;
          }
         }
         if ((HEAP32[$30 >> 2] | 0) == 1) {
          label = 25; //@line 15497
          break L10;
         }
         if (!(HEAP32[$29 >> 2] & 2)) {
          label = 25; //@line 15504
          break L10;
         } else {
          $$182$off0 = 1; //@line 15507
          $$186$off0 = 1; //@line 15507
         }
        }
       } while (0);
       $$081$off0 = $$182$off0; //@line 15512
       $$084 = $$084 + 8 | 0; //@line 15512
       $$085$off0 = $$186$off0; //@line 15512
      }
      if ((label | 0) == 12) {
       HEAP32[$AsyncCtx15 >> 2] = 763; //@line 15515
       HEAP32[$AsyncCtx15 + 4 >> 2] = $28; //@line 15517
       HEAP32[$AsyncCtx15 + 8 >> 2] = $27; //@line 15519
       HEAP32[$AsyncCtx15 + 12 >> 2] = $26; //@line 15521
       HEAP32[$AsyncCtx15 + 16 >> 2] = $1; //@line 15523
       HEAP32[$AsyncCtx15 + 20 >> 2] = $2; //@line 15525
       HEAP8[$AsyncCtx15 + 24 >> 0] = $4 & 1; //@line 15528
       HEAP32[$AsyncCtx15 + 28 >> 2] = $25; //@line 15530
       HEAP32[$AsyncCtx15 + 32 >> 2] = $29; //@line 15532
       HEAP32[$AsyncCtx15 + 36 >> 2] = $30; //@line 15534
       HEAP32[$AsyncCtx15 + 40 >> 2] = $19; //@line 15536
       HEAP8[$AsyncCtx15 + 44 >> 0] = $$085$off0 & 1; //@line 15539
       HEAP8[$AsyncCtx15 + 45 >> 0] = $$081$off0 & 1; //@line 15542
       HEAP32[$AsyncCtx15 + 48 >> 2] = $$084; //@line 15544
       HEAP32[$AsyncCtx15 + 52 >> 2] = $13; //@line 15546
       sp = STACKTOP; //@line 15547
       return;
      }
      do {
       if ((label | 0) == 20) {
        if (!$$085$off0) {
         HEAP32[$13 >> 2] = $2; //@line 15553
         $61 = $1 + 40 | 0; //@line 15554
         HEAP32[$61 >> 2] = (HEAP32[$61 >> 2] | 0) + 1; //@line 15557
         if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
          if ((HEAP32[$30 >> 2] | 0) == 2) {
           HEAP8[$28 >> 0] = 1; //@line 15565
           if ($$283$off0) {
            label = 25; //@line 15567
            break;
           } else {
            $69 = 4; //@line 15570
            break;
           }
          }
         }
        }
        if ($$283$off0) {
         label = 25; //@line 15577
        } else {
         $69 = 4; //@line 15579
        }
       }
      } while (0);
      if ((label | 0) == 25) {
       $69 = 3; //@line 15584
      }
      HEAP32[$19 >> 2] = $69; //@line 15586
      break;
     }
    }
    if (($3 | 0) != 1) {
     break;
    }
    HEAP32[$1 + 32 >> 2] = 1; //@line 15595
    break;
   }
   $72 = HEAP32[$0 + 12 >> 2] | 0; //@line 15600
   $73 = $0 + 16 + ($72 << 3) | 0; //@line 15601
   $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 15602
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0 + 16 | 0, $1, $2, $3, $4); //@line 15603
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 764; //@line 15606
    HEAP32[$AsyncCtx11 + 4 >> 2] = $1; //@line 15608
    HEAP32[$AsyncCtx11 + 8 >> 2] = $2; //@line 15610
    HEAP32[$AsyncCtx11 + 12 >> 2] = $3; //@line 15612
    HEAP8[$AsyncCtx11 + 16 >> 0] = $4 & 1; //@line 15615
    HEAP32[$AsyncCtx11 + 20 >> 2] = $73; //@line 15617
    HEAP32[$AsyncCtx11 + 24 >> 2] = $0; //@line 15619
    HEAP32[$AsyncCtx11 + 28 >> 2] = $72; //@line 15621
    sp = STACKTOP; //@line 15622
    return;
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 15625
   $81 = $0 + 24 | 0; //@line 15626
   if (($72 | 0) > 1) {
    $84 = HEAP32[$0 + 8 >> 2] | 0; //@line 15630
    if (!($84 & 2)) {
     $87 = $1 + 36 | 0; //@line 15634
     if ((HEAP32[$87 >> 2] | 0) != 1) {
      if (!($84 & 1)) {
       $106 = $1 + 54 | 0; //@line 15641
       $$2 = $81; //@line 15642
       while (1) {
        if (HEAP8[$106 >> 0] | 0) {
         break L1;
        }
        if ((HEAP32[$87 >> 2] | 0) == 1) {
         break L1;
        }
        $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 15654
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2, $1, $2, $3, $4); //@line 15655
        if (___async) {
         break;
        }
        _emscripten_free_async_context($AsyncCtx | 0); //@line 15660
        $136 = $$2 + 8 | 0; //@line 15661
        if ($136 >>> 0 < $73 >>> 0) {
         $$2 = $136; //@line 15664
        } else {
         break L1;
        }
       }
       HEAP32[$AsyncCtx >> 2] = 767; //@line 15669
       HEAP32[$AsyncCtx + 4 >> 2] = $$2; //@line 15671
       HEAP32[$AsyncCtx + 8 >> 2] = $73; //@line 15673
       HEAP32[$AsyncCtx + 12 >> 2] = $106; //@line 15675
       HEAP32[$AsyncCtx + 16 >> 2] = $87; //@line 15677
       HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 15679
       HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 15681
       HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 15683
       HEAP8[$AsyncCtx + 32 >> 0] = $4 & 1; //@line 15686
       sp = STACKTOP; //@line 15687
       return;
      }
      $104 = $1 + 24 | 0; //@line 15690
      $105 = $1 + 54 | 0; //@line 15691
      $$1 = $81; //@line 15692
      while (1) {
       if (HEAP8[$105 >> 0] | 0) {
        break L1;
       }
       if ((HEAP32[$87 >> 2] | 0) == 1) {
        if ((HEAP32[$104 >> 2] | 0) == 1) {
         break L1;
        }
       }
       $AsyncCtx3 = _emscripten_alloc_async_context(40, sp) | 0; //@line 15708
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1, $1, $2, $3, $4); //@line 15709
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15714
       $122 = $$1 + 8 | 0; //@line 15715
       if ($122 >>> 0 < $73 >>> 0) {
        $$1 = $122; //@line 15718
       } else {
        break L1;
       }
      }
      HEAP32[$AsyncCtx3 >> 2] = 766; //@line 15723
      HEAP32[$AsyncCtx3 + 4 >> 2] = $$1; //@line 15725
      HEAP32[$AsyncCtx3 + 8 >> 2] = $73; //@line 15727
      HEAP32[$AsyncCtx3 + 12 >> 2] = $105; //@line 15729
      HEAP32[$AsyncCtx3 + 16 >> 2] = $87; //@line 15731
      HEAP32[$AsyncCtx3 + 20 >> 2] = $104; //@line 15733
      HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 15735
      HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 15737
      HEAP32[$AsyncCtx3 + 32 >> 2] = $3; //@line 15739
      HEAP8[$AsyncCtx3 + 36 >> 0] = $4 & 1; //@line 15742
      sp = STACKTOP; //@line 15743
      return;
     }
    }
    $90 = $1 + 54 | 0; //@line 15747
    $$0 = $81; //@line 15748
    while (1) {
     if (HEAP8[$90 >> 0] | 0) {
      break L1;
     }
     $AsyncCtx7 = _emscripten_alloc_async_context(32, sp) | 0; //@line 15755
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0, $1, $2, $3, $4); //@line 15756
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 15761
     $100 = $$0 + 8 | 0; //@line 15762
     if ($100 >>> 0 < $73 >>> 0) {
      $$0 = $100; //@line 15765
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx7 >> 2] = 765; //@line 15770
    HEAP32[$AsyncCtx7 + 4 >> 2] = $$0; //@line 15772
    HEAP32[$AsyncCtx7 + 8 >> 2] = $73; //@line 15774
    HEAP32[$AsyncCtx7 + 12 >> 2] = $90; //@line 15776
    HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 15778
    HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 15780
    HEAP32[$AsyncCtx7 + 24 >> 2] = $3; //@line 15782
    HEAP8[$AsyncCtx7 + 28 >> 0] = $4 & 1; //@line 15785
    sp = STACKTOP; //@line 15786
    return;
   }
  }
 } while (0);
 return;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0; //@line 7
 $n_sroa_1_4_extract_shift$0 = $a$1; //@line 8
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0; //@line 9
 $d_sroa_0_0_extract_trunc = $b$0; //@line 10
 $d_sroa_1_4_extract_shift$0 = $b$1; //@line 11
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0; //@line 12
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0; //@line 14
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 17
    HEAP32[$rem + 4 >> 2] = 0; //@line 18
   }
   $_0$1 = 0; //@line 20
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 21
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 22
  } else {
   if (!$4) {
    $_0$1 = 0; //@line 25
    $_0$0 = 0; //@line 26
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 27
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 29
   HEAP32[$rem + 4 >> 2] = $a$1 & 0; //@line 30
   $_0$1 = 0; //@line 31
   $_0$0 = 0; //@line 32
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 33
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0; //@line 36
 do {
  if (!$d_sroa_0_0_extract_trunc) {
   if ($17) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 41
     HEAP32[$rem + 4 >> 2] = 0; //@line 42
    }
    $_0$1 = 0; //@line 44
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 45
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 46
   }
   if (!$n_sroa_0_0_extract_trunc) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = 0; //@line 50
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0); //@line 51
    }
    $_0$1 = 0; //@line 53
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0; //@line 54
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 55
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0; //@line 57
   if (!($37 & $d_sroa_1_4_extract_trunc)) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = $a$0 | 0; //@line 60
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0; //@line 61
    }
    $_0$1 = 0; //@line 63
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0); //@line 64
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 65
   }
   $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 68
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0; //@line 70
    $58 = 31 - $51 | 0; //@line 71
    $sr_1_ph = $57; //@line 72
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0); //@line 73
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0); //@line 74
    $q_sroa_0_1_ph = 0; //@line 75
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58; //@line 76
    break;
   }
   if (!$rem) {
    $_0$1 = 0; //@line 80
    $_0$0 = 0; //@line 81
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 82
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 84
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 85
   $_0$1 = 0; //@line 86
   $_0$0 = 0; //@line 87
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 88
  } else {
   if (!$17) {
    $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 92
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0; //@line 94
     $126 = 31 - $119 | 0; //@line 95
     $130 = $119 - 31 >> 31; //@line 96
     $sr_1_ph = $125; //@line 97
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126; //@line 98
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130; //@line 99
     $q_sroa_0_1_ph = 0; //@line 100
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126; //@line 101
     break;
    }
    if (!$rem) {
     $_0$1 = 0; //@line 105
     $_0$0 = 0; //@line 106
     return (tempRet0 = $_0$1, $_0$0) | 0; //@line 107
    }
    HEAP32[$rem >> 2] = $a$0 | 0; //@line 109
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 110
    $_0$1 = 0; //@line 111
    $_0$0 = 0; //@line 112
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 113
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0; //@line 115
   if ($66 & $d_sroa_0_0_extract_trunc | 0) {
    $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 118
    $89 = 64 - $88 | 0; //@line 119
    $91 = 32 - $88 | 0; //@line 120
    $92 = $91 >> 31; //@line 121
    $95 = $88 - 32 | 0; //@line 122
    $105 = $95 >> 31; //@line 123
    $sr_1_ph = $88; //@line 124
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105; //@line 125
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0); //@line 126
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92; //@line 127
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31; //@line 128
    break;
   }
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc; //@line 132
    HEAP32[$rem + 4 >> 2] = 0; //@line 133
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 136
    $_0$0 = $a$0 | 0 | 0; //@line 137
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 138
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0; //@line 140
    $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0; //@line 141
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0; //@line 142
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 143
   }
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph; //@line 148
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph; //@line 149
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph; //@line 150
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph; //@line 151
  $carry_0_lcssa$1 = 0; //@line 152
  $carry_0_lcssa$0 = 0; //@line 153
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0; //@line 155
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0; //@line 156
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0; //@line 157
  $137$1 = tempRet0; //@line 158
  $q_sroa_1_1198 = $q_sroa_1_1_ph; //@line 159
  $q_sroa_0_1199 = $q_sroa_0_1_ph; //@line 160
  $r_sroa_1_1200 = $r_sroa_1_1_ph; //@line 161
  $r_sroa_0_1201 = $r_sroa_0_1_ph; //@line 162
  $sr_1202 = $sr_1_ph; //@line 163
  $carry_0203 = 0; //@line 164
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1; //@line 166
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1; //@line 167
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0; //@line 168
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0; //@line 169
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0; //@line 170
   $150$1 = tempRet0; //@line 171
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1; //@line 172
   $carry_0203 = $151$0 & 1; //@line 173
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0; //@line 175
   $r_sroa_1_1200 = tempRet0; //@line 176
   $sr_1202 = $sr_1202 - 1 | 0; //@line 177
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198; //@line 189
  $q_sroa_0_1_lcssa = $q_sroa_0_1199; //@line 190
  $r_sroa_1_1_lcssa = $r_sroa_1_1200; //@line 191
  $r_sroa_0_1_lcssa = $r_sroa_0_1201; //@line 192
  $carry_0_lcssa$1 = 0; //@line 193
  $carry_0_lcssa$0 = $carry_0203; //@line 194
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa; //@line 196
 $q_sroa_0_0_insert_ext75$1 = 0; //@line 197
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa; //@line 200
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa; //@line 201
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1; //@line 203
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0; //@line 204
 return (tempRet0 = $_0$1, $_0$0) | 0; //@line 205
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $16 = 0, $2 = 0, $26 = 0, $27 = 0, $3 = 0, $31 = 0, $33 = 0, $38 = 0, $39 = 0, $42 = 0, $45 = 0, $51 = 0, $52 = 0, $56 = 0, $58 = 0, $64 = 0, $66 = 0, $68 = 0, $69 = 0, $72 = 0, $75 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx34 = 0, $AsyncCtx37 = 0, $AsyncCtx41 = 0, $AsyncCtx45 = 0, $AsyncCtx49 = 0, $AsyncCtx53 = 0, $AsyncCtx56 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP; //@line 6129
 STACKTOP = STACKTOP + 80 | 0; //@line 6130
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 6130
 $vararg_buffer9 = sp + 40 | 0; //@line 6131
 $vararg_buffer7 = sp + 32 | 0; //@line 6132
 $vararg_buffer5 = sp + 24 | 0; //@line 6133
 $vararg_buffer3 = sp + 16 | 0; //@line 6134
 $2 = sp + 64 | 0; //@line 6137
 $3 = sp + 48 | 0; //@line 6138
 if (!$1) {
  _printf(11863, sp) | 0; //@line 6141
  _printf(11876, sp + 8 | 0) | 0; //@line 6142
  $AsyncCtx31 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6143
  _putchar(10) | 0; //@line 6144
  if (___async) {
   HEAP32[$AsyncCtx31 >> 2] = 208; //@line 6147
   sp = STACKTOP; //@line 6148
   STACKTOP = sp; //@line 6149
   return;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 6151
  $AsyncCtx56 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6152
  _mbed_assert_internal(14489, 11911, 694); //@line 6153
  if (___async) {
   HEAP32[$AsyncCtx56 >> 2] = 209; //@line 6156
   sp = STACKTOP; //@line 6157
   STACKTOP = sp; //@line 6158
   return;
  }
  _emscripten_free_async_context($AsyncCtx56 | 0); //@line 6160
  STACKTOP = sp; //@line 6161
  return;
 }
 switch (HEAP32[$1 >> 2] | 0) {
 case 0:
  {
   $9 = $0 + 1876 | 0; //@line 6169
   if (!(HEAP32[$1 + 4 >> 2] | 0)) {
    HEAP32[$9 >> 2] = 4; //@line 6171
    $AsyncCtx45 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6172
    $10 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 6173
    if (___async) {
     HEAP32[$AsyncCtx45 >> 2] = 210; //@line 6176
     HEAP32[$AsyncCtx45 + 4 >> 2] = $vararg_buffer3; //@line 6178
     HEAP32[$AsyncCtx45 + 8 >> 2] = $vararg_buffer3; //@line 6180
     HEAP32[$AsyncCtx45 + 12 >> 2] = $vararg_buffer5; //@line 6182
     HEAP32[$AsyncCtx45 + 16 >> 2] = $vararg_buffer5; //@line 6184
     sp = STACKTOP; //@line 6185
     STACKTOP = sp; //@line 6186
     return;
    }
    _emscripten_free_async_context($AsyncCtx45 | 0); //@line 6188
    if (!$10) {
     STACKTOP = sp; //@line 6191
     return;
    }
    _printf(11863, $vararg_buffer3) | 0; //@line 6193
    _printf(12009, $vararg_buffer5) | 0; //@line 6194
    $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6195
    _putchar(10) | 0; //@line 6196
    if (___async) {
     HEAP32[$AsyncCtx27 >> 2] = 211; //@line 6199
     sp = STACKTOP; //@line 6200
     STACKTOP = sp; //@line 6201
     return;
    }
    _emscripten_free_async_context($AsyncCtx27 | 0); //@line 6203
    STACKTOP = sp; //@line 6204
    return;
   }
   HEAP32[$9 >> 2] = 6; //@line 6206
   $AsyncCtx41 = _emscripten_alloc_async_context(28, sp) | 0; //@line 6207
   $16 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 6208
   if (___async) {
    HEAP32[$AsyncCtx41 >> 2] = 212; //@line 6211
    HEAP32[$AsyncCtx41 + 4 >> 2] = $0; //@line 6213
    HEAP32[$AsyncCtx41 + 8 >> 2] = $2; //@line 6215
    HEAP32[$AsyncCtx41 + 12 >> 2] = $vararg_buffer7; //@line 6217
    HEAP32[$AsyncCtx41 + 16 >> 2] = $vararg_buffer7; //@line 6219
    HEAP32[$AsyncCtx41 + 20 >> 2] = $vararg_buffer9; //@line 6221
    HEAP32[$AsyncCtx41 + 24 >> 2] = $vararg_buffer9; //@line 6223
    sp = STACKTOP; //@line 6224
    STACKTOP = sp; //@line 6225
    return;
   }
   _emscripten_free_async_context($AsyncCtx41 | 0); //@line 6227
   do {
    if (($16 | 0) != -1018) {
     _printf(11863, $vararg_buffer7) | 0; //@line 6231
     _printf(12061, $vararg_buffer9) | 0; //@line 6232
     $AsyncCtx23 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6233
     _putchar(10) | 0; //@line 6234
     if (___async) {
      HEAP32[$AsyncCtx23 >> 2] = 213; //@line 6237
      HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 6239
      HEAP32[$AsyncCtx23 + 8 >> 2] = $2; //@line 6241
      sp = STACKTOP; //@line 6242
      STACKTOP = sp; //@line 6243
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx23 | 0); //@line 6245
      break;
     }
    }
   } while (0);
   $26 = $0 + 1892 | 0; //@line 6250
   $27 = HEAP32[$26 >> 2] | 0; //@line 6251
   if (!$27) {
    STACKTOP = sp; //@line 6254
    return;
   }
   $31 = HEAP32[$0 + 2288 >> 2] | 0; //@line 6258
   $33 = HEAP32[$27 + 4 >> 2] | 0; //@line 6260
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 6261
   FUNCTION_TABLE_vii[$33 & 31]($2, $0 + 1880 | 0); //@line 6262
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 214; //@line 6265
    HEAP32[$AsyncCtx + 4 >> 2] = $26; //@line 6267
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 6269
    HEAP32[$AsyncCtx + 12 >> 2] = $31; //@line 6271
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 6273
    sp = STACKTOP; //@line 6274
    STACKTOP = sp; //@line 6275
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 6277
   $38 = $2 + 12 | 0; //@line 6279
   HEAP32[$38 >> 2] = HEAP32[$26 >> 2]; //@line 6280
   $AsyncCtx37 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6281
   $39 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($31, $2, 10) | 0; //@line 6282
   if (___async) {
    HEAP32[$AsyncCtx37 >> 2] = 215; //@line 6285
    HEAP32[$AsyncCtx37 + 4 >> 2] = $38; //@line 6287
    HEAP32[$AsyncCtx37 + 8 >> 2] = $2; //@line 6289
    sp = STACKTOP; //@line 6290
    STACKTOP = sp; //@line 6291
    return;
   }
   _emscripten_free_async_context($AsyncCtx37 | 0); //@line 6293
   $42 = HEAP32[$38 >> 2] | 0; //@line 6294
   do {
    if ($42 | 0) {
     $45 = HEAP32[$42 + 8 >> 2] | 0; //@line 6299
     $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6300
     FUNCTION_TABLE_vi[$45 & 1023]($2); //@line 6301
     if (___async) {
      HEAP32[$AsyncCtx12 >> 2] = 216; //@line 6304
      HEAP32[$AsyncCtx12 + 4 >> 2] = $39; //@line 6306
      sp = STACKTOP; //@line 6307
      STACKTOP = sp; //@line 6308
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx12 | 0); //@line 6310
      break;
     }
    }
   } while (0);
   if ($39 | 0) {
    STACKTOP = sp; //@line 6317
    return;
   }
   $AsyncCtx53 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6319
   _mbed_assert_internal(12827, 11911, 715); //@line 6320
   if (___async) {
    HEAP32[$AsyncCtx53 >> 2] = 217; //@line 6323
    sp = STACKTOP; //@line 6324
    STACKTOP = sp; //@line 6325
    return;
   }
   _emscripten_free_async_context($AsyncCtx53 | 0); //@line 6327
   STACKTOP = sp; //@line 6328
   return;
  }
 case 1:
  {
   if (HEAP32[$1 + 4 >> 2] | 0) {
    STACKTOP = sp; //@line 6336
    return;
   }
   $51 = $0 + 1908 | 0; //@line 6338
   $52 = HEAP32[$51 >> 2] | 0; //@line 6339
   if (!$52) {
    STACKTOP = sp; //@line 6342
    return;
   }
   $56 = HEAP32[$0 + 2288 >> 2] | 0; //@line 6346
   $58 = HEAP32[$52 + 4 >> 2] | 0; //@line 6348
   $AsyncCtx15 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6349
   FUNCTION_TABLE_vii[$58 & 31]($3, $0 + 1896 | 0); //@line 6350
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 218; //@line 6353
    HEAP32[$AsyncCtx15 + 4 >> 2] = $51; //@line 6355
    HEAP32[$AsyncCtx15 + 8 >> 2] = $3; //@line 6357
    HEAP32[$AsyncCtx15 + 12 >> 2] = $1; //@line 6359
    HEAP32[$AsyncCtx15 + 16 >> 2] = $56; //@line 6361
    HEAP32[$AsyncCtx15 + 20 >> 2] = $3; //@line 6363
    sp = STACKTOP; //@line 6364
    STACKTOP = sp; //@line 6365
    return;
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 6367
   $64 = $3 + 12 | 0; //@line 6369
   HEAP32[$64 >> 2] = HEAP32[$51 >> 2]; //@line 6370
   $66 = HEAP8[$1 + 12 >> 0] | 0; //@line 6372
   $68 = HEAP8[$1 + 13 >> 0] | 0; //@line 6374
   $AsyncCtx34 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6375
   $69 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($56, $3, $66, $68) | 0; //@line 6376
   if (___async) {
    HEAP32[$AsyncCtx34 >> 2] = 219; //@line 6379
    HEAP32[$AsyncCtx34 + 4 >> 2] = $64; //@line 6381
    HEAP32[$AsyncCtx34 + 8 >> 2] = $3; //@line 6383
    sp = STACKTOP; //@line 6384
    STACKTOP = sp; //@line 6385
    return;
   }
   _emscripten_free_async_context($AsyncCtx34 | 0); //@line 6387
   $72 = HEAP32[$64 >> 2] | 0; //@line 6388
   do {
    if ($72 | 0) {
     $75 = HEAP32[$72 + 8 >> 2] | 0; //@line 6393
     $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6394
     FUNCTION_TABLE_vi[$75 & 1023]($3); //@line 6395
     if (___async) {
      HEAP32[$AsyncCtx19 >> 2] = 220; //@line 6398
      HEAP32[$AsyncCtx19 + 4 >> 2] = $69; //@line 6400
      sp = STACKTOP; //@line 6401
      STACKTOP = sp; //@line 6402
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx19 | 0); //@line 6404
      break;
     }
    }
   } while (0);
   if ($69 | 0) {
    STACKTOP = sp; //@line 6411
    return;
   }
   $AsyncCtx49 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6413
   _mbed_assert_internal(12827, 11911, 737); //@line 6414
   if (___async) {
    HEAP32[$AsyncCtx49 >> 2] = 221; //@line 6417
    sp = STACKTOP; //@line 6418
    STACKTOP = sp; //@line 6419
    return;
   }
   _emscripten_free_async_context($AsyncCtx49 | 0); //@line 6421
   STACKTOP = sp; //@line 6422
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 6426
   return;
  }
 }
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = $15 | 0;
 $16 = $16 | 0;
 $17 = $17 | 0;
 $18 = $18 | 0;
 var $106 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $47 = 0, $49 = 0, $62 = 0, $64 = 0, $77 = 0, $79 = 0, $92 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 3423
 HEAP32[$0 >> 2] = 560; //@line 3424
 $19 = $0 + 4 | 0; //@line 3425
 HEAP32[$19 >> 2] = 0; //@line 3426
 HEAP32[$19 + 4 >> 2] = 0; //@line 3426
 HEAP32[$19 + 8 >> 2] = 0; //@line 3426
 HEAP32[$19 + 12 >> 2] = 0; //@line 3426
 HEAP32[$19 + 16 >> 2] = 0; //@line 3426
 HEAP32[$19 + 20 >> 2] = 0; //@line 3426
 _gpio_init_out_ex($19, $4, 1); //@line 3427
 $20 = $0 + 28 | 0; //@line 3428
 HEAP32[$20 >> 2] = 0; //@line 3429
 HEAP32[$20 + 4 >> 2] = 0; //@line 3429
 HEAP32[$20 + 8 >> 2] = 0; //@line 3429
 HEAP32[$20 + 12 >> 2] = 0; //@line 3429
 HEAP32[$20 + 16 >> 2] = 0; //@line 3429
 HEAP32[$20 + 20 >> 2] = 0; //@line 3429
 _gpio_init_in($20, $5); //@line 3430
 __ZN4mbed11InterruptInC2E7PinName($0 + 52 | 0, $6); //@line 3432
 __ZN4mbed11InterruptInC2E7PinName($0 + 124 | 0, $7); //@line 3434
 __ZN4mbed11InterruptInC2E7PinName($0 + 196 | 0, $8); //@line 3436
 __ZN4mbed11InterruptInC2E7PinName($0 + 268 | 0, $9); //@line 3438
 __ZN4mbed11InterruptInC2E7PinName($0 + 340 | 0, $10); //@line 3440
 __ZN4mbed11InterruptInC2E7PinName($0 + 412 | 0, $11); //@line 3442
 $27 = $0 + 484 | 0; //@line 3443
 HEAP32[$27 >> 2] = 0; //@line 3444
 HEAP32[$27 + 4 >> 2] = 0; //@line 3444
 HEAP32[$27 + 8 >> 2] = 0; //@line 3444
 HEAP32[$27 + 12 >> 2] = 0; //@line 3444
 HEAP32[$27 + 16 >> 2] = 0; //@line 3444
 HEAP32[$27 + 20 >> 2] = 0; //@line 3444
 _gpio_init_out_ex($27, $12, 0); //@line 3445
 $28 = $0 + 508 | 0; //@line 3446
 HEAP32[$28 >> 2] = 0; //@line 3447
 HEAP32[$28 + 4 >> 2] = 0; //@line 3447
 HEAP32[$28 + 8 >> 2] = 0; //@line 3447
 HEAP32[$28 + 12 >> 2] = 0; //@line 3447
 HEAP32[$28 + 16 >> 2] = 0; //@line 3447
 HEAP32[$28 + 20 >> 2] = 0; //@line 3447
 _gpio_init_out_ex($28, $13, 0); //@line 3448
 $29 = $0 + 532 | 0; //@line 3449
 HEAP32[$29 >> 2] = 0; //@line 3450
 HEAP32[$29 + 4 >> 2] = 0; //@line 3450
 HEAP32[$29 + 8 >> 2] = 0; //@line 3450
 HEAP32[$29 + 12 >> 2] = 0; //@line 3450
 HEAP32[$29 + 16 >> 2] = 0; //@line 3450
 HEAP32[$29 + 20 >> 2] = 0; //@line 3450
 _gpio_init_out_ex($29, $14, 0); //@line 3451
 $30 = $0 + 556 | 0; //@line 3452
 HEAP32[$30 >> 2] = 0; //@line 3453
 HEAP32[$30 + 4 >> 2] = 0; //@line 3453
 HEAP32[$30 + 8 >> 2] = 0; //@line 3453
 HEAP32[$30 + 12 >> 2] = 0; //@line 3453
 HEAP32[$30 + 16 >> 2] = 0; //@line 3453
 HEAP32[$30 + 20 >> 2] = 0; //@line 3453
 _gpio_init_out_ex($30, $15, 0); //@line 3454
 $31 = $0 + 580 | 0; //@line 3455
 HEAP32[$31 >> 2] = 0; //@line 3456
 HEAP32[$31 + 4 >> 2] = 0; //@line 3456
 HEAP32[$31 + 8 >> 2] = 0; //@line 3456
 HEAP32[$31 + 12 >> 2] = 0; //@line 3456
 HEAP32[$31 + 16 >> 2] = 0; //@line 3456
 HEAP32[$31 + 20 >> 2] = 0; //@line 3456
 _gpio_init_inout($31, $16, 0, 0, 0); //@line 3457
 $32 = $0 + 604 | 0; //@line 3458
 HEAP32[$32 >> 2] = 0; //@line 3459
 HEAP32[$32 + 4 >> 2] = 0; //@line 3459
 HEAP32[$32 + 8 >> 2] = 0; //@line 3459
 HEAP32[$32 + 12 >> 2] = 0; //@line 3459
 HEAP32[$32 + 16 >> 2] = 0; //@line 3459
 HEAP32[$32 + 20 >> 2] = 0; //@line 3459
 _gpio_init_out($32, $17); //@line 3460
 $33 = $0 + 628 | 0; //@line 3461
 HEAP32[$33 >> 2] = 0; //@line 3462
 HEAP32[$33 + 4 >> 2] = 0; //@line 3462
 HEAP32[$33 + 8 >> 2] = 0; //@line 3462
 HEAP32[$33 + 12 >> 2] = 0; //@line 3462
 HEAP32[$33 + 16 >> 2] = 0; //@line 3462
 HEAP32[$33 + 20 >> 2] = 0; //@line 3462
 _gpio_init_out($33, $18); //@line 3463
 $34 = $0 + 1048 | 0; //@line 3464
 $AsyncCtx11 = _emscripten_alloc_async_context(52, sp) | 0; //@line 3465
 __ZN4mbed10TimerEventC2Ev($34); //@line 3466
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 145; //@line 3469
  HEAP32[$AsyncCtx11 + 4 >> 2] = $34; //@line 3471
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 3473
  HEAP32[$AsyncCtx11 + 12 >> 2] = $16; //@line 3475
  HEAP32[$AsyncCtx11 + 16 >> 2] = $17; //@line 3477
  HEAP32[$AsyncCtx11 + 20 >> 2] = $12; //@line 3479
  HEAP32[$AsyncCtx11 + 24 >> 2] = $13; //@line 3481
  HEAP32[$AsyncCtx11 + 28 >> 2] = $15; //@line 3483
  HEAP32[$AsyncCtx11 + 32 >> 2] = $14; //@line 3485
  HEAP32[$AsyncCtx11 + 36 >> 2] = $18; //@line 3487
  HEAP32[$AsyncCtx11 + 40 >> 2] = $10; //@line 3489
  HEAP32[$AsyncCtx11 + 44 >> 2] = $11; //@line 3491
  HEAP32[$AsyncCtx11 + 48 >> 2] = $33; //@line 3493
  sp = STACKTOP; //@line 3494
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 3497
 $47 = $0 + 1088 | 0; //@line 3498
 HEAP32[$47 >> 2] = 0; //@line 3499
 HEAP32[$47 + 4 >> 2] = 0; //@line 3499
 HEAP32[$47 + 8 >> 2] = 0; //@line 3499
 HEAP32[$47 + 12 >> 2] = 0; //@line 3499
 HEAP8[$0 + 1104 >> 0] = 1; //@line 3501
 HEAP32[$34 >> 2] = 684; //@line 3502
 $49 = $0 + 1112 | 0; //@line 3503
 $AsyncCtx7 = _emscripten_alloc_async_context(52, sp) | 0; //@line 3504
 __ZN4mbed10TimerEventC2Ev($49); //@line 3505
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 146; //@line 3508
  HEAP32[$AsyncCtx7 + 4 >> 2] = $49; //@line 3510
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 3512
  HEAP32[$AsyncCtx7 + 12 >> 2] = $16; //@line 3514
  HEAP32[$AsyncCtx7 + 16 >> 2] = $17; //@line 3516
  HEAP32[$AsyncCtx7 + 20 >> 2] = $12; //@line 3518
  HEAP32[$AsyncCtx7 + 24 >> 2] = $13; //@line 3520
  HEAP32[$AsyncCtx7 + 28 >> 2] = $15; //@line 3522
  HEAP32[$AsyncCtx7 + 32 >> 2] = $14; //@line 3524
  HEAP32[$AsyncCtx7 + 36 >> 2] = $18; //@line 3526
  HEAP32[$AsyncCtx7 + 40 >> 2] = $10; //@line 3528
  HEAP32[$AsyncCtx7 + 44 >> 2] = $11; //@line 3530
  HEAP32[$AsyncCtx7 + 48 >> 2] = $33; //@line 3532
  sp = STACKTOP; //@line 3533
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 3536
 $62 = $0 + 1152 | 0; //@line 3537
 HEAP32[$62 >> 2] = 0; //@line 3538
 HEAP32[$62 + 4 >> 2] = 0; //@line 3538
 HEAP32[$62 + 8 >> 2] = 0; //@line 3538
 HEAP32[$62 + 12 >> 2] = 0; //@line 3538
 HEAP8[$0 + 1168 >> 0] = 1; //@line 3540
 HEAP32[$49 >> 2] = 684; //@line 3541
 $64 = $0 + 1176 | 0; //@line 3542
 $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 3543
 __ZN4mbed10TimerEventC2Ev($64); //@line 3544
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 147; //@line 3547
  HEAP32[$AsyncCtx3 + 4 >> 2] = $64; //@line 3549
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 3551
  HEAP32[$AsyncCtx3 + 12 >> 2] = $16; //@line 3553
  HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 3555
  HEAP32[$AsyncCtx3 + 20 >> 2] = $12; //@line 3557
  HEAP32[$AsyncCtx3 + 24 >> 2] = $13; //@line 3559
  HEAP32[$AsyncCtx3 + 28 >> 2] = $15; //@line 3561
  HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 3563
  HEAP32[$AsyncCtx3 + 36 >> 2] = $18; //@line 3565
  HEAP32[$AsyncCtx3 + 40 >> 2] = $10; //@line 3567
  HEAP32[$AsyncCtx3 + 44 >> 2] = $11; //@line 3569
  HEAP32[$AsyncCtx3 + 48 >> 2] = $33; //@line 3571
  sp = STACKTOP; //@line 3572
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3575
 $77 = $0 + 1216 | 0; //@line 3576
 HEAP32[$77 >> 2] = 0; //@line 3577
 HEAP32[$77 + 4 >> 2] = 0; //@line 3577
 HEAP32[$77 + 8 >> 2] = 0; //@line 3577
 HEAP32[$77 + 12 >> 2] = 0; //@line 3577
 HEAP8[$0 + 1232 >> 0] = 1; //@line 3579
 HEAP32[$64 >> 2] = 684; //@line 3580
 $79 = $0 + 1240 | 0; //@line 3581
 $AsyncCtx = _emscripten_alloc_async_context(52, sp) | 0; //@line 3582
 __ZN4mbed10TimerEventC2Ev($79); //@line 3583
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 148; //@line 3586
  HEAP32[$AsyncCtx + 4 >> 2] = $79; //@line 3588
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 3590
  HEAP32[$AsyncCtx + 12 >> 2] = $16; //@line 3592
  HEAP32[$AsyncCtx + 16 >> 2] = $17; //@line 3594
  HEAP32[$AsyncCtx + 20 >> 2] = $12; //@line 3596
  HEAP32[$AsyncCtx + 24 >> 2] = $13; //@line 3598
  HEAP32[$AsyncCtx + 28 >> 2] = $15; //@line 3600
  HEAP32[$AsyncCtx + 32 >> 2] = $14; //@line 3602
  HEAP32[$AsyncCtx + 36 >> 2] = $18; //@line 3604
  HEAP32[$AsyncCtx + 40 >> 2] = $10; //@line 3606
  HEAP32[$AsyncCtx + 44 >> 2] = $11; //@line 3608
  HEAP32[$AsyncCtx + 48 >> 2] = $33; //@line 3610
  sp = STACKTOP; //@line 3611
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3614
 $92 = $0 + 1280 | 0; //@line 3615
 HEAP32[$92 >> 2] = 0; //@line 3616
 HEAP32[$92 + 4 >> 2] = 0; //@line 3616
 HEAP32[$92 + 8 >> 2] = 0; //@line 3616
 HEAP32[$92 + 12 >> 2] = 0; //@line 3616
 HEAP8[$0 + 1296 >> 0] = 1; //@line 3618
 HEAP32[$79 >> 2] = 684; //@line 3619
 HEAP32[$0 + 668 >> 2] = $16; //@line 3621
 HEAP32[$0 + 672 >> 2] = $17; //@line 3623
 HEAP32[$0 + 652 >> 2] = $12; //@line 3625
 HEAP32[$0 + 656 >> 2] = $13; //@line 3627
 HEAP32[$0 + 664 >> 2] = $15; //@line 3629
 HEAP32[$0 + 660 >> 2] = $14; //@line 3631
 HEAP32[$0 + 676 >> 2] = $18; //@line 3633
 HEAP32[$0 + 680 >> 2] = $10; //@line 3635
 HEAP32[$0 + 684 >> 2] = $11; //@line 3637
 HEAP32[$0 + 784 >> 2] = 0; //@line 3639
 if (($18 | 0) == -1) {
  $106 = _emscripten_asm_const_ii(4, $0 | 0) | 0; //@line 3642
  return;
 }
 _emscripten_asm_const_iii(3, HEAP32[$33 >> 2] | 0, 1) | 0; //@line 3646
 $106 = _emscripten_asm_const_ii(4, $0 | 0) | 0; //@line 3647
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_147($0) {
 $0 = $0 | 0;
 var $$3$off0204 = 0, $$expand_i1_val = 0, $10 = 0, $100 = 0, $103 = 0, $105 = 0, $106 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $26 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $61 = 0, $62 = 0, $76 = 0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $90 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28931
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 28934
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28936
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28938
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28940
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28942
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28944
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28946
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28948
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28950
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28952
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 28954
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 28958
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 28962
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 28964
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 28966
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 28968
 $38 = HEAP8[$0 + 76 >> 0] | 0; //@line 28970
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($20) | 0) {
   _printf(12943, $22) | 0; //@line 28977
   _printf(13090, $26) | 0; //@line 28978
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(64) | 0; //@line 28979
   _putchar(10) | 0; //@line 28980
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 388; //@line 28983
    $44 = $ReallocAsyncCtx3 + 4 | 0; //@line 28984
    $$expand_i1_val = $2 & 1; //@line 28985
    HEAP8[$44 >> 0] = $$expand_i1_val; //@line 28986
    $45 = $ReallocAsyncCtx3 + 8 | 0; //@line 28987
    HEAP32[$45 >> 2] = $4; //@line 28988
    $46 = $ReallocAsyncCtx3 + 12 | 0; //@line 28989
    HEAP32[$46 >> 2] = $6; //@line 28990
    $47 = $ReallocAsyncCtx3 + 16 | 0; //@line 28991
    HEAP32[$47 >> 2] = $8; //@line 28992
    $48 = $ReallocAsyncCtx3 + 20 | 0; //@line 28993
    HEAP32[$48 >> 2] = $10; //@line 28994
    $49 = $ReallocAsyncCtx3 + 24 | 0; //@line 28995
    HEAP32[$49 >> 2] = $12; //@line 28996
    $50 = $ReallocAsyncCtx3 + 28 | 0; //@line 28997
    HEAP32[$50 >> 2] = $14; //@line 28998
    $51 = $ReallocAsyncCtx3 + 32 | 0; //@line 28999
    HEAP32[$51 >> 2] = $16; //@line 29000
    $52 = $ReallocAsyncCtx3 + 36 | 0; //@line 29001
    HEAP32[$52 >> 2] = $18; //@line 29002
    $53 = $ReallocAsyncCtx3 + 40 | 0; //@line 29003
    HEAP32[$53 >> 2] = $30; //@line 29004
    $54 = $ReallocAsyncCtx3 + 44 | 0; //@line 29005
    HEAP32[$54 >> 2] = $32; //@line 29006
    $55 = $ReallocAsyncCtx3 + 48 | 0; //@line 29007
    HEAP32[$55 >> 2] = $34; //@line 29008
    $56 = $ReallocAsyncCtx3 + 52 | 0; //@line 29009
    HEAP32[$56 >> 2] = $36; //@line 29010
    $57 = $ReallocAsyncCtx3 + 56 | 0; //@line 29011
    HEAP32[$57 >> 2] = $20; //@line 29012
    $58 = $ReallocAsyncCtx3 + 60 | 0; //@line 29013
    HEAP8[$58 >> 0] = $38; //@line 29014
    sp = STACKTOP; //@line 29015
    return;
   }
   ___async_unwind = 0; //@line 29018
   HEAP32[$ReallocAsyncCtx3 >> 2] = 388; //@line 29019
   $44 = $ReallocAsyncCtx3 + 4 | 0; //@line 29020
   $$expand_i1_val = $2 & 1; //@line 29021
   HEAP8[$44 >> 0] = $$expand_i1_val; //@line 29022
   $45 = $ReallocAsyncCtx3 + 8 | 0; //@line 29023
   HEAP32[$45 >> 2] = $4; //@line 29024
   $46 = $ReallocAsyncCtx3 + 12 | 0; //@line 29025
   HEAP32[$46 >> 2] = $6; //@line 29026
   $47 = $ReallocAsyncCtx3 + 16 | 0; //@line 29027
   HEAP32[$47 >> 2] = $8; //@line 29028
   $48 = $ReallocAsyncCtx3 + 20 | 0; //@line 29029
   HEAP32[$48 >> 2] = $10; //@line 29030
   $49 = $ReallocAsyncCtx3 + 24 | 0; //@line 29031
   HEAP32[$49 >> 2] = $12; //@line 29032
   $50 = $ReallocAsyncCtx3 + 28 | 0; //@line 29033
   HEAP32[$50 >> 2] = $14; //@line 29034
   $51 = $ReallocAsyncCtx3 + 32 | 0; //@line 29035
   HEAP32[$51 >> 2] = $16; //@line 29036
   $52 = $ReallocAsyncCtx3 + 36 | 0; //@line 29037
   HEAP32[$52 >> 2] = $18; //@line 29038
   $53 = $ReallocAsyncCtx3 + 40 | 0; //@line 29039
   HEAP32[$53 >> 2] = $30; //@line 29040
   $54 = $ReallocAsyncCtx3 + 44 | 0; //@line 29041
   HEAP32[$54 >> 2] = $32; //@line 29042
   $55 = $ReallocAsyncCtx3 + 48 | 0; //@line 29043
   HEAP32[$55 >> 2] = $34; //@line 29044
   $56 = $ReallocAsyncCtx3 + 52 | 0; //@line 29045
   HEAP32[$56 >> 2] = $36; //@line 29046
   $57 = $ReallocAsyncCtx3 + 56 | 0; //@line 29047
   HEAP32[$57 >> 2] = $20; //@line 29048
   $58 = $ReallocAsyncCtx3 + 60 | 0; //@line 29049
   HEAP8[$58 >> 0] = $38; //@line 29050
   sp = STACKTOP; //@line 29051
   return;
  }
 } else {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($4) | 0) + 4 >> 2] = 1; //@line 29057
 }
 $61 = $10 & 255; //@line 29061
 $62 = $12 + 638 | 0; //@line 29062
 if (__Z15decrypt_payloadPKhtS0_jhjPh($6 + $8 | 0, $61, $14, $16, 1, $18, $62) | 0) {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($4) | 0) + 4 >> 2] = 13; //@line 29068
 }
 if ($2) {
  $$3$off0204 = 6; //@line 29071
 } else {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($4) | 0) + 12 >> 2] = $62; //@line 29075
  HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($4) | 0) + 16 >> 1] = $61; //@line 29078
  HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($4) | 0) + 18 >> 0] = 1; //@line 29081
  $76 = (__ZN11LoRaMacMcps16get_confirmationEv($4) | 0) + 10 | 0; //@line 29085
  if ($38 & 32) {
   HEAP8[$76 >> 0] = 1; //@line 29087
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($4) | 0) + 28 >> 0] = 1; //@line 29090
   $79 = HEAP32[$34 >> 2] | 0; //@line 29091
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(20) | 0; //@line 29093
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($79, $12 + 1076 | 0); //@line 29094
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 391; //@line 29097
    $81 = $ReallocAsyncCtx23 + 4 | 0; //@line 29098
    HEAP32[$81 >> 2] = $12; //@line 29099
    $82 = $ReallocAsyncCtx23 + 8 | 0; //@line 29100
    HEAP32[$82 >> 2] = $34; //@line 29101
    $83 = $ReallocAsyncCtx23 + 12 | 0; //@line 29102
    HEAP32[$83 >> 2] = $30; //@line 29103
    $84 = $ReallocAsyncCtx23 + 16 | 0; //@line 29104
    HEAP32[$84 >> 2] = $32; //@line 29105
    sp = STACKTOP; //@line 29106
    return;
   }
   ___async_unwind = 0; //@line 29109
   HEAP32[$ReallocAsyncCtx23 >> 2] = 391; //@line 29110
   $81 = $ReallocAsyncCtx23 + 4 | 0; //@line 29111
   HEAP32[$81 >> 2] = $12; //@line 29112
   $82 = $ReallocAsyncCtx23 + 8 | 0; //@line 29113
   HEAP32[$82 >> 2] = $34; //@line 29114
   $83 = $ReallocAsyncCtx23 + 12 | 0; //@line 29115
   HEAP32[$83 >> 2] = $30; //@line 29116
   $84 = $ReallocAsyncCtx23 + 16 | 0; //@line 29117
   HEAP32[$84 >> 2] = $32; //@line 29118
   sp = STACKTOP; //@line 29119
   return;
  }
  HEAP8[$76 >> 0] = 0; //@line 29122
  if ((HEAPU8[$12 + 895 >> 0] | 0) > (HEAPU8[$12 + 894 >> 0] | 0)) {
   $90 = HEAP32[$34 >> 2] | 0; //@line 29129
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(20) | 0; //@line 29131
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($90, $12 + 1076 | 0); //@line 29132
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 392; //@line 29135
    $92 = $ReallocAsyncCtx22 + 4 | 0; //@line 29136
    HEAP32[$92 >> 2] = $12; //@line 29137
    $93 = $ReallocAsyncCtx22 + 8 | 0; //@line 29138
    HEAP32[$93 >> 2] = $34; //@line 29139
    $94 = $ReallocAsyncCtx22 + 12 | 0; //@line 29140
    HEAP32[$94 >> 2] = $30; //@line 29141
    $95 = $ReallocAsyncCtx22 + 16 | 0; //@line 29142
    HEAP32[$95 >> 2] = $32; //@line 29143
    sp = STACKTOP; //@line 29144
    return;
   }
   ___async_unwind = 0; //@line 29147
   HEAP32[$ReallocAsyncCtx22 >> 2] = 392; //@line 29148
   $92 = $ReallocAsyncCtx22 + 4 | 0; //@line 29149
   HEAP32[$92 >> 2] = $12; //@line 29150
   $93 = $ReallocAsyncCtx22 + 8 | 0; //@line 29151
   HEAP32[$93 >> 2] = $34; //@line 29152
   $94 = $ReallocAsyncCtx22 + 12 | 0; //@line 29153
   HEAP32[$94 >> 2] = $30; //@line 29154
   $95 = $ReallocAsyncCtx22 + 16 | 0; //@line 29155
   HEAP32[$95 >> 2] = $32; //@line 29156
   sp = STACKTOP; //@line 29157
   return;
  } else {
   $$3$off0204 = 2; //@line 29160
  }
 }
 $96 = $12 + 944 | 0; //@line 29163
 HEAP8[$96 >> 0] = $$3$off0204 | HEAP8[$96 >> 0] & -7; //@line 29167
 $100 = $12 + 944 | 0; //@line 29168
 HEAP8[$100 >> 0] = HEAP8[$100 >> 0] | 32; //@line 29171
 $103 = HEAP32[$34 >> 2] | 0; //@line 29172
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 29174
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($103, $12 + 996 | 0, 1); //@line 29175
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 395; //@line 29178
  $105 = $ReallocAsyncCtx17 + 4 | 0; //@line 29179
  HEAP32[$105 >> 2] = $30; //@line 29180
  $106 = $ReallocAsyncCtx17 + 8 | 0; //@line 29181
  HEAP32[$106 >> 2] = $32; //@line 29182
  sp = STACKTOP; //@line 29183
  return;
 }
 ___async_unwind = 0; //@line 29186
 HEAP32[$ReallocAsyncCtx17 >> 2] = 395; //@line 29187
 $105 = $ReallocAsyncCtx17 + 4 | 0; //@line 29188
 HEAP32[$105 >> 2] = $30; //@line 29189
 $106 = $ReallocAsyncCtx17 + 8 | 0; //@line 29190
 HEAP32[$106 >> 2] = $32; //@line 29191
 sp = STACKTOP; //@line 29192
 return;
}
function _mbedtls_aes_crypt_cbc($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$04056 = 0, $$04255 = 0, $$044 = 0, $$04554 = 0, $$14160 = 0, $$14160$us = 0, $$14359 = 0, $$14359$us = 0, $$14658 = 0, $$14658$us = 0, $10 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $127 = 0, $13 = 0, $131 = 0, $135 = 0, $139 = 0, $14 = 0, $143 = 0, $147 = 0, $15 = 0, $151 = 0, $155 = 0, $159 = 0, $16 = 0, $163 = 0, $167 = 0, $17 = 0, $171 = 0, $175 = 0, $179 = 0, $18 = 0, $183 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $6 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 1485
 STACKTOP = STACKTOP + 16 | 0; //@line 1486
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1486
 $6 = sp; //@line 1487
 if ($2 & 15 | 0) {
  $$044 = -34; //@line 1491
  STACKTOP = sp; //@line 1492
  return $$044 | 0; //@line 1492
 }
 $10 = ($2 | 0) == 0; //@line 1495
 if (!$1) {
  if ($10) {
   $$044 = 0; //@line 1498
   STACKTOP = sp; //@line 1499
   return $$044 | 0; //@line 1499
  }
  $109 = $3 + 1 | 0; //@line 1501
  $110 = $3 + 2 | 0; //@line 1502
  $111 = $3 + 3 | 0; //@line 1503
  $112 = $3 + 4 | 0; //@line 1504
  $113 = $3 + 5 | 0; //@line 1505
  $114 = $3 + 6 | 0; //@line 1506
  $115 = $3 + 7 | 0; //@line 1507
  $116 = $3 + 8 | 0; //@line 1508
  $117 = $3 + 9 | 0; //@line 1509
  $118 = $3 + 10 | 0; //@line 1510
  $119 = $3 + 11 | 0; //@line 1511
  $120 = $3 + 12 | 0; //@line 1512
  $121 = $3 + 13 | 0; //@line 1513
  $122 = $3 + 14 | 0; //@line 1514
  $123 = $3 + 15 | 0; //@line 1515
  $$04056 = $5; //@line 1516
  $$04255 = $4; //@line 1516
  $$04554 = $2; //@line 1516
  while (1) {
   dest = $6; //@line 1518
   src = $$04255; //@line 1518
   stop = dest + 16 | 0; //@line 1518
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1518
    dest = dest + 1 | 0; //@line 1518
    src = src + 1 | 0; //@line 1518
   } while ((dest | 0) < (stop | 0));
   _mbedtls_internal_aes_decrypt($0, $$04255, $$04056) | 0; //@line 1519
   HEAP8[$$04056 >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$04056 >> 0]; //@line 1523
   $127 = $$04056 + 1 | 0; //@line 1524
   HEAP8[$127 >> 0] = HEAP8[$109 >> 0] ^ HEAP8[$127 >> 0]; //@line 1528
   $131 = $$04056 + 2 | 0; //@line 1529
   HEAP8[$131 >> 0] = HEAP8[$110 >> 0] ^ HEAP8[$131 >> 0]; //@line 1533
   $135 = $$04056 + 3 | 0; //@line 1534
   HEAP8[$135 >> 0] = HEAP8[$111 >> 0] ^ HEAP8[$135 >> 0]; //@line 1538
   $139 = $$04056 + 4 | 0; //@line 1539
   HEAP8[$139 >> 0] = HEAP8[$112 >> 0] ^ HEAP8[$139 >> 0]; //@line 1543
   $143 = $$04056 + 5 | 0; //@line 1544
   HEAP8[$143 >> 0] = HEAP8[$113 >> 0] ^ HEAP8[$143 >> 0]; //@line 1548
   $147 = $$04056 + 6 | 0; //@line 1549
   HEAP8[$147 >> 0] = HEAP8[$114 >> 0] ^ HEAP8[$147 >> 0]; //@line 1553
   $151 = $$04056 + 7 | 0; //@line 1554
   HEAP8[$151 >> 0] = HEAP8[$115 >> 0] ^ HEAP8[$151 >> 0]; //@line 1558
   $155 = $$04056 + 8 | 0; //@line 1559
   HEAP8[$155 >> 0] = HEAP8[$116 >> 0] ^ HEAP8[$155 >> 0]; //@line 1563
   $159 = $$04056 + 9 | 0; //@line 1564
   HEAP8[$159 >> 0] = HEAP8[$117 >> 0] ^ HEAP8[$159 >> 0]; //@line 1568
   $163 = $$04056 + 10 | 0; //@line 1569
   HEAP8[$163 >> 0] = HEAP8[$118 >> 0] ^ HEAP8[$163 >> 0]; //@line 1573
   $167 = $$04056 + 11 | 0; //@line 1574
   HEAP8[$167 >> 0] = HEAP8[$119 >> 0] ^ HEAP8[$167 >> 0]; //@line 1578
   $171 = $$04056 + 12 | 0; //@line 1579
   HEAP8[$171 >> 0] = HEAP8[$120 >> 0] ^ HEAP8[$171 >> 0]; //@line 1583
   $175 = $$04056 + 13 | 0; //@line 1584
   HEAP8[$175 >> 0] = HEAP8[$121 >> 0] ^ HEAP8[$175 >> 0]; //@line 1588
   $179 = $$04056 + 14 | 0; //@line 1589
   HEAP8[$179 >> 0] = HEAP8[$122 >> 0] ^ HEAP8[$179 >> 0]; //@line 1593
   $183 = $$04056 + 15 | 0; //@line 1594
   HEAP8[$183 >> 0] = HEAP8[$123 >> 0] ^ HEAP8[$183 >> 0]; //@line 1598
   dest = $3; //@line 1599
   src = $6; //@line 1599
   stop = dest + 16 | 0; //@line 1599
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1599
    dest = dest + 1 | 0; //@line 1599
    src = src + 1 | 0; //@line 1599
   } while ((dest | 0) < (stop | 0));
   $$04554 = $$04554 + -16 | 0; //@line 1602
   if (!$$04554) {
    $$044 = 0; //@line 1605
    break;
   } else {
    $$04056 = $$04056 + 16 | 0; //@line 1608
    $$04255 = $$04255 + 16 | 0; //@line 1608
   }
  }
  STACKTOP = sp; //@line 1611
  return $$044 | 0; //@line 1611
 }
 if ($10) {
  $$044 = 0; //@line 1614
  STACKTOP = sp; //@line 1615
  return $$044 | 0; //@line 1615
 }
 $12 = $3 + 1 | 0; //@line 1618
 $13 = $3 + 2 | 0; //@line 1619
 $14 = $3 + 3 | 0; //@line 1620
 $15 = $3 + 4 | 0; //@line 1621
 $16 = $3 + 5 | 0; //@line 1622
 $17 = $3 + 6 | 0; //@line 1623
 $18 = $3 + 7 | 0; //@line 1624
 $19 = $3 + 8 | 0; //@line 1625
 $20 = $3 + 9 | 0; //@line 1626
 $21 = $3 + 10 | 0; //@line 1627
 $22 = $3 + 11 | 0; //@line 1628
 $23 = $3 + 12 | 0; //@line 1629
 $24 = $3 + 13 | 0; //@line 1630
 $25 = $3 + 14 | 0; //@line 1631
 $26 = $3 + 15 | 0; //@line 1632
 if (($1 | 0) == 1) {
  $$14160$us = $5; //@line 1634
  $$14359$us = $4; //@line 1634
  $$14658$us = $2; //@line 1634
  while (1) {
   HEAP8[$$14160$us >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$14359$us >> 0]; //@line 1639
   HEAP8[$$14160$us + 1 >> 0] = HEAP8[$12 >> 0] ^ HEAP8[$$14359$us + 1 >> 0]; //@line 1645
   HEAP8[$$14160$us + 2 >> 0] = HEAP8[$13 >> 0] ^ HEAP8[$$14359$us + 2 >> 0]; //@line 1651
   HEAP8[$$14160$us + 3 >> 0] = HEAP8[$14 >> 0] ^ HEAP8[$$14359$us + 3 >> 0]; //@line 1657
   HEAP8[$$14160$us + 4 >> 0] = HEAP8[$15 >> 0] ^ HEAP8[$$14359$us + 4 >> 0]; //@line 1663
   HEAP8[$$14160$us + 5 >> 0] = HEAP8[$16 >> 0] ^ HEAP8[$$14359$us + 5 >> 0]; //@line 1669
   HEAP8[$$14160$us + 6 >> 0] = HEAP8[$17 >> 0] ^ HEAP8[$$14359$us + 6 >> 0]; //@line 1675
   HEAP8[$$14160$us + 7 >> 0] = HEAP8[$18 >> 0] ^ HEAP8[$$14359$us + 7 >> 0]; //@line 1681
   HEAP8[$$14160$us + 8 >> 0] = HEAP8[$19 >> 0] ^ HEAP8[$$14359$us + 8 >> 0]; //@line 1687
   HEAP8[$$14160$us + 9 >> 0] = HEAP8[$20 >> 0] ^ HEAP8[$$14359$us + 9 >> 0]; //@line 1693
   HEAP8[$$14160$us + 10 >> 0] = HEAP8[$21 >> 0] ^ HEAP8[$$14359$us + 10 >> 0]; //@line 1699
   HEAP8[$$14160$us + 11 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$$14359$us + 11 >> 0]; //@line 1705
   HEAP8[$$14160$us + 12 >> 0] = HEAP8[$23 >> 0] ^ HEAP8[$$14359$us + 12 >> 0]; //@line 1711
   HEAP8[$$14160$us + 13 >> 0] = HEAP8[$24 >> 0] ^ HEAP8[$$14359$us + 13 >> 0]; //@line 1717
   HEAP8[$$14160$us + 14 >> 0] = HEAP8[$25 >> 0] ^ HEAP8[$$14359$us + 14 >> 0]; //@line 1723
   HEAP8[$$14160$us + 15 >> 0] = HEAP8[$26 >> 0] ^ HEAP8[$$14359$us + 15 >> 0]; //@line 1729
   _mbedtls_internal_aes_encrypt($0, $$14160$us, $$14160$us) | 0; //@line 1730
   dest = $3; //@line 1731
   src = $$14160$us; //@line 1731
   stop = dest + 16 | 0; //@line 1731
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1731
    dest = dest + 1 | 0; //@line 1731
    src = src + 1 | 0; //@line 1731
   } while ((dest | 0) < (stop | 0));
   $$14658$us = $$14658$us + -16 | 0; //@line 1734
   if (!$$14658$us) {
    $$044 = 0; //@line 1737
    break;
   } else {
    $$14160$us = $$14160$us + 16 | 0; //@line 1740
    $$14359$us = $$14359$us + 16 | 0; //@line 1740
   }
  }
  STACKTOP = sp; //@line 1743
  return $$044 | 0; //@line 1743
 } else {
  $$14160 = $5; //@line 1745
  $$14359 = $4; //@line 1745
  $$14658 = $2; //@line 1745
  while (1) {
   HEAP8[$$14160 >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$14359 >> 0]; //@line 1750
   HEAP8[$$14160 + 1 >> 0] = HEAP8[$12 >> 0] ^ HEAP8[$$14359 + 1 >> 0]; //@line 1756
   HEAP8[$$14160 + 2 >> 0] = HEAP8[$13 >> 0] ^ HEAP8[$$14359 + 2 >> 0]; //@line 1762
   HEAP8[$$14160 + 3 >> 0] = HEAP8[$14 >> 0] ^ HEAP8[$$14359 + 3 >> 0]; //@line 1768
   HEAP8[$$14160 + 4 >> 0] = HEAP8[$15 >> 0] ^ HEAP8[$$14359 + 4 >> 0]; //@line 1774
   HEAP8[$$14160 + 5 >> 0] = HEAP8[$16 >> 0] ^ HEAP8[$$14359 + 5 >> 0]; //@line 1780
   HEAP8[$$14160 + 6 >> 0] = HEAP8[$17 >> 0] ^ HEAP8[$$14359 + 6 >> 0]; //@line 1786
   HEAP8[$$14160 + 7 >> 0] = HEAP8[$18 >> 0] ^ HEAP8[$$14359 + 7 >> 0]; //@line 1792
   HEAP8[$$14160 + 8 >> 0] = HEAP8[$19 >> 0] ^ HEAP8[$$14359 + 8 >> 0]; //@line 1798
   HEAP8[$$14160 + 9 >> 0] = HEAP8[$20 >> 0] ^ HEAP8[$$14359 + 9 >> 0]; //@line 1804
   HEAP8[$$14160 + 10 >> 0] = HEAP8[$21 >> 0] ^ HEAP8[$$14359 + 10 >> 0]; //@line 1810
   HEAP8[$$14160 + 11 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$$14359 + 11 >> 0]; //@line 1816
   HEAP8[$$14160 + 12 >> 0] = HEAP8[$23 >> 0] ^ HEAP8[$$14359 + 12 >> 0]; //@line 1822
   HEAP8[$$14160 + 13 >> 0] = HEAP8[$24 >> 0] ^ HEAP8[$$14359 + 13 >> 0]; //@line 1828
   HEAP8[$$14160 + 14 >> 0] = HEAP8[$25 >> 0] ^ HEAP8[$$14359 + 14 >> 0]; //@line 1834
   HEAP8[$$14160 + 15 >> 0] = HEAP8[$26 >> 0] ^ HEAP8[$$14359 + 15 >> 0]; //@line 1840
   _mbedtls_internal_aes_decrypt($0, $$14160, $$14160) | 0; //@line 1841
   dest = $3; //@line 1842
   src = $$14160; //@line 1842
   stop = dest + 16 | 0; //@line 1842
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1842
    dest = dest + 1 | 0; //@line 1842
    src = src + 1 | 0; //@line 1842
   } while ((dest | 0) < (stop | 0));
   $$14658 = $$14658 + -16 | 0; //@line 1845
   if (!$$14658) {
    $$044 = 0; //@line 1848
    break;
   } else {
    $$14160 = $$14160 + 16 | 0; //@line 1851
    $$14359 = $$14359 + 16 | 0; //@line 1851
   }
  }
  STACKTOP = sp; //@line 1854
  return $$044 | 0; //@line 1854
 }
 return 0; //@line 1856
}
function _initialize($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$037 = 0, $1 = 0, $101 = 0, $102 = 0, $103 = 0, $105 = 0, $106 = 0, $109 = 0, $115 = 0, $116 = 0, $117 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $130 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $140 = 0, $142 = 0, $148 = 0, $149 = 0, $150 = 0, $159 = 0, $160 = 0, $161 = 0, $163 = 0, $167 = 0, $173 = 0, $174 = 0, $175 = 0, $177 = 0, $18 = 0, $25 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $45 = 0, $46 = 0, $52 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $70 = 0, $73 = 0, $77 = 0, $78 = 0, $85 = 0, $86 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5119
 $1 = $0 + 4 | 0; //@line 5120
 if (HEAP8[(HEAP32[$1 >> 2] | 0) + 56 >> 0] | 0) {
  return;
 }
 $7 = HEAP32[HEAP32[$0 >> 2] >> 2] | 0; //@line 5129
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5130
 FUNCTION_TABLE_v[$7 & 7](); //@line 5131
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 683; //@line 5134
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 5136
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 5138
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 5140
  sp = STACKTOP; //@line 5141
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5144
 $13 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 5147
 $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5148
 $14 = FUNCTION_TABLE_i[$13 & 7]() | 0; //@line 5149
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 684; //@line 5152
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 5154
  HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 5156
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 5158
  sp = STACKTOP; //@line 5159
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 5162
 $18 = HEAP32[$14 >> 2] | 0; //@line 5163
 do {
  if (!$18) {
   $AsyncCtx20 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5167
   _mbed_assert_internal(14489, 14491, 41); //@line 5168
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 685; //@line 5171
    HEAP32[$AsyncCtx20 + 4 >> 2] = $1; //@line 5173
    HEAP32[$AsyncCtx20 + 8 >> 2] = $0; //@line 5175
    HEAP32[$AsyncCtx20 + 12 >> 2] = $14; //@line 5177
    HEAP32[$AsyncCtx20 + 16 >> 2] = $0; //@line 5179
    sp = STACKTOP; //@line 5180
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 5183
    $$0 = 1e6; //@line 5184
    break;
   }
  } else {
   $$0 = $18; //@line 5188
  }
 } while (0);
 $25 = HEAP32[$14 + 4 >> 2] | 0; //@line 5192
 do {
  if (($25 + -4 | 0) >>> 0 > 28) {
   $AsyncCtx16 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5197
   _mbed_assert_internal(14489, 14491, 47); //@line 5198
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 686; //@line 5201
    HEAP32[$AsyncCtx16 + 4 >> 2] = $$0; //@line 5203
    HEAP32[$AsyncCtx16 + 8 >> 2] = $1; //@line 5205
    HEAP32[$AsyncCtx16 + 12 >> 2] = $0; //@line 5207
    HEAP32[$AsyncCtx16 + 16 >> 2] = $0; //@line 5209
    sp = STACKTOP; //@line 5210
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx16 | 0); //@line 5213
    $$037 = 32; //@line 5214
    break;
   }
  } else {
   $$037 = $25; //@line 5218
  }
 } while (0);
 $32 = 7 << $$037 + -4; //@line 5222
 $33 = ___muldi3($32 | 0, 0, 1e6, 0) | 0; //@line 5223
 $34 = tempRet0; //@line 5224
 $35 = _i64Add($$0 | 0, 0, -1, -1) | 0; //@line 5225
 $37 = _i64Add($35 | 0, tempRet0 | 0, $33 | 0, $34 | 0) | 0; //@line 5227
 $39 = ___udivdi3($37 | 0, tempRet0 | 0, $$0 | 0, 0) | 0; //@line 5229
 $40 = tempRet0; //@line 5230
 $41 = HEAP32[$1 >> 2] | 0; //@line 5231
 HEAP32[$41 >> 2] = 0; //@line 5232
 HEAP32[$41 + 4 >> 2] = 0; //@line 5234
 $45 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5237
 $AsyncCtx6 = _emscripten_alloc_async_context(40, sp) | 0; //@line 5238
 $46 = FUNCTION_TABLE_i[$45 & 7]() | 0; //@line 5239
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 687; //@line 5242
  HEAP32[$AsyncCtx6 + 4 >> 2] = $1; //@line 5244
  HEAP32[$AsyncCtx6 + 8 >> 2] = $$0; //@line 5246
  HEAP32[$AsyncCtx6 + 12 >> 2] = $$037; //@line 5248
  HEAP32[$AsyncCtx6 + 16 >> 2] = $32; //@line 5250
  $52 = $AsyncCtx6 + 24 | 0; //@line 5252
  HEAP32[$52 >> 2] = $39; //@line 5254
  HEAP32[$52 + 4 >> 2] = $40; //@line 5257
  HEAP32[$AsyncCtx6 + 32 >> 2] = $0; //@line 5259
  HEAP32[$AsyncCtx6 + 36 >> 2] = $0; //@line 5261
  sp = STACKTOP; //@line 5262
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 5265
 $58 = HEAP32[$1 >> 2] | 0; //@line 5266
 $59 = $58 + 32 | 0; //@line 5267
 HEAP32[$59 >> 2] = $46; //@line 5268
 $60 = $58 + 40 | 0; //@line 5269
 $61 = $60; //@line 5270
 HEAP32[$61 >> 2] = 0; //@line 5272
 HEAP32[$61 + 4 >> 2] = 0; //@line 5275
 $65 = $58 + 8 | 0; //@line 5276
 HEAP32[$65 >> 2] = $$0; //@line 5277
 $66 = _bitshift64Shl(1, 0, $$037 | 0) | 0; //@line 5278
 $68 = _i64Add($66 | 0, tempRet0 | 0, -1, 0) | 0; //@line 5280
 $70 = $58 + 12 | 0; //@line 5282
 HEAP32[$70 >> 2] = $68; //@line 5283
 HEAP32[$58 + 16 >> 2] = $32; //@line 5285
 $73 = $58 + 24 | 0; //@line 5287
 HEAP32[$73 >> 2] = $39; //@line 5289
 HEAP32[$73 + 4 >> 2] = $40; //@line 5292
 $77 = $58 + 48 | 0; //@line 5293
 $78 = $77; //@line 5294
 HEAP32[$78 >> 2] = 0; //@line 5296
 HEAP32[$78 + 4 >> 2] = 0; //@line 5299
 HEAP8[$58 + 56 >> 0] = 1; //@line 5301
 $85 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5304
 $AsyncCtx9 = _emscripten_alloc_async_context(32, sp) | 0; //@line 5305
 $86 = FUNCTION_TABLE_i[$85 & 7]() | 0; //@line 5306
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 688; //@line 5309
  HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 5311
  HEAP32[$AsyncCtx9 + 8 >> 2] = $0; //@line 5313
  HEAP32[$AsyncCtx9 + 12 >> 2] = $59; //@line 5315
  HEAP32[$AsyncCtx9 + 16 >> 2] = $70; //@line 5317
  HEAP32[$AsyncCtx9 + 20 >> 2] = $65; //@line 5319
  HEAP32[$AsyncCtx9 + 24 >> 2] = $60; //@line 5321
  HEAP32[$AsyncCtx9 + 28 >> 2] = $77; //@line 5323
  sp = STACKTOP; //@line 5324
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 5327
 if (($86 | 0) != (HEAP32[(HEAP32[$1 >> 2] | 0) + 32 >> 2] | 0)) {
  $101 = $86 - (HEAP32[$59 >> 2] | 0) & HEAP32[$70 >> 2]; //@line 5336
  HEAP32[$59 >> 2] = $86; //@line 5337
  $102 = HEAP32[$65 >> 2] | 0; //@line 5338
  L30 : do {
   if (($102 | 0) < 1e6) {
    switch ($102 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 22; //@line 5347
      break L30;
     }
    }
    $103 = ___muldi3($101 | 0, 0, 1e6, 0) | 0; //@line 5351
    $105 = _bitshift64Lshr($103 | 0, tempRet0 | 0, 15) | 0; //@line 5353
    $106 = tempRet0; //@line 5354
    $109 = $60; //@line 5357
    $115 = _i64Add(HEAP32[$109 >> 2] | 0, HEAP32[$109 + 4 >> 2] | 0, $101 * 1e6 & 32704 | 0, 0) | 0; //@line 5363
    $116 = tempRet0; //@line 5364
    $117 = $60; //@line 5365
    HEAP32[$117 >> 2] = $115; //@line 5367
    HEAP32[$117 + 4 >> 2] = $116; //@line 5370
    if ($116 >>> 0 < 0 | ($116 | 0) == 0 & $115 >>> 0 < 32768) {
     $173 = $105; //@line 5377
     $174 = $106; //@line 5377
    } else {
     $126 = _i64Add($105 | 0, $106 | 0, 1, 0) | 0; //@line 5379
     $127 = tempRet0; //@line 5380
     $128 = _i64Add($115 | 0, $116 | 0, -32768, -1) | 0; //@line 5381
     $130 = $60; //@line 5383
     HEAP32[$130 >> 2] = $128; //@line 5385
     HEAP32[$130 + 4 >> 2] = tempRet0; //@line 5388
     $173 = $126; //@line 5389
     $174 = $127; //@line 5389
    }
   } else {
    switch ($102 | 0) {
    case 1e6:
     {
      $173 = $101; //@line 5394
      $174 = 0; //@line 5394
      break;
     }
    default:
     {
      label = 22; //@line 5398
     }
    }
   }
  } while (0);
  if ((label | 0) == 22) {
   $134 = ___muldi3($101 | 0, 0, 1e6, 0) | 0; //@line 5404
   $135 = tempRet0; //@line 5405
   $136 = ___udivdi3($134 | 0, $135 | 0, $102 | 0, 0) | 0; //@line 5406
   $137 = tempRet0; //@line 5407
   $138 = ___muldi3($136 | 0, $137 | 0, $102 | 0, 0) | 0; //@line 5408
   $140 = _i64Subtract($134 | 0, $135 | 0, $138 | 0, tempRet0 | 0) | 0; //@line 5410
   $142 = $60; //@line 5412
   $148 = _i64Add($140 | 0, tempRet0 | 0, HEAP32[$142 >> 2] | 0, HEAP32[$142 + 4 >> 2] | 0) | 0; //@line 5418
   $149 = tempRet0; //@line 5419
   $150 = $60; //@line 5420
   HEAP32[$150 >> 2] = $148; //@line 5422
   HEAP32[$150 + 4 >> 2] = $149; //@line 5425
   if ($149 >>> 0 < 0 | ($149 | 0) == 0 & $148 >>> 0 < $102 >>> 0) {
    $173 = $136; //@line 5432
    $174 = $137; //@line 5432
   } else {
    $159 = _i64Add($136 | 0, $137 | 0, 1, 0) | 0; //@line 5434
    $160 = tempRet0; //@line 5435
    $161 = _i64Subtract($148 | 0, $149 | 0, $102 | 0, 0) | 0; //@line 5436
    $163 = $60; //@line 5438
    HEAP32[$163 >> 2] = $161; //@line 5440
    HEAP32[$163 + 4 >> 2] = tempRet0; //@line 5443
    $173 = $159; //@line 5444
    $174 = $160; //@line 5444
   }
  }
  $167 = $77; //@line 5447
  $175 = _i64Add(HEAP32[$167 >> 2] | 0, HEAP32[$167 + 4 >> 2] | 0, $173 | 0, $174 | 0) | 0; //@line 5453
  $177 = $77; //@line 5455
  HEAP32[$177 >> 2] = $175; //@line 5457
  HEAP32[$177 + 4 >> 2] = tempRet0; //@line 5460
 }
 $AsyncCtx12 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5462
 _schedule_interrupt($0); //@line 5463
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 689; //@line 5466
  sp = STACKTOP; //@line 5467
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 5470
 return;
}
function __ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$026$$026$i = 0, $$026$i = 0, $$028$i = 0, $$028$i4751 = 0, $$028$lcssa = 0, $$02862 = 0, $$029$be = 0, $$029$lcssa = 0, $$02961 = 0, $$1 = 0, $$127$i53 = 0, $$130$$$$i = 0, $$2$i = 0, $$2$i54 = 0, $$256 = 0, $$3 = 0, $$3$i52 = 0, $$lcssa76 = 0, $$lcssa77 = 0, $$pre = 0, $$sroa$034$0$lcssa = 0, $$sroa$034$058 = 0, $$sroa$1038$0$lcssa = 0, $$sroa$1038$060 = 0, $$sroa$636$0$lcssa = 0, $$sroa$636$059 = 0, $10 = 0, $107 = 0, $11 = 0, $112 = 0, $115 = 0, $117 = 0, $119 = 0, $12 = 0, $121 = 0, $123 = 0, $127 = 0, $128 = 0, $13 = 0, $132 = 0, $17 = 0, $18 = 0, $19 = 0, $27 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $42 = 0, $45 = 0, $52 = 0, $69 = 0, $7 = 0, $71 = 0, $83 = 0, $88 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $98 = 0, $indvars$iv = 0, $indvars$iv$i = 0, $indvars$iv$i31 = 0, $indvars$iv80 = 0, $wide$trip$count$i = 0, label = 0;
 $7 = HEAP8[$1 + 4 >> 0] | 0; //@line 23850
 L1 : do {
  if (!($7 << 24 >> 24)) {
   $$028$lcssa = 0; //@line 23854
   $$029$lcssa = 7; //@line 23854
   $$sroa$034$0$lcssa = 0; //@line 23854
   $$sroa$1038$0$lcssa = 0; //@line 23854
   $$sroa$636$0$lcssa = 0; //@line 23854
   $92 = 0; //@line 23854
  } else {
   $9 = HEAP32[$1 >> 2] | 0; //@line 23856
   $10 = $0 + 20 | 0; //@line 23857
   $11 = $0 + 112 | 0; //@line 23858
   $$02862 = 0; //@line 23859
   $$02961 = 7; //@line 23859
   $$lcssa76 = 0; //@line 23859
   $$sroa$034$058 = 0; //@line 23859
   $$sroa$1038$060 = 0; //@line 23859
   $$sroa$636$059 = 0; //@line 23859
   $13 = 0; //@line 23859
   while (1) {
    $12 = $9 + $13 | 0; //@line 23861
    if ((HEAP8[$12 >> 0] | 0) != 3) {
     $$028$lcssa = $$02862; //@line 23865
     $$029$lcssa = $$02961; //@line 23865
     $$sroa$034$0$lcssa = $$sroa$034$058; //@line 23865
     $$sroa$1038$0$lcssa = $$sroa$1038$060; //@line 23865
     $$sroa$636$0$lcssa = $$sroa$636$059; //@line 23865
     $92 = $$lcssa76; //@line 23865
     break L1;
    }
    $17 = HEAP8[$12 + 1 >> 0] | 0; //@line 23869
    $18 = $17 & 15; //@line 23870
    $19 = ($17 & 255) >>> 4; //@line 23871
    $27 = HEAPU8[$12 + 3 >> 0] << 8 | HEAPU8[$12 + 2 >> 0]; //@line 23879
    $28 = $27 & 65535; //@line 23880
    $30 = HEAP8[$12 + 4 >> 0] | 0; //@line 23882
    $32 = ($30 & 255) >>> 4; //@line 23884
    $34 = $32 & 7; //@line 23886
    $35 = $30 & 15; //@line 23887
    $36 = $13 + 5 | 0; //@line 23888
    $37 = $36 & 255; //@line 23889
    $$1 = $28 << 16 >> 16 == 0 & $34 << 24 >> 24 == 0 ? 6 : 7; //@line 23893
    L6 : do {
     switch ($32 & 7) {
     case 6:
     case 0:
      {
       $42 = HEAP8[$10 >> 0] | 0; //@line 23899
       if (!($42 << 24 >> 24)) {
        $$029$be = $$1; //@line 23902
        $$lcssa77 = $28; //@line 23902
       } else {
        $45 = $42 & 255; //@line 23905
        if ($34 << 24 >> 24 != 6) {
         $$256 = $$1; //@line 23907
         $indvars$iv = 0; //@line 23907
         while (1) {
          if (!($27 & 1 << ($indvars$iv & 15))) {
           $$3 = $$256; //@line 23914
          } else {
           $$3 = (HEAP32[(HEAP32[$11 >> 2] | 0) + ($indvars$iv * 12 | 0) >> 2] | 0) == 0 ? $$256 & -2 : $$256; //@line 23922
          }
          $indvars$iv = $indvars$iv + 1 | 0; //@line 23924
          if ($indvars$iv >>> 0 >= $45 >>> 0) {
           $$029$be = $$3; //@line 23929
           $$lcssa77 = $28; //@line 23929
           break L6;
          } else {
           $$256 = $$3; //@line 23927
          }
         }
        }
        $$pre = HEAP32[$11 >> 2] | 0; //@line 23934
        $52 = $28; //@line 23935
        $indvars$iv80 = 0; //@line 23935
        while (1) {
         if (!(HEAP32[$$pre + ($indvars$iv80 * 12 | 0) >> 2] | 0)) {
          $132 = $52; //@line 23941
         } else {
          $132 = (1 << ($indvars$iv80 & 15) | $52 & 65535) & 65535; //@line 23948
         }
         $indvars$iv80 = $indvars$iv80 + 1 | 0; //@line 23950
         if ($indvars$iv80 >>> 0 >= $45 >>> 0) {
          $$029$be = $$1; //@line 23955
          $$lcssa77 = $132; //@line 23955
          break;
         } else {
          $52 = $132; //@line 23953
         }
        }
       }
       break;
      }
     default:
      {
       $$029$be = 6; //@line 23963
       $$lcssa77 = $28; //@line 23963
      }
     }
    } while (0);
    if (($7 & 255) > ($37 & 255)) {
     $$02862 = $37; //@line 23970
     $$02961 = $$029$be; //@line 23970
     $$lcssa76 = $$lcssa77; //@line 23970
     $$sroa$034$058 = $35; //@line 23970
     $$sroa$1038$060 = $18; //@line 23970
     $$sroa$636$059 = $19; //@line 23970
     $13 = $36 & 255; //@line 23970
    } else {
     $$028$lcssa = $37; //@line 23972
     $$029$lcssa = $$029$be; //@line 23972
     $$sroa$034$0$lcssa = $35; //@line 23972
     $$sroa$1038$0$lcssa = $18; //@line 23972
     $$sroa$636$0$lcssa = $19; //@line 23972
     $92 = $$lcssa77; //@line 23972
     break L1;
    }
   }
  }
 } while (0);
 $69 = HEAP8[$1 + 7 >> 0] | 0; //@line 23981
 $71 = HEAP8[$1 + 8 >> 0] | 0; //@line 23983
 if (!(HEAP8[$1 + 6 >> 0] | 0)) {
  if ($$sroa$636$0$lcssa << 24 >> 24 == 15 & $$sroa$1038$0$lcssa << 24 >> 24 == 15) {
   $$026$i = $71; //@line 23992
   $$028$i = $69; //@line 23992
  } else {
   $$028$i4751 = $69; //@line 23994
   $$127$i53 = $71; //@line 23994
   $$2$i54 = HEAP8[$1 + 9 >> 0] | 0; //@line 23994
   $$3$i52 = 0; //@line 23994
   HEAP8[$2 >> 0] = $$028$i4751; //@line 23995
   HEAP8[$3 >> 0] = $$127$i53; //@line 23996
   HEAP8[$4 >> 0] = $$2$i54; //@line 23997
   HEAP8[$5 >> 0] = $$028$lcssa; //@line 23998
   return $$3$i52 | 0; //@line 23999
  }
 } else {
  $$026$i = $$sroa$1038$0$lcssa; //@line 24002
  $$028$i = $$sroa$636$0$lcssa; //@line 24002
 }
 if (!($$029$lcssa << 24 >> 24)) {
  $$028$i4751 = $$028$i; //@line 24006
  $$127$i53 = $$026$i; //@line 24006
  $$2$i54 = $$sroa$034$0$lcssa; //@line 24006
  $$3$i52 = 0; //@line 24006
  HEAP8[$2 >> 0] = $$028$i4751; //@line 24007
  HEAP8[$3 >> 0] = $$127$i53; //@line 24008
  HEAP8[$4 >> 0] = $$2$i54; //@line 24009
  HEAP8[$5 >> 0] = $$028$lcssa; //@line 24010
  return $$3$i52 | 0; //@line 24011
 }
 $83 = HEAP32[$0 + 112 >> 2] | 0; //@line 24018
 L30 : do {
  if ($$028$i << 24 >> 24 < (HEAP8[$0 + 26 >> 0] | 0) ? 1 : $$028$i << 24 >> 24 > (HEAP8[$0 + 27 >> 0] | 0)) {
   label = 24; //@line 24024
  } else {
   $88 = HEAP8[$0 + 20 >> 0] | 0; //@line 24027
   if (!($88 << 24 >> 24)) {
    label = 24; //@line 24030
   } else {
    $90 = $88 & 255; //@line 24032
    $91 = $92 & 65535; //@line 24033
    $indvars$iv$i31 = 0; //@line 24034
    while (1) {
     if (1 << ($indvars$iv$i31 & 15) & $91 | 0) {
      $98 = HEAP8[$83 + ($indvars$iv$i31 * 12 | 0) + 8 >> 0] | 0; //@line 24042
      if (!(($98 & 15) > $$028$i << 24 >> 24 ? 1 : ($98 & 255) >>> 4 << 24 >> 24 < $$028$i << 24 >> 24)) {
       $117 = $$029$lcssa; //@line 24049
       break L30;
      }
     }
     $indvars$iv$i31 = $indvars$iv$i31 + 1 | 0; //@line 24053
     if ($indvars$iv$i31 >>> 0 >= $90 >>> 0) {
      label = 24; //@line 24058
      break;
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 24) {
  $117 = $$029$lcssa & -3; //@line 24067
 }
 $107 = HEAP8[$0 + 22 >> 0] | 0; //@line 24070
 $112 = $$026$i << 24 >> 24 < $107 << 24 >> 24 ? 1 : $$026$i << 24 >> 24 > (HEAP8[$0 + 21 >> 0] | 0); //@line 24075
 $115 = ($107 & 255 | 0) > ($$026$i << 24 >> 24 | 0); //@line 24078
 $$130$$$$i = $112 ? $115 ? $117 : $117 & -5 : $117; //@line 24081
 $$$026$$026$i = $115 & $112 ? $107 : $$026$i; //@line 24083
 $119 = $$130$$$$i << 24 >> 24 == 7; //@line 24084
 $$2$i = $$sroa$034$0$lcssa << 24 >> 24 == 0 & $119 ? 1 : $$sroa$034$0$lcssa; //@line 24087
 if (!$119) {
  $$028$i4751 = $$028$i; //@line 24089
  $$127$i53 = $$$026$$026$i; //@line 24089
  $$2$i54 = $$2$i; //@line 24089
  $$3$i52 = $$130$$$$i; //@line 24089
  HEAP8[$2 >> 0] = $$028$i4751; //@line 24090
  HEAP8[$3 >> 0] = $$127$i53; //@line 24091
  HEAP8[$4 >> 0] = $$2$i54; //@line 24092
  HEAP8[$5 >> 0] = $$028$lcssa; //@line 24093
  return $$3$i52 | 0; //@line 24094
 }
 $121 = $0 + 120 | 0; //@line 24096
 $123 = $0 + 128 | 0; //@line 24098
 _memset(HEAP32[$121 >> 2] | 0, 0, HEAPU8[$123 >> 0] << 1 | 0) | 0; //@line 24102
 $127 = HEAP32[$121 >> 2] | 0; //@line 24103
 $128 = HEAP8[$123 >> 0] | 0; //@line 24104
 if (!(($127 | 0) != 0 & $128 << 24 >> 24 != 0)) {
  $$028$i4751 = $$028$i; //@line 24109
  $$127$i53 = $$$026$$026$i; //@line 24109
  $$2$i54 = $$2$i; //@line 24109
  $$3$i52 = 7; //@line 24109
  HEAP8[$2 >> 0] = $$028$i4751; //@line 24110
  HEAP8[$3 >> 0] = $$127$i53; //@line 24111
  HEAP8[$4 >> 0] = $$2$i54; //@line 24112
  HEAP8[$5 >> 0] = $$028$lcssa; //@line 24113
  return $$3$i52 | 0; //@line 24114
 }
 $wide$trip$count$i = $128 & 255; //@line 24116
 $indvars$iv$i = 0; //@line 24117
 do {
  HEAP16[$127 + ($indvars$iv$i << 1) >> 1] = $92; //@line 24120
  $indvars$iv$i = $indvars$iv$i + 1 | 0; //@line 24121
 } while (($indvars$iv$i | 0) != ($wide$trip$count$i | 0));
 $$028$i4751 = $$028$i; //@line 24124
 $$127$i53 = $$$026$$026$i; //@line 24124
 $$2$i54 = $$2$i; //@line 24124
 $$3$i52 = 7; //@line 24124
 HEAP8[$2 >> 0] = $$028$i4751; //@line 24130
 HEAP8[$3 >> 0] = $$127$i53; //@line 24131
 HEAP8[$4 >> 0] = $$2$i54; //@line 24132
 HEAP8[$5 >> 0] = $$028$lcssa; //@line 24133
 return $$3$i52 | 0; //@line 24134
}
function _schedule_interrupt($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $1 = 0, $10 = 0, $104 = 0, $107 = 0, $109 = 0, $11 = 0, $112 = 0, $113 = 0, $115 = 0, $118 = 0, $126 = 0, $127 = 0, $128 = 0, $130 = 0, $132 = 0, $137 = 0, $14 = 0, $144 = 0, $146 = 0, $148 = 0, $151 = 0, $153 = 0, $160 = 0, $161 = 0, $164 = 0, $166 = 0, $168 = 0, $174 = 0, $175 = 0, $179 = 0, $187 = 0, $19 = 0, $195 = 0, $198 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $35 = 0, $36 = 0, $37 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $50 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $69 = 0, $70 = 0, $71 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $88 = 0, $89 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx22 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5487
 $1 = $0 + 4 | 0; //@line 5488
 $2 = HEAP32[$1 >> 2] | 0; //@line 5489
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5492
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5493
 $6 = FUNCTION_TABLE_i[$5 & 7]() | 0; //@line 5494
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 690; //@line 5497
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 5499
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 5501
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 5503
  sp = STACKTOP; //@line 5504
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5507
 $10 = HEAP32[$1 >> 2] | 0; //@line 5508
 $11 = $10 + 32 | 0; //@line 5509
 if (($6 | 0) != (HEAP32[$11 >> 2] | 0)) {
  $14 = $2 + 32 | 0; //@line 5513
  $19 = $6 - (HEAP32[$14 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 5518
  HEAP32[$14 >> 2] = $6; //@line 5519
  $21 = HEAP32[$2 + 8 >> 2] | 0; //@line 5521
  L6 : do {
   if (($21 | 0) < 1e6) {
    switch ($21 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 7; //@line 5530
      break L6;
     }
    }
    $22 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 5534
    $24 = _bitshift64Lshr($22 | 0, tempRet0 | 0, 15) | 0; //@line 5536
    $25 = tempRet0; //@line 5537
    $28 = $2 + 40 | 0; //@line 5540
    $29 = $28; //@line 5541
    $35 = _i64Add(HEAP32[$29 >> 2] | 0, HEAP32[$29 + 4 >> 2] | 0, $19 * 1e6 & 32704 | 0, 0) | 0; //@line 5547
    $36 = tempRet0; //@line 5548
    $37 = $28; //@line 5549
    HEAP32[$37 >> 2] = $35; //@line 5551
    HEAP32[$37 + 4 >> 2] = $36; //@line 5554
    if ($36 >>> 0 < 0 | ($36 | 0) == 0 & $35 >>> 0 < 32768) {
     $95 = $24; //@line 5561
     $96 = $25; //@line 5561
    } else {
     $46 = _i64Add($24 | 0, $25 | 0, 1, 0) | 0; //@line 5563
     $47 = tempRet0; //@line 5564
     $48 = _i64Add($35 | 0, $36 | 0, -32768, -1) | 0; //@line 5565
     $50 = $28; //@line 5567
     HEAP32[$50 >> 2] = $48; //@line 5569
     HEAP32[$50 + 4 >> 2] = tempRet0; //@line 5572
     $95 = $46; //@line 5573
     $96 = $47; //@line 5573
    }
   } else {
    switch ($21 | 0) {
    case 1e6:
     {
      $95 = $19; //@line 5578
      $96 = 0; //@line 5578
      break;
     }
    default:
     {
      label = 7; //@line 5582
     }
    }
   }
  } while (0);
  if ((label | 0) == 7) {
   $54 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 5588
   $55 = tempRet0; //@line 5589
   $56 = ___udivdi3($54 | 0, $55 | 0, $21 | 0, 0) | 0; //@line 5590
   $57 = tempRet0; //@line 5591
   $58 = ___muldi3($56 | 0, $57 | 0, $21 | 0, 0) | 0; //@line 5592
   $60 = _i64Subtract($54 | 0, $55 | 0, $58 | 0, tempRet0 | 0) | 0; //@line 5594
   $62 = $2 + 40 | 0; //@line 5596
   $63 = $62; //@line 5597
   $69 = _i64Add($60 | 0, tempRet0 | 0, HEAP32[$63 >> 2] | 0, HEAP32[$63 + 4 >> 2] | 0) | 0; //@line 5603
   $70 = tempRet0; //@line 5604
   $71 = $62; //@line 5605
   HEAP32[$71 >> 2] = $69; //@line 5607
   HEAP32[$71 + 4 >> 2] = $70; //@line 5610
   if ($70 >>> 0 < 0 | ($70 | 0) == 0 & $69 >>> 0 < $21 >>> 0) {
    $95 = $56; //@line 5617
    $96 = $57; //@line 5617
   } else {
    $80 = _i64Add($56 | 0, $57 | 0, 1, 0) | 0; //@line 5619
    $81 = tempRet0; //@line 5620
    $82 = _i64Subtract($69 | 0, $70 | 0, $21 | 0, 0) | 0; //@line 5621
    $84 = $62; //@line 5623
    HEAP32[$84 >> 2] = $82; //@line 5625
    HEAP32[$84 + 4 >> 2] = tempRet0; //@line 5628
    $95 = $80; //@line 5629
    $96 = $81; //@line 5629
   }
  }
  $88 = $2 + 48 | 0; //@line 5632
  $89 = $88; //@line 5633
  $97 = _i64Add(HEAP32[$89 >> 2] | 0, HEAP32[$89 + 4 >> 2] | 0, $95 | 0, $96 | 0) | 0; //@line 5639
  $99 = $88; //@line 5641
  HEAP32[$99 >> 2] = $97; //@line 5643
  HEAP32[$99 + 4 >> 2] = tempRet0; //@line 5646
 }
 $104 = HEAP32[$10 + 4 >> 2] | 0; //@line 5649
 if (!$104) {
  $195 = (HEAP32[$2 + 16 >> 2] | 0) + (HEAP32[$2 + 32 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 5659
  $198 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 5662
  $AsyncCtx22 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5663
  FUNCTION_TABLE_vi[$198 & 1023]($195); //@line 5664
  if (___async) {
   HEAP32[$AsyncCtx22 >> 2] = 696; //@line 5667
   sp = STACKTOP; //@line 5668
   return;
  } else {
   _emscripten_free_async_context($AsyncCtx22 | 0); //@line 5671
   return;
  }
 }
 $107 = $10 + 48 | 0; //@line 5676
 $109 = HEAP32[$107 >> 2] | 0; //@line 5678
 $112 = HEAP32[$107 + 4 >> 2] | 0; //@line 5681
 $113 = $104; //@line 5682
 $115 = HEAP32[$113 >> 2] | 0; //@line 5684
 $118 = HEAP32[$113 + 4 >> 2] | 0; //@line 5687
 if (!($118 >>> 0 > $112 >>> 0 | ($118 | 0) == ($112 | 0) & $115 >>> 0 > $109 >>> 0)) {
  $126 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 5696
  $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5697
  FUNCTION_TABLE_v[$126 & 7](); //@line 5698
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 691; //@line 5701
   sp = STACKTOP; //@line 5702
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5705
  return;
 }
 $127 = _i64Subtract($115 | 0, $118 | 0, $109 | 0, $112 | 0) | 0; //@line 5708
 $128 = tempRet0; //@line 5709
 $130 = HEAP32[$10 + 16 >> 2] | 0; //@line 5711
 $132 = $10 + 24 | 0; //@line 5713
 $137 = HEAP32[$132 + 4 >> 2] | 0; //@line 5718
 L29 : do {
  if ($128 >>> 0 > $137 >>> 0 | (($128 | 0) == ($137 | 0) ? $127 >>> 0 > (HEAP32[$132 >> 2] | 0) >>> 0 : 0)) {
   $$0$i = $130; //@line 5726
  } else {
   $144 = HEAP32[$10 + 8 >> 2] | 0; //@line 5729
   L31 : do {
    if (($144 | 0) < 1e6) {
     switch ($144 | 0) {
     case 32768:
      {
       break;
      }
     default:
      {
       break L31;
      }
     }
     $146 = _bitshift64Shl($127 | 0, $128 | 0, 15) | 0; //@line 5741
     $148 = ___udivdi3($146 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 5743
     $$0$i = $130 >>> 0 < $148 >>> 0 ? $130 : $148; //@line 5747
     break L29;
    } else {
     switch ($144 | 0) {
     case 1e6:
      {
       break;
      }
     default:
      {
       break L31;
      }
     }
     $$0$i = $130 >>> 0 < $127 >>> 0 ? $130 : $127; //@line 5760
     break L29;
    }
   } while (0);
   $151 = ___muldi3($127 | 0, $128 | 0, $144 | 0, 0) | 0; //@line 5764
   $153 = ___udivdi3($151 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 5766
   $$0$i = $130 >>> 0 < $153 >>> 0 ? $130 : $153; //@line 5770
  }
 } while (0);
 $160 = (HEAP32[$11 >> 2] | 0) + $$0$i & HEAP32[$10 + 12 >> 2]; //@line 5777
 $161 = $2 + 32 | 0; //@line 5778
 $164 = HEAP32[$0 >> 2] | 0; //@line 5781
 if (($160 | 0) == (HEAP32[$161 >> 2] | 0)) {
  $166 = HEAP32[$164 + 20 >> 2] | 0; //@line 5784
  $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5785
  FUNCTION_TABLE_v[$166 & 7](); //@line 5786
  if (___async) {
   HEAP32[$AsyncCtx7 >> 2] = 692; //@line 5789
   sp = STACKTOP; //@line 5790
   return;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5793
  return;
 }
 $168 = HEAP32[$164 + 16 >> 2] | 0; //@line 5797
 $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5798
 FUNCTION_TABLE_vi[$168 & 1023]($160); //@line 5799
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 693; //@line 5802
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 5804
  HEAP32[$AsyncCtx11 + 8 >> 2] = $161; //@line 5806
  HEAP32[$AsyncCtx11 + 12 >> 2] = $160; //@line 5808
  sp = STACKTOP; //@line 5809
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 5812
 $174 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5815
 $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5816
 $175 = FUNCTION_TABLE_i[$174 & 7]() | 0; //@line 5817
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 694; //@line 5820
  HEAP32[$AsyncCtx14 + 4 >> 2] = $161; //@line 5822
  HEAP32[$AsyncCtx14 + 8 >> 2] = $160; //@line 5824
  HEAP32[$AsyncCtx14 + 12 >> 2] = $0; //@line 5826
  sp = STACKTOP; //@line 5827
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 5830
 $179 = HEAP32[$161 >> 2] | 0; //@line 5831
 if ($160 >>> 0 > $179 >>> 0) {
  if (!($175 >>> 0 >= $160 >>> 0 | $175 >>> 0 < $179 >>> 0)) {
   return;
  }
 } else {
  if (!($175 >>> 0 >= $160 >>> 0 & $175 >>> 0 < $179 >>> 0)) {
   return;
  }
 }
 $187 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 5850
 $AsyncCtx18 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5851
 FUNCTION_TABLE_v[$187 & 7](); //@line 5852
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 695; //@line 5855
  sp = STACKTOP; //@line 5856
  return;
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 5859
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$038 = 0, $$040 = 0, $101 = 0, $104 = 0, $11 = 0, $112 = 0, $115 = 0, $118 = 0, $122 = 0, $125 = 0, $136 = 0, $139 = 0, $142 = 0, $146 = 0, $149 = 0, $18 = 0, $21 = 0, $22 = 0, $29 = 0, $30 = 0, $33 = 0, $4 = 0, $45 = 0, $47 = 0, $51 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $65 = 0, $7 = 0, $76 = 0, $79 = 0, $8 = 0, $93 = 0, $96 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 23142
 $4 = HEAP8[$1 + 1 >> 0] | 0; //@line 23144
 $6 = HEAP32[$1 + 4 >> 2] | 0; //@line 23146
 $7 = $0 + 4 | 0; //@line 23147
 $8 = HEAP32[$7 >> 2] | 0; //@line 23148
 $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 72 >> 2] | 0; //@line 23151
 $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 23152
 FUNCTION_TABLE_vi[$11 & 1023]($8); //@line 23153
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 603; //@line 23156
  HEAP8[$AsyncCtx + 4 >> 0] = $4; //@line 23158
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 23160
  HEAP32[$AsyncCtx + 12 >> 2] = $7; //@line 23162
  HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 23164
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 23166
  HEAP32[$AsyncCtx + 24 >> 2] = $6; //@line 23168
  sp = STACKTOP; //@line 23169
  return 0; //@line 23170
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 23172
 $18 = HEAP32[$7 >> 2] | 0; //@line 23173
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 40 >> 2] | 0; //@line 23176
 $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 23177
 $22 = FUNCTION_TABLE_ii[$21 & 15]($18) | 0; //@line 23178
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 604; //@line 23181
  HEAP8[$AsyncCtx2 + 4 >> 0] = $4; //@line 23183
  HEAP32[$AsyncCtx2 + 8 >> 2] = $2; //@line 23185
  HEAP32[$AsyncCtx2 + 12 >> 2] = $7; //@line 23187
  HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 23189
  HEAP32[$AsyncCtx2 + 20 >> 2] = $0; //@line 23191
  HEAP32[$AsyncCtx2 + 24 >> 2] = $6; //@line 23193
  sp = STACKTOP; //@line 23194
  return 0; //@line 23195
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 23197
 $29 = $22 << 24 >> 24 == 0; //@line 23198
 $30 = HEAP32[$7 >> 2] | 0; //@line 23199
 $33 = HEAP32[(HEAP32[$30 >> 2] | 0) + 76 >> 2] | 0; //@line 23202
 $AsyncCtx5 = _emscripten_alloc_async_context(32, sp) | 0; //@line 23203
 FUNCTION_TABLE_vi[$33 & 1023]($30); //@line 23204
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 605; //@line 23207
  HEAP8[$AsyncCtx5 + 4 >> 0] = $4; //@line 23209
  HEAP32[$AsyncCtx5 + 8 >> 2] = $2; //@line 23211
  HEAP32[$AsyncCtx5 + 12 >> 2] = $7; //@line 23213
  HEAP32[$AsyncCtx5 + 16 >> 2] = $1; //@line 23215
  HEAP32[$AsyncCtx5 + 20 >> 2] = $0; //@line 23217
  HEAP32[$AsyncCtx5 + 24 >> 2] = $6; //@line 23219
  HEAP8[$AsyncCtx5 + 28 >> 0] = $29 & 1; //@line 23222
  sp = STACKTOP; //@line 23223
  return 0; //@line 23224
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 23226
 if (!$29) {
  $$0 = 0; //@line 23228
  return $$0 | 0; //@line 23229
 }
 if (!(HEAP32[$1 + 20 >> 2] | 0)) {
  $45 = HEAP32[$0 + 112 >> 2] | 0; //@line 23236
  $47 = HEAPU8[$1 >> 0] | 0; //@line 23238
  $51 = HEAP32[$45 + ($47 * 12 | 0) + 4 >> 2] | 0; //@line 23242
  $$040 = ($51 | 0) == 0 ? HEAP32[$45 + ($47 * 12 | 0) >> 2] | 0 : $51; //@line 23245
 } else {
  $$040 = $6; //@line 23247
 }
 $56 = HEAP32[$0 + 96 >> 2] | 0; //@line 23252
 $58 = HEAP32[$0 + 104 >> 2] | 0; //@line 23254
 $59 = $4 & 255; //@line 23255
 $61 = HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + $59 >> 0] | 0; //@line 23257
 $62 = HEAP32[$7 >> 2] | 0; //@line 23258
 $65 = HEAP32[(HEAP32[$62 >> 2] | 0) + 72 >> 2] | 0; //@line 23261
 $AsyncCtx9 = _emscripten_alloc_async_context(44, sp) | 0; //@line 23262
 FUNCTION_TABLE_vi[$65 & 1023]($62); //@line 23263
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 606; //@line 23266
  HEAP32[$AsyncCtx9 + 4 >> 2] = $7; //@line 23268
  HEAP32[$AsyncCtx9 + 8 >> 2] = $$040; //@line 23270
  HEAP8[$AsyncCtx9 + 12 >> 0] = $4; //@line 23272
  HEAP32[$AsyncCtx9 + 16 >> 2] = $0; //@line 23274
  HEAP32[$AsyncCtx9 + 20 >> 2] = $1; //@line 23276
  HEAP8[$AsyncCtx9 + 24 >> 0] = $61; //@line 23278
  HEAP32[$AsyncCtx9 + 28 >> 2] = $56; //@line 23280
  HEAP32[$AsyncCtx9 + 32 >> 2] = $58; //@line 23282
  HEAP32[$AsyncCtx9 + 36 >> 2] = $59; //@line 23284
  HEAP32[$AsyncCtx9 + 40 >> 2] = $2; //@line 23286
  sp = STACKTOP; //@line 23287
  return 0; //@line 23288
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 23290
 $76 = HEAP32[$7 >> 2] | 0; //@line 23291
 $79 = HEAP32[(HEAP32[$76 >> 2] | 0) + 32 >> 2] | 0; //@line 23294
 $AsyncCtx12 = _emscripten_alloc_async_context(40, sp) | 0; //@line 23295
 FUNCTION_TABLE_vii[$79 & 31]($76, $$040); //@line 23296
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 607; //@line 23299
  HEAP8[$AsyncCtx12 + 4 >> 0] = $4; //@line 23301
  HEAP32[$AsyncCtx12 + 8 >> 2] = $0; //@line 23303
  HEAP32[$AsyncCtx12 + 12 >> 2] = $7; //@line 23305
  HEAP32[$AsyncCtx12 + 16 >> 2] = $1; //@line 23307
  HEAP8[$AsyncCtx12 + 20 >> 0] = $61; //@line 23309
  HEAP32[$AsyncCtx12 + 24 >> 2] = $56; //@line 23311
  HEAP32[$AsyncCtx12 + 28 >> 2] = $58; //@line 23313
  HEAP32[$AsyncCtx12 + 32 >> 2] = $59; //@line 23315
  HEAP32[$AsyncCtx12 + 36 >> 2] = $2; //@line 23317
  sp = STACKTOP; //@line 23318
  return 0; //@line 23319
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 23321
 do {
  if ($4 << 24 >> 24 == 7) {
   if (!(HEAP8[$0 + 14 >> 0] | 0)) {
    label = 19; //@line 23329
   } else {
    $93 = HEAP32[$7 >> 2] | 0; //@line 23331
    $96 = HEAP32[(HEAP32[$93 >> 2] | 0) + 16 >> 2] | 0; //@line 23334
    $101 = HEAP32[$1 + 8 >> 2] & 65535; //@line 23339
    $104 = (HEAP8[$1 + 18 >> 0] | 0) != 0; //@line 23342
    $AsyncCtx16 = _emscripten_alloc_async_context(32, sp) | 0; //@line 23343
    FUNCTION_TABLE_viiiiiiiiiiiiiii[$96 & 1]($93, 0, 5e4, ($61 & 255) * 1e3 | 0, 0, 83333, 5, $101, 0, 0, 1, 0, 0, 0, $104); //@line 23344
    if (___async) {
     HEAP32[$AsyncCtx16 >> 2] = 608; //@line 23347
     HEAP32[$AsyncCtx16 + 4 >> 2] = $1; //@line 23349
     HEAP32[$AsyncCtx16 + 8 >> 2] = $56; //@line 23351
     HEAP32[$AsyncCtx16 + 12 >> 2] = $58; //@line 23353
     HEAP32[$AsyncCtx16 + 16 >> 2] = $59; //@line 23355
     HEAP32[$AsyncCtx16 + 20 >> 2] = $7; //@line 23357
     HEAP8[$AsyncCtx16 + 24 >> 0] = $61; //@line 23359
     HEAP32[$AsyncCtx16 + 28 >> 2] = $2; //@line 23361
     sp = STACKTOP; //@line 23362
     return 0; //@line 23363
    } else {
     _emscripten_free_async_context($AsyncCtx16 | 0); //@line 23365
     $$038 = 0; //@line 23366
     break;
    }
   }
  } else {
   label = 19; //@line 23371
  }
 } while (0);
 do {
  if ((label | 0) == 19) {
   $112 = HEAP32[$7 >> 2] | 0; //@line 23376
   $115 = HEAP32[(HEAP32[$112 >> 2] | 0) + 16 >> 2] | 0; //@line 23379
   $118 = HEAPU8[$1 + 2 >> 0] | 0; //@line 23382
   $122 = HEAP32[$1 + 8 >> 2] & 65535; //@line 23386
   $125 = (HEAP8[$1 + 18 >> 0] | 0) != 0; //@line 23389
   $AsyncCtx20 = _emscripten_alloc_async_context(32, sp) | 0; //@line 23390
   FUNCTION_TABLE_viiiiiiiiiiiiiii[$115 & 1]($112, 1, $118, $61 & 255, 1, 0, 8, $122, 0, 0, 0, 0, 0, 1, $125); //@line 23391
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 609; //@line 23394
    HEAP32[$AsyncCtx20 + 4 >> 2] = $1; //@line 23396
    HEAP32[$AsyncCtx20 + 8 >> 2] = $56; //@line 23398
    HEAP32[$AsyncCtx20 + 12 >> 2] = $58; //@line 23400
    HEAP32[$AsyncCtx20 + 16 >> 2] = $59; //@line 23402
    HEAP32[$AsyncCtx20 + 20 >> 2] = $7; //@line 23404
    HEAP8[$AsyncCtx20 + 24 >> 0] = $61; //@line 23406
    HEAP32[$AsyncCtx20 + 28 >> 2] = $2; //@line 23408
    sp = STACKTOP; //@line 23409
    return 0; //@line 23410
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 23412
    $$038 = 1; //@line 23413
    break;
   }
  }
 } while (0);
 $136 = HEAP32[$7 >> 2] | 0; //@line 23424
 $139 = HEAP32[(HEAP32[$136 >> 2] | 0) + 44 >> 2] | 0; //@line 23427
 $142 = (HEAPU8[((HEAP8[$1 + 17 >> 0] | 0) == 0 ? $56 : $58) + $59 >> 0] | 0) + 13 & 255; //@line 23430
 $AsyncCtx24 = _emscripten_alloc_async_context(16, sp) | 0; //@line 23431
 FUNCTION_TABLE_viii[$139 & 7]($136, $$038, $142); //@line 23432
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 610; //@line 23435
  HEAP32[$AsyncCtx24 + 4 >> 2] = $7; //@line 23437
  HEAP8[$AsyncCtx24 + 8 >> 0] = $61; //@line 23439
  HEAP32[$AsyncCtx24 + 12 >> 2] = $2; //@line 23441
  sp = STACKTOP; //@line 23442
  return 0; //@line 23443
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 23445
 $146 = HEAP32[$7 >> 2] | 0; //@line 23446
 $149 = HEAP32[(HEAP32[$146 >> 2] | 0) + 76 >> 2] | 0; //@line 23449
 $AsyncCtx27 = _emscripten_alloc_async_context(12, sp) | 0; //@line 23450
 FUNCTION_TABLE_vi[$149 & 1023]($146); //@line 23451
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 611; //@line 23454
  HEAP8[$AsyncCtx27 + 4 >> 0] = $61; //@line 23456
  HEAP32[$AsyncCtx27 + 8 >> 2] = $2; //@line 23458
  sp = STACKTOP; //@line 23459
  return 0; //@line 23460
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 23462
 HEAP8[$2 >> 0] = $61; //@line 23463
 $$0 = 1; //@line 23464
 return $$0 | 0; //@line 23465
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 16099
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16101
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16103
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16105
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16107
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16109
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16111
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16113
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16115
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 16117
 $$pre = HEAP32[$10 >> 2] | 0; //@line 16118
 if ($$pre | 0) {
  $21 = HEAP32[$$pre + 4 >> 2] | 0; //@line 16122
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 16123
  FUNCTION_TABLE_vii[$21 & 31]($8, $2); //@line 16124
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 554; //@line 16127
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 16128
   HEAP32[$22 >> 2] = $2; //@line 16129
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 16130
   HEAP32[$23 >> 2] = $4; //@line 16131
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 16132
   HEAP32[$24 >> 2] = $6; //@line 16133
   $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 16134
   HEAP32[$25 >> 2] = $8; //@line 16135
   $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 16136
   HEAP32[$26 >> 2] = $10; //@line 16137
   $27 = $ReallocAsyncCtx2 + 24 | 0; //@line 16138
   HEAP32[$27 >> 2] = $12; //@line 16139
   $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 16140
   HEAP32[$28 >> 2] = $14; //@line 16141
   $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 16142
   HEAP32[$29 >> 2] = $16; //@line 16143
   $30 = $ReallocAsyncCtx2 + 36 | 0; //@line 16144
   HEAP32[$30 >> 2] = $18; //@line 16145
   sp = STACKTOP; //@line 16146
   return;
  }
  ___async_unwind = 0; //@line 16149
  HEAP32[$ReallocAsyncCtx2 >> 2] = 554; //@line 16150
  $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 16151
  HEAP32[$22 >> 2] = $2; //@line 16152
  $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 16153
  HEAP32[$23 >> 2] = $4; //@line 16154
  $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 16155
  HEAP32[$24 >> 2] = $6; //@line 16156
  $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 16157
  HEAP32[$25 >> 2] = $8; //@line 16158
  $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 16159
  HEAP32[$26 >> 2] = $10; //@line 16160
  $27 = $ReallocAsyncCtx2 + 24 | 0; //@line 16161
  HEAP32[$27 >> 2] = $12; //@line 16162
  $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 16163
  HEAP32[$28 >> 2] = $14; //@line 16164
  $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 16165
  HEAP32[$29 >> 2] = $16; //@line 16166
  $30 = $ReallocAsyncCtx2 + 36 | 0; //@line 16167
  HEAP32[$30 >> 2] = $18; //@line 16168
  sp = STACKTOP; //@line 16169
  return;
 }
 HEAP32[$12 >> 2] = 0; //@line 16172
 $31 = $4 + 12 | 0; //@line 16173
 HEAP32[$4 >> 2] = 7; //@line 16174
 HEAP32[$4 + 4 >> 2] = 0; //@line 16176
 HEAP32[$4 + 8 >> 2] = $6; //@line 16178
 HEAP32[$31 >> 2] = 860; //@line 16179
 $32 = $6 + 1244 | 0; //@line 16180
 if (($32 | 0) == ($4 | 0)) {
  $59 = HEAP32[217] | 0; //@line 16184
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 16185
  FUNCTION_TABLE_vi[$59 & 1023]($4); //@line 16186
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 558; //@line 16189
   $60 = $ReallocAsyncCtx6 + 4 | 0; //@line 16190
   HEAP32[$60 >> 2] = $8; //@line 16191
   $61 = $ReallocAsyncCtx6 + 8 | 0; //@line 16192
   HEAP32[$61 >> 2] = $6; //@line 16193
   $62 = $ReallocAsyncCtx6 + 12 | 0; //@line 16194
   HEAP32[$62 >> 2] = $14; //@line 16195
   $63 = $ReallocAsyncCtx6 + 16 | 0; //@line 16196
   HEAP32[$63 >> 2] = $16; //@line 16197
   $64 = $ReallocAsyncCtx6 + 20 | 0; //@line 16198
   HEAP32[$64 >> 2] = $4; //@line 16199
   $65 = $ReallocAsyncCtx6 + 24 | 0; //@line 16200
   HEAP32[$65 >> 2] = $18; //@line 16201
   sp = STACKTOP; //@line 16202
   return;
  }
  ___async_unwind = 0; //@line 16205
  HEAP32[$ReallocAsyncCtx6 >> 2] = 558; //@line 16206
  $60 = $ReallocAsyncCtx6 + 4 | 0; //@line 16207
  HEAP32[$60 >> 2] = $8; //@line 16208
  $61 = $ReallocAsyncCtx6 + 8 | 0; //@line 16209
  HEAP32[$61 >> 2] = $6; //@line 16210
  $62 = $ReallocAsyncCtx6 + 12 | 0; //@line 16211
  HEAP32[$62 >> 2] = $14; //@line 16212
  $63 = $ReallocAsyncCtx6 + 16 | 0; //@line 16213
  HEAP32[$63 >> 2] = $16; //@line 16214
  $64 = $ReallocAsyncCtx6 + 20 | 0; //@line 16215
  HEAP32[$64 >> 2] = $4; //@line 16216
  $65 = $ReallocAsyncCtx6 + 24 | 0; //@line 16217
  HEAP32[$65 >> 2] = $18; //@line 16218
  sp = STACKTOP; //@line 16219
  return;
 }
 $34 = $6 + 1256 | 0; //@line 16222
 $35 = HEAP32[$34 >> 2] | 0; //@line 16223
 if (!$35) {
  $49 = HEAP32[216] | 0; //@line 16227
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 16228
  FUNCTION_TABLE_vii[$49 & 31]($32, $4); //@line 16229
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 557; //@line 16232
   $50 = $ReallocAsyncCtx5 + 4 | 0; //@line 16233
   HEAP32[$50 >> 2] = $4; //@line 16234
   $51 = $ReallocAsyncCtx5 + 8 | 0; //@line 16235
   HEAP32[$51 >> 2] = $8; //@line 16236
   $52 = $ReallocAsyncCtx5 + 12 | 0; //@line 16237
   HEAP32[$52 >> 2] = $6; //@line 16238
   $53 = $ReallocAsyncCtx5 + 16 | 0; //@line 16239
   HEAP32[$53 >> 2] = $14; //@line 16240
   $54 = $ReallocAsyncCtx5 + 20 | 0; //@line 16241
   HEAP32[$54 >> 2] = $16; //@line 16242
   $55 = $ReallocAsyncCtx5 + 24 | 0; //@line 16243
   HEAP32[$55 >> 2] = $31; //@line 16244
   $56 = $ReallocAsyncCtx5 + 28 | 0; //@line 16245
   HEAP32[$56 >> 2] = $34; //@line 16246
   $57 = $ReallocAsyncCtx5 + 32 | 0; //@line 16247
   HEAP32[$57 >> 2] = $18; //@line 16248
   sp = STACKTOP; //@line 16249
   return;
  }
  ___async_unwind = 0; //@line 16252
  HEAP32[$ReallocAsyncCtx5 >> 2] = 557; //@line 16253
  $50 = $ReallocAsyncCtx5 + 4 | 0; //@line 16254
  HEAP32[$50 >> 2] = $4; //@line 16255
  $51 = $ReallocAsyncCtx5 + 8 | 0; //@line 16256
  HEAP32[$51 >> 2] = $8; //@line 16257
  $52 = $ReallocAsyncCtx5 + 12 | 0; //@line 16258
  HEAP32[$52 >> 2] = $6; //@line 16259
  $53 = $ReallocAsyncCtx5 + 16 | 0; //@line 16260
  HEAP32[$53 >> 2] = $14; //@line 16261
  $54 = $ReallocAsyncCtx5 + 20 | 0; //@line 16262
  HEAP32[$54 >> 2] = $16; //@line 16263
  $55 = $ReallocAsyncCtx5 + 24 | 0; //@line 16264
  HEAP32[$55 >> 2] = $31; //@line 16265
  $56 = $ReallocAsyncCtx5 + 28 | 0; //@line 16266
  HEAP32[$56 >> 2] = $34; //@line 16267
  $57 = $ReallocAsyncCtx5 + 32 | 0; //@line 16268
  HEAP32[$57 >> 2] = $18; //@line 16269
  sp = STACKTOP; //@line 16270
  return;
 } else {
  $38 = HEAP32[$35 + 8 >> 2] | 0; //@line 16274
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 16275
  FUNCTION_TABLE_vi[$38 & 1023]($32); //@line 16276
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 556; //@line 16279
   $39 = $ReallocAsyncCtx4 + 4 | 0; //@line 16280
   HEAP32[$39 >> 2] = $4; //@line 16281
   $40 = $ReallocAsyncCtx4 + 8 | 0; //@line 16282
   HEAP32[$40 >> 2] = $34; //@line 16283
   $41 = $ReallocAsyncCtx4 + 12 | 0; //@line 16284
   HEAP32[$41 >> 2] = $32; //@line 16285
   $42 = $ReallocAsyncCtx4 + 16 | 0; //@line 16286
   HEAP32[$42 >> 2] = $8; //@line 16287
   $43 = $ReallocAsyncCtx4 + 20 | 0; //@line 16288
   HEAP32[$43 >> 2] = $31; //@line 16289
   $44 = $ReallocAsyncCtx4 + 24 | 0; //@line 16290
   HEAP32[$44 >> 2] = $6; //@line 16291
   $45 = $ReallocAsyncCtx4 + 28 | 0; //@line 16292
   HEAP32[$45 >> 2] = $14; //@line 16293
   $46 = $ReallocAsyncCtx4 + 32 | 0; //@line 16294
   HEAP32[$46 >> 2] = $16; //@line 16295
   $47 = $ReallocAsyncCtx4 + 36 | 0; //@line 16296
   HEAP32[$47 >> 2] = $18; //@line 16297
   sp = STACKTOP; //@line 16298
   return;
  }
  ___async_unwind = 0; //@line 16301
  HEAP32[$ReallocAsyncCtx4 >> 2] = 556; //@line 16302
  $39 = $ReallocAsyncCtx4 + 4 | 0; //@line 16303
  HEAP32[$39 >> 2] = $4; //@line 16304
  $40 = $ReallocAsyncCtx4 + 8 | 0; //@line 16305
  HEAP32[$40 >> 2] = $34; //@line 16306
  $41 = $ReallocAsyncCtx4 + 12 | 0; //@line 16307
  HEAP32[$41 >> 2] = $32; //@line 16308
  $42 = $ReallocAsyncCtx4 + 16 | 0; //@line 16309
  HEAP32[$42 >> 2] = $8; //@line 16310
  $43 = $ReallocAsyncCtx4 + 20 | 0; //@line 16311
  HEAP32[$43 >> 2] = $31; //@line 16312
  $44 = $ReallocAsyncCtx4 + 24 | 0; //@line 16313
  HEAP32[$44 >> 2] = $6; //@line 16314
  $45 = $ReallocAsyncCtx4 + 28 | 0; //@line 16315
  HEAP32[$45 >> 2] = $14; //@line 16316
  $46 = $ReallocAsyncCtx4 + 32 | 0; //@line 16317
  HEAP32[$46 >> 2] = $16; //@line 16318
  $47 = $ReallocAsyncCtx4 + 36 | 0; //@line 16319
  HEAP32[$47 >> 2] = $18; //@line 16320
  sp = STACKTOP; //@line 16321
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $67 = 0, $68 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 31410
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31412
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31414
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31416
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 31418
 $10 = HEAP16[$0 + 18 >> 1] | 0; //@line 31420
 $12 = HEAP8[$0 + 20 >> 0] | 0; //@line 31422
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 31424
 $$pre$i = HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0; //@line 31427
 $17 = $4 + 12 | 0; //@line 31428
 HEAP32[$17 >> 2] = $$pre$i; //@line 31429
 if ($$pre$i | 0) {
  $20 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 31434
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 31435
  FUNCTION_TABLE_vii[$20 & 31]($2, $4); //@line 31436
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 397; //@line 31439
   $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 31440
   HEAP32[$21 >> 2] = $17; //@line 31441
   $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 31442
   HEAP32[$22 >> 2] = $2; //@line 31443
   $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 31444
   HEAP32[$23 >> 2] = $4; //@line 31445
   $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 31446
   HEAP32[$24 >> 2] = $17; //@line 31447
   $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 31448
   HEAP32[$25 >> 2] = $6; //@line 31449
   $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 31450
   HEAP16[$26 >> 1] = $8; //@line 31451
   $27 = $ReallocAsyncCtx2 + 26 | 0; //@line 31452
   HEAP16[$27 >> 1] = $10; //@line 31453
   $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 31454
   HEAP8[$28 >> 0] = $12; //@line 31455
   $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 31456
   HEAP32[$29 >> 2] = $14; //@line 31457
   sp = STACKTOP; //@line 31458
   return;
  }
  ___async_unwind = 0; //@line 31461
  HEAP32[$ReallocAsyncCtx2 >> 2] = 397; //@line 31462
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 31463
  HEAP32[$21 >> 2] = $17; //@line 31464
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 31465
  HEAP32[$22 >> 2] = $2; //@line 31466
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 31467
  HEAP32[$23 >> 2] = $4; //@line 31468
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 31469
  HEAP32[$24 >> 2] = $17; //@line 31470
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 31471
  HEAP32[$25 >> 2] = $6; //@line 31472
  $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 31473
  HEAP16[$26 >> 1] = $8; //@line 31474
  $27 = $ReallocAsyncCtx2 + 26 | 0; //@line 31475
  HEAP16[$27 >> 1] = $10; //@line 31476
  $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 31477
  HEAP8[$28 >> 0] = $12; //@line 31478
  $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 31479
  HEAP32[$29 >> 2] = $14; //@line 31480
  sp = STACKTOP; //@line 31481
  return;
 }
 $30 = $2 + 12 | 0; //@line 31484
 HEAP32[$30 >> 2] = 0; //@line 31485
 $31 = $2 + 16 | 0; //@line 31486
 HEAP32[$31 >> 2] = $6; //@line 31487
 HEAP16[$2 + 20 >> 1] = $8; //@line 31489
 HEAP16[$2 + 22 >> 1] = $10; //@line 31491
 HEAP8[$2 + 24 >> 0] = $12; //@line 31493
 $35 = _equeue_alloc($14, 28) | 0; //@line 31494
 if ($35 | 0) {
  $37 = HEAP32[$30 >> 2] | 0; //@line 31497
  if (!$37) {
   HEAP32[$35 + 12 >> 2] = 0; //@line 31501
   $50 = $35 + 16 | 0; //@line 31502
   HEAP32[$50 >> 2] = HEAP32[$31 >> 2]; //@line 31503
   HEAP32[$50 + 4 >> 2] = HEAP32[$31 + 4 >> 2]; //@line 31503
   HEAP8[$50 + 8 >> 0] = HEAP8[$31 + 8 >> 0] | 0; //@line 31503
   _equeue_event_dtor($35, 399); //@line 31504
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 31505
   $51 = _equeue_post($14, 400, $35) | 0; //@line 31506
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 401; //@line 31509
    $52 = $ReallocAsyncCtx6 + 4 | 0; //@line 31510
    HEAP32[$52 >> 2] = $30; //@line 31511
    $53 = $ReallocAsyncCtx6 + 8 | 0; //@line 31512
    HEAP32[$53 >> 2] = $17; //@line 31513
    $54 = $ReallocAsyncCtx6 + 12 | 0; //@line 31514
    HEAP32[$54 >> 2] = $2; //@line 31515
    $55 = $ReallocAsyncCtx6 + 16 | 0; //@line 31516
    HEAP32[$55 >> 2] = $4; //@line 31517
    sp = STACKTOP; //@line 31518
    return;
   }
   HEAP32[___async_retval >> 2] = $51; //@line 31522
   ___async_unwind = 0; //@line 31523
   HEAP32[$ReallocAsyncCtx6 >> 2] = 401; //@line 31524
   $52 = $ReallocAsyncCtx6 + 4 | 0; //@line 31525
   HEAP32[$52 >> 2] = $30; //@line 31526
   $53 = $ReallocAsyncCtx6 + 8 | 0; //@line 31527
   HEAP32[$53 >> 2] = $17; //@line 31528
   $54 = $ReallocAsyncCtx6 + 12 | 0; //@line 31529
   HEAP32[$54 >> 2] = $2; //@line 31530
   $55 = $ReallocAsyncCtx6 + 16 | 0; //@line 31531
   HEAP32[$55 >> 2] = $4; //@line 31532
   sp = STACKTOP; //@line 31533
   return;
  } else {
   $40 = HEAP32[$37 + 4 >> 2] | 0; //@line 31537
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 31538
   FUNCTION_TABLE_vii[$40 & 31]($35, $2); //@line 31539
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 398; //@line 31542
    $41 = $ReallocAsyncCtx3 + 4 | 0; //@line 31543
    HEAP32[$41 >> 2] = $30; //@line 31544
    $42 = $ReallocAsyncCtx3 + 8 | 0; //@line 31545
    HEAP32[$42 >> 2] = $35; //@line 31546
    $43 = $ReallocAsyncCtx3 + 12 | 0; //@line 31547
    HEAP32[$43 >> 2] = $31; //@line 31548
    $44 = $ReallocAsyncCtx3 + 16 | 0; //@line 31549
    HEAP32[$44 >> 2] = $14; //@line 31550
    $45 = $ReallocAsyncCtx3 + 20 | 0; //@line 31551
    HEAP32[$45 >> 2] = $30; //@line 31552
    $46 = $ReallocAsyncCtx3 + 24 | 0; //@line 31553
    HEAP32[$46 >> 2] = $17; //@line 31554
    $47 = $ReallocAsyncCtx3 + 28 | 0; //@line 31555
    HEAP32[$47 >> 2] = $2; //@line 31556
    $48 = $ReallocAsyncCtx3 + 32 | 0; //@line 31557
    HEAP32[$48 >> 2] = $4; //@line 31558
    sp = STACKTOP; //@line 31559
    return;
   }
   ___async_unwind = 0; //@line 31562
   HEAP32[$ReallocAsyncCtx3 >> 2] = 398; //@line 31563
   $41 = $ReallocAsyncCtx3 + 4 | 0; //@line 31564
   HEAP32[$41 >> 2] = $30; //@line 31565
   $42 = $ReallocAsyncCtx3 + 8 | 0; //@line 31566
   HEAP32[$42 >> 2] = $35; //@line 31567
   $43 = $ReallocAsyncCtx3 + 12 | 0; //@line 31568
   HEAP32[$43 >> 2] = $31; //@line 31569
   $44 = $ReallocAsyncCtx3 + 16 | 0; //@line 31570
   HEAP32[$44 >> 2] = $14; //@line 31571
   $45 = $ReallocAsyncCtx3 + 20 | 0; //@line 31572
   HEAP32[$45 >> 2] = $30; //@line 31573
   $46 = $ReallocAsyncCtx3 + 24 | 0; //@line 31574
   HEAP32[$46 >> 2] = $17; //@line 31575
   $47 = $ReallocAsyncCtx3 + 28 | 0; //@line 31576
   HEAP32[$47 >> 2] = $2; //@line 31577
   $48 = $ReallocAsyncCtx3 + 32 | 0; //@line 31578
   HEAP32[$48 >> 2] = $4; //@line 31579
   sp = STACKTOP; //@line 31580
   return;
  }
 }
 $57 = HEAP32[$30 >> 2] | 0; //@line 31584
 if ($57 | 0) {
  $60 = HEAP32[$57 + 8 >> 2] | 0; //@line 31588
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 31589
  FUNCTION_TABLE_vi[$60 & 1023]($2); //@line 31590
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 402; //@line 31593
   $61 = $ReallocAsyncCtx4 + 4 | 0; //@line 31594
   HEAP32[$61 >> 2] = $17; //@line 31595
   $62 = $ReallocAsyncCtx4 + 8 | 0; //@line 31596
   HEAP32[$62 >> 2] = 0; //@line 31597
   $63 = $ReallocAsyncCtx4 + 12 | 0; //@line 31598
   HEAP32[$63 >> 2] = $4; //@line 31599
   sp = STACKTOP; //@line 31600
   return;
  }
  ___async_unwind = 0; //@line 31603
  HEAP32[$ReallocAsyncCtx4 >> 2] = 402; //@line 31604
  $61 = $ReallocAsyncCtx4 + 4 | 0; //@line 31605
  HEAP32[$61 >> 2] = $17; //@line 31606
  $62 = $ReallocAsyncCtx4 + 8 | 0; //@line 31607
  HEAP32[$62 >> 2] = 0; //@line 31608
  $63 = $ReallocAsyncCtx4 + 12 | 0; //@line 31609
  HEAP32[$63 >> 2] = $4; //@line 31610
  sp = STACKTOP; //@line 31611
  return;
 }
 $64 = HEAP32[$17 >> 2] | 0; //@line 31614
 if (!$64) {
  HEAP32[___async_retval >> 2] = 0; //@line 31618
  return;
 }
 $67 = HEAP32[$64 + 8 >> 2] | 0; //@line 31622
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 31623
 FUNCTION_TABLE_vi[$67 & 1023]($4); //@line 31624
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 403; //@line 31627
  $68 = $ReallocAsyncCtx5 + 4 | 0; //@line 31628
  HEAP32[$68 >> 2] = 0; //@line 31629
  sp = STACKTOP; //@line 31630
  return;
 }
 ___async_unwind = 0; //@line 31633
 HEAP32[$ReallocAsyncCtx5 >> 2] = 403; //@line 31634
 $68 = $ReallocAsyncCtx5 + 4 | 0; //@line 31635
 HEAP32[$68 >> 2] = 0; //@line 31636
 sp = STACKTOP; //@line 31637
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_423($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $35 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $67 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 23772
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23774
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23776
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23778
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23780
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23782
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23784
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23786
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23788
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23792
 if (__ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($14 + 4 | 0) | 0) {
  _printf(12943, $16) | 0; //@line 23798
  _printf(13090, $20) | 0; //@line 23799
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 23800
  _putchar(10) | 0; //@line 23801
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 457; //@line 23804
   $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 23805
   HEAP32[$25 >> 2] = $12; //@line 23806
   $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 23807
   HEAP32[$26 >> 2] = $14; //@line 23808
   $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 23809
   HEAP32[$27 >> 2] = $2; //@line 23810
   $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 23811
   HEAP32[$28 >> 2] = $4; //@line 23812
   $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 23813
   HEAP32[$29 >> 2] = $6; //@line 23814
   $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 23815
   HEAP32[$30 >> 2] = $8; //@line 23816
   $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 23817
   HEAP32[$31 >> 2] = $10; //@line 23818
   sp = STACKTOP; //@line 23819
   return;
  }
  ___async_unwind = 0; //@line 23822
  HEAP32[$ReallocAsyncCtx7 >> 2] = 457; //@line 23823
  $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 23824
  HEAP32[$25 >> 2] = $12; //@line 23825
  $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 23826
  HEAP32[$26 >> 2] = $14; //@line 23827
  $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 23828
  HEAP32[$27 >> 2] = $2; //@line 23829
  $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 23830
  HEAP32[$28 >> 2] = $4; //@line 23831
  $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 23832
  HEAP32[$29 >> 2] = $6; //@line 23833
  $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 23834
  HEAP32[$30 >> 2] = $8; //@line 23835
  $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 23836
  HEAP32[$31 >> 2] = $10; //@line 23837
  sp = STACKTOP; //@line 23838
  return;
 }
 $32 = HEAP8[$12 >> 0] & -33; //@line 23842
 HEAP8[$12 >> 0] = $32; //@line 23843
 do {
  if (!($32 & 2)) {
   $63 = $32; //@line 23848
  } else {
   $35 = $32 & -3; //@line 23850
   HEAP8[$12 >> 0] = $35; //@line 23851
   if ((HEAP32[$14 + 360 >> 2] | 0) == 2) {
    _printf(12943, $4) | 0; //@line 23856
    _printf(12970, $8) | 0; //@line 23857
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 23858
    _putchar(10) | 0; //@line 23859
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 459; //@line 23862
     $39 = $ReallocAsyncCtx6 + 4 | 0; //@line 23863
     HEAP32[$39 >> 2] = $12; //@line 23864
     $40 = $ReallocAsyncCtx6 + 8 | 0; //@line 23865
     HEAP32[$40 >> 2] = $14; //@line 23866
     $41 = $ReallocAsyncCtx6 + 12 | 0; //@line 23867
     HEAP32[$41 >> 2] = $2; //@line 23868
     $42 = $ReallocAsyncCtx6 + 16 | 0; //@line 23869
     HEAP32[$42 >> 2] = $2; //@line 23870
     sp = STACKTOP; //@line 23871
     return;
    }
    ___async_unwind = 0; //@line 23874
    HEAP32[$ReallocAsyncCtx6 >> 2] = 459; //@line 23875
    $39 = $ReallocAsyncCtx6 + 4 | 0; //@line 23876
    HEAP32[$39 >> 2] = $12; //@line 23877
    $40 = $ReallocAsyncCtx6 + 8 | 0; //@line 23878
    HEAP32[$40 >> 2] = $14; //@line 23879
    $41 = $ReallocAsyncCtx6 + 12 | 0; //@line 23880
    HEAP32[$41 >> 2] = $2; //@line 23881
    $42 = $ReallocAsyncCtx6 + 16 | 0; //@line 23882
    HEAP32[$42 >> 2] = $2; //@line 23883
    sp = STACKTOP; //@line 23884
    return;
   }
   if ($35 & 4) {
    $61 = $35 & -5; //@line 23890
    HEAP8[$12 >> 0] = $61; //@line 23891
    $63 = $61; //@line 23892
    break;
   }
   $46 = HEAP32[$14 + 1324 >> 2] | 0; //@line 23896
   $47 = $46 + 16 | 0; //@line 23897
   $49 = __ZN11LoRaMacMcps14get_indicationEv($14 + 288 | 0) | 0; //@line 23899
   $50 = $46 + 28 | 0; //@line 23900
   $51 = HEAP32[$50 >> 2] | 0; //@line 23901
   if (!$51) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 23904
    _mbed_assert_internal(14997, 15002, 1102); //@line 23905
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 462; //@line 23908
     $53 = $ReallocAsyncCtx15 + 4 | 0; //@line 23909
     HEAP32[$53 >> 2] = $50; //@line 23910
     $54 = $ReallocAsyncCtx15 + 8 | 0; //@line 23911
     HEAP32[$54 >> 2] = $47; //@line 23912
     $55 = $ReallocAsyncCtx15 + 12 | 0; //@line 23913
     HEAP32[$55 >> 2] = $49; //@line 23914
     $56 = $ReallocAsyncCtx15 + 16 | 0; //@line 23915
     HEAP32[$56 >> 2] = $12; //@line 23916
     $57 = $ReallocAsyncCtx15 + 20 | 0; //@line 23917
     HEAP32[$57 >> 2] = $14; //@line 23918
     sp = STACKTOP; //@line 23919
     return;
    }
    ___async_unwind = 0; //@line 23922
    HEAP32[$ReallocAsyncCtx15 >> 2] = 462; //@line 23923
    $53 = $ReallocAsyncCtx15 + 4 | 0; //@line 23924
    HEAP32[$53 >> 2] = $50; //@line 23925
    $54 = $ReallocAsyncCtx15 + 8 | 0; //@line 23926
    HEAP32[$54 >> 2] = $47; //@line 23927
    $55 = $ReallocAsyncCtx15 + 12 | 0; //@line 23928
    HEAP32[$55 >> 2] = $49; //@line 23929
    $56 = $ReallocAsyncCtx15 + 16 | 0; //@line 23930
    HEAP32[$56 >> 2] = $12; //@line 23931
    $57 = $ReallocAsyncCtx15 + 20 | 0; //@line 23932
    HEAP32[$57 >> 2] = $14; //@line 23933
    sp = STACKTOP; //@line 23934
    return;
   } else {
    $58 = HEAP32[$51 >> 2] | 0; //@line 23937
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 23938
    FUNCTION_TABLE_vii[$58 & 31]($47, $49); //@line 23939
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 463; //@line 23942
     $59 = $ReallocAsyncCtx4 + 4 | 0; //@line 23943
     HEAP32[$59 >> 2] = $12; //@line 23944
     $60 = $ReallocAsyncCtx4 + 8 | 0; //@line 23945
     HEAP32[$60 >> 2] = $14; //@line 23946
     sp = STACKTOP; //@line 23947
     return;
    }
    ___async_unwind = 0; //@line 23950
    HEAP32[$ReallocAsyncCtx4 >> 2] = 463; //@line 23951
    $59 = $ReallocAsyncCtx4 + 4 | 0; //@line 23952
    HEAP32[$59 >> 2] = $12; //@line 23953
    $60 = $ReallocAsyncCtx4 + 8 | 0; //@line 23954
    HEAP32[$60 >> 2] = $14; //@line 23955
    sp = STACKTOP; //@line 23956
    return;
   }
  }
 } while (0);
 if (!($63 & 16)) {
  return;
 }
 HEAP8[$12 >> 0] = $63 & -17; //@line 23967
 $67 = HEAP32[$14 + 1324 >> 2] | 0; //@line 23969
 $68 = $67 + 48 | 0; //@line 23970
 $70 = __ZN11LoRaMacMlme14get_indicationEv($14 + 264 | 0) | 0; //@line 23972
 $71 = $67 + 60 | 0; //@line 23973
 $72 = HEAP32[$71 >> 2] | 0; //@line 23974
 if (!$72) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 23977
  _mbed_assert_internal(14997, 15002, 1102); //@line 23978
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 464; //@line 23981
   $74 = $ReallocAsyncCtx14 + 4 | 0; //@line 23982
   HEAP32[$74 >> 2] = $71; //@line 23983
   $75 = $ReallocAsyncCtx14 + 8 | 0; //@line 23984
   HEAP32[$75 >> 2] = $68; //@line 23985
   $76 = $ReallocAsyncCtx14 + 12 | 0; //@line 23986
   HEAP32[$76 >> 2] = $70; //@line 23987
   sp = STACKTOP; //@line 23988
   return;
  }
  ___async_unwind = 0; //@line 23991
  HEAP32[$ReallocAsyncCtx14 >> 2] = 464; //@line 23992
  $74 = $ReallocAsyncCtx14 + 4 | 0; //@line 23993
  HEAP32[$74 >> 2] = $71; //@line 23994
  $75 = $ReallocAsyncCtx14 + 8 | 0; //@line 23995
  HEAP32[$75 >> 2] = $68; //@line 23996
  $76 = $ReallocAsyncCtx14 + 12 | 0; //@line 23997
  HEAP32[$76 >> 2] = $70; //@line 23998
  sp = STACKTOP; //@line 23999
  return;
 } else {
  $77 = HEAP32[$72 >> 2] | 0; //@line 24002
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 24003
  FUNCTION_TABLE_vii[$77 & 31]($68, $70); //@line 24004
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 465; //@line 24007
   sp = STACKTOP; //@line 24008
   return;
  }
  ___async_unwind = 0; //@line 24011
  HEAP32[$ReallocAsyncCtx5 >> 2] = 465; //@line 24012
  sp = STACKTOP; //@line 24013
  return;
 }
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $15 = 0, $19 = 0, $2 = 0, $21 = 0, $26 = 0, $27 = 0, $3 = 0, $30 = 0, $33 = 0, $36 = 0, $42 = 0, $43 = 0, $5 = 0, $58 = 0, $59 = 0, $63 = 0, $65 = 0, $73 = 0, $74 = 0, $80 = 0, $83 = 0, $95 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx33 = 0, $AsyncCtx37 = 0, $AsyncCtx41 = 0, $AsyncCtx8 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 5828
 STACKTOP = STACKTOP + 64 | 0; //@line 5829
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 5829
 $vararg_buffer5 = sp + 24 | 0; //@line 5830
 $vararg_buffer3 = sp + 16 | 0; //@line 5831
 $2 = sp + 48 | 0; //@line 5834
 $3 = sp + 32 | 0; //@line 5835
 if (!$1) {
  _printf(11863, sp) | 0; //@line 5838
  _printf(12209, sp + 8 | 0) | 0; //@line 5839
  $AsyncCtx23 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5840
  _putchar(10) | 0; //@line 5841
  if (___async) {
   HEAP32[$AsyncCtx23 >> 2] = 197; //@line 5844
   sp = STACKTOP; //@line 5845
   STACKTOP = sp; //@line 5846
   return;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 5848
  STACKTOP = sp; //@line 5849
  return;
 }
 _printf(12115, $vararg_buffer3) | 0; //@line 5851
 $5 = $1 + 4 | 0; //@line 5852
 HEAP32[$vararg_buffer5 >> 2] = HEAP32[$5 >> 2]; //@line 5854
 _printf(12247, $vararg_buffer5) | 0; //@line 5855
 $AsyncCtx19 = _emscripten_alloc_async_context(24, sp) | 0; //@line 5856
 _putchar(10) | 0; //@line 5857
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 198; //@line 5860
  HEAP32[$AsyncCtx19 + 4 >> 2] = $3; //@line 5862
  HEAP32[$AsyncCtx19 + 8 >> 2] = $0; //@line 5864
  HEAP32[$AsyncCtx19 + 12 >> 2] = $2; //@line 5866
  HEAP32[$AsyncCtx19 + 16 >> 2] = $1; //@line 5868
  HEAP32[$AsyncCtx19 + 20 >> 2] = $5; //@line 5870
  sp = STACKTOP; //@line 5871
  STACKTOP = sp; //@line 5872
  return;
 }
 _emscripten_free_async_context($AsyncCtx19 | 0); //@line 5874
 if (HEAP32[$5 >> 2] | 0) {
  $14 = $0 + 1892 | 0; //@line 5878
  $15 = HEAP32[$14 >> 2] | 0; //@line 5879
  if (!$15) {
   STACKTOP = sp; //@line 5882
   return;
  }
  $19 = HEAP32[$0 + 2288 >> 2] | 0; //@line 5886
  $21 = HEAP32[$15 + 4 >> 2] | 0; //@line 5888
  $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 5889
  FUNCTION_TABLE_vii[$21 & 31]($2, $0 + 1880 | 0); //@line 5890
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 199; //@line 5893
   HEAP32[$AsyncCtx + 4 >> 2] = $14; //@line 5895
   HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 5897
   HEAP32[$AsyncCtx + 12 >> 2] = $19; //@line 5899
   HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 5901
   sp = STACKTOP; //@line 5902
   STACKTOP = sp; //@line 5903
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5905
  $26 = $2 + 12 | 0; //@line 5907
  HEAP32[$26 >> 2] = HEAP32[$14 >> 2]; //@line 5908
  $AsyncCtx33 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5909
  $27 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($19, $2, 9) | 0; //@line 5910
  if (___async) {
   HEAP32[$AsyncCtx33 >> 2] = 200; //@line 5913
   HEAP32[$AsyncCtx33 + 4 >> 2] = $26; //@line 5915
   HEAP32[$AsyncCtx33 + 8 >> 2] = $2; //@line 5917
   sp = STACKTOP; //@line 5918
   STACKTOP = sp; //@line 5919
   return;
  }
  _emscripten_free_async_context($AsyncCtx33 | 0); //@line 5921
  $30 = HEAP32[$26 >> 2] | 0; //@line 5922
  do {
   if ($30 | 0) {
    $33 = HEAP32[$30 + 8 >> 2] | 0; //@line 5927
    $AsyncCtx8 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5928
    FUNCTION_TABLE_vi[$33 & 1023]($2); //@line 5929
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 201; //@line 5932
     HEAP32[$AsyncCtx8 + 4 >> 2] = $27; //@line 5934
     sp = STACKTOP; //@line 5935
     STACKTOP = sp; //@line 5936
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx8 | 0); //@line 5938
     break;
    }
   }
  } while (0);
  if ($27 | 0) {
   STACKTOP = sp; //@line 5945
   return;
  }
  $AsyncCtx41 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5947
  _mbed_assert_internal(12827, 11911, 843); //@line 5948
  if (___async) {
   HEAP32[$AsyncCtx41 >> 2] = 202; //@line 5951
   sp = STACKTOP; //@line 5952
   STACKTOP = sp; //@line 5953
   return;
  }
  _emscripten_free_async_context($AsyncCtx41 | 0); //@line 5955
  STACKTOP = sp; //@line 5956
  return;
 }
 $36 = $0 + 1960 | 0; //@line 5958
 HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + 1; //@line 5961
 if (!(HEAP8[$1 + 18 >> 0] | 0)) {
  STACKTOP = sp; //@line 5966
  return;
 }
 $42 = $1 + 9 | 0; //@line 5968
 $43 = HEAP8[$42 >> 0] | 0; //@line 5969
 if ($43 << 24 >> 24 == -32) {
  STACKTOP = sp; //@line 5972
  return;
 }
 if (($43 + -1 & 255) >= 223) {
  if ((HEAP32[$1 >> 2] | 0) != 3) {
   STACKTOP = sp; //@line 5980
   return;
  }
 }
 HEAP32[$0 + 2240 >> 2] = 2; //@line 5984
 HEAP16[$0 + 2260 >> 1] = HEAP16[$1 + 16 >> 1] | 0; //@line 5988
 HEAP8[$0 + 2253 >> 0] = HEAP8[$42 >> 0] | 0; //@line 5991
 HEAP32[$0 + 2256 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 5995
 HEAP8[$0 + 2236 >> 0] = 1; //@line 5997
 $58 = $0 + 1892 | 0; //@line 5998
 $59 = HEAP32[$58 >> 2] | 0; //@line 5999
 do {
  if ($59 | 0) {
   $63 = HEAP32[$0 + 2288 >> 2] | 0; //@line 6005
   $65 = HEAP32[$59 + 4 >> 2] | 0; //@line 6007
   $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 6008
   FUNCTION_TABLE_vii[$65 & 31]($3, $0 + 1880 | 0); //@line 6009
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 203; //@line 6012
    HEAP32[$AsyncCtx11 + 4 >> 2] = $58; //@line 6014
    HEAP32[$AsyncCtx11 + 8 >> 2] = $3; //@line 6016
    HEAP32[$AsyncCtx11 + 12 >> 2] = $63; //@line 6018
    HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 6020
    HEAP32[$AsyncCtx11 + 20 >> 2] = $1; //@line 6022
    HEAP32[$AsyncCtx11 + 24 >> 2] = $42; //@line 6024
    HEAP32[$AsyncCtx11 + 28 >> 2] = $0; //@line 6026
    sp = STACKTOP; //@line 6027
    STACKTOP = sp; //@line 6028
    return;
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 6030
   $73 = $3 + 12 | 0; //@line 6032
   HEAP32[$73 >> 2] = HEAP32[$58 >> 2]; //@line 6033
   $AsyncCtx30 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6034
   $74 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($63, $3, 7) | 0; //@line 6035
   if (___async) {
    HEAP32[$AsyncCtx30 >> 2] = 204; //@line 6038
    HEAP32[$AsyncCtx30 + 4 >> 2] = $73; //@line 6040
    HEAP32[$AsyncCtx30 + 8 >> 2] = $3; //@line 6042
    HEAP32[$AsyncCtx30 + 12 >> 2] = $1; //@line 6044
    HEAP32[$AsyncCtx30 + 16 >> 2] = $42; //@line 6046
    HEAP32[$AsyncCtx30 + 20 >> 2] = $0; //@line 6048
    sp = STACKTOP; //@line 6049
    STACKTOP = sp; //@line 6050
    return;
   }
   _emscripten_free_async_context($AsyncCtx30 | 0); //@line 6052
   $80 = HEAP32[$73 >> 2] | 0; //@line 6053
   do {
    if ($80 | 0) {
     $83 = HEAP32[$80 + 8 >> 2] | 0; //@line 6058
     $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6059
     FUNCTION_TABLE_vi[$83 & 1023]($3); //@line 6060
     if (___async) {
      HEAP32[$AsyncCtx15 >> 2] = 205; //@line 6063
      HEAP32[$AsyncCtx15 + 4 >> 2] = $74; //@line 6065
      HEAP32[$AsyncCtx15 + 8 >> 2] = $1; //@line 6067
      HEAP32[$AsyncCtx15 + 12 >> 2] = $42; //@line 6069
      HEAP32[$AsyncCtx15 + 16 >> 2] = $0; //@line 6071
      sp = STACKTOP; //@line 6072
      STACKTOP = sp; //@line 6073
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx15 | 0); //@line 6075
      break;
     }
    }
   } while (0);
   if (!$74) {
    $AsyncCtx37 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6082
    _mbed_assert_internal(12827, 11911, 909); //@line 6083
    if (___async) {
     HEAP32[$AsyncCtx37 >> 2] = 206; //@line 6086
     HEAP32[$AsyncCtx37 + 4 >> 2] = $1; //@line 6088
     HEAP32[$AsyncCtx37 + 8 >> 2] = $42; //@line 6090
     HEAP32[$AsyncCtx37 + 12 >> 2] = $0; //@line 6092
     sp = STACKTOP; //@line 6093
     STACKTOP = sp; //@line 6094
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx37 | 0); //@line 6096
     break;
    }
   }
  }
 } while (0);
 if (!(HEAP8[$1 + 11 >> 0] | 0)) {
  STACKTOP = sp; //@line 6106
  return;
 }
 $95 = HEAP8[$42 >> 0] | 0; //@line 6108
 $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6109
 __ZN12LoRaWANStack9handle_txEhPKhth($0, $95, 0, 0, 2) | 0; //@line 6110
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 207; //@line 6113
  sp = STACKTOP; //@line 6114
  STACKTOP = sp; //@line 6115
  return;
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 6117
 STACKTOP = sp; //@line 6118
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_152($0) {
 $0 = $0 | 0;
 var $$024 = 0, $$05$i = 0, $$06$i = 0, $$1 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $108 = 0, $109 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $2 = 0, $20 = 0, $25 = 0, $27 = 0, $30 = 0, $33 = 0, $4 = 0, $41 = 0, $42 = 0, $45 = 0, $46 = 0, $49 = 0, $58 = 0, $6 = 0, $70 = 0, $73 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $86 = 0, $88 = 0, $9 = 0, $90 = 0, $92 = 0.0, $94 = 0.0, $96 = 0, $97 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 30349
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30351
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30353
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30355
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30357
 $9 = $2 + 968 | 0; //@line 30358
 if (HEAP32[$9 >> 2] | 0) {
  $$1 = -1e3; //@line 30362
  $109 = ___async_retval; //@line 30363
  HEAP32[$109 >> 2] = $$1; //@line 30364
  return;
 }
 $12 = $2 + 264 | 0; //@line 30367
 __ZN11LoRaMacMlme18reset_confirmationEv($12); //@line 30368
 $13 = HEAP32[$8 >> 2] | 0; //@line 30369
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($12) | 0) >> 2] = $13; //@line 30371
 $15 = $2 + 944 | 0; //@line 30372
 $17 = HEAP8[$15 >> 0] | 8; //@line 30374
 HEAP8[$15 >> 0] = $17; //@line 30375
 L5 : do {
  switch (HEAP32[$8 >> 2] | 0) {
  case 1:
   {
    $20 = __ZN14LoRaMacCommand15add_mac_commandEhhh($2 + 4 | 0, 2, 0, 0) | 0; //@line 30381
    if (!$20) {
     $$1 = 0; //@line 30384
     $109 = ___async_retval; //@line 30385
     HEAP32[$109 >> 2] = $$1; //@line 30386
     return;
    } else {
     $$024 = $20; //@line 30390
     $108 = HEAP8[$15 >> 0] | 0; //@line 30390
     break L5;
    }
    break;
   }
  case 0:
   {
    if (HEAP32[$9 >> 2] & 16 | 0) {
     $$1 = -1e3; //@line 30400
     $109 = ___async_retval; //@line 30401
     HEAP32[$109 >> 2] = $$1; //@line 30402
     return;
    }
    $25 = HEAP32[$8 + 4 >> 2] | 0; //@line 30406
    if (!$25) {
     $$1 = -1003; //@line 30409
     $109 = ___async_retval; //@line 30410
     HEAP32[$109 >> 2] = $$1; //@line 30411
     return;
    }
    $27 = $8 + 8 | 0; //@line 30414
    if (!(HEAP32[$27 >> 2] | 0)) {
     $$1 = -1003; //@line 30418
     $109 = ___async_retval; //@line 30419
     HEAP32[$109 >> 2] = $$1; //@line 30420
     return;
    }
    $30 = $8 + 12 | 0; //@line 30423
    if (!(HEAP32[$30 >> 2] | 0)) {
     $$1 = -1003; //@line 30427
     $109 = ___async_retval; //@line 30428
     HEAP32[$109 >> 2] = $$1; //@line 30429
     return;
    }
    $33 = $8 + 16 | 0; //@line 30432
    if (!(HEAP8[$33 >> 0] | 0)) {
     $$1 = -1003; //@line 30436
     $109 = ___async_retval; //@line 30437
     HEAP32[$109 >> 2] = $$1; //@line 30438
     return;
    }
    HEAP32[$2 + 900 >> 2] = $25; //@line 30442
    HEAP32[$2 + 904 >> 2] = HEAP32[$27 >> 2]; //@line 30445
    HEAP32[$2 + 908 >> 2] = HEAP32[$30 >> 2]; //@line 30448
    $41 = HEAP8[$33 >> 0] | 0; //@line 30449
    $42 = $2 + 896 | 0; //@line 30450
    HEAP8[$42 >> 0] = $41; //@line 30451
    $45 = __ZN7LoRaPHY21verify_nb_join_trialsEh(HEAP32[$2 >> 2] | 0, HEAP8[$33 >> 0] | 0) | 0; //@line 30454
    HEAP8[$42 >> 0] = $45 ? $41 : 12; //@line 30456
    $46 = $2 + 897 | 0; //@line 30457
    HEAP8[$46 >> 0] = 0; //@line 30458
    HEAP8[$2 + 372 >> 0] = 0; //@line 30461
    $49 = $2 + 956 | 0; //@line 30462
    HEAP32[$49 >> 2] = 0; //@line 30463
    HEAP32[$2 + 960 >> 2] = 0; //@line 30465
    HEAP32[$2 + 964 >> 2] = 0; //@line 30467
    HEAP8[$2 + 380 >> 0] = 0; //@line 30469
    HEAP8[$2 + 894 >> 0] = 1; //@line 30471
    HEAP8[$2 + 895 >> 0] = 1; //@line 30473
    HEAP8[$2 + 377 >> 0] = 0; //@line 30475
    HEAP8[$2 + 1152 >> 0] = 0; //@line 30477
    HEAP16[$2 + 1154 >> 1] = 1; //@line 30479
    $58 = $2 + 4 | 0; //@line 30480
    __ZN14LoRaMacCommand20clear_command_bufferEv($58); //@line 30481
    __ZN14LoRaMacCommand19clear_repeat_bufferEv($58); //@line 30482
    __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($58); //@line 30483
    HEAP8[$2 + 371 >> 0] = 1; //@line 30485
    __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$2 >> 2] | 0, $2 + 360 | 0, 0); //@line 30487
    HEAP8[$2 + 373 >> 0] = 0; //@line 30489
    HEAP8[$2 + 374 >> 0] = 0; //@line 30491
    $$05$i = HEAP32[$2 + 1208 >> 2] | 0; //@line 30493
    if ($$05$i | 0) {
     $$06$i = $$05$i; //@line 30496
     do {
      HEAP32[$$06$i + 36 >> 2] = 0; //@line 30499
      $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 30501
     } while (($$06$i | 0) != 0);
    }
    HEAP8[$2 + 378 >> 0] = 0; //@line 30511
    HEAP8[$2 + 379 >> 0] = 0; //@line 30513
    $70 = HEAP32[$2 >> 2] | 0; //@line 30514
    $73 = HEAP32[(HEAP32[$70 >> 2] | 0) + 52 >> 2] | 0; //@line 30517
    $77 = (HEAPU8[$46 >> 0] | 0) + 1 & 255; //@line 30521
    $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 30522
    $78 = FUNCTION_TABLE_iii[$73 & 31]($70, $77) | 0; //@line 30523
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 536; //@line 30526
     $79 = $ReallocAsyncCtx + 4 | 0; //@line 30527
     HEAP32[$79 >> 2] = $2; //@line 30528
     $80 = $ReallocAsyncCtx + 8 | 0; //@line 30529
     HEAP32[$80 >> 2] = $4; //@line 30530
     $81 = $ReallocAsyncCtx + 12 | 0; //@line 30531
     HEAP32[$81 >> 2] = $6; //@line 30532
     $82 = $ReallocAsyncCtx + 16 | 0; //@line 30533
     HEAP32[$82 >> 2] = $49; //@line 30534
     $83 = $ReallocAsyncCtx + 20 | 0; //@line 30535
     HEAP32[$83 >> 2] = $15; //@line 30536
     sp = STACKTOP; //@line 30537
     return;
    }
    HEAP8[___async_retval >> 0] = $78; //@line 30541
    ___async_unwind = 0; //@line 30542
    HEAP32[$ReallocAsyncCtx >> 2] = 536; //@line 30543
    $79 = $ReallocAsyncCtx + 4 | 0; //@line 30544
    HEAP32[$79 >> 2] = $2; //@line 30545
    $80 = $ReallocAsyncCtx + 8 | 0; //@line 30546
    HEAP32[$80 >> 2] = $4; //@line 30547
    $81 = $ReallocAsyncCtx + 12 | 0; //@line 30548
    HEAP32[$81 >> 2] = $6; //@line 30549
    $82 = $ReallocAsyncCtx + 16 | 0; //@line 30550
    HEAP32[$82 >> 2] = $49; //@line 30551
    $83 = $ReallocAsyncCtx + 20 | 0; //@line 30552
    HEAP32[$83 >> 2] = $15; //@line 30553
    sp = STACKTOP; //@line 30554
    return;
   }
  case 2:
   {
    $86 = HEAP8[$2 + 378 >> 0] | 0; //@line 30560
    $88 = HEAP8[$2 + 1097 >> 0] | 0; //@line 30562
    $90 = HEAP8[$2 + 1096 >> 0] | 0; //@line 30564
    $92 = +HEAPF32[$2 + 1144 >> 2]; //@line 30566
    $94 = +HEAPF32[$2 + 1148 >> 2]; //@line 30568
    $96 = HEAP16[$8 + 4 >> 1] | 0; //@line 30570
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 30571
    __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft($12, $86, $88, $90, $92, $94, $96); //@line 30572
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 539; //@line 30575
     $97 = $ReallocAsyncCtx7 + 4 | 0; //@line 30576
     HEAP32[$97 >> 2] = $2; //@line 30577
     $98 = $ReallocAsyncCtx7 + 8 | 0; //@line 30578
     HEAP32[$98 >> 2] = $9; //@line 30579
     sp = STACKTOP; //@line 30580
     return;
    }
    ___async_unwind = 0; //@line 30583
    HEAP32[$ReallocAsyncCtx7 >> 2] = 539; //@line 30584
    $97 = $ReallocAsyncCtx7 + 4 | 0; //@line 30585
    HEAP32[$97 >> 2] = $2; //@line 30586
    $98 = $ReallocAsyncCtx7 + 8 | 0; //@line 30587
    HEAP32[$98 >> 2] = $9; //@line 30588
    sp = STACKTOP; //@line 30589
    return;
   }
  case 3:
   {
    $101 = HEAP8[$8 + 12 >> 0] | 0; //@line 30596
    $102 = HEAP16[$8 + 4 >> 1] | 0; //@line 30597
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 30598
    __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft($12, 0, 0, $101, 0.0, 0.0, $102); //@line 30599
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 541; //@line 30602
     $103 = $ReallocAsyncCtx6 + 4 | 0; //@line 30603
     HEAP32[$103 >> 2] = $2; //@line 30604
     $104 = $ReallocAsyncCtx6 + 8 | 0; //@line 30605
     HEAP32[$104 >> 2] = $9; //@line 30606
     sp = STACKTOP; //@line 30607
     return;
    }
    ___async_unwind = 0; //@line 30610
    HEAP32[$ReallocAsyncCtx6 >> 2] = 541; //@line 30611
    $103 = $ReallocAsyncCtx6 + 4 | 0; //@line 30612
    HEAP32[$103 >> 2] = $2; //@line 30613
    $104 = $ReallocAsyncCtx6 + 8 | 0; //@line 30614
    HEAP32[$104 >> 2] = $9; //@line 30615
    sp = STACKTOP; //@line 30616
    return;
   }
  default:
   {
    $$024 = -1002; //@line 30621
    $108 = $17; //@line 30621
   }
  }
 } while (0);
 HEAP8[$2 + 373 >> 0] = 0; //@line 30626
 HEAP8[$15 >> 0] = $108 & -9; //@line 30628
 $$1 = $$024; //@line 30629
 $109 = ___async_retval; //@line 30630
 HEAP32[$109 >> 2] = $$1; //@line 30631
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_1($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 16331
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16333
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16335
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16337
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16339
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16345
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16347
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 16349
 $$pre$i$i = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 16350
 HEAP32[HEAP32[$0 + 24 >> 2] >> 2] = $$pre$i$i; //@line 16352
 if ($$pre$i$i | 0) {
  $22 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 16356
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 16357
  FUNCTION_TABLE_vi[$22 & 1023]($2); //@line 16358
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 555; //@line 16361
   $23 = $ReallocAsyncCtx3 + 4 | 0; //@line 16362
   HEAP32[$23 >> 2] = $2; //@line 16363
   $24 = $ReallocAsyncCtx3 + 8 | 0; //@line 16364
   HEAP32[$24 >> 2] = $4; //@line 16365
   $25 = $ReallocAsyncCtx3 + 12 | 0; //@line 16366
   HEAP32[$25 >> 2] = $6; //@line 16367
   $26 = $ReallocAsyncCtx3 + 16 | 0; //@line 16368
   HEAP32[$26 >> 2] = $8; //@line 16369
   $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 16370
   HEAP32[$27 >> 2] = $14; //@line 16371
   $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 16372
   HEAP32[$28 >> 2] = $16; //@line 16373
   $29 = $ReallocAsyncCtx3 + 28 | 0; //@line 16374
   HEAP32[$29 >> 2] = $18; //@line 16375
   sp = STACKTOP; //@line 16376
   return;
  }
  ___async_unwind = 0; //@line 16379
  HEAP32[$ReallocAsyncCtx3 >> 2] = 555; //@line 16380
  $23 = $ReallocAsyncCtx3 + 4 | 0; //@line 16381
  HEAP32[$23 >> 2] = $2; //@line 16382
  $24 = $ReallocAsyncCtx3 + 8 | 0; //@line 16383
  HEAP32[$24 >> 2] = $4; //@line 16384
  $25 = $ReallocAsyncCtx3 + 12 | 0; //@line 16385
  HEAP32[$25 >> 2] = $6; //@line 16386
  $26 = $ReallocAsyncCtx3 + 16 | 0; //@line 16387
  HEAP32[$26 >> 2] = $8; //@line 16388
  $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 16389
  HEAP32[$27 >> 2] = $14; //@line 16390
  $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 16391
  HEAP32[$28 >> 2] = $16; //@line 16392
  $29 = $ReallocAsyncCtx3 + 28 | 0; //@line 16393
  HEAP32[$29 >> 2] = $18; //@line 16394
  sp = STACKTOP; //@line 16395
  return;
 }
 $30 = $4 + 12 | 0; //@line 16398
 HEAP32[$4 >> 2] = 7; //@line 16399
 HEAP32[$4 + 4 >> 2] = 0; //@line 16401
 HEAP32[$4 + 8 >> 2] = $6; //@line 16403
 HEAP32[$30 >> 2] = 860; //@line 16404
 $31 = $6 + 1244 | 0; //@line 16405
 if (($31 | 0) == ($4 | 0)) {
  $58 = HEAP32[217] | 0; //@line 16409
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 16410
  FUNCTION_TABLE_vi[$58 & 1023]($4); //@line 16411
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 558; //@line 16414
   $59 = $ReallocAsyncCtx6 + 4 | 0; //@line 16415
   HEAP32[$59 >> 2] = $8; //@line 16416
   $60 = $ReallocAsyncCtx6 + 8 | 0; //@line 16417
   HEAP32[$60 >> 2] = $6; //@line 16418
   $61 = $ReallocAsyncCtx6 + 12 | 0; //@line 16419
   HEAP32[$61 >> 2] = $14; //@line 16420
   $62 = $ReallocAsyncCtx6 + 16 | 0; //@line 16421
   HEAP32[$62 >> 2] = $16; //@line 16422
   $63 = $ReallocAsyncCtx6 + 20 | 0; //@line 16423
   HEAP32[$63 >> 2] = $4; //@line 16424
   $64 = $ReallocAsyncCtx6 + 24 | 0; //@line 16425
   HEAP32[$64 >> 2] = $18; //@line 16426
   sp = STACKTOP; //@line 16427
   return;
  }
  ___async_unwind = 0; //@line 16430
  HEAP32[$ReallocAsyncCtx6 >> 2] = 558; //@line 16431
  $59 = $ReallocAsyncCtx6 + 4 | 0; //@line 16432
  HEAP32[$59 >> 2] = $8; //@line 16433
  $60 = $ReallocAsyncCtx6 + 8 | 0; //@line 16434
  HEAP32[$60 >> 2] = $6; //@line 16435
  $61 = $ReallocAsyncCtx6 + 12 | 0; //@line 16436
  HEAP32[$61 >> 2] = $14; //@line 16437
  $62 = $ReallocAsyncCtx6 + 16 | 0; //@line 16438
  HEAP32[$62 >> 2] = $16; //@line 16439
  $63 = $ReallocAsyncCtx6 + 20 | 0; //@line 16440
  HEAP32[$63 >> 2] = $4; //@line 16441
  $64 = $ReallocAsyncCtx6 + 24 | 0; //@line 16442
  HEAP32[$64 >> 2] = $18; //@line 16443
  sp = STACKTOP; //@line 16444
  return;
 }
 $33 = $6 + 1256 | 0; //@line 16447
 $34 = HEAP32[$33 >> 2] | 0; //@line 16448
 if (!$34) {
  $48 = HEAP32[216] | 0; //@line 16452
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 16453
  FUNCTION_TABLE_vii[$48 & 31]($31, $4); //@line 16454
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 557; //@line 16457
   $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 16458
   HEAP32[$49 >> 2] = $4; //@line 16459
   $50 = $ReallocAsyncCtx5 + 8 | 0; //@line 16460
   HEAP32[$50 >> 2] = $8; //@line 16461
   $51 = $ReallocAsyncCtx5 + 12 | 0; //@line 16462
   HEAP32[$51 >> 2] = $6; //@line 16463
   $52 = $ReallocAsyncCtx5 + 16 | 0; //@line 16464
   HEAP32[$52 >> 2] = $14; //@line 16465
   $53 = $ReallocAsyncCtx5 + 20 | 0; //@line 16466
   HEAP32[$53 >> 2] = $16; //@line 16467
   $54 = $ReallocAsyncCtx5 + 24 | 0; //@line 16468
   HEAP32[$54 >> 2] = $30; //@line 16469
   $55 = $ReallocAsyncCtx5 + 28 | 0; //@line 16470
   HEAP32[$55 >> 2] = $33; //@line 16471
   $56 = $ReallocAsyncCtx5 + 32 | 0; //@line 16472
   HEAP32[$56 >> 2] = $18; //@line 16473
   sp = STACKTOP; //@line 16474
   return;
  }
  ___async_unwind = 0; //@line 16477
  HEAP32[$ReallocAsyncCtx5 >> 2] = 557; //@line 16478
  $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 16479
  HEAP32[$49 >> 2] = $4; //@line 16480
  $50 = $ReallocAsyncCtx5 + 8 | 0; //@line 16481
  HEAP32[$50 >> 2] = $8; //@line 16482
  $51 = $ReallocAsyncCtx5 + 12 | 0; //@line 16483
  HEAP32[$51 >> 2] = $6; //@line 16484
  $52 = $ReallocAsyncCtx5 + 16 | 0; //@line 16485
  HEAP32[$52 >> 2] = $14; //@line 16486
  $53 = $ReallocAsyncCtx5 + 20 | 0; //@line 16487
  HEAP32[$53 >> 2] = $16; //@line 16488
  $54 = $ReallocAsyncCtx5 + 24 | 0; //@line 16489
  HEAP32[$54 >> 2] = $30; //@line 16490
  $55 = $ReallocAsyncCtx5 + 28 | 0; //@line 16491
  HEAP32[$55 >> 2] = $33; //@line 16492
  $56 = $ReallocAsyncCtx5 + 32 | 0; //@line 16493
  HEAP32[$56 >> 2] = $18; //@line 16494
  sp = STACKTOP; //@line 16495
  return;
 } else {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 16499
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 16500
  FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 16501
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 556; //@line 16504
   $38 = $ReallocAsyncCtx4 + 4 | 0; //@line 16505
   HEAP32[$38 >> 2] = $4; //@line 16506
   $39 = $ReallocAsyncCtx4 + 8 | 0; //@line 16507
   HEAP32[$39 >> 2] = $33; //@line 16508
   $40 = $ReallocAsyncCtx4 + 12 | 0; //@line 16509
   HEAP32[$40 >> 2] = $31; //@line 16510
   $41 = $ReallocAsyncCtx4 + 16 | 0; //@line 16511
   HEAP32[$41 >> 2] = $8; //@line 16512
   $42 = $ReallocAsyncCtx4 + 20 | 0; //@line 16513
   HEAP32[$42 >> 2] = $30; //@line 16514
   $43 = $ReallocAsyncCtx4 + 24 | 0; //@line 16515
   HEAP32[$43 >> 2] = $6; //@line 16516
   $44 = $ReallocAsyncCtx4 + 28 | 0; //@line 16517
   HEAP32[$44 >> 2] = $14; //@line 16518
   $45 = $ReallocAsyncCtx4 + 32 | 0; //@line 16519
   HEAP32[$45 >> 2] = $16; //@line 16520
   $46 = $ReallocAsyncCtx4 + 36 | 0; //@line 16521
   HEAP32[$46 >> 2] = $18; //@line 16522
   sp = STACKTOP; //@line 16523
   return;
  }
  ___async_unwind = 0; //@line 16526
  HEAP32[$ReallocAsyncCtx4 >> 2] = 556; //@line 16527
  $38 = $ReallocAsyncCtx4 + 4 | 0; //@line 16528
  HEAP32[$38 >> 2] = $4; //@line 16529
  $39 = $ReallocAsyncCtx4 + 8 | 0; //@line 16530
  HEAP32[$39 >> 2] = $33; //@line 16531
  $40 = $ReallocAsyncCtx4 + 12 | 0; //@line 16532
  HEAP32[$40 >> 2] = $31; //@line 16533
  $41 = $ReallocAsyncCtx4 + 16 | 0; //@line 16534
  HEAP32[$41 >> 2] = $8; //@line 16535
  $42 = $ReallocAsyncCtx4 + 20 | 0; //@line 16536
  HEAP32[$42 >> 2] = $30; //@line 16537
  $43 = $ReallocAsyncCtx4 + 24 | 0; //@line 16538
  HEAP32[$43 >> 2] = $6; //@line 16539
  $44 = $ReallocAsyncCtx4 + 28 | 0; //@line 16540
  HEAP32[$44 >> 2] = $14; //@line 16541
  $45 = $ReallocAsyncCtx4 + 32 | 0; //@line 16542
  HEAP32[$45 >> 2] = $16; //@line 16543
  $46 = $ReallocAsyncCtx4 + 36 | 0; //@line 16544
  HEAP32[$46 >> 2] = $18; //@line 16545
  sp = STACKTOP; //@line 16546
  return;
 }
}
function _schedule_interrupt__async_cb($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $102 = 0, $105 = 0, $107 = 0, $110 = 0, $111 = 0, $113 = 0, $116 = 0, $12 = 0, $124 = 0, $125 = 0, $126 = 0, $128 = 0, $130 = 0, $135 = 0, $142 = 0, $144 = 0, $146 = 0, $149 = 0, $151 = 0, $158 = 0, $159 = 0, $162 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $177 = 0, $180 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $60 = 0, $61 = 0, $67 = 0, $68 = 0, $69 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $86 = 0, $87 = 0, $9 = 0, $93 = 0, $94 = 0, $95 = 0, $97 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4464
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4466
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4468
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 4472
 $8 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 4473
 $9 = $8 + 32 | 0; //@line 4474
 if (($AsyncRetVal | 0) != (HEAP32[$9 >> 2] | 0)) {
  $12 = $2 + 32 | 0; //@line 4478
  $17 = $AsyncRetVal - (HEAP32[$12 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 4483
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 4484
  $19 = HEAP32[$2 + 8 >> 2] | 0; //@line 4486
  L4 : do {
   if (($19 | 0) < 1e6) {
    switch ($19 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 6; //@line 4495
      break L4;
     }
    }
    $20 = ___muldi3($17 | 0, 0, 1e6, 0) | 0; //@line 4499
    $22 = _bitshift64Lshr($20 | 0, tempRet0 | 0, 15) | 0; //@line 4501
    $23 = tempRet0; //@line 4502
    $26 = $2 + 40 | 0; //@line 4505
    $27 = $26; //@line 4506
    $33 = _i64Add(HEAP32[$27 >> 2] | 0, HEAP32[$27 + 4 >> 2] | 0, $17 * 1e6 & 32704 | 0, 0) | 0; //@line 4512
    $34 = tempRet0; //@line 4513
    $35 = $26; //@line 4514
    HEAP32[$35 >> 2] = $33; //@line 4516
    HEAP32[$35 + 4 >> 2] = $34; //@line 4519
    if ($34 >>> 0 < 0 | ($34 | 0) == 0 & $33 >>> 0 < 32768) {
     $93 = $22; //@line 4526
     $94 = $23; //@line 4526
    } else {
     $44 = _i64Add($22 | 0, $23 | 0, 1, 0) | 0; //@line 4528
     $45 = tempRet0; //@line 4529
     $46 = _i64Add($33 | 0, $34 | 0, -32768, -1) | 0; //@line 4530
     $48 = $26; //@line 4532
     HEAP32[$48 >> 2] = $46; //@line 4534
     HEAP32[$48 + 4 >> 2] = tempRet0; //@line 4537
     $93 = $44; //@line 4538
     $94 = $45; //@line 4538
    }
   } else {
    switch ($19 | 0) {
    case 1e6:
     {
      $93 = $17; //@line 4543
      $94 = 0; //@line 4543
      break;
     }
    default:
     {
      label = 6; //@line 4547
     }
    }
   }
  } while (0);
  if ((label | 0) == 6) {
   $52 = ___muldi3($17 | 0, 0, 1e6, 0) | 0; //@line 4553
   $53 = tempRet0; //@line 4554
   $54 = ___udivdi3($52 | 0, $53 | 0, $19 | 0, 0) | 0; //@line 4555
   $55 = tempRet0; //@line 4556
   $56 = ___muldi3($54 | 0, $55 | 0, $19 | 0, 0) | 0; //@line 4557
   $58 = _i64Subtract($52 | 0, $53 | 0, $56 | 0, tempRet0 | 0) | 0; //@line 4559
   $60 = $2 + 40 | 0; //@line 4561
   $61 = $60; //@line 4562
   $67 = _i64Add($58 | 0, tempRet0 | 0, HEAP32[$61 >> 2] | 0, HEAP32[$61 + 4 >> 2] | 0) | 0; //@line 4568
   $68 = tempRet0; //@line 4569
   $69 = $60; //@line 4570
   HEAP32[$69 >> 2] = $67; //@line 4572
   HEAP32[$69 + 4 >> 2] = $68; //@line 4575
   if ($68 >>> 0 < 0 | ($68 | 0) == 0 & $67 >>> 0 < $19 >>> 0) {
    $93 = $54; //@line 4582
    $94 = $55; //@line 4582
   } else {
    $78 = _i64Add($54 | 0, $55 | 0, 1, 0) | 0; //@line 4584
    $79 = tempRet0; //@line 4585
    $80 = _i64Subtract($67 | 0, $68 | 0, $19 | 0, 0) | 0; //@line 4586
    $82 = $60; //@line 4588
    HEAP32[$82 >> 2] = $80; //@line 4590
    HEAP32[$82 + 4 >> 2] = tempRet0; //@line 4593
    $93 = $78; //@line 4594
    $94 = $79; //@line 4594
   }
  }
  $86 = $2 + 48 | 0; //@line 4597
  $87 = $86; //@line 4598
  $95 = _i64Add(HEAP32[$87 >> 2] | 0, HEAP32[$87 + 4 >> 2] | 0, $93 | 0, $94 | 0) | 0; //@line 4604
  $97 = $86; //@line 4606
  HEAP32[$97 >> 2] = $95; //@line 4608
  HEAP32[$97 + 4 >> 2] = tempRet0; //@line 4611
 }
 $102 = HEAP32[$8 + 4 >> 2] | 0; //@line 4614
 if (!$102) {
  $177 = (HEAP32[$2 + 16 >> 2] | 0) + (HEAP32[$2 + 32 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 4624
  $180 = HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] | 0; //@line 4627
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 4628
  FUNCTION_TABLE_vi[$180 & 1023]($177); //@line 4629
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 696; //@line 4632
   sp = STACKTOP; //@line 4633
   return;
  }
  ___async_unwind = 0; //@line 4636
  HEAP32[$ReallocAsyncCtx7 >> 2] = 696; //@line 4637
  sp = STACKTOP; //@line 4638
  return;
 }
 $105 = $8 + 48 | 0; //@line 4642
 $107 = HEAP32[$105 >> 2] | 0; //@line 4644
 $110 = HEAP32[$105 + 4 >> 2] | 0; //@line 4647
 $111 = $102; //@line 4648
 $113 = HEAP32[$111 >> 2] | 0; //@line 4650
 $116 = HEAP32[$111 + 4 >> 2] | 0; //@line 4653
 if (!($116 >>> 0 > $110 >>> 0 | ($116 | 0) == ($110 | 0) & $113 >>> 0 > $107 >>> 0)) {
  $124 = HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] | 0; //@line 4662
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 4663
  FUNCTION_TABLE_v[$124 & 7](); //@line 4664
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 691; //@line 4667
   sp = STACKTOP; //@line 4668
   return;
  }
  ___async_unwind = 0; //@line 4671
  HEAP32[$ReallocAsyncCtx2 >> 2] = 691; //@line 4672
  sp = STACKTOP; //@line 4673
  return;
 }
 $125 = _i64Subtract($113 | 0, $116 | 0, $107 | 0, $110 | 0) | 0; //@line 4676
 $126 = tempRet0; //@line 4677
 $128 = HEAP32[$8 + 16 >> 2] | 0; //@line 4679
 $130 = $8 + 24 | 0; //@line 4681
 $135 = HEAP32[$130 + 4 >> 2] | 0; //@line 4686
 L28 : do {
  if ($126 >>> 0 > $135 >>> 0 | (($126 | 0) == ($135 | 0) ? $125 >>> 0 > (HEAP32[$130 >> 2] | 0) >>> 0 : 0)) {
   $$0$i = $128; //@line 4694
  } else {
   $142 = HEAP32[$8 + 8 >> 2] | 0; //@line 4697
   L30 : do {
    if (($142 | 0) < 1e6) {
     switch ($142 | 0) {
     case 32768:
      {
       break;
      }
     default:
      {
       break L30;
      }
     }
     $144 = _bitshift64Shl($125 | 0, $126 | 0, 15) | 0; //@line 4709
     $146 = ___udivdi3($144 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 4711
     $$0$i = $128 >>> 0 < $146 >>> 0 ? $128 : $146; //@line 4715
     break L28;
    } else {
     switch ($142 | 0) {
     case 1e6:
      {
       break;
      }
     default:
      {
       break L30;
      }
     }
     $$0$i = $128 >>> 0 < $125 >>> 0 ? $128 : $125; //@line 4728
     break L28;
    }
   } while (0);
   $149 = ___muldi3($125 | 0, $126 | 0, $142 | 0, 0) | 0; //@line 4732
   $151 = ___udivdi3($149 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 4734
   $$0$i = $128 >>> 0 < $151 >>> 0 ? $128 : $151; //@line 4738
  }
 } while (0);
 $158 = (HEAP32[$9 >> 2] | 0) + $$0$i & HEAP32[$8 + 12 >> 2]; //@line 4745
 $159 = $2 + 32 | 0; //@line 4746
 $162 = HEAP32[$4 >> 2] | 0; //@line 4749
 if (($158 | 0) == (HEAP32[$159 >> 2] | 0)) {
  $164 = HEAP32[$162 + 20 >> 2] | 0; //@line 4752
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 4753
  FUNCTION_TABLE_v[$164 & 7](); //@line 4754
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 692; //@line 4757
   sp = STACKTOP; //@line 4758
   return;
  }
  ___async_unwind = 0; //@line 4761
  HEAP32[$ReallocAsyncCtx3 >> 2] = 692; //@line 4762
  sp = STACKTOP; //@line 4763
  return;
 } else {
  $166 = HEAP32[$162 + 16 >> 2] | 0; //@line 4767
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 4768
  FUNCTION_TABLE_vi[$166 & 1023]($158); //@line 4769
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 693; //@line 4772
   $167 = $ReallocAsyncCtx4 + 4 | 0; //@line 4773
   HEAP32[$167 >> 2] = $4; //@line 4774
   $168 = $ReallocAsyncCtx4 + 8 | 0; //@line 4775
   HEAP32[$168 >> 2] = $159; //@line 4776
   $169 = $ReallocAsyncCtx4 + 12 | 0; //@line 4777
   HEAP32[$169 >> 2] = $158; //@line 4778
   sp = STACKTOP; //@line 4779
   return;
  }
  ___async_unwind = 0; //@line 4782
  HEAP32[$ReallocAsyncCtx4 >> 2] = 693; //@line 4783
  $167 = $ReallocAsyncCtx4 + 4 | 0; //@line 4784
  HEAP32[$167 >> 2] = $4; //@line 4785
  $168 = $ReallocAsyncCtx4 + 8 | 0; //@line 4786
  HEAP32[$168 >> 2] = $159; //@line 4787
  $169 = $ReallocAsyncCtx4 + 12 | 0; //@line 4788
  HEAP32[$169 >> 2] = $158; //@line 4789
  sp = STACKTOP; //@line 4790
  return;
 }
}
function _mbed_die() {
 var $0 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx43 = 0, $AsyncCtx47 = 0, $AsyncCtx51 = 0, $AsyncCtx55 = 0, $AsyncCtx59 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6150
 STACKTOP = STACKTOP + 32 | 0; //@line 6151
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 6151
 $0 = sp; //@line 6152
 _gpio_init_out($0, 50); //@line 6153
 while (1) {
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6156
  $AsyncCtx59 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6157
  _wait_ms(150); //@line 6158
  if (___async) {
   label = 3; //@line 6161
   break;
  }
  _emscripten_free_async_context($AsyncCtx59 | 0); //@line 6164
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6166
  $AsyncCtx55 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6167
  _wait_ms(150); //@line 6168
  if (___async) {
   label = 5; //@line 6171
   break;
  }
  _emscripten_free_async_context($AsyncCtx55 | 0); //@line 6174
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6176
  $AsyncCtx51 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6177
  _wait_ms(150); //@line 6178
  if (___async) {
   label = 7; //@line 6181
   break;
  }
  _emscripten_free_async_context($AsyncCtx51 | 0); //@line 6184
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6186
  $AsyncCtx47 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6187
  _wait_ms(150); //@line 6188
  if (___async) {
   label = 9; //@line 6191
   break;
  }
  _emscripten_free_async_context($AsyncCtx47 | 0); //@line 6194
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6196
  $AsyncCtx43 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6197
  _wait_ms(150); //@line 6198
  if (___async) {
   label = 11; //@line 6201
   break;
  }
  _emscripten_free_async_context($AsyncCtx43 | 0); //@line 6204
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6206
  $AsyncCtx39 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6207
  _wait_ms(150); //@line 6208
  if (___async) {
   label = 13; //@line 6211
   break;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 6214
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6216
  $AsyncCtx35 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6217
  _wait_ms(150); //@line 6218
  if (___async) {
   label = 15; //@line 6221
   break;
  }
  _emscripten_free_async_context($AsyncCtx35 | 0); //@line 6224
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6226
  $AsyncCtx31 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6227
  _wait_ms(150); //@line 6228
  if (___async) {
   label = 17; //@line 6231
   break;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 6234
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6236
  $AsyncCtx27 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6237
  _wait_ms(400); //@line 6238
  if (___async) {
   label = 19; //@line 6241
   break;
  }
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 6244
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6246
  $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6247
  _wait_ms(400); //@line 6248
  if (___async) {
   label = 21; //@line 6251
   break;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 6254
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6256
  $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6257
  _wait_ms(400); //@line 6258
  if (___async) {
   label = 23; //@line 6261
   break;
  }
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 6264
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6266
  $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6267
  _wait_ms(400); //@line 6268
  if (___async) {
   label = 25; //@line 6271
   break;
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 6274
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6276
  $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6277
  _wait_ms(400); //@line 6278
  if (___async) {
   label = 27; //@line 6281
   break;
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 6284
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6286
  $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6287
  _wait_ms(400); //@line 6288
  if (___async) {
   label = 29; //@line 6291
   break;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6294
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6296
  $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6297
  _wait_ms(400); //@line 6298
  if (___async) {
   label = 31; //@line 6301
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6304
  _emscripten_asm_const_iii(3, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6306
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6307
  _wait_ms(400); //@line 6308
  if (___async) {
   label = 33; //@line 6311
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6314
 }
 switch (label | 0) {
 case 3:
  {
   HEAP32[$AsyncCtx59 >> 2] = 701; //@line 6318
   HEAP32[$AsyncCtx59 + 4 >> 2] = $0; //@line 6320
   sp = STACKTOP; //@line 6321
   STACKTOP = sp; //@line 6322
   return;
  }
 case 5:
  {
   HEAP32[$AsyncCtx55 >> 2] = 702; //@line 6326
   HEAP32[$AsyncCtx55 + 4 >> 2] = $0; //@line 6328
   sp = STACKTOP; //@line 6329
   STACKTOP = sp; //@line 6330
   return;
  }
 case 7:
  {
   HEAP32[$AsyncCtx51 >> 2] = 703; //@line 6334
   HEAP32[$AsyncCtx51 + 4 >> 2] = $0; //@line 6336
   sp = STACKTOP; //@line 6337
   STACKTOP = sp; //@line 6338
   return;
  }
 case 9:
  {
   HEAP32[$AsyncCtx47 >> 2] = 704; //@line 6342
   HEAP32[$AsyncCtx47 + 4 >> 2] = $0; //@line 6344
   sp = STACKTOP; //@line 6345
   STACKTOP = sp; //@line 6346
   return;
  }
 case 11:
  {
   HEAP32[$AsyncCtx43 >> 2] = 705; //@line 6350
   HEAP32[$AsyncCtx43 + 4 >> 2] = $0; //@line 6352
   sp = STACKTOP; //@line 6353
   STACKTOP = sp; //@line 6354
   return;
  }
 case 13:
  {
   HEAP32[$AsyncCtx39 >> 2] = 706; //@line 6358
   HEAP32[$AsyncCtx39 + 4 >> 2] = $0; //@line 6360
   sp = STACKTOP; //@line 6361
   STACKTOP = sp; //@line 6362
   return;
  }
 case 15:
  {
   HEAP32[$AsyncCtx35 >> 2] = 707; //@line 6366
   HEAP32[$AsyncCtx35 + 4 >> 2] = $0; //@line 6368
   sp = STACKTOP; //@line 6369
   STACKTOP = sp; //@line 6370
   return;
  }
 case 17:
  {
   HEAP32[$AsyncCtx31 >> 2] = 708; //@line 6374
   HEAP32[$AsyncCtx31 + 4 >> 2] = $0; //@line 6376
   sp = STACKTOP; //@line 6377
   STACKTOP = sp; //@line 6378
   return;
  }
 case 19:
  {
   HEAP32[$AsyncCtx27 >> 2] = 709; //@line 6382
   HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 6384
   sp = STACKTOP; //@line 6385
   STACKTOP = sp; //@line 6386
   return;
  }
 case 21:
  {
   HEAP32[$AsyncCtx23 >> 2] = 710; //@line 6390
   HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 6392
   sp = STACKTOP; //@line 6393
   STACKTOP = sp; //@line 6394
   return;
  }
 case 23:
  {
   HEAP32[$AsyncCtx19 >> 2] = 711; //@line 6398
   HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 6400
   sp = STACKTOP; //@line 6401
   STACKTOP = sp; //@line 6402
   return;
  }
 case 25:
  {
   HEAP32[$AsyncCtx15 >> 2] = 712; //@line 6406
   HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 6408
   sp = STACKTOP; //@line 6409
   STACKTOP = sp; //@line 6410
   return;
  }
 case 27:
  {
   HEAP32[$AsyncCtx11 >> 2] = 713; //@line 6414
   HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 6416
   sp = STACKTOP; //@line 6417
   STACKTOP = sp; //@line 6418
   return;
  }
 case 29:
  {
   HEAP32[$AsyncCtx7 >> 2] = 714; //@line 6422
   HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 6424
   sp = STACKTOP; //@line 6425
   STACKTOP = sp; //@line 6426
   return;
  }
 case 31:
  {
   HEAP32[$AsyncCtx3 >> 2] = 715; //@line 6430
   HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 6432
   sp = STACKTOP; //@line 6433
   STACKTOP = sp; //@line 6434
   return;
  }
 case 33:
  {
   HEAP32[$AsyncCtx >> 2] = 716; //@line 6438
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 6440
   sp = STACKTOP; //@line 6441
   STACKTOP = sp; //@line 6442
   return;
  }
 }
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_3($0) {
 $0 = $0 | 0;
 var $$pre119 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 16728
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16730
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16732
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16734
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16736
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16738
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16740
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16742
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16744
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 16746
 $$pre119 = HEAP32[$10 >> 2] | 0; //@line 16747
 if ($$pre119 | 0) {
  $21 = HEAP32[$$pre119 + 4 >> 2] | 0; //@line 16751
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 16752
  FUNCTION_TABLE_vii[$21 & 31]($6, $2); //@line 16753
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 557; //@line 16756
   $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 16757
   HEAP32[$22 >> 2] = $2; //@line 16758
   $23 = $ReallocAsyncCtx5 + 8 | 0; //@line 16759
   HEAP32[$23 >> 2] = $8; //@line 16760
   $24 = $ReallocAsyncCtx5 + 12 | 0; //@line 16761
   HEAP32[$24 >> 2] = $12; //@line 16762
   $25 = $ReallocAsyncCtx5 + 16 | 0; //@line 16763
   HEAP32[$25 >> 2] = $14; //@line 16764
   $26 = $ReallocAsyncCtx5 + 20 | 0; //@line 16765
   HEAP32[$26 >> 2] = $16; //@line 16766
   $27 = $ReallocAsyncCtx5 + 24 | 0; //@line 16767
   HEAP32[$27 >> 2] = $10; //@line 16768
   $28 = $ReallocAsyncCtx5 + 28 | 0; //@line 16769
   HEAP32[$28 >> 2] = $4; //@line 16770
   $29 = $ReallocAsyncCtx5 + 32 | 0; //@line 16771
   HEAP32[$29 >> 2] = $18; //@line 16772
   sp = STACKTOP; //@line 16773
   return;
  }
  ___async_unwind = 0; //@line 16776
  HEAP32[$ReallocAsyncCtx5 >> 2] = 557; //@line 16777
  $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 16778
  HEAP32[$22 >> 2] = $2; //@line 16779
  $23 = $ReallocAsyncCtx5 + 8 | 0; //@line 16780
  HEAP32[$23 >> 2] = $8; //@line 16781
  $24 = $ReallocAsyncCtx5 + 12 | 0; //@line 16782
  HEAP32[$24 >> 2] = $12; //@line 16783
  $25 = $ReallocAsyncCtx5 + 16 | 0; //@line 16784
  HEAP32[$25 >> 2] = $14; //@line 16785
  $26 = $ReallocAsyncCtx5 + 20 | 0; //@line 16786
  HEAP32[$26 >> 2] = $16; //@line 16787
  $27 = $ReallocAsyncCtx5 + 24 | 0; //@line 16788
  HEAP32[$27 >> 2] = $10; //@line 16789
  $28 = $ReallocAsyncCtx5 + 28 | 0; //@line 16790
  HEAP32[$28 >> 2] = $4; //@line 16791
  $29 = $ReallocAsyncCtx5 + 32 | 0; //@line 16792
  HEAP32[$29 >> 2] = $18; //@line 16793
  sp = STACKTOP; //@line 16794
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 16797
 $30 = $18 + 12 | 0; //@line 16798
 HEAP32[$18 >> 2] = 559; //@line 16799
 HEAP32[$18 + 4 >> 2] = 0; //@line 16801
 HEAP32[$18 + 8 >> 2] = $12; //@line 16803
 HEAP32[$30 >> 2] = 848; //@line 16804
 $31 = $12 + 1276 | 0; //@line 16805
 if (($31 | 0) == ($18 | 0)) {
  $56 = HEAP32[214] | 0; //@line 16809
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(24) | 0; //@line 16810
  FUNCTION_TABLE_vi[$56 & 1023]($18); //@line 16811
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 562; //@line 16814
   $57 = $ReallocAsyncCtx9 + 4 | 0; //@line 16815
   HEAP32[$57 >> 2] = $8; //@line 16816
   $58 = $ReallocAsyncCtx9 + 8 | 0; //@line 16817
   HEAP32[$58 >> 2] = $12; //@line 16818
   $59 = $ReallocAsyncCtx9 + 12 | 0; //@line 16819
   HEAP32[$59 >> 2] = $14; //@line 16820
   $60 = $ReallocAsyncCtx9 + 16 | 0; //@line 16821
   HEAP32[$60 >> 2] = $18; //@line 16822
   $61 = $ReallocAsyncCtx9 + 20 | 0; //@line 16823
   HEAP32[$61 >> 2] = $16; //@line 16824
   sp = STACKTOP; //@line 16825
   return;
  }
  ___async_unwind = 0; //@line 16828
  HEAP32[$ReallocAsyncCtx9 >> 2] = 562; //@line 16829
  $57 = $ReallocAsyncCtx9 + 4 | 0; //@line 16830
  HEAP32[$57 >> 2] = $8; //@line 16831
  $58 = $ReallocAsyncCtx9 + 8 | 0; //@line 16832
  HEAP32[$58 >> 2] = $12; //@line 16833
  $59 = $ReallocAsyncCtx9 + 12 | 0; //@line 16834
  HEAP32[$59 >> 2] = $14; //@line 16835
  $60 = $ReallocAsyncCtx9 + 16 | 0; //@line 16836
  HEAP32[$60 >> 2] = $18; //@line 16837
  $61 = $ReallocAsyncCtx9 + 20 | 0; //@line 16838
  HEAP32[$61 >> 2] = $16; //@line 16839
  sp = STACKTOP; //@line 16840
  return;
 }
 $33 = $12 + 1288 | 0; //@line 16843
 $34 = HEAP32[$33 >> 2] | 0; //@line 16844
 if (!$34) {
  $47 = HEAP32[213] | 0; //@line 16848
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 16849
  FUNCTION_TABLE_vii[$47 & 31]($31, $18); //@line 16850
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 561; //@line 16853
   $48 = $ReallocAsyncCtx8 + 4 | 0; //@line 16854
   HEAP32[$48 >> 2] = $8; //@line 16855
   $49 = $ReallocAsyncCtx8 + 8 | 0; //@line 16856
   HEAP32[$49 >> 2] = $12; //@line 16857
   $50 = $ReallocAsyncCtx8 + 12 | 0; //@line 16858
   HEAP32[$50 >> 2] = $14; //@line 16859
   $51 = $ReallocAsyncCtx8 + 16 | 0; //@line 16860
   HEAP32[$51 >> 2] = $30; //@line 16861
   $52 = $ReallocAsyncCtx8 + 20 | 0; //@line 16862
   HEAP32[$52 >> 2] = $33; //@line 16863
   $53 = $ReallocAsyncCtx8 + 24 | 0; //@line 16864
   HEAP32[$53 >> 2] = $18; //@line 16865
   $54 = $ReallocAsyncCtx8 + 28 | 0; //@line 16866
   HEAP32[$54 >> 2] = $16; //@line 16867
   sp = STACKTOP; //@line 16868
   return;
  }
  ___async_unwind = 0; //@line 16871
  HEAP32[$ReallocAsyncCtx8 >> 2] = 561; //@line 16872
  $48 = $ReallocAsyncCtx8 + 4 | 0; //@line 16873
  HEAP32[$48 >> 2] = $8; //@line 16874
  $49 = $ReallocAsyncCtx8 + 8 | 0; //@line 16875
  HEAP32[$49 >> 2] = $12; //@line 16876
  $50 = $ReallocAsyncCtx8 + 12 | 0; //@line 16877
  HEAP32[$50 >> 2] = $14; //@line 16878
  $51 = $ReallocAsyncCtx8 + 16 | 0; //@line 16879
  HEAP32[$51 >> 2] = $30; //@line 16880
  $52 = $ReallocAsyncCtx8 + 20 | 0; //@line 16881
  HEAP32[$52 >> 2] = $33; //@line 16882
  $53 = $ReallocAsyncCtx8 + 24 | 0; //@line 16883
  HEAP32[$53 >> 2] = $18; //@line 16884
  $54 = $ReallocAsyncCtx8 + 28 | 0; //@line 16885
  HEAP32[$54 >> 2] = $16; //@line 16886
  sp = STACKTOP; //@line 16887
  return;
 } else {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 16891
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 16892
  FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 16893
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 560; //@line 16896
   $38 = $ReallocAsyncCtx7 + 4 | 0; //@line 16897
   HEAP32[$38 >> 2] = $8; //@line 16898
   $39 = $ReallocAsyncCtx7 + 8 | 0; //@line 16899
   HEAP32[$39 >> 2] = $12; //@line 16900
   $40 = $ReallocAsyncCtx7 + 12 | 0; //@line 16901
   HEAP32[$40 >> 2] = $14; //@line 16902
   $41 = $ReallocAsyncCtx7 + 16 | 0; //@line 16903
   HEAP32[$41 >> 2] = $30; //@line 16904
   $42 = $ReallocAsyncCtx7 + 20 | 0; //@line 16905
   HEAP32[$42 >> 2] = $33; //@line 16906
   $43 = $ReallocAsyncCtx7 + 24 | 0; //@line 16907
   HEAP32[$43 >> 2] = $18; //@line 16908
   $44 = $ReallocAsyncCtx7 + 28 | 0; //@line 16909
   HEAP32[$44 >> 2] = $16; //@line 16910
   $45 = $ReallocAsyncCtx7 + 32 | 0; //@line 16911
   HEAP32[$45 >> 2] = $31; //@line 16912
   sp = STACKTOP; //@line 16913
   return;
  }
  ___async_unwind = 0; //@line 16916
  HEAP32[$ReallocAsyncCtx7 >> 2] = 560; //@line 16917
  $38 = $ReallocAsyncCtx7 + 4 | 0; //@line 16918
  HEAP32[$38 >> 2] = $8; //@line 16919
  $39 = $ReallocAsyncCtx7 + 8 | 0; //@line 16920
  HEAP32[$39 >> 2] = $12; //@line 16921
  $40 = $ReallocAsyncCtx7 + 12 | 0; //@line 16922
  HEAP32[$40 >> 2] = $14; //@line 16923
  $41 = $ReallocAsyncCtx7 + 16 | 0; //@line 16924
  HEAP32[$41 >> 2] = $30; //@line 16925
  $42 = $ReallocAsyncCtx7 + 20 | 0; //@line 16926
  HEAP32[$42 >> 2] = $33; //@line 16927
  $43 = $ReallocAsyncCtx7 + 24 | 0; //@line 16928
  HEAP32[$43 >> 2] = $18; //@line 16929
  $44 = $ReallocAsyncCtx7 + 28 | 0; //@line 16930
  HEAP32[$44 >> 2] = $16; //@line 16931
  $45 = $ReallocAsyncCtx7 + 32 | 0; //@line 16932
  HEAP32[$45 >> 2] = $31; //@line 16933
  sp = STACKTOP; //@line 16934
  return;
 }
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_356($0) {
 $0 = $0 | 0;
 var $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $58 = 0, $59 = 0, $61 = 0, $64 = 0, $67 = 0, $69 = 0, $72 = 0, $75 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 17250
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17252
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17254
 $5 = $4 + 688 | 0; //@line 17255
 switch (HEAP8[$5 >> 0] | 0) {
 case 1:
  {
   if (!(HEAP8[$4 + 689 >> 0] | 0)) {
    HEAP8[$4 + 732 >> 0] = 0; //@line 17264
    HEAP8[$4 + 733 >> 0] = 0; //@line 17266
    HEAP16[$4 + 744 >> 1] = 0; //@line 17268
    HEAP16[$4 + 742 >> 1] = 0; //@line 17270
    if (!(HEAP8[$4 + 722 >> 0] | 0)) {
     HEAP8[$5 >> 0] = 0; //@line 17275
     $17 = $4 + 1176 | 0; //@line 17276
     $18 = $2 + 12 | 0; //@line 17277
     HEAP32[$2 >> 2] = 70; //@line 17278
     HEAP32[$2 + 4 >> 2] = 0; //@line 17280
     HEAP32[$2 + 8 >> 2] = $4; //@line 17282
     HEAP32[$18 >> 2] = 648; //@line 17283
     $21 = ___muldi3(HEAP32[$4 + 728 >> 2] | 0, 0, 1e3, 0) | 0; //@line 17286
     $22 = tempRet0; //@line 17287
     $23 = $4 + 1216 | 0; //@line 17288
     do {
      if (($23 | 0) != ($2 | 0)) {
       $25 = $4 + 1228 | 0; //@line 17292
       $26 = HEAP32[$25 >> 2] | 0; //@line 17293
       if ($26 | 0) {
        $29 = HEAP32[$26 + 8 >> 2] | 0; //@line 17297
        $ReallocAsyncCtx = _emscripten_realloc_async_context(40) | 0; //@line 17298
        FUNCTION_TABLE_vi[$29 & 1023]($23); //@line 17299
        if (___async) {
         HEAP32[$ReallocAsyncCtx >> 2] = 129; //@line 17302
         $30 = $ReallocAsyncCtx + 4 | 0; //@line 17303
         HEAP32[$30 >> 2] = $18; //@line 17304
         $31 = $ReallocAsyncCtx + 8 | 0; //@line 17305
         HEAP32[$31 >> 2] = $25; //@line 17306
         $32 = $ReallocAsyncCtx + 12 | 0; //@line 17307
         HEAP32[$32 >> 2] = $23; //@line 17308
         $33 = $ReallocAsyncCtx + 16 | 0; //@line 17309
         HEAP32[$33 >> 2] = $2; //@line 17310
         $34 = $ReallocAsyncCtx + 20 | 0; //@line 17311
         HEAP32[$34 >> 2] = $17; //@line 17312
         $35 = $ReallocAsyncCtx + 24 | 0; //@line 17313
         $36 = $35; //@line 17314
         $37 = $36; //@line 17315
         HEAP32[$37 >> 2] = $21; //@line 17316
         $38 = $36 + 4 | 0; //@line 17317
         $39 = $38; //@line 17318
         HEAP32[$39 >> 2] = $22; //@line 17319
         $40 = $ReallocAsyncCtx + 32 | 0; //@line 17320
         HEAP32[$40 >> 2] = $4; //@line 17321
         sp = STACKTOP; //@line 17322
         return;
        }
        ___async_unwind = 0; //@line 17325
        HEAP32[$ReallocAsyncCtx >> 2] = 129; //@line 17326
        $30 = $ReallocAsyncCtx + 4 | 0; //@line 17327
        HEAP32[$30 >> 2] = $18; //@line 17328
        $31 = $ReallocAsyncCtx + 8 | 0; //@line 17329
        HEAP32[$31 >> 2] = $25; //@line 17330
        $32 = $ReallocAsyncCtx + 12 | 0; //@line 17331
        HEAP32[$32 >> 2] = $23; //@line 17332
        $33 = $ReallocAsyncCtx + 16 | 0; //@line 17333
        HEAP32[$33 >> 2] = $2; //@line 17334
        $34 = $ReallocAsyncCtx + 20 | 0; //@line 17335
        HEAP32[$34 >> 2] = $17; //@line 17336
        $35 = $ReallocAsyncCtx + 24 | 0; //@line 17337
        $36 = $35; //@line 17338
        $37 = $36; //@line 17339
        HEAP32[$37 >> 2] = $21; //@line 17340
        $38 = $36 + 4 | 0; //@line 17341
        $39 = $38; //@line 17342
        HEAP32[$39 >> 2] = $22; //@line 17343
        $40 = $ReallocAsyncCtx + 32 | 0; //@line 17344
        HEAP32[$40 >> 2] = $4; //@line 17345
        sp = STACKTOP; //@line 17346
        return;
       }
       $41 = HEAP32[$18 >> 2] | 0; //@line 17349
       if (!$41) {
        HEAP32[$25 >> 2] = 0; //@line 17352
        break;
       }
       $44 = HEAP32[$41 + 4 >> 2] | 0; //@line 17356
       $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 17357
       FUNCTION_TABLE_vii[$44 & 31]($23, $2); //@line 17358
       if (___async) {
        HEAP32[$ReallocAsyncCtx2 >> 2] = 130; //@line 17361
        $45 = $ReallocAsyncCtx2 + 4 | 0; //@line 17362
        HEAP32[$45 >> 2] = $18; //@line 17363
        $46 = $ReallocAsyncCtx2 + 8 | 0; //@line 17364
        HEAP32[$46 >> 2] = $25; //@line 17365
        $47 = $ReallocAsyncCtx2 + 12 | 0; //@line 17366
        HEAP32[$47 >> 2] = $17; //@line 17367
        $48 = $ReallocAsyncCtx2 + 16 | 0; //@line 17368
        $49 = $48; //@line 17369
        $50 = $49; //@line 17370
        HEAP32[$50 >> 2] = $21; //@line 17371
        $51 = $49 + 4 | 0; //@line 17372
        $52 = $51; //@line 17373
        HEAP32[$52 >> 2] = $22; //@line 17374
        $53 = $ReallocAsyncCtx2 + 24 | 0; //@line 17375
        HEAP32[$53 >> 2] = $4; //@line 17376
        $54 = $ReallocAsyncCtx2 + 28 | 0; //@line 17377
        HEAP32[$54 >> 2] = $2; //@line 17378
        sp = STACKTOP; //@line 17379
        return;
       }
       ___async_unwind = 0; //@line 17382
       HEAP32[$ReallocAsyncCtx2 >> 2] = 130; //@line 17383
       $45 = $ReallocAsyncCtx2 + 4 | 0; //@line 17384
       HEAP32[$45 >> 2] = $18; //@line 17385
       $46 = $ReallocAsyncCtx2 + 8 | 0; //@line 17386
       HEAP32[$46 >> 2] = $25; //@line 17387
       $47 = $ReallocAsyncCtx2 + 12 | 0; //@line 17388
       HEAP32[$47 >> 2] = $17; //@line 17389
       $48 = $ReallocAsyncCtx2 + 16 | 0; //@line 17390
       $49 = $48; //@line 17391
       $50 = $49; //@line 17392
       HEAP32[$50 >> 2] = $21; //@line 17393
       $51 = $49 + 4 | 0; //@line 17394
       $52 = $51; //@line 17395
       HEAP32[$52 >> 2] = $22; //@line 17396
       $53 = $ReallocAsyncCtx2 + 24 | 0; //@line 17397
       HEAP32[$53 >> 2] = $4; //@line 17398
       $54 = $ReallocAsyncCtx2 + 28 | 0; //@line 17399
       HEAP32[$54 >> 2] = $2; //@line 17400
       sp = STACKTOP; //@line 17401
       return;
      }
     } while (0);
     __ZN4mbed6Ticker5setupEy($17, $21, $22); //@line 17405
     $55 = HEAP32[$18 >> 2] | 0; //@line 17406
     if ($55 | 0) {
      $58 = HEAP32[$55 + 8 >> 2] | 0; //@line 17410
      $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 17411
      FUNCTION_TABLE_vi[$58 & 1023]($2); //@line 17412
      if (___async) {
       HEAP32[$ReallocAsyncCtx3 >> 2] = 131; //@line 17415
       $59 = $ReallocAsyncCtx3 + 4 | 0; //@line 17416
       HEAP32[$59 >> 2] = $4; //@line 17417
       sp = STACKTOP; //@line 17418
       return;
      }
      ___async_unwind = 0; //@line 17421
      HEAP32[$ReallocAsyncCtx3 >> 2] = 131; //@line 17422
      $59 = $ReallocAsyncCtx3 + 4 | 0; //@line 17423
      HEAP32[$59 >> 2] = $4; //@line 17424
      sp = STACKTOP; //@line 17425
      return;
     }
    }
   }
   $61 = HEAP32[$4 + 784 >> 2] | 0; //@line 17431
   if (!$61) {
    return;
   }
   $64 = HEAP32[$61 + 60 >> 2] | 0; //@line 17437
   if (!$64) {
    return;
   }
   $67 = HEAP32[$64 >> 2] | 0; //@line 17443
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 17444
   FUNCTION_TABLE_vi[$67 & 1023]($61 + 48 | 0); //@line 17445
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 132; //@line 17448
    sp = STACKTOP; //@line 17449
    return;
   }
   ___async_unwind = 0; //@line 17452
   HEAP32[$ReallocAsyncCtx4 >> 2] = 132; //@line 17453
   sp = STACKTOP; //@line 17454
   return;
  }
 case 2:
  {
   HEAP8[$5 >> 0] = 0; //@line 17459
   $69 = HEAP32[$4 + 784 >> 2] | 0; //@line 17461
   if (!$69) {
    return;
   }
   $72 = HEAP32[$69 + 28 >> 2] | 0; //@line 17467
   if (!$72) {
    return;
   }
   $75 = HEAP32[$72 >> 2] | 0; //@line 17473
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 17474
   FUNCTION_TABLE_vi[$75 & 1023]($69 + 16 | 0); //@line 17475
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 133; //@line 17478
    sp = STACKTOP; //@line 17479
    return;
   }
   ___async_unwind = 0; //@line 17482
   HEAP32[$ReallocAsyncCtx5 >> 2] = 133; //@line 17483
   sp = STACKTOP; //@line 17484
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $60 = 0, $61 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 34099
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34101
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34103
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 34107
 $10 = HEAP8[$0 + 17 >> 0] | 0; //@line 34109
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 34111
 $$pre$i = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 34112
 $13 = $2 + 12 | 0; //@line 34113
 HEAP32[$13 >> 2] = $$pre$i; //@line 34114
 if ($$pre$i | 0) {
  $16 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 34119
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 34120
  FUNCTION_TABLE_vii[$16 & 31]($4, $2); //@line 34121
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 266; //@line 34124
   $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 34125
   HEAP32[$17 >> 2] = $2; //@line 34126
   $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 34127
   HEAP32[$18 >> 2] = $4; //@line 34128
   $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 34129
   HEAP32[$19 >> 2] = $13; //@line 34130
   $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 34131
   HEAP8[$20 >> 0] = $8; //@line 34132
   $21 = $ReallocAsyncCtx2 + 17 | 0; //@line 34133
   HEAP8[$21 >> 0] = $10; //@line 34134
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 34135
   HEAP32[$22 >> 2] = $12; //@line 34136
   $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 34137
   HEAP32[$23 >> 2] = $13; //@line 34138
   sp = STACKTOP; //@line 34139
   return;
  }
  ___async_unwind = 0; //@line 34142
  HEAP32[$ReallocAsyncCtx2 >> 2] = 266; //@line 34143
  $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 34144
  HEAP32[$17 >> 2] = $2; //@line 34145
  $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 34146
  HEAP32[$18 >> 2] = $4; //@line 34147
  $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 34148
  HEAP32[$19 >> 2] = $13; //@line 34149
  $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 34150
  HEAP8[$20 >> 0] = $8; //@line 34151
  $21 = $ReallocAsyncCtx2 + 17 | 0; //@line 34152
  HEAP8[$21 >> 0] = $10; //@line 34153
  $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 34154
  HEAP32[$22 >> 2] = $12; //@line 34155
  $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 34156
  HEAP32[$23 >> 2] = $13; //@line 34157
  sp = STACKTOP; //@line 34158
  return;
 }
 $24 = $4 + 12 | 0; //@line 34161
 HEAP32[$24 >> 2] = 0; //@line 34162
 $25 = $4 + 16 | 0; //@line 34163
 HEAP8[$25 >> 0] = $8; //@line 34164
 HEAP8[$4 + 17 >> 0] = $10; //@line 34166
 $27 = _equeue_alloc($12, 20) | 0; //@line 34167
 if ($27 | 0) {
  $29 = HEAP32[$24 >> 2] | 0; //@line 34170
  if (!$29) {
   HEAP32[$27 + 12 >> 2] = 0; //@line 34174
   HEAP16[$27 + 16 >> 1] = HEAP16[$25 >> 1] | 0; //@line 34177
   _equeue_event_dtor($27, 268); //@line 34178
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 34179
   $44 = _equeue_post($12, 269, $27) | 0; //@line 34180
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 270; //@line 34183
    $45 = $ReallocAsyncCtx6 + 4 | 0; //@line 34184
    HEAP32[$45 >> 2] = $24; //@line 34185
    $46 = $ReallocAsyncCtx6 + 8 | 0; //@line 34186
    HEAP32[$46 >> 2] = $13; //@line 34187
    $47 = $ReallocAsyncCtx6 + 12 | 0; //@line 34188
    HEAP32[$47 >> 2] = $4; //@line 34189
    $48 = $ReallocAsyncCtx6 + 16 | 0; //@line 34190
    HEAP32[$48 >> 2] = $2; //@line 34191
    sp = STACKTOP; //@line 34192
    return;
   }
   HEAP32[___async_retval >> 2] = $44; //@line 34196
   ___async_unwind = 0; //@line 34197
   HEAP32[$ReallocAsyncCtx6 >> 2] = 270; //@line 34198
   $45 = $ReallocAsyncCtx6 + 4 | 0; //@line 34199
   HEAP32[$45 >> 2] = $24; //@line 34200
   $46 = $ReallocAsyncCtx6 + 8 | 0; //@line 34201
   HEAP32[$46 >> 2] = $13; //@line 34202
   $47 = $ReallocAsyncCtx6 + 12 | 0; //@line 34203
   HEAP32[$47 >> 2] = $4; //@line 34204
   $48 = $ReallocAsyncCtx6 + 16 | 0; //@line 34205
   HEAP32[$48 >> 2] = $2; //@line 34206
   sp = STACKTOP; //@line 34207
   return;
  } else {
   $32 = HEAP32[$29 + 4 >> 2] | 0; //@line 34211
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 34212
   FUNCTION_TABLE_vii[$32 & 31]($27, $4); //@line 34213
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 267; //@line 34216
    $33 = $ReallocAsyncCtx3 + 4 | 0; //@line 34217
    HEAP32[$33 >> 2] = $24; //@line 34218
    $34 = $ReallocAsyncCtx3 + 8 | 0; //@line 34219
    HEAP32[$34 >> 2] = $27; //@line 34220
    $35 = $ReallocAsyncCtx3 + 12 | 0; //@line 34221
    HEAP32[$35 >> 2] = $25; //@line 34222
    $36 = $ReallocAsyncCtx3 + 16 | 0; //@line 34223
    HEAP32[$36 >> 2] = $12; //@line 34224
    $37 = $ReallocAsyncCtx3 + 20 | 0; //@line 34225
    HEAP32[$37 >> 2] = $24; //@line 34226
    $38 = $ReallocAsyncCtx3 + 24 | 0; //@line 34227
    HEAP32[$38 >> 2] = $13; //@line 34228
    $39 = $ReallocAsyncCtx3 + 28 | 0; //@line 34229
    HEAP32[$39 >> 2] = $4; //@line 34230
    $40 = $ReallocAsyncCtx3 + 32 | 0; //@line 34231
    HEAP32[$40 >> 2] = $2; //@line 34232
    sp = STACKTOP; //@line 34233
    return;
   }
   ___async_unwind = 0; //@line 34236
   HEAP32[$ReallocAsyncCtx3 >> 2] = 267; //@line 34237
   $33 = $ReallocAsyncCtx3 + 4 | 0; //@line 34238
   HEAP32[$33 >> 2] = $24; //@line 34239
   $34 = $ReallocAsyncCtx3 + 8 | 0; //@line 34240
   HEAP32[$34 >> 2] = $27; //@line 34241
   $35 = $ReallocAsyncCtx3 + 12 | 0; //@line 34242
   HEAP32[$35 >> 2] = $25; //@line 34243
   $36 = $ReallocAsyncCtx3 + 16 | 0; //@line 34244
   HEAP32[$36 >> 2] = $12; //@line 34245
   $37 = $ReallocAsyncCtx3 + 20 | 0; //@line 34246
   HEAP32[$37 >> 2] = $24; //@line 34247
   $38 = $ReallocAsyncCtx3 + 24 | 0; //@line 34248
   HEAP32[$38 >> 2] = $13; //@line 34249
   $39 = $ReallocAsyncCtx3 + 28 | 0; //@line 34250
   HEAP32[$39 >> 2] = $4; //@line 34251
   $40 = $ReallocAsyncCtx3 + 32 | 0; //@line 34252
   HEAP32[$40 >> 2] = $2; //@line 34253
   sp = STACKTOP; //@line 34254
   return;
  }
 }
 $50 = HEAP32[$24 >> 2] | 0; //@line 34258
 if ($50 | 0) {
  $53 = HEAP32[$50 + 8 >> 2] | 0; //@line 34262
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 34263
  FUNCTION_TABLE_vi[$53 & 1023]($4); //@line 34264
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 271; //@line 34267
   $54 = $ReallocAsyncCtx4 + 4 | 0; //@line 34268
   HEAP32[$54 >> 2] = $13; //@line 34269
   $55 = $ReallocAsyncCtx4 + 8 | 0; //@line 34270
   HEAP32[$55 >> 2] = 0; //@line 34271
   $56 = $ReallocAsyncCtx4 + 12 | 0; //@line 34272
   HEAP32[$56 >> 2] = $2; //@line 34273
   sp = STACKTOP; //@line 34274
   return;
  }
  ___async_unwind = 0; //@line 34277
  HEAP32[$ReallocAsyncCtx4 >> 2] = 271; //@line 34278
  $54 = $ReallocAsyncCtx4 + 4 | 0; //@line 34279
  HEAP32[$54 >> 2] = $13; //@line 34280
  $55 = $ReallocAsyncCtx4 + 8 | 0; //@line 34281
  HEAP32[$55 >> 2] = 0; //@line 34282
  $56 = $ReallocAsyncCtx4 + 12 | 0; //@line 34283
  HEAP32[$56 >> 2] = $2; //@line 34284
  sp = STACKTOP; //@line 34285
  return;
 }
 $57 = HEAP32[$13 >> 2] | 0; //@line 34288
 if (!$57) {
  HEAP32[___async_retval >> 2] = 0; //@line 34292
  return;
 }
 $60 = HEAP32[$57 + 8 >> 2] | 0; //@line 34296
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 34297
 FUNCTION_TABLE_vi[$60 & 1023]($2); //@line 34298
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 272; //@line 34301
  $61 = $ReallocAsyncCtx5 + 4 | 0; //@line 34302
  HEAP32[$61 >> 2] = 0; //@line 34303
  sp = STACKTOP; //@line 34304
  return;
 }
 ___async_unwind = 0; //@line 34307
 HEAP32[$ReallocAsyncCtx5 >> 2] = 272; //@line 34308
 $61 = $ReallocAsyncCtx5 + 4 | 0; //@line 34309
 HEAP32[$61 >> 2] = 0; //@line 34310
 sp = STACKTOP; //@line 34311
 return;
}
function __ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb_269($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $42 = 0, $48 = 0, $54 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2033
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2035
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 2041
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 2043
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 2045
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 2047
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 2049
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 2051
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 2053
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 2055
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 2057
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 2059
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 2061
 $34 = HEAP8[$2 >> 0] | 0; //@line 2062
 $39 = ($34 & 255) + (HEAPU8[$0 + 8 >> 0] | 0) & 255; //@line 2066
 $30 = (HEAP8[$0 + 9 >> 0] | 0) + 1 << 24 >> 24; //@line 2067
 if (($30 & 255) >= (HEAPU8[$8 >> 0] | 0)) {
  return;
 }
 if ((($34 & 255) + (HEAPU8[$10 >> 0] | 0) | 0) >>> 0 > ($30 & 255) >>> 0) {
  $37 = HEAP32[$14 >> 2] | 0; //@line 2080
  $38 = $39 & 255; //@line 2081
  $42 = HEAPU8[$37 + $38 >> 0] | 0; //@line 2084
  HEAP32[$16 >> 2] = $42; //@line 2085
  $48 = (HEAPU8[$37 + ($38 + 1) >> 0] | 0) << 8 | $42; //@line 2091
  HEAP32[$16 >> 2] = $48; //@line 2092
  $54 = (HEAPU8[$37 + ($38 + 2) >> 0] | 0) << 16 | $48; //@line 2098
  HEAP32[$16 >> 2] = $54 * 100; //@line 2100
  HEAP32[$18 >> 2] = 0; //@line 2101
  if ($54 | 0) {
   $59 = HEAP32[(HEAP32[$26 >> 2] | 0) + 60 >> 2] | 0; //@line 2106
   $ReallocAsyncCtx = _emscripten_realloc_async_context(56) | 0; //@line 2107
   FUNCTION_TABLE_iiii[$59 & 15]($24, $28, $30) | 0; //@line 2108
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 601; //@line 2111
    $60 = $ReallocAsyncCtx + 4 | 0; //@line 2112
    HEAP32[$60 >> 2] = $2; //@line 2113
    $61 = $ReallocAsyncCtx + 8 | 0; //@line 2114
    HEAP8[$61 >> 0] = $39; //@line 2115
    $62 = $ReallocAsyncCtx + 9 | 0; //@line 2116
    HEAP8[$62 >> 0] = $30; //@line 2117
    $63 = $ReallocAsyncCtx + 12 | 0; //@line 2118
    HEAP32[$63 >> 2] = $8; //@line 2119
    $64 = $ReallocAsyncCtx + 16 | 0; //@line 2120
    HEAP32[$64 >> 2] = $10; //@line 2121
    $65 = $ReallocAsyncCtx + 20 | 0; //@line 2122
    HEAP32[$65 >> 2] = $12; //@line 2123
    $66 = $ReallocAsyncCtx + 24 | 0; //@line 2124
    HEAP32[$66 >> 2] = $14; //@line 2125
    $67 = $ReallocAsyncCtx + 28 | 0; //@line 2126
    HEAP32[$67 >> 2] = $16; //@line 2127
    $68 = $ReallocAsyncCtx + 32 | 0; //@line 2128
    HEAP32[$68 >> 2] = $18; //@line 2129
    $69 = $ReallocAsyncCtx + 36 | 0; //@line 2130
    HEAP32[$69 >> 2] = $20; //@line 2131
    $70 = $ReallocAsyncCtx + 40 | 0; //@line 2132
    HEAP32[$70 >> 2] = $22; //@line 2133
    $71 = $ReallocAsyncCtx + 44 | 0; //@line 2134
    HEAP32[$71 >> 2] = $24; //@line 2135
    $72 = $ReallocAsyncCtx + 48 | 0; //@line 2136
    HEAP32[$72 >> 2] = $26; //@line 2137
    $73 = $ReallocAsyncCtx + 52 | 0; //@line 2138
    HEAP32[$73 >> 2] = $28; //@line 2139
    sp = STACKTOP; //@line 2140
    return;
   }
   ___async_unwind = 0; //@line 2143
   HEAP32[$ReallocAsyncCtx >> 2] = 601; //@line 2144
   $60 = $ReallocAsyncCtx + 4 | 0; //@line 2145
   HEAP32[$60 >> 2] = $2; //@line 2146
   $61 = $ReallocAsyncCtx + 8 | 0; //@line 2147
   HEAP8[$61 >> 0] = $39; //@line 2148
   $62 = $ReallocAsyncCtx + 9 | 0; //@line 2149
   HEAP8[$62 >> 0] = $30; //@line 2150
   $63 = $ReallocAsyncCtx + 12 | 0; //@line 2151
   HEAP32[$63 >> 2] = $8; //@line 2152
   $64 = $ReallocAsyncCtx + 16 | 0; //@line 2153
   HEAP32[$64 >> 2] = $10; //@line 2154
   $65 = $ReallocAsyncCtx + 20 | 0; //@line 2155
   HEAP32[$65 >> 2] = $12; //@line 2156
   $66 = $ReallocAsyncCtx + 24 | 0; //@line 2157
   HEAP32[$66 >> 2] = $14; //@line 2158
   $67 = $ReallocAsyncCtx + 28 | 0; //@line 2159
   HEAP32[$67 >> 2] = $16; //@line 2160
   $68 = $ReallocAsyncCtx + 32 | 0; //@line 2161
   HEAP32[$68 >> 2] = $18; //@line 2162
   $69 = $ReallocAsyncCtx + 36 | 0; //@line 2163
   HEAP32[$69 >> 2] = $20; //@line 2164
   $70 = $ReallocAsyncCtx + 40 | 0; //@line 2165
   HEAP32[$70 >> 2] = $22; //@line 2166
   $71 = $ReallocAsyncCtx + 44 | 0; //@line 2167
   HEAP32[$71 >> 2] = $24; //@line 2168
   $72 = $ReallocAsyncCtx + 48 | 0; //@line 2169
   HEAP32[$72 >> 2] = $26; //@line 2170
   $73 = $ReallocAsyncCtx + 52 | 0; //@line 2171
   HEAP32[$73 >> 2] = $28; //@line 2172
   sp = STACKTOP; //@line 2173
   return;
  }
 } else {
  HEAP32[$16 >> 2] = 0; //@line 2177
  HEAP8[$20 >> 0] = 0; //@line 2178
  HEAP32[$18 >> 2] = 0; //@line 2179
 }
 $76 = HEAP32[(HEAP32[$22 >> 2] | 0) + 64 >> 2] | 0; //@line 2183
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(56) | 0; //@line 2184
 FUNCTION_TABLE_iii[$76 & 31]($24, $30) | 0; //@line 2185
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 602; //@line 2188
  $77 = $ReallocAsyncCtx2 + 4 | 0; //@line 2189
  HEAP32[$77 >> 2] = $2; //@line 2190
  $78 = $ReallocAsyncCtx2 + 8 | 0; //@line 2191
  HEAP8[$78 >> 0] = $39; //@line 2192
  $79 = $ReallocAsyncCtx2 + 9 | 0; //@line 2193
  HEAP8[$79 >> 0] = $30; //@line 2194
  $80 = $ReallocAsyncCtx2 + 12 | 0; //@line 2195
  HEAP32[$80 >> 2] = $8; //@line 2196
  $81 = $ReallocAsyncCtx2 + 16 | 0; //@line 2197
  HEAP32[$81 >> 2] = $10; //@line 2198
  $82 = $ReallocAsyncCtx2 + 20 | 0; //@line 2199
  HEAP32[$82 >> 2] = $12; //@line 2200
  $83 = $ReallocAsyncCtx2 + 24 | 0; //@line 2201
  HEAP32[$83 >> 2] = $14; //@line 2202
  $84 = $ReallocAsyncCtx2 + 28 | 0; //@line 2203
  HEAP32[$84 >> 2] = $16; //@line 2204
  $85 = $ReallocAsyncCtx2 + 32 | 0; //@line 2205
  HEAP32[$85 >> 2] = $18; //@line 2206
  $86 = $ReallocAsyncCtx2 + 36 | 0; //@line 2207
  HEAP32[$86 >> 2] = $20; //@line 2208
  $87 = $ReallocAsyncCtx2 + 40 | 0; //@line 2209
  HEAP32[$87 >> 2] = $22; //@line 2210
  $88 = $ReallocAsyncCtx2 + 44 | 0; //@line 2211
  HEAP32[$88 >> 2] = $24; //@line 2212
  $89 = $ReallocAsyncCtx2 + 48 | 0; //@line 2213
  HEAP32[$89 >> 2] = $26; //@line 2214
  $90 = $ReallocAsyncCtx2 + 52 | 0; //@line 2215
  HEAP32[$90 >> 2] = $28; //@line 2216
  sp = STACKTOP; //@line 2217
  return;
 }
 ___async_unwind = 0; //@line 2220
 HEAP32[$ReallocAsyncCtx2 >> 2] = 602; //@line 2221
 $77 = $ReallocAsyncCtx2 + 4 | 0; //@line 2222
 HEAP32[$77 >> 2] = $2; //@line 2223
 $78 = $ReallocAsyncCtx2 + 8 | 0; //@line 2224
 HEAP8[$78 >> 0] = $39; //@line 2225
 $79 = $ReallocAsyncCtx2 + 9 | 0; //@line 2226
 HEAP8[$79 >> 0] = $30; //@line 2227
 $80 = $ReallocAsyncCtx2 + 12 | 0; //@line 2228
 HEAP32[$80 >> 2] = $8; //@line 2229
 $81 = $ReallocAsyncCtx2 + 16 | 0; //@line 2230
 HEAP32[$81 >> 2] = $10; //@line 2231
 $82 = $ReallocAsyncCtx2 + 20 | 0; //@line 2232
 HEAP32[$82 >> 2] = $12; //@line 2233
 $83 = $ReallocAsyncCtx2 + 24 | 0; //@line 2234
 HEAP32[$83 >> 2] = $14; //@line 2235
 $84 = $ReallocAsyncCtx2 + 28 | 0; //@line 2236
 HEAP32[$84 >> 2] = $16; //@line 2237
 $85 = $ReallocAsyncCtx2 + 32 | 0; //@line 2238
 HEAP32[$85 >> 2] = $18; //@line 2239
 $86 = $ReallocAsyncCtx2 + 36 | 0; //@line 2240
 HEAP32[$86 >> 2] = $20; //@line 2241
 $87 = $ReallocAsyncCtx2 + 40 | 0; //@line 2242
 HEAP32[$87 >> 2] = $22; //@line 2243
 $88 = $ReallocAsyncCtx2 + 44 | 0; //@line 2244
 HEAP32[$88 >> 2] = $24; //@line 2245
 $89 = $ReallocAsyncCtx2 + 48 | 0; //@line 2246
 HEAP32[$89 >> 2] = $26; //@line 2247
 $90 = $ReallocAsyncCtx2 + 52 | 0; //@line 2248
 HEAP32[$90 >> 2] = $28; //@line 2249
 sp = STACKTOP; //@line 2250
 return;
}
function __ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $42 = 0, $48 = 0, $54 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 1805
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1807
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 1813
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 1815
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 1817
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 1819
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 1821
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 1823
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 1825
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 1827
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 1829
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 1831
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 1833
 $34 = HEAP8[$2 >> 0] | 0; //@line 1834
 $39 = ($34 & 255) + (HEAPU8[$0 + 8 >> 0] | 0) & 255; //@line 1838
 $30 = (HEAP8[$0 + 9 >> 0] | 0) + 1 << 24 >> 24; //@line 1839
 if (($30 & 255) >= (HEAPU8[$8 >> 0] | 0)) {
  return;
 }
 if ((($34 & 255) + (HEAPU8[$10 >> 0] | 0) | 0) >>> 0 > ($30 & 255) >>> 0) {
  $37 = HEAP32[$14 >> 2] | 0; //@line 1852
  $38 = $39 & 255; //@line 1853
  $42 = HEAPU8[$37 + $38 >> 0] | 0; //@line 1856
  HEAP32[$16 >> 2] = $42; //@line 1857
  $48 = (HEAPU8[$37 + ($38 + 1) >> 0] | 0) << 8 | $42; //@line 1863
  HEAP32[$16 >> 2] = $48; //@line 1864
  $54 = (HEAPU8[$37 + ($38 + 2) >> 0] | 0) << 16 | $48; //@line 1870
  HEAP32[$16 >> 2] = $54 * 100; //@line 1872
  HEAP32[$18 >> 2] = 0; //@line 1873
  if ($54 | 0) {
   $59 = HEAP32[(HEAP32[$26 >> 2] | 0) + 60 >> 2] | 0; //@line 1878
   $ReallocAsyncCtx = _emscripten_realloc_async_context(56) | 0; //@line 1879
   FUNCTION_TABLE_iiii[$59 & 15]($24, $28, $30) | 0; //@line 1880
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 601; //@line 1883
    $60 = $ReallocAsyncCtx + 4 | 0; //@line 1884
    HEAP32[$60 >> 2] = $2; //@line 1885
    $61 = $ReallocAsyncCtx + 8 | 0; //@line 1886
    HEAP8[$61 >> 0] = $39; //@line 1887
    $62 = $ReallocAsyncCtx + 9 | 0; //@line 1888
    HEAP8[$62 >> 0] = $30; //@line 1889
    $63 = $ReallocAsyncCtx + 12 | 0; //@line 1890
    HEAP32[$63 >> 2] = $8; //@line 1891
    $64 = $ReallocAsyncCtx + 16 | 0; //@line 1892
    HEAP32[$64 >> 2] = $10; //@line 1893
    $65 = $ReallocAsyncCtx + 20 | 0; //@line 1894
    HEAP32[$65 >> 2] = $12; //@line 1895
    $66 = $ReallocAsyncCtx + 24 | 0; //@line 1896
    HEAP32[$66 >> 2] = $14; //@line 1897
    $67 = $ReallocAsyncCtx + 28 | 0; //@line 1898
    HEAP32[$67 >> 2] = $16; //@line 1899
    $68 = $ReallocAsyncCtx + 32 | 0; //@line 1900
    HEAP32[$68 >> 2] = $18; //@line 1901
    $69 = $ReallocAsyncCtx + 36 | 0; //@line 1902
    HEAP32[$69 >> 2] = $20; //@line 1903
    $70 = $ReallocAsyncCtx + 40 | 0; //@line 1904
    HEAP32[$70 >> 2] = $22; //@line 1905
    $71 = $ReallocAsyncCtx + 44 | 0; //@line 1906
    HEAP32[$71 >> 2] = $24; //@line 1907
    $72 = $ReallocAsyncCtx + 48 | 0; //@line 1908
    HEAP32[$72 >> 2] = $26; //@line 1909
    $73 = $ReallocAsyncCtx + 52 | 0; //@line 1910
    HEAP32[$73 >> 2] = $28; //@line 1911
    sp = STACKTOP; //@line 1912
    return;
   }
   ___async_unwind = 0; //@line 1915
   HEAP32[$ReallocAsyncCtx >> 2] = 601; //@line 1916
   $60 = $ReallocAsyncCtx + 4 | 0; //@line 1917
   HEAP32[$60 >> 2] = $2; //@line 1918
   $61 = $ReallocAsyncCtx + 8 | 0; //@line 1919
   HEAP8[$61 >> 0] = $39; //@line 1920
   $62 = $ReallocAsyncCtx + 9 | 0; //@line 1921
   HEAP8[$62 >> 0] = $30; //@line 1922
   $63 = $ReallocAsyncCtx + 12 | 0; //@line 1923
   HEAP32[$63 >> 2] = $8; //@line 1924
   $64 = $ReallocAsyncCtx + 16 | 0; //@line 1925
   HEAP32[$64 >> 2] = $10; //@line 1926
   $65 = $ReallocAsyncCtx + 20 | 0; //@line 1927
   HEAP32[$65 >> 2] = $12; //@line 1928
   $66 = $ReallocAsyncCtx + 24 | 0; //@line 1929
   HEAP32[$66 >> 2] = $14; //@line 1930
   $67 = $ReallocAsyncCtx + 28 | 0; //@line 1931
   HEAP32[$67 >> 2] = $16; //@line 1932
   $68 = $ReallocAsyncCtx + 32 | 0; //@line 1933
   HEAP32[$68 >> 2] = $18; //@line 1934
   $69 = $ReallocAsyncCtx + 36 | 0; //@line 1935
   HEAP32[$69 >> 2] = $20; //@line 1936
   $70 = $ReallocAsyncCtx + 40 | 0; //@line 1937
   HEAP32[$70 >> 2] = $22; //@line 1938
   $71 = $ReallocAsyncCtx + 44 | 0; //@line 1939
   HEAP32[$71 >> 2] = $24; //@line 1940
   $72 = $ReallocAsyncCtx + 48 | 0; //@line 1941
   HEAP32[$72 >> 2] = $26; //@line 1942
   $73 = $ReallocAsyncCtx + 52 | 0; //@line 1943
   HEAP32[$73 >> 2] = $28; //@line 1944
   sp = STACKTOP; //@line 1945
   return;
  }
 } else {
  HEAP32[$16 >> 2] = 0; //@line 1949
  HEAP8[$20 >> 0] = 0; //@line 1950
  HEAP32[$18 >> 2] = 0; //@line 1951
 }
 $76 = HEAP32[(HEAP32[$22 >> 2] | 0) + 64 >> 2] | 0; //@line 1955
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(56) | 0; //@line 1956
 FUNCTION_TABLE_iii[$76 & 31]($24, $30) | 0; //@line 1957
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 602; //@line 1960
  $77 = $ReallocAsyncCtx2 + 4 | 0; //@line 1961
  HEAP32[$77 >> 2] = $2; //@line 1962
  $78 = $ReallocAsyncCtx2 + 8 | 0; //@line 1963
  HEAP8[$78 >> 0] = $39; //@line 1964
  $79 = $ReallocAsyncCtx2 + 9 | 0; //@line 1965
  HEAP8[$79 >> 0] = $30; //@line 1966
  $80 = $ReallocAsyncCtx2 + 12 | 0; //@line 1967
  HEAP32[$80 >> 2] = $8; //@line 1968
  $81 = $ReallocAsyncCtx2 + 16 | 0; //@line 1969
  HEAP32[$81 >> 2] = $10; //@line 1970
  $82 = $ReallocAsyncCtx2 + 20 | 0; //@line 1971
  HEAP32[$82 >> 2] = $12; //@line 1972
  $83 = $ReallocAsyncCtx2 + 24 | 0; //@line 1973
  HEAP32[$83 >> 2] = $14; //@line 1974
  $84 = $ReallocAsyncCtx2 + 28 | 0; //@line 1975
  HEAP32[$84 >> 2] = $16; //@line 1976
  $85 = $ReallocAsyncCtx2 + 32 | 0; //@line 1977
  HEAP32[$85 >> 2] = $18; //@line 1978
  $86 = $ReallocAsyncCtx2 + 36 | 0; //@line 1979
  HEAP32[$86 >> 2] = $20; //@line 1980
  $87 = $ReallocAsyncCtx2 + 40 | 0; //@line 1981
  HEAP32[$87 >> 2] = $22; //@line 1982
  $88 = $ReallocAsyncCtx2 + 44 | 0; //@line 1983
  HEAP32[$88 >> 2] = $24; //@line 1984
  $89 = $ReallocAsyncCtx2 + 48 | 0; //@line 1985
  HEAP32[$89 >> 2] = $26; //@line 1986
  $90 = $ReallocAsyncCtx2 + 52 | 0; //@line 1987
  HEAP32[$90 >> 2] = $28; //@line 1988
  sp = STACKTOP; //@line 1989
  return;
 }
 ___async_unwind = 0; //@line 1992
 HEAP32[$ReallocAsyncCtx2 >> 2] = 602; //@line 1993
 $77 = $ReallocAsyncCtx2 + 4 | 0; //@line 1994
 HEAP32[$77 >> 2] = $2; //@line 1995
 $78 = $ReallocAsyncCtx2 + 8 | 0; //@line 1996
 HEAP8[$78 >> 0] = $39; //@line 1997
 $79 = $ReallocAsyncCtx2 + 9 | 0; //@line 1998
 HEAP8[$79 >> 0] = $30; //@line 1999
 $80 = $ReallocAsyncCtx2 + 12 | 0; //@line 2000
 HEAP32[$80 >> 2] = $8; //@line 2001
 $81 = $ReallocAsyncCtx2 + 16 | 0; //@line 2002
 HEAP32[$81 >> 2] = $10; //@line 2003
 $82 = $ReallocAsyncCtx2 + 20 | 0; //@line 2004
 HEAP32[$82 >> 2] = $12; //@line 2005
 $83 = $ReallocAsyncCtx2 + 24 | 0; //@line 2006
 HEAP32[$83 >> 2] = $14; //@line 2007
 $84 = $ReallocAsyncCtx2 + 28 | 0; //@line 2008
 HEAP32[$84 >> 2] = $16; //@line 2009
 $85 = $ReallocAsyncCtx2 + 32 | 0; //@line 2010
 HEAP32[$85 >> 2] = $18; //@line 2011
 $86 = $ReallocAsyncCtx2 + 36 | 0; //@line 2012
 HEAP32[$86 >> 2] = $20; //@line 2013
 $87 = $ReallocAsyncCtx2 + 40 | 0; //@line 2014
 HEAP32[$87 >> 2] = $22; //@line 2015
 $88 = $ReallocAsyncCtx2 + 44 | 0; //@line 2016
 HEAP32[$88 >> 2] = $24; //@line 2017
 $89 = $ReallocAsyncCtx2 + 48 | 0; //@line 2018
 HEAP32[$89 >> 2] = $26; //@line 2019
 $90 = $ReallocAsyncCtx2 + 52 | 0; //@line 2020
 HEAP32[$90 >> 2] = $28; //@line 2021
 sp = STACKTOP; //@line 2022
 return;
}
function _mbedtls_gcm_setkey__async_cb($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $103 = 0, $105 = 0, $106 = 0, $107 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $116 = 0, $121 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $137 = 0, $139 = 0, $144 = 0, $149 = 0, $151 = 0, $152 = 0, $153 = 0, $155 = 0, $156 = 0, $157 = 0, $160 = 0, $162 = 0, $167 = 0, $171 = 0, $172 = 0, $174 = 0, $178 = 0, $179 = 0, $181 = 0, $185 = 0, $186 = 0, $188 = 0, $192 = 0, $193 = 0, $195 = 0, $199 = 0, $200 = 0, $202 = 0, $206 = 0, $207 = 0, $209 = 0, $213 = 0, $214 = 0, $216 = 0, $220 = 0, $221 = 0, $223 = 0, $230 = 0, $237 = 0, $244 = 0, $251 = 0, $258 = 0, $265 = 0, $27 = 0, $272 = 0, $279 = 0, $286 = 0, $293 = 0, $300 = 0, $307 = 0, $314 = 0, $321 = 0, $4 = 0, $45 = 0, $6 = 0, $63 = 0, $81 = 0, $83 = 0, $88 = 0, $93 = 0, $98 = 0, $AsyncRetVal = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30963
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30965
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30969
 if (!$AsyncRetVal) {
  $27 = (HEAPU8[$4 + 1 >> 0] | 0) << 16 | (HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0) << 24 | (HEAPU8[$4 + 2 >> 0] | 0) << 8 | (HEAPU8[$4 + 3 >> 0] | 0); //@line 30988
  $45 = (HEAPU8[$4 + 5 >> 0] | 0) << 16 | (HEAPU8[$4 + 4 >> 0] | 0) << 24 | (HEAPU8[$4 + 6 >> 0] | 0) << 8 | (HEAPU8[$4 + 7 >> 0] | 0); //@line 31006
  $63 = (HEAPU8[$4 + 9 >> 0] | 0) << 16 | (HEAPU8[$4 + 8 >> 0] | 0) << 24 | (HEAPU8[$4 + 10 >> 0] | 0) << 8 | (HEAPU8[$4 + 11 >> 0] | 0); //@line 31024
  $81 = (HEAPU8[$4 + 13 >> 0] | 0) << 16 | (HEAPU8[$4 + 12 >> 0] | 0) << 24 | (HEAPU8[$4 + 14 >> 0] | 0) << 8 | (HEAPU8[$4 + 15 >> 0] | 0); //@line 31042
  $83 = $6 + 136 | 0; //@line 31044
  HEAP32[$83 >> 2] = $81; //@line 31046
  HEAP32[$83 + 4 >> 2] = $63; //@line 31049
  $88 = $6 + 264 | 0; //@line 31051
  HEAP32[$88 >> 2] = $45; //@line 31053
  HEAP32[$88 + 4 >> 2] = $27; //@line 31056
  $93 = $6 + 200 | 0; //@line 31058
  HEAP32[$93 >> 2] = 0; //@line 31060
  HEAP32[$93 + 4 >> 2] = 0; //@line 31063
  $98 = $6 + 72 | 0; //@line 31065
  HEAP32[$98 >> 2] = 0; //@line 31067
  HEAP32[$98 + 4 >> 2] = 0; //@line 31070
  $103 = _i64Subtract(0, 0, $81 & 1 | 0, 0) | 0; //@line 31072
  $105 = _bitshift64Shl($45 | 0, 0, 63) | 0; //@line 31074
  $106 = tempRet0; //@line 31075
  $107 = _bitshift64Lshr($81 | 0, $63 | 0, 1) | 0; //@line 31076
  $109 = $107 | $105; //@line 31078
  $110 = tempRet0 | $106; //@line 31079
  $111 = _bitshift64Lshr($45 | 0, $27 | 0, 1) | 0; //@line 31080
  $112 = tempRet0; //@line 31081
  $114 = $103 & -520093696 ^ $112; //@line 31083
  $116 = $6 + 104 | 0; //@line 31085
  HEAP32[$116 >> 2] = $109; //@line 31087
  HEAP32[$116 + 4 >> 2] = $110; //@line 31090
  $121 = $6 + 232 | 0; //@line 31092
  HEAP32[$121 >> 2] = $111; //@line 31094
  HEAP32[$121 + 4 >> 2] = $114; //@line 31097
  $126 = _i64Subtract(0, 0, $107 & 1 | 0, 0) | 0; //@line 31099
  $128 = _bitshift64Shl($111 | 0, $112 | 0, 63) | 0; //@line 31101
  $129 = tempRet0; //@line 31102
  $130 = _bitshift64Lshr($109 | 0, $110 | 0, 1) | 0; //@line 31103
  $132 = $130 | $128; //@line 31105
  $133 = tempRet0 | $129; //@line 31106
  $134 = _bitshift64Lshr($111 | 0, $114 | 0, 1) | 0; //@line 31107
  $135 = tempRet0; //@line 31108
  $137 = $126 & -520093696 ^ $135; //@line 31110
  $139 = $6 + 88 | 0; //@line 31112
  HEAP32[$139 >> 2] = $132; //@line 31114
  HEAP32[$139 + 4 >> 2] = $133; //@line 31117
  $144 = $6 + 216 | 0; //@line 31119
  HEAP32[$144 >> 2] = $134; //@line 31121
  HEAP32[$144 + 4 >> 2] = $137; //@line 31124
  $149 = _i64Subtract(0, 0, $130 & 1 | 0, 0) | 0; //@line 31126
  $151 = _bitshift64Shl($134 | 0, $135 | 0, 63) | 0; //@line 31128
  $152 = tempRet0; //@line 31129
  $153 = _bitshift64Lshr($132 | 0, $133 | 0, 1) | 0; //@line 31130
  $155 = $151 | $153; //@line 31132
  $156 = $152 | tempRet0; //@line 31133
  $157 = _bitshift64Lshr($134 | 0, $137 | 0, 1) | 0; //@line 31134
  $160 = $149 & -520093696 ^ tempRet0; //@line 31137
  $162 = $6 + 80 | 0; //@line 31139
  HEAP32[$162 >> 2] = $155; //@line 31141
  HEAP32[$162 + 4 >> 2] = $156; //@line 31144
  $167 = $6 + 208 | 0; //@line 31146
  HEAP32[$167 >> 2] = $157; //@line 31148
  HEAP32[$167 + 4 >> 2] = $160; //@line 31151
  $171 = $157 ^ $134; //@line 31152
  $172 = $160 ^ $137; //@line 31153
  $174 = $6 + 224 | 0; //@line 31155
  HEAP32[$174 >> 2] = $171; //@line 31157
  HEAP32[$174 + 4 >> 2] = $172; //@line 31160
  $178 = $155 ^ $132; //@line 31161
  $179 = $156 ^ $133; //@line 31162
  $181 = $6 + 96 | 0; //@line 31164
  HEAP32[$181 >> 2] = $178; //@line 31166
  HEAP32[$181 + 4 >> 2] = $179; //@line 31169
  $185 = $157 ^ $111; //@line 31170
  $186 = $160 ^ $114; //@line 31171
  $188 = $6 + 240 | 0; //@line 31173
  HEAP32[$188 >> 2] = $185; //@line 31175
  HEAP32[$188 + 4 >> 2] = $186; //@line 31178
  $192 = $155 ^ $109; //@line 31179
  $193 = $156 ^ $110; //@line 31180
  $195 = $6 + 112 | 0; //@line 31182
  HEAP32[$195 >> 2] = $192; //@line 31184
  HEAP32[$195 + 4 >> 2] = $193; //@line 31187
  $199 = $134 ^ $111; //@line 31188
  $200 = $137 ^ $114; //@line 31189
  $202 = $6 + 248 | 0; //@line 31191
  HEAP32[$202 >> 2] = $199; //@line 31193
  HEAP32[$202 + 4 >> 2] = $200; //@line 31196
  $206 = $132 ^ $109; //@line 31197
  $207 = $133 ^ $110; //@line 31198
  $209 = $6 + 120 | 0; //@line 31200
  HEAP32[$209 >> 2] = $206; //@line 31202
  HEAP32[$209 + 4 >> 2] = $207; //@line 31205
  $213 = $171 ^ $111; //@line 31206
  $214 = $172 ^ $114; //@line 31207
  $216 = $6 + 256 | 0; //@line 31209
  HEAP32[$216 >> 2] = $213; //@line 31211
  HEAP32[$216 + 4 >> 2] = $214; //@line 31214
  $220 = $178 ^ $109; //@line 31215
  $221 = $179 ^ $110; //@line 31216
  $223 = $6 + 128 | 0; //@line 31218
  HEAP32[$223 >> 2] = $220; //@line 31220
  HEAP32[$223 + 4 >> 2] = $221; //@line 31223
  $230 = $6 + 272 | 0; //@line 31227
  HEAP32[$230 >> 2] = $157 ^ $45; //@line 31229
  HEAP32[$230 + 4 >> 2] = $160 ^ $27; //@line 31232
  $237 = $6 + 144 | 0; //@line 31236
  HEAP32[$237 >> 2] = $155 ^ $81; //@line 31238
  HEAP32[$237 + 4 >> 2] = $156 ^ $63; //@line 31241
  $244 = $6 + 280 | 0; //@line 31245
  HEAP32[$244 >> 2] = $134 ^ $45; //@line 31247
  HEAP32[$244 + 4 >> 2] = $137 ^ $27; //@line 31250
  $251 = $6 + 152 | 0; //@line 31254
  HEAP32[$251 >> 2] = $132 ^ $81; //@line 31256
  HEAP32[$251 + 4 >> 2] = $133 ^ $63; //@line 31259
  $258 = $6 + 288 | 0; //@line 31263
  HEAP32[$258 >> 2] = $171 ^ $45; //@line 31265
  HEAP32[$258 + 4 >> 2] = $172 ^ $27; //@line 31268
  $265 = $6 + 160 | 0; //@line 31272
  HEAP32[$265 >> 2] = $178 ^ $81; //@line 31274
  HEAP32[$265 + 4 >> 2] = $179 ^ $63; //@line 31277
  $272 = $6 + 296 | 0; //@line 31281
  HEAP32[$272 >> 2] = $111 ^ $45; //@line 31283
  HEAP32[$272 + 4 >> 2] = $114 ^ $27; //@line 31286
  $279 = $6 + 168 | 0; //@line 31290
  HEAP32[$279 >> 2] = $109 ^ $81; //@line 31292
  HEAP32[$279 + 4 >> 2] = $110 ^ $63; //@line 31295
  $286 = $6 + 304 | 0; //@line 31299
  HEAP32[$286 >> 2] = $185 ^ $45; //@line 31301
  HEAP32[$286 + 4 >> 2] = $186 ^ $27; //@line 31304
  $293 = $6 + 176 | 0; //@line 31308
  HEAP32[$293 >> 2] = $192 ^ $81; //@line 31310
  HEAP32[$293 + 4 >> 2] = $193 ^ $63; //@line 31313
  $300 = $6 + 312 | 0; //@line 31317
  HEAP32[$300 >> 2] = $199 ^ $45; //@line 31319
  HEAP32[$300 + 4 >> 2] = $200 ^ $27; //@line 31322
  $307 = $6 + 184 | 0; //@line 31326
  HEAP32[$307 >> 2] = $206 ^ $81; //@line 31328
  HEAP32[$307 + 4 >> 2] = $207 ^ $63; //@line 31331
  $314 = $6 + 320 | 0; //@line 31335
  HEAP32[$314 >> 2] = $213 ^ $45; //@line 31337
  HEAP32[$314 + 4 >> 2] = $214 ^ $27; //@line 31340
  $321 = $6 + 192 | 0; //@line 31344
  HEAP32[$321 >> 2] = $220 ^ $81; //@line 31346
  HEAP32[$321 + 4 >> 2] = $221 ^ $63; //@line 31349
  $$0$i = 0; //@line 31350
 } else {
  $$0$i = $AsyncRetVal; //@line 31352
 }
 HEAP32[___async_retval >> 2] = $$0$i; //@line 31355
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_4($0) {
 $0 = $0 | 0;
 var $$pre$i$i21 = 0, $10 = 0, $16 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 16944
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16946
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16948
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16950
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16952
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16954
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16960
 $$pre$i$i21 = HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0; //@line 16961
 HEAP32[HEAP32[$0 + 28 >> 2] >> 2] = $$pre$i$i21; //@line 16963
 if ($$pre$i$i21 | 0) {
  $20 = HEAP32[$$pre$i$i21 + 8 >> 2] | 0; //@line 16967
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 16968
  FUNCTION_TABLE_vi[$20 & 1023]($2); //@line 16969
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 558; //@line 16972
   $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 16973
   HEAP32[$21 >> 2] = $4; //@line 16974
   $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 16975
   HEAP32[$22 >> 2] = $6; //@line 16976
   $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 16977
   HEAP32[$23 >> 2] = $8; //@line 16978
   $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 16979
   HEAP32[$24 >> 2] = $10; //@line 16980
   $25 = $ReallocAsyncCtx6 + 20 | 0; //@line 16981
   HEAP32[$25 >> 2] = $2; //@line 16982
   $26 = $ReallocAsyncCtx6 + 24 | 0; //@line 16983
   HEAP32[$26 >> 2] = $16; //@line 16984
   sp = STACKTOP; //@line 16985
   return;
  }
  ___async_unwind = 0; //@line 16988
  HEAP32[$ReallocAsyncCtx6 >> 2] = 558; //@line 16989
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 16990
  HEAP32[$21 >> 2] = $4; //@line 16991
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 16992
  HEAP32[$22 >> 2] = $6; //@line 16993
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 16994
  HEAP32[$23 >> 2] = $8; //@line 16995
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 16996
  HEAP32[$24 >> 2] = $10; //@line 16997
  $25 = $ReallocAsyncCtx6 + 20 | 0; //@line 16998
  HEAP32[$25 >> 2] = $2; //@line 16999
  $26 = $ReallocAsyncCtx6 + 24 | 0; //@line 17000
  HEAP32[$26 >> 2] = $16; //@line 17001
  sp = STACKTOP; //@line 17002
  return;
 }
 $27 = $16 + 12 | 0; //@line 17005
 HEAP32[$16 >> 2] = 559; //@line 17006
 HEAP32[$16 + 4 >> 2] = 0; //@line 17008
 HEAP32[$16 + 8 >> 2] = $6; //@line 17010
 HEAP32[$27 >> 2] = 848; //@line 17011
 $28 = $6 + 1276 | 0; //@line 17012
 if (($28 | 0) == ($16 | 0)) {
  $53 = HEAP32[214] | 0; //@line 17016
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(24) | 0; //@line 17017
  FUNCTION_TABLE_vi[$53 & 1023]($16); //@line 17018
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 562; //@line 17021
   $54 = $ReallocAsyncCtx9 + 4 | 0; //@line 17022
   HEAP32[$54 >> 2] = $4; //@line 17023
   $55 = $ReallocAsyncCtx9 + 8 | 0; //@line 17024
   HEAP32[$55 >> 2] = $6; //@line 17025
   $56 = $ReallocAsyncCtx9 + 12 | 0; //@line 17026
   HEAP32[$56 >> 2] = $8; //@line 17027
   $57 = $ReallocAsyncCtx9 + 16 | 0; //@line 17028
   HEAP32[$57 >> 2] = $16; //@line 17029
   $58 = $ReallocAsyncCtx9 + 20 | 0; //@line 17030
   HEAP32[$58 >> 2] = $10; //@line 17031
   sp = STACKTOP; //@line 17032
   return;
  }
  ___async_unwind = 0; //@line 17035
  HEAP32[$ReallocAsyncCtx9 >> 2] = 562; //@line 17036
  $54 = $ReallocAsyncCtx9 + 4 | 0; //@line 17037
  HEAP32[$54 >> 2] = $4; //@line 17038
  $55 = $ReallocAsyncCtx9 + 8 | 0; //@line 17039
  HEAP32[$55 >> 2] = $6; //@line 17040
  $56 = $ReallocAsyncCtx9 + 12 | 0; //@line 17041
  HEAP32[$56 >> 2] = $8; //@line 17042
  $57 = $ReallocAsyncCtx9 + 16 | 0; //@line 17043
  HEAP32[$57 >> 2] = $16; //@line 17044
  $58 = $ReallocAsyncCtx9 + 20 | 0; //@line 17045
  HEAP32[$58 >> 2] = $10; //@line 17046
  sp = STACKTOP; //@line 17047
  return;
 }
 $30 = $6 + 1288 | 0; //@line 17050
 $31 = HEAP32[$30 >> 2] | 0; //@line 17051
 if (!$31) {
  $44 = HEAP32[213] | 0; //@line 17055
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 17056
  FUNCTION_TABLE_vii[$44 & 31]($28, $16); //@line 17057
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 561; //@line 17060
   $45 = $ReallocAsyncCtx8 + 4 | 0; //@line 17061
   HEAP32[$45 >> 2] = $4; //@line 17062
   $46 = $ReallocAsyncCtx8 + 8 | 0; //@line 17063
   HEAP32[$46 >> 2] = $6; //@line 17064
   $47 = $ReallocAsyncCtx8 + 12 | 0; //@line 17065
   HEAP32[$47 >> 2] = $8; //@line 17066
   $48 = $ReallocAsyncCtx8 + 16 | 0; //@line 17067
   HEAP32[$48 >> 2] = $27; //@line 17068
   $49 = $ReallocAsyncCtx8 + 20 | 0; //@line 17069
   HEAP32[$49 >> 2] = $30; //@line 17070
   $50 = $ReallocAsyncCtx8 + 24 | 0; //@line 17071
   HEAP32[$50 >> 2] = $16; //@line 17072
   $51 = $ReallocAsyncCtx8 + 28 | 0; //@line 17073
   HEAP32[$51 >> 2] = $10; //@line 17074
   sp = STACKTOP; //@line 17075
   return;
  }
  ___async_unwind = 0; //@line 17078
  HEAP32[$ReallocAsyncCtx8 >> 2] = 561; //@line 17079
  $45 = $ReallocAsyncCtx8 + 4 | 0; //@line 17080
  HEAP32[$45 >> 2] = $4; //@line 17081
  $46 = $ReallocAsyncCtx8 + 8 | 0; //@line 17082
  HEAP32[$46 >> 2] = $6; //@line 17083
  $47 = $ReallocAsyncCtx8 + 12 | 0; //@line 17084
  HEAP32[$47 >> 2] = $8; //@line 17085
  $48 = $ReallocAsyncCtx8 + 16 | 0; //@line 17086
  HEAP32[$48 >> 2] = $27; //@line 17087
  $49 = $ReallocAsyncCtx8 + 20 | 0; //@line 17088
  HEAP32[$49 >> 2] = $30; //@line 17089
  $50 = $ReallocAsyncCtx8 + 24 | 0; //@line 17090
  HEAP32[$50 >> 2] = $16; //@line 17091
  $51 = $ReallocAsyncCtx8 + 28 | 0; //@line 17092
  HEAP32[$51 >> 2] = $10; //@line 17093
  sp = STACKTOP; //@line 17094
  return;
 } else {
  $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 17098
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 17099
  FUNCTION_TABLE_vi[$34 & 1023]($28); //@line 17100
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 560; //@line 17103
   $35 = $ReallocAsyncCtx7 + 4 | 0; //@line 17104
   HEAP32[$35 >> 2] = $4; //@line 17105
   $36 = $ReallocAsyncCtx7 + 8 | 0; //@line 17106
   HEAP32[$36 >> 2] = $6; //@line 17107
   $37 = $ReallocAsyncCtx7 + 12 | 0; //@line 17108
   HEAP32[$37 >> 2] = $8; //@line 17109
   $38 = $ReallocAsyncCtx7 + 16 | 0; //@line 17110
   HEAP32[$38 >> 2] = $27; //@line 17111
   $39 = $ReallocAsyncCtx7 + 20 | 0; //@line 17112
   HEAP32[$39 >> 2] = $30; //@line 17113
   $40 = $ReallocAsyncCtx7 + 24 | 0; //@line 17114
   HEAP32[$40 >> 2] = $16; //@line 17115
   $41 = $ReallocAsyncCtx7 + 28 | 0; //@line 17116
   HEAP32[$41 >> 2] = $10; //@line 17117
   $42 = $ReallocAsyncCtx7 + 32 | 0; //@line 17118
   HEAP32[$42 >> 2] = $28; //@line 17119
   sp = STACKTOP; //@line 17120
   return;
  }
  ___async_unwind = 0; //@line 17123
  HEAP32[$ReallocAsyncCtx7 >> 2] = 560; //@line 17124
  $35 = $ReallocAsyncCtx7 + 4 | 0; //@line 17125
  HEAP32[$35 >> 2] = $4; //@line 17126
  $36 = $ReallocAsyncCtx7 + 8 | 0; //@line 17127
  HEAP32[$36 >> 2] = $6; //@line 17128
  $37 = $ReallocAsyncCtx7 + 12 | 0; //@line 17129
  HEAP32[$37 >> 2] = $8; //@line 17130
  $38 = $ReallocAsyncCtx7 + 16 | 0; //@line 17131
  HEAP32[$38 >> 2] = $27; //@line 17132
  $39 = $ReallocAsyncCtx7 + 20 | 0; //@line 17133
  HEAP32[$39 >> 2] = $30; //@line 17134
  $40 = $ReallocAsyncCtx7 + 24 | 0; //@line 17135
  HEAP32[$40 >> 2] = $16; //@line 17136
  $41 = $ReallocAsyncCtx7 + 28 | 0; //@line 17137
  HEAP32[$41 >> 2] = $10; //@line 17138
  $42 = $ReallocAsyncCtx7 + 32 | 0; //@line 17139
  HEAP32[$42 >> 2] = $28; //@line 17140
  sp = STACKTOP; //@line 17141
  return;
 }
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_398($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $27 = 0, $29 = 0, $31 = 0, $33 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $45 = 0, $46 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 20505
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20507
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20509
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20511
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20513
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20515
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20517
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20519
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20523
 $20 = $0 + 40 | 0; //@line 20525
 $22 = HEAP32[$20 >> 2] | 0; //@line 20527
 $25 = HEAP32[$20 + 4 >> 2] | 0; //@line 20530
 $27 = HEAP32[$0 + 48 >> 2] | 0; //@line 20532
 $29 = HEAP32[$0 + 52 >> 2] | 0; //@line 20534
 $31 = HEAP32[$0 + 56 >> 2] | 0; //@line 20536
 $33 = HEAP32[$0 + 60 >> 2] | 0; //@line 20538
 $35 = HEAP32[$0 + 64 >> 2] | 0; //@line 20540
 $37 = HEAP32[$0 + 68 >> 2] | 0; //@line 20542
 $39 = HEAP32[$0 + 72 >> 2] | 0; //@line 20544
 $41 = HEAP32[$0 + 76 >> 2] | 0; //@line 20546
 $43 = HEAP32[$0 + 80 >> 2] | 0; //@line 20548
 $45 = HEAP32[$0 + 84 >> 2] | 0; //@line 20550
 HEAP32[HEAP32[$0 + 32 >> 2] >> 2] = HEAP32[$12 >> 2]; //@line 20552
 __ZN4mbed6Ticker5setupEy($18, $22, $25); //@line 20553
 $46 = HEAP32[$12 >> 2] | 0; //@line 20554
 if ($46 | 0) {
  $49 = HEAP32[$46 + 8 >> 2] | 0; //@line 20558
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(64) | 0; //@line 20559
  FUNCTION_TABLE_vi[$49 & 1023]($14); //@line 20560
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 73; //@line 20563
   $50 = $ReallocAsyncCtx6 + 4 | 0; //@line 20564
   HEAP32[$50 >> 2] = $2; //@line 20565
   $51 = $ReallocAsyncCtx6 + 8 | 0; //@line 20566
   HEAP32[$51 >> 2] = $4; //@line 20567
   $52 = $ReallocAsyncCtx6 + 12 | 0; //@line 20568
   HEAP32[$52 >> 2] = $6; //@line 20569
   $53 = $ReallocAsyncCtx6 + 16 | 0; //@line 20570
   HEAP32[$53 >> 2] = $8; //@line 20571
   $54 = $ReallocAsyncCtx6 + 20 | 0; //@line 20572
   HEAP32[$54 >> 2] = $10; //@line 20573
   $55 = $ReallocAsyncCtx6 + 24 | 0; //@line 20574
   HEAP32[$55 >> 2] = $27; //@line 20575
   $56 = $ReallocAsyncCtx6 + 28 | 0; //@line 20576
   HEAP32[$56 >> 2] = $29; //@line 20577
   $57 = $ReallocAsyncCtx6 + 32 | 0; //@line 20578
   HEAP32[$57 >> 2] = $31; //@line 20579
   $58 = $ReallocAsyncCtx6 + 36 | 0; //@line 20580
   HEAP32[$58 >> 2] = $33; //@line 20581
   $59 = $ReallocAsyncCtx6 + 40 | 0; //@line 20582
   HEAP32[$59 >> 2] = $35; //@line 20583
   $60 = $ReallocAsyncCtx6 + 44 | 0; //@line 20584
   HEAP32[$60 >> 2] = $37; //@line 20585
   $61 = $ReallocAsyncCtx6 + 48 | 0; //@line 20586
   HEAP32[$61 >> 2] = $39; //@line 20587
   $62 = $ReallocAsyncCtx6 + 52 | 0; //@line 20588
   HEAP32[$62 >> 2] = $41; //@line 20589
   $63 = $ReallocAsyncCtx6 + 56 | 0; //@line 20590
   HEAP32[$63 >> 2] = $43; //@line 20591
   $64 = $ReallocAsyncCtx6 + 60 | 0; //@line 20592
   HEAP32[$64 >> 2] = $45; //@line 20593
   sp = STACKTOP; //@line 20594
   return;
  }
  ___async_unwind = 0; //@line 20597
  HEAP32[$ReallocAsyncCtx6 >> 2] = 73; //@line 20598
  $50 = $ReallocAsyncCtx6 + 4 | 0; //@line 20599
  HEAP32[$50 >> 2] = $2; //@line 20600
  $51 = $ReallocAsyncCtx6 + 8 | 0; //@line 20601
  HEAP32[$51 >> 2] = $4; //@line 20602
  $52 = $ReallocAsyncCtx6 + 12 | 0; //@line 20603
  HEAP32[$52 >> 2] = $6; //@line 20604
  $53 = $ReallocAsyncCtx6 + 16 | 0; //@line 20605
  HEAP32[$53 >> 2] = $8; //@line 20606
  $54 = $ReallocAsyncCtx6 + 20 | 0; //@line 20607
  HEAP32[$54 >> 2] = $10; //@line 20608
  $55 = $ReallocAsyncCtx6 + 24 | 0; //@line 20609
  HEAP32[$55 >> 2] = $27; //@line 20610
  $56 = $ReallocAsyncCtx6 + 28 | 0; //@line 20611
  HEAP32[$56 >> 2] = $29; //@line 20612
  $57 = $ReallocAsyncCtx6 + 32 | 0; //@line 20613
  HEAP32[$57 >> 2] = $31; //@line 20614
  $58 = $ReallocAsyncCtx6 + 36 | 0; //@line 20615
  HEAP32[$58 >> 2] = $33; //@line 20616
  $59 = $ReallocAsyncCtx6 + 40 | 0; //@line 20617
  HEAP32[$59 >> 2] = $35; //@line 20618
  $60 = $ReallocAsyncCtx6 + 44 | 0; //@line 20619
  HEAP32[$60 >> 2] = $37; //@line 20620
  $61 = $ReallocAsyncCtx6 + 48 | 0; //@line 20621
  HEAP32[$61 >> 2] = $39; //@line 20622
  $62 = $ReallocAsyncCtx6 + 52 | 0; //@line 20623
  HEAP32[$62 >> 2] = $41; //@line 20624
  $63 = $ReallocAsyncCtx6 + 56 | 0; //@line 20625
  HEAP32[$63 >> 2] = $43; //@line 20626
  $64 = $ReallocAsyncCtx6 + 60 | 0; //@line 20627
  HEAP32[$64 >> 2] = $45; //@line 20628
  sp = STACKTOP; //@line 20629
  return;
 }
 $67 = (HEAP8[$10 + 770 >> 0] | 0) == 0; //@line 20634
 _printf(10880, $43) | 0; //@line 20635
 if ($67) {
  HEAP32[$39 >> 2] = 6; //@line 20637
  _printf(10946, $39) | 0; //@line 20638
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(24) | 0; //@line 20639
  _putchar(10) | 0; //@line 20640
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 77; //@line 20643
   $73 = $ReallocAsyncCtx8 + 4 | 0; //@line 20644
   HEAP32[$73 >> 2] = $10; //@line 20645
   $74 = $ReallocAsyncCtx8 + 8 | 0; //@line 20646
   HEAP32[$74 >> 2] = $27; //@line 20647
   $75 = $ReallocAsyncCtx8 + 12 | 0; //@line 20648
   HEAP32[$75 >> 2] = $29; //@line 20649
   $76 = $ReallocAsyncCtx8 + 16 | 0; //@line 20650
   HEAP32[$76 >> 2] = $31; //@line 20651
   $77 = $ReallocAsyncCtx8 + 20 | 0; //@line 20652
   HEAP32[$77 >> 2] = $33; //@line 20653
   sp = STACKTOP; //@line 20654
   return;
  }
  ___async_unwind = 0; //@line 20657
  HEAP32[$ReallocAsyncCtx8 >> 2] = 77; //@line 20658
  $73 = $ReallocAsyncCtx8 + 4 | 0; //@line 20659
  HEAP32[$73 >> 2] = $10; //@line 20660
  $74 = $ReallocAsyncCtx8 + 8 | 0; //@line 20661
  HEAP32[$74 >> 2] = $27; //@line 20662
  $75 = $ReallocAsyncCtx8 + 12 | 0; //@line 20663
  HEAP32[$75 >> 2] = $29; //@line 20664
  $76 = $ReallocAsyncCtx8 + 16 | 0; //@line 20665
  HEAP32[$76 >> 2] = $31; //@line 20666
  $77 = $ReallocAsyncCtx8 + 20 | 0; //@line 20667
  HEAP32[$77 >> 2] = $33; //@line 20668
  sp = STACKTOP; //@line 20669
  return;
 } else {
  HEAP32[$35 >> 2] = 5; //@line 20672
  _printf(10946, $35) | 0; //@line 20673
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(24) | 0; //@line 20674
  _putchar(10) | 0; //@line 20675
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 74; //@line 20678
   $68 = $ReallocAsyncCtx10 + 4 | 0; //@line 20679
   HEAP32[$68 >> 2] = $10; //@line 20680
   $69 = $ReallocAsyncCtx10 + 8 | 0; //@line 20681
   HEAP32[$69 >> 2] = $2; //@line 20682
   $70 = $ReallocAsyncCtx10 + 12 | 0; //@line 20683
   HEAP32[$70 >> 2] = $4; //@line 20684
   $71 = $ReallocAsyncCtx10 + 16 | 0; //@line 20685
   HEAP32[$71 >> 2] = $6; //@line 20686
   $72 = $ReallocAsyncCtx10 + 20 | 0; //@line 20687
   HEAP32[$72 >> 2] = $8; //@line 20688
   sp = STACKTOP; //@line 20689
   return;
  }
  ___async_unwind = 0; //@line 20692
  HEAP32[$ReallocAsyncCtx10 >> 2] = 74; //@line 20693
  $68 = $ReallocAsyncCtx10 + 4 | 0; //@line 20694
  HEAP32[$68 >> 2] = $10; //@line 20695
  $69 = $ReallocAsyncCtx10 + 8 | 0; //@line 20696
  HEAP32[$69 >> 2] = $2; //@line 20697
  $70 = $ReallocAsyncCtx10 + 12 | 0; //@line 20698
  HEAP32[$70 >> 2] = $4; //@line 20699
  $71 = $ReallocAsyncCtx10 + 16 | 0; //@line 20700
  HEAP32[$71 >> 2] = $6; //@line 20701
  $72 = $ReallocAsyncCtx10 + 20 | 0; //@line 20702
  HEAP32[$72 >> 2] = $8; //@line 20703
  sp = STACKTOP; //@line 20704
  return;
 }
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $103 = 0, $106 = 0, $107 = 0, $109 = 0, $116 = 0, $119 = 0, $12 = 0, $121 = 0, $122 = 0, $127 = 0, $130 = 0, $19 = 0, $20 = 0, $23 = 0, $29 = 0, $35 = 0, $41 = 0, $42 = 0, $43 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $67 = 0, $7 = 0, $85 = 0, $88 = 0, $90 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx6 = 0, $switch$selectcmp$i = 0, $switch$selectcmp4$i = 0, sp = 0;
 sp = STACKTOP; //@line 23565
 $6 = $1 + 1 | 0; //@line 23568
 $7 = HEAP8[$6 >> 0] | 0; //@line 23569
 $10 = HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + ($7 << 24 >> 24) >> 0] | 0; //@line 23572
 $12 = HEAP32[$0 + 112 >> 2] | 0; //@line 23574
 $19 = $1 + 2 | 0; //@line 23581
 $20 = HEAP8[$19 >> 0] | 0; //@line 23582
 $23 = HEAP8[(HEAP32[$0 + 72 >> 2] | 0) + ((HEAPU8[$12 + ((HEAPU8[$1 >> 0] | 0) * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 2 >> 0] | 0; //@line 23585
 if ($20 << 24 >> 24 > $23 << 24 >> 24) {
  HEAP8[$19 >> 0] = $23; //@line 23588
  $35 = $23; //@line 23589
 } else {
  $35 = $20; //@line 23591
 }
 $29 = HEAP32[(HEAP32[$0 + 80 >> 2] | 0) + (($7 & 255) << 2) >> 2] | 0; //@line 23597
 $switch$selectcmp$i = ($29 | 0) == 25e4; //@line 23598
 $switch$selectcmp4$i = ($29 | 0) == 5e5; //@line 23599
 $41 = ~~+Math_floor(+(+HEAPF32[$1 + 4 >> 2] - +($35 << 24 >> 24 << 1 >>> 0) - +HEAPF32[$1 + 8 >> 2])); //@line 23610
 $42 = $0 + 4 | 0; //@line 23611
 $43 = HEAP32[$42 >> 2] | 0; //@line 23612
 $46 = HEAP32[(HEAP32[$43 >> 2] | 0) + 72 >> 2] | 0; //@line 23615
 $AsyncCtx = _emscripten_alloc_async_context(44, sp) | 0; //@line 23616
 FUNCTION_TABLE_vi[$46 & 1023]($43); //@line 23617
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 612; //@line 23620
  HEAP32[$AsyncCtx + 4 >> 2] = $42; //@line 23622
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 23624
  HEAP32[$AsyncCtx + 12 >> 2] = $12; //@line 23626
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 23628
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 23630
  HEAP8[$AsyncCtx + 24 >> 0] = $switch$selectcmp$i & 1; //@line 23633
  HEAP8[$AsyncCtx + 25 >> 0] = $switch$selectcmp4$i & 1; //@line 23636
  HEAP8[$AsyncCtx + 26 >> 0] = $10; //@line 23638
  HEAP8[$AsyncCtx + 27 >> 0] = $41; //@line 23640
  HEAP32[$AsyncCtx + 28 >> 2] = $1; //@line 23642
  HEAP32[$AsyncCtx + 32 >> 2] = $3; //@line 23644
  HEAP32[$AsyncCtx + 36 >> 2] = $19; //@line 23646
  HEAP32[$AsyncCtx + 40 >> 2] = $2; //@line 23648
  sp = STACKTOP; //@line 23649
  return 0; //@line 23650
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 23652
 $60 = HEAP32[$42 >> 2] | 0; //@line 23653
 $63 = HEAP32[(HEAP32[$60 >> 2] | 0) + 32 >> 2] | 0; //@line 23656
 $67 = HEAP32[$12 + ((HEAPU8[$1 >> 0] | 0) * 12 | 0) >> 2] | 0; //@line 23660
 $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 23661
 FUNCTION_TABLE_vii[$63 & 31]($60, $67); //@line 23662
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 613; //@line 23665
  HEAP32[$AsyncCtx2 + 4 >> 2] = $6; //@line 23667
  HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 23669
  HEAP32[$AsyncCtx2 + 12 >> 2] = $42; //@line 23671
  HEAP8[$AsyncCtx2 + 16 >> 0] = $switch$selectcmp$i & 1; //@line 23674
  HEAP8[$AsyncCtx2 + 17 >> 0] = $switch$selectcmp4$i & 1; //@line 23677
  HEAP8[$AsyncCtx2 + 18 >> 0] = $10; //@line 23679
  HEAP8[$AsyncCtx2 + 19 >> 0] = $41; //@line 23681
  HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 23683
  HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 23685
  HEAP32[$AsyncCtx2 + 28 >> 2] = $19; //@line 23687
  HEAP32[$AsyncCtx2 + 32 >> 2] = $2; //@line 23689
  sp = STACKTOP; //@line 23690
  return 0; //@line 23691
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 23693
 $85 = HEAP32[$42 >> 2] | 0; //@line 23700
 $88 = HEAP32[(HEAP32[$85 >> 2] | 0) + 20 >> 2] | 0; //@line 23703
 $90 = $switch$selectcmp4$i ? 2 : $switch$selectcmp$i & 1; //@line 23705
 $91 = $10 << 24 >> 24; //@line 23706
 do {
  if ((HEAP8[$6 >> 0] | 0) == (HEAPU8[$0 + 27 >> 0] | 0)) {
   $AsyncCtx6 = _emscripten_alloc_async_context(24, sp) | 0; //@line 23710
   FUNCTION_TABLE_viiiiiiiiiiiiii[$88 & 1]($85, 0, $41, 25e3, $90, $91 * 1e3 | 0, 0, 5, 0, 1, 0, 0, 0, 3e3); //@line 23711
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 614; //@line 23714
    HEAP32[$AsyncCtx6 + 4 >> 2] = $42; //@line 23716
    HEAP32[$AsyncCtx6 + 8 >> 2] = $1; //@line 23718
    HEAP32[$AsyncCtx6 + 12 >> 2] = $3; //@line 23720
    HEAP32[$AsyncCtx6 + 16 >> 2] = $19; //@line 23722
    HEAP32[$AsyncCtx6 + 20 >> 2] = $2; //@line 23724
    sp = STACKTOP; //@line 23725
    return 0; //@line 23726
   } else {
    _emscripten_free_async_context($AsyncCtx6 | 0); //@line 23728
    $$0 = 0; //@line 23729
    break;
   }
  } else {
   $AsyncCtx10 = _emscripten_alloc_async_context(24, sp) | 0; //@line 23733
   FUNCTION_TABLE_viiiiiiiiiiiiii[$88 & 1]($85, 1, $41, 0, $90, $91, 1, 8, 0, 1, 0, 0, 0, 3e3); //@line 23734
   if (___async) {
    HEAP32[$AsyncCtx10 >> 2] = 615; //@line 23737
    HEAP32[$AsyncCtx10 + 4 >> 2] = $42; //@line 23739
    HEAP32[$AsyncCtx10 + 8 >> 2] = $1; //@line 23741
    HEAP32[$AsyncCtx10 + 12 >> 2] = $3; //@line 23743
    HEAP32[$AsyncCtx10 + 16 >> 2] = $19; //@line 23745
    HEAP32[$AsyncCtx10 + 20 >> 2] = $2; //@line 23747
    sp = STACKTOP; //@line 23748
    return 0; //@line 23749
   } else {
    _emscripten_free_async_context($AsyncCtx10 | 0); //@line 23751
    $$0 = 1; //@line 23752
    break;
   }
  }
 } while (0);
 $103 = HEAP32[$42 >> 2] | 0; //@line 23757
 $106 = HEAP32[(HEAP32[$103 >> 2] | 0) + 44 >> 2] | 0; //@line 23760
 $107 = $1 + 12 | 0; //@line 23761
 $109 = HEAP16[$107 >> 1] & 255; //@line 23763
 $AsyncCtx14 = _emscripten_alloc_async_context(28, sp) | 0; //@line 23764
 FUNCTION_TABLE_viii[$106 & 7]($103, $$0, $109); //@line 23765
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 616; //@line 23768
  HEAP32[$AsyncCtx14 + 4 >> 2] = $42; //@line 23770
  HEAP32[$AsyncCtx14 + 8 >> 2] = $107; //@line 23772
  HEAP32[$AsyncCtx14 + 12 >> 2] = $$0; //@line 23774
  HEAP32[$AsyncCtx14 + 16 >> 2] = $3; //@line 23776
  HEAP32[$AsyncCtx14 + 20 >> 2] = $19; //@line 23778
  HEAP32[$AsyncCtx14 + 24 >> 2] = $2; //@line 23780
  sp = STACKTOP; //@line 23781
  return 0; //@line 23782
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 23784
 $116 = HEAP32[$42 >> 2] | 0; //@line 23785
 $119 = HEAP32[(HEAP32[$116 >> 2] | 0) + 52 >> 2] | 0; //@line 23788
 $121 = HEAP16[$107 >> 1] & 255; //@line 23790
 $AsyncCtx17 = _emscripten_alloc_async_context(20, sp) | 0; //@line 23791
 $122 = FUNCTION_TABLE_iiii[$119 & 15]($116, $$0, $121) | 0; //@line 23792
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 617; //@line 23795
  HEAP32[$AsyncCtx17 + 4 >> 2] = $3; //@line 23797
  HEAP32[$AsyncCtx17 + 8 >> 2] = $42; //@line 23799
  HEAP32[$AsyncCtx17 + 12 >> 2] = $19; //@line 23801
  HEAP32[$AsyncCtx17 + 16 >> 2] = $2; //@line 23803
  sp = STACKTOP; //@line 23804
  return 0; //@line 23805
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 23807
 HEAP32[$3 >> 2] = $122; //@line 23808
 $127 = HEAP32[$42 >> 2] | 0; //@line 23809
 $130 = HEAP32[(HEAP32[$127 >> 2] | 0) + 76 >> 2] | 0; //@line 23812
 $AsyncCtx20 = _emscripten_alloc_async_context(12, sp) | 0; //@line 23813
 FUNCTION_TABLE_vi[$130 & 1023]($127); //@line 23814
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 618; //@line 23817
  HEAP32[$AsyncCtx20 + 4 >> 2] = $19; //@line 23819
  HEAP32[$AsyncCtx20 + 8 >> 2] = $2; //@line 23821
  sp = STACKTOP; //@line 23822
  return 0; //@line 23823
 } else {
  _emscripten_free_async_context($AsyncCtx20 | 0); //@line 23825
  HEAP8[$2 >> 0] = HEAP8[$19 >> 0] | 0; //@line 23827
  return 1; //@line 23828
 }
 return 0; //@line 23830
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_57($0) {
 $0 = $0 | 0;
 var $$0$i43 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $25 = 0, $31 = 0, $33 = 0, $39 = 0, $4 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $77 = 0, $8 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 21976
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21978
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21980
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21982
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21984
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21986
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21988
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21990
 $trunc = HEAP8[$0 + 32 >> 0] | 0; //@line 21992
 $17 = HEAP32[$0 + 36 >> 2] | 0; //@line 21994
 $19 = HEAP32[$0 + 40 >> 2] | 0; //@line 21996
 $21 = HEAP32[$0 + 44 >> 2] | 0; //@line 21998
 $23 = HEAP32[$0 + 48 >> 2] | 0; //@line 22000
 $25 = HEAP32[$0 + 52 >> 2] | 0; //@line 22002
 $31 = HEAP16[$0 + 64 >> 1] | 0; //@line 22008
 $33 = HEAP8[$0 + 66 >> 0] & 1; //@line 22011
 $39 = HEAP32[$0 + 76 >> 2] | 0; //@line 22017
 $45 = (HEAP32[___async_retval >> 2] | 0) == -1010 ? HEAP8[HEAP32[$0 + 60 >> 2] >> 0] | 0 : HEAP8[(HEAP32[$0 + 56 >> 2] | 0) + 1 >> 0] | 0; //@line 22026
 $$0$i43 = $45 & 255; //@line 22027
 $46 = $45 & 255; //@line 22028
 $47 = $31 & 65535; //@line 22029
 if (($$0$i43 & 65535) < ($31 & 65535)) {
  _printf(12115, HEAP32[$0 + 68 >> 2] | 0) | 0; //@line 22032
  HEAP32[$39 >> 2] = $47; //@line 22033
  HEAP32[$39 + 4 >> 2] = $46; //@line 22035
  _printf(12449, $39) | 0; //@line 22036
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(68) | 0; //@line 22037
  _putchar(10) | 0; //@line 22038
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 290; //@line 22041
   $49 = $ReallocAsyncCtx3 + 4 | 0; //@line 22042
   HEAP32[$49 >> 2] = $47; //@line 22043
   $50 = $ReallocAsyncCtx3 + 8 | 0; //@line 22044
   HEAP32[$50 >> 2] = $46; //@line 22045
   $51 = $ReallocAsyncCtx3 + 12 | 0; //@line 22046
   HEAP32[$51 >> 2] = $4; //@line 22047
   $52 = $ReallocAsyncCtx3 + 16 | 0; //@line 22048
   HEAP16[$52 >> 1] = $$0$i43; //@line 22049
   $53 = $ReallocAsyncCtx3 + 20 | 0; //@line 22050
   HEAP32[$53 >> 2] = $14; //@line 22051
   $54 = $ReallocAsyncCtx3 + 24 | 0; //@line 22052
   HEAP8[$54 >> 0] = $trunc; //@line 22053
   $55 = $ReallocAsyncCtx3 + 28 | 0; //@line 22054
   HEAP32[$55 >> 2] = $17; //@line 22055
   $56 = $ReallocAsyncCtx3 + 32 | 0; //@line 22056
   HEAP32[$56 >> 2] = $19; //@line 22057
   $57 = $ReallocAsyncCtx3 + 36 | 0; //@line 22058
   HEAP32[$57 >> 2] = $21; //@line 22059
   $58 = $ReallocAsyncCtx3 + 40 | 0; //@line 22060
   HEAP32[$58 >> 2] = $23; //@line 22061
   $59 = $ReallocAsyncCtx3 + 44 | 0; //@line 22062
   HEAP32[$59 >> 2] = $25; //@line 22063
   $60 = $ReallocAsyncCtx3 + 48 | 0; //@line 22064
   HEAP32[$60 >> 2] = $6; //@line 22065
   $61 = $ReallocAsyncCtx3 + 52 | 0; //@line 22066
   HEAP32[$61 >> 2] = $8; //@line 22067
   $62 = $ReallocAsyncCtx3 + 56 | 0; //@line 22068
   HEAP32[$62 >> 2] = $10; //@line 22069
   $63 = $ReallocAsyncCtx3 + 60 | 0; //@line 22070
   HEAP32[$63 >> 2] = $12; //@line 22071
   $64 = $ReallocAsyncCtx3 + 64 | 0; //@line 22072
   HEAP32[$64 >> 2] = $2; //@line 22073
   sp = STACKTOP; //@line 22074
   return;
  }
  ___async_unwind = 0; //@line 22077
  HEAP32[$ReallocAsyncCtx3 >> 2] = 290; //@line 22078
  $49 = $ReallocAsyncCtx3 + 4 | 0; //@line 22079
  HEAP32[$49 >> 2] = $47; //@line 22080
  $50 = $ReallocAsyncCtx3 + 8 | 0; //@line 22081
  HEAP32[$50 >> 2] = $46; //@line 22082
  $51 = $ReallocAsyncCtx3 + 12 | 0; //@line 22083
  HEAP32[$51 >> 2] = $4; //@line 22084
  $52 = $ReallocAsyncCtx3 + 16 | 0; //@line 22085
  HEAP16[$52 >> 1] = $$0$i43; //@line 22086
  $53 = $ReallocAsyncCtx3 + 20 | 0; //@line 22087
  HEAP32[$53 >> 2] = $14; //@line 22088
  $54 = $ReallocAsyncCtx3 + 24 | 0; //@line 22089
  HEAP8[$54 >> 0] = $trunc; //@line 22090
  $55 = $ReallocAsyncCtx3 + 28 | 0; //@line 22091
  HEAP32[$55 >> 2] = $17; //@line 22092
  $56 = $ReallocAsyncCtx3 + 32 | 0; //@line 22093
  HEAP32[$56 >> 2] = $19; //@line 22094
  $57 = $ReallocAsyncCtx3 + 36 | 0; //@line 22095
  HEAP32[$57 >> 2] = $21; //@line 22096
  $58 = $ReallocAsyncCtx3 + 40 | 0; //@line 22097
  HEAP32[$58 >> 2] = $23; //@line 22098
  $59 = $ReallocAsyncCtx3 + 44 | 0; //@line 22099
  HEAP32[$59 >> 2] = $25; //@line 22100
  $60 = $ReallocAsyncCtx3 + 48 | 0; //@line 22101
  HEAP32[$60 >> 2] = $6; //@line 22102
  $61 = $ReallocAsyncCtx3 + 52 | 0; //@line 22103
  HEAP32[$61 >> 2] = $8; //@line 22104
  $62 = $ReallocAsyncCtx3 + 56 | 0; //@line 22105
  HEAP32[$62 >> 2] = $10; //@line 22106
  $63 = $ReallocAsyncCtx3 + 60 | 0; //@line 22107
  HEAP32[$63 >> 2] = $12; //@line 22108
  $64 = $ReallocAsyncCtx3 + 64 | 0; //@line 22109
  HEAP32[$64 >> 2] = $2; //@line 22110
  sp = STACKTOP; //@line 22111
  return;
 }
 HEAP16[$4 + 2230 >> 1] = $31; //@line 22115
 HEAP16[$4 + 2232 >> 1] = 0; //@line 22117
 if (!$33) {
  _memcpy($4 + 1975 | 0, $14 | 0, $47 | 0) | 0; //@line 22120
 }
 switch ($trunc & 15) {
 case 9:
 case 5:
 case 1:
  {
   HEAP32[$4 + 1968 >> 2] = 0; //@line 22126
   HEAP8[$4 + 1972 >> 0] = HEAP8[$25 >> 0] | 0; //@line 22129
   switch ($trunc & 15) {
   case 6:
   case 2:
    {
     label = 10; //@line 22133
     break;
    }
   default:
    {}
   }
   break;
  }
 case 10:
 case 6:
 case 2:
  {
   label = 10; //@line 22142
   break;
  }
 default:
  {}
 }
 if ((label | 0) == 10) {
  HEAP32[$4 + 1968 >> 2] = 1; //@line 22150
  HEAP8[$4 + 1972 >> 0] = HEAP8[$25 >> 0] | 0; //@line 22153
  HEAP8[$4 + 1974 >> 0] = HEAP8[$4 + 2284 >> 0] | 0; //@line 22157
 }
 _printf(12115, $17) | 0; //@line 22159
 $77 = $4 + 2230 | 0; //@line 22160
 $82 = HEAPU16[$4 + 2232 >> 1] | 0; //@line 22165
 HEAP32[$21 >> 2] = HEAPU16[$77 >> 1]; //@line 22166
 HEAP32[$21 + 4 >> 2] = $82; //@line 22168
 _printf(12504, $21) | 0; //@line 22169
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 22170
 _putchar(10) | 0; //@line 22171
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 291; //@line 22174
  $83 = $ReallocAsyncCtx2 + 4 | 0; //@line 22175
  HEAP32[$83 >> 2] = $4; //@line 22176
  $84 = $ReallocAsyncCtx2 + 8 | 0; //@line 22177
  HEAP32[$84 >> 2] = $6; //@line 22178
  $85 = $ReallocAsyncCtx2 + 12 | 0; //@line 22179
  HEAP32[$85 >> 2] = $8; //@line 22180
  $86 = $ReallocAsyncCtx2 + 16 | 0; //@line 22181
  HEAP32[$86 >> 2] = $10; //@line 22182
  $87 = $ReallocAsyncCtx2 + 20 | 0; //@line 22183
  HEAP32[$87 >> 2] = $12; //@line 22184
  $88 = $ReallocAsyncCtx2 + 24 | 0; //@line 22185
  HEAP32[$88 >> 2] = $77; //@line 22186
  $89 = $ReallocAsyncCtx2 + 28 | 0; //@line 22187
  HEAP32[$89 >> 2] = $2; //@line 22188
  sp = STACKTOP; //@line 22189
  return;
 }
 ___async_unwind = 0; //@line 22192
 HEAP32[$ReallocAsyncCtx2 >> 2] = 291; //@line 22193
 $83 = $ReallocAsyncCtx2 + 4 | 0; //@line 22194
 HEAP32[$83 >> 2] = $4; //@line 22195
 $84 = $ReallocAsyncCtx2 + 8 | 0; //@line 22196
 HEAP32[$84 >> 2] = $6; //@line 22197
 $85 = $ReallocAsyncCtx2 + 12 | 0; //@line 22198
 HEAP32[$85 >> 2] = $8; //@line 22199
 $86 = $ReallocAsyncCtx2 + 16 | 0; //@line 22200
 HEAP32[$86 >> 2] = $10; //@line 22201
 $87 = $ReallocAsyncCtx2 + 20 | 0; //@line 22202
 HEAP32[$87 >> 2] = $12; //@line 22203
 $88 = $ReallocAsyncCtx2 + 24 | 0; //@line 22204
 HEAP32[$88 >> 2] = $77; //@line 22205
 $89 = $ReallocAsyncCtx2 + 28 | 0; //@line 22206
 HEAP32[$89 >> 2] = $2; //@line 22207
 sp = STACKTOP; //@line 22208
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_148($0) {
 $0 = $0 | 0;
 var $$3$off0204 = 0, $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $44 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $68 = 0, $71 = 0, $73 = 0, $74 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, $ReallocAsyncCtx4 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 29202
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29204
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29208
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29212
 $12 = HEAP8[$0 + 24 >> 0] & 1; //@line 29215
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29217
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29219
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29221
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 29223
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 29225
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 29227
 $26 = HEAP8[$0 + 52 >> 0] | 0; //@line 29229
 do {
  if (!(HEAP32[___async_retval >> 2] | 0)) {
   if (!(__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($14) | 0)) {
    if ($12) {
     $$3$off0204 = 6; //@line 29238
     break;
    } else {
     label = 9; //@line 29241
     break;
    }
   }
   _printf(12943, $2) | 0; //@line 29245
   _printf(13090, $6) | 0; //@line 29246
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 29247
   _putchar(10) | 0; //@line 29248
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 386; //@line 29251
    $32 = $ReallocAsyncCtx4 + 4 | 0; //@line 29252
    HEAP32[$32 >> 2] = $24; //@line 29253
    $33 = $ReallocAsyncCtx4 + 8 | 0; //@line 29254
    HEAP32[$33 >> 2] = $20; //@line 29255
    $34 = $ReallocAsyncCtx4 + 12 | 0; //@line 29256
    HEAP32[$34 >> 2] = $14; //@line 29257
    $35 = $ReallocAsyncCtx4 + 16 | 0; //@line 29258
    $$expand_i1_val = $12 & 1; //@line 29259
    HEAP8[$35 >> 0] = $$expand_i1_val; //@line 29260
    $36 = $ReallocAsyncCtx4 + 17 | 0; //@line 29261
    HEAP8[$36 >> 0] = $26; //@line 29262
    $37 = $ReallocAsyncCtx4 + 20 | 0; //@line 29263
    HEAP32[$37 >> 2] = $10; //@line 29264
    $38 = $ReallocAsyncCtx4 + 24 | 0; //@line 29265
    HEAP32[$38 >> 2] = $22; //@line 29266
    $39 = $ReallocAsyncCtx4 + 28 | 0; //@line 29267
    HEAP32[$39 >> 2] = $16; //@line 29268
    $40 = $ReallocAsyncCtx4 + 32 | 0; //@line 29269
    HEAP32[$40 >> 2] = $18; //@line 29270
    sp = STACKTOP; //@line 29271
    return;
   }
   ___async_unwind = 0; //@line 29274
   HEAP32[$ReallocAsyncCtx4 >> 2] = 386; //@line 29275
   $32 = $ReallocAsyncCtx4 + 4 | 0; //@line 29276
   HEAP32[$32 >> 2] = $24; //@line 29277
   $33 = $ReallocAsyncCtx4 + 8 | 0; //@line 29278
   HEAP32[$33 >> 2] = $20; //@line 29279
   $34 = $ReallocAsyncCtx4 + 12 | 0; //@line 29280
   HEAP32[$34 >> 2] = $14; //@line 29281
   $35 = $ReallocAsyncCtx4 + 16 | 0; //@line 29282
   $$expand_i1_val = $12 & 1; //@line 29283
   HEAP8[$35 >> 0] = $$expand_i1_val; //@line 29284
   $36 = $ReallocAsyncCtx4 + 17 | 0; //@line 29285
   HEAP8[$36 >> 0] = $26; //@line 29286
   $37 = $ReallocAsyncCtx4 + 20 | 0; //@line 29287
   HEAP32[$37 >> 2] = $10; //@line 29288
   $38 = $ReallocAsyncCtx4 + 24 | 0; //@line 29289
   HEAP32[$38 >> 2] = $22; //@line 29290
   $39 = $ReallocAsyncCtx4 + 28 | 0; //@line 29291
   HEAP32[$39 >> 2] = $16; //@line 29292
   $40 = $ReallocAsyncCtx4 + 32 | 0; //@line 29293
   HEAP32[$40 >> 2] = $18; //@line 29294
   sp = STACKTOP; //@line 29295
   return;
  } else {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 1; //@line 29300
   if ($12) {
    $$3$off0204 = 6; //@line 29302
   } else {
    label = 9; //@line 29304
   }
  }
 } while (0);
 if ((label | 0) == 9) {
  $44 = (__ZN11LoRaMacMcps16get_confirmationEv($10) | 0) + 10 | 0; //@line 29312
  if ($26 & 32) {
   HEAP8[$44 >> 0] = 1; //@line 29314
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 28 >> 0] = 1; //@line 29317
   $47 = HEAP32[$22 >> 2] | 0; //@line 29318
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(20) | 0; //@line 29320
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($47, $20 + 1076 | 0); //@line 29321
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 391; //@line 29324
    $49 = $ReallocAsyncCtx23 + 4 | 0; //@line 29325
    HEAP32[$49 >> 2] = $20; //@line 29326
    $50 = $ReallocAsyncCtx23 + 8 | 0; //@line 29327
    HEAP32[$50 >> 2] = $22; //@line 29328
    $51 = $ReallocAsyncCtx23 + 12 | 0; //@line 29329
    HEAP32[$51 >> 2] = $16; //@line 29330
    $52 = $ReallocAsyncCtx23 + 16 | 0; //@line 29331
    HEAP32[$52 >> 2] = $18; //@line 29332
    sp = STACKTOP; //@line 29333
    return;
   }
   ___async_unwind = 0; //@line 29336
   HEAP32[$ReallocAsyncCtx23 >> 2] = 391; //@line 29337
   $49 = $ReallocAsyncCtx23 + 4 | 0; //@line 29338
   HEAP32[$49 >> 2] = $20; //@line 29339
   $50 = $ReallocAsyncCtx23 + 8 | 0; //@line 29340
   HEAP32[$50 >> 2] = $22; //@line 29341
   $51 = $ReallocAsyncCtx23 + 12 | 0; //@line 29342
   HEAP32[$51 >> 2] = $16; //@line 29343
   $52 = $ReallocAsyncCtx23 + 16 | 0; //@line 29344
   HEAP32[$52 >> 2] = $18; //@line 29345
   sp = STACKTOP; //@line 29346
   return;
  }
  HEAP8[$44 >> 0] = 0; //@line 29349
  if ((HEAPU8[$20 + 895 >> 0] | 0) > (HEAPU8[$20 + 894 >> 0] | 0)) {
   $58 = HEAP32[$22 >> 2] | 0; //@line 29356
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(20) | 0; //@line 29358
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($58, $20 + 1076 | 0); //@line 29359
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 392; //@line 29362
    $60 = $ReallocAsyncCtx22 + 4 | 0; //@line 29363
    HEAP32[$60 >> 2] = $20; //@line 29364
    $61 = $ReallocAsyncCtx22 + 8 | 0; //@line 29365
    HEAP32[$61 >> 2] = $22; //@line 29366
    $62 = $ReallocAsyncCtx22 + 12 | 0; //@line 29367
    HEAP32[$62 >> 2] = $16; //@line 29368
    $63 = $ReallocAsyncCtx22 + 16 | 0; //@line 29369
    HEAP32[$63 >> 2] = $18; //@line 29370
    sp = STACKTOP; //@line 29371
    return;
   }
   ___async_unwind = 0; //@line 29374
   HEAP32[$ReallocAsyncCtx22 >> 2] = 392; //@line 29375
   $60 = $ReallocAsyncCtx22 + 4 | 0; //@line 29376
   HEAP32[$60 >> 2] = $20; //@line 29377
   $61 = $ReallocAsyncCtx22 + 8 | 0; //@line 29378
   HEAP32[$61 >> 2] = $22; //@line 29379
   $62 = $ReallocAsyncCtx22 + 12 | 0; //@line 29380
   HEAP32[$62 >> 2] = $16; //@line 29381
   $63 = $ReallocAsyncCtx22 + 16 | 0; //@line 29382
   HEAP32[$63 >> 2] = $18; //@line 29383
   sp = STACKTOP; //@line 29384
   return;
  } else {
   $$3$off0204 = 2; //@line 29387
  }
 }
 $64 = $20 + 944 | 0; //@line 29390
 HEAP8[$64 >> 0] = $$3$off0204 | HEAP8[$64 >> 0] & -7; //@line 29394
 $68 = $20 + 944 | 0; //@line 29395
 HEAP8[$68 >> 0] = HEAP8[$68 >> 0] | 32; //@line 29398
 $71 = HEAP32[$22 >> 2] | 0; //@line 29399
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 29401
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($71, $20 + 996 | 0, 1); //@line 29402
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 395; //@line 29405
  $73 = $ReallocAsyncCtx17 + 4 | 0; //@line 29406
  HEAP32[$73 >> 2] = $16; //@line 29407
  $74 = $ReallocAsyncCtx17 + 8 | 0; //@line 29408
  HEAP32[$74 >> 2] = $18; //@line 29409
  sp = STACKTOP; //@line 29410
  return;
 }
 ___async_unwind = 0; //@line 29413
 HEAP32[$ReallocAsyncCtx17 >> 2] = 395; //@line 29414
 $73 = $ReallocAsyncCtx17 + 4 | 0; //@line 29415
 HEAP32[$73 >> 2] = $16; //@line 29416
 $74 = $ReallocAsyncCtx17 + 8 | 0; //@line 29417
 HEAP32[$74 >> 2] = $18; //@line 29418
 sp = STACKTOP; //@line 29419
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_146($0) {
 $0 = $0 | 0;
 var $$3$off0204 = 0, $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $68 = 0, $71 = 0, $73 = 0, $74 = 0, $8 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 28703
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28705
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28707
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28709
 $8 = HEAP8[$0 + 16 >> 0] & 1; //@line 28712
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28714
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28716
 $14 = HEAP8[$0 + 28 >> 0] | 0; //@line 28718
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28720
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28722
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28724
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 28728
 do {
  if (!(HEAP32[___async_retval >> 2] | 0)) {
   if (!(__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($6) | 0)) {
    if ($8) {
     $$3$off0204 = 6; //@line 28739
     break;
    } else {
     label = 9; //@line 28742
     break;
    }
   }
   _printf(12943, $20) | 0; //@line 28746
   _printf(13090, $24) | 0; //@line 28747
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 28748
   _putchar(10) | 0; //@line 28749
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 390; //@line 28752
    $32 = $ReallocAsyncCtx2 + 4 | 0; //@line 28753
    HEAP32[$32 >> 2] = $2; //@line 28754
    $33 = $ReallocAsyncCtx2 + 8 | 0; //@line 28755
    HEAP32[$33 >> 2] = $4; //@line 28756
    $34 = $ReallocAsyncCtx2 + 12 | 0; //@line 28757
    HEAP32[$34 >> 2] = $6; //@line 28758
    $35 = $ReallocAsyncCtx2 + 16 | 0; //@line 28759
    $$expand_i1_val = $8 & 1; //@line 28760
    HEAP8[$35 >> 0] = $$expand_i1_val; //@line 28761
    $36 = $ReallocAsyncCtx2 + 17 | 0; //@line 28762
    HEAP8[$36 >> 0] = $14; //@line 28763
    $37 = $ReallocAsyncCtx2 + 20 | 0; //@line 28764
    HEAP32[$37 >> 2] = $16; //@line 28765
    $38 = $ReallocAsyncCtx2 + 24 | 0; //@line 28766
    HEAP32[$38 >> 2] = $18; //@line 28767
    $39 = $ReallocAsyncCtx2 + 28 | 0; //@line 28768
    HEAP32[$39 >> 2] = $10; //@line 28769
    $40 = $ReallocAsyncCtx2 + 32 | 0; //@line 28770
    HEAP32[$40 >> 2] = $12; //@line 28771
    sp = STACKTOP; //@line 28772
    return;
   }
   ___async_unwind = 0; //@line 28775
   HEAP32[$ReallocAsyncCtx2 >> 2] = 390; //@line 28776
   $32 = $ReallocAsyncCtx2 + 4 | 0; //@line 28777
   HEAP32[$32 >> 2] = $2; //@line 28778
   $33 = $ReallocAsyncCtx2 + 8 | 0; //@line 28779
   HEAP32[$33 >> 2] = $4; //@line 28780
   $34 = $ReallocAsyncCtx2 + 12 | 0; //@line 28781
   HEAP32[$34 >> 2] = $6; //@line 28782
   $35 = $ReallocAsyncCtx2 + 16 | 0; //@line 28783
   $$expand_i1_val = $8 & 1; //@line 28784
   HEAP8[$35 >> 0] = $$expand_i1_val; //@line 28785
   $36 = $ReallocAsyncCtx2 + 17 | 0; //@line 28786
   HEAP8[$36 >> 0] = $14; //@line 28787
   $37 = $ReallocAsyncCtx2 + 20 | 0; //@line 28788
   HEAP32[$37 >> 2] = $16; //@line 28789
   $38 = $ReallocAsyncCtx2 + 24 | 0; //@line 28790
   HEAP32[$38 >> 2] = $18; //@line 28791
   $39 = $ReallocAsyncCtx2 + 28 | 0; //@line 28792
   HEAP32[$39 >> 2] = $10; //@line 28793
   $40 = $ReallocAsyncCtx2 + 32 | 0; //@line 28794
   HEAP32[$40 >> 2] = $12; //@line 28795
   sp = STACKTOP; //@line 28796
   return;
  } else {
   HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 4 >> 2] = 1; //@line 28801
   if ($8) {
    $$3$off0204 = 6; //@line 28803
   } else {
    label = 9; //@line 28805
   }
  }
 } while (0);
 if ((label | 0) == 9) {
  $44 = (__ZN11LoRaMacMcps16get_confirmationEv($16) | 0) + 10 | 0; //@line 28813
  if ($14 & 32) {
   HEAP8[$44 >> 0] = 1; //@line 28815
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($16) | 0) + 28 >> 0] = 1; //@line 28818
   $47 = HEAP32[$18 >> 2] | 0; //@line 28819
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(20) | 0; //@line 28821
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($47, $4 + 1076 | 0); //@line 28822
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 391; //@line 28825
    $49 = $ReallocAsyncCtx23 + 4 | 0; //@line 28826
    HEAP32[$49 >> 2] = $4; //@line 28827
    $50 = $ReallocAsyncCtx23 + 8 | 0; //@line 28828
    HEAP32[$50 >> 2] = $18; //@line 28829
    $51 = $ReallocAsyncCtx23 + 12 | 0; //@line 28830
    HEAP32[$51 >> 2] = $10; //@line 28831
    $52 = $ReallocAsyncCtx23 + 16 | 0; //@line 28832
    HEAP32[$52 >> 2] = $12; //@line 28833
    sp = STACKTOP; //@line 28834
    return;
   }
   ___async_unwind = 0; //@line 28837
   HEAP32[$ReallocAsyncCtx23 >> 2] = 391; //@line 28838
   $49 = $ReallocAsyncCtx23 + 4 | 0; //@line 28839
   HEAP32[$49 >> 2] = $4; //@line 28840
   $50 = $ReallocAsyncCtx23 + 8 | 0; //@line 28841
   HEAP32[$50 >> 2] = $18; //@line 28842
   $51 = $ReallocAsyncCtx23 + 12 | 0; //@line 28843
   HEAP32[$51 >> 2] = $10; //@line 28844
   $52 = $ReallocAsyncCtx23 + 16 | 0; //@line 28845
   HEAP32[$52 >> 2] = $12; //@line 28846
   sp = STACKTOP; //@line 28847
   return;
  }
  HEAP8[$44 >> 0] = 0; //@line 28850
  if ((HEAPU8[$4 + 895 >> 0] | 0) > (HEAPU8[$4 + 894 >> 0] | 0)) {
   $58 = HEAP32[$18 >> 2] | 0; //@line 28857
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(20) | 0; //@line 28859
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($58, $4 + 1076 | 0); //@line 28860
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 392; //@line 28863
    $60 = $ReallocAsyncCtx22 + 4 | 0; //@line 28864
    HEAP32[$60 >> 2] = $4; //@line 28865
    $61 = $ReallocAsyncCtx22 + 8 | 0; //@line 28866
    HEAP32[$61 >> 2] = $18; //@line 28867
    $62 = $ReallocAsyncCtx22 + 12 | 0; //@line 28868
    HEAP32[$62 >> 2] = $10; //@line 28869
    $63 = $ReallocAsyncCtx22 + 16 | 0; //@line 28870
    HEAP32[$63 >> 2] = $12; //@line 28871
    sp = STACKTOP; //@line 28872
    return;
   }
   ___async_unwind = 0; //@line 28875
   HEAP32[$ReallocAsyncCtx22 >> 2] = 392; //@line 28876
   $60 = $ReallocAsyncCtx22 + 4 | 0; //@line 28877
   HEAP32[$60 >> 2] = $4; //@line 28878
   $61 = $ReallocAsyncCtx22 + 8 | 0; //@line 28879
   HEAP32[$61 >> 2] = $18; //@line 28880
   $62 = $ReallocAsyncCtx22 + 12 | 0; //@line 28881
   HEAP32[$62 >> 2] = $10; //@line 28882
   $63 = $ReallocAsyncCtx22 + 16 | 0; //@line 28883
   HEAP32[$63 >> 2] = $12; //@line 28884
   sp = STACKTOP; //@line 28885
   return;
  } else {
   $$3$off0204 = 2; //@line 28888
  }
 }
 $64 = $4 + 944 | 0; //@line 28891
 HEAP8[$64 >> 0] = $$3$off0204 | HEAP8[$64 >> 0] & -7; //@line 28895
 $68 = $4 + 944 | 0; //@line 28896
 HEAP8[$68 >> 0] = HEAP8[$68 >> 0] | 32; //@line 28899
 $71 = HEAP32[$18 >> 2] | 0; //@line 28900
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 28902
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($71, $4 + 996 | 0, 1); //@line 28903
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 395; //@line 28906
  $73 = $ReallocAsyncCtx17 + 4 | 0; //@line 28907
  HEAP32[$73 >> 2] = $10; //@line 28908
  $74 = $ReallocAsyncCtx17 + 8 | 0; //@line 28909
  HEAP32[$74 >> 2] = $12; //@line 28910
  sp = STACKTOP; //@line 28911
  return;
 }
 ___async_unwind = 0; //@line 28914
 HEAP32[$ReallocAsyncCtx17 >> 2] = 395; //@line 28915
 $73 = $ReallocAsyncCtx17 + 4 | 0; //@line 28916
 HEAP32[$73 >> 2] = $10; //@line 28917
 $74 = $ReallocAsyncCtx17 + 8 | 0; //@line 28918
 HEAP32[$74 >> 2] = $12; //@line 28919
 sp = STACKTOP; //@line 28920
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_6($0) {
 $0 = $0 | 0;
 var $$pre120 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 17309
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17311
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17313
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17315
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17317
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17319
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17321
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17323
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17325
 $$pre120 = HEAP32[$8 >> 2] | 0; //@line 17326
 if ($$pre120 | 0) {
  $19 = HEAP32[$$pre120 + 4 >> 2] | 0; //@line 17330
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 17331
  FUNCTION_TABLE_vii[$19 & 31]($16, $12); //@line 17332
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 561; //@line 17335
   $20 = $ReallocAsyncCtx8 + 4 | 0; //@line 17336
   HEAP32[$20 >> 2] = $2; //@line 17337
   $21 = $ReallocAsyncCtx8 + 8 | 0; //@line 17338
   HEAP32[$21 >> 2] = $4; //@line 17339
   $22 = $ReallocAsyncCtx8 + 12 | 0; //@line 17340
   HEAP32[$22 >> 2] = $6; //@line 17341
   $23 = $ReallocAsyncCtx8 + 16 | 0; //@line 17342
   HEAP32[$23 >> 2] = $8; //@line 17343
   $24 = $ReallocAsyncCtx8 + 20 | 0; //@line 17344
   HEAP32[$24 >> 2] = $10; //@line 17345
   $25 = $ReallocAsyncCtx8 + 24 | 0; //@line 17346
   HEAP32[$25 >> 2] = $12; //@line 17347
   $26 = $ReallocAsyncCtx8 + 28 | 0; //@line 17348
   HEAP32[$26 >> 2] = $14; //@line 17349
   sp = STACKTOP; //@line 17350
   return;
  }
  ___async_unwind = 0; //@line 17353
  HEAP32[$ReallocAsyncCtx8 >> 2] = 561; //@line 17354
  $20 = $ReallocAsyncCtx8 + 4 | 0; //@line 17355
  HEAP32[$20 >> 2] = $2; //@line 17356
  $21 = $ReallocAsyncCtx8 + 8 | 0; //@line 17357
  HEAP32[$21 >> 2] = $4; //@line 17358
  $22 = $ReallocAsyncCtx8 + 12 | 0; //@line 17359
  HEAP32[$22 >> 2] = $6; //@line 17360
  $23 = $ReallocAsyncCtx8 + 16 | 0; //@line 17361
  HEAP32[$23 >> 2] = $8; //@line 17362
  $24 = $ReallocAsyncCtx8 + 20 | 0; //@line 17363
  HEAP32[$24 >> 2] = $10; //@line 17364
  $25 = $ReallocAsyncCtx8 + 24 | 0; //@line 17365
  HEAP32[$25 >> 2] = $12; //@line 17366
  $26 = $ReallocAsyncCtx8 + 28 | 0; //@line 17367
  HEAP32[$26 >> 2] = $14; //@line 17368
  sp = STACKTOP; //@line 17369
  return;
 }
 HEAP32[$10 >> 2] = 0; //@line 17372
 $27 = $14 + 12 | 0; //@line 17373
 HEAP32[$14 >> 2] = 563; //@line 17374
 HEAP32[$14 + 4 >> 2] = 0; //@line 17376
 HEAP32[$14 + 8 >> 2] = $4; //@line 17378
 HEAP32[$27 >> 2] = 848; //@line 17379
 $28 = $4 + 1228 | 0; //@line 17380
 if (($28 | 0) == ($14 | 0)) {
  $51 = HEAP32[214] | 0; //@line 17384
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 17385
  FUNCTION_TABLE_vi[$51 & 1023]($14); //@line 17386
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 566; //@line 17389
   $52 = $ReallocAsyncCtx12 + 4 | 0; //@line 17390
   HEAP32[$52 >> 2] = $14; //@line 17391
   $53 = $ReallocAsyncCtx12 + 8 | 0; //@line 17392
   HEAP32[$53 >> 2] = $6; //@line 17393
   $54 = $ReallocAsyncCtx12 + 12 | 0; //@line 17394
   HEAP32[$54 >> 2] = $4; //@line 17395
   $55 = $ReallocAsyncCtx12 + 16 | 0; //@line 17396
   HEAP32[$55 >> 2] = $2; //@line 17397
   sp = STACKTOP; //@line 17398
   return;
  }
  ___async_unwind = 0; //@line 17401
  HEAP32[$ReallocAsyncCtx12 >> 2] = 566; //@line 17402
  $52 = $ReallocAsyncCtx12 + 4 | 0; //@line 17403
  HEAP32[$52 >> 2] = $14; //@line 17404
  $53 = $ReallocAsyncCtx12 + 8 | 0; //@line 17405
  HEAP32[$53 >> 2] = $6; //@line 17406
  $54 = $ReallocAsyncCtx12 + 12 | 0; //@line 17407
  HEAP32[$54 >> 2] = $4; //@line 17408
  $55 = $ReallocAsyncCtx12 + 16 | 0; //@line 17409
  HEAP32[$55 >> 2] = $2; //@line 17410
  sp = STACKTOP; //@line 17411
  return;
 }
 $30 = $4 + 1240 | 0; //@line 17414
 $31 = HEAP32[$30 >> 2] | 0; //@line 17415
 if (!$31) {
  $43 = HEAP32[213] | 0; //@line 17419
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(28) | 0; //@line 17420
  FUNCTION_TABLE_vii[$43 & 31]($28, $14); //@line 17421
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 565; //@line 17424
   $44 = $ReallocAsyncCtx11 + 4 | 0; //@line 17425
   HEAP32[$44 >> 2] = $2; //@line 17426
   $45 = $ReallocAsyncCtx11 + 8 | 0; //@line 17427
   HEAP32[$45 >> 2] = $4; //@line 17428
   $46 = $ReallocAsyncCtx11 + 12 | 0; //@line 17429
   HEAP32[$46 >> 2] = $14; //@line 17430
   $47 = $ReallocAsyncCtx11 + 16 | 0; //@line 17431
   HEAP32[$47 >> 2] = $6; //@line 17432
   $48 = $ReallocAsyncCtx11 + 20 | 0; //@line 17433
   HEAP32[$48 >> 2] = $27; //@line 17434
   $49 = $ReallocAsyncCtx11 + 24 | 0; //@line 17435
   HEAP32[$49 >> 2] = $30; //@line 17436
   sp = STACKTOP; //@line 17437
   return;
  }
  ___async_unwind = 0; //@line 17440
  HEAP32[$ReallocAsyncCtx11 >> 2] = 565; //@line 17441
  $44 = $ReallocAsyncCtx11 + 4 | 0; //@line 17442
  HEAP32[$44 >> 2] = $2; //@line 17443
  $45 = $ReallocAsyncCtx11 + 8 | 0; //@line 17444
  HEAP32[$45 >> 2] = $4; //@line 17445
  $46 = $ReallocAsyncCtx11 + 12 | 0; //@line 17446
  HEAP32[$46 >> 2] = $14; //@line 17447
  $47 = $ReallocAsyncCtx11 + 16 | 0; //@line 17448
  HEAP32[$47 >> 2] = $6; //@line 17449
  $48 = $ReallocAsyncCtx11 + 20 | 0; //@line 17450
  HEAP32[$48 >> 2] = $27; //@line 17451
  $49 = $ReallocAsyncCtx11 + 24 | 0; //@line 17452
  HEAP32[$49 >> 2] = $30; //@line 17453
  sp = STACKTOP; //@line 17454
  return;
 } else {
  $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 17458
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 17459
  FUNCTION_TABLE_vi[$34 & 1023]($28); //@line 17460
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 564; //@line 17463
   $35 = $ReallocAsyncCtx10 + 4 | 0; //@line 17464
   HEAP32[$35 >> 2] = $2; //@line 17465
   $36 = $ReallocAsyncCtx10 + 8 | 0; //@line 17466
   HEAP32[$36 >> 2] = $4; //@line 17467
   $37 = $ReallocAsyncCtx10 + 12 | 0; //@line 17468
   HEAP32[$37 >> 2] = $14; //@line 17469
   $38 = $ReallocAsyncCtx10 + 16 | 0; //@line 17470
   HEAP32[$38 >> 2] = $6; //@line 17471
   $39 = $ReallocAsyncCtx10 + 20 | 0; //@line 17472
   HEAP32[$39 >> 2] = $27; //@line 17473
   $40 = $ReallocAsyncCtx10 + 24 | 0; //@line 17474
   HEAP32[$40 >> 2] = $28; //@line 17475
   $41 = $ReallocAsyncCtx10 + 28 | 0; //@line 17476
   HEAP32[$41 >> 2] = $30; //@line 17477
   sp = STACKTOP; //@line 17478
   return;
  }
  ___async_unwind = 0; //@line 17481
  HEAP32[$ReallocAsyncCtx10 >> 2] = 564; //@line 17482
  $35 = $ReallocAsyncCtx10 + 4 | 0; //@line 17483
  HEAP32[$35 >> 2] = $2; //@line 17484
  $36 = $ReallocAsyncCtx10 + 8 | 0; //@line 17485
  HEAP32[$36 >> 2] = $4; //@line 17486
  $37 = $ReallocAsyncCtx10 + 12 | 0; //@line 17487
  HEAP32[$37 >> 2] = $14; //@line 17488
  $38 = $ReallocAsyncCtx10 + 16 | 0; //@line 17489
  HEAP32[$38 >> 2] = $6; //@line 17490
  $39 = $ReallocAsyncCtx10 + 20 | 0; //@line 17491
  HEAP32[$39 >> 2] = $27; //@line 17492
  $40 = $ReallocAsyncCtx10 + 24 | 0; //@line 17493
  HEAP32[$40 >> 2] = $28; //@line 17494
  $41 = $ReallocAsyncCtx10 + 28 | 0; //@line 17495
  HEAP32[$41 >> 2] = $30; //@line 17496
  sp = STACKTOP; //@line 17497
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $45 = 0, $47 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 25374
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25376
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25378
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25380
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25382
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25384
 $$pre = HEAP32[$10 >> 2] | 0; //@line 25385
 if ($$pre | 0) {
  $13 = HEAP32[$$pre + 4 >> 2] | 0; //@line 25389
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 25390
  FUNCTION_TABLE_vii[$13 & 31]($2, $4); //@line 25391
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 302; //@line 25394
   $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 25395
   HEAP32[$14 >> 2] = $6; //@line 25396
   $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 25397
   HEAP32[$15 >> 2] = $8; //@line 25398
   $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 25399
   HEAP32[$16 >> 2] = $4; //@line 25400
   $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 25401
   HEAP32[$17 >> 2] = $10; //@line 25402
   sp = STACKTOP; //@line 25403
   return;
  }
  ___async_unwind = 0; //@line 25406
  HEAP32[$ReallocAsyncCtx2 >> 2] = 302; //@line 25407
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 25408
  HEAP32[$14 >> 2] = $6; //@line 25409
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 25410
  HEAP32[$15 >> 2] = $8; //@line 25411
  $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 25412
  HEAP32[$16 >> 2] = $4; //@line 25413
  $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 25414
  HEAP32[$17 >> 2] = $10; //@line 25415
  sp = STACKTOP; //@line 25416
  return;
 }
 HEAP32[$8 >> 2] = 0; //@line 25419
 $18 = $4 + 16 | 0; //@line 25420
 $19 = $4 + 28 | 0; //@line 25421
 $20 = HEAP32[$19 >> 2] | 0; //@line 25422
 if ($20 | 0) {
  $22 = $6 + 1896 | 0; //@line 25425
  if (($22 | 0) != ($18 | 0)) {
   $24 = $6 + 1908 | 0; //@line 25428
   $25 = HEAP32[$24 >> 2] | 0; //@line 25429
   if (!$25) {
    $36 = HEAP32[$20 + 4 >> 2] | 0; //@line 25433
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 25434
    FUNCTION_TABLE_vii[$36 & 31]($22, $18); //@line 25435
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 304; //@line 25438
     $37 = $ReallocAsyncCtx4 + 4 | 0; //@line 25439
     HEAP32[$37 >> 2] = $19; //@line 25440
     $38 = $ReallocAsyncCtx4 + 8 | 0; //@line 25441
     HEAP32[$38 >> 2] = $24; //@line 25442
     $39 = $ReallocAsyncCtx4 + 12 | 0; //@line 25443
     HEAP32[$39 >> 2] = $4; //@line 25444
     $40 = $ReallocAsyncCtx4 + 16 | 0; //@line 25445
     HEAP32[$40 >> 2] = $6; //@line 25446
     sp = STACKTOP; //@line 25447
     return;
    }
    ___async_unwind = 0; //@line 25450
    HEAP32[$ReallocAsyncCtx4 >> 2] = 304; //@line 25451
    $37 = $ReallocAsyncCtx4 + 4 | 0; //@line 25452
    HEAP32[$37 >> 2] = $19; //@line 25453
    $38 = $ReallocAsyncCtx4 + 8 | 0; //@line 25454
    HEAP32[$38 >> 2] = $24; //@line 25455
    $39 = $ReallocAsyncCtx4 + 12 | 0; //@line 25456
    HEAP32[$39 >> 2] = $4; //@line 25457
    $40 = $ReallocAsyncCtx4 + 16 | 0; //@line 25458
    HEAP32[$40 >> 2] = $6; //@line 25459
    sp = STACKTOP; //@line 25460
    return;
   } else {
    $28 = HEAP32[$25 + 8 >> 2] | 0; //@line 25464
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 25465
    FUNCTION_TABLE_vi[$28 & 1023]($22); //@line 25466
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 303; //@line 25469
     $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 25470
     HEAP32[$29 >> 2] = $19; //@line 25471
     $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 25472
     HEAP32[$30 >> 2] = $24; //@line 25473
     $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 25474
     HEAP32[$31 >> 2] = $22; //@line 25475
     $32 = $ReallocAsyncCtx3 + 16 | 0; //@line 25476
     HEAP32[$32 >> 2] = $18; //@line 25477
     $33 = $ReallocAsyncCtx3 + 20 | 0; //@line 25478
     HEAP32[$33 >> 2] = $4; //@line 25479
     $34 = $ReallocAsyncCtx3 + 24 | 0; //@line 25480
     HEAP32[$34 >> 2] = $6; //@line 25481
     sp = STACKTOP; //@line 25482
     return;
    }
    ___async_unwind = 0; //@line 25485
    HEAP32[$ReallocAsyncCtx3 >> 2] = 303; //@line 25486
    $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 25487
    HEAP32[$29 >> 2] = $19; //@line 25488
    $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 25489
    HEAP32[$30 >> 2] = $24; //@line 25490
    $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 25491
    HEAP32[$31 >> 2] = $22; //@line 25492
    $32 = $ReallocAsyncCtx3 + 16 | 0; //@line 25493
    HEAP32[$32 >> 2] = $18; //@line 25494
    $33 = $ReallocAsyncCtx3 + 20 | 0; //@line 25495
    HEAP32[$33 >> 2] = $4; //@line 25496
    $34 = $ReallocAsyncCtx3 + 24 | 0; //@line 25497
    HEAP32[$34 >> 2] = $6; //@line 25498
    sp = STACKTOP; //@line 25499
    return;
   }
  }
 }
 $41 = $4 + 32 | 0; //@line 25504
 $42 = $4 + 44 | 0; //@line 25505
 $43 = HEAP32[$42 >> 2] | 0; //@line 25506
 if (!$43) {
  return;
 }
 $45 = $6 + 1912 | 0; //@line 25511
 if (($45 | 0) == ($41 | 0)) {
  return;
 }
 $47 = $6 + 1924 | 0; //@line 25516
 $48 = HEAP32[$47 >> 2] | 0; //@line 25517
 if (!$48) {
  $57 = HEAP32[$43 + 4 >> 2] | 0; //@line 25521
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 25522
  FUNCTION_TABLE_vii[$57 & 31]($45, $41); //@line 25523
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 306; //@line 25526
   $58 = $ReallocAsyncCtx6 + 4 | 0; //@line 25527
   HEAP32[$58 >> 2] = $42; //@line 25528
   $59 = $ReallocAsyncCtx6 + 8 | 0; //@line 25529
   HEAP32[$59 >> 2] = $47; //@line 25530
   sp = STACKTOP; //@line 25531
   return;
  }
  ___async_unwind = 0; //@line 25534
  HEAP32[$ReallocAsyncCtx6 >> 2] = 306; //@line 25535
  $58 = $ReallocAsyncCtx6 + 4 | 0; //@line 25536
  HEAP32[$58 >> 2] = $42; //@line 25537
  $59 = $ReallocAsyncCtx6 + 8 | 0; //@line 25538
  HEAP32[$59 >> 2] = $47; //@line 25539
  sp = STACKTOP; //@line 25540
  return;
 } else {
  $51 = HEAP32[$48 + 8 >> 2] | 0; //@line 25544
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 25545
  FUNCTION_TABLE_vi[$51 & 1023]($45); //@line 25546
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 305; //@line 25549
   $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 25550
   HEAP32[$52 >> 2] = $42; //@line 25551
   $53 = $ReallocAsyncCtx5 + 8 | 0; //@line 25552
   HEAP32[$53 >> 2] = $47; //@line 25553
   $54 = $ReallocAsyncCtx5 + 12 | 0; //@line 25554
   HEAP32[$54 >> 2] = $45; //@line 25555
   $55 = $ReallocAsyncCtx5 + 16 | 0; //@line 25556
   HEAP32[$55 >> 2] = $41; //@line 25557
   sp = STACKTOP; //@line 25558
   return;
  }
  ___async_unwind = 0; //@line 25561
  HEAP32[$ReallocAsyncCtx5 >> 2] = 305; //@line 25562
  $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 25563
  HEAP32[$52 >> 2] = $42; //@line 25564
  $53 = $ReallocAsyncCtx5 + 8 | 0; //@line 25565
  HEAP32[$53 >> 2] = $47; //@line 25566
  $54 = $ReallocAsyncCtx5 + 12 | 0; //@line 25567
  HEAP32[$54 >> 2] = $45; //@line 25568
  $55 = $ReallocAsyncCtx5 + 16 | 0; //@line 25569
  HEAP32[$55 >> 2] = $41; //@line 25570
  sp = STACKTOP; //@line 25571
  return;
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_132($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $49 = 0, $6 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $ReallocAsyncCtx18 = 0, sp = 0;
 sp = STACKTOP; //@line 26633
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26635
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26637
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26639
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26641
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26643
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26645
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26647
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26649
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26651
 $20 = HEAP8[$0 + 40 >> 0] | 0; //@line 26653
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 26655
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 26657
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 26659
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 26661
 $30 = HEAP16[$0 + 60 >> 1] | 0; //@line 26663
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 26665
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 26667
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 26669
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 26671
 HEAP32[$4 >> 2] = 0; //@line 26672
 $39 = $6 + 912 | 0; //@line 26673
 $40 = $6 + 928 | 0; //@line 26674
 $41 = $6 + 288 | 0; //@line 26675
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($41) | 0) + 10 >> 0] = 0; //@line 26678
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 20 >> 1] = $30; //@line 26681
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 22 >> 0] = $20; //@line 26684
 $49 = HEAP32[$6 + 364 >> 2] | 0; //@line 26686
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 24 >> 2] = $49; //@line 26689
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 9 >> 0] = 0; //@line 26692
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 8 >> 0] = 0; //@line 26695
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 11 >> 0] = 0; //@line 26698
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 12 >> 2] = 0; //@line 26701
 HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 16 >> 1] = 0; //@line 26704
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 18 >> 0] = 0; //@line 26707
 HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 28 >> 0] = 0; //@line 26710
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) + 32 >> 2] = 0; //@line 26713
 HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($41) | 0) >> 2] = 0; //@line 26715
 $69 = HEAP32[$6 >> 2] | 0; //@line 26716
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(100) | 0; //@line 26717
 __ZN7LoRaPHY18put_radio_to_sleepEv($69); //@line 26718
 if (___async) {
  HEAP32[$ReallocAsyncCtx18 >> 2] = 373; //@line 26721
  $70 = $ReallocAsyncCtx18 + 4 | 0; //@line 26722
  HEAP32[$70 >> 2] = $2; //@line 26723
  $71 = $ReallocAsyncCtx18 + 8 | 0; //@line 26724
  HEAP32[$71 >> 2] = $4; //@line 26725
  $72 = $ReallocAsyncCtx18 + 12 | 0; //@line 26726
  HEAP32[$72 >> 2] = $4; //@line 26727
  $73 = $ReallocAsyncCtx18 + 16 | 0; //@line 26728
  HEAP32[$73 >> 2] = $10; //@line 26729
  $74 = $ReallocAsyncCtx18 + 20 | 0; //@line 26730
  HEAP32[$74 >> 2] = $41; //@line 26731
  $75 = $ReallocAsyncCtx18 + 24 | 0; //@line 26732
  HEAP32[$75 >> 2] = $6; //@line 26733
  $76 = $ReallocAsyncCtx18 + 28 | 0; //@line 26734
  HEAP32[$76 >> 2] = $6; //@line 26735
  $77 = $ReallocAsyncCtx18 + 32 | 0; //@line 26736
  HEAP32[$77 >> 2] = $39; //@line 26737
  $78 = $ReallocAsyncCtx18 + 36 | 0; //@line 26738
  HEAP32[$78 >> 2] = $40; //@line 26739
  $79 = $ReallocAsyncCtx18 + 40 | 0; //@line 26740
  HEAP32[$79 >> 2] = $8; //@line 26741
  $80 = $ReallocAsyncCtx18 + 44 | 0; //@line 26742
  HEAP32[$80 >> 2] = $10; //@line 26743
  $81 = $ReallocAsyncCtx18 + 48 | 0; //@line 26744
  HEAP8[$81 >> 0] = $20; //@line 26745
  $82 = $ReallocAsyncCtx18 + 52 | 0; //@line 26746
  HEAP32[$82 >> 2] = $24; //@line 26747
  $83 = $ReallocAsyncCtx18 + 56 | 0; //@line 26748
  HEAP32[$83 >> 2] = $34; //@line 26749
  $84 = $ReallocAsyncCtx18 + 60 | 0; //@line 26750
  HEAP32[$84 >> 2] = $22; //@line 26751
  $85 = $ReallocAsyncCtx18 + 64 | 0; //@line 26752
  HEAP32[$85 >> 2] = $26; //@line 26753
  $86 = $ReallocAsyncCtx18 + 68 | 0; //@line 26754
  HEAP32[$86 >> 2] = $16; //@line 26755
  $87 = $ReallocAsyncCtx18 + 72 | 0; //@line 26756
  HEAP32[$87 >> 2] = $32; //@line 26757
  $88 = $ReallocAsyncCtx18 + 76 | 0; //@line 26758
  HEAP32[$88 >> 2] = $18; //@line 26759
  $89 = $ReallocAsyncCtx18 + 80 | 0; //@line 26760
  HEAP32[$89 >> 2] = $12; //@line 26761
  $90 = $ReallocAsyncCtx18 + 84 | 0; //@line 26762
  HEAP32[$90 >> 2] = $14; //@line 26763
  $91 = $ReallocAsyncCtx18 + 88 | 0; //@line 26764
  HEAP32[$91 >> 2] = $28; //@line 26765
  $92 = $ReallocAsyncCtx18 + 92 | 0; //@line 26766
  HEAP32[$92 >> 2] = $38; //@line 26767
  $93 = $ReallocAsyncCtx18 + 96 | 0; //@line 26768
  HEAP32[$93 >> 2] = $36; //@line 26769
  sp = STACKTOP; //@line 26770
  return;
 }
 ___async_unwind = 0; //@line 26773
 HEAP32[$ReallocAsyncCtx18 >> 2] = 373; //@line 26774
 $70 = $ReallocAsyncCtx18 + 4 | 0; //@line 26775
 HEAP32[$70 >> 2] = $2; //@line 26776
 $71 = $ReallocAsyncCtx18 + 8 | 0; //@line 26777
 HEAP32[$71 >> 2] = $4; //@line 26778
 $72 = $ReallocAsyncCtx18 + 12 | 0; //@line 26779
 HEAP32[$72 >> 2] = $4; //@line 26780
 $73 = $ReallocAsyncCtx18 + 16 | 0; //@line 26781
 HEAP32[$73 >> 2] = $10; //@line 26782
 $74 = $ReallocAsyncCtx18 + 20 | 0; //@line 26783
 HEAP32[$74 >> 2] = $41; //@line 26784
 $75 = $ReallocAsyncCtx18 + 24 | 0; //@line 26785
 HEAP32[$75 >> 2] = $6; //@line 26786
 $76 = $ReallocAsyncCtx18 + 28 | 0; //@line 26787
 HEAP32[$76 >> 2] = $6; //@line 26788
 $77 = $ReallocAsyncCtx18 + 32 | 0; //@line 26789
 HEAP32[$77 >> 2] = $39; //@line 26790
 $78 = $ReallocAsyncCtx18 + 36 | 0; //@line 26791
 HEAP32[$78 >> 2] = $40; //@line 26792
 $79 = $ReallocAsyncCtx18 + 40 | 0; //@line 26793
 HEAP32[$79 >> 2] = $8; //@line 26794
 $80 = $ReallocAsyncCtx18 + 44 | 0; //@line 26795
 HEAP32[$80 >> 2] = $10; //@line 26796
 $81 = $ReallocAsyncCtx18 + 48 | 0; //@line 26797
 HEAP8[$81 >> 0] = $20; //@line 26798
 $82 = $ReallocAsyncCtx18 + 52 | 0; //@line 26799
 HEAP32[$82 >> 2] = $24; //@line 26800
 $83 = $ReallocAsyncCtx18 + 56 | 0; //@line 26801
 HEAP32[$83 >> 2] = $34; //@line 26802
 $84 = $ReallocAsyncCtx18 + 60 | 0; //@line 26803
 HEAP32[$84 >> 2] = $22; //@line 26804
 $85 = $ReallocAsyncCtx18 + 64 | 0; //@line 26805
 HEAP32[$85 >> 2] = $26; //@line 26806
 $86 = $ReallocAsyncCtx18 + 68 | 0; //@line 26807
 HEAP32[$86 >> 2] = $16; //@line 26808
 $87 = $ReallocAsyncCtx18 + 72 | 0; //@line 26809
 HEAP32[$87 >> 2] = $32; //@line 26810
 $88 = $ReallocAsyncCtx18 + 76 | 0; //@line 26811
 HEAP32[$88 >> 2] = $18; //@line 26812
 $89 = $ReallocAsyncCtx18 + 80 | 0; //@line 26813
 HEAP32[$89 >> 2] = $12; //@line 26814
 $90 = $ReallocAsyncCtx18 + 84 | 0; //@line 26815
 HEAP32[$90 >> 2] = $14; //@line 26816
 $91 = $ReallocAsyncCtx18 + 88 | 0; //@line 26817
 HEAP32[$91 >> 2] = $28; //@line 26818
 $92 = $ReallocAsyncCtx18 + 92 | 0; //@line 26819
 HEAP32[$92 >> 2] = $38; //@line 26820
 $93 = $ReallocAsyncCtx18 + 96 | 0; //@line 26821
 HEAP32[$93 >> 2] = $36; //@line 26822
 sp = STACKTOP; //@line 26823
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $56 = 0, $57 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 583
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 585
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 587
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 589
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 591
 $$pre$i = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 594
 $11 = $8 + 12 | 0; //@line 595
 HEAP32[$11 >> 2] = $$pre$i; //@line 596
 if ($$pre$i | 0) {
  $14 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 601
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 602
  FUNCTION_TABLE_vii[$14 & 31]($2, $8); //@line 603
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 258; //@line 606
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 607
   HEAP32[$15 >> 2] = $2; //@line 608
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 609
   HEAP32[$16 >> 2] = $11; //@line 610
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 611
   HEAP32[$17 >> 2] = $4; //@line 612
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 613
   HEAP32[$18 >> 2] = $6; //@line 614
   $19 = $ReallocAsyncCtx2 + 20 | 0; //@line 615
   HEAP32[$19 >> 2] = $8; //@line 616
   $20 = $ReallocAsyncCtx2 + 24 | 0; //@line 617
   HEAP32[$20 >> 2] = $11; //@line 618
   sp = STACKTOP; //@line 619
   return;
  }
  ___async_unwind = 0; //@line 622
  HEAP32[$ReallocAsyncCtx2 >> 2] = 258; //@line 623
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 624
  HEAP32[$15 >> 2] = $2; //@line 625
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 626
  HEAP32[$16 >> 2] = $11; //@line 627
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 628
  HEAP32[$17 >> 2] = $4; //@line 629
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 630
  HEAP32[$18 >> 2] = $6; //@line 631
  $19 = $ReallocAsyncCtx2 + 20 | 0; //@line 632
  HEAP32[$19 >> 2] = $8; //@line 633
  $20 = $ReallocAsyncCtx2 + 24 | 0; //@line 634
  HEAP32[$20 >> 2] = $11; //@line 635
  sp = STACKTOP; //@line 636
  return;
 }
 $21 = $2 + 12 | 0; //@line 639
 HEAP32[$21 >> 2] = 0; //@line 640
 $22 = $2 + 16 | 0; //@line 641
 HEAP32[$22 >> 2] = $4; //@line 642
 $23 = _equeue_alloc($6, 20) | 0; //@line 643
 if ($23 | 0) {
  $25 = HEAP32[$21 >> 2] | 0; //@line 646
  if (!$25) {
   HEAP32[$23 + 12 >> 2] = 0; //@line 650
   HEAP32[$23 + 16 >> 2] = HEAP32[$22 >> 2]; //@line 653
   _equeue_event_dtor($23, 260); //@line 654
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 655
   $40 = _equeue_post($6, 261, $23) | 0; //@line 656
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 262; //@line 659
    $41 = $ReallocAsyncCtx6 + 4 | 0; //@line 660
    HEAP32[$41 >> 2] = $21; //@line 661
    $42 = $ReallocAsyncCtx6 + 8 | 0; //@line 662
    HEAP32[$42 >> 2] = $11; //@line 663
    $43 = $ReallocAsyncCtx6 + 12 | 0; //@line 664
    HEAP32[$43 >> 2] = $2; //@line 665
    $44 = $ReallocAsyncCtx6 + 16 | 0; //@line 666
    HEAP32[$44 >> 2] = $8; //@line 667
    sp = STACKTOP; //@line 668
    return;
   }
   HEAP32[___async_retval >> 2] = $40; //@line 672
   ___async_unwind = 0; //@line 673
   HEAP32[$ReallocAsyncCtx6 >> 2] = 262; //@line 674
   $41 = $ReallocAsyncCtx6 + 4 | 0; //@line 675
   HEAP32[$41 >> 2] = $21; //@line 676
   $42 = $ReallocAsyncCtx6 + 8 | 0; //@line 677
   HEAP32[$42 >> 2] = $11; //@line 678
   $43 = $ReallocAsyncCtx6 + 12 | 0; //@line 679
   HEAP32[$43 >> 2] = $2; //@line 680
   $44 = $ReallocAsyncCtx6 + 16 | 0; //@line 681
   HEAP32[$44 >> 2] = $8; //@line 682
   sp = STACKTOP; //@line 683
   return;
  } else {
   $28 = HEAP32[$25 + 4 >> 2] | 0; //@line 687
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 688
   FUNCTION_TABLE_vii[$28 & 31]($23, $2); //@line 689
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 259; //@line 692
    $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 693
    HEAP32[$29 >> 2] = $21; //@line 694
    $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 695
    HEAP32[$30 >> 2] = $23; //@line 696
    $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 697
    HEAP32[$31 >> 2] = $22; //@line 698
    $32 = $ReallocAsyncCtx3 + 16 | 0; //@line 699
    HEAP32[$32 >> 2] = $6; //@line 700
    $33 = $ReallocAsyncCtx3 + 20 | 0; //@line 701
    HEAP32[$33 >> 2] = $21; //@line 702
    $34 = $ReallocAsyncCtx3 + 24 | 0; //@line 703
    HEAP32[$34 >> 2] = $11; //@line 704
    $35 = $ReallocAsyncCtx3 + 28 | 0; //@line 705
    HEAP32[$35 >> 2] = $2; //@line 706
    $36 = $ReallocAsyncCtx3 + 32 | 0; //@line 707
    HEAP32[$36 >> 2] = $8; //@line 708
    sp = STACKTOP; //@line 709
    return;
   }
   ___async_unwind = 0; //@line 712
   HEAP32[$ReallocAsyncCtx3 >> 2] = 259; //@line 713
   $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 714
   HEAP32[$29 >> 2] = $21; //@line 715
   $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 716
   HEAP32[$30 >> 2] = $23; //@line 717
   $31 = $ReallocAsyncCtx3 + 12 | 0; //@line 718
   HEAP32[$31 >> 2] = $22; //@line 719
   $32 = $ReallocAsyncCtx3 + 16 | 0; //@line 720
   HEAP32[$32 >> 2] = $6; //@line 721
   $33 = $ReallocAsyncCtx3 + 20 | 0; //@line 722
   HEAP32[$33 >> 2] = $21; //@line 723
   $34 = $ReallocAsyncCtx3 + 24 | 0; //@line 724
   HEAP32[$34 >> 2] = $11; //@line 725
   $35 = $ReallocAsyncCtx3 + 28 | 0; //@line 726
   HEAP32[$35 >> 2] = $2; //@line 727
   $36 = $ReallocAsyncCtx3 + 32 | 0; //@line 728
   HEAP32[$36 >> 2] = $8; //@line 729
   sp = STACKTOP; //@line 730
   return;
  }
 }
 $46 = HEAP32[$21 >> 2] | 0; //@line 734
 if ($46 | 0) {
  $49 = HEAP32[$46 + 8 >> 2] | 0; //@line 738
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 739
  FUNCTION_TABLE_vi[$49 & 1023]($2); //@line 740
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 263; //@line 743
   $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 744
   HEAP32[$50 >> 2] = $11; //@line 745
   $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 746
   HEAP32[$51 >> 2] = 0; //@line 747
   $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 748
   HEAP32[$52 >> 2] = $8; //@line 749
   sp = STACKTOP; //@line 750
   return;
  }
  ___async_unwind = 0; //@line 753
  HEAP32[$ReallocAsyncCtx4 >> 2] = 263; //@line 754
  $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 755
  HEAP32[$50 >> 2] = $11; //@line 756
  $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 757
  HEAP32[$51 >> 2] = 0; //@line 758
  $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 759
  HEAP32[$52 >> 2] = $8; //@line 760
  sp = STACKTOP; //@line 761
  return;
 }
 $53 = HEAP32[$11 >> 2] | 0; //@line 764
 if (!$53) {
  HEAP32[___async_retval >> 2] = 0; //@line 768
  return;
 }
 $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 772
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 773
 FUNCTION_TABLE_vi[$56 & 1023]($8); //@line 774
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 264; //@line 777
  $57 = $ReallocAsyncCtx5 + 4 | 0; //@line 778
  HEAP32[$57 >> 2] = 0; //@line 779
  sp = STACKTOP; //@line 780
  return;
 }
 ___async_unwind = 0; //@line 783
 HEAP32[$ReallocAsyncCtx5 >> 2] = 264; //@line 784
 $57 = $ReallocAsyncCtx5 + 4 | 0; //@line 785
 HEAP32[$57 >> 2] = 0; //@line 786
 sp = STACKTOP; //@line 787
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_470($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $51 = 0, $52 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 33192
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33194
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33196
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33198
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33200
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33202
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33204
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 33206
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 33208
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 33210
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 33212
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 33214
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 33216
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 33218
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 33220
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 33222
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 33224
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 33226
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 33228
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 33230
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 33232
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 33234
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 33236
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 33238
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 33240
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  $51 = __ZN7LoRaPHY23get_default_tx_datarateEv(HEAP32[$20 >> 2] | 0) | 0; //@line 33246
  HEAP8[$22 >> 0] = $51; //@line 33247
  HEAP8[$24 >> 0] = $51; //@line 33248
  $52 = HEAP32[$20 >> 2] | 0; //@line 33249
  $55 = HEAP32[(HEAP32[$52 >> 2] | 0) + 56 >> 2] | 0; //@line 33252
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(100) | 0; //@line 33253
  $56 = FUNCTION_TABLE_iiiiii[$55 & 7]($52, $26, $6, $4, $28) | 0; //@line 33254
  if (!___async) {
   HEAP8[___async_retval >> 0] = $56 & 1; //@line 33259
   ___async_unwind = 0; //@line 33260
  }
  HEAP32[$ReallocAsyncCtx2 >> 2] = 473; //@line 33262
  HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 33264
  HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 33266
  HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 33268
  HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 33270
  HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 33272
  HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 33274
  HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 33276
  HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 33278
  HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 33280
  HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 33282
  HEAP32[$ReallocAsyncCtx2 + 44 >> 2] = $22; //@line 33284
  HEAP32[$ReallocAsyncCtx2 + 48 >> 2] = $24; //@line 33286
  HEAP32[$ReallocAsyncCtx2 + 52 >> 2] = $26; //@line 33288
  HEAP32[$ReallocAsyncCtx2 + 56 >> 2] = $28; //@line 33290
  HEAP32[$ReallocAsyncCtx2 + 60 >> 2] = $30; //@line 33292
  HEAP32[$ReallocAsyncCtx2 + 64 >> 2] = $32; //@line 33294
  HEAP32[$ReallocAsyncCtx2 + 68 >> 2] = $34; //@line 33296
  HEAP32[$ReallocAsyncCtx2 + 72 >> 2] = $36; //@line 33298
  HEAP32[$ReallocAsyncCtx2 + 76 >> 2] = $38; //@line 33300
  HEAP32[$ReallocAsyncCtx2 + 80 >> 2] = $40; //@line 33302
  HEAP32[$ReallocAsyncCtx2 + 84 >> 2] = $42; //@line 33304
  HEAP32[$ReallocAsyncCtx2 + 88 >> 2] = $44; //@line 33306
  HEAP32[$ReallocAsyncCtx2 + 92 >> 2] = $46; //@line 33308
  HEAP32[$ReallocAsyncCtx2 + 96 >> 2] = $48; //@line 33310
  sp = STACKTOP; //@line 33311
  return;
 }
 _printf(13229, $32) | 0; //@line 33314
 $85 = HEAP8[$24 >> 0] | 0; //@line 33318
 HEAP32[$36 >> 2] = HEAPU8[$6 >> 0]; //@line 33319
 HEAP32[$36 + 4 >> 2] = $85; //@line 33321
 _printf(13242, $36) | 0; //@line 33322
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(72) | 0; //@line 33323
 _putchar(10) | 0; //@line 33324
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 474; //@line 33327
  $86 = $ReallocAsyncCtx8 + 4 | 0; //@line 33328
  HEAP32[$86 >> 2] = $2; //@line 33329
  $87 = $ReallocAsyncCtx8 + 8 | 0; //@line 33330
  HEAP32[$87 >> 2] = $4; //@line 33331
  $88 = $ReallocAsyncCtx8 + 12 | 0; //@line 33332
  HEAP32[$88 >> 2] = $6; //@line 33333
  $89 = $ReallocAsyncCtx8 + 16 | 0; //@line 33334
  HEAP32[$89 >> 2] = $8; //@line 33335
  $90 = $ReallocAsyncCtx8 + 20 | 0; //@line 33336
  HEAP32[$90 >> 2] = $10; //@line 33337
  $91 = $ReallocAsyncCtx8 + 24 | 0; //@line 33338
  HEAP32[$91 >> 2] = $12; //@line 33339
  $92 = $ReallocAsyncCtx8 + 28 | 0; //@line 33340
  HEAP32[$92 >> 2] = $14; //@line 33341
  $93 = $ReallocAsyncCtx8 + 32 | 0; //@line 33342
  HEAP32[$93 >> 2] = $16; //@line 33343
  $94 = $ReallocAsyncCtx8 + 36 | 0; //@line 33344
  HEAP32[$94 >> 2] = $18; //@line 33345
  $95 = $ReallocAsyncCtx8 + 40 | 0; //@line 33346
  HEAP32[$95 >> 2] = $20; //@line 33347
  $96 = $ReallocAsyncCtx8 + 44 | 0; //@line 33348
  HEAP32[$96 >> 2] = $48; //@line 33349
  $97 = $ReallocAsyncCtx8 + 48 | 0; //@line 33350
  HEAP32[$97 >> 2] = $30; //@line 33351
  $98 = $ReallocAsyncCtx8 + 52 | 0; //@line 33352
  HEAP32[$98 >> 2] = $22; //@line 33353
  $99 = $ReallocAsyncCtx8 + 56 | 0; //@line 33354
  HEAP32[$99 >> 2] = $40; //@line 33355
  $100 = $ReallocAsyncCtx8 + 60 | 0; //@line 33356
  HEAP32[$100 >> 2] = $42; //@line 33357
  $101 = $ReallocAsyncCtx8 + 64 | 0; //@line 33358
  HEAP32[$101 >> 2] = $44; //@line 33359
  $102 = $ReallocAsyncCtx8 + 68 | 0; //@line 33360
  HEAP32[$102 >> 2] = $46; //@line 33361
  sp = STACKTOP; //@line 33362
  return;
 }
 ___async_unwind = 0; //@line 33365
 HEAP32[$ReallocAsyncCtx8 >> 2] = 474; //@line 33366
 $86 = $ReallocAsyncCtx8 + 4 | 0; //@line 33367
 HEAP32[$86 >> 2] = $2; //@line 33368
 $87 = $ReallocAsyncCtx8 + 8 | 0; //@line 33369
 HEAP32[$87 >> 2] = $4; //@line 33370
 $88 = $ReallocAsyncCtx8 + 12 | 0; //@line 33371
 HEAP32[$88 >> 2] = $6; //@line 33372
 $89 = $ReallocAsyncCtx8 + 16 | 0; //@line 33373
 HEAP32[$89 >> 2] = $8; //@line 33374
 $90 = $ReallocAsyncCtx8 + 20 | 0; //@line 33375
 HEAP32[$90 >> 2] = $10; //@line 33376
 $91 = $ReallocAsyncCtx8 + 24 | 0; //@line 33377
 HEAP32[$91 >> 2] = $12; //@line 33378
 $92 = $ReallocAsyncCtx8 + 28 | 0; //@line 33379
 HEAP32[$92 >> 2] = $14; //@line 33380
 $93 = $ReallocAsyncCtx8 + 32 | 0; //@line 33381
 HEAP32[$93 >> 2] = $16; //@line 33382
 $94 = $ReallocAsyncCtx8 + 36 | 0; //@line 33383
 HEAP32[$94 >> 2] = $18; //@line 33384
 $95 = $ReallocAsyncCtx8 + 40 | 0; //@line 33385
 HEAP32[$95 >> 2] = $20; //@line 33386
 $96 = $ReallocAsyncCtx8 + 44 | 0; //@line 33387
 HEAP32[$96 >> 2] = $48; //@line 33388
 $97 = $ReallocAsyncCtx8 + 48 | 0; //@line 33389
 HEAP32[$97 >> 2] = $30; //@line 33390
 $98 = $ReallocAsyncCtx8 + 52 | 0; //@line 33391
 HEAP32[$98 >> 2] = $22; //@line 33392
 $99 = $ReallocAsyncCtx8 + 56 | 0; //@line 33393
 HEAP32[$99 >> 2] = $40; //@line 33394
 $100 = $ReallocAsyncCtx8 + 60 | 0; //@line 33395
 HEAP32[$100 >> 2] = $42; //@line 33396
 $101 = $ReallocAsyncCtx8 + 64 | 0; //@line 33397
 HEAP32[$101 >> 2] = $44; //@line 33398
 $102 = $ReallocAsyncCtx8 + 68 | 0; //@line 33399
 HEAP32[$102 >> 2] = $46; //@line 33400
 sp = STACKTOP; //@line 33401
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $51 = 0, $52 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 32972
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32974
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32976
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32978
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32980
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32982
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32984
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32986
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32988
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 32990
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 32992
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 32994
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 32996
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 32998
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 33000
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 33002
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 33004
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 33006
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 33008
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 33010
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 33012
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 33014
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 33016
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 33018
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 33020
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  $51 = __ZN7LoRaPHY23get_default_tx_datarateEv(HEAP32[$20 >> 2] | 0) | 0; //@line 33026
  HEAP8[$22 >> 0] = $51; //@line 33027
  HEAP8[$24 >> 0] = $51; //@line 33028
  $52 = HEAP32[$20 >> 2] | 0; //@line 33029
  $55 = HEAP32[(HEAP32[$52 >> 2] | 0) + 56 >> 2] | 0; //@line 33032
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(100) | 0; //@line 33033
  $56 = FUNCTION_TABLE_iiiiii[$55 & 7]($52, $26, $6, $4, $28) | 0; //@line 33034
  if (!___async) {
   HEAP8[___async_retval >> 0] = $56 & 1; //@line 33039
   ___async_unwind = 0; //@line 33040
  }
  HEAP32[$ReallocAsyncCtx2 >> 2] = 473; //@line 33042
  HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 33044
  HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 33046
  HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 33048
  HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 33050
  HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 33052
  HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 33054
  HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 33056
  HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 33058
  HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 33060
  HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 33062
  HEAP32[$ReallocAsyncCtx2 + 44 >> 2] = $22; //@line 33064
  HEAP32[$ReallocAsyncCtx2 + 48 >> 2] = $24; //@line 33066
  HEAP32[$ReallocAsyncCtx2 + 52 >> 2] = $26; //@line 33068
  HEAP32[$ReallocAsyncCtx2 + 56 >> 2] = $28; //@line 33070
  HEAP32[$ReallocAsyncCtx2 + 60 >> 2] = $30; //@line 33072
  HEAP32[$ReallocAsyncCtx2 + 64 >> 2] = $32; //@line 33074
  HEAP32[$ReallocAsyncCtx2 + 68 >> 2] = $34; //@line 33076
  HEAP32[$ReallocAsyncCtx2 + 72 >> 2] = $36; //@line 33078
  HEAP32[$ReallocAsyncCtx2 + 76 >> 2] = $38; //@line 33080
  HEAP32[$ReallocAsyncCtx2 + 80 >> 2] = $40; //@line 33082
  HEAP32[$ReallocAsyncCtx2 + 84 >> 2] = $42; //@line 33084
  HEAP32[$ReallocAsyncCtx2 + 88 >> 2] = $44; //@line 33086
  HEAP32[$ReallocAsyncCtx2 + 92 >> 2] = $46; //@line 33088
  HEAP32[$ReallocAsyncCtx2 + 96 >> 2] = $48; //@line 33090
  sp = STACKTOP; //@line 33091
  return;
 }
 _printf(13229, $32) | 0; //@line 33094
 $85 = HEAP8[$24 >> 0] | 0; //@line 33098
 HEAP32[$36 >> 2] = HEAPU8[$6 >> 0]; //@line 33099
 HEAP32[$36 + 4 >> 2] = $85; //@line 33101
 _printf(13242, $36) | 0; //@line 33102
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(72) | 0; //@line 33103
 _putchar(10) | 0; //@line 33104
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 474; //@line 33107
  $86 = $ReallocAsyncCtx8 + 4 | 0; //@line 33108
  HEAP32[$86 >> 2] = $2; //@line 33109
  $87 = $ReallocAsyncCtx8 + 8 | 0; //@line 33110
  HEAP32[$87 >> 2] = $4; //@line 33111
  $88 = $ReallocAsyncCtx8 + 12 | 0; //@line 33112
  HEAP32[$88 >> 2] = $6; //@line 33113
  $89 = $ReallocAsyncCtx8 + 16 | 0; //@line 33114
  HEAP32[$89 >> 2] = $8; //@line 33115
  $90 = $ReallocAsyncCtx8 + 20 | 0; //@line 33116
  HEAP32[$90 >> 2] = $10; //@line 33117
  $91 = $ReallocAsyncCtx8 + 24 | 0; //@line 33118
  HEAP32[$91 >> 2] = $12; //@line 33119
  $92 = $ReallocAsyncCtx8 + 28 | 0; //@line 33120
  HEAP32[$92 >> 2] = $14; //@line 33121
  $93 = $ReallocAsyncCtx8 + 32 | 0; //@line 33122
  HEAP32[$93 >> 2] = $16; //@line 33123
  $94 = $ReallocAsyncCtx8 + 36 | 0; //@line 33124
  HEAP32[$94 >> 2] = $18; //@line 33125
  $95 = $ReallocAsyncCtx8 + 40 | 0; //@line 33126
  HEAP32[$95 >> 2] = $20; //@line 33127
  $96 = $ReallocAsyncCtx8 + 44 | 0; //@line 33128
  HEAP32[$96 >> 2] = $48; //@line 33129
  $97 = $ReallocAsyncCtx8 + 48 | 0; //@line 33130
  HEAP32[$97 >> 2] = $30; //@line 33131
  $98 = $ReallocAsyncCtx8 + 52 | 0; //@line 33132
  HEAP32[$98 >> 2] = $22; //@line 33133
  $99 = $ReallocAsyncCtx8 + 56 | 0; //@line 33134
  HEAP32[$99 >> 2] = $40; //@line 33135
  $100 = $ReallocAsyncCtx8 + 60 | 0; //@line 33136
  HEAP32[$100 >> 2] = $42; //@line 33137
  $101 = $ReallocAsyncCtx8 + 64 | 0; //@line 33138
  HEAP32[$101 >> 2] = $44; //@line 33139
  $102 = $ReallocAsyncCtx8 + 68 | 0; //@line 33140
  HEAP32[$102 >> 2] = $46; //@line 33141
  sp = STACKTOP; //@line 33142
  return;
 }
 ___async_unwind = 0; //@line 33145
 HEAP32[$ReallocAsyncCtx8 >> 2] = 474; //@line 33146
 $86 = $ReallocAsyncCtx8 + 4 | 0; //@line 33147
 HEAP32[$86 >> 2] = $2; //@line 33148
 $87 = $ReallocAsyncCtx8 + 8 | 0; //@line 33149
 HEAP32[$87 >> 2] = $4; //@line 33150
 $88 = $ReallocAsyncCtx8 + 12 | 0; //@line 33151
 HEAP32[$88 >> 2] = $6; //@line 33152
 $89 = $ReallocAsyncCtx8 + 16 | 0; //@line 33153
 HEAP32[$89 >> 2] = $8; //@line 33154
 $90 = $ReallocAsyncCtx8 + 20 | 0; //@line 33155
 HEAP32[$90 >> 2] = $10; //@line 33156
 $91 = $ReallocAsyncCtx8 + 24 | 0; //@line 33157
 HEAP32[$91 >> 2] = $12; //@line 33158
 $92 = $ReallocAsyncCtx8 + 28 | 0; //@line 33159
 HEAP32[$92 >> 2] = $14; //@line 33160
 $93 = $ReallocAsyncCtx8 + 32 | 0; //@line 33161
 HEAP32[$93 >> 2] = $16; //@line 33162
 $94 = $ReallocAsyncCtx8 + 36 | 0; //@line 33163
 HEAP32[$94 >> 2] = $18; //@line 33164
 $95 = $ReallocAsyncCtx8 + 40 | 0; //@line 33165
 HEAP32[$95 >> 2] = $20; //@line 33166
 $96 = $ReallocAsyncCtx8 + 44 | 0; //@line 33167
 HEAP32[$96 >> 2] = $48; //@line 33168
 $97 = $ReallocAsyncCtx8 + 48 | 0; //@line 33169
 HEAP32[$97 >> 2] = $30; //@line 33170
 $98 = $ReallocAsyncCtx8 + 52 | 0; //@line 33171
 HEAP32[$98 >> 2] = $22; //@line 33172
 $99 = $ReallocAsyncCtx8 + 56 | 0; //@line 33173
 HEAP32[$99 >> 2] = $40; //@line 33174
 $100 = $ReallocAsyncCtx8 + 60 | 0; //@line 33175
 HEAP32[$100 >> 2] = $42; //@line 33176
 $101 = $ReallocAsyncCtx8 + 64 | 0; //@line 33177
 HEAP32[$101 >> 2] = $44; //@line 33178
 $102 = $ReallocAsyncCtx8 + 68 | 0; //@line 33179
 HEAP32[$102 >> 2] = $46; //@line 33180
 sp = STACKTOP; //@line 33181
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$05$i = 0, $$06$i = 0, $20 = 0, $42 = 0, $54 = 0, $57 = 0, $62 = 0, $63 = 0, $77 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx21 = 0, $AsyncCtx8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 15070
 STACKTOP = STACKTOP + 32 | 0; //@line 15071
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 15071
 $vararg_buffer5 = sp + 24 | 0; //@line 15072
 $vararg_buffer3 = sp + 16 | 0; //@line 15073
 $vararg_buffer1 = sp + 8 | 0; //@line 15074
 $vararg_buffer = sp; //@line 15075
 _printf(12943, $vararg_buffer) | 0; //@line 15076
 _printf(13343, $vararg_buffer1) | 0; //@line 15077
 $AsyncCtx12 = _emscripten_alloc_async_context(32, sp) | 0; //@line 15078
 _putchar(10) | 0; //@line 15079
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 466; //@line 15082
  HEAP32[$AsyncCtx12 + 4 >> 2] = $0; //@line 15084
  HEAP32[$AsyncCtx12 + 8 >> 2] = $vararg_buffer1; //@line 15086
  HEAP32[$AsyncCtx12 + 12 >> 2] = $vararg_buffer; //@line 15088
  HEAP32[$AsyncCtx12 + 16 >> 2] = $vararg_buffer3; //@line 15090
  HEAP32[$AsyncCtx12 + 20 >> 2] = $vararg_buffer3; //@line 15092
  HEAP32[$AsyncCtx12 + 24 >> 2] = $vararg_buffer5; //@line 15094
  HEAP32[$AsyncCtx12 + 28 >> 2] = $vararg_buffer5; //@line 15096
  sp = STACKTOP; //@line 15097
  STACKTOP = sp; //@line 15098
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 15100
 $9 = HEAP32[$0 + 356 >> 2] | 0; //@line 15102
 $AsyncCtx21 = _emscripten_alloc_async_context(40, sp) | 0; //@line 15104
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($9, $0 + 1016 | 0); //@line 15105
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 467; //@line 15108
  HEAP32[$AsyncCtx21 + 4 >> 2] = $0; //@line 15110
  HEAP32[$AsyncCtx21 + 8 >> 2] = $vararg_buffer1; //@line 15112
  HEAP32[$AsyncCtx21 + 12 >> 2] = $vararg_buffer; //@line 15114
  HEAP32[$AsyncCtx21 + 16 >> 2] = $vararg_buffer1; //@line 15116
  HEAP32[$AsyncCtx21 + 20 >> 2] = $vararg_buffer; //@line 15118
  HEAP32[$AsyncCtx21 + 24 >> 2] = $vararg_buffer3; //@line 15120
  HEAP32[$AsyncCtx21 + 28 >> 2] = $vararg_buffer3; //@line 15122
  HEAP32[$AsyncCtx21 + 32 >> 2] = $vararg_buffer5; //@line 15124
  HEAP32[$AsyncCtx21 + 36 >> 2] = $vararg_buffer5; //@line 15126
  sp = STACKTOP; //@line 15127
  STACKTOP = sp; //@line 15128
  return;
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 15130
 $20 = $0 + 968 | 0; //@line 15131
 HEAP32[$20 >> 2] = HEAP32[$20 >> 2] & -17; //@line 15134
 if (HEAP8[$0 + 944 >> 0] & 8) {
  if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) >> 2] | 0)) {
   HEAP8[$0 + 372 >> 0] = 0; //@line 15147
   HEAP32[$0 + 956 >> 2] = 0; //@line 15149
   HEAP32[$0 + 960 >> 2] = 0; //@line 15151
   HEAP32[$0 + 964 >> 2] = 0; //@line 15153
   HEAP8[$0 + 380 >> 0] = 0; //@line 15155
   HEAP8[$0 + 894 >> 0] = 1; //@line 15157
   HEAP8[$0 + 895 >> 0] = 1; //@line 15159
   HEAP8[$0 + 377 >> 0] = 0; //@line 15161
   HEAP8[$0 + 1152 >> 0] = 0; //@line 15163
   HEAP16[$0 + 1154 >> 1] = 1; //@line 15165
   $42 = $0 + 4 | 0; //@line 15166
   __ZN14LoRaMacCommand20clear_command_bufferEv($42); //@line 15167
   __ZN14LoRaMacCommand19clear_repeat_bufferEv($42); //@line 15168
   __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($42); //@line 15169
   HEAP8[$0 + 371 >> 0] = 1; //@line 15171
   __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$0 >> 2] | 0, $0 + 360 | 0, 0); //@line 15173
   HEAP8[$0 + 373 >> 0] = 0; //@line 15175
   HEAP8[$0 + 374 >> 0] = 0; //@line 15177
   $$05$i = HEAP32[$0 + 1208 >> 2] | 0; //@line 15179
   if ($$05$i | 0) {
    $$06$i = $$05$i; //@line 15182
    do {
     HEAP32[$$06$i + 36 >> 2] = 0; //@line 15185
     $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 15187
    } while (($$06$i | 0) != 0);
   }
   HEAP8[$0 + 378 >> 0] = 0; //@line 15197
   HEAP8[$0 + 379 >> 0] = 0; //@line 15199
   $54 = HEAP32[$0 >> 2] | 0; //@line 15200
   $57 = HEAP32[(HEAP32[$54 >> 2] | 0) + 52 >> 2] | 0; //@line 15203
   $62 = (HEAPU8[$0 + 897 >> 0] | 0) + 1 & 255; //@line 15208
   $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 15209
   $63 = FUNCTION_TABLE_iii[$57 & 31]($54, $62) | 0; //@line 15210
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 468; //@line 15213
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 15215
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer1; //@line 15217
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 15219
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer1; //@line 15221
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 15223
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer3; //@line 15225
    HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer3; //@line 15227
    HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer5; //@line 15229
    HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer5; //@line 15231
    sp = STACKTOP; //@line 15232
    STACKTOP = sp; //@line 15233
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 15235
   HEAP8[$0 + 1097 >> 0] = $63; //@line 15237
   HEAP8[$vararg_buffer1 >> 0] = 0; //@line 15238
   HEAP8[$vararg_buffer >> 0] = HEAP8[$0 + 1156 >> 0] << 7; //@line 15242
   $AsyncCtx15 = _emscripten_alloc_async_context(32, sp) | 0; //@line 15243
   $77 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($0, $vararg_buffer1, $vararg_buffer, 0, 0, 0) | 0; //@line 15244
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 469; //@line 15247
    HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 15249
    HEAP32[$AsyncCtx15 + 8 >> 2] = $vararg_buffer3; //@line 15251
    HEAP32[$AsyncCtx15 + 12 >> 2] = $vararg_buffer3; //@line 15253
    HEAP32[$AsyncCtx15 + 16 >> 2] = $vararg_buffer5; //@line 15255
    HEAP32[$AsyncCtx15 + 20 >> 2] = $vararg_buffer5; //@line 15257
    HEAP32[$AsyncCtx15 + 24 >> 2] = $vararg_buffer; //@line 15259
    HEAP32[$AsyncCtx15 + 28 >> 2] = $vararg_buffer1; //@line 15261
    sp = STACKTOP; //@line 15262
    STACKTOP = sp; //@line 15263
    return;
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 15265
   if ($77 | 0) {
    _printf(13369, $vararg_buffer3) | 0; //@line 15268
    HEAP32[$vararg_buffer5 >> 2] = $77; //@line 15269
    _printf(13382, $vararg_buffer5) | 0; //@line 15270
    $AsyncCtx8 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15271
    _putchar(10) | 0; //@line 15272
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 471; //@line 15275
     HEAP32[$AsyncCtx8 + 4 >> 2] = $vararg_buffer; //@line 15277
     HEAP32[$AsyncCtx8 + 8 >> 2] = $vararg_buffer1; //@line 15279
     sp = STACKTOP; //@line 15280
     STACKTOP = sp; //@line 15281
     return;
    }
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 15283
    STACKTOP = sp; //@line 15284
    return;
   }
  }
 }
 $AsyncCtx18 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15288
 __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 15289
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 470; //@line 15292
  HEAP32[$AsyncCtx18 + 4 >> 2] = $vararg_buffer; //@line 15294
  HEAP32[$AsyncCtx18 + 8 >> 2] = $vararg_buffer1; //@line 15296
  sp = STACKTOP; //@line 15297
  STACKTOP = sp; //@line 15298
  return;
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 15300
 STACKTOP = sp; //@line 15301
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_239($0) {
 $0 = $0 | 0;
 var $$054 = 0, $$055 = 0, $$05564 = 0, $$056 = 0, $$05663 = 0, $$05766 = 0, $$06065 = 0, $$158 = 0, $$15862 = 0, $$259 = 0, $$pre$phiZ2D = 0, $10 = 0, $104 = 0, $109 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $29 = 0, $30 = 0, $4 = 0, $43 = 0, $44 = 0, $45 = 0, $51 = 0, $52 = 0, $56 = 0, $58 = 0, $6 = 0, $64 = 0, $65 = 0, $68 = 0, $70 = 0, $8 = 0, $83 = 0, $95 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15
 $8 = HEAP8[$0 + 16 >> 0] & 1; //@line 18
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26
 $18 = HEAP8[$0 + 36 >> 0] | 0; //@line 28
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 30
 if (HEAP8[___async_retval >> 0] & 1) {
  HEAP8[$4 >> 0] = HEAP8[$4 >> 0] | 64; //@line 37
 }
 $24 = $6 + 374 | 0; //@line 39
 if (!(HEAP8[$24 >> 0] | 0)) {
  $$pre$phiZ2D = $4; //@line 43
 } else {
  HEAP8[$24 >> 0] = 0; //@line 45
  HEAP8[$4 >> 0] = HEAP8[$4 >> 0] | 32; //@line 48
  $$pre$phiZ2D = $4; //@line 49
 }
 $29 = $6 + 952 | 0; //@line 51
 $30 = HEAP32[$29 >> 2] | 0; //@line 52
 HEAP8[$6 + 382 >> 0] = $30; //@line 55
 HEAP8[$6 + 383 >> 0] = $30 >>> 8; //@line 59
 HEAP8[$6 + 384 >> 0] = $30 >>> 16; //@line 63
 HEAP8[$6 + 385 >> 0] = $30 >>> 24; //@line 67
 $43 = $6 + 386 | 0; //@line 69
 HEAP8[$43 >> 0] = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 70
 $44 = $6 + 956 | 0; //@line 71
 $45 = HEAP32[$44 >> 2] | 0; //@line 72
 HEAP8[$6 + 387 >> 0] = $45; //@line 75
 HEAP8[$6 + 388 >> 0] = $45 >>> 8; //@line 79
 $51 = $6 + 4 | 0; //@line 80
 __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($51); //@line 81
 $52 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($51) | 0; //@line 82
 do {
  if ($8) {
   label = 16; //@line 85
  } else {
   if (!(HEAP8[$10 >> 0] | 0)) {
    label = 16; //@line 90
   } else {
    if (!(__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($51) | 0)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($51); //@line 94
     $$05564 = $18; //@line 95
     $$05663 = $20; //@line 95
     $$15862 = 8; //@line 95
     label = 20; //@line 96
     break;
    }
    $56 = $52 & 255; //@line 99
    if (($52 & 255) >= 16) {
     HEAP8[$10 >> 0] = $52; //@line 102
     $$055 = 0; //@line 104
     $$056 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($51) | 0; //@line 104
     $$158 = 8; //@line 104
     label = 19; //@line 105
     break;
    }
    $58 = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 108
    $64 = ($58 & 255) + $56 & 15 | $58 & -16; //@line 114
    HEAP8[$$pre$phiZ2D >> 0] = $64; //@line 115
    HEAP8[$43 >> 0] = $64; //@line 116
    $65 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($51) | 0; //@line 117
    if (!($52 << 24 >> 24)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($51); //@line 120
     $$05564 = $18; //@line 121
     $$05663 = $20; //@line 121
     $$15862 = 8; //@line 121
     label = 20; //@line 122
     break;
    } else {
     $$05766 = 8; //@line 125
     $$06065 = 0; //@line 125
     $68 = 0; //@line 125
     while (1) {
      $70 = $$05766 + 1 << 24 >> 24; //@line 129
      HEAP8[($$05766 & 255) + ($6 + 381) >> 0] = HEAP8[$65 + $68 >> 0] | 0; //@line 132
      $$06065 = $$06065 + 1 << 16 >> 16; //@line 133
      $68 = $$06065 & 65535; //@line 134
      if ($68 >>> 0 >= $56 >>> 0) {
       $$055 = $18; //@line 139
       $$056 = $20; //@line 139
       $$158 = $70; //@line 139
       label = 19; //@line 140
       break;
      } else {
       $$05766 = $70; //@line 137
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 16) {
  if (!($52 << 24 >> 24)) {
   $$055 = $18; //@line 151
   $$056 = $20; //@line 151
   $$158 = 8; //@line 151
   label = 19; //@line 152
  } else {
   if (__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($51) | 0) {
    HEAP8[$10 >> 0] = $52; //@line 156
    $$055 = 0; //@line 158
    $$056 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($51) | 0; //@line 158
    $$158 = 8; //@line 158
    label = 19; //@line 159
   } else {
    $$055 = $18; //@line 161
    $$056 = $20; //@line 161
    $$158 = 8; //@line 161
    label = 19; //@line 162
   }
  }
 }
 if ((label | 0) == 19) {
  __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($51); //@line 167
  if (!$$056) {
   $$054 = 0; //@line 170
   $$259 = $$158; //@line 170
  } else {
   $$05564 = $$055; //@line 172
   $$05663 = $$056; //@line 172
   $$15862 = $$158; //@line 172
   label = 20; //@line 173
  }
 }
 do {
  if ((label | 0) == 20) {
   if (!(HEAP8[$10 >> 0] | 0)) {
    $$054 = 0; //@line 181
    $$259 = $$15862; //@line 181
   } else {
    $83 = $$15862 + 1 << 24 >> 24; //@line 183
    HEAP8[($$15862 & 255) + ($6 + 381) >> 0] = $$05564; //@line 186
    if (!($$05564 << 24 >> 24)) {
     __ZN14LoRaMacCommand20clear_command_bufferEv($51); //@line 189
     $95 = (__Z15encrypt_payloadPKhtS0_jhjPh($$05663, HEAPU8[$10 >> 0] | 0, $6 + 912 | 0, HEAP32[$29 >> 2] | 0, 0, HEAP32[$44 >> 2] | 0, ($83 & 255) + ($6 + 381) | 0) | 0) == 0; //@line 198
     $$054 = $95 ? 0 : -1014; //@line 200
     $$259 = $83; //@line 200
     break;
    } else {
     $104 = (__Z15encrypt_payloadPKhtS0_jhjPh($$05663, HEAPU8[$10 >> 0] | 0, $6 + 928 | 0, HEAP32[$29 >> 2] | 0, 0, HEAP32[$44 >> 2] | 0, ($83 & 255) + ($6 + 381) | 0) | 0) == 0; //@line 211
     $$054 = $104 ? 0 : -1014; //@line 213
     $$259 = $83; //@line 213
     break;
    }
   }
  }
 } while (0);
 $109 = (HEAPU8[$10 >> 0] | 0) + ($$259 & 255) & 65535; //@line 223
 HEAP16[$14 >> 1] = $109; //@line 224
 $111 = HEAP32[$29 >> 2] | 0; //@line 226
 $112 = HEAP32[$44 >> 2] | 0; //@line 227
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 228
 $113 = __Z11compute_micPKhtS0_jhjPj($16, $109, $6 + 912 | 0, $111, 0, $112, $12) | 0; //@line 229
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 488; //@line 232
  $114 = $ReallocAsyncCtx + 4 | 0; //@line 233
  HEAP32[$114 >> 2] = $$054; //@line 234
  $115 = $ReallocAsyncCtx + 8 | 0; //@line 235
  HEAP32[$115 >> 2] = $12; //@line 236
  $116 = $ReallocAsyncCtx + 12 | 0; //@line 237
  HEAP32[$116 >> 2] = $14; //@line 238
  $117 = $ReallocAsyncCtx + 16 | 0; //@line 239
  HEAP32[$117 >> 2] = $6; //@line 240
  $118 = $ReallocAsyncCtx + 20 | 0; //@line 241
  HEAP32[$118 >> 2] = $2; //@line 242
  sp = STACKTOP; //@line 243
  return;
 }
 HEAP32[___async_retval >> 2] = $113; //@line 247
 ___async_unwind = 0; //@line 248
 HEAP32[$ReallocAsyncCtx >> 2] = 488; //@line 249
 $114 = $ReallocAsyncCtx + 4 | 0; //@line 250
 HEAP32[$114 >> 2] = $$054; //@line 251
 $115 = $ReallocAsyncCtx + 8 | 0; //@line 252
 HEAP32[$115 >> 2] = $12; //@line 253
 $116 = $ReallocAsyncCtx + 12 | 0; //@line 254
 HEAP32[$116 >> 2] = $14; //@line 255
 $117 = $ReallocAsyncCtx + 16 | 0; //@line 256
 HEAP32[$117 >> 2] = $6; //@line 257
 $118 = $ReallocAsyncCtx + 20 | 0; //@line 258
 HEAP32[$118 >> 2] = $2; //@line 259
 sp = STACKTOP; //@line 260
 return;
}
function __ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 var $$ = 0, $$sink = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $82 = 0, $AsyncCtx = 0, $AsyncCtx18 = 0, $AsyncCtx22 = 0, $AsyncCtx26 = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 521
 STACKTOP = STACKTOP + 64 | 0; //@line 522
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 522
 $vararg_buffer14 = sp + 56 | 0; //@line 523
 $vararg_buffer12 = sp + 48 | 0; //@line 524
 $vararg_buffer10 = sp + 40 | 0; //@line 525
 $vararg_buffer8 = sp + 32 | 0; //@line 526
 $vararg_buffer5 = sp + 24 | 0; //@line 527
 $vararg_buffer3 = sp + 16 | 0; //@line 528
 $vararg_buffer1 = sp + 8 | 0; //@line 529
 $14 = $8 & 1; //@line 531
 $15 = $9 & 1; //@line 532
 $16 = $10 & 1; //@line 533
 $17 = $12 & 1; //@line 534
 $19 = $0 + 689 | 0; //@line 536
 HEAP8[$19 >> 0] = $1; //@line 537
 _printf(10880, sp) | 0; //@line 538
 HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$19 >> 0]; //@line 541
 _printf(11055, $vararg_buffer1) | 0; //@line 542
 $AsyncCtx26 = _emscripten_alloc_async_context(92, sp) | 0; //@line 543
 _putchar(10) | 0; //@line 544
 if (___async) {
  HEAP32[$AsyncCtx26 >> 2] = 60; //@line 547
  HEAP32[$AsyncCtx26 + 4 >> 2] = $vararg_buffer3; //@line 549
  HEAP32[$AsyncCtx26 + 8 >> 2] = $vararg_buffer3; //@line 551
  HEAP8[$AsyncCtx26 + 12 >> 0] = $2; //@line 553
  HEAP32[$AsyncCtx26 + 16 >> 2] = $vararg_buffer5; //@line 555
  HEAP32[$AsyncCtx26 + 20 >> 2] = $vararg_buffer5; //@line 557
  HEAP32[$AsyncCtx26 + 24 >> 2] = $1; //@line 559
  HEAP32[$AsyncCtx26 + 28 >> 2] = $0; //@line 561
  HEAP32[$AsyncCtx26 + 32 >> 2] = $3; //@line 563
  HEAP32[$AsyncCtx26 + 36 >> 2] = $4; //@line 565
  HEAP32[$AsyncCtx26 + 40 >> 2] = $5; //@line 567
  HEAP16[$AsyncCtx26 + 44 >> 1] = $7; //@line 569
  HEAP8[$AsyncCtx26 + 46 >> 0] = $14; //@line 571
  HEAP8[$AsyncCtx26 + 47 >> 0] = $15; //@line 573
  HEAP8[$AsyncCtx26 + 48 >> 0] = $17; //@line 575
  HEAP32[$AsyncCtx26 + 52 >> 2] = $13; //@line 577
  HEAP32[$AsyncCtx26 + 56 >> 2] = $vararg_buffer8; //@line 579
  HEAP32[$AsyncCtx26 + 60 >> 2] = $vararg_buffer8; //@line 581
  HEAP32[$AsyncCtx26 + 64 >> 2] = $vararg_buffer10; //@line 583
  HEAP32[$AsyncCtx26 + 68 >> 2] = $vararg_buffer10; //@line 585
  HEAP8[$AsyncCtx26 + 72 >> 0] = $6; //@line 587
  HEAP8[$AsyncCtx26 + 73 >> 0] = $16; //@line 589
  HEAP8[$AsyncCtx26 + 74 >> 0] = $11; //@line 591
  HEAP32[$AsyncCtx26 + 76 >> 2] = $vararg_buffer12; //@line 593
  HEAP32[$AsyncCtx26 + 80 >> 2] = $vararg_buffer12; //@line 595
  HEAP32[$AsyncCtx26 + 84 >> 2] = $vararg_buffer14; //@line 597
  HEAP32[$AsyncCtx26 + 88 >> 2] = $vararg_buffer14; //@line 599
  sp = STACKTOP; //@line 600
  STACKTOP = sp; //@line 601
  return;
 }
 _emscripten_free_async_context($AsyncCtx26 | 0); //@line 603
 _printf(10880, $vararg_buffer3) | 0; //@line 604
 HEAP32[$vararg_buffer5 >> 2] = $2 << 24 >> 24; //@line 606
 _printf(11449, $vararg_buffer5) | 0; //@line 607
 $AsyncCtx22 = _emscripten_alloc_async_context(76, sp) | 0; //@line 608
 _putchar(10) | 0; //@line 609
 if (___async) {
  HEAP32[$AsyncCtx22 >> 2] = 61; //@line 612
  HEAP32[$AsyncCtx22 + 4 >> 2] = $1; //@line 614
  HEAP32[$AsyncCtx22 + 8 >> 2] = $0; //@line 616
  HEAP8[$AsyncCtx22 + 12 >> 0] = $2; //@line 618
  HEAP32[$AsyncCtx22 + 16 >> 2] = $3; //@line 620
  HEAP32[$AsyncCtx22 + 20 >> 2] = $4; //@line 622
  HEAP32[$AsyncCtx22 + 24 >> 2] = $5; //@line 624
  HEAP16[$AsyncCtx22 + 28 >> 1] = $7; //@line 626
  HEAP8[$AsyncCtx22 + 30 >> 0] = $14; //@line 628
  HEAP8[$AsyncCtx22 + 31 >> 0] = $15; //@line 630
  HEAP8[$AsyncCtx22 + 32 >> 0] = $17; //@line 632
  HEAP32[$AsyncCtx22 + 36 >> 2] = $13; //@line 634
  HEAP32[$AsyncCtx22 + 40 >> 2] = $vararg_buffer8; //@line 636
  HEAP32[$AsyncCtx22 + 44 >> 2] = $vararg_buffer8; //@line 638
  HEAP32[$AsyncCtx22 + 48 >> 2] = $vararg_buffer10; //@line 640
  HEAP32[$AsyncCtx22 + 52 >> 2] = $vararg_buffer10; //@line 642
  HEAP8[$AsyncCtx22 + 56 >> 0] = $6; //@line 644
  HEAP8[$AsyncCtx22 + 57 >> 0] = $16; //@line 646
  HEAP8[$AsyncCtx22 + 58 >> 0] = $11; //@line 648
  HEAP32[$AsyncCtx22 + 60 >> 2] = $vararg_buffer12; //@line 650
  HEAP32[$AsyncCtx22 + 64 >> 2] = $vararg_buffer12; //@line 652
  HEAP32[$AsyncCtx22 + 68 >> 2] = $vararg_buffer14; //@line 654
  HEAP32[$AsyncCtx22 + 72 >> 2] = $vararg_buffer14; //@line 656
  sp = STACKTOP; //@line 657
  STACKTOP = sp; //@line 658
  return;
 }
 _emscripten_free_async_context($AsyncCtx22 | 0); //@line 660
 switch ($1 | 0) {
 case 0:
  {
   HEAP8[$0 + 696 >> 0] = $2; //@line 664
   HEAP32[$0 + 700 >> 2] = $3; //@line 666
   HEAP32[$0 + 704 >> 2] = $4; //@line 668
   HEAP32[$0 + 712 >> 2] = $5; //@line 670
   HEAP16[$0 + 716 >> 1] = $7; //@line 672
   HEAP8[$0 + 718 >> 0] = $14; //@line 674
   HEAP8[$0 + 720 >> 0] = $15; //@line 676
   HEAP8[$0 + 721 >> 0] = $17; //@line 678
   HEAP32[$0 + 724 >> 2] = $13; //@line 680
   _printf(10880, $vararg_buffer8) | 0; //@line 681
   _printf(11476, $vararg_buffer10) | 0; //@line 682
   $AsyncCtx18 = _emscripten_alloc_async_context(4, sp) | 0; //@line 683
   _putchar(10) | 0; //@line 684
   if (___async) {
    HEAP32[$AsyncCtx18 >> 2] = 62; //@line 687
    sp = STACKTOP; //@line 688
    STACKTOP = sp; //@line 689
    return;
   }
   _emscripten_free_async_context($AsyncCtx18 | 0); //@line 691
   STACKTOP = sp; //@line 692
   return;
  }
 case 1:
  {
   HEAP8[$0 + 748 >> 0] = $2; //@line 697
   if ($4 >>> 0 > 2) {
    while (1) {}
   }
   $82 = $4 + 7 | 0; //@line 703
   HEAP32[$0 + 752 >> 2] = $82; //@line 705
   HEAP32[$0 + 756 >> 2] = $5; //@line 707
   HEAP8[$0 + 761 >> 0] = $6; //@line 709
   HEAP16[$0 + 762 >> 1] = $7; //@line 711
   HEAP8[$0 + 764 >> 0] = $14; //@line 713
   HEAP8[$0 + 767 >> 0] = $16; //@line 715
   HEAP8[$0 + 768 >> 0] = $11; //@line 717
   HEAP8[$0 + 766 >> 0] = $15; //@line 719
   HEAP8[$0 + 769 >> 0] = $17; //@line 721
   HEAP32[$0 + 772 >> 2] = $13; //@line 723
   $$ = $5 >>> 0 > 6 ? $5 : 6; //@line 725
   if (($4 | 0) == 0 & (($$ >>> 0 < 12 ? $$ : 12) + -11 | 0) >>> 0 < 2) {
    label = 13; //@line 733
   } else {
    if (($82 | 0) == 8 & $$ >>> 0 > 11) {
     label = 13; //@line 739
    } else {
     $$sink = 0; //@line 741
    }
   }
   if ((label | 0) == 13) {
    $$sink = 1; //@line 745
   }
   HEAP8[$0 + 760 >> 0] = $$sink; //@line 748
   _printf(10880, $vararg_buffer12) | 0; //@line 749
   _printf(11494, $vararg_buffer14) | 0; //@line 750
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 751
   _putchar(10) | 0; //@line 752
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 63; //@line 755
    sp = STACKTOP; //@line 756
    STACKTOP = sp; //@line 757
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 759
   STACKTOP = sp; //@line 760
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 764
   return;
  }
 }
}
function _mbedtls_cipher_update($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0102 = 0, $$0103 = 0, $$0105 = 0, $$1 = 0, $$phi$trans$insert = 0, $$pre$phi107Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $12 = 0, $17 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $34 = 0, $36 = 0, $37 = 0, $40 = 0, $41 = 0, $45 = 0, $49 = 0, $50 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $62 = 0, $80 = 0, $85 = 0, $94 = 0, $96 = 0, $97 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2675
 if (!$0) {
  $$1 = -24832; //@line 2678
  return $$1 | 0; //@line 2679
 }
 $6 = HEAP32[$0 >> 2] | 0; //@line 2681
 if (($4 | 0) == 0 | ($6 | 0) == 0) {
  $$1 = -24832; //@line 2686
  return $$1 | 0; //@line 2687
 }
 HEAP32[$4 >> 2] = 0; //@line 2689
 $10 = HEAP32[$6 + 24 >> 2] | 0; //@line 2691
 $12 = HEAP32[$6 + 4 >> 2] | 0; //@line 2693
 switch ($12 | 0) {
 case 1:
  {
   if (($10 | 0) != ($2 | 0)) {
    $$1 = -25216; //@line 2698
    return $$1 | 0; //@line 2699
   }
   HEAP32[$4 >> 2] = $2; //@line 2701
   $17 = HEAP32[(HEAP32[$6 + 28 >> 2] | 0) + 4 >> 2] | 0; //@line 2705
   $19 = HEAP32[$0 + 60 >> 2] | 0; //@line 2707
   $21 = HEAP32[$0 + 8 >> 2] | 0; //@line 2709
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2710
   $22 = FUNCTION_TABLE_iiiii[$17 & 3]($19, $21, $1, $3) | 0; //@line 2711
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 662; //@line 2714
    sp = STACKTOP; //@line 2715
    return 0; //@line 2716
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 2718
   $$1 = $22; //@line 2719
   return $$1 | 0; //@line 2720
  }
 case 6:
  {
   HEAP32[$4 >> 2] = $2; //@line 2724
   $24 = HEAP32[$0 + 60 >> 2] | 0; //@line 2726
   $AsyncCtx11 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2727
   $25 = _mbedtls_gcm_update($24, $2, $1, $3) | 0; //@line 2728
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 663; //@line 2731
    sp = STACKTOP; //@line 2732
    return 0; //@line 2733
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 2735
   $$1 = $25; //@line 2736
   return $$1 | 0; //@line 2737
  }
 default:
  {
   if (!$10) {
    $$1 = -25472; //@line 2743
    return $$1 | 0; //@line 2744
   }
   if (($1 | 0) == ($3 | 0)) {
    if (HEAP32[$0 + 36 >> 2] | 0) {
     $$1 = -24832; //@line 2752
     return $$1 | 0; //@line 2753
    }
    if (($2 >>> 0) % ($10 >>> 0) | 0 | 0) {
     $$1 = -24832; //@line 2758
     return $$1 | 0; //@line 2759
    }
   }
   if (($12 | 0) != 2) {
    $$1 = -24704; //@line 2764
    return $$1 | 0; //@line 2765
   }
   $34 = $0 + 8 | 0; //@line 2767
   switch (HEAP32[$34 >> 2] | 0) {
   case 0:
    {
     $36 = $0 + 36 | 0; //@line 2771
     $37 = HEAP32[$36 >> 2] | 0; //@line 2772
     if (($10 - $37 | 0) >>> 0 < $2 >>> 0) {
      label = 18; //@line 2776
     } else {
      $$pre$phiZ2D = $36; //@line 2778
      $45 = $37; //@line 2778
      label = 20; //@line 2779
     }
     break;
    }
   case 1:
    {
     $40 = $0 + 36 | 0; //@line 2784
     $41 = HEAP32[$40 >> 2] | 0; //@line 2785
     if (($10 - $41 | 0) >>> 0 > $2 >>> 0) {
      $$pre$phiZ2D = $40; //@line 2789
      $45 = $41; //@line 2789
      label = 20; //@line 2790
     } else {
      $$pre$phi107Z2D = $40; //@line 2792
      $49 = $41; //@line 2792
     }
     break;
    }
   default:
    {
     label = 18; //@line 2797
    }
   }
   if ((label | 0) == 18) {
    $$phi$trans$insert = $0 + 36 | 0; //@line 2801
    $$pre$phi107Z2D = $$phi$trans$insert; //@line 2803
    $49 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 2803
   } else if ((label | 0) == 20) {
    _memcpy($0 + 20 + $45 | 0, $1 | 0, $2 | 0) | 0; //@line 2807
    HEAP32[$$pre$phiZ2D >> 2] = (HEAP32[$$pre$phiZ2D >> 2] | 0) + $2; //@line 2810
    $$1 = 0; //@line 2811
    return $$1 | 0; //@line 2812
   }
   do {
    if (!$49) {
     $$0102 = $3; //@line 2817
     $$0103 = $2; //@line 2817
     $$0105 = $1; //@line 2817
    } else {
     $50 = $10 - $49 | 0; //@line 2819
     _memcpy($0 + 20 + $49 | 0, $1 | 0, $50 | 0) | 0; //@line 2821
     $56 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 2826
     $58 = HEAP32[$0 + 60 >> 2] | 0; //@line 2828
     $59 = HEAP32[$34 >> 2] | 0; //@line 2829
     $AsyncCtx3 = _emscripten_alloc_async_context(44, sp) | 0; //@line 2832
     $62 = FUNCTION_TABLE_iiiiiii[$56 & 3]($58, $59, $10, $0 + 40 | 0, $0 + 20 | 0, $3) | 0; //@line 2833
     if (___async) {
      HEAP32[$AsyncCtx3 >> 2] = 664; //@line 2836
      HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 2838
      HEAP32[$AsyncCtx3 + 8 >> 2] = $10; //@line 2840
      HEAP32[$AsyncCtx3 + 12 >> 2] = $3; //@line 2842
      HEAP32[$AsyncCtx3 + 16 >> 2] = $$pre$phi107Z2D; //@line 2844
      HEAP32[$AsyncCtx3 + 20 >> 2] = $1; //@line 2846
      HEAP32[$AsyncCtx3 + 24 >> 2] = $50; //@line 2848
      HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 2850
      HEAP32[$AsyncCtx3 + 32 >> 2] = $34; //@line 2852
      HEAP32[$AsyncCtx3 + 36 >> 2] = $0; //@line 2854
      HEAP32[$AsyncCtx3 + 40 >> 2] = $0; //@line 2856
      sp = STACKTOP; //@line 2857
      return 0; //@line 2858
     }
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2860
     if (!$62) {
      HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + $10; //@line 2865
      HEAP32[$$pre$phi107Z2D >> 2] = 0; //@line 2867
      $$0102 = $3 + $10 | 0; //@line 2870
      $$0103 = $2 - $50 | 0; //@line 2870
      $$0105 = $1 + $50 | 0; //@line 2870
      break;
     } else {
      $$1 = $62; //@line 2873
      return $$1 | 0; //@line 2874
     }
    }
   } while (0);
   if (!$$0103) {
    $$1 = 0; //@line 2880
    return $$1 | 0; //@line 2881
   }
   $80 = ($$0103 >>> 0) % ($10 >>> 0) | 0; //@line 2883
   if (!$80) {
    $$0 = (HEAP32[$34 >> 2] | 0) == 0 ? $10 : 0; //@line 2889
   } else {
    $$0 = $80; //@line 2891
   }
   $85 = $$0103 - $$0 | 0; //@line 2894
   _memcpy($0 + 20 | 0, $$0105 + $85 | 0, $$0 | 0) | 0; //@line 2896
   HEAP32[$$pre$phi107Z2D >> 2] = (HEAP32[$$pre$phi107Z2D >> 2] | 0) + $$0; //@line 2899
   if (!$85) {
    $$1 = 0; //@line 2902
    return $$1 | 0; //@line 2903
   }
   $94 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 2909
   $96 = HEAP32[$0 + 60 >> 2] | 0; //@line 2911
   $97 = HEAP32[$34 >> 2] | 0; //@line 2912
   $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2914
   $99 = FUNCTION_TABLE_iiiiiii[$94 & 3]($96, $97, $85, $0 + 40 | 0, $$0105, $$0102) | 0; //@line 2915
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 665; //@line 2918
    HEAP32[$AsyncCtx7 + 4 >> 2] = $4; //@line 2920
    HEAP32[$AsyncCtx7 + 8 >> 2] = $85; //@line 2922
    sp = STACKTOP; //@line 2923
    return 0; //@line 2924
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 2926
   if ($99 | 0) {
    $$1 = $99; //@line 2929
    return $$1 | 0; //@line 2930
   }
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + $85; //@line 2934
   $$1 = 0; //@line 2935
   return $$1 | 0; //@line 2936
  }
 }
 return 0; //@line 2939
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_7($0) {
 $0 = $0 | 0;
 var $$pre$i$i34 = 0, $12 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 17507
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17509
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17511
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17513
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17519
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17521
 $$pre$i$i34 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 17522
 HEAP32[HEAP32[$0 + 20 >> 2] >> 2] = $$pre$i$i34; //@line 17524
 if ($$pre$i$i34 | 0) {
  $18 = HEAP32[$$pre$i$i34 + 8 >> 2] | 0; //@line 17528
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(24) | 0; //@line 17529
  FUNCTION_TABLE_vi[$18 & 1023]($12); //@line 17530
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 562; //@line 17533
   $19 = $ReallocAsyncCtx9 + 4 | 0; //@line 17534
   HEAP32[$19 >> 2] = $2; //@line 17535
   $20 = $ReallocAsyncCtx9 + 8 | 0; //@line 17536
   HEAP32[$20 >> 2] = $4; //@line 17537
   $21 = $ReallocAsyncCtx9 + 12 | 0; //@line 17538
   HEAP32[$21 >> 2] = $6; //@line 17539
   $22 = $ReallocAsyncCtx9 + 16 | 0; //@line 17540
   HEAP32[$22 >> 2] = $12; //@line 17541
   $23 = $ReallocAsyncCtx9 + 20 | 0; //@line 17542
   HEAP32[$23 >> 2] = $14; //@line 17543
   sp = STACKTOP; //@line 17544
   return;
  }
  ___async_unwind = 0; //@line 17547
  HEAP32[$ReallocAsyncCtx9 >> 2] = 562; //@line 17548
  $19 = $ReallocAsyncCtx9 + 4 | 0; //@line 17549
  HEAP32[$19 >> 2] = $2; //@line 17550
  $20 = $ReallocAsyncCtx9 + 8 | 0; //@line 17551
  HEAP32[$20 >> 2] = $4; //@line 17552
  $21 = $ReallocAsyncCtx9 + 12 | 0; //@line 17553
  HEAP32[$21 >> 2] = $6; //@line 17554
  $22 = $ReallocAsyncCtx9 + 16 | 0; //@line 17555
  HEAP32[$22 >> 2] = $12; //@line 17556
  $23 = $ReallocAsyncCtx9 + 20 | 0; //@line 17557
  HEAP32[$23 >> 2] = $14; //@line 17558
  sp = STACKTOP; //@line 17559
  return;
 }
 $24 = $14 + 12 | 0; //@line 17562
 HEAP32[$14 >> 2] = 563; //@line 17563
 HEAP32[$14 + 4 >> 2] = 0; //@line 17565
 HEAP32[$14 + 8 >> 2] = $4; //@line 17567
 HEAP32[$24 >> 2] = 848; //@line 17568
 $25 = $4 + 1228 | 0; //@line 17569
 if (($25 | 0) == ($14 | 0)) {
  $48 = HEAP32[214] | 0; //@line 17573
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 17574
  FUNCTION_TABLE_vi[$48 & 1023]($14); //@line 17575
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 566; //@line 17578
   $49 = $ReallocAsyncCtx12 + 4 | 0; //@line 17579
   HEAP32[$49 >> 2] = $14; //@line 17580
   $50 = $ReallocAsyncCtx12 + 8 | 0; //@line 17581
   HEAP32[$50 >> 2] = $6; //@line 17582
   $51 = $ReallocAsyncCtx12 + 12 | 0; //@line 17583
   HEAP32[$51 >> 2] = $4; //@line 17584
   $52 = $ReallocAsyncCtx12 + 16 | 0; //@line 17585
   HEAP32[$52 >> 2] = $2; //@line 17586
   sp = STACKTOP; //@line 17587
   return;
  }
  ___async_unwind = 0; //@line 17590
  HEAP32[$ReallocAsyncCtx12 >> 2] = 566; //@line 17591
  $49 = $ReallocAsyncCtx12 + 4 | 0; //@line 17592
  HEAP32[$49 >> 2] = $14; //@line 17593
  $50 = $ReallocAsyncCtx12 + 8 | 0; //@line 17594
  HEAP32[$50 >> 2] = $6; //@line 17595
  $51 = $ReallocAsyncCtx12 + 12 | 0; //@line 17596
  HEAP32[$51 >> 2] = $4; //@line 17597
  $52 = $ReallocAsyncCtx12 + 16 | 0; //@line 17598
  HEAP32[$52 >> 2] = $2; //@line 17599
  sp = STACKTOP; //@line 17600
  return;
 }
 $27 = $4 + 1240 | 0; //@line 17603
 $28 = HEAP32[$27 >> 2] | 0; //@line 17604
 if (!$28) {
  $40 = HEAP32[213] | 0; //@line 17608
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(28) | 0; //@line 17609
  FUNCTION_TABLE_vii[$40 & 31]($25, $14); //@line 17610
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 565; //@line 17613
   $41 = $ReallocAsyncCtx11 + 4 | 0; //@line 17614
   HEAP32[$41 >> 2] = $2; //@line 17615
   $42 = $ReallocAsyncCtx11 + 8 | 0; //@line 17616
   HEAP32[$42 >> 2] = $4; //@line 17617
   $43 = $ReallocAsyncCtx11 + 12 | 0; //@line 17618
   HEAP32[$43 >> 2] = $14; //@line 17619
   $44 = $ReallocAsyncCtx11 + 16 | 0; //@line 17620
   HEAP32[$44 >> 2] = $6; //@line 17621
   $45 = $ReallocAsyncCtx11 + 20 | 0; //@line 17622
   HEAP32[$45 >> 2] = $24; //@line 17623
   $46 = $ReallocAsyncCtx11 + 24 | 0; //@line 17624
   HEAP32[$46 >> 2] = $27; //@line 17625
   sp = STACKTOP; //@line 17626
   return;
  }
  ___async_unwind = 0; //@line 17629
  HEAP32[$ReallocAsyncCtx11 >> 2] = 565; //@line 17630
  $41 = $ReallocAsyncCtx11 + 4 | 0; //@line 17631
  HEAP32[$41 >> 2] = $2; //@line 17632
  $42 = $ReallocAsyncCtx11 + 8 | 0; //@line 17633
  HEAP32[$42 >> 2] = $4; //@line 17634
  $43 = $ReallocAsyncCtx11 + 12 | 0; //@line 17635
  HEAP32[$43 >> 2] = $14; //@line 17636
  $44 = $ReallocAsyncCtx11 + 16 | 0; //@line 17637
  HEAP32[$44 >> 2] = $6; //@line 17638
  $45 = $ReallocAsyncCtx11 + 20 | 0; //@line 17639
  HEAP32[$45 >> 2] = $24; //@line 17640
  $46 = $ReallocAsyncCtx11 + 24 | 0; //@line 17641
  HEAP32[$46 >> 2] = $27; //@line 17642
  sp = STACKTOP; //@line 17643
  return;
 } else {
  $31 = HEAP32[$28 + 8 >> 2] | 0; //@line 17647
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 17648
  FUNCTION_TABLE_vi[$31 & 1023]($25); //@line 17649
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 564; //@line 17652
   $32 = $ReallocAsyncCtx10 + 4 | 0; //@line 17653
   HEAP32[$32 >> 2] = $2; //@line 17654
   $33 = $ReallocAsyncCtx10 + 8 | 0; //@line 17655
   HEAP32[$33 >> 2] = $4; //@line 17656
   $34 = $ReallocAsyncCtx10 + 12 | 0; //@line 17657
   HEAP32[$34 >> 2] = $14; //@line 17658
   $35 = $ReallocAsyncCtx10 + 16 | 0; //@line 17659
   HEAP32[$35 >> 2] = $6; //@line 17660
   $36 = $ReallocAsyncCtx10 + 20 | 0; //@line 17661
   HEAP32[$36 >> 2] = $24; //@line 17662
   $37 = $ReallocAsyncCtx10 + 24 | 0; //@line 17663
   HEAP32[$37 >> 2] = $25; //@line 17664
   $38 = $ReallocAsyncCtx10 + 28 | 0; //@line 17665
   HEAP32[$38 >> 2] = $27; //@line 17666
   sp = STACKTOP; //@line 17667
   return;
  }
  ___async_unwind = 0; //@line 17670
  HEAP32[$ReallocAsyncCtx10 >> 2] = 564; //@line 17671
  $32 = $ReallocAsyncCtx10 + 4 | 0; //@line 17672
  HEAP32[$32 >> 2] = $2; //@line 17673
  $33 = $ReallocAsyncCtx10 + 8 | 0; //@line 17674
  HEAP32[$33 >> 2] = $4; //@line 17675
  $34 = $ReallocAsyncCtx10 + 12 | 0; //@line 17676
  HEAP32[$34 >> 2] = $14; //@line 17677
  $35 = $ReallocAsyncCtx10 + 16 | 0; //@line 17678
  HEAP32[$35 >> 2] = $6; //@line 17679
  $36 = $ReallocAsyncCtx10 + 20 | 0; //@line 17680
  HEAP32[$36 >> 2] = $24; //@line 17681
  $37 = $ReallocAsyncCtx10 + 24 | 0; //@line 17682
  HEAP32[$37 >> 2] = $25; //@line 17683
  $38 = $ReallocAsyncCtx10 + 28 | 0; //@line 17684
  HEAP32[$38 >> 2] = $27; //@line 17685
  sp = STACKTOP; //@line 17686
  return;
 }
}
function _mbedtls_cipher_cmac_update($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$06984 = 0, $$06984$us = 0, $$070 = 0, $$073 = 0, $$09$i = 0, $$09$i75 = 0, $$1$lcssa = 0, $$174$lcssa = 0, $$17481 = 0, $$182 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $22 = 0, $26 = 0, $3 = 0, $38 = 0, $43 = 0, $46 = 0, $5 = 0, $58 = 0, $62 = 0, $66 = 0, $79 = 0, $80 = 0, $81 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3199
 STACKTOP = STACKTOP + 16 | 0; //@line 3200
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 3200
 $3 = sp; //@line 3201
 if (!$0) {
  $$0 = -24832; //@line 3204
  STACKTOP = sp; //@line 3205
  return $$0 | 0; //@line 3205
 }
 $5 = HEAP32[$0 >> 2] | 0; //@line 3207
 if (($1 | 0) == 0 | ($5 | 0) == 0) {
  $$0 = -24832; //@line 3212
  STACKTOP = sp; //@line 3213
  return $$0 | 0; //@line 3213
 }
 $9 = HEAP32[$0 + 64 >> 2] | 0; //@line 3216
 if (!$9) {
  $$0 = -24832; //@line 3219
  STACKTOP = sp; //@line 3220
  return $$0 | 0; //@line 3220
 }
 $12 = HEAP32[$5 + 24 >> 2] | 0; //@line 3223
 $13 = $9 + 32 | 0; //@line 3224
 $14 = HEAP32[$13 >> 2] | 0; //@line 3225
 do {
  if (!$14) {
   $$070 = $1; //@line 3229
   $$073 = $2; //@line 3229
  } else {
   $16 = $12 - $14 | 0; //@line 3231
   if ($16 >>> 0 < $2 >>> 0) {
    _memcpy($9 + 16 + $14 | 0, $1 | 0, $16 | 0) | 0; //@line 3235
    if ($12 | 0) {
     $$09$i = 0; //@line 3238
     do {
      $22 = $9 + $$09$i | 0; //@line 3242
      HEAP8[$22 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$9 + 16 + $$09$i >> 0]; //@line 3245
      $$09$i = $$09$i + 1 | 0; //@line 3246
     } while (($$09$i | 0) != ($12 | 0));
    }
    $AsyncCtx5 = _emscripten_alloc_async_context(40, sp) | 0; //@line 3255
    $26 = _mbedtls_cipher_update($0, $9, $12, $9, $3) | 0; //@line 3256
    if (___async) {
     HEAP32[$AsyncCtx5 >> 2] = 671; //@line 3259
     HEAP32[$AsyncCtx5 + 4 >> 2] = $12; //@line 3261
     HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 3263
     HEAP32[$AsyncCtx5 + 12 >> 2] = $13; //@line 3265
     HEAP32[$AsyncCtx5 + 16 >> 2] = $9; //@line 3267
     HEAP32[$AsyncCtx5 + 20 >> 2] = $0; //@line 3269
     HEAP32[$AsyncCtx5 + 24 >> 2] = $9; //@line 3271
     HEAP32[$AsyncCtx5 + 28 >> 2] = $3; //@line 3273
     HEAP32[$AsyncCtx5 + 32 >> 2] = $2; //@line 3275
     HEAP32[$AsyncCtx5 + 36 >> 2] = $1; //@line 3277
     sp = STACKTOP; //@line 3278
     STACKTOP = sp; //@line 3279
     return 0; //@line 3279
    }
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 3281
    if (!$26) {
     $38 = $12 - (HEAP32[$13 >> 2] | 0) | 0; //@line 3285
     HEAP32[$13 >> 2] = 0; //@line 3288
     $$070 = $1 + $38 | 0; //@line 3289
     $$073 = $2 - $38 | 0; //@line 3289
     break;
    } else {
     $$0 = $26; //@line 3292
     STACKTOP = sp; //@line 3293
     return $$0 | 0; //@line 3293
    }
   } else {
    $$070 = $1; //@line 3296
    $$073 = $2; //@line 3296
   }
  }
 } while (0);
 $43 = (($12 + -1 + $$073 | 0) >>> 0) / ($12 >>> 0) | 0; //@line 3302
 L24 : do {
  if ($43 >>> 0 > 1) {
   if (!$12) {
    $$06984$us = 1; //@line 3308
    while (1) {
     $AsyncCtx2 = _emscripten_alloc_async_context(44, sp) | 0; //@line 3310
     $46 = _mbedtls_cipher_update($0, $9, 0, $9, $3) | 0; //@line 3311
     if (___async) {
      label = 15; //@line 3314
      break;
     }
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3317
     if ($46 | 0) {
      $$0 = $46; //@line 3320
      label = 26; //@line 3321
      break;
     }
     $58 = $$06984$us + 1 | 0; //@line 3324
     if ($58 >>> 0 < $43 >>> 0) {
      $$06984$us = $58; //@line 3327
     } else {
      $$1$lcssa = $$070; //@line 3329
      $$174$lcssa = $$073; //@line 3329
      break L24;
     }
    }
    if ((label | 0) == 15) {
     HEAP32[$AsyncCtx2 >> 2] = 672; //@line 3334
     HEAP32[$AsyncCtx2 + 4 >> 2] = $$06984$us; //@line 3336
     HEAP32[$AsyncCtx2 + 8 >> 2] = $43; //@line 3338
     HEAP32[$AsyncCtx2 + 12 >> 2] = $3; //@line 3340
     HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 3342
     HEAP32[$AsyncCtx2 + 20 >> 2] = $9; //@line 3344
     HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 3346
     HEAP32[$AsyncCtx2 + 28 >> 2] = $$073; //@line 3348
     HEAP32[$AsyncCtx2 + 32 >> 2] = $$070; //@line 3350
     HEAP32[$AsyncCtx2 + 36 >> 2] = $13; //@line 3352
     HEAP32[$AsyncCtx2 + 40 >> 2] = $9; //@line 3354
     sp = STACKTOP; //@line 3355
     STACKTOP = sp; //@line 3356
     return 0; //@line 3356
    } else if ((label | 0) == 26) {
     STACKTOP = sp; //@line 3359
     return $$0 | 0; //@line 3359
    }
   } else {
    $$06984 = 1; //@line 3362
    $$17481 = $$073; //@line 3362
    $$182 = $$070; //@line 3362
   }
   while (1) {
    $$09$i75 = 0; //@line 3365
    do {
     $62 = $9 + $$09$i75 | 0; //@line 3369
     HEAP8[$62 >> 0] = HEAP8[$62 >> 0] ^ HEAP8[$$182 + $$09$i75 >> 0]; //@line 3372
     $$09$i75 = $$09$i75 + 1 | 0; //@line 3373
    } while (($$09$i75 | 0) != ($12 | 0));
    $AsyncCtx = _emscripten_alloc_async_context(48, sp) | 0; //@line 3381
    $66 = _mbedtls_cipher_update($0, $9, $12, $9, $3) | 0; //@line 3382
    if (___async) {
     label = 21; //@line 3385
     break;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3388
    if ($66 | 0) {
     $$0 = $66; //@line 3391
     label = 26; //@line 3392
     break;
    }
    $79 = $$17481 - $12 | 0; //@line 3395
    $80 = $$182 + $12 | 0; //@line 3396
    $81 = $$06984 + 1 | 0; //@line 3397
    if ($81 >>> 0 < $43 >>> 0) {
     $$06984 = $81; //@line 3400
     $$17481 = $79; //@line 3400
     $$182 = $80; //@line 3400
    } else {
     $$1$lcssa = $80; //@line 3402
     $$174$lcssa = $79; //@line 3402
     break L24;
    }
   }
   if ((label | 0) == 21) {
    HEAP32[$AsyncCtx >> 2] = 673; //@line 3407
    HEAP32[$AsyncCtx + 4 >> 2] = $$17481; //@line 3409
    HEAP32[$AsyncCtx + 8 >> 2] = $12; //@line 3411
    HEAP32[$AsyncCtx + 12 >> 2] = $$182; //@line 3413
    HEAP32[$AsyncCtx + 16 >> 2] = $$06984; //@line 3415
    HEAP32[$AsyncCtx + 20 >> 2] = $43; //@line 3417
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 3419
    HEAP32[$AsyncCtx + 28 >> 2] = $13; //@line 3421
    HEAP32[$AsyncCtx + 32 >> 2] = $9; //@line 3423
    HEAP32[$AsyncCtx + 36 >> 2] = $0; //@line 3425
    HEAP32[$AsyncCtx + 40 >> 2] = $9; //@line 3427
    HEAP32[$AsyncCtx + 44 >> 2] = $3; //@line 3429
    sp = STACKTOP; //@line 3430
    STACKTOP = sp; //@line 3431
    return 0; //@line 3431
   } else if ((label | 0) == 26) {
    STACKTOP = sp; //@line 3434
    return $$0 | 0; //@line 3434
   }
  } else {
   $$1$lcssa = $$070; //@line 3437
   $$174$lcssa = $$073; //@line 3437
  }
 } while (0);
 if (!$$174$lcssa) {
  $$0 = 0; //@line 3442
  STACKTOP = sp; //@line 3443
  return $$0 | 0; //@line 3443
 }
 _memcpy((HEAP32[$13 >> 2] | 0) + ($9 + 16) | 0, $$1$lcssa | 0, $$174$lcssa | 0) | 0; //@line 3447
 HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + $$174$lcssa; //@line 3450
 $$0 = 0; //@line 3451
 STACKTOP = sp; //@line 3452
 return $$0 | 0; //@line 3452
}
function __ZN7LoRaMac11schedule_txEv__async_cb_473($0) {
 $0 = $0 | 0;
 var $12 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $4 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 33609
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33613
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33617
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33621
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 33625
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 33627
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 33629
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 33631
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 33633
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 33635
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 33637
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 33639
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 33641
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 33643
 if (HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) {
  $45 = HEAP8[$4 + 893 >> 0] | 0; //@line 33648
  $46 = HEAP8[HEAP32[$0 + 12 >> 2] >> 0] | 0; //@line 33649
  $48 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($4 + 4 | 0) | 0; //@line 33651
  _printf(12943, $8) | 0; //@line 33652
  _printf(13269, $12) | 0; //@line 33653
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(52) | 0; //@line 33654
  _putchar(10) | 0; //@line 33655
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 478; //@line 33658
   $49 = $ReallocAsyncCtx7 + 4 | 0; //@line 33659
   HEAP32[$49 >> 2] = $16; //@line 33660
   $50 = $ReallocAsyncCtx7 + 8 | 0; //@line 33661
   HEAP32[$50 >> 2] = $4; //@line 33662
   $51 = $ReallocAsyncCtx7 + 12 | 0; //@line 33663
   HEAP8[$51 >> 0] = $46; //@line 33664
   $52 = $ReallocAsyncCtx7 + 13 | 0; //@line 33665
   HEAP8[$52 >> 0] = $45; //@line 33666
   $53 = $ReallocAsyncCtx7 + 14 | 0; //@line 33667
   HEAP8[$53 >> 0] = $48; //@line 33668
   $54 = $ReallocAsyncCtx7 + 16 | 0; //@line 33669
   HEAP32[$54 >> 2] = $18; //@line 33670
   $55 = $ReallocAsyncCtx7 + 20 | 0; //@line 33671
   HEAP32[$55 >> 2] = $20; //@line 33672
   $56 = $ReallocAsyncCtx7 + 24 | 0; //@line 33673
   HEAP32[$56 >> 2] = $22; //@line 33674
   $57 = $ReallocAsyncCtx7 + 28 | 0; //@line 33675
   HEAP32[$57 >> 2] = $24; //@line 33676
   $58 = $ReallocAsyncCtx7 + 32 | 0; //@line 33677
   HEAP32[$58 >> 2] = $26; //@line 33678
   $59 = $ReallocAsyncCtx7 + 36 | 0; //@line 33679
   HEAP32[$59 >> 2] = $28; //@line 33680
   $60 = $ReallocAsyncCtx7 + 40 | 0; //@line 33681
   HEAP32[$60 >> 2] = $30; //@line 33682
   $61 = $ReallocAsyncCtx7 + 44 | 0; //@line 33683
   HEAP32[$61 >> 2] = $32; //@line 33684
   $62 = $ReallocAsyncCtx7 + 48 | 0; //@line 33685
   HEAP32[$62 >> 2] = $34; //@line 33686
   sp = STACKTOP; //@line 33687
   return;
  }
  ___async_unwind = 0; //@line 33690
  HEAP32[$ReallocAsyncCtx7 >> 2] = 478; //@line 33691
  $49 = $ReallocAsyncCtx7 + 4 | 0; //@line 33692
  HEAP32[$49 >> 2] = $16; //@line 33693
  $50 = $ReallocAsyncCtx7 + 8 | 0; //@line 33694
  HEAP32[$50 >> 2] = $4; //@line 33695
  $51 = $ReallocAsyncCtx7 + 12 | 0; //@line 33696
  HEAP8[$51 >> 0] = $46; //@line 33697
  $52 = $ReallocAsyncCtx7 + 13 | 0; //@line 33698
  HEAP8[$52 >> 0] = $45; //@line 33699
  $53 = $ReallocAsyncCtx7 + 14 | 0; //@line 33700
  HEAP8[$53 >> 0] = $48; //@line 33701
  $54 = $ReallocAsyncCtx7 + 16 | 0; //@line 33702
  HEAP32[$54 >> 2] = $18; //@line 33703
  $55 = $ReallocAsyncCtx7 + 20 | 0; //@line 33704
  HEAP32[$55 >> 2] = $20; //@line 33705
  $56 = $ReallocAsyncCtx7 + 24 | 0; //@line 33706
  HEAP32[$56 >> 2] = $22; //@line 33707
  $57 = $ReallocAsyncCtx7 + 28 | 0; //@line 33708
  HEAP32[$57 >> 2] = $24; //@line 33709
  $58 = $ReallocAsyncCtx7 + 32 | 0; //@line 33710
  HEAP32[$58 >> 2] = $26; //@line 33711
  $59 = $ReallocAsyncCtx7 + 36 | 0; //@line 33712
  HEAP32[$59 >> 2] = $28; //@line 33713
  $60 = $ReallocAsyncCtx7 + 40 | 0; //@line 33714
  HEAP32[$60 >> 2] = $30; //@line 33715
  $61 = $ReallocAsyncCtx7 + 44 | 0; //@line 33716
  HEAP32[$61 >> 2] = $32; //@line 33717
  $62 = $ReallocAsyncCtx7 + 48 | 0; //@line 33718
  HEAP32[$62 >> 2] = $34; //@line 33719
  sp = STACKTOP; //@line 33720
  return;
 }
 HEAP32[$4 + 972 >> 2] = (HEAP32[$4 + 1172 >> 2] | 0) + (HEAP32[$4 + 1120 >> 2] | 0); //@line 33729
 HEAP32[$4 + 976 >> 2] = (HEAP32[$4 + 1196 >> 2] | 0) + (HEAP32[$4 + 1124 >> 2] | 0); //@line 33736
 if (!(HEAP32[$22 >> 2] | 0)) {
  $70 = HEAP8[$24 >> 0] | 0; //@line 33740
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 33741
  __ZN7LoRaMac21send_frame_on_channelEh($4, $70) | 0; //@line 33742
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 479; //@line 33745
   $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 33746
   HEAP32[$71 >> 2] = $18; //@line 33747
   $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 33748
   HEAP32[$72 >> 2] = $20; //@line 33749
   sp = STACKTOP; //@line 33750
   return;
  }
  ___async_unwind = 0; //@line 33753
  HEAP32[$ReallocAsyncCtx10 >> 2] = 479; //@line 33754
  $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 33755
  HEAP32[$71 >> 2] = $18; //@line 33756
  $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 33757
  HEAP32[$72 >> 2] = $20; //@line 33758
  sp = STACKTOP; //@line 33759
  return;
 } else {
  $73 = $4 + 968 | 0; //@line 33762
  HEAP32[$73 >> 2] = HEAP32[$73 >> 2] | 16; //@line 33765
  _printf(13229, $26) | 0; //@line 33766
  HEAP32[$30 >> 2] = HEAP32[$22 >> 2]; //@line 33768
  _printf(13293, $30) | 0; //@line 33769
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 33770
  _putchar(10) | 0; //@line 33771
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 480; //@line 33774
   $77 = $ReallocAsyncCtx6 + 4 | 0; //@line 33775
   HEAP32[$77 >> 2] = $34; //@line 33776
   $78 = $ReallocAsyncCtx6 + 8 | 0; //@line 33777
   HEAP32[$78 >> 2] = $4; //@line 33778
   $79 = $ReallocAsyncCtx6 + 12 | 0; //@line 33779
   HEAP32[$79 >> 2] = $22; //@line 33780
   $80 = $ReallocAsyncCtx6 + 16 | 0; //@line 33781
   HEAP32[$80 >> 2] = $18; //@line 33782
   $81 = $ReallocAsyncCtx6 + 20 | 0; //@line 33783
   HEAP32[$81 >> 2] = $20; //@line 33784
   sp = STACKTOP; //@line 33785
   return;
  }
  ___async_unwind = 0; //@line 33788
  HEAP32[$ReallocAsyncCtx6 >> 2] = 480; //@line 33789
  $77 = $ReallocAsyncCtx6 + 4 | 0; //@line 33790
  HEAP32[$77 >> 2] = $34; //@line 33791
  $78 = $ReallocAsyncCtx6 + 8 | 0; //@line 33792
  HEAP32[$78 >> 2] = $4; //@line 33793
  $79 = $ReallocAsyncCtx6 + 12 | 0; //@line 33794
  HEAP32[$79 >> 2] = $22; //@line 33795
  $80 = $ReallocAsyncCtx6 + 16 | 0; //@line 33796
  HEAP32[$80 >> 2] = $18; //@line 33797
  $81 = $ReallocAsyncCtx6 + 20 | 0; //@line 33798
  HEAP32[$81 >> 2] = $20; //@line 33799
  sp = STACKTOP; //@line 33800
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_427($0) {
 $0 = $0 | 0;
 var $12 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 24145
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24147
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24149
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24151
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24153
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24157
 HEAP32[(__ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0) >> 2] = 4; //@line 24162
 $18 = HEAP8[$2 >> 0] | 16; //@line 24164
 HEAP8[$2 >> 0] = $18; //@line 24165
 $19 = $18 & -33; //@line 24166
 HEAP8[$2 >> 0] = $19; //@line 24167
 do {
  if (!($19 & 2)) {
   $50 = $19; //@line 24172
  } else {
   $22 = $19 & -3; //@line 24174
   HEAP8[$2 >> 0] = $22; //@line 24175
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _printf(12943, $8) | 0; //@line 24180
    _printf(12970, $12) | 0; //@line 24181
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 24182
    _putchar(10) | 0; //@line 24183
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 459; //@line 24186
     $26 = $ReallocAsyncCtx6 + 4 | 0; //@line 24187
     HEAP32[$26 >> 2] = $2; //@line 24188
     $27 = $ReallocAsyncCtx6 + 8 | 0; //@line 24189
     HEAP32[$27 >> 2] = $4; //@line 24190
     $28 = $ReallocAsyncCtx6 + 12 | 0; //@line 24191
     HEAP32[$28 >> 2] = $6; //@line 24192
     $29 = $ReallocAsyncCtx6 + 16 | 0; //@line 24193
     HEAP32[$29 >> 2] = $6; //@line 24194
     sp = STACKTOP; //@line 24195
     return;
    }
    ___async_unwind = 0; //@line 24198
    HEAP32[$ReallocAsyncCtx6 >> 2] = 459; //@line 24199
    $26 = $ReallocAsyncCtx6 + 4 | 0; //@line 24200
    HEAP32[$26 >> 2] = $2; //@line 24201
    $27 = $ReallocAsyncCtx6 + 8 | 0; //@line 24202
    HEAP32[$27 >> 2] = $4; //@line 24203
    $28 = $ReallocAsyncCtx6 + 12 | 0; //@line 24204
    HEAP32[$28 >> 2] = $6; //@line 24205
    $29 = $ReallocAsyncCtx6 + 16 | 0; //@line 24206
    HEAP32[$29 >> 2] = $6; //@line 24207
    sp = STACKTOP; //@line 24208
    return;
   }
   if ($22 & 4) {
    $48 = $22 & -5; //@line 24214
    HEAP8[$2 >> 0] = $48; //@line 24215
    $50 = $48; //@line 24216
    break;
   }
   $33 = HEAP32[$4 + 1324 >> 2] | 0; //@line 24220
   $34 = $33 + 16 | 0; //@line 24221
   $36 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 24223
   $37 = $33 + 28 | 0; //@line 24224
   $38 = HEAP32[$37 >> 2] | 0; //@line 24225
   if (!$38) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 24228
    _mbed_assert_internal(14997, 15002, 1102); //@line 24229
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 462; //@line 24232
     $40 = $ReallocAsyncCtx15 + 4 | 0; //@line 24233
     HEAP32[$40 >> 2] = $37; //@line 24234
     $41 = $ReallocAsyncCtx15 + 8 | 0; //@line 24235
     HEAP32[$41 >> 2] = $34; //@line 24236
     $42 = $ReallocAsyncCtx15 + 12 | 0; //@line 24237
     HEAP32[$42 >> 2] = $36; //@line 24238
     $43 = $ReallocAsyncCtx15 + 16 | 0; //@line 24239
     HEAP32[$43 >> 2] = $2; //@line 24240
     $44 = $ReallocAsyncCtx15 + 20 | 0; //@line 24241
     HEAP32[$44 >> 2] = $4; //@line 24242
     sp = STACKTOP; //@line 24243
     return;
    }
    ___async_unwind = 0; //@line 24246
    HEAP32[$ReallocAsyncCtx15 >> 2] = 462; //@line 24247
    $40 = $ReallocAsyncCtx15 + 4 | 0; //@line 24248
    HEAP32[$40 >> 2] = $37; //@line 24249
    $41 = $ReallocAsyncCtx15 + 8 | 0; //@line 24250
    HEAP32[$41 >> 2] = $34; //@line 24251
    $42 = $ReallocAsyncCtx15 + 12 | 0; //@line 24252
    HEAP32[$42 >> 2] = $36; //@line 24253
    $43 = $ReallocAsyncCtx15 + 16 | 0; //@line 24254
    HEAP32[$43 >> 2] = $2; //@line 24255
    $44 = $ReallocAsyncCtx15 + 20 | 0; //@line 24256
    HEAP32[$44 >> 2] = $4; //@line 24257
    sp = STACKTOP; //@line 24258
    return;
   } else {
    $45 = HEAP32[$38 >> 2] | 0; //@line 24261
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 24262
    FUNCTION_TABLE_vii[$45 & 31]($34, $36); //@line 24263
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 463; //@line 24266
     $46 = $ReallocAsyncCtx4 + 4 | 0; //@line 24267
     HEAP32[$46 >> 2] = $2; //@line 24268
     $47 = $ReallocAsyncCtx4 + 8 | 0; //@line 24269
     HEAP32[$47 >> 2] = $4; //@line 24270
     sp = STACKTOP; //@line 24271
     return;
    }
    ___async_unwind = 0; //@line 24274
    HEAP32[$ReallocAsyncCtx4 >> 2] = 463; //@line 24275
    $46 = $ReallocAsyncCtx4 + 4 | 0; //@line 24276
    HEAP32[$46 >> 2] = $2; //@line 24277
    $47 = $ReallocAsyncCtx4 + 8 | 0; //@line 24278
    HEAP32[$47 >> 2] = $4; //@line 24279
    sp = STACKTOP; //@line 24280
    return;
   }
  }
 } while (0);
 if (!($50 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $50 & -17; //@line 24291
 $54 = HEAP32[$4 + 1324 >> 2] | 0; //@line 24293
 $55 = $54 + 48 | 0; //@line 24294
 $57 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 24296
 $58 = $54 + 60 | 0; //@line 24297
 $59 = HEAP32[$58 >> 2] | 0; //@line 24298
 if (!$59) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 24301
  _mbed_assert_internal(14997, 15002, 1102); //@line 24302
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 464; //@line 24305
   $61 = $ReallocAsyncCtx14 + 4 | 0; //@line 24306
   HEAP32[$61 >> 2] = $58; //@line 24307
   $62 = $ReallocAsyncCtx14 + 8 | 0; //@line 24308
   HEAP32[$62 >> 2] = $55; //@line 24309
   $63 = $ReallocAsyncCtx14 + 12 | 0; //@line 24310
   HEAP32[$63 >> 2] = $57; //@line 24311
   sp = STACKTOP; //@line 24312
   return;
  }
  ___async_unwind = 0; //@line 24315
  HEAP32[$ReallocAsyncCtx14 >> 2] = 464; //@line 24316
  $61 = $ReallocAsyncCtx14 + 4 | 0; //@line 24317
  HEAP32[$61 >> 2] = $58; //@line 24318
  $62 = $ReallocAsyncCtx14 + 8 | 0; //@line 24319
  HEAP32[$62 >> 2] = $55; //@line 24320
  $63 = $ReallocAsyncCtx14 + 12 | 0; //@line 24321
  HEAP32[$63 >> 2] = $57; //@line 24322
  sp = STACKTOP; //@line 24323
  return;
 } else {
  $64 = HEAP32[$59 >> 2] | 0; //@line 24326
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 24327
  FUNCTION_TABLE_vii[$64 & 31]($55, $57); //@line 24328
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 465; //@line 24331
   sp = STACKTOP; //@line 24332
   return;
  }
  ___async_unwind = 0; //@line 24335
  HEAP32[$ReallocAsyncCtx5 >> 2] = 465; //@line 24336
  sp = STACKTOP; //@line 24337
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i = 0, $$pre$i = 0, $11 = 0, $13 = 0, $22 = 0, $25 = 0, $35 = 0, $36 = 0, $37 = 0, $41 = 0, $43 = 0, $46 = 0, $53 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $64 = 0, $67 = 0, $7 = 0, $71 = 0, $74 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 12744
 STACKTOP = STACKTOP + 48 | 0; //@line 12745
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 12745
 $6 = sp + 16 | 0; //@line 12746
 $7 = sp; //@line 12747
 $8 = $1 + 12 | 0; //@line 12748
 $9 = HEAP32[$8 >> 2] | 0; //@line 12749
 do {
  if (!$9) {
   $11 = $7 + 12 | 0; //@line 12753
   HEAP32[$11 >> 2] = 0; //@line 12754
   $36 = 0; //@line 12755
   $53 = $11; //@line 12755
  } else {
   $13 = HEAP32[$9 + 4 >> 2] | 0; //@line 12758
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 12759
   FUNCTION_TABLE_vii[$13 & 31]($7, $1); //@line 12760
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 396; //@line 12763
    HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 12765
    HEAP32[$AsyncCtx + 8 >> 2] = $7; //@line 12767
    HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 12769
    HEAP16[$AsyncCtx + 16 >> 1] = $3; //@line 12771
    HEAP16[$AsyncCtx + 18 >> 1] = $4; //@line 12773
    HEAP8[$AsyncCtx + 20 >> 0] = $5; //@line 12775
    HEAP32[$AsyncCtx + 24 >> 2] = $0; //@line 12777
    HEAP32[$AsyncCtx + 28 >> 2] = $8; //@line 12779
    sp = STACKTOP; //@line 12780
    STACKTOP = sp; //@line 12781
    return 0; //@line 12781
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 12783
   $$pre$i = HEAP32[$8 >> 2] | 0; //@line 12784
   $22 = $7 + 12 | 0; //@line 12785
   HEAP32[$22 >> 2] = $$pre$i; //@line 12786
   if (!$$pre$i) {
    $36 = 0; //@line 12789
    $53 = $22; //@line 12789
   } else {
    $25 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 12793
    $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 12794
    FUNCTION_TABLE_vii[$25 & 31]($6, $7); //@line 12795
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 397; //@line 12798
     HEAP32[$AsyncCtx2 + 4 >> 2] = $22; //@line 12800
     HEAP32[$AsyncCtx2 + 8 >> 2] = $6; //@line 12802
     HEAP32[$AsyncCtx2 + 12 >> 2] = $7; //@line 12804
     HEAP32[$AsyncCtx2 + 16 >> 2] = $22; //@line 12806
     HEAP32[$AsyncCtx2 + 20 >> 2] = $2; //@line 12808
     HEAP16[$AsyncCtx2 + 24 >> 1] = $3; //@line 12810
     HEAP16[$AsyncCtx2 + 26 >> 1] = $4; //@line 12812
     HEAP8[$AsyncCtx2 + 28 >> 0] = $5; //@line 12814
     HEAP32[$AsyncCtx2 + 32 >> 2] = $0; //@line 12816
     sp = STACKTOP; //@line 12817
     STACKTOP = sp; //@line 12818
     return 0; //@line 12818
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 12820
     $36 = HEAP32[$22 >> 2] | 0; //@line 12822
     $53 = $22; //@line 12822
     break;
    }
   }
  }
 } while (0);
 $35 = $6 + 12 | 0; //@line 12828
 HEAP32[$35 >> 2] = $36; //@line 12829
 $37 = $6 + 16 | 0; //@line 12830
 HEAP32[$37 >> 2] = $2; //@line 12831
 HEAP16[$6 + 20 >> 1] = $3; //@line 12833
 HEAP16[$6 + 22 >> 1] = $4; //@line 12835
 HEAP8[$6 + 24 >> 0] = $5; //@line 12837
 $41 = _equeue_alloc($0, 28) | 0; //@line 12838
 do {
  if (!$41) {
   $$0$i = 0; //@line 12842
  } else {
   $43 = HEAP32[$35 >> 2] | 0; //@line 12844
   do {
    if (!$43) {
     $57 = 0; //@line 12848
    } else {
     $46 = HEAP32[$43 + 4 >> 2] | 0; //@line 12851
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 12852
     FUNCTION_TABLE_vii[$46 & 31]($41, $6); //@line 12853
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 398; //@line 12856
      HEAP32[$AsyncCtx5 + 4 >> 2] = $35; //@line 12858
      HEAP32[$AsyncCtx5 + 8 >> 2] = $41; //@line 12860
      HEAP32[$AsyncCtx5 + 12 >> 2] = $37; //@line 12862
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 12864
      HEAP32[$AsyncCtx5 + 20 >> 2] = $35; //@line 12866
      HEAP32[$AsyncCtx5 + 24 >> 2] = $53; //@line 12868
      HEAP32[$AsyncCtx5 + 28 >> 2] = $6; //@line 12870
      HEAP32[$AsyncCtx5 + 32 >> 2] = $7; //@line 12872
      sp = STACKTOP; //@line 12873
      STACKTOP = sp; //@line 12874
      return 0; //@line 12874
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 12876
      $57 = HEAP32[$35 >> 2] | 0; //@line 12878
      break;
     }
    }
   } while (0);
   HEAP32[$41 + 12 >> 2] = $57; //@line 12884
   $58 = $41 + 16 | 0; //@line 12885
   HEAP32[$58 >> 2] = HEAP32[$37 >> 2]; //@line 12886
   HEAP32[$58 + 4 >> 2] = HEAP32[$37 + 4 >> 2]; //@line 12886
   HEAP8[$58 + 8 >> 0] = HEAP8[$37 + 8 >> 0] | 0; //@line 12886
   _equeue_event_dtor($41, 399); //@line 12887
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12888
   $59 = _equeue_post($0, 400, $41) | 0; //@line 12889
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 401; //@line 12892
    HEAP32[$AsyncCtx15 + 4 >> 2] = $35; //@line 12894
    HEAP32[$AsyncCtx15 + 8 >> 2] = $53; //@line 12896
    HEAP32[$AsyncCtx15 + 12 >> 2] = $6; //@line 12898
    HEAP32[$AsyncCtx15 + 16 >> 2] = $7; //@line 12900
    sp = STACKTOP; //@line 12901
    STACKTOP = sp; //@line 12902
    return 0; //@line 12902
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 12904
    $$0$i = $59; //@line 12905
    break;
   }
  }
 } while (0);
 $64 = HEAP32[$35 >> 2] | 0; //@line 12910
 do {
  if ($64 | 0) {
   $67 = HEAP32[$64 + 8 >> 2] | 0; //@line 12915
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 12916
   FUNCTION_TABLE_vi[$67 & 1023]($6); //@line 12917
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 402; //@line 12920
    HEAP32[$AsyncCtx8 + 4 >> 2] = $53; //@line 12922
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 12924
    HEAP32[$AsyncCtx8 + 12 >> 2] = $7; //@line 12926
    sp = STACKTOP; //@line 12927
    STACKTOP = sp; //@line 12928
    return 0; //@line 12928
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 12930
    break;
   }
  }
 } while (0);
 $71 = HEAP32[$53 >> 2] | 0; //@line 12935
 if (!$71) {
  STACKTOP = sp; //@line 12938
  return $$0$i | 0; //@line 12938
 }
 $74 = HEAP32[$71 + 8 >> 2] | 0; //@line 12941
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12942
 FUNCTION_TABLE_vi[$74 & 1023]($7); //@line 12943
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 403; //@line 12946
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 12948
  sp = STACKTOP; //@line 12949
  STACKTOP = sp; //@line 12950
  return 0; //@line 12950
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 12952
 STACKTOP = sp; //@line 12953
 return $$0$i | 0; //@line 12953
}
function _mbedtls_cipher_cmac_update__async_cb_30($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$09$i75 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $66 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20342
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20344
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20346
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20348
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20350
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20352
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20354
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20356
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20358
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20360
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20362
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 20365
  $66 = ___async_retval; //@line 20366
  HEAP32[$66 >> 2] = $$0; //@line 20367
  return;
 }
 $22 = $2 - (HEAP32[$6 >> 2] | 0) | 0; //@line 20371
 $23 = $18 + $22 | 0; //@line 20372
 $24 = $16 - $22 | 0; //@line 20373
 HEAP32[$6 >> 2] = 0; //@line 20374
 $27 = (($2 + -1 + $24 | 0) >>> 0) / ($2 >>> 0) | 0; //@line 20377
 if ($27 >>> 0 <= 1) {
  if (!$24) {
   $$0 = 0; //@line 20382
   $66 = ___async_retval; //@line 20383
   HEAP32[$66 >> 2] = $$0; //@line 20384
   return;
  }
  _memcpy((HEAP32[$6 >> 2] | 0) + ($8 + 16) | 0, $23 | 0, $24 | 0) | 0; //@line 20389
  HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + $24; //@line 20392
  $$0 = 0; //@line 20393
  $66 = ___async_retval; //@line 20394
  HEAP32[$66 >> 2] = $$0; //@line 20395
  return;
 }
 if (!$2) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 20400
  $30 = _mbedtls_cipher_update($10, $12, 0, $12, $14) | 0; //@line 20401
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 672; //@line 20404
   $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 20405
   HEAP32[$31 >> 2] = 1; //@line 20406
   $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 20407
   HEAP32[$32 >> 2] = $27; //@line 20408
   $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 20409
   HEAP32[$33 >> 2] = $4; //@line 20410
   $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 20411
   HEAP32[$34 >> 2] = $10; //@line 20412
   $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 20413
   HEAP32[$35 >> 2] = $12; //@line 20414
   $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 20415
   HEAP32[$36 >> 2] = $14; //@line 20416
   $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 20417
   HEAP32[$37 >> 2] = $24; //@line 20418
   $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 20419
   HEAP32[$38 >> 2] = $23; //@line 20420
   $39 = $ReallocAsyncCtx2 + 36 | 0; //@line 20421
   HEAP32[$39 >> 2] = $6; //@line 20422
   $40 = $ReallocAsyncCtx2 + 40 | 0; //@line 20423
   HEAP32[$40 >> 2] = $8; //@line 20424
   sp = STACKTOP; //@line 20425
   return;
  }
  HEAP32[___async_retval >> 2] = $30; //@line 20429
  ___async_unwind = 0; //@line 20430
  HEAP32[$ReallocAsyncCtx2 >> 2] = 672; //@line 20431
  $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 20432
  HEAP32[$31 >> 2] = 1; //@line 20433
  $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 20434
  HEAP32[$32 >> 2] = $27; //@line 20435
  $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 20436
  HEAP32[$33 >> 2] = $4; //@line 20437
  $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 20438
  HEAP32[$34 >> 2] = $10; //@line 20439
  $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 20440
  HEAP32[$35 >> 2] = $12; //@line 20441
  $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 20442
  HEAP32[$36 >> 2] = $14; //@line 20443
  $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 20444
  HEAP32[$37 >> 2] = $24; //@line 20445
  $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 20446
  HEAP32[$38 >> 2] = $23; //@line 20447
  $39 = $ReallocAsyncCtx2 + 36 | 0; //@line 20448
  HEAP32[$39 >> 2] = $6; //@line 20449
  $40 = $ReallocAsyncCtx2 + 40 | 0; //@line 20450
  HEAP32[$40 >> 2] = $8; //@line 20451
  sp = STACKTOP; //@line 20452
  return;
 }
 $$09$i75 = 0; //@line 20455
 do {
  $44 = $8 + $$09$i75 | 0; //@line 20459
  HEAP8[$44 >> 0] = HEAP8[$44 >> 0] ^ HEAP8[$23 + $$09$i75 >> 0]; //@line 20462
  $$09$i75 = $$09$i75 + 1 | 0; //@line 20463
 } while (($$09$i75 | 0) != ($2 | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 20471
 $48 = _mbedtls_cipher_update($10, $12, $2, $12, $14) | 0; //@line 20472
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 673; //@line 20475
  $49 = $ReallocAsyncCtx + 4 | 0; //@line 20476
  HEAP32[$49 >> 2] = $24; //@line 20477
  $50 = $ReallocAsyncCtx + 8 | 0; //@line 20478
  HEAP32[$50 >> 2] = $2; //@line 20479
  $51 = $ReallocAsyncCtx + 12 | 0; //@line 20480
  HEAP32[$51 >> 2] = $23; //@line 20481
  $52 = $ReallocAsyncCtx + 16 | 0; //@line 20482
  HEAP32[$52 >> 2] = 1; //@line 20483
  $53 = $ReallocAsyncCtx + 20 | 0; //@line 20484
  HEAP32[$53 >> 2] = $27; //@line 20485
  $54 = $ReallocAsyncCtx + 24 | 0; //@line 20486
  HEAP32[$54 >> 2] = $4; //@line 20487
  $55 = $ReallocAsyncCtx + 28 | 0; //@line 20488
  HEAP32[$55 >> 2] = $6; //@line 20489
  $56 = $ReallocAsyncCtx + 32 | 0; //@line 20490
  HEAP32[$56 >> 2] = $8; //@line 20491
  $57 = $ReallocAsyncCtx + 36 | 0; //@line 20492
  HEAP32[$57 >> 2] = $10; //@line 20493
  $58 = $ReallocAsyncCtx + 40 | 0; //@line 20494
  HEAP32[$58 >> 2] = $12; //@line 20495
  $59 = $ReallocAsyncCtx + 44 | 0; //@line 20496
  HEAP32[$59 >> 2] = $14; //@line 20497
  sp = STACKTOP; //@line 20498
  return;
 }
 HEAP32[___async_retval >> 2] = $48; //@line 20502
 ___async_unwind = 0; //@line 20503
 HEAP32[$ReallocAsyncCtx >> 2] = 673; //@line 20504
 $49 = $ReallocAsyncCtx + 4 | 0; //@line 20505
 HEAP32[$49 >> 2] = $24; //@line 20506
 $50 = $ReallocAsyncCtx + 8 | 0; //@line 20507
 HEAP32[$50 >> 2] = $2; //@line 20508
 $51 = $ReallocAsyncCtx + 12 | 0; //@line 20509
 HEAP32[$51 >> 2] = $23; //@line 20510
 $52 = $ReallocAsyncCtx + 16 | 0; //@line 20511
 HEAP32[$52 >> 2] = 1; //@line 20512
 $53 = $ReallocAsyncCtx + 20 | 0; //@line 20513
 HEAP32[$53 >> 2] = $27; //@line 20514
 $54 = $ReallocAsyncCtx + 24 | 0; //@line 20515
 HEAP32[$54 >> 2] = $4; //@line 20516
 $55 = $ReallocAsyncCtx + 28 | 0; //@line 20517
 HEAP32[$55 >> 2] = $6; //@line 20518
 $56 = $ReallocAsyncCtx + 32 | 0; //@line 20519
 HEAP32[$56 >> 2] = $8; //@line 20520
 $57 = $ReallocAsyncCtx + 36 | 0; //@line 20521
 HEAP32[$57 >> 2] = $10; //@line 20522
 $58 = $ReallocAsyncCtx + 40 | 0; //@line 20523
 HEAP32[$58 >> 2] = $12; //@line 20524
 $59 = $ReallocAsyncCtx + 44 | 0; //@line 20525
 HEAP32[$59 >> 2] = $14; //@line 20526
 sp = STACKTOP; //@line 20527
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $13 = 0, $17 = 0, $21 = 0, $23 = 0, $27 = 0, $3 = 0, $31 = 0, $33 = 0, $37 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx3 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx46 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 2438
 HEAP32[$0 >> 2] = 560; //@line 2439
 $1 = $0 + 1240 | 0; //@line 2440
 HEAP32[$1 >> 2] = 10108; //@line 2441
 __ZN4mbed6Ticker6detachEv($1); //@line 2442
 $3 = HEAP32[$0 + 1292 >> 2] | 0; //@line 2444
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 2450
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2451
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 1280 | 0); //@line 2452
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 109; //@line 2455
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2457
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 2459
    sp = STACKTOP; //@line 2460
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2463
    break;
   }
  }
 } while (0);
 $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2468
 __ZN4mbed10TimerEventD2Ev($1); //@line 2469
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 110; //@line 2472
  HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 2474
  sp = STACKTOP; //@line 2475
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 2478
 $11 = $0 + 1176 | 0; //@line 2479
 HEAP32[$11 >> 2] = 10108; //@line 2480
 __ZN4mbed6Ticker6detachEv($11); //@line 2481
 $13 = HEAP32[$0 + 1228 >> 2] | 0; //@line 2483
 do {
  if ($13 | 0) {
   $17 = HEAP32[$13 + 8 >> 2] | 0; //@line 2489
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2490
   FUNCTION_TABLE_vi[$17 & 1023]($0 + 1216 | 0); //@line 2491
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 111; //@line 2494
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 2496
    HEAP32[$AsyncCtx3 + 8 >> 2] = $11; //@line 2498
    sp = STACKTOP; //@line 2499
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2502
    break;
   }
  }
 } while (0);
 $AsyncCtx20 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2507
 __ZN4mbed10TimerEventD2Ev($11); //@line 2508
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 112; //@line 2511
  HEAP32[$AsyncCtx20 + 4 >> 2] = $0; //@line 2513
  sp = STACKTOP; //@line 2514
  return;
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 2517
 $21 = $0 + 1112 | 0; //@line 2518
 HEAP32[$21 >> 2] = 10108; //@line 2519
 __ZN4mbed6Ticker6detachEv($21); //@line 2520
 $23 = HEAP32[$0 + 1164 >> 2] | 0; //@line 2522
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 2528
   $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2529
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 1152 | 0); //@line 2530
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 113; //@line 2533
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 2535
    HEAP32[$AsyncCtx7 + 8 >> 2] = $21; //@line 2537
    sp = STACKTOP; //@line 2538
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 2541
    break;
   }
  }
 } while (0);
 $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2546
 __ZN4mbed10TimerEventD2Ev($21); //@line 2547
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 114; //@line 2550
  HEAP32[$AsyncCtx17 + 4 >> 2] = $0; //@line 2552
  sp = STACKTOP; //@line 2553
  return;
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 2556
 $31 = $0 + 1048 | 0; //@line 2557
 HEAP32[$31 >> 2] = 10108; //@line 2558
 __ZN4mbed6Ticker6detachEv($31); //@line 2559
 $33 = HEAP32[$0 + 1100 >> 2] | 0; //@line 2561
 do {
  if ($33 | 0) {
   $37 = HEAP32[$33 + 8 >> 2] | 0; //@line 2567
   $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2568
   FUNCTION_TABLE_vi[$37 & 1023]($0 + 1088 | 0); //@line 2569
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 115; //@line 2572
    HEAP32[$AsyncCtx11 + 4 >> 2] = $31; //@line 2574
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 2576
    sp = STACKTOP; //@line 2577
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 2580
    break;
   }
  }
 } while (0);
 $AsyncCtx14 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2585
 __ZN4mbed10TimerEventD2Ev($31); //@line 2586
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 116; //@line 2589
  HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 2591
  sp = STACKTOP; //@line 2592
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 2595
 $AsyncCtx46 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2597
 __ZN4mbed11InterruptInD2Ev($0 + 412 | 0); //@line 2598
 if (___async) {
  HEAP32[$AsyncCtx46 >> 2] = 117; //@line 2601
  HEAP32[$AsyncCtx46 + 4 >> 2] = $0; //@line 2603
  sp = STACKTOP; //@line 2604
  return;
 }
 _emscripten_free_async_context($AsyncCtx46 | 0); //@line 2607
 $AsyncCtx42 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2609
 __ZN4mbed11InterruptInD2Ev($0 + 340 | 0); //@line 2610
 if (___async) {
  HEAP32[$AsyncCtx42 >> 2] = 118; //@line 2613
  HEAP32[$AsyncCtx42 + 4 >> 2] = $0; //@line 2615
  sp = STACKTOP; //@line 2616
  return;
 }
 _emscripten_free_async_context($AsyncCtx42 | 0); //@line 2619
 $AsyncCtx38 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2621
 __ZN4mbed11InterruptInD2Ev($0 + 268 | 0); //@line 2622
 if (___async) {
  HEAP32[$AsyncCtx38 >> 2] = 119; //@line 2625
  HEAP32[$AsyncCtx38 + 4 >> 2] = $0; //@line 2627
  sp = STACKTOP; //@line 2628
  return;
 }
 _emscripten_free_async_context($AsyncCtx38 | 0); //@line 2631
 $AsyncCtx34 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2633
 __ZN4mbed11InterruptInD2Ev($0 + 196 | 0); //@line 2634
 if (___async) {
  HEAP32[$AsyncCtx34 >> 2] = 120; //@line 2637
  HEAP32[$AsyncCtx34 + 4 >> 2] = $0; //@line 2639
  sp = STACKTOP; //@line 2640
  return;
 }
 _emscripten_free_async_context($AsyncCtx34 | 0); //@line 2643
 $AsyncCtx30 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2645
 __ZN4mbed11InterruptInD2Ev($0 + 124 | 0); //@line 2646
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 121; //@line 2649
  HEAP32[$AsyncCtx30 + 4 >> 2] = $0; //@line 2651
  sp = STACKTOP; //@line 2652
  return;
 }
 _emscripten_free_async_context($AsyncCtx30 | 0); //@line 2655
 $AsyncCtx26 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2657
 __ZN4mbed11InterruptInD2Ev($0 + 52 | 0); //@line 2658
 if (___async) {
  HEAP32[$AsyncCtx26 >> 2] = 122; //@line 2661
  sp = STACKTOP; //@line 2662
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx26 | 0); //@line 2665
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_428($0) {
 $0 = $0 | 0;
 var $$pre16 = 0, $12 = 0, $17 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $45 = 0, $49 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 24347
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24349
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24351
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24353
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24355
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24359
 $$pre16 = HEAP8[$2 >> 0] | 0; //@line 24362
 do {
  if (!($$pre16 & 2)) {
   $45 = $$pre16; //@line 24367
  } else {
   $17 = $$pre16 & -3; //@line 24369
   HEAP8[$2 >> 0] = $17; //@line 24370
   if ((HEAP32[$4 + 360 >> 2] | 0) == 2) {
    _printf(12943, $8) | 0; //@line 24375
    _printf(12970, $12) | 0; //@line 24376
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 24377
    _putchar(10) | 0; //@line 24378
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 459; //@line 24381
     $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 24382
     HEAP32[$21 >> 2] = $2; //@line 24383
     $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 24384
     HEAP32[$22 >> 2] = $4; //@line 24385
     $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 24386
     HEAP32[$23 >> 2] = $6; //@line 24387
     $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 24388
     HEAP32[$24 >> 2] = $6; //@line 24389
     sp = STACKTOP; //@line 24390
     return;
    }
    ___async_unwind = 0; //@line 24393
    HEAP32[$ReallocAsyncCtx6 >> 2] = 459; //@line 24394
    $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 24395
    HEAP32[$21 >> 2] = $2; //@line 24396
    $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 24397
    HEAP32[$22 >> 2] = $4; //@line 24398
    $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 24399
    HEAP32[$23 >> 2] = $6; //@line 24400
    $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 24401
    HEAP32[$24 >> 2] = $6; //@line 24402
    sp = STACKTOP; //@line 24403
    return;
   }
   if ($17 & 4) {
    $43 = $17 & -5; //@line 24409
    HEAP8[$2 >> 0] = $43; //@line 24410
    $45 = $43; //@line 24411
    break;
   }
   $28 = HEAP32[$4 + 1324 >> 2] | 0; //@line 24415
   $29 = $28 + 16 | 0; //@line 24416
   $31 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 24418
   $32 = $28 + 28 | 0; //@line 24419
   $33 = HEAP32[$32 >> 2] | 0; //@line 24420
   if (!$33) {
    $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 24423
    _mbed_assert_internal(14997, 15002, 1102); //@line 24424
    if (___async) {
     HEAP32[$ReallocAsyncCtx15 >> 2] = 462; //@line 24427
     $35 = $ReallocAsyncCtx15 + 4 | 0; //@line 24428
     HEAP32[$35 >> 2] = $32; //@line 24429
     $36 = $ReallocAsyncCtx15 + 8 | 0; //@line 24430
     HEAP32[$36 >> 2] = $29; //@line 24431
     $37 = $ReallocAsyncCtx15 + 12 | 0; //@line 24432
     HEAP32[$37 >> 2] = $31; //@line 24433
     $38 = $ReallocAsyncCtx15 + 16 | 0; //@line 24434
     HEAP32[$38 >> 2] = $2; //@line 24435
     $39 = $ReallocAsyncCtx15 + 20 | 0; //@line 24436
     HEAP32[$39 >> 2] = $4; //@line 24437
     sp = STACKTOP; //@line 24438
     return;
    }
    ___async_unwind = 0; //@line 24441
    HEAP32[$ReallocAsyncCtx15 >> 2] = 462; //@line 24442
    $35 = $ReallocAsyncCtx15 + 4 | 0; //@line 24443
    HEAP32[$35 >> 2] = $32; //@line 24444
    $36 = $ReallocAsyncCtx15 + 8 | 0; //@line 24445
    HEAP32[$36 >> 2] = $29; //@line 24446
    $37 = $ReallocAsyncCtx15 + 12 | 0; //@line 24447
    HEAP32[$37 >> 2] = $31; //@line 24448
    $38 = $ReallocAsyncCtx15 + 16 | 0; //@line 24449
    HEAP32[$38 >> 2] = $2; //@line 24450
    $39 = $ReallocAsyncCtx15 + 20 | 0; //@line 24451
    HEAP32[$39 >> 2] = $4; //@line 24452
    sp = STACKTOP; //@line 24453
    return;
   } else {
    $40 = HEAP32[$33 >> 2] | 0; //@line 24456
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 24457
    FUNCTION_TABLE_vii[$40 & 31]($29, $31); //@line 24458
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 463; //@line 24461
     $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 24462
     HEAP32[$41 >> 2] = $2; //@line 24463
     $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 24464
     HEAP32[$42 >> 2] = $4; //@line 24465
     sp = STACKTOP; //@line 24466
     return;
    }
    ___async_unwind = 0; //@line 24469
    HEAP32[$ReallocAsyncCtx4 >> 2] = 463; //@line 24470
    $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 24471
    HEAP32[$41 >> 2] = $2; //@line 24472
    $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 24473
    HEAP32[$42 >> 2] = $4; //@line 24474
    sp = STACKTOP; //@line 24475
    return;
   }
  }
 } while (0);
 if (!($45 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $45 & -17; //@line 24486
 $49 = HEAP32[$4 + 1324 >> 2] | 0; //@line 24488
 $50 = $49 + 48 | 0; //@line 24489
 $52 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 24491
 $53 = $49 + 60 | 0; //@line 24492
 $54 = HEAP32[$53 >> 2] | 0; //@line 24493
 if (!$54) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 24496
  _mbed_assert_internal(14997, 15002, 1102); //@line 24497
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 464; //@line 24500
   $56 = $ReallocAsyncCtx14 + 4 | 0; //@line 24501
   HEAP32[$56 >> 2] = $53; //@line 24502
   $57 = $ReallocAsyncCtx14 + 8 | 0; //@line 24503
   HEAP32[$57 >> 2] = $50; //@line 24504
   $58 = $ReallocAsyncCtx14 + 12 | 0; //@line 24505
   HEAP32[$58 >> 2] = $52; //@line 24506
   sp = STACKTOP; //@line 24507
   return;
  }
  ___async_unwind = 0; //@line 24510
  HEAP32[$ReallocAsyncCtx14 >> 2] = 464; //@line 24511
  $56 = $ReallocAsyncCtx14 + 4 | 0; //@line 24512
  HEAP32[$56 >> 2] = $53; //@line 24513
  $57 = $ReallocAsyncCtx14 + 8 | 0; //@line 24514
  HEAP32[$57 >> 2] = $50; //@line 24515
  $58 = $ReallocAsyncCtx14 + 12 | 0; //@line 24516
  HEAP32[$58 >> 2] = $52; //@line 24517
  sp = STACKTOP; //@line 24518
  return;
 } else {
  $59 = HEAP32[$54 >> 2] | 0; //@line 24521
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 24522
  FUNCTION_TABLE_vii[$59 & 31]($50, $52); //@line 24523
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 465; //@line 24526
   sp = STACKTOP; //@line 24527
   return;
  }
  ___async_unwind = 0; //@line 24530
  HEAP32[$ReallocAsyncCtx5 >> 2] = 465; //@line 24531
  sp = STACKTOP; //@line 24532
  return;
 }
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_2($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 16555
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16559
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16561
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16563
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16565
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16567
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16569
 $15 = $4 + 12 | 0; //@line 16570
 HEAP32[$4 >> 2] = 7; //@line 16571
 HEAP32[$4 + 4 >> 2] = 0; //@line 16573
 HEAP32[$4 + 8 >> 2] = $6; //@line 16575
 HEAP32[$15 >> 2] = 860; //@line 16576
 $16 = $6 + 1244 | 0; //@line 16577
 if (($16 | 0) == ($4 | 0)) {
  $43 = HEAP32[217] | 0; //@line 16581
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 16582
  FUNCTION_TABLE_vi[$43 & 1023]($4); //@line 16583
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 558; //@line 16586
   $44 = $ReallocAsyncCtx6 + 4 | 0; //@line 16587
   HEAP32[$44 >> 2] = $8; //@line 16588
   $45 = $ReallocAsyncCtx6 + 8 | 0; //@line 16589
   HEAP32[$45 >> 2] = $6; //@line 16590
   $46 = $ReallocAsyncCtx6 + 12 | 0; //@line 16591
   HEAP32[$46 >> 2] = $10; //@line 16592
   $47 = $ReallocAsyncCtx6 + 16 | 0; //@line 16593
   HEAP32[$47 >> 2] = $12; //@line 16594
   $48 = $ReallocAsyncCtx6 + 20 | 0; //@line 16595
   HEAP32[$48 >> 2] = $4; //@line 16596
   $49 = $ReallocAsyncCtx6 + 24 | 0; //@line 16597
   HEAP32[$49 >> 2] = $14; //@line 16598
   sp = STACKTOP; //@line 16599
   return;
  }
  ___async_unwind = 0; //@line 16602
  HEAP32[$ReallocAsyncCtx6 >> 2] = 558; //@line 16603
  $44 = $ReallocAsyncCtx6 + 4 | 0; //@line 16604
  HEAP32[$44 >> 2] = $8; //@line 16605
  $45 = $ReallocAsyncCtx6 + 8 | 0; //@line 16606
  HEAP32[$45 >> 2] = $6; //@line 16607
  $46 = $ReallocAsyncCtx6 + 12 | 0; //@line 16608
  HEAP32[$46 >> 2] = $10; //@line 16609
  $47 = $ReallocAsyncCtx6 + 16 | 0; //@line 16610
  HEAP32[$47 >> 2] = $12; //@line 16611
  $48 = $ReallocAsyncCtx6 + 20 | 0; //@line 16612
  HEAP32[$48 >> 2] = $4; //@line 16613
  $49 = $ReallocAsyncCtx6 + 24 | 0; //@line 16614
  HEAP32[$49 >> 2] = $14; //@line 16615
  sp = STACKTOP; //@line 16616
  return;
 }
 $18 = $6 + 1256 | 0; //@line 16619
 $19 = HEAP32[$18 >> 2] | 0; //@line 16620
 if (!$19) {
  $33 = HEAP32[216] | 0; //@line 16624
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 16625
  FUNCTION_TABLE_vii[$33 & 31]($16, $4); //@line 16626
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 557; //@line 16629
   $34 = $ReallocAsyncCtx5 + 4 | 0; //@line 16630
   HEAP32[$34 >> 2] = $4; //@line 16631
   $35 = $ReallocAsyncCtx5 + 8 | 0; //@line 16632
   HEAP32[$35 >> 2] = $8; //@line 16633
   $36 = $ReallocAsyncCtx5 + 12 | 0; //@line 16634
   HEAP32[$36 >> 2] = $6; //@line 16635
   $37 = $ReallocAsyncCtx5 + 16 | 0; //@line 16636
   HEAP32[$37 >> 2] = $10; //@line 16637
   $38 = $ReallocAsyncCtx5 + 20 | 0; //@line 16638
   HEAP32[$38 >> 2] = $12; //@line 16639
   $39 = $ReallocAsyncCtx5 + 24 | 0; //@line 16640
   HEAP32[$39 >> 2] = $15; //@line 16641
   $40 = $ReallocAsyncCtx5 + 28 | 0; //@line 16642
   HEAP32[$40 >> 2] = $18; //@line 16643
   $41 = $ReallocAsyncCtx5 + 32 | 0; //@line 16644
   HEAP32[$41 >> 2] = $14; //@line 16645
   sp = STACKTOP; //@line 16646
   return;
  }
  ___async_unwind = 0; //@line 16649
  HEAP32[$ReallocAsyncCtx5 >> 2] = 557; //@line 16650
  $34 = $ReallocAsyncCtx5 + 4 | 0; //@line 16651
  HEAP32[$34 >> 2] = $4; //@line 16652
  $35 = $ReallocAsyncCtx5 + 8 | 0; //@line 16653
  HEAP32[$35 >> 2] = $8; //@line 16654
  $36 = $ReallocAsyncCtx5 + 12 | 0; //@line 16655
  HEAP32[$36 >> 2] = $6; //@line 16656
  $37 = $ReallocAsyncCtx5 + 16 | 0; //@line 16657
  HEAP32[$37 >> 2] = $10; //@line 16658
  $38 = $ReallocAsyncCtx5 + 20 | 0; //@line 16659
  HEAP32[$38 >> 2] = $12; //@line 16660
  $39 = $ReallocAsyncCtx5 + 24 | 0; //@line 16661
  HEAP32[$39 >> 2] = $15; //@line 16662
  $40 = $ReallocAsyncCtx5 + 28 | 0; //@line 16663
  HEAP32[$40 >> 2] = $18; //@line 16664
  $41 = $ReallocAsyncCtx5 + 32 | 0; //@line 16665
  HEAP32[$41 >> 2] = $14; //@line 16666
  sp = STACKTOP; //@line 16667
  return;
 } else {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 16671
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 16672
  FUNCTION_TABLE_vi[$22 & 1023]($16); //@line 16673
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 556; //@line 16676
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 16677
   HEAP32[$23 >> 2] = $4; //@line 16678
   $24 = $ReallocAsyncCtx4 + 8 | 0; //@line 16679
   HEAP32[$24 >> 2] = $18; //@line 16680
   $25 = $ReallocAsyncCtx4 + 12 | 0; //@line 16681
   HEAP32[$25 >> 2] = $16; //@line 16682
   $26 = $ReallocAsyncCtx4 + 16 | 0; //@line 16683
   HEAP32[$26 >> 2] = $8; //@line 16684
   $27 = $ReallocAsyncCtx4 + 20 | 0; //@line 16685
   HEAP32[$27 >> 2] = $15; //@line 16686
   $28 = $ReallocAsyncCtx4 + 24 | 0; //@line 16687
   HEAP32[$28 >> 2] = $6; //@line 16688
   $29 = $ReallocAsyncCtx4 + 28 | 0; //@line 16689
   HEAP32[$29 >> 2] = $10; //@line 16690
   $30 = $ReallocAsyncCtx4 + 32 | 0; //@line 16691
   HEAP32[$30 >> 2] = $12; //@line 16692
   $31 = $ReallocAsyncCtx4 + 36 | 0; //@line 16693
   HEAP32[$31 >> 2] = $14; //@line 16694
   sp = STACKTOP; //@line 16695
   return;
  }
  ___async_unwind = 0; //@line 16698
  HEAP32[$ReallocAsyncCtx4 >> 2] = 556; //@line 16699
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 16700
  HEAP32[$23 >> 2] = $4; //@line 16701
  $24 = $ReallocAsyncCtx4 + 8 | 0; //@line 16702
  HEAP32[$24 >> 2] = $18; //@line 16703
  $25 = $ReallocAsyncCtx4 + 12 | 0; //@line 16704
  HEAP32[$25 >> 2] = $16; //@line 16705
  $26 = $ReallocAsyncCtx4 + 16 | 0; //@line 16706
  HEAP32[$26 >> 2] = $8; //@line 16707
  $27 = $ReallocAsyncCtx4 + 20 | 0; //@line 16708
  HEAP32[$27 >> 2] = $15; //@line 16709
  $28 = $ReallocAsyncCtx4 + 24 | 0; //@line 16710
  HEAP32[$28 >> 2] = $6; //@line 16711
  $29 = $ReallocAsyncCtx4 + 28 | 0; //@line 16712
  HEAP32[$29 >> 2] = $10; //@line 16713
  $30 = $ReallocAsyncCtx4 + 32 | 0; //@line 16714
  HEAP32[$30 >> 2] = $12; //@line 16715
  $31 = $ReallocAsyncCtx4 + 36 | 0; //@line 16716
  HEAP32[$31 >> 2] = $14; //@line 16717
  sp = STACKTOP; //@line 16718
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_174($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $24 = 0, $26 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $56 = 0, $57 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 31646
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31650
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31652
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31654
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31656
 $12 = HEAP16[$0 + 24 >> 1] | 0; //@line 31658
 $14 = HEAP16[$0 + 26 >> 1] | 0; //@line 31660
 $16 = HEAP8[$0 + 28 >> 0] | 0; //@line 31662
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 31664
 $19 = $4 + 12 | 0; //@line 31666
 HEAP32[$19 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 31667
 $20 = $4 + 16 | 0; //@line 31668
 HEAP32[$20 >> 2] = $10; //@line 31669
 HEAP16[$4 + 20 >> 1] = $12; //@line 31671
 HEAP16[$4 + 22 >> 1] = $14; //@line 31673
 HEAP8[$4 + 24 >> 0] = $16; //@line 31675
 $24 = _equeue_alloc($18, 28) | 0; //@line 31676
 if ($24 | 0) {
  $26 = HEAP32[$19 >> 2] | 0; //@line 31679
  if (!$26) {
   HEAP32[$24 + 12 >> 2] = 0; //@line 31683
   $39 = $24 + 16 | 0; //@line 31684
   HEAP32[$39 >> 2] = HEAP32[$20 >> 2]; //@line 31685
   HEAP32[$39 + 4 >> 2] = HEAP32[$20 + 4 >> 2]; //@line 31685
   HEAP8[$39 + 8 >> 0] = HEAP8[$20 + 8 >> 0] | 0; //@line 31685
   _equeue_event_dtor($24, 399); //@line 31686
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 31687
   $40 = _equeue_post($18, 400, $24) | 0; //@line 31688
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 401; //@line 31691
    $41 = $ReallocAsyncCtx6 + 4 | 0; //@line 31692
    HEAP32[$41 >> 2] = $19; //@line 31693
    $42 = $ReallocAsyncCtx6 + 8 | 0; //@line 31694
    HEAP32[$42 >> 2] = $8; //@line 31695
    $43 = $ReallocAsyncCtx6 + 12 | 0; //@line 31696
    HEAP32[$43 >> 2] = $4; //@line 31697
    $44 = $ReallocAsyncCtx6 + 16 | 0; //@line 31698
    HEAP32[$44 >> 2] = $6; //@line 31699
    sp = STACKTOP; //@line 31700
    return;
   }
   HEAP32[___async_retval >> 2] = $40; //@line 31704
   ___async_unwind = 0; //@line 31705
   HEAP32[$ReallocAsyncCtx6 >> 2] = 401; //@line 31706
   $41 = $ReallocAsyncCtx6 + 4 | 0; //@line 31707
   HEAP32[$41 >> 2] = $19; //@line 31708
   $42 = $ReallocAsyncCtx6 + 8 | 0; //@line 31709
   HEAP32[$42 >> 2] = $8; //@line 31710
   $43 = $ReallocAsyncCtx6 + 12 | 0; //@line 31711
   HEAP32[$43 >> 2] = $4; //@line 31712
   $44 = $ReallocAsyncCtx6 + 16 | 0; //@line 31713
   HEAP32[$44 >> 2] = $6; //@line 31714
   sp = STACKTOP; //@line 31715
   return;
  } else {
   $29 = HEAP32[$26 + 4 >> 2] | 0; //@line 31719
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 31720
   FUNCTION_TABLE_vii[$29 & 31]($24, $4); //@line 31721
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 398; //@line 31724
    $30 = $ReallocAsyncCtx3 + 4 | 0; //@line 31725
    HEAP32[$30 >> 2] = $19; //@line 31726
    $31 = $ReallocAsyncCtx3 + 8 | 0; //@line 31727
    HEAP32[$31 >> 2] = $24; //@line 31728
    $32 = $ReallocAsyncCtx3 + 12 | 0; //@line 31729
    HEAP32[$32 >> 2] = $20; //@line 31730
    $33 = $ReallocAsyncCtx3 + 16 | 0; //@line 31731
    HEAP32[$33 >> 2] = $18; //@line 31732
    $34 = $ReallocAsyncCtx3 + 20 | 0; //@line 31733
    HEAP32[$34 >> 2] = $19; //@line 31734
    $35 = $ReallocAsyncCtx3 + 24 | 0; //@line 31735
    HEAP32[$35 >> 2] = $8; //@line 31736
    $36 = $ReallocAsyncCtx3 + 28 | 0; //@line 31737
    HEAP32[$36 >> 2] = $4; //@line 31738
    $37 = $ReallocAsyncCtx3 + 32 | 0; //@line 31739
    HEAP32[$37 >> 2] = $6; //@line 31740
    sp = STACKTOP; //@line 31741
    return;
   }
   ___async_unwind = 0; //@line 31744
   HEAP32[$ReallocAsyncCtx3 >> 2] = 398; //@line 31745
   $30 = $ReallocAsyncCtx3 + 4 | 0; //@line 31746
   HEAP32[$30 >> 2] = $19; //@line 31747
   $31 = $ReallocAsyncCtx3 + 8 | 0; //@line 31748
   HEAP32[$31 >> 2] = $24; //@line 31749
   $32 = $ReallocAsyncCtx3 + 12 | 0; //@line 31750
   HEAP32[$32 >> 2] = $20; //@line 31751
   $33 = $ReallocAsyncCtx3 + 16 | 0; //@line 31752
   HEAP32[$33 >> 2] = $18; //@line 31753
   $34 = $ReallocAsyncCtx3 + 20 | 0; //@line 31754
   HEAP32[$34 >> 2] = $19; //@line 31755
   $35 = $ReallocAsyncCtx3 + 24 | 0; //@line 31756
   HEAP32[$35 >> 2] = $8; //@line 31757
   $36 = $ReallocAsyncCtx3 + 28 | 0; //@line 31758
   HEAP32[$36 >> 2] = $4; //@line 31759
   $37 = $ReallocAsyncCtx3 + 32 | 0; //@line 31760
   HEAP32[$37 >> 2] = $6; //@line 31761
   sp = STACKTOP; //@line 31762
   return;
  }
 }
 $46 = HEAP32[$19 >> 2] | 0; //@line 31766
 if ($46 | 0) {
  $49 = HEAP32[$46 + 8 >> 2] | 0; //@line 31770
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 31771
  FUNCTION_TABLE_vi[$49 & 1023]($4); //@line 31772
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 402; //@line 31775
   $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 31776
   HEAP32[$50 >> 2] = $8; //@line 31777
   $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 31778
   HEAP32[$51 >> 2] = 0; //@line 31779
   $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 31780
   HEAP32[$52 >> 2] = $6; //@line 31781
   sp = STACKTOP; //@line 31782
   return;
  }
  ___async_unwind = 0; //@line 31785
  HEAP32[$ReallocAsyncCtx4 >> 2] = 402; //@line 31786
  $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 31787
  HEAP32[$50 >> 2] = $8; //@line 31788
  $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 31789
  HEAP32[$51 >> 2] = 0; //@line 31790
  $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 31791
  HEAP32[$52 >> 2] = $6; //@line 31792
  sp = STACKTOP; //@line 31793
  return;
 }
 $53 = HEAP32[$8 >> 2] | 0; //@line 31796
 if (!$53) {
  HEAP32[___async_retval >> 2] = 0; //@line 31800
  return;
 }
 $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 31804
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 31805
 FUNCTION_TABLE_vi[$56 & 1023]($6); //@line 31806
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 403; //@line 31809
  $57 = $ReallocAsyncCtx5 + 4 | 0; //@line 31810
  HEAP32[$57 >> 2] = 0; //@line 31811
  sp = STACKTOP; //@line 31812
  return;
 }
 ___async_unwind = 0; //@line 31815
 HEAP32[$ReallocAsyncCtx5 >> 2] = 403; //@line 31816
 $57 = $ReallocAsyncCtx5 + 4 | 0; //@line 31817
 HEAP32[$57 >> 2] = 0; //@line 31818
 sp = STACKTOP; //@line 31819
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $36 = 0, $42 = 0, $45 = 0, $50 = 0, $51 = 0, $54 = 0, $AsyncCtx = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx21 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx32 = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 3126
 STACKTOP = STACKTOP + 64 | 0; //@line 3127
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 3127
 $vararg_buffer10 = sp + 40 | 0; //@line 3128
 $vararg_buffer8 = sp + 32 | 0; //@line 3129
 $vararg_buffer5 = sp + 24 | 0; //@line 3130
 $vararg_buffer3 = sp + 16 | 0; //@line 3131
 $vararg_buffer1 = sp + 8 | 0; //@line 3132
 $2 = sp + 48 | 0; //@line 3134
 _printf(10880, sp) | 0; //@line 3135
 HEAP32[$vararg_buffer1 >> 2] = $1; //@line 3136
 _printf(11427, $vararg_buffer1) | 0; //@line 3137
 $AsyncCtx29 = _emscripten_alloc_async_context(44, sp) | 0; //@line 3138
 _putchar(10) | 0; //@line 3139
 if (___async) {
  HEAP32[$AsyncCtx29 >> 2] = 135; //@line 3142
  HEAP32[$AsyncCtx29 + 4 >> 2] = $2; //@line 3144
  HEAP32[$AsyncCtx29 + 8 >> 2] = $0; //@line 3146
  HEAP32[$AsyncCtx29 + 12 >> 2] = $vararg_buffer3; //@line 3148
  HEAP32[$AsyncCtx29 + 16 >> 2] = $vararg_buffer3; //@line 3150
  HEAP32[$AsyncCtx29 + 20 >> 2] = $vararg_buffer5; //@line 3152
  HEAP32[$AsyncCtx29 + 24 >> 2] = $vararg_buffer5; //@line 3154
  HEAP32[$AsyncCtx29 + 28 >> 2] = $vararg_buffer8; //@line 3156
  HEAP32[$AsyncCtx29 + 32 >> 2] = $vararg_buffer8; //@line 3158
  HEAP32[$AsyncCtx29 + 36 >> 2] = $vararg_buffer10; //@line 3160
  HEAP32[$AsyncCtx29 + 40 >> 2] = $vararg_buffer10; //@line 3162
  sp = STACKTOP; //@line 3163
  STACKTOP = sp; //@line 3164
  return;
 }
 _emscripten_free_async_context($AsyncCtx29 | 0); //@line 3166
 HEAP8[$0 + 688 >> 0] = 2; //@line 3168
 _printf(10880, $vararg_buffer3) | 0; //@line 3169
 HEAP32[$vararg_buffer5 >> 2] = 3; //@line 3170
 _printf(10946, $vararg_buffer5) | 0; //@line 3171
 $AsyncCtx25 = _emscripten_alloc_async_context(28, sp) | 0; //@line 3172
 _putchar(10) | 0; //@line 3173
 if (___async) {
  HEAP32[$AsyncCtx25 >> 2] = 136; //@line 3176
  HEAP32[$AsyncCtx25 + 4 >> 2] = $2; //@line 3178
  HEAP32[$AsyncCtx25 + 8 >> 2] = $0; //@line 3180
  HEAP32[$AsyncCtx25 + 12 >> 2] = $vararg_buffer8; //@line 3182
  HEAP32[$AsyncCtx25 + 16 >> 2] = $vararg_buffer8; //@line 3184
  HEAP32[$AsyncCtx25 + 20 >> 2] = $vararg_buffer10; //@line 3186
  HEAP32[$AsyncCtx25 + 24 >> 2] = $vararg_buffer10; //@line 3188
  sp = STACKTOP; //@line 3189
  STACKTOP = sp; //@line 3190
  return;
 }
 _emscripten_free_async_context($AsyncCtx25 | 0); //@line 3192
 $AsyncCtx32 = _emscripten_alloc_async_context(28, sp) | 0; //@line 3193
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 3194
 if (___async) {
  HEAP32[$AsyncCtx32 >> 2] = 137; //@line 3197
  HEAP32[$AsyncCtx32 + 4 >> 2] = $2; //@line 3199
  HEAP32[$AsyncCtx32 + 8 >> 2] = $0; //@line 3201
  HEAP32[$AsyncCtx32 + 12 >> 2] = $vararg_buffer8; //@line 3203
  HEAP32[$AsyncCtx32 + 16 >> 2] = $vararg_buffer8; //@line 3205
  HEAP32[$AsyncCtx32 + 20 >> 2] = $vararg_buffer10; //@line 3207
  HEAP32[$AsyncCtx32 + 24 >> 2] = $vararg_buffer10; //@line 3209
  sp = STACKTOP; //@line 3210
  STACKTOP = sp; //@line 3211
  return;
 }
 _emscripten_free_async_context($AsyncCtx32 | 0); //@line 3213
 _printf(10880, $vararg_buffer8) | 0; //@line 3214
 HEAP32[$vararg_buffer10 >> 2] = 3; //@line 3215
 _printf(10975, $vararg_buffer10) | 0; //@line 3216
 $AsyncCtx21 = _emscripten_alloc_async_context(12, sp) | 0; //@line 3217
 _putchar(10) | 0; //@line 3218
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 138; //@line 3221
  HEAP32[$AsyncCtx21 + 4 >> 2] = $0; //@line 3223
  HEAP32[$AsyncCtx21 + 8 >> 2] = $2; //@line 3225
  sp = STACKTOP; //@line 3226
  STACKTOP = sp; //@line 3227
  return;
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 3229
 $28 = $0 + 1240 | 0; //@line 3230
 $29 = $2 + 12 | 0; //@line 3231
 HEAP32[$2 >> 2] = 139; //@line 3232
 HEAP32[$2 + 4 >> 2] = 0; //@line 3234
 HEAP32[$2 + 8 >> 2] = $0; //@line 3236
 HEAP32[$29 >> 2] = 648; //@line 3237
 $30 = $0 + 1280 | 0; //@line 3238
 if (($30 | 0) != ($2 | 0)) {
  $32 = $0 + 1292 | 0; //@line 3241
  $33 = HEAP32[$32 >> 2] | 0; //@line 3242
  do {
   if ($33 | 0) {
    $36 = HEAP32[$33 + 8 >> 2] | 0; //@line 3247
    $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 3248
    FUNCTION_TABLE_vi[$36 & 1023]($30); //@line 3249
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 140; //@line 3252
     HEAP32[$AsyncCtx + 4 >> 2] = $29; //@line 3254
     HEAP32[$AsyncCtx + 8 >> 2] = $32; //@line 3256
     HEAP32[$AsyncCtx + 12 >> 2] = $30; //@line 3258
     HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 3260
     HEAP32[$AsyncCtx + 20 >> 2] = $28; //@line 3262
     sp = STACKTOP; //@line 3263
     STACKTOP = sp; //@line 3264
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 3266
     break;
    }
   }
  } while (0);
  $42 = HEAP32[$29 >> 2] | 0; //@line 3271
  do {
   if (!$42) {
    $50 = 0; //@line 3275
   } else {
    $45 = HEAP32[$42 + 4 >> 2] | 0; //@line 3278
    $AsyncCtx14 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3279
    FUNCTION_TABLE_vii[$45 & 31]($30, $2); //@line 3280
    if (___async) {
     HEAP32[$AsyncCtx14 >> 2] = 141; //@line 3283
     HEAP32[$AsyncCtx14 + 4 >> 2] = $29; //@line 3285
     HEAP32[$AsyncCtx14 + 8 >> 2] = $32; //@line 3287
     HEAP32[$AsyncCtx14 + 12 >> 2] = $28; //@line 3289
     HEAP32[$AsyncCtx14 + 16 >> 2] = $2; //@line 3291
     sp = STACKTOP; //@line 3292
     STACKTOP = sp; //@line 3293
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx14 | 0); //@line 3295
     $50 = HEAP32[$29 >> 2] | 0; //@line 3297
     break;
    }
   }
  } while (0);
  HEAP32[$32 >> 2] = $50; //@line 3302
 }
 __ZN4mbed6Ticker5setupEy($28, 1e5, 0); //@line 3304
 $51 = HEAP32[$29 >> 2] | 0; //@line 3305
 if (!$51) {
  STACKTOP = sp; //@line 3308
  return;
 }
 $54 = HEAP32[$51 + 8 >> 2] | 0; //@line 3311
 $AsyncCtx18 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3312
 FUNCTION_TABLE_vi[$54 & 1023]($2); //@line 3313
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 142; //@line 3316
  sp = STACKTOP; //@line 3317
  STACKTOP = sp; //@line 3318
  return;
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 3320
 STACKTOP = sp; //@line 3321
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $15 = 0, $16 = 0, $28 = 0, $33 = 0, $40 = 0, $44 = 0, $48 = 0, $51 = 0, $62 = 0, $66 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx28 = 0, $AsyncCtx9 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13510
 STACKTOP = STACKTOP + 32 | 0; //@line 13511
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 13511
 $$byval_copy = sp + 24 | 0; //@line 13512
 $vararg_buffer3 = sp + 16 | 0; //@line 13513
 $vararg_buffer1 = sp + 8 | 0; //@line 13514
 _printf(12943, sp) | 0; //@line 13516
 _printf(13189, $vararg_buffer1) | 0; //@line 13517
 $AsyncCtx9 = _emscripten_alloc_async_context(28, sp) | 0; //@line 13518
 _putchar(10) | 0; //@line 13519
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 427; //@line 13522
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 13524
  HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer1; //@line 13526
  HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer3; //@line 13528
  HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer3; //@line 13530
  HEAP32[$AsyncCtx9 + 20 >> 2] = $$byval_copy; //@line 13532
  HEAP32[$AsyncCtx9 + 24 >> 2] = $$byval_copy; //@line 13534
  sp = STACKTOP; //@line 13535
  STACKTOP = sp; //@line 13536
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 13538
 $7 = $0 + 360 | 0; //@line 13539
 do {
  if ((HEAP32[$7 >> 2] | 0) == 2) {
   _printf(12943, $vararg_buffer3) | 0; //@line 13544
   _printf(12970, $$byval_copy) | 0; //@line 13545
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 13546
   _putchar(10) | 0; //@line 13547
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 428; //@line 13550
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 13552
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer1; //@line 13554
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 13556
    HEAP32[$AsyncCtx + 16 >> 2] = $7; //@line 13558
    sp = STACKTOP; //@line 13559
    STACKTOP = sp; //@line 13560
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 13562
   $15 = HEAP32[$0 + 1328 >> 2] | 0; //@line 13564
   HEAP32[$vararg_buffer1 >> 2] = 347; //@line 13565
   HEAP32[$vararg_buffer1 + 4 >> 2] = 0; //@line 13567
   $AsyncCtx20 = _emscripten_alloc_async_context(16, sp) | 0; //@line 13568
   HEAP32[$$byval_copy >> 2] = HEAP32[$vararg_buffer1 >> 2]; //@line 13569
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$vararg_buffer1 + 4 >> 2]; //@line 13569
   $16 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($15, $0, $$byval_copy) | 0; //@line 13570
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 429; //@line 13573
    HEAP32[$AsyncCtx20 + 4 >> 2] = $vararg_buffer1; //@line 13575
    HEAP32[$AsyncCtx20 + 8 >> 2] = $0; //@line 13577
    HEAP32[$AsyncCtx20 + 12 >> 2] = $7; //@line 13579
    sp = STACKTOP; //@line 13580
    STACKTOP = sp; //@line 13581
    return;
   }
   _emscripten_free_async_context($AsyncCtx20 | 0); //@line 13583
   do {
    if (!$16) {
     $AsyncCtx28 = _emscripten_alloc_async_context(16, sp) | 0; //@line 13587
     _mbed_assert_internal(12827, 12836, 217); //@line 13588
     if (___async) {
      HEAP32[$AsyncCtx28 >> 2] = 430; //@line 13591
      HEAP32[$AsyncCtx28 + 4 >> 2] = $vararg_buffer1; //@line 13593
      HEAP32[$AsyncCtx28 + 8 >> 2] = $0; //@line 13595
      HEAP32[$AsyncCtx28 + 12 >> 2] = $7; //@line 13597
      sp = STACKTOP; //@line 13598
      STACKTOP = sp; //@line 13599
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx28 | 0); //@line 13601
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 13607
   if (!(HEAP8[$0 + 373 >> 0] | 0)) {
    label = 24; //@line 13612
   } else {
    label = 23; //@line 13614
   }
  } else {
   $28 = HEAP32[$0 >> 2] | 0; //@line 13617
   $AsyncCtx17 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13618
   __ZN7LoRaPHY18put_radio_to_sleepEv($28); //@line 13619
   if (___async) {
    HEAP32[$AsyncCtx17 >> 2] = 431; //@line 13622
    HEAP32[$AsyncCtx17 + 4 >> 2] = $0; //@line 13624
    HEAP32[$AsyncCtx17 + 8 >> 2] = $7; //@line 13626
    sp = STACKTOP; //@line 13627
    STACKTOP = sp; //@line 13628
    return;
   }
   _emscripten_free_async_context($AsyncCtx17 | 0); //@line 13630
   $33 = (HEAP8[$0 + 373 >> 0] | 0) != 0; //@line 13636
   if (HEAP32[$0 + 364 >> 2] | 0) {
    if ($33) {
     label = 23; //@line 13639
     break;
    } else {
     label = 24; //@line 13642
     break;
    }
   }
   if ($33) {
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 3; //@line 13650
   }
   HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 3; //@line 13655
   $40 = $0 + 356 | 0; //@line 13656
   $44 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$40 >> 2] | 0, HEAP32[$0 + 980 >> 2] | 0) | 0; //@line 13660
   if ($44 >>> 0 >= (HEAP32[$0 + 976 >> 2] | 0) >>> 0) {
    $48 = HEAP32[$40 >> 2] | 0; //@line 13665
    $AsyncCtx24 = _emscripten_alloc_async_context(8, sp) | 0; //@line 13667
    __ZN18LoRaWANTimeHandler4stopER13timer_event_t($48, $0 + 1056 | 0); //@line 13668
    if (___async) {
     HEAP32[$AsyncCtx24 >> 2] = 432; //@line 13671
     HEAP32[$AsyncCtx24 + 4 >> 2] = $0; //@line 13673
     sp = STACKTOP; //@line 13674
     STACKTOP = sp; //@line 13675
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx24 | 0); //@line 13677
     $51 = $0 + 944 | 0; //@line 13678
     HEAP8[$51 >> 0] = HEAP8[$51 >> 0] | 32; //@line 13681
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 23) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 4; //@line 13691
  label = 24; //@line 13692
 }
 if ((label | 0) == 24) {
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 4; //@line 13698
  if ((HEAP32[$7 >> 2] | 0) != 2) {
   $62 = $0 + 944 | 0; //@line 13702
   HEAP8[$62 >> 0] = HEAP8[$62 >> 0] | 32; //@line 13705
  }
 }
 $66 = HEAP32[$0 + 356 >> 2] | 0; //@line 13709
 $AsyncCtx13 = _emscripten_alloc_async_context(4, sp) | 0; //@line 13711
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($66, $0 + 996 | 0, 1); //@line 13712
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 433; //@line 13715
  sp = STACKTOP; //@line 13716
  STACKTOP = sp; //@line 13717
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx13 | 0); //@line 13719
  STACKTOP = sp; //@line 13720
  return;
 }
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_417($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $45 = 0, $46 = 0, $49 = 0, $57 = 0, $6 = 0, $63 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 22309
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22311
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22313
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22315
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22317
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22319
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22321
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22323
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22325
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(36) | 0; //@line 22330
  _mbed_assert_internal(12827, 12836, 217); //@line 22331
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 349; //@line 22334
   $19 = $ReallocAsyncCtx10 + 4 | 0; //@line 22335
   HEAP32[$19 >> 2] = $2; //@line 22336
   $20 = $ReallocAsyncCtx10 + 8 | 0; //@line 22337
   HEAP32[$20 >> 2] = $4; //@line 22338
   $21 = $ReallocAsyncCtx10 + 12 | 0; //@line 22339
   HEAP32[$21 >> 2] = $6; //@line 22340
   $22 = $ReallocAsyncCtx10 + 16 | 0; //@line 22341
   HEAP32[$22 >> 2] = $8; //@line 22342
   $23 = $ReallocAsyncCtx10 + 20 | 0; //@line 22343
   HEAP32[$23 >> 2] = $10; //@line 22344
   $24 = $ReallocAsyncCtx10 + 24 | 0; //@line 22345
   HEAP32[$24 >> 2] = $12; //@line 22346
   $25 = $ReallocAsyncCtx10 + 28 | 0; //@line 22347
   HEAP32[$25 >> 2] = $14; //@line 22348
   $26 = $ReallocAsyncCtx10 + 32 | 0; //@line 22349
   HEAP32[$26 >> 2] = $16; //@line 22350
   sp = STACKTOP; //@line 22351
   return;
  }
  ___async_unwind = 0; //@line 22354
  HEAP32[$ReallocAsyncCtx10 >> 2] = 349; //@line 22355
  $19 = $ReallocAsyncCtx10 + 4 | 0; //@line 22356
  HEAP32[$19 >> 2] = $2; //@line 22357
  $20 = $ReallocAsyncCtx10 + 8 | 0; //@line 22358
  HEAP32[$20 >> 2] = $4; //@line 22359
  $21 = $ReallocAsyncCtx10 + 12 | 0; //@line 22360
  HEAP32[$21 >> 2] = $6; //@line 22361
  $22 = $ReallocAsyncCtx10 + 16 | 0; //@line 22362
  HEAP32[$22 >> 2] = $8; //@line 22363
  $23 = $ReallocAsyncCtx10 + 20 | 0; //@line 22364
  HEAP32[$23 >> 2] = $10; //@line 22365
  $24 = $ReallocAsyncCtx10 + 24 | 0; //@line 22366
  HEAP32[$24 >> 2] = $12; //@line 22367
  $25 = $ReallocAsyncCtx10 + 28 | 0; //@line 22368
  HEAP32[$25 >> 2] = $14; //@line 22369
  $26 = $ReallocAsyncCtx10 + 32 | 0; //@line 22370
  HEAP32[$26 >> 2] = $16; //@line 22371
  sp = STACKTOP; //@line 22372
  return;
 }
 HEAP32[$4 + 364 >> 2] = 2; //@line 22376
 if (HEAP8[$4 + 371 >> 0] | 0) {
  $31 = HEAP32[$10 >> 2] | 0; //@line 22381
  $34 = HEAP32[$4 + 972 >> 2] | 0; //@line 22384
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 22385
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($31, $4 + 1036 | 0, $34); //@line 22386
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 350; //@line 22389
   $35 = $ReallocAsyncCtx7 + 4 | 0; //@line 22390
   HEAP32[$35 >> 2] = $8; //@line 22391
   $36 = $ReallocAsyncCtx7 + 8 | 0; //@line 22392
   HEAP32[$36 >> 2] = $4; //@line 22393
   $37 = $ReallocAsyncCtx7 + 12 | 0; //@line 22394
   HEAP32[$37 >> 2] = $10; //@line 22395
   $38 = $ReallocAsyncCtx7 + 16 | 0; //@line 22396
   HEAP32[$38 >> 2] = $12; //@line 22397
   $39 = $ReallocAsyncCtx7 + 20 | 0; //@line 22398
   HEAP32[$39 >> 2] = $2; //@line 22399
   $40 = $ReallocAsyncCtx7 + 24 | 0; //@line 22400
   HEAP32[$40 >> 2] = $14; //@line 22401
   $41 = $ReallocAsyncCtx7 + 28 | 0; //@line 22402
   HEAP32[$41 >> 2] = $6; //@line 22403
   sp = STACKTOP; //@line 22404
   return;
  }
  ___async_unwind = 0; //@line 22407
  HEAP32[$ReallocAsyncCtx7 >> 2] = 350; //@line 22408
  $35 = $ReallocAsyncCtx7 + 4 | 0; //@line 22409
  HEAP32[$35 >> 2] = $8; //@line 22410
  $36 = $ReallocAsyncCtx7 + 8 | 0; //@line 22411
  HEAP32[$36 >> 2] = $4; //@line 22412
  $37 = $ReallocAsyncCtx7 + 12 | 0; //@line 22413
  HEAP32[$37 >> 2] = $10; //@line 22414
  $38 = $ReallocAsyncCtx7 + 16 | 0; //@line 22415
  HEAP32[$38 >> 2] = $12; //@line 22416
  $39 = $ReallocAsyncCtx7 + 20 | 0; //@line 22417
  HEAP32[$39 >> 2] = $2; //@line 22418
  $40 = $ReallocAsyncCtx7 + 24 | 0; //@line 22419
  HEAP32[$40 >> 2] = $14; //@line 22420
  $41 = $ReallocAsyncCtx7 + 28 | 0; //@line 22421
  HEAP32[$41 >> 2] = $6; //@line 22422
  sp = STACKTOP; //@line 22423
  return;
 }
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 22429
 $45 = $4 + 944 | 0; //@line 22430
 $46 = HEAP8[$45 >> 0] | 0; //@line 22431
 if (!($46 << 24 >> 24)) {
  HEAP8[$45 >> 0] = 1; //@line 22434
  $49 = 1; //@line 22435
 } else {
  $49 = $46; //@line 22437
 }
 HEAP8[$45 >> 0] = $49 | 32; //@line 22440
 HEAP8[$4 + 376 >> 0] = ($12 | 0) == 0 & (HEAP8[$4 + 944 >> 0] & 8) != 0 & 1; //@line 22449
 $57 = HEAP8[$4 + 378 >> 0] | 0; //@line 22451
 HEAP8[$4 + 379 >> 0] = $57; //@line 22453
 HEAP8[$2 >> 0] = $57; //@line 22454
 HEAP8[$14 + 1 >> 0] = HEAP8[$4 + 372 >> 0] | 0; //@line 22458
 HEAP32[$14 + 4 >> 2] = $6; //@line 22460
 $63 = HEAP32[$4 >> 2] | 0; //@line 22461
 $66 = HEAP32[(HEAP32[$63 >> 2] | 0) + 12 >> 2] | 0; //@line 22464
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 22465
 FUNCTION_TABLE_vii[$66 & 31]($63, $14); //@line 22466
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 353; //@line 22469
  $67 = $ReallocAsyncCtx + 4 | 0; //@line 22470
  HEAP32[$67 >> 2] = $4; //@line 22471
  $68 = $ReallocAsyncCtx + 8 | 0; //@line 22472
  HEAP32[$68 >> 2] = $6; //@line 22473
  $69 = $ReallocAsyncCtx + 12 | 0; //@line 22474
  HEAP32[$69 >> 2] = $10; //@line 22475
  $70 = $ReallocAsyncCtx + 16 | 0; //@line 22476
  HEAP32[$70 >> 2] = $2; //@line 22477
  sp = STACKTOP; //@line 22478
  return;
 }
 ___async_unwind = 0; //@line 22481
 HEAP32[$ReallocAsyncCtx >> 2] = 353; //@line 22482
 $67 = $ReallocAsyncCtx + 4 | 0; //@line 22483
 HEAP32[$67 >> 2] = $4; //@line 22484
 $68 = $ReallocAsyncCtx + 8 | 0; //@line 22485
 HEAP32[$68 >> 2] = $6; //@line 22486
 $69 = $ReallocAsyncCtx + 12 | 0; //@line 22487
 HEAP32[$69 >> 2] = $10; //@line 22488
 $70 = $ReallocAsyncCtx + 16 | 0; //@line 22489
 HEAP32[$70 >> 2] = $2; //@line 22490
 sp = STACKTOP; //@line 22491
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre = 0, $$pre12 = 0, $$pre13 = 0, $12 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $4 = 0, $46 = 0, $47 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $63 = 0, $70 = 0, $71 = 0, $74 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9127
 if (!$1) {
  return;
 }
 $3 = $1 + 12 | 0; //@line 9132
 $4 = HEAP32[$3 >> 2] | 0; //@line 9133
 if ($4 | 0) {
  $6 = $0 + 1880 | 0; //@line 9136
  if (($6 | 0) != ($1 | 0)) {
   $8 = $0 + 1892 | 0; //@line 9139
   $9 = HEAP32[$8 >> 2] | 0; //@line 9140
   do {
    if (!$9) {
     $20 = $4; //@line 9144
     label = 8; //@line 9145
    } else {
     $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 9148
     $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 9149
     FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 9150
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 301; //@line 9153
      HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 9155
      HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 9157
      HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 9159
      HEAP32[$AsyncCtx + 16 >> 2] = $8; //@line 9161
      HEAP32[$AsyncCtx + 20 >> 2] = $3; //@line 9163
      sp = STACKTOP; //@line 9164
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 9167
      $$pre = HEAP32[$3 >> 2] | 0; //@line 9168
      if (!$$pre) {
       $26 = 0; //@line 9171
       break;
      } else {
       $20 = $$pre; //@line 9174
       label = 8; //@line 9175
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 8) {
     $21 = HEAP32[$20 + 4 >> 2] | 0; //@line 9184
     $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9185
     FUNCTION_TABLE_vii[$21 & 31]($6, $1); //@line 9186
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 302; //@line 9189
      HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 9191
      HEAP32[$AsyncCtx2 + 8 >> 2] = $8; //@line 9193
      HEAP32[$AsyncCtx2 + 12 >> 2] = $1; //@line 9195
      HEAP32[$AsyncCtx2 + 16 >> 2] = $3; //@line 9197
      sp = STACKTOP; //@line 9198
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9201
      $26 = HEAP32[$3 >> 2] | 0; //@line 9203
      break;
     }
    }
   } while (0);
   HEAP32[$8 >> 2] = $26; //@line 9208
  }
 }
 $27 = $1 + 16 | 0; //@line 9211
 $28 = $1 + 28 | 0; //@line 9212
 $29 = HEAP32[$28 >> 2] | 0; //@line 9213
 if ($29 | 0) {
  $31 = $0 + 1896 | 0; //@line 9216
  if (($31 | 0) != ($27 | 0)) {
   $33 = $0 + 1908 | 0; //@line 9219
   $34 = HEAP32[$33 >> 2] | 0; //@line 9220
   do {
    if (!$34) {
     $46 = $29; //@line 9224
     label = 18; //@line 9225
    } else {
     $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 9228
     $AsyncCtx5 = _emscripten_alloc_async_context(28, sp) | 0; //@line 9229
     FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 9230
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 303; //@line 9233
      HEAP32[$AsyncCtx5 + 4 >> 2] = $28; //@line 9235
      HEAP32[$AsyncCtx5 + 8 >> 2] = $33; //@line 9237
      HEAP32[$AsyncCtx5 + 12 >> 2] = $31; //@line 9239
      HEAP32[$AsyncCtx5 + 16 >> 2] = $27; //@line 9241
      HEAP32[$AsyncCtx5 + 20 >> 2] = $1; //@line 9243
      HEAP32[$AsyncCtx5 + 24 >> 2] = $0; //@line 9245
      sp = STACKTOP; //@line 9246
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 9249
      $$pre12 = HEAP32[$28 >> 2] | 0; //@line 9250
      if (!$$pre12) {
       $52 = 0; //@line 9253
       break;
      } else {
       $46 = $$pre12; //@line 9256
       label = 18; //@line 9257
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 18) {
     $47 = HEAP32[$46 + 4 >> 2] | 0; //@line 9266
     $AsyncCtx8 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9267
     FUNCTION_TABLE_vii[$47 & 31]($31, $27); //@line 9268
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 304; //@line 9271
      HEAP32[$AsyncCtx8 + 4 >> 2] = $28; //@line 9273
      HEAP32[$AsyncCtx8 + 8 >> 2] = $33; //@line 9275
      HEAP32[$AsyncCtx8 + 12 >> 2] = $1; //@line 9277
      HEAP32[$AsyncCtx8 + 16 >> 2] = $0; //@line 9279
      sp = STACKTOP; //@line 9280
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx8 | 0); //@line 9283
      $52 = HEAP32[$28 >> 2] | 0; //@line 9285
      break;
     }
    }
   } while (0);
   HEAP32[$33 >> 2] = $52; //@line 9290
  }
 }
 $53 = $1 + 32 | 0; //@line 9293
 $54 = $1 + 44 | 0; //@line 9294
 $55 = HEAP32[$54 >> 2] | 0; //@line 9295
 if (!$55) {
  return;
 }
 $57 = $0 + 1912 | 0; //@line 9300
 if (($57 | 0) == ($53 | 0)) {
  return;
 }
 $59 = $0 + 1924 | 0; //@line 9305
 $60 = HEAP32[$59 >> 2] | 0; //@line 9306
 do {
  if (!$60) {
   $70 = $55; //@line 9310
   label = 28; //@line 9311
  } else {
   $63 = HEAP32[$60 + 8 >> 2] | 0; //@line 9314
   $AsyncCtx11 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9315
   FUNCTION_TABLE_vi[$63 & 1023]($57); //@line 9316
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 305; //@line 9319
    HEAP32[$AsyncCtx11 + 4 >> 2] = $54; //@line 9321
    HEAP32[$AsyncCtx11 + 8 >> 2] = $59; //@line 9323
    HEAP32[$AsyncCtx11 + 12 >> 2] = $57; //@line 9325
    HEAP32[$AsyncCtx11 + 16 >> 2] = $53; //@line 9327
    sp = STACKTOP; //@line 9328
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 9331
    $$pre13 = HEAP32[$54 >> 2] | 0; //@line 9332
    if (!$$pre13) {
     $74 = 0; //@line 9335
     break;
    } else {
     $70 = $$pre13; //@line 9338
     label = 28; //@line 9339
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 28) {
   $71 = HEAP32[$70 + 4 >> 2] | 0; //@line 9348
   $AsyncCtx14 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9349
   FUNCTION_TABLE_vii[$71 & 31]($57, $53); //@line 9350
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 306; //@line 9353
    HEAP32[$AsyncCtx14 + 4 >> 2] = $54; //@line 9355
    HEAP32[$AsyncCtx14 + 8 >> 2] = $59; //@line 9357
    sp = STACKTOP; //@line 9358
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 9361
    $74 = HEAP32[$54 >> 2] | 0; //@line 9363
    break;
   }
  }
 } while (0);
 HEAP32[$59 >> 2] = $74; //@line 9368
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $35 = 0, $4 = 0, $40 = 0, $43 = 0, $48 = 0, $54 = 0, $55 = 0, $58 = 0, $61 = 0, $64 = 0, $67 = 0, $69 = 0, $72 = 0, $75 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx4 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 2851
 STACKTOP = STACKTOP + 32 | 0; //@line 2852
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 2852
 $1 = sp + 16 | 0; //@line 2855
 _printf(10880, sp) | 0; //@line 2856
 _printf(11277, sp + 8 | 0) | 0; //@line 2857
 $AsyncCtx18 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2858
 _putchar(10) | 0; //@line 2859
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 128; //@line 2862
  HEAP32[$AsyncCtx18 + 4 >> 2] = $1; //@line 2864
  HEAP32[$AsyncCtx18 + 8 >> 2] = $0; //@line 2866
  sp = STACKTOP; //@line 2867
  STACKTOP = sp; //@line 2868
  return;
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 2870
 $4 = $0 + 688 | 0; //@line 2871
 switch (HEAP8[$4 >> 0] | 0) {
 case 1:
  {
   do {
    if (!(HEAP8[$0 + 689 >> 0] | 0)) {
     HEAP8[$0 + 732 >> 0] = 0; //@line 2881
     HEAP8[$0 + 733 >> 0] = 0; //@line 2883
     HEAP16[$0 + 744 >> 1] = 0; //@line 2885
     HEAP16[$0 + 742 >> 1] = 0; //@line 2887
     if (!(HEAP8[$0 + 722 >> 0] | 0)) {
      HEAP8[$4 >> 0] = 0; //@line 2892
      $16 = $0 + 1176 | 0; //@line 2893
      $17 = $1 + 12 | 0; //@line 2894
      HEAP32[$1 >> 2] = 70; //@line 2895
      HEAP32[$1 + 4 >> 2] = 0; //@line 2897
      HEAP32[$1 + 8 >> 2] = $0; //@line 2899
      HEAP32[$17 >> 2] = 648; //@line 2900
      $20 = ___muldi3(HEAP32[$0 + 728 >> 2] | 0, 0, 1e3, 0) | 0; //@line 2903
      $21 = tempRet0; //@line 2904
      $22 = $0 + 1216 | 0; //@line 2905
      if (($22 | 0) != ($1 | 0)) {
       $24 = $0 + 1228 | 0; //@line 2908
       $25 = HEAP32[$24 >> 2] | 0; //@line 2909
       do {
        if ($25 | 0) {
         $28 = HEAP32[$25 + 8 >> 2] | 0; //@line 2914
         $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 2915
         FUNCTION_TABLE_vi[$28 & 1023]($22); //@line 2916
         if (___async) {
          HEAP32[$AsyncCtx >> 2] = 129; //@line 2919
          HEAP32[$AsyncCtx + 4 >> 2] = $17; //@line 2921
          HEAP32[$AsyncCtx + 8 >> 2] = $24; //@line 2923
          HEAP32[$AsyncCtx + 12 >> 2] = $22; //@line 2925
          HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 2927
          HEAP32[$AsyncCtx + 20 >> 2] = $16; //@line 2929
          $35 = $AsyncCtx + 24 | 0; //@line 2931
          HEAP32[$35 >> 2] = $20; //@line 2933
          HEAP32[$35 + 4 >> 2] = $21; //@line 2936
          HEAP32[$AsyncCtx + 32 >> 2] = $0; //@line 2938
          sp = STACKTOP; //@line 2939
          STACKTOP = sp; //@line 2940
          return;
         } else {
          _emscripten_free_async_context($AsyncCtx | 0); //@line 2942
          break;
         }
        }
       } while (0);
       $40 = HEAP32[$17 >> 2] | 0; //@line 2947
       do {
        if (!$40) {
         $54 = 0; //@line 2951
        } else {
         $43 = HEAP32[$40 + 4 >> 2] | 0; //@line 2954
         $AsyncCtx4 = _emscripten_alloc_async_context(32, sp) | 0; //@line 2955
         FUNCTION_TABLE_vii[$43 & 31]($22, $1); //@line 2956
         if (___async) {
          HEAP32[$AsyncCtx4 >> 2] = 130; //@line 2959
          HEAP32[$AsyncCtx4 + 4 >> 2] = $17; //@line 2961
          HEAP32[$AsyncCtx4 + 8 >> 2] = $24; //@line 2963
          HEAP32[$AsyncCtx4 + 12 >> 2] = $16; //@line 2965
          $48 = $AsyncCtx4 + 16 | 0; //@line 2967
          HEAP32[$48 >> 2] = $20; //@line 2969
          HEAP32[$48 + 4 >> 2] = $21; //@line 2972
          HEAP32[$AsyncCtx4 + 24 >> 2] = $0; //@line 2974
          HEAP32[$AsyncCtx4 + 28 >> 2] = $1; //@line 2976
          sp = STACKTOP; //@line 2977
          STACKTOP = sp; //@line 2978
          return;
         } else {
          _emscripten_free_async_context($AsyncCtx4 | 0); //@line 2980
          $54 = HEAP32[$17 >> 2] | 0; //@line 2982
          break;
         }
        }
       } while (0);
       HEAP32[$24 >> 2] = $54; //@line 2987
      }
      __ZN4mbed6Ticker5setupEy($16, $20, $21); //@line 2989
      $55 = HEAP32[$17 >> 2] | 0; //@line 2990
      if ($55 | 0) {
       $58 = HEAP32[$55 + 8 >> 2] | 0; //@line 2994
       $AsyncCtx8 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2995
       FUNCTION_TABLE_vi[$58 & 1023]($1); //@line 2996
       if (___async) {
        HEAP32[$AsyncCtx8 >> 2] = 131; //@line 2999
        HEAP32[$AsyncCtx8 + 4 >> 2] = $0; //@line 3001
        sp = STACKTOP; //@line 3002
        STACKTOP = sp; //@line 3003
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx8 | 0); //@line 3005
        break;
       }
      }
     }
    }
   } while (0);
   $61 = HEAP32[$0 + 784 >> 2] | 0; //@line 3013
   if (!$61) {
    STACKTOP = sp; //@line 3016
    return;
   }
   $64 = HEAP32[$61 + 60 >> 2] | 0; //@line 3019
   if (!$64) {
    STACKTOP = sp; //@line 3022
    return;
   }
   $67 = HEAP32[$64 >> 2] | 0; //@line 3025
   $AsyncCtx11 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3026
   FUNCTION_TABLE_vi[$67 & 1023]($61 + 48 | 0); //@line 3027
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 132; //@line 3030
    sp = STACKTOP; //@line 3031
    STACKTOP = sp; //@line 3032
    return;
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 3034
   STACKTOP = sp; //@line 3035
   return;
  }
 case 2:
  {
   HEAP8[$4 >> 0] = 0; //@line 3039
   $69 = HEAP32[$0 + 784 >> 2] | 0; //@line 3041
   if (!$69) {
    STACKTOP = sp; //@line 3044
    return;
   }
   $72 = HEAP32[$69 + 28 >> 2] | 0; //@line 3047
   if (!$72) {
    STACKTOP = sp; //@line 3050
    return;
   }
   $75 = HEAP32[$72 >> 2] | 0; //@line 3053
   $AsyncCtx14 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3054
   FUNCTION_TABLE_vi[$75 & 1023]($69 + 16 | 0); //@line 3055
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 133; //@line 3058
    sp = STACKTOP; //@line 3059
    STACKTOP = sp; //@line 3060
    return;
   }
   _emscripten_free_async_context($AsyncCtx14 | 0); //@line 3062
   STACKTOP = sp; //@line 3063
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 3067
   return;
  }
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_479($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $51 = 0, $52 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 34320
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34322
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34324
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34326
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 34328
 $10 = HEAP8[$0 + 17 >> 0] | 0; //@line 34330
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 34332
 $15 = $4 + 12 | 0; //@line 34336
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 24 >> 2] >> 2]; //@line 34337
 $16 = $4 + 16 | 0; //@line 34338
 HEAP8[$16 >> 0] = $8; //@line 34339
 HEAP8[$4 + 17 >> 0] = $10; //@line 34341
 $18 = _equeue_alloc($12, 20) | 0; //@line 34342
 if ($18 | 0) {
  $20 = HEAP32[$15 >> 2] | 0; //@line 34345
  if (!$20) {
   HEAP32[$18 + 12 >> 2] = 0; //@line 34349
   HEAP16[$18 + 16 >> 1] = HEAP16[$16 >> 1] | 0; //@line 34352
   _equeue_event_dtor($18, 268); //@line 34353
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 34354
   $35 = _equeue_post($12, 269, $18) | 0; //@line 34355
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 270; //@line 34358
    $36 = $ReallocAsyncCtx6 + 4 | 0; //@line 34359
    HEAP32[$36 >> 2] = $15; //@line 34360
    $37 = $ReallocAsyncCtx6 + 8 | 0; //@line 34361
    HEAP32[$37 >> 2] = $6; //@line 34362
    $38 = $ReallocAsyncCtx6 + 12 | 0; //@line 34363
    HEAP32[$38 >> 2] = $4; //@line 34364
    $39 = $ReallocAsyncCtx6 + 16 | 0; //@line 34365
    HEAP32[$39 >> 2] = $2; //@line 34366
    sp = STACKTOP; //@line 34367
    return;
   }
   HEAP32[___async_retval >> 2] = $35; //@line 34371
   ___async_unwind = 0; //@line 34372
   HEAP32[$ReallocAsyncCtx6 >> 2] = 270; //@line 34373
   $36 = $ReallocAsyncCtx6 + 4 | 0; //@line 34374
   HEAP32[$36 >> 2] = $15; //@line 34375
   $37 = $ReallocAsyncCtx6 + 8 | 0; //@line 34376
   HEAP32[$37 >> 2] = $6; //@line 34377
   $38 = $ReallocAsyncCtx6 + 12 | 0; //@line 34378
   HEAP32[$38 >> 2] = $4; //@line 34379
   $39 = $ReallocAsyncCtx6 + 16 | 0; //@line 34380
   HEAP32[$39 >> 2] = $2; //@line 34381
   sp = STACKTOP; //@line 34382
   return;
  } else {
   $23 = HEAP32[$20 + 4 >> 2] | 0; //@line 34386
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 34387
   FUNCTION_TABLE_vii[$23 & 31]($18, $4); //@line 34388
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 267; //@line 34391
    $24 = $ReallocAsyncCtx3 + 4 | 0; //@line 34392
    HEAP32[$24 >> 2] = $15; //@line 34393
    $25 = $ReallocAsyncCtx3 + 8 | 0; //@line 34394
    HEAP32[$25 >> 2] = $18; //@line 34395
    $26 = $ReallocAsyncCtx3 + 12 | 0; //@line 34396
    HEAP32[$26 >> 2] = $16; //@line 34397
    $27 = $ReallocAsyncCtx3 + 16 | 0; //@line 34398
    HEAP32[$27 >> 2] = $12; //@line 34399
    $28 = $ReallocAsyncCtx3 + 20 | 0; //@line 34400
    HEAP32[$28 >> 2] = $15; //@line 34401
    $29 = $ReallocAsyncCtx3 + 24 | 0; //@line 34402
    HEAP32[$29 >> 2] = $6; //@line 34403
    $30 = $ReallocAsyncCtx3 + 28 | 0; //@line 34404
    HEAP32[$30 >> 2] = $4; //@line 34405
    $31 = $ReallocAsyncCtx3 + 32 | 0; //@line 34406
    HEAP32[$31 >> 2] = $2; //@line 34407
    sp = STACKTOP; //@line 34408
    return;
   }
   ___async_unwind = 0; //@line 34411
   HEAP32[$ReallocAsyncCtx3 >> 2] = 267; //@line 34412
   $24 = $ReallocAsyncCtx3 + 4 | 0; //@line 34413
   HEAP32[$24 >> 2] = $15; //@line 34414
   $25 = $ReallocAsyncCtx3 + 8 | 0; //@line 34415
   HEAP32[$25 >> 2] = $18; //@line 34416
   $26 = $ReallocAsyncCtx3 + 12 | 0; //@line 34417
   HEAP32[$26 >> 2] = $16; //@line 34418
   $27 = $ReallocAsyncCtx3 + 16 | 0; //@line 34419
   HEAP32[$27 >> 2] = $12; //@line 34420
   $28 = $ReallocAsyncCtx3 + 20 | 0; //@line 34421
   HEAP32[$28 >> 2] = $15; //@line 34422
   $29 = $ReallocAsyncCtx3 + 24 | 0; //@line 34423
   HEAP32[$29 >> 2] = $6; //@line 34424
   $30 = $ReallocAsyncCtx3 + 28 | 0; //@line 34425
   HEAP32[$30 >> 2] = $4; //@line 34426
   $31 = $ReallocAsyncCtx3 + 32 | 0; //@line 34427
   HEAP32[$31 >> 2] = $2; //@line 34428
   sp = STACKTOP; //@line 34429
   return;
  }
 }
 $41 = HEAP32[$15 >> 2] | 0; //@line 34433
 if ($41 | 0) {
  $44 = HEAP32[$41 + 8 >> 2] | 0; //@line 34437
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 34438
  FUNCTION_TABLE_vi[$44 & 1023]($4); //@line 34439
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 271; //@line 34442
   $45 = $ReallocAsyncCtx4 + 4 | 0; //@line 34443
   HEAP32[$45 >> 2] = $6; //@line 34444
   $46 = $ReallocAsyncCtx4 + 8 | 0; //@line 34445
   HEAP32[$46 >> 2] = 0; //@line 34446
   $47 = $ReallocAsyncCtx4 + 12 | 0; //@line 34447
   HEAP32[$47 >> 2] = $2; //@line 34448
   sp = STACKTOP; //@line 34449
   return;
  }
  ___async_unwind = 0; //@line 34452
  HEAP32[$ReallocAsyncCtx4 >> 2] = 271; //@line 34453
  $45 = $ReallocAsyncCtx4 + 4 | 0; //@line 34454
  HEAP32[$45 >> 2] = $6; //@line 34455
  $46 = $ReallocAsyncCtx4 + 8 | 0; //@line 34456
  HEAP32[$46 >> 2] = 0; //@line 34457
  $47 = $ReallocAsyncCtx4 + 12 | 0; //@line 34458
  HEAP32[$47 >> 2] = $2; //@line 34459
  sp = STACKTOP; //@line 34460
  return;
 }
 $48 = HEAP32[$6 >> 2] | 0; //@line 34463
 if (!$48) {
  HEAP32[___async_retval >> 2] = 0; //@line 34467
  return;
 }
 $51 = HEAP32[$48 + 8 >> 2] | 0; //@line 34471
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 34472
 FUNCTION_TABLE_vi[$51 & 1023]($2); //@line 34473
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 272; //@line 34476
  $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 34477
  HEAP32[$52 >> 2] = 0; //@line 34478
  sp = STACKTOP; //@line 34479
  return;
 }
 ___async_unwind = 0; //@line 34482
 HEAP32[$ReallocAsyncCtx5 >> 2] = 272; //@line 34483
 $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 34484
 HEAP32[$52 >> 2] = 0; //@line 34485
 sp = STACKTOP; //@line 34486
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i = 0, $$pre$i = 0, $11 = 0, $18 = 0, $21 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $38 = 0, $4 = 0, $45 = 0, $49 = 0, $5 = 0, $52 = 0, $57 = 0, $6 = 0, $60 = 0, $64 = 0, $67 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 7698
 STACKTOP = STACKTOP + 48 | 0; //@line 7699
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 7699
 $4 = sp + 16 | 0; //@line 7700
 $5 = sp; //@line 7701
 $6 = $1 + 12 | 0; //@line 7702
 $7 = HEAP32[$6 >> 2] | 0; //@line 7703
 do {
  if (!$7) {
   $9 = $5 + 12 | 0; //@line 7707
   HEAP32[$9 >> 2] = 0; //@line 7708
   $30 = 0; //@line 7709
   $45 = $9; //@line 7709
  } else {
   $11 = HEAP32[$7 + 4 >> 2] | 0; //@line 7712
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 7713
   FUNCTION_TABLE_vii[$11 & 31]($5, $1); //@line 7714
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 265; //@line 7717
    HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 7719
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 7721
    HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 7723
    HEAP8[$AsyncCtx + 16 >> 0] = $2; //@line 7725
    HEAP8[$AsyncCtx + 17 >> 0] = $3; //@line 7727
    HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 7729
    sp = STACKTOP; //@line 7730
    STACKTOP = sp; //@line 7731
    return 0; //@line 7731
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 7733
   $$pre$i = HEAP32[$6 >> 2] | 0; //@line 7734
   $18 = $5 + 12 | 0; //@line 7735
   HEAP32[$18 >> 2] = $$pre$i; //@line 7736
   if (!$$pre$i) {
    $30 = 0; //@line 7739
    $45 = $18; //@line 7739
   } else {
    $21 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 7743
    $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 7744
    FUNCTION_TABLE_vii[$21 & 31]($4, $5); //@line 7745
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 266; //@line 7748
     HEAP32[$AsyncCtx2 + 4 >> 2] = $5; //@line 7750
     HEAP32[$AsyncCtx2 + 8 >> 2] = $4; //@line 7752
     HEAP32[$AsyncCtx2 + 12 >> 2] = $18; //@line 7754
     HEAP8[$AsyncCtx2 + 16 >> 0] = $2; //@line 7756
     HEAP8[$AsyncCtx2 + 17 >> 0] = $3; //@line 7758
     HEAP32[$AsyncCtx2 + 20 >> 2] = $0; //@line 7760
     HEAP32[$AsyncCtx2 + 24 >> 2] = $18; //@line 7762
     sp = STACKTOP; //@line 7763
     STACKTOP = sp; //@line 7764
     return 0; //@line 7764
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7766
     $30 = HEAP32[$18 >> 2] | 0; //@line 7768
     $45 = $18; //@line 7768
     break;
    }
   }
  }
 } while (0);
 $29 = $4 + 12 | 0; //@line 7774
 HEAP32[$29 >> 2] = $30; //@line 7775
 $31 = $4 + 16 | 0; //@line 7776
 HEAP8[$31 >> 0] = $2; //@line 7777
 HEAP8[$4 + 17 >> 0] = $3; //@line 7779
 $33 = _equeue_alloc($0, 20) | 0; //@line 7780
 do {
  if (!$33) {
   $$0$i = 0; //@line 7784
  } else {
   $35 = HEAP32[$29 >> 2] | 0; //@line 7786
   do {
    if (!$35) {
     $49 = 0; //@line 7790
    } else {
     $38 = HEAP32[$35 + 4 >> 2] | 0; //@line 7793
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 7794
     FUNCTION_TABLE_vii[$38 & 31]($33, $4); //@line 7795
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 267; //@line 7798
      HEAP32[$AsyncCtx5 + 4 >> 2] = $29; //@line 7800
      HEAP32[$AsyncCtx5 + 8 >> 2] = $33; //@line 7802
      HEAP32[$AsyncCtx5 + 12 >> 2] = $31; //@line 7804
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 7806
      HEAP32[$AsyncCtx5 + 20 >> 2] = $29; //@line 7808
      HEAP32[$AsyncCtx5 + 24 >> 2] = $45; //@line 7810
      HEAP32[$AsyncCtx5 + 28 >> 2] = $4; //@line 7812
      HEAP32[$AsyncCtx5 + 32 >> 2] = $5; //@line 7814
      sp = STACKTOP; //@line 7815
      STACKTOP = sp; //@line 7816
      return 0; //@line 7816
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 7818
      $49 = HEAP32[$29 >> 2] | 0; //@line 7820
      break;
     }
    }
   } while (0);
   HEAP32[$33 + 12 >> 2] = $49; //@line 7826
   HEAP16[$33 + 16 >> 1] = HEAP16[$31 >> 1] | 0; //@line 7829
   _equeue_event_dtor($33, 268); //@line 7830
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7831
   $52 = _equeue_post($0, 269, $33) | 0; //@line 7832
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 270; //@line 7835
    HEAP32[$AsyncCtx15 + 4 >> 2] = $29; //@line 7837
    HEAP32[$AsyncCtx15 + 8 >> 2] = $45; //@line 7839
    HEAP32[$AsyncCtx15 + 12 >> 2] = $4; //@line 7841
    HEAP32[$AsyncCtx15 + 16 >> 2] = $5; //@line 7843
    sp = STACKTOP; //@line 7844
    STACKTOP = sp; //@line 7845
    return 0; //@line 7845
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 7847
    $$0$i = $52; //@line 7848
    break;
   }
  }
 } while (0);
 $57 = HEAP32[$29 >> 2] | 0; //@line 7853
 do {
  if ($57 | 0) {
   $60 = HEAP32[$57 + 8 >> 2] | 0; //@line 7858
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7859
   FUNCTION_TABLE_vi[$60 & 1023]($4); //@line 7860
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 271; //@line 7863
    HEAP32[$AsyncCtx8 + 4 >> 2] = $45; //@line 7865
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 7867
    HEAP32[$AsyncCtx8 + 12 >> 2] = $5; //@line 7869
    sp = STACKTOP; //@line 7870
    STACKTOP = sp; //@line 7871
    return 0; //@line 7871
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 7873
    break;
   }
  }
 } while (0);
 $64 = HEAP32[$45 >> 2] | 0; //@line 7878
 if (!$64) {
  STACKTOP = sp; //@line 7881
  return $$0$i | 0; //@line 7881
 }
 $67 = HEAP32[$64 + 8 >> 2] | 0; //@line 7884
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7885
 FUNCTION_TABLE_vi[$67 & 1023]($5); //@line 7886
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 272; //@line 7889
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 7891
  sp = STACKTOP; //@line 7892
  STACKTOP = sp; //@line 7893
  return 0; //@line 7893
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 7895
 STACKTOP = sp; //@line 7896
 return $$0$i | 0; //@line 7896
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_9($0) {
 $0 = $0 | 0;
 var $$pre121 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 17839
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17841
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17843
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17845
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17847
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17849
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17851
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17853
 $$pre121 = HEAP32[$10 >> 2] | 0; //@line 17854
 if ($$pre121 | 0) {
  $17 = HEAP32[$$pre121 + 4 >> 2] | 0; //@line 17858
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(28) | 0; //@line 17859
  FUNCTION_TABLE_vii[$17 & 31]($12, $6); //@line 17860
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 565; //@line 17863
   $18 = $ReallocAsyncCtx11 + 4 | 0; //@line 17864
   HEAP32[$18 >> 2] = $2; //@line 17865
   $19 = $ReallocAsyncCtx11 + 8 | 0; //@line 17866
   HEAP32[$19 >> 2] = $4; //@line 17867
   $20 = $ReallocAsyncCtx11 + 12 | 0; //@line 17868
   HEAP32[$20 >> 2] = $6; //@line 17869
   $21 = $ReallocAsyncCtx11 + 16 | 0; //@line 17870
   HEAP32[$21 >> 2] = $8; //@line 17871
   $22 = $ReallocAsyncCtx11 + 20 | 0; //@line 17872
   HEAP32[$22 >> 2] = $10; //@line 17873
   $23 = $ReallocAsyncCtx11 + 24 | 0; //@line 17874
   HEAP32[$23 >> 2] = $14; //@line 17875
   sp = STACKTOP; //@line 17876
   return;
  }
  ___async_unwind = 0; //@line 17879
  HEAP32[$ReallocAsyncCtx11 >> 2] = 565; //@line 17880
  $18 = $ReallocAsyncCtx11 + 4 | 0; //@line 17881
  HEAP32[$18 >> 2] = $2; //@line 17882
  $19 = $ReallocAsyncCtx11 + 8 | 0; //@line 17883
  HEAP32[$19 >> 2] = $4; //@line 17884
  $20 = $ReallocAsyncCtx11 + 12 | 0; //@line 17885
  HEAP32[$20 >> 2] = $6; //@line 17886
  $21 = $ReallocAsyncCtx11 + 16 | 0; //@line 17887
  HEAP32[$21 >> 2] = $8; //@line 17888
  $22 = $ReallocAsyncCtx11 + 20 | 0; //@line 17889
  HEAP32[$22 >> 2] = $10; //@line 17890
  $23 = $ReallocAsyncCtx11 + 24 | 0; //@line 17891
  HEAP32[$23 >> 2] = $14; //@line 17892
  sp = STACKTOP; //@line 17893
  return;
 }
 HEAP32[$14 >> 2] = 0; //@line 17896
 $24 = $8 + 12 | 0; //@line 17897
 HEAP32[$8 >> 2] = 567; //@line 17898
 HEAP32[$8 + 4 >> 2] = 0; //@line 17900
 HEAP32[$8 + 8 >> 2] = $4; //@line 17902
 HEAP32[$24 >> 2] = 848; //@line 17903
 $25 = $4 + 1260 | 0; //@line 17904
 if (($25 | 0) == ($8 | 0)) {
  $44 = HEAP32[214] | 0; //@line 17908
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 17909
  FUNCTION_TABLE_vi[$44 & 1023]($8); //@line 17910
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 570; //@line 17913
   $45 = $ReallocAsyncCtx15 + 4 | 0; //@line 17914
   HEAP32[$45 >> 2] = $8; //@line 17915
   $46 = $ReallocAsyncCtx15 + 8 | 0; //@line 17916
   HEAP32[$46 >> 2] = $2; //@line 17917
   sp = STACKTOP; //@line 17918
   return;
  }
  ___async_unwind = 0; //@line 17921
  HEAP32[$ReallocAsyncCtx15 >> 2] = 570; //@line 17922
  $45 = $ReallocAsyncCtx15 + 4 | 0; //@line 17923
  HEAP32[$45 >> 2] = $8; //@line 17924
  $46 = $ReallocAsyncCtx15 + 8 | 0; //@line 17925
  HEAP32[$46 >> 2] = $2; //@line 17926
  sp = STACKTOP; //@line 17927
  return;
 }
 $27 = $4 + 1272 | 0; //@line 17930
 $28 = HEAP32[$27 >> 2] | 0; //@line 17931
 if (!$28) {
  $38 = HEAP32[213] | 0; //@line 17935
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(20) | 0; //@line 17936
  FUNCTION_TABLE_vii[$38 & 31]($25, $8); //@line 17937
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 569; //@line 17940
   $39 = $ReallocAsyncCtx14 + 4 | 0; //@line 17941
   HEAP32[$39 >> 2] = $24; //@line 17942
   $40 = $ReallocAsyncCtx14 + 8 | 0; //@line 17943
   HEAP32[$40 >> 2] = $27; //@line 17944
   $41 = $ReallocAsyncCtx14 + 12 | 0; //@line 17945
   HEAP32[$41 >> 2] = $8; //@line 17946
   $42 = $ReallocAsyncCtx14 + 16 | 0; //@line 17947
   HEAP32[$42 >> 2] = $2; //@line 17948
   sp = STACKTOP; //@line 17949
   return;
  }
  ___async_unwind = 0; //@line 17952
  HEAP32[$ReallocAsyncCtx14 >> 2] = 569; //@line 17953
  $39 = $ReallocAsyncCtx14 + 4 | 0; //@line 17954
  HEAP32[$39 >> 2] = $24; //@line 17955
  $40 = $ReallocAsyncCtx14 + 8 | 0; //@line 17956
  HEAP32[$40 >> 2] = $27; //@line 17957
  $41 = $ReallocAsyncCtx14 + 12 | 0; //@line 17958
  HEAP32[$41 >> 2] = $8; //@line 17959
  $42 = $ReallocAsyncCtx14 + 16 | 0; //@line 17960
  HEAP32[$42 >> 2] = $2; //@line 17961
  sp = STACKTOP; //@line 17962
  return;
 } else {
  $31 = HEAP32[$28 + 8 >> 2] | 0; //@line 17966
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 17967
  FUNCTION_TABLE_vi[$31 & 1023]($25); //@line 17968
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 568; //@line 17971
   $32 = $ReallocAsyncCtx13 + 4 | 0; //@line 17972
   HEAP32[$32 >> 2] = $24; //@line 17973
   $33 = $ReallocAsyncCtx13 + 8 | 0; //@line 17974
   HEAP32[$33 >> 2] = $27; //@line 17975
   $34 = $ReallocAsyncCtx13 + 12 | 0; //@line 17976
   HEAP32[$34 >> 2] = $25; //@line 17977
   $35 = $ReallocAsyncCtx13 + 16 | 0; //@line 17978
   HEAP32[$35 >> 2] = $8; //@line 17979
   $36 = $ReallocAsyncCtx13 + 20 | 0; //@line 17980
   HEAP32[$36 >> 2] = $2; //@line 17981
   sp = STACKTOP; //@line 17982
   return;
  }
  ___async_unwind = 0; //@line 17985
  HEAP32[$ReallocAsyncCtx13 >> 2] = 568; //@line 17986
  $32 = $ReallocAsyncCtx13 + 4 | 0; //@line 17987
  HEAP32[$32 >> 2] = $24; //@line 17988
  $33 = $ReallocAsyncCtx13 + 8 | 0; //@line 17989
  HEAP32[$33 >> 2] = $27; //@line 17990
  $34 = $ReallocAsyncCtx13 + 12 | 0; //@line 17991
  HEAP32[$34 >> 2] = $25; //@line 17992
  $35 = $ReallocAsyncCtx13 + 16 | 0; //@line 17993
  HEAP32[$35 >> 2] = $8; //@line 17994
  $36 = $ReallocAsyncCtx13 + 20 | 0; //@line 17995
  HEAP32[$36 >> 2] = $2; //@line 17996
  sp = STACKTOP; //@line 17997
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_123($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $38 = 0, $39 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 25581
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25583
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25587
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 16 >> 2] >> 2]; //@line 25591
 $9 = $6 + 16 | 0; //@line 25592
 $10 = $6 + 28 | 0; //@line 25593
 $11 = HEAP32[$10 >> 2] | 0; //@line 25594
 if ($11 | 0) {
  $13 = $2 + 1896 | 0; //@line 25597
  if (($13 | 0) != ($9 | 0)) {
   $15 = $2 + 1908 | 0; //@line 25600
   $16 = HEAP32[$15 >> 2] | 0; //@line 25601
   if (!$16) {
    $27 = HEAP32[$11 + 4 >> 2] | 0; //@line 25605
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 25606
    FUNCTION_TABLE_vii[$27 & 31]($13, $9); //@line 25607
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 304; //@line 25610
     $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 25611
     HEAP32[$28 >> 2] = $10; //@line 25612
     $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 25613
     HEAP32[$29 >> 2] = $15; //@line 25614
     $30 = $ReallocAsyncCtx4 + 12 | 0; //@line 25615
     HEAP32[$30 >> 2] = $6; //@line 25616
     $31 = $ReallocAsyncCtx4 + 16 | 0; //@line 25617
     HEAP32[$31 >> 2] = $2; //@line 25618
     sp = STACKTOP; //@line 25619
     return;
    }
    ___async_unwind = 0; //@line 25622
    HEAP32[$ReallocAsyncCtx4 >> 2] = 304; //@line 25623
    $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 25624
    HEAP32[$28 >> 2] = $10; //@line 25625
    $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 25626
    HEAP32[$29 >> 2] = $15; //@line 25627
    $30 = $ReallocAsyncCtx4 + 12 | 0; //@line 25628
    HEAP32[$30 >> 2] = $6; //@line 25629
    $31 = $ReallocAsyncCtx4 + 16 | 0; //@line 25630
    HEAP32[$31 >> 2] = $2; //@line 25631
    sp = STACKTOP; //@line 25632
    return;
   } else {
    $19 = HEAP32[$16 + 8 >> 2] | 0; //@line 25636
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 25637
    FUNCTION_TABLE_vi[$19 & 1023]($13); //@line 25638
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 303; //@line 25641
     $20 = $ReallocAsyncCtx3 + 4 | 0; //@line 25642
     HEAP32[$20 >> 2] = $10; //@line 25643
     $21 = $ReallocAsyncCtx3 + 8 | 0; //@line 25644
     HEAP32[$21 >> 2] = $15; //@line 25645
     $22 = $ReallocAsyncCtx3 + 12 | 0; //@line 25646
     HEAP32[$22 >> 2] = $13; //@line 25647
     $23 = $ReallocAsyncCtx3 + 16 | 0; //@line 25648
     HEAP32[$23 >> 2] = $9; //@line 25649
     $24 = $ReallocAsyncCtx3 + 20 | 0; //@line 25650
     HEAP32[$24 >> 2] = $6; //@line 25651
     $25 = $ReallocAsyncCtx3 + 24 | 0; //@line 25652
     HEAP32[$25 >> 2] = $2; //@line 25653
     sp = STACKTOP; //@line 25654
     return;
    }
    ___async_unwind = 0; //@line 25657
    HEAP32[$ReallocAsyncCtx3 >> 2] = 303; //@line 25658
    $20 = $ReallocAsyncCtx3 + 4 | 0; //@line 25659
    HEAP32[$20 >> 2] = $10; //@line 25660
    $21 = $ReallocAsyncCtx3 + 8 | 0; //@line 25661
    HEAP32[$21 >> 2] = $15; //@line 25662
    $22 = $ReallocAsyncCtx3 + 12 | 0; //@line 25663
    HEAP32[$22 >> 2] = $13; //@line 25664
    $23 = $ReallocAsyncCtx3 + 16 | 0; //@line 25665
    HEAP32[$23 >> 2] = $9; //@line 25666
    $24 = $ReallocAsyncCtx3 + 20 | 0; //@line 25667
    HEAP32[$24 >> 2] = $6; //@line 25668
    $25 = $ReallocAsyncCtx3 + 24 | 0; //@line 25669
    HEAP32[$25 >> 2] = $2; //@line 25670
    sp = STACKTOP; //@line 25671
    return;
   }
  }
 }
 $32 = $6 + 32 | 0; //@line 25676
 $33 = $6 + 44 | 0; //@line 25677
 $34 = HEAP32[$33 >> 2] | 0; //@line 25678
 if (!$34) {
  return;
 }
 $36 = $2 + 1912 | 0; //@line 25683
 if (($36 | 0) == ($32 | 0)) {
  return;
 }
 $38 = $2 + 1924 | 0; //@line 25688
 $39 = HEAP32[$38 >> 2] | 0; //@line 25689
 if (!$39) {
  $48 = HEAP32[$34 + 4 >> 2] | 0; //@line 25693
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 25694
  FUNCTION_TABLE_vii[$48 & 31]($36, $32); //@line 25695
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 306; //@line 25698
   $49 = $ReallocAsyncCtx6 + 4 | 0; //@line 25699
   HEAP32[$49 >> 2] = $33; //@line 25700
   $50 = $ReallocAsyncCtx6 + 8 | 0; //@line 25701
   HEAP32[$50 >> 2] = $38; //@line 25702
   sp = STACKTOP; //@line 25703
   return;
  }
  ___async_unwind = 0; //@line 25706
  HEAP32[$ReallocAsyncCtx6 >> 2] = 306; //@line 25707
  $49 = $ReallocAsyncCtx6 + 4 | 0; //@line 25708
  HEAP32[$49 >> 2] = $33; //@line 25709
  $50 = $ReallocAsyncCtx6 + 8 | 0; //@line 25710
  HEAP32[$50 >> 2] = $38; //@line 25711
  sp = STACKTOP; //@line 25712
  return;
 } else {
  $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 25716
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 25717
  FUNCTION_TABLE_vi[$42 & 1023]($36); //@line 25718
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 305; //@line 25721
   $43 = $ReallocAsyncCtx5 + 4 | 0; //@line 25722
   HEAP32[$43 >> 2] = $33; //@line 25723
   $44 = $ReallocAsyncCtx5 + 8 | 0; //@line 25724
   HEAP32[$44 >> 2] = $38; //@line 25725
   $45 = $ReallocAsyncCtx5 + 12 | 0; //@line 25726
   HEAP32[$45 >> 2] = $36; //@line 25727
   $46 = $ReallocAsyncCtx5 + 16 | 0; //@line 25728
   HEAP32[$46 >> 2] = $32; //@line 25729
   sp = STACKTOP; //@line 25730
   return;
  }
  ___async_unwind = 0; //@line 25733
  HEAP32[$ReallocAsyncCtx5 >> 2] = 305; //@line 25734
  $43 = $ReallocAsyncCtx5 + 4 | 0; //@line 25735
  HEAP32[$43 >> 2] = $33; //@line 25736
  $44 = $ReallocAsyncCtx5 + 8 | 0; //@line 25737
  HEAP32[$44 >> 2] = $38; //@line 25738
  $45 = $ReallocAsyncCtx5 + 12 | 0; //@line 25739
  HEAP32[$45 >> 2] = $36; //@line 25740
  $46 = $ReallocAsyncCtx5 + 16 | 0; //@line 25741
  HEAP32[$46 >> 2] = $32; //@line 25742
  sp = STACKTOP; //@line 25743
  return;
 }
}
function __ZN10LoRaMacMib11get_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$sroa$5 = 0, $$sroa$5$0$$sroa_raw_idx = 0, $34 = 0, $39 = 0, $40 = 0, $45 = 0, sp = 0;
 sp = STACKTOP; //@line 22386
 STACKTOP = STACKTOP + 16 | 0; //@line 22387
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 22387
 $$sroa$5 = sp; //@line 22388
 L1 : do {
  if (!$1) {
   $$0 = -1003; //@line 22392
  } else {
   do {
    switch (HEAP32[$1 >> 2] | 0) {
    case 0:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 >> 2]; //@line 22400
      $$0 = 0; //@line 22401
      break L1;
      break;
     }
    case 1:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 12 >> 0] | 0; //@line 22409
      $$0 = 0; //@line 22410
      break L1;
      break;
     }
    case 2:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 796 >> 0] | 0; //@line 22418
      $$0 = 0; //@line 22419
      break L1;
      break;
     }
    case 3:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 588 >> 2]; //@line 22427
      $$0 = 0; //@line 22428
      break L1;
      break;
     }
    case 4:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 592 >> 2]; //@line 22436
      $$0 = 0; //@line 22437
      break L1;
      break;
     }
    case 5:
     {
      HEAP32[$1 + 4 >> 2] = $2 + 552; //@line 22444
      $$0 = 0; //@line 22445
      break L1;
      break;
     }
    case 6:
     {
      HEAP32[$1 + 4 >> 2] = $2 + 568; //@line 22452
      $$0 = 0; //@line 22453
      break L1;
      break;
     }
    case 7:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 8 >> 0] | 0; //@line 22461
      $$0 = 0; //@line 22462
      break L1;
      break;
     }
    case 8:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 9 >> 0] | 0; //@line 22470
      $$0 = 0; //@line 22471
      break L1;
      break;
     }
    case 9:
     {
      HEAP32[$1 + 4 >> 2] = __ZN7LoRaPHY16get_phy_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 22479
      $$0 = 0; //@line 22480
      break L1;
      break;
     }
    case 10:
     {
      $34 = $2 + 772 | 0; //@line 22487
      $39 = HEAP32[$34 + 4 >> 2] | 0; //@line 22492
      $40 = $1 + 4 | 0; //@line 22493
      HEAP32[$40 >> 2] = HEAP32[$34 >> 2]; //@line 22495
      HEAP32[$40 + 4 >> 2] = $39; //@line 22498
      $$0 = 0; //@line 22499
      break L1;
      break;
     }
    case 11:
     {
      $45 = __ZN7LoRaPHY24get_default_rx2_datarateEv(HEAP32[$0 >> 2] | 0) | 0; //@line 22505
      HEAP32[$1 + 4 >> 2] = __ZN7LoRaPHY25get_default_rx2_frequencyEv(HEAP32[$0 >> 2] | 0) | 0; //@line 22509
      HEAP8[$1 + 8 >> 0] = $45; //@line 22511
      $$sroa$5$0$$sroa_raw_idx = $1 + 9 | 0; //@line 22512
      HEAP8[$$sroa$5$0$$sroa_raw_idx >> 0] = HEAP8[$$sroa$5 >> 0] | 0; //@line 22513
      HEAP8[$$sroa$5$0$$sroa_raw_idx + 1 >> 0] = HEAP8[$$sroa$5 + 1 >> 0] | 0; //@line 22513
      HEAP8[$$sroa$5$0$$sroa_raw_idx + 2 >> 0] = HEAP8[$$sroa$5 + 2 >> 0] | 0; //@line 22513
      $$0 = 0; //@line 22514
      break L1;
      break;
     }
    case 13:
     {
      HEAP32[$1 + 4 >> 2] = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 1) | 0; //@line 22522
      $$0 = 0; //@line 22523
      break L1;
      break;
     }
    case 12:
     {
      HEAP32[$1 + 4 >> 2] = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 0) | 0; //@line 22531
      $$0 = 0; //@line 22532
      break L1;
      break;
     }
    case 14:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 768 >> 0] | 0; //@line 22540
      $$0 = 0; //@line 22541
      break L1;
      break;
     }
    case 15:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 748 >> 2]; //@line 22549
      $$0 = 0; //@line 22550
      break L1;
      break;
     }
    case 16:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 752 >> 2]; //@line 22558
      $$0 = 0; //@line 22559
      break L1;
      break;
     }
    case 17:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 756 >> 2]; //@line 22567
      $$0 = 0; //@line 22568
      break L1;
      break;
     }
    case 18:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 760 >> 2]; //@line 22576
      $$0 = 0; //@line 22577
      break L1;
      break;
     }
    case 19:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 764 >> 2]; //@line 22585
      $$0 = 0; //@line 22586
      break L1;
      break;
     }
    case 20:
     {
      HEAP8[$1 + 4 >> 0] = __ZN7LoRaPHY23get_default_tx_datarateEv(HEAP32[$0 >> 2] | 0) | 0; //@line 22594
      $$0 = 0; //@line 22595
      break L1;
      break;
     }
    case 21:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 737 >> 0] | 0; //@line 22603
      $$0 = 0; //@line 22604
      break L1;
      break;
     }
    case 23:
     {
      HEAP8[$1 + 4 >> 0] = __ZN7LoRaPHY20get_default_tx_powerEv(HEAP32[$0 >> 2] | 0) | 0; //@line 22612
      $$0 = 0; //@line 22613
      break L1;
      break;
     }
    case 22:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 736 >> 0] | 0; //@line 22621
      $$0 = 0; //@line 22622
      break L1;
      break;
     }
    case 24:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 596 >> 2]; //@line 22630
      $$0 = 0; //@line 22631
      break L1;
      break;
     }
    case 25:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 600 >> 2]; //@line 22639
      $$0 = 0; //@line 22640
      break L1;
      break;
     }
    case 26:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 848 >> 2]; //@line 22648
      $$0 = 0; //@line 22649
      break L1;
      break;
     }
    case 27:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 740 >> 2]; //@line 22657
      $$0 = 0; //@line 22658
      break L1;
      break;
     }
    case 28:
     {
      HEAP8[$1 + 4 >> 0] = HEAP8[$2 + 744 >> 0] | 0; //@line 22666
      $$0 = 0; //@line 22667
      break L1;
      break;
     }
    case 29:
     {
      HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 788 >> 2]; //@line 22675
      $$0 = 0; //@line 22676
      break L1;
      break;
     }
    default:
     {
      $$0 = -1002; //@line 22681
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 STACKTOP = sp; //@line 22688
 return $$0 | 0; //@line 22688
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $20 = 0, $34 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx16 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 2249
 STACKTOP = STACKTOP + 64 | 0; //@line 2250
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 2250
 $vararg_buffer12 = sp + 48 | 0; //@line 2251
 $vararg_buffer10 = sp + 40 | 0; //@line 2252
 $vararg_buffer7 = sp + 32 | 0; //@line 2253
 $vararg_buffer5 = sp + 24 | 0; //@line 2254
 $vararg_buffer1 = sp + 8 | 0; //@line 2255
 _printf(10880, sp) | 0; //@line 2257
 $5 = $3 & 65535; //@line 2259
 HEAP32[$vararg_buffer1 >> 2] = $1; //@line 2260
 HEAP32[$vararg_buffer1 + 4 >> 2] = $2 << 24 >> 24; //@line 2262
 HEAP32[$vararg_buffer1 + 8 >> 2] = $5; //@line 2264
 _printf(10894, $vararg_buffer1) | 0; //@line 2265
 $AsyncCtx27 = _emscripten_alloc_async_context(52, sp) | 0; //@line 2266
 _putchar(10) | 0; //@line 2267
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 103; //@line 2270
  HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 2272
  HEAP32[$AsyncCtx27 + 8 >> 2] = $1; //@line 2274
  HEAP8[$AsyncCtx27 + 12 >> 0] = $2; //@line 2276
  HEAP32[$AsyncCtx27 + 16 >> 2] = $5; //@line 2278
  HEAP32[$AsyncCtx27 + 20 >> 2] = $vararg_buffer5; //@line 2280
  HEAP32[$AsyncCtx27 + 24 >> 2] = $vararg_buffer5; //@line 2282
  HEAP32[$AsyncCtx27 + 28 >> 2] = $vararg_buffer7; //@line 2284
  HEAP32[$AsyncCtx27 + 32 >> 2] = $vararg_buffer7; //@line 2286
  HEAP32[$AsyncCtx27 + 36 >> 2] = $vararg_buffer10; //@line 2288
  HEAP32[$AsyncCtx27 + 40 >> 2] = $vararg_buffer10; //@line 2290
  HEAP32[$AsyncCtx27 + 44 >> 2] = $vararg_buffer12; //@line 2292
  HEAP32[$AsyncCtx27 + 48 >> 2] = $vararg_buffer12; //@line 2294
  sp = STACKTOP; //@line 2295
  STACKTOP = sp; //@line 2296
  return;
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 2298
 $20 = HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] | 0; //@line 2301
 $AsyncCtx = _emscripten_alloc_async_context(48, sp) | 0; //@line 2302
 FUNCTION_TABLE_vii[$20 & 31]($0, $1); //@line 2303
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 104; //@line 2306
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2308
  HEAP8[$AsyncCtx + 8 >> 0] = $2; //@line 2310
  HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 2312
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer5; //@line 2314
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer5; //@line 2316
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer7; //@line 2318
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer7; //@line 2320
  HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer10; //@line 2322
  HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer10; //@line 2324
  HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer12; //@line 2326
  HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer12; //@line 2328
  sp = STACKTOP; //@line 2329
  STACKTOP = sp; //@line 2330
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2332
 $34 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 2335
 $AsyncCtx16 = _emscripten_alloc_async_context(40, sp) | 0; //@line 2336
 FUNCTION_TABLE_viiiiiiiiiiiiii[$34 & 1]($0, 0, $2, 0, 0, 4800, 0, 5, 0, 0, 0, 0, 0, $5); //@line 2337
 if (___async) {
  HEAP32[$AsyncCtx16 >> 2] = 105; //@line 2340
  HEAP32[$AsyncCtx16 + 4 >> 2] = $0; //@line 2342
  HEAP32[$AsyncCtx16 + 8 >> 2] = $vararg_buffer5; //@line 2344
  HEAP32[$AsyncCtx16 + 12 >> 2] = $vararg_buffer5; //@line 2346
  HEAP32[$AsyncCtx16 + 16 >> 2] = $vararg_buffer7; //@line 2348
  HEAP32[$AsyncCtx16 + 20 >> 2] = $vararg_buffer7; //@line 2350
  HEAP32[$AsyncCtx16 + 24 >> 2] = $vararg_buffer10; //@line 2352
  HEAP32[$AsyncCtx16 + 28 >> 2] = $vararg_buffer10; //@line 2354
  HEAP32[$AsyncCtx16 + 32 >> 2] = $vararg_buffer12; //@line 2356
  HEAP32[$AsyncCtx16 + 36 >> 2] = $vararg_buffer12; //@line 2358
  sp = STACKTOP; //@line 2359
  STACKTOP = sp; //@line 2360
  return;
 }
 _emscripten_free_async_context($AsyncCtx16 | 0); //@line 2362
 HEAP8[$0 + 688 >> 0] = 2; //@line 2364
 _printf(10880, $vararg_buffer5) | 0; //@line 2365
 HEAP32[$vararg_buffer7 >> 2] = 3; //@line 2366
 _printf(10946, $vararg_buffer7) | 0; //@line 2367
 $AsyncCtx23 = _emscripten_alloc_async_context(24, sp) | 0; //@line 2368
 _putchar(10) | 0; //@line 2369
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 106; //@line 2372
  HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 2374
  HEAP32[$AsyncCtx23 + 8 >> 2] = $vararg_buffer10; //@line 2376
  HEAP32[$AsyncCtx23 + 12 >> 2] = $vararg_buffer10; //@line 2378
  HEAP32[$AsyncCtx23 + 16 >> 2] = $vararg_buffer12; //@line 2380
  HEAP32[$AsyncCtx23 + 20 >> 2] = $vararg_buffer12; //@line 2382
  sp = STACKTOP; //@line 2383
  STACKTOP = sp; //@line 2384
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 2386
 $AsyncCtx30 = _emscripten_alloc_async_context(20, sp) | 0; //@line 2387
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 2388
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 107; //@line 2391
  HEAP32[$AsyncCtx30 + 4 >> 2] = $vararg_buffer10; //@line 2393
  HEAP32[$AsyncCtx30 + 8 >> 2] = $vararg_buffer10; //@line 2395
  HEAP32[$AsyncCtx30 + 12 >> 2] = $vararg_buffer12; //@line 2397
  HEAP32[$AsyncCtx30 + 16 >> 2] = $vararg_buffer12; //@line 2399
  sp = STACKTOP; //@line 2400
  STACKTOP = sp; //@line 2401
  return;
 }
 _emscripten_free_async_context($AsyncCtx30 | 0); //@line 2403
 _printf(10880, $vararg_buffer10) | 0; //@line 2404
 HEAP32[$vararg_buffer12 >> 2] = 3; //@line 2405
 _printf(10975, $vararg_buffer12) | 0; //@line 2406
 $AsyncCtx19 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2407
 _putchar(10) | 0; //@line 2408
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 108; //@line 2411
  sp = STACKTOP; //@line 2412
  STACKTOP = sp; //@line 2413
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 2415
  STACKTOP = sp; //@line 2416
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$pre$i = 0, $10 = 0, $16 = 0, $19 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $34 = 0, $4 = 0, $41 = 0, $45 = 0, $48 = 0, $5 = 0, $53 = 0, $56 = 0, $6 = 0, $60 = 0, $63 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 7494
 STACKTOP = STACKTOP + 48 | 0; //@line 7495
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 7495
 $3 = sp + 16 | 0; //@line 7496
 $4 = sp; //@line 7497
 $5 = $1 + 12 | 0; //@line 7498
 $6 = HEAP32[$5 >> 2] | 0; //@line 7499
 do {
  if (!$6) {
   $8 = $4 + 12 | 0; //@line 7503
   HEAP32[$8 >> 2] = 0; //@line 7504
   $27 = 0; //@line 7505
   $41 = $8; //@line 7505
  } else {
   $10 = HEAP32[$6 + 4 >> 2] | 0; //@line 7508
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 7509
   FUNCTION_TABLE_vii[$10 & 31]($4, $1); //@line 7510
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 257; //@line 7513
    HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 7515
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 7517
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 7519
    HEAP32[$AsyncCtx + 16 >> 2] = $4; //@line 7521
    HEAP32[$AsyncCtx + 20 >> 2] = $5; //@line 7523
    sp = STACKTOP; //@line 7524
    STACKTOP = sp; //@line 7525
    return 0; //@line 7525
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 7527
   $$pre$i = HEAP32[$5 >> 2] | 0; //@line 7528
   $16 = $4 + 12 | 0; //@line 7529
   HEAP32[$16 >> 2] = $$pre$i; //@line 7530
   if (!$$pre$i) {
    $27 = 0; //@line 7533
    $41 = $16; //@line 7533
   } else {
    $19 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 7537
    $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 7538
    FUNCTION_TABLE_vii[$19 & 31]($3, $4); //@line 7539
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 258; //@line 7542
     HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 7544
     HEAP32[$AsyncCtx2 + 8 >> 2] = $16; //@line 7546
     HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 7548
     HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 7550
     HEAP32[$AsyncCtx2 + 20 >> 2] = $4; //@line 7552
     HEAP32[$AsyncCtx2 + 24 >> 2] = $16; //@line 7554
     sp = STACKTOP; //@line 7555
     STACKTOP = sp; //@line 7556
     return 0; //@line 7556
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7558
     $27 = HEAP32[$16 >> 2] | 0; //@line 7560
     $41 = $16; //@line 7560
     break;
    }
   }
  }
 } while (0);
 $26 = $3 + 12 | 0; //@line 7566
 HEAP32[$26 >> 2] = $27; //@line 7567
 $28 = $3 + 16 | 0; //@line 7568
 HEAP32[$28 >> 2] = $2; //@line 7569
 $29 = _equeue_alloc($0, 20) | 0; //@line 7570
 do {
  if (!$29) {
   $$0$i = 0; //@line 7574
  } else {
   $31 = HEAP32[$26 >> 2] | 0; //@line 7576
   do {
    if (!$31) {
     $45 = 0; //@line 7580
    } else {
     $34 = HEAP32[$31 + 4 >> 2] | 0; //@line 7583
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 7584
     FUNCTION_TABLE_vii[$34 & 31]($29, $3); //@line 7585
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 259; //@line 7588
      HEAP32[$AsyncCtx5 + 4 >> 2] = $26; //@line 7590
      HEAP32[$AsyncCtx5 + 8 >> 2] = $29; //@line 7592
      HEAP32[$AsyncCtx5 + 12 >> 2] = $28; //@line 7594
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 7596
      HEAP32[$AsyncCtx5 + 20 >> 2] = $26; //@line 7598
      HEAP32[$AsyncCtx5 + 24 >> 2] = $41; //@line 7600
      HEAP32[$AsyncCtx5 + 28 >> 2] = $3; //@line 7602
      HEAP32[$AsyncCtx5 + 32 >> 2] = $4; //@line 7604
      sp = STACKTOP; //@line 7605
      STACKTOP = sp; //@line 7606
      return 0; //@line 7606
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 7608
      $45 = HEAP32[$26 >> 2] | 0; //@line 7610
      break;
     }
    }
   } while (0);
   HEAP32[$29 + 12 >> 2] = $45; //@line 7616
   HEAP32[$29 + 16 >> 2] = HEAP32[$28 >> 2]; //@line 7619
   _equeue_event_dtor($29, 260); //@line 7620
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7621
   $48 = _equeue_post($0, 261, $29) | 0; //@line 7622
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 262; //@line 7625
    HEAP32[$AsyncCtx15 + 4 >> 2] = $26; //@line 7627
    HEAP32[$AsyncCtx15 + 8 >> 2] = $41; //@line 7629
    HEAP32[$AsyncCtx15 + 12 >> 2] = $3; //@line 7631
    HEAP32[$AsyncCtx15 + 16 >> 2] = $4; //@line 7633
    sp = STACKTOP; //@line 7634
    STACKTOP = sp; //@line 7635
    return 0; //@line 7635
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 7637
    $$0$i = $48; //@line 7638
    break;
   }
  }
 } while (0);
 $53 = HEAP32[$26 >> 2] | 0; //@line 7643
 do {
  if ($53 | 0) {
   $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 7648
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7649
   FUNCTION_TABLE_vi[$56 & 1023]($3); //@line 7650
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 263; //@line 7653
    HEAP32[$AsyncCtx8 + 4 >> 2] = $41; //@line 7655
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 7657
    HEAP32[$AsyncCtx8 + 12 >> 2] = $4; //@line 7659
    sp = STACKTOP; //@line 7660
    STACKTOP = sp; //@line 7661
    return 0; //@line 7661
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 7663
    break;
   }
  }
 } while (0);
 $60 = HEAP32[$41 >> 2] | 0; //@line 7668
 if (!$60) {
  STACKTOP = sp; //@line 7671
  return $$0$i | 0; //@line 7671
 }
 $63 = HEAP32[$60 + 8 >> 2] | 0; //@line 7674
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7675
 FUNCTION_TABLE_vi[$63 & 1023]($4); //@line 7676
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 264; //@line 7679
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 7681
  sp = STACKTOP; //@line 7682
  STACKTOP = sp; //@line 7683
  return 0; //@line 7683
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 7685
 STACKTOP = sp; //@line 7686
 return $$0$i | 0; //@line 7686
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_5($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 17150
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17152
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17154
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17156
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17158
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17162
 $13 = $12 + 12 | 0; //@line 17163
 HEAP32[$12 >> 2] = 559; //@line 17164
 HEAP32[$12 + 4 >> 2] = 0; //@line 17166
 HEAP32[$12 + 8 >> 2] = $4; //@line 17168
 HEAP32[$13 >> 2] = 848; //@line 17169
 $14 = $4 + 1276 | 0; //@line 17170
 if (($14 | 0) == ($12 | 0)) {
  $39 = HEAP32[214] | 0; //@line 17174
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(24) | 0; //@line 17175
  FUNCTION_TABLE_vi[$39 & 1023]($12); //@line 17176
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 562; //@line 17179
   $40 = $ReallocAsyncCtx9 + 4 | 0; //@line 17180
   HEAP32[$40 >> 2] = $2; //@line 17181
   $41 = $ReallocAsyncCtx9 + 8 | 0; //@line 17182
   HEAP32[$41 >> 2] = $4; //@line 17183
   $42 = $ReallocAsyncCtx9 + 12 | 0; //@line 17184
   HEAP32[$42 >> 2] = $6; //@line 17185
   $43 = $ReallocAsyncCtx9 + 16 | 0; //@line 17186
   HEAP32[$43 >> 2] = $12; //@line 17187
   $44 = $ReallocAsyncCtx9 + 20 | 0; //@line 17188
   HEAP32[$44 >> 2] = $8; //@line 17189
   sp = STACKTOP; //@line 17190
   return;
  }
  ___async_unwind = 0; //@line 17193
  HEAP32[$ReallocAsyncCtx9 >> 2] = 562; //@line 17194
  $40 = $ReallocAsyncCtx9 + 4 | 0; //@line 17195
  HEAP32[$40 >> 2] = $2; //@line 17196
  $41 = $ReallocAsyncCtx9 + 8 | 0; //@line 17197
  HEAP32[$41 >> 2] = $4; //@line 17198
  $42 = $ReallocAsyncCtx9 + 12 | 0; //@line 17199
  HEAP32[$42 >> 2] = $6; //@line 17200
  $43 = $ReallocAsyncCtx9 + 16 | 0; //@line 17201
  HEAP32[$43 >> 2] = $12; //@line 17202
  $44 = $ReallocAsyncCtx9 + 20 | 0; //@line 17203
  HEAP32[$44 >> 2] = $8; //@line 17204
  sp = STACKTOP; //@line 17205
  return;
 }
 $16 = $4 + 1288 | 0; //@line 17208
 $17 = HEAP32[$16 >> 2] | 0; //@line 17209
 if (!$17) {
  $30 = HEAP32[213] | 0; //@line 17213
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 17214
  FUNCTION_TABLE_vii[$30 & 31]($14, $12); //@line 17215
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 561; //@line 17218
   $31 = $ReallocAsyncCtx8 + 4 | 0; //@line 17219
   HEAP32[$31 >> 2] = $2; //@line 17220
   $32 = $ReallocAsyncCtx8 + 8 | 0; //@line 17221
   HEAP32[$32 >> 2] = $4; //@line 17222
   $33 = $ReallocAsyncCtx8 + 12 | 0; //@line 17223
   HEAP32[$33 >> 2] = $6; //@line 17224
   $34 = $ReallocAsyncCtx8 + 16 | 0; //@line 17225
   HEAP32[$34 >> 2] = $13; //@line 17226
   $35 = $ReallocAsyncCtx8 + 20 | 0; //@line 17227
   HEAP32[$35 >> 2] = $16; //@line 17228
   $36 = $ReallocAsyncCtx8 + 24 | 0; //@line 17229
   HEAP32[$36 >> 2] = $12; //@line 17230
   $37 = $ReallocAsyncCtx8 + 28 | 0; //@line 17231
   HEAP32[$37 >> 2] = $8; //@line 17232
   sp = STACKTOP; //@line 17233
   return;
  }
  ___async_unwind = 0; //@line 17236
  HEAP32[$ReallocAsyncCtx8 >> 2] = 561; //@line 17237
  $31 = $ReallocAsyncCtx8 + 4 | 0; //@line 17238
  HEAP32[$31 >> 2] = $2; //@line 17239
  $32 = $ReallocAsyncCtx8 + 8 | 0; //@line 17240
  HEAP32[$32 >> 2] = $4; //@line 17241
  $33 = $ReallocAsyncCtx8 + 12 | 0; //@line 17242
  HEAP32[$33 >> 2] = $6; //@line 17243
  $34 = $ReallocAsyncCtx8 + 16 | 0; //@line 17244
  HEAP32[$34 >> 2] = $13; //@line 17245
  $35 = $ReallocAsyncCtx8 + 20 | 0; //@line 17246
  HEAP32[$35 >> 2] = $16; //@line 17247
  $36 = $ReallocAsyncCtx8 + 24 | 0; //@line 17248
  HEAP32[$36 >> 2] = $12; //@line 17249
  $37 = $ReallocAsyncCtx8 + 28 | 0; //@line 17250
  HEAP32[$37 >> 2] = $8; //@line 17251
  sp = STACKTOP; //@line 17252
  return;
 } else {
  $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 17256
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 17257
  FUNCTION_TABLE_vi[$20 & 1023]($14); //@line 17258
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 560; //@line 17261
   $21 = $ReallocAsyncCtx7 + 4 | 0; //@line 17262
   HEAP32[$21 >> 2] = $2; //@line 17263
   $22 = $ReallocAsyncCtx7 + 8 | 0; //@line 17264
   HEAP32[$22 >> 2] = $4; //@line 17265
   $23 = $ReallocAsyncCtx7 + 12 | 0; //@line 17266
   HEAP32[$23 >> 2] = $6; //@line 17267
   $24 = $ReallocAsyncCtx7 + 16 | 0; //@line 17268
   HEAP32[$24 >> 2] = $13; //@line 17269
   $25 = $ReallocAsyncCtx7 + 20 | 0; //@line 17270
   HEAP32[$25 >> 2] = $16; //@line 17271
   $26 = $ReallocAsyncCtx7 + 24 | 0; //@line 17272
   HEAP32[$26 >> 2] = $12; //@line 17273
   $27 = $ReallocAsyncCtx7 + 28 | 0; //@line 17274
   HEAP32[$27 >> 2] = $8; //@line 17275
   $28 = $ReallocAsyncCtx7 + 32 | 0; //@line 17276
   HEAP32[$28 >> 2] = $14; //@line 17277
   sp = STACKTOP; //@line 17278
   return;
  }
  ___async_unwind = 0; //@line 17281
  HEAP32[$ReallocAsyncCtx7 >> 2] = 560; //@line 17282
  $21 = $ReallocAsyncCtx7 + 4 | 0; //@line 17283
  HEAP32[$21 >> 2] = $2; //@line 17284
  $22 = $ReallocAsyncCtx7 + 8 | 0; //@line 17285
  HEAP32[$22 >> 2] = $4; //@line 17286
  $23 = $ReallocAsyncCtx7 + 12 | 0; //@line 17287
  HEAP32[$23 >> 2] = $6; //@line 17288
  $24 = $ReallocAsyncCtx7 + 16 | 0; //@line 17289
  HEAP32[$24 >> 2] = $13; //@line 17290
  $25 = $ReallocAsyncCtx7 + 20 | 0; //@line 17291
  HEAP32[$25 >> 2] = $16; //@line 17292
  $26 = $ReallocAsyncCtx7 + 24 | 0; //@line 17293
  HEAP32[$26 >> 2] = $12; //@line 17294
  $27 = $ReallocAsyncCtx7 + 28 | 0; //@line 17295
  HEAP32[$27 >> 2] = $8; //@line 17296
  $28 = $ReallocAsyncCtx7 + 32 | 0; //@line 17297
  HEAP32[$28 >> 2] = $14; //@line 17298
  sp = STACKTOP; //@line 17299
  return;
 }
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_430($0) {
 $0 = $0 | 0;
 var $$pre17 = 0, $10 = 0, $11 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 25188
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25190
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25192
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25194
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx16 = _emscripten_realloc_async_context(16) | 0; //@line 25199
  _mbed_assert_internal(12827, 12836, 217); //@line 25200
  if (___async) {
   HEAP32[$ReallocAsyncCtx16 >> 2] = 461; //@line 25203
   $9 = $ReallocAsyncCtx16 + 4 | 0; //@line 25204
   HEAP32[$9 >> 2] = $2; //@line 25205
   $10 = $ReallocAsyncCtx16 + 8 | 0; //@line 25206
   HEAP32[$10 >> 2] = $4; //@line 25207
   $11 = $ReallocAsyncCtx16 + 12 | 0; //@line 25208
   HEAP32[$11 >> 2] = $6; //@line 25209
   sp = STACKTOP; //@line 25210
   return;
  }
  ___async_unwind = 0; //@line 25213
  HEAP32[$ReallocAsyncCtx16 >> 2] = 461; //@line 25214
  $9 = $ReallocAsyncCtx16 + 4 | 0; //@line 25215
  HEAP32[$9 >> 2] = $2; //@line 25216
  $10 = $ReallocAsyncCtx16 + 8 | 0; //@line 25217
  HEAP32[$10 >> 2] = $4; //@line 25218
  $11 = $ReallocAsyncCtx16 + 12 | 0; //@line 25219
  HEAP32[$11 >> 2] = $6; //@line 25220
  sp = STACKTOP; //@line 25221
  return;
 }
 HEAP32[$4 + 364 >> 2] = 2; //@line 25225
 $$pre17 = HEAP8[$2 >> 0] | 0; //@line 25226
 if (!($$pre17 & 4)) {
  $16 = HEAP32[$4 + 1324 >> 2] | 0; //@line 25231
  $17 = $16 + 16 | 0; //@line 25232
  $19 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 25234
  $20 = $16 + 28 | 0; //@line 25235
  $21 = HEAP32[$20 >> 2] | 0; //@line 25236
  if (!$21) {
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 25239
   _mbed_assert_internal(14997, 15002, 1102); //@line 25240
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 462; //@line 25243
    $23 = $ReallocAsyncCtx15 + 4 | 0; //@line 25244
    HEAP32[$23 >> 2] = $20; //@line 25245
    $24 = $ReallocAsyncCtx15 + 8 | 0; //@line 25246
    HEAP32[$24 >> 2] = $17; //@line 25247
    $25 = $ReallocAsyncCtx15 + 12 | 0; //@line 25248
    HEAP32[$25 >> 2] = $19; //@line 25249
    $26 = $ReallocAsyncCtx15 + 16 | 0; //@line 25250
    HEAP32[$26 >> 2] = $2; //@line 25251
    $27 = $ReallocAsyncCtx15 + 20 | 0; //@line 25252
    HEAP32[$27 >> 2] = $4; //@line 25253
    sp = STACKTOP; //@line 25254
    return;
   }
   ___async_unwind = 0; //@line 25257
   HEAP32[$ReallocAsyncCtx15 >> 2] = 462; //@line 25258
   $23 = $ReallocAsyncCtx15 + 4 | 0; //@line 25259
   HEAP32[$23 >> 2] = $20; //@line 25260
   $24 = $ReallocAsyncCtx15 + 8 | 0; //@line 25261
   HEAP32[$24 >> 2] = $17; //@line 25262
   $25 = $ReallocAsyncCtx15 + 12 | 0; //@line 25263
   HEAP32[$25 >> 2] = $19; //@line 25264
   $26 = $ReallocAsyncCtx15 + 16 | 0; //@line 25265
   HEAP32[$26 >> 2] = $2; //@line 25266
   $27 = $ReallocAsyncCtx15 + 20 | 0; //@line 25267
   HEAP32[$27 >> 2] = $4; //@line 25268
   sp = STACKTOP; //@line 25269
   return;
  } else {
   $28 = HEAP32[$21 >> 2] | 0; //@line 25272
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 25273
   FUNCTION_TABLE_vii[$28 & 31]($17, $19); //@line 25274
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 463; //@line 25277
    $29 = $ReallocAsyncCtx4 + 4 | 0; //@line 25278
    HEAP32[$29 >> 2] = $2; //@line 25279
    $30 = $ReallocAsyncCtx4 + 8 | 0; //@line 25280
    HEAP32[$30 >> 2] = $4; //@line 25281
    sp = STACKTOP; //@line 25282
    return;
   }
   ___async_unwind = 0; //@line 25285
   HEAP32[$ReallocAsyncCtx4 >> 2] = 463; //@line 25286
   $29 = $ReallocAsyncCtx4 + 4 | 0; //@line 25287
   HEAP32[$29 >> 2] = $2; //@line 25288
   $30 = $ReallocAsyncCtx4 + 8 | 0; //@line 25289
   HEAP32[$30 >> 2] = $4; //@line 25290
   sp = STACKTOP; //@line 25291
   return;
  }
 }
 $31 = $$pre17 & -5; //@line 25295
 HEAP8[$2 >> 0] = $31; //@line 25296
 if (!($31 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $31 & -17; //@line 25303
 $36 = HEAP32[$4 + 1324 >> 2] | 0; //@line 25305
 $37 = $36 + 48 | 0; //@line 25306
 $39 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 25308
 $40 = $36 + 60 | 0; //@line 25309
 $41 = HEAP32[$40 >> 2] | 0; //@line 25310
 if (!$41) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 25313
  _mbed_assert_internal(14997, 15002, 1102); //@line 25314
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 464; //@line 25317
   $43 = $ReallocAsyncCtx14 + 4 | 0; //@line 25318
   HEAP32[$43 >> 2] = $40; //@line 25319
   $44 = $ReallocAsyncCtx14 + 8 | 0; //@line 25320
   HEAP32[$44 >> 2] = $37; //@line 25321
   $45 = $ReallocAsyncCtx14 + 12 | 0; //@line 25322
   HEAP32[$45 >> 2] = $39; //@line 25323
   sp = STACKTOP; //@line 25324
   return;
  }
  ___async_unwind = 0; //@line 25327
  HEAP32[$ReallocAsyncCtx14 >> 2] = 464; //@line 25328
  $43 = $ReallocAsyncCtx14 + 4 | 0; //@line 25329
  HEAP32[$43 >> 2] = $40; //@line 25330
  $44 = $ReallocAsyncCtx14 + 8 | 0; //@line 25331
  HEAP32[$44 >> 2] = $37; //@line 25332
  $45 = $ReallocAsyncCtx14 + 12 | 0; //@line 25333
  HEAP32[$45 >> 2] = $39; //@line 25334
  sp = STACKTOP; //@line 25335
  return;
 } else {
  $46 = HEAP32[$41 >> 2] | 0; //@line 25338
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 25339
  FUNCTION_TABLE_vii[$46 & 31]($37, $39); //@line 25340
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 465; //@line 25343
   sp = STACKTOP; //@line 25344
   return;
  }
  ___async_unwind = 0; //@line 25347
  HEAP32[$ReallocAsyncCtx5 >> 2] = 465; //@line 25348
  sp = STACKTOP; //@line 25349
  return;
 }
}
function _mbedtls_gcm_update__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$061 = 0, $$163 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $67 = 0, $68 = 0, $75 = 0, $8 = 0, $84 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 34692
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34694
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34696
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34698
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34700
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34702
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 34704
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 34706
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 34708
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 34710
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 34712
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 34714
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 34716
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 34718
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 34720
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 34722
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 34724
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 34726
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 34729
  $84 = ___async_retval; //@line 34730
  HEAP32[$84 >> 2] = $$0; //@line 34731
  return;
 }
 if ($2 | 0) {
  $$163 = 0; //@line 34736
  do {
   $67 = $8 + 376 + $$163 | 0; //@line 34740
   $68 = $14 + $$163 | 0; //@line 34741
   if (!(HEAP32[$18 >> 2] | 0)) {
    HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ HEAP8[$68 >> 0]; //@line 34746
   }
   $75 = HEAP8[$68 >> 0] ^ HEAP8[$20 + $$163 >> 0]; //@line 34751
   HEAP8[$16 + $$163 >> 0] = $75; //@line 34753
   if ((HEAP32[$18 >> 2] | 0) == 1) {
    HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ $75; //@line 34759
   }
   $$163 = $$163 + 1 | 0; //@line 34761
  } while ($$163 >>> 0 < $2 >>> 0);
 }
 _gcm_mult($8, $10, $10); //@line 34770
 $35 = $12 - $2 | 0; //@line 34771
 $51 = $14 + $2 | 0; //@line 34772
 $53 = $16 + $2 | 0; //@line 34773
 if (!$35) {
  $$0 = 0; //@line 34776
  $84 = ___async_retval; //@line 34777
  HEAP32[$84 >> 2] = $$0; //@line 34778
  return;
 }
 $36 = $35 >>> 0 < 16 ? $35 : 16; //@line 34782
 $$061 = 16; //@line 34783
 do {
  if ($$061 >>> 0 <= 12) {
   break;
  }
  $$061 = $$061 + -1 | 0; //@line 34789
  $39 = $8 + 360 + $$061 | 0; //@line 34790
  $41 = (HEAP8[$39 >> 0] | 0) + 1 << 24 >> 24; //@line 34792
  HEAP8[$39 >> 0] = $41; //@line 34793
 } while (!($41 << 24 >> 24));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(68) | 0; //@line 34801
 $43 = _mbedtls_cipher_update($28, $30, 16, $6, $32) | 0; //@line 34802
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 680; //@line 34805
  $44 = $ReallocAsyncCtx + 4 | 0; //@line 34806
  HEAP32[$44 >> 2] = $36; //@line 34807
  $45 = $ReallocAsyncCtx + 8 | 0; //@line 34808
  HEAP32[$45 >> 2] = $4; //@line 34809
  $46 = $ReallocAsyncCtx + 12 | 0; //@line 34810
  HEAP32[$46 >> 2] = $6; //@line 34811
  $47 = $ReallocAsyncCtx + 16 | 0; //@line 34812
  HEAP32[$47 >> 2] = $8; //@line 34813
  $48 = $ReallocAsyncCtx + 20 | 0; //@line 34814
  HEAP32[$48 >> 2] = $10; //@line 34815
  $49 = $ReallocAsyncCtx + 24 | 0; //@line 34816
  HEAP32[$49 >> 2] = $35; //@line 34817
  $50 = $ReallocAsyncCtx + 28 | 0; //@line 34818
  HEAP32[$50 >> 2] = $51; //@line 34819
  $52 = $ReallocAsyncCtx + 32 | 0; //@line 34820
  HEAP32[$52 >> 2] = $53; //@line 34821
  $54 = $ReallocAsyncCtx + 36 | 0; //@line 34822
  HEAP32[$54 >> 2] = $18; //@line 34823
  $55 = $ReallocAsyncCtx + 40 | 0; //@line 34824
  HEAP32[$55 >> 2] = $20; //@line 34825
  $56 = $ReallocAsyncCtx + 44 | 0; //@line 34826
  HEAP32[$56 >> 2] = $22; //@line 34827
  $57 = $ReallocAsyncCtx + 48 | 0; //@line 34828
  HEAP32[$57 >> 2] = $24; //@line 34829
  $58 = $ReallocAsyncCtx + 52 | 0; //@line 34830
  HEAP32[$58 >> 2] = $26; //@line 34831
  $59 = $ReallocAsyncCtx + 56 | 0; //@line 34832
  HEAP32[$59 >> 2] = $28; //@line 34833
  $60 = $ReallocAsyncCtx + 60 | 0; //@line 34834
  HEAP32[$60 >> 2] = $30; //@line 34835
  $61 = $ReallocAsyncCtx + 64 | 0; //@line 34836
  HEAP32[$61 >> 2] = $32; //@line 34837
  sp = STACKTOP; //@line 34838
  return;
 }
 HEAP32[___async_retval >> 2] = $43; //@line 34842
 ___async_unwind = 0; //@line 34843
 HEAP32[$ReallocAsyncCtx >> 2] = 680; //@line 34844
 $44 = $ReallocAsyncCtx + 4 | 0; //@line 34845
 HEAP32[$44 >> 2] = $36; //@line 34846
 $45 = $ReallocAsyncCtx + 8 | 0; //@line 34847
 HEAP32[$45 >> 2] = $4; //@line 34848
 $46 = $ReallocAsyncCtx + 12 | 0; //@line 34849
 HEAP32[$46 >> 2] = $6; //@line 34850
 $47 = $ReallocAsyncCtx + 16 | 0; //@line 34851
 HEAP32[$47 >> 2] = $8; //@line 34852
 $48 = $ReallocAsyncCtx + 20 | 0; //@line 34853
 HEAP32[$48 >> 2] = $10; //@line 34854
 $49 = $ReallocAsyncCtx + 24 | 0; //@line 34855
 HEAP32[$49 >> 2] = $35; //@line 34856
 $50 = $ReallocAsyncCtx + 28 | 0; //@line 34857
 HEAP32[$50 >> 2] = $51; //@line 34858
 $52 = $ReallocAsyncCtx + 32 | 0; //@line 34859
 HEAP32[$52 >> 2] = $53; //@line 34860
 $54 = $ReallocAsyncCtx + 36 | 0; //@line 34861
 HEAP32[$54 >> 2] = $18; //@line 34862
 $55 = $ReallocAsyncCtx + 40 | 0; //@line 34863
 HEAP32[$55 >> 2] = $20; //@line 34864
 $56 = $ReallocAsyncCtx + 44 | 0; //@line 34865
 HEAP32[$56 >> 2] = $22; //@line 34866
 $57 = $ReallocAsyncCtx + 48 | 0; //@line 34867
 HEAP32[$57 >> 2] = $24; //@line 34868
 $58 = $ReallocAsyncCtx + 52 | 0; //@line 34869
 HEAP32[$58 >> 2] = $26; //@line 34870
 $59 = $ReallocAsyncCtx + 56 | 0; //@line 34871
 HEAP32[$59 >> 2] = $28; //@line 34872
 $60 = $ReallocAsyncCtx + 60 | 0; //@line 34873
 HEAP32[$60 >> 2] = $30; //@line 34874
 $61 = $ReallocAsyncCtx + 64 | 0; //@line 34875
 HEAP32[$61 >> 2] = $32; //@line 34876
 sp = STACKTOP; //@line 34877
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_245($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 796
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 798
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 800
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 802
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 804
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 806
 $13 = $2 + 12 | 0; //@line 810
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 24 >> 2] >> 2]; //@line 811
 $14 = $2 + 16 | 0; //@line 812
 HEAP32[$14 >> 2] = $6; //@line 813
 $15 = _equeue_alloc($8, 20) | 0; //@line 814
 if ($15 | 0) {
  $17 = HEAP32[$13 >> 2] | 0; //@line 817
  if (!$17) {
   HEAP32[$15 + 12 >> 2] = 0; //@line 821
   HEAP32[$15 + 16 >> 2] = HEAP32[$14 >> 2]; //@line 824
   _equeue_event_dtor($15, 260); //@line 825
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 826
   $32 = _equeue_post($8, 261, $15) | 0; //@line 827
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 262; //@line 830
    $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 831
    HEAP32[$33 >> 2] = $13; //@line 832
    $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 833
    HEAP32[$34 >> 2] = $4; //@line 834
    $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 835
    HEAP32[$35 >> 2] = $2; //@line 836
    $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 837
    HEAP32[$36 >> 2] = $10; //@line 838
    sp = STACKTOP; //@line 839
    return;
   }
   HEAP32[___async_retval >> 2] = $32; //@line 843
   ___async_unwind = 0; //@line 844
   HEAP32[$ReallocAsyncCtx6 >> 2] = 262; //@line 845
   $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 846
   HEAP32[$33 >> 2] = $13; //@line 847
   $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 848
   HEAP32[$34 >> 2] = $4; //@line 849
   $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 850
   HEAP32[$35 >> 2] = $2; //@line 851
   $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 852
   HEAP32[$36 >> 2] = $10; //@line 853
   sp = STACKTOP; //@line 854
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 858
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 859
   FUNCTION_TABLE_vii[$20 & 31]($15, $2); //@line 860
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 259; //@line 863
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 864
    HEAP32[$21 >> 2] = $13; //@line 865
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 866
    HEAP32[$22 >> 2] = $15; //@line 867
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 868
    HEAP32[$23 >> 2] = $14; //@line 869
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 870
    HEAP32[$24 >> 2] = $8; //@line 871
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 872
    HEAP32[$25 >> 2] = $13; //@line 873
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 874
    HEAP32[$26 >> 2] = $4; //@line 875
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 876
    HEAP32[$27 >> 2] = $2; //@line 877
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 878
    HEAP32[$28 >> 2] = $10; //@line 879
    sp = STACKTOP; //@line 880
    return;
   }
   ___async_unwind = 0; //@line 883
   HEAP32[$ReallocAsyncCtx3 >> 2] = 259; //@line 884
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 885
   HEAP32[$21 >> 2] = $13; //@line 886
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 887
   HEAP32[$22 >> 2] = $15; //@line 888
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 889
   HEAP32[$23 >> 2] = $14; //@line 890
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 891
   HEAP32[$24 >> 2] = $8; //@line 892
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 893
   HEAP32[$25 >> 2] = $13; //@line 894
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 895
   HEAP32[$26 >> 2] = $4; //@line 896
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 897
   HEAP32[$27 >> 2] = $2; //@line 898
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 899
   HEAP32[$28 >> 2] = $10; //@line 900
   sp = STACKTOP; //@line 901
   return;
  }
 }
 $38 = HEAP32[$13 >> 2] | 0; //@line 905
 if ($38 | 0) {
  $41 = HEAP32[$38 + 8 >> 2] | 0; //@line 909
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 910
  FUNCTION_TABLE_vi[$41 & 1023]($2); //@line 911
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 263; //@line 914
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 915
   HEAP32[$42 >> 2] = $4; //@line 916
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 917
   HEAP32[$43 >> 2] = 0; //@line 918
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 919
   HEAP32[$44 >> 2] = $10; //@line 920
   sp = STACKTOP; //@line 921
   return;
  }
  ___async_unwind = 0; //@line 924
  HEAP32[$ReallocAsyncCtx4 >> 2] = 263; //@line 925
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 926
  HEAP32[$42 >> 2] = $4; //@line 927
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 928
  HEAP32[$43 >> 2] = 0; //@line 929
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 930
  HEAP32[$44 >> 2] = $10; //@line 931
  sp = STACKTOP; //@line 932
  return;
 }
 $45 = HEAP32[$4 >> 2] | 0; //@line 935
 if (!$45) {
  HEAP32[___async_retval >> 2] = 0; //@line 939
  return;
 }
 $48 = HEAP32[$45 + 8 >> 2] | 0; //@line 943
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 944
 FUNCTION_TABLE_vi[$48 & 1023]($10); //@line 945
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 264; //@line 948
  $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 949
  HEAP32[$49 >> 2] = 0; //@line 950
  sp = STACKTOP; //@line 951
  return;
 }
 ___async_unwind = 0; //@line 954
 HEAP32[$ReallocAsyncCtx5 >> 2] = 264; //@line 955
 $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 956
 HEAP32[$49 >> 2] = 0; //@line 957
 sp = STACKTOP; //@line 958
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_130($0) {
 $0 = $0 | 0;
 var $$3$off0204 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $28 = 0, $30 = 0, $32 = 0, $37 = 0, $38 = 0, $4 = 0, $52 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $76 = 0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, sp = 0;
 sp = STACKTOP; //@line 26302
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 26305
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26307
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26309
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26311
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26313
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26315
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26317
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26319
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26321
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26323
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 26325
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 26327
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 26331
 $30 = HEAP8[$0 + 60 >> 0] | 0; //@line 26333
 HEAP32[(__ZN11LoRaMacMlme14get_indicationEv(HEAP32[$0 + 52 >> 2] | 0) | 0) >> 2] = 4; //@line 26335
 $32 = $12 + 944 | 0; //@line 26336
 HEAP8[$32 >> 0] = HEAP8[$32 >> 0] | 16; //@line 26339
 __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($28); //@line 26340
 $37 = $10 & 255; //@line 26343
 $38 = $12 + 638 | 0; //@line 26344
 if (__Z15decrypt_payloadPKhtS0_jhjPh($6 + $8 | 0, $37, $14, $16, 1, $18, $38) | 0) {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($4) | 0) + 4 >> 2] = 13; //@line 26350
 }
 if ($2) {
  $$3$off0204 = 6; //@line 26353
 } else {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($4) | 0) + 12 >> 2] = $38; //@line 26357
  HEAP16[(__ZN11LoRaMacMcps14get_indicationEv($4) | 0) + 16 >> 1] = $37; //@line 26360
  HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($4) | 0) + 18 >> 0] = 1; //@line 26363
  $52 = (__ZN11LoRaMacMcps16get_confirmationEv($4) | 0) + 10 | 0; //@line 26367
  if ($30 & 32) {
   HEAP8[$52 >> 0] = 1; //@line 26369
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($4) | 0) + 28 >> 0] = 1; //@line 26372
   $55 = HEAP32[$24 >> 2] | 0; //@line 26373
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(20) | 0; //@line 26375
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($55, $12 + 1076 | 0); //@line 26376
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 391; //@line 26379
    $57 = $ReallocAsyncCtx23 + 4 | 0; //@line 26380
    HEAP32[$57 >> 2] = $12; //@line 26381
    $58 = $ReallocAsyncCtx23 + 8 | 0; //@line 26382
    HEAP32[$58 >> 2] = $24; //@line 26383
    $59 = $ReallocAsyncCtx23 + 12 | 0; //@line 26384
    HEAP32[$59 >> 2] = $20; //@line 26385
    $60 = $ReallocAsyncCtx23 + 16 | 0; //@line 26386
    HEAP32[$60 >> 2] = $22; //@line 26387
    sp = STACKTOP; //@line 26388
    return;
   }
   ___async_unwind = 0; //@line 26391
   HEAP32[$ReallocAsyncCtx23 >> 2] = 391; //@line 26392
   $57 = $ReallocAsyncCtx23 + 4 | 0; //@line 26393
   HEAP32[$57 >> 2] = $12; //@line 26394
   $58 = $ReallocAsyncCtx23 + 8 | 0; //@line 26395
   HEAP32[$58 >> 2] = $24; //@line 26396
   $59 = $ReallocAsyncCtx23 + 12 | 0; //@line 26397
   HEAP32[$59 >> 2] = $20; //@line 26398
   $60 = $ReallocAsyncCtx23 + 16 | 0; //@line 26399
   HEAP32[$60 >> 2] = $22; //@line 26400
   sp = STACKTOP; //@line 26401
   return;
  }
  HEAP8[$52 >> 0] = 0; //@line 26404
  if ((HEAPU8[$12 + 895 >> 0] | 0) > (HEAPU8[$12 + 894 >> 0] | 0)) {
   $66 = HEAP32[$24 >> 2] | 0; //@line 26411
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(20) | 0; //@line 26413
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($66, $12 + 1076 | 0); //@line 26414
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 392; //@line 26417
    $68 = $ReallocAsyncCtx22 + 4 | 0; //@line 26418
    HEAP32[$68 >> 2] = $12; //@line 26419
    $69 = $ReallocAsyncCtx22 + 8 | 0; //@line 26420
    HEAP32[$69 >> 2] = $24; //@line 26421
    $70 = $ReallocAsyncCtx22 + 12 | 0; //@line 26422
    HEAP32[$70 >> 2] = $20; //@line 26423
    $71 = $ReallocAsyncCtx22 + 16 | 0; //@line 26424
    HEAP32[$71 >> 2] = $22; //@line 26425
    sp = STACKTOP; //@line 26426
    return;
   }
   ___async_unwind = 0; //@line 26429
   HEAP32[$ReallocAsyncCtx22 >> 2] = 392; //@line 26430
   $68 = $ReallocAsyncCtx22 + 4 | 0; //@line 26431
   HEAP32[$68 >> 2] = $12; //@line 26432
   $69 = $ReallocAsyncCtx22 + 8 | 0; //@line 26433
   HEAP32[$69 >> 2] = $24; //@line 26434
   $70 = $ReallocAsyncCtx22 + 12 | 0; //@line 26435
   HEAP32[$70 >> 2] = $20; //@line 26436
   $71 = $ReallocAsyncCtx22 + 16 | 0; //@line 26437
   HEAP32[$71 >> 2] = $22; //@line 26438
   sp = STACKTOP; //@line 26439
   return;
  } else {
   $$3$off0204 = 2; //@line 26442
  }
 }
 $72 = $12 + 944 | 0; //@line 26445
 HEAP8[$72 >> 0] = $$3$off0204 | HEAP8[$72 >> 0] & -7; //@line 26449
 $76 = $12 + 944 | 0; //@line 26450
 HEAP8[$76 >> 0] = HEAP8[$76 >> 0] | 32; //@line 26453
 $79 = HEAP32[$24 >> 2] | 0; //@line 26454
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 26456
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($79, $12 + 996 | 0, 1); //@line 26457
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 395; //@line 26460
  $81 = $ReallocAsyncCtx17 + 4 | 0; //@line 26461
  HEAP32[$81 >> 2] = $20; //@line 26462
  $82 = $ReallocAsyncCtx17 + 8 | 0; //@line 26463
  HEAP32[$82 >> 2] = $22; //@line 26464
  sp = STACKTOP; //@line 26465
  return;
 }
 ___async_unwind = 0; //@line 26468
 HEAP32[$ReallocAsyncCtx17 >> 2] = 395; //@line 26469
 $81 = $ReallocAsyncCtx17 + 4 | 0; //@line 26470
 HEAP32[$81 >> 2] = $20; //@line 26471
 $82 = $ReallocAsyncCtx17 + 8 | 0; //@line 26472
 HEAP32[$82 >> 2] = $22; //@line 26473
 sp = STACKTOP; //@line 26474
 return;
}
function __ZN7LoRaMac17on_radio_rx_errorEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $14 = 0, $15 = 0, $25 = 0, $29 = 0, $36 = 0, $40 = 0, $44 = 0, $53 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx9 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13281
 STACKTOP = STACKTOP + 32 | 0; //@line 13282
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 13282
 $$byval_copy = sp + 24 | 0; //@line 13283
 $vararg_buffer3 = sp + 16 | 0; //@line 13284
 $vararg_buffer1 = sp + 8 | 0; //@line 13285
 _printf(12943, sp) | 0; //@line 13287
 _printf(13171, $vararg_buffer1) | 0; //@line 13288
 $AsyncCtx9 = _emscripten_alloc_async_context(28, sp) | 0; //@line 13289
 _putchar(10) | 0; //@line 13290
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 418; //@line 13293
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 13295
  HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer1; //@line 13297
  HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer3; //@line 13299
  HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer3; //@line 13301
  HEAP32[$AsyncCtx9 + 20 >> 2] = $$byval_copy; //@line 13303
  HEAP32[$AsyncCtx9 + 24 >> 2] = $$byval_copy; //@line 13305
  sp = STACKTOP; //@line 13306
  STACKTOP = sp; //@line 13307
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 13309
 do {
  if ((HEAP32[$0 + 360 >> 2] | 0) == 2) {
   _printf(12943, $vararg_buffer3) | 0; //@line 13315
   _printf(12970, $$byval_copy) | 0; //@line 13316
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 13317
   _putchar(10) | 0; //@line 13318
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 419; //@line 13321
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 13323
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer1; //@line 13325
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 13327
    sp = STACKTOP; //@line 13328
    STACKTOP = sp; //@line 13329
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 13331
   $14 = HEAP32[$0 + 1328 >> 2] | 0; //@line 13333
   HEAP32[$vararg_buffer1 >> 2] = 347; //@line 13334
   HEAP32[$vararg_buffer1 + 4 >> 2] = 0; //@line 13336
   $AsyncCtx16 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13337
   HEAP32[$$byval_copy >> 2] = HEAP32[$vararg_buffer1 >> 2]; //@line 13338
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$vararg_buffer1 + 4 >> 2]; //@line 13338
   $15 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($14, $0, $$byval_copy) | 0; //@line 13339
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 420; //@line 13342
    HEAP32[$AsyncCtx16 + 4 >> 2] = $vararg_buffer1; //@line 13344
    HEAP32[$AsyncCtx16 + 8 >> 2] = $0; //@line 13346
    sp = STACKTOP; //@line 13347
    STACKTOP = sp; //@line 13348
    return;
   }
   _emscripten_free_async_context($AsyncCtx16 | 0); //@line 13350
   do {
    if (!$15) {
     $AsyncCtx24 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13354
     _mbed_assert_internal(12827, 12836, 217); //@line 13355
     if (___async) {
      HEAP32[$AsyncCtx24 >> 2] = 421; //@line 13358
      HEAP32[$AsyncCtx24 + 4 >> 2] = $vararg_buffer1; //@line 13360
      HEAP32[$AsyncCtx24 + 8 >> 2] = $0; //@line 13362
      sp = STACKTOP; //@line 13363
      STACKTOP = sp; //@line 13364
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx24 | 0); //@line 13366
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 13372
   if (!(HEAP8[$0 + 373 >> 0] | 0)) {
    label = 24; //@line 13377
   } else {
    label = 23; //@line 13379
   }
  } else {
   $25 = HEAP32[$0 >> 2] | 0; //@line 13382
   $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 13383
   __ZN7LoRaPHY18put_radio_to_sleepEv($25); //@line 13384
   if (___async) {
    HEAP32[$AsyncCtx13 >> 2] = 422; //@line 13387
    HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 13389
    sp = STACKTOP; //@line 13390
    STACKTOP = sp; //@line 13391
    return;
   }
   _emscripten_free_async_context($AsyncCtx13 | 0); //@line 13393
   $29 = (HEAP8[$0 + 373 >> 0] | 0) != 0; //@line 13399
   if (HEAP32[$0 + 364 >> 2] | 0) {
    if ($29) {
     label = 23; //@line 13402
     break;
    } else {
     label = 24; //@line 13405
     break;
    }
   }
   if ($29) {
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 5; //@line 13413
   }
   HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 5; //@line 13418
   $36 = $0 + 356 | 0; //@line 13419
   $40 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$36 >> 2] | 0, HEAP32[$0 + 980 >> 2] | 0) | 0; //@line 13423
   if ($40 >>> 0 < (HEAP32[$0 + 976 >> 2] | 0) >>> 0) {
    STACKTOP = sp; //@line 13428
    return;
   }
   $44 = HEAP32[$36 >> 2] | 0; //@line 13430
   $AsyncCtx20 = _emscripten_alloc_async_context(8, sp) | 0; //@line 13432
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($44, $0 + 1056 | 0); //@line 13433
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 423; //@line 13436
    HEAP32[$AsyncCtx20 + 4 >> 2] = $0; //@line 13438
    sp = STACKTOP; //@line 13439
    STACKTOP = sp; //@line 13440
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 13442
    break;
   }
  }
 } while (0);
 if ((label | 0) == 23) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 6; //@line 13451
  label = 24; //@line 13452
 }
 if ((label | 0) == 24) {
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 6; //@line 13458
 }
 $53 = $0 + 944 | 0; //@line 13460
 HEAP8[$53 >> 0] = HEAP8[$53 >> 0] | 32; //@line 13463
 STACKTOP = sp; //@line 13464
 return;
}
function _initialize__async_cb_377($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 18839
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18841
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18843
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18845
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18847
 $8 = HEAP32[$AsyncRetVal >> 2] | 0; //@line 18848
 if (!$8) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 18851
  _mbed_assert_internal(14489, 14491, 41); //@line 18852
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 685; //@line 18855
   $10 = $ReallocAsyncCtx7 + 4 | 0; //@line 18856
   HEAP32[$10 >> 2] = $2; //@line 18857
   $11 = $ReallocAsyncCtx7 + 8 | 0; //@line 18858
   HEAP32[$11 >> 2] = $4; //@line 18859
   $12 = $ReallocAsyncCtx7 + 12 | 0; //@line 18860
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 18861
   $13 = $ReallocAsyncCtx7 + 16 | 0; //@line 18862
   HEAP32[$13 >> 2] = $6; //@line 18863
   sp = STACKTOP; //@line 18864
   return;
  }
  ___async_unwind = 0; //@line 18867
  HEAP32[$ReallocAsyncCtx7 >> 2] = 685; //@line 18868
  $10 = $ReallocAsyncCtx7 + 4 | 0; //@line 18869
  HEAP32[$10 >> 2] = $2; //@line 18870
  $11 = $ReallocAsyncCtx7 + 8 | 0; //@line 18871
  HEAP32[$11 >> 2] = $4; //@line 18872
  $12 = $ReallocAsyncCtx7 + 12 | 0; //@line 18873
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 18874
  $13 = $ReallocAsyncCtx7 + 16 | 0; //@line 18875
  HEAP32[$13 >> 2] = $6; //@line 18876
  sp = STACKTOP; //@line 18877
  return;
 }
 $15 = HEAP32[$AsyncRetVal + 4 >> 2] | 0; //@line 18881
 if (($15 + -4 | 0) >>> 0 > 28) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 18885
  _mbed_assert_internal(14489, 14491, 47); //@line 18886
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 686; //@line 18889
   $17 = $ReallocAsyncCtx6 + 4 | 0; //@line 18890
   HEAP32[$17 >> 2] = $8; //@line 18891
   $18 = $ReallocAsyncCtx6 + 8 | 0; //@line 18892
   HEAP32[$18 >> 2] = $2; //@line 18893
   $19 = $ReallocAsyncCtx6 + 12 | 0; //@line 18894
   HEAP32[$19 >> 2] = $4; //@line 18895
   $20 = $ReallocAsyncCtx6 + 16 | 0; //@line 18896
   HEAP32[$20 >> 2] = $6; //@line 18897
   sp = STACKTOP; //@line 18898
   return;
  }
  ___async_unwind = 0; //@line 18901
  HEAP32[$ReallocAsyncCtx6 >> 2] = 686; //@line 18902
  $17 = $ReallocAsyncCtx6 + 4 | 0; //@line 18903
  HEAP32[$17 >> 2] = $8; //@line 18904
  $18 = $ReallocAsyncCtx6 + 8 | 0; //@line 18905
  HEAP32[$18 >> 2] = $2; //@line 18906
  $19 = $ReallocAsyncCtx6 + 12 | 0; //@line 18907
  HEAP32[$19 >> 2] = $4; //@line 18908
  $20 = $ReallocAsyncCtx6 + 16 | 0; //@line 18909
  HEAP32[$20 >> 2] = $6; //@line 18910
  sp = STACKTOP; //@line 18911
  return;
 } else {
  $22 = 7 << $15 + -4; //@line 18915
  $23 = ___muldi3($22 | 0, 0, 1e6, 0) | 0; //@line 18916
  $24 = tempRet0; //@line 18917
  $25 = _i64Add($8 | 0, 0, -1, -1) | 0; //@line 18918
  $27 = _i64Add($25 | 0, tempRet0 | 0, $23 | 0, $24 | 0) | 0; //@line 18920
  $29 = ___udivdi3($27 | 0, tempRet0 | 0, $8 | 0, 0) | 0; //@line 18922
  $30 = tempRet0; //@line 18923
  $31 = HEAP32[$2 >> 2] | 0; //@line 18924
  HEAP32[$31 >> 2] = 0; //@line 18925
  HEAP32[$31 + 4 >> 2] = 0; //@line 18927
  $35 = HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0; //@line 18930
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 18931
  $36 = FUNCTION_TABLE_i[$35 & 7]() | 0; //@line 18932
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 687; //@line 18935
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 18936
   HEAP32[$37 >> 2] = $2; //@line 18937
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 18938
   HEAP32[$38 >> 2] = $8; //@line 18939
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 18940
   HEAP32[$39 >> 2] = $15; //@line 18941
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 18942
   HEAP32[$40 >> 2] = $22; //@line 18943
   $41 = $ReallocAsyncCtx3 + 24 | 0; //@line 18944
   $42 = $41; //@line 18945
   $43 = $42; //@line 18946
   HEAP32[$43 >> 2] = $29; //@line 18947
   $44 = $42 + 4 | 0; //@line 18948
   $45 = $44; //@line 18949
   HEAP32[$45 >> 2] = $30; //@line 18950
   $46 = $ReallocAsyncCtx3 + 32 | 0; //@line 18951
   HEAP32[$46 >> 2] = $4; //@line 18952
   $47 = $ReallocAsyncCtx3 + 36 | 0; //@line 18953
   HEAP32[$47 >> 2] = $6; //@line 18954
   sp = STACKTOP; //@line 18955
   return;
  }
  HEAP32[___async_retval >> 2] = $36; //@line 18959
  ___async_unwind = 0; //@line 18960
  HEAP32[$ReallocAsyncCtx3 >> 2] = 687; //@line 18961
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 18962
  HEAP32[$37 >> 2] = $2; //@line 18963
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 18964
  HEAP32[$38 >> 2] = $8; //@line 18965
  $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 18966
  HEAP32[$39 >> 2] = $15; //@line 18967
  $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 18968
  HEAP32[$40 >> 2] = $22; //@line 18969
  $41 = $ReallocAsyncCtx3 + 24 | 0; //@line 18970
  $42 = $41; //@line 18971
  $43 = $42; //@line 18972
  HEAP32[$43 >> 2] = $29; //@line 18973
  $44 = $42 + 4 | 0; //@line 18974
  $45 = $44; //@line 18975
  HEAP32[$45 >> 2] = $30; //@line 18976
  $46 = $ReallocAsyncCtx3 + 32 | 0; //@line 18977
  HEAP32[$46 >> 2] = $4; //@line 18978
  $47 = $ReallocAsyncCtx3 + 36 | 0; //@line 18979
  HEAP32[$47 >> 2] = $6; //@line 18980
  sp = STACKTOP; //@line 18981
  return;
 }
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_10($0) {
 $0 = $0 | 0;
 var $$pre$i$i50 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 18006
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18008
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18010
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18012
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18014
 $$pre$i$i50 = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 18019
 HEAP32[HEAP32[$0 + 24 >> 2] >> 2] = $$pre$i$i50; //@line 18021
 if ($$pre$i$i50 | 0) {
  $16 = HEAP32[$$pre$i$i50 + 8 >> 2] | 0; //@line 18025
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 18026
  FUNCTION_TABLE_vi[$16 & 1023]($6); //@line 18027
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 566; //@line 18030
   $17 = $ReallocAsyncCtx12 + 4 | 0; //@line 18031
   HEAP32[$17 >> 2] = $6; //@line 18032
   $18 = $ReallocAsyncCtx12 + 8 | 0; //@line 18033
   HEAP32[$18 >> 2] = $8; //@line 18034
   $19 = $ReallocAsyncCtx12 + 12 | 0; //@line 18035
   HEAP32[$19 >> 2] = $4; //@line 18036
   $20 = $ReallocAsyncCtx12 + 16 | 0; //@line 18037
   HEAP32[$20 >> 2] = $2; //@line 18038
   sp = STACKTOP; //@line 18039
   return;
  }
  ___async_unwind = 0; //@line 18042
  HEAP32[$ReallocAsyncCtx12 >> 2] = 566; //@line 18043
  $17 = $ReallocAsyncCtx12 + 4 | 0; //@line 18044
  HEAP32[$17 >> 2] = $6; //@line 18045
  $18 = $ReallocAsyncCtx12 + 8 | 0; //@line 18046
  HEAP32[$18 >> 2] = $8; //@line 18047
  $19 = $ReallocAsyncCtx12 + 12 | 0; //@line 18048
  HEAP32[$19 >> 2] = $4; //@line 18049
  $20 = $ReallocAsyncCtx12 + 16 | 0; //@line 18050
  HEAP32[$20 >> 2] = $2; //@line 18051
  sp = STACKTOP; //@line 18052
  return;
 }
 $21 = $8 + 12 | 0; //@line 18055
 HEAP32[$8 >> 2] = 567; //@line 18056
 HEAP32[$8 + 4 >> 2] = 0; //@line 18058
 HEAP32[$8 + 8 >> 2] = $4; //@line 18060
 HEAP32[$21 >> 2] = 848; //@line 18061
 $22 = $4 + 1260 | 0; //@line 18062
 if (($22 | 0) == ($8 | 0)) {
  $41 = HEAP32[214] | 0; //@line 18066
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 18067
  FUNCTION_TABLE_vi[$41 & 1023]($8); //@line 18068
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 570; //@line 18071
   $42 = $ReallocAsyncCtx15 + 4 | 0; //@line 18072
   HEAP32[$42 >> 2] = $8; //@line 18073
   $43 = $ReallocAsyncCtx15 + 8 | 0; //@line 18074
   HEAP32[$43 >> 2] = $2; //@line 18075
   sp = STACKTOP; //@line 18076
   return;
  }
  ___async_unwind = 0; //@line 18079
  HEAP32[$ReallocAsyncCtx15 >> 2] = 570; //@line 18080
  $42 = $ReallocAsyncCtx15 + 4 | 0; //@line 18081
  HEAP32[$42 >> 2] = $8; //@line 18082
  $43 = $ReallocAsyncCtx15 + 8 | 0; //@line 18083
  HEAP32[$43 >> 2] = $2; //@line 18084
  sp = STACKTOP; //@line 18085
  return;
 }
 $24 = $4 + 1272 | 0; //@line 18088
 $25 = HEAP32[$24 >> 2] | 0; //@line 18089
 if (!$25) {
  $35 = HEAP32[213] | 0; //@line 18093
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(20) | 0; //@line 18094
  FUNCTION_TABLE_vii[$35 & 31]($22, $8); //@line 18095
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 569; //@line 18098
   $36 = $ReallocAsyncCtx14 + 4 | 0; //@line 18099
   HEAP32[$36 >> 2] = $21; //@line 18100
   $37 = $ReallocAsyncCtx14 + 8 | 0; //@line 18101
   HEAP32[$37 >> 2] = $24; //@line 18102
   $38 = $ReallocAsyncCtx14 + 12 | 0; //@line 18103
   HEAP32[$38 >> 2] = $8; //@line 18104
   $39 = $ReallocAsyncCtx14 + 16 | 0; //@line 18105
   HEAP32[$39 >> 2] = $2; //@line 18106
   sp = STACKTOP; //@line 18107
   return;
  }
  ___async_unwind = 0; //@line 18110
  HEAP32[$ReallocAsyncCtx14 >> 2] = 569; //@line 18111
  $36 = $ReallocAsyncCtx14 + 4 | 0; //@line 18112
  HEAP32[$36 >> 2] = $21; //@line 18113
  $37 = $ReallocAsyncCtx14 + 8 | 0; //@line 18114
  HEAP32[$37 >> 2] = $24; //@line 18115
  $38 = $ReallocAsyncCtx14 + 12 | 0; //@line 18116
  HEAP32[$38 >> 2] = $8; //@line 18117
  $39 = $ReallocAsyncCtx14 + 16 | 0; //@line 18118
  HEAP32[$39 >> 2] = $2; //@line 18119
  sp = STACKTOP; //@line 18120
  return;
 } else {
  $28 = HEAP32[$25 + 8 >> 2] | 0; //@line 18124
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 18125
  FUNCTION_TABLE_vi[$28 & 1023]($22); //@line 18126
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 568; //@line 18129
   $29 = $ReallocAsyncCtx13 + 4 | 0; //@line 18130
   HEAP32[$29 >> 2] = $21; //@line 18131
   $30 = $ReallocAsyncCtx13 + 8 | 0; //@line 18132
   HEAP32[$30 >> 2] = $24; //@line 18133
   $31 = $ReallocAsyncCtx13 + 12 | 0; //@line 18134
   HEAP32[$31 >> 2] = $22; //@line 18135
   $32 = $ReallocAsyncCtx13 + 16 | 0; //@line 18136
   HEAP32[$32 >> 2] = $8; //@line 18137
   $33 = $ReallocAsyncCtx13 + 20 | 0; //@line 18138
   HEAP32[$33 >> 2] = $2; //@line 18139
   sp = STACKTOP; //@line 18140
   return;
  }
  ___async_unwind = 0; //@line 18143
  HEAP32[$ReallocAsyncCtx13 >> 2] = 568; //@line 18144
  $29 = $ReallocAsyncCtx13 + 4 | 0; //@line 18145
  HEAP32[$29 >> 2] = $21; //@line 18146
  $30 = $ReallocAsyncCtx13 + 8 | 0; //@line 18147
  HEAP32[$30 >> 2] = $24; //@line 18148
  $31 = $ReallocAsyncCtx13 + 12 | 0; //@line 18149
  HEAP32[$31 >> 2] = $22; //@line 18150
  $32 = $ReallocAsyncCtx13 + 16 | 0; //@line 18151
  HEAP32[$32 >> 2] = $8; //@line 18152
  $33 = $ReallocAsyncCtx13 + 20 | 0; //@line 18153
  HEAP32[$33 >> 2] = $2; //@line 18154
  sp = STACKTOP; //@line 18155
  return;
 }
}
function _mbedtls_cipher_free($0) {
 $0 = $0 | 0;
 var $101 = 0, $105 = 0, $109 = 0, $113 = 0, $2 = 0, $3 = 0, $42 = 0, $48 = 0, $53 = 0, $57 = 0, $61 = 0, $65 = 0, $69 = 0, $73 = 0, $77 = 0, $81 = 0, $85 = 0, $89 = 0, $93 = 0, $97 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2191
 if (!$0) {
  return;
 }
 $2 = $0 + 64 | 0; //@line 2196
 $3 = HEAP32[$2 >> 2] | 0; //@line 2197
 if ($3 | 0) {
  HEAP8[$3 >> 0] = 0; //@line 2201
  HEAP8[$3 + 1 >> 0] = 0; //@line 2203
  HEAP8[$3 + 2 >> 0] = 0; //@line 2205
  HEAP8[$3 + 3 >> 0] = 0; //@line 2207
  HEAP8[$3 + 4 >> 0] = 0; //@line 2209
  HEAP8[$3 + 5 >> 0] = 0; //@line 2211
  HEAP8[$3 + 6 >> 0] = 0; //@line 2213
  HEAP8[$3 + 7 >> 0] = 0; //@line 2215
  HEAP8[$3 + 8 >> 0] = 0; //@line 2217
  HEAP8[$3 + 9 >> 0] = 0; //@line 2219
  HEAP8[$3 + 10 >> 0] = 0; //@line 2221
  HEAP8[$3 + 11 >> 0] = 0; //@line 2223
  HEAP8[$3 + 12 >> 0] = 0; //@line 2225
  HEAP8[$3 + 13 >> 0] = 0; //@line 2227
  HEAP8[$3 + 14 >> 0] = 0; //@line 2229
  HEAP8[$3 + 15 >> 0] = 0; //@line 2231
  HEAP8[$3 + 16 >> 0] = 0; //@line 2233
  HEAP8[$3 + 17 >> 0] = 0; //@line 2235
  HEAP8[$3 + 18 >> 0] = 0; //@line 2237
  HEAP8[$3 + 19 >> 0] = 0; //@line 2239
  HEAP8[$3 + 20 >> 0] = 0; //@line 2241
  HEAP8[$3 + 21 >> 0] = 0; //@line 2243
  HEAP8[$3 + 22 >> 0] = 0; //@line 2245
  HEAP8[$3 + 23 >> 0] = 0; //@line 2247
  HEAP8[$3 + 24 >> 0] = 0; //@line 2249
  HEAP8[$3 + 25 >> 0] = 0; //@line 2251
  HEAP8[$3 + 26 >> 0] = 0; //@line 2253
  HEAP8[$3 + 27 >> 0] = 0; //@line 2255
  HEAP8[$3 + 28 >> 0] = 0; //@line 2257
  HEAP8[$3 + 29 >> 0] = 0; //@line 2259
  HEAP8[$3 + 30 >> 0] = 0; //@line 2261
  HEAP8[$3 + 31 >> 0] = 0; //@line 2263
  HEAP8[$3 + 32 >> 0] = 0; //@line 2265
  HEAP8[$3 + 33 >> 0] = 0; //@line 2267
  HEAP8[$3 + 34 >> 0] = 0; //@line 2269
  HEAP8[$3 + 35 >> 0] = 0; //@line 2270
  _free(HEAP32[$2 >> 2] | 0); //@line 2272
 }
 $42 = HEAP32[$0 + 60 >> 2] | 0; //@line 2275
 do {
  if ($42 | 0) {
   $48 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 24 >> 2] | 0; //@line 2283
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2284
   FUNCTION_TABLE_vi[$48 & 1023]($42); //@line 2285
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 658; //@line 2288
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2290
    sp = STACKTOP; //@line 2291
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2294
    break;
   }
  }
 } while (0);
 HEAP8[$0 >> 0] = 0; //@line 2300
 HEAP8[$0 + 1 >> 0] = 0; //@line 2302
 HEAP8[$0 + 2 >> 0] = 0; //@line 2304
 $53 = $0 + 4 | 0; //@line 2305
 HEAP8[$0 + 3 >> 0] = 0; //@line 2306
 HEAP8[$53 >> 0] = 0; //@line 2308
 HEAP8[$53 + 1 >> 0] = 0; //@line 2310
 HEAP8[$53 + 2 >> 0] = 0; //@line 2312
 $57 = $53 + 4 | 0; //@line 2313
 HEAP8[$53 + 3 >> 0] = 0; //@line 2314
 HEAP8[$57 >> 0] = 0; //@line 2316
 HEAP8[$57 + 1 >> 0] = 0; //@line 2318
 HEAP8[$57 + 2 >> 0] = 0; //@line 2320
 $61 = $53 + 8 | 0; //@line 2321
 HEAP8[$57 + 3 >> 0] = 0; //@line 2322
 HEAP8[$61 >> 0] = 0; //@line 2324
 HEAP8[$61 + 1 >> 0] = 0; //@line 2326
 HEAP8[$61 + 2 >> 0] = 0; //@line 2328
 $65 = $53 + 12 | 0; //@line 2329
 HEAP8[$61 + 3 >> 0] = 0; //@line 2330
 HEAP8[$65 >> 0] = 0; //@line 2332
 HEAP8[$65 + 1 >> 0] = 0; //@line 2334
 HEAP8[$65 + 2 >> 0] = 0; //@line 2336
 $69 = $53 + 16 | 0; //@line 2337
 HEAP8[$65 + 3 >> 0] = 0; //@line 2338
 HEAP8[$69 >> 0] = 0; //@line 2340
 HEAP8[$69 + 1 >> 0] = 0; //@line 2342
 HEAP8[$69 + 2 >> 0] = 0; //@line 2344
 $73 = $53 + 20 | 0; //@line 2345
 HEAP8[$69 + 3 >> 0] = 0; //@line 2346
 HEAP8[$73 >> 0] = 0; //@line 2348
 HEAP8[$73 + 1 >> 0] = 0; //@line 2350
 HEAP8[$73 + 2 >> 0] = 0; //@line 2352
 $77 = $53 + 24 | 0; //@line 2353
 HEAP8[$73 + 3 >> 0] = 0; //@line 2354
 HEAP8[$77 >> 0] = 0; //@line 2356
 HEAP8[$77 + 1 >> 0] = 0; //@line 2358
 HEAP8[$77 + 2 >> 0] = 0; //@line 2360
 $81 = $53 + 28 | 0; //@line 2361
 HEAP8[$77 + 3 >> 0] = 0; //@line 2362
 HEAP8[$81 >> 0] = 0; //@line 2364
 HEAP8[$81 + 1 >> 0] = 0; //@line 2366
 HEAP8[$81 + 2 >> 0] = 0; //@line 2368
 $85 = $53 + 32 | 0; //@line 2369
 HEAP8[$81 + 3 >> 0] = 0; //@line 2370
 HEAP8[$85 >> 0] = 0; //@line 2372
 HEAP8[$85 + 1 >> 0] = 0; //@line 2374
 HEAP8[$85 + 2 >> 0] = 0; //@line 2376
 $89 = $53 + 36 | 0; //@line 2377
 HEAP8[$85 + 3 >> 0] = 0; //@line 2378
 HEAP8[$89 >> 0] = 0; //@line 2380
 HEAP8[$89 + 1 >> 0] = 0; //@line 2382
 HEAP8[$89 + 2 >> 0] = 0; //@line 2384
 $93 = $53 + 40 | 0; //@line 2385
 HEAP8[$89 + 3 >> 0] = 0; //@line 2386
 HEAP8[$93 >> 0] = 0; //@line 2388
 HEAP8[$93 + 1 >> 0] = 0; //@line 2390
 HEAP8[$93 + 2 >> 0] = 0; //@line 2392
 $97 = $53 + 44 | 0; //@line 2393
 HEAP8[$93 + 3 >> 0] = 0; //@line 2394
 HEAP8[$97 >> 0] = 0; //@line 2396
 HEAP8[$97 + 1 >> 0] = 0; //@line 2398
 HEAP8[$97 + 2 >> 0] = 0; //@line 2400
 $101 = $53 + 48 | 0; //@line 2401
 HEAP8[$97 + 3 >> 0] = 0; //@line 2402
 HEAP8[$101 >> 0] = 0; //@line 2404
 HEAP8[$101 + 1 >> 0] = 0; //@line 2406
 HEAP8[$101 + 2 >> 0] = 0; //@line 2408
 $105 = $53 + 52 | 0; //@line 2409
 HEAP8[$101 + 3 >> 0] = 0; //@line 2410
 HEAP8[$105 >> 0] = 0; //@line 2412
 HEAP8[$105 + 1 >> 0] = 0; //@line 2414
 HEAP8[$105 + 2 >> 0] = 0; //@line 2416
 $109 = $53 + 56 | 0; //@line 2417
 HEAP8[$105 + 3 >> 0] = 0; //@line 2418
 HEAP8[$109 >> 0] = 0; //@line 2420
 HEAP8[$109 + 1 >> 0] = 0; //@line 2422
 HEAP8[$109 + 2 >> 0] = 0; //@line 2424
 $113 = $53 + 60 | 0; //@line 2425
 HEAP8[$109 + 3 >> 0] = 0; //@line 2426
 HEAP8[$113 >> 0] = 0; //@line 2428
 HEAP8[$113 + 1 >> 0] = 0; //@line 2430
 HEAP8[$113 + 2 >> 0] = 0; //@line 2432
 HEAP8[$113 + 3 >> 0] = 0; //@line 2433
 return;
}
function __ZN12LoRaWANStackC2Ev($0) {
 $0 = $0 | 0;
 var $$pre$i$i45 = 0, $$pre$i$i59 = 0, $$pre$phiZ2D = 0, $$pre106 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $21 = 0, $22 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $33 = 0, $4 = 0, $40 = 0, $41 = 0, $48 = 0, $49 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 5289
 STACKTOP = STACKTOP + 16 | 0; //@line 5290
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5290
 $1 = sp; //@line 5291
 __ZN18LoRaWANTimeHandlerC2Ev($0); //@line 5292
 __ZN7LoRaMacC2ER18LoRaWANTimeHandler($0 + 4 | 0, $0); //@line 5294
 __ZN12LoRaPHYEU868C2ER18LoRaWANTimeHandler($0 + 1336 | 0, $0); //@line 5296
 $4 = $0 + 2284 | 0; //@line 5297
 $5 = $0 + 1828 | 0; //@line 5298
 dest = $5 + 16 | 0; //@line 5300
 stop = dest + 88 | 0; //@line 5300
 do {
  HEAP32[dest >> 2] = 0; //@line 5300
  dest = dest + 4 | 0; //@line 5300
 } while ((dest | 0) < (stop | 0));
 HEAP8[$4 >> 0] = 1; //@line 5301
 HEAP8[$0 + 2286 >> 0] = 1; //@line 5304
 HEAP32[$0 + 2288 >> 2] = 0; //@line 5306
 HEAP8[$0 + 2285 >> 0] = 15; //@line 5307
 _memset($0 + 1932 | 0, 0, 352) | 0; //@line 5309
 HEAP32[$0 + 1812 >> 2] = 19; //@line 5312
 HEAP32[$0 + 1816 >> 2] = 0; //@line 5314
 HEAP32[$0 + 1820 >> 2] = $0; //@line 5316
 HEAP32[$0 + 1824 >> 2] = 800; //@line 5317
 HEAP32[$1 >> 2] = 20; //@line 5319
 HEAP32[$1 + 4 >> 2] = 0; //@line 5321
 HEAP32[$1 + 8 >> 2] = $0; //@line 5323
 HEAP32[$1 + 12 >> 2] = 812; //@line 5324
 $13 = $0 + 1840 | 0; //@line 5325
 HEAP32[$5 >> 2] = HEAP32[$1 >> 2]; //@line 5326
 HEAP32[$5 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 5326
 HEAP32[$5 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 5326
 HEAP32[$13 >> 2] = 812; //@line 5327
 $14 = $1 + 12 | 0; //@line 5328
 HEAP32[$1 >> 2] = 21; //@line 5329
 HEAP32[$1 + 4 >> 2] = 0; //@line 5331
 HEAP32[$1 + 8 >> 2] = $0; //@line 5333
 HEAP32[$14 >> 2] = 824; //@line 5334
 $15 = $0 + 1844 | 0; //@line 5335
 if (($15 | 0) == ($1 | 0)) {
  $21 = 824; //@line 5338
  label = 3; //@line 5339
 } else {
  __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($15, $1); //@line 5342
  $$pre$i$i45 = HEAP32[$14 >> 2] | 0; //@line 5343
  HEAP32[$0 + 1856 >> 2] = $$pre$i$i45; //@line 5345
  if ($$pre$i$i45 | 0) {
   $21 = $$pre$i$i45; //@line 5348
   label = 3; //@line 5349
  }
 }
 do {
  if ((label | 0) == 3) {
   $22 = HEAP32[$21 + 8 >> 2] | 0; //@line 5355
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5356
   FUNCTION_TABLE_vi[$22 & 1023]($1); //@line 5357
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 177; //@line 5360
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 5362
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 5364
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 5366
    sp = STACKTOP; //@line 5367
    STACKTOP = sp; //@line 5368
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5370
    break;
   }
  }
 } while (0);
 $26 = $1 + 12 | 0; //@line 5375
 HEAP32[$1 >> 2] = 22; //@line 5376
 HEAP32[$1 + 4 >> 2] = 0; //@line 5378
 HEAP32[$1 + 8 >> 2] = $0; //@line 5380
 HEAP32[$26 >> 2] = 836; //@line 5381
 $27 = $0 + 1860 | 0; //@line 5382
 if (($27 | 0) == ($1 | 0)) {
  $48 = 836; //@line 5385
 } else {
  $29 = $0 + 1872 | 0; //@line 5387
  $30 = HEAP32[$29 >> 2] | 0; //@line 5388
  if (!$30) {
   $$pre$phiZ2D = $27; //@line 5391
   $40 = 836; //@line 5391
  } else {
   $33 = HEAP32[$30 + 8 >> 2] | 0; //@line 5394
   $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5395
   FUNCTION_TABLE_vi[$33 & 1023]($27); //@line 5396
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 178; //@line 5399
    HEAP32[$AsyncCtx2 + 4 >> 2] = $26; //@line 5401
    HEAP32[$AsyncCtx2 + 8 >> 2] = $29; //@line 5403
    HEAP32[$AsyncCtx2 + 12 >> 2] = $27; //@line 5405
    HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 5407
    sp = STACKTOP; //@line 5408
    STACKTOP = sp; //@line 5409
    return;
   }
   _emscripten_free_async_context($AsyncCtx2 | 0); //@line 5411
   $$pre106 = HEAP32[$26 >> 2] | 0; //@line 5412
   if (!$$pre106) {
    HEAP32[$29 >> 2] = 0; //@line 5415
    STACKTOP = sp; //@line 5416
    return;
   } else {
    $$pre$phiZ2D = $27; //@line 5418
    $40 = $$pre106; //@line 5418
   }
  }
  $41 = HEAP32[$40 + 4 >> 2] | 0; //@line 5422
  $AsyncCtx5 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5423
  FUNCTION_TABLE_vii[$41 & 31]($$pre$phiZ2D, $1); //@line 5424
  if (___async) {
   HEAP32[$AsyncCtx5 >> 2] = 179; //@line 5427
   HEAP32[$AsyncCtx5 + 4 >> 2] = $26; //@line 5429
   HEAP32[$AsyncCtx5 + 8 >> 2] = $29; //@line 5431
   HEAP32[$AsyncCtx5 + 12 >> 2] = $1; //@line 5433
   sp = STACKTOP; //@line 5434
   STACKTOP = sp; //@line 5435
   return;
  }
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 5437
  $$pre$i$i59 = HEAP32[$26 >> 2] | 0; //@line 5438
  HEAP32[$29 >> 2] = $$pre$i$i59; //@line 5440
  if (!$$pre$i$i59) {
   STACKTOP = sp; //@line 5443
   return;
  } else {
   $48 = $$pre$i$i59; //@line 5445
  }
 }
 $49 = HEAP32[$48 + 8 >> 2] | 0; //@line 5449
 $AsyncCtx8 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5450
 FUNCTION_TABLE_vi[$49 & 1023]($1); //@line 5451
 if (___async) {
  HEAP32[$AsyncCtx8 >> 2] = 180; //@line 5454
  HEAP32[$AsyncCtx8 + 4 >> 2] = $1; //@line 5456
  sp = STACKTOP; //@line 5457
  STACKTOP = sp; //@line 5458
  return;
 }
 _emscripten_free_async_context($AsyncCtx8 | 0); //@line 5460
 STACKTOP = sp; //@line 5461
 return;
}
function _mbedtls_internal_aes_decrypt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$in = 0, $$0136 = 0, $$0137 = 0, $$0138 = 0, $$0139 = 0, $$0140 = 0, $110 = 0, $130 = 0, $150 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $230 = 0, $250 = 0, $261 = 0, $268 = 0, $274 = 0, $276 = 0, $281 = 0, $288 = 0, $295 = 0, $301 = 0, $303 = 0, $308 = 0, $315 = 0, $322 = 0, $328 = 0, $329 = 0, $334 = 0, $341 = 0, $348 = 0, $354 = 0, $4 = 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 1028
 $$0$in = HEAP32[$0 >> 2] >> 1; //@line 1114
 $$0136 = $4 + 16 | 0; //@line 1114
 $$0137 = ((HEAPU8[$1 + 1 >> 0] | 0) << 8 | (HEAPU8[$1 >> 0] | 0) | (HEAPU8[$1 + 2 >> 0] | 0) << 16 | (HEAPU8[$1 + 3 >> 0] | 0) << 24) ^ HEAP32[$4 >> 2]; //@line 1114
 $$0138 = ((HEAPU8[$1 + 5 >> 0] | 0) << 8 | (HEAPU8[$1 + 4 >> 0] | 0) | (HEAPU8[$1 + 6 >> 0] | 0) << 16 | (HEAPU8[$1 + 7 >> 0] | 0) << 24) ^ HEAP32[$4 + 4 >> 2]; //@line 1114
 $$0139 = ((HEAPU8[$1 + 13 >> 0] | 0) << 8 | (HEAPU8[$1 + 12 >> 0] | 0) | (HEAPU8[$1 + 14 >> 0] | 0) << 16 | (HEAPU8[$1 + 15 >> 0] | 0) << 24) ^ HEAP32[$4 + 12 >> 2]; //@line 1114
 $$0140 = ((HEAPU8[$1 + 9 >> 0] | 0) << 8 | (HEAPU8[$1 + 8 >> 0] | 0) | (HEAPU8[$1 + 10 >> 0] | 0) << 16 | (HEAPU8[$1 + 11 >> 0] | 0) << 24) ^ HEAP32[$4 + 8 >> 2]; //@line 1114
 while (1) {
  $110 = HEAP32[1300 + (($$0137 & 255) << 2) >> 2] ^ HEAP32[$$0136 >> 2] ^ HEAP32[2324 + (($$0139 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($$0140 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($$0138 >>> 24 << 2) >> 2]; //@line 1136
  $130 = HEAP32[1300 + (($$0138 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 4 >> 2] ^ HEAP32[2324 + (($$0137 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($$0139 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($$0140 >>> 24 << 2) >> 2]; //@line 1156
  $150 = HEAP32[1300 + (($$0140 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 8 >> 2] ^ HEAP32[2324 + (($$0138 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($$0137 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($$0139 >>> 24 << 2) >> 2]; //@line 1176
  $170 = HEAP32[1300 + (($$0139 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 12 >> 2] ^ HEAP32[2324 + (($$0140 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($$0138 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($$0137 >>> 24 << 2) >> 2]; //@line 1196
  $171 = $$0136 + 20 | 0; //@line 1197
  $172 = HEAP32[$$0136 + 16 >> 2] | 0; //@line 1198
  $173 = $110 & 255; //@line 1199
  if (($$0$in | 0) <= 1) {
   break;
  }
  $230 = HEAP32[1300 + (($150 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 24 >> 2] ^ HEAP32[2324 + (($130 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($110 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($170 >>> 24 << 2) >> 2]; //@line 1260
  $250 = HEAP32[1300 + (($170 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 28 >> 2] ^ HEAP32[2324 + (($150 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($130 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($110 >>> 24 << 2) >> 2]; //@line 1280
  $$0$in = $$0$in + -1 | 0; //@line 1281
  $$0136 = $$0136 + 32 | 0; //@line 1281
  $$0137 = HEAP32[1300 + ($173 << 2) >> 2] ^ $172 ^ HEAP32[2324 + (($170 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($150 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($130 >>> 24 << 2) >> 2]; //@line 1281
  $$0138 = HEAP32[1300 + (($130 & 255) << 2) >> 2] ^ HEAP32[$171 >> 2] ^ HEAP32[2324 + (($110 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($170 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($150 >>> 24 << 2) >> 2]; //@line 1281
  $$0139 = $250; //@line 1281
  $$0140 = $230; //@line 1281
 }
 $261 = (HEAPU8[14089 + ($170 >>> 8 & 255) >> 0] | 0) << 8 ^ $172; //@line 1293
 $268 = (HEAPU8[14089 + ($150 >>> 16 & 255) >> 0] | 0) << 16 ^ $172; //@line 1300
 $274 = (HEAPU8[14089 + ($130 >>> 24) >> 0] | 0) << 24 ^ $172; //@line 1306
 $276 = HEAP32[$171 >> 2] | 0; //@line 1308
 $281 = $276 ^ (HEAPU8[14089 + ($130 & 255) >> 0] | 0); //@line 1313
 $288 = (HEAPU8[14089 + ($110 >>> 8 & 255) >> 0] | 0) << 8 ^ $276; //@line 1320
 $295 = (HEAPU8[14089 + ($170 >>> 16 & 255) >> 0] | 0) << 16 ^ $276; //@line 1327
 $301 = (HEAPU8[14089 + ($150 >>> 24) >> 0] | 0) << 24 ^ $276; //@line 1333
 $303 = HEAP32[$$0136 + 24 >> 2] | 0; //@line 1335
 $308 = $303 ^ (HEAPU8[14089 + ($150 & 255) >> 0] | 0); //@line 1340
 $315 = (HEAPU8[14089 + ($130 >>> 8 & 255) >> 0] | 0) << 8 ^ $303; //@line 1347
 $322 = (HEAPU8[14089 + ($110 >>> 16 & 255) >> 0] | 0) << 16 ^ $303; //@line 1354
 $328 = (HEAPU8[14089 + ($170 >>> 24) >> 0] | 0) << 24 ^ $303; //@line 1360
 $329 = HEAP32[$$0136 + 28 >> 2] | 0; //@line 1361
 $334 = $329 ^ (HEAPU8[14089 + ($170 & 255) >> 0] | 0); //@line 1366
 $341 = (HEAPU8[14089 + ($150 >>> 8 & 255) >> 0] | 0) << 8 ^ $329; //@line 1373
 $348 = (HEAPU8[14089 + ($130 >>> 16 & 255) >> 0] | 0) << 16 ^ $329; //@line 1380
 $354 = (HEAPU8[14089 + ($110 >>> 24) >> 0] | 0) << 24 ^ $329; //@line 1386
 HEAP8[$2 >> 0] = $172 ^ (HEAPU8[14089 + $173 >> 0] | 0); //@line 1388
 HEAP8[$2 + 1 >> 0] = $261 >>> 8; //@line 1392
 HEAP8[$2 + 2 >> 0] = $268 >>> 16; //@line 1396
 HEAP8[$2 + 3 >> 0] = $274 >>> 24; //@line 1400
 HEAP8[$2 + 4 >> 0] = $281; //@line 1403
 HEAP8[$2 + 5 >> 0] = $288 >>> 8; //@line 1407
 HEAP8[$2 + 6 >> 0] = $295 >>> 16; //@line 1411
 HEAP8[$2 + 7 >> 0] = $301 >>> 24; //@line 1415
 HEAP8[$2 + 8 >> 0] = $308; //@line 1418
 HEAP8[$2 + 9 >> 0] = $315 >>> 8; //@line 1422
 HEAP8[$2 + 10 >> 0] = $322 >>> 16; //@line 1426
 HEAP8[$2 + 11 >> 0] = $328 >>> 24; //@line 1430
 HEAP8[$2 + 12 >> 0] = $334; //@line 1433
 HEAP8[$2 + 13 >> 0] = $341 >>> 8; //@line 1437
 HEAP8[$2 + 14 >> 0] = $348 >>> 16; //@line 1441
 HEAP8[$2 + 15 >> 0] = $354 >>> 24; //@line 1445
 return 0; //@line 1446
}
function _mbedtls_internal_aes_encrypt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$in = 0, $$0136 = 0, $$0137 = 0, $$0138 = 0, $$0139 = 0, $$0140 = 0, $110 = 0, $130 = 0, $150 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $230 = 0, $250 = 0, $261 = 0, $268 = 0, $274 = 0, $276 = 0, $281 = 0, $288 = 0, $295 = 0, $301 = 0, $303 = 0, $308 = 0, $315 = 0, $322 = 0, $328 = 0, $329 = 0, $334 = 0, $341 = 0, $348 = 0, $354 = 0, $4 = 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 581
 $$0$in = HEAP32[$0 >> 2] >> 1; //@line 667
 $$0136 = $4 + 16 | 0; //@line 667
 $$0137 = ((HEAPU8[$1 + 1 >> 0] | 0) << 8 | (HEAPU8[$1 >> 0] | 0) | (HEAPU8[$1 + 2 >> 0] | 0) << 16 | (HEAPU8[$1 + 3 >> 0] | 0) << 24) ^ HEAP32[$4 >> 2]; //@line 667
 $$0138 = ((HEAPU8[$1 + 5 >> 0] | 0) << 8 | (HEAPU8[$1 + 4 >> 0] | 0) | (HEAPU8[$1 + 6 >> 0] | 0) << 16 | (HEAPU8[$1 + 7 >> 0] | 0) << 24) ^ HEAP32[$4 + 4 >> 2]; //@line 667
 $$0139 = ((HEAPU8[$1 + 13 >> 0] | 0) << 8 | (HEAPU8[$1 + 12 >> 0] | 0) | (HEAPU8[$1 + 14 >> 0] | 0) << 16 | (HEAPU8[$1 + 15 >> 0] | 0) << 24) ^ HEAP32[$4 + 12 >> 2]; //@line 667
 $$0140 = ((HEAPU8[$1 + 9 >> 0] | 0) << 8 | (HEAPU8[$1 + 8 >> 0] | 0) | (HEAPU8[$1 + 10 >> 0] | 0) << 16 | (HEAPU8[$1 + 11 >> 0] | 0) << 24) ^ HEAP32[$4 + 8 >> 2]; //@line 667
 while (1) {
  $110 = HEAP32[5396 + (($$0137 & 255) << 2) >> 2] ^ HEAP32[$$0136 >> 2] ^ HEAP32[6420 + (($$0138 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($$0140 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($$0139 >>> 24 << 2) >> 2]; //@line 689
  $130 = HEAP32[5396 + (($$0138 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 4 >> 2] ^ HEAP32[6420 + (($$0140 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($$0139 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($$0137 >>> 24 << 2) >> 2]; //@line 709
  $150 = HEAP32[5396 + (($$0140 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 8 >> 2] ^ HEAP32[6420 + (($$0139 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($$0137 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($$0138 >>> 24 << 2) >> 2]; //@line 729
  $170 = HEAP32[5396 + (($$0139 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 12 >> 2] ^ HEAP32[6420 + (($$0137 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($$0138 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($$0140 >>> 24 << 2) >> 2]; //@line 749
  $171 = $$0136 + 20 | 0; //@line 750
  $172 = HEAP32[$$0136 + 16 >> 2] | 0; //@line 751
  $173 = $110 & 255; //@line 752
  if (($$0$in | 0) <= 1) {
   break;
  }
  $230 = HEAP32[5396 + (($150 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 24 >> 2] ^ HEAP32[6420 + (($170 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($110 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($130 >>> 24 << 2) >> 2]; //@line 813
  $250 = HEAP32[5396 + (($170 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 28 >> 2] ^ HEAP32[6420 + (($110 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($130 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($150 >>> 24 << 2) >> 2]; //@line 833
  $$0$in = $$0$in + -1 | 0; //@line 834
  $$0136 = $$0136 + 32 | 0; //@line 834
  $$0137 = HEAP32[5396 + ($173 << 2) >> 2] ^ $172 ^ HEAP32[6420 + (($130 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($150 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($170 >>> 24 << 2) >> 2]; //@line 834
  $$0138 = HEAP32[5396 + (($130 & 255) << 2) >> 2] ^ HEAP32[$171 >> 2] ^ HEAP32[6420 + (($150 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($170 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($110 >>> 24 << 2) >> 2]; //@line 834
  $$0139 = $250; //@line 834
  $$0140 = $230; //@line 834
 }
 $261 = (HEAPU8[13833 + ($130 >>> 8 & 255) >> 0] | 0) << 8 ^ $172; //@line 846
 $268 = (HEAPU8[13833 + ($150 >>> 16 & 255) >> 0] | 0) << 16 ^ $172; //@line 853
 $274 = (HEAPU8[13833 + ($170 >>> 24) >> 0] | 0) << 24 ^ $172; //@line 859
 $276 = HEAP32[$171 >> 2] | 0; //@line 861
 $281 = $276 ^ (HEAPU8[13833 + ($130 & 255) >> 0] | 0); //@line 866
 $288 = (HEAPU8[13833 + ($150 >>> 8 & 255) >> 0] | 0) << 8 ^ $276; //@line 873
 $295 = (HEAPU8[13833 + ($170 >>> 16 & 255) >> 0] | 0) << 16 ^ $276; //@line 880
 $301 = (HEAPU8[13833 + ($110 >>> 24) >> 0] | 0) << 24 ^ $276; //@line 886
 $303 = HEAP32[$$0136 + 24 >> 2] | 0; //@line 888
 $308 = $303 ^ (HEAPU8[13833 + ($150 & 255) >> 0] | 0); //@line 893
 $315 = (HEAPU8[13833 + ($170 >>> 8 & 255) >> 0] | 0) << 8 ^ $303; //@line 900
 $322 = (HEAPU8[13833 + ($110 >>> 16 & 255) >> 0] | 0) << 16 ^ $303; //@line 907
 $328 = (HEAPU8[13833 + ($130 >>> 24) >> 0] | 0) << 24 ^ $303; //@line 913
 $329 = HEAP32[$$0136 + 28 >> 2] | 0; //@line 914
 $334 = $329 ^ (HEAPU8[13833 + ($170 & 255) >> 0] | 0); //@line 919
 $341 = (HEAPU8[13833 + ($110 >>> 8 & 255) >> 0] | 0) << 8 ^ $329; //@line 926
 $348 = (HEAPU8[13833 + ($130 >>> 16 & 255) >> 0] | 0) << 16 ^ $329; //@line 933
 $354 = (HEAPU8[13833 + ($150 >>> 24) >> 0] | 0) << 24 ^ $329; //@line 939
 HEAP8[$2 >> 0] = $172 ^ (HEAPU8[13833 + $173 >> 0] | 0); //@line 941
 HEAP8[$2 + 1 >> 0] = $261 >>> 8; //@line 945
 HEAP8[$2 + 2 >> 0] = $268 >>> 16; //@line 949
 HEAP8[$2 + 3 >> 0] = $274 >>> 24; //@line 953
 HEAP8[$2 + 4 >> 0] = $281; //@line 956
 HEAP8[$2 + 5 >> 0] = $288 >>> 8; //@line 960
 HEAP8[$2 + 6 >> 0] = $295 >>> 16; //@line 964
 HEAP8[$2 + 7 >> 0] = $301 >>> 24; //@line 968
 HEAP8[$2 + 8 >> 0] = $308; //@line 971
 HEAP8[$2 + 9 >> 0] = $315 >>> 8; //@line 975
 HEAP8[$2 + 10 >> 0] = $322 >>> 16; //@line 979
 HEAP8[$2 + 11 >> 0] = $328 >>> 24; //@line 983
 HEAP8[$2 + 12 >> 0] = $334; //@line 986
 HEAP8[$2 + 13 >> 0] = $341 >>> 8; //@line 990
 HEAP8[$2 + 14 >> 0] = $348 >>> 16; //@line 994
 HEAP8[$2 + 15 >> 0] = $354 >>> 24; //@line 998
 return 0; //@line 999
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv($0) {
 $0 = $0 | 0;
 var $17 = 0, $27 = 0, $32 = 0, $41 = 0, $44 = 0, $47 = 0, $56 = 0, $58 = 0, $62 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx21 = 0, $AsyncCtx8 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 16724
 STACKTOP = STACKTOP + 32 | 0; //@line 16725
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 16725
 $vararg_buffer5 = sp + 24 | 0; //@line 16726
 $vararg_buffer3 = sp + 16 | 0; //@line 16727
 _printf(12943, sp) | 0; //@line 16730
 _printf(13448, sp + 8 | 0) | 0; //@line 16731
 $AsyncCtx11 = _emscripten_alloc_async_context(24, sp) | 0; //@line 16732
 _putchar(10) | 0; //@line 16733
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 497; //@line 16736
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 16738
  HEAP32[$AsyncCtx11 + 8 >> 2] = $vararg_buffer3; //@line 16740
  HEAP32[$AsyncCtx11 + 12 >> 2] = $vararg_buffer3; //@line 16742
  HEAP32[$AsyncCtx11 + 16 >> 2] = $vararg_buffer5; //@line 16744
  HEAP32[$AsyncCtx11 + 20 >> 2] = $vararg_buffer5; //@line 16746
  sp = STACKTOP; //@line 16747
  STACKTOP = sp; //@line 16748
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 16750
 $7 = HEAP32[$0 + 356 >> 2] | 0; //@line 16752
 $AsyncCtx21 = _emscripten_alloc_async_context(24, sp) | 0; //@line 16754
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($7, $0 + 1036 | 0); //@line 16755
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 498; //@line 16758
  HEAP32[$AsyncCtx21 + 4 >> 2] = $0; //@line 16760
  HEAP32[$AsyncCtx21 + 8 >> 2] = $vararg_buffer3; //@line 16762
  HEAP32[$AsyncCtx21 + 12 >> 2] = $vararg_buffer3; //@line 16764
  HEAP32[$AsyncCtx21 + 16 >> 2] = $vararg_buffer5; //@line 16766
  HEAP32[$AsyncCtx21 + 20 >> 2] = $vararg_buffer5; //@line 16768
  sp = STACKTOP; //@line 16769
  STACKTOP = sp; //@line 16770
  return;
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 16772
 HEAP32[$0 + 364 >> 2] = 0; //@line 16774
 $17 = $0 + 1160 | 0; //@line 16777
 HEAP8[$17 >> 0] = HEAP8[$0 + 378 >> 0] | 0; //@line 16778
 HEAP8[$0 + 1163 >> 0] = HEAP8[$0 + 1129 >> 0] | 0; //@line 16782
 HEAP8[$0 + 1176 >> 0] = HEAP8[$0 + 1141 >> 0] | 0; //@line 16786
 HEAP8[$0 + 1177 >> 0] = HEAP8[$0 + 369 >> 0] | 0; //@line 16790
 $27 = $0 + 1178 | 0; //@line 16791
 HEAP8[$27 >> 0] = 0; //@line 16792
 HEAP32[$0 + 1180 >> 2] = 0; //@line 16794
 do {
  if ((HEAP32[$0 + 360 >> 2] | 0) == 2) {
   $32 = HEAP32[$0 >> 2] | 0; //@line 16800
   $AsyncCtx18 = _emscripten_alloc_async_context(36, sp) | 0; //@line 16801
   __ZN7LoRaPHY20put_radio_to_standbyEv($32); //@line 16802
   if (___async) {
    HEAP32[$AsyncCtx18 >> 2] = 499; //@line 16805
    HEAP32[$AsyncCtx18 + 4 >> 2] = $0; //@line 16807
    HEAP32[$AsyncCtx18 + 8 >> 2] = $0; //@line 16809
    HEAP32[$AsyncCtx18 + 12 >> 2] = $17; //@line 16811
    HEAP32[$AsyncCtx18 + 16 >> 2] = $27; //@line 16813
    HEAP32[$AsyncCtx18 + 20 >> 2] = $vararg_buffer3; //@line 16815
    HEAP32[$AsyncCtx18 + 24 >> 2] = $vararg_buffer3; //@line 16817
    HEAP32[$AsyncCtx18 + 28 >> 2] = $vararg_buffer5; //@line 16819
    HEAP32[$AsyncCtx18 + 32 >> 2] = $vararg_buffer5; //@line 16821
    sp = STACKTOP; //@line 16822
    STACKTOP = sp; //@line 16823
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx18 | 0); //@line 16825
    break;
   }
  }
 } while (0);
 $41 = HEAP32[$0 >> 2] | 0; //@line 16830
 $44 = HEAP32[(HEAP32[$41 >> 2] | 0) + 24 >> 2] | 0; //@line 16833
 $47 = (__ZN11LoRaMacMcps14get_indicationEv($0 + 288 | 0) | 0) + 10 | 0; //@line 16836
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 16837
 FUNCTION_TABLE_iiii[$44 & 15]($41, $17, $47) | 0; //@line 16838
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 500; //@line 16841
  HEAP32[$AsyncCtx + 4 >> 2] = $27; //@line 16843
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 16845
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer3; //@line 16847
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 16849
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer5; //@line 16851
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer5; //@line 16853
  HEAP32[$AsyncCtx + 28 >> 2] = $0; //@line 16855
  sp = STACKTOP; //@line 16856
  STACKTOP = sp; //@line 16857
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16859
 $56 = (HEAP8[$27 >> 0] | 0) != 0; //@line 16861
 $58 = HEAP32[$0 + 1108 >> 2] | 0; //@line 16863
 _printf(12943, $vararg_buffer3) | 0; //@line 16864
 _printf(13019, $vararg_buffer5) | 0; //@line 16865
 $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 16866
 _putchar(10) | 0; //@line 16867
 if (___async) {
  HEAP32[$AsyncCtx8 >> 2] = 501; //@line 16870
  HEAP32[$AsyncCtx8 + 4 >> 2] = $0; //@line 16872
  HEAP8[$AsyncCtx8 + 8 >> 0] = $56 & 1; //@line 16875
  HEAP32[$AsyncCtx8 + 12 >> 2] = $58; //@line 16877
  sp = STACKTOP; //@line 16878
  STACKTOP = sp; //@line 16879
  return;
 }
 _emscripten_free_async_context($AsyncCtx8 | 0); //@line 16881
 $62 = HEAP32[$0 >> 2] | 0; //@line 16882
 $AsyncCtx14 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16883
 __ZN7LoRaPHY15setup_rx_windowEbj($62, $56, $58); //@line 16884
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 502; //@line 16887
  sp = STACKTOP; //@line 16888
  STACKTOP = sp; //@line 16889
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx14 | 0); //@line 16891
  STACKTOP = sp; //@line 16892
  return;
 }
}
function __ZN12LoRaWANStack17send_frame_to_macEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$pre$phiZ2D = 0, $$sink2$sink = 0, $1 = 0, $14 = 0, $15 = 0, $2 = 0, $38 = 0, $39 = 0, $4 = 0, $58 = 0, $59 = 0, $72 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 8049
 STACKTOP = STACKTOP + 32 | 0; //@line 8050
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 8050
 $1 = sp + 16 | 0; //@line 8051
 $2 = sp; //@line 8052
 $4 = HEAP32[$0 + 1968 >> 2] | 0; //@line 8054
 HEAP32[$1 >> 2] = $4; //@line 8055
 L1 : do {
  switch ($4 | 0) {
  case 0:
   {
    HEAP32[$1 + 8 >> 2] = $0 + 1975; //@line 8061
    HEAP16[$1 + 12 >> 1] = HEAP16[$0 + 2230 >> 1] | 0; //@line 8065
    HEAP8[$1 + 4 >> 0] = HEAP8[$0 + 1972 >> 0] | 0; //@line 8069
    HEAP8[$1 + 6 >> 0] = 1; //@line 8071
    HEAP32[$2 >> 2] = 21; //@line 8072
    $14 = $0 + 4 | 0; //@line 8073
    $AsyncCtx11 = _emscripten_alloc_async_context(28, sp) | 0; //@line 8074
    $15 = __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($14, $2) | 0; //@line 8075
    if (___async) {
     HEAP32[$AsyncCtx11 >> 2] = 279; //@line 8078
     HEAP32[$AsyncCtx11 + 4 >> 2] = $2; //@line 8080
     HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 8082
     HEAP32[$AsyncCtx11 + 12 >> 2] = $14; //@line 8084
     HEAP32[$AsyncCtx11 + 16 >> 2] = $1; //@line 8086
     HEAP32[$AsyncCtx11 + 20 >> 2] = $2; //@line 8088
     HEAP32[$AsyncCtx11 + 24 >> 2] = $1; //@line 8090
     sp = STACKTOP; //@line 8091
     STACKTOP = sp; //@line 8092
     return 0; //@line 8092
    }
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 8094
    if (!$15) {
     $$pre$phiZ2D = $14; //@line 8099
     $$sink2$sink = HEAP8[$2 + 4 >> 0] | 0; //@line 8099
     break L1;
    } else {
     $$pre$phiZ2D = $14; //@line 8104
     $$sink2$sink = __ZN7LoRaPHY23get_default_tx_datarateEv($0 + 1336 | 0) | 0; //@line 8104
     break L1;
    }
    break;
   }
  case 1:
   {
    HEAP32[$1 + 8 >> 2] = $0 + 1975; //@line 8112
    HEAP16[$1 + 12 >> 1] = HEAP16[$0 + 2230 >> 1] | 0; //@line 8116
    HEAP8[$1 + 4 >> 0] = HEAP8[$0 + 1972 >> 0] | 0; //@line 8120
    HEAP8[$1 + 6 >> 0] = HEAP8[$0 + 1974 >> 0] | 0; //@line 8124
    HEAP32[$2 >> 2] = 21; //@line 8125
    $38 = $0 + 4 | 0; //@line 8126
    $AsyncCtx7 = _emscripten_alloc_async_context(28, sp) | 0; //@line 8127
    $39 = __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($38, $2) | 0; //@line 8128
    if (___async) {
     HEAP32[$AsyncCtx7 >> 2] = 280; //@line 8131
     HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 8133
     HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 8135
     HEAP32[$AsyncCtx7 + 12 >> 2] = $38; //@line 8137
     HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 8139
     HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 8141
     HEAP32[$AsyncCtx7 + 24 >> 2] = $1; //@line 8143
     sp = STACKTOP; //@line 8144
     STACKTOP = sp; //@line 8145
     return 0; //@line 8145
    }
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 8147
    if (!$39) {
     $$pre$phiZ2D = $38; //@line 8152
     $$sink2$sink = HEAP8[$2 + 4 >> 0] | 0; //@line 8152
     break L1;
    } else {
     $$pre$phiZ2D = $38; //@line 8157
     $$sink2$sink = __ZN7LoRaPHY23get_default_tx_datarateEv($0 + 1336 | 0) | 0; //@line 8157
     break L1;
    }
    break;
   }
  case 3:
   {
    HEAP32[$1 + 8 >> 2] = $0 + 1975; //@line 8165
    HEAP16[$1 + 12 >> 1] = HEAP16[$0 + 2230 >> 1] | 0; //@line 8169
    HEAP8[$1 + 4 >> 0] = 0; //@line 8171
    HEAP8[$1 + 6 >> 0] = 1; //@line 8173
    HEAP32[$2 >> 2] = 21; //@line 8174
    $58 = $0 + 4 | 0; //@line 8175
    $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 8176
    $59 = __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($58, $2) | 0; //@line 8177
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 281; //@line 8180
     HEAP32[$AsyncCtx3 + 4 >> 2] = $2; //@line 8182
     HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 8184
     HEAP32[$AsyncCtx3 + 12 >> 2] = $58; //@line 8186
     HEAP32[$AsyncCtx3 + 16 >> 2] = $1; //@line 8188
     HEAP32[$AsyncCtx3 + 20 >> 2] = $2; //@line 8190
     HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 8192
     sp = STACKTOP; //@line 8193
     STACKTOP = sp; //@line 8194
     return 0; //@line 8194
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 8196
    if (!$59) {
     $$pre$phiZ2D = $58; //@line 8201
     $$sink2$sink = HEAP8[$2 + 4 >> 0] | 0; //@line 8201
     break L1;
    } else {
     $$pre$phiZ2D = $58; //@line 8206
     $$sink2$sink = __ZN7LoRaPHY23get_default_tx_datarateEv($0 + 1336 | 0) | 0; //@line 8206
     break L1;
    }
    break;
   }
  default:
   {
    $$0 = -1002; //@line 8212
    STACKTOP = sp; //@line 8213
    return $$0 | 0; //@line 8213
   }
  }
 } while (0);
 HEAP8[$1 + 5 >> 0] = $$sink2$sink; //@line 8218
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 8219
 $72 = __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t($$pre$phiZ2D, $1) | 0; //@line 8220
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 282; //@line 8223
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 8225
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 8227
  sp = STACKTOP; //@line 8228
  STACKTOP = sp; //@line 8229
  return 0; //@line 8229
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8231
 $$0 = $72; //@line 8232
 STACKTOP = sp; //@line 8233
 return $$0 | 0; //@line 8233
}
function __ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$01722$i = 0, $$01821$i = 0, $$023$i = 0, $$2$i = 0, $$220$i = 0, $$sink = 0, $10 = 0, $11 = 0, $15 = 0, $22 = 0, $23 = 0, $25 = 0, $37 = 0, $39 = 0, $40 = 0, $42 = 0, $44 = 0, $45 = 0, $47 = 0, $5 = 0, $55 = 0, $57 = 0, $7 = 0, $75 = 0, $78 = 0, $8 = 0, $9 = 0, $91 = 0, $92 = 0, $indvars$iv$i = 0, $indvars$iv$i27 = 0, $wide$trip$count$i = 0, $wide$trip$count$i25 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 24320
 STACKTOP = STACKTOP + 16 | 0; //@line 24321
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 24321
 $5 = sp; //@line 24322
 dest = $5; //@line 24323
 stop = dest + 16 | 0; //@line 24323
 do {
  HEAP8[dest >> 0] = 255; //@line 24323
  dest = dest + 1 | 0; //@line 24323
 } while ((dest | 0) < (stop | 0));
 $7 = HEAP32[$0 + 72 >> 2] | 0; //@line 24325
 $8 = $0 + 120 | 0; //@line 24326
 $9 = HEAP32[$8 >> 2] | 0; //@line 24327
 $10 = $0 + 128 | 0; //@line 24328
 $11 = HEAP8[$10 >> 0] | 0; //@line 24329
 if (!((__ZN7LoRaPHY19num_active_channelsEPthh(0, $9, 0, $11) | 0) << 24 >> 24)) {
  $15 = HEAP32[$0 + 124 >> 2] | 0; //@line 24334
  if ($11 << 24 >> 24 != 0 & (($9 | 0) != 0 & ($15 | 0) != 0)) {
   $wide$trip$count$i = $11 & 255; //@line 24341
   $indvars$iv$i = 0; //@line 24342
   do {
    HEAP16[$9 + ($indvars$iv$i << 1) >> 1] = HEAP16[$15 + ($indvars$iv$i << 1) >> 1] | 0; //@line 24347
    $indvars$iv$i = $indvars$iv$i + 1 | 0; //@line 24348
   } while (($indvars$iv$i | 0) != ($wide$trip$count$i | 0));
  }
 }
 $22 = HEAP32[$1 >> 2] | 0; //@line 24358
 $23 = $0 + 8 | 0; //@line 24359
 $25 = $1 + 4 | 0; //@line 24361
 if ($22 >>> 0 > (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$23 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0) >>> 0) {
  $78 = HEAP32[$1 >> 2] | 0; //@line 24366
  $$0 = 1; //@line 24371
  $$sink = $78 - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$23 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0) | 0; //@line 24371
  HEAP32[$3 >> 2] = $$sink; //@line 24372
  STACKTOP = sp; //@line 24373
  return $$0 | 0; //@line 24373
 }
 HEAP32[$4 >> 2] = 0; //@line 24375
 $37 = __ZN7LoRaPHY19update_band_timeoffEbbP6band_th($0, (HEAP8[$1 + 9 >> 0] | 0) != 0, (HEAP8[$1 + 10 >> 0] | 0) != 0, $7, HEAP8[$0 + 76 >> 0] | 0) | 0; //@line 24384
 $39 = HEAP8[$1 + 8 >> 0] | 0; //@line 24386
 $40 = HEAP32[$8 >> 2] | 0; //@line 24387
 $42 = HEAP8[$0 + 20 >> 0] | 0; //@line 24389
 do {
  if ($42 << 24 >> 24) {
   $44 = $0 + 112 | 0; //@line 24393
   $45 = $0 + 72 | 0; //@line 24394
   $$01722$i = 0; //@line 24395
   $$01821$i = 0; //@line 24395
   $$023$i = 0; //@line 24395
   $47 = 0; //@line 24395
   while (1) {
    do {
     if (!(1 << ($47 & 15) & HEAPU16[$40 + ($47 >>> 4 << 1) >> 1])) {
      $$2$i = $$023$i; //@line 24407
      $$220$i = $$01821$i; //@line 24407
     } else {
      $55 = HEAP32[$44 >> 2] | 0; //@line 24409
      $57 = HEAP8[$55 + ($47 * 12 | 0) + 8 >> 0] | 0; //@line 24411
      if ($57 << 24 >> 24 >> 4 << 24 >> 24 < $39 << 24 >> 24 ? 1 : ($57 << 4 & 255) << 24 >> 24 >> 4 << 24 >> 24 > $39 << 24 >> 24) {
       $$2$i = $$023$i; //@line 24419
       $$220$i = $$01821$i; //@line 24419
      } else {
       if (!(HEAP32[(HEAP32[$45 >> 2] | 0) + ((HEAPU8[$55 + ($47 * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 12 >> 2] | 0)) {
        HEAP8[$5 + ($$023$i & 255) >> 0] = $$01722$i; //@line 24432
        $$2$i = $$023$i + 1 << 24 >> 24; //@line 24433
        $$220$i = $$01821$i; //@line 24433
        break;
       } else {
        $$2$i = $$023$i; //@line 24437
        $$220$i = $$01821$i + 1 << 24 >> 24; //@line 24437
        break;
       }
      }
     }
    } while (0);
    $75 = $$01722$i + 1 << 24 >> 24; //@line 24443
    if (($75 & 255) < ($42 & 255)) {
     $$01722$i = $75; //@line 24447
     $$01821$i = $$220$i; //@line 24447
     $$023$i = $$2$i; //@line 24447
     $47 = $75 & 255; //@line 24447
    } else {
     break;
    }
   }
   if (!($$2$i << 24 >> 24)) {
    if (!($$220$i << 24 >> 24)) {
     break;
    } else {
     $$0 = 1; //@line 24458
     $$sink = $37; //@line 24458
    }
    HEAP32[$3 >> 2] = $$sink; //@line 24460
    STACKTOP = sp; //@line 24461
    return $$0 | 0; //@line 24461
   } else {
    HEAP8[$2 >> 0] = HEAP8[$5 + ((_rand() | 0) % ($$2$i & 255 | 0) | 0) >> 0] | 0; //@line 24468
    $$0 = 1; //@line 24469
    $$sink = 0; //@line 24469
    HEAP32[$3 >> 2] = $$sink; //@line 24470
    STACKTOP = sp; //@line 24471
    return $$0 | 0; //@line 24471
   }
  }
 } while (0);
 $91 = HEAP32[$0 + 124 >> 2] | 0; //@line 24476
 $92 = HEAP8[$10 >> 0] | 0; //@line 24477
 if (!(($40 | 0) != 0 & ($91 | 0) != 0 & $92 << 24 >> 24 != 0)) {
  $$0 = 0; //@line 24484
  $$sink = 0; //@line 24484
  HEAP32[$3 >> 2] = $$sink; //@line 24485
  STACKTOP = sp; //@line 24486
  return $$0 | 0; //@line 24486
 }
 $wide$trip$count$i25 = $92 & 255; //@line 24488
 $indvars$iv$i27 = 0; //@line 24489
 do {
  HEAP16[$40 + ($indvars$iv$i27 << 1) >> 1] = HEAP16[$91 + ($indvars$iv$i27 << 1) >> 1] | 0; //@line 24494
  $indvars$iv$i27 = $indvars$iv$i27 + 1 | 0; //@line 24495
 } while (($indvars$iv$i27 | 0) != ($wide$trip$count$i25 | 0));
 $$0 = 0; //@line 24498
 $$sink = 0; //@line 24498
 HEAP32[$3 >> 2] = $$sink; //@line 24504
 STACKTOP = sp; //@line 24505
 return $$0 | 0; //@line 24505
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_8($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 17695
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17697
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17699
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17701
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17705
 $11 = $10 + 12 | 0; //@line 17706
 HEAP32[$10 >> 2] = 563; //@line 17707
 HEAP32[$10 + 4 >> 2] = 0; //@line 17709
 HEAP32[$10 + 8 >> 2] = $4; //@line 17711
 HEAP32[$11 >> 2] = 848; //@line 17712
 $12 = $4 + 1228 | 0; //@line 17713
 if (($12 | 0) == ($10 | 0)) {
  $35 = HEAP32[214] | 0; //@line 17717
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 17718
  FUNCTION_TABLE_vi[$35 & 1023]($10); //@line 17719
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 566; //@line 17722
   $36 = $ReallocAsyncCtx12 + 4 | 0; //@line 17723
   HEAP32[$36 >> 2] = $10; //@line 17724
   $37 = $ReallocAsyncCtx12 + 8 | 0; //@line 17725
   HEAP32[$37 >> 2] = $6; //@line 17726
   $38 = $ReallocAsyncCtx12 + 12 | 0; //@line 17727
   HEAP32[$38 >> 2] = $4; //@line 17728
   $39 = $ReallocAsyncCtx12 + 16 | 0; //@line 17729
   HEAP32[$39 >> 2] = $2; //@line 17730
   sp = STACKTOP; //@line 17731
   return;
  }
  ___async_unwind = 0; //@line 17734
  HEAP32[$ReallocAsyncCtx12 >> 2] = 566; //@line 17735
  $36 = $ReallocAsyncCtx12 + 4 | 0; //@line 17736
  HEAP32[$36 >> 2] = $10; //@line 17737
  $37 = $ReallocAsyncCtx12 + 8 | 0; //@line 17738
  HEAP32[$37 >> 2] = $6; //@line 17739
  $38 = $ReallocAsyncCtx12 + 12 | 0; //@line 17740
  HEAP32[$38 >> 2] = $4; //@line 17741
  $39 = $ReallocAsyncCtx12 + 16 | 0; //@line 17742
  HEAP32[$39 >> 2] = $2; //@line 17743
  sp = STACKTOP; //@line 17744
  return;
 }
 $14 = $4 + 1240 | 0; //@line 17747
 $15 = HEAP32[$14 >> 2] | 0; //@line 17748
 if (!$15) {
  $27 = HEAP32[213] | 0; //@line 17752
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(28) | 0; //@line 17753
  FUNCTION_TABLE_vii[$27 & 31]($12, $10); //@line 17754
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 565; //@line 17757
   $28 = $ReallocAsyncCtx11 + 4 | 0; //@line 17758
   HEAP32[$28 >> 2] = $2; //@line 17759
   $29 = $ReallocAsyncCtx11 + 8 | 0; //@line 17760
   HEAP32[$29 >> 2] = $4; //@line 17761
   $30 = $ReallocAsyncCtx11 + 12 | 0; //@line 17762
   HEAP32[$30 >> 2] = $10; //@line 17763
   $31 = $ReallocAsyncCtx11 + 16 | 0; //@line 17764
   HEAP32[$31 >> 2] = $6; //@line 17765
   $32 = $ReallocAsyncCtx11 + 20 | 0; //@line 17766
   HEAP32[$32 >> 2] = $11; //@line 17767
   $33 = $ReallocAsyncCtx11 + 24 | 0; //@line 17768
   HEAP32[$33 >> 2] = $14; //@line 17769
   sp = STACKTOP; //@line 17770
   return;
  }
  ___async_unwind = 0; //@line 17773
  HEAP32[$ReallocAsyncCtx11 >> 2] = 565; //@line 17774
  $28 = $ReallocAsyncCtx11 + 4 | 0; //@line 17775
  HEAP32[$28 >> 2] = $2; //@line 17776
  $29 = $ReallocAsyncCtx11 + 8 | 0; //@line 17777
  HEAP32[$29 >> 2] = $4; //@line 17778
  $30 = $ReallocAsyncCtx11 + 12 | 0; //@line 17779
  HEAP32[$30 >> 2] = $10; //@line 17780
  $31 = $ReallocAsyncCtx11 + 16 | 0; //@line 17781
  HEAP32[$31 >> 2] = $6; //@line 17782
  $32 = $ReallocAsyncCtx11 + 20 | 0; //@line 17783
  HEAP32[$32 >> 2] = $11; //@line 17784
  $33 = $ReallocAsyncCtx11 + 24 | 0; //@line 17785
  HEAP32[$33 >> 2] = $14; //@line 17786
  sp = STACKTOP; //@line 17787
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 17791
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 17792
  FUNCTION_TABLE_vi[$18 & 1023]($12); //@line 17793
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 564; //@line 17796
   $19 = $ReallocAsyncCtx10 + 4 | 0; //@line 17797
   HEAP32[$19 >> 2] = $2; //@line 17798
   $20 = $ReallocAsyncCtx10 + 8 | 0; //@line 17799
   HEAP32[$20 >> 2] = $4; //@line 17800
   $21 = $ReallocAsyncCtx10 + 12 | 0; //@line 17801
   HEAP32[$21 >> 2] = $10; //@line 17802
   $22 = $ReallocAsyncCtx10 + 16 | 0; //@line 17803
   HEAP32[$22 >> 2] = $6; //@line 17804
   $23 = $ReallocAsyncCtx10 + 20 | 0; //@line 17805
   HEAP32[$23 >> 2] = $11; //@line 17806
   $24 = $ReallocAsyncCtx10 + 24 | 0; //@line 17807
   HEAP32[$24 >> 2] = $12; //@line 17808
   $25 = $ReallocAsyncCtx10 + 28 | 0; //@line 17809
   HEAP32[$25 >> 2] = $14; //@line 17810
   sp = STACKTOP; //@line 17811
   return;
  }
  ___async_unwind = 0; //@line 17814
  HEAP32[$ReallocAsyncCtx10 >> 2] = 564; //@line 17815
  $19 = $ReallocAsyncCtx10 + 4 | 0; //@line 17816
  HEAP32[$19 >> 2] = $2; //@line 17817
  $20 = $ReallocAsyncCtx10 + 8 | 0; //@line 17818
  HEAP32[$20 >> 2] = $4; //@line 17819
  $21 = $ReallocAsyncCtx10 + 12 | 0; //@line 17820
  HEAP32[$21 >> 2] = $10; //@line 17821
  $22 = $ReallocAsyncCtx10 + 16 | 0; //@line 17822
  HEAP32[$22 >> 2] = $6; //@line 17823
  $23 = $ReallocAsyncCtx10 + 20 | 0; //@line 17824
  HEAP32[$23 >> 2] = $11; //@line 17825
  $24 = $ReallocAsyncCtx10 + 24 | 0; //@line 17826
  HEAP32[$24 >> 2] = $12; //@line 17827
  $25 = $ReallocAsyncCtx10 + 28 | 0; //@line 17828
  HEAP32[$25 >> 2] = $14; //@line 17829
  sp = STACKTOP; //@line 17830
  return;
 }
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_454($0) {
 $0 = $0 | 0;
 var $$05$i = 0, $$06$i = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $41 = 0, $53 = 0, $56 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $73 = 0, $74 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 31733
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31735
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31737
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31739
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31741
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31743
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31745
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31747
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31749
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 31751
 $19 = $2 + 968 | 0; //@line 31752
 HEAP32[$19 >> 2] = HEAP32[$19 >> 2] & -17; //@line 31755
 if (HEAP8[$2 + 944 >> 0] & 8) {
  if (!(HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) >> 2] | 0)) {
   HEAP8[$2 + 372 >> 0] = 0; //@line 31768
   HEAP32[$2 + 956 >> 2] = 0; //@line 31770
   HEAP32[$2 + 960 >> 2] = 0; //@line 31772
   HEAP32[$2 + 964 >> 2] = 0; //@line 31774
   HEAP8[$2 + 380 >> 0] = 0; //@line 31776
   HEAP8[$2 + 894 >> 0] = 1; //@line 31778
   HEAP8[$2 + 895 >> 0] = 1; //@line 31780
   HEAP8[$2 + 377 >> 0] = 0; //@line 31782
   HEAP8[$2 + 1152 >> 0] = 0; //@line 31784
   HEAP16[$2 + 1154 >> 1] = 1; //@line 31786
   $41 = $2 + 4 | 0; //@line 31787
   __ZN14LoRaMacCommand20clear_command_bufferEv($41); //@line 31788
   __ZN14LoRaMacCommand19clear_repeat_bufferEv($41); //@line 31789
   __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($41); //@line 31790
   HEAP8[$2 + 371 >> 0] = 1; //@line 31792
   __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb(HEAP32[$2 >> 2] | 0, $2 + 360 | 0, 0); //@line 31794
   HEAP8[$2 + 373 >> 0] = 0; //@line 31796
   HEAP8[$2 + 374 >> 0] = 0; //@line 31798
   $$05$i = HEAP32[$2 + 1208 >> 2] | 0; //@line 31800
   if ($$05$i | 0) {
    $$06$i = $$05$i; //@line 31803
    do {
     HEAP32[$$06$i + 36 >> 2] = 0; //@line 31806
     $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 31808
    } while (($$06$i | 0) != 0);
   }
   HEAP8[$2 + 378 >> 0] = 0; //@line 31818
   HEAP8[$2 + 379 >> 0] = 0; //@line 31820
   $53 = HEAP32[$2 >> 2] | 0; //@line 31821
   $56 = HEAP32[(HEAP32[$53 >> 2] | 0) + 52 >> 2] | 0; //@line 31824
   $61 = (HEAPU8[$2 + 897 >> 0] | 0) + 1 & 255; //@line 31829
   $ReallocAsyncCtx = _emscripten_realloc_async_context(40) | 0; //@line 31830
   $62 = FUNCTION_TABLE_iii[$56 & 31]($53, $61) | 0; //@line 31831
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 468; //@line 31834
    $63 = $ReallocAsyncCtx + 4 | 0; //@line 31835
    HEAP32[$63 >> 2] = $2; //@line 31836
    $64 = $ReallocAsyncCtx + 8 | 0; //@line 31837
    HEAP32[$64 >> 2] = $4; //@line 31838
    $65 = $ReallocAsyncCtx + 12 | 0; //@line 31839
    HEAP32[$65 >> 2] = $6; //@line 31840
    $66 = $ReallocAsyncCtx + 16 | 0; //@line 31841
    HEAP32[$66 >> 2] = $8; //@line 31842
    $67 = $ReallocAsyncCtx + 20 | 0; //@line 31843
    HEAP32[$67 >> 2] = $10; //@line 31844
    $68 = $ReallocAsyncCtx + 24 | 0; //@line 31845
    HEAP32[$68 >> 2] = $12; //@line 31846
    $69 = $ReallocAsyncCtx + 28 | 0; //@line 31847
    HEAP32[$69 >> 2] = $14; //@line 31848
    $70 = $ReallocAsyncCtx + 32 | 0; //@line 31849
    HEAP32[$70 >> 2] = $16; //@line 31850
    $71 = $ReallocAsyncCtx + 36 | 0; //@line 31851
    HEAP32[$71 >> 2] = $18; //@line 31852
    sp = STACKTOP; //@line 31853
    return;
   }
   HEAP8[___async_retval >> 0] = $62; //@line 31857
   ___async_unwind = 0; //@line 31858
   HEAP32[$ReallocAsyncCtx >> 2] = 468; //@line 31859
   $63 = $ReallocAsyncCtx + 4 | 0; //@line 31860
   HEAP32[$63 >> 2] = $2; //@line 31861
   $64 = $ReallocAsyncCtx + 8 | 0; //@line 31862
   HEAP32[$64 >> 2] = $4; //@line 31863
   $65 = $ReallocAsyncCtx + 12 | 0; //@line 31864
   HEAP32[$65 >> 2] = $6; //@line 31865
   $66 = $ReallocAsyncCtx + 16 | 0; //@line 31866
   HEAP32[$66 >> 2] = $8; //@line 31867
   $67 = $ReallocAsyncCtx + 20 | 0; //@line 31868
   HEAP32[$67 >> 2] = $10; //@line 31869
   $68 = $ReallocAsyncCtx + 24 | 0; //@line 31870
   HEAP32[$68 >> 2] = $12; //@line 31871
   $69 = $ReallocAsyncCtx + 28 | 0; //@line 31872
   HEAP32[$69 >> 2] = $14; //@line 31873
   $70 = $ReallocAsyncCtx + 32 | 0; //@line 31874
   HEAP32[$70 >> 2] = $16; //@line 31875
   $71 = $ReallocAsyncCtx + 36 | 0; //@line 31876
   HEAP32[$71 >> 2] = $18; //@line 31877
   sp = STACKTOP; //@line 31878
   return;
  }
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 31882
 __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 31883
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 470; //@line 31886
  $73 = $ReallocAsyncCtx5 + 4 | 0; //@line 31887
  HEAP32[$73 >> 2] = $6; //@line 31888
  $74 = $ReallocAsyncCtx5 + 8 | 0; //@line 31889
  HEAP32[$74 >> 2] = $4; //@line 31890
  sp = STACKTOP; //@line 31891
  return;
 }
 ___async_unwind = 0; //@line 31894
 HEAP32[$ReallocAsyncCtx5 >> 2] = 470; //@line 31895
 $73 = $ReallocAsyncCtx5 + 4 | 0; //@line 31896
 HEAP32[$73 >> 2] = $6; //@line 31897
 $74 = $ReallocAsyncCtx5 + 8 | 0; //@line 31898
 HEAP32[$74 >> 2] = $4; //@line 31899
 sp = STACKTOP; //@line 31900
 return;
}
function __ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 var $$ = 0, $$sink = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $65 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 308
 STACKTOP = STACKTOP + 48 | 0; //@line 309
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 309
 $vararg_buffer9 = sp + 40 | 0; //@line 310
 $vararg_buffer7 = sp + 32 | 0; //@line 311
 $vararg_buffer5 = sp + 24 | 0; //@line 312
 $vararg_buffer3 = sp + 16 | 0; //@line 313
 $vararg_buffer1 = sp + 8 | 0; //@line 314
 $15 = $8 & 1; //@line 316
 $16 = $10 & 1; //@line 317
 $17 = $11 & 1; //@line 318
 $18 = $13 & 1; //@line 319
 $19 = $14 & 1; //@line 320
 $21 = $0 + 689 | 0; //@line 322
 HEAP8[$21 >> 0] = $1; //@line 323
 _printf(10880, sp) | 0; //@line 324
 HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$21 >> 0]; //@line 327
 _printf(11055, $vararg_buffer1) | 0; //@line 328
 $AsyncCtx17 = _emscripten_alloc_async_context(72, sp) | 0; //@line 329
 _putchar(10) | 0; //@line 330
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 57; //@line 333
  HEAP32[$AsyncCtx17 + 4 >> 2] = $1; //@line 335
  HEAP32[$AsyncCtx17 + 8 >> 2] = $0; //@line 337
  HEAP32[$AsyncCtx17 + 12 >> 2] = $2; //@line 339
  HEAP32[$AsyncCtx17 + 16 >> 2] = $3; //@line 341
  HEAP32[$AsyncCtx17 + 20 >> 2] = $5; //@line 343
  HEAP8[$AsyncCtx17 + 24 >> 0] = $15; //@line 345
  HEAP8[$AsyncCtx17 + 25 >> 0] = $9; //@line 347
  HEAP8[$AsyncCtx17 + 26 >> 0] = $16; //@line 349
  HEAP8[$AsyncCtx17 + 27 >> 0] = $18; //@line 351
  HEAP8[$AsyncCtx17 + 28 >> 0] = $19; //@line 353
  HEAP16[$AsyncCtx17 + 30 >> 1] = $6; //@line 355
  HEAP16[$AsyncCtx17 + 32 >> 1] = $7; //@line 357
  HEAP32[$AsyncCtx17 + 36 >> 2] = $vararg_buffer3; //@line 359
  HEAP32[$AsyncCtx17 + 40 >> 2] = $vararg_buffer3; //@line 361
  HEAP32[$AsyncCtx17 + 44 >> 2] = $vararg_buffer5; //@line 363
  HEAP32[$AsyncCtx17 + 48 >> 2] = $vararg_buffer5; //@line 365
  HEAP8[$AsyncCtx17 + 52 >> 0] = $4; //@line 367
  HEAP8[$AsyncCtx17 + 53 >> 0] = $17; //@line 369
  HEAP8[$AsyncCtx17 + 54 >> 0] = $12; //@line 371
  HEAP32[$AsyncCtx17 + 56 >> 2] = $vararg_buffer7; //@line 373
  HEAP32[$AsyncCtx17 + 60 >> 2] = $vararg_buffer7; //@line 375
  HEAP32[$AsyncCtx17 + 64 >> 2] = $vararg_buffer9; //@line 377
  HEAP32[$AsyncCtx17 + 68 >> 2] = $vararg_buffer9; //@line 379
  sp = STACKTOP; //@line 380
  STACKTOP = sp; //@line 381
  return;
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 383
 switch ($1 | 0) {
 case 0:
  {
   HEAP32[$0 + 704 >> 2] = $2; //@line 387
   HEAP32[$0 + 712 >> 2] = $3; //@line 389
   HEAP32[$0 + 708 >> 2] = $5; //@line 391
   HEAP8[$0 + 718 >> 0] = $15; //@line 393
   HEAP8[$0 + 719 >> 0] = $9; //@line 395
   HEAP8[$0 + 720 >> 0] = $16; //@line 397
   HEAP8[$0 + 721 >> 0] = $18; //@line 399
   HEAP8[$0 + 722 >> 0] = $19; //@line 401
   HEAP16[$0 + 716 >> 1] = $6; //@line 403
   HEAP32[$0 + 728 >> 2] = ~~(1.0 / +($3 >>> 0) * 8.0 * +($7 & 65535) * 1.0e3) >>> 0; //@line 412
   _printf(10880, $vararg_buffer3) | 0; //@line 413
   _printf(11513, $vararg_buffer5) | 0; //@line 414
   $AsyncCtx13 = _emscripten_alloc_async_context(4, sp) | 0; //@line 415
   _putchar(10) | 0; //@line 416
   if (___async) {
    HEAP32[$AsyncCtx13 >> 2] = 58; //@line 419
    sp = STACKTOP; //@line 420
    STACKTOP = sp; //@line 421
    return;
   }
   _emscripten_free_async_context($AsyncCtx13 | 0); //@line 423
   STACKTOP = sp; //@line 424
   return;
  }
 case 1:
  {
   if ($2 >>> 0 > 2) {
    while (1) {}
   }
   $65 = $2 + 7 | 0; //@line 433
   HEAP32[$0 + 752 >> 2] = $65; //@line 435
   HEAP32[$0 + 756 >> 2] = $3; //@line 437
   HEAP8[$0 + 761 >> 0] = $4; //@line 439
   HEAP16[$0 + 762 >> 1] = $6; //@line 441
   HEAP8[$0 + 764 >> 0] = $15; //@line 443
   HEAP8[$0 + 765 >> 0] = $9; //@line 445
   HEAP8[$0 + 766 >> 0] = $16; //@line 447
   HEAP8[$0 + 767 >> 0] = $17; //@line 449
   HEAP8[$0 + 768 >> 0] = $12; //@line 451
   HEAP8[$0 + 769 >> 0] = $18; //@line 453
   HEAP8[$0 + 770 >> 0] = $19; //@line 455
   $$ = $3 >>> 0 > 6 ? $3 : 6; //@line 457
   if (($2 | 0) == 0 & (($$ >>> 0 < 12 ? $$ : 12) + -11 | 0) >>> 0 < 2) {
    label = 11; //@line 465
   } else {
    if (($65 | 0) == 8 & $$ >>> 0 > 11) {
     label = 11; //@line 471
    } else {
     $$sink = 0; //@line 473
    }
   }
   if ((label | 0) == 11) {
    $$sink = 1; //@line 477
   }
   HEAP8[$0 + 760 >> 0] = $$sink; //@line 480
   _printf(10880, $vararg_buffer7) | 0; //@line 481
   _printf(11494, $vararg_buffer9) | 0; //@line 482
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 483
   _putchar(10) | 0; //@line 484
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 59; //@line 487
    sp = STACKTOP; //@line 488
    STACKTOP = sp; //@line 489
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 491
   STACKTOP = sp; //@line 492
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 496
   return;
  }
 }
}
function _mbedtls_aes_setkey_enc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0103117 = 0, $$0106 = 0, $$0112 = 0, $$1104111 = 0, $$1114 = 0, $$2105113 = 0, $$2116 = 0, $$3115 = 0, $$sink = 0, $107 = 0, $111 = 0, $115 = 0, $119 = 0, $127 = 0, $129 = 0, $158 = 0, $162 = 0, $166 = 0, $194 = 0, $198 = 0, $202 = 0, $3 = 0, $33 = 0, $35 = 0, $5 = 0, $6 = 0, $64 = 0, $68 = 0, $76 = 0, $78 = 0, $$0112$looptemp = 0, $$1114$looptemp = 0, $$2116$looptemp = 0;
 switch ($2 | 0) {
 case 128:
  {
   $$sink = 10; //@line 19
   break;
  }
 case 192:
  {
   $$sink = 12; //@line 23
   break;
  }
 case 256:
  {
   $$sink = 14; //@line 27
   break;
  }
 default:
  {
   $$0106 = -32; //@line 31
   return $$0106 | 0; //@line 32
  }
 }
 HEAP32[$0 >> 2] = $$sink; //@line 35
 $3 = $0 + 8 | 0; //@line 36
 HEAP32[$0 + 4 >> 2] = $3; //@line 38
 $5 = $2 >>> 5; //@line 39
 $$0103117 = 0; //@line 40
 do {
  $6 = $$0103117 << 2; //@line 42
  HEAP32[$0 + 8 + ($$0103117 << 2) >> 2] = (HEAPU8[$1 + ($6 | 1) >> 0] | 0) << 8 | (HEAPU8[$1 + $6 >> 0] | 0) | (HEAPU8[$1 + ($6 | 2) >> 0] | 0) << 16 | (HEAPU8[$1 + ($6 | 3) >> 0] | 0) << 24; //@line 65
  $$0103117 = $$0103117 + 1 | 0; //@line 66
 } while (($$0103117 | 0) != ($5 | 0));
 switch (HEAP32[$0 >> 2] | 0) {
 case 10:
  {
   $$0112 = $3; //@line 78
   $$1104111 = 0; //@line 78
   $33 = HEAP32[$3 >> 2] | 0; //@line 78
   do {
    $35 = HEAP32[$$0112 + 12 >> 2] | 0; //@line 84
    $33 = HEAP32[1260 + ($$1104111 << 2) >> 2] ^ $33 ^ (HEAPU8[13833 + ($35 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[13833 + ($35 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13833 + ($35 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[13833 + ($35 & 255) >> 0] | 0) << 24; //@line 109
    $$0112$looptemp = $$0112;
    $$0112 = $$0112 + 16 | 0; //@line 110
    HEAP32[$$0112 >> 2] = $33; //@line 111
    $64 = $33 ^ HEAP32[$$0112$looptemp + 4 >> 2]; //@line 114
    HEAP32[$$0112$looptemp + 20 >> 2] = $64; //@line 116
    $68 = HEAP32[$$0112$looptemp + 8 >> 2] ^ $64; //@line 119
    HEAP32[$$0112$looptemp + 24 >> 2] = $68; //@line 121
    HEAP32[$$0112$looptemp + 28 >> 2] = $35 ^ $68; //@line 124
    $$1104111 = $$1104111 + 1 | 0; //@line 125
   } while (($$1104111 | 0) != 10);
   $$0106 = 0; //@line 128
   return $$0106 | 0; //@line 134
  }
 case 12:
  {
   $$1114 = $3; //@line 139
   $$2105113 = 0; //@line 139
   $76 = HEAP32[$3 >> 2] | 0; //@line 139
   do {
    $78 = HEAP32[$$1114 + 20 >> 2] | 0; //@line 145
    $76 = HEAP32[1260 + ($$2105113 << 2) >> 2] ^ $76 ^ (HEAPU8[13833 + ($78 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[13833 + ($78 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13833 + ($78 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[13833 + ($78 & 255) >> 0] | 0) << 24; //@line 170
    $$1114$looptemp = $$1114;
    $$1114 = $$1114 + 24 | 0; //@line 171
    HEAP32[$$1114 >> 2] = $76; //@line 172
    $107 = $76 ^ HEAP32[$$1114$looptemp + 4 >> 2]; //@line 175
    HEAP32[$$1114$looptemp + 28 >> 2] = $107; //@line 177
    $111 = HEAP32[$$1114$looptemp + 8 >> 2] ^ $107; //@line 180
    HEAP32[$$1114$looptemp + 32 >> 2] = $111; //@line 182
    $115 = HEAP32[$$1114$looptemp + 12 >> 2] ^ $111; //@line 185
    HEAP32[$$1114$looptemp + 36 >> 2] = $115; //@line 187
    $119 = HEAP32[$$1114$looptemp + 16 >> 2] ^ $115; //@line 190
    HEAP32[$$1114$looptemp + 40 >> 2] = $119; //@line 192
    HEAP32[$$1114$looptemp + 44 >> 2] = $78 ^ $119; //@line 195
    $$2105113 = $$2105113 + 1 | 0; //@line 196
   } while (($$2105113 | 0) != 8);
   $$0106 = 0; //@line 199
   return $$0106 | 0; //@line 205
  }
 case 14:
  {
   $$2116 = $3; //@line 210
   $$3115 = 0; //@line 210
   $127 = HEAP32[$3 >> 2] | 0; //@line 210
   do {
    $129 = HEAP32[$$2116 + 28 >> 2] | 0; //@line 216
    $127 = HEAP32[1260 + ($$3115 << 2) >> 2] ^ $127 ^ (HEAPU8[13833 + ($129 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[13833 + ($129 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13833 + ($129 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[13833 + ($129 & 255) >> 0] | 0) << 24; //@line 241
    $$2116$looptemp = $$2116;
    $$2116 = $$2116 + 32 | 0; //@line 242
    HEAP32[$$2116 >> 2] = $127; //@line 243
    $158 = $127 ^ HEAP32[$$2116$looptemp + 4 >> 2]; //@line 246
    HEAP32[$$2116$looptemp + 36 >> 2] = $158; //@line 248
    $162 = HEAP32[$$2116$looptemp + 8 >> 2] ^ $158; //@line 251
    HEAP32[$$2116$looptemp + 40 >> 2] = $162; //@line 253
    $166 = HEAP32[$$2116$looptemp + 12 >> 2] ^ $162; //@line 256
    HEAP32[$$2116$looptemp + 44 >> 2] = $166; //@line 258
    $194 = HEAP32[$$2116$looptemp + 16 >> 2] ^ (HEAPU8[13833 + ($166 & 255) >> 0] | 0) ^ (HEAPU8[13833 + ($166 >>> 8 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13833 + ($166 >>> 16 & 255) >> 0] | 0) << 16 ^ (HEAPU8[13833 + ($166 >>> 24) >> 0] | 0) << 24; //@line 285
    HEAP32[$$2116$looptemp + 48 >> 2] = $194; //@line 287
    $198 = $194 ^ HEAP32[$$2116$looptemp + 20 >> 2]; //@line 290
    HEAP32[$$2116$looptemp + 52 >> 2] = $198; //@line 292
    $202 = HEAP32[$$2116$looptemp + 24 >> 2] ^ $198; //@line 295
    HEAP32[$$2116$looptemp + 56 >> 2] = $202; //@line 297
    HEAP32[$$2116$looptemp + 60 >> 2] = $129 ^ $202; //@line 300
    $$3115 = $$3115 + 1 | 0; //@line 301
   } while (($$3115 | 0) != 7);
   $$0106 = 0; //@line 304
   return $$0106 | 0; //@line 310
  }
 default:
  {
   $$0106 = 0; //@line 314
   return $$0106 | 0; //@line 315
  }
 }
 return 0; //@line 318
}
function __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$i15 = 0, $$1 = 0, $10 = 0, $16 = 0, $18 = 0, $22 = 0, $26 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $48 = 0, $51 = 0, $58 = 0, $60 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18162
 STACKTOP = STACKTOP + 16 | 0; //@line 18163
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 18163
 $vararg_buffer1 = sp + 8 | 0; //@line 18164
 $vararg_buffer = sp; //@line 18165
 _printf(12943, $vararg_buffer) | 0; //@line 18166
 _printf(13487, $vararg_buffer1) | 0; //@line 18167
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 18168
 _putchar(10) | 0; //@line 18169
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 543; //@line 18172
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 18174
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 18176
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 18178
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer; //@line 18180
  sp = STACKTOP; //@line 18181
  STACKTOP = sp; //@line 18182
  return 0; //@line 18182
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 18184
 if (HEAP32[$0 + 968 >> 2] | 0) {
  $$1 = -1e3; //@line 18189
  STACKTOP = sp; //@line 18190
  return $$1 | 0; //@line 18190
 }
 $10 = HEAP8[$1 + 5 >> 0] | 0; //@line 18193
 if ($10 << 24 >> 24 > (__ZN7LoRaPHY23get_minimum_tx_datarateEv(HEAP32[$0 >> 2] | 0) | 0) << 24 >> 24) {
  $26 = $10; //@line 18198
 } else {
  $26 = __ZN7LoRaPHY23get_minimum_tx_datarateEv(HEAP32[$0 >> 2] | 0) | 0; //@line 18202
 }
 HEAP8[$vararg_buffer >> 0] = 0; //@line 18204
 $16 = $0 + 288 | 0; //@line 18205
 __ZN11LoRaMacMcps18reset_confirmationEv($16); //@line 18206
 HEAP8[$0 + 895 >> 0] = 1; //@line 18208
 $18 = $0 + 894 | 0; //@line 18209
 HEAP8[$18 >> 0] = 1; //@line 18210
 switch (HEAP32[$1 >> 2] | 0) {
 case 0:
  {
   HEAP8[$vararg_buffer >> 0] = 64; //@line 18214
   label = 10; //@line 18215
   break;
  }
 case 1:
  {
   HEAP8[$vararg_buffer >> 0] = -128; //@line 18219
   HEAP8[$18 >> 0] = HEAP8[$1 + 6 >> 0] | 0; //@line 18222
   label = 10; //@line 18223
   break;
  }
 case 3:
  {
   HEAP8[$vararg_buffer >> 0] = -32; //@line 18227
   label = 10; //@line 18228
   break;
  }
 default:
  {
   $$0 = -1003; //@line 18232
  }
 }
 do {
  if ((label | 0) == 10) {
   $22 = $0 + 1156 | 0; //@line 18237
   if (!(HEAP8[$22 >> 0] | 0)) {
    if (!(__ZN7LoRaPHY18verify_tx_datarateEhb(HEAP32[$0 >> 2] | 0, $26, 0) | 0)) {
     $$0 = -1003; //@line 18244
     break;
    }
    HEAP8[$0 + 1097 >> 0] = $26; //@line 18248
    $35 = HEAP8[$22 >> 0] << 7 & 255; //@line 18251
   } else {
    $35 = -128; //@line 18253
   }
   $30 = HEAP8[$1 + 4 >> 0] | 0; //@line 18256
   $32 = HEAP32[$1 + 8 >> 2] | 0; //@line 18258
   $34 = HEAP16[$1 + 12 >> 1] | 0; //@line 18260
   HEAP8[$vararg_buffer1 >> 0] = $35; //@line 18261
   $AsyncCtx5 = _emscripten_alloc_async_context(24, sp) | 0; //@line 18262
   $36 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($0, $vararg_buffer, $vararg_buffer1, $30, $32, $34) | 0; //@line 18263
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 544; //@line 18266
    HEAP32[$AsyncCtx5 + 4 >> 2] = $16; //@line 18268
    HEAP32[$AsyncCtx5 + 8 >> 2] = $0; //@line 18270
    HEAP32[$AsyncCtx5 + 12 >> 2] = $vararg_buffer1; //@line 18272
    HEAP32[$AsyncCtx5 + 16 >> 2] = $vararg_buffer; //@line 18274
    HEAP32[$AsyncCtx5 + 20 >> 2] = $1; //@line 18276
    sp = STACKTOP; //@line 18277
    STACKTOP = sp; //@line 18278
    return 0; //@line 18278
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 18280
   if (!$36) {
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($16) | 0) + 11 >> 0] = 0; //@line 18285
    HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($16) | 0) + 10 >> 0] = 0; //@line 18288
    $48 = HEAP32[$0 + 956 >> 2] | 0; //@line 18290
    HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($16) | 0) + 16 >> 2] = $48; //@line 18293
    $AsyncCtx8 = _emscripten_alloc_async_context(24, sp) | 0; //@line 18294
    $51 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 18295
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 545; //@line 18298
     HEAP32[$AsyncCtx8 + 4 >> 2] = $vararg_buffer1; //@line 18300
     HEAP32[$AsyncCtx8 + 8 >> 2] = $1; //@line 18302
     HEAP32[$AsyncCtx8 + 12 >> 2] = $16; //@line 18304
     HEAP32[$AsyncCtx8 + 16 >> 2] = $0; //@line 18306
     HEAP32[$AsyncCtx8 + 20 >> 2] = $vararg_buffer; //@line 18308
     sp = STACKTOP; //@line 18309
     STACKTOP = sp; //@line 18310
     return 0; //@line 18310
    }
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 18312
    if (!$51) {
     $58 = HEAP32[$1 >> 2] | 0; //@line 18315
     HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($16) | 0) >> 2] = $58; //@line 18317
     $60 = $0 + 944 | 0; //@line 18318
     HEAP8[$60 >> 0] = HEAP8[$60 >> 0] | 1; //@line 18321
     $$0 = 0; //@line 18322
     break;
    } else {
     $$0$i15 = $51; //@line 18325
    }
   } else {
    $$0$i15 = $36; //@line 18328
   }
   HEAP8[$0 + 373 >> 0] = 0; //@line 18331
   $$0 = $$0$i15; //@line 18332
  }
 } while (0);
 $$1 = $$0; //@line 18335
 STACKTOP = sp; //@line 18336
 return $$1 | 0; //@line 18336
}
function __ZN12LoRaPHYEU868C2ER18LoRaWANTimeHandler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $28 = 0, $3 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 __ZN7LoRaPHYC2ER18LoRaWANTimeHandler($0, $1); //@line 26004
 HEAP32[$0 >> 2] = 968; //@line 26005
 $2 = $0 + 328 | 0; //@line 26006
 HEAP32[$2 >> 2] = HEAP32[262]; //@line 26007
 HEAP32[$2 + 4 >> 2] = HEAP32[263]; //@line 26007
 HEAP32[$2 + 8 >> 2] = HEAP32[264]; //@line 26007
 HEAP32[$2 + 12 >> 2] = HEAP32[265]; //@line 26007
 HEAP32[$2 + 16 >> 2] = HEAP32[266]; //@line 26007
 HEAP32[$2 + 20 >> 2] = HEAP32[267]; //@line 26007
 $3 = $0 + 352 | 0; //@line 26008
 HEAP32[$3 >> 2] = HEAP32[268]; //@line 26009
 HEAP32[$3 + 4 >> 2] = HEAP32[269]; //@line 26009
 HEAP32[$3 + 8 >> 2] = HEAP32[270]; //@line 26009
 HEAP32[$3 + 12 >> 2] = HEAP32[271]; //@line 26009
 HEAP32[$3 + 16 >> 2] = HEAP32[272]; //@line 26009
 HEAP32[$3 + 20 >> 2] = HEAP32[273]; //@line 26009
 $4 = $0 + 376 | 0; //@line 26010
 HEAP32[$4 >> 2] = HEAP32[274]; //@line 26011
 HEAP32[$4 + 4 >> 2] = HEAP32[275]; //@line 26011
 HEAP32[$4 + 8 >> 2] = HEAP32[276]; //@line 26011
 HEAP32[$4 + 12 >> 2] = HEAP32[277]; //@line 26011
 HEAP32[$4 + 16 >> 2] = HEAP32[278]; //@line 26011
 HEAP32[$4 + 20 >> 2] = HEAP32[279]; //@line 26011
 $5 = $0 + 400 | 0; //@line 26012
 HEAP32[$5 >> 2] = HEAP32[280]; //@line 26013
 HEAP32[$5 + 4 >> 2] = HEAP32[281]; //@line 26013
 HEAP32[$5 + 8 >> 2] = HEAP32[282]; //@line 26013
 HEAP32[$5 + 12 >> 2] = HEAP32[283]; //@line 26013
 HEAP32[$5 + 16 >> 2] = HEAP32[284]; //@line 26013
 HEAP32[$5 + 20 >> 2] = HEAP32[285]; //@line 26013
 $6 = $0 + 424 | 0; //@line 26014
 HEAP32[$6 >> 2] = HEAP32[286]; //@line 26015
 HEAP32[$6 + 4 >> 2] = HEAP32[287]; //@line 26015
 HEAP32[$6 + 8 >> 2] = HEAP32[288]; //@line 26015
 HEAP32[$6 + 12 >> 2] = HEAP32[289]; //@line 26015
 HEAP32[$6 + 16 >> 2] = HEAP32[290]; //@line 26015
 HEAP32[$6 + 20 >> 2] = HEAP32[291]; //@line 26015
 $7 = $0 + 448 | 0; //@line 26016
 HEAP32[$7 >> 2] = HEAP32[292]; //@line 26017
 HEAP32[$7 + 4 >> 2] = HEAP32[293]; //@line 26017
 HEAP32[$7 + 8 >> 2] = HEAP32[294]; //@line 26017
 HEAP32[$7 + 12 >> 2] = HEAP32[295]; //@line 26017
 HEAP32[$7 + 16 >> 2] = HEAP32[296]; //@line 26017
 HEAP32[$7 + 20 >> 2] = HEAP32[297]; //@line 26017
 $8 = $0 + 136 | 0; //@line 26018
 HEAP32[$8 >> 2] = HEAP32[298]; //@line 26019
 HEAP32[$8 + 4 >> 2] = HEAP32[299]; //@line 26019
 HEAP32[$8 + 8 >> 2] = HEAP32[300]; //@line 26019
 $9 = $0 + 148 | 0; //@line 26020
 HEAP32[$9 >> 2] = HEAP32[301]; //@line 26021
 HEAP32[$9 + 4 >> 2] = HEAP32[302]; //@line 26021
 HEAP32[$9 + 8 >> 2] = HEAP32[303]; //@line 26021
 $10 = $0 + 160 | 0; //@line 26022
 HEAP32[$10 >> 2] = HEAP32[304]; //@line 26023
 HEAP32[$10 + 4 >> 2] = HEAP32[305]; //@line 26023
 HEAP32[$10 + 8 >> 2] = HEAP32[306]; //@line 26023
 $11 = $0 + 474 | 0; //@line 26024
 HEAP16[$11 >> 1] = 7; //@line 26025
 $12 = $0 + 472 | 0; //@line 26026
 __ZN7LoRaPHY17copy_channel_maskEPtS0_h($0, $12, $11, 1); //@line 26027
 HEAP32[$0 + 112 >> 2] = $8; //@line 26029
 HEAP8[$0 + 116 >> 0] = 16; //@line 26031
 HEAP32[$0 + 120 >> 2] = $12; //@line 26033
 HEAP32[$0 + 124 >> 2] = $11; //@line 26035
 HEAP8[$0 + 128 >> 0] = 1; //@line 26037
 HEAP32[$0 + 72 >> 2] = $2; //@line 26039
 HEAP8[$0 + 76 >> 0] = 6; //@line 26041
 HEAP32[$0 + 80 >> 2] = 1228; //@line 26043
 HEAP8[$0 + 84 >> 0] = 8; //@line 26045
 HEAP32[$0 + 88 >> 2] = 13686; //@line 26047
 HEAP8[$0 + 92 >> 0] = 8; //@line 26049
 HEAP32[$0 + 96 >> 2] = 13694; //@line 26051
 HEAP8[$0 + 100 >> 0] = 8; //@line 26053
 HEAP32[$0 + 104 >> 2] = 13702; //@line 26055
 HEAP8[$0 + 108 >> 0] = 8; //@line 26057
 $28 = $0 + 132 | 0; //@line 26058
 HEAP8[$28 >> 0] = HEAP8[$28 >> 0] & -4; //@line 26061
 $31 = $0 + 12 | 0; //@line 26062
 $32 = $0 + 18 | 0; //@line 26063
 HEAP32[$31 >> 2] = 16843009; //@line 26064
 HEAP16[$31 + 4 >> 1] = 257; //@line 26064
 HEAP8[$32 >> 0] = 3; //@line 26065
 HEAP8[$0 + 20 >> 0] = 16; //@line 26067
 HEAP8[$0 + 19 >> 0] = 5; //@line 26069
 HEAP8[$0 + 26 >> 0] = 0; //@line 26071
 HEAP8[$0 + 27 >> 0] = 7; //@line 26073
 HEAP8[$0 + 28 >> 0] = 0; //@line 26075
 HEAP8[$0 + 29 >> 0] = 7; //@line 26077
 HEAP8[$0 + 30 >> 0] = 0; //@line 26079
 HEAP8[$0 + 31 >> 0] = 5; //@line 26081
 HEAP8[$0 + 32 >> 0] = 0; //@line 26083
 HEAP8[$0 + 33 >> 0] = 5; //@line 26085
 HEAP8[$0 + 34 >> 0] = 0; //@line 26087
 HEAP8[$0 + 21 >> 0] = 7; //@line 26089
 HEAP8[$0 + 22 >> 0] = 0; //@line 26091
 HEAP8[$0 + 23 >> 0] = 0; //@line 26093
 HEAPF32[$0 + 56 >> 2] = 16.0; //@line 26095
 HEAPF32[$0 + 60 >> 2] = 2.1500000953674316; //@line 26097
 HEAP8[$0 + 24 >> 0] = 64; //@line 26099
 HEAP8[$0 + 25 >> 0] = 32; //@line 26101
 HEAP16[$0 + 36 >> 1] = 3e3; //@line 26103
 HEAP16[$0 + 38 >> 1] = 1e3; //@line 26105
 HEAP16[$0 + 40 >> 1] = 2e3; //@line 26107
 HEAP16[$0 + 46 >> 1] = 7; //@line 26109
 HEAP16[$0 + 42 >> 1] = 5e3; //@line 26111
 HEAP16[$0 + 44 >> 1] = 6e3; //@line 26113
 HEAP16[$0 + 48 >> 1] = 16384; //@line 26115
 HEAP16[$0 + 50 >> 1] = 2e3; //@line 26117
 HEAP16[$0 + 52 >> 1] = 1e3; //@line 26119
 HEAP8[$0 + 64 >> 0] = 0; //@line 26121
 HEAP32[$0 + 68 >> 2] = 869525e3; //@line 26123
 return;
}
function _ticker_read_us($0) {
 $0 = $0 | 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $35 = 0, $36 = 0, $37 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $88 = 0, $89 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5920
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5921
 _initialize($0); //@line 5922
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 698; //@line 5925
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 5927
  sp = STACKTOP; //@line 5928
  tempRet0 = 0; //@line 5929
  return 0; //@line 5930
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5932
 $2 = $0 + 4 | 0; //@line 5933
 $3 = HEAP32[$2 >> 2] | 0; //@line 5934
 $6 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5937
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 5938
 $7 = FUNCTION_TABLE_i[$6 & 7]() | 0; //@line 5939
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 699; //@line 5942
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 5944
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 5946
  sp = STACKTOP; //@line 5947
  tempRet0 = 0; //@line 5948
  return 0; //@line 5949
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5951
 if (($7 | 0) == (HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0)) {
  $103 = HEAP32[$2 >> 2] | 0; //@line 5957
  $104 = $103 + 48 | 0; //@line 5958
  $105 = $104; //@line 5959
  $106 = $105; //@line 5960
  $107 = HEAP32[$106 >> 2] | 0; //@line 5961
  $108 = $105 + 4 | 0; //@line 5962
  $109 = $108; //@line 5963
  $110 = HEAP32[$109 >> 2] | 0; //@line 5964
  tempRet0 = $110; //@line 5965
  return $107 | 0; //@line 5966
 }
 $14 = $3 + 32 | 0; //@line 5968
 $19 = $7 - (HEAP32[$14 >> 2] | 0) & HEAP32[$3 + 12 >> 2]; //@line 5973
 HEAP32[$14 >> 2] = $7; //@line 5974
 $21 = HEAP32[$3 + 8 >> 2] | 0; //@line 5976
 L10 : do {
  if (($21 | 0) < 1e6) {
   switch ($21 | 0) {
   case 32768:
    {
     break;
    }
   default:
    {
     label = 9; //@line 5985
     break L10;
    }
   }
   $22 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 5989
   $24 = _bitshift64Lshr($22 | 0, tempRet0 | 0, 15) | 0; //@line 5991
   $25 = tempRet0; //@line 5992
   $28 = $3 + 40 | 0; //@line 5995
   $29 = $28; //@line 5996
   $35 = _i64Add(HEAP32[$29 >> 2] | 0, HEAP32[$29 + 4 >> 2] | 0, $19 * 1e6 & 32704 | 0, 0) | 0; //@line 6002
   $36 = tempRet0; //@line 6003
   $37 = $28; //@line 6004
   HEAP32[$37 >> 2] = $35; //@line 6006
   HEAP32[$37 + 4 >> 2] = $36; //@line 6009
   if ($36 >>> 0 < 0 | ($36 | 0) == 0 & $35 >>> 0 < 32768) {
    $95 = $24; //@line 6016
    $96 = $25; //@line 6016
   } else {
    $46 = _i64Add($24 | 0, $25 | 0, 1, 0) | 0; //@line 6018
    $47 = tempRet0; //@line 6019
    $48 = _i64Add($35 | 0, $36 | 0, -32768, -1) | 0; //@line 6020
    $50 = $28; //@line 6022
    HEAP32[$50 >> 2] = $48; //@line 6024
    HEAP32[$50 + 4 >> 2] = tempRet0; //@line 6027
    $95 = $46; //@line 6028
    $96 = $47; //@line 6028
   }
  } else {
   switch ($21 | 0) {
   case 1e6:
    {
     $95 = $19; //@line 6033
     $96 = 0; //@line 6033
     break;
    }
   default:
    {
     label = 9; //@line 6037
    }
   }
  }
 } while (0);
 if ((label | 0) == 9) {
  $54 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 6043
  $55 = tempRet0; //@line 6044
  $56 = ___udivdi3($54 | 0, $55 | 0, $21 | 0, 0) | 0; //@line 6045
  $57 = tempRet0; //@line 6046
  $58 = ___muldi3($56 | 0, $57 | 0, $21 | 0, 0) | 0; //@line 6047
  $60 = _i64Subtract($54 | 0, $55 | 0, $58 | 0, tempRet0 | 0) | 0; //@line 6049
  $62 = $3 + 40 | 0; //@line 6051
  $63 = $62; //@line 6052
  $69 = _i64Add($60 | 0, tempRet0 | 0, HEAP32[$63 >> 2] | 0, HEAP32[$63 + 4 >> 2] | 0) | 0; //@line 6058
  $70 = tempRet0; //@line 6059
  $71 = $62; //@line 6060
  HEAP32[$71 >> 2] = $69; //@line 6062
  HEAP32[$71 + 4 >> 2] = $70; //@line 6065
  if ($70 >>> 0 < 0 | ($70 | 0) == 0 & $69 >>> 0 < $21 >>> 0) {
   $95 = $56; //@line 6072
   $96 = $57; //@line 6072
  } else {
   $80 = _i64Add($56 | 0, $57 | 0, 1, 0) | 0; //@line 6074
   $81 = tempRet0; //@line 6075
   $82 = _i64Subtract($69 | 0, $70 | 0, $21 | 0, 0) | 0; //@line 6076
   $84 = $62; //@line 6078
   HEAP32[$84 >> 2] = $82; //@line 6080
   HEAP32[$84 + 4 >> 2] = tempRet0; //@line 6083
   $95 = $80; //@line 6084
   $96 = $81; //@line 6084
  }
 }
 $88 = $3 + 48 | 0; //@line 6087
 $89 = $88; //@line 6088
 $97 = _i64Add(HEAP32[$89 >> 2] | 0, HEAP32[$89 + 4 >> 2] | 0, $95 | 0, $96 | 0) | 0; //@line 6094
 $99 = $88; //@line 6096
 HEAP32[$99 >> 2] = $97; //@line 6098
 HEAP32[$99 + 4 >> 2] = tempRet0; //@line 6101
 $103 = HEAP32[$2 >> 2] | 0; //@line 6102
 $104 = $103 + 48 | 0; //@line 6103
 $105 = $104; //@line 6104
 $106 = $105; //@line 6105
 $107 = HEAP32[$106 >> 2] | 0; //@line 6106
 $108 = $105 + 4 | 0; //@line 6107
 $109 = $108; //@line 6108
 $110 = HEAP32[$109 >> 2] | 0; //@line 6109
 tempRet0 = $110; //@line 6110
 return $107 | 0; //@line 6111
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $32 = 0, $33 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx9 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 18374
 STACKTOP = STACKTOP + 32 | 0; //@line 18375
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 18375
 $$byval_copy = sp + 24 | 0; //@line 18376
 $vararg_buffer3 = sp + 16 | 0; //@line 18377
 $vararg_buffer1 = sp + 8 | 0; //@line 18378
 _printf(12943, sp) | 0; //@line 18380
 _printf(13524, $vararg_buffer1) | 0; //@line 18381
 $AsyncCtx9 = _emscripten_alloc_async_context(32, sp) | 0; //@line 18382
 _putchar(10) | 0; //@line 18383
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 547; //@line 18386
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 18388
  HEAP32[$AsyncCtx9 + 8 >> 2] = $1; //@line 18390
  HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer1; //@line 18392
  HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer3; //@line 18394
  HEAP32[$AsyncCtx9 + 20 >> 2] = $vararg_buffer3; //@line 18396
  HEAP32[$AsyncCtx9 + 24 >> 2] = $$byval_copy; //@line 18398
  HEAP32[$AsyncCtx9 + 28 >> 2] = $$byval_copy; //@line 18400
  sp = STACKTOP; //@line 18401
  STACKTOP = sp; //@line 18402
  return 0; //@line 18402
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 18404
 $10 = $0 + 360 | 0; //@line 18406
 $AsyncCtx12 = _emscripten_alloc_async_context(36, sp) | 0; //@line 18407
 $11 = __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0 + 348 | 0, $1, $10) | 0; //@line 18408
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 548; //@line 18411
  HEAP32[$AsyncCtx12 + 4 >> 2] = $10; //@line 18413
  HEAP32[$AsyncCtx12 + 8 >> 2] = $1; //@line 18415
  HEAP32[$AsyncCtx12 + 12 >> 2] = $vararg_buffer1; //@line 18417
  HEAP32[$AsyncCtx12 + 16 >> 2] = $vararg_buffer3; //@line 18419
  HEAP32[$AsyncCtx12 + 20 >> 2] = $vararg_buffer3; //@line 18421
  HEAP32[$AsyncCtx12 + 24 >> 2] = $$byval_copy; //@line 18423
  HEAP32[$AsyncCtx12 + 28 >> 2] = $$byval_copy; //@line 18425
  HEAP32[$AsyncCtx12 + 32 >> 2] = $0; //@line 18427
  sp = STACKTOP; //@line 18428
  STACKTOP = sp; //@line 18429
  return 0; //@line 18429
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 18431
 if ($11 | 0) {
  STACKTOP = sp; //@line 18434
  return $11 | 0; //@line 18434
 }
 if ((HEAP32[$10 >> 2] | 0) != 2) {
  STACKTOP = sp; //@line 18439
  return $11 | 0; //@line 18439
 }
 switch (HEAP32[$1 >> 2] | 0) {
 case 0:
  {
   break;
  }
 case 10:
  {
   label = 8; //@line 18447
   break;
  }
 default:
  {
   STACKTOP = sp; //@line 18451
   return $11 | 0; //@line 18451
  }
 }
 if ((label | 0) == 8) {
  if (!(HEAP8[$0 + 372 >> 0] | 0)) {
   STACKTOP = sp; //@line 18459
   return $11 | 0; //@line 18459
  }
 }
 _printf(12943, $vararg_buffer3) | 0; //@line 18462
 _printf(12970, $$byval_copy) | 0; //@line 18463
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 18464
 _putchar(10) | 0; //@line 18465
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 549; //@line 18468
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 18470
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer1; //@line 18472
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 18474
  HEAP32[$AsyncCtx + 16 >> 2] = $11; //@line 18476
  sp = STACKTOP; //@line 18477
  STACKTOP = sp; //@line 18478
  return 0; //@line 18478
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 18480
 $32 = HEAP32[$0 + 1328 >> 2] | 0; //@line 18482
 HEAP32[$vararg_buffer1 >> 2] = 347; //@line 18483
 HEAP32[$vararg_buffer1 + 4 >> 2] = 0; //@line 18485
 $AsyncCtx15 = _emscripten_alloc_async_context(16, sp) | 0; //@line 18486
 HEAP32[$$byval_copy >> 2] = HEAP32[$vararg_buffer1 >> 2]; //@line 18487
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$vararg_buffer1 + 4 >> 2]; //@line 18487
 $33 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($32, $0, $$byval_copy) | 0; //@line 18488
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 550; //@line 18491
  HEAP32[$AsyncCtx15 + 4 >> 2] = $vararg_buffer1; //@line 18493
  HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 18495
  HEAP32[$AsyncCtx15 + 12 >> 2] = $11; //@line 18497
  sp = STACKTOP; //@line 18498
  STACKTOP = sp; //@line 18499
  return 0; //@line 18499
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 18501
 do {
  if (!$33) {
   $AsyncCtx19 = _emscripten_alloc_async_context(16, sp) | 0; //@line 18505
   _mbed_assert_internal(12827, 12836, 217); //@line 18506
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 551; //@line 18509
    HEAP32[$AsyncCtx19 + 4 >> 2] = $vararg_buffer1; //@line 18511
    HEAP32[$AsyncCtx19 + 8 >> 2] = $0; //@line 18513
    HEAP32[$AsyncCtx19 + 12 >> 2] = $11; //@line 18515
    sp = STACKTOP; //@line 18516
    STACKTOP = sp; //@line 18517
    return 0; //@line 18517
   } else {
    _emscripten_free_async_context($AsyncCtx19 | 0); //@line 18519
    break;
   }
  }
 } while (0);
 HEAP32[$0 + 364 >> 2] = 2; //@line 18525
 STACKTOP = sp; //@line 18526
 return $11 | 0; //@line 18526
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_185($0) {
 $0 = $0 | 0;
 var $13 = 0, $14 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $31 = 0, $32 = 0, $4 = 0, $47 = 0, $48 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $65 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 32380
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32382
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32384
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32386
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32388
 if (HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0) {
  $13 = $4 + 1892 | 0; //@line 32394
  $14 = HEAP32[$13 >> 2] | 0; //@line 32395
  if (!$14) {
   return;
  }
  $18 = HEAP32[$4 + 2288 >> 2] | 0; //@line 32402
  $20 = HEAP32[$14 + 4 >> 2] | 0; //@line 32404
  $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 32405
  FUNCTION_TABLE_vii[$20 & 31]($6, $4 + 1880 | 0); //@line 32406
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 199; //@line 32409
   $21 = $ReallocAsyncCtx + 4 | 0; //@line 32410
   HEAP32[$21 >> 2] = $13; //@line 32411
   $22 = $ReallocAsyncCtx + 8 | 0; //@line 32412
   HEAP32[$22 >> 2] = $6; //@line 32413
   $23 = $ReallocAsyncCtx + 12 | 0; //@line 32414
   HEAP32[$23 >> 2] = $18; //@line 32415
   $24 = $ReallocAsyncCtx + 16 | 0; //@line 32416
   HEAP32[$24 >> 2] = $6; //@line 32417
   sp = STACKTOP; //@line 32418
   return;
  }
  ___async_unwind = 0; //@line 32421
  HEAP32[$ReallocAsyncCtx >> 2] = 199; //@line 32422
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 32423
  HEAP32[$21 >> 2] = $13; //@line 32424
  $22 = $ReallocAsyncCtx + 8 | 0; //@line 32425
  HEAP32[$22 >> 2] = $6; //@line 32426
  $23 = $ReallocAsyncCtx + 12 | 0; //@line 32427
  HEAP32[$23 >> 2] = $18; //@line 32428
  $24 = $ReallocAsyncCtx + 16 | 0; //@line 32429
  HEAP32[$24 >> 2] = $6; //@line 32430
  sp = STACKTOP; //@line 32431
  return;
 }
 $25 = $4 + 1960 | 0; //@line 32434
 HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) + 1; //@line 32437
 if (!(HEAP8[$8 + 18 >> 0] | 0)) {
  return;
 }
 $31 = $8 + 9 | 0; //@line 32444
 $32 = HEAP8[$31 >> 0] | 0; //@line 32445
 if ($32 << 24 >> 24 == -32) {
  return;
 }
 if (($32 + -1 & 255) >= 223) {
  if ((HEAP32[$8 >> 2] | 0) != 3) {
   return;
  }
 }
 HEAP32[$4 + 2240 >> 2] = 2; //@line 32460
 HEAP16[$4 + 2260 >> 1] = HEAP16[$8 + 16 >> 1] | 0; //@line 32464
 HEAP8[$4 + 2253 >> 0] = HEAP8[$31 >> 0] | 0; //@line 32467
 HEAP32[$4 + 2256 >> 2] = HEAP32[$8 + 12 >> 2]; //@line 32471
 HEAP8[$4 + 2236 >> 0] = 1; //@line 32473
 $47 = $4 + 1892 | 0; //@line 32474
 $48 = HEAP32[$47 >> 2] | 0; //@line 32475
 if ($48 | 0) {
  $52 = HEAP32[$4 + 2288 >> 2] | 0; //@line 32480
  $54 = HEAP32[$48 + 4 >> 2] | 0; //@line 32482
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 32483
  FUNCTION_TABLE_vii[$54 & 31]($2, $4 + 1880 | 0); //@line 32484
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 203; //@line 32487
   $55 = $ReallocAsyncCtx3 + 4 | 0; //@line 32488
   HEAP32[$55 >> 2] = $47; //@line 32489
   $56 = $ReallocAsyncCtx3 + 8 | 0; //@line 32490
   HEAP32[$56 >> 2] = $2; //@line 32491
   $57 = $ReallocAsyncCtx3 + 12 | 0; //@line 32492
   HEAP32[$57 >> 2] = $52; //@line 32493
   $58 = $ReallocAsyncCtx3 + 16 | 0; //@line 32494
   HEAP32[$58 >> 2] = $2; //@line 32495
   $59 = $ReallocAsyncCtx3 + 20 | 0; //@line 32496
   HEAP32[$59 >> 2] = $8; //@line 32497
   $60 = $ReallocAsyncCtx3 + 24 | 0; //@line 32498
   HEAP32[$60 >> 2] = $31; //@line 32499
   $61 = $ReallocAsyncCtx3 + 28 | 0; //@line 32500
   HEAP32[$61 >> 2] = $4; //@line 32501
   sp = STACKTOP; //@line 32502
   return;
  }
  ___async_unwind = 0; //@line 32505
  HEAP32[$ReallocAsyncCtx3 >> 2] = 203; //@line 32506
  $55 = $ReallocAsyncCtx3 + 4 | 0; //@line 32507
  HEAP32[$55 >> 2] = $47; //@line 32508
  $56 = $ReallocAsyncCtx3 + 8 | 0; //@line 32509
  HEAP32[$56 >> 2] = $2; //@line 32510
  $57 = $ReallocAsyncCtx3 + 12 | 0; //@line 32511
  HEAP32[$57 >> 2] = $52; //@line 32512
  $58 = $ReallocAsyncCtx3 + 16 | 0; //@line 32513
  HEAP32[$58 >> 2] = $2; //@line 32514
  $59 = $ReallocAsyncCtx3 + 20 | 0; //@line 32515
  HEAP32[$59 >> 2] = $8; //@line 32516
  $60 = $ReallocAsyncCtx3 + 24 | 0; //@line 32517
  HEAP32[$60 >> 2] = $31; //@line 32518
  $61 = $ReallocAsyncCtx3 + 28 | 0; //@line 32519
  HEAP32[$61 >> 2] = $4; //@line 32520
  sp = STACKTOP; //@line 32521
  return;
 }
 if (!(HEAP8[$8 + 11 >> 0] | 0)) {
  return;
 }
 $65 = HEAP8[$31 >> 0] | 0; //@line 32530
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 32531
 __ZN12LoRaWANStack9handle_txEhPKhth($4, $65, 0, 0, 2) | 0; //@line 32532
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 207; //@line 32535
  sp = STACKTOP; //@line 32536
  return;
 }
 ___async_unwind = 0; //@line 32539
 HEAP32[$ReallocAsyncCtx7 >> 2] = 207; //@line 32540
 sp = STACKTOP; //@line 32541
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_131($0) {
 $0 = $0 | 0;
 var $$3$off0204 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $26 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $50 = 0, $53 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, sp = 0;
 sp = STACKTOP; //@line 26483
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26487
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26489
 $8 = HEAP8[$0 + 16 >> 0] & 1; //@line 26492
 $10 = HEAP8[$0 + 17 >> 0] | 0; //@line 26494
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 26496
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 26498
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 26500
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 26502
 HEAP32[(__ZN11LoRaMacMlme14get_indicationEv(HEAP32[$0 + 4 >> 2] | 0) | 0) >> 2] = 4; //@line 26504
 $20 = $4 + 944 | 0; //@line 26505
 HEAP8[$20 >> 0] = HEAP8[$20 >> 0] | 16; //@line 26508
 __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($6); //@line 26509
 if ($8) {
  $$3$off0204 = 6; //@line 26511
 } else {
  $26 = (__ZN11LoRaMacMcps16get_confirmationEv($12) | 0) + 10 | 0; //@line 26516
  if ($10 & 32) {
   HEAP8[$26 >> 0] = 1; //@line 26518
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 28 >> 0] = 1; //@line 26521
   $29 = HEAP32[$14 >> 2] | 0; //@line 26522
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(20) | 0; //@line 26524
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($29, $4 + 1076 | 0); //@line 26525
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 391; //@line 26528
    $31 = $ReallocAsyncCtx23 + 4 | 0; //@line 26529
    HEAP32[$31 >> 2] = $4; //@line 26530
    $32 = $ReallocAsyncCtx23 + 8 | 0; //@line 26531
    HEAP32[$32 >> 2] = $14; //@line 26532
    $33 = $ReallocAsyncCtx23 + 12 | 0; //@line 26533
    HEAP32[$33 >> 2] = $16; //@line 26534
    $34 = $ReallocAsyncCtx23 + 16 | 0; //@line 26535
    HEAP32[$34 >> 2] = $18; //@line 26536
    sp = STACKTOP; //@line 26537
    return;
   }
   ___async_unwind = 0; //@line 26540
   HEAP32[$ReallocAsyncCtx23 >> 2] = 391; //@line 26541
   $31 = $ReallocAsyncCtx23 + 4 | 0; //@line 26542
   HEAP32[$31 >> 2] = $4; //@line 26543
   $32 = $ReallocAsyncCtx23 + 8 | 0; //@line 26544
   HEAP32[$32 >> 2] = $14; //@line 26545
   $33 = $ReallocAsyncCtx23 + 12 | 0; //@line 26546
   HEAP32[$33 >> 2] = $16; //@line 26547
   $34 = $ReallocAsyncCtx23 + 16 | 0; //@line 26548
   HEAP32[$34 >> 2] = $18; //@line 26549
   sp = STACKTOP; //@line 26550
   return;
  }
  HEAP8[$26 >> 0] = 0; //@line 26553
  if ((HEAPU8[$4 + 895 >> 0] | 0) > (HEAPU8[$4 + 894 >> 0] | 0)) {
   $40 = HEAP32[$14 >> 2] | 0; //@line 26560
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(20) | 0; //@line 26562
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($40, $4 + 1076 | 0); //@line 26563
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 392; //@line 26566
    $42 = $ReallocAsyncCtx22 + 4 | 0; //@line 26567
    HEAP32[$42 >> 2] = $4; //@line 26568
    $43 = $ReallocAsyncCtx22 + 8 | 0; //@line 26569
    HEAP32[$43 >> 2] = $14; //@line 26570
    $44 = $ReallocAsyncCtx22 + 12 | 0; //@line 26571
    HEAP32[$44 >> 2] = $16; //@line 26572
    $45 = $ReallocAsyncCtx22 + 16 | 0; //@line 26573
    HEAP32[$45 >> 2] = $18; //@line 26574
    sp = STACKTOP; //@line 26575
    return;
   }
   ___async_unwind = 0; //@line 26578
   HEAP32[$ReallocAsyncCtx22 >> 2] = 392; //@line 26579
   $42 = $ReallocAsyncCtx22 + 4 | 0; //@line 26580
   HEAP32[$42 >> 2] = $4; //@line 26581
   $43 = $ReallocAsyncCtx22 + 8 | 0; //@line 26582
   HEAP32[$43 >> 2] = $14; //@line 26583
   $44 = $ReallocAsyncCtx22 + 12 | 0; //@line 26584
   HEAP32[$44 >> 2] = $16; //@line 26585
   $45 = $ReallocAsyncCtx22 + 16 | 0; //@line 26586
   HEAP32[$45 >> 2] = $18; //@line 26587
   sp = STACKTOP; //@line 26588
   return;
  } else {
   $$3$off0204 = 2; //@line 26591
  }
 }
 $46 = $4 + 944 | 0; //@line 26594
 HEAP8[$46 >> 0] = $$3$off0204 | HEAP8[$46 >> 0] & -7; //@line 26598
 $50 = $4 + 944 | 0; //@line 26599
 HEAP8[$50 >> 0] = HEAP8[$50 >> 0] | 32; //@line 26602
 $53 = HEAP32[$14 >> 2] | 0; //@line 26603
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 26605
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($53, $4 + 996 | 0, 1); //@line 26606
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 395; //@line 26609
  $55 = $ReallocAsyncCtx17 + 4 | 0; //@line 26610
  HEAP32[$55 >> 2] = $16; //@line 26611
  $56 = $ReallocAsyncCtx17 + 8 | 0; //@line 26612
  HEAP32[$56 >> 2] = $18; //@line 26613
  sp = STACKTOP; //@line 26614
  return;
 }
 ___async_unwind = 0; //@line 26617
 HEAP32[$ReallocAsyncCtx17 >> 2] = 395; //@line 26618
 $55 = $ReallocAsyncCtx17 + 4 | 0; //@line 26619
 HEAP32[$55 >> 2] = $16; //@line 26620
 $56 = $ReallocAsyncCtx17 + 8 | 0; //@line 26621
 HEAP32[$56 >> 2] = $18; //@line 26622
 sp = STACKTOP; //@line 26623
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_129($0) {
 $0 = $0 | 0;
 var $$3$off0204 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $26 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $50 = 0, $53 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx17 = 0, $ReallocAsyncCtx22 = 0, $ReallocAsyncCtx23 = 0, sp = 0;
 sp = STACKTOP; //@line 26152
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26156
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26158
 $8 = HEAP8[$0 + 16 >> 0] & 1; //@line 26161
 $10 = HEAP8[$0 + 17 >> 0] | 0; //@line 26163
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 26165
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 26167
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 26169
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 26171
 HEAP32[(__ZN11LoRaMacMlme14get_indicationEv(HEAP32[$0 + 4 >> 2] | 0) | 0) >> 2] = 4; //@line 26173
 $20 = $4 + 944 | 0; //@line 26174
 HEAP8[$20 >> 0] = HEAP8[$20 >> 0] | 16; //@line 26177
 __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($6); //@line 26178
 if ($8) {
  $$3$off0204 = 6; //@line 26180
 } else {
  $26 = (__ZN11LoRaMacMcps16get_confirmationEv($12) | 0) + 10 | 0; //@line 26185
  if ($10 & 32) {
   HEAP8[$26 >> 0] = 1; //@line 26187
   HEAP8[(__ZN11LoRaMacMcps14get_indicationEv($12) | 0) + 28 >> 0] = 1; //@line 26190
   $29 = HEAP32[$14 >> 2] | 0; //@line 26191
   $ReallocAsyncCtx23 = _emscripten_realloc_async_context(20) | 0; //@line 26193
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($29, $4 + 1076 | 0); //@line 26194
   if (___async) {
    HEAP32[$ReallocAsyncCtx23 >> 2] = 391; //@line 26197
    $31 = $ReallocAsyncCtx23 + 4 | 0; //@line 26198
    HEAP32[$31 >> 2] = $4; //@line 26199
    $32 = $ReallocAsyncCtx23 + 8 | 0; //@line 26200
    HEAP32[$32 >> 2] = $14; //@line 26201
    $33 = $ReallocAsyncCtx23 + 12 | 0; //@line 26202
    HEAP32[$33 >> 2] = $16; //@line 26203
    $34 = $ReallocAsyncCtx23 + 16 | 0; //@line 26204
    HEAP32[$34 >> 2] = $18; //@line 26205
    sp = STACKTOP; //@line 26206
    return;
   }
   ___async_unwind = 0; //@line 26209
   HEAP32[$ReallocAsyncCtx23 >> 2] = 391; //@line 26210
   $31 = $ReallocAsyncCtx23 + 4 | 0; //@line 26211
   HEAP32[$31 >> 2] = $4; //@line 26212
   $32 = $ReallocAsyncCtx23 + 8 | 0; //@line 26213
   HEAP32[$32 >> 2] = $14; //@line 26214
   $33 = $ReallocAsyncCtx23 + 12 | 0; //@line 26215
   HEAP32[$33 >> 2] = $16; //@line 26216
   $34 = $ReallocAsyncCtx23 + 16 | 0; //@line 26217
   HEAP32[$34 >> 2] = $18; //@line 26218
   sp = STACKTOP; //@line 26219
   return;
  }
  HEAP8[$26 >> 0] = 0; //@line 26222
  if ((HEAPU8[$4 + 895 >> 0] | 0) > (HEAPU8[$4 + 894 >> 0] | 0)) {
   $40 = HEAP32[$14 >> 2] | 0; //@line 26229
   $ReallocAsyncCtx22 = _emscripten_realloc_async_context(20) | 0; //@line 26231
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($40, $4 + 1076 | 0); //@line 26232
   if (___async) {
    HEAP32[$ReallocAsyncCtx22 >> 2] = 392; //@line 26235
    $42 = $ReallocAsyncCtx22 + 4 | 0; //@line 26236
    HEAP32[$42 >> 2] = $4; //@line 26237
    $43 = $ReallocAsyncCtx22 + 8 | 0; //@line 26238
    HEAP32[$43 >> 2] = $14; //@line 26239
    $44 = $ReallocAsyncCtx22 + 12 | 0; //@line 26240
    HEAP32[$44 >> 2] = $16; //@line 26241
    $45 = $ReallocAsyncCtx22 + 16 | 0; //@line 26242
    HEAP32[$45 >> 2] = $18; //@line 26243
    sp = STACKTOP; //@line 26244
    return;
   }
   ___async_unwind = 0; //@line 26247
   HEAP32[$ReallocAsyncCtx22 >> 2] = 392; //@line 26248
   $42 = $ReallocAsyncCtx22 + 4 | 0; //@line 26249
   HEAP32[$42 >> 2] = $4; //@line 26250
   $43 = $ReallocAsyncCtx22 + 8 | 0; //@line 26251
   HEAP32[$43 >> 2] = $14; //@line 26252
   $44 = $ReallocAsyncCtx22 + 12 | 0; //@line 26253
   HEAP32[$44 >> 2] = $16; //@line 26254
   $45 = $ReallocAsyncCtx22 + 16 | 0; //@line 26255
   HEAP32[$45 >> 2] = $18; //@line 26256
   sp = STACKTOP; //@line 26257
   return;
  } else {
   $$3$off0204 = 2; //@line 26260
  }
 }
 $46 = $4 + 944 | 0; //@line 26263
 HEAP8[$46 >> 0] = $$3$off0204 | HEAP8[$46 >> 0] & -7; //@line 26267
 $50 = $4 + 944 | 0; //@line 26268
 HEAP8[$50 >> 0] = HEAP8[$50 >> 0] | 32; //@line 26271
 $53 = HEAP32[$14 >> 2] | 0; //@line 26272
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 26274
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($53, $4 + 996 | 0, 1); //@line 26275
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 395; //@line 26278
  $55 = $ReallocAsyncCtx17 + 4 | 0; //@line 26279
  HEAP32[$55 >> 2] = $16; //@line 26280
  $56 = $ReallocAsyncCtx17 + 8 | 0; //@line 26281
  HEAP32[$56 >> 2] = $18; //@line 26282
  sp = STACKTOP; //@line 26283
  return;
 }
 ___async_unwind = 0; //@line 26286
 HEAP32[$ReallocAsyncCtx17 >> 2] = 395; //@line 26287
 $55 = $ReallocAsyncCtx17 + 4 | 0; //@line 26288
 HEAP32[$55 >> 2] = $16; //@line 26289
 $56 = $ReallocAsyncCtx17 + 8 | 0; //@line 26290
 HEAP32[$56 >> 2] = $18; //@line 26291
 sp = STACKTOP; //@line 26292
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_56($0) {
 $0 = $0 | 0;
 var $$1 = 0, $10 = 0, $110 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $60 = 0, $62 = 0, $64 = 0, $66 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 21793
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21795
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21797
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21801
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21803
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21805
 $14 = HEAP16[$0 + 28 >> 1] | 0; //@line 21807
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21809
 $18 = HEAP8[$0 + 36 >> 0] | 0; //@line 21811
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21813
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21815
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21817
 $26 = HEAP8[$0 + 52 >> 0] | 0; //@line 21819
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 21821
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 21823
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 21825
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 21827
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 21829
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 21831
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 21833
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 21835
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 21837
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 21839
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 21841
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 21843
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 21845
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 21847
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 21849
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 21851
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 21853
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 21855
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 21857
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 21859
 if (!(HEAP8[HEAP32[$0 + 12 >> 2] >> 0] | 0)) {
  $$1 = -1017; //@line 21863
  $110 = ___async_retval; //@line 21864
  HEAP16[$110 >> 1] = $$1; //@line 21865
  return;
 }
 if (HEAP8[$36 >> 0] | 0) {
  $$1 = -1001; //@line 21871
  $110 = ___async_retval; //@line 21872
  HEAP16[$110 >> 1] = $$1; //@line 21873
  return;
 }
 $72 = $14 << 16 >> 16 == 0; //@line 21877
 if (!(($16 | 0) != 0 | $72)) {
  $$1 = -1003; //@line 21880
  $110 = ___async_retval; //@line 21881
  HEAP16[$110 >> 1] = $$1; //@line 21882
  return;
 }
 HEAP32[$60 >> 2] = 1; //@line 21885
 $73 = $28 + 4 | 0; //@line 21886
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(136) | 0; //@line 21887
 $74 = __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($73, $60) | 0; //@line 21888
 if (!___async) {
  HEAP32[___async_retval >> 2] = $74; //@line 21892
  ___async_unwind = 0; //@line 21893
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 285; //@line 21895
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $2; //@line 21897
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $4; //@line 21899
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $8; //@line 21901
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $10; //@line 21903
 HEAP32[$ReallocAsyncCtx9 + 20 >> 2] = $12; //@line 21905
 HEAP16[$ReallocAsyncCtx9 + 24 >> 1] = $14; //@line 21907
 HEAP32[$ReallocAsyncCtx9 + 28 >> 2] = $16; //@line 21909
 HEAP8[$ReallocAsyncCtx9 + 32 >> 0] = $72 & 1; //@line 21912
 HEAP8[$ReallocAsyncCtx9 + 33 >> 0] = $18; //@line 21914
 HEAP32[$ReallocAsyncCtx9 + 36 >> 2] = $20; //@line 21916
 HEAP32[$ReallocAsyncCtx9 + 40 >> 2] = $22; //@line 21918
 HEAP32[$ReallocAsyncCtx9 + 44 >> 2] = $24; //@line 21920
 HEAP8[$ReallocAsyncCtx9 + 48 >> 0] = $26; //@line 21922
 HEAP32[$ReallocAsyncCtx9 + 52 >> 2] = $28; //@line 21924
 HEAP32[$ReallocAsyncCtx9 + 56 >> 2] = $30; //@line 21926
 HEAP32[$ReallocAsyncCtx9 + 60 >> 2] = $32; //@line 21928
 HEAP32[$ReallocAsyncCtx9 + 64 >> 2] = $34; //@line 21930
 HEAP32[$ReallocAsyncCtx9 + 68 >> 2] = $60; //@line 21932
 HEAP32[$ReallocAsyncCtx9 + 72 >> 2] = $38; //@line 21934
 HEAP32[$ReallocAsyncCtx9 + 76 >> 2] = $40; //@line 21936
 HEAP32[$ReallocAsyncCtx9 + 80 >> 2] = $42; //@line 21938
 HEAP32[$ReallocAsyncCtx9 + 84 >> 2] = $44; //@line 21940
 HEAP32[$ReallocAsyncCtx9 + 88 >> 2] = $73; //@line 21942
 HEAP32[$ReallocAsyncCtx9 + 92 >> 2] = $46; //@line 21944
 HEAP32[$ReallocAsyncCtx9 + 96 >> 2] = $48; //@line 21946
 HEAP32[$ReallocAsyncCtx9 + 100 >> 2] = $50; //@line 21948
 HEAP32[$ReallocAsyncCtx9 + 104 >> 2] = $52; //@line 21950
 HEAP32[$ReallocAsyncCtx9 + 108 >> 2] = $54; //@line 21952
 HEAP32[$ReallocAsyncCtx9 + 112 >> 2] = $56; //@line 21954
 HEAP32[$ReallocAsyncCtx9 + 116 >> 2] = $58; //@line 21956
 HEAP32[$ReallocAsyncCtx9 + 120 >> 2] = $60; //@line 21958
 HEAP32[$ReallocAsyncCtx9 + 124 >> 2] = $62; //@line 21960
 HEAP32[$ReallocAsyncCtx9 + 128 >> 2] = $64; //@line 21962
 HEAP32[$ReallocAsyncCtx9 + 132 >> 2] = $66; //@line 21964
 sp = STACKTOP; //@line 21965
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_143($0) {
 $0 = $0 | 0;
 var $10 = 0, $109 = 0, $113 = 0, $12 = 0, $120 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $132 = 0, $135 = 0, $137 = 0, $138 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 28361
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28363
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28365
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28367
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28369
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28371
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28373
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28375
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28377
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28379
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28381
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 28383
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 28385
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 28387
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 28389
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 28391
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 13; //@line 28398
  return;
 }
 if (((HEAPU8[$6 + -3 + ($2 + 638) >> 0] | 0) << 8 | (HEAPU8[$2 + 638 + $4 >> 0] | 0) | (HEAPU8[$6 + -2 + ($2 + 638) >> 0] | 0) << 16 | (HEAPU8[$6 + -1 + ($2 + 638) >> 0] | 0) << 24 | 0) != (HEAP32[$8 >> 2] | 0)) {
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 7; //@line 28428
  $132 = $2 + 944 | 0; //@line 28429
  HEAP8[$132 >> 0] = HEAP8[$132 >> 0] | 32; //@line 28432
  $135 = HEAP32[$24 >> 2] | 0; //@line 28433
  $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 28435
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($135, $2 + 996 | 0, 1); //@line 28436
  if (___async) {
   HEAP32[$ReallocAsyncCtx17 >> 2] = 395; //@line 28439
   $137 = $ReallocAsyncCtx17 + 4 | 0; //@line 28440
   HEAP32[$137 >> 2] = $12; //@line 28441
   $138 = $ReallocAsyncCtx17 + 8 | 0; //@line 28442
   HEAP32[$138 >> 2] = $14; //@line 28443
   sp = STACKTOP; //@line 28444
   return;
  }
  ___async_unwind = 0; //@line 28447
  HEAP32[$ReallocAsyncCtx17 >> 2] = 395; //@line 28448
  $137 = $ReallocAsyncCtx17 + 4 | 0; //@line 28449
  HEAP32[$137 >> 2] = $12; //@line 28450
  $138 = $ReallocAsyncCtx17 + 8 | 0; //@line 28451
  HEAP32[$138 >> 2] = $14; //@line 28452
  sp = STACKTOP; //@line 28453
  return;
 }
 if (__Z28compute_skeys_for_join_framePKhS0_tPhS1_(HEAP32[$16 >> 2] | 0, $18, HEAP16[$2 + 946 >> 1] | 0, $20, $22) | 0) {
  HEAP32[(__ZN11LoRaMacMcps14get_indicationEv($10) | 0) + 4 >> 2] = 13; //@line 28464
  return;
 }
 HEAP32[$2 + 948 >> 2] = (HEAPU8[$2 + 644 >> 0] | 0) << 16 | ((HEAPU8[$2 + 643 >> 0] | 0) << 8 | (HEAPU8[$2 + 642 >> 0] | 0)); //@line 28481
 HEAP32[$2 + 952 >> 2] = (HEAPU8[$2 + 648 >> 0] | 0) << 24 | ((HEAPU8[$2 + 647 >> 0] | 0) << 16 | ((HEAPU8[$2 + 646 >> 0] | 0) << 8 | (HEAPU8[$2 + 645 >> 0] | 0))); //@line 28501
 $99 = HEAP8[$2 + 649 >> 0] | 0; //@line 28503
 HEAP8[$2 + 1129 >> 0] = ($99 & 255) >>> 4 & 7; //@line 28509
 HEAP8[$2 + 1136 >> 0] = $99 & 15; //@line 28512
 $109 = HEAP8[$2 + 650 >> 0] & 15; //@line 28515
 $113 = $109 << 24 >> 24 == 0 ? 1e3 : ($109 & 255) * 1e3 | 0; //@line 28520
 HEAP32[$2 + 1112 >> 2] = $113; //@line 28521
 HEAP32[$2 + 1116 >> 2] = $113 + 1e3; //@line 28524
 HEAP32[$26 >> 2] = $2 + 651; //@line 28526
 HEAP8[$26 + 4 >> 0] = $6 + 239; //@line 28530
 $120 = HEAP32[$28 >> 2] | 0; //@line 28531
 $123 = HEAP32[(HEAP32[$120 >> 2] | 0) + 20 >> 2] | 0; //@line 28534
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 28535
 FUNCTION_TABLE_vii[$123 & 31]($120, $26); //@line 28536
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 377; //@line 28539
  $124 = $ReallocAsyncCtx + 4 | 0; //@line 28540
  HEAP32[$124 >> 2] = $2; //@line 28541
  $125 = $ReallocAsyncCtx + 8 | 0; //@line 28542
  HEAP32[$125 >> 2] = $30; //@line 28543
  $126 = $ReallocAsyncCtx + 12 | 0; //@line 28544
  HEAP32[$126 >> 2] = $24; //@line 28545
  $127 = $ReallocAsyncCtx + 16 | 0; //@line 28546
  HEAP32[$127 >> 2] = $12; //@line 28547
  $128 = $ReallocAsyncCtx + 20 | 0; //@line 28548
  HEAP32[$128 >> 2] = $14; //@line 28549
  sp = STACKTOP; //@line 28550
  return;
 }
 ___async_unwind = 0; //@line 28553
 HEAP32[$ReallocAsyncCtx >> 2] = 377; //@line 28554
 $124 = $ReallocAsyncCtx + 4 | 0; //@line 28555
 HEAP32[$124 >> 2] = $2; //@line 28556
 $125 = $ReallocAsyncCtx + 8 | 0; //@line 28557
 HEAP32[$125 >> 2] = $30; //@line 28558
 $126 = $ReallocAsyncCtx + 12 | 0; //@line 28559
 HEAP32[$126 >> 2] = $24; //@line 28560
 $127 = $ReallocAsyncCtx + 16 | 0; //@line 28561
 HEAP32[$127 >> 2] = $12; //@line 28562
 $128 = $ReallocAsyncCtx + 20 | 0; //@line 28563
 HEAP32[$128 >> 2] = $14; //@line 28564
 sp = STACKTOP; //@line 28565
 return;
}
function __Z15encrypt_payloadPKhtS0_jhjPh($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$044$lcssa$off0 = 0, $$04458 = 0, $$045$lcssa = 0, $$04557 = 0, $$048$lcssa = 0, $$1 = 0, $101 = 0, $107 = 0, $113 = 0, $119 = 0, $125 = 0, $126 = 0, $127 = 0, $134 = 0, $136 = 0, $27 = 0, $29 = 0, $35 = 0, $41 = 0, $47 = 0, $53 = 0, $59 = 0, $65 = 0, $7 = 0, $71 = 0, $77 = 0, $83 = 0, $89 = 0, $95 = 0, $indvars$iv = 0, $wide$trip$count = 0, label = 0;
 _mbedtls_aes_init(21912); //@line 21419
 $7 = _mbedtls_aes_setkey_enc(21912, $2, 128) | 0; //@line 21420
 if ($7 | 0) {
  $$1 = $7; //@line 21423
  _mbedtls_aes_free(21912); //@line 21424
  return $$1 | 0; //@line 21425
 }
 HEAP8[13585] = $4; //@line 21427
 HEAP8[13586] = $3; //@line 21429
 HEAP8[13587] = $3 >>> 8; //@line 21432
 HEAP8[13588] = $3 >>> 16; //@line 21435
 HEAP8[13589] = $3 >>> 24; //@line 21438
 HEAP8[13590] = $5; //@line 21440
 HEAP8[13591] = $5 >>> 8; //@line 21443
 HEAP8[13592] = $5 >>> 16; //@line 21446
 HEAP8[13593] = $5 >>> 24; //@line 21449
 do {
  if (($1 & 65535) > 15) {
   $$04458 = 1; //@line 21454
   $$04557 = 0; //@line 21454
   $126 = $1 & 65535; //@line 21454
   while (1) {
    HEAP8[13595] = $$04458; //@line 21457
    $$04458 = $$04458 + 1 << 16 >> 16; //@line 21458
    $27 = _mbedtls_aes_crypt_ecb(21912, 1, 13580, 23168) | 0; //@line 21459
    if ($27 | 0) {
     $$1 = $27; //@line 21462
     label = 11; //@line 21463
     break;
    }
    $29 = $$04557 & 255; //@line 21466
    HEAP8[$6 + $29 >> 0] = HEAP8[23168] ^ HEAP8[$0 + $29 >> 0]; //@line 21472
    $35 = $29 + 1 | 0; //@line 21473
    HEAP8[$6 + $35 >> 0] = HEAP8[23169] ^ HEAP8[$0 + $35 >> 0]; //@line 21479
    $41 = $29 + 2 | 0; //@line 21480
    HEAP8[$6 + $41 >> 0] = HEAP8[23170] ^ HEAP8[$0 + $41 >> 0]; //@line 21486
    $47 = $29 + 3 | 0; //@line 21487
    HEAP8[$6 + $47 >> 0] = HEAP8[23171] ^ HEAP8[$0 + $47 >> 0]; //@line 21493
    $53 = $29 + 4 | 0; //@line 21494
    HEAP8[$6 + $53 >> 0] = HEAP8[23172] ^ HEAP8[$0 + $53 >> 0]; //@line 21500
    $59 = $29 + 5 | 0; //@line 21501
    HEAP8[$6 + $59 >> 0] = HEAP8[23173] ^ HEAP8[$0 + $59 >> 0]; //@line 21507
    $65 = $29 + 6 | 0; //@line 21508
    HEAP8[$6 + $65 >> 0] = HEAP8[23174] ^ HEAP8[$0 + $65 >> 0]; //@line 21514
    $71 = $29 + 7 | 0; //@line 21515
    HEAP8[$6 + $71 >> 0] = HEAP8[23175] ^ HEAP8[$0 + $71 >> 0]; //@line 21521
    $77 = $29 + 8 | 0; //@line 21522
    HEAP8[$6 + $77 >> 0] = HEAP8[23176] ^ HEAP8[$0 + $77 >> 0]; //@line 21528
    $83 = $29 + 9 | 0; //@line 21529
    HEAP8[$6 + $83 >> 0] = HEAP8[23177] ^ HEAP8[$0 + $83 >> 0]; //@line 21535
    $89 = $29 + 10 | 0; //@line 21536
    HEAP8[$6 + $89 >> 0] = HEAP8[23178] ^ HEAP8[$0 + $89 >> 0]; //@line 21542
    $95 = $29 + 11 | 0; //@line 21543
    HEAP8[$6 + $95 >> 0] = HEAP8[23179] ^ HEAP8[$0 + $95 >> 0]; //@line 21549
    $101 = $29 + 12 | 0; //@line 21550
    HEAP8[$6 + $101 >> 0] = HEAP8[23180] ^ HEAP8[$0 + $101 >> 0]; //@line 21556
    $107 = $29 + 13 | 0; //@line 21557
    HEAP8[$6 + $107 >> 0] = HEAP8[23181] ^ HEAP8[$0 + $107 >> 0]; //@line 21563
    $113 = $29 + 14 | 0; //@line 21564
    HEAP8[$6 + $113 >> 0] = HEAP8[23182] ^ HEAP8[$0 + $113 >> 0]; //@line 21570
    $119 = $29 + 15 | 0; //@line 21571
    HEAP8[$6 + $119 >> 0] = HEAP8[23183] ^ HEAP8[$0 + $119 >> 0]; //@line 21577
    $125 = $126 + 65520 | 0; //@line 21578
    $127 = $125 & 65535; //@line 21579
    if (($127 & 65535) <= 15) {
     label = 6; //@line 21587
     break;
    } else {
     $$04557 = $29 + 16 & 255; //@line 21585
     $126 = $125 & 65535; //@line 21585
    }
   }
   if ((label | 0) == 6) {
    $$044$lcssa$off0 = $$04458 & 255; //@line 21595
    $$045$lcssa = $$04557 + 16 & 255; //@line 21595
    $$048$lcssa = $127; //@line 21595
    break;
   } else if ((label | 0) == 11) {
    _mbedtls_aes_free(21912); //@line 21599
    return $$1 | 0; //@line 21600
   }
  } else {
   $$044$lcssa$off0 = 1; //@line 21603
   $$045$lcssa = 0; //@line 21603
   $$048$lcssa = $1; //@line 21603
  }
 } while (0);
 if (!($$048$lcssa << 16 >> 16)) {
  $$1 = 0; //@line 21608
  _mbedtls_aes_free(21912); //@line 21609
  return $$1 | 0; //@line 21610
 }
 HEAP8[13595] = $$044$lcssa$off0; //@line 21612
 $134 = _mbedtls_aes_crypt_ecb(21912, 1, 13580, 23168) | 0; //@line 21613
 if ($134 | 0) {
  $$1 = $134; //@line 21616
  _mbedtls_aes_free(21912); //@line 21617
  return $$1 | 0; //@line 21618
 }
 $wide$trip$count = $$048$lcssa & 65535; //@line 21620
 $indvars$iv = 0; //@line 21621
 do {
  $136 = $indvars$iv + $$045$lcssa | 0; //@line 21623
  HEAP8[$6 + $136 >> 0] = HEAP8[23168 + $indvars$iv >> 0] ^ HEAP8[$0 + $136 >> 0]; //@line 21630
  $indvars$iv = $indvars$iv + 1 | 0; //@line 21631
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 $$1 = 0; //@line 21634
 _mbedtls_aes_free(21912); //@line 21640
 return $$1 | 0; //@line 21641
}
function __ZN7LoRaPHY13apply_cf_listEP15cflist_params_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01314 = 0, $$015 = 0, $15 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $30 = 0, $33 = 0, $34 = 0, $37 = 0, $43 = 0, $49 = 0, $54 = 0, $71 = 0, $86 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 22944
 STACKTOP = STACKTOP + 16 | 0; //@line 22945
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 22945
 $2 = sp; //@line 22946
 if (!(HEAP8[$0 + 15 >> 0] | 0)) {
  STACKTOP = sp; //@line 22951
  return;
 }
 $15 = $2 + 8 | 0; //@line 22962
 HEAP8[$15 >> 0] = HEAPU8[$0 + 31 >> 0] << 4 | HEAPU8[$0 + 30 >> 0]; //@line 22963
 L4 : do {
  if ((HEAP8[$1 + 4 >> 0] | 0) == 16) {
   $19 = $0 + 18 | 0; //@line 22969
   $20 = HEAP8[$19 >> 0] | 0; //@line 22970
   $21 = $0 + 20 | 0; //@line 22971
   if (($20 & 255) < (HEAPU8[$21 >> 0] | 0)) {
    $24 = $0 + 19 | 0; //@line 22975
    $25 = $2 + 4 | 0; //@line 22976
    $$01314 = 0; //@line 22977
    $$015 = $20; //@line 22977
    $30 = $20; //@line 22977
    while (1) {
     if ((($30 & 255) + (HEAPU8[$24 >> 0] | 0) | 0) >>> 0 > ($$015 & 255) >>> 0) {
      $33 = HEAP32[$1 >> 2] | 0; //@line 22986
      $34 = $$01314 & 255; //@line 22987
      $37 = HEAPU8[$33 + $34 >> 0] | 0; //@line 22990
      HEAP32[$2 >> 2] = $37; //@line 22991
      $43 = HEAPU8[$33 + ($34 + 1) >> 0] << 8 | $37; //@line 22997
      HEAP32[$2 >> 2] = $43; //@line 22998
      $49 = HEAPU8[$33 + ($34 + 2) >> 0] << 16 | $43; //@line 23004
      HEAP32[$2 >> 2] = $49 * 100; //@line 23006
      HEAP32[$25 >> 2] = 0; //@line 23007
      if (!$49) {
       label = 11; //@line 23010
      } else {
       $54 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 23014
       $AsyncCtx = _emscripten_alloc_async_context(56, sp) | 0; //@line 23015
       FUNCTION_TABLE_iiii[$54 & 15]($0, $2, $$015) | 0; //@line 23016
       if (___async) {
        label = 9; //@line 23019
        break;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 23022
      }
     } else {
      HEAP32[$2 >> 2] = 0; //@line 23025
      HEAP8[$15 >> 0] = 0; //@line 23026
      HEAP32[$25 >> 2] = 0; //@line 23027
      label = 11; //@line 23028
     }
     if ((label | 0) == 11) {
      label = 0; //@line 23031
      $71 = HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] | 0; //@line 23034
      $AsyncCtx3 = _emscripten_alloc_async_context(56, sp) | 0; //@line 23035
      FUNCTION_TABLE_iii[$71 & 31]($0, $$015) | 0; //@line 23036
      if (___async) {
       label = 12; //@line 23039
       break;
      }
      _emscripten_free_async_context($AsyncCtx3 | 0); //@line 23042
     }
     $86 = HEAP8[$19 >> 0] | 0; //@line 23044
     $91 = $$015 + 1 << 24 >> 24; //@line 23049
     if (($91 & 255) < (HEAPU8[$21 >> 0] | 0)) {
      $$01314 = ($86 & 255) + ($$01314 & 255) & 255; //@line 23053
      $$015 = $91; //@line 23053
      $30 = $86; //@line 23053
     } else {
      break L4;
     }
    }
    if ((label | 0) == 9) {
     HEAP32[$AsyncCtx >> 2] = 601; //@line 23059
     HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 23061
     HEAP8[$AsyncCtx + 8 >> 0] = $$01314; //@line 23063
     HEAP8[$AsyncCtx + 9 >> 0] = $$015; //@line 23065
     HEAP32[$AsyncCtx + 12 >> 2] = $21; //@line 23067
     HEAP32[$AsyncCtx + 16 >> 2] = $24; //@line 23069
     HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 23071
     HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 23073
     HEAP32[$AsyncCtx + 28 >> 2] = $2; //@line 23075
     HEAP32[$AsyncCtx + 32 >> 2] = $25; //@line 23077
     HEAP32[$AsyncCtx + 36 >> 2] = $15; //@line 23079
     HEAP32[$AsyncCtx + 40 >> 2] = $0; //@line 23081
     HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 23083
     HEAP32[$AsyncCtx + 48 >> 2] = $0; //@line 23085
     HEAP32[$AsyncCtx + 52 >> 2] = $2; //@line 23087
     sp = STACKTOP; //@line 23088
     STACKTOP = sp; //@line 23089
     return;
    } else if ((label | 0) == 12) {
     HEAP32[$AsyncCtx3 >> 2] = 602; //@line 23092
     HEAP32[$AsyncCtx3 + 4 >> 2] = $19; //@line 23094
     HEAP8[$AsyncCtx3 + 8 >> 0] = $$01314; //@line 23096
     HEAP8[$AsyncCtx3 + 9 >> 0] = $$015; //@line 23098
     HEAP32[$AsyncCtx3 + 12 >> 2] = $21; //@line 23100
     HEAP32[$AsyncCtx3 + 16 >> 2] = $24; //@line 23102
     HEAP32[$AsyncCtx3 + 20 >> 2] = $2; //@line 23104
     HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 23106
     HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 23108
     HEAP32[$AsyncCtx3 + 32 >> 2] = $25; //@line 23110
     HEAP32[$AsyncCtx3 + 36 >> 2] = $15; //@line 23112
     HEAP32[$AsyncCtx3 + 40 >> 2] = $0; //@line 23114
     HEAP32[$AsyncCtx3 + 44 >> 2] = $0; //@line 23116
     HEAP32[$AsyncCtx3 + 48 >> 2] = $0; //@line 23118
     HEAP32[$AsyncCtx3 + 52 >> 2] = $2; //@line 23120
     sp = STACKTOP; //@line 23121
     STACKTOP = sp; //@line 23122
     return;
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 23127
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $35 = 0, $36 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 30631
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30635
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30637
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30639
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30641
 $11 = $4 + 12 | 0; //@line 30643
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 30644
 $12 = _equeue_alloc($6, 16) | 0; //@line 30645
 if ($12 | 0) {
  $14 = HEAP32[$11 >> 2] | 0; //@line 30648
  if (!$14) {
   HEAP32[$12 + 12 >> 2] = 0; //@line 30652
   _equeue_event_delay($12, $8); //@line 30653
   _equeue_event_dtor($12, 356); //@line 30654
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 30655
   $26 = _equeue_post($6, 357, $12) | 0; //@line 30656
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 650; //@line 30659
    $27 = $ReallocAsyncCtx4 + 4 | 0; //@line 30660
    HEAP32[$27 >> 2] = $10; //@line 30661
    $28 = $ReallocAsyncCtx4 + 8 | 0; //@line 30662
    HEAP32[$28 >> 2] = $11; //@line 30663
    $29 = $ReallocAsyncCtx4 + 12 | 0; //@line 30664
    HEAP32[$29 >> 2] = $4; //@line 30665
    sp = STACKTOP; //@line 30666
    return;
   }
   HEAP32[___async_retval >> 2] = $26; //@line 30670
   ___async_unwind = 0; //@line 30671
   HEAP32[$ReallocAsyncCtx4 >> 2] = 650; //@line 30672
   $27 = $ReallocAsyncCtx4 + 4 | 0; //@line 30673
   HEAP32[$27 >> 2] = $10; //@line 30674
   $28 = $ReallocAsyncCtx4 + 8 | 0; //@line 30675
   HEAP32[$28 >> 2] = $11; //@line 30676
   $29 = $ReallocAsyncCtx4 + 12 | 0; //@line 30677
   HEAP32[$29 >> 2] = $4; //@line 30678
   sp = STACKTOP; //@line 30679
   return;
  } else {
   $17 = HEAP32[$14 + 4 >> 2] | 0; //@line 30683
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 30684
   FUNCTION_TABLE_vii[$17 & 31]($12, $4); //@line 30685
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 649; //@line 30688
    $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 30689
    HEAP32[$18 >> 2] = $11; //@line 30690
    $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 30691
    HEAP32[$19 >> 2] = $12; //@line 30692
    $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 30693
    HEAP32[$20 >> 2] = $8; //@line 30694
    $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 30695
    HEAP32[$21 >> 2] = $6; //@line 30696
    $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 30697
    HEAP32[$22 >> 2] = $10; //@line 30698
    $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 30699
    HEAP32[$23 >> 2] = $11; //@line 30700
    $24 = $ReallocAsyncCtx2 + 28 | 0; //@line 30701
    HEAP32[$24 >> 2] = $4; //@line 30702
    sp = STACKTOP; //@line 30703
    return;
   }
   ___async_unwind = 0; //@line 30706
   HEAP32[$ReallocAsyncCtx2 >> 2] = 649; //@line 30707
   $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 30708
   HEAP32[$18 >> 2] = $11; //@line 30709
   $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 30710
   HEAP32[$19 >> 2] = $12; //@line 30711
   $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 30712
   HEAP32[$20 >> 2] = $8; //@line 30713
   $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 30714
   HEAP32[$21 >> 2] = $6; //@line 30715
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 30716
   HEAP32[$22 >> 2] = $10; //@line 30717
   $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 30718
   HEAP32[$23 >> 2] = $11; //@line 30719
   $24 = $ReallocAsyncCtx2 + 28 | 0; //@line 30720
   HEAP32[$24 >> 2] = $4; //@line 30721
   sp = STACKTOP; //@line 30722
   return;
  }
 }
 $31 = $10 + 16 | 0; //@line 30726
 HEAP32[$31 >> 2] = 0; //@line 30727
 $32 = HEAP32[$11 >> 2] | 0; //@line 30728
 if ($32 | 0) {
  $35 = HEAP32[$32 + 8 >> 2] | 0; //@line 30732
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 30733
  FUNCTION_TABLE_vi[$35 & 1023]($4); //@line 30734
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 651; //@line 30737
   $36 = $ReallocAsyncCtx3 + 4 | 0; //@line 30738
   HEAP32[$36 >> 2] = $31; //@line 30739
   sp = STACKTOP; //@line 30740
   return;
  }
  ___async_unwind = 0; //@line 30743
  HEAP32[$ReallocAsyncCtx3 >> 2] = 651; //@line 30744
  $36 = $ReallocAsyncCtx3 + 4 | 0; //@line 30745
  HEAP32[$36 >> 2] = $31; //@line 30746
  sp = STACKTOP; //@line 30747
  return;
 }
 if (0) {
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 30754
 _mbed_assert_internal(13710, 13728, 57); //@line 30755
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 652; //@line 30758
  sp = STACKTOP; //@line 30759
  return;
 }
 ___async_unwind = 0; //@line 30762
 HEAP32[$ReallocAsyncCtx5 >> 2] = 652; //@line 30763
 sp = STACKTOP; //@line 30764
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_436($0) {
 $0 = $0 | 0;
 var $$pre17 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 28429
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28431
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28433
 HEAP32[$4 + 364 >> 2] = 2; //@line 28437
 $$pre17 = HEAP8[$2 >> 0] | 0; //@line 28438
 if (!($$pre17 & 4)) {
  $11 = HEAP32[$4 + 1324 >> 2] | 0; //@line 28443
  $12 = $11 + 16 | 0; //@line 28444
  $14 = __ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0; //@line 28446
  $15 = $11 + 28 | 0; //@line 28447
  $16 = HEAP32[$15 >> 2] | 0; //@line 28448
  if (!$16) {
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(24) | 0; //@line 28451
   _mbed_assert_internal(14997, 15002, 1102); //@line 28452
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 462; //@line 28455
    $18 = $ReallocAsyncCtx15 + 4 | 0; //@line 28456
    HEAP32[$18 >> 2] = $15; //@line 28457
    $19 = $ReallocAsyncCtx15 + 8 | 0; //@line 28458
    HEAP32[$19 >> 2] = $12; //@line 28459
    $20 = $ReallocAsyncCtx15 + 12 | 0; //@line 28460
    HEAP32[$20 >> 2] = $14; //@line 28461
    $21 = $ReallocAsyncCtx15 + 16 | 0; //@line 28462
    HEAP32[$21 >> 2] = $2; //@line 28463
    $22 = $ReallocAsyncCtx15 + 20 | 0; //@line 28464
    HEAP32[$22 >> 2] = $4; //@line 28465
    sp = STACKTOP; //@line 28466
    return;
   }
   ___async_unwind = 0; //@line 28469
   HEAP32[$ReallocAsyncCtx15 >> 2] = 462; //@line 28470
   $18 = $ReallocAsyncCtx15 + 4 | 0; //@line 28471
   HEAP32[$18 >> 2] = $15; //@line 28472
   $19 = $ReallocAsyncCtx15 + 8 | 0; //@line 28473
   HEAP32[$19 >> 2] = $12; //@line 28474
   $20 = $ReallocAsyncCtx15 + 12 | 0; //@line 28475
   HEAP32[$20 >> 2] = $14; //@line 28476
   $21 = $ReallocAsyncCtx15 + 16 | 0; //@line 28477
   HEAP32[$21 >> 2] = $2; //@line 28478
   $22 = $ReallocAsyncCtx15 + 20 | 0; //@line 28479
   HEAP32[$22 >> 2] = $4; //@line 28480
   sp = STACKTOP; //@line 28481
   return;
  } else {
   $23 = HEAP32[$16 >> 2] | 0; //@line 28484
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 28485
   FUNCTION_TABLE_vii[$23 & 31]($12, $14); //@line 28486
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 463; //@line 28489
    $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 28490
    HEAP32[$24 >> 2] = $2; //@line 28491
    $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 28492
    HEAP32[$25 >> 2] = $4; //@line 28493
    sp = STACKTOP; //@line 28494
    return;
   }
   ___async_unwind = 0; //@line 28497
   HEAP32[$ReallocAsyncCtx4 >> 2] = 463; //@line 28498
   $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 28499
   HEAP32[$24 >> 2] = $2; //@line 28500
   $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 28501
   HEAP32[$25 >> 2] = $4; //@line 28502
   sp = STACKTOP; //@line 28503
   return;
  }
 }
 $26 = $$pre17 & -5; //@line 28507
 HEAP8[$2 >> 0] = $26; //@line 28508
 if (!($26 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $26 & -17; //@line 28515
 $31 = HEAP32[$4 + 1324 >> 2] | 0; //@line 28517
 $32 = $31 + 48 | 0; //@line 28518
 $34 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 28520
 $35 = $31 + 60 | 0; //@line 28521
 $36 = HEAP32[$35 >> 2] | 0; //@line 28522
 if (!$36) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 28525
  _mbed_assert_internal(14997, 15002, 1102); //@line 28526
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 464; //@line 28529
   $38 = $ReallocAsyncCtx14 + 4 | 0; //@line 28530
   HEAP32[$38 >> 2] = $35; //@line 28531
   $39 = $ReallocAsyncCtx14 + 8 | 0; //@line 28532
   HEAP32[$39 >> 2] = $32; //@line 28533
   $40 = $ReallocAsyncCtx14 + 12 | 0; //@line 28534
   HEAP32[$40 >> 2] = $34; //@line 28535
   sp = STACKTOP; //@line 28536
   return;
  }
  ___async_unwind = 0; //@line 28539
  HEAP32[$ReallocAsyncCtx14 >> 2] = 464; //@line 28540
  $38 = $ReallocAsyncCtx14 + 4 | 0; //@line 28541
  HEAP32[$38 >> 2] = $35; //@line 28542
  $39 = $ReallocAsyncCtx14 + 8 | 0; //@line 28543
  HEAP32[$39 >> 2] = $32; //@line 28544
  $40 = $ReallocAsyncCtx14 + 12 | 0; //@line 28545
  HEAP32[$40 >> 2] = $34; //@line 28546
  sp = STACKTOP; //@line 28547
  return;
 } else {
  $41 = HEAP32[$36 >> 2] | 0; //@line 28550
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 28551
  FUNCTION_TABLE_vii[$41 & 31]($32, $34); //@line 28552
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 465; //@line 28555
   sp = STACKTOP; //@line 28556
   return;
  }
  ___async_unwind = 0; //@line 28559
  HEAP32[$ReallocAsyncCtx5 >> 2] = 465; //@line 28560
  sp = STACKTOP; //@line 28561
  return;
 }
}
function _ticker_read_us__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $58 = 0, $59 = 0, $65 = 0, $66 = 0, $67 = 0, $76 = 0, $77 = 0, $78 = 0, $80 = 0, $84 = 0, $85 = 0, $91 = 0, $92 = 0, $93 = 0, $95 = 0, $99 = 0, $AsyncRetVal = 0, label = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16584
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16586
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16588
 if (($AsyncRetVal | 0) == (HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0)) {
  $99 = HEAP32[$2 >> 2] | 0; //@line 16594
  $100 = $99 + 48 | 0; //@line 16595
  $101 = $100; //@line 16596
  $102 = $101; //@line 16597
  $103 = HEAP32[$102 >> 2] | 0; //@line 16598
  $104 = $101 + 4 | 0; //@line 16599
  $105 = $104; //@line 16600
  $106 = HEAP32[$105 >> 2] | 0; //@line 16601
  $107 = ___async_retval; //@line 16602
  $108 = $107; //@line 16603
  $109 = $108; //@line 16604
  HEAP32[$109 >> 2] = $103; //@line 16605
  $110 = $108 + 4 | 0; //@line 16606
  $111 = $110; //@line 16607
  HEAP32[$111 >> 2] = $106; //@line 16608
  return;
 }
 $10 = $4 + 32 | 0; //@line 16611
 $15 = $AsyncRetVal - (HEAP32[$10 >> 2] | 0) & HEAP32[$4 + 12 >> 2]; //@line 16616
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 16617
 $17 = HEAP32[$4 + 8 >> 2] | 0; //@line 16619
 L5 : do {
  if (($17 | 0) < 1e6) {
   switch ($17 | 0) {
   case 32768:
    {
     break;
    }
   default:
    {
     label = 6; //@line 16628
     break L5;
    }
   }
   $18 = ___muldi3($15 | 0, 0, 1e6, 0) | 0; //@line 16632
   $20 = _bitshift64Lshr($18 | 0, tempRet0 | 0, 15) | 0; //@line 16634
   $21 = tempRet0; //@line 16635
   $24 = $4 + 40 | 0; //@line 16638
   $25 = $24; //@line 16639
   $31 = _i64Add(HEAP32[$25 >> 2] | 0, HEAP32[$25 + 4 >> 2] | 0, $15 * 1e6 & 32704 | 0, 0) | 0; //@line 16645
   $32 = tempRet0; //@line 16646
   $33 = $24; //@line 16647
   HEAP32[$33 >> 2] = $31; //@line 16649
   HEAP32[$33 + 4 >> 2] = $32; //@line 16652
   if ($32 >>> 0 < 0 | ($32 | 0) == 0 & $31 >>> 0 < 32768) {
    $91 = $20; //@line 16659
    $92 = $21; //@line 16659
   } else {
    $42 = _i64Add($20 | 0, $21 | 0, 1, 0) | 0; //@line 16661
    $43 = tempRet0; //@line 16662
    $44 = _i64Add($31 | 0, $32 | 0, -32768, -1) | 0; //@line 16663
    $46 = $24; //@line 16665
    HEAP32[$46 >> 2] = $44; //@line 16667
    HEAP32[$46 + 4 >> 2] = tempRet0; //@line 16670
    $91 = $42; //@line 16671
    $92 = $43; //@line 16671
   }
  } else {
   switch ($17 | 0) {
   case 1e6:
    {
     $91 = $15; //@line 16676
     $92 = 0; //@line 16676
     break;
    }
   default:
    {
     label = 6; //@line 16680
    }
   }
  }
 } while (0);
 if ((label | 0) == 6) {
  $50 = ___muldi3($15 | 0, 0, 1e6, 0) | 0; //@line 16686
  $51 = tempRet0; //@line 16687
  $52 = ___udivdi3($50 | 0, $51 | 0, $17 | 0, 0) | 0; //@line 16688
  $53 = tempRet0; //@line 16689
  $54 = ___muldi3($52 | 0, $53 | 0, $17 | 0, 0) | 0; //@line 16690
  $56 = _i64Subtract($50 | 0, $51 | 0, $54 | 0, tempRet0 | 0) | 0; //@line 16692
  $58 = $4 + 40 | 0; //@line 16694
  $59 = $58; //@line 16695
  $65 = _i64Add($56 | 0, tempRet0 | 0, HEAP32[$59 >> 2] | 0, HEAP32[$59 + 4 >> 2] | 0) | 0; //@line 16701
  $66 = tempRet0; //@line 16702
  $67 = $58; //@line 16703
  HEAP32[$67 >> 2] = $65; //@line 16705
  HEAP32[$67 + 4 >> 2] = $66; //@line 16708
  if ($66 >>> 0 < 0 | ($66 | 0) == 0 & $65 >>> 0 < $17 >>> 0) {
   $91 = $52; //@line 16715
   $92 = $53; //@line 16715
  } else {
   $76 = _i64Add($52 | 0, $53 | 0, 1, 0) | 0; //@line 16717
   $77 = tempRet0; //@line 16718
   $78 = _i64Subtract($65 | 0, $66 | 0, $17 | 0, 0) | 0; //@line 16719
   $80 = $58; //@line 16721
   HEAP32[$80 >> 2] = $78; //@line 16723
   HEAP32[$80 + 4 >> 2] = tempRet0; //@line 16726
   $91 = $76; //@line 16727
   $92 = $77; //@line 16727
  }
 }
 $84 = $4 + 48 | 0; //@line 16730
 $85 = $84; //@line 16731
 $93 = _i64Add(HEAP32[$85 >> 2] | 0, HEAP32[$85 + 4 >> 2] | 0, $91 | 0, $92 | 0) | 0; //@line 16737
 $95 = $84; //@line 16739
 HEAP32[$95 >> 2] = $93; //@line 16741
 HEAP32[$95 + 4 >> 2] = tempRet0; //@line 16744
 $99 = HEAP32[$2 >> 2] | 0; //@line 16745
 $100 = $99 + 48 | 0; //@line 16746
 $101 = $100; //@line 16747
 $102 = $101; //@line 16748
 $103 = HEAP32[$102 >> 2] | 0; //@line 16749
 $104 = $101 + 4 | 0; //@line 16750
 $105 = $104; //@line 16751
 $106 = HEAP32[$105 >> 2] | 0; //@line 16752
 $107 = ___async_retval; //@line 16753
 $108 = $107; //@line 16754
 $109 = $108; //@line 16755
 HEAP32[$109 >> 2] = $103; //@line 16756
 $110 = $108 + 4 | 0; //@line 16757
 $111 = $110; //@line 16758
 HEAP32[$111 >> 2] = $106; //@line 16759
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_55($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $38 = 0, $4 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $6 = 0, $60 = 0, $69 = 0, $70 = 0, $74 = 0, $77 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 21604
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21606
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21608
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21610
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21612
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21614
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21616
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21618
 $16 = HEAP8[$0 + 32 >> 0] | 0; //@line 21620
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21622
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21624
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21626
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21628
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 21632
 $30 = HEAP16[$0 + 60 >> 1] | 0; //@line 21634
 $32 = HEAP8[$0 + 62 >> 0] | 0; //@line 21636
 $34 = HEAP32[$0 + 64 >> 2] | 0; //@line 21638
 $38 = HEAP32[$0 + 72 >> 2] | 0; //@line 21642
 $44 = HEAP8[$0 + 84 >> 0] & 1; //@line 21649
 $46 = HEAP32[$0 + 88 >> 2] | 0; //@line 21651
 $48 = HEAP32[$0 + 92 >> 2] | 0; //@line 21653
 $50 = HEAP32[$0 + 96 >> 2] | 0; //@line 21655
 $52 = HEAP32[$0 + 100 >> 2] | 0; //@line 21657
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 21659
 $56 = HEAP32[$0 + 108 >> 2] | 0; //@line 21661
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 21665
 if (!(HEAP32[$0 + 52 >> 2] | 0)) {
  if (!(HEAP8[(HEAP32[$0 + 80 >> 2] | 0) + 4 >> 0] | 0)) {
   HEAP16[___async_retval >> 1] = -1009; //@line 21675
   return;
  }
 }
 if (($32 + -1 & 255) >= 223) {
  _printf(11863, $34) | 0; //@line 21682
  _printf(12352, $38) | 0; //@line 21683
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 21684
  _putchar(10) | 0; //@line 21685
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 287; //@line 21688
   $69 = $ReallocAsyncCtx5 + 4 | 0; //@line 21689
   HEAP32[$69 >> 2] = $2; //@line 21690
   sp = STACKTOP; //@line 21691
   return;
  }
  ___async_unwind = 0; //@line 21694
  HEAP32[$ReallocAsyncCtx5 >> 2] = 287; //@line 21695
  $69 = $ReallocAsyncCtx5 + 4 | 0; //@line 21696
  HEAP32[$69 >> 2] = $2; //@line 21697
  sp = STACKTOP; //@line 21698
  return;
 }
 $70 = $4 + 2285 | 0; //@line 21701
 HEAP8[$70 >> 0] = $32; //@line 21702
 if (!($16 << 24 >> 24 == 0 | ($16 & 15) == 3)) {
  HEAP8[$4 + 1965 >> 0] = $32; //@line 21709
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(84) | 0; //@line 21711
  $77 = __ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t($54, $30 & 255, $28) | 0; //@line 21712
  if (!___async) {
   HEAP32[___async_retval >> 2] = $77; //@line 21716
   ___async_unwind = 0; //@line 21717
  }
  HEAP32[$ReallocAsyncCtx8 >> 2] = 289; //@line 21719
  HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $2; //@line 21721
  HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $4; //@line 21723
  HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $6; //@line 21725
  HEAP32[$ReallocAsyncCtx8 + 16 >> 2] = $8; //@line 21727
  HEAP32[$ReallocAsyncCtx8 + 20 >> 2] = $10; //@line 21729
  HEAP32[$ReallocAsyncCtx8 + 24 >> 2] = $12; //@line 21731
  HEAP32[$ReallocAsyncCtx8 + 28 >> 2] = $14; //@line 21733
  HEAP8[$ReallocAsyncCtx8 + 32 >> 0] = $16; //@line 21735
  HEAP32[$ReallocAsyncCtx8 + 36 >> 2] = $18; //@line 21737
  HEAP32[$ReallocAsyncCtx8 + 40 >> 2] = $20; //@line 21739
  HEAP32[$ReallocAsyncCtx8 + 44 >> 2] = $22; //@line 21741
  HEAP32[$ReallocAsyncCtx8 + 48 >> 2] = $24; //@line 21743
  HEAP32[$ReallocAsyncCtx8 + 52 >> 2] = $70; //@line 21745
  HEAP32[$ReallocAsyncCtx8 + 56 >> 2] = $28; //@line 21747
  HEAP32[$ReallocAsyncCtx8 + 60 >> 2] = $28; //@line 21749
  HEAP16[$ReallocAsyncCtx8 + 64 >> 1] = $30; //@line 21751
  HEAP8[$ReallocAsyncCtx8 + 66 >> 0] = $44 & 1; //@line 21754
  HEAP32[$ReallocAsyncCtx8 + 68 >> 2] = $46; //@line 21756
  HEAP32[$ReallocAsyncCtx8 + 72 >> 2] = $48; //@line 21758
  HEAP32[$ReallocAsyncCtx8 + 76 >> 2] = $50; //@line 21760
  HEAP32[$ReallocAsyncCtx8 + 80 >> 2] = $52; //@line 21762
  sp = STACKTOP; //@line 21763
  return;
 }
 _printf(11863, $56) | 0; //@line 21766
 _printf(12389, $60) | 0; //@line 21767
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 21768
 _putchar(10) | 0; //@line 21769
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 288; //@line 21772
  $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 21773
  HEAP32[$74 >> 2] = $2; //@line 21774
  sp = STACKTOP; //@line 21775
  return;
 }
 ___async_unwind = 0; //@line 21778
 HEAP32[$ReallocAsyncCtx4 >> 2] = 288; //@line 21779
 $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 21780
 HEAP32[$74 >> 2] = $2; //@line 21781
 sp = STACKTOP; //@line 21782
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $64 = 0, $66 = 0, $68 = 0, $70 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18968
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18970
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18972
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18974
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18976
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18978
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18982
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18984
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18986
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18988
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 18990
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 18992
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 18994
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 18996
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 18998
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 19000
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 19002
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 19004
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 19006
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 19008
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 19010
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 19012
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 19016
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 19018
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 19020
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 19022
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 19024
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 19026
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 19030
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 19032
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 19034
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 19036
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 19040
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 19042
 $78 = HEAP32[$0 + 156 >> 2] | 0; //@line 19044
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 19046
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19048
 if (!$AsyncRetVal) {
  _memcpy(HEAP32[$0 + 144 >> 2] | 0, $18 | 0, HEAP32[$0 + 28 >> 2] | 0) | 0; //@line 19051
 }
 HEAP8[$10 >> 0] = 0; //@line 19053
 HEAP8[$20 >> 0] = 0; //@line 19054
 HEAP8[$36 >> 0] = 0; //@line 19055
 HEAP8[$68 >> 0] = 0; //@line 19056
 HEAP8[$16 >> 0] = 0; //@line 19057
 HEAP8[$38 >> 0] = 0; //@line 19058
 HEAP8[$24 >> 0] = 0; //@line 19059
 HEAP8[$80 >> 0] = 0; //@line 19060
 HEAP8[$52 >> 0] = 0; //@line 19061
 HEAP8[$26 >> 0] = 0; //@line 19062
 HEAP8[$12 >> 0] = 0; //@line 19063
 HEAP8[$54 >> 0] = 0; //@line 19064
 HEAP8[$28 >> 0] = 0; //@line 19065
 HEAP8[$22 >> 0] = 0; //@line 19066
 HEAP8[$74 >> 0] = 0; //@line 19067
 HEAP8[$30 >> 0] = 0; //@line 19068
 HEAP8[$70 >> 0] = 0; //@line 19069
 HEAP8[$44 >> 0] = 0; //@line 19070
 HEAP8[$64 >> 0] = 0; //@line 19071
 HEAP8[$76 >> 0] = 0; //@line 19072
 HEAP8[$2 >> 0] = 0; //@line 19073
 HEAP8[$32 >> 0] = 0; //@line 19074
 HEAP8[$78 >> 0] = 0; //@line 19075
 HEAP8[$4 >> 0] = 0; //@line 19076
 HEAP8[$46 >> 0] = 0; //@line 19077
 HEAP8[$58 >> 0] = 0; //@line 19078
 HEAP8[$8 >> 0] = 0; //@line 19079
 HEAP8[$34 >> 0] = 0; //@line 19080
 HEAP8[$60 >> 0] = 0; //@line 19081
 HEAP8[$6 >> 0] = 0; //@line 19082
 HEAP8[$66 >> 0] = 0; //@line 19083
 HEAP8[$40 >> 0] = 0; //@line 19084
 HEAP32[$56 >> 2] = 0; //@line 19085
 HEAP8[$42 >> 0] = 0; //@line 19087
 HEAP8[$50 + 17 >> 0] = 0; //@line 19089
 HEAP8[$50 + 18 >> 0] = 0; //@line 19091
 HEAP8[$50 + 19 >> 0] = 0; //@line 19093
 HEAP8[$50 + 20 >> 0] = 0; //@line 19095
 HEAP8[$50 + 21 >> 0] = 0; //@line 19097
 HEAP8[$50 + 22 >> 0] = 0; //@line 19099
 HEAP8[$50 + 23 >> 0] = 0; //@line 19101
 HEAP8[$50 + 24 >> 0] = 0; //@line 19103
 HEAP8[$50 + 25 >> 0] = 0; //@line 19105
 HEAP8[$50 + 26 >> 0] = 0; //@line 19107
 HEAP8[$50 + 27 >> 0] = 0; //@line 19109
 HEAP8[$50 + 28 >> 0] = 0; //@line 19111
 HEAP8[$50 + 29 >> 0] = 0; //@line 19113
 HEAP8[$50 + 30 >> 0] = 0; //@line 19115
 HEAP8[$50 + 31 >> 0] = 0; //@line 19116
 HEAP8[$18 >> 0] = 0; //@line 19118
 HEAP8[$50 + 1 >> 0] = 0; //@line 19120
 HEAP8[$50 + 2 >> 0] = 0; //@line 19122
 HEAP8[$50 + 3 >> 0] = 0; //@line 19124
 HEAP8[$50 + 4 >> 0] = 0; //@line 19126
 HEAP8[$50 + 5 >> 0] = 0; //@line 19128
 HEAP8[$50 + 6 >> 0] = 0; //@line 19130
 HEAP8[$50 + 7 >> 0] = 0; //@line 19132
 HEAP8[$50 + 8 >> 0] = 0; //@line 19134
 HEAP8[$50 + 9 >> 0] = 0; //@line 19136
 HEAP8[$50 + 10 >> 0] = 0; //@line 19138
 HEAP8[$50 + 11 >> 0] = 0; //@line 19140
 HEAP8[$50 + 12 >> 0] = 0; //@line 19142
 HEAP8[$50 + 13 >> 0] = 0; //@line 19144
 HEAP8[$50 + 14 >> 0] = 0; //@line 19146
 HEAP8[$50 + 15 >> 0] = 0; //@line 19147
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 19149
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_411($0) {
 $0 = $0 | 0;
 var $$sroa$0$0$copyload = 0, $12 = 0, $15 = 0, $17 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 21724
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21726
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21728
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21730
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21732
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21736
 $15 = $2 + 356 | 0; //@line 21739
 $17 = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[$15 >> 2] | 0) | 0; //@line 21741
 $$sroa$0$0$copyload = HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) >> 2] | 0; //@line 21744
 $20 = $2 + 360 | 0; //@line 21745
 if ((HEAP32[$20 >> 2] | 0) == 2) {
  _printf(12943, $8) | 0; //@line 21749
  _printf(12970, $12) | 0; //@line 21750
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 21751
  _putchar(10) | 0; //@line 21752
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 346; //@line 21755
   $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 21756
   HEAP32[$31 >> 2] = $4; //@line 21757
   $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 21758
   HEAP32[$32 >> 2] = $2; //@line 21759
   $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 21760
   HEAP32[$33 >> 2] = $17; //@line 21761
   $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 21762
   HEAP32[$34 >> 2] = $15; //@line 21763
   $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 21764
   HEAP32[$35 >> 2] = $20; //@line 21765
   $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 21766
   HEAP32[$36 >> 2] = $$sroa$0$0$copyload; //@line 21767
   $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 21768
   HEAP32[$37 >> 2] = $4; //@line 21769
   $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 21770
   HEAP32[$38 >> 2] = $6; //@line 21771
   $39 = $ReallocAsyncCtx2 + 36 | 0; //@line 21772
   HEAP32[$39 >> 2] = $6; //@line 21773
   sp = STACKTOP; //@line 21774
   return;
  }
  ___async_unwind = 0; //@line 21777
  HEAP32[$ReallocAsyncCtx2 >> 2] = 346; //@line 21778
  $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 21779
  HEAP32[$31 >> 2] = $4; //@line 21780
  $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 21781
  HEAP32[$32 >> 2] = $2; //@line 21782
  $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 21783
  HEAP32[$33 >> 2] = $17; //@line 21784
  $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 21785
  HEAP32[$34 >> 2] = $15; //@line 21786
  $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 21787
  HEAP32[$35 >> 2] = $20; //@line 21788
  $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 21789
  HEAP32[$36 >> 2] = $$sroa$0$0$copyload; //@line 21790
  $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 21791
  HEAP32[$37 >> 2] = $4; //@line 21792
  $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 21793
  HEAP32[$38 >> 2] = $6; //@line 21794
  $39 = $ReallocAsyncCtx2 + 36 | 0; //@line 21795
  HEAP32[$39 >> 2] = $6; //@line 21796
  sp = STACKTOP; //@line 21797
  return;
 } else {
  $23 = HEAP32[$2 >> 2] | 0; //@line 21800
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(32) | 0; //@line 21801
  __ZN7LoRaPHY18put_radio_to_sleepEv($23); //@line 21802
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 345; //@line 21805
   $24 = $ReallocAsyncCtx8 + 4 | 0; //@line 21806
   HEAP32[$24 >> 2] = $4; //@line 21807
   $25 = $ReallocAsyncCtx8 + 8 | 0; //@line 21808
   HEAP32[$25 >> 2] = $2; //@line 21809
   $26 = $ReallocAsyncCtx8 + 12 | 0; //@line 21810
   HEAP32[$26 >> 2] = $17; //@line 21811
   $27 = $ReallocAsyncCtx8 + 16 | 0; //@line 21812
   HEAP32[$27 >> 2] = $20; //@line 21813
   $28 = $ReallocAsyncCtx8 + 20 | 0; //@line 21814
   HEAP32[$28 >> 2] = $15; //@line 21815
   $29 = $ReallocAsyncCtx8 + 24 | 0; //@line 21816
   HEAP32[$29 >> 2] = $$sroa$0$0$copyload; //@line 21817
   $30 = $ReallocAsyncCtx8 + 28 | 0; //@line 21818
   HEAP32[$30 >> 2] = $4; //@line 21819
   sp = STACKTOP; //@line 21820
   return;
  }
  ___async_unwind = 0; //@line 21823
  HEAP32[$ReallocAsyncCtx8 >> 2] = 345; //@line 21824
  $24 = $ReallocAsyncCtx8 + 4 | 0; //@line 21825
  HEAP32[$24 >> 2] = $4; //@line 21826
  $25 = $ReallocAsyncCtx8 + 8 | 0; //@line 21827
  HEAP32[$25 >> 2] = $2; //@line 21828
  $26 = $ReallocAsyncCtx8 + 12 | 0; //@line 21829
  HEAP32[$26 >> 2] = $17; //@line 21830
  $27 = $ReallocAsyncCtx8 + 16 | 0; //@line 21831
  HEAP32[$27 >> 2] = $20; //@line 21832
  $28 = $ReallocAsyncCtx8 + 20 | 0; //@line 21833
  HEAP32[$28 >> 2] = $15; //@line 21834
  $29 = $ReallocAsyncCtx8 + 24 | 0; //@line 21835
  HEAP32[$29 >> 2] = $$sroa$0$0$copyload; //@line 21836
  $30 = $ReallocAsyncCtx8 + 28 | 0; //@line 21837
  HEAP32[$30 >> 2] = $4; //@line 21838
  sp = STACKTOP; //@line 21839
  return;
 }
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_294($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $2 = 0, $24 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 3911
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3913
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3915
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3917
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3919
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3921
 HEAP32[$2 + 364 >> 2] = 0; //@line 3923
 $14 = $2 + 1160 | 0; //@line 3926
 HEAP8[$14 >> 0] = HEAP8[$2 + 378 >> 0] | 0; //@line 3927
 HEAP8[$2 + 1163 >> 0] = HEAP8[$2 + 1129 >> 0] | 0; //@line 3931
 HEAP8[$2 + 1176 >> 0] = HEAP8[$2 + 1141 >> 0] | 0; //@line 3935
 HEAP8[$2 + 1177 >> 0] = HEAP8[$2 + 369 >> 0] | 0; //@line 3939
 $24 = $2 + 1178 | 0; //@line 3940
 HEAP8[$24 >> 0] = 0; //@line 3941
 HEAP32[$2 + 1180 >> 2] = 0; //@line 3943
 if ((HEAP32[$2 + 360 >> 2] | 0) == 2) {
  $29 = HEAP32[$2 >> 2] | 0; //@line 3948
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 3949
  __ZN7LoRaPHY20put_radio_to_standbyEv($29); //@line 3950
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 499; //@line 3953
   $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 3954
   HEAP32[$30 >> 2] = $2; //@line 3955
   $31 = $ReallocAsyncCtx5 + 8 | 0; //@line 3956
   HEAP32[$31 >> 2] = $2; //@line 3957
   $32 = $ReallocAsyncCtx5 + 12 | 0; //@line 3958
   HEAP32[$32 >> 2] = $14; //@line 3959
   $33 = $ReallocAsyncCtx5 + 16 | 0; //@line 3960
   HEAP32[$33 >> 2] = $24; //@line 3961
   $34 = $ReallocAsyncCtx5 + 20 | 0; //@line 3962
   HEAP32[$34 >> 2] = $4; //@line 3963
   $35 = $ReallocAsyncCtx5 + 24 | 0; //@line 3964
   HEAP32[$35 >> 2] = $6; //@line 3965
   $36 = $ReallocAsyncCtx5 + 28 | 0; //@line 3966
   HEAP32[$36 >> 2] = $8; //@line 3967
   $37 = $ReallocAsyncCtx5 + 32 | 0; //@line 3968
   HEAP32[$37 >> 2] = $10; //@line 3969
   sp = STACKTOP; //@line 3970
   return;
  }
  ___async_unwind = 0; //@line 3973
  HEAP32[$ReallocAsyncCtx5 >> 2] = 499; //@line 3974
  $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 3975
  HEAP32[$30 >> 2] = $2; //@line 3976
  $31 = $ReallocAsyncCtx5 + 8 | 0; //@line 3977
  HEAP32[$31 >> 2] = $2; //@line 3978
  $32 = $ReallocAsyncCtx5 + 12 | 0; //@line 3979
  HEAP32[$32 >> 2] = $14; //@line 3980
  $33 = $ReallocAsyncCtx5 + 16 | 0; //@line 3981
  HEAP32[$33 >> 2] = $24; //@line 3982
  $34 = $ReallocAsyncCtx5 + 20 | 0; //@line 3983
  HEAP32[$34 >> 2] = $4; //@line 3984
  $35 = $ReallocAsyncCtx5 + 24 | 0; //@line 3985
  HEAP32[$35 >> 2] = $6; //@line 3986
  $36 = $ReallocAsyncCtx5 + 28 | 0; //@line 3987
  HEAP32[$36 >> 2] = $8; //@line 3988
  $37 = $ReallocAsyncCtx5 + 32 | 0; //@line 3989
  HEAP32[$37 >> 2] = $10; //@line 3990
  sp = STACKTOP; //@line 3991
  return;
 } else {
  $38 = HEAP32[$2 >> 2] | 0; //@line 3994
  $41 = HEAP32[(HEAP32[$38 >> 2] | 0) + 24 >> 2] | 0; //@line 3997
  $44 = (__ZN11LoRaMacMcps14get_indicationEv($2 + 288 | 0) | 0) + 10 | 0; //@line 4000
  $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 4001
  FUNCTION_TABLE_iiii[$41 & 15]($38, $14, $44) | 0; //@line 4002
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 500; //@line 4005
   $45 = $ReallocAsyncCtx + 4 | 0; //@line 4006
   HEAP32[$45 >> 2] = $24; //@line 4007
   $46 = $ReallocAsyncCtx + 8 | 0; //@line 4008
   HEAP32[$46 >> 2] = $2; //@line 4009
   $47 = $ReallocAsyncCtx + 12 | 0; //@line 4010
   HEAP32[$47 >> 2] = $4; //@line 4011
   $48 = $ReallocAsyncCtx + 16 | 0; //@line 4012
   HEAP32[$48 >> 2] = $6; //@line 4013
   $49 = $ReallocAsyncCtx + 20 | 0; //@line 4014
   HEAP32[$49 >> 2] = $8; //@line 4015
   $50 = $ReallocAsyncCtx + 24 | 0; //@line 4016
   HEAP32[$50 >> 2] = $10; //@line 4017
   $51 = $ReallocAsyncCtx + 28 | 0; //@line 4018
   HEAP32[$51 >> 2] = $2; //@line 4019
   sp = STACKTOP; //@line 4020
   return;
  }
  ___async_unwind = 0; //@line 4023
  HEAP32[$ReallocAsyncCtx >> 2] = 500; //@line 4024
  $45 = $ReallocAsyncCtx + 4 | 0; //@line 4025
  HEAP32[$45 >> 2] = $24; //@line 4026
  $46 = $ReallocAsyncCtx + 8 | 0; //@line 4027
  HEAP32[$46 >> 2] = $2; //@line 4028
  $47 = $ReallocAsyncCtx + 12 | 0; //@line 4029
  HEAP32[$47 >> 2] = $4; //@line 4030
  $48 = $ReallocAsyncCtx + 16 | 0; //@line 4031
  HEAP32[$48 >> 2] = $6; //@line 4032
  $49 = $ReallocAsyncCtx + 20 | 0; //@line 4033
  HEAP32[$49 >> 2] = $8; //@line 4034
  $50 = $ReallocAsyncCtx + 24 | 0; //@line 4035
  HEAP32[$50 >> 2] = $10; //@line 4036
  $51 = $ReallocAsyncCtx + 28 | 0; //@line 4037
  HEAP32[$51 >> 2] = $2; //@line 4038
  sp = STACKTOP; //@line 4039
  return;
 }
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_329($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $23 = 0, $26 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $45 = 0, $48 = 0, $52 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 6171
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6177
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6179
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 6181
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6183
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6185
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6187
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 6189
 if ((HEAP8[$0 + 4 >> 0] | 0) == 7) {
  if (HEAP8[(HEAP32[$0 + 8 >> 2] | 0) + 14 >> 0] | 0) {
   $23 = HEAP32[$6 >> 2] | 0; //@line 6196
   $26 = HEAP32[(HEAP32[$23 >> 2] | 0) + 16 >> 2] | 0; //@line 6199
   $31 = HEAP32[$8 + 8 >> 2] & 65535; //@line 6204
   $34 = (HEAP8[$8 + 18 >> 0] | 0) != 0; //@line 6207
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 6208
   FUNCTION_TABLE_viiiiiiiiiiiiiii[$26 & 1]($23, 0, 5e4, ($10 & 255) * 1e3 | 0, 0, 83333, 5, $31, 0, 0, 1, 0, 0, 0, $34); //@line 6209
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 608; //@line 6212
    $35 = $ReallocAsyncCtx6 + 4 | 0; //@line 6213
    HEAP32[$35 >> 2] = $8; //@line 6214
    $36 = $ReallocAsyncCtx6 + 8 | 0; //@line 6215
    HEAP32[$36 >> 2] = $12; //@line 6216
    $37 = $ReallocAsyncCtx6 + 12 | 0; //@line 6217
    HEAP32[$37 >> 2] = $14; //@line 6218
    $38 = $ReallocAsyncCtx6 + 16 | 0; //@line 6219
    HEAP32[$38 >> 2] = $16; //@line 6220
    $39 = $ReallocAsyncCtx6 + 20 | 0; //@line 6221
    HEAP32[$39 >> 2] = $6; //@line 6222
    $40 = $ReallocAsyncCtx6 + 24 | 0; //@line 6223
    HEAP8[$40 >> 0] = $10; //@line 6224
    $41 = $ReallocAsyncCtx6 + 28 | 0; //@line 6225
    HEAP32[$41 >> 2] = $18; //@line 6226
    sp = STACKTOP; //@line 6227
    return;
   }
   ___async_unwind = 0; //@line 6230
   HEAP32[$ReallocAsyncCtx6 >> 2] = 608; //@line 6231
   $35 = $ReallocAsyncCtx6 + 4 | 0; //@line 6232
   HEAP32[$35 >> 2] = $8; //@line 6233
   $36 = $ReallocAsyncCtx6 + 8 | 0; //@line 6234
   HEAP32[$36 >> 2] = $12; //@line 6235
   $37 = $ReallocAsyncCtx6 + 12 | 0; //@line 6236
   HEAP32[$37 >> 2] = $14; //@line 6237
   $38 = $ReallocAsyncCtx6 + 16 | 0; //@line 6238
   HEAP32[$38 >> 2] = $16; //@line 6239
   $39 = $ReallocAsyncCtx6 + 20 | 0; //@line 6240
   HEAP32[$39 >> 2] = $6; //@line 6241
   $40 = $ReallocAsyncCtx6 + 24 | 0; //@line 6242
   HEAP8[$40 >> 0] = $10; //@line 6243
   $41 = $ReallocAsyncCtx6 + 28 | 0; //@line 6244
   HEAP32[$41 >> 2] = $18; //@line 6245
   sp = STACKTOP; //@line 6246
   return;
  }
 }
 $42 = HEAP32[$6 >> 2] | 0; //@line 6250
 $45 = HEAP32[(HEAP32[$42 >> 2] | 0) + 16 >> 2] | 0; //@line 6253
 $48 = HEAPU8[$8 + 2 >> 0] | 0; //@line 6256
 $52 = HEAP32[$8 + 8 >> 2] & 65535; //@line 6260
 $55 = (HEAP8[$8 + 18 >> 0] | 0) != 0; //@line 6263
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 6264
 FUNCTION_TABLE_viiiiiiiiiiiiiii[$45 & 1]($42, 1, $48, $10 & 255, 1, 0, 8, $52, 0, 0, 0, 0, 0, 1, $55); //@line 6265
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 609; //@line 6268
  $56 = $ReallocAsyncCtx7 + 4 | 0; //@line 6269
  HEAP32[$56 >> 2] = $8; //@line 6270
  $57 = $ReallocAsyncCtx7 + 8 | 0; //@line 6271
  HEAP32[$57 >> 2] = $12; //@line 6272
  $58 = $ReallocAsyncCtx7 + 12 | 0; //@line 6273
  HEAP32[$58 >> 2] = $14; //@line 6274
  $59 = $ReallocAsyncCtx7 + 16 | 0; //@line 6275
  HEAP32[$59 >> 2] = $16; //@line 6276
  $60 = $ReallocAsyncCtx7 + 20 | 0; //@line 6277
  HEAP32[$60 >> 2] = $6; //@line 6278
  $61 = $ReallocAsyncCtx7 + 24 | 0; //@line 6279
  HEAP8[$61 >> 0] = $10; //@line 6280
  $62 = $ReallocAsyncCtx7 + 28 | 0; //@line 6281
  HEAP32[$62 >> 2] = $18; //@line 6282
  sp = STACKTOP; //@line 6283
  return;
 }
 ___async_unwind = 0; //@line 6286
 HEAP32[$ReallocAsyncCtx7 >> 2] = 609; //@line 6287
 $56 = $ReallocAsyncCtx7 + 4 | 0; //@line 6288
 HEAP32[$56 >> 2] = $8; //@line 6289
 $57 = $ReallocAsyncCtx7 + 8 | 0; //@line 6290
 HEAP32[$57 >> 2] = $12; //@line 6291
 $58 = $ReallocAsyncCtx7 + 12 | 0; //@line 6292
 HEAP32[$58 >> 2] = $14; //@line 6293
 $59 = $ReallocAsyncCtx7 + 16 | 0; //@line 6294
 HEAP32[$59 >> 2] = $16; //@line 6295
 $60 = $ReallocAsyncCtx7 + 20 | 0; //@line 6296
 HEAP32[$60 >> 2] = $6; //@line 6297
 $61 = $ReallocAsyncCtx7 + 24 | 0; //@line 6298
 HEAP8[$61 >> 0] = $10; //@line 6299
 $62 = $ReallocAsyncCtx7 + 28 | 0; //@line 6300
 HEAP32[$62 >> 2] = $18; //@line 6301
 sp = STACKTOP; //@line 6302
 return;
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv($0) {
 $0 = $0 | 0;
 var $16 = 0, $30 = 0, $31 = 0, $34 = 0, $37 = 0, $38 = 0, $47 = 0, $49 = 0, $54 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx19 = 0, $AsyncCtx9 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 10970
 STACKTOP = STACKTOP + 32 | 0; //@line 10971
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10971
 $vararg_buffer5 = sp + 24 | 0; //@line 10972
 $vararg_buffer3 = sp + 16 | 0; //@line 10973
 _printf(12943, sp) | 0; //@line 10976
 _printf(12993, sp + 8 | 0) | 0; //@line 10977
 $AsyncCtx13 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10978
 _putchar(10) | 0; //@line 10979
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 364; //@line 10982
  HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 10984
  HEAP32[$AsyncCtx13 + 8 >> 2] = $vararg_buffer3; //@line 10986
  HEAP32[$AsyncCtx13 + 12 >> 2] = $vararg_buffer3; //@line 10988
  HEAP32[$AsyncCtx13 + 16 >> 2] = $vararg_buffer5; //@line 10990
  HEAP32[$AsyncCtx13 + 20 >> 2] = $vararg_buffer5; //@line 10992
  sp = STACKTOP; //@line 10993
  STACKTOP = sp; //@line 10994
  return;
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 10996
 $7 = HEAP32[$0 + 356 >> 2] | 0; //@line 10998
 $AsyncCtx19 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11000
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($7, $0 + 1056 | 0); //@line 11001
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 365; //@line 11004
  HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 11006
  HEAP32[$AsyncCtx19 + 8 >> 2] = $vararg_buffer3; //@line 11008
  HEAP32[$AsyncCtx19 + 12 >> 2] = $vararg_buffer3; //@line 11010
  HEAP32[$AsyncCtx19 + 16 >> 2] = $vararg_buffer5; //@line 11012
  HEAP32[$AsyncCtx19 + 20 >> 2] = $vararg_buffer5; //@line 11014
  sp = STACKTOP; //@line 11015
  STACKTOP = sp; //@line 11016
  return;
 }
 _emscripten_free_async_context($AsyncCtx19 | 0); //@line 11018
 $16 = $0 + 1184 | 0; //@line 11021
 HEAP8[$16 >> 0] = HEAP8[$0 + 378 >> 0] | 0; //@line 11022
 HEAP32[$0 + 1188 >> 2] = HEAP32[$0 + 1132 >> 2]; //@line 11026
 HEAP8[$0 + 1200 >> 0] = HEAP8[$0 + 1141 >> 0] | 0; //@line 11030
 HEAP8[$0 + 1201 >> 0] = HEAP8[$0 + 369 >> 0] | 0; //@line 11034
 HEAP32[$0 + 1204 >> 2] = 1; //@line 11036
 $30 = $0 + 1202 | 0; //@line 11040
 HEAP8[$30 >> 0] = (HEAP32[$0 + 360 >> 2] | 0) == 2 & 1; //@line 11042
 $31 = HEAP32[$0 >> 2] | 0; //@line 11043
 $34 = HEAP32[(HEAP32[$31 >> 2] | 0) + 24 >> 2] | 0; //@line 11046
 $37 = (__ZN11LoRaMacMcps14get_indicationEv($0 + 288 | 0) | 0) + 10 | 0; //@line 11049
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 11050
 $38 = FUNCTION_TABLE_iiii[$34 & 15]($31, $16, $37) | 0; //@line 11051
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 366; //@line 11054
  HEAP32[$AsyncCtx + 4 >> 2] = $30; //@line 11056
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 11058
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer3; //@line 11060
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 11062
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer5; //@line 11064
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer5; //@line 11066
  HEAP32[$AsyncCtx + 28 >> 2] = $0; //@line 11068
  sp = STACKTOP; //@line 11069
  STACKTOP = sp; //@line 11070
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11072
 if (!$38) {
  STACKTOP = sp; //@line 11074
  return;
 }
 $47 = (HEAP8[$30 >> 0] | 0) != 0; //@line 11077
 $49 = HEAP32[$0 + 1108 >> 2] | 0; //@line 11079
 _printf(12943, $vararg_buffer3) | 0; //@line 11080
 _printf(13019, $vararg_buffer5) | 0; //@line 11081
 $AsyncCtx9 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11082
 _putchar(10) | 0; //@line 11083
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 367; //@line 11086
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 11088
  HEAP8[$AsyncCtx9 + 8 >> 0] = $47 & 1; //@line 11091
  HEAP32[$AsyncCtx9 + 12 >> 2] = $49; //@line 11093
  HEAP32[$AsyncCtx9 + 16 >> 2] = $0; //@line 11095
  sp = STACKTOP; //@line 11096
  STACKTOP = sp; //@line 11097
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 11099
 $54 = HEAP32[$0 >> 2] | 0; //@line 11100
 $AsyncCtx16 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11101
 __ZN7LoRaPHY15setup_rx_windowEbj($54, $47, $49); //@line 11102
 if (___async) {
  HEAP32[$AsyncCtx16 >> 2] = 368; //@line 11105
  HEAP32[$AsyncCtx16 + 4 >> 2] = $0; //@line 11107
  sp = STACKTOP; //@line 11108
  STACKTOP = sp; //@line 11109
  return;
 }
 _emscripten_free_async_context($AsyncCtx16 | 0); //@line 11111
 HEAP32[$0 + 364 >> 2] = 1; //@line 11113
 STACKTOP = sp; //@line 11114
 return;
}
function __ZN14LoRaMacCommand15add_mac_commandEhhh($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $15 = 0, $25 = 0, $26 = 0, $32 = 0, $33 = 0, $34 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $72 = 0, $73 = 0, $80 = 0, $81 = 0, $87 = 0, $88 = 0;
 $5 = HEAP8[$0 + 3 >> 0] | 0; //@line 19565
 L1 : do {
  switch ($1 << 24 >> 24) {
  case 2:
   {
    $6 = $0 + 2 | 0; //@line 19569
    $7 = HEAP8[$6 >> 0] | 0; //@line 19570
    if (($7 & 255) < (-128 - $5 & 255)) {
     HEAP8[$6 >> 0] = $7 + 1 << 24 >> 24; //@line 19577
     HEAP8[($7 & 255) + ($0 + 4) >> 0] = 2; //@line 19578
     break L1;
    } else {
     $$0 = -1e3; //@line 19581
     return $$0 | 0; //@line 19582
    }
    break;
   }
  case 3:
   {
    $13 = $0 + 2 | 0; //@line 19587
    $14 = HEAP8[$13 >> 0] | 0; //@line 19588
    $15 = $14 & 255; //@line 19589
    if (((-128 - $5 & 255) + -1 | 0) > ($15 | 0)) {
     HEAP8[$0 + 4 + $15 >> 0] = 3; //@line 19600
     HEAP8[$13 >> 0] = $14 + 2 << 24 >> 24; //@line 19601
     HEAP8[($14 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 19602
     break L1;
    } else {
     $$0 = -1e3; //@line 19605
     return $$0 | 0; //@line 19606
    }
    break;
   }
  case 4:
   {
    $25 = $0 + 2 | 0; //@line 19611
    $26 = HEAP8[$25 >> 0] | 0; //@line 19612
    if (($26 & 255) < (-128 - $5 & 255)) {
     HEAP8[$25 >> 0] = $26 + 1 << 24 >> 24; //@line 19619
     HEAP8[($26 & 255) + ($0 + 4) >> 0] = 4; //@line 19620
     break L1;
    } else {
     $$0 = -1e3; //@line 19623
     return $$0 | 0; //@line 19624
    }
    break;
   }
  case 5:
   {
    $32 = $0 + 2 | 0; //@line 19629
    $33 = HEAP8[$32 >> 0] | 0; //@line 19630
    $34 = $33 & 255; //@line 19631
    if (((-128 - $5 & 255) + -1 | 0) > ($34 | 0)) {
     HEAP8[$0 + 4 + $34 >> 0] = 5; //@line 19639
     HEAP8[$32 >> 0] = $33 + 2 << 24 >> 24; //@line 19641
     HEAP8[($33 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 19644
     HEAP8[$0 + 1 >> 0] = 1; //@line 19646
     break L1;
    } else {
     $$0 = -1e3; //@line 19649
     return $$0 | 0; //@line 19650
    }
    break;
   }
  case 6:
   {
    $45 = $0 + 2 | 0; //@line 19655
    $46 = HEAP8[$45 >> 0] | 0; //@line 19656
    $47 = $46 & 255; //@line 19657
    if (((-128 - $5 & 255) + -2 | 0) > ($47 | 0)) {
     HEAP8[$0 + 4 + $47 >> 0] = 6; //@line 19665
     HEAP8[($46 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 19669
     HEAP8[$45 >> 0] = $46 + 3 << 24 >> 24; //@line 19671
     HEAP8[($46 + 2 & 255) + ($0 + 4) >> 0] = $3; //@line 19674
     break L1;
    } else {
     $$0 = -1e3; //@line 19677
     return $$0 | 0; //@line 19678
    }
    break;
   }
  case 7:
   {
    $60 = $0 + 2 | 0; //@line 19683
    $61 = HEAP8[$60 >> 0] | 0; //@line 19684
    $62 = $61 & 255; //@line 19685
    if (((-128 - $5 & 255) + -1 | 0) > ($62 | 0)) {
     HEAP8[$0 + 4 + $62 >> 0] = 7; //@line 19696
     HEAP8[$60 >> 0] = $61 + 2 << 24 >> 24; //@line 19697
     HEAP8[($61 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 19698
     break L1;
    } else {
     $$0 = -1e3; //@line 19701
     return $$0 | 0; //@line 19702
    }
    break;
   }
  case 8:
   {
    $72 = $0 + 2 | 0; //@line 19707
    $73 = HEAP8[$72 >> 0] | 0; //@line 19708
    if (($73 & 255) < (-128 - $5 & 255)) {
     HEAP8[$72 >> 0] = $73 + 1 << 24 >> 24; //@line 19716
     HEAP8[($73 & 255) + ($0 + 4) >> 0] = 8; //@line 19717
     HEAP8[$0 + 1 >> 0] = 1; //@line 19718
     break L1;
    } else {
     $$0 = -1e3; //@line 19721
     return $$0 | 0; //@line 19722
    }
    break;
   }
  case 9:
   {
    $80 = $0 + 2 | 0; //@line 19727
    $81 = HEAP8[$80 >> 0] | 0; //@line 19728
    if (($81 & 255) < (-128 - $5 & 255)) {
     HEAP8[$80 >> 0] = $81 + 1 << 24 >> 24; //@line 19735
     HEAP8[($81 & 255) + ($0 + 4) >> 0] = 9; //@line 19736
     break L1;
    } else {
     $$0 = -1e3; //@line 19739
     return $$0 | 0; //@line 19740
    }
    break;
   }
  case 10:
   {
    $87 = $0 + 2 | 0; //@line 19745
    $88 = HEAP8[$87 >> 0] | 0; //@line 19746
    if (($88 & 255) < (-128 - $5 & 255)) {
     HEAP8[($88 & 255) + ($0 + 4) >> 0] = 10; //@line 19753
     HEAP8[$87 >> 0] = $88 + 2 << 24 >> 24; //@line 19755
     HEAP8[($88 + 1 & 255) + ($0 + 4) >> 0] = $2; //@line 19758
     HEAP8[$0 + 1 >> 0] = 1; //@line 19760
     break L1;
    } else {
     $$0 = -1e3; //@line 19763
     return $$0 | 0; //@line 19764
    }
    break;
   }
  default:
   {
    $$0 = -1002; //@line 19769
    return $$0 | 0; //@line 19770
   }
  }
 } while (0);
 HEAP8[$0 >> 0] = 1; //@line 19774
 $$0 = 0; //@line 19775
 return $$0 | 0; //@line 19776
}
function _equeue_cancel($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$sink$in$i$i = 0, $$sink$in$in$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $24 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $42 = 0, $44 = 0, $46 = 0, $49 = 0, $5 = 0, $56 = 0, $57 = 0, $59 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $72 = 0, $73 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4656
 if (!$1) {
  return;
 }
 $5 = $0 + 16 | 0; //@line 4663
 $10 = (HEAP32[$0 + 12 >> 2] | 0) + ((1 << HEAP32[$5 >> 2]) + -1 & $1) | 0; //@line 4668
 $11 = $0 + 128 | 0; //@line 4669
 _equeue_mutex_lock($11); //@line 4670
 $12 = $10 + 4 | 0; //@line 4671
 $13 = HEAP8[$12 >> 0] | 0; //@line 4672
 $14 = $13 & 255; //@line 4673
 $15 = HEAP32[$5 >> 2] | 0; //@line 4674
 if (($1 >> $15 | 0) != ($14 | 0)) {
  _equeue_mutex_unlock($11); //@line 4678
  return;
 }
 HEAP32[$10 + 32 >> 2] = 0; //@line 4682
 HEAP32[$10 + 24 >> 2] = -1; //@line 4684
 $24 = (HEAP32[$10 + 20 >> 2] | 0) - (HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 4689
 do {
  if (($24 | 0) >= 0) {
   if (!$24) {
    if ((HEAP8[$10 + 5 >> 0] | 0) != (HEAP8[$0 + 9 >> 0] | 0)) {
     break;
    }
   }
   $32 = $10 + 12 | 0; //@line 4704
   $33 = HEAP32[$32 >> 2] | 0; //@line 4705
   $35 = $10 + 8 | 0; //@line 4707
   $36 = HEAP32[$35 >> 2] | 0; //@line 4708
   $37 = $33; //@line 4709
   if (!$33) {
    $44 = $10 + 16 | 0; //@line 4711
    HEAP32[HEAP32[$44 >> 2] >> 2] = $36; //@line 4713
    $46 = HEAP32[$35 >> 2] | 0; //@line 4714
    if ($46 | 0) {
     $$sink$in$in$i = $44; //@line 4717
     $49 = $46; //@line 4717
     label = 13; //@line 4718
    }
   } else {
    $38 = $33 + 8 | 0; //@line 4721
    HEAP32[$38 >> 2] = $36; //@line 4722
    if ($36 | 0) {
     HEAP32[$36 + 16 >> 2] = $38; //@line 4727
    }
    $42 = $10 + 16 | 0; //@line 4729
    HEAP32[HEAP32[$42 >> 2] >> 2] = $37; //@line 4731
    $$sink$in$in$i = $42; //@line 4733
    $49 = HEAP32[$32 >> 2] | 0; //@line 4733
    label = 13; //@line 4734
   }
   if ((label | 0) == 13) {
    HEAP32[$49 + 16 >> 2] = HEAP32[$$sink$in$in$i >> 2]; //@line 4739
   }
   HEAP8[$12 >> 0] = (($13 + 1 & 255) << $15 | 0) == 0 ? 1 : $14 + 1 & 255; //@line 4748
   _equeue_mutex_unlock($11); //@line 4749
   $56 = $10 + 36 | 0; //@line 4750
   $57 = $56 + -36 | 0; //@line 4751
   $59 = HEAP32[$56 + -8 >> 2] | 0; //@line 4753
   do {
    if ($59 | 0) {
     $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 4757
     FUNCTION_TABLE_vi[$59 & 1023]($56); //@line 4758
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 170; //@line 4761
      HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4763
      HEAP32[$AsyncCtx + 8 >> 2] = $56; //@line 4765
      HEAP32[$AsyncCtx + 12 >> 2] = $57; //@line 4767
      sp = STACKTOP; //@line 4768
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 4771
      break;
     }
    }
   } while (0);
   $64 = $0 + 156 | 0; //@line 4776
   _equeue_mutex_lock($64); //@line 4777
   $65 = $0 + 24 | 0; //@line 4778
   $66 = HEAP32[$65 >> 2] | 0; //@line 4779
   L28 : do {
    if (!$66) {
     $$02329$i$i = $65; //@line 4783
     label = 24; //@line 4784
    } else {
     $68 = HEAP32[$57 >> 2] | 0; //@line 4786
     $$025$i$i = $65; //@line 4787
     $70 = $66; //@line 4787
     while (1) {
      $69 = HEAP32[$70 >> 2] | 0; //@line 4789
      if ($69 >>> 0 >= $68 >>> 0) {
       break;
      }
      $72 = $70 + 8 | 0; //@line 4794
      $73 = HEAP32[$72 >> 2] | 0; //@line 4795
      if (!$73) {
       $$02329$i$i = $72; //@line 4798
       label = 24; //@line 4799
       break L28;
      } else {
       $$025$i$i = $72; //@line 4802
       $70 = $73; //@line 4802
      }
     }
     if (($69 | 0) == ($68 | 0)) {
      HEAP32[$56 + -24 >> 2] = $70; //@line 4808
      $$02330$i$i = $$025$i$i; //@line 4811
      $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 4811
     } else {
      $$02329$i$i = $$025$i$i; //@line 4813
      label = 24; //@line 4814
     }
    }
   } while (0);
   if ((label | 0) == 24) {
    HEAP32[$56 + -24 >> 2] = 0; //@line 4820
    $$02330$i$i = $$02329$i$i; //@line 4821
    $$sink$in$i$i = $$02329$i$i; //@line 4821
   }
   HEAP32[$56 + -28 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 4825
   HEAP32[$$02330$i$i >> 2] = $57; //@line 4826
   _equeue_mutex_unlock($64); //@line 4827
   return;
  }
 } while (0);
 _equeue_mutex_unlock($11); //@line 4831
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $22 = 0, $3 = 0, $31 = 0, $32 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $43 = 0, $5 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 26246
 STACKTOP = STACKTOP + 16 | 0; //@line 26247
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 26247
 $3 = sp; //@line 26248
 $4 = HEAP32[$0 >> 2] | 0; //@line 26249
 $5 = $1 + 12 | 0; //@line 26250
 $6 = HEAP32[$5 >> 2] | 0; //@line 26251
 do {
  if (!$6) {
   $16 = 0; //@line 26255
  } else {
   $9 = HEAP32[$6 + 4 >> 2] | 0; //@line 26258
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 26259
   FUNCTION_TABLE_vii[$9 & 31]($3, $1); //@line 26260
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 648; //@line 26263
    HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 26265
    HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 26267
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 26269
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 26271
    HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 26273
    sp = STACKTOP; //@line 26274
    STACKTOP = sp; //@line 26275
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 26277
    $16 = HEAP32[$5 >> 2] | 0; //@line 26279
    break;
   }
  }
 } while (0);
 $15 = $3 + 12 | 0; //@line 26284
 HEAP32[$15 >> 2] = $16; //@line 26285
 $17 = _equeue_alloc($4, 16) | 0; //@line 26286
 do {
  if (!$17) {
   $$0$i = 0; //@line 26290
  } else {
   $19 = HEAP32[$15 >> 2] | 0; //@line 26292
   do {
    if (!$19) {
     $31 = 0; //@line 26296
    } else {
     $22 = HEAP32[$19 + 4 >> 2] | 0; //@line 26299
     $AsyncCtx2 = _emscripten_alloc_async_context(32, sp) | 0; //@line 26300
     FUNCTION_TABLE_vii[$22 & 31]($17, $3); //@line 26301
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 649; //@line 26304
      HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 26306
      HEAP32[$AsyncCtx2 + 8 >> 2] = $17; //@line 26308
      HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 26310
      HEAP32[$AsyncCtx2 + 16 >> 2] = $4; //@line 26312
      HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 26314
      HEAP32[$AsyncCtx2 + 24 >> 2] = $15; //@line 26316
      HEAP32[$AsyncCtx2 + 28 >> 2] = $3; //@line 26318
      sp = STACKTOP; //@line 26319
      STACKTOP = sp; //@line 26320
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 26322
      $31 = HEAP32[$15 >> 2] | 0; //@line 26324
      break;
     }
    }
   } while (0);
   HEAP32[$17 + 12 >> 2] = $31; //@line 26330
   _equeue_event_delay($17, $2); //@line 26331
   _equeue_event_dtor($17, 356); //@line 26332
   $AsyncCtx9 = _emscripten_alloc_async_context(16, sp) | 0; //@line 26333
   $32 = _equeue_post($4, 357, $17) | 0; //@line 26334
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 650; //@line 26337
    HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 26339
    HEAP32[$AsyncCtx9 + 8 >> 2] = $15; //@line 26341
    HEAP32[$AsyncCtx9 + 12 >> 2] = $3; //@line 26343
    sp = STACKTOP; //@line 26344
    STACKTOP = sp; //@line 26345
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 26347
    $$0$i = $32; //@line 26348
    break;
   }
  }
 } while (0);
 $36 = $1 + 16 | 0; //@line 26353
 HEAP32[$36 >> 2] = $$0$i; //@line 26354
 $37 = HEAP32[$15 >> 2] | 0; //@line 26355
 do {
  if (!$37) {
   $43 = $$0$i; //@line 26359
  } else {
   $40 = HEAP32[$37 + 8 >> 2] | 0; //@line 26362
   $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 26363
   FUNCTION_TABLE_vi[$40 & 1023]($3); //@line 26364
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 651; //@line 26367
    HEAP32[$AsyncCtx6 + 4 >> 2] = $36; //@line 26369
    sp = STACKTOP; //@line 26370
    STACKTOP = sp; //@line 26371
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx6 | 0); //@line 26373
    $43 = HEAP32[$36 >> 2] | 0; //@line 26375
    break;
   }
  }
 } while (0);
 if ($43 | 0) {
  STACKTOP = sp; //@line 26382
  return;
 }
 $AsyncCtx13 = _emscripten_alloc_async_context(4, sp) | 0; //@line 26384
 _mbed_assert_internal(13710, 13728, 57); //@line 26385
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 652; //@line 26388
  sp = STACKTOP; //@line 26389
  STACKTOP = sp; //@line 26390
  return;
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 26392
 STACKTOP = sp; //@line 26393
 return;
}
function _gcm_mult($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$07475 = 0, $100 = 0, $101 = 0, $103 = 0, $109 = 0, $110 = 0, $111 = 0, $113 = 0, $116 = 0, $120 = 0, $126 = 0, $130 = 0, $134 = 0, $140 = 0, $144 = 0, $148 = 0, $15 = 0, $154 = 0, $158 = 0, $162 = 0, $22 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $46 = 0, $51 = 0, $6 = 0, $60 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $88 = 0, $92 = 0, $94 = 0;
 $4 = HEAP8[$1 + 15 >> 0] | 0; //@line 4666
 $6 = $4 & 15; //@line 4668
 $8 = $0 + 200 + ($6 << 3) | 0; //@line 4670
 $15 = $0 + 72 + ($6 << 3) | 0; //@line 4677
 $$07475 = 15; //@line 4683
 $22 = $4; //@line 4683
 $27 = HEAP32[$15 >> 2] | 0; //@line 4683
 $28 = HEAP32[$8 >> 2] | 0; //@line 4683
 $29 = HEAP32[$8 + 4 >> 2] | 0; //@line 4683
 $32 = HEAP32[$15 + 4 >> 2] | 0; //@line 4683
 while (1) {
  if (($$07475 | 0) == 15) {
   $69 = $27; //@line 4688
   $70 = $28; //@line 4688
   $71 = $29; //@line 4688
   $74 = $32; //@line 4688
  } else {
   $25 = $22 & 15; //@line 4691
   $30 = _bitshift64Shl($28 | 0, $29 | 0, 60) | 0; //@line 4693
   $31 = tempRet0; //@line 4694
   $33 = _bitshift64Lshr($27 | 0, $32 | 0, 4) | 0; //@line 4695
   $36 = tempRet0 | $31; //@line 4698
   $37 = _bitshift64Lshr($28 | 0, $29 | 0, 4) | 0; //@line 4699
   $38 = tempRet0; //@line 4700
   $40 = 208 + (($27 & 15) << 3) | 0; //@line 4702
   $46 = _bitshift64Shl(HEAP32[$40 >> 2] | 0, HEAP32[$40 + 4 >> 2] | 0, 48) | 0; //@line 4708
   $51 = $0 + 200 + ($25 << 3) | 0; //@line 4713
   $60 = $0 + 72 + ($25 << 3) | 0; //@line 4722
   $69 = HEAP32[$60 >> 2] ^ ($33 | $30); //@line 4730
   $70 = $46 ^ $37 ^ HEAP32[$51 >> 2]; //@line 4730
   $71 = tempRet0 ^ $38 ^ HEAP32[$51 + 4 >> 2]; //@line 4730
   $74 = HEAP32[$60 + 4 >> 2] ^ $36; //@line 4730
  }
  $72 = _bitshift64Shl($70 | 0, $71 | 0, 60) | 0; //@line 4733
  $73 = tempRet0; //@line 4734
  $75 = _bitshift64Lshr($69 | 0, $74 | 0, 4) | 0; //@line 4735
  $78 = tempRet0 | $73; //@line 4738
  $79 = _bitshift64Lshr($70 | 0, $71 | 0, 4) | 0; //@line 4739
  $80 = tempRet0; //@line 4740
  $82 = 208 + (($69 & 15) << 3) | 0; //@line 4742
  $88 = _bitshift64Shl(HEAP32[$82 >> 2] | 0, HEAP32[$82 + 4 >> 2] | 0, 48) | 0; //@line 4748
  $92 = ($22 & 255) >>> 4 & 255; //@line 4752
  $94 = $0 + 200 + ($92 << 3) | 0; //@line 4754
  $100 = $88 ^ $79 ^ HEAP32[$94 >> 2]; //@line 4760
  $101 = tempRet0 ^ $80 ^ HEAP32[$94 + 4 >> 2]; //@line 4761
  $103 = $0 + 72 + ($92 << 3) | 0; //@line 4763
  $109 = HEAP32[$103 >> 2] ^ ($75 | $72); //@line 4769
  $110 = HEAP32[$103 + 4 >> 2] ^ $78; //@line 4770
  $111 = $$07475 + -1 | 0; //@line 4771
  if (($$07475 | 0) <= 0) {
   break;
  }
  $$07475 = $111; //@line 4778
  $22 = HEAP8[$1 + $111 >> 0] | 0; //@line 4778
  $27 = $109; //@line 4778
  $28 = $100; //@line 4778
  $29 = $101; //@line 4778
  $32 = $110; //@line 4778
 }
 $113 = _bitshift64Lshr($100 | 0, $101 | 0, 56) | 0; //@line 4780
 HEAP8[$2 >> 0] = $113; //@line 4783
 $116 = _bitshift64Lshr($100 | 0, $101 | 0, 48) | 0; //@line 4784
 HEAP8[$2 + 1 >> 0] = $116; //@line 4788
 $120 = _bitshift64Lshr($100 | 0, $101 | 0, 40) | 0; //@line 4789
 HEAP8[$2 + 2 >> 0] = $120; //@line 4793
 HEAP8[$2 + 3 >> 0] = $101; //@line 4796
 $126 = _bitshift64Lshr($100 | 0, $101 | 0, 24) | 0; //@line 4797
 HEAP8[$2 + 4 >> 0] = $126; //@line 4801
 $130 = _bitshift64Lshr($100 | 0, $101 | 0, 16) | 0; //@line 4802
 HEAP8[$2 + 5 >> 0] = $130; //@line 4806
 $134 = _bitshift64Lshr($100 | 0, $101 | 0, 8) | 0; //@line 4807
 HEAP8[$2 + 6 >> 0] = $134; //@line 4811
 HEAP8[$2 + 7 >> 0] = $100; //@line 4814
 $140 = _bitshift64Lshr($109 | 0, $110 | 0, 56) | 0; //@line 4815
 HEAP8[$2 + 8 >> 0] = $140; //@line 4819
 $144 = _bitshift64Lshr($109 | 0, $110 | 0, 48) | 0; //@line 4820
 HEAP8[$2 + 9 >> 0] = $144; //@line 4824
 $148 = _bitshift64Lshr($109 | 0, $110 | 0, 40) | 0; //@line 4825
 HEAP8[$2 + 10 >> 0] = $148; //@line 4829
 HEAP8[$2 + 11 >> 0] = $110; //@line 4832
 $154 = _bitshift64Lshr($109 | 0, $110 | 0, 24) | 0; //@line 4833
 HEAP8[$2 + 12 >> 0] = $154; //@line 4837
 $158 = _bitshift64Lshr($109 | 0, $110 | 0, 16) | 0; //@line 4838
 HEAP8[$2 + 13 >> 0] = $158; //@line 4842
 $162 = _bitshift64Lshr($109 | 0, $110 | 0, 8) | 0; //@line 4843
 HEAP8[$2 + 14 >> 0] = $162; //@line 4847
 HEAP8[$2 + 15 >> 0] = $109; //@line 4850
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_418($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $2 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $47 = 0, $53 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 22500
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22502
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22504
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22506
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22508
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22510
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22512
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22514
 HEAP32[$4 + 364 >> 2] = 2; //@line 22518
 if (HEAP8[$4 + 371 >> 0] | 0) {
  $21 = HEAP32[$10 >> 2] | 0; //@line 22523
  $24 = HEAP32[$4 + 972 >> 2] | 0; //@line 22526
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 22527
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $4 + 1036 | 0, $24); //@line 22528
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 350; //@line 22531
   $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 22532
   HEAP32[$25 >> 2] = $8; //@line 22533
   $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 22534
   HEAP32[$26 >> 2] = $4; //@line 22535
   $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 22536
   HEAP32[$27 >> 2] = $10; //@line 22537
   $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 22538
   HEAP32[$28 >> 2] = $12; //@line 22539
   $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 22540
   HEAP32[$29 >> 2] = $2; //@line 22541
   $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 22542
   HEAP32[$30 >> 2] = $14; //@line 22543
   $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 22544
   HEAP32[$31 >> 2] = $6; //@line 22545
   sp = STACKTOP; //@line 22546
   return;
  }
  ___async_unwind = 0; //@line 22549
  HEAP32[$ReallocAsyncCtx7 >> 2] = 350; //@line 22550
  $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 22551
  HEAP32[$25 >> 2] = $8; //@line 22552
  $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 22553
  HEAP32[$26 >> 2] = $4; //@line 22554
  $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 22555
  HEAP32[$27 >> 2] = $10; //@line 22556
  $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 22557
  HEAP32[$28 >> 2] = $12; //@line 22558
  $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 22559
  HEAP32[$29 >> 2] = $2; //@line 22560
  $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 22561
  HEAP32[$30 >> 2] = $14; //@line 22562
  $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 22563
  HEAP32[$31 >> 2] = $6; //@line 22564
  sp = STACKTOP; //@line 22565
  return;
 }
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 22571
 $35 = $4 + 944 | 0; //@line 22572
 $36 = HEAP8[$35 >> 0] | 0; //@line 22573
 if (!($36 << 24 >> 24)) {
  HEAP8[$35 >> 0] = 1; //@line 22576
  $39 = 1; //@line 22577
 } else {
  $39 = $36; //@line 22579
 }
 HEAP8[$35 >> 0] = $39 | 32; //@line 22582
 HEAP8[$4 + 376 >> 0] = ($12 | 0) == 0 & (HEAP8[$4 + 944 >> 0] & 8) != 0 & 1; //@line 22591
 $47 = HEAP8[$4 + 378 >> 0] | 0; //@line 22593
 HEAP8[$4 + 379 >> 0] = $47; //@line 22595
 HEAP8[$2 >> 0] = $47; //@line 22596
 HEAP8[$14 + 1 >> 0] = HEAP8[$4 + 372 >> 0] | 0; //@line 22600
 HEAP32[$14 + 4 >> 2] = $6; //@line 22602
 $53 = HEAP32[$4 >> 2] | 0; //@line 22603
 $56 = HEAP32[(HEAP32[$53 >> 2] | 0) + 12 >> 2] | 0; //@line 22606
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 22607
 FUNCTION_TABLE_vii[$56 & 31]($53, $14); //@line 22608
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 353; //@line 22611
  $57 = $ReallocAsyncCtx + 4 | 0; //@line 22612
  HEAP32[$57 >> 2] = $4; //@line 22613
  $58 = $ReallocAsyncCtx + 8 | 0; //@line 22614
  HEAP32[$58 >> 2] = $6; //@line 22615
  $59 = $ReallocAsyncCtx + 12 | 0; //@line 22616
  HEAP32[$59 >> 2] = $10; //@line 22617
  $60 = $ReallocAsyncCtx + 16 | 0; //@line 22618
  HEAP32[$60 >> 2] = $2; //@line 22619
  sp = STACKTOP; //@line 22620
  return;
 }
 ___async_unwind = 0; //@line 22623
 HEAP32[$ReallocAsyncCtx >> 2] = 353; //@line 22624
 $57 = $ReallocAsyncCtx + 4 | 0; //@line 22625
 HEAP32[$57 >> 2] = $4; //@line 22626
 $58 = $ReallocAsyncCtx + 8 | 0; //@line 22627
 HEAP32[$58 >> 2] = $6; //@line 22628
 $59 = $ReallocAsyncCtx + 12 | 0; //@line 22629
 HEAP32[$59 >> 2] = $10; //@line 22630
 $60 = $ReallocAsyncCtx + 16 | 0; //@line 22631
 HEAP32[$60 >> 2] = $2; //@line 22632
 sp = STACKTOP; //@line 22633
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_415($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22053
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22055
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22057
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22059
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22061
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22063
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22065
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22067
 if ((HEAP32[$2 >> 2] | 0) != 2) {
  $17 = HEAP32[$6 >> 2] | 0; //@line 22071
  $19 = $4 + 976 | 0; //@line 22073
  $20 = HEAP32[$19 >> 2] | 0; //@line 22074
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(36) | 0; //@line 22075
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($17, $4 + 1056 | 0, $20); //@line 22076
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 351; //@line 22079
   $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 22080
   HEAP32[$21 >> 2] = $2; //@line 22081
   $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 22082
   HEAP32[$22 >> 2] = $19; //@line 22083
   $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 22084
   HEAP32[$23 >> 2] = $6; //@line 22085
   $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 22086
   HEAP32[$24 >> 2] = $4; //@line 22087
   $25 = $ReallocAsyncCtx6 + 20 | 0; //@line 22088
   HEAP32[$25 >> 2] = $8; //@line 22089
   $26 = $ReallocAsyncCtx6 + 24 | 0; //@line 22090
   HEAP32[$26 >> 2] = $10; //@line 22091
   $27 = $ReallocAsyncCtx6 + 28 | 0; //@line 22092
   HEAP32[$27 >> 2] = $12; //@line 22093
   $28 = $ReallocAsyncCtx6 + 32 | 0; //@line 22094
   HEAP32[$28 >> 2] = $14; //@line 22095
   sp = STACKTOP; //@line 22096
   return;
  }
  ___async_unwind = 0; //@line 22099
  HEAP32[$ReallocAsyncCtx6 >> 2] = 351; //@line 22100
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 22101
  HEAP32[$21 >> 2] = $2; //@line 22102
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 22103
  HEAP32[$22 >> 2] = $19; //@line 22104
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 22105
  HEAP32[$23 >> 2] = $6; //@line 22106
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 22107
  HEAP32[$24 >> 2] = $4; //@line 22108
  $25 = $ReallocAsyncCtx6 + 20 | 0; //@line 22109
  HEAP32[$25 >> 2] = $8; //@line 22110
  $26 = $ReallocAsyncCtx6 + 24 | 0; //@line 22111
  HEAP32[$26 >> 2] = $10; //@line 22112
  $27 = $ReallocAsyncCtx6 + 28 | 0; //@line 22113
  HEAP32[$27 >> 2] = $12; //@line 22114
  $28 = $ReallocAsyncCtx6 + 32 | 0; //@line 22115
  HEAP32[$28 >> 2] = $14; //@line 22116
  sp = STACKTOP; //@line 22117
  return;
 }
 $29 = HEAP32[$6 >> 2] | 0; //@line 22121
 $31 = HEAP32[$4 + 976 >> 2] | 0; //@line 22123
 $34 = (__ZN7LoRaPHY15get_ack_timeoutEv(HEAP32[$4 >> 2] | 0) | 0) + $31 | 0; //@line 22126
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 22127
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($29, $4 + 1076 | 0, $34); //@line 22128
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 352; //@line 22131
  $35 = $ReallocAsyncCtx5 + 4 | 0; //@line 22132
  HEAP32[$35 >> 2] = $4; //@line 22133
  $36 = $ReallocAsyncCtx5 + 8 | 0; //@line 22134
  HEAP32[$36 >> 2] = $8; //@line 22135
  $37 = $ReallocAsyncCtx5 + 12 | 0; //@line 22136
  HEAP32[$37 >> 2] = $10; //@line 22137
  $38 = $ReallocAsyncCtx5 + 16 | 0; //@line 22138
  HEAP32[$38 >> 2] = $12; //@line 22139
  $39 = $ReallocAsyncCtx5 + 20 | 0; //@line 22140
  HEAP32[$39 >> 2] = $14; //@line 22141
  $40 = $ReallocAsyncCtx5 + 24 | 0; //@line 22142
  HEAP32[$40 >> 2] = $6; //@line 22143
  sp = STACKTOP; //@line 22144
  return;
 }
 ___async_unwind = 0; //@line 22147
 HEAP32[$ReallocAsyncCtx5 >> 2] = 352; //@line 22148
 $35 = $ReallocAsyncCtx5 + 4 | 0; //@line 22149
 HEAP32[$35 >> 2] = $4; //@line 22150
 $36 = $ReallocAsyncCtx5 + 8 | 0; //@line 22151
 HEAP32[$36 >> 2] = $8; //@line 22152
 $37 = $ReallocAsyncCtx5 + 12 | 0; //@line 22153
 HEAP32[$37 >> 2] = $10; //@line 22154
 $38 = $ReallocAsyncCtx5 + 16 | 0; //@line 22155
 HEAP32[$38 >> 2] = $12; //@line 22156
 $39 = $ReallocAsyncCtx5 + 20 | 0; //@line 22157
 HEAP32[$39 >> 2] = $14; //@line 22158
 $40 = $ReallocAsyncCtx5 + 24 | 0; //@line 22159
 HEAP32[$40 >> 2] = $6; //@line 22160
 sp = STACKTOP; //@line 22161
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_416($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $36 = 0, $4 = 0, $44 = 0, $50 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 22170
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22172
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22174
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22176
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22178
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22180
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22182
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22184
 if (HEAP8[$4 + 371 >> 0] | 0) {
  $18 = HEAP32[$10 >> 2] | 0; //@line 22189
  $21 = HEAP32[$4 + 972 >> 2] | 0; //@line 22192
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 22193
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($18, $4 + 1036 | 0, $21); //@line 22194
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 350; //@line 22197
   $22 = $ReallocAsyncCtx7 + 4 | 0; //@line 22198
   HEAP32[$22 >> 2] = $8; //@line 22199
   $23 = $ReallocAsyncCtx7 + 8 | 0; //@line 22200
   HEAP32[$23 >> 2] = $4; //@line 22201
   $24 = $ReallocAsyncCtx7 + 12 | 0; //@line 22202
   HEAP32[$24 >> 2] = $10; //@line 22203
   $25 = $ReallocAsyncCtx7 + 16 | 0; //@line 22204
   HEAP32[$25 >> 2] = $12; //@line 22205
   $26 = $ReallocAsyncCtx7 + 20 | 0; //@line 22206
   HEAP32[$26 >> 2] = $2; //@line 22207
   $27 = $ReallocAsyncCtx7 + 24 | 0; //@line 22208
   HEAP32[$27 >> 2] = $14; //@line 22209
   $28 = $ReallocAsyncCtx7 + 28 | 0; //@line 22210
   HEAP32[$28 >> 2] = $6; //@line 22211
   sp = STACKTOP; //@line 22212
   return;
  }
  ___async_unwind = 0; //@line 22215
  HEAP32[$ReallocAsyncCtx7 >> 2] = 350; //@line 22216
  $22 = $ReallocAsyncCtx7 + 4 | 0; //@line 22217
  HEAP32[$22 >> 2] = $8; //@line 22218
  $23 = $ReallocAsyncCtx7 + 8 | 0; //@line 22219
  HEAP32[$23 >> 2] = $4; //@line 22220
  $24 = $ReallocAsyncCtx7 + 12 | 0; //@line 22221
  HEAP32[$24 >> 2] = $10; //@line 22222
  $25 = $ReallocAsyncCtx7 + 16 | 0; //@line 22223
  HEAP32[$25 >> 2] = $12; //@line 22224
  $26 = $ReallocAsyncCtx7 + 20 | 0; //@line 22225
  HEAP32[$26 >> 2] = $2; //@line 22226
  $27 = $ReallocAsyncCtx7 + 24 | 0; //@line 22227
  HEAP32[$27 >> 2] = $14; //@line 22228
  $28 = $ReallocAsyncCtx7 + 28 | 0; //@line 22229
  HEAP32[$28 >> 2] = $6; //@line 22230
  sp = STACKTOP; //@line 22231
  return;
 }
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 22237
 $32 = $4 + 944 | 0; //@line 22238
 $33 = HEAP8[$32 >> 0] | 0; //@line 22239
 if (!($33 << 24 >> 24)) {
  HEAP8[$32 >> 0] = 1; //@line 22242
  $36 = 1; //@line 22243
 } else {
  $36 = $33; //@line 22245
 }
 HEAP8[$32 >> 0] = $36 | 32; //@line 22248
 HEAP8[$4 + 376 >> 0] = ($12 | 0) == 0 & (HEAP8[$4 + 944 >> 0] & 8) != 0 & 1; //@line 22257
 $44 = HEAP8[$4 + 378 >> 0] | 0; //@line 22259
 HEAP8[$4 + 379 >> 0] = $44; //@line 22261
 HEAP8[$2 >> 0] = $44; //@line 22262
 HEAP8[$14 + 1 >> 0] = HEAP8[$4 + 372 >> 0] | 0; //@line 22266
 HEAP32[$14 + 4 >> 2] = $6; //@line 22268
 $50 = HEAP32[$4 >> 2] | 0; //@line 22269
 $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 12 >> 2] | 0; //@line 22272
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 22273
 FUNCTION_TABLE_vii[$53 & 31]($50, $14); //@line 22274
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 353; //@line 22277
  $54 = $ReallocAsyncCtx + 4 | 0; //@line 22278
  HEAP32[$54 >> 2] = $4; //@line 22279
  $55 = $ReallocAsyncCtx + 8 | 0; //@line 22280
  HEAP32[$55 >> 2] = $6; //@line 22281
  $56 = $ReallocAsyncCtx + 12 | 0; //@line 22282
  HEAP32[$56 >> 2] = $10; //@line 22283
  $57 = $ReallocAsyncCtx + 16 | 0; //@line 22284
  HEAP32[$57 >> 2] = $2; //@line 22285
  sp = STACKTOP; //@line 22286
  return;
 }
 ___async_unwind = 0; //@line 22289
 HEAP32[$ReallocAsyncCtx >> 2] = 353; //@line 22290
 $54 = $ReallocAsyncCtx + 4 | 0; //@line 22291
 HEAP32[$54 >> 2] = $4; //@line 22292
 $55 = $ReallocAsyncCtx + 8 | 0; //@line 22293
 HEAP32[$55 >> 2] = $6; //@line 22294
 $56 = $ReallocAsyncCtx + 12 | 0; //@line 22295
 HEAP32[$56 >> 2] = $10; //@line 22296
 $57 = $ReallocAsyncCtx + 16 | 0; //@line 22297
 HEAP32[$57 >> 2] = $2; //@line 22298
 sp = STACKTOP; //@line 22299
 return;
}
function __ZN7LoRaMac21send_frame_on_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $18 = 0, $21 = 0, $24 = 0, $25 = 0, $33 = 0, $36 = 0, $39 = 0, $42 = 0, $45 = 0, $48 = 0, $54 = 0, $57 = 0, $6 = 0, $60 = 0, $64 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 15917
 STACKTOP = STACKTOP + 32 | 0; //@line 15918
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 15918
 $vararg_buffer1 = sp + 8 | 0; //@line 15919
 $vararg_buffer = sp; //@line 15920
 _printf(12943, $vararg_buffer) | 0; //@line 15921
 _printf(13321, $vararg_buffer1) | 0; //@line 15922
 $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 15923
 _putchar(10) | 0; //@line 15924
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 482; //@line 15927
  HEAP32[$AsyncCtx5 + 4 >> 2] = $vararg_buffer1; //@line 15929
  HEAP32[$AsyncCtx5 + 8 >> 2] = $vararg_buffer; //@line 15931
  HEAP8[$AsyncCtx5 + 12 >> 0] = $1; //@line 15933
  HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 15935
  sp = STACKTOP; //@line 15936
  STACKTOP = sp; //@line 15937
  return 0; //@line 15937
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 15939
 HEAP8[$vararg_buffer >> 0] = 0; //@line 15940
 HEAP8[$vararg_buffer1 >> 0] = $1; //@line 15941
 $6 = $0 + 1097 | 0; //@line 15942
 HEAP8[$vararg_buffer1 + 1 >> 0] = HEAP8[$6 >> 0] | 0; //@line 15945
 HEAP8[$vararg_buffer1 + 2 >> 0] = HEAP8[$0 + 1096 >> 0] | 0; //@line 15949
 HEAP32[$vararg_buffer1 + 4 >> 2] = HEAP32[$0 + 1144 >> 2]; //@line 15953
 HEAP32[$vararg_buffer1 + 8 >> 2] = HEAP32[$0 + 1148 >> 2]; //@line 15957
 $18 = $0 + 636 | 0; //@line 15958
 HEAP16[$vararg_buffer1 + 12 >> 1] = HEAP16[$18 >> 1] | 0; //@line 15961
 $21 = HEAP32[$0 >> 2] | 0; //@line 15962
 $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 32 >> 2] | 0; //@line 15965
 $25 = $0 + 992 | 0; //@line 15966
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 15967
 FUNCTION_TABLE_iiiii[$24 & 3]($21, $vararg_buffer1, $vararg_buffer, $25) | 0; //@line 15968
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 483; //@line 15971
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 15973
  HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 15975
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 15977
  HEAP32[$AsyncCtx + 16 >> 2] = $25; //@line 15979
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 15981
  HEAP32[$AsyncCtx + 24 >> 2] = $18; //@line 15983
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer1; //@line 15985
  sp = STACKTOP; //@line 15986
  STACKTOP = sp; //@line 15987
  return 0; //@line 15987
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15989
 $33 = $0 + 264 | 0; //@line 15990
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($33) | 0) + 4 >> 2] = 1; //@line 15993
 $36 = $0 + 288 | 0; //@line 15994
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 4 >> 2] = 1; //@line 15997
 $39 = HEAP8[$6 >> 0] | 0; //@line 15998
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 8 >> 0] = $39; //@line 16001
 $42 = HEAP8[$vararg_buffer >> 0] | 0; //@line 16002
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 9 >> 0] = $42; //@line 16005
 $45 = HEAP32[$25 >> 2] | 0; //@line 16006
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($36) | 0) + 12 >> 2] = $45; //@line 16009
 $48 = HEAP32[$25 >> 2] | 0; //@line 16010
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($33) | 0) + 8 >> 2] = $48; //@line 16013
 if (!(HEAP8[$0 + 372 >> 0] | 0)) {
  $54 = $0 + 897 | 0; //@line 16018
  HEAP8[$54 >> 0] = (HEAP8[$54 >> 0] | 0) + 1 << 24 >> 24; //@line 16021
 }
 $57 = HEAP32[$0 >> 2] | 0; //@line 16023
 $60 = HEAP16[$18 >> 1] & 255; //@line 16026
 $AsyncCtx9 = _emscripten_alloc_async_context(16, sp) | 0; //@line 16027
 __ZN7LoRaPHY11handle_sendEPhh($57, $0 + 381 | 0, $60); //@line 16028
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 484; //@line 16031
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 16033
  HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer; //@line 16035
  HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer1; //@line 16037
  sp = STACKTOP; //@line 16038
  STACKTOP = sp; //@line 16039
  return 0; //@line 16039
 } else {
  _emscripten_free_async_context($AsyncCtx9 | 0); //@line 16041
  $64 = $0 + 968 | 0; //@line 16042
  HEAP32[$64 >> 2] = HEAP32[$64 >> 2] | 1; //@line 16045
  STACKTOP = sp; //@line 16046
  return 0; //@line 16046
 }
 return 0; //@line 16048
}
function __ZN12radio_eventsD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $32 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 32435
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32437
 $4 = HEAP32[$2 + 92 >> 2] | 0; //@line 32439
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 32444
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 32445
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 80 | 0); //@line 32446
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 330; //@line 32449
   $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 32450
   HEAP32[$9 >> 2] = $2; //@line 32451
   sp = STACKTOP; //@line 32452
   return;
  }
  ___async_unwind = 0; //@line 32455
  HEAP32[$ReallocAsyncCtx2 >> 2] = 330; //@line 32456
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 32457
  HEAP32[$9 >> 2] = $2; //@line 32458
  sp = STACKTOP; //@line 32459
  return;
 }
 $11 = HEAP32[$2 + 76 >> 2] | 0; //@line 32463
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 32468
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 32469
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 64 | 0); //@line 32470
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 331; //@line 32473
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 32474
   HEAP32[$16 >> 2] = $2; //@line 32475
   sp = STACKTOP; //@line 32476
   return;
  }
  ___async_unwind = 0; //@line 32479
  HEAP32[$ReallocAsyncCtx3 >> 2] = 331; //@line 32480
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 32481
  HEAP32[$16 >> 2] = $2; //@line 32482
  sp = STACKTOP; //@line 32483
  return;
 }
 $18 = HEAP32[$2 + 60 >> 2] | 0; //@line 32487
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 32492
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 32493
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 48 | 0); //@line 32494
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 332; //@line 32497
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 32498
   HEAP32[$23 >> 2] = $2; //@line 32499
   sp = STACKTOP; //@line 32500
   return;
  }
  ___async_unwind = 0; //@line 32503
  HEAP32[$ReallocAsyncCtx4 >> 2] = 332; //@line 32504
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 32505
  HEAP32[$23 >> 2] = $2; //@line 32506
  sp = STACKTOP; //@line 32507
  return;
 }
 $25 = HEAP32[$2 + 44 >> 2] | 0; //@line 32511
 if ($25 | 0) {
  $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 32516
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 32517
  FUNCTION_TABLE_vi[$29 & 1023]($2 + 32 | 0); //@line 32518
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 333; //@line 32521
   $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 32522
   HEAP32[$30 >> 2] = $2; //@line 32523
   sp = STACKTOP; //@line 32524
   return;
  }
  ___async_unwind = 0; //@line 32527
  HEAP32[$ReallocAsyncCtx5 >> 2] = 333; //@line 32528
  $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 32529
  HEAP32[$30 >> 2] = $2; //@line 32530
  sp = STACKTOP; //@line 32531
  return;
 }
 $32 = HEAP32[$2 + 28 >> 2] | 0; //@line 32535
 if ($32 | 0) {
  $36 = HEAP32[$32 + 8 >> 2] | 0; //@line 32540
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 32541
  FUNCTION_TABLE_vi[$36 & 1023]($2 + 16 | 0); //@line 32542
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 334; //@line 32545
   $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 32546
   HEAP32[$37 >> 2] = $2; //@line 32547
   sp = STACKTOP; //@line 32548
   return;
  }
  ___async_unwind = 0; //@line 32551
  HEAP32[$ReallocAsyncCtx6 >> 2] = 334; //@line 32552
  $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 32553
  HEAP32[$37 >> 2] = $2; //@line 32554
  sp = STACKTOP; //@line 32555
  return;
 }
 $39 = HEAP32[$2 + 12 >> 2] | 0; //@line 32559
 if (!$39) {
  return;
 }
 $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 32565
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 32566
 FUNCTION_TABLE_vi[$42 & 1023]($2); //@line 32567
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 335; //@line 32570
  sp = STACKTOP; //@line 32571
  return;
 }
 ___async_unwind = 0; //@line 32574
 HEAP32[$ReallocAsyncCtx7 >> 2] = 335; //@line 32575
 sp = STACKTOP; //@line 32576
 return;
}
function _initialize__async_cb_382($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 19361
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19363
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19365
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19369
 $10 = HEAP32[(HEAP32[$0 + 12 >> 2] | 0) + 4 >> 2] | 0; //@line 19371
 if (($10 + -4 | 0) >>> 0 > 28) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 19375
  _mbed_assert_internal(14489, 14491, 47); //@line 19376
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 686; //@line 19379
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 19380
   HEAP32[$12 >> 2] = 1e6; //@line 19381
   $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 19382
   HEAP32[$13 >> 2] = $2; //@line 19383
   $14 = $ReallocAsyncCtx6 + 12 | 0; //@line 19384
   HEAP32[$14 >> 2] = $4; //@line 19385
   $15 = $ReallocAsyncCtx6 + 16 | 0; //@line 19386
   HEAP32[$15 >> 2] = $8; //@line 19387
   sp = STACKTOP; //@line 19388
   return;
  }
  ___async_unwind = 0; //@line 19391
  HEAP32[$ReallocAsyncCtx6 >> 2] = 686; //@line 19392
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 19393
  HEAP32[$12 >> 2] = 1e6; //@line 19394
  $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 19395
  HEAP32[$13 >> 2] = $2; //@line 19396
  $14 = $ReallocAsyncCtx6 + 12 | 0; //@line 19397
  HEAP32[$14 >> 2] = $4; //@line 19398
  $15 = $ReallocAsyncCtx6 + 16 | 0; //@line 19399
  HEAP32[$15 >> 2] = $8; //@line 19400
  sp = STACKTOP; //@line 19401
  return;
 } else {
  $17 = 7 << $10 + -4; //@line 19405
  $18 = ___muldi3($17 | 0, 0, 1e6, 0) | 0; //@line 19406
  $19 = tempRet0; //@line 19407
  $20 = _i64Add(1e6, 0, -1, -1) | 0; //@line 19408
  $22 = _i64Add($20 | 0, tempRet0 | 0, $18 | 0, $19 | 0) | 0; //@line 19410
  $24 = ___udivdi3($22 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 19412
  $25 = tempRet0; //@line 19413
  $26 = HEAP32[$2 >> 2] | 0; //@line 19414
  HEAP32[$26 >> 2] = 0; //@line 19415
  HEAP32[$26 + 4 >> 2] = 0; //@line 19417
  $30 = HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0; //@line 19420
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 19421
  $31 = FUNCTION_TABLE_i[$30 & 7]() | 0; //@line 19422
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 687; //@line 19425
   $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 19426
   HEAP32[$32 >> 2] = $2; //@line 19427
   $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 19428
   HEAP32[$33 >> 2] = 1e6; //@line 19429
   $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 19430
   HEAP32[$34 >> 2] = $10; //@line 19431
   $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 19432
   HEAP32[$35 >> 2] = $17; //@line 19433
   $36 = $ReallocAsyncCtx3 + 24 | 0; //@line 19434
   $37 = $36; //@line 19435
   $38 = $37; //@line 19436
   HEAP32[$38 >> 2] = $24; //@line 19437
   $39 = $37 + 4 | 0; //@line 19438
   $40 = $39; //@line 19439
   HEAP32[$40 >> 2] = $25; //@line 19440
   $41 = $ReallocAsyncCtx3 + 32 | 0; //@line 19441
   HEAP32[$41 >> 2] = $4; //@line 19442
   $42 = $ReallocAsyncCtx3 + 36 | 0; //@line 19443
   HEAP32[$42 >> 2] = $8; //@line 19444
   sp = STACKTOP; //@line 19445
   return;
  }
  HEAP32[___async_retval >> 2] = $31; //@line 19449
  ___async_unwind = 0; //@line 19450
  HEAP32[$ReallocAsyncCtx3 >> 2] = 687; //@line 19451
  $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 19452
  HEAP32[$32 >> 2] = $2; //@line 19453
  $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 19454
  HEAP32[$33 >> 2] = 1e6; //@line 19455
  $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 19456
  HEAP32[$34 >> 2] = $10; //@line 19457
  $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 19458
  HEAP32[$35 >> 2] = $17; //@line 19459
  $36 = $ReallocAsyncCtx3 + 24 | 0; //@line 19460
  $37 = $36; //@line 19461
  $38 = $37; //@line 19462
  HEAP32[$38 >> 2] = $24; //@line 19463
  $39 = $37 + 4 | 0; //@line 19464
  $40 = $39; //@line 19465
  HEAP32[$40 >> 2] = $25; //@line 19466
  $41 = $ReallocAsyncCtx3 + 32 | 0; //@line 19467
  HEAP32[$41 >> 2] = $4; //@line 19468
  $42 = $ReallocAsyncCtx3 + 36 | 0; //@line 19469
  HEAP32[$42 >> 2] = $8; //@line 19470
  sp = STACKTOP; //@line 19471
  return;
 }
}
function _mbedtls_aes_setkey_dec($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$02$i$i = 0, $$031$i$i = 0, $$043$lcssa = 0, $$04353 = 0, $$04555$in = 0, $$051 = 0, $$054 = 0, $$pn$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $128 = 0, $13 = 0, $16 = 0, $19 = 0, $22 = 0, $24 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $64 = 0, $8 = 0, $96 = 0, sp = 0, $$04353$looptemp = 0;
 sp = STACKTOP; //@line 334
 STACKTOP = STACKTOP + 288 | 0; //@line 335
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288); //@line 335
 $3 = sp; //@line 336
 _memset($3 | 0, 0, 280) | 0; //@line 337
 $4 = $0 + 8 | 0; //@line 338
 HEAP32[$0 + 4 >> 2] = $4; //@line 340
 $6 = _mbedtls_aes_setkey_enc($3, $1, $2) | 0; //@line 341
 if (!$6) {
  $8 = HEAP32[$3 >> 2] | 0; //@line 344
  HEAP32[$0 >> 2] = $8; //@line 345
  $10 = HEAP32[$3 + 4 >> 2] | 0; //@line 347
  $11 = $8 << 2; //@line 348
  $12 = $10 + ($11 << 2) | 0; //@line 349
  $13 = $12 + 4 | 0; //@line 350
  HEAP32[$4 >> 2] = HEAP32[$12 >> 2]; //@line 353
  $16 = $13 + 4 | 0; //@line 354
  HEAP32[$0 + 12 >> 2] = HEAP32[$13 >> 2]; //@line 357
  $19 = $16 + 4 | 0; //@line 358
  HEAP32[$0 + 16 >> 2] = HEAP32[$16 >> 2]; //@line 361
  $22 = $19 + 4 | 0; //@line 362
  $24 = $0 + 24 | 0; //@line 364
  HEAP32[$0 + 20 >> 2] = HEAP32[$19 >> 2]; //@line 365
  $$051 = $22 + -32 | 0; //@line 366
  if (($8 | 0) > 1) {
   $26 = ~$8; //@line 369
   $31 = $11 + -4 - ($8 + (($26 | 0) > -3 ? $26 : -3) << 2) | 0; //@line 375
   $$04353 = $24; //@line 376
   $$04555$in = $8; //@line 376
   $$054 = $$051; //@line 376
   while (1) {
    $$04353$looptemp = $$04353;
    $$04353 = $$04353 + 16 | 0; //@line 379
    $32 = HEAP32[$$054 >> 2] | 0; //@line 380
    HEAP32[$$04353$looptemp >> 2] = HEAP32[2324 + ((HEAPU8[13833 + ($32 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1300 + ((HEAPU8[13833 + ($32 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3348 + ((HEAPU8[13833 + ($32 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4372 + ((HEAPU8[13833 + ($32 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 411
    $64 = HEAP32[$$054 + 4 >> 2] | 0; //@line 413
    HEAP32[$$04353$looptemp + 4 >> 2] = HEAP32[2324 + ((HEAPU8[13833 + ($64 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1300 + ((HEAPU8[13833 + ($64 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3348 + ((HEAPU8[13833 + ($64 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4372 + ((HEAPU8[13833 + ($64 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 444
    $96 = HEAP32[$$054 + 8 >> 2] | 0; //@line 446
    HEAP32[$$04353$looptemp + 8 >> 2] = HEAP32[2324 + ((HEAPU8[13833 + ($96 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1300 + ((HEAPU8[13833 + ($96 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3348 + ((HEAPU8[13833 + ($96 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4372 + ((HEAPU8[13833 + ($96 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 477
    $128 = HEAP32[$$054 + 12 >> 2] | 0; //@line 479
    HEAP32[$$04353$looptemp + 12 >> 2] = HEAP32[2324 + ((HEAPU8[13833 + ($128 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1300 + ((HEAPU8[13833 + ($128 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3348 + ((HEAPU8[13833 + ($128 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4372 + ((HEAPU8[13833 + ($128 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 509
    $$054 = $$054 + -16 | 0; //@line 510
    if (($$04555$in | 0) <= 2) {
     break;
    } else {
     $$04555$in = $$04555$in + -1 | 0; //@line 513
    }
   }
   $$0$lcssa = $$054; //@line 519
   $$043$lcssa = $$04353; //@line 519
   $$pn$lcssa = $10 + ($31 << 2) | 0; //@line 519
  } else {
   $$0$lcssa = $$051; //@line 521
   $$043$lcssa = $24; //@line 521
   $$pn$lcssa = $22; //@line 521
  }
  HEAP32[$$043$lcssa >> 2] = HEAP32[$$0$lcssa >> 2]; //@line 526
  HEAP32[$$043$lcssa + 4 >> 2] = HEAP32[$$pn$lcssa + -28 >> 2]; //@line 530
  HEAP32[$$043$lcssa + 8 >> 2] = HEAP32[$$pn$lcssa + -24 >> 2]; //@line 534
  HEAP32[$$043$lcssa + 12 >> 2] = HEAP32[$$pn$lcssa + -20 >> 2]; //@line 536
  $$02$i$i = $3; //@line 537
  $$031$i$i = 280; //@line 537
 } else {
  $$02$i$i = $3; //@line 539
  $$031$i$i = 280; //@line 539
 }
 while (1) {
  $$031$i$i = $$031$i$i + -1 | 0; //@line 542
  HEAP8[$$02$i$i >> 0] = 0; //@line 544
  if (!$$031$i$i) {
   break;
  } else {
   $$02$i$i = $$02$i$i + 1 | 0; //@line 549
  }
 }
 STACKTOP = sp; //@line 552
 return $6 | 0; //@line 552
}
function _mbedtls_cipher_cmac_update__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$09$i75 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $27 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $53 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 20118
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20120
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20122
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20124
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20126
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20128
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20130
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20132
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20134
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20136
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20138
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20140
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20142
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 20145
  $53 = ___async_retval; //@line 20146
  HEAP32[$53 >> 2] = $$0; //@line 20147
  return;
 }
 $33 = $2 - $4 | 0; //@line 20150
 $25 = $6 + $4 | 0; //@line 20151
 $37 = $8 + 1 | 0; //@line 20152
 if ($37 >>> 0 >= $10 >>> 0) {
  if (!$33) {
   $$0 = 0; //@line 20157
   $53 = ___async_retval; //@line 20158
   HEAP32[$53 >> 2] = $$0; //@line 20159
   return;
  }
  _memcpy((HEAP32[$14 >> 2] | 0) + ($16 + 16) | 0, $25 | 0, $33 | 0) | 0; //@line 20164
  HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + $33; //@line 20167
  $$0 = 0; //@line 20168
  $53 = ___async_retval; //@line 20169
  HEAP32[$53 >> 2] = $$0; //@line 20170
  return;
 }
 $$09$i75 = 0; //@line 20173
 do {
  $27 = $16 + $$09$i75 | 0; //@line 20177
  HEAP8[$27 >> 0] = HEAP8[$27 >> 0] ^ HEAP8[$25 + $$09$i75 >> 0]; //@line 20180
  $$09$i75 = $$09$i75 + 1 | 0; //@line 20181
 } while (($$09$i75 | 0) != ($4 | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 20189
 $31 = _mbedtls_cipher_update($18, $20, $4, $20, $22) | 0; //@line 20190
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 673; //@line 20193
  $32 = $ReallocAsyncCtx + 4 | 0; //@line 20194
  HEAP32[$32 >> 2] = $33; //@line 20195
  $34 = $ReallocAsyncCtx + 8 | 0; //@line 20196
  HEAP32[$34 >> 2] = $4; //@line 20197
  $35 = $ReallocAsyncCtx + 12 | 0; //@line 20198
  HEAP32[$35 >> 2] = $25; //@line 20199
  $36 = $ReallocAsyncCtx + 16 | 0; //@line 20200
  HEAP32[$36 >> 2] = $37; //@line 20201
  $38 = $ReallocAsyncCtx + 20 | 0; //@line 20202
  HEAP32[$38 >> 2] = $10; //@line 20203
  $39 = $ReallocAsyncCtx + 24 | 0; //@line 20204
  HEAP32[$39 >> 2] = $12; //@line 20205
  $40 = $ReallocAsyncCtx + 28 | 0; //@line 20206
  HEAP32[$40 >> 2] = $14; //@line 20207
  $41 = $ReallocAsyncCtx + 32 | 0; //@line 20208
  HEAP32[$41 >> 2] = $16; //@line 20209
  $42 = $ReallocAsyncCtx + 36 | 0; //@line 20210
  HEAP32[$42 >> 2] = $18; //@line 20211
  $43 = $ReallocAsyncCtx + 40 | 0; //@line 20212
  HEAP32[$43 >> 2] = $20; //@line 20213
  $44 = $ReallocAsyncCtx + 44 | 0; //@line 20214
  HEAP32[$44 >> 2] = $22; //@line 20215
  sp = STACKTOP; //@line 20216
  return;
 }
 HEAP32[___async_retval >> 2] = $31; //@line 20220
 ___async_unwind = 0; //@line 20221
 HEAP32[$ReallocAsyncCtx >> 2] = 673; //@line 20222
 $32 = $ReallocAsyncCtx + 4 | 0; //@line 20223
 HEAP32[$32 >> 2] = $33; //@line 20224
 $34 = $ReallocAsyncCtx + 8 | 0; //@line 20225
 HEAP32[$34 >> 2] = $4; //@line 20226
 $35 = $ReallocAsyncCtx + 12 | 0; //@line 20227
 HEAP32[$35 >> 2] = $25; //@line 20228
 $36 = $ReallocAsyncCtx + 16 | 0; //@line 20229
 HEAP32[$36 >> 2] = $37; //@line 20230
 $38 = $ReallocAsyncCtx + 20 | 0; //@line 20231
 HEAP32[$38 >> 2] = $10; //@line 20232
 $39 = $ReallocAsyncCtx + 24 | 0; //@line 20233
 HEAP32[$39 >> 2] = $12; //@line 20234
 $40 = $ReallocAsyncCtx + 28 | 0; //@line 20235
 HEAP32[$40 >> 2] = $14; //@line 20236
 $41 = $ReallocAsyncCtx + 32 | 0; //@line 20237
 HEAP32[$41 >> 2] = $16; //@line 20238
 $42 = $ReallocAsyncCtx + 36 | 0; //@line 20239
 HEAP32[$42 >> 2] = $18; //@line 20240
 $43 = $ReallocAsyncCtx + 40 | 0; //@line 20241
 HEAP32[$43 >> 2] = $20; //@line 20242
 $44 = $ReallocAsyncCtx + 44 | 0; //@line 20243
 HEAP32[$44 >> 2] = $22; //@line 20244
 sp = STACKTOP; //@line 20245
 return;
}
function _mbedtls_gcm_update($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$05966 = 0, $$06065 = 0, $$061 = 0, $$06264 = 0, $$163 = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $30 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $46 = 0, $5 = 0, $67 = 0, $68 = 0, $75 = 0, $83 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4863
 STACKTOP = STACKTOP + 32 | 0; //@line 4864
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4864
 $4 = sp + 8 | 0; //@line 4865
 $5 = sp; //@line 4866
 HEAP32[$5 >> 2] = 0; //@line 4867
 if ($3 >>> 0 > $2 >>> 0) {
  if (($3 - $2 | 0) >>> 0 < $1 >>> 0) {
   $$0 = -20; //@line 4875
   STACKTOP = sp; //@line 4876
   return $$0 | 0; //@line 4876
  }
 }
 $11 = $0 + 328 | 0; //@line 4879
 $12 = $11; //@line 4880
 $14 = HEAP32[$12 >> 2] | 0; //@line 4882
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 4885
 $18 = _i64Add($14 | 0, $17 | 0, $1 | 0, 0) | 0; //@line 4886
 $19 = tempRet0; //@line 4887
 if ($19 >>> 0 < $17 >>> 0 | ($19 | 0) == ($17 | 0) & $18 >>> 0 < $14 >>> 0 | ($19 >>> 0 > 15 | ($19 | 0) == 15 & $18 >>> 0 > 4294967264)) {
  $$0 = -20; //@line 4900
  STACKTOP = sp; //@line 4901
  return $$0 | 0; //@line 4901
 }
 $30 = $11; //@line 4903
 HEAP32[$30 >> 2] = $18; //@line 4905
 HEAP32[$30 + 4 >> 2] = $19; //@line 4908
 if (!$1) {
  $$0 = 0; //@line 4911
  STACKTOP = sp; //@line 4912
  return $$0 | 0; //@line 4912
 }
 $35 = $0 + 360 | 0; //@line 4914
 $36 = $0 + 376 | 0; //@line 4915
 $37 = $0 + 392 | 0; //@line 4916
 $$05966 = $3; //@line 4917
 $$06065 = $2; //@line 4917
 $$06264 = $1; //@line 4917
 while (1) {
  $39 = $$06264 >>> 0 < 16 ? $$06264 : 16; //@line 4920
  $$061 = 16; //@line 4921
  do {
   if ($$061 >>> 0 <= 12) {
    break;
   }
   $$061 = $$061 + -1 | 0; //@line 4927
   $42 = $0 + 360 + $$061 | 0; //@line 4928
   $44 = (HEAP8[$42 >> 0] | 0) + 1 << 24 >> 24; //@line 4930
   HEAP8[$42 >> 0] = $44; //@line 4931
  } while (!($44 << 24 >> 24));
  $AsyncCtx = _emscripten_alloc_async_context(68, sp) | 0; //@line 4939
  $46 = _mbedtls_cipher_update($0, $35, 16, $4, $5) | 0; //@line 4940
  if (___async) {
   label = 10; //@line 4943
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4946
  if ($46 | 0) {
   $$0 = $46; //@line 4949
   label = 19; //@line 4950
   break;
  }
  if ($39 | 0) {
   $$163 = 0; //@line 4955
   do {
    $67 = $0 + 376 + $$163 | 0; //@line 4959
    $68 = $$06065 + $$163 | 0; //@line 4960
    if (!(HEAP32[$37 >> 2] | 0)) {
     HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ HEAP8[$68 >> 0]; //@line 4965
    }
    $75 = HEAP8[$68 >> 0] ^ HEAP8[$4 + $$163 >> 0]; //@line 4970
    HEAP8[$$05966 + $$163 >> 0] = $75; //@line 4972
    if ((HEAP32[$37 >> 2] | 0) == 1) {
     HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ $75; //@line 4978
    }
    $$163 = $$163 + 1 | 0; //@line 4980
   } while ($$163 >>> 0 < $39 >>> 0);
  }
  _gcm_mult($0, $36, $36); //@line 4989
  $83 = $$06264 - $39 | 0; //@line 4990
  if (!$83) {
   $$0 = 0; //@line 4995
   label = 19; //@line 4996
   break;
  } else {
   $$05966 = $$05966 + $39 | 0; //@line 4999
   $$06065 = $$06065 + $39 | 0; //@line 4999
   $$06264 = $83; //@line 4999
  }
 }
 if ((label | 0) == 10) {
  HEAP32[$AsyncCtx >> 2] = 680; //@line 5003
  HEAP32[$AsyncCtx + 4 >> 2] = $39; //@line 5005
  HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 5007
  HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 5009
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 5011
  HEAP32[$AsyncCtx + 20 >> 2] = $36; //@line 5013
  HEAP32[$AsyncCtx + 24 >> 2] = $$06264; //@line 5015
  HEAP32[$AsyncCtx + 28 >> 2] = $$06065; //@line 5017
  HEAP32[$AsyncCtx + 32 >> 2] = $$05966; //@line 5019
  HEAP32[$AsyncCtx + 36 >> 2] = $37; //@line 5021
  HEAP32[$AsyncCtx + 40 >> 2] = $4; //@line 5023
  HEAP32[$AsyncCtx + 44 >> 2] = $3; //@line 5025
  HEAP32[$AsyncCtx + 48 >> 2] = $2; //@line 5027
  HEAP32[$AsyncCtx + 52 >> 2] = $1; //@line 5029
  HEAP32[$AsyncCtx + 56 >> 2] = $0; //@line 5031
  HEAP32[$AsyncCtx + 60 >> 2] = $35; //@line 5033
  HEAP32[$AsyncCtx + 64 >> 2] = $5; //@line 5035
  sp = STACKTOP; //@line 5036
  STACKTOP = sp; //@line 5037
  return 0; //@line 5037
 } else if ((label | 0) == 19) {
  STACKTOP = sp; //@line 5040
  return $$0 | 0; //@line 5040
 }
 return 0; //@line 5042
}
function __Z11compute_micPKhtS0_jhjPj($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $22 = 0, $24 = 0, $26 = 0, $32 = 0, $37 = 0, $42 = 0, $45 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 21242
 HEAP8[13569] = $4; //@line 21243
 HEAP8[13570] = $3; //@line 21245
 HEAP8[13571] = $3 >>> 8; //@line 21248
 HEAP8[13572] = $3 >>> 16; //@line 21251
 HEAP8[13573] = $3 >>> 24; //@line 21254
 HEAP8[13574] = $5; //@line 21256
 HEAP8[13575] = $5 >>> 8; //@line 21259
 HEAP8[13576] = $5 >>> 16; //@line 21262
 HEAP8[13577] = $5 >>> 24; //@line 21265
 $22 = $1 & 255; //@line 21267
 HEAP8[13579] = $1; //@line 21269
 _mbedtls_cipher_init(21844); //@line 21270
 $24 = _mbedtls_cipher_info_from_type(2) | 0; //@line 21271
 if (!$24) {
  $$0 = -24960; //@line 21274
 } else {
  $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 21276
  $26 = _mbedtls_cipher_setup(21844, $24) | 0; //@line 21277
  if (___async) {
   HEAP32[$AsyncCtx15 >> 2] = 581; //@line 21280
   HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 21282
   HEAP32[$AsyncCtx15 + 8 >> 2] = $22; //@line 21284
   HEAP32[$AsyncCtx15 + 12 >> 2] = $2; //@line 21286
   HEAP32[$AsyncCtx15 + 16 >> 2] = $6; //@line 21288
   sp = STACKTOP; //@line 21289
   return 0; //@line 21290
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 21292
  if (!$26) {
   $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 21295
   $32 = _mbedtls_cipher_cmac_starts(21844, $2, 128) | 0; //@line 21296
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 582; //@line 21299
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 21301
    HEAP32[$AsyncCtx11 + 8 >> 2] = $22; //@line 21303
    HEAP32[$AsyncCtx11 + 12 >> 2] = $6; //@line 21305
    sp = STACKTOP; //@line 21306
    return 0; //@line 21307
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 21309
   if (!$32) {
    $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 21312
    $37 = _mbedtls_cipher_cmac_update(21844, 13564, 16) | 0; //@line 21313
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 583; //@line 21316
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 21318
     HEAP32[$AsyncCtx3 + 8 >> 2] = $22; //@line 21320
     HEAP32[$AsyncCtx3 + 12 >> 2] = $6; //@line 21322
     sp = STACKTOP; //@line 21323
     return 0; //@line 21324
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 21326
    if (!$37) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 21329
     $42 = _mbedtls_cipher_cmac_update(21844, $0, $22) | 0; //@line 21330
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 584; //@line 21333
      HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 21335
      sp = STACKTOP; //@line 21336
      return 0; //@line 21337
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 21339
     if (!$42) {
      $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 21342
      $45 = _mbedtls_cipher_cmac_finish(21844, 23152) | 0; //@line 21343
      if (___async) {
       HEAP32[$AsyncCtx7 >> 2] = 585; //@line 21346
       HEAP32[$AsyncCtx7 + 4 >> 2] = $6; //@line 21348
       sp = STACKTOP; //@line 21349
       return 0; //@line 21350
      }
      _emscripten_free_async_context($AsyncCtx7 | 0); //@line 21352
      if (!$45) {
       HEAP32[$6 >> 2] = (HEAPU8[23154] | 0) << 16 | (HEAPU8[23155] | 0) << 24 | (HEAPU8[23153] | 0) << 8 | (HEAPU8[23152] | 0); //@line 21369
       $$0 = 0; //@line 21370
      } else {
       $$0 = $45; //@line 21372
      }
     } else {
      $$0 = $42; //@line 21375
     }
    } else {
     $$0 = $37; //@line 21378
    }
   } else {
    $$0 = $32; //@line 21381
   }
  } else {
   $$0 = $26; //@line 21384
  }
 }
 $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 21387
 _mbedtls_cipher_free(21844); //@line 21388
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 586; //@line 21391
  HEAP32[$AsyncCtx19 + 4 >> 2] = $$0; //@line 21393
  sp = STACKTOP; //@line 21394
  return 0; //@line 21395
 } else {
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 21397
  return $$0 | 0; //@line 21398
 }
 return 0; //@line 21400
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_124($0) {
 $0 = $0 | 0;
 var $$pre12 = 0, $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 25752
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25754
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25756
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25758
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25760
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25762
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25764
 $$pre12 = HEAP32[$2 >> 2] | 0; //@line 25765
 if ($$pre12 | 0) {
  $15 = HEAP32[$$pre12 + 4 >> 2] | 0; //@line 25769
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 25770
  FUNCTION_TABLE_vii[$15 & 31]($6, $8); //@line 25771
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 304; //@line 25774
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 25775
   HEAP32[$16 >> 2] = $2; //@line 25776
   $17 = $ReallocAsyncCtx4 + 8 | 0; //@line 25777
   HEAP32[$17 >> 2] = $4; //@line 25778
   $18 = $ReallocAsyncCtx4 + 12 | 0; //@line 25779
   HEAP32[$18 >> 2] = $10; //@line 25780
   $19 = $ReallocAsyncCtx4 + 16 | 0; //@line 25781
   HEAP32[$19 >> 2] = $12; //@line 25782
   sp = STACKTOP; //@line 25783
   return;
  }
  ___async_unwind = 0; //@line 25786
  HEAP32[$ReallocAsyncCtx4 >> 2] = 304; //@line 25787
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 25788
  HEAP32[$16 >> 2] = $2; //@line 25789
  $17 = $ReallocAsyncCtx4 + 8 | 0; //@line 25790
  HEAP32[$17 >> 2] = $4; //@line 25791
  $18 = $ReallocAsyncCtx4 + 12 | 0; //@line 25792
  HEAP32[$18 >> 2] = $10; //@line 25793
  $19 = $ReallocAsyncCtx4 + 16 | 0; //@line 25794
  HEAP32[$19 >> 2] = $12; //@line 25795
  sp = STACKTOP; //@line 25796
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 25799
 $20 = $10 + 32 | 0; //@line 25800
 $21 = $10 + 44 | 0; //@line 25801
 $22 = HEAP32[$21 >> 2] | 0; //@line 25802
 if (!$22) {
  return;
 }
 $24 = $12 + 1912 | 0; //@line 25807
 if (($24 | 0) == ($20 | 0)) {
  return;
 }
 $26 = $12 + 1924 | 0; //@line 25812
 $27 = HEAP32[$26 >> 2] | 0; //@line 25813
 if (!$27) {
  $36 = HEAP32[$22 + 4 >> 2] | 0; //@line 25817
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 25818
  FUNCTION_TABLE_vii[$36 & 31]($24, $20); //@line 25819
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 306; //@line 25822
   $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 25823
   HEAP32[$37 >> 2] = $21; //@line 25824
   $38 = $ReallocAsyncCtx6 + 8 | 0; //@line 25825
   HEAP32[$38 >> 2] = $26; //@line 25826
   sp = STACKTOP; //@line 25827
   return;
  }
  ___async_unwind = 0; //@line 25830
  HEAP32[$ReallocAsyncCtx6 >> 2] = 306; //@line 25831
  $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 25832
  HEAP32[$37 >> 2] = $21; //@line 25833
  $38 = $ReallocAsyncCtx6 + 8 | 0; //@line 25834
  HEAP32[$38 >> 2] = $26; //@line 25835
  sp = STACKTOP; //@line 25836
  return;
 } else {
  $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 25840
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 25841
  FUNCTION_TABLE_vi[$30 & 1023]($24); //@line 25842
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 305; //@line 25845
   $31 = $ReallocAsyncCtx5 + 4 | 0; //@line 25846
   HEAP32[$31 >> 2] = $21; //@line 25847
   $32 = $ReallocAsyncCtx5 + 8 | 0; //@line 25848
   HEAP32[$32 >> 2] = $26; //@line 25849
   $33 = $ReallocAsyncCtx5 + 12 | 0; //@line 25850
   HEAP32[$33 >> 2] = $24; //@line 25851
   $34 = $ReallocAsyncCtx5 + 16 | 0; //@line 25852
   HEAP32[$34 >> 2] = $20; //@line 25853
   sp = STACKTOP; //@line 25854
   return;
  }
  ___async_unwind = 0; //@line 25857
  HEAP32[$ReallocAsyncCtx5 >> 2] = 305; //@line 25858
  $31 = $ReallocAsyncCtx5 + 4 | 0; //@line 25859
  HEAP32[$31 >> 2] = $21; //@line 25860
  $32 = $ReallocAsyncCtx5 + 8 | 0; //@line 25861
  HEAP32[$32 >> 2] = $26; //@line 25862
  $33 = $ReallocAsyncCtx5 + 12 | 0; //@line 25863
  HEAP32[$33 >> 2] = $24; //@line 25864
  $34 = $ReallocAsyncCtx5 + 16 | 0; //@line 25865
  HEAP32[$34 >> 2] = $20; //@line 25866
  sp = STACKTOP; //@line 25867
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_491($0) {
 $0 = $0 | 0;
 var $$085$off0$reg2mem$0 = 0, $$182$off0 = 0, $$186$off0 = 0, $$283$off0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $59 = 0, $6 = 0, $67 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 35522
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35524
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35526
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35528
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35530
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 35532
 $12 = HEAP8[$0 + 24 >> 0] & 1; //@line 35535
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 35537
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 35539
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 35541
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 35543
 $22 = HEAP8[$0 + 44 >> 0] & 1; //@line 35546
 $24 = HEAP8[$0 + 45 >> 0] & 1; //@line 35549
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 35551
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 35553
 L2 : do {
  if (!(HEAP8[$2 >> 0] | 0)) {
   do {
    if (!(HEAP8[$4 >> 0] | 0)) {
     $$182$off0 = $24; //@line 35562
     $$186$off0 = $22; //@line 35562
    } else {
     if (!(HEAP8[$6 >> 0] | 0)) {
      if (!(HEAP32[$16 >> 2] & 1)) {
       $$085$off0$reg2mem$0 = $22; //@line 35571
       $$283$off0 = 1; //@line 35571
       label = 13; //@line 35572
       break L2;
      } else {
       $$182$off0 = 1; //@line 35575
       $$186$off0 = $22; //@line 35575
       break;
      }
     }
     if ((HEAP32[$18 >> 2] | 0) == 1) {
      label = 18; //@line 35582
      break L2;
     }
     if (!(HEAP32[$16 >> 2] & 2)) {
      label = 18; //@line 35589
      break L2;
     } else {
      $$182$off0 = 1; //@line 35592
      $$186$off0 = 1; //@line 35592
     }
    }
   } while (0);
   $30 = $26 + 8 | 0; //@line 35596
   if ($30 >>> 0 < $14 >>> 0) {
    HEAP8[$6 >> 0] = 0; //@line 35599
    HEAP8[$4 >> 0] = 0; //@line 35600
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 35601
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($30, $8, $10, $10, 1, $12); //@line 35602
    if (!___async) {
     ___async_unwind = 0; //@line 35605
    }
    HEAP32[$ReallocAsyncCtx5 >> 2] = 763; //@line 35607
    HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 35609
    HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 35611
    HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 35613
    HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 35615
    HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 35617
    HEAP8[$ReallocAsyncCtx5 + 24 >> 0] = $12 & 1; //@line 35620
    HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $14; //@line 35622
    HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $16; //@line 35624
    HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $18; //@line 35626
    HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $20; //@line 35628
    HEAP8[$ReallocAsyncCtx5 + 44 >> 0] = $$186$off0 & 1; //@line 35631
    HEAP8[$ReallocAsyncCtx5 + 45 >> 0] = $$182$off0 & 1; //@line 35634
    HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $30; //@line 35636
    HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $28; //@line 35638
    sp = STACKTOP; //@line 35639
    return;
   } else {
    $$085$off0$reg2mem$0 = $$186$off0; //@line 35642
    $$283$off0 = $$182$off0; //@line 35642
    label = 13; //@line 35643
   }
  } else {
   $$085$off0$reg2mem$0 = $22; //@line 35646
   $$283$off0 = $24; //@line 35646
   label = 13; //@line 35647
  }
 } while (0);
 do {
  if ((label | 0) == 13) {
   if (!$$085$off0$reg2mem$0) {
    HEAP32[$28 >> 2] = $10; //@line 35653
    $59 = $8 + 40 | 0; //@line 35654
    HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + 1; //@line 35657
    if ((HEAP32[$8 + 36 >> 2] | 0) == 1) {
     if ((HEAP32[$18 >> 2] | 0) == 2) {
      HEAP8[$2 >> 0] = 1; //@line 35665
      if ($$283$off0) {
       label = 18; //@line 35667
       break;
      } else {
       $67 = 4; //@line 35670
       break;
      }
     }
    }
   }
   if ($$283$off0) {
    label = 18; //@line 35677
   } else {
    $67 = 4; //@line 35679
   }
  }
 } while (0);
 if ((label | 0) == 18) {
  $67 = 3; //@line 35684
 }
 HEAP32[$20 >> 2] = $67; //@line 35686
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $16 = 0, $17 = 0, $30 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx20 = 0, $AsyncCtx9 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP; //@line 13765
 STACKTOP = STACKTOP + 32 | 0; //@line 13766
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 13766
 $$byval_copy = sp + 24 | 0; //@line 13767
 $vararg_buffer3 = sp + 16 | 0; //@line 13768
 $vararg_buffer1 = sp + 8 | 0; //@line 13769
 _printf(12943, sp) | 0; //@line 13771
 _printf(13209, $vararg_buffer1) | 0; //@line 13772
 $AsyncCtx9 = _emscripten_alloc_async_context(28, sp) | 0; //@line 13773
 _putchar(10) | 0; //@line 13774
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 437; //@line 13777
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 13779
  HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer1; //@line 13781
  HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer3; //@line 13783
  HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer3; //@line 13785
  HEAP32[$AsyncCtx9 + 20 >> 2] = $$byval_copy; //@line 13787
  HEAP32[$AsyncCtx9 + 24 >> 2] = $$byval_copy; //@line 13789
  sp = STACKTOP; //@line 13790
  STACKTOP = sp; //@line 13791
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 13793
 do {
  if ((HEAP32[$0 + 360 >> 2] | 0) == 2) {
   _printf(12943, $vararg_buffer3) | 0; //@line 13799
   _printf(12970, $$byval_copy) | 0; //@line 13800
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 13801
   _putchar(10) | 0; //@line 13802
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 439; //@line 13805
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 13807
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer1; //@line 13809
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 13811
    sp = STACKTOP; //@line 13812
    STACKTOP = sp; //@line 13813
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 13815
   $16 = HEAP32[$0 + 1328 >> 2] | 0; //@line 13817
   HEAP32[$vararg_buffer1 >> 2] = 347; //@line 13818
   HEAP32[$vararg_buffer1 + 4 >> 2] = 0; //@line 13820
   $AsyncCtx16 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13821
   HEAP32[$$byval_copy >> 2] = HEAP32[$vararg_buffer1 >> 2]; //@line 13822
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$vararg_buffer1 + 4 >> 2]; //@line 13822
   $17 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($16, $0, $$byval_copy) | 0; //@line 13823
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 440; //@line 13826
    HEAP32[$AsyncCtx16 + 4 >> 2] = $vararg_buffer1; //@line 13828
    HEAP32[$AsyncCtx16 + 8 >> 2] = $0; //@line 13830
    sp = STACKTOP; //@line 13831
    STACKTOP = sp; //@line 13832
    return;
   }
   _emscripten_free_async_context($AsyncCtx16 | 0); //@line 13834
   do {
    if (!$17) {
     $AsyncCtx20 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13838
     _mbed_assert_internal(12827, 12836, 217); //@line 13839
     if (___async) {
      HEAP32[$AsyncCtx20 >> 2] = 441; //@line 13842
      HEAP32[$AsyncCtx20 + 4 >> 2] = $vararg_buffer1; //@line 13844
      HEAP32[$AsyncCtx20 + 8 >> 2] = $0; //@line 13846
      sp = STACKTOP; //@line 13847
      STACKTOP = sp; //@line 13848
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx20 | 0); //@line 13850
      break;
     }
    }
   } while (0);
   HEAP32[$0 + 364 >> 2] = 2; //@line 13856
  } else {
   $10 = HEAP32[$0 >> 2] | 0; //@line 13858
   $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 13859
   __ZN7LoRaPHY18put_radio_to_sleepEv($10); //@line 13860
   if (___async) {
    HEAP32[$AsyncCtx13 >> 2] = 438; //@line 13863
    HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 13865
    sp = STACKTOP; //@line 13866
    STACKTOP = sp; //@line 13867
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx13 | 0); //@line 13869
    break;
   }
  }
 } while (0);
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($0 + 288 | 0) | 0) + 4 >> 2] = 2; //@line 13877
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($0 + 264 | 0) | 0) + 4 >> 2] = 2; //@line 13881
 $30 = $0 + 944 | 0; //@line 13882
 HEAP8[$30 >> 0] = HEAP8[$30 >> 0] | 32; //@line 13885
 STACKTOP = sp; //@line 13886
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_322($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 5649
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5651
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5653
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5655
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5659
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5661
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 5663
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 5665
 $17 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 5666
 if (!$17) {
  $27 = HEAP32[$2 >> 2] | 0; //@line 5669
  $29 = $14 + 12 | 0; //@line 5671
  HEAP32[$14 >> 2] = 512; //@line 5672
  HEAP32[$14 + 4 >> 2] = 0; //@line 5674
  HEAP32[$14 + 8 >> 2] = $4; //@line 5676
  HEAP32[$29 >> 2] = 848; //@line 5677
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 5678
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($27, $4 + 1016 | 0, $14); //@line 5679
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 513; //@line 5682
   $30 = $ReallocAsyncCtx9 + 4 | 0; //@line 5683
   HEAP32[$30 >> 2] = $2; //@line 5684
   $31 = $ReallocAsyncCtx9 + 8 | 0; //@line 5685
   HEAP32[$31 >> 2] = $4; //@line 5686
   $32 = $ReallocAsyncCtx9 + 12 | 0; //@line 5687
   HEAP32[$32 >> 2] = $6; //@line 5688
   $33 = $ReallocAsyncCtx9 + 16 | 0; //@line 5689
   HEAP32[$33 >> 2] = $10; //@line 5690
   $34 = $ReallocAsyncCtx9 + 20 | 0; //@line 5691
   HEAP32[$34 >> 2] = $12; //@line 5692
   $35 = $ReallocAsyncCtx9 + 24 | 0; //@line 5693
   HEAP32[$35 >> 2] = $14; //@line 5694
   $36 = $ReallocAsyncCtx9 + 28 | 0; //@line 5695
   HEAP32[$36 >> 2] = $29; //@line 5696
   sp = STACKTOP; //@line 5697
   return;
  }
  ___async_unwind = 0; //@line 5700
  HEAP32[$ReallocAsyncCtx9 >> 2] = 513; //@line 5701
  $30 = $ReallocAsyncCtx9 + 4 | 0; //@line 5702
  HEAP32[$30 >> 2] = $2; //@line 5703
  $31 = $ReallocAsyncCtx9 + 8 | 0; //@line 5704
  HEAP32[$31 >> 2] = $4; //@line 5705
  $32 = $ReallocAsyncCtx9 + 12 | 0; //@line 5706
  HEAP32[$32 >> 2] = $6; //@line 5707
  $33 = $ReallocAsyncCtx9 + 16 | 0; //@line 5708
  HEAP32[$33 >> 2] = $10; //@line 5709
  $34 = $ReallocAsyncCtx9 + 20 | 0; //@line 5710
  HEAP32[$34 >> 2] = $12; //@line 5711
  $35 = $ReallocAsyncCtx9 + 24 | 0; //@line 5712
  HEAP32[$35 >> 2] = $14; //@line 5713
  $36 = $ReallocAsyncCtx9 + 28 | 0; //@line 5714
  HEAP32[$36 >> 2] = $29; //@line 5715
  sp = STACKTOP; //@line 5716
  return;
 } else {
  $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 5720
  $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 5721
  FUNCTION_TABLE_vi[$20 & 1023]($16); //@line 5722
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 511; //@line 5725
   $21 = $ReallocAsyncCtx + 4 | 0; //@line 5726
   HEAP32[$21 >> 2] = $2; //@line 5727
   $22 = $ReallocAsyncCtx + 8 | 0; //@line 5728
   HEAP32[$22 >> 2] = $4; //@line 5729
   $23 = $ReallocAsyncCtx + 12 | 0; //@line 5730
   HEAP32[$23 >> 2] = $6; //@line 5731
   $24 = $ReallocAsyncCtx + 16 | 0; //@line 5732
   HEAP32[$24 >> 2] = $10; //@line 5733
   $25 = $ReallocAsyncCtx + 20 | 0; //@line 5734
   HEAP32[$25 >> 2] = $12; //@line 5735
   $26 = $ReallocAsyncCtx + 24 | 0; //@line 5736
   HEAP32[$26 >> 2] = $14; //@line 5737
   sp = STACKTOP; //@line 5738
   return;
  }
  ___async_unwind = 0; //@line 5741
  HEAP32[$ReallocAsyncCtx >> 2] = 511; //@line 5742
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 5743
  HEAP32[$21 >> 2] = $2; //@line 5744
  $22 = $ReallocAsyncCtx + 8 | 0; //@line 5745
  HEAP32[$22 >> 2] = $4; //@line 5746
  $23 = $ReallocAsyncCtx + 12 | 0; //@line 5747
  HEAP32[$23 >> 2] = $6; //@line 5748
  $24 = $ReallocAsyncCtx + 16 | 0; //@line 5749
  HEAP32[$24 >> 2] = $10; //@line 5750
  $25 = $ReallocAsyncCtx + 20 | 0; //@line 5751
  HEAP32[$25 >> 2] = $12; //@line 5752
  $26 = $ReallocAsyncCtx + 24 | 0; //@line 5753
  HEAP32[$26 >> 2] = $14; //@line 5754
  sp = STACKTOP; //@line 5755
  return;
 }
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_58($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $66 = 0, $68 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22219
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22221
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22223
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22225
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22227
 $12 = HEAP16[$0 + 24 >> 1] | 0; //@line 22231
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22233
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 22236
 $18 = HEAP8[$0 + 33 >> 0] | 0; //@line 22238
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 22240
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 22242
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 22244
 $26 = HEAP8[$0 + 48 >> 0] | 0; //@line 22246
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 22248
 $30 = HEAP32[$0 + 56 >> 2] | 0; //@line 22250
 $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 22252
 $34 = HEAP32[$0 + 64 >> 2] | 0; //@line 22254
 $36 = HEAP32[$0 + 68 >> 2] | 0; //@line 22256
 $40 = HEAP32[$0 + 76 >> 2] | 0; //@line 22260
 $42 = HEAP32[$0 + 80 >> 2] | 0; //@line 22262
 $44 = HEAP32[$0 + 84 >> 2] | 0; //@line 22264
 $46 = HEAP32[$0 + 88 >> 2] | 0; //@line 22266
 $48 = HEAP32[$0 + 92 >> 2] | 0; //@line 22268
 $50 = HEAP32[$0 + 96 >> 2] | 0; //@line 22270
 $52 = HEAP32[$0 + 100 >> 2] | 0; //@line 22272
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 22274
 $56 = HEAP32[$0 + 108 >> 2] | 0; //@line 22276
 $58 = HEAP32[$0 + 112 >> 2] | 0; //@line 22278
 $60 = HEAP32[$0 + 116 >> 2] | 0; //@line 22280
 $62 = HEAP32[$0 + 120 >> 2] | 0; //@line 22282
 $66 = HEAP32[$0 + 128 >> 2] | 0; //@line 22286
 $68 = HEAP32[$0 + 132 >> 2] | 0; //@line 22288
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22290
 _printf(12115, HEAP32[$0 + 124 >> 2] | 0) | 0; //@line 22291
 HEAP32[$6 >> 2] = $AsyncRetVal; //@line 22292
 _printf(12335, $6) | 0; //@line 22293
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(124) | 0; //@line 22294
 _putchar(10) | 0; //@line 22295
 if (!___async) {
  ___async_unwind = 0; //@line 22298
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 286; //@line 22300
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $36; //@line 22302
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $28; //@line 22304
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $20; //@line 22306
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $40; //@line 22308
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $24; //@line 22310
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $32; //@line 22312
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $14; //@line 22314
 HEAP8[$ReallocAsyncCtx6 + 32 >> 0] = $18; //@line 22316
 HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $22; //@line 22318
 HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $8; //@line 22320
 HEAP32[$ReallocAsyncCtx6 + 44 >> 2] = $56; //@line 22322
 HEAP32[$ReallocAsyncCtx6 + 48 >> 2] = $60; //@line 22324
 HEAP32[$ReallocAsyncCtx6 + 52 >> 2] = $AsyncRetVal; //@line 22326
 HEAP32[$ReallocAsyncCtx6 + 56 >> 2] = $58; //@line 22328
 HEAP16[$ReallocAsyncCtx6 + 60 >> 1] = $12; //@line 22330
 HEAP8[$ReallocAsyncCtx6 + 62 >> 0] = $26; //@line 22332
 HEAP32[$ReallocAsyncCtx6 + 64 >> 2] = $44; //@line 22334
 HEAP32[$ReallocAsyncCtx6 + 68 >> 2] = $50; //@line 22336
 HEAP32[$ReallocAsyncCtx6 + 72 >> 2] = $34; //@line 22338
 HEAP32[$ReallocAsyncCtx6 + 76 >> 2] = $4; //@line 22340
 HEAP32[$ReallocAsyncCtx6 + 80 >> 2] = $62; //@line 22342
 HEAP8[$ReallocAsyncCtx6 + 84 >> 0] = $16 & 1; //@line 22345
 HEAP32[$ReallocAsyncCtx6 + 88 >> 2] = $30; //@line 22347
 HEAP32[$ReallocAsyncCtx6 + 92 >> 2] = $2; //@line 22349
 HEAP32[$ReallocAsyncCtx6 + 96 >> 2] = $54; //@line 22351
 HEAP32[$ReallocAsyncCtx6 + 100 >> 2] = $68; //@line 22353
 HEAP32[$ReallocAsyncCtx6 + 104 >> 2] = $46; //@line 22355
 HEAP32[$ReallocAsyncCtx6 + 108 >> 2] = $52; //@line 22357
 HEAP32[$ReallocAsyncCtx6 + 112 >> 2] = $66; //@line 22359
 HEAP32[$ReallocAsyncCtx6 + 116 >> 2] = $48; //@line 22361
 HEAP32[$ReallocAsyncCtx6 + 120 >> 2] = $42; //@line 22363
 sp = STACKTOP; //@line 22364
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_11($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 18164
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18168
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18170
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18172
 $9 = $4 + 12 | 0; //@line 18173
 HEAP32[$4 >> 2] = 567; //@line 18174
 HEAP32[$4 + 4 >> 2] = 0; //@line 18176
 HEAP32[$4 + 8 >> 2] = $6; //@line 18178
 HEAP32[$9 >> 2] = 848; //@line 18179
 $10 = $6 + 1260 | 0; //@line 18180
 if (($10 | 0) == ($4 | 0)) {
  $29 = HEAP32[214] | 0; //@line 18184
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 18185
  FUNCTION_TABLE_vi[$29 & 1023]($4); //@line 18186
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 570; //@line 18189
   $30 = $ReallocAsyncCtx15 + 4 | 0; //@line 18190
   HEAP32[$30 >> 2] = $4; //@line 18191
   $31 = $ReallocAsyncCtx15 + 8 | 0; //@line 18192
   HEAP32[$31 >> 2] = $8; //@line 18193
   sp = STACKTOP; //@line 18194
   return;
  }
  ___async_unwind = 0; //@line 18197
  HEAP32[$ReallocAsyncCtx15 >> 2] = 570; //@line 18198
  $30 = $ReallocAsyncCtx15 + 4 | 0; //@line 18199
  HEAP32[$30 >> 2] = $4; //@line 18200
  $31 = $ReallocAsyncCtx15 + 8 | 0; //@line 18201
  HEAP32[$31 >> 2] = $8; //@line 18202
  sp = STACKTOP; //@line 18203
  return;
 }
 $12 = $6 + 1272 | 0; //@line 18206
 $13 = HEAP32[$12 >> 2] | 0; //@line 18207
 if (!$13) {
  $23 = HEAP32[213] | 0; //@line 18211
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(20) | 0; //@line 18212
  FUNCTION_TABLE_vii[$23 & 31]($10, $4); //@line 18213
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 569; //@line 18216
   $24 = $ReallocAsyncCtx14 + 4 | 0; //@line 18217
   HEAP32[$24 >> 2] = $9; //@line 18218
   $25 = $ReallocAsyncCtx14 + 8 | 0; //@line 18219
   HEAP32[$25 >> 2] = $12; //@line 18220
   $26 = $ReallocAsyncCtx14 + 12 | 0; //@line 18221
   HEAP32[$26 >> 2] = $4; //@line 18222
   $27 = $ReallocAsyncCtx14 + 16 | 0; //@line 18223
   HEAP32[$27 >> 2] = $8; //@line 18224
   sp = STACKTOP; //@line 18225
   return;
  }
  ___async_unwind = 0; //@line 18228
  HEAP32[$ReallocAsyncCtx14 >> 2] = 569; //@line 18229
  $24 = $ReallocAsyncCtx14 + 4 | 0; //@line 18230
  HEAP32[$24 >> 2] = $9; //@line 18231
  $25 = $ReallocAsyncCtx14 + 8 | 0; //@line 18232
  HEAP32[$25 >> 2] = $12; //@line 18233
  $26 = $ReallocAsyncCtx14 + 12 | 0; //@line 18234
  HEAP32[$26 >> 2] = $4; //@line 18235
  $27 = $ReallocAsyncCtx14 + 16 | 0; //@line 18236
  HEAP32[$27 >> 2] = $8; //@line 18237
  sp = STACKTOP; //@line 18238
  return;
 } else {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 18242
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(24) | 0; //@line 18243
  FUNCTION_TABLE_vi[$16 & 1023]($10); //@line 18244
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 568; //@line 18247
   $17 = $ReallocAsyncCtx13 + 4 | 0; //@line 18248
   HEAP32[$17 >> 2] = $9; //@line 18249
   $18 = $ReallocAsyncCtx13 + 8 | 0; //@line 18250
   HEAP32[$18 >> 2] = $12; //@line 18251
   $19 = $ReallocAsyncCtx13 + 12 | 0; //@line 18252
   HEAP32[$19 >> 2] = $10; //@line 18253
   $20 = $ReallocAsyncCtx13 + 16 | 0; //@line 18254
   HEAP32[$20 >> 2] = $4; //@line 18255
   $21 = $ReallocAsyncCtx13 + 20 | 0; //@line 18256
   HEAP32[$21 >> 2] = $8; //@line 18257
   sp = STACKTOP; //@line 18258
   return;
  }
  ___async_unwind = 0; //@line 18261
  HEAP32[$ReallocAsyncCtx13 >> 2] = 568; //@line 18262
  $17 = $ReallocAsyncCtx13 + 4 | 0; //@line 18263
  HEAP32[$17 >> 2] = $9; //@line 18264
  $18 = $ReallocAsyncCtx13 + 8 | 0; //@line 18265
  HEAP32[$18 >> 2] = $12; //@line 18266
  $19 = $ReallocAsyncCtx13 + 12 | 0; //@line 18267
  HEAP32[$19 >> 2] = $10; //@line 18268
  $20 = $ReallocAsyncCtx13 + 16 | 0; //@line 18269
  HEAP32[$20 >> 2] = $4; //@line 18270
  $21 = $ReallocAsyncCtx13 + 20 | 0; //@line 18271
  HEAP32[$21 >> 2] = $8; //@line 18272
  sp = STACKTOP; //@line 18273
  return;
 }
}
function _initialize__async_cb_379($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $70 = 0, $71 = 0, $72 = 0, $81 = 0, $82 = 0, $83 = 0, $85 = 0, $89 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19103
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19107
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19109
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19113
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19115
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19117
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19119
 if (($AsyncRetVal | 0) != (HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 32 >> 2] | 0)) {
  $23 = $AsyncRetVal - (HEAP32[$6 >> 2] | 0) & HEAP32[HEAP32[$0 + 16 >> 2] >> 2]; //@line 19128
  HEAP32[$6 >> 2] = $AsyncRetVal; //@line 19129
  $24 = HEAP32[$10 >> 2] | 0; //@line 19130
  L4 : do {
   if (($24 | 0) < 1e6) {
    switch ($24 | 0) {
    case 32768:
     {
      break;
     }
    default:
     {
      label = 6; //@line 19139
      break L4;
     }
    }
    $25 = ___muldi3($23 | 0, 0, 1e6, 0) | 0; //@line 19143
    $27 = _bitshift64Lshr($25 | 0, tempRet0 | 0, 15) | 0; //@line 19145
    $28 = tempRet0; //@line 19146
    $31 = $12; //@line 19149
    $37 = _i64Add(HEAP32[$31 >> 2] | 0, HEAP32[$31 + 4 >> 2] | 0, $23 * 1e6 & 32704 | 0, 0) | 0; //@line 19155
    $38 = tempRet0; //@line 19156
    $39 = $12; //@line 19157
    HEAP32[$39 >> 2] = $37; //@line 19159
    HEAP32[$39 + 4 >> 2] = $38; //@line 19162
    if ($38 >>> 0 < 0 | ($38 | 0) == 0 & $37 >>> 0 < 32768) {
     $95 = $27; //@line 19169
     $96 = $28; //@line 19169
    } else {
     $48 = _i64Add($27 | 0, $28 | 0, 1, 0) | 0; //@line 19171
     $49 = tempRet0; //@line 19172
     $50 = _i64Add($37 | 0, $38 | 0, -32768, -1) | 0; //@line 19173
     $52 = $12; //@line 19175
     HEAP32[$52 >> 2] = $50; //@line 19177
     HEAP32[$52 + 4 >> 2] = tempRet0; //@line 19180
     $95 = $48; //@line 19181
     $96 = $49; //@line 19181
    }
   } else {
    switch ($24 | 0) {
    case 1e6:
     {
      $95 = $23; //@line 19186
      $96 = 0; //@line 19186
      break;
     }
    default:
     {
      label = 6; //@line 19190
     }
    }
   }
  } while (0);
  if ((label | 0) == 6) {
   $56 = ___muldi3($23 | 0, 0, 1e6, 0) | 0; //@line 19196
   $57 = tempRet0; //@line 19197
   $58 = ___udivdi3($56 | 0, $57 | 0, $24 | 0, 0) | 0; //@line 19198
   $59 = tempRet0; //@line 19199
   $60 = ___muldi3($58 | 0, $59 | 0, $24 | 0, 0) | 0; //@line 19200
   $62 = _i64Subtract($56 | 0, $57 | 0, $60 | 0, tempRet0 | 0) | 0; //@line 19202
   $64 = $12; //@line 19204
   $70 = _i64Add($62 | 0, tempRet0 | 0, HEAP32[$64 >> 2] | 0, HEAP32[$64 + 4 >> 2] | 0) | 0; //@line 19210
   $71 = tempRet0; //@line 19211
   $72 = $12; //@line 19212
   HEAP32[$72 >> 2] = $70; //@line 19214
   HEAP32[$72 + 4 >> 2] = $71; //@line 19217
   if ($71 >>> 0 < 0 | ($71 | 0) == 0 & $70 >>> 0 < $24 >>> 0) {
    $95 = $58; //@line 19224
    $96 = $59; //@line 19224
   } else {
    $81 = _i64Add($58 | 0, $59 | 0, 1, 0) | 0; //@line 19226
    $82 = tempRet0; //@line 19227
    $83 = _i64Subtract($70 | 0, $71 | 0, $24 | 0, 0) | 0; //@line 19228
    $85 = $12; //@line 19230
    HEAP32[$85 >> 2] = $83; //@line 19232
    HEAP32[$85 + 4 >> 2] = tempRet0; //@line 19235
    $95 = $81; //@line 19236
    $96 = $82; //@line 19236
   }
  }
  $89 = $14; //@line 19239
  $97 = _i64Add(HEAP32[$89 >> 2] | 0, HEAP32[$89 + 4 >> 2] | 0, $95 | 0, $96 | 0) | 0; //@line 19245
  $99 = $14; //@line 19247
  HEAP32[$99 >> 2] = $97; //@line 19249
  HEAP32[$99 + 4 >> 2] = tempRet0; //@line 19252
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 19254
 _schedule_interrupt($4); //@line 19255
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 689; //@line 19258
  sp = STACKTOP; //@line 19259
  return;
 }
 ___async_unwind = 0; //@line 19262
 HEAP32[$ReallocAsyncCtx5 >> 2] = 689; //@line 19263
 sp = STACKTOP; //@line 19264
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_25($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19852
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19854
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19856
 $5 = $2 + 1240 | 0; //@line 19857
 $6 = $4 + 12 | 0; //@line 19858
 HEAP32[$4 >> 2] = 139; //@line 19859
 HEAP32[$4 + 4 >> 2] = 0; //@line 19861
 HEAP32[$4 + 8 >> 2] = $2; //@line 19863
 HEAP32[$6 >> 2] = 648; //@line 19864
 $7 = $2 + 1280 | 0; //@line 19865
 do {
  if (($7 | 0) != ($4 | 0)) {
   $9 = $2 + 1292 | 0; //@line 19869
   $10 = HEAP32[$9 >> 2] | 0; //@line 19870
   if ($10 | 0) {
    $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 19874
    $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 19875
    FUNCTION_TABLE_vi[$13 & 1023]($7); //@line 19876
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 140; //@line 19879
     $14 = $ReallocAsyncCtx + 4 | 0; //@line 19880
     HEAP32[$14 >> 2] = $6; //@line 19881
     $15 = $ReallocAsyncCtx + 8 | 0; //@line 19882
     HEAP32[$15 >> 2] = $9; //@line 19883
     $16 = $ReallocAsyncCtx + 12 | 0; //@line 19884
     HEAP32[$16 >> 2] = $7; //@line 19885
     $17 = $ReallocAsyncCtx + 16 | 0; //@line 19886
     HEAP32[$17 >> 2] = $4; //@line 19887
     $18 = $ReallocAsyncCtx + 20 | 0; //@line 19888
     HEAP32[$18 >> 2] = $5; //@line 19889
     sp = STACKTOP; //@line 19890
     return;
    }
    ___async_unwind = 0; //@line 19893
    HEAP32[$ReallocAsyncCtx >> 2] = 140; //@line 19894
    $14 = $ReallocAsyncCtx + 4 | 0; //@line 19895
    HEAP32[$14 >> 2] = $6; //@line 19896
    $15 = $ReallocAsyncCtx + 8 | 0; //@line 19897
    HEAP32[$15 >> 2] = $9; //@line 19898
    $16 = $ReallocAsyncCtx + 12 | 0; //@line 19899
    HEAP32[$16 >> 2] = $7; //@line 19900
    $17 = $ReallocAsyncCtx + 16 | 0; //@line 19901
    HEAP32[$17 >> 2] = $4; //@line 19902
    $18 = $ReallocAsyncCtx + 20 | 0; //@line 19903
    HEAP32[$18 >> 2] = $5; //@line 19904
    sp = STACKTOP; //@line 19905
    return;
   }
   $19 = HEAP32[$6 >> 2] | 0; //@line 19908
   if (!$19) {
    HEAP32[$9 >> 2] = 0; //@line 19911
    break;
   }
   $22 = HEAP32[$19 + 4 >> 2] | 0; //@line 19915
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 19916
   FUNCTION_TABLE_vii[$22 & 31]($7, $4); //@line 19917
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 141; //@line 19920
    $23 = $ReallocAsyncCtx2 + 4 | 0; //@line 19921
    HEAP32[$23 >> 2] = $6; //@line 19922
    $24 = $ReallocAsyncCtx2 + 8 | 0; //@line 19923
    HEAP32[$24 >> 2] = $9; //@line 19924
    $25 = $ReallocAsyncCtx2 + 12 | 0; //@line 19925
    HEAP32[$25 >> 2] = $5; //@line 19926
    $26 = $ReallocAsyncCtx2 + 16 | 0; //@line 19927
    HEAP32[$26 >> 2] = $4; //@line 19928
    sp = STACKTOP; //@line 19929
    return;
   }
   ___async_unwind = 0; //@line 19932
   HEAP32[$ReallocAsyncCtx2 >> 2] = 141; //@line 19933
   $23 = $ReallocAsyncCtx2 + 4 | 0; //@line 19934
   HEAP32[$23 >> 2] = $6; //@line 19935
   $24 = $ReallocAsyncCtx2 + 8 | 0; //@line 19936
   HEAP32[$24 >> 2] = $9; //@line 19937
   $25 = $ReallocAsyncCtx2 + 12 | 0; //@line 19938
   HEAP32[$25 >> 2] = $5; //@line 19939
   $26 = $ReallocAsyncCtx2 + 16 | 0; //@line 19940
   HEAP32[$26 >> 2] = $4; //@line 19941
   sp = STACKTOP; //@line 19942
   return;
  }
 } while (0);
 __ZN4mbed6Ticker5setupEy($5, 1e5, 0); //@line 19946
 $27 = HEAP32[$6 >> 2] | 0; //@line 19947
 if (!$27) {
  return;
 }
 $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 19953
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 19954
 FUNCTION_TABLE_vi[$30 & 1023]($4); //@line 19955
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 142; //@line 19958
  sp = STACKTOP; //@line 19959
  return;
 }
 ___async_unwind = 0; //@line 19962
 HEAP32[$ReallocAsyncCtx3 >> 2] = 142; //@line 19963
 sp = STACKTOP; //@line 19964
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $43 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 17001
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17003
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17005
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17007
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17009
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17011
 $12 = $0 + 24 | 0; //@line 17013
 $14 = HEAP32[$12 >> 2] | 0; //@line 17015
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 17018
 $19 = HEAP32[$0 + 32 >> 2] | 0; //@line 17020
 $20 = HEAP32[$2 >> 2] | 0; //@line 17021
 if ($20 | 0) {
  $23 = HEAP32[$20 + 4 >> 2] | 0; //@line 17025
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 17026
  FUNCTION_TABLE_vii[$23 & 31]($6, $8); //@line 17027
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 130; //@line 17030
   $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 17031
   HEAP32[$24 >> 2] = $2; //@line 17032
   $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 17033
   HEAP32[$25 >> 2] = $4; //@line 17034
   $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 17035
   HEAP32[$26 >> 2] = $10; //@line 17036
   $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 17037
   $28 = $27; //@line 17038
   $29 = $28; //@line 17039
   HEAP32[$29 >> 2] = $14; //@line 17040
   $30 = $28 + 4 | 0; //@line 17041
   $31 = $30; //@line 17042
   HEAP32[$31 >> 2] = $17; //@line 17043
   $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 17044
   HEAP32[$32 >> 2] = $19; //@line 17045
   $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 17046
   HEAP32[$33 >> 2] = $8; //@line 17047
   sp = STACKTOP; //@line 17048
   return;
  }
  ___async_unwind = 0; //@line 17051
  HEAP32[$ReallocAsyncCtx2 >> 2] = 130; //@line 17052
  $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 17053
  HEAP32[$24 >> 2] = $2; //@line 17054
  $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 17055
  HEAP32[$25 >> 2] = $4; //@line 17056
  $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 17057
  HEAP32[$26 >> 2] = $10; //@line 17058
  $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 17059
  $28 = $27; //@line 17060
  $29 = $28; //@line 17061
  HEAP32[$29 >> 2] = $14; //@line 17062
  $30 = $28 + 4 | 0; //@line 17063
  $31 = $30; //@line 17064
  HEAP32[$31 >> 2] = $17; //@line 17065
  $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 17066
  HEAP32[$32 >> 2] = $19; //@line 17067
  $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 17068
  HEAP32[$33 >> 2] = $8; //@line 17069
  sp = STACKTOP; //@line 17070
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 17073
 __ZN4mbed6Ticker5setupEy($10, $14, $17); //@line 17074
 $34 = HEAP32[$2 >> 2] | 0; //@line 17075
 if ($34 | 0) {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 17079
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 17080
  FUNCTION_TABLE_vi[$37 & 1023]($8); //@line 17081
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 131; //@line 17084
   $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 17085
   HEAP32[$38 >> 2] = $19; //@line 17086
   sp = STACKTOP; //@line 17087
   return;
  }
  ___async_unwind = 0; //@line 17090
  HEAP32[$ReallocAsyncCtx3 >> 2] = 131; //@line 17091
  $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 17092
  HEAP32[$38 >> 2] = $19; //@line 17093
  sp = STACKTOP; //@line 17094
  return;
 }
 $40 = HEAP32[$19 + 784 >> 2] | 0; //@line 17098
 if (!$40) {
  return;
 }
 $43 = HEAP32[$40 + 60 >> 2] | 0; //@line 17104
 if (!$43) {
  return;
 }
 $46 = HEAP32[$43 >> 2] | 0; //@line 17110
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 17111
 FUNCTION_TABLE_vi[$46 & 1023]($40 + 48 | 0); //@line 17112
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 132; //@line 17115
  sp = STACKTOP; //@line 17116
  return;
 }
 ___async_unwind = 0; //@line 17119
 HEAP32[$ReallocAsyncCtx4 >> 2] = 132; //@line 17120
 sp = STACKTOP; //@line 17121
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_490($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 35366
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35368
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35370
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35372
 $8 = HEAP8[$0 + 16 >> 0] & 1; //@line 35375
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 35377
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 35379
 $15 = $12 + 24 | 0; //@line 35382
 do {
  if ((HEAP32[$0 + 28 >> 2] | 0) > 1) {
   $18 = HEAP32[$12 + 8 >> 2] | 0; //@line 35387
   if (!($18 & 2)) {
    $21 = $2 + 36 | 0; //@line 35391
    if ((HEAP32[$21 >> 2] | 0) != 1) {
     if (!($18 & 1)) {
      $38 = $2 + 54 | 0; //@line 35398
      if (HEAP8[$38 >> 0] | 0) {
       break;
      }
      if ((HEAP32[$21 >> 2] | 0) == 1) {
       break;
      }
      $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 35409
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $2, $4, $6, $8); //@line 35410
      if (!___async) {
       ___async_unwind = 0; //@line 35413
      }
      HEAP32[$ReallocAsyncCtx >> 2] = 767; //@line 35415
      HEAP32[$ReallocAsyncCtx + 4 >> 2] = $15; //@line 35417
      HEAP32[$ReallocAsyncCtx + 8 >> 2] = $10; //@line 35419
      HEAP32[$ReallocAsyncCtx + 12 >> 2] = $38; //@line 35421
      HEAP32[$ReallocAsyncCtx + 16 >> 2] = $21; //@line 35423
      HEAP32[$ReallocAsyncCtx + 20 >> 2] = $2; //@line 35425
      HEAP32[$ReallocAsyncCtx + 24 >> 2] = $4; //@line 35427
      HEAP32[$ReallocAsyncCtx + 28 >> 2] = $6; //@line 35429
      HEAP8[$ReallocAsyncCtx + 32 >> 0] = $8 & 1; //@line 35432
      sp = STACKTOP; //@line 35433
      return;
     }
     $36 = $2 + 24 | 0; //@line 35436
     $37 = $2 + 54 | 0; //@line 35437
     if (HEAP8[$37 >> 0] | 0) {
      break;
     }
     if ((HEAP32[$21 >> 2] | 0) == 1) {
      if ((HEAP32[$36 >> 2] | 0) == 1) {
       break;
      }
     }
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 35452
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $2, $4, $6, $8); //@line 35453
     if (!___async) {
      ___async_unwind = 0; //@line 35456
     }
     HEAP32[$ReallocAsyncCtx2 >> 2] = 766; //@line 35458
     HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $15; //@line 35460
     HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 35462
     HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $37; //@line 35464
     HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $21; //@line 35466
     HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $36; //@line 35468
     HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $2; //@line 35470
     HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $4; //@line 35472
     HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $6; //@line 35474
     HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $8 & 1; //@line 35477
     sp = STACKTOP; //@line 35478
     return;
    }
   }
   $24 = $2 + 54 | 0; //@line 35482
   if (!(HEAP8[$24 >> 0] | 0)) {
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 35486
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $2, $4, $6, $8); //@line 35487
    if (!___async) {
     ___async_unwind = 0; //@line 35490
    }
    HEAP32[$ReallocAsyncCtx3 >> 2] = 765; //@line 35492
    HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $15; //@line 35494
    HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $10; //@line 35496
    HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $24; //@line 35498
    HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $2; //@line 35500
    HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $4; //@line 35502
    HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $6; //@line 35504
    HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $8 & 1; //@line 35507
    sp = STACKTOP; //@line 35508
    return;
   }
  }
 } while (0);
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_414($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $23 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $40 = 0, $46 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21927
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21931
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21933
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21935
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21937
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21939
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21941
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21943
 if ((HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) != 2) {
  if (!(HEAP8[$8 + 373 >> 0] | 0)) {
   HEAP8[$8 + 376 >> 0] = ($10 | 0) == 0 & (HEAP8[$8 + 944 >> 0] & 8) != 0 & 1; //@line 21959
   $40 = HEAP8[$8 + 378 >> 0] | 0; //@line 21961
   HEAP8[$8 + 379 >> 0] = $40; //@line 21963
   HEAP8[$12 >> 0] = $40; //@line 21964
   HEAP8[$14 + 1 >> 0] = HEAP8[$8 + 372 >> 0] | 0; //@line 21968
   HEAP32[$14 + 4 >> 2] = $16; //@line 21970
   $46 = HEAP32[$8 >> 2] | 0; //@line 21971
   $49 = HEAP32[(HEAP32[$46 >> 2] | 0) + 12 >> 2] | 0; //@line 21974
   $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 21975
   FUNCTION_TABLE_vii[$49 & 31]($46, $14); //@line 21976
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 353; //@line 21979
    $50 = $ReallocAsyncCtx + 4 | 0; //@line 21980
    HEAP32[$50 >> 2] = $8; //@line 21981
    $51 = $ReallocAsyncCtx + 8 | 0; //@line 21982
    HEAP32[$51 >> 2] = $16; //@line 21983
    $52 = $ReallocAsyncCtx + 12 | 0; //@line 21984
    HEAP32[$52 >> 2] = $6; //@line 21985
    $53 = $ReallocAsyncCtx + 16 | 0; //@line 21986
    HEAP32[$53 >> 2] = $12; //@line 21987
    sp = STACKTOP; //@line 21988
    return;
   }
   ___async_unwind = 0; //@line 21991
   HEAP32[$ReallocAsyncCtx >> 2] = 353; //@line 21992
   $50 = $ReallocAsyncCtx + 4 | 0; //@line 21993
   HEAP32[$50 >> 2] = $8; //@line 21994
   $51 = $ReallocAsyncCtx + 8 | 0; //@line 21995
   HEAP32[$51 >> 2] = $16; //@line 21996
   $52 = $ReallocAsyncCtx + 12 | 0; //@line 21997
   HEAP32[$52 >> 2] = $6; //@line 21998
   $53 = $ReallocAsyncCtx + 16 | 0; //@line 21999
   HEAP32[$53 >> 2] = $12; //@line 22000
   sp = STACKTOP; //@line 22001
   return;
  }
 }
 $21 = HEAP32[$6 >> 2] | 0; //@line 22005
 $23 = HEAP32[$4 >> 2] | 0; //@line 22007
 $26 = (__ZN7LoRaPHY15get_ack_timeoutEv(HEAP32[$8 >> 2] | 0) | 0) + $23 | 0; //@line 22010
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 22011
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $8 + 1076 | 0, $26); //@line 22012
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 352; //@line 22015
  $27 = $ReallocAsyncCtx5 + 4 | 0; //@line 22016
  HEAP32[$27 >> 2] = $8; //@line 22017
  $28 = $ReallocAsyncCtx5 + 8 | 0; //@line 22018
  HEAP32[$28 >> 2] = $10; //@line 22019
  $29 = $ReallocAsyncCtx5 + 12 | 0; //@line 22020
  HEAP32[$29 >> 2] = $12; //@line 22021
  $30 = $ReallocAsyncCtx5 + 16 | 0; //@line 22022
  HEAP32[$30 >> 2] = $14; //@line 22023
  $31 = $ReallocAsyncCtx5 + 20 | 0; //@line 22024
  HEAP32[$31 >> 2] = $16; //@line 22025
  $32 = $ReallocAsyncCtx5 + 24 | 0; //@line 22026
  HEAP32[$32 >> 2] = $6; //@line 22027
  sp = STACKTOP; //@line 22028
  return;
 }
 ___async_unwind = 0; //@line 22031
 HEAP32[$ReallocAsyncCtx5 >> 2] = 352; //@line 22032
 $27 = $ReallocAsyncCtx5 + 4 | 0; //@line 22033
 HEAP32[$27 >> 2] = $8; //@line 22034
 $28 = $ReallocAsyncCtx5 + 8 | 0; //@line 22035
 HEAP32[$28 >> 2] = $10; //@line 22036
 $29 = $ReallocAsyncCtx5 + 12 | 0; //@line 22037
 HEAP32[$29 >> 2] = $12; //@line 22038
 $30 = $ReallocAsyncCtx5 + 16 | 0; //@line 22039
 HEAP32[$30 >> 2] = $14; //@line 22040
 $31 = $ReallocAsyncCtx5 + 20 | 0; //@line 22041
 HEAP32[$31 >> 2] = $16; //@line 22042
 $32 = $ReallocAsyncCtx5 + 24 | 0; //@line 22043
 HEAP32[$32 >> 2] = $6; //@line 22044
 sp = STACKTOP; //@line 22045
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $31 = 0, $32 = 0, $33 = 0, $62 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15250
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 15255
 } else {
  $9 = $1 + 52 | 0; //@line 15257
  $10 = HEAP8[$9 >> 0] | 0; //@line 15258
  $11 = $1 + 53 | 0; //@line 15259
  $12 = HEAP8[$11 >> 0] | 0; //@line 15260
  $15 = HEAP32[$0 + 12 >> 2] | 0; //@line 15263
  $16 = $0 + 16 + ($15 << 3) | 0; //@line 15264
  HEAP8[$9 >> 0] = 0; //@line 15265
  HEAP8[$11 >> 0] = 0; //@line 15266
  $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 15267
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0 + 16 | 0, $1, $2, $3, $4, $5); //@line 15268
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 761; //@line 15271
   HEAP32[$AsyncCtx3 + 4 >> 2] = $15; //@line 15273
   HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 15275
   HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 15277
   HEAP8[$AsyncCtx3 + 16 >> 0] = $10; //@line 15279
   HEAP32[$AsyncCtx3 + 20 >> 2] = $9; //@line 15281
   HEAP8[$AsyncCtx3 + 24 >> 0] = $12; //@line 15283
   HEAP32[$AsyncCtx3 + 28 >> 2] = $11; //@line 15285
   HEAP32[$AsyncCtx3 + 32 >> 2] = $2; //@line 15287
   HEAP32[$AsyncCtx3 + 36 >> 2] = $3; //@line 15289
   HEAP32[$AsyncCtx3 + 40 >> 2] = $4; //@line 15291
   HEAP8[$AsyncCtx3 + 44 >> 0] = $5 & 1; //@line 15294
   HEAP32[$AsyncCtx3 + 48 >> 2] = $16; //@line 15296
   sp = STACKTOP; //@line 15297
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15300
  L7 : do {
   if (($15 | 0) > 1) {
    $31 = $1 + 24 | 0; //@line 15305
    $32 = $0 + 8 | 0; //@line 15306
    $33 = $1 + 54 | 0; //@line 15307
    $$0 = $0 + 24 | 0; //@line 15308
    while (1) {
     if (HEAP8[$33 >> 0] | 0) {
      break L7;
     }
     if (!(HEAP8[$9 >> 0] | 0)) {
      if (HEAP8[$11 >> 0] | 0) {
       if (!(HEAP32[$32 >> 2] & 1)) {
        break L7;
       }
      }
     } else {
      if ((HEAP32[$31 >> 2] | 0) == 1) {
       break L7;
      }
      if (!(HEAP32[$32 >> 2] & 2)) {
       break L7;
      }
     }
     HEAP8[$9 >> 0] = 0; //@line 15341
     HEAP8[$11 >> 0] = 0; //@line 15342
     $AsyncCtx = _emscripten_alloc_async_context(60, sp) | 0; //@line 15343
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0, $1, $2, $3, $4, $5); //@line 15344
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 15349
     $62 = $$0 + 8 | 0; //@line 15350
     if ($62 >>> 0 < $16 >>> 0) {
      $$0 = $62; //@line 15353
     } else {
      break L7;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 762; //@line 15358
    HEAP32[$AsyncCtx + 4 >> 2] = $$0; //@line 15360
    HEAP32[$AsyncCtx + 8 >> 2] = $16; //@line 15362
    HEAP32[$AsyncCtx + 12 >> 2] = $33; //@line 15364
    HEAP8[$AsyncCtx + 16 >> 0] = $10; //@line 15366
    HEAP32[$AsyncCtx + 20 >> 2] = $9; //@line 15368
    HEAP8[$AsyncCtx + 24 >> 0] = $12; //@line 15370
    HEAP32[$AsyncCtx + 28 >> 2] = $11; //@line 15372
    HEAP32[$AsyncCtx + 32 >> 2] = $31; //@line 15374
    HEAP32[$AsyncCtx + 36 >> 2] = $32; //@line 15376
    HEAP32[$AsyncCtx + 40 >> 2] = $1; //@line 15378
    HEAP32[$AsyncCtx + 44 >> 2] = $2; //@line 15380
    HEAP32[$AsyncCtx + 48 >> 2] = $3; //@line 15382
    HEAP32[$AsyncCtx + 52 >> 2] = $4; //@line 15384
    HEAP8[$AsyncCtx + 56 >> 0] = $5 & 1; //@line 15387
    sp = STACKTOP; //@line 15388
    return;
   }
  } while (0);
  HEAP8[$9 >> 0] = $10; //@line 15392
  HEAP8[$11 >> 0] = $12; //@line 15393
 }
 return;
}
function __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 var $$1 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $35 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $54 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 21256
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21260
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21262
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21264
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21266
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21268
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21270
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21272
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21274
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21276
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21278
 $24 = (HEAP8[$0 + 4 >> 0] | 0) + 1 << 24 >> 24; //@line 21280
 if ($AsyncRetVal | 0) {
  $$1 = $AsyncRetVal; //@line 21282
  $54 = ___async_retval; //@line 21283
  HEAP32[$54 >> 2] = $$1; //@line 21284
  return;
 }
 $25 = $24 & 255; //@line 21289
 if (($24 & 255) >= (HEAPU8[$4 >> 0] | 0)) {
  $$1 = 0; //@line 21291
  $54 = ___async_retval; //@line 21292
  HEAP32[$54 >> 2] = $$1; //@line 21293
  return;
 }
 $26 = HEAP32[$8 >> 2] | 0; //@line 21296
 HEAP8[$10 >> 0] = HEAP8[$26 + ($25 << 4) + 13 >> 0] | 0; //@line 21299
 HEAP8[$12 >> 0] = HEAP8[$26 + ($25 << 4) + 12 >> 0] | 0; //@line 21302
 HEAP32[$14 >> 2] = HEAP32[$26 + ($25 << 4) + 4 >> 2]; //@line 21305
 HEAP32[$16 >> 2] = HEAP32[$26 + ($25 << 4) + 8 >> 2]; //@line 21308
 $35 = HEAP32[$18 >> 2] | 0; //@line 21309
 $38 = HEAP32[(HEAP32[$35 >> 2] | 0) + 60 >> 2] | 0; //@line 21312
 $40 = HEAP8[$26 + ($25 << 4) >> 0] | 0; //@line 21314
 $ReallocAsyncCtx = _emscripten_realloc_async_context(44) | 0; //@line 21315
 $41 = FUNCTION_TABLE_iiii[$38 & 15]($35, $20, $40) | 0; //@line 21316
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 571; //@line 21319
  $42 = $ReallocAsyncCtx + 4 | 0; //@line 21320
  HEAP8[$42 >> 0] = $24; //@line 21321
  $43 = $ReallocAsyncCtx + 8 | 0; //@line 21322
  HEAP32[$43 >> 2] = $4; //@line 21323
  $44 = $ReallocAsyncCtx + 12 | 0; //@line 21324
  HEAP32[$44 >> 2] = $6; //@line 21325
  $45 = $ReallocAsyncCtx + 16 | 0; //@line 21326
  HEAP32[$45 >> 2] = $8; //@line 21327
  $46 = $ReallocAsyncCtx + 20 | 0; //@line 21328
  HEAP32[$46 >> 2] = $10; //@line 21329
  $47 = $ReallocAsyncCtx + 24 | 0; //@line 21330
  HEAP32[$47 >> 2] = $12; //@line 21331
  $48 = $ReallocAsyncCtx + 28 | 0; //@line 21332
  HEAP32[$48 >> 2] = $14; //@line 21333
  $49 = $ReallocAsyncCtx + 32 | 0; //@line 21334
  HEAP32[$49 >> 2] = $16; //@line 21335
  $50 = $ReallocAsyncCtx + 36 | 0; //@line 21336
  HEAP32[$50 >> 2] = $18; //@line 21337
  $51 = $ReallocAsyncCtx + 40 | 0; //@line 21338
  HEAP32[$51 >> 2] = $20; //@line 21339
  sp = STACKTOP; //@line 21340
  return;
 }
 HEAP32[___async_retval >> 2] = $41; //@line 21344
 ___async_unwind = 0; //@line 21345
 HEAP32[$ReallocAsyncCtx >> 2] = 571; //@line 21346
 $42 = $ReallocAsyncCtx + 4 | 0; //@line 21347
 HEAP8[$42 >> 0] = $24; //@line 21348
 $43 = $ReallocAsyncCtx + 8 | 0; //@line 21349
 HEAP32[$43 >> 2] = $4; //@line 21350
 $44 = $ReallocAsyncCtx + 12 | 0; //@line 21351
 HEAP32[$44 >> 2] = $6; //@line 21352
 $45 = $ReallocAsyncCtx + 16 | 0; //@line 21353
 HEAP32[$45 >> 2] = $8; //@line 21354
 $46 = $ReallocAsyncCtx + 20 | 0; //@line 21355
 HEAP32[$46 >> 2] = $10; //@line 21356
 $47 = $ReallocAsyncCtx + 24 | 0; //@line 21357
 HEAP32[$47 >> 2] = $12; //@line 21358
 $48 = $ReallocAsyncCtx + 28 | 0; //@line 21359
 HEAP32[$48 >> 2] = $14; //@line 21360
 $49 = $ReallocAsyncCtx + 32 | 0; //@line 21361
 HEAP32[$49 >> 2] = $16; //@line 21362
 $50 = $ReallocAsyncCtx + 36 | 0; //@line 21363
 HEAP32[$50 >> 2] = $18; //@line 21364
 $51 = $ReallocAsyncCtx + 40 | 0; //@line 21365
 HEAP32[$51 >> 2] = $20; //@line 21366
 sp = STACKTOP; //@line 21367
 return;
}
function _pop_arg_673($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $108 = 0, $109 = 0.0, $115 = 0, $116 = 0.0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $9 = 0, $97 = 0, $98 = 0, $99 = 0;
 L1 : do {
  if ($1 >>> 0 <= 20) {
   do {
    switch ($1 | 0) {
    case 9:
     {
      $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12354
      $10 = HEAP32[$9 >> 2] | 0; //@line 12355
      HEAP32[$2 >> 2] = $9 + 4; //@line 12357
      HEAP32[$0 >> 2] = $10; //@line 12358
      break L1;
      break;
     }
    case 10:
     {
      $16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12374
      $17 = HEAP32[$16 >> 2] | 0; //@line 12375
      HEAP32[$2 >> 2] = $16 + 4; //@line 12377
      $20 = $0; //@line 12380
      HEAP32[$20 >> 2] = $17; //@line 12382
      HEAP32[$20 + 4 >> 2] = (($17 | 0) < 0) << 31 >> 31; //@line 12385
      break L1;
      break;
     }
    case 11:
     {
      $29 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12401
      $30 = HEAP32[$29 >> 2] | 0; //@line 12402
      HEAP32[$2 >> 2] = $29 + 4; //@line 12404
      $31 = $0; //@line 12405
      HEAP32[$31 >> 2] = $30; //@line 12407
      HEAP32[$31 + 4 >> 2] = 0; //@line 12410
      break L1;
      break;
     }
    case 12:
     {
      $40 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 12426
      $41 = $40; //@line 12427
      $43 = HEAP32[$41 >> 2] | 0; //@line 12429
      $46 = HEAP32[$41 + 4 >> 2] | 0; //@line 12432
      HEAP32[$2 >> 2] = $40 + 8; //@line 12434
      $47 = $0; //@line 12435
      HEAP32[$47 >> 2] = $43; //@line 12437
      HEAP32[$47 + 4 >> 2] = $46; //@line 12440
      break L1;
      break;
     }
    case 13:
     {
      $56 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12456
      $57 = HEAP32[$56 >> 2] | 0; //@line 12457
      HEAP32[$2 >> 2] = $56 + 4; //@line 12459
      $59 = ($57 & 65535) << 16 >> 16; //@line 12461
      $62 = $0; //@line 12464
      HEAP32[$62 >> 2] = $59; //@line 12466
      HEAP32[$62 + 4 >> 2] = (($59 | 0) < 0) << 31 >> 31; //@line 12469
      break L1;
      break;
     }
    case 14:
     {
      $71 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12485
      $72 = HEAP32[$71 >> 2] | 0; //@line 12486
      HEAP32[$2 >> 2] = $71 + 4; //@line 12488
      $73 = $0; //@line 12490
      HEAP32[$73 >> 2] = $72 & 65535; //@line 12492
      HEAP32[$73 + 4 >> 2] = 0; //@line 12495
      break L1;
      break;
     }
    case 15:
     {
      $82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12511
      $83 = HEAP32[$82 >> 2] | 0; //@line 12512
      HEAP32[$2 >> 2] = $82 + 4; //@line 12514
      $85 = ($83 & 255) << 24 >> 24; //@line 12516
      $88 = $0; //@line 12519
      HEAP32[$88 >> 2] = $85; //@line 12521
      HEAP32[$88 + 4 >> 2] = (($85 | 0) < 0) << 31 >> 31; //@line 12524
      break L1;
      break;
     }
    case 16:
     {
      $97 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 12540
      $98 = HEAP32[$97 >> 2] | 0; //@line 12541
      HEAP32[$2 >> 2] = $97 + 4; //@line 12543
      $99 = $0; //@line 12545
      HEAP32[$99 >> 2] = $98 & 255; //@line 12547
      HEAP32[$99 + 4 >> 2] = 0; //@line 12550
      break L1;
      break;
     }
    case 17:
     {
      $108 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 12566
      $109 = +HEAPF64[$108 >> 3]; //@line 12567
      HEAP32[$2 >> 2] = $108 + 8; //@line 12569
      HEAPF64[$0 >> 3] = $109; //@line 12570
      break L1;
      break;
     }
    case 18:
     {
      $115 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 12586
      $116 = +HEAPF64[$115 >> 3]; //@line 12587
      HEAP32[$2 >> 2] = $115 + 8; //@line 12589
      HEAPF64[$0 >> 3] = $116; //@line 12590
      break L1;
      break;
     }
    default:
     {
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 return;
}
function __ZN12radio_eventsD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0, $30 = 0, $34 = 0, $37 = 0, $41 = 0, $44 = 0, $47 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 10063
 $2 = HEAP32[$0 + 108 >> 2] | 0; //@line 10065
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 10071
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 10072
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 96 | 0); //@line 10073
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 329; //@line 10076
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 10078
    sp = STACKTOP; //@line 10079
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 10082
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 92 >> 2] | 0; //@line 10088
 do {
  if ($9 | 0) {
   $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 10094
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10095
   FUNCTION_TABLE_vi[$13 & 1023]($0 + 80 | 0); //@line 10096
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 330; //@line 10099
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 10101
    sp = STACKTOP; //@line 10102
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10105
    break;
   }
  }
 } while (0);
 $16 = HEAP32[$0 + 76 >> 2] | 0; //@line 10111
 do {
  if ($16 | 0) {
   $20 = HEAP32[$16 + 8 >> 2] | 0; //@line 10117
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10118
   FUNCTION_TABLE_vi[$20 & 1023]($0 + 64 | 0); //@line 10119
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 331; //@line 10122
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 10124
    sp = STACKTOP; //@line 10125
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 10128
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$0 + 60 >> 2] | 0; //@line 10134
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 10140
   $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10141
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 48 | 0); //@line 10142
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 332; //@line 10145
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 10147
    sp = STACKTOP; //@line 10148
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 10151
    break;
   }
  }
 } while (0);
 $30 = HEAP32[$0 + 44 >> 2] | 0; //@line 10157
 do {
  if ($30 | 0) {
   $34 = HEAP32[$30 + 8 >> 2] | 0; //@line 10163
   $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10164
   FUNCTION_TABLE_vi[$34 & 1023]($0 + 32 | 0); //@line 10165
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 333; //@line 10168
    HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 10170
    sp = STACKTOP; //@line 10171
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 10174
    break;
   }
  }
 } while (0);
 $37 = HEAP32[$0 + 28 >> 2] | 0; //@line 10180
 do {
  if ($37 | 0) {
   $41 = HEAP32[$37 + 8 >> 2] | 0; //@line 10186
   $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10187
   FUNCTION_TABLE_vi[$41 & 1023]($0 + 16 | 0); //@line 10188
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 334; //@line 10191
    HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 10193
    sp = STACKTOP; //@line 10194
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx19 | 0); //@line 10197
    break;
   }
  }
 } while (0);
 $44 = HEAP32[$0 + 12 >> 2] | 0; //@line 10203
 if (!$44) {
  return;
 }
 $47 = HEAP32[$44 + 8 >> 2] | 0; //@line 10209
 $AsyncCtx23 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10210
 FUNCTION_TABLE_vi[$47 & 1023]($0); //@line 10211
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 335; //@line 10214
  sp = STACKTOP; //@line 10215
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 10218
 return;
}
function __ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$011 = 0, $$pre$phi13Z2D = 0, $13 = 0, $14 = 0, $3 = 0, $30 = 0, $33 = 0, $35 = 0, $36 = 0, $40 = 0, $5 = 0, $51 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, $or$cond$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 17555
 STACKTOP = STACKTOP + 16 | 0; //@line 17556
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17556
 $vararg_buffer1 = sp + 8 | 0; //@line 17557
 $vararg_buffer = sp; //@line 17558
 $3 = $0 + 4 | 0; //@line 17559
 $5 = (__ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($3) | 0) & 255; //@line 17561
 $8 = ((__ZNK14LoRaMacCommand26get_repeat_commands_lengthEv($3) | 0) & 255) + $5 | 0; //@line 17564
 if (!$2) {
  $$011 = -1003; //@line 17567
  STACKTOP = sp; //@line 17568
  return $$011 | 0; //@line 17568
 }
 do {
  if (!(HEAP8[$0 + 1156 >> 0] | 0)) {
   $$pre$phi13Z2D = $0 + 1097 | 0; //@line 17576
  } else {
   $13 = HEAP32[$0 >> 2] | 0; //@line 17578
   $14 = $0 + 1097 | 0; //@line 17579
   $AsyncCtx5 = _emscripten_alloc_async_context(48, sp) | 0; //@line 17582
   __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($13, 0, $14, $0 + 1096 | 0, $0 + 964 | 0) | 0; //@line 17583
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 530; //@line 17586
    HEAP32[$AsyncCtx5 + 4 >> 2] = $14; //@line 17588
    HEAP32[$AsyncCtx5 + 8 >> 2] = $0; //@line 17590
    HEAP32[$AsyncCtx5 + 12 >> 2] = $0; //@line 17592
    HEAP32[$AsyncCtx5 + 16 >> 2] = $2; //@line 17594
    HEAP32[$AsyncCtx5 + 20 >> 2] = $8; //@line 17596
    HEAP32[$AsyncCtx5 + 24 >> 2] = $3; //@line 17598
    HEAP32[$AsyncCtx5 + 28 >> 2] = $vararg_buffer; //@line 17600
    HEAP32[$AsyncCtx5 + 32 >> 2] = $vararg_buffer; //@line 17602
    HEAP32[$AsyncCtx5 + 36 >> 2] = $vararg_buffer1; //@line 17604
    HEAP32[$AsyncCtx5 + 40 >> 2] = $vararg_buffer1; //@line 17606
    HEAP8[$AsyncCtx5 + 44 >> 0] = $1; //@line 17608
    sp = STACKTOP; //@line 17609
    STACKTOP = sp; //@line 17610
    return 0; //@line 17610
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 17612
    $$pre$phi13Z2D = $14; //@line 17613
    break;
   }
  }
 } while (0);
 $30 = $0 + 369 | 0; //@line 17620
 $33 = __ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$0 >> 2] | 0, HEAP8[$$pre$phi13Z2D >> 0] | 0, (HEAP8[$30 >> 0] | 0) != 0) | 0; //@line 17623
 HEAP8[$2 + 1 >> 0] = $33; //@line 17625
 $35 = $33 & 255; //@line 17626
 $36 = $8 & 255; //@line 17627
 if ($36 >>> 0 > $35 >>> 0) {
  HEAP8[$2 >> 0] = $33; //@line 17630
  __ZN14LoRaMacCommand20clear_command_bufferEv($3); //@line 17631
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($3); //@line 17632
  $$0 = 0; //@line 17633
 } else {
  HEAP8[$2 >> 0] = $35 - $8; //@line 17637
  $$0 = $36; //@line 17638
 }
 $40 = HEAP8[$$pre$phi13Z2D >> 0] | 0; //@line 17640
 _printf(12943, $vararg_buffer) | 0; //@line 17641
 _printf(13269, $vararg_buffer1) | 0; //@line 17642
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 17643
 _putchar(10) | 0; //@line 17644
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 531; //@line 17647
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 17649
  HEAP32[$AsyncCtx + 8 >> 2] = $30; //@line 17651
  HEAP8[$AsyncCtx + 12 >> 0] = $40; //@line 17653
  HEAP8[$AsyncCtx + 13 >> 0] = $1; //@line 17655
  HEAP32[$AsyncCtx + 16 >> 2] = $$0; //@line 17657
  sp = STACKTOP; //@line 17658
  STACKTOP = sp; //@line 17659
  return 0; //@line 17659
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17661
 $51 = $$0 + ($1 & 255) | 0; //@line 17667
 $or$cond$i = $51 >>> 0 < 256 & $51 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$0 >> 2] | 0, $40, (HEAP8[$30 >> 0] | 0) != 0) | 0) & 255) >>> 0; //@line 17671
 $$011 = $or$cond$i ? 0 : -1010; //@line 17673
 STACKTOP = sp; //@line 17674
 return $$011 | 0; //@line 17674
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_321($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 5544
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5546
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5548
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5550
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5552
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5554
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5556
 $15 = HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0; //@line 5559
 if (!$15) {
  $24 = HEAP32[$2 >> 2] | 0; //@line 5562
  $26 = $10 + 12 | 0; //@line 5564
  HEAP32[$10 >> 2] = 515; //@line 5565
  HEAP32[$10 + 4 >> 2] = 0; //@line 5567
  HEAP32[$10 + 8 >> 2] = $4; //@line 5569
  HEAP32[$26 >> 2] = 848; //@line 5570
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(28) | 0; //@line 5571
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($24, $4 + 1036 | 0, $10); //@line 5572
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 516; //@line 5575
   $27 = $ReallocAsyncCtx8 + 4 | 0; //@line 5576
   HEAP32[$27 >> 2] = $2; //@line 5577
   $28 = $ReallocAsyncCtx8 + 8 | 0; //@line 5578
   HEAP32[$28 >> 2] = $4; //@line 5579
   $29 = $ReallocAsyncCtx8 + 12 | 0; //@line 5580
   HEAP32[$29 >> 2] = $6; //@line 5581
   $30 = $ReallocAsyncCtx8 + 16 | 0; //@line 5582
   HEAP32[$30 >> 2] = $8; //@line 5583
   $31 = $ReallocAsyncCtx8 + 20 | 0; //@line 5584
   HEAP32[$31 >> 2] = $10; //@line 5585
   $32 = $ReallocAsyncCtx8 + 24 | 0; //@line 5586
   HEAP32[$32 >> 2] = $26; //@line 5587
   sp = STACKTOP; //@line 5588
   return;
  }
  ___async_unwind = 0; //@line 5591
  HEAP32[$ReallocAsyncCtx8 >> 2] = 516; //@line 5592
  $27 = $ReallocAsyncCtx8 + 4 | 0; //@line 5593
  HEAP32[$27 >> 2] = $2; //@line 5594
  $28 = $ReallocAsyncCtx8 + 8 | 0; //@line 5595
  HEAP32[$28 >> 2] = $4; //@line 5596
  $29 = $ReallocAsyncCtx8 + 12 | 0; //@line 5597
  HEAP32[$29 >> 2] = $6; //@line 5598
  $30 = $ReallocAsyncCtx8 + 16 | 0; //@line 5599
  HEAP32[$30 >> 2] = $8; //@line 5600
  $31 = $ReallocAsyncCtx8 + 20 | 0; //@line 5601
  HEAP32[$31 >> 2] = $10; //@line 5602
  $32 = $ReallocAsyncCtx8 + 24 | 0; //@line 5603
  HEAP32[$32 >> 2] = $26; //@line 5604
  sp = STACKTOP; //@line 5605
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 5609
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 5610
  FUNCTION_TABLE_vi[$18 & 1023]($12); //@line 5611
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 514; //@line 5614
   $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 5615
   HEAP32[$19 >> 2] = $2; //@line 5616
   $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 5617
   HEAP32[$20 >> 2] = $4; //@line 5618
   $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 5619
   HEAP32[$21 >> 2] = $6; //@line 5620
   $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 5621
   HEAP32[$22 >> 2] = $8; //@line 5622
   $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 5623
   HEAP32[$23 >> 2] = $10; //@line 5624
   sp = STACKTOP; //@line 5625
   return;
  }
  ___async_unwind = 0; //@line 5628
  HEAP32[$ReallocAsyncCtx2 >> 2] = 514; //@line 5629
  $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 5630
  HEAP32[$19 >> 2] = $2; //@line 5631
  $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 5632
  HEAP32[$20 >> 2] = $4; //@line 5633
  $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 5634
  HEAP32[$21 >> 2] = $6; //@line 5635
  $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 5636
  HEAP32[$22 >> 2] = $8; //@line 5637
  $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 5638
  HEAP32[$23 >> 2] = $10; //@line 5639
  sp = STACKTOP; //@line 5640
  return;
 }
}
function _mbedtls_ccm_free($0) {
 $0 = $0 | 0;
 var $13 = 0, $17 = 0, $21 = 0, $25 = 0, $29 = 0, $33 = 0, $37 = 0, $41 = 0, $45 = 0, $49 = 0, $5 = 0, $53 = 0, $57 = 0, $61 = 0, $65 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1941
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1942
 _mbedtls_cipher_free($0); //@line 1943
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 657; //@line 1946
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1948
  sp = STACKTOP; //@line 1949
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1952
  HEAP8[$0 >> 0] = 0; //@line 1954
  HEAP8[$0 + 1 >> 0] = 0; //@line 1956
  HEAP8[$0 + 2 >> 0] = 0; //@line 1958
  $5 = $0 + 4 | 0; //@line 1959
  HEAP8[$0 + 3 >> 0] = 0; //@line 1960
  HEAP8[$5 >> 0] = 0; //@line 1962
  HEAP8[$5 + 1 >> 0] = 0; //@line 1964
  HEAP8[$5 + 2 >> 0] = 0; //@line 1966
  $9 = $5 + 4 | 0; //@line 1967
  HEAP8[$5 + 3 >> 0] = 0; //@line 1968
  HEAP8[$9 >> 0] = 0; //@line 1970
  HEAP8[$9 + 1 >> 0] = 0; //@line 1972
  HEAP8[$9 + 2 >> 0] = 0; //@line 1974
  $13 = $5 + 8 | 0; //@line 1975
  HEAP8[$9 + 3 >> 0] = 0; //@line 1976
  HEAP8[$13 >> 0] = 0; //@line 1978
  HEAP8[$13 + 1 >> 0] = 0; //@line 1980
  HEAP8[$13 + 2 >> 0] = 0; //@line 1982
  $17 = $5 + 12 | 0; //@line 1983
  HEAP8[$13 + 3 >> 0] = 0; //@line 1984
  HEAP8[$17 >> 0] = 0; //@line 1986
  HEAP8[$17 + 1 >> 0] = 0; //@line 1988
  HEAP8[$17 + 2 >> 0] = 0; //@line 1990
  $21 = $5 + 16 | 0; //@line 1991
  HEAP8[$17 + 3 >> 0] = 0; //@line 1992
  HEAP8[$21 >> 0] = 0; //@line 1994
  HEAP8[$21 + 1 >> 0] = 0; //@line 1996
  HEAP8[$21 + 2 >> 0] = 0; //@line 1998
  $25 = $5 + 20 | 0; //@line 1999
  HEAP8[$21 + 3 >> 0] = 0; //@line 2000
  HEAP8[$25 >> 0] = 0; //@line 2002
  HEAP8[$25 + 1 >> 0] = 0; //@line 2004
  HEAP8[$25 + 2 >> 0] = 0; //@line 2006
  $29 = $5 + 24 | 0; //@line 2007
  HEAP8[$25 + 3 >> 0] = 0; //@line 2008
  HEAP8[$29 >> 0] = 0; //@line 2010
  HEAP8[$29 + 1 >> 0] = 0; //@line 2012
  HEAP8[$29 + 2 >> 0] = 0; //@line 2014
  $33 = $5 + 28 | 0; //@line 2015
  HEAP8[$29 + 3 >> 0] = 0; //@line 2016
  HEAP8[$33 >> 0] = 0; //@line 2018
  HEAP8[$33 + 1 >> 0] = 0; //@line 2020
  HEAP8[$33 + 2 >> 0] = 0; //@line 2022
  $37 = $5 + 32 | 0; //@line 2023
  HEAP8[$33 + 3 >> 0] = 0; //@line 2024
  HEAP8[$37 >> 0] = 0; //@line 2026
  HEAP8[$37 + 1 >> 0] = 0; //@line 2028
  HEAP8[$37 + 2 >> 0] = 0; //@line 2030
  $41 = $5 + 36 | 0; //@line 2031
  HEAP8[$37 + 3 >> 0] = 0; //@line 2032
  HEAP8[$41 >> 0] = 0; //@line 2034
  HEAP8[$41 + 1 >> 0] = 0; //@line 2036
  HEAP8[$41 + 2 >> 0] = 0; //@line 2038
  $45 = $5 + 40 | 0; //@line 2039
  HEAP8[$41 + 3 >> 0] = 0; //@line 2040
  HEAP8[$45 >> 0] = 0; //@line 2042
  HEAP8[$45 + 1 >> 0] = 0; //@line 2044
  HEAP8[$45 + 2 >> 0] = 0; //@line 2046
  $49 = $5 + 44 | 0; //@line 2047
  HEAP8[$45 + 3 >> 0] = 0; //@line 2048
  HEAP8[$49 >> 0] = 0; //@line 2050
  HEAP8[$49 + 1 >> 0] = 0; //@line 2052
  HEAP8[$49 + 2 >> 0] = 0; //@line 2054
  $53 = $5 + 48 | 0; //@line 2055
  HEAP8[$49 + 3 >> 0] = 0; //@line 2056
  HEAP8[$53 >> 0] = 0; //@line 2058
  HEAP8[$53 + 1 >> 0] = 0; //@line 2060
  HEAP8[$53 + 2 >> 0] = 0; //@line 2062
  $57 = $5 + 52 | 0; //@line 2063
  HEAP8[$53 + 3 >> 0] = 0; //@line 2064
  HEAP8[$57 >> 0] = 0; //@line 2066
  HEAP8[$57 + 1 >> 0] = 0; //@line 2068
  HEAP8[$57 + 2 >> 0] = 0; //@line 2070
  $61 = $5 + 56 | 0; //@line 2071
  HEAP8[$57 + 3 >> 0] = 0; //@line 2072
  HEAP8[$61 >> 0] = 0; //@line 2074
  HEAP8[$61 + 1 >> 0] = 0; //@line 2076
  HEAP8[$61 + 2 >> 0] = 0; //@line 2078
  $65 = $5 + 60 | 0; //@line 2079
  HEAP8[$61 + 3 >> 0] = 0; //@line 2080
  HEAP8[$65 >> 0] = 0; //@line 2082
  HEAP8[$65 + 1 >> 0] = 0; //@line 2084
  HEAP8[$65 + 2 >> 0] = 0; //@line 2086
  HEAP8[$65 + 3 >> 0] = 0; //@line 2087
  return;
 }
}
function _vfprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $13 = 0, $14 = 0, $19 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $43 = 0, $5 = 0, $51 = 0, $6 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 11254
 STACKTOP = STACKTOP + 224 | 0; //@line 11255
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 11255
 $3 = sp + 120 | 0; //@line 11256
 $4 = sp + 80 | 0; //@line 11257
 $5 = sp; //@line 11258
 $6 = sp + 136 | 0; //@line 11259
 dest = $4; //@line 11260
 stop = dest + 40 | 0; //@line 11260
 do {
  HEAP32[dest >> 2] = 0; //@line 11260
  dest = dest + 4 | 0; //@line 11260
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 11262
 if ((_printf_core(0, $1, $3, $5, $4) | 0) < 0) {
  $$0 = -1; //@line 11266
 } else {
  if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
   $43 = ___lockfile($0) | 0; //@line 11273
  } else {
   $43 = 0; //@line 11275
  }
  $13 = HEAP32[$0 >> 2] | 0; //@line 11277
  $14 = $13 & 32; //@line 11278
  if ((HEAP8[$0 + 74 >> 0] | 0) < 1) {
   HEAP32[$0 >> 2] = $13 & -33; //@line 11284
  }
  $19 = $0 + 48 | 0; //@line 11286
  do {
   if (!(HEAP32[$19 >> 2] | 0)) {
    $23 = $0 + 44 | 0; //@line 11291
    $24 = HEAP32[$23 >> 2] | 0; //@line 11292
    HEAP32[$23 >> 2] = $6; //@line 11293
    $25 = $0 + 28 | 0; //@line 11294
    HEAP32[$25 >> 2] = $6; //@line 11295
    $26 = $0 + 20 | 0; //@line 11296
    HEAP32[$26 >> 2] = $6; //@line 11297
    HEAP32[$19 >> 2] = 80; //@line 11298
    $28 = $0 + 16 | 0; //@line 11300
    HEAP32[$28 >> 2] = $6 + 80; //@line 11301
    $29 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 11302
    if (!$24) {
     $$1 = $29; //@line 11305
    } else {
     $32 = HEAP32[$0 + 36 >> 2] | 0; //@line 11308
     $AsyncCtx = _emscripten_alloc_async_context(64, sp) | 0; //@line 11309
     FUNCTION_TABLE_iiii[$32 & 15]($0, 0, 0) | 0; //@line 11310
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 741; //@line 11313
      HEAP32[$AsyncCtx + 4 >> 2] = $26; //@line 11315
      HEAP32[$AsyncCtx + 8 >> 2] = $29; //@line 11317
      HEAP32[$AsyncCtx + 12 >> 2] = $24; //@line 11319
      HEAP32[$AsyncCtx + 16 >> 2] = $23; //@line 11321
      HEAP32[$AsyncCtx + 20 >> 2] = $19; //@line 11323
      HEAP32[$AsyncCtx + 24 >> 2] = $28; //@line 11325
      HEAP32[$AsyncCtx + 28 >> 2] = $25; //@line 11327
      HEAP32[$AsyncCtx + 32 >> 2] = $0; //@line 11329
      HEAP32[$AsyncCtx + 36 >> 2] = $14; //@line 11331
      HEAP32[$AsyncCtx + 40 >> 2] = $43; //@line 11333
      HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 11335
      HEAP32[$AsyncCtx + 48 >> 2] = $6; //@line 11337
      HEAP32[$AsyncCtx + 52 >> 2] = $5; //@line 11339
      HEAP32[$AsyncCtx + 56 >> 2] = $4; //@line 11341
      HEAP32[$AsyncCtx + 60 >> 2] = $3; //@line 11343
      sp = STACKTOP; //@line 11344
      STACKTOP = sp; //@line 11345
      return 0; //@line 11345
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 11347
      $$ = (HEAP32[$26 >> 2] | 0) == 0 ? -1 : $29; //@line 11350
      HEAP32[$23 >> 2] = $24; //@line 11351
      HEAP32[$19 >> 2] = 0; //@line 11352
      HEAP32[$28 >> 2] = 0; //@line 11353
      HEAP32[$25 >> 2] = 0; //@line 11354
      HEAP32[$26 >> 2] = 0; //@line 11355
      $$1 = $$; //@line 11356
      break;
     }
    }
   } else {
    $$1 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 11362
   }
  } while (0);
  $51 = HEAP32[$0 >> 2] | 0; //@line 11365
  HEAP32[$0 >> 2] = $51 | $14; //@line 11370
  if ($43 | 0) {
   ___unlockfile($0); //@line 11373
  }
  $$0 = ($51 & 32 | 0) == 0 ? $$1 : -1; //@line 11375
 }
 STACKTOP = sp; //@line 11377
 return $$0 | 0; //@line 11377
}
function __ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb_362($0) {
 $0 = $0 | 0;
 var $$ = 0, $$sink = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $30 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $44 = 0, $6 = 0, $65 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17723
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17727
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17729
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17731
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17733
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 17735
 $14 = HEAP8[$0 + 25 >> 0] | 0; //@line 17737
 $16 = HEAP8[$0 + 26 >> 0] | 0; //@line 17739
 $18 = HEAP8[$0 + 27 >> 0] | 0; //@line 17741
 $20 = HEAP8[$0 + 28 >> 0] | 0; //@line 17743
 $22 = HEAP16[$0 + 30 >> 1] | 0; //@line 17745
 $24 = HEAP16[$0 + 32 >> 1] | 0; //@line 17747
 $26 = HEAP32[$0 + 36 >> 2] | 0; //@line 17749
 $30 = HEAP32[$0 + 44 >> 2] | 0; //@line 17753
 $34 = HEAP8[$0 + 52 >> 0] | 0; //@line 17757
 $36 = HEAP8[$0 + 53 >> 0] | 0; //@line 17759
 $38 = HEAP8[$0 + 54 >> 0] | 0; //@line 17761
 $40 = HEAP32[$0 + 56 >> 2] | 0; //@line 17763
 $44 = HEAP32[$0 + 64 >> 2] | 0; //@line 17767
 switch (HEAP32[$0 + 4 >> 2] | 0) {
 case 0:
  {
   HEAP32[$4 + 704 >> 2] = $6; //@line 17773
   HEAP32[$4 + 712 >> 2] = $8; //@line 17775
   HEAP32[$4 + 708 >> 2] = $10; //@line 17777
   HEAP8[$4 + 718 >> 0] = $12; //@line 17779
   HEAP8[$4 + 719 >> 0] = $14; //@line 17781
   HEAP8[$4 + 720 >> 0] = $16; //@line 17783
   HEAP8[$4 + 721 >> 0] = $18; //@line 17785
   HEAP8[$4 + 722 >> 0] = $20; //@line 17787
   HEAP16[$4 + 716 >> 1] = $22; //@line 17789
   HEAP32[$4 + 728 >> 2] = ~~(1.0 / +($8 >>> 0) * 8.0 * +($24 & 65535) * 1.0e3) >>> 0; //@line 17798
   _printf(10880, $26) | 0; //@line 17799
   _printf(11513, $30) | 0; //@line 17800
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 17801
   _putchar(10) | 0; //@line 17802
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 58; //@line 17805
    sp = STACKTOP; //@line 17806
    return;
   }
   ___async_unwind = 0; //@line 17809
   HEAP32[$ReallocAsyncCtx2 >> 2] = 58; //@line 17810
   sp = STACKTOP; //@line 17811
   return;
  }
 case 1:
  {
   if ($6 >>> 0 > 2) {
    while (1) {}
   }
   $65 = $6 + 7 | 0; //@line 17821
   HEAP32[$4 + 752 >> 2] = $65; //@line 17823
   HEAP32[$4 + 756 >> 2] = $8; //@line 17825
   HEAP8[$4 + 761 >> 0] = $34; //@line 17827
   HEAP16[$4 + 762 >> 1] = $22; //@line 17829
   HEAP8[$4 + 764 >> 0] = $12; //@line 17831
   HEAP8[$4 + 765 >> 0] = $14; //@line 17833
   HEAP8[$4 + 766 >> 0] = $16; //@line 17835
   HEAP8[$4 + 767 >> 0] = $36; //@line 17837
   HEAP8[$4 + 768 >> 0] = $38; //@line 17839
   HEAP8[$4 + 769 >> 0] = $18; //@line 17841
   HEAP8[$4 + 770 >> 0] = $20; //@line 17843
   $$ = $8 >>> 0 > 6 ? $8 : 6; //@line 17845
   if (($6 | 0) == 0 & (($$ >>> 0 < 12 ? $$ : 12) + -11 | 0) >>> 0 < 2) {
    label = 10; //@line 17853
   } else {
    if (($65 | 0) == 8 & $$ >>> 0 > 11) {
     label = 10; //@line 17859
    } else {
     $$sink = 0; //@line 17861
    }
   }
   if ((label | 0) == 10) {
    $$sink = 1; //@line 17865
   }
   HEAP8[$4 + 760 >> 0] = $$sink; //@line 17868
   _printf(10880, $40) | 0; //@line 17869
   _printf(11494, $44) | 0; //@line 17870
   $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 17871
   _putchar(10) | 0; //@line 17872
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 59; //@line 17875
    sp = STACKTOP; //@line 17876
    return;
   }
   ___async_unwind = 0; //@line 17879
   HEAP32[$ReallocAsyncCtx >> 2] = 59; //@line 17880
   sp = STACKTOP; //@line 17881
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_399($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 20713
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20715
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20717
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20719
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20721
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20723
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20725
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20727
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20729
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20731
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20733
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20737
 $33 = (HEAP8[$10 + 770 >> 0] | 0) == 0; //@line 20746
 _printf(10880, HEAP32[$0 + 56 >> 2] | 0) | 0; //@line 20747
 if ($33) {
  HEAP32[$24 >> 2] = 6; //@line 20749
  _printf(10946, $24) | 0; //@line 20750
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(24) | 0; //@line 20751
  _putchar(10) | 0; //@line 20752
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 77; //@line 20755
   $39 = $ReallocAsyncCtx8 + 4 | 0; //@line 20756
   HEAP32[$39 >> 2] = $10; //@line 20757
   $40 = $ReallocAsyncCtx8 + 8 | 0; //@line 20758
   HEAP32[$40 >> 2] = $12; //@line 20759
   $41 = $ReallocAsyncCtx8 + 12 | 0; //@line 20760
   HEAP32[$41 >> 2] = $14; //@line 20761
   $42 = $ReallocAsyncCtx8 + 16 | 0; //@line 20762
   HEAP32[$42 >> 2] = $16; //@line 20763
   $43 = $ReallocAsyncCtx8 + 20 | 0; //@line 20764
   HEAP32[$43 >> 2] = $18; //@line 20765
   sp = STACKTOP; //@line 20766
   return;
  }
  ___async_unwind = 0; //@line 20769
  HEAP32[$ReallocAsyncCtx8 >> 2] = 77; //@line 20770
  $39 = $ReallocAsyncCtx8 + 4 | 0; //@line 20771
  HEAP32[$39 >> 2] = $10; //@line 20772
  $40 = $ReallocAsyncCtx8 + 8 | 0; //@line 20773
  HEAP32[$40 >> 2] = $12; //@line 20774
  $41 = $ReallocAsyncCtx8 + 12 | 0; //@line 20775
  HEAP32[$41 >> 2] = $14; //@line 20776
  $42 = $ReallocAsyncCtx8 + 16 | 0; //@line 20777
  HEAP32[$42 >> 2] = $16; //@line 20778
  $43 = $ReallocAsyncCtx8 + 20 | 0; //@line 20779
  HEAP32[$43 >> 2] = $18; //@line 20780
  sp = STACKTOP; //@line 20781
  return;
 } else {
  HEAP32[$20 >> 2] = 5; //@line 20784
  _printf(10946, $20) | 0; //@line 20785
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(24) | 0; //@line 20786
  _putchar(10) | 0; //@line 20787
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 74; //@line 20790
   $34 = $ReallocAsyncCtx10 + 4 | 0; //@line 20791
   HEAP32[$34 >> 2] = $10; //@line 20792
   $35 = $ReallocAsyncCtx10 + 8 | 0; //@line 20793
   HEAP32[$35 >> 2] = $2; //@line 20794
   $36 = $ReallocAsyncCtx10 + 12 | 0; //@line 20795
   HEAP32[$36 >> 2] = $4; //@line 20796
   $37 = $ReallocAsyncCtx10 + 16 | 0; //@line 20797
   HEAP32[$37 >> 2] = $6; //@line 20798
   $38 = $ReallocAsyncCtx10 + 20 | 0; //@line 20799
   HEAP32[$38 >> 2] = $8; //@line 20800
   sp = STACKTOP; //@line 20801
   return;
  }
  ___async_unwind = 0; //@line 20804
  HEAP32[$ReallocAsyncCtx10 >> 2] = 74; //@line 20805
  $34 = $ReallocAsyncCtx10 + 4 | 0; //@line 20806
  HEAP32[$34 >> 2] = $10; //@line 20807
  $35 = $ReallocAsyncCtx10 + 8 | 0; //@line 20808
  HEAP32[$35 >> 2] = $2; //@line 20809
  $36 = $ReallocAsyncCtx10 + 12 | 0; //@line 20810
  HEAP32[$36 >> 2] = $4; //@line 20811
  $37 = $ReallocAsyncCtx10 + 16 | 0; //@line 20812
  HEAP32[$37 >> 2] = $6; //@line 20813
  $38 = $ReallocAsyncCtx10 + 20 | 0; //@line 20814
  HEAP32[$38 >> 2] = $8; //@line 20815
  sp = STACKTOP; //@line 20816
  return;
 }
}
function __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb($0) {
 $0 = $0 | 0;
 var $$1 = 0, $13 = 0, $19 = 0, $2 = 0, $21 = 0, $25 = 0, $29 = 0, $33 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 32955
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32957
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32959
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32961
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32963
 if (HEAP32[$2 + 968 >> 2] | 0) {
  $$1 = -1e3; //@line 32968
  $46 = ___async_retval; //@line 32969
  HEAP32[$46 >> 2] = $$1; //@line 32970
  return;
 }
 $13 = HEAP8[$4 + 5 >> 0] | 0; //@line 32974
 if ($13 << 24 >> 24 > (__ZN7LoRaPHY23get_minimum_tx_datarateEv(HEAP32[$2 >> 2] | 0) | 0) << 24 >> 24) {
  $29 = $13; //@line 32979
 } else {
  $29 = __ZN7LoRaPHY23get_minimum_tx_datarateEv(HEAP32[$2 >> 2] | 0) | 0; //@line 32983
 }
 HEAP8[$8 >> 0] = 0; //@line 32985
 $19 = $2 + 288 | 0; //@line 32986
 __ZN11LoRaMacMcps18reset_confirmationEv($19); //@line 32987
 HEAP8[$2 + 895 >> 0] = 1; //@line 32989
 $21 = $2 + 894 | 0; //@line 32990
 HEAP8[$21 >> 0] = 1; //@line 32991
 switch (HEAP32[$4 >> 2] | 0) {
 case 0:
  {
   HEAP8[$8 >> 0] = 64; //@line 32995
   label = 9; //@line 32996
   break;
  }
 case 1:
  {
   HEAP8[$8 >> 0] = -128; //@line 33000
   HEAP8[$21 >> 0] = HEAP8[$4 + 6 >> 0] | 0; //@line 33003
   label = 9; //@line 33004
   break;
  }
 case 3:
  {
   HEAP8[$8 >> 0] = -32; //@line 33008
   label = 9; //@line 33009
   break;
  }
 default:
  {}
 }
 do {
  if ((label | 0) == 9) {
   $25 = $2 + 1156 | 0; //@line 33017
   if (!(HEAP8[$25 >> 0] | 0)) {
    if (!(__ZN7LoRaPHY18verify_tx_datarateEhb(HEAP32[$2 >> 2] | 0, $29, 0) | 0)) {
     break;
    }
    HEAP8[$2 + 1097 >> 0] = $29; //@line 33027
    $38 = HEAP8[$25 >> 0] << 7 & 255; //@line 33030
   } else {
    $38 = -128; //@line 33032
   }
   $33 = HEAP8[$4 + 4 >> 0] | 0; //@line 33035
   $35 = HEAP32[$4 + 8 >> 2] | 0; //@line 33037
   $37 = HEAP16[$4 + 12 >> 1] | 0; //@line 33039
   HEAP8[$6 >> 0] = $38; //@line 33040
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 33041
   $39 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($2, $8, $6, $33, $35, $37) | 0; //@line 33042
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 544; //@line 33045
    $40 = $ReallocAsyncCtx2 + 4 | 0; //@line 33046
    HEAP32[$40 >> 2] = $19; //@line 33047
    $41 = $ReallocAsyncCtx2 + 8 | 0; //@line 33048
    HEAP32[$41 >> 2] = $2; //@line 33049
    $42 = $ReallocAsyncCtx2 + 12 | 0; //@line 33050
    HEAP32[$42 >> 2] = $6; //@line 33051
    $43 = $ReallocAsyncCtx2 + 16 | 0; //@line 33052
    HEAP32[$43 >> 2] = $8; //@line 33053
    $44 = $ReallocAsyncCtx2 + 20 | 0; //@line 33054
    HEAP32[$44 >> 2] = $4; //@line 33055
    sp = STACKTOP; //@line 33056
    return;
   }
   HEAP32[___async_retval >> 2] = $39; //@line 33060
   ___async_unwind = 0; //@line 33061
   HEAP32[$ReallocAsyncCtx2 >> 2] = 544; //@line 33062
   $40 = $ReallocAsyncCtx2 + 4 | 0; //@line 33063
   HEAP32[$40 >> 2] = $19; //@line 33064
   $41 = $ReallocAsyncCtx2 + 8 | 0; //@line 33065
   HEAP32[$41 >> 2] = $2; //@line 33066
   $42 = $ReallocAsyncCtx2 + 12 | 0; //@line 33067
   HEAP32[$42 >> 2] = $6; //@line 33068
   $43 = $ReallocAsyncCtx2 + 16 | 0; //@line 33069
   HEAP32[$43 >> 2] = $8; //@line 33070
   $44 = $ReallocAsyncCtx2 + 20 | 0; //@line 33071
   HEAP32[$44 >> 2] = $4; //@line 33072
   sp = STACKTOP; //@line 33073
   return;
  }
 } while (0);
 $$1 = -1003; //@line 33077
 $46 = ___async_retval; //@line 33078
 HEAP32[$46 >> 2] = $$1; //@line 33079
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_475($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $24 = 0, $28 = 0, $36 = 0, $4 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 33848
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33852
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 33856
 $10 = HEAP8[$0 + 14 >> 0] | 0; //@line 33858
 $12 = HEAP32[$0 + 16 >> 2] | 0; //@line 33860
 $14 = HEAP32[$0 + 20 >> 2] | 0; //@line 33862
 $16 = HEAP32[$0 + 24 >> 2] | 0; //@line 33864
 $18 = HEAP32[$0 + 28 >> 2] | 0; //@line 33866
 $20 = HEAP32[$0 + 32 >> 2] | 0; //@line 33868
 $24 = HEAP32[$0 + 40 >> 2] | 0; //@line 33872
 $28 = HEAP32[$0 + 48 >> 2] | 0; //@line 33876
 $36 = ($10 & 255) + ($8 & 255) | 0; //@line 33884
 if (!($36 >>> 0 < 256 & $36 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0, HEAP8[$0 + 12 >> 0] | 0, (HEAP8[$4 + 369 >> 0] | 0) != 0) | 0) & 255) >>> 0)) {
  HEAP32[___async_retval >> 2] = -1010; //@line 33891
  return;
 }
 HEAP32[$4 + 972 >> 2] = (HEAP32[$4 + 1172 >> 2] | 0) + (HEAP32[$4 + 1112 >> 2] | 0); //@line 33900
 HEAP32[$4 + 976 >> 2] = (HEAP32[$4 + 1196 >> 2] | 0) + (HEAP32[$4 + 1116 >> 2] | 0); //@line 33907
 if (!(HEAP32[$16 >> 2] | 0)) {
  $54 = HEAP8[$18 >> 0] | 0; //@line 33911
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 33912
  __ZN7LoRaMac21send_frame_on_channelEh($4, $54) | 0; //@line 33913
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 479; //@line 33916
   $55 = $ReallocAsyncCtx10 + 4 | 0; //@line 33917
   HEAP32[$55 >> 2] = $12; //@line 33918
   $56 = $ReallocAsyncCtx10 + 8 | 0; //@line 33919
   HEAP32[$56 >> 2] = $14; //@line 33920
   sp = STACKTOP; //@line 33921
   return;
  }
  ___async_unwind = 0; //@line 33924
  HEAP32[$ReallocAsyncCtx10 >> 2] = 479; //@line 33925
  $55 = $ReallocAsyncCtx10 + 4 | 0; //@line 33926
  HEAP32[$55 >> 2] = $12; //@line 33927
  $56 = $ReallocAsyncCtx10 + 8 | 0; //@line 33928
  HEAP32[$56 >> 2] = $14; //@line 33929
  sp = STACKTOP; //@line 33930
  return;
 } else {
  $57 = $4 + 968 | 0; //@line 33933
  HEAP32[$57 >> 2] = HEAP32[$57 >> 2] | 16; //@line 33936
  _printf(13229, $20) | 0; //@line 33937
  HEAP32[$24 >> 2] = HEAP32[$16 >> 2]; //@line 33939
  _printf(13293, $24) | 0; //@line 33940
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 33941
  _putchar(10) | 0; //@line 33942
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 480; //@line 33945
   $61 = $ReallocAsyncCtx6 + 4 | 0; //@line 33946
   HEAP32[$61 >> 2] = $28; //@line 33947
   $62 = $ReallocAsyncCtx6 + 8 | 0; //@line 33948
   HEAP32[$62 >> 2] = $4; //@line 33949
   $63 = $ReallocAsyncCtx6 + 12 | 0; //@line 33950
   HEAP32[$63 >> 2] = $16; //@line 33951
   $64 = $ReallocAsyncCtx6 + 16 | 0; //@line 33952
   HEAP32[$64 >> 2] = $12; //@line 33953
   $65 = $ReallocAsyncCtx6 + 20 | 0; //@line 33954
   HEAP32[$65 >> 2] = $14; //@line 33955
   sp = STACKTOP; //@line 33956
   return;
  }
  ___async_unwind = 0; //@line 33959
  HEAP32[$ReallocAsyncCtx6 >> 2] = 480; //@line 33960
  $61 = $ReallocAsyncCtx6 + 4 | 0; //@line 33961
  HEAP32[$61 >> 2] = $28; //@line 33962
  $62 = $ReallocAsyncCtx6 + 8 | 0; //@line 33963
  HEAP32[$62 >> 2] = $4; //@line 33964
  $63 = $ReallocAsyncCtx6 + 12 | 0; //@line 33965
  HEAP32[$63 >> 2] = $16; //@line 33966
  $64 = $ReallocAsyncCtx6 + 16 | 0; //@line 33967
  HEAP32[$64 >> 2] = $12; //@line 33968
  $65 = $ReallocAsyncCtx6 + 20 | 0; //@line 33969
  HEAP32[$65 >> 2] = $14; //@line 33970
  sp = STACKTOP; //@line 33971
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_218($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 34459
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34461
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34463
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34465
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34467
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34469
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 34473
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 34477
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 34479
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 34483
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 34487
 switch ($AsyncRetVal | 0) {
 case 0:
  {
   HEAP32[$2 >> 2] = 6; //@line 34490
   HEAP32[___async_retval >> 2] = 0; //@line 34492
   return;
  }
 case -1014:
  {
   _printf(11863, $20) | 0; //@line 34497
   _printf(12150, $24) | 0; //@line 34498
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 34499
   _putchar(10) | 0; //@line 34500
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 247; //@line 34503
    $28 = $ReallocAsyncCtx12 + 4 | 0; //@line 34504
    HEAP32[$28 >> 2] = $6; //@line 34505
    $29 = $ReallocAsyncCtx12 + 8 | 0; //@line 34506
    HEAP32[$29 >> 2] = $2; //@line 34507
    $30 = $ReallocAsyncCtx12 + 12 | 0; //@line 34508
    HEAP32[$30 >> 2] = $8; //@line 34509
    $31 = $ReallocAsyncCtx12 + 16 | 0; //@line 34510
    HEAP32[$31 >> 2] = $4; //@line 34511
    sp = STACKTOP; //@line 34512
    return;
   }
   ___async_unwind = 0; //@line 34515
   HEAP32[$ReallocAsyncCtx12 >> 2] = 247; //@line 34516
   $28 = $ReallocAsyncCtx12 + 4 | 0; //@line 34517
   HEAP32[$28 >> 2] = $6; //@line 34518
   $29 = $ReallocAsyncCtx12 + 8 | 0; //@line 34519
   HEAP32[$29 >> 2] = $2; //@line 34520
   $30 = $ReallocAsyncCtx12 + 12 | 0; //@line 34521
   HEAP32[$30 >> 2] = $8; //@line 34522
   $31 = $ReallocAsyncCtx12 + 16 | 0; //@line 34523
   HEAP32[$31 >> 2] = $4; //@line 34524
   sp = STACKTOP; //@line 34525
   return;
  }
 default:
  {
   _printf(11863, $10) | 0; //@line 34530
   _printf(12185, $14) | 0; //@line 34531
   $ReallocAsyncCtx11 = _emscripten_realloc_async_context(24) | 0; //@line 34532
   _putchar(10) | 0; //@line 34533
   if (___async) {
    HEAP32[$ReallocAsyncCtx11 >> 2] = 252; //@line 34536
    $32 = $ReallocAsyncCtx11 + 4 | 0; //@line 34537
    HEAP32[$32 >> 2] = $6; //@line 34538
    $33 = $ReallocAsyncCtx11 + 8 | 0; //@line 34539
    HEAP32[$33 >> 2] = $AsyncRetVal; //@line 34540
    $34 = $ReallocAsyncCtx11 + 12 | 0; //@line 34541
    HEAP32[$34 >> 2] = $2; //@line 34542
    $35 = $ReallocAsyncCtx11 + 16 | 0; //@line 34543
    HEAP32[$35 >> 2] = $18; //@line 34544
    $36 = $ReallocAsyncCtx11 + 20 | 0; //@line 34545
    HEAP32[$36 >> 2] = $4; //@line 34546
    sp = STACKTOP; //@line 34547
    return;
   }
   ___async_unwind = 0; //@line 34550
   HEAP32[$ReallocAsyncCtx11 >> 2] = 252; //@line 34551
   $32 = $ReallocAsyncCtx11 + 4 | 0; //@line 34552
   HEAP32[$32 >> 2] = $6; //@line 34553
   $33 = $ReallocAsyncCtx11 + 8 | 0; //@line 34554
   HEAP32[$33 >> 2] = $AsyncRetVal; //@line 34555
   $34 = $ReallocAsyncCtx11 + 12 | 0; //@line 34556
   HEAP32[$34 >> 2] = $2; //@line 34557
   $35 = $ReallocAsyncCtx11 + 16 | 0; //@line 34558
   HEAP32[$35 >> 2] = $18; //@line 34559
   $36 = $ReallocAsyncCtx11 + 20 | 0; //@line 34560
   HEAP32[$36 >> 2] = $4; //@line 34561
   sp = STACKTOP; //@line 34562
   return;
  }
 }
}
function __ZN7LoRaMac10disconnectEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $14 = 0, $18 = 0, $2 = 0, $21 = 0, $29 = 0, $30 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 17438
 $1 = $0 + 356 | 0; //@line 17439
 $2 = HEAP32[$1 >> 2] | 0; //@line 17440
 $AsyncCtx19 = _emscripten_alloc_async_context(12, sp) | 0; //@line 17442
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $0 + 996 | 0); //@line 17443
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 524; //@line 17446
  HEAP32[$AsyncCtx19 + 4 >> 2] = $1; //@line 17448
  HEAP32[$AsyncCtx19 + 8 >> 2] = $0; //@line 17450
  sp = STACKTOP; //@line 17451
  return;
 }
 _emscripten_free_async_context($AsyncCtx19 | 0); //@line 17454
 $6 = HEAP32[$1 >> 2] | 0; //@line 17455
 $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 17457
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($6, $0 + 1016 | 0); //@line 17458
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 525; //@line 17461
  HEAP32[$AsyncCtx15 + 4 >> 2] = $1; //@line 17463
  HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 17465
  sp = STACKTOP; //@line 17466
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 17469
 $10 = HEAP32[$1 >> 2] | 0; //@line 17470
 $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 17472
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($10, $0 + 1036 | 0); //@line 17473
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 526; //@line 17476
  HEAP32[$AsyncCtx11 + 4 >> 2] = $1; //@line 17478
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 17480
  sp = STACKTOP; //@line 17481
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 17484
 $14 = HEAP32[$1 >> 2] | 0; //@line 17485
 $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 17487
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($14, $0 + 1056 | 0); //@line 17488
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 527; //@line 17491
  HEAP32[$AsyncCtx7 + 4 >> 2] = $1; //@line 17493
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 17495
  sp = STACKTOP; //@line 17496
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 17499
 $18 = HEAP32[$1 >> 2] | 0; //@line 17500
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 17502
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($18, $0 + 1076 | 0); //@line 17503
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 528; //@line 17506
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 17508
  sp = STACKTOP; //@line 17509
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17512
 $21 = HEAP32[$0 >> 2] | 0; //@line 17513
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 17514
 __ZN7LoRaPHY18put_radio_to_sleepEv($21); //@line 17515
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 529; //@line 17518
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 17520
  sp = STACKTOP; //@line 17521
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 17524
  HEAP8[$0 + 372 >> 0] = 0; //@line 17526
  HEAP8[$0 + 377 >> 0] = 0; //@line 17528
  HEAP8[$0 + 371 >> 0] = 1; //@line 17530
  HEAP8[$0 + 373 >> 0] = 0; //@line 17532
  HEAP8[$0 + 374 >> 0] = 0; //@line 17534
  HEAP8[$0 + 944 >> 0] = 0; //@line 17536
  $29 = $0 + 968 | 0; //@line 17537
  HEAP32[$29 >> 2] = 0; //@line 17538
  $30 = $0 + 4 | 0; //@line 17539
  __ZN14LoRaMacCommand20clear_command_bufferEv($30); //@line 17540
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($30); //@line 17541
  __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($30); //@line 17542
  HEAP32[$29 >> 2] = 0; //@line 17543
  return;
 }
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_296($0) {
 $0 = $0 | 0;
 var $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $29 = 0, $32 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 4148
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4154
 $14 = HEAP8[$0 + 19 >> 0] | 0; //@line 4164
 $16 = HEAP32[$0 + 20 >> 2] | 0; //@line 4166
 $18 = HEAP32[$0 + 24 >> 2] | 0; //@line 4168
 $20 = HEAP32[$0 + 28 >> 2] | 0; //@line 4170
 $22 = HEAP32[$0 + 32 >> 2] | 0; //@line 4172
 $29 = HEAP32[$6 >> 2] | 0; //@line 4179
 $32 = HEAP32[(HEAP32[$29 >> 2] | 0) + 20 >> 2] | 0; //@line 4182
 $34 = HEAP8[$0 + 17 >> 0] & 1 ? 2 : HEAP8[$0 + 16 >> 0] & 1; //@line 4184
 $35 = HEAP8[$0 + 18 >> 0] | 0; //@line 4185
 if ((HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) == (HEAPU8[(HEAP32[$0 + 8 >> 2] | 0) + 27 >> 0] | 0)) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 4188
  FUNCTION_TABLE_viiiiiiiiiiiiii[$32 & 1]($29, 0, $14, 25e3, $34, $35 * 1e3 | 0, 0, 5, 0, 1, 0, 0, 0, 3e3); //@line 4189
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 614; //@line 4192
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 4193
   HEAP32[$37 >> 2] = $6; //@line 4194
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 4195
   HEAP32[$38 >> 2] = $16; //@line 4196
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 4197
   HEAP32[$39 >> 2] = $18; //@line 4198
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 4199
   HEAP32[$40 >> 2] = $20; //@line 4200
   $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 4201
   HEAP32[$41 >> 2] = $22; //@line 4202
   sp = STACKTOP; //@line 4203
   return;
  }
  ___async_unwind = 0; //@line 4206
  HEAP32[$ReallocAsyncCtx3 >> 2] = 614; //@line 4207
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 4208
  HEAP32[$37 >> 2] = $6; //@line 4209
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 4210
  HEAP32[$38 >> 2] = $16; //@line 4211
  $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 4212
  HEAP32[$39 >> 2] = $18; //@line 4213
  $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 4214
  HEAP32[$40 >> 2] = $20; //@line 4215
  $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 4216
  HEAP32[$41 >> 2] = $22; //@line 4217
  sp = STACKTOP; //@line 4218
  return;
 } else {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 4221
  FUNCTION_TABLE_viiiiiiiiiiiiii[$32 & 1]($29, 1, $14, 0, $34, $35, 1, 8, 0, 1, 0, 0, 0, 3e3); //@line 4222
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 615; //@line 4225
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 4226
   HEAP32[$42 >> 2] = $6; //@line 4227
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 4228
   HEAP32[$43 >> 2] = $16; //@line 4229
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 4230
   HEAP32[$44 >> 2] = $18; //@line 4231
   $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 4232
   HEAP32[$45 >> 2] = $20; //@line 4233
   $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 4234
   HEAP32[$46 >> 2] = $22; //@line 4235
   sp = STACKTOP; //@line 4236
   return;
  }
  ___async_unwind = 0; //@line 4239
  HEAP32[$ReallocAsyncCtx4 >> 2] = 615; //@line 4240
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 4241
  HEAP32[$42 >> 2] = $6; //@line 4242
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 4243
  HEAP32[$43 >> 2] = $16; //@line 4244
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 4245
  HEAP32[$44 >> 2] = $18; //@line 4246
  $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 4247
  HEAP32[$45 >> 2] = $20; //@line 4248
  $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 4249
  HEAP32[$46 >> 2] = $22; //@line 4250
  sp = STACKTOP; //@line 4251
  return;
 }
}
function ___dynamic_cast($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $24 = 0, $30 = 0, $33 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 14785
 STACKTOP = STACKTOP + 64 | 0; //@line 14786
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 14786
 $4 = sp; //@line 14787
 $5 = HEAP32[$0 >> 2] | 0; //@line 14788
 $8 = $0 + (HEAP32[$5 + -8 >> 2] | 0) | 0; //@line 14791
 $10 = HEAP32[$5 + -4 >> 2] | 0; //@line 14793
 HEAP32[$4 >> 2] = $2; //@line 14794
 HEAP32[$4 + 4 >> 2] = $0; //@line 14796
 HEAP32[$4 + 8 >> 2] = $1; //@line 14798
 HEAP32[$4 + 12 >> 2] = $3; //@line 14800
 $14 = $4 + 16 | 0; //@line 14801
 $15 = $4 + 20 | 0; //@line 14802
 $16 = $4 + 24 | 0; //@line 14803
 $17 = $4 + 28 | 0; //@line 14804
 $18 = $4 + 32 | 0; //@line 14805
 $19 = $4 + 40 | 0; //@line 14806
 dest = $14; //@line 14807
 stop = dest + 36 | 0; //@line 14807
 do {
  HEAP32[dest >> 2] = 0; //@line 14807
  dest = dest + 4 | 0; //@line 14807
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 36 >> 1] = 0; //@line 14807
 HEAP8[$14 + 38 >> 0] = 0; //@line 14807
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10, $2, 0) | 0) {
   HEAP32[$4 + 48 >> 2] = 1; //@line 14812
   $24 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 14815
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 14816
   FUNCTION_TABLE_viiiiii[$24 & 3]($10, $4, $8, $8, 1, 0); //@line 14817
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 753; //@line 14820
    HEAP32[$AsyncCtx + 4 >> 2] = $16; //@line 14822
    HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 14824
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 14826
    sp = STACKTOP; //@line 14827
    STACKTOP = sp; //@line 14828
    return 0; //@line 14828
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14830
    $$0 = (HEAP32[$16 >> 2] | 0) == 1 ? $8 : 0; //@line 14834
    break;
   }
  } else {
   $30 = $4 + 36 | 0; //@line 14838
   $33 = HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] | 0; //@line 14841
   $AsyncCtx3 = _emscripten_alloc_async_context(36, sp) | 0; //@line 14842
   FUNCTION_TABLE_viiiii[$33 & 7]($10, $4, $8, 1, 0); //@line 14843
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 754; //@line 14846
    HEAP32[$AsyncCtx3 + 4 >> 2] = $30; //@line 14848
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 14850
    HEAP32[$AsyncCtx3 + 12 >> 2] = $19; //@line 14852
    HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 14854
    HEAP32[$AsyncCtx3 + 20 >> 2] = $18; //@line 14856
    HEAP32[$AsyncCtx3 + 24 >> 2] = $15; //@line 14858
    HEAP32[$AsyncCtx3 + 28 >> 2] = $16; //@line 14860
    HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 14862
    sp = STACKTOP; //@line 14863
    STACKTOP = sp; //@line 14864
    return 0; //@line 14864
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14866
   switch (HEAP32[$30 >> 2] | 0) {
   case 0:
    {
     $$0 = (HEAP32[$19 >> 2] | 0) == 1 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1 ? HEAP32[$15 >> 2] | 0 : 0; //@line 14880
     break L1;
     break;
    }
   case 1:
    {
     break;
    }
   default:
    {
     $$0 = 0; //@line 14888
     break L1;
    }
   }
   if ((HEAP32[$16 >> 2] | 0) != 1) {
    if (!((HEAP32[$19 >> 2] | 0) == 0 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1)) {
     $$0 = 0; //@line 14904
     break;
    }
   }
   $$0 = HEAP32[$14 >> 2] | 0; //@line 14909
  }
 } while (0);
 STACKTOP = sp; //@line 14912
 return $$0 | 0; //@line 14912
}
function __ZN12radio_eventsD2Ev__async_cb_464($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $32 = 0, $35 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 32584
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32586
 $4 = HEAP32[$2 + 76 >> 2] | 0; //@line 32588
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 32593
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 32594
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 64 | 0); //@line 32595
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 331; //@line 32598
   $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 32599
   HEAP32[$9 >> 2] = $2; //@line 32600
   sp = STACKTOP; //@line 32601
   return;
  }
  ___async_unwind = 0; //@line 32604
  HEAP32[$ReallocAsyncCtx3 >> 2] = 331; //@line 32605
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 32606
  HEAP32[$9 >> 2] = $2; //@line 32607
  sp = STACKTOP; //@line 32608
  return;
 }
 $11 = HEAP32[$2 + 60 >> 2] | 0; //@line 32612
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 32617
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 32618
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 48 | 0); //@line 32619
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 332; //@line 32622
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 32623
   HEAP32[$16 >> 2] = $2; //@line 32624
   sp = STACKTOP; //@line 32625
   return;
  }
  ___async_unwind = 0; //@line 32628
  HEAP32[$ReallocAsyncCtx4 >> 2] = 332; //@line 32629
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 32630
  HEAP32[$16 >> 2] = $2; //@line 32631
  sp = STACKTOP; //@line 32632
  return;
 }
 $18 = HEAP32[$2 + 44 >> 2] | 0; //@line 32636
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 32641
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 32642
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 32 | 0); //@line 32643
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 333; //@line 32646
   $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 32647
   HEAP32[$23 >> 2] = $2; //@line 32648
   sp = STACKTOP; //@line 32649
   return;
  }
  ___async_unwind = 0; //@line 32652
  HEAP32[$ReallocAsyncCtx5 >> 2] = 333; //@line 32653
  $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 32654
  HEAP32[$23 >> 2] = $2; //@line 32655
  sp = STACKTOP; //@line 32656
  return;
 }
 $25 = HEAP32[$2 + 28 >> 2] | 0; //@line 32660
 if ($25 | 0) {
  $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 32665
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 32666
  FUNCTION_TABLE_vi[$29 & 1023]($2 + 16 | 0); //@line 32667
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 334; //@line 32670
   $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 32671
   HEAP32[$30 >> 2] = $2; //@line 32672
   sp = STACKTOP; //@line 32673
   return;
  }
  ___async_unwind = 0; //@line 32676
  HEAP32[$ReallocAsyncCtx6 >> 2] = 334; //@line 32677
  $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 32678
  HEAP32[$30 >> 2] = $2; //@line 32679
  sp = STACKTOP; //@line 32680
  return;
 }
 $32 = HEAP32[$2 + 12 >> 2] | 0; //@line 32684
 if (!$32) {
  return;
 }
 $35 = HEAP32[$32 + 8 >> 2] | 0; //@line 32690
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 32691
 FUNCTION_TABLE_vi[$35 & 1023]($2); //@line 32692
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 335; //@line 32695
  sp = STACKTOP; //@line 32696
  return;
 }
 ___async_unwind = 0; //@line 32699
 HEAP32[$ReallocAsyncCtx7 >> 2] = 335; //@line 32700
 sp = STACKTOP; //@line 32701
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_52($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $17 = 0, $21 = 0, $23 = 0, $25 = 0, $27 = 0, $29 = 0, $31 = 0, $4 = 0, $46 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 21446
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21450
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21452
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 21454
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21456
 $trunc = HEAP8[$0 + 24 >> 0] | 0; //@line 21458
 $13 = HEAP32[$0 + 28 >> 2] | 0; //@line 21460
 $17 = HEAP32[$0 + 36 >> 2] | 0; //@line 21464
 $21 = HEAP32[$0 + 44 >> 2] | 0; //@line 21468
 $23 = HEAP32[$0 + 48 >> 2] | 0; //@line 21470
 $25 = HEAP32[$0 + 52 >> 2] | 0; //@line 21472
 $27 = HEAP32[$0 + 56 >> 2] | 0; //@line 21474
 $29 = HEAP32[$0 + 60 >> 2] | 0; //@line 21476
 $31 = HEAP32[$0 + 64 >> 2] | 0; //@line 21478
 HEAP16[$6 + 2232 >> 1] = (HEAP32[$0 + 4 >> 2] | 0) - $4; //@line 21482
 HEAP16[$6 + 2230 >> 1] = $8; //@line 21484
 _memcpy($6 + 1975 | 0, $10 | 0, $4 | 0) | 0; //@line 21486
 switch ($trunc & 15) {
 case 9:
 case 5:
 case 1:
  {
   HEAP32[$6 + 1968 >> 2] = 0; //@line 21491
   HEAP8[$6 + 1972 >> 0] = HEAP8[$21 >> 0] | 0; //@line 21494
   switch ($trunc & 15) {
   case 6:
   case 2:
    {
     label = 5; //@line 21498
     break;
    }
   default:
    {}
   }
   break;
  }
 case 10:
 case 6:
 case 2:
  {
   label = 5; //@line 21507
   break;
  }
 default:
  {}
 }
 if ((label | 0) == 5) {
  HEAP32[$6 + 1968 >> 2] = 1; //@line 21515
  HEAP8[$6 + 1972 >> 0] = HEAP8[$21 >> 0] | 0; //@line 21518
  HEAP8[$6 + 1974 >> 0] = HEAP8[$6 + 2284 >> 0] | 0; //@line 21522
 }
 _printf(12115, $13) | 0; //@line 21524
 $46 = $6 + 2230 | 0; //@line 21525
 $51 = HEAPU16[$6 + 2232 >> 1] | 0; //@line 21530
 HEAP32[$17 >> 2] = HEAPU16[$46 >> 1]; //@line 21531
 HEAP32[$17 + 4 >> 2] = $51; //@line 21533
 _printf(12504, $17) | 0; //@line 21534
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 21535
 _putchar(10) | 0; //@line 21536
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 291; //@line 21539
  $52 = $ReallocAsyncCtx2 + 4 | 0; //@line 21540
  HEAP32[$52 >> 2] = $6; //@line 21541
  $53 = $ReallocAsyncCtx2 + 8 | 0; //@line 21542
  HEAP32[$53 >> 2] = $23; //@line 21543
  $54 = $ReallocAsyncCtx2 + 12 | 0; //@line 21544
  HEAP32[$54 >> 2] = $25; //@line 21545
  $55 = $ReallocAsyncCtx2 + 16 | 0; //@line 21546
  HEAP32[$55 >> 2] = $27; //@line 21547
  $56 = $ReallocAsyncCtx2 + 20 | 0; //@line 21548
  HEAP32[$56 >> 2] = $29; //@line 21549
  $57 = $ReallocAsyncCtx2 + 24 | 0; //@line 21550
  HEAP32[$57 >> 2] = $46; //@line 21551
  $58 = $ReallocAsyncCtx2 + 28 | 0; //@line 21552
  HEAP32[$58 >> 2] = $31; //@line 21553
  sp = STACKTOP; //@line 21554
  return;
 }
 ___async_unwind = 0; //@line 21557
 HEAP32[$ReallocAsyncCtx2 >> 2] = 291; //@line 21558
 $52 = $ReallocAsyncCtx2 + 4 | 0; //@line 21559
 HEAP32[$52 >> 2] = $6; //@line 21560
 $53 = $ReallocAsyncCtx2 + 8 | 0; //@line 21561
 HEAP32[$53 >> 2] = $23; //@line 21562
 $54 = $ReallocAsyncCtx2 + 12 | 0; //@line 21563
 HEAP32[$54 >> 2] = $25; //@line 21564
 $55 = $ReallocAsyncCtx2 + 16 | 0; //@line 21565
 HEAP32[$55 >> 2] = $27; //@line 21566
 $56 = $ReallocAsyncCtx2 + 20 | 0; //@line 21567
 HEAP32[$56 >> 2] = $29; //@line 21568
 $57 = $ReallocAsyncCtx2 + 24 | 0; //@line 21569
 HEAP32[$57 >> 2] = $46; //@line 21570
 $58 = $ReallocAsyncCtx2 + 28 | 0; //@line 21571
 HEAP32[$58 >> 2] = $31; //@line 21572
 sp = STACKTOP; //@line 21573
 return;
}
function __ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_365($0) {
 $0 = $0 | 0;
 var $$ = 0, $$sink = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $28 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $42 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17936
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17940
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 17942
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17944
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17946
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17948
 $14 = HEAP16[$0 + 28 >> 1] | 0; //@line 17950
 $16 = HEAP8[$0 + 30 >> 0] | 0; //@line 17952
 $18 = HEAP8[$0 + 31 >> 0] | 0; //@line 17954
 $20 = HEAP8[$0 + 32 >> 0] | 0; //@line 17956
 $22 = HEAP32[$0 + 36 >> 2] | 0; //@line 17958
 $24 = HEAP32[$0 + 40 >> 2] | 0; //@line 17960
 $28 = HEAP32[$0 + 48 >> 2] | 0; //@line 17964
 $32 = HEAP8[$0 + 56 >> 0] | 0; //@line 17968
 $34 = HEAP8[$0 + 57 >> 0] | 0; //@line 17970
 $36 = HEAP8[$0 + 58 >> 0] | 0; //@line 17972
 $38 = HEAP32[$0 + 60 >> 2] | 0; //@line 17974
 $42 = HEAP32[$0 + 68 >> 2] | 0; //@line 17978
 switch (HEAP32[$0 + 4 >> 2] | 0) {
 case 0:
  {
   HEAP8[$4 + 696 >> 0] = $6; //@line 17984
   HEAP32[$4 + 700 >> 2] = $8; //@line 17986
   HEAP32[$4 + 704 >> 2] = $10; //@line 17988
   HEAP32[$4 + 712 >> 2] = $12; //@line 17990
   HEAP16[$4 + 716 >> 1] = $14; //@line 17992
   HEAP8[$4 + 718 >> 0] = $16; //@line 17994
   HEAP8[$4 + 720 >> 0] = $18; //@line 17996
   HEAP8[$4 + 721 >> 0] = $20; //@line 17998
   HEAP32[$4 + 724 >> 2] = $22; //@line 18000
   _printf(10880, $24) | 0; //@line 18001
   _printf(11476, $28) | 0; //@line 18002
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 18003
   _putchar(10) | 0; //@line 18004
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 62; //@line 18007
    sp = STACKTOP; //@line 18008
    return;
   }
   ___async_unwind = 0; //@line 18011
   HEAP32[$ReallocAsyncCtx2 >> 2] = 62; //@line 18012
   sp = STACKTOP; //@line 18013
   return;
  }
 case 1:
  {
   HEAP8[$4 + 748 >> 0] = $6; //@line 18019
   if ($10 >>> 0 > 2) {
    while (1) {}
   }
   $56 = $10 + 7 | 0; //@line 18025
   HEAP32[$4 + 752 >> 2] = $56; //@line 18027
   HEAP32[$4 + 756 >> 2] = $12; //@line 18029
   HEAP8[$4 + 761 >> 0] = $32; //@line 18031
   HEAP16[$4 + 762 >> 1] = $14; //@line 18033
   HEAP8[$4 + 764 >> 0] = $16; //@line 18035
   HEAP8[$4 + 767 >> 0] = $34; //@line 18037
   HEAP8[$4 + 768 >> 0] = $36; //@line 18039
   HEAP8[$4 + 766 >> 0] = $18; //@line 18041
   HEAP8[$4 + 769 >> 0] = $20; //@line 18043
   HEAP32[$4 + 772 >> 2] = $22; //@line 18045
   $$ = $12 >>> 0 > 6 ? $12 : 6; //@line 18047
   if (($10 | 0) == 0 & (($$ >>> 0 < 12 ? $$ : 12) + -11 | 0) >>> 0 < 2) {
    label = 10; //@line 18055
   } else {
    if (($56 | 0) == 8 & $$ >>> 0 > 11) {
     label = 10; //@line 18061
    } else {
     $$sink = 0; //@line 18063
    }
   }
   if ((label | 0) == 10) {
    $$sink = 1; //@line 18067
   }
   HEAP8[$4 + 760 >> 0] = $$sink; //@line 18070
   _printf(10880, $38) | 0; //@line 18071
   _printf(11494, $42) | 0; //@line 18072
   $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 18073
   _putchar(10) | 0; //@line 18074
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 63; //@line 18077
    sp = STACKTOP; //@line 18078
    return;
   }
   ___async_unwind = 0; //@line 18081
   HEAP32[$ReallocAsyncCtx >> 2] = 63; //@line 18082
   sp = STACKTOP; //@line 18083
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN16SX1276_LoRaRadio7standbyEv($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx21 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP; //@line 186
 STACKTOP = STACKTOP + 48 | 0; //@line 187
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 187
 $vararg_buffer9 = sp + 40 | 0; //@line 188
 $vararg_buffer7 = sp + 32 | 0; //@line 189
 $vararg_buffer5 = sp + 24 | 0; //@line 190
 $vararg_buffer3 = sp + 16 | 0; //@line 191
 _printf(10880, sp) | 0; //@line 194
 _printf(11531, sp + 8 | 0) | 0; //@line 195
 $AsyncCtx18 = _emscripten_alloc_async_context(40, sp) | 0; //@line 196
 _putchar(10) | 0; //@line 197
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 53; //@line 200
  HEAP32[$AsyncCtx18 + 4 >> 2] = $0; //@line 202
  HEAP32[$AsyncCtx18 + 8 >> 2] = $vararg_buffer3; //@line 204
  HEAP32[$AsyncCtx18 + 12 >> 2] = $vararg_buffer3; //@line 206
  HEAP32[$AsyncCtx18 + 16 >> 2] = $vararg_buffer5; //@line 208
  HEAP32[$AsyncCtx18 + 20 >> 2] = $vararg_buffer5; //@line 210
  HEAP32[$AsyncCtx18 + 24 >> 2] = $vararg_buffer7; //@line 212
  HEAP32[$AsyncCtx18 + 28 >> 2] = $vararg_buffer7; //@line 214
  HEAP32[$AsyncCtx18 + 32 >> 2] = $vararg_buffer9; //@line 216
  HEAP32[$AsyncCtx18 + 36 >> 2] = $vararg_buffer9; //@line 218
  sp = STACKTOP; //@line 219
  STACKTOP = sp; //@line 220
  return;
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 222
 __ZN4mbed6Ticker6detachEv($0 + 1048 | 0); //@line 224
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 226
 _printf(10880, $vararg_buffer3) | 0; //@line 227
 HEAP32[$vararg_buffer5 >> 2] = 1; //@line 228
 _printf(10946, $vararg_buffer5) | 0; //@line 229
 $AsyncCtx14 = _emscripten_alloc_async_context(24, sp) | 0; //@line 230
 _putchar(10) | 0; //@line 231
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 54; //@line 234
  HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 236
  HEAP32[$AsyncCtx14 + 8 >> 2] = $vararg_buffer7; //@line 238
  HEAP32[$AsyncCtx14 + 12 >> 2] = $vararg_buffer7; //@line 240
  HEAP32[$AsyncCtx14 + 16 >> 2] = $vararg_buffer9; //@line 242
  HEAP32[$AsyncCtx14 + 20 >> 2] = $vararg_buffer9; //@line 244
  sp = STACKTOP; //@line 245
  STACKTOP = sp; //@line 246
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 248
 $AsyncCtx21 = _emscripten_alloc_async_context(24, sp) | 0; //@line 249
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 250
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 55; //@line 253
  HEAP32[$AsyncCtx21 + 4 >> 2] = $vararg_buffer7; //@line 255
  HEAP32[$AsyncCtx21 + 8 >> 2] = $vararg_buffer7; //@line 257
  HEAP32[$AsyncCtx21 + 12 >> 2] = $vararg_buffer9; //@line 259
  HEAP32[$AsyncCtx21 + 16 >> 2] = $vararg_buffer9; //@line 261
  HEAP32[$AsyncCtx21 + 20 >> 2] = $0; //@line 263
  sp = STACKTOP; //@line 264
  STACKTOP = sp; //@line 265
  return;
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 267
 _printf(10880, $vararg_buffer7) | 0; //@line 268
 HEAP32[$vararg_buffer9 >> 2] = 1; //@line 269
 _printf(10975, $vararg_buffer9) | 0; //@line 270
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 271
 _putchar(10) | 0; //@line 272
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 56; //@line 275
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 277
  sp = STACKTOP; //@line 278
  STACKTOP = sp; //@line 279
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 281
  HEAP8[$0 + 688 >> 0] = 0; //@line 283
  STACKTOP = sp; //@line 284
  return;
 }
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_165($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $16 = 0, $2 = 0, $20 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $35 = 0, $36 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 31106
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31108
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31110
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31112
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31114
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31116
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31118
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31122
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 31126
 if (HEAP32[$4 >> 2] | 0) {
  HEAP8[$8 + 1964 >> 0] = 0; //@line 31131
  _memset($8 + 1975 | 0, 0, 255) | 0; //@line 31133
  HEAP16[$8 + 2230 >> 1] = 255; //@line 31135
  _printf(11863, $12) | 0; //@line 31136
  HEAP32[$16 >> 2] = HEAP32[$4 >> 2]; //@line 31138
  _printf(12622, $16) | 0; //@line 31139
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 31140
  _putchar(10) | 0; //@line 31141
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 184; //@line 31144
   $27 = $ReallocAsyncCtx7 + 4 | 0; //@line 31145
   HEAP32[$27 >> 2] = $2; //@line 31146
   $28 = $ReallocAsyncCtx7 + 8 | 0; //@line 31147
   HEAP32[$28 >> 2] = $6; //@line 31148
   $29 = $ReallocAsyncCtx7 + 12 | 0; //@line 31149
   HEAP32[$29 >> 2] = $8; //@line 31150
   $30 = $ReallocAsyncCtx7 + 16 | 0; //@line 31151
   HEAP32[$30 >> 2] = $4; //@line 31152
   sp = STACKTOP; //@line 31153
   return;
  }
  ___async_unwind = 0; //@line 31156
  HEAP32[$ReallocAsyncCtx7 >> 2] = 184; //@line 31157
  $27 = $ReallocAsyncCtx7 + 4 | 0; //@line 31158
  HEAP32[$27 >> 2] = $2; //@line 31159
  $28 = $ReallocAsyncCtx7 + 8 | 0; //@line 31160
  HEAP32[$28 >> 2] = $6; //@line 31161
  $29 = $ReallocAsyncCtx7 + 12 | 0; //@line 31162
  HEAP32[$29 >> 2] = $8; //@line 31163
  $30 = $ReallocAsyncCtx7 + 16 | 0; //@line 31164
  HEAP32[$30 >> 2] = $4; //@line 31165
  sp = STACKTOP; //@line 31166
  return;
 }
 HEAP32[$8 + 1956 >> 2] = HEAP32[$20 + 16 >> 2]; //@line 31172
 HEAP8[$8 + 1964 >> 0] = 0; //@line 31174
 $35 = $8 + 1892 | 0; //@line 31175
 $36 = HEAP32[$35 >> 2] | 0; //@line 31176
 if (!$36) {
  return;
 }
 $40 = HEAP32[$8 + 2288 >> 2] | 0; //@line 31183
 $42 = HEAP32[$36 + 4 >> 2] | 0; //@line 31185
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 31186
 FUNCTION_TABLE_vii[$42 & 31]($10, $8 + 1880 | 0); //@line 31187
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 193; //@line 31190
  $43 = $ReallocAsyncCtx5 + 4 | 0; //@line 31191
  HEAP32[$43 >> 2] = $35; //@line 31192
  $44 = $ReallocAsyncCtx5 + 8 | 0; //@line 31193
  HEAP32[$44 >> 2] = $10; //@line 31194
  $45 = $ReallocAsyncCtx5 + 12 | 0; //@line 31195
  HEAP32[$45 >> 2] = $40; //@line 31196
  $46 = $ReallocAsyncCtx5 + 16 | 0; //@line 31197
  HEAP32[$46 >> 2] = $10; //@line 31198
  sp = STACKTOP; //@line 31199
  return;
 }
 ___async_unwind = 0; //@line 31202
 HEAP32[$ReallocAsyncCtx5 >> 2] = 193; //@line 31203
 $43 = $ReallocAsyncCtx5 + 4 | 0; //@line 31204
 HEAP32[$43 >> 2] = $35; //@line 31205
 $44 = $ReallocAsyncCtx5 + 8 | 0; //@line 31206
 HEAP32[$44 >> 2] = $10; //@line 31207
 $45 = $ReallocAsyncCtx5 + 12 | 0; //@line 31208
 HEAP32[$45 >> 2] = $40; //@line 31209
 $46 = $ReallocAsyncCtx5 + 16 | 0; //@line 31210
 HEAP32[$46 >> 2] = $10; //@line 31211
 sp = STACKTOP; //@line 31212
 return;
}
function _memchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = $1 & 255; //@line 11126
 $7 = ($2 | 0) != 0; //@line 11130
 L1 : do {
  if ($7 & ($0 & 3 | 0) != 0) {
   $8 = $1 & 255; //@line 11134
   $$03555 = $0; //@line 11135
   $$03654 = $2; //@line 11135
   while (1) {
    if ((HEAP8[$$03555 >> 0] | 0) == $8 << 24 >> 24) {
     $$035$lcssa65 = $$03555; //@line 11140
     $$036$lcssa64 = $$03654; //@line 11140
     label = 6; //@line 11141
     break L1;
    }
    $11 = $$03555 + 1 | 0; //@line 11144
    $12 = $$03654 + -1 | 0; //@line 11145
    $16 = ($12 | 0) != 0; //@line 11149
    if ($16 & ($11 & 3 | 0) != 0) {
     $$03555 = $11; //@line 11152
     $$03654 = $12; //@line 11152
    } else {
     $$035$lcssa = $11; //@line 11154
     $$036$lcssa = $12; //@line 11154
     $$lcssa = $16; //@line 11154
     label = 5; //@line 11155
     break;
    }
   }
  } else {
   $$035$lcssa = $0; //@line 11160
   $$036$lcssa = $2; //@line 11160
   $$lcssa = $7; //@line 11160
   label = 5; //@line 11161
  }
 } while (0);
 if ((label | 0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa; //@line 11166
   $$036$lcssa64 = $$036$lcssa; //@line 11166
   label = 6; //@line 11167
  } else {
   $$2 = $$035$lcssa; //@line 11169
   $$3 = 0; //@line 11169
  }
 }
 L8 : do {
  if ((label | 0) == 6) {
   $18 = $1 & 255; //@line 11175
   if ((HEAP8[$$035$lcssa65 >> 0] | 0) == $18 << 24 >> 24) {
    $$2 = $$035$lcssa65; //@line 11178
    $$3 = $$036$lcssa64; //@line 11178
   } else {
    $20 = Math_imul($3, 16843009) | 0; //@line 11180
    L11 : do {
     if ($$036$lcssa64 >>> 0 > 3) {
      $$046 = $$035$lcssa65; //@line 11184
      $$13745 = $$036$lcssa64; //@line 11184
      while (1) {
       $23 = HEAP32[$$046 >> 2] ^ $20; //@line 11187
       if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) {
        break;
       }
       $29 = $$046 + 4 | 0; //@line 11196
       $30 = $$13745 + -4 | 0; //@line 11197
       if ($30 >>> 0 > 3) {
        $$046 = $29; //@line 11200
        $$13745 = $30; //@line 11200
       } else {
        $$0$lcssa = $29; //@line 11202
        $$137$lcssa = $30; //@line 11202
        label = 11; //@line 11203
        break L11;
       }
      }
      $$140 = $$046; //@line 11207
      $$23839 = $$13745; //@line 11207
     } else {
      $$0$lcssa = $$035$lcssa65; //@line 11209
      $$137$lcssa = $$036$lcssa64; //@line 11209
      label = 11; //@line 11210
     }
    } while (0);
    if ((label | 0) == 11) {
     if (!$$137$lcssa) {
      $$2 = $$0$lcssa; //@line 11216
      $$3 = 0; //@line 11216
      break;
     } else {
      $$140 = $$0$lcssa; //@line 11219
      $$23839 = $$137$lcssa; //@line 11219
     }
    }
    while (1) {
     if ((HEAP8[$$140 >> 0] | 0) == $18 << 24 >> 24) {
      $$2 = $$140; //@line 11226
      $$3 = $$23839; //@line 11226
      break L8;
     }
     $35 = $$140 + 1 | 0; //@line 11229
     $$23839 = $$23839 + -1 | 0; //@line 11230
     if (!$$23839) {
      $$2 = $35; //@line 11233
      $$3 = 0; //@line 11233
      break;
     } else {
      $$140 = $35; //@line 11236
     }
    }
   }
  }
 } while (0);
 return ($$3 | 0 ? $$2 : 0) | 0; //@line 11244
}
function _fflush($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $12 = 0, $13 = 0, $25 = 0, $28 = 0, $34 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $phitmp = 0, sp = 0;
 sp = STACKTOP; //@line 10897
 do {
  if (!$0) {
   do {
    if (!(HEAP32[2596] | 0)) {
     $34 = 0; //@line 10905
    } else {
     $12 = HEAP32[2596] | 0; //@line 10907
     $AsyncCtx10 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10908
     $13 = _fflush($12) | 0; //@line 10909
     if (___async) {
      HEAP32[$AsyncCtx10 >> 2] = 737; //@line 10912
      sp = STACKTOP; //@line 10913
      return 0; //@line 10914
     } else {
      _emscripten_free_async_context($AsyncCtx10 | 0); //@line 10916
      $34 = $13; //@line 10917
      break;
     }
    }
   } while (0);
   $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 10923
   L9 : do {
    if (!$$02325) {
     $$024$lcssa = $34; //@line 10927
    } else {
     $$02327 = $$02325; //@line 10929
     $$02426 = $34; //@line 10929
     while (1) {
      if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
       $28 = ___lockfile($$02327) | 0; //@line 10936
      } else {
       $28 = 0; //@line 10938
      }
      if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
       $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 10946
       $25 = ___fflush_unlocked($$02327) | 0; //@line 10947
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 10952
       $$1 = $25 | $$02426; //@line 10954
      } else {
       $$1 = $$02426; //@line 10956
      }
      if ($28 | 0) {
       ___unlockfile($$02327); //@line 10960
      }
      $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 10963
      if (!$$023) {
       $$024$lcssa = $$1; //@line 10966
       break L9;
      } else {
       $$02327 = $$023; //@line 10969
       $$02426 = $$1; //@line 10969
      }
     }
     HEAP32[$AsyncCtx >> 2] = 738; //@line 10972
     HEAP32[$AsyncCtx + 4 >> 2] = $$02426; //@line 10974
     HEAP32[$AsyncCtx + 8 >> 2] = $28; //@line 10976
     HEAP32[$AsyncCtx + 12 >> 2] = $$02327; //@line 10978
     sp = STACKTOP; //@line 10979
     return 0; //@line 10980
    }
   } while (0);
   ___ofl_unlock(); //@line 10983
   $$0 = $$024$lcssa; //@line 10984
  } else {
   if ((HEAP32[$0 + 76 >> 2] | 0) <= -1) {
    $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10990
    $5 = ___fflush_unlocked($0) | 0; //@line 10991
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 735; //@line 10994
     sp = STACKTOP; //@line 10995
     return 0; //@line 10996
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 10998
     $$0 = $5; //@line 10999
     break;
    }
   }
   $phitmp = (___lockfile($0) | 0) == 0; //@line 11004
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11005
   $7 = ___fflush_unlocked($0) | 0; //@line 11006
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 736; //@line 11009
    HEAP8[$AsyncCtx3 + 4 >> 0] = $phitmp & 1; //@line 11012
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 11014
    sp = STACKTOP; //@line 11015
    return 0; //@line 11016
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11018
   if ($phitmp) {
    $$0 = $7; //@line 11020
   } else {
    ___unlockfile($0); //@line 11022
    $$0 = $7; //@line 11023
   }
  }
 } while (0);
 return $$0 | 0; //@line 11027
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_327($0) {
 $0 = $0 | 0;
 var $$040 = 0, $10 = 0, $12 = 0, $19 = 0, $2 = 0, $21 = 0, $25 = 0, $30 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 6002
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 6004
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6006
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6008
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6010
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6012
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6014
 if (!(HEAP8[$0 + 28 >> 0] & 1)) {
  HEAP8[___async_retval >> 0] = 0; //@line 6021
  return;
 }
 if (!(HEAP32[$8 + 20 >> 2] | 0)) {
  $19 = HEAP32[$10 + 112 >> 2] | 0; //@line 6029
  $21 = HEAPU8[$8 >> 0] | 0; //@line 6031
  $25 = HEAP32[$19 + ($21 * 12 | 0) + 4 >> 2] | 0; //@line 6035
  $$040 = ($25 | 0) == 0 ? HEAP32[$19 + ($21 * 12 | 0) >> 2] | 0 : $25; //@line 6038
 } else {
  $$040 = $12; //@line 6040
 }
 $30 = HEAP32[$10 + 96 >> 2] | 0; //@line 6045
 $32 = HEAP32[$10 + 104 >> 2] | 0; //@line 6047
 $33 = $2 & 255; //@line 6048
 $35 = HEAP8[(HEAP32[$10 + 88 >> 2] | 0) + $33 >> 0] | 0; //@line 6050
 $36 = HEAP32[$6 >> 2] | 0; //@line 6051
 $39 = HEAP32[(HEAP32[$36 >> 2] | 0) + 72 >> 2] | 0; //@line 6054
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(44) | 0; //@line 6055
 FUNCTION_TABLE_vi[$39 & 1023]($36); //@line 6056
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 606; //@line 6059
  $40 = $ReallocAsyncCtx4 + 4 | 0; //@line 6060
  HEAP32[$40 >> 2] = $6; //@line 6061
  $41 = $ReallocAsyncCtx4 + 8 | 0; //@line 6062
  HEAP32[$41 >> 2] = $$040; //@line 6063
  $42 = $ReallocAsyncCtx4 + 12 | 0; //@line 6064
  HEAP8[$42 >> 0] = $2; //@line 6065
  $43 = $ReallocAsyncCtx4 + 16 | 0; //@line 6066
  HEAP32[$43 >> 2] = $10; //@line 6067
  $44 = $ReallocAsyncCtx4 + 20 | 0; //@line 6068
  HEAP32[$44 >> 2] = $8; //@line 6069
  $45 = $ReallocAsyncCtx4 + 24 | 0; //@line 6070
  HEAP8[$45 >> 0] = $35; //@line 6071
  $46 = $ReallocAsyncCtx4 + 28 | 0; //@line 6072
  HEAP32[$46 >> 2] = $30; //@line 6073
  $47 = $ReallocAsyncCtx4 + 32 | 0; //@line 6074
  HEAP32[$47 >> 2] = $32; //@line 6075
  $48 = $ReallocAsyncCtx4 + 36 | 0; //@line 6076
  HEAP32[$48 >> 2] = $33; //@line 6077
  $49 = $ReallocAsyncCtx4 + 40 | 0; //@line 6078
  HEAP32[$49 >> 2] = $4; //@line 6079
  sp = STACKTOP; //@line 6080
  return;
 }
 ___async_unwind = 0; //@line 6083
 HEAP32[$ReallocAsyncCtx4 >> 2] = 606; //@line 6084
 $40 = $ReallocAsyncCtx4 + 4 | 0; //@line 6085
 HEAP32[$40 >> 2] = $6; //@line 6086
 $41 = $ReallocAsyncCtx4 + 8 | 0; //@line 6087
 HEAP32[$41 >> 2] = $$040; //@line 6088
 $42 = $ReallocAsyncCtx4 + 12 | 0; //@line 6089
 HEAP8[$42 >> 0] = $2; //@line 6090
 $43 = $ReallocAsyncCtx4 + 16 | 0; //@line 6091
 HEAP32[$43 >> 2] = $10; //@line 6092
 $44 = $ReallocAsyncCtx4 + 20 | 0; //@line 6093
 HEAP32[$44 >> 2] = $8; //@line 6094
 $45 = $ReallocAsyncCtx4 + 24 | 0; //@line 6095
 HEAP8[$45 >> 0] = $35; //@line 6096
 $46 = $ReallocAsyncCtx4 + 28 | 0; //@line 6097
 HEAP32[$46 >> 2] = $30; //@line 6098
 $47 = $ReallocAsyncCtx4 + 32 | 0; //@line 6099
 HEAP32[$47 >> 2] = $32; //@line 6100
 $48 = $ReallocAsyncCtx4 + 36 | 0; //@line 6101
 HEAP32[$48 >> 2] = $33; //@line 6102
 $49 = $ReallocAsyncCtx4 + 40 | 0; //@line 6103
 HEAP32[$49 >> 2] = $4; //@line 6104
 sp = STACKTOP; //@line 6105
 return;
}
function __ZN12LoRaWANStackC2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 33377
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33381
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33383
 $7 = $4 + 12 | 0; //@line 33384
 HEAP32[$4 >> 2] = 22; //@line 33385
 HEAP32[$4 + 4 >> 2] = 0; //@line 33387
 HEAP32[$4 + 8 >> 2] = $6; //@line 33389
 HEAP32[$7 >> 2] = 836; //@line 33390
 $8 = $6 + 1860 | 0; //@line 33391
 if (($8 | 0) == ($4 | 0)) {
  $25 = HEAP32[211] | 0; //@line 33395
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 33396
  FUNCTION_TABLE_vi[$25 & 1023]($4); //@line 33397
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 180; //@line 33400
   $26 = $ReallocAsyncCtx4 + 4 | 0; //@line 33401
   HEAP32[$26 >> 2] = $4; //@line 33402
   sp = STACKTOP; //@line 33403
   return;
  }
  ___async_unwind = 0; //@line 33406
  HEAP32[$ReallocAsyncCtx4 >> 2] = 180; //@line 33407
  $26 = $ReallocAsyncCtx4 + 4 | 0; //@line 33408
  HEAP32[$26 >> 2] = $4; //@line 33409
  sp = STACKTOP; //@line 33410
  return;
 }
 $10 = $6 + 1872 | 0; //@line 33413
 $11 = HEAP32[$10 >> 2] | 0; //@line 33414
 if ($11 | 0) {
  $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 33418
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 33419
  FUNCTION_TABLE_vi[$14 & 1023]($8); //@line 33420
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 178; //@line 33423
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 33424
   HEAP32[$15 >> 2] = $7; //@line 33425
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 33426
   HEAP32[$16 >> 2] = $10; //@line 33427
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 33428
   HEAP32[$17 >> 2] = $8; //@line 33429
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 33430
   HEAP32[$18 >> 2] = $4; //@line 33431
   sp = STACKTOP; //@line 33432
   return;
  }
  ___async_unwind = 0; //@line 33435
  HEAP32[$ReallocAsyncCtx2 >> 2] = 178; //@line 33436
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 33437
  HEAP32[$15 >> 2] = $7; //@line 33438
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 33439
  HEAP32[$16 >> 2] = $10; //@line 33440
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 33441
  HEAP32[$17 >> 2] = $8; //@line 33442
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 33443
  HEAP32[$18 >> 2] = $4; //@line 33444
  sp = STACKTOP; //@line 33445
  return;
 }
 $20 = HEAP32[210] | 0; //@line 33449
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 33450
 FUNCTION_TABLE_vii[$20 & 31]($8, $4); //@line 33451
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 179; //@line 33454
  $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 33455
  HEAP32[$21 >> 2] = $7; //@line 33456
  $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 33457
  HEAP32[$22 >> 2] = $10; //@line 33458
  $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 33459
  HEAP32[$23 >> 2] = $4; //@line 33460
  sp = STACKTOP; //@line 33461
  return;
 }
 ___async_unwind = 0; //@line 33464
 HEAP32[$ReallocAsyncCtx3 >> 2] = 179; //@line 33465
 $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 33466
 HEAP32[$21 >> 2] = $7; //@line 33467
 $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 33468
 HEAP32[$22 >> 2] = $10; //@line 33469
 $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 33470
 HEAP32[$23 >> 2] = $4; //@line 33471
 sp = STACKTOP; //@line 33472
 return;
}
function _mbedtls_ccm_free__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $18 = 0, $2 = 0, $22 = 0, $26 = 0, $30 = 0, $34 = 0, $38 = 0, $42 = 0, $46 = 0, $50 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $66 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16436
 HEAP8[$2 >> 0] = 0; //@line 16438
 HEAP8[$2 + 1 >> 0] = 0; //@line 16440
 HEAP8[$2 + 2 >> 0] = 0; //@line 16442
 $6 = $2 + 4 | 0; //@line 16443
 HEAP8[$2 + 3 >> 0] = 0; //@line 16444
 HEAP8[$6 >> 0] = 0; //@line 16446
 HEAP8[$6 + 1 >> 0] = 0; //@line 16448
 HEAP8[$6 + 2 >> 0] = 0; //@line 16450
 $10 = $6 + 4 | 0; //@line 16451
 HEAP8[$6 + 3 >> 0] = 0; //@line 16452
 HEAP8[$10 >> 0] = 0; //@line 16454
 HEAP8[$10 + 1 >> 0] = 0; //@line 16456
 HEAP8[$10 + 2 >> 0] = 0; //@line 16458
 $14 = $6 + 8 | 0; //@line 16459
 HEAP8[$10 + 3 >> 0] = 0; //@line 16460
 HEAP8[$14 >> 0] = 0; //@line 16462
 HEAP8[$14 + 1 >> 0] = 0; //@line 16464
 HEAP8[$14 + 2 >> 0] = 0; //@line 16466
 $18 = $6 + 12 | 0; //@line 16467
 HEAP8[$14 + 3 >> 0] = 0; //@line 16468
 HEAP8[$18 >> 0] = 0; //@line 16470
 HEAP8[$18 + 1 >> 0] = 0; //@line 16472
 HEAP8[$18 + 2 >> 0] = 0; //@line 16474
 $22 = $6 + 16 | 0; //@line 16475
 HEAP8[$18 + 3 >> 0] = 0; //@line 16476
 HEAP8[$22 >> 0] = 0; //@line 16478
 HEAP8[$22 + 1 >> 0] = 0; //@line 16480
 HEAP8[$22 + 2 >> 0] = 0; //@line 16482
 $26 = $6 + 20 | 0; //@line 16483
 HEAP8[$22 + 3 >> 0] = 0; //@line 16484
 HEAP8[$26 >> 0] = 0; //@line 16486
 HEAP8[$26 + 1 >> 0] = 0; //@line 16488
 HEAP8[$26 + 2 >> 0] = 0; //@line 16490
 $30 = $6 + 24 | 0; //@line 16491
 HEAP8[$26 + 3 >> 0] = 0; //@line 16492
 HEAP8[$30 >> 0] = 0; //@line 16494
 HEAP8[$30 + 1 >> 0] = 0; //@line 16496
 HEAP8[$30 + 2 >> 0] = 0; //@line 16498
 $34 = $6 + 28 | 0; //@line 16499
 HEAP8[$30 + 3 >> 0] = 0; //@line 16500
 HEAP8[$34 >> 0] = 0; //@line 16502
 HEAP8[$34 + 1 >> 0] = 0; //@line 16504
 HEAP8[$34 + 2 >> 0] = 0; //@line 16506
 $38 = $6 + 32 | 0; //@line 16507
 HEAP8[$34 + 3 >> 0] = 0; //@line 16508
 HEAP8[$38 >> 0] = 0; //@line 16510
 HEAP8[$38 + 1 >> 0] = 0; //@line 16512
 HEAP8[$38 + 2 >> 0] = 0; //@line 16514
 $42 = $6 + 36 | 0; //@line 16515
 HEAP8[$38 + 3 >> 0] = 0; //@line 16516
 HEAP8[$42 >> 0] = 0; //@line 16518
 HEAP8[$42 + 1 >> 0] = 0; //@line 16520
 HEAP8[$42 + 2 >> 0] = 0; //@line 16522
 $46 = $6 + 40 | 0; //@line 16523
 HEAP8[$42 + 3 >> 0] = 0; //@line 16524
 HEAP8[$46 >> 0] = 0; //@line 16526
 HEAP8[$46 + 1 >> 0] = 0; //@line 16528
 HEAP8[$46 + 2 >> 0] = 0; //@line 16530
 $50 = $6 + 44 | 0; //@line 16531
 HEAP8[$46 + 3 >> 0] = 0; //@line 16532
 HEAP8[$50 >> 0] = 0; //@line 16534
 HEAP8[$50 + 1 >> 0] = 0; //@line 16536
 HEAP8[$50 + 2 >> 0] = 0; //@line 16538
 $54 = $6 + 48 | 0; //@line 16539
 HEAP8[$50 + 3 >> 0] = 0; //@line 16540
 HEAP8[$54 >> 0] = 0; //@line 16542
 HEAP8[$54 + 1 >> 0] = 0; //@line 16544
 HEAP8[$54 + 2 >> 0] = 0; //@line 16546
 $58 = $6 + 52 | 0; //@line 16547
 HEAP8[$54 + 3 >> 0] = 0; //@line 16548
 HEAP8[$58 >> 0] = 0; //@line 16550
 HEAP8[$58 + 1 >> 0] = 0; //@line 16552
 HEAP8[$58 + 2 >> 0] = 0; //@line 16554
 $62 = $6 + 56 | 0; //@line 16555
 HEAP8[$58 + 3 >> 0] = 0; //@line 16556
 HEAP8[$62 >> 0] = 0; //@line 16558
 HEAP8[$62 + 1 >> 0] = 0; //@line 16560
 HEAP8[$62 + 2 >> 0] = 0; //@line 16562
 $66 = $6 + 60 | 0; //@line 16563
 HEAP8[$62 + 3 >> 0] = 0; //@line 16564
 HEAP8[$66 >> 0] = 0; //@line 16566
 HEAP8[$66 + 1 >> 0] = 0; //@line 16568
 HEAP8[$66 + 2 >> 0] = 0; //@line 16570
 HEAP8[$66 + 3 >> 0] = 0; //@line 16571
 return;
}
function __ZN7LoRaPHY19update_band_timeoffEbbP6band_th($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$060 = 0, $$060$us = 0, $$2 = 0, $$2$us = 0, $$pr$us = 0, $$sink2 = 0, $10 = 0, $20 = 0, $26 = 0, $28 = 0, $34 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $6 = 0, $7 = 0, $8 = 0, $indvars$iv = 0, $indvars$iv62 = 0, $wide$trip$count = 0, label = 0;
 if (!($4 << 24 >> 24)) {
  $$0$lcssa = -1; //@line 24962
  return $$0$lcssa | 0; //@line 24963
 }
 $6 = $0 + 8 | 0; //@line 24965
 $wide$trip$count = $4 & 255; //@line 24966
 if ($1) {
  $$060$us = -1; //@line 24968
  $indvars$iv = 0; //@line 24968
  while (1) {
   $7 = $3 + ($indvars$iv * 24 | 0) + 12 | 0; //@line 24970
   do {
    if ($2) {
     $8 = HEAP32[$7 >> 2] | 0; //@line 24973
     $10 = $3 + ($indvars$iv * 24 | 0) + 8 | 0; //@line 24975
     if ($8 >>> 0 <= (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) >>> 0) {
      HEAP32[$7 >> 2] = 0; //@line 24980
      $$2$us = $$060$us; //@line 24981
      break;
     }
     $$pr$us = HEAP32[$7 >> 2] | 0; //@line 24984
     if (!$$pr$us) {
      $$2$us = $$060$us; //@line 24987
     } else {
      if (($$pr$us - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) | 0) >>> 0 < $$060$us >>> 0) {
       $20 = HEAP32[$7 >> 2] | 0; //@line 24995
       $$2$us = $20 - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) | 0; //@line 25000
      } else {
       $$2$us = $$060$us; //@line 25002
      }
     }
    } else {
     HEAP32[$7 >> 2] = 0; //@line 25006
     $$2$us = 0; //@line 25007
    }
   } while (0);
   $indvars$iv = $indvars$iv + 1 | 0; //@line 25010
   if (($indvars$iv | 0) == ($wide$trip$count | 0)) {
    $$0$lcssa = $$2$us; //@line 25013
    break;
   } else {
    $$060$us = $$2$us; //@line 25016
   }
  }
  return $$0$lcssa | 0; //@line 25019
 } else {
  $$060 = -1; //@line 25021
  $indvars$iv62 = 0; //@line 25021
 }
 while (1) {
  $26 = $3 + ($indvars$iv62 * 24 | 0) + 4 | 0; //@line 25025
  $28 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$26 >> 2] | 0) | 0; //@line 25027
  if ($2) {
   $34 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$3 + ($indvars$iv62 * 24 | 0) + 8 >> 2] | 0) | 0; //@line 25033
  } else {
   $34 = 0; //@line 25035
  }
  if ($28 >>> 0 > $34 >>> 0) {
   $$sink2 = $26; //@line 25039
   label = 17; //@line 25040
  } else {
   if ($2) {
    $$sink2 = $3 + ($indvars$iv62 * 24 | 0) + 8 | 0; //@line 25044
    label = 17; //@line 25045
   } else {
    $41 = 0; //@line 25047
   }
  }
  if ((label | 0) == 17) {
   label = 0; //@line 25051
   $41 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$$sink2 >> 2] | 0) | 0; //@line 25055
  }
  $38 = $3 + ($indvars$iv62 * 24 | 0) + 12 | 0; //@line 25057
  $39 = HEAP32[$38 >> 2] | 0; //@line 25058
  if ($39 >>> 0 > $41 >>> 0) {
   $42 = $39 - $41 | 0; //@line 25061
   $$2 = $42 >>> 0 < $$060 >>> 0 ? $42 : $$060; //@line 25064
  } else {
   HEAP32[$38 >> 2] = 0; //@line 25066
   $$2 = $$060; //@line 25067
  }
  $indvars$iv62 = $indvars$iv62 + 1 | 0; //@line 25069
  if (($indvars$iv62 | 0) == ($wide$trip$count | 0)) {
   $$0$lcssa = $$2; //@line 25072
   break;
  } else {
   $$060 = $$2; //@line 25075
  }
 }
 return $$0$lcssa | 0; //@line 25078
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $13 = 0, $19 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $39 = 0, $50 = 0, $53 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14967
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 14973
  } else {
   if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
    $50 = HEAP32[$0 + 8 >> 2] | 0; //@line 14979
    $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 24 >> 2] | 0; //@line 14982
    $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14983
    FUNCTION_TABLE_viiiii[$53 & 7]($50, $1, $2, $3, $4); //@line 14984
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 757; //@line 14987
     sp = STACKTOP; //@line 14988
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14991
     break;
    }
   }
   if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
    $13 = $1 + 20 | 0; //@line 14999
    if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
     HEAP32[$1 + 32 >> 2] = $3; //@line 15004
     $19 = $1 + 44 | 0; //@line 15005
     if ((HEAP32[$19 >> 2] | 0) == 4) {
      break;
     }
     $22 = $1 + 52 | 0; //@line 15011
     HEAP8[$22 >> 0] = 0; //@line 15012
     $23 = $1 + 53 | 0; //@line 15013
     HEAP8[$23 >> 0] = 0; //@line 15014
     $25 = HEAP32[$0 + 8 >> 2] | 0; //@line 15016
     $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 20 >> 2] | 0; //@line 15019
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 15020
     FUNCTION_TABLE_viiiiii[$28 & 3]($25, $1, $2, $2, 1, $4); //@line 15021
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 756; //@line 15024
      HEAP32[$AsyncCtx + 4 >> 2] = $23; //@line 15026
      HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 15028
      HEAP32[$AsyncCtx + 12 >> 2] = $13; //@line 15030
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 15032
      HEAP32[$AsyncCtx + 20 >> 2] = $22; //@line 15034
      HEAP32[$AsyncCtx + 24 >> 2] = $19; //@line 15036
      sp = STACKTOP; //@line 15037
      return;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 15040
     if (!(HEAP8[$23 >> 0] | 0)) {
      $$037$off038 = 4; //@line 15044
      label = 13; //@line 15045
     } else {
      if (!(HEAP8[$22 >> 0] | 0)) {
       $$037$off038 = 3; //@line 15050
       label = 13; //@line 15051
      } else {
       $$037$off039 = 3; //@line 15053
      }
     }
     if ((label | 0) == 13) {
      HEAP32[$13 >> 2] = $2; //@line 15057
      $39 = $1 + 40 | 0; //@line 15058
      HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1; //@line 15061
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 15071
        $$037$off039 = $$037$off038; //@line 15072
       } else {
        $$037$off039 = $$037$off038; //@line 15074
       }
      } else {
       $$037$off039 = $$037$off038; //@line 15077
      }
     }
     HEAP32[$19 >> 2] = $$037$off039; //@line 15080
     break;
    }
   }
   if (($3 | 0) == 1) {
    HEAP32[$1 + 32 >> 2] = 1; //@line 15087
   }
  }
 } while (0);
 return;
}
function _initialize__async_cb_378($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $31 = 0, $33 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 18991
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18993
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18995
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18997
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18999
 $10 = $0 + 24 | 0; //@line 19001
 $12 = HEAP32[$10 >> 2] | 0; //@line 19003
 $15 = HEAP32[$10 + 4 >> 2] | 0; //@line 19006
 $17 = HEAP32[$0 + 32 >> 2] | 0; //@line 19008
 $19 = HEAP32[$0 + 36 >> 2] | 0; //@line 19010
 $21 = HEAP32[$2 >> 2] | 0; //@line 19013
 $22 = $21 + 32 | 0; //@line 19014
 HEAP32[$22 >> 2] = HEAP32[___async_retval >> 2]; //@line 19015
 $23 = $21 + 40 | 0; //@line 19016
 $24 = $23; //@line 19017
 HEAP32[$24 >> 2] = 0; //@line 19019
 HEAP32[$24 + 4 >> 2] = 0; //@line 19022
 $28 = $21 + 8 | 0; //@line 19023
 HEAP32[$28 >> 2] = $4; //@line 19024
 $29 = _bitshift64Shl(1, 0, $6 | 0) | 0; //@line 19025
 $31 = _i64Add($29 | 0, tempRet0 | 0, -1, 0) | 0; //@line 19027
 $33 = $21 + 12 | 0; //@line 19029
 HEAP32[$33 >> 2] = $31; //@line 19030
 HEAP32[$21 + 16 >> 2] = $8; //@line 19032
 $36 = $21 + 24 | 0; //@line 19034
 HEAP32[$36 >> 2] = $12; //@line 19036
 HEAP32[$36 + 4 >> 2] = $15; //@line 19039
 $40 = $21 + 48 | 0; //@line 19040
 $41 = $40; //@line 19041
 HEAP32[$41 >> 2] = 0; //@line 19043
 HEAP32[$41 + 4 >> 2] = 0; //@line 19046
 HEAP8[$21 + 56 >> 0] = 1; //@line 19048
 $48 = HEAP32[(HEAP32[$17 >> 2] | 0) + 4 >> 2] | 0; //@line 19051
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 19052
 $49 = FUNCTION_TABLE_i[$48 & 7]() | 0; //@line 19053
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 688; //@line 19056
  $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 19057
  HEAP32[$50 >> 2] = $2; //@line 19058
  $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 19059
  HEAP32[$51 >> 2] = $19; //@line 19060
  $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 19061
  HEAP32[$52 >> 2] = $22; //@line 19062
  $53 = $ReallocAsyncCtx4 + 16 | 0; //@line 19063
  HEAP32[$53 >> 2] = $33; //@line 19064
  $54 = $ReallocAsyncCtx4 + 20 | 0; //@line 19065
  HEAP32[$54 >> 2] = $28; //@line 19066
  $55 = $ReallocAsyncCtx4 + 24 | 0; //@line 19067
  HEAP32[$55 >> 2] = $23; //@line 19068
  $56 = $ReallocAsyncCtx4 + 28 | 0; //@line 19069
  HEAP32[$56 >> 2] = $40; //@line 19070
  sp = STACKTOP; //@line 19071
  return;
 }
 HEAP32[___async_retval >> 2] = $49; //@line 19075
 ___async_unwind = 0; //@line 19076
 HEAP32[$ReallocAsyncCtx4 >> 2] = 688; //@line 19077
 $50 = $ReallocAsyncCtx4 + 4 | 0; //@line 19078
 HEAP32[$50 >> 2] = $2; //@line 19079
 $51 = $ReallocAsyncCtx4 + 8 | 0; //@line 19080
 HEAP32[$51 >> 2] = $19; //@line 19081
 $52 = $ReallocAsyncCtx4 + 12 | 0; //@line 19082
 HEAP32[$52 >> 2] = $22; //@line 19083
 $53 = $ReallocAsyncCtx4 + 16 | 0; //@line 19084
 HEAP32[$53 >> 2] = $33; //@line 19085
 $54 = $ReallocAsyncCtx4 + 20 | 0; //@line 19086
 HEAP32[$54 >> 2] = $28; //@line 19087
 $55 = $ReallocAsyncCtx4 + 24 | 0; //@line 19088
 HEAP32[$55 >> 2] = $23; //@line 19089
 $56 = $ReallocAsyncCtx4 + 28 | 0; //@line 19090
 HEAP32[$56 >> 2] = $40; //@line 19091
 sp = STACKTOP; //@line 19092
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $14 = 0, $2 = 0, $27 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 9009
 STACKTOP = STACKTOP + 16 | 0; //@line 9010
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9010
 $2 = sp; //@line 9011
 $3 = $0 + 1876 | 0; //@line 9012
 if (HEAP32[$3 >> 2] | 0) {
  $$0 = 0; //@line 9016
  STACKTOP = sp; //@line 9017
  return $$0 | 0; //@line 9017
 }
 HEAP32[$0 + 2288 >> 2] = $1; //@line 9020
 __ZN18LoRaWANTimeHandler24activate_timer_subsystemEPN6events10EventQueueE($0, $1); //@line 9021
 $7 = $0 + 4 | 0; //@line 9022
 $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9025
 __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE($7, $0 + 1812 | 0, $0 + 1336 | 0, $1) | 0; //@line 9026
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 297; //@line 9029
  HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 9031
  HEAP32[$AsyncCtx7 + 8 >> 2] = $7; //@line 9033
  HEAP32[$AsyncCtx7 + 12 >> 2] = $0; //@line 9035
  HEAP32[$AsyncCtx7 + 16 >> 2] = $3; //@line 9037
  sp = STACKTOP; //@line 9038
  STACKTOP = sp; //@line 9039
  return 0; //@line 9039
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 9041
 HEAP32[$2 >> 2] = 2; //@line 9042
 $14 = $2 + 4 | 0; //@line 9043
 HEAP8[$14 >> 0] = 1; //@line 9044
 $AsyncCtx3 = _emscripten_alloc_async_context(32, sp) | 0; //@line 9045
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($7, $2) | 0; //@line 9046
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 298; //@line 9049
  HEAP32[$AsyncCtx3 + 4 >> 2] = $2; //@line 9051
  HEAP32[$AsyncCtx3 + 8 >> 2] = $14; //@line 9053
  HEAP32[$AsyncCtx3 + 12 >> 2] = $7; //@line 9055
  HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 9057
  HEAP32[$AsyncCtx3 + 20 >> 2] = $0; //@line 9059
  HEAP32[$AsyncCtx3 + 24 >> 2] = $3; //@line 9061
  HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 9063
  sp = STACKTOP; //@line 9064
  STACKTOP = sp; //@line 9065
  return 0; //@line 9065
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 9067
 HEAP32[$2 >> 2] = 7; //@line 9068
 HEAP8[$14 >> 0] = 1; //@line 9069
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 9070
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($7, $2) | 0; //@line 9071
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 299; //@line 9074
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 9076
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 9078
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 9080
  sp = STACKTOP; //@line 9081
  STACKTOP = sp; //@line 9082
  return 0; //@line 9082
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9084
 HEAP32[$0 + 1960 >> 2] = 0; //@line 9086
 HEAP32[$0 + 1956 >> 2] = 0; //@line 9088
 HEAP32[$3 >> 2] = 1; //@line 9089
 $AsyncCtx10 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9090
 $27 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 9091
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 300; //@line 9094
  HEAP32[$AsyncCtx10 + 4 >> 2] = $2; //@line 9096
  sp = STACKTOP; //@line 9097
  STACKTOP = sp; //@line 9098
  return 0; //@line 9098
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 9100
 $$0 = $27; //@line 9101
 STACKTOP = sp; //@line 9102
 return $$0 | 0; //@line 9102
}
function _equeue_enqueue($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$051$ph = 0, $$05157 = 0, $$0515859 = 0, $$053 = 0, $13 = 0, $14 = 0, $16 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $33 = 0, $34 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $49 = 0, $54 = 0, $65 = 0, $67 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4500
 $13 = $1 - (HEAP32[$0 + 12 >> 2] | 0) | HEAPU8[$1 + 4 >> 0] << HEAP32[$0 + 16 >> 2]; //@line 4511
 $14 = $1 + 20 | 0; //@line 4512
 $16 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 4514
 HEAP32[$14 >> 2] = ($16 & ~($16 >> 31)) + $2; //@line 4519
 HEAP8[$1 + 5 >> 0] = HEAP8[$0 + 9 >> 0] | 0; //@line 4523
 $24 = $0 + 128 | 0; //@line 4524
 _equeue_mutex_lock($24); //@line 4525
 $25 = HEAP32[$0 >> 2] | 0; //@line 4526
 L1 : do {
  if (!$25) {
   $$051$ph = $0; //@line 4530
   label = 5; //@line 4531
  } else {
   $27 = HEAP32[$14 >> 2] | 0; //@line 4533
   $$053 = $0; //@line 4534
   $29 = $25; //@line 4534
   while (1) {
    if (((HEAP32[$29 + 20 >> 2] | 0) - $27 | 0) >= 0) {
     break;
    }
    $33 = $29 + 8 | 0; //@line 4543
    $34 = HEAP32[$33 >> 2] | 0; //@line 4544
    if (!$34) {
     $$051$ph = $33; //@line 4547
     label = 5; //@line 4548
     break L1;
    } else {
     $$053 = $33; //@line 4551
     $29 = $34; //@line 4551
    }
   }
   if ((HEAP32[$29 + 20 >> 2] | 0) != (HEAP32[$14 >> 2] | 0)) {
    $49 = $1 + 8 | 0; //@line 4559
    HEAP32[$49 >> 2] = $29; //@line 4560
    HEAP32[$29 + 16 >> 2] = $49; //@line 4562
    $$0515859 = $$053; //@line 4563
    label = 11; //@line 4564
    break;
   }
   $42 = HEAP32[$29 + 8 >> 2] | 0; //@line 4568
   $43 = $1 + 8 | 0; //@line 4569
   HEAP32[$43 >> 2] = $42; //@line 4570
   if ($42 | 0) {
    HEAP32[$42 + 16 >> 2] = $43; //@line 4574
   }
   $46 = HEAP32[$$053 >> 2] | 0; //@line 4576
   $47 = $1 + 12 | 0; //@line 4577
   HEAP32[$47 >> 2] = $46; //@line 4578
   HEAP32[$46 + 16 >> 2] = $47; //@line 4580
   $$05157 = $$053; //@line 4581
  }
 } while (0);
 if ((label | 0) == 5) {
  HEAP32[$1 + 8 >> 2] = 0; //@line 4586
  $$0515859 = $$051$ph; //@line 4587
  label = 11; //@line 4588
 }
 if ((label | 0) == 11) {
  HEAP32[$1 + 12 >> 2] = 0; //@line 4592
  $$05157 = $$0515859; //@line 4593
 }
 HEAP32[$$05157 >> 2] = $1; //@line 4595
 HEAP32[$1 + 16 >> 2] = $$05157; //@line 4597
 $54 = HEAP32[$0 + 40 >> 2] | 0; //@line 4599
 if (!$54) {
  _equeue_mutex_unlock($24); //@line 4602
  return $13 | 0; //@line 4603
 }
 if (!(HEAP8[$0 + 36 >> 0] | 0)) {
  _equeue_mutex_unlock($24); //@line 4609
  return $13 | 0; //@line 4610
 }
 if ((HEAP32[$0 >> 2] | 0) != ($1 | 0)) {
  _equeue_mutex_unlock($24); //@line 4615
  return $13 | 0; //@line 4616
 }
 if (HEAP32[$1 + 12 >> 2] | 0) {
  _equeue_mutex_unlock($24); //@line 4622
  return $13 | 0; //@line 4623
 }
 $65 = HEAP32[$0 + 44 >> 2] | 0; //@line 4626
 $67 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 4628
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 4632
 FUNCTION_TABLE_vii[$54 & 31]($65, $67 & ~($67 >> 31)); //@line 4633
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 169; //@line 4636
  HEAP32[$AsyncCtx + 4 >> 2] = $24; //@line 4638
  HEAP32[$AsyncCtx + 8 >> 2] = $13; //@line 4640
  sp = STACKTOP; //@line 4641
  return 0; //@line 4642
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4644
 _equeue_mutex_unlock($24); //@line 4645
 return $13 | 0; //@line 4646
}
function _mbedtls_cipher_free__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $18 = 0, $2 = 0, $22 = 0, $26 = 0, $30 = 0, $34 = 0, $38 = 0, $42 = 0, $46 = 0, $50 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $66 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3428
 HEAP8[$2 >> 0] = 0; //@line 3430
 HEAP8[$2 + 1 >> 0] = 0; //@line 3432
 HEAP8[$2 + 2 >> 0] = 0; //@line 3434
 $6 = $2 + 4 | 0; //@line 3435
 HEAP8[$2 + 3 >> 0] = 0; //@line 3436
 HEAP8[$6 >> 0] = 0; //@line 3438
 HEAP8[$6 + 1 >> 0] = 0; //@line 3440
 HEAP8[$6 + 2 >> 0] = 0; //@line 3442
 $10 = $6 + 4 | 0; //@line 3443
 HEAP8[$6 + 3 >> 0] = 0; //@line 3444
 HEAP8[$10 >> 0] = 0; //@line 3446
 HEAP8[$10 + 1 >> 0] = 0; //@line 3448
 HEAP8[$10 + 2 >> 0] = 0; //@line 3450
 $14 = $6 + 8 | 0; //@line 3451
 HEAP8[$10 + 3 >> 0] = 0; //@line 3452
 HEAP8[$14 >> 0] = 0; //@line 3454
 HEAP8[$14 + 1 >> 0] = 0; //@line 3456
 HEAP8[$14 + 2 >> 0] = 0; //@line 3458
 $18 = $6 + 12 | 0; //@line 3459
 HEAP8[$14 + 3 >> 0] = 0; //@line 3460
 HEAP8[$18 >> 0] = 0; //@line 3462
 HEAP8[$18 + 1 >> 0] = 0; //@line 3464
 HEAP8[$18 + 2 >> 0] = 0; //@line 3466
 $22 = $6 + 16 | 0; //@line 3467
 HEAP8[$18 + 3 >> 0] = 0; //@line 3468
 HEAP8[$22 >> 0] = 0; //@line 3470
 HEAP8[$22 + 1 >> 0] = 0; //@line 3472
 HEAP8[$22 + 2 >> 0] = 0; //@line 3474
 $26 = $6 + 20 | 0; //@line 3475
 HEAP8[$22 + 3 >> 0] = 0; //@line 3476
 HEAP8[$26 >> 0] = 0; //@line 3478
 HEAP8[$26 + 1 >> 0] = 0; //@line 3480
 HEAP8[$26 + 2 >> 0] = 0; //@line 3482
 $30 = $6 + 24 | 0; //@line 3483
 HEAP8[$26 + 3 >> 0] = 0; //@line 3484
 HEAP8[$30 >> 0] = 0; //@line 3486
 HEAP8[$30 + 1 >> 0] = 0; //@line 3488
 HEAP8[$30 + 2 >> 0] = 0; //@line 3490
 $34 = $6 + 28 | 0; //@line 3491
 HEAP8[$30 + 3 >> 0] = 0; //@line 3492
 HEAP8[$34 >> 0] = 0; //@line 3494
 HEAP8[$34 + 1 >> 0] = 0; //@line 3496
 HEAP8[$34 + 2 >> 0] = 0; //@line 3498
 $38 = $6 + 32 | 0; //@line 3499
 HEAP8[$34 + 3 >> 0] = 0; //@line 3500
 HEAP8[$38 >> 0] = 0; //@line 3502
 HEAP8[$38 + 1 >> 0] = 0; //@line 3504
 HEAP8[$38 + 2 >> 0] = 0; //@line 3506
 $42 = $6 + 36 | 0; //@line 3507
 HEAP8[$38 + 3 >> 0] = 0; //@line 3508
 HEAP8[$42 >> 0] = 0; //@line 3510
 HEAP8[$42 + 1 >> 0] = 0; //@line 3512
 HEAP8[$42 + 2 >> 0] = 0; //@line 3514
 $46 = $6 + 40 | 0; //@line 3515
 HEAP8[$42 + 3 >> 0] = 0; //@line 3516
 HEAP8[$46 >> 0] = 0; //@line 3518
 HEAP8[$46 + 1 >> 0] = 0; //@line 3520
 HEAP8[$46 + 2 >> 0] = 0; //@line 3522
 $50 = $6 + 44 | 0; //@line 3523
 HEAP8[$46 + 3 >> 0] = 0; //@line 3524
 HEAP8[$50 >> 0] = 0; //@line 3526
 HEAP8[$50 + 1 >> 0] = 0; //@line 3528
 HEAP8[$50 + 2 >> 0] = 0; //@line 3530
 $54 = $6 + 48 | 0; //@line 3531
 HEAP8[$50 + 3 >> 0] = 0; //@line 3532
 HEAP8[$54 >> 0] = 0; //@line 3534
 HEAP8[$54 + 1 >> 0] = 0; //@line 3536
 HEAP8[$54 + 2 >> 0] = 0; //@line 3538
 $58 = $6 + 52 | 0; //@line 3539
 HEAP8[$54 + 3 >> 0] = 0; //@line 3540
 HEAP8[$58 >> 0] = 0; //@line 3542
 HEAP8[$58 + 1 >> 0] = 0; //@line 3544
 HEAP8[$58 + 2 >> 0] = 0; //@line 3546
 $62 = $6 + 56 | 0; //@line 3547
 HEAP8[$58 + 3 >> 0] = 0; //@line 3548
 HEAP8[$62 >> 0] = 0; //@line 3550
 HEAP8[$62 + 1 >> 0] = 0; //@line 3552
 HEAP8[$62 + 2 >> 0] = 0; //@line 3554
 $66 = $6 + 60 | 0; //@line 3555
 HEAP8[$62 + 3 >> 0] = 0; //@line 3556
 HEAP8[$66 >> 0] = 0; //@line 3558
 HEAP8[$66 + 1 >> 0] = 0; //@line 3560
 HEAP8[$66 + 2 >> 0] = 0; //@line 3562
 HEAP8[$66 + 3 >> 0] = 0; //@line 3563
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_145($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx24 = 0, sp = 0;
 sp = STACKTOP; //@line 28584
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28586
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28588
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28590
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28592
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28594
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28596
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28598
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28600
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28602
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28604
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 28606
 $24 = HEAP8[$0 + 48 >> 0] | 0; //@line 28608
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 28610
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 28612
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 28614
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 28616
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 28618
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 28620
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 28622
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 28624
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 28626
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 28628
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 28630
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 28632
 $49 = $12 + 356 | 0; //@line 28633
 $50 = HEAP32[$49 >> 2] | 0; //@line 28634
 $ReallocAsyncCtx24 = _emscripten_realloc_async_context(104) | 0; //@line 28636
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($50, $12 + 1056 | 0); //@line 28637
 if (!___async) {
  ___async_unwind = 0; //@line 28640
 }
 HEAP32[$ReallocAsyncCtx24 >> 2] = 374; //@line 28642
 HEAP32[$ReallocAsyncCtx24 + 4 >> 2] = $2; //@line 28644
 HEAP32[$ReallocAsyncCtx24 + 8 >> 2] = $4; //@line 28646
 HEAP32[$ReallocAsyncCtx24 + 12 >> 2] = $6; //@line 28648
 HEAP32[$ReallocAsyncCtx24 + 16 >> 2] = $8; //@line 28650
 HEAP32[$ReallocAsyncCtx24 + 20 >> 2] = $10; //@line 28652
 HEAP32[$ReallocAsyncCtx24 + 24 >> 2] = $12; //@line 28654
 HEAP32[$ReallocAsyncCtx24 + 28 >> 2] = $36; //@line 28656
 HEAP32[$ReallocAsyncCtx24 + 32 >> 2] = $28; //@line 28658
 HEAP32[$ReallocAsyncCtx24 + 36 >> 2] = $48; //@line 28660
 HEAP32[$ReallocAsyncCtx24 + 40 >> 2] = $46; //@line 28662
 HEAP32[$ReallocAsyncCtx24 + 44 >> 2] = $49; //@line 28664
 HEAP32[$ReallocAsyncCtx24 + 48 >> 2] = $14; //@line 28666
 HEAP32[$ReallocAsyncCtx24 + 52 >> 2] = $16; //@line 28668
 HEAP32[$ReallocAsyncCtx24 + 56 >> 2] = $18; //@line 28670
 HEAP32[$ReallocAsyncCtx24 + 60 >> 2] = $20; //@line 28672
 HEAP32[$ReallocAsyncCtx24 + 64 >> 2] = $22; //@line 28674
 HEAP32[$ReallocAsyncCtx24 + 68 >> 2] = $30; //@line 28676
 HEAP32[$ReallocAsyncCtx24 + 72 >> 2] = $26; //@line 28678
 HEAP32[$ReallocAsyncCtx24 + 76 >> 2] = $32; //@line 28680
 HEAP32[$ReallocAsyncCtx24 + 80 >> 2] = $44; //@line 28682
 HEAP8[$ReallocAsyncCtx24 + 84 >> 0] = $24; //@line 28684
 HEAP32[$ReallocAsyncCtx24 + 88 >> 2] = $34; //@line 28686
 HEAP32[$ReallocAsyncCtx24 + 92 >> 2] = $38; //@line 28688
 HEAP32[$ReallocAsyncCtx24 + 96 >> 2] = $40; //@line 28690
 HEAP32[$ReallocAsyncCtx24 + 100 >> 2] = $42; //@line 28692
 sp = STACKTOP; //@line 28693
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_320($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 5450
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5452
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5454
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5456
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5458
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5460
 $13 = HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0; //@line 5463
 if (!$13) {
  $21 = HEAP32[$2 >> 2] | 0; //@line 5466
  $23 = $8 + 12 | 0; //@line 5468
  HEAP32[$8 >> 2] = 518; //@line 5469
  HEAP32[$8 + 4 >> 2] = 0; //@line 5471
  HEAP32[$8 + 8 >> 2] = $4; //@line 5473
  HEAP32[$23 >> 2] = 848; //@line 5474
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(24) | 0; //@line 5475
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($21, $4 + 1056 | 0, $8); //@line 5476
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 519; //@line 5479
   $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 5480
   HEAP32[$24 >> 2] = $23; //@line 5481
   $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 5482
   HEAP32[$25 >> 2] = $2; //@line 5483
   $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 5484
   HEAP32[$26 >> 2] = $4; //@line 5485
   $27 = $ReallocAsyncCtx7 + 16 | 0; //@line 5486
   HEAP32[$27 >> 2] = $6; //@line 5487
   $28 = $ReallocAsyncCtx7 + 20 | 0; //@line 5488
   HEAP32[$28 >> 2] = $8; //@line 5489
   sp = STACKTOP; //@line 5490
   return;
  }
  ___async_unwind = 0; //@line 5493
  HEAP32[$ReallocAsyncCtx7 >> 2] = 519; //@line 5494
  $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 5495
  HEAP32[$24 >> 2] = $23; //@line 5496
  $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 5497
  HEAP32[$25 >> 2] = $2; //@line 5498
  $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 5499
  HEAP32[$26 >> 2] = $4; //@line 5500
  $27 = $ReallocAsyncCtx7 + 16 | 0; //@line 5501
  HEAP32[$27 >> 2] = $6; //@line 5502
  $28 = $ReallocAsyncCtx7 + 20 | 0; //@line 5503
  HEAP32[$28 >> 2] = $8; //@line 5504
  sp = STACKTOP; //@line 5505
  return;
 } else {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 5509
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 5510
  FUNCTION_TABLE_vi[$16 & 1023]($10); //@line 5511
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 517; //@line 5514
   $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 5515
   HEAP32[$17 >> 2] = $2; //@line 5516
   $18 = $ReallocAsyncCtx3 + 8 | 0; //@line 5517
   HEAP32[$18 >> 2] = $4; //@line 5518
   $19 = $ReallocAsyncCtx3 + 12 | 0; //@line 5519
   HEAP32[$19 >> 2] = $8; //@line 5520
   $20 = $ReallocAsyncCtx3 + 16 | 0; //@line 5521
   HEAP32[$20 >> 2] = $6; //@line 5522
   sp = STACKTOP; //@line 5523
   return;
  }
  ___async_unwind = 0; //@line 5526
  HEAP32[$ReallocAsyncCtx3 >> 2] = 517; //@line 5527
  $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 5528
  HEAP32[$17 >> 2] = $2; //@line 5529
  $18 = $ReallocAsyncCtx3 + 8 | 0; //@line 5530
  HEAP32[$18 >> 2] = $4; //@line 5531
  $19 = $ReallocAsyncCtx3 + 12 | 0; //@line 5532
  HEAP32[$19 >> 2] = $8; //@line 5533
  $20 = $ReallocAsyncCtx3 + 16 | 0; //@line 5534
  HEAP32[$20 >> 2] = $6; //@line 5535
  sp = STACKTOP; //@line 5536
  return;
 }
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $12 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $36 = 0, $39 = 0, $40 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx14 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 14279
 STACKTOP = STACKTOP + 48 | 0; //@line 14280
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 14280
 $vararg_buffer10 = sp + 32 | 0; //@line 14281
 $vararg_buffer7 = sp + 24 | 0; //@line 14282
 $vararg_buffer3 = sp + 16 | 0; //@line 14283
 $vararg_buffer = sp; //@line 14284
 $0 = sp + 36 | 0; //@line 14285
 $1 = ___cxa_get_globals_fast() | 0; //@line 14286
 if ($1 | 0) {
  $3 = HEAP32[$1 >> 2] | 0; //@line 14289
  if ($3 | 0) {
   $7 = $3 + 48 | 0; //@line 14294
   $9 = HEAP32[$7 >> 2] | 0; //@line 14296
   $12 = HEAP32[$7 + 4 >> 2] | 0; //@line 14299
   if (!(($9 & -256 | 0) == 1126902528 & ($12 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer7 >> 2] = 17779; //@line 14305
    _abort_message(17729, $vararg_buffer7); //@line 14306
   }
   if (($9 | 0) == 1126902529 & ($12 | 0) == 1129074247) {
    $22 = HEAP32[$3 + 44 >> 2] | 0; //@line 14315
   } else {
    $22 = $3 + 80 | 0; //@line 14317
   }
   HEAP32[$0 >> 2] = $22; //@line 14319
   $23 = HEAP32[$3 >> 2] | 0; //@line 14320
   $25 = HEAP32[$23 + 4 >> 2] | 0; //@line 14322
   $28 = HEAP32[(HEAP32[110] | 0) + 16 >> 2] | 0; //@line 14325
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 14326
   $29 = FUNCTION_TABLE_iiii[$28 & 15](440, $23, $0) | 0; //@line 14327
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 747; //@line 14330
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 14332
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer3; //@line 14334
    HEAP32[$AsyncCtx + 12 >> 2] = $25; //@line 14336
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 14338
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 14340
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 14342
    sp = STACKTOP; //@line 14343
    STACKTOP = sp; //@line 14344
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 14346
   if (!$29) {
    HEAP32[$vararg_buffer3 >> 2] = 17779; //@line 14348
    HEAP32[$vararg_buffer3 + 4 >> 2] = $25; //@line 14350
    _abort_message(17688, $vararg_buffer3); //@line 14351
   }
   $36 = HEAP32[$0 >> 2] | 0; //@line 14354
   $39 = HEAP32[(HEAP32[$36 >> 2] | 0) + 8 >> 2] | 0; //@line 14357
   $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14358
   $40 = FUNCTION_TABLE_ii[$39 & 15]($36) | 0; //@line 14359
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 748; //@line 14362
    HEAP32[$AsyncCtx14 + 4 >> 2] = $vararg_buffer; //@line 14364
    HEAP32[$AsyncCtx14 + 8 >> 2] = $25; //@line 14366
    HEAP32[$AsyncCtx14 + 12 >> 2] = $vararg_buffer; //@line 14368
    sp = STACKTOP; //@line 14369
    STACKTOP = sp; //@line 14370
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 14372
    HEAP32[$vararg_buffer >> 2] = 17779; //@line 14373
    HEAP32[$vararg_buffer + 4 >> 2] = $25; //@line 14375
    HEAP32[$vararg_buffer + 8 >> 2] = $40; //@line 14377
    _abort_message(17643, $vararg_buffer); //@line 14378
   }
  }
 }
 _abort_message(17767, $vararg_buffer10); //@line 14383
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_188($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 32560
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32564
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32566
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32568
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32570
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 32572
 $12 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 32573
 if ($12 | 0) {
  $15 = HEAP32[$12 + 8 >> 2] | 0; //@line 32577
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 32578
  FUNCTION_TABLE_vi[$15 & 1023]($4); //@line 32579
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 205; //@line 32582
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 32583
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 32584
   $17 = $ReallocAsyncCtx4 + 8 | 0; //@line 32585
   HEAP32[$17 >> 2] = $6; //@line 32586
   $18 = $ReallocAsyncCtx4 + 12 | 0; //@line 32587
   HEAP32[$18 >> 2] = $8; //@line 32588
   $19 = $ReallocAsyncCtx4 + 16 | 0; //@line 32589
   HEAP32[$19 >> 2] = $10; //@line 32590
   sp = STACKTOP; //@line 32591
   return;
  }
  ___async_unwind = 0; //@line 32594
  HEAP32[$ReallocAsyncCtx4 >> 2] = 205; //@line 32595
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 32596
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 32597
  $17 = $ReallocAsyncCtx4 + 8 | 0; //@line 32598
  HEAP32[$17 >> 2] = $6; //@line 32599
  $18 = $ReallocAsyncCtx4 + 12 | 0; //@line 32600
  HEAP32[$18 >> 2] = $8; //@line 32601
  $19 = $ReallocAsyncCtx4 + 16 | 0; //@line 32602
  HEAP32[$19 >> 2] = $10; //@line 32603
  sp = STACKTOP; //@line 32604
  return;
 }
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(16) | 0; //@line 32609
  _mbed_assert_internal(12827, 11911, 909); //@line 32610
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 206; //@line 32613
   $21 = $ReallocAsyncCtx10 + 4 | 0; //@line 32614
   HEAP32[$21 >> 2] = $6; //@line 32615
   $22 = $ReallocAsyncCtx10 + 8 | 0; //@line 32616
   HEAP32[$22 >> 2] = $8; //@line 32617
   $23 = $ReallocAsyncCtx10 + 12 | 0; //@line 32618
   HEAP32[$23 >> 2] = $10; //@line 32619
   sp = STACKTOP; //@line 32620
   return;
  }
  ___async_unwind = 0; //@line 32623
  HEAP32[$ReallocAsyncCtx10 >> 2] = 206; //@line 32624
  $21 = $ReallocAsyncCtx10 + 4 | 0; //@line 32625
  HEAP32[$21 >> 2] = $6; //@line 32626
  $22 = $ReallocAsyncCtx10 + 8 | 0; //@line 32627
  HEAP32[$22 >> 2] = $8; //@line 32628
  $23 = $ReallocAsyncCtx10 + 12 | 0; //@line 32629
  HEAP32[$23 >> 2] = $10; //@line 32630
  sp = STACKTOP; //@line 32631
  return;
 }
 if (!(HEAP8[$6 + 11 >> 0] | 0)) {
  return;
 }
 $27 = HEAP8[$8 >> 0] | 0; //@line 32640
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 32641
 __ZN12LoRaWANStack9handle_txEhPKhth($10, $27, 0, 0, 2) | 0; //@line 32642
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 207; //@line 32645
  sp = STACKTOP; //@line 32646
  return;
 }
 ___async_unwind = 0; //@line 32649
 HEAP32[$ReallocAsyncCtx7 >> 2] = 207; //@line 32650
 sp = STACKTOP; //@line 32651
 return;
}
function __ZN12LoRaWANStack21set_channel_data_rateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$1 = 0, $2 = 0, $20 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx9 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 9577
 STACKTOP = STACKTOP + 48 | 0; //@line 9578
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 9578
 $vararg_buffer5 = sp + 24 | 0; //@line 9579
 $vararg_buffer3 = sp + 16 | 0; //@line 9580
 $2 = sp + 28 | 0; //@line 9583
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _printf(11863, sp) | 0; //@line 9588
  _printf(12660, sp + 8 | 0) | 0; //@line 9589
  $AsyncCtx9 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9590
  _putchar(10) | 0; //@line 9591
  if (___async) {
   HEAP32[$AsyncCtx9 >> 2] = 316; //@line 9594
   sp = STACKTOP; //@line 9595
   STACKTOP = sp; //@line 9596
   return 0; //@line 9596
  }
  _emscripten_free_async_context($AsyncCtx9 | 0); //@line 9598
  $$1 = -1012; //@line 9599
  STACKTOP = sp; //@line 9600
  return $$1 | 0; //@line 9600
 }
 HEAP32[$2 >> 2] = 2; //@line 9602
 $6 = $0 + 4 | 0; //@line 9603
 $AsyncCtx13 = _emscripten_alloc_async_context(40, sp) | 0; //@line 9604
 $7 = __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($6, $2) | 0; //@line 9605
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 317; //@line 9608
  HEAP32[$AsyncCtx13 + 4 >> 2] = $2; //@line 9610
  HEAP32[$AsyncCtx13 + 8 >> 2] = $2; //@line 9612
  HEAP8[$AsyncCtx13 + 12 >> 0] = $1; //@line 9614
  HEAP32[$AsyncCtx13 + 16 >> 2] = $6; //@line 9616
  HEAP32[$AsyncCtx13 + 20 >> 2] = $vararg_buffer3; //@line 9618
  HEAP32[$AsyncCtx13 + 24 >> 2] = $vararg_buffer3; //@line 9620
  HEAP32[$AsyncCtx13 + 28 >> 2] = $vararg_buffer5; //@line 9622
  HEAP32[$AsyncCtx13 + 32 >> 2] = $vararg_buffer5; //@line 9624
  HEAP32[$AsyncCtx13 + 36 >> 2] = $2; //@line 9626
  sp = STACKTOP; //@line 9627
  STACKTOP = sp; //@line 9628
  return 0; //@line 9628
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 9630
 do {
  if (!$7) {
   HEAP32[$2 >> 2] = 21; //@line 9634
   HEAP8[$2 + 4 >> 0] = $1; //@line 9636
   $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9637
   $20 = __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($6, $2) | 0; //@line 9638
   if (___async) {
    HEAP32[$AsyncCtx17 >> 2] = 319; //@line 9641
    HEAP32[$AsyncCtx17 + 4 >> 2] = $2; //@line 9643
    sp = STACKTOP; //@line 9644
    STACKTOP = sp; //@line 9645
    return 0; //@line 9645
   } else {
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 9647
    $$0 = $20; //@line 9648
    break;
   }
  } else {
   _printf(11863, $vararg_buffer3) | 0; //@line 9652
   _printf(12721, $vararg_buffer5) | 0; //@line 9653
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 9654
   _putchar(10) | 0; //@line 9655
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 318; //@line 9658
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 9660
    sp = STACKTOP; //@line 9661
    STACKTOP = sp; //@line 9662
    return 0; //@line 9662
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 9664
    $$0 = -1003; //@line 9665
    break;
   }
  }
 } while (0);
 $$1 = $$0; //@line 9670
 STACKTOP = sp; //@line 9671
 return $$1 | 0; //@line 9671
}
function __ZN18LoRaMacChannelPlan11remove_planEv($0) {
 $0 = $0 | 0;
 var $10 = 0, $21 = 0, $24 = 0, $26 = 0, $32 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $indvars$iv = 0, $indvars$iv$next = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19373
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $39 = -1002; //@line 19377
  return $39 | 0; //@line 19378
 }
 $4 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 19381
 $6 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 0) | 0; //@line 19383
 $8 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 1) | 0; //@line 19385
 if (!($4 << 24 >> 24)) {
  $39 = 0; //@line 19388
  return $39 | 0; //@line 19389
 }
 $10 = $4 & 255; //@line 19391
 $indvars$iv = 0; //@line 19392
 while (1) {
  if (!(__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $8, $indvars$iv) | 0)) {
   if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $6, $indvars$iv) | 0) {
    if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
     $39 = -1002; //@line 19403
     label = 15; //@line 19404
     break;
    }
    if ($indvars$iv >>> 0 >= ((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0) & 255) >>> 0) {
     $39 = -1003; //@line 19412
     label = 15; //@line 19413
     break;
    }
    $21 = HEAP32[$0 >> 2] | 0; //@line 19416
    $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 64 >> 2] | 0; //@line 19419
    $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 19421
    $26 = FUNCTION_TABLE_iii[$24 & 31]($21, $indvars$iv & 255) | 0; //@line 19422
    if (___async) {
     label = 9; //@line 19425
     break;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 19428
    if (!$26) {
     $39 = -1003; //@line 19430
     label = 15; //@line 19431
     break;
    }
    $32 = HEAP32[$0 >> 2] | 0; //@line 19434
    $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19435
    __ZN7LoRaPHY18put_radio_to_sleepEv($32); //@line 19436
    if (___async) {
     label = 12; //@line 19439
     break;
    }
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 19442
   }
  }
  $indvars$iv$next = $indvars$iv + 1 | 0; //@line 19445
  if ($indvars$iv$next >>> 0 < $10 >>> 0) {
   $indvars$iv = $indvars$iv$next; //@line 19448
  } else {
   $39 = 0; //@line 19450
   label = 15; //@line 19451
   break;
  }
 }
 if ((label | 0) == 9) {
  HEAP32[$AsyncCtx >> 2] = 572; //@line 19456
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 19458
  HEAP32[$AsyncCtx + 8 >> 2] = $indvars$iv; //@line 19460
  HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 19462
  HEAP32[$AsyncCtx + 16 >> 2] = $8; //@line 19464
  HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 19466
  sp = STACKTOP; //@line 19467
  return 0; //@line 19468
 } else if ((label | 0) == 12) {
  HEAP32[$AsyncCtx2 >> 2] = 573; //@line 19471
  HEAP32[$AsyncCtx2 + 4 >> 2] = $indvars$iv; //@line 19473
  HEAP32[$AsyncCtx2 + 8 >> 2] = $10; //@line 19475
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 19477
  HEAP32[$AsyncCtx2 + 16 >> 2] = $8; //@line 19479
  HEAP32[$AsyncCtx2 + 20 >> 2] = $6; //@line 19481
  sp = STACKTOP; //@line 19482
  return 0; //@line 19483
 } else if ((label | 0) == 15) {
  return $39 | 0; //@line 19486
 }
 return 0; //@line 19488
}
function __ZN18LoRaMacChannelPlan11remove_planEv__async_cb_69($0) {
 $0 = $0 | 0;
 var $10 = 0, $21 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $indvars$iv$reg2mem$0 = 0, label = 0, sp = 0, $indvars$iv$reg2mem$0$looptemp = 0;
 sp = STACKTOP; //@line 22899
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22903
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22905
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22907
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22909
 $indvars$iv$reg2mem$0 = HEAP32[$0 + 4 >> 2] | 0; //@line 22910
 while (1) {
  $indvars$iv$reg2mem$0$looptemp = $indvars$iv$reg2mem$0;
  $indvars$iv$reg2mem$0 = $indvars$iv$reg2mem$0 + 1 | 0; //@line 22912
  if ($indvars$iv$reg2mem$0 >>> 0 >= $4 >>> 0) {
   $35 = 0; //@line 22915
   label = 11; //@line 22916
   break;
  }
  if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$6 >> 2] | 0, $8, $indvars$iv$reg2mem$0) | 0) {
   $indvars$iv$reg2mem$0 = $indvars$iv$reg2mem$0; //@line 22922
   continue;
  }
  if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$6 >> 2] | 0, $10, $indvars$iv$reg2mem$0) | 0) {
   break;
  }
 }
 if ((label | 0) == 11) {
  $34 = ___async_retval; //@line 22934
  HEAP32[$34 >> 2] = $35; //@line 22935
  return;
 }
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$6 >> 2] | 0) | 0)) {
  $35 = -1002; //@line 22941
  $34 = ___async_retval; //@line 22942
  HEAP32[$34 >> 2] = $35; //@line 22943
  return;
 }
 if ($indvars$iv$reg2mem$0 >>> 0 >= ((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$6 >> 2] | 0) | 0) & 255) >>> 0) {
  $35 = -1003; //@line 22951
  $34 = ___async_retval; //@line 22952
  HEAP32[$34 >> 2] = $35; //@line 22953
  return;
 }
 $21 = HEAP32[$6 >> 2] | 0; //@line 22956
 $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 64 >> 2] | 0; //@line 22959
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 22961
 $26 = FUNCTION_TABLE_iii[$24 & 31]($21, $indvars$iv$reg2mem$0 & 255) | 0; //@line 22962
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 572; //@line 22965
  $27 = $ReallocAsyncCtx + 4 | 0; //@line 22966
  HEAP32[$27 >> 2] = $6; //@line 22967
  $28 = $ReallocAsyncCtx + 8 | 0; //@line 22968
  HEAP32[$28 >> 2] = $indvars$iv$reg2mem$0; //@line 22969
  $29 = $ReallocAsyncCtx + 12 | 0; //@line 22970
  HEAP32[$29 >> 2] = $4; //@line 22971
  $30 = $ReallocAsyncCtx + 16 | 0; //@line 22972
  HEAP32[$30 >> 2] = $8; //@line 22973
  $31 = $ReallocAsyncCtx + 20 | 0; //@line 22974
  HEAP32[$31 >> 2] = $10; //@line 22975
  sp = STACKTOP; //@line 22976
  return;
 }
 HEAP8[___async_retval >> 0] = $26 & 1; //@line 22981
 ___async_unwind = 0; //@line 22982
 HEAP32[$ReallocAsyncCtx >> 2] = 572; //@line 22983
 $27 = $ReallocAsyncCtx + 4 | 0; //@line 22984
 HEAP32[$27 >> 2] = $6; //@line 22985
 $28 = $ReallocAsyncCtx + 8 | 0; //@line 22986
 HEAP32[$28 >> 2] = $indvars$iv$reg2mem$0; //@line 22987
 $29 = $ReallocAsyncCtx + 12 | 0; //@line 22988
 HEAP32[$29 >> 2] = $4; //@line 22989
 $30 = $ReallocAsyncCtx + 16 | 0; //@line 22990
 HEAP32[$30 >> 2] = $8; //@line 22991
 $31 = $ReallocAsyncCtx + 20 | 0; //@line 22992
 HEAP32[$31 >> 2] = $10; //@line 22993
 sp = STACKTOP; //@line 22994
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_164($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 31012
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31014
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31016
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31018
 $11 = $6 + 1880 | 0; //@line 31023
 $12 = $6 + 1892 | 0; //@line 31024
 $13 = HEAP32[$12 >> 2] | 0; //@line 31025
 $14 = ($13 | 0) != 0; //@line 31026
 if ((HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0) == 2) {
  if (!$14) {
   return;
  }
  $16 = HEAP32[$6 + 2288 >> 2] | 0; //@line 31032
  $18 = HEAP32[$13 + 4 >> 2] | 0; //@line 31034
  $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 31035
  FUNCTION_TABLE_vii[$18 & 31]($2, $11); //@line 31036
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 185; //@line 31039
   $19 = $ReallocAsyncCtx + 4 | 0; //@line 31040
   HEAP32[$19 >> 2] = $12; //@line 31041
   $20 = $ReallocAsyncCtx + 8 | 0; //@line 31042
   HEAP32[$20 >> 2] = $2; //@line 31043
   $21 = $ReallocAsyncCtx + 12 | 0; //@line 31044
   HEAP32[$21 >> 2] = $16; //@line 31045
   $22 = $ReallocAsyncCtx + 16 | 0; //@line 31046
   HEAP32[$22 >> 2] = $2; //@line 31047
   sp = STACKTOP; //@line 31048
   return;
  }
  ___async_unwind = 0; //@line 31051
  HEAP32[$ReallocAsyncCtx >> 2] = 185; //@line 31052
  $19 = $ReallocAsyncCtx + 4 | 0; //@line 31053
  HEAP32[$19 >> 2] = $12; //@line 31054
  $20 = $ReallocAsyncCtx + 8 | 0; //@line 31055
  HEAP32[$20 >> 2] = $2; //@line 31056
  $21 = $ReallocAsyncCtx + 12 | 0; //@line 31057
  HEAP32[$21 >> 2] = $16; //@line 31058
  $22 = $ReallocAsyncCtx + 16 | 0; //@line 31059
  HEAP32[$22 >> 2] = $2; //@line 31060
  sp = STACKTOP; //@line 31061
  return;
 } else {
  if (!$14) {
   return;
  }
  $24 = HEAP32[$6 + 2288 >> 2] | 0; //@line 31068
  $26 = HEAP32[$13 + 4 >> 2] | 0; //@line 31070
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 31071
  FUNCTION_TABLE_vii[$26 & 31]($4, $11); //@line 31072
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 189; //@line 31075
   $27 = $ReallocAsyncCtx3 + 4 | 0; //@line 31076
   HEAP32[$27 >> 2] = $12; //@line 31077
   $28 = $ReallocAsyncCtx3 + 8 | 0; //@line 31078
   HEAP32[$28 >> 2] = $4; //@line 31079
   $29 = $ReallocAsyncCtx3 + 12 | 0; //@line 31080
   HEAP32[$29 >> 2] = $24; //@line 31081
   $30 = $ReallocAsyncCtx3 + 16 | 0; //@line 31082
   HEAP32[$30 >> 2] = $4; //@line 31083
   sp = STACKTOP; //@line 31084
   return;
  }
  ___async_unwind = 0; //@line 31087
  HEAP32[$ReallocAsyncCtx3 >> 2] = 189; //@line 31088
  $27 = $ReallocAsyncCtx3 + 4 | 0; //@line 31089
  HEAP32[$27 >> 2] = $12; //@line 31090
  $28 = $ReallocAsyncCtx3 + 8 | 0; //@line 31091
  HEAP32[$28 >> 2] = $4; //@line 31092
  $29 = $ReallocAsyncCtx3 + 12 | 0; //@line 31093
  HEAP32[$29 >> 2] = $24; //@line 31094
  $30 = $ReallocAsyncCtx3 + 16 | 0; //@line 31095
  HEAP32[$30 >> 2] = $4; //@line 31096
  sp = STACKTOP; //@line 31097
  return;
 }
}
function __Z22compute_join_frame_micPKhtS0_Pj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $19 = 0, $22 = 0, $4 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 21664
 _mbedtls_cipher_init(21844); //@line 21665
 $4 = _mbedtls_cipher_info_from_type(2) | 0; //@line 21666
 if (!$4) {
  $$0 = -24960; //@line 21669
 } else {
  $AsyncCtx11 = _emscripten_alloc_async_context(20, sp) | 0; //@line 21671
  $6 = _mbedtls_cipher_setup(21844, $4) | 0; //@line 21672
  if (___async) {
   HEAP32[$AsyncCtx11 >> 2] = 587; //@line 21675
   HEAP32[$AsyncCtx11 + 4 >> 2] = $2; //@line 21677
   HEAP16[$AsyncCtx11 + 8 >> 1] = $1; //@line 21679
   HEAP32[$AsyncCtx11 + 12 >> 2] = $0; //@line 21681
   HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 21683
   sp = STACKTOP; //@line 21684
   return 0; //@line 21685
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 21687
  if (!$6) {
   $AsyncCtx7 = _emscripten_alloc_async_context(16, sp) | 0; //@line 21690
   $12 = _mbedtls_cipher_cmac_starts(21844, $2, 128) | 0; //@line 21691
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 588; //@line 21694
    HEAP16[$AsyncCtx7 + 4 >> 1] = $1; //@line 21696
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 21698
    HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 21700
    sp = STACKTOP; //@line 21701
    return 0; //@line 21702
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 21704
   if (!$12) {
    $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 21709
    $19 = _mbedtls_cipher_cmac_update(21844, $0, $1 & 255) | 0; //@line 21710
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 589; //@line 21713
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 21715
     sp = STACKTOP; //@line 21716
     return 0; //@line 21717
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 21719
    if (!$19) {
     $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 21722
     $22 = _mbedtls_cipher_cmac_finish(21844, 23152) | 0; //@line 21723
     if (___async) {
      HEAP32[$AsyncCtx3 >> 2] = 590; //@line 21726
      HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 21728
      sp = STACKTOP; //@line 21729
      return 0; //@line 21730
     }
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 21732
     if (!$22) {
      HEAP32[$3 >> 2] = (HEAPU8[23154] | 0) << 16 | (HEAPU8[23155] | 0) << 24 | (HEAPU8[23153] | 0) << 8 | (HEAPU8[23152] | 0); //@line 21749
      $$0 = 0; //@line 21750
     } else {
      $$0 = $22; //@line 21752
     }
    } else {
     $$0 = $19; //@line 21755
    }
   } else {
    $$0 = $12; //@line 21758
   }
  } else {
   $$0 = $6; //@line 21761
  }
 }
 $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 21764
 _mbedtls_cipher_free(21844); //@line 21765
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 591; //@line 21768
  HEAP32[$AsyncCtx15 + 4 >> 2] = $$0; //@line 21770
  sp = STACKTOP; //@line 21771
  return 0; //@line 21772
 } else {
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 21774
  return $$0 | 0; //@line 21775
 }
 return 0; //@line 21777
}
function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $27 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10174
 STACKTOP = STACKTOP + 48 | 0; //@line 10175
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 10175
 $vararg_buffer3 = sp + 16 | 0; //@line 10176
 $vararg_buffer = sp; //@line 10177
 $3 = sp + 32 | 0; //@line 10178
 $4 = $0 + 28 | 0; //@line 10179
 $5 = HEAP32[$4 >> 2] | 0; //@line 10180
 HEAP32[$3 >> 2] = $5; //@line 10181
 $7 = $0 + 20 | 0; //@line 10183
 $9 = (HEAP32[$7 >> 2] | 0) - $5 | 0; //@line 10185
 HEAP32[$3 + 4 >> 2] = $9; //@line 10186
 HEAP32[$3 + 8 >> 2] = $1; //@line 10188
 HEAP32[$3 + 12 >> 2] = $2; //@line 10190
 $12 = $9 + $2 | 0; //@line 10191
 $13 = $0 + 60 | 0; //@line 10192
 HEAP32[$vararg_buffer >> 2] = HEAP32[$13 >> 2]; //@line 10195
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 10197
 HEAP32[$vararg_buffer + 8 >> 2] = 2; //@line 10199
 $17 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0; //@line 10201
 L1 : do {
  if (($12 | 0) == ($17 | 0)) {
   label = 3; //@line 10205
  } else {
   $$04756 = 2; //@line 10207
   $$04855 = $12; //@line 10207
   $$04954 = $3; //@line 10207
   $27 = $17; //@line 10207
   while (1) {
    if (($27 | 0) < 0) {
     break;
    }
    $$04855 = $$04855 - $27 | 0; //@line 10213
    $37 = HEAP32[$$04954 + 4 >> 2] | 0; //@line 10215
    $38 = $27 >>> 0 > $37 >>> 0; //@line 10216
    $$150 = $38 ? $$04954 + 8 | 0 : $$04954; //@line 10218
    $$1 = $$04756 + ($38 << 31 >> 31) | 0; //@line 10220
    $$0 = $27 - ($38 ? $37 : 0) | 0; //@line 10222
    HEAP32[$$150 >> 2] = (HEAP32[$$150 >> 2] | 0) + $$0; //@line 10225
    $44 = $$150 + 4 | 0; //@line 10226
    HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) - $$0; //@line 10229
    HEAP32[$vararg_buffer3 >> 2] = HEAP32[$13 >> 2]; //@line 10232
    HEAP32[$vararg_buffer3 + 4 >> 2] = $$150; //@line 10234
    HEAP32[$vararg_buffer3 + 8 >> 2] = $$1; //@line 10236
    $27 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0; //@line 10238
    if (($$04855 | 0) == ($27 | 0)) {
     label = 3; //@line 10241
     break L1;
    } else {
     $$04756 = $$1; //@line 10244
     $$04954 = $$150; //@line 10244
    }
   }
   HEAP32[$0 + 16 >> 2] = 0; //@line 10248
   HEAP32[$4 >> 2] = 0; //@line 10249
   HEAP32[$7 >> 2] = 0; //@line 10250
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32; //@line 10253
   if (($$04756 | 0) == 2) {
    $$051 = 0; //@line 10256
   } else {
    $$051 = $2 - (HEAP32[$$04954 + 4 >> 2] | 0) | 0; //@line 10261
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $20 = HEAP32[$0 + 44 >> 2] | 0; //@line 10267
  HEAP32[$0 + 16 >> 2] = $20 + (HEAP32[$0 + 48 >> 2] | 0); //@line 10272
  $25 = $20; //@line 10273
  HEAP32[$4 >> 2] = $25; //@line 10274
  HEAP32[$7 >> 2] = $25; //@line 10275
  $$051 = $2; //@line 10276
 }
 STACKTOP = sp; //@line 10278
 return $$051 | 0; //@line 10278
}
function __ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_366($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 18098
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 18104
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18106
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18110
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18112
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18114
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18116
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18118
 $22 = HEAP16[$0 + 44 >> 1] | 0; //@line 18120
 $24 = HEAP8[$0 + 46 >> 0] | 0; //@line 18122
 $26 = HEAP8[$0 + 47 >> 0] | 0; //@line 18124
 $28 = HEAP8[$0 + 48 >> 0] | 0; //@line 18126
 $30 = HEAP32[$0 + 52 >> 2] | 0; //@line 18128
 $32 = HEAP32[$0 + 56 >> 2] | 0; //@line 18130
 $34 = HEAP32[$0 + 60 >> 2] | 0; //@line 18132
 $36 = HEAP32[$0 + 64 >> 2] | 0; //@line 18134
 $38 = HEAP32[$0 + 68 >> 2] | 0; //@line 18136
 $40 = HEAP8[$0 + 72 >> 0] | 0; //@line 18138
 $42 = HEAP8[$0 + 73 >> 0] | 0; //@line 18140
 $44 = HEAP8[$0 + 74 >> 0] | 0; //@line 18142
 $46 = HEAP32[$0 + 76 >> 2] | 0; //@line 18144
 $48 = HEAP32[$0 + 80 >> 2] | 0; //@line 18146
 $50 = HEAP32[$0 + 84 >> 2] | 0; //@line 18148
 $52 = HEAP32[$0 + 88 >> 2] | 0; //@line 18150
 _printf(10880, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 18151
 HEAP32[$8 >> 2] = $6 << 24 >> 24; //@line 18153
 _printf(11449, $8) | 0; //@line 18154
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(76) | 0; //@line 18155
 _putchar(10) | 0; //@line 18156
 if (!___async) {
  ___async_unwind = 0; //@line 18159
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 61; //@line 18161
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $12; //@line 18163
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $14; //@line 18165
 HEAP8[$ReallocAsyncCtx3 + 12 >> 0] = $6; //@line 18167
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $16; //@line 18169
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $18; //@line 18171
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $20; //@line 18173
 HEAP16[$ReallocAsyncCtx3 + 28 >> 1] = $22; //@line 18175
 HEAP8[$ReallocAsyncCtx3 + 30 >> 0] = $24; //@line 18177
 HEAP8[$ReallocAsyncCtx3 + 31 >> 0] = $26; //@line 18179
 HEAP8[$ReallocAsyncCtx3 + 32 >> 0] = $28; //@line 18181
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $30; //@line 18183
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $32; //@line 18185
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $34; //@line 18187
 HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $36; //@line 18189
 HEAP32[$ReallocAsyncCtx3 + 52 >> 2] = $38; //@line 18191
 HEAP8[$ReallocAsyncCtx3 + 56 >> 0] = $40; //@line 18193
 HEAP8[$ReallocAsyncCtx3 + 57 >> 0] = $42; //@line 18195
 HEAP8[$ReallocAsyncCtx3 + 58 >> 0] = $44; //@line 18197
 HEAP32[$ReallocAsyncCtx3 + 60 >> 2] = $46; //@line 18199
 HEAP32[$ReallocAsyncCtx3 + 64 >> 2] = $48; //@line 18201
 HEAP32[$ReallocAsyncCtx3 + 68 >> 2] = $50; //@line 18203
 HEAP32[$ReallocAsyncCtx3 + 72 >> 2] = $52; //@line 18205
 sp = STACKTOP; //@line 18206
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_278($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $46 = 0, $50 = 0, $54 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 2798
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2800
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2802
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2804
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2806
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2808
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2810
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2812
 $16 = HEAP16[$0 + 32 >> 1] | 0; //@line 2814
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 2816
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 2818
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 2820
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 2822
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 2824
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 2826
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 2828
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 2830
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 2832
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 2834
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 2836
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 2838
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 2840
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 2844
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 2848
 $54 = $2 + 689 | 0; //@line 2852
 HEAP8[$54 >> 0] = HEAP32[$0 + 88 >> 2]; //@line 2853
 _printf(10880, $46) | 0; //@line 2854
 HEAP32[$50 >> 2] = HEAPU8[$54 >> 0]; //@line 2857
 _printf(11055, $50) | 0; //@line 2858
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(88) | 0; //@line 2859
 _putchar(10) | 0; //@line 2860
 if (!___async) {
  ___async_unwind = 0; //@line 2863
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 89; //@line 2865
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 2867
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $4; //@line 2869
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $6; //@line 2871
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $8; //@line 2873
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $10; //@line 2875
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $12; //@line 2877
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $14; //@line 2879
 HEAP16[$ReallocAsyncCtx7 + 32 >> 1] = $16; //@line 2881
 HEAP32[$ReallocAsyncCtx7 + 36 >> 2] = $18; //@line 2883
 HEAP32[$ReallocAsyncCtx7 + 40 >> 2] = $20; //@line 2885
 HEAP32[$ReallocAsyncCtx7 + 44 >> 2] = $22; //@line 2887
 HEAP32[$ReallocAsyncCtx7 + 48 >> 2] = $24; //@line 2889
 HEAP32[$ReallocAsyncCtx7 + 52 >> 2] = $26; //@line 2891
 HEAP32[$ReallocAsyncCtx7 + 56 >> 2] = $28; //@line 2893
 HEAP32[$ReallocAsyncCtx7 + 60 >> 2] = $30; //@line 2895
 HEAP32[$ReallocAsyncCtx7 + 64 >> 2] = $32; //@line 2897
 HEAP32[$ReallocAsyncCtx7 + 68 >> 2] = $34; //@line 2899
 HEAP32[$ReallocAsyncCtx7 + 72 >> 2] = $36; //@line 2901
 HEAP32[$ReallocAsyncCtx7 + 76 >> 2] = $38; //@line 2903
 HEAP32[$ReallocAsyncCtx7 + 80 >> 2] = $40; //@line 2905
 HEAP32[$ReallocAsyncCtx7 + 84 >> 2] = $42; //@line 2907
 sp = STACKTOP; //@line 2908
 return;
}
function __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$026 = 0, $$1 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $28 = 0, $31 = 0, $33 = 0, $34 = 0, $6 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19164
 STACKTOP = STACKTOP + 16 | 0; //@line 19165
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 19165
 $2 = sp; //@line 19166
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $$1 = -1002; //@line 19170
  STACKTOP = sp; //@line 19171
  return $$1 | 0; //@line 19171
 }
 $6 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 19174
 $7 = HEAP8[$1 >> 0] | 0; //@line 19175
 if (($7 & 255) > ($6 & 255)) {
  $$1 = -1003; //@line 19178
  STACKTOP = sp; //@line 19179
  return $$1 | 0; //@line 19179
 }
 $9 = $1 + 4 | 0; //@line 19181
 if (!($7 << 24 >> 24)) {
  $$1 = 0; //@line 19184
  STACKTOP = sp; //@line 19185
  return $$1 | 0; //@line 19185
 }
 $11 = $2 + 9 | 0; //@line 19187
 $12 = $2 + 8 | 0; //@line 19188
 $13 = $2 + 4 | 0; //@line 19189
 $$026 = 0; //@line 19190
 $20 = 0; //@line 19190
 while (1) {
  $18 = HEAP32[$9 >> 2] | 0; //@line 19192
  HEAP8[$11 >> 0] = HEAP8[$18 + ($20 << 4) + 13 >> 0] | 0; //@line 19195
  HEAP8[$12 >> 0] = HEAP8[$18 + ($20 << 4) + 12 >> 0] | 0; //@line 19198
  HEAP32[$2 >> 2] = HEAP32[$18 + ($20 << 4) + 4 >> 2]; //@line 19201
  HEAP32[$13 >> 2] = HEAP32[$18 + ($20 << 4) + 8 >> 2]; //@line 19204
  $28 = HEAP32[$0 >> 2] | 0; //@line 19205
  $31 = HEAP32[(HEAP32[$28 >> 2] | 0) + 60 >> 2] | 0; //@line 19208
  $33 = HEAP8[$18 + ($20 << 4) >> 0] | 0; //@line 19210
  $AsyncCtx = _emscripten_alloc_async_context(44, sp) | 0; //@line 19211
  $34 = FUNCTION_TABLE_iiii[$31 & 15]($28, $2, $33) | 0; //@line 19212
  if (___async) {
   label = 7; //@line 19215
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 19218
  $16 = $$026 + 1 << 24 >> 24; //@line 19220
  if ($34 | 0) {
   $$1 = $34; //@line 19222
   label = 9; //@line 19223
   break;
  }
  if (($16 & 255) < (HEAPU8[$1 >> 0] | 0)) {
   $$026 = $16; //@line 19230
   $20 = $16 & 255; //@line 19230
  } else {
   $$1 = 0; //@line 19232
   label = 9; //@line 19233
   break;
  }
 }
 if ((label | 0) == 7) {
  HEAP32[$AsyncCtx >> 2] = 571; //@line 19238
  HEAP8[$AsyncCtx + 4 >> 0] = $$026; //@line 19240
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 19242
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 19244
  HEAP32[$AsyncCtx + 16 >> 2] = $9; //@line 19246
  HEAP32[$AsyncCtx + 20 >> 2] = $11; //@line 19248
  HEAP32[$AsyncCtx + 24 >> 2] = $12; //@line 19250
  HEAP32[$AsyncCtx + 28 >> 2] = $2; //@line 19252
  HEAP32[$AsyncCtx + 32 >> 2] = $13; //@line 19254
  HEAP32[$AsyncCtx + 36 >> 2] = $0; //@line 19256
  HEAP32[$AsyncCtx + 40 >> 2] = $2; //@line 19258
  sp = STACKTOP; //@line 19259
  STACKTOP = sp; //@line 19260
  return 0; //@line 19260
 } else if ((label | 0) == 9) {
  STACKTOP = sp; //@line 19263
  return $$1 | 0; //@line 19263
 }
 return 0; //@line 19265
}
function _initialize__async_cb_381($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19277
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19279
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19281
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19283
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19285
 $10 = 7 << 32 + -4; //@line 19287
 $11 = ___muldi3($10 | 0, 0, 1e6, 0) | 0; //@line 19288
 $12 = tempRet0; //@line 19289
 $13 = _i64Add($2 | 0, 0, -1, -1) | 0; //@line 19290
 $15 = _i64Add($13 | 0, tempRet0 | 0, $11 | 0, $12 | 0) | 0; //@line 19292
 $17 = ___udivdi3($15 | 0, tempRet0 | 0, $2 | 0, 0) | 0; //@line 19294
 $18 = tempRet0; //@line 19295
 $19 = HEAP32[$4 >> 2] | 0; //@line 19296
 HEAP32[$19 >> 2] = 0; //@line 19297
 HEAP32[$19 + 4 >> 2] = 0; //@line 19299
 $23 = HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0; //@line 19302
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 19303
 $24 = FUNCTION_TABLE_i[$23 & 7]() | 0; //@line 19304
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 687; //@line 19307
  $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 19308
  HEAP32[$25 >> 2] = $4; //@line 19309
  $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 19310
  HEAP32[$26 >> 2] = $2; //@line 19311
  $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 19312
  HEAP32[$27 >> 2] = 32; //@line 19313
  $28 = $ReallocAsyncCtx3 + 16 | 0; //@line 19314
  HEAP32[$28 >> 2] = $10; //@line 19315
  $29 = $ReallocAsyncCtx3 + 24 | 0; //@line 19316
  $30 = $29; //@line 19317
  $31 = $30; //@line 19318
  HEAP32[$31 >> 2] = $17; //@line 19319
  $32 = $30 + 4 | 0; //@line 19320
  $33 = $32; //@line 19321
  HEAP32[$33 >> 2] = $18; //@line 19322
  $34 = $ReallocAsyncCtx3 + 32 | 0; //@line 19323
  HEAP32[$34 >> 2] = $6; //@line 19324
  $35 = $ReallocAsyncCtx3 + 36 | 0; //@line 19325
  HEAP32[$35 >> 2] = $8; //@line 19326
  sp = STACKTOP; //@line 19327
  return;
 }
 HEAP32[___async_retval >> 2] = $24; //@line 19331
 ___async_unwind = 0; //@line 19332
 HEAP32[$ReallocAsyncCtx3 >> 2] = 687; //@line 19333
 $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 19334
 HEAP32[$25 >> 2] = $4; //@line 19335
 $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 19336
 HEAP32[$26 >> 2] = $2; //@line 19337
 $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 19338
 HEAP32[$27 >> 2] = 32; //@line 19339
 $28 = $ReallocAsyncCtx3 + 16 | 0; //@line 19340
 HEAP32[$28 >> 2] = $10; //@line 19341
 $29 = $ReallocAsyncCtx3 + 24 | 0; //@line 19342
 $30 = $29; //@line 19343
 $31 = $30; //@line 19344
 HEAP32[$31 >> 2] = $17; //@line 19345
 $32 = $30 + 4 | 0; //@line 19346
 $33 = $32; //@line 19347
 HEAP32[$33 >> 2] = $18; //@line 19348
 $34 = $ReallocAsyncCtx3 + 32 | 0; //@line 19349
 HEAP32[$34 >> 2] = $6; //@line 19350
 $35 = $ReallocAsyncCtx3 + 36 | 0; //@line 19351
 HEAP32[$35 >> 2] = $8; //@line 19352
 sp = STACKTOP; //@line 19353
 return;
}
function __ZN7LoRaPHY11add_channelEP16channel_params_th($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$$123$off0 = 0, $$024 = 0, $$4$off0 = 0, $$5$off039 = 0, $11 = 0, $13 = 0, $15 = 0, $17 = 0, $20 = 0, $22 = 0, $35 = 0, $43 = 0, $44 = 0, $45 = 0, $50 = 0, $52 = 0, $6 = 0, $62 = 0, $AsyncCtx = 0, $not$ = 0, sp = 0;
 sp = STACKTOP; //@line 24516
 if (!(HEAP8[$0 + 16 >> 0] | 0)) {
  $$024 = -1003; //@line 24521
  return $$024 | 0; //@line 24522
 }
 $6 = $2 & 255; //@line 24524
 if ((HEAPU8[$0 + 20 >> 0] | 0) <= ($2 & 255)) {
  $$024 = -1003; //@line 24529
  return $$024 | 0; //@line 24530
 }
 $11 = HEAP8[$1 + 8 >> 0] | 0; //@line 24533
 $13 = ($11 << 4 & 255) << 24 >> 24 >> 4; //@line 24535
 $15 = HEAP8[$0 + 26 >> 0] | 0; //@line 24537
 $17 = HEAP8[$0 + 27 >> 0] | 0; //@line 24539
 $20 = $11 << 24 >> 24 >> 4; //@line 24543
 $22 = $20 << 24 >> 24 <= $17 << 24 >> 24; //@line 24545
 $$$123$off0 = $13 << 24 >> 24 > $20 << 24 >> 24 | (($13 << 24 >> 24 > $17 << 24 >> 24 ? 1 : $13 << 24 >> 24 < $15 << 24 >> 24) | $20 << 24 >> 24 >= $15 << 24 >> 24 & $22 ^ 1); //@line 24550
 if ((HEAPU8[$0 + 18 >> 0] | 0) > ($2 & 255)) {
  $$4$off0 = ($13 << 24 >> 24 | 0) > ($15 & 255 | 0) | $$$123$off0 | $22 & $20 << 24 >> 24 >= (HEAP8[$0 + 31 >> 0] | 0) ^ 1; //@line 24564
  $35 = HEAP32[$1 >> 2] | 0; //@line 24565
  if (($35 | 0) == (HEAP32[(HEAP32[$0 + 112 >> 2] | 0) + ($6 * 12 | 0) >> 2] | 0)) {
   $$5$off039 = $$4$off0; //@line 24572
   $44 = $35; //@line 24572
  } else {
   $$024 = $$4$off0 ? -1006 : -1004; //@line 24575
   return $$024 | 0; //@line 24576
  }
 } else {
  $$5$off039 = $$$123$off0; //@line 24580
  $44 = HEAP32[$1 >> 2] | 0; //@line 24580
 }
 $43 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 24584
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 24585
 $45 = FUNCTION_TABLE_iii[$43 & 31]($0, $44) | 0; //@line 24586
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 621; //@line 24589
  HEAP8[$AsyncCtx + 4 >> 0] = $$5$off039 & 1; //@line 24592
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 24594
  HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 24596
  HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 24598
  sp = STACKTOP; //@line 24599
  return 0; //@line 24600
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 24602
 $not$ = $45 ^ 1; //@line 24603
 if ($$5$off039 | $not$) {
  $$024 = $$5$off039 ? $$5$off039 & $not$ ? -1006 : -1005 : -1004; //@line 24609
  return $$024 | 0; //@line 24610
 }
 $50 = $0 + 112 | 0; //@line 24612
 $52 = (HEAP32[$50 >> 2] | 0) + ($6 * 12 | 0) | 0; //@line 24614
 HEAP32[$52 >> 2] = HEAP32[$1 >> 2]; //@line 24615
 HEAP32[$52 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 24615
 HEAP32[$52 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 24615
 HEAP8[(HEAP32[$50 >> 2] | 0) + ($6 * 12 | 0) + 9 >> 0] = HEAP8[$1 + 9 >> 0] | 0; //@line 24620
 $62 = (HEAP32[$0 + 120 >> 2] | 0) + ($6 >>> 4 << 1) | 0; //@line 24626
 HEAP16[$62 >> 1] = 1 << ($6 & 15) | HEAPU16[$62 >> 1]; //@line 24631
 $$024 = 0; //@line 24632
 return $$024 | 0; //@line 24633
}
function __ZN7LoRaMac21prepare_rx_done_abortEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $17 = 0, $21 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 13094
 STACKTOP = STACKTOP + 16 | 0; //@line 13095
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13095
 $$byval_copy = sp + 8 | 0; //@line 13096
 $vararg_buffer = sp; //@line 13097
 _printf(12943, $vararg_buffer) | 0; //@line 13098
 _printf(13122, $$byval_copy) | 0; //@line 13099
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 13100
 _putchar(10) | 0; //@line 13101
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 408; //@line 13104
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 13106
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 13108
  sp = STACKTOP; //@line 13109
  STACKTOP = sp; //@line 13110
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13112
 $3 = $0 + 968 | 0; //@line 13113
 HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 64; //@line 13116
 if (HEAP8[$0 + 373 >> 0] | 0) {
  $10 = HEAP32[$0 + 1328 >> 2] | 0; //@line 13122
  HEAP32[$vararg_buffer >> 2] = 409; //@line 13123
  HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 13125
  $AsyncCtx9 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13126
  HEAP32[$$byval_copy >> 2] = HEAP32[$vararg_buffer >> 2]; //@line 13127
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$vararg_buffer + 4 >> 2]; //@line 13127
  $11 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($10, $0, $$byval_copy) | 0; //@line 13128
  if (___async) {
   HEAP32[$AsyncCtx9 >> 2] = 410; //@line 13131
   HEAP32[$AsyncCtx9 + 4 >> 2] = $vararg_buffer; //@line 13133
   HEAP32[$AsyncCtx9 + 8 >> 2] = $0; //@line 13135
   sp = STACKTOP; //@line 13136
   STACKTOP = sp; //@line 13137
   return;
  }
  _emscripten_free_async_context($AsyncCtx9 | 0); //@line 13139
  do {
   if (!$11) {
    $AsyncCtx13 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13143
    _mbed_assert_internal(12827, 12836, 201); //@line 13144
    if (___async) {
     HEAP32[$AsyncCtx13 >> 2] = 411; //@line 13147
     HEAP32[$AsyncCtx13 + 4 >> 2] = $vararg_buffer; //@line 13149
     HEAP32[$AsyncCtx13 + 8 >> 2] = $0; //@line 13151
     sp = STACKTOP; //@line 13152
     STACKTOP = sp; //@line 13153
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx13 | 0); //@line 13155
     break;
    }
   }
  } while (0);
 }
 $17 = $0 + 944 | 0; //@line 13161
 HEAP8[$17 >> 0] = HEAP8[$17 >> 0] | 34; //@line 13164
 $21 = HEAP32[$0 + 356 >> 2] | 0; //@line 13166
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 13168
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $0 + 996 | 0, 1); //@line 13169
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 412; //@line 13172
  sp = STACKTOP; //@line 13173
  STACKTOP = sp; //@line 13174
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 13176
  STACKTOP = sp; //@line 13177
  return;
 }
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$unpack10 = 0, $10 = 0, $16 = 0, $17 = 0, $20 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 10759
 STACKTOP = STACKTOP + 16 | 0; //@line 10760
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10760
 $3 = sp; //@line 10761
 $$unpack10 = HEAP32[$2 + 4 >> 2] | 0; //@line 10764
 $4 = $3 + 12 | 0; //@line 10765
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 10766
 HEAP32[$3 + 4 >> 2] = $$unpack10; //@line 10768
 HEAP32[$3 + 8 >> 2] = $1; //@line 10770
 HEAP32[$4 >> 2] = 848; //@line 10771
 $5 = _equeue_alloc($0, 16) | 0; //@line 10772
 do {
  if (!$5) {
   $$0$i = 0; //@line 10776
  } else {
   $7 = HEAP32[$4 >> 2] | 0; //@line 10778
   do {
    if (!$7) {
     $16 = 0; //@line 10782
    } else {
     $10 = HEAP32[$7 + 4 >> 2] | 0; //@line 10785
     $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 10786
     FUNCTION_TABLE_vii[$10 & 31]($5, $3); //@line 10787
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 355; //@line 10790
      HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 10792
      HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 10794
      HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 10796
      HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 10798
      sp = STACKTOP; //@line 10799
      STACKTOP = sp; //@line 10800
      return 0; //@line 10800
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 10802
      $16 = HEAP32[$4 >> 2] | 0; //@line 10804
      break;
     }
    }
   } while (0);
   HEAP32[$5 + 12 >> 2] = $16; //@line 10810
   _equeue_event_dtor($5, 356); //@line 10811
   $AsyncCtx5 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10812
   $17 = _equeue_post($0, 357, $5) | 0; //@line 10813
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 358; //@line 10816
    HEAP32[$AsyncCtx5 + 4 >> 2] = $4; //@line 10818
    HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 10820
    sp = STACKTOP; //@line 10821
    STACKTOP = sp; //@line 10822
    return 0; //@line 10822
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10824
    $$0$i = $17; //@line 10825
    break;
   }
  }
 } while (0);
 $20 = HEAP32[$4 >> 2] | 0; //@line 10830
 if (!$20) {
  STACKTOP = sp; //@line 10833
  return $$0$i | 0; //@line 10833
 }
 $23 = HEAP32[$20 + 8 >> 2] | 0; //@line 10836
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10837
 FUNCTION_TABLE_vi[$23 & 1023]($3); //@line 10838
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 359; //@line 10841
  HEAP32[$AsyncCtx2 + 4 >> 2] = $$0$i; //@line 10843
  sp = STACKTOP; //@line 10844
  STACKTOP = sp; //@line 10845
  return 0; //@line 10845
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10847
 STACKTOP = sp; //@line 10848
 return $$0$i | 0; //@line 10848
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_319($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 5366
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5370
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5372
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5374
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5376
 $11 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 5377
 if (!$11) {
  $18 = HEAP32[$4 >> 2] | 0; //@line 5380
  $20 = $8 + 12 | 0; //@line 5382
  HEAP32[$8 >> 2] = 521; //@line 5383
  HEAP32[$8 + 4 >> 2] = 0; //@line 5385
  HEAP32[$8 + 8 >> 2] = $6; //@line 5387
  HEAP32[$20 >> 2] = 848; //@line 5388
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 5389
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($18, $6 + 1076 | 0, $8); //@line 5390
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 522; //@line 5393
   $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 5394
   HEAP32[$21 >> 2] = $20; //@line 5395
   $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 5396
   HEAP32[$22 >> 2] = $4; //@line 5397
   $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 5398
   HEAP32[$23 >> 2] = $6; //@line 5399
   $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 5400
   HEAP32[$24 >> 2] = $8; //@line 5401
   sp = STACKTOP; //@line 5402
   return;
  }
  ___async_unwind = 0; //@line 5405
  HEAP32[$ReallocAsyncCtx6 >> 2] = 522; //@line 5406
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 5407
  HEAP32[$21 >> 2] = $20; //@line 5408
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 5409
  HEAP32[$22 >> 2] = $4; //@line 5410
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 5411
  HEAP32[$23 >> 2] = $6; //@line 5412
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 5413
  HEAP32[$24 >> 2] = $8; //@line 5414
  sp = STACKTOP; //@line 5415
  return;
 } else {
  $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 5419
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 5420
  FUNCTION_TABLE_vi[$14 & 1023]($10); //@line 5421
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 520; //@line 5424
   $15 = $ReallocAsyncCtx4 + 4 | 0; //@line 5425
   HEAP32[$15 >> 2] = $4; //@line 5426
   $16 = $ReallocAsyncCtx4 + 8 | 0; //@line 5427
   HEAP32[$16 >> 2] = $6; //@line 5428
   $17 = $ReallocAsyncCtx4 + 12 | 0; //@line 5429
   HEAP32[$17 >> 2] = $8; //@line 5430
   sp = STACKTOP; //@line 5431
   return;
  }
  ___async_unwind = 0; //@line 5434
  HEAP32[$ReallocAsyncCtx4 >> 2] = 520; //@line 5435
  $15 = $ReallocAsyncCtx4 + 4 | 0; //@line 5436
  HEAP32[$15 >> 2] = $4; //@line 5437
  $16 = $ReallocAsyncCtx4 + 8 | 0; //@line 5438
  HEAP32[$16 >> 2] = $6; //@line 5439
  $17 = $ReallocAsyncCtx4 + 12 | 0; //@line 5440
  HEAP32[$17 >> 2] = $8; //@line 5441
  sp = STACKTOP; //@line 5442
  return;
 }
}
function __ZN7LoRaMac11schedule_txEv__async_cb_471($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 33410
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33412
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33414
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33416
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33418
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33420
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33422
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 33424
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 33426
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 33428
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 33430
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 33432
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 33434
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 33436
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 33438
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 33440
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 33442
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 33444
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 33446
 $36 = HEAP32[$20 >> 2] | 0; //@line 33447
 $39 = HEAP32[(HEAP32[$36 >> 2] | 0) + 28 >> 2] | 0; //@line 33450
 $40 = $2 + 1104 | 0; //@line 33451
 $41 = HEAP8[$40 >> 0] | 0; //@line 33452
 $42 = $2 + 1100 | 0; //@line 33453
 $43 = HEAP32[$42 >> 2] | 0; //@line 33454
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(80) | 0; //@line 33456
 FUNCTION_TABLE_viiiii[$39 & 7]($36, $AsyncRetVal, $41, $43, $2 + 1160 | 0); //@line 33457
 if (!___async) {
  ___async_unwind = 0; //@line 33460
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 476; //@line 33462
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 33464
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $4; //@line 33466
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $6; //@line 33468
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $8; //@line 33470
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $10; //@line 33472
 HEAP32[$ReallocAsyncCtx4 + 24 >> 2] = $12; //@line 33474
 HEAP32[$ReallocAsyncCtx4 + 28 >> 2] = $14; //@line 33476
 HEAP32[$ReallocAsyncCtx4 + 32 >> 2] = $16; //@line 33478
 HEAP32[$ReallocAsyncCtx4 + 36 >> 2] = $18; //@line 33480
 HEAP32[$ReallocAsyncCtx4 + 40 >> 2] = $20; //@line 33482
 HEAP32[$ReallocAsyncCtx4 + 44 >> 2] = $22; //@line 33484
 HEAP32[$ReallocAsyncCtx4 + 48 >> 2] = $24; //@line 33486
 HEAP32[$ReallocAsyncCtx4 + 52 >> 2] = $26; //@line 33488
 HEAP32[$ReallocAsyncCtx4 + 56 >> 2] = $28; //@line 33490
 HEAP32[$ReallocAsyncCtx4 + 60 >> 2] = $30; //@line 33492
 HEAP32[$ReallocAsyncCtx4 + 64 >> 2] = $32; //@line 33494
 HEAP32[$ReallocAsyncCtx4 + 68 >> 2] = $40; //@line 33496
 HEAP32[$ReallocAsyncCtx4 + 72 >> 2] = $42; //@line 33498
 HEAP32[$ReallocAsyncCtx4 + 76 >> 2] = $34; //@line 33500
 sp = STACKTOP; //@line 33501
 return;
}
function __ZN14lorawan_timersD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 31917
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31919
 $4 = HEAP32[$2 + 88 >> 2] | 0; //@line 31921
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 31926
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 31927
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 76 | 0); //@line 31928
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 337; //@line 31931
   $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 31932
   HEAP32[$9 >> 2] = $2; //@line 31933
   sp = STACKTOP; //@line 31934
   return;
  }
  ___async_unwind = 0; //@line 31937
  HEAP32[$ReallocAsyncCtx2 >> 2] = 337; //@line 31938
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 31939
  HEAP32[$9 >> 2] = $2; //@line 31940
  sp = STACKTOP; //@line 31941
  return;
 }
 $11 = HEAP32[$2 + 68 >> 2] | 0; //@line 31945
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 31950
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 31951
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 56 | 0); //@line 31952
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 338; //@line 31955
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 31956
   HEAP32[$16 >> 2] = $2; //@line 31957
   sp = STACKTOP; //@line 31958
   return;
  }
  ___async_unwind = 0; //@line 31961
  HEAP32[$ReallocAsyncCtx3 >> 2] = 338; //@line 31962
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 31963
  HEAP32[$16 >> 2] = $2; //@line 31964
  sp = STACKTOP; //@line 31965
  return;
 }
 $18 = HEAP32[$2 + 48 >> 2] | 0; //@line 31969
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 31974
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 31975
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 36 | 0); //@line 31976
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 339; //@line 31979
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 31980
   HEAP32[$23 >> 2] = $2; //@line 31981
   sp = STACKTOP; //@line 31982
   return;
  }
  ___async_unwind = 0; //@line 31985
  HEAP32[$ReallocAsyncCtx4 >> 2] = 339; //@line 31986
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 31987
  HEAP32[$23 >> 2] = $2; //@line 31988
  sp = STACKTOP; //@line 31989
  return;
 }
 $25 = HEAP32[$2 + 28 >> 2] | 0; //@line 31993
 if (!$25) {
  return;
 }
 $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 32000
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 32001
 FUNCTION_TABLE_vi[$29 & 1023]($2 + 16 | 0); //@line 32002
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 340; //@line 32005
  sp = STACKTOP; //@line 32006
  return;
 }
 ___async_unwind = 0; //@line 32009
 HEAP32[$ReallocAsyncCtx5 >> 2] = 340; //@line 32010
 sp = STACKTOP; //@line 32011
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_465($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 32708
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32710
 $4 = HEAP32[$2 + 60 >> 2] | 0; //@line 32712
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 32717
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 32718
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 48 | 0); //@line 32719
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 332; //@line 32722
   $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 32723
   HEAP32[$9 >> 2] = $2; //@line 32724
   sp = STACKTOP; //@line 32725
   return;
  }
  ___async_unwind = 0; //@line 32728
  HEAP32[$ReallocAsyncCtx4 >> 2] = 332; //@line 32729
  $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 32730
  HEAP32[$9 >> 2] = $2; //@line 32731
  sp = STACKTOP; //@line 32732
  return;
 }
 $11 = HEAP32[$2 + 44 >> 2] | 0; //@line 32736
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 32741
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 32742
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 32 | 0); //@line 32743
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 333; //@line 32746
   $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 32747
   HEAP32[$16 >> 2] = $2; //@line 32748
   sp = STACKTOP; //@line 32749
   return;
  }
  ___async_unwind = 0; //@line 32752
  HEAP32[$ReallocAsyncCtx5 >> 2] = 333; //@line 32753
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 32754
  HEAP32[$16 >> 2] = $2; //@line 32755
  sp = STACKTOP; //@line 32756
  return;
 }
 $18 = HEAP32[$2 + 28 >> 2] | 0; //@line 32760
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 32765
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 32766
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 16 | 0); //@line 32767
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 334; //@line 32770
   $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 32771
   HEAP32[$23 >> 2] = $2; //@line 32772
   sp = STACKTOP; //@line 32773
   return;
  }
  ___async_unwind = 0; //@line 32776
  HEAP32[$ReallocAsyncCtx6 >> 2] = 334; //@line 32777
  $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 32778
  HEAP32[$23 >> 2] = $2; //@line 32779
  sp = STACKTOP; //@line 32780
  return;
 }
 $25 = HEAP32[$2 + 12 >> 2] | 0; //@line 32784
 if (!$25) {
  return;
 }
 $28 = HEAP32[$25 + 8 >> 2] | 0; //@line 32790
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 32791
 FUNCTION_TABLE_vi[$28 & 1023]($2); //@line 32792
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 335; //@line 32795
  sp = STACKTOP; //@line 32796
  return;
 }
 ___async_unwind = 0; //@line 32799
 HEAP32[$ReallocAsyncCtx7 >> 2] = 335; //@line 32800
 sp = STACKTOP; //@line 32801
 return;
}
function __ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$031 = 0.0, $13 = 0, $17 = 0.0, $52 = 0.0, $AsyncCtx = 0, $AsyncCtx9 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 1503
 STACKTOP = STACKTOP + 32 | 0; //@line 1504
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 1504
 $vararg_buffer5 = sp + 24 | 0; //@line 1505
 $vararg_buffer3 = sp + 16 | 0; //@line 1506
 _printf(10880, sp) | 0; //@line 1509
 _printf(11077, sp + 8 | 0) | 0; //@line 1510
 $AsyncCtx9 = _emscripten_alloc_async_context(32, sp) | 0; //@line 1511
 _putchar(10) | 0; //@line 1512
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 86; //@line 1515
  HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 1517
  HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer3; //@line 1519
  HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer3; //@line 1521
  HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer5; //@line 1523
  HEAP32[$AsyncCtx9 + 20 >> 2] = $vararg_buffer5; //@line 1525
  HEAP32[$AsyncCtx9 + 24 >> 2] = $0; //@line 1527
  HEAP8[$AsyncCtx9 + 28 >> 0] = $2; //@line 1529
  sp = STACKTOP; //@line 1530
  STACKTOP = sp; //@line 1531
  return 0; //@line 1531
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 1533
 switch ($1 | 0) {
 case 0:
  {
   $$0 = 1; //@line 1536
   break;
  }
 case 1:
  {
   switch (HEAP32[$0 + 752 >> 2] | 0) {
   case 7:
    {
     $$031 = 125.0e3; //@line 1544
     break;
    }
   case 8:
    {
     $$031 = 25.0e4; //@line 1548
     break;
    }
   case 9:
    {
     $$031 = 5.0e5; //@line 1552
     break;
    }
   default:
    {
     $$031 = 0.0; //@line 1556
    }
   }
   $13 = HEAP32[$0 + 756 >> 2] | 0; //@line 1560
   $17 = 1.0 / ($$031 / +(1 << $13 | 0)); //@line 1564
   $52 = +Math_ceil(+(+(((($2 & 255) << 3) + 28 - ($13 << 2) + (HEAP8[$0 + 766 >> 0] << 4 & 255) + (HEAP8[$0 + 764 >> 0] | 0 ? -20 : 0) | 0) >>> 0) / +($13 - (HEAP8[$0 + 760 >> 0] | 0 ? 2 : 0) << 2 >>> 0))) * +((HEAPU8[$0 + 761 >> 0] | 0) + 4 | 0); //@line 1600
   $$0 = ~~+Math_floor(+(((+(HEAPU16[$0 + 762 >> 1] | 0) + 4.25) * $17 + $17 * (($52 > 0.0 ? $52 : 0.0) + 8.0)) * 1.0e3 + .999)) >>> 0; //@line 1610
   break;
  }
 default:
  {
   $$0 = 0; //@line 1614
  }
 }
 _printf(10880, $vararg_buffer3) | 0; //@line 1617
 HEAP32[$vararg_buffer5 >> 2] = $$0; //@line 1618
 _printf(11089, $vararg_buffer5) | 0; //@line 1619
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1620
 _putchar(10) | 0; //@line 1621
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 87; //@line 1624
  HEAP32[$AsyncCtx + 4 >> 2] = $$0; //@line 1626
  sp = STACKTOP; //@line 1627
  STACKTOP = sp; //@line 1628
  return 0; //@line 1628
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1630
  STACKTOP = sp; //@line 1631
  return $$0 | 0; //@line 1631
 }
 return 0; //@line 1633
}
function __ZN7LoRaMacC2ER18LoRaWANTimeHandler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $18 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, stop = 0;
 __ZN14LoRaMacCommandC2Ev($0 + 4 | 0); //@line 9958
 __ZN11LoRaMacMlmeC2Ev($0 + 264 | 0); //@line 9960
 __ZN10LoRaMacMibC2Ev($0 + 348 | 0); //@line 9962
 __ZN18LoRaMacChannelPlanC2Ev($0 + 352 | 0); //@line 9964
 HEAP32[$0 + 356 >> 2] = $1; //@line 9966
 $7 = $0 + 996 | 0; //@line 9967
 HEAP32[$7 >> 2] = 0; //@line 9968
 HEAP32[$7 + 4 >> 2] = 0; //@line 9968
 HEAP32[$7 + 8 >> 2] = 0; //@line 9968
 HEAP32[$7 + 12 >> 2] = 0; //@line 9968
 $8 = $0 + 1016 | 0; //@line 9969
 HEAP32[$8 >> 2] = 0; //@line 9970
 HEAP32[$8 + 4 >> 2] = 0; //@line 9970
 HEAP32[$8 + 8 >> 2] = 0; //@line 9970
 HEAP32[$8 + 12 >> 2] = 0; //@line 9970
 $9 = $0 + 1036 | 0; //@line 9971
 HEAP32[$9 >> 2] = 0; //@line 9972
 HEAP32[$9 + 4 >> 2] = 0; //@line 9972
 HEAP32[$9 + 8 >> 2] = 0; //@line 9972
 HEAP32[$9 + 12 >> 2] = 0; //@line 9972
 $10 = $0 + 1056 | 0; //@line 9973
 HEAP32[$10 >> 2] = 0; //@line 9974
 HEAP32[$10 + 4 >> 2] = 0; //@line 9974
 HEAP32[$10 + 8 >> 2] = 0; //@line 9974
 HEAP32[$10 + 12 >> 2] = 0; //@line 9974
 $11 = $0 + 1076 | 0; //@line 9975
 HEAP32[$11 >> 2] = 0; //@line 9976
 HEAP32[$11 + 4 >> 2] = 0; //@line 9976
 HEAP32[$11 + 8 >> 2] = 0; //@line 9976
 HEAP32[$11 + 12 >> 2] = 0; //@line 9976
 dest = $0 + 1212 | 0; //@line 9978
 stop = dest + 112 | 0; //@line 9978
 do {
  HEAP32[dest >> 2] = 0; //@line 9978
  dest = dest + 4 | 0; //@line 9978
 } while ((dest | 0) < (stop | 0));
 HEAP32[$0 >> 2] = 0; //@line 9979
 $14 = $0 + 946 | 0; //@line 9981
 HEAP16[$0 + 636 >> 1] = 0; //@line 9983
 HEAP8[$0 + 893 >> 0] = 0; //@line 9985
 HEAP8[$0 + 370 >> 0] = 0; //@line 9987
 $18 = $0 + 371 | 0; //@line 9988
 dest = $0 + 900 | 0; //@line 9989
 stop = dest + 44 | 0; //@line 9989
 do {
  HEAP32[dest >> 2] = 0; //@line 9989
  dest = dest + 4 | 0; //@line 9989
 } while ((dest | 0) < (stop | 0));
 dest = $14; //@line 9990
 stop = dest + 18 | 0; //@line 9990
 do {
  HEAP16[dest >> 1] = 0; //@line 9990
  dest = dest + 2 | 0; //@line 9990
 } while ((dest | 0) < (stop | 0));
 HEAP8[$18 >> 0] = 1; //@line 9991
 HEAP8[$0 + 372 >> 0] = 0; //@line 9993
 HEAP32[$0 + 964 >> 2] = 0; //@line 9995
 HEAP8[$0 + 373 >> 0] = 0; //@line 9997
 HEAP8[$0 + 374 >> 0] = 0; //@line 9999
 HEAP8[$0 + 380 >> 0] = 0; //@line 10001
 HEAP32[$0 + 988 >> 2] = 0; //@line 10003
 HEAP32[$0 + 968 >> 2] = 0; //@line 10005
 HEAP8[$0 + 894 >> 0] = 1; //@line 10007
 HEAP8[$0 + 895 >> 0] = 1; //@line 10009
 HEAP8[$0 + 377 >> 0] = 0; //@line 10011
 HEAP32[$0 + 992 >> 2] = 0; //@line 10013
 HEAP32[$0 + 1208 >> 2] = 0; //@line 10015
 HEAP8[$0 + 1156 >> 0] = 0; //@line 10017
 HEAP8[$0 + 1152 >> 0] = 0; //@line 10019
 HEAP32[$0 + 1324 >> 2] = 0; //@line 10021
 HEAP32[$0 + 1328 >> 2] = 0; //@line 10023
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_228($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx29 = 0, sp = 0;
 sp = STACKTOP; //@line 34972
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34976
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34978
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34980
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34982
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 34984
 $12 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 34985
 if ($12 | 0) {
  $15 = HEAP32[$12 + 8 >> 2] | 0; //@line 34989
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(20) | 0; //@line 34990
  FUNCTION_TABLE_vi[$15 & 1023]($4); //@line 34991
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 255; //@line 34994
   $16 = $ReallocAsyncCtx10 + 4 | 0; //@line 34995
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 34996
   $17 = $ReallocAsyncCtx10 + 8 | 0; //@line 34997
   HEAP32[$17 >> 2] = $6; //@line 34998
   $18 = $ReallocAsyncCtx10 + 12 | 0; //@line 34999
   HEAP32[$18 >> 2] = $8; //@line 35000
   $19 = $ReallocAsyncCtx10 + 16 | 0; //@line 35001
   HEAP32[$19 >> 2] = $10; //@line 35002
   sp = STACKTOP; //@line 35003
   return;
  }
  ___async_unwind = 0; //@line 35006
  HEAP32[$ReallocAsyncCtx10 >> 2] = 255; //@line 35007
  $16 = $ReallocAsyncCtx10 + 4 | 0; //@line 35008
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 35009
  $17 = $ReallocAsyncCtx10 + 8 | 0; //@line 35010
  HEAP32[$17 >> 2] = $6; //@line 35011
  $18 = $ReallocAsyncCtx10 + 12 | 0; //@line 35012
  HEAP32[$18 >> 2] = $8; //@line 35013
  $19 = $ReallocAsyncCtx10 + 16 | 0; //@line 35014
  HEAP32[$19 >> 2] = $10; //@line 35015
  sp = STACKTOP; //@line 35016
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[$8 >> 2] = 6; //@line 35021
  HEAP32[___async_retval >> 2] = $6; //@line 35023
  return;
 }
 $ReallocAsyncCtx29 = _emscripten_realloc_async_context(16) | 0; //@line 35026
 _mbed_assert_internal(12827, 11911, 1251); //@line 35027
 if (___async) {
  HEAP32[$ReallocAsyncCtx29 >> 2] = 256; //@line 35030
  $21 = $ReallocAsyncCtx29 + 4 | 0; //@line 35031
  HEAP32[$21 >> 2] = $6; //@line 35032
  $22 = $ReallocAsyncCtx29 + 8 | 0; //@line 35033
  HEAP32[$22 >> 2] = $8; //@line 35034
  $23 = $ReallocAsyncCtx29 + 12 | 0; //@line 35035
  HEAP32[$23 >> 2] = $10; //@line 35036
  sp = STACKTOP; //@line 35037
  return;
 }
 ___async_unwind = 0; //@line 35040
 HEAP32[$ReallocAsyncCtx29 >> 2] = 256; //@line 35041
 $21 = $ReallocAsyncCtx29 + 4 | 0; //@line 35042
 HEAP32[$21 >> 2] = $6; //@line 35043
 $22 = $ReallocAsyncCtx29 + 8 | 0; //@line 35044
 HEAP32[$22 >> 2] = $8; //@line 35045
 $23 = $ReallocAsyncCtx29 + 12 | 0; //@line 35046
 HEAP32[$23 >> 2] = $10; //@line 35047
 sp = STACKTOP; //@line 35048
 return;
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_101($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $2 = 0, $27 = 0, $28 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 24440
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24442
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24444
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24446
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24448
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24450
 $13 = $2 + 1184 | 0; //@line 24453
 HEAP8[$13 >> 0] = HEAP8[$2 + 378 >> 0] | 0; //@line 24454
 HEAP32[$2 + 1188 >> 2] = HEAP32[$2 + 1132 >> 2]; //@line 24458
 HEAP8[$2 + 1200 >> 0] = HEAP8[$2 + 1141 >> 0] | 0; //@line 24462
 HEAP8[$2 + 1201 >> 0] = HEAP8[$2 + 369 >> 0] | 0; //@line 24466
 HEAP32[$2 + 1204 >> 2] = 1; //@line 24468
 $27 = $2 + 1202 | 0; //@line 24472
 HEAP8[$27 >> 0] = (HEAP32[$2 + 360 >> 2] | 0) == 2 & 1; //@line 24474
 $28 = HEAP32[$2 >> 2] | 0; //@line 24475
 $31 = HEAP32[(HEAP32[$28 >> 2] | 0) + 24 >> 2] | 0; //@line 24478
 $34 = (__ZN11LoRaMacMcps14get_indicationEv($2 + 288 | 0) | 0) + 10 | 0; //@line 24481
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 24482
 $35 = FUNCTION_TABLE_iiii[$31 & 15]($28, $13, $34) | 0; //@line 24483
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 366; //@line 24486
  $36 = $ReallocAsyncCtx + 4 | 0; //@line 24487
  HEAP32[$36 >> 2] = $27; //@line 24488
  $37 = $ReallocAsyncCtx + 8 | 0; //@line 24489
  HEAP32[$37 >> 2] = $2; //@line 24490
  $38 = $ReallocAsyncCtx + 12 | 0; //@line 24491
  HEAP32[$38 >> 2] = $4; //@line 24492
  $39 = $ReallocAsyncCtx + 16 | 0; //@line 24493
  HEAP32[$39 >> 2] = $6; //@line 24494
  $40 = $ReallocAsyncCtx + 20 | 0; //@line 24495
  HEAP32[$40 >> 2] = $8; //@line 24496
  $41 = $ReallocAsyncCtx + 24 | 0; //@line 24497
  HEAP32[$41 >> 2] = $10; //@line 24498
  $42 = $ReallocAsyncCtx + 28 | 0; //@line 24499
  HEAP32[$42 >> 2] = $2; //@line 24500
  sp = STACKTOP; //@line 24501
  return;
 }
 HEAP8[___async_retval >> 0] = $35 & 1; //@line 24506
 ___async_unwind = 0; //@line 24507
 HEAP32[$ReallocAsyncCtx >> 2] = 366; //@line 24508
 $36 = $ReallocAsyncCtx + 4 | 0; //@line 24509
 HEAP32[$36 >> 2] = $27; //@line 24510
 $37 = $ReallocAsyncCtx + 8 | 0; //@line 24511
 HEAP32[$37 >> 2] = $2; //@line 24512
 $38 = $ReallocAsyncCtx + 12 | 0; //@line 24513
 HEAP32[$38 >> 2] = $4; //@line 24514
 $39 = $ReallocAsyncCtx + 16 | 0; //@line 24515
 HEAP32[$39 >> 2] = $6; //@line 24516
 $40 = $ReallocAsyncCtx + 20 | 0; //@line 24517
 HEAP32[$40 >> 2] = $8; //@line 24518
 $41 = $ReallocAsyncCtx + 24 | 0; //@line 24519
 HEAP32[$41 >> 2] = $10; //@line 24520
 $42 = $ReallocAsyncCtx + 28 | 0; //@line 24521
 HEAP32[$42 >> 2] = $2; //@line 24522
 sp = STACKTOP; //@line 24523
 return;
}
function __ZN14lorawan_timersD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0, $30 = 0, $34 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 10226
 $2 = HEAP32[$0 + 108 >> 2] | 0; //@line 10228
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 10234
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 10235
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 96 | 0); //@line 10236
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 336; //@line 10239
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 10241
    sp = STACKTOP; //@line 10242
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 10245
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 88 >> 2] | 0; //@line 10251
 do {
  if ($9 | 0) {
   $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 10257
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10258
   FUNCTION_TABLE_vi[$13 & 1023]($0 + 76 | 0); //@line 10259
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 337; //@line 10262
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 10264
    sp = STACKTOP; //@line 10265
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10268
    break;
   }
  }
 } while (0);
 $16 = HEAP32[$0 + 68 >> 2] | 0; //@line 10274
 do {
  if ($16 | 0) {
   $20 = HEAP32[$16 + 8 >> 2] | 0; //@line 10280
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10281
   FUNCTION_TABLE_vi[$20 & 1023]($0 + 56 | 0); //@line 10282
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 338; //@line 10285
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 10287
    sp = STACKTOP; //@line 10288
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 10291
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$0 + 48 >> 2] | 0; //@line 10297
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 10303
   $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10304
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 36 | 0); //@line 10305
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 339; //@line 10308
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 10310
    sp = STACKTOP; //@line 10311
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 10314
    break;
   }
  }
 } while (0);
 $30 = HEAP32[$0 + 28 >> 2] | 0; //@line 10320
 if (!$30) {
  return;
 }
 $34 = HEAP32[$30 + 8 >> 2] | 0; //@line 10327
 $AsyncCtx15 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10328
 FUNCTION_TABLE_vi[$34 & 1023]($0 + 16 | 0); //@line 10329
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 340; //@line 10332
  sp = STACKTOP; //@line 10333
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 10336
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$026 = 0, $10 = 0, $15 = 0, $21 = 0.0, $24 = 0.0, $27 = 0, $34 = 0, $35 = 0, $38 = 0, $43 = 0, $46 = 0, $48 = 0, $50 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 24692
 $6 = HEAP32[$0 + 112 >> 2] | 0; //@line 24696
 $7 = $1 + 2 | 0; //@line 24697
 $8 = HEAP8[$7 >> 0] | 0; //@line 24698
 $10 = HEAPU8[$1 >> 0] | 0; //@line 24700
 $15 = HEAP8[(HEAP32[$0 + 72 >> 2] | 0) + ((HEAPU8[$6 + ($10 * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 2 >> 0] | 0; //@line 24705
 if ($8 << 24 >> 24 > $15 << 24 >> 24) {
  HEAP8[$7 >> 0] = $15; //@line 24708
  $27 = $15; //@line 24709
 } else {
  $27 = $8; //@line 24711
 }
 if (!$2) {
  $$0 = HEAP32[$6 + ($10 * 12 | 0) >> 2] | 0; //@line 24717
 } else {
  $$0 = $2; //@line 24719
 }
 $21 = +HEAPF32[$1 + 4 >> 2]; //@line 24722
 if ($21 > 0.0) {
  $24 = +HEAPF32[$1 + 8 >> 2]; //@line 24726
  if ($24 > 0.0) {
   $$026 = ~~+Math_floor(+($21 - +($27 << 24 >> 24 << 1 >>> 0) - $24)); //@line 24736
  } else {
   $$026 = $27; //@line 24738
  }
 } else {
  $$026 = $27; //@line 24741
 }
 $34 = $0 + 4 | 0; //@line 24743
 $35 = HEAP32[$34 >> 2] | 0; //@line 24744
 $38 = HEAP32[(HEAP32[$35 >> 2] | 0) + 72 >> 2] | 0; //@line 24747
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 24748
 FUNCTION_TABLE_vi[$38 & 1023]($35); //@line 24749
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 622; //@line 24752
  HEAP32[$AsyncCtx + 4 >> 2] = $34; //@line 24754
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 24756
  HEAP32[$AsyncCtx + 12 >> 2] = $$0; //@line 24758
  HEAP8[$AsyncCtx + 16 >> 0] = $$026; //@line 24760
  sp = STACKTOP; //@line 24761
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 24764
 $43 = HEAP32[$34 >> 2] | 0; //@line 24765
 $46 = HEAP32[(HEAP32[$43 >> 2] | 0) + 68 >> 2] | 0; //@line 24768
 $48 = HEAP16[$1 + 12 >> 1] | 0; //@line 24770
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 24771
 FUNCTION_TABLE_viiii[$46 & 7]($43, $$0, $$026, $48); //@line 24772
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 623; //@line 24775
  HEAP32[$AsyncCtx2 + 4 >> 2] = $34; //@line 24777
  sp = STACKTOP; //@line 24778
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 24781
 $50 = HEAP32[$34 >> 2] | 0; //@line 24782
 $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 76 >> 2] | 0; //@line 24785
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 24786
 FUNCTION_TABLE_vi[$53 & 1023]($50); //@line 24787
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 624; //@line 24790
  sp = STACKTOP; //@line 24791
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 24794
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_125($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 25875
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25881
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25883
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 25885
 $9 = $6 + 32 | 0; //@line 25886
 $10 = $6 + 44 | 0; //@line 25887
 $11 = HEAP32[$10 >> 2] | 0; //@line 25888
 if (!$11) {
  return;
 }
 $13 = $8 + 1912 | 0; //@line 25893
 if (($13 | 0) == ($9 | 0)) {
  return;
 }
 $15 = $8 + 1924 | 0; //@line 25898
 $16 = HEAP32[$15 >> 2] | 0; //@line 25899
 if (!$16) {
  $25 = HEAP32[$11 + 4 >> 2] | 0; //@line 25903
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 25904
  FUNCTION_TABLE_vii[$25 & 31]($13, $9); //@line 25905
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 306; //@line 25908
   $26 = $ReallocAsyncCtx6 + 4 | 0; //@line 25909
   HEAP32[$26 >> 2] = $10; //@line 25910
   $27 = $ReallocAsyncCtx6 + 8 | 0; //@line 25911
   HEAP32[$27 >> 2] = $15; //@line 25912
   sp = STACKTOP; //@line 25913
   return;
  }
  ___async_unwind = 0; //@line 25916
  HEAP32[$ReallocAsyncCtx6 >> 2] = 306; //@line 25917
  $26 = $ReallocAsyncCtx6 + 4 | 0; //@line 25918
  HEAP32[$26 >> 2] = $10; //@line 25919
  $27 = $ReallocAsyncCtx6 + 8 | 0; //@line 25920
  HEAP32[$27 >> 2] = $15; //@line 25921
  sp = STACKTOP; //@line 25922
  return;
 } else {
  $19 = HEAP32[$16 + 8 >> 2] | 0; //@line 25926
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 25927
  FUNCTION_TABLE_vi[$19 & 1023]($13); //@line 25928
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 305; //@line 25931
   $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 25932
   HEAP32[$20 >> 2] = $10; //@line 25933
   $21 = $ReallocAsyncCtx5 + 8 | 0; //@line 25934
   HEAP32[$21 >> 2] = $15; //@line 25935
   $22 = $ReallocAsyncCtx5 + 12 | 0; //@line 25936
   HEAP32[$22 >> 2] = $13; //@line 25937
   $23 = $ReallocAsyncCtx5 + 16 | 0; //@line 25938
   HEAP32[$23 >> 2] = $9; //@line 25939
   sp = STACKTOP; //@line 25940
   return;
  }
  ___async_unwind = 0; //@line 25943
  HEAP32[$ReallocAsyncCtx5 >> 2] = 305; //@line 25944
  $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 25945
  HEAP32[$20 >> 2] = $10; //@line 25946
  $21 = $ReallocAsyncCtx5 + 8 | 0; //@line 25947
  HEAP32[$21 >> 2] = $15; //@line 25948
  $22 = $ReallocAsyncCtx5 + 12 | 0; //@line 25949
  HEAP32[$22 >> 2] = $13; //@line 25950
  $23 = $ReallocAsyncCtx5 + 16 | 0; //@line 25951
  HEAP32[$23 >> 2] = $9; //@line 25952
  sp = STACKTOP; //@line 25953
  return;
 }
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_277($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $45 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2695
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2697
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2699
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2701
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2703
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2705
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2707
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2709
 $16 = HEAP16[$0 + 32 >> 1] | 0; //@line 2711
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 2713
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 2715
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 2717
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 2719
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 2721
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 2723
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 2725
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 2727
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 2729
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 2731
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 2733
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 2735
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 2737
 $45 = HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0; //@line 2740
 $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 2741
 FUNCTION_TABLE_vii[$45 & 31]($2, $4); //@line 2742
 if (!___async) {
  ___async_unwind = 0; //@line 2745
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 90; //@line 2747
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 2749
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 2751
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $8; //@line 2753
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $10; //@line 2755
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $12; //@line 2757
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $36; //@line 2759
 HEAP32[$ReallocAsyncCtx + 28 >> 2] = $38; //@line 2761
 HEAP32[$ReallocAsyncCtx + 32 >> 2] = $40; //@line 2763
 HEAP32[$ReallocAsyncCtx + 36 >> 2] = $42; //@line 2765
 HEAP32[$ReallocAsyncCtx + 40 >> 2] = $14; //@line 2767
 HEAP16[$ReallocAsyncCtx + 44 >> 1] = $16; //@line 2769
 HEAP32[$ReallocAsyncCtx + 48 >> 2] = $18; //@line 2771
 HEAP32[$ReallocAsyncCtx + 52 >> 2] = $20; //@line 2773
 HEAP32[$ReallocAsyncCtx + 56 >> 2] = $22; //@line 2775
 HEAP32[$ReallocAsyncCtx + 60 >> 2] = $24; //@line 2777
 HEAP32[$ReallocAsyncCtx + 64 >> 2] = $26; //@line 2779
 HEAP32[$ReallocAsyncCtx + 68 >> 2] = $28; //@line 2781
 HEAP32[$ReallocAsyncCtx + 72 >> 2] = $30; //@line 2783
 HEAP32[$ReallocAsyncCtx + 76 >> 2] = $32; //@line 2785
 HEAP32[$ReallocAsyncCtx + 80 >> 2] = $34; //@line 2787
 sp = STACKTOP; //@line 2788
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_441($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 30505
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30509
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30511
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 30513
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30515
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 30517
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30519
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30521
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 30523
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 30525
 $22 = HEAP8[$0 + 44 >> 0] & 1; //@line 30528
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 30530
 do {
  if ((HEAP32[$0 + 4 >> 2] | 0) > 1) {
   $26 = $4 + 24 | 0; //@line 30534
   $27 = $6 + 24 | 0; //@line 30535
   $28 = $4 + 8 | 0; //@line 30536
   $29 = $6 + 54 | 0; //@line 30537
   if (!(HEAP8[$29 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$28 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$27 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$28 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 30567
    HEAP8[$14 >> 0] = 0; //@line 30568
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 30569
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($26, $6, $16, $18, $20, $22); //@line 30570
    if (!___async) {
     ___async_unwind = 0; //@line 30573
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 762; //@line 30575
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $26; //@line 30577
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $24; //@line 30579
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $29; //@line 30581
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 30583
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 30585
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 30587
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 30589
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $27; //@line 30591
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $28; //@line 30593
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $6; //@line 30595
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $16; //@line 30597
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $18; //@line 30599
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $20; //@line 30601
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $22 & 1; //@line 30604
    sp = STACKTOP; //@line 30605
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 30610
 HEAP8[$14 >> 0] = $12; //@line 30611
 return;
}
function __Z28compute_skeys_for_join_framePKhS0_tPhS1_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0$$sroa_idx12 = 0, $10 = 0, $12 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 21815
 STACKTOP = STACKTOP + 16 | 0; //@line 21816
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 21816
 $5 = sp; //@line 21817
 _mbedtls_aes_init(21912); //@line 21818
 $6 = _mbedtls_aes_setkey_enc(21912, $0, 128) | 0; //@line 21819
 if ($6 | 0) {
  $$0 = $6; //@line 21822
  _mbedtls_aes_free(21912); //@line 21823
  STACKTOP = sp; //@line 21824
  return $$0 | 0; //@line 21824
 }
 $8 = $5 + 9 | 0; //@line 21826
 HEAP8[$8 >> 0] = 0; //@line 21827
 HEAP8[$8 + 1 >> 0] = 0; //@line 21827
 HEAP8[$8 + 2 >> 0] = 0; //@line 21827
 HEAP8[$8 + 3 >> 0] = 0; //@line 21827
 HEAP8[$8 + 4 >> 0] = 0; //@line 21827
 HEAP8[$8 + 5 >> 0] = 0; //@line 21827
 HEAP8[$8 + 6 >> 0] = 0; //@line 21827
 HEAP8[$5 >> 0] = 1; //@line 21828
 $9 = $5 + 1 | 0; //@line 21829
 HEAP8[$9 >> 0] = HEAP8[$1 >> 0] | 0; //@line 21830
 HEAP8[$9 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0; //@line 21830
 HEAP8[$9 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0; //@line 21830
 HEAP8[$9 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0; //@line 21830
 HEAP8[$9 + 4 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 21830
 HEAP8[$9 + 5 >> 0] = HEAP8[$1 + 5 >> 0] | 0; //@line 21830
 $$0$$sroa_idx12 = $5 + 7 | 0; //@line 21831
 HEAP8[$$0$$sroa_idx12 >> 0] = $2; //@line 21832
 HEAP8[$$0$$sroa_idx12 + 1 >> 0] = $2 >> 8; //@line 21832
 $10 = _mbedtls_aes_crypt_ecb(21912, 1, $5, $3) | 0; //@line 21833
 if ($10 | 0) {
  $$0 = $10; //@line 21836
  _mbedtls_aes_free(21912); //@line 21837
  STACKTOP = sp; //@line 21838
  return $$0 | 0; //@line 21838
 }
 $12 = $5 + 9 | 0; //@line 21840
 HEAP8[$12 >> 0] = 0; //@line 21841
 HEAP8[$12 + 1 >> 0] = 0; //@line 21841
 HEAP8[$12 + 2 >> 0] = 0; //@line 21841
 HEAP8[$12 + 3 >> 0] = 0; //@line 21841
 HEAP8[$12 + 4 >> 0] = 0; //@line 21841
 HEAP8[$12 + 5 >> 0] = 0; //@line 21841
 HEAP8[$12 + 6 >> 0] = 0; //@line 21841
 HEAP8[$5 >> 0] = 2; //@line 21842
 HEAP8[$9 >> 0] = HEAP8[$1 >> 0] | 0; //@line 21843
 HEAP8[$9 + 1 >> 0] = HEAP8[$1 + 1 >> 0] | 0; //@line 21843
 HEAP8[$9 + 2 >> 0] = HEAP8[$1 + 2 >> 0] | 0; //@line 21843
 HEAP8[$9 + 3 >> 0] = HEAP8[$1 + 3 >> 0] | 0; //@line 21843
 HEAP8[$9 + 4 >> 0] = HEAP8[$1 + 4 >> 0] | 0; //@line 21843
 HEAP8[$9 + 5 >> 0] = HEAP8[$1 + 5 >> 0] | 0; //@line 21843
 HEAP8[$$0$$sroa_idx12 >> 0] = $2; //@line 21844
 HEAP8[$$0$$sroa_idx12 + 1 >> 0] = $2 >> 8; //@line 21844
 $$0 = _mbedtls_aes_crypt_ecb(21912, 1, $5, $4) | 0; //@line 21846
 _mbedtls_aes_free(21912); //@line 21847
 STACKTOP = sp; //@line 21848
 return $$0 | 0; //@line 21848
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 30389
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30393
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30395
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 30397
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30399
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 30401
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30403
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30405
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 30407
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 30409
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 30411
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 30413
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 30415
 $28 = HEAP8[$0 + 56 >> 0] & 1; //@line 30418
 $43 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 30419
 do {
  if ($43 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$18 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$16 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$18 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 30452
    HEAP8[$14 >> 0] = 0; //@line 30453
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 30454
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($43, $20, $22, $24, $26, $28); //@line 30455
    if (!___async) {
     ___async_unwind = 0; //@line 30458
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 762; //@line 30460
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $43; //@line 30462
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 30464
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 30466
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 30468
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 30470
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 30472
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 30474
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 30476
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 30478
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 30480
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 30482
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 30484
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $26; //@line 30486
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $28 & 1; //@line 30489
    sp = STACKTOP; //@line 30490
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 30495
 HEAP8[$14 >> 0] = $12; //@line 30496
 return;
}
function _mbedtls_cipher_update__async_cb_241($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$1 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $26 = 0, $27 = 0, $29 = 0, $34 = 0, $4 = 0, $43 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 349
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 351
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 353
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 355
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 357
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 359
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 361
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 363
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 365
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 367
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 369
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 371
 if ($AsyncRetVal | 0) {
  $$1 = $AsyncRetVal; //@line 374
  $52 = ___async_retval; //@line 375
  HEAP32[$52 >> 2] = $$1; //@line 376
  return;
 }
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $4; //@line 381
 HEAP32[$8 >> 2] = 0; //@line 383
 $26 = $10 + $12 | 0; //@line 384
 $27 = $14 - $12 | 0; //@line 385
 if (!$27) {
  $$1 = 0; //@line 388
  $52 = ___async_retval; //@line 389
  HEAP32[$52 >> 2] = $$1; //@line 390
  return;
 }
 $29 = ($27 >>> 0) % ($4 >>> 0) | 0; //@line 393
 if (!$29) {
  $$0 = (HEAP32[$16 >> 2] | 0) == 0 ? $4 : 0; //@line 399
 } else {
  $$0 = $29; //@line 401
 }
 $34 = $27 - $$0 | 0; //@line 404
 _memcpy($18 + 20 | 0, $26 + $34 | 0, $$0 | 0) | 0; //@line 406
 HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + $$0; //@line 409
 if (!$34) {
  $$1 = 0; //@line 412
  $52 = ___async_retval; //@line 413
  HEAP32[$52 >> 2] = $$1; //@line 414
  return;
 }
 $43 = HEAP32[(HEAP32[(HEAP32[$20 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 421
 $45 = HEAP32[$18 + 60 >> 2] | 0; //@line 423
 $46 = HEAP32[$16 >> 2] | 0; //@line 424
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 426
 $48 = FUNCTION_TABLE_iiiiiii[$43 & 3]($45, $46, $34, $18 + 40 | 0, $26, $6 + $4 | 0) | 0; //@line 427
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 665; //@line 430
  $49 = $ReallocAsyncCtx3 + 4 | 0; //@line 431
  HEAP32[$49 >> 2] = $2; //@line 432
  $50 = $ReallocAsyncCtx3 + 8 | 0; //@line 433
  HEAP32[$50 >> 2] = $34; //@line 434
  sp = STACKTOP; //@line 435
  return;
 }
 HEAP32[___async_retval >> 2] = $48; //@line 439
 ___async_unwind = 0; //@line 440
 HEAP32[$ReallocAsyncCtx3 >> 2] = 665; //@line 441
 $49 = $ReallocAsyncCtx3 + 4 | 0; //@line 442
 HEAP32[$49 >> 2] = $2; //@line 443
 $50 = $ReallocAsyncCtx3 + 8 | 0; //@line 444
 HEAP32[$50 >> 2] = $34; //@line 445
 sp = STACKTOP; //@line 446
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_472($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $38 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 33510
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33512
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33514
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33516
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33518
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33520
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33522
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 33524
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 33526
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 33528
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 33530
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 33532
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 33534
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 33536
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 33538
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 33540
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 33542
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 33548
 $39 = HEAP32[$20 >> 2] | 0; //@line 33549
 $42 = HEAP32[(HEAP32[$39 >> 2] | 0) + 28 >> 2] | 0; //@line 33552
 $44 = HEAP8[$2 + 1136 >> 0] | 0; //@line 33554
 $45 = HEAP8[HEAP32[$0 + 68 >> 2] >> 0] | 0; //@line 33555
 $46 = HEAP32[HEAP32[$0 + 72 >> 2] >> 2] | 0; //@line 33556
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(72) | 0; //@line 33558
 FUNCTION_TABLE_viiiii[$42 & 7]($39, $44, $45, $46, $2 + 1184 | 0); //@line 33559
 if (!___async) {
  ___async_unwind = 0; //@line 33562
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 477; //@line 33564
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $22; //@line 33566
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $2; //@line 33568
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $24; //@line 33570
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $26; //@line 33572
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $28; //@line 33574
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $30; //@line 33576
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $32; //@line 33578
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $20; //@line 33580
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $16; //@line 33582
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $18; //@line 33584
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $4; //@line 33586
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $6; //@line 33588
 HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $8; //@line 33590
 HEAP32[$ReallocAsyncCtx5 + 56 >> 2] = $10; //@line 33592
 HEAP32[$ReallocAsyncCtx5 + 60 >> 2] = $12; //@line 33594
 HEAP32[$ReallocAsyncCtx5 + 64 >> 2] = $14; //@line 33596
 HEAP32[$ReallocAsyncCtx5 + 68 >> 2] = $38; //@line 33598
 sp = STACKTOP; //@line 33599
 return;
}
function __ZN7LoRaMac21send_frame_on_channelEh__async_cb_485($0) {
 $0 = $0 | 0;
 var $2 = 0, $21 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 35031
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35033
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35035
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 35037
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35039
 HEAP8[$4 >> 0] = 0; //@line 35040
 HEAP8[$2 >> 0] = $6; //@line 35041
 $9 = $8 + 1097 | 0; //@line 35042
 HEAP8[$2 + 1 >> 0] = HEAP8[$9 >> 0] | 0; //@line 35045
 HEAP8[$2 + 2 >> 0] = HEAP8[$8 + 1096 >> 0] | 0; //@line 35049
 HEAP32[$2 + 4 >> 2] = HEAP32[$8 + 1144 >> 2]; //@line 35053
 HEAP32[$2 + 8 >> 2] = HEAP32[$8 + 1148 >> 2]; //@line 35057
 $21 = $8 + 636 | 0; //@line 35058
 HEAP16[$2 + 12 >> 1] = HEAP16[$21 >> 1] | 0; //@line 35061
 $24 = HEAP32[$8 >> 2] | 0; //@line 35062
 $27 = HEAP32[(HEAP32[$24 >> 2] | 0) + 32 >> 2] | 0; //@line 35065
 $28 = $8 + 992 | 0; //@line 35066
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 35067
 FUNCTION_TABLE_iiiii[$27 & 3]($24, $2, $4, $28) | 0; //@line 35068
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 483; //@line 35071
  $29 = $ReallocAsyncCtx + 4 | 0; //@line 35072
  HEAP32[$29 >> 2] = $8; //@line 35073
  $30 = $ReallocAsyncCtx + 8 | 0; //@line 35074
  HEAP32[$30 >> 2] = $9; //@line 35075
  $31 = $ReallocAsyncCtx + 12 | 0; //@line 35076
  HEAP32[$31 >> 2] = $4; //@line 35077
  $32 = $ReallocAsyncCtx + 16 | 0; //@line 35078
  HEAP32[$32 >> 2] = $28; //@line 35079
  $33 = $ReallocAsyncCtx + 20 | 0; //@line 35080
  HEAP32[$33 >> 2] = $8; //@line 35081
  $34 = $ReallocAsyncCtx + 24 | 0; //@line 35082
  HEAP32[$34 >> 2] = $21; //@line 35083
  $35 = $ReallocAsyncCtx + 28 | 0; //@line 35084
  HEAP32[$35 >> 2] = $2; //@line 35085
  sp = STACKTOP; //@line 35086
  return;
 }
 ___async_unwind = 0; //@line 35089
 HEAP32[$ReallocAsyncCtx >> 2] = 483; //@line 35090
 $29 = $ReallocAsyncCtx + 4 | 0; //@line 35091
 HEAP32[$29 >> 2] = $8; //@line 35092
 $30 = $ReallocAsyncCtx + 8 | 0; //@line 35093
 HEAP32[$30 >> 2] = $9; //@line 35094
 $31 = $ReallocAsyncCtx + 12 | 0; //@line 35095
 HEAP32[$31 >> 2] = $4; //@line 35096
 $32 = $ReallocAsyncCtx + 16 | 0; //@line 35097
 HEAP32[$32 >> 2] = $28; //@line 35098
 $33 = $ReallocAsyncCtx + 20 | 0; //@line 35099
 HEAP32[$33 >> 2] = $8; //@line 35100
 $34 = $ReallocAsyncCtx + 24 | 0; //@line 35101
 HEAP32[$34 >> 2] = $21; //@line 35102
 $35 = $ReallocAsyncCtx + 28 | 0; //@line 35103
 HEAP32[$35 >> 2] = $2; //@line 35104
 sp = STACKTOP; //@line 35105
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_476($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 33981
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33983
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33985
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33987
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33989
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33991
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33993
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 33995
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 33997
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 33999
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 34001
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 34003
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 34005
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 34007
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 34009
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 34011
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 34013
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 34015
 $35 = HEAP32[$20 >> 2] | 0; //@line 34016
 $38 = HEAP32[(HEAP32[$35 >> 2] | 0) + 72 >> 2] | 0; //@line 34019
 $39 = HEAP8[$26 >> 0] | 0; //@line 34020
 $41 = HEAP8[$2 + 1129 >> 0] | 0; //@line 34022
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(72) | 0; //@line 34023
 $42 = FUNCTION_TABLE_iiii[$38 & 15]($35, $39, $41) | 0; //@line 34024
 if (!___async) {
  HEAP8[___async_retval >> 0] = $42; //@line 34028
  ___async_unwind = 0; //@line 34029
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 475; //@line 34031
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 34033
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 34035
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 34037
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 34039
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 34041
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 34043
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $14; //@line 34045
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $16; //@line 34047
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $18; //@line 34049
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $20; //@line 34051
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $24; //@line 34053
 HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $26; //@line 34055
 HEAP32[$ReallocAsyncCtx3 + 52 >> 2] = $28; //@line 34057
 HEAP32[$ReallocAsyncCtx3 + 56 >> 2] = $30; //@line 34059
 HEAP32[$ReallocAsyncCtx3 + 60 >> 2] = $32; //@line 34061
 HEAP32[$ReallocAsyncCtx3 + 64 >> 2] = $34; //@line 34063
 HEAP32[$ReallocAsyncCtx3 + 68 >> 2] = $22; //@line 34065
 sp = STACKTOP; //@line 34066
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $15 = 0, $18 = 0, $20 = 0, $23 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx4 = 0, $AsyncCtx7 = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 25419
 STACKTOP = STACKTOP + 16 | 0; //@line 25420
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 25420
 $vararg_buffer1 = sp + 8 | 0; //@line 25421
 _printf(13636, sp) | 0; //@line 25423
 HEAP32[$vararg_buffer1 >> 2] = $2 & 255; //@line 25425
 _printf(13649, $vararg_buffer1) | 0; //@line 25426
 $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 25427
 _putchar(10) | 0; //@line 25428
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 641; //@line 25431
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 25433
  HEAP32[$AsyncCtx11 + 8 >> 2] = $1; //@line 25435
  HEAP8[$AsyncCtx11 + 12 >> 0] = $2; //@line 25437
  sp = STACKTOP; //@line 25438
  STACKTOP = sp; //@line 25439
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 25441
 $7 = $0 + 4 | 0; //@line 25442
 $8 = HEAP32[$7 >> 2] | 0; //@line 25443
 $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 72 >> 2] | 0; //@line 25446
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 25447
 FUNCTION_TABLE_vi[$11 & 1023]($8); //@line 25448
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 642; //@line 25451
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 25453
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 25455
  HEAP8[$AsyncCtx + 12 >> 0] = $2; //@line 25457
  sp = STACKTOP; //@line 25458
  STACKTOP = sp; //@line 25459
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 25461
 $15 = HEAP32[$7 >> 2] | 0; //@line 25462
 $18 = HEAP32[(HEAP32[$15 >> 2] | 0) + 24 >> 2] | 0; //@line 25465
 $AsyncCtx4 = _emscripten_alloc_async_context(8, sp) | 0; //@line 25466
 FUNCTION_TABLE_viii[$18 & 7]($15, $1, $2); //@line 25467
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 643; //@line 25470
  HEAP32[$AsyncCtx4 + 4 >> 2] = $7; //@line 25472
  sp = STACKTOP; //@line 25473
  STACKTOP = sp; //@line 25474
  return;
 }
 _emscripten_free_async_context($AsyncCtx4 | 0); //@line 25476
 $20 = HEAP32[$7 >> 2] | 0; //@line 25477
 $23 = HEAP32[(HEAP32[$20 >> 2] | 0) + 76 >> 2] | 0; //@line 25480
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 25481
 FUNCTION_TABLE_vi[$23 & 1023]($20); //@line 25482
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 644; //@line 25485
  sp = STACKTOP; //@line 25486
  STACKTOP = sp; //@line 25487
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 25489
  STACKTOP = sp; //@line 25490
  return;
 }
}
function __ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t__async_cb_82($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $18 = 0, $2 = 0, $22 = 0, $25 = 0, $28 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 23771
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23773
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23775
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23779
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23781
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23783
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23785
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23789
 $22 = HEAP8[$0 + 44 >> 0] | 0; //@line 23793
 $25 = (HEAP32[$0 + 12 >> 2] | 0) + 369 | 0; //@line 23796
 $28 = __ZN7LoRaPHY15get_max_payloadEhb(HEAP32[$4 >> 2] | 0, HEAP8[$2 >> 0] | 0, (HEAP8[$25 >> 0] | 0) != 0) | 0; //@line 23799
 HEAP8[$8 + 1 >> 0] = $28; //@line 23801
 $30 = $28 & 255; //@line 23802
 $31 = $10 & 255; //@line 23803
 if ($31 >>> 0 > $30 >>> 0) {
  HEAP8[$8 >> 0] = $28; //@line 23806
  __ZN14LoRaMacCommand20clear_command_bufferEv($12); //@line 23807
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($12); //@line 23808
  $$0 = 0; //@line 23809
 } else {
  HEAP8[$8 >> 0] = $30 - $10; //@line 23813
  $$0 = $31; //@line 23814
 }
 $35 = HEAP8[$2 >> 0] | 0; //@line 23816
 _printf(12943, $14) | 0; //@line 23817
 _printf(13269, $18) | 0; //@line 23818
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 23819
 _putchar(10) | 0; //@line 23820
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 531; //@line 23823
  $36 = $ReallocAsyncCtx + 4 | 0; //@line 23824
  HEAP32[$36 >> 2] = $4; //@line 23825
  $37 = $ReallocAsyncCtx + 8 | 0; //@line 23826
  HEAP32[$37 >> 2] = $25; //@line 23827
  $38 = $ReallocAsyncCtx + 12 | 0; //@line 23828
  HEAP8[$38 >> 0] = $35; //@line 23829
  $39 = $ReallocAsyncCtx + 13 | 0; //@line 23830
  HEAP8[$39 >> 0] = $22; //@line 23831
  $40 = $ReallocAsyncCtx + 16 | 0; //@line 23832
  HEAP32[$40 >> 2] = $$0; //@line 23833
  sp = STACKTOP; //@line 23834
  return;
 }
 ___async_unwind = 0; //@line 23837
 HEAP32[$ReallocAsyncCtx >> 2] = 531; //@line 23838
 $36 = $ReallocAsyncCtx + 4 | 0; //@line 23839
 HEAP32[$36 >> 2] = $4; //@line 23840
 $37 = $ReallocAsyncCtx + 8 | 0; //@line 23841
 HEAP32[$37 >> 2] = $25; //@line 23842
 $38 = $ReallocAsyncCtx + 12 | 0; //@line 23843
 HEAP8[$38 >> 0] = $35; //@line 23844
 $39 = $ReallocAsyncCtx + 13 | 0; //@line 23845
 HEAP8[$39 >> 0] = $22; //@line 23846
 $40 = $ReallocAsyncCtx + 16 | 0; //@line 23847
 HEAP32[$40 >> 2] = $$0; //@line 23848
 sp = STACKTOP; //@line 23849
 return;
}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) {
  return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0; //@line 314
 }
 ret = dest | 0; //@line 317
 dest_end = dest + num | 0; //@line 318
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0; //@line 322
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 323
   dest = dest + 1 | 0; //@line 324
   src = src + 1 | 0; //@line 325
   num = num - 1 | 0; //@line 326
  }
  aligned_dest_end = dest_end & -4 | 0; //@line 328
  block_aligned_dest_end = aligned_dest_end - 64 | 0; //@line 329
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 331
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2]; //@line 332
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2]; //@line 333
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2]; //@line 334
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2]; //@line 335
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2]; //@line 336
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2]; //@line 337
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2]; //@line 338
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2]; //@line 339
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2]; //@line 340
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2]; //@line 341
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2]; //@line 342
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2]; //@line 343
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2]; //@line 344
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2]; //@line 345
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2]; //@line 346
   dest = dest + 64 | 0; //@line 347
   src = src + 64 | 0; //@line 348
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 351
   dest = dest + 4 | 0; //@line 352
   src = src + 4 | 0; //@line 353
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0; //@line 357
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 359
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0; //@line 360
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0; //@line 361
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0; //@line 362
   dest = dest + 4 | 0; //@line 363
   src = src + 4 | 0; //@line 364
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 369
  dest = dest + 1 | 0; //@line 370
  src = src + 1 | 0; //@line 371
 }
 return ret | 0; //@line 373
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_283($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 3232
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3240
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3244
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3246
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3248
 if ((HEAP32[___async_retval >> 2] | 0) < (HEAP32[$0 + 4 >> 2] | 0)) {
  _printf(10880, HEAP32[$0 + 8 >> 2] | 0) | 0; //@line 3253
  _printf(11068, $8) | 0; //@line 3254
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 3255
  _putchar(10) | 0; //@line 3256
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 98; //@line 3259
   $19 = $ReallocAsyncCtx4 + 4 | 0; //@line 3260
   HEAP32[$19 >> 2] = $12; //@line 3261
   $20 = $ReallocAsyncCtx4 + 8 | 0; //@line 3262
   HEAP32[$20 >> 2] = $14; //@line 3263
   $21 = $ReallocAsyncCtx4 + 12 | 0; //@line 3264
   HEAP32[$21 >> 2] = $16; //@line 3265
   sp = STACKTOP; //@line 3266
   return;
  }
  ___async_unwind = 0; //@line 3269
  HEAP32[$ReallocAsyncCtx4 >> 2] = 98; //@line 3270
  $19 = $ReallocAsyncCtx4 + 4 | 0; //@line 3271
  HEAP32[$19 >> 2] = $12; //@line 3272
  $20 = $ReallocAsyncCtx4 + 8 | 0; //@line 3273
  HEAP32[$20 >> 2] = $14; //@line 3274
  $21 = $ReallocAsyncCtx4 + 12 | 0; //@line 3275
  HEAP32[$21 >> 2] = $16; //@line 3276
  sp = STACKTOP; //@line 3277
  return;
 } else {
  $24 = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0; //@line 3282
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 3283
  FUNCTION_TABLE_vi[$24 & 1023]($12); //@line 3284
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 101; //@line 3287
   $25 = $ReallocAsyncCtx2 + 4 | 0; //@line 3288
   HEAP32[$25 >> 2] = $14; //@line 3289
   $26 = $ReallocAsyncCtx2 + 8 | 0; //@line 3290
   HEAP32[$26 >> 2] = $16; //@line 3291
   $27 = $ReallocAsyncCtx2 + 12 | 0; //@line 3292
   $$expand_i1_val = 1; //@line 3293
   HEAP8[$27 >> 0] = $$expand_i1_val; //@line 3294
   sp = STACKTOP; //@line 3295
   return;
  }
  ___async_unwind = 0; //@line 3298
  HEAP32[$ReallocAsyncCtx2 >> 2] = 101; //@line 3299
  $25 = $ReallocAsyncCtx2 + 4 | 0; //@line 3300
  HEAP32[$25 >> 2] = $14; //@line 3301
  $26 = $ReallocAsyncCtx2 + 8 | 0; //@line 3302
  HEAP32[$26 >> 2] = $16; //@line 3303
  $27 = $ReallocAsyncCtx2 + 12 | 0; //@line 3304
  $$expand_i1_val = 1; //@line 3305
  HEAP8[$27 >> 0] = $$expand_i1_val; //@line 3306
  sp = STACKTOP; //@line 3307
  return;
 }
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_116($0) {
 $0 = $0 | 0;
 var $10 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 25144
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25146
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25148
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25154
 if ((HEAP32[___async_retval >> 2] | 0) != -1018) {
  _printf(11863, HEAP32[$0 + 12 >> 2] | 0) | 0; //@line 25161
  _printf(12061, $10) | 0; //@line 25162
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 25163
  _putchar(10) | 0; //@line 25164
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 213; //@line 25167
   $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 25168
   HEAP32[$15 >> 2] = $2; //@line 25169
   $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 25170
   HEAP32[$16 >> 2] = $4; //@line 25171
   sp = STACKTOP; //@line 25172
   return;
  }
  ___async_unwind = 0; //@line 25175
  HEAP32[$ReallocAsyncCtx5 >> 2] = 213; //@line 25176
  $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 25177
  HEAP32[$15 >> 2] = $2; //@line 25178
  $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 25179
  HEAP32[$16 >> 2] = $4; //@line 25180
  sp = STACKTOP; //@line 25181
  return;
 }
 $17 = $2 + 1892 | 0; //@line 25184
 $18 = HEAP32[$17 >> 2] | 0; //@line 25185
 if (!$18) {
  return;
 }
 $22 = HEAP32[$2 + 2288 >> 2] | 0; //@line 25192
 $24 = HEAP32[$18 + 4 >> 2] | 0; //@line 25194
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 25195
 FUNCTION_TABLE_vii[$24 & 31]($4, $2 + 1880 | 0); //@line 25196
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 214; //@line 25199
  $25 = $ReallocAsyncCtx + 4 | 0; //@line 25200
  HEAP32[$25 >> 2] = $17; //@line 25201
  $26 = $ReallocAsyncCtx + 8 | 0; //@line 25202
  HEAP32[$26 >> 2] = $4; //@line 25203
  $27 = $ReallocAsyncCtx + 12 | 0; //@line 25204
  HEAP32[$27 >> 2] = $22; //@line 25205
  $28 = $ReallocAsyncCtx + 16 | 0; //@line 25206
  HEAP32[$28 >> 2] = $4; //@line 25207
  sp = STACKTOP; //@line 25208
  return;
 }
 ___async_unwind = 0; //@line 25211
 HEAP32[$ReallocAsyncCtx >> 2] = 214; //@line 25212
 $25 = $ReallocAsyncCtx + 4 | 0; //@line 25213
 HEAP32[$25 >> 2] = $17; //@line 25214
 $26 = $ReallocAsyncCtx + 8 | 0; //@line 25215
 HEAP32[$26 >> 2] = $4; //@line 25216
 $27 = $ReallocAsyncCtx + 12 | 0; //@line 25217
 HEAP32[$27 >> 2] = $22; //@line 25218
 $28 = $ReallocAsyncCtx + 16 | 0; //@line 25219
 HEAP32[$28 >> 2] = $4; //@line 25220
 sp = STACKTOP; //@line 25221
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_282($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 3149
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3151
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3153
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3155
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3157
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3159
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3161
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3163
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3165
 if ((HEAP32[___async_retval >> 2] | 0) < ($2 | 0)) {
  _printf(10880, $4) | 0; //@line 3170
  _printf(11068, $8) | 0; //@line 3171
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 3172
  _putchar(10) | 0; //@line 3173
  if (!___async) {
   ___async_unwind = 0; //@line 3176
  }
  HEAP32[$ReallocAsyncCtx3 >> 2] = 100; //@line 3178
  HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $14; //@line 3180
  HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $2; //@line 3182
  HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $4; //@line 3184
  HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $6; //@line 3186
  HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $8; //@line 3188
  HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $10; //@line 3190
  HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $12; //@line 3192
  HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $16; //@line 3194
  sp = STACKTOP; //@line 3195
  return;
 }
 $29 = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0; //@line 3200
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 3201
 FUNCTION_TABLE_vi[$29 & 1023]($12); //@line 3202
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 101; //@line 3205
  $30 = $ReallocAsyncCtx2 + 4 | 0; //@line 3206
  HEAP32[$30 >> 2] = $14; //@line 3207
  $31 = $ReallocAsyncCtx2 + 8 | 0; //@line 3208
  HEAP32[$31 >> 2] = $16; //@line 3209
  $32 = $ReallocAsyncCtx2 + 12 | 0; //@line 3210
  $$expand_i1_val = 1; //@line 3211
  HEAP8[$32 >> 0] = $$expand_i1_val; //@line 3212
  sp = STACKTOP; //@line 3213
  return;
 }
 ___async_unwind = 0; //@line 3216
 HEAP32[$ReallocAsyncCtx2 >> 2] = 101; //@line 3217
 $30 = $ReallocAsyncCtx2 + 4 | 0; //@line 3218
 HEAP32[$30 >> 2] = $14; //@line 3219
 $31 = $ReallocAsyncCtx2 + 8 | 0; //@line 3220
 HEAP32[$31 >> 2] = $16; //@line 3221
 $32 = $ReallocAsyncCtx2 + 12 | 0; //@line 3222
 $$expand_i1_val = 1; //@line 3223
 HEAP8[$32 >> 0] = $$expand_i1_val; //@line 3224
 sp = STACKTOP; //@line 3225
 return;
}
function __ZN18LoRaMacChannelPlan8get_planER16lora_channelplanPK25loramac_mib_req_confirm_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038$lcssa = 0, $$03841 = 0, $$1 = 0, $$140 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $32 = 0, $41 = 0, $48 = 0, $7 = 0, $9 = 0, $indvars$iv = 0, $wide$trip$count = 0;
 if (!$2) {
  $$140 = -1003; //@line 19278
  return $$140 | 0; //@line 19279
 }
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $$140 = -1002; //@line 19284
  return $$140 | 0; //@line 19285
 }
 $7 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 19288
 $9 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 0) | 0; //@line 19290
 if (!($7 << 24 >> 24)) {
  $$038$lcssa = 0; //@line 19293
 } else {
  $11 = $1 + 4 | 0; //@line 19295
  $12 = $2 + 4 | 0; //@line 19296
  $wide$trip$count = $7 & 255; //@line 19297
  $$03841 = 0; //@line 19298
  $indvars$iv = 0; //@line 19298
  while (1) {
   if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $9, $indvars$iv) | 0) {
    $15 = HEAP32[$11 >> 2] | 0; //@line 19303
    $16 = $$03841 & 255; //@line 19304
    HEAP8[$15 + ($16 << 4) >> 0] = $indvars$iv; //@line 19307
    HEAP32[$15 + ($16 << 4) + 4 >> 2] = HEAP32[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) >> 2]; //@line 19312
    HEAP8[$15 + ($16 << 4) + 12 >> 0] = HEAP8[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 8 >> 0] | 0; //@line 19317
    $32 = (HEAP32[$11 >> 2] | 0) + ($16 << 4) + 12 | 0; //@line 19323
    HEAP8[$32 >> 0] = HEAP8[$32 >> 0] & -16 | HEAP8[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 8 >> 0] & 15; //@line 19327
    $41 = (HEAP32[$11 >> 2] | 0) + ($16 << 4) + 12 | 0; //@line 19333
    HEAP8[$41 >> 0] = HEAP8[$41 >> 0] & 15 | HEAP8[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 8 >> 0] & -16; //@line 19337
    $48 = HEAP32[$11 >> 2] | 0; //@line 19341
    HEAP8[$48 + ($16 << 4) + 13 >> 0] = HEAP8[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 9 >> 0] | 0; //@line 19343
    HEAP32[$48 + ($16 << 4) + 8 >> 2] = HEAP32[(HEAP32[$12 >> 2] | 0) + ($indvars$iv * 12 | 0) + 4 >> 2]; //@line 19348
    $$1 = $$03841 + 1 << 24 >> 24; //@line 19350
   } else {
    $$1 = $$03841; //@line 19352
   }
   $indvars$iv = $indvars$iv + 1 | 0; //@line 19354
   if (($indvars$iv | 0) == ($wide$trip$count | 0)) {
    $$038$lcssa = $$1; //@line 19357
    break;
   } else {
    $$03841 = $$1; //@line 19360
   }
  }
 }
 HEAP8[$1 >> 0] = $$038$lcssa; //@line 19364
 $$140 = 0; //@line 19365
 return $$140 | 0; //@line 19366
}
function __ZN7LoRaMac21send_frame_on_channelEh__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $27 = 0, $30 = 0, $36 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 34950
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34952
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34954
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34956
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34958
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34960
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 34962
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 34964
 $15 = $2 + 264 | 0; //@line 34965
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($15) | 0) + 4 >> 2] = 1; //@line 34968
 $18 = $2 + 288 | 0; //@line 34969
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($18) | 0) + 4 >> 2] = 1; //@line 34972
 $21 = HEAP8[$4 >> 0] | 0; //@line 34973
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($18) | 0) + 8 >> 0] = $21; //@line 34976
 $24 = HEAP8[$6 >> 0] | 0; //@line 34977
 HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($18) | 0) + 9 >> 0] = $24; //@line 34980
 $27 = HEAP32[$8 >> 2] | 0; //@line 34981
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($18) | 0) + 12 >> 2] = $27; //@line 34984
 $30 = HEAP32[$8 >> 2] | 0; //@line 34985
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($15) | 0) + 8 >> 2] = $30; //@line 34988
 if (!(HEAP8[$2 + 372 >> 0] | 0)) {
  $36 = $2 + 897 | 0; //@line 34993
  HEAP8[$36 >> 0] = (HEAP8[$36 >> 0] | 0) + 1 << 24 >> 24; //@line 34996
 }
 $39 = HEAP32[$10 >> 2] | 0; //@line 34998
 $42 = HEAP16[$12 >> 1] & 255; //@line 35001
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 35002
 __ZN7LoRaPHY11handle_sendEPhh($39, $2 + 381 | 0, $42); //@line 35003
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 484; //@line 35006
  $43 = $ReallocAsyncCtx3 + 4 | 0; //@line 35007
  HEAP32[$43 >> 2] = $2; //@line 35008
  $44 = $ReallocAsyncCtx3 + 8 | 0; //@line 35009
  HEAP32[$44 >> 2] = $6; //@line 35010
  $45 = $ReallocAsyncCtx3 + 12 | 0; //@line 35011
  HEAP32[$45 >> 2] = $14; //@line 35012
  sp = STACKTOP; //@line 35013
  return;
 }
 ___async_unwind = 0; //@line 35016
 HEAP32[$ReallocAsyncCtx3 >> 2] = 484; //@line 35017
 $43 = $ReallocAsyncCtx3 + 4 | 0; //@line 35018
 HEAP32[$43 >> 2] = $2; //@line 35019
 $44 = $ReallocAsyncCtx3 + 8 | 0; //@line 35020
 HEAP32[$44 >> 2] = $6; //@line 35021
 $45 = $ReallocAsyncCtx3 + 12 | 0; //@line 35022
 HEAP32[$45 >> 2] = $14; //@line 35023
 sp = STACKTOP; //@line 35024
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_281($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 3059
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3063
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3065
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3067
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3069
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3071
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3073
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3075
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 3077
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 3079
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 3081
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 3083
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 3085
 if ((HEAP16[$0 + 4 >> 1] | 0) < -1) {
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(36) | 0; //@line 3088
  $28 = __ZN4mbed5Timer7read_msEv($4) | 0; //@line 3089
  if (!___async) {
   HEAP32[___async_retval >> 2] = $28; //@line 3093
   ___async_unwind = 0; //@line 3094
  }
  HEAP32[$ReallocAsyncCtx13 >> 2] = 97; //@line 3096
  HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $6; //@line 3098
  HEAP32[$ReallocAsyncCtx13 + 8 >> 2] = $20; //@line 3100
  HEAP32[$ReallocAsyncCtx13 + 12 >> 2] = $22; //@line 3102
  HEAP32[$ReallocAsyncCtx13 + 16 >> 2] = $24; //@line 3104
  HEAP32[$ReallocAsyncCtx13 + 20 >> 2] = $26; //@line 3106
  HEAP32[$ReallocAsyncCtx13 + 24 >> 2] = $16; //@line 3108
  HEAP32[$ReallocAsyncCtx13 + 28 >> 2] = $4; //@line 3110
  HEAP32[$ReallocAsyncCtx13 + 32 >> 2] = $18; //@line 3112
  sp = STACKTOP; //@line 3113
  return;
 } else {
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(36) | 0; //@line 3116
  $38 = __ZN4mbed5Timer7read_msEv($4) | 0; //@line 3117
  if (!___async) {
   HEAP32[___async_retval >> 2] = $38; //@line 3121
   ___async_unwind = 0; //@line 3122
  }
  HEAP32[$ReallocAsyncCtx12 >> 2] = 99; //@line 3124
  HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $6; //@line 3126
  HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $8; //@line 3128
  HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $10; //@line 3130
  HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $12; //@line 3132
  HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $14; //@line 3134
  HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $16; //@line 3136
  HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $4; //@line 3138
  HEAP32[$ReallocAsyncCtx12 + 32 >> 2] = $18; //@line 3140
  sp = STACKTOP; //@line 3141
  return;
 }
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_153($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$pre = 0, $10 = 0, $13 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 30638
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30640
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30642
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30644
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30646
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30648
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30650
 if (!$AsyncRetVal) {
  $13 = $2 + 288 | 0; //@line 30653
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($13) | 0) + 11 >> 0] = 0; //@line 30656
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($13) | 0) + 10 >> 0] = 0; //@line 30659
  $18 = HEAP32[$4 >> 2] | 0; //@line 30660
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($13) | 0) + 16 >> 2] = $18; //@line 30663
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(20) | 0; //@line 30664
  $21 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 30665
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 538; //@line 30668
   $22 = $ReallocAsyncCtx8 + 4 | 0; //@line 30669
   HEAP32[$22 >> 2] = $6; //@line 30670
   $23 = $ReallocAsyncCtx8 + 8 | 0; //@line 30671
   HEAP32[$23 >> 2] = $8; //@line 30672
   $24 = $ReallocAsyncCtx8 + 12 | 0; //@line 30673
   HEAP32[$24 >> 2] = $10; //@line 30674
   $25 = $ReallocAsyncCtx8 + 16 | 0; //@line 30675
   HEAP32[$25 >> 2] = $2; //@line 30676
   sp = STACKTOP; //@line 30677
   return;
  }
  HEAP32[___async_retval >> 2] = $21; //@line 30681
  ___async_unwind = 0; //@line 30682
  HEAP32[$ReallocAsyncCtx8 >> 2] = 538; //@line 30683
  $22 = $ReallocAsyncCtx8 + 4 | 0; //@line 30684
  HEAP32[$22 >> 2] = $6; //@line 30685
  $23 = $ReallocAsyncCtx8 + 8 | 0; //@line 30686
  HEAP32[$23 >> 2] = $8; //@line 30687
  $24 = $ReallocAsyncCtx8 + 12 | 0; //@line 30688
  HEAP32[$24 >> 2] = $10; //@line 30689
  $25 = $ReallocAsyncCtx8 + 16 | 0; //@line 30690
  HEAP32[$25 >> 2] = $2; //@line 30691
  sp = STACKTOP; //@line 30692
  return;
 }
 if (!$AsyncRetVal) {
  $$1 = 0; //@line 30697
  $30 = ___async_retval; //@line 30698
  HEAP32[$30 >> 2] = $$1; //@line 30699
  return;
 }
 $$pre = HEAP8[$10 >> 0] | 0; //@line 30702
 HEAP8[$2 + 373 >> 0] = 0; //@line 30704
 HEAP8[$10 >> 0] = $$pre & -9; //@line 30706
 $$1 = $AsyncRetVal; //@line 30707
 $30 = ___async_retval; //@line 30708
 HEAP32[$30 >> 2] = $$1; //@line 30709
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$2 = 0, $17 = 0, $18 = 0, $3 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 14468
 STACKTOP = STACKTOP + 64 | 0; //@line 14469
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 14469
 $3 = sp; //@line 14470
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0) {
  $$2 = 1; //@line 14473
 } else {
  if (!$1) {
   $$2 = 0; //@line 14477
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14479
   $6 = ___dynamic_cast($1, 464, 448, 0) | 0; //@line 14480
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 751; //@line 14483
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 14485
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 14487
    HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 14489
    sp = STACKTOP; //@line 14490
    STACKTOP = sp; //@line 14491
    return 0; //@line 14491
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14493
   if (!$6) {
    $$2 = 0; //@line 14496
   } else {
    dest = $3 + 4 | 0; //@line 14499
    stop = dest + 52 | 0; //@line 14499
    do {
     HEAP32[dest >> 2] = 0; //@line 14499
     dest = dest + 4 | 0; //@line 14499
    } while ((dest | 0) < (stop | 0));
    HEAP32[$3 >> 2] = $6; //@line 14500
    HEAP32[$3 + 8 >> 2] = $0; //@line 14502
    HEAP32[$3 + 12 >> 2] = -1; //@line 14504
    HEAP32[$3 + 48 >> 2] = 1; //@line 14506
    $17 = HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] | 0; //@line 14509
    $18 = HEAP32[$2 >> 2] | 0; //@line 14510
    $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 14511
    FUNCTION_TABLE_viiii[$17 & 7]($6, $3, $18, 1); //@line 14512
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 752; //@line 14515
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 14517
     HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 14519
     HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 14521
     sp = STACKTOP; //@line 14522
     STACKTOP = sp; //@line 14523
     return 0; //@line 14523
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14525
    if ((HEAP32[$3 + 24 >> 2] | 0) == 1) {
     HEAP32[$2 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 14532
     $$0 = 1; //@line 14533
    } else {
     $$0 = 0; //@line 14535
    }
    $$2 = $$0; //@line 14537
   }
  }
 }
 STACKTOP = sp; //@line 14541
 return $$2 | 0; //@line 14541
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_370($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 18376
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18378
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18380
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18386
 $13 = $2 + 360 | 0; //@line 18389
 if ((HEAP32[$13 >> 2] | 0) == 2) {
  _printf(12943, HEAP32[$0 + 12 >> 2] | 0) | 0; //@line 18393
  _printf(12970, $10) | 0; //@line 18394
  $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 18395
  _putchar(10) | 0; //@line 18396
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 428; //@line 18399
   $16 = $ReallocAsyncCtx + 4 | 0; //@line 18400
   HEAP32[$16 >> 2] = $2; //@line 18401
   $17 = $ReallocAsyncCtx + 8 | 0; //@line 18402
   HEAP32[$17 >> 2] = $4; //@line 18403
   $18 = $ReallocAsyncCtx + 12 | 0; //@line 18404
   HEAP32[$18 >> 2] = $4; //@line 18405
   $19 = $ReallocAsyncCtx + 16 | 0; //@line 18406
   HEAP32[$19 >> 2] = $13; //@line 18407
   sp = STACKTOP; //@line 18408
   return;
  }
  ___async_unwind = 0; //@line 18411
  HEAP32[$ReallocAsyncCtx >> 2] = 428; //@line 18412
  $16 = $ReallocAsyncCtx + 4 | 0; //@line 18413
  HEAP32[$16 >> 2] = $2; //@line 18414
  $17 = $ReallocAsyncCtx + 8 | 0; //@line 18415
  HEAP32[$17 >> 2] = $4; //@line 18416
  $18 = $ReallocAsyncCtx + 12 | 0; //@line 18417
  HEAP32[$18 >> 2] = $4; //@line 18418
  $19 = $ReallocAsyncCtx + 16 | 0; //@line 18419
  HEAP32[$19 >> 2] = $13; //@line 18420
  sp = STACKTOP; //@line 18421
  return;
 } else {
  $20 = HEAP32[$2 >> 2] | 0; //@line 18424
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 18425
  __ZN7LoRaPHY18put_radio_to_sleepEv($20); //@line 18426
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 431; //@line 18429
   $21 = $ReallocAsyncCtx4 + 4 | 0; //@line 18430
   HEAP32[$21 >> 2] = $2; //@line 18431
   $22 = $ReallocAsyncCtx4 + 8 | 0; //@line 18432
   HEAP32[$22 >> 2] = $13; //@line 18433
   sp = STACKTOP; //@line 18434
   return;
  }
  ___async_unwind = 0; //@line 18437
  HEAP32[$ReallocAsyncCtx4 >> 2] = 431; //@line 18438
  $21 = $ReallocAsyncCtx4 + 4 | 0; //@line 18439
  HEAP32[$21 >> 2] = $2; //@line 18440
  $22 = $ReallocAsyncCtx4 + 8 | 0; //@line 18441
  HEAP32[$22 >> 2] = $13; //@line 18442
  sp = STACKTOP; //@line 18443
  return;
 }
}
function _vsnprintf($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $26 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 13999
 STACKTOP = STACKTOP + 128 | 0; //@line 14000
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 14000
 $4 = sp + 124 | 0; //@line 14001
 $5 = sp; //@line 14002
 dest = $5; //@line 14003
 src = 10632; //@line 14003
 stop = dest + 124 | 0; //@line 14003
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 14003
  dest = dest + 4 | 0; //@line 14003
  src = src + 4 | 0; //@line 14003
 } while ((dest | 0) < (stop | 0));
 if (($1 + -1 | 0) >>> 0 > 2147483646) {
  if (!$1) {
   $$014 = $4; //@line 14009
   $$015 = 1; //@line 14009
   label = 4; //@line 14010
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 14013
   $$0 = -1; //@line 14014
  }
 } else {
  $$014 = $0; //@line 14017
  $$015 = $1; //@line 14017
  label = 4; //@line 14018
 }
 if ((label | 0) == 4) {
  $11 = -2 - $$014 | 0; //@line 14022
  $$$015 = $$015 >>> 0 > $11 >>> 0 ? $11 : $$015; //@line 14024
  HEAP32[$5 + 48 >> 2] = $$$015; //@line 14026
  $14 = $5 + 20 | 0; //@line 14027
  HEAP32[$14 >> 2] = $$014; //@line 14028
  HEAP32[$5 + 44 >> 2] = $$014; //@line 14030
  $16 = $$014 + $$$015 | 0; //@line 14031
  $17 = $5 + 16 | 0; //@line 14032
  HEAP32[$17 >> 2] = $16; //@line 14033
  HEAP32[$5 + 28 >> 2] = $16; //@line 14035
  $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 14036
  $19 = _vfprintf($5, $2, $3) | 0; //@line 14037
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 742; //@line 14040
   HEAP32[$AsyncCtx + 4 >> 2] = $$$015; //@line 14042
   HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 14044
   HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 14046
   HEAP32[$AsyncCtx + 16 >> 2] = $14; //@line 14048
   HEAP32[$AsyncCtx + 20 >> 2] = $17; //@line 14050
   sp = STACKTOP; //@line 14051
   STACKTOP = sp; //@line 14052
   return 0; //@line 14052
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14054
  if (!$$$015) {
   $$0 = $19; //@line 14057
  } else {
   $26 = HEAP32[$14 >> 2] | 0; //@line 14059
   HEAP8[$26 + ((($26 | 0) == (HEAP32[$17 >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 14064
   $$0 = $19; //@line 14065
  }
 }
 STACKTOP = sp; //@line 14068
 return $$0 | 0; //@line 14068
}
function __ZN7LoRaMac21prepare_rx_done_abortEv__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $21 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 20590
 STACKTOP = STACKTOP + 16 | 0; //@line 20591
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 20591
 $$byval_copy = sp; //@line 20592
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20594
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20596
 $5 = $2 + 968 | 0; //@line 20597
 HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 64; //@line 20600
 if (!(HEAP8[$2 + 373 >> 0] | 0)) {
  $17 = $2 + 944 | 0; //@line 20605
  HEAP8[$17 >> 0] = HEAP8[$17 >> 0] | 34; //@line 20608
  $21 = HEAP32[$2 + 356 >> 2] | 0; //@line 20610
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 20612
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($21, $2 + 996 | 0, 1); //@line 20613
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 412; //@line 20616
   sp = STACKTOP; //@line 20617
   STACKTOP = sp; //@line 20618
   return;
  }
  ___async_unwind = 0; //@line 20620
  HEAP32[$ReallocAsyncCtx2 >> 2] = 412; //@line 20621
  sp = STACKTOP; //@line 20622
  STACKTOP = sp; //@line 20623
  return;
 } else {
  $12 = HEAP32[$2 + 1328 >> 2] | 0; //@line 20626
  HEAP32[$4 >> 2] = 409; //@line 20627
  HEAP32[$4 + 4 >> 2] = 0; //@line 20629
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 20630
  HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 20631
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 20631
  $13 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($12, $2, $$byval_copy) | 0; //@line 20632
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 410; //@line 20635
   $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 20636
   HEAP32[$14 >> 2] = $4; //@line 20637
   $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 20638
   HEAP32[$15 >> 2] = $2; //@line 20639
   sp = STACKTOP; //@line 20640
   STACKTOP = sp; //@line 20641
   return;
  }
  HEAP32[___async_retval >> 2] = $13; //@line 20644
  ___async_unwind = 0; //@line 20645
  HEAP32[$ReallocAsyncCtx3 >> 2] = 410; //@line 20646
  $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 20647
  HEAP32[$14 >> 2] = $4; //@line 20648
  $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 20649
  HEAP32[$15 >> 2] = $2; //@line 20650
  sp = STACKTOP; //@line 20651
  STACKTOP = sp; //@line 20652
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $19 = 0, $28 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15800
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 15806
  } else {
   $9 = HEAP32[$0 + 12 >> 2] | 0; //@line 15810
   $10 = $0 + 16 + ($9 << 3) | 0; //@line 15811
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 15812
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0 + 16 | 0, $1, $2, $3); //@line 15813
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 768; //@line 15816
    HEAP32[$AsyncCtx3 + 4 >> 2] = $9; //@line 15818
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 15820
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 15822
    HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 15824
    HEAP32[$AsyncCtx3 + 20 >> 2] = $3; //@line 15826
    HEAP32[$AsyncCtx3 + 24 >> 2] = $10; //@line 15828
    sp = STACKTOP; //@line 15829
    return;
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15832
   if (($9 | 0) > 1) {
    $19 = $1 + 54 | 0; //@line 15836
    $$0 = $0 + 24 | 0; //@line 15837
    while (1) {
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 15839
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0, $1, $2, $3); //@line 15840
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 15845
     if (HEAP8[$19 >> 0] | 0) {
      break L1;
     }
     $28 = $$0 + 8 | 0; //@line 15851
     if ($28 >>> 0 < $10 >>> 0) {
      $$0 = $28; //@line 15854
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 769; //@line 15859
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 15861
    HEAP32[$AsyncCtx + 8 >> 2] = $$0; //@line 15863
    HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 15865
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 15867
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 15869
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 15871
    sp = STACKTOP; //@line 15872
    return;
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_229($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx30 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 35055
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35059
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35061
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35063
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 35065
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 35066
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 35070
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 35071
  FUNCTION_TABLE_vi[$13 & 1023]($4); //@line 35072
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 250; //@line 35075
   $14 = $ReallocAsyncCtx8 + 4 | 0; //@line 35076
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 35077
   $15 = $ReallocAsyncCtx8 + 8 | 0; //@line 35078
   HEAP32[$15 >> 2] = $6; //@line 35079
   $16 = $ReallocAsyncCtx8 + 12 | 0; //@line 35080
   HEAP32[$16 >> 2] = $8; //@line 35081
   sp = STACKTOP; //@line 35082
   return;
  }
  ___async_unwind = 0; //@line 35085
  HEAP32[$ReallocAsyncCtx8 >> 2] = 250; //@line 35086
  $14 = $ReallocAsyncCtx8 + 4 | 0; //@line 35087
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 35088
  $15 = $ReallocAsyncCtx8 + 8 | 0; //@line 35089
  HEAP32[$15 >> 2] = $6; //@line 35090
  $16 = $ReallocAsyncCtx8 + 12 | 0; //@line 35091
  HEAP32[$16 >> 2] = $8; //@line 35092
  sp = STACKTOP; //@line 35093
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[$6 >> 2] = 6; //@line 35098
  HEAP32[___async_retval >> 2] = -1014; //@line 35100
  return;
 }
 $ReallocAsyncCtx30 = _emscripten_realloc_async_context(12) | 0; //@line 35103
 _mbed_assert_internal(12827, 11911, 1243); //@line 35104
 if (___async) {
  HEAP32[$ReallocAsyncCtx30 >> 2] = 251; //@line 35107
  $18 = $ReallocAsyncCtx30 + 4 | 0; //@line 35108
  HEAP32[$18 >> 2] = $6; //@line 35109
  $19 = $ReallocAsyncCtx30 + 8 | 0; //@line 35110
  HEAP32[$19 >> 2] = $8; //@line 35111
  sp = STACKTOP; //@line 35112
  return;
 }
 ___async_unwind = 0; //@line 35115
 HEAP32[$ReallocAsyncCtx30 >> 2] = 251; //@line 35116
 $18 = $ReallocAsyncCtx30 + 4 | 0; //@line 35117
 HEAP32[$18 >> 2] = $6; //@line 35118
 $19 = $ReallocAsyncCtx30 + 8 | 0; //@line 35119
 HEAP32[$19 >> 2] = $8; //@line 35120
 sp = STACKTOP; //@line 35121
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 2364
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2366
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2368
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2370
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2372
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2374
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2380
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 2384
 $22 = HEAP16[$0 + 44 >> 1] | 0; //@line 2386
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 2388
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 2390
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 2392
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 2394
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 2396
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 2398
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 2400
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 2402
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 2404
 _printf(10880, HEAP32[$0 + 24 >> 2] | 0) | 0; //@line 2405
 HEAP32[$16 >> 2] = 5; //@line 2406
 _printf(10946, $16) | 0; //@line 2407
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(68) | 0; //@line 2408
 _putchar(10) | 0; //@line 2409
 if (!___async) {
  ___async_unwind = 0; //@line 2412
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 91; //@line 2414
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 2416
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 2418
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 2420
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 2422
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $10; //@line 2424
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $20; //@line 2426
 HEAP16[$ReallocAsyncCtx6 + 28 >> 1] = $22; //@line 2428
 HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $24; //@line 2430
 HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $26; //@line 2432
 HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $28; //@line 2434
 HEAP32[$ReallocAsyncCtx6 + 44 >> 2] = $30; //@line 2436
 HEAP32[$ReallocAsyncCtx6 + 48 >> 2] = $32; //@line 2438
 HEAP32[$ReallocAsyncCtx6 + 52 >> 2] = $34; //@line 2440
 HEAP32[$ReallocAsyncCtx6 + 56 >> 2] = $36; //@line 2442
 HEAP32[$ReallocAsyncCtx6 + 60 >> 2] = $38; //@line 2444
 HEAP32[$ReallocAsyncCtx6 + 64 >> 2] = $40; //@line 2446
 sp = STACKTOP; //@line 2447
 return;
}
function __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb_196($0) {
 $0 = $0 | 0;
 var $10 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 33086
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33088
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33090
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33092
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33094
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33096
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 33098
 if (!$AsyncRetVal) {
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($2) | 0) + 11 >> 0] = 0; //@line 33103
  HEAP8[(__ZN11LoRaMacMcps16get_confirmationEv($2) | 0) + 10 >> 0] = 0; //@line 33106
  $18 = HEAP32[$4 + 956 >> 2] | 0; //@line 33108
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2) | 0) + 16 >> 2] = $18; //@line 33111
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 33112
  $21 = __ZN7LoRaMac11schedule_txEv($4) | 0; //@line 33113
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 545; //@line 33116
   $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 33117
   HEAP32[$22 >> 2] = $6; //@line 33118
   $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 33119
   HEAP32[$23 >> 2] = $10; //@line 33120
   $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 33121
   HEAP32[$24 >> 2] = $2; //@line 33122
   $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 33123
   HEAP32[$25 >> 2] = $4; //@line 33124
   $26 = $ReallocAsyncCtx3 + 20 | 0; //@line 33125
   HEAP32[$26 >> 2] = $8; //@line 33126
   sp = STACKTOP; //@line 33127
   return;
  }
  HEAP32[___async_retval >> 2] = $21; //@line 33131
  ___async_unwind = 0; //@line 33132
  HEAP32[$ReallocAsyncCtx3 >> 2] = 545; //@line 33133
  $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 33134
  HEAP32[$22 >> 2] = $6; //@line 33135
  $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 33136
  HEAP32[$23 >> 2] = $10; //@line 33137
  $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 33138
  HEAP32[$24 >> 2] = $2; //@line 33139
  $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 33140
  HEAP32[$25 >> 2] = $4; //@line 33141
  $26 = $ReallocAsyncCtx3 + 20 | 0; //@line 33142
  HEAP32[$26 >> 2] = $8; //@line 33143
  sp = STACKTOP; //@line 33144
  return;
 } else {
  HEAP8[$4 + 373 >> 0] = 0; //@line 33148
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 33150
  return;
 }
}
function _mbedtls_cipher_cmac_update__async_cb_29($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $4 = 0, $42 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20253
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20255
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20257
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20259
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20261
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20263
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20265
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20267
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20269
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20271
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20273
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20275
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 20278
  $42 = ___async_retval; //@line 20279
  HEAP32[$42 >> 2] = $$0; //@line 20280
  return;
 }
 $24 = $2 + 1 | 0; //@line 20283
 if ($24 >>> 0 < $4 >>> 0) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 20286
  $22 = _mbedtls_cipher_update($8, $10, 0, $10, $12) | 0; //@line 20287
  if (!___async) {
   HEAP32[___async_retval >> 2] = $22; //@line 20291
   ___async_unwind = 0; //@line 20292
  }
  HEAP32[$ReallocAsyncCtx2 >> 2] = 672; //@line 20294
  HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $24; //@line 20296
  HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 20298
  HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 20300
  HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 20302
  HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 20304
  HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 20306
  HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 20308
  HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 20310
  HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 20312
  HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 20314
  sp = STACKTOP; //@line 20315
  return;
 }
 if (!$14) {
  $$0 = 0; //@line 20320
  $42 = ___async_retval; //@line 20321
  HEAP32[$42 >> 2] = $$0; //@line 20322
  return;
 }
 _memcpy((HEAP32[$18 >> 2] | 0) + ($20 + 16) | 0, $16 | 0, $14 | 0) | 0; //@line 20327
 HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + $14; //@line 20330
 $$0 = 0; //@line 20331
 $42 = ___async_retval; //@line 20332
 HEAP32[$42 >> 2] = $$0; //@line 20333
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_178($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 31930
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31934
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31936
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31938
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31940
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 31941
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 31945
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 31946
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 31947
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 402; //@line 31950
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 31951
   HEAP32[$14 >> 2] = $4; //@line 31952
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 31953
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 31954
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 31955
   HEAP32[$16 >> 2] = $8; //@line 31956
   sp = STACKTOP; //@line 31957
   return;
  }
  ___async_unwind = 0; //@line 31960
  HEAP32[$ReallocAsyncCtx4 >> 2] = 402; //@line 31961
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 31962
  HEAP32[$14 >> 2] = $4; //@line 31963
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 31964
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 31965
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 31966
  HEAP32[$16 >> 2] = $8; //@line 31967
  sp = STACKTOP; //@line 31968
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 31971
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 31975
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 31979
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 31980
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 31981
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 403; //@line 31984
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 31985
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 31986
  sp = STACKTOP; //@line 31987
  return;
 }
 ___async_unwind = 0; //@line 31990
 HEAP32[$ReallocAsyncCtx5 >> 2] = 403; //@line 31991
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 31992
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 31993
 sp = STACKTOP; //@line 31994
 return;
}
function __ZN16LoRaWANInterface4sendEhPKhti($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $10 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 5097
 STACKTOP = STACKTOP + 16 | 0; //@line 5098
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5098
 $vararg_buffer1 = sp + 8 | 0; //@line 5099
 $vararg_buffer = sp; //@line 5100
 do {
  if (HEAP8[$0 + 4 >> 0] | 0) {
   $10 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 5108
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 5109
   FUNCTION_TABLE_ii[$10 & 15]($0) | 0; //@line 5110
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 172; //@line 5113
    HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 5115
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 5117
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 5119
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer1; //@line 5121
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 5123
    HEAP32[$AsyncCtx + 24 >> 2] = $4; //@line 5125
    HEAP8[$AsyncCtx + 28 >> 0] = $1; //@line 5127
    HEAP16[$AsyncCtx + 30 >> 1] = $3; //@line 5129
    sp = STACKTOP; //@line 5130
    STACKTOP = sp; //@line 5131
    return 0; //@line 5131
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5133
    break;
   }
  }
 } while (0);
 _printf(11812, $vararg_buffer) | 0; //@line 5138
 _printf(11825, $vararg_buffer1) | 0; //@line 5139
 $AsyncCtx5 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5140
 _putchar(10) | 0; //@line 5141
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 173; //@line 5144
  HEAP32[$AsyncCtx5 + 4 >> 2] = $2; //@line 5146
  HEAP32[$AsyncCtx5 + 8 >> 2] = $4; //@line 5148
  HEAP8[$AsyncCtx5 + 12 >> 0] = $1; //@line 5150
  HEAP16[$AsyncCtx5 + 14 >> 1] = $3; //@line 5152
  sp = STACKTOP; //@line 5153
  STACKTOP = sp; //@line 5154
  return 0; //@line 5154
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 5156
 if (!$2) {
  $$0 = -1003; //@line 5159
  STACKTOP = sp; //@line 5160
  return $$0 | 0; //@line 5160
 }
 $$0 = __ZN12LoRaWANStack9handle_txEhPKhth(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1, $2, $3, $4 & 255) | 0; //@line 5165
 STACKTOP = sp; //@line 5166
 return $$0 | 0; //@line 5166
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_483($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 34598
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34602
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34604
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34606
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 34608
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 34609
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 34613
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 34614
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 34615
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 271; //@line 34618
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 34619
   HEAP32[$14 >> 2] = $4; //@line 34620
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 34621
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 34622
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 34623
   HEAP32[$16 >> 2] = $8; //@line 34624
   sp = STACKTOP; //@line 34625
   return;
  }
  ___async_unwind = 0; //@line 34628
  HEAP32[$ReallocAsyncCtx4 >> 2] = 271; //@line 34629
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 34630
  HEAP32[$14 >> 2] = $4; //@line 34631
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 34632
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 34633
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 34634
  HEAP32[$16 >> 2] = $8; //@line 34635
  sp = STACKTOP; //@line 34636
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 34639
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 34643
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 34647
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 34648
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 34649
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 272; //@line 34652
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 34653
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 34654
  sp = STACKTOP; //@line 34655
  return;
 }
 ___async_unwind = 0; //@line 34658
 HEAP32[$ReallocAsyncCtx5 >> 2] = 272; //@line 34659
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 34660
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 34661
 sp = STACKTOP; //@line 34662
 return;
}
function ___mo_lookup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$090 = 0, $$094 = 0, $$4 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $4 = 0, $44 = 0, $46 = 0, $49 = 0, $53 = 0, $63 = 0, $7 = 0;
 $4 = (HEAP32[$0 >> 2] | 0) + 1794895138 | 0; //@line 10762
 $7 = _swapc(HEAP32[$0 + 8 >> 2] | 0, $4) | 0; //@line 10765
 $10 = _swapc(HEAP32[$0 + 12 >> 2] | 0, $4) | 0; //@line 10768
 $13 = _swapc(HEAP32[$0 + 16 >> 2] | 0, $4) | 0; //@line 10771
 L1 : do {
  if ($7 >>> 0 < $1 >>> 2 >>> 0) {
   $17 = $1 - ($7 << 2) | 0; //@line 10777
   if ($10 >>> 0 < $17 >>> 0 & $13 >>> 0 < $17 >>> 0) {
    if (!(($13 | $10) & 3)) {
     $23 = $10 >>> 2; //@line 10786
     $24 = $13 >>> 2; //@line 10787
     $$090 = 0; //@line 10788
     $$094 = $7; //@line 10788
     while (1) {
      $25 = $$094 >>> 1; //@line 10790
      $26 = $$090 + $25 | 0; //@line 10791
      $27 = $26 << 1; //@line 10792
      $28 = $27 + $23 | 0; //@line 10793
      $31 = _swapc(HEAP32[$0 + ($28 << 2) >> 2] | 0, $4) | 0; //@line 10796
      $35 = _swapc(HEAP32[$0 + ($28 + 1 << 2) >> 2] | 0, $4) | 0; //@line 10800
      if (!($35 >>> 0 < $1 >>> 0 & $31 >>> 0 < ($1 - $35 | 0) >>> 0)) {
       $$4 = 0; //@line 10806
       break L1;
      }
      if (HEAP8[$0 + ($35 + $31) >> 0] | 0) {
       $$4 = 0; //@line 10814
       break L1;
      }
      $44 = _strcmp($2, $0 + $35 | 0) | 0; //@line 10818
      if (!$44) {
       break;
      }
      $63 = ($44 | 0) < 0; //@line 10824
      if (($$094 | 0) == 1) {
       $$4 = 0; //@line 10829
       break L1;
      } else {
       $$090 = $63 ? $$090 : $26; //@line 10832
       $$094 = $63 ? $25 : $$094 - $25 | 0; //@line 10832
      }
     }
     $46 = $27 + $24 | 0; //@line 10835
     $49 = _swapc(HEAP32[$0 + ($46 << 2) >> 2] | 0, $4) | 0; //@line 10838
     $53 = _swapc(HEAP32[$0 + ($46 + 1 << 2) >> 2] | 0, $4) | 0; //@line 10842
     if ($53 >>> 0 < $1 >>> 0 & $49 >>> 0 < ($1 - $53 | 0) >>> 0) {
      $$4 = (HEAP8[$0 + ($53 + $49) >> 0] | 0) == 0 ? $0 + $53 | 0 : 0; //@line 10854
     } else {
      $$4 = 0; //@line 10856
     }
    } else {
     $$4 = 0; //@line 10859
    }
   } else {
    $$4 = 0; //@line 10862
   }
  } else {
   $$4 = 0; //@line 10865
  }
 } while (0);
 return $$4 | 0; //@line 10868
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_372($0) {
 $0 = $0 | 0;
 var $14 = 0, $18 = 0, $2 = 0, $22 = 0, $24 = 0, $33 = 0, $37 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 18458
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18460
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18462
 $7 = (HEAP8[$2 + 373 >> 0] | 0) != 0; //@line 18468
 if (!(HEAP32[$2 + 364 >> 2] | 0)) {
  if ($7) {
   HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 3; //@line 18474
  }
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 3; //@line 18479
  $14 = $2 + 356 | 0; //@line 18480
  $18 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$14 >> 2] | 0, HEAP32[$2 + 980 >> 2] | 0) | 0; //@line 18484
  if ($18 >>> 0 >= (HEAP32[$2 + 976 >> 2] | 0) >>> 0) {
   $22 = HEAP32[$14 >> 2] | 0; //@line 18489
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 18491
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($22, $2 + 1056 | 0); //@line 18492
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 432; //@line 18495
    $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 18496
    HEAP32[$24 >> 2] = $2; //@line 18497
    sp = STACKTOP; //@line 18498
    return;
   }
   ___async_unwind = 0; //@line 18501
   HEAP32[$ReallocAsyncCtx6 >> 2] = 432; //@line 18502
   $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 18503
   HEAP32[$24 >> 2] = $2; //@line 18504
   sp = STACKTOP; //@line 18505
   return;
  }
 } else {
  if ($7) {
   HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 4; //@line 18513
  }
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 4; //@line 18518
  if ((HEAP32[$4 >> 2] | 0) != 2) {
   $33 = $2 + 944 | 0; //@line 18522
   HEAP8[$33 >> 0] = HEAP8[$33 >> 0] | 32; //@line 18525
  }
 }
 $37 = HEAP32[$2 + 356 >> 2] | 0; //@line 18529
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 18531
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($37, $2 + 996 | 0, 1); //@line 18532
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 433; //@line 18535
  sp = STACKTOP; //@line 18536
  return;
 }
 ___async_unwind = 0; //@line 18539
 HEAP32[$ReallocAsyncCtx3 >> 2] = 433; //@line 18540
 sp = STACKTOP; //@line 18541
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19740
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19742
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19744
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19746
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19748
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19750
 $11 = HEAP32[$2 >> 2] | 0; //@line 19751
 if ($11 | 0) {
  $14 = HEAP32[$11 + 4 >> 2] | 0; //@line 19755
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 19756
  FUNCTION_TABLE_vii[$14 & 31]($6, $8); //@line 19757
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 141; //@line 19760
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 19761
   HEAP32[$15 >> 2] = $2; //@line 19762
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 19763
   HEAP32[$16 >> 2] = $4; //@line 19764
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 19765
   HEAP32[$17 >> 2] = $10; //@line 19766
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 19767
   HEAP32[$18 >> 2] = $8; //@line 19768
   sp = STACKTOP; //@line 19769
   return;
  }
  ___async_unwind = 0; //@line 19772
  HEAP32[$ReallocAsyncCtx2 >> 2] = 141; //@line 19773
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 19774
  HEAP32[$15 >> 2] = $2; //@line 19775
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 19776
  HEAP32[$16 >> 2] = $4; //@line 19777
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 19778
  HEAP32[$17 >> 2] = $10; //@line 19779
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 19780
  HEAP32[$18 >> 2] = $8; //@line 19781
  sp = STACKTOP; //@line 19782
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 19785
 __ZN4mbed6Ticker5setupEy($10, 1e5, 0); //@line 19786
 $19 = HEAP32[$2 >> 2] | 0; //@line 19787
 if (!$19) {
  return;
 }
 $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 19793
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 19794
 FUNCTION_TABLE_vi[$22 & 1023]($8); //@line 19795
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 142; //@line 19798
  sp = STACKTOP; //@line 19799
  return;
 }
 ___async_unwind = 0; //@line 19802
 HEAP32[$ReallocAsyncCtx3 >> 2] = 142; //@line 19803
 sp = STACKTOP; //@line 19804
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_249($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 1070
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1074
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1076
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1078
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1080
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 1081
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 1085
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 1086
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 1087
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 263; //@line 1090
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 1091
   HEAP32[$14 >> 2] = $4; //@line 1092
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 1093
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 1094
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 1095
   HEAP32[$16 >> 2] = $8; //@line 1096
   sp = STACKTOP; //@line 1097
   return;
  }
  ___async_unwind = 0; //@line 1100
  HEAP32[$ReallocAsyncCtx4 >> 2] = 263; //@line 1101
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 1102
  HEAP32[$14 >> 2] = $4; //@line 1103
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 1104
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 1105
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 1106
  HEAP32[$16 >> 2] = $8; //@line 1107
  sp = STACKTOP; //@line 1108
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 1111
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 1115
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 1119
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 1120
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 1121
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 264; //@line 1124
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 1125
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 1126
  sp = STACKTOP; //@line 1127
  return;
 }
 ___async_unwind = 0; //@line 1130
 HEAP32[$ReallocAsyncCtx5 >> 2] = 264; //@line 1131
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 1132
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 1133
 sp = STACKTOP; //@line 1134
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 20070
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20072
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20074
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20076
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20078
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20080
 $11 = HEAP32[$2 >> 2] | 0; //@line 20081
 if ($11 | 0) {
  $14 = HEAP32[$11 + 4 >> 2] | 0; //@line 20085
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 20086
  FUNCTION_TABLE_vii[$14 & 31]($6, $8); //@line 20087
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 68; //@line 20090
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 20091
   HEAP32[$15 >> 2] = $2; //@line 20092
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 20093
   HEAP32[$16 >> 2] = $4; //@line 20094
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 20095
   HEAP32[$17 >> 2] = $10; //@line 20096
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 20097
   HEAP32[$18 >> 2] = $8; //@line 20098
   sp = STACKTOP; //@line 20099
   return;
  }
  ___async_unwind = 0; //@line 20102
  HEAP32[$ReallocAsyncCtx2 >> 2] = 68; //@line 20103
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 20104
  HEAP32[$15 >> 2] = $2; //@line 20105
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 20106
  HEAP32[$16 >> 2] = $4; //@line 20107
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 20108
  HEAP32[$17 >> 2] = $10; //@line 20109
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 20110
  HEAP32[$18 >> 2] = $8; //@line 20111
  sp = STACKTOP; //@line 20112
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 20115
 __ZN4mbed6Ticker5setupEy($10, 2e5, 0); //@line 20116
 $19 = HEAP32[$2 >> 2] | 0; //@line 20117
 if (!$19) {
  return;
 }
 $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 20123
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 20124
 FUNCTION_TABLE_vi[$22 & 1023]($8); //@line 20125
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 69; //@line 20128
  sp = STACKTOP; //@line 20129
  return;
 }
 ___async_unwind = 0; //@line 20132
 HEAP32[$ReallocAsyncCtx3 >> 2] = 69; //@line 20133
 sp = STACKTOP; //@line 20134
 return;
}
function _fputc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14173
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 14178
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 14183
  } else {
   $20 = $0 & 255; //@line 14185
   $21 = $0 & 255; //@line 14186
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 14192
   } else {
    $26 = $1 + 20 | 0; //@line 14194
    $27 = HEAP32[$26 >> 2] | 0; //@line 14195
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 14201
     HEAP8[$27 >> 0] = $20; //@line 14202
     $34 = $21; //@line 14203
    } else {
     label = 12; //@line 14205
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 14210
     $32 = ___overflow($1, $0) | 0; //@line 14211
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 746; //@line 14214
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 14216
      sp = STACKTOP; //@line 14217
      return 0; //@line 14218
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 14220
      $34 = $32; //@line 14221
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 14226
   $$0 = $34; //@line 14227
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 14232
   $8 = $0 & 255; //@line 14233
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 14239
    $14 = HEAP32[$13 >> 2] | 0; //@line 14240
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 14246
     HEAP8[$14 >> 0] = $7; //@line 14247
     $$0 = $8; //@line 14248
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14252
   $19 = ___overflow($1, $0) | 0; //@line 14253
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 745; //@line 14256
    sp = STACKTOP; //@line 14257
    return 0; //@line 14258
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14260
    $$0 = $19; //@line 14261
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 14266
}
function _putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10427
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 10432
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 10437
  } else {
   $20 = $0 & 255; //@line 10439
   $21 = $0 & 255; //@line 10440
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 10446
   } else {
    $26 = $1 + 20 | 0; //@line 10448
    $27 = HEAP32[$26 >> 2] | 0; //@line 10449
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 10455
     HEAP8[$27 >> 0] = $20; //@line 10456
     $34 = $21; //@line 10457
    } else {
     label = 12; //@line 10459
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 10464
     $32 = ___overflow($1, $0) | 0; //@line 10465
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 733; //@line 10468
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 10470
      sp = STACKTOP; //@line 10471
      return 0; //@line 10472
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 10474
      $34 = $32; //@line 10475
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 10480
   $$0 = $34; //@line 10481
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 10486
   $8 = $0 & 255; //@line 10487
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 10493
    $14 = HEAP32[$13 >> 2] | 0; //@line 10494
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 10500
     HEAP8[$14 >> 0] = $7; //@line 10501
     $$0 = $8; //@line 10502
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10506
   $19 = ___overflow($1, $0) | 0; //@line 10507
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 732; //@line 10510
    sp = STACKTOP; //@line 10511
    return 0; //@line 10512
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10514
    $$0 = $19; //@line 10515
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 10520
}
function ___fflush_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $22 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11033
 $1 = $0 + 20 | 0; //@line 11034
 $3 = $0 + 28 | 0; //@line 11036
 do {
  if ((HEAP32[$1 >> 2] | 0) >>> 0 > (HEAP32[$3 >> 2] | 0) >>> 0) {
   $7 = HEAP32[$0 + 36 >> 2] | 0; //@line 11042
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 11043
   FUNCTION_TABLE_iiii[$7 & 15]($0, 0, 0) | 0; //@line 11044
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 739; //@line 11047
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 11049
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 11051
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 11053
    sp = STACKTOP; //@line 11054
    return 0; //@line 11055
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 11057
    if (!(HEAP32[$1 >> 2] | 0)) {
     $$0 = -1; //@line 11061
     break;
    } else {
     label = 5; //@line 11064
     break;
    }
   }
  } else {
   label = 5; //@line 11069
  }
 } while (0);
 if ((label | 0) == 5) {
  $13 = $0 + 4 | 0; //@line 11073
  $14 = HEAP32[$13 >> 2] | 0; //@line 11074
  $15 = $0 + 8 | 0; //@line 11075
  $16 = HEAP32[$15 >> 2] | 0; //@line 11076
  do {
   if ($14 >>> 0 < $16 >>> 0) {
    $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 11084
    $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11085
    FUNCTION_TABLE_iiii[$22 & 15]($0, $14 - $16 | 0, 1) | 0; //@line 11086
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 740; //@line 11089
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 11091
     HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 11093
     HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 11095
     HEAP32[$AsyncCtx3 + 16 >> 2] = $15; //@line 11097
     HEAP32[$AsyncCtx3 + 20 >> 2] = $13; //@line 11099
     sp = STACKTOP; //@line 11100
     return 0; //@line 11101
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11103
     break;
    }
   }
  } while (0);
  HEAP32[$0 + 16 >> 2] = 0; //@line 11109
  HEAP32[$3 >> 2] = 0; //@line 11110
  HEAP32[$1 >> 2] = 0; //@line 11111
  HEAP32[$15 >> 2] = 0; //@line 11112
  HEAP32[$13 >> 2] = 0; //@line 11113
  $$0 = 0; //@line 11114
 }
 return $$0 | 0; //@line 11116
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_240($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $2 = 0, $21 = 0, $22 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 267
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 269
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 271
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 273
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 275
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 277
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 279
 $13 = $2 + 946 | 0; //@line 281
 HEAP16[$13 >> 1] = $AsyncRetVal; //@line 282
 $15 = HEAP16[$4 >> 1] | 0; //@line 284
 HEAP16[$4 >> 1] = $15 + 1 << 16 >> 16; //@line 286
 HEAP8[($15 & 65535) + ($2 + 381) >> 0] = $AsyncRetVal; //@line 289
 $21 = (HEAPU16[$13 >> 1] | 0) >>> 8 & 255; //@line 292
 $22 = HEAP16[$4 >> 1] | 0; //@line 293
 HEAP16[$4 >> 1] = $22 + 1 << 16 >> 16; //@line 295
 HEAP8[($22 & 65535) + ($2 + 381) >> 0] = $21; //@line 298
 $27 = HEAP16[$4 >> 1] & 255; //@line 300
 $29 = HEAP32[$2 + 908 >> 2] | 0; //@line 302
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 303
 $30 = __Z22compute_join_frame_micPKhtS0_Pj($6, $27, $29, $8) | 0; //@line 304
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 486; //@line 307
  $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 308
  HEAP32[$31 >> 2] = $8; //@line 309
  $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 310
  HEAP32[$32 >> 2] = $4; //@line 311
  $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 312
  HEAP32[$33 >> 2] = $2; //@line 313
  $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 314
  HEAP32[$34 >> 2] = $10; //@line 315
  sp = STACKTOP; //@line 316
  return;
 }
 HEAP32[___async_retval >> 2] = $30; //@line 320
 ___async_unwind = 0; //@line 321
 HEAP32[$ReallocAsyncCtx2 >> 2] = 486; //@line 322
 $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 323
 HEAP32[$31 >> 2] = $8; //@line 324
 $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 325
 HEAP32[$32 >> 2] = $4; //@line 326
 $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 327
 HEAP32[$33 >> 2] = $2; //@line 328
 $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 329
 HEAP32[$34 >> 2] = $10; //@line 330
 sp = STACKTOP; //@line 331
 return;
}
function __ZN12LoRaWANStack9handle_rxEhPhth($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$off0 = 0, $$021 = 0, $$1 = 0, $$pre$phi25Z2D = 0, $12 = 0, $13 = 0, $15 = 0, $19 = 0, $20 = 0, $22 = 0, $24 = 0, $27 = 0, $28 = 0, $32 = 0, $8 = 0, label = 0;
 if (!(HEAP8[$0 + 1932 >> 0] | 0)) {
  $$1 = -1017; //@line 9806
  return $$1 | 0; //@line 9807
 }
 $8 = $0 + 2236 | 0; //@line 9809
 if (!(HEAP8[$8 >> 0] | 0)) {
  $$1 = -1001; //@line 9813
  return $$1 | 0; //@line 9814
 }
 if (!$2) {
  $$1 = -1003; //@line 9818
  return $$1 | 0; //@line 9819
 }
 $12 = $0 + 2256 | 0; //@line 9821
 $13 = HEAP32[$12 >> 2] | 0; //@line 9822
 $15 = HEAP16[$0 + 2260 >> 1] | 0; //@line 9824
 if ((HEAP8[$0 + 2253 >> 0] | 0) != $1 << 24 >> 24) {
  $$1 = -1001; //@line 9829
  return $$1 | 0; //@line 9830
 }
 $19 = $15 & 65535; //@line 9832
 $20 = $3 & 65535; //@line 9833
 $22 = $0 + 2282 | 0; //@line 9835
 $24 = (HEAP16[$22 >> 1] | 0) == 0; //@line 9837
 if (($15 & 65535) > ($3 & 65535)) {
  if ($24) {
   $27 = $0 + 2280 | 0; //@line 9842
   HEAP16[$27 >> 1] = $19 - $20; //@line 9843
   HEAP16[$22 >> 1] = $3; //@line 9844
   _memcpy($2 | 0, $13 | 0, $20 | 0) | 0; //@line 9845
   $$0$off0 = 0; //@line 9846
   $$021 = $3; //@line 9846
   $$pre$phi25Z2D = $27; //@line 9846
  } else {
   label = 9; //@line 9848
  }
 } else {
  if ($24) {
   $28 = $0 + 2280 | 0; //@line 9852
   HEAP16[$28 >> 1] = 0; //@line 9853
   HEAP16[$22 >> 1] = 0; //@line 9854
   _memcpy($2 | 0, $13 | 0, $19 | 0) | 0; //@line 9855
   $$0$off0 = 1; //@line 9856
   $$021 = $15; //@line 9856
   $$pre$phi25Z2D = $28; //@line 9856
  } else {
   label = 9; //@line 9858
  }
 }
 if ((label | 0) == 9) {
  $$0$off0 = 0; //@line 9863
  $$021 = $15; //@line 9863
  $$pre$phi25Z2D = $0 + 2280 | 0; //@line 9863
 }
 if (HEAP16[$$pre$phi25Z2D >> 1] | 0) {
  $32 = HEAP16[$0 + 2282 >> 1] | 0; //@line 9869
  if ($32 << 16 >> 16) {
   _memcpy($2 | 0, $13 + ($32 & 65535) | 0, $$021 & 65535 | 0) | 0; //@line 9875
  }
 }
 if (!$$0$off0) {
  $$1 = $$021; //@line 9879
  return $$1 | 0; //@line 9880
 }
 _memset(HEAP32[$12 >> 2] | 0, 0, 255) | 0; //@line 9883
 HEAP8[$8 >> 0] = 0; //@line 9884
 $$1 = $$021; //@line 9885
 return $$1 | 0; //@line 9886
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_276($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 2614
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2616
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2618
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2620
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2622
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2624
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2626
 $14 = HEAP16[$0 + 28 >> 1] | 0; //@line 2628
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2630
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 2632
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 2634
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 2636
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 2638
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 2640
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 2642
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 2644
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 2646
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(68) | 0; //@line 2647
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 2648
 if (!___async) {
  ___async_unwind = 0; //@line 2651
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 92; //@line 2653
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $4; //@line 2655
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $6; //@line 2657
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $8; //@line 2659
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $10; //@line 2661
 HEAP32[$ReallocAsyncCtx9 + 20 >> 2] = $2; //@line 2663
 HEAP32[$ReallocAsyncCtx9 + 24 >> 2] = $12; //@line 2665
 HEAP16[$ReallocAsyncCtx9 + 28 >> 1] = $14; //@line 2667
 HEAP32[$ReallocAsyncCtx9 + 32 >> 2] = $16; //@line 2669
 HEAP32[$ReallocAsyncCtx9 + 36 >> 2] = $18; //@line 2671
 HEAP32[$ReallocAsyncCtx9 + 40 >> 2] = $20; //@line 2673
 HEAP32[$ReallocAsyncCtx9 + 44 >> 2] = $22; //@line 2675
 HEAP32[$ReallocAsyncCtx9 + 48 >> 2] = $24; //@line 2677
 HEAP32[$ReallocAsyncCtx9 + 52 >> 2] = $26; //@line 2679
 HEAP32[$ReallocAsyncCtx9 + 56 >> 2] = $28; //@line 2681
 HEAP32[$ReallocAsyncCtx9 + 60 >> 2] = $30; //@line 2683
 HEAP32[$ReallocAsyncCtx9 + 64 >> 2] = $32; //@line 2685
 sp = STACKTOP; //@line 2686
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_314($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 5139
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5141
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5143
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5145
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5147
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5149
 $11 = HEAP32[$2 >> 2] | 0; //@line 5150
 $13 = $10 + 12 | 0; //@line 5152
 HEAP32[$10 >> 2] = 515; //@line 5153
 HEAP32[$10 + 4 >> 2] = 0; //@line 5155
 HEAP32[$10 + 8 >> 2] = $4; //@line 5157
 HEAP32[$13 >> 2] = 848; //@line 5158
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(28) | 0; //@line 5159
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($11, $4 + 1036 | 0, $10); //@line 5160
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 516; //@line 5163
  $14 = $ReallocAsyncCtx8 + 4 | 0; //@line 5164
  HEAP32[$14 >> 2] = $2; //@line 5165
  $15 = $ReallocAsyncCtx8 + 8 | 0; //@line 5166
  HEAP32[$15 >> 2] = $4; //@line 5167
  $16 = $ReallocAsyncCtx8 + 12 | 0; //@line 5168
  HEAP32[$16 >> 2] = $6; //@line 5169
  $17 = $ReallocAsyncCtx8 + 16 | 0; //@line 5170
  HEAP32[$17 >> 2] = $8; //@line 5171
  $18 = $ReallocAsyncCtx8 + 20 | 0; //@line 5172
  HEAP32[$18 >> 2] = $10; //@line 5173
  $19 = $ReallocAsyncCtx8 + 24 | 0; //@line 5174
  HEAP32[$19 >> 2] = $13; //@line 5175
  sp = STACKTOP; //@line 5176
  return;
 }
 ___async_unwind = 0; //@line 5179
 HEAP32[$ReallocAsyncCtx8 >> 2] = 516; //@line 5180
 $14 = $ReallocAsyncCtx8 + 4 | 0; //@line 5181
 HEAP32[$14 >> 2] = $2; //@line 5182
 $15 = $ReallocAsyncCtx8 + 8 | 0; //@line 5183
 HEAP32[$15 >> 2] = $4; //@line 5184
 $16 = $ReallocAsyncCtx8 + 12 | 0; //@line 5185
 HEAP32[$16 >> 2] = $6; //@line 5186
 $17 = $ReallocAsyncCtx8 + 16 | 0; //@line 5187
 HEAP32[$17 >> 2] = $8; //@line 5188
 $18 = $ReallocAsyncCtx8 + 20 | 0; //@line 5189
 HEAP32[$18 >> 2] = $10; //@line 5190
 $19 = $ReallocAsyncCtx8 + 24 | 0; //@line 5191
 HEAP32[$19 >> 2] = $13; //@line 5192
 sp = STACKTOP; //@line 5193
 return;
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_16($0) {
 $0 = $0 | 0;
 var $12 = 0, $16 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18566
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18570
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18572
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18574
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18578
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18582
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18584
 L2 : do {
  if (!$AsyncRetVal) {
   if ((HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) == 2) {
    switch (HEAP32[$4 >> 2] | 0) {
    case 0:
     {
      break;
     }
    case 10:
     {
      if (!(HEAP8[$16 + 372 >> 0] | 0)) {
       break L2;
      }
      break;
     }
    default:
     {
      break L2;
     }
    }
    _printf(12943, $8) | 0; //@line 18609
    _printf(12970, $12) | 0; //@line 18610
    $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 18611
    _putchar(10) | 0; //@line 18612
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 549; //@line 18615
     $25 = $ReallocAsyncCtx + 4 | 0; //@line 18616
     HEAP32[$25 >> 2] = $16; //@line 18617
     $26 = $ReallocAsyncCtx + 8 | 0; //@line 18618
     HEAP32[$26 >> 2] = $6; //@line 18619
     $27 = $ReallocAsyncCtx + 12 | 0; //@line 18620
     HEAP32[$27 >> 2] = $6; //@line 18621
     $28 = $ReallocAsyncCtx + 16 | 0; //@line 18622
     HEAP32[$28 >> 2] = $AsyncRetVal; //@line 18623
     sp = STACKTOP; //@line 18624
     return;
    }
    ___async_unwind = 0; //@line 18627
    HEAP32[$ReallocAsyncCtx >> 2] = 549; //@line 18628
    $25 = $ReallocAsyncCtx + 4 | 0; //@line 18629
    HEAP32[$25 >> 2] = $16; //@line 18630
    $26 = $ReallocAsyncCtx + 8 | 0; //@line 18631
    HEAP32[$26 >> 2] = $6; //@line 18632
    $27 = $ReallocAsyncCtx + 12 | 0; //@line 18633
    HEAP32[$27 >> 2] = $6; //@line 18634
    $28 = $ReallocAsyncCtx + 16 | 0; //@line 18635
    HEAP32[$28 >> 2] = $AsyncRetVal; //@line 18636
    sp = STACKTOP; //@line 18637
    return;
   }
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 18643
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $14 = 0, $17 = 0, $20 = 0, $3 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 25285
 $3 = $0 + 4 | 0; //@line 25286
 $4 = HEAP32[$3 >> 2] | 0; //@line 25287
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 72 >> 2] | 0; //@line 25290
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 25291
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 25292
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 634; //@line 25295
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 25297
  HEAP8[$AsyncCtx + 8 >> 0] = $1 & 1; //@line 25300
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 25302
  sp = STACKTOP; //@line 25303
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 25306
 $11 = HEAP32[$3 >> 2] | 0; //@line 25307
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 28 >> 2] | 0; //@line 25310
 do {
  if ($1) {
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 25313
   FUNCTION_TABLE_vii[$14 & 31]($11, 0); //@line 25314
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 636; //@line 25317
    HEAP32[$AsyncCtx7 + 4 >> 2] = $3; //@line 25319
    sp = STACKTOP; //@line 25320
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 25323
    break;
   }
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 25327
   FUNCTION_TABLE_vii[$14 & 31]($11, $2); //@line 25328
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 635; //@line 25331
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 25333
    sp = STACKTOP; //@line 25334
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 25337
    break;
   }
  }
 } while (0);
 $17 = HEAP32[$3 >> 2] | 0; //@line 25342
 $20 = HEAP32[(HEAP32[$17 >> 2] | 0) + 76 >> 2] | 0; //@line 25345
 $AsyncCtx11 = _emscripten_alloc_async_context(4, sp) | 0; //@line 25346
 FUNCTION_TABLE_vi[$20 & 1023]($17); //@line 25347
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 637; //@line 25350
  sp = STACKTOP; //@line 25351
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 25354
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_224($0) {
 $0 = $0 | 0;
 var $14 = 0, $15 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 34818
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34820
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34822
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34824
 HEAP8[$2 + 1964 >> 0] = 0; //@line 34827
 HEAP32[$2 + 2256 >> 2] = 0; //@line 34829
 HEAP8[$2 + 2236 >> 0] = 0; //@line 34831
 HEAP16[$2 + 2282 >> 1] = 0; //@line 34833
 HEAP16[$2 + 2260 >> 1] = 0; //@line 34835
 HEAP8[$2 + 1932 >> 0] = 0; //@line 34837
 $14 = $2 + 1892 | 0; //@line 34838
 _memset($2 + 1975 | 0, 0, 259) | 0; //@line 34839
 $15 = HEAP32[$14 >> 2] | 0; //@line 34840
 if (!$15) {
  HEAP32[___async_retval >> 2] = -1011; //@line 34844
  return;
 }
 $19 = HEAP32[$2 + 2288 >> 2] | 0; //@line 34849
 $21 = HEAP32[$15 + 4 >> 2] | 0; //@line 34851
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 34852
 FUNCTION_TABLE_vii[$21 & 31]($6, $2 + 1880 | 0); //@line 34853
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 228; //@line 34856
  $22 = $ReallocAsyncCtx + 4 | 0; //@line 34857
  HEAP32[$22 >> 2] = $14; //@line 34858
  $23 = $ReallocAsyncCtx + 8 | 0; //@line 34859
  HEAP32[$23 >> 2] = $6; //@line 34860
  $24 = $ReallocAsyncCtx + 12 | 0; //@line 34861
  HEAP32[$24 >> 2] = $19; //@line 34862
  $25 = $ReallocAsyncCtx + 16 | 0; //@line 34863
  HEAP32[$25 >> 2] = $6; //@line 34864
  $26 = $ReallocAsyncCtx + 20 | 0; //@line 34865
  HEAP32[$26 >> 2] = $4; //@line 34866
  sp = STACKTOP; //@line 34867
  return;
 }
 ___async_unwind = 0; //@line 34870
 HEAP32[$ReallocAsyncCtx >> 2] = 228; //@line 34871
 $22 = $ReallocAsyncCtx + 4 | 0; //@line 34872
 HEAP32[$22 >> 2] = $14; //@line 34873
 $23 = $ReallocAsyncCtx + 8 | 0; //@line 34874
 HEAP32[$23 >> 2] = $6; //@line 34875
 $24 = $ReallocAsyncCtx + 12 | 0; //@line 34876
 HEAP32[$24 >> 2] = $19; //@line 34877
 $25 = $ReallocAsyncCtx + 16 | 0; //@line 34878
 HEAP32[$25 >> 2] = $6; //@line 34879
 $26 = $ReallocAsyncCtx + 20 | 0; //@line 34880
 HEAP32[$26 >> 2] = $4; //@line 34881
 sp = STACKTOP; //@line 34882
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_452($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 31651
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31653
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31655
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31659
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31663
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31665
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31667
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 31670
  __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 31671
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 470; //@line 31674
   $17 = $ReallocAsyncCtx5 + 4 | 0; //@line 31675
   HEAP32[$17 >> 2] = $12; //@line 31676
   $18 = $ReallocAsyncCtx5 + 8 | 0; //@line 31677
   HEAP32[$18 >> 2] = $14; //@line 31678
   sp = STACKTOP; //@line 31679
   return;
  }
  ___async_unwind = 0; //@line 31682
  HEAP32[$ReallocAsyncCtx5 >> 2] = 470; //@line 31683
  $17 = $ReallocAsyncCtx5 + 4 | 0; //@line 31684
  HEAP32[$17 >> 2] = $12; //@line 31685
  $18 = $ReallocAsyncCtx5 + 8 | 0; //@line 31686
  HEAP32[$18 >> 2] = $14; //@line 31687
  sp = STACKTOP; //@line 31688
  return;
 } else {
  _printf(13369, $4) | 0; //@line 31691
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 31692
  _printf(13382, $8) | 0; //@line 31693
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 31694
  _putchar(10) | 0; //@line 31695
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 471; //@line 31698
   $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 31699
   HEAP32[$19 >> 2] = $12; //@line 31700
   $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 31701
   HEAP32[$20 >> 2] = $14; //@line 31702
   sp = STACKTOP; //@line 31703
   return;
  }
  ___async_unwind = 0; //@line 31706
  HEAP32[$ReallocAsyncCtx2 >> 2] = 471; //@line 31707
  $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 31708
  HEAP32[$19 >> 2] = $12; //@line 31709
  $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 31710
  HEAP32[$20 >> 2] = $14; //@line 31711
  sp = STACKTOP; //@line 31712
  return;
 }
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_373($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $24 = 0, $28 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 18548
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18550
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18552
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18554
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 18559
  _mbed_assert_internal(12827, 12836, 217); //@line 18560
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 430; //@line 18563
   $9 = $ReallocAsyncCtx7 + 4 | 0; //@line 18564
   HEAP32[$9 >> 2] = $2; //@line 18565
   $10 = $ReallocAsyncCtx7 + 8 | 0; //@line 18566
   HEAP32[$10 >> 2] = $4; //@line 18567
   $11 = $ReallocAsyncCtx7 + 12 | 0; //@line 18568
   HEAP32[$11 >> 2] = $6; //@line 18569
   sp = STACKTOP; //@line 18570
   return;
  }
  ___async_unwind = 0; //@line 18573
  HEAP32[$ReallocAsyncCtx7 >> 2] = 430; //@line 18574
  $9 = $ReallocAsyncCtx7 + 4 | 0; //@line 18575
  HEAP32[$9 >> 2] = $2; //@line 18576
  $10 = $ReallocAsyncCtx7 + 8 | 0; //@line 18577
  HEAP32[$10 >> 2] = $4; //@line 18578
  $11 = $ReallocAsyncCtx7 + 12 | 0; //@line 18579
  HEAP32[$11 >> 2] = $6; //@line 18580
  sp = STACKTOP; //@line 18581
  return;
 }
 HEAP32[$4 + 364 >> 2] = 2; //@line 18585
 if (HEAP8[$4 + 373 >> 0] | 0) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 4; //@line 18593
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 4; //@line 18598
 if ((HEAP32[$6 >> 2] | 0) != 2) {
  $24 = $4 + 944 | 0; //@line 18602
  HEAP8[$24 >> 0] = HEAP8[$24 >> 0] | 32; //@line 18605
 }
 $28 = HEAP32[$4 + 356 >> 2] | 0; //@line 18608
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 18610
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($28, $4 + 996 | 0, 1); //@line 18611
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 433; //@line 18614
  sp = STACKTOP; //@line 18615
  return;
 }
 ___async_unwind = 0; //@line 18618
 HEAP32[$ReallocAsyncCtx3 >> 2] = 433; //@line 18619
 sp = STACKTOP; //@line 18620
 return;
}
function __ZN7LoRaMac14handle_rx_doneEPhtsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $12 = 0, $15 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 11124
 STACKTOP = STACKTOP + 16 | 0; //@line 11125
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11125
 $5 = sp; //@line 11126
 $7 = HEAP32[$0 + 1328 >> 2] | 0; //@line 11128
 $8 = $5 + 12 | 0; //@line 11129
 HEAP32[$5 >> 2] = 6; //@line 11130
 HEAP32[$5 + 4 >> 2] = 0; //@line 11132
 HEAP32[$5 + 8 >> 2] = $0; //@line 11134
 HEAP32[$8 >> 2] = 860; //@line 11135
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11136
 $9 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3_($7, $5, $1, $2, $3, $4) | 0; //@line 11137
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 369; //@line 11140
  HEAP32[$AsyncCtx3 + 4 >> 2] = $8; //@line 11142
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 11144
  sp = STACKTOP; //@line 11145
  STACKTOP = sp; //@line 11146
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11148
 $12 = HEAP32[$8 >> 2] | 0; //@line 11149
 do {
  if ($12 | 0) {
   $15 = HEAP32[$12 + 8 >> 2] | 0; //@line 11154
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 11155
   FUNCTION_TABLE_vi[$15 & 1023]($5); //@line 11156
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 370; //@line 11159
    HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 11161
    HEAP32[$AsyncCtx + 8 >> 2] = $9; //@line 11163
    sp = STACKTOP; //@line 11164
    STACKTOP = sp; //@line 11165
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 11167
    break;
   }
  }
 } while (0);
 if ($9 | 0) {
  STACKTOP = sp; //@line 11174
  return;
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11176
 _mbed_assert_internal(12827, 12836, 141); //@line 11177
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 371; //@line 11180
  sp = STACKTOP; //@line 11181
  STACKTOP = sp; //@line 11182
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 11184
 STACKTOP = sp; //@line 11185
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_216($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 34045
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34047
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34049
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34051
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34053
 $9 = $2 + 1892 | 0; //@line 34054
 $10 = HEAP32[$9 >> 2] | 0; //@line 34055
 if (!$10) {
  HEAP32[$4 >> 2] = 6; //@line 34058
  HEAP32[___async_retval >> 2] = -1014; //@line 34060
  return;
 }
 $14 = HEAP32[$2 + 2288 >> 2] | 0; //@line 34065
 $16 = HEAP32[$10 + 4 >> 2] | 0; //@line 34067
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(28) | 0; //@line 34068
 FUNCTION_TABLE_vii[$16 & 31]($6, $2 + 1880 | 0); //@line 34069
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 248; //@line 34072
  $17 = $ReallocAsyncCtx7 + 4 | 0; //@line 34073
  HEAP32[$17 >> 2] = $9; //@line 34074
  $18 = $ReallocAsyncCtx7 + 8 | 0; //@line 34075
  HEAP32[$18 >> 2] = $6; //@line 34076
  $19 = $ReallocAsyncCtx7 + 12 | 0; //@line 34077
  HEAP32[$19 >> 2] = $14; //@line 34078
  $20 = $ReallocAsyncCtx7 + 16 | 0; //@line 34079
  HEAP32[$20 >> 2] = $6; //@line 34080
  $21 = $ReallocAsyncCtx7 + 20 | 0; //@line 34081
  HEAP32[$21 >> 2] = $4; //@line 34082
  $22 = $ReallocAsyncCtx7 + 24 | 0; //@line 34083
  HEAP32[$22 >> 2] = $8; //@line 34084
  sp = STACKTOP; //@line 34085
  return;
 }
 ___async_unwind = 0; //@line 34088
 HEAP32[$ReallocAsyncCtx7 >> 2] = 248; //@line 34089
 $17 = $ReallocAsyncCtx7 + 4 | 0; //@line 34090
 HEAP32[$17 >> 2] = $9; //@line 34091
 $18 = $ReallocAsyncCtx7 + 8 | 0; //@line 34092
 HEAP32[$18 >> 2] = $6; //@line 34093
 $19 = $ReallocAsyncCtx7 + 12 | 0; //@line 34094
 HEAP32[$19 >> 2] = $14; //@line 34095
 $20 = $ReallocAsyncCtx7 + 16 | 0; //@line 34096
 HEAP32[$20 >> 2] = $6; //@line 34097
 $21 = $ReallocAsyncCtx7 + 20 | 0; //@line 34098
 HEAP32[$21 >> 2] = $4; //@line 34099
 $22 = $ReallocAsyncCtx7 + 24 | 0; //@line 34100
 HEAP32[$22 >> 2] = $8; //@line 34101
 sp = STACKTOP; //@line 34102
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_424($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 24021
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24023
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24025
 $5 = HEAP8[$2 >> 0] & -5; //@line 24027
 HEAP8[$2 >> 0] = $5; //@line 24028
 if (!($5 & 16)) {
  return;
 }
 HEAP8[$2 >> 0] = $5 & -17; //@line 24035
 $10 = HEAP32[$4 + 1324 >> 2] | 0; //@line 24037
 $11 = $10 + 48 | 0; //@line 24038
 $13 = __ZN11LoRaMacMlme14get_indicationEv($4 + 264 | 0) | 0; //@line 24040
 $14 = $10 + 60 | 0; //@line 24041
 $15 = HEAP32[$14 >> 2] | 0; //@line 24042
 if (!$15) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 24045
  _mbed_assert_internal(14997, 15002, 1102); //@line 24046
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 464; //@line 24049
   $17 = $ReallocAsyncCtx14 + 4 | 0; //@line 24050
   HEAP32[$17 >> 2] = $14; //@line 24051
   $18 = $ReallocAsyncCtx14 + 8 | 0; //@line 24052
   HEAP32[$18 >> 2] = $11; //@line 24053
   $19 = $ReallocAsyncCtx14 + 12 | 0; //@line 24054
   HEAP32[$19 >> 2] = $13; //@line 24055
   sp = STACKTOP; //@line 24056
   return;
  }
  ___async_unwind = 0; //@line 24059
  HEAP32[$ReallocAsyncCtx14 >> 2] = 464; //@line 24060
  $17 = $ReallocAsyncCtx14 + 4 | 0; //@line 24061
  HEAP32[$17 >> 2] = $14; //@line 24062
  $18 = $ReallocAsyncCtx14 + 8 | 0; //@line 24063
  HEAP32[$18 >> 2] = $11; //@line 24064
  $19 = $ReallocAsyncCtx14 + 12 | 0; //@line 24065
  HEAP32[$19 >> 2] = $13; //@line 24066
  sp = STACKTOP; //@line 24067
  return;
 } else {
  $20 = HEAP32[$15 >> 2] | 0; //@line 24070
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 24071
  FUNCTION_TABLE_vii[$20 & 31]($11, $13); //@line 24072
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 465; //@line 24075
   sp = STACKTOP; //@line 24076
   return;
  }
  ___async_unwind = 0; //@line 24079
  HEAP32[$ReallocAsyncCtx5 >> 2] = 465; //@line 24080
  sp = STACKTOP; //@line 24081
  return;
 }
}
function __ZN14lorawan_timersD2Ev__async_cb_455($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 32018
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32020
 $4 = HEAP32[$2 + 68 >> 2] | 0; //@line 32022
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 32027
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 32028
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 56 | 0); //@line 32029
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 338; //@line 32032
   $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 32033
   HEAP32[$9 >> 2] = $2; //@line 32034
   sp = STACKTOP; //@line 32035
   return;
  }
  ___async_unwind = 0; //@line 32038
  HEAP32[$ReallocAsyncCtx3 >> 2] = 338; //@line 32039
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 32040
  HEAP32[$9 >> 2] = $2; //@line 32041
  sp = STACKTOP; //@line 32042
  return;
 }
 $11 = HEAP32[$2 + 48 >> 2] | 0; //@line 32046
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 32051
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 32052
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 36 | 0); //@line 32053
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 339; //@line 32056
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 32057
   HEAP32[$16 >> 2] = $2; //@line 32058
   sp = STACKTOP; //@line 32059
   return;
  }
  ___async_unwind = 0; //@line 32062
  HEAP32[$ReallocAsyncCtx4 >> 2] = 339; //@line 32063
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 32064
  HEAP32[$16 >> 2] = $2; //@line 32065
  sp = STACKTOP; //@line 32066
  return;
 }
 $18 = HEAP32[$2 + 28 >> 2] | 0; //@line 32070
 if (!$18) {
  return;
 }
 $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 32077
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 32078
 FUNCTION_TABLE_vi[$22 & 1023]($2 + 16 | 0); //@line 32079
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 340; //@line 32082
  sp = STACKTOP; //@line 32083
  return;
 }
 ___async_unwind = 0; //@line 32086
 HEAP32[$ReallocAsyncCtx5 >> 2] = 340; //@line 32087
 sp = STACKTOP; //@line 32088
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_76($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23376
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23378
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23380
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23382
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23384
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23386
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23388
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23390
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23392
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23394
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23396
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 23398
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 23400
 $25 = $4 + 1088 | 0; //@line 23401
 HEAP32[$25 >> 2] = 0; //@line 23402
 HEAP32[$25 + 4 >> 2] = 0; //@line 23402
 HEAP32[$25 + 8 >> 2] = 0; //@line 23402
 HEAP32[$25 + 12 >> 2] = 0; //@line 23402
 HEAP8[$4 + 1104 >> 0] = 1; //@line 23404
 HEAP32[$2 >> 2] = 684; //@line 23405
 $27 = $4 + 1112 | 0; //@line 23406
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(52) | 0; //@line 23407
 __ZN4mbed10TimerEventC2Ev($27); //@line 23408
 if (!___async) {
  ___async_unwind = 0; //@line 23411
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 146; //@line 23413
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $27; //@line 23415
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 23417
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 23419
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 23421
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 23423
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 23425
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $14; //@line 23427
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $16; //@line 23429
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $18; //@line 23431
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $20; //@line 23433
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $22; //@line 23435
 HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $24; //@line 23437
 sp = STACKTOP; //@line 23438
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_75($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23306
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23308
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23310
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23312
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23314
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23316
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23318
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23320
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23322
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23324
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23326
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 23328
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 23330
 $25 = $4 + 1152 | 0; //@line 23331
 HEAP32[$25 >> 2] = 0; //@line 23332
 HEAP32[$25 + 4 >> 2] = 0; //@line 23332
 HEAP32[$25 + 8 >> 2] = 0; //@line 23332
 HEAP32[$25 + 12 >> 2] = 0; //@line 23332
 HEAP8[$4 + 1168 >> 0] = 1; //@line 23334
 HEAP32[$2 >> 2] = 684; //@line 23335
 $27 = $4 + 1176 | 0; //@line 23336
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(52) | 0; //@line 23337
 __ZN4mbed10TimerEventC2Ev($27); //@line 23338
 if (!___async) {
  ___async_unwind = 0; //@line 23341
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 147; //@line 23343
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $27; //@line 23345
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 23347
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 23349
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 23351
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 23353
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 23355
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 23357
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 23359
 HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 23361
 HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 23363
 HEAP32[$ReallocAsyncCtx2 + 44 >> 2] = $22; //@line 23365
 HEAP32[$ReallocAsyncCtx2 + 48 >> 2] = $24; //@line 23367
 sp = STACKTOP; //@line 23368
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_466($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 32808
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32810
 $4 = HEAP32[$2 + 44 >> 2] | 0; //@line 32812
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 32817
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 32818
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 32 | 0); //@line 32819
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 333; //@line 32822
   $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 32823
   HEAP32[$9 >> 2] = $2; //@line 32824
   sp = STACKTOP; //@line 32825
   return;
  }
  ___async_unwind = 0; //@line 32828
  HEAP32[$ReallocAsyncCtx5 >> 2] = 333; //@line 32829
  $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 32830
  HEAP32[$9 >> 2] = $2; //@line 32831
  sp = STACKTOP; //@line 32832
  return;
 }
 $11 = HEAP32[$2 + 28 >> 2] | 0; //@line 32836
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 32841
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 32842
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 16 | 0); //@line 32843
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 334; //@line 32846
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 32847
   HEAP32[$16 >> 2] = $2; //@line 32848
   sp = STACKTOP; //@line 32849
   return;
  }
  ___async_unwind = 0; //@line 32852
  HEAP32[$ReallocAsyncCtx6 >> 2] = 334; //@line 32853
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 32854
  HEAP32[$16 >> 2] = $2; //@line 32855
  sp = STACKTOP; //@line 32856
  return;
 }
 $18 = HEAP32[$2 + 12 >> 2] | 0; //@line 32860
 if (!$18) {
  return;
 }
 $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 32866
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 32867
 FUNCTION_TABLE_vi[$21 & 1023]($2); //@line 32868
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 335; //@line 32871
  sp = STACKTOP; //@line 32872
  return;
 }
 ___async_unwind = 0; //@line 32875
 HEAP32[$ReallocAsyncCtx7 >> 2] = 335; //@line 32876
 sp = STACKTOP; //@line 32877
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_74($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 23236
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23238
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23240
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23242
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23244
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23246
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23248
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23250
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23252
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23254
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23256
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 23258
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 23260
 $25 = $4 + 1216 | 0; //@line 23261
 HEAP32[$25 >> 2] = 0; //@line 23262
 HEAP32[$25 + 4 >> 2] = 0; //@line 23262
 HEAP32[$25 + 8 >> 2] = 0; //@line 23262
 HEAP32[$25 + 12 >> 2] = 0; //@line 23262
 HEAP8[$4 + 1232 >> 0] = 1; //@line 23264
 HEAP32[$2 >> 2] = 684; //@line 23265
 $27 = $4 + 1240 | 0; //@line 23266
 $ReallocAsyncCtx = _emscripten_realloc_async_context(52) | 0; //@line 23267
 __ZN4mbed10TimerEventC2Ev($27); //@line 23268
 if (!___async) {
  ___async_unwind = 0; //@line 23271
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 148; //@line 23273
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $27; //@line 23275
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 23277
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 23279
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 23281
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 23283
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 23285
 HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 23287
 HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 23289
 HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 23291
 HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 23293
 HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 23295
 HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 23297
 sp = STACKTOP; //@line 23298
 return;
}
function _equeue_alloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$037$sink$i = 0, $$03741$i = 0, $$1$i9 = 0, $12 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, label = 0;
 $3 = $1 + 39 & -4; //@line 4376
 $4 = $0 + 156 | 0; //@line 4377
 _equeue_mutex_lock($4); //@line 4378
 $5 = $0 + 24 | 0; //@line 4379
 $6 = HEAP32[$5 >> 2] | 0; //@line 4380
 L1 : do {
  if (!$6) {
   label = 7; //@line 4384
  } else {
   $$03741$i = $5; //@line 4386
   $9 = $6; //@line 4386
   while (1) {
    if ((HEAP32[$9 >> 2] | 0) >>> 0 >= $3 >>> 0) {
     break;
    }
    $15 = $9 + 8 | 0; //@line 4393
    $16 = HEAP32[$15 >> 2] | 0; //@line 4394
    if (!$16) {
     label = 7; //@line 4397
     break L1;
    } else {
     $$03741$i = $15; //@line 4400
     $9 = $16; //@line 4400
    }
   }
   $12 = HEAP32[$9 + 12 >> 2] | 0; //@line 4404
   if (!$12) {
    $$037$sink$i = $$03741$i; //@line 4407
   } else {
    HEAP32[$$03741$i >> 2] = $12; //@line 4409
    $$037$sink$i = $12 + 8 | 0; //@line 4411
   }
   HEAP32[$$037$sink$i >> 2] = HEAP32[$9 + 8 >> 2]; //@line 4415
   _equeue_mutex_unlock($4); //@line 4416
   $$1$i9 = $9; //@line 4417
  }
 } while (0);
 do {
  if ((label | 0) == 7) {
   $18 = $0 + 28 | 0; //@line 4422
   $19 = HEAP32[$18 >> 2] | 0; //@line 4423
   if ($19 >>> 0 < $3 >>> 0) {
    _equeue_mutex_unlock($4); //@line 4426
    $$0 = 0; //@line 4427
    return $$0 | 0; //@line 4428
   } else {
    $21 = $0 + 32 | 0; //@line 4430
    $22 = HEAP32[$21 >> 2] | 0; //@line 4431
    HEAP32[$21 >> 2] = $22 + $3; //@line 4433
    HEAP32[$18 >> 2] = $19 - $3; //@line 4435
    HEAP32[$22 >> 2] = $3; //@line 4436
    HEAP8[$22 + 4 >> 0] = 1; //@line 4438
    _equeue_mutex_unlock($4); //@line 4439
    if (!$22) {
     $$0 = 0; //@line 4442
    } else {
     $$1$i9 = $22; //@line 4444
     break;
    }
    return $$0 | 0; //@line 4447
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 4452
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 4454
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 4456
 $$0 = $$1$i9 + 36 | 0; //@line 4458
 return $$0 | 0; //@line 4459
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb_80($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 23668
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23670
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 23672
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23674
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23676
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23678
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 23681
  $11 = _mbedtls_cipher_cmac_starts(21844, $2, 128) | 0; //@line 23682
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 588; //@line 23685
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 23686
   HEAP16[$12 >> 1] = $4; //@line 23687
   $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 23688
   HEAP32[$13 >> 2] = $6; //@line 23689
   $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 23690
   HEAP32[$14 >> 2] = $8; //@line 23691
   sp = STACKTOP; //@line 23692
   return;
  }
  HEAP32[___async_retval >> 2] = $11; //@line 23696
  ___async_unwind = 0; //@line 23697
  HEAP32[$ReallocAsyncCtx3 >> 2] = 588; //@line 23698
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 23699
  HEAP16[$12 >> 1] = $4; //@line 23700
  $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 23701
  HEAP32[$13 >> 2] = $6; //@line 23702
  $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 23703
  HEAP32[$14 >> 2] = $8; //@line 23704
  sp = STACKTOP; //@line 23705
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 23708
  _mbedtls_cipher_free(21844); //@line 23709
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 591; //@line 23712
   $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 23713
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 23714
   sp = STACKTOP; //@line 23715
   return;
  }
  ___async_unwind = 0; //@line 23718
  HEAP32[$ReallocAsyncCtx5 >> 2] = 591; //@line 23719
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 23720
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 23721
  sp = STACKTOP; //@line 23722
  return;
 }
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_106($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 24774
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24776
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24778
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24780
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24782
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24784
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 24787
  $11 = _mbedtls_cipher_cmac_starts(21844, $6, 128) | 0; //@line 24788
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 582; //@line 24791
   $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 24792
   HEAP32[$12 >> 2] = $2; //@line 24793
   $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 24794
   HEAP32[$13 >> 2] = $4; //@line 24795
   $14 = $ReallocAsyncCtx4 + 12 | 0; //@line 24796
   HEAP32[$14 >> 2] = $8; //@line 24797
   sp = STACKTOP; //@line 24798
   return;
  }
  HEAP32[___async_retval >> 2] = $11; //@line 24802
  ___async_unwind = 0; //@line 24803
  HEAP32[$ReallocAsyncCtx4 >> 2] = 582; //@line 24804
  $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 24805
  HEAP32[$12 >> 2] = $2; //@line 24806
  $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 24807
  HEAP32[$13 >> 2] = $4; //@line 24808
  $14 = $ReallocAsyncCtx4 + 12 | 0; //@line 24809
  HEAP32[$14 >> 2] = $8; //@line 24810
  sp = STACKTOP; //@line 24811
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 24814
  _mbedtls_cipher_free(21844); //@line 24815
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 586; //@line 24818
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 24819
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 24820
   sp = STACKTOP; //@line 24821
   return;
  }
  ___async_unwind = 0; //@line 24824
  HEAP32[$ReallocAsyncCtx6 >> 2] = 586; //@line 24825
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 24826
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 24827
  sp = STACKTOP; //@line 24828
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_175($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 31826
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31830
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31832
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31834
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31836
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31838
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31840
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31842
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 31845
 $18 = $4 + 16 | 0; //@line 31846
 HEAP32[$18 >> 2] = HEAP32[$6 >> 2]; //@line 31847
 HEAP32[$18 + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 31847
 HEAP8[$18 + 8 >> 0] = HEAP8[$6 + 8 >> 0] | 0; //@line 31847
 _equeue_event_dtor($4, 399); //@line 31848
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 31849
 $19 = _equeue_post($8, 400, $4) | 0; //@line 31850
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 401; //@line 31853
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 31854
  HEAP32[$20 >> 2] = $10; //@line 31855
  $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 31856
  HEAP32[$21 >> 2] = $12; //@line 31857
  $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 31858
  HEAP32[$22 >> 2] = $14; //@line 31859
  $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 31860
  HEAP32[$23 >> 2] = $16; //@line 31861
  sp = STACKTOP; //@line 31862
  return;
 }
 HEAP32[___async_retval >> 2] = $19; //@line 31866
 ___async_unwind = 0; //@line 31867
 HEAP32[$ReallocAsyncCtx6 >> 2] = 401; //@line 31868
 $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 31869
 HEAP32[$20 >> 2] = $10; //@line 31870
 $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 31871
 HEAP32[$21 >> 2] = $12; //@line 31872
 $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 31873
 HEAP32[$22 >> 2] = $14; //@line 31874
 $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 31875
 HEAP32[$23 >> 2] = $16; //@line 31876
 sp = STACKTOP; //@line 31877
 return;
}
function __ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh__async_cb_268($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$031 = 0.0, $12 = 0, $14 = 0, $18 = 0, $22 = 0.0, $4 = 0, $57 = 0.0, $67 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1679
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1683
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1687
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1691
 $14 = HEAP8[$0 + 28 >> 0] | 0; //@line 1693
 switch (HEAP32[$0 + 4 >> 2] | 0) {
 case 0:
  {
   $$0 = 1; //@line 1696
   break;
  }
 case 1:
  {
   switch (HEAP32[$12 + 752 >> 2] | 0) {
   case 7:
    {
     $$031 = 125.0e3; //@line 1704
     break;
    }
   case 8:
    {
     $$031 = 25.0e4; //@line 1708
     break;
    }
   case 9:
    {
     $$031 = 5.0e5; //@line 1712
     break;
    }
   default:
    {
     $$031 = 0.0; //@line 1716
    }
   }
   $18 = HEAP32[$12 + 756 >> 2] | 0; //@line 1720
   $22 = 1.0 / ($$031 / +(1 << $18 | 0)); //@line 1724
   $57 = +Math_ceil(+(+(((($14 & 255) << 3) + 28 - ($18 << 2) + (HEAP8[$12 + 766 >> 0] << 4 & 255) + (HEAP8[$12 + 764 >> 0] | 0 ? -20 : 0) | 0) >>> 0) / +($18 - (HEAP8[$12 + 760 >> 0] | 0 ? 2 : 0) << 2 >>> 0))) * +((HEAPU8[$12 + 761 >> 0] | 0) + 4 | 0); //@line 1760
   $$0 = ~~+Math_floor(+(((+(HEAPU16[$12 + 762 >> 1] | 0) + 4.25) * $22 + $22 * (($57 > 0.0 ? $57 : 0.0) + 8.0)) * 1.0e3 + .999)) >>> 0; //@line 1770
   break;
  }
 default:
  {
   $$0 = 0; //@line 1774
  }
 }
 _printf(10880, $4) | 0; //@line 1777
 HEAP32[$8 >> 2] = $$0; //@line 1778
 _printf(11089, $8) | 0; //@line 1779
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 1780
 _putchar(10) | 0; //@line 1781
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 87; //@line 1784
  $67 = $ReallocAsyncCtx + 4 | 0; //@line 1785
  HEAP32[$67 >> 2] = $$0; //@line 1786
  sp = STACKTOP; //@line 1787
  return;
 }
 ___async_unwind = 0; //@line 1790
 HEAP32[$ReallocAsyncCtx >> 2] = 87; //@line 1791
 $67 = $ReallocAsyncCtx + 4 | 0; //@line 1792
 HEAP32[$67 >> 2] = $$0; //@line 1793
 sp = STACKTOP; //@line 1794
 return;
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_105($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 24714
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24716
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24718
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24720
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24722
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 24725
  $9 = _mbedtls_cipher_cmac_update(21844, 13564, 16) | 0; //@line 24726
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 583; //@line 24729
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 24730
   HEAP32[$10 >> 2] = $2; //@line 24731
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 24732
   HEAP32[$11 >> 2] = $4; //@line 24733
   $12 = $ReallocAsyncCtx2 + 12 | 0; //@line 24734
   HEAP32[$12 >> 2] = $6; //@line 24735
   sp = STACKTOP; //@line 24736
   return;
  }
  HEAP32[___async_retval >> 2] = $9; //@line 24740
  ___async_unwind = 0; //@line 24741
  HEAP32[$ReallocAsyncCtx2 >> 2] = 583; //@line 24742
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 24743
  HEAP32[$10 >> 2] = $2; //@line 24744
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 24745
  HEAP32[$11 >> 2] = $4; //@line 24746
  $12 = $ReallocAsyncCtx2 + 12 | 0; //@line 24747
  HEAP32[$12 >> 2] = $6; //@line 24748
  sp = STACKTOP; //@line 24749
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 24752
  _mbedtls_cipher_free(21844); //@line 24753
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 586; //@line 24756
   $14 = $ReallocAsyncCtx6 + 4 | 0; //@line 24757
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 24758
   sp = STACKTOP; //@line 24759
   return;
  }
  ___async_unwind = 0; //@line 24762
  HEAP32[$ReallocAsyncCtx6 >> 2] = 586; //@line 24763
  $14 = $ReallocAsyncCtx6 + 4 | 0; //@line 24764
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 24765
  sp = STACKTOP; //@line 24766
  return;
 }
}
function __ZN16SX1276_LoRaRadio5sleepEv($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx9 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 125
 STACKTOP = STACKTOP + 32 | 0; //@line 126
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 126
 $vararg_buffer5 = sp + 24 | 0; //@line 127
 $vararg_buffer3 = sp + 16 | 0; //@line 128
 _printf(10880, sp) | 0; //@line 131
 _printf(11539, sp + 8 | 0) | 0; //@line 132
 $AsyncCtx9 = _emscripten_alloc_async_context(24, sp) | 0; //@line 133
 _putchar(10) | 0; //@line 134
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 50; //@line 137
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 139
  HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer3; //@line 141
  HEAP32[$AsyncCtx9 + 12 >> 2] = $vararg_buffer3; //@line 143
  HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer5; //@line 145
  HEAP32[$AsyncCtx9 + 20 >> 2] = $vararg_buffer5; //@line 147
  sp = STACKTOP; //@line 148
  STACKTOP = sp; //@line 149
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 151
 __ZN4mbed6Ticker6detachEv($0 + 1048 | 0); //@line 153
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 155
 _printf(10880, $vararg_buffer3) | 0; //@line 156
 HEAP32[$vararg_buffer5 >> 2] = 0; //@line 157
 _printf(10946, $vararg_buffer5) | 0; //@line 158
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 159
 _putchar(10) | 0; //@line 160
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 51; //@line 163
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 165
  sp = STACKTOP; //@line 166
  STACKTOP = sp; //@line 167
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 169
 $AsyncCtx12 = _emscripten_alloc_async_context(4, sp) | 0; //@line 170
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 171
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 52; //@line 174
  sp = STACKTOP; //@line 175
  STACKTOP = sp; //@line 176
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx12 | 0); //@line 178
  STACKTOP = sp; //@line 179
  return;
 }
}
function __ZN16SX1276_LoRaRadio7standbyEv__async_cb_71($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23045
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23047
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23049
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23053
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23057
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23059
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23061
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23063
 __ZN4mbed6Ticker6detachEv($2 + 1048 | 0); //@line 23065
 __ZN4mbed6Ticker6detachEv($2 + 1112 | 0); //@line 23067
 _printf(10880, $4) | 0; //@line 23068
 HEAP32[$8 >> 2] = 1; //@line 23069
 _printf(10946, $8) | 0; //@line 23070
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 23071
 _putchar(10) | 0; //@line 23072
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 54; //@line 23075
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 23076
  HEAP32[$21 >> 2] = $2; //@line 23077
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 23078
  HEAP32[$22 >> 2] = $12; //@line 23079
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 23080
  HEAP32[$23 >> 2] = $14; //@line 23081
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 23082
  HEAP32[$24 >> 2] = $16; //@line 23083
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 23084
  HEAP32[$25 >> 2] = $18; //@line 23085
  sp = STACKTOP; //@line 23086
  return;
 }
 ___async_unwind = 0; //@line 23089
 HEAP32[$ReallocAsyncCtx2 >> 2] = 54; //@line 23090
 $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 23091
 HEAP32[$21 >> 2] = $2; //@line 23092
 $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 23093
 HEAP32[$22 >> 2] = $12; //@line 23094
 $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 23095
 HEAP32[$23 >> 2] = $14; //@line 23096
 $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 23097
 HEAP32[$24 >> 2] = $16; //@line 23098
 $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 23099
 HEAP32[$25 >> 2] = $18; //@line 23100
 sp = STACKTOP; //@line 23101
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_386($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19641
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19643
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19645
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19651
 if ((HEAP32[$2 + 360 >> 2] | 0) == 2) {
  _printf(12943, HEAP32[$0 + 12 >> 2] | 0) | 0; //@line 19658
  _printf(12970, $10) | 0; //@line 19659
  $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 19660
  _putchar(10) | 0; //@line 19661
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 439; //@line 19664
   $18 = $ReallocAsyncCtx + 4 | 0; //@line 19665
   HEAP32[$18 >> 2] = $2; //@line 19666
   $19 = $ReallocAsyncCtx + 8 | 0; //@line 19667
   HEAP32[$19 >> 2] = $4; //@line 19668
   $20 = $ReallocAsyncCtx + 12 | 0; //@line 19669
   HEAP32[$20 >> 2] = $4; //@line 19670
   sp = STACKTOP; //@line 19671
   return;
  }
  ___async_unwind = 0; //@line 19674
  HEAP32[$ReallocAsyncCtx >> 2] = 439; //@line 19675
  $18 = $ReallocAsyncCtx + 4 | 0; //@line 19676
  HEAP32[$18 >> 2] = $2; //@line 19677
  $19 = $ReallocAsyncCtx + 8 | 0; //@line 19678
  HEAP32[$19 >> 2] = $4; //@line 19679
  $20 = $ReallocAsyncCtx + 12 | 0; //@line 19680
  HEAP32[$20 >> 2] = $4; //@line 19681
  sp = STACKTOP; //@line 19682
  return;
 } else {
  $16 = HEAP32[$2 >> 2] | 0; //@line 19685
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 19686
  __ZN7LoRaPHY18put_radio_to_sleepEv($16); //@line 19687
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 438; //@line 19690
   $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 19691
   HEAP32[$17 >> 2] = $2; //@line 19692
   sp = STACKTOP; //@line 19693
   return;
  }
  ___async_unwind = 0; //@line 19696
  HEAP32[$ReallocAsyncCtx3 >> 2] = 438; //@line 19697
  $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 19698
  HEAP32[$17 >> 2] = $2; //@line 19699
  sp = STACKTOP; //@line 19700
  return;
 }
}
function _mbed_error_printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $$09$i = 0, $1 = 0, $12 = 0, $18 = 0, $2 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6452
 STACKTOP = STACKTOP + 144 | 0; //@line 6453
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144); //@line 6453
 $1 = sp + 16 | 0; //@line 6454
 $2 = sp; //@line 6455
 HEAP32[$2 >> 2] = $varargs; //@line 6456
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 6457
 $3 = _vsnprintf($1, 128, $0, $2) | 0; //@line 6458
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 717; //@line 6461
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 6463
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 6465
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 6467
  sp = STACKTOP; //@line 6468
  STACKTOP = sp; //@line 6469
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6471
 if (($3 | 0) <= 0) {
  STACKTOP = sp; //@line 6474
  return;
 }
 if (!(HEAP32[5549] | 0)) {
  _serial_init(22200, 2, 3); //@line 6479
  $$09$i = 0; //@line 6480
 } else {
  $$09$i = 0; //@line 6482
 }
 while (1) {
  $12 = HEAP8[$1 + $$09$i >> 0] | 0; //@line 6487
  $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6488
  _serial_putc(22200, $12); //@line 6489
  if (___async) {
   label = 7; //@line 6492
   break;
  }
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6495
  $18 = $$09$i + 1 | 0; //@line 6496
  if (($18 | 0) == ($3 | 0)) {
   label = 9; //@line 6499
   break;
  } else {
   $$09$i = $18; //@line 6502
  }
 }
 if ((label | 0) == 7) {
  HEAP32[$AsyncCtx2 >> 2] = 718; //@line 6506
  HEAP32[$AsyncCtx2 + 4 >> 2] = $$09$i; //@line 6508
  HEAP32[$AsyncCtx2 + 8 >> 2] = $3; //@line 6510
  HEAP32[$AsyncCtx2 + 12 >> 2] = $1; //@line 6512
  HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 6514
  HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 6516
  sp = STACKTOP; //@line 6517
  STACKTOP = sp; //@line 6518
  return;
 } else if ((label | 0) == 9) {
  STACKTOP = sp; //@line 6521
  return;
 }
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb_64($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 22621
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22623
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22625
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22631
 if ((HEAP32[$2 + 360 >> 2] | 0) == 2) {
  _printf(12943, HEAP32[$0 + 12 >> 2] | 0) | 0; //@line 22638
  _printf(12970, $10) | 0; //@line 22639
  $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 22640
  _putchar(10) | 0; //@line 22641
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 419; //@line 22644
   $16 = $ReallocAsyncCtx + 4 | 0; //@line 22645
   HEAP32[$16 >> 2] = $2; //@line 22646
   $17 = $ReallocAsyncCtx + 8 | 0; //@line 22647
   HEAP32[$17 >> 2] = $4; //@line 22648
   $18 = $ReallocAsyncCtx + 12 | 0; //@line 22649
   HEAP32[$18 >> 2] = $4; //@line 22650
   sp = STACKTOP; //@line 22651
   return;
  }
  ___async_unwind = 0; //@line 22654
  HEAP32[$ReallocAsyncCtx >> 2] = 419; //@line 22655
  $16 = $ReallocAsyncCtx + 4 | 0; //@line 22656
  HEAP32[$16 >> 2] = $2; //@line 22657
  $17 = $ReallocAsyncCtx + 8 | 0; //@line 22658
  HEAP32[$17 >> 2] = $4; //@line 22659
  $18 = $ReallocAsyncCtx + 12 | 0; //@line 22660
  HEAP32[$18 >> 2] = $4; //@line 22661
  sp = STACKTOP; //@line 22662
  return;
 } else {
  $19 = HEAP32[$2 >> 2] | 0; //@line 22665
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 22666
  __ZN7LoRaPHY18put_radio_to_sleepEv($19); //@line 22667
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 422; //@line 22670
   $20 = $ReallocAsyncCtx3 + 4 | 0; //@line 22671
   HEAP32[$20 >> 2] = $2; //@line 22672
   sp = STACKTOP; //@line 22673
   return;
  }
  ___async_unwind = 0; //@line 22676
  HEAP32[$ReallocAsyncCtx3 >> 2] = 422; //@line 22677
  $20 = $ReallocAsyncCtx3 + 4 | 0; //@line 22678
  HEAP32[$20 >> 2] = $2; //@line 22679
  sp = STACKTOP; //@line 22680
  return;
 }
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 30285
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30287
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30289
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30291
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30293
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30295
 HEAP8[$2 + 1097 >> 0] = HEAP8[___async_retval >> 0] | 0; //@line 30299
 HEAP8[$4 >> 0] = 0; //@line 30300
 HEAP8[$6 >> 0] = HEAP8[$2 + 1156 >> 0] << 7; //@line 30304
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 30305
 $16 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($2, $4, $6, 0, 0, 0) | 0; //@line 30306
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 537; //@line 30309
  $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 30310
  HEAP32[$17 >> 2] = $2; //@line 30311
  $18 = $ReallocAsyncCtx3 + 8 | 0; //@line 30312
  HEAP32[$18 >> 2] = $8; //@line 30313
  $19 = $ReallocAsyncCtx3 + 12 | 0; //@line 30314
  HEAP32[$19 >> 2] = $6; //@line 30315
  $20 = $ReallocAsyncCtx3 + 16 | 0; //@line 30316
  HEAP32[$20 >> 2] = $4; //@line 30317
  $21 = $ReallocAsyncCtx3 + 20 | 0; //@line 30318
  HEAP32[$21 >> 2] = $10; //@line 30319
  sp = STACKTOP; //@line 30320
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 30324
 ___async_unwind = 0; //@line 30325
 HEAP32[$ReallocAsyncCtx3 >> 2] = 537; //@line 30326
 $17 = $ReallocAsyncCtx3 + 4 | 0; //@line 30327
 HEAP32[$17 >> 2] = $2; //@line 30328
 $18 = $ReallocAsyncCtx3 + 8 | 0; //@line 30329
 HEAP32[$18 >> 2] = $8; //@line 30330
 $19 = $ReallocAsyncCtx3 + 12 | 0; //@line 30331
 HEAP32[$19 >> 2] = $6; //@line 30332
 $20 = $ReallocAsyncCtx3 + 16 | 0; //@line 30333
 HEAP32[$20 >> 2] = $4; //@line 30334
 $21 = $ReallocAsyncCtx3 + 20 | 0; //@line 30335
 HEAP32[$21 >> 2] = $10; //@line 30336
 sp = STACKTOP; //@line 30337
 return;
}
function __ZN16SX1276_LoRaRadio18set_public_networkEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 1439
 STACKTOP = STACKTOP + 32 | 0; //@line 1440
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 1440
 $vararg_buffer5 = sp + 24 | 0; //@line 1441
 $vararg_buffer3 = sp + 16 | 0; //@line 1442
 $vararg_buffer1 = sp + 8 | 0; //@line 1443
 $2 = $1 & 1; //@line 1445
 $3 = $0 + 689 | 0; //@line 1446
 HEAP8[$3 >> 0] = 1; //@line 1447
 _printf(10880, sp) | 0; //@line 1448
 HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$3 >> 0]; //@line 1451
 _printf(11055, $vararg_buffer1) | 0; //@line 1452
 $AsyncCtx10 = _emscripten_alloc_async_context(32, sp) | 0; //@line 1453
 _putchar(10) | 0; //@line 1454
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 84; //@line 1457
  HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 1459
  HEAP8[$AsyncCtx10 + 8 >> 0] = $2; //@line 1461
  HEAP32[$AsyncCtx10 + 12 >> 2] = $vararg_buffer3; //@line 1463
  HEAP32[$AsyncCtx10 + 16 >> 2] = $vararg_buffer3; //@line 1465
  HEAP8[$AsyncCtx10 + 20 >> 0] = $1 & 1; //@line 1468
  HEAP32[$AsyncCtx10 + 24 >> 2] = $vararg_buffer5; //@line 1470
  HEAP32[$AsyncCtx10 + 28 >> 2] = $vararg_buffer5; //@line 1472
  sp = STACKTOP; //@line 1473
  STACKTOP = sp; //@line 1474
  return;
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 1476
 HEAP8[$0 + 776 >> 0] = $2; //@line 1478
 _printf(10880, $vararg_buffer3) | 0; //@line 1479
 HEAP32[$vararg_buffer5 >> 2] = $1 & 1; //@line 1481
 _printf(11112, $vararg_buffer5) | 0; //@line 1482
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1483
 _putchar(10) | 0; //@line 1484
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 85; //@line 1487
  sp = STACKTOP; //@line 1488
  STACKTOP = sp; //@line 1489
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1491
  STACKTOP = sp; //@line 1492
  return;
 }
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_413($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $20 = 0, $26 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 21855
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21857
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21861
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21863
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21865
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21867
 HEAP8[$2 + 376 >> 0] = (HEAP32[$0 + 8 >> 2] | 0) == 0 & (HEAP8[$2 + 944 >> 0] & 8) != 0 & 1; //@line 21876
 $20 = HEAP8[$2 + 378 >> 0] | 0; //@line 21878
 HEAP8[$2 + 379 >> 0] = $20; //@line 21880
 HEAP8[$6 >> 0] = $20; //@line 21881
 HEAP8[$8 + 1 >> 0] = HEAP8[$2 + 372 >> 0] | 0; //@line 21885
 HEAP32[$8 + 4 >> 2] = $10; //@line 21887
 $26 = HEAP32[$2 >> 2] | 0; //@line 21888
 $29 = HEAP32[(HEAP32[$26 >> 2] | 0) + 12 >> 2] | 0; //@line 21891
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 21892
 FUNCTION_TABLE_vii[$29 & 31]($26, $8); //@line 21893
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 353; //@line 21896
  $30 = $ReallocAsyncCtx + 4 | 0; //@line 21897
  HEAP32[$30 >> 2] = $2; //@line 21898
  $31 = $ReallocAsyncCtx + 8 | 0; //@line 21899
  HEAP32[$31 >> 2] = $10; //@line 21900
  $32 = $ReallocAsyncCtx + 12 | 0; //@line 21901
  HEAP32[$32 >> 2] = $12; //@line 21902
  $33 = $ReallocAsyncCtx + 16 | 0; //@line 21903
  HEAP32[$33 >> 2] = $6; //@line 21904
  sp = STACKTOP; //@line 21905
  return;
 }
 ___async_unwind = 0; //@line 21908
 HEAP32[$ReallocAsyncCtx >> 2] = 353; //@line 21909
 $30 = $ReallocAsyncCtx + 4 | 0; //@line 21910
 HEAP32[$30 >> 2] = $2; //@line 21911
 $31 = $ReallocAsyncCtx + 8 | 0; //@line 21912
 HEAP32[$31 >> 2] = $10; //@line 21913
 $32 = $ReallocAsyncCtx + 12 | 0; //@line 21914
 HEAP32[$32 >> 2] = $12; //@line 21915
 $33 = $ReallocAsyncCtx + 16 | 0; //@line 21916
 HEAP32[$33 >> 2] = $6; //@line 21917
 sp = STACKTOP; //@line 21918
 return;
}
function __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$01315 = 0, $$016 = 0, $$1 = 0, $$114 = 0, $$sink = 0, $2 = 0, $23 = 0, $26 = 0, $27 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = HEAP8[$0 + 2 >> 0] | 0; //@line 19807
 if (!($2 << 24 >> 24)) {
  $$0$lcssa = 0; //@line 19810
  $26 = $$0$lcssa << 24 >> 24 != 0; //@line 19811
  $$sink = $26 & 1; //@line 19812
  HEAP8[$0 >> 0] = $$sink; //@line 19813
  $27 = $0 + 3 | 0; //@line 19814
  HEAP8[$27 >> 0] = $$0$lcssa; //@line 19815
  return;
 } else {
  $$01315 = 0; //@line 19818
  $$016 = 0; //@line 19818
  $5 = 0; //@line 19818
 }
 while (1) {
  $6 = HEAP8[$0 + 4 + $5 >> 0] | 0; //@line 19822
  switch ($6 << 24 >> 24) {
  case 5:
  case 10:
   {
    $7 = $$01315 + 1 << 24 >> 24; //@line 19825
    HEAP8[($$016 & 255) + ($0 + 132) >> 0] = $6; //@line 19829
    HEAP8[($$016 + 1 & 255) + ($0 + 132) >> 0] = HEAP8[($7 & 255) + ($0 + 4) >> 0] | 0; //@line 19836
    $$1 = $$016 + 2 << 24 >> 24; //@line 19837
    $$114 = $7; //@line 19837
    break;
   }
  case 8:
   {
    HEAP8[($$016 & 255) + ($0 + 132) >> 0] = 8; //@line 19844
    $$1 = $$016 + 1 << 24 >> 24; //@line 19845
    $$114 = $$01315; //@line 19845
    break;
   }
  case 6:
   {
    $$1 = $$016; //@line 19851
    $$114 = $5 + 2 & 255; //@line 19851
    break;
   }
  case 7:
  case 3:
   {
    $$1 = $$016; //@line 19856
    $$114 = $$01315 + 1 << 24 >> 24; //@line 19856
    break;
   }
  default:
   {
    $$1 = $$016; //@line 19860
    $$114 = $$01315; //@line 19860
   }
  }
  $23 = $$114 + 1 << 24 >> 24; //@line 19863
  if (($23 & 255) < ($2 & 255)) {
   $$01315 = $23; //@line 19867
   $$016 = $$1; //@line 19867
   $5 = $23 & 255; //@line 19867
  } else {
   $$0$lcssa = $$1; //@line 19869
   break;
  }
 }
 $26 = $$0$lcssa << 24 >> 24 != 0; //@line 19873
 $$sink = $26 & 1; //@line 19874
 HEAP8[$0 >> 0] = $$sink; //@line 19875
 $27 = $0 + 3 | 0; //@line 19876
 HEAP8[$27 >> 0] = $$0$lcssa; //@line 19877
 return;
}
function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $10 = 0, $12 = 0, $14 = 0, $22 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $9 = 0, label = 0;
 $3 = $2 + 16 | 0; //@line 10653
 $4 = HEAP32[$3 >> 2] | 0; //@line 10654
 if (!$4) {
  if (!(___towrite($2) | 0)) {
   $12 = HEAP32[$3 >> 2] | 0; //@line 10661
   label = 5; //@line 10662
  } else {
   $$1 = 0; //@line 10664
  }
 } else {
  $12 = $4; //@line 10668
  label = 5; //@line 10669
 }
 L5 : do {
  if ((label | 0) == 5) {
   $9 = $2 + 20 | 0; //@line 10673
   $10 = HEAP32[$9 >> 2] | 0; //@line 10674
   $14 = $10; //@line 10677
   if (($12 - $10 | 0) >>> 0 < $1 >>> 0) {
    $$1 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 15]($2, $0, $1) | 0; //@line 10682
    break;
   }
   L10 : do {
    if ((HEAP8[$2 + 75 >> 0] | 0) > -1) {
     $$038 = $1; //@line 10690
     while (1) {
      if (!$$038) {
       $$139 = 0; //@line 10694
       $$141 = $0; //@line 10694
       $$143 = $1; //@line 10694
       $31 = $14; //@line 10694
       break L10;
      }
      $22 = $$038 + -1 | 0; //@line 10697
      if ((HEAP8[$0 + $22 >> 0] | 0) == 10) {
       break;
      } else {
       $$038 = $22; //@line 10704
      }
     }
     $28 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 15]($2, $0, $$038) | 0; //@line 10709
     if ($28 >>> 0 < $$038 >>> 0) {
      $$1 = $28; //@line 10712
      break L5;
     }
     $$139 = $$038; //@line 10718
     $$141 = $0 + $$038 | 0; //@line 10718
     $$143 = $1 - $$038 | 0; //@line 10718
     $31 = HEAP32[$9 >> 2] | 0; //@line 10718
    } else {
     $$139 = 0; //@line 10720
     $$141 = $0; //@line 10720
     $$143 = $1; //@line 10720
     $31 = $14; //@line 10720
    }
   } while (0);
   _memcpy($31 | 0, $$141 | 0, $$143 | 0) | 0; //@line 10723
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $$143; //@line 10726
   $$1 = $$139 + $$143 | 0; //@line 10728
  }
 } while (0);
 return $$1 | 0; //@line 10731
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_315($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 5200
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5202
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5204
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5206
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5208
 $9 = HEAP32[$2 >> 2] | 0; //@line 5209
 $11 = $6 + 12 | 0; //@line 5211
 HEAP32[$6 >> 2] = 518; //@line 5212
 HEAP32[$6 + 4 >> 2] = 0; //@line 5214
 HEAP32[$6 + 8 >> 2] = $4; //@line 5216
 HEAP32[$11 >> 2] = 848; //@line 5217
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(24) | 0; //@line 5218
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($9, $4 + 1056 | 0, $6); //@line 5219
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 519; //@line 5222
  $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 5223
  HEAP32[$12 >> 2] = $11; //@line 5224
  $13 = $ReallocAsyncCtx7 + 8 | 0; //@line 5225
  HEAP32[$13 >> 2] = $2; //@line 5226
  $14 = $ReallocAsyncCtx7 + 12 | 0; //@line 5227
  HEAP32[$14 >> 2] = $4; //@line 5228
  $15 = $ReallocAsyncCtx7 + 16 | 0; //@line 5229
  HEAP32[$15 >> 2] = $8; //@line 5230
  $16 = $ReallocAsyncCtx7 + 20 | 0; //@line 5231
  HEAP32[$16 >> 2] = $6; //@line 5232
  sp = STACKTOP; //@line 5233
  return;
 }
 ___async_unwind = 0; //@line 5236
 HEAP32[$ReallocAsyncCtx7 >> 2] = 519; //@line 5237
 $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 5238
 HEAP32[$12 >> 2] = $11; //@line 5239
 $13 = $ReallocAsyncCtx7 + 8 | 0; //@line 5240
 HEAP32[$13 >> 2] = $2; //@line 5241
 $14 = $ReallocAsyncCtx7 + 12 | 0; //@line 5242
 HEAP32[$14 >> 2] = $4; //@line 5243
 $15 = $ReallocAsyncCtx7 + 16 | 0; //@line 5244
 HEAP32[$15 >> 2] = $8; //@line 5245
 $16 = $ReallocAsyncCtx7 + 20 | 0; //@line 5246
 HEAP32[$16 >> 2] = $6; //@line 5247
 sp = STACKTOP; //@line 5248
 return;
}
function __ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 1381
 STACKTOP = STACKTOP + 32 | 0; //@line 1382
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 1382
 $vararg_buffer5 = sp + 24 | 0; //@line 1383
 $vararg_buffer3 = sp + 16 | 0; //@line 1384
 $vararg_buffer1 = sp + 8 | 0; //@line 1385
 $4 = $0 + 689 | 0; //@line 1388
 HEAP8[$4 >> 0] = $1; //@line 1389
 _printf(10880, sp) | 0; //@line 1390
 HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$4 >> 0]; //@line 1393
 _printf(11055, $vararg_buffer1) | 0; //@line 1394
 $AsyncCtx11 = _emscripten_alloc_async_context(28, sp) | 0; //@line 1395
 _putchar(10) | 0; //@line 1396
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 82; //@line 1399
  HEAP32[$AsyncCtx11 + 4 >> 2] = $vararg_buffer3; //@line 1401
  HEAP32[$AsyncCtx11 + 8 >> 2] = $vararg_buffer3; //@line 1403
  HEAP8[$AsyncCtx11 + 12 >> 0] = $2; //@line 1405
  HEAP32[$AsyncCtx11 + 16 >> 2] = $vararg_buffer5; //@line 1407
  HEAP32[$AsyncCtx11 + 20 >> 2] = $1; //@line 1409
  HEAP32[$AsyncCtx11 + 24 >> 2] = $vararg_buffer5; //@line 1411
  sp = STACKTOP; //@line 1412
  STACKTOP = sp; //@line 1413
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 1415
 _printf(10880, $vararg_buffer3) | 0; //@line 1416
 HEAP32[$vararg_buffer5 >> 2] = $1; //@line 1418
 HEAP32[$vararg_buffer5 + 4 >> 2] = $2 & 255; //@line 1420
 _printf(11134, $vararg_buffer5) | 0; //@line 1421
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1422
 _putchar(10) | 0; //@line 1423
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 83; //@line 1426
  sp = STACKTOP; //@line 1427
  STACKTOP = sp; //@line 1428
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1430
  STACKTOP = sp; //@line 1431
  return;
 }
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_352($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $27 = 0, $30 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 17128
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17130
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17134
 $8 = $0 + 16 | 0; //@line 17136
 $10 = HEAP32[$8 >> 2] | 0; //@line 17138
 $13 = HEAP32[$8 + 4 >> 2] | 0; //@line 17141
 $15 = HEAP32[$0 + 24 >> 2] | 0; //@line 17143
 $17 = HEAP32[$0 + 28 >> 2] | 0; //@line 17145
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 17147
 __ZN4mbed6Ticker5setupEy($6, $10, $13); //@line 17148
 $18 = HEAP32[$2 >> 2] | 0; //@line 17149
 if ($18 | 0) {
  $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 17153
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 17154
  FUNCTION_TABLE_vi[$21 & 1023]($17); //@line 17155
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 131; //@line 17158
   $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 17159
   HEAP32[$22 >> 2] = $15; //@line 17160
   sp = STACKTOP; //@line 17161
   return;
  }
  ___async_unwind = 0; //@line 17164
  HEAP32[$ReallocAsyncCtx3 >> 2] = 131; //@line 17165
  $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 17166
  HEAP32[$22 >> 2] = $15; //@line 17167
  sp = STACKTOP; //@line 17168
  return;
 }
 $24 = HEAP32[$15 + 784 >> 2] | 0; //@line 17172
 if (!$24) {
  return;
 }
 $27 = HEAP32[$24 + 60 >> 2] | 0; //@line 17178
 if (!$27) {
  return;
 }
 $30 = HEAP32[$27 >> 2] | 0; //@line 17184
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 17185
 FUNCTION_TABLE_vi[$30 & 1023]($24 + 48 | 0); //@line 17186
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 132; //@line 17189
  sp = STACKTOP; //@line 17190
  return;
 }
 ___async_unwind = 0; //@line 17193
 HEAP32[$ReallocAsyncCtx4 >> 2] = 132; //@line 17194
 sp = STACKTOP; //@line 17195
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_410($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 21664
 STACKTOP = STACKTOP + 16 | 0; //@line 21665
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 21665
 $$byval_copy = sp; //@line 21666
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21668
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21670
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21672
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21674
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21676
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21678
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21680
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21682
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21684
 $20 = HEAP32[$4 + 1328 >> 2] | 0; //@line 21686
 HEAP32[$18 >> 2] = 347; //@line 21687
 HEAP32[$18 + 4 >> 2] = 0; //@line 21689
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(36) | 0; //@line 21690
 HEAP32[$$byval_copy >> 2] = HEAP32[$18 >> 2]; //@line 21691
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$18 + 4 >> 2]; //@line 21691
 $21 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($20, $4, $$byval_copy) | 0; //@line 21692
 if (!___async) {
  HEAP32[___async_retval >> 2] = $21; //@line 21696
  ___async_unwind = 0; //@line 21697
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 348; //@line 21699
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $2; //@line 21701
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $4; //@line 21703
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $6; //@line 21705
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $10; //@line 21707
 HEAP32[$ReallocAsyncCtx9 + 20 >> 2] = $8; //@line 21709
 HEAP32[$ReallocAsyncCtx9 + 24 >> 2] = $12; //@line 21711
 HEAP32[$ReallocAsyncCtx9 + 28 >> 2] = $14; //@line 21713
 HEAP32[$ReallocAsyncCtx9 + 32 >> 2] = $16; //@line 21715
 sp = STACKTOP; //@line 21716
 STACKTOP = sp; //@line 21717
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_279($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $6 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 2916
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2922
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2926
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2928
 $14 = HEAP16[$0 + 28 >> 1] | 0; //@line 2930
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2932
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 2934
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 2936
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 2938
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 2940
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 2942
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 2944
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 2946
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 2948
 _printf(10880, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 2949
 HEAP32[$6 >> 2] = 5; //@line 2950
 _printf(10975, $6) | 0; //@line 2951
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(52) | 0; //@line 2952
 _putchar(10) | 0; //@line 2953
 if (!___async) {
  ___async_unwind = 0; //@line 2956
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 93; //@line 2958
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $10; //@line 2960
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $12; //@line 2962
 HEAP16[$ReallocAsyncCtx5 + 12 >> 1] = $14; //@line 2964
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $16; //@line 2966
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $18; //@line 2968
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $20; //@line 2970
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $22; //@line 2972
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $24; //@line 2974
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $26; //@line 2976
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $28; //@line 2978
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $30; //@line 2980
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $32; //@line 2982
 sp = STACKTOP; //@line 2983
 return;
}
function __ZN7LoRaMac22handle_rx2_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 16898
 STACKTOP = STACKTOP + 32 | 0; //@line 16899
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 16899
 $$byval_copy = sp + 8 | 0; //@line 16900
 $1 = sp + 16 | 0; //@line 16902
 _printf(12943, sp) | 0; //@line 16903
 _printf(12970, $$byval_copy) | 0; //@line 16904
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 16905
 _putchar(10) | 0; //@line 16906
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 503; //@line 16909
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16911
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 16913
  sp = STACKTOP; //@line 16914
  STACKTOP = sp; //@line 16915
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16917
 $5 = HEAP32[$0 + 1328 >> 2] | 0; //@line 16919
 HEAP32[$1 >> 2] = 347; //@line 16920
 HEAP32[$1 + 4 >> 2] = 0; //@line 16922
 $AsyncCtx4 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16923
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 16924
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 16924
 $6 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($5, $0, $$byval_copy) | 0; //@line 16925
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 504; //@line 16928
  sp = STACKTOP; //@line 16929
  STACKTOP = sp; //@line 16930
  return;
 }
 _emscripten_free_async_context($AsyncCtx4 | 0); //@line 16932
 if ($6 | 0) {
  STACKTOP = sp; //@line 16935
  return;
 }
 $AsyncCtx8 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16937
 _mbed_assert_internal(12827, 12836, 217); //@line 16938
 if (___async) {
  HEAP32[$AsyncCtx8 >> 2] = 505; //@line 16941
  sp = STACKTOP; //@line 16942
  STACKTOP = sp; //@line 16943
  return;
 }
 _emscripten_free_async_context($AsyncCtx8 | 0); //@line 16945
 STACKTOP = sp; //@line 16946
 return;
}
function __ZN7LoRaMac22handle_rx1_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 16667
 STACKTOP = STACKTOP + 32 | 0; //@line 16668
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 16668
 $$byval_copy = sp + 8 | 0; //@line 16669
 $1 = sp + 16 | 0; //@line 16671
 _printf(12943, sp) | 0; //@line 16672
 _printf(13425, $$byval_copy) | 0; //@line 16673
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 16674
 _putchar(10) | 0; //@line 16675
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 493; //@line 16678
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16680
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 16682
  sp = STACKTOP; //@line 16683
  STACKTOP = sp; //@line 16684
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16686
 $5 = HEAP32[$0 + 1328 >> 2] | 0; //@line 16688
 HEAP32[$1 >> 2] = 494; //@line 16689
 HEAP32[$1 + 4 >> 2] = 0; //@line 16691
 $AsyncCtx4 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16692
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 16693
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 16693
 $6 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($5, $0, $$byval_copy) | 0; //@line 16694
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 495; //@line 16697
  sp = STACKTOP; //@line 16698
  STACKTOP = sp; //@line 16699
  return;
 }
 _emscripten_free_async_context($AsyncCtx4 | 0); //@line 16701
 if ($6 | 0) {
  STACKTOP = sp; //@line 16704
  return;
 }
 $AsyncCtx8 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16706
 _mbed_assert_internal(12827, 12836, 209); //@line 16707
 if (___async) {
  HEAP32[$AsyncCtx8 >> 2] = 496; //@line 16710
  sp = STACKTOP; //@line 16711
  STACKTOP = sp; //@line 16712
  return;
 }
 _emscripten_free_async_context($AsyncCtx8 | 0); //@line 16714
 STACKTOP = sp; //@line 16715
 return;
}
function _mbedtls_cipher_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $22 = 0, $24 = 0, $25 = 0, $30 = 0, $32 = 0, $33 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2578
 if (!$0) {
  $$0 = -24832; //@line 2581
  return $$0 | 0; //@line 2582
 }
 $5 = HEAP32[$0 >> 2] | 0; //@line 2584
 if (!$5) {
  $$0 = -24832; //@line 2587
  return $$0 | 0; //@line 2588
 }
 if (!(HEAP32[$5 + 20 >> 2] & 2)) {
  if ((HEAP32[$5 + 8 >> 2] | 0) != ($2 | 0)) {
   $$0 = -24832; //@line 2599
   return $$0 | 0; //@line 2600
  }
 }
 HEAP32[$0 + 4 >> 2] = $2; //@line 2604
 HEAP32[$0 + 8 >> 2] = $3; //@line 2606
 L11 : do {
  if (($3 | 0) != 1) {
   switch (HEAP32[$5 + 4 >> 2] | 0) {
   case 5:
   case 3:
    {
     break L11;
     break;
    }
   default:
    {}
   }
   if ($3 | 0) {
    $$0 = -24832; //@line 2622
    return $$0 | 0; //@line 2623
   }
   $30 = HEAP32[(HEAP32[$5 + 28 >> 2] | 0) + 16 >> 2] | 0; //@line 2628
   $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 2630
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2631
   $33 = FUNCTION_TABLE_iiii[$30 & 15]($32, $1, $2) | 0; //@line 2632
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 661; //@line 2635
    sp = STACKTOP; //@line 2636
    return 0; //@line 2637
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2639
   $$0 = $33; //@line 2640
   return $$0 | 0; //@line 2641
  }
 } while (0);
 $22 = HEAP32[(HEAP32[$5 + 28 >> 2] | 0) + 12 >> 2] | 0; //@line 2647
 $24 = HEAP32[$0 + 60 >> 2] | 0; //@line 2649
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2650
 $25 = FUNCTION_TABLE_iiii[$22 & 15]($24, $1, $2) | 0; //@line 2651
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 660; //@line 2654
  sp = STACKTOP; //@line 2655
  return 0; //@line 2656
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2658
 $$0 = $25; //@line 2659
 return $$0 | 0; //@line 2660
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_219($0) {
 $0 = $0 | 0;
 var $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 34571
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34573
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34575
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34577
 HEAP8[$2 + 1932 >> 0] = 1; //@line 34579
 $8 = $2 + 1892 | 0; //@line 34580
 $9 = HEAP32[$8 >> 2] | 0; //@line 34581
 if (!$9) {
  HEAP32[___async_retval >> 2] = 0; //@line 34585
  return;
 }
 $13 = HEAP32[$2 + 2288 >> 2] | 0; //@line 34590
 $15 = HEAP32[$9 + 4 >> 2] | 0; //@line 34592
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 34593
 FUNCTION_TABLE_vii[$15 & 31]($6, $2 + 1880 | 0); //@line 34594
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 242; //@line 34597
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 34598
  HEAP32[$16 >> 2] = $8; //@line 34599
  $17 = $ReallocAsyncCtx5 + 8 | 0; //@line 34600
  HEAP32[$17 >> 2] = $6; //@line 34601
  $18 = $ReallocAsyncCtx5 + 12 | 0; //@line 34602
  HEAP32[$18 >> 2] = $13; //@line 34603
  $19 = $ReallocAsyncCtx5 + 16 | 0; //@line 34604
  HEAP32[$19 >> 2] = $6; //@line 34605
  $20 = $ReallocAsyncCtx5 + 20 | 0; //@line 34606
  HEAP32[$20 >> 2] = $4; //@line 34607
  sp = STACKTOP; //@line 34608
  return;
 }
 ___async_unwind = 0; //@line 34611
 HEAP32[$ReallocAsyncCtx5 >> 2] = 242; //@line 34612
 $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 34613
 HEAP32[$16 >> 2] = $8; //@line 34614
 $17 = $ReallocAsyncCtx5 + 8 | 0; //@line 34615
 HEAP32[$17 >> 2] = $6; //@line 34616
 $18 = $ReallocAsyncCtx5 + 12 | 0; //@line 34617
 HEAP32[$18 >> 2] = $13; //@line 34618
 $19 = $ReallocAsyncCtx5 + 16 | 0; //@line 34619
 HEAP32[$19 >> 2] = $6; //@line 34620
 $20 = $ReallocAsyncCtx5 + 20 | 0; //@line 34621
 HEAP32[$20 >> 2] = $4; //@line 34622
 sp = STACKTOP; //@line 34623
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_232($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx33 = 0, sp = 0;
 sp = STACKTOP; //@line 35252
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35256
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35258
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 35260
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 35261
 if ($8 | 0) {
  $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 35265
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 35266
  FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 35267
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 230; //@line 35270
   $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 35271
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 35272
   $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 35273
   HEAP32[$13 >> 2] = $6; //@line 35274
   sp = STACKTOP; //@line 35275
   return;
  }
  ___async_unwind = 0; //@line 35278
  HEAP32[$ReallocAsyncCtx2 >> 2] = 230; //@line 35279
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 35280
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 35281
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 35282
  HEAP32[$13 >> 2] = $6; //@line 35283
  sp = STACKTOP; //@line 35284
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = -1011; //@line 35290
  return;
 }
 $ReallocAsyncCtx33 = _emscripten_realloc_async_context(8) | 0; //@line 35293
 _mbed_assert_internal(12827, 11911, 1141); //@line 35294
 if (___async) {
  HEAP32[$ReallocAsyncCtx33 >> 2] = 231; //@line 35297
  $15 = $ReallocAsyncCtx33 + 4 | 0; //@line 35298
  HEAP32[$15 >> 2] = $6; //@line 35299
  sp = STACKTOP; //@line 35300
  return;
 }
 ___async_unwind = 0; //@line 35303
 HEAP32[$ReallocAsyncCtx33 >> 2] = 231; //@line 35304
 $15 = $ReallocAsyncCtx33 + 4 | 0; //@line 35305
 HEAP32[$15 >> 2] = $6; //@line 35306
 sp = STACKTOP; //@line 35307
 return;
}
function __ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $2 = 0, $20 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 9678
 STACKTOP = STACKTOP + 16 | 0; //@line 9679
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9679
 $2 = $0 + 1876 | 0; //@line 9682
 if (!(HEAP32[$2 >> 2] | 0)) {
  _printf(11863, sp) | 0; //@line 9686
  _printf(12660, sp + 8 | 0) | 0; //@line 9687
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9688
  _putchar(10) | 0; //@line 9689
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 320; //@line 9692
   sp = STACKTOP; //@line 9693
   STACKTOP = sp; //@line 9694
   return 0; //@line 9694
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9696
  $$0 = -1012; //@line 9697
  STACKTOP = sp; //@line 9698
  return $$0 | 0; //@line 9698
 } else {
  $6 = HEAP32[$1 + 4 >> 2] | 0; //@line 9701
  $8 = HEAP32[$1 + 8 >> 2] | 0; //@line 9703
  $10 = HEAP32[$1 + 12 >> 2] | 0; //@line 9705
  $12 = HEAP8[$1 + 16 >> 0] | 0; //@line 9707
  HEAP8[$0 + 1936 >> 0] = 0; //@line 9709
  HEAP32[$0 + 1960 >> 2] = 0; //@line 9711
  HEAP32[$0 + 1956 >> 2] = 0; //@line 9713
  HEAP32[$0 + 1944 >> 2] = $8; //@line 9716
  HEAP32[$0 + 1948 >> 2] = $10; //@line 9718
  HEAP32[$0 + 1940 >> 2] = $6; //@line 9719
  HEAP8[$0 + 1952 >> 0] = $12; //@line 9721
  HEAP32[$2 >> 2] = 2; //@line 9722
  $AsyncCtx4 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9723
  $20 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 9724
  if (___async) {
   HEAP32[$AsyncCtx4 >> 2] = 321; //@line 9727
   sp = STACKTOP; //@line 9728
   STACKTOP = sp; //@line 9729
   return 0; //@line 9729
  }
  _emscripten_free_async_context($AsyncCtx4 | 0); //@line 9731
  $$0 = $20; //@line 9732
  STACKTOP = sp; //@line 9733
  return $$0 | 0; //@line 9733
 }
 return 0; //@line 9735
}
function _mbedtls_gcm_setkey__async_cb_446($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 31362
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31364
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31366
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31368
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31370
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31372
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 31376
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 31379
 dest = $2; //@line 31380
 stop = dest + 16 | 0; //@line 31380
 do {
  HEAP8[dest >> 0] = 0; //@line 31380
  dest = dest + 1 | 0; //@line 31380
 } while ((dest | 0) < (stop | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 31381
 $11 = _mbedtls_cipher_update($6, $2, 16, $2, $4) | 0; //@line 31382
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 679; //@line 31385
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 31386
  HEAP32[$12 >> 2] = $2; //@line 31387
  $13 = $ReallocAsyncCtx + 8 | 0; //@line 31388
  HEAP32[$13 >> 2] = $2; //@line 31389
  $14 = $ReallocAsyncCtx + 12 | 0; //@line 31390
  HEAP32[$14 >> 2] = $8; //@line 31391
  $15 = $ReallocAsyncCtx + 16 | 0; //@line 31392
  HEAP32[$15 >> 2] = $4; //@line 31393
  sp = STACKTOP; //@line 31394
  return;
 }
 HEAP32[___async_retval >> 2] = $11; //@line 31398
 ___async_unwind = 0; //@line 31399
 HEAP32[$ReallocAsyncCtx >> 2] = 679; //@line 31400
 $12 = $ReallocAsyncCtx + 4 | 0; //@line 31401
 HEAP32[$12 >> 2] = $2; //@line 31402
 $13 = $ReallocAsyncCtx + 8 | 0; //@line 31403
 HEAP32[$13 >> 2] = $2; //@line 31404
 $14 = $ReallocAsyncCtx + 12 | 0; //@line 31405
 HEAP32[$14 >> 2] = $8; //@line 31406
 $15 = $ReallocAsyncCtx + 16 | 0; //@line 31407
 HEAP32[$15 >> 2] = $4; //@line 31408
 sp = STACKTOP; //@line 31409
 return;
}
function __ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_311($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $18 = 0, $21 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 4977
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4981
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 4983
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4985
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4987
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4991
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 4995
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 21; //@line 5000
  HEAP8[$4 + 4 >> 0] = $6; //@line 5002
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 5003
  $23 = __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($8, $4) | 0; //@line 5004
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 319; //@line 5007
   $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 5008
   HEAP32[$24 >> 2] = $18; //@line 5009
   sp = STACKTOP; //@line 5010
   return;
  }
  HEAP32[___async_retval >> 2] = $23; //@line 5014
  ___async_unwind = 0; //@line 5015
  HEAP32[$ReallocAsyncCtx4 >> 2] = 319; //@line 5016
  $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 5017
  HEAP32[$24 >> 2] = $18; //@line 5018
  sp = STACKTOP; //@line 5019
  return;
 } else {
  _printf(11863, $10) | 0; //@line 5022
  _printf(12721, $14) | 0; //@line 5023
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 5024
  _putchar(10) | 0; //@line 5025
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 318; //@line 5028
   $21 = $ReallocAsyncCtx + 4 | 0; //@line 5029
   HEAP32[$21 >> 2] = $18; //@line 5030
   sp = STACKTOP; //@line 5031
   return;
  }
  ___async_unwind = 0; //@line 5034
  HEAP32[$ReallocAsyncCtx >> 2] = 318; //@line 5035
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 5036
  HEAP32[$21 >> 2] = $18; //@line 5037
  sp = STACKTOP; //@line 5038
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_231($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx32 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 35190
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35194
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35196
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 35198
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 35199
 if ($8 | 0) {
  $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 35203
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 35204
  FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 35205
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 235; //@line 35208
   $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 35209
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 35210
   $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 35211
   HEAP32[$13 >> 2] = $6; //@line 35212
   sp = STACKTOP; //@line 35213
   return;
  }
  ___async_unwind = 0; //@line 35216
  HEAP32[$ReallocAsyncCtx4 >> 2] = 235; //@line 35217
  $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 35218
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 35219
  $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 35220
  HEAP32[$13 >> 2] = $6; //@line 35221
  sp = STACKTOP; //@line 35222
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = 0; //@line 35228
  return;
 }
 $ReallocAsyncCtx32 = _emscripten_realloc_async_context(8) | 0; //@line 35231
 _mbed_assert_internal(12827, 11911, 1186); //@line 35232
 if (___async) {
  HEAP32[$ReallocAsyncCtx32 >> 2] = 236; //@line 35235
  $15 = $ReallocAsyncCtx32 + 4 | 0; //@line 35236
  HEAP32[$15 >> 2] = $6; //@line 35237
  sp = STACKTOP; //@line 35238
  return;
 }
 ___async_unwind = 0; //@line 35241
 HEAP32[$ReallocAsyncCtx32 >> 2] = 236; //@line 35242
 $15 = $ReallocAsyncCtx32 + 4 | 0; //@line 35243
 HEAP32[$15 >> 2] = $6; //@line 35244
 sp = STACKTOP; //@line 35245
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_230($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx31 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 35128
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35132
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35134
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 35136
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 35137
 if ($8 | 0) {
  $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 35141
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 35142
  FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 35143
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 244; //@line 35146
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 35147
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 35148
   $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 35149
   HEAP32[$13 >> 2] = $6; //@line 35150
   sp = STACKTOP; //@line 35151
   return;
  }
  ___async_unwind = 0; //@line 35154
  HEAP32[$ReallocAsyncCtx6 >> 2] = 244; //@line 35155
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 35156
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 35157
  $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 35158
  HEAP32[$13 >> 2] = $6; //@line 35159
  sp = STACKTOP; //@line 35160
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = 0; //@line 35166
  return;
 }
 $ReallocAsyncCtx31 = _emscripten_realloc_async_context(8) | 0; //@line 35169
 _mbed_assert_internal(12827, 11911, 1223); //@line 35170
 if (___async) {
  HEAP32[$ReallocAsyncCtx31 >> 2] = 245; //@line 35173
  $15 = $ReallocAsyncCtx31 + 4 | 0; //@line 35174
  HEAP32[$15 >> 2] = $6; //@line 35175
  sp = STACKTOP; //@line 35176
  return;
 }
 ___async_unwind = 0; //@line 35179
 HEAP32[$ReallocAsyncCtx31 >> 2] = 245; //@line 35180
 $15 = $ReallocAsyncCtx31 + 4 | 0; //@line 35181
 HEAP32[$15 >> 2] = $6; //@line 35182
 sp = STACKTOP; //@line 35183
 return;
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 18469
 STACKTOP = STACKTOP + 16 | 0; //@line 18470
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 18470
 $$byval_copy = sp; //@line 18471
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18473
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18475
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18477
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18479
 $10 = HEAP32[$2 + 1328 >> 2] | 0; //@line 18481
 HEAP32[$4 >> 2] = 347; //@line 18482
 HEAP32[$4 + 4 >> 2] = 0; //@line 18484
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 18485
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 18486
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 18486
 $11 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($10, $2, $$byval_copy) | 0; //@line 18487
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 550; //@line 18490
  $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 18491
  HEAP32[$12 >> 2] = $6; //@line 18492
  $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 18493
  HEAP32[$13 >> 2] = $2; //@line 18494
  $14 = $ReallocAsyncCtx4 + 12 | 0; //@line 18495
  HEAP32[$14 >> 2] = $8; //@line 18496
  sp = STACKTOP; //@line 18497
  STACKTOP = sp; //@line 18498
  return;
 }
 HEAP32[___async_retval >> 2] = $11; //@line 18501
 ___async_unwind = 0; //@line 18502
 HEAP32[$ReallocAsyncCtx4 >> 2] = 550; //@line 18503
 $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 18504
 HEAP32[$12 >> 2] = $6; //@line 18505
 $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 18506
 HEAP32[$13 >> 2] = $2; //@line 18507
 $14 = $ReallocAsyncCtx4 + 12 | 0; //@line 18508
 HEAP32[$14 >> 2] = $8; //@line 18509
 sp = STACKTOP; //@line 18510
 STACKTOP = sp; //@line 18511
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_426($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 24095
 STACKTOP = STACKTOP + 16 | 0; //@line 24096
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 24096
 $$byval_copy = sp; //@line 24097
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24099
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24101
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24103
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24105
 $10 = HEAP32[$4 + 1328 >> 2] | 0; //@line 24107
 HEAP32[$6 >> 2] = 347; //@line 24108
 HEAP32[$6 + 4 >> 2] = 0; //@line 24110
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(16) | 0; //@line 24111
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 24112
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 24112
 $11 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($10, $4, $$byval_copy) | 0; //@line 24113
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 460; //@line 24116
  $12 = $ReallocAsyncCtx10 + 4 | 0; //@line 24117
  HEAP32[$12 >> 2] = $2; //@line 24118
  $13 = $ReallocAsyncCtx10 + 8 | 0; //@line 24119
  HEAP32[$13 >> 2] = $4; //@line 24120
  $14 = $ReallocAsyncCtx10 + 12 | 0; //@line 24121
  HEAP32[$14 >> 2] = $8; //@line 24122
  sp = STACKTOP; //@line 24123
  STACKTOP = sp; //@line 24124
  return;
 }
 HEAP32[___async_retval >> 2] = $11; //@line 24127
 ___async_unwind = 0; //@line 24128
 HEAP32[$ReallocAsyncCtx10 >> 2] = 460; //@line 24129
 $12 = $ReallocAsyncCtx10 + 4 | 0; //@line 24130
 HEAP32[$12 >> 2] = $2; //@line 24131
 $13 = $ReallocAsyncCtx10 + 8 | 0; //@line 24132
 HEAP32[$13 >> 2] = $4; //@line 24133
 $14 = $ReallocAsyncCtx10 + 12 | 0; //@line 24134
 HEAP32[$14 >> 2] = $8; //@line 24135
 sp = STACKTOP; //@line 24136
 STACKTOP = sp; //@line 24137
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_480($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 34493
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34497
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34499
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34501
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34503
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 34505
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 34507
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 34509
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 34512
 HEAP16[$4 + 16 >> 1] = HEAP16[$6 >> 1] | 0; //@line 34515
 _equeue_event_dtor($4, 268); //@line 34516
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 34517
 $20 = _equeue_post($8, 269, $4) | 0; //@line 34518
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 270; //@line 34521
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 34522
  HEAP32[$21 >> 2] = $10; //@line 34523
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 34524
  HEAP32[$22 >> 2] = $12; //@line 34525
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 34526
  HEAP32[$23 >> 2] = $14; //@line 34527
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 34528
  HEAP32[$24 >> 2] = $16; //@line 34529
  sp = STACKTOP; //@line 34530
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 34534
 ___async_unwind = 0; //@line 34535
 HEAP32[$ReallocAsyncCtx6 >> 2] = 270; //@line 34536
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 34537
 HEAP32[$21 >> 2] = $10; //@line 34538
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 34539
 HEAP32[$22 >> 2] = $12; //@line 34540
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 34541
 HEAP32[$23 >> 2] = $14; //@line 34542
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 34543
 HEAP32[$24 >> 2] = $16; //@line 34544
 sp = STACKTOP; //@line 34545
 return;
}
function __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0$i$i = 0, $$sink$i = 0, $11 = 0, $14 = 0, $22 = 0, $28 = 0, $41 = 0, $44 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 25843
 $7 = HEAPU8[$0 + 24 >> 0] | 0; //@line 25846
 $8 = $0 + 25 | 0; //@line 25847
 $11 = (HEAPU8[$8 >> 0] | 0) + $7 | 0; //@line 25850
 $14 = $0 + 26 | 0; //@line 25853
 if ((HEAP8[$2 >> 0] | 0) == (HEAPU8[$14 >> 0] | 0)) {
  HEAP32[$4 >> 2] = 0; //@line 25858
  $$0 = 0; //@line 25859
  return $$0 | 0; //@line 25860
 }
 if ((HEAP32[$4 >> 2] | 0) >>> 0 < $7 >>> 0) {
  $$0 = 0; //@line 25865
  return $$0 | 0; //@line 25866
 }
 HEAP8[$3 >> 0] = HEAP8[$0 + 22 >> 0] | 0; //@line 25870
 $22 = HEAP32[$4 >> 2] | 0; //@line 25871
 if ($22 >>> 0 < $11 >>> 0) {
  $$0 = 1; //@line 25874
  return $$0 | 0; //@line 25875
 }
 if ((($22 >>> 0) % ((HEAPU8[$8 >> 0] | 0) >>> 0) | 0 | 0) != 1) {
  $$0 = 1; //@line 25882
  return $$0 | 0; //@line 25883
 }
 $28 = HEAP8[$2 >> 0] | 0; //@line 25885
 $$sink$i = HEAP8[((HEAP8[$0 + 132 >> 0] & 1) == 0 ? $14 : $0 + 35 | 0) >> 0] | 0; //@line 25892
 $$0$i$i = $$sink$i << 24 >> 24 == $28 << 24 >> 24 ? $$sink$i : ($28 & 255) + 255 & 255; //@line 25897
 HEAP8[$2 >> 0] = $$0$i$i; //@line 25898
 $41 = ($$0$i$i << 24 >> 24 | 0) != (HEAPU8[$14 >> 0] | 0); //@line 25902
 if ($41 | $1 ^ 1) {
  $$0 = $41; //@line 25906
  return $$0 | 0; //@line 25907
 }
 $44 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 25911
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 25912
 FUNCTION_TABLE_vi[$44 & 1023]($0); //@line 25913
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 645; //@line 25916
  sp = STACKTOP; //@line 25917
  return 0; //@line 25918
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 25920
 $$0 = 0; //@line 25921
 return $$0 | 0; //@line 25922
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $30 = 0, $34 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 4072
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4074
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4080
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4082
 $12 = HEAP8[$0 + 24 >> 0] & 1; //@line 4085
 $14 = HEAP8[$0 + 25 >> 0] & 1; //@line 4088
 $16 = HEAP8[$0 + 26 >> 0] | 0; //@line 4090
 $18 = HEAP8[$0 + 27 >> 0] | 0; //@line 4092
 $20 = HEAP32[$0 + 28 >> 2] | 0; //@line 4094
 $22 = HEAP32[$0 + 32 >> 2] | 0; //@line 4096
 $24 = HEAP32[$0 + 36 >> 2] | 0; //@line 4098
 $26 = HEAP32[$0 + 40 >> 2] | 0; //@line 4100
 $27 = HEAP32[$2 >> 2] | 0; //@line 4101
 $30 = HEAP32[(HEAP32[$27 >> 2] | 0) + 32 >> 2] | 0; //@line 4104
 $34 = HEAP32[(HEAP32[$0 + 12 >> 2] | 0) + ((HEAPU8[HEAP32[$0 + 8 >> 2] >> 0] | 0) * 12 | 0) >> 2] | 0; //@line 4108
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 4109
 FUNCTION_TABLE_vii[$30 & 31]($27, $34); //@line 4110
 if (!___async) {
  ___async_unwind = 0; //@line 4113
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 613; //@line 4115
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 4117
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 4119
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 4121
 HEAP8[$ReallocAsyncCtx2 + 16 >> 0] = $12 & 1; //@line 4124
 HEAP8[$ReallocAsyncCtx2 + 17 >> 0] = $14 & 1; //@line 4127
 HEAP8[$ReallocAsyncCtx2 + 18 >> 0] = $16; //@line 4129
 HEAP8[$ReallocAsyncCtx2 + 19 >> 0] = $18; //@line 4131
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $20; //@line 4133
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $22; //@line 4135
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $24; //@line 4137
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $26; //@line 4139
 sp = STACKTOP; //@line 4140
 return;
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26171
 if (($1 | 0) == ($2 | 0)) {
  $21 = $1 + 16 | 0; //@line 26174
  HEAP32[$21 >> 2] = 0; //@line 26175
  return;
 }
 $4 = $1 + 12 | 0; //@line 26178
 $5 = HEAP32[$4 >> 2] | 0; //@line 26179
 do {
  if ($5 | 0) {
   $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 26184
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 26185
   FUNCTION_TABLE_vi[$8 & 1023]($1); //@line 26186
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 646; //@line 26189
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 26191
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 26193
    HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 26195
    sp = STACKTOP; //@line 26196
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 26199
    break;
   }
  }
 } while (0);
 $12 = $2 + 12 | 0; //@line 26204
 $13 = HEAP32[$12 >> 2] | 0; //@line 26205
 do {
  if (!$13) {
   $20 = 0; //@line 26209
  } else {
   $16 = HEAP32[$13 + 4 >> 2] | 0; //@line 26212
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 26213
   FUNCTION_TABLE_vii[$16 & 31]($1, $2); //@line 26214
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 647; //@line 26217
    HEAP32[$AsyncCtx3 + 4 >> 2] = $12; //@line 26219
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 26221
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 26223
    sp = STACKTOP; //@line 26224
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 26227
    $20 = HEAP32[$12 >> 2] | 0; //@line 26229
    break;
   }
  }
 } while (0);
 HEAP32[$4 >> 2] = $20; //@line 26234
 $21 = $1 + 16 | 0; //@line 26235
 HEAP32[$21 >> 2] = 0; //@line 26236
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_280($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 2991
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2993
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2995
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 2997
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2999
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3001
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3003
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3005
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3007
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 3009
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 3011
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 3013
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 3015
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 3017
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(56) | 0; //@line 3018
 __ZN4mbed5Timer5startEv($4); //@line 3019
 if (!___async) {
  ___async_unwind = 0; //@line 3022
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 96; //@line 3024
 HEAP16[$ReallocAsyncCtx11 + 4 >> 1] = $6; //@line 3026
 HEAP32[$ReallocAsyncCtx11 + 8 >> 2] = $4; //@line 3028
 HEAP32[$ReallocAsyncCtx11 + 12 >> 2] = $16; //@line 3030
 HEAP32[$ReallocAsyncCtx11 + 16 >> 2] = $8; //@line 3032
 HEAP32[$ReallocAsyncCtx11 + 20 >> 2] = $10; //@line 3034
 HEAP32[$ReallocAsyncCtx11 + 24 >> 2] = $12; //@line 3036
 HEAP32[$ReallocAsyncCtx11 + 28 >> 2] = $14; //@line 3038
 HEAP32[$ReallocAsyncCtx11 + 32 >> 2] = $2; //@line 3040
 HEAP32[$ReallocAsyncCtx11 + 36 >> 2] = $18; //@line 3042
 HEAP32[$ReallocAsyncCtx11 + 40 >> 2] = $20; //@line 3044
 HEAP32[$ReallocAsyncCtx11 + 44 >> 2] = $22; //@line 3046
 HEAP32[$ReallocAsyncCtx11 + 48 >> 2] = $24; //@line 3048
 HEAP32[$ReallocAsyncCtx11 + 52 >> 2] = $26; //@line 3050
 sp = STACKTOP; //@line 3051
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 18328
 STACKTOP = STACKTOP + 16 | 0; //@line 18329
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 18329
 $$byval_copy = sp; //@line 18330
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18332
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18334
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18336
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18338
 $10 = HEAP32[$2 + 1328 >> 2] | 0; //@line 18340
 HEAP32[$4 >> 2] = 347; //@line 18341
 HEAP32[$4 + 4 >> 2] = 0; //@line 18343
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(16) | 0; //@line 18344
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 18345
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 18345
 $11 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($10, $2, $$byval_copy) | 0; //@line 18346
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 429; //@line 18349
  $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 18350
  HEAP32[$12 >> 2] = $6; //@line 18351
  $13 = $ReallocAsyncCtx5 + 8 | 0; //@line 18352
  HEAP32[$13 >> 2] = $2; //@line 18353
  $14 = $ReallocAsyncCtx5 + 12 | 0; //@line 18354
  HEAP32[$14 >> 2] = $8; //@line 18355
  sp = STACKTOP; //@line 18356
  STACKTOP = sp; //@line 18357
  return;
 }
 HEAP32[___async_retval >> 2] = $11; //@line 18360
 ___async_unwind = 0; //@line 18361
 HEAP32[$ReallocAsyncCtx5 >> 2] = 429; //@line 18362
 $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 18363
 HEAP32[$12 >> 2] = $6; //@line 18364
 $13 = $ReallocAsyncCtx5 + 8 | 0; //@line 18365
 HEAP32[$13 >> 2] = $2; //@line 18366
 $14 = $ReallocAsyncCtx5 + 12 | 0; //@line 18367
 HEAP32[$14 >> 2] = $8; //@line 18368
 sp = STACKTOP; //@line 18369
 STACKTOP = sp; //@line 18370
 return;
}
function __ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $10 = 0, $12 = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 22797
 L1 : do {
  if (!(HEAP8[$0 + 16 >> 0] | 0)) {
   $$011 = 0; //@line 22803
  } else {
   $5 = HEAP32[$1 >> 2] | 0; //@line 22805
   if (!(HEAP32[$5 >> 2] | 0)) {
    $10 = HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] | 0; //@line 22811
    $12 = HEAP8[$1 + 4 >> 0] | 0; //@line 22813
    $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 22814
    $13 = FUNCTION_TABLE_iii[$10 & 31]($0, $12) | 0; //@line 22815
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 599; //@line 22818
     sp = STACKTOP; //@line 22819
     return 0; //@line 22820
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 22822
     return ($13 ? 3 : 0) | 0; //@line 22824
    }
   }
   $16 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 22829
   $18 = HEAP8[$1 + 4 >> 0] | 0; //@line 22831
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 22832
   $19 = FUNCTION_TABLE_iiii[$16 & 15]($0, $5, $18) | 0; //@line 22833
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 600; //@line 22836
    sp = STACKTOP; //@line 22837
    return 0; //@line 22838
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 22840
   switch ($19 | 0) {
   case 0:
    {
     $$011 = 3; //@line 22843
     break L1;
     break;
    }
   case -1004:
    {
     $$011 = 2; //@line 22848
     break L1;
     break;
    }
   case -1005:
    {
     $$011 = 1; //@line 22853
     break L1;
     break;
    }
   case -1006:
    {
     $$011 = 0; //@line 22858
     break L1;
     break;
    }
   default:
    {
     $$011 = 0; //@line 22863
     break L1;
    }
   }
  }
 } while (0);
 return $$011 | 0; //@line 22869
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_438($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28638
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28642
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28644
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28646
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28648
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28650
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28652
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28654
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28656
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28658
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 28660
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 28662
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 28664
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 28666
 $29 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 28668
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(48) | 0; //@line 28669
 FUNCTION_TABLE_vii[$29 & 31]($26, $28); //@line 28670
 if (!___async) {
  ___async_unwind = 0; //@line 28673
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 454; //@line 28675
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 28677
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 28679
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $12; //@line 28681
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $14; //@line 28683
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $16; //@line 28685
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $4; //@line 28687
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $6; //@line 28689
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $18; //@line 28691
 HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $20; //@line 28693
 HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $22; //@line 28695
 HEAP32[$ReallocAsyncCtx2 + 44 >> 2] = $24; //@line 28697
 sp = STACKTOP; //@line 28698
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_437($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $26 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28570
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28572
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28574
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28576
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28578
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28580
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28582
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28584
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28586
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28588
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28590
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 28592
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 28596
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 28598
 $29 = HEAP32[HEAP32[HEAP32[$0 + 48 >> 2] >> 2] >> 2] | 0; //@line 28600
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(48) | 0; //@line 28601
 FUNCTION_TABLE_vii[$29 & 31]($26, $28); //@line 28602
 if (!___async) {
  ___async_unwind = 0; //@line 28605
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 456; //@line 28607
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $6; //@line 28609
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $8; //@line 28611
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $10; //@line 28613
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $12; //@line 28615
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $14; //@line 28617
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $2; //@line 28619
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $4; //@line 28621
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $16; //@line 28623
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $18; //@line 28625
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $20; //@line 28627
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $22; //@line 28629
 sp = STACKTOP; //@line 28630
 return;
}
function _mbedtls_cipher_cmac_starts($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $13 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3104
 if (!$0) {
  $$0 = -24832; //@line 3107
  return $$0 | 0; //@line 3108
 }
 if (($1 | 0) == 0 | (HEAP32[$0 >> 2] | 0) == 0) {
  $$0 = -24832; //@line 3115
  return $$0 | 0; //@line 3116
 }
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 3118
 $7 = _mbedtls_cipher_setkey($0, $1, $2, 1) | 0; //@line 3119
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 670; //@line 3122
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3124
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 3126
  sp = STACKTOP; //@line 3127
  return 0; //@line 3128
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3130
 if ($7 | 0) {
  $$0 = $7; //@line 3133
  return $$0 | 0; //@line 3134
 }
 switch (HEAP32[HEAP32[$0 >> 2] >> 2] | 0) {
 case 36:
 case 4:
 case 3:
 case 2:
  {
   break;
  }
 default:
  {
   $$0 = -24832; //@line 3143
   return $$0 | 0; //@line 3144
  }
 }
 $13 = _calloc(1, 36) | 0; //@line 3147
 if (!$13) {
  $$0 = -24960; //@line 3150
  return $$0 | 0; //@line 3151
 }
 HEAP32[$0 + 64 >> 2] = $13; //@line 3154
 HEAP8[$13 >> 0] = 0; //@line 3156
 HEAP8[$13 + 1 >> 0] = 0; //@line 3158
 HEAP8[$13 + 2 >> 0] = 0; //@line 3160
 HEAP8[$13 + 3 >> 0] = 0; //@line 3162
 HEAP8[$13 + 4 >> 0] = 0; //@line 3164
 HEAP8[$13 + 5 >> 0] = 0; //@line 3166
 HEAP8[$13 + 6 >> 0] = 0; //@line 3168
 HEAP8[$13 + 7 >> 0] = 0; //@line 3170
 HEAP8[$13 + 8 >> 0] = 0; //@line 3172
 HEAP8[$13 + 9 >> 0] = 0; //@line 3174
 HEAP8[$13 + 10 >> 0] = 0; //@line 3176
 HEAP8[$13 + 11 >> 0] = 0; //@line 3178
 HEAP8[$13 + 12 >> 0] = 0; //@line 3180
 HEAP8[$13 + 13 >> 0] = 0; //@line 3182
 HEAP8[$13 + 14 >> 0] = 0; //@line 3184
 HEAP8[$13 + 15 >> 0] = 0; //@line 3185
 $$0 = 0; //@line 3186
 return $$0 | 0; //@line 3187
}
function _mbedtls_ccm_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $13 = 0, $18 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 1872
 $4 = _mbedtls_cipher_info_from_values($1, $3, 1) | 0; //@line 1873
 if (!$4) {
  $$0 = -13; //@line 1876
  return $$0 | 0; //@line 1877
 }
 if ((HEAP32[$4 + 24 >> 2] | 0) != 16) {
  $$0 = -13; //@line 1883
  return $$0 | 0; //@line 1884
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 1886
 _mbedtls_cipher_free($0); //@line 1887
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 654; //@line 1890
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 1892
  HEAP32[$AsyncCtx7 + 8 >> 2] = $4; //@line 1894
  HEAP32[$AsyncCtx7 + 12 >> 2] = $2; //@line 1896
  HEAP32[$AsyncCtx7 + 16 >> 2] = $3; //@line 1898
  sp = STACKTOP; //@line 1899
  return 0; //@line 1900
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 1902
 $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 1903
 $13 = _mbedtls_cipher_setup($0, $4) | 0; //@line 1904
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 655; //@line 1907
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 1909
  HEAP32[$AsyncCtx3 + 8 >> 2] = $2; //@line 1911
  HEAP32[$AsyncCtx3 + 12 >> 2] = $3; //@line 1913
  sp = STACKTOP; //@line 1914
  return 0; //@line 1915
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 1917
 if ($13 | 0) {
  $$0 = $13; //@line 1920
  return $$0 | 0; //@line 1921
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1923
 $18 = _mbedtls_cipher_setkey($0, $2, $3, 1) | 0; //@line 1924
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 656; //@line 1927
  sp = STACKTOP; //@line 1928
  return 0; //@line 1929
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1931
 $$0 = $18; //@line 1932
 return $$0 | 0; //@line 1933
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_246($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 965
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 969
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 971
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 973
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 975
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 977
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 979
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 981
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 984
 HEAP32[$4 + 16 >> 2] = HEAP32[$6 >> 2]; //@line 987
 _equeue_event_dtor($4, 260); //@line 988
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 989
 $20 = _equeue_post($8, 261, $4) | 0; //@line 990
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 262; //@line 993
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 994
  HEAP32[$21 >> 2] = $10; //@line 995
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 996
  HEAP32[$22 >> 2] = $12; //@line 997
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 998
  HEAP32[$23 >> 2] = $14; //@line 999
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 1000
  HEAP32[$24 >> 2] = $16; //@line 1001
  sp = STACKTOP; //@line 1002
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 1006
 ___async_unwind = 0; //@line 1007
 HEAP32[$ReallocAsyncCtx6 >> 2] = 262; //@line 1008
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 1009
 HEAP32[$21 >> 2] = $10; //@line 1010
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 1011
 HEAP32[$22 >> 2] = $12; //@line 1012
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 1013
 HEAP32[$23 >> 2] = $14; //@line 1014
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 1015
 HEAP32[$24 >> 2] = $16; //@line 1016
 sp = STACKTOP; //@line 1017
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_184($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 32318
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32322
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32324
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32326
 if (!(HEAP32[$0 + 4 >> 2] | 0)) {
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(16) | 0; //@line 32329
  _mbed_assert_internal(12827, 11911, 909); //@line 32330
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 206; //@line 32333
   $10 = $ReallocAsyncCtx10 + 4 | 0; //@line 32334
   HEAP32[$10 >> 2] = $4; //@line 32335
   $11 = $ReallocAsyncCtx10 + 8 | 0; //@line 32336
   HEAP32[$11 >> 2] = $6; //@line 32337
   $12 = $ReallocAsyncCtx10 + 12 | 0; //@line 32338
   HEAP32[$12 >> 2] = $8; //@line 32339
   sp = STACKTOP; //@line 32340
   return;
  }
  ___async_unwind = 0; //@line 32343
  HEAP32[$ReallocAsyncCtx10 >> 2] = 206; //@line 32344
  $10 = $ReallocAsyncCtx10 + 4 | 0; //@line 32345
  HEAP32[$10 >> 2] = $4; //@line 32346
  $11 = $ReallocAsyncCtx10 + 8 | 0; //@line 32347
  HEAP32[$11 >> 2] = $6; //@line 32348
  $12 = $ReallocAsyncCtx10 + 12 | 0; //@line 32349
  HEAP32[$12 >> 2] = $8; //@line 32350
  sp = STACKTOP; //@line 32351
  return;
 }
 if (!(HEAP8[$4 + 11 >> 0] | 0)) {
  return;
 }
 $16 = HEAP8[$6 >> 0] | 0; //@line 32360
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 32361
 __ZN12LoRaWANStack9handle_txEhPKhth($8, $16, 0, 0, 2) | 0; //@line 32362
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 207; //@line 32365
  sp = STACKTOP; //@line 32366
  return;
 }
 ___async_unwind = 0; //@line 32369
 HEAP32[$ReallocAsyncCtx7 >> 2] = 207; //@line 32370
 sp = STACKTOP; //@line 32371
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_488($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 35237
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35241
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35243
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35245
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 35247
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 35249
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 35251
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 35253
 $18 = HEAP8[$0 + 36 >> 0] & 1; //@line 35256
 $25 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 35257
 do {
  if ($25 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if ((HEAP32[$8 >> 2] | 0) == 1) {
     if ((HEAP32[$10 >> 2] | 0) == 1) {
      break;
     }
    }
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 35273
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($25, $12, $14, $16, $18); //@line 35274
    if (!___async) {
     ___async_unwind = 0; //@line 35277
    }
    HEAP32[$ReallocAsyncCtx2 >> 2] = 766; //@line 35279
    HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $25; //@line 35281
    HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 35283
    HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 35285
    HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 35287
    HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 35289
    HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 35291
    HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 35293
    HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 35295
    HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $18 & 1; //@line 35298
    sp = STACKTOP; //@line 35299
    return;
   }
  }
 } while (0);
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_284($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 3316
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3318
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3320
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 3322
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3324
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3326
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3328
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3330
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3332
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 3334
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 3336
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 3338
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 3340
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(56) | 0; //@line 3341
 __ZN4mbed5TimerC2Ev($4); //@line 3342
 if (!___async) {
  ___async_unwind = 0; //@line 3345
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 95; //@line 3347
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $2; //@line 3349
 HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $4; //@line 3351
 HEAP16[$ReallocAsyncCtx10 + 12 >> 1] = $6; //@line 3353
 HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $8; //@line 3355
 HEAP32[$ReallocAsyncCtx10 + 20 >> 2] = $10; //@line 3357
 HEAP32[$ReallocAsyncCtx10 + 24 >> 2] = $12; //@line 3359
 HEAP32[$ReallocAsyncCtx10 + 28 >> 2] = $14; //@line 3361
 HEAP32[$ReallocAsyncCtx10 + 32 >> 2] = $16; //@line 3363
 HEAP32[$ReallocAsyncCtx10 + 36 >> 2] = $4; //@line 3365
 HEAP32[$ReallocAsyncCtx10 + 40 >> 2] = $18; //@line 3367
 HEAP32[$ReallocAsyncCtx10 + 44 >> 2] = $20; //@line 3369
 HEAP32[$ReallocAsyncCtx10 + 48 >> 2] = $22; //@line 3371
 HEAP32[$ReallocAsyncCtx10 + 52 >> 2] = $24; //@line 3373
 sp = STACKTOP; //@line 3374
 return;
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $14 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 24298
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24302
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24308
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24312
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  return;
 }
 $17 = (HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) != 0; //@line 24320
 $19 = HEAP32[$4 + 1108 >> 2] | 0; //@line 24322
 _printf(12943, HEAP32[$0 + 12 >> 2] | 0) | 0; //@line 24323
 _printf(13019, $10) | 0; //@line 24324
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 24325
 _putchar(10) | 0; //@line 24326
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 367; //@line 24329
  $20 = $ReallocAsyncCtx2 + 4 | 0; //@line 24330
  HEAP32[$20 >> 2] = $14; //@line 24331
  $21 = $ReallocAsyncCtx2 + 8 | 0; //@line 24332
  $$expand_i1_val = $17 & 1; //@line 24333
  HEAP8[$21 >> 0] = $$expand_i1_val; //@line 24334
  $22 = $ReallocAsyncCtx2 + 12 | 0; //@line 24335
  HEAP32[$22 >> 2] = $19; //@line 24336
  $23 = $ReallocAsyncCtx2 + 16 | 0; //@line 24337
  HEAP32[$23 >> 2] = $4; //@line 24338
  sp = STACKTOP; //@line 24339
  return;
 }
 ___async_unwind = 0; //@line 24342
 HEAP32[$ReallocAsyncCtx2 >> 2] = 367; //@line 24343
 $20 = $ReallocAsyncCtx2 + 4 | 0; //@line 24344
 HEAP32[$20 >> 2] = $14; //@line 24345
 $21 = $ReallocAsyncCtx2 + 8 | 0; //@line 24346
 $$expand_i1_val = $17 & 1; //@line 24347
 HEAP8[$21 >> 0] = $$expand_i1_val; //@line 24348
 $22 = $ReallocAsyncCtx2 + 12 | 0; //@line 24349
 HEAP32[$22 >> 2] = $19; //@line 24350
 $23 = $ReallocAsyncCtx2 + 16 | 0; //@line 24351
 HEAP32[$23 >> 2] = $4; //@line 24352
 sp = STACKTOP; //@line 24353
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_89($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 24064
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24066
 $3 = $2 + 1176 | 0; //@line 24067
 HEAP32[$3 >> 2] = 10108; //@line 24068
 __ZN4mbed6Ticker6detachEv($3); //@line 24069
 $5 = HEAP32[$2 + 1228 >> 2] | 0; //@line 24071
 if (!$5) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 24074
  __ZN4mbed10TimerEventD2Ev($3); //@line 24075
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 112; //@line 24078
   $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 24079
   HEAP32[$12 >> 2] = $2; //@line 24080
   sp = STACKTOP; //@line 24081
   return;
  }
  ___async_unwind = 0; //@line 24084
  HEAP32[$ReallocAsyncCtx7 >> 2] = 112; //@line 24085
  $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 24086
  HEAP32[$12 >> 2] = $2; //@line 24087
  sp = STACKTOP; //@line 24088
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 24093
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 24094
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1216 | 0); //@line 24095
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 111; //@line 24098
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 24099
   HEAP32[$10 >> 2] = $2; //@line 24100
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 24101
   HEAP32[$11 >> 2] = $3; //@line 24102
   sp = STACKTOP; //@line 24103
   return;
  }
  ___async_unwind = 0; //@line 24106
  HEAP32[$ReallocAsyncCtx2 >> 2] = 111; //@line 24107
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 24108
  HEAP32[$10 >> 2] = $2; //@line 24109
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 24110
  HEAP32[$11 >> 2] = $3; //@line 24111
  sp = STACKTOP; //@line 24112
  return;
 }
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_88($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 24009
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24011
 $3 = $2 + 1112 | 0; //@line 24012
 HEAP32[$3 >> 2] = 10108; //@line 24013
 __ZN4mbed6Ticker6detachEv($3); //@line 24014
 $5 = HEAP32[$2 + 1164 >> 2] | 0; //@line 24016
 if (!$5) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 24019
  __ZN4mbed10TimerEventD2Ev($3); //@line 24020
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 114; //@line 24023
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 24024
   HEAP32[$12 >> 2] = $2; //@line 24025
   sp = STACKTOP; //@line 24026
   return;
  }
  ___async_unwind = 0; //@line 24029
  HEAP32[$ReallocAsyncCtx6 >> 2] = 114; //@line 24030
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 24031
  HEAP32[$12 >> 2] = $2; //@line 24032
  sp = STACKTOP; //@line 24033
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 24038
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 24039
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1152 | 0); //@line 24040
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 113; //@line 24043
   $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 24044
   HEAP32[$10 >> 2] = $2; //@line 24045
   $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 24046
   HEAP32[$11 >> 2] = $3; //@line 24047
   sp = STACKTOP; //@line 24048
   return;
  }
  ___async_unwind = 0; //@line 24051
  HEAP32[$ReallocAsyncCtx3 >> 2] = 113; //@line 24052
  $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 24053
  HEAP32[$10 >> 2] = $2; //@line 24054
  $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 24055
  HEAP32[$11 >> 2] = $3; //@line 24056
  sp = STACKTOP; //@line 24057
  return;
 }
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_87($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 23954
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23956
 $3 = $2 + 1048 | 0; //@line 23957
 HEAP32[$3 >> 2] = 10108; //@line 23958
 __ZN4mbed6Ticker6detachEv($3); //@line 23959
 $5 = HEAP32[$2 + 1100 >> 2] | 0; //@line 23961
 if (!$5) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 23964
  __ZN4mbed10TimerEventD2Ev($3); //@line 23965
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 116; //@line 23968
   $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 23969
   HEAP32[$12 >> 2] = $2; //@line 23970
   sp = STACKTOP; //@line 23971
   return;
  }
  ___async_unwind = 0; //@line 23974
  HEAP32[$ReallocAsyncCtx5 >> 2] = 116; //@line 23975
  $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 23976
  HEAP32[$12 >> 2] = $2; //@line 23977
  sp = STACKTOP; //@line 23978
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 23983
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 23984
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1088 | 0); //@line 23985
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 115; //@line 23988
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 23989
   HEAP32[$10 >> 2] = $3; //@line 23990
   $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 23991
   HEAP32[$11 >> 2] = $2; //@line 23992
   sp = STACKTOP; //@line 23993
   return;
  }
  ___async_unwind = 0; //@line 23996
  HEAP32[$ReallocAsyncCtx4 >> 2] = 115; //@line 23997
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 23998
  HEAP32[$10 >> 2] = $3; //@line 23999
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 24000
  HEAP32[$11 >> 2] = $2; //@line 24001
  sp = STACKTOP; //@line 24002
  return;
 }
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_462($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 32342
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32344
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32346
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 32348
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32350
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32352
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32354
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32356
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32358
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 32360
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 32362
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 32364
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 32366
 $27 = HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0; //@line 32369
 $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 32370
 FUNCTION_TABLE_vii[$27 & 31]($2, $4); //@line 32371
 if (!___async) {
  ___async_unwind = 0; //@line 32374
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 104; //@line 32376
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 32378
 HEAP8[$ReallocAsyncCtx + 8 >> 0] = $6; //@line 32380
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $8; //@line 32382
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $10; //@line 32384
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $12; //@line 32386
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $14; //@line 32388
 HEAP32[$ReallocAsyncCtx + 28 >> 2] = $16; //@line 32390
 HEAP32[$ReallocAsyncCtx + 32 >> 2] = $18; //@line 32392
 HEAP32[$ReallocAsyncCtx + 36 >> 2] = $20; //@line 32394
 HEAP32[$ReallocAsyncCtx + 40 >> 2] = $22; //@line 32396
 HEAP32[$ReallocAsyncCtx + 44 >> 2] = $24; //@line 32398
 sp = STACKTOP; //@line 32399
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_299($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 4347
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4349
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4353
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4355
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4357
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4359
 $13 = HEAP32[$2 >> 2] | 0; //@line 4360
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 52 >> 2] | 0; //@line 4363
 $18 = HEAP16[HEAP32[$0 + 8 >> 2] >> 1] & 255; //@line 4365
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 4366
 $19 = FUNCTION_TABLE_iiii[$16 & 15]($13, $6, $18) | 0; //@line 4367
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 617; //@line 4370
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 4371
  HEAP32[$20 >> 2] = $8; //@line 4372
  $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 4373
  HEAP32[$21 >> 2] = $2; //@line 4374
  $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 4375
  HEAP32[$22 >> 2] = $10; //@line 4376
  $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 4377
  HEAP32[$23 >> 2] = $12; //@line 4378
  sp = STACKTOP; //@line 4379
  return;
 }
 HEAP32[___async_retval >> 2] = $19; //@line 4383
 ___async_unwind = 0; //@line 4384
 HEAP32[$ReallocAsyncCtx6 >> 2] = 617; //@line 4385
 $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 4386
 HEAP32[$20 >> 2] = $8; //@line 4387
 $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 4388
 HEAP32[$21 >> 2] = $2; //@line 4389
 $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 4390
 HEAP32[$22 >> 2] = $10; //@line 4391
 $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 4392
 HEAP32[$23 >> 2] = $12; //@line 4393
 sp = STACKTOP; //@line 4394
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23173
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23175
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23177
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23179
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23181
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23183
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23185
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23187
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23189
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23191
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 23193
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 23195
 $25 = $4 + 1280 | 0; //@line 23196
 HEAP32[$25 >> 2] = 0; //@line 23197
 HEAP32[$25 + 4 >> 2] = 0; //@line 23197
 HEAP32[$25 + 8 >> 2] = 0; //@line 23197
 HEAP32[$25 + 12 >> 2] = 0; //@line 23197
 HEAP8[$4 + 1296 >> 0] = 1; //@line 23199
 HEAP32[$2 >> 2] = 684; //@line 23200
 HEAP32[$4 + 668 >> 2] = $6; //@line 23202
 HEAP32[$4 + 672 >> 2] = $8; //@line 23204
 HEAP32[$4 + 652 >> 2] = $10; //@line 23206
 HEAP32[$4 + 656 >> 2] = $12; //@line 23208
 HEAP32[$4 + 664 >> 2] = $14; //@line 23210
 HEAP32[$4 + 660 >> 2] = $16; //@line 23212
 HEAP32[$4 + 676 >> 2] = $18; //@line 23214
 HEAP32[$4 + 680 >> 2] = $20; //@line 23216
 HEAP32[$4 + 684 >> 2] = $22; //@line 23218
 HEAP32[$4 + 784 >> 2] = 0; //@line 23220
 if (($18 | 0) == -1) {
  $39 = _emscripten_asm_const_ii(4, $4 | 0) | 0; //@line 23223
  return;
 }
 _emscripten_asm_const_iii(3, HEAP32[$24 >> 2] | 0, 1) | 0; //@line 23227
 $39 = _emscripten_asm_const_ii(4, $4 | 0) | 0; //@line 23228
 return;
}
function ___overflow($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10539
 STACKTOP = STACKTOP + 16 | 0; //@line 10540
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10540
 $2 = sp; //@line 10541
 $3 = $1 & 255; //@line 10542
 HEAP8[$2 >> 0] = $3; //@line 10543
 $4 = $0 + 16 | 0; //@line 10544
 $5 = HEAP32[$4 >> 2] | 0; //@line 10545
 if (!$5) {
  if (!(___towrite($0) | 0)) {
   $12 = HEAP32[$4 >> 2] | 0; //@line 10552
   label = 4; //@line 10553
  } else {
   $$0 = -1; //@line 10555
  }
 } else {
  $12 = $5; //@line 10558
  label = 4; //@line 10559
 }
 do {
  if ((label | 0) == 4) {
   $9 = $0 + 20 | 0; //@line 10563
   $10 = HEAP32[$9 >> 2] | 0; //@line 10564
   if ($10 >>> 0 < $12 >>> 0) {
    $13 = $1 & 255; //@line 10567
    if (($13 | 0) != (HEAP8[$0 + 75 >> 0] | 0)) {
     HEAP32[$9 >> 2] = $10 + 1; //@line 10574
     HEAP8[$10 >> 0] = $3; //@line 10575
     $$0 = $13; //@line 10576
     break;
    }
   }
   $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 10581
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 10582
   $21 = FUNCTION_TABLE_iiii[$20 & 15]($0, $2, 1) | 0; //@line 10583
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 734; //@line 10586
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 10588
    sp = STACKTOP; //@line 10589
    STACKTOP = sp; //@line 10590
    return 0; //@line 10590
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 10592
   if (($21 | 0) == 1) {
    $$0 = HEAPU8[$2 >> 0] | 0; //@line 10597
   } else {
    $$0 = -1; //@line 10599
   }
  }
 } while (0);
 STACKTOP = sp; //@line 10603
 return $$0 | 0; //@line 10603
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_275($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 2550
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2552
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2554
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 2556
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2558
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2560
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2562
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2564
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2566
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 2568
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 2570
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 2572
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 2574
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(52) | 0; //@line 2575
 _wait_ms(1); //@line 2576
 if (!___async) {
  ___async_unwind = 0; //@line 2579
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 94; //@line 2581
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $2; //@line 2583
 HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $4; //@line 2585
 HEAP16[$ReallocAsyncCtx14 + 12 >> 1] = $6; //@line 2587
 HEAP32[$ReallocAsyncCtx14 + 16 >> 2] = $8; //@line 2589
 HEAP32[$ReallocAsyncCtx14 + 20 >> 2] = $10; //@line 2591
 HEAP32[$ReallocAsyncCtx14 + 24 >> 2] = $12; //@line 2593
 HEAP32[$ReallocAsyncCtx14 + 28 >> 2] = $14; //@line 2595
 HEAP32[$ReallocAsyncCtx14 + 32 >> 2] = $16; //@line 2597
 HEAP32[$ReallocAsyncCtx14 + 36 >> 2] = $18; //@line 2599
 HEAP32[$ReallocAsyncCtx14 + 40 >> 2] = $20; //@line 2601
 HEAP32[$ReallocAsyncCtx14 + 44 >> 2] = $22; //@line 2603
 HEAP32[$ReallocAsyncCtx14 + 48 >> 2] = $24; //@line 2605
 sp = STACKTOP; //@line 2606
 return;
}
function __ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $15 = 0, $2 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 9742
 STACKTOP = STACKTOP + 16 | 0; //@line 9743
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9743
 $2 = $0 + 1876 | 0; //@line 9746
 if (!(HEAP32[$2 >> 2] | 0)) {
  _printf(11863, sp) | 0; //@line 9750
  _printf(12660, sp + 8 | 0) | 0; //@line 9751
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9752
  _putchar(10) | 0; //@line 9753
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 322; //@line 9756
   sp = STACKTOP; //@line 9757
   STACKTOP = sp; //@line 9758
   return 0; //@line 9758
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9760
  $$0 = -1012; //@line 9761
  STACKTOP = sp; //@line 9762
  return $$0 | 0; //@line 9762
 } else {
  $6 = HEAP32[$1 + 8 >> 2] | 0; //@line 9765
  $8 = HEAP32[$1 + 12 >> 2] | 0; //@line 9767
  $10 = HEAP32[$1 + 16 >> 2] | 0; //@line 9769
  HEAP8[$0 + 1936 >> 0] = 1; //@line 9771
  HEAP32[$0 + 1944 >> 2] = $6; //@line 9773
  HEAP32[$0 + 1948 >> 2] = $8; //@line 9775
  HEAP32[$0 + 1952 >> 2] = $10; //@line 9777
  HEAP32[$2 >> 2] = 3; //@line 9778
  $AsyncCtx4 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9779
  $15 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 9780
  if (___async) {
   HEAP32[$AsyncCtx4 >> 2] = 323; //@line 9783
   sp = STACKTOP; //@line 9784
   STACKTOP = sp; //@line 9785
   return 0; //@line 9785
  }
  _emscripten_free_async_context($AsyncCtx4 | 0); //@line 9787
  $$0 = $15; //@line 9788
  STACKTOP = sp; //@line 9789
  return $$0 | 0; //@line 9789
 }
 return 0; //@line 9791
}
function __ZN16SX1276_LoRaRadio10init_radioEP12radio_events($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 50
 STACKTOP = STACKTOP + 16 | 0; //@line 51
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 51
 $vararg_buffer1 = sp + 8 | 0; //@line 52
 $vararg_buffer = sp; //@line 53
 HEAP32[$0 + 784 >> 2] = $1; //@line 55
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 58
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 59
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 60
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 47; //@line 63
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 65
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 67
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 69
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer1; //@line 71
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer1; //@line 73
  sp = STACKTOP; //@line 74
  STACKTOP = sp; //@line 75
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 77
 $11 = $0 + 689 | 0; //@line 78
 HEAP8[$11 >> 0] = 0; //@line 79
 _printf(10880, $vararg_buffer) | 0; //@line 80
 HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$11 >> 0]; //@line 83
 _printf(11055, $vararg_buffer1) | 0; //@line 84
 $AsyncCtx4 = _emscripten_alloc_async_context(8, sp) | 0; //@line 85
 _putchar(10) | 0; //@line 86
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 48; //@line 89
  HEAP32[$AsyncCtx4 + 4 >> 2] = $0; //@line 91
  sp = STACKTOP; //@line 92
  STACKTOP = sp; //@line 93
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx4 | 0); //@line 95
  HEAP8[$0 + 688 >> 0] = 0; //@line 97
  STACKTOP = sp; //@line 98
  return;
 }
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_316($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 5254
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5256
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5258
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5260
 $7 = HEAP32[$2 >> 2] | 0; //@line 5261
 $9 = $6 + 12 | 0; //@line 5263
 HEAP32[$6 >> 2] = 521; //@line 5264
 HEAP32[$6 + 4 >> 2] = 0; //@line 5266
 HEAP32[$6 + 8 >> 2] = $4; //@line 5268
 HEAP32[$9 >> 2] = 848; //@line 5269
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 5270
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($7, $4 + 1076 | 0, $6); //@line 5271
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 522; //@line 5274
  $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 5275
  HEAP32[$10 >> 2] = $9; //@line 5276
  $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 5277
  HEAP32[$11 >> 2] = $2; //@line 5278
  $12 = $ReallocAsyncCtx6 + 12 | 0; //@line 5279
  HEAP32[$12 >> 2] = $4; //@line 5280
  $13 = $ReallocAsyncCtx6 + 16 | 0; //@line 5281
  HEAP32[$13 >> 2] = $6; //@line 5282
  sp = STACKTOP; //@line 5283
  return;
 }
 ___async_unwind = 0; //@line 5286
 HEAP32[$ReallocAsyncCtx6 >> 2] = 522; //@line 5287
 $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 5288
 HEAP32[$10 >> 2] = $9; //@line 5289
 $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 5290
 HEAP32[$11 >> 2] = $2; //@line 5291
 $12 = $ReallocAsyncCtx6 + 12 | 0; //@line 5292
 HEAP32[$12 >> 2] = $4; //@line 5293
 $13 = $ReallocAsyncCtx6 + 16 | 0; //@line 5294
 HEAP32[$13 >> 2] = $6; //@line 5295
 sp = STACKTOP; //@line 5296
 return;
}
function _equeue_cancel__async_cb($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$sink$in$i$i = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18893
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18895
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18897
 $7 = $2 + 156 | 0; //@line 18898
 _equeue_mutex_lock($7); //@line 18899
 $8 = $2 + 24 | 0; //@line 18900
 $9 = HEAP32[$8 >> 2] | 0; //@line 18901
 L3 : do {
  if (!$9) {
   $$02329$i$i = $8; //@line 18905
   label = 9; //@line 18906
  } else {
   $11 = HEAP32[$6 >> 2] | 0; //@line 18908
   $$025$i$i = $8; //@line 18909
   $13 = $9; //@line 18909
   while (1) {
    $12 = HEAP32[$13 >> 2] | 0; //@line 18911
    if ($12 >>> 0 >= $11 >>> 0) {
     break;
    }
    $15 = $13 + 8 | 0; //@line 18916
    $16 = HEAP32[$15 >> 2] | 0; //@line 18917
    if (!$16) {
     $$02329$i$i = $15; //@line 18920
     label = 9; //@line 18921
     break L3;
    } else {
     $$025$i$i = $15; //@line 18924
     $13 = $16; //@line 18924
    }
   }
   if (($12 | 0) == ($11 | 0)) {
    HEAP32[$4 + -24 >> 2] = $13; //@line 18930
    $$02330$i$i = $$025$i$i; //@line 18933
    $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 18933
   } else {
    $$02329$i$i = $$025$i$i; //@line 18935
    label = 9; //@line 18936
   }
  }
 } while (0);
 if ((label | 0) == 9) {
  HEAP32[$4 + -24 >> 2] = 0; //@line 18942
  $$02330$i$i = $$02329$i$i; //@line 18943
  $$sink$in$i$i = $$02329$i$i; //@line 18943
 }
 HEAP32[$4 + -28 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 18947
 HEAP32[$$02330$i$i >> 2] = $6; //@line 18948
 _equeue_mutex_unlock($7); //@line 18949
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $13 = 0, $16 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 25362
 $1 = $0 + 4 | 0; //@line 25363
 $2 = HEAP32[$1 >> 2] | 0; //@line 25364
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 25367
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 25368
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 25369
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 638; //@line 25372
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 25374
  sp = STACKTOP; //@line 25375
  return 0; //@line 25376
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 25378
 $7 = HEAP32[$1 >> 2] | 0; //@line 25379
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] | 0; //@line 25382
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 25383
 $11 = FUNCTION_TABLE_ii[$10 & 15]($7) | 0; //@line 25384
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 639; //@line 25387
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 25389
  sp = STACKTOP; //@line 25390
  return 0; //@line 25391
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 25393
 $13 = HEAP32[$1 >> 2] | 0; //@line 25394
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 76 >> 2] | 0; //@line 25397
 $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 25398
 FUNCTION_TABLE_vi[$16 & 1023]($13); //@line 25399
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 640; //@line 25402
  HEAP32[$AsyncCtx5 + 4 >> 2] = $11; //@line 25404
  sp = STACKTOP; //@line 25405
  return 0; //@line 25406
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 25408
  return $11 | 0; //@line 25409
 }
 return 0; //@line 25411
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $17 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 5229
 HEAP32[$0 >> 2] = 724; //@line 5230
 HEAP8[$0 + 4 >> 0] = 0; //@line 5232
 $4 = __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5234
 $7 = HEAP32[(HEAP32[$1 >> 2] | 0) + 72 >> 2] | 0; //@line 5237
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5238
 FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 5239
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 174; //@line 5242
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 5244
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 5246
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 5248
  sp = STACKTOP; //@line 5249
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5252
 $12 = HEAP32[HEAP32[$1 >> 2] >> 2] | 0; //@line 5254
 $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5255
 FUNCTION_TABLE_vii[$12 & 31]($1, $4); //@line 5256
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 175; //@line 5259
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 5261
  HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 5263
  sp = STACKTOP; //@line 5264
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 5267
 $17 = HEAP32[(HEAP32[$1 >> 2] | 0) + 76 >> 2] | 0; //@line 5270
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5271
 FUNCTION_TABLE_vi[$17 & 1023]($1); //@line 5272
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 176; //@line 5275
  sp = STACKTOP; //@line 5276
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 5279
  return;
 }
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb_65($0) {
 $0 = $0 | 0;
 var $12 = 0, $16 = 0, $2 = 0, $20 = 0, $22 = 0, $29 = 0, $5 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22688
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22690
 $5 = (HEAP8[$2 + 373 >> 0] | 0) != 0; //@line 22696
 if (HEAP32[$2 + 364 >> 2] | 0) {
  if ($5) {
   HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 6; //@line 22702
  }
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 6; //@line 22707
  $29 = $2 + 944 | 0; //@line 22708
  HEAP8[$29 >> 0] = HEAP8[$29 >> 0] | 32; //@line 22711
  return;
 }
 if ($5) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 5; //@line 22718
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 5; //@line 22723
 $12 = $2 + 356 | 0; //@line 22724
 $16 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$12 >> 2] | 0, HEAP32[$2 + 980 >> 2] | 0) | 0; //@line 22728
 if ($16 >>> 0 < (HEAP32[$2 + 976 >> 2] | 0) >>> 0) {
  return;
 }
 $20 = HEAP32[$12 >> 2] | 0; //@line 22735
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 22737
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($20, $2 + 1056 | 0); //@line 22738
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 423; //@line 22741
  $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 22742
  HEAP32[$22 >> 2] = $2; //@line 22743
  sp = STACKTOP; //@line 22744
  return;
 }
 ___async_unwind = 0; //@line 22747
 HEAP32[$ReallocAsyncCtx5 >> 2] = 423; //@line 22748
 $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 22749
 HEAP32[$22 >> 2] = $2; //@line 22750
 sp = STACKTOP; //@line 22751
 return;
}
function _fflush__async_cb_394($0) {
 $0 = $0 | 0;
 var $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $13 = 0, $16 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19986
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19988
 $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 19990
 L3 : do {
  if (!$$02325) {
   $$024$lcssa = $AsyncRetVal; //@line 19994
  } else {
   $$02327 = $$02325; //@line 19996
   $$02426 = $AsyncRetVal; //@line 19996
   while (1) {
    if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
     $16 = ___lockfile($$02327) | 0; //@line 20003
    } else {
     $16 = 0; //@line 20005
    }
    if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
     break;
    }
    if ($16 | 0) {
     ___unlockfile($$02327); //@line 20017
    }
    $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 20020
    if (!$$023) {
     $$024$lcssa = $$02426; //@line 20023
     break L3;
    } else {
     $$02327 = $$023; //@line 20026
    }
   }
   $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 20029
   $13 = ___fflush_unlocked($$02327) | 0; //@line 20030
   if (!___async) {
    HEAP32[___async_retval >> 2] = $13; //@line 20034
    ___async_unwind = 0; //@line 20035
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 738; //@line 20037
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$02426; //@line 20039
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $16; //@line 20041
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327; //@line 20043
   sp = STACKTOP; //@line 20044
   return;
  }
 } while (0);
 ___ofl_unlock(); //@line 20048
 HEAP32[___async_retval >> 2] = $$024$lcssa; //@line 20050
 return;
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 32197
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32199
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 32201
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32203
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32205
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32207
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32209
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32211
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32213
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 32215
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 32217
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 32219
 $25 = HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] | 0; //@line 32222
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 32223
 FUNCTION_TABLE_viiiiiiiiiiiiii[$25 & 1]($2, 0, $4, 0, 0, 4800, 0, 5, 0, 0, 0, 0, 0, $6); //@line 32224
 if (!___async) {
  ___async_unwind = 0; //@line 32227
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 105; //@line 32229
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 32231
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $8; //@line 32233
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 32235
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $12; //@line 32237
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $14; //@line 32239
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $16; //@line 32241
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $18; //@line 32243
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $20; //@line 32245
 HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $22; //@line 32247
 sp = STACKTOP; //@line 32248
 return;
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb_79($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 23614
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23618
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23620
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23622
 if (!$AsyncRetVal) {
  $10 = HEAP16[$0 + 4 >> 1] & 255; //@line 23626
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 23627
  $11 = _mbedtls_cipher_cmac_update(21844, $4, $10) | 0; //@line 23628
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 589; //@line 23631
   $12 = $ReallocAsyncCtx + 4 | 0; //@line 23632
   HEAP32[$12 >> 2] = $6; //@line 23633
   sp = STACKTOP; //@line 23634
   return;
  }
  HEAP32[___async_retval >> 2] = $11; //@line 23638
  ___async_unwind = 0; //@line 23639
  HEAP32[$ReallocAsyncCtx >> 2] = 589; //@line 23640
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 23641
  HEAP32[$12 >> 2] = $6; //@line 23642
  sp = STACKTOP; //@line 23643
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 23646
  _mbedtls_cipher_free(21844); //@line 23647
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 591; //@line 23650
   $14 = $ReallocAsyncCtx5 + 4 | 0; //@line 23651
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 23652
   sp = STACKTOP; //@line 23653
   return;
  }
  ___async_unwind = 0; //@line 23656
  HEAP32[$ReallocAsyncCtx5 >> 2] = 591; //@line 23657
  $14 = $ReallocAsyncCtx5 + 4 | 0; //@line 23658
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 23659
  sp = STACKTOP; //@line 23660
  return;
 }
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv($0) {
 $0 = $0 | 0;
 var $10 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 12982
 $2 = HEAP32[$0 + 16 >> 2] | 0; //@line 12984
 $4 = HEAP16[$0 + 20 >> 1] | 0; //@line 12986
 $6 = HEAP16[$0 + 22 >> 1] | 0; //@line 12988
 $8 = HEAP8[$0 + 24 >> 0] | 0; //@line 12990
 $9 = $0 + 12 | 0; //@line 12991
 $10 = HEAP32[$9 >> 2] | 0; //@line 12992
 do {
  if (!$10) {
   $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 12996
   _mbed_assert_internal(14997, 15002, 2830); //@line 12997
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 405; //@line 13000
    HEAP32[$AsyncCtx2 + 4 >> 2] = $9; //@line 13002
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 13004
    HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 13006
    HEAP16[$AsyncCtx2 + 16 >> 1] = $4; //@line 13008
    HEAP16[$AsyncCtx2 + 18 >> 1] = $6; //@line 13010
    HEAP8[$AsyncCtx2 + 20 >> 0] = $8; //@line 13012
    sp = STACKTOP; //@line 13013
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 13016
    $19 = HEAP32[$9 >> 2] | 0; //@line 13018
    break;
   }
  } else {
   $19 = $10; //@line 13022
  }
 } while (0);
 $18 = HEAP32[$19 >> 2] | 0; //@line 13025
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13026
 FUNCTION_TABLE_viiiii[$18 & 7]($0, $2, $4, $6, $8); //@line 13027
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 406; //@line 13030
  sp = STACKTOP; //@line 13031
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13034
  return;
 }
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_103($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 24615
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24617
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24619
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24621
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24623
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 24626
  $9 = _mbedtls_cipher_cmac_update(21844, $2, $4) | 0; //@line 24627
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 584; //@line 24630
   $10 = $ReallocAsyncCtx + 4 | 0; //@line 24631
   HEAP32[$10 >> 2] = $6; //@line 24632
   sp = STACKTOP; //@line 24633
   return;
  }
  HEAP32[___async_retval >> 2] = $9; //@line 24637
  ___async_unwind = 0; //@line 24638
  HEAP32[$ReallocAsyncCtx >> 2] = 584; //@line 24639
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 24640
  HEAP32[$10 >> 2] = $6; //@line 24641
  sp = STACKTOP; //@line 24642
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 24645
  _mbedtls_cipher_free(21844); //@line 24646
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 586; //@line 24649
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 24650
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 24651
   sp = STACKTOP; //@line 24652
   return;
  }
  ___async_unwind = 0; //@line 24655
  HEAP32[$ReallocAsyncCtx6 >> 2] = 586; //@line 24656
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 24657
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 24658
  sp = STACKTOP; //@line 24659
  return;
 }
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 19599
 STACKTOP = STACKTOP + 16 | 0; //@line 19600
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 19600
 $$byval_copy = sp; //@line 19601
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19603
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19605
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19607
 $8 = HEAP32[$2 + 1328 >> 2] | 0; //@line 19609
 HEAP32[$4 >> 2] = 347; //@line 19610
 HEAP32[$4 + 4 >> 2] = 0; //@line 19612
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 19613
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 19614
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 19614
 $9 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($8, $2, $$byval_copy) | 0; //@line 19615
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 440; //@line 19618
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 19619
  HEAP32[$10 >> 2] = $6; //@line 19620
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 19621
  HEAP32[$11 >> 2] = $2; //@line 19622
  sp = STACKTOP; //@line 19623
  STACKTOP = sp; //@line 19624
  return;
 }
 HEAP32[___async_retval >> 2] = $9; //@line 19627
 ___async_unwind = 0; //@line 19628
 HEAP32[$ReallocAsyncCtx4 >> 2] = 440; //@line 19629
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 19630
 HEAP32[$10 >> 2] = $6; //@line 19631
 $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 19632
 HEAP32[$11 >> 2] = $2; //@line 19633
 sp = STACKTOP; //@line 19634
 STACKTOP = sp; //@line 19635
 return;
}
function __ZN7LoRaPHY25setup_public_network_modeEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $14 = 0, $17 = 0, $2 = 0, $3 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 25228
 $2 = $0 + 4 | 0; //@line 25229
 $3 = HEAP32[$2 >> 2] | 0; //@line 25230
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 72 >> 2] | 0; //@line 25233
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 25234
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 25235
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 631; //@line 25238
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 25240
  HEAP8[$AsyncCtx + 8 >> 0] = $1 & 1; //@line 25243
  sp = STACKTOP; //@line 25244
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 25247
 $9 = HEAP32[$2 >> 2] | 0; //@line 25248
 $12 = HEAP32[(HEAP32[$9 >> 2] | 0) + 48 >> 2] | 0; //@line 25251
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 25252
 FUNCTION_TABLE_vii[$12 & 31]($9, $1); //@line 25253
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 632; //@line 25256
  HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 25258
  sp = STACKTOP; //@line 25259
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 25262
 $14 = HEAP32[$2 >> 2] | 0; //@line 25263
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 76 >> 2] | 0; //@line 25266
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 25267
 FUNCTION_TABLE_vi[$17 & 1023]($14); //@line 25268
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 633; //@line 25271
  sp = STACKTOP; //@line 25272
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 25275
  return;
 }
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 22579
 STACKTOP = STACKTOP + 16 | 0; //@line 22580
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 22580
 $$byval_copy = sp; //@line 22581
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22583
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22585
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22587
 $8 = HEAP32[$2 + 1328 >> 2] | 0; //@line 22589
 HEAP32[$4 >> 2] = 347; //@line 22590
 HEAP32[$4 + 4 >> 2] = 0; //@line 22592
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 22593
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 22594
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 22594
 $9 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($8, $2, $$byval_copy) | 0; //@line 22595
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 420; //@line 22598
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 22599
  HEAP32[$10 >> 2] = $6; //@line 22600
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 22601
  HEAP32[$11 >> 2] = $2; //@line 22602
  sp = STACKTOP; //@line 22603
  STACKTOP = sp; //@line 22604
  return;
 }
 HEAP32[___async_retval >> 2] = $9; //@line 22607
 ___async_unwind = 0; //@line 22608
 HEAP32[$ReallocAsyncCtx4 >> 2] = 420; //@line 22609
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 22610
 HEAP32[$10 >> 2] = $6; //@line 22611
 $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 22612
 HEAP32[$11 >> 2] = $2; //@line 22613
 sp = STACKTOP; //@line 22614
 STACKTOP = sp; //@line 22615
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_442($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 30771
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30775
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30777
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30779
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30781
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30783
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30785
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 30788
 _equeue_event_delay($4, $6); //@line 30789
 _equeue_event_dtor($4, 356); //@line 30790
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 30791
 $16 = _equeue_post($8, 357, $4) | 0; //@line 30792
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 650; //@line 30795
  $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 30796
  HEAP32[$17 >> 2] = $10; //@line 30797
  $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 30798
  HEAP32[$18 >> 2] = $12; //@line 30799
  $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 30800
  HEAP32[$19 >> 2] = $14; //@line 30801
  sp = STACKTOP; //@line 30802
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 30806
 ___async_unwind = 0; //@line 30807
 HEAP32[$ReallocAsyncCtx4 >> 2] = 650; //@line 30808
 $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 30809
 HEAP32[$17 >> 2] = $10; //@line 30810
 $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 30811
 HEAP32[$18 >> 2] = $12; //@line 30812
 $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 30813
 HEAP32[$19 >> 2] = $14; //@line 30814
 sp = STACKTOP; //@line 30815
 return;
}
function _mbedtls_cipher_cmac_starts__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $27 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18382
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18384
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18386
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 18389
  $27 = ___async_retval; //@line 18390
  HEAP32[$27 >> 2] = $$0; //@line 18391
  return;
 }
 switch (HEAP32[HEAP32[$2 >> 2] >> 2] | 0) {
 case 36:
 case 4:
 case 3:
 case 2:
  {
   break;
  }
 default:
  {
   $$0 = -24832; //@line 18401
   $27 = ___async_retval; //@line 18402
   HEAP32[$27 >> 2] = $$0; //@line 18403
   return;
  }
 }
 $9 = _calloc(1, 36) | 0; //@line 18407
 if (!$9) {
  $$0 = -24960; //@line 18410
  $27 = ___async_retval; //@line 18411
  HEAP32[$27 >> 2] = $$0; //@line 18412
  return;
 }
 HEAP32[$4 + 64 >> 2] = $9; //@line 18416
 HEAP8[$9 >> 0] = 0; //@line 18418
 HEAP8[$9 + 1 >> 0] = 0; //@line 18420
 HEAP8[$9 + 2 >> 0] = 0; //@line 18422
 HEAP8[$9 + 3 >> 0] = 0; //@line 18424
 HEAP8[$9 + 4 >> 0] = 0; //@line 18426
 HEAP8[$9 + 5 >> 0] = 0; //@line 18428
 HEAP8[$9 + 6 >> 0] = 0; //@line 18430
 HEAP8[$9 + 7 >> 0] = 0; //@line 18432
 HEAP8[$9 + 8 >> 0] = 0; //@line 18434
 HEAP8[$9 + 9 >> 0] = 0; //@line 18436
 HEAP8[$9 + 10 >> 0] = 0; //@line 18438
 HEAP8[$9 + 11 >> 0] = 0; //@line 18440
 HEAP8[$9 + 12 >> 0] = 0; //@line 18442
 HEAP8[$9 + 13 >> 0] = 0; //@line 18444
 HEAP8[$9 + 14 >> 0] = 0; //@line 18446
 HEAP8[$9 + 15 >> 0] = 0; //@line 18447
 $$0 = 0; //@line 18448
 $27 = ___async_retval; //@line 18449
 HEAP32[$27 >> 2] = $$0; //@line 18450
 return;
}
function __ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_33($0) {
 $0 = $0 | 0;
 var $13 = 0, $2 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 20665
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20667
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20669
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 20674
  _mbed_assert_internal(12827, 12836, 201); //@line 20675
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 411; //@line 20678
   $7 = $ReallocAsyncCtx4 + 4 | 0; //@line 20679
   HEAP32[$7 >> 2] = $2; //@line 20680
   $8 = $ReallocAsyncCtx4 + 8 | 0; //@line 20681
   HEAP32[$8 >> 2] = $4; //@line 20682
   sp = STACKTOP; //@line 20683
   return;
  }
  ___async_unwind = 0; //@line 20686
  HEAP32[$ReallocAsyncCtx4 >> 2] = 411; //@line 20687
  $7 = $ReallocAsyncCtx4 + 4 | 0; //@line 20688
  HEAP32[$7 >> 2] = $2; //@line 20689
  $8 = $ReallocAsyncCtx4 + 8 | 0; //@line 20690
  HEAP32[$8 >> 2] = $4; //@line 20691
  sp = STACKTOP; //@line 20692
  return;
 }
 $9 = $4 + 944 | 0; //@line 20695
 HEAP8[$9 >> 0] = HEAP8[$9 >> 0] | 34; //@line 20698
 $13 = HEAP32[$4 + 356 >> 2] | 0; //@line 20700
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 20702
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($13, $4 + 996 | 0, 1); //@line 20703
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 412; //@line 20706
  sp = STACKTOP; //@line 20707
  return;
 }
 ___async_unwind = 0; //@line 20710
 HEAP32[$ReallocAsyncCtx2 >> 2] = 412; //@line 20711
 sp = STACKTOP; //@line 20712
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 35174
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35178
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35180
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35182
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 35184
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 35186
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 35188
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 35191
 $21 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 35192
 if ($21 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   if ((HEAP32[$8 >> 2] | 0) != 1) {
    $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 35201
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($21, $10, $12, $14, $16); //@line 35202
    if (!___async) {
     ___async_unwind = 0; //@line 35205
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 767; //@line 35207
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $21; //@line 35209
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 35211
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 35213
    HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 35215
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 35217
    HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 35219
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 35221
    HEAP8[$ReallocAsyncCtx + 32 >> 0] = $16 & 1; //@line 35224
    sp = STACKTOP; //@line 35225
    return;
   }
  }
 }
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_111($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 24974
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24976
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24978
 $5 = $2 + 1892 | 0; //@line 24979
 $6 = HEAP32[$5 >> 2] | 0; //@line 24980
 if (!$6) {
  return;
 }
 $10 = HEAP32[$2 + 2288 >> 2] | 0; //@line 24987
 $12 = HEAP32[$6 + 4 >> 2] | 0; //@line 24989
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 24990
 FUNCTION_TABLE_vii[$12 & 31]($4, $2 + 1880 | 0); //@line 24991
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 214; //@line 24994
  $13 = $ReallocAsyncCtx + 4 | 0; //@line 24995
  HEAP32[$13 >> 2] = $5; //@line 24996
  $14 = $ReallocAsyncCtx + 8 | 0; //@line 24997
  HEAP32[$14 >> 2] = $4; //@line 24998
  $15 = $ReallocAsyncCtx + 12 | 0; //@line 24999
  HEAP32[$15 >> 2] = $10; //@line 25000
  $16 = $ReallocAsyncCtx + 16 | 0; //@line 25001
  HEAP32[$16 >> 2] = $4; //@line 25002
  sp = STACKTOP; //@line 25003
  return;
 }
 ___async_unwind = 0; //@line 25006
 HEAP32[$ReallocAsyncCtx >> 2] = 214; //@line 25007
 $13 = $ReallocAsyncCtx + 4 | 0; //@line 25008
 HEAP32[$13 >> 2] = $5; //@line 25009
 $14 = $ReallocAsyncCtx + 8 | 0; //@line 25010
 HEAP32[$14 >> 2] = $4; //@line 25011
 $15 = $ReallocAsyncCtx + 12 | 0; //@line 25012
 HEAP32[$15 >> 2] = $10; //@line 25013
 $16 = $ReallocAsyncCtx + 16 | 0; //@line 25014
 HEAP32[$16 >> 2] = $4; //@line 25015
 sp = STACKTOP; //@line 25016
 return;
}
function __ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_121($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 25312
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25316
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 25318
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 25319
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 25323
  $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 25324
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 25325
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 370; //@line 25328
   $10 = $ReallocAsyncCtx + 4 | 0; //@line 25329
   HEAP32[$10 >> 2] = $4; //@line 25330
   $11 = $ReallocAsyncCtx + 8 | 0; //@line 25331
   HEAP32[$11 >> 2] = $AsyncRetVal; //@line 25332
   sp = STACKTOP; //@line 25333
   return;
  }
  ___async_unwind = 0; //@line 25336
  HEAP32[$ReallocAsyncCtx >> 2] = 370; //@line 25337
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 25338
  HEAP32[$10 >> 2] = $4; //@line 25339
  $11 = $ReallocAsyncCtx + 8 | 0; //@line 25340
  HEAP32[$11 >> 2] = $AsyncRetVal; //@line 25341
  sp = STACKTOP; //@line 25342
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 25349
 _mbed_assert_internal(12827, 12836, 141); //@line 25350
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 371; //@line 25353
  sp = STACKTOP; //@line 25354
  return;
 }
 ___async_unwind = 0; //@line 25357
 HEAP32[$ReallocAsyncCtx3 >> 2] = 371; //@line 25358
 sp = STACKTOP; //@line 25359
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 31533
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31535
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31537
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31539
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31541
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31543
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31545
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31547
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31549
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 31551
 HEAP8[$2 + 1097 >> 0] = HEAP8[___async_retval >> 0] | 0; //@line 31555
 HEAP8[$4 >> 0] = 0; //@line 31556
 HEAP8[$6 >> 0] = HEAP8[$2 + 1156 >> 0] << 7; //@line 31560
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 31561
 $24 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt($2, $8, $10, 0, 0, 0) | 0; //@line 31562
 if (!___async) {
  HEAP32[___async_retval >> 2] = $24; //@line 31566
  ___async_unwind = 0; //@line 31567
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 469; //@line 31569
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 31571
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $12; //@line 31573
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $14; //@line 31575
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $16; //@line 31577
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $18; //@line 31579
 HEAP32[$ReallocAsyncCtx4 + 24 >> 2] = $6; //@line 31581
 HEAP32[$ReallocAsyncCtx4 + 28 >> 2] = $4; //@line 31583
 sp = STACKTOP; //@line 31584
 return;
}
function __ZN4mbed5Timer7read_msEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $21 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4058
 $2 = $0 + 16 | 0; //@line 4060
 $4 = HEAP32[$2 >> 2] | 0; //@line 4062
 $7 = HEAP32[$2 + 4 >> 2] | 0; //@line 4065
 if (!(HEAP32[$0 >> 2] | 0)) {
  $29 = 0; //@line 4069
  $30 = 0; //@line 4069
  $31 = _i64Add($29 | 0, $30 | 0, $4 | 0, $7 | 0) | 0; //@line 4070
  $32 = tempRet0; //@line 4071
  $33 = ___udivdi3($31 | 0, $32 | 0, 1e3, 0) | 0; //@line 4072
  $34 = tempRet0; //@line 4073
  return $33 | 0; //@line 4074
 }
 $11 = HEAP32[$0 + 24 >> 2] | 0; //@line 4077
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 4078
 $12 = _ticker_read_us($11) | 0; //@line 4079
 $13 = tempRet0; //@line 4080
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 163; //@line 4083
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4085
  $16 = $AsyncCtx + 8 | 0; //@line 4087
  HEAP32[$16 >> 2] = $4; //@line 4089
  HEAP32[$16 + 4 >> 2] = $7; //@line 4092
  sp = STACKTOP; //@line 4093
  return 0; //@line 4094
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4096
 $21 = $0 + 8 | 0; //@line 4098
 $27 = _i64Subtract($12 | 0, $13 | 0, HEAP32[$21 >> 2] | 0, HEAP32[$21 + 4 >> 2] | 0) | 0; //@line 4104
 $29 = $27; //@line 4106
 $30 = tempRet0; //@line 4106
 $31 = _i64Add($29 | 0, $30 | 0, $4 | 0, $7 | 0) | 0; //@line 4107
 $32 = tempRet0; //@line 4108
 $33 = ___udivdi3($31 | 0, $32 | 0, 1e3, 0) | 0; //@line 4109
 $34 = tempRet0; //@line 4110
 return $33 | 0; //@line 4111
}
function __ZN16SX1276_LoRaRadio11rx_done_irqEv($0) {
 $0 = $0 | 0;
 var $14 = 0, $17 = 0, $19 = 0, $20 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 2773
 STACKTOP = STACKTOP + 16 | 0; //@line 2774
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2774
 _printf(10880, sp) | 0; //@line 2777
 _printf(11296, sp + 8 | 0) | 0; //@line 2778
 $AsyncCtx4 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2779
 _putchar(10) | 0; //@line 2780
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 125; //@line 2783
  HEAP32[$AsyncCtx4 + 4 >> 2] = $0; //@line 2785
  sp = STACKTOP; //@line 2786
  STACKTOP = sp; //@line 2787
  return;
 }
 _emscripten_free_async_context($AsyncCtx4 | 0); //@line 2789
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 2791
 HEAP8[$0 + 688 >> 0] = 0; //@line 2793
 $5 = HEAP32[$0 + 784 >> 2] | 0; //@line 2795
 if (!$5) {
  STACKTOP = sp; //@line 2798
  return;
 }
 $8 = HEAP32[$5 + 44 >> 2] | 0; //@line 2801
 if (!$8) {
  STACKTOP = sp; //@line 2804
  return;
 }
 $14 = HEAPU8[$0 + 782 >> 0] | 0; //@line 2810
 $17 = HEAP8[$0 + 781 >> 0] | 0; //@line 2813
 $19 = HEAP8[$0 + 780 >> 0] | 0; //@line 2815
 $20 = HEAP32[$8 >> 2] | 0; //@line 2816
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2817
 FUNCTION_TABLE_viiiii[$20 & 7]($5 + 32 | 0, $0 + 788 | 0, $14, $17, $19); //@line 2818
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 126; //@line 2821
  sp = STACKTOP; //@line 2822
  STACKTOP = sp; //@line 2823
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2825
 STACKTOP = sp; //@line 2826
 return;
}
function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0; //@line 378
 value = value & 255; //@line 380
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value; //@line 383
   ptr = ptr + 1 | 0; //@line 384
  }
  aligned_end = end & -4 | 0; //@line 387
  block_aligned_end = aligned_end - 64 | 0; //@line 388
  value4 = value | value << 8 | value << 16 | value << 24; //@line 389
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 392
   HEAP32[ptr + 4 >> 2] = value4; //@line 393
   HEAP32[ptr + 8 >> 2] = value4; //@line 394
   HEAP32[ptr + 12 >> 2] = value4; //@line 395
   HEAP32[ptr + 16 >> 2] = value4; //@line 396
   HEAP32[ptr + 20 >> 2] = value4; //@line 397
   HEAP32[ptr + 24 >> 2] = value4; //@line 398
   HEAP32[ptr + 28 >> 2] = value4; //@line 399
   HEAP32[ptr + 32 >> 2] = value4; //@line 400
   HEAP32[ptr + 36 >> 2] = value4; //@line 401
   HEAP32[ptr + 40 >> 2] = value4; //@line 402
   HEAP32[ptr + 44 >> 2] = value4; //@line 403
   HEAP32[ptr + 48 >> 2] = value4; //@line 404
   HEAP32[ptr + 52 >> 2] = value4; //@line 405
   HEAP32[ptr + 56 >> 2] = value4; //@line 406
   HEAP32[ptr + 60 >> 2] = value4; //@line 407
   ptr = ptr + 64 | 0; //@line 408
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 412
   ptr = ptr + 4 | 0; //@line 413
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value; //@line 418
  ptr = ptr + 1 | 0; //@line 419
 }
 return end - num | 0; //@line 421
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_328($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 6112
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6114
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6116
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 6118
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6120
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6122
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 6124
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6126
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6128
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 6130
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 6132
 $21 = HEAP32[$2 >> 2] | 0; //@line 6133
 $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 32 >> 2] | 0; //@line 6136
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 6137
 FUNCTION_TABLE_vii[$24 & 31]($21, $4); //@line 6138
 if (!___async) {
  ___async_unwind = 0; //@line 6141
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 607; //@line 6143
 HEAP8[$ReallocAsyncCtx5 + 4 >> 0] = $6; //@line 6145
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $8; //@line 6147
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $2; //@line 6149
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $10; //@line 6151
 HEAP8[$ReallocAsyncCtx5 + 20 >> 0] = $12; //@line 6153
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $14; //@line 6155
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $16; //@line 6157
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $18; //@line 6159
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $20; //@line 6161
 sp = STACKTOP; //@line 6162
 return;
}
function _fflush__async_cb($0) {
 $0 = $0 | 0;
 var $$02327$reg2mem$0 = 0, $$1 = 0, $$reg2mem$0 = 0, $17 = 0, $20 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19887
 $$02327$reg2mem$0 = HEAP32[$0 + 12 >> 2] | 0; //@line 19897
 $$1 = HEAP32[___async_retval >> 2] | HEAP32[$0 + 4 >> 2]; //@line 19897
 $$reg2mem$0 = HEAP32[$0 + 8 >> 2] | 0; //@line 19897
 while (1) {
  if ($$reg2mem$0 | 0) {
   ___unlockfile($$02327$reg2mem$0); //@line 19901
  }
  $$02327$reg2mem$0 = HEAP32[$$02327$reg2mem$0 + 56 >> 2] | 0; //@line 19904
  if (!$$02327$reg2mem$0) {
   label = 12; //@line 19907
   break;
  }
  if ((HEAP32[$$02327$reg2mem$0 + 76 >> 2] | 0) > -1) {
   $20 = ___lockfile($$02327$reg2mem$0) | 0; //@line 19915
  } else {
   $20 = 0; //@line 19917
  }
  if ((HEAP32[$$02327$reg2mem$0 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327$reg2mem$0 + 28 >> 2] | 0) >>> 0) {
   break;
  } else {
   $$reg2mem$0 = $20; //@line 19927
  }
 }
 if ((label | 0) == 12) {
  ___ofl_unlock(); //@line 19931
  HEAP32[___async_retval >> 2] = $$1; //@line 19933
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 19936
 $17 = ___fflush_unlocked($$02327$reg2mem$0) | 0; //@line 19937
 if (!___async) {
  HEAP32[___async_retval >> 2] = $17; //@line 19941
  ___async_unwind = 0; //@line 19942
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 738; //@line 19944
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$1; //@line 19946
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $20; //@line 19948
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327$reg2mem$0; //@line 19950
 sp = STACKTOP; //@line 19951
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_325($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 5854
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5856
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5858
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5860
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5862
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5864
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5866
 $13 = $2 + 356 | 0; //@line 5867
 $14 = HEAP32[$13 >> 2] | 0; //@line 5868
 $16 = $12 + 12 | 0; //@line 5870
 HEAP32[$12 >> 2] = 509; //@line 5871
 HEAP32[$12 + 4 >> 2] = 0; //@line 5873
 HEAP32[$12 + 8 >> 2] = $2; //@line 5875
 HEAP32[$16 >> 2] = 848; //@line 5876
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(36) | 0; //@line 5877
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($14, $2 + 996 | 0, $12); //@line 5878
 if (!___async) {
  ___async_unwind = 0; //@line 5881
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 510; //@line 5883
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $13; //@line 5885
 HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $2; //@line 5887
 HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $4; //@line 5889
 HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $16; //@line 5891
 HEAP32[$ReallocAsyncCtx10 + 20 >> 2] = $6; //@line 5893
 HEAP32[$ReallocAsyncCtx10 + 24 >> 2] = $8; //@line 5895
 HEAP32[$ReallocAsyncCtx10 + 28 >> 2] = $10; //@line 5897
 HEAP32[$ReallocAsyncCtx10 + 32 >> 2] = $12; //@line 5899
 sp = STACKTOP; //@line 5900
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_444($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 30846
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30850
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30852
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30854
 $8 = (HEAP32[$0 + 4 >> 2] | 0) + 16 | 0; //@line 30855
 HEAP32[$8 >> 2] = $AsyncRetVal; //@line 30856
 $9 = HEAP32[$4 >> 2] | 0; //@line 30857
 if ($9 | 0) {
  $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 30861
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 30862
  FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 30863
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 651; //@line 30866
   $13 = $ReallocAsyncCtx3 + 4 | 0; //@line 30867
   HEAP32[$13 >> 2] = $8; //@line 30868
   sp = STACKTOP; //@line 30869
   return;
  }
  ___async_unwind = 0; //@line 30872
  HEAP32[$ReallocAsyncCtx3 >> 2] = 651; //@line 30873
  $13 = $ReallocAsyncCtx3 + 4 | 0; //@line 30874
  HEAP32[$13 >> 2] = $8; //@line 30875
  sp = STACKTOP; //@line 30876
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 30883
 _mbed_assert_internal(13710, 13728, 57); //@line 30884
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 652; //@line 30887
  sp = STACKTOP; //@line 30888
  return;
 }
 ___async_unwind = 0; //@line 30891
 HEAP32[$ReallocAsyncCtx5 >> 2] = 652; //@line 30892
 sp = STACKTOP; //@line 30893
 return;
}
function ___fflush_unlocked__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18709
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18711
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18713
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18715
 do {
  if (!(HEAP32[$2 >> 2] | 0)) {
   $$0 = -1; //@line 18720
  } else {
   $9 = $4 + 4 | 0; //@line 18722
   $10 = HEAP32[$9 >> 2] | 0; //@line 18723
   $11 = $4 + 8 | 0; //@line 18724
   $12 = HEAP32[$11 >> 2] | 0; //@line 18725
   if ($10 >>> 0 >= $12 >>> 0) {
    HEAP32[$4 + 16 >> 2] = 0; //@line 18729
    HEAP32[$6 >> 2] = 0; //@line 18730
    HEAP32[$2 >> 2] = 0; //@line 18731
    HEAP32[$11 >> 2] = 0; //@line 18732
    HEAP32[$9 >> 2] = 0; //@line 18733
    $$0 = 0; //@line 18734
    break;
   }
   $18 = HEAP32[$4 + 40 >> 2] | 0; //@line 18741
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 18742
   FUNCTION_TABLE_iiii[$18 & 15]($4, $10 - $12 | 0, 1) | 0; //@line 18743
   if (!___async) {
    ___async_unwind = 0; //@line 18746
   }
   HEAP32[$ReallocAsyncCtx2 >> 2] = 740; //@line 18748
   HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 18750
   HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 18752
   HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 18754
   HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $11; //@line 18756
   HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $9; //@line 18758
   sp = STACKTOP; //@line 18759
   return;
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 18764
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19490
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19492
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19497
 $7 = HEAP32[$2 >> 2] | 0; //@line 19498
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 28 >> 2] | 0; //@line 19501
 if (HEAP8[$0 + 8 >> 0] & 1) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 19503
  FUNCTION_TABLE_vii[$10 & 31]($7, 0); //@line 19504
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 636; //@line 19507
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 19508
   HEAP32[$12 >> 2] = $2; //@line 19509
   sp = STACKTOP; //@line 19510
   return;
  }
  ___async_unwind = 0; //@line 19513
  HEAP32[$ReallocAsyncCtx3 >> 2] = 636; //@line 19514
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 19515
  HEAP32[$12 >> 2] = $2; //@line 19516
  sp = STACKTOP; //@line 19517
  return;
 } else {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 19520
  FUNCTION_TABLE_vii[$10 & 31]($7, $6); //@line 19521
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 635; //@line 19524
   $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 19525
   HEAP32[$11 >> 2] = $2; //@line 19526
   sp = STACKTOP; //@line 19527
   return;
  }
  ___async_unwind = 0; //@line 19530
  HEAP32[$ReallocAsyncCtx2 >> 2] = 635; //@line 19531
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 19532
  HEAP32[$11 >> 2] = $2; //@line 19533
  sp = STACKTOP; //@line 19534
  return;
 }
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 13184
 STACKTOP = STACKTOP + 16 | 0; //@line 13185
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13185
 _printf(12943, sp) | 0; //@line 13188
 _printf(13144, sp + 8 | 0) | 0; //@line 13189
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13190
 _putchar(10) | 0; //@line 13191
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 413; //@line 13194
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 13196
  sp = STACKTOP; //@line 13197
  STACKTOP = sp; //@line 13198
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13200
 $3 = HEAP32[$0 + 356 >> 2] | 0; //@line 13202
 $AsyncCtx4 = _emscripten_alloc_async_context(8, sp) | 0; //@line 13204
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($3, $0 + 1076 | 0); //@line 13205
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 414; //@line 13208
  HEAP32[$AsyncCtx4 + 4 >> 2] = $0; //@line 13210
  sp = STACKTOP; //@line 13211
  STACKTOP = sp; //@line 13212
  return;
 }
 _emscripten_free_async_context($AsyncCtx4 | 0); //@line 13214
 if (HEAP8[$0 + 373 >> 0] | 0) {
  HEAP8[$0 + 377 >> 0] = 1; //@line 13220
  $10 = $0 + 968 | 0; //@line 13221
  HEAP32[$10 >> 2] = HEAP32[$10 >> 2] & -5; //@line 13224
 }
 if ((HEAP32[$0 + 360 >> 2] | 0) != 2) {
  STACKTOP = sp; //@line 13230
  return;
 }
 $16 = $0 + 944 | 0; //@line 13232
 HEAP8[$16 >> 0] = HEAP8[$16 >> 0] | 32; //@line 13235
 STACKTOP = sp; //@line 13236
 return;
}
function __ZN7LoRaPHY20put_radio_to_standbyEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $12 = 0, $15 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 25175
 $1 = $0 + 4 | 0; //@line 25176
 $2 = HEAP32[$1 >> 2] | 0; //@line 25177
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 25180
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 25181
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 25182
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 628; //@line 25185
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 25187
  sp = STACKTOP; //@line 25188
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 25191
 $7 = HEAP32[$1 >> 2] | 0; //@line 25192
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0; //@line 25195
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 25196
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 25197
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 629; //@line 25200
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 25202
  sp = STACKTOP; //@line 25203
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 25206
 $12 = HEAP32[$1 >> 2] | 0; //@line 25207
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 25210
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 25211
 FUNCTION_TABLE_vi[$15 & 1023]($12); //@line 25212
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 630; //@line 25215
  sp = STACKTOP; //@line 25216
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 25219
  return;
 }
}
function __ZN7LoRaPHY18put_radio_to_sleepEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $12 = 0, $15 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 25123
 $1 = $0 + 4 | 0; //@line 25124
 $2 = HEAP32[$1 >> 2] | 0; //@line 25125
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 25128
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 25129
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 25130
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 625; //@line 25133
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 25135
  sp = STACKTOP; //@line 25136
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 25139
 $7 = HEAP32[$1 >> 2] | 0; //@line 25140
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0; //@line 25143
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 25144
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 25145
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 626; //@line 25148
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 25150
  sp = STACKTOP; //@line 25151
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 25154
 $12 = HEAP32[$1 >> 2] | 0; //@line 25155
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 25158
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 25159
 FUNCTION_TABLE_vi[$15 & 1023]($12); //@line 25160
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 627; //@line 25163
  sp = STACKTOP; //@line 25164
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 25167
  return;
 }
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_331($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $18 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 6366
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6376
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 6378
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6380
 $18 = HEAP32[$10 >> 2] | 0; //@line 6387
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 44 >> 2] | 0; //@line 6390
 $24 = (HEAPU8[((HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 17 >> 0] | 0) == 0 ? HEAP32[$0 + 8 >> 2] | 0 : HEAP32[$0 + 12 >> 2] | 0) + (HEAP32[$0 + 16 >> 2] | 0) >> 0] | 0) + 13 & 255; //@line 6393
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 6394
 FUNCTION_TABLE_viii[$21 & 7]($18, 1, $24); //@line 6395
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 610; //@line 6398
  $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 6399
  HEAP32[$25 >> 2] = $10; //@line 6400
  $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 6401
  HEAP8[$26 >> 0] = $12; //@line 6402
  $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 6403
  HEAP32[$27 >> 2] = $14; //@line 6404
  sp = STACKTOP; //@line 6405
  return;
 }
 ___async_unwind = 0; //@line 6408
 HEAP32[$ReallocAsyncCtx8 >> 2] = 610; //@line 6409
 $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 6410
 HEAP32[$25 >> 2] = $10; //@line 6411
 $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 6412
 HEAP8[$26 >> 0] = $12; //@line 6413
 $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 6414
 HEAP32[$27 >> 2] = $14; //@line 6415
 sp = STACKTOP; //@line 6416
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_330($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $18 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 6309
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6319
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 6321
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6323
 $18 = HEAP32[$10 >> 2] | 0; //@line 6330
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 44 >> 2] | 0; //@line 6333
 $24 = (HEAPU8[((HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 17 >> 0] | 0) == 0 ? HEAP32[$0 + 8 >> 2] | 0 : HEAP32[$0 + 12 >> 2] | 0) + (HEAP32[$0 + 16 >> 2] | 0) >> 0] | 0) + 13 & 255; //@line 6336
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 6337
 FUNCTION_TABLE_viii[$21 & 7]($18, 0, $24); //@line 6338
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 610; //@line 6341
  $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 6342
  HEAP32[$25 >> 2] = $10; //@line 6343
  $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 6344
  HEAP8[$26 >> 0] = $12; //@line 6345
  $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 6346
  HEAP32[$27 >> 2] = $14; //@line 6347
  sp = STACKTOP; //@line 6348
  return;
 }
 ___async_unwind = 0; //@line 6351
 HEAP32[$ReallocAsyncCtx8 >> 2] = 610; //@line 6352
 $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 6353
 HEAP32[$25 >> 2] = $10; //@line 6354
 $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 6355
 HEAP8[$26 >> 0] = $12; //@line 6356
 $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 6357
 HEAP32[$27 >> 2] = $14; //@line 6358
 sp = STACKTOP; //@line 6359
 return;
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 23519
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23521
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23523
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 23526
  $5 = _mbedtls_cipher_cmac_finish(21844, 23152) | 0; //@line 23527
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 590; //@line 23530
   $6 = $ReallocAsyncCtx2 + 4 | 0; //@line 23531
   HEAP32[$6 >> 2] = $2; //@line 23532
   sp = STACKTOP; //@line 23533
   return;
  }
  HEAP32[___async_retval >> 2] = $5; //@line 23537
  ___async_unwind = 0; //@line 23538
  HEAP32[$ReallocAsyncCtx2 >> 2] = 590; //@line 23539
  $6 = $ReallocAsyncCtx2 + 4 | 0; //@line 23540
  HEAP32[$6 >> 2] = $2; //@line 23541
  sp = STACKTOP; //@line 23542
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 23545
  _mbedtls_cipher_free(21844); //@line 23546
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 591; //@line 23549
   $8 = $ReallocAsyncCtx5 + 4 | 0; //@line 23550
   HEAP32[$8 >> 2] = $AsyncRetVal; //@line 23551
   sp = STACKTOP; //@line 23552
   return;
  }
  ___async_unwind = 0; //@line 23555
  HEAP32[$ReallocAsyncCtx5 >> 2] = 591; //@line 23556
  $8 = $ReallocAsyncCtx5 + 4 | 0; //@line 23557
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 23558
  sp = STACKTOP; //@line 23559
  return;
 }
}
function __Z11compute_micPKhtS0_jhjPj__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 24568
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24570
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24572
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 24575
  $5 = _mbedtls_cipher_cmac_finish(21844, 23152) | 0; //@line 24576
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 585; //@line 24579
   $6 = $ReallocAsyncCtx3 + 4 | 0; //@line 24580
   HEAP32[$6 >> 2] = $2; //@line 24581
   sp = STACKTOP; //@line 24582
   return;
  }
  HEAP32[___async_retval >> 2] = $5; //@line 24586
  ___async_unwind = 0; //@line 24587
  HEAP32[$ReallocAsyncCtx3 >> 2] = 585; //@line 24588
  $6 = $ReallocAsyncCtx3 + 4 | 0; //@line 24589
  HEAP32[$6 >> 2] = $2; //@line 24590
  sp = STACKTOP; //@line 24591
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 24594
  _mbedtls_cipher_free(21844); //@line 24595
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 586; //@line 24598
   $8 = $ReallocAsyncCtx6 + 4 | 0; //@line 24599
   HEAP32[$8 >> 2] = $AsyncRetVal; //@line 24600
   sp = STACKTOP; //@line 24601
   return;
  }
  ___async_unwind = 0; //@line 24604
  HEAP32[$ReallocAsyncCtx6 >> 2] = 586; //@line 24605
  $8 = $ReallocAsyncCtx6 + 4 | 0; //@line 24606
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 24607
  sp = STACKTOP; //@line 24608
  return;
 }
}
function __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0) {
 $0 = $0 | 0;
 var $14 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2702
 STACKTOP = STACKTOP + 16 | 0; //@line 2703
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2703
 _printf(10880, sp) | 0; //@line 2706
 _printf(11004, sp + 8 | 0) | 0; //@line 2707
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2708
 _putchar(10) | 0; //@line 2709
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 124; //@line 2712
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2714
  sp = STACKTOP; //@line 2715
  STACKTOP = sp; //@line 2716
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2718
 if ((HEAP32[$0 + 652 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(3, HEAP32[$0 + 484 >> 2] | 0, 0) | 0; //@line 2725
 }
 if ((HEAP32[$0 + 656 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(3, HEAP32[$0 + 508 >> 2] | 0, 0) | 0; //@line 2733
 }
 if ((HEAP32[$0 + 672 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(3, HEAP32[$0 + 604 >> 2] | 0, 0) | 0; //@line 2741
 }
 $14 = $0 + 660 | 0; //@line 2743
 if ((HEAP32[$14 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(3, HEAP32[$0 + 532 >> 2] | 0, 0) | 0; //@line 2749
  if ((HEAP32[$14 >> 2] | 0) != -1) {
   _emscripten_asm_const_iii(3, HEAP32[$0 + 556 >> 2] | 0, 0) | 0; //@line 2755
  }
 }
 if ((HEAP32[$0 + 668 >> 2] | 0) == -1) {
  STACKTOP = sp; //@line 2762
  return;
 }
 _emscripten_asm_const_iii(3, HEAP32[$0 + 580 >> 2] | 0, 0) | 0; //@line 2766
 STACKTOP = sp; //@line 2767
 return;
}
function _equeue_create($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$032$i = 0, $$033$i = 0, $2 = 0, $20 = 0, $22 = 0, $26 = 0, $29 = 0, $5 = 0, $6 = 0;
 $2 = _malloc($1) | 0; //@line 4230
 if (!$2) {
  $$0 = -1; //@line 4233
  return $$0 | 0; //@line 4234
 }
 HEAP32[$0 + 12 >> 2] = $2; //@line 4237
 $5 = $0 + 20 | 0; //@line 4238
 HEAP32[$5 >> 2] = 0; //@line 4239
 $6 = $0 + 16 | 0; //@line 4240
 HEAP32[$6 >> 2] = 0; //@line 4241
 if ($1 | 0) {
  $$033$i = $1; //@line 4244
  $22 = 0; //@line 4244
  do {
   $22 = $22 + 1 | 0; //@line 4246
   $$033$i = $$033$i >>> 1; //@line 4247
  } while (($$033$i | 0) != 0);
  HEAP32[$6 >> 2] = $22; //@line 4255
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 4258
 HEAP32[$0 + 28 >> 2] = $1; //@line 4260
 HEAP32[$0 + 32 >> 2] = $2; //@line 4262
 HEAP32[$0 >> 2] = 0; //@line 4263
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 4266
 HEAP8[$0 + 9 >> 0] = 0; //@line 4268
 HEAP8[$0 + 8 >> 0] = 0; //@line 4270
 HEAP8[$0 + 36 >> 0] = 0; //@line 4272
 HEAP32[$0 + 40 >> 2] = 0; //@line 4274
 HEAP32[$0 + 44 >> 2] = 0; //@line 4276
 $20 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 4278
 if (($20 | 0) < 0) {
  $$032$i = $20; //@line 4281
 } else {
  $26 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 4284
  if (($26 | 0) < 0) {
   $$032$i = $26; //@line 4287
  } else {
   $29 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 4290
   $$032$i = ($29 | 0) < 0 ? $29 : 0; //@line 4293
  }
 }
 HEAP32[$5 >> 2] = $2; //@line 4296
 $$0 = $$032$i; //@line 4297
 return $$0 | 0; //@line 4298
}
function __ZN12LoRaWANStack24enable_adaptive_datarateEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 9528
 STACKTOP = STACKTOP + 32 | 0; //@line 9529
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9529
 $2 = sp + 12 | 0; //@line 9532
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _printf(11863, sp) | 0; //@line 9537
  _printf(12660, sp + 8 | 0) | 0; //@line 9538
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9539
  _putchar(10) | 0; //@line 9540
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 314; //@line 9543
   sp = STACKTOP; //@line 9544
   STACKTOP = sp; //@line 9545
   return 0; //@line 9545
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9547
  $$0 = -1012; //@line 9548
  STACKTOP = sp; //@line 9549
  return $$0 | 0; //@line 9549
 } else {
  HEAP32[$2 >> 2] = 2; //@line 9552
  HEAP8[$2 + 4 >> 0] = $1 & 1; //@line 9554
  $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9556
  $9 = __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($0 + 4 | 0, $2) | 0; //@line 9557
  if (___async) {
   HEAP32[$AsyncCtx5 >> 2] = 315; //@line 9560
   HEAP32[$AsyncCtx5 + 4 >> 2] = $2; //@line 9562
   sp = STACKTOP; //@line 9563
   STACKTOP = sp; //@line 9564
   return 0; //@line 9564
  }
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 9566
  $$0 = $9; //@line 9567
  STACKTOP = sp; //@line 9568
  return $$0 | 0; //@line 9568
 }
 return 0; //@line 9570
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 3737
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3747
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3751
 $16 = (HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) != 0; //@line 3753
 $18 = HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + 1108 >> 2] | 0; //@line 3755
 _printf(12943, HEAP32[$0 + 12 >> 2] | 0) | 0; //@line 3756
 _printf(13019, $10) | 0; //@line 3757
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 3758
 _putchar(10) | 0; //@line 3759
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 501; //@line 3762
  $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 3763
  HEAP32[$19 >> 2] = $14; //@line 3764
  $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 3765
  $$expand_i1_val = $16 & 1; //@line 3766
  HEAP8[$20 >> 0] = $$expand_i1_val; //@line 3767
  $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 3768
  HEAP32[$21 >> 2] = $18; //@line 3769
  sp = STACKTOP; //@line 3770
  return;
 }
 ___async_unwind = 0; //@line 3773
 HEAP32[$ReallocAsyncCtx2 >> 2] = 501; //@line 3774
 $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 3775
 HEAP32[$19 >> 2] = $14; //@line 3776
 $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 3777
 $$expand_i1_val = $16 & 1; //@line 3778
 HEAP8[$20 >> 0] = $$expand_i1_val; //@line 3779
 $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 3780
 HEAP32[$21 >> 2] = $18; //@line 3781
 sp = STACKTOP; //@line 3782
 return;
}
function __ZN12LoRaWANStack17send_frame_to_macEv__async_cb_360($0) {
 $0 = $0 | 0;
 var $$sink2$sink = 0, $10 = 0, $12 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17648
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17654
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17656
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17658
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17660
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $$sink2$sink = HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 4 >> 0] | 0; //@line 17667
 } else {
  $$sink2$sink = __ZN7LoRaPHY23get_default_tx_datarateEv((HEAP32[$0 + 8 >> 2] | 0) + 1336 | 0) | 0; //@line 17671
 }
 HEAP8[$8 + 5 >> 0] = $$sink2$sink; //@line 17674
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 17675
 $20 = __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t($6, $8) | 0; //@line 17676
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 282; //@line 17679
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 17680
  HEAP32[$21 >> 2] = $10; //@line 17681
  $22 = $ReallocAsyncCtx + 8 | 0; //@line 17682
  HEAP32[$22 >> 2] = $12; //@line 17683
  sp = STACKTOP; //@line 17684
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 17688
 ___async_unwind = 0; //@line 17689
 HEAP32[$ReallocAsyncCtx >> 2] = 282; //@line 17690
 $21 = $ReallocAsyncCtx + 4 | 0; //@line 17691
 HEAP32[$21 >> 2] = $10; //@line 17692
 $22 = $ReallocAsyncCtx + 8 | 0; //@line 17693
 HEAP32[$22 >> 2] = $12; //@line 17694
 sp = STACKTOP; //@line 17695
 return;
}
function __ZN12LoRaWANStack17send_frame_to_macEv__async_cb_359($0) {
 $0 = $0 | 0;
 var $$sink2$sink = 0, $10 = 0, $12 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17594
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17600
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17602
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17604
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17606
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $$sink2$sink = HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 4 >> 0] | 0; //@line 17613
 } else {
  $$sink2$sink = __ZN7LoRaPHY23get_default_tx_datarateEv((HEAP32[$0 + 8 >> 2] | 0) + 1336 | 0) | 0; //@line 17617
 }
 HEAP8[$8 + 5 >> 0] = $$sink2$sink; //@line 17620
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 17621
 $20 = __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t($6, $8) | 0; //@line 17622
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 282; //@line 17625
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 17626
  HEAP32[$21 >> 2] = $10; //@line 17627
  $22 = $ReallocAsyncCtx + 8 | 0; //@line 17628
  HEAP32[$22 >> 2] = $12; //@line 17629
  sp = STACKTOP; //@line 17630
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 17634
 ___async_unwind = 0; //@line 17635
 HEAP32[$ReallocAsyncCtx >> 2] = 282; //@line 17636
 $21 = $ReallocAsyncCtx + 4 | 0; //@line 17637
 HEAP32[$21 >> 2] = $10; //@line 17638
 $22 = $ReallocAsyncCtx + 8 | 0; //@line 17639
 HEAP32[$22 >> 2] = $12; //@line 17640
 sp = STACKTOP; //@line 17641
 return;
}
function __ZN12LoRaWANStack17send_frame_to_macEv__async_cb_358($0) {
 $0 = $0 | 0;
 var $$sink2$sink = 0, $10 = 0, $12 = 0, $20 = 0, $21 = 0, $22 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17540
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17546
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17548
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17550
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17552
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $$sink2$sink = HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 4 >> 0] | 0; //@line 17559
 } else {
  $$sink2$sink = __ZN7LoRaPHY23get_default_tx_datarateEv((HEAP32[$0 + 8 >> 2] | 0) + 1336 | 0) | 0; //@line 17563
 }
 HEAP8[$8 + 5 >> 0] = $$sink2$sink; //@line 17566
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 17567
 $20 = __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t($6, $8) | 0; //@line 17568
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 282; //@line 17571
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 17572
  HEAP32[$21 >> 2] = $10; //@line 17573
  $22 = $ReallocAsyncCtx + 8 | 0; //@line 17574
  HEAP32[$22 >> 2] = $12; //@line 17575
  sp = STACKTOP; //@line 17576
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 17580
 ___async_unwind = 0; //@line 17581
 HEAP32[$ReallocAsyncCtx >> 2] = 282; //@line 17582
 $21 = $ReallocAsyncCtx + 4 | 0; //@line 17583
 HEAP32[$21 >> 2] = $10; //@line 17584
 $22 = $ReallocAsyncCtx + 8 | 0; //@line 17585
 HEAP32[$22 >> 2] = $12; //@line 17586
 sp = STACKTOP; //@line 17587
 return;
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19677
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19679
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19681
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19683
 $7 = $2 + 12 | 0; //@line 19684
 $8 = HEAP32[$7 >> 2] | 0; //@line 19685
 if (!$8) {
  HEAP32[$4 >> 2] = 0; //@line 19688
  HEAP32[$6 + 16 >> 2] = 0; //@line 19690
  return;
 }
 $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 19694
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 19695
 FUNCTION_TABLE_vii[$11 & 31]($6, $2); //@line 19696
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 647; //@line 19699
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 19700
  HEAP32[$12 >> 2] = $7; //@line 19701
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 19702
  HEAP32[$13 >> 2] = $4; //@line 19703
  $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 19704
  HEAP32[$14 >> 2] = $6; //@line 19705
  sp = STACKTOP; //@line 19706
  return;
 }
 ___async_unwind = 0; //@line 19709
 HEAP32[$ReallocAsyncCtx2 >> 2] = 647; //@line 19710
 $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 19711
 HEAP32[$12 >> 2] = $7; //@line 19712
 $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 19713
 HEAP32[$13 >> 2] = $4; //@line 19714
 $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 19715
 HEAP32[$14 >> 2] = $6; //@line 19716
 sp = STACKTOP; //@line 19717
 return;
}
function _wcrtomb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 do {
  if (!$0) {
   $$0 = 1; //@line 13805
  } else {
   if ($1 >>> 0 < 128) {
    HEAP8[$0 >> 0] = $1; //@line 13810
    $$0 = 1; //@line 13811
    break;
   }
   if (!(HEAP32[HEAP32[(___pthread_self_910() | 0) + 188 >> 2] >> 2] | 0)) {
    if (($1 & -128 | 0) == 57216) {
     HEAP8[$0 >> 0] = $1; //@line 13824
     $$0 = 1; //@line 13825
     break;
    } else {
     HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 13829
     $$0 = -1; //@line 13830
     break;
    }
   }
   if ($1 >>> 0 < 2048) {
    HEAP8[$0 >> 0] = $1 >>> 6 | 192; //@line 13840
    HEAP8[$0 + 1 >> 0] = $1 & 63 | 128; //@line 13844
    $$0 = 2; //@line 13845
    break;
   }
   if ($1 >>> 0 < 55296 | ($1 & -8192 | 0) == 57344) {
    HEAP8[$0 >> 0] = $1 >>> 12 | 224; //@line 13857
    HEAP8[$0 + 1 >> 0] = $1 >>> 6 & 63 | 128; //@line 13863
    HEAP8[$0 + 2 >> 0] = $1 & 63 | 128; //@line 13867
    $$0 = 3; //@line 13868
    break;
   }
   if (($1 + -65536 | 0) >>> 0 < 1048576) {
    HEAP8[$0 >> 0] = $1 >>> 18 | 240; //@line 13878
    HEAP8[$0 + 1 >> 0] = $1 >>> 12 & 63 | 128; //@line 13884
    HEAP8[$0 + 2 >> 0] = $1 >>> 6 & 63 | 128; //@line 13890
    HEAP8[$0 + 3 >> 0] = $1 & 63 | 128; //@line 13894
    $$0 = 4; //@line 13895
    break;
   } else {
    HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 13899
    $$0 = -1; //@line 13900
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 13905
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_50($0) {
 $0 = $0 | 0;
 var $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 21206
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21208
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21210
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21212
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21214
 if (!$AsyncRetVal) {
  HEAP8[___async_retval >> 0] = 0; //@line 21219
  return;
 }
 dest = $2 + 4 | 0; //@line 21223
 stop = dest + 52 | 0; //@line 21223
 do {
  HEAP32[dest >> 2] = 0; //@line 21223
  dest = dest + 4 | 0; //@line 21223
 } while ((dest | 0) < (stop | 0));
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 21224
 HEAP32[$2 + 8 >> 2] = $4; //@line 21226
 HEAP32[$2 + 12 >> 2] = -1; //@line 21228
 HEAP32[$2 + 48 >> 2] = 1; //@line 21230
 $15 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 28 >> 2] | 0; //@line 21233
 $16 = HEAP32[$6 >> 2] | 0; //@line 21234
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 21235
 FUNCTION_TABLE_viiii[$15 & 7]($AsyncRetVal, $2, $16, 1); //@line 21236
 if (!___async) {
  ___async_unwind = 0; //@line 21239
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 752; //@line 21241
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 21243
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 21245
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $2; //@line 21247
 sp = STACKTOP; //@line 21248
 return;
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $13 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19494
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $$0 = -1002; //@line 19498
  return $$0 | 0; //@line 19499
 }
 if (((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0) & 255) <= ($1 & 255)) {
  $$0 = -1003; //@line 19505
  return $$0 | 0; //@line 19506
 }
 $7 = HEAP32[$0 >> 2] | 0; //@line 19508
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 64 >> 2] | 0; //@line 19511
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 19512
 $11 = FUNCTION_TABLE_iii[$10 & 31]($7, $1) | 0; //@line 19513
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 574; //@line 19516
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 19518
  sp = STACKTOP; //@line 19519
  return 0; //@line 19520
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 19522
 if (!$11) {
  $$0 = -1003; //@line 19524
  return $$0 | 0; //@line 19525
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 19527
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 19528
 __ZN7LoRaPHY18put_radio_to_sleepEv($13); //@line 19529
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 575; //@line 19532
  sp = STACKTOP; //@line 19533
  return 0; //@line 19534
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 19536
 $$0 = 0; //@line 19537
 return $$0 | 0; //@line 19538
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_189($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 32657
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32661
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 32663
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 32664
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 32668
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 32669
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 32670
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 201; //@line 32673
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 32674
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 32675
   sp = STACKTOP; //@line 32676
   return;
  }
  ___async_unwind = 0; //@line 32679
  HEAP32[$ReallocAsyncCtx2 >> 2] = 201; //@line 32680
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 32681
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 32682
  sp = STACKTOP; //@line 32683
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(4) | 0; //@line 32690
 _mbed_assert_internal(12827, 11911, 843); //@line 32691
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 202; //@line 32694
  sp = STACKTOP; //@line 32695
  return;
 }
 ___async_unwind = 0; //@line 32698
 HEAP32[$ReallocAsyncCtx11 >> 2] = 202; //@line 32699
 sp = STACKTOP; //@line 32700
 return;
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_15($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 18517
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18519
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18521
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18523
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18525
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18527
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18529
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18531
 $16 = $2 + 360 | 0; //@line 18533
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 18534
 $17 = __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($2 + 348 | 0, $4, $16) | 0; //@line 18535
 if (!___async) {
  HEAP32[___async_retval >> 2] = $17; //@line 18539
  ___async_unwind = 0; //@line 18540
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 548; //@line 18542
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $16; //@line 18544
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 18546
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 18548
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 18550
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 18552
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 18554
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $14; //@line 18556
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $2; //@line 18558
 sp = STACKTOP; //@line 18559
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 5089
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5091
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5093
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5095
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5097
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5099
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5101
 $13 = HEAP32[$2 >> 2] | 0; //@line 5102
 $15 = $12 + 12 | 0; //@line 5104
 HEAP32[$12 >> 2] = 512; //@line 5105
 HEAP32[$12 + 4 >> 2] = 0; //@line 5107
 HEAP32[$12 + 8 >> 2] = $4; //@line 5109
 HEAP32[$15 >> 2] = 848; //@line 5110
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 5111
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($13, $4 + 1016 | 0, $12); //@line 5112
 if (!___async) {
  ___async_unwind = 0; //@line 5115
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 513; //@line 5117
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $2; //@line 5119
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $4; //@line 5121
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $6; //@line 5123
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $8; //@line 5125
 HEAP32[$ReallocAsyncCtx9 + 20 >> 2] = $10; //@line 5127
 HEAP32[$ReallocAsyncCtx9 + 24 >> 2] = $12; //@line 5129
 HEAP32[$ReallocAsyncCtx9 + 28 >> 2] = $15; //@line 5131
 sp = STACKTOP; //@line 5132
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_115($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 25094
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25098
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 25100
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 25101
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 25105
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 25106
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 25107
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 216; //@line 25110
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 25111
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 25112
   sp = STACKTOP; //@line 25113
   return;
  }
  ___async_unwind = 0; //@line 25116
  HEAP32[$ReallocAsyncCtx2 >> 2] = 216; //@line 25117
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 25118
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 25119
  sp = STACKTOP; //@line 25120
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(4) | 0; //@line 25127
 _mbed_assert_internal(12827, 11911, 715); //@line 25128
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 217; //@line 25131
  sp = STACKTOP; //@line 25132
  return;
 }
 ___async_unwind = 0; //@line 25135
 HEAP32[$ReallocAsyncCtx13 >> 2] = 217; //@line 25136
 sp = STACKTOP; //@line 25137
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_114($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 25045
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25049
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 25051
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 25052
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 25056
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 25057
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 25058
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 220; //@line 25061
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 25062
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 25063
   sp = STACKTOP; //@line 25064
   return;
  }
  ___async_unwind = 0; //@line 25067
  HEAP32[$ReallocAsyncCtx4 >> 2] = 220; //@line 25068
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 25069
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 25070
  sp = STACKTOP; //@line 25071
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(4) | 0; //@line 25078
 _mbed_assert_internal(12827, 11911, 737); //@line 25079
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 221; //@line 25082
  sp = STACKTOP; //@line 25083
  return;
 }
 ___async_unwind = 0; //@line 25086
 HEAP32[$ReallocAsyncCtx12 >> 2] = 221; //@line 25087
 sp = STACKTOP; //@line 25088
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_169($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 31333
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31337
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31339
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 31340
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 31344
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 31345
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 31346
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 187; //@line 31349
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 31350
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 31351
   sp = STACKTOP; //@line 31352
   return;
  }
  ___async_unwind = 0; //@line 31355
  HEAP32[$ReallocAsyncCtx2 >> 2] = 187; //@line 31356
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 31357
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 31358
  sp = STACKTOP; //@line 31359
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(4) | 0; //@line 31366
 _mbed_assert_internal(12827, 11911, 786); //@line 31367
 if (___async) {
  HEAP32[$ReallocAsyncCtx15 >> 2] = 188; //@line 31370
  sp = STACKTOP; //@line 31371
  return;
 }
 ___async_unwind = 0; //@line 31374
 HEAP32[$ReallocAsyncCtx15 >> 2] = 188; //@line 31375
 sp = STACKTOP; //@line 31376
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_168($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 31284
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31288
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31290
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 31291
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 31295
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 31296
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 31297
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 191; //@line 31300
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 31301
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 31302
   sp = STACKTOP; //@line 31303
   return;
  }
  ___async_unwind = 0; //@line 31306
  HEAP32[$ReallocAsyncCtx4 >> 2] = 191; //@line 31307
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 31308
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 31309
  sp = STACKTOP; //@line 31310
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(4) | 0; //@line 31317
 _mbed_assert_internal(12827, 11911, 797); //@line 31318
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 192; //@line 31321
  sp = STACKTOP; //@line 31322
  return;
 }
 ___async_unwind = 0; //@line 31325
 HEAP32[$ReallocAsyncCtx14 >> 2] = 192; //@line 31326
 sp = STACKTOP; //@line 31327
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_167($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 31235
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31239
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31241
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 31242
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 31246
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 31247
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 31248
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 195; //@line 31251
   $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 31252
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 31253
   sp = STACKTOP; //@line 31254
   return;
  }
  ___async_unwind = 0; //@line 31257
  HEAP32[$ReallocAsyncCtx6 >> 2] = 195; //@line 31258
  $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 31259
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 31260
  sp = STACKTOP; //@line 31261
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(4) | 0; //@line 31268
 _mbed_assert_internal(12827, 11911, 821); //@line 31269
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 196; //@line 31272
  sp = STACKTOP; //@line 31273
  return;
 }
 ___async_unwind = 0; //@line 31276
 HEAP32[$ReallocAsyncCtx13 >> 2] = 196; //@line 31277
 sp = STACKTOP; //@line 31278
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 26103
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26105
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26107
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26109
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26111
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26113
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 0; //@line 26117
 HEAP8[$4 >> 0] = 1; //@line 26118
 $14 = $2 + 944 | 0; //@line 26119
 HEAP8[$14 >> 0] = HEAP8[$14 >> 0] | 32; //@line 26122
 $17 = HEAP32[$6 >> 2] | 0; //@line 26123
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 26125
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($17, $2 + 996 | 0, 1); //@line 26126
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 395; //@line 26129
  $19 = $ReallocAsyncCtx17 + 4 | 0; //@line 26130
  HEAP32[$19 >> 2] = $8; //@line 26131
  $20 = $ReallocAsyncCtx17 + 8 | 0; //@line 26132
  HEAP32[$20 >> 2] = $10; //@line 26133
  sp = STACKTOP; //@line 26134
  return;
 }
 ___async_unwind = 0; //@line 26137
 HEAP32[$ReallocAsyncCtx17 >> 2] = 395; //@line 26138
 $19 = $ReallocAsyncCtx17 + 4 | 0; //@line 26139
 HEAP32[$19 >> 2] = $8; //@line 26140
 $20 = $ReallocAsyncCtx17 + 8 | 0; //@line 26141
 HEAP32[$20 >> 2] = $10; //@line 26142
 sp = STACKTOP; //@line 26143
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_223($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx18 = 0, sp = 0;
 sp = STACKTOP; //@line 34767
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34769
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34771
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34773
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34775
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34777
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 34779
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 34781
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 34783
 HEAP32[$8 >> 2] = 4; //@line 34784
 HEAP32[$10 >> 2] = HEAP32[$2 + 1944 >> 2]; //@line 34787
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(36) | 0; //@line 34788
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($12, $14) | 0; //@line 34789
 if (!___async) {
  ___async_unwind = 0; //@line 34792
 }
 HEAP32[$ReallocAsyncCtx18 >> 2] = 238; //@line 34794
 HEAP32[$ReallocAsyncCtx18 + 4 >> 2] = $2; //@line 34796
 HEAP32[$ReallocAsyncCtx18 + 8 >> 2] = $4; //@line 34798
 HEAP32[$ReallocAsyncCtx18 + 12 >> 2] = $6; //@line 34800
 HEAP32[$ReallocAsyncCtx18 + 16 >> 2] = $8; //@line 34802
 HEAP32[$ReallocAsyncCtx18 + 20 >> 2] = $10; //@line 34804
 HEAP32[$ReallocAsyncCtx18 + 24 >> 2] = $12; //@line 34806
 HEAP32[$ReallocAsyncCtx18 + 28 >> 2] = $14; //@line 34808
 HEAP32[$ReallocAsyncCtx18 + 32 >> 2] = $16; //@line 34810
 sp = STACKTOP; //@line 34811
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_222($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 34716
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34718
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34720
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34722
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34724
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34726
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 34728
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 34730
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 34732
 HEAP32[$8 >> 2] = 5; //@line 34733
 HEAP32[$10 >> 2] = HEAP32[$2 + 1948 >> 2]; //@line 34736
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(36) | 0; //@line 34737
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($12, $14) | 0; //@line 34738
 if (!___async) {
  ___async_unwind = 0; //@line 34741
 }
 HEAP32[$ReallocAsyncCtx17 >> 2] = 239; //@line 34743
 HEAP32[$ReallocAsyncCtx17 + 4 >> 2] = $2; //@line 34745
 HEAP32[$ReallocAsyncCtx17 + 8 >> 2] = $4; //@line 34747
 HEAP32[$ReallocAsyncCtx17 + 12 >> 2] = $6; //@line 34749
 HEAP32[$ReallocAsyncCtx17 + 16 >> 2] = $8; //@line 34751
 HEAP32[$ReallocAsyncCtx17 + 20 >> 2] = $16; //@line 34753
 HEAP32[$ReallocAsyncCtx17 + 24 >> 2] = $12; //@line 34755
 HEAP32[$ReallocAsyncCtx17 + 28 >> 2] = $14; //@line 34757
 HEAP32[$ReallocAsyncCtx17 + 32 >> 2] = $10; //@line 34759
 sp = STACKTOP; //@line 34760
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_109($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 24907
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24911
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24913
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24915
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24917
 $11 = $4 + 12 | 0; //@line 24919
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 24920
 $13 = HEAP8[$6 + 12 >> 0] | 0; //@line 24922
 $15 = HEAP8[$6 + 13 >> 0] | 0; //@line 24924
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 24925
 $16 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($8, $4, $13, $15) | 0; //@line 24926
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 219; //@line 24929
  $17 = $ReallocAsyncCtx8 + 4 | 0; //@line 24930
  HEAP32[$17 >> 2] = $11; //@line 24931
  $18 = $ReallocAsyncCtx8 + 8 | 0; //@line 24932
  HEAP32[$18 >> 2] = $10; //@line 24933
  sp = STACKTOP; //@line 24934
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 24938
 ___async_unwind = 0; //@line 24939
 HEAP32[$ReallocAsyncCtx8 >> 2] = 219; //@line 24940
 $17 = $ReallocAsyncCtx8 + 4 | 0; //@line 24941
 HEAP32[$17 >> 2] = $11; //@line 24942
 $18 = $ReallocAsyncCtx8 + 8 | 0; //@line 24943
 HEAP32[$18 >> 2] = $10; //@line 24944
 sp = STACKTOP; //@line 24945
 return;
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_293($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $20 = 0, $23 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3858
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3860
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3862
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3864
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3866
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3868
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3870
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3872
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3874
 $17 = HEAP32[$2 >> 2] | 0; //@line 3875
 $20 = HEAP32[(HEAP32[$17 >> 2] | 0) + 24 >> 2] | 0; //@line 3878
 $23 = (__ZN11LoRaMacMcps14get_indicationEv($4 + 288 | 0) | 0) + 10 | 0; //@line 3881
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 3882
 FUNCTION_TABLE_iiii[$20 & 15]($17, $6, $23) | 0; //@line 3883
 if (!___async) {
  ___async_unwind = 0; //@line 3886
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 500; //@line 3888
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $8; //@line 3890
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 3892
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $10; //@line 3894
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $12; //@line 3896
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $14; //@line 3898
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $16; //@line 3900
 HEAP32[$ReallocAsyncCtx + 28 >> 2] = $2; //@line 3902
 sp = STACKTOP; //@line 3903
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_489($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 35310
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35314
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35316
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35318
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 35320
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 35322
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 35325
 $17 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 35326
 if ($17 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 35332
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($17, $8, $10, $12, $14); //@line 35333
   if (!___async) {
    ___async_unwind = 0; //@line 35336
   }
   HEAP32[$ReallocAsyncCtx3 >> 2] = 765; //@line 35338
   HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 35340
   HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 35342
   HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 35344
   HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 35346
   HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 35348
   HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 35350
   HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $14 & 1; //@line 35353
   sp = STACKTOP; //@line 35354
   return;
  }
 }
 return;
}
function __ZN12LoRaWANStackC2Ev__async_cb_201($0) {
 $0 = $0 | 0;
 var $$pre106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 33478
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33480
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33482
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33484
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33486
 $$pre106 = HEAP32[$2 >> 2] | 0; //@line 33487
 if (!$$pre106) {
  HEAP32[$4 >> 2] = 0; //@line 33490
  return;
 }
 $11 = HEAP32[$$pre106 + 4 >> 2] | 0; //@line 33494
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 33495
 FUNCTION_TABLE_vii[$11 & 31]($6, $8); //@line 33496
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 179; //@line 33499
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 33500
  HEAP32[$12 >> 2] = $2; //@line 33501
  $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 33502
  HEAP32[$13 >> 2] = $4; //@line 33503
  $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 33504
  HEAP32[$14 >> 2] = $8; //@line 33505
  sp = STACKTOP; //@line 33506
  return;
 }
 ___async_unwind = 0; //@line 33509
 HEAP32[$ReallocAsyncCtx3 >> 2] = 179; //@line 33510
 $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 33511
 HEAP32[$12 >> 2] = $2; //@line 33512
 $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 33513
 HEAP32[$13 >> 2] = $4; //@line 33514
 $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 33515
 HEAP32[$14 >> 2] = $8; //@line 33516
 sp = STACKTOP; //@line 33517
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_59($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 22371
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22377
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22381
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22383
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22385
 _printf(12115, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 22386
 HEAP32[$6 >> 2] = $AsyncRetVal; //@line 22387
 _printf(12530, $6) | 0; //@line 22388
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 22389
 _putchar(10) | 0; //@line 22390
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 293; //@line 22393
  $14 = $ReallocAsyncCtx + 4 | 0; //@line 22394
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 22395
  $15 = $ReallocAsyncCtx + 8 | 0; //@line 22396
  HEAP32[$15 >> 2] = $10; //@line 22397
  $16 = $ReallocAsyncCtx + 12 | 0; //@line 22398
  HEAP32[$16 >> 2] = $12; //@line 22399
  sp = STACKTOP; //@line 22400
  return;
 }
 ___async_unwind = 0; //@line 22403
 HEAP32[$ReallocAsyncCtx >> 2] = 293; //@line 22404
 $14 = $ReallocAsyncCtx + 4 | 0; //@line 22405
 HEAP32[$14 >> 2] = $AsyncRetVal; //@line 22406
 $15 = $ReallocAsyncCtx + 8 | 0; //@line 22407
 HEAP32[$15 >> 2] = $10; //@line 22408
 $16 = $ReallocAsyncCtx + 12 | 0; //@line 22409
 HEAP32[$16 >> 2] = $12; //@line 22410
 sp = STACKTOP; //@line 22411
 return;
}
function __ZN12LoRaWANStack22set_link_check_requestEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 9891
 STACKTOP = STACKTOP + 32 | 0; //@line 9892
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9892
 $1 = sp + 12 | 0; //@line 9895
 if (!(HEAP32[$0 + 1908 >> 2] | 0)) {
  _printf(11863, sp) | 0; //@line 9900
  _printf(12770, sp + 8 | 0) | 0; //@line 9901
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9902
  _putchar(10) | 0; //@line 9903
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 324; //@line 9906
   sp = STACKTOP; //@line 9907
   STACKTOP = sp; //@line 9908
   return 0; //@line 9908
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9910
  $$0 = -1003; //@line 9911
  STACKTOP = sp; //@line 9912
  return $$0 | 0; //@line 9912
 } else {
  HEAP32[$1 >> 2] = 1; //@line 9914
  $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9916
  $6 = __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t($0 + 4 | 0, $1) | 0; //@line 9917
  if (___async) {
   HEAP32[$AsyncCtx5 >> 2] = 325; //@line 9920
   HEAP32[$AsyncCtx5 + 4 >> 2] = $1; //@line 9922
   sp = STACKTOP; //@line 9923
   STACKTOP = sp; //@line 9924
   return 0; //@line 9924
  }
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 9926
  $$0 = $6; //@line 9927
  STACKTOP = sp; //@line 9928
  return $$0 | 0; //@line 9928
 }
 return 0; //@line 9930
}
function __ZN7LoRaMac34handle_mac_state_check_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13891
 STACKTOP = STACKTOP + 16 | 0; //@line 13892
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13892
 $$byval_copy = sp + 8 | 0; //@line 13893
 $1 = sp; //@line 13894
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 13896
 HEAP32[$1 >> 2] = 442; //@line 13897
 HEAP32[$1 + 4 >> 2] = 0; //@line 13899
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13900
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 13901
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 13901
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 13902
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 443; //@line 13905
  sp = STACKTOP; //@line 13906
  STACKTOP = sp; //@line 13907
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13909
 if ($4 | 0) {
  STACKTOP = sp; //@line 13912
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 13914
 _mbed_assert_internal(12827, 12836, 187); //@line 13915
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 444; //@line 13918
  sp = STACKTOP; //@line 13919
  STACKTOP = sp; //@line 13920
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13922
 STACKTOP = sp; //@line 13923
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_215($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 33992
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33994
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33996
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33998
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34000
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34002
 $11 = $2 + 1892 | 0; //@line 34003
 $12 = HEAP32[$11 >> 2] | 0; //@line 34004
 if (!$12) {
  HEAP32[$6 >> 2] = 6; //@line 34007
  HEAP32[___async_retval >> 2] = $4; //@line 34009
  return;
 }
 $16 = HEAP32[$2 + 2288 >> 2] | 0; //@line 34014
 $18 = HEAP32[$12 + 4 >> 2] | 0; //@line 34016
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 34017
 FUNCTION_TABLE_vii[$18 & 31]($8, $2 + 1880 | 0); //@line 34018
 if (!___async) {
  ___async_unwind = 0; //@line 34021
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 253; //@line 34023
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $11; //@line 34025
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $8; //@line 34027
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $16; //@line 34029
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $8; //@line 34031
 HEAP32[$ReallocAsyncCtx9 + 20 >> 2] = $4; //@line 34033
 HEAP32[$ReallocAsyncCtx9 + 24 >> 2] = $6; //@line 34035
 HEAP32[$ReallocAsyncCtx9 + 28 >> 2] = $10; //@line 34037
 sp = STACKTOP; //@line 34038
 return;
}
function __ZN7LoRaMac29handle_delayed_tx_timer_eventEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16593
 STACKTOP = STACKTOP + 16 | 0; //@line 16594
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16594
 $$byval_copy = sp + 8 | 0; //@line 16595
 $1 = sp; //@line 16596
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 16598
 HEAP32[$1 >> 2] = 446; //@line 16599
 HEAP32[$1 + 4 >> 2] = 0; //@line 16601
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16602
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 16603
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 16603
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 16604
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 489; //@line 16607
  sp = STACKTOP; //@line 16608
  STACKTOP = sp; //@line 16609
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16611
 if ($4 | 0) {
  STACKTOP = sp; //@line 16614
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16616
 _mbed_assert_internal(12827, 12836, 194); //@line 16617
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 490; //@line 16620
  sp = STACKTOP; //@line 16621
  STACKTOP = sp; //@line 16622
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16624
 STACKTOP = sp; //@line 16625
 return;
}
function __ZN7LoRaMac18handle_ack_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16630
 STACKTOP = STACKTOP + 16 | 0; //@line 16631
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16631
 $$byval_copy = sp + 8 | 0; //@line 16632
 $1 = sp; //@line 16633
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 16635
 HEAP32[$1 >> 2] = 409; //@line 16636
 HEAP32[$1 + 4 >> 2] = 0; //@line 16638
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16639
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 16640
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 16640
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 16641
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 491; //@line 16644
  sp = STACKTOP; //@line 16645
  STACKTOP = sp; //@line 16646
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16648
 if ($4 | 0) {
  STACKTOP = sp; //@line 16651
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16653
 _mbed_assert_internal(12827, 12836, 201); //@line 16654
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 492; //@line 16657
  sp = STACKTOP; //@line 16658
  STACKTOP = sp; //@line 16659
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16661
 STACKTOP = sp; //@line 16662
 return;
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb_66($0) {
 $0 = $0 | 0;
 var $19 = 0, $2 = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22758
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22760
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22762
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 22767
  _mbed_assert_internal(12827, 12836, 217); //@line 22768
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 421; //@line 22771
   $7 = $ReallocAsyncCtx6 + 4 | 0; //@line 22772
   HEAP32[$7 >> 2] = $2; //@line 22773
   $8 = $ReallocAsyncCtx6 + 8 | 0; //@line 22774
   HEAP32[$8 >> 2] = $4; //@line 22775
   sp = STACKTOP; //@line 22776
   return;
  }
  ___async_unwind = 0; //@line 22779
  HEAP32[$ReallocAsyncCtx6 >> 2] = 421; //@line 22780
  $7 = $ReallocAsyncCtx6 + 4 | 0; //@line 22781
  HEAP32[$7 >> 2] = $2; //@line 22782
  $8 = $ReallocAsyncCtx6 + 8 | 0; //@line 22783
  HEAP32[$8 >> 2] = $4; //@line 22784
  sp = STACKTOP; //@line 22785
  return;
 }
 HEAP32[$4 + 364 >> 2] = 2; //@line 22789
 if (HEAP8[$4 + 373 >> 0] | 0) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 6; //@line 22797
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 6; //@line 22802
 $19 = $4 + 944 | 0; //@line 22803
 HEAP8[$19 >> 0] = HEAP8[$19 >> 0] | 32; //@line 22806
 return;
}
function __ZN7LoRaMac17handle_tx_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13726
 STACKTOP = STACKTOP + 16 | 0; //@line 13727
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13727
 $$byval_copy = sp + 8 | 0; //@line 13728
 $1 = sp; //@line 13729
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 13731
 HEAP32[$1 >> 2] = 434; //@line 13732
 HEAP32[$1 + 4 >> 2] = 0; //@line 13734
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13735
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 13736
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 13736
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 13737
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 435; //@line 13740
  sp = STACKTOP; //@line 13741
  STACKTOP = sp; //@line 13742
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13744
 if ($4 | 0) {
  STACKTOP = sp; //@line 13747
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 13749
 _mbed_assert_internal(12827, 12836, 162); //@line 13750
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 436; //@line 13753
  sp = STACKTOP; //@line 13754
  STACKTOP = sp; //@line 13755
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13757
 STACKTOP = sp; //@line 13758
 return;
}
function __ZN7LoRaMac17handle_rx_timeoutEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13469
 STACKTOP = STACKTOP + 16 | 0; //@line 13470
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13470
 $$byval_copy = sp + 8 | 0; //@line 13471
 $1 = sp; //@line 13472
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 13474
 HEAP32[$1 >> 2] = 424; //@line 13475
 HEAP32[$1 + 4 >> 2] = 0; //@line 13477
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13478
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 13479
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 13479
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 13480
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 425; //@line 13483
  sp = STACKTOP; //@line 13484
  STACKTOP = sp; //@line 13485
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13487
 if ($4 | 0) {
  STACKTOP = sp; //@line 13490
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 13492
 _mbed_assert_internal(12827, 12836, 155); //@line 13493
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 426; //@line 13496
  sp = STACKTOP; //@line 13497
  STACKTOP = sp; //@line 13498
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13500
 STACKTOP = sp; //@line 13501
 return;
}
function __ZN14lorawan_timersD2Ev__async_cb_456($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 32095
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32097
 $4 = HEAP32[$2 + 48 >> 2] | 0; //@line 32099
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 32104
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 32105
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 36 | 0); //@line 32106
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 339; //@line 32109
   $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 32110
   HEAP32[$9 >> 2] = $2; //@line 32111
   sp = STACKTOP; //@line 32112
   return;
  }
  ___async_unwind = 0; //@line 32115
  HEAP32[$ReallocAsyncCtx4 >> 2] = 339; //@line 32116
  $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 32117
  HEAP32[$9 >> 2] = $2; //@line 32118
  sp = STACKTOP; //@line 32119
  return;
 }
 $11 = HEAP32[$2 + 28 >> 2] | 0; //@line 32123
 if (!$11) {
  return;
 }
 $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 32130
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 32131
 FUNCTION_TABLE_vi[$15 & 1023]($2 + 16 | 0); //@line 32132
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 340; //@line 32135
  sp = STACKTOP; //@line 32136
  return;
 }
 ___async_unwind = 0; //@line 32139
 HEAP32[$ReallocAsyncCtx5 >> 2] = 340; //@line 32140
 sp = STACKTOP; //@line 32141
 return;
}
function __ZN7LoRaMac15handle_rx_errorEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13241
 STACKTOP = STACKTOP + 16 | 0; //@line 13242
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13242
 $$byval_copy = sp + 8 | 0; //@line 13243
 $1 = sp; //@line 13244
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 13246
 HEAP32[$1 >> 2] = 415; //@line 13247
 HEAP32[$1 + 4 >> 2] = 0; //@line 13249
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13250
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 13251
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 13251
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 13252
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 416; //@line 13255
  sp = STACKTOP; //@line 13256
  STACKTOP = sp; //@line 13257
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13259
 if ($4 | 0) {
  STACKTOP = sp; //@line 13262
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 13264
 _mbed_assert_internal(12827, 12836, 148); //@line 13265
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 417; //@line 13268
  sp = STACKTOP; //@line 13269
  STACKTOP = sp; //@line 13270
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13272
 STACKTOP = sp; //@line 13273
 return;
}
function __ZN7LoRaMac14handle_tx_doneEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 10342
 STACKTOP = STACKTOP + 16 | 0; //@line 10343
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10343
 $$byval_copy = sp + 8 | 0; //@line 10344
 $1 = sp; //@line 10345
 $3 = HEAP32[$0 + 1328 >> 2] | 0; //@line 10347
 HEAP32[$1 >> 2] = 341; //@line 10348
 HEAP32[$1 + 4 >> 2] = 0; //@line 10350
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10351
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 10352
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 10352
 $4 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 10353
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 342; //@line 10356
  sp = STACKTOP; //@line 10357
  STACKTOP = sp; //@line 10358
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10360
 if ($4 | 0) {
  STACKTOP = sp; //@line 10363
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10365
 _mbed_assert_internal(12827, 12836, 134); //@line 10366
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 343; //@line 10369
  sp = STACKTOP; //@line 10370
  STACKTOP = sp; //@line 10371
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10373
 STACKTOP = sp; //@line 10374
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_221($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 34667
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34669
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34671
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34673
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34675
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34677
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 34679
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 34681
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 34683
 HEAP32[$8 >> 2] = 6; //@line 34684
 HEAP32[$16 >> 2] = HEAP32[$2 + 1952 >> 2]; //@line 34687
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(32) | 0; //@line 34688
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($12, $14) | 0; //@line 34689
 if (!___async) {
  ___async_unwind = 0; //@line 34692
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 240; //@line 34694
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $8; //@line 34696
 HEAP32[$ReallocAsyncCtx16 + 8 >> 2] = $10; //@line 34698
 HEAP32[$ReallocAsyncCtx16 + 12 >> 2] = $12; //@line 34700
 HEAP32[$ReallocAsyncCtx16 + 16 >> 2] = $14; //@line 34702
 HEAP32[$ReallocAsyncCtx16 + 20 >> 2] = $2; //@line 34704
 HEAP32[$ReallocAsyncCtx16 + 24 >> 2] = $6; //@line 34706
 HEAP32[$ReallocAsyncCtx16 + 28 >> 2] = $4; //@line 34708
 sp = STACKTOP; //@line 34709
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_451($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 31601
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31603
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31605
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31607
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31609
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31611
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31613
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31615
 $16 = HEAP32[$2 + 356 >> 2] | 0; //@line 31617
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(40) | 0; //@line 31619
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($16, $2 + 1016 | 0); //@line 31620
 if (!___async) {
  ___async_unwind = 0; //@line 31623
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 467; //@line 31625
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 31627
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 31629
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 31631
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $4; //@line 31633
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $6; //@line 31635
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $8; //@line 31637
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $10; //@line 31639
 HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $12; //@line 31641
 HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $14; //@line 31643
 sp = STACKTOP; //@line 31644
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7924
 $2 = HEAP8[$0 + 16 >> 0] | 0; //@line 7926
 $4 = HEAP8[$0 + 17 >> 0] | 0; //@line 7928
 $5 = $0 + 12 | 0; //@line 7929
 $6 = HEAP32[$5 >> 2] | 0; //@line 7930
 do {
  if (!$6) {
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7934
   _mbed_assert_internal(14997, 15002, 1677); //@line 7935
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 274; //@line 7938
    HEAP32[$AsyncCtx2 + 4 >> 2] = $5; //@line 7940
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 7942
    HEAP8[$AsyncCtx2 + 12 >> 0] = $2; //@line 7944
    HEAP8[$AsyncCtx2 + 13 >> 0] = $4; //@line 7946
    sp = STACKTOP; //@line 7947
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7950
    $13 = HEAP32[$5 >> 2] | 0; //@line 7952
    break;
   }
  } else {
   $13 = $6; //@line 7956
  }
 } while (0);
 $12 = HEAP32[$13 >> 2] | 0; //@line 7959
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7960
 FUNCTION_TABLE_viii[$12 & 7]($0, $2, $4); //@line 7961
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 275; //@line 7964
  sp = STACKTOP; //@line 7965
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7968
  return;
 }
}
function __ZN12radio_eventsD2Ev__async_cb_467($0) {
 $0 = $0 | 0;
 var $11 = 0, $14 = 0, $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 32883
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32885
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 32887
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 32892
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 32893
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 16 | 0); //@line 32894
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 334; //@line 32897
   $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 32898
   HEAP32[$9 >> 2] = $2; //@line 32899
   sp = STACKTOP; //@line 32900
   return;
  }
  ___async_unwind = 0; //@line 32903
  HEAP32[$ReallocAsyncCtx6 >> 2] = 334; //@line 32904
  $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 32905
  HEAP32[$9 >> 2] = $2; //@line 32906
  sp = STACKTOP; //@line 32907
  return;
 }
 $11 = HEAP32[$2 + 12 >> 2] | 0; //@line 32911
 if (!$11) {
  return;
 }
 $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 32917
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 32918
 FUNCTION_TABLE_vi[$14 & 1023]($2); //@line 32919
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 335; //@line 32922
  sp = STACKTOP; //@line 32923
  return;
 }
 ___async_unwind = 0; //@line 32926
 HEAP32[$ReallocAsyncCtx7 >> 2] = 335; //@line 32927
 sp = STACKTOP; //@line 32928
 return;
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_17($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 18649
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18651
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18653
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18655
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$4 + 364 >> 2] = 2; //@line 18661
  HEAP32[___async_retval >> 2] = $6; //@line 18663
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(16) | 0; //@line 18666
 _mbed_assert_internal(12827, 12836, 217); //@line 18667
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 551; //@line 18670
  $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 18671
  HEAP32[$9 >> 2] = $2; //@line 18672
  $10 = $ReallocAsyncCtx5 + 8 | 0; //@line 18673
  HEAP32[$10 >> 2] = $4; //@line 18674
  $11 = $ReallocAsyncCtx5 + 12 | 0; //@line 18675
  HEAP32[$11 >> 2] = $6; //@line 18676
  sp = STACKTOP; //@line 18677
  return;
 }
 ___async_unwind = 0; //@line 18680
 HEAP32[$ReallocAsyncCtx5 >> 2] = 551; //@line 18681
 $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 18682
 HEAP32[$9 >> 2] = $2; //@line 18683
 $10 = $ReallocAsyncCtx5 + 8 | 0; //@line 18684
 HEAP32[$10 >> 2] = $4; //@line 18685
 $11 = $ReallocAsyncCtx5 + 12 | 0; //@line 18686
 HEAP32[$11 >> 2] = $6; //@line 18687
 sp = STACKTOP; //@line 18688
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_323($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 5763
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5765
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5767
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5769
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5771
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5773
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5775
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 5777
 _srand(HEAP32[___async_retval >> 2] | 0); //@line 5780
 HEAP8[$2 + 368 >> 0] = 1; //@line 5782
 $17 = HEAP32[$6 >> 2] | 0; //@line 5783
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(32) | 0; //@line 5784
 __ZN7LoRaPHY25setup_public_network_modeEb($17, 1); //@line 5785
 if (!___async) {
  ___async_unwind = 0; //@line 5788
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 507; //@line 5790
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 5792
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $4; //@line 5794
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $6; //@line 5796
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $8; //@line 5798
 HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $10; //@line 5800
 HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $12; //@line 5802
 HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $14; //@line 5804
 sp = STACKTOP; //@line 5805
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_273($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 2471
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2473
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2475
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2477
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2479
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2481
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2483
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2485
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2487
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(36) | 0; //@line 2488
 $17 = __ZN4mbed5Timer7read_msEv($2) | 0; //@line 2489
 if (!___async) {
  HEAP32[___async_retval >> 2] = $17; //@line 2493
  ___async_unwind = 0; //@line 2494
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 99; //@line 2496
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $4; //@line 2498
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $6; //@line 2500
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $8; //@line 2502
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $10; //@line 2504
 HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $12; //@line 2506
 HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $14; //@line 2508
 HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $2; //@line 2510
 HEAP32[$ReallocAsyncCtx12 + 32 >> 2] = $16; //@line 2512
 sp = STACKTOP; //@line 2513
 return;
}
function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $26 = 0, $8 = 0, $9 = 0, $8$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$0914 = $2; //@line 12689
  $8 = $0; //@line 12689
  $9 = $1; //@line 12689
  while (1) {
   $10 = ___uremdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 12691
   $$0914 = $$0914 + -1 | 0; //@line 12695
   HEAP8[$$0914 >> 0] = $10 & 255 | 48; //@line 12696
   $8$looptemp = $8;
   $8 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 12697
   if (!($9 >>> 0 > 9 | ($9 | 0) == 9 & $8$looptemp >>> 0 > 4294967295)) {
    break;
   } else {
    $9 = tempRet0; //@line 12705
   }
  }
  $$010$lcssa$off0 = $8; //@line 12710
  $$09$lcssa = $$0914; //@line 12710
 } else {
  $$010$lcssa$off0 = $0; //@line 12712
  $$09$lcssa = $2; //@line 12712
 }
 if (!$$010$lcssa$off0) {
  $$1$lcssa = $$09$lcssa; //@line 12716
 } else {
  $$012 = $$010$lcssa$off0; //@line 12718
  $$111 = $$09$lcssa; //@line 12718
  while (1) {
   $26 = $$111 + -1 | 0; //@line 12723
   HEAP8[$26 >> 0] = ($$012 >>> 0) % 10 | 0 | 48; //@line 12724
   if ($$012 >>> 0 < 10) {
    $$1$lcssa = $26; //@line 12728
    break;
   } else {
    $$012 = ($$012 >>> 0) / 10 | 0; //@line 12731
    $$111 = $26; //@line 12731
   }
  }
 }
 return $$1$lcssa | 0; //@line 12735
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_150($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 29471
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29473
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29475
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29477
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29479
 $9 = $2 + 944 | 0; //@line 29480
 HEAP8[$9 >> 0] = 2 | HEAP8[$9 >> 0] & -7; //@line 29484
 $13 = $2 + 944 | 0; //@line 29485
 HEAP8[$13 >> 0] = HEAP8[$13 >> 0] | 32; //@line 29488
 $16 = HEAP32[$4 >> 2] | 0; //@line 29489
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 29491
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($16, $2 + 996 | 0, 1); //@line 29492
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 395; //@line 29495
  $18 = $ReallocAsyncCtx17 + 4 | 0; //@line 29496
  HEAP32[$18 >> 2] = $6; //@line 29497
  $19 = $ReallocAsyncCtx17 + 8 | 0; //@line 29498
  HEAP32[$19 >> 2] = $8; //@line 29499
  sp = STACKTOP; //@line 29500
  return;
 }
 ___async_unwind = 0; //@line 29503
 HEAP32[$ReallocAsyncCtx17 >> 2] = 395; //@line 29504
 $18 = $ReallocAsyncCtx17 + 4 | 0; //@line 29505
 HEAP32[$18 >> 2] = $6; //@line 29506
 $19 = $ReallocAsyncCtx17 + 8 | 0; //@line 29507
 HEAP32[$19 >> 2] = $8; //@line 29508
 sp = STACKTOP; //@line 29509
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_149($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 29426
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29428
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29430
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29432
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29434
 $9 = $2 + 944 | 0; //@line 29435
 HEAP8[$9 >> 0] = 2 | HEAP8[$9 >> 0] & -7; //@line 29439
 $13 = $2 + 944 | 0; //@line 29440
 HEAP8[$13 >> 0] = HEAP8[$13 >> 0] | 32; //@line 29443
 $16 = HEAP32[$4 >> 2] | 0; //@line 29444
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 29446
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($16, $2 + 996 | 0, 1); //@line 29447
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 395; //@line 29450
  $18 = $ReallocAsyncCtx17 + 4 | 0; //@line 29451
  HEAP32[$18 >> 2] = $6; //@line 29452
  $19 = $ReallocAsyncCtx17 + 8 | 0; //@line 29453
  HEAP32[$19 >> 2] = $8; //@line 29454
  sp = STACKTOP; //@line 29455
  return;
 }
 ___async_unwind = 0; //@line 29458
 HEAP32[$ReallocAsyncCtx17 >> 2] = 395; //@line 29459
 $18 = $ReallocAsyncCtx17 + 4 | 0; //@line 29460
 HEAP32[$18 >> 2] = $6; //@line 29461
 $19 = $ReallocAsyncCtx17 + 8 | 0; //@line 29462
 HEAP32[$19 >> 2] = $8; //@line 29463
 sp = STACKTOP; //@line 29464
 return;
}
function __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$ = 0, $$$i = 0, $$0 = 0.0, $10 = 0, $13 = 0, $16 = 0, $23 = 0, $28 = 0, $41 = 0, $5 = 0, $51 = 0, $7 = 0, $8 = 0;
 $5 = $1 << 24 >> 24; //@line 23478
 $7 = HEAP8[$0 + 29 >> 0] | 0; //@line 23480
 $8 = $7 & 255; //@line 23481
 $$ = ($5 | 0) < ($8 | 0) ? $5 : $8; //@line 23483
 $10 = $$ & 255; //@line 23484
 HEAP8[$4 + 1 >> 0] = $10; //@line 23486
 $13 = HEAP32[$0 + 80 >> 2] | 0; //@line 23488
 $16 = HEAP32[$13 + (($$ & 255) << 2) >> 2] | 0; //@line 23491
 HEAP8[$4 + 2 >> 0] = ($16 | 0) == 5e5 ? 2 : ($16 | 0) == 25e4 & 1; //@line 23497
 $23 = HEAP32[$0 + 88 >> 2] | 0; //@line 23504
 if (HEAP8[$0 + 14 >> 0] | 0 ? $7 << 24 >> 24 == $10 << 24 >> 24 : 0) {
  $$0 = 8.0 / +(HEAPU8[$23 + $8 >> 0] | 0); //@line 23510
 } else {
  $28 = $$ & 255; //@line 23512
  $$0 = +(1 << HEAPU8[$23 + $28 >> 0] | 0) / +((HEAP32[$13 + ($28 << 2) >> 2] | 0) >>> 0) * 1.0e3; //@line 23523
 }
 $41 = $2 & 255; //@line 23527
 $51 = ~~+Math_ceil(+(($$0 * +(($41 << 1) + -8 | 0) + +($3 << 1 >>> 0)) / $$0)) >>> 0; //@line 23537
 $$$i = $51 >>> 0 > $41 >>> 0 ? $51 : $41; //@line 23539
 HEAP32[$4 + 8 >> 2] = $$$i; //@line 23540
 HEAP32[$4 + 12 >> 2] = ~~+Math_ceil(+($$0 * 4.0 - $$0 * +($$$i >>> 0) * .5 + -1.0)); //@line 23549
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_388($0) {
 $0 = $0 | 0;
 var $16 = 0, $2 = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 19728
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19730
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19732
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$4 + 364 >> 2] = 2; //@line 19738
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 2; //@line 19742
  HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 2; //@line 19746
  $16 = $4 + 944 | 0; //@line 19747
  HEAP8[$16 >> 0] = HEAP8[$16 >> 0] | 32; //@line 19750
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 19753
 _mbed_assert_internal(12827, 12836, 217); //@line 19754
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 441; //@line 19757
  $7 = $ReallocAsyncCtx5 + 4 | 0; //@line 19758
  HEAP32[$7 >> 2] = $2; //@line 19759
  $8 = $ReallocAsyncCtx5 + 8 | 0; //@line 19760
  HEAP32[$8 >> 2] = $4; //@line 19761
  sp = STACKTOP; //@line 19762
  return;
 }
 ___async_unwind = 0; //@line 19765
 HEAP32[$ReallocAsyncCtx5 >> 2] = 441; //@line 19766
 $7 = $ReallocAsyncCtx5 + 4 | 0; //@line 19767
 HEAP32[$7 >> 2] = $2; //@line 19768
 $8 = $ReallocAsyncCtx5 + 8 | 0; //@line 19769
 HEAP32[$8 >> 2] = $4; //@line 19770
 sp = STACKTOP; //@line 19771
 return;
}
function __ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$09 = 0, $$1 = 0, $10 = 0, $15 = 0, $17 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 24222
 if (!(HEAP8[$0 + 17 >> 0] | 0)) {
  $$09 = 0; //@line 24227
  return $$09 | 0; //@line 24228
 }
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 24232
 $8 = $1 + 4 | 0; //@line 24233
 $9 = HEAP32[$8 >> 2] | 0; //@line 24234
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 24235
 $10 = FUNCTION_TABLE_iii[$7 & 31]($0, $9) | 0; //@line 24236
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 620; //@line 24239
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 24241
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 24243
  HEAP32[$AsyncCtx + 12 >> 2] = $8; //@line 24245
  sp = STACKTOP; //@line 24246
  return 0; //@line 24247
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 24249
 $$ = $10 ? 3 : 2; //@line 24250
 $15 = HEAP32[$0 + 112 >> 2] | 0; //@line 24252
 $17 = HEAPU8[$1 >> 0] | 0; //@line 24254
 $$1 = (HEAP32[$15 + ($17 * 12 | 0) >> 2] | 0) == 0 ? $$ & 1 : $$; //@line 24259
 if ($$1 << 24 >> 24 != 3) {
  $$09 = $$1; //@line 24262
  return $$09 | 0; //@line 24263
 }
 HEAP32[$15 + ($17 * 12 | 0) + 4 >> 2] = HEAP32[$8 >> 2]; //@line 24267
 $$09 = 3; //@line 24268
 return $$09 | 0; //@line 24269
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_318($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 5319
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5323
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5325
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5327
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 5328
 if (!$9) {
  HEAP32[$6 + 988 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[$4 >> 2] | 0) | 0; //@line 5334
  HEAP32[___async_retval >> 2] = 0; //@line 5336
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 5340
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 5341
 FUNCTION_TABLE_vi[$12 & 1023]($8); //@line 5342
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 523; //@line 5345
  $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 5346
  HEAP32[$13 >> 2] = $4; //@line 5347
  $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 5348
  HEAP32[$14 >> 2] = $6; //@line 5349
  sp = STACKTOP; //@line 5350
  return;
 }
 ___async_unwind = 0; //@line 5353
 HEAP32[$ReallocAsyncCtx5 >> 2] = 523; //@line 5354
 $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 5355
 HEAP32[$13 >> 2] = $4; //@line 5356
 $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 5357
 HEAP32[$14 >> 2] = $6; //@line 5358
 sp = STACKTOP; //@line 5359
 return;
}
function _equeue_create_inplace($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$032 = 0, $$033 = 0, $19 = 0, $21 = 0, $25 = 0, $28 = 0, $5 = 0;
 HEAP32[$0 + 12 >> 2] = $2; //@line 4308
 HEAP32[$0 + 20 >> 2] = 0; //@line 4310
 $5 = $0 + 16 | 0; //@line 4311
 HEAP32[$5 >> 2] = 0; //@line 4312
 if ($1 | 0) {
  $$033 = $1; //@line 4315
  $21 = 0; //@line 4315
  do {
   $21 = $21 + 1 | 0; //@line 4317
   $$033 = $$033 >>> 1; //@line 4318
  } while (($$033 | 0) != 0);
  HEAP32[$5 >> 2] = $21; //@line 4326
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 4329
 HEAP32[$0 + 28 >> 2] = $1; //@line 4331
 HEAP32[$0 + 32 >> 2] = $2; //@line 4333
 HEAP32[$0 >> 2] = 0; //@line 4334
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 4337
 HEAP8[$0 + 9 >> 0] = 0; //@line 4339
 HEAP8[$0 + 8 >> 0] = 0; //@line 4341
 HEAP8[$0 + 36 >> 0] = 0; //@line 4343
 HEAP32[$0 + 40 >> 2] = 0; //@line 4345
 HEAP32[$0 + 44 >> 2] = 0; //@line 4347
 $19 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 4349
 if (($19 | 0) < 0) {
  $$032 = $19; //@line 4352
  return $$032 | 0; //@line 4353
 }
 $25 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 4356
 if (($25 | 0) < 0) {
  $$032 = $25; //@line 4359
  return $$032 | 0; //@line 4360
 }
 $28 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 4363
 $$032 = ($28 | 0) < 0 ? $28 : 0; //@line 4366
 return $$032 | 0; //@line 4367
}
function __ZN12LoRaWANStack12add_channelsERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 9375
 STACKTOP = STACKTOP + 16 | 0; //@line 9376
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9376
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _printf(11863, sp) | 0; //@line 9383
  _printf(12660, sp + 8 | 0) | 0; //@line 9384
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9385
  _putchar(10) | 0; //@line 9386
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 307; //@line 9389
   sp = STACKTOP; //@line 9390
   STACKTOP = sp; //@line 9391
   return 0; //@line 9391
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9393
  $$0 = -1012; //@line 9394
  STACKTOP = sp; //@line 9395
  return $$0 | 0; //@line 9395
 } else {
  $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9398
  $6 = __ZN7LoRaMac16add_channel_planERK16lora_channelplan($0 + 4 | 0, $1) | 0; //@line 9399
  if (___async) {
   HEAP32[$AsyncCtx5 >> 2] = 308; //@line 9402
   sp = STACKTOP; //@line 9403
   STACKTOP = sp; //@line 9404
   return 0; //@line 9404
  }
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 9406
  $$0 = $6; //@line 9407
  STACKTOP = sp; //@line 9408
  return $$0 | 0; //@line 9408
 }
 return 0; //@line 9410
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18711
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18713
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18717
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18719
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18721
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18723
 if (!(HEAP8[$2 >> 0] | 0)) {
  $13 = (HEAP32[$0 + 8 >> 2] | 0) + 8 | 0; //@line 18727
  if ($13 >>> 0 < $6 >>> 0) {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 18730
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($13, $8, $10, $12); //@line 18731
   if (!___async) {
    ___async_unwind = 0; //@line 18734
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 769; //@line 18736
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 18738
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $13; //@line 18740
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 18742
   HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 18744
   HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 18746
   HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 18748
   sp = STACKTOP; //@line 18749
   return;
  }
 }
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_27($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20010
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20012
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20014
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20016
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20020
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20024
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20026
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20028
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20030
 HEAP8[$4 + 688 >> 0] = 2; //@line 20032
 _printf(10880, $6) | 0; //@line 20033
 HEAP32[$10 >> 2] = 3; //@line 20034
 _printf(10946, $10) | 0; //@line 20035
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 20036
 _putchar(10) | 0; //@line 20037
 if (!___async) {
  ___async_unwind = 0; //@line 20040
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 136; //@line 20042
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 20044
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 20046
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $14; //@line 20048
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $16; //@line 20050
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $18; //@line 20052
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $20; //@line 20054
 sp = STACKTOP; //@line 20055
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb_350($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16859
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16863
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 16865
 $7 = (HEAP32[$0 + 4 >> 2] | 0) + 4 | 0; //@line 16866
 $8 = HEAP32[$7 >> 2] | 0; //@line 16867
 $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 72 >> 2] | 0; //@line 16870
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 16871
 FUNCTION_TABLE_vi[$11 & 1023]($8); //@line 16872
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 642; //@line 16875
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 16876
  HEAP32[$12 >> 2] = $7; //@line 16877
  $13 = $ReallocAsyncCtx + 8 | 0; //@line 16878
  HEAP32[$13 >> 2] = $4; //@line 16879
  $14 = $ReallocAsyncCtx + 12 | 0; //@line 16880
  HEAP8[$14 >> 0] = $6; //@line 16881
  sp = STACKTOP; //@line 16882
  return;
 }
 ___async_unwind = 0; //@line 16885
 HEAP32[$ReallocAsyncCtx >> 2] = 642; //@line 16886
 $12 = $ReallocAsyncCtx + 4 | 0; //@line 16887
 HEAP32[$12 >> 2] = $7; //@line 16888
 $13 = $ReallocAsyncCtx + 8 | 0; //@line 16889
 HEAP32[$13 >> 2] = $4; //@line 16890
 $14 = $ReallocAsyncCtx + 12 | 0; //@line 16891
 HEAP8[$14 >> 0] = $6; //@line 16892
 sp = STACKTOP; //@line 16893
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_326($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 5952
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 5954
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5956
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5958
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5960
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5962
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5964
 $14 = (HEAP8[___async_retval >> 0] | 0) == 0; //@line 5967
 $15 = HEAP32[$6 >> 2] | 0; //@line 5968
 $18 = HEAP32[(HEAP32[$15 >> 2] | 0) + 76 >> 2] | 0; //@line 5971
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 5972
 FUNCTION_TABLE_vi[$18 & 1023]($15); //@line 5973
 if (!___async) {
  ___async_unwind = 0; //@line 5976
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 605; //@line 5978
 HEAP8[$ReallocAsyncCtx3 + 4 >> 0] = $2; //@line 5980
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 5982
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 5984
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 5986
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 5988
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 5990
 HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $14 & 1; //@line 5993
 sp = STACKTOP; //@line 5994
 return;
}
function __ZN12LoRaWANStack16remove_a_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 9456
 STACKTOP = STACKTOP + 16 | 0; //@line 9457
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9457
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _printf(11863, sp) | 0; //@line 9464
  _printf(12660, sp + 8 | 0) | 0; //@line 9465
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9466
  _putchar(10) | 0; //@line 9467
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 311; //@line 9470
   sp = STACKTOP; //@line 9471
   STACKTOP = sp; //@line 9472
   return 0; //@line 9472
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9474
  $$0 = -1012; //@line 9475
  STACKTOP = sp; //@line 9476
  return $$0 | 0; //@line 9476
 } else {
  $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9479
  $6 = __ZN7LoRaMac21remove_single_channelEh($0 + 4 | 0, $1) | 0; //@line 9480
  if (___async) {
   HEAP32[$AsyncCtx5 >> 2] = 312; //@line 9483
   sp = STACKTOP; //@line 9484
   STACKTOP = sp; //@line 9485
   return 0; //@line 9485
  }
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 9487
  $$0 = $6; //@line 9488
  STACKTOP = sp; //@line 9489
  return $$0 | 0; //@line 9489
 }
 return 0; //@line 9491
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $2 = 0, $4 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 3773
 $2 = $0; //@line 3774
 L1 : do {
  switch ($1 | 0) {
  case 1:
   {
    $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 3779
    if ($4 | 0) {
     $7 = HEAP32[$4 >> 2] | 0; //@line 3783
     $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3784
     FUNCTION_TABLE_vi[$7 & 1023]($2 + 40 | 0); //@line 3785
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 153; //@line 3788
      sp = STACKTOP; //@line 3789
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 3792
      break L1;
     }
    }
    break;
   }
  case 2:
   {
    $9 = HEAP32[$2 + 68 >> 2] | 0; //@line 3800
    if ($9 | 0) {
     $12 = HEAP32[$9 >> 2] | 0; //@line 3804
     $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3805
     FUNCTION_TABLE_vi[$12 & 1023]($2 + 56 | 0); //@line 3806
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 154; //@line 3809
      sp = STACKTOP; //@line 3810
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3813
      break L1;
     }
    }
    break;
   }
  default:
   {}
  }
 } while (0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $21 = 0, $22 = 0, $28 = 0, $30 = 0;
 HEAP8[$1 + 53 >> 0] = 1; //@line 14715
 do {
  if ((HEAP32[$1 + 4 >> 2] | 0) == ($3 | 0)) {
   HEAP8[$1 + 52 >> 0] = 1; //@line 14722
   $10 = $1 + 16 | 0; //@line 14723
   $11 = HEAP32[$10 >> 2] | 0; //@line 14724
   if (!$11) {
    HEAP32[$10 >> 2] = $2; //@line 14727
    HEAP32[$1 + 24 >> 2] = $4; //@line 14729
    HEAP32[$1 + 36 >> 2] = 1; //@line 14731
    if (!(($4 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0)) {
     break;
    }
    HEAP8[$1 + 54 >> 0] = 1; //@line 14741
    break;
   }
   if (($11 | 0) != ($2 | 0)) {
    $30 = $1 + 36 | 0; //@line 14746
    HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1; //@line 14749
    HEAP8[$1 + 54 >> 0] = 1; //@line 14751
    break;
   }
   $21 = $1 + 24 | 0; //@line 14754
   $22 = HEAP32[$21 >> 2] | 0; //@line 14755
   if (($22 | 0) == 2) {
    HEAP32[$21 >> 2] = $4; //@line 14758
    $28 = $4; //@line 14759
   } else {
    $28 = $22; //@line 14761
   }
   if (($28 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0) {
    HEAP8[$1 + 54 >> 0] = 1; //@line 14770
   }
  }
 } while (0);
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7998
 $2 = HEAP32[$0 + 16 >> 2] | 0; //@line 8000
 $3 = $0 + 12 | 0; //@line 8001
 $4 = HEAP32[$3 >> 2] | 0; //@line 8002
 do {
  if (!$4) {
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8006
   _mbed_assert_internal(14997, 15002, 1102); //@line 8007
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 277; //@line 8010
    HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 8012
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 8014
    HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 8016
    sp = STACKTOP; //@line 8017
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8020
    $10 = HEAP32[$3 >> 2] | 0; //@line 8022
    break;
   }
  } else {
   $10 = $4; //@line 8026
  }
 } while (0);
 $9 = HEAP32[$10 >> 2] | 0; //@line 8029
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8030
 FUNCTION_TABLE_vii[$9 & 31]($0, $2); //@line 8031
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 278; //@line 8034
  sp = STACKTOP; //@line 8035
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8038
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_126($0) {
 $0 = $0 | 0;
 var $$pre13 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 25960
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25962
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25964
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25966
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25968
 $$pre13 = HEAP32[$2 >> 2] | 0; //@line 25969
 if (!$$pre13) {
  HEAP32[$4 >> 2] = 0; //@line 25972
  return;
 }
 $11 = HEAP32[$$pre13 + 4 >> 2] | 0; //@line 25976
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 25977
 FUNCTION_TABLE_vii[$11 & 31]($6, $8); //@line 25978
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 306; //@line 25981
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 25982
  HEAP32[$12 >> 2] = $2; //@line 25983
  $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 25984
  HEAP32[$13 >> 2] = $4; //@line 25985
  sp = STACKTOP; //@line 25986
  return;
 }
 ___async_unwind = 0; //@line 25989
 HEAP32[$ReallocAsyncCtx6 >> 2] = 306; //@line 25990
 $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 25991
 HEAP32[$12 >> 2] = $2; //@line 25992
 $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 25993
 HEAP32[$13 >> 2] = $4; //@line 25994
 sp = STACKTOP; //@line 25995
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_162($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 30950
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30954
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30956
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30958
 $9 = $4 + 12 | 0; //@line 30960
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 30961
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 30962
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 2) | 0; //@line 30963
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 194; //@line 30966
  $11 = $ReallocAsyncCtx10 + 4 | 0; //@line 30967
  HEAP32[$11 >> 2] = $9; //@line 30968
  $12 = $ReallocAsyncCtx10 + 8 | 0; //@line 30969
  HEAP32[$12 >> 2] = $8; //@line 30970
  sp = STACKTOP; //@line 30971
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 30975
 ___async_unwind = 0; //@line 30976
 HEAP32[$ReallocAsyncCtx10 >> 2] = 194; //@line 30977
 $11 = $ReallocAsyncCtx10 + 4 | 0; //@line 30978
 HEAP32[$11 >> 2] = $9; //@line 30979
 $12 = $ReallocAsyncCtx10 + 8 | 0; //@line 30980
 HEAP32[$12 >> 2] = $8; //@line 30981
 sp = STACKTOP; //@line 30982
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_160($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 30889
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30893
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30895
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30897
 $9 = $4 + 12 | 0; //@line 30899
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 30900
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(12) | 0; //@line 30901
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 4) | 0; //@line 30902
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 190; //@line 30905
  $11 = $ReallocAsyncCtx11 + 4 | 0; //@line 30906
  HEAP32[$11 >> 2] = $9; //@line 30907
  $12 = $ReallocAsyncCtx11 + 8 | 0; //@line 30908
  HEAP32[$12 >> 2] = $8; //@line 30909
  sp = STACKTOP; //@line 30910
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 30914
 ___async_unwind = 0; //@line 30915
 HEAP32[$ReallocAsyncCtx11 >> 2] = 190; //@line 30916
 $11 = $ReallocAsyncCtx11 + 4 | 0; //@line 30917
 HEAP32[$11 >> 2] = $9; //@line 30918
 $12 = $ReallocAsyncCtx11 + 8 | 0; //@line 30919
 HEAP32[$12 >> 2] = $8; //@line 30920
 sp = STACKTOP; //@line 30921
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_183($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 32274
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32278
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32280
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32282
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32284
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32286
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32288
 $15 = $4 + 12 | 0; //@line 32290
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 32291
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(24) | 0; //@line 32292
 $16 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 7) | 0; //@line 32293
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 32297
  ___async_unwind = 0; //@line 32298
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 204; //@line 32300
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $15; //@line 32302
 HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $8; //@line 32304
 HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $10; //@line 32306
 HEAP32[$ReallocAsyncCtx8 + 16 >> 2] = $12; //@line 32308
 HEAP32[$ReallocAsyncCtx8 + 20 >> 2] = $14; //@line 32310
 sp = STACKTOP; //@line 32311
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 30828
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30832
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30834
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30836
 $9 = $4 + 12 | 0; //@line 30838
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 30839
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(12) | 0; //@line 30840
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 3) | 0; //@line 30841
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 186; //@line 30844
  $11 = $ReallocAsyncCtx12 + 4 | 0; //@line 30845
  HEAP32[$11 >> 2] = $9; //@line 30846
  $12 = $ReallocAsyncCtx12 + 8 | 0; //@line 30847
  HEAP32[$12 >> 2] = $8; //@line 30848
  sp = STACKTOP; //@line 30849
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 30853
 ___async_unwind = 0; //@line 30854
 HEAP32[$ReallocAsyncCtx12 >> 2] = 186; //@line 30855
 $11 = $ReallocAsyncCtx12 + 4 | 0; //@line 30856
 HEAP32[$11 >> 2] = $9; //@line 30857
 $12 = $ReallocAsyncCtx12 + 8 | 0; //@line 30858
 HEAP32[$12 >> 2] = $8; //@line 30859
 sp = STACKTOP; //@line 30860
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_238($0) {
 $0 = $0 | 0;
 var $$0 = 0, $11 = 0, $13 = 0, $19 = 0, $2 = 0, $25 = 0, $31 = 0, $35 = 0, $4 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35430
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 35432
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35434
 if (HEAP32[___async_retval >> 2] | 0) {
  $$0 = -1014; //@line 35441
  $35 = ___async_retval; //@line 35442
  HEAP32[$35 >> 2] = $$0; //@line 35443
  return;
 }
 $11 = HEAP32[$2 >> 2] | 0; //@line 35446
 $13 = HEAP16[$4 >> 1] | 0; //@line 35448
 HEAP16[$4 >> 1] = $13 + 1 << 16 >> 16; //@line 35450
 HEAP8[($13 & 65535) + ($6 + 381) >> 0] = $11; //@line 35453
 $19 = HEAP16[$4 >> 1] | 0; //@line 35456
 HEAP16[$4 >> 1] = $19 + 1 << 16 >> 16; //@line 35458
 HEAP8[($19 & 65535) + ($6 + 381) >> 0] = $11 >>> 8; //@line 35461
 $25 = HEAP16[$4 >> 1] | 0; //@line 35464
 HEAP16[$4 >> 1] = $25 + 1 << 16 >> 16; //@line 35466
 HEAP8[($25 & 65535) + ($6 + 381) >> 0] = $11 >>> 16; //@line 35469
 $31 = HEAP16[$4 >> 1] | 0; //@line 35472
 HEAP16[$4 >> 1] = $31 + 1 << 16 >> 16; //@line 35474
 HEAP8[($31 & 65535) + ($6 + 381) >> 0] = $11 >>> 24; //@line 35477
 $$0 = 0; //@line 35478
 $35 = ___async_retval; //@line 35479
 HEAP32[$35 >> 2] = $$0; //@line 35480
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 32212
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32216
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32218
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32220
 $9 = $4 + 12 | 0; //@line 32222
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 32223
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 32224
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 9) | 0; //@line 32225
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 200; //@line 32228
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 32229
  HEAP32[$11 >> 2] = $9; //@line 32230
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 32231
  HEAP32[$12 >> 2] = $8; //@line 32232
  sp = STACKTOP; //@line 32233
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 32237
 ___async_unwind = 0; //@line 32238
 HEAP32[$ReallocAsyncCtx9 >> 2] = 200; //@line 32239
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 32240
 HEAP32[$11 >> 2] = $9; //@line 32241
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 32242
 HEAP32[$12 >> 2] = $8; //@line 32243
 sp = STACKTOP; //@line 32244
 return;
}
function __ZN12LoRaWANStack17drop_channel_listEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 9415
 STACKTOP = STACKTOP + 16 | 0; //@line 9416
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9416
 if (!(HEAP32[$0 + 1876 >> 2] | 0)) {
  _printf(11863, sp) | 0; //@line 9423
  _printf(12660, sp + 8 | 0) | 0; //@line 9424
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9425
  _putchar(10) | 0; //@line 9426
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 309; //@line 9429
   sp = STACKTOP; //@line 9430
   STACKTOP = sp; //@line 9431
   return 0; //@line 9431
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9433
  $$0 = -1012; //@line 9434
  STACKTOP = sp; //@line 9435
  return $$0 | 0; //@line 9435
 } else {
  $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9438
  $5 = __ZN7LoRaMac19remove_channel_planEv($0 + 4 | 0) | 0; //@line 9439
  if (___async) {
   HEAP32[$AsyncCtx5 >> 2] = 310; //@line 9442
   sp = STACKTOP; //@line 9443
   STACKTOP = sp; //@line 9444
   return 0; //@line 9444
  }
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 9446
  $$0 = $5; //@line 9447
  STACKTOP = sp; //@line 9448
  return $$0 | 0; //@line 9448
 }
 return 0; //@line 9450
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 24845
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24849
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24851
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24853
 $9 = $4 + 12 | 0; //@line 24855
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 24856
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 24857
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 10) | 0; //@line 24858
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 215; //@line 24861
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 24862
  HEAP32[$11 >> 2] = $9; //@line 24863
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 24864
  HEAP32[$12 >> 2] = $8; //@line 24865
  sp = STACKTOP; //@line 24866
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 24870
 ___async_unwind = 0; //@line 24871
 HEAP32[$ReallocAsyncCtx9 >> 2] = 215; //@line 24872
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 24873
 HEAP32[$11 >> 2] = $9; //@line 24874
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 24875
 HEAP32[$12 >> 2] = $8; //@line 24876
 sp = STACKTOP; //@line 24877
 return;
}
function _mbedtls_cipher_setup($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 2441
 if (($0 | 0) == 0 | ($1 | 0) == 0) {
  $$0 = -24832; //@line 2446
  return $$0 | 0; //@line 2447
 }
 dest = $0; //@line 2449
 stop = dest + 68 | 0; //@line 2449
 do {
  HEAP32[dest >> 2] = 0; //@line 2449
  dest = dest + 4 | 0; //@line 2449
 } while ((dest | 0) < (stop | 0));
 $7 = HEAP32[(HEAP32[$1 + 28 >> 2] | 0) + 20 >> 2] | 0; //@line 2453
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2454
 $8 = FUNCTION_TABLE_i[$7 & 7]() | 0; //@line 2455
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 659; //@line 2458
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2460
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 2462
  sp = STACKTOP; //@line 2463
  return 0; //@line 2464
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2466
 HEAP32[$0 + 60 >> 2] = $8; //@line 2468
 if (!$8) {
  $$0 = -24960; //@line 2471
  return $$0 | 0; //@line 2472
 }
 HEAP32[$0 >> 2] = $1; //@line 2474
 if ((HEAP32[$1 + 4 >> 2] | 0) != 2) {
  $$0 = 0; //@line 2479
  return $$0 | 0; //@line 2480
 }
 HEAP32[$0 + 12 >> 2] = 4; //@line 2483
 HEAP32[$0 + 16 >> 2] = 14; //@line 2485
 $$0 = 0; //@line 2486
 return $$0 | 0; //@line 2487
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_13($0) {
 $0 = $0 | 0;
 var $$pre$i$i66 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 18323
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18329
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18331
 $$pre$i$i66 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 18332
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i66; //@line 18334
 if (!$$pre$i$i66) {
  HEAP32[___async_retval >> 2] = $8; //@line 18338
  return;
 }
 $12 = HEAP32[$$pre$i$i66 + 8 >> 2] | 0; //@line 18342
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 18343
 FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 18344
 if (___async) {
  HEAP32[$ReallocAsyncCtx15 >> 2] = 570; //@line 18347
  $13 = $ReallocAsyncCtx15 + 4 | 0; //@line 18348
  HEAP32[$13 >> 2] = $6; //@line 18349
  $14 = $ReallocAsyncCtx15 + 8 | 0; //@line 18350
  HEAP32[$14 >> 2] = $8; //@line 18351
  sp = STACKTOP; //@line 18352
  return;
 }
 ___async_unwind = 0; //@line 18355
 HEAP32[$ReallocAsyncCtx15 >> 2] = 570; //@line 18356
 $13 = $ReallocAsyncCtx15 + 4 | 0; //@line 18357
 HEAP32[$13 >> 2] = $6; //@line 18358
 $14 = $ReallocAsyncCtx15 + 8 | 0; //@line 18359
 HEAP32[$14 >> 2] = $8; //@line 18360
 sp = STACKTOP; //@line 18361
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_133($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 26829
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26831
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26833
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26835
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26837
 $9 = $2 + 944 | 0; //@line 26838
 HEAP8[$9 >> 0] = HEAP8[$9 >> 0] | 32; //@line 26841
 $12 = HEAP32[$4 >> 2] | 0; //@line 26842
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 26844
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($12, $2 + 996 | 0, 1); //@line 26845
 if (___async) {
  HEAP32[$ReallocAsyncCtx17 >> 2] = 395; //@line 26848
  $14 = $ReallocAsyncCtx17 + 4 | 0; //@line 26849
  HEAP32[$14 >> 2] = $6; //@line 26850
  $15 = $ReallocAsyncCtx17 + 8 | 0; //@line 26851
  HEAP32[$15 >> 2] = $8; //@line 26852
  sp = STACKTOP; //@line 26853
  return;
 }
 ___async_unwind = 0; //@line 26856
 HEAP32[$ReallocAsyncCtx17 >> 2] = 395; //@line 26857
 $14 = $ReallocAsyncCtx17 + 4 | 0; //@line 26858
 HEAP32[$14 >> 2] = $6; //@line 26859
 $15 = $ReallocAsyncCtx17 + 8 | 0; //@line 26860
 HEAP32[$15 >> 2] = $8; //@line 26861
 sp = STACKTOP; //@line 26862
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_213($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx24 = 0, sp = 0;
 sp = STACKTOP; //@line 33913
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33917
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33919
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33921
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33923
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33925
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 33927
 $15 = $4 + 12 | 0; //@line 33929
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 33930
 $ReallocAsyncCtx24 = _emscripten_realloc_async_context(24) | 0; //@line 33931
 $16 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 6) | 0; //@line 33932
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 33936
  ___async_unwind = 0; //@line 33937
 }
 HEAP32[$ReallocAsyncCtx24 >> 2] = 254; //@line 33939
 HEAP32[$ReallocAsyncCtx24 + 4 >> 2] = $15; //@line 33941
 HEAP32[$ReallocAsyncCtx24 + 8 >> 2] = $8; //@line 33943
 HEAP32[$ReallocAsyncCtx24 + 12 >> 2] = $10; //@line 33945
 HEAP32[$ReallocAsyncCtx24 + 16 >> 2] = $12; //@line 33947
 HEAP32[$ReallocAsyncCtx24 + 20 >> 2] = $14; //@line 33949
 sp = STACKTOP; //@line 33950
 return;
}
function __ZN4mbed11InterruptInD0Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 3704
 HEAP32[$0 >> 2] = 668; //@line 3705
 _gpio_irq_free($0 + 28 | 0); //@line 3707
 $3 = HEAP32[$0 + 68 >> 2] | 0; //@line 3709
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 3715
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3716
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 56 | 0); //@line 3717
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 151; //@line 3720
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3722
    sp = STACKTOP; //@line 3723
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3726
    break;
   }
  }
 } while (0);
 $10 = HEAP32[$0 + 52 >> 2] | 0; //@line 3732
 if (!$10) {
  __ZdlPv($0); //@line 3735
  return;
 }
 $14 = HEAP32[$10 + 8 >> 2] | 0; //@line 3740
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 3741
 FUNCTION_TABLE_vi[$14 & 1023]($0 + 40 | 0); //@line 3742
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 152; //@line 3745
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 3747
  sp = STACKTOP; //@line 3748
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3751
 __ZdlPv($0); //@line 3752
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_51($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 21399
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21401
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21403
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21405
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21407
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21409
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21411
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21413
 HEAP32[$2 + 1876 >> 2] = 5; //@line 21415
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(28) | 0; //@line 21416
 $16 = __ZN12LoRaWANStack18lora_state_machineEv($2) | 0; //@line 21417
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 21421
  ___async_unwind = 0; //@line 21422
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 292; //@line 21424
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $4; //@line 21426
 HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $6; //@line 21428
 HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $8; //@line 21430
 HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $10; //@line 21432
 HEAP32[$ReallocAsyncCtx10 + 20 >> 2] = $12; //@line 21434
 HEAP32[$ReallocAsyncCtx10 + 24 >> 2] = $14; //@line 21436
 sp = STACKTOP; //@line 21437
 return;
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19801
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19803
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19805
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19807
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19809
 HEAP32[$4 + 12 >> 2] = HEAP32[$2 >> 2]; //@line 19812
 _equeue_event_dtor($4, 356); //@line 19813
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 19814
 $10 = _equeue_post($6, 357, $4) | 0; //@line 19815
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 358; //@line 19818
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 19819
  HEAP32[$11 >> 2] = $2; //@line 19820
  $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 19821
  HEAP32[$12 >> 2] = $8; //@line 19822
  sp = STACKTOP; //@line 19823
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 19827
 ___async_unwind = 0; //@line 19828
 HEAP32[$ReallocAsyncCtx3 >> 2] = 358; //@line 19829
 $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 19830
 HEAP32[$11 >> 2] = $2; //@line 19831
 $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 19832
 HEAP32[$12 >> 2] = $8; //@line 19833
 sp = STACKTOP; //@line 19834
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 5907
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 5909
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5911
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5913
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5915
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5917
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5919
 $13 = HEAP32[$6 >> 2] | 0; //@line 5920
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 40 >> 2] | 0; //@line 5923
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 5924
 $17 = FUNCTION_TABLE_ii[$16 & 15]($13) | 0; //@line 5925
 if (!___async) {
  HEAP8[___async_retval >> 0] = $17; //@line 5929
  ___async_unwind = 0; //@line 5930
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 604; //@line 5932
 HEAP8[$ReallocAsyncCtx2 + 4 >> 0] = $2; //@line 5934
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 5936
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 5938
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 5940
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 5942
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 5944
 sp = STACKTOP; //@line 5945
 return;
}
function __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$pre$phiZ2D = 0, $26 = 0;
 if ($2) {
  HEAP8[$1 + 15 >> 0] = HEAP8[$0 + 12 >> 0] | 0; //@line 25537
  HEAP32[$1 + 748 >> 2] = HEAPU16[$0 + 36 >> 1]; //@line 25542
  HEAP32[$1 + 752 >> 2] = HEAPU16[$0 + 38 >> 1]; //@line 25547
  HEAP32[$1 + 756 >> 2] = HEAPU16[$0 + 40 >> 1]; //@line 25552
  HEAP32[$1 + 760 >> 2] = HEAPU16[$0 + 42 >> 1]; //@line 25557
  HEAP32[$1 + 764 >> 2] = HEAPU16[$0 + 44 >> 1]; //@line 25562
  $26 = $0 + 132 | 0; //@line 25563
  HEAP8[$1 + 781 >> 0] = (HEAPU8[$26 >> 0] | 0) >>> 1 & 1; //@line 25568
  $$pre$phiZ2D = $26; //@line 25569
 } else {
  $$pre$phiZ2D = $0 + 132 | 0; //@line 25572
 }
 HEAP8[$1 + 736 >> 0] = HEAP8[$0 + 23 >> 0] | 0; //@line 25577
 HEAP8[$1 + 737 >> 0] = HEAP8[$0 + 30 >> 0] | 0; //@line 25581
 HEAP8[$1 + 769 >> 0] = HEAP8[$0 + 34 >> 0] | 0; //@line 25585
 HEAP32[$1 + 772 >> 2] = HEAP32[$0 + 68 >> 2]; //@line 25589
 HEAP8[$1 + 776 >> 0] = HEAP8[$0 + 64 >> 0] | 0; //@line 25593
 HEAP8[$1 + 780 >> 0] = HEAP8[$$pre$phiZ2D >> 0] & 1; //@line 25597
 HEAP32[$1 + 784 >> 2] = HEAP32[$0 + 56 >> 2]; //@line 25601
 HEAP32[$1 + 788 >> 2] = HEAP32[$0 + 60 >> 2]; //@line 25605
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb($0) {
 $0 = $0 | 0;
 var $16 = 0, $19 = 0, $2 = 0, $21 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 21617
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21619
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21623
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21625
 HEAP32[$2 + 980 >> 2] = HEAP32[$0 + 8 >> 2]; //@line 21627
 if (!(HEAP8[$2 + 373 >> 0] | 0)) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 0; //@line 21635
  $16 = $2 + 380 | 0; //@line 21636
  HEAP8[$16 >> 0] = (HEAP8[$16 >> 0] | 0) + 1 << 24 >> 24; //@line 21639
 }
 $19 = HEAP32[$6 >> 2] | 0; //@line 21641
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 21643
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($19, $2 + 996 | 0, 1); //@line 21644
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 354; //@line 21647
  $21 = $ReallocAsyncCtx4 + 4 | 0; //@line 21648
  HEAP32[$21 >> 2] = $8; //@line 21649
  sp = STACKTOP; //@line 21650
  return;
 }
 ___async_unwind = 0; //@line 21653
 HEAP32[$ReallocAsyncCtx4 >> 2] = 354; //@line 21654
 $21 = $ReallocAsyncCtx4 + 4 | 0; //@line 21655
 HEAP32[$21 >> 2] = $8; //@line 21656
 sp = STACKTOP; //@line 21657
 return;
}
function _handle_lora_downlink($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $AsyncCtx = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 3360
 STACKTOP = STACKTOP + 16 | 0; //@line 3361
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 3361
 $vararg_buffer1 = sp + 8 | 0; //@line 3362
 $3 = $0; //@line 3364
 $4 = $1; //@line 3365
 _printf(10880, sp) | 0; //@line 3366
 HEAP32[$vararg_buffer1 >> 2] = $2; //@line 3367
 _printf(11587, $vararg_buffer1) | 0; //@line 3368
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 3369
 _putchar(10) | 0; //@line 3370
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 144; //@line 3373
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 3375
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 3377
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 3379
  sp = STACKTOP; //@line 3380
  STACKTOP = sp; //@line 3381
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3383
  _memcpy($3 + 788 | 0, $4 | 0, $2 | 0) | 0; //@line 3385
  HEAP8[$3 + 782 >> 0] = $2; //@line 3388
  HEAP8[$3 + 781 >> 0] = -35; //@line 3390
  HEAP8[$3 + 780 >> 0] = -5; //@line 3392
  HEAP8[$3 + 783 >> 0] = 1; //@line 3394
  STACKTOP = sp; //@line 3395
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_19($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18759
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18765
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18767
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18769
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18771
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 1) {
  return;
 }
 $14 = (HEAP32[$0 + 8 >> 2] | 0) + 24 | 0; //@line 18776
 $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 18778
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($14, $6, $8, $10); //@line 18779
 if (!___async) {
  ___async_unwind = 0; //@line 18782
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 769; //@line 18784
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $6 + 54; //@line 18786
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $14; //@line 18788
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $12; //@line 18790
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $6; //@line 18792
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $8; //@line 18794
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $10; //@line 18796
 sp = STACKTOP; //@line 18797
 return;
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_459($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 32255
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32257
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32259
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32263
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32267
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32269
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32271
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 32273
 HEAP8[$2 + 688 >> 0] = 2; //@line 32275
 _printf(10880, $4) | 0; //@line 32276
 HEAP32[$8 >> 2] = 3; //@line 32277
 _printf(10946, $8) | 0; //@line 32278
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 32279
 _putchar(10) | 0; //@line 32280
 if (!___async) {
  ___async_unwind = 0; //@line 32283
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 106; //@line 32285
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 32287
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $12; //@line 32289
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $14; //@line 32291
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $16; //@line 32293
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $18; //@line 32295
 sp = STACKTOP; //@line 32296
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_300($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 4400
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4404
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4406
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4408
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[___async_retval >> 2]; //@line 4411
 $10 = HEAP32[$4 >> 2] | 0; //@line 4412
 $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 76 >> 2] | 0; //@line 4415
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 4416
 FUNCTION_TABLE_vi[$13 & 1023]($10); //@line 4417
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 618; //@line 4420
  $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 4421
  HEAP32[$14 >> 2] = $6; //@line 4422
  $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 4423
  HEAP32[$15 >> 2] = $8; //@line 4424
  sp = STACKTOP; //@line 4425
  return;
 }
 ___async_unwind = 0; //@line 4428
 HEAP32[$ReallocAsyncCtx7 >> 2] = 618; //@line 4429
 $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 4430
 HEAP32[$14 >> 2] = $6; //@line 4431
 $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 4432
 HEAP32[$15 >> 2] = $8; //@line 4433
 sp = STACKTOP; //@line 4434
 return;
}
function __ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$1 = 0, $12 = 0, $22 = 0, $3 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 24141
 $3 = HEAP32[$0 + 4 >> 2] | 0; //@line 24143
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 64 >> 2] | 0; //@line 24146
 $8 = HEAP32[$1 + 4 >> 2] | 0; //@line 24148
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 24149
 $9 = FUNCTION_TABLE_iii[$6 & 31]($3, $8) | 0; //@line 24150
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 619; //@line 24153
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 24155
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 24157
  sp = STACKTOP; //@line 24158
  return 0; //@line 24159
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 24161
  $$ = $9 ? 7 : 6; //@line 24162
  $12 = HEAP8[$1 >> 0] | 0; //@line 24163
  $$1 = ($12 << 24 >> 24 < (HEAP8[$0 + 28 >> 0] | 0) ? 1 : $12 << 24 >> 24 > (HEAP8[$0 + 29 >> 0] | 0)) ? $$ & 5 : $$; //@line 24172
  $22 = HEAP8[$1 + 1 >> 0] | 0; //@line 24174
  return (($22 << 24 >> 24 < (HEAP8[$0 + 32 >> 0] | 0) ? 1 : $22 << 24 >> 24 > (HEAP8[$0 + 33 >> 0] | 0)) ? $$1 & 3 : $$1) | 0; //@line 24184
 }
 return 0; //@line 24186
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_298($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 4303
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4305
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4309
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4311
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4313
 $11 = HEAP32[$2 >> 2] | 0; //@line 4314
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 44 >> 2] | 0; //@line 4317
 $15 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 4318
 $17 = HEAP16[$15 >> 1] & 255; //@line 4320
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 4321
 FUNCTION_TABLE_viii[$14 & 7]($11, 1, $17); //@line 4322
 if (!___async) {
  ___async_unwind = 0; //@line 4325
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 616; //@line 4327
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 4329
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $15; //@line 4331
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = 1; //@line 4333
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $6; //@line 4335
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $8; //@line 4337
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $10; //@line 4339
 sp = STACKTOP; //@line 4340
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_297($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 4259
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4261
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4265
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4267
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4269
 $11 = HEAP32[$2 >> 2] | 0; //@line 4270
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 44 >> 2] | 0; //@line 4273
 $15 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 4274
 $17 = HEAP16[$15 >> 1] & 255; //@line 4276
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 4277
 FUNCTION_TABLE_viii[$14 & 7]($11, 0, $17); //@line 4278
 if (!___async) {
  ___async_unwind = 0; //@line 4281
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 616; //@line 4283
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 4285
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $15; //@line 4287
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = 0; //@line 4289
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $6; //@line 4291
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $8; //@line 4293
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $10; //@line 4295
 sp = STACKTOP; //@line 4296
 return;
}
function __ZN4mbed5TimerC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3958
 HEAP32[$0 >> 2] = 0; //@line 3959
 $1 = $0 + 8 | 0; //@line 3960
 $2 = $0 + 16 | 0; //@line 3961
 HEAP32[$1 >> 2] = 0; //@line 3962
 HEAP32[$1 + 4 >> 2] = 0; //@line 3962
 HEAP32[$1 + 8 >> 2] = 0; //@line 3962
 HEAP32[$1 + 12 >> 2] = 0; //@line 3962
 $4 = $0 + 24 | 0; //@line 3964
 HEAP32[$4 >> 2] = _get_us_ticker_data() | 0; //@line 3965
 HEAP8[$0 + 28 >> 0] = 1; //@line 3967
 $6 = HEAP32[$4 >> 2] | 0; //@line 3968
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 3969
 $7 = _ticker_read_us($6) | 0; //@line 3970
 $8 = tempRet0; //@line 3971
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 161; //@line 3974
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 3976
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 3978
  sp = STACKTOP; //@line 3979
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3982
  $11 = $1; //@line 3983
  HEAP32[$11 >> 2] = $7; //@line 3985
  HEAP32[$11 + 4 >> 2] = $8; //@line 3988
  $15 = $2; //@line 3989
  HEAP32[$15 >> 2] = 0; //@line 3991
  HEAP32[$15 + 4 >> 2] = 0; //@line 3994
  return;
 }
}
function __GLOBAL__sub_I_main_cpp() {
 var $AsyncCtx = 0, $AsyncCtx2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 6936
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6937
 __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_(18232, 9, 8, 7, 6, 23, 4, 5, 66, 67, 0, 1, -1, -1, -1, -1, 62, -1, -1); //@line 6938
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 730; //@line 6941
  sp = STACKTOP; //@line 6942
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6945
 __ZN5Sht31C2E7PinNameS0_(23184, 10, 11); //@line 6946
 __ZN4mbed11InterruptInC2E7PinName(22208, 1337); //@line 6947
 __ZN6events10EventQueueC2EjPh(22280, 1664, 0); //@line 6948
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6949
 __ZN16LoRaWANInterfaceC2ER9LoRaRadio(22480, 18232); //@line 6950
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 731; //@line 6953
  sp = STACKTOP; //@line 6954
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6957
  dest = 22488; //@line 6958
  stop = dest + 48 | 0; //@line 6958
  do {
   HEAP32[dest >> 2] = 0; //@line 6958
   dest = dest + 4 | 0; //@line 6958
  } while ((dest | 0) < (stop | 0));
  return;
 }
}
function __ZN7LoRaPHY11add_channelEP16channel_params_th__async_cb($0) {
 $0 = $0 | 0;
 var $$024 = 0, $10 = 0, $12 = 0, $2 = 0, $22 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $not$ = 0;
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 33327
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33329
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33331
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33333
 $not$ = HEAP8[___async_retval >> 0] & 1 ^ 1; //@line 33337
 if ($2 | $not$) {
  $$024 = $2 ? $2 & $not$ ? -1006 : -1005 : -1004; //@line 33343
  $27 = ___async_retval; //@line 33344
  HEAP32[$27 >> 2] = $$024; //@line 33345
  return;
 }
 $10 = $4 + 112 | 0; //@line 33348
 $12 = (HEAP32[$10 >> 2] | 0) + ($6 * 12 | 0) | 0; //@line 33350
 HEAP32[$12 >> 2] = HEAP32[$8 >> 2]; //@line 33351
 HEAP32[$12 + 4 >> 2] = HEAP32[$8 + 4 >> 2]; //@line 33351
 HEAP32[$12 + 8 >> 2] = HEAP32[$8 + 8 >> 2]; //@line 33351
 HEAP8[(HEAP32[$10 >> 2] | 0) + ($6 * 12 | 0) + 9 >> 0] = HEAP8[$8 + 9 >> 0] | 0; //@line 33356
 $22 = (HEAP32[$4 + 120 >> 2] | 0) + ($6 >>> 4 << 1) | 0; //@line 33362
 HEAP16[$22 >> 1] = 1 << ($6 & 15) | (HEAPU16[$22 >> 1] | 0); //@line 33367
 $$024 = 0; //@line 33368
 $27 = ___async_retval; //@line 33369
 HEAP32[$27 >> 2] = $$024; //@line 33370
 return;
}
function __ZL25default_terminate_handlerv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 34884
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34886
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34888
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34890
 $8 = HEAP32[$0 + 20 >> 2] | 0; //@line 34892
 $10 = HEAP32[$0 + 24 >> 2] | 0; //@line 34894
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[$4 >> 2] = 17779; //@line 34899
  HEAP32[$4 + 4 >> 2] = $6; //@line 34901
  _abort_message(17688, $4); //@line 34902
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 34905
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0; //@line 34908
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 34909
 $16 = FUNCTION_TABLE_ii[$15 & 15]($12) | 0; //@line 34910
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 34914
  ___async_unwind = 0; //@line 34915
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 748; //@line 34917
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 34919
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 34921
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 34923
 sp = STACKTOP; //@line 34924
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_474($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 33807
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33815
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33817
 $11 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 33818
 $12 = (HEAP32[$0 + 8 >> 2] | 0) + 1016 | 0; //@line 33819
 $13 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 33820
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 33821
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($11, $12, $13); //@line 33822
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 481; //@line 33825
  $14 = $ReallocAsyncCtx9 + 4 | 0; //@line 33826
  HEAP32[$14 >> 2] = $8; //@line 33827
  $15 = $ReallocAsyncCtx9 + 8 | 0; //@line 33828
  HEAP32[$15 >> 2] = $10; //@line 33829
  sp = STACKTOP; //@line 33830
  return;
 }
 ___async_unwind = 0; //@line 33833
 HEAP32[$ReallocAsyncCtx9 >> 2] = 481; //@line 33834
 $14 = $ReallocAsyncCtx9 + 4 | 0; //@line 33835
 HEAP32[$14 >> 2] = $8; //@line 33836
 $15 = $ReallocAsyncCtx9 + 8 | 0; //@line 33837
 HEAP32[$15 >> 2] = $10; //@line 33838
 sp = STACKTOP; //@line 33839
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_180($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 32161
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32163
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32165
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32167
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32169
 HEAP32[$2 >> 2] = 2; //@line 32170
 $9 = $2 + 4 | 0; //@line 32171
 HEAP8[$9 >> 0] = 1; //@line 32172
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 32173
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($4, $2) | 0; //@line 32174
 if (!___async) {
  ___async_unwind = 0; //@line 32177
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 298; //@line 32179
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 32181
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $9; //@line 32183
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $4; //@line 32185
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $2; //@line 32187
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $6; //@line 32189
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $8; //@line 32191
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $2; //@line 32193
 sp = STACKTOP; //@line 32194
 return;
}
function _mbedtls_gcm_setkey__async_cb_447($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 31416
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31418
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31420
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31422
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31424
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31426
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31428
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31430
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 31434
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 31437
 $15 = _mbedtls_cipher_setkey($2, $4, $6, 1) | 0; //@line 31438
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 31442
  ___async_unwind = 0; //@line 31443
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 678; //@line 31445
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 31447
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 31449
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 31451
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $12; //@line 31453
 sp = STACKTOP; //@line 31454
 return;
}
function __ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 4898
 STACKTOP = STACKTOP + 16 | 0; //@line 4899
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4899
 $$byval_copy = sp; //@line 4900
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4902
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4904
 $6 = HEAP32[$2 + 1328 >> 2] | 0; //@line 4906
 HEAP32[$4 >> 2] = 347; //@line 4907
 HEAP32[$4 + 4 >> 2] = 0; //@line 4909
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 4910
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 4911
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 4911
 $7 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($6, $2, $$byval_copy) | 0; //@line 4912
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 504; //@line 4915
  sp = STACKTOP; //@line 4916
  STACKTOP = sp; //@line 4917
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 4920
 ___async_unwind = 0; //@line 4921
 HEAP32[$ReallocAsyncCtx2 >> 2] = 504; //@line 4922
 sp = STACKTOP; //@line 4923
 STACKTOP = sp; //@line 4924
 return;
}
function __ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 3621
 STACKTOP = STACKTOP + 16 | 0; //@line 3622
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 3622
 $$byval_copy = sp; //@line 3623
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3625
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3627
 $6 = HEAP32[$2 + 1328 >> 2] | 0; //@line 3629
 HEAP32[$4 >> 2] = 494; //@line 3630
 HEAP32[$4 + 4 >> 2] = 0; //@line 3632
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 3633
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 3634
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 3634
 $7 = __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE($6, $2, $$byval_copy) | 0; //@line 3635
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 495; //@line 3638
  sp = STACKTOP; //@line 3639
  STACKTOP = sp; //@line 3640
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 3643
 ___async_unwind = 0; //@line 3644
 HEAP32[$ReallocAsyncCtx2 >> 2] = 495; //@line 3645
 sp = STACKTOP; //@line 3646
 STACKTOP = sp; //@line 3647
 return;
}
function ___strerror_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $7 = 0, label = 0, $$113$looptemp = 0;
 $$016 = 0; //@line 13925
 while (1) {
  if ((HEAPU8[15751 + $$016 >> 0] | 0) == ($0 | 0)) {
   label = 2; //@line 13932
   break;
  }
  $7 = $$016 + 1 | 0; //@line 13935
  if (($7 | 0) == 87) {
   $$01214 = 15839; //@line 13938
   $$115 = 87; //@line 13938
   label = 5; //@line 13939
   break;
  } else {
   $$016 = $7; //@line 13942
  }
 }
 if ((label | 0) == 2) {
  if (!$$016) {
   $$012$lcssa = 15839; //@line 13948
  } else {
   $$01214 = 15839; //@line 13950
   $$115 = $$016; //@line 13950
   label = 5; //@line 13951
  }
 }
 if ((label | 0) == 5) {
  while (1) {
   label = 0; //@line 13956
   $$113 = $$01214; //@line 13957
   do {
    $$113$looptemp = $$113;
    $$113 = $$113 + 1 | 0; //@line 13961
   } while ((HEAP8[$$113$looptemp >> 0] | 0) != 0);
   $$115 = $$115 + -1 | 0; //@line 13968
   if (!$$115) {
    $$012$lcssa = $$113; //@line 13971
    break;
   } else {
    $$01214 = $$113; //@line 13974
    label = 5; //@line 13975
   }
  }
 }
 return ___lctrans($$012$lcssa, HEAP32[$1 + 20 >> 2] | 0) | 0; //@line 13982
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $19 = 0;
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 14574
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 14583
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 14588
      HEAP32[$13 >> 2] = $2; //@line 14589
      $19 = $1 + 40 | 0; //@line 14590
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1; //@line 14593
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 14603
       }
      }
      HEAP32[$1 + 44 >> 2] = 4; //@line 14607
      break;
     }
    }
    if (($3 | 0) == 1) {
     HEAP32[$1 + 32 >> 2] = 1; //@line 14614
    }
   }
  }
 } while (0);
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_324($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 5812
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5814
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5816
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5820
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5822
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5824
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 5826
 $15 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 5827
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(28) | 0; //@line 5828
 __ZN7LoRaPHY18put_radio_to_sleepEv($15); //@line 5829
 if (!___async) {
  ___async_unwind = 0; //@line 5832
 }
 HEAP32[$ReallocAsyncCtx13 >> 2] = 508; //@line 5834
 HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $2; //@line 5836
 HEAP32[$ReallocAsyncCtx13 + 8 >> 2] = $4; //@line 5838
 HEAP32[$ReallocAsyncCtx13 + 12 >> 2] = $8; //@line 5840
 HEAP32[$ReallocAsyncCtx13 + 16 >> 2] = $10; //@line 5842
 HEAP32[$ReallocAsyncCtx13 + 20 >> 2] = $12; //@line 5844
 HEAP32[$ReallocAsyncCtx13 + 24 >> 2] = $14; //@line 5846
 sp = STACKTOP; //@line 5847
 return;
}
function _mbedtls_gcm_setkey__async_cb_448($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 31461
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31463
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31465
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31467
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31469
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31471
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31473
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31475
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 31476
 $15 = _mbedtls_cipher_setup($2, $4) | 0; //@line 31477
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 31481
  ___async_unwind = 0; //@line 31482
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 677; //@line 31484
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 31486
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $6; //@line 31488
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $8; //@line 31490
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $10; //@line 31492
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $12; //@line 31494
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $14; //@line 31496
 sp = STACKTOP; //@line 31497
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $12 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2261
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2263
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2265
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2269
 if (!(HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0)) {
  $$037$off038 = 4; //@line 2273
  label = 4; //@line 2274
 } else {
  if (!(HEAP8[HEAP32[$0 + 20 >> 2] >> 0] | 0)) {
   $$037$off038 = 3; //@line 2279
   label = 4; //@line 2280
  } else {
   $$037$off039 = 3; //@line 2282
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$6 >> 2] = $4; //@line 2286
  $17 = $8 + 40 | 0; //@line 2287
  HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1; //@line 2290
  if ((HEAP32[$8 + 36 >> 2] | 0) == 1) {
   if ((HEAP32[$8 + 24 >> 2] | 0) == 2) {
    HEAP8[$8 + 54 >> 0] = 1; //@line 2300
    $$037$off039 = $$037$off038; //@line 2301
   } else {
    $$037$off039 = $$037$off038; //@line 2303
   }
  } else {
   $$037$off039 = $$037$off038; //@line 2306
  }
 }
 HEAP32[$12 >> 2] = $$037$off039; //@line 2309
 return;
}
function __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 $5 = +$5;
 $6 = $6 | 0;
 var $13 = 0, $16 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 22744
 STACKTOP = STACKTOP + 16 | 0; //@line 22745
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 22745
 $7 = sp; //@line 22746
 HEAP8[$7 >> 0] = $1; //@line 22747
 HEAP8[$7 + 1 >> 0] = $2; //@line 22749
 HEAP8[$7 + 2 >> 0] = $3; //@line 22751
 HEAPF32[$7 + 4 >> 2] = $4; //@line 22753
 HEAPF32[$7 + 8 >> 2] = $5; //@line 22755
 HEAP16[$7 + 12 >> 1] = $6; //@line 22757
 $13 = HEAP32[$0 >> 2] | 0; //@line 22758
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 68 >> 2] | 0; //@line 22761
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 22762
 FUNCTION_TABLE_viii[$16 & 7]($13, $7, 0); //@line 22763
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 598; //@line 22766
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 22768
  sp = STACKTOP; //@line 22769
  STACKTOP = sp; //@line 22770
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 22772
  STACKTOP = sp; //@line 22773
  return;
 }
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 10876
 $1 = $0 + 12 | 0; //@line 10877
 $2 = HEAP32[$1 >> 2] | 0; //@line 10878
 do {
  if (!$2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10882
   _mbed_assert_internal(14997, 15002, 528); //@line 10883
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 361; //@line 10886
    HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 10888
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 10890
    sp = STACKTOP; //@line 10891
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10894
    $7 = HEAP32[$1 >> 2] | 0; //@line 10896
    break;
   }
  } else {
   $7 = $2; //@line 10900
  }
 } while (0);
 $6 = HEAP32[$7 >> 2] | 0; //@line 10903
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10904
 FUNCTION_TABLE_vi[$6 & 1023]($0); //@line 10905
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 362; //@line 10908
  sp = STACKTOP; //@line 10909
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10912
  return;
 }
}
function __ZN4mbed11InterruptInD2Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 3653
 HEAP32[$0 >> 2] = 668; //@line 3654
 _gpio_irq_free($0 + 28 | 0); //@line 3656
 $3 = HEAP32[$0 + 68 >> 2] | 0; //@line 3658
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 3664
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3665
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 56 | 0); //@line 3666
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 149; //@line 3669
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3671
    sp = STACKTOP; //@line 3672
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3675
    break;
   }
  }
 } while (0);
 $10 = HEAP32[$0 + 52 >> 2] | 0; //@line 3681
 if (!$10) {
  return;
 }
 $14 = HEAP32[$10 + 8 >> 2] | 0; //@line 3688
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3689
 FUNCTION_TABLE_vi[$14 & 1023]($0 + 40 | 0); //@line 3690
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 150; //@line 3693
  sp = STACKTOP; //@line 3694
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3697
 return;
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_12($0) {
 $0 = $0 | 0;
 var $$pre122 = 0, $10 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 18281
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18283
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18285
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18287
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18289
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18291
 $$pre122 = HEAP32[$2 >> 2] | 0; //@line 18292
 if (!$$pre122) {
  HEAP32[$4 >> 2] = 0; //@line 18295
  HEAP32[___async_retval >> 2] = $10; //@line 18297
  return;
 }
 $13 = HEAP32[$$pre122 + 4 >> 2] | 0; //@line 18301
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(20) | 0; //@line 18302
 FUNCTION_TABLE_vii[$13 & 31]($6, $8); //@line 18303
 if (!___async) {
  ___async_unwind = 0; //@line 18306
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 569; //@line 18308
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $2; //@line 18310
 HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $4; //@line 18312
 HEAP32[$ReallocAsyncCtx14 + 12 >> 2] = $8; //@line 18314
 HEAP32[$ReallocAsyncCtx14 + 16 >> 2] = $10; //@line 18316
 sp = STACKTOP; //@line 18317
 return;
}
function __ZN4mbed7Timeout7handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 3913
 $1 = $0 + 40 | 0; //@line 3914
 $2 = $0 + 52 | 0; //@line 3915
 $3 = HEAP32[$2 >> 2] | 0; //@line 3916
 do {
  if (!$3) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 3920
   _mbed_assert_internal(14997, 15002, 528); //@line 3921
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 159; //@line 3924
    HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 3926
    HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 3928
    sp = STACKTOP; //@line 3929
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3932
    $8 = HEAP32[$2 >> 2] | 0; //@line 3934
    break;
   }
  } else {
   $8 = $3; //@line 3938
  }
 } while (0);
 $7 = HEAP32[$8 >> 2] | 0; //@line 3941
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3942
 FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 3943
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 160; //@line 3946
  sp = STACKTOP; //@line 3947
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3950
  return;
 }
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_211($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx25 = 0, sp = 0;
 sp = STACKTOP; //@line 33835
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33839
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33841
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33843
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33845
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33847
 $13 = $4 + 12 | 0; //@line 33849
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 33850
 $ReallocAsyncCtx25 = _emscripten_realloc_async_context(20) | 0; //@line 33851
 $14 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 5) | 0; //@line 33852
 if (!___async) {
  HEAP32[___async_retval >> 2] = $14; //@line 33856
  ___async_unwind = 0; //@line 33857
 }
 HEAP32[$ReallocAsyncCtx25 >> 2] = 249; //@line 33859
 HEAP32[$ReallocAsyncCtx25 + 4 >> 2] = $13; //@line 33861
 HEAP32[$ReallocAsyncCtx25 + 8 >> 2] = $8; //@line 33863
 HEAP32[$ReallocAsyncCtx25 + 12 >> 2] = $10; //@line 33865
 HEAP32[$ReallocAsyncCtx25 + 16 >> 2] = $12; //@line 33867
 sp = STACKTOP; //@line 33868
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_28($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 20061
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20063
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20065
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20071
 _printf(10880, HEAP32[$0 + 12 >> 2] | 0) | 0; //@line 20074
 HEAP32[$10 >> 2] = 3; //@line 20075
 _printf(10975, $10) | 0; //@line 20076
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 20077
 _putchar(10) | 0; //@line 20078
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 138; //@line 20081
  $13 = $ReallocAsyncCtx4 + 4 | 0; //@line 20082
  HEAP32[$13 >> 2] = $4; //@line 20083
  $14 = $ReallocAsyncCtx4 + 8 | 0; //@line 20084
  HEAP32[$14 >> 2] = $2; //@line 20085
  sp = STACKTOP; //@line 20086
  return;
 }
 ___async_unwind = 0; //@line 20089
 HEAP32[$ReallocAsyncCtx4 >> 2] = 138; //@line 20090
 $13 = $ReallocAsyncCtx4 + 4 | 0; //@line 20091
 HEAP32[$13 >> 2] = $4; //@line 20092
 $14 = $ReallocAsyncCtx4 + 8 | 0; //@line 20093
 HEAP32[$14 >> 2] = $2; //@line 20094
 sp = STACKTOP; //@line 20095
 return;
}
function __ZN4mbed6TickerD0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6765
 HEAP32[$0 >> 2] = 10108; //@line 6766
 $1 = $0 + 40 | 0; //@line 6767
 _emscripten_asm_const_ii(11, $1 | 0) | 0; //@line 6768
 $4 = HEAP32[$0 + 52 >> 2] | 0; //@line 6770
 do {
  if ($4 | 0) {
   $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 6775
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6776
   FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 6777
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 724; //@line 6780
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 6782
    sp = STACKTOP; //@line 6783
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6786
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6791
 __ZN4mbed10TimerEventD2Ev($0); //@line 6792
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 725; //@line 6795
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 6797
  sp = STACKTOP; //@line 6798
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6801
  __ZdlPv($0); //@line 6802
  return;
 }
}
function __ZN18LoRaMacChannelPlan11remove_planEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22854
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22856
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22858
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22860
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22862
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22864
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[___async_retval >> 2] = -1003; //@line 22870
  return;
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 22873
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 22874
 __ZN7LoRaPHY18put_radio_to_sleepEv($12); //@line 22875
 if (!___async) {
  ___async_unwind = 0; //@line 22878
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 573; //@line 22880
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 22882
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 22884
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 22886
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 22888
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 22890
 sp = STACKTOP; //@line 22891
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_212($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx30 = 0, sp = 0;
 sp = STACKTOP; //@line 33874
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33878
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33880
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[$4 >> 2] = 6; //@line 33883
  HEAP32[___async_retval >> 2] = -1014; //@line 33885
  return;
 }
 $ReallocAsyncCtx30 = _emscripten_realloc_async_context(12) | 0; //@line 33888
 _mbed_assert_internal(12827, 11911, 1243); //@line 33889
 if (___async) {
  HEAP32[$ReallocAsyncCtx30 >> 2] = 251; //@line 33892
  $8 = $ReallocAsyncCtx30 + 4 | 0; //@line 33893
  HEAP32[$8 >> 2] = $4; //@line 33894
  $9 = $ReallocAsyncCtx30 + 8 | 0; //@line 33895
  HEAP32[$9 >> 2] = $6; //@line 33896
  sp = STACKTOP; //@line 33897
  return;
 }
 ___async_unwind = 0; //@line 33900
 HEAP32[$ReallocAsyncCtx30 >> 2] = 251; //@line 33901
 $8 = $ReallocAsyncCtx30 + 4 | 0; //@line 33902
 HEAP32[$8 >> 2] = $4; //@line 33903
 $9 = $ReallocAsyncCtx30 + 8 | 0; //@line 33904
 HEAP32[$9 >> 2] = $6; //@line 33905
 sp = STACKTOP; //@line 33906
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_375($0) {
 $0 = $0 | 0;
 var $19 = 0, $23 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 18653
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18657
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18659
 HEAP32[$4 + 364 >> 2] = 2; //@line 18661
 if (HEAP8[$4 + 373 >> 0] | 0) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 4; //@line 18669
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 4; //@line 18674
 if ((HEAP32[$6 >> 2] | 0) != 2) {
  $19 = $4 + 944 | 0; //@line 18678
  HEAP8[$19 >> 0] = HEAP8[$19 >> 0] | 32; //@line 18681
 }
 $23 = HEAP32[$4 + 356 >> 2] | 0; //@line 18684
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 18686
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($23, $4 + 996 | 0, 1); //@line 18687
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 433; //@line 18690
  sp = STACKTOP; //@line 18691
  return;
 }
 ___async_unwind = 0; //@line 18694
 HEAP32[$ReallocAsyncCtx3 >> 2] = 433; //@line 18695
 sp = STACKTOP; //@line 18696
 return;
}
function _ticker_read_us__async_cb_347($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16765
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16767
 $3 = $2 + 4 | 0; //@line 16768
 $4 = HEAP32[$3 >> 2] | 0; //@line 16769
 $7 = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0; //@line 16772
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 16773
 $8 = FUNCTION_TABLE_i[$7 & 7]() | 0; //@line 16774
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 699; //@line 16777
  $9 = $ReallocAsyncCtx + 4 | 0; //@line 16778
  HEAP32[$9 >> 2] = $3; //@line 16779
  $10 = $ReallocAsyncCtx + 8 | 0; //@line 16780
  HEAP32[$10 >> 2] = $4; //@line 16781
  sp = STACKTOP; //@line 16782
  return;
 }
 HEAP32[___async_retval >> 2] = $8; //@line 16786
 ___async_unwind = 0; //@line 16787
 HEAP32[$ReallocAsyncCtx >> 2] = 699; //@line 16788
 $9 = $ReallocAsyncCtx + 4 | 0; //@line 16789
 HEAP32[$9 >> 2] = $3; //@line 16790
 $10 = $ReallocAsyncCtx + 8 | 0; //@line 16791
 HEAP32[$10 >> 2] = $4; //@line 16792
 sp = STACKTOP; //@line 16793
 return;
}
function _invoke_ticker($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6832
 $2 = $0 + 12 | 0; //@line 6834
 $3 = HEAP32[$2 >> 2] | 0; //@line 6835
 do {
  if (!$3) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6839
   _mbed_assert_internal(14997, 15002, 528); //@line 6840
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 727; //@line 6843
    HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 6845
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 6847
    sp = STACKTOP; //@line 6848
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6851
    $8 = HEAP32[$2 >> 2] | 0; //@line 6853
    break;
   }
  } else {
   $8 = $3; //@line 6857
  }
 } while (0);
 $7 = HEAP32[$8 >> 2] | 0; //@line 6860
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6862
 FUNCTION_TABLE_vi[$7 & 1023]($0); //@line 6863
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 728; //@line 6866
  sp = STACKTOP; //@line 6867
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6870
  return;
 }
}
function __ZN4mbed7TimeoutD0Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 3869
 HEAP32[$0 >> 2] = 10108; //@line 3870
 __ZN4mbed6Ticker6detachEv($0); //@line 3871
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 3873
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 3879
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3880
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 40 | 0); //@line 3881
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 157; //@line 3884
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3886
    sp = STACKTOP; //@line 3887
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3890
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 3895
 __ZN4mbed10TimerEventD2Ev($0); //@line 3896
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 158; //@line 3899
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 3901
  sp = STACKTOP; //@line 3902
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3905
  __ZdlPv($0); //@line 3906
  return;
 }
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_332($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 6422
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 6426
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6428
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 6429
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 76 >> 2] | 0; //@line 6432
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 6433
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 6434
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 611; //@line 6437
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 6438
  HEAP8[$11 >> 0] = $4; //@line 6439
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 6440
  HEAP32[$12 >> 2] = $6; //@line 6441
  sp = STACKTOP; //@line 6442
  return;
 }
 ___async_unwind = 0; //@line 6445
 HEAP32[$ReallocAsyncCtx9 >> 2] = 611; //@line 6446
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 6447
 HEAP8[$11 >> 0] = $4; //@line 6448
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 6449
 HEAP32[$12 >> 2] = $6; //@line 6450
 sp = STACKTOP; //@line 6451
 return;
}
function _abort_message($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14407
 STACKTOP = STACKTOP + 16 | 0; //@line 14408
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14408
 $1 = sp; //@line 14409
 HEAP32[$1 >> 2] = $varargs; //@line 14410
 $2 = HEAP32[2532] | 0; //@line 14411
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 14412
 _vfprintf($2, $0, $1) | 0; //@line 14413
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 749; //@line 14416
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 14418
  sp = STACKTOP; //@line 14419
  STACKTOP = sp; //@line 14420
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14422
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14423
 _fputc(10, $2) | 0; //@line 14424
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 750; //@line 14427
  sp = STACKTOP; //@line 14428
  STACKTOP = sp; //@line 14429
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 14431
  _abort(); //@line 14432
 }
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_26($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 19971
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19973
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19975
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19977
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19979
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19981
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19983
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(28) | 0; //@line 19984
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($4); //@line 19985
 if (!___async) {
  ___async_unwind = 0; //@line 19988
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 137; //@line 19990
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 19992
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $4; //@line 19994
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $6; //@line 19996
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $8; //@line 19998
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $10; //@line 20000
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $12; //@line 20002
 sp = STACKTOP; //@line 20003
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $15 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 32742
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32744
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32748
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 32750
 $9 = HEAP32[$2 >> 2] | 0; //@line 32751
 $12 = HEAP32[(HEAP32[$9 >> 2] | 0) + 68 >> 2] | 0; //@line 32754
 $14 = HEAP16[(HEAP32[$0 + 8 >> 2] | 0) + 12 >> 1] | 0; //@line 32756
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 32757
 FUNCTION_TABLE_viiii[$12 & 7]($9, $6, $8, $14); //@line 32758
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 623; //@line 32761
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 32762
  HEAP32[$15 >> 2] = $2; //@line 32763
  sp = STACKTOP; //@line 32764
  return;
 }
 ___async_unwind = 0; //@line 32767
 HEAP32[$ReallocAsyncCtx2 >> 2] = 623; //@line 32768
 $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 32769
 HEAP32[$15 >> 2] = $2; //@line 32770
 sp = STACKTOP; //@line 32771
 return;
}
function __ZN7LoRaPHY17calculate_backoffEP16backoff_params_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$034 = 0, $$sink = 0, $11 = 0, $13 = 0, $14 = 0, $18 = 0, $3 = 0, $30 = 0;
 $3 = HEAP32[$0 + 72 >> 2] | 0; //@line 25931
 $11 = HEAPU8[(HEAP32[$0 + 112 >> 2] | 0) + ((HEAPU8[$1 + 3 >> 0] | 0) * 12 | 0) + 9 >> 0] | 0; //@line 25939
 $13 = HEAP16[$3 + ($11 * 24 | 0) >> 1] | 0; //@line 25941
 $14 = $3 + ($11 * 24 | 0) + 12 | 0; //@line 25942
 HEAP32[$14 >> 2] = 0; //@line 25943
 if (!(HEAP8[$1 >> 0] | 0)) {
  $18 = HEAP32[$1 + 4 >> 2] | 0; //@line 25948
  $$0 = $18 >>> 0 < 36e5 ? 100 : $18 >>> 0 < 396e5 ? 1e3 : 1e4; //@line 25952
  $$034 = ($13 & 65535) > ($$0 & 65535) ? $13 : $$0; //@line 25955
 } else {
  $$034 = $13; //@line 25957
 }
 if (!(HEAP8[$1 + 2 >> 0] | 0)) {
  if (!(HEAP8[$1 + 1 >> 0] | 0)) {
   $$sink = 0; //@line 25967
   HEAP32[$14 >> 2] = $$sink; //@line 25968
   return;
  }
 }
 $30 = HEAP32[$1 + 8 >> 2] | 0; //@line 25973
 $$sink = (Math_imul($30, $$034 & 65535) | 0) - $30 | 0; //@line 25977
 HEAP32[$14 >> 2] = $$sink; //@line 25978
 return;
}
function __ZN4mbed6TickerD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6724
 HEAP32[$0 >> 2] = 10108; //@line 6725
 $1 = $0 + 40 | 0; //@line 6726
 _emscripten_asm_const_ii(11, $1 | 0) | 0; //@line 6727
 $4 = HEAP32[$0 + 52 >> 2] | 0; //@line 6729
 do {
  if ($4 | 0) {
   $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 6734
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6735
   FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 6736
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 722; //@line 6739
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 6741
    sp = STACKTOP; //@line 6742
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6745
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6750
 __ZN4mbed10TimerEventD2Ev($0); //@line 6751
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 723; //@line 6754
  sp = STACKTOP; //@line 6755
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6758
  return;
 }
}
function __ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb_200($0) {
 $0 = $0 | 0;
 var $15 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 33256
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33258
 __ZN4mbed6Ticker6detachEv($2 + 1112 | 0); //@line 33260
 HEAP8[$2 + 688 >> 0] = 0; //@line 33262
 $6 = HEAP32[$2 + 784 >> 2] | 0; //@line 33264
 if (!$6) {
  return;
 }
 $9 = HEAP32[$6 + 44 >> 2] | 0; //@line 33270
 if (!$9) {
  return;
 }
 $15 = HEAPU8[$2 + 782 >> 0] | 0; //@line 33279
 $18 = HEAP8[$2 + 781 >> 0] | 0; //@line 33282
 $20 = HEAP8[$2 + 780 >> 0] | 0; //@line 33284
 $21 = HEAP32[$9 >> 2] | 0; //@line 33285
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 33286
 FUNCTION_TABLE_viiiii[$21 & 7]($6 + 32 | 0, $2 + 788 | 0, $15, $18, $20); //@line 33287
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 126; //@line 33290
  sp = STACKTOP; //@line 33291
  return;
 }
 ___async_unwind = 0; //@line 33294
 HEAP32[$ReallocAsyncCtx >> 2] = 126; //@line 33295
 sp = STACKTOP; //@line 33296
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 32090
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32092
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32094
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32096
 HEAP32[$2 + 1960 >> 2] = 0; //@line 32098
 HEAP32[$2 + 1956 >> 2] = 0; //@line 32100
 HEAP32[$4 >> 2] = 1; //@line 32101
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 32102
 $9 = __ZN12LoRaWANStack18lora_state_machineEv($2) | 0; //@line 32103
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 300; //@line 32106
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 32107
  HEAP32[$10 >> 2] = $6; //@line 32108
  sp = STACKTOP; //@line 32109
  return;
 }
 HEAP32[___async_retval >> 2] = $9; //@line 32113
 ___async_unwind = 0; //@line 32114
 HEAP32[$ReallocAsyncCtx4 >> 2] = 300; //@line 32115
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 32116
 HEAP32[$10 >> 2] = $6; //@line 32117
 sp = STACKTOP; //@line 32118
 return;
}
function _mbed_error_printf__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 1580
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1582
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1584
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1586
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1588
 if (($AsyncRetVal | 0) <= 0) {
  return;
 }
 if (!(HEAP32[5549] | 0)) {
  _serial_init(22200, 2, 3); //@line 1596
 }
 $12 = HEAP8[$6 >> 0] | 0; //@line 1599
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 1600
 _serial_putc(22200, $12); //@line 1601
 if (!___async) {
  ___async_unwind = 0; //@line 1604
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 718; //@line 1606
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = 0; //@line 1608
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $AsyncRetVal; //@line 1610
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 1612
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $4; //@line 1614
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $6; //@line 1616
 sp = STACKTOP; //@line 1617
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_179($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 32125
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32129
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32131
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32133
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32135
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32137
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32139
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 7; //@line 32140
 HEAP8[$4 >> 0] = 1; //@line 32141
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 32142
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($6, $8) | 0; //@line 32143
 if (!___async) {
  ___async_unwind = 0; //@line 32146
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 299; //@line 32148
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $10; //@line 32150
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $12; //@line 32152
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $14; //@line 32154
 sp = STACKTOP; //@line 32155
 return;
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_391($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19850
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19854
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19856
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 19857
 if (!$6) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 19861
  return;
 }
 $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 19865
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 19866
 FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 19867
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 359; //@line 19870
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 19871
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 19872
  sp = STACKTOP; //@line 19873
  return;
 }
 ___async_unwind = 0; //@line 19876
 HEAP32[$ReallocAsyncCtx2 >> 2] = 359; //@line 19877
 $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 19878
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 19879
 sp = STACKTOP; //@line 19880
 return;
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_99($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 24391
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24393
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24395
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24397
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24399
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24401
 $12 = HEAP32[$2 + 356 >> 2] | 0; //@line 24403
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 24405
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($12, $2 + 1056 | 0); //@line 24406
 if (!___async) {
  ___async_unwind = 0; //@line 24409
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 365; //@line 24411
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 24413
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 24415
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 24417
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 24419
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 24421
 sp = STACKTOP; //@line 24422
 return;
}
function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $2 = 0, $3 = 0, $4 = 0, $9 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 13756
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 13756
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 13757
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 13758
 switch ($4 & 2047) {
 case 0:
  {
   if ($0 != 0.0) {
    $9 = +_frexp($0 * 18446744073709552000.0, $1); //@line 13767
    $$016 = $9; //@line 13770
    $storemerge = (HEAP32[$1 >> 2] | 0) + -64 | 0; //@line 13770
   } else {
    $$016 = $0; //@line 13772
    $storemerge = 0; //@line 13772
   }
   HEAP32[$1 >> 2] = $storemerge; //@line 13774
   $$0 = $$016; //@line 13775
   break;
  }
 case 2047:
  {
   $$0 = $0; //@line 13779
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = ($4 & 2047) + -1022; //@line 13785
   HEAP32[tempDoublePtr >> 2] = $2; //@line 13788
   HEAP32[tempDoublePtr + 4 >> 2] = $3 & -2146435073 | 1071644672; //@line 13788
   $$0 = +HEAPF64[tempDoublePtr >> 3]; //@line 13789
  }
 }
 return +$$0;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_220($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 34630
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34634
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34636
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34638
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34640
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 34642
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 34644
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 1; //@line 34645
 HEAP8[$4 >> 0] = 1; //@line 34646
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(16) | 0; //@line 34647
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($6, $8) | 0; //@line 34648
 if (!___async) {
  ___async_unwind = 0; //@line 34651
 }
 HEAP32[$ReallocAsyncCtx15 >> 2] = 241; //@line 34653
 HEAP32[$ReallocAsyncCtx15 + 4 >> 2] = $10; //@line 34655
 HEAP32[$ReallocAsyncCtx15 + 8 >> 2] = $12; //@line 34657
 HEAP32[$ReallocAsyncCtx15 + 12 >> 2] = $14; //@line 34659
 sp = STACKTOP; //@line 34660
 return;
}
function __ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $14 = 0, $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20935
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20937
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20939
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20943
 $11 = $2 + 689 | 0; //@line 20946
 HEAP8[$11 >> 0] = 0; //@line 20947
 _printf(10880, $4) | 0; //@line 20948
 HEAP32[$8 >> 2] = HEAPU8[$11 >> 0]; //@line 20951
 _printf(11055, $8) | 0; //@line 20952
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 20953
 _putchar(10) | 0; //@line 20954
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 48; //@line 20957
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 20958
  HEAP32[$14 >> 2] = $2; //@line 20959
  sp = STACKTOP; //@line 20960
  return;
 }
 ___async_unwind = 0; //@line 20963
 HEAP32[$ReallocAsyncCtx2 >> 2] = 48; //@line 20964
 $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 20965
 HEAP32[$14 >> 2] = $2; //@line 20966
 sp = STACKTOP; //@line 20967
 return;
}
function ___cxa_can_catch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16036
 STACKTOP = STACKTOP + 16 | 0; //@line 16037
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16037
 $3 = sp; //@line 16038
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 16040
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 16043
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 16044
 $8 = FUNCTION_TABLE_iiii[$7 & 15]($0, $1, $3) | 0; //@line 16045
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 773; //@line 16048
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 16050
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 16052
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 16054
  sp = STACKTOP; //@line 16055
  STACKTOP = sp; //@line 16056
  return 0; //@line 16056
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16058
 if ($8) {
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2]; //@line 16062
 }
 STACKTOP = sp; //@line 16064
 return $8 & 1 | 0; //@line 16064
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_291($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 3814
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3816
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3818
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3820
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3822
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3824
 $12 = HEAP32[$2 + 356 >> 2] | 0; //@line 3826
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 3828
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($12, $2 + 1036 | 0); //@line 3829
 if (!___async) {
  ___async_unwind = 0; //@line 3832
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 498; //@line 3834
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 3836
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 3838
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 3840
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 3842
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $10; //@line 3844
 sp = STACKTOP; //@line 3845
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_209($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx26 = 0, sp = 0;
 sp = STACKTOP; //@line 33768
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33772
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33774
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33776
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33778
 $11 = $4 + 12 | 0; //@line 33780
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 33781
 $ReallocAsyncCtx26 = _emscripten_realloc_async_context(16) | 0; //@line 33782
 $12 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 0) | 0; //@line 33783
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 33787
  ___async_unwind = 0; //@line 33788
 }
 HEAP32[$ReallocAsyncCtx26 >> 2] = 243; //@line 33790
 HEAP32[$ReallocAsyncCtx26 + 4 >> 2] = $11; //@line 33792
 HEAP32[$ReallocAsyncCtx26 + 8 >> 2] = $8; //@line 33794
 HEAP32[$ReallocAsyncCtx26 + 12 >> 2] = $10; //@line 33796
 sp = STACKTOP; //@line 33797
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_207($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx27 = 0, sp = 0;
 sp = STACKTOP; //@line 33701
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33705
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33707
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33709
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33711
 $11 = $4 + 12 | 0; //@line 33713
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 33714
 $ReallocAsyncCtx27 = _emscripten_realloc_async_context(16) | 0; //@line 33715
 $12 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 0) | 0; //@line 33716
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 33720
  ___async_unwind = 0; //@line 33721
 }
 HEAP32[$ReallocAsyncCtx27 >> 2] = 234; //@line 33723
 HEAP32[$ReallocAsyncCtx27 + 4 >> 2] = $11; //@line 33725
 HEAP32[$ReallocAsyncCtx27 + 8 >> 2] = $8; //@line 33727
 HEAP32[$ReallocAsyncCtx27 + 12 >> 2] = $10; //@line 33729
 sp = STACKTOP; //@line 33730
 return;
}
function __ZN16SX1276_LoRaRadio5sleepEv__async_cb_62($0) {
 $0 = $0 | 0;
 var $13 = 0, $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 22529
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22531
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22533
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22537
 __ZN4mbed6Ticker6detachEv($2 + 1048 | 0); //@line 22541
 __ZN4mbed6Ticker6detachEv($2 + 1112 | 0); //@line 22543
 _printf(10880, $4) | 0; //@line 22544
 HEAP32[$8 >> 2] = 0; //@line 22545
 _printf(10946, $8) | 0; //@line 22546
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 22547
 _putchar(10) | 0; //@line 22548
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 51; //@line 22551
  $13 = $ReallocAsyncCtx + 4 | 0; //@line 22552
  HEAP32[$13 >> 2] = $2; //@line 22553
  sp = STACKTOP; //@line 22554
  return;
 }
 ___async_unwind = 0; //@line 22557
 HEAP32[$ReallocAsyncCtx >> 2] = 51; //@line 22558
 $13 = $ReallocAsyncCtx + 4 | 0; //@line 22559
 HEAP32[$13 >> 2] = $2; //@line 22560
 sp = STACKTOP; //@line 22561
 return;
}
function __ZN7LoRaPHY19num_active_channelsEPthh($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$01012 = 0, $$011 = 0, $8 = 0, $9 = 0, $indvars$iv = 0, $wide$trip$count = 0;
 if (!(($1 | 0) != 0 & ($2 & 255) < ($3 & 255))) {
  $$011 = 0; //@line 24879
  return $$011 | 0; //@line 24880
 }
 $wide$trip$count = $3 & 255; //@line 24883
 $$01012 = 0; //@line 24884
 $indvars$iv = $2 & 255; //@line 24884
 do {
  $8 = HEAP16[$1 + ($indvars$iv << 1) >> 1] | 0; //@line 24887
  $9 = $8 & 65535; //@line 24888
  $$01012 = ($$01012 & 255) + (($9 & 1) + ($9 >>> 1 & 1) + ($9 >>> 2 & 1) + ($9 >>> 3 & 1) + ($9 >>> 4 & 1) + ($9 >>> 5 & 1) + ($9 >>> 6 & 1) + ($9 >>> 7 & 1) + ($9 >>> 8 & 1) + ($9 >>> 9 & 1) + ($9 >>> 10 & 1) + ($9 >>> 11 & 1) + ($9 >>> 12 & 1) + ($9 >>> 13 & 1) + ($9 >>> 14 & 1) + (($8 & 65535) >>> 15 & 65535) & 255) | 0; //@line 24937
  $indvars$iv = $indvars$iv + 1 | 0; //@line 24938
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 $$011 = $$01012 & 255; //@line 24947
 return $$011 | 0; //@line 24948
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx28 = 0, sp = 0;
 sp = STACKTOP; //@line 33634
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33638
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33640
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33642
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33644
 $11 = $4 + 12 | 0; //@line 33646
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 33647
 $ReallocAsyncCtx28 = _emscripten_realloc_async_context(16) | 0; //@line 33648
 $12 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 1) | 0; //@line 33649
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 33653
  ___async_unwind = 0; //@line 33654
 }
 HEAP32[$ReallocAsyncCtx28 >> 2] = 229; //@line 33656
 HEAP32[$ReallocAsyncCtx28 + 4 >> 2] = $11; //@line 33658
 HEAP32[$ReallocAsyncCtx28 + 8 >> 2] = $8; //@line 33660
 HEAP32[$ReallocAsyncCtx28 + 12 >> 2] = $10; //@line 33662
 sp = STACKTOP; //@line 33663
 return;
}
function __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18342
 STACKTOP = STACKTOP + 16 | 0; //@line 18343
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 18343
 _printf(12943, sp) | 0; //@line 18346
 _printf(13500, sp + 8 | 0) | 0; //@line 18347
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 18348
 _putchar(10) | 0; //@line 18349
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 546; //@line 18352
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 18354
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 18356
  sp = STACKTOP; //@line 18357
  STACKTOP = sp; //@line 18358
  return 0; //@line 18358
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 18360
  $6 = __ZN10LoRaMacMib11get_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0 + 348 | 0, $1, $0 + 360 | 0) | 0; //@line 18363
  STACKTOP = sp; //@line 18364
  return $6 | 0; //@line 18364
 }
 return 0; //@line 18366
}
function _mbed_error_printf__async_cb_267($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 1624
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1628
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1630
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1632
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1634
 $12 = (HEAP32[$0 + 4 >> 2] | 0) + 1 | 0; //@line 1635
 if (($12 | 0) == ($4 | 0)) {
  return;
 }
 $14 = HEAP8[$10 + $12 >> 0] | 0; //@line 1642
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 1643
 _serial_putc(22200, $14); //@line 1644
 if (!___async) {
  ___async_unwind = 0; //@line 1647
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 718; //@line 1649
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $12; //@line 1651
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 1653
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 1655
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 1657
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 1659
 sp = STACKTOP; //@line 1660
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_176($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 31883
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31887
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31889
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 31890
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 31894
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 31898
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 31899
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 31900
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 403; //@line 31903
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 31904
  HEAP32[$11 >> 2] = $4; //@line 31905
  sp = STACKTOP; //@line 31906
  return;
 }
 ___async_unwind = 0; //@line 31909
 HEAP32[$ReallocAsyncCtx5 >> 2] = 403; //@line 31910
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 31911
 HEAP32[$11 >> 2] = $4; //@line 31912
 sp = STACKTOP; //@line 31913
 return;
}
function _vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $33 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16945
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16953
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16955
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16957
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16959
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 16961
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 16963
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 16965
 $$ = (HEAP32[$2 >> 2] | 0) == 0 ? -1 : HEAP32[$0 + 8 >> 2] | 0; //@line 16976
 HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = HEAP32[$0 + 12 >> 2]; //@line 16977
 HEAP32[$10 >> 2] = 0; //@line 16978
 HEAP32[$12 >> 2] = 0; //@line 16979
 HEAP32[$14 >> 2] = 0; //@line 16980
 HEAP32[$2 >> 2] = 0; //@line 16981
 $33 = HEAP32[$16 >> 2] | 0; //@line 16982
 HEAP32[$16 >> 2] = $33 | $18; //@line 16987
 if ($20 | 0) {
  ___unlockfile($22); //@line 16990
 }
 HEAP32[___async_retval >> 2] = ($33 & 32 | 0) == 0 ? $$ : -1; //@line 16993
 return;
}
function __ZN4mbed7TimeoutD2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 3828
 HEAP32[$0 >> 2] = 10108; //@line 3829
 __ZN4mbed6Ticker6detachEv($0); //@line 3830
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 3832
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 3838
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3839
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 40 | 0); //@line 3840
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 155; //@line 3843
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3845
    sp = STACKTOP; //@line 3846
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3849
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3854
 __ZN4mbed10TimerEventD2Ev($0); //@line 3855
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 156; //@line 3858
  sp = STACKTOP; //@line 3859
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3862
  return;
 }
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb_78($0) {
 $0 = $0 | 0;
 var $$0 = 0, $19 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 23567
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23571
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = (HEAPU8[23154] | 0) << 16 | (HEAPU8[23155] | 0) << 24 | (HEAPU8[23153] | 0) << 8 | (HEAPU8[23152] | 0); //@line 23588
  $$0 = 0; //@line 23589
 } else {
  $$0 = $AsyncRetVal; //@line 23591
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 23593
 _mbedtls_cipher_free(21844); //@line 23594
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 591; //@line 23597
  $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 23598
  HEAP32[$19 >> 2] = $$0; //@line 23599
  sp = STACKTOP; //@line 23600
  return;
 }
 ___async_unwind = 0; //@line 23603
 HEAP32[$ReallocAsyncCtx5 >> 2] = 591; //@line 23604
 $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 23605
 HEAP32[$19 >> 2] = $$0; //@line 23606
 sp = STACKTOP; //@line 23607
 return;
}
function __ZN16LoRaWANInterface7connectEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4939
 STACKTOP = STACKTOP + 32 | 0; //@line 4940
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4940
 $1 = sp; //@line 4941
 HEAP8[$1 >> 0] = 1; //@line 4942
 HEAP32[$1 + 4 >> 2] = 0; //@line 4944
 HEAP32[$1 + 8 >> 2] = 0; //@line 4946
 HEAP32[$1 + 12 >> 2] = 23120; //@line 4948
 HEAP32[$1 + 16 >> 2] = 23136; //@line 4950
 $8 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 4953
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4954
 $9 = FUNCTION_TABLE_iii[$8 & 31]($0, $1) | 0; //@line 4955
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 171; //@line 4958
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 4960
  sp = STACKTOP; //@line 4961
  STACKTOP = sp; //@line 4962
  return 0; //@line 4962
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4964
  STACKTOP = sp; //@line 4965
  return $9 | 0; //@line 4965
 }
 return 0; //@line 4967
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $13 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14930
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 14936
  } else {
   $10 = HEAP32[$0 + 8 >> 2] | 0; //@line 14939
   $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 14942
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14943
   FUNCTION_TABLE_viiiiii[$13 & 3]($10, $1, $2, $3, $4, $5); //@line 14944
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 755; //@line 14947
    sp = STACKTOP; //@line 14948
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14951
    break;
   }
  }
 } while (0);
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_481($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 34551
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34555
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34557
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 34558
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 34562
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 34566
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 34567
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 34568
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 272; //@line 34571
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 34572
  HEAP32[$11 >> 2] = $4; //@line 34573
  sp = STACKTOP; //@line 34574
  return;
 }
 ___async_unwind = 0; //@line 34577
 HEAP32[$ReallocAsyncCtx5 >> 2] = 272; //@line 34578
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 34579
 HEAP32[$11 >> 2] = $4; //@line 34580
 sp = STACKTOP; //@line 34581
 return;
}
function _schedule_interrupt__async_cb_305($0) {
 $0 = $0 | 0;
 var $16 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 4841
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4845
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4847
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 4849
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 4850
 if ($4 >>> 0 > $8 >>> 0) {
  if (!($AsyncRetVal >>> 0 >= $4 >>> 0 | $AsyncRetVal >>> 0 < $8 >>> 0)) {
   return;
  }
 } else {
  if (!($AsyncRetVal >>> 0 >= $4 >>> 0 & $AsyncRetVal >>> 0 < $8 >>> 0)) {
   return;
  }
 }
 $16 = HEAP32[(HEAP32[$6 >> 2] | 0) + 20 >> 2] | 0; //@line 4869
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 4870
 FUNCTION_TABLE_v[$16 & 7](); //@line 4871
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 695; //@line 4874
  sp = STACKTOP; //@line 4875
  return;
 }
 ___async_unwind = 0; //@line 4878
 HEAP32[$ReallocAsyncCtx6 >> 2] = 695; //@line 4879
 sp = STACKTOP; //@line 4880
 return;
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_104($0) {
 $0 = $0 | 0;
 var $$0 = 0, $19 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 24667
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24671
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = (HEAPU8[23154] | 0) << 16 | (HEAPU8[23155] | 0) << 24 | (HEAPU8[23153] | 0) << 8 | (HEAPU8[23152] | 0); //@line 24688
  $$0 = 0; //@line 24689
 } else {
  $$0 = $AsyncRetVal; //@line 24691
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 24693
 _mbedtls_cipher_free(21844); //@line 24694
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 586; //@line 24697
  $19 = $ReallocAsyncCtx6 + 4 | 0; //@line 24698
  HEAP32[$19 >> 2] = $$0; //@line 24699
  sp = STACKTOP; //@line 24700
  return;
 }
 ___async_unwind = 0; //@line 24703
 HEAP32[$ReallocAsyncCtx6 >> 2] = 586; //@line 24704
 $19 = $ReallocAsyncCtx6 + 4 | 0; //@line 24705
 HEAP32[$19 >> 2] = $$0; //@line 24706
 sp = STACKTOP; //@line 24707
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_247($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 1023
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1027
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1029
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 1030
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 1034
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 1038
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 1039
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 1040
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 264; //@line 1043
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 1044
  HEAP32[$11 >> 2] = $4; //@line 1045
  sp = STACKTOP; //@line 1046
  return;
 }
 ___async_unwind = 0; //@line 1049
 HEAP32[$ReallocAsyncCtx5 >> 2] = 264; //@line 1050
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 1051
 HEAP32[$11 >> 2] = $4; //@line 1052
 sp = STACKTOP; //@line 1053
 return;
}
function _get_pkcs_padding($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$028 = 0, $$02930 = 0, $$031 = 0, $13 = 0, $23 = 0, $7 = 0, $8 = 0, $9 = 0;
 if (($0 | 0) == 0 | ($2 | 0) == 0) {
  $$028 = -24832; //@line 2528
  return $$028 | 0; //@line 2529
 }
 $7 = HEAP8[$0 + ($1 + -1) >> 0] | 0; //@line 2533
 $8 = $7 & 255; //@line 2534
 $9 = $1 - $8 | 0; //@line 2535
 HEAP32[$2 >> 2] = $9; //@line 2536
 $13 = ($7 << 24 >> 24 == 0 | $8 >>> 0 > $1 >>> 0) & 1; //@line 2540
 if (!$1) {
  $$0$lcssa = $13; //@line 2543
 } else {
  $$02930 = 0; //@line 2545
  $$031 = $13; //@line 2545
  while (1) {
   $23 = (($$02930 >>> 0 >= $9 >>> 0 ? (HEAP8[$0 + $$02930 >> 0] ^ $7) & 255 : 0) | $$031 & 255) & 255; //@line 2555
   $$02930 = $$02930 + 1 | 0; //@line 2556
   if (($$02930 | 0) == ($1 | 0)) {
    $$0$lcssa = $23; //@line 2559
    break;
   } else {
    $$031 = $23; //@line 2562
   }
  }
 }
 $$028 = $$0$lcssa << 24 >> 24 ? -25088 : 0; //@line 2568
 return $$028 | 0; //@line 2569
}
function __ZN16LoRaWANInterface4sendEhPKhti__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18823
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18829
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18833
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18835
 $14 = HEAP8[$0 + 28 >> 0] | 0; //@line 18837
 $16 = HEAP16[$0 + 30 >> 1] | 0; //@line 18839
 _printf(11812, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 18840
 _printf(11825, $6) | 0; //@line 18841
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 18842
 _putchar(10) | 0; //@line 18843
 if (!___async) {
  ___async_unwind = 0; //@line 18846
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 173; //@line 18848
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $10; //@line 18850
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $12; //@line 18852
 HEAP8[$ReallocAsyncCtx2 + 12 >> 0] = $14; //@line 18854
 HEAP16[$ReallocAsyncCtx2 + 14 >> 1] = $16; //@line 18856
 sp = STACKTOP; //@line 18857
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_225($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx20 = 0, sp = 0;
 sp = STACKTOP; //@line 34888
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34890
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34892
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34894
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34896
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34898
 HEAP32[$2 >> 2] = 1; //@line 34899
 HEAP8[$2 + 4 >> 0] = 0; //@line 34901
 $ReallocAsyncCtx20 = _emscripten_realloc_async_context(16) | 0; //@line 34902
 __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t($4, $2) | 0; //@line 34903
 if (!___async) {
  ___async_unwind = 0; //@line 34906
 }
 HEAP32[$ReallocAsyncCtx20 >> 2] = 227; //@line 34908
 HEAP32[$ReallocAsyncCtx20 + 4 >> 2] = $6; //@line 34910
 HEAP32[$ReallocAsyncCtx20 + 8 >> 2] = $8; //@line 34912
 HEAP32[$ReallocAsyncCtx20 + 12 >> 2] = $10; //@line 34914
 sp = STACKTOP; //@line 34915
 return;
}
function __ZN16SX1276_LoRaRadio7standbyEv__async_cb_70($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 23010
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23012
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23014
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23016
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23018
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23020
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 23021
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 23022
 if (!___async) {
  ___async_unwind = 0; //@line 23025
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 55; //@line 23027
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $4; //@line 23029
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $6; //@line 23031
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $8; //@line 23033
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $10; //@line 23035
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $2; //@line 23037
 sp = STACKTOP; //@line 23038
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_226($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx21 = 0, sp = 0;
 sp = STACKTOP; //@line 34921
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34923
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34925
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 34927
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 34929
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 34931
 $ReallocAsyncCtx21 = _emscripten_realloc_async_context(24) | 0; //@line 34932
 __ZN7LoRaMac10disconnectEv($4); //@line 34933
 if (!___async) {
  ___async_unwind = 0; //@line 34936
 }
 HEAP32[$ReallocAsyncCtx21 >> 2] = 226; //@line 34938
 HEAP32[$ReallocAsyncCtx21 + 4 >> 2] = $2; //@line 34940
 HEAP32[$ReallocAsyncCtx21 + 8 >> 2] = $4; //@line 34942
 HEAP32[$ReallocAsyncCtx21 + 12 >> 2] = $6; //@line 34944
 HEAP32[$ReallocAsyncCtx21 + 16 >> 2] = $8; //@line 34946
 HEAP32[$ReallocAsyncCtx21 + 20 >> 2] = $10; //@line 34948
 sp = STACKTOP; //@line 34949
 return;
}
function __ZN12LoRaWANStackC2Ev__async_cb_202($0) {
 $0 = $0 | 0;
 var $$pre$i$i59 = 0, $10 = 0, $11 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 33523
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33529
 $$pre$i$i59 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 33530
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i59; //@line 33532
 if (!$$pre$i$i59) {
  return;
 }
 $10 = HEAP32[$$pre$i$i59 + 8 >> 2] | 0; //@line 33538
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 33539
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 33540
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 180; //@line 33543
  $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 33544
  HEAP32[$11 >> 2] = $6; //@line 33545
  sp = STACKTOP; //@line 33546
  return;
 }
 ___async_unwind = 0; //@line 33549
 HEAP32[$ReallocAsyncCtx4 >> 2] = 180; //@line 33550
 $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 33551
 HEAP32[$11 >> 2] = $6; //@line 33552
 sp = STACKTOP; //@line 33553
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $14 = 0, $17 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15929
 $7 = HEAP32[$0 + 4 >> 2] | 0; //@line 15931
 $8 = $7 >> 8; //@line 15932
 if (!($7 & 1)) {
  $$0 = $8; //@line 15936
 } else {
  $$0 = HEAP32[(HEAP32[$3 >> 2] | 0) + $8 >> 2] | 0; //@line 15941
 }
 $14 = HEAP32[$0 >> 2] | 0; //@line 15943
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] | 0; //@line 15946
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15951
 FUNCTION_TABLE_viiiiii[$17 & 3]($14, $1, $2, $3 + $$0 | 0, $7 & 2 | 0 ? $4 : 2, $5); //@line 15952
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 771; //@line 15955
  sp = STACKTOP; //@line 15956
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15959
  return;
 }
}
function __ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9497
 STACKTOP = STACKTOP + 16 | 0; //@line 9498
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9498
 if ((HEAP32[$0 + 1876 >> 2] | 0) >>> 0 >= 3) {
  $$0 = __ZN7LoRaMac16get_channel_planER16lora_channelplan($0 + 4 | 0, $1) | 0; //@line 9507
  STACKTOP = sp; //@line 9508
  return $$0 | 0; //@line 9508
 }
 _printf(11863, sp) | 0; //@line 9510
 _printf(12683, sp + 8 | 0) | 0; //@line 9511
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9512
 _putchar(10) | 0; //@line 9513
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 313; //@line 9516
  sp = STACKTOP; //@line 9517
  STACKTOP = sp; //@line 9518
  return 0; //@line 9518
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9520
 $$0 = -1e3; //@line 9521
 STACKTOP = sp; //@line 9522
 return $$0 | 0; //@line 9522
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16799
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16801
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16803
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 16805
 $7 = HEAP32[$2 >> 2] | 0; //@line 16806
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 24 >> 2] | 0; //@line 16809
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 16810
 FUNCTION_TABLE_viii[$10 & 7]($7, $4, $6); //@line 16811
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 643; //@line 16814
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 16815
  HEAP32[$11 >> 2] = $2; //@line 16816
  sp = STACKTOP; //@line 16817
  return;
 }
 ___async_unwind = 0; //@line 16820
 HEAP32[$ReallocAsyncCtx2 >> 2] = 643; //@line 16821
 $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 16822
 HEAP32[$11 >> 2] = $2; //@line 16823
 sp = STACKTOP; //@line 16824
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15099
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 15105
  } else {
   $8 = HEAP32[$0 + 8 >> 2] | 0; //@line 15108
   $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0; //@line 15111
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15112
   FUNCTION_TABLE_viiii[$11 & 7]($8, $1, $2, $3); //@line 15113
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 758; //@line 15116
    sp = STACKTOP; //@line 15117
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 15120
    break;
   }
  }
 } while (0);
 return;
}
function __ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$unpack$i = 0, $$unpack5$i = 0, $15 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13045
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 13048
 $$unpack5$i = HEAP32[$0 + 4 >> 2] | 0; //@line 13050
 $8 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack5$i >> 1) | 0; //@line 13052
 if (!($$unpack5$i & 1)) {
  $15 = $$unpack$i; //@line 13057
 } else {
  $15 = HEAP32[(HEAP32[$8 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 13062
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13064
 FUNCTION_TABLE_viiiii[$15 & 7]($8, $1, $2, $3, $4); //@line 13065
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 407; //@line 13068
  sp = STACKTOP; //@line 13069
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13072
  return;
 }
}
function ___dynamic_cast__async_cb_194($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $16 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32866
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32868
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32870
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32876
 L2 : do {
  switch (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  case 0:
   {
    $$0 = (HEAP32[$6 >> 2] | 0) == 1 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1 ? HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0 : 0; //@line 32891
    break;
   }
  case 1:
   {
    if ((HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0) != 1) {
     if (!((HEAP32[$6 >> 2] | 0) == 0 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1)) {
      $$0 = 0; //@line 32907
      break L2;
     }
    }
    $$0 = HEAP32[$16 >> 2] | 0; //@line 32912
    break;
   }
  default:
   {
    $$0 = 0; //@line 32916
   }
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 32921
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $13 = 0, $16 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15971
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 15973
 $7 = $6 >> 8; //@line 15974
 if (!($6 & 1)) {
  $$0 = $7; //@line 15978
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $7 >> 2] | 0; //@line 15983
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 15985
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] | 0; //@line 15988
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15993
 FUNCTION_TABLE_viiiii[$16 & 7]($13, $1, $2 + $$0 | 0, $6 & 2 | 0 ? $3 : 2, $4); //@line 15994
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 772; //@line 15997
  sp = STACKTOP; //@line 15998
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16001
  return;
 }
}
function _ticker_remove_event($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5866
 $4 = (HEAP32[$0 + 4 >> 2] | 0) + 4 | 0; //@line 5869
 $5 = HEAP32[$4 >> 2] | 0; //@line 5870
 if (($5 | 0) == ($1 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 5875
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5876
  _schedule_interrupt($0); //@line 5877
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 697; //@line 5880
   sp = STACKTOP; //@line 5881
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5884
  return;
 } else {
  $$0 = $5; //@line 5887
 }
 do {
  if (!$$0) {
   label = 8; //@line 5892
   break;
  }
  $10 = $$0 + 12 | 0; //@line 5895
  $$0 = HEAP32[$10 >> 2] | 0; //@line 5896
 } while (($$0 | 0) != ($1 | 0));
 if ((label | 0) == 8) {
  return;
 }
 HEAP32[$10 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 5909
 return;
}
function __ZN16SX1276_LoRaRadio11set_channelEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 1319
 STACKTOP = STACKTOP + 16 | 0; //@line 1320
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1320
 $vararg_buffer1 = sp + 8 | 0; //@line 1321
 _printf(10880, sp) | 0; //@line 1323
 HEAP32[$vararg_buffer1 >> 2] = $1; //@line 1324
 _printf(11218, $vararg_buffer1) | 0; //@line 1325
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 1326
 _putchar(10) | 0; //@line 1327
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 80; //@line 1330
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1332
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 1334
  sp = STACKTOP; //@line 1335
  STACKTOP = sp; //@line 1336
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1338
  HEAP32[$0 + 692 >> 2] = $1; //@line 1340
  STACKTOP = sp; //@line 1341
  return;
 }
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_37($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20776
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20780
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 20781
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] | 0; //@line 20784
 $10 = HEAP8[$4 + 776 >> 0] | 0; //@line 20786
 $12 = HEAP8[$4 + 744 >> 0] | 0; //@line 20788
 $14 = HEAP32[$4 + 740 >> 2] | 0; //@line 20790
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 20792
 FUNCTION_TABLE_viiiii[$8 & 7]($5, $10, $12, $14, $4 + 824 | 0); //@line 20793
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 597; //@line 20796
  sp = STACKTOP; //@line 20797
  return;
 }
 ___async_unwind = 0; //@line 20800
 HEAP32[$ReallocAsyncCtx2 >> 2] = 597; //@line 20801
 sp = STACKTOP; //@line 20802
 return;
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_461($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 32308
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32310
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32312
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32314
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32316
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32318
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 32319
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 32320
 if (!___async) {
  ___async_unwind = 0; //@line 32323
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 107; //@line 32325
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $4; //@line 32327
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $6; //@line 32329
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $8; //@line 32331
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $10; //@line 32333
 sp = STACKTOP; //@line 32334
 return;
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_38($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 20808
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20812
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 20813
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] | 0; //@line 20816
 $10 = HEAP8[$4 + 776 >> 0] | 0; //@line 20818
 $12 = HEAP8[$4 + 744 >> 0] | 0; //@line 20820
 $14 = HEAP32[$4 + 740 >> 2] | 0; //@line 20822
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 20824
 FUNCTION_TABLE_viiiii[$8 & 7]($5, $10, $12, $14, $4 + 824 | 0); //@line 20825
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 594; //@line 20828
  sp = STACKTOP; //@line 20829
  return;
 }
 ___async_unwind = 0; //@line 20832
 HEAP32[$ReallocAsyncCtx >> 2] = 594; //@line 20833
 sp = STACKTOP; //@line 20834
 return;
}
function __ZN16SX1276_LoRaRadio18set_low_power_modeEv__async_cb($0) {
 $0 = $0 | 0;
 var $15 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32036
 if ((HEAP32[$2 + 652 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(3, HEAP32[$2 + 484 >> 2] | 0, 0) | 0; //@line 32043
 }
 if ((HEAP32[$2 + 656 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(3, HEAP32[$2 + 508 >> 2] | 0, 0) | 0; //@line 32051
 }
 if ((HEAP32[$2 + 672 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(3, HEAP32[$2 + 604 >> 2] | 0, 0) | 0; //@line 32059
 }
 $15 = $2 + 660 | 0; //@line 32061
 if ((HEAP32[$15 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(3, HEAP32[$2 + 532 >> 2] | 0, 0) | 0; //@line 32067
  if ((HEAP32[$15 >> 2] | 0) != -1) {
   _emscripten_asm_const_iii(3, HEAP32[$2 + 556 >> 2] | 0, 0) | 0; //@line 32073
  }
 }
 if ((HEAP32[$2 + 668 >> 2] | 0) == -1) {
  return;
 }
 _emscripten_asm_const_iii(3, HEAP32[$2 + 580 >> 2] | 0, 0) | 0; //@line 32084
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $15 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15886
 $5 = HEAP32[$0 + 4 >> 2] | 0; //@line 15888
 $6 = $5 >> 8; //@line 15889
 if (!($5 & 1)) {
  $$0 = $6; //@line 15893
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $6 >> 2] | 0; //@line 15898
 }
 $12 = HEAP32[$0 >> 2] | 0; //@line 15900
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] | 0; //@line 15903
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15908
 FUNCTION_TABLE_viiii[$15 & 7]($12, $1, $2 + $$0 | 0, $5 & 2 | 0 ? $3 : 2); //@line 15909
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 770; //@line 15912
  sp = STACKTOP; //@line 15913
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15916
  return;
 }
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb_204($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 33573
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33577
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33579
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 33581
 $10 = HEAP16[$0 + 18 >> 1] | 0; //@line 33583
 $12 = HEAP8[$0 + 20 >> 0] | 0; //@line 33585
 $13 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 33587
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 33588
 FUNCTION_TABLE_viiiii[$13 & 7]($4, $6, $8, $10, $12); //@line 33589
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 406; //@line 33592
  sp = STACKTOP; //@line 33593
  return;
 }
 ___async_unwind = 0; //@line 33596
 HEAP32[$ReallocAsyncCtx >> 2] = 406; //@line 33597
 sp = STACKTOP; //@line 33598
 return;
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_98($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 24359
 $4 = HEAP8[$0 + 8 >> 0] & 1; //@line 24364
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24366
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24368
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 24369
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 24370
 __ZN7LoRaPHY15setup_rx_windowEbj($9, $4, $6); //@line 24371
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 368; //@line 24374
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 24375
  HEAP32[$10 >> 2] = $8; //@line 24376
  sp = STACKTOP; //@line 24377
  return;
 }
 ___async_unwind = 0; //@line 24380
 HEAP32[$ReallocAsyncCtx4 >> 2] = 368; //@line 24381
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 24382
 HEAP32[$10 >> 2] = $8; //@line 24383
 sp = STACKTOP; //@line 24384
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_403($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 20867
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20869
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20871
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20873
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20875
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20877
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(20) | 0; //@line 20878
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 20879
 if (!___async) {
  ___async_unwind = 0; //@line 20882
 }
 HEAP32[$ReallocAsyncCtx13 >> 2] = 75; //@line 20884
 HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $4; //@line 20886
 HEAP32[$ReallocAsyncCtx13 + 8 >> 2] = $6; //@line 20888
 HEAP32[$ReallocAsyncCtx13 + 12 >> 2] = $8; //@line 20890
 HEAP32[$ReallocAsyncCtx13 + 16 >> 2] = $10; //@line 20892
 sp = STACKTOP; //@line 20893
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_401($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 20829
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20831
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20833
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20835
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20837
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20839
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 20840
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 20841
 if (!___async) {
  ___async_unwind = 0; //@line 20844
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 78; //@line 20846
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $4; //@line 20848
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $6; //@line 20850
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $8; //@line 20852
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $10; //@line 20854
 sp = STACKTOP; //@line 20855
 return;
}
function __ZN16SX1276_LoRaRadio4sendEPhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 774
 switch (HEAP8[$0 + 689 >> 0] | 0) {
 case 0:
  {
   _emscripten_asm_const_iiiiiii(0, HEAP32[$0 + 692 >> 2] | 0, HEAP8[$0 + 696 >> 0] | 0, HEAP32[$0 + 704 >> 2] | 0, HEAP32[$0 + 712 >> 2] | 0, $1 | 0, $2 & 255 | 0) | 0; //@line 789
   break;
  }
 case 1:
  {
   _emscripten_asm_const_iiiiiii(1, HEAP32[$0 + 692 >> 2] | 0, HEAP8[$0 + 748 >> 0] | 0, HEAP32[$0 + 752 >> 2] | 0, HEAP32[$0 + 756 >> 2] | 0, $1 | 0, $2 & 255 | 0) | 0; //@line 803
   break;
  }
 default:
  {}
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 809
 __ZN16SX1276_LoRaRadio8transmitEj($0, 0); //@line 810
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 64; //@line 813
  sp = STACKTOP; //@line 814
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 817
  return;
 }
}
function __ZN7LoRaPHY14remove_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $15 = 0, $25 = 0, $4 = 0, $5 = 0;
 $4 = $1 & 255; //@line 24643
 $5 = $4 >>> 4; //@line 24644
 $10 = 1 << ($4 & 15); //@line 24649
 if ($10 & (HEAPU16[(HEAP32[$0 + 124 >> 2] | 0) + ($5 << 1) >> 1] | 0) | 0) {
  $$0 = 0; //@line 24653
  return $$0 | 0; //@line 24654
 }
 $15 = (HEAP32[$0 + 112 >> 2] | 0) + ($4 * 12 | 0) | 0; //@line 24658
 HEAP32[$15 >> 2] = 0; //@line 24659
 HEAP32[$15 + 4 >> 2] = 0; //@line 24659
 HEAP32[$15 + 8 >> 2] = 0; //@line 24659
 if (!((HEAPU8[$0 + 20 >> 0] | 0) > ($1 & 255) ? (($1 & 255) >>> 4 & 255) <= (HEAPU8[$0 + 128 >> 0] | 0) : 0)) {
  $$0 = 0; //@line 24669
  return $$0 | 0; //@line 24670
 }
 $25 = (HEAP32[$0 + 120 >> 2] | 0) + ($5 << 1) | 0; //@line 24675
 HEAP16[$25 >> 1] = ($10 ^ 65535) & (HEAPU16[$25 >> 1] | 0); //@line 24680
 $$0 = 1; //@line 24681
 return $$0 | 0; //@line 24682
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb_367($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 18241
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18245
 $4 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 18246
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 76 >> 2] | 0; //@line 18249
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 18250
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 18251
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 640; //@line 18254
  $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 18255
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 18256
  sp = STACKTOP; //@line 18257
  return;
 }
 ___async_unwind = 0; //@line 18260
 HEAP32[$ReallocAsyncCtx3 >> 2] = 640; //@line 18261
 $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 18262
 HEAP32[$8 >> 2] = $AsyncRetVal; //@line 18263
 sp = STACKTOP; //@line 18264
 return;
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 21557
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21559
 $4 = HEAP8[$0 + 8 >> 0] & 1; //@line 21562
 $5 = HEAP32[$2 >> 2] | 0; //@line 21563
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 48 >> 2] | 0; //@line 21566
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 21567
 FUNCTION_TABLE_vii[$8 & 31]($5, $4); //@line 21568
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 632; //@line 21571
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 21572
  HEAP32[$9 >> 2] = $2; //@line 21573
  sp = STACKTOP; //@line 21574
  return;
 }
 ___async_unwind = 0; //@line 21577
 HEAP32[$ReallocAsyncCtx2 >> 2] = 632; //@line 21578
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 21579
 HEAP32[$9 >> 2] = $2; //@line 21580
 sp = STACKTOP; //@line 21581
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18212
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18214
 $3 = HEAP32[$2 >> 2] | 0; //@line 18215
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0; //@line 18218
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 18219
 $7 = FUNCTION_TABLE_ii[$6 & 15]($3) | 0; //@line 18220
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 639; //@line 18223
  $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 18224
  HEAP32[$8 >> 2] = $2; //@line 18225
  sp = STACKTOP; //@line 18226
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 18230
 ___async_unwind = 0; //@line 18231
 HEAP32[$ReallocAsyncCtx2 >> 2] = 639; //@line 18232
 $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 18233
 HEAP32[$8 >> 2] = $2; //@line 18234
 sp = STACKTOP; //@line 18235
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_23($0) {
 $0 = $0 | 0;
 var $12 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19810
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19812
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19816
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19818
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 19820
 __ZN4mbed6Ticker5setupEy($6, 1e5, 0); //@line 19821
 $9 = HEAP32[$2 >> 2] | 0; //@line 19822
 if (!$9) {
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 19828
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 19829
 FUNCTION_TABLE_vi[$12 & 1023]($8); //@line 19830
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 142; //@line 19833
  sp = STACKTOP; //@line 19834
  return;
 }
 ___async_unwind = 0; //@line 19837
 HEAP32[$ReallocAsyncCtx3 >> 2] = 142; //@line 19838
 sp = STACKTOP; //@line 19839
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_395($0) {
 $0 = $0 | 0;
 var $12 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 20140
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20142
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20146
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20148
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 20150
 __ZN4mbed6Ticker5setupEy($6, 2e5, 0); //@line 20151
 $9 = HEAP32[$2 >> 2] | 0; //@line 20152
 if (!$9) {
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 20158
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 20159
 FUNCTION_TABLE_vi[$12 & 1023]($8); //@line 20160
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 69; //@line 20163
  sp = STACKTOP; //@line 20164
  return;
 }
 ___async_unwind = 0; //@line 20167
 HEAP32[$ReallocAsyncCtx3 >> 2] = 69; //@line 20168
 sp = STACKTOP; //@line 20169
 return;
}
function _pad_676($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $14 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 12754
 STACKTOP = STACKTOP + 256 | 0; //@line 12755
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256); //@line 12755
 $5 = sp; //@line 12756
 if (($2 | 0) > ($3 | 0) & ($4 & 73728 | 0) == 0) {
  $9 = $2 - $3 | 0; //@line 12762
  _memset($5 | 0, $1 << 24 >> 24 | 0, ($9 >>> 0 < 256 ? $9 : 256) | 0) | 0; //@line 12766
  if ($9 >>> 0 > 255) {
   $14 = $2 - $3 | 0; //@line 12769
   $$011 = $9; //@line 12770
   do {
    _out_670($0, $5, 256); //@line 12772
    $$011 = $$011 + -256 | 0; //@line 12773
   } while ($$011 >>> 0 > 255);
   $$0$lcssa = $14 & 255; //@line 12782
  } else {
   $$0$lcssa = $9; //@line 12784
  }
  _out_670($0, $5, $$0$lcssa); //@line 12786
 }
 STACKTOP = sp; //@line 12788
 return;
}
function __ZN16SX1276_LoRaRadio7standbyEv__async_cb_72($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 23107
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23113
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23117
 _printf(10880, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 23118
 HEAP32[$6 >> 2] = 1; //@line 23119
 _printf(10975, $6) | 0; //@line 23120
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 23121
 _putchar(10) | 0; //@line 23122
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 56; //@line 23125
  $11 = $ReallocAsyncCtx + 4 | 0; //@line 23126
  HEAP32[$11 >> 2] = $10; //@line 23127
  sp = STACKTOP; //@line 23128
  return;
 }
 ___async_unwind = 0; //@line 23131
 HEAP32[$ReallocAsyncCtx >> 2] = 56; //@line 23132
 $11 = $ReallocAsyncCtx + 4 | 0; //@line 23133
 HEAP32[$11 >> 2] = $10; //@line 23134
 sp = STACKTOP; //@line 23135
 return;
}
function __ZN7LoRaMac16get_channel_planER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $2 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 17731
 STACKTOP = STACKTOP + 16 | 0; //@line 17732
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17732
 $2 = sp; //@line 17733
 $4 = $2 + 4 | 0; //@line 17735
 HEAP32[$4 >> 2] = 0; //@line 17737
 HEAP32[$4 + 4 >> 2] = 0; //@line 17740
 HEAP32[$2 >> 2] = 9; //@line 17741
 $10 = __ZN10LoRaMacMib11get_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($0 + 348 | 0, $2, $0 + 360 | 0) | 0; //@line 17744
 if ($10 | 0) {
  $$0 = $10; //@line 17747
  STACKTOP = sp; //@line 17748
  return $$0 | 0; //@line 17748
 }
 $$0 = __ZN18LoRaMacChannelPlan8get_planER16lora_channelplanPK25loramac_mib_req_confirm_t($0 + 352 | 0, $1, $2) | 0; //@line 17752
 STACKTOP = sp; //@line 17753
 return $$0 | 0; //@line 17753
}
function __ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i = 0, $$unpack3$i = 0, $12 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6449
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 6452
 $$unpack3$i = HEAP32[$0 + 4 >> 2] | 0; //@line 6454
 $5 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack3$i >> 1) | 0; //@line 6456
 if (!($$unpack3$i & 1)) {
  $12 = $$unpack$i; //@line 6461
 } else {
  $12 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 6466
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6468
 FUNCTION_TABLE_vii[$12 & 31]($5, $1); //@line 6469
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 222; //@line 6472
  sp = STACKTOP; //@line 6473
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6476
  return;
 }
}
function __ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i = 0, $$unpack3$i = 0, $12 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8239
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 8242
 $$unpack3$i = HEAP32[$0 + 4 >> 2] | 0; //@line 8244
 $5 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack3$i >> 1) | 0; //@line 8246
 if (!($$unpack3$i & 1)) {
  $12 = $$unpack$i; //@line 8251
 } else {
  $12 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 8256
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8258
 FUNCTION_TABLE_vii[$12 & 31]($5, $1); //@line 8259
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 283; //@line 8262
  sp = STACKTOP; //@line 8263
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8266
  return;
 }
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_157($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 30769
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30771
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30773
 $6 = HEAP32[$2 + 356 >> 2] | 0; //@line 30775
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 30777
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($6, $2 + 996 | 0, 1e3); //@line 30778
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 540; //@line 30781
  $8 = $ReallocAsyncCtx5 + 4 | 0; //@line 30782
  HEAP32[$8 >> 2] = $4; //@line 30783
  sp = STACKTOP; //@line 30784
  return;
 }
 ___async_unwind = 0; //@line 30787
 HEAP32[$ReallocAsyncCtx5 >> 2] = 540; //@line 30788
 $8 = $ReallocAsyncCtx5 + 4 | 0; //@line 30789
 HEAP32[$8 >> 2] = $4; //@line 30790
 sp = STACKTOP; //@line 30791
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_156($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 30741
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30743
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30745
 $6 = HEAP32[$2 + 356 >> 2] | 0; //@line 30747
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 30749
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($6, $2 + 996 | 0, 1e3); //@line 30750
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 542; //@line 30753
  $8 = $ReallocAsyncCtx4 + 4 | 0; //@line 30754
  HEAP32[$8 >> 2] = $4; //@line 30755
  sp = STACKTOP; //@line 30756
  return;
 }
 ___async_unwind = 0; //@line 30759
 HEAP32[$ReallocAsyncCtx4 >> 2] = 542; //@line 30760
 $8 = $ReallocAsyncCtx4 + 4 | 0; //@line 30761
 HEAP32[$8 >> 2] = $4; //@line 30762
 sp = STACKTOP; //@line 30763
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_214($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx29 = 0, sp = 0;
 sp = STACKTOP; //@line 33956
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33960
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33962
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33964
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[$6 >> 2] = 6; //@line 33967
  HEAP32[___async_retval >> 2] = $4; //@line 33969
  return;
 }
 $ReallocAsyncCtx29 = _emscripten_realloc_async_context(16) | 0; //@line 33972
 _mbed_assert_internal(12827, 11911, 1251); //@line 33973
 if (!___async) {
  ___async_unwind = 0; //@line 33976
 }
 HEAP32[$ReallocAsyncCtx29 >> 2] = 256; //@line 33978
 HEAP32[$ReallocAsyncCtx29 + 4 >> 2] = $4; //@line 33980
 HEAP32[$ReallocAsyncCtx29 + 8 >> 2] = $6; //@line 33982
 HEAP32[$ReallocAsyncCtx29 + 12 >> 2] = $8; //@line 33984
 sp = STACKTOP; //@line 33985
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i = 0, $$unpack3$i = 0, $12 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6498
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 6501
 $$unpack3$i = HEAP32[$0 + 4 >> 2] | 0; //@line 6503
 $5 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack3$i >> 1) | 0; //@line 6505
 if (!($$unpack3$i & 1)) {
  $12 = $$unpack$i; //@line 6510
 } else {
  $12 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 6515
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6517
 FUNCTION_TABLE_vii[$12 & 31]($5, $1); //@line 6518
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 223; //@line 6521
  sp = STACKTOP; //@line 6522
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6525
  return;
 }
}
function __ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i = 0, $$unpack3$i = 0, $12 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8905
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 8908
 $$unpack3$i = HEAP32[$0 + 4 >> 2] | 0; //@line 8910
 $5 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack3$i >> 1) | 0; //@line 8912
 if (!($$unpack3$i & 1)) {
  $12 = $$unpack$i; //@line 8917
 } else {
  $12 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 8922
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8924
 FUNCTION_TABLE_vii[$12 & 31]($5, $1); //@line 8925
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 294; //@line 8928
  sp = STACKTOP; //@line 8929
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8932
  return;
 }
}
function __ZN4mbed11InterruptInD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 24255
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24257
 $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 24259
 if (!$4) {
  __ZdlPv($2); //@line 24262
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 24267
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 24268
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 40 | 0); //@line 24269
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 152; //@line 24272
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 24273
  HEAP32[$9 >> 2] = $2; //@line 24274
  sp = STACKTOP; //@line 24275
  return;
 }
 ___async_unwind = 0; //@line 24278
 HEAP32[$ReallocAsyncCtx2 >> 2] = 152; //@line 24279
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 24280
 HEAP32[$9 >> 2] = $2; //@line 24281
 sp = STACKTOP; //@line 24282
 return;
}
function _mbedtls_ccm_setkey__async_cb_335($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6507
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6509
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6511
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6513
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 6515
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 6519
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 6522
 $9 = _mbedtls_cipher_setkey($2, $4, $6, 1) | 0; //@line 6523
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 656; //@line 6526
  sp = STACKTOP; //@line 6527
  return;
 }
 HEAP32[___async_retval >> 2] = $9; //@line 6531
 ___async_unwind = 0; //@line 6532
 HEAP32[$ReallocAsyncCtx >> 2] = 656; //@line 6533
 sp = STACKTOP; //@line 6534
 return;
}
function ___stdio_seek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 10285
 STACKTOP = STACKTOP + 32 | 0; //@line 10286
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10286
 $vararg_buffer = sp; //@line 10287
 $3 = sp + 20 | 0; //@line 10288
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 10292
 HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 10294
 HEAP32[$vararg_buffer + 8 >> 2] = $1; //@line 10296
 HEAP32[$vararg_buffer + 12 >> 2] = $3; //@line 10298
 HEAP32[$vararg_buffer + 16 >> 2] = $2; //@line 10300
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$3 >> 2] = -1; //@line 10305
  $10 = -1; //@line 10306
 } else {
  $10 = HEAP32[$3 >> 2] | 0; //@line 10309
 }
 STACKTOP = sp; //@line 10311
 return $10 | 0; //@line 10311
}
function _mbed_assert_internal($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 6123
 STACKTOP = STACKTOP + 16 | 0; //@line 6124
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6124
 $vararg_buffer = sp; //@line 6125
 HEAP32[$vararg_buffer >> 2] = $0; //@line 6126
 HEAP32[$vararg_buffer + 4 >> 2] = $1; //@line 6128
 HEAP32[$vararg_buffer + 8 >> 2] = $2; //@line 6130
 _mbed_error_printf(14577, $vararg_buffer); //@line 6131
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6132
 _mbed_die(); //@line 6133
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 700; //@line 6136
  sp = STACKTOP; //@line 6137
  STACKTOP = sp; //@line 6138
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6140
  STACKTOP = sp; //@line 6141
  return;
 }
}
function __ZN7LoRaPHY16verify_frequencyEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01113 = 0, $16 = 0, $3 = 0, $5 = 0, $7 = 0, label = 0;
 $3 = HEAP32[$0 + 72 >> 2] | 0; //@line 24825
 $5 = HEAP8[$0 + 76 >> 0] | 0; //@line 24827
 if (!($5 << 24 >> 24)) {
  $16 = 0; //@line 24830
  return $16 | 0; //@line 24831
 } else {
  $$01113 = 0; //@line 24833
 }
 while (1) {
  $7 = $$01113 & 255; //@line 24836
  if ((HEAP32[$3 + ($7 * 24 | 0) + 20 >> 2] | 0) >>> 0 >= $1 >>> 0) {
   if ((HEAP32[$3 + ($7 * 24 | 0) + 16 >> 2] | 0) >>> 0 <= $1 >>> 0) {
    $16 = 1; //@line 24845
    label = 5; //@line 24846
    break;
   }
  }
  $$01113 = $$01113 + 1 << 24 >> 24; //@line 24850
  if (($$01113 & 255) >= ($5 & 255)) {
   $16 = 0; //@line 24855
   label = 5; //@line 24856
   break;
  }
 }
 if ((label | 0) == 5) {
  return $16 | 0; //@line 24861
 }
 return 0; //@line 24863
}
function _printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14130
 STACKTOP = STACKTOP + 16 | 0; //@line 14131
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14131
 $1 = sp; //@line 14132
 HEAP32[$1 >> 2] = $varargs; //@line 14133
 $2 = HEAP32[2564] | 0; //@line 14134
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 14135
 $3 = _vfprintf($2, $0, $1) | 0; //@line 14136
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 743; //@line 14139
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 14141
  sp = STACKTOP; //@line 14142
  STACKTOP = sp; //@line 14143
  return 0; //@line 14143
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14145
  STACKTOP = sp; //@line 14146
  return $3 | 0; //@line 14146
 }
 return 0; //@line 14148
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20848
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20850
 $3 = HEAP32[$2 >> 2] | 0; //@line 20851
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0; //@line 20854
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 20855
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 20856
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 629; //@line 20859
  $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 20860
  HEAP32[$7 >> 2] = $2; //@line 20861
  sp = STACKTOP; //@line 20862
  return;
 }
 ___async_unwind = 0; //@line 20865
 HEAP32[$ReallocAsyncCtx2 >> 2] = 629; //@line 20866
 $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 20867
 HEAP32[$7 >> 2] = $2; //@line 20868
 sp = STACKTOP; //@line 20869
 return;
}
function __ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh__async_cb_492($0) {
 $0 = $0 | 0;
 var $10 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 35698
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 35704
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35706
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 35708
 _printf(10880, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 35711
 HEAP32[$8 >> 2] = $10; //@line 35713
 HEAP32[$8 + 4 >> 2] = $6 & 255; //@line 35715
 _printf(11134, $8) | 0; //@line 35716
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 35717
 _putchar(10) | 0; //@line 35718
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 83; //@line 35721
  sp = STACKTOP; //@line 35722
  return;
 }
 ___async_unwind = 0; //@line 35725
 HEAP32[$ReallocAsyncCtx >> 2] = 83; //@line 35726
 sp = STACKTOP; //@line 35727
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_206($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx33 = 0, sp = 0;
 sp = STACKTOP; //@line 33669
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33673
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[___async_retval >> 2] = -1011; //@line 33677
  return;
 }
 $ReallocAsyncCtx33 = _emscripten_realloc_async_context(8) | 0; //@line 33680
 _mbed_assert_internal(12827, 11911, 1141); //@line 33681
 if (___async) {
  HEAP32[$ReallocAsyncCtx33 >> 2] = 231; //@line 33684
  $6 = $ReallocAsyncCtx33 + 4 | 0; //@line 33685
  HEAP32[$6 >> 2] = $4; //@line 33686
  sp = STACKTOP; //@line 33687
  return;
 }
 ___async_unwind = 0; //@line 33690
 HEAP32[$ReallocAsyncCtx33 >> 2] = 231; //@line 33691
 $6 = $ReallocAsyncCtx33 + 4 | 0; //@line 33692
 HEAP32[$6 >> 2] = $4; //@line 33693
 sp = STACKTOP; //@line 33694
 return;
}
function _initialize__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18806
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18808
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18810
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18812
 $9 = HEAP32[(HEAP32[$4 >> 2] | 0) + 24 >> 2] | 0; //@line 18815
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 18816
 $10 = FUNCTION_TABLE_i[$9 & 7]() | 0; //@line 18817
 if (!___async) {
  HEAP32[___async_retval >> 2] = $10; //@line 18821
  ___async_unwind = 0; //@line 18822
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 684; //@line 18824
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 18826
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 18828
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 18830
 sp = STACKTOP; //@line 18831
 return;
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 21123
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21125
 $3 = HEAP32[$2 >> 2] | 0; //@line 21126
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0; //@line 21129
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 21130
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 21131
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 626; //@line 21134
  $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 21135
  HEAP32[$7 >> 2] = $2; //@line 21136
  sp = STACKTOP; //@line 21137
  return;
 }
 ___async_unwind = 0; //@line 21140
 HEAP32[$ReallocAsyncCtx2 >> 2] = 626; //@line 21141
 $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 21142
 HEAP32[$7 >> 2] = $2; //@line 21143
 sp = STACKTOP; //@line 21144
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_210($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx31 = 0, sp = 0;
 sp = STACKTOP; //@line 33803
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33807
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[___async_retval >> 2] = 0; //@line 33811
  return;
 }
 $ReallocAsyncCtx31 = _emscripten_realloc_async_context(8) | 0; //@line 33814
 _mbed_assert_internal(12827, 11911, 1223); //@line 33815
 if (___async) {
  HEAP32[$ReallocAsyncCtx31 >> 2] = 245; //@line 33818
  $6 = $ReallocAsyncCtx31 + 4 | 0; //@line 33819
  HEAP32[$6 >> 2] = $4; //@line 33820
  sp = STACKTOP; //@line 33821
  return;
 }
 ___async_unwind = 0; //@line 33824
 HEAP32[$ReallocAsyncCtx31 >> 2] = 245; //@line 33825
 $6 = $ReallocAsyncCtx31 + 4 | 0; //@line 33826
 HEAP32[$6 >> 2] = $4; //@line 33827
 sp = STACKTOP; //@line 33828
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_208($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx32 = 0, sp = 0;
 sp = STACKTOP; //@line 33736
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33740
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[___async_retval >> 2] = 0; //@line 33744
  return;
 }
 $ReallocAsyncCtx32 = _emscripten_realloc_async_context(8) | 0; //@line 33747
 _mbed_assert_internal(12827, 11911, 1186); //@line 33748
 if (___async) {
  HEAP32[$ReallocAsyncCtx32 >> 2] = 236; //@line 33751
  $6 = $ReallocAsyncCtx32 + 4 | 0; //@line 33752
  HEAP32[$6 >> 2] = $4; //@line 33753
  sp = STACKTOP; //@line 33754
  return;
 }
 ___async_unwind = 0; //@line 33757
 HEAP32[$ReallocAsyncCtx32 >> 2] = 236; //@line 33758
 $6 = $ReallocAsyncCtx32 + 4 | 0; //@line 33759
 HEAP32[$6 >> 2] = $4; //@line 33760
 sp = STACKTOP; //@line 33761
 return;
}
function _schedule_interrupt__async_cb_304($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 4809
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4811
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4813
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4815
 $9 = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0; //@line 4818
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(16) | 0; //@line 4819
 $10 = FUNCTION_TABLE_i[$9 & 7]() | 0; //@line 4820
 if (!___async) {
  HEAP32[___async_retval >> 2] = $10; //@line 4824
  ___async_unwind = 0; //@line 4825
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 694; //@line 4827
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $4; //@line 4829
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $6; //@line 4831
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $2; //@line 4833
 sp = STACKTOP; //@line 4834
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10919
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 10922
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 10924
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 10926
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 10931
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 10936
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10938
 FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 10939
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 363; //@line 10942
  sp = STACKTOP; //@line 10943
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10946
  return;
 }
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3074
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 3077
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 3079
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 3081
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 3086
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 3091
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3093
 FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 3094
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 134; //@line 3097
  sp = STACKTOP; //@line 3098
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3101
  return;
 }
}
function _mbedtls_cipher_info_from_values($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010 = 0, $$011 = 0, $3 = 0, $6 = 0, label = 0;
 $3 = HEAP32[2374] | 0; //@line 2131
 if (!$3) {
  $$010 = 0; //@line 2134
  return $$010 | 0; //@line 2135
 } else {
  $$011 = 9492; //@line 2137
  $6 = $3; //@line 2137
 }
 while (1) {
  if ((HEAP32[HEAP32[$6 + 28 >> 2] >> 2] | 0) == ($0 | 0)) {
   if ((HEAP32[$6 + 8 >> 2] | 0) == ($1 | 0)) {
    if ((HEAP32[$6 + 4 >> 2] | 0) == ($2 | 0)) {
     $$010 = $6; //@line 2153
     label = 6; //@line 2154
     break;
    }
   }
  }
  $6 = HEAP32[$$011 + 12 >> 2] | 0; //@line 2161
  if (!$6) {
   $$010 = 0; //@line 2164
   label = 6; //@line 2165
   break;
  } else {
   $$011 = $$011 + 8 | 0; //@line 2168
  }
 }
 if ((label | 0) == 6) {
  return $$010 | 0; //@line 2172
 }
 return 0; //@line 2174
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_435($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 28397
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28401
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28403
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28405
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28407
 $11 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 28409
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 28410
 FUNCTION_TABLE_vii[$11 & 31]($4, $6); //@line 28411
 if (!___async) {
  ___async_unwind = 0; //@line 28414
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 463; //@line 28416
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $8; //@line 28418
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $10; //@line 28420
 sp = STACKTOP; //@line 28421
 return;
}
function __ZN16SX1276_LoRaRadio18set_public_networkEb__async_cb_244($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 512
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 518
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 523
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 525
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 776 >> 0] = HEAP8[$0 + 8 >> 0] | 0; //@line 529
 _printf(10880, $6) | 0; //@line 530
 HEAP32[$12 >> 2] = $10 & 1; //@line 532
 _printf(11112, $12) | 0; //@line 533
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 534
 _putchar(10) | 0; //@line 535
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 85; //@line 538
  sp = STACKTOP; //@line 539
  return;
 }
 ___async_unwind = 0; //@line 542
 HEAP32[$ReallocAsyncCtx >> 2] = 85; //@line 543
 sp = STACKTOP; //@line 544
 return;
}
function _mbedtls_ccm_setkey__async_cb_336($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6540
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6542
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6544
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6546
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6548
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 6549
 $9 = _mbedtls_cipher_setup($2, $4) | 0; //@line 6550
 if (!___async) {
  HEAP32[___async_retval >> 2] = $9; //@line 6554
  ___async_unwind = 0; //@line 6555
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 655; //@line 6557
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 6559
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 6561
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $8; //@line 6563
 sp = STACKTOP; //@line 6564
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb($0) {
 $0 = $0 | 0;
 var $$054$ = 0, $13 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 35379
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 35381
 $$054$ = (HEAP32[___async_retval >> 2] | 0) == 0 ? HEAP32[$0 + 4 >> 2] | 0 : -1014; //@line 35387
 $13 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 35388
 HEAP8[(HEAPU16[$6 >> 1] | 0) + ($8 + 381) >> 0] = $13; //@line 35393
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 1 + ($8 + 381) >> 0] = $13 >>> 8; //@line 35400
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 2 + ($8 + 381) >> 0] = $13 >>> 16; //@line 35407
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 3 + ($8 + 381) >> 0] = $13 >>> 24; //@line 35414
 HEAP16[$6 >> 1] = (HEAPU16[$6 >> 1] | 0) + 4; //@line 35419
 HEAP32[___async_retval >> 2] = $$054$; //@line 35421
 return;
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 21018
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21020
 $4 = HEAP32[$2 + 356 >> 2] | 0; //@line 21022
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 21024
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1076 | 0); //@line 21025
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 414; //@line 21028
  $6 = $ReallocAsyncCtx2 + 4 | 0; //@line 21029
  HEAP32[$6 >> 2] = $2; //@line 21030
  sp = STACKTOP; //@line 21031
  return;
 }
 ___async_unwind = 0; //@line 21034
 HEAP32[$ReallocAsyncCtx2 >> 2] = 414; //@line 21035
 $6 = $ReallocAsyncCtx2 + 4 | 0; //@line 21036
 HEAP32[$6 >> 2] = $2; //@line 21037
 sp = STACKTOP; //@line 21038
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_274($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2519
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2521
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2523
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2525
 $9 = HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0; //@line 2528
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 2529
 FUNCTION_TABLE_vi[$9 & 1023]($2); //@line 2530
 if (!___async) {
  ___async_unwind = 0; //@line 2533
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 101; //@line 2535
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 2537
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 2539
 HEAP8[$ReallocAsyncCtx2 + 12 >> 0] = 0; //@line 2542
 sp = STACKTOP; //@line 2543
 return;
}
function __ZN7LoRaMacD2Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 10029
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10031
 __ZN12radio_eventsD2Ev($0 + 1212 | 0); //@line 10032
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 327; //@line 10035
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 10037
  sp = STACKTOP; //@line 10038
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10041
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 10043
 __ZN14lorawan_timersD2Ev($0 + 980 | 0); //@line 10044
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 328; //@line 10047
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 10049
  sp = STACKTOP; //@line 10050
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10053
  return;
 }
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $13 = 0, $4 = 0, $5 = 0;
 $4 = $1 + 16 | 0; //@line 14652
 $5 = HEAP32[$4 >> 2] | 0; //@line 14653
 do {
  if (!$5) {
   HEAP32[$4 >> 2] = $2; //@line 14657
   HEAP32[$1 + 24 >> 2] = $3; //@line 14659
   HEAP32[$1 + 36 >> 2] = 1; //@line 14661
  } else {
   if (($5 | 0) != ($2 | 0)) {
    $13 = $1 + 36 | 0; //@line 14665
    HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1; //@line 14668
    HEAP32[$1 + 24 >> 2] = 2; //@line 14670
    HEAP8[$1 + 54 >> 0] = 1; //@line 14672
    break;
   }
   $10 = $1 + 24 | 0; //@line 14675
   if ((HEAP32[$10 >> 2] | 0) == 2) {
    HEAP32[$10 >> 2] = $3; //@line 14679
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8980
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 8982
 $3 = __ZN7LoRaMac22get_phy_event_handlersEv($0 + 4 | 0) | 0; //@line 8983
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 296; //@line 8986
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 8988
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 8990
  sp = STACKTOP; //@line 8991
  return 0; //@line 8992
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8994
  $6 = $0 + 1928 | 0; //@line 8995
  HEAP32[$6 >> 2] = $3; //@line 8996
  __ZN7LoRaPHY18set_radio_instanceER9LoRaRadio($0 + 1336 | 0, $1); //@line 8998
  return HEAP32[$6 >> 2] | 0; //@line 9000
 }
 return 0; //@line 9002
}
function __ZN4mbed5Timer5startEv($0) {
 $0 = $0 | 0;
 var $13 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4017
 if (HEAP32[$0 >> 2] | 0) {
  return;
 }
 if (HEAP8[$0 + 28 >> 0] | 0) {}
 $7 = HEAP32[$0 + 24 >> 2] | 0; //@line 4029
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 4030
 $8 = _ticker_read_us($7) | 0; //@line 4031
 $9 = tempRet0; //@line 4032
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 162; //@line 4035
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4037
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 4039
  sp = STACKTOP; //@line 4040
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4043
 $13 = $0 + 8 | 0; //@line 4045
 HEAP32[$13 >> 2] = $8; //@line 4047
 HEAP32[$13 + 4 >> 2] = $9; //@line 4050
 HEAP32[$0 >> 2] = 1; //@line 4051
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_339($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6648
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6652
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 6653
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 6655
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($5, $4 + 1076 | 0); //@line 6656
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 528; //@line 6659
  $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 6660
  HEAP32[$7 >> 2] = $4; //@line 6661
  sp = STACKTOP; //@line 6662
  return;
 }
 ___async_unwind = 0; //@line 6665
 HEAP32[$ReallocAsyncCtx2 >> 2] = 528; //@line 6666
 $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 6667
 HEAP32[$7 >> 2] = $4; //@line 6668
 sp = STACKTOP; //@line 6669
 return;
}
function __ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$09 = 0, $$1 = 0, $11 = 0, $19 = 0, $6 = 0, $9 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23487
 $$ = HEAP8[___async_retval >> 0] & 1 ? 3 : 2; //@line 23491
 $9 = HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 112 >> 2] | 0; //@line 23493
 $11 = HEAPU8[HEAP32[$0 + 8 >> 2] >> 0] | 0; //@line 23495
 $$1 = (HEAP32[$9 + ($11 * 12 | 0) >> 2] | 0) == 0 ? $$ & 1 : $$; //@line 23500
 if ($$1 << 24 >> 24 != 3) {
  $$09 = $$1; //@line 23503
  $19 = ___async_retval; //@line 23504
  HEAP8[$19 >> 0] = $$09; //@line 23505
  return;
 }
 HEAP32[$9 + ($11 * 12 | 0) + 4 >> 2] = HEAP32[$6 >> 2]; //@line 23510
 $$09 = 3; //@line 23511
 $19 = ___async_retval; //@line 23512
 HEAP8[$19 >> 0] = $$09; //@line 23513
 return;
}
function _equeue_post($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4466
 $4 = _equeue_tick() | 0; //@line 4468
 HEAP32[$2 + -4 >> 2] = $1; //@line 4470
 $6 = $2 + -16 | 0; //@line 4471
 HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + $4; //@line 4474
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4475
 $9 = _equeue_enqueue($0, $2 + -36 | 0, $4) | 0; //@line 4476
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 168; //@line 4479
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4481
  sp = STACKTOP; //@line 4482
  return 0; //@line 4483
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4485
  _equeue_sema_signal($0 + 48 | 0); //@line 4487
  return $9 | 0; //@line 4488
 }
 return 0; //@line 4490
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_420($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 22676
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22680
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 22682
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 22684
 $9 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 22686
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 22687
 FUNCTION_TABLE_viii[$9 & 7]($4, $6, $8); //@line 22688
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 275; //@line 22691
  sp = STACKTOP; //@line 22692
  return;
 }
 ___async_unwind = 0; //@line 22695
 HEAP32[$ReallocAsyncCtx >> 2] = 275; //@line 22696
 sp = STACKTOP; //@line 22697
 return;
}
function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = HEAP8[$0 >> 0] | 0; //@line 10392
 $3 = HEAP8[$1 >> 0] | 0; //@line 10393
 if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24) {
  $$lcssa = $3; //@line 10398
  $$lcssa8 = $2; //@line 10398
 } else {
  $$011 = $1; //@line 10400
  $$0710 = $0; //@line 10400
  do {
   $$0710 = $$0710 + 1 | 0; //@line 10402
   $$011 = $$011 + 1 | 0; //@line 10403
   $8 = HEAP8[$$0710 >> 0] | 0; //@line 10404
   $9 = HEAP8[$$011 >> 0] | 0; //@line 10405
  } while (!($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 != $9 << 24 >> 24));
  $$lcssa = $9; //@line 10410
  $$lcssa8 = $8; //@line 10410
 }
 return ($$lcssa8 & 255) - ($$lcssa & 255) | 0; //@line 10420
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 15202
 STACKTOP = STACKTOP + 16 | 0; //@line 15203
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15203
 $vararg_buffer = sp; //@line 15204
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 15205
 FUNCTION_TABLE_v[$0 & 7](); //@line 15206
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 760; //@line 15209
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 15211
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 15213
  sp = STACKTOP; //@line 15214
  STACKTOP = sp; //@line 15215
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15217
  _abort_message(18070, $vararg_buffer); //@line 15218
 }
}
function _serial_putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6665
 $2 = HEAP32[2564] | 0; //@line 6666
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6667
 _putc($1, $2) | 0; //@line 6668
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 720; //@line 6671
  HEAP32[$AsyncCtx3 + 4 >> 2] = $2; //@line 6673
  sp = STACKTOP; //@line 6674
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6677
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6678
 _fflush($2) | 0; //@line 6679
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 721; //@line 6682
  sp = STACKTOP; //@line 6683
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6686
  return;
 }
}
function ___stdout_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 10344
 STACKTOP = STACKTOP + 32 | 0; //@line 10345
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10345
 $vararg_buffer = sp; //@line 10346
 HEAP32[$0 + 36 >> 2] = 9; //@line 10349
 if (!(HEAP32[$0 >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 10357
  HEAP32[$vararg_buffer + 4 >> 2] = 21523; //@line 10359
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 16; //@line 10361
  if (___syscall54(54, $vararg_buffer | 0) | 0) {
   HEAP8[$0 + 75 >> 0] = -1; //@line 10366
  }
 }
 $14 = ___stdio_write($0, $1, $2) | 0; //@line 10369
 STACKTOP = sp; //@line 10370
 return $14 | 0; //@line 10370
}
function __ZN7LoRaMac10disconnectEv__async_cb_338($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6624
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6626
 $3 = HEAP32[$2 >> 2] | 0; //@line 6627
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 6628
 __ZN7LoRaPHY18put_radio_to_sleepEv($3); //@line 6629
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 529; //@line 6632
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 6633
  HEAP32[$4 >> 2] = $2; //@line 6634
  sp = STACKTOP; //@line 6635
  return;
 }
 ___async_unwind = 0; //@line 6638
 HEAP32[$ReallocAsyncCtx >> 2] = 529; //@line 6639
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 6640
 HEAP32[$4 >> 2] = $2; //@line 6641
 sp = STACKTOP; //@line 6642
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_190($0) {
 $0 = $0 | 0;
 var $10 = 0, $6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 32706
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32712
 if (!(HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 11 >> 0] | 0)) {
  return;
 }
 $10 = HEAP8[HEAP32[$0 + 8 >> 2] >> 0] | 0; //@line 32719
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 32720
 __ZN12LoRaWANStack9handle_txEhPKhth($6, $10, 0, 0, 2) | 0; //@line 32721
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 207; //@line 32724
  sp = STACKTOP; //@line 32725
  return;
 }
 ___async_unwind = 0; //@line 32728
 HEAP32[$ReallocAsyncCtx7 >> 2] = 207; //@line 32729
 sp = STACKTOP; //@line 32730
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_353($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 17201
 $4 = HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 784 >> 2] | 0; //@line 17205
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 60 >> 2] | 0; //@line 17211
 if (!$7) {
  return;
 }
 $10 = HEAP32[$7 >> 2] | 0; //@line 17217
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 17218
 FUNCTION_TABLE_vi[$10 & 1023]($4 + 48 | 0); //@line 17219
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 132; //@line 17222
  sp = STACKTOP; //@line 17223
  return;
 }
 ___async_unwind = 0; //@line 17226
 HEAP32[$ReallocAsyncCtx4 >> 2] = 132; //@line 17227
 sp = STACKTOP; //@line 17228
 return;
}
function _mbed_die__async_cb_264($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 1514
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1516
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 1518
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 1519
 _wait_ms(150); //@line 1520
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 703; //@line 1523
  $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 1524
  HEAP32[$4 >> 2] = $2; //@line 1525
  sp = STACKTOP; //@line 1526
  return;
 }
 ___async_unwind = 0; //@line 1529
 HEAP32[$ReallocAsyncCtx14 >> 2] = 703; //@line 1530
 $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 1531
 HEAP32[$4 >> 2] = $2; //@line 1532
 sp = STACKTOP; //@line 1533
 return;
}
function _mbed_die__async_cb_263($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 1489
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1491
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 1493
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 1494
 _wait_ms(150); //@line 1495
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 704; //@line 1498
  $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 1499
  HEAP32[$4 >> 2] = $2; //@line 1500
  sp = STACKTOP; //@line 1501
  return;
 }
 ___async_unwind = 0; //@line 1504
 HEAP32[$ReallocAsyncCtx13 >> 2] = 704; //@line 1505
 $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 1506
 HEAP32[$4 >> 2] = $2; //@line 1507
 sp = STACKTOP; //@line 1508
 return;
}
function _mbed_die__async_cb_262($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 1464
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1466
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 1468
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 1469
 _wait_ms(150); //@line 1470
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 705; //@line 1473
  $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 1474
  HEAP32[$4 >> 2] = $2; //@line 1475
  sp = STACKTOP; //@line 1476
  return;
 }
 ___async_unwind = 0; //@line 1479
 HEAP32[$ReallocAsyncCtx12 >> 2] = 705; //@line 1480
 $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 1481
 HEAP32[$4 >> 2] = $2; //@line 1482
 sp = STACKTOP; //@line 1483
 return;
}
function _mbed_die__async_cb_261($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 1439
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1441
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 1443
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 1444
 _wait_ms(150); //@line 1445
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 706; //@line 1448
  $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 1449
  HEAP32[$4 >> 2] = $2; //@line 1450
  sp = STACKTOP; //@line 1451
  return;
 }
 ___async_unwind = 0; //@line 1454
 HEAP32[$ReallocAsyncCtx11 >> 2] = 706; //@line 1455
 $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 1456
 HEAP32[$4 >> 2] = $2; //@line 1457
 sp = STACKTOP; //@line 1458
 return;
}
function _mbed_die__async_cb_260($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 1414
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1416
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 1418
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 1419
 _wait_ms(150); //@line 1420
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 707; //@line 1423
  $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 1424
  HEAP32[$4 >> 2] = $2; //@line 1425
  sp = STACKTOP; //@line 1426
  return;
 }
 ___async_unwind = 0; //@line 1429
 HEAP32[$ReallocAsyncCtx10 >> 2] = 707; //@line 1430
 $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 1431
 HEAP32[$4 >> 2] = $2; //@line 1432
 sp = STACKTOP; //@line 1433
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_419($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 22645
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22649
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22651
 $7 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 22653
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 22654
 FUNCTION_TABLE_vii[$7 & 31]($4, $6); //@line 22655
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 278; //@line 22658
  sp = STACKTOP; //@line 22659
  return;
 }
 ___async_unwind = 0; //@line 22662
 HEAP32[$ReallocAsyncCtx >> 2] = 278; //@line 22663
 sp = STACKTOP; //@line 22664
 return;
}
function _mbed_die__async_cb_259($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 1389
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1391
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 1393
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 1394
 _wait_ms(150); //@line 1395
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 708; //@line 1398
  $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 1399
  HEAP32[$4 >> 2] = $2; //@line 1400
  sp = STACKTOP; //@line 1401
  return;
 }
 ___async_unwind = 0; //@line 1404
 HEAP32[$ReallocAsyncCtx9 >> 2] = 708; //@line 1405
 $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 1406
 HEAP32[$4 >> 2] = $2; //@line 1407
 sp = STACKTOP; //@line 1408
 return;
}
function _mbed_die__async_cb_258($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 1364
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1366
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 1368
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 1369
 _wait_ms(400); //@line 1370
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 709; //@line 1373
  $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 1374
  HEAP32[$4 >> 2] = $2; //@line 1375
  sp = STACKTOP; //@line 1376
  return;
 }
 ___async_unwind = 0; //@line 1379
 HEAP32[$ReallocAsyncCtx8 >> 2] = 709; //@line 1380
 $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 1381
 HEAP32[$4 >> 2] = $2; //@line 1382
 sp = STACKTOP; //@line 1383
 return;
}
function _mbed_die__async_cb_257($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 1339
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1341
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 1343
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 1344
 _wait_ms(400); //@line 1345
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 710; //@line 1348
  $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 1349
  HEAP32[$4 >> 2] = $2; //@line 1350
  sp = STACKTOP; //@line 1351
  return;
 }
 ___async_unwind = 0; //@line 1354
 HEAP32[$ReallocAsyncCtx7 >> 2] = 710; //@line 1355
 $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 1356
 HEAP32[$4 >> 2] = $2; //@line 1357
 sp = STACKTOP; //@line 1358
 return;
}
function _mbed_die__async_cb_256($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 1314
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1316
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 1318
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 1319
 _wait_ms(400); //@line 1320
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 711; //@line 1323
  $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 1324
  HEAP32[$4 >> 2] = $2; //@line 1325
  sp = STACKTOP; //@line 1326
  return;
 }
 ___async_unwind = 0; //@line 1329
 HEAP32[$ReallocAsyncCtx6 >> 2] = 711; //@line 1330
 $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 1331
 HEAP32[$4 >> 2] = $2; //@line 1332
 sp = STACKTOP; //@line 1333
 return;
}
function _mbed_die__async_cb_255($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 1289
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1291
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 1293
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 1294
 _wait_ms(400); //@line 1295
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 712; //@line 1298
  $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 1299
  HEAP32[$4 >> 2] = $2; //@line 1300
  sp = STACKTOP; //@line 1301
  return;
 }
 ___async_unwind = 0; //@line 1304
 HEAP32[$ReallocAsyncCtx5 >> 2] = 712; //@line 1305
 $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 1306
 HEAP32[$4 >> 2] = $2; //@line 1307
 sp = STACKTOP; //@line 1308
 return;
}
function _mbed_die__async_cb_254($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 1264
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1266
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 1268
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 1269
 _wait_ms(400); //@line 1270
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 713; //@line 1273
  $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 1274
  HEAP32[$4 >> 2] = $2; //@line 1275
  sp = STACKTOP; //@line 1276
  return;
 }
 ___async_unwind = 0; //@line 1279
 HEAP32[$ReallocAsyncCtx4 >> 2] = 713; //@line 1280
 $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 1281
 HEAP32[$4 >> 2] = $2; //@line 1282
 sp = STACKTOP; //@line 1283
 return;
}
function _mbed_die__async_cb_253($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 1239
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1241
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 1243
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 1244
 _wait_ms(400); //@line 1245
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 714; //@line 1248
  $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 1249
  HEAP32[$4 >> 2] = $2; //@line 1250
  sp = STACKTOP; //@line 1251
  return;
 }
 ___async_unwind = 0; //@line 1254
 HEAP32[$ReallocAsyncCtx3 >> 2] = 714; //@line 1255
 $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 1256
 HEAP32[$4 >> 2] = $2; //@line 1257
 sp = STACKTOP; //@line 1258
 return;
}
function _mbed_die__async_cb_252($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 1214
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1216
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 1218
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 1219
 _wait_ms(400); //@line 1220
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 715; //@line 1223
  $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 1224
  HEAP32[$4 >> 2] = $2; //@line 1225
  sp = STACKTOP; //@line 1226
  return;
 }
 ___async_unwind = 0; //@line 1229
 HEAP32[$ReallocAsyncCtx2 >> 2] = 715; //@line 1230
 $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 1231
 HEAP32[$4 >> 2] = $2; //@line 1232
 sp = STACKTOP; //@line 1233
 return;
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 33193
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33195
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33197
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33199
 $8 = HEAP32[HEAP32[$2 >> 2] >> 2] | 0; //@line 33201
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 33202
 FUNCTION_TABLE_vii[$8 & 31]($2, $4); //@line 33203
 if (!___async) {
  ___async_unwind = 0; //@line 33206
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 175; //@line 33208
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $6; //@line 33210
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $2; //@line 33212
 sp = STACKTOP; //@line 33213
 return;
}
function __ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_34($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20718
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20722
 $5 = $4 + 944 | 0; //@line 20723
 HEAP8[$5 >> 0] = HEAP8[$5 >> 0] | 34; //@line 20726
 $9 = HEAP32[$4 + 356 >> 2] | 0; //@line 20728
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 20730
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($9, $4 + 996 | 0, 1); //@line 20731
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 412; //@line 20734
  sp = STACKTOP; //@line 20735
  return;
 }
 ___async_unwind = 0; //@line 20738
 HEAP32[$ReallocAsyncCtx2 >> 2] = 412; //@line 20739
 sp = STACKTOP; //@line 20740
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_374($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $7 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 18626
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18628
 $3 = $2 + 944 | 0; //@line 18629
 HEAP8[$3 >> 0] = HEAP8[$3 >> 0] | 32; //@line 18632
 $7 = HEAP32[$2 + 356 >> 2] | 0; //@line 18634
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 18636
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($7, $2 + 996 | 0, 1); //@line 18637
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 433; //@line 18640
  sp = STACKTOP; //@line 18641
  return;
 }
 ___async_unwind = 0; //@line 18644
 HEAP32[$ReallocAsyncCtx3 >> 2] = 433; //@line 18645
 sp = STACKTOP; //@line 18646
 return;
}
function _mbed_die__async_cb_251($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1189
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1191
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 1193
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 1194
 _wait_ms(400); //@line 1195
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 716; //@line 1198
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 1199
  HEAP32[$4 >> 2] = $2; //@line 1200
  sp = STACKTOP; //@line 1201
  return;
 }
 ___async_unwind = 0; //@line 1204
 HEAP32[$ReallocAsyncCtx >> 2] = 716; //@line 1205
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 1206
 HEAP32[$4 >> 2] = $2; //@line 1207
 sp = STACKTOP; //@line 1208
 return;
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22452
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22454
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[___async_retval >> 2] = -1003; //@line 22460
  return;
 }
 $4 = HEAP32[$2 >> 2] | 0; //@line 22463
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 22464
 __ZN7LoRaPHY18put_radio_to_sleepEv($4); //@line 22465
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 575; //@line 22468
  sp = STACKTOP; //@line 22469
  return;
 }
 ___async_unwind = 0; //@line 22472
 HEAP32[$ReallocAsyncCtx2 >> 2] = 575; //@line 22473
 sp = STACKTOP; //@line 22474
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_117($0) {
 $0 = $0 | 0;
 var $6 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 25227
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25233
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  return;
 }
 _printf(11863, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 25242
 _printf(12009, $6) | 0; //@line 25243
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 25244
 _putchar(10) | 0; //@line 25245
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 211; //@line 25248
  sp = STACKTOP; //@line 25249
  return;
 }
 ___async_unwind = 0; //@line 25252
 HEAP32[$ReallocAsyncCtx6 >> 2] = 211; //@line 25253
 sp = STACKTOP; //@line 25254
 return;
}
function __ZN4mbed10TimerEventC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4143
 HEAP32[$0 >> 2] = 704; //@line 4144
 $1 = $0 + 8 | 0; //@line 4145
 HEAP32[$1 >> 2] = 0; //@line 4146
 HEAP32[$1 + 4 >> 2] = 0; //@line 4146
 HEAP32[$1 + 8 >> 2] = 0; //@line 4146
 HEAP32[$1 + 12 >> 2] = 0; //@line 4146
 $2 = _get_us_ticker_data() | 0; //@line 4147
 HEAP32[$0 + 24 >> 2] = $2; //@line 4149
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4150
 _ticker_set_handler($2, 37); //@line 4151
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 165; //@line 4154
  sp = STACKTOP; //@line 4155
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4158
  return;
 }
}
function __ZN7LoRaMac10disconnectEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $9 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6599
 HEAP8[$2 + 372 >> 0] = 0; //@line 6601
 HEAP8[$2 + 377 >> 0] = 0; //@line 6603
 HEAP8[$2 + 371 >> 0] = 1; //@line 6605
 HEAP8[$2 + 373 >> 0] = 0; //@line 6607
 HEAP8[$2 + 374 >> 0] = 0; //@line 6609
 HEAP8[$2 + 944 >> 0] = 0; //@line 6611
 $9 = $2 + 968 | 0; //@line 6612
 HEAP32[$9 >> 2] = 0; //@line 6613
 $10 = $2 + 4 | 0; //@line 6614
 __ZN14LoRaMacCommand20clear_command_bufferEv($10); //@line 6615
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($10); //@line 6616
 __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($10); //@line 6617
 HEAP32[$9 >> 2] = 0; //@line 6618
 return;
}
function __ZN7LoRaMacD2Ev__async_cb_487($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 35135
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35137
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 35139
 __ZN14lorawan_timersD2Ev($2 + 980 | 0); //@line 35140
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 328; //@line 35143
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 35144
  HEAP32[$4 >> 2] = $2; //@line 35145
  sp = STACKTOP; //@line 35146
  return;
 }
 ___async_unwind = 0; //@line 35149
 HEAP32[$ReallocAsyncCtx >> 2] = 328; //@line 35150
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 35151
 HEAP32[$4 >> 2] = $2; //@line 35152
 sp = STACKTOP; //@line 35153
 return;
}
function __ZN16SX1276_LoRaRadio11tx_done_irqEv($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3326
 __ZN4mbed6Ticker6detachEv($0 + 1240 | 0); //@line 3328
 HEAP8[$0 + 688 >> 0] = 0; //@line 3330
 $4 = HEAP32[$0 + 784 >> 2] | 0; //@line 3332
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 12 >> 2] | 0; //@line 3338
 if (!$7) {
  return;
 }
 $9 = HEAP32[$7 >> 2] | 0; //@line 3343
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3344
 FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 3345
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 143; //@line 3348
  sp = STACKTOP; //@line 3349
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3352
 return;
}
function __ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb_197($0) {
 $0 = $0 | 0;
 var $$0 = 0, $13 = 0, $15 = 0, $8 = 0, $AsyncRetVal = 0;
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33166
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 33170
 if (!$AsyncRetVal) {
  $13 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 33173
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv(HEAP32[$0 + 12 >> 2] | 0) | 0) >> 2] = $13; //@line 33175
  $15 = $8 + 944 | 0; //@line 33176
  HEAP8[$15 >> 0] = HEAP8[$15 >> 0] | 1; //@line 33179
  $$0 = 0; //@line 33180
 } else {
  HEAP8[$8 + 373 >> 0] = 0; //@line 33183
  $$0 = $AsyncRetVal; //@line 33184
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 33187
 return;
}
function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $14 = 0, $15 = 0, $8 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$05$lcssa = $2; //@line 12615
 } else {
  $$056 = $2; //@line 12617
  $15 = $1; //@line 12617
  $8 = $0; //@line 12617
  while (1) {
   $14 = $$056 + -1 | 0; //@line 12625
   HEAP8[$14 >> 0] = HEAPU8[15733 + ($8 & 15) >> 0] | 0 | $3; //@line 12626
   $8 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0; //@line 12627
   $15 = tempRet0; //@line 12628
   if (($8 | 0) == 0 & ($15 | 0) == 0) {
    $$05$lcssa = $14; //@line 12633
    break;
   } else {
    $$056 = $14; //@line 12636
   }
  }
 }
 return $$05$lcssa | 0; //@line 12640
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_434($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 28372
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28376
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28378
 $7 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 28380
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 28381
 FUNCTION_TABLE_vii[$7 & 31]($4, $6); //@line 28382
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 465; //@line 28385
  sp = STACKTOP; //@line 28386
  return;
 }
 ___async_unwind = 0; //@line 28389
 HEAP32[$ReallocAsyncCtx5 >> 2] = 465; //@line 28390
 sp = STACKTOP; //@line 28391
 return;
}
function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0; //@line 437
 newDynamicTop = oldDynamicTop + increment | 0; //@line 438
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory() | 0; //@line 442
  ___setErrNo(12); //@line 443
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop; //@line 447
 if ((newDynamicTop | 0) > (getTotalMemory() | 0)) {
  if (!(enlargeMemory() | 0)) {
   HEAP32[DYNAMICTOP_PTR >> 2] = oldDynamicTop; //@line 451
   ___setErrNo(12); //@line 452
   return -1;
  }
 }
 return oldDynamicTop | 0; //@line 456
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_158($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$pre = 0, $13 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30803
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30805
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30807
 if (!$AsyncRetVal) {
  $$1 = 0; //@line 30810
  $13 = ___async_retval; //@line 30811
  HEAP32[$13 >> 2] = $$1; //@line 30812
  return;
 }
 $$pre = HEAP8[$6 >> 0] | 0; //@line 30815
 HEAP8[$8 + 373 >> 0] = 0; //@line 30817
 HEAP8[$6 >> 0] = $$pre & -9; //@line 30819
 $$1 = $AsyncRetVal; //@line 30820
 $13 = ___async_retval; //@line 30821
 HEAP32[$13 >> 2] = $$1; //@line 30822
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_342($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 6723
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6725
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6727
 $5 = HEAP32[$2 >> 2] | 0; //@line 6728
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 6730
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($5, $4 + 1016 | 0); //@line 6731
 if (!___async) {
  ___async_unwind = 0; //@line 6734
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 525; //@line 6736
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 6738
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 6740
 sp = STACKTOP; //@line 6741
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_341($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 6699
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6701
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6703
 $5 = HEAP32[$2 >> 2] | 0; //@line 6704
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 6706
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($5, $4 + 1036 | 0); //@line 6707
 if (!___async) {
  ___async_unwind = 0; //@line 6710
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 526; //@line 6712
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 6714
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $4; //@line 6716
 sp = STACKTOP; //@line 6717
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_340($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6675
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6677
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6679
 $5 = HEAP32[$2 >> 2] | 0; //@line 6680
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 6682
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($5, $4 + 1056 | 0); //@line 6683
 if (!___async) {
  ___async_unwind = 0; //@line 6686
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 527; //@line 6688
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 6690
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 6692
 sp = STACKTOP; //@line 6693
 return;
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_463($0) {
 $0 = $0 | 0;
 var $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 32405
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32411
 _printf(10880, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 32414
 HEAP32[$6 >> 2] = 3; //@line 32415
 _printf(10975, $6) | 0; //@line 32416
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 32417
 _putchar(10) | 0; //@line 32418
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 108; //@line 32421
  sp = STACKTOP; //@line 32422
  return;
 }
 ___async_unwind = 0; //@line 32425
 HEAP32[$ReallocAsyncCtx3 >> 2] = 108; //@line 32426
 sp = STACKTOP; //@line 32427
 return;
}
function _mbedtls_gcm_free($0) {
 $0 = $0 | 0;
 var $$034$i = 0, $$05$i = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5047
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5048
 _mbedtls_cipher_free($0); //@line 5049
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 681; //@line 5052
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5054
  sp = STACKTOP; //@line 5055
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5058
 $$034$i = 400; //@line 5059
 $$05$i = $0; //@line 5059
 while (1) {
  $$034$i = $$034$i + -1 | 0; //@line 5061
  HEAP8[$$05$i >> 0] = 0; //@line 5063
  if (!$$034$i) {
   break;
  } else {
   $$05$i = $$05$i + 1 | 0; //@line 5068
  }
 }
 return;
}
function __ZSt9terminatev() {
 var $0 = 0, $16 = 0, $17 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 15167
 $0 = ___cxa_get_globals_fast() | 0; //@line 15168
 if ($0 | 0) {
  $2 = HEAP32[$0 >> 2] | 0; //@line 15171
  if ($2 | 0) {
   $5 = $2 + 48 | 0; //@line 15175
   if ((HEAP32[$5 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$5 + 4 >> 2] | 0) == 1129074247 : 0) {
    $16 = HEAP32[$2 + 12 >> 2] | 0; //@line 15187
    _emscripten_alloc_async_context(4, sp) | 0; //@line 15188
    __ZSt11__terminatePFvvE($16); //@line 15189
   }
  }
 }
 $17 = __ZSt13get_terminatev() | 0; //@line 15194
 _emscripten_alloc_async_context(4, sp) | 0; //@line 15195
 __ZSt11__terminatePFvvE($17); //@line 15196
}
function __GLOBAL__sub_I_main_cpp__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 17893
 __ZN5Sht31C2E7PinNameS0_(23184, 10, 11); //@line 17894
 __ZN4mbed11InterruptInC2E7PinName(22208, 1337); //@line 17895
 __ZN6events10EventQueueC2EjPh(22280, 1664, 0); //@line 17896
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 17897
 __ZN16LoRaWANInterfaceC2ER9LoRaRadio(22480, 18232); //@line 17898
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 731; //@line 17901
  sp = STACKTOP; //@line 17902
  return;
 }
 ___async_unwind = 0; //@line 17905
 HEAP32[$ReallocAsyncCtx2 >> 2] = 731; //@line 17906
 sp = STACKTOP; //@line 17907
 return;
}
function __ZN14lorawan_timersD2Ev__async_cb_457($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 32147
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32149
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 32151
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 32158
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 32159
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 16 | 0); //@line 32160
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 340; //@line 32163
  sp = STACKTOP; //@line 32164
  return;
 }
 ___async_unwind = 0; //@line 32167
 HEAP32[$ReallocAsyncCtx5 >> 2] = 340; //@line 32168
 sp = STACKTOP; //@line 32169
 return;
}
function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $3 = 0, $7 = 0;
 $1 = $0 + 74 | 0; //@line 10610
 $3 = HEAP8[$1 >> 0] | 0; //@line 10612
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 10616
 $7 = HEAP32[$0 >> 2] | 0; //@line 10617
 if (!($7 & 8)) {
  HEAP32[$0 + 8 >> 2] = 0; //@line 10622
  HEAP32[$0 + 4 >> 2] = 0; //@line 10624
  $14 = HEAP32[$0 + 44 >> 2] | 0; //@line 10626
  HEAP32[$0 + 28 >> 2] = $14; //@line 10628
  HEAP32[$0 + 20 >> 2] = $14; //@line 10630
  HEAP32[$0 + 16 >> 2] = $14 + (HEAP32[$0 + 48 >> 2] | 0); //@line 10636
  $$0 = 0; //@line 10637
 } else {
  HEAP32[$0 >> 2] = $7 | 32; //@line 10640
  $$0 = -1; //@line 10641
 }
 return $$0 | 0; //@line 10643
}
function __ZN4mbed11InterruptInD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 24221
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24223
 $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 24225
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 24232
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 24233
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 40 | 0); //@line 24234
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 150; //@line 24237
  sp = STACKTOP; //@line 24238
  return;
 }
 ___async_unwind = 0; //@line 24241
 HEAP32[$ReallocAsyncCtx2 >> 2] = 150; //@line 24242
 sp = STACKTOP; //@line 24243
 return;
}
function __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 26399
 $2 = HEAP32[$0 >> 2] | 0; //@line 26400
 $3 = $1 + 16 | 0; //@line 26401
 $4 = HEAP32[$3 >> 2] | 0; //@line 26402
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 26403
 __ZN6events10EventQueue6cancelEi($2, $4); //@line 26404
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 653; //@line 26407
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 26409
  sp = STACKTOP; //@line 26410
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 26413
  HEAP32[$3 >> 2] = 0; //@line 26414
  return;
 }
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_290($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 3788
 $4 = HEAP8[$0 + 8 >> 0] & 1; //@line 3793
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3795
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 3796
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 3797
 __ZN7LoRaPHY15setup_rx_windowEbj($7, $4, $6); //@line 3798
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 502; //@line 3801
  sp = STACKTOP; //@line 3802
  return;
 }
 ___async_unwind = 0; //@line 3805
 HEAP32[$ReallocAsyncCtx4 >> 2] = 502; //@line 3806
 sp = STACKTOP; //@line 3807
 return;
}
function __ZN7LoRaMac16add_channel_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17680
 if ((HEAP32[$0 + 968 >> 2] & 33 | 0) == 1) {
  $$0 = -1e3; //@line 17686
  return $$0 | 0; //@line 17687
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17690
 $7 = __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan($0 + 352 | 0, $1) | 0; //@line 17691
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 532; //@line 17694
  sp = STACKTOP; //@line 17695
  return 0; //@line 17696
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17698
 $$0 = $7; //@line 17699
 return $$0 | 0; //@line 17700
}
function __ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$1 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26016
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26018
 $$ = HEAP8[___async_retval >> 0] & 1 ? 7 : 6; //@line 26022
 $6 = HEAP8[$2 >> 0] | 0; //@line 26023
 $$1 = ($6 << 24 >> 24 < (HEAP8[$4 + 28 >> 0] | 0) ? 1 : $6 << 24 >> 24 > (HEAP8[$4 + 29 >> 0] | 0)) ? $$ & 5 : $$; //@line 26032
 $16 = HEAP8[$2 + 1 >> 0] | 0; //@line 26034
 HEAP8[___async_retval >> 0] = ($16 << 24 >> 24 < (HEAP8[$4 + 32 >> 0] | 0) ? 1 : $16 << 24 >> 24 > (HEAP8[$4 + 33 >> 0] | 0)) ? $$1 & 3 : $$1; //@line 26045
 return;
}
function __ZN4mbed5Timer7read_msEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $18 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $6 = 0, $9 = 0;
 $4 = $0 + 8 | 0; //@line 30910
 $6 = HEAP32[$4 >> 2] | 0; //@line 30912
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 30915
 $11 = ___async_retval; //@line 30917
 $18 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 30924
 $24 = _i64Subtract(HEAP32[$11 >> 2] | 0, HEAP32[$11 + 4 >> 2] | 0, HEAP32[$18 >> 2] | 0, HEAP32[$18 + 4 >> 2] | 0) | 0; //@line 30930
 $26 = _i64Add($24 | 0, tempRet0 | 0, $6 | 0, $9 | 0) | 0; //@line 30932
 $28 = ___udivdi3($26 | 0, tempRet0 | 0, 1e3, 0) | 0; //@line 30934
 HEAP32[___async_retval >> 2] = $28; //@line 30937
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_468($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 32934
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32936
 $4 = HEAP32[$2 + 12 >> 2] | 0; //@line 32938
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 32944
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 32945
 FUNCTION_TABLE_vi[$7 & 1023]($2); //@line 32946
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 335; //@line 32949
  sp = STACKTOP; //@line 32950
  return;
 }
 ___async_unwind = 0; //@line 32953
 HEAP32[$ReallocAsyncCtx7 >> 2] = 335; //@line 32954
 sp = STACKTOP; //@line 32955
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_192($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 32777
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 32780
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 32783
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 32784
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 32785
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 624; //@line 32788
  sp = STACKTOP; //@line 32789
  return;
 }
 ___async_unwind = 0; //@line 32792
 HEAP32[$ReallocAsyncCtx3 >> 2] = 624; //@line 32793
 sp = STACKTOP; //@line 32794
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_406($0) {
 $0 = $0 | 0;
 var $6 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 21491
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21497
 _printf(10880, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 21500
 HEAP32[$6 >> 2] = 5; //@line 21501
 _printf(10975, $6) | 0; //@line 21502
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 21503
 _putchar(10) | 0; //@line 21504
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 76; //@line 21507
  sp = STACKTOP; //@line 21508
  return;
 }
 ___async_unwind = 0; //@line 21511
 HEAP32[$ReallocAsyncCtx9 >> 2] = 76; //@line 21512
 sp = STACKTOP; //@line 21513
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_405($0) {
 $0 = $0 | 0;
 var $6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 21463
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21469
 _printf(10880, HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 21472
 HEAP32[$6 >> 2] = 6; //@line 21473
 _printf(10975, $6) | 0; //@line 21474
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 21475
 _putchar(10) | 0; //@line 21476
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 79; //@line 21479
  sp = STACKTOP; //@line 21480
  return;
 }
 ___async_unwind = 0; //@line 21483
 HEAP32[$ReallocAsyncCtx7 >> 2] = 79; //@line 21484
 sp = STACKTOP; //@line 21485
 return;
}
function __ZN16SX1276_LoRaRadio9start_cadEv($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2215
 STACKTOP = STACKTOP + 16 | 0; //@line 2216
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2216
 _printf(10880, sp) | 0; //@line 2219
 _printf(11023, sp + 8 | 0) | 0; //@line 2220
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2221
 _putchar(10) | 0; //@line 2222
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 102; //@line 2225
  sp = STACKTOP; //@line 2226
  STACKTOP = sp; //@line 2227
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2229
  STACKTOP = sp; //@line 2230
  return;
 }
}
function __ZN7LoRaMac21remove_single_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17759
 if ((HEAP32[$0 + 968 >> 2] & 33 | 0) == 1) {
  $$0 = -1e3; //@line 17765
  return $$0 | 0; //@line 17766
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17769
 $7 = __ZN18LoRaMacChannelPlan21remove_single_channelEh($0 + 352 | 0, $1) | 0; //@line 17770
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 534; //@line 17773
  sp = STACKTOP; //@line 17774
  return 0; //@line 17775
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17777
 $$0 = $7; //@line 17778
 return $$0 | 0; //@line 17779
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_44($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 20995
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20999
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 21001
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 21002
 FUNCTION_TABLE_vi[$5 & 1023]($4); //@line 21003
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 362; //@line 21006
  sp = STACKTOP; //@line 21007
  return;
 }
 ___async_unwind = 0; //@line 21010
 HEAP32[$ReallocAsyncCtx >> 2] = 362; //@line 21011
 sp = STACKTOP; //@line 21012
 return;
}
function __ZN16SX1276_LoRaRadio11radio_resetEv($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 104
 STACKTOP = STACKTOP + 16 | 0; //@line 105
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 105
 _printf(10880, sp) | 0; //@line 108
 _printf(11545, sp + 8 | 0) | 0; //@line 109
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 110
 _putchar(10) | 0; //@line 111
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 49; //@line 114
  sp = STACKTOP; //@line 115
  STACKTOP = sp; //@line 116
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 118
  STACKTOP = sp; //@line 119
  return;
 }
}
function __ZN16LoRaWANInterface4sendEhPKhti__async_cb_20($0) {
 $0 = $0 | 0;
 var $$0 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18865
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18867
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 18869
 $8 = HEAP16[$0 + 14 >> 1] | 0; //@line 18871
 if (!$2) {
  $$0 = -1003; //@line 18874
  $13 = ___async_retval; //@line 18875
  HEAP16[$13 >> 1] = $$0; //@line 18876
  return;
 }
 $$0 = __ZN12LoRaWANStack9handle_txEhPKhth(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $6, $2, $8, $4 & 255) | 0; //@line 18882
 $13 = ___async_retval; //@line 18883
 HEAP16[$13 >> 1] = $$0; //@line 18884
 return;
}
function _mbedtls_cipher_setup__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3589
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3591
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 3593
 HEAP32[$2 + 60 >> 2] = $AsyncRetVal; //@line 3595
 if (!$AsyncRetVal) {
  $$0 = -24960; //@line 3598
 } else {
  HEAP32[$2 >> 2] = $4; //@line 3600
  if ((HEAP32[$4 + 4 >> 2] | 0) == 2) {
   HEAP32[$2 + 12 >> 2] = 4; //@line 3606
   HEAP32[$2 + 16 >> 2] = 14; //@line 3608
   $$0 = 0; //@line 3609
  } else {
   $$0 = 0; //@line 3611
  }
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 3615
 return;
}
function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $7 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$0$lcssa = $2; //@line 12652
 } else {
  $$06 = $2; //@line 12654
  $11 = $1; //@line 12654
  $7 = $0; //@line 12654
  while (1) {
   $10 = $$06 + -1 | 0; //@line 12659
   HEAP8[$10 >> 0] = $7 & 7 | 48; //@line 12660
   $7 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0; //@line 12661
   $11 = tempRet0; //@line 12662
   if (($7 | 0) == 0 & ($11 | 0) == 0) {
    $$0$lcssa = $10; //@line 12667
    break;
   } else {
    $$06 = $10; //@line 12670
   }
  }
 }
 return $$0$lcssa | 0; //@line 12674
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb_408($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 21587
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 21590
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 21593
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 21594
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 21595
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 633; //@line 21598
  sp = STACKTOP; //@line 21599
  return;
 }
 ___async_unwind = 0; //@line 21602
 HEAP32[$ReallocAsyncCtx3 >> 2] = 633; //@line 21603
 sp = STACKTOP; //@line 21604
 return;
}
function __ZN16SX1276_LoRaRadio6randomEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1347
 $1 = _emscripten_asm_const_i(2) | 0; //@line 1348
 $4 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 1351
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1352
 FUNCTION_TABLE_vi[$4 & 1023]($0); //@line 1353
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 81; //@line 1356
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 1358
  sp = STACKTOP; //@line 1359
  return 0; //@line 1360
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1362
  return $1 | 0; //@line 1363
 }
 return 0; //@line 1365
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_198($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 33219
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33223
 $7 = HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 76 >> 2] | 0; //@line 33226
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 33227
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 33228
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 176; //@line 33231
  sp = STACKTOP; //@line 33232
  return;
 }
 ___async_unwind = 0; //@line 33235
 HEAP32[$ReallocAsyncCtx3 >> 2] = 176; //@line 33236
 sp = STACKTOP; //@line 33237
 return;
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_40($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 20875
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 20878
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 20881
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 20882
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 20883
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 630; //@line 20886
  sp = STACKTOP; //@line 20887
  return;
 }
 ___async_unwind = 0; //@line 20890
 HEAP32[$ReallocAsyncCtx3 >> 2] = 630; //@line 20891
 sp = STACKTOP; //@line 20892
 return;
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_48($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 21150
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 21153
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 21156
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 21157
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 21158
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 627; //@line 21161
  sp = STACKTOP; //@line 21162
  return;
 }
 ___async_unwind = 0; //@line 21165
 HEAP32[$ReallocAsyncCtx3 >> 2] = 627; //@line 21166
 sp = STACKTOP; //@line 21167
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_384($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 19564
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 19567
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 19570
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 19571
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 19572
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 637; //@line 19575
  sp = STACKTOP; //@line 19576
  return;
 }
 ___async_unwind = 0; //@line 19579
 HEAP32[$ReallocAsyncCtx4 >> 2] = 637; //@line 19580
 sp = STACKTOP; //@line 19581
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_383($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 19541
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 19544
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 19547
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 19548
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 19549
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 637; //@line 19552
  sp = STACKTOP; //@line 19553
  return;
 }
 ___async_unwind = 0; //@line 19556
 HEAP32[$ReallocAsyncCtx4 >> 2] = 637; //@line 19557
 sp = STACKTOP; //@line 19558
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb_348($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16830
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 16833
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 16836
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 16837
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 16838
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 644; //@line 16841
  sp = STACKTOP; //@line 16842
  return;
 }
 ___async_unwind = 0; //@line 16845
 HEAP32[$ReallocAsyncCtx3 >> 2] = 644; //@line 16846
 sp = STACKTOP; //@line 16847
 return;
}
function __ZN7LoRaPHY16get_alternate_DREh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $12 = 0, $3 = 0, $6 = 0, $8 = 0;
 $3 = HEAP8[$0 + 31 >> 0] | 0; //@line 24277
 $6 = HEAP8[$0 + 26 >> 0] | 0; //@line 24280
 $8 = ($3 & 255) + 1 | 0; //@line 24282
 $12 = (($1 & 255) >>> 0) % (($8 - ($6 & 255) & 255) >>> 0) | 0; //@line 24286
 switch (($12 & 255) << 24 >> 24) {
 case 1:
  {
   $$0 = $3; //@line 24290
   return $$0 | 0; //@line 24291
  }
 case 0:
  {
   $$0 = $6; //@line 24295
   return $$0 | 0; //@line 24296
  }
 default:
  {
   $$0 = $8 - $12 & 255; //@line 24302
   return $$0 | 0; //@line 24303
  }
 }
 return 0; //@line 24306
}
function __ZN7LoRaMac19remove_channel_planEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17705
 if ((HEAP32[$0 + 968 >> 2] & 33 | 0) == 1) {
  $$0 = -1e3; //@line 17711
  return $$0 | 0; //@line 17712
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17715
 $6 = __ZN18LoRaMacChannelPlan11remove_planEv($0 + 352 | 0) | 0; //@line 17716
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 533; //@line 17719
  sp = STACKTOP; //@line 17720
  return 0; //@line 17721
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17723
 $$0 = $6; //@line 17724
 return $$0 | 0; //@line 17725
}
function __ZN4mbed7Timeout7handlerEv__async_cb_205($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 33610
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33614
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 33616
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 33617
 FUNCTION_TABLE_vi[$5 & 1023]($4); //@line 33618
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 160; //@line 33621
  sp = STACKTOP; //@line 33622
  return;
 }
 ___async_unwind = 0; //@line 33625
 HEAP32[$ReallocAsyncCtx >> 2] = 160; //@line 33626
 sp = STACKTOP; //@line 33627
 return;
}
function __ZN7LoRaPHY18verify_tx_datarateEhb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$sink$in = 0, $$sink5 = 0;
 do {
  if ($2) {
   $$sink$in = $0 + 30 | 0; //@line 25786
   $$sink5 = $0 + 31 | 0; //@line 25786
  } else {
   if (!(HEAP8[$0 + 132 >> 0] & 1)) {
    $$sink$in = $0 + 26 | 0; //@line 25795
    $$sink5 = $0 + 27 | 0; //@line 25795
    break;
   } else {
    $$sink$in = $0 + 35 | 0; //@line 25800
    $$sink5 = $0 + 27 | 0; //@line 25800
    break;
   }
  }
 } while (0);
 return ((HEAP8[$$sink$in >> 0] | 0) <= $1 << 24 >> 24 ? (HEAP8[$$sink5 >> 0] | 0) >= $1 << 24 >> 24 : 0) | 0; //@line 25810
}
function ___cxa_is_pointer_type($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16069
 do {
  if (!$0) {
   $3 = 0; //@line 16073
  } else {
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16075
   $2 = ___dynamic_cast($0, 464, 520, 0) | 0; //@line 16076
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 774; //@line 16079
    sp = STACKTOP; //@line 16080
    return 0; //@line 16081
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16083
    $3 = ($2 | 0) != 0 & 1; //@line 16086
    break;
   }
  }
 } while (0);
 return $3 | 0; //@line 16091
}
function __ZN7LoRaPHY24restore_default_channelsEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $2 = 0, $5 = 0, $7 = 0, $8 = 0, $indvars$iv = 0;
 $2 = HEAP8[$0 + 128 >> 0] | 0; //@line 22908
 if (!($2 << 24 >> 24)) {
  return;
 }
 $5 = HEAP32[$0 + 124 >> 2] | 0; //@line 22914
 $7 = HEAP32[$0 + 120 >> 2] | 0; //@line 22916
 $8 = $2 & 255; //@line 22917
 $indvars$iv = 0; //@line 22918
 do {
  $11 = $7 + ($indvars$iv << 1) | 0; //@line 22922
  HEAP16[$11 >> 1] = HEAP16[$11 >> 1] | HEAP16[$5 + ($indvars$iv << 1) >> 1]; //@line 22925
  $indvars$iv = $indvars$iv + 1 | 0; //@line 22926
 } while ($indvars$iv >>> 0 < $8 >>> 0);
 return;
}
function _invoke_ticker__async_cb_31($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 20565
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 20571
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 20572
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 20573
 FUNCTION_TABLE_vi[$5 & 1023]($6); //@line 20574
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 728; //@line 20577
  sp = STACKTOP; //@line 20578
  return;
 }
 ___async_unwind = 0; //@line 20581
 HEAP32[$ReallocAsyncCtx >> 2] = 728; //@line 20582
 sp = STACKTOP; //@line 20583
 return;
}
function __Z18decrypt_join_framePKhtS0_Ph($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $4 = 0, $6 = 0;
 _mbedtls_aes_init(21912); //@line 21786
 $4 = _mbedtls_aes_setkey_enc(21912, $2, 128) | 0; //@line 21787
 if (!$4) {
  $6 = _mbedtls_aes_crypt_ecb(21912, 1, $0, $3) | 0; //@line 21790
  if (($1 & 65535) > 15 & ($6 | 0) == 0) {
   $$0 = _mbedtls_aes_crypt_ecb(21912, 1, $0 + 16 | 0, $3 + 16 | 0) | 0; //@line 21798
  } else {
   $$0 = $6; //@line 21800
  }
 } else {
  $$0 = $4; //@line 21803
 }
 _mbedtls_aes_free(21912); //@line 21805
 return $$0 | 0; //@line 21806
}
function __ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12958
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 12960
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 12966
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12967
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 12968
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 404; //@line 12971
  sp = STACKTOP; //@line 12972
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 12975
 return;
}
function _getint_671($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$04 = 0, $11 = 0, $12 = 0, $7 = 0;
 if (!(_isdigit(HEAP8[HEAP32[$0 >> 2] >> 0] | 0) | 0)) {
  $$0$lcssa = 0; //@line 12296
 } else {
  $$04 = 0; //@line 12298
  while (1) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 12301
   $11 = ($$04 * 10 | 0) + -48 + (HEAP8[$7 >> 0] | 0) | 0; //@line 12305
   $12 = $7 + 1 | 0; //@line 12306
   HEAP32[$0 >> 2] = $12; //@line 12307
   if (!(_isdigit(HEAP8[$12 >> 0] | 0) | 0)) {
    $$0$lcssa = $11; //@line 12313
    break;
   } else {
    $$04 = $11; //@line 12316
   }
  }
 }
 return $$0$lcssa | 0; //@line 12320
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7975
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 7977
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 7983
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7984
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 7985
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 276; //@line 7988
  sp = STACKTOP; //@line 7989
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7992
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_182($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 32250
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(4) | 0; //@line 32257
 _mbed_assert_internal(12827, 11911, 843); //@line 32258
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 202; //@line 32261
  sp = STACKTOP; //@line 32262
  return;
 }
 ___async_unwind = 0; //@line 32265
 HEAP32[$ReallocAsyncCtx11 >> 2] = 202; //@line 32266
 sp = STACKTOP; //@line 32267
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_110($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 24951
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(4) | 0; //@line 24958
 _mbed_assert_internal(12827, 11911, 737); //@line 24959
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 221; //@line 24962
  sp = STACKTOP; //@line 24963
  return;
 }
 ___async_unwind = 0; //@line 24966
 HEAP32[$ReallocAsyncCtx12 >> 2] = 221; //@line 24967
 sp = STACKTOP; //@line 24968
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_108($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 24883
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(4) | 0; //@line 24890
 _mbed_assert_internal(12827, 11911, 715); //@line 24891
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 217; //@line 24894
  sp = STACKTOP; //@line 24895
  return;
 }
 ___async_unwind = 0; //@line 24898
 HEAP32[$ReallocAsyncCtx13 >> 2] = 217; //@line 24899
 sp = STACKTOP; //@line 24900
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_163($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 30988
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(4) | 0; //@line 30995
 _mbed_assert_internal(12827, 11911, 821); //@line 30996
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 196; //@line 30999
  sp = STACKTOP; //@line 31000
  return;
 }
 ___async_unwind = 0; //@line 31003
 HEAP32[$ReallocAsyncCtx13 >> 2] = 196; //@line 31004
 sp = STACKTOP; //@line 31005
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_161($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 30927
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(4) | 0; //@line 30934
 _mbed_assert_internal(12827, 11911, 797); //@line 30935
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 192; //@line 30938
  sp = STACKTOP; //@line 30939
  return;
 }
 ___async_unwind = 0; //@line 30942
 HEAP32[$ReallocAsyncCtx14 >> 2] = 192; //@line 30943
 sp = STACKTOP; //@line 30944
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_159($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 30866
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(4) | 0; //@line 30873
 _mbed_assert_internal(12827, 11911, 786); //@line 30874
 if (___async) {
  HEAP32[$ReallocAsyncCtx15 >> 2] = 188; //@line 30877
  sp = STACKTOP; //@line 30878
  return;
 }
 ___async_unwind = 0; //@line 30881
 HEAP32[$ReallocAsyncCtx15 >> 2] = 188; //@line 30882
 sp = STACKTOP; //@line 30883
 return;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0; //@line 35774
 $y_sroa_0_0_extract_trunc = $b$0; //@line 35775
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0; //@line 35776
 $1$1 = tempRet0; //@line 35777
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0; //@line 35779
}
function __ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7901
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 7903
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 7909
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7910
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 7911
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 273; //@line 7914
  sp = STACKTOP; //@line 7915
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7918
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_443($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 30821
 if (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 30829
 _mbed_assert_internal(13710, 13728, 57); //@line 30830
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 652; //@line 30833
  sp = STACKTOP; //@line 30834
  return;
 }
 ___async_unwind = 0; //@line 30837
 HEAP32[$ReallocAsyncCtx5 >> 2] = 652; //@line 30838
 sp = STACKTOP; //@line 30839
 return;
}
function __ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 21528
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 21535
 _mbed_assert_internal(12827, 12836, 187); //@line 21536
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 444; //@line 21539
  sp = STACKTOP; //@line 21540
  return;
 }
 ___async_unwind = 0; //@line 21543
 HEAP32[$ReallocAsyncCtx2 >> 2] = 444; //@line 21544
 sp = STACKTOP; //@line 21545
 return;
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10853
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 10855
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 10861
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10862
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 10863
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 360; //@line 10866
  sp = STACKTOP; //@line 10867
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10870
 return;
}
function __ZN12LoRaWANStack17get_lorawan_stackEv() {
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8952
 do {
  if (!(HEAP8[18224] | 0)) {
   if (___cxa_guard_acquire(18224) | 0) {
    $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8960
    __ZN12LoRaWANStackC2Ev(19552); //@line 8961
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 295; //@line 8964
     sp = STACKTOP; //@line 8965
     return 0; //@line 8966
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 8968
     break;
    }
   }
  }
 } while (0);
 return 19552; //@line 8974
}
function _mbedtls_cipher_info_from_type($0) {
 $0 = $0 | 0;
 var $$05 = 0, $$06 = 0, $1 = 0, $9 = 0;
 $1 = HEAP32[2374] | 0; //@line 2095
 L1 : do {
  if (!$1) {
   $$05 = 0; //@line 2099
  } else {
   $$06 = 9492; //@line 2101
   $9 = $1; //@line 2101
   while (1) {
    if ((HEAP32[$$06 >> 2] | 0) == ($0 | 0)) {
     $$05 = $9; //@line 2106
     break L1;
    }
    $9 = HEAP32[$$06 + 12 >> 2] | 0; //@line 2111
    if (!$9) {
     $$05 = 0; //@line 2114
     break;
    } else {
     $$06 = $$06 + 8 | 0; //@line 2117
    }
   }
  }
 } while (0);
 return $$05 | 0; //@line 2122
}
function __ZN7LoRaPHY25accept_tx_param_setup_reqEP20tx_param_setup_req_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $17 = 0, $3 = 0, $6 = 0;
 $3 = HEAP8[$0 + 13 >> 0] | 0; //@line 24194
 if (!($3 << 24 >> 24)) {
  $17 = $3 << 24 >> 24 != 0; //@line 24197
  return $17 | 0; //@line 24198
 }
 $6 = $0 + 132 | 0; //@line 24201
 $10 = HEAP8[$6 >> 0] & -2 | HEAP8[$1 >> 0] & 1; //@line 24205
 HEAP8[$6 >> 0] = $10; //@line 24206
 HEAP8[$6 >> 0] = HEAP8[$1 + 1 >> 0] << 1 & 2 | $10 & -3; //@line 24213
 $17 = $3 << 24 >> 24 != 0; //@line 24214
 return $17 | 0; //@line 24215
}
function runPostSets() {}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535; //@line 35759
 $2 = $b & 65535; //@line 35760
 $3 = Math_imul($2, $1) | 0; //@line 35761
 $6 = $a >>> 16; //@line 35762
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0; //@line 35763
 $11 = $b >>> 16; //@line 35764
 $12 = Math_imul($11, $1) | 0; //@line 35765
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0; //@line 35766
}
function _mbedtls_cipher_update__async_cb_242($0) {
 $0 = $0 | 0;
 var $$1 = 0, $2 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 454
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 456
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 458
 if ($AsyncRetVal | 0) {
  $$1 = $AsyncRetVal; //@line 461
  $9 = ___async_retval; //@line 462
  HEAP32[$9 >> 2] = $$1; //@line 463
  return;
 }
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $4; //@line 468
 $$1 = 0; //@line 469
 $9 = ___async_retval; //@line 470
 HEAP32[$9 >> 2] = $$1; //@line 471
 return;
}
function __ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 1140
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 1147
 _mbed_assert_internal(12827, 12836, 194); //@line 1148
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 490; //@line 1151
  sp = STACKTOP; //@line 1152
  return;
 }
 ___async_unwind = 0; //@line 1155
 HEAP32[$ReallocAsyncCtx2 >> 2] = 490; //@line 1156
 sp = STACKTOP; //@line 1157
 return;
}
function __ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $8 = 0, $or$cond$i = 0;
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 23748
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 23750
 $16 = $10 + ($8 & 255) | 0; //@line 23756
 $or$cond$i = $16 >>> 0 < 256 & $16 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0, HEAP8[$0 + 12 >> 0] | 0, (HEAP8[HEAP32[$0 + 8 >> 2] >> 0] | 0) != 0) | 0) & 255) >>> 0; //@line 23760
 HEAP32[___async_retval >> 2] = $or$cond$i ? 0 : -1010; //@line 23763
 return;
}
function __ZN16SX1276_LoRaRadio5sleepEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 22510
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22512
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 22513
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 22514
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 52; //@line 22517
  sp = STACKTOP; //@line 22518
  return;
 }
 ___async_unwind = 0; //@line 22521
 HEAP32[$ReallocAsyncCtx3 >> 2] = 52; //@line 22522
 sp = STACKTOP; //@line 22523
 return;
}
function __ZN7LoRaPHY16set_last_tx_doneEP24set_band_txdone_params_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $16 = 0, $4 = 0, $9 = 0;
 if (!$1) {
  return;
 }
 $4 = HEAP32[$0 + 72 >> 2] | 0; //@line 22881
 $9 = (HEAP8[$1 + 1 >> 0] | 0) == 0; //@line 22886
 $11 = HEAP32[$1 + 4 >> 2] | 0; //@line 22888
 $16 = HEAPU8[(HEAP32[$0 + 112 >> 2] | 0) + ((HEAPU8[$1 >> 0] | 0) * 12 | 0) + 9 >> 0] | 0; //@line 22893
 HEAP32[$4 + ($16 * 24 | 0) + 8 >> 2] = $11; //@line 22895
 if (!$9) {
  return;
 }
 HEAP32[$4 + ($16 * 24 | 0) + 4 >> 2] = $11; //@line 22900
 return;
}
function __ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb_308($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 4929
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 4936
 _mbed_assert_internal(12827, 12836, 217); //@line 4937
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 505; //@line 4940
  sp = STACKTOP; //@line 4941
  return;
 }
 ___async_unwind = 0; //@line 4944
 HEAP32[$ReallocAsyncCtx3 >> 2] = 505; //@line 4945
 sp = STACKTOP; //@line 4946
 return;
}
function __ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb_286($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 3652
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 3659
 _mbed_assert_internal(12827, 12836, 209); //@line 3660
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 496; //@line 3663
  sp = STACKTOP; //@line 3664
  return;
 }
 ___async_unwind = 0; //@line 3667
 HEAP32[$ReallocAsyncCtx3 >> 2] = 496; //@line 3668
 sp = STACKTOP; //@line 3669
 return;
}
function __ZN7LoRaMac17handle_tx_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18286
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 18293
 _mbed_assert_internal(12827, 12836, 162); //@line 18294
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 436; //@line 18297
  sp = STACKTOP; //@line 18298
  return;
 }
 ___async_unwind = 0; //@line 18301
 HEAP32[$ReallocAsyncCtx2 >> 2] = 436; //@line 18302
 sp = STACKTOP; //@line 18303
 return;
}
function __ZN7LoRaMac17handle_rx_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 17496
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 17503
 _mbed_assert_internal(12827, 12836, 155); //@line 17504
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 426; //@line 17507
  sp = STACKTOP; //@line 17508
  return;
 }
 ___async_unwind = 0; //@line 17511
 HEAP32[$ReallocAsyncCtx2 >> 2] = 426; //@line 17512
 sp = STACKTOP; //@line 17513
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_85($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 23915
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23917
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23919
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 23920
 __ZN4mbed10TimerEventD2Ev($2); //@line 23921
 if (!___async) {
  ___async_unwind = 0; //@line 23924
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 116; //@line 23926
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $4; //@line 23928
 sp = STACKTOP; //@line 23929
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_84($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 23895
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23897
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23899
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 23900
 __ZN4mbed10TimerEventD2Ev($4); //@line 23901
 if (!___async) {
  ___async_unwind = 0; //@line 23904
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 114; //@line 23906
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 23908
 sp = STACKTOP; //@line 23909
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_83($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 23875
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23877
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23879
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 23880
 __ZN4mbed10TimerEventD2Ev($4); //@line 23881
 if (!___async) {
  ___async_unwind = 0; //@line 23884
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 112; //@line 23886
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 23888
 sp = STACKTOP; //@line 23889
 return;
}
function __ZN16LoRaWANInterface7connectERK15lorawan_connect($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$07 = 0;
 switch (HEAP8[$1 >> 0] | 0) {
 case 0:
  {
   $$07 = __ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 4979
   break;
  }
 case 1:
  {
   $$07 = __ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 4985
   break;
  }
 default:
  {
   $$07 = -1003; //@line 4989
  }
 }
 return $$07 | 0; //@line 4992
}
function __ZN7LoRaMac15handle_rx_errorEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22423
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 22430
 _mbed_assert_internal(12827, 12836, 148); //@line 22431
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 417; //@line 22434
  sp = STACKTOP; //@line 22435
  return;
 }
 ___async_unwind = 0; //@line 22438
 HEAP32[$ReallocAsyncCtx2 >> 2] = 417; //@line 22439
 sp = STACKTOP; //@line 22440
 return;
}
function __ZN7LoRaMac14handle_tx_doneEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22713
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 22720
 _mbed_assert_internal(12827, 12836, 134); //@line 22721
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 343; //@line 22724
  sp = STACKTOP; //@line 22725
  return;
 }
 ___async_unwind = 0; //@line 22728
 HEAP32[$ReallocAsyncCtx2 >> 2] = 343; //@line 22729
 sp = STACKTOP; //@line 22730
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 23855
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23857
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23859
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 23860
 __ZN4mbed10TimerEventD2Ev($4); //@line 23861
 if (!___async) {
  ___async_unwind = 0; //@line 23864
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 110; //@line 23866
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $2; //@line 23868
 sp = STACKTOP; //@line 23869
 return;
}
function _calloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $3 = 0, $8 = 0;
 if (!$0) {
  $$0 = 0; //@line 10123
 } else {
  $3 = Math_imul($1, $0) | 0; //@line 10125
  if (($1 | $0) >>> 0 > 65535) {
   $$0 = (($3 >>> 0) / ($0 >>> 0) | 0 | 0) == ($1 | 0) ? $3 : -1; //@line 10132
  } else {
   $$0 = $3; //@line 10134
  }
 }
 $8 = _malloc($$0) | 0; //@line 10137
 if (!$8) {
  return $8 | 0; //@line 10140
 }
 if (!(HEAP32[$8 + -4 >> 2] & 3)) {
  return $8 | 0; //@line 10147
 }
 _memset($8 | 0, 0, $$0 | 0) | 0; //@line 10149
 return $8 | 0; //@line 10150
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_91($0) {
 $0 = $0 | 0;
 var $3 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 24125
 $3 = (HEAP32[$0 + 4 >> 2] | 0) + 52 | 0; //@line 24128
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 24129
 __ZN4mbed11InterruptInD2Ev($3); //@line 24130
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 122; //@line 24133
  sp = STACKTOP; //@line 24134
  return;
 }
 ___async_unwind = 0; //@line 24137
 HEAP32[$ReallocAsyncCtx9 >> 2] = 122; //@line 24138
 sp = STACKTOP; //@line 24139
 return;
}
function _ticker_set_handler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5087
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 5088
 _initialize($0); //@line 5089
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 682; //@line 5092
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5094
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 5096
  sp = STACKTOP; //@line 5097
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5100
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = $1; //@line 5103
  return;
 }
}
function __ZN7LoRaMac18handle_ack_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2321
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 2328
 _mbed_assert_internal(12827, 12836, 201); //@line 2329
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 492; //@line 2332
  sp = STACKTOP; //@line 2333
  return;
 }
 ___async_unwind = 0; //@line 2336
 HEAP32[$ReallocAsyncCtx2 >> 2] = 492; //@line 2337
 sp = STACKTOP; //@line 2338
 return;
}
function __ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 25287
 if (HEAP32[$0 + 8 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 25296
 _mbed_assert_internal(12827, 12836, 141); //@line 25297
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 371; //@line 25300
  sp = STACKTOP; //@line 25301
  return;
 }
 ___async_unwind = 0; //@line 25304
 HEAP32[$ReallocAsyncCtx3 >> 2] = 371; //@line 25305
 sp = STACKTOP; //@line 25306
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_113($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 25028
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(4) | 0; //@line 25029
 _mbed_assert_internal(14489, 11911, 694); //@line 25030
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 209; //@line 25033
  sp = STACKTOP; //@line 25034
  return;
 }
 ___async_unwind = 0; //@line 25037
 HEAP32[$ReallocAsyncCtx14 >> 2] = 209; //@line 25038
 sp = STACKTOP; //@line 25039
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_166($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 31218
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(4) | 0; //@line 31219
 _mbed_assert_internal(14489, 11911, 766); //@line 31220
 if (___async) {
  HEAP32[$ReallocAsyncCtx16 >> 2] = 182; //@line 31223
  sp = STACKTOP; //@line 31224
  return;
 }
 ___async_unwind = 0; //@line 31227
 HEAP32[$ReallocAsyncCtx16 >> 2] = 182; //@line 31228
 sp = STACKTOP; //@line 31229
 return;
}
function _mbed_die__async_cb_265($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 1539
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1541
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 1543
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(8) | 0; //@line 1544
 _wait_ms(150); //@line 1545
 if (!___async) {
  ___async_unwind = 0; //@line 1548
 }
 HEAP32[$ReallocAsyncCtx15 >> 2] = 702; //@line 1550
 HEAP32[$ReallocAsyncCtx15 + 4 >> 2] = $2; //@line 1552
 sp = STACKTOP; //@line 1553
 return;
}
function ___fflush_unlocked__async_cb_376($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18774
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18776
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18778
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18780
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 16 >> 2] = 0; //@line 18782
 HEAP32[$4 >> 2] = 0; //@line 18783
 HEAP32[$6 >> 2] = 0; //@line 18784
 HEAP32[$8 >> 2] = 0; //@line 18785
 HEAP32[$10 >> 2] = 0; //@line 18786
 HEAP32[___async_retval >> 2] = 0; //@line 18788
 return;
}
function __ZN12LoRaWANStack8shutdownEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9935
 HEAP32[$0 + 1876 >> 2] = 7; //@line 9937
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9938
 $2 = __ZN12LoRaWANStack18lora_state_machineEv($0) | 0; //@line 9939
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 326; //@line 9942
  sp = STACKTOP; //@line 9943
  return 0; //@line 9944
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9946
  return $2 | 0; //@line 9947
 }
 return 0; //@line 9949
}
function _mbed_die__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 1169
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1171
 _emscripten_asm_const_iii(3, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 1173
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(8) | 0; //@line 1174
 _wait_ms(150); //@line 1175
 if (!___async) {
  ___async_unwind = 0; //@line 1178
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 701; //@line 1180
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $2; //@line 1182
 sp = STACKTOP; //@line 1183
 return;
}
function __ZN4mbed6TickerD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20904
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20906
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 20907
 __ZN4mbed10TimerEventD2Ev($2); //@line 20908
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 723; //@line 20911
  sp = STACKTOP; //@line 20912
  return;
 }
 ___async_unwind = 0; //@line 20915
 HEAP32[$ReallocAsyncCtx2 >> 2] = 723; //@line 20916
 sp = STACKTOP; //@line 20917
 return;
}
function __ZN4mbed6Ticker7handlerEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6809
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 6811
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 >> 2] | 0; //@line 6817
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6818
 FUNCTION_TABLE_vi[$5 & 1023]($0 + 40 | 0); //@line 6819
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 726; //@line 6822
  sp = STACKTOP; //@line 6823
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6826
 return;
}
function __ZN7LoRaPHY17copy_channel_maskEPtS0_h($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $indvars$iv = 0, $wide$trip$count = 0;
 if (!(($1 | 0) != 0 & ($2 | 0) != 0 & $3 << 24 >> 24 != 0)) {
  return;
 }
 $wide$trip$count = $3 & 255; //@line 25508
 $indvars$iv = 0; //@line 25509
 do {
  HEAP16[$1 + ($indvars$iv << 1) >> 1] = HEAP16[$2 + ($indvars$iv << 1) >> 1] | 0; //@line 25514
  $indvars$iv = $indvars$iv + 1 | 0; //@line 25515
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 return;
}
function __ZN4mbed7TimeoutD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 5063
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5065
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 5066
 __ZN4mbed10TimerEventD2Ev($2); //@line 5067
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 156; //@line 5070
  sp = STACKTOP; //@line 5071
  return;
 }
 ___async_unwind = 0; //@line 5074
 HEAP32[$ReallocAsyncCtx2 >> 2] = 156; //@line 5075
 sp = STACKTOP; //@line 5076
 return;
}
function dynCall_viiiiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 a11 = a11 | 0;
 a12 = a12 | 0;
 a13 = a13 | 0;
 a14 = a14 | 0;
 a15 = a15 | 0;
 FUNCTION_TABLE_viiiiiiiiiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0, a11 | 0, a12 | 0, a13 | 0, a14 | 0, a15 | 0); //@line 568
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_95($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 24202
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24204
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 24206
 __ZN4mbed11InterruptInD2Ev($2 + 340 | 0); //@line 24207
 if (!___async) {
  ___async_unwind = 0; //@line 24210
 }
 HEAP32[$ReallocAsyncCtx13 >> 2] = 118; //@line 24212
 HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $2; //@line 24214
 sp = STACKTOP; //@line 24215
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_94($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 24183
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24185
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 24187
 __ZN4mbed11InterruptInD2Ev($2 + 268 | 0); //@line 24188
 if (!___async) {
  ___async_unwind = 0; //@line 24191
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 119; //@line 24193
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 24195
 sp = STACKTOP; //@line 24196
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_93($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 24164
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24166
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 24168
 __ZN4mbed11InterruptInD2Ev($2 + 196 | 0); //@line 24169
 if (!___async) {
  ___async_unwind = 0; //@line 24172
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 120; //@line 24174
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 24176
 sp = STACKTOP; //@line 24177
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_92($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 24145
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24147
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 24149
 __ZN4mbed11InterruptInD2Ev($2 + 124 | 0); //@line 24150
 if (!___async) {
  ___async_unwind = 0; //@line 24153
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 121; //@line 24155
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $2; //@line 24157
 sp = STACKTOP; //@line 24158
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_86($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 23935
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23937
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 23939
 __ZN4mbed11InterruptInD2Ev($2 + 412 | 0); //@line 23940
 if (!___async) {
  ___async_unwind = 0; //@line 23943
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 117; //@line 23945
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $2; //@line 23947
 sp = STACKTOP; //@line 23948
 return;
}
function _gcm_aes_setkey_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2994
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2995
 $3 = _mbedtls_gcm_setkey($0, 2, $1, $2) | 0; //@line 2996
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 668; //@line 2999
  sp = STACKTOP; //@line 3000
  return 0; //@line 3001
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3003
  return $3 | 0; //@line 3004
 }
 return 0; //@line 3006
}
function _ccm_aes_setkey_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2946
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2947
 $3 = _mbedtls_ccm_setkey($0, 2, $1, $2) | 0; //@line 2948
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 666; //@line 2951
  sp = STACKTOP; //@line 2952
  return 0; //@line 2953
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2955
  return $3 | 0; //@line 2956
 }
 return 0; //@line 2958
}
function __ZN4mbed11InterruptInC2E7PinName($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, dest = 0, stop = 0;
 HEAP32[$0 >> 2] = 668; //@line 3760
 $2 = $0 + 4 | 0; //@line 3761
 $3 = $0 + 28 | 0; //@line 3762
 $4 = $0; //@line 3763
 dest = $2; //@line 3764
 stop = dest + 68 | 0; //@line 3764
 do {
  HEAP32[dest >> 2] = 0; //@line 3764
  dest = dest + 4 | 0; //@line 3764
 } while ((dest | 0) < (stop | 0));
 _gpio_irq_init($3, $1, 18, $4) | 0; //@line 3765
 _gpio_init_in($2, $1); //@line 3766
 return;
}
function _serial_putc__async_cb_128($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 26067
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26069
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 26070
 _fflush($2) | 0; //@line 26071
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 721; //@line 26074
  sp = STACKTOP; //@line 26075
  return;
 }
 ___async_unwind = 0; //@line 26078
 HEAP32[$ReallocAsyncCtx >> 2] = 721; //@line 26079
 sp = STACKTOP; //@line 26080
 return;
}
function _putchar($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14153
 $1 = HEAP32[2564] | 0; //@line 14154
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14155
 $2 = _fputc($0, $1) | 0; //@line 14156
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 744; //@line 14159
  sp = STACKTOP; //@line 14160
  return 0; //@line 14161
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14163
  return $2 | 0; //@line 14164
 }
 return 0; //@line 14166
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb_68($0) {
 $0 = $0 | 0;
 var $15 = 0, $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22828
 HEAP32[$4 + 364 >> 2] = 2; //@line 22830
 if (HEAP8[$4 + 373 >> 0] | 0) {
  HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 6; //@line 22838
 }
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 6; //@line 22843
 $15 = $4 + 944 | 0; //@line 22844
 HEAP8[$15 >> 0] = HEAP8[$15 >> 0] | 32; //@line 22847
 return;
}
function __ZN4mbed10TimerEventD2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4116
 HEAP32[$0 >> 2] = 704; //@line 4117
 $2 = HEAP32[$0 + 24 >> 2] | 0; //@line 4119
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4121
 _ticker_remove_event($2, $0 + 8 | 0); //@line 4122
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 164; //@line 4125
  sp = STACKTOP; //@line 4126
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4129
  return;
 }
}
function __ZN4mbed6TickerD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 21096
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21098
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 21099
 __ZN4mbed10TimerEventD2Ev($2); //@line 21100
 if (!___async) {
  ___async_unwind = 0; //@line 21103
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 725; //@line 21105
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 21107
 sp = STACKTOP; //@line 21108
 return;
}
function dynCall_viiiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 a11 = a11 | 0;
 a12 = a12 | 0;
 a13 = a13 | 0;
 a14 = a14 | 0;
 FUNCTION_TABLE_viiiiiiiiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0, a11 | 0, a12 | 0, a13 | 0, a14 | 0); //@line 561
}
function __ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb_285($0) {
 $0 = $0 | 0;
 var $$011 = 0;
 switch (HEAP32[___async_retval >> 2] | 0) {
 case 0:
  {
   $$011 = 3; //@line 3397
   break;
  }
 case -1004:
  {
   $$011 = 2; //@line 3401
   break;
  }
 case -1005:
  {
   $$011 = 1; //@line 3405
   break;
  }
 case -1006:
  {
   $$011 = 0; //@line 3409
   break;
  }
 default:
  {
   $$011 = 0; //@line 3413
  }
 }
 HEAP8[___async_retval >> 0] = $$011; //@line 3417
 return;
}
function __ZN4mbed7TimeoutD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6570
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6572
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 6573
 __ZN4mbed10TimerEventD2Ev($2); //@line 6574
 if (!___async) {
  ___async_unwind = 0; //@line 6577
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 158; //@line 6579
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 6581
 sp = STACKTOP; //@line 6582
 return;
}
function _rand() {
 var $0 = 0, $10 = 0, $14 = 0, $6 = 0, $8 = 0, $9 = 0;
 $0 = 19544; //@line 14106
 $6 = ___muldi3(HEAP32[$0 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0, 1284865837, 1481765933) | 0; //@line 14112
 $8 = _i64Add($6 | 0, tempRet0 | 0, 1, 0) | 0; //@line 14114
 $9 = tempRet0; //@line 14115
 $10 = 19544; //@line 14116
 HEAP32[$10 >> 2] = $8; //@line 14118
 HEAP32[$10 + 4 >> 2] = $9; //@line 14121
 $14 = _bitshift64Lshr($8 | 0, $9 | 0, 33) | 0; //@line 14122
 return $14 | 0; //@line 14124
}
function ___stdio_close($0) {
 $0 = $0 | 0;
 var $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 10155
 STACKTOP = STACKTOP + 16 | 0; //@line 10156
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10156
 $vararg_buffer = sp; //@line 10157
 HEAP32[$vararg_buffer >> 2] = _dummy(HEAP32[$0 + 60 >> 2] | 0) | 0; //@line 10161
 $5 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0; //@line 10163
 STACKTOP = sp; //@line 10164
 return $5 | 0; //@line 10164
}
function __ZN16SX1276_LoRaRadioD0Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2672
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2673
 __ZN16SX1276_LoRaRadioD2Ev($0); //@line 2674
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 123; //@line 2677
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2679
  sp = STACKTOP; //@line 2680
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2683
  __ZdlPv($0); //@line 2684
  return;
 }
}
function __ZN4mbed10TimerEvent3irqEj($0) {
 $0 = $0 | 0;
 var $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4165
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 4170
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4171
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 4172
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 166; //@line 4175
  sp = STACKTOP; //@line 4176
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4179
  return;
 }
}
function _emscripten_async_resume() {
 ___async = 0; //@line 280
 ___async_unwind = 1; //@line 281
 while (1) {
  if (!___async_cur_frame) return;
  dynCall_vi(HEAP32[___async_cur_frame + 8 >> 2] | 0, ___async_cur_frame + 8 | 0); //@line 287
  if (___async) return;
  if (!___async_unwind) {
   ___async_unwind = 1; //@line 291
   continue;
  }
  stackRestore(HEAP32[___async_cur_frame + 4 >> 2] | 0); //@line 295
  ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 297
 }
}
function __ZN7LoRaPHY18verify_rx_datarateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink5 = 0, $$sink6 = 0, $7 = 0;
 if (!(HEAP8[$0 + 132 >> 0] & 2)) {
  $7 = HEAP8[$0 + 28 >> 0] | 0; //@line 25762
  $$sink5 = $7; //@line 25763
  $$sink6 = $7; //@line 25763
 } else {
  $$sink5 = HEAP8[$0 + 28 >> 0] | 0; //@line 25769
  $$sink6 = HEAP8[$0 + 35 >> 0] | 0; //@line 25769
 }
 return ($$sink6 << 24 >> 24 <= $1 << 24 >> 24 ? $$sink5 << 24 >> 24 >= $1 << 24 >> 24 : 0) | 0; //@line 25774
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_45($0) {
 $0 = $0 | 0;
 var $13 = 0, $2 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21046
 if (HEAP8[$2 + 373 >> 0] | 0) {
  HEAP8[$2 + 377 >> 0] = 1; //@line 21052
  $7 = $2 + 968 | 0; //@line 21053
  HEAP32[$7 >> 2] = HEAP32[$7 >> 2] & -5; //@line 21056
 }
 if ((HEAP32[$2 + 360 >> 2] | 0) != 2) {
  return;
 }
 $13 = $2 + 944 | 0; //@line 21064
 HEAP8[$13 >> 0] = HEAP8[$13 >> 0] | 32; //@line 21067
 return;
}
function _handle_interrupt_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6592
 $2 = HEAP32[5548] | 0; //@line 6593
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6594
 FUNCTION_TABLE_vii[$2 & 31]($0, $1); //@line 6595
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 719; //@line 6598
  sp = STACKTOP; //@line 6599
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6602
  return;
 }
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_389($0) {
 $0 = $0 | 0;
 var $12 = 0, $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19781
 HEAP32[$4 + 364 >> 2] = 2; //@line 19783
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($4 + 288 | 0) | 0) + 4 >> 2] = 2; //@line 19787
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($4 + 264 | 0) | 0) + 4 >> 2] = 2; //@line 19791
 $12 = $4 + 944 | 0; //@line 19792
 HEAP8[$12 >> 0] = HEAP8[$12 >> 0] | 32; //@line 19795
 return;
}
function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0; //@line 35804
 if ((ret | 0) < 8) return ret | 0; //@line 35805
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0; //@line 35806
 if ((ret | 0) < 8) return ret + 8 | 0; //@line 35807
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0; //@line 35808
 if ((ret | 0) < 8) return ret + 16 | 0; //@line 35809
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0; //@line 35810
}
function __ZN4mbed5TimerC2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $16 = 0, $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 555
 $6 = ___async_retval; //@line 557
 $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 562
 $12 = HEAP32[$0 + 4 >> 2] | 0; //@line 563
 HEAP32[$12 >> 2] = HEAP32[$6 >> 2]; //@line 565
 HEAP32[$12 + 4 >> 2] = $11; //@line 568
 $16 = $4; //@line 569
 HEAP32[$16 >> 2] = 0; //@line 571
 HEAP32[$16 + 4 >> 2] = 0; //@line 574
 return;
}
function _gcm_ctx_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3021
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3022
 _mbedtls_gcm_free($0); //@line 3023
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 669; //@line 3026
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3028
  sp = STACKTOP; //@line 3029
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3032
  _free($0); //@line 3033
  return;
 }
}
function _ccm_ctx_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2973
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2974
 _mbedtls_ccm_free($0); //@line 2975
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 667; //@line 2978
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2980
  sp = STACKTOP; //@line 2981
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2984
  _free($0); //@line 2985
  return;
 }
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP; //@line 222
 STACKTOP = STACKTOP + 16 | 0; //@line 223
 $rem = __stackBase__ | 0; //@line 224
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0; //@line 225
 STACKTOP = __stackBase__; //@line 226
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0; //@line 227
}
function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP; //@line 14388
 STACKTOP = STACKTOP + 16 | 0; //@line 14389
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14389
 if (!(_pthread_once(23112, 7) | 0)) {
  $3 = _pthread_getspecific(HEAP32[5779] | 0) | 0; //@line 14395
  STACKTOP = sp; //@line 14396
  return $3 | 0; //@line 14396
 } else {
  _abort_message(17918, sp); //@line 14398
 }
 return 0; //@line 14401
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32808
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32810
 $6 = $2 + 1928 | 0; //@line 32813
 HEAP32[$6 >> 2] = HEAP32[___async_retval >> 2]; //@line 32814
 __ZN7LoRaPHY18set_radio_instanceER9LoRaRadio($2 + 1336 | 0, $4); //@line 32816
 HEAP32[___async_retval >> 2] = HEAP32[$6 >> 2]; //@line 32819
 return;
}
function __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = -1003; //@line 5196
 } else {
  if (!(HEAP32[$1 + 12 >> 2] | 0)) {
   $$0 = -1003; //@line 5202
  } else {
   __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1); //@line 5205
   $$0 = 0; //@line 5206
  }
 }
 return $$0 | 0; //@line 5209
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 14556
 }
 return;
}
function __ZN16SX1276_LoRaRadio15timeout_irq_isrEv($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2831
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2832
 __ZN16SX1276_LoRaRadio18handle_timeout_irqEv($0); //@line 2833
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 127; //@line 2836
  sp = STACKTOP; //@line 2837
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2840
  return;
 }
}
function __ZL25default_terminate_handlerv__async_cb_484($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 34932
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 34934
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 34936
 HEAP32[$2 >> 2] = 17779; //@line 34937
 HEAP32[$2 + 4 >> 2] = $4; //@line 34939
 HEAP32[$2 + 8 >> 2] = $AsyncRetVal; //@line 34941
 _abort_message(17643, $2); //@line 34942
}
function _sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = $0 + 20 | 0; //@line 14078
 $6 = HEAP32[$5 >> 2] | 0; //@line 14079
 $7 = (HEAP32[$0 + 16 >> 2] | 0) - $6 | 0; //@line 14080
 $$ = $7 >>> 0 > $2 >>> 0 ? $2 : $7; //@line 14082
 _memcpy($6 | 0, $1 | 0, $$ | 0) | 0; //@line 14084
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $$; //@line 14087
 return $2 | 0; //@line 14088
}
function __ZN6events10EventQueueC2EjPh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = $0 + 184 | 0; //@line 4189
 HEAP32[$3 >> 2] = 0; //@line 4190
 HEAP32[$3 + 4 >> 2] = 0; //@line 4190
 HEAP32[$3 + 8 >> 2] = 0; //@line 4190
 HEAP32[$3 + 12 >> 2] = 0; //@line 4190
 if (!$2) {
  _equeue_create($0, $1) | 0; //@line 4193
  return;
 } else {
  _equeue_create_inplace($0, $1, $2) | 0; //@line 4196
  return;
 }
}
function _abort_message__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 35733
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35735
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 35736
 _fputc(10, $2) | 0; //@line 35737
 if (!___async) {
  ___async_unwind = 0; //@line 35740
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 750; //@line 35742
 sp = STACKTOP; //@line 35743
 return;
}
function __ZN6events10EventQueue6cancelEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4211
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4212
 _equeue_cancel($0, $1); //@line 4213
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 167; //@line 4216
  sp = STACKTOP; //@line 4217
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4220
  return;
 }
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_387($0) {
 $0 = $0 | 0;
 var $2 = 0, $9 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19709
 HEAP32[(__ZN11LoRaMacMcps16get_confirmationEv($2 + 288 | 0) | 0) + 4 >> 2] = 2; //@line 19713
 HEAP32[(__ZN11LoRaMacMlme16get_confirmationEv($2 + 264 | 0) | 0) + 4 >> 2] = 2; //@line 19717
 $9 = $2 + 944 | 0; //@line 19718
 HEAP8[$9 >> 0] = HEAP8[$9 >> 0] | 32; //@line 19721
 return;
}
function __ZN7LoRaPHYC2ER18LoRaWANTimeHandler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var dest = 0, stop = 0;
 HEAP32[$0 >> 2] = 880; //@line 25085
 HEAP32[$0 + 4 >> 2] = 0; //@line 25087
 HEAP32[$0 + 8 >> 2] = $1; //@line 25089
 dest = $0 + 12 | 0; //@line 25091
 stop = dest + 124 | 0; //@line 25091
 do {
  HEAP32[dest >> 2] = 0; //@line 25091
  dest = dest + 4 | 0; //@line 25091
 } while ((dest | 0) < (stop | 0));
 return;
}
function _handle_lora_downlink__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32002
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32006
 _memcpy($2 + 788 | 0, HEAP32[$0 + 8 >> 2] | 0, $6 | 0) | 0; //@line 32008
 HEAP8[$2 + 782 >> 0] = $6; //@line 32011
 HEAP8[$2 + 781 >> 0] = -35; //@line 32013
 HEAP8[$2 + 780 >> 0] = -5; //@line 32015
 HEAP8[$2 + 783 >> 0] = 1; //@line 32017
 return;
}
function _add_pkcs_padding($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$09 = 0, $3 = 0, $5 = 0, $7 = 0;
 $3 = $1 - $2 | 0; //@line 2495
 if (!$3) {
  return;
 }
 $5 = $3 & 255; //@line 2500
 $$09 = 0; //@line 2501
 $7 = 0; //@line 2501
 do {
  HEAP8[$0 + ($7 + $2) >> 0] = $5; //@line 2505
  $$09 = $$09 + 1 << 24 >> 24; //@line 2506
  $7 = $$09 & 255; //@line 2507
 } while ($3 >>> 0 > $7 >>> 0);
 return;
}
function _gpio_irq_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0;
 if (($1 | 0) == -1) {
  $$0 = -1; //@line 6615
  return $$0 | 0; //@line 6616
 }
 HEAP32[5548] = $2; //@line 6618
 HEAP32[$0 >> 2] = $1; //@line 6619
 HEAP32[$0 + 4 >> 2] = $1; //@line 6621
 _emscripten_asm_const_iii(9, $3 | 0, $1 | 0) | 0; //@line 6622
 $$0 = 0; //@line 6623
 return $$0 | 0; //@line 6624
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21181
 if ((HEAP32[$2 + 24 >> 2] | 0) == 1) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 + 16 >> 2]; //@line 21192
  $$0 = 1; //@line 21193
 } else {
  $$0 = 0; //@line 21195
 }
 HEAP8[___async_retval >> 0] = $$0 & 1; //@line 21199
 return;
}
function _vsnprintf__async_cb($0) {
 $0 = $0 | 0;
 var $13 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16912
 if (HEAP32[$0 + 4 >> 2] | 0) {
  $13 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 16915
  HEAP8[$13 + ((($13 | 0) == (HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 16920
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 16923
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 15150
 STACKTOP = STACKTOP + 16 | 0; //@line 15151
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15151
 _free($0); //@line 15153
 if (!(_pthread_setspecific(HEAP32[5779] | 0, 0) | 0)) {
  STACKTOP = sp; //@line 15158
  return;
 } else {
  _abort_message(18017, sp); //@line 15160
 }
}
function __ZN4mbed5Timer5startEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $13 = 0, $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3703
 $6 = ___async_retval; //@line 3705
 $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 3710
 $13 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 3712
 HEAP32[$13 >> 2] = HEAP32[$6 >> 2]; //@line 3714
 HEAP32[$13 + 4 >> 2] = $11; //@line 3717
 HEAP32[$4 >> 2] = 1; //@line 3718
 return;
}
function __ZN16LoRaWANInterface7receiveEhPhti($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0;
 if (($2 | 0) == 0 | $3 << 16 >> 16 == 0) {
  $$0 = -1003; //@line 5180
  return $$0 | 0; //@line 5181
 }
 $$0 = __ZN12LoRaWANStack9handle_rxEhPhth(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1, $2, $3, $4 & 255) | 0; //@line 5186
 return $$0 | 0; //@line 5187
}
function _serial_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $4 = 0, $9 = 0;
 HEAP32[$0 + 4 >> 2] = $2; //@line 6644
 HEAP32[$0 >> 2] = $1; //@line 6645
 HEAP32[5549] = 1; //@line 6646
 $4 = $0; //@line 6647
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 6652
 $10 = 22200; //@line 6653
 HEAP32[$10 >> 2] = HEAP32[$4 >> 2]; //@line 6655
 HEAP32[$10 + 4 >> 2] = $9; //@line 6658
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 14632
 }
 return;
}
function __ZN11LoRaMacMcps18reset_confirmationEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 36 | 0; //@line 21866
 HEAP32[$1 >> 2] = 0; //@line 21867
 HEAP32[$1 + 4 >> 2] = 0; //@line 21867
 HEAP32[$1 + 8 >> 2] = 0; //@line 21867
 HEAP32[$1 + 12 >> 2] = 0; //@line 21867
 HEAP32[$1 + 16 >> 2] = 0; //@line 21867
 HEAP32[$1 + 20 >> 2] = 0; //@line 21867
 HEAP32[$0 + 40 >> 2] = 1; //@line 21869
 return;
}
function _equeue_sema_create($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $4 = 0;
 $1 = _pthread_mutex_init($0 | 0, 0) | 0; //@line 4891
 if (!$1) {
  $4 = _pthread_cond_init($0 + 28 | 0, 0) | 0; //@line 4895
  if (!$4) {
   HEAP8[$0 + 76 >> 0] = 0; //@line 4899
   $$0 = 0; //@line 4900
  } else {
   $$0 = $4; //@line 4902
  }
 } else {
  $$0 = $1; //@line 4905
 }
 return $$0 | 0; //@line 4907
}
function __ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33310
 $7 = __ZN10LoRaMacMib11get_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params($2 + 348 | 0, HEAP32[$0 + 8 >> 2] | 0, $2 + 360 | 0) | 0; //@line 33315
 HEAP32[___async_retval >> 2] = $7; //@line 33317
 return;
}
function _wait_ms($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6912
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6913
 _emscripten_sleep($0 | 0); //@line 6914
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 729; //@line 6917
  sp = STACKTOP; //@line 6918
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6921
  return;
 }
}
function _equeue_tick() {
 var $0 = 0, sp = 0;
 sp = STACKTOP; //@line 4854
 STACKTOP = STACKTOP + 16 | 0; //@line 4855
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4855
 $0 = sp; //@line 4856
 _gettimeofday($0 | 0, 0) | 0; //@line 4857
 STACKTOP = sp; //@line 4864
 return ((HEAP32[$0 + 4 >> 2] | 0) / 1e3 | 0) + ((HEAP32[$0 >> 2] | 0) * 1e3 | 0) | 0; //@line 4864
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP; //@line 15135
 STACKTOP = STACKTOP + 16 | 0; //@line 15136
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15136
 if (!(_pthread_key_create(23116, 759) | 0)) {
  STACKTOP = sp; //@line 15141
  return;
 } else {
  _abort_message(17967, sp); //@line 15143
 }
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 if ((HEAP32[$1 + 4 >> 2] | 0) == ($2 | 0)) {
  $7 = $1 + 28 | 0; //@line 14696
  if ((HEAP32[$7 >> 2] | 0) != 1) {
   HEAP32[$7 >> 2] = $3; //@line 14700
  }
 }
 return;
}
function __ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_317($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5306
 HEAP32[$4 + 988 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) | 0; //@line 5310
 HEAP32[___async_retval >> 2] = 0; //@line 5312
 return;
}
function _mbedtls_gcm_free__async_cb($0) {
 $0 = $0 | 0;
 var $$034$i = 0, $$05$i = 0;
 $$034$i = 400; //@line 34671
 $$05$i = HEAP32[$0 + 4 >> 2] | 0; //@line 34671
 while (1) {
  $$034$i = $$034$i + -1 | 0; //@line 34673
  HEAP8[$$05$i >> 0] = 0; //@line 34675
  if (!$$034$i) {
   break;
  } else {
   $$05$i = $$05$i + 1 | 0; //@line 34680
  }
 }
 return;
}
function _mbedtls_aes_free($0) {
 $0 = $0 | 0;
 var $$02$i = 0, $$031$i = 0;
 if (!$0) {
  return;
 }
 $$02$i = $0; //@line 26433
 $$031$i = 280; //@line 26433
 while (1) {
  $$031$i = $$031$i + -1 | 0; //@line 26435
  HEAP8[$$02$i >> 0] = 0; //@line 26437
  if (!$$031$i) {
   break;
  } else {
   $$02$i = $$02$i + 1 | 0; //@line 26442
  }
 }
 return;
}
function _emscripten_alloc_async_context(len, sp) {
 len = len | 0;
 sp = sp | 0;
 var new_frame = 0;
 new_frame = stackAlloc(len + 8 | 0) | 0; //@line 256
 HEAP32[new_frame + 4 >> 2] = sp; //@line 258
 HEAP32[new_frame >> 2] = ___async_cur_frame; //@line 260
 ___async_cur_frame = new_frame; //@line 261
 return ___async_cur_frame + 8 | 0; //@line 262
}
function __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $8 = 0;
 $1 = $0 + 2 | 0; //@line 19892
 $3 = HEAPU8[$1 >> 0] | 0; //@line 19894
 $8 = HEAPU8[$0 + 3 >> 0] | 0; //@line 19899
 _memcpy($0 + 4 + $3 | 0, $0 + 132 | 0, $8 | 0) | 0; //@line 19900
 HEAP8[$1 >> 0] = $3 + $8; //@line 19903
 return;
}
function b324(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 p11 = p11 | 0;
 p12 = p12 | 0;
 p13 = p13 | 0;
 p14 = p14 | 0;
 nullFunc_viiiiiiiiiiiiiii(0); //@line 1499
}
function __ZN16LoRaWANInterface10initializeEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = -1003; //@line 4928
 } else {
  $$0 = __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 4932
 }
 return $$0 | 0; //@line 4934
}
function __ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 6485
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 6485
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 6485
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 8275
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 8275
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 8275
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 6435
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 6435
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 6435
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 8941
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 8941
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 8941
 return;
}
function __ZN7LoRaPHY15apply_DR_offsetEaa($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $5 = 0;
 $5 = ($1 & 255) - ($2 & 255) | 0; //@line 24806
 if (!($5 & 128)) {
  $$0 = $5 & 255; //@line 24811
  return $$0 | 0; //@line 24812
 }
 $$0 = HEAP8[$0 + 26 >> 0] | 0; //@line 24816
 return $$0 | 0; //@line 24817
}
function _gpio_init_inout($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 HEAP32[$0 >> 2] = $1; //@line 6578
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 6584
 _emscripten_asm_const_iiiiii(8, $0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0) | 0; //@line 6585
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21375
 if (!$2) {
  $12 = HEAPU16[HEAP32[$0 + 8 >> 2] >> 1] | 0; //@line 21384
 } else {
  $12 = $2 << 16 >> 16; //@line 21388
 }
 HEAP16[___async_retval >> 1] = $12; //@line 21392
 return;
}
function ___cxa_can_catch__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP8[___async_retval >> 0] & 1; //@line 22497
 if ($AsyncRetVal) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 22501
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal & 1; //@line 22504
 return;
}
function b322(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 p11 = p11 | 0;
 p12 = p12 | 0;
 p13 = p13 | 0;
 nullFunc_viiiiiiiiiiiiii(0); //@line 1496
}
function __ZN11LoRaMacMlme18reset_confirmationEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 8 | 0; //@line 22707
 HEAP32[$1 >> 2] = 0; //@line 22708
 HEAP32[$1 + 4 >> 2] = 0; //@line 22708
 HEAP32[$1 + 8 >> 2] = 0; //@line 22708
 HEAP32[$1 + 12 >> 2] = 0; //@line 22708
 HEAP32[$0 + 12 >> 2] = 1; //@line 22710
 return;
}
function __ZN4mbed8CallbackIFvPhtsaEE13function_moveINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 13081
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 13081
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 13081
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 3110
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 3110
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 3110
 return;
}
function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits; //@line 245
  return low << bits; //@line 246
 }
 tempRet0 = low << bits - 32; //@line 248
 return 0; //@line 249
}
function __ZN7LoRaPHY26get_next_lower_tx_datarateEa($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink = 0;
 $$sink = HEAP8[((HEAP8[$0 + 132 >> 0] & 1) == 0 ? $0 + 26 | 0 : $0 + 35 | 0) >> 0] | 0; //@line 25652
 return ($$sink << 24 >> 24 == $1 << 24 >> 24 ? $$sink : ($1 & 255) + 255 & 255) | 0; //@line 25658
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 10955
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 10955
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 10955
 return;
}
function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits; //@line 234
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits; //@line 235
 }
 tempRet0 = 0; //@line 237
 return high >>> bits - 32 | 0; //@line 238
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_22($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19729
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 19731
 HEAP32[$6 + 16 >> 2] = 0; //@line 19733
 return;
}
function _fflush__async_cb_392($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19964
 if (!(HEAP8[$0 + 4 >> 0] & 1)) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 19966
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 19969
 return;
}
function __ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_18($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18700
 HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + 364 >> 2] = 2; //@line 18702
 HEAP32[___async_retval >> 2] = $6; //@line 18704
 return;
}
function _mbedtls_aes_crypt_ecb($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (($1 | 0) == 1) {
  _mbedtls_internal_aes_encrypt($0, $2, $3) | 0; //@line 1457
 } else {
  _mbedtls_internal_aes_decrypt($0, $2, $3) | 0; //@line 1459
 }
 return 0; //@line 1461
}
function __GLOBAL__sub_I_main_cpp__async_cb_363($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = 22488; //@line 17914
 stop = dest + 48 | 0; //@line 17914
 do {
  HEAP32[dest >> 2] = 0; //@line 17914
  dest = dest + 4 | 0; //@line 17914
 } while ((dest | 0) < (stop | 0));
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_272($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 2460
 __ZN4mbed5TimerD2Ev(HEAP32[$0 + 4 >> 2] | 0); //@line 2461
 HEAP8[___async_retval >> 0] = $6 & 1; //@line 2464
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP; //@line 4
 STACKTOP = STACKTOP + size | 0; //@line 5
 STACKTOP = STACKTOP + 15 & -16; //@line 6
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0); //@line 7
 return ret | 0; //@line 9
}
function _equeue_post__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20105
 _equeue_sema_signal((HEAP32[$0 + 4 >> 2] | 0) + 48 | 0); //@line 20107
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 20109
 return;
}
function _gpio_init_out_ex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 HEAP32[$0 >> 2] = $1; //@line 6560
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 6566
 _emscripten_asm_const_iiii(7, $0 | 0, $1 | 0, $2 | 0) | 0; //@line 6567
 return;
}
function __ZN12LoRaWANStack23set_confirmed_msg_retryEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if ($1 << 24 >> 24 == -1) {
  $$0 = -1003; //@line 9111
 } else {
  HEAP8[$0 + 2284 >> 0] = $1; //@line 9114
  $$0 = 0; //@line 9115
 }
 return $$0 | 0; //@line 9117
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_227($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 34961
 HEAP32[___async_retval >> 2] = ($AsyncRetVal | 0) == 0 ? -1016 : $AsyncRetVal; //@line 34965
 return;
}
function ___overflow__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP32[___async_retval >> 2] | 0) == 1) {
  $$0 = HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 20548
 } else {
  $$0 = -1; //@line 20550
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 20553
 return;
}
function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0; //@line 505
}
function ___lctrans_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = 0; //@line 10740
 } else {
  $$0 = ___mo_lookup(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, $0) | 0; //@line 10746
 }
 return ($$0 | 0 ? $$0 : $0) | 0; //@line 10750
}
function __ZN7LoRaMac21send_frame_on_channelEh__async_cb_486($0) {
 $0 = $0 | 0;
 var $7 = 0;
 $7 = (HEAP32[$0 + 4 >> 2] | 0) + 968 | 0; //@line 35118
 HEAP32[$7 >> 2] = HEAP32[$7 >> 2] | 1; //@line 35121
 HEAP32[___async_retval >> 2] = 0; //@line 35123
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_155($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30730
 HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 1; //@line 30733
 HEAP32[___async_retval >> 2] = 0; //@line 30735
 return;
}
function __ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_154($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30717
 HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 1; //@line 30720
 HEAP32[___async_retval >> 2] = 0; //@line 30722
 return;
}
function _mbedtls_cipher_init($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = $0; //@line 2180
 stop = dest + 68 | 0; //@line 2180
 do {
  HEAP32[dest >> 2] = 0; //@line 2180
  dest = dest + 4 | 0; //@line 2180
 } while ((dest | 0) < (stop | 0));
 return;
}
function _main() {
 var sp = 0;
 sp = STACKTOP; //@line 6964
 STACKTOP = STACKTOP + 16 | 0; //@line 6965
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6965
 _printf(15181, sp) | 0; //@line 6967
 STACKTOP = sp; //@line 6968
 return -1;
}
function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0); //@line 554
}
function _mbedtls_ccm_init($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = $0; //@line 1862
 stop = dest + 68 | 0; //@line 1862
 do {
  HEAP32[dest >> 2] = 0; //@line 1862
  dest = dest + 4 | 0; //@line 1862
 } while ((dest | 0) < (stop | 0));
 return;
}
function __Z15decrypt_payloadPKhtS0_jhjPh($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 return __Z15encrypt_payloadPKhtS0_jhjPh($0, $1, $2, $3, $4, $5, $6) | 0; //@line 21654
}
function _fputc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31507
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 31508
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 31510
 return;
}
function _putc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21077
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 21078
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 21080
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_233($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 35315
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = 6; //@line 35320
 HEAP32[___async_retval >> 2] = $2; //@line 35322
 return;
}
function _emscripten_free_async_context(ctx) {
 ctx = ctx | 0;
 assert((___async_cur_frame + 8 | 0) == (ctx | 0) | 0); //@line 268
 stackRestore(___async_cur_frame | 0); //@line 269
 ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 270
}
function __ZN7LoRaPHY15get_ack_timeoutEv($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0;
 $5 = HEAPU16[$0 + 50 >> 1] | 0; //@line 25705
 $6 = HEAPU16[$0 + 52 >> 1] | 0; //@line 25706
 return $5 - $6 + ((_rand() | 0) % ($6 << 1 | 1 | 0) | 0) | 0; //@line 25713
}
function ___DOUBLE_BITS_677($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 13737
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 13737
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 13739
 return $1 | 0; //@line 13740
}
function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ($0 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $0; //@line 10321
  $$0 = -1; //@line 10322
 } else {
  $$0 = $0; //@line 10324
 }
 return $$0 | 0; //@line 10326
}
function _gpio_init_out($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 6544
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 6550
 _emscripten_asm_const_iii(6, $0 | 0, $1 | 0) | 0; //@line 6551
 return;
}
function _gpio_init_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 6529
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 6535
 _emscripten_asm_const_iii(5, $0 | 0, $1 | 0) | 0; //@line 6536
 return;
}
function _equeue_sema_signal($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 4913
 HEAP8[$0 + 76 >> 0] = 1; //@line 4915
 _pthread_cond_signal($0 + 28 | 0) | 0; //@line 4917
 _pthread_mutex_unlock($0 | 0) | 0; //@line 4918
 return;
}
function __ZN16LoRaWANInterface16get_channel_planER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5070
}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0; //@line 35797
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0; //@line 35798
 return (tempRet0 = h, a - c >>> 0 | 0) | 0; //@line 35799
}
function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0; //@line 498
}
function __ZN4mbed6Ticker5setupEy($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0;
 $4 = ___udivdi3($1 | 0, $2 | 0, 1e3, 0) | 0; //@line 6881
 _emscripten_asm_const_iii(12, $0 + 40 | 0, $4 | 0) | 0; //@line 6883
 return;
}
function __ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack12add_channelsERK16lora_channelplan(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5061
}
function _equeue_enqueue__async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18813
 _equeue_mutex_unlock(HEAP32[$0 + 4 >> 2] | 0); //@line 18814
 HEAP32[___async_retval >> 2] = $4; //@line 18816
 return;
}
function __ZN16LoRaWANInterface22add_link_check_requestEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 4 >> 0] = 1; //@line 5007
 return __ZN12LoRaWANStack22set_link_check_requestEv(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0) | 0; //@line 5010
}
function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 2691
 ___cxa_begin_catch($0 | 0) | 0; //@line 2692
 _emscripten_alloc_async_context(4, sp) | 0; //@line 2693
 __ZSt9terminatev(); //@line 2694
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_301($0) {
 $0 = $0 | 0;
 HEAP8[HEAP32[$0 + 8 >> 2] >> 0] = HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 4446
 HEAP8[___async_retval >> 0] = 1; //@line 4449
 return;
}
function _aes_ctx_alloc() {
 var $$0 = 0, $0 = 0;
 $0 = _calloc(1, 280) | 0; //@line 3080
 if (!$0) {
  $$0 = 0; //@line 3083
 } else {
  _mbedtls_aes_init($0); //@line 3085
  $$0 = $0; //@line 3086
 }
 return $$0 | 0; //@line 3088
}
function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0); //@line 547
}
function ___cxa_guard_acquire($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP8[$0 >> 0] | 0) == 1) {
  $$0 = 0; //@line 16012
 } else {
  HEAP8[$0 >> 0] = 1; //@line 16014
  $$0 = 1; //@line 16015
 }
 return $$0 | 0; //@line 16017
}
function __ZN16LoRaWANInterface25set_confirmed_msg_retriesEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack23set_confirmed_msg_retryEh(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5052
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_333($0) {
 $0 = $0 | 0;
 HEAP8[HEAP32[$0 + 8 >> 2] >> 0] = HEAP8[$0 + 4 >> 0] | 0; //@line 6462
 HEAP8[___async_retval >> 0] = 1; //@line 6465
 return;
}
function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0; //@line 491
}
function _aes_crypt_cbc_wrap($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return _mbedtls_aes_crypt_cbc($0, $1, $2, $3, $4, $5) | 0; //@line 3057
}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0; //@line 35789
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0; //@line 35791
}
function __ZN7LoRaMac17on_radio_rx_errorEv__async_cb_67($0) {
 $0 = $0 | 0;
 var $3 = 0;
 $3 = (HEAP32[$0 + 4 >> 2] | 0) + 944 | 0; //@line 22815
 HEAP8[$3 >> 0] = HEAP8[$3 >> 0] | 32; //@line 22818
 return;
}
function __ZN16LoRaWANInterface12set_datarateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack21set_channel_data_rateEh(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5027
}
function __ZN16LoRaWANInterface25disable_adaptive_datarateEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack24enable_adaptive_datarateEb(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, 0) | 0; //@line 5043
}
function __ZN16LoRaWANInterface14remove_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack16remove_a_channelEh(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, $1) | 0; //@line 5087
}
function __ZN7LoRaPHY15get_max_payloadEhb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return HEAP8[(HEAP32[($2 ? $0 + 104 | 0 : $0 + 96 | 0) >> 2] | 0) + ($1 & 255) >> 0] | 0; //@line 25687
}
function __ZN16LoRaWANInterface24enable_adaptive_datarateEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack24enable_adaptive_datarateEb(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0, 1) | 0; //@line 5035
}
function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0); //@line 540
}
function __ZN7LoRaPHY15verify_tx_powerEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ((HEAP8[$0 + 22 >> 0] | 0) <= $1 << 24 >> 24 ? (HEAP8[$0 + 21 >> 0] | 0) >= $1 << 24 >> 24 : 0) | 0; //@line 25824
}
function __ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_127($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 26007
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_234($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 6; //@line 35333
 HEAP32[___async_retval >> 2] = -1014; //@line 35335
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_177($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 31923
 return;
}
function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) {
  $$0 = 0; //@line 12797
 } else {
  $$0 = _wcrtomb($0, $1, 0) | 0; //@line 12800
 }
 return $$0 | 0; //@line 12802
}
function __ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb_288($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 3693
 return;
}
function __ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = HEAP8[___async_retval >> 0] & 1 ? 3 : 0; //@line 3386
 return;
}
function __ZN7LoRaPHY13mask_bit_testEPKtj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return (1 << ($2 & 15) & (HEAPU16[$1 + ($2 >>> 4 << 1) >> 1] | 0) | 0) != 0 | 0; //@line 25108
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_248($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 1063
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_181($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 32206
 return;
}
function __ZN16LoRaWANInterface19remove_channel_planEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack17drop_channel_listEv(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0) | 0; //@line 5078
}
function __ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb_295($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 4064
 return;
}
function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 15](a1 | 0, a2 | 0, a3 | 0) | 0; //@line 484
}
function ___dynamic_cast__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) == 1 ? HEAP32[$0 + 8 >> 2] | 0 : 0; //@line 32852
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_482($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 34591
 return;
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_39($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 20842
 return;
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_36($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 20770
 return;
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_35($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 20762
 return;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0; //@line 214
}
function __ZN18LoRaWANTimeHandler16get_elapsed_timeEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (__ZN6events10EventQueue4tickEv(HEAP32[$0 >> 2] | 0) | 0) - $1 | 0; //@line 26163
}
function __ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb_102($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 24553
 return;
}
function __ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 20754
 return;
}
function b42(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(3); //@line 677
 return 0; //@line 677
}
function b41(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(0); //@line 674
 return 0; //@line 674
}
function _emscripten_realloc_async_context(len) {
 len = len | 0;
 stackRestore(___async_cur_frame | 0); //@line 275
 return (stackAlloc(len + 8 | 0) | 0) + 8 | 0; //@line 276
}
function __ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 23163
 return;
}
function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase; //@line 21
 STACK_MAX = stackMax; //@line 22
}
function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 7](a1 | 0, a2 | 0, a3 | 0); //@line 533
}
function __ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_390($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 19844
 return;
}
function __ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb_334($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 6491
 return;
}
function __ZN5Sht31C2E7PinNameS0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 _emscripten_asm_const_iiii(13, $0 | 0, $1 | 0, $2 | 0) | 0; //@line 6931
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack22set_link_check_requestEv__async_cb_266($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 1573
 return;
}
function __ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_312($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 5051
 return;
}
function __ZN7LoRaPHY23get_minimum_tx_datarateEv($0) {
 $0 = $0 | 0;
 return HEAP8[((HEAP8[$0 + 132 >> 0] & 1) == 0 ? $0 + 26 | 0 : $0 + 35 | 0) >> 0] | 0; //@line 25672
}
function __ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 3683
 return;
}
function _swapc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = _llvm_bswap_i32($0 | 0) | 0; //@line 10876
 return (($1 | 0) == 0 ? $0 : $3) | 0; //@line 10878
}
function __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11set_channelEj__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 692 >> 2] = HEAP32[$0 + 8 >> 2]; //@line 30623
 return;
}
function __ZN16LoRaWANInterface10disconnectEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack8shutdownEv(__ZN12LoRaWANStack17get_lorawan_stackEv() | 0) | 0; //@line 5000
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 15235
 __ZdlPv($0); //@line 15236
 return;
}
function _aes_crypt_ecb_wrap($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return _mbedtls_aes_crypt_ecb($0, $1, $2, $3) | 0; //@line 3045
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 14918
 __ZdlPv($0); //@line 14919
 return;
}
function _srand($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = 19544; //@line 14095
 HEAP32[$2 >> 2] = $0 + -1; //@line 14097
 HEAP32[$2 + 4 >> 2] = 0; //@line 14100
 return;
}
function __ZN18LoRaWANTimeHandler24activate_timer_subsystemEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 26144
 return;
}
function __ZN12LoRaWANStack17drop_channel_listEv__async_cb_77($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 23474
 return;
}
function _gcm_ctx_alloc() {
 var $0 = 0;
 $0 = _calloc(1, 400) | 0; //@line 3011
 if ($0 | 0) {
  _mbedtls_gcm_init($0); //@line 3014
 }
 return $0 | 0; //@line 3016
}
function __ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb_43($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 688 >> 0] = 0; //@line 20977
 return;
}
function __ZN12LoRaWANStack16remove_a_channelEh__async_cb_73($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 23153
 return;
}
function _ccm_ctx_alloc() {
 var $0 = 0;
 $0 = _calloc(1, 68) | 0; //@line 2963
 if ($0 | 0) {
  _mbedtls_ccm_init($0); //@line 2966
 }
 return $0 | 0; //@line 2968
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 14446
 __ZdlPv($0); //@line 14447
 return;
}
function __ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 1670
 return;
}
function __ZN12LoRaWANStack17send_frame_to_macEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 17533
 return;
}
function _ticker_set_handler__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 4 >> 2] >> 2] = HEAP32[$0 + 8 >> 2]; //@line 20063
 return;
}
function _out_670($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (!(HEAP32[$0 >> 2] & 32)) {
  ___fwritex($1, $2, $0) | 0; //@line 12282
 }
 return;
}
function ___cxa_is_pointer_type__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[___async_retval >> 2] | 0) != 0 & 1; //@line 24535
 return;
}
function __ZN7LoRaMac21remove_single_channelEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 32027
 return;
}
function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw; //@line 32
  threwValue = value; //@line 33
 }
}
function b39(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(7); //@line 671
 return 0; //@line 671
}
function b38(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(6); //@line 668
 return 0; //@line 668
}
function b37(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(5); //@line 665
 return 0; //@line 665
}
function b36(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(0); //@line 662
 return 0; //@line 662
}
function __ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 4054
 return;
}
function __ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1e3; //@line 16425
 return;
}
function __ZN7LoRaMac19remove_channel_planEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 26055
 return;
}
function __ZN18LoRaMacChannelPlan30activate_channelplan_subsystemEP7LoRaPHY($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 19155
 return;
}
function b320(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(0); //@line 1493
}
function __ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_100($0) {
 $0 = $0 | 0;
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 364 >> 2] = 1; //@line 24432
 return;
}
function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 31](a1 | 0, a2 | 0) | 0; //@line 477
}
function __ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed5TimerD2Ev($0) {
 $0 = $0 | 0;
 if (HEAP32[$0 >> 2] | 0) {
  if (HEAP8[$0 + 28 >> 0] | 0) {}
 }
 HEAP32[$0 >> 2] = 0; //@line 4011
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($0 | 0) == ($1 | 0) | 0; //@line 14643
}
function __ZN7LoRaMac22get_phy_event_handlersEv__async_cb_14($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 8 >> 2]; //@line 18373
 return;
}
function __ZN16LoRaWANInterface7connectEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 2356
 return;
}
function __ZN7LoRaPHY16get_channel_maskEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return HEAP32[($1 ? $0 + 124 | 0 : $0 + 120 | 0) >> 2] | 0; //@line 25724
}
function __ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 24543
 return;
}
function __Z22compute_join_frame_micPKhtS0_Pj__async_cb_81($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 23733
 return;
}
function __ZSt13get_terminatev() {
 var $0 = 0;
 $0 = HEAP32[2689] | 0; //@line 15225
 HEAP32[2689] = $0 + 0; //@line 15227
 return $0 | 0; //@line 15229
}
function __ZN18LoRaWANTimeHandler16get_current_timeEv($0) {
 $0 = $0 | 0;
 return __ZN6events10EventQueue4tickEv(HEAP32[$0 >> 2] | 0) | 0; //@line 26153
}
function _gpio_irq_free($0) {
 $0 = $0 | 0;
 _emscripten_asm_const_iii(10, HEAP32[$0 + 4 >> 2] | 0, HEAP32[$0 + 8 >> 2] | 0) | 0; //@line 6634
 return;
}
function __ZN12LoRaWANStack8shutdownEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 499
 return;
}
function _mbedtls_cipher_setkey__async_cb_195($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 32941
 return;
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_61($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 22482
 return;
}
function _mbedtls_cipher_update__async_cb_243($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 481
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb_368($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 18274
 return;
}
function __ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _aes_setkey_enc_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return _mbedtls_aes_setkey_enc($0, $1, $2) | 0; //@line 3066
}
function _aes_setkey_dec_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return _mbedtls_aes_setkey_dec($0, $1, $2) | 0; //@line 3075
}
function __ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 0; //@line 32190
 return;
}
function __ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_310($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 4970
 return;
}
function __Z11compute_micPKhtS0_jhjPj__async_cb_107($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 24839
 return;
}
function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 31](a1 | 0, a2 | 0); //@line 526
}
function _mbedtls_cipher_setkey__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 32931
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio6randomEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 31910
 return;
}
function __ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 6479
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_237($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1011; //@line 35365
 return;
}
function __ZN11LoRaMacMlme23activate_mlme_subsystemEP7LoRaPHY($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 22732
 return;
}
function _mbedtls_cipher_update__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 341
 return;
}
function _gcm_aes_setkey_wrap__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 26096
 return;
}
function _ccm_aes_setkey_wrap__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 32835
 return;
}
function __ZN16SX1276_LoRaRadio7standbyEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 688 >> 0] = 0; //@line 23004
 return;
}
function __ZN12LoRaWANStack22set_link_check_requestEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1003; //@line 1561
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack21set_channel_data_rateEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1003; //@line 4962
 return;
}
function __ZN10LoRaMacMib22activate_mib_subsystemEP7LoRaPHY($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 21909
 return;
}
function _mbedtls_ccm_setkey__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 6501
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b34(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(3); //@line 659
 return 0; //@line 659
}
function b33(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(0); //@line 656
 return 0; //@line 656
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_270($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY18set_radio_instanceER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 4 >> 2] = $1; //@line 25116
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_236($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 35355
 return;
}
function __ZN12LoRaWANStack18lora_state_machineEv__async_cb_235($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 35345
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack17drop_channel_listEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 23464
 return;
}
function b318(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(0); //@line 1490
}
function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0; //@line 302
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN14LoRaMacCommand29is_sticky_mac_command_pendingEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 3 >> 0] | 0) != 0 | 0; //@line 21228
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_54($0) {
 $0 = $0 | 0;
 HEAP16[___async_retval >> 1] = -1015; //@line 21593
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhth__async_cb_53($0) {
 $0 = $0 | 0;
 HEAP16[___async_retval >> 1] = -1003; //@line 21583
 return;
}
function __ZN12LoRaWANStack16remove_a_channelEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1012; //@line 23143
 return;
}
function __ZN12LoRaWANStack17get_lorawan_stackEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 19552; //@line 489
 return;
}
function _fflush__async_cb_393($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 19979
 return;
}
function __ZN7LoRaPHY32is_custom_channel_plan_supportedEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 16 >> 0] | 0) != 0 | 0; //@line 25749
}
function _strerror($0) {
 $0 = $0 | 0;
 return ___strerror_l($0, HEAP32[(___pthread_self_85() | 0) + 188 >> 2] | 0) | 0; //@line 12745
}
function _fputc__async_cb_449($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 31520
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _putchar__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 22707
 return;
}
function _putc__async_cb_46($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 21090
 return;
}
function __ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 >> 0] | 0) != 0 | 0; //@line 19927
}
function __ZN7LoRaPHYD2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 880; //@line 22780
 HEAP32[$0 + 4 >> 2] = 0; //@line 22782
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function _printf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 19484
 return;
}
function __ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = 0; //@line 24562
 return;
}
function __ZN4mbed8CallbackIFvPhtsaEE13function_dtorINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 15](a1 | 0) | 0; //@line 470
}
function __ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 1 >> 0] | 0) != 0 | 0; //@line 19944
}
function __ZN7LoRaMac11schedule_txEv__async_cb_478($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 34090
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_477($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 34078
 return;
}
function __ZN12LoRaWANStack23mlme_indication_handlerEP25loramac_mlme_indication_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}
function __ZN7LoRaPHY21verify_nb_join_trialsEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ($1 & 255) > 11 | 0; //@line 25832
}
function __ZN16LoRaWANInterface25remove_link_check_requestEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 4 >> 0] = 0; //@line 5017
 return;
}
function __ZNK14LoRaMacCommand26get_repeat_commands_lengthEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 3 >> 0] | 0; //@line 19912
}
function __ZN4mbed11InterruptInD0Ev__async_cb_97($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 24291
 return;
}
function __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 >> 0] = 0; //@line 19918
 return;
}
function __ZSt11__terminatePFvvE__async_cb($0) {
 $0 = $0 | 0;
 _abort_message(18070, HEAP32[$0 + 4 >> 2] | 0); //@line 21522
}
function __ZN12LoRaPHYEU868D0Ev($0) {
 $0 = $0 | 0;
 __ZN7LoRaPHYD2Ev($0); //@line 25992
 __ZdlPv($0); //@line 25993
 return;
}
function __ZN4mbed6Ticker6detachEv($0) {
 $0 = $0 | 0;
 _emscripten_asm_const_ii(11, $0 + 40 | 0) | 0; //@line 6891
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_191($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_187($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_186($0) {
 $0 = $0 | 0;
 return;
}
function b31(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(15); //@line 653
 return 0; //@line 653
}
function __ZN16SX1276_LoRaRadioD0Ev__async_cb($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 23456
 return;
}
function b30(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(0); //@line 650
 return 0; //@line 650
}
function __ZN7LoRaPHY29get_maximum_frame_counter_gapEv($0) {
 $0 = $0 | 0;
 return HEAP16[$0 + 48 >> 1] | 0; //@line 25695
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed7TimeoutD0Ev__async_cb_337($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 6591
 return;
}
function __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 1 >> 0] = 0; //@line 19934
 return;
}
function __ZN14LoRaMacCommand20clear_command_bufferEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2 >> 0] = 0; //@line 19783
 return;
}
function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 1023](a1 | 0); //@line 519
}
function b316(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(7); //@line 1487
}
function b315(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(6); //@line 1484
}
function b314(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(5); //@line 1481
}
function b313(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(0); //@line 1478
}
function __ZN4mbed6TickerD0Ev__async_cb_47($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 21117
 return;
}
function __ZN14LoRaMacCommand19clear_repeat_bufferEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 3 >> 0] = 0; //@line 19885
 return;
}
function __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 2 >> 0] | 0; //@line 19792
}
function __ZN7LoRaPHY25get_default_rx2_frequencyEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 68 >> 2] | 0; //@line 25630
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_120($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_119($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_118($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_112($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_173($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_172($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_171($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_170($0) {
 $0 = $0 | 0;
 return;
}
function _equeue_event_delay($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -16 >> 2] = $1; //@line 4840
 return;
}
function __ZN7LoRaPHY24get_default_rx2_datarateEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 64 >> 0] | 0; //@line 25638
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_193($0) {
 $0 = $0 | 0;
 return;
}
function _equeue_event_dtor($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -8 >> 2] = $1; //@line 4849
 return;
}
function __ZN7LoRaPHY23get_default_tx_datarateEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 30 >> 0] | 0; //@line 25622
}
function __ZN16SX1276_LoRaRadio18check_rf_frequencyEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return 1; //@line 2238
}
function __ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb_361($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_364($0) {
 $0 = $0 | 0;
 return;
}
function _aes_ctx_free($0) {
 $0 = $0 | 0;
 _mbedtls_aes_free($0); //@line 3094
 _free($0); //@line 3095
 return;
}
function __ZN7LoRaPHY20get_default_tx_powerEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 23 >> 0] | 0; //@line 25614
}
function __ZN16SX1276_LoRaRadio10get_statusEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 688 >> 0] | 0; //@line 1373
}
function __ZN7LoRaPHY19get_max_nb_channelsEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 20 >> 0] | 0; //@line 25732
}
function __ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY16get_phy_channelsEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 112 >> 2] | 0; //@line 25740
}
function __ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN14LoRaMacCommand23get_mac_commands_bufferEv($0) {
 $0 = $0 | 0;
 return $0 + 4 | 0; //@line 19799
}
function _gcm_ctx_free__async_cb($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 25281
 return;
}
function _ccm_ctx_free__async_cb($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 23447
 return;
}
function ___lctrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ___lctrans_impl($0, $1) | 0; //@line 13990
}
function __ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _equeue_mutex_unlock($0) {
 $0 = $0 | 0;
 _pthread_mutex_unlock($0 | 0) | 0; //@line 4884
 return;
}
function _equeue_mutex_create($0) {
 $0 = $0 | 0;
 return _pthread_mutex_init($0 | 0, 0) | 0; //@line 4871
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_289($0) {
 $0 = $0 | 0;
 return;
}
function __ZN14LoRaMacCommandC2Ev($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 260) | 0; //@line 19544
 return;
}
function b28(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(31); //@line 647
 return 0; //@line 647
}
function b27(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(30); //@line 644
 return 0; //@line 644
}
function b26(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(29); //@line 641
 return 0; //@line 641
}
function b25(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(28); //@line 638
 return 0; //@line 638
}
function b24(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(27); //@line 635
 return 0; //@line 635
}
function b23(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(26); //@line 632
 return 0; //@line 632
}
function b22(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(25); //@line 629
 return 0; //@line 629
}
function b21(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(24); //@line 626
 return 0; //@line 626
}
function b20(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(23); //@line 623
 return 0; //@line 623
}
function b19(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(22); //@line 620
 return 0; //@line 620
}
function b18(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(21); //@line 617
 return 0; //@line 617
}
function b17(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(20); //@line 614
 return 0; //@line 614
}
function b16(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(19); //@line 611
 return 0; //@line 611
}
function b15(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(18); //@line 608
 return 0; //@line 608
}
function b14(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(17); //@line 605
 return 0; //@line 605
}
function b13(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(0); //@line 602
 return 0; //@line 602
}
function _equeue_mutex_lock($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 4877
 return;
}
function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 7]() | 0; //@line 463
}
function __ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb_407($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaWANTimeHandlerC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 26130
 return;
}
function __ZN18LoRaMacChannelPlanC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 19141
 return;
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_460($0) {
 $0 = $0 | 0;
 return;
}
function b311(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(7); //@line 1475
}
function b310(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(6); //@line 1472
}
function b309(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(5); //@line 1469
}
function b308(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(0); //@line 1466
}
function __ZN11LoRaMacMcps16get_confirmationEv($0) {
 $0 = $0 | 0;
 return $0 + 36 | 0; //@line 21877
}
function __ZN6events10EventQueue4tickEv($0) {
 $0 = $0 | 0;
 return _equeue_tick() | 0; //@line 4205
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_445($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMlme16get_confirmationEv($0) {
 $0 = $0 | 0;
 return $0 + 8 | 0; //@line 22718
}
function _mbedtls_aes_init($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 280) | 0; //@line 26422
 return;
}
function _mbedtls_gcm_init($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 400) | 0; //@line 4130
 return;
}
function __ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_425($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMlme14get_indicationEv($0) {
 $0 = $0 | 0;
 return $0 + 4 | 0; //@line 22725
}
function __ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb_250($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaPHYEU868D2Ev($0) {
 $0 = $0 | 0;
 __ZN7LoRaPHYD2Ev($0); //@line 25985
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_355($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_354($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMlmeC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 22694
 return;
}
function __ZN11LoRaMacMcps14get_indicationEv($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 21883
}
function __ZN10LoRaMacMibC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 21895
 return;
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb_409($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_453($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_450($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_292($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio18set_public_networkEb__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 7](); //@line 512
}
function __ZN16LoRaWANInterfaceD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 5221
 return;
}
function _isdigit($0) {
 $0 = $0 | 0;
 return ($0 + -48 | 0) >>> 0 < 10 | 0; //@line 10379
}
function __ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb_309($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb_287($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_32($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_144($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_140($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_139($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_138($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_137($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_136($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_135($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_134($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_199($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_41($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_371($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac18handle_ack_timeoutEv__async_cb_271($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_122($0) {
 $0 = $0 | 0;
 return;
}
function b11(p0) {
 p0 = p0 | 0;
 nullFunc_ii(15); //@line 599
 return 0; //@line 599
}
function b10(p0) {
 p0 = p0 | 0;
 nullFunc_ii(14); //@line 596
 return 0; //@line 596
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_49($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac17handle_tx_timeoutEv__async_cb_369($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac17handle_rx_timeoutEv__async_cb_357($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11radio_resetEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b9(p0) {
 p0 = p0 | 0;
 nullFunc_ii(13); //@line 593
 return 0; //@line 593
}
function b8(p0) {
 p0 = p0 | 0;
 nullFunc_ii(12); //@line 590
 return 0; //@line 590
}
function b7(p0) {
 p0 = p0 | 0;
 nullFunc_ii(11); //@line 587
 return 0; //@line 587
}
function b6(p0) {
 p0 = p0 | 0;
 nullFunc_ii(10); //@line 584
 return 0; //@line 584
}
function ___ofl_lock() {
 ___lock(23100); //@line 10883
 return 23108; //@line 10884
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_385($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEv__async_cb_412($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_24($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_402($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_400($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_396($0) {
 $0 = $0 | 0;
 return;
}
function b5(p0) {
 p0 = p0 | 0;
 nullFunc_ii(0); //@line 581
 return 0; //@line 581
}
function b306(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(31); //@line 1463
}
function b305(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(30); //@line 1460
}
function b304(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(29); //@line 1457
}
function b303(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(28); //@line 1454
}
function b302(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(27); //@line 1451
}
function b301(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(26); //@line 1448
}
function b300(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(25); //@line 1445
}
function b299(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(24); //@line 1442
}
function b298(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(23); //@line 1439
}
function b297(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(0); //@line 1436
}
function _abort_message__async_cb_493($0) {
 $0 = $0 | 0;
 _abort(); //@line 35750
}
function __ZN7LoRaPHYD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 22789
 return;
}
function __ZN7LoRaMac15handle_rx_errorEv__async_cb_60($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac14handle_tx_doneEv__async_cb_421($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventD0Ev($0) {
 $0 = $0 | 0;
 _llvm_trap(); //@line 4137
}
function __ZN16SX1276_LoRaRadio9start_cadEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMcps23activate_mcps_subsystemEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb_349($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio5sleepEv__async_cb_63($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue6cancelEi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value; //@line 39
}
function _frexpl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_frexp($0, $1));
}
function __ZN16SX1276_LoRaRadio4sendEPhh__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___cxa_pure_virtual__wrapper() {
 ___cxa_pure_virtual(); //@line 683
}
function __ZN4mbed11InterruptInD2Ev__async_cb_96($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_90($0) {
 $0 = $0 | 0;
 return;
}
function __ZN14lorawan_timersD2Ev__async_cb_458($0) {
 $0 = $0 | 0;
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_910() {
 return _pthread_self() | 0; //@line 13911
}
function __ZN4mbed7Timeout7handlerEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEvent3irqEj__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_85() {
 return _pthread_self() | 0; //@line 13917
}
function __ZN4mbed6Ticker7handlerEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_469($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStackC2Ev__async_cb_203($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed7TimeoutD2Ev__async_cb_313($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventD2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventC2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function stackRestore(top) {
 top = top | 0;
 STACKTOP = top; //@line 16
}
function _schedule_interrupt__async_cb_307($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_306($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_303($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_302($0) {
 $0 = $0 | 0;
 return;
}
function __ZdlPv($0) {
 $0 = $0 | 0;
 _free($0); //@line 14272
 return;
}
function __ZN4mbed6TickerD2Ev__async_cb_42($0) {
 $0 = $0 | 0;
 return;
}
function _pthread_mutex_unlock(x) {
 x = x | 0;
 return 0; //@line 429
}
function _mbed_assert_internal__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio6unlockEv($0) {
 $0 = $0 | 0;
 return;
}
function _ticker_remove_event__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _pthread_mutex_lock(x) {
 x = x | 0;
 return 0; //@line 425
}
function _handle_interrupt_in__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___ofl_unlock() {
 ___unlock(23100); //@line 10889
 return;
}
function __ZN16SX1276_LoRaRadio4lockEv($0) {
 $0 = $0 | 0;
 return;
}
function b3() {
 nullFunc_i(7); //@line 578
 return 0; //@line 578
}
function b295(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1023); //@line 1433
}
function b294(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1022); //@line 1430
}
function b293(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1021); //@line 1427
}
function b292(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1020); //@line 1424
}
function b291(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1019); //@line 1421
}
function b290(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1018); //@line 1418
}
function b289(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1017); //@line 1415
}
function b288(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1016); //@line 1412
}
function b287(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1015); //@line 1409
}
function b286(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1014); //@line 1406
}
function b285(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1013); //@line 1403
}
function b284(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1012); //@line 1400
}
function b283(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1011); //@line 1397
}
function b282(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1010); //@line 1394
}
function b281(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1009); //@line 1391
}
function b280(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1008); //@line 1388
}
function b279(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1007); //@line 1385
}
function b278(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1006); //@line 1382
}
function b277(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1005); //@line 1379
}
function b276(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1004); //@line 1376
}
function b275(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1003); //@line 1373
}
function b274(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1002); //@line 1370
}
function b273(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1001); //@line 1367
}
function b2() {
 nullFunc_i(6); //@line 575
 return 0; //@line 575
}
function b1() {
 nullFunc_i(0); //@line 572
 return 0; //@line 572
}
function __ZN18LoRaWANTimeHandlerD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaMacChannelPlanD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function b272(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1e3); //@line 1364
}
function b271(p0) {
 p0 = p0 | 0;
 nullFunc_vi(999); //@line 1361
}
function b270(p0) {
 p0 = p0 | 0;
 nullFunc_vi(998); //@line 1358
}
function b269(p0) {
 p0 = p0 | 0;
 nullFunc_vi(997); //@line 1355
}
function b268(p0) {
 p0 = p0 | 0;
 nullFunc_vi(996); //@line 1352
}
function b267(p0) {
 p0 = p0 | 0;
 nullFunc_vi(995); //@line 1349
}
function b266(p0) {
 p0 = p0 | 0;
 nullFunc_vi(994); //@line 1346
}
function b265(p0) {
 p0 = p0 | 0;
 nullFunc_vi(993); //@line 1343
}
function b264(p0) {
 p0 = p0 | 0;
 nullFunc_vi(992); //@line 1340
}
function b263(p0) {
 p0 = p0 | 0;
 nullFunc_vi(991); //@line 1337
}
function b262(p0) {
 p0 = p0 | 0;
 nullFunc_vi(990); //@line 1334
}
function b261(p0) {
 p0 = p0 | 0;
 nullFunc_vi(989); //@line 1331
}
function b260(p0) {
 p0 = p0 | 0;
 nullFunc_vi(988); //@line 1328
}
function b259(p0) {
 p0 = p0 | 0;
 nullFunc_vi(987); //@line 1325
}
function b258(p0) {
 p0 = p0 | 0;
 nullFunc_vi(986); //@line 1322
}
function b257(p0) {
 p0 = p0 | 0;
 nullFunc_vi(985); //@line 1319
}
function b256(p0) {
 p0 = p0 | 0;
 nullFunc_vi(984); //@line 1316
}
function b255(p0) {
 p0 = p0 | 0;
 nullFunc_vi(983); //@line 1313
}
function b254(p0) {
 p0 = p0 | 0;
 nullFunc_vi(982); //@line 1310
}
function b253(p0) {
 p0 = p0 | 0;
 nullFunc_vi(981); //@line 1307
}
function b252(p0) {
 p0 = p0 | 0;
 nullFunc_vi(980); //@line 1304
}
function b251(p0) {
 p0 = p0 | 0;
 nullFunc_vi(979); //@line 1301
}
function b250(p0) {
 p0 = p0 | 0;
 nullFunc_vi(978); //@line 1298
}
function b249(p0) {
 p0 = p0 | 0;
 nullFunc_vi(977); //@line 1295
}
function b248(p0) {
 p0 = p0 | 0;
 nullFunc_vi(976); //@line 1292
}
function b247(p0) {
 p0 = p0 | 0;
 nullFunc_vi(975); //@line 1289
}
function b246(p0) {
 p0 = p0 | 0;
 nullFunc_vi(974); //@line 1286
}
function b245(p0) {
 p0 = p0 | 0;
 nullFunc_vi(973); //@line 1283
}
function b244(p0) {
 p0 = p0 | 0;
 nullFunc_vi(972); //@line 1280
}
function b243(p0) {
 p0 = p0 | 0;
 nullFunc_vi(971); //@line 1277
}
function b242(p0) {
 p0 = p0 | 0;
 nullFunc_vi(970); //@line 1274
}
function b241(p0) {
 p0 = p0 | 0;
 nullFunc_vi(969); //@line 1271
}
function b240(p0) {
 p0 = p0 | 0;
 nullFunc_vi(968); //@line 1268
}
function b239(p0) {
 p0 = p0 | 0;
 nullFunc_vi(967); //@line 1265
}
function b238(p0) {
 p0 = p0 | 0;
 nullFunc_vi(966); //@line 1262
}
function b237(p0) {
 p0 = p0 | 0;
 nullFunc_vi(965); //@line 1259
}
function b236(p0) {
 p0 = p0 | 0;
 nullFunc_vi(964); //@line 1256
}
function b235(p0) {
 p0 = p0 | 0;
 nullFunc_vi(963); //@line 1253
}
function b234(p0) {
 p0 = p0 | 0;
 nullFunc_vi(962); //@line 1250
}
function b233(p0) {
 p0 = p0 | 0;
 nullFunc_vi(961); //@line 1247
}
function b232(p0) {
 p0 = p0 | 0;
 nullFunc_vi(960); //@line 1244
}
function b231(p0) {
 p0 = p0 | 0;
 nullFunc_vi(959); //@line 1241
}
function b230(p0) {
 p0 = p0 | 0;
 nullFunc_vi(958); //@line 1238
}
function b229(p0) {
 p0 = p0 | 0;
 nullFunc_vi(957); //@line 1235
}
function b228(p0) {
 p0 = p0 | 0;
 nullFunc_vi(956); //@line 1232
}
function b227(p0) {
 p0 = p0 | 0;
 nullFunc_vi(955); //@line 1229
}
function b226(p0) {
 p0 = p0 | 0;
 nullFunc_vi(954); //@line 1226
}
function b225(p0) {
 p0 = p0 | 0;
 nullFunc_vi(953); //@line 1223
}
function b224(p0) {
 p0 = p0 | 0;
 nullFunc_vi(952); //@line 1220
}
function b223(p0) {
 p0 = p0 | 0;
 nullFunc_vi(951); //@line 1217
}
function b222(p0) {
 p0 = p0 | 0;
 nullFunc_vi(950); //@line 1214
}
function b221(p0) {
 p0 = p0 | 0;
 nullFunc_vi(949); //@line 1211
}
function b220(p0) {
 p0 = p0 | 0;
 nullFunc_vi(948); //@line 1208
}
function b219(p0) {
 p0 = p0 | 0;
 nullFunc_vi(947); //@line 1205
}
function b218(p0) {
 p0 = p0 | 0;
 nullFunc_vi(946); //@line 1202
}
function b217(p0) {
 p0 = p0 | 0;
 nullFunc_vi(945); //@line 1199
}
function b216(p0) {
 p0 = p0 | 0;
 nullFunc_vi(944); //@line 1196
}
function b215(p0) {
 p0 = p0 | 0;
 nullFunc_vi(943); //@line 1193
}
function b214(p0) {
 p0 = p0 | 0;
 nullFunc_vi(942); //@line 1190
}
function b213(p0) {
 p0 = p0 | 0;
 nullFunc_vi(941); //@line 1187
}
function b212(p0) {
 p0 = p0 | 0;
 nullFunc_vi(940); //@line 1184
}
function b211(p0) {
 p0 = p0 | 0;
 nullFunc_vi(939); //@line 1181
}
function b210(p0) {
 p0 = p0 | 0;
 nullFunc_vi(938); //@line 1178
}
function b209(p0) {
 p0 = p0 | 0;
 nullFunc_vi(937); //@line 1175
}
function b208(p0) {
 p0 = p0 | 0;
 nullFunc_vi(936); //@line 1172
}
function b207(p0) {
 p0 = p0 | 0;
 nullFunc_vi(935); //@line 1169
}
function b206(p0) {
 p0 = p0 | 0;
 nullFunc_vi(934); //@line 1166
}
function b205(p0) {
 p0 = p0 | 0;
 nullFunc_vi(933); //@line 1163
}
function b204(p0) {
 p0 = p0 | 0;
 nullFunc_vi(932); //@line 1160
}
function b203(p0) {
 p0 = p0 | 0;
 nullFunc_vi(931); //@line 1157
}
function b202(p0) {
 p0 = p0 | 0;
 nullFunc_vi(930); //@line 1154
}
function b201(p0) {
 p0 = p0 | 0;
 nullFunc_vi(929); //@line 1151
}
function b200(p0) {
 p0 = p0 | 0;
 nullFunc_vi(928); //@line 1148
}
function b199(p0) {
 p0 = p0 | 0;
 nullFunc_vi(927); //@line 1145
}
function b198(p0) {
 p0 = p0 | 0;
 nullFunc_vi(926); //@line 1142
}
function b197(p0) {
 p0 = p0 | 0;
 nullFunc_vi(925); //@line 1139
}
function b196(p0) {
 p0 = p0 | 0;
 nullFunc_vi(924); //@line 1136
}
function b195(p0) {
 p0 = p0 | 0;
 nullFunc_vi(923); //@line 1133
}
function b194(p0) {
 p0 = p0 | 0;
 nullFunc_vi(922); //@line 1130
}
function b193(p0) {
 p0 = p0 | 0;
 nullFunc_vi(921); //@line 1127
}
function b192(p0) {
 p0 = p0 | 0;
 nullFunc_vi(920); //@line 1124
}
function b191(p0) {
 p0 = p0 | 0;
 nullFunc_vi(919); //@line 1121
}
function b190(p0) {
 p0 = p0 | 0;
 nullFunc_vi(918); //@line 1118
}
function b189(p0) {
 p0 = p0 | 0;
 nullFunc_vi(917); //@line 1115
}
function b188(p0) {
 p0 = p0 | 0;
 nullFunc_vi(916); //@line 1112
}
function b187(p0) {
 p0 = p0 | 0;
 nullFunc_vi(915); //@line 1109
}
function b186(p0) {
 p0 = p0 | 0;
 nullFunc_vi(914); //@line 1106
}
function b185(p0) {
 p0 = p0 | 0;
 nullFunc_vi(913); //@line 1103
}
function b184(p0) {
 p0 = p0 | 0;
 nullFunc_vi(912); //@line 1100
}
function b183(p0) {
 p0 = p0 | 0;
 nullFunc_vi(911); //@line 1097
}
function b182(p0) {
 p0 = p0 | 0;
 nullFunc_vi(910); //@line 1094
}
function b181(p0) {
 p0 = p0 | 0;
 nullFunc_vi(909); //@line 1091
}
function b180(p0) {
 p0 = p0 | 0;
 nullFunc_vi(908); //@line 1088
}
function b179(p0) {
 p0 = p0 | 0;
 nullFunc_vi(907); //@line 1085
}
function b178(p0) {
 p0 = p0 | 0;
 nullFunc_vi(906); //@line 1082
}
function b177(p0) {
 p0 = p0 | 0;
 nullFunc_vi(905); //@line 1079
}
function b176(p0) {
 p0 = p0 | 0;
 nullFunc_vi(904); //@line 1076
}
function b175(p0) {
 p0 = p0 | 0;
 nullFunc_vi(903); //@line 1073
}
function b174(p0) {
 p0 = p0 | 0;
 nullFunc_vi(902); //@line 1070
}
function b173(p0) {
 p0 = p0 | 0;
 nullFunc_vi(901); //@line 1067
}
function b172(p0) {
 p0 = p0 | 0;
 nullFunc_vi(900); //@line 1064
}
function b171(p0) {
 p0 = p0 | 0;
 nullFunc_vi(899); //@line 1061
}
function b170(p0) {
 p0 = p0 | 0;
 nullFunc_vi(898); //@line 1058
}
function b169(p0) {
 p0 = p0 | 0;
 nullFunc_vi(897); //@line 1055
}
function b168(p0) {
 p0 = p0 | 0;
 nullFunc_vi(896); //@line 1052
}
function b167(p0) {
 p0 = p0 | 0;
 nullFunc_vi(895); //@line 1049
}
function b166(p0) {
 p0 = p0 | 0;
 nullFunc_vi(894); //@line 1046
}
function b165(p0) {
 p0 = p0 | 0;
 nullFunc_vi(893); //@line 1043
}
function b164(p0) {
 p0 = p0 | 0;
 nullFunc_vi(892); //@line 1040
}
function b163(p0) {
 p0 = p0 | 0;
 nullFunc_vi(891); //@line 1037
}
function b162(p0) {
 p0 = p0 | 0;
 nullFunc_vi(890); //@line 1034
}
function b161(p0) {
 p0 = p0 | 0;
 nullFunc_vi(889); //@line 1031
}
function b160(p0) {
 p0 = p0 | 0;
 nullFunc_vi(888); //@line 1028
}
function b159(p0) {
 p0 = p0 | 0;
 nullFunc_vi(887); //@line 1025
}
function b158(p0) {
 p0 = p0 | 0;
 nullFunc_vi(886); //@line 1022
}
function b157(p0) {
 p0 = p0 | 0;
 nullFunc_vi(885); //@line 1019
}
function b156(p0) {
 p0 = p0 | 0;
 nullFunc_vi(884); //@line 1016
}
function b155(p0) {
 p0 = p0 | 0;
 nullFunc_vi(883); //@line 1013
}
function b154(p0) {
 p0 = p0 | 0;
 nullFunc_vi(882); //@line 1010
}
function b153(p0) {
 p0 = p0 | 0;
 nullFunc_vi(881); //@line 1007
}
function b152(p0) {
 p0 = p0 | 0;
 nullFunc_vi(880); //@line 1004
}
function b151(p0) {
 p0 = p0 | 0;
 nullFunc_vi(879); //@line 1001
}
function _dummy($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 10337
}
function ___lockfile($0) {
 $0 = $0 | 0;
 return 0; //@line 10532
}
function b150(p0) {
 p0 = p0 | 0;
 nullFunc_vi(878); //@line 998
}
function b149(p0) {
 p0 = p0 | 0;
 nullFunc_vi(877); //@line 995
}
function b148(p0) {
 p0 = p0 | 0;
 nullFunc_vi(876); //@line 992
}
function b147(p0) {
 p0 = p0 | 0;
 nullFunc_vi(875); //@line 989
}
function b146(p0) {
 p0 = p0 | 0;
 nullFunc_vi(874); //@line 986
}
function b145(p0) {
 p0 = p0 | 0;
 nullFunc_vi(873); //@line 983
}
function b144(p0) {
 p0 = p0 | 0;
 nullFunc_vi(872); //@line 980
}
function b143(p0) {
 p0 = p0 | 0;
 nullFunc_vi(871); //@line 977
}
function b142(p0) {
 p0 = p0 | 0;
 nullFunc_vi(870); //@line 974
}
function b141(p0) {
 p0 = p0 | 0;
 nullFunc_vi(869); //@line 971
}
function b140(p0) {
 p0 = p0 | 0;
 nullFunc_vi(868); //@line 968
}
function b139(p0) {
 p0 = p0 | 0;
 nullFunc_vi(867); //@line 965
}
function b138(p0) {
 p0 = p0 | 0;
 nullFunc_vi(866); //@line 962
}
function b137(p0) {
 p0 = p0 | 0;
 nullFunc_vi(865); //@line 959
}
function b136(p0) {
 p0 = p0 | 0;
 nullFunc_vi(864); //@line 956
}
function b135(p0) {
 p0 = p0 | 0;
 nullFunc_vi(863); //@line 953
}
function b134(p0) {
 p0 = p0 | 0;
 nullFunc_vi(862); //@line 950
}
function b133(p0) {
 p0 = p0 | 0;
 nullFunc_vi(861); //@line 947
}
function b132(p0) {
 p0 = p0 | 0;
 nullFunc_vi(860); //@line 944
}
function b131(p0) {
 p0 = p0 | 0;
 nullFunc_vi(859); //@line 941
}
function b130(p0) {
 p0 = p0 | 0;
 nullFunc_vi(858); //@line 938
}
function b129(p0) {
 p0 = p0 | 0;
 nullFunc_vi(857); //@line 935
}
function b128(p0) {
 p0 = p0 | 0;
 nullFunc_vi(856); //@line 932
}
function b127(p0) {
 p0 = p0 | 0;
 nullFunc_vi(855); //@line 929
}
function b126(p0) {
 p0 = p0 | 0;
 nullFunc_vi(854); //@line 926
}
function b125(p0) {
 p0 = p0 | 0;
 nullFunc_vi(853); //@line 923
}
function b124(p0) {
 p0 = p0 | 0;
 nullFunc_vi(852); //@line 920
}
function b123(p0) {
 p0 = p0 | 0;
 nullFunc_vi(851); //@line 917
}
function b122(p0) {
 p0 = p0 | 0;
 nullFunc_vi(850); //@line 914
}
function b121(p0) {
 p0 = p0 | 0;
 nullFunc_vi(849); //@line 911
}
function b120(p0) {
 p0 = p0 | 0;
 nullFunc_vi(848); //@line 908
}
function b119(p0) {
 p0 = p0 | 0;
 nullFunc_vi(847); //@line 905
}
function b118(p0) {
 p0 = p0 | 0;
 nullFunc_vi(846); //@line 902
}
function b117(p0) {
 p0 = p0 | 0;
 nullFunc_vi(845); //@line 899
}
function b116(p0) {
 p0 = p0 | 0;
 nullFunc_vi(844); //@line 896
}
function b115(p0) {
 p0 = p0 | 0;
 nullFunc_vi(843); //@line 893
}
function b114(p0) {
 p0 = p0 | 0;
 nullFunc_vi(842); //@line 890
}
function b113(p0) {
 p0 = p0 | 0;
 nullFunc_vi(841); //@line 887
}
function b112(p0) {
 p0 = p0 | 0;
 nullFunc_vi(840); //@line 884
}
function b111(p0) {
 p0 = p0 | 0;
 nullFunc_vi(839); //@line 881
}
function b110(p0) {
 p0 = p0 | 0;
 nullFunc_vi(838); //@line 878
}
function b109(p0) {
 p0 = p0 | 0;
 nullFunc_vi(837); //@line 875
}
function b108(p0) {
 p0 = p0 | 0;
 nullFunc_vi(836); //@line 872
}
function b107(p0) {
 p0 = p0 | 0;
 nullFunc_vi(835); //@line 869
}
function b106(p0) {
 p0 = p0 | 0;
 nullFunc_vi(834); //@line 866
}
function b105(p0) {
 p0 = p0 | 0;
 nullFunc_vi(833); //@line 863
}
function b104(p0) {
 p0 = p0 | 0;
 nullFunc_vi(832); //@line 860
}
function b103(p0) {
 p0 = p0 | 0;
 nullFunc_vi(831); //@line 857
}
function b102(p0) {
 p0 = p0 | 0;
 nullFunc_vi(830); //@line 854
}
function b101(p0) {
 p0 = p0 | 0;
 nullFunc_vi(829); //@line 851
}
function b100(p0) {
 p0 = p0 | 0;
 nullFunc_vi(828); //@line 848
}
function __ZN7LoRaMacD2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterfaceD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function b99(p0) {
 p0 = p0 | 0;
 nullFunc_vi(827); //@line 845
}
function b98(p0) {
 p0 = p0 | 0;
 nullFunc_vi(826); //@line 842
}
function b97(p0) {
 p0 = p0 | 0;
 nullFunc_vi(825); //@line 839
}
function b96(p0) {
 p0 = p0 | 0;
 nullFunc_vi(824); //@line 836
}
function b95(p0) {
 p0 = p0 | 0;
 nullFunc_vi(823); //@line 833
}
function b94(p0) {
 p0 = p0 | 0;
 nullFunc_vi(822); //@line 830
}
function b93(p0) {
 p0 = p0 | 0;
 nullFunc_vi(821); //@line 827
}
function b92(p0) {
 p0 = p0 | 0;
 nullFunc_vi(820); //@line 824
}
function b91(p0) {
 p0 = p0 | 0;
 nullFunc_vi(819); //@line 821
}
function b90(p0) {
 p0 = p0 | 0;
 nullFunc_vi(818); //@line 818
}
function b89(p0) {
 p0 = p0 | 0;
 nullFunc_vi(817); //@line 815
}
function b88(p0) {
 p0 = p0 | 0;
 nullFunc_vi(816); //@line 812
}
function b87(p0) {
 p0 = p0 | 0;
 nullFunc_vi(815); //@line 809
}
function b86(p0) {
 p0 = p0 | 0;
 nullFunc_vi(814); //@line 806
}
function b85(p0) {
 p0 = p0 | 0;
 nullFunc_vi(813); //@line 803
}
function b84(p0) {
 p0 = p0 | 0;
 nullFunc_vi(812); //@line 800
}
function b83(p0) {
 p0 = p0 | 0;
 nullFunc_vi(811); //@line 797
}
function b82(p0) {
 p0 = p0 | 0;
 nullFunc_vi(810); //@line 794
}
function b81(p0) {
 p0 = p0 | 0;
 nullFunc_vi(809); //@line 791
}
function b80(p0) {
 p0 = p0 | 0;
 nullFunc_vi(808); //@line 788
}
function b79(p0) {
 p0 = p0 | 0;
 nullFunc_vi(807); //@line 785
}
function b78(p0) {
 p0 = p0 | 0;
 nullFunc_vi(806); //@line 782
}
function b77(p0) {
 p0 = p0 | 0;
 nullFunc_vi(805); //@line 779
}
function b76(p0) {
 p0 = p0 | 0;
 nullFunc_vi(804); //@line 776
}
function b75(p0) {
 p0 = p0 | 0;
 nullFunc_vi(803); //@line 773
}
function b74(p0) {
 p0 = p0 | 0;
 nullFunc_vi(802); //@line 770
}
function b73(p0) {
 p0 = p0 | 0;
 nullFunc_vi(801); //@line 767
}
function b72(p0) {
 p0 = p0 | 0;
 nullFunc_vi(800); //@line 764
}
function b71(p0) {
 p0 = p0 | 0;
 nullFunc_vi(799); //@line 761
}
function b70(p0) {
 p0 = p0 | 0;
 nullFunc_vi(798); //@line 758
}
function b69(p0) {
 p0 = p0 | 0;
 nullFunc_vi(797); //@line 755
}
function b68(p0) {
 p0 = p0 | 0;
 nullFunc_vi(796); //@line 752
}
function b67(p0) {
 p0 = p0 | 0;
 nullFunc_vi(795); //@line 749
}
function b66(p0) {
 p0 = p0 | 0;
 nullFunc_vi(794); //@line 746
}
function b65(p0) {
 p0 = p0 | 0;
 nullFunc_vi(793); //@line 743
}
function b64(p0) {
 p0 = p0 | 0;
 nullFunc_vi(792); //@line 740
}
function b63(p0) {
 p0 = p0 | 0;
 nullFunc_vi(791); //@line 737
}
function b62(p0) {
 p0 = p0 | 0;
 nullFunc_vi(790); //@line 734
}
function b61(p0) {
 p0 = p0 | 0;
 nullFunc_vi(789); //@line 731
}
function b60(p0) {
 p0 = p0 | 0;
 nullFunc_vi(788); //@line 728
}
function b59(p0) {
 p0 = p0 | 0;
 nullFunc_vi(787); //@line 725
}
function b58(p0) {
 p0 = p0 | 0;
 nullFunc_vi(786); //@line 722
}
function b57(p0) {
 p0 = p0 | 0;
 nullFunc_vi(785); //@line 719
}
function b56(p0) {
 p0 = p0 | 0;
 nullFunc_vi(784); //@line 716
}
function b55(p0) {
 p0 = p0 | 0;
 nullFunc_vi(783); //@line 713
}
function b54(p0) {
 p0 = p0 | 0;
 nullFunc_vi(782); //@line 710
}
function b53(p0) {
 p0 = p0 | 0;
 nullFunc_vi(781); //@line 707
}
function b52(p0) {
 p0 = p0 | 0;
 nullFunc_vi(780); //@line 704
}
function b51(p0) {
 p0 = p0 | 0;
 nullFunc_vi(779); //@line 701
}
function b50(p0) {
 p0 = p0 | 0;
 nullFunc_vi(778); //@line 698
}
function b49(p0) {
 p0 = p0 | 0;
 nullFunc_vi(777); //@line 695
}
function b48(p0) {
 p0 = p0 | 0;
 nullFunc_vi(776); //@line 692
}
function b47(p0) {
 p0 = p0 | 0;
 nullFunc_vi(775); //@line 689
}
function _sleep_manager_unlock_deep_sleep_internal() {
 return;
}
function _initialize__async_cb_380($0) {
 $0 = $0 | 0;
 return;
}
function _us_ticker_set_interrupt($0) {
 $0 = $0 | 0;
 return;
}
function _invoke_ticker__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___clang_call_terminate__async_cb($0) {
 $0 = $0 | 0;
}
function __ZN14LoRaMacCommandD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function b46(p0) {
 p0 = p0 | 0;
 nullFunc_vi(0); //@line 686
}
function _sleep_manager_lock_deep_sleep_internal() {
 return;
}
function _us_ticker_get_info() {
 return 10120; //@line 6907
}
function _serial_putc__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _get_us_ticker_data() {
 return 10064; //@line 6116
}
function ___errno_location() {
 return 23096; //@line 10331
}
function __ZSt9terminatev__async_cb_351($0) {
 $0 = $0 | 0;
}
function __ZN11LoRaMacMlmeD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMcpsD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN11LoRaMacMcpsC2Ev($0) {
 $0 = $0 | 0;
 return;
}
function ___cxa_guard_release($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN10LoRaMacMibD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function getTempRet0() {
 return tempRet0 | 0; //@line 42
}
function _wait_ms__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___cxa_guard_abort($0) {
 $0 = $0 | 0;
 return;
}
function stackSave() {
 return STACKTOP | 0; //@line 12
}
function _pthread_self() {
 return 10388; //@line 10384
}
function _core_util_critical_section_enter() {
 return;
}
function __ZSt9terminatev__async_cb($0) {
 $0 = $0 | 0;
}
function _core_util_critical_section_exit() {
 return;
}
function _us_ticker_read() {
 return 0; //@line 6698
}
function ___unlockfile($0) {
 $0 = $0 | 0;
 return;
}
function _us_ticker_disable_interrupt() {
 return;
}
function _us_ticker_clear_interrupt() {
 return;
}
function setAsync() {
 ___async = 1; //@line 26
}
function _us_ticker_fire_interrupt() {
 return;
}
function b44() {
 nullFunc_v(0); //@line 680
}
function _us_ticker_init() {
 return;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b1,_ccm_ctx_alloc,_gcm_ctx_alloc,_aes_ctx_alloc,_us_ticker_read,_us_ticker_get_info,b2,b3];
var FUNCTION_TABLE_ii = [b5,__ZN16SX1276_LoRaRadio6randomEv,__ZN16SX1276_LoRaRadio10get_statusEv,__ZN16LoRaWANInterface7connectEv,__ZN16LoRaWANInterface10disconnectEv,__ZN16LoRaWANInterface22add_link_check_requestEv,__ZN16LoRaWANInterface24enable_adaptive_datarateEv,__ZN16LoRaWANInterface25disable_adaptive_datarateEv,__ZN16LoRaWANInterface19remove_channel_planEv,___stdio_close,b6,b7,b8,b9,b10,b11];
var FUNCTION_TABLE_iii = [b13,__ZN16SX1276_LoRaRadio18check_rf_frequencyEj,__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE,__ZN16LoRaWANInterface7connectERK15lorawan_connect,__ZN16LoRaWANInterface12set_datarateEh,__ZN16LoRaWANInterface25set_confirmed_msg_retriesEh,__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan,__ZN16LoRaWANInterface16get_channel_planER16lora_channelplan,__ZN16LoRaWANInterface14remove_channelEh,__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t,__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s,__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s,__ZN7LoRaPHY25accept_tx_param_setup_reqEP20tx_param_setup_req_s,__ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s,__ZN7LoRaPHY16get_alternate_DREh,__ZN7LoRaPHY14remove_channelEh,__ZN7LoRaPHY16verify_frequencyEj,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25
,b26,b27,b28];
var FUNCTION_TABLE_iiii = [b30,__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa,__ZN7LoRaPHY11add_channelEP16channel_params_th,__ZN7LoRaPHY15apply_DR_offsetEaa,_ccm_aes_setkey_wrap,_gcm_aes_setkey_wrap,_aes_setkey_enc_wrap,_aes_setkey_dec_wrap,___stdio_write,___stdio_seek,___stdout_write,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_get_pkcs_padding,b31];
var FUNCTION_TABLE_iiiii = [b33,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj,_aes_crypt_ecb_wrap,b34];
var FUNCTION_TABLE_iiiiii = [b36,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj,__ZN16LoRaWANInterface4sendEhPKhti,__ZN16LoRaWANInterface7receiveEhPhti,__ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_,b37,b38,b39];
var FUNCTION_TABLE_iiiiiii = [b41,__ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_,_aes_crypt_cbc_wrap,b42];
var FUNCTION_TABLE_v = [b44,___cxa_pure_virtual__wrapper,_us_ticker_init,_us_ticker_disable_interrupt,_us_ticker_clear_interrupt,_us_ticker_fire_interrupt,__ZL25default_terminate_handlerv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev];
var FUNCTION_TABLE_vi = [b46,__ZN16SX1276_LoRaRadio11radio_resetEv,__ZN16SX1276_LoRaRadio5sleepEv,__ZN16SX1276_LoRaRadio7standbyEv,__ZN16SX1276_LoRaRadio9start_cadEv,__ZN16SX1276_LoRaRadio4lockEv,__ZN16SX1276_LoRaRadio6unlockEv,__ZN16SX1276_LoRaRadioD2Ev,__ZN16SX1276_LoRaRadioD0Ev,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv,__ZN4mbed11InterruptInD2Ev,__ZN4mbed11InterruptInD0Ev,__ZN4mbed7TimeoutD2Ev,__ZN4mbed7TimeoutD0Ev,__ZN4mbed7Timeout7handlerEv,__ZN4mbed10TimerEventD2Ev,__ZN4mbed10TimerEventD0Ev,__ZN16LoRaWANInterface25remove_link_check_requestEv,__ZN16LoRaWANInterfaceD2Ev,__ZN16LoRaWANInterfaceD0Ev,__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv,__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv,__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv,__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPv,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv,__ZN4mbed8CallbackIFvPhtsaEE13function_dtorINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPv,__ZN7LoRaPHYD2Ev
,__ZN7LoRaPHYD0Ev,__ZN7LoRaPHY24restore_default_channelsEv,__ZN12LoRaPHYEU868D2Ev,__ZN12LoRaPHYEU868D0Ev,_ccm_ctx_free,_gcm_ctx_free,_aes_ctx_free,_us_ticker_set_interrupt,__ZN4mbed10TimerEvent3irqEj,__ZN4mbed6TickerD2Ev,__ZN4mbed6TickerD0Ev,__ZN4mbed6Ticker7handlerEv,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb,__ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb_43,__ZN16SX1276_LoRaRadio11radio_resetEv__async_cb,__ZN16SX1276_LoRaRadio5sleepEv__async_cb_62,__ZN16SX1276_LoRaRadio5sleepEv__async_cb,__ZN16SX1276_LoRaRadio5sleepEv__async_cb_63,__ZN16SX1276_LoRaRadio7standbyEv__async_cb_71,__ZN16SX1276_LoRaRadio7standbyEv__async_cb_70,__ZN16SX1276_LoRaRadio7standbyEv__async_cb_72,__ZN16SX1276_LoRaRadio7standbyEv__async_cb,__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb_362,__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb_361
,__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb__async_cb,__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_366,__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_365,__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb_364,__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj__async_cb,__ZN16SX1276_LoRaRadio4sendEPhh__async_cb,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_404,__ZN16SX1276_LoRaRadio11rx_done_irqEv,__ZN16SX1276_LoRaRadio7receiveEj__async_cb,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_395,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_396,__ZN16SX1276_LoRaRadio15timeout_irq_isrEv,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_397,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_398,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_399,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_403,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_406,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_402,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_401,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_405,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_400,__ZN16SX1276_LoRaRadio11set_channelEj__async_cb,__ZN16SX1276_LoRaRadio6randomEv__async_cb,__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh__async_cb_492,__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh__async_cb,__ZN16SX1276_LoRaRadio18set_public_networkEb__async_cb_244,__ZN16SX1276_LoRaRadio18set_public_networkEb__async_cb,__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh__async_cb_268,__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh__async_cb,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_278
,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_277,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_276,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_279,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_275,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_284,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_280,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_281,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_283,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_274,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_282,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_273,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_272,__ZN16SX1276_LoRaRadio9start_cadEv__async_cb,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_462,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_459,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_461,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_463,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_460,__ZN16SX1276_LoRaRadioD2Ev__async_cb,__ZN16SX1276_LoRaRadioD2Ev__async_cb_89,__ZN16SX1276_LoRaRadioD2Ev__async_cb_83,__ZN16SX1276_LoRaRadioD2Ev__async_cb_88,__ZN16SX1276_LoRaRadioD2Ev__async_cb_84,__ZN16SX1276_LoRaRadioD2Ev__async_cb_87,__ZN16SX1276_LoRaRadioD2Ev__async_cb_85,__ZN16SX1276_LoRaRadioD2Ev__async_cb_86,__ZN16SX1276_LoRaRadioD2Ev__async_cb_95,__ZN16SX1276_LoRaRadioD2Ev__async_cb_94
,__ZN16SX1276_LoRaRadioD2Ev__async_cb_93,__ZN16SX1276_LoRaRadioD2Ev__async_cb_92,__ZN16SX1276_LoRaRadioD2Ev__async_cb_91,__ZN16SX1276_LoRaRadioD2Ev__async_cb_90,__ZN16SX1276_LoRaRadioD0Ev__async_cb,__ZN16SX1276_LoRaRadio18set_low_power_modeEv__async_cb,__ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb_200,__ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb,__ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_356,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_352,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_353,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_354,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_355,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_27,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_26,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_28,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_25,__ZN16SX1276_LoRaRadio11tx_done_irqEv,__ZN16SX1276_LoRaRadio8transmitEj__async_cb,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_23,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_24,__ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb,_handle_lora_downlink__async_cb,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_76,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_75,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_74,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb
,__ZN4mbed11InterruptInD2Ev__async_cb,__ZN4mbed11InterruptInD2Ev__async_cb_96,__ZN4mbed11InterruptInD0Ev__async_cb,__ZN4mbed11InterruptInD0Ev__async_cb_97,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_289,__ZN4mbed7TimeoutD2Ev__async_cb,__ZN4mbed7TimeoutD2Ev__async_cb_313,__ZN4mbed7TimeoutD0Ev__async_cb,__ZN4mbed7TimeoutD0Ev__async_cb_337,__ZN4mbed7Timeout7handlerEv__async_cb_205,__ZN4mbed7Timeout7handlerEv__async_cb,__ZN4mbed5TimerC2Ev__async_cb,__ZN4mbed5Timer5startEv__async_cb,__ZN4mbed5Timer7read_msEv__async_cb,__ZN4mbed10TimerEventD2Ev__async_cb,__ZN4mbed10TimerEventC2Ev__async_cb,__ZN4mbed10TimerEvent3irqEj__async_cb,__ZN6events10EventQueue6cancelEi__async_cb,_equeue_post__async_cb,_equeue_enqueue__async_cb,_equeue_cancel__async_cb,__ZN16LoRaWANInterface7connectEv__async_cb,__ZN16LoRaWANInterface4sendEhPKhti__async_cb,__ZN16LoRaWANInterface4sendEhPKhti__async_cb_20,__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb,__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_198,__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb_199,__ZN12LoRaWANStackC2Ev__async_cb,__ZN12LoRaWANStackC2Ev__async_cb_201
,__ZN12LoRaWANStackC2Ev__async_cb_202,__ZN12LoRaWANStackC2Ev__async_cb_203,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_166,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_173,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_165,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_164,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_169,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_159,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_172,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_160,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_168,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_161,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_171,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_162,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_167,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_163,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t__async_cb_170,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_186,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_185,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_189,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_182,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_191,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_183,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_188,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_184,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_190,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t__async_cb_187,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_113
,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_120,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_117,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_112,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_116,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_111,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_115,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_108,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_119,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_109,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_114,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_110,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t__async_cb_118,__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb,__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_217,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_226,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_225,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_224,__ZN12LoRaWANStack18lora_state_machineEv__async_cb,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_232,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_206,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_237,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_227,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_207,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_231,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_208,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_236,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_223,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_222
,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_221,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_220,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_219,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_209,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_230,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_210,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_235,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_218,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_216,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_211,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_229,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_212,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_234,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_215,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_213,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_228,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_214,__ZN12LoRaWANStack18lora_state_machineEv__async_cb_233,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_245,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_246,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_249,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_247,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_248,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_479,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_480,__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv
,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_483,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_481,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_482,__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_420,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_419,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb,__ZN12LoRaWANStack17send_frame_to_macEv__async_cb_360,__ZN12LoRaWANStack17send_frame_to_macEv__async_cb_359,__ZN12LoRaWANStack17send_frame_to_macEv__async_cb_358,__ZN12LoRaWANStack17send_frame_to_macEv__async_cb,__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_56,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_58,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_55,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_54,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_53,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_57,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_52,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_51,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb_59,__ZN12LoRaWANStack9handle_txEhPKhth__async_cb,__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2___async_cb,__ZN12LoRaWANStack17get_lorawan_stackEv__async_cb,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb,__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_180,__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_179
,__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb,__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb_181,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_123,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_124,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_125,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_126,__ZN12LoRaWANStack18set_lora_callbacksEP23lorawan_app_callbacks_t__async_cb_127,__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb,__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb_102,__ZN12LoRaWANStack17drop_channel_listEv__async_cb,__ZN12LoRaWANStack17drop_channel_listEv__async_cb_77,__ZN12LoRaWANStack16remove_a_channelEh__async_cb,__ZN12LoRaWANStack16remove_a_channelEh__async_cb_73,__ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan__async_cb,__ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb,__ZN12LoRaWANStack24enable_adaptive_datarateEb__async_cb_334,__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_310,__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_311,__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb,__ZN12LoRaWANStack21set_channel_data_rateEh__async_cb_312,__ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb,__ZN12LoRaWANStack20join_request_by_otaaERK15lorawan_connect__async_cb_295,__ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb,__ZN12LoRaWANStack29activation_by_personalizationERK15lorawan_connect__async_cb_288,__ZN12LoRaWANStack22set_link_check_requestEv__async_cb,__ZN12LoRaWANStack22set_link_check_requestEv__async_cb_266,__ZN12LoRaWANStack8shutdownEv__async_cb,__ZN7LoRaMacD2Ev__async_cb_487,__ZN7LoRaMacD2Ev__async_cb
,__ZN12radio_eventsD2Ev__async_cb,__ZN12radio_eventsD2Ev__async_cb_464,__ZN12radio_eventsD2Ev__async_cb_465,__ZN12radio_eventsD2Ev__async_cb_466,__ZN12radio_eventsD2Ev__async_cb_467,__ZN12radio_eventsD2Ev__async_cb_468,__ZN12radio_eventsD2Ev__async_cb_469,__ZN14lorawan_timersD2Ev__async_cb,__ZN14lorawan_timersD2Ev__async_cb_455,__ZN14lorawan_timersD2Ev__async_cb_456,__ZN14lorawan_timersD2Ev__async_cb_457,__ZN14lorawan_timersD2Ev__async_cb_458,__ZN7LoRaMac16on_radio_tx_doneEv,__ZN7LoRaMac14handle_tx_doneEv__async_cb,__ZN7LoRaMac14handle_tx_doneEv__async_cb_421,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_411,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_416,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_410,__ZN7LoRaMac25on_rx_window2_timer_eventEv,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_417,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_418,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_415,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_414,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_413,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb,__ZN7LoRaMac16on_radio_tx_doneEv__async_cb_412,__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv,__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_391
,__ZN6events10EventQueue4callI7LoRaMacvEEiPT_MS3_FT0_vE__async_cb_390,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_44,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb,__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_99,__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_101,__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb,__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_98,__ZN7LoRaMac25on_rx_window2_timer_eventEv__async_cb_100,__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_121,__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb,__ZN7LoRaMac14handle_rx_doneEPhtsa__async_cb_122,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_132,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_145,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_151,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_140,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_143,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_139,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_138,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_142,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_141,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_137,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_136,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_135,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_148,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_131,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_147,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_130
,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_146,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_129,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_150,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_149,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_134,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_133,__ZN7LoRaMac16on_radio_rx_doneEPhtsa__async_cb_144,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_174,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_175,__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_178,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_176,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPhtsaEEES4_tsaEEiT_T0_T1_T2_T3___async_cb_177,__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb_204,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPhtsaEEES5_tsaEEEEvPv__async_cb,__ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa__async_cb,__ZN7LoRaMac21prepare_rx_done_abortEv__async_cb,__ZN7LoRaMac26on_ack_timeout_timer_eventEv,__ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_33,__ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_34,__ZN7LoRaMac21prepare_rx_done_abortEv__async_cb_32,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_45,__ZN7LoRaMac17on_radio_rx_errorEv,__ZN7LoRaMac15handle_rx_errorEv__async_cb,__ZN7LoRaMac15handle_rx_errorEv__async_cb_60,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_64
,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_66,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_68,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_65,__ZN7LoRaMac17on_radio_rx_errorEv__async_cb_67,__ZN7LoRaMac19on_radio_rx_timeoutEv,__ZN7LoRaMac17handle_rx_timeoutEv__async_cb,__ZN7LoRaMac17handle_rx_timeoutEv__async_cb_357,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_370,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_373,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_375,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_372,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_374,__ZN7LoRaMac19on_radio_rx_timeoutEv__async_cb_371,__ZN7LoRaMac19on_radio_tx_timeoutEv,__ZN7LoRaMac17handle_tx_timeoutEv__async_cb,__ZN7LoRaMac17handle_tx_timeoutEv__async_cb_369,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_386,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_387,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_388,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_389,__ZN7LoRaMac30on_mac_state_check_timer_eventEv,__ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb,__ZN7LoRaMac34handle_mac_state_check_timer_eventEv__async_cb_407,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_433,__ZN7LoRaMac25on_tx_delayed_timer_eventEv,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_432,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_440
,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_431,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_439,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_429,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_438,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_422,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_437,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_423,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_427,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_428,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_426,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_430,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_436,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_435,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_424,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_434,__ZN7LoRaMac30on_mac_state_check_timer_eventEv__async_cb_425,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_451,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_454,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_452,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_453,__ZN7LoRaMac25on_tx_delayed_timer_eventEv__async_cb_450,__ZN7LoRaMac11schedule_txEv__async_cb,__ZN7LoRaMac11schedule_txEv__async_cb_470,__ZN7LoRaMac11schedule_txEv__async_cb_476,__ZN7LoRaMac11schedule_txEv__async_cb_471,__ZN7LoRaMac11schedule_txEv__async_cb_472,__ZN7LoRaMac11schedule_txEv__async_cb_473,__ZN7LoRaMac11schedule_txEv__async_cb_475
,__ZN7LoRaMac11schedule_txEv__async_cb_478,__ZN7LoRaMac11schedule_txEv__async_cb_474,__ZN7LoRaMac11schedule_txEv__async_cb_477,__ZN7LoRaMac21send_frame_on_channelEh__async_cb_485,__ZN7LoRaMac21send_frame_on_channelEh__async_cb,__ZN7LoRaMac21send_frame_on_channelEh__async_cb_486,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_240,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_238,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb_239,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPvt__async_cb,__ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb,__ZN7LoRaMac29handle_delayed_tx_timer_eventEv__async_cb_250,__ZN7LoRaMac18handle_ack_timeoutEv__async_cb,__ZN7LoRaMac18handle_ack_timeoutEv__async_cb_271,__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb,__ZN7LoRaMac25on_rx_window1_timer_eventEv,__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb_286,__ZN7LoRaMac22handle_rx1_timer_eventEv__async_cb_287,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_291,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_294,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_293,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_290,__ZN7LoRaMac25on_rx_window1_timer_eventEv__async_cb_292,__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb,__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb_308,__ZN7LoRaMac22handle_rx2_timer_eventEv__async_cb_309,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_323,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_324,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_325
,__ZN7LoRaMac34handle_mac_state_check_timer_eventEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_322,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb,__ZN7LoRaMac29handle_delayed_tx_timer_eventEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_321,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_314,__ZN7LoRaMac22handle_rx1_timer_eventEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_320,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_315,__ZN7LoRaMac22handle_rx2_timer_eventEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_319,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_316,__ZN7LoRaMac18handle_ack_timeoutEv,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_318,__ZN7LoRaMac10initializeEP20loramac_primitives_tP7LoRaPHYPN6events10EventQueueE__async_cb_317,__ZN7LoRaMac10disconnectEv__async_cb_342,__ZN7LoRaMac10disconnectEv__async_cb_341,__ZN7LoRaMac10disconnectEv__async_cb_340,__ZN7LoRaMac10disconnectEv__async_cb_339,__ZN7LoRaMac10disconnectEv__async_cb_338,__ZN7LoRaMac10disconnectEv__async_cb,__ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t__async_cb_82,__ZN7LoRaMac17query_tx_possibleEhP17loramac_tx_info_t__async_cb,__ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb,__ZN7LoRaMac19remove_channel_planEv__async_cb,__ZN7LoRaMac21remove_single_channelEh__async_cb,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_152,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_153,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_158
,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_157,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_155,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_156,__ZN7LoRaMac12mlme_requestEP18loramac_mlme_req_t__async_cb_154,__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb,__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb_196,__ZN7LoRaMac12mcps_requestEP18loramac_mcps_req_t__async_cb_197,__ZN7LoRaMac23mib_get_request_confirmEP25loramac_mib_req_confirm_t__async_cb,__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_15,__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_16,__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb,__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_17,__ZN7LoRaMac23mib_set_request_confirmEP25loramac_mib_req_confirm_t__async_cb_18,__ZN7LoRaMac14handle_tx_doneEv,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_1,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_2,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_3,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_4,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_5,__ZN7LoRaMac15handle_rx_errorEv,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_6,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_7,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_8,__ZN7LoRaMac17handle_tx_timeoutEv,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_9,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_10,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_11,__ZN7LoRaMac17handle_rx_timeoutEv,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_12
,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_13,__ZN7LoRaMac22get_phy_event_handlersEv__async_cb_14,__ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb,__ZN18LoRaMacChannelPlan11remove_planEv__async_cb,__ZN18LoRaMacChannelPlan11remove_planEv__async_cb_69,__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb,__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_61,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_343,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_344,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_345,__ZN14LoRaMacCommand20process_mac_commandsEPhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_346,__Z11compute_micPKhtS0_jhjPj__async_cb_106,__Z11compute_micPKhtS0_jhjPj__async_cb_105,__Z11compute_micPKhtS0_jhjPj__async_cb_103,__Z11compute_micPKhtS0_jhjPj__async_cb,__Z11compute_micPKhtS0_jhjPj__async_cb_104,__Z11compute_micPKhtS0_jhjPj__async_cb_107,__Z22compute_join_frame_micPKhtS0_Pj__async_cb_80,__Z22compute_join_frame_micPKhtS0_Pj__async_cb_79,__Z22compute_join_frame_micPKhtS0_Pj__async_cb,__Z22compute_join_frame_micPKhtS0_Pj__async_cb_78,__Z22compute_join_frame_micPKhtS0_Pj__async_cb_81,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_39,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_38,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_36,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_37,__ZN10LoRaMacMib11set_requestEP25loramac_mib_req_confirm_tP23loramac_protocol_params__async_cb_35,__ZN11LoRaMacMlme22set_tx_continuous_waveEhaafft__async_cb
,__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb,__ZN7LoRaPHY19request_new_channelEP24new_channel_req_params_s__async_cb_285,__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb,__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t__async_cb_269,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_326,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_327,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_328,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_329,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_330,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_331,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_332,__ZN7LoRaPHY9rx_configEP18rx_config_params_tPa__async_cb_333,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_296,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_297,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_298,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_299,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_300,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_301,__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb,__ZN7LoRaPHY18dl_channel_requestEP23dl_channel_req_params_s__async_cb,__ZN7LoRaPHY11add_channelEP16channel_params_th__async_cb,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_192,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_193,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_48,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_49,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb
,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_40,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_41,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_408,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_409,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_383,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_384,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_385,__ZN7LoRaPHY13get_radio_rngEv__async_cb,__ZN7LoRaPHY13get_radio_rngEv__async_cb_367,__ZN7LoRaPHY13get_radio_rngEv__async_cb_368,__ZN7LoRaPHY11handle_sendEPhh__async_cb_350,__ZN7LoRaPHY11handle_sendEPhh__async_cb,__ZN7LoRaPHY11handle_sendEPhh__async_cb_348,__ZN7LoRaPHY11handle_sendEPhh__async_cb_349,__ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb,__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb,__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_22,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_442,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_444,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_443,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_445,__ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb,_mbedtls_ccm_setkey__async_cb_336,_mbedtls_ccm_setkey__async_cb_335,_mbedtls_ccm_setkey__async_cb,_mbedtls_ccm_free__async_cb,_mbedtls_cipher_free__async_cb
,_mbedtls_cipher_setup__async_cb,_mbedtls_cipher_setkey__async_cb,_mbedtls_cipher_setkey__async_cb_195,_mbedtls_cipher_update__async_cb,_mbedtls_cipher_update__async_cb_243,_mbedtls_cipher_update__async_cb_241,_mbedtls_cipher_update__async_cb_242,_ccm_aes_setkey_wrap__async_cb,_ccm_ctx_free__async_cb,_gcm_aes_setkey_wrap__async_cb,_gcm_ctx_free__async_cb,_mbedtls_cipher_cmac_starts__async_cb,_mbedtls_cipher_cmac_update__async_cb_30,_mbedtls_cipher_cmac_update__async_cb_29,_mbedtls_cipher_cmac_update__async_cb,_mbedtls_cipher_cmac_finish__async_cb_21,_mbedtls_cipher_cmac_finish__async_cb,_mbedtls_gcm_setkey__async_cb_448,_mbedtls_gcm_setkey__async_cb_447,_mbedtls_gcm_setkey__async_cb_446,_mbedtls_gcm_setkey__async_cb,_mbedtls_gcm_update__async_cb,_mbedtls_gcm_free__async_cb,_ticker_set_handler__async_cb,_initialize__async_cb,_initialize__async_cb_377,_initialize__async_cb_382,_initialize__async_cb_381,_initialize__async_cb_378,_initialize__async_cb_379
,_initialize__async_cb_380,_schedule_interrupt__async_cb,_schedule_interrupt__async_cb_302,_schedule_interrupt__async_cb_303,_schedule_interrupt__async_cb_304,_schedule_interrupt__async_cb_305,_schedule_interrupt__async_cb_306,_schedule_interrupt__async_cb_307,_ticker_remove_event__async_cb,_ticker_read_us__async_cb_347,_ticker_read_us__async_cb,_mbed_assert_internal__async_cb,_mbed_die__async_cb_265,_mbed_die__async_cb_264,_mbed_die__async_cb_263,_mbed_die__async_cb_262,_mbed_die__async_cb_261,_mbed_die__async_cb_260,_mbed_die__async_cb_259,_mbed_die__async_cb_258,_mbed_die__async_cb_257,_mbed_die__async_cb_256,_mbed_die__async_cb_255,_mbed_die__async_cb_254,_mbed_die__async_cb_253,_mbed_die__async_cb_252,_mbed_die__async_cb_251,_mbed_die__async_cb,_mbed_error_printf__async_cb,_mbed_error_printf__async_cb_267
,_handle_interrupt_in__async_cb,_serial_putc__async_cb_128,_serial_putc__async_cb,__ZN4mbed6TickerD2Ev__async_cb,__ZN4mbed6TickerD2Ev__async_cb_42,__ZN4mbed6TickerD0Ev__async_cb,__ZN4mbed6TickerD0Ev__async_cb_47,__ZN4mbed6Ticker7handlerEv__async_cb,_invoke_ticker__async_cb_31,_invoke_ticker__async_cb,_wait_ms__async_cb,__GLOBAL__sub_I_main_cpp__async_cb,__GLOBAL__sub_I_main_cpp__async_cb_363,_putc__async_cb_46,_putc__async_cb,___overflow__async_cb,_fflush__async_cb_393,_fflush__async_cb_392,_fflush__async_cb_394,_fflush__async_cb,___fflush_unlocked__async_cb,___fflush_unlocked__async_cb_376,_vfprintf__async_cb,_vsnprintf__async_cb,_printf__async_cb,_putchar__async_cb,_fputc__async_cb_449,_fputc__async_cb,__ZL25default_terminate_handlerv__async_cb,__ZL25default_terminate_handlerv__async_cb_484
,_abort_message__async_cb,_abort_message__async_cb_493,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_50,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb,___dynamic_cast__async_cb,___dynamic_cast__async_cb_194,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_270,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,__ZSt11__terminatePFvvE__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_441,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_491,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_490,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_489,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_488,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_19,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,___cxa_can_catch__async_cb,___cxa_is_pointer_type__async_cb,b47,b48,b49,b50
,b51,b52,b53,b54,b55,b56,b57,b58,b59,b60,b61,b62,b63,b64,b65,b66,b67,b68,b69,b70,b71,b72,b73,b74,b75,b76,b77,b78,b79,b80
,b81,b82,b83,b84,b85,b86,b87,b88,b89,b90,b91,b92,b93,b94,b95,b96,b97,b98,b99,b100,b101,b102,b103,b104,b105,b106,b107,b108,b109,b110
,b111,b112,b113,b114,b115,b116,b117,b118,b119,b120,b121,b122,b123,b124,b125,b126,b127,b128,b129,b130,b131,b132,b133,b134,b135,b136,b137,b138,b139,b140
,b141,b142,b143,b144,b145,b146,b147,b148,b149,b150,b151,b152,b153,b154,b155,b156,b157,b158,b159,b160,b161,b162,b163,b164,b165,b166,b167,b168,b169,b170
,b171,b172,b173,b174,b175,b176,b177,b178,b179,b180,b181,b182,b183,b184,b185,b186,b187,b188,b189,b190,b191,b192,b193,b194,b195,b196,b197,b198,b199,b200
,b201,b202,b203,b204,b205,b206,b207,b208,b209,b210,b211,b212,b213,b214,b215,b216,b217,b218,b219,b220,b221,b222,b223,b224,b225,b226,b227,b228,b229,b230
,b231,b232,b233,b234,b235,b236,b237,b238,b239,b240,b241,b242,b243,b244,b245,b246,b247,b248,b249,b250,b251,b252,b253,b254,b255,b256,b257,b258,b259,b260
,b261,b262,b263,b264,b265,b266,b267,b268,b269,b270,b271,b272,b273,b274,b275,b276,b277,b278,b279,b280,b281,b282,b283,b284,b285,b286,b287,b288,b289,b290
,b291,b292,b293,b294,b295];
var FUNCTION_TABLE_vii = [b297,__ZN16SX1276_LoRaRadio10init_radioEP12radio_events,__ZN16SX1276_LoRaRadio7receiveEj,__ZN16SX1276_LoRaRadio11set_channelEj,__ZN16SX1276_LoRaRadio18set_public_networkEb,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_,__ZN4mbed8CallbackIFvP22loramac_mcps_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_,__ZN4mbed8CallbackIFvP25loramac_mcps_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_,__ZN4mbed8CallbackIFvP22loramac_mlme_confirm_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPKvS2_,__ZN4mbed8CallbackIFvP25loramac_mlme_indication_tEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvPhtsaEE13function_moveINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPvPKv,__ZN7LoRaPHY16set_last_tx_doneEP24set_band_txdone_params_t,__ZN7LoRaPHY13apply_cf_listEP15cflist_params_t,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event,__ZN12LoRaWANStack20mcps_confirm_handlerEP22loramac_mcps_confirm_t,__ZN12LoRaWANStack23mcps_indication_handlerEP25loramac_mcps_indication_t,__ZN12LoRaWANStack20mlme_confirm_handlerEP22loramac_mlme_confirm_t,__ZN12LoRaWANStack23mlme_indication_handlerEP25loramac_mlme_indication_t,b298,b299,b300,b301,b302,b303
,b304,b305,b306];
var FUNCTION_TABLE_viii = [b308,__ZN16SX1276_LoRaRadio4sendEPhh,__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj,_add_pkcs_padding,b309,b310,b311];
var FUNCTION_TABLE_viiii = [b313,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b314,b315,b316];
var FUNCTION_TABLE_viiiii = [b318,__ZN4mbed8CallbackIFvPhtsaEE13function_callINS3_14method_contextI7LoRaMacMS6_FvS1_tsaEEEEEvPKvS1_tsa,__ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZN7LoRaMac16on_radio_rx_doneEPhtsa,__ZN7LoRaMac14handle_rx_doneEPhtsa];
var FUNCTION_TABLE_viiiiii = [b320,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];
var FUNCTION_TABLE_viiiiiiiiiiiiii = [b322,__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj];
var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b324,__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb];

  return { __GLOBAL__sub_I_main_cpp: __GLOBAL__sub_I_main_cpp, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_alloc_async_context: _emscripten_alloc_async_context, _emscripten_async_resume: _emscripten_async_resume, _emscripten_free_async_context: _emscripten_free_async_context, _emscripten_realloc_async_context: _emscripten_realloc_async_context, _fflush: _fflush, _free: _free, _handle_interrupt_in: _handle_interrupt_in, _handle_lora_downlink: _handle_lora_downlink, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _invoke_ticker: _invoke_ticker, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memset: _memset, _pthread_mutex_lock: _pthread_mutex_lock, _pthread_mutex_unlock: _pthread_mutex_unlock, _sbrk: _sbrk, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setAsync: setAsync, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real___GLOBAL__sub_I_main_cpp = asm["__GLOBAL__sub_I_main_cpp"]; asm["__GLOBAL__sub_I_main_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_main_cpp.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__emscripten_alloc_async_context = asm["_emscripten_alloc_async_context"]; asm["_emscripten_alloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_alloc_async_context.apply(null, arguments);
};

var real__emscripten_async_resume = asm["_emscripten_async_resume"]; asm["_emscripten_async_resume"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_async_resume.apply(null, arguments);
};

var real__emscripten_free_async_context = asm["_emscripten_free_async_context"]; asm["_emscripten_free_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_free_async_context.apply(null, arguments);
};

var real__emscripten_realloc_async_context = asm["_emscripten_realloc_async_context"]; asm["_emscripten_realloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_realloc_async_context.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__handle_interrupt_in = asm["_handle_interrupt_in"]; asm["_handle_interrupt_in"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_interrupt_in.apply(null, arguments);
};

var real__handle_lora_downlink = asm["_handle_lora_downlink"]; asm["_handle_lora_downlink"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_lora_downlink.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__invoke_ticker = asm["_invoke_ticker"]; asm["_invoke_ticker"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__invoke_ticker.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_lock.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setAsync = asm["setAsync"]; asm["setAsync"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setAsync.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var __GLOBAL__sub_I_main_cpp = Module["__GLOBAL__sub_I_main_cpp"] = asm["__GLOBAL__sub_I_main_cpp"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_alloc_async_context = Module["_emscripten_alloc_async_context"] = asm["_emscripten_alloc_async_context"];
var _emscripten_async_resume = Module["_emscripten_async_resume"] = asm["_emscripten_async_resume"];
var _emscripten_free_async_context = Module["_emscripten_free_async_context"] = asm["_emscripten_free_async_context"];
var _emscripten_realloc_async_context = Module["_emscripten_realloc_async_context"] = asm["_emscripten_realloc_async_context"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _handle_interrupt_in = Module["_handle_interrupt_in"] = asm["_handle_interrupt_in"];
var _handle_lora_downlink = Module["_handle_lora_downlink"] = asm["_handle_lora_downlink"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _invoke_ticker = Module["_invoke_ticker"] = asm["_invoke_ticker"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memset = Module["_memset"] = asm["_memset"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setAsync = Module["setAsync"] = asm["setAsync"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = flush_NO_FILESYSTEM;
    if (flush) flush(0);
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}






//# sourceMappingURL=lorawan-abp.js.map